 The RideNow Project is designed to help individuals within a group or organization coordinate ad hoc shared rides. This paper describes three design decisions the RideNow team made in order to allow incremental adoption and evolution and to capitalize on local conditions. (1) The system allows users to interact with the system through email or Web, because we anticipate that email will be most conve-nient when there are few users but the Web interface will be more useful as the number of users increase. (2) The system does not force structure on user-entered data such as dates, times, and locations, instead allowing conventions to emerge. (3) We use the group X  X  shared physical spaces to provide additional information about ride sharing activity. D.2.2 [ Software Engineering ]: Design Tools and Tech-niques Design Social Computing, Design Methods
In the United States, there is tremendous unused trans-portation capacity in the form of unoccupied seats in private vehicles. Most vehicles can comfortably seat four or five, but rarely carry more than one[7]. Filling some of those empty seats could create tremendous benefits both to individuals and to society as a whole. Many riders would get to destina-tions more conveniently. Drivers and passengers sharing a ride might enjoy the pleasure of conversation. If riders would otherwise have taken their own vehicles, the total number Copyright 2005 ACM 1-59593-223-2/05/0011 ... $ 5.00. of miles driven would decline. That would reduce conges-tion for everyone using the roads and reduce smog and other negative externalities resulting from fuel consumption.
There are, however, several major barriers to ride shar-ing. First, it is difficult to coordinate routes and schedules, especially if people require flexible schedules. Uncertainties about coordination compound the problem, especially for riders: a one-way ride with the possibility of being stranded is of limited utility. Second, there are risks from riding with strangers, ranging from social discomfort with sharing what are currently thought of as private spaces to differing ex-pectations about cleanliness or driving habits to miscom-munication about routes and schedules to verbal or physical assault. Third, much as users have refused to adopt some of-fice groupware systems because those paying the costs were not the primary beneficiaries[3], ride sharing may not occur if the individual participants do not benefit. Riders may benefit while drivers incur costs. Both may experience in-convenience while others reap the benefits of reduced con-gestion and smog.

To overcome these barriers, in the United States local gov-ernments and employers have instituted services and policies to reduce the coordination costs associated with ride shar-ing and to increase the benefits for those who participate. Matching services help people form car pools. Parking lots are available near major highways so that members of the car pool can drive to a meeting point, thus reducing daily coordination costs. Many large employers provide subsidies and preferential parking to employees who form car or van pools. In some urban areas, congested highways have High Occupancy Vehicle (HOV) lanes reserved for cars with mul-tiple passengers. Regular car pools with the same passen-gers also overcome the risks of sharing a ride with strangers, since after the first few rides the participants are no longer strangers.

Efforts to encourage commuters to form car and van pools have been somewhat successful, though only at the margins. According to one survey, just 5% of people used an organized carpool at least once per month while 14% used some form of public transportation during the same period[8].
In a few cities, such as Washington, D.C. 1 and San Fran-cisco 2 ,  X  X nstant X  ride sharing has emerged among strangers. To take advantage of HOV lanes during peak commuting hours, drivers want to take passengers. Passengers line up at designated places; drivers pick them up and drop them at a fixed destination. Instant ride sharing reduces the coordi-http://www.slug-lines.com http://www.ridenow.org nation costs of fixed schedules inherent in regular car pools. On the other hand, instant ride sharing is less convenient because it does not provide the last mile of transportation at either end of the commute.

Several computer-mediated services try to coordinate ad hoc ride sharing among strangers. For example, in the San Francisco Bay Area, Dan Kirshner X  X  Ride Now service is trying to match people dynamically for the last mile from their homes to and from the subway station, where parking is limited. In many cities, the popular site craigslist.com includes a ride sharing message board.

We have designed a service, also called RideNow 3 , that takes a somewhat different approach. Rather than trying to serve a region X  X  whole population, who may have nothing in common other than traveling in the same direction, our service is intended to coordinate ride sharing within groups or small organizations of a few hundred to a few thousand people. In doing so, we forego some of the potential benefits of scale; in particular, there may be no one driving when and where someone wants to go. On the other hand, the risks of dealing with strangers are reduced, and the potential benefits of conversation are increased. And given the well-known in-group biases[5], we expect that drivers will be more motivated to help members of their own organization than random others.
Our design approach tries to capitalize on two opportu-nities that arise given our focus on ride share coordination within groups or organizations. First, development and us-age of the system can occur incrementally, as there will be less need for an initial critical mass of usage. Second, the system can draw on features of the local situation, including technical infrastructure, social norms, naming conventions, and shared physical spaces. These two opportunities, incre-mentalism and tailoring to local needs and resources, were the basis of our design approach.
As evidenced by other similar ride sharing projects, many conventions, both social and technological, will likely de-velop as more users begin to use the system for a variety of purposes. We designed the system to allow incremen-tal changes to occur. Incremental development should build user momentum for the system and avoid the costs of over-engineered solutions[2].

By choosing an incremental approach, we allow users to indirectly determine the features that get developed and added on to future implementations of the system. For ex-ample, users might want to specify routes rather than just destinations, and they might want to specify recurring ride requests, such as  X  X ny weekend. X  Rather than trying to an-ticipate and prioritize all these needs, we developed a bare bones system initially and plan to watch the patterns of us-age and feature requests that users make. Our goals were to avoid technological constraints on future expansion and to The RideNow name is a registered service mark of Ride Now, Inc. ( www.ridenow.org ). Thanks to Dan Kirshner for inventing such a great name and for giving us permission to use it. Dan is conducting other tests of ride coordination services. We share a name and the goal of promoting ride sharing, but our projects are independent. provide an interface that encourages new uses and doesn X  X  unnecessarily constrain the users.
Scalable, general systems do not allow nuance, are not socially flexibile, and do not allow for ambiguity[1]. Shirky describes very localized systems developed in the context of NYU X  X  Interactive Telecommunications Program. Those systems capitalized on shared physical spaces and well estab-lished communities to create personalized, situated software that had direct ties to the community[6]. Our goal with Ri-deNow was to design something similar for our own initial test community but still remain flexible enough to expand our system to include other communities in the future.
Our design allows communication in the system to be nu-anced and ambiguous; the offline community will supply the contextual cues necessary for successful interpretation of ambiguous information in the system. For example, our target community has shared knowledge about community-wide events and locations. We allow users to describe ride requests and offers using vocabulary that may be under-standable only within that community.
 Our target test community also has shared physical spaces. By placing a monitor in a hallway near one of the busiest entrances to office spaces, we situate the application in its social context. When entering and leaving the building, po-tential users are exposed to RideNow X  X  functionality and are able to quickly see how much traffic the system is receiving. This shared display allows people to scan for rides requested or offered without checking email or logging onto the web-site and may even encourage immediate ride sharing among people who run into one another in this shared hallway.
The architecture of the RideNow system consists of one backend database and two frontends: an email list and a website. The backend database is a MySQL database that stores data about rides, users, locations, and all of the mes-sages that have been sent to the system. The email list is a standard Mailman mailing list with a bot subscribed that can parse semi-formatted messages and insert them into the database. Users can use the raw email messages to get the information, and the format is simple for users to compose. The web interface presents ride information in a sorted for-mat, and provides forms users can complete to submit new ride requests and offers.
Email and Web have different interaction capabilities, and therefore allow different types of interactions with the data. One advantage of the email interface is that ride sharing messages can be harvested from email lists that are multi-purpose, which may help achieve critical mass. Initially, a group that already communicates through an email list would simply begin to send ride requests and offers, in ad-dition to their other messages.

We anticipate that, as use increases, managing RideNow email will become cumbersome for users, since most mes-sages will interest only a few people. The Web interface offers additional functionality for interacting with the sys-tem. Figure 1 shows how rides offered are displayed in the Web interface. The table is sorted on Date and Time, rather than by the time when the information was entered into the system, as an email archive would. Expired offers and re-quests are not displayed.

The current email and Web interfaces allow users to (1) re-quest a ride, (2) offer a ride, and (3) thank a driver or passenger; however, we can imagine features such as ride matching and mapping that could be useful. Our incre-mental approach allows us to release the RideNow software before spending development resources on such complex fea-tures that may never see actual use. Releasing the software without these advanced features limits our initial investment and reduces the risk of over-engineering. Adding features to later implementations allows us to sustain momentum for participation and to recruit new users.

In order to allow users to interact with the data in their preferred interface, it is important that the basic function-ality of all interfaces be the same and that the data backing these interfaces is the same. RideNow ensures this consis-tency by relying on the email list for distribution of infor-mation. For all ride requests, ride offers, and thank you messages created through the web interface, the system cre-ates an email and sends it to the list. A user could be an active member without ever visiting the RideNow website; he could choose to use RideNow only as an email list and simply read, post, and respond to ride offers and requests without leaving his email program.

By having an email list as the backbone of the system, we make it possible for multiple lists to develop. People will be able to subscribe to multiple lists; for example, they may join one list with their coworkers and another with their volun-teer organization. Because the underlying architectures are identical, such lists could be federated if their users desire. This setup allows organizations to establish their own im-plementations of the RideNow system; each implementation is localized for the group that uses it. Using an email list also provides a security advantage; the database is add-only and accepts input only from the list. This setup makes it easier to set privileges and reduces the risks associated with providing read/write database privileges to individuals.
Long ago, Malone et al[4] explained the flexibility and power that semi-structured data fields provide: input that a computer can understand can be used for sorting or filtering, but unparsed text may still be understood by human read-ers. We treat times and locations in this way. For example, in the  X  X e a Passenger X  form (Figure 2), users are able to enter when they want a ride in a free-form text box. The sys-tem attempts to parse what it can out of this  X  X nstructured X  data field into a  X  X tructured X  date/time range. This parser can understand simple phrases like  X  X omorrow afternoon X  to mean anytime tomorrow between noon and 5pm, or  X  X ext week X  to be anytime after sunday at midnight before next sunday at midnight. Once the system has this range (a start date/time and an end date/time), it displays it for the user to validate. The user can either accept the interpretation, or modify the free text entry and try again. We do this to verify that the system has interpreted the user X  X  intent cor-rectly and to help users become familiar with the capabilities of the parser. Unparsed or partially parsed inputs are still acceptable, though. (An example of partially parsed input would be  X  X ednesday after the faculty meeting, X  from which the system can only understand  X  X ednesday, X  as illustrated in Figure 2)
The structured time data has three main uses. First, we use the beginning of the structured range as the sorting cri-teria. Rides whose start time is earlier are placed higher on the list since they are available sooner. Secondly, we use the end time of the structured range for filtering the list. Any ride whose end time is in the past does not appear on the list since it is no longer relevant. Finally, the structured data is converted on the fly into a more natural language for display to the user. This feature is really useful when, for example, the user enters a relative date like  X  X omorrow. X  If this ride request is viewed 24 hours later, the system will display the date as  X  X oday X  rather than the now-inaccurate  X  X omorrow X  that was entered.

As long as the unstructured input was parsed correctly, the above will work fine. However, since we cannot parse all useful inputs, we have some rules in place for dealing with unparsed or partially parsed inputs. The sorting and filtering remain the same, with default start/end times used for those if absolutely nothing could be parsed out of the input. When attempting to display an unparsed or partially parsed input for the user, we display the original unstruc-tured input and append in parentheses the date that the input was submitted. This allows other users to see what the original submitter wrote and hopefully allows them to figure out its meaning. Also, if the original submitter used a relative date and time, then it is still possible to figure out what they meant since users will have the date/time at which the original entry was submitted.

Currently, the  X  X hen: X  field has a default of  X  X oday any-time. X  We hope to generalize this default by adding a drop-down list of common entries. This list will function both as suggestions to new users, and an easy entry interface for common entries for repeat users.

Semi-structured data fields not only offer flexibility, they also enable incremental improvement over time as usage pat-terns and the system co-evolve. Users may learn what the system is able to parse through trial and error and by seeing the formatted displays that the system generates (e.g.,  X  X his afternoon X ); developers can update the parser to handle fre-quently used phrases.
Most members of RideNow X  X  target community share phys-ical spaces such as hallways, copier rooms, etc. The commu-nity is spread out over a number of campus buildings and departments. In order to capitalize on these shared spaces, RideNow uses a TV monitor in a heavily trafficked hallway to display ride sharing information. The monitor displays a rotating webpage that lists rides offered, rides requested, and highlights from rider and driver Thank You notes.
After their ride offer or request has expired, users are asked to provide feedback to their driver/passenger on the experience. This feedback is sent to the email list as a Thank You, and messages stored in the database are randomly se-lected to be shown on the shared display. RideNow X  X  Web interface allows users to send these Thank You notes through the web as well.
This paper has described three critical design decisions the RideNow team made in designing the system. Future research on RideNow will examine four aspects of this sys-tem: modular development, conventions of use, motivation, and social capital implications.

The system has a modular structure to allow incremental changes to occur as users find uses for them. In particular, we are interested in providing functionality for locating des-tinations, mapping routes, and matching interested parties based on proximity to suggested routes. Additionally, we are looking at additional modular interfaces to the system, such as cellphone or PDA based interfaces to search for and submit rides.
 We are also interested in the conventions of use that emerge. As people observe how others fill in the free-text fields, con-ventions will develop as to abbreviations and level of speci-ficity. We are interested in how these conventions are estab-lished and how this development can be influenced, encour-aged, or discouraged.

We are interested to determine what motivates users, es-pecially drivers, to participate in ride sharing programs. Without the HOV lanes as motivation, drivers may be reluc-tant to participate. For what kinds of groups are  X  X hank You X  messages a sufficient motivator? We are also inter-ested in exploring the development of trust in this commu-nity. What allows people to trust the system and community enough to get in the car with a stranger?
Finally, we are interested in how this system can be used to develop social capital. Can we match people for rides by interest areas such that they can then have interesting discussions during the rides? Would people be willing to use the system for that purpose?
This material is based in part upon work supported by the National Science Foundation under Grant No. 0325837. Additional financial support was provided by Microsoft Re-search. Discussions with Marc Smith have significantly in-fluenced the design approach and the technical architecture described in this paper. [1] M. S. Ackerman. The intellectual challenge of cscw: [2] R. G. Fichman and S. A. Moses. An incremental [3] J. Grudin. Groupware and social dynamics: Eight [4] T. Malone, K. R. Grant, K.-Y. Lai, R. Rao, and [5] R. L. Moreland and J. M. Levine. Socialization in [6] C. Shirky. Situated software, Mar. 2004. available at [7] U.S. Department of Transportation (USDOT), Bureau [8] U.S. Department of Transportation (USDOT), Bureau
