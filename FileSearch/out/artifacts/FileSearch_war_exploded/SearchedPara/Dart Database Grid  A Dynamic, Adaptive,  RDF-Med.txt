 The rapid growth of web along with the increasing decentralization of organizational structures has led to the creation of a vast interconnected network of distributed electronic information. In present of such a new setting, one maybe needs to perform dynamic database integration over perhaps hundreds of or even thousands upon thousands of geographically distributed, semantically heterogeneous data sources that are subject to different organizations or individuals. Building upon techniques from both Semantic Web and Grid development, we have developed an operational prototype called Dart Database Grid  X  [1] to address above problems. DartGrid exhibits a Dynamic, Adaptive , RDF-mediated and Transparent (DART) approach to database integration for semantic web. With DartGrid, the user can: y Integrate heterogeneous, cross-enterprise databases using RDF/OWL semantic. y Query a relational database using RDF-based semantic query language. y Publish a relational database onto the Semantic Web by web/grid service. y Dynamically aggregate a set of database resources for integration at runtime. y Visually specify the mapping from relational schema to mediated RDF schema. y Visually construct a RDF-based semantic query . y Graphically browse the query result as RDF graph. 
DartGrid is built upon the Globus toolkit, the widely accepted grid development platform. As Figure 1 displays, a set of grid services are developed within DartGrid. For examples: y The Ontology Service (OntoS) is used to expose mediated RDF/OWL y The Semantic Query Service (SemQS) is used to accept RDF queries and y The Semantic Registration Service (SemRS) is used to expose the mapping y The Database Grid Service is used to expose the data and schema of RDBMS. 
These set of services provide the developer with the necessary facilities to develop web/grid-service-oriented client applications. The DartBrowser [2] of DartGrid is such kind of client application. With DartBrowser, the user can graphically browser RDF ontologies retrieved from the ontology service, visually construct a RDF-based semantic query and submit it to the semantic query service; visually specify the mapping between a relational schema to mediated RDF schema and submit the effort was motivated by the application of web-based data sharing and database integration for Traditional Chinese Medicine (TCM)[3] . Currently, in our deployed testbed, an ontology service, with about 10,000 records of TCM ontology instances contained, has been set up, and ten nodes with 50+ TCM-related databases have been deployed. The task of schema mapping from relational model to RDF model has proven to be burdensome and erroneous. DartGrid provides offers a visual tool to facilitate the task of schema mapping. This releases the user from costly and erroneous task of manually editing a mapping file. As Figure 2 displays, The user can specify which table should be mapped onto which classes and which column should be mapped onto which properties. When finishing the mapping definition, the tool will automatically generate a registration entry in RDF/XML format, and this entry will be submitted to the semantic registration service . DartGrid offers a semantic browser [2] enabling user to interactively specify a semantic query. The typical working scenario is :1)User visits a Ontolog Service and browses ontologies graphically; 2)User selects classes and properties of interest, simultaneously; 3)User submits this semantic query string to the Semantic Query Service; 4)When the result (also in RDF/XML format) is returned, the user can browse the result graphically again. Figure 3 and 4 illustrate an example from our TCM application. It showcases how user can step-by-step specify a semantic query to find out Chinese CompoundFormulas constituted by some Chinese UnitMedicine that can help influenza . In the first step (the upper-left part of the figure), the user selects the tcm : CompoundFormulas class (labeled with  X 1 X  in the figure) and its three properties: tcm:name (labeled with  X 2 X ), tcm:madeBy (labeled with  X 3 X ), and tcm:usage (labeled with  X 4 X  ). The user also specifies a relationship between tcm:CompoundFormulas class and tcm:UnitMedicine class (labeled with  X 6 X  in the figure) in this query. The relationship is called tcm:constituedBy (labeled with  X 5 X ) . In the second step (the upper-right part), the user selects the tcm:UniteMedicine class and one of its properties ( tcm: name ) and one relationship ( tcm:cure ) as well as do in the first step. The tcm:cure (labeled with  X 7 X  ) relate the tcm:UniteMedicine and tcm:Disease class and one of its properties ( tcm: name ) as well as dose in the last two steps, and input a constraint which specify that the tcm:name of the tcm:Disease should be  X  X nfluenza X . We finally give a summary of the characteristics of DartGrid . Firstly, DartGrid exposes database resources as web/grid services. The semantic query interface for processing RDF queries is also implemented as a web/grid service, so that the user can develop service-oriented RDF applications. This web-service-oriented architecture is quite important for web-oriented database integration. Secondly, DartGrid provides a convenient visual tool to facilitate the schema mapping from relational schema to RDF. Thirdly, with DartGrid, a database can be dynamically added into the sharing cycle without any influence on the client application. The Semantic Registration Services is developed to dynamically aggregate the service handles and schema mapping information from highly distributed database resources. 
