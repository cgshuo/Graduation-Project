 Due to changing business requirements and continuous process optimization, workflow dynamic evolutionary change. As to the technical aspect, dynamic evolutionary change refers to the change that involves modification of workflow model, which results in migration of multiple running instances to the modified model. Management System (WfMS) largely depends on the adaptability of workflow supporting dynamic change. The biggest advantage of adaptive WfMS over traditional ones lies in the ability to support dynamic change, including both ad-hoc and evolutionary ones. There are already some articles and systems supporting ad-hoc change, but few concrete techniques automatic processing in reality. Feasible solutions to the dynamic evolutionary change (dynamic migration in particular) are required in order to achieve real adaptive WfMS. 1.1 Problem Description notion of Change Region and adopted a strategy of delayed change called Synthetic Cut-Over Change. Casati defined a complete and minimal set of modification primitives to ensure the correctness of migration [3].Sadiq provided a new method involving cons-truction of Compliance Graph between the old and new workflow versions [4]. Aalst proposed an advanced inheritance concepts to support flexibility, but it is only suitable for circumstances when the new version is a subclass of the original one [5] . These ideas have been implemented by some WfMSs, such as Flow Nets, WIDE, TRAMs, ADEPT[6], JBees, etc. 
All of these researches and systems have provided feasible strategies and even implem-entation solutions to the dynamic change issue, specifically the ad-hoc type. However, few of them have provided satisfying solutions to evolutionary change. How to correctly and remains an unsolved problem, which is actually quite a common requirement in reality. 
According to [7], ADEPT has the highest overall evaluation among different systems change problems. However, it mainly focuses on the demonstration of the ad-hoc change. It adopted the approach of Modification Operations Set (MOS), which imposes business analysts usually provide a ready-made new workflow model rather than a series new model step by step with given modification operations. What we actually need is migration strategy, rather than steps of building a new workflow model based on an old one. new one [4], and dynamic modification can be considered as a substitution of sub-graph rather than the implement of a series of predefined operations. We then turned to Aalst X  X  Change Region approach [8]. Based on change region, Aalst proposed an algorithm to enable dynamic evolutionary change. However, too many transferable instances are excluded from migration [9]. Maybe the region is too large or the criterion is too strict, in other words, either the region needs to be downsized or a reasonable and applicable criterion should be proposed. 1.2 Contribution As mentioned above, the Change Region approach in [8] excluded too many transferable achieve a correct and efficient way to migrate running instances. Instead of  X  X einventing the wheel X , our research is based on many previous works, which are combined and improved to be made the best use of each. Specific features of different approaches can strategies adopted by us for checking correctness and compliance. A new correctness perform compliance checking within change region, so that as many instances as possible can be compliant and migrated. A practical case of graduation defense application is also introduced to exemplify our approach. 
Our approach can smoothly solve the five major typical dynamic change problems in [7] except the first one which allows the modification of history, accomplished tasks. The typical dynamic change bug mentioned in [2, 7] can also be settled without sacrificing efficiency. According to our experiment results, on average 66.7% instances within DCR are identified as transf erable ones, which were totally neglected by the original approach of Aalst [8]. The rest of the paper is arranged as follows. Section 2 presents our approach combing DCR and RTS. We begin with the introduction of a case study. Then DCR, RTS are marking of the instance according to the new WF model after migration is also provided compare the results with Aalst X  X . Finally, we end up with a summarization of our approach and a plan for the future work. As to the dynamic changes of workflow, modification of many aspects should be primary issue. Our discussion within this paper is only confined to the structural applications are beyond the scope of this paper. A case study of dynamic evolutionary change is introduced first for illustration. 2.1 A Case Study Typical applications of WfMS such as loan and insurance processes might be subject to unpredictable changes due to variation of policies. Such scenarios might best utilize and display the feature of adaptive workflow. However, they are usually too complicated for research and illustration, and we choose a simple but practical process, Graduation Thesis Disserta tion Application, for case study. 
Fig.1 shows the process of Graduation Thesis Dissertation Application. It is a simplified version and some tasks have been removed so as to focus on the parts related to modification. The process begins with application for graduation initiated by a graduate student. Once the application is submitted, both his/her advisor and officer of the Education Administration will receive a copy and decide whether to approve or reject (the rejection branch is removed here for simplification). If the thesis. The thesis will go through two rounds of review, a preliminary review by advisor and a second round of review by an invited professor. Then, comments of the two reviewers will be sent to both the graduate student and the dissertation secretary. 
A new regulation is issued that a certain percent of graduation theses should be reviewed by an Advising Committee appointed by the University. Therefore, a parallel branch is inserted after the preliminary review. Meanwhile, another modification is made to the graduation application approval process, which is changed from parallel to sequential. The reason for change is as follows. According to the history records, most of Administration. In order to lighten the burden of the Education Administration and enhance the effectiveness of their work, they will only consider those applications already approved by advisors. Fig.2 shows the modified process. 
How to deal with the already running instances? Obviously, we should adopt the progressive strategy rather than abort and flush ones proposed in [3]. All the running instances have to proceed together with new coming ones. A popular solution to this co-existing problem is to let the old ones follow their original model and new instances follow the new model. However, this solution can not satisfy circumstances requiring immediate response to the policy change. We need to propagate the changes to running instances without delay. The modification of the model involves two types of changes, a parallel to sequential change (Fig.3) and a parallel insertion (Fig.5), which happened to be two of the typical problems regarding dynamic change [7]. 
The following part of this section will concentrate on our solution to the migration issue. We utilize the algorithm of DCR proposed by Aalst to circle the affected change region, and introduce the concept of RTS for compliance checking to identify those transferable instances within the region. In this way, we can ensure both validity and flexibility of dynamic evolutionary change. Detailed information of DCR and RTS are introduced as following. 2.2 Dynamic Change Region Dynamic change region was first proposed by Ellis in [2], in which dynamic change was considered as a substitution of change region. However, if tokens happen to be in the region, the substitution will be complex and dynamic change bug might arise. Aalst made a further contribution toward this approach by providing a revised definition of change region and an algorithm to calculate DCR [8], which is circled with dashed line in Fig.3. 
Aalst adopted Petri nets (PN) to illustrate the problem and conduct the calculation [8]. There are three major components of Petr i net: places to store tokens (represented by circles), transitions to execute tasks (represented by rectangles) and arcs to connect places and transitions. We also adopt Petri net, which has more advantages over other notations [10]. More introductions about Petri nets can be found in [8]. 
In [8], the calculation of DCR is symmetric, i.e. if the roles of the new and old are reversed, DCR remains the same. We only consider the one-way change as marked in the figure (from O PN to N PN ). For all the following figures, the nodes mentioned in 
According to [8], valid transfer is permitted only when token is outside DCR. But the truth is 3 out of 4 cases within DCR could be migrated correctly, as shown in table 1. In Table 1, column 1 lists all the 4 possible states within DCR; column 3 shows that all of the states are prohibited from migra tion according to the pure DCR approach in [8]; column  X  X xpect X  specifies whether they should be transferred theoretically. Take the running instance with tokens in s4 and s5 for example. Obviously it can be migrated to an instance with token in p4 in the new model without causing error. 
Is the change region too large? Sufficient proof has been provided to testify its completeness and correctness in [8], and we can hardly downsize it while still keeping the two features. Maybe the problem lies in the correctness criteria, which exclude all the instances with token within the region from migration. The thing left to be done is identifying and migrating transferable instances within DCR as expected. 2.3 Correctness Criterion Different approaches vary primarily in th e correctness criterion on which they are based and the way to check the criterion. A survey on seven different criteria and comparison of respective approaches is given in [7]. Some approaches adopt a straightforward but restrictive compliance cr iterion, either requiring identical marking state or same execution history between the original and new one. But actually these criteria may not work well in circumstances involving deletion of an And-join/And-split or exchange of already finished tasks. For example, the case shown in Fig.3 cannot comply with the Aalst X  X  criteria in [8] which require places with token cannot be removed. However, even if s4 and s5 become one place, a valid transfer can be made. The well known workflow model ADEPT adopted a comprehensive compliance criterion, which introduced th e concept of Reduced Execution History (REH) [11]. This REH only discards the entries related to previous loops. In the applications with hundreds up to thousands of instances, it is too expensive and unnecessary to use such extensive execution data only to check compliance. 
We aim to identify the useful part of execution history to decrease the performance burden, and what X  X  more important, to enable a number of misclassified instances to migrate automatically. Having studied many approaches, we decided to adopt the DCR approach in [8] to circle the aff ected region and introduce Reduced Trace Set (RTS) to check compliance within DCR. As far as we know, no article has ever proposed any criterion or algorithm to perform compliance checking within DCR, and following part, we will introduce RTS and our correctness criterion respectively. 
Before introducing Reduced Trace Set. Trace Set, we first give a brief introduction record active parts of the net (i.e., the transitions) rather than passive elements such as places [12]. Unlike common trace sequence, TS is a collection of finished transitions, whose execution sequences are ignored. Take Fig.3 for example, suppose tokens are Definition 1 ( Trace Set ) . Let ) , , ( F T P PN = and i be an instance on PN and s t be the state of transition, as TS , } &amp; | { completed t T t t TS Definition 2 ( Reduced Trace Set ) . Let TS be the trace set of instance i and DCR be the transitions beyond the scope of DCR and those included in the previous loop iterations other than the completed or the current one. 
RTS is different from TS in two respects. Firstly, it only includes those transitions within DCR; secondly, it excludes the records of past loops except the current one. For example, Fig.4 depicts a change involving insertion of task into loop. The TS:  X  X  X  which is outside DCR and  X  X  X  which belongs to the 1 st iteration. Definition 3 ( Correctness Criterion ) . Let O PN be the original process model and i be an instance on O PN with reduced trace set O RTS . Let further O PN be 
It is important to note that our compliance checking is only confined to DCR and the execution sequence of tasks inside DCR can be neglected. We only care about the current state (accomplished transitions) rath er than the history (execution sequence). Take Fig.3 for example, since a N RTS ( N RTS = O RTS ={a,b,c}) can be found on whether b or c is executed first. flow but not the data flow is discussed here, each transition is considered as non-related task. Then trace set is the proper way to record execution information and compare the old and new instance. Running instances are classified into th ree types: i) Smoothly transferable; ii) Compliance achievable; iii) External intervention required. The smoothly transferable ones refer to those outside DCR and can be transferred directly. For those inside DCR, compliance checking is performed using RTS to identify the compliant ones, which belong to the second type and can be transferred automatically. The incompliant ones are left to be handled by external intervention. We are making efforts on performing more accurate compliance checking so that more instances originally classified to the third type can be reclassified to the second type. 2.4 Dynamic Migration Algorithm Having introduced the concepts of DCR, RTS and Correctness Criterion, we then put forward an algorithm based on these definitions to perform dynamic migration. The state of marking after migration. 
The initial marking of N PN inside DCR is denoted as Mi , and Mo denotes the marking after migration. If the instance is transferable, a firing sequence  X  =(t1,t2,...tn) could be found to enable Mo Mi  X  X   X   X  . For a given state M , the set of enabled transitions accomplished transitions. Algorithm 1 ( Dynamic Migration Algorithm) Input Parameters: Mi , O RTS Output Parameter: Mo
Begin end 
The loop stops till there is no element in Te ( Step5 ). For each enabled transition t in N PN , it can be fired if it belongs to O RTS ( Step 8 ) as well. Then the marking will 
RTS , t needs to be removed from Te and no further consideration is needed for this instance ( Step 13 ). When the loop is done and N RTS = O RTS , a valid transfer is permitted ( Step 16 ) and the marking after migration is found and output ( Step 18 ).
A pre-process and a post-process are need ed to ensure the correct firing of token. Pre-process aims to add virtual pl aces, and post-process aims to process the output marking and remove the added virtual places. Suppose an instance with tokens place should be inserted before th e transition graduation_apply, then Mi = (1,0,0,0,0). In addition, a virtual ending place is inserted after submit_thesis. The following steps demonstrate the results after each loop. 
Initial values: Te ={a }, O RTS ={a,b,c}, N RTS =  X  , M = Mi =(1,0,0,0,0) 
Since the first and the last place are inserted virtual nodes, the output Mo = (0,0,0,1,0) should be post-processed. The two virtual places should be removed from In this section, we will apply our method to more examples discussed by Aalst in [8]. They are chosen for two reasons. Firstly, th ey are simple but typical, and can be found in many complex scenarios. Secondly, they are the most suitable examples for comparison with Aalst X  X  approach, which does not allow migration of any instance with token inside DCR. The comparison results can best illustrate that our approach can downsize the un-transferable instances pool by a large extent. Example 1 ( Parallel to sequential ) . Take Fig 3 for example. It can be used to compare with the parallel to sequential example used by Aalst. According to our s2 and s5, whose RTS = {a,c} cannot be found in N PN . In fact, this exceptional case does lead to dynamic change bug [8]. The table below demonstrates that the result of our approach is the same as expected. Example 2 ( Parallel insertion ) . As is shown in Fig.5, an instance O i with token in s8 transfers from O PN to N PN . Since N RTS = O RTS = {e,f} can be met, O i can be transferred correctly. Tokens of the new instance should be in p7 and p8. 
According to the pure DCR, this instance can not be migrated at all. In this case, our approach can identify 100% of transferable instances within DCR. (Table 2) Example 3 ( Change involving XOR and Parallel ) . Consider Fig.6, instance with token in s4 in O PN can be migrated to N PN , for N RTS = O RTS ={b,c} can be found PN . After migration to N PN , tokens should be in p4 and p5. (Table 3). 
All the examples above clearly illustrate the strength of our approach, which lies in identified transferable inst ances within DCR amount to 66.7% on average. They were completely forbidden to migrate by the pure DCR approach, but now can be migrated exactly the same as expected. 
Not only the number of automatically transf erable instances increases, but also the efficiency of identifying them is given special focus. Firstly, DCR is calculated through comparison of models rather than instances. Secondly, the compliance checking is performed within DCR using a consolidated view instead of complete execution history, enabling a more effective and more precise comparison. This paper presented an efficient approach to support dynamic evolutionary change of workflow. Based on previous researches, we combined dynamic change region and trace equivalence together. RTS is introduced to perform compliance checking within DCR. A new correctness criterion is propos ed to enable as many transferable instances as possible to migrate. The algor ithm to perform migration and calculate the marking after transfer is also provided. The main contribution of this paper is a feasible solution to structural dynamic change, and enables the large number of transferable instances within DCR to migrate. 
In the future, we plan to apply our appr oach to more compli cated scenarios for further verification. We also plan to implement the approach in the WfMS developed by our team, and then extend the open source WfMS jBPM with a feature to calculate DCR and support migration within DCR usin g our algorithm. In addition, dynamic modifications of other aspects such as data, resource and external applications need further research. This work is supported by National Basic Research Program  X  973 Plan, No. 2002CB 312006  X  , NSFC  X  Adaptive Workflow, No.60473077  X  and Program for New Century Excellent Talents in University. 
