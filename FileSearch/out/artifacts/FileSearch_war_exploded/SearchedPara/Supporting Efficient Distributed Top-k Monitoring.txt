 specified ranking function. In many database applications, top-k query processing is natural behavior, and the database research communities have studied the issue of efficient processing of top-k queries for a long time [9, 11, 12, 13, 17]. 
Recently, much attention has been focused on online monitoring of aggregate func-tions over data streams such as call records, sensor readings, web usage logs, network sources and many online monitoring tasks, e.g. detecting distributed denial-of-service (DDoS) attacks, only require that attention be focused on atypical behavior in the environment being monitored, while habitual behavior is to be ignored. 
Babcock and Olston presented an original algorithm for distributed top-k monitor-ing, which is continually identifying the top k data values over distributed data streams [4, 5]. In Babcock&amp;Olston X  X  algorithm, arithmetic constraints are maintained at remote stream sources to ensure that the most recently provided top-k answer remains valid to within a user-specified error tolerance. Distributed communi-cation is only necessary on occasion, when constraints are violated. However, Babcock&amp;Olston X  X  algorithm needs transmitting entire top-k set and its current partial data values, and a border value to the central processing system when constraints are first contribution of this paper is studying the optimization problem of which objects are necessary to be transmitted to reduce communication cost of distributed top-k monitoring. We show that when constraints are violated, only the objects which break the constraints and two border values need to be transmitted. Our second contribution is a careful implementation of a new distributed top-k monitoring algorithm and the communication cost of our new algorithm is independent of k . Extensive experiments with real and synthetic data show that, compared to previous technique (Bab-cock&amp;Olston X  X  algorithm), our approach reduces overall communication cost by a factor ranging from 2 to over an order of magnitude when k is no lees than 10. The rest of the paper is organized as follows. Section 2 defines the problem of distributed top-k monitoring formally. Section 3 discusses the background and related work. Section 4 introduces our new Minimal Refresh algorithm (MR). Section 5 studies of the performance of MR. Finally, Section 6 concludes the paper. We address the same problem described in [4, 5]. We consider a distributed online monitoring environment with m +1 nodes: a central coordinator node N 0 , and m re-mote monitor nodes N 1 , N 2 ,..., N m . Collectively, the monitor nodes monitor a set U of values V 1 , V 2 , ..., V n . The values of the logical data objects are not seen by any indi-vidual node. Instead, updates to the values arrive incrementally over time as a se-node N j but not by any other node N l , l j . For each monitor node N j , we define partial bounded error tolerance. More precisely, the coordinator node N 0 must maintain and continuously report a set U T  X  of logical data objects of size k T = | |. T is called the approximate top-k set, and is considered valid if and only if: where 0  X   X  is a user-specified approximation parameter. If 0 =  X  , the coordinator must continuously report the exact top-k set. For non-zero values of  X  , a correspond-ing degree of error is permitted in the reported top-k set. 
The goal for distributed top-k monitoring is to provide, at the coordinator, an ap-sage size exchanged among nodes. Among the ample work on top-k query processing, the TA family of algorithms for monotonic score aggregation [12, 13, 17] stands out as an extremely efficient and highly versatile method for centralized data management. Based on TA, many effi-ciency approaches have been dev eloped for distributed top-k query processing [2, 3, 8, 10, 16]. However, these one-time query algorithms are not suitable for online moni-toring because they do not include mechanisms for detecting changes to the top-k set. 
Top-k monitoring of a single data stream was studied in [14]. This work only con-siders single data streams rather than dist ributed data streams and concentrates on reducing memory requirements rather than communication costs. 
Babcock and Olston presented an original algorithm for distributed top-k monitor-approximate top-k set T that is valid within  X  . In addition to maintaining the top-k set, the coordinator also maintains n ( m + 1) numeric adjustment factors, labeled j i ,  X  , one the following two adjustment factor invariants: Invariant 2 : For all pairs  X   X   X   X   X  T U O T O s t ,, 0 , 0 , s t  X   X   X   X  + . 
At the outset, the coordinator initializes the approximate top-k set T by running an efficient algorithm for one-time top-k queries, e.g. TA. Then, a reallocation subrou-ants and for each monitoring node N j : 
If Invariant 1, 2 and formula 2 are satisfied, then formula 1 is satisfied. Whenever the constraints are violated at some monitor node N c , a three-phase distributed proc-ess called resolution is initiated to maintain the current approximate top-k set: Phase 1: N c sends a message to the coordinator N 0 containing the resolution set C is the set of objects whose partial values at N c are involved in violated constraints. ( C contains one or more objects from T plus one or more objects not in T , and called Phase 2: The coordinator considers each pair  X   X   X   X   X  T U O T O s t , whose constraint forms reallocation to update the adjustment factors pertaining to those two nodes to the test fails, the phase 3 is required. Phase 3: The coordinator contacts all monitor nodes other than N c , and for each node N node N c ), calculates new approximate top-k set T X  , then, performs reallocation across all nodes to establish new adjustment factors to serve as parameters for those con-new adjustment factors. 
To reallocate the adjustment factors, let the set participating nodes N is: If reallo-V tine reallocation as follows. 1. For each object in the resolution set R O i  X  , compute the leeway i  X  : 2. For each object in the resolution set R O i  X  and each monitor node N N j  X  par-ticipating in resolution, assign: 
In Babcock&amp;Olston X  X  algorithm, distribute d communication is only necessary on occasion, when constraints are violated. Communication cost is dominated by the size of the resolution set T C R  X  = . However, in Section 4, we show that transmitting the conflict set C is enough and the communication cost can be reduced significantly. As described in Section 3, the communication cost is dominated by the size of the transmitting the necessary objects. We show that, the monitor nodes only need trans-mitting the conflict set C and its current partial data values, and two border values in the resolution process. Note that the conflict set C is the minimal resolution set. 
We first bring to light some key observations towards defining an efficient distrib-uted top-k monitoring algorithm in Section 4.1. In Section 4.2 we introduce our new algorithm for distributed top-k monitoring termed Minimal Refresh (MR) algo-rithm and prove the correctness. In Section 4.3 we discuss the efficiency of our approach. 4.1 Key Observations Let the down conflict set C T C T  X  = and the up conflict set C T U C T U  X   X  =  X  ) ( . Proof. , U O  X   X  O satisfies the invariant 1, which described in Section 3. , T O t  X   X  satisfies the invariant 2 and formula (2), Therefore,  X  +  X   X   X   X   X   X  t T U s T t V C O C T O : , 
V resolution process, i.e. k T = | ' |and s t s t V V T U O T O  X  +  X   X   X   X   X   X  : ' , '. Proof. There are two cases for the new approximate top-k set I C T T T  X   X  = ) ( ': Case 2: , ' T T  X  that means s i s T U i V V I C O C I O  X   X   X   X   X   X   X   X  : ), (. By Claim 2, we : . From the definition of I , we know that  X   X   X   X   X   X  t s t V I C O I O : , V . Thereby,  X  +  X   X   X   X   X   X   X  t s T t V I C O I C T O : , ) ( s V  X  On the other hand, if  X  ' T Therefore, ' T can be a new approximate top-k set after resolution process. 
The implication of Theorem 1 is that, in the resolution process, we can keep the objects in the set T C T  X  and choose the p k  X  objects with largest aggregation values from the conflict set C to rebuild the new approximate top-k set T X  . 4.2 Algorithm In our new algorithm MR, at the outset, the coordinator uses the same approach of adjustment factors that satisfy the invariant 1, 2 and formula (2). 
Whenever the local arithmetic constraints are violated at some monitor node N c , a three-phase distributed process called MR-Resolution is initiated to maintain the cur-rent approximate top-k set. MR-Resolution uses the method in Theorem 1 to rebuild the new approximate top-k set T X  . To make sure T X  and ' T U  X  still satisfy the invari-ant 1, 2 and formula (2), we define two border values: c B and c H . The detail of the subroutine MR-Resolution as follows. Algorithm MR-Resolution Phase 1: N c sends a message to the coordinator N 0 containing the conflict set C and its current partial data values, and the two border values B c and H c of N c . Phase 2: The coordinator considers each pair  X   X   X   X   X  T U O T O s t , whose constraint forms MR-Reallocation to update the adjustme nt factors pertaining to those two nodes to reestablish all arithmetic constraints, and notifies N c of its new adjustment factors. If the test fails, the phase 3 is required. Phase 3: The coordinator contacts all monitor nodes other than N c , and for each node N node N c ), calculates the set I by the method in Theorem 1, then, performs MR-Reallocation across all nodes to establish new adjustment factors to serve as parame-ters for those constraints, and notifies all monitor nodes of the new adjustment factors. Every node rebuilds the new approximate top-k set T X  , where I C T T T  X   X  = ) ( '. 
To reallocate the adjustment factors, we use the same definition of participating In MR-Reallocation, let )} ( max ), ( min min{ 0 , 0 , 0 s tine MR-Reallocation as follows. Algorithm MR-Reallocation 1. Compute the threshold  X  and the interpolation factor  X  : 2. For each monitor node N N j  X  , compute the threshold j  X  : 3. For each object in the conflict set C O i  X  , compute the leeway i  X  : 4. For each object in the conflict set C O i  X  and each monitor node N N j  X  par-ticipating in resolution, assign: 
From Theorem 1, we know that T X  is a correct new approximate top-k set. Now, we prove the new adjustment factors j i , '  X  satisfy the invariant 1, 2 and formula (2). Lemma 1. )) ( max , max( )) ( min , min( , ' Proof. For each node N j ( m j  X   X  0 ), H j  X  B j , therefore, N B H By Lemma 1, we know that, in MR-Reallocation : ' , ' ' ' T U O T O s t  X   X   X   X   X 
Furthermore, by Lemma 1, we know that, in the MR-Reallocation process, the lee- X   X  , i.e. the new adjustment factors Theorem 2. Let j i , '  X  be the new adjustment factor output by MR-Reallocation if V  X  + for all monitor nodes j N , for all ' T O t  X  ,' T U O s  X   X  .
 4.3 Efficiency We use the message size exchanged between the monitor nodes and the coordinator during resolution as the metric of communication cost. The message size is governed set T C R  X  = for Babcock&amp;Olston X  X  algorithm. 
There are two types of events that can cause local arithmetic constraints to become current approximate top-k set can increase, or a partial value of an object that is in the current approximate top-k set can decrease. In the first case, 1 | | | | + = T C C and the size our simulations, we found that, more than 98%, 1 | | = T C for the first case, and 
C for the second case. In our simulations, the average number of | | C is rang-ing from 2 to 4, depending on the parameters used when running the algorithm. while T C R  X  = and k T = | | , therefore | | R is always greater than k and | | C . 
Based on our simulations (Section 5) we found that, the total number of messages exchanged of MR is higher ( % 40 &lt; ) than Babcock&amp;Olston X  X  algorithm. Taking into account the size of the border values, the ratio of communication cost of our approach to Babcock&amp;Olston X  X  algorithm is approximate | | / | | 2 R C  X  . 
To keep the size of the messages exchanged as low as possible, we modified our algorithm by an alternative resolution proced ure described in [5]: whenever a change alternative procedure, generates 2 m extra messages ( m is the number of monitor nodes) in addition to the ones generated by the ordinary MR-Resolution procedure. In this Section, we first give the experimental setting in Section 5.1. In Section 5.2 we discuss the leeway allocation policies. In Section 5.3 we experimentally compared the performance of our proposed algorithm MR against Babcock&amp;Olston X  X  algorithm. 5.1 Experimental Setting We used both real-world and synthetic data sets to evaluate our new algorithm: z WorldCup : we used a 24-hour HTTP server log from the web site for the z Zipf-WorldCup : we replaced the real page requests number of each page in 
We present two continuous monitoring queries for every data set that the adminis-trators of the World Cub web site might have liked to have posed: 
Monitoring Query 1. Which web documents are the most popular from the begging of monitoring, across all servers? 
Monitoring Query 2. Which web documents are the most popular in the last one hour, across all servers? 
Monitoring Query 1 represents the first case that causes local arithmetic constraints to become violated, triggering resolution, and Monitoring Query 2 represents a hybrid example of the first case and the second case. Our implementation of the test-bed and the related algorithms was written in GNU C++. All the experiments are conducted on Intel Pentium IV CPU 2.4GHz with 512MB RAM running Red Hat Linux 9. 5.2 Leeway Allocation Policies Recall from Section 4.2 that our MR-Reallocation algorithm is parameterized by m +1 adjustment factors at each node N j participating in resolution. We compared the two basic leeway allocation policies described in [4, 5]: Figure 1 Shows the results of our experiments on Monitoring Query 1 for World-Cup, 20 = k and two different error tolerance values: 0 =  X  , and a larger value ( 200 =  X  ) that permits a moderate amount of error with respect to the data queried (similar results occur with all other m onitoring queries, and are omitted for the space reasons). 
In all cases, the value assigned to F 0 turns out to be the largest factor in determin-ing cost. Our results suggest that an efficient allocation policy is: Hybrid : set 5 . 0 0 = F and using the proportional allocation when  X  is small, and set 0 0 = F and using the even allocation when  X  is large. The cutoff point between  X  X mall X  and  X  X arge X  values of  X  comes roughly when  X  is 1/500 of the threshold  X  . This conclusion is results not presented here due to space considerations ([4, 5] used the same hybrid policy while the cutoff point is 1/1000 of the largest data value in the data set). 5.3 Comparison Against Alternative We compared our algorithm against Babcock&amp;Olston X  X  algorithm using a simulator that for both algorithms assumes that communication and computation latencies are small compared with the rate at which data values change. We used the hybrid policy for our algorithm and Babcock&amp;Olston X  X  algorithm. 
Figure 2, 3, 4 and 5 show the results for Monitoring Queries 1 and 2 of both data with all other tested values of  X  , and are omitted for the space reasons). In each graph, the approximation parameter  X  is plotted on the x-axis. The y-axis shows total mes-sage size, on a logarithmic scale. In all cases our algorithm achieves a significant reduction in cost compared with Babcock&amp;Olston X  X  algorithm. The overall performance of MR outperforms Bab-cock&amp;Olston X  X  algorithm by a factor ranging from 2 to 8. The main reason of MR outperforming Babcock&amp;Olston X  X  algorithm is that, when constraints are violated, MR only need take into account the conflict set C while Babcock&amp;Olston X  X  algorithm described in Section 4.3. 
We measured the message size and message number of our experiments on Moni-toring Query 1 of WorldCup for different monitoring query result number k from 10 omitted for the space reasons). Figures 6, 7 show the results respectively. 
Figure 6 shows that, as k increases, the advantage of MR over Babcock&amp;Olston X  X  algorithm is magnified, often by over an order of magnitude (note that the y-axis is on most situations, while T C R  X  = and k T = | | , therefore | | R is always greater than k . 
Figure 7 shows that message number of MR is higher ( % 40 &lt; ) than Bab-cock&amp;Olston X  X  algorithm. The main reason is that, in the resolution process, comparing with our algorithm, Babcock&amp;Olston X  X  algo rithm reallocates additional adjustment factors of the set | | C T  X  , which decreases some potential constraint conflicts. In this paper, we have studied the optimization problem of which objects are neces-sary to be transmitted in distributed top-k monitoring, and presented the MR algorithm, an efficient distributed top-k monitoring algorithm. In our approach, only few objects are transmitted for maintaining the top-k set and the communication cost is independent of k . We have verified the effectiveness of our approach empirically using both real-world and synthetic data sets. The experiments results have shown that our approach reduces overall communication cost by a factor ranging from 2 to over an order of magnitude compared with the previous approach (Babcock&amp;Olston X  X  algorithm) when k is no lees than 10. 
