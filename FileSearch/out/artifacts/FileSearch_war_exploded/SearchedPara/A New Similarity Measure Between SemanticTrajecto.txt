 Nowadays, the smart mobile devices are very popular and the positioning tech-nology is well developed. This technical progress leads to the accumulation of trajectories which has attracted a lot of attentions from researchers. A trajec-tory shows the continuous movements o f an object. Usually, a raw trajectory graphic coordinates of the moving object at timestamp t i and n is the number of elements in the sery. In recent years, man y researchers has become interested in semantic trajectories, since additional semantic information (stops, landmarks, activities, etc.) can reflect user behavior more accurately. Gen erally, a semantic trajectory is a sequence consisted of tim estamped locations labeled with seman-tic information to represent the landmarks being passed.

By finding similar trajectories, we can recommend similar users to a user (trajectory recommendation [1 ]), or predict the next place where a user will go (trajectory prediction [2]), etc. Ther e are a lot of works proposed to measure the similarity of raw trajectories, but very few works focus on the similarity of semantic trajectories. Generally, a semantic trajectory contains three types of information: geographical information, semantic information, and temporal information. Fig. 1 shows three semantic trajectories of users: A , B ,and C . Trajectories A and C have exactly the same stops, but they have different geo-graphical shapes. Besides, the timestamps when they reach or leave these stops are also quite different. The geographical shapes of trajectories A and B are sim-ilar, but their stops are different. With the consideration of all the geographical, semantic and timestamp information, we can find that these three users may represent different kinds of people, i.e ., they may have different occupations and living habits. Compared with raw trajector y similarity, semantic trajectory sim-ilarity can reflect how similar two users are more accurately, and thus can better support trajectory recommendation and prediction. On the other side, it is also more complicated than measuring the similarity of raw trajectories, as there are so many factors affecting the similari ty need to be consider ed: geographical information, semantic information, and timestamp information.

To the best of our knowledge, there i snoexistingworkonsemantictra-jectory similarity measure which considers all these three kinds of information mentioned above. Thus, in this paper we propose a new semantic trajectory similarity measure by taking all these information into consideration. First, we model a semantic trajectory based on road networks by transforming it into a series of nodes in a graph. By doing this, we can not only simplify the computa-tion of the similarity measure, but can also avoid the inaccurate results caused by different sampling strategies or noisy points in positioning devices. Based on this model, we propose a Constrained Time-based Common Parts (CTCP) approach of finding the common parts of two semantic trajectories to measure their similarity. However, we find that the time constraint in this approach is too strict and we may get zero values for trajectories with similar shapes and differ-ent temporal information. Therefore, we further propose an improved method called Weighted Constrained Time-based Common Parts (WCTCP) by relaxing the time constraint to measure the similarity more accurately.

The contributions of this paper are summarized below. (1)We measure the similarity of semantic trajectories by considering all the geographical, seman-tic and temporal information for the first time in the literature.(2)We model the semantic trajectories based on road networks and represent them as time-lines. (3)We propose the CTCP approach to compute the semantic trajectory similarity and further improve the result by proposing another new approach WCTCP.(4)We conducted extensive experiments on real trajectory dataset and confirmed the effectiveness of our approaches.

The rest of this paper is organized as follows. Section 2 reviews the re-lated work. In Section 3, we model the s emantic traceries based on road net-works. Section 4 gives the CTCP approach and the improved WCTCP approach. Section 5 shows the effectiveness of our a pproaches by extensive experiments. In Section 6 we conclude this paper. In this section, we will first briefly review the works on raw trajectories similarity, and then discuss the studies of semantic trajectory similarity closely related to this paper.

Many works were proposed to study the similarity of raw trajectory in the literature. Jonkery et al. proposed a similarity measure ED based on Euclidean distance [3]. Then dynamic time warping based measures which take tempo-ral features into consideration are proposed, such as DTW [4] and PDTW [5]. To avoid the inaccurate results caused by noisy points, longest common sub-sequence based measure such as LCSS [6 ], edit distance based measures such as ERP [7] and EDR [8] are then proposed. In [9], Wang et al. evaluated the effectiveness of these approaches in differ ent circumstances using a real world taxicab trajectory dataset. However, the above approaches only focus on the spatial information and ignore the temporal information of trajectories. Such problem was pointed out in [10]. In [11], Kang et al. cut the spatial space into several cells to form the raw trajectory by cell ID. Then they find the Longest Common Subsequence(LCSS) of cell sequences and the common parts of time intervals respectively and combine them t ogether to measure the similarity. This approach can only be used in coarse-grained partition and result in low discrim-ination in fine-grained partition as a large number of similarity values will be zero.

In recent years, some researchers star t to introduce the concept of semantic trajectory [12] [13], and several approaches are proposed to convert raw trajec-tories into semantic trajectories [1] [12] [14].

Up to now, a few works has studied the similarity measures of semantic tra-jectories. Ying et al. [15] first model th e semantic trajectory on the STP-tree, then compute the similarity scores based on geographic behavior and seman-tic behavior respectively by STP-Tree, and combine them in a weighted way. But this approach do not consider the time information. In [14], Li et al. proposed an algorithm to find the stops, and compared two stop sequences by matching each pair of chronologically stops extra cted from two sequences respectively. In this way, two sequences are similar if each pair of stops are the same and the difference between their time intervals is less than a certain threshold. Note that this approach only consider the time interval but not the exact timestamp as we do in our approaches.

In [16], Hwang et al. measure the similarity of semantic trajectories based on road networks and they compute the distance between every pair of POIs (Points of Interest) in the trajectorie s. Road network model can reflect the real travel distance between two places, and it is also widely used to solve other trajectory problems such as trajectory k-n earest neighbors query [17]. However, the set of POIs in [16] contains every i ntersection and landmark the moving object has passed no matter it stays for a while or not, which cannot reflect real semantic stops in the trajectories. Tiakas et al. [19] also propose a new method to measure trajectory similarity based on road networks, but they only focus on the computation of raw trajectory similarity.

There are also other related works [2] [20] which measure the similarity of two trajectory patterns. The trajectory pattern is a representative trajectory of a tra-jectory set consisted of la ndmark being frequently visited. [2] mines the semantic trajectory pattern and then measures their similarity based on longest common sequence, which does not consider the tem poral information. [20] computes the similarity of two trajectory patterns by a ssuming that a region of interest is con-nected by one timestamp. This is differ ent from our approach, as we take both reach timstamp and leave timestamp into consideration which can determine the stay duration and reflect the temporal information more accurately. Many approaches have been proposed to add semantic information to trajectories as stated in Section 2. In this paper we choose the algorithm in [14] to detect semantic stops from raw trajectories. Other approaches of detecting stops can also be used exchangeably. Based on the stop detection algorithm, we give the definitions of stop and semantic trajectory in the following.

Definition 1 . A stop stands for a geographic region where a moving object where ( x, y ) is the geographical coordinates of the stop, tin is the reach times-tamp, tout is the leave the timestamp, and tout  X  tin is larger than a threshold.
Definition 2 . A semantic trajectory ST is a sequence of n tin i +1 , L i is a landmark label associated with the i -th stop in landmark label set P .

Definition 3 . A road network is a graph G ( V,E ), where V is the set of nodes, and E is the set of edges. A node represents an road intersection, and an edge represents a road segment. There is an e dge between two nodes iff there is a road segment connecting two intersectio ns. Fig. 2 (a) shows a road network.
Definition 4 . The shape of a raw trajectory T in the road network can be number of road intersections passed by the moving object.
 and t j &lt;t j +1 . Fig. 2 (b) shows the shape of a raw trajectory in the road network.
In order to integrate the semantic information into the raw trajectory, we add all stops detected as new nodes into the road network. Thus, road network G ( V,E ) can be extended as G ST ( V  X  V ST ,E  X  E ST ), where V ST is the node set representing the stops and E ST  X  V ST  X  ( V  X  V ST ) is the set of edges connecting two consecutive stops or a stop and its nearest intersection.

Definition 5 . A semantic trajectory in road network STN canbedefinedas an extended directed path P ST =( v 1 ,v 2 , ..., v n )where v i  X  V  X  V ST representing stops or intersections in the trajectory, and n = n s + n is the number of stops and intersections in the trajectory.

Fig. 2 (c) shows a trajectory with stops in the road networks. A semantic trajectory in road networks now is a new path with more nodes, where v 1 ,v 3 ,v 5 , v ,v 2  X  V represent road intersections, and v 7 ,v 8 ,v 9 ,v 10  X  V ST represent stops.
Unlike the road intersection which only need to recordone timestamp, for a node in V ST representing a stop, we need to record reach timestamp and leave timestamp since a moving object stays at the stop for a while. Therefore, we denote a node in V ST as ( v ,tin,tout ), where tin and tout are its reach time and leave time re-spectively. To unify the form, we also denote the node in V as ( v ,tin,tout ) with tin = tout . Thus, the extended semantic trajectory P ST with timestamps is de-noted as (( v 1 ,tin 1 ,tout 1 ) , ( v 2 ,tin 2 ,tout 2 ) , ..., ( v n ,tin n ,tout n )).
After we obtain the extended directed path of a semantic trajectory P ST , we can represent it by a Time-Line with a sequence of stops and road inter-sections. Fig. 3 shows the Time-Line of the semantic trajectory in Fig. 2(c). We can see that the Time-Line is a sequence of consecutive blocks, where each block represents the travel time of a road segment. In other words, the length of each block represents the time consuming of moving from one road intersec-tion to the next road intersection. As shown in the figure, there are five blocks ( v timestamps when the moving object pass v 1 ,v 3 ,v 5 ,v 4 ,v 2 respectively. In the Time-Line, we also record the stops of th e semantic trajectory and represent the time interval that the moving object stays at the stops by gray part, where the start of a gray block represents the reach timestamp tin , the end of a gray part represents the leave timestamp tout , and the length of a gray part shows how long the object stays at the stop. As shown in Fig. 3, the four gray parts represent four stops v 7 , v 8 , v 9 , v 10 of the semantic trajectory in Fig. 2(c), with time in-the similarity of two semantic trajectories by comparing their Time-Lines. In this section, we will first propose a basic approach Constrained Time-based Common Parts to compute the similarity of two trajectories. Then we analyze its weakness, and further propose an improved algorithm Weighted Constrained Time-based Common Parts. 4.1 Constrained Time-Based Common Parts To measure the similarity of two seman tic trajectories, we need to find their common parts in their Time-Lines. The common parts are the common or similar stops two moving objects staying in the same time interval.

To find the common parts in an efficient way, we will gradually filter out their different parts by the following steps. (1)First, we check if two trajectories have common travel time, i.e., if there is overlap between their travel intervals. (2)If two trajectories have common travel time, we then check if they are affiliated to the same edge. (3)If two trajectories have the same edge in the common travel time, we then check if there are stops on the edges have common stay time. (4)Finally, we will check wether the two stops are the same or similar. The distance of similar stops should be less than a given threshold  X  .

Now we illustrate the above process by an example in Fig. 4. Here, we have two trajectories Traj A and Traj B, which are denoted as STN a and STN b in the road network respectively. We can see that STN a and STN b has a large common part of travel time. Then we check if they have common edges. Clearly, the first edges ( v 1 ,v 2 )in STN a and ( v 10 ,v 3 )in STN b are not the same, so they have no common part. The second edges in STN a and STN b are both ( v 3 ,v 4 ), and they have 3 stops and 2 stops respectively. Since the distance be-tween v 7 and v 12 is less than  X  , they have common part, so do v 7 and v 13 . Although v 8 and v 14 have the common stay time, they have no common part because their distance is larger than  X  .

Next, we give the details of computing the common parts of two edges and twostops.First,wecheckiftherei s any common part between two edges by comparing their vertices. Suppose that e a,i is the i -th edge in STN a containing n edges and e b,j is the j -th edge in STN b containing m edges. We have the following equation. where 1  X  i  X  n, 1  X  j  X  m , e a,i = e b,j means that e a,i and e b,j are not the same edge, e a,i .tin is the timestamp of passing the start vertex of e a,i ,and e a,i .tout is the timestamp of passing the end vertex of e a,i .

Then, we discuss how to check if there are common parts of two stops. Suppose that s a,k  X  V ST is the k -thstopin STN a containing g stops and s b,l  X  V ST is the l -th edge in STN b containing h stops. The following equation holds: s where 1  X  k  X  g, 1  X  l  X  h , s a,k .tin is the reach timestamp of s a,k , s a,k .tout is the leave timestamp of s a,k ,and dist ( s a,k ,s b,l ) is the Euclidean Distance between s
We say a stop s is in edge e if the start and end vertices of e are the immediate predecessor and successor of the vertex representing s . For example, in Fig. 4, v 6 is in edge ( v 1 ,v 2 )as v 1 istheimmediatepredecessorof v 6 and v 2 is the immediate successor of v 6 .Wedenote S a,i and S b,j as the sets of stops in e a,i and e b,j respectively, and their stop numbers are denoted as count ( S a,i )= | S a,i | and count ( S b,j )= | S b,j | respectively. The sufficien t condition that there are common parts of two edges is as follow: where 1  X  k  X  count ( S a,i ) , 1  X  l  X  count ( S b,j ).

Now we can compute the length of the common parts of two edges by the following equation: where s a,k  X  S a,i , s b,l  X  S b,j ,and | s a,k  X  s b,j | is the length of their common parts. Note that the length here is the time interval but not the spatial distance.
To compute the common parts of STN a and STN b , we can first compute the common parts for every edge pair and get their sum as follows.
 where | S a | and | S b | are the sums of lengths of all stops in STN a and STN b respectively. The numerator is the total length of all common parts in the stops; the denominator is maximum total length of the stops in these two trajectories. If the length of common parts equals to the length of the maximum length, the similarity is 1, if there is no common part, the similarity is 0. We name the above process of computing equation (3) the Constrained Time-based Common Parts (CTCP) approach.
 However, by using this approach, we may get many similarity values of zero. It is because the time constraint is too strict for some trajectories in CTCP. For example, although two trajectories have exactly the same shape and stops, their similarity score will be 0 if they pass the same road in non-overlapped time in-tervals. Under this circumstance, a zer o score cannot give an accurate evaluation of these two trajectories. Besides, CTCP also does not take the landmark labels into consideration. Ther efore, in the next subsection, we propose an improved method to solve the above problems. 4.2 Weighted Constrained Time-Based Common Parts To overcome the zero value problem, we need to relax time constraint to compute the similarity, i.e., we can horizontally translate the Time-Line of a trajectory. As shown in Fig. 5, before the horizontal translation, Traj A and Traj B has no common part, but they may have common parts after the translation. Note that permitting horizontal translation may undermine the affect of the timestamps in the similarity computation. So we will weight the largest value of common parts according to the distance that the Time-Line moved.

In this approach, to compute the similarity of the stops in two edges e a,i and e b,j , we not only consider the common part of their stops, but also consider the landmark labels of the stops. Based on equation (2), we define the extended similarity of two edges based on stops as follows. where L ( S a,i )and L ( S b,j ) are the sets of landmark labels of all stops in S a,i and S b,j respectivley, and 0 first part computes the ratio of the common parts to the maximum total length of stops, and the second part computes the similarity of two landmark label sets.
To compute the similarity of two edges, we will not only consider their simi-larity based on their stops, but also consider their distance in the road network. This can avoid getting zero value for two edges which are very close in the road network but has no common parts in their stops. Let || STN a || and || STN b || be the lengthes of STN a and STN b in road networks, i.e., the number of edges in STN a and STN b respectively. We define the distance between e a,i and e b,j as Dist ( e a,i ,e b,j ), which representing the number of hops between the start vertex of e a,i and the start vertex of e b,j in the road network. The normalized similarity of e a,i and e b,j based on their distance in the road network is defined as follows. sim d ( e a,i ,e b,j ) measures how similar two edges are by their distance in the road network. If they are the same edges, the similarity is 1; if they are very far from each other, the similarity is 0.

Now we define the overall similarity of two edges as follows. where 0  X   X   X  1 is the weighting parameter.
 Then the similarity of STN a and STN b can be defined as follows.

Recall that we can gradually horizontally translate one Time-Line when we comparing two Time-Lines of trajectories. Suppose that in each step we move the Time-Line STN b by a certain distance  X t . We denote the moved time line as STN r b with moved distance r  X   X t in the r -th step. Considering the moving distance, the similarity of STN a and STN b can be defined as follows. the maximum distance that one trajectory can be moved along the Time-Line. Then we can get the maximum t w eight score among all steps.

We name the above process of computing equation (10) the Weighted Con-strained Time-based Common Parts (WCTCP) approach. In this section, we conduct extensive expe riments to demonstrate the effective-ness of our approaches. All the algorithms are implemented with C #andrun on a computer with Intel Core i5-M430 CPU (2.27 GHz) and 6 GB memory.
Trajectory Dataset: The experiments are based on real trajectory data col-lected by Microsoft Research Asia. This dataset was collected in Geolife project by 178 users in Beijing in a period of over four years, which contains 17,621 trajectories with a total distance of 1,251,654 kilometers and a total duration of 48,203 hours. A GPS trajectory in this dataset is a raw trajectory represented by a sequence of time-stamped points. We w ill convert it into a semantic trajectory using existing semantic stop detection m ethods. These trajectories were recorded by different GPS loggers and GPS-phones, and thus have a variety of sampling rates. 91 percent of the trajectories are logged in a dense representation, e.g., every 1 X 5 seconds or every 5 X 10 meters per point. Fig. 6(a) shows the overview of the dataset within the fifth Ring Road of Beijing.

Road Network : We use the API interface provided by Baidu Map to find out all road segments and intersections from a vector map of Beijing. By doing this we get a road network with 171,504 vertices and 433,391 edges. We also collected the landmark labels (the label of POI) using this API. There are numerous landmark labels, among which we choose some important types of POIs given in Baidu Map, such as Restaurant, Hospital, Supermarket, Scenic spot, Bank, etc. Fig. 6 (b) shows the overview of the Bank POI set.

In our experiments, we randomly choos e 5 users and 5 trajectories for each user to evaluate the algorithms. Before comparing with other methods, we first find all the semantic stops from the raw trajectory by using the algorithm in [1]. We use the default parameter setting in that paper (  X  d = 200 meters,  X  t =30 minutes). Among these 25 trajectorie s, we detected 109 stops, and the number of stops for each trajectory is shown in Fig.7(a).

To validate that our approach WCTCP can avoid generating a large amount of zero values, we first compare our approaches with CVTI in [11]. We choose CVTI because it is also time-based measure, but designed for raw trajectories. The numbers of cell partitions in CVTI are set as 10  X  10 and 100  X  100 respectively to show the affect of different partition sizes. In WCTCP, we set  X  =0 . 5and  X  =0 . 5, and set  X t =5 s since the sampling frequency of the dataset is every 5 seconds per point. Note that  X  affects the weights of stop information and land mark information, the larger  X  is, the more important stop information is;  X  affects the weights of spatial information and semantic information, the larger  X  is, the more important sptial information is. Here we set  X  =0 . 5and  X  =0 . 5 by considering that all stop information, land mark information and spatial information are same important. These two parameters can also be tuned by the actual demands of different users. Fig. 7(b) shows the number of zeros and number of nonzeros obtained by CVTI(10), CVTI(100), CTCP and WCTCP.
 We can see that CVTI(100) with 100  X  100 partitions results in more zeros than CVTI(10) with 10  X  10 partitions. Our basic approach CTCP also have many zeros since the time-constraint is too strict, but our improved approach WCTCP significantly reduces the number of zero values and it performs the best among these algorithms. Here we do not show the similarity value for each pair of trajectories for each user, as there are too many zeros in CVTI. Instead, we will choose another method HGMS [14] for further comparison.

For further evaluation of the effectiven ess of the algorithms for each user, we choose HGMS in [14] as the baseline, beca use it measures the semantic trajectory similarity by considering geographical shape, semantic information, and travel time like we do. However, note that this travel time is only one small part of temporal information considered in our approaches. In this experiment, for each user, we compute the similarity value of each pair among its 5 trajectories and we obtain 10 similarity values. We assign each similarity value an ID, and show its values obtained by HGMS an WCTCP respectively in Fig. 8. Fig. 8(a) shows similarity values computed by HGMS an WCTCP for user 1, in which the values generated by HGMS are all very high (larger than 0.8). WCTCP generates smaller values than HGMS showing the d ifference between the 5 trajectories. Similar trends can also be find in Fig. 8(b), (c), and (e). Note that the similarity values obtained by HGMS and WCTCP for user 4 in Fig. 8(d) are very low. It might because user 4 have a variety of behaviors in different days. However, WCTCP still gets smaller similarity values than HGMS. Fig. 8(f) shows the distribution of similarity values among all the 25 trajectories of these 5 users. We divided [0,1] into the following intervals: 0, (0,0.1],(0.1,0.2], ....,(0.9,1] and show the number of similarity values falling in each interval. We can see that the values obtained by HGMS polarizes severely, i.e., most of the values are 0 or fall into the range of [0.7-1.0]. The values obtained by WCTCP is more balance and nearly normally distributed, where it has smaller number of zero values than HGMS and most values fall into the range of [0.4-0.7].

Fig. 9 shows three trajectories of user one. For simplicity, we only draw the stops and their timestamps. We can see the stops of Day1 and Day2 are the same but with different timestamps. WCTCP gives a lower value 0.84 than HGMS which can reflect the time difference. WCTCP also gives lower similarity values of Day2 between Day3, and Day1 between Day3 with quite different stops and time stamps than HGMS. This shows that WCTCP is more sensitive in detecting the difference of time information than HGMS.

Overall, WCTCP generates smaller similarity values than HGMS in generally, because WCTCP considers more temporal information than HGMS does. There-fore, WCTCP performs better on measuring the difference of time information for two trajectories. Measuring the similarity of semantic trajectories are essential and useful, but re-lated works are very few. It is also very diffi cult to measure semantic trajectories as there are so many factors (geographical information, semantic information, and timestamp information) to be consid ered. In this paper, we first model se-mantic trajectories based on road networks to simplify the process of similarity computation, and then we propose a CTCP approach and an improved WCTCP approach to measure the similarity of semantic trajectories. Our extensive ex-periments on real datasets confirmed t he effectiveness of our approaches. In our future works, we will evaluate the performance of our approaches on more datasets by comparing it with more approaches, and evaluate the affect of tuning parameters in our approaches.

