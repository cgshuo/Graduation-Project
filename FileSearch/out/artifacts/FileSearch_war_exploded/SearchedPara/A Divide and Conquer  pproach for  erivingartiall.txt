 Classical approaches for extraction of such implicit knowledge suffer from the huge number of potentially interesting correlations (specially association rules) that can be drawn from a dataset. In order to limit the number of the reported rules, while conserving the  X  X nformativeness X  property, a battery of results, pro-vided by the mathematical foundations of the Formal Concept Analysis, yielded a compact and lossless subset of association rules, called generic bases of associa-tion rules [1]. In order to derive generic bases of association rules, the extraction of knowledge base problem can be reformulated as follows:( 1 )Discover two dis-tinct  X  X losure systems X , i.e., sets of sets which are closed under the intersection operator,: the set of closed itemsets and the set of associated minimal genera-tors. Also, the upper covers ( Cov u ) of each closed itemset should be available. ( 2 )From all the information discovered in the first step, i.e. , two closure systems and the upper covers sets, derive generic bases of association rules (from which all the remaining rules can be derived). It is noteworthy that the recently pro-posed approaches advocate the use of advanced data structure, essentially based on tries structures, to store compactly in main memory input dataset [2, 3] or to store partial outputs ( e.g. ,[4]).
 trie .The Itemset-trie extends the idea claimed by the authors of FP-Tree [2] and Cats [3] structures, aiming to improve storage compression and to allow (closed) frequent pattern mining without  X  X xplicit X  candidate itemset generation step. Next, we propose an algorithm, falling in the characterization  X  X ivide and Conquer X  to extract frequent closed itemsets with their associated minimal generators . Hence, the derivation of approximative generic association rules is based on the exploration of such closed itemsets organized upon their natural partial order (also called precedence relation ). That X  X  why we construct on the fly, concurrently with the closed itemsets discovery process, the local  X  X ceberg lattice X  [5]. Such local ordered sub-structures can be drawn quite naturally in a parallel manner. Then, these ordered sub-structures are parsed to derive, in a straightforward manner, local generic bases of association rules. Finally, local bases are merged to generate the global one. Such process can be recapitulated as follows: ( i )Construct the Itemset-trie , ( ii )Construct the local ordered struc-tures,( iii )Merge the local generic association rules to derive a global one. the Itemset-trie . Section 3 introduces the construction of the partially ordered mances of the presented algorithms. Section 5 concludes the paper and points out future directions to follow.
 In the context of mining frequent (closed) patterns in transaction databases or many other kinds of databases, an important number of studies rely on Apriori-expensive candidate set generation step, especially with long patterns or un-der low user-requirements. This drawback is reinforced with tediously repeated disk-stored database scans. To avoid the approach bottleneck, recent studies (e.g, the pioneering work of Han et al. and its FP-tree structure [2]) proposed to adopt an advanced data structure, where the database is compressed in order to achieve pattern mining. The idea behind the compact data structure FP-tree is that when multiple transactions share an identical frequent itemset, they can be merged into one with a registered number of occurrences. Beside a costly sorting step, the proposed FP-Tree structure is unfortunately not suited for an interactive mining process, in which a user may be interested in vary-ing the support value. In this case, the FP-tree should be rebuilt since its construction is support dependent. Although the work presented in [3] tackles this insufficiency, the proposed structure, called Cats , in which a single item is represented in a node. That X  X  why we introduce a, support independent, more compact structure called Itemset-trie , in which each node is composed by an itemset. To illustrate this compactness, let us consider the extraction context given by Figure 1(Up). Figure 1(a) depicts the associated FP-Tree , while Fig-ure 1(b) represents the associated Itemset-trie . Indeed, we remark that the associated Itemset-Trie is more compact than the corresponding FP-Tree , since it contains only 7 nodes and 3 levels while the FP-Tree contains 12 nodes and 6 levels.
 As output of the first step, we constructed the Itemset-trie . In order to perform a generic association rule base extraction (specially the approximative one), we need to construct partially ordered structures based on the precedence relation. As we work only with closed itemsets, the order construction needs to retrieve the precedence relation from the family of closed itemsets. The main objective (and contribution also) of our approach is to discover the closed itemsets and to order them on the fly. This is performed in a gradual process, i.e. , by linking one closed itemset at a time to a structure which is only partially finished. We do not aim at constructing only one ordered structure from the input relation (which turns to construct the Hasse diagram), but instead, we look for constructing several ordered structures. Of course, some redundancy will appear, i.e. , a given closed itemset can appear in more than one ordered structure, but we avoid the expensive cost of Hasse diagram construction [7].
 sets and their associated minimal generators repeatedly for different support thresholds settings without the need to rebuild the tree. Like FP-growth [2] and Feline [3], the proposed algorithm falls in the association rules mining algorithms characterization  X  X ivide-and-conquer X . The initial itemset-trie is fragmented into conditional sub-tries. Indeed, given a pattern called p , a p 0 s conditional itemset-trie tree is built, representing faithfully all transactions that contain the pattern p. For example, given the extraction context given by Figure 1(Up), the set of 1-itemsets, with their associated supports, is as follows: conditional itemset-tries. consider only the lexicographic order and we consider that in a given conditional trie all the remaining 1-itemset should be included. For example, in the above mentioned algorithms ( i.e. , FP-growth and Closet ), the conditional b  X  X  trie will not include the 1-itemset { a } and that of c will exclude both { a } and { b } . The authors, aiming to discover only frequent closed itemsets, argue that there is no need to include the 1-itemset { a } in the b X  X  one, since all frequent closed itemsets containing { a } have been already extracted for the a X  X  conditional trie. In our approach, we aim to extract closed itemsets and their associated minimal generators to construct their associated ordered structure ( i.e. , Hasse diagram). Since we plan to lead the mining process in a parallel manner, by assigning to each processor a subset of the conditional tries set, each sub-trie should contain an exhaustive description to ensure frequent closed itemsets discovery correct-ness and to minimize the inter-processors communication cost to check itemsets inclusions.
 Example 1. Let us consider the extraction context given by Figure 1(Up). Below, we describe the ordered structures construction for minsup=1. The set of 1-itemsets, with their associated supports, is defined as follows: &lt; a/3 ;b/3 ;c/4 ;f/4 ;m/3 ;p/3 &gt; . Then starting with the a X  X  conditional Itemset-trie , we can find the associated itemset L a list : &lt; b/ 1; c/ 3; f/ 3; m/ 3; p/ 2 &gt; . From such list we remark that the 1-itemsets c,f and m are as frequent as the 1-itemset a. Hence, they constitute a closed itemset { acfm } with a support equal to 2 and with the 1-itemset { a } as its minimal generator. The 1-itemsets c,f and m are removed from L a . Since it is not empty, we have to go recursively further in depth and to construct the sub-tries, respectively for the 2-itemsets { ab } and { ap } . From L ab , we discover the closed itemset { abcfm } with a support equal to 1 and with the 2-itemset { ab } as its minimal generator. While from L ap , we discover the closed itemset { acfmp } with support equal to 1 and with the 2-itemset { ap } as its minimal generator. The treatment of L a ends since there are no more elements to handle. As output, the local Hasse diagram (associated with the a X  X  conditional Itemset-trie ) can be drawn incrementally. Indeed, the in-depth of L a list enables to connect, first, the closed itemsets { acfm } and { abcfm } , and second to connect { acfm } and { acfmp } . The algorithm has to deal next with the L b list : &lt; a/ 1; c/ 2; f/ 2; m/ 1; p/ 1 &gt; , extracted from the conditional trie. We can easily check that no 1-itemset is so frequent as b and then { b } is a closed itemset. Since the remaining list to develop is not empty, we go further in depth and we start with the 2-itemset { ab } . L ab is defined as follows: &lt; c/ 1; f/ 1; m/ 1 &gt; from that list we discover the closed itemset { abcfm } with a support equal to 1 and with the 2-itemset { ab } as its minimal generator. There is no more exploration of this list since it is empty. The closed itemset { b } is connected to the closed itemset { abcfm } . Next, we have to tackle L bc which is equal to &lt; a/ 1; f/ 1; m/ 1; p/ 1 &gt; . Any 1-itemset in this list is so frequent as { bc } and then we can conclude that { bc } is a closed itemset with a support equal to 2 and having { bc } as its minimal generator. The list with which to go further in depth remains unchanged. We have respectively to handle L abc , L bcf and L bcm lists, all yielding the closed itemset { abcfm } . The closed itemset { bc } is connected to that of { abcfm } . Next, we have to connect { b } to { bc } . This is performed after systematically checking whether they share a common immediate successor, which is the case in this example. In fact, { bc } and { b } are connected respectively to their immediate successor which is { abcfm } . That X  X  why we have to delete the link between { b } and { abcfm } . The processing of the L bc list ends by launching the L bcp list, which gives the closed itemset { bcp } with a support equal to 1 and with { bcp } as its minimal generator.
 This section presents some experimental results of the proposed algorithms. Itemset-Trie and Sub-Trie algorithms were written in C , and were running on a parallel machine IBM SP2 with 32 processors. All experiments have been posed data structure is by far more compact than FP-tree and Cats , by reduc-ing both the number of nodes and the required main memory for storing input from their actual size. While, dense datasets in average are represented at most with 18.8% from their actual size. Figure2 assessing Itemset-Trie construction algorithm performances, shows that the latter is correlated to the number of lev-els. Moreover, it is highly dependent of the actual size of the dataset. We also remark that the number of levels for dense datasets is higher than that of sparse datasets. In fact, the more dense the dataset is, the higher the number of levels ( c.f. , the Chess base reaches 25 levels). In the sequel, we are interested in the study of another aspect putting the focus on the construction of ordered sub-structures algorithm performances. To provide a better idea about trends that lay behind the construction algorithm, we recorded statistics for sparse datasets of variable size, by adding increments of fixed size ( e.g. , 1000 transactions for the T10I4D100K base). We remarked that performances are linearly dependent of the number of transactions. However, this augmentation tends to stagnate reaching a given threshold number of transactions. For dense datasets, we were constrained, due to a lack of available main memory, to evaluate performances by varying the number of items. We remarked that the execution time is lin-early dependent of the number of items. Also, execution times obtained for the C73D10K base are less important than those obtained for the Chess base. This difference can be simply explained by the density, highlighted by the correspond-ing number of levels, of the considered bases (15 levels for the C73D10K base vs 25 levels for the Chess base). We presented in this paper a new data structure to extract frequent closed item-sets in order to generate generic bases of association rules. Then, we proposed an algorithm to construct local ordered structures from which it is possible to derive generic bases of association rules. We examined benefits from implementing the proposed approach on an MIMD machine (IBM SP2). Indeed, the construction method leads to a natural parallelization, in the sense where each processor of a parallel architecture can construct locally its ordered structure. Once the local structures are constructed, a master processor can merge them to derive a global generic base of association rules.

