 1. Introduction vacy [3,4] , and availability [5] .
 the risk of policy misspecification.
 immediately taken when some conditions become true. An example of a system obligation is server, the source address of the attacker should be blocked obligation deadline is detected if the obligation is not immediately enforced after its activation. event after which the obligation becomes effective. This event may be a temporal event such as the event month  X  or an action-based event such as the event  X  when a file is downloaded tients assigned to them within 6 h.
 paper reviews before the conference notification deadline may become unnecessary after their violation. the obligation  X  doctors should remain alert while in the operating room form operations and a reaction policy requiring another doctor to replace the sanctioned doctor. policy-enforcement and the study of several important related issues such as decidability and termination. tions of this paper as follows:  X  are not limited to simple temporal deadlines and event-based deadlines are supported.  X  (persist) after their violation. Therefore, it enables the specification of many real-life obligation requirements.  X  ligations and provides operational semantics for their enforcement.  X  fulfill their obligations.  X  points arguably add to the expressiveness of our obligation language in comparison with other obligation languages. the most relevant related works and Section 13 concludes the paper. 2. Motivating examples manage, update and maintain. Furthermore, they have an intuitive interpretation and are simple to specify.  X 
O 1 : Everyday, doctors should examine patients to which they are assigned at the start of the day.  X  obligation to examine this patient is deactivated.  X 
O 3 : After a surgical operation ends, the operating doctor should examine the patient within 3 h.  X 
O 4 : Doctors should not enter the operating room without scrubs.  X 
O 5 : Doctors should remain alert while in the operating room.  X  biomedical equipment technicians.
 ( O ) may no longer be required and, therefore, should be deactivated.

Obligation ( O 2 ) is similar to ( O 1 ). However as opposed to ( O olation of ( O 2 ) may be associated with sanctions specifying penalties for doctors who violate it. relative temporal deadline which specifies that the doctor is given 3 h to fulfill ( O with ( O 1 ) where the original obligation is more likely to be unnecessary after its violation.
Obligation ( O 4 ) specifies that doctors should not enter the operating room without scrubs. Therefore, ( O ative obligation and corresponds to a prohibition.
 cial features and eye-closures and/or by detecting change in the doctor's heartbeat. Obligation ( O heartbeat.
 ure in the life support equipment of a patient fails. Therefore, ( O
Based on the previous obligation examples, the following obligation requirements can be identified.  X  an action-based event.  X  (until they are fulfilled). These latter obligations are called persistent obligations.  X  required.  X  lated obligations in the following.  X  the violation.  X  tain some state of affairs (continuous obligation).  X  ligations. We also consider that the management of responsibility and delegation are beyond the scope of this paper. 3. System state description and action occurrences the following form.
 where A is an action occurrence and { P , P 1 , ... , P n after A if the conditions P 1 , ... ,P n are true when A occurs.
 For instance, we specify the effects of the occurrence of the actions enter and exit on the state as follows. the location L .
 lows: every two effect laws of the form  X  a causes f if p contradictory effects (f  X   X  g) or disjoint conditions (  X  4. Obligation policy language text and policy languages. 4.1. Sorts and object representation are denoted by symbols starting with capital letters. 4.2. Context speci fi cation on the other hand, specify time moments at which an obligation is activated/deactivated/violated/fulfilled. 4.2.1. State-based contexts State contexts define conditions on the fluent state. They are specified using rules of the following form.
The context rule above states that the context Ctx holds for S,A,O while the fluents f context in_operating_room specified as follows.
 defining this literal should appear first (in a lower strata) in the program. 4.2.2. Event-based contexts in_operating_room becomes false (when the subject S exits the operating room). 4.2.3. Context expressions the conjunction  X  , disjunction  X  , and negation  X  . We define valid state-based context expressions ( CE text expressions ( CE E ) and valid context expressions ( CE ) as follows: where C S is a user-defined state context identifier. The previous expressions in Backus and negation of two state context expressions and expressions of the form CE defines the interval which starts from the moment CE 1 starts to hold until the moment CE expressions using examples in Section 5.2 . Valid event-based context expressions CE expressions CE include both valid state and valid event context expressions. 4.3. Obligation policy language We consider obligation policy rules which are specified in the form of closed ground facts as follows. and Ctx v are obligation context expressions. Ctx a is called the obligation's activation context and Ctx to the context [ start ( C S ), end ( C S )]. When the context expression C representing the context [ Ctx ,  X  ]. In other words, an event-based context expression C the following, when an obligation context expression Ctx is of the form [ C end ( Ctx ) to denote C 2 .

It reads as follows: the subject SR should take the action AA on the object OV when Ctx considered universally quantified. Therefore, they are read in security rules as every action implementing the activity  X  and  X  for every object used in the view 4.3.1. Expressiveness of the obligation language semantics. form [ Ctx ,  X  ]. In other words, the condition defining persistent obligations is: end ( Ctx obligation to pay his/her taxes.
 The context December is specified as follows.
 olation context end ( december ) becomes true if the obligation is not fulfilled. persistent obligations is as follows: end ( Ctx a )  X  X  X  . For instance, consider the obligation is deassigned from the patient  X  . This obligation may be specified as follows: We define the contexts in the rule above as follows.
 doctor assigned to O . The context clinic_hours holds for the subject S from H (assigned_patient),end(assigned_patient)] . Therefore, o 2 is deassigned form the patient. rules of the following form.
 time after their activation. For instance, consider the following obligation. where the context working_hours is a context which holds from 8 am until 6 pm as follows.
This is further clarified in the following section when the enforcement of obligations is presented. goes below some threshold. This obligation may be specified as follows.
 The context below _ limit _ heart _ rate is specified as follows.
 text to activate obligations after access requests. 5. Obligation state model The concrete level denotes obligations derived from the abstract obligation as follows: is a role. It is specified as follows.
 5.1. Obligation states ent. The meaning of the different states and their corresponding fluents are as follows:  X  fluent Inactive ( N,S,A,O, Ctx,Ctx v ).  X   X   X   X 
Violated ( N,S,A,O,Ctx,Ctx v ).  X  ( N,S,A,O,Ctx,Ctx v ).
 violation is however beyond the scope of this article and is left for future work. In the following, the notation S represent a transition from state S i to state S e . We describe transitions in the state of obligations as follows.  X 
At this moment, we say that the obligation is activated.  X  this moment, we say the obligation is violated.  X   X   X  deactivated.
 are only possible when obligations are non-persistent. 5.2. Example of obligation transition management texts presented in Table 1 begin to hold. The obligations o fore the end of their clinic hours and only differ in their activation context.
Table 1 become true. In this example, we consider that ( d and ( p 1 ,p 2 ) are objects used in the view patients . We assume that at the start of the working day, only p
Consider a policy which consists only of the obligation o ( assigned_patient &amp; start ( working_hours )). Therefore in this case, d ( C ). This individual obligation is violated when the clinic hours of d mains active in the system until it is fulfilled.
 that o 7 is activated when a doctor is assigned a new patient during the day. Therefore, when d comes obliged to examine p 2 . This is also a persistent individual obligation which is fulfilled when d
As opposed to o 6 and o 7 , the activation context of the obligation o ing_hours ). This means that o 8 is activated whenever this context becomes true. Consequently, doctor d check p 1 at the start of the working hours ( C 1 ) and d is deactivated when p 1 is deassigned from p 1 ( C 3 ).
 context is the context ( end ( working_hours )) ( C 6 ). This means that o means that d 2 obligation to check p 2 will not be violated even if s/he does not check p of the working hours and before the end of the clinic hours of d Let us consider the following obligation.
 text ( start ( October )) is detected. The obligation violation context is the context unless it is immediately executed since its violation context is trivially met. Therefore, o framework, a system obligation is immediately enforced after its activation. 5.2.1. On policy representation rule specification and policy interpretation and allows non-specialists to use it. 6. Formal enforcement of obligation policies the enforcement requirements of obligation policies then we show how obligations may be enforced using active rules. 6.1. Reference monitors for obligation policies the modeling of reactive behavior to enable the study of the enforcement of obligation policies. 6.2. Active rules
Active behavior has been largely studied in database research [19 tation of active behavior.
 some event if some conditions are met. We consider active rules of the following form. moments that are relevant to change in the state of obligations. These events have the form Hold gations in their different states, (3) conditions p 1 , ... required after event detection. 6.3. Policy enforcement state. This fluent holds when this obligation is in this state. For instance, the fluent Active ( N,S,A,O,Ctx,Ctx active obligation for S to take A on O . At the initial state, all concrete obligations are considered inactive. 6.3.1. Obligation activation rule
An obligation is activated when its context starts to hold. This is specified using the following rule.
The rule above specifies that the fluent Active ( N,S,A,O,Ctx,Ctx
N requiring S to take A on O before Ctx v is started. The fluent Inactive ( N,S,A,O,Ctx,Ctx no longer inactive. The function Absolute_Time ( Ctx  X  v ,Ctx ral contexts of the form delay (  X  T ) into absolute temporal contexts of the form at ( 6.3.2. Obligation violation rule
Active into Violated . This is specified as follows. 6.3.3. Obligation ful fi llment Obligations are fulfilled when the context ctx_ fulfillment ( ctx_ fulfillment these contexts as follows.
 enforced using the following rules. 6.3.4. Obligation deactivation
An active obligation is deactivated when its context ceases to hold. This is enforced as follows. olated obligations are deactivated, their state is updated to inactive / violated using the following rule. 7. Sanction/reaction and recompense policies framework, violated obligations are represented by fluents having the form of Violated ( N,S,A,O,Ctx which hold when such fluents hold sanction/reaction contexts.
 obligation may be specified as follows.
 where the contexts violated_o 6 and dept_head are specified as follows.

The context violated_o 6 holds for any subject S if s/he has violated o object H if S is a member of the department D and H is the head of D .
 tients. This recompense policy can be specified as follows.
 The context fulfilled_o 6 and dept_member are specified as follows.

The context rule above specifies that fulfilled_o 6 holds for the doctor O after s/he fulfills o between a subject H and an object O if O is a member of the department D and H is the head of D . follows.
 8. Con fl ict management and intra-modality conflicts between obligations.
 this doctor from examining the patient. detection and resolution of conflicts between obligations. 8.1. Con fl icts between obligations and prohibitions on the object O , and the fluent Effective_Obligation ( N,S,A,O,Ctx Effective_Obligation is therefore defined as follows.
 the same time.

To resolve this type of conflict, we consider the following default strategies.  X  rule deactivates active obligations when they are in conflict with a prohibition.  X  fluent Prioritize_Obligations_Over_Prohibitions and is enforced using an active rule as follows.
The fl uent Inactive_Prohibition represents a prohibition when it is inactive.
The context compensate_canceled_obligation is true for a subject D conflict indicates that a doctor D is prohibited from examining a patient P and if D becomes true for a subject D 1 and an object P , the obligation o the following form.
 this form are used to specify exceptions when the default strategy prioritizes prohibitions. 8.2. Con fl icts between obligations form.
 constraint.
 subject at the same time.
 left for future work but they are summarized as follows. [24,25] . one week. Assume that the Cairo-based client requests a meeting with S on the 4th of April. has to fulfill his/her obligation is shortened. In this situation, it is arguable that the subject becomes therefore, less sanctions should be applied.
This approach is currently being studied. 9. Formal language and operational semantics 9.1. Language syntax actions A and their associated effect laws. (4) Events E : have the form of Hold after the detection of events to manage and enforce obligations. 9.2. Policy-managed domain descriptions is used in a security rule in the policy. Relevant contexts may be composed using the operators &amp;, terms of basic user-defined contexts using the following decomposition rules. similar to Datalog [18] . 9.3. State evaluation equated with f ). We consider that a fluent literal f is true in s if f is positive and f We define the valuation function  X  ( p , s ) which assigns p in s either the value of True or False as follows. When we say that p holds in s .
 9.4. Causal interpretation define these three basic auxiliary functions then the transition function is presented. 9.4.1. The fl uent transition function p an effect of a in s .Let E ( a , s ) be defined as follows.
 9.4.2. The event function
The event Hold e ( S,A,O,start ( Ctx )) is produced in a state s hold for ( S,A,O )in s . Similarly, the event Hold e ( S,A,O,end ( Ctx )) is produced in a state s for ( S,A,O )in s  X  and Ctx holds for ( S,A,O )in s . We define our event function as follows. 9.4.3. Interpretation and semantics of composed contexts as follows. For simplicity, we denote fluents of the form Hold ( S,A,O,C )by Hold ( C ) and events Hold  X 
The conjunction (&amp;): the start of a conjunction of two state-based context expressions ( Ctx sion is detected while the other context holds. These rules are represented as follows.
Proof. 3  X 
The disjunction (  X  ): the start of a disjunction including two state-based context expressions ( Ctx rules are represented as follows.  X  text unnegated.  X 
Other Rules : we also define the start and end of event contexts and the start and end of ( Ctx 1 &amp; start ( Ctx 2 )). 9.4.4. Triggered rules transition function
An active rule r is said to be instantiated in a state s  X 
D whose event e is unifiable with an event in ev ( s  X  , s )and p function is defined as follows: 9.4.5. Action selection function active rules are executed before those having lower priority. We denote the actions of an active rule r by that there is a total order established between these priorities using the relation than or equal to the priority p  X  ).
 9.4.6. Causal interpretation
The transition function is defined by a partial function  X  the state after the occurrence of actions. We define the transition function as follows (where active rule r ). 1. if A =[] then  X  ( A , s )= s 2. if A = a 1 , a 2 , ... , a n then  X  ( A , s )=  X  ( S ( res ... , E ( a 1 , s )))).

The transition function states that the occurrence of a sequence of actions a the state which results from the successive execution of a these actions, the actions of the active rules instantiated in s 10. Termination and determinism 10.1. Determinism ligation is first violated if its violation and deactivation event occur at the same time. 10.2. Termination 11. Implementation using the resource description framework (RDF) [29] , a standard model for data interchange on the Web. resource usage and to enforce obligations. 12. Related work tics as ours. It is also unclear whether logic-based policy analysis techniques can be supported in their framework. management.
 olated. This limits the expressiveness of the language and does not allow the support of sanction policies. programming language than a high-level policy specification language.
 On the contrary, in our action-language-based approach, the maintenance of a history is not required. contextual authorization rules are not considered. We do not make such restrictions in our framework. management. On the other hand, in their framework history-management should be considered similarly to [2] . ture extension of this work.
 13. Conclusion supported in the policy language and studied their detection and resolution.
References
