 CrewScout is an expert-team finding system based on the concept of skyline teams and efficient algorithms for finding such teams. Given a set of experts, CrewScout finds all k -expert skyline teams, which are not dominated by any other k -expert teams. The dom-inance between teams is governed by comparing their aggregated expertise vectors. The need for finding expert teams prevails in applications such as question answering, crowdsourcing, panel s-election, and project team formation. The new contributions of this paper include an end-to-end system with an interactive user interface that assists users in choosing teams and an demonstration of its application domains.
 H.2 [ DATABASE MANAGEMENT ]: Database applications Skyline Queries; Team Recommendation
We introduce CrewScout ( http://idir.uta.edu/crewscout ), a system for finding expert teams in accomplishing tasks. The underpinning concept of the system is skyline teams (called skyline groups in [2, 3]). The new contributions made in this paper include an end-to-end system with an interactive user interface that assists users in choosing teams among potentially many skyline teams and an extension of application and demonstration scenarios into more general areas ([2, 3] mostly focused on the application of forming teams in fantasy sports games.)
Consider a set D of n experts t 1 , . . . , t n , modeled by m numeric attributes A 1 , . . . , A m that represent their skills and expertise. Any subset of k experts form a k -expert team . CrewScout finds, for a given k , all k -expert skyline teams, i.e., k -expert teams that are  X  not dominated by any other k -expert teams. It further assists users in choosing among the skyline teams. The notion of dominance between teams is analogous to the dominance relation between tuples in skyline analysis [1]. CrewScout calculates for each team an aggregate vector of its experts X  individual vectors. CrewScout provides efficient algorithms for four commonly used aggregate functions X  X VG (i.e, SUM, since we only compare teams with equal size), MIN and MAX. 1 A team G 1 dominates another team G 2 (denoted G 1  X  G 2 ), if and only if the aggregate value of G on every attribute is better than or equal to the corresponding value of G 2 and G 1 has better value on at least one attribute.
The need for finding expert teams prevails in several application areas, including question answering, crowdsourcing, panel selec-tion, project team formation, and so on. This is illustrated by the following motivating examples.
 CrowdSourcing Consider forming a team of Wikipedia editors to write a new Wikipedia article related to  X  X atabase X  and  X  X ndexing X . Table 1 shows all relevant editors t 1 , . . . , t 5 and their expertise on the two topics. We want to assign the task to a team of 2 editors. Table 2 shows the aggregate vectors under AVG, MIN and MAX, for all possible 2 -expert teams where G i,j stands for a team of experts t i and t j . A simple scheme such as picking top editors on individual topics does not work. For example, G 1 , 2 consists of the top editor on each topic and has an aggregated vector h 1 . 5 , 1 . 5 i with regard to AVG. G 3 , 4 , with vector h 2 . 0 , 1 . 5 i , dominates G (denoted G 3 , 4  X  G 1 , 2 ) under AVG. Hence, G 3 , 4 is a better team in terms of collective expertise. In fact, G 3 , 4 is a 2 -expert skyline team, since no other team dominates it under AVG. Table 2 high-lights all 2 -expert skyline teams for every aggregate function. Questing Answering Consider a question-answering platform such as Quora.com . A question is displayed to users who might an-swer it. The question asker can also explicitly solicit answers from certain users, oftentimes by offering rewards. To receive quality answers, it is necessary to intelligently post the question to users with proper expertise. More often than not, a question requires ex-pertise on several aspects that cannot be fulfilled by any single user, needing attention from a diverse team of experts who collectively
W hile the concept allows arbitrary aggregate functions, efficient algorithms for less common functions remain an open problem. excel. For instance, consider question  X  X s C or Python better for high-performance computing? X  To get a comprehensive answer, we need experts in  X  X igh performance computing X ,  X  X  X , and so on. Other Motivating Applications The need for finding expert teams arises in several other applications. 1) Consider the task of choos-ing a panel of experts to evaluate a research paper or a grant propos-al. An expert can be modeled as a tuple in the multi-dimensional space defined by the paper X  X  topics, to reflect the expert X  X  strength on these topics. The collective expertise of a panel is modeled as the aggregate vector of the corresponding tuples. 2) Forming col-laborative teams for a software development project can be viewed as finding programmers who are collectively strong in the multi-dimensional space of desired skills for the project. 3) In a variety of applications we look for  X  X eams X  in more general sense, such as bundles of products, reviews, stocks, and so on. For instance, to summarize a product X  X  many customer reviews, choosing a set of diverse reviews is forming a  X  X eam X  of reviews, where the reviews are modeled by attributes such as  X  X entiment X ,  X  X ength X ,  X  X uality X , etc. Another example is online fantasy sports where gamers com-pete by forming and managing team rosters of real-world athletes, aiming at outperforming other gamers X  teams. The teams are com-pared by aggregated statistics (e.g.,  X  X oints X ,  X  X ebounds X ,  X  X ssists X  in basketball games) of the athletes in real games.

An attractive characteristic of a skyline team is that no other team of equal size can dominate it. In contrast, given a non-skyline team, there is always a better skyline team. This property distinguishes CrewScout from other team recommendation techniques. The sky-line teams consist of the teams that are worth recommending. They become the input to further manual or automated post-processing that eventually finds one team. Admittedly, determining the  X  X est X  team is a complex task that may involve more factors than what skyline teams can capture X  X .g., which experts are available for a task, whether they have good relationship to work together, and so on. The post-processing is thus crucial. Examples of such post-processing include eye-balling the skyline teams, filtering and rank-ing them by user preferences, and browsing and visualization of the skyline teams. Particularly, CrewScout provides an interactive tool to assist a human user in exploring and choosing skyline teams.
Figure 1 shows the GUI of CrewScout , which is comprised of a task panel , a skill panel , a parameter panel , and a display panel . The task panel presents a list of available tasks. When a user clicks a task, CrewScout provides more details about it. CrewScout also provides a keyword search box at the top of this panel for searching available tasks. The skill panel presents the skills required for com-pleting the selected task. It shows a checkbox for each skill. By de-fault, all the checkboxes are checked. The user can check/uncheck some of them according to their preference. When the user clicks the  X  X how Experts X  button, the display panel presents a paginated list of all experts who have expertise in at least one checked skill. If the user further checks/unchecks some skills, the expert list is automatically refreshed to reflect the change. Experts are ordered by summations of their expertise in all selected skills in the current implementation. In the expert list, a filter is provided for each skill. The user can filter the experts by setting the minimum and maximum expertise for one or more skills. The user can also filter the experts by their names through partial string matching.
The parameter panel allows the user to set parameters for skyline team computation. It includes a textbox for specifying the skyline team size and radio buttons for choosing an aggregate function (AVG, MIN, or MAX). Once the user clicks the  X  X kyline Teams X  button, CrewScout calculates all skyline teams (considering all experts satisfying the aforementioned filters) and shows them in the display panel (Figure 2). Similar to the filters on experts, CrewScout also provides filters for the skyline team list, including filters on team members X  names and minimum/maximum aggregated exper-tise on individual skills. The teams satisfying the conditions are called the qualifying skyline teams . When the display panel exhibits the skyline teams, a clustering panel is added below the parameter panel. It provides a  X  X ick a Team X  button and three drop-down lists that allow the user to choose a clustering algorithm (e.g., K-means ), a similarity/distance function (e.g., Euclidean distance) for the clustering algorithm, and the number of clusters. When the user clicks the button, CrewScout will display below the current panels a visualization interface (Figure 3) that clusters the experts in the qualifying skyline teams and assists the user in exploring and choosing teams.

The visualization interface has two panels. The left panel visu-alizes the clusters. Each expert that belongs to at least one quali-fying skyline team is represented as a circle. Circles in the same cluster are annotated with the same color. Their positions are auto-matically determined by the multi-foci force layout ( https://github. com/mbostock/d3/wiki/Force-Layout ). The size of a circle is pro-portional to the number of qualifying skyline teams containing the corresponding expert. At the beginning, only the labels of big cir-cles (containing information of corresponding experts) are visible. When the user hovers the mouse over a circle, the expert X  X  profile (including the name and the number of skyline teams containing the expert) is displayed in a small pop-up window. The user can gradually zoom in to see the labels of smaller circles. The user can iteratively select k experts. Whenever the user selects an expert, CrewScout removes those circles whose corresponding experts do not belong to any skyline teams with all selected experts so far. The remaining circles are re-clustered and resized, based on on-ly qualifying skyline teams containing the selected experts. The right panel presents a polar-chart. Each polygon in the polar-chart represents a selected expert X  X  expertise on the chosen skills. The aggregated expertise of the selected experts is also represented by a polygon. The selected experts are listed under the polar-chart. The user can remove any expert by clicking the cross sign beside it, and the clusters of circles are refreshed accordingly. Once k experts are selected, a skyline team is chosen. A  X  X ick Another Team? X  button appears in the left panel. If the user clicks it, two more panels are added to the lower portion of the visualization interface X  X he left one lists all selected teams and the right one presents another polar-chart that compares them.
An online demonstration of CrewScout is hosted at http://idir.uta. edu/crewscout . Its front-end UI is developed in PHP+JavaScript. The system demonstrates three application scenarios, including pa-per reviewer selection, question answering, and team formation, on a 900K-publication dataset collected through Microsoft Academ-ic Search API, a stackoverflow.com dataset and an NBA dataset from databasebasketball.com ,respectively. It also supports user-uploaded datasets. Below we describe the demonstration steps for the reviewer selection scenario, with an imaginary user Amy. (1) Amy searches for, say  X  X atabase X , and matching publications are displayed in the task panel. A default publication is highlighted. (2) Amy clicks a publication to show or hide its abstract, depending on its status. When a publication is selected, the skill and display panels are refreshed with the corresponding required expertise and qualifying reviewers, respectively. Amy checks/unchecks one or more skills, the qualifying reviewers are automatically refreshed. Amy filters the reviewers by setting minimum and/or maximum thresholds on one or more skills. (Figure 1) (3) Amy specifies an aggregate function and a skyline team size in the parameter panel. Once Amy clicks the  X  X kyline Teams X  button, the display panel shows the skyline teams (Figure 2). Amy can filter them by reviewer name and thresholds on aggregated skills. (4) After choosing clustering parameters, Amy clicks the  X  X ick a Team X  button and the visualization interface presents the reviewer clusters (Figure 3). (5) Amy moves the mouse over the circles to see the reviewer-s X  profiles and she also zooms in and out. When Amy selects a reviewer, the corresponding expertise polygon is inserted into the polar-chart. Amy repeats this step multiple times until a k -reviewer team is formed. (6) Amy clicks the  X  X ick Another Team? X  button to select another team. In this way, Amy chooses multiple teams and compares them in a polar-chart.
