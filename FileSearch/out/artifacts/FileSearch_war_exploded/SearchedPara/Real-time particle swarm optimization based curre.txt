 1. Introduction
Modern power systems are using more and more semiconduc-tor-based devices. Even though these devices are flexible and efficient, they may degrade power quality by creating harmonics in current. The harmonics can cause many problems such as resonance, excessive neutral currents, low power factor, etc. It may even cause malfunctions in control, communication and automation systems. Thus, current harmonics need to be canceled efficiently.
Traditionally, passive shunt filters are installed near nonlinear loads to mitigate harmonic currents. However, the passive filters have drawbacks such as fixed compensation, large size, and resonance. These limitations can be overcome by power electronics solution  X  active power filters. Compared with conventional passive filters, modern active power filters are superior in filtering performance, smaller in physical size and more flexible in applica-tion ( Akagi, 1996 ). The typical configuration of a voltage source active power filter is shown in Fig. 1 . The active power filter detects harmonic information in nonlinear load currents and actively injects counter harmonic currents to the gri d so that the currents at point of common coupling (PCC) approxim ate sinusoidal waveforms.
Proper active filter operation needs accurate measurement of the harmonic components in currents or voltages to generate the required control references. Fast and precise harmonic detection algorithms are essential for the effective harmonic compensation.
Various methods have been proposed for harmonic detection. In frequency-domain, discrete Fourier transform and fast Fourier transform have been widely used ( Qian et al., 2008; Heydt, 1989 ).
The main disadvantage of these techniques is the time delay associated with sampling and computation of Fourier coefficients, which makes them difficult for real-time implementations. A lot more methods have been proposed in time domain.

Notch filters or band pass filters were used to extract harmonics but it was difficult to implement the ideal amplitude and phase characteristics of the filters and the performance was sensitive to operation conditions ( Svensson, 2001; Rastogi and Mohan Edris, 1995 ). Improved or adaptive notch filters are also complicated and still sensitive to power system parameter variation ( Newman et al., 2002; Ribeiro et al., 2004 ). A popular method for active filter reference generation is based on p X  X  theory, which was first proposed in the early 1980s by Akagi, in which the instantaneous active and reactive power were computed in terms of transformed voltage and current signals via the a  X  b transformation ( Peng and
Lai, 1996; Peng et al., 1998 ). Additionally, the synchronous d X  X  reference frame method is widely used for AF control ( Jintako-sonwit et al., 2002a, 2002b ) because the fundamental component or harmonics can be converted to the dc quantities in different rotating frames and low pass filters can easily extract these dc quantities with little phase delay consideration. Other methods that can be used in active filter applications are phase-locked-loop (PLL) methods or extended PLL methods ( Karimi-Ghartemani et al., 2004, 2006 ). These methods are also very complicated and parameters are not easily adjusted.

Recently, a multiple adaptive feed-forward cancellation (MAFC) algorithm with selective feature was proposed in Qian et al. (2006) . This algorithm does not need voltage information to extract harmonic currents so that it is invulnerable to contami-nated voltages. In addition, this harmonic identification method is phase independent. That means it can identify harmonic contents in three-phases independently, even for unbalanced system or single-phase system.

However, the MAFC algorithm needs to identify the funda-mental frequency and harmonic contents separately. Thus, it is hard to analyze the stability of the overall identification process.
In addition, the complexity of the MAFC algorithm is proportional to the order of harmonics to cancel. Limited by computational capability of hardware, only the most significant orders of harmonics can be considered for identification. Even if the harmonics of interest can be identified and canceled successfully, those unidentified higher order harmonics still exist. During our previous studies, it is found that the current content used to compensate higher order harmonics only take a very small portion of the overall corrective current. Thus, the selective feature is not very useful in most operating conditions. It is possible and preferable to cancel all the harmonics simulta-neously. Thus, instead of identifying harmonic components separately, we just need to identify the fundamental current.
Theoretically, by using the identified fundamental current as reference for harmonic cancellation, all the harmonics in current can be eliminated.
 The above idea is straightforward but difficult to implement.
To identify the reference signal for harmonic cancellation, four parameters, i.e. magnitude, frequency, phase, and dc current, need to be identified simultaneously. This identification problem is beyond the capability of most adaptive identification algorithms.
In this paper, the identification problem is first transformed into a corresponding optimization problem and then solved using PSO. The objective of the optimization problem is to find four parameters that can create the best match between the generated reference signal and measurements. Since the identified reference signal will be used in harmonics cancellation, real time identifica-tion is necessary. Correspondingly, real time implementation of the PSO based identification algorithm is needed.

However, most of existing PSO based parameter identification algorithms were only implemented offline. This is mainly because of the unavoidable simulation time to evaluate the candidate solutions. During the optimization /identification process, to evaluate a candidate solution, a model has to be simulated with the candidate solutions under the same initial conditions as the measurement. PSO algorithm requires a number of iterations to obtain a satisfactory solution. For every iteration, the model has to be simulated once for every particle. Thus, the model needs to be simulated a number of times to identify parameters from each measurement. Unless the simulations can be realized faster than real time, successful identification cannot be accomplished within the time used for measurement.

Through faster than real time simulation and advanced programming, the proposed RT-PSO algorithm is able to accom-plish a predefined number of iterations within the time used for measurement. Through rigorous flow control, the algorithm is able to provide accurate estimations of the fundamental signal. The identified signal can be used as reference for hysteresis current controller, which will generate gating signals for the active filter to compensate the harmonic contents in load current. The proposed algorithm is first tested in open-loop, which is to identify fundamental current from an artificial harmonic signal. After that, the algorithm is tested in closed-loop control system and is used to generate reference signal for harmonic elimination. For both tests, the proposed solution is able to provide good performance.

In the paper, a detailed description of the Simulink based implementation using basic Simulink modules and Matlab Embedded functions is provided. The Simulink program can be converted to C code through Real Time Workshop. Thus, the time consuming C programming is avoided. Since most popular controllers use C program, the implementation is made easier. If the capability of a hardware controller is not sufficient for a specific implementation, the RT-PSO can be adjusted by following the steps introduced in the paper. In this way, the capacity of hardware controller can be fully utilized. The real time implementation of PSO can be extended to many other online optimization, identification, and control problems.

The rest of the paper is organized as follows. Section 2 provides sufficient details on PSO, PSO based identification, faster than real time simulation and real time implementation of PSO. Section 3 presents simulation studies for both open-loop and closed-loop tests. Finally, concluding remarks are given in Section 4. 2. RT-PSO based fundamental current estimation 2.1. Particle swarm optimization
PSO is a population based stochastic search algorithm. It was first introduced by Kennedy and Eberhart (1995) . Since then, it has been widely used to solve a broad range of optimization problems. The algorithm was presented as simulating animals X  social activities, e.g. insects, birds, etc. It attempts to mimic the natural process of group communication to share individual knowledge when such swarms flock, migrate, or hunt. If one member sees a desirable path to go, the rest of this swarm will follow quickly ( Shi, 2004; Kennedy et al., 2001 ). In PSO, this behavior of animals is imitated by particles with certain positions and velocities in a searching space, wherein the population is called a swarm, and each member of the swarm is called a particle. Starting with a randomly initialized population, each particle in PSO flies through the searching space and remembers the best position it has seen. Members of a swarm communicate good positions to each other and dynamically adjust their own position and velocity based on these good positions. The velocity adjustment is based upon the historical behaviors of the particles themselves as well as their neighbors. In this way, the particles tend to fly towards better and better searching areas over the searching process ( Kennedy and Eberhart, 1995 ). The searching procedure based on this concept can be described by v  X  wv i  X  c 1 rand 1  X  x p x i  X  X  c 2 rand 2  X  x g x i  X  x  X  x i  X  v i  X  1  X  where w , c 1 , and c 2 are the inertia weight, cognitive acceleration, and social acceleration constants, respectively; rand 1 and rand are two random numbers; x i represents the location of the i th particle; x p represents the best solution (fitness) the particle has achieved so far ( pbest ); x g represents the overall best location obtained so far by all particles in the population ( gbest ); and v represents the velocity of the particle with v min i r v i v max determines the resolution, or fitness , with which regions between the present position and target position are searched.
The constants c 1 and c 2 represent the weighting of the stochastic acceleration terms that pull each particle toward pbest and gbest positions. According to past experience, v i max is often set at 10 X 20% of the dynamic range of the variable on each dimension, and w , c 1 , and c 2 are often set to 0.8, 2, and 2.

From the updating rules and flow chart that can be found in many PSO related papers, it can be seen that PSO is very simple in concept and easy in realization. Thus, PSO has gained popularity in recent years and many researchers from different fields have attempted to improve the performance of the original PSO. Newer versions and the choices of proper values of the parameters to improve the performances of PSO are discussed in Shi and Eberhart (1998) , Eberhart and Shi (2000) , van den Bergh (2001) , Clerc and Kennedy (2002) , Trelea (2003) , and Kennedy and
Mendes (2006) . Both performance and execution time of PSO are improved in these modifications. Recently, a simple and efficient way of tuning the PSO parameters was presented by
Pedersen (2010) and Pedersen and Chipperfield (2010) . The best performing PSO parameters were found to be contrary to guide-lines in the literature and often yield satisfactory optimization performance for simple PSO variants. Recent survey of PSO can be found in Banks et al. (2007, 2008) , Kameyama (2009) , del Valle et al. (2008) ; AlRashidi and El-Hawary (2009) , where del
Valle et al. (2008) ; AlRashidi and El-Hawary (2009) focused on power system applications. 2.2. PSO based parameter estimation
System parameters can be identified indirectly from measure-ments if it is hard or expensive to measure the parameters directly. Parameter identification is very important for state estimation, fault detection and diagnosis, and controller design, etc. Many traditional parameter identification algorithms have been proposed in the past. However, accurate and efficient identification of complex nonlinear systems is still a challenging problem. Computational intelligence is the study of adaptive mechanisms to enable or facilitate intelligent behavior in complex and changing environments. It has been demonstrated that applications of computation intelligence techniques can bring about better performance or improved designs. Unlike traditional identification algorithms whose applications are limited by model structures, computational intelligence based algorithms do not have special requirements on model structures. As long as system model performs differently for different parameters, which is almost always true, computational intelligence will be able to identify the unknown parameters in the models. There are numerous researches on the applications of computational intelligence techniques to parameters identification and control system design, such as Santos Coelho (2009) , Jie et al. (2008) , Santos Coelho and Cocco Mariani (2008) , Yan Jiang et al. (2007) , Samrat et al. (2009) , Cai et al. (2008) , Caponio et al. (2007) ,
Fujishima et al. (2002) , Cassimere and Sudhoff (2009) , Cale et al., (2009) , and Kwon and Sudhoff (2006) .

The PSO based parameter identification approach can be illustrated with Fig. 2 .

First, system response under input u is measured for identification. Then, system model with tentative parameters ( ^ p ) is simulated under the same initial condition and inputs as the system. The outputs of the simulated model ( ^ y ) and measurement ( y ) of system are input to a performance evaluator for comparison.
The performance evaluator calculates the fitness C  X  ^ p  X  of the tentative solution according to a cost/fitness function. The commonly used cost function can be defined as a weighted quadratic function as in Liu et al. (2007, 2008) . Once all the candidate solutions (particles) have been evaluated, the PSO based identifier can provide a new set of candidate solutions according to the updating rules. The new candidate solutions with updated ^ p will be used to update the system model for next iteration of optimization until the predefined number of iteration or maximum allowable error have been met. More details on the above identification process can be found in related literature, such as in Liu et al. (2007, 2008) .
 2.3. Faster than real time simulation
The definition of  X  X  X eal-time X  X  is different for different applica-tions. In this paper, the objective is to achieve good identification within the time used for measurement. To implement PSO algorithm in real time, two possible solutions can be explored.
The first is to design a compact algorithm to save memory and improve computational efficiency, such as the compact genetic algorithm in Harik et al. (1999) and Mininno et al. (2008) . The second solution is to realize faster than real-time simulation so as to speed up the performance evaluation process. This paper chooses to explore the possibility of the second method.
As introduced earlier, PSO usually needs a number of iterations to identify parameters from measurement. For every iteration, the system model needs to be simulated once for each candidate solution. If there are n p particles, which means n p candidate solutions, the system model needs to be simulated n p times for every iteration. Even if all the particles can be simulated in parallel, the optimization has to be done iteration after iteration.
Thus, the major problem for real-time implementation is to complete predefined number of simulations in a limited time.
To realize the  X  X  X eal-time X  X  objective described above, faster than real-time simulation is necessary. Instead of using powerful hardware, the simulation time can be minimized by modifying original system model. This idea can be illustrated using the following equations: _
X  X  F  X  X 1  X  X  G  X  X 1 , U 1  X  X  2  X  _
X  X  n  X  F  X  X 2  X  X  G  X  X 2 , U 2  X  X  3  X 
Eq. (2) describes the dynamics of the original system and (3) describes the modified system. In (3), n is a positive number that is larger than 1 and the definitions of F (.) and G (.) in (2) and (3) are the same. Since the time constant of (3) is 1/ n that of (2), the response of (3) is n -times faster than (2). Given the same initial conditions and n -times faster input, (3) can provide n -times faster response compared with (2). If both systems are running in real-time and the simulated system (3) is measured n -times faster, only 1/ n of the time for measurement is needed to obtain the same set of samples.

Now, let us consider one example illustrated in Fig. 3 .In Fig. 3 , n is the number of particles, n i is the number of iterations, n the number of samples, t s 1 is the sample time of measurement, t is the sample time of the modified model. If only simulation time is considered, the updating interval of identified parameters will the time used for measurement that is D t m  X  n s * t s 1 smaller than D t m by adjusting three parameters n s , t s 2
Now, let us consider the fundamental current identification example. If 100 samples ( n s  X  100) are measured at a sample time of 500 m s( t s 1  X  500 m s), it will take 0.05 s ( D t m the 100 samples. If we modify the system model by making it running 50 times faster ( n  X  50) and measure the modified system atasampletimeof10 5 s( t s 2  X  10 m s), it will only take 0.001 s to obtain the 100 samples for the modified model. Even though their time stamps are different, the quantities of the two sets of 100 samples will be the same. According to the PSO based identification algorithm, 10 particles ( n p  X  10) in a swarm can be simulated in parallel. Thus, we can nearly finish 50 iterations within 0.05 s. Since it takes time to update the parameters according to PSO updating rules, we can choose less number of iterations in implementation.
It should be noted that the above-mentioned examples assume that the modified system can be simulated in real-time. During implementation, the actual simulation time is mainly determined by the capability of the controller X  X  hardware and the complexity of the model. If the modified model can be simulated in real-time or even faster, the real-time implementation of the PSO based identification will have no problem. In the following discussion, we will consider the situation when the modified model cannot be simulated in real-time. What can we do if we have to overcome the problem by tuning the algorithm rather than upgrading the controller hardware?
In such situations, the following two methods can be adopted one after another. The first method is to decrease sampling frequency (enlarging t s 1 and t s 2 ), the number of samples ( n number of iterations ( n i ). If this method works, there is no impact on identification performance and the  X  X  X eal-time X  X  objective. If the first method does not work, we can try the second method. The second method is to decrease n , which will definitely make it work. However, the expectation on performance has to be lowered. Detailed analyses are given below.

By decreasing sampling frequency, the simulation can focus on less fixed data points. In this way, the computational burden on controller hardware and I/O module can be alleviated. However, according to Shannon sampling theorem, the sample time cannot be too large. Otherwise, the measurement will miss some iterations n i iterations n i iterations n i iterations parameters =n important details. If decreasing sampling frequency start to result some identification error, we need to keep the minimum working sampling frequency and try other methods. The second method is to use fewer samples, which mean simulating the system for a shorter time. As mentioned before, the PSO based identification algorithm need different signature for different parameters. If the samples are not enough to demonstrate enough difference, it will make identification difficult. Again, if using fewer samples does not work, we can to reduce the number of iterations for each measured dataset. Less iteration means more simulation time for each iteration provided the total time for identification is fixed. In this way, more complicated simulations can be finished. However,
PSO may need more iteration to find a satisfactory solution. Thus, the method of decreasing the number of iterations may not work for complex problem. In this worse case, if all of the above-mentioned three methods fail, we have to resort to the last method that is to decrease n .

Decreasing n will result in slower simulation. Consequently, the predefined number of iterations may not be finished within the time for measurement. If the predefined number of iterations is maintained to provide accurate identification, the interval for updating identified parameters has to be increased. This will limit the applications to problems whose parameters do not change severely. This situation may be unavoidable and is constrained by the capability of controller hardware. However, by adjusting n and the above-mentioned parameters, the best possible performance can be achieved from existing hardware controller.
With the development of computer techniques, the improved hardware will extend the RT-PSO techniques to a wider range of applications. 2.4. Implementation of RT-PSO
Compared to offline implementation, real-time implementa-tion is much more difficult. The basic idea of real-time implementation is to use the same step size and sample time for both measurement and simulations. In this way, the time used for identification is fully under control. The block diagram of the
RT-PSO based identification algorithm with 10 particles is shown in Fig. 4 . The definitions of the functional modules are provided in Table 1 . The operation of the system is described as follows.
The  X  X  X nit X  X  module initializes the identification algorithm before the  X  X  X C X  X  module takes over the flow control. The  X  X  X nit X  X  block has three outputs. The first output is the  X  X  X nable X  X  signal, which will enable the  X  X  X C X  X  block after a preset delay. The delay is used to restrain the identification algorithm from running during startup transient. The second output  X  X rigger 0 X  initializes particles (P1 X  X 10) before using them to simulate the modified models. The third output  X  X rigger 1 X  is the triggering signal, which can trigger the  X  X  X D X  X  block once the first n s samples have been measured after startup transient.
 The  X  X  X C X  X  module ensures desired operating sequence of the
PSO based identification algorithm. The only input signal is from  X  X  X nit X  X  module. The  X  X  X C X  X  module will be enabled once initialization process is done. The first output is  X  X ndex X , which is input to  X  X  X tr2Vec X  X  modules to measure according to the index. Among the 6 triggering signals, Trigger 2 is used to initialize the modified system model in MM1 X 10. Trigger 3 is used to trigger  X  X alCost X  module after all simulated data have been measured. Triggers 4 X 6 are used to ensure a right PSO updating sequence. The triggering process of corresponding modules is repeated for preset number of iterations. After the identification of one measured dataset has been completed, the  X  X  X C X  X  module will trigger  X  X  X D X  X  module with  X  X rigger 7 X  to hold a new set of measurement for identification.
The measured current signal is input to  X  X  X S X  X  module for down sampling. The measurement is down-sampled by n -times con-tinuously and only the most recent n s down-sampled data are recorded for future usage. Once the  X  X  X D X  X  block is triggered, the output of the down sampling model is held fixed for the PSO algorithm to identify from which. In addition, the  X  X  X D X  X  block also initiates the simulation of  X  X  X M1 X 10 X  X  modules and provides measurement to  X  X  X alCost X  X  module.

The  X  X  X tr2Vec X  X  modules are used to record simulation results for evaluation. Once all the n s samples have been obtained from all of the  X  X  X M1 X 10 X  X  modules, the  X  X  X C X  X  module will generate a triggering signal for  X  X  X alCost X  X  module. Then, the  X  X  X alCost X  X  module will evaluate the performance of particles according to the defined cost/fitness function.

The  X  X  X M1 10 X  X  modules take three inputs. The first input signal is the initial condition provided by the  X  X  X D X  X  module. The second input is the reset signal (trigger 5 generated by  X  X  X C X  X ), which will initialize the simulations of the modified models before a new round of simulation. Once triggered, all the internal states of the MM modules will be set to the same initial condition. And the third signal is the particles (parameters) to be evaluated.
The output of the  X  X  X M1 X 10 X  X  modules will be measured and compared with system measurements.

After all samples have been measured for  X  X  X M1 X 10 X  X , the  X  X  X C X  X  block will trigger the  X  X  X alCost X  X  block, which will calculate cost/fitness of the corresponding particle. Based on the cost/fitness, the peer best and global best solutions will be updated in  X  X  X pdPb X  X  and  X  X  X pdGb X  X  modules, respectively. After that, the  X  X  X pdXV X  X  module will update particle information and the above evaluation process will repeat until the terminating condition has been met.
The  X  X  X lobal best X  X  is updated periodically and two sets of values can be displayed, one is the identified parameters, and the other is the corresponding cost. By observing the cost, we can track the running of the PSO algorithm and get an idea of how good the identification is. The identified parameters are input to reference signal generator as will be introduced in the following section. 3. Simulation studies
The simulation studies include two steps, which are open-loop (harmonic identification) tests and closed-loop (harmonic cancel-lation) tests. During open-loop tests, RT-PSO is used to identify fundamental current from an artificial signal. Once the open-loop performance has been verified, the RT-PSO is used to identify fundamental current signal from measurements and the identi-fied signal is used as current control reference. Simulation results for both tests are provided in the following sections. 3.1. Open-loop tests
The artificial current signal is generated according to the following equation. i  X  5sin  X  o t  X  p = 3  X  X  3sin  X  5 o t  X  0 : 5  X  X  2sin  X  7 o t where t is time in second, o is angular velocity in rad/s defined as  X  2 p f with f  X  60.

The objective is to identify the fundamental current signal together with the dc offset represented as (5). i  X  a sin  X  bt  X  c  X  X  d  X  5  X 
Thus, the objective is to identify the four parameters a , b , c , and d concurrently. According to (4), it is easy to see that the desired values for a , b and d are 5, 2 p f , and 1, respectively. The identified value of c may be different for different dataset because the initial time is set to zero for each round of identification. For PSO algorithm, the ranges of the four parameters are set to [2, 8], [2 p * 55, 2 p f * 65], [0, 2 p ], and [ 5, 5], respectively. It should be noted that the identification process is to find the set of parameters whose generated data fits measurement the best. To evaluate a candidate solution, a cost/fitness function ( C  X  ^ p  X  is Fig. 2 ) is defined according to C  X  ^ p  X  X  where i m is the measured current signal, i i is the current signal generated with identified parameters, n s is the number of samples.
Once the four parameters have been identified, by assuming that the fundamental signal does not change during the identification interval ( D t i ), the reference signal for harmonic cancellation can be calculated according to (7). Control based on the reference signal will cancel all harmonics and the dc offset from source current. It is necessary to note that the dc offset, d ,in (5) is only used in the parameter identification not in harmonics cancellation: i  X  a sin  X  b  X  t  X  D t  X  X  c  X  7  X  1000 cost
Since identification is based on data measured earlier, delays resulting from identification process have to be considered. D t in (7) is used to overcome the effect of delay.

During simulation, 100 samples is measured during the initial 50 ms. The PSO based identification algorithm starts once the 100 samples have been obtained. As introduced earlier, each iteration takes about 1 ms and the 50 iterations take about 50 ms. After the four parameters in (5) are identified, the reference signal is generated according to (6). For the selections of sampling time and number of iterations, D t  X  52.5 ms. The extra 2.5 ms includes the time to update the peer bests and global best according to PSO algorithm, and the time for flow control. Different real-time implementation may result in a different D t . D t is a little bit larger than D t i and is the actual interval at which the identified parameters is updated.
 Some simulation results on open loop tests are provided in Figs. 5 X 8.

From Figs. 5 and 6, it can be seen that the initial identification is not very accurate. This is because identification starts from randomly generated tentative solutions. Since identified para-meters are carried over as initial values to next round of identification, the following identifications converge faster and are very accurate as can be seen from Fig. 5 . Considering that the identified parameters will be used to generate reference signal for closed-loop current control, a reasonable delay should be applied to the initially identified parameters to avoid impreciseness. Since each round of identification is based on a different dataset and the initial time for identification is set to 0, the phases are different for different datasets. This explains the step changes in estimation of c in Fig. 5 . According to the previous analysis, the step changes in identified c can be calculated according to b * D t .

Fig. 7 compares the measured signal to the signal generated
The first set of identified parameters is not used to avoid initial identification error. Since there is a very small error between two consecutive identifications, a small spike can be observed between 0.15 and 0.16 s. The moments at which the disconti-nuities happen are the moments at which the identified parameters are updated. As time goes on, the identification will become more and more accurate, the discontinuity or spikes will become less and less observable. Of course, this is only true when the fundamental signal does not change with time. If the fundamental signal change with time, a filter can be applied before the reference signal is applied to closed-loop control to eliminate the spikes or discontinuities.

Fig. 8 compares the actual fundamental signal to the signal generated according to (7). From Fig. 8 , it can be seen that the fundamental signal generated based on identified parameters match the actual signal very well. This gives us enough confidence to further test the proposed algorithm in closed-loop environment.
As introduced earlier, the interval of updating identified parameters, D t , is about 3 cycles of the fundamental current.
It means the algorithm needs 3 cycles to respond to changes in frequency or magnitude. To speed up the response, we can try to adjust D t , which is mainly a function of n i , n s , and t hardware capability, t s 2 cannot be selected arbitrarily small just like that the n in (3) cannot be arbitrarily large. n s cannot be too small either because less samples will make the identification more difficult. So the only possible way is to adjust the number of iteration n i . From Figs. 5 and 6, it can be seen that the identification usually converges within the first several iterations.
Thus, a smaller n i can be selected to decrease D t , which means faster response.

If less number of iterations n i is used, some techniques have to be adopted to guarantee the identification performance.
In addition to applying advanced PSO algorithm and selecting more number of particles, initialization process can be improved. During implementation, one of the ten particles is the previous global best particle, and the other 9 particles are randomly generated. In this way, the last global best particle can provide an accurate estimation when the parameters do not change severely. On the other hand, the 9 randomly generated particles will keep enough diversity to identify time varying parameters. 3.2. Closed-loop tests
To evaluate the performance of the proposed algorithm, a power system shown in Fig. 9 is simulated in Matlab/Simulink environment. Parameters of the electrical components are listed in Table 2 .

The control scheme is rather simple as shown in Fig. 10 . Since the system is simulated under balanced operating condition, only one RT-PSO module is used to identify the fundamental current of phase A. The reference currents for the other two phases can be generated by shifting phase A reference current by +2/3pi and 2/3pi radians, respectively. For unbalanced operating condition, three RT-PSO modules are needed. The setting of the RT-PSO algorithm in the closed-loop test is the same as the open loop tests.

Fig. 11 compares the diode rectifier phase A load current to the source current after compensation. Before the harmonic cancella-tion module takes effect, the source current equals to the load current, which has observable waveform distortion. From Fig. 11 , it can be seen that after harmonic cancellation, source current waveform distortion is significantly reduced and the source current approximates sinusoidal very well. Fig. 12 shows three-phase source currents after harmonic cancellation.

Fig. 13 provides spectrum analysis of the source current signals before and after compensation. It can be seen that the proposed control scheme effectively suppresses harmonic components and the total harmonic distortion (THD) is reduced from 26.16% to 4.14%. 4. Conclusion and future work
This paper proposed a RT-PSO based harmonic cancellation algorithm. The algorithm can accurately identify the fundamental I_reference current by identifying four associated parameters concurrently.
The fundamental signal calculated based on identified parameters can be used as reference signal for the control of current harmonic cancellation. Simulation studies demonstrated the performance of the proposed algorithm. Since the algorithm is implemented using the most fundamental Simulink blocks and Matlab
Embedded Function modules, the simulation code can be easily compiled to C code and run in compatible hardware controllers for experimentation or real-time controller hardware-in-the-loop simulation. The proposed techniques can be extended to a wide range of online identification, optimization, and control problems.
There are two frequently asked questions about papers related to PSO applications. One is that why PSO is used not one of many other computational intelligence algorithms like genetic algo-rithm, ant colony, memetic algorithm, differential evolution, etc.
The other is the request to compare performance between different algorithms. The comparative study between PSO and other type of algorithms is not conducted in this paper for the following reason. First, every popular type of algorithm has many new versions and improvements, which becomes available every day. Even for some specific version, different parameter setting and implementation will lead to different performance. If a comparative study is conducted, the conclusion can only be that one specific version of A algorithm performs better than another specific version of B algorithm under specific conditions. It will be problematic and inconvincible to claim one algorithm is better than the other algorithm. Since it is impossible to cover all recent developments of one type of algorithm, quantification study may not be as good as qualitative analysis. In this paper, the authors chose to constrain the scope of the paper to the real time implementation of one algorithm (PSO) of the basic version. The implementation details can be easily modified according to different versions of PSO and can also help the real time implementation of other computational intelligence algorithms. References 0 5 10 15 20 25 30 Peak current (A)
