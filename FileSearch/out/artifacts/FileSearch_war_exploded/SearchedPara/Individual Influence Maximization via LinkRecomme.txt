 Social network platforms, such as Twitter and Facebook, play an important and fundamental role for the spread of influence, information, or innovations. These diffusion processes are useful in a number of real-world applications, for instance, the social influence propagation phenomenon could be exploited for better viral marketing [ 1 ]. To this end, both modeling the influence propagation process and identifying the influential individuals/nodes in social networks have been hot topics in recent years [ 2 ].
 Indeed, researchers have proposed several influence models to describe the dynamic of influence propagation process, such as Independent Cascade (IC) model [ 3 ], Linear Threshold (LT) model [ 4 ], a stochastic information flow model [ 5 ] and the linear social influence model (Linear) [ 6 ]. Meanwhile, other researchers focus on learning the real or reasonable influence propagation prob-ability between two individuals in the influence models [ 7 , 8 ]. Based on the influ-ence propagation models and the influence propagation probabilities, influence maximization (IM) is the problem of identifying a subset with K influential nodes in a social network so that their aggregated influence in the network is maxi-mized. Since influence maximization is a fundamental problem in viral market-For instance, Eftekhar et al. [ 10 ] studied influence propagation at group scale, where they aimed at identifying the influential groups instead of a subset of individuals.
 of individuals or groups in a network so that their aggregated influence spread is maximized. In the real-world scenarios, an individual also cares about her own influence and wants to improve it by making new links. Formally, if a given target node (e.g., a person or a company) in a social network wants to maximize its influence by making several new links (i.e., target node could spread its influence through these links), which nodes should it link with? In this situation, linking it with the most influential nodes or the nodes with largest degree, may not lead to the maximum influence gain, since we have to consider the topology of the target node and the overlap of influence spread between the target node and the selected nodes. Let us take the network in Fig. 1 as a toy example. If node 3 is the given target node and we want to improve its influence by recommending two new links for node 3. Suppose that node set { 1 , 2 } node set found by IM method (e.g, by CELF [ 11 ]). Actually, the total influence of node 3 after linking with nodes { 1 , 2 } is less than that with nodes reason may be that there is much overlap of the influence spread between nodes 3and1.
 erature (e.g., adding new links or strengthening the weaken social links to boost the information spread across the entire network [ 12 ]), the problem of elimi-nating the influence overlap to maximize the target node X  X  influence via link recommendation remains pretty much open. Actually, there are two challenges to solve this problem efficiently: First, how to design a rational measure to elim-inate the influence overlap between nodes; Second, because the computation of influence spread is very time-consuming, it is urgent to propose an efficient algorithm which can sharply reduce the times of influence spread estimations. To address these challenges, in this paper, we provide a focused study on the problem of maximizing the target individual X  X  own influence by recommending new links for this individual (i.e., individual influence maximization via link recommendation). Our contributions could be summarized as follows:  X  We formulate this individual influence maximization-oriented link recom-mendation problem as an optimization problem, and define the correspond-ing objective function, which can be generally applied to different influence propagation models.  X  To solve the intractable optimization problem effectively, we propose a greedy algorithm with a performance guarantee. One step further, we present another algorithm lazy for scaling up this simple greedy . Both algorithms can be used in general influence models, such as IC and LT.  X  We leverage the properties of influence spread estimations under the spe-cific Linear model, and propose a much faster recommendation algorithm uBound , which can handle large scale networks without sacrificing accuracy.  X  We conduct extensive experiments on four real world datasets and the results demonstrate the effectiveness and efficiency of our proposed algorithms. Influence Propagation and Maximization. Researches proposed several models for describing the influence propagation process. IC model [ 3 ]andLT model [ 4 ] are two widely used ones. However, both of them require time-consuming Monto Carlo simulations to estimate the influence spread, some researchers designed more efficient (or tractable) models, e.g., the stochastic information flow model [ 5 ] and the linear social influence (Linear) model [ 6 ]. Since learning the influence propagation process is beyond the scope of this paper, we use these existing influence models for illustration.
 The IM problem can be traced back to Domingos and Richardson [ 1 , 13 ]. Kempe et al. [ 14 ] first formulated it as a discrete optimization problem, demon-strated it as NP-hard and presented a greedy approximation algorithm with provable performance guarantee. From then on, researchers proposed many com-putationally efficient algorithms, such as CELF [ 11 ], PMIA [ 15 ], IPA [ 16 ]and TIM [ 17 ], by exploiting specific aspects of the graph structure or the influence model. Some researchers also consider other aspects of the IM problem [ 9 , 18 ]. For instance, Guo et al. [ 18 ] studied local influence maximization, aiming to find the top-K local influential nodes on the target node. However, to the best of our knowledge, few attention has been paid to the problem of maximizing the target node X  X  own influence via link recommendation.
 Recommendations in Social Networks. The user-to-user recommendation in social networks is an important task for many social network sites like Twit-ter, Google+ and Facebook, for the purpose of guiding user discover potential have proposed a number of recommendation algorithms to recommend potential friends to users in a social platform, such as the Friend-of-Friend(FoF) algo-rithm [ 19 ] and other interest-based or profile-based algorithms [ 20 , 21 ]. Some of these works also consider the influence propagation effect, such as selecting a set of  X  X nfluential X  users for a new user [ 23 ] or a new product [ 24 ], like solving the cold-start problem in recommender systems.
 to add links in the network for improving some quality of the graph [ 12 , 22 ]. For instance, Tian et al. [ 22 ] suggested users to re-connect their old friends and strengthen the existing weak social ties in order to improve the social network connectivity; Chaoji et al. [ 12 ] recommended an edge set in order to increase the connectivity among users and boost the content spread in the entire social network. However, these related works pay more attention to the entire social network rather than the target individual X  X  own influence. Preliminaries. Let the directed graph G ( V, E, T ) represents an influence net-work, where V = { 1 , 2 , ..., n } are n nodes in graph and E stores all the influ-ence links(edges) between nodes. T =[ t ij ] n  X  n is a given propagation probability matrix. For each edge ( j, i )  X  E , t ij  X  (0 , 1) denotes the influence propaga-tion probability from node i to node j . For any edge ( j, i ) / assumed to be directed as influence propagation is directed in the most general case. Given this graph, the influence spread f i for each node i puted by the influence propagation models (e.g., IC [ 3 ], LT [ 4 ] and Linear [ 6 ]). Specifically, f i =[ f i  X  1 ,f i  X  2 , ..., f i  X  n ] ,an n node i on each node in the network. Thus, the total influence spread of node i in network equals to the sum of influence of node i on other nodes, namely f i  X  V = j  X  V f i  X  j . Indeed, f i  X  V is the expected number of the nodes that will be influenced by node i . 3.1 Problem Statement and Formulation In a real-world network, such as Twitter, nodes represent users, and edges repre-sent their links/connections. If a target user wants to improve her own influence, she should make new influence links 1 with other users, especially the influen-tial ones, then the information she posts will be read and followed by more users (e.g., by retweet). Since making new links with other nodes may require money or time, we also associate a nonnegative cost c ( j ) with each node j . That is, the cost of linking to node j is c ( j ) if a target node makes a new link with j . The less the cost is, the easier to create the link for the target node. We denote the total cost of the target node for making new links with a subset S as c ( S )= j  X  S c ( j ). Hence, the problem of individual influence maximization is to find a subset S such that if the target node t makes new links with nodes in S ,the t  X  X  influence gain is maximum, and c ( S ) does not exceed a specific budget B . Now this problem could be formulated as an optimization problem: where f S t  X  V  X  f t  X  V is the influence gain of the target node t after linking with nodes in set S . Notice that, we assume that the other parts of network structure stay unchanged before t makes links with the nodes in S . To reduce complexity, in this paper, we consider c ( j )=1foreach j  X  V , i.e., every new link shares the same cost. Hence, the cost c ( S ) equals to the number of nodes in S , namely below. In summary, the individual influence maximization problem is formalized as recommending a subset S with K nodes such that node t can achieve the maximum influence gain by making new links with the nodes in S (i.e, adding new edges ( j, t ) ,j  X  S ). 3.2 Definition of the Objective Function The key of the above optimization problem is to design an appropriate objective function F ( S ) to eliminate the influence overlap (the first challenge given in Introduction) when adding S to link the target individual. For introducing our definition of F ( S ), we start with a single link from node t to node c . Definition 1. If a target node t makes a new link with a candidate node c ,we define F ( S )= F ( { c } ) as : where  X  c  X  (0 , 1) is a hyper parameter to model the real-world social influence propagation process.
 Definition Explanation. Let us take a simple example. Suppose we want to improve the target node t  X  X  influence in Fig. 2 , and thus we should estimate the total influence gain of t after making a new link (the red dashed line) with a candidate node c . We first show how to estimate the influence gain of t on any node i  X  V . Before making the new link with c (Left part of Fig. 2 ), the target t has an influence on node i ( f t  X  i ) and node c ( f meanwhile, the node c also has an influence on node i ( f new link with c (Right part of Fig. 2 ), we define that the influence of t on node c little unrealistic. Thus, for better modeling the real-world influence propagation process, we introduce  X  c  X  (0 , 1) to weaken the influence gain of node t on c , and get  X  c (1  X  f t  X  c ). 2 One step further, we can represent that the influence of t on i through c has increased by  X  c (1  X  f t  X  c ) f c  X  i t on i after making a link with c is: f { c } t  X  i  X  f t  X  i f c  X  i . Then, we can get the total influence gain of node t on the entire network: f  X  we do not show more rigorous justification for this function, the extensive exper-imental results show that the nodes selected by this function can really obtain much real influence gain of a given target node, which illustrate that this function is rational and effective.
 tion F ( S ), i.e, the influence gain of a target node when it makes new links with nodes in S .
 Definition 2. If a target node t makes new links with the nodes in S , we define F ( S ) : 1. F (  X  ) = 0, i.e., we cannot improve the influence of the target node without 2. F ( S ) is nonnegative and monotonically increasing. It is obvious that making 3. F ( S )is submodular .Thatis, F ( S ) satisfies the  X  X iminishing returns X  prop-3.3 Greedy Strategy Indeed, maximizing submodular function in general is NP-hard [ 25 ], and thus it is intractable to obtain the optimal solution of the problem we formulated. However, for a nonnegative monotone submodular function, such as greedy strategy, a common used heuristic, approximates the optimum within a factor of (1  X  1 /e )[ 26 ].
 The simple greedy algorithm starts with the empty set S = about n times influence spread estimation in each iteration to select one node (with the maximum influence margin) to join S .Thus, greedy requires about ( n  X 
K ) times influence spread estimations, where K = | S | . As each influence spread estimation calculated by influence models (e.g., IC, LT) is very time-consuming, greedy is quite slow.
 Scaling Up. Here, we exploit the submodularity of F ( S ) and adopt the lazy-forward strategy [ 11 ] for scaling up the simple algorithm greedy . Specifically, based on the fact that the influence gain of node t after making a link with node c in the current iteration cannot be larger than its marginal influence gain in the previous iteration, we propose the algorithm lazy without sacrificing any accuracy. Algorithm 1 shows the details about the algorithm lazy . Because lazy just requires n times influence spead estimations in the initial iteration for calculating the upper bound of influence gain of each candidate node i ,it requires totally ( n +  X   X  K ) times influence spread estimations, where  X  n is the expected number of influence spread estimations in each iteration. Algorithm 1. The lazy Algorithm To address the challenge of inefficiency, we further explore this problem on a specific influence model, the linear social influence (Linear) model [ 6 ]. Specif-ically, the reasons could be summarized as: (1) Linear model is tractable and efficient; (2) Linear has close relations with the traditional influence models. For instance, it can approximate the non-linear stochastic model [ 5 ], and the linear approximation method for the IC model [ 27 ] is a special case of Linear. In the following, we first review the Linear model.
 Review. Given a directed graph G ( V, E, T ), Linear model [ 6 ] is defined as below. Definition 3. Define the influence of node i on j as where N j = { u  X  V | ( u, j )  X  E } ,  X  i is the self-confidence of node i ,which represents the prior constraint of node i for spreading the information. The parameter d j  X  (0 , 1] is the damping coefficient for the influence propagation. ence [ 6 ]: where, I is an n-by-n identity matrix, D = diag ( d 1 ,d 2 matrix, e is an n  X  1 vector consisting all 1s, ( I  X  DT ) of matrix ( I  X  DT )  X  1 .
 Optimization with Upper Bounds. In this part, we further exploit the properties of the influence computation in Linear model and demonstrate that if target node t makes a new link with an arbitrary candidate node i , the influence gain cannot be greater than the upper bound,  X  i  X  i  X  ( I Theorem 1. ( Upper bound ) If a given target node t makes a new link with node i  X  ( V \{ t } ) , then the influence gain of node t satisfies the equation: Proof. We first prove that F ( { i } )= f { i } t  X  V  X  f influence gain definition, we have proved that F ( { i } )= f { i } t  X  V  X  f t  X  V  X  diag (  X  1 , X  2 , ...,  X  n )  X  diag (  X  1 , X  2 , ...,  X  n diagonally dominant matrix, ( I  X  DT )  X  1 e can be quickly calculated through Gauss-Seidel method in O ( | E | ) time. We use these upper bounds to replace the influence gain estimations in the initial iteration of algorithm lazy , and then propose the corresponding uBound algorithm without sacrificing any accuracy. Algorithm 2 shows the details about uBound . According to the analysis above, we know that uBound requires only (1+  X   X  K ) times influence spread estimations, where  X  n is the expected number of influence spread estimations and it is related to the tightness of the upper bound. In contrast, lazy (Algorithm 1 ) requires ( n +  X   X  K ) times influence spread estimations.
 Algorithm 2. The uBound Algorithm Experimental Setup. The experiments are conducted on four real-world datasets with different sizes. (a)Wiki-Vote, a who-votes-on-whom network at Wikipedia where nodes are users and an edge( j, i ) represents that user j voted on user i ; (b)Weibo, a social media network in China, where nodes are the users and edges are their followships. We crawled this data from weibo.com 2013 and then sampled a small network which only contains the verified users for filtering the zoombie accounts; (c)Cit-HepPh, an Arxiv High Energy Physics paper citation network where nodes represent papers and an edge( j, i ) represents that paper j cites paper i . Both Cit-HepPh and Wiki-Vote are downloaded from SNAP 4 ; (d)Twitter, another social media network. We downloaded this data from Social Computing Data Repository at ASU 5 . Table 1 show the detailed dataset information.
 Influence Model and Propagation Probability. We validate our discoveries 28 ]. For each network, we transform it into a directed influence graph G ( V, E, T ). Specifically, if there is an edge ( j, i ) in the original network, we add an influence link ( i, j )  X  E 6 in G and then assign the corresponding influence propagation probability t ij =1 /indegree ( j ). For LT [ 14 ], each node j chooses a threshold  X  uniformly at random from [0 , 1], and the Monte Carlo simulation times are set to be 20,000 for both IC and LT. For Linear model, we use the same damping coefficient for all nodes similar to Xiang et al. [ 6 , 28 ] (i.e., d and we set  X  i = 1 assuming that each initial node shares the same prior influence probability. Note that, for simplicity, we manually set the  X  nodes in objective function F ( S ).
 iments on Windows 64-bit OS with 2.20GHz Intel Core i3-2330M and 16GB memory. 5.1 Real Influence Gain Comparison We first demonstrate that our objective function is rational and effective, i.e., thenodeset S recommended based on our F ( S ) can help a target node t make more influence gain than the benchmark methods. Specifically, for a given target node t , we first calculate its original influence f t  X  V links with the nodes in S recommended by different methods, and recalculate the t  X  X  new influence f S t  X  V 7 . Finally, we get the t  X  X  real influence gain f t  X  V  X  f t  X  V . Thus, the performance of each method is evaluated by the influence gain it could provide to the target node, i.e., the larger influence gain, the better the method is. In the following, we call our method as ISIM ( I ndividual S ocial I nfluence M aximization) and the results are based on the lazy algorithm. For comparison, we choose several benchmark methods:  X  Random. Let the target node make links with K nodes that are selected  X  OutDeg. Let the target node link to the top K nodes with the largest  X  LongDist. The recommended K nodes are the farthest ones from the target  X  PageRank. Recommend the nodes with top K ranked PageRank values [ 30 ].  X  HighestInf (Highest Influence). Let the target node make links with the  X  IMSeeds. It selects and recommends the most influential node set S by using the CELF algorithm [ 11 ] for traditional social influence maximiza-tion problem. This method could alleviate the influence overlap between the nodes in S . However, it does not consider the influence overlap between the target node and those in S .
 On each dataset, we run the above selection algorithms on the randomly chosen 100 target nodes from different out-degree ranges, and then we compute and compare the average influence gain (with the size of the recommendation set |
S | =5 , 10 , ..., 50) for each algorithm. We compare the effectiveness of each algorithm under IC, LT and Linear model, respectively. Figs. 3 , 4 and 5 show the corresponding results. Actually, similar results could be seen from all figures. That is, the node set S selected by our ISIM could help the target node to get more real influence gain than the benchmarks; the node set S recommended by IMSeeds cannot always guarantee the best performance. What X  X  more, we only show the results on the three data sets, because IMSeeds (i.e., CELF) cannot obtain a result within feasible time on the Twitter data. 5.2 Time Complexity Analysis In the part, we compare the efficiency of our proposed algorithms ( greedy , lazy and uBound ) for our ISIM method under Linear model from two aspects: the number of influence spread estimations and the running time of the algorithms. selecting different K seeds using different algorithms. The results illustrate that greedy needs the largest number of influence spread estimations. Compared to lazy , the expected number of influence spread estimations of uBound at top K = 45 is reduced at a rate of 95.2%, 89.2%, 99.2% on the three datasets(ie, Wiki-Vote, Weibo, Cit-HepPh), respectively. The reason is that lazy requires n times influence spread estimations in the initial iteration to establish the upper bounds of the marginal influence, while uBound requires only one time. Correspondingly, Fig. 6 shows the real running time of different algorithms when selecting K seeds on different datasets. From the results, we know that the simple greedy algorithm is very time-consuming as the number K increases. That is because greedy requires about ( n  X  K ) times influence spread estimations. What X  X  more, we can observe that uBound is much faster than lazy . Actually, uBound is so efficient that it can handle the Twitter data, a large scale network with tens of millions of nodes, and the running time is growing linearly as the the number K increases. 5.3 Case Study We finally use a case study to illustrate the necessity of designing individual-ized link recommendation algorithms. Fig. 7 (a) shows the Jaccard index of the 25 nodes recommended by ISIM for 8 target nodes which are randomly selected (distinguished by node ID) from Wiki-Vote. This figure illustrates that the nodes recommended for different target nodes are different, and this is because the method ISIM considers the target node X  X  personalized information, such as the topology structure of the target node. Similarly, Fig. 7 (b) shows the Jaccard index of different node sets recommended by different methods. This figure illus-trates that the nodes selected by different algorithms are also quite different. Meanwhile, the more similar with our proposed method(i.e., ISIM), the more effective of the algorithm (combining the results in Figs. 3 , 4 and 5 ). In this part, we mainly discuss the limitations and possible extensions of this study. For better illustration, in this paper we only deal with individual influence maximization by designing general algorithms, and our solutions could be further improved in the future. First, it is better to include different costs for the link connection (i.e., the c ( S )inEq.( 1 )) instead of treating them equally. Meanwhile, more reasonable settings for parameters  X  c or threshold  X  are required when we know about more prior knowledge or real propagation action logs (like using the data-driven approach for threshold  X  settings [ 31 ]). What X  X  more, our assumption that the rest of the network stays unchanged during the link connection may be relaxed. Secondly, it is also better to study individual influence maximization and social influence modeling from the observed data rather than the simple simulation. For one thing, the information diffusion process may be affected by some other factors, e.g., information topic and homophily [ 32 ]. For another, as is only exploratory in nature, the conclusions of the simulation studies often have a great deviation to the actual propagation data. Thirdly, this study only focuses on the one target individual X  X  influence, and one possible extension is to add links for improving the influence spread of several individuals simultaneously, where the competitions or cooperations between each target individual may be a big challenge. Last but not least, like the uBound algorithm under Linear model, we would like to find out the upper bounds under other influence models (e.g., IC, LT) and propose the corresponding scalable algorithms. In this paper, we studied the problem of maximizing individual X  X  own influence by recommending new links. We first formulated it as an optimization problem and designed a rational objective function. Then we proposed three algorithms to solve this intractable problem; especially the uBound algorithm with O (1+  X  time complexity could handle large scale network. The experiments have shown encouraging results, and we hope this study could lead to more future work.
