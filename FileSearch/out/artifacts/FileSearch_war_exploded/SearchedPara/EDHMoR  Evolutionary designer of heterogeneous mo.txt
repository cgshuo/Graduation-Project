 1. Introduction
In the last two or three decades, evolutionary robotics has proposed evolution as a nature inspired approach to addressing the problem of automatically obtaining robotic structures that can operate in a given environment performing a particular task or set of tasks. This way the bias and limitations introduced by a human designer can be avoided and, theoretically, the resulting structures will be better adapted. Real evolution in nature produces evolu-tionary changes in all aspects of an organism ( Bongard, 2011 ), but often this has not been the case in robotics. Most authors have concentrated on producing through evolution the best possible controllers for hand designed or predesigned and unchanging morphologies ( Floreano and Mondada, 1996 ; Pasemann et al., 2001 ) and have ignored the evolutionary interactions that occur when both body and brain participate of evolution.

For several reasons, it has only been in the last few years that more holistic approaches to robot evolution have been considered. In particular, embodied cognition has become one of the axes of research. Embodied cognition postulates that intelligent behavior emerges from the coupled dynamics between body, brain and environment ( Pfeifer and Iida, 2005 ; Bongard, 2009 ). In fact, some authors in this fi eld have proposed that an appropriate and adapted design of the body may lead to simpler brains when performing the same tasks. Consequently, it seems that body and brain should be jointly evolved in an environment or a set of environments to produce the best possible adaptation.

This idea had already been explored from an evolutionary point of view with very interesting results by authors such as Sims (1994) or Komosinski (2005) using simulated environments and organisms without any regard for simulation accuracy in the feasibility of their structures or their manufacturability. It is however in the last few years when it has become a topic of great relevance to study evolution as a brain  X  body automatic design system that can produce agents (in robotic form) that can be built and tested and that can address tasks in real environments. Initial work in this line is that of Funes and Pollack (1998) or Lund et al. (1997) working with very simple creatures and it was extended by Lipson and Pollack (2000) who introduced an automatic procedure to manufacture, using a rapid prototyping system, stick based solutions that were evolved in simulations. These ideas have been applied in many robotic sub fi elds such as in the production of biped walkers studying changes in mass distribution along the biped skeleton to ascertain whether optimal morphology and control pairs could be discovered ( Paul and Bongard, 2001 )or studying combinations of morphologies and gaits ( Endo et al., 2002 ).

Anyway, it is still not clear how to address the manufactur-ability of solutions in the sense that it obviously constrains the evolutionary process. An approach that is taking hold in the research community and which was already hinted at in Lipson and Pollack's (2000) seminal work is to limit the resources evolution can work with to a set of basic elements, sticks and joints in their case or Lego parts in the case of Lund et al. (1997 ).
This constraint on evolution implies that all the solutions are made up of the prede fi ned parts, facilitating their construction, which becomes an assembly process. However, using these simple parts, there is no indication of how or where the control of the system would be implemented or any standardized way of doing it.
To address this problem, we have proposed, along with other authors ( Hornby et al., 2003 ; Marbach and Ijspeert, 2004 ; Fai X a et al., 2011a ), the use of modular robotic architectures (either homogeneous or, to make them more versatile, heterogeneous) as the building blocks evolution should work with. Modular archi-tectures de fi ne a set of modules, the way they are joined together as well as how to control them ( Yim et al., 2007 ; St X y et al., 2010 ).
In fact, these types of architectures, if adequately de fi the primitives that allow constructing a very wide variety of robotic structures and their control, thus greatly simplifying the search space and ensuring that they can be easily implemented in reality.

It is not practical to evolve these structures in reality and, consequently, to make evolution feasible they must be simulated and only the fi nal solutions built or assembled. This leads to the second set of issues that are very much related to the simulated evolution of the structures an d control. On one hand, several questions remain open regarding the complexity that is inherent to systems that require so many interacting parts to be evolved together. For instance, how much of the morphology or control of the robot should be left to evolution? That is, how large a search space do we allow? Typical solutions in this fi eldarebasedonintroducing several parameters in the fi tness function, which implies a hard work for the designer to appropriately tune this function ( Farritor and
Dubowsky, 2001 ), or on imposing some type of knowledge over the morphology and control, which implies a more restricted search space for the evolutionary algorithm ( Rommerman et al., 2009 ). On the other hand, the search spaces de fi ned by modular structures when evolving morphology and control are very badly con fi
That is, they are often deceptive, discontinuous, extremely multi-modal, etc. This is determined by the encoding of the individuals and, especially, by how they are evaluated. It is thus necessary to provide some techniques that permit improving the search capabilities within this space. Finally, a third problem that arises is one that has been common in evolutionary robotics since its beginnings, that is, how do we de fi ne the simulations so that the evolved individuals can be easily transferred to reality. In other words, what character-istics are required from the simulations so that the robots assembled from the modules speci fi ed by the simulated solutions perform the desired task adequately in the real world?
In this paper, we will study the evolution of morphology and control through the development and testing of an evolutionary design system for modular robotics called EDHMoR (Evolutionary
Designer of Heterogeneous Modular Robots), with the aim of providing some insights into the problem of evolving feasible and manufacturable robots. Section 2 is devoted to a brief de the modular architecture that will be used in the EDHMoR system.
Section 3 presents the evolutionary design system in depth, which faces all the issues commented above providing preliminary solu-tions in every case. In Section 4 , the EDHMoR system is applied in two benchmark problems of robot design, one solving a linear robot motion problem and the other solving a static problem that does not require robot displacements. Finally, in Section 5 the main contributions of this work are summarized and future research lines are presented. 2. Heterogeneous modular architecture geneous modules was fi rst presented in ( Fai X a et al., 2011b ). It was designed to maximize fl exibility and simplicity in the automatic design process and to allow con fi guring robots for a wide range of applications, mainly for those of industrial environments. In this sense, Fig.1 displays a diagram with the types of target missions we selected for the modular robots (top layer) and how organizing them into tasks and subtasks, the basic set of modules and effectors was chosen. Surface missions are those related with tasks requiring covering any kind of surface (like cleaning a tank). Linear missions are those implying a linear displacement (like welding inspection) and static missions are those where the robotic unit has a position (like an industrial manipulator).
 homogeneous set of modules ( Yim et al., 2000 ; Murata et al., 2002 ; Shen et al., 2002 ; Brandt et al., 2007 ; Salemi et al., 2006 ) because it facilitates the control and recon fi guration of the robots, although limiting the range of possible con fi gurations. Moreover, considering the types of tasks we are interested in here (see Fig. 1 ), there are several situations that would require a very simple module (for example, a linear displacement actuator) and that could imply a complex morphology when using only homogeneous modules.
As a consequence, the modular architecture presented in Fai X a et al. (2011b ), which will be used in the present work to analyze the EDHMoR system, was based on the heterogeneous set of modules. designed and laboratory prototypes have been fabricated. Two of them produce linear motions (slider and telescopic modules) and the other two produce rotational motions (rotational and hinge modules). Additionally, there is a passive module that acts as a structural base. These prototypes are displayed in Fig. 2 and their main characteristics are those of Table 1 . All of them present a structure made up of fi berglass built from milled PCBs (printed circuit boards). These parts are soldered to achieve a solid but lightweight structure. The slider, telescopic and rotational mod-ules contain cube shaped structures called nodes. These nodes act as connection bays. The free sides of the nodes correspond to connection mechanisms. The size of the nodes without the connection mechanism is 48 48 48 mm and with the connec-tion mechanism is 54 54 54 mm. The motion in all the mod-ules is generated by HS-5245 MG servos. The linear modules have a pulley-drive belt system to transform the rotational motion into translational motion.

Details about the mechanical design, connector, communica-tions, energy, sensors and control of the modular architecture can be found in Fai X a et al. (2011b) . What is relevant here is that these modules are the basic elements that must be combined by the evolutionary design system to achieve the robotic con fi guration that solves the problem. 3. The EDHMoR system
The EDHMoR (Evolutionary Designer of Heterogeneous Mod-ular Robots) system is an automatic design system that includes all the elements involved in the process of obtaining robotic struc-tures, made up from the modules de fi ned in the previous section, which solve a target task proposed by the designer. These elements have been organized into three interrelated main com-ponents, as shown in the schematic of Fig. 3 : algorithm, evaluation and management. 3.1. Algorithm
This component executes the evolutionary algorithm that explores the search space, in this case, made up of the morphology and control of the robot. Moreover, the element in charge of encoding the modules and control in a chromosome has also been included in this component. 3.1.1. Encoding
The encoding of the individuals is a key aspect in evolutionary design. On one hand, it has been veri fi ed how permitting more of the robot's morphology to evolve may either slow or increase the rate of evolution ( Bongard, 2009 ), so it is necessary to carefully establish what must be evolved and what should be fi xed. Related to this problem is the size and complexity of the search space. It is clear that the design space in modular robotics is exponentially large, as there is an exponentially increasing number of ways a linearly increasing set of components can be assembled. Therefore, evolutionary approaches either become intractable or must resort to exploration strategies that somehow reduce the space that is being considered. In this line, several proposals have been made. They usually start from two different viewpoints. Some authors concentrate on algorithms that use some type of direct encoding of the phenotype and others contemplate indirect encodings that usually encode how the system is constructed through a subse-quent development process ( Mazzapioda et al., 2009 ; Meng et al., 2011 ; Clune et al., 2011 ).

In the EDHMoR system presented here, we use a direct encoding of the individuals as trees, where every robotic module hangs from a parent module except for the root module. The encoding is composed of n nodes and n 1 links between nodes. Each node represents one module and it contains the information about the module type, its control parameters and the c connections with the child nodes. Moreover, each node stores the number of connected sides of the module. The links between nodes contain information about the child node and all the variables required to connect it in a unique position and orientation with respect to the parent module.
It must be highlighted here that the fl exibility provided by the large number of connection bays present in the modules (see Fig. 2 ) implies a huge number of possible structures depending on the selected side and the orientation of the child modules. In this sense,
Fig. 4 displays the numbering of the sides of all the modules considered here.
 Fig. 5 displays an example of a modular robot encoding in
EDHMoR. In this case we have seven nodes of different types (1 base, 1 slider, 1 telescopic, 1 rotational and 3 hinge nodes), each with its speci fi c control parameters. In the links we have the parent connection side and the module orientation. This tree encoding must be translated to a genotype to be evolved. In this sense, Fig. 6 shows a schematic representation of a chromosome in the population of the evolutionary algorithm. It has a length of 7 N 3, where N is the maximum number of modules admitted in the system. Each individual has an integer encoding composed of
N parameters indicating the type of module, N 1 indicating the number of child nodes, N 1 indicating the parent connection side for each connection, N 1 indicating the child orientation for each connection, and fi nally, 3 N real parameters indicating the control variables of each module. 3.1.2. Evolutionary algorithm
The Java Evolutionary Algorithm Framework (JEAF) developed by Caama X o et al. (2010) has been integrated in the algorithm component of EDHMoR, so all the evolutionary algorithms imple-mented in this framework like differential evolution, genetic algorithm, covariance matrix adaptation evolution strategy and others can be applied in the design process. This provides a high fl exibility because different search strategies and operators can be easily de fi ned.
 encoding and the genotypic representation presented in the pre-vious section are highly deceptive. The tree representation selected implies that a small genotypic change could lead to a completely different robot depending on the point where it occurs. Further-more, the evolutionary temporal scales of the morphology and the control system must be quite different even though they must be cooperatively coevolved. Consequently, as it will be empirically shown in Section 4 , traditional evolutionary algorithms do not provide successful results in this type discontinuous search space.
As a fi rst approach to address these problems, a constructive evolutionary strategy has been developed and included in the JEAF libraries. A preliminary version was presented in Fai X a et al. (2011a) , which has been improved for the present work. This constructive strategy executes seven phases or stages in the following order: 1. Initialization : creation of a random population of P modular 2. Growing : a mutation operator performs an Add Node operation 3. Morphological adaptation : the Shake Modules mutation operator generates v variations of the current robot by changing the connections between modules. The change affects the side of the parent module to which the child module is attached and the orientation of the child. The fi tness is calculated and the best variation is selected. 4. Control adaptation : the Shake Control mutation operator gen-erates v variations of the current robot by changing, with probability p , all the control parameters of the modules. The fi tness is calculated for each case and the best one is selected. 5. Pruning : the Delete Node mutation operator produces all the possible pruning variations of a robot by deleting all the modules that are downstream from a selected connection. All the connections are pruned once and pruning two connections at the same time is not allowed. So, if a robot has n modules, this operator will produce n 1 robots. The fi tness is calculated for each case and the best one is selected. 6. Replacement : 10% of the individuals are eliminated from the population and replaced by variations of the best 5% robots and by variations of random robots. These variations are obtained through a Symmetry mutation operator, which selects a branch of a robot chromosome and replicates it in order to achieve a symmetrical branch. Rotational and Re fl ective symmetry are currently implemented. If it is impossible to apply the sym-metry operator a random robot is generated.

Phases 2  X  6 are repeated until a stop criterion is met. In the default con fi guration, each phase is applied once per evolution cycle, although the best results were obtained applying the three structural phases (2, 3 and 5) more often than the control adaptation one (phase 4), reinforcing the idea that morphology and control must evolve in different time scales. As we can see, this constructive algorithm does not include a crossover operator because we have experimentally veri fi ed that crossing over two individuals with the selected encoding is basically a random search procedure.

This algorithm is used in all the experiments of Section 4 and, although the results obtained are successful, future improvements can be carried out to optimize its computational cost reducing the number of required evaluations. 3.2. Evaluation
This module of EDHMoR is in charge of assigning a fi tness value to each robot the evolutionary algorithm needs to evaluate. To do it, as commented in Section 1 , they must be simulated because it is not affordable to build them in reality. Consequently, this module includes all the adaptation libraries required to specify the physic properties of each robot module, to control the actuators during simulation and to decode the chromosome into a valid robot.
Moreover, it allows for a proper fi tness function de fi nition, including constraints. 3.2.1. Simulator and adaptation libraries
To achieve the feasible robots that are sought in this paper, a third-party dynamic simulator has been integrated in EDHMoR as the basic tool for evaluating the modular robots that make up the population of the evolutionary algorithm. The selected simulator has been Gazebo ( Koenig and Howard, 2004 ), a widely used tool in robotics that is based on ODE, and that allows the incorporation and de fi nition of physical constraints. The fi ve types of modules presented in Section 2 were modeled in the simulator (see Fig. 7 ) with the speci fi cations established in Table 1 for the prototypes, so the transfer to reality is direct.

When an individual is evaluated in Gazebo, it is decoded and simulated for a fi xed period of time until a reliable fi obtained. To this end, a speci fi c control system must be de In a fi rst approach, and with the aim of using a very simple control policy to promote the emergence of more adapted morphologies, all the modules are controlled using a sinusoidal function that provides the module position pos (displacement distance or angle between the two parts of the module) using the following equation: pos  X   X  U A max U sin  X   X  U V max U t  X   X   X  being t the simulation time,  X  the amplitude control parameter in the range [0,1],  X  the angular velocity control parameter in the range [0,1],  X  the phase shift between [0,2  X  ), A max is the maximum amplitude (calculated as half of the module stroke) and V maximum angular velocity ( fi xed to a value of 2). These two constants depend on the type of module. As a consequence, the control parameters that are included in the chromosome and must be adjusted are  X  ,  X  and  X  . 3.2.2. Fitness function
The fi tness function de fi nition is a key aspect in EDHMoR. It is based on the background idea of using very simple functions that can be easily implemented by the designer using high-level measurements with the aim of preserving a search space as general as possible to ease the search process. At the same time, as the main objective of this work, it must allow obtaining feasible and realistic robots, so physical constraints must be considered, which limits the search space. Considering that evaluation is carried out in simulation, the problem that must be faced is how complex the simulations must be and what characteristics they must incorporate in order to produce evolved results that lead to the desired behavior and that can be easily transferred to reality.
Typically in the fi eld, the designer creates the simulated environment and explicitly de fi nes a fi tness function that guides evolution towards an objective while satisfying different real-world constraints. This procedure involves a high degree of designer intervention that is undesirable because it is limited by his/her capacities (consequently non-generalizable) and because it restricts the search space, preventing the emergence of more fl exible and original solutions. This idea of allowing a more evolution is not novel, but it has been widely rejected when trying to design manufacturable systems due to the unfeasibility of the emergent solutions.

Within EDHMoR we have developed a methodology to evaluate individuals in a more implicit way, allowing emergent solutions while preserving their feasibility by means of a realistic simulator where the physical constraints can be easily incorporated and where the main features of the environment can be properly varied during the evaluation phase. The problem of obtaining simulated results that can be transferred to reality is a classical one in the evolutionary robotics literature. It was considered by Jakobi (1997) for the case of evolving controllers in simulation for robots with fi xed morphologies. He proposed a procedure whereby a set of basic features of the real environment and basic interactions with it must be carefully de fi ned and randomly varied during the evaluation phase, leading to controllers that are highly robust in real world operation. Speci fi cally, Jakobi's procedure can be summarized in three steps ( Jakobi, 1997 ): 1. A base set of robot  X  environment interactions (suf fi underlie the behavior to evolve) must be identi fi ed and made explicit in the simulation model. 2. In addition to the base set features, the simulation can contain other implementation features, which are not directly related with the behavior but can modify it. 3. If random variation is applied to all aspects of the simulation, then the evolved control architectures will be base set robust and base set exclusive.

Starting from this background procedure, a methodology for the evaluation of individuals considering their morphology and control has been incorporated to EDHMoR. It implies the comple-tion of the following fi ve steps: 1. The objective of the robot task must be clearly speci fi designer in terms of magnitudes that can be measured in the simulation. 2. A very simple fi tness function must be de fi ned that re accomplishment of the objective from a high-level perspective.
It should not include physical constraints explicitly. 3. Physical constraints should be included in the simulation as a part of the environment instead of being terms added to the fi tness functions. Soft constraints are preferred rather than hard constraints to smooth the search process. 4. A base set of robot  X  environment interactions must be de and randomly varied in a prede fi ned operational range from evaluation to evaluation (base set robust). 5. Every implementation aspect must be randomly varied in all their range from evaluation to evaluation to make the obtained robot tolerant to them (base set exclusive).

It seems clear that this methodology implies a detailed de tion of the problem by the designer and one could think that the work is practically the same as in the typical procedure of de an explicit fi tness function that contains all the constraints and elements to be evaluated. As we will show in Section 4 with the practical examples, following this methodology simpli fi es the process notably, because most of the constraints and features that must be considered are implicitly introduced through the simu-lator preserving a very simple explicit fi tness function. 3.3. Management
The last component of EDHMoR, as displayed in Fig. 3 ,is concerned with the management tasks required by the system.
It includes three elements, con fi guration, register and graphical user interface, which allow setting up the experiments, storing the results for statistical analysis and evaluating the robot's behavior in a graphical way. A screen capture of the graphical user interface is displayed in Fig. 8 . Although it is a very relevant component of the system, it is more related to software issues and man machine interaction, being out of the scope of this paper.
 Summarizing, in this section, the main components of the
EDHMoR system have been presented. What is relevant here is analyzing how it works in speci fi c cases of robotic design and how well the results can be transferred to reality, which is the objective of the following section. 4. Evolutionary design of modular robots in linear and static missions To illustrate the type of robot that can be designed using EDHMoR with all the speci fi c elements described above, two benchmark problems in robotics have been considered. The fi one is a linear mission involving carrying a payload the maximum possible distance through a rugged surface. The second one is a static mission consisting in painting a vertical wall covering the maximum possible area. Thus, the EDHMoR system must jointly produce morphologies and control systems for robots that perform these tasks. In both the cases, the encoding, constructive algo-rithm, control parameters and fi tness function de fi nition metho-dology presented in Sections 3.1 and 3.2 have been applied. 4.1. Linear mission: carrying a payload through a rugged surface
The experiment has been organized as three stages of incre-mental complexity in order to show the effect of the different steps of the evaluation methodology in a clearer way. The simply considers a fl at surface and the robot does not have to carry any payload. In the second one, we do not consider the payload either but a rugged surface is contemplated. Finally, the third scenario considers both, the payload and the rugged surface. 4.1.1. Flat surface
Starting with the simplest case of a fl at surface, the fi the EDHMoR system is de fi ning the fi tness function according to the methodology proposed in Section 3.2.2 : 1. The objective of the robot to be designed is: moving forward as far as possible minimizing energy consumption 2. The fi tness function that has been de fi ned to reach such objective is: f  X  where distance is the distance traveled by the payload, dis-tance th is a distance threshold value, f max is the fi tness of a robot with zero modules, N is the maximum number of modules allowed and n is the current number of modules of the individual that is being evaluated. The idea behind this function is rewarding those individuals that cover a minimum distance distance th using a low number of modules, which is directly related with low energy consumption. The control of the number of modules is not considered until the individual reaches a minimum fi tness to make the search space easier. 3. There is no physical constraint apart from those imposed by the real modules that are being simulated and by the basic physics of the environment. 4. The base set of features is empty. 5. We do not consider any implementation aspect relevant for the design (for example, we could have included the initial position of the robot and varied it randomly between evaluations, but in this case this feature is considered irrelevant).

Once the fi tness function and the evaluation procedure have been established, the evolutionary process starts using the con-structive algorithm described in Section 3.1.2 , which has been con fi gured with the parameters displayed in the second column of Table 2 . The modules the algorithm must use to design the robot are those detailed in Section 2 with the base module used as a fi xed root node from which the tree is created. To simplify the search space and concentrate the analysis on the morphological adaptation of the solution, the only control parameter evolved in this experiment is the phase  X  , being the other two fi xed to 1.
The constructive evolutionary strategy was run 12 times for obtaining the evolution curves displayed in Fig. 9 a. The black line represents the average fi tness of the best robot in the 12 runs while the gray one corresponds to the average fi tness of the population. Error bars display the standard deviation of the 12 executions. As it can be seen, the constructive algorithm is able to obtain robots that cover distances of over 2.5 m preserving a clear diversity in the population. In Fig. 9 b we have represented the evolution of the average number of modules in the population. As displayed in Table 2 , the maximum allowed number of modules N was 16, and with the selected fi tness function the algorithm is able to obtain successful robots using 10 modules on an average. It must be pointed out that the best individual obtained in each execution was made up of a number of modules below this average value in all cases. In this case the error bars represent the standard deviation in the average number of modules in the population for the 12 runs, that is, these bars show the high diversity of morphologies present in the population in most of the generations.
 obtained in these runs, one in the top three image sequence and the other in the bottom three image sequence. The top robot is made up of only three modules (apart from the base), one slider and two telescopic modules, which act as a contracting leg dragging the base over the ground. This is a clear example of a robot that is feasible but not very realistic and practical if we are seeking a robot to able to move in a general horizontal surface, because dragging the base would be impossible in many cases. The problem with this solution comes from the evaluation de fi that does not consider any physical constraint, leading to solutions that are too  X  lax  X  . However, given the de fi nition of the problem given to EDHMoR by the designer, the solution is quite appropriate due to the speed it can achieve and the stability it provides. The bottom robot displayed in Fig. 10 is very similar to the previous one, but it is made up of two slider and two telescopic modules, being one of them parallel to the fl oor and providing the robot with a larger contact surface.

To show how deceptive the search space we are facing is, a simple but illustrative experiment has been carried out. Starting from the robot displayed in the bottom images of Fig. 10 ,wehave varied the position of the telescopic module that is connected to the base module placing it in all the different positions where it could be connected to the base with all possible orientations. That is, taking into account that there are 16 possible connection bays in the base and the telescopic module can be connected in different orientations, we have performed 80 variations of the morphology obtained after evolution. For each new morphology, the resulting robot has been evaluated in the simulator, and a relative distance (the distance covered in the x -axis minus the absolute value of the distance covered in the y -axis) has been computed as an estimation of its performance. With these data, the plot displayed in Fig. 11 has been created, which provides a visual estimation of the deceptivity of the search space, that is, how much can a single change in a gene affect the fi nal fi As it can be observed, there is only one optimum in this case, the one obtained by the evolutionary algorithm, being all the remaining con fi gurations suboptimal. In fact, the distance covered by the robot using these suboptimal con fi gurations is much smaller than for the single optimum.

As a consequence of this characteristic, traditional and state of the art evolutionary strategies like Differential Evolution (DE) or Covariance Matrix Adaptation Evolution Strategy (CMA-ES) pro-vide very poor results in this problem. The reason is that their recombination operators assume smooth variations in the pheno-type as a result of combining the genotypes. To empirically test this statement, the fl at surface experiment was repeated using the
DE and CMA-ES algorithms included in JEAF as the evolutionary algorithm of EDHMOR. The speci fi c implementations of the algo-rithms are those explained in Caama X o et al. (2013) with their parameters tuned to optimize their response in non-separable landscapes as recommended in Caama X o et al. (2013) . Fig. 12 contains the evolution results obtained after 12 runs of each algorithm. As it can be seen, the constructive algorithm clearly outperforms DE and CMA-ES, as expected, mainly to the high deceptivity of the search space commented above (the total achieved by the constructive algorithm is lower than that dis-played in Fig. 9 a because in this case the fi tness was directly the traveled distance without considering a distance th ). 4.1.2. Rugged surface
Taking into account that the best robots obtained in the fl surface drag the base, the previous setup was inappropriate to solve the general type of mission selected here: carrying a payload the maximum possible distance through a rugged surface. Conse-quently, a more realistic evolution scenario must be created in
EDHMoR. As a consequence a new scenario introducing a rugged terrain is considered. The evaluation procedure, according to the methodology proposed in Section 3.2.2 , would be the following: 1. The objective of the robot to be designed is: moving forward as far as possible in a general rugged terrain minimizing energy consumption 2. The fi tness function that has been de fi ned to reach such 3. One physical constraint is considered now: 4. The base set of features is made up of three parameters related 5. We do not consider any implementation aspect.
 has been de fi ned, the constructive algorithm has been run with the parameters displayed in the third column of Table 2 . This setup was executed 12 times obtaining the evolution curves displayed in Fig. 9 c. Now, the best robots cover distances of over 1.3 m, practically half of the previous case, providing a clear evidence of the complexity increase induced by including the obstacles in the ground. Again, the average number of modules in the population was below the maximum of 16 as shown in Fig. 9 d while a high diversity of morphologies were maintained during evolution. robots obtained in this case. It is made up of seven modules, the base, four sliders and two telescopic modules, symmetrically placed with respect to the base. As it can be observed, the robot still drags the base, but it is very ef fi cient in rugged surfaces like those used in the evaluation because the modules act as propul-sion legs and the base is a kind of appendix whose function is to provide stability.

Another very interesting solution the EDHMoR system found in this case is the one presented in the three bottom images of Fig. 13 where motion over the rugged terrain is achieved by rotating the base, very much like a wheel. This solution is quite optimal for dealing with rugged surfaces and reinforces the idea of how a more fl exible search space leads to more original solutions.
Obviously it will not be a good solution if we want the robot to carry a load and, therefore, more tweaking with the scenario will be necessary in order to achieve our fi nal goal. 4.1.3. Rugged surface with payload
The complete design problem is addressed in this section by considering that the robots must carry a payload in addition to moving over rugged terrains. In this case, according to the proposed methodology, the evaluation steps are speci fi ed as follows: 1. The objective of the robot to be designed is: move forward as far as possible in a general rugged terrain carrying a payload of unspeci fi ed weight and minimizing the energy consumption 2. The fi tness function remains unchanged. 3. Two physical constraints are considered: 4. The base set of features in this case is made up of the previous parameters related with the obstacles on the fl oor (determin-ing the ruggedness of the terrain), height ( h o ), width ( w length ( l o ), and now we include the payload parameters weight ( w p ), size ( s p ) and payload friction coef fi cient (  X  p
In addition to the fi ve rugged fl oors used in the previous setup, we include fi ve different cubic payloads of different weights (from 0.4 to 0.8 kg), sizes (from 0.3 to 0.6 m) and friction coef fi cients (from 0.8 to 10). The robots are evaluated times, one over each fl oor with a randomly selected payload.
The resulting fi tness is the minimum obtained by the robot in these fi ve evaluations. 5. We do not consider any implementation aspect.

The speci fi c parameters used in the constructive evolutionary algorithm are those of the fourth column of Table 2 . The evolution results are displayed in Fig. 9 e. As expected, the total distance covered by the best robots decreases again with respect to the pervious examples as the problem becomes more complex, but the
EDHMoR system is able to design modular robots that satisfy the objective in all the runs. The number of modules is around 12 on average in this case, as shown in Fig. 9 f.

The three top images of Fig. 14 correspond to one of the best robots obtained in this case. It has two symmetric branches in the back of the base module that starts with a hinge connected to a telescopic module and ends with two rotational modules. These branches act again as contracting legs providing thrust to the whole structure. Additionally, in the front of the base there is a rotational module joined to a slider that generate an advance motion when the center of mass is frontally balanced, helping the structure to go over obstacles.

To show that the proposed methodology allows obtaining feasible structures, Fig. 15 contains a prototype construction of this robot, which is able to operate in rugged terrains successfully. The morphology of the robot guarantees that the base inclination is not too large and, as a result, the payload can be transported even in the presence of small obstacles on the fl oor.
Finally, in the bottom images of Fig. 14 we display the best solution obtained in the linear mission experiment. As we can see, it is a very ef fi cient structure from a morphological point of view because it only requires 6 modules to accomplish the objective. It is composed by a branch of two hinge modules to obtain pitch and roll movements and a rotational module in the end to increase the length of the serial chain and also to rotate the bottom part of this module to work like a wheel. Also, a telescopic module is employed to push the robot on the other side. Fig. 16 displays a prototype construction of this robot, which is able to operate in rugged terrains. Obviously, if a better degree of feasibility that takes into account the possible damages the robot could suffer from friction when dragging the base is desired, more features should be included in the base set and outside it when performing the simulations that evaluate the robots. 4.2. Static mission: paint a small surface
As commented in Section 2 , the modular system was developed to carry different types of missions. In the previous we presented the results for a linear mission and now, in this section, we deal with the design of modular robots for static missions where the robot is fi xed in a position and it is not displaced. These kinds of missions are usually carried by industrial manipulators able to place their end effectors in a desired position in order to follow a path. To show this type of mission we select a typical industrial task: a surface painting task.

The main objective is to obtain feasible robots able to paint a relatively small area without patches that are not coated. Also, the generated robots have to adapt their control parameters to paint the whole surface with their end effectors. The main difference with respect to the previous task is that the fi tness of the robot is a function of the paths followed by the end effectors. Thus, the fi tness does not depend on the start and end position of the robot. As a result, the robots have to employ more complex control strategies. This is the reason why in these missions we consider the amplitude (  X  ) and angular frequency (  X  ) parameters, in addition to the phase (  X  ), in the control of the modules.

In addition, the robots have to place their end effectors (painting guns in this case) close to the surface and, in a approximation, we are not taking into account the orientation of the end effectors. The painting gun was modeled in the simulations as a new cylindrical module (it is red in simulation images) weighing 200 g.

As in previous example in the linear mission, this section is divided into two different parts of incremental complexity. In the fi rst one, we only consider one large fl at surface to paint placed at a fi xed distance from the base of the robot. The second one considers small surfaces at different distances from the robot base. 4.2.1. Large fl at surface
According to the proposed methodology, we must de fi ne the following evaluation details: the parameters displayed in the fi rst column of Table 3 .Asinthe previous experiment, 12 different runs have been performed and the evolution curves are those displayed in Fig. 18 a. As it can be seen, the constructive algorithm is able to obtain robots that paint over 130 surface parts. This result is far away from the theoretical maximum (10,000 parts to pain plus f max )duetothefactthatthesurfacecanbe considered as in fi nite for the robot. Regarding the average number of modules during evolution, in Fig. 18 b it can be observed that the population contains robots of different numbers of modules with an average lower than 12 modules per robot.
 Two of the best robots obtained in this test are displayed in Fig. 19 . Both robots employ a similar technique to paint the surface: the fi rst module is a rotational module, which generates a circular motion of the rest of robot branches. We have to indicate that the evolved robots exploit their morphologies to avoid the excess of momentum in the joints of the modules. An example of this is the bottom robot of Fig. 19 . This robot has two opposing branches allowing the rotational module, which has a limited torque, to move the rest of the structure.

As shown, the solutions found are not very useful because, in spite of the fact that they paint a large area, their end effectors are placed at a fi xed distance from the robot base. This fi xed distance means that if the surface is at a different distance, the end effectors would not paint the surface correctly. Also, the painted surface presents a lot of unpainted patches. To fi x these problems we are going to apply the methodology proposed including new constraints and variations in the base set of the environment. 4.2.2. Small fl at surface at different distances
As in the linear mission, the complete design problem is addressed in this section by considering that the robots must paint surfaces that are positioned at different distances from the robot base and avoiding unpainted patches. In this case, according to the proposed methodology, the evaluation steps are speci fi ed as follows: 1. The objective of the robot to be designed is: completely painting a small surface (1 1 m ) placed between 1.1 and 1.3 m away from the base of the robot . 2. The fi tness remains unchanged from that of Section 4.2.1 . 3. One physical constraint is considered: -4. In this case, we include the distance from the base of the robot to the surface ( d ) as the base set of features.

We generate two different worlds at different random dis-tances between the base of the manipulator and the objective surface (1.3 and 1.1 m). The robots are evaluated two times, one in each world, and the resulting fi tness is the minimum obtained by the robot. 5. We do not consider any feature out of the base set that is relevant for the design.

To perform this fi nal test, the robot has to know where the surface is placed with respect to it using a sensor and it must manage its modules with different control parameters depending on this value. Consequently, the simulation considers the existence of a sensor that produces a sensor parameter corresponding to the distance between the original surface, placed 1.1 m from the base, and the surface in the current simulation. In other words, the value of sensor is 0 when the surface is 1.1 m away and 0.2 when the surface is 1.3 m away. In addition, two control parameters are introduced in the control of each module: an amplitude modulator (  X  )andan angular velocity modulator (  X  ). These two parameters, combined with the amplitude (  X  ), angular velocity (  X  )and phase (  X  ), modify the module position pos (displacement distance or angle between the two parts of the module) using the following equation:
A  X   X  X   X   X   X  U sensor  X  U A max
V  X   X  X   X   X   X  U sensor  X  U V max
A  X 
V  X  pos  X  A U sin  X  V U t  X   X   X  angular velocity modulator is [ 4, 4] to allow the saturation of the amplitude and the angular velocity of the motion. Also, as now there are more control parameters that need to be optimized, the number of control variations generated by the Shake Control mutation operator has been increased. The control strategy chosen is, obviously, not the best one possible for this type of tasks, but it is a simple way to obtain robots with different behaviors and analyze the in fl uence on the variations in the base set and the addition of new physical constraints. the parameters displayed in the second column of Table 3 .The evolution graph is displayed in Fig. 18 c. It can be observed that due to the complexity of the problem now the constructive algorithm needs more generations to achieve a successful average fi 73. The evolution of the average number of modules is represented in
Fig. 18 d, which shows that the constructive algorithm is stabilized on 12modulesperrobot,aslightlymorethaninthelargesurface example. Finally, two of the best manipulators obtained are displayed in Fig. 20 .Asshowninthe fi gure, this simple strategy allows new robot morphologies that can paint different surfaces without bare patches and that can adapt its end effectors to paint surfaces at different distances. In the fi rst example, the main structure is made up of a hinge module attached to a vertical slider, which holds another hinge module with a telescopic module. The end effectors are placed on the end of the telescopic modul e. The two hinge modules are used to displace the paint guns horizontally while the slider is employed to adjust them vertically. Finally, the telescopic module permits reaching surfaces at different distances from the robot base.

The main structure is made up of a serial chain consisting of a vertical slider, two hinges (with different orientations of their rotation axes) and another slider with three end effectors. Again, this robot can move the painting guns vertically (with the slider or the second hinge), horizontally (with the fi rst hinge) and normally to the surface (with the last slider).
 feasibility of the solutions. The base of the robot is a permanent magnet placed on a metallic plate in front of the target area that needs to be painted (the black area). In addition, the end effectors are the white cylindrical objects on the ends of the manipulators. These prototypes are displayed in Fig. 21 . They are very close con to the simulated robots obtained but with some simpli fi cations. As an example, the two rotational modules of the fi rst robot, which are placed in the end of the manipulator, are eliminated in the prototype.
Also, in the second robot, the hinge module on the right of the slider is not used in the fi nal robot. These modules help to obtain good results in the simulation as they in fl uence the behavior of the robot. For instance, the hinge module in the last robot adds weight to the fi rst slider and prevents the slider from reaching its extreme position. However, once a good morphological solution is found other control algorithms can be used, the con fi guration can be simpli fi ed and the number of modules reduced. 5. Conclusions This work has presented the preliminary results obtained using EDHMoR, a modular robot evolutionary design system focused on the automatic design of complete robots (morphology and control) that can be manufactured. The system evolves a heterogeneous modular architecture with distributed control that, at this moment, contains four fully functional types of modules as well as some passive elements. They are encoded in a simple tree-like representation trying to easily manage the huge number of different module combinations that could arise. A constructive evolutionary strategy has been developed to evolve solutions using this encoding with the aim of simplifying and smoothing the search space. Finally, a fi tness evaluation methodology has been proposed trying to provide a path to reach feasible and realistic solutions in simulation that can be easily transferred to reality. It is based on the establishment of very simple fi functions while guiding the evolutionary process towards more realistic solutions through modi fi cations of the simulated envir-onment. We also propose a set of steps based on the traditional behavior based evolutionary robotics to de fi ne the test sequences in order to produce robust robots that can be easily built. We have analyzed here EDHMoR's response in a benchmark task consisting in the design of a robot able to move in a straight line over a rugged horizontal surface carrying a load, starting from a very simple environment and increasing its complexity. With this experiment, we have tested how the solutions obtained were increasingly feasible and realistic, as expected. In a second experi-ment, we show the feasibility of using EDHMoR type methodol-ogies in order to produce robots that must act differently depending on sensor values. These results are very promising and, consequently, we are now improving EDHMoR to apply it in more complex tasks.
 Acknowledgments This work was funded by the MEC of Spain through project
DPI2006-15346-C03-01 and Xunta de Galicia through project 09DPI012166PR with the support of European Regional Develop-ment funds.
 References
