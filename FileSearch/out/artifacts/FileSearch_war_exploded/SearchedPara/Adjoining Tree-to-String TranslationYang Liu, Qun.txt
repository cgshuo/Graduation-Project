 Syntax-based translation models, which exploit hi-erarchical structures of natural languages to guide machine translation, have become increasingly pop-ular in recent years. So far, most of them have been based on synchronous context-free grammars (CFG) (Chiang, 2007), tree substitution grammars (TSG) (Eisner, 2003; Galley et al., 2006; Liu et al., 2006; Huang et al., 2006; Zhang et al., 2008), and inversion transduction grammars (ITG) (Wu, 1997; Xiong et al., 2006). Although these for-malisms present simple and precise mechanisms for describing the basic recursive structure of sentences, they are not powerful enough to model some impor-tant features of natural language syntax. For ex-ample, Chiang (2006) points out that the transla-tion of languages that can stack an unbounded num-ber of clauses in an  X  X nside-out X  way (Wu, 1997) provably goes beyond the expressive power of syn-chronous CFG and TSG. Therefore, it is necessary to find ways to take advantage of more powerful syn-chronous grammars to improve machine translation.
Synchronous tree adjoining grammars (TAG) (Shieber and Schabes, 1990) are a good candidate. As a formal tree rewriting system, TAG (Joshi et al., 1975; Joshi, 1985) provides a larger domain of lo-cality than CFG to state linguistic dependencies that are far apart since the formalism treats trees as basic building blocks. As a mildly context-sensitive gram-mar, TAG is conjectured to be powerful enough to model natural languages. Synchronous TAG gener-alizes TAG by allowing the construction of a pair of trees using the TAG operations of substitution and adjoining on tree pairs. The idea of using syn-chronous TAG in machine translation has been pur-sued by several researchers (Abeille et al., 1990; Prigent, 1994; Dras, 1999), but only recently in its probabilistic form (Nesson et al., 2006; De-Neefe and Knight, 2009). Shieber (2007) argues that probabilistic synchronous TAG possesses appealing properties such as expressivity and trainability for building a machine translation system.

However, one major challenge for applying syn-chronous TAG to machine translation is computa-tional complexity. While TAG requires O ( n 6 ) time for monolingual parsing, synchronous TAG requires O ( n 12 ) for bilingual parsing. One solution is to use tree insertion grammars (TIG) introduced by Sch-abes and Waters (1995). As a restricted form of TAG, TIG still allows for adjoining of unbounded trees but only requires O ( n 3 ) time for monolingual parsing. Nesson et al. (2006) firstly demonstrate the use of synchronous TIG for machine translation and report promising results. DeNeefe and Knight (2009) prove that adjoining can improve translation quality significantly over a state-of-the-art string-to-tree system (Galley et al., 2006) that uses syn-chronous TSG with tractable computational com-plexity.

In this paper, we introduce synchronous TAG into tree-to-string translation (Liu et al., 2006; Huang et al., 2006), which is the simplest and fastest among syntax-based approaches (Section 2). We propose a new rule extraction algorithm based on GHKM (Galley et al., 2004) that directly induces a syn-chronous TAG from an aligned and parsed bilingual corpus without converting Treebank-style trees to TAG derivations explicitly (Section 3). As tree-to-string translation takes a source parse tree as input, the decoding can be cast as a tree parsing problem (Eisner, 2003): reconstructing TAG derivations from a derived tree using tree-to-string rules that allow for both substitution and adjoining. We describe how to convert TAG derivations to translation forest (Sec-tion 4). We evaluated the new tree-to-string system on NIST Chinese-English tests and obtained con-sistent improvements (+0.7 BLEU) over the STSG-based baseline system without significant loss in ef-ficiency (1.6 times slower) (Section 5). A synchronous TAG consists of a set of linked ele-mentary tree pairs: initial and auxiliary . An initial tree is a tree of which the interior nodes are all la-beled with non-terminal symbols, and the nodes on the frontier are either words or non-terminal sym-bols marked with a down arrow (  X  ). An auxiliary tree is defined as an initial tree, except that exactly one of its frontier nodes must be marked as foot node (  X  ). The foot node must be labeled with a non-terminal symbol that is the same as the label of the root node.

Synchronous TAG defines two operations to build derived tree pairs from elementary tree pairs: substi-tution and adjoining . Nodes in initial and auxiliary tree pairs are linked to indicate the correspondence between substitution and adjoining sites. Figure 1 shows three initial tree pairs (i.e.,  X  and two auxiliary tree pairs (i.e.,  X  dashed lines link substitution nodes (e.g., NP X in tree pairs. Substituting the initial tree pair  X  the NP yields a derived tree pair  X  at NN-X in  X 
For simplicity, we represent  X  rule: where NP ing site linked to a target node dominating the tar-get string spanning from position 0 to position 1 (i.e.,  X  X S X ). The target tree is hidden because tree-to-string translation only considers the target surface string. Similarly,  X  where x denotes a non-terminal and the subscripts indicate the correspondence between source and tar-get non-terminals.
 The parameters of a probabilistic synchronous TAG are where  X  ranges over initial tree pairs,  X  over aux-iliary tree pairs, and  X  over node pairs. P the probability of beginning a derivation with  X  ; P (  X  |  X  ) is the probability of substituting  X  at  X  ; P a (  X  |  X  ) nally, P joining at  X  .

For tree-to-string translation, these parameters can be treated as feature functions of a discrimi-native framework (Och, 2003) combined with other conventional features such as relative frequency, lex-ical weight, rule count, language model, and word count (Liu et al., 2006). Inducing a synchronous TAG from training data often begins with converting Treebank-style parse trees to TAG derivations (Xia, 1999; Chen and Vijay-Shanker, 2000; Chiang, 2003). DeNeefe and Knight (2009) propose an algorithm to extract syn-chronous TIG rules from an aligned and parsed bilingual corpus. They first classify tree nodes into heads, arguments, and adjuncts using heuristics (Collins, 2003), then transform a Treebank-style tree into a TIG derivation, and finally extract minimally-sized rules from the derivation tree and the string on the other side, constrained by the alignments. Proba-bilistic models can be estimated by collecting counts over the derivation trees.
 However, one challenge is that there are many TAG derivations that can yield the same derived tree, even with respect to a single grammar. It is difficult to choose appropriate single derivations that enable the resulting grammar to translate unseen data well. DeNeefe and Knight (2009) indicate that the way to reconstruct TIG derivations has a direct effect on fi-nal translation quality. They suggest that one possi-ble solution is to use derivation forest rather than a single derivation tree for rule extraction.

Alternatively, we extend the GHKM algorithm (Galley et al., 2004) to directly extract tree-to-string rules that allow for both substitution and adjoining from aligned and parsed data. There is no need for transforming a parse tree into a TAG derivation ex-plicitly before rule extraction and all derivations can rule extraction algorithm involves two steps: (1) ex-tracting minimal rules and (2) composition. 3.1 Extracting Minimal Rules Figure 2 shows a training example, which consists of a Chinese parse tree, an English string, and the word alignment between them. By convention, shaded nodes are called frontier nodes from which tree-to-string rules can be extracted. Note that the source phrase dominated by a frontier node and its corre-sponding target phrase are consistent with the word alignment: all words in the source phrase are aligned to all words in the corresponding target phrase and vice versa.

We distinguish between three categories of tree-to-string rules: 1. substitution rules , in which the source tree is 2. adjoining rules , in which the source tree is an 3. auxiliary rules , in which the source tree is an
For example, in Figure 1,  X   X 
Minimal substitution rules are the same with those in STSG (Galley et al., 2004; Liu et al., 2006) and therefore can be extracted directly using GHKM. By minimal, we mean that the interior nodes are not frontier and cannot be decomposed. For example, in Table 2, rule 1 (for short r tution rule extracted from NR
Minimal adjoining rules are defined as minimal substitution rules, except that each root node must be an adjoining site. In Table 2, r substitution rule extracted from NP a descendant of NP is a possible adjoining site. Therefore, r derived from r rule extracted from NP adjoining rules are extracted from NP has four frontier descendants labeled with NP.
Minimal auxiliary rules are derived from minimal substitution and adjoining rules. For example, in Ta-ble 2, r stitution rule r r joining sites (e.g., r
Table 1 lists 17 minimal substitution rules, 7 min-imal adjoining rules, and 7 minimal auxiliary rules extracted from Figure 2. 3.2 Composition We can obtain composed rules that capture rich con-texts by substituting and adjoining minimal initial and auxiliary rules. For example, the composition of r rule with two adjoining sites: is discontinuous. Our model allows both the source and target phrases of an initial rule with adjoining sites to be discontinuous, which goes beyond the ex-pressive power of synchronous CFG and TSG.

Similarly, the composition of two auxiliary rules r
We first compose initial rules and then com-pose auxiliary rules, both in a bottom-up way. To maintain a reasonable grammar size, we follow Liu (2006) to restrict that the tree height of a rule is no greater than 3 and the source surface string is no longer than 7.

To learn the probability models P P a (  X  |  X  ) ize counts over these extracted rules following De-Neefe and Knight (2009). Given a synchronous TAG and a derived source tree  X  , a tree-to-string decoder finds the English yield of the best derivation of which the Chinese yield matches  X  : This is called tree parsing (Eisner, 2003) as the de-coder finds ways of decomposing  X  into elementary trees.

Tree-to-string decoding with STSG is usually treated as forest rescoring (Huang and Chiang, 2007) that involves two steps. The decoder first con-verts the input tree into a translation forest using a translation rule set by pattern matching. Huang et al. (2006) show that this step is a depth-first search with memorization in O ( n ) time. Then, the decoder searches for the best derivation in the translation for-est intersected with n -gram language models and
Decoding with STAG, however, poses one major challenge to forest rescoring. As translation forest only supports substitution, it is difficult to construct a translation forest for STAG derivations because of adjoining. Therefore, we divide forest rescoring for STAG into three steps: 1. matching , matching STAG rules against the in-2. conversion , converting the TAG derivation for-3. intersection , intersecting the translation forest
Given a tree-to-string rule, rule matching is to find a subtree of the input tree that is identical to the source side of the rule. While matching STSG rules against a derived tree is straightforward, it is some-what non-trivial for STAG rules that move beyond nodes of a local tree. We follow Liu et al. (2006) to enumerate all elementary subtrees and match STAG rules against these subtrees. This can be done by first enumerating all minimal initial and auxiliary trees and then combining them to obtain composed trees, assuming that every node in the input tree is fron-tier (see Section 3). We impose the same restrictions on the tree height and length as in rule extraction. Figure 3 shows some matched trees and correspond-ing rules. Each node in a matched tree is annotated with a span as superscript to facilitate identification. its direct descendant in Figure 2, suggesting that ad-joining is required at this site.

A TAG derivation tree specifies uniquely how a derived tree is constructed using elementary trees (Joshi, 1985). A node in a derivation tree is an ele-mentary tree and an edge corresponds to operations on related elementary trees: substitution or adjoin-ing. We introduce TAG derivation forest , a com-pact representation of multiple TAG derivation trees, to encodes all matched TAG derivation trees of the input derived tree.
 Figure 4 shows part of a TAG derivation forest. The six matched elementary trees are nodes in the derivation forest. Dashed and solid lines represent substitution and adjoining, respectively. We use Gorn addresses as tree addresses: 0 is the address of the root node, p is the address of the p th child of the root node, and p  X  q is the address of the q th child of the node at the address p . The derivation forest should be interpreted as follows:  X  the tree  X  first child of the first child of the root node) and  X  adjoined in the tree  X  1.

To take advantage of existing decoding tech-niques, it is necessary to convert a derivation forest to a translation forest . A hyperedge in a transla-tion forest corresponds to a translation rule. Mi et al. (2008) describe how to convert a derived tree to a translation forest using tree-to-string rules only allowing for substitution. Unfortunately, it is not straightforward to convert a derivation forest includ-ing adjoining to a translation forest. To alleviate this problem, we combine initial rules with adjoining sites and associated auxiliary rules to form equiv-alent initial rules without adjoining sites on the fly during decoding.

Consider  X  NP 2 , 3 . Adjoining  X  duces an equivalent initial tree with only substitution sites: The corresponding composed rule r adjoining sites and can be added to translation forest.
We define that the elementary trees needed to be composed (e.g.,  X  in a derivation forest. A node in a composition tree is a matched elementary tree and an edge corresponds to adjoining operations. The root node must be an initial tree with at least one adjoining site. The de-scendants of the root node must all be auxiliary trees. For example, (  X  two composition trees in Figure 4. The number of children of a node in a composition tree depends on the number of adjoining sites in the node. We use composition forest to encode all possible composi-tion trees.

Often, a node in a composition tree may have mul-tiple matched rules. As a large amount of composi-tion trees and composed rules can be identified and constructed on the fly during forest conversion, we used cube pruning (Chiang, 2007; Huang and Chi-ang, 2007) to achieve a balance between translation quality and decoding efficiency. We evaluated our adjoining tree-to-string translation system on Chinese-English translation. The bilin-gual corpus consists of 1.5M sentences with 42.1M Chinese words and 48.3M English words. The Chi-nese sentences in the bilingual corpus were parsed by an in-house parser. To maintain a reasonable grammar size, we follow Liu et al. (2006) to re-strict that the height of a rule tree is no greater than 3 and the surface string X  X  length is no greater than 7. After running GIZA++ (Och and Ney, 2003) to ob-tain word alignment, our rule extraction algorithm extracted 23.0M initial rules without adjoining sites, 6.6M initial rules with adjoining sites, and 5.3M auxiliary rules. We used the SRILM toolkit (Stol-cke, 2002) to train a 4-gram language model on the Xinhua portion of the GIGAWORD corpus, which contains 238M English words. We used the 2002 NIST MT Chinese-English test set as the develop-ment set and the 2003-2005 NIST test sets as the test sets. We evaluated translation quality using the BLEU metric, as calculated by mteval-v11b.pl with case-insensitive matching of n -grams.

Table 2 shows top-10 phrase categories of foot nodes and their average occurrences in training cor-pus. We find that VP (verb phrase) is most likely to be the label of a foot node in an auxiliary rule. On average, there are 12.4 nodes labeled with VP are identical to one of its ancestors per tree. NP and IP are also found to be foot node labels frequently. Figure 4 shows the average occurrences of foot node labels VP, NP, and IP over various distances. A dis-tance is the difference of levels between a foot node and the root node. For example, in Figure 2, the dis-tance between NP between VP are usually very close to the root nodes, we restrict that a foot node must be the direct descendant of the root node in our experiments.
 Table 3 shows the BLEU scores on the NIST Chinese-English test sets. Our baseline system is the tree-to-string system using STSG (Liu et al., 2006; Huang et al., 2006). The STAG system outper-forms the STSG system significantly on the MT04 and MT05 test sets at pl. 01 level. Table 3 also gives the results of Moses (Koehn et al., 2007) and an in-house hierarchical phrase-based system (Chi-ang, 2007). Our STAG system achieves compara-ble performance with the hierarchical system. The absolute improvement of +0.7 BLEU over STSG is close to the finding of DeNeefe and Knight (2009) on string-to-tree translation. We feel that one major obstacle for achieving further improvement is that composed rules generated on the fly during decod-ing (e.g., r many non-terminals, making cube pruning in the in-tersection phase suffering from severe search errors (only a tiny fraction of the search space can be ex-plored). To produce the 1-best translations on the MT05 test set that contains 1,082 sentences, while the STSG system used 40,169 initial rules without adjoining sites, the STAG system used 28,046 initial rules without adjoining sites, 1,057 initial rules with adjoining sites, and 1,527 auxiliary rules.
 Table 4 shows the average decoding time on the MT05 test set. While rule matching for STSG needs 0.086 second per sentence, the matching time for STAG only increases to 0.109 second. For STAG, the conversion of derivation forests to translation forests takes 0.562 second when we restrict that at most 200 rules can be generated on the fly for each node. As we use cube pruning, although the trans-lation forest of STAG is bigger than that of STSG, the intersection time barely increases. In total, the STAG system runs in 1.763 seconds per sentence, only 1.6 times slower than the baseline system. We have presented a new tree-to-string translation system based on synchronous TAG. With translation rules learned from Treebank-style trees, the adjoin-ing tree-to-string system outperforms the baseline system using STSG without significant loss in effi-ciency. We plan to introduce left-to-right target gen-eration (Huang and Mi, 2010) into the STAG tree-to-string system. Our work can also be extended to forest-based rule extraction and decoding (Mi et al., 2008; Mi and Huang, 2008). It is also interesting to introduce STAG into tree-to-tree translation (Zhang et al., 2008; Liu et al., 2009; Chiang, 2010). The authors were supported by National Natural Science Foundation of China Contracts 60736014, 60873167, and 60903138. We thank the anonymous reviewers for their insightful comments.

