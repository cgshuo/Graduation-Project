 In this demonstration, we present OSMRec, a command line utility and JOSM plugin for automatic recommendation of tags (categories) on newly created spatial entities in Open-StreetMap (OSM). JOSM allows downloading parts of OSM, editing the map (e.g. inserting, deleting, annotating with tags spatial entities) and re-uploading the updated part back on OSM. OSMRec plugin exploits already annotated enti-ties within OSM to train category classification models and utilizes these models in order to recommend OSM categories for newly inserted spatial entities in OSM.
 [ Information systems ]: [Recommender systems] Category recommendation, spatial entities, OSM
Over the past years, in parallel to geospatial data created and collected by authoritative sources, such as governmental organizations, there has been an increasingly large volume of geospatial data contributed directly or indirectly by casual users. An example of this is OSM 1 , a community initia-tive for the crowdsourced production of open global maps. Through various authoring tools, users contribute several spatial entities, such as roads, buildings or administrative areas. One of the most prominent tools of OSM is JOSM 2 , a graphical tool that allows users to (a) download all the entities of a geographic area from OSM, (b) visualize them on a map overlay, (c) add, change or delete entities and (d) reload the changed dataset into the publicly accessible OSM h ttp s://www.openstreetmap.org/ https://josm.openstreetmap.de/ map dataset. These spatial entities can also be annotated by categories (classes, tags) that assign semantics to them. Each entity may belong to multiple classes; for example, a building can be further characterized as school or bar.
In this demonstration, we present OSMRec, focusing on its JOSM plugin version. OSMRec facilitates the contribu-tion of new spatial features (entities) into OSM, by recom-mending to users already existing OSM categories, in order to annotate newly inserted spatial entities. This is impor-tant for two reasons. First, users may not be familiar with the OSM categories; thus searching and browsing the OSM category hierarchy to find appropriate categories for the en-tity they wish to insert may often be a time consuming and frustrating process, to the point of users neglecting to add this information. Second, if an already existing category that matches the new entity cannot be found quickly and easily (although it exists), the user may resort instead to using his/her own term, resulting in synonyms that later need to be identified and dealt with.

To the best of our knowledge, this is the first approach on recommending annotation categories for spatial entities in OSM. Another existing work on a similar problem [1] focuses on classifying road segments in OSM, thus it spe-cializes only on geometrical and topological features of the specific entities and reduces the space of recommendation categories from more than 1000 to only 21. Next, we briefly describe the recommendation model we implemented and then we demonstrate the usage of the tool. The experimen-tal results demonstrate that the proposed methodology can recommend annotation categories for new spatial features with high accuracy (achieving from 79% to 92% recommen-dation precision, using 5-fold cross validation in a set of 111,491 geospatial entities and 1421 OSM categories). We apply multiclass SVM classification, using LIBLIN-EAR 3 , and considering as training items the geospatial enti-ties themselves and as labels the categories that characterize them. The method maps the training entities into a multi-dimensional feature space and aims at finding the optimal hyperplanes that discriminates the entities belonging to dif-ferent categories. The optimality of the hyperplane depends on the selected parameter C, which adjusts the trade-off h ttp ://www.csie.ntu.edu.tw/  X  cjlin/liblinear/ bet w een misclassified training entities and optimal discrim-ination of correctly classified entities.

Since the same entity might be annotated with more than one class, we consider, for each entity, as many training items as its classes. The items are represented uniformly, with the exception of the different label that corresponds to the different class. Each item is represented as a feature vector, with each feature corresponding to a property of the item. Next, we present the features we define and implement: Geometry type . Six distinct geometry types are iden-tified: Point, LineString, Polygon, LinearRing, Circle and Rectangle.
 Number of geometry points . In total, we define (based on a statistical analysis of the frequencies of entities having certain numbers of points) 13 ranges, thus mapping this in-teger characteristic into 13 boolean features: [1-10], (10-20], ..., (200-300], (300-500], (500-1000], (1000-...). So, according to the number of points of an entity X  X  geometry, the proper position is set to 1, while the rest positions are set to 0. Area of geometry . We define intuitively (and considering that in this problem setting we are mainly interested in en-tities that are buildings) 24 ranges with increasing length in square meters, until the area of 4000m2, where we consider the 25th range of (4000-...).
 Mean edge length . In our case, we define 23 ranges, start-ing from length less than 2meters and ending with length more than 200meters.
 Variance of edge lengths . Likewise, we define 36 ranges. Textual features . For each entity of the training set, we extract the textual description of its name. We consider each word separately and count their frequency within the dataset. Then, we sort the list of words in descending fre-quency and filter out words with frequency less than 20. Finally, we apply a stopword list and remove words without any particular meaning. What remains are special meaning identifiers, such as avenue, church, school, park, etc. Each of these special keywords is used as a separate boolean feature. Category features . This is a set of 1421 boolean features, each one corresponding to one of the OSM categories. Of course, since in this case OSM categories are used both as training labels and as training features, it is impossible to be used for entities that are not already annotated with at least one category. That is because, we would essentially use information that we want to predict as a means to predict (training features). So, these features are not included the first time the algorithm runs; however, each time a new cat-egory is assigned to an entity, the respective training feature is utilized and the category recommendation is updated.
OSMRec 4 is implemented in Java, as a command line ap-plication and as a JOSM plugin. It consists of two core components: the Training Module and the Recommenda-tions Module. The former runs an offline process that takes as training input an OSM dataset and produces as output a classification model. The latter takes as input a set of geospatial entities, formatted according to the OSM XML format 5 , as well as the trained model, and produces a set of categories that are the model X  X  recommendation for tagging each geospatial entity from the input set. h ttp s://github.com/GeoKnow/OSMRec http://wiki.openstreetmap.org/wiki/OSM XM L
Next , we demonstrate the usage of the software through the graphical user interface provided in the plugin version. A screencast video is also available at 6 . OSMRec plugin is accessed from Tools  X  &gt; OSM Recommendation tab in JOSM menu bar. Due to lack of space, we omit the description of the offline training phase, and we focus on the actual automatic category recommendation process.

The user can select an entity or draw a new entity on the map and ask for recommendations by clicking the X  X dd Rec-ommendation X  button. The recommendation panel opens (Fig. 1) and provides a list with the top-10 recommended categories and the user can select from this list and click  X  X dd and continue X . As a result, the selected category is added to the OSM tags. By the time the user adds a new tag at the selected object, a new vector is computed for that OSM instance in order to re-calculate the predictions and display an updated list of recommendations (taking into ac-count the previously selected categories/tags, as extra train-ing information).

Further, OSMRec provides functionality for allowing the user to combine several recommendation models, based on (a) a selected geographic area, (b) user X  X  past editing history on OSM and (c) combination of (a) and (b). By clicking the  X  X odel Settings X  button the model settings panel opens and the user can choose to use a single model or combine several SVM models.
In this demonstration, presented OSMRec tool and espe-cially the JOSM plugin version. OSMRec exploits historical annotations of spatial entities with OSM categories in or-der to train classification models, based on problem-specific training features. Then, it utilizes these models to recom-mend categories for newly inserted geometries in OSM. This research is conducted as part of the EU project Geo-Know 7 FP7-ICT-2011-8, 318159. h ttp s://vimeo.com/126477260 http://geoknow.eu/
