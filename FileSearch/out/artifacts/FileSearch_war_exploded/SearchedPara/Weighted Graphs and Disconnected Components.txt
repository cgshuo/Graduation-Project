 The vast majority of earlier work has focused on graphs which are both connected (typically by ignoring all but the giant connected component), and unweighted . Here we study numerous, real, weighted graphs, and report surprising dis-coveries on the way in which new nodes join and form links in a social network. The motivating questions were the fol-lowing: How do connected components in a graph form and change over time? What happens after new nodes join a network X  how common are repeated edges? We study nu-merous diverse, real graphs (citation networks, networks in social media, internet traffic, and others); and make the fol-lowing contributions: (a) we observe that the non-giant con-nected components seem to stabilize in size, (b) we observe the weights on the edges follow several power laws with sur-prising exponents, and (c) we propose an intuitive, genera-tive model for graph growth that obeys observed patterns. Categories and Subject Descriptors: I.6.4 [Computing Methodologies]: Simulation and Modeling X  Model Valida-tion and Analysis ; I.5 [Pattern Recognition]: Miscellaneous General Terms: Measurement, Theory
How do real graphs evolve over time? How do the different components of an entire network form? What happens when we take into account multiple edges and weighted edges? Past work mainly focuses on static snapshots of graphs, where fascinating properties have been discovered, the most striking ones being the  X  X mall-world X  phenomenon [30] (also known as  X  X ix degrees of separation X  [20]) and the power-law degree distributions [3, 12]. Time-evolving graphs have at-tracted attention only recently, where even more fascinating properties have been discovered, like shrinking diameters, and the so-called densification power law [17].

In virtually all the above cases, the analysis focused on the  X  X iant connected component X  (GCC), either explicitly or implicitly, and moreover it ignored multiple links between nodes or weights on edges. Here we will shift our focus to the components that are of moderate size but  X  X isconnected X  from the GCC of the undirected graph, which we will refer to as the  X  X ext-largest connected components X  (NLCCs). We will also look at edge weights, particularly at how weighted edges are added over time.

The questions of interest are:  X  How do the non-giant weakly connected components be- X  What distributions and patterns do weighted graphs main- X  Can we produce a generator that will mimic the above be-
Answering these questions is important to understand how natural graphs evolve, and to (a) spot anomalous graphs and sub-graphs; (b) answer questions about entities in a network and what-if scenarios; and (c) discard unrealistic graph generators.

Let X  X  elaborate on each of the above applications: Spot-ting anomalies is vital for determining abuse of social and computer networks, such as link-spamming in a web graph, fraudulent reputation building in e-auction systems [23], de-tection of dwindling/abnormal social sub-groups in a social-networking site like Yahoo-360 ( 360.yahoo.com ), Facebook ( www.facebook.com ) and LinkedIn ( www.linkedin.com ), and network intrusion detection [15]. Analyzing network prop-erties is also useful for identifying authorities and search algorithms [5, 8, 14], for discovering the  X  X etwork value X  of customers for using viral marketing [27], or to improve rec-ommendation systems [4]. What-if scenarios are vital for extrapolation, provisioning and algorithm design: For ex-ample, if we expect that the number of links will double within the next year, we should provision for the appropri-ate hardware to store and process the upcoming queries.
Finally, rules like the upcoming ones in this paper can help us eliminate unrealistic graph generators. Graph gen-erators are also vital, for simulation of algorithms (like com-puter network routing algorithms), for simulation of rumor (or virus, or influence) prop agation, and many other set-tings. In several such settings, real graphs may be difficult or even impossible to collect: for example a who-believes-whom graph is only in the mind of the human subjects; a who-mails-whom graph may be protected by privacy laws.
Next we present related work (Section 2), background material (Section 3), our observations on un-weighted and weighted graphs, (Sections 5,6) our Butterfly generator model (Section 7), and the conclusions.
Here we review properties of real-world graphs, as well as several graph generators.
 Laws and graph properties: Static, unweighted graphs obey several impressive patterns: they usually have small diameter ( X  X mall world X  phenomenon), they have skewed de-gree distributions with power-law tails [2, 12], and have sim-ilar power laws with respect to the eigenvalues. A power law is an equation of the form y = x a ,with a being the exponent of the power law.
 For time-evolving graphs, there is the  X  X ensification Power Law X  [17], where real graphs obey the equation E ( t )= N ( t ) where a is the densification exponent. (For graphs studied in this work, a fell between 1 . 03 and 1 . 7.)
Additional power laws seem to govern the popularity of posts in citation networks, which drops over time, with power law exponent of  X  1 for paper citations [26] or  X  1 . 5 for blog posts [19]. Park et. al. report both static and dynamic measurements of autonomous systems graphs [24]. Chi et al. studied the evolution of communities over time [9]. The work by Kumar et al. [13] seems to be the only one that stud-ied components other than the giant connected component, and showed that there is significant activity there. Graph Generators: There are many graph generators, and even a recent survey on them [7]. The oldest and prob-ably the most studied is the Erdos-Renyi model where edges are randomly placed among nodes. Although unrealistic, this model leads to the fascinating phenomenon of phase transition : at a critical ratio of edges to nodes, the graph suddenly has high probabilit y to have a  X  X iant connected component X  (GCC). The GCC has size O ( n 2 3 ) [10].
Additional, more realistic models include the small world model [30], the preferential attachment model [1], the For-est Fire Model [17] and numerous more (the copying model, the  X  X inner does not take all X  model [25], Heuristically Op-timized Trade-offs [11]). We refer to the above as emergent generators, because they all have local rules (like prefer-ential attachment), and yet they still manage to produce the macroscopic patterns we observe (small diameter, etc). There is a whole family of non-emergent generators, like degree-sequence matching and the more recent  X  X ronecker X  graphs [16]. However, we focus on emergent graph genera-tors here.

In conclusion, our work and the upcoming discoveries dif-fer from all the earlier work, in the following major aspects: (a) We explicitly focus on the NLCC s ( X  X ext-largest con-nected components X ), while the overwhelming majority of earlier work ignores them completely. (b) We are the first to discover patterns in weighted graphs. (c) We give a natu-ral emergent generator, which provably achieves a power law in its out-degree, while still obeying all the other observed laws, old and new.
A static, unweighted graph G consists of a set of nodes V and a set of edges E : G =( V , E ). We represent the sizes of V and E as N and E . The extensions to weighted, and/or time evolving graphs are straightforward. In such cases, an edge has a weight and/or a timestamp. Let X  X  stay with unweighted graphs, for the moment.

Bipartite graphs, like the movie-actor graph of IMDB, consist of disjoint sets of nodes V 1 and V 2 , say, for authors and movies, with no edges among nodes of the same type.
Our goals are to find patterns governing (a) the emergence of a giant connected component, (b) the size of the NLCCs, (c) the behavior of edge and weight additions over time.
For the first, we chose to study the diameter plot ,that is, the diameter d ( t ) as a function of time t , because we see it has clear spike when the GCC emerges. (See the first column of Fig. 2 and 3)
We will find that weight-addition over time is bursty and self-similar (i.e. fractal), so we introduce tools, such as the entropy plot , to assess the burstiness.
How does the largest connected component of a real graph evolve over time? Do we start with one large CC, that keeps on growing? We propose to use the diameter-plot of the graph, that is, its diameter, over time, to answer these ques-tions. For a given (static) graph, its diameter is defined as the maximum distance between any two nodes, where dis-tance is the minimum number of hops (i.e., edges that must be traversed) on the path from one node to another, ignoring directionality.

Following earlier literature, we estimate the so-called ef-fective diameter , which is the 90-percentile of the pairwise distances among all reachable pairs of nodes. Estimating the (effective) diameter is an orthogonal issue. We used sam-pling to estimate it; alternative methods include ANF [22].
We will show that in weighted graphs, the addition of weights is often bursty. In case that the traffic is self-similar , then we can measure the burstiness, using the in-trinsic, or fractal dimension of the cloud of timestamps of edge-additions (or weight-additions). Let  X  W ( t )betheto-tal weight of edges that were added during the t -th interval, e.g., the total network flow on day t , among all the machines we are observing.

Among the many methods that measure self-similarity (Hurst exponent, etc. [28]), we choose the entropy plot [29], which plots the entropy H ( r ) versus the resolution r .The resolution is the scale, that is, at resolution r , we divide our time interval into 2 r equal sub-intervals, sum the weight-additions  X  W ( t )ineachsub-interval k ( k =1 ... 2 r ), nor-malize into fractions p k (=  X  W ( t ) /W total ), and compute the Shannon entropy of the sequence p k : H ( r )=  X  If the plot H ( r ) is linear in some range of resolutions, the corresponding time sequence is said to be fractal in that range, and the slope of the plot is defined as the intrinsic (or fractal )dimension D of the time sequence. Notice that a uniform weight-addition distribution yields D =1; a lower value of D corresponds to a more bursty time sequence like a Cantor dust [28], with a single burst having the lowest D =0: the intrinsic dimension of a point. Also notice that a variation of the 80-20 model, the so called  X  X -model X  [29], generates such self-similar traffic.
We studied several large real networks, described in de-tail in Table 1.We performed experiments on both uni-and bipartite, and both weighted and unweighted graphs.
Several of our graphs had no obvious weighting scheme: for example, a single paper or patent will cite another only a single time. The graphs that did have weights are also fur-ther divided into two schemes, multi-edges and edge-weights . In the edge-weights scheme, there is an obvious weight on edges, such as amounts in campaign donations, or packet-counts in network traffic. For multi-edges, weights are added if there is more than one interaction between two nodes. For instance, if a blog cites another blog at a given time, its weight is 1. If it cites the blog again later, the weight becomes 2.
 The datasets are gathered from publicly available data. NIPS 1 , Arxiv and Patent [17] are academic paper or patent citation graphs with no weighting scheme. IMDB indicates movie-actor information, where an edge occurs if an actor participates in a movie [3]. Netflix is the dataset from the Netflix Prize competition 2 , with user-movie links (we ig-nored the ratings); we also noticed that it only contained users with 100 or more ratings. BlogNet and PostNet are two representations of the same data, hyperlinks between blog posts [19]. in PostNet nodes represent individual posts, while in BlogNet each node represents a blog. Essentially, PostNet is a paper citation network while BlogNet is an au-thor citation network (which contains multi-edges).
NetTraffic records IP-source/IP-destination pairs, along with the number of packets sent, per unit time, and Oregon is an autonomous systems network 3 . Auth-Conf , Key-Conf , and Auth-Key are all from DBLP 4 , with the obvious mean-ings. CampOrg and CampIndiv are bipartite graphs from U.S. Federal Election Commission. They record donations (amounts) between political candidates and organizations, and individuals to organizations 5 .

In all the above cases, we assume that edges are never deleted, because edge deletion never explicitly appeared in these datasets.
We tracked several graph properties such as the diameter of the graph, edge additions to the graph and the behavior of the connected components of the graph over time. Here, we report the recurring findings, that hold for all the real world www.cs.toronto.edu/  X  roweis/data.html www.netflixprize.com
University of Oregon Route Views project, www.routeviews.org dblp.uni-trier.de/xml/ www.cs.cmu.edu/  X  mmcgloho/fec/data/ fec_data.html graphs we analyzed and provide additional observations for each specific dataset. Note that in this section only, for the purposes of studying diameter and weakly connected components, we will consider graphs undirected ,thatis whenever there is a link from one node to another, we put an undirected edge between them indicating that an interaction has occured. Our later observations on weighted graphs will return to directed vers ions of these graphs.
Studying the effective diameter of the graphs, we notice that there is often a point in time when the diameter spikes. Before that point, the graph is more or less in an estab-lishment period, typically consisting of a collection of small, disconnected components. This  X  gelling point  X  seems to also be the time where the GCC  X  X akes off X . After the gelling point, the graph obeys the expected rules, such as the den-sification power law; its diameter decreases or stabilizes; the giant connected component keeps growing, absorbing the vast majority of the newcomer nodes.

Observation 1 (Gelling point). Real graphs exhibit a gelling point, at which the diameter spikes and (several) disconnected components gel into a giant component.
In most of these graphs, both unipartite and bipartite, there are clear gelling points. For example, in NIPS the diameter spikes at t = 8 years, which is a reasonable time for an academic community to gel. In some networks, we only see one side of the spike, due to data construction (the nature of trace-routes in Oregon and NetTraffic ) or massive network size ( Patent ).

We show full results for PostNet in Fig. 1, including the di-ameter plot (Fig. 1(a)), sizes of the NLCCs (Fig. 1(b)), den-sification plot (Fig. 1(c)), and the sizes of the three largest connected components in log-linear scale, to observe how the GCC dominates the others (Fig. 1(d)). Results from other networks are similar, and are shown in condensed form for space (Fig. 2 for unipartite graphs, and Fig. 3 for bipartite graphs). The left column shows the diameter plots, and the right column shows the NLCCs, which we describe next.
We particularly studied the second and the third con-nected component over time. We notice that, after the gelling point, the sizes of these components oscillate over time. Further investigation shows that the oscillation may be explained as follows: new-comer nodes typically link to the GCC; very few of the newcomers link to the 2nd (or 3rd) CC, helping them to grow slowly; in very rare cases, a newcomer links both to an NLCC, as well as the GCC, thus leading to the absorption of the NLCC into the GCC. It is exactly at these times that we have a drop in the size of the 2nd CC: Note that edges are not removed, thus, what is reported as the size of the 2nd CC is actually the size of yesterday X  X  3rd CC, causing the apparent  X  X scillation X . This intuition forms the basis for our upcoming Butterfly model (Sec. 7).

An unexpected (to us, at least) observation is that the largest size these components can get seems to be a constant. This is counter-intuitive  X  based on random graph theory, we would expect the size of the NLCCs to grow with increasing N . Using scale-free arguments, we would expect the NLCCs to have size that would be a (small, but constant) fraction of the size of the GCC  X  to our surprise, this never happened, on any of the real graphs we tried. If some underlying growth does exist, it was small enough to be impossible to observe throughout the (often lengthy) time in the datasets.
The second columns of Fig. 2 and Fig. 3 show the NLCC sizes versus time. Notice that, after the  X  X elling X  point (marked with a vertical line), they all oscillate about con-stant value (different for each network). The only extreme cases are datasets with unusually high connectivity. For ex-ample, Netflix has very small NLCCs. This may be explained by the fact the dataset is masked, omitting users with less than a hundred ratings (possibly to further protect the pri-vacy of the encrypted user-ids). Therefore, the graph has abnormally high connectivity. Also, Oregon and NetTraf-fic have unusually high connectivity due to the nature of network traffic X  it benefits from having a single GCC, so NLCCs shrink to zero.

Observation 2 (Oscillating NLCCs). After the gel ling point, the secondary and tertiary connected compo-nents remain of approximately constant size, with small os-cillations.
Here we try to find patterns that weighted graphs obey. In this section we consider graphs to be directed (and impose a single direction in bipartite graphs), as this will be an im-portant consideration on the weights. The typical weighted graph is, say, the NetTraffic dataset, which records com-puter network traffic. The dataset consist of quadruples: (IP-source, IP-destination, timestamp, number-of-packets), where timestamp is in increments of, say, 30 minutes. Thus, we have multi-edges, as well as total weight for each (source, destination) pair. Let W ( t ) be the total weight up to time t (ie., the grand total of all exchanged packets across all pairs), E ( t ) the number of distinct edges up to time t ,and E ( t ) the number of multi-edges (the d subscript stands for duplicate edges), up to time t .
 We present three  X  X aws X  that our datasets seem to follow: The first is the  X  X eight power law X  (WPL) correlating the total weight, the total number of edges and the total number of multi-edges, as they change over time. The second is the  X  X napshot power law X  (SPL), correlating the in-degree with the in-weight, and the out-degree with the out-weight, for all the nodes of a graph, at a given time-stamp. The third Figure 1: Properties of PostNet network. Notice that we experience an early gelling point at (a) (di-ameter versus time), stabilization/oscillation of the NLCC sizes in (b) (size of 2nd and 3rd CC, ver-sus time). The vertical line marks the gelling point. Part (c) gives N ( t ) vs E ( t ) in log-log scales -the good linear fit agrees with the Densification Power Law. Part (d): component size (in log), vs time -the GCC is included, and it clearly dominates the rest, after the gelling point. is the  X  X ursty-weight law X  (BWL), showing that the weight additions are bursty, over time.
As defined above, suppose we have E ( t ) total unique edges up to time t (ie., count of pairs that know each other) and W ( t ) being the total count of packets up to time t .Istherea relationship between W ( t )and E ( t )? If every pair generated k packets, the relationships would be linear: if the count of pairs double, the packet count would double, too. This is reasonable, but it doesn X  X  happen! In reality, the packet count over-doubles, following the  X  X PL X  below. We shall refer to this phenomenon as the  X  fortification effect  X : m o r e edges in the graph imply super-linearly higher total weight. Figure 2: Properties of other unipartite networks. Diameter plot (left column), and NLCCs over time (right); vertical line marks the gelling point. All datasets exhibit an early gelling point, and stabi-lization of the NLCCs. Oregon has no NLCC plot since it consists of a single connected component, by its construction. Figure 3: Properties of bipartite networks. Diame-ter plot (left column), and NLCCs over time (right), with vertical line marking the gelling point. Again, all datasets exhibit an early gelling point, and stabi-lization of the NLCCs. Netflix has strange behavior becauseitismasked(seetext).
 Observation 3 (Weight Power Law (WPL)). Let E ( t ) , W ( t ) be the number of edges and total weight of a graph, at time t . They, they follow a power law where w is the weight exponent. Power-laws also link the number of nodes N ( t ) , and the number of multi-edges E to E ( t ) ,withexponents n and dupE , respectively. The weight exponent w ranges from 1.01 to 1.5 for the real graphs we have studied. The highest value corresponds to campaign donations: super-active organizations that sup-port many campaigns also tend to spend even more money per campaign than the less active organizations. For bi-partite graphs, we show the nsrc , ndst exponents for the source and destination nodes (which also follow power laws: N src ( t )= E ( t ) nsrc and similarly for N dst ( t )).
Fig. 5 shows all these quantities, versus E ( t ), for several datasets. The plots are all in log-log scales, and straight lines fit well. We report the slopes in Table 2.
What about a static snapshot of a graph? If node i has out-degree out i , what can we say about its out-weight outw i ? It turns out that there is a  X  X ortification effect X  here, too, resulting in more power laws, both for out-degrees/out-weights as well as for in-degrees/in-weights.

Specifically, at a given point in time, we plot the scatter-plot of the in/out weight versus the in/out degree, for all the nodes in the graph, at a given time snapshot. An ex-ample of such a plot is in Fig. 4 (c) and (d). Here, every point represents a node and the x and y coordinates are its degree and total weight, respectively. To achieve a good fit, we bucketize the x axis with logarithmic binning [21], and, for each bin, we compute the median y .

We observed that the median values of weights versus mid-points of the intervals follow a power law for all datasets studied. Formally, the  X  X napshot Power Law X  is: Observation 4 (Snapshot Power Law (SPL)).
 Consider the i -th node of a weighted graph, at time t ,and let out i , outw i be its out-degree and out-weight. Then where ow is the out-weight-exponent of the SPL. Similarly, for the in-degree, with in-weight-exponent iw .

We studied the snapshot plots for several time-stamps (for brevity, we only report the slopes for the final timestamp in Table 2 for all the datasets we studied). We observed that SPL exponents of a graph over time remains almost constant. In Fig. 4 (c) ((d)), the inset plot shows how the iw ( ow ) exponent changes over time (years) for the CampOrg dataset. We notice that iw and ow take values in the range [0.9-1.2] and [0.95-1.35], respectively. That is: Observation 5. (Persistence of Snapshot Power Law) The in-and out-exponents iw and ow of the SPL re-main about constant, over time.

Looking at Table 2, we observe that all SPL exponents are &gt; 1, which imply a  X  fortification effect  X  with super-linear growth. The only exception is the NetTraffic dataset. This is explained because the number of nodes N has a limit that can not be exceeded (the total IP addresses at the in-stitution of observation) (See WPL plot for NetTraffic in Fig. 5). Until N reaches that point, the slopes are iw =1.19 and ow =1.27 (again, showing a  X  X ortification effect X ).
We tracked how much weight a graph puts on at each time interval and looking at the entropy plots, we observed that the weight additions over time show self-similarity. For those weighted graphs where the edge weight is defined as the number of reoccurences of that edge, the slope of the entropy plot was greater than 0 . 95, pointing out uniformity. On the other hand, for those graphs where weight is not in terms of multiple edges but some other feature of the dataset such as the amount of donations for the FEC dataset, we observed that weight additions are more bursty, the slope being as low as 0 . 6 for the Network Traffic dataset. Fig. 5 Figure 4: Weight properties of CampOrg donations: (a)showsallthepowerlawsaswellastheWPL; the slope in (b) is  X  0 . 86 indicating bursty weight additions over time; (c) and (d) have slopes &gt; 1 ( X  X ortification effect X ), that is, that the more cam-paigns an organization supports, the superlinearly-more money it donates, and similarly, the more do-nations a candidate gets, the more average amount-per-donation is received. Inset plots on (c) and (d) show iw and ow versus time. Note they are very stable over time. (b) column shows the entropy plots for the weighted datasets we studied.  X  W values over time are also shown in insets at the bottom right corner of each figure.
 Observation 6. (Bursty/Self-Similar Weight Additions) In all our graphs, the addition of weight (  X  W ( t ) ) was self-similar, with fractal dimension ranging from  X  1 (smooth/uniform), down to 0 . 6 (bursty).
The next goal is to find a generative model that will pro-duce a social network that obeys properties observed in this work as well as properties observed in previous work. We would like it to reproduce the following properties:  X  Constant next-largest weakly connected component sizes.  X  Densification power law  X  Shrinking diameter (perhaps after a  X  X elling point X )  X  Power laws for in-and out-degree distribution
Moreover, we want an emergent generator, that will fol-low a simple, local behavior, out of which these global pat-terns will naturally emerge. Thus, we plan to have nodes arriving one at a time, and we want to design the method with which newcomers link to existing nodes, analogously to the  X  X referential attachment X  of Barabasi et. al. [3], but without the pitfalls of preferential attachment.

To achieve a long-tailed in-degree distribution, some form of preferential attachment will suffice. In order to even have Figure 5: Properties of weighted networks. Left column: weight power laws for each graph stud-ied, ( W , E d , N ;vs E ). The slopes for weight W and multi-edges E d are above 1, indicating  X  X ortifi-cation X . Right column: entropy plots for weight ad-dition. Slope away from 1 indicates burstiness (eg., 0.59 for NetTraffic ) The inset plots show the cor-responding time sequence  X  W versus time. Notice how bursty NetTraffic looks. Table 2: Power law exponents for all the weighted datasets we studied: The x-axis being the num-ber of non-duplicate edges E , w :WPLexponent, nsrc, ndst : WPL exponent for source and desti-nation nodes respectively (if the graph is unipar-tite, then nsrc is the number of all nodes), dupE : exponent for multi-edges, iw, ow :SPLexponents for indegree and outdegree of nodes, respectively. Exponents above 1 indicate fortification/superlinear growth. Last column, fd : slope of the entropy plots, or information fractal dimension. Lower fd means more burstiness. disconnected components, we allow some newcomers to be-come  X  X ridges X , that can link the GCC with an NLCC.
To achieve a power-law in the out-degree distribution, we vary one of the parameters of our model, so that it takes uniform values.
With these considerations, we present the following model, which we call the Butterfly as incoming nodes may behave as  X  X ocial butterflies X  by choosing more than one starting point, or  X  X ost X , in their interactions; meeting nodes in the vicinity of the host, out-linking to some of them, and flying away. The model uses three parameters. The first, p link determines how often a link is formed between two nodes, and it is the same for all newcomers. The others, p host and p step are  X  X riendliness X  parameters: p step decides whether the  X  X utterfly X  will take one more step in its random walk; p is the probability it will take one more host. We set p step be different for each newcomer, uniformly distributed in the range, say [0,1]. We set p host to be the same for all newcom-ers. 6 Expected number of hosts is (1 / (1  X  p host )  X  1) and ex-pected number of steps per host chosen is (1 / (1  X  p step
In the model, nodes join the network one at a time. With probability p host , an arriving node, denoted current ,picks a host at random, and is assigned a p step probability from a uniform distribution. After choosing the host, current travels in a random walk, recursively choosing at random one of the neighboring nodes (including both in-and out-links), taking each further step with probability p step .Each time current visits (or re-visits) a node, it out-links to the visited node with p link probability. Once the traveling stops, current returns to the starting state, choosing one more host with probability p host and repeating, until no new hosts are chosen. Pseudocode for the model is shown in Fig. 6.
We choose p host =0 . 5 so the expected number of hosts is 1. However, once in a while, an arriving node chooses mul-tiple hosts, allowing the possibility of two formerly discon-nected components joining X  which will reproduce the prop-erty of NLCCs remaining small.
Letting p host vary uniformly, also performed well empiri-cally.
We find that choosing the parameters as defined in the above table, the results are remarkably similar to what is displayed in real graphs. Note that the model displays a sta-ble or shrinking diameter, and that after a burning off period the second and third components demonstrate a threshold at which they do not grow further without joining the GCC.
Theorem 1. For a given host, the number of visits an arriving node forms follows power-law out-degree with expo-nent  X  2 .

Proof. Taking p host constant, the expected number of steps y that an arriving node will take is 1 1  X  p step  X  p step is the probability of stopping traveling at any time point, so the number of steps taken before stopping follows a geometric distribution with mean 1 1  X  p step , and the number of visits is the number of steps before deciding to stop X  the mean minus one.) If p step  X  Unif (0 , 1), we can do a trans-formation to find the distribution of the expected number of steps y [6]:
We represent Y = g ( X ), and the distribution over X is uniform, f X ( x ) = 1. Since the function 1 x is strictly mono-tone decreasing, then g has inverse h = g  X  1 , specifically h ( y )= 1 y .Sowehave f ( y )  X  f X ( h ( y ))  X  X  dh ( y )
So, expected number of visits follows a power law with exponent  X  2.

We believe that holding p link constant, the degree dis-tribution will follow a power law similar to the number of visits; and multi-edges and multiple hosts contribute a small amount to this factor, so empirical results perform well.
We simulated the model 10 times for 100 , 000 nodes, with p host =0 . 5and p link =0 . 3. One run X  X  results are shown in Fig. 7. For each run the model exhibited power law in-and Figure 7: Results of proposed Butterfly model ( p host =0.5, p link =0.3 p step uniform. (a) Densification power law (exponent: 1.17) (b) Stabilizing NLCCs (between 20 and 50) (c) Small/shrinking diameter (d) power laws in the PDF of in-and out-degree distributions. out-degree. Additionally, it displayed expected properties of the undirected graph X  densification and stable NLCC sizes.
For p link =0 . 3, the exponent had range (1 . 03 , 1 . 17) All oc-curring values of the exponent are within the range observed in real graphs, and have a least-squares fit of R 2 &gt; 0 . 99 in log-log scales. Moreover, contrary to the Forest Fire method [17], our generator is robust, producing realistic-looking results for a wide range of parameter values (plots omitted for space). In contrast, small deviations from rec-ommended parameter values in Forest Fire led to unrealistic densification exponents (either 1 or 2), and the model only produced a single GCC.
We believe that the Butterfly model and the observation of constant NLCC X  X  will shed light upon other research in the area, such as a recent, counter-intuitive discovery [18]: the GCC of several real graphs has no good cuts, so graph partitioning and clustering algorithms cannot help identify communities because no clear communities exist.

The main contributions of this work are the following:  X  Patterns: The discovery of several surprising patterns:  X  Generative Model: Our proposed Butterfly model
We ran extensive experiments on multiple, diverse, real graphs to identify common behaviors. We verified our ob-servations on uni-partite, as well as bi-partite graphs, from blogs, publications, movie-actor networks, and many others. Our largest graph ( CampIndiv ) had 6 million nodes and 10 million edges, with annual time-stamps. Our datasets are in the public domain, and both our observations and our Butterfly model are easily reproducible.
 This material is based upon work supported by the Na-tional Science Foundati on under Gra nts No. IIS-0534205, IIS-0705359; and under the auspices of the U.S. Depart-ment of Energy by University of California Lawrence Liver-more National Laboratory under contract N o.W-7405-ENG-48. Mary McGlohon was partially supported by a National Science Foundation Graduate Research Fellowship. Any opinions, findings, and conclusions or recommendations ex-pressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foun-dation, or other funding parties.

The authors would like to thank Christopher Neff for help with the proofs.
