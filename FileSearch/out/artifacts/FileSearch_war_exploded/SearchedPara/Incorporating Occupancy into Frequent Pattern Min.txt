 Mining interesting patterns from transaction databases has attracted a lot of research interest for more than a decade. Most of those stud-ies use frequency , the number of times a pattern appears in a trans-action database, as the key measure for pattern interestingness. In this paper, we introduce a new measure of pattern interestingness, occupancy . The measure of occupancy is motivated by some real-world pattern recommendation applications which require that any interesting pattern X should occupy a large portion of the trans-actions it appears in. Namely, for any supporting transaction t of pattern X , the number of items in X should be close to the to-tal number of items in t . In these pattern recommendation appli-cations, patterns with higher occupancy may lead to higher recall while patterns with higher frequency lead to higher precision. With the definition of occupancy we call a pattern dominant if its occu-pancy is above a user-specified threshold. Then, our task is to iden-tify the qualified patterns which are both frequent and dominant. Additionally, we also formulate the problem of mining top-k quali-fied patterns : finding the qualified patterns with the top-k values of any function (e.g. weighted sum of both occupancy and support).
The challenge to these tasks is that the monotone or anti-monotone property does not hold on occupancy. In other words, the value of occupancy does not increase or decrease monotonically when we add more items to a given itemset. Thus, we propose an algo-rithm called DOFIA (DOminant and Frequent Itemset mining Al-gorithm), which explores the upper bound properties on occupancy to reduce the search process. The tradeoff between bound tightness and computational complexity is also systematically addressed. Fi-nally, we show the effectiveness of DOFIA in a real-world applica-tion on print-area recommendation for Web pages, and also demon-strate the efficiency of DOFIA on several large synthetic data sets. H.2.8 [ Database Management ]: Database Applications X  Data Min-ing This work was done when Linpeng and Lei were visiting HP Labs China.
 Frequent pattern mining, Constraint-based mining, Frequent and Dominant pattern, DOFIA
Frequent pattern mining has been attracting abundant research interest for over a decade. Most of those studies use frequency , namely the number of times a pattern appears in a transaction database, as the key measure for pattern interestingness. In this paper we in-troduce a new measure, occupancy , which considers the degree that a pattern occupies the items in its supporting transactions. Specif-ically, we prefer the pattern that occupies a large portion of the transactions it appears in. This new measure of occupancy is moti-vated by some real-world applications of pattern recommendation and we describe two of the such applications below.

The first application is on print-area recommendation for Web pages. We often find that the printout generated by a Web browser X  X  print function is far from satisfactory since it usually contains a large portion of irrelevant content (e.g., navigation menu, advertise-ments, and related links). To solve this problem, HP provides Smart Print 1 that contains a user-friendly interface so that a user can eas-ily select her interested print areas. Such selections are stored in print logs with user consent. If we view each content clip (a se-lected content area) as an item and all the selected clips by a user on a given Web page as a transaction of items, the print log data from all users form a transaction database. Our task is to recom-mend an itemset (i.e., a set of content clips) in a given Web page to users based on this database. Naturally, the itemset we recom-mend should occur frequently to reflect the interests of most users. Equally important is the completeness of the itemset: it should oc-cupy a large portion of the transactions it appears in so that the user would not feel that the recommendation is missing too much relevant content.

Another motivating application is on investment portfolio rec-ommendation. Assume that we have a transaction database that contains a large set of high-quality and diversified investment port-folios. Each transaction represents the set of financial assets (e.g., stocks, bonds,funds etc.) owned by an experienced investor. Our goal is to mine the  X  X nteresting patterns" (i.e., high-quality and diversified patterns) from the database to recommend to new in-vestors. Similarly, we prefer the investment patterns that appear frequently in the database. More importantly, a good investment portfolio usually works as an entirety to achieve investment bal-ance and reduce risks. So we would expect that a good investment pattern should cover a large portion of the transactions in which it appears. For example, we have two patterns X,Y of equal fre-
A Web browser extension, www.hp.com/go/smartprint quency. If X covers 90% assets of its supporting transactions while Y only covers 30% , it is natural to consider X as a much better in-vestment pattern. Thus, the occupancy of a pattern is very critical to this application.

The commonality of the above two applications is that the set of items in each transaction works as an entirety for a task and thus making occupancy as important a factor as frequency for rec-ommending interesting patterns. In these applications, occupancy becomes another pattern interestingness measure which is an in-dispensable complement to frequency (or support): we consider a pattern interesting if it is not only frequent, but also as complete as possible in its supporting transactions. Intuitively, the support of a recommended pattern correlates to the recommendation precision while its occupancy is related to the recommendation recall.
We show that the value of occupancy does not increase or de-crease monotonically when we add more items to a given itemset. As a result, previous techniques for pruning the search space for frequent itemset mining based on the anti-monotonicity of support do not apply in our setting. We explore the properties for the upper bounds of occupancy and quality (the weighted sum of support and occupancy) for various patterns and use the upper bound to prune the search process for high-efficient qualified pattern mining. The contributions of our work can be summarized as follows:  X  We introduce a new interestingness measure occupancy for pattern mining problems. It is an indispensable complement to the widely-studied measure of support when the items in a trans-action serve as a whole for certain tasks. We formulate the problem of mining top-k qualified patterns which maximize any increasing function of support and occupancy. In this study the weighted sum of support and occupancy is adopted as a show case.  X  We propose an algorithm called DOFIA (DOminant and Fre-quent Itemset mining Algorithm) to solve the problem of qualified pattern mining. In DOFIA, we explore the properties on the upper bound of occupancy for the patterns to prune the search process for high-efficient pattern mining. Specifically, we propose two upper bounds on occupancy for any given itemset X and its supersets in the search tree. The first bound is computationally efficient, while the second is proved to be the tightest bound with certain input con-straint. We also show techniques to achieve tradeoff between these two bounds.  X  We demonstrate the importance of applying occupancy mea-sure in pattern recommendation applications and the effectiveness of DOFIA through a real-world application of print-area recom-mendation for Web pages using real data. We show the introduction of occupancy results in significant improvement on the quality of the recommendation and the high performance of DOFIA in find-ing the top quality patterns.  X  We systematically evaluate the efficiency of DOFIA on some large synthetic data sets. Specifically, we evaluate the impact on the efficiency of the algorithm by varying the transaction database (i.e., the number of transactions, the average length of transactions, etc.), the parameter settings (i.e.,  X  ,  X  , etc.), and the different strategies used in DOFIA.

The rest of the paper is organized as follows. We first present the formulation of the problem in Section 2. In Section 3 we give the overview of the proposed algorithm DOFIA. The details of DOFIA, especially on how to calculate the upper bounds on occupancy and quality, are discussed in Section 4. We report the empirical study to show the effectiveness and efficiency of DOFIA in Sections 5 and 6. We present the related works in Section 7 and conclude the paper in Section 8.
In this section we first give some preliminaries in pattern mining and propose the definitions of occupancy. Then, we formulate the qualified pattern mining problems which consider both support and occupancy.
A transaction database is a set of transactions, where each trans-action is a set of items. Let I be the complete set of distinct items and T be the complete set of transactions. Any non-empty set of items is called an itemset and any set of transactions is called a transaction set . The transactions that contain all the items in an itemset X are the supporting transactions of X , denoted as The frequency of an itemset X (denoted as freq ( X ) ) is the num-ber of transactions in T X . The definitions of support and frequent itemset are adopted from [1].

In the motivating applications in Section 1, the itemset we intend to find should occupy a large portion of the transactions in which it appears. We can calculate the occupancy degree as follows. For an itemset X we identify all its supporting transactions T each transaction t  X  X  X we calculate the ratio of | X | | t | aggregate these ratios to compute a single value of occupancy for X . In this paper we focus on the average of these ratios while other aggregate functions such as quantile or min may also be considered. The definition of occupancy is given as follows.
 Definition 1 (Occupancy): Formally, the occupancy of an itemset X is defined as where average () is the average function of all the values in the set.

Then, we can use two different average functions, harmonic av-erage and arithmetic average , in the above definition. Due to space limitations, we only consider the harmonic average in this paper, but similar techniques can also be employed when considering arith-metic average 2 .
 Definition 2 (Harmonic occupancy): The harmonic average of a set of numbers A is HAverage ( A )= | A | occupancy of an itemset X is defined as
It is clear that the occupancy of an itemset X is the average ratio of the occurrences of the items in X to the number of the items in the transaction it appears in. The high value of the occupancy indicates that besides the items in X there are only a small number of items left inside the supporting transactions of X . Let us take the transaction database in Table 1 3 as an example. We calculate the harmonic occupancy of the two itemsets I 1 = { 2 , 7 , 14 , 20 I = { 2 , 7 , 14 , 15 , 20 } as follows. The supporting transactions of I I are { t 1 ,t 2 ,t 4 } .
The comparison on effectiveness between harmonic and arith-metic average is out of the scope of this paper.
This is a real world example taken from the HP X  X  print log database.
One may think that the itemset containing more items leads to a bigger value of occupancy. However, it is not always true. Con-sider itemsets I 1 and I 2 . Even though I 1 I 2 ,wehave  X   X 
H ( I 2 ) . The reason is that I 2 only appears in large transactions where it only occupies a small fraction, while I 1 appears in many smaller transactions where it occupies a large fraction. Thus, occu-pancy does not always increase monotonically when we add more items to an itemset. Similarly, we can show that occupancy does not always decrease monotonically when we add more items to an itemset either. This non-monotonic property of occupancy is in contrast to that of support in frequent pattern mining. Definition 3 (Dominant Itemset): For a given minimum occupancy threshold  X  ( 0 &lt; X   X  1 ), X is said to be dominant if  X  ( X )
With the definition of support and occupancy we can measure the quality of an itemset by combining these two factors. Definition 4 (Quality): The quality of an itemset X is defined as q ( X )=  X  ( X )+  X  X  ( X ) ,where  X  (  X  ) denotes the (relative) sup-port of a transaction, occupancy weight 0  X   X &lt; +  X  is a user defined parameter to capture the relative importance of support and occupancy.

Here we use the weighted sum of support and occupancy as the quality. But it should be noted that any other functions, such as the harmonic average (similar to the F1 score), the sum of logarithms (similar to block size proposed in [8]) can be used to combine the two values of support and occupa ncy. Additionally, the proposed algorithms in this paper are independent of this function. Definition 5 (Qualified Itemset): For a given minimum support threshold  X  and a minimum occupancy threshold  X  ( 0 &lt; X , X  1 ), X is said to be qualified if  X  ( X )  X   X  and  X  ( X )
Some pattern recommendation applications require that interest-ing patterns should be both frequent and dominant. On one hand, if a pattern X is frequent it means that there are enough cases such a pattern appears in the transaction database. Thus, it improves the recommendation precision. On the other hand, if X is dominant it indicates that the recommendation of X is complete enough. Thus, it guarantees the recommendation recall. Therefore, with the defi-nition of s upport and occupancy, we form ulate the pr oblem of min-ing qualified patterns as follows.

Mining Qualified Patterns . This task is to find all the quali-fied patterns (which are both frequent and dominant) in a transac-tion database for the given support threshold  X  and the occupancy threshold  X  .

Additionally, among all the qualified patterns we also aim to find the pattern with the maximal quality value for recommendation. Formally, it can be formulated as follows.

Top Qualified Pattern . The top qualified pattern X is defined as the qualified pattern with the maximal quality value: Note that there may be multiple top qualified patterns if there are ties in the maximum quality values.

There are three parameters in the definition of the top qualified pattern, namely  X ,  X ,  X  . If there is no itemset that is both frequent and dominant with respect to  X ,  X  , the top qualified pattern does not exist and a valid algorithm will not output any result since no non-empty pattern exists that meets the quality requirements. Parameter  X  , the occupancy weight, is a user defined parameter to capture the relative importance of support and occupancy.

In the rest of the paper, we will primarily focus on mining top (i.e., k =1 ) qualified pattern first. We then show that the solution to top qualified pattern mining can be easily extended to solve the problem of mining top-k qualified patterns for k&gt; 1 .
One may think that dominant patterns with high occupancy usu-ally contain a large number of items and thus methods based on Maximal Frequent Itemset mining may be adopted for finding top-k qualified patterns. (An itemset X is a maximal frequent itemset if X is frequent and no superset of X is frequent [6]). Given a support threshold we can get multip le maximal frequent itemsets, among which we can select the one with the largest number of items as the top qualified pattern. Is this a valid algorithm for mining top qualified pattern? The answer is  X  X o" for the following reasons.
First, in methods based on mining maximal frequent itemsets, the number of items in a pattern is used as a measure in pattern se-lection. Compared with the concept of occupancy, this is actually the absolute size of an itemset while occupancy is the relative size of an itemset to the number of items in its supporting transactions. Thus, it is possible that the maximal frequent itemsets selected by such methods have very low occupancy, even lower than the min-imal occupancy threshold, thus leading to a low recall in recom-mendation. For example, when  X  =0 . 3 , I 2 = { 2 , 7 , 14 , 15 , 20 is a maximal frequent itemset for the transaction database in Ta-ble 1. However, its occupancy is much lower than its subset I { 2 , 7 , 14 , 20 } as described earlier. Secondly, in mining top quali-fied pattern a weighted sum of both support and occupancy is used as the interestingness measure, which may lead to better recom-mendation performance compared to the patterns selected by meth-ods based on maximal frequent itemsets. The experimental results in Section 5 further validate our analysis here.

In the next section we will present our algorithm for the top qual-ified pattern mining problem.
The straightforward solution to the pattern mining problem is to first generate all the frequent itemsets, calculate the occupancy value for each frequent itemset, and then select the qualified itemset with maximum quality value. In this section we will show how Figure 1: The lexicographic subset tree for the transaction database in Table 2. The solid line shows the search space of DOFIA, while the dashed line shows the search space for fre-quent pattern mining.  X  =0 . 4 , X  =0 . 3 , X  =1 . the properties on occupancy and quality measures can be injected deeply into the search process and greatly prune the search space.
Pattern mining algorithms usually adopt the lexicographic sub-set tree to guide the search process. See Figure 1 as an example for four items a, b, c, d . The top element in the tree is the empty set and each lower level l contains all the l -itemsets (itemsets with exactly l items). The l -itemsets are ordered lexicographically on each level. Generating children in this manner enumerates all the distinct itemsets to be considered without redundancy. As there are 4 items, there are in total 2 4 =16 itemsets for consideration. Thus, in the lexicographic subset tree there are 16 nodes, each of which corresponds to an itemset.

Frequent pattern mining usually leverages the monotonic decreas-ing property of support values when adding more items to a given itemset. That is, if an itemset X is not frequent then all the super-sets of X are not frequent either. Thus, the traversal in the tree is to find a cut (the dashed line in Figure 1) such that all the nodes (itemsets) above the cut are frequent, and all the nodes below the line are infrequent.

In this section we will show how to explore the properties on oc-cupancy and quality to further prune the search space in the search tree. Specifically, given the root of a subtree we can estimate the upper bounds of the occupancy and qua lity values for all the nodes in this subtree. In other words, the occupancy and quality of any node in the given subtree will be no bigger than its upper bounds, respectively. If the upper bound on the occupancy is smaller than the occupancy threshold  X  , this subtree should be pruned. Also, we can maintain the current biggest quality value in the search process so far, denoted by q  X  , and all subtrees with the upper bounds less than q  X  should be pruned.
 Take the subtree with the root { b } in Figure 1 as an example. We can give an upper bound of the quality for all the nodes in the subtree, including { b } , { bc } , { bd } , { bcd } . Assume we have al-ready found { ac } is the node with the highest quality 1.467 so far, which is bigger than the upper bound for the subtree rooted at Thus, subtree { b } can be pruned. The solid line (which is above the dashed one) in Figure 1 is the cut line for pruning the search space for mining top qualified pattern. In this example, the search space when using only the frequency constraint for pruning has 12 nodes while the search space of DOFIA has only 5 nodes. The search space is greatly reduced by pruning using the upper bounds for occupancy and quality.

In Figure 1 the children of a node in the subset tree are ordered lexicographically on each level. It is worth mentioning that the order of these children also affects the algorithm efficiency. Ideally, we prefer to visit the nodes with the bigger quality values as early as possible since the big quality value can be used to prune the nodes whose quality upper bounds are less than it. On the other hand, we hope that the proposed upper bounds for occupancy and quality are as close as possible to the ground-truth val ues for a given subtree, which also helps to prune the search space. We consider two kinds of orders for the children of a node, i.e. the ascending and descending order of itemset support. Some experiments show that usually the ascending support order is more efficient than the other one (at least on the transaction databases used in the experiments). It seems the  X  X ail first principle X  applies in this case. The analysis on this observation is omitted.

Algorithm 1: DOFIA_DFS
Algorithm 1 is the pattern mining process of a Depth-First-Search (DFS) with the pruning techniques. Note that since each node in the search tree uniquely corresponds to an itemset, we use the terms  X  X ode X  and  X  X temset X  interchangeably here. At currentNode we first compare its quality with the top qualified node found so far. Then, we check any child, denoted by node ,of currentNode . If node is not frequent, or its occupancy upper bound is smaller than  X  , or its quality upper bound is smaller than the current maxi-mal quality value, then node is pruned. Otherwise, we recursively check node .

So far we have omitted the most challenging part in the algo-rithm: how to compute the upper bounds on occupanc y and quality. Since the pruning of the search process is at the cost of computing these upper bounds, they should be computed efficiently. We de-scribe its details in the next section.
In this section we will show how to efficiently compute the upper bounds of the harmonic occupancy and its quality. First, We give an overview of these upper bounds in Section 4.1.
We give the notations which will be widely used in this study as follows. For any subtree, let X be the itemset for the subtree root (the root itemset), Y be the itemset including all the new items which will be extended in all the descendants of this subtree (the extension itemset). For example, for the subtree root X = in Figure 1 there are two new items c, d which appear in the de-scendants. Thus, Y = { cd } . With the extension itemset Y ,we can get the following two vectors EL (Extension Length vector) and TL (Transaction Length vector) such that EL ( i )= | t and TL ( i )= | t i | ,where t i is any transaction in T X ple, for the root set X = { ab } with extension set Y = { supporting transactions are T X = t 2 ,t 3 ,t 4 ,t 5 , and thus EL = | t 2  X  Y | , | t 3  X  Y | , | t 4  X  Y | , | t 5  X  Y | = 0 , 1 , 1 , 2 ,and TL = | t denote the frequency of an itemset W in the subtree rooted at X , and v to denote how many items are in W aside from the items in X ,i.e. v = | W  X  X | . These notations are summarized in Table 3. Furthermore, we will frequently need to sort EL , TL . For a vector V ( V is EL or TL in our case), V  X  ( V  X  ) is the vector obtained by sorting V in ascending (descending) order. So EL  X  (1) will be the largest value in EL ,and TL  X  ( i ) will be the i -th smallest value in TL .

We aim to estimate the occ upancy and qua lity upper bounds of all the nodes in the subtree of X . In other words, the occupancy (quality) of any node in the subtree of X will be less than this oc-cupancy (qua lity) upper bound. The basic idea is briefly described as follows.

First, we assume that we know the frequency u of any item-set W  X  ( X  X  Y ) in the subtree of X . Then, we will propose F ( u, | X | , EL , TL ) such that It is worth mentioning that the computation of F only involves u, |
X | , EL , TL . Using more detailed information in T X would surely lead to better bounds, but it would also make the computation more costly. Also note that here F is dependent on u , the frequency of W .

Then, we will show F ( u, | X | , EL , TL ) is not increasing with the increase of u , namely We call Equation 3 the anti-monotonicity property of the occupancy upper bound with respect to u .

Since it is required that W be frequent, its frequency u should not be less than the minimum frequency threshold freq min minimal integer which is not smaller than  X   X |T| . Thus, we have the following theorem.
 Theorem 1 (Occupancy Upper Bound): For any itemset W in the subtree of X Proof: The conclusion holds if F ( u, | X | , EL , TL ) satisfies Inequal-ities (2) and (3).
 Note that in Theorem 1 it is not required to know the frequency of W . Thus, this is the occupancy upper bound of any node in the subtree of X . Next, for the upper bound of quality we also have Theorem 2 (Quality Upper Bound): For any itemset W in the sub-tree of X Proof: For any W in the subtree of X with the frequency u , Then, the conclusion holds if F ( u, | X | , EL , TL ) satisfies Inequal-ity (2).
 Theorem 2 gives t he quality upper bound of any node in the sub-tree of X . It should be noted that the result is independent of the function to combine support and occupancy. Any other functions can be used here an d the quality upper bounds can be computed in similar ways.
 In the following we will propose the F functions which satisfy Inequalities (2) and (3) for the harmonic occupancy.
For harmonic occupancy we will propose two instances of F which satisfy Inequalities (2) and (3). We will show that the first F is more efficient, however, less tight than the second one. We also theoretically prove that the second F gives the tightest upper bound if only the values of | X | , EL , TL are used for the compu-tation. Finally, we show how to achieve the tradeoff between the bound tightness and computational efficiency. We propose F ( u, | X | , EL , TL ) function as follows. Next, We propose Properties 1 and 2 to show that the F function in Equation (7) satisfies Inequalities (2) and (3).
 Property 1: For any itemset W in the subtree of X ,let u be the frequency of W . Then, the occupancy of W satisfies that Proof: Let X  X  consider the harmonic occupancy of W . Note that Inequality (11) is due to the fact that since |T there are at least u transactions whose extension lengths are not smaller than | W  X  X | ,andso | W  X  X | can be no larger than the smallest of these u lengths.
 Property 2: F ( u +1 , | X | , EL , TL )  X  F ( u, | X | , EL , TL ) . Proof:
Inequality (15) comes from EL  X  ( u +1)  X  EL  X  ( u ) .Inequality (16) comes from the property that for any a 1 ,a 2  X  0 and b 1
With Properties 1 and 2 we can also easily prove that the re-sultsinTheorems1and2holdfor F ( u, | X | , EL , TL ) . Then, Al-gorithm 2 gives the pseudo code for computing t he quality upper bound in Theorem 2 with F ( u, | X | , EL , TL ) .

The complexity of Algorithm 2 is O ( n + TL  X  (1)) .Wefirstuse the time of O ( n + TL  X  (1)) for sorting EL , TL with counting sort algorithm ,andthen O ( n ) time for the loop in Line 5.
Note that if any other function is used in the quality definition to combine support and occupancy w e can substitute the equation of u/ |T | +  X   X  occu in Line 9 with the used function to get the right answer.
 Algorithm 2: The quality upper bound based on
F ( u, | X | , EL , TL )
As mentioned before, F ( u, | X | , EL , TL ) has the parameter u , frequency for any itemset W in the subtree of X .Usinganew parameter v = | W  X  Y | = | W  X  X | , i.e., the number of items in W aside from those in X , we may obtain a stronger upper bound. Property 3: Let
F ( u, v, | X | , EL , TL )= u Then for any itemset W in the subtree of X with |T W | = u and | W  X  Y | = v ,wehave  X  H ( W )  X  F ( u, v, | X | , EL , TL ) . Furthermore, for any itemset W in the subtree of X with |T u (and no constraint on | W  X  Y | ), we have Proof: For any itemset W as described in Property 3, we have Note that T W are the supporting transactions of W and |T u .Since X  X  W , by the anti-monotonicity of frequent item-sets, T W  X  X  X .Since | W  X  Y | = v ,forany t  X  X  W , | t  X  Y | X | W  X  Y | = v . Combining these two factors, t  X  X   X  H ( W )= u
For any itemsets W in the subtree with |T W | = u ,itmustbe the case that 0  X | W  X  Y | X  EL  X  ( u ) . We unify the bounds F ( u, v, | X | , EL , TL ) over v and then have Property 4: F ( u +1 , | X | , EL , TL )  X  F ( u, | X | , EL , TL ) . Here, the definition of F ( u, | X | , EL , TL ) is given in Equation (20). Proof: By the definition of F ( u, v, | X | , EL , TL ) , similar to the proof of Inequality (16), we have for any u, v .
 Since EL  X  ( u +1)  X  EL  X  ( u ) ,wehave
With Properties 3 and 4 we can also easily prove that Theorems 1 and 2 also hold for F ( u, | X | , EL , TL ) .
 Remark 1: The Functions of F and F proposed in Property 1 and Property 3 can be both improved by a small technique. If Y | = | Y | for some t  X  X  X ,then Y  X  t . Thus, t is a supporting transaction for any W in the subtree of X . This observation can further improve the two bounds above. We omit details because it would make the formulae too complicated.
 Algorithm 3: The quality upper bound based on
F ( u, v, | X | , EL , TL )
Algorithm 3 shows the pseudo code for computing the quality upper bound based on F ( u, v, | X | , EL , TL ) . The time complexity Quality Upper Bound Complexity Table 4: The complexity of different estimation methods of quality upper bound is O ( n + TL  X  (1) + n  X  EL  X  ( freq min )) ,inwhich O ( n + TL is for sorting the transactions (with counting sort algorithm) and O ( n  X  EL  X  ( freq min )) for the double loop in Line 4 and Line 6.
Also, we theoretically prove that F is the tightest upper bound if only the values of | X | , EL and TL are used in the computation. Namely, we have the following theorem and its proof is omitted. Theorem 3: F ( u, | X | , EL , TL ) is the tightest upper bound for har-monic occupancy of any node in the subtree of X with u supporting transactions if we only use the values of | X | , EL , TL to compute the bound.
 Corollary 1: max 1  X  u  X |T X | u |T | +  X F ( u, | X | , EL , TL ) is the tightest upper bound of the harmoni c quality (harmonic occupancy used inside) of any node in the subtree of X if we only use the values of | X | , EL , TL to compute the bound.
We have proposed two quality bounds based on harmonic oc-cupancy so far. Their complexity is summarized in Table 4.2.3. Although F is provably tighter than F ,when EL  X  (1) is large, it can also take much more time than F and possibly becomes the computing bottleneck . To alleviate this situation, we propose a new technique that achieves balance between the bound tightness and computational efficiency. The basic idea is as follows. In-stead of enumerating every possible value of EL in the range of [0 , EL  X  ( freq min )] , we split this large interval into m smaller inter-vals [ v 0 ,v 1  X  1] ,  X  X  X  , [ v m  X  1 ,v m  X  1] ( v 0 =0 ,v 1 ).

For each interval [ v k  X  1 ,v k  X  1] , using the assumption that v |
W  X  X | &lt;v k , we obtain a tighter bound on occupancy in Prop-erty 5. In the end, we unify the m bounds and get a final re-sult. The time complexity fo r computing such a quality bound is O ( n + TL  X  (1) + mn ) . Using a proper value for m , we achieve the tradeoff between the efficiency and effectiveness of the bound. The complexity for these three methods are summarized in Table 4. Property 5: For any itemset W in the subtree of X ,let u be the frequency of W . Assume v k  X | W  X  X | &lt;v k +1 , then the har-monic occupancy of W satisfies that where t l i is any supporting transaction of X .
 The proof is omitted here. Then, we have the following theorems. Theorem 4: Let u = freq min be the minimum frequency thresh-old. For any integers 0= v 0 &lt;v 1 &lt;  X  X  X  &lt;v m = EL is the upper bound on harmonic occupancy for any frequent W in the subtree of X .And is the upper bound on quality for any such W .
In this section we evaluate the effectiveness of occupancy in a real-world application of print-area recommendation. Here, as-sume that we have the log database which records how previous users clipped the Web pages from a Web site. Each transaction refers a set of content clips selected on a Web page. Given a Web page from the same Web site, we aim to recommend the informa-tive clips for this Web page. More specifically, let I be the com-plete set of distinct clips in the database. For a given Web page we can get a set Q  X  X  of clips which are included in this Web page (how to determine Q is omitted). Thus, our task is to select a subset of Q for the clip recommendation. By mining top qualified itemset the recommended itemset is the one F  X  Q which has the maxi-mal quality value among the qualified itemsets (for a given support threshold  X  and a occupancy threshold  X  ).

To show the effectiveness of the proposed method we manually labeled the ground-truth of print-areas on the 2000 Web pages from the 100 major print-worthy Web sites (20 pages for each Web site).
We compare the proposed solution with the maximal frequent itemset based method (introduced in Section 2.3). Specifically, we can first generate all the maximal frequent itemsets and among them select the one with the largest number of items for recommen-dation.

For the 20 Web pages from a Web site, we use leave-one-out cross validation to evaluate the recommendation accuracy, i.e. we iteratively select one page as query and the log data on the left 19 Web pages are used to generate the transaction database for rec-ommendation. A recommendation result actually refers to a set of content clips on the given Web page. Thus, we can evaluate its effectiveness by calculating the overlap area between the recom-mended clips and the ground truth on the query page. Then, with the overlap area we can calculate the precision P , recall R and F 1 score of the recommendation in terms of area size. Specifically
Where A G is the clipping region of ground truth, A R is the clip-ping region of the recommendation result and | ... | denotes the region size. If the precision is less than 1, it means that we need to remove some areas from the recommendation. If the recall is less than 1, it indicates that we need to add some contents to get the ex-act clipping areas. Then, we can average these these performance values over the 2000 Web pages to get the average performance.
The experiments in this section try to answer the following ques-tions: (1) Does the concept of occupancy help to improve the rec-ommendation performance compared with the baseline method? (2) How does the occupancy weight  X  affect the recommendation performance? The results of the baseline method are summarized in Table 5. The results of DOFIA are show in Table 6. Each entry in Tables 5 and 6 is the arithmetic average of the values (precision, recall and F 1 ) over the 2000 Web pages. Since the F 1 value is the harmonic average of precision and recall, the average F 1 value over all those Web pages may be less than the average values of both precision and recall. For example, as shown in Table 6 when  X  =0 the av-erage F 1 value is 79.79%, which is smaller than the corresponding average values of precision and recall.

Note that for the baseline method, the maximal F 1 score is 90 . 56% (when  X  =0 . 1 ), while DOFIA achieves a maximal F 1 score of 93 . 8% (when  X  =6 . 0 ). So the improvement on recommendation accuracy is clear.
 Theroleof  X  in DOFIA to this application is quite interesting. Intuitively,  X  represents the emphasis we put on occupancy. A higher emphasis on occupancy is expected to lead to a better recall. Such is indeed the case X  X hen  X  increases from 0 . 0 to around 5 . 0 , recommendation recall increases significantly for the models. In-terestingly, recommendation precision increases at the same time. The main reason is that with the increase of  X  the quality value (considering both support and occupancy) may lead to better pat-terns whose area intersection with the ground truth have both better precision and better recall (see Equation (30)). However, when  X  is too large, the performance of DOFIA deteriorates. Too much emphasis on occupancy tends to find patterns with a very small support just above the threshold  X  and the recommendation quality will naturally drop greatly.
In this section we present the empirical evaluation on the effi-ciency of the proposed algorithm DOFIA over the large synthetic data sets. Specifically, we compare its running time with the base-line method to our problem. Here, the baseline method is to find all frequent itemsets first, compute the occupancy and quality for them, and then output top-k qualified ones. The implementation of MAFIA [6] includes a fast algorithm for frequent pattern mining, which is adopted in this comparison. We use MAFIA to find all the closed frequent itemsets, compute their quality values in the search process, and use a priority queue to maintain the top-k qualified itemsets. In practice, we find that the time to compute quality val-ues and maintain the priority queue is actually negligible compared to the search process, so in the experiments below, we only show the time MAFIA used to find all the closed frequent itemsets, which is a lower bound for the time spent by the baseline. To abuse the notation a little bit, we still call the baseline method MAFIA. Our method, DOFIA, leverages the properties in Section 3 to further prune the search space, thus may achieve better efficiency.
The data sets used in this section are generated with the IBM synthetic data generator for itemset patterns [2]. We evaluate the efficiency on the data sets with different characteristics. The main parameters to generate the data include N : the number of trans-actions, L : the average length of transactions, I : the number of distinct items, PL : the average length of patterns, PN : the num-ber of patterns. In our experiments, the default parameters for data generation are N = 50000 ,I = 1000 ,L =20 ,I = 1000 ,PL = 5 ,PN = 100 . In Section 6.1, We will adjust one parameter while fixing all the others to generate a series of data sets and show the efficiency changes. Only experiments on N and L are presented, and other parameters do not have much impact on running time of the algorithms when their values are within a reasonable range.
In addition, we also check the performance changes with dif-ferent settings of problem parameters, including: the frequency threshold,  X  ; the occupancy threshold,  X  ; the number of top qual-ified itemsets we are searching for, k . The default values for these parameters are  X  =0 . 005 , X  =0 . 5 , X  =5 ,k =5 . Similarly, we will adjust one parameter while fixing all the others to see the efficiency changes.
 Table 5: The recommendation performance of the maximum frequent itemsets based method Table 6: The recommendation performance (  X  =0 . 05 and  X  =0 . 1 ) Figure 2: The effects of the number of transactions on MAFIA and DOFIA
Finally, we will compare the tradeoff between computational ef-ficiency and bound tightness. By default, we use the upper bounds proposed in Section 4.2.1.

The experiments were performed on a Windows 7 laptop with quad core Intel i5-540M processor and 4 GB of main memory. The number of transactions . Here, we generate a database of N = 10000 transactions and scale it up by vertical concatenation of the database. The results are shown in Figure 2, including the running time and the number of nodes in the subset tree searched by MAFIA and DOFIA. Note that in this experiments we only du-plicate the database to increase its size. Thus, the number of nodes visited in the subset tree are expected to stay unchanged. As can be seen from Figure 2(a), DOFIA only searches about 1 . 4% nodes of those searched by MAFIA. With respect to running time, DOFIA X  X  running time grows linearly, from 2 . 45 seconds for 10000 transac-tions to 10 . 34 seconds for 50000 transactions. What is interesting is that MAFIA X  X  running time remains stable when the number of transactions grows. After careful investigation, we think it is due to the extreme efficiency of bit operators used extensively by MAFIA. However, since it takes MAFIA about 195 seconds to run the ex-periment for each data set, DOFIA is still much faster.
The average length of transactions . Here, we vary the av-erage length of transactions. With the number of items growing in each transaction, the length of interesting patterns also grows. So we expect an exponentially growing number of frequent item-sets. Without proper pruning, MAFIA obviously cannot handle such cases. As shown in Figure 3, although it is faster than DOFIA when L =10 , it becomes very slow as L grows larger, taking more than 10 6 seconds when L  X  25 . On the hand, with the help of efficient pruning on occupancy a nd quality, DOFIA X  X  running time grows smoothly, from 1 . 22 seconds for L =10 to 5 . 88 seconds for L =30 . Figure 3: The effects of the average length of transactions on MAFIA and DOFIA Figure 4: The effects of the minimum frequency threshold on MAFIA and DOFIA
The frequency threshold . In practice, it is often desirable to have a low frequency threshold in order to detect more diverse patterns. However, with the lowering of frequency also comes the problem of too many frequent patterns and long running time. As seen in Figure 4, although MA FIA is just a little slower than DOFIA when frequency threshold  X  =0 . 8% , it running time grows quickly with the decrease on  X  , and takes longer than 10000 sec-onds when  X  =0 . 2% . On the other hand, DOFIA remains rel-atively efficient even at very low frequency threshold, due to the pruning on occupancy and quality.

The occupancy threshold . As shown in Figure 5, with the de-crease of the occupancy threshold  X  , the running time and the num-ber of the visited nodes increases moderately for DOFIA. As beta  X  decreases from 0 . 5 to 0 . 1 , the number of nodes searched increases by 40 . 6% and the running time increases by 11 . 1% . One might expect that the increase in running time is exponential, but since we are doing the top-k qualified search, the most qualified nodes DOFIA has encountered helps a lot in reducing the search space, even if we set a low value in occupancy threshold. This observa-tion gives us a lot of flexibility in choosin g a proper value for  X  .
The occupancy weight parameter . The occupancy weight pa-rameter  X  reflects the priority we put on occupancy. Here, we em-Figure 5: The effects of the minimum occupancy threshold on DOFIA Figure 6: The effects of the occupancy weight parameter on DOFIA pirically test DOFIA X  X  performance when we vary  X  . As can be seen from Figure 6, with the increase of  X  from 0 to 2 , the number of nodes visited by DOFIA increased by 80% , and the running time increased by 17% . The increase is mainly due to the fact that when  X  is small the quality is dominated by its support, thus the high-frequency itemset with a small number of items will be output very fast. When  X  becomes larger, it has to visit much more itemsets with high occupancy. When  X &gt; 1 , the number of nodes visited and running time converges because occupancy is already playing the major role here, and thus the increase on  X  has little effect on the behavior of the algorithm.

Top k . In practice, we often want to mine more than just the top few qualified patterns. With more patterns we can even do ranking on these patterns and find a set of diverse and high-quality itemsets. Here, we increase k to check the performance of DOFIA. As can be seen from Figure 7, though the number nodes grows about 300% when k increases from 1 to 200 , the running time only increases moderately by about 40% .
In section 4.2.3 we proposed a technique that achieves tradeoff between bound tightness and computational efficiency. Specifi-cally, instead of enumerating each possible value of | W  X  the range of [0 , EL  X  ( freq min )] as F does, we suggest to split the large interval into smaller intervals [ v 0 ,v 1  X  1] ,  X  X  X  1] ,( v 0 =0 ,v K = EL  X  ( freq min )+1 ).

Figure 8 shows the effect of this technique in one of our synthetic data sets. The x -axis shows the  X  X nterval length X , i.e. v the y -axis shows the number of nodes searched and the running time in the two figures respectively. As can be seen, smaller the interval length, tighter the bound and fewer the nodes searched. In the case where the interval length is 1 , only 60% nodes are searched compared to the case where the interval length is 13 .However,the shortest running time does not occur when the bound is tightest, since the computation is too costly. In this case, the algorithm is fastest when the interval length is 7 . Figure 8: Tradeoff between computing efficiency and bound tightness
Frequent pattern mining [1] has been well recognized to be fun-damental to many important data mining tasks. There is a great amount of work that studies efficient mining of frequent patterns [11, 9, 6, 12], and we refer to [10] as a recent review on this field. These algorithms can be classified into mining frequent patterns [11, 9], frequent maximal patterns [6], and frequent closed patterns [12]. To reduce the number of frequent patterns some interestingness measures and constraints are proposed [13, 4, 5, 8] along with al-gorithms to implement them efficiently. Recently, graphical mod-els[16] and compression[15] have also been proposed to approxi-mate the frequent itemset with a minimal number of rules or pat-terns.

The concept of occupancy proposed in this paper can be viewed as a new interesting measure and constraint. It can be seen as the relative size of a pattern to its supporting transactions rather than the absolute size of it, and might be more meaningful in many applications. After proposing the concept of occupancy, we then formulate the problem of mining top-k qualified patterns which maximize the weighted sum of support and occupancy. Empiri-cal tests on web print recommendation shows that the top quali-fied patterns can significantly improve the recommendation results when the weight on occupancy is chosen properly.

One work very similar to the spirits of ours is [17], where Wang et al. formulated the problem of finding the top-k frequent itemsets with their sizes no smaller than a threshold. Here we should note the difference between our work and theirs. First, [17] used the ab-solute size of an itemset as a constraint, while we use occupancy, the relative size of an itemset to its supporting transactions. As ar-gued before, in many cases occupancy might be a more reasonable constraint. Besides, since occupancy is a normalized value, it also makes the tuning easier. Second, [17] tried to find the top-k fre-quent itemset, so frequency was used as the quality measure. In our work we define quality as the weighted sum of support and oc-cupancy, which might be more appropriate. In another work [8], Gade et al. proposed to maximize the product of itemset size and its frequency. Again, occupancy might be a better measure than ab-solute itemset size. Recent works [7, 14] have also proposed meth-ods to deal with complex constraints constructed from primitives. In those works, the primitives are required to be monotonic/anti-monotonic/convex, none of which is a property of occupancy. But in might be an interesting work to extend these frameworks to han-dle occupancy properly.

Different from many other constraints proposed, occupancy is not anti-monotonic , monotonic , convertible ,and succinct [8], thus, no previous methods can be leveraged.
In this study, motivated by the pattern recommendation appli-cations we introduce a new measure of pattern interestingness oc-cupancy and formulate the problem of mining top-k qualified pat-terns. To solve this problem, we explore the upper bound proper-ties on occupancy and propose DOFIA that injects these properties deeply into the search process. We propose two upper bounds, in which the first one is more efficient and the second one is theo-retically proved to be tightest with certain input constraints. We show the effectiveness of occupancy in the real-world application of print-area recommendation for Web pages. Finally, on large syn-thetic data we demonstrate that DOFIA significantly outperforms the baseline method in terms of efficiency. It is worth mentioning that the concept of occupancy can be extended to sequential pat-tern mining [3] and graph mining [18], and thus is useful in many pattern mining applications.
