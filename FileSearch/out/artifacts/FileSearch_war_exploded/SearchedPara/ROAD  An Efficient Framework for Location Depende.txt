 In this research, we develop ROAD , a system framework for pro-cessing location dependent spatial queries (LDSQs) that search for spatial objects of interest on road networks. By exploiting search space pruning , ROAD is very efficient and flexible for various LD-SQs on different types of objects over large-scale networks. In ROAD, a large road network is organized as a set of interconnected regional sub-networks (called Rnets ) augmented with 1) shortcuts for accelerating search traversals; and 2) object abstracts for guid-ing object search. In this poster, we outline this framework and ex-plain how it can support efficient location-dependent nearest neigh-bor search.
 E.1 [ Data Structures ]: Graphs and networks; H.3.3 [ Information Search and Retrieval ]: Search process Algorithms, Performance Location-Based Services, Location-Dependent Spatial Query, Road Network
The proliferation of mobile devices, along with broad deploy-ment of wireless communication networks and high-precision geo-positioning technology, has facilitated rapid growth of location-based services (LBSs) during the past decade. As one of the core components, spatial database maintains location-dependent infor-mation to answer user queries with respect to user-specified loca-tions. We refer the location dependent information and user queries as spatial objects and location dependent spatial queries (LDSQs), respectively. LDSQs have a rich application base. Consider a con-ference event. LDSQs can help an attendee in travel planning, e.g., find the nearest bus station to the conference venue.

In recent years, a trend for rapid deployment of LBSs has been growing quickly on the Web. Spatial objects from content providers (e.g., stores, average users etc) and digital maps from map service providers (e.g., GoogleMap, MapQuest, MS Virtual Earth, Yahoo! shows a map from Google Map on which a bus station and a con-ference site (as spatial objects) are tagged by the conference web-master (i.e., a content provider). In this model, content providers http://maps.live.com, http://map.yahoo.com.
 and map service providers do not necessarily maintain data from each other. This technological trend allows dynamic combination of contents and map services to facilitate content-rich LBSs.
Existing applications based on this model can provide simple ob-ject tagging on the map and point-to-point directions search. How-ever, complex LDSQs like finding the nearest bookstores from a given location based on network distance or dynamic traffic con-dition have not yet been supported efficiently. To meet the enor-mous Web and mobile user needs for LBSs, efficient processing of LDSQs on road networks is essential. Thus, we need a system framework that can i) flexibly and efficiently accommodate diverse objects (in terms of contents, types, and formats) on maps, ii) effi-ciently support various LDSQs, and iii) effectively support different distance metrics such as road network distance, travel time and toll.
However, all the existing techniques such as [1, 2, 3] for precess-ing LDSQs in spatial network databases cannot provide the desired features. In this research, we propose a novel and efficient system framework, called ROAD for processing LDSQs on road networks. As we analyzed, there are two basic operations, namely, network traversal and object lookup involved in object search on a road net-work. Network traversal visits network nodes and edges based on network distance as a criteria, while object lookup accesses and checks objects at traversed nodes or edges based on object search criteria. Objects collected during the course of a traversal are the search result. For a wide search on large-scale networks, the over-head incurred by traversals and objects lookups would considerably degrade the overall search performance and has to be minimized.
Formally, a road network can be modeled as a weighted graph N consisting of a set of nodes N and edges E , i.e., N =( N, E ) .A node n  X  N represents a road intersection and an edge ( n, n )  X  E represents a road segment connecting nodes n and n . | n, n | de-notes the edge distance, which can represent the travel distance, trip time or toll of the corresponding road segment, and its value is positive. We simply use distance hereafter. A path P ( u, v ) stands for a set of edges connecting nodes u and v and its dis-tance | P ( u, v ) | = ( n,n )  X  P ( u,v ) | n, n | . Among all paths con-necting node u and node v , the one with the shortest distance is defined as the shortest path , denoted by SP ( u, v ) . The network distance || u, v || between u and v is the distance of their shortest path SP ( u, v ) , i.e., || u, v || = | SP ( u, v ) | . For simplicity, we as-sume that objects reside on edges in a network. Objects at nodes can be treated as they are located at the end of the edges. We de-note a set of objects on edge ( n, n ) by O ( n, n ) and the distance between an object o  X  O ( n, n ) and the node n ( n )by  X  ( o, n ) (  X  ( o, n ) ). Also, we consider LDSQs to be initiated at nodes for presentation simplicity. To evaluate queries issued on edges, we can first examine objects on the edges if any and expand the search from both ending nodes of the edges. Each LDSQ is specified with a distance condition D and attribute predicate A . Given a set of objects in a network, an object, o , is collected as the answer of an LDSQ if (1) its distance from a query node, n q , denoted by || n || n q ,o || X  100 ) and (2) its attribute denoted by o.a satisfies A (e.g., restaurant o.type =  X  X eafood X ). As such, we single out the conditions of network distance from other attributes due to its im-portance and focus of this work.
It is certainly not efficient to explore the search space gradually over a network to locate target objects. Ideally, some search sub-spaces need to be skipped from a detailed examination if they do not cover interested objects. Figure 2 illustrates the problems of gradual search space expansion and provides an overview of our basic idea that leads to the development of proposed ROAD frame-work. As shown, o 1 and o 2 are two objects on the network. If an NN query is issued far away from these two objects, say at n the search cost is expected to be higher than the same query is-sued somewhere close to the objects. As traversals from a query point towards the searched objects are constrained by the network topology, nodes and edges (i.e., the entire network) form the object search space. Observing that some subspaces (i.e., small portions of the network) with no objects can be pruned from detailed ex-amination during search, we strategically formulate a network as a collection of regional subnets that consist of connected edges and nodes (called Rnets ). As such, each of the Rnets captures a search subspace. The idea, aiming at exploiting search space pruning ,is to avoid detailed traversal and object lookup within the Rnet and thus allow bypass of the Rnet if it does not contain objects of inter-est. To enable the bypass of Rnets during traversal, two pieces of information cannot be missed: (i) information about selective (i.e., shortest) paths across an Rnet that allows traversals to continue at other sides of the Rnet if it is skipped, and (ii) information about the contents of objects inside Rnets that provide quick search guide-line. These two requirements lead to the concepts of shortcut s and object abstract s, respectively. A shortcut is a precalculated shortest path connecting two border nodes of an Rnet and an object abstract presents a set of objects located inside an Rnet. The border nodes of an Rnet are nodes which have some edges covered by the Rnet and some other edges not included in the Rnet. Thus, as shown in the figure, with the aid of shortcuts and an object abstract for Rnet R , a search from n q can bypass R and continue on the other side of the network to find the target objects.

This design of ROAD based on Rnets that are provided with shortcuts and object abstracts offers many advantages. First, it pro-vides a clean separation between network and objects. In practice, map service providers may provide shortcuts for Rnets, while con-tent providers may map objects to the nodes, edges and present them as object abstracts associated with Rnets on the fly. Mean-while, flexible object and network updates can be facilitated. Ad-ditionally, diverse object types can be supported upon the same network. Second, as both network traversal and object lookup are seamlessly supported by ROAD, various LDSQs can be efficiently processed. Third, various shortcuts can be customized for different distance metrics as needed by applications.

To realize the ROAD framework, two novel index structures, namely, R oute O verlay and A ssociation D irectory , have been pro-posed. Thus, the ROAD framework is named after these two key components. The former naturally manages the physical network structure and the shortcuts, while the latter associates objects and object abstracts with the road network. Due to limited space, we omitted the design and implementation details of these indices.
For simplicity, we just illustrate the mechanism of the nearest neighbor search, which is one of common LDSQs, upon ROAD based on Figure 2. Initiated from n q , the search is performed by expanding the search range based on the minimum expansion strat-egy. Then the search reaches n 1 and n 2 , i.e., the border nodes of Rnet R . If the object abstract associated with R indicates no in-terested objects located inside R , the search expansion follows the shortcuts to n 3 , i.e., an unvisited border node on the other side of R . Thereafter, from n 3 , the search expansion follows the physical edges towards o 1 and o 2 . Once the first object (say o 1 the nearest neighbor search is done and o 1 is reported as the re-sult. From this illustration, we can see shortcuts between border nodes n 1 (or n 2 ) and n 3 are taken in place of traversing physical edges inside R , that reduces the traversal cost, thereby shortening the search time.
We analyzed the problem of efficient processing LDSQs on road networks caused by time-consuming network traversals and object lookups, and identified the importance of clean separation between objects and networks, aligned with the current technological trend of content-rich LBS development and deployment. In this poster, we outlined ROAD, an efficient framework to support LDSQs on road networks. Now we are extending ROAD framework for vari-ous LDSQs, optimizing its performance and prototyping it. In this research, Wang-Chien Lee and Ken C. K. Lee are supported in part by the National Science Foundation under Grant no. IIS-0328881 and IIS-0534343. Besides, Wang-Chien Lee is supported in part by the National Science Foundation under Grant no. CNS-0626709.
