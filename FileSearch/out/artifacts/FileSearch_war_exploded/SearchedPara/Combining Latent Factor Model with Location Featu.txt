 Groups play an essential role in many social websites which promote users X  interactions and accelerate the diffusion of information. Recommending groups that users are really interested to join is significant for both users and social me-dia. While traditional group recommendation problem has been extensively studied, we focus on a new type of the problem, i.e., event-based group recommendation. Unlike the other forms of groups, users join this type of groups mainly for participating offline events organized by group members or inviting other users to attend events sponsored by them. These characteristics determine that previously proposed approaches for group recommendation cannot be adapted to the new problem easily as they ignore the geo-graphical influence and other explicit features of groups and users.

In this paper, we propose a method called P airwise T ag-e nhA nced and featuR e-based M atrix factorI zation for G roup r ecommendA tioN (PTARMIGAN), which considers location f eatures, social features, and implicit patterns simultane-ously in a unified model. More specifically, we exploit ma-trix factorization to model interactions between users and groups. Meanwhile, we incorporate their profile information into pairwise enhanced latent factors respectively. We also utilize the linear model to capture explicit features. Due to the reinforcement between explicit features and implicit patterns, our approach can provide better group recommen-dations. We conducted a comprehensive performance eval-uation on real word data sets and the experimental results demonstrate the effectiveness of our method.
 H.3.3 [ Information Storage and Retrieval ]: Informa-tion Search and Retrieval X  Information Filtering, Retrieval Models Event-based Group Recommendation, Location Feature, La-tent Factor Model
Recently, social groups, which are normally self-organized communities, have emerged and become prevalent in many online social media, such as Flickr 1 , Facebook 2 , and Douba-n , etc. It is common that users prefer to join a group in which members share some common interest. Unlike direct relationship between users, the inherent characteristics of groups, e.g., focusing on some specific topics, determine that the relations are clearer. Hence, they can promote informa-tion diffusion and users X  interactions in groups.
However, it is non-trivial for ordinary users to discov-er groups which they want to join for the following three reasons. First, the volume and variety of groups are over-whelming for users. Second, users often cannot express their preference accurately when they use vertical search engine to find groups. Moreover, users sometimes just want to be told which groups they prefer to join. In order to solve these problems, researchers proposed different methods for group recommendation according to users X  personal needs [25, 27, 6]. Most of them are based on latent factor model with some variations, which can convert each user and group into a low dimensional representation and then calculate the degree of closeness between them.

In this paper, we focus on a new type of problem about recommending groups, i.e., personalized recommendation of event-based groups to users. Event-based social networks, which are mainly constituted by groups, have attracted more and more research interest recently [14, 15]. Different from groups mentioned before, event-based groups mainly include offline events, which means members will meet each other when they participate in events held by other members in the same group. Intuitively, friend relationship plays a more significant role in users X  decisions to join this kind of groups, which needs to be addressed in this problem. Besides, the nature of real-world events indicates location information should be considered in the proposed methods as well. Yet, previous research methods in group recommendation do not exploit location features of users and groups.

Note that the authors of [15, 17] also used the term of  X  X roup recommendation X  to define their problems, however, their tasks are to recommend some specific items to a group of users, and their approaches concentrate on how to take all users X  preferences in a group into account and automatical-ly determine different decision influence weights of different users from the same group. While our work is about per-h ttp://www.flickr.com/groups/ http://www.facebook.com/about/groups/ http://www.douban.com/group/explore sonalized recommendation of event-based groups to a user, w hich is totally different from the problems studied in [15, 17]. Thus, their methods cannot be applied to our problem. For ease of representation, we define the notion of group recommendation in this paper as recommending groups to users to join but not recommending items to groups.
Based on the above analysis, we propose a new method for personalized event-based group recommendation. We con-sider both implicit and explicit factors that could influence users X  decisions in our model. More specifically, we adopt latent factor model to capture interactions between users and groups like previous methods on group recommenda-tion. Meanwhile, we incorporate their profile information into pairwise enhanced latent factors. We also employ the linear model to combine explicit features, including location features and social features of users and groups which are popularly used in location-based recommendation.

Our major contributions in this paper are summarized as follows: (1) We propose a novel problem called personalized event-based group recommendation in a local city to help users find the groups they want to join. While ranking all groups in all cities for each user is low efficient, we exploit the localiza-tion property of users and groups, and convert the problem to recommending groups which are organized in the user-s X  living cities, which is reasonable based on our analysis in Section 3.1. To our best knowledge, we are the first to study this problem. (2) To take the advantage of the previous methods in tra-ditional group recommendation problem and the location properties of event-based groups and users, we propose to integrate the latent factor model with explicit features em-ployed in location-based recommendation. (3) We have conducted experiments on real data sets and the results show that our hybrid method is effective, and is better than several separate methods.
In this section, we briefly discuss three lines of research related to recommending event-based groups: (a) group rec-ommendation; (b) location-based recommendation; and (c) latent factor model.
 Group Recommendation . In this paper, group recom-mendation refers to automatically recommend groups for users which they are interest to join [25, 27, 23, 5, 6]. Previ-ous works mostly exploit latent factor models to capture the linkage information between users and groups, which could be regarded as a standard solution to group recommendation problem. Moreover, Zheng et al. [27] adopted tensor factor-ization to model the ternary relations among users, groups, and tags jointly in Flickr group recommendation. Chen et al. [6] extended the basic Probabilistic Latent Seman-tic Analysis(PLSA) model [10] to generate group content information and social relation between users and groups si-multaneously. Wang et al. [25] considered both the content of image and link structure among users and groups in a joint topic model. Most of these works exploit additional information to benefit group recommendation, such as tags, content of images, etc. However, as these items or their mu-tual relations do not exist in our problem setting and the above models are specially designed for these information, these models cannot be directly utilized in our work.
Our event-based group recommendation problem is dif-ferent from the traditional group recommendation problem, since the location information plays an important role in users X  decisions about joining groups, and previous methods cannot be adapted to incorporate this information easily. Moreover, users X  friendships in the real world are significant for this problem, which need to be explicitly modeled in the proposed approach.
 Location-based Recommendation . Recommendations in location-based social network have been extensively stud-ied in recent years [26, 7, 28, 19, 22]. Among them, our work is most inspired by two recent studies on extended matrix factorization [7] and supervised link prediction [22]. Cheng et al. [7] combined multi-center Gaussian model with matrix factorization for personalized point-of-interest (POI) recom-mendation. They drew an assumption that users X  check in behaviors obey Gaussian distribution around some centers. However, this assumption is not reasonable in our prob-lem setting since there are not enough location records for each user (many users have only several location records as they only participate in a few events) to ensure a Gaussian mixture distribution like check-in data they used. Scellato et al. [22] exploited place-based features in link prediction based on supervised learning methods. They summarized three types of features, i.e., place features, social features, and global features. Inspired by their work, we adopt some variations of those features in our work and integrate them with the latent factor model.
 Latent Factor Model . There are two main types of latent factor models widely used in recommendation: matrix fac-torization [21, 12, 16] and topic model [2, 10, 8]. In [21, 20], a probabilistic formulation of matrix factorization has been proposed, which has spawned a large body of research. Koren at al. [12] did a series of work based on matrix factor-ization by considering time factor, bias influence factor, etc. In [1], Aizenberg et al. incorporated artist-enhanced latent factor into matrix factorization to help alleviate the sparsity problem in recommending music. On the other hand, topic model is similar with matrix factorization and in some situ-ations, they can be proved equivalent [8]. Recently, Wang et.al [24] combined topic model and matrix factorization into a unified model for recommending scientific articles, which is a promising direction.

In this work, we extend basic matrix factorization model and propose a pairwise tag-enhanced latent factor model to incorporate profile information of users and groups.
In this work, we take Meetup 4 , an online social medi-a site which contains various kinds of groups, as a case s-tudy. In Meetup, users can create groups, launch events in groups to attract other users to join. Or they can join other groups, participate in events organized by group members. Although these events belong to their groups uniquely, it is not necessary for users to be group members to join their events. Particularly, users can express their attitudes to-wards to the events by RSVP ( X  X es X ,  X  X o X  or  X  X aybe X ). Be-sides, users can also share some information with other users, like personal profile, comments, etc. h ttp://www.meetup.com/ Figure 1: The Cumulative Probability Distribution o f Distance Between Users and Their Joined Events
Essentially, users join this type of groups for attending some face-to-face events. Thus, the distance between users and target events is a fundamental factor that influences whether users will join groups. Via the interface of Meet-up web service, users can set the range of distance from themselves to groups they will choose. Brown et al. [3] also suggested that geographical closeness could influence the for-mation of online communities. For further analysis, we show the cumulative probability distribution of distance between locations of users and events they have joined in Figure 1. As we can see, more than 83.5% of events are within 20 miles far from users. This is similar with the conclusions from Liu et al. [14]. They also stated the scope of locations of events that users joined in the event-based social networks is narrower than locations of check-ins in location-based social network. Usually, it happens when an event and a user are located in the same city. Besides, considering groups of all cities for recommendation is low efficient in practice. Consequently, it is more reasonable to recommend groups which usually hold events in the city where users live. In this paper, we call this problem personalized recommending event-based groups in the local city users live in. For consistent representation, we also use event-based group recommendation to denote it.
For the problem of event-based group recommendation, we have five types of entities: { U (user), G (group), T (tag), L (location), and E (event) } . Given a city i , let U i = { u , u n } and G i = { g 1 , g 2 , ..., g m } denote the set of all users and groups in the city i , respectively. For each user u  X  U , it has a set of tags T u to describe its preference, a unique location L u to indicate its address, and records of events E u and groups G u it has joined. Similarly, for each group g  X  G , it has also a set of tags T g , a set of events E g organized by its members, and a member list U g . Besides, each event e  X  E also has a location to specify where it is held. The relations between these entities are shown in Figure 2.

Formally, the problem is defined to rank every group g belonging to the city i for a given user u who lives in the same city, according to the dyadic rating r ( u, g ) of user u to group g , which indicates the user X  X  preference to group g . Naturally, predicting r ( u, g ) is the central task to be ad-dressed here. Because users may join groups for different reasons, we should exploit the existing diverse relations be-tween entities mentioned above to build an effective model for event-based group recommendation.
Latent factor model is the state-of-the-art method for group recommendation problem. However, we argue that some additional key points should also be considered to solve Figure 2: Overview of Entity Relations in Event-b ased Group Recommendation Problem the new problem of event-based group recommendation. In accordance with the unique characteristics of event-based groups, we make two important assumptions here.

Assumption 1. Users X  friendships play a major role in users X  decisions to join groups.

This is a general assumption used in many applications of recommender system. However, we address it here because in our problem, this phenomenon is stronger. Unlike tra-ditional online groups in which all the interactions between members only take place in a virtual network, event-based groups contain many real-world face-to-face events, which means users will meet each other when they attend the same event. Intuitively, users are more willing to meet people they are already familiar with in the real world.
 Assumption 2. Users prefer to join groups nearby.
We have shown that users prefer to join events near their homes in Figure 1. As groups have no corresponding loca-tions, we treat group members X  locations and events X  loca-tions as an alternative choice. Formally, we assume that a group is near a user when the members in the group are near the user, or the events are held near the user. Now consider a common case that a user wants to attend a group which holds many outdoor sports like basketball game. If two groups both meet the requirements of the user but are only different in terms of distance from him, then it is more likely the user will join a nearer group due to its convenience.
In this work, we construct explicit features for predict-ing the dyadic rating r ( u, g ) mainly based on the above two assumptions. Specifically, social features are extracted ac-cording to the first assumption, while location features are generated following the second assumption.
In order to take advantage of the latent factor model in-troduced in Section 2, we focus on one type of latent factor model, i.e., matrix factorization. In the setting of matrix factorization, the fundamental idea is to embody each user u and group g with low-dimension latent factors p u and p Then the dyadic rating r ( u, g ) of user u to group g is usually approximated according to the following equation, where b r m ( u, g ) denotes the rating prediction between u and g which is calculated by the method of matrix factorization.
The basic form of matrix factorization method cannot cap-ture explicit features. However, based on our previous as-sumptions and analysis, explicit features play an essential role in event-based group recommendation problem. Thus, we adopt the linear model, which is widely used and effec-t ive especially when the feature space is not complex. Its basic form is shown below, where x is the explicit feature vector and w is the coefficient vector of the linear model corresponding to each feature. Besides, b r l ( u, g ) indicates that we adopt the linear model to get the rating prediction.

To tackle the group recommendation problem more effec-tively, we want to capture both implicit patterns and explicit features simultaneously. Based on this intuition, we linearly combine these methods to model both of them. In this section, we first introduce the explicit features in Section 4.1 and then describe the basic matrix factoriza-tion model in Section 4.2. We extend matrix factorization by proposing a pairwise tag-enhanced latent factor model in Section 4.3. Finally, we discuss two strategies for integrat-ing matrix factorization with explicit features in Section 4.4. The basic form of the linear model is shown in Equation 2. There exist more complex models which adopt complicat-ed approaches to combine features. For example, support vector machine (SVM) can use kernel trick to nonlinearly transform features and then combine them. However, when the number of features is small, and each feature has a clear category indication, just like features built in this work, the linear model is effective enough while preserving simplicity.
Based on the two assumptions made in Section 3.3, we divide features into two categories: (1) location features; and (2) social features. We will discuss both types of the features in the following subsections in detail.
Location features reveal the essential distinction between event-based group recommendation and other traditional group recommendation problems.
 Overlap ratio of common locations . Co-location type of features focus on the intersection part of locations both users and groups are linked to. Let L ( u ) denote the set of locations of events user u has participated and L ( g ) denote the set of locations of events organized by the members of group g . If u and g have many common locations, u is more likely to join g . We use Jaccard similarity to measure the overlap ratio of two location sets, i.e, Number of common locations . As a complement to the feature above, we use the size of the intersection set instead u will be more likely to join group g .
 Minimum distance of users from group members .
 This feature measures affinity between users and groups from the perspective of spatial distance. If user u is near from a group member u  X  in group g , it is possible they will create links with each other and that in turn increases the possibility of u joining g . where dis ( u, u  X  ) denotes the distance between user u and u According to the longitude and latitude information, we use the Google Geocoding API 5 to calculate the distance. Mean distance of users from group members . This feature is similar to the feature above except that we use mean distance instead of minimum distance to reflect the distance condition of user u from the whole group members. Thus, it is more robust which can overcome the impact of noisy users. where | U ( g ) | denotes the number of members in group g . Minimum distance of users from group events . This feature directly measures the distance of user u from event e that pertains to group g . When the distance is smaller, u will be more likely to join e . That will further increase the possibility of u joining g . where dis ( u, e ) denotes the distance between user u and event e .
 Mean distance of users from group events . Likewise, we employ average distance to provide a robust feature for measuring the spatial affinity of user u and group g . where | E ( g ) | denotes the number of events belonging to g .
Social influence mainly refers to the influence of users X  friends on them. Here we assume users u and u  X  are friends if they are online friends which means they have both joined at least one group or are offline friends which implies they have both participated in at least one common event. Overlap ratio of common users . This feature calculates the Jaccard similarity between group g  X  X  member set and friend set of user u . We use F ( u ) to denote the friend list of user u and U ( g ) to represent the members of group g . Number of common users . Similarly, we use the size of intersection set instead of overlap ratio, i.e., | F ( u )  X  U ( g ) | . This feature supplements the previous feature when the group is very large so that all the overlap ratios are small.
Although social features also exploit the interaction records between users and groups like matrix factorization below, they are different because social features concentrate on direct relations while matrix factorization captures indirect rela-tions through low dimensional representation. h ttps://developers.google.com/maps/documentation/geo-coding/
T he standard form of matrix factorization with bias terms is based on the following equation mentioned in [12],
The average rating for user u plays a minor role because event-based group recommendation is a dyadic rating pre-diction problem. Moreover, user bias of u , b u , is mainly cap-tured by explicit features discussed before. Thus we focus on group bias here. Intuitively, more active groups will attract more users to join and this property is independent of users. In order to quantify the degree of activeness of groups, we consider two quantitative metrics here: (1) current number of members in a group; and (2) number of events organized by group members. We also adopt the linear model to de-termine the relative weights of these two features. Thus, we get the group bias b g = w T g x g , where x g denotes the above two metrics and w g represents the corresponding coefficient vector. We can consider the group bias together with social features and location features in a unified model.
Generally, users and groups both have profiles reflecting their preference. In this work, we only consider using tags because tags are common in many social networks, ensur-ing our method can be adapted to other situations. Simply matching tags based on string similarity cannot capture the semantic relatedness between tags. Thus, we also convert tags into low dimensional vectors and then multiply them to determine their relatedness. This is a powerful method for calculating words X  semantic relatedness [9].

Zheng et al. [27] also considered using tags in group recom-mendation and adopted tensor factorization to incorporate them. More specifically, given tags users have used in label-ing the pictures in groups, tensor factorization can model the ternary relationship h u, g, t i . However, we cannot di-rectly adapt it to our problem because tags are separately labeled by groups and users for themselves, which leads to two pairwise relations instead of one ternary relation. For each user u and group g , they both have their own tags T u and T g , respectively. Let v ut denote the latent factor of tag t for user u , and similarly v gt for group g . Then we can get v u = 1  X  which can be regarded as explicit profile information of users and groups. | T u | and | T g | are the number of tags of u and g , respectively. For any user or group which has no tags, we add two additional tags for them.

We incorporate pairwise tag-enhanced latent factor into matrix factorization model through directly supplementing user and group latent factors separately and then multiply the two items. The equation is defined as follows,
The above equation contains a hidden assumption that dimensions of tags and users, tags and groups should be equivalent. However, tags X  optimal number of dimensions may be different from users X  and groups X . In order to be more generic, we introduce a transform matrix, M . Assume the dimension of latent variables of users and groups is m and the dimension of tags is n , then M is a m  X  n matrix. Then we get the following formula, When m equals n , and matrix M is constrained to be a diagonal matrix with all diagonal elements equal to 1, the above two equations are equivalent. Thus, Equation 11 can be regarded as a special case of Equation 12. Note that we only need to specify the dimension of matrix M , all the elements of M can be learned automatically.
Now we integrate pairwise tag-enhanced matrix factoriza-tion with the linear model into a unified model, just as the extension of the basic framework introduced in Section 3.4. The detailed representation is shown below,
We call this proposed model P airwise T ag-enhA nced and f eatuR e-based M atrix factorI zation for G roup recommendA -t ioN (PTARMIGAN). In practice, we have two strategies to u se training methods to learn the optimal model parameters:
While the intrinsic characteristics of the two strategies are the same, we conclude two major differences between them: (1) the second strategy is sensitive to the value of the explicit features, especially when they have very large values; and (2) the first strategy needs an additional grid search method to determine the hybrid parameters. Empirically, we find that the first strategy gets a little better result in this problem, so we choose this strategy in the following.
The central task in event-based group recommendation is to predict the dyadic rating b r ( u, g ) and make the groups with higher ratings rank higher. This is relevant to the ranking task in information retrieval, where the target is to rank relevant documents at top positions.

In the scenarios of information retrieval, learning to rank methods have become the state-of-the-art ranking frame-work [13]. Typically, learning to rank methods have been classified into three categories: pointwise approach, pair-wise approach, and listwise approach. On the one hand, the pointwise approach cannot capture the relative order be-tween training instances in the ranking list, which is signif-icant for ranking learning. On the other hand, the training consumption of most listwise approaches is high compared w ith its improvement over the other two approaches. There-fore, we prefer to adopt the pairwise approach, which is a tradeoff between the pointwise and listwise approach. Fi-nally, we choose the Bayesian Personalized Ranking (BPR) optimization criterion [18] and adapt it to our problem.
For event-based group recommendation problem, we re-gard the groups user u have joined as the positive group set, denoted by P I u , while the other groups u has not joined in the same city as the negative group set, expressed as NI u Then the best ranking result for user u is that all groups joined by him should rank higher than other groups, which satisfies the following inequality,
The above inequality is relevant to the value of Area Un-der the ROC Curve (AUC) which is widely used in classi-fication problem. Usually the larger the value of AUC is, the more the positive groups rank higher than the negative groups. When there are total m users, the AUC value can be calculated as follows, where I ( . ) is an indicator function that is equal to 1 if b r ( u, g p u ) &gt; b r ( u, g n u ) and equals 0 otherwise.
Aiming for maximizing the AUC value, many works [4, 18] utilize sigmoid function, which has a form of  X  ( x ) = 1+ e  X  x , to approximate the indicator function I ( . ) so that the objective function is derivable. Based on this trick, we can get the final target optimization function, commonly represented as a log form below, where the regularization terms are used to avoid overfitting in the learning process. When the target is to maximize the objective function, the regularization terms should take negative values. In this work, we adopt L2-regularization for model parameters  X , i.e., p u , p g , v ut , v gt , w ug , w
For both parts of the right side of Equation 14, their pa-rameters are learned by maximizing Equation 16 using s-tochastic gradient descent (SGD) algorithm. SGD benefits many machine learning procedures by its fast speed to con-verge to global or local optimums and good scalability to large data sets. The main process of SGD is to randomly scan all training instances and iteratively update parame-ters. Specifically, for each training instance, we calculate its derivative and update the corresponding parameters  X  by moving along the ascending gradient direction as below, where Obj ( . ) denotes the objective function.

Given a training instance pair( u, g p u , g n u ), we can update the related parameters by its gradient based on Equation 16, where dif pn u = b r ( u, g p u )  X  b r ( u, g n u ) and  X  = 1  X   X  ( dif Besides, we use  X  to denote the regularization parameters.
The partial derivatives of Obj ( . ) have the same  X  , but d-ifferent  X  X  ( dif pn u )  X   X  . According to Equation 13 and Equation 14, the detailed gradients of the corresponding latent vari-ables in matrix factorization can be derived as follows,
We only list a part of gradients of the latent variables for saving space. However, all the other latent variables have similar gradient formulas. The gradients for matrix M can be induced as below, where M [ i,j ] denotes the [ i, j ]th element in M , M [ i,  X  ] the i th row in M , and v ut, [ j ] denotes the j th element in the latent vector. For explicit features in the linear model, the gradients of their coefficients are shown as follows,
Finally, each model parameter should add one regulariza-tion term as Equation 18 shows. Since tags ( V ut , V p gt may have overlaps, we should add the regularization terms until the end of each iteration.

The learning process continues until one of the following two termination conditions is satisfied: (1) the value of AUC on training data set remains stable in consecutive iterations; and (2) the maximum number of iterations is reached. Gen-erally, this number can be set empirically.
As stated in Section 3.1, we address the problem of event-based group recommendation for users in the same city. We selected New York City(NYC) 6 and Los Angeles(LA) 7 to analyze because they are among the largest cities in USA and hence have more users and groups than many other cities. Similarly, [19, 11] also choose the two cities in their experiments on location-based recommendation. We got the data set for the two cities in Meetup by extracting them from the data set published by [14].

Since all locations of users and events are represented by longitude and latitude, without explicitly specifying their c-ities. We first got users within a distance range from the centers of the two cities. Then starting from these users, we extracted groups that hold events within a distance range h ttp://en . wikipedia.org/wiki/New York City h ttp://en.wikipedia.org/wiki/Los Angeles from these users. Besides, we extracted their corresponding t ags, events, and locations. To remove noisy data and guar-antee the reliability of the experimental results, we further selected users who have joined at least 5 groups and groups which have at least 5 members. We also regarded the users who have joined most of the groups in the city as noisy users and removed them. For tags, we split long tag string and retained tags frequently used by users and groups. Finally, we obtained the experimental datasets. The details of the datasets are shown in Table 1.
 City U ser Group Tag Event Location NYC 5 001 2494 2137 95339 16963 LA 10944 2783 3421 120310 21389 Table 1: Statistics of Event-based Group Data
A s we adopt the BPR framework for learning parameters, we need to construct training data including a positive and a negative group in each training instance. However, if we use all groups (except those user u has joined) in a city as negative groups to build training pairs for u , then the total number of pairs for all users is huge which will lead to a very slow training scheme. For simplicity, we adopted an alter-native strategy by randomly sampling 10 groups users have not joined for each positive group to constitute the training pairs. Therefore, the ratio of the number of positive groups to negative groups is 1:10. For both NYC and LA data sets, we randomly split them with 70% into the training sets, 10% into the validation sets, and 20% into the test sets. Because the test data sets are composed of group pairs, we call them pair test sets . These test sets are mainly employed for comparing the performance of different methods.

In order to evaluate the effectiveness of event-based group recommendation in a real scenario, i.e., using all groups in a city as candidates, we first randomly sampled 1000 users as test users for both cities. Then for each user, we removed the groups he has joined and also used in the training and validation sets. For the remaining groups he has joined, we regard them as the target groups and hope the proposed method to give them higher ratings than other remaining groups in the city. Finally, we get the two cities X  test sets which we call list test sets because the test results are evaluated on the group ranking lists.
To evaluate the group recommendation results, we adopt three standard evaluation metrics: AUC, P@k (Precision at Position k), and MAP (Mean Average Precision) .

AUC measures the overall results of classification. It is suitable for highly imbalanced data set, as in our case where the negative groups constitute a high proportion. In this work, we use AUC in the pair test sets to measure the results.
P@k and MAP are mainly used in ranking problems. For each user u , suppose positive groups correspond to the cat-egory C T , then average precision (AP) is defined as follows, where n is the number of groups,  X  ( i, L ( u )) denotes the cat-egory of the group at position i in the ranking list L ( u ) and G u represents the groups joined by u in the test sets. Fi-nally, we can obtain MAP by averaging AP for all users. In this paper, we use P@k and MAP in the list test sets.
Since the proposed method, PTARMIGAN, is a combina-tion of the latent factor model and the linear model with explicit features, we focus on demonstrating that the hybrid method is suitable for the new problem of event-based group recommendation and it is better than any single method. Besides, we want to verify the effectiveness of each type of features. With these goals in mind, the baselines we adopt in this work are listed as follows, Learning rate and regularization parameters . Learn-ing rate controls the speed of model training. However, it may not be able to converge if it is set too large. In this work, the learning rate is set to 0.01 for matrix factorization and 10  X  4 for the linear model. On the other hand, regu-larization parameters are empirically set to 0.1 for matrix factorization and 10  X  3 for the linear model.
 Relative weight  X  .  X  is the fusion coefficient of Equa-tion 14. We tune  X  by evaluating how AUC changes in validation sets. As the results shown in Figure 3, we get stable and better performance when  X   X  [0 . 4 , 0 . 9]. Tak-ing the results of P@k and MAP into consideration, we set  X  = 0 . 85. D imension of latent factors . In addition to the above parameters, we also conducted sensitivity analysis in terms of the dimensionality of the latent factors. As we varied the number of dimensions, we found that it is not very sensitive. Empirically, we set the number of dimensions to be 20 for the latent factors in our model . (A) Results on Pair Test Sets . We begin with reporting the results on pair test sets. We adopt AUC metric because it can reveal the overall results of all methods under the adopted pairwise learning framework, i.e., BPR .

All the results are shown in Table 2. Now we first dis-cuss the contribution of different types of explicit features by comparing LiGF, LiPF, and LiSF. Among the three base-lines, the performance of LiGF is worse than the other two methods because it ignores personal factors which play a significant role in personalized recommendation. However, the results also reflect users have a tendency to join active groups. For LiPF and LiSF, the latter performs better than the former method. It corresponds to our intuition that us-er X  X  friends have a major influence on user X  X  decisions to join groups, especially for face-to-face events. Moreover, we find the combination of these explicit features obtains better re-sults, with 8.25% improvement in NYC and 3.71% improve-ment in LA pair test sets over the best sub-method. This demonstrates different types of features can be complemen-tary to each other from different aspects of the problem. Then we analyze the difference between MF and PTMF. As we discussed in Section 4.3, PTMF is an extension of M-F by considering additional tag information. As the results show, PTMF behaves a little better than MF. This verifies incorporating profile information of users and groups indeed somewhat captures their characteristic and preference. In fact, when a user and a group have similar profile informa-tion, it is reasonable they are more likely to create links. However, more than 20% users in both of our pair data sets have no tags which may lead to that the improvements here are not so obvious as we expected.

Finally, we compare the proposed method, PTARMIGAN, with the methods, LiAF and MF. By fusing explicit features and latent factors into a unified model, AUC of PTARMI-GAN is further improved over the two strong baselines in both test sets. This demonstrates that the combination of matrix factorization and explicit features is effective for event-based group recommendation. We notice that AUC of all methods on LA pair test set are superior to the results on NYC pair test set. This can be explained by the fact that NYC data set is sparser than LA data set. (B) Results on List Test Sets . We concentrate on the top-3 precision of recommendation results when all groups in a city are considered because of the following reasons. First, in the test data, many users have only one positive instance. Thus, it is fair to compare all methods on the top recommendation results. Second, in a real recommendation scenario, most users only join a few groups, and users tend to only focus on the top recommendation results while ignoring the rest. We also utilize MAP to measure the overall results of recommendation.

Since LiAF always performs better than the methods us-ing incomplete explicit features, we only use it among the feature-based methods for comparison in this test. As Fig-ure 4 shows, PTARMIGAN achieves the best results in P@1, P@3 and MAP. For the top-1 precision, it achieves 7.25% and 8.11% relative improvements in NYC and LA list test sets respectively over the second best corresponding results. It also achieves the best MAP among all methods. Thus, it verifies that the proposed method can indeed achieve better group recommendation results.

An interesting phenomenon we found is that LiAF per-forms a little better than both MF and PTMF in this case, which is contrary to the results on the pair test sets. This may be caused by the following two reasons: (1) explicit features, especially social and place features are significant in the problem of event-based group recommendation; and (2) pairwise ranking learning strategy may lose some accu-racy when the number of relevant documents is much small-er than irrelevant documents, just like group ranking here, which can also be regarded as an extremely skewed binary classification problem.

To sum up, our proposed method, PTARMIGAN, achieves the best results among the above methods. Now, we further discuss the complexity of our method and the cold start problem in recommendation.
 Parameter complexity . The number of parameters in the linear model is determined by the number of types of fea-tures, which is expressed as L . In the part of the latent fac-tor model, the complexity of the parameters is O ( K ui N K ui N i + K t N t + K ui K t ), where K ui and K t correspond to the dimension of users/items and tags respectively, N u de-notes the number of users and it is similar for N i and N Thus, the parameter complexity of our hybrid method is O ( K ui N u + K ui N i + K t N t + KK t + L ), which grows linearly with the size of data.
 Time complexity . Suppose we need R 1 and R 2 iterations to train the two parts of our model respectively and c is the time cost of updating one parameter, then the training time complexity is O ( cR 1  X  ( K ui N u + K ui N i + K t N t + KK cR 2  X  L ). Usually R 1 , R 2 , and c are small in practice. Thus, the training time also grows linearly with the size of data. Cold start problem . Cold start problem is the main chal-lenge in recommendation. For both cold start users and groups, we have none of their interaction history and the basic latent factor model cannot be applied to this situa-tion. While we do not emphasize this in this work, the proposed method should be better at handling it than the basic latent factor models, due to its ability of flexible de-mographic feature integration, such as locations and tags used in this paper. Normally, these features can be easily mined from the cold start users and groups as they are often required to fill out their profiles when they create accounts.
In this paper, we study a new type of group recommenda-tion problem: personalized recommending event-based grou-ps to users. In order to model the essential properties of event-based groups, we first adopt the linear model to cap-ture explicit features, including location features and social features. Then, we utilize matrix factorization, one type of the latent factor model which is widely used in group rec-ommendation problem, to model past interactions between users and groups. We also consider the group bias in matrix factorization represented in terms of group activeness-based features. Moreover, we extend the basic matrix factoriza-tion method by incorporating pairwise tag-enhanced latent factor. Through this way, profile information of users and groups is also considered. Finally, our proposed method, PTARMIGAN, integrates all the above elements into a uni-fied model. We conducted experiments on data sets from a popular website, Meetup, and the results demonstrate the effectiveness of our method.
This work was supported in part by National Natural Sci-ence Foundation of China under Grant No. 61272088 and National Basic Research Program of China (973 Program) under Grant No. 2011CB302206.
