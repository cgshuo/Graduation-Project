 Information security is one of the most difficult problems in managing large networked systems. This is particularly true for educational organizations that are attempting to reduce the complexity and cost of security administration in distributed multimedia environments such as those using World Wide Web services. Computer-based access contr ol can prescribe not only who or what process may have access to a specific syst em resource, but also the type of access that is permitted [10]. In Role-Based Access Control (RBAC), access decisions are based on an individual X  X  roles and responsibilities within the organization or user base, [2], [4], and [11].

Most information and communication technology (ICT) based learning sys-tems require user authentication and authorization data to reside locally in their user database. Therefore, educational organizations using such a system have to export their users X  data to that system. This will involve a complicated data synchronization mechanism.

We propose a model that simplifies user management in a large networked system by creating a group for each r ole. One can add or remove users from roles by managing their membership in corresponding groups. Users are asso-ciated with groups, roles are associated with permissions and group-role rela-tions provide users with an access contr ol and permissions for a resource. This framework provides a distribution of user-group management and role-resource management. All organizations that are members of such a system share their users X  and groups X  data across organizations through a common communication framework.

Separation of duties appeared to be of great value in a case of collaboration among various job-related capabilities where, for example, two roles have been specified as mutually exclusive and cannot both be included in a user X  X  set of authorized roles. Separation of duty requires that for any particular set of trans-actions, no single individual is allowed to execute all transactions within that set.

Since users X  management is done on independent sites, it is difficult to guaran-tee the uniqueness of users across inter-organizational boundaries. A person can be affiliated with many organizations at the same time. This problem is difficult to solve and may not be a major issue if a conflict of interests can be resolved in a role-group relationship.

The rest of the paper is organized as follows. Related work is listed in Sec-tion 2. Basic terms and concepts are pre sented in Section 3. A collaboration among independent organizations and a conflict of roles are discussed in Sec-tion 4. The framework is presented in S ection 5 and the syst em architecture is discussed in Section 6. The paper ends with a description of the system imple-mentation in Section 7 and a conclusion Section 8. A formal model of RBAC is presented in [9]. Permissions in RBAC are associated with roles, and users are made members of appropriate roles, thereby acquiring the roles X  permissions. The RBAC model defines three kinds of separation of duties -static, dynamic, and operational. Separation of duties was discussed in [10], [15], and [5]. A framework for modeling the delegation of roles from one user to another is proposed in [3]. A multiple-leveled RBAC model is presented in [7]. The design and implementation of an integrated approach to engineer-ing and enforcing context constraint s in RBAC environments is described in [17].

While RBAC provides a formal implementation model, Shibboleth [14] de-fines standards for implementation, based on OASIS Security Assertion Markup Language (SAML). Shibboleth defines a standard set of instructions between an identity provider (Origin site) and a service provider (Target site) to facilitate browser single sign-on and attribute exchange. Our work differs from Shibbo-leth in modeling implementation and user/group/role management. Shibboleth invests heavily on Java and SAML standards. Our model is more open-ended based on XML-RPC written in Python. The Origin site manages user and group memberships of users while the Target site manages permissions and role mem-berships of groups. The Origin site provides procedures callable using XML-RPC from Target sites to facilitate authorization on a protected resource. Additional needed procedures come to being b y mutual agreement betwen sites. In this paper a user  X  is defined as a valid domain identity at a particular organization  X  . A valid domain identity can be a human being, a machine or an intelligent autonomous agent.

A group  X  is a set of users {  X  j } s 1 , i.e.  X  = {  X  j |  X  j  X   X  } . A group is used to help the administration of users. The security settings defined for a group are applied to all members of that group.

A role  X  contains a set of groups {  X  i } l 1 associated with similar duty and authority. User administration is simplified by creating a group for each role. One can add or remove users from roles by managing their membership in cor-responding groups.

A resource  X  defines a set of protected Web objects  X  j ,j =1 , ..., m .An action  X  is a matrix of operations  X  i ,i =1 , ..., n on objects  X  j  X   X , j =1 , ..., m . A permission  X  defines a right of a role  X  to perform an action  X   X  on a resource  X  .Auser  X  has a role  X   X  when  X   X   X  and  X  has a role  X  .

An authorization gives a set of permissions to a user to execute a set of op-erations (e.g. read, write, update, copy) on a specific set of resources (e.g. files, directories, programs). An authorization also controls which actions an authen-ticated user can perform within a Web-based system. All non zero elements of the matrix  X  o  X  define the permissions of a role within a system.

An authenticated user, who belongs to a group  X  in an organization  X  i , will have permissions to perform actions at another organization  X  j if  X  defined at  X  i is a member of a role in  X  j . The user-group management in an organization provides a centralized account identity database from which users who belong to that organization authenticate themselves. The management system mu st also provide a cen tralized database for the group membership of users. The group membership of a user can be queried at any time by service providers.

The role-resource management in another organization (i.e. a service provider) provides a centralized permissions X  da tabase where an action is defined. The management system must also provide a database for the roles membership of groups.

Collaboration among organizations entails that all of them must agree on the name of the group to be used in user-group and group-role relations. A group name acts as a bridge in an inter-organization authorization mechanism. All users and groups are identified using the domain-name of their organization. 4.1 Ranking of Roles This collaborative management model can be used by a security administra-tor to enforce a policy of separation of duties. Separation of duties appears to be of great value in a case of collaboration among various job-related capabil-ities where, for example, two roles have been specified as mutually exclusive and cannot both be included in a user X  X  set of authorized roles. Separation of duty also requires that for any particular set of transactions, no single user is allowed to execute all the transactions within the set. A system administrator can control access at a level of abstracti on that is natural to the way those enter-prises typically conduct business. This is achieved by statically and dynamically regulating users X  actions through the establishment, and the definition of roles, relationships, and constraints.

A static separation of duty enforces all mutually exclusive roles at the time an administrator sets up role authorizations, while a dynamic separation of duty enforces all rules at the time a user se lects roles for a session. The dynamic separation of duty places constraints on a simultaneous activation of roles. A user can become active in a new role only if the proposed role is not mutually exclusive with any of the roles in which the user is currently active.
We propose an XML-RPC communication mechanism for determining a do-main user authentication and authorization (Fig. 1), where, in a collaborative independent management among organizations, role data in a service provider domain contains references to an external groups X  data from clients X  domains.
Defining disjoint groups X  permissions is a duty of role managers at service provider domains and assigning users to proper groups is a duty of group man-agers at service client domains. These managers need to cooperate very closely. Policies and rules governing a resource X  X  usage must be documented and under-stood by all parties. The managers at service provider domains have the right and the means to block any user in an event of a conflict.

A dynamic separation of duty requires that a user can not hold two conflicting roles in the same session, e.g., an examinee and an examiner of the same subject. A role with less permissions has lower rank than a role with more permissions.
A conflict of interests constrain must be checked by the application. An audit track of user assigned roles can be used to expose conflicts.

Roles can be ranked in such a way that a higher ranked role also contains all the rights of all lower ranked roles, i.e.
The ranking order of roles on a resource depends on operations (Fig. 2). Thus e.g. a role with  X  X ead-only X  permission is ranked lower than a role with  X  X ead-write X  permission. Role managers define a ranking order of roles on a resource. Role managers need to work very closely with the service implementers. Furthermore, arole  X  is given to a user after authentication,  X  defines authorization on a resource,  X  defines operational rights and responsibilities of a user on a resource, and  X  is a dynamic attribute of a user operating on a resource.

Roles conflicts appear when a user simultaneously has both a higher ranked role and lower ranked roles on a resour ce. In such a case, the user will get the role with the least rank, and, therefor e receives minimum permission on that resource as illustrated below. The service provider administrators have the right to place a user and/or an ex-ternal group in a  X  quarantine group  X  in relation to a protect ed resource. Users and groups, placed in a quarantine group, loose all their rights on the corresponding resource as long as they are in that quarantine group.

When an authenticated user  X  i at an organization  X  k wants to access an application at  X  l , protected by a role  X  at  X  l , the application  X  checks that the user  X  i at an organization  X  k does not belong to the corre- X  consults the corresponding authorization server as to whether the user  X  i at  X  checks for a roles X  conflict for that session, and  X  checks session constrains.
 Three management areas are described below: set of disjoint groups for conflicting roles. Thus a user cannot be a member of several disjoint groups for conflicting roles.
 ing a set of disjoint roles for a particular resource. A user cannot be granted permission to have more than one role for the same resource.
 adds groups to appropriate roles. Suppose users at domain dom1 are clients of services provided by domain dom2 . User per@dom1 who belongs to group gr@dom1 in dom1 will have permission to use a resource at dom2 if there is a role rol@dom2 where gr@dom1 is a member.
Managers at dom1 manage a central users X  and groups X  database. A person should have one and only one domain identity. User and group management should be done centrally at an ICT center, while group membership management may be done by local department managers.

To participate in this framework, dom1 must have a domain authentication server on which the domain users can do their authentication and provide a single-sign-on mechanism for a user to access published services. We propose a simple Web form authentication mechanism applying user identification, pass-word, session number, and cookies.

Asystemat dom1 must also provide an authorization server from which other domains can access the auth enticated user X  X  valid session number and group memberships on demand. Any authentic ated user can access any of the shared services, defined by group-role relations at other domains, provided that he/she belongs to the proper groups at his/her home domain.

Since user management is done on independent sites, it is difficult to guarantee the uniqueness of users across inter-organizational boundaries. A person can be affiliated with many organizations at the same time. This problem is difficult to solve and may not be a major issue if conflicts of interest can be resolved in a group-role relation.

Managers at dom2 manage a central roles and resources database. The rela-tionships among operations and resources are also managed centrally and are defined in the central database. Resource names and data are provided by a ser-vice provider at the local departmental level. The central ICT managers manage role membership in domain groups and role permissions on resources.
To participate in this framework dom2 must provide a portal service through which all services published by this dom ain can be reached. This portal accepts authenticated domain users applying the agreed single-sign-on mechanism from its own domain and other participating domains.

Once the portal at dom2 accepts a user, the user can then access any services accessible by the user X  X  domain group defined by a corresponding role member-ship of the group. Each time an authen ticated domain user wants to access a protected resource, the dom2 portal needs to query the domain user membership of a particular domain group at dom1 depending on the domain group X  X  role membership for that p articular resource.

We propose an XML-RPC communication mechanism for determining domain user authentication and authorization, where, in a collaborative independent management among organizations group management assigns users  X  ij mem-bership to the group  X  i at the organization  X  j ,and role management assigns a group membership to a role  X  . Role data in a service provider domain contains references to external group data from client domains.
 unauthenticated user who belongs to  X  dom 2 (for example) must first be authen-ticated (login) at his/her home domain ( dom2 ) where he/she has her identity defined. After a successful login the user will have a unique session identification (PSID). The service provider ( dom2 ) will have the user X  X  PSID and home do-main name as a current active session identifier for that particular user. When provider ( dom2 ) connects to the clients X  authoriz ation services X  port at the user X  X  home domain ( dom1 ) to check the user membership of a group  X  ( m ) dom 2 using the PSID as a parameter. The framework is composed of four main components: Web server, communica-tion module, database, and Web resources.
 Web server Web servers provide the users X  interfac e to the system. A user is authenticated when a correct credential (user-identi fier, password) is given in a sign-on Web form. A Web server sets and reads client X  X  (Web browser) cookies. Authorized users are presented with the protected Web resources.
 Communication module The module provides a peer-to-peer, r equest/respond communication between servers. A resource domain server can send a request to a user domain server for user X  X  authorization data (user, group membership). A resource domain acts as a client to a user domain for users X  data. Users X  credentials never leave the user domain server.
 Database Both domain servers are supported by a relational database management system (DBMS). Users X  credentials, group memb ership, and sign-on session keys are stored in the user domain X  X  database. Group and role relationships are stored in the resource domain X  X  database. The resource domain also keeps track of users X  sessions, profiles, and status in its database.
 Web resources The resource domain server provides a uthorized users access to protected Web resources. Server-side scripts are responsible for enforcing resource protection policies and providing users with dynamic HTML pages.

Let us denote a domain server that provides Web resources by RPDS ,andan-other domain server that provides user authentication/authorization, by UDAS (Fig. 3). In a collaborative user/resource framework, a RPDS provides a Web por-tal entry point for all resources and applications offered to Web clients. An UDAS maintains a domain users and groups database and provides a Web-based single sign-on application for domain users and Web services for users authentication and authorization, based on XML-RPC.

A RPDS will assign a Web browser with a unique portal session identifier ( PSID ) the first time an unauthenticated user is trying to access a protected Web resource controlled by the RPDS . This generated PSID is used as a cookie name with an empty value and is saved in the Web browser X  X  cookie by the RPDS  X  X  session controller. The user is then asked to provide his/her home domain name for authentication. The PSID , the Web browser X  X  IP address ( BIP ), and the home domain name are saved in a session database in the RPDS .The PSID is associated with the BIP for the session by the RPDS and is not yet associated with a valid user.
 The RPDS will then redirect the user X  X  browser to his/her home domain X  X  UDAS . The PSID , RPDS  X  X  IP address ( RIP ), and RPDS  X  X  URI are sent as  X  X ET X -request parameters in the redirection. A logon Web-form is then displayed on the user X  X  Web browser by the UDAS . The user is authenticated if he/she provides a valid credential (user-identifier ( ID ), password). The UDAS will then create a unique authentication session identifier ( ASID ) associated with the session { PSID, RIP, BIP, ID } -quadruplet. The { PSID, RIP, BIP, ID } -quadruplet and the { ASID , timestamp } -pair are saved in the session database in the UDAS .The PSID is then associated with an authenticated ID for the session by the UDAS . The session is valid as long as the session X  X  quadruplet exist in the UDAS  X  X  session database.
The UDAS redirects the user X  X  browser back to the RPDS .The ASID is sent as a  X  X ET X -request parameter in the redirection. Using the given ASID as a parameter, the RPDS makes an XML-RPC call to an authentication service at the user home domain ( UDWS ). If the ASID is still valid, the ID associated with the ASID is returned. The PSID is then associated with an authenticated user ID at the RPDS . A user is authenticated if both a session cookie PSID and a session entry exist for a particular RPDS .

An ASID is a short-term one-time (i.e. having a limited period of validity and can be used only once) session identifier and is used between a RPDS and an UDAS for the initial session control. At any time, the RPDS canobtainanew ASID by calling the UDWS and using a valid PSID, RIP ,and BIP as parameters. The newly obtained ASID can be used to check a user X  X  authorization from UDAS group data, for example.

One RPDS ( RPDS a ) can transfer its session to another RPDS ( RPDS b ) by obtain-ing a new ASID from the UDAS .The RPDS a first requests an ASID for RPDS b by doing XML-RPC to UDWS with PSID, RIP a , BIP ,and RIP b as call parameters, where RIP a is the IP address to RPDS a and RIP b is the IP address to RPDS b .The UDAS checks for a valid session { PSID, RIP a , BIP ,* } -quadruplet. If such ses-sion exists, a new session X  X  quadruplet for RIP b andanassociated ASID are then created. The UDAS sends the ASID as a response back to the RPDS a .The RPDS a then redirects the user X  X  browser to RPDS b with the ASID as a  X  X ET X -request parameter. The RPDS b makes an XML-RPC call to UDWS with the ASID as a parameter. If the ASID is still valid the { PSID, BIP, ID } -triplet is send back as a response. The RPDS b checks the browser X  X  IP address against the BIP ,andif they match, it then sets the PSID to the browser X  X  session cookie and saves the triplet in its session database.

The architecture allows two types of logoff methods, local sign-off and global sign-off. On the local level a user is logged off from a specific RPDS when the RPDS disables the user X  X  session cookie PSID and deletes its local session ( PSID, BIP ) from its database. The RPDS sends an XML-RPC call to the UDWS with the PSID, RIP ,and BIP as parameters. The UDAS deletes the session quadruplet from its database. The user is then invalid for that RPDS .

The global sign-off signifies the inability of the UDAS to provide new ASID sto aparticular { PSID, RIP, BIP } -triplet. When a RPDS requests a UDAS for global user sign-off, the UDAS will do the following sequence of actions: 1. Select all session-quadruplets containing a PSID, BIP ,and ID .DoanXML-2. Delete each session listed in the selection from the database.
 Using a short-term ASID and a long-term PSID , a simple security mechanism for a user X  X  session can be maintained between RPDS sand UDAS s. The PSID is bound to a BIP at the RPDS domain side and to the ID after a valid user logon at the UDAS domain side. The two initial URI-redirections (logon redirect and response redirect) are done over HTTPS. By usin g a peer-to-peer XML-RPC call over a HTTP, an ASID is used to map the validity of an ID for user authentication and authorization. All UDAS s maintain a list of valid RPDS s that are allowed to make XML-RPC calls to them.
 A user never discloses his/her user-identifier and password in a foreign domain. Both HTTPS and XML-RPC have to be compromised in order for a rouge user or application to gain illegal access to resources. The risk for illegal access is minimized by using two calls, the first to obtain the short-term one-time ASID associated with { PSID, BIP } , and the second to obtain the user authentication and authorization associated with the ASID. We propose the use of open source software components on a Linux server for the implementation of the framework. The required supporting systems are:  X  Apache Web server supporting modules for:  X  A database. PostgreSQL RDBMS for the back-end database system.  X  An XML-RPC server. Python and xmlrpclib module for Python.  X  Server side scripts. Python programs for producing dynamic HTML pages, In order to support SSL, openssl component must be installed on the server. The https protocol using SSL is expensive, but its deployment is needed if we need a secure transmittion, e.g. for on-line exams.

All static Web resources are protected by the HTTP basic authentication protocol defined by a .htaccess file on each directory. Norma lly users need not bother with basic authentication logon since requests to such resources are done automatically by server scripts for all a uthenticated users. Users having valid sessions are logged on to a protected resource by server scripts in relation to their roles. All authenticated users will have a  X  X ser X  role initially and are logged on to a protected resource as  X  X ser X . We define a minimum set of .htaccess users by using htpasswd. This minimum set contains (user, student, instructor, admin) users. Implementers can create addition al .htaccess users if needed. The .htaccess files use the  X  Require user  X  directive to control access to resources.
All dynamic Web pages are created by s erver scripts that have access to clients X  session cookies and the session control program. Server side scripts func-tioning as Web applications are URI addressable from clients, just like static Web pages. All protected Web applications mu st check for a valid session by comper-ing the client X  X  session cookie with the session data stored in the database before the clients are presented with the applications. Additional protection can be en-forced by using the HTTP basic authentication protocol on critical applications.
Basic authentication should not be considered secure, since a username and a password are passed in the GET request header from the client to the server in a base64 encoded string. A simple base64 string decoding program can extract the username and password that have been used.

Basic authentication using HTTPS, however, will be secure, since the whole transmission is encrypted.

PostgreSQL RDBMS is used to store all operational data. A SQL-base database is chosen instead of a hash-based database, because SQL helps to make data management easy. The Python database integration support module must be installed such that the server scripts can make SQL queries programmatically.
Users X  credentails, i.e. the (username, password) pair , are taken from an exter-nal data source (the preferred way) if possible. The authentication module uses the method specified in Users:PWD and Users:KEY data. LDAP authentication is used (the preferred way) if Users:PWD contains  X  X DAP X , in which case Users:KEY con-tains the LDAP server name or IP address. It is possible to define a user locally. Local users are those having Users:PWD =  X  X ocal X  , and in these cases Users:KEY contains encrypted user pa sswords. All usernames in Users:ID must be unique. This collaborative management model can be used by security administrators to enforce a policy of separation of duties. Since users X  management is done on independent sites, it is difficult to guarantee the uniqueness of users across inter-organizational boundaries. A person may be affiliated with many organizations at the same time. This problem is difficult to solve and may not be a major issue if conflicts of interests can be resol ved in a role-group relationship. A split management of users, groups, roles, and rights is proposed as a possible solution. Furthermore, the risk of illegal access is minimized by using two calls, the first one to obtain the short-term one-time authentication session identifier, associated with { unique session identification, Web browser X  X  IP address } , and the second one to obtain the user authentication and authorization associated with the authentication session identifier.
 An important part of this model is special groups called  X  X uarantine groups X . Each quarantine group is related to a par ticular protected resource. Users and groups, placed in a quarantine group, loose all their rights on the corresponding resource as long as they are in that quarantine group.

The work introduced here represents early stages towards the safe use of protected Web resources among independent educational organizations working in collaboration. A future goal is to develop a complete model, based on the proposed framework.

