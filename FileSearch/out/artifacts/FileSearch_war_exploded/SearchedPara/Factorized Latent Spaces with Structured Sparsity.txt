 Many computer vision problems inherently involve data that is represented by multiple modalities such as different types of image features, or images and surrounding text. Exploiting these multiple sources of information has proven beneficial for many computer vision tasks. Given these multiple views, an important problem therefore is that of learning a latent representation of the data that best leverages the information contained in each input view.
 Several approaches to addressing this problem have been proposed in the recent years. Multiple kernel learning [2, 24] methods have proven successful under the assumption that the views are independent. In contrast, techniques that learn a latent space shared across the views (Fig. 1(a)), such as Canonical Correlation Analysis (CCA) [12, 3], the shared Kernel Information Embedding model (sKIE) [23], and the shared Gaussian Process Latent Variable Model (shared GPLVM) [21, 6, 15], have shown particularly effective to model the dependencies between the modalities. However, they do not account for the independent parts of the views, and therefore either totally fail to represent them, or mix them with the information shared by all views.
 To generalize over the above-mentioned approaches, methods have been proposed to explicitly ac-count for the dependencies and independencies of the different input modalities. To this end, these methods factorize the latent space into a shared part common to all views and a private part for each modality (Fig. 1(b)). This has been shown for linear mappings [1, 11], as well as for non-linear ones [7, 14, 20]. In particular, [20] proposed to encourage the shared-private factorization to be non-redundant while simultaneously discovering the dimensionality of the latent space. The resulting FOLS models were shown to yield more accurate results in the context of human pose estimation. This, however, came at the price of solving a complicated, non-convex optimization problem. FOLS also lacks an efficient inference method, and extension from two views to multiple views is not straightforward since the number of shared/latent spaces that need to be explicitly modeled grows exponentially with the number of views.
 In this paper, we propose a novel approach to finding a latent space in which the information is cor-rectly factorized into shared and private parts, while avoiding the computational burden of previous techniques [14, 20]. Furthermore, our formulation has the advantage over existing shared-private factorizations of allowing shared information between any subset of the views, instead of only be-Figure 1: Graphical models for the two-view case of (a) shared latent space models [23, 21, 6, 15], (b) shared-private factorizations [7, 14, 20], (c) the global view of our model, where the shared-private factorization is automatically learned instead of explicitly separated, and (d) an equivalent shared-private spaces interpretation of our model. Due to structured sparsity, rows  X  s of  X  are shared across the views, whereas rows  X  1 and  X  2 are private to view 1 and 2 , respectively. tween all views. In particular, we represent each view as a linear combination of view-dependent dictionary entries. While the dictionaries are specific to each view, the weights of these dictionaries act as latent variables and are the same for all the views. Thus, as shown in Fig. 1(c), the data is embedded in a latent space that generates all the views. By exploiting the idea of structured spar-sity [26, 18, 4, 17, 9], we encourage each view to only use a subset of the latent variables, and at the same time encourage the whole latent space to be low-dimensional. As a consequence, and as depicted in Fig. 1(d), the latent space is factorized into shared parts which represent information common to multiple views, and private parts which model the remaining information of the individ-ual views. Training the model can be done by alternately solving two convex optimization problems, and inference by solving a convex problem.
 We demonstrate the effectiveness of our approach on the problem of human pose estimation where the existence of shared and private spaces has been shown [7]. We show that our approach correctly factorizes the latent space and outperforms state-of-the-art techniques. In this section, we first formulate the problem of learning a latent space for multi-view modeling. We then briefly review the concepts of sparse coding and structured sparsity, and finally introduce our approach within this framework. 2.1 Problem Statement and Notations Let X = { X (1) , X (2) ,  X  X  X  , X ( V ) } be a set of N observations obtained from V views, where X ( v )  X  &lt; P v  X  N contains the feature vectors for the v th view. We aim to find an embedding  X   X &lt; N d  X  N of depicted in Fig. 1(c). More specifically, we seek the latent embedding  X  and the dictionaries that best reconstruct the data in the least square sense by solving the optimization problem Furthermore, as explained in Section 1, we aim to find a latent space that naturally separates the information shared among several views from the information private to each view. Our approach to addressing this problem is inspired by structured sparsity, which we briefly review below. Throughout this paper, given a matrix A , we will use the term A i to denote its i th column vector, A i,  X  to denote its i th row vector, and A  X  ,  X  ( A  X  ,  X  ) to denote the submatrix formed by taking a subset of its columns (rows), where the set  X  contains the indices of the chosen columns (rows). 2.2 Sparse Coding and Structured Sparsity In the single-view case, sparse coding techniques [16, 25, 13] have been proposed to represent the observed data (e.g., image features) as a linear combination of dictionary entries, while encourag-ing each observation vector to only employ a subset of all the available dictionary entries. More formally, let X  X  &lt; P  X  N be the matrix of training examples. Sparse coding aims to find a set of solving the optimization problem where  X  is a regularizer that encourages sparsity of its input, and  X  is the weight that sets the relative influence of both terms. In practice, when  X  is a convex function, problem (2) is convex in D for a fixed  X  and vice-versa. Typically, the L 1 norm is used to encourage sparsity, which yields While sparse coding has proven effective in many domains, it fails to account for any structure in the observed data. For instance, in classification tasks, one would expect the observations belonging to the same class to depend on the same subset of dictionary entries. This problem has been addressed by structured sparse coding techniques [26, 4, 9], which encode the structure of the problem in the regularizer. Typically, these methods rely on the notion of groups among the training examples to encourage members of the same group to rely on the same dictionary entries. This can simply be done by re-writing problem (2) as where N g is the total number of groups,  X  g represents the indices of the examples that belong to group g , and  X   X  ,  X  g is the matrix containing the weights associated to these examples. To keep the problem convex in  X  ,  X  is usually taken either as the L 1 , 2 norm, or as the L 1 ,  X  norm, which yield In general, structured sparsity can lead to more meaningful latent embeddings than sparse coding. For example, [4] showed that the dictionary learned by grouping local image descriptors into images or classes achieved better accuracy than sparse coding for small dictionary sizes. 2.3 Multi-view Learning with Structured Sparsity While the previous framework has proven successful for many tasks, it has only been applied to the single-view case. Here, we propose an approach to multi-view learning inspired by structured sparse coding techniques. To correctly account for the dependencies and independencies of the views, we cast the problem as that of finding a factorization of the latent space into subspaces that are shared across several views and subspaces that are private to the individual views. In essence, this can be seen as having each view exploiting only a subset of the dimensions of the global latent space, as depicted by Fig. 1(d). Note that this definition is in fact more general than the usual definition of shared-private factorizations [7, 14, 20], since it allows latent dimensions to be shared across any subset of the views rather than across all views only.
 More formally, to find a shared-private factorization of the latent embedding  X  that represents the multiple input modalities, we adopt the idea of structured sparsity and aim to find a set of dictionaries D = { D (1) , D (2) ,  X  X  X  , D ( V ) } , each of which uses only a subspace of the latent space. This can be achieved by re-formulating problem (1) as the L 1 ,  X  norm regularizer which has proven more effective than the L 1 , 2 [18, 17]. Note that, here, we enforce structured sparsity on the dictionary entries instead of on the weights  X  . Furthermore, note that this sparsity encourages the columns of the individual D ( v ) to be zeroed-out instead of the rows in the usual formulation. The intuition behind this is that we expect each view X ( v ) to only depend on a subset of the latent dimensions. Since X ( v ) is generated by D ( v )  X  , having zero-valued columns of D ( v ) removes the influence of the corresponding latent dimensions on the reconstruction. While the formulation in Eq. 6 encourages each view to only use a limited number of latent di-mensions, it doesn X  X  guarantee that parts of the latent space will be shared across the views. With a sufficiently large number N d of dictionary entries, the same information can be represented in several parts of the dictionary. This issue is directly related to the standard problem of finding the correct dictionary size. A simple approach would be to manually choose the dimension of the la-tent space, but this introduces an additional hyperparameter to tune. Instead, we propose to address this issue by trying to find the smallest size of dictionary that still allows us to reconstruct the data well. In spirit, the motivation is similar to [8, 20] that use a relaxation of rank constraints to dis-cover the dimensionality of the latent space. Here, we further exploit structured sparsity and re-write problem (6) as where we replaced the constraints on  X  by an L 1 ,  X  norm regularizer that encourages rows of  X  to be zeroed-out. This lets us automatically discover the dimensonality of the latent space  X  . Furthermore, if there is shared information between several views, this regularizer will favor representing it in a single latent dimension, instead of having redundant parts of the latent space.
 The optimization problem (7) is convex in D for a fixed  X  and vice versa. Thus, in practice, we alternate between optimizing D with a fixed  X  and the opposite. Furthermore, to speed up the process, after each iteration, we remove the latent dimensions whose norm is less than a pre-defined threshold. Note that efficient optimization techniques for the L 1 ,  X  norm have been proposed in the literature [17], enabling efficient optimization algorithms for the problem. 2.4 Inference be obtained by solving the convex problem where the regularizer lets us deal with noise in the observations.
 Another advantage of our model is that it easily allows us to address the case where only a subset of the views are observed at test time. This scenario arises, for example, in human pose estimation, where view X (1) corresponds to image features and view X (2) contains the 3D poses. At inference, the goal is to estimate the pose x (2)  X  given new image features x (1)  X  . To this end, we seek to estimate the latent variables  X   X  , as well as the unknown views from the available views. This is equivalent to first solving the convex problem where V a is the set of indices of available views. The remaining unobserved views x ( v )  X  , v /  X  V a are then estimated as x ( v )  X  = D ( v )  X   X  . While our method is closely related to the shared-private factorization algorithms which we dis-cussed in Section 1, it was inspired by the existing sparse coding literature and therefore is also related to it. In this section, we first show that many existing techniques can be considered as special cases of a general regularized matrix factorization (RMF) framework, and then discuss the relation-ships and differences between our method and the existing ones.
 In general, the RMF problem can be defined as that of factorizing a P  X  N matrix X into the product of a P  X  M matrix D and an M  X  N matrix  X  so that the residual error is minimized. Furthermore, RMF exploits structured or unstructured regularizers to constrain the forms of D and  X  . This can be expressed as the optimization problem where C D and C  X  are the domains of the dictionary D and of latent embedding  X  , respectively. These domains allow to enforce additional constraints on those matrices. Several existing algo-rithms, such as PCA, sparse coding (SC), group SC, structured sparse PCA (SSPCA) and group Lasso, can be considered as special cases of this general framework. Table 1 lists the regularization terms and constraints used by these different algorithms.
 Algorithms relying on structured sparsity exploit different types of matrix norm 1 to impose sparsity and different ways of grouping the rows or columns of D and  X  using algorithm-specific knowledge. Group sparse coding [4] relies on supervised information such as class labels to define the groups, while in our case, we exploit the natural separation provided by the multiple views. As a result, while group sparse coding finds dictionary entries that encode class-related information, our method finds latent spaces factorized into subspaces shared among different views and subspaces private to the individual views.
 Furthermore, while structured sparsity is typically enforced on  X  , our method employs it on the dictionary. This also is the case of [9] in their SSPCA algorithm. However, while in our approach the groups are taken as subsets of the rows of D , their method follows the more usual approach of defining the groups as subsets of its columns. Their intuition for doing so was to encourage dictionary entries to represent the variability of parts of the observation space, such as the variability of the eyes in the context of face images.
 Finally, it is worth noting that imposing structured sparsity regularization on both D and  X  naturally yields a multi-view, multi-class latent space learning algorithm that can be deemed as a generaliza-tion of several algorithms summarized here. In this section, we show the results of our approach on learning factorized latent spaces from multi-view inputs. We compare our results against those obtained with state-of-the-art techniques on the task of human pose estimation. 4.1 Toy Example First, we evaluated our approach on the same toy case used by [20]. This shows our method X  X  ability to correctly factorize a latent space into shared and private parts. This toy example consists of two (a) Generative Signal (View 1) (b) Generative Signal (View 2) (c) Observations Figure 2: Latent spaces recovered on a toy example. (a,b) Generative signals for the two views. (c) Correlated noise and the two 20D input views. (d) First 3 dimensions recovered by CCA. (e) 3-dimensional latent space recovered with our method. Note that, as opposed to CCA, our approach correctly recovered the generative signals and discarded the noise. (f) Dictionaries learned by our algorithm for each view. Fully white columns correspond to zero-valued vectors; note that the dictionary for each view uses only the shared dimension and its own private dimension. views generated from one shared signal and one private signal per view depicted by Fig. 2(a,b). In particular, we used sinusoidal signals at different frequencies such that where t was sampled from a uniform distribution in the interval (  X  1 , 1) . This yields a 3-dimensional ground-truth latent space, with 1 shared dimension and 2 private dimensions. The observations X ( v ) were generated by randomly projecting the  X  ( v ) into 20-dimensional spaces and adding Gaussian noise with variance 0.01. Finally, we added noise of the form y noise = 0 . 02 sin(3 . 6  X  t ) to both views to simulate highly correlated noise. The input views are depicted in Fig. 2(c) To initialize our method, we first applied PCA separately on both views, as well as on the con-catenation of the views, and in each case, kept the components representing 95% of the variance. We took  X  as the concatenation of the corresponding weights. Note that the fact that this latent space is redundant is dealt with by our regularization on  X  . We then alternately optimized D and  X  , and let the algorithm determine the optimal latent dimensionality. Fig. 2(e,f) depicts the recon-structed latent spaces for both views, as well as the learned dictionaries, which clearly show the shared-private factorization. In Fig. 2(d), we show the results obtained with CCA. Note that our approach correctly discovered the original generative signals and discarded the noise, whereas CCA recovered the shared signal, but also the correlated noise and an additional noise. This confirms that our approach is well-suited to learn shared-private factorizations, and shows that CCA-based approaches [1, 11] tend to be sensitive to noise. 4.2 Human Pose Estimation We then applied our method to the problem of human pose estimation, in which the task is to recover 3D poses from 2D image features. It has been shown that this problem is ambiguous, and that shared-private factorizations helped accounting for these ambiguities. Here, we used the HumanEva dataset [22] which consists of synchronized images and motion capture data describing the 3D locations of the 19 joints of a human skeleton. These two types of observations can be seen as two views of the same problem from which we can learn a latent space.
 In our experiments, we compare our results with those of several regression methods that directly learn a mapping from image features to 3D poses. In particular, we used linear regression (Lin-Reg), Gaussian Process regression with a linear kernel (GP-lin) and with an RBF kernel (GP-rbf), and nearest-neighbor in the feature space (NN). We also compare our results with those obtained with the FOLS-GPLVM [20], which also proposes a shared-private factorization of the latent space. Note that we did not compare against other shared-private factorizations [7, 14], or purely shared Table 2: Mean squared errors between the ground truth and the reconstructions obtained by different methods.
 Figure 3: Dictionaries learned from the HumanEva data. Each column corresponds to a dictionary entry. (a) and (b) show the 2-view case, and (c) shows a three-view case. Note that in (c) our model found latent dimensions shared among all views, but also shared between the image features only. models [21, 6, 15, 23], since they were shown to be outperformed by the FOLS-GPLVM [20] for human pose estimation.
 To initialize the latent spaces for our model and for the FOLS-GPLVM, we proceeded similarly as for the toy example; We applied PCA on both views separately, as well as on the concatenated views, and retained the components representing 95% of the variance. In our case, we set  X  to be the concatenation of the corresponding PCA weights. For the FOLS-GPLVM, we initialized the shared latent space with the coefficients of the joint PCA, and the private spaces with those of the individual PCAs. We performed cross validation on the jogging data, and the optimal setting  X  = 0 . 01 and  X  = 0 . 1 was then fixed for all experiments.
 At inference for human pose estimation, only one of the views (i.e., the images) is available. As shown in Section 2.4, our model provides a natural way to deal with this case by computing the learned dictionary. For the FOLS-GPLVM, we followed the same strategy as in [20]; we computed the nearest-neighbor among the training examples in image feature space and took the corresponding shared and private latent variables that we mapped to the pose. No special care was required for the other baselines, since they explicitly take the images as inputs and the poses as outputs. As a first case, we used hierarchical features [10] computed on the walking and jogging video sequences of the first subject seen from a single camera. As the subject moves in circles, we used the first loop to train our model, and the remaining ones for testing. Table 2 summarizes the mean squared reconstruction error for all the methods. Note that our approach yields a smaller error than the other methods. In Fig. 3(a,b), we show the factorization of the latent space obtained by our approach by displaying the learned dictionaries 2 . For the jogging case our algorithm automatically found a low-dimensional latent space of 10 dimensions, with a 4D private space for the image features, a 4D shared space, and a 2D private space for the 3D pose 3 . For the walking case, the Table 3: Mean squared errors for different choices of image features. The last two columns show the result of our method while forcing one regularization term to be zero. See text for details. Figure 4: Mean squared error as a function of the number of training examples using PHOG features only, RT features only, or both feature types simultaneously. private space for the image features was found to be higher-dimensional. This can partially explain why the other methods did not perform as well as in the jogging case.
 Next, we evaluated the performance of the same algorithms for different image features. In particu-lar, we used randomized tree (RT) features generated by [19], and PHOG features [5]. For this case, we only considered the walking sequence and similarly trained the different methods using the first cycle and tested on the rest of the sequence. The top two rows of Table 3 show the results of the different approaches for the individual features. Note that, with the RT features that were designed to eliminate the ambiguities in pose estimation, GP regression with an RBF kernel performs slightly better than us. However, this result is outperformed by our model with PHOG features.
 To show the ability of our method to model more than two views, we learned a latent space by simultaneously using RT features, PHOG features and 3D poses. The last row of Table 3 shows the corresponding reconstruction errors. In this case, we used the concatenated features as input to Lin-Reg, GP-lin and NN. For GP-rbf, we relied on kernel combination to predict the pose from multiple features. For the FOLS model, we applied the following inference strategy. We computed the NN in feature space for both features individually and took the mean of the corresponding shared latent variables. We then obtained the private part by computing the NN in shared space and taking the corresponding private variables. Note that this proved more accurate than using NN on a single view, or on the concatenated views. Also, notice in Table 3 that the performance drops when structured sparsity is only imposed on either D  X  X  or  X  , showing the advantage of our model over simple structured sparsity approaches. Fig. 3(c) depicts the dictionary found by our method. Note that our approach allowed us to find latent dimensions shared among all views, as well as shared among the image features only.
 Finally, we studied the influence of the number of training examples on the performance of the different approaches. To this end, we varied the training set size from 5 to 100, and, for each size, randomly sampled 10 different training sets on the first walking cycle. In all cases, we kept the same test set as before. Fig. 4 shows the mean squared errors averaged over the 10 different sets as a function of the number of training examples. Note that, with small training sets, our method yields more accurate results than the baselines. In this paper, we have proposed an approach to learning a latent space factorized into dimensions shared across subsets of the views and dimensions private to each individual view. To this end, we have proposed to exploit the notion of structured sparsity, and have shown that multi-view learning could be addressed by alternately solving two convex optimization problems. We have demonstrated the effectiveness of our approach on the task of estimating 3D human pose from image features. In the future, we intend to study the use of our model to other tasks, such as classification. To this end, we would extend our approach to incorporating an additional group sparsity regularizer on the latent variables to encode class membership.
