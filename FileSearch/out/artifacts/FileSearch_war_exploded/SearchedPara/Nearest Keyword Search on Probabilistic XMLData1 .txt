 Uncertain data is inherent in information extraction in various web applications, such as sensor networks, social networks and so on. Traditional XML databases allow for the storage and retrieval of large amounts of XML data, but do not make any concessions for probabilistic XML data. We have used probabilistic XML model PrXML { ind,mux } [4], which was first discussed in [1], to manage data from information extraction data obtained from the web using a natural language analysis system. In this model, a probabilistic XML document (p-document) is regarded as a labeled tree with two types of nodes, ordinary nodes representing the actual data and distributional nodes defining the probability distribution for the children nodes. There are two types of distributional nodes, IND means the children nodes are independent of each other, while the children of a MUX node are mutually-exclusive , it means that at most one child can exist in a random instance document (called a possible world ). A real number from (0,1] is attached on each edge in the XML tree, representing the conditional probability that the child node will appear under its parent node given the existence of its parent node.

NK query is considered as an important information retrieval task, aiming at discovery of the node that is the nearest keyword node of query node. Given an XML tree T ,aquerynode q and a keyword k , an NK query on XML data can return the node that is nearest to q among all the nodes associated with k . Since the significant differences betw een deterministic XML data and proba-bilistic XML data, existing NK query methods on deterministic XML data are not suitable for probabilistic XML data. Consider an NK query on the proba-bilistic XML data in Figure 1(b), the LCA node of q and k 2 is a MUX node. So, for NK search on probabilistic XML data, to naively return the NK nodes as the answers will bring False Positive Problem , because the children nodes cannot appear together under a MUX node. To our best knowledge, no existing work pays attention on NK search on probabilistic XML data. In summary, the contributions of this paper are shown as the following: -This paper is the first work that studies an NK query on Probabilistic XML data (NK-P) to our best knowledge, and we design an algorithm to find NK-P results and calculate the probability without generating any possible worlds. -Experiments can show that our a pproach are effective and efficient.
The rest of this paper is organized as following. Section 2 introduces the related work. In Section 3, we describe the problem definition of NK search on probabilistic and elaborate the indexing algorithm of NK-P search. Section 4 reports the experiment results. Section 5 concludes this paper. This section introduces related work i n two fields: (1) NK semantics on a de-terministic XML document; (2) introduce probabilistic XML data and Dewey code. 2.1 NK Semantics on Deterministic XML Data A deterministic XML document is usually modeled as a labeled tree. We adopt the formalized NK semantics as the work [5]. We introduce some notions first. Define the length of a path in T as the number of edges it contains. Denote by u,v the length of the path connecting u and v , namely, the distance between two nodes u and v .Let U ( k ) denote the set of nodes in T that include keyword k . Given a query node q and a keyword k , the result of an NK query is a node v  X  U ( k ) such that
Figure 1 (a) shows an example XML tree T . For a query node q and a keyword k ,q = k 3 ,q =3 , k 5 ,q =5 , k 4 ,q =6).

Paper [5] proposed the problem of NK search on XML data. They solved the problem with a novel technique called tree Voronoi partition that gives rise to an indexing scheme with rigorous worst-case performance guarantees. 2.2 Probabilistic XML Data Probabilistic XML data model PrXML { ind,mux } is a popular data model which is used to represent XML data and its uncertain data. A probabilistic XML document defines a probability distribution over a space of deterministic XML documents. In this model, ordinary nodes are used to represent the actual data which may appear in a deterministic XML document, in contrast, distributional nodes represent the probability distribution of the children nodes which may not appear in a deterministic XML document. If a node is an IND node with n child nodes, it can generate 2 n copies. If it is a MUX node with n child nodes, there are two situations, one is that if the sum of all the exist probability is 1, there are n copies, another is that if the sum is less than 1, we generate n + 1 copies.
For example, Figure 2(a) shows an example of an IND node and a MUX node is shown in Figure 1(b). 2.3 Dewey Code Dewey code is an effective and efficient way in previous keyword search ap-proaches [2-3]. If using Dewey code, it is easy to find LCA node of any two nodes and determine the relationship between two nodes . If using Dewey code to encode a probabilistic XML document, distributional nodes can not be dis-tinguished with ordinary nodes. So, this paper uses a char  X  X  X  or  X  X  X  to definite MUX nodes and IND nodes. If the node is a distributional node, add a char  X  X  X  or  X  X  X  after the number. Figure 1(b) is a probabilistic XML tree with Dewey code. Because of the type of node is IND, the code is 0 . 1I. In this section, we provide a new method for an NK query on probabilistic XML data. We start by describing the probability for query, and then introduce the method of an NK query on probabilistic XML data. If we want to capture the NK results on probabilistic XML data, we cannot use existing method on probabilistic XML data, because of the differences between XML data and prob-abilistic XML data. A wise choice is to retrieve NK-P results by using Dewey code and nodes X  probabilities without generating any possible worlds. Next, we will introduce our method. 3.1 NK Semantics on Probabilistic XML Data In this section, we define NK semantics on probabilistic XML data and compute the results of NK-P with its probability.
 We use lca ( u,v ) to denote the Lowest Common Ancestor of nodes u , v in T (e.g., lca ( q,k 2 ) is node 0.1I.0.0M in Figure 1(b)). We can see that for an NK query, lca node is contained in the path from q to k . Next, we introduce several definitions for NK semantics on probabilistic XML data.
 Definition 1: ( P -distance) Given a node q in a probabilistic XML tree T P and a keyword k, the p-distance between q and k is the distance in a possible world which contains q and k. (if q and k are not exist in a possible world at the same time, the p-distance is 0)
In probabilistic XML data, it will have ordinary nodes and distributional nodes in the path from one node to another node. If the computation of the distance includes types of distributional nodes, IND node and MUX node, it will cause trouble. Distributional nodes are not existing in deterministic XML data, namely, in a possible world, there are not distributional nodes. So, there are three situations is shown as the following: (1) If LCA node of node v 1 and v 2 is a MUX node, set p -distance to 0, because these two nodes can not exist in a possible world at same time. There has not a path from node v 1 to v 2 in any possible worlds. (2) If LCA node is an IND node, we can think of it as an ordinary node. LCA node is an IND node seems that these two nodes could exist in a possible world. (3) If it contains distributional nodes on the path from LCA to leaf node, delete this distributional node and the edge from the distributional node to its child node.

Figure 3 shows an example of P -distance. The path from node 1 to node q has an IND node and a MUX node. The distance cannot consider the edge from the distributional node to its child node, the distance from node 1 to node q is 2. Definition 2: (NK on Probabilistic XML Data). Given a node q in a probabilistic XML tree T P and a keyword k, an NK-P query finds the nearest k-neighbor of q, namely, the node having the minimum P-distance to q in T P . The first step of an NK-P query is to find all the minimum P -distance nodes. To find NK-P results, we firstly must ensure that q exists in any possible worlds. Any possible worlds which contains q are the dataset we need. Next, an NK-P query finds NK nodes in the dataset we discussed above. This method is a naive algorithm with too high a cost. We propose a new method to query NK on probabilistic XML data. The specific method is shown in next section. 3.2 NK-P Probability Given a p-document T P ,aquerynode q and a keyword k , we define NK-P on T
P as a set of node and probability pair ( v,Pr G NK  X  P ( k )). Each node v is a LCA node of q and k in at least one possible world generated by T P . The probability Pr G NK  X  P ( v ) is the aggregated probability of all possible worlds that have the minimum edges between q and k and node v as their LCA node. The formal definition of Pr G NK  X  P ( k )isasthefollowing: where NK ( k,w i )= true indicates that k is an NK result on the possible world w also be computed as follows: where v = lca ( q,k ).

We can compute the probability of q and k on probabilistic XML data by above formula. From the above discussion, we know that if we want to compute the probability of an NK result, we must find LCA node of q and k first. In the next section, we mainly focus on how to find out NK-P results. 3.3 NK-P Results The native algorithm is generating all the possible worlds from a probabilistic XML document. Next, we compute an NK query on each possible world, and the results in all the possible worlds are the results of an NK-P query. But, the native algorithm is not only complex, but also waste times. So, this section illustrates the NK-P search algorithm from q and k , rather than generating any possible worlds.

Under ensuring q exists, the key of an NK-P query is to find suitable keyword nodes that have the minimum P -distance to q .So, d P and probability are two important factors in our method. Because the result of NK-P has the minimum P -distance, ranking all the d P is necessary.
Our method scans all the keyword inverted lists once. It progressively reads keyword match nodes one by one according to their order from the inverted lists, and compute d P between q and k .Next,werank d P from small to big according to their value in all the keywords lists. The principle is that, when computing the probability of an NK query result, it has retrieved q and k that are descendants of LCA node from all the keyword lists. In another word, the NK probability is determined after the probabilities of q and k have been determined. In Figure 1(b), for giving a query q and a keyword k , we can find the node q with Dewey code 0.1I.0.0M.0, and keyword nodes k 1 with Dewey code 0.1I.0.0M.1I.1, k 2 with code 0.1I.0.0M.2, k 3 with code 0.1I.1, k 4 with code 0.2.0M.1 and k 5 with code 0.2.1. The first step is to compute their LCA node, and the P -distance of them. For example, the LCA node of node 0.1I.0.0M.0 and node 0.1I.0.0M.1I.1 is node 0.1I.0.0M that is a MUX node, because this situation is not exist, the P distance is 0. The node 0.1I.0.0M.2 has the situation as same as node k 1 .Next, the LCA node of node 0.1I.0.0M.0 and node 0.1I.1 is node 0.1I that is an IND node, the P -distance of 0.1I.0.0M.0 and 0.1I is 2 and the P -distance of 0.1I.1 and 0.1I is 1. So, the P -distance from node 0.1I.0.0M.0 to node 0.1I.1 is 2 + 1 = 3. Node k 4 and k 5 have an ordinary node as their LCA node, the situation is similar to node k 3 . The distance is 4.

In addition, we need store the exist probability of the node. If father node is an ordinary node, the probability from it to its children nodes is 1. So, the exist probability of node q should only need storage 0.9 (from 0.1I to 0.1I.0) and 0.6 (from 0.1I.0.0M to 0.1I.0.0M.0).

Accordingtothe P -distance, we first select the s mallest distance (distance=3) to compute the probability in Figure 4. When distance =3, the node 0.1I.1 is the only one node in this distance. Push the node 0.1I.0.0M.0 into stack with the exist probability of node 0.1I.0.0M.0, and push out the probability 0.6 and 0.9 without the LCA node 0.1I. When the node 0.1I.1 is pushed, the probability 0.7 is When we compute distance 4, we need set the exist probability of node 0.1I as 1  X  0 . 7=0 . 3(ensure that when distance is 4, the probability do not contain As pushing the node 0.2.0M.1 into the stack, the NK-P probability of 0.2.0M.1 node 0.2.1 is existing in all the possible worlds, we need not compute others. In other words, if node v is existing as long as q exists, other keyword match nodes u need not be computed when its d P satisfy d P ( v ) &lt;d P ( u ).
To compute the d P between q and k , we should first find out the LCA node between them. d P ( q  X  k ) is the sum of two parts, and it is shown as the following:
Above equation can also be expressed as follows: where v = lca ( q,k ). Because d P ( r  X  q ) is a constant value, we only need compare the value of d P ( v  X  k )  X  d P ( r  X  v ) between keywords. the first line. For other keyword nodes, the probabilities has two values, and they are the probability from LCA node to keyword node v , another is the probability satisfy that keyword node v do not exist. This probability is used to computer other keyword nodes that whose d P is more than v s . For keyword nodes, the d
P is the value on the path from LCA node to k . So, when computing d P =3, we only need compute 0 . 54  X  0 . 7=0 . 378. When we compute d P = 4, we need Next, to compute probability based on 0.162. For node k 4 , the probability is 0 . 162  X  0 . 5=0 . 081. In this section, the data of an NK-P search on XML data is shown in Table 1. All the algorithms are carried out in a Pentium 4, 2.53 GHZ CPU. We use two datasets, DBLP and XMark.

For each XML dataset used, we generate the corresponding probabilistic XML tree, using the same method as used in [4]. This paper controlled the percentage of distributional nodes which is less than 25%. The size of nodes is shown in Table 2.

Figure 7 shows the experimental results when we run the queries over Doc 1 to Doc 8. From the results, we can see that compared with possible worlds, the algorithm of NK-P can improve the time efficiency.
 [6] is the first work to study keyword search on probabilistic XML data. [5] study NK search on XML data. This paper firstly study on NK search on probabilistic XML data. To our knowledge, this is the first paper studies the NK-P search. This paper presents an indexing algorithm that answers NK-P search efficiently. The experiment shows that our approach performs with higher efficiency.
This paper was supported by the NSFC (Grant No.61025007, 61328202 and 61100024), National Basic Research Program of China (973, Grant No.2011CB302200-G), National High Technology Research and Development 863 Program of China (Grant No.2012AA011004), and the Fundamental Re-search Funds for the Central Uni versities (Grant No. N130504006).

