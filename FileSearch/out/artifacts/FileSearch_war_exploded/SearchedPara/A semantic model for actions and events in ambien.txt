 1. Introduction
Self-management, pro-activeness, dynamism and goal-driven behavior are some of the most challenging requirements that have to be tackled when developing systems for ambient intelli-gence ( Ramos et al., 2008 ). Despite the fact that devising a strategy with which to address these issues has been one of the the majority of the solutions proposed to date remain far from the scenarios envisioned in Ducatel et al. (2001) .

An additional difficulty in developing ambient intelligence systems is that of having to cope with the wide range of device technologies present in these contexts, and the lack of continuity in device availability. These drawbacks have been addressed, with different levels of success, through the use of a wide variety of techniques, such as web services ( Kim and Choi, 2007 ), middle-ware ( Gu et al., 2005 ; Campbell, 2003 ), dynamic reconfiguration ( Cao et al., 2004 ), agents ( Chen, 2004 ), context modeling and reasoning approaches ( Reichle et al., 2008 ; Niu and Kay, 2010 ), etc.

Nevertheless, in the authors X  opinion, the autonomy expected from ambient intelligence systems can only be achieved by leveraging both common-sense knowledge and reasoning cap-abilities, rather than by focusing on implementational issues or the available technology. This work therefore starts from the premise that before tackling the specific requirements for ambi-ent intelligence, it is first necessary to understand and model the nature of human agency. To this end, the approach followed in this work consists in the adoption and implementation, in the form of a computational model, of the conclusions concerning actions and events drawn from philosophical doctrine. The notion of event, action or service should not vary among systems, nor should they respond to the approach convenience used, as is evidenced in the models surveyed in Roussaki et al. (2008) .
Contrary to current practices, systems for ambient intelligence should be grounded on a solid base of a semantic model for actions and events.

Based on the enacted semantic model, and from a common-sense point of view, the problem of developing systems for ambient intelligence has to be tackled from two different per-spectives: cognitive and behavioral. From the cognitive perspec-tive, the problem can be addressed as an understanding problem.
Comprehending a situation that takes place in a context might involve, for example, the inference of implicit, nondeterministic sink whose plug is in, will be a water overflow. From a behavioral perspective, the problem can be addressed as a planning problem of deciding what action to take in certain given circumstances. A common-sense strategy for planning and understanding, such as that presented in Wilensky (1983) would, therefore, appear to be the most compelling approach towards emulating the human-like rationality and reasoning capability.

In words of Lenat et al. (1990) , the bottleneck of intelligent systems is reached when attempting to respond to unexpected situations, which, it should be noted, are the most common situations found in ambient intelligence contexts. The way in which people react to these unexpected situations provides an idea of the direction in which efforts should be addressed.
Generally, when facing new situations, people tend to establish some similarities with past experiences, or resort to their general knowledge of how things work  X  the so-called common-sense knowledge  X  or even look for advice in books. Whatever the case may be, the authors of this paper believe that only ambient intelligence systems will be sufficiently flexible to support the scenarios envisioned in Ducatel et al. (2001) when common-sense reasoning starts being considered as a structural part of such systems.

Understanding and modeling common-sense reasoning, in such a way that it can be automatically performed, is considered here as the key challenge that, once achieved, would allow systems for ambient intelligence to indeed be intelligent. In this paper, an implementation of the key issues ( Mueller, 2006 ) required for the automation of common-sense reasoning is also presented. Nevertheless, the main contribution of this work is founded on the proposition and formalization of a semantic model for actions and events in ambient intelligence, as a previous step towards common-sense reasoning and understand-ing. Section 2 provides a review of related and previous works.
Section 3 describes the details of the proposed semantic model for actions and events. Section 4 provides the implementation details of the architectural approach adopted here. Section 5 presents a validation methodology to assess the goodness of the system response. Finally, Section 6 presents the conclusions drawn for this work. 2. Related works
The multidisciplinary nature of the ambient intelligence para-digm entails a state-of-the-art review task that must be addressed from the different areas of knowledge that play a role in the paradigm. The work in Cook et al. (2009) provides an excellent starting point from which to obtain an overall view of the technologies involved in ambient intelligence.

Due to the fact that this work is framed in a comprehensive approach to ambient intelligence, this section is intended to revise the fields of knowledge to which the proposed solution is making contributions to. Besides, the justification for those contributions to be presented along with the proposed semantic model is due to the fact that they are a direct consequence of the proposed semantic model strengths. 2.1. Planning strategies
From the acting point of view, the planning theory contributes not only towards providing articulated responses by means of service composition, but also towards supporting the decision making of agents that exhibit goal-oriented behavior. However, literature in the field of planning for ambient intelligence is scarce, principally owing to the nonlinearity of problems that involve the exploration of a huge number of states. Some other features also contribute to this shortage: the nondeterministic effects of events, for example, make it impossible to determine whether picking up a slippery object will culminate in the object being dropped; those delayed effects, that occur a while after an event has taken place, lead people to foresee that if the kitchen overflow. These are just a few of the features that make planning in ambient intelligence a nontrivial issue. Nevertheless, the need for planning strategies in ambient intelligence has already been the device heterogeneity so characteristic of ambient intelligence contexts, and advocates the use of a distributed-centralized HTN-like approach (hierarchical task network) ( Erol et al., 1994 ). In spite of the agreement on having to address device dynamism and heterogeneity, here, it is believed that these aspects should be tackled from the middleware perspective, rather than from that of the planner. The device heterogeneity should therefore remain a section. In this respect, the use of agent approaches is also commonly accepted for auxiliary tasks. The work in Gatti et al. (2008) highlights the role assigned to a multi-agent system (MAS) architecture, acting as the context observer and regulator. The MAS assumes the responsibility of providing the planner with the required information about the context and the mechanisms with which to respond to it.

Although not directly applied but easily extrapolated to ambient intelligence, the use of a probabilistic search techniques work addresses the problem of task planning and action selection by means of a fuzzy-neural network approach combined with agent coordination and cooperation methods. Agents are trained to select the most appropriate action depending on the field configuration, changing their selections whenever the objects in the field adopt a different configuration. Another interesting approach, with applications in the ambient intelligence field, is that proposed in Kang and Choi (2008) . This approach adopts an HTN planning strategy which has been enhanced to fill the gap between real world environments and planning scenarios. The script-based task planner (STP) resorts to a scrip structure to adapt the planning scenario to the real world environment. Finally, the work in Kaelbling et al. (1995) is also relevant. This work presents and discusses a planning strategy that seeks the optimal actions in partially observable stochastic domains, pro-viding a firm foundation for planning in uncertainty conditions of actions and observations. An overall view of the planning strate-gies in distributed and cooperative circumstances is presented in Patkos et al. (2007) . The conclusions and suggestions drawn from this study set the basis for identifying the shortcomings of traditional artificial intelligence planning strategies, along with the strengths that can be used in a combined solution to the proposed planning approach. As will be stated later, the planning strategy proposed here is based on an HTN approach. 2.2. Cognition
From the cognitive perspective, planning depends strongly on knowledge and understanding competences. This dependency is grounded on the tight coupling that exists between knowledge and decision making. As stated by the authors of Fagin et al. (1995) , there are certain pragmatic concerns about this relation-ship that do not have a unanimous answer. What does an agent need to know in order to perform a concrete action? When does an agent have to stop gathering information and make a decision? Or at what point does an agent have to answer  X  X  X  don X  X  know what to do X  X ? Answers to these questions imply the conviction that some degree of common-sense is required. Refer to Wilkins and desJardins (2001) for a thorough analysis of the most relevant knowledge-based planning techniques available in literature.
Automating common-sense reasoning has been one of the Mueller (2006) provides a brief history of common-sense reason-ing, the first work in this field dates from 1956. The main contributions to this field come from authors such as Newell, whose work is mainly concerned with the cognitive aspect of the artificial intelligence; Minsky (1991 , 1999) , who has made enor-mous contributions to the domain of common-sense knowledge representation and reasoning; and finally Lenat (1995) , who in 1984 undertook the first real attempt to catalog common-sense knowledge, in the Cyc project.

Automating common-sense reasoning is a task that requires a sufficiently expressive language, a knowledge base in which to store such a large amount of knowledge, and a set of mechanisms capable of manipulating this knowledge, so as to infer new information. Regarding the knowledge base, Cyc ( Lenat, 1995 ), ConceptNet ( Liu and Singh, 2004 ), Scone ( Fahlman, 2010 ), and
WordNet ( Miller, 1995 ) are by far the most evolved and success-ful approaches found in literature.

To date, Cyc has formalized the largest body of fundamental human knowledge. Cyc Corp is currently addressing its research efforts towards automating knowledge acquisition, either by interacting with people ( Witbrock et al., 2003 ) or by making use of the already asserted knowledge, natural language understand-ing, and the knowledge published on the Internet ( Shah et al., 2006 ). In contrast to the property system approach followed by
Cyc, ConceptNet resorts to acquiring knowledge from the general public. ConceptNet adopts a semantic network structure similar to WordNet. Nevertheless, when compared, ConceptNet claims to hold more informal, defeasible, and practical knowledge. It can also be argued that WordNet should not be listed along with common-sense reasoning systems like Cyc and Scone, since it is simply a large database for English lexicon.
 Scone is an open-source knowledge-based system written in
Common Lisp. The main difference between this and other approaches lies in the way in which search and inference are implemented. Scone adopts a marker-passing algorithm ( Fahlman, 2006 ) devised to be run in the NETL machine ( Fahlman, 1979 ). Despite the fact that these marker-passing algorithms cannot be compared with general theorem-provers, they are indeed faster, and most of the search and inference operations involved in common-sense reasoning are supported: inheritance of properties, roles, and relations in a multiple-inheritance type hierarchy; default reasoning with exceptions; detecting type violations; search based on set intersection; and maintaining multiple, immediately overlapping world-views in the same knowledge base. 2.3. Formal model for ambient intelligence
Since a semantic model is the main contribution of this work, particular attention should be paid to the works concerning this theme which have been proposed to date. Despite the recent efforts of the W3C to provide a standardized and formal model of the environment, traditionally, there has existed a lack of con-sensus regarding the conceptual entities that should be part of the model. The delivery context ontology ( Lewis and Fonseca, 2008 ) proposed by the W3C does not suffice to address the context-centered view advocated in this work. On the contrary, it is characterized for adopting a device-centered approach, in which the focus is at capturing and modeling the context of use . Aside from the context of use, additional issues should be considered in order to characterize and model the changes that make the context evolve from one situation to a different one. These aspects, however, have not been considered in the delivery context ontology.

In this regard, the low level details with which the detail context ontology has described the environment concept is also responsible of its rigidness and the impossibility to adapt such ontology to different approaches, such as those focusing at users, user actions, or context events. This weakness has led to a situation in which each context-aware or ambient intelligence framework proposes its own specific model. The majority of the approaches tend to oversee the role played by the modeling task, and the justification as to why a model is composed of certain concepts rather than others therefore tends to be overlooked.
Among the concepts that should be modeled in a semantic model for ambient intelligence, solely the notion of context has been properly formalized by the work in Abowd et al. (1999) . Further-more, based on the definition provided by Dey and Abowd with regard to the context notion, the work in Richter (2009) goes a step forward as to how the context notion should be handled. by sets. Whatever the cause may be, apart from the context concept and the ambient intelligence or context-awareness field, no relevant works concerning concepts such as actions and events have been taken which can be cited here.

Among the most promising projects for ambient intelligence, the contribution made by AMIGO, 1 follows the same approach adopted in this paper: that only by achieving automatic service composition self-sufficient context can be leveraged. However, although agreeing with the role played by the semantic model, the authors of this work disagree with the constituent entities of the model. The AMIGO semantic model understands context as being a physical context with different functional domains (i.e.
PC, mobile, CE, and home automation). This project therefore proposes a complex structure of different ontologies, grouped in a modular manner ( Roussaki et al., 2008 ). The notion of action or context devices.

Additionally, it is worth mentioning the novel approach under-taken by the mIO! project 2 for knowledge modeling. This project is devoted to address the achievements of smart spaces mainly through the use of mobile phones. This initiative pays a special attention to the key role that the context concept performs in determining and characterizing the situation that surrounds end users. As a result, the work in Villalon et al. (2010) presents an ontology network specially devoted to model the user X  X  contex-tual knowledge. Despite the fact that the semantic model that they propose in Poveda-Villalon and Garcia-Castro (2009) is intended to support the modeling task undertaken in ambient intelligence, it has to be noticed that it is addressed from a different perspective than the one presented here. It is a user and device-centered perspective that it is not concerned about the external factors that are affecting the context itself, and how it could evolve as a result of these external events. Besides, an additional reason that motivates the proposal of a new semantic model rather than using the ontology proposed by the mIO! project is grounded in the need for conciseness and simplicity in the number of concepts and relationships among them.
The idea behind the work proposed here is to combine, into a semantic model, the minimal set of concepts that are present and relevant to the different layers that composed an architecture for ambient intelligence (hardware layer, communication layer, and service layer) as the one advocated here. In this sense, this minimal core can afterwards be enriched with further and more high-level details at the different layers. However, the core concepts composing the semantic model has to remain simple and common to all of them.
 The work in de Freitas Bulcao Neto and da Graca Campos
Pimentel (2005) echoes the need for standardizing the semantic model proposed for context-aware or ambient intelligence, inde-pendently of the domain considered. This approach adopts a strategy based on answering questions such as: Who are the participants in the interaction? Where does the interaction take place? When does the interaction take place? What does the interaction describe? Or how is context captured and accessed in the interaction? Once again, the proposed model fails to justify why these issues, rather than others, address these questions and should be reflected in the semantic model.

Some other projects resort to semantic models for different purposes: the work in Bandara et al. (2008) proposes a semantic model for services with the intention of supporting service discovery tasks in pervasive contexts; in Chen et al. (2003) the semantic model, proposed as an OWL ontology, shares contextual information with agents; and finally, the authors of the work in
Preuveneers et al. (2004) believe that the solution to supporting interoperability among devices populating the contexts lies in stating a common terminology. The semantic model is respon-sible for sharing such a common terminology.

Despite the existing differen ces concerning the concepts that should be present in the semantic model, when it comes to the modeling language, the use of OWL has become a common practice.
The work in Fujii and Suda (2004) describes a promising approach for dynamic service composition, in which the ontological model is represented by means of semant ic graphs. The representation technology makes an important impact on the approach used to reason about the context. Refer to Bettini et al. (2010) for an extensive survey of context mode ling and reasoning techniques. 3. A semantic model for actions and events
The definition of context given by Abowd et al. (1999) was that of: context is any information that can be used to characterize the considered relevant to the interaction between a user and an the work presented here, refers to context in the same way that
Allen (1984) refers to the concept of world . This concept is represented by a set of descriptions of both the static and dynamic aspects of the world, therefore modeling what is known about the past, present, and future. By using Allen X  X  nomencla-ture, the static aspects of the world are easily captured as properties while dynamic aspects are captured by occurrences .
Since the main element of the ambient intelligence paradigm is context, and context dynamics are to be described by means of occurrences , it is obvious that actions and events (such as the constituent elements of occurrences) should be part of the semantic model. Actions and events have commonly been treated as being equivalent, or as having the slight difference of con-sidering actions as events which have been intentionally gener-ated ( Hommel et al., 2001 ). On the contrary, there are some other theories that support the opposite belief. For example, the work in
Bach (1980) argues that actions are not events. The main argu-ment supporting this dissociation lies in considering actions and their agents as being inseparable or correlative ( Hyman, 2006 ).
The theory of action for multi-agent planning ( Georgeff, 1988 ) also advocates for this distinction, although it hints that actions are accomplished by agents in their endeavor to achieve a goal.
Davidson X  X  (1963) theories, particularly those regarding the described as a combination of two views. On the one hand, actions can be seen as causal explanations of body movements and on the other hand, actions can also be seen as the justifying reason that leads the action to take place. Davidson considers events to be equivalent to actions. The sole difference is that when an action is considered as an event, it is re-described in terms of its effects.

The semantic model proposed here adopts the Davidsonian view of actions and events. It should be highlighted that Cyc, through its language CycL, represents actions and events using a Davidsonian approach. Actions are described as events but are carried out by an agent. The approach implemented in Scone, as will be explained later, extends the work in Sahin (2008) so as to include the notion of primary reasons for an action, along with its temporal and locational aspects.

At this stage, almost all the concepts contained in the semantic model have already been presented. However, we have not yet stated what  X  X  X emantic model X  X  signifies. From a computing perspective, it is considered to be an agreement on how to interpret the knowledge represented in the knowledge base. Semantic models therefore ensure common interpretations of shared knowledge. They are also an essential requirement when there are different instances handling the same knowledge. Every holder is expected to extract the same meaning or conclusions from the represented knowledge. Having said that, the following subsections provides a more formal expression of the proposed semantic model, along with the justification of why the proposed semantic model is considered to be common-sense compliant. 3.1. Semantic model description and formalization
The proposed semantic model is depicted in Fig. 1 . Apart from the concept of action and event, some other relevant entities also exist whose semantics must be modeled. It is obvious that ambient intelligence cannot conceive existence without services. The service concept therefore exhibits a core position in the proposed model. Services can be described in terms of the actions that they can undertake and the objects or things receiving such actions.

The simplicity of the model in comparison to certain other semantic models, such as those listed in the previous work section, is evident. This simplicity is the result of reducing ambient intelligence to those concepts that cannot be avoided, in other words, those of which the quintessence of ambient intelligence is composed. This semantic model can be used to model the domain knowledge, independently of the application context. Moreover, this simplicity eases the implementation of the semantic model in those technologies involved in devising systems for ambient intelligence. The following definitions state the foundation of the proposed semantic model: Definition 1. A Context is a set C composed of statements which, when used together, describe knowledge about the world. There may be multiple contexts describing each of the different views of the world. The meaning or truth value of a statement is a function of the context in which it is being considered.

The function meaning : S , C -M , where S is the set of state-ments describing the world, C is the set of possible contexts, and meaning or truth value of the statement s in the context c . This can be formally stated as 8 c C 8 s i A S : m i  X  meaning  X  s i , c i  X () s i D c i  X  1  X 
The meaning or truth value of a given statement depends on the contexts in which it has been declared.
 been described from the perspective of their relation to the primary reason that rationalizes them. The function AG : A agents, and the function AG returns the agent performing the reason for an agent performing an action in seeking the effects of the event caused. Finally, the function PA : A -O , such that O is performs the action upon the given object. ( g A G ( a A A ( o A O :  X  AG  X  a  X  4 PR  X  g , a  X  X () PA  X  a , o  X  X  2  X 
Therefore, an action is performed upon an object, if and only if there exists an agent with a primary reason to perform the action.
Definition 3. An Event is the set E of individual occurrences that cause changes in the world. The criteria followed by the Davidso-nian doctrine on individuation of events argues for the equality of events when the same effects occur. The Davidsonian view is here adapted to internalize the multiple contexts approach. In this paper it is therefore considered that two events are equivalent when the same effects are caused by different actions. The effects respectively return the statements that compose the before and after context of a given event. Furthermore, the function describe the world after the event took place. 8 e A E :  X  BC  X  e  X [ effect  X  a , o  X  X  -AC  X  e  X  X  3  X  when they have equivalent after contexts or when they cause the same effects: ( e , e 2 A E : e 1  X  e 2 () AC  X  e 1  X  D AC  X  e 2  X  X  4  X  by a device which performs a set of actions upon an object or a set of objects. The function PD : S -D , such that D is the set of available devices, and the function returns the device or devices providing a given service. ( s A
The definition of service therefore implies that the agent of an action provided by a service is a device.

Definition 5. A Device is the set D of electronic devices deployed in the environment which is a set of services, such that ( s A S ( d A D : PD  X  s  X  X  d  X  6  X 
Definition 6. An Object is the set O of possible environmental objects upon which actions are performed. The function OA : A ( o A O ( a A A ( e A E : OA  X  a  X  4 PA  X  a , o  X  -e  X  7  X 
The occurrence of an event e implies the existence of an object o upon which the action a is performed. 4. Implementation details
The great potential of the proposed semantic model is found on its fulfillment of the inter-module connectivity and commu-nication requirements of a framework for ambient intelligence.
This section therefore describes the implementation details framework for ambient intelligence so as to demonstrate how the proposed architecture successfully tackles automatic service composition by means of a shared semantic model of actions and events. The aim of the experiment is to show the impact that automatic service composition has on the achievement of auton-omous, self-managed, and pro-active systems which have for so long been demanded by ambient intelligence. Fig. 2 depicts a system overview from the perspective of the modules involved in the architecture. The following subsections analyze those mod-ules, paying particular attention to the implications of the semantic model and the different strategies followed for its implementation. 4.1. Scenario description
The scenario in Fig. 3 depicts an ambient intelligence environ-ment, in which devices are devoted to monitoring the security or subversive actions from taking place, and to diagnose security faults when they occur and self-heal them. These devices com-prise presence, sound, light, and proximity sensors, video cam-eras, microphones, and bluetooth devices, among those which are most relevant. The distributed architecture upon which these devices are deployed retrieves information from them and uses it to provide services such as object tracking, face recognition, geographical location, etc.

This comprehensive scenario of devices and services provides an appropriate context in which to test the suitability of the responses generated by the system, and a batch of different events and situations, generated by a synthetic data generator, is employed to this end. 4.2. The middleware framework
The middleware layer is one of the key elements of this architecture, essentially because it supports the connectivity of services and devices running on different platforms, or using different network protocols, even when different programming languages are involved. The middleware technology used to implement DOBS, the framework upon which this approach rests on is ZeroC ICE. 5 Refer to Villanueva et al. (2009) for further details on the implementation details of DOBS and a detailed list of the services offered.

ZeroC ICE is an object-oriented and CORBA-like middleware build object-oriented client X  X erver applications. The ICE technology also supports the implementation of event-oriented architectures by means of an efficient publish/subscribe service, known as IceStorm.

Certain ICE concepts need to be settled before undertaking the service architecture description. For example, an ICE object is no more than a conceptual abstraction that responds to client requests. An ICE object has one or more interfaces, in which an interface is understood as the set of named operations provided by the object. Moreover, a single ICE object can be instantiated in invokes that operation on the proxy, whose address is already known by the client. From the client X  X  point of view, the proxy apparently adopts the role of a local object that serves the invocation. However, in reality the ICE run time, which runs in the background, is in charge of locating the ICE object referred to by the proxy, activating it, transmitting the arguments, waiting for the operation to be completed and returning the operation results, if any. Bear in mind that the indirect proxy abstraction and the use of the same naming policy for interfaces suppose the cornerstone for automatic service composition. These two fea-tures basically standardize the method instantiation strategy.
There is no need to know much about how to instantiate a method in a given service, since the indirect proxy and the implemented naming policy suffice to the perform this task.
With regard to the naming policy, every service in the system implements the Service interface. As a direct consequence of implementing this interface, every service in the architecture provides a common set of operations, such as the performsAc-tion method, among others. Independently of the specific func-tionality provided by each service, there is a set of methods that are common to all services, since they all share a common naming policy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
The semantic model formalized in the previous section is adopted by the middleware framework by mapping concepts from the semantic model to implementational aspects of the service-oriented architecture. The Service concept from the model adopts the shape of the Service interface. The Action concept of the model finds its equivalent in the Action interface imple-mented by all the methods that can be instantiated in the available services. Moreover, the semantic model notion of Object is mapped to the Thing interface. With regard to the functions the middleware layer by the performAction(Action act, Thing thg) method of the Service interface. The agentOf(Ac-tion act) method is the middleware implementation of the semantic model function AO ( a ). Finally, the semantic model notion of Event is mapped to the Event struct.

It should be noted that the notion of Context does not have an equivalent in the middleware layer since the notion of context is irrelevant at this level. Moreover, there are some other methods and interfaces that are not part of the semantic model although they are implemented in the middleware framework. For example the setAction and getAction methods are not part of the semantic model and their presence in the middleware layer responds to implementational needs. 4.3. The multi-agent system
The multi-agent system (MAS) works as a link between the ambient intelligence environment and the other elements of which the ambient intelligence framework is composed. The MAS is basically in charge of adopting the plan as outlined by the planning algorithm, and undertaking it. The interaction with the other architectural elements is, once again, supported in the semantic model. At the MAS level, the semantic model is implemented by means of an OWL ontology. The agent commu-nication language (ACL) messages, exchanged among agents, therefore contain classes of the ontology, which are simulta-neously concepts of the semantic model.

Fig. 4 depicts the OWL ontology mapping for the proposed semantic model. As occurred in the previous subsection with regard to the service architecture implementation, there are some ontology classes that do not have an equivalent concept in the semantic model. The explanation for this is supported by the need to abstract implementational issues from the cognitive aspects of the model. For example, the taxonomy of event types is intended to adapt the MAS response to the specific type of event detected.
Nevertheless, this aspect must remain specific to the MAS, since neither the middleware nor the planner need to know about the differences between event types.

The implementation of the goal-driven MAS has been accom-plished here by means of JADEX, 6 with some modifications to allow it to run upon the middleware layer. The JADEX framework supports the development of BDI (belief, desire, and intention) agents. Beliefs are those properties that an agent considers to be true, goals are those properties that an agent desires to be true, and finally plans are those actions that lead an agent to a desired goal. These basic instances define what is known as the agent X  X  mental state.

The agent X  X  beliefs in combination with contextual information (held in the Scone knowledge base) are what lead the agent X  X  behavior towards the goals that the agent desires to achieve or maintain. Interaction among agents, the knowledge base, services and devices are grounded on the fact that all of them share the same semantic model.

For example, consider the aforementioned security surveil-lance context, and the occurrence of an event consisting of a presence sensor activation announcement coming from a restricted area. The following mental state is held by the agent supervising the context:
Believe (a, b): Agent a beliefs that an intrusion event b has taken place.
 Goal (a, g): Agent a desires to halt the intruder.

Plan (a, p): Agent a resorts to a set of actions so as to halt the intruder.

However, how is this presence sensor event translated into an intrusive situation? How does the agent know which set of actions to perform when trying to halt an intruder if this plan depends on the place in which the event took place, and the resources available at the exact intruder location? These ques-tions pose two of the main challenges facing ambient intelligence, namely, context understanding and autonomous and automatic behavior generation. Providing a solution to these two challenges is one of the main assets of the architecture proposed here.
The main activity of the so-called Manager agent is the supervision of the events occurring in the context. To this end, the agent is subscribed to those communication channels in which the events are notified by the sensor devices. In this particular situation, the presence channel is where the sensor publishes the notification and from which the Manager agent has received the notification. Since the notification comes from that specific channel, the agent labels it as an unauthorized presence event, and notifies the Perceptor agent of this occurrence. Whenever the Perceptor agent believes that an unauthorized presence event has taken place, one of the goals that it triggers is intended to achieve intruder identification.
The following code, extracted from the goal description section of the Perception agent , shows how the intruder _ identi-fication goal is dispatched whenever an eventType occurrence is known by the agent or, in other words, when a fact of the eventType class is asserted to the agent beliefs. 1 2 3 4 5 6 7 8 9
The intruder _ identification goal requires a plan in order for it to be achieved. There are several ways in which to accomplish an intruder identification, one of which is by performing a 1 2 3 4 5 6 7
Plans in JADEX are traditionally static procedural recipes coded architecture from achieving the versatility and dynamism demanded by ambient intelligence. The agent X  X  plans therefore that allows the planner the responsibility to specify the type of code shown below, the plan request specifies very general constraints, and it is simply engaged in accomplishing an tification action upon a biometric feature in order to obtain a person identity result. 1 2 3 4 5 6 7 8 9
The result of the planning algorithm, stated as a set of quaternary elements of the form o proxy, action, thing, result 4 , is sent to the Processor agent which simply executes the action , served by the proxy , upon the thing order to obtain a specific result .

The set of quaternary elements of which the plan is composed provides the MAS with the information required to automatically undertake the plan. Note that the agent plan has been composed in an ad hoc manner, considering the availability of services and devices. Once again, it is important to highlight that the MAS capability to undertake on-the-fly generated plans is a direct consequence of using a common naming strategy for interfaces.
In order to carry out the proposed plan, the MAS simply invokes the performsAction operation on the service identified by the given p X  X  X oxy so as to perform the action upon the specified thing . Note how all this information is extracted from schema for the method invocation. 4.4. The planner
Making the most of service versatility enables ambient intelli-gence systems to respond to whatever the needs are by adapting in this context, arising needs are treated as a desire to perform actions upon objects. By making this assumption and adapting a hierarchical task network (HTN) approach to consider actions as tasks, the task of satisfying arising needs can be automatically accomplished by means of an HTN-like planner.

The actions that can be performed by the system, at a specific location and time, are determined by the devices and services available at that location and time. Those actions that cannot be performed, owing to the lack of services that provide such functionality, are named here as non-feasible actions. Whenever the system demands the execution of a non-feasible action, the planner comes into play.

As is listed below, the Planning algorithm starts with an empty plan, the P plan, to be filled with the list of actions provided by services. This course of actions is intended to emulate the non-feasible action demanded. The course of actions is provided as a set of actions performed upon objects, A and O respectively, and the results R of accomplishing these actions. Algorithm 1 ( Planning( P ,A,O,R) ). 1: p  X  X  A , O , R  X  2: if A is non-feasible then 4: while a i is non-feasible do 5: delete a i from A 6: end while 7: while only doable actions a i does not have an 9: check if those o i are equivalent to or can be O 10: end while 11: Recursively call p  X  Planning  X  a i , o i , resultOf a 12: end if 13: Add p to P 14: Return P Fig. 5. Logic schemata for remote method invocation. 4.5. The Scone knowledge base The last of the architectural modules analyzed here is the
Scone knowledge base 7 (Scone KB). The use of Scone is founded on the need for common-sense knowledge modeling and reason-ing capabilities, particularly when that knowledge refers to actions and events. As with the previously described modules, the semantic model has also been mapped into Scone. In fact, the
Context concept is one of the features of Scone that makes it so suitable for reasoning about actions and events. Refer to Chen and Fahlman (2008) for a description of the multiple context insights.
Moreover, not only contexts are relevant for the modeling of semantic model has been mapped into the Scone KB. Note how the semantic model concepts and relati onships are implemented, respec-tively, as nodes and links in Scone. This semantic model has been used as a foundation for the coding of a dictionary of actions and of this encoded dictionary for the capture event: 1 2 3 4 5 6 7 8 9 10 11 12 13 14
For example, the above lines describe (from a common-sense perspective) what the capture event represents in terms of relevant elements and states of the world involved ( before , throughout , and after contexts ). Event roles symbolize those domain elements that characterize the world states. For example, the captionSource role is played by the thing being captured. When referring to the capturingImage action, the caption-
Source role is specified in the light photons captured by a photographic camera. The after context for the capturingImage action describes a state of the world in which, after taking place, that action results in a new state in which there is an image file, picturing the instant photo frame captured by the camera.
The planning algorithm, based on the actions and events dictionary and the domain knowledge held in the Scone KB, resorts to the inference capabilities of Scone so as to devise the its consecution.

The following lines show Scone X  X  strengths with regard to inferring and deducing the knowledge that seems so obvious to people, but is so difficultly handled by computers. The Scone type and property hierarchy KB and its implementation of the marker-passing inference strategy, provide the means to enhance plan-ning with common-sense knowledge and reasoning capabilities, resembling the process in which people make decisions.
For example, when attempting to figure out the identity of an intruder by performing the identification of a biometric feature , the first step consists of determining the existence of a service that is capable of providing such a functionality.
At first glance, one might easily conclude that this is too generic a task to be provided by a service, and Scone is no exception.
When asked about the existence of such a service, Scone answers that there is no type or individual node whose performs-action role is the identification event. In other words, the identification event is not directly provided by any of the available services: 1 2 3
CL USER 4  X  x is the y of what? f identification g f identification g is not known to play the NIL
At this stage, a sensible approach is to seek those events or actions that cause the same effects as those caused by the identification event: 1 2 3
CL USER 4  X  list events causing x  X  new statement f person identity g X  X  X f recognition g f identityIdentificationAccess g
The Scone answer to this query is a set of actions and events that produce the same effects as the identification event. However, not all of them are equally useful, and those directly provided by available services are preferred to those that cannot be served by available services. In order to figure this aspect out, Scone is again queried about the existence of services performing the given actions. As is listed below, the recogni-tion action is not performed by any of the available services, while the faceRecognition is indeed provided by the cited service: 1 2
CL USER 4  X  x is the y of what? f SimpleRecognizer : default p 12000 g
Note that the performs-action property (the so called role) symbolizes the action or set of actions capable of being under-taken by individual nodes of the service type node.

When queried about the existence of an individual service performing the action of faceRecognition Scone answers that the individual, with proxy property SimpleRecognizer:de-fault -p 12000 , is capable of performing an equivalent iden-tification event. The proxy property is also a role or property of the service node. This is used to hold the remote location address from which actions can be called to be executed.
In order to match the request, not only must the after contexts be equivalent, but also the items upon which actions are per-formed. Therefore, it is also necessary to check that those items supporting the equivalent actions or events are equivalent. In other words, the following steps consist of checking that the faceRecognition action can be performed upon a biometric feature as stated in the initial requirements: 1 2 3 4 5
Face is the item upon which the faceRecognition action is performed. It is an obvious fact to people that a face is also a biometric feature , and this is confirmed by Scone when queried. Since the face object works as an input to the faceR-ecognition action, the following step consists of devising how to obtain or satisfy the action requirements: 1 2 3 4 5
If the detectingFace action is required so as to permit the faceRecognition action to take place, Scone should once again be queried about the inputs or requirements for the detecting-
Face action, and should also verify whether any of them is compliant with the face object. The following lines show how to implement such an interaction with Scone: 1 2 3 4 5
The interpretation of the above results concludes that the detectingFace action has to be performed either upon the from the required input, the detectingFace action might also demand some other requirements to be undertaken. Scone is therefore queried about this matter: 1 2 3 4 5 6 7 8 9 10 11 12 13
Scone concludes that in order to fulfill the requirements demanded by the detectingFace action, the following could be undertaken: capturingFace performs-action recor-dingImage recordingVideo . 1 2 3 4 5
Steps are repeated using different actions until a point is reached at which the action does not require any inputs, and can therefore be directly accomplished. When this point is reached, Scone is asked about the result of the action. As can be observed in the above lines, the output of the capturingFace an image file, from which a face can be detected in order to perform a face recognition action so as to resolve the intruder identification.

The planning algorithm proposed in this works is intended to automate the generation of the queries presented above. By starting from a ternary query composed of the action, the object or item that receives the action, and the expected result, the planning algorithm is able to attain the course of actions that provides a similar functionality. To summarize, the result pro-vided by the planner for the example analyzed here generates the following course of actions: 1 2 3 4 5. Experimental validation
The design of an evaluation methodology is a crucial issue by which we assess the end user X  X  degree of satisfaction, compare the performance of different alternatives and provide some feed-back towards a process of continuous improvement and optimi-zation. Nevertheless, this evaluation process entails a high degree of complexity since many different aspects, some of which are highly subjective, are involved. The methodology proposed here is outlined in Fig. 7 .

According to Fig. 7 , the process of evaluation for each event that matches the MAS goals generates a vector of attributes, which are tightly related to the services generated and their (i.e. the goodness) of the system X  X  response by means of a rule-based grading approach, which is generated using human exper-tise and the end user expectations. It should be noted that the overall goal is to identify intrusions as quick as possible, notify the security staff providing useful information and reduce human intervention as much as possible in the whole process. Finally, the outcome of the evaluation process provides the grading of the system X  X  response and generates statistics and time series for a more in-depth analysis.

The evaluation process described here can be implemented to be executed online in real-time, or off-line from the data cap-tured. Alternatively, it can be used at the design stage by implementing it in numerical simulations. The nature of the problem, which involves events and services, can be suitably addressed by means of discrete-event simulation tools (such as Arena, or Matlab/Simulink).

The result of the evaluation process may also be very useful for other purposes such as condition monitoring. To this end, fitness variations can alert us of changes including device failures, vulnerabilities, environment and user habits variations that must be considered to redesign the system.

The key elements of the evaluation process are described in the following subsections. 5.1. Vector of attributes
The vector of attributes must gather all the valuable informa-tion regarding the system response provided for a certain event.
In the system presented it is particularly important to assess the benefits that composite services will bring. The vector of attri-butes could consist of the following elements: event start time; event duration; type of event; services provided, including the type of service (basic or composite), the number of basic or composite services provided, the service response times, and other particular characteristics, such as the level of human intervention and the resources involved. 5.2. Fitness evaluation
Once the vector of attributes has been generated for a certain event, the system response has to be evaluated. The approach adopted here is to create a set of rules designed to establish the criteria and quantify the fitness of the system response, according to the vector of attributes. Depending on the type of event, there are certain user expectations which must be fulfilled such as: response time, information provided by the system, and finally, how successfully the situation has been handled. The various aspects to be graded by the rules for each type of event are: number of basic services provided; the number of composite services provided; the ratio between composite services and basic services; the response time for each service; the usefulness of the services provided according to the type of event and the rate of success of certain services.

The grades given, based on those rules, must be weighted, according to the significance of each graded feature and added to obtain overall fitness value. Since composite services reduce human intervention and provide more valuable information, the attributes related to them will have higher weights because their contribution to the goodness of the response is higher. 5.3. An example
A simplified example is presented here to illustrate the evaluation process described. The example is a surveillance application, where the scenario considered is a room containing a presence sensor and a camera. The image of the camera can be processed by a face recognition software application.
In this example, only one type of event is considered: human presence in the room. Regarding the services provided, those which are most basic are the state of the presence sensor, the video streaming from the camera and the face recognition output; while the composite services are combinations of these according to the common-sense reasoning system implemented for auto-matic service composition. In this case, two composite services have been considered. One of them notifies the security staff when the sensor detects presence and automatically provides the video images. The other composite service also launches the face recognition application and provides its output.

For each event, a vector of attributes is generated, which contains the most relevant information about the system response and the services provided. Examples of attributes for sensor, or the output of the face recognition application and the delay when providing this output. The fitness evaluation is then performed by grading each individual attribute according to a set of rules. Finally, the overall fitness of the system response is obtained by multiplying the grades of each attribute by a weight and adding them all as F  X  where F is the fitness, N is the total of number of attributes, and w n and g n are the weight and grade of the n th attribute respectively. The value of F is normalized in the range 0 X 100.
The weight of each concept is established according to its contribution and how significant it is when assessing the good-ness of the response. Attributes related to composite services have a higher weight than basic ones since they better fulfil user needs and will reduce human intervention when responding to events. Hence, the goodness of a response will be enhanced by composite services and the resulting fitness value will be higher.

The example described has been simulated using probabilistic distributions to model the availability, rate of success and response time of the services previously described. Three differ-ent cases have been considered: in case 1 only basic services are provided; in case 2 basic and composite services are provided, and the face recognition application has a success rate of 10%; in case 3 basic and composite services are also provided, but the face recognition application has a success rate of 90%. A simulation with 1000 events has been run for each case. Fig. 8 shows the logged.

Table 1 shows the mean value and standard deviation of the fitness for each case. It also shows the percentage of events in which composite services are provided.

It can be concluded from the observed results that case composite services that better fulfil the user needs and the success rate of the face recognition application is higher. The suitability of the evaluation methodology proposed here has been proved to serve as a mean to rate the goodness of system responses and assist in the validation of the proposed solution. 6. Conclusions
The work presented in this paper provides a semantic model based solution with which to the address the self-sufficiency issue demanded by systems for ambient intelligence by means of an automatic service composition approach. The proposed semantic model is adopted by the different elements of which the archi-tectural solution is composed, thus allowing composite services to be automatically devised, composed and executed.

This endeavor has been mainly motivated by the need to encompass user-centered and device-centered approaches into a context-centered view, less restrictive and more coherent with the ambient intelligence paradigm. The revision of the state-of-the-art of frameworks for ambient intelligence brings into light the rigidness and the incapability to address novel situation that characterize such systems. The analysis of those systems evidence that these weaknesses are rooted at the independence with which the different framework layers are being addressed. In this regard, the proposal of a simple enough semantic model is the approach advocated here as the most suitable mean to make the system work as a whole.

Additionally, the proposed semantic model needs to be grounded in a philosophical theory of actions, in such a way that actions and events should be at the core of the formal model advocated here. In this sense, the capability to provide responses to unexpected situations can be split it into two sub-capabilities.
On the one hand it depends on the capability to understand ongoing situations and on the other hand it is also based on the capability to elaborate a system responses to the noticed situa-tions. Understanding situations and implementing responses are two activities that cannot be decoupled from the notion of actions and events. Ultimately, the fact that the majority of the semantic model found in the literature overlooks both concepts is recalled here as an additional reason motivating the need for yet another semantic model.

It cannot be obviated that actions and events are key concepts for ambient intelligence domain knowledge, and this should be reflected in the semantic model. On the base of such a semantic model, in which actions differs from events, this work proposes a comprehensive solution to self-sufficiency and autonomy require-ments grounded on automatic service composition.

Automatic service composition is a complex task that requires from the use of standards in order to unify the way how services are discovered, instantiated, or modified. Additionally, it is also necessary to establish some mapping mechanisms capable of translating high-level actions into service instantiation without requiring human assistance. To this end, an approach based on common-sense planning is described. The planing strategy requires an extensive knowledge-based system in which com-mon-sense reasoning can be accomplished and knowledge con-cerning contexts and every day life can be held.
 Combining a belief, desire, and intention approach with the
Scone system sets the basis for implementing an action planning, capable of solving the problem of automating the service compo-between the heterogeneous services and the system supervising the environment. Service instantiation and supervision is achieved by simply supervising the communication channels in which information is published and from which services receive invocations.
 Acknowledgments This research was supported by the Spanish Ministry of
Science and Innovation under the project DAMA (TEC2008-06553/TEC) and by Spanish Technological and Industrial Devel-opment Center -Ministry of Industry, under the project  X  X  X NER-
GOS: Technologies for the automated and intelligent management future power grid X  X  (CEN-20091048).
 References
