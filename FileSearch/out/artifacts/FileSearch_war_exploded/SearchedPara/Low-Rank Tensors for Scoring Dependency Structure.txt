 Finding an expressive representation of input sen-tences is crucial for accurate parsing. Syntac-tic relations manifest themselves in a broad range of surface indicators, ranging from morphological to lexical, including positional and part-of-speech (POS) tagging features. Traditionally, parsing re-search has focused on modeling the direct connec-tion between the features and the predicted syntac-tic relations such as head-modifier (arc) relations in dependency parsing. Even in the case of first-order parsers, this results in a high-dimensional vector representation of each arc. Discrete fea-tures, and their cross products, can be further com-plemented with auxiliary information about words participating in an arc, such as continuous vector representations of words. The exploding dimen-sionality of rich feature vectors must then be bal-anced with the difficulty of effectively learning the associated parameters from limited training data.
A predominant way to counter the high dimen-sionality of features is to manually design or select a meaningful set of feature templates, which are used to generate different types of features (Mc-Donald et al., 2005a; Koo and Collins, 2010; Mar-tins et al., 2013). Direct manual selection may be problematic for two reasons. First, features may lack clear linguistic interpretation as in distribu-tional features or continuous vector embeddings of words. Second, designing a small subset of tem-plates (and features) is challenging when the rel-evant linguistic information is distributed across the features. For instance, morphological proper-ties are closely tied to part-of-speech tags, which in turn relate to positional features. These features are not redundant. Therefore, we may suffer a per-formance loss if we select only a small subset of the features. On the other hand, by including all the rich features, we face over-fitting problems.
We depart from this view and leverage high-dimensional feature vectors by mapping them into low dimensional representations. We begin by representing high-dimensional feature vectors as multi-way cross-products of smaller feature vec-tors that represent words and their syntactic rela-tions (arcs). The associated parameters are viewed as a tensor (multi-way array) of low rank, and opti-mized for parsing performance. By explicitly rep-resenting the tensor in a low-rank form, we have direct control over the effective dimensionality of the set of parameters. We obtain role-dependent low-dimensional representations for words (head, modifier) that are specifically tailored for parsing accuracy, and use standard online algorithms for optimizing the low-rank tensor components.

The overall approach has clear linguistic and computational advantages:
We implement the low-rank factorization model in the context of first-and third-order depen-dency parsing. The model was evaluated on 14 languages, using dependency data from CoNLL 2008 and CoNLL 2006. We compare our results against the MST (McDonald et al., 2005a) and Turbo (Martins et al., 2013) parsers. The low-rank parser achieves average performance of 89.08% across 14 languages, compared to 88.73% for the Turbo parser, and 87.19% for MST. The power of the low-rank model becomes evident in the ab-sence of any part-of-speech tags. For instance, on the English dataset, the low-rank model trained without POS tags achieves 90.49% on first-order parsing, while the baseline gets 86.70% if trained under the same conditions, and 90.58% if trained with 12 core POS tags. Finally, we demonstrate that the model can successfully leverage word vec-tor representations, in contrast to the baselines. Selecting Features for Dependency Parsing A great deal of parsing research has been dedicated to feature engineering (Lazaridou et al., 2013; Marton et al., 2010; Marton et al., 2011). While in most state-of-the-art parsers, features are se-lected manually (McDonald et al., 2005a; McDon-ald et al., 2005b; Koo and Collins, 2010; Mar-tins et al., 2013; Zhang and McDonald, 2012a; Rush and Petrov, 2012a), automatic feature selec-tion methods are gaining popularity (Martins et al., 2011b; Ballesteros and Nivre, 2012; Nilsson and Nugues, 2010; Ballesteros, 2013). Following stan-dard machine learning practices, these algorithms iteratively select a subset of features by optimizing parsing performance on a development set. These feature selection methods are particularly promis-ing in parsing scenarios where the optimal feature set is likely to be a small subset of the original set of candidate features. Our technique, in contrast, is suitable for cases where the relevant information is distributed across a larger set of related features. Embedding for Dependency Parsing A lot of recent work has been done on mapping words into vector spaces (Collobert and Weston, 2008; Turian et al., 2010; Dhillon et al., 2011; Mikolov et al., 2013). Traditionally, these vector representations have been derived primarily from co-occurrences of words within sentences, ignoring syntactic roles of the co-occurring words. Nevertheless, any such word-level representation can be used to offset in-herent sparsity problems associated with full lexi-calization (Cirik and S  X  ensoy, 2013). In this sense they perform a role similar to POS tags.

Word-level vector space embeddings have so far had limited impact on parsing performance. From a computational perspective, adding non-sparse vectors directly as features, including their combinations, can significantly increase the num-ber of active features for scoring syntactic struc-tures (e.g., dependency arc). Because of this is-sue, Cirik and S  X  ensoy (2013) used word vectors only as unigram features (without combinations) as part of a shift reduce parser (Nivre et al., 2007). The improvement on the overall parsing perfor-mance was marginal. Another application of word vectors is compositional vector grammar (Socher et al., 2013). While this method learns to map word combinations into vectors, it builds on ex-isting word-level vector representations. In con-trast, we represent words as vectors in a manner that is directly optimized for parsing. This frame-work enables us to learn new syntactically guided embeddings while also leveraging separately esti-mated word vectors as starting features, leading to improved parsing performance.
 Dimensionality Reduction Many machine learning problems can be cast as matrix problems where the matrix represents a set of co-varying parameters. Such problems include, for example, multi-task learning and collaborative filtering. Rather than assuming that each parameter can be set independently of others, it is helpful to assume that the parameters vary in a low dimensional subspace that has to be estimated together with the parameters. In terms of the parameter matrix, this corresponds to a low-rank assumption. Low-rank constraints are commonly used for improving generalization (Lee and Seung, 1999; Srebro et al., 2003; Srebro et al., 2004; Evgeniou and Pontil, 2007) A strict low-rank assumption can be restrictive. Indeed, recent approaches to matrix problems de-compose the parameter matrix as a sum of low-rank and sparse matrices (Tao and Yuan, 2011; Zhou and Tao, 2011). The sparse matrix is used to highlight a small number of parameters that should vary independently even if most of them lie on a low-dimensional subspace (Waters et al., 2011; Chandrasekaran et al., 2011). We follow this de-composition while extending the parameter matrix into a tensor.

Tensors are multi-way generalizations of ma-trices and possess an analogous notion of rank. Tensors are increasingly used as tools in spec-tral estimation (Hsu and Kakade, 2013), includ-ing in parsing (Cohen et al., 2012) and other NLP problems (de Cruys et al., 2013), where the goal is to avoid local optima in maximum likelihood estimation. In contrast, we expand features for parsing into a multi-way tensor, and operate with an explicit low-rank representation of the associ-ated parameter tensor. The explicit representa-tion sidesteps inherent complexity problems asso-ciated with the tensor rank (Hillar and Lim, 2009). Our parameters are divided into a sparse set corre-sponding to manually chosen MST or Turbo parser features and a larger set governed by a low-rank tensor. We will commence here by casting first-order de-pendency parsing as a tensor estimation problem. We will start by introducing the notation used in the paper, followed by a more formal description of our dependency parsing task. 3.1 Basic Notations way array). We denote each element of the tensor as A i,j,k where i  X  [ n ] ,j  X  [ n ] ,k  X  [ d ] and [ n ] is a shorthand for the set of integers { 1 , 2 ,  X  X  X  ,n } . Similarly, we use M i,j and u i to represent the ele-ments of matrix M and vector u , respectively.
We define the inner product of two tensors (or matrices) as  X  A,B  X  = vec ( A ) T vec ( B ) , where vec (  X  ) concatenates the tensor (or matrix) ele-ments into a column vector. The squared norm of a tensor/matrix is denoted by k A k 2 =  X  A,A  X  .
The Kronecker product of three vectors is de-noted by u  X  v  X  w and forms a rank-1 tensor such that Note that the vectors u , v , and w may be column or row vectors. Their orientation is defined based on usage. For example, u  X  v is a rank-1 matrix uv T when u and v are column vectors ( u T v if they are row vectors).
 We say that tensor A is in Kruskal form if where U,V  X  R r  X  n , W  X  R r  X  d and U ( i, :) is the i th row of matrix U . We will directly learn a low-rank tensor A (because r is small) in this form as one of our model parameters. 3.2 Dependency Parsing Let x be a sentence and Y ( x ) the set of possible dependency trees over the words in x . We assume that the score S ( x,y ) of each candidate depen-dency tree y  X  Y ( x ) decomposes into a sum of  X  X ocal X  scores for arcs. Specifically: S ( x,y ) = where h  X  m is the head-modifier dependency arc in the tree y . Each y is understood as a col-lection of arcs h  X  m where h and m index words in x . 2 For example, x ( h ) is the word cor-responding to h . We suppress the dependence on x whenever it is clear from context. For exam-ple, s ( h  X  m ) can depend on x in complicated ways as discussed below. The predicted parse is obtained as  X  y = arg max y  X  X  ( x ) S ( x,y ) .
A key problem is how we parameterize the arc scores s ( h  X  m ) . Following the MST parser (McDonald et al., 2005a) we can define rich features characterizing each head-modifier arc, compiled into a sparse binary vector  X  h  X  m  X  R L that depends on the sentence x as well as the chosen arc h  X  m (again, we suppress the depen-dence on x ). Based on this feature representation, we define the score of each arc as s  X  ( h  X  m ) = Table 1: Word feature templates used by our model. pos, form, lemma and morph stand for the fine POS tag, word form, word lemma and the morphology feature (provided in CoNLL format file) of the current word. There is a bias term that is always active for any word. The suffixes -p and -n refer to the left and right of the current word re-spectively. For example, pos-p means the POS tag to the left of the current word in the sentence.  X   X , X  h  X  m  X  where  X   X  R L represent adjustable pa-rameters to be learned, and L is the number of pa-rameters (and possible features in  X  h  X  m ).
We can alternatively specify arc features in terms of rank-1 tensors by taking the Kronecker product of simpler feature vectors associated with the head (vector  X  h  X  R n ), and modifier (vector  X  m  X  R n ), as well as the arc itself (vector  X  h,m  X  R d ). Here  X  h,m is much lower dimensional than the MST arc feature vector  X  h  X  m discussed ear-lier. For example,  X  h,m may be composed of only indicators for binned arc lengths 3 .  X  h and  X  m , on the other hand, are built from features shown in Table 1. By taking the cross-product of all these component feature vectors, we obtain the full fea-ture representation for arc h  X  m as a rank-1 ten-sor Note that elements of this rank-1 tensor include feature combinations that are not part of the fea-ture crossings in  X  h  X  m . In this sense, the rank-1 tensor represents a substantial feature expansion. The arc score s tensor ( h  X  m ) associated with the tensor representation is defined analogously as where the adjustable parameters A also form a ten-sor. Given the typical dimensions of the compo-nent feature vectors,  X  h ,  X  m ,  X  h,m , it is not even possible to store all the parameters in A . Indeed, in the full English training set of CoNLL-2008, the tensor involves around 8  X  10 11 entries while the MST feature vector has approximately 1 . 5  X  10 7 features. To counter this feature explosion, we re-strict the parameters A to have low rank.
 Low-Rank Dependency Scoring We can repre-sent a rank-r tensor A explicitly in terms of pa-rameter matrices U , V , and W as shown in Eq. 1. As a result, the arc score for the tensor reduces to evaluating U X  h , V  X  m , and W X  h,m which are all r dimensional vectors and can be computed effi-ciently based on any sparse vectors  X  h ,  X  m , and  X  h,m . The resulting arc score s tensor ( h  X  m ) is then By learning parameters U , V , and W that function well in dependency parsing, we also learn context-dependent embeddings for words and arcs. Specif-ically, U X  h (for a given sentence, suppressed) is an r dimensional vector representation of the word corresponding to h as a head word. Similarly, V  X  m provides an analogous representation for a modifier m . Finally, W X  h,m is a vector embed-ding of the supplemental arc-dependent informa-tion. The resulting embedding is therefore tied to the syntactic roles of the words (and arcs), and learned in order to perform well in parsing.
We expect a dependency parsing model to ben-efit from several aspects of the low-rank tensor scoring. For example, we can easily incorpo-rate additional useful features in the feature vec-tors  X  h ,  X  m and  X  h,m , since the low-rank assump-tion (for small enough r ) effectively counters the otherwise uncontrolled feature expansion. More-over, by controlling the amount of information we can extract from each of the component fea-ture vectors (via rank r ), the statistical estimation problem does not scale dramatically with the di-mensions of  X  h ,  X  m and  X  h,m . In particular, the low-rank constraint can help generalize to unseen arcs. Consider a feature  X  ( x ( h ) = a )  X   X  ( x ( m ) = b )  X   X  ( dis ( x,h,m ) = c ) which is non-zero only for an arc a  X  b with distance c in sentence x . If the arc has not been seen in the available train-ing data, it does not contribute to the traditional arc score s  X  (  X  ) . In contrast, with the low-rank con-straint, the arc score in Eq. 2 would typically be non-zero.
 Combined Scoring Our parsing model aims to combine the strengths of both traditional features from the MST/Turbo parser as well as the new low-rank tensor features. In this way, our model is able to capture a wide range of information in-cluding the auxiliary features without having un-controlled feature explosion, while still having the full accessibility to the manually engineered fea-tures that are proven useful. Specifically, we de-fine the arc score s  X  ( h  X  m ) as the combination rank r and  X   X  [0 , 1] (balancing the two scores) represent hyper-parameters in our model. The training set D = { ( X  x i ,  X  y i ) } N i =1 consists of N pairs, where each pair consists of a sentence x i and the corresponding gold (target) parse y i . The goal is to learn values for the parameters  X  , U , V and W that optimize the combined scoring func-tion S  X  ( x,y ) = in Eq. 3, for parsing performance. We adopt a maximum soft-margin framework for this learning problem. Specifically, we find parameters  X  , U , V , W , and {  X  i } that minimize C s.t. S  X  ( X  x i ,  X  y i )  X  S  X  ( X  x i ,y i ) + k  X  y i  X  y where k  X  y i  X  y i k 1 is the number of mismatched arcs between the two trees, and  X  i is a non-negative slack variable. The constraints serve to separate the gold tree from other alternatives in Y ( X  x i ) with a margin that increases with distance.

The objective as stated is not jointly convex with respect to U , V and W due to our explicit representation of the low-rank tensor. However, if we fix any two sets of parameters, for example, if we fix V and W , then the combined score S  X  ( x,y ) will be a linear function of both  X  and U . As a re-sult, the objective will be jointly convex with re-spect to  X  and U and could be optimized using standard tools. However, to accelerate learning, we adopt an online learning setup. Specifically, we use the passive-aggressive learning algorithm (Crammer et al., 2006) tailored to our setting, up-dating pairs of parameter sets, (  X ,U ) , (  X ,V ) and (  X ,W ) in an alternating manner. This method is described below.
 Online Learning In an online learning setup, we update parameters successively based on each sentence. In order to apply the passive-aggressive algorithm, we fix two of U , V and W (say, for ex-ample, V and W ) in an alternating manner, and apply a closed-form update to the remaining pa-rameters (here U and  X  ). This is possible since the objective function with respect to (  X ,U ) has a similar form as in the original passive-aggressive algorithm. To illustrate this, consider a training sentence x i . The update involves finding first the best competing tree, which is the tree that violates the constraint in Eq. 4 most (i.e. maximizes the loss  X  i ). We then obtain parameter increments  X   X  and  X  U by solv-ing s.t. S  X  ( X  x i ,  X  y i )  X  S  X  ( X  x i ,  X  y i ) + k  X  y In this way, the optimization problem attempts to keep the parameter change as small as possible, while forcing it to achieve mostly zero loss on this single instance. This problem has a closed form solution where loss = S  X  ( X  x i ,  X  y i ) + k  X  y i  X   X  y i k 1  X  S  X  du = where ( u v ) i = u i v i is the Hadamard (element-wise) product. The magnitude of change of  X  and U is controlled by the parameter C . By varying C , we can determine an appropriate step size for the online updates. The updates also illustrate how  X  balances the effect of the MST component of the score relative to the low-rank tensor score. When  X  = 0 , the arc scores are entirely based on the low-rank tensor and  X   X  = 0 . Note that  X  h ,  X  m ,  X  h,m , and  X  h  X  m are typically very sparse for each word or arc. Therefore du and d X  are also sparse and can be computed efficiently.
 Initialization The alternating online algorithm relies on how we initialize U , V , and W since each update is carried out in the context of the other two. A random initialization of these parameters is unlikely to work well, both due to the dimensions involved, and the nature of the alternating updates. We consider here instead a reasonable determinis-tic  X  X uess X  as the initialization method.

We begin by training our model without any low-rank parameters, and obtain parameters  X  . The majority of features in this MST component can be expressed as elements of the feature ten-sor, i.e., as [  X  h  X   X  m  X   X  h,m ] i,j,k . We can there-fore create a tensor representation of  X  such that B i,j,k equals the corresponding parameter value in  X  . We use a low-rank version of B as the ini-tialization. Specifically, we unfold the tensor B into a matrix B ( h ) of dimensions n and nd , where n = dim (  X  h ) = dim (  X  m ) and d = dim (  X  h,m ) . For instance, a rank-1 tensor can be unfolded as u  X  v  X  w = u  X  vec ( v  X  w ) . We compute the top-r SVD of the resulting unfolded matrix such that B ( h ) = P T SQ . U is initialized as P . Each right singular vector S i Q ( i, :) is also a matrix in of this matrix are assigned to V ( i, :) and W ( i, :) respectively. In our implementation, we run one epoch of our model without low-rank parameters and initialize the tensor A .
 Parameter Averaging The passive-aggressive algorithm regularizes the increments (e.g.  X   X  and  X  U ) during each update but does not include any overall regularization. In other words, keeping up-dating the model may lead to large parameter val-ues and over-fitting. To counter this effect, we use parameter averaging as used in the MST and Turbo parsers. The final parameters are those averaged across all the iterations (cf. (Collins, 2002)). For simplicity, in our algorithm we average U , V , W and  X  separately, which works well empirically. Datasets We test our dependency model on 14 languages, including the English dataset from CoNLL 2008 shared tasks and all 13 datasets from CoNLL 2006 shared tasks (Buchholz and Marsi, 2006; Surdeanu et al., 2008). These datasets in-clude manually annotated dependency trees, POS tags and morphological information. Following standard practices, we encode this information as features.
 Methods We compare our model to MST and Turbo parsers on non-projective dependency pars-ing. For our parser, we train both a first-order parsing model (as described in Section 3 and 4) as well as a third-order model. The third order parser simply adds high-order features, those typ-ically used in MST and Turbo parsers, into our s ( x,y ) =  X   X , X  ( x,y )  X  scoring component. The decoding algorithm for the third-order parsing is based on (Zhang et al., 2014). For the Turbo parser, we directly compare with the recent pub-lished results in (Martins et al., 2013). For the MST parser, we train and test using the most re-plemented two additional baselines, NT-1st (first order) and NT-3rd (third order), corresponding to our model without the tensor component.
 Features For the arc feature vector  X  h  X  m , we use the same set of feature templates as MST v0.5.1. For head/modifier vector  X  h and  X  m , we show the complete set of feature templates used by our model in Table 1. Finally, we use a similar set of feature templates as Turbo v2.1 for 3rd order parsing.

To add auxiliary word vector representations, we use the publicly available word vectors (Cirik and S  X  ensoy, 2013), learned from raw data (Glober-son et al., 2007; Maron et al., 2010). Three languages in our dataset  X  English, German and Swedish  X  have corresponding word vectors in this tion varies by language: English has 50 dimen-sional word vectors, while German and Swedish have 25 dimensional word vectors. Each entry of the word vector is added as a feature value into feature vectors  X  h and  X  m . For each word in the sentence, we add its own word vector as well as the vectors of its left and right words.
 We should note that since our model parameter A is represented and learned in the low-rank form, we only have to store and maintain the low-rank projections U X  h , V  X  m and W X  h,m rather than ex-plicitly calculate the feature tensor  X  h  X   X  m  X   X  h,m . Therefore updating parameters and decoding a sentence is still efficient, i.e., linear in the num-ber of values of the feature vector. In contrast, assume we take the cross-product of the auxiliary word vector values, POS tags and lexical items of a word and its context, and add the crossed val-ues into a normal model (in  X  h  X  m ). The number of features for each arc would be at least quadratic, growing into thousands, and would be a significant impediment to parsing efficiency.
 Evaluation Following standard practices, we train our full model and the baselines for 10 epochs. As the evaluation measure, we use un-labeled attachment scores (UAS) excluding punc-tuation. In all the reported experiments, the hyper-parameters are set as follows: r = 50 (rank of the tensor), C = 1 for first-order model and C = 0 . 01 for third-order model. Overall Performance Table 2 shows the per-formance of our model and the baselines on 14 CoNLL datasets. Our model outperforms Turbo parser, MST parser, as well as its own variants without the tensor component. The improvements of our low-rank model are consistent across lan-guages: results for the first order parser are better on 11 out of 14 languages. By comparing NT-1st and NT-3rd (models without low-rank) with our full model (with low-rank), we obtain 0.7% abso-lute improvement on first-order parsing, and 0.3% improvement on third-order parsing. Our model also achieves the best UAS on 5 languages.

We next focus on the first-order model and gauge the impact of the tensor component. First, we test our model by varying the hyper-parameter  X  which balances the tensor score and the tradi-tional MST/Turbo score components. Figure 1 shows the average UAS on CoNLL test datasets after each training epoch. We can see that the im-provement of adding the low-rank tensor is con-sistent across various choices of hyper parame-Figure 1: Average UAS on CoNLL testsets af-ter different epochs. Our full model consistently performs better than NT-1st (its variation without tensor component) under different choices of the hyper-parameter  X  . English 91.84 92.07 German 90.24 90.48 Swedish 89.86 90.38 Table 3: Results of adding unsupervised word vec-tors to the tensor. Adding this information yields consistent improvement for all languages. ter  X  . When training with the tensor component alone (  X  = 0 ), the model converges more slowly. Learning of the tensor is harder because the scor-ing function is not linear (nor convex) with respect to parameters U , V and W . However, the tensor scoring component achieves better generalization on the test data, resulting in better UAS than NT-1st after 8 training epochs.

To assess the ability of our model to incorpo-rate a range of features, we add unsupervised word vectors to our model. As described in previous section, we do so by appending the values of dif-ferent coordinates in the word vector into  X  h and  X  m . As Table 3 shows, adding this information in-creases the parsing performance for all the three languages. For instance, we obtain more than 0.5% absolute improvement on Swedish.
 Syntactic Abstraction without POS Since our model learns a compressed representation of fea-ture vectors, we are interested to measure its per-formance when part-of-speech tags are not pro-vided (See Table 4). The rationale is that given all other features, the model would induce representa-tions that play a similar role to POS tags. Note that Table 4: The first three columns show parsing re-sults when models are trained without POS tags. The last column gives the upper-bound, i.e. the performance of a parser trained with 12 Core POS tags . The low-rank model outperforms NT-1st by a large margin. Adding word vector features fur-ther improves performance. the performance of traditional parsers drops when tags are not provided. For example, the perfor-mance gap is 10% on German. Our experiments show that low-rank parser operates effectively in the absence of tags. In fact, it nearly reaches the performance of the original parser that used the tags on English.
 Examples of Derived Projections We manu-ally analyze low-dimensional projections to assess whether they capture syntactic abstraction. For this purpose, we train a model with only a ten-sor component (such that it has to learn an accu-rate tensor) on the English dataset and obtain low dimensional embeddings U X  w and V  X  w for each word. The two r-dimension vectors are concate-nated as an  X  X veraged X  vector. We use this vector to calculate the cosine similarity between words. Table 5 shows examples of five closest neighbors of queried words. While these lists include some noise, we can clearly see that the neighbors ex-hibit similar syntactic behavior. For example,  X  X n X  is close to other prepositions. More interestingly, we can consider the impact of syntactic context on the derived projections. The bottom part of Table 5 shows that the neighbors change substan-tially depending on the syntactic role of the word. For example, the closest words to the word  X  X n-crease X  are verbs in the context phrase  X  X ill in-crease again X , while the closest words become nouns given a different phrase  X  X n increase of X . Running Time Table 6 illustrates the impact of estimating low-rank tensor parameters on the run-ning time of the algorithm. For comparison, we also show the NT-1st times across three typical languages. The Arabic dataset has the longest av-erage sentence length, while the Chinese dataset Table 5: Five closest neighbors of the queried words (shown in bold). The upper part shows our learned embeddings group words with similar syn-tactic behavior. The two bottom parts of the table demonstrate that how the projections change de-pending on the syntactic context of the word. Arabic 42K 32 0.13 0.22 Chinese 337K 6 0.37 0.65 English 958K 24 1.88 2.83 Table 6: Comparison of training times across three typical datasets. The second column is the number of tokens in each data set. The third column shows the average sentence length. Both first-order mod-els are implemented in Java and run as a single process. has the shortest sentence length in CoNLL 2006. Based on these results, estimating a rank-50 tensor together with MST parameters only increases the running time by a factor of 1.7. Accurate scoring of syntactic structures such as head-modifier arcs in dependency parsing typi-cally requires rich, high-dimensional feature rep-resentations. We introduce a low-rank factoriza-tion method that enables to map high dimensional feature vectors into low dimensional representa-tions. Our method maintains the parameters as a low-rank tensor to obtain low dimensional repre-sentations of words in their syntactic roles, and to leverage modularity in the tensor for easy train-ing with online algorithms. We implement the approach on first-order to third-order dependency parsing. Our parser outperforms the Turbo and MST parsers across 14 languages.

Future work involves extending the tensor com-ponent to capture higher-order structures. In par-ticular, we would consider second-order structures such as grandparent-head-modifier by increasing the dimensionality of the tensor. This tensor will accordingly be a four or five-way array. The online update algorithm remains applicable since each di-mension is optimized in an alternating fashion. The authors acknowledge the support of the MURI program (W911NF-10-1-0533) and the DARPA BOLT program. This research is developed in col-laboration with the Arabic Language Technoligies (ALT) group at Qatar Computing Research Insti-tute (QCRI) within the LYAS project. We thank Volkan Cirik for sharing the unsupervised word vector data. Thanks to Amir Globerson, Andreea Gane, the members of the MIT NLP group and the ACL reviewers for their suggestions and com-ments. Any opinions, findings, conclusions, or recommendations expressed in this paper are those of the authors, and do not necessarily reflect the views of the funding organizations.

