 A crowning achievement of historical linguistics is the comparative method (Ohala, 1993), wherein linguists use word similarity to elucidate the hid-den phonological and morphological processes which govern historical descent. The comparative method requires reasoning about three important hidden variables: the overall phylogenetic guide tree among languages, the evolutionary parame-ters of the ambient changes at each branch, and the cognate group structure that specifies which words share common ancestors.

All three of these variables interact and inform each other, and so historical linguists often con-sider them jointly. However, linguists are cur-rently required to make qualitative judgments re-garding the relative likelihood of certain sound changes, cognate groups, and so on. Several re-cent statistical methods have been introduced to provide increased quantitative backing to the com-parative method (Oakes, 2000; Bouchard-C  X  ot  X  e et al., 2007; Bouchard-C  X  ot  X  e et al., 2009); others have modeled the spread of language changes and spe-ciation (Ringe et al., 2002; Daum  X  e III and Camp-bell, 2007; Daum  X  e III, 2009; Nerbonne, 2010). These automated methods, while providing ro-bustness and scale in the induction of ancestral word forms and evolutionary parameters, assume that cognate groups are already known. In this work, we address this limitation, presenting a model in which cognate groups can be discovered automatically.

Finding cognate groups is not an easy task, because underlying morphological and phonolog-ical changes can obscure relationships between words, especially for distant cognates, where sim-ple string overlap is an inadequate measure of sim-ilarity. Indeed, a standard string similarity met-ric like Levenshtein distance can lead to false positives. Consider the often cited example of Greek /ma:ti/ and Malay /mata/ , both meaning  X  X ye X  (Bloomfield, 1938). If we were to rely on Levenshtein distance, these words would seem to be a highly attractive match as cognates: they are nearly identical, essentially differing in only a sin-gle character. However, no linguist would posit that these two words are related. To correctly learn that they are not related, linguists typically rely on two kinds of evidence. First, because sound change is largely regular, we would need to com-monly see /i/ in Greek wherever we see /a/ in Malay (Ross, 1950). Second, we should look at languages closely related to Greek and Malay, to see if similar patterns hold there, too.

Some authors have attempted to automatically detect cognate words (Mann and Yarowsky, 2001; Lowe and Mazaudon, 1994; Oakes, 2000; Kon-drak, 2001; Mulloni, 2007), but these methods typically work on language pairs rather than on larger language families. To fully automate the comparative method, it is necessary to consider multiple languages, and to do so in a model which couples cognate detection with similarity learning.
In this paper, we present a new generative model for the automatic induction of cognate groups given only (1) a known family tree of languages and (2) word lists from those languages. A prior on word survival generates a number of cognate groups and decides which groups are attested in each modern language. An evolutionary model captures how each word is generated from its par-ent word. Finally, an alignment model maps the flat word lists to cognate groups. Inference re-quires a combination of message-passing in the evolutionary model and iterative bipartite graph matching in the alignment model.

In the message-passing phase, our model en-codes distributions over strings as weighted finite state automata (Mohri, 2009). Weighted automata have been successfully applied to speech process-ing (Mohri et al., 1996) and more recently to mor-phology (Dreyer and Eisner, 2009). Here, we present a new method for automatically compress-ing our message automata in a way that can take into account prior information about the expected outcome of inference.

In this paper, we focus on a transcribed word list of 583 cognate sets from three Romance lan-guages (Portuguese, Italian and Spanish), as well as their common ancestor Latin (Bouchard-C  X  ot  X  e et al., 2007). We consider both the case where we know that all cognate groups have a surface form in all languages, and where we do not know that. On the former, easier task we achieve iden-tification accuracies of 90.6%. On the latter task, we achieve F1 scores of 73.6%. Both substantially beat baseline performance. In this section, we describe a new generative model for vocabulary lists in multiple related lan-guages given the phylogenetic relationship be-tween the languages (their family tree). The gener-ative process factors into three subprocesses: sur-vival, evolution, and alignment, as shown in Fig-ure 1(a). Survival dictates, for each cognate group, which languages have words in that group. Evo-lution describes the process by which daughter words are transformed from their parent word. Fi-nally, alignment describes the  X  X crambling X  of the word lists into a flat order that hides their lineage. We present each subprocess in detail in the follow-ing subsections. 2.1 Survival First, we choose a number G of ancestral cognate groups from a geometric distribution. For each cognate group g , our generative process walks down the tree. At each branch, the word may ei-ther survive or die. This process is modeled in a  X  X eath tree X  with a Bernoulli random variable S `g for each language ` and cognate group g specify-ing whether or not the word died before reaching that language. Death at any node in the tree causes all of that node X  X  descendants to also be dead. This process captures the intuition that cognate words are more likely to be found clustered in sibling lan-guages than scattered across unrelated languages. 2.2 Evolution Once we know which languages will have an at-tested word and which will not, we generate the actual word forms. The evolution component of the model generates words according to a branch-specific transformation from a node X  X  immediate ancestor. Figure 1(a) graphically describes our generative model for three Romance languages: Italian, Portuguese, and Spanish. 1 In each cog-nate group, each word W ` is generated from its parent according to a conditional distribution with parameter  X  ` , which is specific to that edge in the tree, but shared between all cognate groups.
In this paper, each  X  ` takes the form of a pa-rameterized edit distance similar to the standard Levenshtein distance. Richer models  X  such as the ones in Bouchard-C  X  ot  X  e et al. (2007)  X  could in-stead be used, although with an increased infer-ential cost. The edit transducers are represented schematically in Figure 1(b). Characters x and y are arbitrary phonemes, and  X  ( x,y ) represents the cost of substituting x with y .  X  represents the empty phoneme and is used as shorthand for inser-tion and deletion, which have parameters  X  and  X  , respectively.

As an example, see the illustration in Fig-ure 1(c). Here, the Italian word /fwOko/ ( X  X ire X ) is generated from its parent form /fokus/ ( X  X earth X ) by a series of edits: two matches, two substitu-tions ( /u/  X  /o/ , and /o/  X  /O/ ), one insertion ( w ) and one deletion ( /s/ ). The probability of each individual edit is determined by  X  . Note that the marginal probability of a specific Italian word con-ditioned on its Vulgar Latin parent is the sum over all possible derivations that generate it. 2.3 Alignment Finally, at the leaves of the trees are the observed words. (We take non-leaf nodes to be unobserved.) Here, we make the simplifying assumption that in any language there is at most one word per lan-guage per cognate group. Because the assign-ments of words to cognates is unknown, we spec-ify an unknown alignment parameter  X  ` for each modern language which is an alignment of cognate groups to entries in the word list. In the case that every cognate group has a word in each language, each  X  ` is a permutation. In the more general case that some cognate groups do not have words from all languages, this mapping is injective from words to cognate groups. From a generative perspective,  X  ` generates observed positions of the words in some vocabulary list.

In this paper, our task is primarily to learn the alignment variables  X  ` . All other hidden variables are auxiliary and are to be marginalized to the greatest extent possible. In this section, we discuss the inference method for determining cognate assignments under fixed parameters  X  . We are given a set of languages and a list of words in each language, and our objec-tive is to determine which words are cognate with each other. Because the parameters  X  ` are either permutations or injections, the inference task is re-duced to finding an alignment  X  of the respective word lists to maximize the log probability of the observed words.  X   X  = arg max w ( `, X  ` ( g )) is the word in language ` that  X  ` has assigned to cognate group g . Maximizing this quantity directly is intractable, and so instead we use a coordinate ascent algorithm to iteratively maximize the alignment corresponding to a single language ` while holding the others fixed:  X  Each iteration is then actually an instance of bipartite graph matching, with the words in one language one set of nodes, and the current cognate groups in the other languages the other set of nodes. The edge affinities aff between these nodes are the conditional probabilities of each word w ` belonging to each cognate group g :
To compute these affinities, we perform in-ference in each tree to calculate the marginal distribution of the words from the language ` . For the marginals, we use an analog of the for-ward/backward algorithm. In the upward pass, we send messages from the leaves of the tree toward the root. For observed leaf nodes W d , we have: and for interior nodes W i :  X  In the downward pass (toward the lan-guage ` ), we sum over ancestral words W a : where a 0 is the ancestor of a . Computing these messages gives a posterior marginal distribution  X  ( w ` ) = p ( w ` | w  X  `, X  cisely the affinity score we need for the bipartite matching. We then use the Hungarian algorithm (Kuhn, 1955) to find the optimal assignment for the bipartite matching problem.

One important final note is initialization. In our early experiments we found that choosing a ran-dom starting configuration unsurprisingly led to rather poor local optima. Instead, we started with empty trees, and added in one language per itera-tion until all languages were added, and then con-tinued iterations on the full tree. So far we have only addressed searching for Viterbi alignments  X  under fixed parameters. In practice, it is important to estimate better para-metric edit distances  X  ` and survival variables S . To motivate the need for good transducers, consider the example of English  X  X ay X  / deI / and Latin  X  X i  X  es X  / dIe:s / , both with the same mean-ing. Surprisingly, these words are in no way re-lated, with English  X  X ay X  probably coming from a verb meaning  X  X o burn X  (OED, 1989). However, a naively constructed edit distance, which for ex-ample might penalize vowel substitutions lightly, would fail to learn that Latin words that are bor-rowed into English would not undergo the sound change / I /  X  / eI / . Therefore, our model must learn not only which sound changes are plausible (e.g. vowels turning into other vowels is more common than vowels turning into consonants), but which changes are appropriate for a given language. 2
At a high level, our learning algorithm is much like Expectation Maximization with hard assign-ments: after we update the alignment variables  X  and thus form new potential cognate sets, we re-estimate our model X  X  parameters to maximize the likelihood of those assignments. 3 The parameters can be learned through standard maximum likeli-hood estimation, which we detail in this section.
Because we enforce that a word in language d must be dead if its parent word in language a is dead, we just need to learn the conditional prob-abilities p ( S d = dead | S a = alive) . Given fixed assignments  X  , the maximum likelihood estimate can be found by counting the number of  X  X eaths X  that occurred between a child and a live parent, applying smoothing  X  we found adding 0.5 to be reasonable  X  and dividing by the total number of live parents.

For the transducers  X  , we learn parameterized edit distances that model the probabilities of dif-ferent sound changes. For each  X  ` we fit a non-uniform substitution, insertion, and deletion ma-trix  X  ( x,y ) . These edit distances define a condi-tional exponential family distribution when condi-tioned on an ancestral word. That is, for any fixed w
X where align( w a ,w d ) is the set of possible align-ments between the phonemes in words w a and w d .
We are seeking the maximum likelihood esti-mate of each  X  , given fixed alignments  X  : To find this maximizer for any given  X  ` , we need to find a marginal distribution over the edges connecting any two languages a and d . With this distribution, we calculate the expected  X  X lignment unigrams. X  That is, for each pair of phonemes x and y (or empty phoneme  X  ), we need to find the quantity: where we denote #( x,y ; z ) to be the num-ber of times the pair of phonemes ( x,y ) are aligned in alignment z . The exact method for computing these counts is to use an expectation semiring (Eisner, 2001).

Given the expected counts, we now need to nor-malize them to ensure that the transducer repre-sents a conditional probability distribution (Eis-ner, 2002; Oncina and Sebban, 2006). We have that, for each phoneme x in the ancestor language: Here, we have #(  X  ,  X  ; z ) = P x,y #( x,y ; z ) and #( x,  X  ; z ) = P y #( x,y ; z ) . The (1  X  P y 0  X  y 0 term ensure that for any ancestral phoneme x , P y  X  y + P y  X  ( x,y )+  X  x = 1 . These equations en-sure that the three transition types (insertion, sub-stitution/match, deletion) are normalized for each ancestral phoneme. In our model, it is not just the edit distances that are finite state machines. Indeed, the words themselves are string-valued random variables that have, in principle, an infinite domain. To represent distributions and messages over these variables, we chose weighted finite state automata, which can compactly represent functions over strings. Unfortunately, while initially compact, these au-tomata become unwieldy during inference, and so approximations must be used (Dreyer and Eisner, 2009). In this section, we summarize the standard algorithms and representations used for weighted finite state transducers. For more detailed treat-ment of the general transducer operations, we di-rect readers to Mohri (2009).

A weighted automaton (resp. transducer) en-codes a function over strings (resp. pairs of strings) as weighted paths through a directed graph. Each edge in the graph has a real-valued weight 4 and a label, which is a single phoneme in some alphabet  X  or the empty phoneme  X  (resp. pair of labels in some alphabet  X   X   X  ). The weight of a string is then the sum of all paths through the graph that accept that string.

For our purposes, we are concerned with three fundamental operations on weighted transducers. The first is computing the sum of all paths through a transducer, which corresponds to computing the partition function of a distribution over strings. This operation can be performed in worst-case cubic time (using a generalization of the Floyd-Warshall algorithm). For acyclic or feed-forward transducers, this time can be improved dramati-cally by using a generalization of Djisktra X  X  algo-rithm or other related algorithms (Mohri, 2009).
The second operation is the composition of two transducers. Intuitively, composition creates a new transducer that takes the output from the first trans-ducer, processes it through the second transducer, and then returns the output of the second trans-ducer. That is, consider two transducers T 1 and T . T 1 has input alphabet  X  and output alpha-bet  X  , while T 2 has input alphabet  X  and out-put alphabet  X  . The composition T 1  X  T 2 returns a new transducer over  X  and  X  such that ( T 1  X  T )( x,y ) = P u T 1 ( x,u )  X  T 2 ( u,y ) . In this paper, we use composition for marginalization and fac-tor products. Given a factor f 1 ( x,u ; T 1 ) and an-other factor f 2 ( u,y ; T 2 ) , composition corresponds to the operation  X  ( x,y ) = P u f 1 ( x,u ) f 2 ( u,y ) . For two messages  X  1 ( w ) and  X  2 ( w ) , the same al-gorithm can be used to find the product  X  ( w ) =  X  ( w )  X  2 ( w ) .
 The third operation is transducer minimization. Transducer composition produces O ( nm ) states, where n and m are the number of states in each transducer. Repeated compositions compound the problem: iterated composition of k transducers produces O ( n k ) states. Minimization alleviates this problem by collapsing indistinguishable states into a single state. Unfortunately, minimization does not always collapse enough states. In the next section we discuss approaches to  X  X ossy X  mini-mization that produce automata that are not ex-actly the same but are much smaller. Recall that in inference, when summing out in-terior nodes w i we calculated the product over incoming messages  X  d  X  i ( w i ) (Equation 1), and that these products are calculated using transducer composition. Unfortunately, the maximal number of states in a message is exponential in the num-ber of words in the cognate group. Minimization can only help so much: in order for two states to be collapsed, the distribution over transitions from those states must be indistinguishable. In practice, for the automata generated in our model, mini-mization removes at most half the states, which is not sufficient to counteract the exponential growth. Thus, we need to find a way to approximate a mes-sage  X  ( w ) using a simpler automata  X   X  ( w ;  X  ) taken from a restricted class parameterized by  X  .
In the context of transducers, previous authors have focused on a combination of n-best lists and unigram back-off models (Dreyer and Eis-ner, 2009), a schematic diagram of which is in Figure 2(d). For their problem, n-best lists are sensible: their nodes X  local potentials already fo-cus messages on a small number of hypotheses. In our setting, however, n-best lists are problem-atic; early experiments showed that a 10,000-best list for a typical message only accounts for 50% of message log perplexity. That is, the posterior marginals in our model are (at least initially) fairly flat.

An alternative approach might be to simply treat messages as unnormalized probability distri-butions, and to minimize the KL divergence be-tween some approximating message  X   X  ( w ) and the true message  X  ( w ) . However, messages are not always probability distributions and  X  because the number of possible strings is in principle infinite  X  they need not sum to a finite number. 5 Instead, we propose to minimize the KL divergence between the  X  X xpected X  marginal distribution and the ap-proximated  X  X xpected X  marginal distribution:  X   X  = arg min where  X  is a term acting as a surrogate for the pos-terior distribution over w without the information from  X  . That is, we seek to approximate  X  not on its own, but as it functions in an environment rep-resenting its final context. For example, if  X  ( w ) is a backward message,  X  could be a stand-in for a forward probability. 6
In this paper,  X  ( w ) is a complex automaton with potentially many states,  X   X  ( w ;  X  ) is a simple para-metric automaton with forms that we discuss be-low, and  X  ( w ) is an arbitrary (but hopefully fairly simple) automaton. The actual method we use is as follows. Given a deterministic prior automa-ton  X  , and a deterministic automaton topology  X   X   X  , we create the composed unweighted automaton  X   X   X   X   X  , and calculate arc transitions weights to min-imize the KL divergence between that composed transducer and  X   X   X  . The procedure for calcu-lating these statistics is described in Li and Eis-ner (2009), which amounts to using an expectation semiring (Eisner, 2001) to compute expected tran-sitions in  X   X   X   X   X  under the probability distribution  X   X   X  .

From there, we need to create the automaton  X   X  1  X   X   X   X   X  . That is, we need to divide out the influence of  X  ( w ) . Since we know the topology and arc weights for  X  ahead of time, this is often as simple as dividing arc weights in  X   X   X   X  by the corresponding arc weight in  X  ( w ) . For example, if  X  encodes a geometric distribution over word lengths and a uniform distribution over phonemes (that is,  X  ( w )  X  p | w | ), then computing  X   X  is as sim-ple as dividing each arc in  X   X   X   X  by p . 7
There are a number of choices for  X  . One is a hard maximum on the length of words. Another is to choose  X  ( w ) to be a unigram language model over the language in question with a geometric probability over lengths. In our experiments, we find that  X  ( w ) can be a geometric distribution over lengths with a uniform distribution over phonemes and still give reasonable results. This distribution captures the importance of shorter strings while still maintaining a relatively weak prior.

What remains is the selection of the topologies for the approximating message  X   X  . We consider three possible approximations, illustrated in Fig-ure 2. The first is a plain unigram model, the second is a bigram model, and the third is an an-chored unigram topology: a position-specific un-igram model for each position up to some maxi-mum length.

The first we consider is a standard unigram model, which is illustrated in Figure 2(a). It has |  X  | + 2 parameters: one weight  X  a for each phoneme a  X   X  , a starting weight  X  , and a stop-ping probability  X  .  X   X  then has the form: Estimating this model involves only computing the expected count of each phoneme, along with the expected length of a word, E [ | w | ] . We then normalize the counts according to the maximum likelihood estimate, with arc weights set as: Recall that these expectations can be computed us-ing an expectation semiring.

Finally,  X  can be computed by ensuring that the approximate and exact expected marginals have the same partition function. That is, with the other parameters fixed, solve: which amounts to rescaling  X   X  by some constant.
The second topology we consider is the bigram topology, illustrated in Figure 2(b). It is similar to the unigram topology except that, instead of a single state, we have a state for each phoneme in  X  , along with a special start state. Each state a has transitions with weights  X  b | a = p ( b | a )  X  E [#( b | a )] . Normalization is similar to the un-igram case, except that we normalize the transi-tions from each state.

The final topology we consider is the positional unigram model in Figure 2(c). This topology takes positional information into account. Namely, for each position (up to some maximum position), we have a unigram model over phonemes emitted at that position, along with the probability of stop-ping at that position (i.e. a  X  X ausage lattice X ). Es-timating the parameters of this model is similar, except that the expected counts for the phonemes in the alphabet are conditioned on their position in the string. With the expected counts for each posi-tion, we normalize each state X  X  final and outgoing weights. In our experiments, we set the maximum length to seven more than the length of the longest observed string. We conduct three experiments. The first is a  X  X om-plete data X  experiment, in which we reconstitute the cognate groups from the Romance data set, where all cognate groups have words in all three languages. This task highlights the evolution and alignment models. The second is a much harder  X  X artial data X  experiment, in which we randomly prune 20% of the branches from the dataset ac-cording to the survival process described in Sec-tion 2.1. Here, only a fraction of words appear in any cognate group, so this task crucially in-volves the survival model. The ultimate purpose of the induced cognate groups is to feed richer evolutionary models, such as full reconstruction models. Therefore, we also consider a proto-word reconstruction experiment. For this experiment, using the system of Bouchard-C  X  ot  X  e et al. (2009), we compare the reconstructions produced from our automatic groups to those produced from gold cognate groups. 7.1 Baseline As a novel but heuristic baseline for cognate group detection, we use an iterative bipartite matching algorithm where instead of conditional likelihoods for affinities we use Dice X  X  coefficient, defined for sets X and Y as: Dice X  X  coefficients are commonly used in bilingual detection of cognates (Kondrak, 2001; Kondrak et al., 2003). We follow prior work and use sets of bigrams within words. In our case, during bipar-tite matching the set X is the set of bigrams in the language being re-permuted, and Y is the union of bigrams in the other languages. 7.2 Experiment 1: Complete Data In this experiment, we know precisely how many cognate groups there are and that every cognate group has a word in each language. While this scenario does not include all of the features of the real-world task, it represents a good test case of how well these models can perform without the non-parametric task of deciding how many clus-ters to use.
 We scrambled the 583 cognate groups in the Romance dataset and ran each method to conver-gence. Besides the heuristic baseline, we tried our model-based approach using Unigrams, Bigrams and Anchored Unigrams, with and without learn-ing the parametric edit distances. When we did not use learning, we set the parameters of the edit dis-tance to (0, -3, -4) for matches, substitutions, and deletions/insertions, respectively. With learning enabled, transducers were initialized with those parameters.

For evaluation, we report two metrics. The first is pairwise accuracy for each pair of languages, averaged across pairs of words. The other is accu-racy measured in terms of the number of correctly, completely reconstructed cognate groups.

Table 1 shows the results under various config-urations. As can be seen, the kind of approxima-tion used matters immensely. In this application, positional information is important, more so than the context of the previous phoneme. Both Un-igrams and Bigrams significantly under-perform the baseline, while Anchored Unigrams easily out-performs it both with and without learning.

An initially surprising result is that learning ac-tually harms performance under the unanchored approximations. The explanation is that these topologies are not sensitive enough to context, and that the learning procedure ends up flattening the distributions. In the case of unigrams  X  which have the least context  X  learning degrades performance to chance. However, in the case of positional uni-grams, learning reduces the error rate by more than two-thirds. 7.3 Experiment 2: Incomplete Data As a more realistic scenario, we consider the case where we do not know that all cognate groups have words in all languages. To test our model, we ran-domly pruned 20% of the branches according the survival process of our model. 8
Because only Anchored Unigrams performed well in Experiment 1, we consider only it and the Dice X  X  coefficient baseline. The baseline needs to be augmented to support the fact that some words may not appear in all cognate groups. To do this, we thresholded the bipartite matching process so that if the coefficient fell below some value, we started a new group for that word. We experi-mented on 10 values in the range (0,1) for the baseline X  X  threshold and report on the one (0.2) that gives the best pairwise F1.

The results are in Table 2. Here again, we see that the positional unigrams perform much better than the baseline system. The learned transduc-ers seem to sacrifice precision for the sake of in-creased recall. This makes sense because the de-fault edit distance parameter settings strongly fa-vor exact matches, while the learned transducers learn more realistic substitution and deletion ma-trices, at the expense of making more mistakes.
For example, the learned transducers enable our model to correctly infer that Portuguese /d1femdu/ , Spanish /defiendo/ , and Italian /difEndo/ are all derived from Latin /de:fendo:/  X  X efend. X  Using the simple Levenshtein transduc-ers, on the other hand, our model keeps all three separated, because the transducers cannot know  X  among other things  X  that Portuguese / 1 /, Span-ish /e/ , and Italian /i/ are commonly substituted for one another. Unfortunately, because the trans-ducers used cannot learn contextual rules, cer-tain transformations can be over-applied. For in-stance, Spanish /nombRar/  X  X ame X  is grouped to-gether with Portuguese /num1RaR/  X  X umber X  and Italian /numerare/  X  X umber, X  largely because the rule Portuguese /u/  X  Spanish /o/ is applied out-side of its normal context. This sound change oc-curs primarily with final vowels, and does not usu-ally occur word medially. Thus, more sophisti-cated transducers could learn better sound laws, which could translate into improved accuracy. 7.4 Experiment 3: Reconstructions As a final trial, we wanted to see how each au-tomatically found cognate group faired as com-pared to the  X  X rue groups X  for actual reconstruc-tion of proto-words. Our model is not optimized for faithful reconstruction, and so we used the An-cestry Resampling system of Bouchard-C  X  ot  X  e et al. (2009). To evaluate, we matched each Latin word with the best possible cognate group for that word. The process for the matching was as follows. If two or three of the words in an constructed cognate group agreed, we assigned the Latin word associ-ated with the true group to it. With the remainder, we executed a bipartite matching based on bigram overlap.

For evaluation, we examined the Levenshtein distance between the reconstructed word and the chosen Latin word. As a kind of  X  X kyline, X  we compare to the edit distances reported in Bouchard-C  X  ot  X  e et al. (2009), which was based on complete knowledge of the cognate groups. On this task, our reconstructed cognate groups had an average edit distance of 3.8 from the assigned Latin word. This compares favorably to the edit distances reported in Bouchard-C  X  ot  X  e et al. (2009), who using oracle cognate assignments achieved an average Levenshtein distance of 3.0. 9 We presented a new generative model of word lists that automatically finds cognate groups from scrambled vocabulary lists. This model jointly models the origin, propagation, and evolution of cognate groups from a common root word. We also introduced a novel technique for approximat-ing automata. Using these approximations, our model can reduce the error rate by 80% over a baseline approach. Finally, we demonstrate that these automatically generated cognate groups can be used to automatically reconstruct proto-words faithfully, with a small increase in error.
 Thanks to Alexandre Bouchard-C  X  ot  X  e for the many insights. This project is funded in part by the NSF under grant 0915265 and an NSF graduate fellow-ship to the first author.

