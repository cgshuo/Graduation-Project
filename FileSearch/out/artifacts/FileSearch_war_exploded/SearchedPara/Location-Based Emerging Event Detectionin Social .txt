 The detection of emerging events with res pect to the locations and participants of events provides a better understanding of ongoing events. Emerging events like natural disasters may need to be report ed in real time when they are observed by many people. Emerging events such a s infectious diseases and cyberspace-initiated/plotted attacks/unrest need to be detected at their early stages.
Currently, a User Generated Content (UGC) system, such as micro-blog ser-vices, provides a wealth of online discussions about real-world events. Micro-blog, e.g. Twitter is being considered as a power ful means of communication for people who are looking for sharing and exchanging information over the social media. The social events range from popular, widely known ones such as events con-cerning well-known people or political affairs to local events such as accidents, protests or natural disasters. Moreover social events could be malicious, danger-ous, or disastrous. For instance, in August 2011, rioters used instant messaging and social network services to have arrang ed meetings and agitated people across England. Our research interest is to understand where, when, and what is hap-pening (emerging), so to predict its occurrence via the real-time monitoring of the social networks. More specifically, our research interest is focused on the emerging  X  X otspot X  events. We define that a hotspot event is a tuple (location, time, topic) that a social network user is associated with through the posting of a micro-blog.

In this paper, we developed a Locati on-based Emerging Event Detection (LEED) system in social networks. We used this system to detect hotspot events from micro-blog messages that can help government or organizations prepare for and response to unexpected events. With the large range of events discussed on social networks, we do not know how many emerging hotspot events are likely to happen. Moreover, dealing with a very large number of messages and noisy data is difficult. The research challenges of our study are: (1) how to effectively detect events in terms of keywords in micro-blogs? (2) how to detect hotspot events (i.e. associate the message-mentioned location(s) to an event)? (3) how do we know a hotspot event is emerging?
Our approach has five stages. Firstly, the pre-processing is performed to im-prove quality of the dataset. Secondly, we propose a clustering approach to au-tomatically group the messages into events. Thirdly, we propose a hotspot event detection method. Fourthly, emerging h otspot event detectio n is performed. Fi-nally, we develop a visualization model for representing emerging events. The experiments are conducted to demonstrate the effectiveness of our approach.
This paper is organised as follows, Section 2 is about micro-blog data and events. The architecture of proposed sys tem is presented in Section 3. In Section 4, we present the experimental setup and results, Section 5 describes the related work. The conclusions are given in Section 6. A micro-blog message is a short text message such as a tweet that is restricted to 140 characters and therefore is much concise than a blog post. The twitter data consists of tweet ID, creating time, user ID, user location, tweet location, text content and the message-mentioned locations. A tweet location is known when a user posts the message using a smart phone. An example of Twitter data is shown in Table 1.

An event is something that occurs in a certain place during a particular in-terval of time 1 . An event location is a place where the event will happen or is happening while a topic location is a place that is included in the topic content. In real-world, an event location can also be a topic location, or they can be dif-ferent to each other. In this research we only consider the event locations. The topic locations are not cons idered exclusively, e.g., a n  X  X arthquake X  location is both the topic as well as the event location. An emerging event is an event that has significantly increased in the number of messages but rarely posted in the past. A hotspot event is an event wher e there is a strong association between event location and user location. User l ocation is the location where the message is sent from. Message-referred location is the location mentioned in the message. It could be event location which is the location where the event occurs or other locations referred to within the messages.

In order to understand where the locations of messages are found in social media, we conducted statistical studies. Firstly, we try to understand the avail-ability of the locations within the micro-blogs. We used Twitter API 2 to have crawled the micro-blog datasets. Dataset1 is crawled from the messages sent by users around Brisbane Australia, from the dates 17 March 2012 to 25 March 2012 with 219,933 messages while Dataset2 is crawled from the messages sent by users around the USA, from the dates 21 June 2012 and 27 June 2012 with 196,834 messages. The statistical information of locations from the two datasets is shown in Figure 1 and Table 2.

As we can see from Datasets 1 and 2 that, the user locations are divided into three types i.e. the geo-tagged locations, from the user profiles, and implied by IP addresses (first three rows in the Table 2). The majority of user locations come from user profiles, approximately 77% of Dataset1 and 67% of Dataset2. Also from Datasets 1 and 2 we can see that the message-mentioned locations are only available within a small proportion of the micro-blogs and appeared in one or two times in average in the micro-blog messages. Our most important observation on the locations of micro-blogs is that most of the micro-blog messages contain only one geographical location while messages that contain geographical locations of more than one constituted approximately 4% of Dataset1 and 7% of Dataset2. When a location is mentioned in the mic ro-blog message, it can be either an event location or a topic location.

In Table 3, we also try to understand what the locations used for in the messages contents. Dataset3 is downloaded from G. R. Boynton, University of Iowa which consists of two events: USA H1N1 and the Indonesia Earthquake 3 . Dataset4 is crawled by using hashtag  X #qldvote X  for Queensland Election 2012. As we can see from Datasets 3 and 4 that the message-mentioned locations are mostly the event locations. The message -mentioned location can appear more than one time in the message. Our most important observation on the message-mentioned locations is that the more frequently a message-mentioned location, the more likely it is the event location. Therefore, the use of message-mentioned locations to identify event location is the key goal behind this study. In order to provide a complete coverage of emerging hotspot event detection we proposed our system which has five stages presented in Figure 2. The following information provides detail of each stage. 3.1 Data Pre-processing for Events Detection In particular dealing with micro-blog messages, the message is short and often noisy. In order to improve the quality of our dataset and the performance of the subsequent steps, the pre-processing was designed to ignore common words that carry less important meaning than keywords and remove irrelevant data e.g re-tweet keyword, web address and me ssage-mentioned username. A micro-blog loader is developed to collect the Twitter data from public users via the Twitter API service. The messages are converted into lower case and are removed by web addresses and a single character word. We also remove the keyword RT(ReTweet) and the message-mentioned username such as @Sayan. The stop words are removed and all words are converted into a seed word (stemming word) by using Lucene 3.1.0 Java API 4 . All messages after pre-processing are stored in the database. 3.2 Text Stream Clustering The problem that we address in this paper is how to identify events from a given set of micro-blog messages. We consider a set of messages where each message is associate with an event. With the large range of events discussed on social networks, we do not know the number of events in advance. On the other hand, our approach requires no prior knowledge of the number of events. Therefore, the hierarchical clustering is used. In this stage, we aim to automatically group messages into the same event. We also need a fast and efficient message clustering system to overcome the problem of the h igh arrival rate of messages. In order to dealing with the high incoming rate of messages, we use a sliding window manager to keep track of messages arriving in the system. The size of the sliding window can be defined as the number of messages or time interval. In our case, we use time intervals such as one hour, two hours or one day depending on the user given preference. Additionally, the number of previous time slots needs to be specific because it is not necessary to co nsider the complete usage history of data to compute an emerging of the event.

In order to find the best representation of term weight for tweet messages, we compare four different term weight for mulas (i.e. Term frequency, Augmented Normalized Term Frequency[13], TFIDF[13], and Smooth-TFIDF[10]). We also compare four different similarity functions (i.e. Jaccard index, Euclidean dis-tance, Manhattan distance and Cosine similarity) for finding the best similarity function. To evaluate an effective clustering method, we manually label 16,144 tweets into 17 topics. We evaluate our algorithm by using pair-wise precision, recall and F1-score. Due to space limit, we do not show our preliminary exper-iments. The clustering method performs well when using the augmented nor-malized term frequency and cosine similarity function. Therefore, we calculate the weight w i,t of term t in message i by using augmented normalized term frequency: where tf i,t is the term frequency value of the term t in message i , tf max i is the highest term frequency value of the message i . The cosine similarity function is used to calculate the similarity between the existing cluster and the new message: where m is a message, c is a cluster centroid, and w m,t i is the weight of term t i in message m .

We use a clustering method called leader-follower clustering [5]. Message clus-tering is executed when the timestamp of the coming message is greater than the sliding window size. The system keeps history clusters within previous time slots to decrease time of computation. Ever y new message is compared with previous clusters. The algorithm creates a new clu ster for the message if there is no cluster whose similarity to the message is greater t han threshold. We use a centroid repre-sentation of the cluster because centroid is agglomerative, using the mean, which trades memory use for speed of clustering. In the final step, we find the most simi-lar pair of clusters and merge them into the same cluster. In order to find the most similar cluster, we calculate cosine similarity of two clusters. If the cosine similar-ity value exceeds the margin threshold, we merge them. The detailed algorithm is not presented here due to the limitation of the space. 3.3 Hotspot Event Identification From the previous stage results, all clusters can not be assigned as event clusters because it can be private conversations, a dvertisements or others. In this step, we focus on how to identify the hotspot ev ent clusters. A cluster will be assigned as the hotspot event if there is strong correlation between the event location and user location. The tasks are divided into two parts; to find a correlation between the event location and user location in the cluster and to extract the event topic. Find a Correlation between the Event Location and User Location: we calculate the correlation scores betw een user locations and event locations for identifying the hotspot event. In order to calculate a correlation score, we need to extract the user locati ons and event location first.
 Firstly, for user location, we extract from the geo-tag and from the user profile. The geo-tagged information is generated from smart phone applications while the location from user profile is a free format text where the user fills in the user profile. For those users who can post messages from different locations, for a given message we use geo-tagged information to locate the message location firstly, because it can provide precise location of the user. In order to convert a latitude/longitude pair into an address, we use Google Maps API 5 .Ifgeo-tagged information is not available we use user profile to query the gazetteer database, the database of geographic locations, for getting the location. Finally, if neither of them is not available we set message location equal to  X  X orld X . For the gazetteer database, we downloaded a list of geographic locations from GeoNames 6 and stored a local copy of the gazetteer in a database.

Secondly, for event location, we find all terms or phrases reference to geo-graphic location (e.g. country, state a nd city) from tweet contents. Since the location extraction from text is one of the challenging problems of this research area, this task will be more focused in future work. In this research, we simply extract the message-mentioned locations via Named Entity Recognition (NER). We use the Stanford Name Entity Recognizer [7] to identify locations within the messages. We also use the Part-of-Speech Tagging for Twitter which is in-troduced in [6] to extract proper nouns . We use extracted terms query into the gazetteer database to obtain candidate locations of the event. We find the most possible location of the event using the fre quency of each location in the cluster. The location which has the highest fre quency is assigned as event location.
Finally, for finding the correlation between event location and user location, a correlation score is computed by comparing the level of location granularity. The granularity level is defined as Country &gt; State &gt; City &gt; PlaceName. We assign scores for each level if both of them have the same value. The equation is shown below:
CorrelateScore =  X  1( F ( uCountry, eCountry )) +  X  2( F ( uState, eState )) where  X  1- X  4 are the weight of granularity levels,  X  1=  X  2=  X  3=  X  4=0 . 25, uCountry, uState, uCity and uP lace are user location, eCountry, eState, eCity and eP lace are event location, and F ( x, y ) = 1; if x = y and the higher granu-larity level has the same value otherwise F ( x, y )=0.

To identify which cluster is a hotspot event, the LocScore is computed. The range of LocScore is 0 to 1. It will be used to compute emerging score in the next section and the top k ranking emer ging hotspot events will be selected. The LocScore of cluster c is defined as: where Np is the number of users who post messages in cluster c and U represents users who post messages in cluster c .
 Event Topic Extraction: In order to understand what the event cluster is about, we need to find the set of keywords to represent the event topic. Our in-tuition is that keywords co-occur when there is a meaningful topical relationship between them. To extract the set of co-o ccurring keywords, firstly, we create a directed, edge-weighted graph. The edge is created if the correlation weight between the two terms exceeds the threshold. The threshold is defined as the average of correlation weights in the cluster. We adopt the smoothed correlation weight function which is introduced in [12], to calculate the semantic correlation weight between terms. The function is shown below: where n k is number of posts containing term k, n z is number of posts containing term z, n k,z is number of posts containing the terms k and z, and N is the total number of posts. We identify the event topic by extracting the Strongly Connected Components (SCCs) from the graph. In the case of SCCs X  extraction, if the number of SCCs is more than one sub-graph we calculate the sum of edge weight on each SCC sub-graph. The SCC which has the highest score is defined as an event topic. 3.4 Emerging Hotspot Event Detection As our research interest is to detect emergi ng hotspot events, all events from pre-vious stage are not emerging hotspot events. We need to extract only emerging hotspot events. We find the event that has significantly increased in the amount of messages but rarely posted in the past. A burst in data is one technique for de-tecting emerging events. It is calculat ed by comparing the number of messages in the current time slot with the mean and the standard deviation of the number of messages in the previous time slots. Any data point which is higher than the sum of mean and two standard deviations can be considered as an emerging point.
In order to compute an emerging score for a given event X  X  cluster we calculate the mean and the standard deviation of the number of messages in the previous time slots. If the number of messages in the current time slot is greater than the sum of mean and two standard deviations, we calculate the emerging score of this event. The emerging score of the event e in the current slot is computed by the following equation: where LocScore e is the location score of event e , N e is the number of messages of event e in the current time slot, and Mean prev and SD prev are the mean and standard deviation of the number of messages in the previous time slots of the given event, respectively.

To detect emerging hotspot event in different location granularity e.g. state and city. We firstly segment event clusters into user X  X  location groups according to location granularity and follow all of the steps above. 3.5 Visualization For usability and understanding issues of visualizing model, we use a motion chart 7 to represent emerging hotspot events. Google Map 8 is used to represent the top k emerging hotspot events for a speci fic location. Examples of a motion chart and a geo-map are shown in Figure 3. Figure 3 (left) shows a given emerging hotspot event within a time period (x-axis is the number of users who post massages; y-axis is the number of messages; colour represents location and bubble size is emerging score). F igure 3 (right) shows the top five events in a selected State. In order to evaluate our approach, we use search API from Twitter to collect the messages sent by users around the USA, from the dates 21 June 2012 and 27 June 2012 with 196,834 messages. Since no ground-truth labels are available for us on realistic events within the data collection period, we manually search local news from Google to check the events detected by our system. It is impractical to manually label the overly large number of tweets in the dataset. We follow the definition of Precision used in [17], which is defined as follows: However, Recall was not defined in [17] because it is not feasible to enumerate all the real-life events which happened in the dataset. Therefore, we follow the definition of Recall used in [8], which is defined as the number of distinct realistic events detected from the dataset. Not e that, more than one detected event can relate to the same real-world event, the n they are considered correct in terms of precision but only one event is co nsidered in co unting recall.
 We compare the performance of our approach with the KeyGraph approach 9 described in [15] and the Semantic Expansion of Hashtags approach described in [11]. Our proposed approach can effect ively detect emerging hotspot events with a precision of 0.801 which is significantly larger than the baselines. On the other hand, the correlation between user location and event location can filter non real-world event clusters out from our system. Our approach can also detect the larger number of real-world events than the baselines. However, problems with using a gazetteer are the granularity of locations required and speed of processing required. For illustration purposes, we present the precision and recall in Table 4. Examples of detected events are shown in Table 5, 6 and 7. 5.1 Event Detection in Social Streams Event detection on micro-blogs as a challe nging research topic has been increas-ingly reported recently [1,3,8,11,15,17]. Sayyadi et al. in [15] developed a new event detection algorithm by using a key word graph and community detection algorithm to discover events from blog posts. Keywords with low document frequency are filtered. An edge is removed if it does not satisfy the conditions. Communities of keywords are detected by removing the edges with a high be-tweenness centrality score. However, the number of detected events depends on the threshold parameters and there was no evaluation conducted. Ozdikis et al. in [11] proposed an event detection metho d in Twitter base on clustering of hash-tags, the # symbol is used to mark keywords or topics in Twitter, and applied a semantic expansion to message vectors. For each hashtag the most similar three hashtags are extracted by using cosine similarity. A tweet vector with a single hashtag is expanded with three similar hashtags and then used in the clustering process. However, using only messages with a single hashtag can lead to ignore some important events. Also they did not implement any credibility filter in order to decide whether a tweet is about an event or not. 5.2 Emerging Topic Detection in Social Networks A significant amount of research has previously been conducted on emerging topic detection [2,4,9]. Cataldi et al. presented the emerging topic detection on Twit-ter [4]. Their work use aging theory to model the life cycle of each term. The im-portance of Twitter users is studied, which represents an important weighting of contents. Emerging terms are identified within a given time interval. Terms that frequently correlated with emerging terms are extracted and are reported together as emerging topics. However, the system need user-authority for weighting term which is difficult to collect complete user -network. More recent work is presented by Alvanaki et al. [2]. Correlation of tag pairs which contains at least one seed tag are tracked. The seed tags are select ed from current sliding window based on term frequency. Emerging events are ident ified as top k highest shift scores of tag pairs. However, the performance is highly sensitive to the selected seed tags and it is focused on detecting emerging topics rather than emerging events. 5.3 Location-Based Social Network The geographical scope of social networ ks content has been studied in the last decade. TwitterStand has been proposed by Sankaranarayanan et al. in [14]. The 2,000 handpicked users of Twitter are used as seeders who are known to publish news. The online clustering method is used to group the messages into the news topic. User location and content location are used to locate geographic content from each news topic. However, the results relied on handpicked users and there was no evaluation conducted. Watanabe et al. proposed a real-time local-event detection system [16]. Local events are detected using geo-tagged from Twitter data. The place name are extracted from check-in messages such as  X  X  X  X  at Time Square X . Watanabe et al. searched for non geo-tagged messages which contained a distinct place name and allocated a geo-tagged to the location. However, the results relied on the number of geo-tagged data they had. In this paper, we develop a system namely LEED, to automatically detect emerging hotspot events over micro-blogs. Our contributions can be summarized as: (1) We proposed a solution to detect the emerging hotspot events which can help governments or organizations prepare for and respond to unexpected events such as natural disasters and protests. (2) We correlate user location with event location to establish a strong correlati on between them. (3) We provide an eval-uation for the effective event detection on a real-world Twitter dataset with different granularity of location levels. Our experiments show that the proposed approach can effectively detect emerging events over the baselines. However, some clusters that we found are not belong to the real-world events. It can be chat topic. In future work, the differentiation between event location and topic location which are mentioned in the te xt will be studied. Moreover, each com-ponent may affect the final detection resul ts so a break-down staged evaluation will be assessed.

