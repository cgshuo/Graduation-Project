 The availability of user check-in data in large volume from the rapid growing location-based social networks (LBSNs) enables many important location-aware services to users. Point-of-interest (POI) recommendation is one of such services, which is to recommend places where users have not visited before. Several techniques have been recently proposed for the recommendation service. However, no existing work has considered the temporal information for POI recommendations in LBSNs. We believe that time plays an impor-tant role in POI recommendations because most users tend to visit di ff erent places at di ff erent time in a day, e.g., visiting a restaurant at noon and visiting a bar at night. In this paper, we de fi ne a new problem, namely, the time-aware POI recommendation , to recom-mend POIs for a given user at a speci fi ed time in a day. To solve the problem, we develop a collaborative recommendation model that is able to incorporate temporal information. Moreover, based on the observation that users tend to visit nearby POIs, we further enhance the recommendation model by considering geographical information. Our experimental results on two real-world datasets show that the proposed approach outperforms the state-of-the-art POI recommendation methods substantially.
 H.3.3 [ Information Storage and Retrieval ]: Information Filtering Recommendation; Point-of-interest; Location-based Social Networks; Spatio-Temporal Location-based social networks (LBSNs) such as Foursquare, Gowalla, Facebook Places, etc. , have been growing rapidly in re-cent years. As of January 2013, F oursquare had over 3 billion post their physical locations in the form of  X  X heck-in X  (see Figure 1 for an example), and share their experiences and tips for points of interest (POI), such as restaurants, sightseeing sites, etc. The availability of user check-in data in large volume makes it possi-ble to recommend unvisited POIs to users. POI recommendation is of great value to both users and the business owners of POIs. Several techniques have been exploited for POI recommendations. Since user-based collaborative fi ltering method has performed well for POI recommendations according to a recent work [23], in this paper, we aim to further enhance the user-based collaborative fi l-tering method by considering the important factors that have been neglected in earlier studies.

Users X  activities are often in fl uenced by time. For example, a user is more likely to go to a restaurant rather than a bar for lunch at noon, and is more likely to go to a bar rather than a library at midnight. Therefore, the recommendation results should be time-aware or time-oriented. However, to the best of our knowledge, no existing work has considered the time factor for POI recommenda-tions in LBSNs. In this paper, we de fi ne a new problem for POI recommendations, namely, the time-aware POI recommendation , which aims to return a set of POIs for a user to visit at a speci fi ed time in a day. We believe that this is a natural and useful extension to the conventional POI recommendation problem which has not considered the time factor.

To address the POI recommendation problem, we explore the following two human behaviors, namely, temporal behavior and spatial behavior for POI recommendations. Note that these two human behaviors are not applicable to most of the recommendation tasks over conventional purchase or rating data ( e.g., for movies, books or other products). 1. Temporal behavior : Temporal in fl uence plays an important 2. Spatial behavior : Spatial in fl uence is another important fac-
To exploit the temporal behavior in POI recommendations, we propose an approach incorporating temporal in fl uence. Intuitively, if two users have similar temporal behavior, they are likely to visit similar POIs at the same time. Thus, we perform collaborative fi ltering by exploiting other user X  X  temporal preferences to POIs. Since most people maintain a relatively fi xed routine of their daily mobility ( e.g., go to o ffi ce in the morning and have dinner at restau-rants after work) [5, 13], we split time into hourly-based slots and model the temporal preference to POIs of a user in a time slot by the POIs visited by the user in the time slot. However, splitting time into slots will make the check-in data sparser. To tackle this prob-lem, we enhance the proposed method with smoothing by taking advantage of user X  X  temporal preference at other time slots. Given auserandaspeci fi c time, we fi rst fi nd the users sharing similar temporal preference with him or her, and then produce the time-speci fi c recommendations based on their historical check-ins made around the time.
 We also propose a new method to exploit the spatial behavior. We assume the willingness of a user moving from one POI to an-other POI is in fl uenced by the distance between the two POIs. Based on the assumption, we calculate the conditional probabil-ity that a user will visit another POI given a POI. By applying the Bayes rule, we derive that the probability that a user will visit a candidate POI is determined by both the popularity of the candidate POI and the conditional probability of visiting the historical check-in POIs of the user given the candidate one. We further extend the model to accommodate the temporal factor. Note that spatial be-havior has been exploited in [23] with a di ff erent assumption from ours. A detailed discussion on the di ff erences between our method and that in [23] is given in Section 2.

Finally, we employ a uni fi ed framework to combine the afore-mentioned two approaches, i.e. , integrating the spatial and tempo-ral in fl uences, to make the time-aware POI recommendation. The contributions of this paper are threefold:
The rest of this paper is organized as follows. In Section 2, we review related work. In Sections 3 and 4, we describe the pro-posed recommendation methods incorporating temporal in fl uence and spatial in fl uence, respectively. Section 5 presents the uni fi ed framework. We present experiment al results in Section 6. Finally Section 7 concludes this paper. Collaborative Filtering . Collaborative fi ltering (CF) technique is widely adopted for recommender systems and many collaborative fi ltering recommendation methods ( e.g. , [8,12,17]) have been pro-posed. The CF methods can be divided into two categories, namely memory-based CF and model-based CF . Memory-based CF meth-ods can be further divided into user-based CF and item-based CF. User-based CF fi rst fi nds similar users based on their ratings on items using a similarity measure, such as cosine similarity. Then the recommendation score for an item is computed by a weighted combination of historical ratings on the item from similar users. We will detail the user-based CF for POI recommendations in Sec-tion 3. In contrast, item-based CF works by fi nding items that are similar to other items the user has liked or rated. Model-based CF builds models using data mining techniques, such as cluster-ing, on user ratings and the models are used to make recommen-dations [18]. The model building algorithms are usually computa-tionally expensive.
 POI Recommendation . The work by Ye et al. [23] is the most closely related to our work. Ye et al. tailor the CF model for POI recommendations, aiming at improving the recommendation accu-racy. The work considers the social in fl uence under the framework of user-based CF, and models the spatial in fl uence by model-based method (a Bayesian CF algorithm). Speci fi cally, the work employs user-based CF to compute the recommendation score of a candidate POI for a user. To exploit the social in fl uence, the work makes use of the user X  X  friends for recommendation rather than all the users by following the approach in [15]. To explore the geographical in-fl uence, this work assumes that the probability that a user visits two POIs is determined by their distance, and that the probability of a user visiting a set of POIs is the product of probabilities of visiting all the pairwise POIs in the set. The probability that a user checks in a new POI is estimated by the pr oduct of the probabilities of visiting all the pairwise POIs, each pair consisting of the new POI and each previously visited POI. This work reports three fi ndings: (i) Geo-graphical in fl uence has a signi fi cant impact on the accuracy of POI recommendations; (ii) The social friend links themselves contribute little for the accura cy of POI recommendati ons; and (iii) Random walk based method and item-based CF perform much worse than user-based CF for POI recommendations.

In light of these fi ndings, we develop our method based on user-based CF. We also investigate the geographical in fl uence for POI recommendations and propose a new method to exploit the geo-graphical in fl uence. We make a di ff erent assumption from that in [23]. Speci fi cally, we assume that the willingness that a user moves from a POI to another POI is a function of their distance. Based on the Bayes rule, we develop a method with a sound prob-abilistic foundation to recommend POIs. Because of the di ff erent assumptions made in [23] and our work, the techniques are sig-ni fi cantly di ff erent. An additional advantage of our method is that the temporal information can be easily incorporated into our proba-bilistic model, which can further improve the recommendation ac-curacy.
In their earlier work [22], Ye et al. aim to improve recommenda-tion e ffi ciency for POI recommendations in LBSNs by exploiting the social and geospatial information in recommendation. Never-theless, the work focuses on e ffi ciency instead of e ff ectiveness.
There exists other work that incorporates social link informa-tion into POI recommendations, such as the probabilistic generative model-based method [21], and matrix factorization-based method [4]. The focus of [4, 21] is to explore social link information for POI recommendations and their problem setting is di ff erent from ours. POI Prediction . The recent work on POI prediction in LBSNs [5] is also related, in which any POI, irrespective of whether it has been visited by a user, can be suggested to the user as the next-to-visit POI. The authors report that the movement of human is peri-odic between  X  X ork X  and  X  X ome X  states, and the Gaussian mixture model is employed to predict the POI to be visited next. Speci fi -cally, given a user and the previously visited POIs of the user, the method [5] fi rst calculates the probability of the user being in either of the two states in the next time point, and then uses the Gaus-sian models of the two states to estimate the visiting probability for each POI. Although the method is developed for POI prediction, it can be adapted for POI recommendations by disregarding the POIs that have been visited by the user in the prediction results. We implemented the method [5] and applied it for time-aware POI rec-ommendations, but it performed much worse than user-based CF method. One reason is that the method is not developed for rec-ommendation, and another potential reason could be: the method requires that each user have a number of check-ins (more than 10 used in [5]) on each day to estimate the parameters of Gaussian models. However, the datasets used in this paper are much sparser in which less than 15% of users have at least 10 check-ins per day (see Section 6.1 for more details about the data).

Clements et al. propose a kernel convolution method to predict similar locations for a given location based on users X  travel behav-ior [6]. The problem settings of this work is di ff erent from the above studies that focus on location prediction for users. Location Identi fi cation and Recommendation . There exists work on location identi fi cation and recommendation from the GPS tra-jectories of a number of users over a long period. Zheng et al. [24] mine interesting locations and travel sequences, which can be rec-ommended to users as they are popular among many users. Cao et al. [3] develop a technique capable of extracting semantic locations from GPS data. The outcome of the extraction can serve as location recommendations that takes the signi fi cance of location and the dis-tance from the user to the location into account. Leung et al. [14] perform co-clustering on a graph consisting of users, locations and activity entities to fi nd similar users, locations and activities from the GPS trajectories, and make location recommendation based on the cluster results. Our work di ff ers from these studies in that our work aims to provide personalized time-aware recommendation re-sults for a speci fi c user while the results in these studies are not personalized.

Our work is also related to the work on location recommendation in location-based services. Horozov et al. [9] propose a user-based CF method to recommend restaurants for a user. The method fi rst fi nds candidate POIs close to the user, and then makes recommen-dation based on the similarities between users who have rated these POIs and the user, and their ratings to these POIs.
 Recommendation with Temporal Information .Ye et al. [20] present a tagging approach to recommending semantic tags for POIs in LBSNs, and the tagging method considers the temporal informa-tion as features. However, both the problem and the approach in Symbol Description
U , L , T user set, POI set, time slot set u , v , l , t user u , v  X  U ,POI l  X  L , time slot t  X  T c u , c u , t the binary check-in vector of u over L , and the bi-c w u , v the similarity between u and v dis ( l i , l j ) distance between l i and l j wi ( dis ) the willingness a user visits a dis far away POI
CI l , CI l , t the set of check-ins at l , CI l at time t the work [20] are di ff erent from ours. Existing work on POI rec-ommendations does not take into account the time factor. In other domains time factor is considered for recommendation in several studies, including using item-based CF method [7], matrix factor-ization method [11] and random walk based method [19]. However, the time factor in these studies is di ff erent from the periodic time factor considered in this paper. In these studies, the time gap be-tween the occurring time of a previous rating and the recommenda-tion time is used as a decaying factor to weight the rating X  X arlier rating will be given a smaller weight. In contrast, we divide time into periodic time slots ( e.g. , by hour) and make use of the periodic temporal property in our method.
 Context-aware Recommendation . Our work is related to the ex-isting work [1] on integrating context into recommender systems. The approach proposes a reduction-based algorithm that uses only the ratings that pertain to the recommendation context. The ap-proach su ff ers from rating sparsity. The general motivation of us-ing only context-pertinent data is similar to that of our method to be presented in Section 3.2. However , we address the sparsity problem in our proposed method in Section 3.3.
 Summary . Our study di ff erentiates itself from all these existing studies in that the study of both temporal in fl uence and spatial in-fl uence under a uni fi ed framework for time-aware POI recommen-dations in LBSNs is unexplored in previous work.
In this section, we fi rst present the baseline user-based CF method in Section 3.1. We then present the method of incorporating time in fl uence in the user-based CF in Section 3.2. The enhancement to the method by smoothing is then presented in Section 3.3. All the notations used in this paper are listed in Table 1.
Given a user, user-based CF fi rst calculates the similarities be-tween the user and other users, and then produces a prediction for a POI by taking a weighted combination of the other users X  check-in records on the POI. More speci fi cally, let v  X  U denote a user in the user set U ,and l  X  L denote a POI in the POI set L .Weset c if v has checked in (or visited) l before; and c v , l = 0otherwise. Given a user u , the recommendation score that u will check-in a POI l that she has not visited before is computed by the following equation, where w u , v is the similarity between user u and user v .
The similarity between two users w u , v can be computed with various measures. Among these measures, cosine similarity is a widely adopted measure for implicit data (check-in records are im-plicit data and c u , l takes either 1 or 0 value). The cosine similarity between u and v is de fi ned in Equation 1, where each user is repre-sented by a binary check-in vector over all POIs L .
As reported in [5], human show strong periodic behavior through-out a day. For example, people tend to check-in restaurants during daily lunch hours.

We split a day into multiple equa l time slots based on hour (We can also split the time based on the day of a week). For ease of presentation, time and time slot are used interchangeably in this paper unless noted otherwise. Then, we represent the behavior of a user at a speci fi c time by the set of check-ins that user has made at that time.

To represent the temporal check-in behavior of users, we intro-duce the the time dimension into the conventional user-POI ma-trix. Speci fi cally, we use user-time-POI cube (UTP) to represent the temporal check-in records. In the UTP cube, each element c represents the check-in activity of a user u ,ataPOI l at time slot t , where c u , t , l = 1ifuser u has checked in POI l at time t ,and c otherwise.
To make use of the time in fl uence for time-aware POI recom-mendations, we extend the user-based CF model in two aspects: (i) we leverage the time factor when computing the similarity be-tween two users (to be presented in Section 3.2.3); (ii) we consider the historical check-ins at time t in the repository, rather than at all time, during recommendation.

Given a user u and time t , the recommendation score that the user will check-in an unvisited POI l at t is: where w ( t ) u , v is the temporal behavior similarity between u and v . Next, we detail the computation of the temporal behavior similarity w
In our method, the similarity between two users is estimated based on their temporal behaviors over all time. Speci fi cally, if two users always check-in the same POIs at the same time, the simi-larity value between the two will be high, and one user X  X  check-in history has a large impact on the POI recommendation for the other user. Therefore, we extend the cosine similarity measure to calcu-late the similarity between u and v as follows:
Note that, the similarity might be calculated in an alternative manner based on the check-in history at the exact time ,whichis similar to the general idea of context-aware recommendation [1]. We did not adopt this approach because of two reasons: (i) There is a high possibility that the user has never made any check-in at the time. In our two datasets (Foursquare check-ins in Singapore, and Gowalla check-ins in California and Nevada, see Section 6.1 for more details), on average the check-ins of each user fail into 9.97 and 13.58 hour slots, respectively. Thus, if we only consider the time, no similar users may be found for the user; (ii) Even if the user has check-ins at the time, the number of these check-ins is still too small for meaningful similarity computation (on aver-age, only 4.17 and 5.81 check-ins in each hour for the two datasets, respectively).
The straightforward extension of incorporating temporal in fl u-ence presented in Section 3.2 has its weakness in handling data sparsity. In this section, we fi rst explain the reason of the weak-ness and then present two enhancements to overcome this weak-ness. First, we smooth the similarity estimation using the similarity values of the other time slots. Second, we consider the POIs visited by similar users at di ff erent time slots, and weight them with the estimated similarity for recommendation.

The similarity incorporating temporal in fl uence in Equation 2 is estimated based on the UTP cube, which is much sparser than the user-POI matrix. The sparsity could easily make it fail to charac-terize the users X  similarity when a POI is visited at di ff erent time slots by di ff erent users. For example, consider two POIs and two time slots. User u checked in l 1 and l 2 at t 1 and t 2 , respectively, while user v checked in l 1 and l 2 at t 2 and t 1 , respectively. If we do not consider time, the similarity between the two users will be 1 by Equation 1, since both users checked in both POIs. However, if the time is taken into account, their similarity becomes 0 according to Equation 2, since their check-ins to the two POIs are made at dif-ferent time. Obviously, the time-aware similarity is not desirable in the case, particularly when t 2 is very close to t 1 , e.g., the next hour to t
We proceed to discuss how to address this problem caused by data sparsity. A straightforward method is to use a decaying pa-rameter to give a higher weight to the POIs checked in at close time slots, and a smaller weight to those checked in at distant time slots. However, this method faces the following challenge: A user X  X  behavior at a time is described by the check-in records of the user at that time, and the user behavior at di ff erent time may be similar. For example, the check-in behavior of a user at 9-10AM might be similar to the check-in behavior of the user at 3-4PM, because the user is likely to stay at workplace and make check-ins around it. Such similarity cannot be easily captured by a decaying parameter. To further illustrate the point, we analyze the check-in data in Foursquare made within Singapore for the similarity patterns be-tween check-in behaviors of users at di ff erent time. Note that, the results on the other data used in our experiment arequalitatively similar to this dataset, and thus are omitted here.
 at time t , which is extracted from the UTP cube. For each user u , we calculate the cosine similarity between every pair of check-in vectors c u , t i and c u , t j at time t i and t j respectively. Then, we calculate the similarity value between two time slots t i the average of the similarity values of all users between these two time slots t i and t j .

Figure 2 shows the similarity curves for three time slots (6:00, 8:00, and 16:00) over the Singapore data. The similarity curve for 6:00 shows the check-in similarity between 6:00 and every other hour in a day, similarly for the other two curves. Observe that the check-in behavior at a time is similar to the check-in behavior of its close time slots. For example, the check-in similarity between Figure 2: User behavior similarities between a given hour (6:00, 8:00, and 16:00) and other hours 6:00 and 5:00 is much higher than the similarity between 6:00 and 4:00. Nevertheless, although 6:00 and 8:00 are close to each other in terms of time, their similarity curves are in quite di ff erent shapes. For instance, the check-in behavior of 6:00 is similar to that at its previous hours (0:00  X  5:00), but quite di ff erent from the behavior at the later hours (8:00  X  23:00). The curve of time 8:00 displays an opposite shape. In contrast, the curve of 16:00 drops with equal speed on both sides. Observe that the curve of 16:00 almost does not decrease from 8:00 to 14:00, and it even increases around 12:00 to 13:00. This is, users might stay at workplace during that period, and hence have similar check-ins (while people tend to have lunch about 12:00, making the curve drops to some extent). Instead of using cosine similarity to compute the user check-in behavior, we have also tried other metrics, such as Pearson correlation and Total Variation Distance, but observed similar results. In summary, the check-in behavior at one time may be more similar to some time slots than others. This motivates us to develop a method to utilize the check-in behavior similarity for POI recommendations.
We propose to smooth the UTP cube based on the check-in sim-ilarity between di ff erent time slots. For each check-in vector in the cube, we smooth it using the vectors of those similar time slots. Speci fi cally, we compute a new value for element c u , t , l tion 3, where  X  t , t is the similarity between time slots t and t .Ac-cordingly, the smoothing enhanced similarity between two users u and v is calculated using Equation 4.
With the similarity formulation in Equation 4, if two users u and v have visited the same POIs at the same or similar time slots, their similarity value will be high. Otherwise, if they have visited the same POIs at dissimilar time slots, their similarity value will be low.

The check-in behavior similarity between two time slots also en-ables us to introduce another enhancement in recommending POIs for user u at a given time t . Recall that in the method described in Section 3.2, only the POIs visited by a similar user v at the time t are considered in recommendation. The check-in behavior similar-ity between time slots makes it possible to consider any candidate POI l visited by a similar user v , irrespective if the check-in time t by v is the same as the time t . More speci fi cally, in the enhance-ment method, a candidate POI l is weighted by the similarity value between two time slots, t and t , if the historical check-ins are in di ff erent from the time t . The recommendation score, denoted by c u , t , l ,thatuser u will check-in l at t is then updated as follows:
The geolocation of POI is an important factor a ff ecting human X  X  check-in behavior and has been exploited in earlier studies [23]. In this work, we however make a di ff erent assumption from the work in [23] and show that POI recommendation can be improved by considering spatial in fl uence in an alterative manner. In our exper-iments, we shall compare the performance of di ff erent approaches of incorporating spatial in fl uence.

We fi rst analyze the e ff ect of distance on user X  X  check-in behav-ior, and then propose a new POI recommendation method by ex-ploiting the spatial in fl uence. In our work, we assume that human tend to visit nearby POIs to their previous locations, and their will-ingness to visit a POI decreases as the distance increases .Tover-ify this assumption, we perform a data analysis on two datasets (see Section 6.1 for more details on the datasets) to study the impact of distance on users X  check-in behaviors.

For each user, we sort the user X  X  check-ins by time. For the check-ins made within a day, we calculate the distance between two POIs of every two adjacent check-ins. We aggregate the re-sults of all users, and plot the number of check-ins as a function of the distance in Figure 3. Note that a larger probability value implies that users are more willing to check in POIs at that dis-tance. Observe from Figure 3, the distribution of the probability values follows a power law, sugges ting that users are more willing to check in nearby POIs to their current places. Moreover, observe that the slop of the curve of Singapore (Figure 3(a)) drops quickly after 10KM. Similar observation holds for the curve of California and Nevada (Figure 3(b)). That is, the willingness of people visit-ing a faraway POI ( e.g., 10KM) drops signi fi cantly.
To incorporate spatial in fl uence in POI recommendations, we use a power law distribution to model the willingness of a user moving from one place to another as a function of their distance. De fi ned in Equation 6, wi ( dis ) is the willingness of a user to visit a dis km far away POI, and a , k are parameters of the power law function.
Maximum likelihood estimation [2] is used to estimate the two parameters a and k . More speci fi cally, we take logarithmic on both side of Equation 6, and get the following equation. The above linear function over ln( dis ) can be easily learned by the least-square regression. As the result, we learn the parameters in Equation 6. Note that, in learning the two parameters, irregular portion in Figures 3(a) and 3(b) ( i.e., data points having distance larger than 10km) is not considered. These data points represent fewer than 15% of the total number of check-ins.
 Consider a user is currently at POI l i and POI l j is a candidate POI to check in next, at distance dis ( l i , l j ) from l Prob (log) Prob (log) Figure 3: Distribution of distance between successive check-ins probability that the user will check in l j to be proportional to the user X  X  willingness to check in a POI at distance dis ( l i ditional probability is computed using the following equation. Observe that, as the distance increases, the conditional probability decreases, which re fl ects that the user is less likely to visit a faraway candidate POI.

Given a user u , and his / her historical POIs L u , we calculate P ( l | L as the ranking score for each candidate POI l , and then recommend the top ranked POIs to the user. Based on the Bayes rule, this score is calculated as follows. Note that the derivation from Equation 9 to Equation 10 is based on the assumption that for a given l , the check-in probabilities of POIs in L u are independent from each other.
In Equations 9 and 10, P ( l ) is the prior probability that POI l is checked in by all users in the dataset. However, the popularity of a POI varies over time, e.g. , a restaurant is more popular around noon and evening, and a workplace is more popular during working hours. To illustrate this point, we p lot the check-in p robabilities of the top-5 most popular POIs in Figure 4, based on the check-in data of Singapore, collected from Foursquare. The check-in probability at a given time is computed by the ratio of the number of check-ins at that time to the total number of check-ins at the POI. Observe that the popularity of each POI varies greatly over time, and di ff erent POIs become popular at di ff erent time.

Reconsider Equations 9 and 10. The probability of checking in a POI should re fl ect both its popularity at the speci fi c time and the distance to the user X  X  current location. In other words, the probabil-ity user u will check in POI l at time t depends on the probability (or popularity) of l at t , along with the distance between l and u  X  X  visited POIs. It provides us a way to enhance this model by adjust-ing P ( l ) with the temporal popularity of POI l , denoted by P In the above equation, | CI l | is the number of check-ins at l ; | CI is the number of check-ins at l at time t ,and  X  tunes the weight between l  X  X  temporal popularity and long-term popularity.
By replacing P ( l )inEquation10with P t ( l ), the resultant method incorporates the temporal popularity. The recommendation score, denoted by c ( se ) u , t , l , is then computed by the following equation.
We emphasize that the temporal information here is used in a dif-ferent way from what we do in Section 3. In Section 3, the temporal information is employed to discover personalized temporal prefer-ence on POIs. In contrast, here w e use the temporal preference on POIs in a collective manner ( i.e., by all users).
Given a user u , time t and a candidate POI l , we can get a rec-of the two methods incorporating temporal in fl uence in Section 3 ( i.e., with or without smoothing). Similarly, we can also compute ascore c ( s ) u , t , l using either of the two methods incorporating spatial in fl uence in Section 4 ( i.e., with or without considering temporal popularity). Dataset No. of Check-ins No. of Users No. of POIs Foursquare 194,108 2,321 5,596 Gowalla 456,988 10,162 24,250
We use linear interpolation to weight the two scores to compute the fi nal recommendation score for POI l . However, the two scores are measured by di ff erent methods, and have di ff erent value ranges. Thus, we fi rst normalize the two scores using min-max normaliza-tion before we combine them. In the above equations, max l (  X  )and min l (  X  ) denote the maximum and minimum check-in scores of u at t across all POIs.

After normalization, we compute the combined score that user u will check-in POI l at time t using the following equation, where  X  is a tuning parameter.
By this framework, we calculate the check-in score for each can-didate POI, and return the top ranked POIs as the recommendation results.
We evaluate the accuracy of the proposed methods, including the recommendation methods utilizing temporal in fl uence (presented in Section 3), the met hods utiliz ing spatial in fl uence (presented in Section 4), and the uni fi ed method (presented in Section 5). We also study the e ff ect of the length of time slot on the recommenda-tion accuracy.
We fi rst introduce the datasets used in our experiments and the metrics. We then list the methods to be evaluated and explain the design of the experiments.
 Dataset . Two datasets are used in our experiments. We collect 342,850 check-ins from Foursquare which were made within Sin-gapore between Aug. 2010 and Jul. 2011. We also set a bound-ing box and extracted 736,148 Gowalla check-ins from the dataset provided by [5], which were made within California and Nevada between Feb. 2009 and Oct. 2010. Each check-in contains user, time and POI ID information. For both datasets, we removed users who have checked in fewer than 5 POIs, and then removed POIs which fewer than 5 users checked in. After pre-processing, the Foursquare dataset (Foursquare) contains 194,108 check-ins made by 2,321 users at 5,596 POIs, and the Gowalla dataset (Gowalla) contains 456,988 check-ins made by 10,162 users at 24,250 POIs (see Table 2). The two datasets have di ff erent scales in terms of the size of entities ( i.e., users, POIs, and check-ins) and geographical range. For each user, we randomly mark o ff 12.5% of his or her visited POIs as development data to tune parameters, and mark o ff another 25% of POIs as testing data to evaluate the e ff ectiveness of the recommendation methods. The two datasets are available
The densities of the training data of Foursquare and Gowalla are a day into 24 slots by hours, the data becomes much sparser. The densities of the two datasets after splitting become 4 . 82  X  10 6 . 65  X  10  X  5 , respectively.
 Metrics . To study the e ff ectiveness of the proposed methods, i.e. , how well the methods can recover the hold-o ff POIs in the testing data for a given user at a given time, we use two metrics, namely, precision@ N and recall@ N (denoted by pre@ N and rec@ N ,re-spectively), where N is the number of recommendation results, fol-lowing the work [23].
 The pre@ N measures how many POIs in the top-N recommended POIs correspond to the hold-o ff POIs in the testing data, and the rec@ N measures how many POIs in the hold-o ff POIs in the test-ing set are returned as top-N recommended POIs. Given an user u and a time t (a time slot), we denote by T u , t the set of corresponding groundtruth POIs in the testing data, and by R u , t the set of recom-mended POIs by a method. We divide the POIs in the two sets, and get the following three values: tp u , t , tn u , t ,and fp Then, the precision and recall for time slot t are calculated as fol-lows: The overall precision and recall are calculated by averaging the pre-cision and recall values over all time slots, respectively:
Equations 17 and 18 actually compute the macro-precision and recall over all time slots. We also considered other ways to calcu-late the overall precision and recall, such as micro-precision and recall. We found that the results from these variant measures are very similar and we choose to report the results calculated by Equa-tions 17 and 18. For each metric, we consider three values of N ( i.e., 5, 10, 20) in our experiments, where 5 is the default value.
Recall that both the Foursquare and Gowalla datasets have a low density, which usually results in relatively low precision and recall values [10, 23]. In addition, the POIs in the test data of each user may represent only a small portion of POIs that the user may be interested in. Thus, although the relatively low precision and recall values are common and reasonable, in this paper, we focus on the relative improvements we achieved, instead of the absolute values . Recommendation Methods . We evaluated 9 recommendation meth-ods as listed in Table 3. Among the 9 methods, User-based CF with time function (UTF) is a baseline method that has not been discussed before. We detail it in the following.
 UTF is the user-based version of the algorithm proposed in [7]. It estimates the similarity between users as does the conventional user-based CF, but weights the check-ins of a similar user according to the gaps between their time slots and the recommendation time slot. The rationale is that with a larger time gap the check-in would Method Description U + SB Combination of U and SB [23]
UTE + SE Combination of UTE and SE (Section 5) be less useful for the POI recommendation. Formally, given a user u and time t , the recommendation score that u will check in POI l at time t is: gap between the time slot v checked in l and the time of recom-mendation, and H is a parameter controlling the decaying factor of the time gap. We tune H on the development data by varying H from 1 to 5, and found the best recommendation accuracy is always reached when H = 1 on both datasets. We also tried the original item-based method [7], but its results were much worse.

We conduct three groups of experiments. The fi rst group is to evaluate the accuracy of the proposed recommendation methods utilizing temporal in fl uence, and we compare methods U, UTF, UT and UTE.

The second group is to evaluate the e ff ectiveness of the proposed methods utilizin g spatial in fl uence, and we compare methods SB, S, SE, among which SB is the state-of-the-art method utilizing spa-tial in fl uence.

The third group is used to evaluate the e ff ectiveness of the pro-posed uni fi ed method, and we compare methods U, U + SB, and UTE + SE. Among them, U is the baseline method, and U + SB is the uni fi ed method proposed in [23]. Methods Utilizing Temporal In fl uence . We compare the e ff ec-tiveness of the methods u tilizing the temporal in fl uence on the two datasets. The precision and recall of the 4 methods (U, UTF, UT, and UTE) are reported in Figure 5.

Observe that the methods that make use of the time information always outperform the baseline method U, which does not take time into account. In terms of pre@5, UT outperforms U by 40% and 20% on Foursquare data and Gowalla data, respectively. UTE out-performs U by 51% on Foursquare data and 37% on Gowalla data, respectively. This result suggests that, taking time into considera-tion is essential for time-aware POI recommendations.

Compared to U, the UTF baseline method always exhibits better results in terms of all measures. This is because UTF exploits the time information, and recommends POIs which have been visited by users who have similar visiting history with the user.
Compared to UTF, UT performs better on the Foursquare data, but poorer on the Gowalla data. This is because the Gowalla data is much sparser than the Foursquare data. When data is sparse, the similarity between users in UT becomes less accurate because the similarity only considers exact matching on the UTP cube.
Among all 4 methods, UTE always achieves the best results in terms of both precision and recall at di ff erent N values on both Figure 5: Performance of Methods Utilizing Temporal In fl u-ence
Figure 6: Performance of Methods Utilizing Spatial In fl uence datasets. The superior performance is due to the smoothing en-hancement, which addresses the sparsity problem. The detailed results of each time slot on the Foursquare data are provided in Section 6.4 as a case study.
 Methods Utilizing Spatial In fl uence . We compare the e ff ective-ness of the proposed met hods utiliz ing spatial in fl uence with the state-of-the-art method utilizing spatial in fl uence [23]. The preci-sion and recall are plotted in Figure 6.

Observe from Figure 6, S achieves much better recommendation accuracy than SB in terms of both precision and recall, on both datasets. This clearly demonstrates the e ff ectiveness of the pro-posed method. Moreover, the integration of temporal popularity (SE) further improves the precision and recall of the recommenda-tion. Recall that in method SE, parameter  X  (Equation 11) tunes the weight between a POI X  X  temporal popularity and long-term popu-larity. We tune  X  on the development data by varying it from 0.0 to 1.0, and observe that the best recommendation accuracy is achieved when  X  = 0 . 5and0 . 9 on Foursquare and Gowalla, respectively. Uni fi ed Methods . The uni fi ed method (UTE + SE) combines the method utilizing temporal in fl uence and the method utilizing spa-tial in fl uence for time-aware POI recommendations. We select the state-of-the-art method U + SB as the baseline.

For UTE + SE, a parameter  X  is used to control the weights of the temporal part UTE and the spatial part SE (Equation 14). We tune  X  on the development data, and plot the average pre@5 and rec@5 on both datasets with di ff erent  X  values in Figure 7. From the fi gures, it is observed that best precision and recall are reached when  X  = 0 . 5 and 0.8 on Foursquare and Gowalla, respectively. For method U + SB, the best results are achieved when  X  = 0 . 6. Due to the space limitation, we omit the tuning results. Setting  X  to the optimal values for both methods UTE + SE and U + SB, the precision and recall of the three methods (U, UTE + SE, and U + SB) on both datasets are reported in Figure 8. As shown in the fi gure, both U + SB and UTE + SE outperform U, indicating that exploiting spatial information can help improve the accuracy of time-aware POI recommendations. More importantly, observe that in terms of both precision and recall, UTE + SE outperforms U + SB by around 45% on Foursquare data, and around 38% on Gowalla data. This result demonstrates that our proposed method is superior to the state-of-the art method in terms of e ff ectiveness. This experiment is to study the e ff ect of the length of time slot. The length of time slot controls the time granularity of time-aware POI recommendations. A larger length of time slot implies that the recommendation results will be less time-speci fi c. Here we only consider the methods utilizing temporal in fl uence to focus on the e ff ect of the length of time slot. We report the prec@5 and rec@5 on the Foursquare data in Figure 9, since the results on the Gowalla data are similar. From Figure 9, we make two observations.
As a case study, using the Foursquare data, we study the recom-mendation accuracy at di ff erent time slots in a day, ( i.e., at what time of a day, the POI recommendation is more accurate). We fi rst show the check-in count distribution over time in Figure 10(a). From the fi gure, we fi nd that users have more check-ins during 13:00 X 20:00 than in the morning or midnight. The curve reaches its peaks at 13:00 and 19:00, respectively, indicating that users are more active during or slightly after lunch and dinner hour. The pre@5 and rec@5 of methods U and UTE are plotted in Figures 10(b) and 10(c) respectively. Observe from the fi gures, the proposed method UTE outperforms the baseline U over all the time slots and the percentage of relative improvement is quite stable. For both methods, the best recommendation accuracies (in terms of pre@5 and rec@5) are obtaine d between 5:00 and 6:00 as well as between 17:00 and 18:00. However, in these two periods, users arelikelyinvolvedinverydi ff erent activities and check-in di ff erent kinds of POIs. This is an interesting phenomenon that needs further study. The availability of historical check-in data in LBSNs enables the POI recommendation service. In this paper, we de fi ne a new prob-lem of time-aware POI recommendation as an extension of the con-ventional POI recommendation problem by considering the tempo-ral in fl uence in user activities. To the best of our knowledge, this is the fi rst work on time-aware POI recommendations. The proposed solutions exploit both the temporal in fl uence and spatial in fl uence, which are speci fi c for POI recommendations. We start with a new method that utilizes the temporal in fl uence for POI recommenda-tions. We then propose a new approach exploring the spatial in-fl uence. Lastly, we combine the two approaches through a uni fi ed framework. We conduct extensive experiments over two real-world LBSN datasets. The experimental results show that the proposed methods beat all baselines, and improve the accuracy of POI rec-ommendations by more than 37% over the state-of-art method.
Several interesting directions exist for further exploration. First, in addition to hour, humans X  check-in behavior is also in fl uenced by the day of a week and even the month of a year. Hence we plan to exploit other time dimensions in POI recommendations. Second, POIs are often associated with category information in LBSNs. It would be promising to exploit category information in recommen-dation. In addition, we are also interested in incorporating the tem-poral in fl uence and spatial in fl uence in the POI prediction task.
This work is supported in part by a grant awarded by a Sin-gapore MOE AcRF Tier 2 Grant (ARC30 / 12), a Singapore MOE AcRF Tier 1 Grant (RG66 / 12), and a grant awarded by Microsoft Research Asia. Quan Yuan would like to acknowledge the Ph.D. grant from the Institute for Media Innovation, Nanyang Technolog-ical University, Singapore. [1] G. Adomavicius, R. Sankaranarayanan, S. Sen, and [2] B. Arnold. Pareto Distribution . International Cooperative [3] X. Cao, G. Cong, and C. S. Jensen. Mining signi fi cant [4] C. Cheng, H. Yang, I. King, and M. R. Lyu. Fused matrix [5] E. Cho, S. A. Myers, and J. Leskovec. Friendship and [6] M. Clements, P. Serdyukov, A. P. de Vries, and M. J. T. [7] Y. Ding and X. Li. Time weight collaborative fi ltering. In [8] J. L. Herlocker, J. A. Konstan, A. Borchers, and J. Riedl. An [9] T. Horozov, N. Narasimhan, and V. Vasudevan. Using [10] I. Konstas, V. Stathopoulos, and J. M. Jose. On social [11] Y. Koren. Collaborative fi ltering with temporal dynamics. In [12] Y. Koren, R. M. Bell, and C. Volinsky. Matrix factorization [13] K. Lee, S. Hong, S. J. Kim, I. Rhee, and S. Chong. Slaw: A [14] K. W.-T. Leung, D. L. Lee, and W.-C. Lee. Clr: a [15] H. Ma, M. R. Lyu, and I. King. Learning to recommend with [16] A. Noulas, S. Scellato, C. Mascolo, and M. Pontil. An [17] B. M. Sarwar, G. Karypis, J. A. Konstan, and J. Riedl. [18] X. Su and T. M. Khoshgoftaar. A survey of collaborative [19] L. Xiang, Q. Yuan, S. Zhao, L. Chen, X. Zhang, Q. Yang, and [20] M. Ye, K. Janowicz, C. M X lligann, and W.-C. Lee. What you [21] M. Ye, X. Liu, and W.-C. Lee. Exploring social in fl uence for [22] M. Ye, P. Yin, and W.-C. Lee. Location recommendation for [23] M. Ye, P. Yin, W.-C. Lee, and D. L. Lee. Exploiting [24] Y. Zheng, L. Zhang, X. Xie, and W.-Y. Ma. Mining
