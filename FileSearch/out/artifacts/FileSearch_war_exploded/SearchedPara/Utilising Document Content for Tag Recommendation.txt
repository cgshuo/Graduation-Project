 Real-world tagging datasets have a large proportion of new/ unseen documents. Few approaches for recommending tags to a user for a document address this new item problem, con-centrating instead on artificially created post-core datasets where it is guaranteed that the user as well as the docu-ment of each test post is known to the system and already has some tags assigned to it. In order to recommend tags for unseen documents, approaches are required which model documents not only based on the tags assigned to it in the past (if any), but also the content.

The focus of my research is on utilising the content of documents in order to address the new item problem in tag recommendation. I apply this methodology first to simple baseline tag recommenders and then the more advanced tag recommendation algorithm FolkRank [3][4].
 One of my main contributions is a novel adaptation to the FolkRank graph model to use multiple word nodes instead of a single document node to represent each document. This enables FolkRank to recommend tags for unseen documents and makes it applicable to full real-world tagging datasets, addressing the new item problem in tag recommendation. H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval X  Information Filtering Algorithms tag recommendation, social bookmarking, FolkRank
With the advancement of Web 2.0, tagging is a popular methodology for many user-driven document organisation include recommending the most popular tags in the system, the most used tags of the user and the most popular tags of the document.
My first contribution was a hybrid tag recommender which generates predictions based on the content of documents and personalises the resulting tag list to reflect the preference of the user which is learnt from the user profile [6]. The exist-ing documents in the system are represented by their fulltext content using a bag-of-words representation with each word having an importance score with regard to the document (Tf-Idf score). The known training documents are organised into groups based on their content by a hierarchical cluster-ing technique. This allows the system to assign the query document to a cluster in the hierarchy and thus identify a content-based neighbourhood of existing documents. The initial set of candidate tags then consists of past tags not only related to the query document but also to documents in the neighbourhood. This gives the system the potential to recommend tags for new documents that have not been tagged yet. The hierarchical clustering also provides a set of content words which are deemed most important for each cluster of documents. If the set of candidate tags for a test post does not contain a sufficient number of tags with scores above a preset threshold, these cluster-related words can be used to generate new tags for the test post.
While utilising the immediate neighbourhood of the query document and user is a simple and effective way to generate and rank a small set of candidate tags, there is a limit to how many of the real tags can be found this way with a reasonable accuracy. If the user decides to use a tag that he has not used before and that also has not been used by his peers for the query document (or its immediate neighbourhood), then a more advanced ranking technique is required to filter out the most probable tags from the large number of total tags in the system.

FolkRank is a graph-based tag recommendation algorithm [3][4] which is modelled on Google X  X  PageRank. Similarly to PageRank, the key idea of FolkRank is that a document which is tagged by important users with important tags be-comes important itself. The same holds symmetrically for users and tags. Users, documents and tags are represented as nodes in an undirected multi-edge tri-partite graph with uniform edge weights (all edges have weight 1). All co-occurrences of users and documents; users and tags; and documents and tags are edges between the corresponding nodes.

The importance or rank of each node is calculated by an iterative weight-spreading algorithm, in a similar fashion to PageRank. To find a set of tag recommendations for a new post ( u i , d j ,  X  ), where the set of tags T ij is not known (and is denoted by the empty set), the nodes in the graph rep-resenting u i and d j are given a high preference weight and the iterative weight-spreading algorithm is executed until the weights in the graph stabilise. The nodes which rep-resent tags are then ranked in descending order of weight, edges, word -tag edges and user -tag edges. We want the sum of the weights of edges connecting any user u to words nodes from any one document d to be either zero or equal to a pre-defined constant. This would mean that regardless of the number of words that a document is represented by, the sum of weights of edges connecting u to the word nodes representing d will always be the same. To achieve this and additionally include the varying importance of different con-tent words to the document, we use the Tf-Idf scores of the words in the document, where the Tf-Idf scores are nor-malised to sum 1. Since several documents, for example d a and d b , tagged by the same user u a can contain the same word w a , the weight of the edge between u a and w a is set to the sum of the Tf-Idf scores of w a in d a and d b . The same holds for edges between word and tag nodes. The weight of the edges between user and tag nodes, u a and t a , is set to the number of posts (documents) in which u a has used t a .
The preference vector for each test post is given by ( u, w 1 , w 2 , ..., w k ) where each w q  X  d q . The preference weight of the user u is set to a predefined constant P W , while the preference weight for each word w q is set proportional to its Tf-Idf score in r q , and is given by pw ( w q ) = P W  X  tf idf ( w q , r q ). Since the Tf-Idf weights are normalised to sum 1 per document, the sum of the preference weights of all words w  X  d q is equal to the preference weight attributed to the user u (and is equal to P W ).
An issue which exists in plain FolkRank (as well as our adaptation ContentFolkRank) is the problem of balancing edge weights. Due to the fact that a post can have a vari-able number of tags assigned to it, the user and document nodes of the post can be connected to a variable number of tag nodes each. The difficulty is then deciding the weight to give to the single edge between the user and document node. One can either keep the weight at 1 regardless of the number of tags in the post or set the user-document weight relative to the number of tags in the post. Both are incom-plete solutions only addressing one part of the problem. The problem is to choose edge-weights so that from the perspec-tive of any one node in the graph, an equal total edge weight goes to different types of nodes (ie all document nodes and all tag nodes) while preserving an equal (or explicit) distri-bution of edge weights between nodes of the same type (ie each document node should get the same weight from a user regardless of the number of tags in their respective posts). In order to address the edge-weight balancing problem, I am currently working on a solution which includes an ad-ditional type of node, representing posts themselves, in the graph. This allows to balance edge weights in the context of each post without affecting the weights in other posts which contain the same user, document or tag.
The dataset consists of tagging data from the social book-marking website Bibsonomy 1 [3]. The system and data is di-vided into web site bookmark tagging data and publication BibTex tagging data. We concentrate on website bookmarks and evaluate our recommenders on this subset of Bibsonomy. http://www.bibsonomy.org/ can recommend tags for previously untagged documents since the vast majority of posts in these systems contains new doc-uments. The new item problem for documents can be ad-dressed by building recommenders which consider the con-tent of the documents in their models. My research is fo-cused on this task and I have applied this methodology first to baseline recommenders [6] and then to the more potent graph-based recommender FolkRank. The inclusion of docu-ment content data in tag recommendation systems shows an improvement over purely folksonomy-based recommenders and makes the content-aware recommenders viable for use in real-world tag recommendation systems. In the future, I plan to fully evaluate the suggested ContentFolkRank recommender on further datasets such as CiteULike 2 and Delicious 3 as well as complete the develop-ment of the PostRank recommender. I also plan to exam-ine the usefulness of topic models with regard to FolkRank. After learning a set of topics from the content of the train-ing documents, the FolkRank graph could be created with nodes which represent topics instead of documents or words. A query document would then be mapped onto a set of top-ics and the document-related part of the preference vector would be a set of weights which represent the membership of the document to each of the topics. With ContentFolkRank, especially when using content information from metadata and fulltext content, the need arises to reduce the dimension-ality of the document representation and size of the graph. While topic models would be one way to achieve this, I also plan to explore traditional dimensionality reduction alterna-tives. [1] J. Gemmell, T. Schimoler, M. Ramezani, and [2] P. Heymann, D. Ramage, and H. Garcia-Molina.
 [3] A. Hotho, R. J  X  aschke, C. Schmitz, and G. Stumme. [4] R. Jaeschke, L. B. Marinho, A. Hotho, http://www.citeulike.org/ http://delicious.com/
