 Andrew Bimba 1  X  Norisma Idris 1  X  Norazlina Khamis 1  X  Nurul Fazmidar Mohd Noor 1 Abstract Stemming is a process of reducing a derivational or inflectional word to information retrieval, machine translation, and text summarization, as their pre-processing step to increase efficiency. Currently, there are a few stemming algo-rithms which have been developed for languages such as English, Arabic, Turkish, Malay and Amharic. Unfortunately, no algorithm has been used to stem text in Hausa, a Chadic language spoken in West Africa. To address this need, we propose stemming Hausa text using affix-stripping rules and reference lookup. We stemmed Hausa text, using 78 affix stripping rules applied in 4 steps and a reference look-up consisting of 1500 Hausa root words. The over -stemming index , under -stemming index , stemmer weight , word stemmed factor , correctly stemmed words factor and look-up on the strength and accuracy of the stemmer. It was observed that reference look-up aided in reducing both over-stemming and under-stemming errors, increased accuracy and has a tendency to reduce the strength of an affix stripping stemmer. The rationality behind the approach used is discussed and directions for future research are identified. Keywords Stemming algorithm  X  Hausa language  X  Root word  X  Over-stemming  X  Under-stemming  X  Stemmer accuracy Since 1968, when Lovins ( 1968 ) first officially developed a stemming algorithm for English, various modifications have been performed on the algorithm. This improvement has produced other stemming methods such as Porter X  X  Stemmer ( 1980 ), Dawson X  X  Stemmer ( 1974 ), Paice/Husk X  X  Stemmer ( 1990 ), etc. Stemming can be defined as a computational or manual procedure which reduces all words with the same root or stem to a common form, usually by stripping each word of its derivational and inflectional affixes X  (Lovins 1968 ). For example, words like Connected, Connecting, Connection, and Connections will be truncated to Connect . Stemming is applied to improve the efficiency of information retrieval by providing searches with means of discovering other morphological variants of their search items (Frakes and Baeza-Yates 1992 ). Normally a single stem relates to several full terms, therefore storing the stem instead of the term will go a long way in reducing the size of the indexed files (Frakes and Baeza-Yates 1992 ).

Currently, a few stemming algorithms have been developed for various languages such as Arabic (Alhanini et al. 2011 ), Turkish (Sever and Bitirim 2003 ), Malay (Darwis et al. 2012 ), and Amharic (Alemayehu and Willett 2002 ). Unfortunately, no literatures have been found at the time of writing this paper on any stemming algorithm for the Hausa language. Hausa is a Chadic language spoken in West Africa, mostly northern Nigeria and Niger Republic, having speakers in northern Ghana, Togo, Cameroun and Benin Republic. According to  X  X thnologue X , Hausa language has approximately 25 million native speakers and about 18 million second language speakers all located in 13 different countries in Africa (Lewis 2009 ). This makes Hausa the 38th most spoken language in the world and consisting of the most native speakers south of the Sahara Desert (Schuh 2012 ; Lewis 2009 ; Newman 2007 ). To improve the efficiency of information retrieval and indexing of Hausa text, there is a need to develop a method to stem Hausa text.
This paper describes our effort to stem Hausa text and investigate the suitability of our approach. Section 2 reviews the background of the Hausa language. Section 3 summarizes the stemming algorithms for a few languages. Section 4 describes the proposed method for stemming Hausa text. The evaluation and result obtained from experiments are discussed in Sect. 5 . Finally, Sect. 6 concludes the paper with a suggestion for future work. The first writing system of the Hausa language, called ajami , was based on the Arabic script. Presently, the Romanized orthography, called boko , is used, since its introduction by the British at the beginning of the twentieth century (Newman 2000 ; Jaggar 2001 ). The standard Hausa alphabet consists of 28 characters with 23 from the English alphabet excluding q, v and x with the addition of  X  ,  X  ,  X  ,  X  X nd  X   X  (Newman 2000 ). The Hausa language consists of a large amount of inflectional and derivational morphology (Schuh 2012 ; Newman 2000 ; Smirnova 1982 ). Like most African languages, Hausa has a variety of reduplicative processes in the nominal, adjectival, and verbal systems, but most of the morphologies, both derivational and inflectional, are related to nominal gender, number and to the verbal system to mark lexical verb classes and verbal derivational functions called  X  X xtensions X  (Schuh 2012 ; Newman 2000 ; Smirnova 1982 ).

Hausa nouns are either simple or derived. Simple nouns have their origin traced from the present form such as gona (farm), kar fi (strength), while derived nouns are produced by adding prefixes, suffixes or confixes and in rare cases infixes. Example of nouns with confix (both prefix and suffix) is marowaci (greedy person); having the prefix ma and suffix ci the root word is rowa (greediness, stinginess). Example of noun with suffix is makafta (blindness) has the suffix ta and the root word makafo (blind man). Noun plurals in the Hausa language are derived by either reduplication, addition of suffix, a change in the last vowel or a complete change of the root word (Smirnova 1982 ; Newman 2000 ). Reduplication of the last syllable takes the form Nouns that have internal plurals are jirgi (plane) and jirage (planes), sariki (king) and s arakuna (kings), doki (horse) and dawakai (horses) etc. The nouns with internal plural have both have a suffix in addition to the infix. Verbs in Hausa suffix to the stem, with or without modification of the stem. Examples of derivational verbs are tsorata (frighten) and tsoro (fear), ci (eat), canye or cinye (devour) etc. Infixes occur in few cases such as the infix tta which is used for and guragu (cripples) (Newman 2000 ). Table 1 shows some important affixes in the Hausa language. Kraaij and Pohlmann ( 1994 ) suggested that stemming algorithm for information retrieval is effective in languages with a complex morphology (Kraaij and Pohlmann 1994 ). Over the years researchers have worked in developing stemming algorithms for the English language and other languages such as Arabic, Malay, and Turkish etc. These researches are focused mostly on modifying the stemming information retrieval systems. 3.1 English stemmers Lovins stemmer ( 1968 ), the first English stemmer, was developed based on keywords in material science and engineering documents. The algorithm consisted of 294 endings, 29 conditions and 35 transformation rules, where every ending is linked to any of the conditions. Stripping of a word to its stem is done in 2 stages, the stemming stage and the recoding stage (Lovins 1968 ). The stemming stage The ending is then modified by applying the transformation rules in the recoding stage (Lovins 1968 ; Smirnov 2008 ; Jivani 2011 ).

Dawson ( 1974 ), extended the Lovins stemming algorithm using a broad list of letter. The rule for stripping a suffix using this algorithm is when the word is not shorter than a specific number and its suffix is preceded by a specific order of characters. This makes it more complex than the Lovins algorithm although it is fast and covers more suffixes (Smirnov 2008 ; Jivani 2011 ).

Porter X  X  stemmer was introduced in 1980 by Martin Porter (Porter 1980 ). This stemming algorithm is derived on the basis that there are approximately 1200 suffixes in English language, which comprises of a mix of smaller and simpler uses a partial matching concept to reduce the complexity of the stemming algorithm, although the stemmer may not necessarily produce a root word. This algorithm has resulted 6370 different entries in the vocabulary of stems and less errors than the Lovins stemmer. However, it was slower than Lovins due to its 5 steps whereas Lovins has only 2 steps (Jivani 2011 ).

Paice/Husk stemmer (Paice 1990 ; Smirnov 2008 ; Jivani 2011 ) developed a indexed by the last letter of the suffix (Paice 1990 ; Jivani 2011 ). It has a higher tendency for over stemming than the Porter X  X  algorithm (Smirnov 2008 ; Jivani 2011 ). 3.2 Arabic stemmers For stemming Arabic text, 3 methods are employed; dictionary-based stemming, light-based stemming and unsupervised approach will be discussed. In the dictionary-based stemming, the root word is derived based on linguistic lexicons. It involves 3 steps; pre-processing, entity recognition and stem identification. To remove redundant spaces, sentence boundaries are identified in the pre-processing stage and the text is tokenized and passed to the morphological analyzer. In the entity recognition stage, Arabic personal names are identified. Finally, the stem is extracted based on suffixes, prefixes, clitics and stem. In the light-based methodology, 3 steps are involved; word identification, word segmentation and pattern matching. In the first step common words and non-derivational nouns are identified. In the segmentation stage the words are divided into its components; root word is extracted by matching it with some patterns (Alhanini et al. 2011 ). Alhanini and Aziz offered an enhanced stemming algorithm for Arabic text (Alhanini et al. 2011 ). It was developed to overcome the disadvantages posed by the dictionary-based and light-based stemming. Based on their experiment with an in-house newspaper corpus, they achieved an accuracy of 96 % as compared to the light and dictionary base which have 85 and 88 % accuracy, respectively (Alhanini et al. 2011 ).

The unsupervised approach used by Khorsi ( 2012 ) learns from a corpus of about 14,000 traditional distinct Arabic words mapped to their stems. This approach extracts morphological segments from classical Arabic words using a set of all the distinct n-grams acquired from a plain text input mapped to the frequency. The basic substring depends relatively on this letter. This unsupervised approach deals with the eventual imperfection in the input text such as misspellings, and achieved about 90 % true positives in stemming of classical Arabic text (Khorsi 2012 ). 3.3 Malay stemmers The Malay stemming algorithm has gone through various improvements since it was first introduced by Othman (Darwis et al. 2012 ). It is a rule-based algorithm using 121 affix stripping rules. Ahmad et al. ( 1996 ) decided to improve Othman X  X  algorithm which had some over-stemming and under-stemming errors as a result of no dictionary lookup and dependency on the order of the affixes. Sembok X  X  and Mustapha ( 2001 ) then developed a stemmer which is similar to Sembok X  X  that greatly improved the recall of an automated essay grading system for Malay History text. This improvement was made by altering the order of processing the affixes and as seen in Sembok X  X  algorithm (Idris and Mustapha 2001 ). Regardless of the techniques applied, stemming errors still existed in the earlier Malay Language Stemmers. Hence, a recent approach proposed the use of a Malay Word Register to solve the ambiguity problem and an exhaustive affix stripping approach to tackle under-stemming and over-stemming errors (Darwis et al. 2012 ). This approach performed well with 99.80 % accuracy. 3.4 Turkish stemmers There are a few stemming algorithms developed for Turkish language, such as Longest-Match (L-M) algorithm, an algorithm that is centered on a word search logic done on a lexicon or dictionary that contains Turkish stems and their possible alteration, and Aysin X  X azli (A X  X ) algorithm (Solak and Can 1994 ), which uses a dictionary of Turkish stems annotated with sixty-four tags indicating how to produce root words (Sever and Bitirim 2003 ). Currently, a more accurate stemming algorithm for the Turkish language called FindStem was developed. The algorithm consists of three components;  X  X ind the Root X ,  X  X orphological Analysis X , and  X  X hoose the Stem X  and has a pre-processing stage that handles clitics and converts the words in a text to a smaller case (Sever and Bitirim 2003 ). The FindStem algorithm improved document retrieval effectiveness by about 25 % in terms of precision. 3.5 Amharic stemmers The Amharic stemmer involves the truncation of words to their root form by deletion of both prefixes and suffixes (Alemayehu and Willett 2002 ). This is done by some iterative procedures, which use a minimum stem length, recoding and context-sensitive rule similar to the Lovins algorithm ( 1968 ). During the affix removal process, the prefix is deleted before the suffix, ensuring the minimum stem length condition of 2 consonants. The algorithm was tested against a sample file of 1211 words and showed an accuracy of 95.90 %, 2.70 % over stemming and 1.40 % under stemming errors (Alemayehu and Willett 2002 ). 3.6 Discussion Based on the few stemmers reviewed, it can be seen that several approaches have been used in their implementations. These differences are seen in the complexity of the languages. For instance, English stemmers consist of some affix stripping rules, which includes transformation rules for recoding the stem, verifying the vowel and consonant combination of the word ensuring it is not shorter than a specified value. More complex languages such as Arabic used dictionary-based, light stemming and unsupervised approach, Malay used affix rules, dictionary reference and recently the Malay Word Register to solve the problem with word ambiguity and the Turkish, which implemented the Longest-Match (L-M) algorithm, A X  X  algorithm and FindStem. Other languages such as Amharic used some iterative procedures that use a minimum stem length, recoding and context-sensitive rule just like the English stemmers.

The proposed approach to developing the Hausa stemming algorithm is based on the affix stripping rules used in English, Malay, Amharic and Turkish stemmers. The dictionary approach is used to reduce under-stemming errors. 4.1 Overview The proposed approach for stemming Hausa text is based on 78 affix stripping rules and a reference lookup. It comprises a series of steps to remove certain suffix, prefix, infix or confix based on some substitution rules and a condition which specifies the vowel-consonant sequences in the resulting stem. Similar to other affix stripping based stemmers, some of its substitution rules are determined according to the combination of letters preceding the affix. For example, words with prefix ma and suffix ci having a combination *VwV ci, where V stands for vowel, then the combination will be replaced by *VwV such as in marowaci (miser, greedy man) \ rowa (greediness). Also words having a combination *Cvu ci where C stands for consonant will be replaced by *CVuta, such as in mafauci (butcher) \ fauta (slaughter), marubuci (writer) \ rubuta (write). Similarly, such computations are made for other words with suffix oshi , awa , nci . 4.2 Hausa affix-rules with reference lookup The Hausa Affix-rules and reference lookup was developed based on the information obtained from the books  X  X he Hausa language: a descriptive grammar X  (Smirnova 1982 ) and  X  X he Hausa Language: An Encyclopedic Reference Grammar X  (Newman 2000 ). References were also made to the dictionary;  X  X he Hausa Lexicographic Tradition X  (Newman and Newman 2001 ).

The reference lookup consist of 1500 root words, which were compiled based on common words used in the Hausa language, words found in an old Hausa folktale affix-rules ensure that all common affixes, inflectional morphology such as noun plurals, common noun and verb derivational affixes are covered. 4.3 The basic algorithm The Hausa stemmer is developed based on the rule-based approach. It comprises 4 steps which are:
Step 1a: Check word against reference lookup; if word exist go to next word else stem word reduplication and concrete nouns formed from prefixed particles and other nouns that use hyphens. For example: guje -guje (race) \ guje (ran)
Step 1b: Stem plural of compound nouns formed with prefix ma and suffix ai , ta , and awa . For example: madafai \ madafa (kitchen) marubuta \ marubuci (writer)
Step 1c: Stem plural of compound nouns formed with prefix ma and have the suffix ta. For example: mafauta \ mafauci (butcher) mahaukata \ mahaukaci (madman)
Step 1d: Stem abstract nouns formed from a verb or adjective with suffix ci and prefix ma . For example: ma rowa ci (greediness) \ rowa (to be greedy)
Stem concrete nouns formed from verb with ma prefixed and ya suffixed. For example: mashaya (dinking place) \ sha
Step 2: Check word against reference lookup; if word exist go to next word else stem verbal nouns formed with the suffix wa and abstract nouns formed from simple nouns with suffixes ci (masculine) and ta (feminine) -n -ci (masculine of
Kano origin) and -n -taka (feminine of Sokoto origin), Plural of compound nouns formed with particles and other plural formations. For example: rubuce -rubuce (writing) \ rubutu (write) tayasuwa (helping) \ taya (to help) rantsuwa (swearing, oath) \ rantse (to swear) tadowa (raising) \ tada (to raise) gadonci \ gadontaka (inheritance) \ gado (inheritance) fauta (slaughter) \ fawa (slaughtering)
Step 3: Check word against reference lookup; if word exist go to next word else signify plurals and stem. For example: goribobi \ goriba (a palm fruit) batoci \ bata (small box made of skin) kofo fi \ kofa (door) bindigogi \ bindiga (gun) fi tiloli \ fi tila (lamp)
Step 4: Check word against reference lookup; if word exist go to next word else stem some common plurals by stripping common suffix, prefix and infix. For example:
Suffix: abokai \ aboki (friend) shaiduna \ shaida (witness) ka fi rai \ ka fi ri (heathen)
Prefix: tarwatsa (scattering) \ watsa (to scatter) tsattsaga (separate) \ tsaga (cut, divide)
Infix: littatta fi \ litta fi The flow chart of the algorithm is shown in Fig. 1 . During each step, a reference is checks for a matching rule. If a rule matches a word, then whatever consequences tied to that rule is tested on the stem to be produced, to see if the affix is to be removed or replaced as indicated by the rule. The affix is taken out once a rule X  X  conditions are satisfied and the command is passed to the following step. When the has been exhausted, hence moving control to the following step. This procedure will continue to stem all the words until, the words in the given text is exhausted.
The stemmer was implemented in Python Programing Language which is heavily used in industry, scientific research, and education around the world (Kuhlman 2012 ; Bird et al. 2009 ). To store 1500 Hausa root words for the reference lookup, MySQL was chosen as the database management system. 5.1 Stemmer evaluation Several techniques have been suggested for evaluating the strength, similarities and accuracy of stemming algorithms (Paice 1994 ; Frakes and Fox 2003 ; Sirsat et al. 2013 ). The methods we considered in this research do not evaluate stemmers based on their effect on retrieval performance, as this does not give understanding of the specific causes of errors. These methods are: 5.1.1 Paice  X  s evaluation method In evaluating English based stemmers Paice did not use the customary precision/ recall factors, but as an alternative presented over-stemming index (OI), under-stemming index (UI) and their relationship, the stemming weight (SW). The Paice approach provides insights for stemmer optimization, unlike the traditional method which evaluates stemmers based on retrieval performance (Paice 1994). The Paice evaluation method requires a predefined list of groups of words which are morphologically and semantically related. An ideal stemmer should be able to merge all the semantically equivalent words in a group to a common stem which is not a stem in another group. A stemmer has made under-stemming errors if a stemmed group has more than one unique stem. Subsequently, a stemmer has over-stemmed if a stem from a certain group also occurs in another stemmed group (Kraaij and Pohlmann 1995 ).

The over-stemming index signifies the proportion of words, in different groups, which have been reduced to the same stem. In order to calculate the OI two parameters are required.
 The Over -stemming Index is represented as:
The under-stemming index signifies portion of the words in a group (g), which failed to be merged by the stemmer. Similar to OI, the UI is calculated based on two parameters. The Under -stemming Index is represented as:
The strength of the stemmer known as the stemming weight is measured as the ratio of OI and UI.

A high or low value of SW indicates a strong (heavy) stemmer or a weak (light) stemmer respectively (Kraaij and Pohlmann 1995 ). 5.1.2 Sirsat  X  s evaluation method Sirsat et al. ( 2013 ), proposed a useful method to measure the strength and accuracy of a stemming algorithm. They introduced the Word Stemmed Factor (WSF) to compute the strength of a stemmer. Also, they used the Correctly Stemmed Words Factor (CSWF) and Average Words Con fl ation Factor (AWCF) to measure the accuracy of a stemmer. A stemmer has a higher accuracy if the value of AWCF is higher. 5.2 Result analysis To measure the performance of stemming Hausa text, Paice X  X  (1994) and Sirsat X  X  (2013) evaluation methods were applied to 436 online news articles in Hausa language. The Hausa text consisted of 32,236 words among which 3460 are unique. A total of 490 groups of morphologically and semantically related words were formed from the unique words. This amounted to 1723 words. A sample, of the groups created is shown in Table 2 .

Two versions of the algorithm for stemming Hausa text were evaluated. The first version (HStemV1) consisted of only affix stripping rules. While the second version (HStemV2) consisted of affix stripping rules and a reference lookup. We applied the two versions to our sample group to obtain the values of OI, UI and SW. The results are shown in Table 3 .

HStemV2 had a lower OI than HStemV1. This is because the reference lookup reduced the portion of words merged, from different groups of morphologically and semantically related words. For example, HStemV1 merged words from 4 different groups: ragu (reduce), rana (day), ransa (his life), runduna (company).
 But, HStemV2 merged words from only 2 different groups: ragu (reduce) and ransa (his life).
 Similarly, the UI of HStemV2 was lower than HStemV1. This shows that a reference lookup can reduce the number of semantically equivalent words, which are unsuccessfully merged while stemming. For example, HStemV2 reduced the unsuccessfully merged words by 1, while stemming a group words as compared to HStem V1. A sample result is shown in Table 4 .
 HStemV2.

Furthermore, the strength and accuracy of the two stemming approaches were measured using Sirat X  X  method. The results obtained are shown in Table 5 .
The word stemmed factors (WSF) from the two approaches were well above the 50 % threshold. This indicates the stemmers are strong and aggressive (Sirsat et al. 2013 ). However, the HStemV1 is more aggressive than the HStemV2. This is in agreement with the Paice X  X  evaluation method, which shows HStemV1 is heavier than HStemV2. Furthermore, the following were observed: In this study, we used two methods to stem Hausa text. The first method HStemV1 consisted of only affix stripping rules, while the second method HStemV2 had both affix stripping rules and a reference lookup. Using the Paice X  X  evaluation method, we observed that reference lookup aided in reducing both over-stemming and under-stemming errors. Comparison of HStemV1 and HStemV2 based on stemming stripping stemmer.
 To further measure the effect of reference lookup on stemming accuracy, we used Sirsat  X  s method to calculate the CSWF and AWCF. While using reference lookup, a 6.62 % improvement in correctly stemmed words was achieved. These improve-ments are attributed to the presence of root words in the reference lookup. Even though the reference lookup improved the accuracy of the stemmer, some under-stemming and over-stemming errors were consistent amongst both methods. This could be attributed to the amount of root words in the reference lookup. Further stemming accuracy.
 References
