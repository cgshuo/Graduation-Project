
Athens University of Economics and Business, Athens, Greece Ecole Polytechnique, Palaiseau, France 1. Introduction and motivation 1.1. Online advertising campaigns
Online advertising is gaining acceptance and market share while it has evolved into a $26 billion in-search-based advertising. This follows an ad auction process with pay-per-click (PPC) model [9] for the advertisers set for keywords and their ads. The dominant strategy for ad selection is the hybrid second-price auction [10] system. The three most prevalent options in the search-based advertising market are Google AdWords, Yahoo Search Marketing, and Microsoft AdCenter (the two latter have merged). 2 To-day X  X  most popular search-based advertising platform is Google AdWords having the largest share of revenues amongst its competitors. Google 3 2010 annual report showed that company X  X  advertising rev-enues made up 97% of its revenues in 2008 and 2009, and 96% of its revenues in 2010. In 2010, Google advertising revenues (as an auctioneer) were $29 billion. 4 Search remains the largest online advertising revenue format, accounting for 46.5% of 2011 revenues, up from 44.8% in 2010. In 2011, Search rev-enues totaled $14.8 b illion, up almost 27% from $11.7 billion in 2010. Search has remained the leading format since 2006, having strong sequential growth. 5
Effective keyword selection is one of the most important success factors for online advertising. Com-panies would like to advertise on the most effective keywords to attract only prospective customers and and generate thus higher revenues.

The major problem of an advertising campaign that takes into account only the suggestions of the most popular terms is that they are widely used, therefore the relevant keywords are quite competitive in terms of cost-per-click (CPC) cost. Another issue is that they are volume-based (i.e. number of monthly searches), which means these keywords will tend to drive more traffic to the campaign but not necessarily proportional conversions.

Thus, to tackle the above issues we propose extracting keywords from a given landing page 6 and then extend them with further terms that are highly relevant yet not-obvious to the given input keyword (i.e. they are not appearing as a phrase inside the landing page) with less competition in terms of CPC. Also, in order to facilitate the process of the ad text creation, our system generates automatically for each landing page an ad creative using text summarization.

In addition, the preparation of large scale online advertising campaigns for products, services, brands, or web pages can be a very complex task if it is designed for websites with online catalogs or catalog landing page contains important information and relevant description for each category or product that needs to be considered. The number of the various urls inside these domains makes the effort even more complicated regarding the manual insertion of keywords and ad-texts per landing page. Our proposed system aims at the automation of this procedure in order to aid the advertisers. 1.2. Contributions
This paper offers an integrated approach and a fully functioning prototype system for automated adver-tising campaign creation, management, and monitoring for profit optimization under budget constraints. Thus during the campaign management process, we focus also on budget optimization  X  a very challeng-ing issue  X  presenting a methodology for selecting the most effective keywords and their bids, aiming at In this effort, we focus only on the advertisers and not on the other bidders or the self-interested auc-tioneer. We also assume that there are no public data on the competitors bidding behavior. Nevertheless, the auctioneer, which in our case is Google AdWords, provides us with two important variables: Global Monthly Searches and Competition for each campaign keyword. We use these parameters for observing and predicting the campaign behavior in favor of the advertiser.

Our main contributions are the following:  X  An automated method for budget optimization based on a MCKP (multiple-choice knapsack prob- X  A fully implemented and functional prototype system, developed for Google AdWords platform,  X  A comprehensive experimental evaluation on real world data. Experimental results show that auto-
Overall the proposed framework can contribute to considerably optimizing the resources (time and experienced personnel) devoted to developing and monitoring a campaign. On top of this the monitoring module ensures the maximization of the profit respecting the available budget.

This paper is organised as follows. In Section 2 we offer an overview of related work regarding chal-lenges and key issues in Online Advertising. The description of the first component regarding Keyword and Ad Creative Generation can be found in Section 3. In Section 4 we discuss and analyze the proposed strategy for Campaign Management and Optimization. An overall presentation of the integrated system is described in Section 5. Various case scenarios for experimental evaluation along with their results are presented in Section 6. Finally, in Section 7 we conclude and summarize the major points of the proposed framework as well as suggest future directions for expanding the functions of the prototype. 2. Related work
The research areas of sponsored search, textual advertising and keyword research involve among other topics the automatic extraction, suggestion, and expansion of keywords. An advertising campaign might involve more than one and in most cases a large number of landing pages. The manual selection of even a small set of keywords for advertising purposes is quite laborious, a fact which leads to the recent ap-pearance of commercial tools that create keyword sets directly from a landing page. There exist different techniques for keyword generation. Search engines use query log based mining tools to generate key-word suggestions. In this way, they focus on discovering co-occurrence relationships between terms and suggest similar keywords. They start from an initial key phrase and they are based on past queries that contain these search terms. Google AdWords Keyword Tool 7 exploits this ability and presents frequent queries for the seed set of terms
Other commercial tools 8 determine an advertiser X  X  top competitors and then actively search for the per click advertising are automatically generated. These two approaches may result to a recommendation set of keywords which are likely to be general and thus more expensive. Considering this, the challenge of generating keywords is to select both semantically similar and well-focused keywords.
TermsNet and Wordy [1,17] exploit the power of search engines to generate a huge portfolio of terms and to establish the relevance between them. After selecting the most salient terms of the advertiser X  X  web page they query search engines with each initial seed term. With their methods they find other semantically similar terms. Wordy system proposed single word terms (unigrams) for each seed key-word. Ravi et al. [27] propose a generative model within a machine translation framework so the system translates any given landing page into relevant bid phrases. They first construct a parallel corpus from a given set of bid phrases b , aligned to landing page keywords l , and then learn the translation model chosen domain and data that the human decision factor may affect.

In general, corpus or domain dependent systems require a large stack of documents and predetermined keywords to build a prediction model [21], while on the other hand our developed system works with a corpus independent approach that directly extracts keywords from a single document without any pre-vious or background information, expanding them also with knowledge from snippets of search engine results.

Regarding the automated ad creative generation process, to the best of our knowledge, this issue re-mains still an open problem in natural language processi ng and information retrie val areas as mentioned in [13]. Thus, the corresponding module of our system is an innovative contribution in this regard.
Assuming the ad auction mechanism of a search engine, the main issue that the advertisers are facing is to decide their bidding strategy and how they are going to split their budget among the keywords of their campaign. There have been various attempts to solve the budget optimization problem, some of which are based on heuristics, some calculate approximations using linear programming variations, and others take a more statistical and stochastic approach. Even Dar et al. [11] present their approach of maximizing profit, using a linear programming (LP) based polynomial-time algorithm. To deal with the NP-hardness of the problem, they propose a constant-factor approximation when the optimal profit sig-nificantly exceeds the cost. It is based on rounding a natural LP formulation of the problem. Szymanski and Lee [29] discuss how advertisers, by considering minimum return on investment (ROI), change their bidding and, consequently the auctioneer X  X  revenue in sponsored search advertisement auctions.
Borgs et al. [5] propose a bidding heuristic that is based on equalizing the marginal ROI across all keywords, so they change each keyword bid based on the ROI performance of the previous day. Their system converges to its market equilibrium in the case of the first price mechanism with a single slot when everybody adopts the proposed perturbed bid solution. Another interesting heuristic that uses a simple uniform strategy can be found in the work of Feldman et al. [12].

Rusmevichientong and Williamson [28] develop an adaptive algorithm that learns the proportions of clicks for different keywords by bidding on different prefix solutions, and eventually converges to near-optimal profits, assuming that various parameters are concentrated around their means. Muthukrishnan et al. [26] consider stochastic algorithms that attempt to solve the problem in advance, and not by adaptive learning as in [28], and work for pre-specified probability distributions of keyword clicks.
Zhou et al. [37] model the problem of advertisers winning an ad slot for one keyword they bid upon as an online multiple-choice knapsack problem. A genetic algorithm approach for solving this kind of problem can be found in [36]. Zhou and Naroditskiy [38] continue the work of [37] modeling budget-constrained keyword bidding as a stochastic multiple-choice knapsack problem. Their algorithm selects keywords based on a threshold function which can be built and updated using historical data. It employs distributional information about prices and tries to solve the bidding problem with multiple ad-position, keywords, and time periods.

The problem of finding a near-optimal bidding strategy has been also approached by using autonomous agents. The TAC Ad Auctions (TAC/AA) game investigates complex strategic issues found in real spon-sored search auctions through a simulation of the general auction process [16]. A good contrast between the algorithmic strategies and those of the more simplistic heuristics of the advertisers can be found in the work of Abhishek et al. [2].

More recent approaches explore from a more theoretical point of view the critical problem of designing a learning mechanism able to estimate the CTRs. In [15] the authors analyze the issue and the same time focus on implementing a truthful mechanism with a revenue loss as small as possible compared to an optimal mechanism designed with the true CTRs. In [7] the authors study the multi-armed bandit problems with budget constraint and variable costs. In this setting, pulling an arm will receive a random reward together with a random cost, and the objective of an algorithm is to pull a sequence of arms in order to maximize the expected total reward with the costs of pulling those arms complying with a budget constraint. 3. Generating keywords and Ad-texts 3.1. Keyword generation component
This component aims at proposing valid and representative keywords for a landing page capitalizing on keyword extraction methods, on the co-occurrence of terms, and on keyword suggestions extracted from relevant search result snippets. 3.1.1. Keyword extraction module
In this process, we follow the corpus independent approach to rely solely on the given landing page document. In a web page structure, the text fields represent the semantics of the page. According to vec-tor space model, each web page can be considered as a document and its text content must be segmented as many weighted keywords which all together represent the semantics of a document [35]. After seg-mentation of text, the result will be a set of keywords usually called a  X  X erm X  in a document. Then each of these terms must be weighted properly to assure that terms with higher semantic meaning and rele-vance to our page have larger weight. As a preprocessing step, the HTML content of each landing page is parsed, stopwords are removed and the text content is tokenized. For this process, our system uses the Jericho HTML Parser, 9 a Java library allowing for analysis and manipulation of parts of an HTML document, including server-side tags.

Next, for each word (gram) l j in the tokenized output, we compute a weight associated with the gram for each occurrence inside a specific tag, e.g. the occurrence of a gram inside &lt;h 1 &gt; tags. where weigh t tag is a special weight assigned to each different HTML tag and f jtag is the frequency of the gram inside the specified tag. The weight of each tag is assigned according to its importance inside the HTML document. We set higher values on important tags such as &lt; title &gt; ,metakeywords,meta an approach that ranks the importance of these tags according to where web page designers choose to place the most important information on their website. These weights are proposed after parameter tuning, evaluating, and verifying that the best n-grams were returned along with a proper order. Then, we compute the special weight of each gram as the sum of all w jtag weights: In the next step, the relevance score of each gram is computed: where MAX_WEIGHT represents the maximum special weight that a gram could have inside the HTML document. MAX_WEIGHT can be different for each HTML document because some of them may not have links or bold tags, etc.

Unimportant unigrams occurring on the page are filtered out using a threshold  X  =0 . 001  X  unigrams frequently have a broad meaning, multiword phrases (n-grams) are more specific and thus can be more representative as advertising keywords. A typical query length, especially while searching for a product or service, varies between 1 and 3 grams. For that reason, from the extracted single word terms (unigrams) we pull together possible combinations of two-word phrases (bigrams) inside the given landing page. Next, in order to construct the gram co-occurrence matrix, the top N grams with high rel-evance scores are ranked in descending order. Then we define co-occurrence as follows: if gram i and gram j appear in a same unit (each different area inside an HTML document, defined by HTML tags) which is predefined, then they co-occur once, and freq i,j should be increased by one.

Finally, we consider the co-occurring two-word terms (bigrams) above  X  and follow the same process, searching for new co-occurrence with each unique unigram. In this way, we extract three-word terms (trigrams) as well. By gathering all terms, we construct the extracted keywords vector. In order to boost trigrams first, bigrams second and unigrams third, we modify their relevance score with the following factor: where k is a free parameter (in our experiments we set it to ( k = 100 )and noOfGrams is the number of grams composing a term.
 3.1.2. Keyword suggestion module
From the previous step of keyword extraction we have already extracted the initial keywords. These will be the seed keywords for the additional suggestions. Initially, as this procedure begins, the set of additional suggestions is empty. We provide as input the extracted keywords from the landing page. For each given seed keyword, the keyword is submitted as a query q into a search engine API. We use for this purpose Google JSON/Atom Custom Search API. 10 With this API, developers can use RESTful snippets that are relevant to the query and thus to the keyword. In this way, what we aim to achieve is the discovery of new non-obvious phrases that are not appearing inside the landing page.
From the response data we retrieve /entry/summary/text() which is a string type property indi-cating the snippet of the search result and feed/entry/title/text() which is a string type property indicating the title of the search result. The top 30 results are downloaded and loaded in Apache Lucene Library, 11 which we use it for implementing indexing and query support in our system. Each extracted term from the previous step which was a seed for the query has now been extended to a set of results which we use as a document in the Lucene index. Each set of title and snippet results that were retrieved after a seed query represents this document d for Lucene indexing.
 Based on the Lucene scoring method we find the unigrams and bigrams that have the largest number of occurrences inside the document and thus are kept as the most relevant for the specific seed query. Each of these terms is representing a new query q .

The score of query q for document d is considered to be the cosine-distance or dot-product between document and query vectors in a Vector Space Model (VSM) of Information Retrieval. Again, we sort in descent order the new queries based on this score and we create a vector of suggested keywords and their scores for each of the seed terms. Before we place our output as an integrated input vector to the next component, we normalize scores using min-max normalization:
Finally,weuseanewthreshold(  X  =0 . 5 which represents the 50% of the maximum relevance) for keeping only the most salient terms. In [32] we conduct preliminary blind testing experiments with hu-man evaluators on real world data indicating that our approach outperforms prominent existing industrial solutions in most of the cases. 3.2. Ad creative generation component
In an advertising campaign, the text-based advertisement comprises of a brief title and description, typically no more than 25 and 70 characters long and is associated with each keyword in the relevant ad groups. When a user submits a query to a search engine for a keyword appearing on the advertiser X  X  list, the corresponding advertisement is displayed next to the organic search results, an action called  X  X mpression X . The advertiser pays only when the ad is clicked, following the pay-per-click model. A typical sponsored-search campaign contains multiple bid terms, ranging from a handful to millions. presents a substantial editorial challenge if the task is going to be implemented manually. One option is to use the same title and description for every bid term. But industry wisdom holds this to be a poor strategy, because ads appear less targeted when they do not include the term itself [4]. Both Google and Yahoo render instances of the term in bold text, so an ad with generic text suffers next to one with daunting task for large campaigns.

For this purpose, we propose an automated process for the ad creative generation . Summaries of Web technology of automatic text summarization is maturing and may provide a solution to the information overload problem. Automatic text summarization produces a concise summary of source documents. The summary can either be a generic summary (this type of summary we using in the next process), which shows the main topics and key contents covered in the source text, or a query-relevant summary (which is a further challenge of our system as we could use specific keywords for filtering the resulted summaries), which locates the contents pertinent to user X  X  seeking goals [34].

Concretely, in this subprocess the first step was to extract all the text from the HTML document of the given landing page. Then, we used summarization to keep the most important meaning for the descrip-which is a Java library designed to do text classification. It comes with an implementation of a Bayesian classifier, and has also some other important features, including a text summary facility.
The features for a Google AdWords text ad are the following: 1. Headline of the textAd head : The problem or opportunity; Ad titles are limited to 25 characters. 2. Description Line 1 dl 1 : Short description of big benefit; limited to 35 characters. 3. Description Line 2 dl 2 : Short description of the product/service; limited to 35 characters. 4. DisplayURL url display : The web site X  X  name up to 35 characters; Google can only display up to 35 5. DestinationURL url destination : Landing page: URL of the exact Web page customers visit first.
We kept the constraints and limitations that are given from Google AdWords platform (number of such as:  X  X uy now! X ,  X  X urchase now! X ,  X  X rder now! X ,  X  X rowse now! X ,  X  X e informed X  according to each advertising goal. For example we use  X  X e informed X  for advertising a web page or a brand name,  X  X uy now! X  for advertising a product,  X  X urchase now! X  for advertising a service. The purpose of adding these phrases into the text ad is to optimize the ad descriptions because a call-to-action encourages users to click on the ad and ensures they understand exactly what the advertiser expects them to do when they reach the landing page. We present in Algorithm 1 the procedure of the ad-text automatic creation and evaluation of the automatically generated ad-texts as well as a performance comparison between them and manual generated ones. Algorithm 1: Ad-text automatic creation Input : Landing Page HTLM Document d , t the target of the advertisement Output : An ad-text Let  X  be the length of a sentence in characters
Let  X  be the set of the action phrases limit 1 =25 , limit 2 =35 bidPhrase  X  keywordGenModule ( url destination ) title = &lt;p 1 ,p 2 ,...,p n &gt; if  X  p 1 &lt; limit 1 then else head  X  capitalizeFirstLetterOfGrams ( head ) while  X  end while  X  ( end if s final is a stopword then adText  X  ( head  X  dl 1  X  dl 2  X  url display ) return adText 4. Budget optimization problem
The most challenging issue in the managing process of an advertising campaign is the Budget Opti-mization for the multiple keywords of the campaign. We consider the problem as follows: Assuming a limited budget B , we aim to find the combination of keywords with bids that maximizes the campaign profit. In particular, we are looking for a set of keywords k  X  K ( K is the set of all possible relevant keywords), and their bids b  X  R 0 with where w k is the bidding cost b on keyword k (otherwise called weight) that produce: where v k is the function that computes the expected profit of keyword k (value) assuming of bidding price b . We also consider that for any given k with b =0 , b k =0  X  w k ( k,b )=0 and v k ( k,b )=0 . A zero bid actually means that we choose not to bid on the particular keyword, so there is no cost or profit produced. In the following sections, we present our approach of finding the best combination of keywords and bids that produce maximum profit. Profit can be either monetary profit from product sales Definition 1 . (Weight and Cost) The cost of a keyword k for a given bid b is the product of expected number of clicks and the average cost per click. CPC = Average-cost-per-click.
 Definition 2 . (Value for maximum monetary profit) The profit from each keyword-bid combination comes from subtracting the cost of clicks, which is the cost of advertisement, from the revenue of sales. In Definition 2 CR ( k,b )  X  Clicks ( k,b ) is the total conversions (sales) that we expect to have and Revenue ( k )  X  CR ( k,b )  X  Clicks ( k,b ) is the revenue expected for ( k,b ) , CR = Conversion-rate, Revenue = Revenue-per-conversion.
 Definition 3 . (Value for maximum traffic) When we are interested in maximizing the traffic led to a website, the only valuable measure is the amount of clicks that are generated from keywords. 4.1. Multiple-choice knapsack problem formulation budget B for the period that the campaign is active. The profit from the conversions or clicks for each b the bid that the advertiser initially sets as maximum CPC for the specific keyword. The advertiser has j options of ( k,b ) candidate pairs for each investment, but he must select only one pair per investment The total number N of the final chosen investments must be equal to the r available keywords of the campaign. This is a Multiple-Choice Knapsack Problem (MCKP). MCKP is a 0-1 knapsack problem in is selected. Formally for our problem, the objective is to The above imply that only one bid option is going to be selected for each keyword.

The optimal solution of the MCKP will indicate the best possible choice of keyword-bid options. Our approach was to model this combinatorial optimization problem in a certain way where we can also formulate it as a genetic algorithm (GA) process. In MCKP, the goal is to find for each keyword the option that maximizes the achieved profit. In GA, different chromosomes represent different instances of candidate items and the goal is to find the fittest chromosomes. As we will describe later, a GA finds approximately the proper options of MCKP for profit maximization. This process aims to collect proper statistics from previous time periods and keep only the most profitable options for the next time period. This problem formulation, as we can see in Fig. 2, is different from the approach that we have seen in [37,38], as in our method we focus on the clicks each keyword gains, rather than use MCKP to model the ad auction policy, where each advertiser can select to win at most one ad slot for each keyword. 4.2. Genetic algorithm advantages
Multiple-choice knapsack [23] is a known NP-Complete problem, although some solutions for approx-imate optima in (pseudo-)polynomial time have been found. The approach we take is to capitalize on genetic algorithms [8] that have also polynomial complexity and are used in a variety of global optimiza-tion [24,33] problems. GAs find optima in certain search spaces and are able to combine exploration , knowledge of past solutions (past generations) to the benefit of a new more advanced solution. GA finds optimal solutions or near-optimum, since it is an approximation method, like any other polynomial time method that exists. Deterministic methods result in the same approximate solution in each run, thus mak-ing it difficult to collect data for many keywords. This is because this method will use those keywords that were chosen repeatedly in the past. On the other hand, the solution of a genetic algorithm may vary, our method to have obsessions with certain solutions, thus choosing persistently certain keywords. This kind of flexibility, allows our system to discover faster whether keywords are performing better or worse than they did in the past. Therefore, as ad campaign parameters change, something frequent in the case of ad auctions, a deterministic method will adapt much slower than a genetic algorithm. 4.3. Bidding strategy
The objective is to create a population of candidate solutions (called chromosomes). In each succes-sive generation, a new population of chromosomes is produced by combining (with a procedure called crossover) pairs of chromosomes of the last generation to create new chromosomes (reproduction). The best chromosomes have a better chance to reproduce in the next generation (survival of the fittest), en-suring that each generation is improving. Selection is the process of finding the fittest chromosomes to become the parents of the next generation. For this purpose, there are fitness-proportionate techniques such as Weighted Roulette Wheel Selection (Weighted RWS) and Stochastic Universal Sampling (SUS). These methods make sure that, if a chromosome has a strong fitness, it will have proportionately high probability of reproducing. Moreover, we make sure th at a (small) proportion of the fittest chromosomes few best found solutions, increasing the performance of the genetic algorithm. The process of combining two chromosomes is called crossover . Every time, two offsprings are produced by two parents and the part of the parents. We want our genetic algorithm to avoid falling in local optima. Thus, the concept of mutation is applied on the chromosomes after the crossover process. Mutation changes the new off-the global optimum. The process of generating new populations terminates, usually, when  X  90% of the chromosomes have the same fitness value or the highest ranking solution X  X  fitness has reached a plateau, i.e. successive iterations no longer produce better results. Alternatively termination occurs in the case number of generations is greater than a certain limit. 4.3.1. Strategy steps
In this part, we present the main process of our methodology implementation. First, we describe the primary steps for initializing system parameters. We must define a default initial bid for all keywords that are going to be tested, so given a specific variable information from Google AdWords, we set b for each landing page along with their keywords and text ads. In Algorithm 2, we describe the general form of training periods to test campaign and adgroup settings in order to collect proper statistics. The genetic algorithm step is the implementation of the optimization process. Finally, in each testing phase after optimization, we follow the same process of the first training periods but we also pause previous keywords that are not selected by the optimization module.

The reason for different training periods with only a small amount of testing keywords maintained is that, due to a limited daily budget for our experiments, we do not want to exhaust the budget without having tested many keyword options.
 Optimization step
In the genetic algorithm, the bids for each keyword that are available to choose from are ones that have been tested and we have kept statistics on. It is not possible to have full information about the performance of a keyword that has not been tested at some point. Important performance criteria for our method are click-through rate , impressions , average cost-per-click and conversion-rate .Oncewehave collected the proper statistics, we are ready to apply our genetic algorithm for optimization. Genetic algorithm representation 1. Start Generate random population of m ( m = 40) chromosomes.
 Algorithm 2: Training Period Input : Settings of Adgroups Output : Collected statistics Let t be the number of task periods Let S G  X  N G ,where N G are all the candidate keywords of AdGroup G | S forall the g  X  X  G | do end | M | X  X  G | X  X  S | forall the  X   X  X  M | do end if not firstPeriod then while taskPeriod &gt; 0 do end return statistics 2. Fitness Fitness Function Evaluation. 3. New Population Create a new population by repeating the following steps until the new population 4. Replace Use new generated population for a further run of algorithm. 5. Test End Condition. Loop Go to step 2 .

After a period of testing and collecting statistics, budget optimization task is ready to run again. This process continues executing until the last day of our campaign. 4.3.2. Impressions prediction
We wanted also to examine if a certain type of campaign behavior prediction could be helpful to our system. Clicks, click-through rate, and conversion rate are parameters that are more dependent to inner for the product promotion. However, this is not exactly the case for the impressions that a user query generates. The impressions fluctuate primarily and because of other factors external to the keyword-bid combination. Consequently, we need a means to predict or at least make a good estimation of how many impressions a keyword will receive matched with a specific bid, knowing: 1. Past received clicks for various selected ( k,b ) combinations. 2. Current average user searches for a query similar to this keyword. 3. Current will of competition of all the other bidders upon this specific keyword.
 The idea is to use past results of keyword behavior in a model that can capture externalities of the ad auctions and predict current or future behavior. Google AdWords provides information such as Global Monthly Searches (GMS) and Competition of a keyword which are factors that affect the number of impressions of a keyword and, at the same time, are independent of a particular AdWords Account.
Past data of all keywords with known Impressions has the following form: thus, we aim to predict the impressions of another keyword  X  bid ( k i ,b i ):
After prediction of impressions of all keyword-bid combinations is carried out, new values for clicks and conversions can be computed. A good estimation of impressions may result in a good cost and profit estimation, and can possibly lead to an improved budget optimization. To perform impressions predic-tion, we choose multiple linear regre ssion [25]. This method assumes the existence of linear correlation between the dependent variable y (Impressions) and the independent variables (in our case x 1 = Clicks, x 2 = GMS, x 3 = Competition). So, we need to find the best coefficients that show the relationship between y and x i . The goal is to be able to calculate a new value of y out of the independent variables and the coefficients.
In our case, we have 3 independent variables:
The regression model is fitted with the least squares [18] approach. The sum of square residuals is considered to be the error ( e ) when comparing the y with y : N is the amount of all available records. In the end, the chosen coefficients  X  i must minimize the error produced by prediction to have the best fit of our model.

The result from this process is an alternative input to the genetic algorithm with different calculated statistics in order to study if using impressions prediction would achieve better campaign performance. 5. Integrated system for campaign creation, monitoring, and optimization 5.1. Architecture
This system was developed in the context of an overall automated solution for creating, monitoring, and optimizing a Google AdWords campaign [30]. 13
The AD-MAD System that we have developed is separated in two parts: 1. The Keywords part (GrammAds Component) as we present in Fig. 3, which is responsible for 2. The Campaign part (Adomaton Component) , which is responsible for initializing, monitoring, and In Fig. 4, we present the two parts with the associations of their components.

The Adomaton Component is responsible not only for the proper monitoring and optimization of the product and the ad texts are written, everything is ready to create and manage the advertising campaign, the system must perform to reach the desired goal. 5.2. Software description
The software that has been developed serves three basic purposes:  X  To showcase that the proposed architecture and methodology is plausible and feasible and provide  X  To become a good basis for a larger system that has more features and can provide more function- X  To find and implement tangible solutions to the issues arising at the very core of a Campaign cre-The code of this software was completely written in Java using JDK SE 6 on the Eclipse IDE. For the database engine, MySQL 5.5 Community Server was used. We used AdWords API Java Library to communicate with the programming interface of AdWords, JGAP Library which is an open source framework for implementing and configuring genetic algorithms and genetic programming, and Flana-gan X  X  Java Scientific Library to implement multiple linear regression. 5.2.1. Campaign creation AdWords API wrapper
The Google AdWords API is fairly tricky. Even for trivial tasks, such as creating and setting a key-word, it requires a series of functions to be called, making it a long procedure to code. For the sake of programming sanity, many tasks must be wrapped to simpler functions, saving effort in typing, code readability and making the software less error prone. Furthermore, a lot of attention must be paid to the fact that using the AdWords API is not for free. In particular, Google charges API units per thousand with low-costliness.
 Create the campaigns The campaigns must be organized into adgroups which in turn contain keywords and ad creatives. site of the promoted service. The Crawling module (i.e. a URL Aggregator) retrieves all the candidate landing pages of the inserted homepage. Using the extraction tools from the Keyword part of the system, those landing pages are analyzed and information is extracted, such as product information, languages, tem works in semi-automatic mode, otherwise the system uses this information as it is provided, working fully-automatically. Then, campaigns are created that contain adgroups and the rule of thumb is that for each landing page there must be a separate adgroup that contains its keywords and ad creatives. At the creation stage, all keywords work in trial mode, which means that no statistical data exist for them yet then use budget optimization. 5.2.2. Statistics and database Task scheduler
Since ad campaigns run for weeks, months, or even years, a scheduler is important for the system in order to ensure a task start and end. If a scheduler does not exist, the system cannot store proper statistics and allocate resources properly. The system also has to respect the budget constraint for a certain time period. For each new period, a new budget must be allocated and new optimal keywords must be selected.
 Statistical information
A SQL database must store all the statistical information collected for the keywords to be able to track their performance. All information about keywords, such as impressions, clicks, click-through rate, conversion rate, average position, average cost-per-click are necessary for the budget optimization module function. We also store temporal information, in the sense of distinguishing time periods. Also, there is the need for some data access objects (DAOs) that make retrieval and insertion of data to the database simpler. Both the Genetic Algorithm and the Prediction modules make extensive use of the statistical information of the keywords. 5.2.3. Budget optimization Genetic algorithm
The statistics module must provide a list of all possible keywords. Each keyword of the list must have all the possible bids for which we have statistics. For each keyword-bid combination ( k,b ) ,anevalu-ation of the cost and profit must be computed based on the keyword performance information kept in the database. If a bid gives negative expected profit, it must be erased from the data because it cannot contribute to a maximum profit solution. Optionally, instead of directly using the value of keyword im-pressions to compute cost and profit, prediction can used. The predicted impressions will have an effect on expected clicks that in turn affect cost and profit. The problem is then modeled into chromosomes and the fittest chromosome is finally selected by the genetic algorithm after several generations of breeding from the fittest chromosome. These keyword-bid pairs will form the new bidding strategy, which must be set in the AdWords account of the advertiser using the AdWords API. Evolving the population the max number of times (we set the number of maximum allowed evolutions to 3000) and setting the initial population size of chromosomes to 40, help us avoid premature convergence, which was considered as the main problem of GA theory.
 Prediction
This is the module that is responsible for performing impressions prediction using the past statistics of keywords and targeted information taken from AdWords, such as the Global Monthly Searches and the level of Competitio n that exists for a given keyword. Before budget optimization, optionally, we can use this module in order to refine the statistics used by applying impressions prediction. A regression model finds the relationship between the impressions and other variables, such as clicks, global monthly searches, and competition. It then re-computes the value of impressions for each keyword-bid combina-tion using the independent variables. The values of Global Monthly Searches and Competition must be computed from the AdWords API. 6. System evaluation and experiments
We present here several experiments and data analysis that we have conducted in order to study the performance of our proposed methodology and system. In the first three experiments, we evaluate only the optimization step, while in the fourth experiment we test the campaign creation, management, and optimization modules as an integrated process to evaluate the system as a whole. We continue with the comparison between clicks and CTR in an experiment between the automated and the manual version of the campaigns for the same webpage, while introducing also a focused monitoring module through the visualization of key performance metrics. 6.1. Evaluation data We use the historical data of a large scale AdWords Campaign of a web site in the area of car rental. We selected from the collected data all the campaigns and adgroups that promote  X  X ar rental in Crete X . The data collected are relevant to derive the period May 2009 to November 2010, during which the With the retrieved data of Google AdWords keyword statistics and sales for the car renting business, we get sufficient data for 39 weeks of this large scale campaign to perform tests on the impressions following features: { Campaign, Adgroup, Week, Keyword, MaxCPC, Impressions, Clicks, Conversions, CTR, Avg CPC, Cost, Profit, Quality Score, FirstPageCPC, Avg Position, Avg CPM }. For the impressions prediction module of the system, we need to have for every keyword the  X  X lobal Monthly Searches X  and the  X  X ompetition X  values, retrieved using the AdWords API. Our budget optimization system provides two options; to optimize budget for maximum traffic or for maximum profit. Additionally, we can use original or predicted impressions.

Our budget optimization system provides two options; to optimize budget for maximum traffic or for maximum profit. Additionally, we can use original or predicted impressions. These options give us four basic testing scenarios: 1. Budget Optimization for Profit with No Prediction (NoPredProfit). 2. Budget Optimization for Traffic with No Prediction (NoPredTraffic). 3. Budget Optimization for Profit With Prediction (PredProfit). 4. Budget Optimization for Traffic With Prediction (PredTraffic). 6.2. Experiments 6.2.1. Scenario comparison
The data used for the first experiment on the budget optimization process are the keyword statistics we collected from the car rental website for 39 weeks and the budget to be allocated for the next (hypothet-ical) week. Since budget optimization is performed with a genetic algorithm  X  a the stochastic method  X  the result will slightly vary every time it is executed, even with the same input data. So, each scenario average value of 30 executions.

The result of every execution of the budget optimization module is an optimal keyword-bid combi-nation that ensures either maximum traffic or maximum profit for a limited budget. In particular, every result of the genetic algorithm application produces the following data:  X  Clicks : How many clicks is the optimal solution (keyword  X  bid combination) expected to produce  X  Cost : How much is it expected to cost in the following week? This value must always be lower or  X  Profit : How much profit are we expected to make in the following week? The profit is calculated  X  #Keywords Used : This value counts the number of keywords which were selected in the optimal  X  Average Bid : The average value of the bid (or MaxCPC ) of every selected keyword of the optimal
The above output is the average result solution of the applied budget optimization for a future 40th week of the advertising campaign. This experiment is using a simulation and we make here the assump-tion that the metrics are computed as if CTR, clicks, costs, and impressions were maintained the same budget. In Table 5, we present the average results of 30 executions for the four scenarios with budgets of 50, 100, 200, 400, and 600 units (euros).

We notice the following on all tests: The methods that were using prediction outperform the simple GA the Average Bid increases along with the available budget. This is because the cheaper (cost-efficient) keywords are running out, so we have to use more costly ones. All solutions deplete their budget unless there are no more keywords left or the keywords left are not profitable. In the case of budget = 600, when optimizing for traffic without prediction, we reach the limit of how many clicks can be made, and therefore our solution produces the maximum cost (405.16), which is less than the budget (600). This solution also uses all available keyword options (107 in size). In the case of budget = 400 and budget = of small budgets, we notice that optimizing for profit generates almost as much traffic as optimizing for traffic. This could mean that keywords that generate more profit are more relevant, hence they are clicked more often. 6.2.2. Genetic algorithm performance on finding the best solutions for MCKP
In the second experiment, we apply the genetic algorithm to evaluate the hypothesis of choosing the optimal keyword-bid combination of each week. The input weekly budget for our scenarios is the corresponding actual weekly cost of the campaign. For each week, the input keyword options for the genetic algorithm are the actual tested keywords and bids for the specific week. Each scenario output is for both traffic and profit maximization cases. 6.2.3. Genetic algorithm performance on optimizing next week X  X  performance
In the third experiment, we test the expected weekly performance of each of our methodology scenar-ios towards the actual campaign weekly performance. For estimating performance of week i , the genetic algorithm takes into consideration the statistics from weeks 1 to i  X  1 , resulting in a  X  X eave-one-out X  cross-validation-like process. The training set is the actual statistic set from week 1 to i  X  1 and the and bids of the 20th week are the collected statistics from weeks 1 to 19. The purpose of this evaluation is to find solutions that achieve higher weekly performance than the actual one. Each scenario output from the budget optimization process is the average result of 10 executions of the genetic algorithm. The input weekly budget for our scenarios is a bit higher (1 X 2 euros) than the corresponding actual weekly cost of the campaign, assuming without having the actual information, that on average the budget is not our two methods which use prediction, surpass the real results. In this experiment, the optimization pro-cess had started after the 4th week, because the advertiser until the 3rd week had been testing very few keyword options (3 X 4) and the GA needs more testing data to perform a valid optimization. The impor-tant observation here compared with the stronger performance of the previous experiment was the use of much older and thus outdated data that did not correspond to valid receiving impressions and clicks in the i th week. The Impressions Prediction module had a major contributed role in the calculation of more up-to-date data because it achieved to capture current external factors and conditions of the ad auction. Thus, the methods that were using prediction outperformed the other ones. 6.2.4. Comparison of parallel competing campaigns (Automated compared to manual)
In the fourth experiment, we create Google AdWords campaigns for two companies; Client1 is a company that offers web developing solutions (a highly competitive field for online advertising) and Client2 is a company that offers aluminum railing and fencing products. For each company we create one manual and one automated campaign. Each automated campaign is created semi-automatically by our system (the only intervention is the parameter input of daily budget, account credentials, period of active campaign, and keywords). We set our automated campaigns for traffic maximization as the advertising goal. We use for each manual and automated campaign the same keywords and the same budget in order to test only the monitoring and optimization process. In this experiment, we do not use impressions prediction, only the real values case scenario (due to limited budget for further experiments the automated campaign achieved higher performance in total traffic than the manual one. In the case of Client1, the automated achieved a slightly lower performance than the manual one. In both cases, the automated campaigns achieved better placement in the advertising slots than the manual ones, as well as lower prices for average cost-per-click.
 In Figs 9 and 10 we present the comparison of two important performance metrics for one automated and one manual campaign developed for the same webpage. The experiment was conducted for a period of about ten days (November 2012 and December 2012) for a greek car rental company. The automated campaign not only achieved better performance in terms of clicks, but also gain better CTR values which are distributed uniformly across all period days. This means that our selected keywords and ad creatives to the users in order to click to the advertisement.
In Figs 11 X 13 we propose a Campaign Performance Visualization (or Visualization of Key Perfor-mance Metrics) Module, which is included in order to present to the end user a more focused-monitoring AdGroup in terms of traffic or monetary profit, with the min-max bid representation per day which is Greek car rental companies may want to attract more users during summer periods, bigger competition, higher bids), and finally with the cumulative ROI after the end of each Period. The latter is calculated based on
ROI:
Thus, for the Traffic ROI we have: and for the Monetary Profit ROI we have: 7. Conclusions and future work
In this paper we proposed a system that, given a landing page in the context of online advertising for products and services promotion, automatically extracts and suggests keywords for web advertising campaigns as well as automatically generates advertisement texts. In addition, we have proposed an architecture and a prototype framework for automated advertising campaign development, monitoring, and optimization, putting emphasis on the campaign creation, management, and budget optimization modules. We articulated the optimization problem as a multiple-choice knapsack for which we find the most profitable combination of keywords and their bids. We approximated the solution capitalizing on a genetic algorithm for budget optimization with multiple keyword options. We also proposed the use of keyword statistics to predict keyword behavior using multiple linear regression. Both a. the use of a genetic algorithm and b. impressions prediction for this type of problem form innovative solutions with respect to existing literature. Proof of concept was given with the implementation of the proposed architecture. The implemented system was extensively evaluated with data from a real website providing insight on how budget optimization works with and without keyword impressions prediction .Wehave also tested the integrated system for two real world web sites and compared our automated campaigns towards the manually created ones. The budget optimization problem, even though it is an NP-hard problem, has been practically solved by modeling it as a multiple-choice knapsack problem.
In this way, our contributions regarding the improvement of the advertising campaign development process consist in:  X  Automating the task of finding the appropriate keywords.  X  Recommending multiword terms (n-grams) with high specificity without the need to capitalize on  X  Generating fast snippets of ad texts.
  X  Proposing a method of overall campaign optimization.  X  A fully developed system with convincing experimentation on real world data from various thematic
Using the search result snippets for the process of keyword suggestion has helped a lot to retrieve faster the proper information rather than crawling actual documents. It was also a helpful mean to keep the trends and thus retrieving trending topics at a specific time. Also, searching result snippets from queries on twitter search and tags can be helpful due to the compact nature of twitter messages. They can help in filtering out irrelevant or general information, while mining market trends.
Currently, we are designing a further extension on our system: the expansion of the ad creative gen-eration component. The creation of specialized ad text will be based on previous work and research studies on paraphrasing methods, sentence extraction and compression, sentence and surface realizers, and text summarization. In combination with category specific templates which will be filled with the vertisements of the campaign. The above features will be extracted from customer X  X  web page primarily. We will experiment with different comparable approaches for generating the sentences that will describe our advertisement: 1. The advertiser can manually give as input an indicative phrase or sentence that thinks it describes 2. We can use automatic text summarization techniques for summarizing the content of the given 3. The system could take into account sentiment analysis as well, checking the polarity of the ad-text
Regarding the optimization process further challenges that could be explored are the following:  X  Take into consideration location features [22].  X  Explore the potentials of a reinforcement learning method such as Contextual Bandit Learning [19]  X  Test alternate and more deterministic bidding strategies in order to compare their performance,  X  Predict clicks using regression trees.
 Acknowledgements
This article is an extended version of our work [20] in the Eighth Ad Auctions Workshop and we thank the anonymous reviewers for several helpful suggestions and feedback. The research of S. Thomaidou is co-financed by the European Union (ESF) and Greek national funds via Program Education and Lifelong Learning of the NSRF  X  Program: Heracleitus II. Prof. M. Vazirgiannis is partially supported by the DIGITEO Chair grant LEVETONE in France. References
