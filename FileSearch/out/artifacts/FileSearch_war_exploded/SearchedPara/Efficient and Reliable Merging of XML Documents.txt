 Many knowledge-based processes rely on XML-based office documents. Up to now, versioning and merging XML doc-uments was a difficult and error-prone task, mostly done manually. The support by tools is still in its infancy. We have presented a novel approach to compare and merge XML documents in a reliable way using context fingerprints. In this demonstration, we show the application of our toolset to ODF documents using a new, simple, and user-friendly graphical user-interface.
 I.7.1 [ Document and Text Processing ]: Document and Text Editing X  Document management, Version control Management, Reliability, Algorithms.
 XML diff, XML merge, version control, office documents Documents are an important pillar of today X  X  office work. Teams are built on top of classic hierarchies, with coop-eration and collaboration as an everyday task. Since most people are part of different teams, the collaborative relati on-ships are manifold. Conventional business processes can-not be applied to this highly dynamic environment, where a major part of the common knowledge is represented by documents. Because this collaboration is ad-hoc, it has be-come widely accepted practice to exchange documents via e-mail. The different document versions are compared man-ually, which is both time-consuming and error-prone.
In the last years, XML emerged as de-facto standard for a wide variety of documents. The most prominent examples are OpenDocument, Office OpenXML, and XHTML. The use of XML facilitates the development and application of independent tools to handle these documents adequately.
To allow for a meaningful merge of XML documents, we have introduced a new delta model [4]. Its key idea is the use of a context fingerprint that allows for reliably identifying an edit operation before its application to the document. Section 2 gives a brief introduction to our delta model. An alternative approach makes use of a three-way-diff [3]. In this scenario, the nearest common ancestor version in terms of the document evolution is additionally taken into account. Other approaches annotate the document with ver-sioning information [1], which causes severe privacy and se -curity issues, mostly because of the metadata contained.
In this demonstration, we present a graphical user inter-face to our toolset that supports the comparison and the merge of XML documents. A drag-and-drop interface fos-ters the usability of our interface. It is described in Secti on 3.
A so-called diff procedure compares two versions of a doc-ument. It computes all edit operations needed to transform one document version into the other one, and stores them within a delta . Using a patch procedure, this delta can be used to reconstruct the new document version from the for-mer one. Additionally, this delta can be applied to another version of the document, thus resulting in a merge of the document versions. While this is a common approach in the domain of line-based diff tools [2], its application to th e domain of XML documents appears to be challenging task. Each edit operation can affect the paths to all subsequent nodes, hindering a conventional XML patch procedure.
To allow for a meaningful merge, we enrich each edit oper-ation with a context fingerprint [4]. It contains the adjacen t nodes around the edit operation, normalized using hashing techniques. Furthermore, the former value of the edited par t is stored. This enables the patch procedure to detect con-flicts and allows the user for resolving them interactively.
Our delta model supports the following types of edit op-erations: insert , delete , move , and update . The first three types address subtrees or tree sequences, whereas the last one is intended to address single nodes within the XML tree. Using that definition, it is possible to create highly compact and meaningful deltas compared to other XML diff approaches [5]. Within one delta, the edit operations have to be independent from each other. In order of this design decision, it does not matter if some of the edit operations cannot be applied to the document during the merge.
During the patch process, the appropriate position of each edit operation is retrieved using its context fingerprint. F irst, the fingerprint is compared with the node pattern found at the designated path of the edit operation. If the fingerprint matches, the edit operation is applied. Otherwise, a neigh-borhood of match candidates around the designated path is Figure 1: Documents and deltas can be assigned by drag-and-drop. Given two items, the third is computed automatically. constructed. Its radius is determined by the environment to avoid an exhaustive search in case of sub-optimal matches. For each candidate, the fingerprint is applied as described before. In a merge scenario, it is likely that the context of an edit operation has been altered in the meantime with-out affecting the meaning of the edit operation itself. To allow these edit operations to be performed, a best-effort approach is used that accepts even sub-optimal results. The parameter threshold is used determine the minimum quality expected by a matching fingerprint. The quality is com-puted depending on the number of matching nodes in the context of an edit operations w.r.t. the distance of the node to the edit operation itself.

When defininig the threshold, a tradeoff has to be made between reliability and usefulness. A threshold of 1.0 woul d require all fingerprints to match completely. However, this heavily decreases the number of successfully applied edit o p-erations, as many operations are rejected. On the other hand, an erroneously applied edit operation is absolutely undesirable in most scenarios.
In our demonstration, we show the strength of our ap-proach using documents based on the OpenDocument (ODF) format. We briefly describe the intended collaboration sce-nario: a document is edited by three persons in parallel. The versions are exchanged using e-mail. One person performs the task of merging the different versions using our graphica l user interface. The demonstration relies on a screencast of the working steps performed to merge these three document
The user interface consists of a main window, a result win-dow, and a message log. In the main window, the user can place two document versions to compare using drag-and-drop from his desktop (see Figure 1(a)). The delta com-putation starts automatically and details are shown in the result window.

To merge two document versions, a base document and a delta are dropped onto the main window (see Figure 1(b)). The starting patch run can be controled using the parame-ters described in Section 2, and the result is displayed in th e result window (see Figure 2). For each edit operation, the merge quality is shown. Additionally, the matching pattern of the context fingerprint is displayed to support the user investigating the merged parts of the document afterwards. www.unibw.de/inf2/Forschung/Forschungsthemen/merge Figure 2: The effects of a merge are displayed in the result window, showing details of each edit opera-tion.

Our application allows the user for launching a corre-sponding document viewer directly to verify the merge re-sult. Furthermore, diff and patch runs can be performed sequentially without forcing the user to save his interme-diate result. The demonstration shows how to merge three different document versions efficiently without being tighte n to strict document workflows or management systems.
We have shown the applicability of a toolset supporting the merge of XML document versions. The basic concept is an XML delta model using reliable context fingerprints. The presented user interface is a great improvement for col-laboration scenarios based on XML documents. [1] R. L. Fontaine. Merging xml files: a new approach [2] FSF. Comparing and Merging Files . Free Software [3] T. Lindholm, J. Kangasharju, and S. Tarkoma. Fast [4] S. R  X  onnau, C. Pauli, and U. M. Borghoff. Merging [5] S. R  X  onnau, G. Philipp, and U. M. Borghoff. Efficient
