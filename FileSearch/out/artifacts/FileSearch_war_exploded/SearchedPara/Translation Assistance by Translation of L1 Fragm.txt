 Whereas machine translation generally concerns the translation of whole sentences or texts from one language to the other, this study focusses on the translation of native language (henceforth L1) words and phrases, i.e. smaller fragments, in a foreign language (L2) context. Despite the ma-jor efforts and improvements, automatic transla-tion does not yet rival human-level quality. Vex-ing issues are morphology, word-order change and long-distance dependencies. Although there is a morpho-syntactic component in this research, our scope is more constrained; its focus is on the faith-ful preservation of meaning from L1 to L2, akin to the role of the translation model in Statistical Ma-chine Translation (SMT).

The cross-lingual context in our research ques-tion may at first seem artificial, but its design ex-plicitly aims at applications related to computer-aided language learning (Laghos and Panayiotis, 2005; Levy, 1997) and computer-aided transla-tion (Barrachina et al., 2009). Currently, lan-guage learners need to refer to a bilingual dictio-nary when in doubt about a translation of a word or phrase. Yet, this problem arises in a context, not in isolation; the learner may have already trans-lated successfully a part of the text into L2 leading up to the problematic word or phrase. Dictionar-ies are not the best source to look up context; they may contain example usages, but remain biased to-wards single words or short expressions.

The proposed application allows code switch-ing and produces context-sensitive suggestions as writing progresses. In this research we test the feasibility of the foundation of this idea.The fol-lowing examples serve to illustrate the idea and demonstrate what output the proposed translation assistance system would ideally produce. The parts in bold correspond to respectively the in-serted fragment and the system translation.  X  Input (L1=English,L2=Spanish):  X  X oy va- X  Input (L1-English, L2=German):  X  X as wet- X  Input (L1=French,L2=English):  X  X  rentre ` a  X  Input (L1=Dutch, L2=English):  X  X orkers
The main research question in this research is how to disambiguate an L1 word or phrase to its L2 translation based on an L2 context, and whether such cross-lingual contextual approaches provide added value compared to baseline models that are not context informed or compared to stan-dard language models. Preparing the data to build training and test data for our intended translation assistance system is not trivial, as the type of interactive translation as-sistant we aim to develop does not exist yet. We need to generate training and test data that real-istically emulates the task. We start with a par-allel corpus that is tokenised for both L1 and L2. No further linguistic processing such as part-of-speech tagging or lemmatisation takes place in our experiments; adding this remains open for future research.

The parallel corpus is randomly sampled into two large and equally-sized parts. One is the basis for the training set, and the other is the basis for the test set. The reason for such a large test split shall become apparent soon.

From each of the splits ( S ), a phrase-translation table is constructed automatically in an unsuper-vised fashion. This is done using the scripts provided by the Statistical Machine Translation system Moses (Koehn et al., 2007). It invokes GIZA++ (Och and Ney, 2000) to establish sta-tistical word alignments based on the IBM Mod-els and subsequently extracts phrases using the grow-diag-final algorithm (Och and Ney, 2003). The result, independent for each set, will be a phrase-translation table ( T ) that maps phrases in L1 to L2. For each phrase-pair ( f s ,f t ) this phrase-translation table holds the computed trans-lation probabilities P ( f s | f t ) and P ( f t | f s ) .
Given these phrase-translation tables, we can now extract both training data and test data using the algorithm in Figure 1. In our discourse, the source language ( s ) corresponds to L1, the fall-back language used for by the end-user for insert-ing fragments, whilst the target language ( t ) is L2.
Step 4 is effectively a filter: two thresholds can be configured to discard weak alignments, Figure 1: Algorithm for extracting training and test data on the basis of a phrase-translation ta-ble ( T ) and subset/split from a parallel corpus ( S ). The indentation indicates the nesting. i.e. those with low probabilities, from the phrase-translation table so that only strong couplings make it into the generated set. The parameter  X  1 adds a constraint based on the product of the two conditional probabilities ( P ( f t | f s )  X  P ( f s and sets a threshold that has to be surpassed. A second parameter  X  2 further limits the con-sidered phrase pairs ( f s ,f t ) to have the prod-uct of their conditional probabilities not not devi-ate more than a fraction  X  2 from the joint prob-ability for the strongest possible pairing for f s , the source fragment. f strongest t in Figure 1 corresponds to the best scoring translation for a given source fragment f s . This metric thus effec-tively prunes weaker alternative translations in the phrase-translation table from being considered if there is a much stronger candidate. Nevertheless, it has to be noted that even with  X  1 and  X  2 , the test set will include a certain amount of errors. This is due to the nature of the unsupervised method with which the phrase-translation table is constructed. For our purposes however, the test set suffices to test our hypothesis.
In our experiments, we choose fixed values for these parameters, by manual inspection and judge-ment of the output. The  X  1 parameter was set to 0 . 01 and  X  2 to 0 . 8 . Whilst other thresholds may possibly produce cleaner sets, this is hard to eval-uate as finding optimal values causes a prohibitive increase in complexity of the search space, and again this is not necessary to test our hypothesis.
The output of the algorithm in Fig-ure 1 is a modified set of sentence pairs ( sentence 0 t ,sentence t ) , in which the same sentence pair may be used multiple times with different L1 substitutions for different fragments. The final test set is created by randomly sampling the desired number of test instances.

Note that the training set and test set are con-structed on their own respective and indepen-dently generated phrase-translation tables. This ensures complete independence of training and test data. Generating test data using the same phrase-translation table as the training data would introduce a bias. The fact that a phrase-translation table needs to be constructed for the test data is also the reason that the parallel corpus split from which the test data is derived has to be large enough, ensuring better quality.

We concede that our current way of testing is a mere approximation of the real-world scenario. An ideal test corpus would consist of L2 sentences with L1 fallback as crafted by L2 language learn-ers with an L1 background. However, such cor-pora do not exist as yet. Nevertheless, we hope to show that our automated way of test set genera-tion is sufficient to test the feasibility of our core hypothesis that L1 fragments can be translated to L2 using L2 context information. We develop a classifier-based system composed of so-called  X  X lassifier experts X . Numerous classi-fiers are trained and each is an expert in translating a single word or phrase. In other words, for each word type or phrase type that occurs as a fragment in the training set, and which does not map to just a single translation, a classifier is trained. The clas-sifier maps the L1 word or phrase in its L2 context to its L2 translation. Words or phrases that always map to a single translation are stored in a sim-ple mapping table, as a classifier would have no added value in such cases. The classifiers use the IB1 algorithm (Aha et al., 1991) as implemented plements k -nearest neighbour classification. The choice for this algorithm is motivated by the fact that it handles multiple classes with ease, but first and foremost because it has been successfully em-ployed for word sense disambiguation in other studies (Hoste et al., 2002; Decadt et al., 2004), in particular in cross-lingual word sense disam-biguation, a task closely resembling our current task (van Gompel and van den Bosch, 2013). It has also been used in machine translation stud-ies in which local source context is used to clas-sify source phrases into target phrases, rather than looking them up in a phrase table (Stroppa et al., 2007; Haque et al., 2011). The idea of local phrase selection with a discriminative machine learning classifier using additional local (source-language) context was introduced in parallel to Stroppa et al. (2007) by Carpuat and Wu (2007) and Gim  X  enez and M  X  arquez (2007); cf. Haque et al. (2011) for an overview of more recent methods.

The feature vector for the classifiers represents a local context of neighbouring words, and op-tionally also global context keywords in a binary-valued bag-of-words configuration. The local con-text consists of an X number of L2 words to the left of the L1 fragment, and Y words to the right. When presented with test data, in which the L1 fragment is explicitly marked, we first check whether there is ambiguity for this L1 fragment and if a direct translation is available in our sim-ple mapping table. If so, we are done quickly and need not rely on context information. If not, we check for the presence of a classifier expert for the offered L1 fragment; only then we can proceed by extracting the desired number of L2 local context words to the immediate left and right of this frag-ment and adding those to the feature vector. The classifier will return a probability distribution of the most likely translations given the context and we can replace the L1 fragment with the highest scoring L2 translation and present it back to the user.

In addition to local context features, we also ex-perimented with global context features. These are a set of L2 contextual keywords for each L1 word/phrase and its L2 translation occurring in the same sentence, not necessarily in the immediate neighbourhood of the L1 word/phrase. The key-words are selected to be indicative for a specific translation. We used the method of extraction by Ng and Lee (1996) and encoded all keywords in a binary bag of words model. The experiments however showed that inclusion of such keywords did not make any noticeable impact on any of the results, so we restrict ourselves to mentioning this negative result.

Our full system, including the scripts for data preparation, training, and evaluation, is implemented in Python and freely available as open-source from http://github.com/ proycon/colibrita/ . Version tag v0.2.1 is representative for the version used in this re-search. 3.1 Language Model We also implement a statistical language model as an optional component of our classifier-based sys-tem and also as a baseline to compare our system to. The language model is a trigram-based back-off language model with Kneser-Ney smooth-ing, computed using SRILM (Stolcke, 2002) and trained on the same training data as the translation model. No additional external data was brought in, to keep the comparison fair.

For any given hypothesis H , results from the L1 to L2 classifier are combined with results from the L2 language model. We do so by normalising the class probability from the classifier ( score T ( H ) ), which is our translation model, and the language model ( score lm ( H ) ), in such a way that the high-est classifier score for the alternatives under con-sideration is always 1 . 0 , and the highest language model score of the sentence is always 1 . 0 . Take score T ( H ) and score lm ( H ) to be log probabili-ties, the search for the best (most probable) trans-lation hypothesis  X  H can then be expressed as:  X  H = arg max
If desired, the search can be parametrised with variables  X  3 and  X  4 , representing the weights we want to attach to the classifier-based translation model and the language model, respectively. In the current study we simply left both weights set to one, thereby assigning equal importance to trans-lation model and language model. Several automated metrics exist for the evaluation of L2 system output against the L2 reference out-put in the test set. We first measure absolute accu-racy by simply counting all output fragments that exactly match the reference fragments, as a frac-tion of the total amount of fragments. This mea-sure may be too strict, so we add a more flexible word accuracy measure which takes into account partial matches at the word level. If output o is a subset of reference r then a score of | o | signed for that sentence pair. If instead, r is a sub-set of o , then a score of | r | perfect match will result in a score of 1 whereas a complete lack of overlap will be scored 0 . The word accuracy for the entire set is then computed by taking the sum of the word accuracies per sen-tence pair, divided by the total number of sentence pairs.

We also compute a recall metric that measures the number of fragments that the system provided a translation for as a fraction of the total number of fragments in the input, regardless of whether the fragment is translated correctly or not. The system may skip fragments for which it can find no solution at all.

In addition to these, the system X  X  output can be compared against the L2 reference translation(s) using established Machine Translation evaluation metrics. We report on BLEU, NIST, METEOR, and word error rate metrics WER and PER. These scores should generally be much better than the typical MT system performances as only local changes are made to otherwise  X  X erfect X  L2 sen-tences. A context-insensitive yet informed baseline was constructed to assess the impact of L2 context in-formation in translating L1 fragments. The base-line selects the most probable L1 fragment per L2 fragment according to the phrase-translation ta-ble. This baseline, henceforth referred to as the  X  X ost likely fragment X  baseline (MLF) is analo-gous to the  X  X ost frequent sense X -baseline com-mon in evaluating WSD systems.

A second baseline was constructed by weigh-ing the probabilities from the translation table di-rectly with the L2 language model described ear-lier. It adds a LM component to the MLF base-line. This LM baseline allows the comparison of classification through L1 fragments in an L2 con-text, with a more traditional L2 context modelling (i.e. target language modelling) which is also cus-tomary in MT decoders. Computing this base-line is done in the same fashion as previously il-lustrated in Equation 1, where score T then repre-sents the normalised p ( t | s ) score from the phrase-translation table rather than the class probability from the classifier. The data for our experiments were drawn from the Europarl parallel corpus (Koehn, 2005) from which we extracted two sets of 200 , 000 sentence pairs each for several language pairs. These were used to form the training and test sets. The final test sets are a randomly sampled 5 , 000 sentence pairs from the 200 , 000 -sentence test split for each language pair.

All input data for the experiments in this section
Let us first zoom in to convey a sense of scale on a specific language pair. The actual Europarl training set we generate for English (L1) to Span-ish (L2), i.e. English fallback in a Spanish con-text, consists of 5 , 608 , 015 sentence pairs. This number is much larger than the 200 , 000 we men-tioned before because single sentence pairs may be reused multiple times with different marked frag-ments. From this training set of sentence pairs over 100 , 000 classifier experts are derived. The eleven largest classifiers are shown in Table 1, along with the number of training instances per classifier. The full table would reveal a Zipfian distribution.
 Table 1: The top eleven classifier experts for En-glish to Spanish. The eleventh entry is included as an example of a common phrasal fragment
Among the classifier experts are only words and phrases that are ambiguous and may thus map to Figure 2: Accuracy for different local context sizes, Europarl English to Spanish multiple translations. This implies that such words and phrases must have occurred at least twice in the corpus, though this threshold is made config-urable and could have been set higher to limit the number of classifiers. The remaining 246 , 380 un-ambiguous mappings are stored in a separate map-ping table.

For the classifier-based system, we tested var-ious different feature vector configurations. The first experiment, of which the results are shown in Figure 2, sets a fixed and symmetric local context size across all classifiers, and tests three context widths. Here we observe that a context width of one yields the best results. The BLEU scores, not included in the figure but shown in Table 2, show a similar trend. This trend holds for all the MT metrics.

Table 2 shows the results for English to Span-ish in more detail and adds a comparison with the two baseline systems. The various lXrY config-urations use the same feature vector setup for all classifier experts. Here X indicates the left context size and Y the right context size. The auto con-figuration does not uniformly apply the same fea-ture vector setup to all classifier experts but instead seeks to find the optimal setup per classifier expert. This shall be further discussed in Section 6.1.
As expected, the LM baseline substantially out-performs the context-insensitive MLF baseline. Second, our classifier approach attains a sub-stantially higher accuracy than the LM baseline. Third, we observe that adding the language model to our classifier leads to another significant gain 0 . 9422 (configuration l1r1 + LM in the results in Ta-ble 2). It appears that the classifier approach and the L2 language model are able to complement each other.

Statistical significance on the BLEU scores was tested using pairwise bootstrap sampling (Koehn, 2004). All significance tests were performed with 5 , 000 iterations. We compared the out-comes of several key configurations. We first tested l1r1 against both baselines; both differ-ences are significant at p &lt; 0 . 01 for both. The same significance level was found when compar-ing l1r1 + LM against l1r1 , auto + LM against auto , as well as the LM baseline against the MLF baseline. Automatic feature selection auto was found to perform statistically better than l1r1 , but only at p &lt; 0 . 05 . Conclusions with regard to context width may have to be tempered somewhat, as the performance of the l1r1 configuration was found to not be significantly better than that of the l2r2 configuration. However, l1r1 performs significantly better than l3r3 at p &lt; 0 . 01 , and l2r2 performs significantly better than l3r3 at p &lt; 0 . 01 .

In Table 3 we present some illustrative exam-ples from the English  X  Spanish Europarl data. We show the difference between the most-likely-fragment baseline and our system.

Likewise, Table 4 exemplifies small fragments from the l1r1 configuration compared to the same configuration enriched with a language model. We observe in this data that the language model often has the added power to choose a cor-rect translation that is not the first prediction of the classifier, but one of the weaker alternatives that nevertheless fits better. Though the classifier generally works best in the l1r1 configuration, i.e. with context size one, the trigram-based lan-guage model allows further left-context informa-tion to be incorporated that influences the weights of the classifier output, successfully forcing the system to select alternatives. This combination of a classifier with context size one and trigram-based language model proves to be most effective and reaches the best results so far. We have not conducted experiments with language models of other orders. 6.1 Context optimisation It has been argued that classifier experts in a word sense disambiguation ensemble should be individ-ually optimised (Decadt et al., 2004; van Gompel and van den Bosch, 2013). The latter study on cross-lingual WSD finds a positive impact when conducting feature selection per classifier. This in-tuitively makes sense; a context of one may seem to be better than any other when uniformly applied to all classifier experts, but it may well be that cer-tain classifiers benefit from different feature selec-tions. We therefore proceed with this line of inves-tigation as well.

Automatic configuration selection was done by performing leave-one-out testing (for small num-ber of instances) or 10-fold-cross validation (for larger number of instances, n  X  20 ) on the train-ing data per classifier expert. Various configura-tions were tested. Per classifier expert, the best scoring configuration was selected, referred to as the auto configuration in Table 2. The auto configuration improves results over the uniformly in which the determiner was duplicated in the baseline applied feature selection. However, if we enable the language model as we do in the auto + LM configuration we do not notice an improvement over l1r1 + LM , surprisingly. We suspect the lack of impact here can be explained by the trigram-based Language Model having less added value when the (left) context size of the classifier is two or three; they are now less complementary.

Table 5 lists what context sizes have been cho-sen in the automatic feature selection. A context size of one prevails in the vast majority of cases, which is not surprising considering the good re-sults we have already seen with this configuration.
In this study we did not yet conduct optimisa-tion of the classifier parameters. We used the IB1 algorithm with k = 1 and the default values of the TiMBL implementation. In earlier work van Gompel and van den Bosch (2013), we reported a decrease in performance due to overfitting when Table 5: Frequency of automatically selected con-figurations on English to Spanish Europarl dataset this is done, so we do not expect it to make a pos-itive impact. The second reason for omitting this is more practical in nature; to do this in combina-tion with feature selection would add substantial search complexity, making experiments far more time consuming, even prohibitively so.

The bottom lines in Table 2 represent results when all right-context is omitted, emulating a real-time prediction when no right context is available yet. This has a substantial negative impact on re-sults. We experimented with several asymmetric configurations and found that taking two words to the left and one to the right yields even better re-sults than symmetric configurations for this data set. This result is in line with the positive effect of adding the LM to the l1r1 .

In order to draw accurate conclusions, experi-ments on a single data set and language pair are not sufficient. We therefore conducted a number of ex-periments with other language pairs, and present the abridged results in Table 6.

There are some noticeable discrepancies for some experiments in Table 6 when compared to our earlier results in Table 2. We see that the lan-guage model baseline for English  X  French shows the same substantial improvement over the base-line as our English  X  Spanish results. The same holds for the Chinese  X  English experiment. How-ever, for English  X  Dutch and English  X  Chinese we find that the LM baseline actually performs slightly worse than baseline. Nevertheless, in all these cases, the positive effect of including a Lan-guage Model to our classifier-based system again shows. Also, we note that in all cases our system performs better than the two baselines.

Another discrepancy is found in the BLEU scores of the English  X  Chinese experiments, where we measure an unexpected drop in BLEU score under baseline. However, all other scores do show the expected improvement. The error rate metrics show improvement as well. We therefore attach low importance to this deviation in BLEU here.

In all of the aforementioned experiments, the system produced a single solution for each of the fragments, the one it deemed best, or no solution at all if it could not find any. Alternative evaluation metrics could allow the system to output multiple alternatives. Omission of a solution by definition causes a decrease in recall. In all of our experi-ments recall is high (well above 90% ), mostly be-cause train and test data lie in the same domain and have been generated in the same fashion, lower re-call is expected with more real-world data. In this study we have shown the feasibility of a classifier-based translation assistance system in which L1 fragments are translated in an L2 con-text, in which the classifier experts are built indi-vidually per word or phrase. We have shown that such a translation assistance system scores both above a context-insensitive baseline, as well as an L2 language model baseline.

Furthermore, we found that combining this cross-language context-sensitive technique with an L2 language model boosts results further.
The presence of a one-word right-hand side context proves crucial for good results, which has implications for practical translation assistance ap-plication that translate as soon as the user finishes an L1 fragment. Revisiting the translation when right context becomes available would be advis-able.

We tested various configurations and conclude that small context sizes work better than larger ones. Automated configuration selection had pos-itive results, yet the system with context size one and an L2 language model component often pro-duces the best results. In static configurations, the failure of a wider context window to be more suc-cesful may be attributed to the increased sparsity that comes from such an expansion.

The idea of a comprehensive translation assis-tance system may extend beyond the translation of L1 fragments in an L2 context. There are more NLP components that might play a role if such a system were to find practical application. Word completion or predictive editing (in combination with error correction) would for instance seem an indispensable part of such a system, and can be implemented alongside the technique proposed in this study. A point of more practically-oriented future research is to see how feasible such combi-nations are and what techniques can be used.
An application of our idea outside the area of translation assistance is post-correction of the out-put of some MT systems that, as a last-resort heuristic, copy source words or phrases into their output, producing precisely the kind of input our system is trained on. Our classification-based ap-proach may be able to resolve some of these cases operating as an add-on to a regular MT system  X  or as a independent post-correction system.

Our system allows L1 fragments to be of arbi-trary length. If a fragment was not seen during training stage, and is therefore not covered by a classifier expert, then the system will be unable to translate it. Nevertheless, if a longer L1 frag-ment can be decomposed into subfragments that are known, then some recombination of the trans-lations of said sub-fragments may be a good trans-lation for the whole. We are currently exploring this line of investigation, in which the gap with MT narrows further.

Finally, an important line of future research is the creation of a more representative test set. Lacking an interactive system that actually does what we emulate, we hypothesise that good ap-proximations would be to use gap exercises, or cloze tests, that test specific aspects difficulties in language learning. Similarly, we may use L2 learner corpora with annotations of code-switching points or errors. Here we then assume that places where L2 errors occur may be indica-tive of places where L2 learners are in some trou-ble, and might want to fall back to generating L1. By then manually translating gaps or such prob-lematic fragments into L1 we hope to establish a more realistic test set.

