 1. Introduction
Reflecting the ever-growing digitized publications, enormous efforts have been made for automatically discovering novel information from texts, i.e., text mining. The popularity of text mining techniques is reflected in the large number of publications on this topic found in established forums such as ACM SIG on Knowledge Discovery in Data and Data Mining (KDD) (Zaki, Wang, &amp; Toivonen, 2003) and IEEE International Conference on Data Mining (ICDM) (Cercone, Lin, &amp; Wu, 2001).

Text mining is crucial also in the field of cellular and molecular biology because of a strong demand for discovering molecular pathways, protein X  X rotein interactions, and so on in the literature, which are even for human experts, labor-intensive and time-consuming. Therefore, much research has been conducted to explore text mining techniques on biomedical texts (Adamic, Wilkinson, Huberman, &amp; Adar, 2002; Friedman, Kra, Yu, Krauthammer, &amp; Rzhetsky, 2001; Fu, Mostafa, &amp; Seki, 2003; Hirschman, Park, Tsujii, Wong, &amp; Wu, 2002; Ng &amp; Wong, 1999; Palakal, Stephens, Mukhopadhyay, Raje, &amp; Rhodes, 2002; Proux, Carroll, 2000).

Our ultimate goal is to realize an automated system to mine novel information from the biomedical literature; specifically, we aim to develop a system to identify relations and interactions between proteins and cancer, that are expected to facilitate the development of new drugs and treatments peculiar to cancer.
To accomplish our goal, we start with identifying protein names appearing in biomedical texts. This task can be considered as named-entity recognition partly explored in Message Understanding Conferences (MUCs) (Grishman &amp; Sundheim, 1996), in which proper nouns, such as names of people and companies, locations, and time expressions appearing in newspaper articles were targeted for automatic recognition.
The most successful system achieved the F -score of 93.4% (Marsh &amp; Perzanowski, 1998) and the task, in this particular domain, could be seen as a solved problem.

However, identifying protein names is still an open question. This is partially because there are no common standards or fixed nomenclatures for protein names that are followed in practice (Bruijn &amp;
Martin, 2002). As new proteins continue to be discovered and named, predefined protein name dictionaries are not necessarily helpful in identifying new protein names. Additionally, protein names frequently appear often inconsistent). Therefore, even the protein names that are already known and are to be included in a dictionary might be overlooked due to the way they are actually written. Another challenging issue in identifying protein names is to find their name boundaries. According to our preliminary research on 99
MEDLINE abstracts (obtained at Proteinhalt i text project Web page (Franz en, 2003)), 42% of protein names are composed of multiple tokens (i.e., compound names), and these tokens include symbols, com-mon nouns, adjectives, adverbs, and even conjunctions, which makes it difficult to distinguish protein names from the surrounding texts (Tanabe &amp; Wilbur, 2002).

Motivated by the above background, we explore a method to identify protein names in biomedical texts with an emphasis on finding compound names. As a final model, we propose a hybrid method taking advantage of hand-crafted rules, probabilistic models, and a protein name dictionary as a complementary means. In addition, we propose a framework to train probabilistic models on an automatically constructed large-scale corpus, where manually annotated corpora are no longer needed for training.

The rest of this paper is structured as follows: Section 2 summarizes past research related to protein name identification. Section 3explains our proposed approach in detail. In Section 4, the methodology of evaluation is described and the result is presented and discussed. Lastly, Sections 5 and 6 conclude this paper with our findings and future directions. 2. Related work There have been several attempts to develop techniques to identify protein names in biomedical texts. They roughly fall into three approaches, that is, dictionary-based, heuristic rule-based, and statistical.
An approach based exclusively on a dictionary is not necessarily helpful for identifying protein names because new protein names continue to be created and there are often many variations in the way identical proteins are referred to. To tackle this problem, Krauthammer, Rzhetsky, Morozov, and Friedman (2001) proposed an approach to protein and gene name identification, using BLAST (Altschul et al., 1997), a
DNA and protein sequence comparison tool. Their basic idea involves performing approximate string matching after converting both dictionary entries and input texts into nucleotide sequence-like strings, which can be then compared by BLAST. For evaluation, they extracted gene and protein names from
GenBank (Benson, Karsch-Mizrachi, Lipman, Ostell, &amp; Wheeler, 2003) to create a name dictionary, converted them to nucleotide sequence-like strings according to a predefined conversion table, and applied their method to a review article, which is manually annotated with 1162 gene and protein names by biology experts. They reported that 409 names out of 1162 names (35.2%) were not contained in the dictionary and, among them, 181 (44.3%) were fully or partially identified by their proposed method.

Fukuda, Tsunoda, Tamura, and Takagi (1998), Franz en, Eriksson, Olsson, Asker, and Lid en (2002), and Narayanaswamy, Ravikumar, and Shanker (2003) proposed rule-based approaches. They exploited surface clues for detecting protein name fragments (i.e., parts of protein names) and used a part-of-speech tagger and/or a syntactic parser for finding protein name boundaries. Typically, the surface clues include the following features, where bold characters indicate the corresponding examples.  X  Capital letters (e.g., ADA , CMS ).  X  Arabic numerals (e.g., ATF-2 , CIN 85 ).  X  Roman alphabets (e.g., Fc alpha receptor, 17 beta -estradiol dehydrogenase).  X  Roman numerals (e.g., dipeptidylpeptidase IV , factor XIII ).
Franz en et al. (2002) conducted experiments that compared their system (Yapex) with Fukuda X  X  system (Kex) on 101 MEDLINE abstracts. Yapex achieved a recall of 61.0% and a precision of 62.0% as compared to a recall of 37.5% and a precision of 34.3% on Kex in terms of exact match. Incidentally, Narayanaswamy et al. (2003) reported to have achieved a recall of 69.1% and a precision of 96.9% on 55 MEDLINE ab-stracts, where the precision is much higher than both Yapex and Kex. However, they cannot be directly compared since Narayanaswamy et al. targeted both protein and gene names (where detected names are regarded as correct if they are either gene or protein names), while Yapex and Kex focused specifically on protein names, and their test data are different.

Statistical approach has made a considerable impact on natural language processing (NLP) research and related areas, such as part-of-speech (POS) tagging, parsing, and speech recognition. In the bioinformatics domain, for example, Collier, Nobata, and Tsujii (2000), Nobata, Collier, and Tsujii (1999), and Kazama,
Makino, Ohta, and Tsujii (2002) applied statistical methods (e.g., hidden Markov models, decision trees, and support vector machines) for detecting and classifying gene and gene product names including proteins.
The features used in their methods are mostly the same as those used in rule-based approaches, that is, surface clues and parts of speech.

Comparing rule-based and statistical approaches, rule-based approaches have an advantage in a sense that rules can be flexibly defined and extended as needed, but manually analyzing targeted domain texts and crafting rules are often time-consuming. Statistical approaches are relatively easy to apply if appropriate models and training data are given. However, creating training data (i.e., corpora annotated with protein names in this case) requires domain experts and is also time-consuming, and an insufficient amount of training data leads to the data sparseness problem. In general, to achieve higher performance, more complex, elaborated models are desirable, which usually require more training data in order to reasonably estimate the increasing number of parameters.
 Rule-based and statistical approaches are, of course, not necessarily exclusive. For instance, Tanabe and
Wilbur (2002) proposed a method for identifying gene (and protein names) using both heuristic and statistic strategies. They introduced a new (pseudo) POS tag indicating gene names and trained a rule-based POS tagger on a corpus manually annotated with gene names using the new tag. They used the Brill tagger (Brill, 1994), which does error-driven learning to induce rules for tagging parts of speech. After training on gene names, the tagger can be used for identifying potential gene names as if they are one of parts of speech. The initial result is then filtered to remove misdetected candidates and to identify overlooked names using document does contain gene names. Their experiments demonstrated that higher performance can be achieved for gene/protein name identification on the documents with higher Bayesian scores.
Although there have been much research on protein name identification as shown above, there are no common data set or standard evaluation criteria by which different methods can be fairly compared. To advance the techniques of protein name identification, it is important to have common basis for comparing results as attempted in MUCs (Grishman &amp; Sundheim, 1996). As for data set, there are a few annotated corpora publicly available. One is the GENIA corpus (Ohta, Tateisi, Kim, Mima, &amp; Tsujii, 2002), which consists of 2000 MEDLINE abstracts (version 3.01) and has been annotated with not only proteins but a subset of the substances and the biological locations involved in reactions of proteins. Another corpus was made by the Proteinhalt i text (protein concentration in text) project (Franz en, 2003), which is composed of 200 MEDLINE abstracts and was manually annotated with protein names. As for evaluation criteria,
Olsson, Eriksson, Franz en, Asker, and Lid en (2002) proposed four criteria to assess the performance of protein name identification, which are explained in Section 4 in more detail.

It should be also noted that, in order to provide a common data set and evaluation criteria to compare different approaches, there is an ongoing project, called BioCreAtIvE (Critical Assessment of Information name identification, where each research group independently develops their method to automatically identify gene/protein names, and their results are to be evaluated on a common test set and evaluation criteria. A workshop reporting the results will be held in Spring 2004.
In this paper, we propose a hybrid approach utilizing heuristic rules for initial detection of protein name fragments and a probabilistic model focusing on determining name boundaries. In addition, a protein name dictionary is complementarily consulted. The rules used are simple and easy to develop and the probabi-listic model incorporates word classes based on suffixes and word structure, so as to overcome the data sparseness problem. For evaluation, we use the data set produced by the Proteinhalt i text project and their proposed evaluation criteria, which enables us to directly compare our method with the previous work conducted by Franz en et al. (2002). 3. Our proposed method 3.1. Overview Fig. 1 depicts the framework of our proposed method to be described in this section.

Before entering in protein name identification processes, an input text is first partitioned into sentences and then tokenized, where tokens are defined as words and symbols. For instance, PI 3 -kinase will be separated into four tokens, i.e., PI , 3 , X ,and kinase . Then, we identify protein names through three steps shown in Fig. 1. Firstly, fragments of protein names are detected by a set of heuristic rules relying on surface clues which are commonly used for protein name identification. Secondly, because the detected fragments does not usually form complete protein names, their name boundaries are expanded/determined based on either a set of rules or a probabilistic model so as to locate complete protein name candidates. In the case where a probabilistic model is used, a filter is then applied to the protein name candidates to rule out unlikely candidates. 2 Lastly, a protein name dictionary is consulted to detect the protein names that are not recognized by the previous steps. Each step is explained in Sections 3.2 X 3.4 in greater details. 3.2. Protein name fragment detection
To detect protein name fragments, we use several heuristic rules which were derived from previous studies (Franz en et al., 2002; Fukuda et al., 1998; Narayanaswamy et al., 2003) and our preliminary observation on 99 MEDLINE abstracts (Seki &amp; Mostafa, 2003). These abstracts were manually annotated with 1745 protein names by Proteinhalt i text project (Franz en, 2003) and were used as a reference corpus for developing the Yapex protein name tagger (see Section 2).

Words satisfying any of the following conditions are detected as potential protein name fragments.  X  Words that include capital letter(s).  X  Words that include combinations of Arabic numerals and lower case letters (e.g., p35, cdk5). this study).  X  Words that often appear as protein name fragments ( factor ( s )and receptor ( s ) are considered in this study).  X  Roman alphabets that often appear as protein name fragments ( alpha , beta , gamma , delta , epsilon , and kappa are considered in this study).

These conditions unfortunately also detect words that are not protein name fragments. For example, if extracted as protein name fragments. To decrease these errors, we exclude the following.  X  Words with a capital letter in the beginning followed by more than three lower case letters (e.g., Accord-ing, Basically).  X  Words composed of only capital letters longer than six characters (e.g., KTPGKKKKGK).  X  Only one character (e.g., A, B, C, ... ).  X  Measuring units: nM , mM , pH , and MHz (predefined based on the reference corpus).  X  Chemical formulas: CaCl2 , NH2 , Ca2 , HCl , and Mg2 (predefined based on the reference corpus).  X  Words included in a stopword list. In this study, we used the PubMed Stopword List, 133 function words.

Henceforth we call the set of rules described above the  X  X  detection rules . X  X  3.3. Protein name boundary expansion
Since the detection rules detect only protein name fragments in principle, the name boundaries of the detected protein name fragments need to be expanded so as to identify complete protein names. For this purpose, we explore the use of heuristic rules and a probabilistic model. The heuristics were derived from our preliminary observation on the reference corpus (99 MEDLINE abstracts) as used in Section 3.2.

Previous work (Franz en et al., 2002; Fukuda et al., 1998; Nobata et al., 1999) typically made use of POS taggers and/or syntactic parsers for the purpose of determining protein name boundaries, assuming that
POS tags and/or noun phrases are good indicators for protein name boundaries. However, according to our preliminary investigation on the reference corpus, protein name fragments can be symbols, nouns, adjec-tives, adverbs, verbs, and conjunctions; thus, POS tags may not be very informative for the purpose of detecting protein names and their name boundaries. Therefore, our method, unlike previous work, avoids the use of those NLP tools, which results in reducing both processing overhead and the potential number of probabilistic parameters to estimate. 3.3.1. Heuristics
The words and symbols matching the conditions described below are regarded as parts of pro-tein names, and the protein name boundaries are expanded so as to include the matching words or symbols.

The following are the conditions of rules that expand name boundaries rightward, where italic characters denote the protein name fragments detected by the detection rules , and the bold characters denote the expanded parts.  X  A hyphen (optional) plus a numeral or capital letters less than three characters (e.g., ATF -2 ).  X  A capital letter in parentheses (e.g., Ruk ( I )).

The conditions of the rules that expand name boundaries leftward are shown below. Words shown in parentheses as instances of frequent words/suffixes are the complete sets considered in these rules.  X  A numeral or capital letters less than three characters and optionally a hyphen (e.g., N -glycanase ).  X  In the case where the protein name fragment detected by the detection rules has a suffix  X  X -in X  X  (e.g. pro-tein): nase):
Finally, the following name fragments that were detected but not expanded by the above rules are discarded, as they are unlikely to be protein names without any qualifiers.  X  Protein, -ase, receptor(s), factor(s), alpha, beta, gamma, delta, epsilon, kappa, I, II, III.
Henceforth we call the set of rules described above the  X  X  expansion rules . X  X  3.3.2. Probabilistic models
The creation of the expansion rules is a human process and it is based on close study of the reference corpus. Hence, certain degree of arbitrariness cannot be avoided. We introduce an alternative approach based on a probabilistic model to learn word collocation patterns without human intervention. Below, we will explain the details of our model with an example context of  X  X  ... with dipeptidyl peptidase IV promoter constructs ...  X  X , where  X  X  dipeptidyl peptidase IV  X  X  is the actual protein name and  X  X  peptidase  X  X  and  X  X  IV  X  X  are to be detected by the detection rules .

First, we will look at the process to expand name boundaries leftward. Let w name fragments detected in the previous initial detection step. Given a fragment w token w i 1 immediately preceding w i is also a protein name fragment can be expressed as a conditional probability P p  X  w i 1 j w i  X  , assuming a first-order Markov process. Likewise, the probability that w protein name fragment can be expressed as P n  X  w i 1 j w tidase correspond to w i 1 and w i , respectively. (Notice that IV will not be w side of IV , is already known (detected) as a protein name fragment.) Thus, we estimate the probabilities P ( dipeptidyl|peptidase )and P n ( dipeptidyl|peptidase ).

Based on these probability estimates, we decide whether to expand protein name boundaries. In the case where there is no name boundary between w i 1 and w i (i.e., w
P  X  w i 1 j w i  X  is expected to be greater than P n  X  w i 1 following condition holds:
However, estimating these probabilistic parameters will require a large amount of training texts anno-tated with protein names, which are expensive to create. To make matters worse, simply using a large-scale corpus cannot be a substantial solution due to the characteristics of protein names: new protein names continue to be created. Previously unseen data could be fatal for probability estimation such as maximum likelihood estimation.

To remedy the data sparseness problem, we generalize words (tokens) to word classes. Table 1 shows some examples. They are automatically and uniquely assigned to each word according to the algorithm presented as a pseudo code in Fig. 2.

The algorithm determines a unique word class for each word as follows. Given an input word w , it first checks whether w is included in the predefined set of Roman alphabets, Roman numerals, or punctuations; is assigned. If not, it then looks at the characters composing w . In the case where w is composed of Otherwise, class  X  X  symbol  X  X  is given.
 quence of a vowel, one or more consonants (if any), and either a vowel or a consonant from the ending of w . However, class  X  X  word  X  X  will be assigned in cases where the suffix was not extracted (i.e., s the resulting suffix is longer than the remainder of the word in length. For example, given an input will be extracted as its suffix. However, because the length of  X  X  ase  X  X  (  X  3) is longer than that of the remainder  X  X  c  X  X  (  X  1), the suffix will be rejected and class  X  X  word  X  X  will be assigned. Integrating the word classes to the probabilistic models, we formalize the bigram class models as in
Eq. (2), where c i denotes the word class of w i . The probabilities initially presented are now defined as a product of class X  X lass and class X  X ord transitional probabilities.
 For our example, these are:
The probabilistic parameters can be estimated based on corpora annotated with protein names. However, the models still contain raw words w i 1 , which may cause the data sparseness problem. To cope with it, we make use of a smoothing method in estimating the transitional probabilities. Preliminarily, we compared
Good X  X uring estimation (Good, 1953) and Witten X  X ell smoothing (Witten &amp; Bell, 1991). Briefly, the former estimates the probabilities based on adjusted word frequencies assuming that their distribution is binomial, and the latter estimates the probabilities by considering how often a class in question has new words (which is assumed to be the number of words associated with the class). For this study, we utilize the
Witten X  X ell smoothing method, which found to perform better on the reference corpus. Eq. (4) shows the definition of Witten X  X ell smoothing (for this particular model) to estimate a transitional probability from class c to word w :
Likewise, we adopt the model described above to expand/determine protein name boundaries rightward as well. The probability functions are formalized as in Eq. (5), where w immediately following the detected protein name fragment w
For each of the protein name fragments detected by the heuristic rules described in Section 3.2, we compute the probabilities above to determine whether to expand their name boundaries. When expanded, the probabilistic models are iteratively applied to the expanded fragments to further expand name boundaries as long as the condition in Eq. (1) holds. For our example, Because P p &gt; P n for this word collocation,  X  X  dipeptidyl  X  X  is also regarded as a protein name fragment.
Then, the window will move one word leftward and the same procedure is applied so as to determine whether to include the preceding word (i.e., with ) as a part of the protein name. 3.4. Filtering
Our ultimate goal is to automatically discover novel information associated with proteins and cancer from the literature, where protein name identification is a fundamental factor whose performance will how much it is) preferred in the output of protein name identification (e.g., high recall with low precision, high precision with low recall, or balanced) depending on reliability of the information we are seeking. This can be done by restricting the system output based on some certainty measure that indicates the extent to which the detected protein names are likely to be actual protein names.

We are currently using certainty score C  X  X  defined as in Eq. (7), where w tokens detected as a protein name, and F  X  w i  X  and F p  X  w frequency of w i which appears as a protein name fragment, respectively.

P c  X  w i  X  is a probability that word w i is a protein name fragment, and C  X  w probabilities associated with w 1 to w n . Probability P c w is predominantly used as a protein name fragment in training data since F the case where the frequency of w i is small, instead we use the frequency of its word class because low frequent data are statistically less reliable. We set the cutoff to 3.

The word classes used in computing the certainty score are the same as those used in protein name boundary expansion described in Fig. 2 except for acronyms. As our preliminary experiment showed that more specific word classes for acronyms produced slightly better results on the reference corpus, we introduce new word classes (only for acronyms) as follows. First, given an acronym, capital letters, small letters, and numbers are converted to A , a , and 0 , respectively; and then, consecutive same characters are converted to AaAaa0 , then squeezed into AaAa0 ,and 0 at the end is eliminated, resulting in a word class  X  X  acronym _ AaAa  X  X . Table 2 shows some examples of acronym word classes and the words correspond to them. 3.5. A protein name dictionary
In addition to the previous steps described so far, we take advantage of a protein name dictionary compiled from the SWISS-PROT (Release 40.38) and TrEMBL (Release 22.6) protein databases (O X  X onovan et al., 2002) in order to detect the protein names which are not recognized by the hand-crafted rules and/or a probabilistic model.
 SWISS-PROT and TrEMBL contain 120,607 and 729,579 entries for proteins respectively as of
December 2002. Fig. 3shows a fragment of the SWISS-PROT protein database (TrEMBL has the same format as SWISS-PROT).

We built a protein name dictionary by extracting protein names and their synonyms from the protein name fields ( DE in Fig. 3). In the example in Fig. 3,  X  X  14-3-3-like protein GF14 chi  X  X  is a protein name, and  X  X  General regulatory factor 1  X  X  is its synonym. However, since the format of the DE field is sometimes inconsistent, it produces a number of incorrect protein names, leading to erroneous detection of protein names. Therefore, we excluded unlikely protein names which (a) begin with special characters (e.g., spaces, commas, and parentheses), (b) consist of only numerals or less than two characters, or (c) end with a hyphen or apostrophe.

In addition, we excluded the protein names composed of less than three tokens (words and symbols) since these protein names were found to harm the overall accuracy of identification. Furthermore, we applied the detection rules and expansion rules on the initial set of protein names extracted from SWISS-
PROT and TrEMBL, and those detected by the rules were discarded so as to improve processing speed by decreasing the dictionary size.

As a result, 114,876 of protein names and their synonyms were included in the dictionary. 3.6. Automatic construction of annotated corpora
We proposed probabilistic models for expanding protein name boundaries and filtering out unlikely candidates, which require corpora annotated with protein names for training. However, creating annotated corpora needs biological expertise and is, even for human experts, time-consuming. Therefore, it is highly desirable to create a large-scale corpus in an automated way. Here, the important point to note is that training data do not need to be exhaustively annotated. That is, the total number of annotations is more important than coverage for training. Taking this into account, we propose a framework to auto-matically construct a large-scale corpus annotated with protein names.

The basic idea is that given a MEDLINE abstract we annotate protein names only if specific proteins are already known to be described in the abstract. These associations between proteins and MEDLINE ab-stracts can be easily extracted from a number of databases. In this study, we use the Protein Information
Resource Non-redundant REFerence protein database (PIR-NREF) (Wu et al., 2002) containing 1,228,541 entries as of April 200 3(the release 1.21) due to its comprehensiveness. Fig. 4 shows a fragment of the PIR-NREF protein database.

The example in Fig. 4 indicates that the article associated with PubMed ID 10719003 is related to maturase-like protein . It does not ensure that the exact name maturase-like protein appears in the corresponding MEDLINE abstract because there are many variations of protein names. But if the protein name does appear in the text then we use the text as a source for annotation. We extracted all pairs of protein names and PubMed IDs from the PIR-NREF database and annotated the protein names in cases where they appear in the corresponding MEDLINE abstracts. Fig. 5 illustrates the process of automatic annotation.

As a result, we obtained a corpus containing 32,328 MEDLINE abstracts annotated with 91,773 occurrences of protein names. The corpus will be used for training the probabilistic models for protein name boundary expansion.
 4. Evaluation 4.1. Overview
To evaluate the effectiveness of our method described above, we implemented a protein name identifi-system was compared with the Yapex protein name identification system (Franz en et al., 2002; Olsson et al., 2002). There are three reasons this particular study was selected for comparison; according to our survey,
Yapex is one of the state-of-the-art protein name identification systems based on hand-crafted rules; the system is publicly available through a CGI program at the Proteinhalt i text (protein concentration in text) project homepage (Franz en, 2003); and the annotated corpora used for the development and evaluation of Yapex are also publicly available.
 The annotated corpora consist of a reference corpus and a test corpus, and they contain 99 and 101
MEDLINE abstracts, respectively. The reference corpus, which is annotated with 1745 proteins, is used for training our probabilistic models for protein name boundary expansion and for computing the certainty scores, and the test corpus, which is annotated with 1966 protein names, is used for evaluation. Hereafter, we will call the reference corpus the training set and the test corpus the test set .
In the following experiments, we mainly compare four different models below for protein name iden-tification. Notice that the protein name fragment detection step is done by heuristic rules in all cases (see
Fig. 1).  X  rule : uses hand-crafted rules for protein name boundary expansion,  X  rule + dic : the same as rule , but also uses the protein name dictionary for identification,  X  prob : uses the probabilistic model for protein name boundary expansion and the filter (based on the cer-tainty scores),  X  prob + dic : the same as prob , but also uses the protein name dictionary for identification. 4.2. Evaluation metrics
Precision, recall, and F -score are used as evaluation metrics. Precision is the number of protein names a system correctly detected, divided by the total number of protein names detected by the system. Recall is the number of protein names a system correctly detected, divided by the total number of protein names defined as in Eq. (8).

For judgment of correctness, we follow Olsson et al. (2002) and use three criteria introduced in Yapex X  X  evaluation: exact, partial, and fragment matches. 4 As for exact match, every fragment composing a protein name has to be correctly detected to be judged as correct, whereas, for partial match, a detected protein name is counted as correct in cases where any fragments composing the protein name are correctly detected.
For fragment match, the counting unit is a fragment; that is, each fragment composing a protein name is to be judged independently whether it is correctly detected or not.
 For instance, suppose that a protein name  X  X  X ibosomal protein L22 X  X  is detected as  X  X  X ibosomal protein
L22 , X  X  where bold fonts indicate the detected fragments. In this case, it is not counted as an exact match because  X  X  X ibosomal X  X  was not detected, whereas it is counted as a partial match because at least one token composing the protein name were correctly detected. Lastly, it is counted as two fragment matches because two fragments out of three were correctly detected. 4.3. Results and discussion 4.3.1. Overall performance
Table 3shows the result of the comparative experiment. The figures in the column  X  X  X apex X  X  are directly denote our proposed methods. A threshold for the certainty score (see Section 3.4) was set to 0.245 in this experiment, which was derived by applying twofold cross-validation to the training data so as to maximize in equal size, and used A for computing certainty scores for B and, in turn, used B for computing certainty scores for A with varying the threshold. Then we took an average of the thresholds which maximized F -score for each set.

Comparing rule and prob , the latter produced better results in most cases. Especially, there is a marked increase in recall for fragment match from 66.5 to 75.6 (+12.0%), indicating that prob correctly expanded more protein name boundaries than rule (with a slight decrease of precision from 75.4 to 74. 3( a result, it led to higher precision in identifying exact protein names from 56.0 to 60.1 (+6.8%).
In cases where the protein name dictionary was consulted (i.e., rule + dic and prob + dic ), the recall marginally improved by 0.8 X 4.6% with the precision remaining steady irrespective of rule or prob used for protein name boundary expansion. Since dictionary lookup was done simply by exact match between dictionary entries and input in this study, more flexible string matching techniques may yield higher recall. Those techniques, such as one proposed by Krauthammer et al. (2001), should be explored in future work.
When compared to Yapex, our probabilistic methods, prob and prob + dic , produced lower precision irrespective of the criteria for judgment of correctness (2.0 X 8.4% decrease), while they showed higher recall than Yapex (2.4 X 13.0% increase) except for fragment match by prob . Consequently, their F -scores were found quite comparable to those of Yapex, despite the fact that our methods do not rely on POS taggers or syntactic parsers as used in Yapex.

We evaluated our methods on several criteria, i.e., exact, partial, fragment matches and recall, precision, and F -score. Which criterion is important depends on what purpose we use the system for. Considering our ultimate goal, i.e., text mining for the cancer X  X rotein relations, exact match would be important for dis-tinguishing numbers of protein names and for associating extracted information with them. As for recall and precision, high recall will be preferable in the case where comprehensive information is needed, while high precision will be preferable in the case where reliable information is needed. We will show later that higher precision can be achieved by restricting the system output based on the certainty score introduced in
Section 3.4. 4.3.2. Performance for compound names
Since our proposed probabilistic model is focusing on name boundary expansion, it is expected to be more effective particularly for compound protein names (those composed of multiple tokens). To dem-onstrate the advantage, we evaluated Yapex and our method solely on compound protein names. The test set used in this evaluation is the same as the one used above and contains 897 occurrences of compound protein names. Table 4 shows the result. Since Yapex X  X  performance for compound names are not sepa-rately reported, it was obtained by submitting the test set to the Yapex demo page (Franz en, 2003) on March 27, 2003.

In the case where only compound protein names are considered, prob mostly outperformed Yapex especially for exact match, indicating that it found protein name boundaries more accurately and more exhaustively than Yapex. This result verifies the advantage of our probabilistic model for finding com-pound protein names and their boundaries. Let us stress again that Yapex uses a syntactic parser to find name boundaries, whereas our method solely relies on surface clues without those NLP tools. our rule set for protein name expansion, and thus it could be improved by adding more comprehensive Yapex also adopts a rule-based method, showing higher recall but lower precision than rule .
The advantage of our method for compound names, at the same time, implies a disadvantage of our method for single-word names, since overall Yapex and our system produce comparable results (in terms of for matching (i.e., exact, partial, and fragment matches) are not reported because there is no distinction among them for single-word names.

Table 5 shows some decrease in F -score for our methods as compared with Yapex, but the difference ( ) 2.9% for prob ) was found not as significant as that for compound names. This is mainly because the numbers of single-word and compound names are different in the test set, that is, since there are more single-word names, they have more influence on the overall performance.

In order to filter out unlikely single-word protein name candidates, Yapex makes use of a dictionary compiled from the SWISS-PROT database, which appears to contribute to improve the precision for single-word names. As discussed in Section 2, however, such a dictionary could be quickly obsolete as new protein names continue to be created. One possible solution is to continually update the dictionary. Yoshida, Fukuda, and Takagi (2000) proposed a framework to automatically construct a protein name abbreviation dictionary from MEDLINE abstracts, which can be integrated into our system with a precompiled dic-tionary so as to improve the performance for single-word names. 4.3.3. Alternative models
To deal with the data sparseness problem, we introduced a bigram class model for generalization, which model, we compared it with two other alternatives: one without word classes (less generalized) and one without words (more generalized). Eqs. (9) and (10) show the conditions of these models respectively for expanding name boundaries leftward. Notice that Eq. (9) is the same as Eq. (1) (i.e., before introducing a bigram class model).

Table 6 shows the results of protein name identification using our proposed model ( prob ) and the class transition model as in Eq. (10), respectively.

In terms of partial match, there is less difference among these three models. This is expected by the definition of partial match:  X  X  X etected protein names are judged as correct if any token composing them is correctly detected. X  X  In other words, if any fragment of protein names is correctly detected by hand-crafted rules in the initial detection phase (which is in common for all models), it is regarded as correct. That is, name boundary expansion does not make much difference in performance for partial match. For other evaluation criteria, our proposed model outperformed the others, especially in exact match, indicating that our model is effectively generalized by combining transitional probabilities for words and classes. 4.3.4. The use of an automatically constructed corpus
We trained our proposed probabilistic model on the automatically constructed large-scale corpus, i.e., 32,328 MEDLINE articles annotated with 91,773 occurrences of protein names (see Section 3.6). Table 7 presents the results for overall performance, where  X  X  manual  X  X  and  X  X  auto  X  X  denote probabilistic models trained on manually annotated and automatically constructed corpora, respectively. Note that the results of manual are the same as those of prob shown in Tables 3and 4.

Overall, the probabilistic model trained on the automatically annotated corpus ( auto ) achieved higher recall than the one based on manually annotated corpus ( manual ), indicating that auto found more protein names than manual , whereas the manual achieved higher precision than auto , indicating that auto also produced false positives (i.e., detected as protein names but actually not). Consequently, auto favorably compares with manual in F -score, despite the fact that auto does not require human efforts to create annotated corpora.

The larger differences in the performance (recall and precision) for compound names are accounted for the automatically annotated corpus used for training auto . That is, the larger data set provided richer examples of protein names for training the name boundary expansion model (which resulted in higher recall), while it also provided more false examples (which resulted in lower precision). To improve the precision, more elaborate procedures need to be developed for creating higher quality training data. Fig. 6 shows some examples of the resulting false positives (i.e., those protein names which were detected by our system but are not actually protein names according to the test set).
 4.3.5. Filtering based on the certainty scores
Lastly, the effectiveness of the certainty score introduced in Section 3.4 was examined. The certainty scores were computed using the training set (i.e., 99 MEDLINE abstracts). The system used here is prob ; that is, the probabilistic models were used for expanding protein name boundaries. By varying a threshold for the certainty score, we drew a recall X  X recision curve in terms of exact match (Fig. 7).
The right most and lowest circle corresponds to the result without restriction (i.e., threshold is 0). As threshold increased, precision gradually increased until recall fell to around 40%. Then precision sharply increased up to around 90% with recall decreasing. In sum, although high precision was achieved, recall steeply dropped at the same time. To prevent recall from dipping, other features need to be explored for the certainty measure. For instance, surrounding words (contextual cues) may be effective.

Additionally, to investigate the validity of the filter on actual protein names, we applied it to 326,489 protein names extracted from SWISS-PROT and TrEMBL databases. (Note that, unlike the protein name dictionary construction procedure described in Section 3.5, short names and those detected by the detection and expansion rules were not excluded for this experiment.) Fig. 8 gives the distribution of certainty scores computed for these protein names.

The distribution shows the peak between 0.25 and 0.30 and is positively skewed. According to the distribution, on the one hand, 207,016 names (63.4%) will successfully go through the filter in the case where the threshold is set to 0.245 (which was derived based on the training data and used in our experi-ments). On the other hand, 36.6% of actual protein names will be falsely discarded. We could recover those protein names by lowering the threshold, but it will also cause a decrease in precision as demonstrated in
Fig. 7. Once again, more effective features need to be investigated for the certainty measure. 5. Conclusions
In this paper, we presented a hybrid method for identifying protein names in biomedical texts with an emphasis on protein name boundary expansion. Our method utilizes a set of simple heuristics for initial detection of protein name fragments and takes advantage of a probabilistic model for expanding and names, and the probabilistic model incorporates word classes for generalization so as to remedy the data sparseness problem. In addition, to detect those protein names which could not be identified by the rules and the probabilistic model, we complementarily utilized a protein name dictionary compiled from existing protein databases.

Our method, in contrast to the previous efforts, does not rely on POS taggers and/or syntactic parsers at all, since the information given by these NLP tools are not necessarily helpful for the task of protein name identification. This reduces both processing overhead and the potential number of probabilistic parameters to estimate. We implemented a protein name identification system, called P method, and conducted comparative experiments to verify its effectiveness. The results demonstrated that P
ROTEX ROTEX performed comparably to a best-of-the-breed system named Yapex which incorporates a syntactic parser. Moreover, in the case where only compound protein names were evaluated, our system outper-formed Yapex in most cases. Furthermore, we proposed a framework for automatically constructing a large-scale corpus annotated with protein names for training a probabilistic model. Through an experiment, it was shown that the model trained on the automatically generated corpus favorably compares with one trained on the manually annotated corpus (in F -score). Lastly, we proposed a notion of certainty to filter out unlikely protein name candidates for improving precision; it was demonstrated to be effective to incrementally raise precision at the expense of recall. 6. Future work Future work would include a refinement of the certainty measure to prevent recall from rapidly falling.
One of possible extensions is to utilize the probability estimates computed for name boundary expansion, so as to consider context (adjacent words) to some extent. In addition, integrating a framework of auto-matically discovering protein name abbreviations (for example, Yoshida et al., 2000) may improve the overall accuracy by filtering out unlikely single-word protein name candidates.
 Acknowledgements
We would like to thank Dr. Damir Cavar for his helpful comments and the members of the Proteinhalt i text project for sharing their invaluable resources for public use. We also wish to thank the anonymous reviewers for their constructive comments. This project is partially supported by the NSF ITR grant #9817572.
 References
