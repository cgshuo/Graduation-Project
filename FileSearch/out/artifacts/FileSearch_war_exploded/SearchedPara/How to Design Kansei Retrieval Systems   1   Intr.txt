 Information retrieval systems are certainly user-oriented, where how to reflect user X  X  subjectivity becomes an important and hard problem. When a user wants to search for something, for instance a passenger car or a costume, he/she normally have a kind of called as  X  X ansei X  in Japanese, which means the user X  X  psychological feeling as well as the physiological issues. Unfortunately, traditional information retrieval systems cannot efficiently deal with the user-given search requirements having Kansei words. 
Kansei retrieval systems that can process Kansei information have attracted many attentions. Kansei is usually expressed with emotional words such as beautiful, ro-mantic fantastic, comfortable, calm, and so on. For instance, image retrieval systems having an ability to handle subjective expressions are useful especially when the us-ers, who have no knowledge about contents of the image database, try to use some Kansei words (e.g.,  X  beautiful X ,  X  X alm X , etc.) to retrieve unknown images. However, because the key-words in traditional retrieva l systems are registered by operators and based on user X  X  feeling or Kansei by using the traditional key-word retrieving meth-ods. This means that the traditional retrieval systems using key-words or/and other text information cannot deal with sensitive words reflecting user X  X  subjectivity. For this reason, they are not enough in many applications. 
In this paper, after some existing Kansei retrieval systems being briefly introduced systems (in Section 3) and a discussion on how to speed up the Kansei retrieval proc-esses using multidimensional indexes (in Section 4). Finally, Section 5 will briefly summarize this paper. Many Kansei retrieval systems aiming at specific applications have been proposed in the last two decades. Some selected examples are briefly introduced here. 
The works [8, 9] proposed a method for a textile-design image database system. In this method, a relationship was built between Kansei words and the features of the images (e.g., the color or the pattern shape). In addition, a new human interface based on "Kansei" retrieval method using user models was developed for a distributed im-age database systems of textile designing. This method provided an easy and flexible access to the image database by specifying certain Kansei words that make users satisfied in his/her perceptional retrieval. Furthermore, the user model would be up-dated after evaluating the difference between his/her Kansei and objective model on knowledge-base. 
The work [11] proposed a method for retrieving the relevance between Kansei words and the shape features of images. Its purpose is to study a methodology for building an image data retrieval system. The system can accept natural language sentences that contain subjective expressions. In this method, images are retrieved interactively using comparative sentences. In order to interpret sentences including subjective expressions and match the result with each image, a space that binds sub-jective expressions and image features is introduced. The conditions that the space should satisfy and a method to construct such a space are discussed. As an example, a process for constructing and evaluating the shape feature space of "chairs" is pro-posed, and an experimental image retrieval system for office chairs was developed, which can deal with natural language including subjective expressions. 
The work [6] implemented a Kansei database for Ise Katagami (one kind of Japa-nese paper) design using lattices and unit structures. The work [15] proposed a mu-sic retrieval system which could estimate individual characteristics of music data history about which data he/she had accessed and it also estimates a characteristic of music data (music title model) from the history about which users have accessed. The work [19] proposed a method to retrieve a building name from the users X  impression to the buildings. 
The work [13] proposed an image retrieval system based on Kansei of colors, in which natural language was used for Kansei representations even including the image structures. A method for background image retrieval using Kansei words of colors to represent the sensibility of color was proposed. Most of the existing Kansei retrieval systems aim at specific applications and they are very different from each other. In this section, we proposed a general method for designing efficient Kansei retrieval systems, to the best of our knowledge, which has not been done in this field. And, we believe that our proposal will be able to guide the designers who are planning to design such systems. A general structure of Kansei retrieval systems is shown in Figure 1. 
This system can be divided into two parts: registration part and query part . In the registration part, the quantitative features (quantitative pattern) are extracted from every original object (images, videos, music and so on), which is called pattern ex-tracting (Fig.1). After that, every original image and its corresponding quantitative features are registered in the database system. There are many kinds of features can be used in this process of pattern extracting. For example, histogram, texture, local auto-correlation features, local contrast, and so on [17]. 
In the query part, as mentioned above, Kansei words vary much for different users That is, after the user gives some Kansei (subjective) words (e.g., calm, romantic, and Kansei words, which is used to implement a specific search in the database system. For the users who have already been known by the system, the corresponding user model can be found easily. For the users who have not been known yet by the system, by asking the user some prepared questions, the system can determine which user group the current user should belong to and which user model should be used for this user. 
Obviously, the user models play an important role for the query result. Here, let X  X  see how to build the user models. Although there are actually many specific methods to build the user models, the following four phases are generally needed for building users X  models: 1) selecting sample objects and users, 2) collecting primitive Kansei words, 3) clustering users, and 4) learning. The four phases are shown in Figure 2. 
In Phase 1 of selecting sample objects and users, some typical objects distributed in a broad range are selected as samples. Clustering all the objects in advance may be helpful. At the same time, some potential users (or say, user representatives) having different backgrounds are also selected. In Phase 2 of collecting primitive Kansei words, every selected object is labeled with Kansei words by the selected potential users. There are some different methods to conduct Phase 2. The examples include (1) SD (Semantic Differential) method: a rating scale designed to measure the connotative meaning of objects, events, and concepts. The connotations are used to derive the attitude towards the given objects, events or concepts. The selected potential users are asked to choose where their positions lie, on a scale between two bipolar adjectives. SD method is today one of the most widely used scales in the measurement of attitudes, (2) keyword method. The selected people only need to select one or some of keywords from a decided keyword set for each of such selected objects, and (3) weighted keyword method. This method is extended from the above keyword method. The selected people need to decide a weight for each of their this keyword. 
In Phase 3, all the selected people are clustered according to the Kansei words collected from them about the selected obj ects. And, all the people having similar Kansei are clustered into the same group. After that, Phase 4 will build a user model find the relationship for each of user groups between Kansei words and the contents of the objects. The technologies that can be used in this learning phase include regres-sion analysis, particularly multiple regression analysis, canonical correlation analysis, principal components analysis, statistical factor analysis, and so on. 
Now, let X  X  see the query part in Fig.1. When the user uses this system for Kansei re-trieval, he/she only needs to submit to this system some Kansei words or natural lan-corresponding quantitative pattern (quantitative features) that the database system can Finally, the retrieval results (actually result candidates) are presented to the user. 
The last part is the Kansei database system (Fig.1), which should be able to effi-ciently manage the original objects along with their corresponding quantitative pat-terns (or say feature vectors), and can answer the query requests using quantitative patterns translated from the Kansei words reflecting the users X  real purposes. Most of the relational database management systems (RDBMSs) can be used here. Multidi-mensional index technologies can be used to speed up the query processing. Since there exist many multidimensional index structures, we must choose one or design a new indexing structure for every specific Kansei retrieval system. This issue will be discussed in the next section. 
According to the above discussions, we can know that, the degree of accuracy in quantitative pattern extraction of the objects and the degree of accuracy in the user-model selection and pattern translation impact much on the satisfaction rate of the Kansei retrieval systems. any retrieval systems. We will know that the retrievals in Kansei database systems can be regarded as range queries in multidimensional spaces and many multidimen-sional index structures can be used to Kansei database systems to speed up the re-trieval processes. 4.1 Regarding Queries in Kansei Database Systems as Range Queries In the Kansei database systems, as mentioned above, the quantitative feature vectors (patterns) of the objects are registered. When querying, the user-given Kansei words are also translated into a quantitative feature vector. In Kansei retrieval systems, exact ture vectors are generally unrealistic and unnecessary for most cases. Obviously, all the similar objects to the query quantitative pattern (feature vector) translated from the user-given Kansei words should be reported to the user (Fig. 3). Here, it should be noted that the similar objects will be mapped into neighboring points in the vector space. In this way, the queries in the Kansei database systems become range queries in the multidimensional vector space. That is, all the objects in the feature vector space distributed nearly to the query point (the query feature vector) should be re-ported to the user. 4.2 Range Queries in Kansei Retrieval Systems According to our investigations, the required range queries in Kansei database sys-tems are special. Concretely, the importance degree (or say  X  X eight X ) of the features (dimensions in the vector space) for each query are perhaps different from each other, which means that the users usually emphasize only part of the features of the objects in each of specific queries. Thus, partial dimensions (not all) of the entire multidimen-sional feature space are usually enough for actual Kansei retrievals. That is, although the quantitative patterns tend to have many feature values, only part of which is nec-essary in each of actual retrievals. Such queries are called partially-dimensional (PD) range queries. In these queries, the query ranges are given only in some dimensions (not all) of the feature space. On the contrary, those having query ranges given in all the dimensions of the feature space are called all-dimensional (AD) range queries. 4.3 Using Multidimensional Index Structures to Kansei Retrieval Systems Since the queries in Kansei database systems can be implemented by multidimen-sional range queries, the multidimensional indexing technologies can be used to speed up the query process. Surprisingly, no multidimensional indexes are introduced to the existing Kansei retrieval systems. 
Many index structures have been proposed in the database community in the recent decades. Examples include R*-tree [2], X-tr ee [3], SR-tree [14], A-tree [18], and so on. The work [10] conducted a survey on multidimensional indices. 4.3.1 Traditional Multidimensional Indexes for Kansei Retrieval Systems Among the existing multidimensional index structures, R*-tree is a famous and is efficiently used for many researches and some commercial databases [1, 12]. Here, we take the R*-tree as an example to explain the disadvantage of using the traditional indexing technologies. 
Because every node of the R*-tree contains the information of its entries at all of the index dimensions, when R*-tree in the entire n -dimensional index space is used index dimensions to the entire data range. 
The disadvantage of this approach is that, each of the R*-tree nodes contains n -dimensional information of all its entries and only d -dimensional information of them means that a great deal of unnecessary inform ation, i.e., the information in the irrele-query performance. 4.3.2 Multi-Btree for Kansei Retrieval Systems dimension. For a d -dimensional PD range query, the corresponding d B-trees are used individually and their results are intersected to obtain the final query result. In total, n B-trees should be constructed in advance for an n -dimensional feature space. 
Figure 4 is an example of a PD range query evaluated using the multi-Btree, where region is the given query range. In this example, two B-trees constructed on the di-mensions of d 1 and d 2 are used. At first, two range queries are evaluated on the two B-range query is given by intersecting them. 
The disadvantage of multi-Btree is that queries on different B-trees are evaluated independently without any mutual reference. That is, during searching on each B-tree, the algorithm cannot realize the query ranges in the other index dimensions. Thus, unnecessary checks such as those in regions A, B, C, and D in Figure 5 cannot be pruned. Many unnecessary investigations are thus performed, a great deal of irrele-vant information is read from disk and many unnecessary intermediate results are reported by every B-tree. In addition to the unnecessary I/O operations, the intersec-tion phase is also very time-consuming. Considering a dataset having 1,000,000 data points uniformly distributed in a six-dimensional space. Assume that the given PD range query has four query dimensions and the query range in each of the four query has only 1,000,000/6 4 = 771 objects. However, the query result on each of the four B-trees has 1,000,100/6=166,666 objects! The total number of intermediate results is 666,666! Even if the query range in each of the query dimensions is decreased to 1/10 of the data range, the above three numbers are 100, 100,000 and 400,000, respec-tively. That is, although only 100 objects are in the final result, up to 400,000 objects are reported as intermediate results. Another disadvantage of the multi-Btree approach is that managing/updating many disk-resident B-trees requires additional costs. 4.3.3 Multiple Multidimensional Indices for Kansei Retrieval Systems It is a nature question that  X  X hy do not we prepare one index for each possible com-bination of query dimensions ? X  Since there are many possible actual combinations of index dimensions (quantitative features) used in the actual retrievals on Kansei data-base systems, it is not always feasible in applications with large datasets that one index is built for each of such possible combinations. This is because (1) numerous indices have to be constructed and managed, (2) many feature values are repeatedly included in different indices, which is too space-consuming for large datasets and possibly used in the range queries are often unpredictable. Note that, there are a total of (2 n -1) different combinations for n index dimensions. 4.3.4 Adaptive R*-Tree fo r Kansei Retrieval Systems We proposed an approach for PD range queries in our previous work [7], which is called Adaptive R*-tree (AR*-tree for short) and it can be efficiently used for Kansei retrieval systems. General Structure The key concept of the AR*-tree is that, instead of n -dimensional R*-tree nodes, the AR*-tree consists of node-groups , each of which have n one-dimensional nodes. Every node of node-groups holds information of its entries in only one dimension and each node-group holds the information in all the n dimensions. Note that each of the R*-tree nodes holds information of its entries at all of the dimensions. The general structure of the AR*-tree is depicted in Figure 5 and the structure of every node-group is shown in Figure 6. The structure of every node is generally the same as that of the R*-tree and the only difference is that only one-dimensional information is contained in each of the AR*-tree node. Figure 6 shows the corresponding relationship between the node-group of the AR*-tree and the node of the R*-tree. In the AR*-tree, all of the entries in the same place of the n different nodes of this node-group form a complete n -dimensional MBR in the index space. Whereas every entry in R*-tree nodes includes MBR information in all of the dimensions, every entry in the nodes of the AR*-tree includes only one-dimensional information. This means that every entry of each of AR*-tree nodes only corresponds to an MBR edge. The term entry of node-group is used hereinafter, which form an entry of this node-group, which corresponds to a complete MBR in the feature space. 
The question may arises that whether or not the number of nodes in the AR*-tree increase greatly. The answer is No . This is because the maximum number of entries in each node of the AR*-tree increases greatly since only one-dimensional information is contained in each node. According to our experiments the number of nodes in-creases less than 10%. Algorithms of AR*-tree The insert algorithm of the AR*-tree is a simply extensions of the counterparts of the according to dimensions and stored in differe nt nodes of the leaf node-group. If some node-group must be split, then all of its nodes have to be split at the same time and the split may be up propagated. After a delete operation, if the node-group under-flowed, serted to the AR*-tree again. A range query algorithm is shown in Table 1. 
Starting with the root node-group, each entry of the current node-group needs to be checked to decide whether its MBR intersects the query range. If its MBR intersects the query range, and the current node-group is not at the leaf level, then this algorithm is invoked recursively with its child node-groups. The structure and the algorithm of the AR*-tree guarantees that it can be applied to PD range queries (retrievals in the Kansei retrieval systems) with any combinations of the query dimensions and that only the information in the relevant dimensions is vis-ited. Here we note that the AR*-tree is also able to deal with the retrievals in which all the dimensions of the index space (all the features in the feature vectors) are neces-sary. Thus, the AR*-tree is suitable for Kansei database systems.
 Mathematical Analysis on Performance of R*-tree and AR*-tree In our previous work [7], we presented a mathematical performance-comparison be-tween the R*-tree and the AR*-tree. Because of the limitation on the space, such analysis is omitted here. Experimental Comparison on Performance between R*-tree and AR*-tree A dataset having 200,000 points in a six-dimensional space having Zipf distribution (the constant is 1.5) is used to examine the behavior of the AR*-tree for PD range queries (all the queries in Kansei retrieval systems are PD range queries). The page size of our system is 4096 bytes. Query performance is measured in term of the num-ber of leaf node accesses. 
PD range queries are tested with different numbers of query dimensions (query di-mensionalities) ranging from 1 to 5. Without loss of generality, the query ranges in all the query dimensions are set equally from 10% to 60% of the whole feature space in increments of 10%. The range query for the range of the same size is repeated 100 times with random locations, and the averages are presented. The experimental result is shown in Table 2, in which query dimensionality means the number of dimensions length) of one specific query range in each of the dimensions. Note that, we assume that all of the query ranges in our experiments are hyper-cubes. The result shows that the AR*-tree has better query performance than the R*-tree. And we can know that the performance of PD range queries on the R*-tree becomes better as the number of query dimensions increases. This is because the search region can be limited in more dimensions as the number of query dimensions increases. In this paper, it was pointed that the traditional multimedia retrieval systems using key-words or/and other text information are not enough in many applications because that they cannot deal with sensitive words reflecting user X  X  subjectivity. After briefly introduced some of the existing Kansei retrieval systems, we proposed a general flow for building Kansei retrieval systems. Also, we discussed how to speed up the re-trieval process of Kansei retrieval systems by using multidimensional indexing tech-nologies and we learned that our proposed multidimensional index structure (called AR*-tree) is more suitable to Kansei retrieval systems than other multidimensional planning to design Kansei retrieval systems. In the future, we are going to implement a real Kansei retrieval system. This research was supported in part by the Japan Society for the Promotion of Science through Grants-in-aid for Scientific Research 22500093. 
