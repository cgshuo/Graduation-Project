 1. Introduction
With the abundance of information available on the World Wide Web (WWW), the issue of how to extract useful knowledge from the Web has gained significant attention among researchers in data mining and knowl-edge discovery areas. According to a survey conducted by Computer Industry Almanac, number of online users worldwide exceeded one billion in 2005  X  up from only 45 million in 1995, and the number is expected level of around $144 billion in 2010, when the Internet will influence nearly half of total retail sales [2] . From a business point of view, increasing demand for Web services such as e-commerce, e-banking, and e-
CRM has changed the way the Web is being used. In today X  X  competitive business environment, Web services have become an absolute necessity for organizations, not only to distribute and collect information but also to discover useful patterns from collected data. Knowledge gained from collected data can then be used to develop business strategies. Many organizations have begun implementing value-added services on the Web to gain competitive advantage and create loyal customers. In order to make the Web more user-friendly for individuals and create long-term relationships with them, companies now realize that providing personal-ized products and services is crucial. This type of personalization can be achieved through a variety of methods focused on discovering each individual X  X  needs [3] . Web mining enables extraction of such knowledge for per-sonalization and improved Web services.

Web mining refers to the effort of Knowledge Discovery in Data (KDD) from the web. It can be defined as the process of applying data mining techniques to extract useful knowledge from the huge amount of infor-mation available from the web. It is often categorized into three major areas [4,5] :
Web content mining : mining of text, image, audio, video, metadata, and hypertexts in order to extract useful concepts and rules and summarize the content on the web.

Web structure mining : mining of underlying link structures of the Web in order to categorize Web pages, measure similarities and reveal relationships between different Web sites.

Web usage mining : mining of the data generated by the Web users X  interactions with the web, including Web server access logs, user queries, and mouse-clicks in order to extract patterns and trends in Web users X  behaviors.

This paper deals with Web usage mining, for which many data mining techniques such as statistical anal-ysis, clustering, classification, association rules, sequential pattern discovery, and dependency modeling have been applied to Web server logs. Among these, clustering, which has been one of the most frequently used techniques, forms the focus of this study.

One important use of clustering in Web usage mining is aimed at finding groups which share common inter-ests and behaviors by analyzing the data collected in Web servers. Recent Web usage mining studies conducted for this purpose attempt to incorporate sequence of page visits, although clustering based on frequency or
Boolean representation of Web usage is still common in many studies as we will discuss later in the literature review section. However, clustering Web users based on sequences of Web navigation remains a relatively undeveloped area in that there are few guidelines on how to evaluate the performance of sequence-based clus-tering methods [6] . This study contributes to the topic of sequence-based clustering for Web usage mining in two aspects: (1) by developing a general methodology that allows for the use of any distance-based clustering methods in identifying Web user clusters based on sequence of page visits, and (2) by developing a systematic evaluation framework, based on replicated clustering, that can be used to compare the performance of various clustering methods. This study also develops an enhanced K-means clustering algorithm for sequence-based clustering by combining the strength of fuzzy ART neural network to address certain limitations of the K-means algorithm.

One research question addressed here is as follows: Can sequence-based clustering methods perform better than frequency-based? If so, what factors affect the performance of sequence-based clustering? A second research question involves the use of Markov model in Web usage mining, the efficacy of which has been sta-ted repeatedly in past studies. For this reason, clustering based on a Markov model is considered in some Web usage mining studies [7,8] . However, whether the Web user clusters identified by cluster analysis are indeed Web user clusters that share common Markov process is an open question.

In order to address these research questions, we first develop a general sequence-based clustering method by proposing new sequence representation schemes in association with Markov models. The resulting sequence representations allow for calculation of vector-based distances (dissimilarities) between Web user sessions and are used as inputs of various clustering algorithms. Two clustering algorithms are selected to conduct various experiments: (1) K-means algorithm and (2) a hybrid algorithm referred to here as  X  X  X AK  X  that first utilizes fuzzy adaptive resonance theory (fuzzy ART) to determine initial cluster centroids for a K-means algorithm. We then investigate how well the clusters, or groups of Web users who follow the same Markov process, are recovered with these two algorithms using a replicated clustering approach. Proper recovery of original Web user clusters is particularly important given that various applications in Web usage mining involve Web per-sonalization [3,6,9,10] . For example, a better recommended set of links can be made for the Web users in each recovered cluster along with that cluster X  X  corresponding Markov model because the better the recovery is, the more accurately the Markov model can be constructed. Also, marketing decisions, such as target advertising in a Website, can be effectively made by discovering the user patterns in each recovered cluster.
A series of experiments is conducted in order to determine whether clustering performance is affected by different sequence representations and different distance measures as well as by other factors such as number of actual Web user clusters, number of pages, similarity between clusters, minimum session length, number of user sessions, and number of clusters to form.
 This paper is organized as follows. The next section provides a review of related literature on clustering for
Web usage mining. In Section 3 , a methodology for Web user cluster formation is introduced, outlining the details related to sequence representation schemes and clustering methods. Section 4 presents an experimental design to evaluate clustering algorithms under various factors. Experimental results and sensitivity analysis are provided in Section 5 . Comparisons of the performance of the clustering approach proposed in this paper with those of existing approaches in other studies are provided in Section 6 , followed by conclusions in Section 7 . 2. Literature review
The major application areas for Web usage mining fall into five categories: personalization, system improvement, site modification, business intelligence, and usage characterization [11] . Cluster analysis on
Web usage data is widely used in three of these applications, as shown in Table 1 . We provide a focused review of these streams of the literature.

For the task of clustering Web users or user sessions, many studies have adopted a vector model with Bool-ean-based (visit/no visit) or frequency-based (the number of times a page is visited) representations of Web usage [12 X 17] . For example, Yan et al. [17] used the leader algorithm with frequency-based representation of Web usage. Each user session is represented by an n -dimensional feature vector and the degree of interest of the users in a particular Web page is calculated based on the number of times the page has been accessed and the amount of time the user spent on the page. Then, based on the degree of interest, clusters of similar sessions are formed. Although Boolean-based or frequency-based clustering methods are relatively easy to apply and are widely applied, these methods have weaknesses since information about multiple visits to the same page may be lost and users X  transitions from one page to another cannot be reflected.

The effects of different representation schemes  X  usage-based (UB), frequency-based (FB), viewing-time based (VTB) and visiting-order based (VOB)  X  were examined by Xiao et al. [18] . They applied a matrix-based clustering algorithm to cluster user sessions and found that, on average, the number of clusters using VOB scheme is always greater than that using other representation schemes, whereas the number of clusters formed with UB is always the smallest among the four schemes. The prediction accuracy of VOB was superior to that of other schemes.

Using sequence of visits in order to cluster Web users is seen in several Web usage mining studies. Shahabi et al. [19] conducted an experiment to evaluate the performance of their path clustering method that fully con-siders Web users X  navigation path and viewing time. Shahabi and Banaei-Kashani [9] introduced a model with feature-matrices (FM) for use in discovering and interpreting users X  access patterns. The FM model, which is a generalization of the vector model, allows the capture of various spatial and temporal features of Web usage data and enables the use of vector-based distance measures. Kim [20] , who used self-organizing map (SOM) for clustering Web user sessions with sequence-dependent representation, asserted that sequence-dependent representation can overcome the limited representational power of Boolean or frequency-based representa-tion. Hay et al. [21,22] applied Ward hierarchical clustering method with non-vector-based distance measure which is called the sequence alignment method (SAM) and a multidimensional sequence alignment method (MDSAM) before their navigation pattern extraction step. Experiments on a real data set indicate that
SAM better represents behavioral characteristics of Web users regarding content and order of Web page visits than the traditional Euclidean-distance measure. However, the pair-wise similarity comparison required for hierarchical clustering methods brings a scalability issue, and thus these experiments were carried out with a relatively small dataset. Kumar et al. [23,24] proposed using a non-vector-based similarity measure called
S M for clustering Web user sessions. S 3 M considers both composition of pages visited and the order of visits.
Kumar et al. [23] showed in their experiments using two real data sets that the SeqPAM algorithm, a variant of partition around medoids (PAM) that utilizes S 3 M , performs better than PAM using frequency-based cosine similarity measure due to the consideration of sequential information. Kumar et al. [24] also proposed a hier-archical clustering algorithm that utilizes S 3 M . They proposed using a rough set theory-based algorithm devel-oped by De and Krishna [25] along with S 3 M similarity. They argue that rough clustering, which allows fuzzy membership (i.e., a session can belong to more than one cluster), can provide better interpretations of different navigation patterns of Web users, unlike traditional clustering algorithms that require a clear fit into one group.

While the above sequence-based clustering approaches focus more on separating Web users into groups sharing similar navigation behavior, there is another stream of Web usage mining research involving sequen-tial pattern mining techniques which originated from association rule mining [26] . These studies focus more on finding rules that describe Web users X  navigation, and these help building prediction models [27] . For example,
Chen et al. [28] derived an algorithm to extract maximal forward references (page visits) from a Web server log under the assumption that backward reference by Web users is only made due to the easiness of navigation, not due to their navigation behavior. Yang and Parthasarathy [29] used temporally constrained association rule mining to capture Web users X  access patterns and used them for future access predictions. Their approach was based on the premise that recent page access records have great influence on future page accesses.
Clustering sequences often involves sequential pattern mining techniques as seen in Web usage mining stud-ies [21,22,30,31] . In other general sequence mining studies, sequential pattern mining techniques are also used to reduce the computational complexity and to produce meaningful clusters [32,33] . In order to address the computational complexity arising from pair-wise similarity comparison, Guralnik and Karypis [32] presented a sequence mining method which does not require a similarity matrix for clustering. The idea is to capture the sequential nature of various data sequences and represent each data sequence into a new feature space so that a computationally efficient vector-based algorithm such as K-means algorithm can be used. They found that the feature-based approach achieved reasonably good clustering results compared with similarity based approaches while significantly reducing computational complexity. Another approach dealing with complex-ity, called ApproxMAP, was introduced by Kum et al. [34] . Conventional sequence mining methods which intend to find exact patterns in a complete set of sequence often suffer from generating a huge number of short trivial patterns. ApproxMAP identifies patterns approximately shared by many sequences called consensus patterns so that it substantially reduces the number of trivial patterns while providing more accurate and informative insights into sequential data.

Regardless of representation scheme, many clustering algorithms are based on a distance measure; the dis-tance is vector-based such as the Euclidean or non-vector-based such as SAM. In contrast to these distance-based clustering methods, Cadez et al. [7] used model-based clustering algorithms for the visualization of Web usages. They applied an Expectation-Maximization (EM) algorithm in order to cluster user sessions while learning a mixture of Markov models and argued that EM is easy to implement and memory-efficient for clus-tering Web users. Smyth [35] also developed a general sequence clustering approach, although not directly applied to Web usage mining, using hidden Markov models (HMMs). Another non-distance-based clustering method called matrix clustering was applied by Oyanagi et al. [30] to find sequential patterns in Web server logs. A new algorithm called the  X  X  X ing-Pong  X  algorithm was used first to extract dense sub matrices from a binary matrix, in which each element indicates the occurrence of visits from one page to another. Then, by synthesizing the resulting sub matrices (clusters), a super sequence is extracted that represents sequential patterns graphically.

Given the fact that a wide variety of clustering algorithms, representation schemes, and distance mea-sures are available for the purpose of clustering Web users, performance comparisons of these choices appear in a few Web usage mining studies. As mentioned above, Xiao et al. [18] compared different rep-resentation schemes, and Kumar et al. [23,24] and Hay et al. [22] compared performances of their pro-posed method with another method or distance. Shahabi et al. [19] conducted an experiment to evaluate the performance of their path mining method that fully considers Web users X  navigation path and viewing time. Although the number of individual users (Web user clusters) and the number of paths (user sessions) were limited in their experiment to 10 and 940, respectively, the K-means clustering algo-rithm in combination with their sequence-aware cosine distance measure was able to recover the original clusters 73 X 90% in terms of correct probabilistic prediction of the next path. Shahabi and Banaei-Kashani [9] compared the performances of using Euclidean, projected Euclidean, and cosine distance measures using precision and recall metrics and showed that projected Euclidean is the best choice in their dynamic clustering problem context. Martin-Guerrero et al. [15] compared the performances of various clustering algorithms (K-means, fuzzy c-means, hierarchical clustering, expectation-maximization, and SOM). Their simulation result shows that for a very simple Web site, using the K-means algorithm was adequate.
But, for a more complex Web sites, SOM was the most suitable algorithm. Kuo et al. [12] compared the performance of K-means, ART2, and various hybrid algorithms that are combinations of ART2,
SOM, and genetic K-means. The number of misclassifications among proposed clustering methods was calculated to measure the robustness of the algorithms. Their results suggest that using hybrid algorithms result in better performance than using a single clustering method such as K-means alone or ART2 alone.
These comparative studies give insights useful for choosing one method over another. These comparisons, however, were often carried out with a limited set of Web site scenarios or in less realistic settings; there-fore, in other Web site scenarios, the recommendations of the comparative studies may not be valid.
While Markov models are highly regarded as Web usage mining methods [7,36 X 40] , combining Markov models with sequence-based clustering has rarely been attempted, with the exception of Yang et al. [8] ,in which Markov chain X  X  transition matrix-based representation and K-means algorithm are used to cluster user sessions for better Web caching and pre-fetching.

As shown in Table 1 , while sequence-based clustering is consistently highly regarded for use in Web usage mining, a systematic evaluation of these methods was rarely addressed. In most comparisons done in clustering studies, either the number of clustering methods being compared is limited or the size of the problem, such as the number of sessions, is small. This is partly due to dimensional complexity resulting from sequential data representation or scalability issues arising mainly from existing sequence-based clus-tering methods. Based on our review of current literature, we were led to conclude that developing a gen-eral, sequence-based clustering methodology as well as developing an evaluation framework for the systematic comparison of the various techniques developed so far may help to close some obvious gaps.
This study presents such a methodology and evaluation framework. Our methodology, based on Markov models, considers sequential information in Web usage data effectively and efficiently, and it can be extended to allow integration with a Web user navigation behavior prediction model for better Web per-sonalization and System improvement. 3. Sequence-based Web user clustering
In this section, we first devise representation schemes suitable for capturing sequence information. This is followed by definitions of four distance measures and a description of three clustering methods involved in this research: K-means, fuzzy ART neural network, and a hybrid, fuzzy ART-enhanced K-means algorithm (FAK). 3.1. Sequence representation
As mentioned earlier, many clustering studies in Web usage mining adopted frequency-based representa-tions because of their easiness in representing Web user sessions and in calculating the distances between ses-sions. Frequency-based representations utilize a frequency vector in which each element, corresponding to a given Web page, is computed by counting the visits to that Web page and dividing it by the total number of visits in a session.

In order to capture sequence information, we adopt a matrix representation, referred to as sequence matrix , which is constructed based on: (1) a transition matrix of a Markov chain, similar to the representation used in
Yang et al. [8] and (2) a precedence matrix similar to the one used in Park and Suresh [41] . Both elements fit well into the design of our study, along with the additional benefit of being compatible with many existing clustering algorithms.

A state can be defined either as a page, or a page category which the Web users can visit. In Cadez et al. [7] , user sessions are represented using categories of general topics, not pages themselves, and each
Markov chain (MC) represents the behavior of a particular subgroup. Clustering at the page category level is also seen in Fu et al. [13] in which a distance-based hierarchical clustering algorithm (BIRCH: Balanced Iterative Reducing and Clustering using Hierarchies) is used to cluster Web user sessions.
Because the performance of BIRCH decreases as the number of Web pages grows, the authors proposed a session generalization approach using attribute-oriented induction [42] so that clustering is performed at the page category level. Although it is not always feasible to have a clear arrangement of each page to one particular category [43] , a simple way to find page categories would be to use clustering algorithms in cat-egorizing Web pages. Smith and Ng [16] used SOM to cluster Web pages based on users X  navigation pat-terns and suggested the resulting map to be used to better understand those patterns. Since the focus of our paper is on the clustering of Web users, rather than on the various issues involved in preprocessing of
Web log data, we assume Web pages are already well categorized for clustering. The clustering of Web pages is, however, an important research domain in Web usage mining, and readers interested in this area are referred to [44] .
 Although every Web page in a Web site can be considered a state, it is preferable to consider a category of
Web pages as one state, due to two reasons. First, the Web user X  X  navigation behavior within the same cate-gory of pages may not add much information to help identify the Web user clusters. For example, the sequence of Web page visits by a Web user browsing a series of sports pages may not be as important as the sequence of visits by the user first to a weather page category, then to a sports page category. Secondly, since many Web sites nowadays contain hundreds and thousands of Web pages, considering all Web pages as states may make the clustering problem unmanageable. Thus, henceforth our use of the term  X  X  X eb page  X  refers to a category of Web pages. 3.1.1. Transition-based sequence matrix
The use of the Markov chain (MC) relies on the assumption that the states that are likely to be visited in the next navigation depends only on what page a Web user is viewing now. Therefore, we assign values to the
Suppose the sequence of visits by the first Web user, s 1 vector x 1 = (0,1,3,2,3,2,1,0). The sequence matrix ( S 1 1 X 3, 3 X 2, 2 X 3, 3 X 2, 2 X 1, and 1 X 0, is counted and divided (normalized) by the frequency of all the transitions made from the same state. Likewise, the sequence matrix of the second sequence s structed in the same way with x 2 = (0,1,3,1,0). If there existed only three Web pages (1, 2, and 3), the sequence matrices would be given as
For sequences such as s 2 where not all states are visited, states that are not involved in a sequence (row 3 and column 3) can be omitted in the sequence matrix. For distance calculation purposes, however, these states have values of all 0s. This violates the rule of transition matrix in Markov model which states that every row sum must equal 1. In order to satisfy this rule, one can assign a value of 1/ M to all elements in such rows alternatively. In general, for a Web site that contains M pages, an M M sequence matrix ( S structed from the corresponding sequence vector x n = (0, x Step 1. Initialize S n ( i , j ) with zeroes, for all i and j .
 Step 2. Set t =0.
 Step 4. t t +1.
 Step 5. Repeat steps 3 and 4 if t 6 h .
 Step 6. For each i and j , S n  X  i ; j  X  S n  X  i ; j  X  = 3.1.2. Precedence-based sequence matrix
The precedence matrix is similar to the transition matrix in that it considers what states are likely to be vis-ited. Unlike the transition matrix, however, the precedence matrix focuses only on the frequency of all future visits to a given state from the present state. Thus, S n remainder of a Web session, given the present state i . For example, the same sequences h 1 X 3 X 2 X 3 X 2 X 1 i and h 1 X  3 X 1 i can be represented as
Similar to the transition-based sequence matrix, a precedence-based sequence matrix S following the procedure below.
 Step 1. Initialize S n ( i , j ) with zeroes, for all i and j .
 Step 2. Set t =0.
 Step 3. Set u = t +1.
 Step 4. S n ( x t , x u ) S n ( x t , x u )+1.
 Step 5. u u +1.
 Step 6. Repeat steps 4 and 5 if u 6 h +1.
 Step 7. t t +1.
 Step 8. Repeat steps 3 X 7 if t 6 h .
 Step 9. For each i and j , S n  X  i ; j  X  S n  X  i ; j  X  =
Depending on the problem context, how a sequence matrix is constructed may vary a little from the method shown above. For example, the normalization factor used above (i.e., the denominator) may be replaced with tional data such as the time of day, the freshness of the data, or the elapsed time before the transition. 3.2. Distance measures
A distance measure is used to gauge the extent to which one user session differs from another. In our study, the distance measure is defined using a pair of sequence matrices, each matrix representing the consequence of one Web user X  X  behavior on the Web site. Any sequence of visits to M possible pages, regardless of the length of that sequence, can be converted into a ( M +1) ( M + 1) sequence matrix as explained in the sequence rep-resentations section. The resulting sequence representations allow for calculation of distances (dissimilarities) because they can be considered as ( M +1) 2 -dimensional vector.

Distance measures defined for a pair of sequence matrices may also be used to measure the distance between a sequence matrix and a cluster centroid , defined as an aggregated sequence matrix representing all sessions in the same cluster. A cluster centroid T l for cluster ment in sequence matrices as follows: where n l is the number of elements in e C l .

The well-known K-means algorithm utilizes this cluster centroid for its fast and efficient clustering whereas traditional hierarchical clustering algorithms require distances between every pair of sessions. In this study, four distance measures were selected and their relative clustering performance was compared. 3.2.1. Euclidean distance
This has been the most popular distance measure adopted in Web usage mining. The distance between sequence s 1 and sequence s 2 is defined as
If two sequences are identical, the value of the Euclidean distance is zero, and, as they become more dis-similar, the distance value increases. 3.2.2. Projected Euclidean distance
This distance measure was developed by Shahabi and Banaei-Kashani [9] in order to avoid an overestima-tion of distance which may result from using Euclidean distance. The projected Euclidean distance between sequence s 1 and sequence s 2 is defined as
Because a user session ends after a certain period of time, the user session is a partial trace of the Web user X  X  navigation behavior, and it does not necessarily show every possible transition under the Web user X  X  Markov model. For example, when a user session is short, the sequence matrix often contains many zeroes despite non-zero transition probabilities in the transition matrix. Therefore, by including only non-zero elements in the calculation, this distance measure alleviates possible overestimation arising from the Euclidean distance measure. 3.2.3. Cosine dissimilarity
Using a similarity measure sim ( s 1 , s 2 ) with a maximum value of 1, a distance measure can be computed as but it has also been used in Web usage mining problems [9,18,19] . Cosine similarity between two sequence matrices is defined as
Based on our sequence representation, the numerator is the sum of inner products of the two sequence matrices and the denominator is the product of the norms of the sequence matrices. This similarity measure becomes one if the sequences are identical. If there is at least one common subsequence, i.e., if an element in one matrix and the corresponding element in the second matrix are not both zeroes, the value of the similarity falls between 0 and 1. If there are no common subsequences, the similarity becomes zero. Cosine dissimilarity tance between sequence s 1 and sequence s 2 . 3.2.4. Fuzzy dissimilarity
In this study, we develop a new dissimilarity measure to enable the application of the fuzzy ART neural network method, which is described below. We define fuzzy similarity between sequence s where ^ is the fuzzy AND operator: ( S 1 ^ S 2 )( i , j ) = min{ S ( S tween sequence matrix 1 and sequence matrix 2 is defined as d distance measure.

Fuzzy dissimilarity, like the projected Euclidean distance measure, alleviates the overestimation problem to some degree because it does not make use of elements with matching zeroes if both elements in the two sequence matrices contain zero values. In other words, when both min{ S are zeroes, the matching zeroes do not increase similarity (or decrease dissimilarity). However, unlike pro-jected Euclidean distance, fuzzy dissimilarity is a commutative measure; hence the order of operands (sequence matrices) does not change the dissimilarity value. 3.3. Clustering algorithms
Traditional hierarchical clustering algorithms (e.g., single linkage, average linkage and Ward methods) commonly used in clustering become somewhat impractical, requiring more storage and computation when the number of observations is large. Therefore, the K-means algorithm has been one of the most widely used algorithms in Web usage mining. It is considered in this paper as a main clustering method for Web usage mining and its performance is assessed using several distance measures, and a major refinement to this K-means algorithm is made based on fuzzy ART neural network.

Although the K-means algorithm is popular and is relatively fast and efficient, it has some major weak-nesses: (1) the number of clusters to be found must be specified in advance, (2) clustering results depend on data mining, recent studies have supported the use of neural networks such as competitive learning, Adaptive
Resonance Theory (ART), and self-organizing maps, due to their flexibility and stability [46] . In this study, we investigate the use of the fuzzy ART neural network, which is the most recent version of ART, as a possible means of enhancing the performance of the K-means algorithm.

The fuzzy ART network has an unsupervised learning feature. It does not require pre-specification of the number of clusters; instead, it finds the number of clusters after clustering has taken place. This property is desirable in dynamic clustering of Web users [14] , in which a steady stream of Web users is constantly gener-ating new Web usage data. With the K-means algorithm, it is necessary to recalculate distances with a new set of data after Web user clusters have already been formed with the initial set of data. In contrast, fuzzy ART can eliminate the need for such a recalculation. However, a major limitation with fuzzy ART, as with ART networks in general, is the unrestricted growth of clusters, known as category proliferation . Fuzzy ART net-works sometimes produce numerous clusters, each with only a small number of members.

Thus, keeping in mind the strengths and weaknesses of both K-means and fuzzy ART algorithms, we develop a hybrid algorithm, referred to here as FAK, as a major refinement in the use of K-means. In essence, the FAK algorithm uses fuzzy ART as an initial seed generator and K-means as the final clustering algorithm.
By using this proposed hybrid algorithm, we attempt to mitigate the problems of pre-determining the number of clusters, initial selection of cluster centroids, and sensitivity to noise and outliers from the K-means algo-rithm. In addition, the category proliferation problem inherent in ART-based networks is also addressed by running the K-means in the second phase of the algorithm. A brief summary of each clustering algorithm is presented below. 3.3.1. K-means algorithm
The K-means clustering algorithm is used to group objects based on attributes/features into k (positive inte-ger) number of groups by minimizing the sum of squares of distances between data and the corresponding cluster centroid. K-means algorithm is usually implemented with the Euclidean distance measure, based on the following steps [47] : Step 1. Generate initial random cluster centroids for k clusters.

Step 2. Assign each input (that is ( M +1) ( M + 1) sequence matrix in our case) to its closest cluster cen-troid in terms of Euclidean distance.
 Step 3. Compute new cluster centroids.
 Step 4. If cluster memberships change compared to the last iteration, Repeat Steps 2 X 3.
 Step 5. Stop and store clustering result.

In this study, in addition to the conventional Euclidean distance measure, we use three other distance mea-sures. We thus evaluate the performance of K-means with Euclidean distance (KME), projected Euclidean dis-tance (KMP), cosine dissimilarity (KMC) and fuzzy dissimilarity (KMF). In addition, we evaluate the FAK algorithm which involves the use of a K-means algorithm preceded by the application of the fuzzy ART neural network. The steps involved with the fuzzy ART neural network are outlined below. Kuo et al. (2005) also applied ART2 to find the initial centroids for the K-means algorithm, without considering sequences. How-ever, in our study, we develop a methodology for sequence-based clustering which is more involved. 3.3.2. Fuzzy ART neural network
The fuzzy ART neural network was introduced by Carpenter, Grossberg and Rosen [48] and involves two layers of neurons: upper layer of neurons (output layer) and lower layer of neurons (input layer). For captur-ing sequence-based similarities, however, a lower layer which consists of a matrix of neurons is needed. This modified architecture is shown in Fig. 1 . The upper layer consists of neurons ( k =1,2, ... , K ) each of which eventually comes to represent one Web user cluster that is identified. The lower layer, which consists of a matrix of neurons, interfaces with the ( M +1) ( M + 1) sequence matrix for each Web session. The steps involved are:
Step 1. Initialize network parameters: K =1, W 1 ij 1 for i , j =0, ... , M , a &gt;0,and b , q 2 [0,1]. W weight matrix for k th output layer connecting upper and lower-level neurons.
 Step 2. Calculate choice function: For every upper-level neuron k 6 K , we compute: Step 3. Selection of best-matching node: Select the best-matching upper-level neuron, h , whose exemplar: T h = max{ T k }.
 Step 4. Resonance test: If k I ^ W h k / k I k P q , go to Step 6.
 Step 5. Mismatch reset: Set T h = 1 and go to Step 3.
 Step 6. Learning step: The best-matching exemplar is updated using the learning law:
Step 7. Create new node: If h = K , increase K by 1, and set W Step 8. Repeat: Go to Step 2 unless no more input remains.

The choice parameter ( a ) seems to have little impact in our problem, and we set it to a very small value for all experiments ( a = 0.0001). The values for the learning parameter ( b ) and vigilance parameter ( q ) are between zero and one. The b value, utilized in step 6 above, specifies the speed with which the exemplars are adapted in response to new inputs, while q specifies the level of similarity between new inputs and existing exemplars. For all experiments in this study, we used b = 0.1. Higher q values result in a larger number of smaller clusters, with high degrees of similarity within. Hence, we used different q values in our experiments in order to control the number of clusters as explained below. 3.3.3. Fuzzy ART-enhanced K-means (FAK) algorithm
Although a practical advantage of using fuzzy ART lies in not having to specify the number of clusters ahead of time, we restrict the number of clusters generated by fuzzy ART to a number between 2 K 3 K
F ( K F = number of final clusters to be formed by K-means) by varying the value of the vigilance parameter ( q ), purely to enable experimental comparison of the effectiveness of FAK with other clustering methods. Through this restriction, an ample pool of initial centroids for K-means algorithm is made available.
After generating clusters in the first phase using fuzzy ART, we remove the clusters whose centroids have minimum distance to the others one by one. This ensures cluster separations, which fuzzy ART usually lacks in a noisy inputs scenario like ours. The second phase of FAK involves using the K-means algorithm for final cluster formation.

In the second phase where the K-means algorithm is applied, the Euclidean distance measure can be replaced by any of the three other distance measures. We use fuzzy dissimilarity as a distance measure for the second phase because fuzzy dissimilarity is based on the choice function calculation and the resonance test of the fuzzy ART algorithm. All of the above algorithms were coded in C#, an object-oriented programming language. 4. Experimental framework
The experimental framework is based on a replicated clustering approach which is described first. We then describe the simulation procedures used to create user sessions from a randomly generated transition matrix, along with the clustering performance measure used in the study. This is followed by details of the experimen-tal design. 4.1. Replicated clustering approach
The replicated clustering approach involves starting with a known clustering solution, which is randomly reordered and presented to the clustering algorithm. The clusters that are identified by the algorithm are then compared with the known initial solution. The effectiveness with which clusters are identified by various clus-tering algorithms is compared based on appropriate performance measures.

Comparing the known solution with the resulting clustering solution, similar to replicated clustering, has been commonly used [12,49,50] . This experimental approach is particularly relevant when evaluating cluster-ing algorithms that are sensitive to ordering of the input data set (like the K-means algorithm). The robustness of the algorithm to different factors and variations of sequence representation and distance measures can be systematically investigated.

Initial solutions are generated through a Monte Carlo simulation to generate Web user sessions and known cluster memberships for the experiments. There are two steps in this simulation: (1) generating transition prob-abilities of the Markov chains, P ( k ) X  X  and, (2) generating Web user sessions, x 4.1.1. Generation of transition probabilities
Three factors are required in this step: (1) M : number of Web pages; (2) K : number of Markov Chains (MCs); and (3) R : average MC similarity. These factors can be used to characterize the types of Web sites and their users X  navigation behavior. For example, a large commercial Web site may have a large number of pages and a large number of Web user clusters ( K ) whereas a personal Web site may have a small number of pages and a small number of Web user clusters. Similarly, the Web users in one Web site may show some common navigation behavior regardless of the clusters to which they belong, making the average MC similar-ity higher, while the Web users in other Web sites may not. Although the factors K and M are easily manip-ulated when generating the transition matrices, manipulation of average MC similarity requires some additional considerations.

The similarity between the navigation behavior of users belonging to one Web user cluster and the behavior of users belonging to another can be represented by the similarity between corresponding transition matrices.
The similarity between two MCs of presupposed clusters k 1
P ( k 1 )and P ( k 2 ): k .

When generating transition matrices, it is important to note that real-world Web usage patterns show that fewer user sessions are generated as the session length increases. This characteristic is known as Zipf X  X  Law [51] . Fig. 2 shows the relationship between the percentage of user sessions and session length obtained from one of the datasets generated with a transition matrix and its simulated user sessions. As a session becomes longer, the percentage of user sessions decreases. From an initial experiment generating random transition matrices, it was observed that when the average MC similarity is high, Zipf X  X  Law holds. However, as the aver-age MC similarity becomes lower, the session length usually becomes longer, making Zipf X  X  Law hold only for sessions lasting longer than a certain length. In order to prevent this problem of having long sequences, we calculate the expected values of session length from randomly generated MCs and discard those with expected session lengths exceeding the specified maximum. 4.1.2. Generation of Web user sessions The second step in the simulation is to generate user sessions using the MCs simulated in the first step. Based on K number of ( M +1) ( M + 1) transition matrices with an average MC similarity of R , a set of N Web user sessions is generated using a random number stream as follows:
Step 1. Generate the cumulative transition matrix in which cumulative transition probability is calculated as Step 2. Set n =1.
 Step 3. Set t = 0 and x 0 = 0, indicating that the user initiates a Web user session.
 Step 4. Generate a random number y in [0,1) from a uniform distribution.

Step 6. If x t +1 = 0 (the user ends the session), then set h = t and X and repeat Steps 4 and 5.
 Step 7. Stop generating user sessions if n = N . Otherwise, n n + 1 and repeat Steps 3 X 6.

Fig. 3 shows three sample transition matrices and ten sample user sessions ( N = 10) generated for each matrix given that K =3, M = 9, and R  X  0 : 4. 4.2. Performance measure
It is desired that a clustering method, presented with reordered data, recovers the pre-specified clusters with the original cluster members retained in each cluster. A correct cluster assignment occurs when a user session generated by the transition matrix of a specific presupposed Web user cluster is classified into the correspond-ing resulting cluster. Suppose the n th user session is generated based on a presupposed cluster C sequence vector x is classified into e C l .If C k  X  e C l fect. However, due to the probabilistic nature of the Markov model, some sequence vectors are classified into clusters different than the presupposed cluster to which they belong. This can be considered as an assignment problem that can be solved by the Hungarian method [52] .

Let n kl be the number of user sessions belonging to a presupposed cluster k and classified into cluster l .If the number of presupposed clusters is the same as the number of clusters formed by a clustering algorithm (i.e., K = L ), then the following assignment problem can be formulated for the calculation of cluster recovery rate (CRR): where u kl =1if e C l is chosen to represent the presupposed cluster k and u the proportion of user sessions classified into their presupposed cluster and is given by where u kl is the optimal solution of the assignment problem given in (7) .

While the probabilistic outcome resulting from the transition matrix can form many sub-clusters, a clustering algorithm cannot effectively identify the cluster to which these sub-clusters belong. When the number of resulting clusters is greater than the number of presupposed clusters ( L &gt; K ), the assign-ment problem and the Hungarian method are slightly modified to enable the calculation of CRR as follows: Step 1. Set n kl = 0 for l =1, ... , L and k = K +1, ... , L .

Step 2. Solve the assignment problem in (7) in order to get u
Step 3. For k = K +1, ... , L , set u kl  X  1if l = arg max{ n Step 4. Calculate CRR using (8) .

We use CRR as a primary performance measure. However, it may be noted that a high value of CRR does not necessarily mean that the clusters in a geometric space are easily separable from each other. Nor does it mean that the members in a cluster must be cohesive, i.e., close to each other. 4.3. Experimental design Two types of experimental factors affecting clustering recovery are considered: Web site-specific factors and
Web usage mining (WUM) specific factors . Accordingly, two sets of experiments were conducted. Web site specific factors are ones over which a Web mining manager has little control. Hence, the objective of the first sets of experiments is mainly to compare and evaluate the overall clustering performance using different rep-resentation schemes (Experiment 1a) and different clustering methods (Experiment 1b). The comparison is done for various types of Web sites which are manipulated by Web site-specific factors. As Web site-specific factors for the first set of experiments, we use: (1) number of MCs, (2) number of pages, and (3) average MC similarity, as shown in Table 2 .

In contrast, when the level of factors can be set by a manager in order to improve cluster recovery, we refer to them as Web usage mining (WUM) factors. Factors of this type considered in our second set of experiments are (1) number of user sessions, (2) minimum session length, and (3) number of resulting clusters. We evaluate the effects of these factors on clustering performance at broader levels (Experiment 2) and then examine the of experiments is to provide insights to managers on the levels of these factors. 4.3.1. Experiment 1: with Web site-specific factors
The study by Balakrishnan et al. [49] investigated the effects of three factors  X  the number of (presupposed) clusters in the data, the number of dimensions, and the level of error on cluster recovery performance using a full factorial experimental design. Our study also employs a full factorial design for CRR with three equivalent or similar factors.

We consider the number of MCs ( K ) as a factor equivalent to the number of presupposed clusters. Since we assign one MC to each presupposed cluster, the number of MCs is basically the same as the number of presupposed clusters. Balakrishnan et al. [49] argued that as the number of presupposed clusters increases, causing cluster recovery performance to worsen. Moreover, in sequence-based clustering, having similar sub-clusters among different main clusters is likely to happen. In other words, there is a chance that some user sessions generated by different MCs may share similar navigation results. As the number of MCs increases, formance will deteriorate as the number of MCs increases.

The second factor, the number of pages ( M ), corresponds to the number of dimensions or attributes used in previous comparative studies [12,49,50] except that the number of dimensions is given as ( M +1) based clustering. On the one hand, as the number of pages increases, an improvement in cluster recovery, albeit without conclusive statistical significance [12,49] , may be expected. Having a greater number of pages may cause a user session to reveal more navigation behaviors and thus enable CRR to increase. On the other hand, having many pages but keeping the user session at about the same session length (which is the exper-imental setup that we use) may deteriorate cluster recovery. For a given session length, the greater the number of pages, the fewer patterns a session is likely to show.

The third factor that we consider in our experiment is average MC similarity  X  R  X  , which is a measure that represents the similarity between Web user clusters. Average MC similarity is calculated as where R k the level of error or error perturbation appearing in previous comparative studies on clustering algorithms.
Having lower MC similarity between two MCs allows for fewer overlapping page navigations between user sessions generated by different MCs; but having high MC similarity results in many overlapping navigations. Thus, it is expected that as average MC similarity increases, CRR becomes lower.

It is apparent that a manager conducting Web usage mining has little control over the aforementioned fac-tors that characterize a Web site and its users X  navigation behavior. In order to test whether one representa-tion, or one clustering method, can correctly identify Web user clusters in various types of Web sites, we investigate the effects of these factors with full factorial ANOVA experimental design. After setting the num-ber of user sessions to 5000 and the minimum session length to 5, we conduct Experiments 1a and 1b with the factors and levels shown in Table 2 . Using three levels for each of three Web site-specific factors and three levels for representation scheme (or five for clustering method), as summarized in Table 2 , results in a 3 3 3 3 (or 5 3 3 3) full factorial design. Each experiment utilized 20 replications per cell, requir-ing a total of 540 simulation runs per representation scheme or clustering method. For each factor level com-bination and replication, the same set of user sessions was presented to the clustering procedure in order to reduce common variance ( X  X  X ithin block variance  X  ). 4.3.2. Experiment 2: with Web usage mining-specific factors Unlike Web site-specific factors, WUM factors can be decided by a manager conducting Web usage mining.
Experiment 2 and the sensitivity analysis on these factors help managers understand the effect of these factors and decide their levels. For example, managers may face a decision as to whether clustering Web users based on the first N sessions would be adequate to recover Web user clusters to a certain desirable level. In addition, they would need to consider whether to include user sessions with shorter lengths because such sessions may unknown, a manager would need to determine how many resulting clusters would be needed to achieve better performance.

The number of user sessions ( N ) is the first WUM factor that we consider. In practice, a Web usage mining manager may discard or update old clustering results every certain number of sessions instead of clustering all user sessions because this approach, which requires less time and storage, is often more feasible. Hence, the manager may want to find whether the clustering performance is affected by the number of user sessions, and if it is, he or she may want to determine the optimal level of this factor.

The minimum session length ( h ) is the second WUM factor that we consider in Experiment 2. When an indi-vidual user session for clustering is generated, the minimum session length is used to filter the user-sessions.
For example, when the minimum session length is set at 5, we ignore shorter-length user sessions (i.e., sessions with a length of 1 X 4) in the clustering procedure. Intuitively, it is reasonable to assume that a longer session means a greater chance of identifying the cluster it belongs to. In order to test our assumption, the minimum session length needed to build an input data set is varied as 2, 5, and 10. As indicated by Zipf X  X  Law, as a ses-sion becomes longer, the percentage of user sessions considered decreases rapidly. In practice, one must plan carefully in determining the minimum session length due to this trade-off between increasing the accuracy and covering more user sessions. Thus, a WUM manager may want to find an adequate minimum session length by conducting an experiment similar to Experiment 2 or a sensitivity analysis of minimum session length, and then cluster only sessions whose length is greater than a certain number.

It is often the case that a clustering algorithm requires information on the number of clusters. A manager who does not know how many Web user clusters exist within their Web users may want to see whether increasing the number of resulting clusters can improve or worsen cluster recovery.

Thus, in Experiment 2, we investigated the impact of the three controllable factors noted above on one example Web site characterized by K =6, M = 14, and R  X  0 : 4. Similar to Experiment 1a, a 3 3 3 full factorial design with 20 replications per each cell was used. In addition, we conducted a sensitivity analysis of each factor by keeping the other WUM factors fixed. 5. Experimental results
For all experimental results, we used analysis of variance (ANOVA) to analyze the effects of various factors on CRR and to compare the relative significance of each effect across different representation schemes and different clustering methods. When one of the factors was found to have a significant effect, post hoc multiple comparison tests were conducted. For this purpose, Tamhane X  X  T2 test was selected over Bonferroni X  X  or Tukey X  X  tests because we observed unequal variances between factor combinations in our results [53] . For
Experiment 2, sensitivity analysis was also performed to gain insight into determining the number of user ses-sions, minimum session length, and the number of resulting clusters for the improvement of cluster recovery. 5.1. Effects of representation schemes with Web site-specific factors
In Experiment 1a, the three representation schemes (frequency-based, transition-based, and precedence-based), along with Web site-specific factors, were tested on the K-means algorithm with Euclidean distance measure (KME). The mean values in Table 3 show that for any given factor combination, except for the one case shown in bold, the transition-based representation scheme always performed the best and fre-quency-based representation performed the worst in terms of mean CRR. It can be explained that the Markov model we assumed when generating sequences can be best represented by the transition-based sequence matrix, and thus transition-based representation performs better than precedence-based representation. How-ever, if we had assumed a different model for Web users X  behaviors which emphasized precedence, the result would have been different. The overall ANOVA from the four-factor design (3 3 3 3 with representa-tion, K , M , and R ) confirmed that representation scheme has a significant effect on CRR ( F
Tamhane X  X  T2 test also showed that all representation schemes differ from each other significantly ( p &lt; 0.001) in mean CRR values (transition-based: 0.558, precedence-based: 0.435, frequency-based: 0.389).
In the overall ANOVA result, not only the main effect for representation scheme but also many interaction effects (all two-way and some higher order interaction effects involving representation scheme) were shown to interaction effects. We instead conducted three individual 3 3 3 ANOVAs and reported their results in
Table 4 , in order to understand the performance of each representation scheme more closely with the other three Web site-specific factors  X  K ; M ; R  X  .
The individual ANOVA results in Table 4 show that all main effects (number of pages, number of MCs and average MC similarity) for CRR are significant for all three representation schemes applied.
Transition-based representation is not only preferable to other representations with respect to CRR, but it also differs from others in terms of effect sizes. Although the ANOVA result showed that the mean CRR of transition-based representation was significantly different ( F effect size measured by g 2 p was small compared to those for frequency-based ( F itself accounted for only 10% of the overall (effect + error) variance. The effect size of the number of MCs was smaller  X  g 2 p  X  0 : 49  X  than the effect size of others  X  g 2 CRR deteriorates, as seen in Table 4 .

The interaction between the number of MCs and MC similarity was significant at p &lt; 0.001, and the effect may thus infer that using transition-based representation alleviates the deterioration caused by the number of MCs if the similarities between MCs are low enough.

The results of Experiment 1a showed that the transition-based representation scheme should be used if dis-tinguishable Markov models exist between Web user clusters, i.e., if dissimilar MCs are present in the Web usage data. Given that Markov models are frequently assumed in characterizing the Web user X  X  navigation behavior, the common Web usage mining practice of analyzing only the frequency of visits to Web pages must be replaced with full consideration of sequential visits; this improves performance in finding the true Web user clusters. 5.2. Effects of clustering methods with Web site-specific factors
In Experiment 1b, K-means algorithms with the four distance measures (KME, KMP, KMC, and KMF) and the hybrid algorithm (FAK) were tested with Web site-specific factors. Table 5 shows that the mean CRR differs not only by the Web site-specific factors but also by the clustering method. FAK was on average the best clustering method (shown in bold) in most conditions generated by Web site-specific factors. In addition, comparing overall performance (the first column of Table 6 ), the five methods were ranked in descending order as follows: FAK, KMF, KMP, KMC, KME.

The overall ANOVA from the four-factor design (5 3 3 3 with clustering method, K , M , and R ) con-firmed that clustering method has a significant effect on CRR ( F test is summarized in Table 6 . The FAK algorithm showed better performance than KMF, which uses random centroid initialization, but there was no statistical significance. FAK did show significantly better performance than KMP, KMC, and KME at p &lt; 0.05, p &lt; 0.001 and p &lt; 0.001, respectively. We may thus conclude that the use of FAK, which combines fuzzy dissimilarity for superior cluster recovery and fuzzy ART for better selec-tion of initial cluster centroids, significantly improves cluster recovery performance.

In the overall ANOVA result, not only the main effect but also many interaction effects involving clustering method were shown to be significant at p &lt; 0.05. Thus, we conducted five individual 3 3 3 ANOVAs and reported their results in Table 7 in order to understand the performance of each clustering method more clo-sely with the other three factors  X  K ; M ; R  X  .
 the method used. For any clustering method, MC similarity has the largest effect size, followed by number of
MCs and then by number of pages. Interestingly, the effect size of the interaction between MC similarity and the number of MCs was larger than that of the number of pages alone, except for KME. 5.3. Effects of clustering methods with WUM-specific factors
Unlike the result from experiment 1b showing that FAK is superior to KMP, the mean CRRs for KMP sometimes showed marginally higher values than FAK as shown in Table 8 . The overall ANOVA from the four-factor design (5 3 3 3 with clustering method, N , L ,and h ) still showed that clustering method has a significant effect on CRR ( F 4,2699 = 501.8). The Tamhane X  X  T2 test result suggested that FAK, KMP, and KMF are superior to both KME and KMC in terms of mean CRR, but the differences in mean CRRs between FAK, KMP, and KMF were not significant. All two-way interaction effects involving clustering method were shown to be significant at p &lt; 0.01, which led us to conduct five individual 3 3 3 ANOVAs, as well as the sensitivity analysis, with the three WUM-specific factors ( N , L , h ).
 Table 9 shows the five individual ANOVA results of WUM-specific factors on CRR, as per Experiment 2.
Among the independent variables, minimum session length is shown to have the largest effect size, regardless sitivity of minimum session length on CRR when the number of clusters is set at 6 and the number of user sessions at 5000. It may be interpreted that WUM managers should consider longer sequences in their Web user cluster recovery no matter what clustering method they use. However, as mentioned above, using longer sequences in Web user cluster recovery has to be considered carefully because the number of user sessions used for cluster recovery decreases quickly as minimum session length increases. In the sensitivity analysis of minimum session length, shown in Fig. 4 , the CRRs of KMP and FAK (the two best methods) reach 0.8 until minimum session length becomes 6 at a constant increasing rate; but little performance gain is observed beyond a minimum session length of 8. Fig. 4 also shows that FAK is superior to other clustering methods except for cases with larger minimum session length.
 this factor was not statistically significant for KME, KMC, and FAK. Even in an initial sensitivity analysis, using the number of sessions ranging from 1000 to 5000, we were unable to find a visible relationship between the number of sessions and CRR. However, when we examine a small number of sessions at smaller intervals (i.e., 100 X 1000), an increasing pattern for CRR with respect to the number of sessions was observed (see
Fig. 5 ). This increasing rate was more noticeable for the three best performing methods, FAK, KMP, and
KMF. From the perspective of WUM managers, requiring a small number of user sessions in recovering clus-ters is clearly desirable. FAK X  X  performance was not only shown to be adequate in this respect but also supe-rior to other clustering methods regardless of the number of sessions.

Number of clusters was a significant factor for KME, KMP, and KMC showing the effect size of from 6 to 15 while minimum session length is set at 5 and the number of sessions at 5000, showed an inter-esting result (see Fig. 6 ). Cluster recovery worsened as the number of clusters increased from 6 (which equals the number of MCs) for FAK and KMF. In contrast, there was a slight performance increase for KMP when the number of clusters became larger. KME also showed visible improvement, but the performance was much worse than that of FAK or KMF. This result may imply that FAK and KMF are more suitable when the number of MCs is known and that KMP is a candidate for use when the number of presupposed clusters is not known a priori . It was also indicated from the mean analysis shown in Table 8 that FAK is generally the best method when the number of clusters is 6 but KMP occasionally outperforms FAK when the number of clusters is set at 9 and 12. 6. Comparisons with other sequence clustering approach
In this section, we first describe non-vector-based distance measures used for clustering sequences in other studies. We then define three additional clustering performance measures: total entropy, average Levenshtein distance, and average cosine dissimilarity. Using these performance measures and distance measures, we apply several clustering methods, including the ones proposed in this study (e.g., FAK) and other methods selected tering methods to a real-world data set and compare their performances. 6.1. Non-vector-based distance measures
The distance measures described in Section 3.2 are all vector-based, although sequence representation pro-posed in Section 3.1 (e.g., using transition-based sequence matrix) enables sequence-based clustering of Web user sessions. Having a vector-based distance measure is particularly important because the K-means algo-rithm, which is computationally efficient, requires a definition of centroid in order to partition user sessions.
Several studies on clustering sequences, however, use non-vector-based distance (or similarity) measures that are developed primarily for sequential pattern mining. Sequential pattern mining often involves the following techniques: (1) finding the longest common subsequences, (2) finding the number of edit (insertion, deletion, and substitution) operations required to transform one sequence to another, and (3) comparing the subse-quences between two sequences. The distance measures described below utilize these techniques in clustering sequences.

For the purpose of clustering sequential data, Kumar et al. [23,24] proposed using a similarity named S
The S 3 M similarity between sequence s 1 and sequence s 2 and is thus defined by where p is the weight to sequence similarity; LLCS( s 1 , s tween two sequences s 1 and s 2 ; Len ( s ) is the length of sequence s , j s in the two sequences; and j s 1 [ s 2 j is the number of unique items in the two sequences. Since the value of
S
M is always between 0 and 1, with 0 indicating no common subsequences or set of items between two se-quences and 1 indicating that two sequences are identical, we simply use d distance between sequence s 1 and sequence s 2 and call it SSD (sequence and set distance).

The second non-vector-based distance measure we consider is edit distance, also known as Levenshtein dis-tance. We consider using weighted edit distance (WED) for clustering sequences, as is used by Hay et al. [22] and Kum et al. [34] . WED assigns different weights to deletion, insertion, and substitution operations required, in order for one sequence to transform into another. WED is defined by where w A is the weight for edit operation A , where A 2 { del , ins , sub }, and n used to transform one sequence to the other. The WED between two sequences can be computed via dynamic programming [55] .

The third distance measure selected for comparison is viewing order based distance, which is the counter-part of viewing order based similarity. Xiao et al. [18] used viewing order based (VOB) similarity based on feature space-based path angle outlined in Shahabi et al. [19] . Viewing order based similarity is calculated by comparing all subsequences of two sequences, and is defined by where m = min{ Len ( s 1 ), Len ( s 2 )}; h s 1 , s 2 i m length m  X  , which is defined by and Q 1 t and Q 2 t are the sets of all subsequences with length t for sequence s
Because VOB similarity is always between 0 and 1 inclusive like the S d
VOD ( s 1 , s 2 )=1 sim VOB ( s 1 , s 2 ) as a distance between sequence s order based distance). 6.2. Performance measures
For a clustering method, the quality of clusters can be measured via either an external quality measure or an internal quality measure. External cluster quality measures are intended to evaluate how well a clustering method performs by comparing the clusters formed by the method to the true clusters. CRR is such a measure, and it is an appropriate measure in our problem context because the main objective is to recover the true clus-ters. Another external quality measure we consider for the comparison of clustering methods is entropy.
Guralnik and Karypis [32] adopted this measure for the evaluation of cluster quality. The entropy of cluster l is calculated as where p lk is the probability of a sequence from cluster l resulting from the clustering algorithm belonging to Unlike external cluster quality measures, internal cluster quality measures do not require known clusters.
They usually measure the compactness of clusters (i.e., how objects in the same cluster are close each other) or less concern in our problem context in which we are grouping similar Web user sessions. Therefore, we con-sider two internal quality measures that are focused on cluster compactness. The first internal quality measure is average Levenshtein distance (ALD), which is defined by where d LEV  X  ^ s l ; s i  X  is the Levenshtein distance between the cluster representative ^ s cluster representative can be obtained by finding a sequence that minimizes the sum of distances between itself and other sequences in the same cluster. ALD can be interpreted as the average number of edit operations required to transform a sequence into its corresponding cluster representative. The above definition is slightly different from the definition used in Kumar et al. [23,24] , in which ALD is the simple average of average LDs for each cluster. That is, their ALD is not weighted by the number of clusters. From our pilot experiments, we observed that clusters having small number of sequences decrease ALD significantly using their definition, and thus we use the overall average distance as defined in Eq. (16) .

In order to measure cluster compactness, we use another internal quality measure called average cosine dis-tance (ACD), which is similar to the one used in Guralnik and Karypis [32]
For the cosine dissimilarity calculation, we use the transition-based sequence matrix we introduced in Sec-tion 3.1 . While ALD is expected to be lower (better) for non-vector-based clustering methods using SSD,
WED, and VOD, all of which in one way or another consider sequence edit operations, ACD is expected to be lower (better) for vector-based clustering methods using a transition-based sequence representation such as FAK. 6.3. Clustering algorithms and experimental setup
For vector-based distance measure, we select three K-means-based algorithms (FAK, KMP, and KMC) and three hierarchical clustering methods (single linkage, complete linkage, and average linkage) for the com-parison of performances. For non-vector-based distance measures (SSD, WED, and VOD), we use SeqPAM developed by Kumar et al. [23] , a sort of partition around medoids (PAM) modified for sequence clustering.
SeqPAM algorithm uses the S 3 M similarity measure, but other similarity measures can be used instead. A slight modification, such as converting total benefit function in SeqPAM to total cost function, allows the use of any distance measures we described above.

We conduct three experiments for the comparison of clustering methods: two with synthetic data sets and one with a real-world data set. Due to the high cost of computing pair-wise distances for ALD and ACD, we fix the values for both Web site-specific factors and WUM-specific factors for all three experiments.
For the synthetic data sets used in the first experiment, we generate Web user sessions (sequences) following the procedure described in Section 4.1 . We use M = 14, K = 6, and R  X  0 : 4 for Website-specific factors. For
WUM-specific factors, we use N = 500, L = 6, and h = 5. We limit the number of sessions ( N ) to 500 because of the scalability issue resulting from the N N distance matrix computation required for hierarchical clus-tering algorithms. Although using hierarchical clustering methods is feasible with this limited number of ses-sions, using VOD was found to be too computationally expensive to include in this experiment. Note that specifying only the minimum session length ( h ) allows a long sequence that require intensive computations in generating and comparing subsequences, as can be inferred from Eq. (13) . Hence, for the second experi-ment, synthetic data sets are generated so that all sessions have a fixed session length of 5 ( h = 5) while the values for all other Website-specific and WUM factors are maintained.

The real-world data set that we use for the third experiment is the one available at UCI dataset repository entire day of September, 28, 1999. Web users X  visits are recorded at the level of page category (e.g., frontpage, news, tech) and are recorded in time order. From the entire 989,818 sessions, we use 44,062 sessions experimental setup that Kumar et al. [23] used. 6.4. Comparison of clustering methods The result from the first experiment using synthetic data sets with variable session length confirmed that
FAK performs the best in terms of external cluster quality measures. Table 10 shows the mean performance of 10 synthetic data sets. Both the CRR and the total entropy of FAK are significantly better than other meth-ods. FAK also shows performance that is statistically equal to that of the best performing KMP with respect to ACD. In terms of ALD, using WED with equal weights was significantly better than other methods. This result is quite expected because using WED with equal weights is basically clustering using the Levenshtein distance which is the primary constituent of ALD.

Using vector-based distance measures along with a K-means-based algorithm generally seems to be effective in getting better ACD performance. Among hierarchical clustering methods, the performance of the average linkage method was comparable to those of KMP and KMC. Single linkage method and complete linkage method, however, performed worst. Both methods tend to generate clusters with small numbers of sessions, which may be caused by overlapping cluster boundaries. We have to stress that, unless MC similarity is 0, there is a chance that even identical sequences belong to different true clusters.

In general, non-vector-based distance measures performed poorly in terms of ACD. This may be because these distance measures are designed to discover patterns in sequences rather than to group similar sequences based on transitions from one page to another.

The result from the second experiment using synthetic data sets with fixed session length shows a similar result to that of the first experiment as shown in Table 11 . FAK shows the best or an equally best performance in CRR, total entropy, and ACD. But, performance differences between methods were less than those seen in the previous experiment using variable length sessions. For example, the average linkage method shows no significant difference compared with FAK with respect to CRR and total entropy. Using WED was again shown to be effective in getting lower ALD. A general observation from the first and second experiments is that it is better to consider longer sessions for better CRR and better entropy. In particular, FAK improves its CRR performance from 0.381 to 0.657 and reduces its total entropy from 1.478 to 0.913 when longer ses-sions are included. The ALD values in the second experiment are significantly lower than those in the first experiment because it requires more edit operations for a long session to transform into a short session, or vice versa.

The result from the third experiment using a real-world data set was similar to that of the second experi-ment, as shown in Table 12 . Although statistical tests were not conducted for comparison of different methods due to the size and number of the data set, we were able to observe once again that using non-vector-based distance measures is better than using vector-based performance in terms of ALD. Similarly, we observed that using vector-based distances is better than using non-vector-based distances in terms of ACD. FAK did not perform the best in terms of ACD, but it was comparable to KMP and KMC. Results from our previous experiments using synthetic data indicate that FAK performs significantly better in terms of CRR and total entropy when ACD is comparable to other measures using fixed session length. Therefore, cluster recovery performance measured by CRR would have turned out the best in the end, if we had known the true clusters (groups of Web users who share common behaviors). 7. Conclusions
In this study, a general sequence-based Web usage mining methodology was developed by utilizing new sequence representation schemes in association with Markov models. While the previous work in sequence mining focused more on sequential pattern discovery, our study addresses the use of sequential information in clustering Web users. Our new methodology was tested by examining cluster recovery rate as a clustering performance measure with different sequence representations and different clustering methods. It was con-firmed that identifying Web user clusters through sequence-based clustering methods helps recover the Web user clusters correctly. As more sequential information is given, more accurate cluster recovery becomes pos-sible, as shown by our Experiment 1a which compared different representation schemes.

To answer the question regarding whether a sequence-based clustering method can recover true clusters, we developed a new comprehensive evaluation framework based on a replicated clustering procedure that can be used to compare the performances of various clustering methods based on different representation schemes, distance measures, and clustering algorithms. We also identified and investigated several factors that affect cluster recovery performance. Two types of factors were examined through ANOVA experiments-one that represents a Web site X  X  characteristics and another that WUM managers can control.
 In general, sequence-based clustering can recover true clusters well when a Web site has a small number of
MCs and when Web user clusters are dissimilar to each other, although each clustering method showed dif-ferent characteristics and performances under different factor combinations. One managerial implication would be that a thoughtful design of Web structure, within which the navigation paths critical to differentiate
Web user clusters are reinforced (e.g., having hyperlinks relevant to one specific Web user group), can lead to a decrease in MC similarities and in turn can improve cluster recovery. After low MC similarities are achieved through Web site restructuring, a WUM manager can further improve cluster recovery by controlling WUM-specific factors.

The experimental result for WUM-specific factors showed that minimum session length is the most signif-icant factor affecting clustering performance. However, WUM managers should be careful when discarding sessions based on section length; if the minimum session length is too large, too few user sessions will be included due to Zipf X  X  Law. Having more sessions increases clustering performance. But, beyond a certain threshold value for the number of sessions, the performance gain was negligible. This was also the case for minimum session length because performance does not improve by increasing the minimum session length value when it is already set at a high number. The Monte Carlo simulation and replicated clustering approach introduced in this study enables managers to find these threshold values for a given Web site.
While demonstrating the use of our experimental evaluation framework to compare sequence-based clus-tering methods, we developed a new distance measure named fuzzy dissimilarity. The KMF algorithm, which uses this new distance measure, performed as well as KMP, which is based on the projected Euclidean distance measure. Furthermore, under various Web site-specific factor levels, FAK, the hybrid clustering method developed in this study by utilizing fuzzy dissimilarity and fuzzy ART neural network performed better than other clustering methods. FAK also showed superior performance to other methods under various WUM-spe-cific factor combinations when the number of clusters was set at the number of MCs (true clusters). Its cluster recovery performance worsened slightly when the number of MCs was set higher than the number of true clus-ters. Although this weakness may make FAK a less preferable clustering method, FAK used in this study was forced by design to generate a specific number of clusters for comparison with other methods. Given that
ART-based clustering algorithms have the inherent capability of discovering an appropriate number of clus-ters (without having to pre-specify the number of clusters), a modification in the first phase, such as involving fuzzy ART in determining the number of resulting clusters, may improve the clustering performance and also enhance feasibility of using FAK.

We also compared the clustering methods we proposed in this paper with existing methods, in particular those using non-vector-based distance measures. Using vector-based distance measures along with transi-tion-based sequence representation showed significantly better performance for cluster recovery and entropy than using non-vector-based distance measures that are designed to discover and analyze sequential patterns. The opposite was true for formation of clusters with similar sequential patterns (measured by average
Levenshtein distance). The comparison of methods using real-world data also hints that cluster recovery and entropy can be improved with our proposed clustering approach.

There are several areas for future research. One area is evaluating clustering performance in an integrated manner for problems such as link prediction and customer relationship management. It is evident that better cluster recovery enables more accurate prediction of a Web user X  X  next visit (link) if the user X  X  cluster can be correctly identified. A better target marketing performance can also be accomplished if the Web user clusters contain useful information about Web users X  purchase decisions. It would be interesting, however, to see whether the effect of the factors that we examined becomes significant in such problem contexts. For example, a link prediction performance may be less sensitive to MC than our cluster recovery performance. Also, the use of precedence-based representation may turn out to be as effective as transition-based representation at predicting purchase conversion. Although the cluster recovery performance that we investigated in this study is better evaluated with synthetic data, the performance for Web users X  link prediction or purchase conversion prediction can be best evaluated with real-world data.
References
