 Web services are self-contained, self-describing modular applications that can be published, located, and invoked across the Web. The Web is moving toward a collection of interoperating Web services. Achieving this interoperability requires dynamic discovery of Web services. The Web services architecture supports the discovery and binding of services. Web Service registries maintain information describing Web Services produced by service providers, and are queried by service requesters. These registries are important to the ultimate utility of the Web Services and must support scalable, flexible and robust discovery mechanisms. Traditionally, registries have a centralized architecture consisting of multiple repositories that synchronize periodically. However, as the potential number of Web Services grows and becomes more dynamic, such a central approach quickly becomes impractical [1]. Meanwhile, Web Services discovery is further complicated by the natural tendency of the environment to evolve over time number of decentralized approaches have been proposed and some systems based on P2P technologies and ontologies have been used to publish and inquire Web Services descriptions [7, 8]. 
In this paper, we present a methodology for establishing some dynamic, scalable, discovery. The proposed infrastructure named Stratus can be executed on top of a set layers: the Data layer, the Communications layer and the Operator layer. 
The rest of this paper is structured as follows. Section 2 describes the layered architecture of Stratus and some key technologies including Dynamic Tuple Model, topology constructing approach and unified publication and inquiry API, etc. Section 3 summarizes related works. Section 4 concludes and outlines the future works. 2.1 Layered Architecture Stratus is divided into three different layers: the Data layer, the Communications layer and the Operator layer. The Data layer is comprised of the Web Service registries that are parts of Stratus . The communications layer allows all the distributed components to communicate with each other. The Operator layer enables Registry Peers to support unified interfaces to publish and inquire Web Services. The layered architecture is shown in Fig.1. 1. Data Layer As the registries in Stratus may have two types of heterogeneity in descriptions: structural heterogeneity and semantic heterogeneity. Therefore, we use tuple model to contain different Web Services descriptio ns. For broad acceptance, adoption and easy integration of legacy service descriptions, an HTTP hyperlink is chosen as an maintenance problems, we introduce some time stamps to Dynamic Tuple Model. 2. Communication Layer Registry Peer runs on top of Web Service registries with each proxy controlling a registry. The Communication Layer is used to establish peer community and manage communication between different registries. Naive registries could be categorized based on business domains (e.g. NAICS, ISO3166, GeoWeb). Each business domain is represented as unique name. A Service Domain is usually composed of different registries which have not only similarities but competing business purpose as well, which provides a simplified but exhaustive view of the Web Services registry community, enables logical partitioning of all Web Services. 3. Operator Layer This layer provides simplified access to regi stry data and protects users from intricate details in registry. Even if an organization has its own implementation of Web suitable API as the operator layer. Stratus defines unified publication and inquiry API to access Web Services registry. 2.2 Dynamic Tuple Model Web Services can be described in different ways, such as WSDL, OWL-s, etc. Furthermore, these description documents are often maintained by different data model. As compared to UDDI [2] hierarchical model, Dynamic Tuple Model for maintaining service information is more flexible (by containing different description languages), more efficient (by eliminating data elements complexity), and more simple. Definition 1 (Dynamic Tuple Model). A dynamic tuple is a soft state data container, where  X  X ervice Link X  is HTTP URL for a description document,  X  X ame X  is service name,  X  X imestamps X  is a finite set of time,  X  X elation X  is a finite set of service relations,  X  X etadata X  is a simple structured or semi-structured document(e.g. secure digital XML signature, contact). 
For reliable, predictable and simple distri buted state maintenance, registry tuples refreshed by a stream of timely confirmation notifications from service provider. In according to timestamps, a tuple can be in one of three states ( unknown , not cached or cached .) and transition automatically. 2.3 Double-Overlay Topology Stratus adopts double overlay networks. The upper layer is a backbone consisting of Border Registry Peers (BRP); the lower layer has service domains with each domain consisting of Registry Peers (RP). A dynamical topology construction based on peer trustworthiness and consistent hash in upper overlay network. Therefore, the upper topology is more stable than traditional structured DHT network. Yet, the lower overlay network is unstructured for adapting to registry peer dynamic and autonomic characteristics. Fig.2 depicts a double-overlay network of Stratus . (1) Each Border Registry Peer acts as an entry point for registries to join a Service Domain . It coordinates admission of each registry in to the Service Domain . Based on Chord protocol [4], Border Registry Peers build th e structured network. Each peer maintains routing information of about O (log N ) other peers, and resolves all lookups via O (log N ) messages to other peers. Meanwhile, Border Registry Peer is aware of inter-domain request. (2) Registry Peers run on top of Web Service registries with each inquiry. Based on Gnutella protocol [5], Registry Peers communicate with each other in Service Domain . Each Registry Peer is composed of two engines: communication communication engine is responsible for communication and collaboration with its neighbors in the peer-to-peer network. Meanwhile, it receives and responds service queries from service requesters. The local query engine receives queries from the communication engine and queries the registry for matching services. 2.4 Unified Publication and Inquiry API Stratus maintains a collection of information about Web Services, including service links, service name and simple description, etc. Each Registry Peer offers unified publication and inquiry API, which allows service providers to publish service information and service requests to inquire service. Furthermore, it shields the implementing complex of different query languages in Web Services registries. It is unreasonable to assume that a single global standard query mechanism can satisfy all present and further needs of a number of registries. Consequently, unified publication and inquiry APIs are deliberately separated and kept as minimal as possible. Besides, finding service with approximate or partial element values might be sufficient. 
The three Stratus interfaces and their operations are summarized as following: publish(tuple), inquire(tuple) and XML getDescription(URL).Within a tuple, a tuple Conversely, inqure(tuple) interface provides powerful XQuery mechanism. XQuery can dynamically integrate external data sources via getDescription(URL) operation, which can be used to process the XML results of remote operations invoked over HTTP. The centralized approach includes UDDI, where registries are used to store Web maximum number of Web Services with keyword match, the approach does not scale and has performance bottleneck. Conversely, a decentralized approach for the Web Neuron [7] system constructs a virtual share space which allows the Web Services to be described in arbitrary forms, and can be executed on top of Tornado. It guarantees that all existing data elements matching a query will be found at bounded cost. Yet, it cannot support range and fuzzy queries . MWSDI [8] system makes use of ontologies and Gnutella protocol to organize Web Service registries and addresses scalability of discovery architecture. It lacks efficient query propagation algorithm and topology optimization policies. These systems cannot keep soft state for each query. 
We compared latency, space overhead and robustness of Stratus with UDDI. (1) Fig.3 shows the effect of number of peers on latency. Experimental results number of Stratus are in approximately logarithmic relationship with N . (2) Fig.4 shows that the space overhead of Stratus is between 24100 and 25800 bytes, while overhead of UDDI Business Registry between 2.3  X  10 6 and 5.9  X  10 7 bytes. Space overhead of Stratus is much better than that of UDDI. (3) UDDI does not scale and single performance bottleneck. We test the ability of simultaneously. Considering 4000 peers with each peer maintaining 3 pieces of service descriptions, we randomly choose a part of the peers to fail. After the failures queried correctly. Fig.5 depicts the effect of peer failure on service search. Some key features of Stratus are: (1) Using Dynamic Tuple Model to contain different service descriptions and keep soft state ; (2) Using double overlay network to organize all registries. Besides, we have tested the scalability and discovery efficiency Issues not covered in this paper that are planned as future enhancements are: (1) query propagation algorithm; (2) load distribution according to registry capabilities. 
