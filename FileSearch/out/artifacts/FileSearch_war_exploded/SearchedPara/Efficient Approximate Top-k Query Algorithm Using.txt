 Exact top-k query processing has gained more and more attention recently because of uninteresting answers that are resource-consuming. intriguing to answer approximate top-k query instead of exact top-k query. which is based on the TA algorithm. Based on TA  X  , Theobald et al. [6] introduced a target data object in an approximate manner. Approximate top-k query processing has been also studied in peer-to-peer environments. The KLEE system (Michel et al. [2]) addressed this problem, where distributed aggregation queries are processed based on index lists located at each peer. approximate TA  X  algorithm. model formally and review the TA  X  algorithm in Section 2. In Section 3, we describe our method on setting up the cube index and then analyze its time complexity. Based on these, we show our algorithm CIA and analyze its cost in Section 4. Thereafter, we paper and introduce our future work. [3]. s monotonic: weighted summation function is increasingly monotonic. Exact top-k query is to find defined a  X  -approximation to the top-k answers: coefficient . rithm, based on the threshold algorithm (i.e. TA). TA  X  is described in Fig. 1. Threshold Algorithm with  X  -Approximation (TA  X  ) Pre-computing Phase: descending order by the s i (x j ) value. 
Computing Phase: objects whose overall scores are the highest among all the objects seen so far. fine the threshold value  X  to be  X  = f (s 1 , s 2 ... s m ) .. 3: Halt when  X   X  M k  X   X  , where M k = min{ f (x) | x  X  Y }. called cube index to support such  X  -approximation top-k query processing. 3.1 Description of Cube Index ( s and f(p) is p  X  X  total score. Now we define a  X  -approximation to the top-k answers. mation coefficient . fying s j (p 1 ) &gt; s j (p 2 ) . gregate monotone function . tions of aggregate monotone function and dominate .  X  dominated by any point in D . values of every dimension are all lowest in the hypercube. 0.6] is (0.2, 0.1, 0.5). Observation 3.2. All other points in a hypercube dominate the bottom point . tions of dominate and bottom point .  X  which is described as follows: We call this partition method the  X  -cube partition . values in every dimension are all 1  X   X  , that is, the point (1 and only if bp 1 is a neighbor of bp 2 and bp 1 dominates bp 2 . only if bp 1 is a neighbor of bp 2 and bp 1 is dominated by bp 2 . the 0 th set S 0 . belong to the hypercube whose bottom point dominates the others X  bottom point . ciated point set S i as well as its superiors  X  ids and inferiors  X  ids. 3.2 Complexity Analysis of  X  -Cube Indexing Method which is done in the pre-computing phase. the points in database into their corresponding sets. the following two simple formulas: b. s j (bp X ) = s j (bp) for each j  X  {1, 2 ... m } and j  X  i . There are 1 and inferiors of each bottom point is 1 corresponding bottom point bp i satisfies that for each i  X  {1, 2 ... m }, points in database into their corresponding sets is O( mn ). 
Therefore, the total time complexity in the pre-computing phase is 1 4.1 Description of Cube Index Algorithm approximation top-k query: the Cube Index Algorithm (i.e. CIA), which is described by the pseudo-code in Fig. 2. Cube Index Algorithm (CIA) Pre-computing Phase: Execute the normalization then set up the  X  -cube index on the database. Computing Phase: candidate list according to the total scores and T is a temp set. 2: if S 0 .size  X  k then 3: add all points in S 0 into Y 4: else 5: Selectively Add k points in S 0 into Y . 6: bp i = sky point . 7: while ( Y.size &lt; k ) do 8: for each inferior inf of bp i do 10: Access inf and insert it into CL 11: else 12: Continue. 13: if CL.size &gt; k  X  Y.size then 14: Only keep the first k  X  Y.size points in CL . 16: if S i .size  X  k  X  Y.size then 17: add all points in S i into Y 18: else 19: Selectively Add k  X  Y.size points in S i into Y . 20: Return Y . from the points in skyline of S i or others ways. 4.2  X  -Approximation of Cube Index Algorithm as follows. 3.1, the sky point is the top-1 in the set of bottom points . of bottom points and is supposed to be moved to set T from CL . T.size+(k S  X  Y , where bp  X  bp j , S i  X  Y . S  X  Y , where bp  X  bp j , S i  X  Y .  X  way. approximation . we also have f(bp y )  X  f(bp z ) and f(y)+  X   X  f(z) . 4.3 Cost Analysis of Cube Index Algorithm points accessed in the query. bottom points . complementary set of B 2 .
 apagoge. the sky point . with the algorithm. B  X  T , bp must be accessed, which contradicts the assumption that bp  X  B B tion has no chance to be true. the algorithm. In this section, we conduct extensive experiments to evaluate the performance of our algorithm. Our algorithm is implemented in C/C++ language. We perform our expe-riments on an 8-CPU server with 8GB shared memory and each CPU is 4-core Intel Xeon E5430 2.66GHz. 5.1 Turning  X  -Approximation into  X  -Approximation there are f(y)+  X   X  f(z) . So we have (1 ) ( ) ( ) score in set Y so that  X  = , or  X  = f (y)  X   X  .
 then the TA  X  runs on  X  -approximation of as the criterion of approximation to run our tests. 5.2 Evaluation Metrics In our tests, the following measures are collected for efficiency comparison [6]: accesses : the number of items accessed in the query without duplication; exact top-k result; proximate top-k query; top-k results and their true ranks in the exact top-k result, i.e., truerank(i) is the i th returned object X  X  true rank in the exact top-k result. of precision . 5.3 Description of Datasets We do experiments on two synthetic datasets. All generated local scores belong to the default value of  X  . with large value of k (2000) to observe the effect of k on the performance. Nino dataset contains 93935 objects and FC dataset contains 581012 objects. El Nino ize the dataset with the formula: () i st Min 5.4 Experimental Results every dataset. Compared with the TA  X  , CIA reduces more than 99% accesses during the query process. Apart from this, CIA is also dominant on other evaluation metrics, a little inferior to TA  X  on these aspects. 
The experimental results shown in Fig. 4 when k = 2000 on each dataset are similar dataset except FC. queries with high precision. CIA is not dominant on all the evaluation metrics over some datasets, like FC in our rior to TA  X  on the number of accesses but have little advantage on other respects.  X  -cube index on the dataset, we proposed our algorithm, the Cube Index Algorithm to results on both generated and real-world datasets show that our algorithm owns higher accuracy with less cost, compared with TA  X  . 
In the future work, we plan to turn our algorithm into exact algorithm based on the cube index ideas. China under the grant [No. 60873210]. 
