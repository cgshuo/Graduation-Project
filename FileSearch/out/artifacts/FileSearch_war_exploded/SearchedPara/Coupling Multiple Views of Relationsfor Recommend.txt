 Bin Fu 1 , 2 , Guandong Xu 1( Recommender system is a type of technology to overcome the information over-load problem by estimating users X  preferences and finding potentially desirable items for them [ 1 ]. For instance, online bookstore Amazon would infer users X  pref-erences by analyzing the explicit ratings they have given, and then recommend to them some books that might catch their interests. Currently, recommender system has attracted extensive attention form both of academia and industry, and various methods have been proposed by researchers for recommending items of different types, e.g., movies [ 2 ], books [ 3 ], and music [ 4 ], etc. and extended extensively [ 5 ]. The underlying assumption of CF is that similar users/items. Roughly speaking, User/item relation can be measured using differ-items X  attributes [ 9 ], user-generated tags [ 10 ], and reviews [ 11 ], etc. data, e.g., historical ratings, to learn user/item relations. The potential issues include: (1) Each type of data might suffer the insufficiency problem. Figure 1 is a toy dataset for movie recommendation. It shows that: a) the rating matrix is extremely sparse, and b) an user/item is characterized by few attributes. Hence similarities and relations learned based on such kinds of data might be inappro-priate. (2) Each type of data only offers a partial view of the underlying user/item relation, whereas multifaceted factors might be involved. For instance, if user follows other users X  suggestions when rating items, there might be multiple pos-similar interest , e.g., rating movies similarly, or they are friends in social net-works, etc. Therefore, it is more advisable to couple multiple relations measured from different aspects to approximate the underlying user/item relation. tion (MF) framework [ 12 ]. The key tasks include: (1) Couple multiple views of relations measured from different types of data to approximate the underlying user/item relation. The objective of coupling them together is to capture a bet-ter understanding of user/item relation. Similar motivation has been employed in multiple kernel learning, in which different kernels correspond to different notions of similarity [ 13 ]. (2) Incorporate user/item relation in the matrix fac-torization model. To this end, we propose a new recommendation framework based on the MF model, and it can be characterized as follows: tions are coupled in a supervised learning framework. Specifically, for users and u j , k different data sources are exploited, thus we get the underlying relation between u i and u j , i.e., s ij . Next, we approximate as s optimal parameter  X  of function f by minimizing a given loss function. Likewise, the same strategy is applied to items. (2) Secondly, in order to utilize the user/item relation in MF framework, we assume that each user u i latent factor vector  X  P i is determined by two compo-P cies between users. Here S is a matrix that indicates the relation values between all possible pairs of users. The same strategy is applied to items. We finally compare our model with other state-of-the-art methods on datasets with different types of data to compute user/item relation respectively. To sum-marize, our main contributions are as follows.  X  We propose an innovative model to exploit multiple types of auxiliary data and couple multiple measures of user/item similarity and relation in a super-vised learning framework.  X  We extend classical MF model to enable that relations between users/items can be exploited when learning each user X  X /item X  X  latent factor vector.  X  We conduct extensive experiments. The results validate the effectiveness of our model, and indicate its applicable scenarios.
 The remainder of paper is organized as follows. Section 2 briefly reviews the related work. Problem statement is given in section 3. In section 4, we describe our model in detail. Experimental design and results are presented in section 5, followed by the conclusions in section 6. 2.1 Compute User/Item Relation Using Different Types of Data According to the types of data source have been utilized to compute user/item similarity, related methods mainly fall into the following categories. (1) Utilizing historical ratings. The is the most common data have been inves-tigated in traditional CF technique. Two basic methods are user-based approach and item-based approach [ 2 , 5 ]. User-based approach tries to compute the user relation based on their past ratings, and item-based approach tries to compute item relation base on the ratings they have received. Cosine similarity and Pear-son correlation are the two main measures have been used to compute user/item similarity and relation. (2) Exploiting social networks. Social networks introduce explicit user-user relationship that can be represented as an asymmetric or sym-metric matrix [ 8 , 14 ]. The basic assumption is that users connected in a social network should have similar preferences. Based on this assumption, various mod-contributed information. As summarized in [ 17 ], various types of data generated by users have been explored, such as tags, multimedia content, reviews and comments, etc. User relation is defined by the similarity between corresponding content contributed by the users.
 2.2 Matrix Factorization (MF) Model MF model has been extensively investigated and extended recently for recom-mendation task. It essentially treats the recommendation as a matrix completion problem, and solve it by transforming the original rating matrix tiplication of two matrices P T Q ,thus r ij , i.e., the rating assigned to item user u i , can be approximated as r ij  X  P T i Q j . Here, a latent factor vector representing user u i and item v j P and Q are learned by minimizing a particular loss function.
 MF model. Some of above methods thus try to incorporate the use/item relation into MF model by assuming that similar user/item should have similar latent networks and historical ratings are explored in [ 16 ], etc.
 ods. The differences include: (1) Instead of determining user/item relation using a single type of data, our model utilize multiple data sources to measure differ-ent user/item relations and couple them together. (2) The weights of different measures and the ultimate user/item relation values are learned in a supervised learning framework, thus they could be optimal for current recommendation task. Based on MF model, we assume that each user/item X  X  latent factor should be dependent on other similar users X /items X  latent factors. Thus critical tasks include (1) Estimate the similarities between users/items, here similarity means the extent of user/item relation, we will use this term in following part. (2) Model dependencies between similar users/items in MF model. The targeted problem can be formulated as follows.
 similarity between user u i and u j . As stated before, user/item similarity can be measured from different aspects, e.g., similarity based on ratings, similarity based on connectivity in social networks, etc. We then treat these values as descriptive features of the ultimate user similarity. Formally, S U ij measures for u i and u j . f is a function that generates the final similarity and  X  is a set of parameters that need to be estimated. Since different measures are computed on different data sources, thus multiple types of data are explored. similarity, we can get Here v and v j ,and  X  are the parameters that need to be estimated.
 To model the dependency relations between users/items, we let denote users X  and items X  basic latent factors as in traditional MF model. However, P and Q should be updated due to the influence between similar users and items. Thus, u i  X  X  final factor vector  X  P i is  X  P i = g determines the final factor vectors. It is clear that  X  P users X  basic factor vector with respect to their similarities. Same strategy is applied to items, and we get  X  Q j = g ( Q, S V ).
 Finally, rating r ij is estimated as  X  r ij =  X  P i T  X  Q to design function f , g , and estimate the parameters &lt;  X , X ,P,Q &gt; elaborated in next section. 4.1 Multiple Views of Similarity Given a particular type of data, there are various ways to compute similarities between users/items. For example, given the rating matrix between u i and u j can be defined as the similarity between corresponding row R and R j. in R . Pearson correlation can be used to compute the similarity between these rows. There are other ways of measuring similarity given more definitions or more types of auxiliary data. We couple these measures using the framework shown in ( 1 ). The results of different measures are then fed into function f to generate the ultimate similarity value. In this paper, we choose the sigmoid function for f , since it is a differentiable function which makes the following learning process feasible, and its output range is [0, 1] that is natural for representing the similarity. The definition of f for determining user similarity is thus define as: Similarly, to learn the ultimate item similarity S V formula.
 The key problem is how to estimate the optimal values of parameters 4.2 Dependency Propagation Among Users/Items Due to the similarity, an user X  X  preference should be influenced by his neighbours, i.e., a set of similar users. Likewise, an item should also show common charac-teristics with other similar items. In other words, the latent factor vector of an users/item should be dependent on others X  with respect to their similarities. Let us focus on user firstly. In our model, each user u i an initial factor vector P i . Then, u i will get an ultimate factor vector the dependency propagation among similar users. We formulate this dependency propagation as follows: Where Nu ( i ) denotes u i  X  X  neighbours, a set of users who are most similar with user u i according to S U . It is shown that  X  P i is determined by two components, i.e., his initial factor vector P i , and his neighbours X  factor vectors. Here an adjustable parameter to control the influence of dependency propagation. Since each user depends on his/her neighbours, a dependency graph is actually formed. The dependencies are propagated over the whole graph, thus each user essentially is influenced by all other users directly or indirectly. For items, we can get a similar formulation. Given an item v j , its ultimate factor vector Here Nv ( j ) denotes item v j  X  X  neighbours that are most similar with it according to S V ,and  X  v is the parameter to trade off the two components.
 as r ij  X   X  P i T  X  Q j . By now, the whole process of our model is outlined, and a graphical illustration is given in Fig. 2 ,inwhich P i 1 ...k user u i  X  X  k neighbours, and Q j 1 ...k are factor vectors of item A
U =[ A uij ] n  X  n is a matrix, and its element A uij is the precomputed vector of similarity values for user u i and u j . Similarly, A V matrix, and A vij is the precomputed vector of similarity values for item v . Finally, &lt;  X , X ,P,Q &gt; are the parameters need to be estimated. 4.3 Parameter Estimation To begin with, we define the loss function which will be used in our model to learn the optimal parameters. Its definition is: here D is the training set that contains a set of ( u i ,v the already known r ij for pair of ( u i ,v j ).  X  is the parameter to control the influence of the regularization term, and ||  X  || F denotes the Frobenius norm.  X   X  , X   X  ,P  X  ,Q  X  that can minimize above loss function.
 in the process is to compute the partial derivatives of a single training instance X  X  loss with respect to the parameters. Without loss of generality, we show how to compute the partial derivative for a tuple ( u i ,v j ,r ij the loss function becomes: are computed as follows.
  X  in  X  , the partial derivative is Here |
Nu ( i ) | is the number of u i  X  X  neighbours, the remaining problem is Accordingto( 3 ), it can be computed as follows. As defined before, A uil is a vector of similarity measures for user A is the t th element of A uil .
 Similarly,  X  is a vector of parameters to determine item similarities Accordingto( 6 ), for any element  X  t in  X  , the partial derivative is: Here | Nv ( j ) | is the number of item v j  X  X  neighbours. According to ( 4 ), can be computed as follows. Here A vjl is a vector of similarity measures for item v j t th element of A vjl .
 partial derivative  X  X  ij / X  X  i is For any P l ( l  X  Nu ( i )),  X  X  ij / X  X  l is Therefore,  X  X  ij / X  X  j is computed as For any Q l ( l  X  Nv ( j )),  X  X  ij / X  X  l is computed as all the necessary components. We call our model as CMR (Couple Multiple Rela-tions). Note that each user/item X  X  neighbours would change in each iteration, due to the dynamical updating of the similarities. Arguably, our model could learn more appropriate user and item similarities by explicitly optimizing the loss function. The validation is shown in next section. 5.1 Evaluation Metrics and Datasets The popular metrics, MAE and RMSE , are used to measure the performance of all the models. Let T denote a test dataset that contains a set of (  X  Mean Absolute Error (MAE).
  X  Root Mean Squared Error (RMSE).
 For both of the metrics, a smaller value means a better performance. We user 2 datasets, Movielens1M and Yelp , to train and evaluate the models. They include different types of data, enabling us to compute user/item similarity from diverse aspects.  X  MovieLens1M is a dataset regarding recommending movies. Several types of data are included: (1) User attribute. Each user is represented by a vector of attributes, including age, gender, and occupation, etc. (2) Movie attribute.
We just keep the category set of each movie as its attributes. (3) Rating set which consists of a set of &lt; user, item, rating &gt; tuples. We remove users and items which have made/received less than 50 ratings, and finally there are 4297 users and 2514 movies left.  X  Yelp is a dataset regarding recommending Point-of-Interest (POI), such as restaurant, hotel, etc. Several types of data are included: (1) Social networks.
For each user, his/her friends are explicitly given. (2) POI attribute. We similarly keep the category set of each POI as its attributes. (3) A set of ratings. The original dataset contain POIs in several cities in United States. We just keep POIs in city  X  X as Vegas X  and users who have rated any of these
POIs and the corresponding ratings. 5.2 Baselines and Setting We compare the proposed CMR model with other three classical models. These models include:  X  MF model [ 12 ]. This model assumes that users/items are independent from each other, the similarities are ignored.  X  SoRec model [ 6 ]. It takes one type of user relation into consideration. For dataset MovieLens1m, user relation is defined as the similarity between users X  ratings. For dataset Yelp, relations between users are derived from the social networks, which means the similarity is 1 if two users are connected in the social networks, otherwise is 0.  X  item relation into MF. Item relation is defined as the similarity of items X  rat-ings in both of two datasets. To compute user similarity in the two datasets, we adopt the same approach adopted in SoRec .  X  X ur CMF model. the aim of our model is to couple multiple measures of user/item relation. Specifically, two types of user relation are considered: a) similarity between users X  ratings, and b) similarity between users X  attributes (MovieLens1m) or connectivities in social networks (Yelp). Two types of item relation are also considered: a) similarity between items X  ratings, and b) similarity between items X  attributes.
 item X  X  ratings, and Euclidean distance is used to measure the similarity between users X  and item X  X  attributes. After trying different values, the length of latent factor vector is set to be 10 in all models. In SoRec , SR u + of neighbours for each user or item is also set to be 10. Since all models use stochastic gradient descent, we also experiment with different values of learning rate. Finally, the learning rate is set to 0.3 in the baseline models and 0.05 in out model. 0.005 is chosen for the regularization term weight For simplicity,  X  u and  X  v in our model are assigned with same value, and we use  X  to replace  X  u ,  X  v in following part. 5.3 Results and Analysis We begin with investigating the impact of  X  on our model X  X  performance. Both of the two datasets are split into training set (80%), and test set (20 %). We vary  X   X  X  value from 0 to 1, and the results on two datasets are shown in Fig. 3 . rent user/item. Seen from Fig. 3 , experiments on two datasets show the similar results. That is, optimal performance is obtained when  X  is around 0 which means the influence of user/relation should be exploited to an appropriate extent. Both of overemphasizing (  X   X  0) or ignoring (  X   X  user/item relation are inadvisable.
 80% of original training set. Models are evaluated on these training sets, and the results are shown in Table 1 -2 . Each table is divided into two parts. The left part contains results in terms of MAE, and the right part contains results in terms of RMSE. Bold items indicate the corresponding models that performs best.  X  is set to be 0.4 in our model. Tables 1 -2 show similar results. They indicate that our model is significantly superior to the other models. Our model performs best on 4 out of the 5 datasets in terms of MAE and RMSE both on MovieLens1M and Yelp. Therefore, the views of user/item similarity and learning the optimal user/item similarities for current task. This work is motivated by the fact that each single way of computing user/item relation only captures a partial view of the underlying relation. Moreover, no explicit loss function is refereed to when learning the relations in existing work. Therefore, we propose a novel framework for coupling multiple views of rela-tions between users/items in this paper. In our proposed framework, multiple relations measured from different types of auxiliary data are coupled to approx-imate the underling user/item relation. In conclusions, our model X  X  advantages include: (1) Multiple similarity measures are coupled together, thus a more accu-rate and comprehensive approximate of the user/item relation could achieve. (2) Motivated by metric learning etc., we learn the user/item similarity by explic-itly optimizing a particular loss function, thus the similarities acquired would be optimal for current recommendation task. (3) Both of the dependencies between users and between items are exploited based on MF model. The experimental results validate the effectiveness and superiority of our model. In following work, we aim to explore more types of auxiliary data to achieve more appropriate approximation of the underlying relations.

