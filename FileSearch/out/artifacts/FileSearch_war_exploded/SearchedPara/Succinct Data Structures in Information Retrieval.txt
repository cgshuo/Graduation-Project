 Succinct data structures are used today in many information retrieval applications, e.g., posting lists representation, lan-guage model representation, indexing (social) graphs, query auto-completion, document retrieval and indexing dictio-nary of strings, just to mention the most recent ones. These new kind of data structures mimic the operations of their classical counterparts within a comparable time complexity but require much less space. With the availability of several libraries for basic succinct structures  X  like SDSL, Succinct, Facebook X  X  Folly, and Sux  X  it is relatively easy to directly profit from advances in this field.

In this tutorial we will introduce this field of research by presenting the most important succinct data structures to represent set of integers, set of points, trees, graphs and strings together with their most important applications to Information Retrieval problems. The introduction of the succinct data structures will be sustained with a practical session with programming handouts to solve. This will allow the attendees to directly experiment with implementations of these solutions on real datasets and understand the po-tential benefits they can bring on their own projects.
The current growth and availability of massive amounts of data gathered and processed by applications  X  Web search engines, textual and biological databases, just to cite a few  X  has changed the algorithmic requirements of basic processing and mining tools and provide ample motivation for a great deal of new theoretical and practical research on algorithms and data structures.

Not surprisingly, the last decades have seen a massive re-search in the field of the so-called succinct and compressed data structures. These new kind of data structures mimic the operations of their classical counterparts within a com-parable time complexity but requiring much less space. These solutions usually resort to a careful combination of ideas tion Retrieval problems. The introduction of the succinct data structures will be sustained with a practical session with programming handouts to solve. This will allow the attendees to directly experiment with implementations of these solutions on real datasets and understand the poten-tial benefits they can bring on their own projects.
Indexing is the key to efficient query processing in the vast majority of IR applications. The use of inverted indexes in web search engines is probably one of the most prominent examples in Information Retrieval.

While index compression is a relatively old and established method in IR and covered by all relevant text books the new data structures which combine compression and efficient ex-ecution of operations  X  like random access  X  are a relatively new field of which many IR researchers are not yet aware of. However, this field of research is highly relevant for IR as, for example, we have already seen that techniques from the succinct data structure field are able to improve inverted in-dexes systematically [29, 35]. Succinct data structures often extend the functionality of traditional structures or reduce query time. For example, while inverted indexes are re-stricted in handling phrase queries, new document retrieval frameworks based on succinct structures allow to efficiently answer top-k queries for phrases of arbitrary length [19], and it is also possible to determine the document frequency of any phrase in constant time by just spending at most 2 bits per element in the collection [32]. Unfortunately, succinct structures per se are not easy to implement from scratch and especially the implementation of the latter two results is very complex. However, as more and more implemen-tations of basic succinct structures become available via li-braries, it is possible to combine these pieces to obtain more advanced solutions. While other fields like Bioinformatics already actively profit from using succinct structures after engineering the theoretical proposals to their applications, e.g., the FM-Index is used in DNA read mapping, the IR community does not yet fully exploit the new possibilities of succinct structures. With this tutorial we do not only inform the audience about succinct data structures but also point out engineering challenges and encourage the participants to use the potential of these solutions in IR. Therefore the ob-jectives of this tutorials are (1) to introduce the audience to the world of succinct data structures, (2) to teach the basic techniques of succinct structures, (3) to present the practical impact of the structures to selected applications in IR, and (4) to show the participants how they can implement their own succinct structures on top of existing basic structures provided by the succinct data structure library.
The tutorial is subdivided in two parts. The goal of the first part is to describe the most important succinct data structures. We will present the theoretical achievements in this field of research by focusing our attention to the ones that have demonstrated their relevance in practice. The introduction of each of these solutions will be sustained by presenting a selection of Information Retrieval problems in which they have an immediate application.

The goal of the second part is to present ready-to-use im-[7] P. Ferragina and G. Manzini. Indexing compressed text. [8] P. Ferragina, F. Piccinno, and R. Venturini. Com-[9] P. Ferragina and S. S. Rao. Tree compression and in-[10] P. Ferragina and R. Venturini. Indexing compressed [11] P. Ferragina and R. Venturini. The compressed per-[12] J. Fischer and V. Heun. Space-efficient preprocessing [13] L. Foschini, R. Grossi, A. Gupta, and J. S. Vitter. When [14] S. Gog, T. Beller, A. Moffat, and M. Petri. From the-[15] S. Gog and G. Navarro. Improved single-term top-k [16] S. Gog and M. Petri. Compact indexes for flexible top-[17] R. Grossi, A. Gupta, and J. S. Vitter. High-order [18] R. Grossi and G. Ottaviano. Fast compressed tries [19] W. Hon, R. Shah, and J. S. Vitter. Space-efficient [20] W. Hon, R. Shah, and J. S. Vitter. Space-efficient [21] B. P. Hsu and G. Ottaviano. Space-efficient data struc-
