 This paper introduces a cluste ring approach, XML Clustering using Frequent Substructures (X CFS) that considers both the structural and the content info rmation of XML documents in clustering. XCFS uses frequent s ubstructures in the form of a novel representation, Closed Frequent Embedded ( CFE ) subtrees to constrain the content in the clustering process. The empirical analysis ascertains that XCFS can effectively cluster even very large XML datasets and outperfo rms other existing methods. I.7.2 [ Document and Text Processing ]: Document Preparation X  Markup Languages; H.2.8 [ Database Management ]: Database Applications X  Data mining ; H.3.2 [ Information Systems ]: Information Storage and Retrieval X  Information Storage .
 Algorithms, Management, De sign, Experimentation. XML documents, Clustering, Freque nt mining, Closed Frequent Embedded Subtrees, Subtree mi ning, Structure and content. XML (eXtensible Markup Language ) clustering is a task of grouping a collection of XML docum ents into clusters without prior knowledge [1]. The clusteri ng of XML documents is useful in information retrieval, database indexing, data integration and document engineering. There has been a myriad of clustering approaches[1, 3, 5] for XML documents proposed in recent years either using the structural or the content features of the XML documents for clustering. . A good clustering process should consider the use of both these features since XML is popularly known for its representation and st oring of structural content. However, the processing of a ma ssive amount of data resulting from using the structural and the content features may lead to the scalability problem. There are some methods that include both structure and content in finding clusters, however, the way of combining the structure and content in the clustering process could result in a poor clustering solution. This is particularly evident when the categories are based on the theme of the documents content [5]. We propose a novel approach, XCFS utilizes the common substructures present in XML docum ents to represent the content features in Vector Space Model (V SM). The dimensionality of the content features is reduced by only considering the content corresponding to frequent substructu res.Empirical analysis reveals that the proposed way of using structural relationships for finding content similarity improves the accuracy of the clustering solution. This also makes the clustering process scalable for large-scale XML data. We propose to us e the common subtructures in the form of frequent embedded subtrees which maintains an ancestor-descendant relationship among its nodes to facilitate the clustering process. Frequent em bedded subtrees present a less stringent relationship among its nodes and hence increases the possibility to discover some of the hidden similarities that may exist between trees [2, 6]. Though the embedded subtrees improve the quality of clustering solutions it often results in an information explosion due to the creation of a large number of embedded subtrees [2]. In order to contro l the number of embedded subtrees, we propose to generate not only the concise but also the  X  X ossless X  representation of frequent embedded subtrees, called CFE subtrees. The CFE subtrees are generated using the algorithm CFETreeMiner which adopts pattern-growth technique in a computationally efficient manner. representation called CFE subtrees which encodes the structural relationships among XML documen ts; (2) a computationally effective frequent mining approach to identify CFE subtrees among a large collection of XML documents; and (3) a novel way to effectively utilize CFE subtrees to combine both the semantic and structural information of XML documents for clustering. XCFS has two phases: frequent mining and clustering. Let there be an XML document D i containing tags (or node labels) and data (or node values) enclosed within those tags. The structure of the XML document D i is modeled as a rooted, ordered, and labeled tree showing the hierarchical relationships between nodes in the docum ent. The document tree DT (1) N is the set of ordered and labeled nodes or vertices that exist in DT i ; (2) n0 is the root node which does not have any edges entering in it; (3) E is the set of edges in DT alphabets; and (5) a labeling function, f: N U E  X   X  that assigns labels to nodes and edges. Th ere is no distinction between attribute and element tags of an XML document while mapping them into a tree, since both are mapped to the node label set. The common or frequent embedded subtrees in the document tree dataset DT are identified based on the user-defined minimum support ( min_supp ). Suppose there is a collection of XML collection of document trees DT = {DT 1 , DT 2 , DT 3 ,...,DT document tree DT i with node set N and edge set E, a tree dt node set n' and edge set e' is an embedded subtree of DT n'  X  N; (2) e'  X  E; (3) the labeling of nodes of n' in dt of n2 in dt i iff n1 is the ancestor node of n2 in DT n1,n2  X  n', preorder(n1)&lt;preorder(n2) in dt preorder(n1)&lt;preorder(n2) in DT i . The Support (dt frequency( dt i )) of an embedded subtree dt i is the number of document trees in DT for which dt i is a subtree. dt subtree among the document trees DT such that (frequency (dt )/|DT|)  X  min_supp In order to reduce the number of subtrees, we propose the CFETreeMiner algorithm to generate the concise lossless representations of frequent subtrees called CFE subtrees. Definition 1: Closed Frequent Embedded ( CFE ) Subtree In DT, there exist two fre quent embedded subtrees dt i and dt frequent embedded subtree dt i is closed of dt j iff (1) dt embedded subtree of dt i , supp(dt i ) = supp(dt j ); (2) there exists no supertree for dt i having the same support as that of dt property is called embedded closure and dt i is the closed frequent embedded subtree of dt j . CFETreeMiner conducts frequent s ubtree mining using the prefix-based pattern-growth approach, considering the patterns as subtrees. The prefix-based pattern-growth is an efficient approach over the generate-and-test approach as it avoids the expensive task of candidate subtree generation inherent in generate-and-test approaches [7]. CFETreeMiner involves four phases: The prefix-based subtree growth t echnique starts with a scan of the DT dataset to determine the 1-Length frequent subtrees with a minimum support. Using these generated 1-Length frequent subtrees as prefix-trees, DT is projected. Let there be a document tree DT p with m nodes and T p be a tree with n nodes where n  X  m . The pre-order scanning of the document tree DT p from its root until its n-th node results in a tree T j . If T j is isomorphic to T T is called the prefix tree of document tree DT p [7]. After generating 1-Length frequent subtrees a backward scan of all the nodes except the root node in the entire document tree is conducted to reduce the search space using the following lemma: Lemma 1: Let there be two 1-Length prefix-trees T p and T p ' having the node labeled k and k' respectively for a given document tree dataset projection of T p is stopped as the projection of the subtree T based on k' includes all the subtr ees generated using the prefix-tree T p . Each of the prefix-tree projected dataset is now mined to identify the Growth Node (GN). Definition 3: Growth Node (GN) Given two prefix-trees T p and T p ' with m and m+1 nodes respectively, where T p is the prefix of T p '. If there occurs a node n in T p ', but, not in T p then the node n is the Growth Node (GN) of T with respect to T p '. frequent embedded subtree. For each of the frequent GN the corresponding projection is constr ucted and mined recursively until there are no more frequent GN s to be projected. With repeated projections and mi ning of the projected dataset, there occurs a possibility that some of the subtrees generated are not closed. In order to check the closure for generated frequent subtrees, the node extension clos ure checking is performed. From Definition 1 on CFE subtrees, a prefix-tree T p is non-closed if there exists at least one prefix-tree T p ' that has the same support as that of T p . With the use of the prefix-based subtree growth technique to generate frequent subtrees, the prefix-tree T occur in two possible ways: Checking the closure of T p with respect to T p ' varies according to the way T p ' occurs. The Growth Node extension closure checking lemma is used when the prefix-tree T p ' occurs in the same prefix-projected dataset of T p while the ancestor node closure checking lemma is used when the prefix-tree T p ' occurs in a different prefix-projected dataset of T p . Lemma 2: Growth Node extension check for closure If a prefix-tree T p can be extended to T p ' in the same prefix-projected dataset using its GNs and the prefix-projected instance has the same support as that of T p, then T p is not closed. Lemma 3: Ancestor Node extension check for closure If there exists a prefix-tree T p with m nodes and a prefix-tree T with the common m nodes and an additional node b having the same support as that of T p in a different prefix-projected instance from T p ' then T p is not closed and b is the ancestor node extension of T p . In order to efficiently check for closure for ancestor node extensions, a technique called maintain-and-test is deployed. In this technique, the previously generated prefix-trees are maintained and then tested against the recently generated prefix-tree T p for closure. If there exists an ancestor node extension of a node b for the prefix-tree T p among the maintained prefix-trees T that has the same support and sum of tree ids as T p , then this node is checked for closure. Figures 1(a) and (b) outline th e CFETreeMiner in Phase-I of XCFS and the Fre subroutine to mine for CFE subtrees respectively. Algorithm CFETreeMiner 
Function Fre (T p , n, ProDB(DT, T p ), min_supp, prepat_supp) In Phase-II of XCFS, the generated CFE subtrees are then utilized to represent the content of XML documents. An XML document can now be represented by the number of CFE s that it contains. The content features of the XML document D i , C(D collection of node values for all the node labels in the document, D . Node value for a node (or tag), C(N i ) , in an XML document is obtained after stop-word removal and stemming. Extending the structure-constrained content features defined in [4] for CFE subtrees, two data structures: PCF (Pre-Cluster Form) and ICF(Intermediate Cluster Form) are generated. The PCF is a vector of the sum of occurrences of the distinct terms in the structure-constrained content features of a document D collection of PCF s for the document collection D . A partitional clustering approach can then be applied to the ICF representation to group the XML documents in th e required number of clusters, based on their structural and semantic similarity. The experiments were conduc ted on the High Performance Computing system, with a RedH at Linux operating system, 16GB of RAM and a 3.4GHz 64bit Intel Xeon processor core. Two real-life XML datasets, ACM SIGMOD 1 and INEX 2007 Wikipedia [3] were used. ACM SIGMOD data set has two kinds of cluster categories according to structural similarity and structure-and-content-based similarity with tw o and five groups respectively. The clustering performance is also evaluated by considering (1) only the structural features (SO) and (2) only the content (CO) features. We evaluate the accuracy of the clustering solutions using the two standard metrics, Mi cro F1 (intra-cluster purity) and Macro F1 (inter-cluster purity) [3]. A comparison of the CFETreeMiner in Phase-I of XCFS against PrefixTreeESpan[7] and TreeMinerV [6] on Wikipedia and ACM SIGMOD dataset is presented in Fi gures 2 and 3 respectively. It clearly shows that there is a significant improvement in the response time of CFETr eeMiner over other algorithms. Also, it should be noted that from Figure 2(a) that the TreeMinerV fails to respond to lower or equal to 30% support threshold. On the other hand, on the very small ACM SIGM OD dataset, all the algorithms could generate frequent subtrees in less than 7 seconds even for the 20% support threshold, however XCFS results in a very significant reduction in the number of CFE subtrees generated as shown in Figure 4. The improvement in response time in spite of the reduction is due to the early reduction of search space. 
Figure 2(a). Comparison of al gorithms on the response time 
Figure 2(b). Comparison of algorithms on the number of http://sky.fit.qut.edu.au/~nayak/datasets Figure 3. Comparison of al gorithms on the number of frequent subtrees generated on the ACM SIGMOD dataset Table 1 summarizing the clustering results of XCFS on the Wikipedia dataset collection a nd other clustering approaches submitted for the INEX 2007 document mining challenge reveals that XCFS demonstrates an improvement in accuracy. It can be noted for the ACM SIGMOD dataset that both the XCFS and SO methods achieve Micro-average a nd Macro-average F1 scores of 1 when considering classes according to structural similarity, which is similar to the results reported in a previous study [1]. Table 1. Performance of XCFS and other methods on the However, the method proposed in [1] can distinguish only the structural variations in documen ts and may fail in situations where there is a grouping based on the structure and the content. XCFS is able to achieve higher accuracy in terms of recognizing classes based on both the structural and the content features in comparison to considering these f eatures independently as shown by the results of SO and CO methods due to its novel way of combining these two features efficiently.
 Table 2. Dimensionality of the input matrix for the ACM It can be noted from Table 2 that there is a significant reduction in the number of unique terms and the total number of Non-zeroes has facilitated XCFS to be used for clustering even very large datasets such as Wikipedia. A comparison on the effect of utilising closed and Non-Closed Frequent Embedded ( Non-CFE ) subtrees in clustering for the very small dataset, ACM SIGMOD dataset using structure-and-cont ent based clustering design (with 5 clusters) is shown in Table 3. Table 3. Comparison of XCFS for the closed and non-closed Due to having less or no redundant content information, accuracy of clustering solution is improved as the CFE subtrees capture the structural similarity and then using them to get the structure-constrained content for finding clusters. In this paper, we have pr oposed a novel frequent embedded subtree mining algorithm and extended it to utilize in clustering the XML documents for effectively combining both the structural and the content features of XML documents. By utilizing the frequent subtrees in clustering the content, we developed a scalable clustering method that can efficiently be employed on very large datasets. The experimental results ascertained that XCFS outerforms other existing approaches in improving accuracy, while using a significantly reduced number of content features. [1] Aggarwal, C. C., N. Ta, et al. 2007. Xproj: a framework for projected structural clustering of xml documents. Proceedings of the 13th ACM SIGKDD International Conference on Knowledge discovery and data mining (S an Jose, California, USA). ACM:Press, New York, NY, 46-55. [2] Chi, Y., S. Nijssen, et al. 2005. Frequent Subtree Mining-An Overview. Fundamenta Informa ticae. IOS Press. 66, 161-198. [3] Denoyer, L. and P. Gallinari. 2008. Report on the XML mining track at INEX 2007 categorization and clustering of XML documents. ACM SIGIR Forum. ACM:Press, New York, NY, 42(1): 22-28. [4] Kutty, S., R. Nayak, et al. 2009. HCX: An Efficient Hybrid Clustering Approach for XML Documents. Proceedings of the ACM Document Engineering Symposium (Munich, Germany). [5] Vercoustre, A.-M., M. Fega s, et al. 2006. A Flexible Structured-Based Representation for XML Document Mining. Advances in XML Information Retrieval and Evaluation. 443-457. [6] Zaki, M. J. 2002. Efficiently mining frequent trees in a forest. Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining (Edmonton, Alberta, Canada), ACM Pr ess,New York,NY, 71-80. [7] Zou, L., Y. Lu, et al. 2006. PrefixTreeESpan: A Pattern Growth Algorithm for Mining Embedded Subtrees. Web Information Systems. Springer, Berlin, 499-505. 
