 Association rules mining introduced by Agrawal [1], has now become one of main pillar of data mining and knowledge discovery tasks, and it is successfully applied in sequential pattern mining, emerging pattern mining, multidimensional pattern mining, classification, maximal and closed pattern mining. Using the support-confidence framework, the problem of mining the complete association rules from transactional dataset is divided into two parts  X  (a) finding frequent itemsets, and (b) generating association rules from frequent itemsets. Among them part (a) is considered to be the most time consuming process, requires heaviest frequency counting operation for each itemset. 
As indicated in [8], MAFIA a maximal itemset mining algorithm [3] (using bit-vector representation approach) is considered to be most efficient algorithm for small dense dataset mining. The main components of MAFIA are its traversal of search space by depth first search, filtering infrequent items from node X  X  tail by dynamic reordering [3] and frequent items representation using vertical bit-vectors. To check the frequency (support) of itemsets it performs a bitwise-AND (bitwise- X  ) operation on head and tail item bit-vectors regions. Since 32-bit CPU supports 32-bit  X  per operation, hence each region of item bit-vector is composed of 32-bits ( represents 32 transactions ). Calculating frequency using bit-vectors is efficient when the dataset is dense, but highly inefficient when the items bit-vectors contain more zeros than ones, resulting in many useless counting operations, which usually happens in the case of sparse datasets. To handle the bit-vectors sparseness problem, MAFIA proposed a bit-vector projection technique known as projected bitmap. The main deficiency of pro-jection using projected bitmap technique is that, it requires a high processing cost (time) for its creation. Due to this reas on, MAFIA used adaptive compression [4], since projection is done only when saving from the compressed bitmaps outweigh the cost of projection. However, with adaptiv e compression, projection cannot be possible on all nodes of search space. 
In this paper we present a novel bit-vector projection technique, we call it Pro-jected-Bit-Regions (PBR) bit-vector projection technique and its implementation Ramp (itemset mining algorithm) . The main advantages of projection using PBR are that  X  (a) it consumes a very small processing cost and memory space for projection, and (b) it can be easily applied on all nodes of search space without requiring any adaptive approach. In section 2.2 to 2.4 we present some efficient implementation techniques for Ramp , which we experienced in our implementation. Our different experimental results on sparse dataset suggest that mining frequent itemset using Ramp is faster than the current best algorithms which marked good scores on FIMI03 and FIMI04 [7]: fpgrowth-zhu [6], AFOPT [8], PatriciaMine [10], AIM [5], MAFIA [3], fpgrowth-borgelt, Eclat-borgelt [2], Apriori-borgelt [2]. This shows the effective-ness of our PBR bit-vector projection technique. vector  X  bitmap(X)  X  which contains a value greater than zero and skip all others. Obvi-ously for doing this, our counting procedure must be so powerful and have some in-formation which guides it, that which regions are important and which ones it can skip. To achieve this goal, we propose a novel bit-vector projection technique PBR (Projected-Bit-Regions). With projection using PBR, each node Y of search space contains an array of valid region indexes PBR  X  Y  X  which guide the frequency counting procedure to traverse only those regions which contain an index in array and skip all other. Figure 1 show the code of itemset frequency calculation using PBR technique. As clear from Figure 1, line 2 first retrieves a valid region index  X  in  X  bitmap (head)  X  and line 3 apply a bitwise- X  on  X  bitmap (head)  X  with  X  bitmap (X)  X  on region  X  . 
One main advantage of bit-vector projection using PBR is that, it consumes a very search space. At any node, projection of child nodes can be created either at the time head bit-vector if dynamic reorderi ng is used. The strategy of creating PBR  X  X  X  at node which contain a value greater than zero makes the projection of {head  X  X} node. 2.1 Ramp: Itemset Mining Algorithm The basic strategy of Ramp for mining frequent itemset is that, it traverses search dynamic reordering and new node m for every tail item X in tail n , is generated such as m.head = n  X  X and m.tail = n.tail  X  X . Items in m.tail are reordered by increasing support which keeps the search space as small as possible. For frequency counting, Ramp is described in Figure 1. 2.2 Increasing Projected Bit-Regions Density The bit-vector projection technique described in section 2 does not provide any com-paction or compression mechanism to increase the density in bit-vector regions. As a which not only increase the projection length but also it is not possible to achieve true 32bit CPU performance. To increase the density in bit-vector regions the Ramp starts with an array-list [9]. Next at root node, a bit-vector representation for each frequent item is created which provide a sufficient compression and compaction in bit-vectors regions. Sufficient improvements are obtained in Ramp by using this approach. 2.3 2-Itemset Pair There are two methods to check whether current itemset is frequent or infrequent  X  (a) to directly compute its frequency from its PBR (b) by 2-Itemset pair. If any 2-Itemset pair of any itemset is found infrequent, then by following Apriori [1] property itemset is consider to be as infrequent. In AIM [5] almost the same approach was used with the name efficient initialization . However AIM used this approach only for those itemsets which contain a length equal to two. In Ramp we extend the basic approach and apply 2-Itemset pair approach also on those itemsets which contain a length more than two. We know any itemset which contains a length more than two, is the superset of its entire 2-Itemset pairs. Before counting its frequency from TDB , Ramp checks its 2-Itemset pairs. If any pair is found infrequent then that itemset is automatically con-sidered to be infrequent 2.4 Writing Frequent Itemsets to Output File When the dataset is dense and contains millions of frequent itemsets on low support threshold, almost 90% of overall mining time is spent on writing frequent itemsets to output file. We have noted hat some of previous implementations e.g. AFOPT [8], PatriciaMine [10], fpgrowth-zhu [6] write output itemsets one by one, which increases the context switch and disk rotation times and degrades their algorithm performance. A better approach which we use in Ramp is to write itemsets to output file only when a sufficient number of itemsets are mined in memory. In Ramp we find that, writing itemsets using this approach sufficiently decreases the processing time of algorithm. The implementation of Ramp-all is coded in C language, and the experiments are done on Pentium4 3.2 GHz CPU with 512MB memory. The performance measure is the execution time of the algorithms datasets with different support thresholds on two benchmark datasets (available at http://fimi.cs.helsinki.fi/data/). Figures 2 and 3 show the performance curves of all algorithms. As we can see from Figures, the Ramp-all outperforms the other algorithms on almost all support level thresholds, and gives global best performance. The performance improvements of Ramp-all over other algorithms are significant at low support thresholds. Mining frequent itemset using bit-vector repr esentation approach is very efficient for bit-vector projection technique. In this paper we present a novel efficient bit-vector projection technique, which is better than the previous projected bitmap projection technique. The main advantages of our bit-vector projection technique are that, it does not require any rebuilding threshold or does not depend on any adaptive approach for projection, and can be easily applicable on all nodes of search space. We also present a new frequent itemset mining algorithm Ramp using our bit-vector projection tech-nique. Different experiments on benchmark datasets show that Ramp is faster than the current best frequent itemset algorithms, which show the effectiveness of our bit-vector projection technique. 3. D. Burdick, M. Calimlim, J. Gehrke. MAFIA: A Maximal Frequent Itemset Algorithm for 
