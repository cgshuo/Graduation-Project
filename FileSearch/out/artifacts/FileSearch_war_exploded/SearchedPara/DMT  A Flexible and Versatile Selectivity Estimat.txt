 Graph is widely used to model complex and schemaless data, ranging from XML, proteins, to chemical compounds. The key problem for many graph-related applica-tions is how to efficiently process graph query and retrieve corresponding sub-graphs. For achieving best query performance in graph-structured data, effective and accurate estimates for selectivities of both simple and complex path queries are crucially needed by determining the optimal query-execution plan. 
XML is a kind of directed labeled graph, which is self-describing and cycle-enabled in nature. The underlying labeled graph model of XML consists of element nodes, which can be simple/complex type value node or composite reference node scription is a common and essential feature. This kind of query is more complex than SQL in RDBMS because of its capability in graph navigational query, especially for complicated branching and cyclic query pattern. In general, the most commonly used graph query expressions in graph-structured data, such as XML Database, can be has three sub-types: single path query ; single-value path query ; multi-value path query [5]. Complex path query , such as branch-structured or cycle-structured query pattern, can be expressed by combining different kinds of simple path expressions. picting an element node with predicates. Th e selectivity for P essentially indicates the count of element t n that can be reached by P X  X  navigational process. In general, a common graph summarization model can be described as follow: An original graph data G = (V, E) depicts a di rected graph structure. In graph summariza-tion S = (V X , E X ), each v X   X  V X  with extent(v X )  X  V is a representation of the nodes in number of nodes in it. Each edge (u X , v X )  X  E X  contains all the edges from extent(u X ) to extent(v X ). Here, extent(v X ) indicates the set of nodes in G corresponding to v X  in S. 
In Markov Table [1], selectivity estimations of paths with length m depend only on the selectivity estimations of sub paths with length m-1 preceding it. In fact, the proc-ess is modeled as a Markov process of order m-1, so this approach is called Markov Table . It represents an accurate approximation of the structure of the XML data, but it extend it to complex branching query in graph-structured data with new features added. Theorem 1. In summarization graph S, the frequency of edge (u i , v), which is one of all the edges leads to v, can be denoted as follows: 
The computation for the frequency of edge (u i , v) mainly considers two factors. factors is the approximation for frequency of edge (u i , v). This idea is also addressed in [1] and [6], which is a statistical method based on uniformity assumption. Since the computation of frequency is based on uniformity assumption [6], it is only a coarse estimation that can X  X  supply more exact information about correlations and distributions for sub paths. With the limitation of S(0), we need to investigate optimi-zation methods for refining graph summarization. As a basis for optimized rules, we first exploit the local features about edges in graph summarization S. Two definitions are proposed to describe the types of edges in S, which consider the local forward and backward inclusions. Definition 1 . Forward-Inclusion (FI): For each edge (u, v) in graph summarization S, if u can reach no nodes except v, then the type of (u, v) is FI. Definition 2 . Backward-Inclusion (BI): For each edge (u, v) in graph summarization S, if v can only be reached by u, then the type of (u, v) is BI.

Therefore, all the edges in S can be classified into 4 types: FI, BI, FI NI denotes the type of ) BI FI (  X   X  .With the definition 1 and 2, we draw two important theorems as strong evidences supportin g accurate selectivity estimations. edges (t i /t i+1 ) in P are BI, then Freq ( t n ) is an accurate estimation for path P. reaching some node in extent(t n ). 
As an example for branching query in sample graph data, query P = /Tsinghua[Cs/C/DR/IR]/Ds/D is a complex path query in which sub paths Cs/C, C/DR and DR/IR have types of FI. After applying Theorem 3 , Freq (P) = Freq (/Tsinghua[Cs]/Ds/D), which is simplified by pruning Cs/C, C/DR and DR/IR. The intrinsic sense of this simplification is based on a fact that the existent probability of sub path Cs/C/DR/IR is a hundred percent which is concluded from Theorem 3 . 
In order to leverage Theorem 2 and 3 sufficiently, we propose 4 optimized rules with goals to depict the graph summarization containing more BI and FI type edges. Benefited from these optimized rules, our selectivity estimation methods on DMT perform more accurately. Optimized Rule 1 : Given an edge (u, v) with FI  X  type in graph summarization S, let the type of (u, v) be T. The node u in S can be split into two nodes u 1 and u 2 , where (u , v) are FI U T and T respectively. Figure 1(a) shows the process when performing Optimized Rule 1. Optimized Rule 2 : Given an edge (u, v) with BI  X  type in graph summarization S, let forming Optimized Rule 2. summarization S, let them be denoted as (u, v 1 ), (u, v 2 ), ..., (u, v n ). As an assumption, Avg(u, v i )= connected by u 1 and Freq(u 2 , v j )  X  a with v j connected by u 2 . summarization S, let them be denoted as (u 1 , v), (u 2 , v), ...,(u n , v). As an assumption, the average frequency of these n edges is a , which is also computed by the formula of Avg(u i , v)= leads to v 1 and Freq(u j , v 2 )  X  a with u j leads to v 2 .

Basing on the Optimized Rules proposed above, we give a concrete demonstration on the DMT construction algorithm: DMTBuilder. 
Conceptually, this algorithm works as follows: (1).S(0) is generated with edge types recognition after traversing operation in original data graph G. (2).The first DMT is obtained by S(0) transformation with aggregation refine the summarization graph until all rules in RuleSet is executed. RuleSet is a set of Optimized Rules in which one rule can be repeated more than once for certain optimization task. Simple path query: Theorem 1 in section 3 defines a universal method to calculate the frequency of edge (u, v). For a given simple path query P = (/t 1 /t 2 /.../t n ), the selectiv-ity of it can be computed by the following formula based on length-m DMT: 
Equation (2) can be inferred from Theorem 1 extending from length 1 to m. The in-but without derivation. Complex path query: selectivity estimation of complex path query is more compli-cated than simple path query because it always involves more than one sub paths. Essentially, only with exact correlation in formation supplied, accurate estimations can be performed. DMT is a step-by-step optim ized graph summarization for selectivity formation needed in estimations. Given a complex branching path query having two P3=/t n+m+1 /t n+m+2 /.../t n+m+k with length k. According to the statistical model for branch-ing query selectivity estimation in [6], following equation is used to compute the selectivity of P. r(P2|P1) We use three kinds of standard XML testing datasets in our experiments: Shake-speare[3], XMark and DBLP[4]. We choose 300 simple path queries and 200 com-plex path queries for each dataset. These queries are obtained by off-line scanning of the graph summarization generated by our GenS() function in DMTBuilder. AER, an abbreviation for Average Error Rate, is proposed to measure the average value of relative error for different approaches on selectivity estimations. CST[3] does well in trading off the accuracy and memory space, in which Correlated Suffix Trees are used to depict graph summarization. The experimental memory size is from 0 to 50 KB. Optimized Rules 1 to 4 are repeatedly applied till memory size limitation reached. Except combined query set, we also evaluate separately on simple path query and complex path query to investigate the accuracy of DMT. Experiment 1: Comparison between DMT and CST. Experiment 2: Experiments on simple path queries and complex path queries. 
In Figure 2, with the change in memory space constraints, the results of compari-sons between DMT and CST show the advantages of DMT in AER. There are some sub conclusions we can draw from our experiments. (1) With the comparisons be-tween DMT and CST on three standard datasets, we have rich proofs to believe that DMT has advantages in accuracy of selectivity estimations. (2) Different usage of Optimized Rules fits for different features of real-life data. From the results above and with less tags and more long paths. Oppositely, Optimized Rules 3, 4 are good at graph data with more tags and instances for each tag. (3) Figure 3 gives us evidences to believe DMT have more advantages in estimations of complex path queries as more memory space supplied, which is crucial for graph queries. In this paper we presented DMT, a flexible and versatile approach for selectivity well as complex path query. With the trading off between memory space constraints and accuracy, we exploit the important featur es of local forward/backward inclusions and propose 4 Optimized Rules for DMT construction. DMTBuilder, as a core algo-rithm for DMT generation, is fulfilled with dynamic characteristics on Optimized Rules choosing and combination. Our experiments show that DMT performs better for selectivity estimations, especially for complex path queries. This work also can be extended to cyclic graph queries based on DMT X  X  capabilities of summarization and refining. 
