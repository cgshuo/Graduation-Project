 A Cyber-Physical System (CPS) integrates physical ( i.e. , sensor) devices with cyber ( i.e. , informational) components to form a context sensitive system that responds intelligently to dynamic changes in real-world situations. The CPS has wide applications in scenarios such as environment moni-toring, battlefield surveillance and traffic control. One key research problem of CPS is called X  mining lines in the sand  X . With a large number of sensors (sand) deployed in a desig-nated area, the CPS is required to discover all the trajec-tories (lines) of passing intruders in real time. There are two crucial challenges that need to be addressed: (1) the collected sensor data are not trustworthy; (2) the intruders do not send out any identification information. The sys-tem needs to distinguish multiple intruders and track their movements. In this study, we propose a method called LiSM (Line-in-the-Sand Miner) to discover trajectories from un-trustworthy sensor data. LiSM constructs a watching net-work from sensor data and computes the locations of in-truder appearances based on the link information of the network. The system retrieves a cone-model from the histor-ical trajectories and tracks multiple intruders based on this model. Finally the system validates the mining results and updates the sensor X  X  reliability in a feedback process. Exten-sive experiments on big datasets demonstrate the feasibility and applicability of the proposed methods.
 H.2 [ Database Applications ]: Data Mining Cyber-physical system, sensor network, trajectory
A Cyber-Physical System (CPS) is an integration of sen-sor networks with informational devices [2]. The CPS em-ploys a large number of low-cost, densely-deployed sensors to watch over designated areas and automatically discover passing intruders. Such a system has many promising appli-cations in both military and civilian fields, including missile defense [4], battlefield awareness [3, 15], traffic control [9, 17], neighborhood watch [6], environment monitoring [16] and wildlife tracking [7]. The key problem in the above ap-plications is called  X  X ining lines in the sand X  [1], i.e. , discov-ering the trajectories of passing intruders from the collected sensor data.

Figure 1 shows the framework of a battlefield CPS: The sand (seismic, acoustic and magnetic sensors) is deployed in a designated area. It constantly collects signals of vibration, sound and magnetic force from the environment. When an intruder passes by, the sensors detect a signal change and send out detection records. The system analyzes the col-lected data and discovers the intruder trajectories in real time. Such a system can help military forces see through the  X  X og of war X  and protect troops and bases on the battle-field.

However, the topic of  X  X ining lines in the sand X  is con-sidered one of the major challenges in CPS research field, partly due to the following problems:  X  Untrustworthy data: Many deployment experiences have shown that untrustworthy ( i.e. , faulty) data is the most serious problem that impacts CPS performance [13, 16].
Untrustworthy data are generated due to various reasons, including hardware failure, communication limits, envi-ronmental influences and so on. It is difficult to filter th em out solely based on the signal value, because the values of faulty signals are similar to correct ones.  X  Tracking intruders: There are usually multiple intruders in the monitoring area and the system is required to track all of them. Since the intruders do not send out any iden-tification information, the system has to distinguish them and track their movements. Many previous methods make the assumption of single intruder and cannot discover mul-tiple ones in real applications.  X  Big data: A CPS usually contains hundreds, even thou-sands of sensors [2]. Each sensor generates a data record every few minutes; such records form a big dataset. In several applications, actions must be taken immediately to deal with the intruders. The system is required to dis-cover trajectories in real time.

In this study, we propose a novel system called LiSM (Line-in-the-Sand Miner) to discover intruder trajectories from untrustworthy sensor data. LiSM first constructs a watching network to model the relationship among the sen-sors, data records and intruders. Then LiSM detects the intruder X  X  appearances based on the link information of the watching network. To track multiple intruders, a cone model is proposed to generate the intruder trajectories. The sys-tem employs a validation process to filter out false positives and updates sensor reliability scores. The technical contri-butions of this study are summarized as follows.  X  We construct a watching network to model the relation-ship among the sensors, records and intruders. Such a network helps locate the intruder appearances in every timestamp.  X  We propose a cone model to track multiple intruders. The cone model is an effective tool to generate trajectories from the detected intruder appearances.  X  The system validates the candidate results and filters out false positives. Then the system updates the sensor relia-bility scores in a feedback process.  X  We conduct extensive experiments to evaluate the effec-tiveness and efficiency of proposed methods on big datasets.
The experiment results show that our approach yields higher precision and recall than existing methods.
The rest of the paper is organized as follows. Section 2 introduces the background knowledge and problem for-mulation; Section 3 proposes the techniques of constructing the watching network, Section 4 introduces the trajectory mining methods; Section 5 conducts the performance eval-uations; Section 6 briefly comments on related work; and Section 7 concludes the paper.
Recent advances in sensor technology have produced many types of sensors for area-watching purposes. Such sensors can be roughly classified into two categories by mechanism: (1) Active sensor ( e.g. , the infrared sensors and radar sen-sors): these sensors radiate signal pulses and detect ob-jects by the echo bouncing off the intruders; (2) Passive sensor ( e.g. , the acoustic sensors, seismic sensors and mag-netic sensors): these sensors only receive signals from the environment. Active sensors achieve higher accuracy, but require significant more power to operate and drain batter-ies quickly. Furthermore, when active sensors radiate signal pulses, they are at high risk of being detected by the intrud-ers. As a result, the CPS is usually deployed with a large number of low-cost, energy-saving passive sensors.
Passive sensors constantly collect signals of sound, vibra-tion and magnetic forces from the environment. When an intruder passes by, the sensors detect it based on the signal changes. However, due to hardware limitation, the sensors can only report the area of an intruder X  X  possible appear-ance, rather than a concrete point location. In this study, we model the reported area as a planar region bounded by a circle.
 Definition 1. (Detection Record) Let s i be a sensor and t be a timestamp, the detection record r i,j is generated by s to indicate the possible area of an intruder X  X  appearance in t . r i,j = { cen ( r i,j ), rad ( r i,j ) } , where cen ( r are the center and radius of the area.
 Example 1. Figure 2 shows a list of detection records in time t 1 . The solid triangle node is the intruder o 1 . The round nodes are nearby sensors watching the area where o 1 passes. The solid round nodes (red) are the responding sensors that send out detection records, such as s 1 , s 2 s . The centers of the estimated regions are tagged as hollow triangles. Sensor s 6 is a non-responding sensor that does not generate any detection record. It is tagged as a shadowed round node (blue).

Example 1 reveals three major problems with passive sen-sors: (1) Even when the intruder is detected by multiple sensors, each sensor reports the intruder X  X  appearance with a margin of error. Those detection records should be ag-gregated for a more accurate result; (2) Some false positive records are generated, such as r 2 , 1 and r 5 , 1 . The system must filter them out; (3) The sensor, s 6 , should send out a detection record but it fails to do so. It is a false negative. Definition 2. (Valid Detection) Let q k,j be the position of intruder o k in time t j . A record r i,j is a valid detec-tion if there exists an intruder o k that dist ( cen ( r i,j rad ( r i,j ).

False positive and false negative records are caused by various reasons, such as the wind blowing and animal move-ments. Sensor reliability is a critical factor that impacts the quality of detection results. We introduce two measurements of the sensor X  X  reliability, as defined below.
 Definition 3. (Robustness) Let s be a sensor, the ro-bustness  X  ( s ) denotes the proportion of valid detections in all the records generated by s .
 Definition 4. (Sensitivity) Let s be a sensor, the sen-sitivity  X  ( s ) denotes the probabilities that s sends out a valid detection record when an intruder passes through s  X  X  watching area.

Knowledge of the sensor X  X  robustness and sensitivity are important for filtering out false data. However, the two scores may change over time. In the beginning, the sensor X  X  robustness and sensitivity are both high. As time elapses, sensors may be damaged by the harsh environment, or run out of battery power. Therefore, both scores will drop and they should be dynamically updated based on the detection results.

The intruder is an object entering the watching area. The system discovers the intruder X  X  movement as an intruder tra-jectory , which is a sequence of intruder appearances in dif-ferent timestamps.
 Definition 5. (Intruder Trajectory) Let o k be an in-truder and t j be a timestamp; the intruder appearance p k,j is a spatial coordinate estimated by the system to indicate o  X  X  position in t j . The intruder trajectory L k is a sequence of o k  X  X  appearances, L k = { p k, 1 , p k, 2 , . . . , p
Since users are only interested in trajectories that are long enough, they may set a threshold  X  on the trajectory size. In addition, the sensor data arrive continuously in a data stream format. The system cannot output the results after scanning the whole dataset. Users require intruder trajecto-ries to be discovered in the data stream.

Now we formally define the problem of  X  X ining lines in the sand X .
 Problem Statement : Let S be the set of sensors and R be the sensor data arriving by time, R = { R 1 , R 2 , . . . , R fixed and their robustness and sensitivity scores are initial-ized. Given a length threshold  X  , the task of  X  X ining lines in the sand X  is to discover the set of intruder trajectories L = { L 1 , L 2 , . . . , L k } in real time, where size ( L
Note that the total number of intruders is not known in advance. LiSM is required to discover the trajectories of all the intruders entering the watching area. We will introduce the detailed techniques of LiSM in the following sections. Figure 3 lists the notations used throughout this paper.
In Example 1, s 1 , s 3 and s 4 all detect the appearance of intruder o 1 . However, another nearby sensor, s 6 , should de-tect the intruder but does not generate any record. Such non-responding sensor disagrees with its responding neigh-bors. Therefore, the first task of LiSM is to retrieve the hidden relationships of these sensors and intruders. Definition 6. (Watching Sensors) Let S be the sensor set and r i,j be a detection record, the watching sensor set where dist ( s, cen ( r i,j )) denotes the distance between sensor s and the center of r i,j , range ( s ) is s  X  X  maximum sensing range.

Theoretically, if there is a real intruder appearing in the reported area of r i,j , all the sensors of S ( r i,j ) should send out detection records. However, only a subset of them send records to indicate the intruder X  X  appearance around r i,j The set of watching sensors is partitioned into two parts of responding sensors and non-responding sensors .
 Definition 7. (Responding Sensors) Let r i,j be a de-tection record, and S ( r i,j ) be the watching sensor set of r i,j , the responding sensor set S r ( r i,j ) = { s k | s dist ( cen ( r k,j ) , cen ( r i,j ))  X  rad ( r k,j ) + rad ( r responding sensor set S n ( r i,j ) = S ( r i,j )  X  S r ( r
Based on Definitions 6 and 7, we can construct a watching network. This network contains nodes representing sensors and records. Two types of links are constructed in the net-work: positive links connect records to responding sensors and negative links connect records to non-responding sen-sors.
 Example 2 . Figure 4 shows a watching network constructed from the records in Example 1. For each record r i,j , the system draws a circle with center at cen ( r i,j ) and radius as range ( s ) + rad ( r i,j ). The watching sensors S ( r located inside this circle (We only draw a circle of r 4 , 1 Figure 4 for simplicity). The system then connects records with positive links (solid lines) to responding sensors, and generates negative links (dashed lines) between records and non-responding sensors. Since sensor s 6 does not send any record, it has negative links to all the related records. Note that even though s 2 is a watching sensor of r 4 , 1 and s out a detection record r 2 , 1 , the distance between cen ( r and cen ( r 2 , 1 ) is larger than rad ( r 4 , 1 )+ rad ( r link between s 2 and r 4 , 1 is a negative link.
In the sensor data, many detection records are caused by the same intruder, e.g. , r 1 , 1 , r 3 , 1 and r 4 , 1 are caused by intruder o 1 . Such records are called homologous records . Definition 8. (Homologous Records) Let q k,j be the position of intruder o k in time t j and R j be the detection record set in t j . The homologous record set H k,j = { r | r R , dist ( cen ( r i,j ) , q k,j )  X  rad ( r i,j ) } .
I f the intruder X  X  position, q k,j , is known in advance, the system can easily find the homologous records. However, the intruder X  X  position is exactly required as the mining re-sult. The system has to approximate the homologous records based on the following property.
 Property 1. Let H k,j be a homologous record set in t j , r i,j , r l,j  X  H k,j be two records, and s i , s l be the sensors that send out those records. Then s i is a responding sensor of r l,j and s l is a responding sensor of r i,j .
 Proof : Let q k,j be the position of the corresponding in-truder in H k,j . According to Definition 8, dist ( cen ( r  X  rad ( r i,j ) and dist ( cen ( r l,j ) , q k,j )  X  rad ( r
Based on triangle inequality, dist ( cen ( r i,j ), cen ( r dist ( cen ( r i,j ), q k,j ) + dist ( cen ( r l,j ), q k,j
By Definition 7, s i is a responding sensor of r l,j and s a responding sensor of r i,j .

Th e homologous record sets can be generated on the watch-ing network. The system first picks a record as the seed to initialize a homologous record set, and retrieves all the re-sponding sensors following the positive links. The records of those responding sensors are checked and added to the homologous record set.

Once the homologous record set is generated, we can es-timate the position of an intruder appearance with Eq.1, where  X  i,j is a normalized weight based on the radius of r i,j . The records with with lower uncertainty ( i.e. , smaller radius) have higher weights in determining the position of intruder appearance. Note that we adopt a linear model to compute  X  i,j for general cases, the weight computation can be modified based on specific signal decay models of the sensors.
Then the system retrieves the set of watching sensors for the newly computed intruder appearance and finds its re-sponding and non-responding sensors.
 Definition 9. Let S be the sensor set and p k,j be an in-truder appearance, the watching sensor set S ( p k,j ) = { s | s  X  S, dist ( s, p k,j ) &lt; range ( s ) } .
 Definition 10. Let p k,j be an intruder appearance, and S ( p k,j ) is the watching sensor set of p k,j , the responding sensor set S r ( p k,j ) = { s i | s i  X  S ( p k,j ), dist ( p rad ( r i,j ) } , the non-responding sensor set S n ( p k,j S
The intruder appearances are added as new nodes to the watching network. Similarly, the positive and negative links are connected between the sensors and the appearances, as shown in Figure 5.

With the link information of the watching network, we can estimate the trustworthiness of each intruder appear-ance based on the sensor X  X  robustness and sensitivity. For an appearance p k,j , let s i  X  S r ( p k,j ) be a responding sensor, and s j  X  S n ( p k,j ) be non-responding sensor. If p k,j appearance, then s i reports a valid detection and s j is a false negative. The probability of p k,j being a valid detection is calculated as Eq.2, where  X  ( s i ) is the robustness of s Fi gure 5: Example: The Watching Network with Intruder Appearances  X  ( s j ) is the sensitivity of s j .

Similarly, the probability of p k,j being a false positive can be written as Eq.3.

The trustworthiness of intruder appearance,  X  ( p k,j ), is then calculated as Eq.4.  X  ( p k,j ) = log Pr ( p k,j )
Figure 6 lists the algorithm to detect the intruder appear-ances. The algorithm first scans each detection record and retrieves the responding and non-responding sensors (Lines 1  X  4). Then the system initializes the homologous record H k,j by randomly picking a seed record from the watching network (Lines 6  X  7). For each unvisited record r i,j in H the algorithm retrieves r i,j  X  X  responding sensors and checks its record r l,j . If r l,j does not belong to any existing ho-mologous record sets and the distances from r l,j to all other records of H k,j is less than the sum of the radius, r l,j added to H k,j (Lines 8  X  14). Once H k,j is generated, the system calculates the intruder appearance p k,j and adds it to the network (Lines 15  X  18).
The watching network discovers the intruder appearances in each snapshot. It is an effective tool for  X  X ining dots in the sand X . However, a more critical task is  X  X onnecting the dots as lines X . Since the intruders do not send out any iden-tification information, the system has to distinguish them automatically.

After mining the intruder appearances in the first snap-shot, LiSM initializes a set of candidate trajectories. Each candidate trajectory contains a discovered intruder appear-ance. In the following snapshots, the system matches the newly detected intruder appearances with the candidate tra-jectories. The appearances with the highest matching prob-abilities are added to the corresponding candidate trajecto-ries. Fi gure 6: Algoirthm: The Intruder Appearance De-tection
Let p i,j be an intruder appearance in time t j , L k be a can-didate trajectory, the trustworthiness of p i,j belonging to L is computed as shown in Eq.5, where  X  ( p i,j ) is the trustwor-thiness of p i,j , and P ( p i,j , L k ) is the matching probability of p i,j and L k .
The key issue is computing the matching probability be-tween an intruder appearance and a candidate trajectory. To this end, we propose the cone model . This model stores the intruder X  X  recent moving history and predicts the in-truder X  X  next move in a cone area. The detected intruder appearances are projected on to the area to compute the matching probability.
 Definition 11. (  X  -recent Trajectory) Let L k be the trajectory of intruder o k , t j be the current timestamp and  X  be a positive number,  X   X  size ( L k ). The  X  -recent trajectory L
The  X  -recent trajectory contains the  X  -latest appearances of intruder o k before time t j . It is a short history of the in-truder X  X  movement. The system can calculate o k  X  X  recent moving speed and direction based on L  X  k . The mean and deviation of the intruder speed in period [ t j  X   X  , t j  X  1 culated as shown in Eqs. 6 and 7.
We use the function direction ( p k,i , p k,i +1 ) to measure the angle between o k  X  X  moving direction and the x -axis in time [ t , t i +1 ]. The mean and deviation of the moving direction are computed as shown in Eqs. 8 and 9.
When intruders pass through the watching area, they are unlikely to change moving speed and direction dramatically. We make the assumption that the values of intruder speed and direction follow a normal distribution, and build a cone model to predict the area of o k  X  X  appearance in t j . Example 3. Figure 7 shows the cone model for intruder o . Suppose  X  is set to 5; the system retrieves o k  X  X  latest five appearances as L  X  k , and computes o k  X  X  speed and direc-tion. If those parameters follow a normal distribution, the probability is 99.7% that o k  X  speed and direction of period [ t j  X  1 , t j ] are within three standard deviations of the mean values. The system calculates the four boundary points as shown in Figure 7. The area of o k  X  X  next possible appearance is then generated as a partial cone with apex in p k,j  X  1
Let p i,j be an intruder appearance in the cone area, and p k,j  X  1 be the latest intruder appearance of L  X  k , if intruder o k moves from p k,j  X  1 to p i,j , then o k  X  X  speed and direction in [ t j  X  1 , t j ] are estimated as Eqs. 10 and 11.
By comparing  X  v k,j and  X   X  k,j , the system can estimate the matching probability between p i,j and L k as Eq. 12. Ex ample 4. Suppose there are three intruder appearances detected in t j , as shown in Figure 7. p 1 ,j and p 2 ,j th e cone area and p 3 ,j is outside the area. Their trustworthi-ness scores are:  X  ( p 1 ,j ) = 0 . 1,  X  ( p 2 ,j ) = 0 . 8,  X  ( p Even p 3 ,j has the highest trustworthiness, it is impossible to be an appearance of L k . By considering the matching prob-ability and trustworthiness of remaining two appearances, the system selects p 2 ,j as the intruder X  X  appearance in t
Note that we make the assumption that the values of in-truder speed and direction follow a normal distribution in this study. Based on our experiment results, this assump-tion works well. The cone model can be adopted to other distributions/models of the intruder movements.

If the trajectory L k does not contain enough intruder ap-pearances ( i.e. , size ( L k )  X   X  ), the system will construct a cone model with default speed v 0 and  X  ( v 0 ). The default parameters can be specified by the user, or calculated as the mean of all the other intruders X   X  -recent trajectories. In such a case, the system also releases the constraint on movement direction ( i.e. , the intruder may move in any direction). The matching probability is then written as Eq.13.
 Figure 8 shows the detailed steps of trajectory tracking. For each candidate trajectory L k , Algorithm 2 first checks the trajectory size. If the size is larger than  X  , the system retrieves  X  -recent trajectory L  X  k and calculates the intruder X  X  speed and direction. If the size of L k is less than  X  , the system uses the default parameters (Lines 2  X  5). Then the algorithm constructs the cone model. For each intruder appearance inside the cone area, the system calculates the matching probability. The one with the highest probability is tagged as  X  X atched X  and added in L k (Lines 6  X  15). Finally the system initializes new candidate trajectories for the unmatched intruder appearances (Lines 16  X  18). Fi gure 8: Algorithm: The Trajectory Tracking
In Algorithm 2, the system initializes new trajectories based on unmatched intruder appearances in every snap-shot. However, majority of them are  X  X host trajectories X . The ghost trajectories are generated by the untrustworthy appearances (false positives), such as p 2 , 1 , p 3 , 1 in Figure 5. It is a burden for the system to maintain them in memory. When the time elapses, real trajectories grow longer with more subsequent appearances added in, but ghost trajecto-ries are unlikely to get more appearances. Hence we can eventually prune them.
 Definition 12. (Trajectory Expectation) Let L k be a candidate trajectory and t j be the current timestamp, the trajectory expectation E j ( L k ) denotes the expectation that L k is a qualified mining result in time t j . E j ( L k ) is defined as shown in Eq.14, where t 1 is the timestamp of the first intruder appearance in L k , and  X  is a decay constant.
In the end of every snapshot, the system checks the ex-pectation of each candidate trajectory. If the expectation is less than zero, such a trajectory is unlikely to become a qualified result and should be removed from main mem-ory. Meanwhile, if a trajectory X  X  length is longer than the threshold  X  , the system will report it to the user.
In many CPS applications, the sensors may be damaged by the environment or run out of battery power as time elapses; the system should also update the sensor X  X  reliability scores.

Let L k be a candidate trajectory, L k = { p k, 1 , p k, 2 p k,n } . If L k is removed from the candidate set as a ghost trajectory, all the intruder appearances of L k will be tagged as X  X host appearances X . Let p k,j be such a ghost appearance. For all the responding sensors s i  X  S r ( p k,j ), s i has reported a false positive, and its robustness should be reduced.  X  ( s is then updated as shown in Eq.15, where l i is the number of false positives reported by s i , and n i is the total number of detection records generated by s i .
Meanwhile, if L k is output as a qualified mining result, all the intruder appearances of L k are considered to be true. Let p k,j be a true appearance, for the non-responding sensor s S ( p k,j ), s j has made a false negative error, the sensitivity of s i is then reduced as shown in Eq. 16, where f i is the number of false negatives by s i , m i is the total number of intruders passed through s i  X  X  watching area. Let l i be the number of false positives by s i , and n i be the total number of detection records sent by s i , m i = n i  X  l i + f i . Datasets: To test the performance of LiSM in big and un-trustworthy data, we generated four datasets based on the real military trajectories from the CBMANET project [5], in which an infantry battalion moves from Fort Dix to Lake-hurst during a mission lasting 3 hours. The data generator retrieves 20 to 40 vehicle trajectories from CBMANET and simulates sensor monitoring fields along their routes with 200 to 10,000 deployed sensors. Each sensor scans the des-ignated area every 10 seconds. If an intruder passes by, th e sensor generates a detection record. The data genera-tor randomly selects some sensors as false positive reporters, which may generate detection records without any local in-truder. The set of false negative reporters is also generated, such sensors may not send detection record when an intruder passes by. The detailed features of those datasets are listed in Figure 9.
 Baselines: The proposed LiSM algorithm (LM) is com-pared with two baselines: (1) The Karlman Filtering based method (KF); (2) TruAlarm method with nearest-neighboring tracking strategy (TA) [14].
 Environments: The experiments are conducted on a PC with Intel 7500 Dual CPU 2.20G Hz and 3.00 GB RAM. The operating system is Windows 7 Enterprise. All the al-gorithms are implemented in Java on Eclipse 3.3.1 platform with JDK 1.5.0. The detailed parameter settings are listed in Figure 9.

In the first experiment, we evaluate the efficiency of dif-ferent algorithms with default parameters. The system pro-cesses LM, KF and TA on the four datasets and records their time costs. Figure 10(a) shows the results on the four datasets. Note that the y -axis is in logarithmic scale. In general, all three algorithms are efficient enough to pro-cess the data. LM achieves the best efficiency in all the cases, because the algorithm filters out low-expectation tra-jectory candidates in each snapshot and tracks the trajecto-ries quickly with the cone model.
 Then we study the factors that influence LM X  X  efficiency. We set the decay factor  X  from 0.05 to 0.2 and record the algorithm X  X  time cost on datasets D 1 to D 4 in Figure 10(b). With larger  X  , the system prunes more candidate trajecto-ries and achieves better time efficiency. We also study the algorithm X  X  running time with trajectory size threshold  X  and the recent trajectory length  X  . Both parameters do not influence the algorithm X  X  efficiency, so we omit the results here.
To evaluate the quality of mining results, we retrieve the intruders X  true trajectories as ground truth and compare against the mining results. There are two stage of  X  X ining lines in the sand X : (1) detecting the intruder appearances; (2) tracking their trajectories. In this experiment, we first Fi gure 10: Efficiency: (a) time costs on different datasets and (b) influence of  X  . compare the detected intruder appearances with the ground truth. If their distance is less than a reasonable error bound (20 meters), the detection is considered as a valid result. Then we check each generated trajectory L k , if more than 90% of L k  X  X  intruder appearances can be matched to a real trajectory in the ground truth, we consider L k as a valid tra-jectory. Finally, we compute two measurements to evaluate the algorithms X  effectiveness.  X  Precision: The proportion of valid appearances/trajectories over the mining results. This represents the algorithm X  X  selectivity for filtering out false positives.  X  Recall: The proportion of valid appearances/trajectories over the ground truth. This criterion shows the algo-rithm X  X  sensitivity for detecting the intruders.

The detection precision and recall of LM, KF and TA are shown in Figure 11. All the three methods can achieve a relative high recall of about 80%. However, the precision of KF and TA drops rapidly in D 3 and D 4 , which have more untrustworthy data. The precision of KF is less than 20% in D 4 , which is only one fourth of LM X  X  precision. TA X  X  precision is also lower than 50%. In contrast, LM filters out the false positive data and keeps the precision over 80%. Fi gure 11: Effectiveness: Detecting (a) precision and (b) recall of intruder appearances on different datasets.

Then we check the tracking precision and recall of the three algorithms. The results are shown in Figure 12. TA X  X  tracking performance is much worse than its detection effec-tiveness. The average precision is about 40% and the recall is less than 20%. This is caused by TA X  X  tracking strategy: the nearest-neighboring tracking method always selects the nearest intruder appearance to add to the candidate trajec-tory. When there are multiple intruders whose trajectories in tersect, the nearest-neighboring method is very likely to mix up their trajectories. KF X  X  precision is also not high. This is due to the low precision of KF in the detection step. If the algorithm cannot detect the intruder appearances ef-fectively in the first stage, the tracking results are inevitably influenced by the false positives. The precision and recall of LM are much higher; both of them are around 80%. These results indicate that LM is more suitable than TA and KF to process datasets with many untrustworthy reports. Fi gure 12: Effectiveness: Tracking (a) precision and (b) recall of intruder trajectories on different datasets.

In the next experiment, we investigate LM X  X  precision and recall with different trajectory length threshold  X  . The re-sults are shown in Figures 13 and 14. With larger  X  , fewer trajectories are reported. Hence the algorithm X  X  precision increases, but the recall drops. Based on the experiment results, our suggestion is to select moderate  X  ( e.g. , 8 to 10) to make LM achieve the best performance. Fi gure 13: Effectiveness: Detecting (a) precision and (b) recall w.r.t.  X  .
 Finally, we study the influences of parameter  X  and  X  . The results of LM X  X  effectiveness are recorded in Figures 15 to 18. If the length of  X  -recent trajectory is too short, LM may not be able to track the intruder with an accurate cone model. The decay factor  X  is used to filter the candidate tra-jectories; if it is set too large, the algorithm may prune some trustworthy candidates. The recall of LM is then reduced. Therefore,  X  should be set as a reasonable large value ( e.g. , 6 to 9) and  X  should be set relatively small ( e.g. , 0.05).
The problem of mining trajectories from sensor data has received increasing attention in recent years, the related studies can be loosely classified into two categories. Fi gure 14: Effectiveness: Tracking (a) precision and (b) recall w.r.t.  X  . Fi gure 15: Effectiveness: Detecting (a) precision and (b) recall w.r.t.  X  .
 Intruder Detection. Arora et al. propose the intrusion de-tection problem in wireless networks and design a detection model with acoustic and magnetic sensors [1]. Ozdemir et al. use the techniques of particle filtering to detect intruders [11]. Sheng and Hu propose the maximum likelihood-based estimation method [12] and Tang et al. propose the Tru-Alarm filtering method [14].

The main concern of these methods is to detect the intrud-ers in a single snapshot, i.e. , without considering the tem-poral information of the intruders X  movement. Some studies focus on saving sensors X  energy and communication band-width, they try to provide an optimal sensor deployment plan. LiSM actually complements those technologies and improves the system X  X  applicability.
 Trajectory Tracking. Lin et al. propose a framework for the in-network intruder tracking [8]. Zhong et al. provide the techniques to track intruders with a sequence of alarm-ing sensors [18]. Oh et al. propose the Markov Chain data association method for target tracking [10].

In these studies, the researchers assume that the targets X  locations at each snapshot are already known. They focus on connecting the targets X  locations at different snapshots to generate trajectories. However, as pointed out in [1], the intruder tracking results cannot be accurate based on many false intruder detections. To the best of our knowl-edge, LiSM is the first study to solve both detecting and tracking problems in an integrated framework.
In this study we investigate the problem of mining tra-jectories in cyber-physical systems. We propose a novel 60% 70% 80% 90% 100% Fi gure 16: Effectiveness: Tracking (a) precision and (b) recall w.r.t.  X  . Fi gure 17: Effectiveness: Detecting (a) precision and (b) recall w.r.t.  X  . method, LiSM , to discover intruder trajectories from un-trustworthy sensor data. The watching network is designed to detect intruder appearances and the cone model is used to track their trajectories. We evaluate the proposed al-gorithms in extensive experiments on big datasets. LiSM outperforms the state-of-the-art methods on both detection and tracking tasks with higher precision and recall.
LiSM is proposed in 2D Euclidean environment. We are going to extend LiSM on more complicated scenarios such as the 3D environment, road networks and the indoor environ-ment with obstacles. We are also interested in integrating more information, including the weather and local traffic, to improve the system performance.
The work was supported in part by U.S. National Sci-ence Foundation grants IIS-0905215, CNS-0931975, CCF-0905014, IIS-1017362, the U.S. Army Research Laboratory under Cooperative Agreement No.W911NF-09-2-0053 (NS-CTA) and W911NF-11-2-0086. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official poli-cies, either expressed or implied, of the Army Research Lab-oratory or the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Govern-ment purposes notwithstanding any copyright notice herein. Fi gure 18: Effectiveness: Tracking (a) precision and (b) recall w.r.t.  X  .
