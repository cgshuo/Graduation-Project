 Large amounts of data are currently available to train statistical machine translation systems. Un-fortunately, these training data are often qualita-tively different from the target task of the transla-tion system. In this paper, we consider one specific aspect of domain divergence (Jiang, 2008; Blitzer and Daum  X e III, 2010): the out-of-vocabulary prob-lem. By considering four different target domains (news, medical, movie subtitles, technical documen-tation) in two source languages (German, French), we: (1) Ascertain the degree to which domain di-vergence causes increases in unseen words, and the degree to which this degrades translation perfor-mance. (For instance, if all unknown words are names, then copying them verbatim may be suffi-cient.) (2) Extend known methods for mining dic-tionaries from comparable corpora to the domain adaptation setting, by  X  X ootstrapping X  them based on known translations from the source domain. (3) Develop methods for integrating these mined dictio-naries into a phrase-based translation system (Koehn et al., 2007).

As we shall see, for most target domains, out of vocabulary terms are the source of approximately half of the additional errors made. The only excep-tion is the news domain, which is sufficiently sim-ilar to parliament proceedings (Europarl) that there are essentially no new, frequent words in news. By mining a dictionary and naively incorporating it into a translation system, one can only do slightly bet-ter than baseline. However, with a more clever inte-gration, we can close about half of the gap between baseline (unadapted) performance and an oracle ex-periment. In most cases this amounts to an improve-ment of about 1 . 5 Bleu points (Papineni et al., 2002) and 1 . 5 Meteor points (Banerjee and Lavie, 2005).
The specific setting we consider is the one in which we have plentiful parallel ( X  X abeled X ) data in a source domain (eg., parliament) and plentiful com-parable ( X  X nlabeled X ) data in a target domain (eg., medical). We can use the unlabeled data in the tar-get domain to build a good language model. Finally, we assume access to a very small amount of parallel ( X  X abeled X ) target data, but only enough to evaluate on, or run weight tuning (Och, 2003). All knowl-edge about unseen words must come from the com-parable data. Domain adaptation is a well-studied field, both in the NLP community as well as the machine learning and statistics communities. Unlike in machine learning, in the case of translation, it is not enough to simply adjust the weights of a learned translation model to do well on a new domain. As expected, we shall see that unseen words pose a major challenge for adapting translation systems to distant domains. No machine learning approach to adaptation could hope to attenuate this problem.

There have been a few attempts to measure or per-form domain adaptation in machine translation. One of the first approaches essentially performs test-set relativization (choosing training samples that look most like the test data) to improve translation per-formance, but applies the approach only to very small data sets (Hildebrand et al., 2005). Later approaches are mostly based on a data set made available in the 2007 StatMT workshop (Koehn and Schroeder, 2007), and have attempted to use mono-lingual (Civera and Juan, 2007; Bertoldi and Fed-erico, 2009) or comparable (Snover et al., 2008) cor-pus resources. These papers all show small, but sig-nificant, gains in performance when moving from Parliament domain to News domain. Our source domain is European Parliament proceedings ( http://www.statmt.org/ europarl/ ). We use three target domains: the News Commentary corpus (News) used in the MT Shared task at ACL 2007, European Medicines Agency text (Emea), the Open Subtitles data (Subs) and the PHP technical document data, provided as part of the OPUS corpus http: //urd.let.rug.nl/tiedeman/OPUS/ ).
 We extracted development and test sets from each of these corpora, except for news (and the source domain) where we preserved the published dev and test data. The  X  X ource X  domain of Europarl has 996k sentences and 2130k words.) We count the number of words and sentences in the English side of the parallel data, which is the same for both language pairs (i.e. both French-English and German-English have the same English). The statistics are: Dom Most frequent OOV Words
News ( 17% )
Emea ( 49% )
Subs ( 68% )
PHP ( 44% )
All of these data sets actually come with parallel target domain data. To obtain comparable data, we applied to standard trick of taking the first 50% of the English text as English and the last 50% of the German text as German. While such data is more parallel than, say, Wikipedia, it is far from parallel.
To get a better sense of the differences between these domains, we give some simple statistics about out of vocabulary words and examples in Table 1. Here, for each domain, we show the percentage of words (types) in the target domain that are unseen in the Parliament data. As we can see, it is markedly higher in Emea, Subs and PHP than in News. Our dictionary mining approach is based on Canon-ical Correlation Analysis, as used previously by (Haghighi et al., 2008). Briefly, given a multi-view data set, Canonical Correlation Analysis is a tech-nique to find the projection directions in each view so that the objects when projected along these di-rections are maximally aligned (Hotelling, 1936). Given any new pair of points, the similarity between the them can be computed by first projecting onto the lower dimensions space and computing the co-sine similarity between their projections. In general, using all the eigenvectors is sub optimal and thus retaining top eigenvectors leads to an improved gen-eralizability.

Here we describe the use of CCA to find the trans-lations for the OOV German words (Haghighi et al., 2008). From the target domain corpus we extract the most frequent words (approximately 5000) for both the languages. Of these, words that have translation in the bilingual dictionary (learnt from Europarl) are used as training data. We use these words to learn the CCA projections and then mine the translations for the remaining frequent words. The dictionary mining involves multiple stages. In the first stage, we extract feature vectors for all the words. We use context and orthographic features. In the sec-ond stage, using the dictionary probabilities of seen words, we identify pairs of words whose feature vec-tors are used to learn the CCA projection directions. In the final stage, we project all the words into the sub-space identified by CCA and mine translations for the OOV words. We will describe each of these steps in detail in this section.

For each of the frequent words we extract the con-text vectors using a window of length five. To over-come data sparsity issue, we truncate each context word to its first seven characters. We discard all the context features which co-occur with less than five words. Among the remaining features, we consider only the most frequent 2000 features in each lan-guage. We convert the frequency vectors into TFIDF vectors, center the data and then binarize the vec-tors depending on if the feature value is positive of not. We convert this data into word similarities us-ing linear dot product kernel. We also represent each word using the orthographic features, with n-grams of length 1-3 and convert them into TFIDF form and subsequently turn them into word similarities (again using the linear kernel). Since we convert the data into word similarities, the orthographic features are relevant even though the script of source and tar-get languages differ. Where as using the features directly rending them useless for languages whose script is completely different like Arabic and En-glish. For each language we linearly combine the kernel matrices obtained using the context vectors and the orthographic features. We use incomlete cholesky decomposition to reduce the dimension-ality of the kernel matrices. We do the same pre-processng for all words, the training words and the OOV words. And the resulting feature vectors for each word are used for learning the CCA projections
Since a word can have multiple translations, and that CCA uses only one translation, we form a bipar-tite graph with the training words in each language as nodes and the edge weight being the translation probability of the word pair. We then run Hungar-ian algorithm to extract maximum weighted bipar-tite matching (Jonker and Volgenant, 1987). We then run CCA on the resulting pairs of the bipartite matching to get the projection directions in each lan-guage. We retain only the top 35% of the eigenvec-tors. In other relevant experiments, we have found that this setting of CCA outperforms the baseline ap-proach.

We project all the frequent words, including the training words, in both the languages into the lower dimensional spaces and for each of the OOV word return the closest five points from the other language as potential new translations. The dictionary min-ing, viewed subjectively and intrinsically, performs quite well. In Table 2, we show four randomly se-lected unseen German words from Emea (that do not occur in the Parliament data), together with the top three translations and associated scores (which are not normalized). Based on a cursory evaluation of 5 randomly selected words in French and German by native speakers (not the authors!), we found that 8/10 had correct mined translations. The output of the dicionary mining approach is a list of pairs ( f, e ) of foreign words and predicted En-glish translations. Each of these comes with an as-sociated score. There are two obvious ways to in-tegrate such a dictionary into a phrase-based trans-lation system: (1) Provide the dictionary entries as (weighted)  X  X entence X  pairs in the parallel corpus. These  X  X entences X  would each contain exactly one word. The weighting can be derived from the trans-lation probability from the dictionary mining. (2) Append the phrase table of a baseline phrase-based translation model trained only on source domain data with the word pairs. Use the mining probability as the phrase translation probabilities.

It turned out in preliminary experiments (on Ger-man/Emea) that neither of these approaches worked particularly well. The first approach did not work at all, even with fairly extensive hand-tuning of the sentence weights. It often hurt translation perfor-mance. The second approach did not hurt transla-tion performance, but did not help much either. It led to an average improvement of only about 0 . 5 Bleu points, on development data. This is likely be-cause weight tuning tuned a single weight to account for the import of the phrase probabilities across both  X  X rue X  phrases as well as these  X  X ined X  phrases.
We therefore came up with a slightly more com-plex, but still simple, method for adding the dic-tionary entries to the phrase table. We add four new features to the model, and set the plain phrase-translation probabilities for the dictionary entries to zero. These new features are: 1. The dictionary mining translation probability. 2. An indicator feature that says whether all Ger-3. An indicator that says whether all German 4. The conjunction of the previous two features.
Interestingly, only adding the first feature was not helpful (performance remained about 0 . 5 Bleu points above baseline). Adding only the last three features (the indicator features) alone did not help at all (performance was roughly on par with baseline). Only when all four features were included did per-formance improve significantly. In the results dis-cussed in Section 6.2, we report results on test data using the combination of these four features. In all of our experiments, we use two trigram lan-guage models. The first is trained on the Gigaword corpus. The second is trained on the English side of the target domain corpus. The two language models are traded-off against each other during weight tun-ing. In all cases we perform parameter tuning with MERT (Och, 2003), and results are averaged over three runs with different random initializations. 6.1 Baselines and Oracles Our first set of experiments is designed to establish baseline performance for the domains. In these ex-periments, we built a translation model based only on the Parliament proceedings. We then tune it us-ing the small amount of target-domain tuning data and test on the corresponding test data. This is row B
ASELINE in Table 3. Next, we build an oracle, based on using the parallel target domain data. This system, O R in Table 3 is constructed by training a system on a mix of Parliament data and target-domain data. The last line in this table shows the percent improvement when moving to this oracle system. As we can see, the gains range from tiny ( 4% relative Bleu points, or 1 . 2 absolute Bleu points for news, which may just be because we have more data) to quite significant ( 73% for medical texts).
Finally, we consider how much of this gain we could possible hope to realize by our dictionary min-ing technique. In order to estimate this, we take the O R system, and remove any phrases that con-tain source-language words that appear in neither the Parliament proceedings nor our list of high fre-quency OOV terms. In other words, if our dictio-nary mining system found as-good translations for the words in its list as the (cheating) oracle system, this is how well it would do. This is referred to as O R -OOV in Table 3. As we can see, the upper bound on performance based only on mining unseen words is about halfway (absolute) between the base-line and the full Oracle. Except in news, when it is essentially useless (because the vocabulary differ-ences between news and Parliament proceedings are negligible). (Results using Meteor are analogous, but omitted for space.) 6.2 Mining Results The results of the dictionary mining experiment, in terms of its effect on translation performance, are shown in Table 4. As we can see, there is a mod-est improvement in Subtitles and PHP, a markedly large improvement in Emea, and a modest improve-ment in News. Given how tight the O RACLE results were to the B ASELINE results in Subs and PHP, it is quite impressive that we were able to improve per-formance as much as we did. In general, across all the data sets and both languages, we roughly split the difference (in absolute terms) between the B In this paper we have shown that dictionary mining techniques can be applied to mine unseen words in a domain adaptation task. We have seen positive, consistent results across two languages and four do-mains. The proposed approach is generic enough to be integrated into a wide variety of translation sys-tems other than simple phrase-based translation.
Of course, unseen words are not the only cause of translation divergence between two domains. We have not addressed other issues, such as better es-timation of translation probabilities or words that change word sense across domains. The former is precisely the area to which one might apply do-main adaptation techniques from the machine learn-ing community. The latter requires significant ad-ditional work, since it is quite a bit more difficult to spot foreign language words that are used in new senses, rather that just never seen before. An alter-native area of work is to extend these results beyond simply the top-most-frequent words in the target do-main.
