 Continuous monitoring of a business process can be defined as the set of method-ology and tools to collect and disseminate relevant information about the process execution to interested stakeholders simultaneously with, or within a reasonably short period after, the occurrence of relevant events in the process [6]. Continu-ous monitoring has straightforward benefits, such as the opportunity for process providers to detect anomalies in (almost) real time and apply control actions on-the-fly.

Research on (continuous) monitoring in cross-organizational processes has usually taken an information-centric perspective, focusing on the definition of monitoring requirements for the collaborating parties and their evolution [6,11], the design of architectures and tools to capture monitoring information [17], the detection of contract violations, given the available monitoring information [3], or the verification of the compliance of execution logs to a process specification [18].
Although the information-centric view can suffice for intra-organizational pro-cess monitoring, where all monitoring information is produced in a given busi-ness domain, in cross-organizational settings researchers stress the importance of process-and communication-oriented mechanisms to transmit relevant infor-mation to interested parties across the collaborative network [7,11]. In other words, once the monitoring information is captured and made available by the collaborating parties, a process must be built to allow a specific party to retrieve (or be delivered) the monitoring information in the right way. Such monitoring process should account for the temporal and aggregation dependencies among monitoring information.

Let us consider the running example of a business network for factoring in the manufacturing industry (see Fig. 1), constituted by a supplier, a set of con-tractors (two in our case), a consumer, and a factor. The supplier, in particular, acts as the coordinating hub of the set of contractors, which execute the process required to deliver the product ordered by the consumer. Factoring is a financial transaction whereby a busin ess (supplier) sells its account receivables (invoices) to a third party financial institution (factor) in exchange for immediate payment. Factoring allows consumers to obtain financing at an interest rate, i.e. the one provided by the factor, lower than the one they could obtain directly from the supplier [10]. In this context, continuous monitoring may help reducing the risks associated to the collaboration, e.g. the risk that the supplier will not deliver thegoodsaspromisedortheriskthattheconsumerwillnotbeabletopay.
 Therefore, continuo us monitoring may help to furth er increase the benefits that the involved parties achieve through the collaboration.

In this scenario, the supplier wants to monitor when the consumer has made the payment to the factor and when the f actor has received such payment. If the consumer does not pay, in fact, the supplier should not agree to further transactions in the future involving the same consumer. Note that (i) payment confirmations are not conveyed to the supplier in the process depicted in Fig. 1 and (ii) a temporal dependency exists between monitoring information, i.e. if the supplier checks the factor acknowledgment of the payment without knowing if the consumer has actually sent out the payment, he or she may have an inconsistent view on the process (and may take wrong c orrective actions accordingly).
The factor, similarly, wants to monitor the progress and quality of the process on the supplier side to reduce its own risk. The consumer, in fact, may not be satisfied with the goods, e.g. because of l ate delivery or poor quality, and, as a consequence, may not be willing to pay the factor according to established terms. This information may be delivered either by the supplier, or being reconstructed through more detailed progress information made available by the contractors and aggregated correctly. Again, note that progress information is not conveyed to the factor in the business collaboration depicted in Fig. 1.

The latter example also shows that there could be different alternatives for a party to obtain the required monitoring information and each alternative may be characterized in non-functional terms, e.g. in terms of cost and quality. For instance, progress information made available by contractors may be of higher quality and cost, whereas the supplier may only have limited visibility on the progress of an order once this is outsour ced to contractors, and therefore may provide such information at a cheaper price.

In this paper, we propose a methodology to design monitoring processes in col-laborative business settings. The methodology considers as input the monitoring information made available by the collaborating parties and builds monitoring processes embedding temporal and aggregation dependencies among monitoring information. Moreover, monitoring information in our methodology can be de-scribed also in non-functional terms, e.g. by cost, quality, and availability. Among the set of possible alternatives, the pro posed methodology allows the selection of the monitoring process satisfying also the party non-functional requirements, e.g. the minimum cost monitoring process or the highest quality process, given a budget constraint.

The design of the monitoring process for cross-organizational business pro-cesses is framed as a PBWD (Product-Based Workflow Design, [16,20,22]) prob-lem. PBWD is an analytical method for automatically deriving business process specifications from the set of information products involved in the process and their dependencies. In the monitoring of collaborative processes, information products are represented by the monitoring information made available by the actors involved in the collaboration.
 The paper is organised as follows. Related work is discussed in Section 2, while Section 3 introduces the background on PBWD and explains its novel applica-tion to the problem of cross-organizational process monitoring. The architecture to integrate the PBWD design of monitoring processes in a service-oriented en-vironment is presented in Section 4, wh ile conclusions are eventually drawn in Section 5. Monitoring of cross-organizational business processes has been investigated, from a requirements engineering perspectiv e, in [7] and [11]. In order to achieve a successful collaboration, both papers s tress the importance of process-and communication-oriented mec hanisms to transmit relevant information to inter-ested parties across the network. Simila rly, [5] considers the need to define ex-ternal information requirements, i.e. information required by a consumer from its providers to correctly monitor a nd enforce a multiparty contract. From the design and implementation pe rspectives, the CrossFlow [8] and CrossWork [9] projects consider architectural support for cross-organizational business processes. Both projects investi gate issues such as the design of flexible architecture to support monitoring [9] and the definition of specific monitor-ing points in electronic contracts [8]. Mo nitoring, however, i s still considered information-centric, i.e. the dependency among monitoring information prod-ucts produced by various sources or the aggregation of monitoring information from several parties are not considered.

Research on Web service-based business processes has also extensively inves-tigated the issue of monitoring. Web ser vice-based processes are intrinsically cross-organizational, since each orchestrated Web service can in principle be ex-posed by a different organization. In th is context, we can distinguish between intrusive and non-intrusive monitoring [2,13]. The former involves the interleav-ing of service and monitoring activities at runtime, whereas the latter separates the business from the monitoring logic, since information relevant for monitoring can be captured non-intrusively while a p rocess is executing, e.g. intercepting service operation calls and responses or from the log of the process engine [13]. Cross-organizational settings require non-intrusive monitoring, since it would not be feasible to implement a different instrumentation to satisfy the moni-toring requirements of each different party with which an organization has to interact. Furthermore, while the aforementioned approaches only consider the monitoring of performance variables, such as response time and availability, or simple conditions describing the beha vior of a service, in this paper we take a business perspective, since PBWD considers business-related information that is deemed relevant by the user of a process.

The innovation of the approach presented in this paper concerns also the aggregation, according to user-specific dependencies, of monitoring information to design a customized monitoring proce ss. Web service-based process monitor-ing considers also aggregation of monitoring information from multiple sources [2,13]. However, monitoring information, such as the timestamps of service calls or process variables, are meaningful on ly at a technical level, and they require further translation before becoming meaningful to and, therefore, relevant for a process user [12]. PBWD considers only informational products meaningful at a business level and, therefore, enable s us to design monitoring processes using informational products that do not need translation. This section introduces some background on the PBWD approach and shows how PBWD can be used to generate monitoring processes. PBWD is a scientifi-cally grounded method for business process (re)design. The focus of this method is on the design of processes that deliver informational products, the so-called workflow processes . The PBWD methodology takes the structure of the informa-tional product , which is described in a Product Data Model (PDM), as a starting point to derive a process mod el. Informational products are, for instance, a deci-sion on an insurance claim, the allocation of a subsidy, or the approval of a loan. Based on the input data provided by the client or retrieved from other systems, the end (informational) product is constructed step-by-step. In each step new information is produced based on the specific data available for the case.
Over recent years, PBWD has shown to be a successful business process (re)design method [15]. For instance, the annual reporting process for mutual funds at a large Dutch bank was successfully redesigned using PBWD. The in-sights in the informational product, achieved by PBWD, led to a 50% decrease in throughput time [20].
PBWD is particularly well-suited for achieving a process-centric view on mon-itoring in cross-organizational processes because of two reasons:  X  Clean-sheet approach to process design : PBWD builds process models di- X  Cost-and quality-aware process design : PDMs, i.e. available informational Fig. 2 shows the steps of the methodology for creating monitoring processes using PBWD for a specific stakeholder in the co llaboration. After having analyzed the monitoring requirements of the stakeholder, the application of PBWD to monitoring processes design involves three steps.
 First, the Product Data Model (PDM) of the stakeholder is designed. The PDM, which is the starting point for the PBWD method, is similar to the concept of a Bill-of-Materials (BoM) [14] used in manufacturing environments to manage and control production processes. Since (digital) information is more flexible than physical products, however, the PDM contains more complex structures than a BoM, such as re-use of information or alternative paths to produce an information element.

Second, among the set of all paths in the PDM that can lead to the correct production of monitoring information, the path which satisfies the non-functional requirements of the stakeholder is sel ected. As discussed later, we consider the cost, (data) quality, and availability dimensions to specify non-functional re-quirements.
 In the third step, a process model is generated for the chosen path.
Eventually, the last step in the methodology concerns the implementation of the monitoring process. In this regard, we discuss an architecture for the imple-mentation of the methodology in a service-oriented environment. This discussion is made in Section 4.

From now on, the paper will focus on the application of PBWD to design monitoring processes to satisfy the monitoring requirements of the consumer (stakeholder) in the running example depicted in Fig. 1. In order to decrease its own risk, the consumer is interested in monitoring (i) the status of the payment and (ii) the progress of requests on the supplier side. Monitoring information on the payment can be reconstructed as a combination of information on when the factor sent out the payment and information on when the supplier received the payment. If for instance, the factor has sent out the payment, but this has not been acknowledged by the supplier in a reasonably short period, then the payment may not have been successful.

Monitoring information on the progress of an order can be provided either by the supplier or directly by the contractors. The supplier has only a low-quality view on the order progress, e.g. the supplier may only report that the order has been sent to contractor 1, but he ca nnot access the details of the internal enactment of contractor 1 X  X  process. More detailed monitoring information can be provided direct ly by contractors. 3.1 The Product Data Model Fig. 3 summarizes in a PDM the information products available to satisfy the monitoring information requirements of the consumer. A PDM is constituted by information products and operations. Information products in the PDM are depicted by circles, while the operations performed on the input elements to produce the output are represented by hyperarcs. Each operation has zero or more input elements and has exactly one output element, i.e. the information product obtained through the combination of its input elements. A PDM may contain alternative paths to produce a certain information element. Hence, we define a path as any sub-graph of the PDM. A complete path is a sub-graph of the PDM containing the root element.

In our example, the correct monitoring information for the consumer (MON) is obtained combining information on the delivery of the payment (PAY) and information on the progress of the request (PRO) . The monitoring information PAY can be obtained either as information on when the factor has sent out the payment ( PF ), information on when the supplier has received the payment ( PS ), or a combination thereof. The progress report ( PRO ) can be obtained either from the supplier ( SPx ) or from the contractors ( Eyx ). Note that x rep-resents the quality of the provided monitoring information, i.e. High or Low ( x  X  X  H, L } ), whereas y identifies the contractor ( y  X  X  1 , 2 } ). The supplier and contractors 1 and 2 can provide two differ ent types of monitoring information, that is, more or less accurate (see SPH and SPL or E1H and E1L ). Operations in the PDM signify the production of an information product. In particular, leaf operations ( Op11 to Op18 ) signify the production of moni-toring information made by the supplier, contractors, and the factor, while the other operations signify the combination of data elements to produce the parent. In this respect, for instance, Op07 signifies the combination, made by the con-sumer, of high quality monitoring information from contractors ( E1H and E2H ) to produce the PRO data element, whereas Op03 signifies the combination of payment information from the factor ( PF ) and the supplier ( PS ) to produce the payment monitoring information PAY .

We express a path by listing its set of operations. For instance, the path {
Op 11 ,Op 02 ,Op 13 ,Op 05 ,Op 01 } is complete, since it leads to the production of the root element MON .

Apart from the functional structure, a PDM also contains additional infor-mation concerning the non-functional aspects of operations. Three dimensions characterize an operation from the non-functional point of view:  X  X ost(C). Represents the cost of executing the operation. In other words,  X  Quality (Q). Represents the quality of the information product perceived  X  Availability (A). Represents the probability that an operation produces its Table 1 shows the values assigned to the non-functional dimensions for the PDM of Fig. 3. Note, for instance, that the high quality progress status information, i.e. obtained through operation Op13 or Op15 , is more costly than the corre-sponding low quality information, i.e. the one obtained through Op14 and Op16 , respectively. This because a supplier need s to capture more information from the infrastructure executing the process to provide high quality monitoring informa-tion. Note also that the cost for the consumer of combining monitoring informa-tion produced by other parties is very low. We assume, in fact, that monitoring information is made available digitally and, therefore, its aggregation is almost costless. Concerning availa bility, note that aggregation operations executed by the consumer, e.g. Op07 or Op03 , have always highest availability, whereas the availability of the leaf operations may not be optimal, since it depends on the availability of the infrastructure in which monitoring information is captured by the supplier(s) or the factor.

Apart from the cost, quality, and availability, other properties can be also considered. Ardagna and Pernici [1], for instance, consider execution time and reputation in addition, while Vanderfeesten et al. [21] also consider duration of execution. 3.2 Optimal Path in the PDM After the design of the PDM, the next step in our methodology (see Fig. 2) is the selection of the optimal path. As explained in the previous section, the PDM may accommodate several alternative paths to produce the end product. The objective of this step is therefore to select a complete path that satisfies the requirements of the considered stak eholder, in terms of cost, quality, or availability of the monitoring information, or a combination thereof. In order to select the optimal path, different constraints may be considered. In this paper we use the following scenarios to illustrate our approach: (i) opti-mal path considering the availability dimension only ( A -path), (ii) optimal path minimizing costs given a minimum quality level ( C q -path), and (iii) optimal path maximizing quality given maximum costs and minimum availability level ( Q c,a -path). We chose these type of constraints to exemplify our methodology. In the general case, however, the select ion of the optimal path should be seen as the optimization of a utility function. Stakeholders can define the utility func-tion, for instance, as the weighted sum of partial utility functions on individual dimensions [1].

From the PDM of Fig. 3 and the operation properties of Table 1, we derive 18 complete paths for the monitoring process that may all serve the need for monitoring the consumer order fulfillmen t process. These paths are reported in Table 2. Among the available complete paths, we now discuss the above men-tioned optimal ones: A -path. The path with the highest availability, i.e. the highest probability of de-livering the required end product in the form of monitoring information ( MON ), is path 1. It produces the end product ( MON) by executing operations Op01, Op02, Op11, Op06, Op14 . The total availability of this plan is 0.81. C -path. A cost optimal path given a minimum quality level is the monitoring path with the lowest cost that satisfies a quality requirement set by the consumer. Suppose the consumer sets the threshold for the quality level to 0.5. Then, paths 9, 10, 11, 12, 15, 16, 17, and 18 are to be considered. The path with the lowest cost is selected from this subset. The cost optimal path given a minimum data quality level therefore is path 16, with quality 0.5 and cost 1.7.
 Q c,a -path. The third scenario concerns the det ermination of the quality optimal path given maximum costs and a minimum level of availability. If the consumer has a budget constraint of at most 2.0 and wants to be for at least 50% sure that the monitoring information is delivered, then the highest quality possible is achieved by paths 2 and 4. Since there are two optimal paths and we want to have just one prescriptive process model, it has to be decided which one of the paths is best. In general, if more than one path satisfy the given constraints, then several approaches can be chosen to select an optimal path. These include: (i) random selection of one path among the identified optimal ones, (ii) selection (by the monitoring stakeholder) of one of the optimal paths by ranking the criteria, or (iii) selection of the path involving the lowest number of operations. As an illustration, we choose the second case and we define the cost as being the second most important criterion after the quality. From paths 2 and 4 we now select the one with the lowest cost (path 4). 3.3 Derivation of Process Models After the determination of the optimal path in the PDM with respect to a certain criterio n, a process model can be generat ed for the monitoring process (see Fig. 4). Several algorithms have been proposed to transform the PDM into a process model executable, for instance, by a workflow management system [22]. We use the algorithm described in [19] to automatically generate a process model for the optimal path of the PDM. This algorithm is implemented in the ProM framework for process analysis [20]. Th e resulting process models of our three optimal paths are discussed below. These process models are represented in the Petri Net language. The transitions (squares) represent the operations in the PDM and are named after the output element of the operation, e.g. transition MON indicates the operation t hat produces data element MON based on the input elements PAY and PRO .
 A -path. Fig. 4(d) shows the process model for the optimal path with respect to the availability. There are two parallel branches in the process model that can be executed concurrently: (i) a branch in which first the element PF is determined followed by the element PAY , and (ii) a branch in which SPH is determined followed by PRO .Oncebothelements PAY and PRO are determined, the final element MON can be produced. Note that the black activity at the left hand side of the process model is a  X  X ilent X  activity, i.e. it is added only for routing purposes but does not process information. Using this process, the consumer retrieves monitoring information on the progress of its request only from the supplier and information on the payment only from the factor.
 C -path. Fig. 4(e) depicts the process model for the optimal path C q . Again there are two parallel branches in the process model, both providing input to produce MON . On the one hand, PAY is obtained using PS first. On the other hand, PRO is determined by E1H and E2H , which can be determined in parallel as well.
 Q c,a -path. Fig. 4(f) shows the process model for the optimal path Q c,a .Itis similar in structure to the process mod el of Fig. 4(e), but it uses elements PF , E1L ,and E2L in place of PS , E1H ,and E2H , respectively. In this section we discuss the last step of the methodology proposed in this paper (see Fig. 2), i.e. its implementation in a service-oriented environment.
We take a service-oriented approach to the definition of the product data and the implementation of monitoring processes (see the architecture in Fig. 5(a)). The combination of PBWD and service orientation for design and execution of monitoring processes, respectively, can address the need for structural and oper-ational dynamicity in business networks [9]. Concerning network structure, the actors in the network can be dynamically replaced. Suppliers of spare parts in an automotive industrial district, for ins tance, can be dynamically substituted by the car manufacturer as new suppliers providing more convenient or higher quality options become available. Concerning network operations, the network business processes can be reconfigured on-the-fly as new business opportunities arise. Insurance companies, for instance, may decide to outsource part of their claim management process only on a temporary basis, e.g. to manage an ab-normal amount of claims resulting from a possible fraud. Both scenarios require the dynamic set-up or update of monitoring processes as the network dynami-cally evolves. This is addressed by our methodology at design time, by adopting PBWD, and at runtime, by using a service oriented approach, where services providing monitoring information can be dynamically orchestrated in the moni-toring processes obtained through PBWD.

The elementary monitoring information products are the monitoring infor-mation that can be made available by actors in the business network to other actors for monitoring purposes. e.g. the progress information made available by the supplier or the factor in our running example. In the information system or process engine executing a process to be monitored, monitoring information can be captured from various sources and through different mechanisms, such as (i) native APIs of the actor X  X  ERP system, e.g. SAP monitoring architecture, workflow or BPEL engine and (ii) ad-hoc instrumentation, e.g. through the de-velopment of event captors or other on line process inspection techniques [2].
Irrespectively of how monitoring information is captured, the process provider can make such information available to users by exposing a Web service [6] im-plementing, for instance, a different ope ration for each leaf element in the moni-toring product data model. The cost, quality, and availability of the monitoring information (see Table 1) can be then specified in a policy document [4], that can be attached to such service before its publication.

In a service-oriented arch itecture, process providers publish their monitoring services in a service registry (STEP 1 in Fig. 5(a)) and process users browse the registry to get service descriptions and build their monitoring PDM (STEP 2). Note that, in Fig. 5(a), process provider and user should be intended as roles, since an actor in the business network canactatthesametimeasaproviderof processes and a user of processes contributed by other actors.

The architecture depicted in Fig. 5(a) supports also the creation of an exe-cutable monitoring process. Specifically , a process user in the business network interested in building a monitoring pro cess retrieves the required monitoring service description from the registry. Se rvice descriptions are then used to build a monitoring product data model using the ProM toolkit (STEP 3). Currently, as discussed in the previous sections, the algorithms for obtaining monitoring process models (STEP 3), expressed as Pet ri nets and satisfying given quality constraints, have been implemented as plugins of the ProM toolkit. ProM also provides a plugin for the translation of models from Petri nets to (abstract) WS-BPEL specifications (see Fig. 5(b)). The abstract WS-BPEL specification is bound by the monitoring stakeholder to the required monitoring services in the registry, in order to make it executa ble, and deployed in a process engine (STEP 4). When in execution, a monitoring process will use the monitoring ser-vices originally published by actors in the business network, according to the aggregation and dependency constraints specified in the monitoring PDM and the derived monitoring process model (STEP 5).

In respect of the scenario depicted in Fig. 5(a), most of the steps of our methodology, such as the definition and retrieval of monitoring services from the registry, the binding of the WS-BPEL specification obtained through ProM to actual services in the registry, and the deployment of the WS-BPEL specification in the process engine, are still execute d manually. Future work will concern the implementation of an integrated approach in which the aforementioned activities could be fully automated. This paper presents an innovative application of PBWD, that is, the product-based design of monitoring processes in collaborative business networks. The innovation brought about by this paper is twofold. On the one hand, given a col-laborative scenario and available monitoring information, we propose a method-ology to design from scratch a monitoring process that matches the process user X  X  requirements, in terms of cost, (data) quality, and availability of monitoring in-formation. On the other hand, we discussed an architecture for implementing the proposed methodology.

A first area of improvement for this work concerns the implementation of the architecture reported in Fig. 5(a) a nd, specifically, the connections between the implemented ProM X  X  plugins and the s ervice-oriented process execution en-vironment. Future work will also concern the extension and refinement of the product-based generation of monitoring processes. In particular, we plan to con-sider additional non-functional dimensions, such as reputation, and more com-plex utility functions for capturing the monitoring stakeholder requirements. Constraints describing monitoring products can also become dependent on the type of monitoring information and the type of stakeholder requiring it. Hence, we want to investigate the issue of provider and user profiling for automatically designing more customized monitoring processes. Also, while this paper consid-ers the monitoring requirements for a st akeholder at the process level, we are planning to consider also instance-level monitoring requirements, i.e., monitor-ing requirements that can change with ev ery different instance involving a given stakeholder. Finally, from the modeling perspective, we want to investigate the opportunity of specifying monitoring processes as choreographies, e.g. in BPMN 2.0, for capturing more complex dependencies among monitoring information.
