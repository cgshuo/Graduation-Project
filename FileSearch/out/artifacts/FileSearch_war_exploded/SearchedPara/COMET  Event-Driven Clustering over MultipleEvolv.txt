 Research about mining in the data stream environment is flourishing in these years [1][2][3][4][5][6][7][8]. In addition to those on considering a data stream at a time, more and more emerging applications involve in monitoring multiple data streams concurrently. Such applications include online stock market data analy-sis, call detail records in t elecommunication, sensor n etwork, ATM operation in banks, etc. We are able to find out interesting and useful knowledge by analyzing the relationship between these multiple data streams. Therefore, mining multi-ple data streams has attracted an increasing amount of attention from related researchers. To discover the cross-rela tionship between streams, one way is to calculate the correlation between streams and report the stream pairs with high correlation [9][10][11][12]. Another one is to do similarity pattern query between multiple data streams [9][13]. Last but not least, some works are reported on applying the clustering technique to multiple data streams [14][15][16].
Among multiple evolving data streams, we want to trace not only those streams becoming similar to one another but also those becoming dissimilar along with the growing of streams. Clustering is a mining technique which puts the similar objects together and separates dissimilar ones into different clusters. As a result, by clustering the streams dynamically, we can achieve the goal of monitoring the evolution of stream clusters. From observing the clusters evo-lution we are able to get the useful information for decision making or data management in various applications. For example, in the stock market, the price of each stock may vary from time to time and some stocks tend to rise and fall concurrently in some time intervals. The stock monitoring system aims to find the streams which are in the same group and have similar behavior. From such evolving streams, the investors would like to buy a proper set of streams to maximize the profit.

In [14], an online data summarization framework is designed for offline clus-tering on multiple data streams when users submit requests. In contrast, we want to provide in this paper a more real-time and automatic system which performs online clustering. The system will report the revolution of clusters as time advances. To achieve this goal, one intuitive solution is to cluster these data streams periodically. We can just update each stream and apply an existing clus-tering algorithm on these streams at the p re-determined time point. However, due to the large stream number and the huge data volume, the distance update between each stream is very costly. Further more, periodical clustering is not able to cope with the data streams with different evolving speeds. If the values of data streams are relatively steady, most of the clustering tasks are unnecessary since the resulting clusters are likely to remain the same. On the other hand, if the values of data streams are relatively fluctuant, we may lose some cluster infor-mation when the fixed time period is too long. Concluding from above issues, we need a solution which is able to perform clustering whenever it is necessary. Con-sequently, a framework named event-driven Clustering Over Multiple Evolving sTreams , abbreviated as COMET ,isproposedinthispaper.

For generality, we consider the data on the numerical domain. Our work can be easily extended to the applications with categorical data via proper data transformation. Initially, the streams are divided into several clusters by applying any traditional clustering method. In fact, we can also apply our merge operation, which will be introduced later, to obtain initial clusters. Due to the evolving feature of data streams, a group of streams may be similar at this moment but become dissimilar to one another later. In order to capture the significant changes of each stream, we use continuous piecewis e linear line segments to approximate the original data stream. Explicitly, t he piecewise linear appr oximation can not only be performed in real time as the data comes in, but also be able to capture the trend of data. Two line segments wit h different slopes are connected by an end point. The end point represents the significant trend change point of the stream data. If a stream in a cluster has a significant change, it is possible to cause the split of this cluster. As a result, we can regard each end point of a stream as a  X  X rigger X  of the cluster evolution, and call the stream which has a newly encountered end point as  X  X ri gger-stream. X  When a trigger occurs, the distances between trigger-streams and other streams in the same cluster are then updated incrementally. If the distance of any stream pair in a cluster exceeds a given threshold, we say an  X  X vent X  is detected. An event is a signal for the system to make necessary cluster modifica tions. Similar  X  X vent-driven X  idea can be found in [13], but it has different definition and usage. When an event is found via the event detection mechanism , we perform necessary cluster split. Then, a procedure for checking whether there exist clusters being close enough to be merged together is activated. Since the split and merge processes are very efficient, the event processing procedure is able to handle thousands of streams concurrently. 2.1 Problem Model Given an integer n ,an n -stream set is denoted as  X  = { S 1 ,S 2 , ..., S n } where S i S [ t k ] is the data value of stream S i arriving at time t k . The objective of this paper is that given a set of data streams  X  and the threshold parameters, the summary of each stream S i , which is denoted as S i , is online maintained and the event detection mechanism is built. When events occur, cluster modifications will be performed instead of re-clustering all streams and the latest clustering results are reported. 2.2 Piecewise Linear Data Summarization In COMET, piecewise linear a pproximation is adopting t o detect the significant trend changes of the data streams. The end points between line segments are regarded as triggers of clustering evolution. The work in [17] describes the ba-sic concept of online segmenting time series. Many variations are conceivable to adapt different types of data. For example, [13] provides a three-tiered online seg-mentation and pruning strategy for financial data streams. Base on sliding win-..., ( S i [ t vk ] ,t vk ) } . We now discuss the distance measureme nt between two stream summaries. Since streams may vary at different level, instead of directly using Euclidean distance, we apply the distance measure in [18] and did some modification. Originally, it projects end points of one time series t o another one, and then calculate the variance of length of these projected lines . The more similar these two series are, the smaller variance will be got. To avoid the cross of two series, [18] add some constant to separate them. In our case, due to the feature of streaming data, we cannot know how big the constant should be added in advance. As a result, the sign of the subtraction of two streaming data value is taken into consideration. Moreover, we accumulated all differenc e value at each time point. When an end point is met, we update the distan ce in an incremental fashion. In essence, a cluster is the set of summari zed streams and all the clusters become a cluster set. Each cluster has a center which is simply the average of every member in that cluster. Consequently, t he center of a cluster is also a sequence of end points. As data points come in, eac h stream is online doing piecewise linear approximation. For streams which have a new end point, we first find out the clusters that these streams belong to, and then only the distances between the trigger-streams and the rest of the streams in the same cluster will be updated. The stream pair distance is updated in an incremental manner as mentioned in Section 3. 4.1 Split of a Cluster When the distance between the trigger-stream and other streams in the same cluster is updated, for each trigger-stream S i , a list containing all S j in the same cluster C k whose distance to S i exceeds the threshold  X  a is kept. If the size of the list is larger than a specific proportion, we regard S i itself as being very different from the original cluster. As a result, S i is required to be split out from the cluster C k . On the other hand, if the size of this list is not larger than the specific amount, we consider that the streams inside the list could become quite different from the original cluster. Therefore the members of the list become the candidate streams to be moved out.

After splitting, we need to update corresponding cluster centers. Then, the inter-cluster distances are updated in the same way as updating distances be-tween summarized streams. 4.2 Merge Clusters The COMET framework checks whether th ere are clusters being close enough to be merged after splitting and updating the inter-cluster distances of each cluster pair. How close can two clusters be mer ged is defined by a user given threshold  X  . If the inter-cluster distance between any two clusters is under the threshold  X  , these two clusters are merged. Note that we can apply any agglomerative hierarchical clustering method in this merge process by setting the stop criteria as the threshold  X  e . The cluster number is relat ively small compared to the original number of streams, and thus the execution time is relative low. In this paper, we proposed the COMET framework for online monitoring clusters over multiple data streams. By using the piecewise linear appr oximation for data summarization, we can regard each end point of the line segment as a trigger point. At each trigger point, we update the distances between streams in the same cluster. Whenever an event happens, i.e., any distance between two streams in a cluster exceeds the pre-de fined threshold, the cluste rs are modified by the split and merge processes. The COMET framework is efficient and of good scalability while producing cluster results of good quality.
 The work was supported in part by the National Science Council of Taiwan, R.O.C., under Contracts NSC93-2752-E-002-006-PAE.

