 Ming-Hua Lin * 1. Introduction
Over the last few decades, numerous parallel processing mechanisms and data layout methods have been developed to improve the performance of database systems. Since CPU speed far exceeds that of main memory and I/O bandwidth, I/O throughput rates have become a bottleneck in system performance, especially for large databases [13,16] . Most enterprises use relational database systems in the back-end to support applications, such as decision-support systems, geographical information systems, business intelligence, engineering and scientific systems. As the size of databases continues to in-access [1].

A number of I/O parallel approaches [2,7,13,15,16,18] for data array systems, such as disk striping, disk shadowing, and data partitioning, have been developed to increase I/O bandwidth. Kurose and Simha [8] investigated the resource-alloca-tion problem based on economic models in a distributed computer system. They developed a decentralized algorithm to allocate file fragments in a cooperative and non-competitive manner among agents (computer systems). In their approach, one file is divided into different parts without meaningful relationships among the file fragments. Fragmentation is dis-tributed to different computers to minimize communication cost and average processing delay related to file access. How-ever, in relational database systems in which some objects are accessed simultaneously, the relationships among objects must be considered. Lin and Orlowska [9] solved the data allocation problem in relational database systems, and minimized total communication cost within the network using an integer linear programming approach. Sarathy et al. [14] analyzed the problem of allocating copies of relations from a global database to a geographically distributed communication network. This allocation problem is formulated as a constrained nonlinear 0 X 1 program and solved using abases to minimize total I/O response time for a given workload. Via experiments conducted on Microsoft SQL Server 2000, they determined that exploiting the co-access knowledge of database objects is important in designing a database layout with better I/O performance than that achieved with full striping.
 lems in relational database systems, Rotem et al. [13] developed a mathematical framework for allocation of nonfragmented relations to multidisk storage systems. Chang [4] generated a concise method to reformulate the model developed by Rotem network to maximize parallel processing within queries. Therefore, the method developed by Chang [4] may lose the benefit mulating the data allocation problem as a solvable mixed 0 X 1 programming problem such that a globally optimal solution can be obtained. The advantages of the proposed approach over existing techniques are summarized as follows:
Section 5, we present the experimental results to illustrate the performance difference among the previous models and the proposed model. Finally, the paper is concluded in Section 6. 2. Review of the models by Rotem et al. and Tsai and Li 2.1. Rotem et al. X  X  model tems, discussed how to allocate relations to disks in relational databases [13]. Their model minimized expected query cost munication cost of transmitting data from disks to execute a two-way join. Computational cost of the JOIN operation is not and each disk capacity limit is not exceeded. The notations used throughout this study are as follows: C IO I/O cost unit (in terms of I/O time per block of data)
C k capacity of disk k M number of disks in the multidisk storage systems
N number of relations in the databases p ij the probability of a query involving JOIN operation on relation R i and R j
R i relation i in the databases
S i size of the relation R i (number of blocks)
T value of the objective (cost) function x ik an indicator of relation R i being allocated to disk k ; x ik =1if R i is allocated to disk k , otherwise x ik =0 y z ijk an indicator of R i and R j being placed on the disk k; z ijk =1if R i , R j are stored on disk k , otherwise z ijk =0 A multidisk allocation problem can be formulated as sidered. The need for solution time in treating an integer programming problem rises exponentially as the number of 0 X 1 lem with N relations and M disks, MN + N ( N 1)/2 + MN ( N 1)/2 0 X 1 variables are required in their model. 2.2. Tsai and Li X  X  model Tsai and Li [17] proposed the following model for solving the multidisk allocation problem:
Minimize (1) subject to (2), (3) , fined in Rotem et al. X  X  model.
 iable z 0 ijk in the model by Tsai and Li, the number of 0 X 1 variables is reduced from MN + N ( N 1)/2 + MN ( N 1)/2 to MN + N ( N 1)/2. However, the number of constraints increases from M + N + N ( N 1)( M + 1)/2 to M + N + N ( N 1) (4 M + 1)/2. The following section presents a novel technique for reducing the number of 0 X 1 variables and auxiliary con-straints for the same problem. 3. Proposed method Consider the following proposition: Proposition 1. Constraints ( 4 ) and ( 5 ) in the model of Rotem et al. can be replaced by the following expression: where y 0 ij is a non-negative continuous variable and the other variables are the same as defined previously. Proof Case 1: For any k ,if x ik = 1 and P k 0  X  k x ik 0  X  P k 0  X  k x jk 0  X  0, then y 0 ij  X  1.
 forced to 0.
 subject to (2), (3) and (9) , defined previously.
 model by Rotem et al., the number of 0 X 1 variables is reduced from MN + N ( N 1)/2 + MN ( N 1)/2 to MN . Moreover, the number of constraints is also reduced. Table 1 lists the comparison of the number of variables and constraints in three models.
 capacity. However, neither work specifies how to reduce the amount of storage space used while minimizing query cost. simultaneously, our present work modifies the models developed by Rotem et al. [13] and Tsai and Li [17] as subject to (2), (3) and (9) , p cost, and w is the minimal reduction in query cost when one additional table is allocated to the disks. Storage cost change M * N in storage cost, B weight can put more emphasis on minimizing query cost than on minimizing the number of ta-tify an optimal data layout that uses minimal storage space to achieve minimal expected query cost. 4. Numerical examples with other methods.
 Example 1. Consider a database with four relations depicted in Fig. 1 where each edge represents a two-way join query likelihood. We assume all applications in the example run only two-way join queries and the entire database must be allocated to two disks. The capacities of disks 1 and 2 are 1.5 and 1, respectively.
 This example can be formulated by the proposed method as the following program.

The program uses fewer 0 X 1 variables and constraints than the models by Rotem et al. [13] and Tsai and Li [17]. In solving proposed model is 0.51, which is better than the query cost of 0.55, acquired by Chang [4]. Commercial database systems can determine the placement of each relation on specific disks as suggested by the solution of the proposed model to en-hance I/O performance.
 Example 2. Fig. 3 illustrates an example of a relational database in Rotem et al. [13]. Suppose that a database with 19
For comparison with model results obtained by Rotem et al. [13] and Tsai and Li [17], the problem is decomposed into three sub-problems. Table 2 compares the problem sizes of the example in these three models. The proposed model obvi-ously requires fewer 0 X 1 variables and constraints than the models of Rotem et al. and Tsai and Li. Although solving this problem using the models of Rotem et al. and Tsai and Li can obtain an optimal allocation with minimal query cost, the re-increased. In solving sub-problems using LINGO [10], the proposed model can identify the optimal data allocation as indi-cated in Fig. 4 . A comparison of the allocation obtained by the proposed model and that obtained by Rotem et al. [13] query cost, which is less than the 391 MB of disk space used by the model by Rotem et al. 5. Computational experiments
This section presents experimental results when evaluating the performance of the proposed model. Twelve groups of proposed model, which are then solved by LINGO [10] on a Notebook with an Intel 1.66 GHz CPU. Table 3 compares the average performance of the models by Rotem et al. [13] and Tsai and Li [17] and the proposed model measured by query cost, the proposed model uses less storage space than the other two models. The storage space used is the disk capacity used by roughly 136% of average storage space, and that by Tsai and Li uses roughly 148% of average storage space. The proposed method uses less CPU time to solve the problem than the other two methods. Compared with the proposed model, the model by Rotem et al. takes roughly 10 times the average CPU time and that by Tsai and Li takes roughly 40 times the average CPU integer variables or number of constraints exceeds the capacity of the educational software version. Conversely, the pro-within 1 min.

Experimental results in Table 3 demonstrate that the proposed model uses less CPU time when solving multidisk alloca-However, using four disks increases flexibility in allocating tables with co-access requirements.

Fig. 6 a and b compare the performance of the models by Rotem et al. [13] and Tsai and Li [17] and the proposed model under 10 disks and various tables. Again, the three models have identical query costs in all cases. The proposed model re-quires less CPU time when solving multidisk allocation problems than the other two models, and consumes the least storage space among these three methods. As the number of tables increases, the required CPU time is more with the models by Tsai and Li [17] and Rotem et al. [13] than with the proposed model.

To demonstrate the scalability of the proposed model for practical datasets, multidisk allocation problems with up to 4 disks and 1000 tables are solved using LINGO 11 [10], windows 64 version, on a server with an Intel Xeon 3.2 GHz CPU and data layout with minimal query cost can be solved within 4 min with the proposed model.
 512 GB drives are normal in these days, the following two conditions should be considered in applying the proposed method for solving multidisk allocation problems:
This work presents a novel model that efficiently derives a data layout using minimal storage space to achieve minimal formance benefits of the proposed method are as follows: (i) Decreasing query time: The proposed model guarantees minimal average query time. Over the course of a week or (ii) Reducing disk space: The proposed method utilizes minimal storage space in achieving minimal query cost. As the size (iii) Shortening solution time: The proposed method spends less computational time obtaining an optimal layout than the 6. Conclusions and future work
Physical data allocation significantly affects I/O performance of database systems. Since I/O performance is a bottleneck data layout approach is paramount. Although the models developed by Rotem et al. [13] and Tsai and Li [17] obtain optimal not minimize storage cost. The model created by Chang [4] only treats the multidisk allocation problem without replicating relations. That model, therefore, cannot reduce retrieval time by keeping copies of some relations on more than one disks. The proposed method not only uses fewer 0 X 1 variables and constraints than the models by Rotem et al. [13] and Tsai and Li [17], but is also a more general model than that developed by Chang [4]. Furthermore, the proposed model guarantees that query cost is minimal. Under the same minimal query cost, the proposed model utilizes less storage space than existing methods. The results of the two illustrative examples and computational experiments demonstrate the advantages and effi-ciency of the proposed method.

Additionally, other components can be utilized in the proposed model to optimize data allocation. First, data partitioning the real world, a relation may be striped across multiple disks for capacity and performance. The data allocation problem becomes very complex when data partition is considered. For instance, if M disks exist in a database, then each table has P and the resulting model may contain a large number of binary variables and constraints. These issues are important in sup-porting realistic database configurations and worthy of future investigation.
 Acknowledgement
The authors would like to thank the National Science Council of the Republic of China, Taiwan, for financially supporting this research under Contract No. NSC 96-2416-H-158-003-MY3.
 References
