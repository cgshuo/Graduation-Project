 With the increasing of the amount of researchers and its achievements of a scholarly institution, it becomes both more time-consuming for them to enter the scientific paper results. In the meantime, it becomes more egregiously daunt-ing for scientific departments to manually audit the authenticity of each paper. Therefore, a framework of automated entering and validation of the scientific paper would be of great benefit. The challenge is how to enter the bibliography of its scientific paper automatically, and how to ensure the entered bibliography is authentic attached to its owner.

We have classified the available intelligent solutions to this problem, and point out the drawbacks and inefficiencies [1]. Th e metadata (author, title, source, vol-ume/issue number, starting page number, et al.) extraction of the crawled web page is an approach to paper entering. This approach still needs manual in-tervention [2]. In non-scanned document extraction approach, the metadata is resolved from the Office Word, L A T E X source document and the PDF document conforming to the template. Since the template actually differs from publisher to publisher, this approach needs manual intervention with the high failure rate. Besides the above solutions, there is another approach to look up document details from the document ID system, such as an ISO standard for the doc-ument identifier -digital object identifier (DOI) [3]. In 2011, the largest DOI registry agencies CrossRef and DataCide announced to support unified negotia-tion called CrossCite content service. However, this approach is not at the more general end of the scale. Some other registration agencies except CrossRef and DataCide do not support content negotiated DOIs. Nowadays, there are still no uniform norms and technical specifications for DOI resolution. Compared with existing approaches, the contribution of our demonstration is that we do some significant development work to propose an integration solution named DOI proxy framework to provide a uniform service.
 The architecture of the DOI proxy framework is shown in Figure 1, which is composed of two components: DOI content service and resolver proxy. The re-quest is first redirected to the DOI prefi x judgment component to determine the affiliation by the DOI prefix. The contribution of DOI proxy in our framework is that it attempts to solve the heterogeneity problem of the current DOI re-solvers, which can also provide a second-development interface for anyone who is interested in it.
 DOI Content Service . DOI content service introduces Accept header defined in the HTTP content negotiation to specify certain media types.
 DOI Resolver Proxy . DOI resolver proxy provides an interactive and indepen-dent interface no matter what the implementation is. For the existing interface of DOI registry agency, we have just integrated it with our framework. For the DOI registry agency without DOI interac tive interface, we have implemented DOI resolution first. The specific DOI resolver is just like the flexible plug-in mounting to the proxy. We will first use a poster and several slides to introduce the motivation of DOI proxy framework and highlight how it works, which is shown in Figure 2. After that, we will show the audience the live demonstration system using HTTP link http://doi.kunma.net hosted on our personal website. Finally, we invite them to participate in the interactions to enter the DOI of their paper results by their smart mobile phones or laptops. After estimating this framework, the metadata of the paper is obtained and pre sented automatically in Web interface. DOI proxy framework compares the result of author name and its affiliation unit with the session context of the integrated system to validate the ownership of the paper. In our demonstration, we will present the DOI proxy framework for automated entering and validation of scientific papers. We will also show the architecture of the core components. As more than 95 percent of DOIs is owned or managed by CrossRef, DataCite, ISTIC and mEDTA DOI registry agencies, this is a common universal approach for the scientific research papers with DOI.
 Acknowledgments. This work was supported by the Doctoral Foundation of University of Jinan (XBS1237), and the National Key Technology R&amp;D Program (2012BAF12B07-3).
 Recently, XML keyword search has attracted much attention and has become a popular paradigm for information retrieval over X ML data. Because of its convenience, users don X  X  need to know a complex query language or the underlying data schema. However, due to the inherent ambiguity, a keyword query usually corresponds to a large number of results that may be classified into different types, or different search intentions, among which only a few meet users X  search intentions.
 The formula used to compute the score of a result type T , i.e., C T,Q ,w.r.t.agiven keyword query Q is as Formula 1 which is designed based on three guidelines [1], where A = log(1 + k  X  Q f T k ) , k is a keyword of Q , f T k is the number of T -typed nodes that contain k in their subtrees; B = r depth ( T ) , r is the reduction factor with range (0 , 1] ,and depth ( T ) represents the depth of T -typed nodes. Even though [3] has found that this formula suffers from inconsistency and abnormality problems, and made improvement on this formula, in practice, both [1] and [3] still suffer from some of the following problems: 1. A node type that is taken as a result type may have many node instances that do not 2. The result type recommended by [1, 3] may contain some query keywords that are Besides [1, 3], [2] still cannot work effectively in some cases. Consider query Q 2 = { paper, Mike } issued on the sample data in Fig. 1. Most likely, it is intended to find papers written by Mike; hence the result type should be  X  X ab/person/paper X . But [2] still suggest result type as  X  X ab/person X .

As a comparison, our method avoids all the above problems by using a new ranking function that takes the number of ELCA [4] nodes into account. 2.1 Ranking Function for Result Types Intuitively, our method takes all ELCA nodes as input to compute the score of each result type, the more the number of ELCA nodes of type T , the more possibility type T be the promising result type of Q . As shown by Formula 2, where S T ELCA is the set of ELCA nodes of type T .
 2.2 Ranking Function for Results The main idea of TF*IDF (Term Frequency * Inverse Document Frequency) similarity is: a keyword appearing in many documents should be regarded as being less important than a keyword appearing in a few, while at the same time, a document with more occurrences of a query keyword should be regarded as being more important for that keyword than a document that has less. The formula of TF*IDF similarity is as follows, where Q is the keyword query, d is a document, N is the number of documents, f k is the number of documents which contain query keyword k ,and f d,k is the number of occurrences of keyword k in d . Even though TF*IDF similarity is suitable for flat documents, it only considers the content, regardless of the structure of XML documents. Hence, it cannot be directly applied to XML documents with hierarchical st ructure. We consider the following rules to compute score of query results.
 Rule 1: The higher the relevance of a result s ubtree and a query, the higher the score Rule 2: The smaller the distance of query keywords and ELCA node, the higher the Rule 3: The more compact the result subtree, the higher the score of the result is. The formula of ranking results is shown by Formula 4, where d is a result subtree rooted at an ELCA node,  X  Q,d is the relevance of query Q and d ,and | E d | is the sum of the lengths of the shortest path from each query keyword to the ELCA node.The edges that are repeated on the path are counted only once, which addresses Rule 3. 2.3 Demonstration Fig. 2 shows the system architecture. The I ndexes in Search Engine are created in ad-vance. After user issues a query, we firstly find all ELCA nodes by using Keyword from Path Index. After that, we compute scores for all these node types by Formula 2 and get top-k node types with the highest score as search intentions to the given key-word query. Finally, for ELCA nodes of each type, we compute scores by Formula 4 and return the first result(the subtree root ed at ELCA node) of each result type to users. The Document Index records the info rmations contained in each node.
 Acknowledgment. This research was partially supported by the National Natural Sci-ence Foundation of China (No. 61073060, 61272124), the Research Funds from Educa-tion Department of Hebei Province (No. Y2012014), and the Science and Technology research and development program of Hebei Province (No. 11213578 ).

