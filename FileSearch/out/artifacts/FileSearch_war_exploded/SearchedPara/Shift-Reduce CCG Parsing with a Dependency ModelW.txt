 Combinatory Categorial Grammar ( CCG ; Steed-man (2000)) is able to derive typed dependency structures (Hockenmaier, 2003; Clark and Curran, 2007), providing a useful approximation to the un-derlying predicate-argument relations of  X  X ho did what to whom X . To date, CCG remains the most competitive formalism for recovering  X  X eep X  de-pendencies arising from many linguistic phenom-ena such as raising, control, extraction and coordi-nation (Rimell et al., 2009; Nivre et al., 2010).
To achieve its expressiveness, CCG exhibits so-called  X  X purious X  ambiguity, permitting many non-standard surface derivations which ease the recovery of certain dependencies, especially those arising from type-raising and composition. But this raises the question of what is the most suit-able model for CCG : should we model the deriva-tions, the dependencies, or both? The choice for some existing parsers (Hockenmaier, 2003; Clark and Curran, 2007) is to model derivations directly, restricting the gold-standard to be the normal-form derivations (Eisner, 1996) from CCGBank (Hock-enmaier and Steedman, 2007).

Modelling dependencies, as a proxy for the se-mantic interpretation, fits well with the theory of CCG , in which Steedman (2000) argues that the derivation is merely a  X  X race X  of the underlying syntactic process, and that the structure which is built, and predicated over when applying con-straints on grammaticality, is the semantic inter-pretation. The early dependency model of Clark et al. (2002), in which model features were defined over only dependency structures, was partly moti-vated by these theoretical observations.

More generally, dependency models are desir-able for a number of reasons. First, modelling dependencies provides an elegant solution to the spurious ambiguity problem (Clark and Curran, 2007). Second, obtaining training data for de-pendencies is likely to be easier than for syn-tactic derivations, especially for incomplete data (Schneider et al., 2013). Clark and Curran (2006) show how the dependency model from Clark and Curran (2007) extends naturally to the partial-training case, and also how to obtain dependency data cheaply from gold-standard lexical category sequences alone. And third, it has been argued that dependencies are an ideal representation for parser evaluation, especially for CCG (Briscoe and Car-roll, 2006; Clark and Hockenmaier, 2002), and so optimizing for dependency recovery makes sense from an evaluation perspective.

In this paper, we fill a gap in the literature by developing the first dependency model for a shift-reduce CCG parser. Shift-reduce parsing applies naturally to CCG (Zhang and Clark, 2011), and the left-to-right, incremental nature of the decoding fits with CCG  X  X  cognitive claims. The discrimina-tive model is global and trained with the structured perceptron. The decoder is based on beam-search (Zhang and Clark, 2008) with the advantage of linear-time decoding (Goldberg et al., 2013).
A main contribution of the paper is a novel tech-nique for training the parser using a dependency oracle, in which all derivations are hidden. A challenge arises from the potentially exponential number of derivations leading to a gold-standard dependency structure, which the oracle needs to keep track of. Our solution is an integration of a packed parse forest , which efficiently stores all the derivations, with the beam-search decoder at training time . The derivations are not explicitly part of the data, since the forest is built from the gold-standard dependencies. We also show how perceptron learning with beam-search (Collins and Roark, 2004) can be extended to handle the ad-ditional ambiguity, by adapting the  X  X iolation-fixing X  perceptron of Huang et al. (2012).

Results on the standard CCGBank tests show that our parser achieves absolute labeled F-score gains of up to 0 . 5 over the shift-reduce parser of Zhang and Clark (2011); and up to 1 . 05 and 0 . 64 over the normal-form and hybrid models of Clark and Curran (2007), respectively. This section describes how shift-reduce tech-niques can be applied to CCG , following Zhang and Clark (2011). First we describe the determin-istic process which a parser would follow when tracing out a single, correct derivation; then we describe how a model of normal-form derivations  X  or, more accurately, a sequence of shift-reduce actions leading to a normal-form derivation  X  can be used with beam-search to develop a non-deterministic parser which selects the highest scor-ing sequence of actions. Note this section only de-scribes a normal-form derivation model for shift-reduce parsing. Section 3 explains how we extend the approach to dependency models.

The shift-reduce algorithm adapted to CCG is similar to that of shift-reduce dependency parsing (Yamada and Matsumoto, 2003; Nivre and Mc-Donald, 2008; Zhang and Clark, 2008; Huang and Sagae, 2010). Following Zhang and Clark (2011), we define each item in the parser as a pair  X  s,q  X  , where q is a queue of remaining input, consisting of words and a set of possible lexical categories for each word (with q 0 being the front word), and s is the stack that holds subtrees s 0 ,s 1 ,... (with s 0 at the top). Subtrees on the stack are partial deriva-Figure 1: Deterministic example of shift-reduce CCG parsing (lexical categories omitted on queue). tions that have been built as part of the shift-reduce process. SHIFT , REDUCE and UNARY are the three types of actions that can be applied to an item. A SHIFT action shifts one of the lexical categories of q 0 onto the stack. A REDUCE action combines s 0 and s 1 according to a CCG combinatory rule, producing a new category on the top of the stack. A UNARY action applies either a type-raising or type-changing rule to the stack-top category s 0 . 1
Figure 1 shows a deterministic example for the sentence Mr. President visited Paris , giving a sin-gle sequence of shift-reduce actions which pro-duces a correct derivation (i.e. one producing the correct set of dependencies). Starting with the ini-tial item  X  s,q  X  0 (row 0), which has an empty stack and a full queue, a total of nine actions are applied to produce the complete derivation.

Applying beam-search to a statistical shift-reduce parser is a straightforward extension to the deterministic example. At each step, a beam is used to store the top-k highest-scoring items, re-sulting from expanding all items in the previous beam. An item becomes a candidate output once it has an empty queue, and the parser keeps track of the highest scored candidate output and returns the best one as the final output. Compared with greedy local-search (Nivre and Scholz, 2004), the use of a beam allows the parser to explore a larger search space and delay difficult ambiguity-resolving de-cisions by considering multiple items in parallel. We refer to the shift-reduce model of Zhang and Clark (2011) as the normal-form model, where the oracle for each sentence specifies a unique se-quence of gold-standard actions which produces the corresponding normal-form derivation. No de-pendency structures are involved at training and test time, except for evaluation. In the next sec-tion, we describe a dependency oracle which con-siders all sequences of actions producing a gold-standard dependency structure to be correct. Categories in CCG are either basic (such as NP and PP ) or complex (such as ( S [ dcl ] \ NP ) / NP ). Each complex category in the lexicon defines one or more predicate-argument relations, which can be realized as a predicate-argument dependency when the corresponding argument slot is con-sumed. For example, the transitive verb category above defines two relations: one for the subject NP and one for the object NP . In this paper a CCG predicate-argument dependency is a 4-tuple:  X  h f ,f,s,h a  X  where h f is the lexical item of the lexical category expressing the relation; f is the lexical category; s is the argument slot; and h a is the head word of the argument. Since the lexical items in a dependency are indexed by their sen-tence positions, all dependencies for a sentence form a set, which is referred to as a CCG depen-dency structure . Clark and Curran (2007) contains a detailed description of dependency structures.
Fig. 2 shows an example demonstrating spu-rious ambiguity in relation to a CCG depen-dency structure. In both derivations, the first two lexical categories are combined using for-ward application ( &gt; ) and the following depen-the normal-form derivation (a), the dependency bining the transitive verb category with the ob-ject NP using forward application. One final de-alized when the root node S [ dcl ] is produced through backward application ( &lt; ).

Fig. 2(b) shows a non-normal-form derivation which uses type-raising ( T ) and composition ( B ) (which are not required to derive the correct de-pendency structure). In this alternative derivation, is realized using forward composition ( B ), and S [ dcl ] root is produced.

The chart-based dependency model of Clark and Curran (2007) treats all derivations as hid-den, and defines a probabilistic model for a de-pendency structure by summing probabilities of all derivations leading to a particular structure. Features are defined over both derivations and CCG predicate-argument dependencies. We fol-low a similar approach, but rather than define a probabilistic model (which requires summing), we define a linear model over sequences of shift-reduce actions, as for the normal-form shift-reduce model. However, the difference compared to the normal-form model is that we do not assume a sin-gle gold-standard sequence of actions.

Similar to Goldberg and Nivre (2012), we de-fine an oracle which determines, for a gold-standard dependency structure, G , what the valid transition sequences are (i.e. those sequences cor-responding to derivations leading to G ). More specifically, the oracle can determine, given G and an item  X  s,q  X  , what the valid actions are for that item (i.e. what actions can potentially lead to G , starting with  X  s,q  X  and the dependencies already built on s ). However, there can be exponentially many valid action sequences for G , which we rep-resent efficiently using a packed parse forest. We show how the forest can be used, during beam-search decoding, to determine the valid actions for a parse item (Section 3.2). We also show, in Section 3.3, how perceptron training with early-update (Collins and Roark, 2004) can be used in this setting. 3.1 The Oracle Forest A CCG parse forest efficiently represents an exponential number of derivations. Following Clark and Curran (2007) (which builds on Miyao and Tsujii (2002)), and using the same nota-tion, we define a CCG parse forest  X  as a tuple  X  C,D,R, X , X   X  , where C is a set of conjunctive Algorithm 1 (Clark and Curran, 2007) nodes and D is a set of disjunctive nodes. 2 Con-junctive nodes are individual CCG categories in  X  , and are either obtained from the lexicon, or by combining two disjunctive nodes using a CCG rule, or by applying a unary rule to a disjunctive node. Disjunctive nodes are equivalence classes of con-junctive nodes. Two conjunctive nodes are equiv-alent iff they have the same category, head and un-filled dependencies (i.e. they will lead to the same derivation, and produce the same dependencies, in any future parsing). R  X  D is a set of root dis-junctive nodes.  X  : D  X  2 C is the conjunctive child function and  X  : C  X  2 D is the disjunctive child function. The former returns the set of all conjunctive nodes of a disjunctive node, and the latter returns the disjunctive child nodes of a con-junctive node.

The dependency model requires all the conjunc-tive and disjunctive nodes of  X  that are part of the derivations leading to a gold-standard dependency structure G . We refer to such derivations as cor-rect derivations and the packed forest containing all these derivations as the oracle forest , denoted as  X  G , which is a subset of  X  . It is prohibitive to enumerate all correct derivations, but it is possible to identify, from  X  , all the conjunctive and dis-junctive nodes that are part of  X  G . Clark and Cur-ran (2007) gives an algorithm for doing so, which we use here. The main intuition behind the algo-rithm is that a gold-standard dependency structure decomposes over derivations; thus gold-standard dependencies realized at conjunctive nodes can be counted when  X  is built, and all nodes that are part of  X  G can then be marked out of  X  by traversing it top-down. A key idea in understanding the algo-rithm is that dependencies are created when dis-junctive nodes are combined, and hence are asso-ciated with, or  X  X ive on X , conjunctive nodes in the forest.

Following Clark and Curran (2007), we also define the following three values, where the first decomposes only over local rule productions, while the other two decompose over derivations: deps ( c ) is the set of all dependencies on con-junctive node c , and cdeps ( c ) counts the number of correct dependencies on c . dmax ( c ) is the max-imum number of correct dependencies over any sub-derivation headed by c and is calculated re-cursively; dmax ( d ) returns the same value for a disjunctive node. In all cases, a special value  X  indicates the presence of incorrect dependencies. To obtain the oracle forest, we first pre-compute dmax ( c ) and dmax ( d ) for all d and c in  X  when  X  is built using CKY , which are then used by Algo-rithm 1 to identify all the conjunctive and disjunc-tive nodes in  X  G . 3.2 The Dependency Oracle Algorithm We observe that the canonical shift-reduce algo-rithm (as demonstrated in Fig. 1) applied to a sin-gle parse tree exactly resembles bottom-up post -order traversal of that tree. As an example, con-sider the derivation in Fig. 2a, where the corre-sponding sequence of actions is: sh N / N , sh N , re N , un NP , sh ( S [ dcl ] \ NP ) / NP , sh NP , re S [ dcl ] \ NP , re S [ dcl ] . 3 The order of traversal is left-child, right-child and parent. For a single parse, the corresponding shift-reduce action se-quence is unique, and for a given item this canoni-cal order restricts the possible derivations that can be formed using further actions. We now extend this observation to the more general case of an oracle forest, where there may be more than one gold-standard action for a given item.
 Definition 1. Given a gold-standard dependency in bold. structure G , an oracle forest  X  G , and an item  X  s,q  X  , we say s is a realization of G , denoted s ' G , if | s | = 1 , q is empty and the single deriva-tion on s is correct. If | s | &gt; 0 and the subtrees on s can lead to a correct derivation in  X  G using fur-ther actions, we say s is a partial-realization of G , denoted as s  X  G . And we define s  X  G for | s | = 0 .

As an example, assume that  X  G contains only the derivation in Fig. 2a; then a stack containing the two subtrees in Fig. 3a is a partial-realization, while a stack containing the three subtrees in Fig. 3b is not. Note that each of the three sub-trees in Fig. 3b is present in  X  G ; however, these subtrees cannot be combined into the single cor-rect derivation, since the correct sequence of shift-reduce actions must first combine the lexical cat-egories for Mr. and President before shifting the lexical category for visited .

We denote an action as a pair ( x,c ) , where x  X  { SHIFT , REDUCE , UNARY } and c is the root of the subtree resulting from that action. For all three types of actions, c also corresponds to a unique conjunctive node in the complete forest  X  ; and we use c s  X  corresponding to subtree s i on the stack. Let  X  s 0 ,q 0  X  =  X  s,q  X  X  X  ( x,c ) be the resulting item from applying the action ( x,c ) to  X  s,q  X  ; and let the set of all possible actions for  X  s,q  X  be X  X  s,q  X  { ( x,c ) | ( x,c ) is applicable to  X  s,q  X  X  . Definition 2. Given  X  G and an item  X  s,q  X  s.t. s  X  G , we say an applicable action ( x,c ) for the item is valid iff s 0  X  G or s 0 ' G , where  X  s 0 ,q 0  X  =  X  s,q  X  X  X  ( x,c ) .
 Definition 3. Given  X  G , the dependency oracle function f d is defined as: f d (  X  s,q  X  , ( x,c ) ,  X  G ) = where ( x,c )  X  X   X  s,q  X  and  X  s 0 ,q 0  X  =  X  s,q  X  X  X  ( x,c ) . The pseudocode in Algorithm 2 implements f d . It determines, for a given item, whether an appli-cable action is valid in  X  G .

It is trivial to determine the validity of a SHIFT action for the initial item,  X  s,q  X  0 , since the SHIFT action is valid iff its category matches the gold-standard lexical category of the first word in the sentence. For any subsequent SHIFT action (
SHIFT ,c ) to be valid, the necessary condition is lexical category of the front word in the queue, q 0 (line 3). However, this condition is not sufficient; a counterexample is the case where all the gold-standard lexical categories for the sentence in Fig-ure 2 are shifted in succession. Hence, in general, the conditions under which an action is valid are more complex than the trivial case above.

First, suppose there is only one correct deriva-tion in  X  G . A SHIFT action ( SHIFT ,c lex whenever c s responding to the subtree s 0 on the stack) and c lex 0 (the conjunctive node in  X  G corresponding to the next gold-standard lexical category from the queue) are both dominated by the conjunctive node parent p of c s (
REDUCE ,c ) is valid if c matches the category of the conjunctive node parent of c s A
UNARY action ( UNARY ,c ) is valid if c matches the conjunctive node parent of c s generalize the case where  X  G contains a single correct parse to the case of an oracle forest, where each parent p is replaced by a set of conjunctive nodes in  X  G .
 Definition 4. The left parent set p L ( c ) of con-junctive node c  X   X  G is the set of all parent con-junctive nodes of c in  X  G , which have the disjunc-tive node d containing c (i.e. c  X   X  ( d ) ) as a left child.
 Definition 5. The ancestor set A ( c ) of conjunc-tive node c  X   X  G is the set of all reachable ances-tor conjunctive nodes of c in  X  G .
 Definition 6. Given an item  X  s,q  X  , if | s | = 1 we say s is a frontier stack . Algorithm 2 The Dependency Oracle Function f d
A key to defining the dependency oracle func-tion is the notion of a shared ancestor set . In-tuitively, shared ancestor sets are built up through shift actions, and contain sets of nodes which can potentially become the results of reduce or unary actions. A further intuition is that shared ances-tor sets define the space of possible correct deriva-tions, and nodes in these sets are  X  X icked off X  when reduce and unary actions are applied, as a single correct derivation is built through the shift-reduce process (corresponding to a bottom-up post-order traversal of the derivation). The following defi-nition shows how the dependency oracle function builds shared ancestor sets for each action type. Definition 7. Let  X  s,q  X  be an item and let  X  s 0 ,q 0  X  =  X  s,q  X  X  X  ( x,c ) . We define the shared an-cestor set R ( c s 0 ( x,c ) , as:
The base case for Definition 7 is when the gold-standard lexical category of the first word in the sentence has been shifted, which creates an empty shared ancestor set. Furthermore, the shared an-cestor set is always empty when the stack is a fron-tier stack.

The dependency oracle algorithm checks the va-lidity of applicable actions. A SHIFT action is valid if R ( c s 0 s 0 . A valid REDUCE action consumes s 1 and s . For the new node, its shared ancestor set is the subset of the conjunctive nodes in R ( c s which dominate the resulting conjunctive node of a valid REDUCE action. The UNARY case for a frontier stack is trivial: any UNARY action ap-plicable to s in  X  G is valid. For a non-frontier stack, the UNARY case is similar to REDUCE ex-cept the resulting shared ancestor set is a subset of R ( c s
We now turn to the problem of finding the shared ancestor sets. In practice, we do not do this by traversing  X  G top-down from the conjunctive nodes in p L ( c s R . Instead, when we build  X  G in bottom-up topo-logical order, we pre-compute the set of reachable disjunctive nodes of each conjunctive node c in  X  G as:
Each D is implemented as a hash map, which allows us to test the membership of one potential conjunctive node in O (1) time. For example, a conjunctive node c  X  p L ( c s c lex 0 if there is a disjunctive node d  X  D ( c ) s.t. c lex 0  X   X  ( d ) . With this implementation, the com-plexity of checking each valid SHIFT action is then O ( | p L ( c s 3.3 Training We use the averaged perceptron (Collins, 2002) to train a global linear model and score each ac-tion. The normal-form model of Zhang and Clark (2011) uses an early update mechanism (Collins and Roark, 2004), where decoding is stopped to update model weights whenever the single gold action falls outside the beam. In our parser, there can be multiple gold items in a beam. One option would be to apply early update whenever at least Algorithm 3 Dependency Model Training one of these gold items falls outside the beam. However, this may not be a true violation of the gold-standard (Huang et al., 2012). Thus, we use a relaxed version of early update, in which all gold-standard actions must fall outside the beam before an update is performed. This update mechanism is provably correct under the violation-fixing frame-work of Huang et al. (2012).

Let ( y,G ) be a training sentence paired with its gold-standard dependency structure and let  X   X  s,q  X  be the following set for an item  X  s,q  X  : { X  s,q  X  X  X  ( x,c ) | f d (  X  s,q  X  , ( x,c ) ,  X  G ) = true }  X   X  s,q  X  contains all correct items at step i + 1 ob-tained by expanding  X  s,q  X  . Let the set of all cor-rect items at a step i + 1 be: 5
Algorithm 3 shows the pseudocode for training the dependency model with early update for one input ( y,G ) . The score of an item  X  s,q  X  is calcu-lated as w  X   X  (  X  s,q  X  ) with respect to the current model w , where  X  (  X  s,q  X  ) is the feature vector for the item. At step i , all items are expanded and added onto the next beam B i +1 , and the top-k re-tained. Early update is applied when all gold items first fall outside the beam, and any candidate out-put is incorrect (line 14). Since there are poten-tially many gold items, and one gold item is re-quired for the perceptron update, a decision needs to be made regarding which gold item to update against. We choose to reward the highest scoring gold item, in line with the violation-fixing frame-work; and penalize the highest scoring incorrect item, using the standard perceptron update. A fi-nal update is performed if no more expansions are possible but the final output is incorrect. We implement our shift-reduce parser on top of the core C &amp; C code base (Clark and Curran, 2007) and evaluate it against the shift-reduce parser of Zhang and Clark (2011) (henceforth Z &amp; C ) and the chart-based normal-form and hybrid models of Clark and Curran (2007). For all experiments, we use CCGBank with the standard split: sections 2-21 for training (39,604 sentences), section 00 for de-velopment (1,913 sentences) and section 23 (2,407 sentences) for testing.

The way that the CCG grammar is implemented in C &amp; C has some implications for our parser. First, unlike Z &amp; C , which uses a context-free cover (Fowler and Penn, 2010) and hence is able to use all sentences in the training data, we are only able to use 36,036 sentences. The reason is that the grammar in C &amp; C does not have complete cover-age of CCGBank, due to the fact that e.g. not all rules in CCGBank conform to the combinatory rules of CCG . Second, our parser uses the unifica-tion mechanism from C &amp; C to output dependencies directly, and hence does not need a separate post-processing step to convert derivations into CCG de-pendencies, as required by Z &amp; C .

The feature templates of our model consist of all of those in Z &amp; C , except the ones which re-quire lexical heads to come from either the left or right child, as such features are incompatible with the head passing mechanism used by C &amp; C . Each Z &amp; C template is defined over a parse item, and captures various aspects of the stack and queue context. For example, one template returns the top category on the stack plus its head word, to-gether with the first word and its POS tag on the queue. Another template returns the second cat-egory on the stack, together with the POS tag of its head word. Every Z &amp; C feature is defined as a pair, consisting of an instantiated context tem-plate and a parse action. In addition, we use all the CCG predicate-argument dependency features from Clark and Curran (2007), which contribute to the score of a REDUCE action when dependencies normal-form model is used. are realized. Detailed descriptions of all the tem-plates in our model can be found in the respective papers. We run 20 training iterations and the re-sulting model contains 16.5M features with a non-zero weight.

We use 10-fold cross validation for POS tagging and supertagging the training data, and automat-ically assigned POS tags for all experiments. A probability cut-off value of 0 . 0001 for the  X  pa-rameter in the supertagger is used for both train-ing and testing. The  X  parameter determines how many lexical categories are assigned to each word;  X  = 0 . 0001 is a relatively small value which al-lows in a large number of categories, compared to the default value used in Clark and Curran (2007). For training only, if the gold-standard lexical cat-egory is not supplied by the supertagger for a par-ticular word, it is added to the list of categories. 4.1 Results and Analysis The beam size was tuned on the development set, and a value of 128 was found to achieve a rea-sonable balance of accuracy and speed; hence this value was used for all experiments. Since C &amp; C al-ways enforces non-fragmentary output (i.e. it can only produce spanning analyses), it fails on some sentences in the development and test sets, and thus we also evaluate on the reduced sets, follow-ing Clark and Curran (2007). Our parser does not fail on any sentences because it permits fragmen-tary output (those cases where there is more than one subtree left on the final stack). The results for Z &amp; C , and the C &amp; C normal-form and hybrid mod-els, are taken from Zhang and Clark (2011).

Table 1 shows the accuracies of all parsers on the development set, in terms of labeled precision and recall over the predicate-argument dependen-cies in CCGBank. On both the full and reduced sets, our parser achieves the highest F-score. In comparison with C &amp; C , our parser shows signif-icant increases across all metrics, with 0 . 57% and 1 . 06% absolute F-score improvements over the hybrid and normal-form models, respectively. Another major improvement over the other two parsers is in sentence level accuracy, LSent, which measures the number of sentences for which the dependency structure is completely correct.

Table 1 also shows that our parser has improved recall over Z &amp; C at some expense of precision. To probe this further we compare labeled precision and recall relative to dependency length, as mea-sured by the distance between the two words in a dependency, grouped into bins of 5 values. Fig. 4 shows clearly that Z &amp; C favors precision over re-call, giving higher precision scores for almost all dependency lengths compared to our parser. In terms of recall (Fig. 4b), our parser outperforms Z &amp; C over all dependency lengths, especially for longer dependencies ( x  X  20) . When compared with C &amp; C , the recall of the Z &amp; C parser drops quickly for dependency lengths over 10. While our parser also suffers from this problem, it is less severe and is able to achieve higher recall at x  X  30 .
 Table 2 compares our parser with Z &amp; C and the C &amp; C hybrid model, for the most frequent depen-dency relations. While our parser achieved lower precision than Z &amp; C , it is more balanced and gives higher recall for all of the dependency relations ex-cept the last one, and higher F-score for over half of them.

Table 3 presents the final test results on Section 23. Again, our parser achieves the highest scores across all metrics (for both the full and reduced test sets), except for precision and lexical category assignment, where Z &amp; C performed better. We have presented a dependency model for a shift-reduce CCG parser, which fully aligns CCG parsing with the left-to-right, incremental nature of a shift-reduce parser. Our work is in part inspired by the dependency models of Clark and Curran (2007) and, in the use of a dependency oracle, is close in spirit to that of Goldberg and Nivre (2012). The difference is that the Goldberg and Nivre parser builds, and scores, dependency structures directly, whereas our parser uses a unification mechanism to create dependencies, and scores the CCG deriva-tions, allowing great flexibility in terms of what dependencies can be realized. Another related work is Yu et al. (2013), which introduced a sim-ilar technique to deal with spurious ambiguity in MT. Finally, there may be potential to integrate the techniques of Auli and Lopez (2011), which cur-rently represents the state-of-the-art in CCGBank parsing, into our parser.
 We thank the anonymous reviewers for their help-ful comments. Wenduan Xu is fully supported by the Carnegie Trust and receives additional fund-ing from the Cambridge Trusts. Stephen Clark is supported by ERC Starting Grant DisCoTex (306920) and EPSRC grant EP/I037512/1. Yue Zhang is supported by Singapore MOE Tier2 grant T2MOE201301.

