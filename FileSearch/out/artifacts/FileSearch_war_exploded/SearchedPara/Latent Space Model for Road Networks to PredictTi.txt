 Real-time traffic prediction from high-fidelity spatiotemporal traf-fic sensor datasets is an important problem for intelligent trans-portation systems and sustainability. However, it is challenging due to the complex topological dependencies and high dynamism associated with changing road conditions. In this paper, we pro-pose a Latent Space Model for Road Networks (LSM-RN) to ad-dress these challenges holistically. In particular, given a series of road network snapshots, we learn the attributes of vertices in latent spaces which capture both topological and temporal properties. As these latent attributes are time-dependent, they can estimate how traffic patterns form and evolve. In addition, we present an incre-mental online algorithm which sequentially and adaptively learns the latent attributes from the temporal graph changes. Our frame-work enables real-time traffic prediction by 1) exploiting real-time sensor readings to adjust/update the existing latent spaces, and 2) training as data arrives and making predictions on-the-fly. By con-ducting extensive experiments with a large volume of real-world traffic sensor data, we demonstrate the superiority of our frame-work for real-time traffic prediction on large road networks over competitors as well as baseline graph-based LSM X  X .
 Latent space model, real-time traffic forecasting, road network
Recent advances in traffic sensing technology have enabled the acquisition of high-fidelity spatiotemporal traffic datasets. For ex-ample, at our research center, for the past five years, we have been collecting data from 15000 loop detectors installed on the high-ways and arterial streets of Los Angeles County, covering 3420 miles cumulatively (see the case study in [13]). The collected data include several main traffic parameters such as occupancy, volume, and speed at the rate of 1 reading/sensor/min. These large scale data streams enable accurate traffic prediction, which in turn improves route navigation, traffic regulation, urban planning, etc.
The traffic prediction problem aims to predict the future travel speed of each and every edge of a road network, given the his-torical speed readings from the sensors on these edges. To solve the traffic prediction problem, the majority of existing techniques utilize the historical information of an edge to predict its future travel-speed using regression techniques such as Auto-regressive Integrated Moving Average (ARIMA) [18], Support Vector Regres-sion (SVR) [20] and Gaussian Process (GP) [31]. There are also studies that leverage spatial/topological similarities to predict the readings of an edge based on its neighbors in either the Euclidean space [10] or the network space [14]. Even though there are few notable exceptions such as Hidden Markov Model (HMM) [14,28] that predict traffic of edges by collectively inferring temporal in-formation, these approaches simply combine the local information of neighbors with temporal information. Furthermore, existing ap-proaches such as GP and HMM are computationally expensive and require repeated offline trainings. Therefore, it is very difficult to adapt the models to real-time traffic forecasting.

Motivated by these challenges, we propose Latent Space Model-ing for Road Networks ( LSM-RN ), which enables more accurate and scalable traffic prediction by utilizing both topology similarity and temporal correlations. Specifically, with LSM-RN, vertices of dynamic road network are embedded into a latent space, where two vertices that are similar in terms of both time-series traffic behavior and the road network topology are close to each other in the la-tent space. Recently, Latent Space Modeling has been successfully applied to several real-world problems such as community detec-tion [24, 29], link prediction [17, 33] and sentiment analysis [32]. Among them, the work on social networks [17, 24, 33] (hereafter called LSM-SN ) is most related to ours because in both scenarios data are represented as graphs and each vertex of these graphs has different attributes. However, none of the approaches to LSM-SN are suitable for both identifying the edge and/or sensor latent at-tributes in road networks and exploiting them for real-time traffic prediction due to the following reasons.

First, road networks show significant topological (e.g., travel-speeds between two sensors on the same road segment are sim-ilar), and temporal (e.g., travel-speeds measured every 1 minute on a particular sensor are similar) correlations. These correlations can be exploited to alleviate the missing data problem, which is unique to road networks, due to the fact that some road segments may contain no sensors and any sensor may occasionally fail to re-port data. Second, unlike social networks, LSM-RN is fast evolving due to the time-varying traffic conditions. On the contrary, social networks evolve smoothly and frequent changes are very unlikely (e.g., one user changes its political preferences twice a day). In-stead, in road networks, traffic conditions on a particular road seg-ment can change rapidly in a short time (i.e., time-dependent) be-cause of rush/non-rush hours and traffic incidents. Third, LSM-RN is highly dynamic where fresh data come in a streaming fashion, whereas the connections (weights) between nodes in social net-works are mostly static. The dynamic nature requires frequent model updates (e.g., per minute), which necessitates partial up-dates of the model as opposed to the time-consuming full updates in LSM-SN. Finally, with LSM-RN, the ground truth can be ob-served shortly after making the prediction (by measuring the actual speed later in future), which also provides an opportunity to im-prove/adjust the model incrementally (i.e., online learning).
With our proposed LSM-RN, each dimension of the embedded latent space represents a latent attribute. Thus the attribute distri-bution of vertices and how the attributes interact with each other jointly determine the underlying traffic pattern. To enforce the topology of road network, LSM-RN adds a graph Laplacian con-straint which not only enables global graph similarity, but also com-pletes the missing data by a set of similar edges with non-zero read-ings. Subsequently, we incorporate the temporal properties into our LSM-RN model by considering time-dependent latent attributes and a global transition process. With these time-dependent latent attributes and the transition matrix, we are able to better model how traffic patterns form and evolve.

To infer the time-dependent latent attributes of our LSM-RN model, a typical method is to utilize multiplicative algorithms [16] based on Non-negative Matrix Factorization, where we jointly infer the whole latent attributes via iterative updates until they become stable, termed as global learning . However, global learning is not only slow but also not practical for real-time traffic prediction. This is because, traffic data are of high-fidelity (i.e., updates are frequent in every one minute) and the actual ground-truth of traffic speed be-comes available shortly afterwards (e.g., after making a prediction for the next five minutes, the ground truth data will be available instantly after five minutes). We thus propose an incremental on-line learning with which we sequentially and adaptively learn the latent attributes from the temporal traffic changes. In particular, each time when our algorithm makes a prediction with the latent attributes learned from the previous snapshot, it receives feedback from the next snapshot (i.e., the ground truth speed reading we al-ready obtained) and subsequently modifies the latent attributes for more accurate predictions. Unlike traditional online learning which only performs one single update (e.g., update one vertex per predic-tion) per round, our goal is to make predictions for the entire road network, and thus the proposed online algorithm allows updating latent attributes of many correlated vertices simultaneously. Leveraging global and incremental learning algorithms our LSM-RN model can strike a balance between accuracy and efficiency for real-time forecasting. Specifically, we consider a setting with a pre-defined time window where at each time window (e.g., 5 minutes), we learn our traffic model with the proposed incremental inference approach on-the-fly, and make predictions for the next time span. Meanwhile, we batch the re-computation of our traffic model at the end of one large time window (e.g., one hour). Under this setting, our LSM-RN model enables the following two properties: (1) real-time feedback information can be seamlessly incorporated into our framework to adjust for existing latent spaces, thus allowing for more accurate predictions, and (2) our algorithms perform training and predictions on-the-fly with small amount of data rather than requiring large training datasets.

We conducted extensive experiments on a large scale of real-world traffic sensor dataset. We demonstrated that the LSM-RN framework achieves better accuracy than that of both existing time series methods (e.g. ARIMA and SVR) and the LSM-SN approaches. Moreover, we show that our algorithm scales to large road net-works. For example, it only takes 4 seconds to make a prediction for a network with 19,986 edges. Finally, we show that our batch window setting works perfectly for streaming data, alternating the executions of our global and incremental algorithms, which strikes a compromise between prediction accuracy and efficiency. For in-stance, incremental learning is one order of magnitude faster than global learning, and it requires less than 1 seconds to incorporate real-time feedback information.

The remainder of this paper is organized as follows. We discuss the related work in Section 2 and define our problem in Section 3. and explain LSM-RN in Section 4. We present the global learning and increment learning algorithms, and discuss how to adapt our al-gorithms for real-time traffic forecasting in Section 5. In Section 6, we report the experiment results and conclude the paper afterwards.
Many studies have been conducted to address the traffic predic-tion problem, but no single study so far has tackled all the chal-lenges in a holistic manner. Some focused on missing values [19] or missing sensors [30], but not both. Some studies [18, 31] uti-lize temporal data which models each sensor (or edge) indepen-dently and makes predictions using time series approaches (e.g., ARIMA [18], SVR [20] and GP [31]). For instance, Pan et. al. [18] learns an enhanced ARIMA model for each edge in advance, and then performs traffic prediction on top of these models. Very few studies [14, 28] utilize spatiotemporal model with correlated time series based on Hidden Markov Model, but only for small num-ber of time series and not always using the network space as the spatial dimension (e.g., using Euclidean space [10]). In [27], Xu et. al. consider using the newly arrived data as feedback to reward one classifier vs. the other but not for dynamically updating the model. Note that many existing studies [5,12,25,28] on traffic pre-diction are based on GPS dataset, which is different with the sensor dataset, where we have fine-grained and steady readings from road-equipped sensors. We are not aware of any study that applies latent space modeling (considering both time and network topology) to real-time traffic prediction from incomplete (i.e., missing sensors and values) sensor datasets.
Recently, many real data analytic problems such as community detection [24,29], recommendation system [6], topic modeling [22], image clustering [4], and sentiment analysis [32], have been formu-lated as the problem of latent space learning. These studies assume that, given a graph, each vertex resides in a latent space with at-tributes, and vertices which are close to each other are more likely to be in the same cluster (e.g., community or topic) and form a link. In particular, the objective is to infer the latent matrix by minimiz-ing the difference (e.g., squared loss [29,32] or KL-divergence [4]) between observed and estimated links. However, existing methods are not designed for the highly correlated (topologically and tem-porally) and dynamic road networks. Few studies [21] have con-sidered the temporal relationships in SN with the assumption that networks evolve over time. The temporal graph snapshots in [21] are treated separately and thus newly observed data are not incorpo-rated to improve the model. Compared with existing works, we ex-plore the feasibility of modeling road networks with time-varying latent space. The traffic speed of a road segment is determined by their latent attributes and the interaction between corresponding attributes. To tackle the sparsity of road network, we utilize the graph topology by adding a graph Laplacian constraint to impute the missing values. In addition, the latent position of each vertex, varies over time and allows for sudden movement from one times-tamp to the next timestamp via a transition matrix.

Different techniques have been proposed to learn the latent prop-erties, where Non-negative Matrix Factorization (NMF) is one of the most popular methods thanks to ease of interpretability and flex-ibility. In this work, we explore the feasibility of applying dynamic NMF to traffic prediction domain. We design a global algorithm to infer the latent space based on the traditional multiplicative al-gorithm [9,16]. We further propose a topology-aware incremental algorithm, which adaptively updates the latent space representation for each node in the road network with topology constraints. The proposed algorithms differ from traditional online NMF algorithms such as [3], which independently perform the online update.
We denote a road network as a directed graph N =( V, E ) , where V is the set of vertices and E  X  V  X  V is the set of edges, respectively. A vertex v i  X  V models a road intersection or an end of road. An edge e ( v i ,v j ) , which connects two vertices, repre-sents a directed network segment. Each edge e ( v i ,v j ) is associated with a travel speed c ( v i ,v j ) (e.g., 40 miles/hour). In addition, N has a corresponding adjacency matrix representation, denoted as G ,whose ( i, j ) th entry represents the edge weight between the i th and j th vertices.

The road network snapshots are constructed from a large-scale, high resolution traffic sensor dataset (see detailed description of sensor data in Section 6). Specifically, a sensor s (i.e., a loop detec-tor) is located at one segment of road network N , which provides a reading (e.g., 40 miles/hour) per sampling rate (e.g., 1 min). We divide one day into different intervals, where span is the length of each time interval. For example, when span =5 minutes, we have 288 time intervals per day. For each time interval t ,weag-gregate (i.e., average) the readings of one sensor. Subsequently, for each edge segment of network N , we average all sensor readings located at that edge as its weight. Therefore, at each timestamp t , we have a road network snapshot G t from traffic sensors. Example. Figure 1 (a) shows a simple road network with 7 vertices and 10 edges at one timestamp. Three sensors (i.e., s 1 ,s located in edges ( v 1 ,v 2 ) , ( v 3 ,v 4 ) and ( v 7 ,v each sensor provides an aggregated reading during the time inter-val. Figure 1(b) shows the corresponding adjacent matrix after mapping the sensor readings to the road segments. Note that the sensor dataset is incomplete with both missing values (i.e., sensor fails to report data) and missing sensors (i.e., edges without any sensors). Here sensor s 3 fails to provide reading, thus the edge weight of c ( v 3 ,v 4 ) is ? due to missing value. In addition, the edge weight of c ( v 3 ,v 2 ) is marked as  X  because of missing sensors. v v
Given a small number of road network snapshots, or a dynamic road network, our objective is to predict the future traffic condi-tions. Specifically, a dynamic road network , is a sequence of snap-shots ( G 1 ,G 2 ,  X  X  X  ,G T ) with edge weights denoting time-dependent travel speed.

With a dynamic road network, we formally define the problem of edge traffic prediction with missing data as follows: Problem 1 Given a dynamic road network ( G 1 ,G 2 ,  X  X  X  ,G missing data at each timestamp, we aim to achieve the following two goals:
For ease of presentation, Table 1 lists the notations we use through-out this paper. Note that since each dimension of a latent space represents a latent attribute, we thus use latent attributes and latent positions interchangeably.
In this section, we describe our LSM-RN model in the context of traffic prediction. We first introduce the basic latent space model (Section 4.1) by considering the graph topology, and then incorpo-rate both temporal and transition patterns (Section 4.2). Finally, we describe the complete LSM-RN model to solve the traffic predic-tion problem with missing data (Section 4.3).
Our traffic model is built upon the latent space model of the ob-served road network. Basically, each vertex of road network have different attributes and each vertex has an overlapping representa-tion of attributes. The attributes of vertices and how each attribute interacts with others jointly determine the underlying traffic pat-terns. Intuitively, if two highway vertices are connected, their cor-responding interaction generates a higher travel speed than that of two vertices located at arterial streets. In particular, given a snap-shot of road network G , we aim to learn two matrices U and B , where matrix U  X  R n  X  k + denotes the latent attributes of vertices, and matrix B  X  R k  X  k + denotes the attribute interaction patterns. The product of UBU T represents the traffic speed between any two vertices, where we use to approximate G . Note that B is an asymmetric matrix since the road network G is directed. There-fore, the basic traffic model which considers the graph topology can be determined by solving the following optimization problem: Figure 2: An example of our traffic model, where G represents a road
Similar Non-negative Tri-factorization frameworks have been uti-lized in clustering [9], community detection [29] and sentimental analysis [32]. Figure 2 (a) illustrates the intuition of our static traf-fic model. As shown in Figure 2 (b), suppose we know that each vertex is associated with two attributes (e.g., highway and business area), and the interaction pattern between two attributes is encoded in matrix B , we can accurately estimate the travel speed between vertex v 1 and v 2 , using their latent attributes and the matrix B . Overcome the sparsity of Road Network. In our road network, G is very sparse (i.e., zero entries dominate the items in G )for the following reasons: (1) the average degree of a road network is small [26], and thus the edges of road network is far from fully connected, (2) the distribution of sensors is non-uniform, and only a small number of edges are equipped with sensors; and (3) there exists missing values (for those edges equipped with sensors) due to the failure and/or maintenance of sensors.

Therefore, we define our loss function only on edges with ob-served readings, that is, the set of edges with travel cost c ( v 0 . In addition, we also propose an in-filling method to reduce the gap between the input road network and the estimated road net-work. We consider graph Laplacian dynamics, which is an effec-tive smoothing approach for finding global structure similarity [15]. Specifically, we construct a graph Laplacian matrix L ,definedas L = D  X  W ,where W is a graph proximity matrix that is con-structed from the network topology, and D is a diagonal matrix D one snapshot of road network G is expressed as follows: where Y is an indication matrix for all the non-zero entries in G , i.e, Y ij =1 if and only if G ( i, j ) &gt; 0 ;  X  is the Hadamard product operator, i.e., ( X  X  Z ) ij = X ij  X  Z ij ;and  X  is the Laplacian regularization parameter.
Next, we will incorporate the temporal information, including time-dependent modeling of latent attributes and the temporal tran-sition. With this model, each vertex is represented in a unified latent space, where each dimension either represents a spatial or temporal attribute. The behavior of the vertices of road networks may evolve quickly. For instance, the behavior of a vertex that is similar to that of a high-way vertex during normal traffic condition, may become similar to that of an arterial street node during congestion hours. Because the behavior of each vertex can change over time, we must employ a time-dependent modeling for attributes of vertices for real-time traffic prediction. Therefore, we add the time-dependent effect of attributes into our traffic model. Specifically, for each t  X  T ,we aim to learn a corresponding time-dependent latent attribute rep-resentation U t . Although the latent attribute matrix U dependent, we assume that the attribute interaction matrix B is an inherent property, and thus we opt to fix B for all timestamps. By incorporating this temporal effect, we obtain our model based on the following optimization problem:
Due to the dynamics of traffic condition, we aim to learn not only the time-dependent latent attributes, but also a transition model to capture the evolving behavior from one snapshot to the next. The transition should capture both periodic evolving patterns (e.g., morning/afternoon rush hours) and non-recurring patterns caused by traffic incidents (e.g., accidents, road construction, or work zone closures). For example, during the interval of an accident, a vertex transition from the normal state to the congested at the beginning, then become normal again after the accident is cleared.
 We thus assume a global process to capture the state transitions. Specifically, we use a matrix A that approximates the changes of U between time t  X  1 to time t , i.e., U t = U t  X  1 A ,where U  X  R + ,A  X  R k  X  k + . The transition matrix A represents how likely a vertex is to transit from attribute i to attribute j from timestamp 1 to timestamp T .
Considering all the above discussions, the final objective func-tion for our LSM-RN model is defined as follows: where  X  and  X  are the regularization parameters.

By solving Eq. 4, we obtain the learned matrices of U t ,B and A from our LSM-RN model. Consequently, the task of both missing value and sensor completion can be accomplished by the following: Subsequently, the edge traffic for snapshot G T + h (where h is the number of future time spans) can be predicted as follows:
In this section, we first present a typical global multiplicative algorithm to infer the LSM-RN model, and then discuss a fast in-cremental algorithm that scales to large road networks.
We develop an iterative update algorithm to solve Eq. 4, which belongs to the category of traditional multiplicative update algo-rithm [16]. By adopting the methods from [16], we can derive the update rule of U t , B and A . The details of derivation can be found in the technical report [8].
 Lemma 1 The Update rule of U t , B and A can be expressed as follows: (7)
Algorithm 1 outlines the process of updating each matrix using aforementioned multiplicative rules to optimize Eq. 4. The general idea is to jointly infer and cyclically update all the latent attribute matrices U t , B and A . In particular, we first jointly learn the la-tent attributes for each time t from all the graph snapshots (Lines 3 X 4). Based on the sequence of time-dependent latent attributes ( i.e., U 1 ,U 2 ,  X  X  X  ,U T ) , we then learn the global attribute interac-tion pattern B and the transition matrix A (Lines 5 X 6).

From Algorithm 1, we now explain how our LSM-RN model jointly learns the spatial and temporal properties. Specifically, when we update the latent attribute of one vertex U t ( i ) , the spatial prop-erty is preserved by (1) considering the latent positions of its ad-jacent vertices ( Y t  X  G t ), and (2) incorporating the local graph Laplacian constraint (i.e., matrix W and D ). Moreover, the tem-poral property of one vertex is then captured by leveraging its la-tent attribute in the previous and next timestamps (i.e., U U t +1 ( i ) ), as well as the transition matrix.
 Algorithm 1 Global-learning( G 1 ,G 2 ,  X  X  X  ,G T ) 1: Initialize U t , B and A 2: while Not Convergent do 3: for t =1 to T do 5: update B according to Eq. 8 6: update A according to Eq. 9
In the following, we briefly discuss the time complexity and con-vergence of global learning algorithm. From Lemma 1 In each it-eration, the computation is dominated by matrix multiplication op-erations. Therefore, the worst case time complexity per iteration is dominated by O ( T ( nk 2 + n 2 k )) . In practice , we opt to choose a low-rank latent space representation, where k is a small number (e.g., 20). In terms of convergence, followed the proof shown in previous works [4,16,32], we can prove that Algorithm 1 converges into a local minimal and the objective value is non-increasing in each iteration.
The intuition behind our incremental algorithm is based on the observation that each time when we make a prediction for the next five minutes, the ground truth reading will be available immediately after five minutes. This motivates us to adjust the latent position of each vertex so that the prediction is closer to the ground truth. On the other hand, it is not necessary to perform the latent position ad-justment for each vertex. This is because during a short time inter-val, the overall traffic condition of the whole network tends to stay steady, and the travel cost of most edges changes at a slow pace, although certain vertices can go through obvious variations. There-fore, instead of recomputing the latent positions of all the vertices from scratch at every time stamp, we perform a  X  X azy" update. In particular, to learn the latent space U t , the incremental algorithm utilizes the latent space we have already learned in the previous snapshot (i.e., U t  X  1 ), makes predictions for the next snapshot (i.e., G ), and then conditionally adjusts latent attributes of a subset of vertices based on the changes of traffic condition.
Algorithm 2 presents the pseudo-code of incremental learning algorithm. Initially, we learn the latent space of U 1 from our global multiplicative algorithm (Line 1). With the learned latent matrix U t  X  1 , at each time stamp t between 2 and T , our incremental up-date consists of the following two components: 1) identify candi-date vertices based on feedbacks (Lines 3-8); 2) update their la-tent attributes and propagate the adjustment from one vertex to its neighbors (Line 9). As outlined in Algorithm 2, given U t  X  1 G , we first make an estimation of $ G t based on U t  X  1 (Line 3). Subsequently, we use G t as the feedback information, select the set of vertices where we make inaccurate predictions, and insert them into a candidate set cand (Lines 4-8). Consequently, we up-date U t based on the learned latent matrix U t  X  1 , the ground truth observation G t and candidate set cand (Line 9). After that, we learn the global transition matrix A (Line 10).
Given U t  X  1 and G t , we now explain how to calculate U mentally from U t  X  1 with the candidate set cand , with which we can accurately approximate G t . The main idea is similar to an on-line learning process. At each round, the algorithm predicts an out-come for the required task (i.e., predict the speed of edges). Once the algorithm makes a prediction, it receives feedback indicating the correct outcome. Then, the online algorithm can modify its prediction mechanism for better predictions on subsequent times-tamps. In our scenario, we first use the latent attribute matrix U to predict G t as if we do not know the observation, subsequently we adjust the model of U t according to the true observation of G we already have in hand.

However, in our problem, we are making predictions for the en-tire road network, not for a single edge. When we predict for one edge, we only need to adjust the latent attributes of two vertices, whereas in our scenario we need to update the latent attributes for many correlated vertices. Therefore, the effect of adjusting the la-tent attribute of one vertex can potentially affect its neighboring vertices, and influence the convergence speed of incremental learn-ing. Hence, the adjustment order of vertices is very important. Algorithm 2 Incremental-Learning( G 1 ,G 2 ,  X  X  X  ,G T ) 2: for t =2 to T do 4: cand  X  X  X  (a subset of vertices to be updated) 5: for each i  X  G do 6: for each j  X  out ( i ) do 8: cand  X  cand  X  { i, j } 10: Iteratively learn transition matrix A using Eq. 9 until A converges Algorithm 3 Incremental-Update( U t  X  1 ,G t , cand ) 2: while Not Convergent AND cand /  X  X  X  do 3: order cand from the reverse topological order 4: for i  X  cand do 6: for each j  X  out ( i ) do 9: cand  X  cand \{ i } 10: for each j  X  out ( i ) do 13: cand  X  cand  X  { j }
Algorithm 3 presents the details of updating U t incrementally from U t  X  1 . For each vertex i of cand , we adjust its latent position so that we could make more accurate predictions (Line 7) and then examine how this adjustment would influence the candidate task set from the following two aspects: (1) if the latent attribute of i does not change much, we remove it from the set of cand (Lines 8-9); (2) if the adjustment of i also affects its neighbor j , we add vertex j to cand (Lines 10-13).

The remaining questions in our Incremental-Update algorithm are how to adjust the latent position of one vertex according to feed-backs, and how to decide the order of update. In the following, we address each of them. Figure 3: Challenges of adjusting the latent attribute with feedback s. Adjusting latent attribute of one vertex. To achieve high effi-ciency of adjusting the latent attribute, we propose to make the smallest changes of the latent space (as fast as possible) to pre-dict the correct value. For example, as shown in Figure 3 (a), sup-pose we already know the new latent position of v 1 , then fewer step movement (Option 1) is preferable than gradual adjustment (Option 2). Note that in our problem, when we move the latent position of a vertex to a new position, the objective of this movement is to produce a correct prediction for each of its outgoing edges. Specif-ically, given U t  X  1 ( i ) , we want to find U t ( i ) which could accurately predict the weight of each edge e ( v i ,v j ) that is adjacent to vertex v . We thus formulate our problem as follows: where  X  is a non-negative slack variable, C&gt; 0 is a parameter which controls the trade-off between being conservative (do not change the model too much) and corrective (satisfy the constraint), and  X  is a precision parameter.

Note that we have non-negativity constraint over the latent space of U t ( i ) . We thus adopt the approaches from [3]: When the pre-(i.e., G t ( i, j ) ), we use the traditional online passive-aggressive al-gorithm [7] because it guarantees the non-negativity of U ( i ) ; Oth-erwise, we update U ( i ) by solving a quadratic optimization prob-lem. The detailed solution is as follows: k  X  and  X   X  are computed as follows: where Updating order of cand . As we already discussed, the update order is important because it influences the convergence speed of our incremental algorithm. Take the example of the road network shown in Figure 1, suppose our initial cand contains three vertices v ,v 6 and v 2 , where we have two edges e ( v 7 ,v 6 ) and e ( v we randomly choose the update sequence as &lt;v 7 ,v 6 ,v is, we first adjust the latent attribute of v 7 so that c ( v correct reading; subsequently we adjust the latent attribute of v correct our estimation of c ( v 6 ,v 2 ) . Unfortunately,the adjustment of v could influence the correction we have already made to v 7 leading to an inaccurate estimation of c ( v 7 ,v 6 ) again. A desirable order is to update vertex v 6 before updating v 7 .

Therefore, we propose to consider the reverse topology of road network when we update the latent position of each candidate ver-tex v  X  cand . The general principle is that: given edge e ( v Figure 4: A batch window framework for real-time forecasting. the update of vertex v i should be proceeded after the update of v because the position of v i is dependent on v j . This motivates us to derive a reverse topological order in the graph of G . Unfortu-nately, the road network G is not a Directed Acyclic Graph (DAG), and contains cycles. To address this issue, we first generate a con-densed super graph where we contract each Strongly Connected Component (SCC) of the graph G as a super node. We then derive a reverse topological order based on this condensed graph. For the vertex order in each SCC, we generate an ordering of vertices inside each SCC by random algorithms or some heuristics. Figure 3(b) shows an example of ordering for the road network of Figure 1, where each rectangle represents a SCC. After generating a reverse topological order based on the contracted graph and randomly or-dering the vertices within each SCC, we obtain one final ordering attributes of cand , we follow this ordering of vertices. Time complexity. For each vertex i , the computational complexity of adjusting its latent attributes using Eq. 11 is O ( k ) ,where k is number of attributes. Therefore, to compute latent attributes u , the time complexity per iteration is O ( kT (  X  n +  X  m )) ,where  X  n is number of candidate vertex in cand ,and  X  m is total number of edges incident to vertices in cand . In practice,  X  n  X  n and  X  m  X  m  X  n 2 . In addition, the SCC can be generated in linear time O(m+n) via Tarjan X  X  algorithm [23]. Therefore, we conclude that the computational cost per iteration is significantly reduced us-ing Algorithm 2 as compared to using the global learning approach.
In this section, we discuss how to apply our learning algorithms to real-time traffic prediction, where the sensor reading is received in a streaming fashion. In practice, if we want to make a predic-tion for the current traffic, we cannot afford to apply our global learning algorithm to all the previous snapshots because it is com-putationally expensive. Moreover, it is not always true that more snapshots would yield a better prediction performance. The alter-native method is to treat each snapshot independently: i.e., each time we only apply our incremental learning algorithm for the most recent snapshot, and then use the learned latent attribute to predict the traffic condition. Obviously, this might yield poor prediction quality as it totally ignores the temporal transitions.

To achieve a good trade-off between the above two methods, we propose to adapt a sliding window setting for the learning of our LSM-RN model, where we apply incremental algorithm at each timestamp during one time window, and only run our global learn-ing algorithm at the end of one time window. As shown in Figure 4, we apply our global learning at timestamps T (i.e., the end of one time window), which learns the time-dependent latent attributes for the previous T timestamps. Subsequently, for each timestamp T + i between [T, 2T], we apply our incremental algorithm to adjust the latent attribute and make further predictions: i.e., we use U predict the traffic of G T +( i +1) . Each time we receive the true ob-servation of G T +( i +1) , we calculate U T +( i +1) via the incremental update from Algorithm 3. The latent attributes U 2 T will be re-computed at timestamp 2 T (the end of one time window), and the U 2 T would be used for the next time window [2 T, 3 T ] .
Figure 5: Sensor distribution and Los Angeles road network.
We used a large-scale high resolution (both spatial and tempo-ral) traffic sensor (loop detector) dataset collected from Los Ange-les county highways and arterial streets. This dataset includes both inventory and real-time data for 15000 traffic sensors covering ap-proximately 3420 miles. The sampling rate of the data, which pro-vides speed, volume (number of cars passing from sensor locations) and occupancy, is 1 reading/sensor/min. We have been collecting and archiving this sensor dataset continuously since 2010.
We chose sensor data between March and April in 2014 for our experiments, which include more than 60 million records of read-ings. As for the road network, we used Los Angeles road net-work which was obtained from HERE Map dataset [11]. We con-structed two subgraphs of Los Angeles road network, termed as SMALL and LARGE. The SMALL (resp. LARGE) network con-tains 5984 (resp. 8242) vertices and 12538 (resp. 19986) edges. As described in Section 3, the sensor data are mapped to the road network, where 1642 (resp. 4048) sensors are mapped to SMALL (resp. LARGE). Figure 5 shows sensors locations and road network segments, where the green lines depict the sensors, and blue lines represent the road network segments. After mapping the sensor data, we have two months of network snapshots for both SMALL and LARGE.
Our methods are termed as LSM-RN-All (i.e., global learning algorithm) and LSM-RN-Inc (i.e., incremental learning algorithm).
For edge traffic prediction, we compare with LSM-RN-Naive, where we adapted the formulations from LSM-SN ( [29] and [21]) by simply combining the topology and temporal correlations. In addition, LSM-RN-Naive uses a Naive incremental learning strat-egy in [21], which independently learns the latent attributes of each timestamp first, then the transition matrix. We also compare our algorithms with two representative time series prediction methods: a linear model (i.e., ARIMA [18]) and a non-linear model (i.e., SVR [20]). We train each model independently for each time se-ries with historical data. In addition, because these methods will be affected negatively due to the missing values during the prediction stages (i.e, some of the input readings for ARIMA and SVR could be zero), for fair comparison we consider ARIMA-Sp and SVR-Sp, which use the completed readings from our global learning algo-rithm. We also implemented the Tensor method [1, 2], however, it cannot address the sparsity problem of our dataset and thus produce meaningless results (most of the prediction values are close to 0).
For missing-value completion, we compare our algorithms with two methods: (1) KNN [10], which uses the average values of the nearby edges in Euclidean distance as the imputed value, (2) LSM-RN-Naive, which independently learns the latent attributes of each snapshot, then uses them to approximate the edge readings.
To evaluate the performance of online prediction, we consider the scenario of a batch-window setting described in Section 5.3. Considering a time window [0 , 2 T ] , we first batch learn the latent attributes of U T and transition matrix A from [0 ,T ] , we then se-quentially predict the traffic condition for the timestamps during [ T +1 , 2 T ] . Each time when we make a prediction, we receive the true observations as the feedback. We compare our Incremental al-gorithm (Inc), with three baseline algorithms: Old, LSM-RN-Naive and LSM-RN-All. Specifically, to predict G T + i , LSM-RN-Inc uti-lizes the feedback of G T +( i  X  1) to adjust the time-dependent latent attributes of U T +( i  X  1) , whereas Old does not consider the feed-back, and always uses latent attributes U T and transition matrix A from the previous time window. On the other hand, LSM-RN-Naive ignores the previous snapshots, and only applies the infer-ence algorithm to the most recent snapshot G T +( i  X  1) (aka Mini-batch). Finally, LSM-RN-All applies the global learning algorithm consistently to all historical snapshots (i.e., G 1 to G T +( i  X  1) then makes a prediction (aka Full-batch).
We selected two different time ranges that represent rush hour (i.e., 7am-8am) and non-rush hour (i.e., 2pm-3pm), respectively. For the task of missing value completion, during each timestamps of one time range (e.g., rush hour), we randomly selected 20% of values as unobserved and manipulated them as missing 1 , with the objective of completing those missing values. For each traffic pre-diction task at one particular timestamp (e.g., 7:30 am), we ran-domly selected 20% of the values as unknown and use them as ground-truth values.

We varied the parameters T and span :where T is the number of snapshots, and span is time gap between two continuous snap-shots. We also varied k ,  X  ,and  X  , which are parameters of our model. The default settings (shown with bold font) of the experi-ment parameter are listed in Table 2. Because of space limitations, the results of varying  X  are not reported, which are similar to result of varying  X  . We use Mean Absolute Percentage Error (MAPE) and Root Mean Square Error (RMSE) to measure the accuracy. In the following we only report the experiment results based on MAPE, the experiment results based on RMSE are reported in the technical report [8]. Specifically, MAPE is defined as follows:
With ARIMA and SVR, we use the dataset of March to train a model for each edge, and use 5-fold cross-validation to choose the best parameters. All the tasks of missing value completion and edge traffic prediction tasks are conducted on April data. We conducted our experiments with C++ on a Linux PC with i5-2400 CPU @ 3.10G HZ and 24GB memory.
The experimental results of SMALL are shown in Figures 6 (a) and (b). Among all the methods, LSM-RN-All and LSM-RN-Inc achieve the best results, and LSM-RN-All performs slightly better
Note that missing values are plenty in our dataset, especially for arterials. However, we needed ground-truth for evaluation purposes and that is why we generated missing values artificially. than LSM-RN-Inc. This demonstrates the effectiveness of time-dependent latent attributes and the transition matrix. We observe that without imputing of missing values, time series prediction tech-niques (i.e., ARIMA and SVR) perform much worse than LSM-RN-All and LSM-RN-Inc. Meanwhile, LSM-RN-Naive, which separately learns the latent attributes of each snapshot, cannot achieve good prediction results as compared to LSM-RN-All and LSM-RN-Inc. This indicates that simply combining topology and time is not enough for accurate predictions. We note that even with com-pleted readings, the accuracy of SVR-Sp and ARIMA-Sp is worse than that of LSM-RN-All and LSM-RN-Inc. One reason is that simply combining the spatial and temporal properties does not nec-essarily yield a better performance. Another reason is that both SVR-Sp and ARIMA-Sp also suffer from missing data during the training stage, which results in less accurate predictions. In the technical report [8], we show how the ratio of missing data would influence the prediction performance. Finally, we observe that SVR is more robust than ARIMA when encountering missing values: i.e., ARIMA-Sp performs significantly better than ARIMA, while the improvement of SVR-Sp over SVR is marginal. This is because ARIMA is a linear model which mainly uses the weighted average of the previous readings for prediction, while SVR is a non-linear model that utilizes a kernel function. Figures 6 (c) and (d) show the experiment results on LARGE, the trend is similar to SMALL.
We now present the experiment results on long-term predictions, with which we predict the traffic conditions for the next 30 min-utes (i.e., h =6 ). The prediction accuracy of different methods on SMALL are shown in Figures 7 (a) and (b). Although LSM-RN-All and LSM-RN-Inc still outperform other methods, the margin between our methods and the baselines is narrower. The reason is that: when we make long-term predictions, we use the predicted values from the past for future prediction. This leads to the prob-lem of error accumulation, i.e., errors incurred in the past are prop-agated into future predictions. We observe the similar trends on LARGE, the results are reported in Figures 7 (c) and (d).
In this set of experiments, we evaluate the completion accuracy of different methods. Due to space limitation, we only report the experiment results on LARGE in Figures 8 (a) and (b), and the effects on SMALL are similar. We observe that both LSM-RN-All and LSM-RN-Inc achieve much lower errors than that of other methods. This is because LSM-RN-All and LSM-RN-Inc capture both spatial and temporal relationships, while LSM-RN-Naive and KNN only use spatial property. LSM-RN-All performs better than LSM-RN-Inc by jointly inferring all the latent attributes. On the other hand, we note that LSM-RN-Naive and KNN have similar performances, which is inferior to our methods. This also indi-cates that utilizing both spatial and temporal properties yields a larger gain than only utilizing the spatial property. As shown in Figure 8(b), the completion performance during the non-rush hour is better as compared to the rush hour time. This is because dur-ing rush hour range, the traffic condition is more dynamic, and the underlying pattern and transition changes frequently. Table 3: Running time comparisons. For ARIMA and SVR, the train-Table 3 shows the running time of different methods. Although ARIMA and SVR are fast in each prediction, they require large volume of training data and have much higher training time, which can be a problem for real systems. On the contrary, our methods do not require extra training data, i.e., our methods efficiently train and predict at the same time. Among them, LSM-RN-Inc is the most efficient approach: it only takes less than 500 milliseconds to learn the time-dependent latent attributes and make predictions for all the edges of the road network. This is because our incremental learn-ing algorithm conditionally adjusts the latent attributes of certain vertices, and utilizes the topological order that enables fast conver-gence. Even for the LARGE dataset, LSM-RN-Inc takes less than five seconds, which is acceptable considering that the span between two snapshots is at least five minutes in practice. This demonstrates that LSM-RN-Inc scales well to large road networks. Regarding LSM-RN-All and LSM-RN-Naive, they both require much longer running time than that of LSM-RN-Inc. In addition, LSM-RN-All is faster than LSM-RN-Naive. This is because LSM-RN-Naive in-dependently runs the global learning algorithm for each snapshot T times, while LSM-RN-All only applies global learning for all the snapshots once. Convergence analysis. Figures 9 (a) and (b) report the conver-gence rate of iterative algorithm LSM-RN-All on both SMALL and LARGE. As shown in Figure 9, LSM-RN-All converges very fast: when the number of iterations is around 20, our algorithm tends to converge in terms of our objective value in Eq. 4.
In this set of experiments, we evaluate our online setting algo-rithms. Due to space limitation, we only report the experiment results on LARGE. As shown in Figures 10 (a) and (b), LSM-RN-Inc achieves comparable accuracy with LSM-RN-All (Full-batch). This is because LSM-RN-Inc effectively leverages the real-time feedback to adjust the latent attributes. We observe that LSM-RN-Inc performs much better than Old and LSM-RN-Naive (Mini-batch), which ignore either the feedback information (i.e., Old) or the previous snapshots (i.e., LSM-RN-Naive). One observation is that Old performs better than LSM-RN-Naive for the initial times-tamps, whereas Old surpasses Mini-batch at the later timestamps. This indicates that the latent attributes learned in the previous time-window are more reliable for predicting the near-future traffic con-ditions, but may not be good for long-term predictions because of the error accumulation problem.

Figures 11 (a) and (b) show the running time comparisons of different methods. One important observation from this experi-ment is that LSM-RN-Inc is the most efficient approach, which is on average two times faster than LSM-RN-Naive and one order of magnitude faster than LSM-RN-All. This is because LSM-RN-Inc performs a conditional latent attribute update for vertices within a small portion of road network, whereas LSM-RN-Naive and LSM-RN-All both recompute the latent attributes from at least one entire road network snapshot. Since in the real-time setting, LSM-RN-All utilizes all the up-to-date snapshots and LSM-RN-Naive only considers the most recent single snapshot, LSM-RN-Naive is faster than LSM-RN-All. We observe that LSM-RN-Inc only takes less than 1 second to incorporate the real-time feedback information, while LSM-RN-Naive and LSM-RN-All take much longer.

Therefore, we conclude that LSM-RN-Inc achieves a good trade-off between prediction accuracy and efficiency, which is applicable for real-time traffic prediction applications.

In this section, we evaluate the performance of our methods by varying the parameters of our model. Due to space limitation, we only show the experimental results on SMALL.
Figure 12 (a) and Figure 12 (b) show the prediction performance and the running time of varying T , respectively. We observe that with more snapshots, the prediction error decreases. In particular, when we increase T from 2 to 6 , the results improve significantly. However, the performance tends to stay stable at T  X  6 . This in-dicates that fewer snapshots (i.e., two or less) are not enough to capture the traffic patterns and the evolving changes. On the other hand, more snapshots (i.e., more historical data) do not necessarily yield better gain, considering the running time increases when we have more snapshots. Therefore, to achieve a good trade-off be-tween running time and prediction accuracy, we suggest to use at least 6 snapshots, but no more than 12 snapshots.
The results of varying span are shown in Figure 13. Clearly, as the time gap between two snapshots increases, the performance declines. This is because when span increases, the evolving pro-cess of underlying traffic may not evolve smoothly, the transition process learned in the previous snapshot is not applicable for the future. Fortunately our sensor dataset usually have high-resolution, so it is better to use smaller span to learn the latent attributes. In addition, span does not affect the running time of either algorithms.
Figure 14 (a) shows the effect of varying k . We observe that: (1) we achieve better results with increasing number of latent at-tributes; (2) the performance is stable when k  X  20 . This indicates that a low-rank latent space representation can already capture the attributes of the traffic data. In addition, our results show that when the number of latent attributes is small (i.e., k  X  30 ), the running time increases with k but does not change much when we vary k from 5 to 30. Therefore, setting k to 20 achieves a good balance between computational cost and accuracy.

Figure 14 (b) depicts the effect of varying  X  , which is the regular-ization parameter for our graph Laplacian dynamics. We observe that the graph Laplacian has a larger impact on LSM-RN-All al-gorithm than on LSM-RN-Inc. This is because  X  controls how the global structure similarity contributes to latent attributes and LSM-RN-All jointly learns those time-dependent latent attribute, thus  X  has larger effect on LSM-RN-All. In contrast, LSM-RN-Inc adap-tively updates the latent positions of a small number of changed vertices in limited localized view, and thus is less sensitive to the global structure similarity than LSM-RN-All. In terms of parame-ters choices,  X  =2 and  X  =8 yields best results for LSM-RN-All and LSM-RN-Inc, respectively. Figure 14: Effect of varying k and  X  ,where k is number of latent
In this paper, we studied the problem of real-time traffic pre-diction using real-world sensor data for road networks. We pro-posed LSM-RN, where each vertex is associated with a set of la-tent attributes that captures both topological and temporal proper-ties of road networks. We showed that the latent space modeling of road networks with time-dependent weights accurately estimates the traffic patterns and their evolution over time. To efficiently infer these time-dependent latent attributes, we developed an in-cremental online learning algorithm which enables real-time traffic prediction for large road networks. With extensive experiments we verified the effectiveness, flexibility and scalability of our model in identifying traffic patterns and predicting future traffic conditions.
