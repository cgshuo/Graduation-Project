 We propose incorporating query views in a number of static pruning strategies, namely term -centric, document-centric and access-based approaches. These query-view based strategies considerably outperform their counterparts for both disjunctive and conjunctive query processing in Web search engines. H.3.1 [ Information Storage and Retrieval ]: Content Analysis and Indexing  X  indexing methods H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval  X  search process. Algorithms, Experimentation, Performance. 
Static index pruning techni ques permanently remove a presumably redundant part of an i nverted file, to reduce the file size and query processing time. The sole purpose of a static pruning strategy is staying loyal to the original ranking of the underlying search system especia lly for the top-ranked results, while reducing the index size, to the greatest extent possible. 
In this paper, we propose a new pruning approach that exploits query views. In the literature, the idea of using query terms to represent a document is known as query view (e.g., [8]). In the scope of our work, for a given document, all queries that rank this particular document among their top-ranked results constitute the query view of that document. Ou r contributions are as follows:  X  First, we fully explore the potential of a previous strategy,  X  Second, we provide an effectiveness comparison of these  X  Finally, the main contribution of this paper is exploiting Term-Centric Pruning (TCP) strategy. TCP, the adaptive version of the top-k algorithm proposed in [4], is reported to be very successful in static pruning. In this strategy, for each term t scoring function (e.g, TF-IDF). Next, the k th highest score, z determined and all postings that have scores less than z removed, where  X  is a user defined parameter to govern the pruning level. Following the practice in [2], we simply determine  X  values according to the desired pruning level. We also employ BM25 as the scoring function for TCP and entirely discard the terms with document frequency f t &gt; N /2 (where N is the total number of documents) as in [2]. In Algorithm 1, we demonstrate TCP strategy as adapted in our framework. Document-Centric Pruning (DCP) strategy. In this paper, we apply the DCP strategy for the entire index, which is slightly different than pruning only the most frequent terms as originally Algorithm 1 Term-Centric Pruning Input: I, k,  X  , N 1: for each term t in I 2: fetch the postings list I t from I 3: if |I t | &gt; N / 2 4: remove I t entirely from I 5: if |I t | &gt; k 6: for each posting entry &lt;d&gt;, 7: compute Score( t , d ) with BM25 8: let z t be the k th highest score among the scores 9:  X  t  X  z t *  X  10: for each posting entry &lt;d&gt; 11: if Score( t , d )  X   X  t 12: remove entry &lt;d&gt; from I t proposed by [3]. Additionally, instead of scoring each term of a document with Kullback-Leibler di vergence (KLD), we prefer to use BM25, as it is reported to perfo rm better in [1]. Finally, in [3] it is again shown that the uniform strategy; i.e., pruning a fixed number of terms from each document, is inferior to the adaptive strategy, where a fraction (  X  ) of the total number of unique terms in a document is pruned. Algorithm 2 conveys the DCP strategy. Algorithm 2 Document-Centric Pruning Input: D ,  X  1: for each document d  X  D 2: sort t  X  d in descending order w.r.t. Score( d , t ) 3: remove the last | d |*  X  terms from d Access-based Term-Centric Pruning (aTCP) strategy. For the first time in the literature, Garcia et al. used the search engine query logs to guide the static i ndex pruning process [6]. However, their work does not use the actual content of the queries, but just makes use of the access count of a document; i.e., the number of times a document appears in top-k results of queries, where k is typically set to 1000. In particular, their algorithm applies the, so-called, MAXPOST heuristic, whic h simply keeps a fixed number of postings with the highest number of access count in each term X  X  posting list. In that wo rk, the result of the MAXPOST approach is found to be rather discouraging. 
For this study, we decide to im plement an adaptive version of the MAXPOST approach. Since it iterates over each term and removes some postings, we classify this approach as term-centric, and call the adaptive version access-based TCP (aTCP). In this case, instead of keeping a fixed number of postings in each list, we keep a fraction (  X  ) of the number of postings in each list. Algorithm 3 shows aTCP strategy. Algorithm 3 Access-based Term-Centric Pruning Input: I,  X  , AccessScore[] 1: for each term t in I 2: fetch the postings list I t from I 3: sort d  X  I t in descending order w.r.t. AccessScore[ d ] 4: remove the last | I t |*  X  postings from I t Access-based Document-Centric Pruning (aDCP) strategy. In this paper, we propose a new acce ss-based strategy. Instead of pruning the postings from each list, we propose to prune documents entirely from the collection, starting from the documents with the smallest access counts. The algorithm is adaptive in that, for an input pruning fraction (  X  ), the pruning iterates while the total length of pruned documents is less than of unique terms in each document. Algorithm 4 presents this strategy, which we call access-based DCP (aDCP). Algorithm 4 Access-based Document-Centric Pruning Input: D ,  X  , AccessScore[] 1: sort d  X  D in descending order w.r.t. AccessScore[ d ] 2: NumPrunedPostings  X  0 3: while NumPrunedPostings &lt; | D |*  X  4: remove the document d with the smallest access score 5: NumPrunedPostings  X  NumPrunedPostings + | d | Let X  X  assume a document collection D = { d 1 ,...,d log Q = { Q 1 , ...,Q M }, where Q i = { t 1 ,...,t q is executed over D , the top-k documents (at most) are retrieved for each query Q i , which is denoted as R Qi,k query view of a document d as: QV d =  X  Q i , where d  X  R
That is, each document is associated with a set of terms that appear in the queries that have retrieved this document within the top-k results. Without loss of generality, we assume that during the construction of the query views, queries in the log are executed in the conjunctive mode; i.e., all terms that appear in the query view of a document also appear in the document. The set of query views for all documents, QV efficiently computed either off line or online. In an offline computation mode, the search engine can execute a relatively small number of queries on the co llection and retrieve, say, top-1000 results per query. Note that, as discussed in [6], it may not be necessary to use all of the previous log files; the most recent log or sampling from the earlier logs can be sufficient. 
We envision that for a given docum ent, the terms that appear as query terms to rank this document within top results of these queries should be privileged, a nd should not be pruned to the greatest extent possible. In what follows, we introduce four pruning strategies that exploit th e query views, based on the TCP, DCP, aTCP and aDCP strategies, respectively. Term-Centric Pruning with Query Views (TCP-QV). This strategy is based on Algorithm 1, but employs query views during pruning. In particular, once the pruning threshold (  X  determined for a term t  X  X  posting list, the posti ngs that have scores below the threshold are not directly pruned. That is, given a posting d in the list of term t , if t  X  QV d , this posting is preserved in the index, regardless of its sc ore. Note that, by only modifying line 11 as presented in Algorithm 5, the query view heuristic is taken into account to guide the pruning. Algorithm 5 Term-Centric Pruning with Query Views Input: I, k,  X  , N, QV D 1-9: //First 9 lines are the same as Algorithm 1 and not repeated 10: for each posting entry &lt; d &gt;, 11: if Score( t , d )  X   X  12: remove entry &lt; d &gt; from I Document-Centric Pruning with Query Views (DCP-QV). In this case, for the purpose of discussion, let X  X  assume that each term t in a document d is associated with a priority score Pr which is set to 1 if t  X  QV d and 0 otherwise. The terms of a document d are now sorted (in descending order) according to these two keys, first the priority score and then score function output. During the pruning, last | d |*  X  terms are removed, as before. This strategy is de monstrated in Algorithm 6. Algorithm 6 Document-Centric Pruning with Query Views Input: D ,  X  , QV D 1: for each document d in D 2: for each term t  X  d 3: if t  X  QV d then Pr t  X  1 else Pr t  X  0 4: sort t  X  d in descending order wrt. first Pr t 5: remove the last | d |*  X  terms from d Access-based Term-Centric Pruning (aTCP) with Query Views (aTCP-QV). In aTCP-QV strategy, we assume that each posting d in the list of a term t is associated with a priority score Pr d , which is set to 1 if t  X  QV d and 0 otherwise. Then, the postings in the list are sorted in the descending order of the two keys, first the priority score and then the access count. During the pruning, last | I t |*  X  postings are removed (Algorithm 7). Algorithm 7 Access-based Term-Centric Pruning with QV Input: I,  X  , AccessScore[], QV D 1: for each term t in I 2: fetch the postings list I t from I 3: for each posting entry &lt;d&gt;, 3: if t  X  QV d then Pr d  X  1 else Pr d  X  0 7: sort d  X  I t in desc. order w.r.t. first Pr d 8: remove the last | I t |*  X  postings from I t Access-based Document-Centric Pruning (aDCP) with Query Views (aDCP-QV). In this case, we again prune the documents starting from those with the smallest access counts until the pruning threshold (| D |*  X  ) is reached. But, while pruning documents, those terms that appear in the query view of these documents are kept in the index. This is shown in Algorithm 8. Algorithm 8 Access-based Document-Centric Pruning with QV Input: D ,  X  , AccessScore[], QV D 1: sort d  X  D in descending order w.r.t. AccessScore[ d ] 2: NumPrunedPostings  X  0 3: while NumPrunedPostings &lt; | D |*  X  4: fetch d with the smallest score 5: for each term t  X  d 6: if t  X  QV d 7: remove t from d 8: NumPrunedPostings  X  NumPrunedPostings + 1 Document collection and indexing. For this study, we crawled around 2.2 million pages from Open Directory Project (ODP) Web directory (www.dmoz.org). We first indexed the dataset (www.seg.rmit.edu.au/zettair / ). Once the initial index is generated, we used our homemade IR system to create the pruned index files and execute the training and test queries over them. Training and test query sets. We use a subset of the AOL Query Log (http://imdc.datcat.org/collection/1-003M-5) that contains 20 million queries for a period of 12 weeks. The query terms are normalized by case-folding, sorting in the alphabetical order and removing the punctuation and stop-wo rds. We consider only those queries of which all terms appear in the lexicon of the collection. 
From the normalized query log subset, we construct training and test sets. The training query se t that is used to compute the access counts and query views for the documents are from the first half (i.e., 6 weeks) of the l og. The test set that is used to evaluate the performance for different pruning strategies are constructed from the second half (last 6 weeks) of the log. During the query processing with both trai ning and test sets, a version of BM25 scoring function as described in [3], is used. 
In the training stage, queries are executed in the conjunctive mode and top-1000 results per query are retrieved. Training set includes 1.8 million queries. We use a test set of 1000 randomly selected queries from the second half of the AOL log (i.e., it is temporally disjoint from the training set). These queries are also normalized. We keep only those queries that can retrieve at least one document from our collection when processed in the conjunctive mode. Furthermore, we guarantee that train and test sets are query-wise disjoint by removing all queries from the test set that also appear in the training set after the normalization. Evaluation measure. In this paper, we compare the lists of top-10 results that are obtained using the original and pruned index files. To this end, we employ the symmetric difference measure [4]. The score of 1 means exact overlap, whereas the score of 0 implies that two lists are disjoint. Performance of the query views: disjunctive mode. In Table 1, we provide average symmetric difference results of all eight pruning strategies for the top-10 results and disjunctive query processing mode. In terms of the four baseline algorithms, the findings in this case confirm the earlier observations in [1, 4, 6]. Our adaptation of the access-based approach, aTCP, is the worst among all and only after 30% pruni ng, the symmetric difference score drops down to 0.54. On the other hand, the document-centric version of the access-based pruning strategy, aDCP, achieves much better performance; it is clearly superior to its term-centric counterpart and provi des comparable results to DCP, at the early stages of the pruning (up to 50%). Among these four strategies, TCP is the clear winner whereas DCP is the runner-up and the access-based strategies are inferior to those, especially at the higher levels of pruning. This implies that solely using access counts is not adequate to gui de the static index pruning. 
Next, we evaluate the performance of the strategies with query views, namely TCP-QV, DCP-QV, aDCP-QV and aTCP-QV. A brief glance over Table 1 reveals that these approaches are far superior to their counterparts that are not augmented with query views. Remarkably, the order of algorithms is similar in that TCP-QV is still the best performer (though sometimes replaced by DCP-QV) and aTCP-QV is the worst. However, the gaps are now considerably closer. Indeed, the percentage improvement columns reveal that, query views enorm ously enhance the performance of the poor strategies (e.g., aTCP) at all pruning levels (ranging from 11% to 343%). Even for those strate gies that were relatively more successful before, query view s provide significant gains, especially at the higher levels of the pruning. For instance, at 50% pruning, the symmetric differen ce score jumps from 0.64 to 0.82 for TCP (a relative increase of 28%), and from 0.58 to 0.84 for DCP (45%). The relative improvements for all strategies exceed 10% after 20% pruning level. In short, query views significantly improve the baseline strategies, and carry them around 75-85% effectiveness at 50% pruning level, which is a solid success. Performance of the query views: conjunctive mode. In Table 2, we provide symmetric difference results for the conjunctive case. Interestingly, conjunctive pro cessing is mostly overlooked and has been taken into account in only few works [5, 7, 9], whereas it is the default and probably the mo st crucial processing mode for WSEs. Thus, we first analyse the results for the baseline strategies, which has not been disc ussed in the literature to this extent, before moving to query view based strategies. 
Our experiments reveal that for the conjunctive processing mode, TCP is the worst strategy. Th is is a rather expectable result (see, for instance, [5, 9]). What is more surprising for this case is the performance of the access-based strategies: aDCP and aTCP outperform TCP and DCP with a wide margin at all pruning levels. This is a new result that has not been reported before in the literature. We think that one reason of this great boost in performance may be the conjunctive processing of the training queries while computing the access counts. In the previous work, both training and testing have been conducted in disjunctive mode. Another remarkable issue is, our document-centric version of the access based strategy, aDCP, significantly outperforms its term-centric adaptation. Indeed, aDCP achieves a similarity of 79% to the original results ev en when the index is halved. 
Turning our attention to the que ry view based strategies, we again report important improveme nts. This time, the worst performing strategies, TCP and DC P, have most benefited from the query views, even more than doubling or tripling their similarity scores at certain pruning levels. The gains on access-based strategies are less emphasized, though reaching to 40% and 9% at 50% pruning for aTCP-QV and aDCP-QV, respectively. Note that, aDCP reaches to very high similarity scores of 0.98 and 0.96 at 10% and 20% pruning levels, respectively; and these are the only cases in Table 2 where the query view couldn X  X  achieve any further improvements. For a ll other cases, query view based strategies again surpass their c ounterparts with a large margin, and reach to around 80% similarity at a pruning level of 60%. This work is supported by The Scientific and Technological Research Council of Turkey (T X B  X  TAK) under the grant no 108E008. We thank Cigdem G X nd X z-D emir and Ben Carterette. [1] Altingovde, I. S., Ozcan, R., a nd Ulusoy,  X . A practitioner X  X  [2] Blanco, R. and Barreiro, A. Boosting static pruning of [3] B X ttcher, S. and Clarke, C. L. A document-centric approach [4] Carmel, D., Cohen, D., Fagin, R., Farchi, E., Herscovici, M., [5] de Moura, E. S., Santos, C. F., Araujo, B. D., Silva, A. S., [6] Garcia, S. Search Engine Optim ization Using Past Queries. [7] Ntoulas, A. and Cho, J. Pr uning policies for two-tiered [8] Poblete, B. and Baeza-Yates, R. Query-sets: using implicit [9] Skobeltsyn, G., Junqueira, F ., Plachouras, V., and Baeza-
