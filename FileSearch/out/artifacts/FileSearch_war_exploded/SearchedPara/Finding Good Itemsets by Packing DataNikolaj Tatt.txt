
The problem of selecting small groups of itemsets that represent the data well has recently gained a lot of atten-tion. We approach the problem by searching for the itemsets that compress the data efficiently. As a compression tech-nique we use decision trees combined with a refined ver-sion of MDL. More formally, assuming that the items are ordered, we create a decision tree for each item that may only depend on the previous items. Our approach allows us to find complex interactions between the attributes, not just co-occurrences of 1s. Further, we present a link be-tween the itemsets and the decision trees and use this link to export the itemsets from the decision trees. In this paper we present two algorithms. The first one is a simple greedy approach that builds a family of itemsets directly from data . The second one, given a collection of candidate itemsets, se -lects a small subset of these itemsets. Our experiments show that these approaches result in compact and high quality de-scriptions of the data.
One of the major topics in data mining research is the discovery of interesting patterns in data. From the introdu c-tion of frequent itemset mining and association rules [2], the pattern explosion was acknowledged: at high frequency thresholds only common knowledge is revealed, while at low thresholds prohibitively many patterns are returned.
Part of this problem can be solved by reducing these col-lections either lossless or lossy, however even then the re-sulting collections are often so large that they cannot be an -alyzed by hand or even machine. Recently, it was therefore argued [14] that while the efficiency of the search process has received ample attention, there still exists a strong ne ed for pattern mining approaches that deliver compact, yet hig h quality, collections of patterns (see Section 6 for a more detailed discussion). Our goal is to identify the family of itemsets that form the best description of the data. Recent proposals to this end all consider just part of the data, by ei -ther only considering co-occurrences [30] or being lossy in nature [5, 7, 20]. In this paper, we present two methods that do describe all interactions in the data. Although differen t in approach, both methods return small families of itemsets , which are selected to provide high-quality lossless descri p-tions of the data in terms of local patterns. Importantly, ou r parameterless methods regard the data symmetrically. That is, we consider not just the 1s in the data, but also the 0s. Therefore, we are able to find patterns that describe all inter-actions between items in the data, not just co-occurrences.
As a measure of quality for the collection of itemsets we employ the practical variant of Kolmogorov Complex-ity [23], the Minimum Description Length (MDL) princi-ple [13]. This principle implies that we should do induction through compression. It states that the best model is the model that provides the best compression of the data: it is the model that captures best the regularities of the data, wi th as little redundancy as possible.

The main idea of our approach is to use decision trees to determine the shortest possible encoding of an attribute , by using the values of already transmitted attributes. For example, let us assume two binary attributes A and B . Now say that for 90% of the time when the attribute A has a value of 1 , the attribute B has a value of 0 . If this situation occurs frequently, we recognize this dependency, and include the item A in the tree deciding how to encode B .

Using such trees allows us to find complex interactions between the items while at the same time MDL provides us with a parameter-free framework for removing fake in-teractions that are due to the noise in the data. The main outcome of our methods is not the decision trees, but the group of itemsets that form their paths: these are the impor-tant patterns in the data since they capture the dependencie s between the attributes implied by the decision trees.
The two algorithms we introduce to this end are orthogo-nal in approach. Our first method builds the encoding deci-sion trees directly from the data; it greedily introduces sp lits until no split can help to compress the data further. Just as naturally as we can extract itemsets from these trees, we can consider the trees that can be built from a collection of item -sets. That link is exploited by our second method, which tries to select the best itemsets from a larger collection.
Experimental evaluation shows that both methods return small collections of itemsets that provide high quality dat a descriptions. These sets allow for very short encoding of the data, which inherently shows that the most important patterns in the data are captured. As the number of item-sets are small, we can easily expose the resulting itemsets to further analysis, either by hand or by machine.
The rest of this paper is as follows. After the covering preliminaries in Section 2, we discuss how to use decision trees to optimally encode the data succinct in Section 3. Next, in Section 4, we explain the connection between de-cision trees and itemsets. Section 5 introduces our method with which good itemsets can be selected by weighing these through our decision tree encoding. Related work is dis-cussed in Section 6, after which we present the experiments on our methods in Section 7. We round up with discussion and conclusions in Sections 8 and 9.
In this section we introduce preliminaries and notations used in subsequent sections.

A binary dataset D is a collection of | D | transactions , binary vectors of length K . The i th element of a random transaction is represented by an attribute a i , a Bernoulli ran-dom variable. We denote the collection of all the attributes by A = { a 1 , . . . , a K } . An itemset X = { x 1 , . . . , x is a subset of attributes. We will often use the dense notatio n X = x 1 x L .

Given an itemset X and a binary vector v of length L , we use the notation p ( X = v ) to express the probability of p ( x 1 = v 1 , . . . , x L = v L ) . If v contains only 1s, then we will use the notation p ( X = 1) , if v contains only 0s, then we will use the notation p ( X = 0) .

Given a binary dataset D we define q D to be an empirical distribution , We define the frequency of an itemset X to be f r ( X ) = q ( X = 1) .
 In the paper we use the common convention 0 log 0 = 0 . All logarithms in the paper are of base 2 .

In the subsequent sections we will need some knowledge of graphs. All the graphs in the paper are directed. Given a graph G we denote by V ( G ) the set of vertices and by E ( G ) the edges of G . A directed graph is said to be acyclic (DAG) if there is no cycle in the graph. A directed graph is said to be directed spanning tree if each node (except one special node) has exactly one outgoing edge. The special node has no outgoing edge and is called sink .
In this section we present our model for packing the data and a greedy algorithm for searching good models.
Our goal in this section is to define a model that is used to transmit a binary dataset D from a transmitter to a receiver. We do this by transmitting one transaction at the time, the order of which does not matter. Within a single transaction we transmit the items one at the time.

Assume that we are transmitting an attribute a t . As the attribute may have two values, we need to have two codes to indicate its value. We define the table in which these two codes are stored to be a coding table . Obviously, the codes need to be optimal, that is, as short as possible. From infor-mation theory [10], we have the optimal Shannon codes of length  X  log( p ( x )) . Here, the optimal code lengths are thus  X  log q D ( a t = 1) and  X  log q D ( a t = 0) . We need to trans-mit the attribute | D | times. The cost of these transmissions is This is the simplest case of encoding a t . Note that we are not interested in the actual codes, but only in their lengths : they allow us to determine the complexity of a model.
A more complex and more interesting approach to en-code a t succinct is to have several coding tables from which the transmitter chooses one for transmission. Choosing the coding table is done via a decision tree that branches on the values of other attributes in the same transaction. That is, we have a decision tree used for encoding a t in which each leaf node is associated with a different coding table of a The leaf is selected by testing the values of other attribute s within the same transaction.
 Example 1. Assume that we have three attributes, a , b , and c and consider the trees given in Figure 1. In Figure 1(a) we have the simplest tree, a simple coding table with no depen-dencies at all. A more complex tree is given in Figure 1(b) where the transmitter chooses from two coding table for a based on the value of c . Similarly in, Figure 1(d) we have three different coding tables for c . The choice of the coding table in this case is based on the values of a and b .
Let us introduce some notation. Let T be a tree encoding a . We use the notation t ( T ) = a t . We set src ( T ) to be the set of all items used in T for choosing the coding table. Example 2. For the tree T 3 in Figure 1(c) we have t ( T 3 b and src ( T 3 ) = { a } and for T 4 in Figure 1(d) we have t ( T 4 ) and src ( T 4 ) = { a, b } .

To define the cost of transmitting a t we first define lvs ( T ) to be the set of all leaves in T . Let L  X  lvs ( T ) be a leaf and q D ( L ) be the probability of L being chosen. Further, q D ( a t = v | L ) is the probability of a t = v given that L is chosen. We now know that the optimal cost, de-noted by c D ( T ) , is  X  X  D | X Example 3. The number of bits needed by T 1 in Figure 1(a) to transmit a in a random transaction is Similarly, if we assume that q D ( a = 1) = q D ( a = 0) = 0 . 5 , the number of bits needed by T 3 to transmit c in a ran-dom transaction is
In order for the receiver to decode the attribute a must know what coding table was used. Thus, he must be able to use the same decision tree that the transmitter used for encoding a t . To ensure this, the transmitter must know src ( T ) when decoding a t . So, the attributes must have an order in which they are sent and the decision trees may only use the attributes that have already been transmitted.
The aforementioned requirement is easily characterized by the following construction. Let G be a directed graph with K nodes, each node corresponding to an attribute. The graph G contains all the edges of form ( a t , a s ) where a src ( T ) , where T is the tree encoding a t . We call G the dependency graph . It is easy to see that there exists an order of the attributes if and only if G is an acyclic graph (DAG). If G constructed from a set of trees T = { T 1 , . . . , T indeed DAG we call the set T a decision tree model . Example 4. Consider a graph given in Figure 2(a) con-structed from the trees T 2 , T 3 , and T 4 (Figure 1). We cannot use this combination of trees for encoding since there is a cycle in the graph. On the other hand if we use trees T 1 T , and T 4 , then the resulting graph (given in Figure 2(b)) is acyclic and thus these trees can be used for the transmis-sion.
Figure 2. Dependency graphs constructed from the trees given in Figure 1.
In order for the receiver to be able to decode the at-tributes, he must know both the coding tables and the trees. Hence, we need to transmit both of these. First, we cover how the coding tables, the leafs of the decision trees, are transmitted.

To transmit the coding tables we use the concept of Re-fined MDL [13]. Refined MDL is an improved version of the more traditional two-part MDL (sometimes referred to as the crude MDL). The basic idea of the refined variant is that instead of transmitting the coding tables, the transmi t-ter and the receiver use so called universal codes. Universa l codes are the cornerstone of Refined MDL. As these are codes can be derived without any further shared informa-tion, this allows for a good weighing of the actual complex-ity of the data and model, with virtually no overhead. While the practicality of applying such codes depends on the type of the model, our decision trees are particularly well-suit ed.
These universal codes provide a cost called the complex-ity of the model. This cost can be calculated as follows: let L be a leaf in the decision tree (i.e. coding table), and M be the number of transactions for which L is used. Then the complexity of this leaf, denoted by c MDL ( L ) , is c MDL ( L ) = log In general, there is no known closed formula for the com-plexity of the model. Hence estimates are usually em-ployed [29]. However, for our tree models we can apply an existing linear-time algorithm that solves the complexi ty for multinomial models [21]. We should also point out that the Refined MDL is asymptotically equivalent to Bayes In-formation Criteria (BIC) if the number of transactions goes to infinity and the number of free parameters stays fixed. However, for moderate numbers of transactions there may be significant differences [13].

Now that the coding tables can be transmitted, we need to know how to transmit the actual tree T . To encode the tree we simply transmit the nodes of the tree in a sequence. We use one bit to indicate whether the node is a leaf, or an intermediate node N  X  intr ( T ) . For an intermediate node we additionally use log K bits, where K is the number of attributes in D , to indicate the item that is used for the split.
The combined cost of a tree T , denoted by c ( T ) , is that is, the cost c ( T ) is the number of bits needed to transmit the tree and the attribute a t in each transaction of D . Example 5. Assume that we have a dataset with 100 trans-actions and 3 items. Assume also that q D ( a = 0) = q ( a = 1) = 0 . 5 . We know that the complexity of the leaves in this case is c MDL ( L ) = 3 . 25 . The cost of the tree T ure 1(c) is c ( T 3 ) =1 + log 3
Given a decision tree model T = { T 1 , . . . , T K } we de-fine the cost c ( T ) = P i c ( T i ) . The cost c ( T ) is the number of bits needed to transmit the trees, one for each attribute, and the complete dataset D .

We should point out that for data with many items, the term log K grows and hence the threshold increases for se-lecting an attribute into any decision tree. This is an inter -esting behavior, as due to the finite number of transactions, for datasets with many items there is an increased proba-bility that two items will correlate, even though they are independent according to the generative distribution.
Our goal is to find the decision tree model with the lowest complexity cost. However, since many problems related to the decision trees are NP -complete [26] we will resort to a greedy heuristic to approximate the decision tree model T with the lowest c ( T ) . It is based on the ID3 algorithm. To fully introduce the algorithm we need some notation: By T RIVIAL T REE ( a t ) we mean the simplest tree packing a without any other attributes (see Figure 1(a)). Given a tree T , a leaf L  X  lvs ( T ) , and an item c not occurring in the path from L to the root of T , we define S PLIT T REE ( T, L, c ) to be a new tree where L is replaced by a non-leaf node testing the value of c and having two leaves as the branches.
The algorithm G REEDY P ACK starts with a tree model consisting only of trivial trees. The algorithm finds the tre e which saves the most bits by splitting. To ensure that the decision tree model is valid, G REEDY P ACK builds a de-pendency graph G describing the dependencies of the trees and makes sure that G is acyclic. The algorithm terminates when no further split can be made that saves any bits. Algorithm 1 G REEDY P ACK algorithm constructs a deci-sion tree model T = { T 1 , . . . , T K } from a binary data D . 1: V  X  X  v 1 , . . . , v K } , E  X  X  X  . 2: G  X  ( V, E ) . 3: T i  X  T RIVIAL T REE ( a i ) , for i = 1 , . . . , K . 4: while there are changes do 5: for i = 1 , . . . , K do 7: for L  X  lvs ( T i ) , j = 1 , . . . , K do 8: if E  X  ( v i , v j ) is acyclic and a j /  X  path ( L ) then 9: U  X  S PLIT T REE ( T i , L, a j ) . 10: if c ( U ) &lt; c ( O i ) then 11: O i  X  U , s i  X  j . 12: end if 13: end if 14: end for 15: end for 16: k  X  arg min i { c ( O i )  X  c ( T i ) } . 17: if c ( O k ) &lt; c ( T k ) then 19: E  X  E  X  ( v k , v s k ) . 20: end if 21: end while 22: return { T 1 , . . . , T K } .
So far we have discussed how to transmit binary data by using decision trees. In this section we present how to selec t the itemsets representing the dependencies implied by the decision trees. We will use this link in Section 5. A similar link between itemsets and decision trees is explored in [27] although our setup and goals are different.

Given a leaf L , the dependency of the item a t is captured in the coding table of L . Hence we are interested in finding itemsets that carry the same information. That is, itemsets from which we can compute the coding table. To derive the codes for the leaf L it is sufficient to compute the probability
Our goal is to express the probabilities on the right side of the equation using itemsets. In order to do that let P be the path from L to its root. Let pos ( L ) be the items along the path P which are tested positive. Similarly, let neg ( L ) be the attributes which are tested negative. Using the inclusion-exclusion principle we see that We compute q D ( a t = 1 , L ) in a similar fashion. Let us de-fine sets ( L ) for a given leaf L to be Combining Eqs. 1 X 2 we see that the collection sets ( L ) sat-isfies our goal.
 Proposition 6. The coding table associated with the leaf L can be computed from the frequencies of sets ( L ) . Example 7. Let L 1 , L 2 , and L 3 be the leaves (from left to right) of T 4 in Figure 1(d). Then the corresponding families of itemsets are sets ( L 1 ) = { a, ac } , sets ( L
We can easily see that the family sets ( L ) is essentially the smallest family of itemsets from which the coding table can be derived uniquely.
 Proposition 8. Let G 6 = sets ( L ) be a family of itemsets. Then there are two data sets, say D 1 and D 2 , for which q f r ( G ; D 2 ) .
 Given a tree T we define sets ( T ) to be sets ( T ) = S
L  X  lvs ( T ) sets ( L ) . We also define sets ( T ) = S i where T = { T 1 , . . . , T K } is a decision tree model.
The connection between itemsets and decision trees made in the previous section allows us to consider an or-thogonal approach to identify good itemsets. Informally, our goal is to construct decision trees from a family of item-sets F , selecting the subset from F that provides the best compression of the data. More formally, our new approach is as follows: given a downward closed family of itemsets F , we build a decision tree model T = { T 1 , . . . , T K viding a good compression of the data, with sets ( T )  X  X  .
Before we can describe our main algorithm, we need to introduce some further notation. Firstly, given two trees T p and T n not using attribute c , we define J
OIN T REE ( c, T p , T n ) to be the join tree with c as the root node, T p as the positive branch of c , and T n as the negative branch of c . Secondly, to define our search algorithm we need to find the best tree that is, bt ( a t ; S, F ) , returns the best tree for a the related sets are in F and only splits on attributes in S .
To compute the optimal tree bt ( a t ; S, F ) , we use the ex-haustive method (presented originally in [27]) given in Al-gorithm 2. The algorithm is straightforward: it tests each valid item as the root and recurses itself on both branches. Algorithm 2 G ENERATE algorithm for calculating bt ( a t ; S, F ) , that is, the best tree T for a t using only S as source and having sets ( T )  X  X  . 1: B  X  S  X  ( S F ) . 3: for b  X  B do 4: G  X  X  X  X  b | b  X  X  X  X } . 5: ( D p , D n )  X  S PLIT ( D, b ) . 8: C  X  X  X  J OIN T REE ( b, T p , T n ) . 9: end for 10: return arg min T { c ( T ) | T  X  X } .

We can now describe the actual algorithm for construct-ing decision tree models with a low cost. Our method au-tomatically discovers the order in which the attributes can be transmitted most succinct. For this, it needs to find sets of attributes S i for each attribute a i such that these should be encoded before a i . The collection S = { S 1 , . . . , S should define an acyclic graph and the actual trees are plexity P i c ( bt ( a i ; S i , F )) of the best model built from S .
We construct the set S iteratively. At the beginning of the algorithm we have S i =  X  and we increase the sets S i one attribute at a time. We allow ourselves to mark the at-tributes. The idea is that once the attribute a i is marked, then we are not allowed to augment S i any longer. At the beginning none of the nodes are marked.

To describe a single step in the algorithm we consider a graph H = ( v 0 , . . . , v K ) , where v 1 , . . . , v the attributes and v 0 is a special auxiliary node. We start by adding edges ( v i , v 0 ) having the weight c ( bt ( a thus the cost of the best tree possible from F using only the attributes in S i . Then, for each unmarked node v i find out what other extra attribute will help most to encode it succinct. To do this, we add the edge ( v i , v j ) for each v with the weight c ( bt ( a i ; S i  X  X  a j } , F )) . Now, let U be the minimum directed spanning tree of H having v 0 as the sink. Consider an unmarked node v i such that ( v i , v 0 )  X  E ( U ) . That node is now the best choice to be fixed, as it helps to encode the data best. We therefore mark attribute a i and add a to each S j for each ancestor v j of v i in U . This process is repeated until all attributes are marked. The details of t he algorithm are given in Algorithm 3.
 Algorithm 3 The algorithm S ET P ACK constructs a deci-sion tree model T given a family of itemsets F such that sets ( T )  X  X  . Returns a DAG, a family S = ( S 1 , . . . , S of sets of attributes. The trees are T i = bt ( a i , S i 1: S = ( S 1 , . . . , S K )  X  (  X  , . . . ,  X  ) . 2: r = ( r 1 , . . . , r K )  X  ( false , . . . , false ) . 3: V  X  X  v 0 , . . . , v K } . 4: while there exists r i = false do 5: E  X  X  X  . 6: for i = 1 , . . . , K do 7: E  X  E  X  ( v i , v 0 ) . 8: w ( v i , v 0 )  X  c ( bt ( a i ; S i , F )) . 9: if r i = false then 10: for j = 1 , . . . , K do 11: T  X  bt ( a i ; S i  X  X  a j } , F ) . 12: if c ( T )  X  w ( v i , v 0 ) then 13: E  X  E  X  ( v i , v j ) , w ( v i , v j )  X  c ( T ) . 14: end if 15: end for 16: end if 17: end for 18: U  X  dmst ( V, E ) { Directed Min. Spanning Tree. } 19: for ( v i , v 0 )  X  E ( U ) and r i = false do 20: r i  X  true . 21: for v j is a parent of v i in U do 23: end for 24: end for 25: end while 26: return S .

The marking of the attributes guarantees that there can be no cycles in S . In fact, the marking order also tells us a valid order for transmitting the attributes. Further, as at least one attribute is marked at each step, this guarantees that th e algorithm terminates in K steps.

Let S be the collection of sources. The following propo-sition tells us that the augmentation performed by S ET P does not compromise the optimality of collections next to S . Proposition 9. Assume the collection of sources S = { S 1 , . . . , S K } . Let O = { O 1 , . . . , O K } be the collection of sources such that S i  X  O i and | O i | X | S i | + 1 . Let S  X  be the collection that Algorithm 3 produces from S in a single step. Then there is a collection S  X  such that S  X  i  X  S  X  that c ( S  X  )  X  c ( O ) .
 Proof. Let G be the graph constructed by Algorithm 3 for the collection S . Construct the following graph W : For each O i such that O i = S i add the edge ( v i , v 0 ) . For each O i 6 = S i add the edge ( v i , v j ) , where { a j } = O But W is a directed spanning tree of G . Let U be the di-rected minimum spanning tree returned by the algorithm. Let S  X  i = S  X  i if ( v i , v 0 )  X  E ( U ) and S  X  i = S ( v i , v j )  X  E ( U ) . Note that S  X  defines a valid model and because U is optimal we must have c ( S  X  )  X  c ( O ) . Corollary 10. Assume that F is a family of itemsets having 2 items, at maximum. The algorithm S ET P ACK returns the optimal tree model.

Let us consider the complexity of the algorithms. The algorithm S ET P ACK runs in a polynomial time. By using dynamic programming we can show that G ENERATE runs in O ( | F | 2 ) time. We also tested a faster variant of the al-gorithm in which the exhaustive search in G ENERATE is re-placed by the greedy approach similar to the ID3 algorithm. We call this variant S ET P ACK G REEDY .
Finding interesting itemsets is a major research theme in data mining. To this end, many measures have been suggested over time. A classic measure for ranking item-sets is frequency, for which there exist efficient search al-gorithms [2, 15]. Other measures involve comparing how much an itemset deviates from the independence assump-tion [1, 3, 4, 11]. In yet other approaches more flexible mod-els are used, such as, Bayes networks [17, 18], Maximum Entropy estimates [24, 31]. Related are also low-entropy sets: itemsets for which the entropy of the data is low [16].
Many of these approaches suffer from the fact that they require a user-defined threshold and further that at low thresholds extremely many itemsets are returned, many of which convey the same information. To address the latter problem we can use closed [28] or non-derivable [6] item-sets that provide a concise representation of the original itemsets. However, these methods deteriorate even under small amounts of noise.

Alternative to these approaches of describing the pattern set, there are methods that instead pick groups of itemsets that describe the data well. As such, we are not the first to embrace the compression approach to data mining [12]. Re-cently, Siebes et al. [30] introduced the MDL-based K RIMP algorithm to battle the frequent itemset explosion at low support thresholds. It returns small subsets of itemsets th at together capture the distribution of the data well. These code tables have been successfully applied in classifica-tion [22], measuring the dissimilarity of data [33], and dat a generation [34]. While these applications shows the prac-ticality of the approach, K RIMP can only describe the pat-terns between the items that are present in the dataset. On the other hand, we consider the 0 s and the 1 s in the data symmetrically and hence we are able to provide more de-tailed descriptions of the data; including patterns betwee n the presence and absence of items.

More different from our methods are the lossy data de-scription approaches. These strive to describe just part of the data, and as such may overlook important interactions. Summarization [7] is a compression approach that identifies a group of itemsets such that each transaction is summarized by one set with as little loss of information as possible. Yet different are pattern teams [20], which are groups of most-informative length-k itemsets [19], selected through an ex-ternal interestingness measure. As this approach is compu-tationally intensive, the number of team members is typi-cally &lt; 10 . Bringmann et al. [5] proposed a similar selec-tion method that can consider larger pattern sets. However, it also requires the user to choose a quality measure to which the pattern set has to be optimized, unlike our parameter-free and lossless method.

Alternatively we can view the approach in this paper as building a global model for data and then selecting the item-sets that describe the model. This approach then allows us to use MDL as a model selection technique. In a related work [32] the authors build decomposable models in order to select a small family of itemsets that model the data well.
The decision trees returned by our methods, and partic-ularly the DAG that they form, have a passing resemblance to Bayes networks [9]. However, as both the model con-struction and complexity weighing differ strongly, so do th e outcomes. To be more precise, in our case the distribu-tions p ( x, par ( x )) are modeled and weighted via decision trees whereas in the Bayes network setup any distribution is weighted equally. Furthermore, we use the correspondence between the itemsets and the decision trees to output local patterns, as opposed to Bayes networks which are tradition-ally used as global models.
This section contains the results of the empirical evalua-tion of our methods using toy and real datasets.
For the experimental validation of the two packing strate-gies we use a group of datasets with strongly differing stati s-tics. From the LUCS/KDD repository [8] we took a number of often used databases to allow for comparison to other methods. To test our methods on real data we used the Mammals presence database and the Helsinki CS-courses dataset. The latter contains the enrollment records of stu-dents taking courses at the Department of Computer Sci-ence of the University of Helsinki. The mammals dataset consists of the absence/presence of European mammals [25] in geographical areas of 50x50 kilometers. 1 The details of these datasets are provided in Table 1.

Table 1. Statistics of the datasets used in the experiments.

To evaluate whether our method correctly identifies (in)dependencies, we start our experimentation using two artificial datasets of 2000 transactions and 10 items. For both databases, the data is generated per transaction, and the presence of the first item is based on a fair coin toss. For the first database, the other items are similarly gener-ated. However, for the second database, the presence of an item is 90% dependent on the previous item. As such, both datasets have item densities of about 50%.

If we apply G REEDY P ACK , our greedy decision tree building method, to these datasets we see that it is unable to compress the independent database at all. Opposing, the dependently generated dataset can be compressed into only 50% of the original number of bits. Inspection of the re-sulting itemsets show that the resulting model correctly de -scribes the dependencies in detail: The resulting 19 itemsets are { a 1 , . . . , a 10 , a 1 a 2 , . . . , a 9 a 10 } .
Recall that our goal is to find high quality descriptions of the data. Following the MDL principle, the quality of the found descriptions can objectively be measured by the compression of the data. We present the compressed sizes for G REEDY P ACK in Table 2. The encoding costs c ( T ) in-clude the size of the encoded data and the decision trees. The initial costs, as denoted by c ( T b ) , are those of encoding the data using na  X  X ve single-node T RIVIAL T REE s. Each of these experiments required 1 X 10 seconds runtime, with an exception of 60 s for mushroom .
 From Table 2, we see that all models returned by G
REEDY P ACK strongly reduce the number of bits required to describe the data; this implicitly shows that good models are returned. The quality can be gauged by taking the com-pression ratios into account. In general, our greedy method reduces the number of bits to only half of what the inde-pendent model requires. As two specific examples of the found dependencies, in the courses dataset the course Data Mining was packed using Machine Learning , Software En-gineering , Information Retrieval Methods and Data Ware-houses . Likewise, AI and Machine Learning were used to pack the Robotics course.

Like discussed above, our approach and the K RIMP [30] algorithm have stark differences in what part of the data is considered. However, as both methods use compression, and result good itemsets, it is insightful to compare the al-gorithms. For the latter we here allow it to compress as well as possible, and thus, consider candidates up to as low min-sup thresholds as feasible.
 Let us compare between the outcomes of either method. For K RIMP these are itemsets, for ours it is the combina-tion of the decision trees and the related itemsets. We see that K RIMP typically returns fewer itemsets than G REEDY P
ACK . However, our method returns itemsets that describe interactions between both present and absent items.
Next, we observed that especially the initial K RIMP com-pression requires many more bits than ours, and as such K
RIMP attains better compression ratios. However, if we disregard the ratios and look at the raw number of bits the two methods require, we see that K RIMP generally requires twice as many bits to describe only the 1 X  X  in the data than G
REEDY P ACK does to represent all of the data.
To further assess the quality of our models we use a sim-ple classification scheme [22]. First, we split the training database into separate class-databases. We pack each of these. Next, the class labels of the unseen transactions wer e assigned according to the model that compressed it best.
We ran these experiments for three databases, viz. mush-room , breast and anneal . A random 90% of the data was used to train the models, leaving 10% to test the accuracy on. The accuracy scores we noted, resp. 100%, 98.0% and 93.4%, are fully comparable to (and for the second, even better than) the classifiers considered in [22].
In this subsection we evaluate S ET P ACK , our itemset se-lection algorithm. Recall that this algorithm selects item -sets such that they allow for building succinct encoding de-cision trees. The difference with G REEDY P ACK is that in this setup the resulting itemsets should be a subset of a given candidate family. Here, we consider frequent item-sets as candidates. We set the support threshold such that the experiments with S ET P ACK were finished within 1 2 hours, with an exception of 23 hours for considering the pageblocks 1 63599 11961 78.3 92 11967 78.3 95 10911 53 tic X  X ac X  X oe 7 34019 23118 92.0 620 23616 94.0 277 28957 159 large candidate family for mushroom . For comparison we use the same candidates for K RIMP . We also compare to S
ET P ACK G REEDY , which required 1 X 12 minutes, 7 min-utes typically, with an exception of 2 1 2 hours for mushroom .
Comparing the results of this experiment (Table 3) with the results of G REEDY P ACK in the previous experiment, we see that the selection process is more strict: now even fewer itemsets are regarded as interesting enough. Large candi-date collections are strongly reduced in number: up to three orders of magnitude. On the other hand, the compression ratios are still very good. The reason that G REEDY P ACK produces smaller compression ratios is because it is allowe d to consider any itemset.

Further, the fact alone that even with this very strict se-lection the compression ratios are generally well below 90% show that these few sets are indeed of high importance to describing the major interactions in the data.

If we compare the number of selected sets to K RIMP we see that our method returns in the same order as many itemsets. These descriptions require far less bits than tho se found by K RIMP . As such, ours are a better approximation of the Kolmogorov complexity of the data.

Between S ET P ACK and S ET P ACK G REEDY the out-comes are very much alike; this goes for both the obtained compression as well as the number of returned itemsets. However, the greedy search of S ET P ACK G REEDY allows for much shorter running times.
The experimentation on our methods validates the qual-ity of the returned models. The models correctly detect de-pendencies in the data while ignoring independencies. Only a small number of itemsets is returned, which are shown to provide strong compression of the data. By the MDL prin-ciple we then know these describes all important regulari-ties in the data distribution in detail efficiently and witho ut redundancy. This claim is further supported by the high classification accuracies our models achieve.

The G REEDY P ACK algorithm generally uses more item-sets and obtains better packing ratios than S ET P ACK . While G
REEDY P ACK is allowed to use any itemset, S ET P ACK may only use frequent itemsets. This suggests that we may able to achieve better ratios if we use different candidates , for example, low-entropy sets [16].

The running times of the experiments reported in this work range from seconds to hours and depend mainly on the number of attributes and rows of the datasets. The exhaus-tive version S ET P ACK may be slow on very large candidate sets, however, the greedy version S ET P ACK G REEDY even handle such families well. Considering that our curren t implementation is rather na  X  X ve and the fact that both meth-ods are easily parallelized, both G REEDY P ACK and S P ACK G REEDY are suited for the analysis of large databases.
The main outcomes of our models are the itemsets that identify the encoding paths. However, the decision trees from which these sets are extracted can also be regarded as interesting as these provide an easily interpretable view o n the major interactions in the data. Further, just consideri ng the attributes used in such a tree as an itemset also allows for simple inspection of the main associations.

In this work we employ the MDL criterion to identify the optimal model. Alternatively, one could consider using either BIC or AIC, both of which can easily be applied to judge between our decision tree-based models.
In this paper we presented two methods that find com-pact sets of high quality itemsets. Both methods employ compression to select the group of patterns that describe all interactions in the data best. That is, the data is considere d symmetric and thus both the 0s and 1s are taken into account in these descriptions. Experimentation with our methods showed that high quality models are returned. Their com-pact size, typically tens to thousands of itemsets, allow fo r easy further analysis of the found interactions.

