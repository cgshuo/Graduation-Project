 In this demo paper, we introduce a new search engine that supports Information Retrieval (IR) in a dynamic setting. A dynamic search engine distinguishes itself by handling rich interactions and temporal dependency among the queries in a session or for a task. The proposed search engine is called Dumpling, named after the development team X  X  fa-vorite food. It implements state-of-the-art dynamic search algorithms and provides: (i) a dynamic search toolkit by integrating the Query Change Retrieval Model (QCM) and the Win-win search algorithm; (ii) a user-friendly interface supporting side-by-side comparison of search results given by a state-of-the-art static search algorithm and the proposed dynamic search algorithms; (iii) and APIs for developers to apply the dynamic search algorithms to index and search over custom datasets. Dumpling is developed under the um-brella of a bigger project in the DARPA Memex program to crawl and search the dark web to support law enforcement and national security.
Dynamic search is an emerging topic in Information Re-trieval (IR) research [4]. In dynamic search, we model dy-namic systems which change or adapt over time or a se-quence of events using a range of techniques from artificial intelligence and reinforcement learning. Many of the open problems in current IR research can be described as dynamic systems, for instance, information retrieval in a session.
In a dynamic search setting, a user issues multiple queries during a session to accomplish a search task. The common process is that the user sends a query, gets the top ranked documents, changes her query and sends it again. As a result, a series of queries, a series of retrieved documents, and rich user interactions will be generated, until the ses-sion stops when the user finishes her search task. During a session, the temporal dependencies between queries are presented in that way that the previous queries and the pre-viously obtained search results will influence how the user issues the current query and how the search result rankings could be optimized for the current query.

The dynamic search algorithms implemented in Dumpling include the Query Change Retrieval Model (QCM) [1] and the Win-win search algorithm [3]. Not only does it imple-ment a dynamic search engine, Dumpling also provides a convenient user interface for a user to compare the results from the dynamic search engine and the static search en-gine. By comparing the retrieved documents, the user can easily evaluate the performance of different search engines. We have deployed Dumpling for DARPA X  X  Memex program. The evaluations of the systems are done by obtaining real user feedback for the search results. They show that the dynamic search algorithms dramatically improve the search accuracy over the static search algorithms. To further test the performance of the dynamic search engine, Dumpling also provides simple APIs to update the dataset. Dumpling can automatically build an index and apply the dynamic search algorithm to a new dataset. Dumpling is not only a dynamic search system but also provides potential to further the research of dynamic search.
The Query Change Retrieval Model (QCM) analyzes the evolution of queries as well as previously retrieved docu-ments to enhance the dynamic search. QCM X  X  document ranking function is based on the previous query q i  X  1 current query q i , the previously retrieved documents D i  X  1 and the discount factor  X   X  (0 , 1): Score ( q i ,d ) = P ( q the document relevance to the i th query based on the current reward (current document relevance) and the discounted sum of past accumulated rewards/relevance in a session. The most important feature of this formula is that the past queries and retrieved documents have less influence on the user X  X  current search. The QCM model is highly effective and consistently won the top positions in the recent TREC Session Track evaluations [2].
A user tends to query several times in a row during one search session. She changes keywords in the queries hop-ing to find more information. The intension of a user differs from one session to another. Sometimes, the user finds some relevant information by the first query, and then wants to find more detailed information about subtopics by the next query (We term this behavior as exploitation.) Other times, the user gets what they need by the first query, and then wants to change to a brand-new topic by the next (We term this behavior as exploration). In the model of the Win-win search algorithm, we categorize the user into 1 of 4 states: { RT : find something relevant and explore a new topic; RR : find something relevant and exploit the same topic; NRT : find nothing relevant and explore a new topic; NRR : find nothing relevant and exploit the same topic. } The user X  X  state moves from one state to the next along with the evo-lution of queries. The belief of the user X  X  state can be pre-sented as b t = S m ( t = 1 , 2 ,...,n ) (n stands for the to-tal number of iterations) and m= { RT, RR, NRT, NRR } [3]. Dumpling infers the user X  X  current state by analyz-ing previous returned documents, the user X  X  queries and the user X  X  interactions during the session. Every time the user sends a new query, Dumpling updates the user X  X  state using b where t indicates the search iteration; s i and s j are any two states; b t +1 ( s j ) is the probability of the user being believed at state j in iteration t + 1; o t is the observation of the user X  X  behavior; a t is the search engine X  X  action. Dumpling thus infers the user X  X  state, and chooses appropriate retriev-ing algorithm and arguments.
Dumpling supports dynamic search to different datasets which can be chosen by a user. Currently we use datasets provided by the DARPA Memex program. The documents are crawled from the dark web including forum posts, online sex ads, child labor ads, etc. The search engine is located at dumplingproject.org . Due to the sensitivity of the data, our search results are password protected and not open to the public. Figure 1 shows the interface of Dumpling. It sup-ports the following functionalities. Dumpling provides very convenient APIs to maintain the dataset. With Dumpling X  X  API, the user can add, update and delete index based on new crawling results. The extensibility of Dumpling is enhanced by the easy-to-change dataset. The search engine provides side-by-side comparison between the dynamic search algo-rithm and static search algorithm (elastic search in our case). We also have a decision state pane to show our estimated decision making states of the user during a search.
Dumpling provides a convenient user interface for a user to compare the dynamic search results and the static search results. Dumpling gathers explicit feedback from real users in US agencies working on national security. The user can provide both positive and negative feedback of the search results and the feedback is used in the dynamic search algo-rithms. In Figure 1, in the first query, a user uses  X  X rrest X ; in the second query, the user uses  X  X ew york human traffic X . From the user X  X  perspective, she initially wants to know who was arrested recently. Then she wants to further exploit who is recently arrested by New York police because of human trafficking. For the static search algorithm, the retrieved documents only include New York human trafficking news, the keyword  X  X rrest X  seldom appears in the documents. For the dynamic search algorithm, the retrieved documents con-tain much more information about arresting, which better suits the user X  X  needs. The research is supported by DARPA FA8750-14-2-0226, NSF IIS-1453721, and NSF CNS-1223825. Any opinions, findings, conclusions, or recommendations expressed in this paper are of the authors, and do not necessarily reflect those of the sponsor.

