 Skyline queries are an important area of current database research, and have gained extends the idea of skylines in such a way that multiple skylines are treated as objects for data exploration and data mining.

One of the most prominent applications of the skyline operator is to support complex decisions. As an example consider an online m arketplace for used cars, where the user p (price) and m (mileage), with an unknown weighting of the single conditions. The result of such a query has to contain all offers which may be of interest: not only the cheapest offer and that with lowest mileage b ut also all offers providing an outstanding combination of p and m .

However, not all of these offers are equally attractive to the user. For instance, con-sider an offer A that has both a lower price and a lower mileage than another offer G and many other offers. Therefore, we say that A dominates G (in symbols A  X  G ), be-The skyline contains all obj ects which are not dominated by any other object in the database.
 For the used car market, the skyline of each car model has a particular meaning: Many arbitrarily bad offers may be present in the database but only the offers in (or close to) the skyline have a high potential to find a customer. The skyline of the offers marks to some degree the fair value of a car for each mileage in the market. Therefore, the skyline characterizes a car model (or higher-order objects of other applications) in a highly expressive way.
 This high expressiveness leads us to the idea of treating the skylines themselves as a measure of similarity. Figure 1 illustrates the skylines of four different car models derived from real data of an online automotive market. Car models which exhibit similar skylines (like Audi A3 1.6 and Ford Focus 1.6) may be considered as similar: A recommender system might find out that the Focus is a perfect alternative for the Audi A3.
 The different car models may be subject to clus-tasks, using a similarity measure which is built upon the skyline.

The remainder is organized as follows. We review related work in Section 2. Our novel distance measure for skylines is described in Section 3. We present an experi-mental evaluation in Section 4 and c onclude the paper in Section 5. Besides introducing studies on skyline computation we briefly survey clustering algo-rithms which are applied to demonstrate the potential of data mining on skylines for knowledge discovery in Section 4.
 Skyline computation. Many different methods for skyline computation have been emer-ged in recent years. Brzsnyi et al. [1] proposed a SQL syntax for skyline queries and developed the Block-Nested-Loops (BNL) algorithm and the Extended Divide-Conquer algorithm. The Sort-Filter-Skyline algorithm by Chomicki et al. [6] improves BNL by pre-sorting the entire dataset. Tan et al. [2] presented Bitmap and Index. Kossmann et al. [3] developed a nearest neighbor search technique by browsing the data set indexed by an R -tree.
 Clustering. In iterative partitioning clustering k -medoid methods such as PAM [7] or CLARANS [8] aim at finding a set of k representatives among all objects that charac-the cluster of the medoid that is closest to that object. One of the most wide spread ap-archy obtained by the merging order is visu alized as a tree which is called dendrogram. In density-based clustering, clusters are regarded as areas of high object density which are separated by areas of lower object density. The algorithm DBSCAN [10] formalizes this idea by two parameters: MinPts specifying a number of objects and specifying a volume. An object is called core object if it has at least MinPts objects within its -neighborhood. DBSCAN determines a non-hier archical, disjoint partitioning of the data set into clusters.
 In this paper we describe SkyDist, a novel distance function for skyline objects. At the beginning of this section we define the essential concepts underlying SkyDist in general. Then we motivate the idea behind assigning SkyDist for 2-dimensional skylines and conclude with a generalization according n -dimensional skylines, where n&gt; 2 . 3.1 Theoretical Background Consider a set of database objects, each of wh ich is already associated with an indi-vidual skyline. For instance, each car type is associated with the skyline of the offers posted in a used car market. An effective distance measure for a pair of skyline objects suitably reflected. Whenever two skylines are similar in an intuitive sense, then SkyDist should yield a small value. In order to define such a reasonable distance measure, we recall here the central concept of the classical skyline operator, the dominance rela-numeric space D .
 Definition 1 (Dominance). For two data points u and v , u is said to dominate v ,de-noted by u  X  v , if the following two conditions hold:  X   X  Definition 2 (Skyline Point / Skyline). Given a set of data points DB , a data point u is a skyline point if there exists no other data point v  X  X B such that v dominates u . The skyline on DB is the set of all skyline points.
 Two skylines are obviously equal when they consist of identical points. Intuitively, one can say that two skylines are similar, whenever they consist of similar points. But in addition, two skylines may also be considered similar if they dominate approximately the same points in the data space. This can be grasped in a simple and efficient way by requiring that the one of the two skylines should not change much whenever the points of the other skyline are inserted into the first one and vice versa. This leads us to the idea to base SkyDist on the set-theoretic difference among the parts of the data space which are dominated by the two skylines. For a more formal view let us define the terms dominance region and non-dominance region of a skyline.
 of a skyline X = { x 1 ,...,x n } .The dominance region of x i , denoted by DOM x i ,is the data space, where every data point u  X  X OM x i complies the condition x i  X  u . Definition 4 (Dominance Region of a Skyline). Given the set of all skyline points of a skyline X .The dominance region of the skyline X , denoted by DOM X , is defined over the union of the dominance regions of all skyline points x i  X  X  1 ,...,n } . Figure 2 illustrates this notion for two given skylines X and Y . The green and blue areas show the dominance regions of skylines X and Y , respectively. Definition 5 (Non-Dominance Region of a Skyline). Given a numeric space D = (
D 1 ,..., region of X , denoted by DOM X ,is D\DOM X .
 The basic idea behind SkyDist is to determi ne the data space that is represented by all possible data points that are located in the dominance region of one skyline and, at the same time, the non-dominance region of the other skyline. More formally we can say that SkyDist is the volume of the distance area between two skylines which can be specified by the following equation.
 In order to determine the value of the distance of two skylines X and Y based on the concept described above, we have to limit the corresponding regi ons in each dimension. Therefore we introduce the notion of a bounding skyline point.
 Definition 6 (Bounding Skyline Point). Given a skyline X in a n -dimensional nu-meric space D =( D 1 ,..., D n ) ,where x i  X  [0 , 1] .The bounding skyline point of skyline X in dimension i , denoted by x Bound i ,isdefinedasfollows. The bounding skyline points for two 2-dimensional skyline objects X and Y are marked in Figure 2 in red color. We remark that this concept is also applicable if the domain of one or more dimen-sions is not bounded. In this case the affected di-mensions are bounded by the highest value that occurs in either skyline object X or Y in the according dimension. The coordinates of the re-maining skyline points are then scaled respectively. 3.2 SkyDist by Monte-Carlo Sampling First we want to give an approximation of the distance of two skylines (cf. Equation 1) by a Monte-Carlo Sampling approach (MCSkyDist). SkyDist is approximated by ran-domly sampling points and computing the ratio between samples that fall into the region defined by Equation 1 and the ones that do not. Let us consider Figure 3(a). The region marked in red illustrates the region underlying SkyDist of two Skylines X and Y .This region is the dominance region of skyline X and simultaneously the non-dominance re-gion of skyline Y , thus the distance of skyline X to Y . A user defined number of points is randomly sampled and the amount of samples that fall into the SkyDist region is de-termined. The ratio between the samples located in the SkyDist region and the ones that do not give an approximation of the distance of the two skylines. We use this technique in our experiments as a baseline for comparing a more sophisticated approach. 3.3 SkyDist for 2-Dimensional Skylines Now we describe the method of computing the exact distance of two skylines X and Y in 2-dimensional space. Let the skyline points of both skylines X and Y be ordered by one dimension, e.g. D 2 . Note that the dominance region of a skyline X is composed by the dominance regions of all of its skyline points. For the computation of SkyDist, we consider only the dominance regions that are e xclusive for each skyline point. Meaning that when we look at a particular skyline point x i , we assign the dominance region of x and discard all dominance regions of skyline points x j ,where x j . D 2 &gt;x i . D 2 .
Figure 3(a) illustrates in red the region underlying SkyDist according to skyline ob-in Figure 3(b). To calculate the region between the skylines X and Y and thus their distance we use the concept of a sweep-line approach. For this purpose we store the skyline points of both skylines X and Y in a heap structure called event point schedule (EPS), ordered by one of the two dimensions (e.g. D 2 ) ascending. The general idea be-point that is stored in the EPS. In our example, the sweep line moves along the axis of D 2 . Due to the ordering of the skyline points in the EPS we can determine the area of the rectangle at every stop of the sweep-line and calculate SkyDist in an incremental way. Figure 3(c) demonstrates for example th e calculation process w enn the sweep-line 3.4 A Sweep-Plane Approach for the High-Dimensional Case based on a sweep-plane paradigm referred to as SPSkyDist. We consider a d -dimensional skyline as a sequence of skylines with dimensionality ( d  X  1) (see Figure 4): Here, we dimensional skylines (each in the D 1 / D 2 -plane).
 Traversal. The event point schedule (EPS) contains all points, ordered by the last co-ordinate (decreasingly). In each stop of th e sweeping plane, we want to obtain a valid skyline in the space spanned by the remaining coordinates. This sub-skyline is stored in More precisely, in each stop of the sweep-plane, this ( d  X  1) -dimensional sub-skyline is updated by (1) projecting the current point of the EPS into the ( d  X  1) -dimensional space, (2) in-serting the projected point into the skyline in the SPS, (3) deleting those points from the skyline in the SPS which are dominated by the new point in the ( d  X  1) -dimensional space, and (4) calling the traversal-algorithm recursively for the obtained ( d  X  1) -dimensional skyline. In our example, the EPS has the order ( A, B, C, D, E ) . We start with an empty SPS, and at the first stopping point, the D 1 / D 2 -projection of A is inserted into the SPS to obtain X 1 .
 No point is dominated. Hence, we call the traver-sal algorithm for the obtained 2-dimensional skyline tion of C is inserted which does not dominate object B in the skyline, and, therefore, the next skyline X 3 =( B, C ) . Finally, D and E are inserted into the skyline in the SPS (which can be done in one single stop of the sweep-plane or in two separate stops in any arbitrary order), to obtain X 4 =( D, C, E ) ,since B is dominated by D in the ( d  X  1) -dimensional projection.
 Simultaneous Traversal for SkyDist. The computation of SkyDist ( X, Y ) requires a simultaneous traversal of the two skylines X and Y to be compared. That means that the EPS contains the points of both X and Y , simultaneously ordered by the last coordinate. Each of the stops of the sweep-plane corresponds either to a point of X or a point of Y , and the corresponding sub-skyline i n the SPS must be updated accordingly, as defined in the last paragraph by (1) projecting the point, (2) inserting the point in the corresponding sub-skyline for either X i or Y i , (3) cancelling out the dominated points of the sub-skyline, and finally making the recursive call for ( d  X  1) . Having developed sweep-plane defines a disklet, the thickness of which is given by the difference between the last and the current event point (taking only the coordinate which is used to order the EPS). This thickness must be multiplied with the ( d  X  1) -dimensional volume which is returned by the recursive call that computes SkyDist of the ( d  X  1) -dimensional sub-added. This works no matter whether current and the previous event points belong to the same or different skylines. Also in the case of tie situations where both skylines have identical values in the ordering coordinates or where some points in the same skyline have identical values, our algorithm works correctly. In this case, some disklets with thickness 0 are added to the overall volume, and, therefore, the order in which the corresponding sub-skylines are updated, does not change anything.
 We present an extensive experimental ev aluation on synthetic and real world data. We demonstrate that SkyDist is highly effective and efficient and that data mining on sky-lines provides novel insights in various application domains. For skyline construction, the approach of [1] is applied.
 All experiments are performed on an Asus Z92J which is equipped with an Intel Dual-Core T2050 Processor and has 2 GByte of RAM. 4.1 Efficiency SkyDist, we generate synthetic data of va rious number of objects and dimensions. Un-less otherwise specified, the skyline is constructed from 1,000 uniformly distributed 2-dimensional data objects and for MCSkyDist we use a sample rate of 1,000. Accuracy of MCSkyDist w.r.t. Sample Rate. We vary the sample rate in a range of 1 to 50,000 and quantify the accuracy of SkyDis t in each run. These experiments indicate that the accuracy of MCSkyDist is very robust w.r.t. the number of samples. Its results achieve a constant value even with a small sample rate. Actually with 1,000 samples the same result as using SPSkyDist can be achieved.
 Runtime w.r.t. Number of Objects and Dimensionality We use data sets with varying number of points and dimensionality and generate sky-lines for each data set. In most real world applications, we are interested in the sky-line w.r.t a few selected dimensions. Hence, in this experiments, we focus on skylines up to dimensionality d =4 . All results are summarized in Table 1. In the 2-di-mensional case the runtime of SkyDist re-mains constant even with increasing data size. This is due to the fact, that despite in-creasing database size the number of sky-line points remains relatively constant. It has been shown in [5] that for independent distributed data the number of skyline ob-jects is O (log 2 n ) .

Also in the 3-and 4-dimensional case it is evident that considering the skyline points instead of all data points is very efficient. It takes 78 and 266 ms for SPSkyDist and MCSkyDist respectively to return the result when compar ing two skylines X and Y each determined out of 10,000 data points. MCSkyDist and SPSkyDist both scale linear with increasing dimensionality. The sweep-plane approach outperforms the baseline by a factor of two which confirms the effectivity and scalability of an exact computation of SkyDist even for large data sets with more than two dimensions. 4.2 Clustering Skylines of Real World Data In addition to synthetic data we used real world data to demonstrate the potential of SkyDist for data mining. We demonstrate that interesting reasonable knowledge can be obtained by clustering skylines with SkyDist. In particular, we focus on two case studies from different applications and we apply three different clustering algorithms (PAM, Single Link and DBSCAN) with SkyDist.
 Case Study 1: Automotive Market. The data used in this experiment is obtained from the online automotive market place ( http://www.autoscout24.de ). The result-ing data set comprises in total 1,519 used cars constructed in the year 2000. Thus, each data point represents a specific offer of a used car which are labeled to one of three classes compact , medium-sized and luxury , respectively. This information allows for an evaluation of the results. Each car model is represented by one 2-dimensional skyline using the attributes mileage and price . Hence each skyline point represents a specific offer that provides an outstanding combination of these attributes, and therefore it is interesting for the user. PAM, DBSCAN and Single Link combined with SkyDist create an identical clustering result (cf. Figure 5) using the following parameterization: PAM ( K =3 ), DBSCAN ( =10 , MinPts =2 ) and the dendrogram Single Link with a vertical cut at maxDistance =90 .

All algorithms produce 100 % class-pure clusters w.r.t the labelling provided by the online market place. As expected the Audi A8 and BMW 7 of class luxury are clustered together in the blue cluster with a very low distance. Also the Mercedes Benz C180 (MB C180) and the Audi A3 belong to a common cluster (marked in red) and show a larger distance to the Toyota Avensis or the Honda Accord. These two car models are clus-tered together in the green cluster, whose members usually have a cheaper price. The clustering result with SkyDist is very informative for a user interested in outstanding combinations of mileage and price but not fixed on a specific car model. By clustering, groups of models with similar skylines become evident.
 SkyDist vs. Conventional Metrics. Conventional metrics can in principle be applied Then we cluster the resulting vectors with Single Link using the Euclidean, Manhattan and Cosine distance. In contrast to clustering skylines using SkyDist (cf. Figure 6(a)), Figures 6(b), 6(c) and 6(d) demonstrates that no clear clusters are identifiable in the dendrogram and the result is not very comprehensible. In Figure 6(b) and 6(c) it can easily be seen that Euclidean and Manhattan distance lead to similar results. Both show the so called Single Link effect, where no clear clusters can be identified. Using the Cosine distance avoids this effect but does not produce meaningful clusters either. For example, the luxury car model BMW 7 has minimum distance to the Opel Astra of class compact but has an unexpected high distance to the luxury Audi A8.
 Case Study 2: Performance Statistics of Basketball Players. The NBA game-by-game technical statistics are available via http://www.NBA.com . We focus on the years 1991 to 2005. To facilitate demonstratio n and interpretation, we select players who have played at minimum 500 games and are noted for their skills and got vari-ous awards. The players are labeled with the three different basketball positions guard (G), forward (F) and center (C). The individual performance skyline of each player represents the number of assists and points. We cluster the skylines using SkyDist. Sin-gle Link with a vertical cut of the dendrogram at maxDistance =96 and DBSCAN ( =4 , MinPts =2 ) result in the same clustering. Figure 7(b) shows that the play-ers cluster very well in three clusters that refer to the labels G, F and C. With PAM ( K =3 ) (cf. Figure 7(a)) only Steve Nash (G) clusters into the red forward cluster. in the position forward concerning number of points and assists. This is the first approach to data mining on skyline objects. Inspired by the success of the skyline operator for multi-criteria decision making, we demonstrated that the acteristics. Hence, data mining on skylines is very promising for knowledge discovery. As an essential building block, we proposed SkyDist, which is a novel distance func-tion for skylines. We presented a baseline approach that approximates the distance and an exact plane sweep based computation. SkyDist can easily be integrated into many data mining techniques. Real world case studies on clustering skylines demonstrated that data mining on skylines enabled by SkyDist yields interesting novel knowledge. Moreover, SkyDist is efficient and thus scalable to large data sets.

