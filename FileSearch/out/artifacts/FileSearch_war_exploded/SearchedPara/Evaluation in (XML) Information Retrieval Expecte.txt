 Standard Information Retrieval (IR) metrics assume a simple model where documents are understood as independent units. Such an as-sumption is not adapted to new paradigms like XML or Web IR where retrievable informations are parts of documents or sets of re-lated documents. Moreover, classical hypotheses assumes that the user ignores the structural or logical context of document elements and hence the possibility of navigation between units. EPRUM is a generalisation of Precision-Recall (PR) that aims at allowing the user to navigate or browse in the corpus structure. Like the Cumu-lated Gain metrics, it is able to handle continuous valued relevance. We apply and compare EPRUM in the context of XML Retrieval  X  a very active field for evaluation metrics. We also explain how EPRUM can be used in other IR paradigms.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval; H.3.4 [ Information Storage and Retrieval ]: Sys-tems and Software X  Performance evaluation Measurement, Theory Evaluation, Recall-precision, metric, XML Retrieval, Passage Re-trieval, Web Retrieval
Evaluation has always been a key problem in Information Re-trieval (IR). The experimental practice started with the work on the Cranfield collection [4] and has been popularised since then by the TREC conferences and other IR challenges. State of the art evalu-ation metrics are used to compare different systems and to justify theoretical and/or pragmatical developments of IR systems. As a part of the evaluation process for emerging IR fields like XML or Web IR, developing adequate metrics is both an essential and an open question.

Among the different measures and criteria that have been pro-posed, standard metrics are most often combinations of recall and precision [1]. Recall is the proportion of retrieved elements among the relevant ones. Precision is the proportion of relevant elements among the retrieved ones. In standard or Web IR, the elements coincide with documents, while in the context of XML IR, the ele-ments are the XML elements. As search engines results are usually ordered lists, precision is often computed at a given cut-off value or at a given recall . In this work, we use the term precision in this latter acception and refer to a basic retrieval unit as an  X  X lement X .
All the metrics rely either explicitly or implicitly on assumptions concerning the nature of the collection, the notion of relevance and the user behaviour. Among others, precision-recall graphs make the following assumptions: (1) The user consults a ranked list or-dered by decreasing relevance score; (2) Relevance of an element is binary and independent of the relevance of other elements; (3) The user has only access to one element at a time.

While assumption (1) is acceptable, the last two assumptions lead to contradictions. If a section has several paragraphs among which one is relevant, it is itself relevant to a certain extent, al-though less than its relevant paragraph. This contradicts assump-tion (2). In this paper, we formally introduce a concept that super-sedes the classical notion of relevance, the so-called  X  X dealism X  [14, 11]. Assumption (3) is not adapted to structured corpora. Indeed, it seems natural to reward an element that gives access to relevant material through structural navigation ( e.g. from a section to one of its paragraph) or through hyperlinks. We see that the context of an element, defined as the set of elements that can be reached through navigation from that element, plays a crucial role: The user is not restricted anymore to the retrieved element, but to its context.
We believe EPRUM is a substantial improvement over current metrics. First, EPRUM is formally derived from a explicitly de-fined user model: Computed values can be fully interpreted, user experiments can be straightforwardly used to set the metric param-eters and EPRUM presents no analytical inconsistencies. Second, EPRUM user model is flexible. In the context of XML IR, navi-gation is not limited to browsing from an XML element to its de-scendants or ancestors. Third, the returned list may be composed of complex objects and is not restricted to a simple list of ele-ments. An example of the usefulness of this property is the  X  X etch and Browse X  task of the Initiative for the Evaluation of XML Re-trieval 1 (INEX), where each rank is composed of several pointers to elements within a given document. Eventually, with respect to standard PR, EPRUM formally includes graded relevance.

The plan of this paper is as follows. In Section 2, we show how we redefine the classical concepts of precision at a given recall. In Section 3, we describe how to extend the concept of relevance and http://inex.is.informatik.uni-duisburg.de/ detail the user model. An example of EPRUM computation is given in Section 4 while EPRUM formulae are derived in Section 5. We eventually compare EPRUM with other metrics in Section 6 and perform some experiments in Section 7.
The classical recall and precision metric [19] mentioned in the introduction does not accommodate well a complex user model and leads to several inconsistencies. Two main causes can be identi-fied: Firstly, elements can have a relevant element in their context and the user can navigate to them. Secondly, navigation within the corpus structure can lead the user to see more than one relevant element for a single consulted list item. We propose here a gen-eralisation of precision-recall, somewhat similar to [15], that can handle these problems.

As in the classical definition, the recall value r is the number of relevant elements the user wants to see. The recall level (0  X  1 ) is defined as the ratio of a recall r to the total number t of relevant units. Our generalisation then relies on the definition of the minimum number of ranks m the user needs to consult in the list in order to reach a recall level , or said otherwise a recall value of t .

The user starts considering the first rank of the list. If he finds more than t relevant elements at this rank, then his information need is satisfied and he stops. In this case, the user effort has been restricted to the consultation of the first rank of the list ( m is 1). If not, he proceeds to the second rank, etc. The definition of precision is based on the comparison of two minimum values: The minimum rank that achieves the specified recall over all the possible lists and over the evaluated list. For a given recall level , we define preci-sion as: Precision@ = E  X   X   X   X   X   X   X   X  where the achievement indicator is used to set the precision to 0 if the recall level cannot be reached for the evaluated list. This is compatible with the classical definition of precision at a given re-call where the precision is set to 0 if the list does not contain enough relevant elements: In this case, the user never reaches the specified recall level . This is equivalent to setting the search length (of the evaluated list) to infinite. For the minimum over all the lists, we suppose that there is at least a list for which the recall level can be achieved.

We illustrate this definition in the context of traditional IR where the user cannot navigate and where units are independent. Consider the next list where relevant units are represented in grey:
The standard definition of precision assigns a precision of re-spectively 1, 0.5 and 0 for recalls of 1, 2 and 3 (or more). Our new definition leads to the same values (this example being determinis-tic, the mathematical expectation symbol can be dropped): At recall 1 The minimum number of elements the user has to con-At recall 2 The minimum number of elements the user has to con-A recall of 3 cannot be attained by the user, the achievement in-dicator is 0 and hence precision is 0. As shown in this example, the new definition of precision-recall coincides with the standard definition. The interest of this formulation is that it accommodates more complex user and relevance models. It is possible to prove that, using the final formula of EPRUM and setting its parameters so as to mimic the standard user behaviour in traditional IR, we get the same result as TREC precision-recall at natural recall points. For an arbitrary level , results will differ since we use a different interpolation procedure. This procedure will be justified latter in the paper.
Current metrics suppose that a user sees the elements in their or-der of appearance in the result list. EPRUM on the other hand con-siders these elements as entry points to the collection from where the user can navigate to find relevant elements if he feels that this strategy is promising. EPRUM relates directly the user satisfaction to the number of distinct relevant elements he reaches. If an ele-ment of interest was discovered earlier by the user, the system is not rewarded. In this Section, we describe in detail the user model and illustrate it with some practical examples. We also present an im-portant simplifying assumption that is needed to compute EPRUM and that has an impact on the user model we chose.
In this section, we offer a distinction between the concepts of relevance and idealism. Although relevance is subject to many debates [17], we will suppose here that it is a well-defined prop-erty like is customarily done for other metrics as described in [14]. In order to handle multi-graded relevance, we also introduce a so-called multi-graded satisfaction level whose implications are de-scribed at the end of the section.

We first refine and extend the concept of relevance. In new IR paradigms, retrievable units cannot be considered independent like in traditional IR: For example, in XML IR, if a paragraph is relevant for a given information need, then its enclosing section also bears some relevance. In order to distinguish the intrinsic relevance of the paragraph from the  X  X nherited X  relevance of the section, we say that although the two elements are relevant, only the paragraph is ideal . By definition, an ideal element is always relevant but the reverse is true only in classical IR.

Ideal elements, unlike relevant elements, are supposed to be in-dependent. Note that this hypothesis is similar to the independence of document relevance in classical IR: Ideal elements, as docu-ments, can overlap conceptually (they can contain the same answer to an information need) as long as they do not overlap physically. In XML IR, this implies that ideal elements cannot be nested. This assumption is common among the new XML IR metrics [14, 11].
It is a complicated matter to identify a set of ideal elements as user agreement on which elements to include is usually low. In standard IR evaluation, using a graded relevance has already been proposed [12] in order to credit IR methods for their ability to re-trieve highly relevant documents. In structured IR, it is important to distinguish the degree of idealism of different elements since they can be of significantly different value to the user: An element in XML can range from a mere paragraph to a whole section or docu-ment.

We define the probability P ( x  X  I ) ,where I is the set of ideal elements, as the percentage of users that regard element x as ideal. We introduce a threshold called the satisfaction level S which is a uniform random variable over [0,1] and we define the ideal set corresponding to a given satisfaction level s as the set of elements for which P ( x  X  I )  X  s . We can now define a sequence of decreas-ing thresholds s , to which corresponds a sequence of ideal sets By definition, if an element is ideal for a given satisfaction level, it remains ideal for all lower satisfaction levels: This means that I  X  I s iff s  X  s . It is a simple matter to integrate or sum the rele-vant formulae over decreasing satisfaction levels. As the number of ideal elements t can change for different satisfaction levels, the re-call r can also change for the same . This explains why the TREC interpolation procedure cannot be applied directly.

Another implication is that a satisfaction level is associated with each user: users that are satisfied by elements that satisfy 40% of the users are also satisfied by elements that satisfy 50% of the users. This simplification is necessary to compute EPRUM, and could be changed by another way of clustering ideal elements together. In the remaining of the paper, we consider that the ideal set is deter-ministic and we drop the s subscript.
In this Section, we define a generic user model that can be in-stantiated for different IR paradigms, though we still use XML IR as an example. We then define the notion of consideration (the user  X  X licks X  on a link in the result list) and of navigation (the user nav-igates, within the corpus structure, from a given list item). We also introduce the concept of discovering an element, i.e. of seeing it for the first time. This is important since the user will only be sat-isfied when he discovers an ideal element. Seeing it a second time or more is not rewarded by EPRUM.

The ordered set of results presented to the user who issues a query is a list of pointers to hopefully ideal elements. It is called the list. We suppose that the list is totally ordered to simplify the formal development. Contrarily to standard IR, an item in the list is not a document but provides an access to some parts of the cor-pus. In Web IR, this would be one or more links to web documents, along with a surrogate. In XML IR, this can be a pointer to an XML element, or it can be a list of pointers to a set of elements from the same document, like for example the table of content for a chapter.
In standard IR, the user is assumed to consider every  X  X ocument X  of the list. In fact, the document is a surrogate that can be reduced to a simple link to the document: The user is then supposed to sys-tematically follow that link. While this hypothesis holds in many cases, some new tasks make it unrealistic. In INEX for instance, the Fetch &amp; Browse task consists in retrieving a list of sets of el-ements grouped by document in response to a given query. A list item in this task points to a set of elements belonging to the same article. It would be unreasonable to suppose that the user follows the link to every element of each article: It seems intuitive that the larger the set of elements, the less likely the user considers each of them  X  this is even more true if previously seen elements are not ideal. In Web IR, as pages are sometimes grouped by site, a probability of consideration conditional on former considered ele-ments could be used to model a user that follows only some of the links. The consideration concept also suggests that, besides rele-vance, a valuable information would be whether an element makes the user  X  X eel X  that he could find some relevant information in the same document (XML IR) or in the same web site (Web IR). Figure 1: The ideal elements have a grey background. The user consults the first 5 ranks of the list, 3 of them (bolder lines in the list) leading the user to discover (or more) ideal elements. Ele-ments are all within a same document whose structure is shown with light lines: a is the root node and has three children (b, c and k), etc. Arrows show the browsing behaviour of one partic-ular user. An arrow from the list means that the user browsed to the element from a given rank.

From a considered element, the user can navigate using the cor-pus structure. Links or simple navigation in the document can lead the user to see elements which are not necessarily directly pointed by the list. The context of an element is defined as the set of ele-ments that can be reached through navigation from it and includes the element itself. The exact coverage of the context depends on the collection and the existence of relations between elements. User navigation at a point in the list is restricted to the context of the corresponding entry element, which in turn is determined by the document structure. To model the user behaviour inside the con-text, EPRUM relies on a set of probabilities on simple events of the form  X  X avigating from a list item to an element in the corpus X . In the case of the XML paradigm for example, the probabilities of navigating from a rank to the parent, a descendant or a sibling of a pointed element can be set to values estimated by any adequate method. When the user is over with this exploration, he proceeds to the next entry of the list and repeats the process until his infor-mation need is satisfied.

We also introduce two closely related concepts: We say that a user sees an element when he navigates to it from another element or from the list, and that he discovers an element if he sees it for the first time. The distinction between  X  X iscovered X  and  X  X onsidered X  is important for EPRUM because the system is rewarded only when elements are discovered.

We illustrate the model on the simple example of Fig. 1. In this figure, all the elements belong to a unique document and the con-text of each of these elements is the whole document. A possible user session is described next. We note by F i the number of ideal elements the user has seen while examining the i first items of the list. (1) He browses to element a . Since element a is not ideal F is naught and the user continues to consult the list; (2) He consults element b but again no element in its context. The element is ideal and F 2 = 1; (3) He consults c and this time explores the context, discovering element f which is ideal: F 3 = 2; (4) He consults d , decides to explore its context and discovers f and i .Element i is not ideal, while f is ideal but has already been seen by the user: F still equals 2. (5) He consults e and discovers g and h in its context; both elements are ideal and have not been previously seen, hence F = 4.
This example covers different aspects of our user model. Steps (1) and (2) are similar to the standard user model. Step (3) illustrates how the user can navigate to an ideal element. In step (4), a unique ideal element is retrieved for the second time. Because no new in-formation is discovered, F remains equal to 2. Eventually, step (5) shows how an element can act as an entry point to more than one ideal unit.

We introduce now the probabilistic events used to model the user behaviour. We say that a rank is consulted only if the user reached this rank when searching for ideal elements. An element is seen if it was reached through navigation from a consulted rank. We de-note x  X  S k the fact that the element has been seen by a user that consulted the list up to rank k . We denote P ( k x ) the probabil-ity that the user reaches an element x from rank k . The probability P ( k x ) may depend on the query, the list returned by the eval-uated system, the document collection structure (links, document structure, etc.) and the elements relevance. It is important to note that this probability takes into account all the physical steps taken by the user in order to go from a rank k to element x : For example, if from rank k the user can go to a web page z whichinturnhasa link to x , this is reflected in the probability P ( k x ) elements x for which P ( k x ) &gt; 0isthe context of rank k .
We now illustrate how this probability can be estimated. Sup-pose we have recorded the navigation of several users from a rank k between three elements x , y and z as depicted in Fig. 2. Figure 2: Example of user behaviour on a hypothetical docu-ment. The arrows depict the probability of navigation between elements: 50% of the users navigated from x to y and 80% of them continued to z . 20% of the users did not navigate to other elements from x .

Navigation from k would then be summarised by the following probabilities: P ( k x )= 1, P ( k y )= 1  X  0 . 5 + 1  X  0 . 536, and P ( k z )= 1  X  . 3 + 1  X  0 . 5  X  0 . 8 = 0 . 7.
In this section, we present the main simplifying hypothesis nec-essary to derive a computable formula for EPRUM. We discuss and illustrate its implications.

H YPOTHESIS 3.1. A user consults the context of a rank k in-dependent of his previous navigation: The set of events k xare mutually independent. Formally, for any set of couples { ( we have P (
This hypothesis means that even if the user navigates from e.g. a rank k to a paragraph, it will not give an indication on whether the user navigates from the rank k to the second paragraph. To assess the impact of this hypothesis on the user model, we illustrate it on the example of Fig. 2. Without the simplifying hypothesis, to compute the probability P ( k y  X  k z ) that the user navigates from rank k to both y and z , we would need to add the probabilities of the two possibilities: From k , the user navigates to x and then first to y and then to z (0 . 5  X  0 . 8 = 0 . 4), or first to z and then to y (0 . 3  X  0 . 12 = 0 . 036). The resulting probability is 0 accept the simplifying hypothesis, we can multiply the probability of navigating to y (navigating first by z or not) and to z (navigating first by y or not): P ( k y )  X  P ( k z )= 0 . 7  X  0 . 536 The difference is significant, but less than if we considered only the Figure 3: Rank 1 points to element c. Users can navigate to element a (or b) with a probability of 0.4. Element a is pointed to by rank 3. direct navigation from x to y and z . In this case, the probabilities P ( k y ) and P ( k z ) would be respectively equal to 0 . 5and0 yielding a joint probability P ( k y  X  k z ) of 0 . 15 only.
We see that the simplifying hypothesis captures the fact that a user can first browse from rank k to x , and then to y . Moreover, it simplifies greatly the computation of the probability of the event x  X  S k that a user sees an element x after he consulted the k first ranks of the returned list. We compute this probability here to il-lustrate the implication of the hypothesis. The result will be reused in the section about the EPRUM computation. The event x  X  true iff there is at least one rank from which the user browsed to x . Formally, The hypothesis 3.1 implies that all causes (the user browsed to x from a given rank k ) are independent of each other in terms of their abilities to influence the effect variable (the user has seen x ). This is similar to the  X  X oisy-or X  hypothesis [8] which is often used in prob-abilistic models when an event is the consequence of many causes. Formally, we can show that under hypothesis 3.1 the probability of the event x  X  S i becomes:
This leads to a realistic model whose complexity is linear in terms of the number of elements leading to x . We illustrate the computation of Eq. (1): Suppose the first three ranks of the re-turned list lead respectively 40%, 60% and 100% of users to see the ideal element a as depicted in Fig. 3. After rank 1, the probabil-ity that a random user sees a is 1  X  ( 1  X  0 . 4 )= 0 . 4 rank, the probability is 1  X  ( 1  X  0 . 4 )( 1  X  0 . 6 )= 0 third, it becomes 1  X  ( 1  X  0 . 4 )( 1  X  0 . 9 )( 1  X  1 )= 100% of users would see a after they consult the first three ranks while this would be the case of 76% of them after rank 2. Without the  X  X oisy or X  assumption, the above probability would require the knowledge of the interaction of the different navigations from the three first ranks to a . In practice, the number of such interactions grows exponentially with the number of elements in the context and lead to intractable complexity.

It is easy to show that such a user and relevance model encom-pass the classical IR ones: It is sufficient to set the idealism to be binary, and the navigational probabilities P ( k x ) to 1 if rank k points to x and 0 otherwise. Acquiring the navigational probabili-ties needed by EPRUM is possible through the use of a parametric user model whose parameters would be tuned in order to reduce the discrepancy between the observations and the model predic-Table 1: This table summaries the different situations that might happen with the settings described in the Section 4. The upper part of the table shows the rank where either a or b is first seen. The line labelled PS (Probability of the Scenario) gives the probability (expressed in % of users that would act the same) that such a situation is observed. The line labelled A/ML gives the ratio of the achievement indicator (0 if the re-call cannot be reached) to the minimum search length (set to 3 if the recall cannot be achieved). The E column gives the expected values of A/ML over the different configurations.

PS (%) tions. An example of a parametric model would be P ( k x ( 1 + e  X  d ( k , x ) )  X  1 where d ( k , x ) is the distance (in number of words) between the element pointed to at rank k and x ,and  X  is the user model parameter.
In this Section, we illustrate the computation of precision with the EPRUM metric on the small example illustrated in Fig. 3. The given information need has two ideal answers, the elements a and b . For simplification, we suppose that these elements are highly ideal and each rank of the returned list is a pointer to an element in the corpus. Probabilities are set as represented in the figure.
We want to evaluate the performance of an engine that returns a list that points to elements ( c , d , a ) in that order. The Table 1 gives a summary of the different probabilities of navigation. The first column of the upper table corresponds to the consulted list. The second column evaluates to 0.16 the probability that a user navigates to elements a and b from the first rank of the list returned by the engine, i.e. from a pointer to c . The third column represents the case where a user discovers element a navigating from the first rank and element b when navigating from the second rank. The probability of such a scenario is 0.096 because
P ( navigates from 1 to a )  X  P ( does not navigate from 1 to b The other configuration probabilities are computed likewise. We omitted from the table impossible scenarios like for instance a user that does not see a up to rank 3 (It contradicts the probability 1 of seeing a at rank 3). The probabilities over all scenarios naturally sum to one.

The two tables below the scenarios show the inverse search length multiplied by the achievement indicator ( A/ML ). The column ports the inverse expected number of ranks the user has to consult to reach a given recall value (1 or 2 ideal elements). Its value is com-puted by summing the products of the terms of lines A/ML and PS . We can suppose that the minimum search length is respectively of 1 and 2 over all the possible lists for recall 1 and 2 respectively. Us-ing the formula of Section 2, precision at recall 1 is 1  X  and at recall 2 it equals 2  X  0 . 37 = 0 . 74. These values are far supe-rior to the standard precision-recall estimates (0 . 333 and 0). This is the expected EPRUM behaviour since the first two ranks can lead the user to see both ideal units. In this section, we derive EPRUM, starting from the definition of Section 2 and using the user and relevance models described in the Section 3.

We first introduce some new notations. ML is the minimum number of list items the user needs to consult if he requires %of the ideal units. N is the length of the list and A is the  X  X chieve-ment X  indicator that is equal to 0 if the user cannot reach the recall level . We use the superscript  X  to denote the variables related to the ideal list.

The rank of the list after which the user has just discovered % of the t ideal units is the minimal rank k for which F k is greater or equal to the level multiplied by the total number of ideal units t : Note that by definition before the first rank no ideal units have been found, i.e. F 0 = 0. We first have to suppose that the user behaviour is independent for the evaluated and the ideal lists:
Let us first consider the ideal case. Using the definition of a mathematical expectation and Eq. (2), we can write: where N  X  is the length of the ideal list. The ideal list(s) depends on the specific user model instantiation and its computation can be more or less complex. Note that although there might exist more than one ideal list, it is possible to define one ideal list for any given recall r  X  and hence for any recall level .

Let X  X  take an example to illustrate this point: Let a , b ,and c be three elements; b and c are ideal. Like in Section 4, the list is com-posed of ranks reduced to one pointer to an element in the corpus. The probability of navigating from a pointer x to the pointed ele-ment x is 1. The probability of navigating from a to b (or c )is0.9. For a recall 1, an ideal list would be a simple list restricted to one of the ideal elements, b or c , with an expected length of 1. For a recall of 2, an ideal list would be ( a , b , c ) because 81 % of the users would see two ideal elements after the first rank, 9 % after the second and 10 % after the third  X  thus implying an expected search length of 1.29.

When the number r of ideal elements the user requires is fixed and if we assume that the ideal list is known, it is possible to com-pute Eq. (3). As the number of discovered ideal elements never decreases ( F k &lt; t implies F k  X  1 &lt; t ), we have P t )= P ( F  X  list that gives an access to r ideal elements, i.e. that there is a rank k ( r ) for which F  X 
For the system list, we have to take into account the fact that the user might not be satisfied after having consulted all the list items, that is, he did not see t ideal elements. This happens if F
N &lt; t : The ratio A ML is equal to 0 and thus this case can be ignored in the computation of the expectation. Otherwise, the ratio ML can take the value P (
F k  X  t  X  F k  X  1 &lt; t ) . Following a similar reasoning as for the ideal list, we can compute the expectation for the evaluated list: E A
To estimate the two EPRUM main formulae, Eq. (4) and (5), we need to know how to compute the probability P ( F k = f user discovered f ideal elements. We first decompose it in simpler events related to the individual ideal elements. The user discovered f ideal elements with a probability: where [[ event ]] is 1 (resp. 0) if the event is true (resp. false). It is straightforward to see that the sum  X  x  X  I [[ x  X  S k ]] exists a subset A  X  I of cardinality f for which x  X  S k if and only if x  X  A . We can then rewrite Eq. (6) into:
Using hypothesis (3.1) that implies the independence of the x events, we can express the above expression as: where each term is given by Eq. (1). This sum can be computed in a time quadratic in the number n of elements that were not seen with a probability of one (i.e. elements x such that 0 &lt; P When n is large enough (experiments have shown that n = 10 is enough) the sum can be approximated using a normal law. This can be justified by the Lindenberg-Feller central limit theorem [2]. We don X  X  describe the method here due to space constraints.
EPRUM can now be computed using Eq. (4), (5), (7) and (1).
We compare EPRUM with metrics proposed in XML IR, a very active community for evaluation metrics. INEX is the meeting point of this community where a corpus of XML documents, queries and their associated relevance assessments is constructed since 2002. In the INEX ad-hoc collection, documents have an explicit tree-like structure  X  typically they are composed of a header, followed by a body composed of several sections, etc. One of the major tasks is to retrieve, in answer to a given user X  X  information need, a list of elements of the right granularity (a paragraph, section, etc). The inherent structure of the corpus has important consequences on the evaluation metrics suitability.

Important issues for (XML) IR metrics are near misses and over-lap. It is generally admitted [11] that near misses, i.e. elements close to an ideal, should be rewarded, but less than exact answers, because they can act as entry points leading to one or more ideal el-ements. Early attempts [7, 9] to generalise the PR metric for XML IR tried to reward near misses by assigning  X  X ome X  relevance to the elements nearby an ideal one. The limits of such a strategy for XML IR is now well known [14, 11]: Adding elements (the near misses) to the so-called  X  X ecall base X  implies that systems that re-turn only ideal elements don X  X  achieve a 100 % recall. Both ideal elements and near misses have to be returned to achieve such a re-call.

These generalisations of PR for XML IR are commonly consid-ered to be  X  X verlap positive X   X  using the terminology proposed by [21], which means that they reward system for retrieving twice the same ideal element, either directly or indirectly, and that the to-tal reward for that ideal element increases with the number of times it is retrieved. Overlap neutral and negative is metrics are defined accordingly.

Another interesting metric is Tolerance To Irrelevance (T2I) [20] proposed for Video and XML IR. The core of this proposal is a user model considering overlap and near misses. The user consults the returned elements until he finds relevant information or until his tolerance (counted in number of words for example) to irrelevant material is reached. In both cases, he proceeds to the next element in the list. The model presents however some theoretical incon-sistencies when the same ideal element can be reached from two elements in the list and precision is computed under the assump-tion that an element leads to at most one ideal element. Moreover, the relevance score of an element drops from one to zero depending on a preset number of words that precede it, which seems too strict a behaviour for our purpose. Note that the T2I user model can be viewed as a particular instantiation of the EPRUM user model.
The xCG (eXtended Cumulated Gain) metric family [10] was in 2005 the official INEX metric. xCG has been derived into two other metrics, namely nxCG (normalised xCG) and EP/GR (effort-precision/gain-recall). The latter metric has a definition which is close to EPRUM, as it is defined as the ratio of minimum lengths. We compare EPRUM with EP/GR in the next section. The xCG metrics partially manage to overcome the above mentioned precision-recall limitations while maintaining a simple definition. With xCG metrics, near misses can be taken into account without expanding the recall base: As for the EPRUM relevance model, xCG relies on the definition of a set of non overlapping ideal elements. The main difference between xCG metrics and EPRUM is that the latter is de-rived from a formal user model whereas this model is implicit in the former. This has some consequences on the stability of the metric and also causes some inconsistencies in the metric: For EPRUM the  X  X ain X  is only related to the discovery of an ideal element  X  an element can only be discovered once, which makes it naturally overlap neutral. For xCG metrics, the gain is not a well defined concept, especially for near-misses elements.
To assess a metric, several issues need to be addressed. First, one can show that the metric measures what it should measure. The best demonstration would rely on user experiments, but such data is not yet available. One can partly justify it through the theory underlying the metric: In EPRUM a well defined user model gives insight on what is measured. The faithfulness of the measure can also be proved experimentally. Using real system runs would be of no use since their behaviour is not sufficiently controlled. Another approach taken by [14] is to use synthetic runs constructed in a controlled way. Second, a metric should be stable and sensitive [3, 18]: What is the confidence on a difference in the evaluation of
EP/GR EPRUM m = 0 . 1 to 0.9. two or more systems and consequently on the superiority of one of them?
In this Section, we investigate only the first issue and under-line the fact that xCG gives different results while its implicit user model is similar, and its ideal set of elements exactly identical.
In order to illustrate the metric behaviour on real world data, we performed some experiments using the INEX 2005 dataset. We used a simple model where each rank k is composed of a link to an element x k in an XML corpus. Within that corpus, the only action that a user can make is going up or down in the XML tree. This is similar to most of the implicit user models proposed in XML IR evaluation, and in particular to the official INEX 2005 xCG metric we compare EPRUM with. We heuristically set the navi-gational probabilities as follows to the ratio length ( x where the length is the number of characters the element contains. The intuition is that the more the elements share common content, the more likely the user is going to browse from one to another. (Other, more realistic models exists for XML as for example [20]). The other metric parameters were set so that the two metrics be as close as possible.

With respect to this user model, generating an ideal run from the ideal list of elements is quite simple: It is sufficient to use a list composed of the ideal elements ordered by decreasing probability of idealism. The collection we used is composed of the 29 ad-hoc topics of the INEX CO+S task along with their associated relevance assessments. From each of these assessments we generated an ideal run as described in [10]: Each of these runs is  X  X deal X  for both xCG and EPRUM (with the user model described above) and does not contain any overlapping element. We then created nine new runs from it by applying some random transformation. For a given element of the list, we choose a direction (up or down) with an equal probability. Starting from this element in the XML structure, we repeat the following process with a probability 1  X  m of stopping at each loop ( m is the probability to  X  X ove X ): If going up (resp. down), we replace the current element by its parent (resp. one of its children). The list element is then replaced by the current element we have moved to. The whole process is done for every element of the list. We chose to move only along the ancestor-descendant axis because of the chosen user model.
 In Fig. 4, we plotted EPRUM recall-precision graphs and xCG EP/GR graphs for m varying from 0.0 (ideal run) to 0.9 with 0.1 steps. We expected that the run performance would degrade smoothly from 0 to 0.9 (with a perfect performance at m = 0). This is the case for both EP/GR and EPRUM. The main difference between the two evaluation measures is the stability at different recall points of EPRUM over EP/GR. The curves with the higher randomisa-tion (0.7 to 0.9) get a near null precision for a recall superior to 0.6 for EP/GR, whereas this is not the case for EPRUM. This could be explained by a difference in the user model, but it is also intrinsic to the xCG metrics where a given recall is achieved or not, whereas in EPRUM it can be achieved by a given percentage of the users. This also explains the smoother decrease of the different curves. We performed some further test comparing xCG and EPRUM.
 We used 45 runs from the INEX 2005 participants and the 29 topics of the  X  X O.Focused task X  which aims at retrieving the non over-lapping ideal answers to an information need. We computed the mean average precision (MAP) for every topic of every run, lead-ing to a total of 645 values. We first compared MAP of EP/GR and EPRUM. The Pearson X  X  correlation coefficient was of 0.75. A more detailed analysis showed that 48 top ranked values are highly cor-related (around 0.9) while it is not the case for others (0.65). This implies that even though they share a common user model and the same ideal base, EPRUM and EP/GR behave differently.

Other user behaviour are realistic but not represented, even im-plicitly, in the xCG metrics. If we compare a model where an ideal element is replaced by one of its siblings, for example, EPRUM user model could be easily extended so as to observe the same smooth degradation of the PR curves, while for xCG the extension is not straightforward. This is an important difference because we believe that systems that return a nearby paragraph instead of the ideal paragraph should be rewarded, especially in a context where users disagree on which elements are ideal and where ideal ele-ments can be small in size.
We presented a new metric based on a generic user model. EPRUM reduces to standard precision recall (PR) when its parameters are set to mimic the classical IR model. We distinguished the notion of idealism from the notion of relevance. We showed how to com-pute the precision at a given recall level. Note that even if we don X  X  present the formulae in this paper, the standard precision at a given document (or rather: rank) cut-off value can be estimated likewise. EPRUM can be easily used in new IR paradigms, like XML IR, Web IR, Video IR, and passage retrieval by setting the user model parameters accordingly. For Video IR and passage retrieval, EPRUM can be set to a T2I-like user model which is quite adapted and corresponds to some common assumptions about the user be-haviour [20]. In Web IR, we could use the Page-Rank hypothe-sis [13]: A user will follow an hyperlink with a probability in-versely proportional to the number of links in the consulted Web Page.

In the context of XML IR, EPRUM is a natural extension of xCG and T2I. Being well-defined, it resolves some of the inconsistencies present in these metrics. Moreover, EPRUM can be easily extended to new user models. Result lists are not restricted to a mere list of document or element surrogates but can include list of elements grouped by articles like the Fetch and Browse task of INEX. For all metrics save T2I, which shares the same definition as EPRUM, the interpretation of the evaluation results is not straight-forward. EPRUM reports the discovery of ideal elements, which has a clear semantic. At a given recall level, or at a given rank, EPRUM is the average amount of average extra effort, measured in number of list items, that the user has to consent in order to discover as many ideal elements as an ideal system. An interesting exten-sion would be to consider time instead of list items as a controlling factor.

Another important contribution of EPRUM is that items in the returned list can be complex objects. For instance, each item could be a list of elements belonging to the same document. For the other metrics the evaluation of such a task is not as straightforward be-cause the list can only be composed of element while the EPRUM definition only relies on the navigation from list items and allow a natural evaluation of such a task.

With respect to standard IR, EPRUM introduces naturally the concept of graded relevance which was one of the focus of Cumu-lated Gains (CG) metrics [12]: For EPRUM, a judgement between 0 and 1 corresponds to the percentage of users that, given the same information need, would judge relevant the document. EPRUM could thus be used as a natural extension of precision-recall in IR when graded judgements are used. More investigation is needed to compare the behaviour of EPRUM with CG metrics.

For classical IR, ranking documents by decreasing probability of relevance is optimal [16]. With respect to the new IR paradigms, this raises the question of whether we could separate the search task in two: First identify the set of ideal elements and then compute how to present the results to the user. Search engines would be in charge of the first task, while the second task would be the realm of metrics.

Future work includes user experiments to determine the param-eters for some XML IR tasks and experiments to investigate thor-oughly the EPRUM stability and its differences with other metrics. We also plan to work on specifying more in detail what are the conditions on the user model that should be enforced to generate a single ideal list, or on how to compute (or approximate) the min-imum search length over all possible lists without computing the ideal list. [1] R. Baeza-Yates and B. Ribeiro-Neto. Modern Information [2] P. Billingsley. Probability and Measure . Wiley, New York, [3] C. Buckley and E. M. Voorhees. Evaluating evaluation [4] C. Cleverdon. The cranfield tests on index language devices. [5] N.Fuhr,M.Lalmas,andS.Malik,editors. INEX 2003 [6] N. Fuhr, M. Lalmas, S. Malik, and G. Kazai, editors. INEX [7] N. G X vert, G. Kazai, N. Fuhr, and M. Lalmas. Evaluating the [8] D. Heckerman and J. S. Breese. A new look at causal [9] G. Kazai. Report on the INEX 2003 metrics group. In Fuhr [10] G. Kazai and M. Lalmas. Inex 2005 evaluation metrics. In [11] G. Kazai, M. Lalmas, and A. P. Vries. The overlap problem [12] J. Kek X l X inen and K. J X rvelin. Using graded relevance [13] P. Lawrence, S. Brin, R. Motwani, and T. Winograd. The [14] B. Piwowarski and P. Gallinari. Expected ratio of relevant [15] V. V. Raghavan, G. S. Jung, and P. Bollmann. A critical [16] S. E. Robertson. The probability ranking principle in IR. [17] T. Saracevic. Relevance reconsidered. In Proceedings of the [18] E. M. Voorhees. Variations in relevance judgments and the [19] E. M. Voorhees. Common evaluation measures. In The [20] A. Vries, G. Kazai, and M. Lalmas. Tolerance to irrelevance: [21] A. Woodley and S. Geva. Xcg overlap at inex 2004. In Fuhr
