 The sharp increase of RFID tags and readers require dedicated middleware solutions that manage readers and process event data. In this paper, we demonstrate a RFID middleware called LIT ALE Manager system with key featur es and also illustrate overall functional components of the middleware system with implementation techniques.
 H.3.3 [ Information Storage and Retrieval ]: Information Filtering , C.3 [ Special-Purpose and Application-Based Systems ]: Real-Time and embedded systems Algorithm, Management, Pe rformance, Verification RFID System, LIT ALE Manager, Performance. RFID technology employs radio-fre quency waves to transfer data between readers and tag attach to movable objects, thus it is possible to create a physically linked world in which every object is numbered, identified, cataloge d, and tracked[1]. The RFID systems are widely adopted in industrial utilization and business applications day by day. In RFID system, various application programs are received a lot of raw tag data from various envir onments. It is inefficient and resource consuming for every application program to process so much raw tag data. Therefore, RFID middleware which can bridge raw tag data and user query e fficiently between heterogeneous readers and various application programs comes into existence. RFID middleware not only collects tag data from the readers connected to it but also filters redundant and meaningless data it collects. The LIT ALE Manager is designed to support huge stream of tag event from the numerous readers connected to it. Our middleware can support various types of readers that are compatible with RP [2] and LLRP [3]. For interoperability, our system is fully compatible with the EPCglobal Application Level Event (ALE) Specification 1.1[4] by implemen ting five main APIs (Reading APIs, Writing APIs, Tag Memory APIs, Access Control APIs and Logical Reader APIs). LIT ALE Manager has already passed the EPCglobal certification on 22th, December, 2008 [5]. We aims to demonstrate an effective RFID middleware which filter tag event stream efficiently and writes tag data completely in this work. The detailed information is available by clicking the following URL: http://dblab.pusan.ac.kr/zboard /zboard.php?id=eng_rfid_sensor LIT ALE Manager runs on the platform which called Sun Application Server 9.0. And this system is implemented by the language of J2SE 1.6. Multiple features can be viewed in our middleware. Our middleware system supports multiple types of tags such as passive tag, semi -passive tag and active tag and different types of readers form various vendors, and you can even integrate new readers at runtime. Functions such as tag data filtering, tag memory access, executing the operation to the tag, reader management, and access controls are available. Even more, we implement virtual readers and virtual tags for test in large quantities. The users of our middleware have a lot of freedom to do what they want based on the user-defined Tag Memory. Users can also not only define the Logical Reader but also to manipulate it and its properties. In order to rapidly process the incoming stream data, CQI (Continuous Query Index) [6] is built on the registered queries. Because the tag data format is complicated and the query condition includes pattern syntax such as a.[b-c].[d-e]. The building and insertion of incoming query into index is very time consuming as the size of index grows. Our middleware implements RFID specific CQ index with an efficient transforming scheme, this scheme will transform the EPC pattern intervals from a set of segments to an aggregated single object, and this scheme also makes the bu ilding and insertion of the query data to CQ index more efficient than any other currently existed CQ index. RF communication is highly volatile , and the connection could be easily lost or broken. Because of disconnection problem of RF communication during tag data access, a write operation to a tag may result in partial write or tag state becomes indeterminate. Our LIT ALE Manager uses the unsure manager which suspends the incomplete operation and resumes wh en the tags are re-observed. We use a CQ index scheme to efficiently detect the tag X  X  re-observation from arbitrary reader, and resume the unsure operations. Our proposed technique makes that the tag memory can be treated as a persistent storage media rather than merely a simple storage. Figure 1 System Architecture of LIT ALE Manager In order to provide high flexibility and independency in function, our system is implemented in a modularized way as Figure 1. Once an ECSpec is defined by the user, this ECSpec will be sent to the Listener module, then it will goes to the ALE Controller (EC Controller corresponding to the ECSpec), after that it goes to ECReportManager. Another flow is that the tag data will come from the Real Reader Controller and send to the Message Dispatcher (it will go to the Event Synthesizer and generate tag patter filter), the successor will be sent to the Operation Executer Manager and finally the report which will be sent to user through the Logger . To demonstrate the LIT ALE Manage r, we construct two kinds of demonstration scenarios. Both Real demonstration and virtual demonstration are employed in our plan. As the constraints of the environment and time, in real case, we computer which installed with our LIT ALE Manager. And we only demonstrate the READ and WRITE (other operations like KILL, LOCK will not show here) ope rations with the tags (class 1 gen 2). In virtual case, we aim to show our middleware can not only read and write successfully but also efficiently in case multiple readers and large amount of tags are using. We define the ECSpec which semantically means to read all the tag we observed, and corresponding report can be show as ECReport. This process will be totally monitored and can be seen in the monitoring program called ALE Monitor (Figure 2). Several cases are defined to test our middl eware by setting different scales of the tag number. The smaller Report Time and the larger processed tag count concerns as better performance. In order to show the writing operation, we define the CCSpec which semantically means to write the price to the products attached with tag, we set 1000 tags to be written in one time (or one Command Cycle). Firstly, we measure the time needed for completing the writing operation to all the tags by observing the success report in the ALE Monitor. Secondly, we define same CCSpec as the first case, but we move the 20% (50% or 70%) of the tags from reader range when they have not been written. Then we let all the tags to be moved into reader range again, and compare the operation time needed in current situation (which the tags here is hybrid of written tags and un-written tags) to the time needed in first case. When we move all the tags into the reader range for a second time, the need ed time is proportional to the number of tags which we moved away from reader range when they have not been written. Figure 2 ALE Monitor [1] Roy, W.: An Introduction to RFID Technology. IEEE [2] EPCglobal Inc., Reader Protocol [3] EPCglobal Inc., Low Level Reader Protocol [4] EPCglobal Inc., The Appli cation Level Event (ALE) [5] EPCglobal Inc., Certification of LIT ALE Manager http:// [6] K. L. Wu, S. K. Chen and P. S. Yu,  X  X rocessing Continual 
