 With the rapid growth of location-based social network-s, Point of Interest (POI) recommendation has become an important research problem. However, the scarcity of the check-in data, a type of implicit feedback data, poses a se-vere challenge for existing POI recommendation method-s. Moreover, different types of context information about POIs are available and how to leverage them becomes an-other challenge. In this paper, we propose a ranking based geographical factorization method, called Rank-GeoFM, for POI recommendation, which addresses the two challenges. In the proposed model, we consider that the check-in fre-quency characterizes users X  visiting preference and learn the factorization by ranking the POIs correctly. In our mod-el, POIs both with and without check-ins will contribute to learning the ranking and thus the data sparsity problem can be alleviated. In addition, our model can easily incorpo-rate different types of context information, such as the ge-ographical influence and temporal influence. We propose a stochastic gradient descent based algorithm to learn the fac-torization. Experiments on publicly available datasets under both user-POI setting and user-time-POI setting have been conducted to test the effectiveness of the proposed method. Experimental results under both settings show that the pro-posed method outperforms the state-of-the-art methods sig-nificantly in terms of recommendation accuracy.
 H.3.3 [ Information Storage and Retrieval ]: Information Filtering Collaborative Filtering; Factorization Model; Ranking
Recently, location-based social networks (LBSN) have e-merged, such as Foursquare. These online systems enable c  X  people to check in and share their experiences with friends when they visit a point of interest (POI), e.g., restaurant, and shopping mall. These networks are growing at an un-precedented pace. Taking Foursquare as an example, it had attracted 45 million users with more than 5 billion check-ins until January 2014. The huge volume of data contains valu-able information about POIs, and human preference, which can be exploited for POI recommendation [1].

POI recommendation aims at learning the users X  visiting preferences and recommending a user the POIs that s/he may be interested in but has never visited . This task is im-portant and meaningful, as it not only helps local residents or tourists to explore interesting unknown places in a city, but also creates the opportunities for POI owners to increase their revenues by finding and attracting potential visitors.
POI recommendation is challenging for two reasons. First, the check-in data in LBSN is very sparse, and thus recom-mendation methods suffer from the data scarcity problem. The check-in data is usually represented as a user-POI ma-trix, shown as in Figures 1(a) and 1(b). As we will see in the experiments, the density of check-in matrix is usually less than 0 . 5%. Moreover, when considering context-aware POI recommendation, the user-POI check-in data (matrix) needs to be separated and represented as a tensor, e.g., as shown in Figures 1(c) and 1(d) for time-aware POI recommenda-tion. This will make the data more sparse, and the density of the check-in tensor in experiments is less than 0 . 05%, which is extremely small compared to 1 . 2% for Netflix data [2]. Worse still, the check-in is a type of implicit feedback [11], which makes the POI recommendation more difficult. Dif-ferent from conventional movie rating data, where users ex-plicitly denote their  X  X ike X  or  X  X islike X  to an item with differ-ent rating scores, the check-ins offer only positive examples that a user likes, and the POIs without check-ins, marked as  X ? X  in Figures 1(a) and 1(c), are either unattractive or undiscovered but potentially attractive. In other words, we need to infer his/her preference and non-preference based on the check-in data. Most of the existing POI recommen-dation methods [22, 3, 14, 9, 7, 12] overlook data scarcity and implicit feedback facts, and adapt conventional memory or model-based collaborative filtering for POI recommenda-tion. Therefore, these methods suffer from the data scarcity problem.

Second, in POI recommendation, different types of con-text information are available, e.g., geographical coordinates of POIs, time stamps of check-ins, friendship of users, cat-egories of POIs, etc. It is important to exploit context in-formation to improve the recommendation accuracy. For Fi gure 1: An example of check-in data of three users in two scenarios. example, geographical coordinates, as an important type of context information which is not available in conventional recommendation tasks, are exploited for POI recommenda-tion [22, 15, 3], since users have a much higher probability to visit nearby POIs [22, 15]. Previous work [22, 3, 12, 11] develops different approaches to exploiting the differen-t types of context information. However, these approaches are usually developed for a particular type of context and it is difficult to generalize them to handle another type of context information.

In this paper, we propose a new ranking based factor-ization method for the POI recommendation problem. We consider obtaining factorizations in a ranking way because of two reasons: on the one hand it works better for implic-it feedback data [16], and on the other hand the sparsity problem can be alleviated because both visited (positive ex-amples) and unvisited POIs will contribute to the learning of a ranking function. Specifically, we assume that the high-er the check-in frequency is, the more the POI is preferred by a user; and the unvisited POIs are less preferred than the visited ones. Instead of fitting the check-in frequency as conventional matrix factorization based methods do, we fit the users X  preference rankings for POIs to learn the latent factors of users and POIs. In our proposed method, the un-visited POIs also contribute to the learning, which will help alleviate the sparsity problem.

In addition to addressing the data scarcity issue, our fac-torization model can easily incorporate different types of context information. In the proposed method, we compute the recommendation score of a POI by the sum of pair-wise interaction scores between it and each context variable considered. This enables us to easily incorporate different types of context information by simply including more inter-action scores. The pairwise prediction also unifies the way to handle matrix and tensor data. That is, the POI recom-mendation and context-aware POI recommendation can be handled with one unified framework.

Our contributions in this paper can be summarized as follows:
The rest of this paper is organized as follows: In Section 2, we briefly review related work. In Section 3, we introduce the proposed method. The experimental results are given in Section 4. Finally, we conclude the paper in Section 5.
POI Recommendation . Memory-based collaborative filtering (CF) techniques, such as user-based CF and item-based CF, are exploited for POI recommendation. Ye et al. [22] adopt linear interpolation to incorporate both the social and geographical influences into the user-based CF frame-work for POI recommendation. Their experimental results show that user-based CF outperforms item-based CF for POI recommendation, incorporating the geographical influ-ence into the user-based CF model can significantly improve the recommendation accuracy, and the social influence has little impact on the performance. Levandoski et al. extend item-based CF method by considering the travel distance as penalty [9].

Memory-based CF methods easily suffer from the data s-parsity problem, since the user-user or item-item similarities need to be calculated based on common check-ins. When the check-ins are scarce, two users or items will share very few common check-ins and thus the resulting similarities are unreliable for making effective recommendations.
Model-based CF techniques are also exploited for POI rec-ommendation. Noulas et al. [14] find that matrix factoriza-tion (MF) performs worse than user-based CF and item-based CF for POI recommendation. In their work, conven-tional MF method for explicit feedback data is applied to POI recommendation, which thus is not suitable and delivers bad performance. Based on the observation that individual X  X  check-in locations are usually around several centers, Cheng et al. [3] introduce a Multi-center Gaussian Model to com-pute the geographical influence and then combine it heuris-tically with MF for POI recommendation. In this approach, M F is performed by fitting nonzero check-ins only and thus it suffers from the data sparsity issue easily. Liu et al. [12] propose a geographical probabilistic factor analysis frame-work, namely GTBNMF, which incorporates geographical influence and textual influence based on the Bayesian Non-negative Matrix Factorization (BNMF). However, the BN-MF is performed by fitting both zero and nonzero check-ins, which might not be reasonable because zero check-ins may be missing values and should not be fitted directly. All these factorization methods do not exploit the implicit feedback property of POI recommendation.
 Recently, considering the check-ins as implicit feedbacks, Lian el al. [11] develop a model, namely GeoMF, based on Weighted Matrix Factorization (WMF), and the geographi-cal influence is incorporated into WMF. The method fits the nonzero check-ins by using large weights and zero check-ins by using smaller weights. Although assigning large weights can highlight nonzero check-ins, directly fitting zero check-ins may not be very reasonable because zero check-ins may be missing values. Moreover, because of the limitation of WMF, it is not easy to generalize the method to other types of context information.

Context-aware POI recommendation . Most of the aforementioned methods for POI recommendation exploit the geographical influence in making recommendations. How-ever, their approaches of handling the geographical influence cannot handle other types of context information. Time is another important type of context, and time-aware POI rec-ommendation aims to recommend POIs for a user at a giv-en time. Yuan et al. propose a method called UTE+SE, which extends the user-based CF to incorporate both the temporal and geographical effects with a linear combination framework [24]. Yuan et al. further present a graph based method, called BPP, for time-aware POI recommendation [25], which makes recommendations by preference propaga-tion on a graph constructed from the check-in data. BP-P [25] performs better than UTE+SE [24]. In addition, Gao et al. [7] study the temporal effect on the POI recom-mendation, but not the time-aware POI recommendation. They develop a regularized nonnegative matrix factorization method but they do not consider the geographical influence.
Other types of contexts utilized in POI recommendation include category of POI [13], text description of POI [23, 12, 10, 8, 26], and currently-visited POI [4, 6].
Bayesian personalized ranking (BPR) [16] is a famous ranking-based objective criterion, which can produce promis-ing performance for implicit feedback problems combining with matrix factorization model. BPR learns the ranking models based on pairwise comparison of items such that the Area Under the ROC Curves (AUC) can be maximized. It gives equal weights to each item pair [19, 21]. Ordered Weighted Pairwise Classification (OWPC) [20] is another recently proposed loss metric for ranking. The method con-siders ranking as a set of pairwise classification problems and emphasizes the classifications at top-N positions by assign-ing higher weights. OWPC has been successfully applied in text retrieval [20] and image annotation [21].

In this paper, we consider the POI recommendation based on the OWPC criterion. Our proposed method differs from the existing approaches [20, 21] in two aspects. First, ex-isting OWPC is developed for ranking problem with binary U t he set of users { u 1 , u 2 ,  X  X  X  , u |U| } L the set of POIs {  X  1 ,  X  2 ,  X  X  X  ,  X  |L| } T the set of time slots { t 1 , t 2 ,  X  X  X  , t |T| } L u the set of POIs that user u has visited X = [ x u X  ] a |U| X |L| user-POI check-in matrix X = [ x ut X  ] a |U| X |T| X |L| user-time-POI tensor D 1 the user-POI pairs: { ( u,  X  ) | x u X  &gt; 0 }
D 2 the user-time-POI tuples: { ( u, t,  X  ) | x ut X  &gt; 0 d (  X ,  X   X  ) the distance between POIs  X  and  X   X 
N k (  X  ) the set of k nearest POIs of  X  y u X  recommendation score of POI  X  for user u v alues, i.e., relevance or irrelevance, while in this paper we extend the objective function to rank POIs with different visiting frequencies, and provide the solutions for stochastic gradient descent optimization. Second, we develop a gener-al factorization method for POI recommendation, which is able to exploit different types of context information.
In this section, we present the proposed ranking based factorization method for POI recommendation. We first formulate the POI recommendation problem by a ranking objective function, and then introduce how to optimize it. Finally, we generalize the model for time-aware POI recom-mendation.
 We first summarize the notations used in this paper in Table 1. Then the POI recommendation problem is defined as follows: definition 1. POI recommendation : given a user u , we recommend the POIs that s/he will like to visit, and are not in L u .
In this subsection, we formulate our objective function for POI recommendation. Due to the sparsity of check-in data, we design objective function by fitting user X  X  prefer-ence rankings for POIs, instead of fitting his/her check-in frequencies as traditional factorization methods do. First, we need to infer a user X  X  preference rankings for POIs based on his/her check-in data. Intuitively, we assume that the higher the check-in frequency is, the more the POI is preferred by a user; and the unvisited POIs are less preferred than the visited ones. In other words, for a given user u , POI  X  should be ranked higher than POI  X   X  if x u X  &gt; x u X   X  , where x u X  denotes the frequency that user u visited POI  X  .
Based on the intuition, we develop a method to measure the incompatibility between the inferred rankings and the rankings produced by a factorization model. In particular, for a given user u and POI  X  , the incompatibility can be measured by:
Incomp ( y u X  ,  X  ) = where I (  X  ) is an indicator function, I ( a ) = 1 when a is true, and 0 otherwise;  X  is a positive number; y u X  denotes the recommendation score of POI  X  for user u , which will be ca lculated by a factorization model in this paper. We can see Eq. (1) counts the number of POIs that are supposed to be ranked lower than  X  for user u according to the check-in data, but ranked higher than  X  by the factorization model. Note that  X  -margin is used to compute the rankings for the factorization model, i.e., we consider that  X   X  is ranked higher than  X  for user u only if y u X  &lt; y u X   X  +  X  . The Incomp ( y measures the number of POIs that are incorrectly ranked higher than  X  for user u , and we call it  X  X anking incompati-bility X  in this paper.

Next, we design our preference ranking objective function for learning a factorization model. Specifically, a good fac-torization method should minimize the ranking incompati-bility as much as possible, and thus we propose the following objective function for minimizing: where E (  X  ) is a function used to convert the ranking incom-patibility Incomp ( y u X  ,  X  ) into a loss: and we define E (0) = 0.

In Eq. (2), we aggregate the losses incurred for all the user-POI pairs in D 1 to compute the overall loss. We note that Incomp ( y u X  ,  X  ), according to Eq. (1), is always equal to zero for the user-POI pairs ( u,  X  )  X  X  X  1 . Following OWPC [20, 21], we adopt a smooth weighting scheme to convert Incomp ( y u X  ,  X  ) into a loss. Specifically, the function E ( r ) in Eq. (3) embodies such a conversion. It can be seen that E ( r ) calculates the sum over losses at each rank position (from 1 to r ) for the incorrectly-ranked POIs, where each position i is assigned with a loss 1 /i . For example, assume we have Incomp ( y u X  ,  X  ) = 3, i.e., three POIs are incorrectly ranked higher than POI  X  for user u . The loss for this pair ( u,  X  ) is thus given by E (3) = 1 + 1 2 + 1 3 .
One merit of our objective function is its ability to over-come the data sparsity issue. According to Eq. (1), the rank-ing incompatibility of a POI  X  for a user is determined by all the other POIs  X   X   X  L , which are mostly unvisited POIs (because a user often visits very few POIs). Therefore, the unvisited POIs also contribute to learning the model, while they are ignored in conventional MF. Hence, by leveraging the objective function, we can address the sparsity problem of check-in data, without directly fitting zero check-ins.
In this subsection, we propose a geographical factor-ization method for calculating the recommendation score. Our factorization model is capable of characterizing the us-er X  X  preferences over POIs. In addition, it also incorporates the influence of the geographical context for POI recommen-dation. On the one hand, we parameterize the latent factors of users and POIs into a K -dimensional space as matrices U (1)  X  R |U| X  K and L (1)  X  R |L| X  K , respectively. They are used to model the user X  X  own preference as traditional ma-trix factorization methods do. On the other hand, we intro-duce one extra latent factor matrix U (2)  X  R |U| X  K for users, and employ U (2) to model the interaction between users and POIs for incorporating the geographical influence. To this end, we further construct an |L| X |L| geographical influence matrix W , where w  X  X  X   X  is the probability that POI  X  is visited given that POI  X   X  has been visited. By following previous s-tudies [22, 3, 12], we set w  X  X  X   X  = (0 . 5+ d (  X ,  X   X  )) and 0 otherwise. Here we consider only k -nearest neighbors N k (  X  ) of each POI  X  . The intuition behind the formula is that users usually tend to visit nearby POIs. We normal-ize each row of the matrix W such that because it represents the influence probabilities.
Let  X  = { U (1) , L (1) , U (2) } denote the parameters of our geographical factorization model. We will present the pro-posed method of learning these parameters in Section 3.2. Suppose that these parameters are already learned. Given user u and POI  X  , we compute recommendation score y u X  as follows: where operator  X  denotes the inner product, and u (1) u rep-resents the u -th row of matrix U (1) . Similar notations are used for other matrices. In Eq. (4), the first term models the user-preference score , while the second term models the geographical in uence score that a user likes a POI because of its neighbors.

To avoid the overfitting problem, we constrain the latent factors of our model into a ball, which acts as a regularizer [21]. Specifically, we have the following constraints: where C &gt; 0 and 0  X   X   X  1 are hyperparameters. We constrain the latent factors from U (1) and L (1) into a smal-l ball with radius C , and constrain the latent factor from U (2) into a smaller ball with radius  X C . Here, we introduce the hyperparameter  X  to balance the contributions of user-preference and geographical influence scores. Using basic al-gebra, we have | a  X  b | X  X  X  a  X  2  X  b  X  2 for any two vectors a and b . Thus, we know that the user-preference score u (1) u  X  is always in [  X  C 2 , C 2 ]. As we have  X  graphical influence score u (2) u  X  [  X   X C 2 ,  X C 2 ]. As a result, tuning the hyperparameter  X  can balance the contributions of user-preference and geographi-cal influence scores to the final recommendation score.
Next we present the proposed method of learning model parameters  X  such that O in Eq. (2) is minimized. As O is computed by summing the loss for each user-POI pair, we adopt the stochastic gradient descent (SGD) method for op-timization. That is, we aim to minimize E ( Incomp ( y u X  given each training instance ( u,  X  )  X  D 1 . However, there are two difficulties: (1) E ( Incomp ( y u X  ,  X  )) is non-continuous and indifferentiable, which makes it hard to optimize; (2) we need to know Incomp ( y u X  ,  X  ) for optimization; however, cal-culating it is time-consuming. Next we introduce how to address the two issues.
In order to make E ( Incomp ( y u X  ,  X  )) continuous over pa-rameters  X , we rewrite it as follows: = E ( Incomp ( y u X  ,  X  ))  X  E ( Incomp ( y u X  ,  X  )) where L ( u,  X  ) := {  X   X  | I ( x u X  &gt; x u X   X  ) I ( y u X  and s ( a ) := 1 1+exp(  X  a ) is the sigmoid function, which is used to approximate the indicator function. Based on the rewrit-ing, we can compute the stochastic gradient for updating  X . Specifically, we have  X  E ( Incomp ( y u X  ,  X  )) = E ( Incomp ( y u X  ,  X  )) note that Eq. (9) is not a standard gradient computation, because E ( Incomp ( y u X  ,  X  )) and Incomp ( y u X  ,  X  ) are also re-lated to  X , but we do not consider their derivatives. Our analogous gradient calculation here follows the idea in [21]. Although the stochastic gradient can be calculated by Eq. (9), it is infeasible in practice. This is because both the sum-mation and Incomp ( y u X  ,  X  ) in Eq. (9) require to compute the recommendation scores of all POIs as Eq. (4), which costs O ( K |L| k ) operations and is time-consuming.
In the next subsection, we introduce a fast learning scheme to address the issue.
Our key idea of fast learning is to eliminate the summation and estimate Incomp ( y u X  ,  X  ) with a sampling method.
Let us first revisit Eq. (8). We can see from the first equality in Eq. (8) that only incorrectly-ranked POI, i.e., the POI  X   X  satisfying I ( x u X  &gt; x u X   X  ) I ( y u X  &lt; y contributes to the loss E ( Incomp ( y u X  ,  X  )). Thus, Eq. (8) can be reinterpreted as an expectation of the loss incurred by a set of incorrectly-ranked POI samples, where each POI sample  X   X  incurs a loss: and each POI sample has the probability 1 I ncomp ( y be chosen. This motivates us to approximately calculate the stochastic gradient by sampling one incorrectly-ranked POI. In this case, we have which is an approximation of Eq. (9). Apparently, the sum-mation is eliminated.
 To calculate gradients by Eq. (11), we still need to know Incomp ( y u X  ,  X  ). We compute its approximate value by sam-pling one incorrectly-ranked POI. Specifically, given a user-POI pair ( u,  X  ), we repeat sampling one POI from L until we obtain an incorrectly-ranked POI  X   X  such that I ( x u X 
A lgorithm 1: Rank-GeoFM x u X   X  ) I ( y u X  &lt; y u X   X  +  X  ) = 1. Let n denote the number of sampling trials before obtaining such a POI  X   X  . Apparent-ly, n follows a geometric distribution with parameter p = cal distribution with parameter p is 1 p , we have n  X   X   X  different problem.

By using the estimation, we rewrite Eq. (11) by: Here E gradient. When n is small, the gradient will have a large magnitude, which is reasonable because a small n implies that Incomp ( y u X  ,  X  ) is large, and in this case the parame-ters should be updated with large steps. Similarly, when n is large, we will obtain a reasonable gradient with a small magnitude. With Eq. (12), the SGD based optimization is performed as follows: where  X  is the learning rate.

Using the gradient calculation in Eq. (12) can gain sig-nificant speedups. The complexity of Eq. (9) is O ( K |L| while the complexity of Eq. (12) is O ( Knk ). In general, we have n  X  |L| at the start of training and n &lt; |L| when the training reaches a stable phase. At the beginning, the model is not well-trained and thus Incomp ( y u X  ,  X  ) is often large, which leads to a very small n , i.e., n  X  |L| ; when the training reaches a stable phase, it is expected that more vi sited POIs are ranked correctly, and thus Incomp ( y u X  becomes smaller and n will become a bit larger. However, it is very unlikely that every visited POI is ranked correctly, so in general we still have n &lt; |L| . We find that the speedup is in orders of magnitude in our experiments.
 We summarize the proposed Rank in g based Geo g raphical F a ctorization M eth od (Rank-GeoFM) in Algorithm 1. In the algorithm, we iterate through all the user-POI check-in pairs in D 1 and update the latent factors until the procedure converges (lines 3  X  16). In each iteration, given a user-POI pair, the sampling process is first performed so as to esti-mate Incomp ( y u X  ,  X  ) and obtain one POI sample (lines 6 Based on the estimation of Incomp ( y u X  ,  X  ) and the sampled POI  X   X  , we update the relevant latent factors by using S-GD method (lines 9  X  15). The norm constraints are checked for the updated latent factors, and the ones violating the constraints are projected (line 16).
In this subsection, we use the temporal information as an example context to illustrate how our method can be easily generalized to incorporate other types of context. We consider time-aware POI recommendation. definition 2. Time-aware POI recommendation : giv-en a user u and time slot t (e.g., 3:00pm  X  4:00pm), we rec-ommend the POIs that s/he will like to visit in this time slot, and are not in L u .

The objective function in Eq. (2) can be easily extended to incorporate the temporal context. To calculate the rec-ommendation score, we extend Eq. (4) with two additional terms capturing the temporal factor. One term is tempo-ral popularity score which indicates whether this POI is popular in the time slot. The other term is referred to as temporal in uence score , which is based on the following observation made in previous work [24, 25]: the popularity of a POI at one time slot is always influenced by some close or similar time slots, i.e., popularity are correlated among close or similar time slots.
 We introduce three more latent factor matrices besides U (1) , U (2) and L (1) for the two additional terms. Specif-ically, we parameterize the latent factors of time slots as a |T| X  K matrix T ; and parameterize another two laten-t factor matrices L (2) and L (3) for POIs, where L (2) is to model interactions with time slot for temporal popularity score, and L (3) is to model interactions with close or similar time slot for temporal influence score. We further construct a the popularity scores of POIs in time slot t are influenced by those in time slot t  X  . By following previous studies [24, 7], we compute m tt  X  as: and we normalize M into a matrix such that each row is a probability vector. Given a user u and time slot t , the recommendation score of POI  X  is computed as follows: where the four terms indicate the user-preference score, tem-poral popularity score, geographical influence score and tem-poral influence score, respectively. We denote the parame-ters of our factorization model in this setting as  X  = { U U (2) , T , L (2) , L (3) } . Similar to POI-user setting, norm con-straints are imposed to prevent overfitting: where 0  X   X   X  1 is to control the importance of temporal influence in computing the recommendation score.
Algorithm 1 can be adapted easily for time-aware POI recommendation. Specifically, we iterate through all user-time-POI tuple in D 2 to update the latent factors. Given each ( u, t,  X  )  X  X  2 , we keep sampling POIs until obtain one POI  X   X  satisfying I ( x ut X  &gt; x ut X   X  ) I ( y ut X  &lt; y again Incomp ( y ut X  ,  X  ) is estimated as gradient can be calculated similarly by: on it, the relevant latent factors are updated accordingly.
We conduct comprehensive experiments to evaluate the performance of the proposed method for both POI recom-mendation and time-aware POI recommendation. We use two real-world datasets [24] 1 in our experiments. One is the Foursquare check-in data made in Singapore be-tween Aug. 2010 and Jul. 2011, and the other is the Gowalla check-in data made in California and Nevada between Feb. 2009 and Oct. 2010. The Foursquare data comprises 194,108 check-ins made by 2,321 users at 5,596 POIs, and the Gowal-la data comprises 456,988 check-ins made by 10,162 users at 24,250 POIs. Each check-in is associated with a time stamp.
For each user, we mask off 20% of his/her most recent check-ins as testing set to evaluate the performance of dif-ferent algorithms. The earliest 70% of check-ins are used as training set , and the remaining 10% check-ins are used as validation set . Based on the training sets, we construct a user-POI matrix X with 73,011 and 210,894 nonzero entries for Foursquare and Gowalla, respectively, which will be used in the POI recommendation. The densities of X are 0.56% and 0.085% for Foursquare and Gowalla matrices, respec-tively. For time-aware POI recommendation, we split the data into 24 hours (time slots), and then obtain a tensor X with 91,228 and 244,580 nonzero entries for Foursquare and Gowalla, respectively. The density of X are 0.029% and 0.0041% for the two data, respectively. We can see that both matrix X and tensor X are very sparse.
A vailable at http://www.ntu.edu.sg/home/gaocong/data /poidata.zip
We use two widely used metrics to evaluate the perfor-mance of different recommendation algorithms, namely pre-cision@N and recall@N (denoted by Pre@N and Rec@N), where N is the number of recommended POIs.
 For POI recommendation, given a user u , we compute Pre@N and Rec@N as follows [22]: where tp u is the number of POIs contained in both the ground truth and the top-N results produced by algorithms; f p u is the number of POIs in the top-N results by algorithms but not in the ground truth; and tn u is the number of POIs contained in ground truth but not in the top-N results by algorithms. The Pre@N (Rec@N) reported is an average of precision(recall) values of all users [22].

For time-aware POI recommendation, given a user u and a time slot t , we let tp ut , f p ut and tn ut be a time-specific extension of tp u , f p u and tn u , respectively. Then, at time t , the Pre@N(t) and Rec@N(t) are calculated as follows [24]: As in [24, 25], the average Pre@N (Rec@N) is then reported by averaging the precision (recall) values of all time slot-s. For both metrics, we consider N=5, 10 and 20 in our experiments respectively (by default N=5), as top recom-mendations are more important.
For POI recommendation, we compare our model with the following baseline methods.
For time-aware POI recommendation, the following meth-ods are used as baselines. Among these methods, UTF, PITF and LRT do not exploit the geographical influence.
In the experiments, we set the hyperparameters  X  = 0 . 3 and C = 1 . 0 for all the data sets. For the learning rate  X  , we set a small value 0.0001 in our experiments to ensure the generalization accuracy. For other parameters, we tune them based on the validation set to find the optimal values, and subsequently use them in the test set.

Figure 2(a) shows the performance of Rank-GeoFM under both settings on both data sets as we vary parameter  X  for geographical influence. We find that Rank-GeoFM perfoms the best at  X  = 0 . 2 for POI recommendation on both da-ta, and performs the best at  X  = 0 . 1 for time-aware POI recommendation on both data. Figure 2(b) shows the per-formance of Rank-GeoFM as we vary parameter k used in the construction of geographical influence matrix. We can see that the best performance is achieved at k = 300 for all cases. Figure 2(c) demonstrates the effect of parameter  X  , wh ich is for temporal influence under time-aware POI rec-ommendation. We can see that the best performance are produced at  X  = 0 . 1 and  X  = 0 . 2 on Foursquare and Gowal-la, respectively. Finally, we show the effect of dimension K of latent factors on performance in Figure 2(d). We find that the performance of Rank-GeoFM is insensitive to the dimension K , and we use K = 100 in our experiments.
Figures 3(a) X (d) show the performance of all the methods on both datasets for POI recommendation. First, we can see that memory-based methods UCF and UCF+G perform worse than the other methods except for PMF, which are al-l factorization based methods, and UCF+G improves UCF due to the consideration of geographical influence. PMF performs the worst because it is developed for explicit feed-back data such as user-movie ratings. It is not suitable for POI recommendation, where check-ins are implicit feedback-s. This is in accordance with the finding in [14].
Among the other factorization based methods, the perfor-mance of BPR-MF is very promising, although this method cannot utilize the geographical influence, and has not been employed for POI recommendation in previous work. The reason is that BPR-MF, as a ranking-based factorization method, is more appropriate for handling implicit feedback data. We observe GeoMF performs better than GTBNM-F. This is because GTBNMF conducts the factorization by fitting the zero and nonzero entries in X equally, while Ge-oMF solves the factorization by assigning higher weights to nonzero entries, which is more suitable for implicit data.
We can see that the proposed Rank-GeoFM consistently outperforms the state-of-the art method GeoMF. The im-provements, in terms of Pre@5, are more than 41.6% and 10% on Foursquare and Gowalla datasets, respectively. The reason is that GeoMF addresses the data sparsity problem by fitting both nonzero and zero check-ins with different weights, which is less reasonable than our ranking methodol-ogy because zero check-ins may be missing values and should not be fitted directly. Rank-GeoFM/G denotes our model without considering the geographical influence. It can be seen that Rank-GeoFM/G performs better than BPR-MF, a ranking based MF method without considering geograph-ical influence. This may be attributed to our ranking objec-tive function. Moreover, we observe Rank-GeoFM improves Rank-GeoFM/G by 30.3% and 10.5% in terms of Pre@5 on both datasets, respectively, due to the incorporation of geo-graphical influence.

Finally, we note that all improvements of our method over baselines are statistically significant in terms of paired t -test with p -value &lt; 0.01.
Figures 4(a) X (d) show the performance of all the methods for time-aware POI recommendation when the geographical influence is not utilized. Among all memory-based methods, UCF performs worse than UTF and UTE because it does not capture the correlations between time slots. Although both UTF and UTE consider the correlations between time slots, UTF still performs worse than UTE because UTE smooths the check-in data for handling data sparsity issue. Among the factorization methods UCLAF, PITF and L-RT, LRT performs the worst because it obtains the factoriza-tion by fitting the nonzero entries in tensor X , which suffers Fi gure 6: Learning rate comparison of Rank-GeoFM with and without fast learning. Each square denotes ten iterations and each circle denotes one. Each it-eration comprises the updates for all user-POI pairs. from the sparsity problem significantly. The performance of UCLAF is also not good because the method fits both ze-ro and nonzero entries in X , which is not very reasonable. PITF performs the best among the three and its perfor-mance is also very promising compared to other methods. The reason is that PITF is a ranking-based factorization method that can alleviate the sparsity problem. Moreover, we observe that the graph-based method BPP, which is the state-of-the-art method, outperforms all the memory-based and factorization based baseline methods.

Rank-GeoFM/G denotes our model with temporal influ-ence but without geographical influence. We observe our model consistently outperforms the state-of-the-art method BPP, which is 13.7% and 16.2% better than BPP, in terms of Pre@5, on Foursquare and Gowalla, respectively. Rank-GeoFM/T/G denotes our model without considering both the temporal and geographical influences. We observe Rank-GeoFM/T/G always outperforms another ranking-based me-thod PITF. Moreover, due to the incorporation of tempo-ral influence, we observe Rank-GeoFM/G improves Rank-GeoFM/T/G by 10.6% and 13.1% in terms of Pre@5 on both data, respectively.

Figures 5(a) X (d) show the performance of the methods incorporating the geographical influence further. Note that we report the results only for the methods that can utilize geographical influence. It shows that Rank-GeoFM outper-forms all the other methods by 13.1% and 15.3%, in terms of Pre@5, on Foursquare and Gowalla, respectively.
We note that all improvements of our method over base-lines are statistically significant in terms of paired t -test with p -value &lt; 0.01.
We compare the learning rate of Rank-GeoFM with and without the fast learning scheme introduced in Section 3.2.2. Figure 6 shows the result, where Foursquare data is taken as an example for the comparison. Rank-GeoFM without fast learning scheme means we use Eq. (9) to calculate gradients and perform updates in Algorithm 1. We observe Rank-GeoFM (with fast learning scheme) finishes 1000 iterations of updates in 19 hours while the counterpart without fast learning scheme finishes only 5 iterations. Rank-GeoFM ob-tains a well-trained model within 8 hours, which leads to the best performance, while the counterpart cannot build an acceptable model after 19 hours of training. This result demonstrates the efficiency as well as necessity of using fast lea rning scheme. Moreover, we find that the first 500 iter-ations of Rank-GeoFM take 5.5 hours, while the next 500 iterations take 13.5 hours. The reason is that at the start of training, POIs are not well-ranked by our model and thus it takes less time to sample an incorrectly-ranked POI; how-ever, as the training process goes on, the ranking becomes better and we need more time to sample an incorrect one. Another interesting observation is that we find there is a dip in precision after around 100 iterations for Rank-GeoFM. The observation may be because our learning procedure is transiting from coarse search to fine tuning, i.e., E (o r the magnitude of gradient) is decreasing from a large value to a small one.
In this paper, we propose a ranking based factorization method, Rank-GeoFM, for POI recommendation. In the proposed model, we learn the factorization by fitting the user X  X  preference rankings for POIs, which alleviates the data sparsity problem. Extensive experimental results on both POI recommendation and time-aware POI recommen-dation show that Rank-GeoFM outperforms the state-of-the-art methods significantly.

Rank-GeoFM is very flexible to incorporate context in-formation. In the future, it would be interesting to investi-gate with Rank-GeoFM how the other context information impacts the performance of POI recommendation. For ex-ample, if we know the category of each POI  X  is cat (  X  ), the recommendation score in Eq. (4) can be modified as follows to incorporate this information: where c i is the latent factor of category i and the last term in this equation denotes the interaction score between category cat (  X  ) and user u . We will leave this as our future work.
This work is supported in part by a grant awarded by a Singapore MOE AcRF Tier 2 Grant (ARC30/12), a Sin-gapore MOE AcRF Tier 1 Grant (RG66/12), and a grant awarded by Microsoft Research Asia. [1] J. Bao, Y. Zheng, D. Wilkie, and M. F. Mokbel. A [2] R. M. Bell and Y. Koren. Lessons from the Netflix [3] C. Cheng, H. Yang, I. King, and M. R. Lyu. Fused [4] C. Cheng, H. Yang, M. R. Lyu, and I. King. Where [5] Y. Ding and X. Li. Time weight collaborative filtering. [6] S. Feng, X. Li, Y. Zeng, G. Cong, Y. M. Chee, and [7] H. Gao, J. Tang, X. Hu, and H. Liu. Exploring [8] H. Gao, J. Tang, X. Hu, and H. Liu. Content-aware [9] J. J. Levandoski, M. Sarwat, A. Eldawy, and M. F. [10] Y. Li, J. Nie, Y. Zhang, B. Wang, B. Yan, and [11] D. Lian, C. Zhao, X. Xie, G. Sun, E. Chen, and [12] B. Liu, Y. Fu, Z. Yao, and H. Xiong. Learning [13] X. Liu, Y. Liu, K. Aberer, and C. Miao. Personalized [14] A. Noulas, S. Scellato, N. Lathia, and C. Mascolo. A [15] A. Noulas, S. Scellato, C. Mascolo, and M. Pontil. An [16] S. Rendle, C. Freudenthaler, Z. Gantner, and [17] S. Rendle and L. Schmidt-Thieme. Pairwise [18] R. Salakhutdinov and A. Mnih. Probabilistic matrix [19] Y. Shi, A. Karatzoglou, L. Baltrunas, M. Larson, [20] N. Usunier, D. Buffoni, and P. Gallinari. Ranking with [21] J. Weston, S. Bengio, and N. Usunier. Large scale [22] M. Ye, P. Yin, W.-C. Lee, and D.-L. Lee. Exploiting [23] H. Yin, Y. Sun, B. Cui, Z. Hu, and L. Chen. Lcars: A [24] Q. Yuan, G. Cong, Z. Ma, A. Sun, and N. M.
 [25] Q. Yuan, G. Cong, and A. Sun. Graph-based [26] K. Zhao, G. Cong, Q. Yuan, and K. Zhu. SAR: A [27] V. W. Zheng, B. Cao, Y. Zheng, X. Xie, and Q. Yang.
