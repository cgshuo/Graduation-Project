 This paper proposes a framework for Composite Alternative Recommendation Development (CARD), which supports composite product and servic e definitions, top-k decision optimization, and dynamic preference learning. Composite services are characterized by a set of sub-services, which, in turn, can be composite or atomic. Ea ch atomic and composite service is associated with metrics, such as cost, duration, and enjoyment ranking. The framework is base d on the Composite Recommender Knowledge Base, which is compos ed of views, including Service Metric Views that specify services and their metrics; Recommendation Views that specify the ranking definition to balance optimality and diversity; parametric Transformers that specify how service metrics are defined in terms of metrics of its subservices; and learning sets from which the unknown parameters in the transformers are iteratively learned. Also introduced in the paper is the top-k selection criterion that, based on a vector of utility metrics, provides the balance between the optimality of individual metrics and the diversity of recommendations. To exemplify the framework, specific views are developed for a travel package recommender system. H.4.2 [ Programming Languages ]: Language Constructs and Features  X  frameworks . Design, languages. Decision guidance, development fra mework, preference learning, ranking, recommender systems, decision optimization. The vast number of products avai lable via the web inevitably results in information overload for customers, who find that they must select from a large number of product alternatives. The shift toward customized product bundles and service compositions will only compound this problem in the future. In this paper, we present the Composite Alternat ive Recommendation Development (CARD) framework for building recommender systems for composite products and services. The CARD framework leverages partial knowledge specif ication, decisi on optimization, and dynamic preference learning to select from composite recommendation alternatives  X  that is, multidimensional recommendations, made up of a num ber of subcomponents, which satisfy global decision constraints. There has been extensive work in the area of recommender systems (e.g., [1,4,7]). Popular surveys of recommendation tec hniques classify recommender systems as either content-based or collaborative. Content-based systems often employ classifier techniques to recommend an item to a user based upon a description of the item and a profile of the user X  X  interests. In contrast, collaborative recommenders use the preferences of  X  X imilar X  users, rather than the characteristics of an item, to make suggestions to th e current user. More recently, utility-based, knowledge-based, and demographic systems have each suggested different techniques for reasoning about recommendations. Systems employing one or more of these techniques have been proposed to recommend flights, movies, restaurants, and news articles [1,4 ,5]. However, most of these systems recommend only atomic products or service recommendations. Complex reco mmendation models involving composite alternatives, such as product configurations and service packages were addressed, e.g., based on cased-based reasoning [13], but they were not designed to recommend multiple diverse alternatives. In addition, the majority of recommender systems rely on a single ranking or util ity score. More recently, multi-criteria ranking has been explored in recommendation set retrieval [2,11,15]. These methods choose a set of alternatives based on the distance measure calculated fo r each of the multiple criteria. Multi-criteria ranking can support both similarity and diversity based ranking, e.g., [14]. Howeve r, these ranking methods are based on measures such as Euclidean or Pearson distance and do not seek to optimize individual criteria. Soft constraints and conditional preference reasoning techniques were combined in [12], which are applicable to making recommendations. Finally, recommender systems are most ofte n developed for a single target domain and as such, do not provi de a generally applicable framework for fast developmen t of recommender systems. The research described in this paper addresses the limitations outlined above by constructing and illustrating a framework for the development of recommender sy stems. More specifically, the contributions of the work reported in this paper are as follows. First, we develop the CARD framework, which supports composite product and servic e definitions, top-k decision optimization, and dynamic pref erence learning. Composite services are characterized by a set of sub-services, which, in turn, can be composite or atomic. For example, travel packages are composed of many services including ground and air transportation, accommodations, a nd activities. Each atomic and composite service is associated with metrics, such as cost, duration, and enjoyment ranking. Second, to specify the components of the CARD framework, we propose a Composite Recommende r Knowledge Base (CRKB), composed of a collection of vi ews, expressed in Decision-Guidance SQL (DG-SQL) [3]. This includes views that define Recommendation Views that specify the ranking definition to balance optimality an d diversity; parametric transformers (functions) that specify how se rvice metrics of a composite service are defined in terms of metrics of its subservices; and learning sets from which the unknown parameters in the transformers are iteratively learned. Third, to support the Recommendation Views specification, we extend the syntax and semantics of DG-SQL with constructs for top-k selection based on a vector of utility metrics including a global utility score. The key idea is to create alternative recommendations each based on a different individual metric, while preserving a bounded dist ance from the optimal global utility score, to provide the ri ght balance betwee n optimality and diversity. Fourth, we formalize, by defining the syntax and semantics, the preference learning views. Finally, we exemplify the CARD framework with a travel package recommender system, for which we specify all the framework views. The remainder of this paper is or ganized as follows. Section 2 briefly describes the Decision Gu idance Management System on which CARD is based. S ection 3 describes the CARD framework. Section 4 outline s the Composite Recommendation Knowledge Base (CRKB). Sect ions 5 and 6 describe the components of the CARD framework and their interaction with the CRKB. Section 7 illustrates the CARD framework with a travel recommender example. S ection 8 concludes with related work and avenues for future work. The CARD framework is based on the Decision Guidance Management System (DGMS) propos ed in [3], which we briefly review in this section. DGMS is a productivity platform for the fast development of database applications requiring closed-loop data acquisition, learning, prediction, and decision optimization. The DGMS data model extends the relational model with stochastic attributes over which a probability distribution function is defined. The DGMS query la nguage, DG-SQL, is used to specify several decision guidance views supporting prediction, optimization, and learning. To support prediction, DG-SQL provides (stochastic or determinis tic) transformers to define new attributes, which can be viewed as random variables. Specifically, a transformer is a program that computes outputs from inputs, and in which numeric variables are polymorphic and correspond to either a numeric value or a random variable. A prediction view is specified by a DG-SQL query, in which the WHERE and/or the SELECT clause involve a probabilistic logical formula that contains random variables. Deci sion optimization is achieved by allowing for the designation of so-called Choice-nulls (C-nulls for short) for some attributes in view definitions. A DG-SQL query that involves C-nulls essentiall y defines a set of (possibly stochastic) relations, each corresponding to a query answer with a different instantiation of values for C-nulls. A decision query returns an optimal answer, i.e., a relation from the query-answer set which makes a designated aggr egated parameter minimal or maximal, as required, among all answer relations. DG-SQL implements learning using transformers with parameters designated as learned nulls (L-nulls). Learned parameters are unknown at the time of a transformer X  X  definition, but can be learned using a learning set produced by queries from the database. These learned parameters can then be used to answer queries in place of the L-nulls . Combining prediction views, optimization views, and learning views, DGMS allows for the specification of complex de cision process models. The recommendation process implemented by the CARD framework is depicted in Figure 1. As shown in the diagram, the process is initiated when a user submits a request to the Recommender. This request specifies both the user X  X  decision constraints and profile data. Upon receipt of a recommendation request, the Recommender cons tructs a ranked set of recommendation alternatives using the recommendation definitions and preference data stored in the Composite Recommendation Knowledge Base (CRKB) as well as the service instance data provided by extern al data sources. The composite recommendation set is then passed to the Feedback Extractor and presented to the user. At this po int, the user may select the most preferred alternative or s/he may provide a (partial) ranking of the suggested alternatives to the Fee dback Extractor. The Preference Learner uses the feedback of the current user, along with the historical preference data of past users, to update the preference parameters stored in the Co mposite Recommendation Knowledge Base. If the user has chosen to view additional suggestions, the recommendation process is repeated with the updated preference parameters. Otherwise, the guida nce process is concluded and the services to implement the select ed alternative are invoked. The recommendation process continues ite ratively until either the user process. The CRKB stores the internal da ta and the modeling components used to construct recommendation sets. The CRKB contains the following components. We describe in the next sections how they interact with the CARD framework components. The User Profile is submitted with the initial recommendation request. The user profile mainta ins information about the current client. This information in cludes domain specific user characterization data and reco mmendation constraints. The characterization data is used to select an appropriate recommendation template. For instance, a vacation recommender might select the recommendation template based on demographic data, such as the traveler stereotype. Recommendation constraints limit the number of feasible alternatives by stating hard constraints specific to the user. For example, the number of travelers on a vacation would constrain the minimum rental car capacity. Service Metric Views de fine atomic and com posite services. Each that determines a unique service instance, and a set of metric attributes, such as cost, duration, or enjoyment ranking that characterize the service. Some of the key attribute values for a indicate that the system could instantiate them in the optimal way. We discuss how those views ar e defined, as well as their semantics in Section 5. In order to construct a ranked recommendation set from the services identified by the Service Metric Views, the CRKB maintains one or more Recommendation Views, e.g., for family travel, romantic travel, or business travel. Each Recommendation View is associated with a Service Metric View. It defines (a small list of) recommendations, each being a tuple over key attributes of a service, its metric attributes (e.g., cost and enjoyment factor) as well as a Global Utility metric, which is defined in terms of the basic metrics. We discuss Recommendation Views syntax and semantics in Section 5. Transformers are parametric functions that define metric attributes of a composite service given the valu es of metric attributes of the subservices. They are also used to define the global utility in Recommendation Views given the valu es of metric attributes of the corresponding Service Metric View. Some transformer parameters (e.g., coefficients in the functional form that define a transformer) may not be known a prio ri, but learned (i.e., they are designated L-nulls in DG-SQL view that defines them). They are then stored in CRKB. In order to learn transformer parameters, the CRKB also stores Historical Preference Data for each Recommendation View. Such preference data is a partial or dering on tuples of the Service Metric View that is associated with the Recommendation View. Each comparison t1 &gt; t2, where t1, t2 are tuples from the Service View that have the same user attributes, indicates that the user preferred the service instance defined by t1 over the service instance defined by t2. Historical preference data is collected by extracting feedback from users on suggested recommendations. Historical Preference Data is distinguished in CRKB from the Current User Preference Data, i.e., of the user who is online and to whom recommendations are given. In order to provide recommendations, the Recommender materializes the correspondi ng Recommendation View, and returns an ordered set of recommendations. To understand the syntax and semantics of Recommenda tion Views, we first need to discuss Service Metrics Views. DG-SQL syntax is used to construct a composite Service Metric View as shown in Figure 2. Service Metric Views are extensions of DGMS prediction views and are used to define, for every service instance, key attributes and metric attributes. Key attributes are those selected to uniquely identify a product or service instance within a Service Metric View. Metric attributes represent those attributes that can be used to measure the suitability of an alternative. Metric attributes may be defined using transformers in the SELECT clause of the view, as a function of the metric attributes of direct sub-views (in the FROM clause). For the atomic Service Metric Views, the metrics are derived directly from the source da ta attributes. Thus, within a Service Metric View hierarchy, metric attributes can be aggregated to characterize a composite Service Metric View. The composition constraints in the WHERE clause of a Service Metric View encode the fact that sub-service instances refer to the same user and that sub-services logically match. Some of the key attributes are regular, i.e., they are assigned values from the corresponding domain. However, as an extension of the relational model, some key attributes are assigned the special value Choice-null (C-null) to indicate that any value from the corresponding domain is allowed, as long as it satisfies the constraints in the WHERE clause. A view that contains C-null attributes defines a set symbolic t uples, i.e., tuples that contain C-nulls. Each such tuple represents (i.e., can be interpreted as) a (possibly infinite) set of regu lar tuples, each generated by instantiating values into C-nu lls from the corresponding domains, such that the condition in the WHERE clause is satisfied. We call this set an Interpretation of a symbolic tuple. A set of symbolic tuples is interpreted as the uni on of the Interpretations of its symbolic tuples. The purpose of a Service Metric Vi ew is to define all possible service instances to choose from. Without C-nulls, it defines a finite set of service instances. C-nulls allow for the definition of a possibly infinite set of service instances. The purpose of the Recommendation View is to rank the service instances according to the predicted preferences of the user, and to return a small number of recommendations, which are (composite) service instances, orde red according to this ranking. The syntax template of a composite Recommendation View is depicted in Figure 3. Each Recommendation View is associated with the corresponding Service Metric View, which appears in the FROM clause. The WHERE clause contains user constraints, e.g., the maximum budget and duration of travel. The SELECT clause returns all the key and metric attributes of th e service instance, along with the global utility metric. For example, if the metrics are cost and enjoyment factor, the global utility may be a linear combination of these two metrics. The LIMIT cl ause indicates the number of recommendations that need to be produced. This number may be a configuration or user-defined para meter. Most importantly, each Recommendation View defines the parameters of the DIVERSITY RANKING clau se. DIVERSITY RANKING, detailed in the following, selects a diverse set of recommendations by optimizing the attributes of an alternative in order of importance. Specifically, the DIVERSITY R ANKING clause specifies the global utility used, and an ordere d collection of metrics, in the order of their importance. Before we define the total ordering defined by the DIVERSITY R ANKING clause, consider an example depicted in Figure 4. There, x1 and x2 are two continuous metrics, and u is the global utility, which is defined as a linear combination of x1 and x2 . For example, x1 can stand for (total-budget  X  cost), i.e., the remaining budget, and x2 for the enjoyment factor of family travel. The two-dimensional polyhedral set in the figure defines all possible metric vectors of recommendations. We assume that x1 is more important than x2, DIVERSITY RANKING clause. Intuitively, the top layer of recommendations are for the metric recommendations with the maximal u correspond to the facet connecting A1 and A2 in the picture. Among these vectors, A1 has the maximum x1, and thus this recommendation is ranked first. The second recommendation will be A2, because it still has the maximal u, but has also ma ximized the other metric x2  X  intuitively, it gives more diversity. The second layer of recommendations in the example are for metric vectors (x1,x2), for which u &gt;= max{u}  X   X  , where  X  corresponds to a percentage of max{u}, say 5%. The first recommendation in this layer is A3 because it maximizes x1, and the next recommendation is A4 because it maximizes x2. Intuitively, maximizing each metric component, in turn, gives preserves the distance from the optimal global utility. Conceptually, the Diversity Ranking selects diverse alternatives by optimizing each ranking criteria in order. However, in order to recommendations, the maximum incremental decrease in utility is the total number of recommendations will be equal to q. This allows for the utility to decrease more rapidly for small recommendation sets, thus extending the view of the solution space. The following defines the DIVERSITY RANKING. Definition Given a set of tuples defined by RView T, a list of Ranking as a list of recommendations r[0], r[k X n+1], ... , r[  X  1/  X  X   X n] as follows. For every 0  X  k  X   X  1/  X   X  : r[k X n+1]  X  S kn (x 1 , x 2 , ... , x n ) r[k X n+2]  X  S kn (x 2 , x 3 , ... , x n , x 1 ) ... r[k X n+n]  X  S kn (x n , x 1 , ... , x n-1 ) where S kn defined recursively as follows: S (x i 1 , ..., x i n ) = {t | t  X  T  X  t. u  X  max u  X (1 -k X   X  )} S k1 (x i 1 , ..., x i n ) = {t | t = argmax {V  X  S k0 }V.x .... S (x i 1 , ..., x i n ) = {t | t = argmax {V  X  S k,(n-1) Raw preference data is collected each time a user interacts with the Feedback Extractor. For each Recommendation View, historical preference data is maintained. The first data set stores the key attribute-value pairs for all past recommendation alternatives. A corresponding second data set stores a history of the preferred recommendation alternatives, i.e. those that the user has indicated are preferred through partial ordering. These data sets are updated on each iteration of the CARD decision guidance process. The Feedback Extractor interacts w ith the user to elicit a partial ordering of the recommendation set. To begin the feedback process, the ranked set of r ecommendation alternatives is displayed to the user. In response, the user may select one of the recommendations or may choose to view additional recommendations, in which case the user is asked to indicate a positive or negative preference for one or more recommendations. This feedback, which is a partial ordering on the recommendation alternatives, is submitted to the preference learner along with the Recommendation View and hierarchical Service Metric Views associated with the proposed al ternatives. The user continues through iterations of the decision process by (partially) ranking proposed recommendations until eith er an alternative is selected or the user chooses to terminate the process. Learning transformers allow for th e exploitation of domain expert knowledge in defining metric attri butes. Metrics attributes such as enjoyment or utility are dependent on the preferences of the individual user. As a result, th ese metrics cannot be statically defined for all users. Unfortuna tely, the runtime formulation of such metrics imposes a significant burden on the user to express their preferences. However, do main experts often have some partial knowledge about the formul ation of user-specific metric expressions. Using learning transformers, partial metric expressions are formulated at design time and are customized with learned preference parameters at runtime. Learning transformers are used to formulate metric attribute expressions within a metric or Recommendation View. The attributes used by the transformer must be derived from metric attributes of direct sub-views. Specifically, learning transformers define a parametric function f , where the parameters are unknown. These parameters are designated L-nulls. On each iteration of the decision process, the L-nulls are replaced with learned preference parameters produced by the Pr eference Learner described in section 4.3. At runtime, learned preference pa rameters take the place of L-nulls in the learning transformers. For each transformer, the CRKB stores the current value of all learned preference parameters based on historical preference data. These values are updated by the Preference Learner each time a user provides feedback to the system. Periodically, the Preference Learner uses the current Historical Preference Data to update th e Learned Parameters of the parametric Transformers. The learning process used by the Preference Learner requires (1) Recommendation View V and all Service Metric Views on which V depends, (2) a partial ordering indicated by the user, (3) a learning set consisting of the historical preference data collected for each learning transformer. Given this input, the Preference Lear ner instantiates the learned preference parameters with values such that minimize the false-negative ratio , defined as follows. Definition Given inputs 1-3 above, the false-negative ratio for a specific set of learned parameter values is determined by the number of correctly predicted hi storical pairwise preference comparisons if the associated L-nulls were to be instantiated with the current parameters. The false-negative ratio is defined as follows: This section illustrates the CARD framework with an example. Consider a family that woul d like to reserve roundtrip air transportation, accomm odations at two separa te destinations, and a rental vehicle for transportati on between the two destinations. The family can travel any time within a specified window and can travel to their destinations in any order as long as the flights arrive and depart from the first destinati on. In addition, the family can leave their first destination at any time and travel to their second; however, they must visit both destinations. This example describes a complex decision proce ss for selecting a family travel package composed of three distinct elements, namely air travel, accommodations, and a vehicle rental. Each of these elements is described by different attributes and is evaluated by different metrics that all combine to represent a family travel package. Further, this example introduces a number of recommendation flexibilities, including check-i n and check-out dates for both accommodations. The Service Metric View hierarchy for the travel example, shown in Figure 5, includes the composite (root) view, Family Travel Metrics, and the three atomic views Travel Accommodation Metrics, Air Travel Metrics, and Rental Vehicle Metrics. Family Travel Metrics defines the co mposite recommendation model for the recommendation of family travel packages. Each of the atomic views represents an element of the family travel package recommendation model. The views in the family travel Service Metric View hierarchy are constructed from the bottom up. The atomic views are populated by combining external service pr ovider data with internal user profile data and learned preferences. The composed view is then populated using the data generated by the atomic views. The schemas for the source tables used in the family travel example are listed in Table 1. Accommodation costPerNight In order to demonstrate the cons truction of the family travel Service Metric View hierarchy, consider the Travel Accommodation Metrics view define d and depicted in Figure 6. This view is made up of the key attributes travelerID and accommID taken from Traveler Profile and Accommodation Packages. The attributes checkin and checkout are choice attributes that, at runtime, will be enumerated with all feasible check-in and checkout dates for each accommodation. The remaining attributes, amenities , no_stars , accEnjoyment , and accCost are metric attributes. The metric attributes amenities and no_stars are taken directly from the Accommodation Packages source. In contrast, accEnjoyment and accCost both represent dynamically computable expressions. The attribute accEnjoyment defines a score of enjoyment for each accommodation instance based on known attribute coefficien ts; in this case, the actType_coeff and environment_coeff attributes stored in Accommodation activityType and environment attributes. The accCost attribute dynamically computes the cost of an accommodation based on the values given to the choice attributes checkin and checkout . The Travel Accommodation Metrics view also defines several constrai nts. For instance, checkout &gt; checkin is a logical constraint which specifies that the checkout date must be farther into the future than the check-in date. The remaining constraints eliminate recommendation alternatives that do not meet the user specific re quirements, such as those that exceed the user X  X  budget. DEFINE VIEW TravelAccommodationMetrics SELECT TP.travelerID, AP.accommID, checkin = C-NULL, checkout = C-NULL, AP.amenities, AP.no_stars, accEnjoyment=(activityType*AC.actType_coeff+ (environment*AC.environment_coeff), accCost = (checkout-checkin)* AP.costPerNight+AP.activityCost FROM TravelerProfile TP, AccommodationPackages AP, AccommodationCoefficients AC
WHERE accCost &lt;= TP.budgetLimit AND checkin &gt;= TP.earliestDepart AND checkout &lt;= TP.latestReturn AND checkout &gt; checkin; The Service Metric Views for flights and rental vehicles are respectively. The Air Travel Metrics view characterizes flights. The key attributes flight_no and departDate are selected directly from external flight schedules. Similarly, the metric attributes, class , hops , flightTime , and airCost are direct projections of the source database. The metric attribute flightEnjoyment represents an expression preference for a specific flight using stored coefficients. DEFINE VIEW AirTravelMetrics SELECT TP.travelerID, F.flight_no, F.departDate, F.class, F.hops, F.flightTime, flightEnjoyment=(F.class*FC.airClass_coeff)+ (F.hops*FC.airHops_coeff)+ (F.flightTime*FC.flightTime_coeff), F.airCost FROM TravelerProfile TP, Flights F, FlightCoefficients FC WHERE F.airCost &lt;= TP.budgetLimit AND F.departDate &gt;= TP.earliestDepart AND F.departDate &lt;= TP.latestReturn; The Rental Vehicle Metrics view defines all feasible rental car alternatives. The attributes pickupDate and returnDate are designated choice and, like the accommodation check-in and checkout dates will be populated with all rental pickup and return dates that meet the specified constraints. The metric attribute rentCost is defined by an expr ession which dynamically The remaining attributes are simply selected from the source. The Family Travel Metrics view defines all feasible family vacation packages for our family travel example. This includes flights both to and from the first destination, ac commodations at both the first and second destina tions, and a rental vehicle for travel between the first and sec ond destinations. The composite Service Metric View is shown in Figure 9. The key attributes of the Family Travel Metrics view correspond to the key attributes from each of underlying atomic views necessary to uniquely identify each flight, accommodation, and rental instance. The metric attributes for the view defined in Figure 9 include tEnjoyment and tCost . These attributes represent aggregate metrics composed solely of the metric attributes defined by the atomic travel views. For example, tCost is simply the sum of the cost of the two accommodations, the two flights, and the rental vehicle. The Family Travel Metr ics view also defines both logical and user-specific constraints am ong the atomic views and over the composite recommendation. For in stance, according to logical constraints the check-in date fo r the second accommodation must occur after the checkout date for the first accommodation. The check-in date for the first accomm odation must be equivalent to the departure date for the dest ination flight, correspondingly for the second accommodation and th e return flight. Similar constraints are expressed among the accommodations and the rental vehicle. The user specific constraints dictate that the total cost of the entire travel package must be less than the budget. Figure 10 defines the Recommenda tion View corresponding to the family travel Service Metric View hierarchy. This view defines the global utility metric tUtility . In this example, the tUtility metric is a complex e xpression defined using a learning transformer. Unknown (preference) parameters are designated L-nulls specifying paramete rs that can be learned. For example, the total utility of a travel package depends on the weights given to attributes of the recommended vacation. However, the value of these weights depends on the individual user. In this example, the transformer, TotalUtility , Figure 11, is used to calculate the overa ll vacation package utility. The Recommendation View defined in Figure 10 invokes the Diversity Ranking method with metric attri butes representing total utility, total cost, and total enjoyment. A recommendation set is generated by optimizing each of the metric attributes in order while bounding the degradation in tota l utility. In this example, the Diversity Ranking algorithm first selects the alternative in the Family Travel Metrics view with the maximum total utility, ties are broken by selecting the candidate alternative with the minimum total cost and, if necessary, the maximum total enjoyment, in that order. The second recommendation alternative is identified by selecting the alternative with the minimum total cost having a total utility value no less than the maximum utility minus  X  of the maximum utility. This time ties are broken among the candidate alternatives by maximizing total utility, then total enjoyment. The third recommendation is selected by maximizing total enjoyment while again bounding the decrease in total utility to no more than 20 percent. The fourth and fifth recommendation alternatives are selected by optimizing the total cost and total enjoyment, respectively, while allowing the total utility to decrease by another  X  . The Diversity Ranking algorithm continues to rank the remaining alternatives in this fashion until the complete set of family travel alternatives has been ordered. The Recommendation View selects the top five ranked alternatives to constitute the recommendation set. To exemplify the Preference Learner, consider the Family Travel Recommendation view defined in Figure 10. This view makes use of the Total Utility transformer outlined in Figure 11. In this example, the domain expert has knowledge that the total package utility is a function of total enjoyment and total cost; however, the weights given to these attributes by a specific user are unknown. Instead, these weights are designated L-null. On each iteration of the decision process, the CARD system will collect the key attribute values for the Family Travel Recommendation view and the associated lower level views. The partial ordering feedback provided by all users serves as historical preference data indicating the preferred alternative in pairwise comparisons. For the Total Utility transformer, the Preference Learner will instantiate the L-null values and, given the resulting total utility, calculate the false-negative ratio against the historical preference data. If, using the instantiated L-null values, the partial ordering of the alternatives matches the preference ordering indicated by the pairwise comparisons stored in the CRKB the current instantiation becomes the learned preference parameter value. In general, recommende r systems assist users in choosing from an, often large, selection of alternatives. Recommender systems employ different representatio n models, ranking methods, and learning techniques to recommend solutions in a variety of domains. For comprehensive an alysis of recommender systems refer to [1,4,7]. Most relevant to our work are those systems supporting multi-attribute utility-based recommendation, multi-criteria ranking methods, and dynamic learning of user preferences. recommendation alternatives as associated attribute-value pairs. Case-based recommenders of ten evaluate recommendation alternatives according to their similarity to a target solution [2,8,10,11]. In contrast, ut ility-based recommenders make recommendations based on a, often si ngle, utility score [4,7]. The CARD recommender framework is us ed to construct utility-based recommenders; however, many of the CARD components could be used to accommodate sim ilarity-based recommendation. With the recent surge in collaborative similarity-based recommenders, such as Amazon.com, a number of multi-criteria ranking methods have been propos ed. Of significant importance to this research is work sugge sting the importan ce of diversity sensitive recommendation sets. The work presented in [2,9] details several algorithms for selecting diverse recommendation However, this work is based on measures such as Euclidean distance or hamming distance calc ulated for pairs of attribute values. The work done by Linden, et al [6] also suggests a diverse ranking algorithm. Like the Diversity Ranking algorithm presented in this paper, the method proposed in [6] also makes recommendations by finding solutions that optimize one attribute of solution; however, the multi-criteria ranking method presented here optimizes each attribute while bounding the allowable degradation in overall utility. In this way, the recommendations made by Diversity Ranking offer the user a broad view of the solution space while maintaining an acceptable overall utility. While few recommender systems provide for estimating and refining the preferences of the user [7], works such as [9] have exemplified the need for such techniques. The CARD framework integrates support for the est imation and refinement of user preferences into the applic ation development model. The development of effective and accurate decision guidance systems must keep pace with the dynamic nature of the products and services they are meant to na vigate. To that end, we have presented a generalized recommender system framework capable of supporting composite alternat ive recommendations. We have detailed the architecture of our fr amework and have presented the syntax and semantics for each component. In addition, we have outlined a simple demonstration of the proposed system for the travel domain. Future work in cludes the full implementation of the described Learner component, the introduction of support for continuous choice variables, development of specialized algorithms for the recommendation and learning queries, and the evaluation of the resulting prototype. [1] Adomavicius, G. and A. Tuzhilin, Toward the next [2] Bradley, K. and B. Smyth, Improving Recommendation [3] Brodsky, A. and X.S. Wang, Decision-Guidance [4] Burke, R., Hybrid Recommender Systems: Survey and [5] Konstan, J.A., et al., GroupLens: applying collaborative [6] Linden, G., S. Hanks, and N. Lesh, Interactive assessment of [7] Manouselis, N. and C. Costopoulou, Analysis and [8] McGinty, L. and B. Smyth, Comparison-Based [9] Pazzani, M. and D. Billsus, Learning and Revising User [10] Ricci, F., et al., ITR: a case-based travel advisory system. 6th [11] Smyth, B. and P. McClave, Similarity vs. Diversity. Case-[12] C. Domshlak, F. Rossi, B. Venable, and T. [13] Armin Stahl, Ralph Bergmann: Applying Recursive CBR for [14] David McSherry: Diversity-Conscious Retrieval . ECCBR [15] G. Adomavicius and Y. Kwon, New Recommendation 
