 Translation hypotheses generated by a statistical machine translation (SMT) system always contain both correct parts (e.g. words, n-grams, phrases matched with reference translations) and incor-rect parts. Automatically distinguishing incorrect parts from correct parts is therefore very desir-able not only for post-editing and interactive ma-chine translation (Ueffing and Ney, 2007) but also for SMT itself: either by rescoring hypotheses in the N -best list using the probability of correct-ness calculated for each hypothesis (Zens and Ney, 2006) or by generating new hypotheses using N -best lists from one SMT system or multiple sys-tems (Akibay et al., 2004; Jayaraman and Lavie, 2005).
 In this paper we restrict the  X  X arts X  to words. That is, we detect errors at the word level for SMT. A common approach to SMT error detection at the word level is calculating the confidence at which a word is correct. The majority of word confidence estimation methods follows three steps: 1) Calculate features that express the correct-2) Combine these features together with a clas-3) Divide words into two groups (correct trans-Sometimes the step 2) is not necessary if only one effective feature is used (Ueffing and Ney, 2007); and sometimes the step 2) and 3) can be merged into a single step if we directly output predicting results from binary classifiers instead of making thresholding decision.

Various features from different SMT models and system outputs are investigated (Blatz et al., 2003; Ueffing and Ney, 2007; Sanchis et al., 2007; Raybaud et al., 2009). Experimental results show that they are useful for error detection. However, it is not adequate to just use these features as dis-cussed in (Shi and Zhou, 2005) because the infor-mation that they carry is either from the inner com-ponents of SMT systems or from system outputs. To some extent, it has already been considered by SMT systems. Hence finding external information sources from outside SMT systems is desired for error detection.

Linguistic knowledge is exactly such a good choice as an external information source. It has al-ready been proven effective in error detection for speech recognition (Shi and Zhou, 2005). How-ever, it is not widely used in SMT error detection. The reason is probably that people have yet to find effective linguistic features that outperform non-linguistic features such as word posterior proba-bility features (Blatz et al., 2003; Raybaud et al., 2009). In this paper, we would like to show an effective use of linguistic features in SMT error detection.

We integrate two sets of linguistic features into a maximum entropy (MaxEnt) model and develop a MaxEnt-based binary classifier to predict the cat-egory (correct or incorrect) for each word in a generated target sentence. Our experimental re-sults show that linguistic features substantially im-prove error detection and even outperform word posterior probability features. Further, they can produce additional improvements when combined with word posterior probability features.
 The rest of the paper is organized as follows. In Section 2, we review the previous work on word-level confidence estimation which is used for error detection. In Section 3, we introduce our linguistic features as well as the word posterior probability feature. In Section 4, we elaborate our MaxEnt-based error detection model which combine lin-guistic features and word posterior probability fea-ture together. In Section 5, we describe the SMT system which we use to generate translation hy-potheses. We report our experimental results in Section 6 and conclude in Section 7. In this section, we present an overview of confi-dence estimation (CE) for machine translation at the word level. As we are only interested in error detection, we focus on work that uses confidence estimation approaches to detect translation errors. Of course, confidence estimation is not limited to the application of error detection, it can also be used in other scenarios, such as translation predic-tion in an interactive environment (Grandrabur and Foster, 2003) .

In a JHU workshop, Blatz et al. (2003) investi-gate using neural networks and a naive Bayes clas-sifier to combine various confidence features for confidence estimation at the word level as well as at the sentence level. The features they use for word level CE include word posterior probabil-ities estimated from N -best lists, features based on SMT models, semantic features extracted from WordNet as well as simple syntactic features, i.e. parentheses and quotation mark check. Among all these features, the word posterior probability is the most effective feature, which is much better than linguistic features such as semantic features, ac-cording to their final results.

Ueffing and Ney (2007) exhaustively explore various word-level confidence measures to label each word in a generated translation hypothe-sis as correct or incorrect. All their measures are based on word posterior probabilities, which are estimated from 1) system output, such as word lattices or N -best lists and 2) word or phrase translation table. Their experimental re-sults show that word posterior probabilities di-rectly estimated from phrase translation table are better than those from system output except for the Chinese-English language pair.
 Sanchis et al. (2007) adopt a smoothed naive Bayes model to combine different word posterior probability based confidence features which are estimated from N -best lists, similar to (Ueffing and Ney, 2007).

Raybaud et al. (2009) study several confi-dence features based on mutual information be-tween words and n-gram and backward n-gram language model for word-level and sentence-level CE. They also explore linguistic features using in-formation from syntactic category, tense, gender and so on. Unfortunately, such linguistic features neither improve performance at the word level nor at the sentence level.

Our work departs from the previous work in two major respects.  X  We exploit various linguistic features and  X  We treat error detection as a complete bi-We explore two sets of linguistic features for each word in a machine generated translation hypoth-esis. The first set of linguistic features are sim-ple lexical features. The second set of linguistic features are syntactic features which are extracted from link grammar parse. To compare with the previously widely used features, we also investi-gate features based on word posterior probabili-ties. 3.1 Lexical Features We use the following lexical features.  X  wd : word itself  X  pos : part-of-speech tag from a tagger trained
For each word, we look at previous n words/tags and next n words/tags. They together form a word/tag sequence pattern. The basic idea of using these features is that words in rare pat-terns are more likely to be incorrect than words in frequently occurring patterns. To some extent, these two features have similar function to a tar-get language model or pos-based target language model. 3.2 Syntactic Features High-level linguistic knowledge such as syntac-tic information about a word is a very natural and promising indicator to decide whether this word is syntactically correct or not. Words occurring in an ungrammatical part of a target sentence are prone to be incorrect. The challenge of using syntac-tic knowledge for error detection is that machine-generated hypotheses are rarely fully grammati-cal. They are mixed with grammatical and un-grammatical parts, which hence are not friendly to traditional parsers trained on grammatical sen-tences because ungrammatical parts of a machine-generated sentence could lead to a parsing failure. To overcome this challenge, we select the Link Grammar (LG) parser 3 as our syntactic parser to generate syntactic features. The LG parser pro-duces a set of labeled links which connect pairs of words with a link grammar (Sleator and Temper-ley, 1993).

The main reason why we choose the LG parser is that it provides a robustness feature: null-link scheme. The null-link scheme allows the parser to parse a sentence even when the parser can not fully interpret the entire sentence (e.g. including un-grammatical parts). When the parser fail to parse the entire sentence, it ignores one word each time until it finds linkages for remaining words. After parsing, those ignored words are not connected to any other words. We call them null-linked words.
Our hypothesis is that null-linked words are prone to be syntactically incorrect. We hence straightforwardly define a syntactic feature for a word w according to its links as follows
In Figure 1 we show an example of a generated translation hypothesis with its link parse. Here links are denoted with dotted lines which are an-notated with link types (e.g., Jp, Op). Bracketed words, namely  X , X  and  X  X ncluding X , are null-linked words. 3.3 Word Posterior Probability Features Our word posterior probability is calculated on N -best list, which is first proposed by (Ueffing et al., 2003) and widely used in (Blatz et al., 2003; Ueff-ing and Ney, 2007; Sanchis et al., 2007).

Given a source sentence f , let { e n } N 1 be the N -best list generated by an SMT system, and let e i n is the i -th word in e n . The major work of calculating word posterior probabilities is to find the Leven-shtein alignment (Levenshtein, 1966) between the best hypothesis e 1 and its competing hypothesis e n in the N -best list ment between them as  X  ( e 1 ,e n ) . The word in the hypothesis e n which e i 1 is Levenshtein aligned to is denoted as  X  i ( e 1 ,e n ) .

The word posterior probability of e i 1 is then cal-culated by summing up the probabilities over all hypotheses containing e i 1 in a position which is Levenshtein aligned to e i 1 .
To use the word posterior probability in our er-ror detection model, we need to make it discrete. We introduce a feature for a word w based on its word posterior probability as follows where df is the discrete factor which can be set to 1, 0.1, 0.01 and so on.  X   X  X  X   X  is a rounding oper-ator which takes the largest integer that does not exceed  X  log ( p wpp ( w )) /df . We optimize the dis-crete factor on our development set and find the optimal value is 1. Therefore a feature  X  dwpp = 2  X  represents that the logarithm of the word poste-rior probability is between -3 and -2; As mentioned before, we consider error detec-tion as a binary classification task. To formal-ize this task, we use a feature vector  X  to rep-resent a word w in question, and a binary vari-able c to indicate whether this word is correct or not. In the feature vector, we look at 2 words before and 2 words after the current word posi-tion ( w  X  2 ,w  X  1 ,w,w 1 ,w 2 ). We collect features { wd,pos,link,dwpp } for each word among these words and combine them into the feature vector  X  for w . As such, we want the feature vector to capture the contextual environment, e.g., pos se-quence pattern, syntactic pattern, where the word w occurs.

For classification, we employ the maximum entropy model (Berger et al., 1996) to predict whether a word w is correct or incorrect given its feature vector  X  . where f i is a binary model feature defined on c and the feature vector  X  .  X  i is the weight of f i . Table 1 shows some examples of our binary model features.

In order to learn the model feature weights  X  for probability estimation, we need a training set of m samples {  X  i ,c i } m 1 . The challenge of collect-ing training instances is that the correctness of a word in a generated translation hypothesis is not intuitively clear (Ueffing and Ney, 2007). We will describe the method to determine the correctness of a word in Section 6.1, which is broadly adopted in previous work.

We tune our model feature weights using an off-the-shelf MaxEnt toolkit (Zhang, 2004). To avoid overfitting, we optimize the Gaussian prior on the development set. During test, if the proba-bility p ( correct |  X  ) is larger than p ( incorrect |  X  ) according the trained MaxEnt model, the word is labeled as correct otherwise incorrect. To obtain machine-generated translation hypothe-ses for our error detection, we use a state-of-the-art phrase-based machine translation system MOSES (Koehn et al., 2003; Koehn et al., 2007). The translation task is on the official NIST Chinese-to-English evaluation data. The training data con-sists of more than 4 million pairs of sentences (in-cluding 101.93M Chinese words and 112.78M En-glish words) from LDC distributed corpora. Table 2 shows the corpora that we use for the translation task.
 We build a four-gram language model using the SRILM toolkit (Stolcke, 2002), which is trained .pos =  X  NN  X  ,c = incorrect .dwpp = 2 ,c = correct LDC ID Description LDC2004E12 United Nations LDC2004T08 Hong Kong News LDC2005T10 Sinorama Magazine LDC2003E14 FBIS LDC2002E18 Xinhua News V1 beta LDC2005T06 Chinese News Translation LDC2003E07 Chinese Treebank LDC2004T07 Multiple Translation Chinese Table 2: Training corpora for the translation task. on Xinhua section of the English Gigaword cor-pus (181.1M words). For minimum error rate tun-ing (Och, 2003), we use NIST MT-02 as the de-velopment set for the translation task. In order to calculate word posterior probabilities, we gen-erate 10,000 best lists for NIST MT-02/03/05 re-spectively. The performance, in terms of BLEU (Papineni et al., 2002) score, is shown in Table 4. We conducted our experiments at several levels. Starting with MaxEnt models with single linguis-tic feature or word posterior probability based fea-ture, we incorporated additional features incre-mentally by combining features together. In do-ing so, we would like the experimental results not only to display the effectiveness of linguistic fea-tures for error detection but also to identify the ad-ditional contribution of each feature to the task. 6.1 Data Corpus For the error detection task, we use the best trans-lation hypotheses of NIST MT-02/05/03 generated by MOSES as our training, development, and test corpus respectively. The statistics about these cor-pora is shown in Table 3. Each translation hypoth-esis has four reference translations.
 Training MT-02 878 24,225 Development MT-05 1082 31,321 Test MT-03 919 25,619 Table 3: Corpus statistics (number of sentences and words) for the error detection task.
 To obtain the linkage information, we run the LG parser on all translation hypotheses. We find that the LG parser can not fully parse 560 sen-tences (63.8%) in the training set (MT-02), 731 sentences (67.6%) in the development set (MT-05) and 660 sentences (71.8%) in the test set (MT-03). For these sentences, the LG parser will use the the null-link scheme to generate null-linked words.
To determine the true class of a word in a gen-erated translation hypothesis, we follow (Blatz et al., 2003) to use the word error rate ( WER ). We tag a word as correct if it is aligned to itself in the Levenshtein alignment between the hypothesis and the nearest reference translation that has min-imum edit distance to the hypothesis among four reference translations. Figure 2 shows the Lev-enshtein alignment between a machine-generated hypothesis and its nearest reference translation. The  X  X lass X  row shows the label of each word ac-cording to the alignment, where  X  X  X  and  X  X  X  repre-sent correct and incorrect respectively.

There are several other metrics to tag single words in a translation hypothesis as correct or in-correct, such as PER where a word is tagged as correct if it occurs in one of reference translations with the same number of occurrences, Set which is a less strict variant of PER, ignoring the number of occurrences per word. In Figure 2, the two words  X  X ast year X  in the hypothesis will be tagged as cor-rect if we use the PER or Set metric since they do not consider the occurring positions of words. Our Table 4: Case-insensitive BLEU score and ratio of correct words (RCW) on the training, develop-ment and test corpus. metric corresponds to the m-WER used in (Ueff-ing and Ney, 2007), which is stricter than PER and Set. It is also stricter than normal WER metric which compares each hypothesis to all references, rather than the nearest reference.

Table 4 shows the case-insensitive BLEU score and the percentage of words that are labeled as cor-rect according to the method described above on the training, development and test corpus. 6.2 Evaluation Metrics To evaluate the overall performance of the error detection, we use the commonly used metric, clas-sification error rate (CER) to evaluate our classi-fiers. CER is defined as the percentage of words that are wrongly tagged as follows
The baseline CER is determined by assuming the most frequent class for all words. Since the ra-tio of correct words in both the development and test set is lower than 50%, the most frequent class is  X  X ncorrect X . Hence the baseline CER in our ex-periments is equal to the ratio of correct words as these words are wrongly tagged as incorrect.
We also use precision and recall on errors to evaluate the performance of error detection. Let n g be the number of words of which the true class is incorrect, n t be the number of words which are tagged as incorrect by classifiers, and n m be the number of words tagged as incorrect that are in-deed translation errors. The precision Pre is the percentage of words correctly tagged as transla-tion errors.
 The recall Rec is the proportion of actual transla-tion errors that are found by classifiers. F measure, the trade-off between precision and re-call, is also used.
 6.3 Experimental Results Table 5 shows the performance of our experiments on the error detection task. To compare with pre-vious work using word posterior probabilities for confidence estimation, we carried out experiments using wpp estimated from N -best lists with the classification threshold  X  , which was optimized on our development set to minimize CER. A relative improvement of 9.27% is achieved over the base-line CER, which reconfirms the effectiveness of word posterior probabilities for error detection.
We conducted three groups of experiments us-ing the MaxEnt based error detection model with various feature combinations.  X  The first group of experiments uses single  X  The second group of experiments concerns  X  The last group of experiments concerns about
The first two groups of experiments show that linguistic features, individually (except for link ) or by combination, are able to produce much better performance than word posterior probability fea-tures in both CER and F measure. The best com-bination of linguistic features achieves a relative improvement of 8.64% and 15.58% in CER and F measure respectively over word posterior prob-ability thresholding.

The Table 5 also reveals how linguistic fea-tures improve error detection. The lexical features ( pos,wd ) improve precision when they are used. This suggests that lexical features can help the sys-tem find errors more accurately. Syntactic features ( link ), on the other hand, improve recall whenever they are used, which indicates that they can help the system find more errors.

We also show the number of features in each combination in Table 5. Except for the wd feature, Figure 3: CER vs. the number of training sen-tences. the pos has the largest number of features, 199, which is a small set of features. This suggests that our error detection model can be learned from a rather small training set.

Figure 3 shows CERs for the feature combina-tion MaxEnt ( dwpp + wd + pos + link ) when the number of training sentences is enlarged incre-mentally. CERs drop significantly when the num-ber of training sentences is increased from 100 to 500. After 500 sentences are used, CERs change marginally and tend to converge. In this paper, we have presented a maximum en-tropy based approach to automatically detect er-rors in translation hypotheses generated by SMT systems. We incorporate two sets of linguistic features together with word posterior probability based features into error detection.

Our experiments validate that linguistic features are very useful for error detection: 1) they by themselves achieve a higher improvement in terms of both CER and F measure than word posterior probability features; 2) the performance is further improved when they are combined with word pos-terior probability features.

The extracted linguistic features are quite com-pact, which can be learned from a small train-ing set. Furthermore, The learned linguistic fea-tures are system-independent. Therefore our ap-proach can be used for other machine translation systems, such as rule-based or example-based sys-tem, which generally do not produce N -best lists.
Future work in this direction involve detect-ing particular error types such as incorrect po-sitions, inappropriate/unnecessary words (Elliott, 2006) and automatically correcting errors.
