 The development of Web 2.0 technology has led to huge eco-nomic benefits and challenges for both e-commerce websites and online shoppers. One core technology to increase sales and consumers X  satisfaction is the use of recommender sys-tems. Existing product recommender systems consider the order of items purchased by users to obtain a list of recom-mended items. However, they do not consider the time in-terval between the products purchased. For example, there is often an interval of 2-3 months between the purchase of printer ink cartridges or refills. Thus, recommending ap-propriate ink cartridges one week before the user needs to replace the depleted ink cartridges would increase the like-lihood of a purchase decision. In this paper, we propose to utilize the purchase interval information to improve the performance of the recommende r systems for e-commerce. We design an efficient algorithm to compute the purchase intervals between product pairs from users X  purchase his-tory and integrate this information into the marginal util-ity model. We evaluate our approach on a real world e-commerce dataset. Experimental results demonstrate that our approach significantly improves the conversion rate and temporal diversity compared to state-of-the-art algorithms. H.3.3 [ Information Storage and Retrieval ]: [Informa-tion Search and Retrieval] Algorithms, Experimentation, Measurement, Performance Recommender System, E-commerc e, Personalization, Tem-poral Diversity, Utility Theory, Purchase Intervals
Advances in Web 2.0 technology has resulted in huge eco-nomic benefits and challenges for e-commerce websites . A report in [7] reveals that the sales volume of B2C (business-to-Consumer) in China market is about 47 billion RMB yuan ( 7.5 billion US dollar) in 2011, and is expected to reach 650 billion RMB yuan ( 103 billion US dollar) in 2013. E-service providers are keen to invest in technologies that help users make purchase decisions and increase the satisfaction of users X  online shopping experiences.

One core technology in e-commerce is the use of recom-mender systems to produce a list of recommendations that users may be interested to buy. Research in recommender systems build models to characterize items (content-based filtering [19]) or users (collaborative filtering [4, 17, 12]) or both (hybrid recommender systems [13, 15]) so as to pre-dict the rating or preference that a user would give to an item. Items with the highest predicted ratings are then rec-ommended to the user. These models assume that the value of an item for a user does not change over time.

The works in [9, 16, 22] examine the temporal dynamics in recommendation systems. [16] consider the order of the items purchased and apply the Markov Chain theory to pre-dict the next item that a user will purchase. [9, 22] design models to capture changes in user preferences for products over time due to external events such as new product offer-ings, seasonal changes or festive holidays (short-term bias) as well as long term interest. Note that these works have low temporal diversity [10] since they will repeatedly recom-mend the same top-k items to a user if s/he does not make purchases often.

Figure 1 shows the purchase histories of 5 users for prod-ucts a, b, c, d, e .Weuse H i to denote the purchase history of user u i . Suppose we want to recommend some products to user u 5 at time point 24. Since u 5 has previously bought products a and c , the algorithms in [16, 22] would recom-mend product d to u 5 . This is because based on the purchase order and short-term bias, both users u 1 and u 3 buy d after purchasing c . From the long term interest of users [22], we see that users who purchase product c always purchase d . Further, suppose u 5 does not buy d at time point 24. When s/he logs into the system at time points 19 and 21, the algorithms in [16, 22] will still recommend d to u 5 .
In this work, we advocate that the intervals between user purchases may influence a user X  X  purchase decision. A quick survey reveals that users who purchase an iphone usually purchase apps one week later, after they have setup the new phone and become familiar with its use. Thus recommend-ing apps to a new iphone user a day after is not likely to increase sales, whereas pushing apps 5-6 days later is prob-ably more effective.

Consider again our example in Figure 1. For illustrative purposes, let us assume that the interval between each time point is a day. We observe that user u 2 buys product d 14 days after s/he has bought a , while user u 3 buys d 12 days after s/he has bought a . We could conclude that, on average, users are likely to purchase d 13 days after s/he has purchased a . Assuming that all the users u 1 to u 5 are similar, we can summarize the average purchase interval be-tween product pairs from their purchase histories as shown in Table 1. Based on Table 1, if u 5 logs into the system at time point 24, then we will recommend product d since s/he has bought a 13 days ago. However, if s/he logs into the system at time point 27, then we will recommend product b to him/her because we see that users who bought c tend to buy b 11 days later. Similarly, our approach will recommend e to u 5 if s/he logs into the system at time point 29.
Theories in economics and consumer behavior postulate that the value of certain products may change over time, especially if the user has recently purchased them. This is known as the Law of Diminishing Marginal Utility [1]. For example, a user is less likely to buy a second computer or mobile phone if s/he has recently bought one. In contrast, products such as milk, bread and eggs are likely to be pur-chased over and over again. Thus the value or marginal utility of a product for a user depends on his/her purchase history. Recent works have applied these theories to rec-ommender systems [11, 21]. The authors in [21] incor-porate marginal utility into product recommender systems. They adapt the widely used Cobb-Douglas utility function [3] to model product-specific diminishing marginal return and user-specific basic utility to personalize recommenda-tion.

Here, we propose a framework that incorporates purchase intervals for product recommendation. The model in our framework will combine purchase interval information in users X  purchase histories with marginal utility. This enables us to increase the temporal diversity of the recommended items which is an important facet of product recommender systems [10]. Given the scale of users, products and pur-chase history in any e-commerce website, we design an algo-rithm to efficiently compute the purchase interval between pairs of product for all users. We evaluate our method on a real world data set obtained from an e-commerce B2C website Jingdong in China. The experimental results show that our approach improves the conversion rate, precision and recall of the state-of-the-art utility-based recommenda-tion algorithm [21]. Further, we can achieve a significantly higher temporal diversity compared to traditional recom-mender systems.

The rest of the paper is organized as follows. Section 2 gives the background of the concepts used in this paper. Sec-tion 3 describes our proposed framework. Section 4 gives the results of our experimental study. Section 5 discuss related works and we conclude in section 6.
In this section, we provide the background for the eco-nomics concepts used in our proposed model. We review the notions of utility, utility surplus and the law of diminishing marginal utility and discuss how these concepts are adapted to model product-specific diminishing marginal return and user-specific utility for personalized recommendation.
Utility and Utility Surplus are two fundamental concepts from economics. Utility can be defined as a measure of the satisfaction obtained from the consumption or purchase of various goods and services. The utility of a product i ,de-noted as  X  i , can be modeled as the weighted sum of k char-acteristics or features of the product as follows: where c k i is the k th feature of product i and  X  k is its weight.
Utility surplus determines the excess utility one gets by purchasing a product. It is defined as the gain in the utility of a product minus the cost/price of the product as follows: where price i is the price of product i and  X  is the marginal net utility of money.

Equations 1 and 2 assume that users have the same pref-erence for the features of a product. In reality, users may have different preferences for a product X  X  features. In or-der to personalize product recommendations, we revise the above equations to allow user-specific preferences for prod-uct features as follows: where  X  k u is the user u  X  X  preference for the k th feature of product i and  X  u is the sensitivity of user u to the product price.

Consumer behavior theory shows that a person usually makes a purchase decision depending on a product X  X  utility surplus. Hence, our goal is to find the list of products that maximizes the utility surplus for users.
The Law Of Diminishing Marginal Utility states the marginal utility of product drops as the consumption of the product increases. Thus, each product will have a product-specific diminishing rate  X  i . [21] use the well-known Constant elas-ticity of substitution(CES) to capture this property. If a user has already purchased X i quantity of product i ,then then the marginal utility of buying an additional unit of i is ( X By taking into consideration the Law Of Diminishing Marginal Utility, we can refine the utility surplus as follows:
US ( X i ,i,u )=  X  u,i  X  (( X i +1)  X  i  X  X  X  i i )  X   X  u
Note that in Equation 5, the utility surplus is decreased due to the diminishing effect.
Our proposed framework incorporates the information of purchase intervals into the utility surplus model. It has three main phases:
Phase I: Generate Purchase Interval Cube. This phase computes a purchase interval matrix M u for each user from his/her purchase history. Each cell M u [ i, j ]storesthe interval between the purchase of products i and j for user u . We obtain a purchase interval cube when we combine the purchase interval matrix of all the users. Section 3.1 gives the computational details of this phase.

Phase II: Build Model. This phase uses the SVD ma-trix factorization method [8] to learn the feature vectors of users and products from the training data. Then we can learn the optimal settings for the parameters in our purchase interval enhanced utility based model. We discuss how to incorporate the purchase interval information into the util-ity model in Equation 5 in Section 3.2 and estimate its parameters in Section 3.3.

Phase III: Recommendation. When a user logs into the system at time t , we use our model to compute the utility surplus of each product at this time point t and rank them. A list of top K products that the user is most likely to purchase is recommended to the user.
An e-commerce database D consists of a set of users U , product items I and purchase histories of users H .Each entry in the purchase history is a tuple &lt;u,i,t&gt; which records the time t at which user u purchase item i .
Let H u be the purchase history of user u and I u be the set of products purchased by a user u over a time window  X  .For each pair of products i , j  X  I u , we want to find the average time interval when u would purchase j after purchasing i . Since u may purchase products i and j multiple times, we let T i and T j be the sets of time stamps at which u bought i and j respectively. For each t j  X  T j , we find the t i such that t j  X  t i is the smallest and is less than  X  .Let X = { [ t pairs of time stamps. Then the average purchase interval d u,i,j where a user u buys product j after buying product i can be determined as follows: where the function count ( t i r ,t j r ) returns the number of products purchased by the user between time stamps t i r and t .

Note that Equation 6 considers both the time interval be-tween the purchase of the two products i and j ,aswellas the number of products bought in between i and j .Wepe-nalize the interval that has more purchases in between by taking the log .

Given the huge amount of user purchase histories and the large number of users and products, we need an efficient method to compute the purchase intervals between prod-uct pairs. Algorithm 1 gives the details of generating the purchase interval cube that captures the purchase interval between pairs of products for all users.

The algorithm takes as input the set of user purchase his-tories H and the window size  X  .Eachentry e in the user purchase history is a 3-tuple consisting of the user id u ,prod-uct id id and a time stamp t . The output is a purchase in-terval cube M that stores the purchase intervals of products for all users. We denote the purchase history and purchase interval matrix for each user u as H u and M u respectively.
For each user, we slide a window of size  X  over his/her purchase history H u and use a list Q to maintain the pur-chases which occur in the current window. The list R stores tuples containing product pairs and their smallest purchase intervals. Each entry in R is a 4-tuple &lt;i,j,x,c&gt; where i and j are product ids, x is the purchase interval between i and j ,and c is the number of products purchased between i and j . In order to reduce computation, we use two lists R and R w to temporally store the interval pairs corresponding to the purchase entries in Q . These lists are initialized in lines 1-4. For each entry e in the user purchase history, we compare the timestamps between e and the oldest entry e in Q . If the purchase interval exceeds the window size  X  , we remove e from Q and all the records that has the same product id as e from the list R w , that is, we do not need to
Algorithm 1 : Generate Purchase Interval Cube consider this pair of products e .id and e.id further (Lines 8-10).

Based on the latest entry e in Q and the records in R w , we update the interval and count of products purchased be-tween r.i and e.id (Lines 12-33). If a user has purchased the product e.id more than once in the window  X  ,thenwe remove records whose time intervals are not the smallest (Lines 19-23 and 31-33). Otherwise, we generate new inter-val records r and store them in both R and R w (Lines 25-28). Note that we only need to update the interval records in R w with the time difference between e and the latest entry e in Q (line 12-17). Lines 34-36 creates an interval record r for each entry e and inserts e into Q .

Finally, R stores the list of purchase intervals between product pairs for a user u . We apply Equation 6 to compute d u,i,j .Eachcell M u [ i, j ]storesthevalueof d u,i,j (Line 37). The purchase interval matrix of all users u  X  U will form Figure 2: Purchase Interval Cube obtained from Figure 1 a purchase interval cube M . Figure 2 shows the purchase interval cube obtained for our example in Figure 1.
Let us illustrate Algorithm 1 with user u 1  X  X  purchase his-tory in Figure 1. Suppose  X  issetto20. Thefirstentry e is &lt;u 1 ,c, 1 &gt; . Since all the lists are initially empty, we create a record r &lt; c, c, 0 , 0 &gt; and add it to R also insert e into Q . When we process the second entry &lt;u 1 ,d, 8 &gt; , we compare its timestamp with that of the first entry &lt;u 1 ,c, 1 &gt; in Q to check whether their pur-chase interval exceeds  X  . Since it does not, we will compute the interval x =8and c = 1 and generate a new record &lt;c,d, 7 , 1 &gt; . We insert this record into R and update R R w now has two records, &lt;c,d, 7 , 1 &gt; and &lt;d,d, 0 , 0 &gt; . The third and fourth entries in H u 1 are similarly processed. Figure 3(a) shows the lists Q , R w and R obtained.
When we process the entry &lt;u 1 ,b, 16 &gt; in H u 1 , we find that there is another entry for product b in Q .Wecreatenew ( b, b )and( e, b ). We also remove the older entry &lt;u from Q and insert &lt;u 1 ,b, 18 &gt; into Q . Figure 3(b) shows the updated lists.

When we process the last entry &lt;u 1 ,a, 22 &gt; , we find that its timestamp and that of the first entry &lt;u 1 ,c, 1 &gt; in Q exceeds the window size  X  .Hence,weremove &lt;u 1 ,c, 1 &gt; from Q and the corresponding records &lt;c,b, 17 , 3 &gt; from R w . We only need to create 3 new records for R (see Fig-ure 3(c)).

Algorithm 1 only needs to scan the user purchase history once. It has a complexity of O ( | U | X  m  X  n )where m is the maximum number of purchase entries in the window size  X  and n = max ( | H u | ).

In order to ensure that we only consider frequently pur-chased product pairs, we will do a post-processing of the purchase interval cube M obtained from the user history as follows. For each product pair i and j ,wecountthenumber of users u such that M u [ i, j ] is nonzero. If the number of users that purchase this pair of products is less than some threshold, then we will discard this pair of products and set M u [ i, j ] to a null value.
Due to the sparsity problem, it is impossible to generate all the intervals between pairs of products from a user X  X  own purchase history. We address this by using the purchase history of similar users to estimate the purchase interval information. We denote the similarity between user u and u as sim ( u, u ). Then the average purchase interval between two products i and j for user u can be estimated as follows: The similarity between users can be obtained by using some existing latent factor based methods. In our experiments, we use the degree of overlap in the users X  purchase histories as a measure of their similarity.

Having obtained the average purchase interval between product pairs for each user, the next step is to incorporate the interval factor into the utility plus model. Suppose a user u has already purchased a set of products I u and s/he logs into the system at time t . Before we recommend some product j , we want to consider the effect of the interval between a product i  X  I u and j . We model this purchase interval factor PI ( u, i, j ) as follows: Equation 8 reduces the effect of purchase intervals by the distance between ( t  X  t i )and d u,i,j . For example, suppose we have estimated that u typically buys product jd u,i,j days after buying product i . Then we will recommend product j to u if | ( t  X  t i )-d i,j,u | &lt; .

We can now modify the utility surplus function to include the purchase interval factor as follows:
US + ( X i ,i,u )= (9)
In Equation 9,  X  u,i is the basic utility of product i to user u and  X  u is the sensitivity of u to the product price p . The term (( X i +1)  X  i  X  X  X  i i ) considers the return rate  X  for product i , while the term (1 + max j  X  H u PI ( u, j, i )) accounts for the purchase interval factor. Note that we find the product pair ( j, i ) that has the largest purchase interval effect and add an product-specific parameter  X  i to tune the effect of each product.
In this section, we discuss how we estimate the parameters  X  u,i ,  X  i ,  X  i and  X  u in Equation 9. Recall that
We use the SVD matrix factorization method [8] to learn the user preference for the product features. Given a | U user-product matrix A ,eachentry a u,i in A can be estimated as
With this, we replace  X  k u and c k i in Equation 10 with p and q i respectively. We have  X  u,i =  X  A u,i This allows us to use SVD to estimate the utility of a product to a user.
Similar to [21], we define the joint probability of these parameters as: JP = where Pr ( r u,i,t | US + ( X i ,i,u )) denotes the conditional prob-ability of a user u making the decision to purchase product i at time t given the utility surplus value US + ( X i ,i,u )at time t .
 Here, we define
Pr ( r u,i,t | US + ( X i ,i,u )) = 1 where r u,i,t =1ifuser u purchase i at time t .Otherwise r u,i,t =  X  1. Note that a higher utility surplus value indicates that the user is more likely to purchase the product i .
The parameters can be estimated by maximizing the joint probability. We assume Gaussian priors on all the model parameters N (  X , 1  X  ). For p u and q i ,wehave  X  p u =  X  and variance  X  1 . The mean and variance for  X ,  X  and  X  are  X  , X   X  ,  X   X  and  X   X  , X   X  ,  X   X  respectively. Then maximizing the joint probability is equivalent to minimizing the negative log likelihood as follows: ( p u ,q i , X  u , X  i , X  i )= argmin [  X  logJP ]
We use the stochastic gradient descent method to find the optimal values for the parameters. Our learning algorithm updates the parameters by using the following first order derivatives:
At each iteration, the learning rate is controlled by  X  1  X  3 and  X  4 .Thevaluesof  X  1 ,  X  2 ,  X  3 ,  X  4 ,  X  1 ,  X   X  , X  can be set by cross-validation.
In this section, we report the results of the experiments we have carried out to evaluate the effectiveness of our proposed approach. We call our method SV D pi .Wealsocomparethe performance of our method with three algorithms: 1. TopPop . This is a baseline algorithm which recom-2. SV D [8]. SVD is a widely used recommendation algo-3. SV D util [11]. SV D util is the state-of-the-art recom-
Since SV D , SV D util and SV D pi all have a learning phase to set the optimal values for their parameters, we use the first 90% of each user X  X  purchase history for training and the remaining 10% for testing. We associate each user u and each product i with a feature vector p u and q i respectively. We set the dimension of the latent factor is 50.

We use both positive and negative training points. Each purchase record is a positive point. Given that the density of e-commerce data set is usually much lower than that of movie or music rating dataset [5], we randomly sample 0.1% of the missing entries and set them to 0 to train the SV D model. For SV D util and SV D pi , we randomly sample 1% from the missing entries as negative points.
We collect a dataset from Jingdong which is one of the biggest B2C e-commerce websites in China. We crawled products that belong to the electronic category. The dataset consists of 197,025 users, 98,302 products and 2,610,279 pur-chase records from January 2010 to November 2011. The density of the dataset is 0.013%.

We pre-process the dataset to remove products that have less than 10 purchase records, as well as users who have purchased less than 10 products. The clean dataset D has 96,882 users, 6,921 products and 2,302,066 purchase records. The density of this dataset is now 0.34%. We sort the pur-chase records according to the users to form their purchase history. Records in each user purchase history are ordered by their time stamps. Figure 4 shows the distribution of the number of distinct number of products bought by users and the popularity of the products. As expected, there is a long tail in the products purchased.
Our evaluation metrics include temporal diversity, conver-sion rate, precision and recall. Temporal diversity measures the differences between two lists of recommendations when a user logs into the system at different times. For example, suppose a user is given a set of 5 recommended products at time t . If he logs into the system later and only 1 of the 5 recommendations is different, then the diversity between the two lists is 1/5 = 0.2. [10] derives the diversity between two lists L t and L t from their set theoretic difference as follows: where K is the number of products in each list. If the two lists are exactly the same, then diversity is 0.

Conversion rate is a commonly used metric in e-commerce to determine if a user has obtained at least one good recom-mendation. If the user purchased at least one product from the recommended top K list, then we say that the user has switched from a browser to a buyer. If L is the list of rec-ommended products and L is the list of products actually purchased by the user, then the conversion rate is given by:
We compare the conversion rate of the various algorithms by taking the average of values computed for each test user.
The standard definitions for precision and recall are as follows:
We first examine the effect of the window size  X  on the conversion rate, recall and precision of the various algo-rithms. We set  X  to 7, 14, 21, 28 and 35 days. This im-plies that the purchase intervals generated are less than or equals to  X  . Table 2 shows the accumulated density of the purchase interval matrix generated by Algorithm 1 for the different values of  X  . We observe that the density increases as we consider larger purchase intervals.

Figure 5 gives the results of this experiment for different values of K . We see that the conversion rate increases as K increases. Similar observations are made for the precision and recall graphs. The best result is obtained when  X  = 28. We use this window size for the rest of the experiments.
Next, we compare the performance of our algorithm SV D pi to TopPop , SV D and SV D util . Figure 6 shows the results. Since TopPop recommends the most popular products and is not personalized, it has the lowest conversion rate com-pared to the personalized SVD-based methods. When we compare SV D pi with SV D and SV D util ,weseethatus-ing purchase intervals significantly improves the conversion rate, recall and precision of the recommendations.
We give an example of the results obtained. Table 3 gives the products corresponding to the product IDs. Ta-ble 4 shows a sample of the purchase intervals between the products 229040002 (DVD-ROM) and 24101000 e (Wireless Router) computed from the dataset. We observe that users typically purchase a DVD-ROM about 25 days after pur-chasing a Wireless Router.

Table 5 shows a sample of user U 10370829  X  X  purchase his-tory in the training data. The first entry in the testing data for this user is &lt; 229040002 , 2010  X  07  X  16 &gt; indi-cating that s/he purchases the product 229040002 (DVD-ROM) at time 2010  X  07  X  16. Upon examining the list of products recommended by the various algorithms, we find that our method SV D pi also recommends this product 229040002 (DVD-ROM) to the user, whereas both SV D and SV D util recommend the product 23d010004 (Internet Ca-ble). From the user purchase history data, we find that users either purchase the products 24101000e (Wireless Router) and 23d010004 (Internet Cable) together, or purchase In-ternet Cable 1-2 days after buying Wireless Router. Since SV D and SV D util do not consider the purchase intervals, both of them recommend the product Internet Cable to user U Table 2: Effect of  X  on the Density of Purchase In-terval Matrix
Product ID Product Title 22306000e Galaxy GT430 512MB DDR5 Graphics Card 229040002 LITEON 18X DVD-ROM 23d010004 PHILIPS SWA1938/93-5 Internet Cable 5M 23d02000e CHOSERL Q505 VGA Cable 1.5M 24101000e TP-LINK WR340G+ 54M Wireless Router Table 5: Sample of User U 10370829  X  X  Purchase History in Training Data
We also investigate the temporal diversity of the various algorithms. We obtain the first recommendation list L at the time stamp of the first entry in the testing data. Then we partition the testing data into two and put the first partition into the training data. We re-run the algorithms on this larger training data and obtain a second recommendation list L at the time stamp of the first entry in the second partition.

Figure 7 shows the temporal diversity result for the top-5 and top-10 recommended items. The temporal diversity of TopPop is 0 because both its recommendation lists contains the same popular products. Our proposed method SV D pi has the highest temporal diversity compared to SV D and SV D util since the products recommended depends on the time at which the user logs into the system.

Based on the results, we envisage that our proposed ap-proach would be useful in email-based or message-based marketing applications. At different time points, when we want to push some products to consumers, we can determine the products that would be most attractive to consumers at that time point instead of only products that consumers may potentially like.
 Figure 7: Top-5 and Top-10 Temporal Diversity for TopPop,SVD,SVD util ,SVD pi
Finally, we study the effect of taxonomy on the various al-gorithms. Based on the original e-commerce website, prod-ucts are classified under various levels of category, e.g., both the products  X  X ELL V3400R-426S 14 inch laptop X  and  X  X ELL V3400R-426S 13.3 inch laptop X  fall under the same brand  X  X ell X  which is under the product type  X  X aptops X  .The product type  X  X aptops X  is under  X  X omputers X  which is un-der  X  X omputers &amp; Software X  . Thus, we could consider both models of the Dell laptops as the same product type.
In this experiment, we replace specific product models by their product type and brand, that is, we generalize  X  X ELL V3400R-426S 14 inch laptop X  and  X  X ELL V3400R-426S 13.3 inch laptop X  to a more general product called  X  X ELL Laptops X  . Then we re-generate the purchase interval cube and learn a new model for recommendation. Note that we drop the product price term from Equation 9 since we would not have the price of the generalized product.
Figure 8 gives the conversion rate and temporal diver-sity of the algorithms on this dataset. We observe that all the methods show improvement in the conversion rate. The temporal diversity of all the algorithms decrease slightly be-cause the total number of distinct products is reduced when we merge the individual product models of the same brand to their product type. The gap between SV D pi and the other algorithms widens as the density of the purchase in-terval cube increases with the use of taxonomy.
There has been a long stream of research in recommender systems. Collaborative filtering (CF) has been widely used in these systems. Works in CF can be divided into two cat-egories: memory-based CF and model-based CF. Memory-based CF utilizes the entire user-item-rating data to predict user preferences of new items by identifying similar users. The similarity computation employs measures such as TF-IDF. Representative memory-based CF algorithms include item-based and user-based KNN algorithms [4, 17, 12]. However, memory-based CF algorithms cannot handle data sparsity well and are not scalable.

Model-based approaches have been proposed to alleviate these problems. A model-based CF technique typically uses theuser-item-ratingdatatolearnamodelforprediction [2]. Well known model-based CF include Bayesian belief nets(BNs) CF models [2, 14, 20], latent factor models [6] and clustering CF models [18]. Research on model-based CF reached a peak in the Netflix movie recommendation compe-tition where a matrix factorization-based CF approach such as SVD is used to learn the model.

In product recommender systems, users X  preference tend to change over time. The work in [16] combines the latent factor model and Markov chain model to predict the next basket of products that may be purchased by users. This method utilizes the order of products purchased as the tem-poral information. Liang et. al [22] propose that the score of each product should be determined by both the long-term preference and short-term bias due to external events such as seasonal festivities. The long-term preference is defined as user similarity when they purchase the same products, while the short-term bias consider the product similarity over a short period of time. The work in [9] design a method to learn the temporal changes of users and items.

The work in [11] highlights that product recommender systems differ from the music or movie recommender systems as the former should take into account the utility of products in their ranking. The authors employ the utility and utility surplus theories from economics and marketing to improve the list of recommended product. [10] use the SVD model to learn the features of products and enhance the model with the Law of Diminishing Marginal Utility. In our work, we combine the notions of purchase intervals and utility surplus to obtain a model that increases the temporal diversity of products recommended.
In this paper, we have investigated how purchase intervals are able to increase the temporal diversity and conversion rate in product recommender systems. Existing works have primarily considered the order of items purchased by users and do not consider the time interval between the products purchased. We have designed a model that combines pur-chase interval information in users X  purchase history with marginal utility and the Law of Diminishing Returns. We have also devised an efficient algorithm to generate a pur-chase interval cube by scanning users X  purchase history once. Experimental results on a real world data set obtained from an e-commerce B2C website Jingdong in China demonstrate that the proposed approach improves the precision, recall, conversion rate of the state-of-the-art recommendation algo-rithms. It also significantly improves the temporal diversity which is essential for product recommendation systems. Fu-ture work includes enhancing our model with user purchase data from multiple e-commerce websites and using MapRe-duce to increase the scalability of our algorithms. [1] W.J. Baumol and A.S. Blinder. Microeconomics: [2] J.S. Breese, D. Heckerman, and C. Kadie. Empirical [3] C. Cobb and P. Douglas. Latent semantic models for [4] K. Goldberg, T. Roeder, D. Gupta, and C. Perkins. [5] J.L.Herlocker,J.A.Konstan,L.G.Terveen,andJ.T. [6] T. Hofmann. Latent semantic models for collaborative [7] http://news.imeigu.com/a/1315461895947.html.
 [8] Y. Koren. Factorization meets the neighborhood: a [9] Y. Koren. Collaborative filtering with temporal [10] N. Lathia, S. Hailes, L. Capra, and X. Amatriain. [11] B. Li, A. Ghose, and P.G. Ipeirotis. Towards a theory [12] M.R. McLaughlin and J.L. Herlocker. A collaborative [13] P. Melville, R.J. Mooney, and R. Nagarajan.
 [14] K. Miyahara and M.J. Pazzani. Collaborative filtering [15] D.Y. Pavlov and D.M. Pennock. A maximum entropy [16] S. Rendle, C. Freudenthaler, and L. Schmidt-Thieme. [17] B. Sarwar, G. Karypis, J. Konstan, and J. Reidl. [18] S.H. Seng, S. Chee, J. Han, and K. Wang. Rectree: [19] L. Si and R. Jin. Flexible Mixture Model for [20] X. Su and T.M. Khoshgoftaar. Collaborative filtering [21] J. Wang and Y. Zhang. Utilizing marginal net utility [22] L. Xiang, Q. Yuan, and S. et. al. Zhao. Temporal
