 The effort required by a human annotator to de-tect sentiment is not uniform for all texts. Com-pare the hypothetical tweet  X  Just what I wanted: a good pizza.  X  with  X  Just what I wanted: a cold pizza.  X . The two are lexically and structurally similar. However, because of the sarcasm in the second tweet (in  X  X old X  pizza, an undesirable sit-uation followed by a positive sentiment phrase  X  X ust what I wanted X , as discussed in Riloff et al. (2013)), it is more complex than the first for senti-ment annotation. Thus, independent of how good the annotator is, there are sentences which will be perceived to be more complex than others. With regard to this, we introduce a metric called senti-ment annotation complexity (SAC) . The SAC of a given piece of text (sentences, in our case) can be predicted using the linguistic properties of the text as features.

The primary question is whether such complex-ity measurement is necessary at all. Fort et al (2012) describe the necessity of annotation com-plexity measurement in manual annotation tasks. Measuring annotation complexity is beneficial in annotation crowdsourcing. If the complexity of the text can be estimated even before the annota-tion begins , the pricing model can be fine-tuned (pay less for sentences that are easy to annotate, for example). Also, in terms of an automatic SA engine which has multiple classifiers in its ensem-ble, a classifier may be chosen based on the com-plexity of sentiment annotation (for example, use a rule-based classifier for simple sentences and a more complex classifier for other sentences). Our metric adds value to sentiment annotation and sen-timent analysis, in these two ways. The fact that sentiment expression may be complex is evident from a study of comparative sentences by Gana-pathibhotla and Liu (2008), sarcasm by Riloff et al. (2013), thwarting by Ramteke et al. (2013) or implicit sentiment by Balahur et al. (2011). To the best of our knowledge, there is no general ap-proach to  X  X easure X  how complex a piece of text is, in terms of sentiment annotation.

The central challenge here is to annotate a data set with SAC. To measure the  X  X ctual X  time spent by an annotator on a piece of text, we use an eye-tracker to record eye-fixation duration: the time for which the annotator has actually focused on the sentence during annotation. Eye-tracking an-notations have been used to study the cognitive as-pects of language processing tasks like translation by Dragsted (2010) and sense disambiguation by Joshi et al. (2011). Mishra et al. (2013) present a technique to determine translation difficulty index. The work closest to ours is by Scott et al. (2011) who use eye-tracking to study the role of emotion words in reading.

The novelty of our work is three-fold: (a) The proposition of a metric to measure complexity of sentiment annotation, (b) The adaptation of past work that uses eye-tracking for NLP in the con-text of sentiment annotation, (c) The learning of regressors that automatically predict SAC using linguistic features. The process of sentiment annotation consists of two sub-processes: comprehension (where the an-notator understands the content) and sentiment judgment (where the annotator identifies the sen-timent). The complexity in sentiment annotation stems from an interplay of the two and we expect SAC to capture the combined complexity of both the sub-processes. In this section, we describe how complexity may be introduced in sentiment annotation in different classical layers of NLP.
The simplest form of sentiment annotation com-plexity is at the lexical level . Consider the sen-tence  X  It is messy, uncouth, incomprehensible, vi-cious and absurd  X . The sentiment words used in this sentence are uncommon, resulting in com-plexity.

The next level of sentiment annotation com-plexity arises due to syntactic complexity . Con-sider the review:  X  A somewhat crudely con-structed but gripping, questing look at a person so racked with self-loathing, he becomes an enemy to his own race.  X . An annotator will face difficulty in comprehension as well as sentiment judgment due to the complicated phrasal structure in this re-view. Implicit expression of sentiment introduces complexity at the semantic and pragmatic level. Sarcasm expressed in  X  It X  X  like an all-star salute to disney X  X  cheesy commercialism  X  leads to difficulty in sentiment annotation because of positive words like  X  an all-star salute  X .

Manual annotation of complexity scores may not be intuitive and reliable. Hence, we use a cog-nitive technique to create our annotated dataset. The underlying idea is: if we monitor annotation of two textual units of equal length, the more com-plex unit will take longer to annotate, and hence, should have a higher SAC . Using the idea of  X  X n-notation time X  linked with complexity, we devise a technique to create a dataset annotated with SAC.
It may be thought that inter-annotator agree-ment (IAA) provides implicit annotation: the higher the agreement, the easier the piece of text is for sentiment annotation. However, in case of multiple expert annotators, this agreement is ex-pected to be high for most sentences, due to the expertise. For example, all five annotators agree with the label for 60% sentences in our data set. However, the duration for these sentences has a mean of 0.38 seconds and a standard deviation of 0.27 seconds. This indicates that although IAA is easy to compute, it does not determine sentiment annotation complexity of text in itself. We wish to predict sentiment annotation complex-ity of the text using a supervised technique. As stated above, the time-to-annotate is one good can-didate. However,  X  X imple time measurement X  is not reliable because the annotator may spend time not doing any annotation due to fatigue or distrac-tion. To accurately record the time, we use an eye-tracking device that measures the  X  X uration of eye-tracker that may have been used is  X  X accade nificant for annotation of short text, as in our case. Hence, the SAC labels of our dataset are fixation durations with appropriate normalization.

It may be noted that the eye-tracking device is used only to annotate training data. The actual prediction of SAC is done using linguistic features alone. 3.1 Eye-tracking Experimental Setup We use a sentiment-annotated data set consisting of movie reviews by (Pang and Lee, 2005) and tweets from http://help.sentiment140. com/for-students . A total of 1059 sen-tences (566 from a movie corpus, 493 from a twit-ter corpus) are selected.

We then obtain two kinds of annotation from five paid annotators: (a) sentiment (positive, nega-tive and objective), (b) eye-movement as recorded
Figure 1: Gaze-data recording using Translog-II by an eye-tracker. They are given a set of instruc-tions beforehand and can seek clarifications. This experiment is conducted as follows: 1. A sentence is displayed to the annotator on 2. While the annotator reads the sentence, a 3. The experiment then continues in modules of We ensure the quality of our dataset in different ways: (a) Our annotators are instructed to avoid unnecessary head movements and eye-movements outside the experiment environment. (b) To min-imize noise due to head movements further, they are also asked to state the annotation verbally, which was then manually recorded, (c) Our an-notators are students between the ages 20-24 with English as the primary language of academic in-struction and have secured a TOEFL iBT score of 110 or above.

We understand that sentiment is nuanced-to-wards a target, through constructs like sarcasm and presence of multiple entities. However, we want to capture the most natural form of sentiment anno-tation. So, the guidelines are kept to a bare mini-mum of  X  annotating a sentence as positive, nega-tive and objective as per the speaker  X . This exper-iment results in a data set of 1059 sentences with a fixation duration recorded for each sentence-timent annotation is 0.686. 3.2 Calculating SAC from eye-tracked data We now need to annotate each sentence with a SAC. We extract fixation durations of the five an-notators for each of the annotated sentences. A single SAC score for sentence s for N annotators is computed as follows: In the above formula, N is the total number of an-notators while n corresponds to a specific annota-tor. dur ( s,n ) is the fixation duration of annotator n on sentence s . len ( s ) is the number of words in sentence s . This normalization over number of words assumes that long sentences may have high dur ( s,n ) but do not necessarily have high SACs.  X  ( dur ( n )) ,  X  ( dur ( n )) is the mean and standard deviation of fixation durations for anno-tator n across all sentences. z ( n,. ) is a function that z-normalizes the value for annotator n to stan-dardize the deviation due to reading speeds. We convert the SAC values to a scale of 1-10 using min-max normalization. To understand how the formula records sentiment annotation complexity, consider the SACs of examples in section 2. The sentence  X  X t is messy , uncouth , incomprehensi-ble , vicious and absurd X  has a SAC of 3.3. On the other hand, the SAC for the sarcastic sentence  X  X t X  X  like an all-star salute to disney X  X  cheesy commer-cialism. X  is 8.3. The previous section shows how gold labels for SAC can be obtained using eye-tracking experi-ments. This section describes our predictive for SAC that uses four categories of linguistic fea-tures: lexical, syntactic, semantic and sentiment-related in order to capture the subprocesses of an-notation as described in section 2. 4.1 Experiment Setup The linguistic features described in Table 3.2 are extracted from the input sentences. Some of these Feature Description -Word Count -Degree of polysemy Average number of Wordnet senses per word -%ge of nouns and adjs. -%ge of Out-of-vocabulary words -Non-terminal to Ter-minal ratio -Discourse connectors Number of discourse connectors -Subjective Word Count -Subjective Score Sum of SentiWordNet scores of all words tools and NLTK (Bird et al., 2009). Words that words. The training data consists of 1059 tuples, with 13 features and gold labels from eye-tracking experiments.

To predict SAC, we use Support Vector Regres-sion (SVR) (Joachims, 2006). Since we do not have any information about the nature of the rela-tionship between the features and SAC, choosing SVR allows us to try multiple kernels. We carry out a 5-fold cross validation for both in-domain and cross-domain settings, to validate that the re-gressor does not overfit. The model thus learned is evaluated using: (a) Error metrics namely, Mean Squared Error estimate, Mean Absolute Error esti-mate and Mean Percentage Error. (b) the Pearson correlation coefficient between the gold and pre-dicted SAC. 4.2 Results The results are tabulated in Table 2. Our obser-vation is that a quadratic kernel performs slightly better than linear. The correlation values are pos-itive and indicate that even if the predicted scores are not as accurate as desired, the system is capa-ble of ranking sentences in the correct order based on their sentiment complexity. The mean percent-age error (MPE) of the regressors ranges between 22-38.21%. The cross-domain MPE is higher than the rest, as expected.

To understand how each of the features per-forms, we conducted ablation tests by con-sidering one feature at a time. Based on the MPE values, the best features are: Mean word length (MPE=27.54%), Degree of Polysemy (MPE=36.83%) and %ge of nouns and adjectives (MPE=38.55%). To our surprise, word count per-forms the worst (MPE=85.44%). This is unlike tasks like translation where length has been shown and correlation with the gold labels. to be one of the best predictors in translation dif-ficulty (Mishra et al., 2013). We believe that for sentiment annotation, longer sentences may have more lexical clues that help detect the sentiment more easily. Note that some errors may be intro-duced in feature extraction due to limitations of the NLP tools. Our proposed metric measures complexity of sen-timent annotation, as perceived by human annota-tors. It would be worthwhile to study the human-machine correlation to see if what is difficult for a machine is also difficult for a human . In other words, the goal is to show that the confidence scores of a sentiment classifier are negatively cor-related with SAC.

We use three sentiment classification tech-niques: Na  X   X ve Bayes, MaxEnt and SVM with un-igrams, bigrams and trigrams as features. The training datasets used are: a) 10000 movie reviews from Amazon Corpus (McAuley et. al, 2013) and b) 20000 tweets from the twitter corpus (same as mentioned in section 3). Using NLTK and Scikit-tive/negative classifiers, for all possible combina-tions of the three models and two datasets. text t is computed as follows: Table 3: Correlation between confidence of the classifiers with SAC; Numbers in parentheses in-dicate classifier accuracy (%)
Table 3 presents the accuracy of the classifiers along with the correlations between the confidence score and observed SAC values. MaxEnt has the highest negative correlation of -0.29 and -0.26. For both domains, we observe a weak yet nega-tive correlation which suggests that the perception of difficulty by the classifiers are in line with that of humans, as captured through SAC. We presented a metric called Sentiment Annota-tion Complexity (SAC), a metric in SA research that has been unexplored until now. First, the pro-cess of data preparation through eye tracking, la-beled with the SAC score was elaborated. Using this data set and a set of linguistic features, we trained a regression model to predict SAC. Our predictive framework for SAC resulted in a mean percentage error of 22.02%, and a moderate corre-lation of 0.57 between the predicted and observed SAC values. Finally, we observe a negative corre-lation between the classifier confidence scores and a SAC, as expected. As a future work, we would like to investigate how SAC of a test sentence can be used to choose a classifier from an ensemble, and to determine the pre-processing steps (entity-relationship extraction, for example).
