 1. Introduction research area in power systems. Conventionally, it can be con-sidered as a multi-objective optimization problem with con-straints ( Ahuja et al., 2007 ). Heuristic algorithms are classical methods which used to solve this kind of optimization problem ( Gomes et al., 2005 ). Due to the stochastic nature of the problem, computational intelligence algorithms, such as genetic algorithms (GA) ( Padamati et al., 2007 ), particle swarm optimization (PSO) ( Das et al., 2008 ; Nasir et al., 2009 ; Chakraborty et al., 2011 ;
Samal et al., 2010 ; Ghosh et al., 2012a , 2012b ), differential evolution, ant colony optimization, and hybrid approach ( Chiong, 2009 ; Yan, 2008 ), have been utilized by some research-ers, respectively. Generally speaking, a necessary objective for reconfiguration problems is to minimize the electric power system X  X  losses of reactive power. However, Jin et al. (2004) have considered load balancing as the most significant objective.
Meanwhile, Some other researchers have used additional objec-tives, such as considering minimizing voltage deviation and balancing transformer loads with losses minimization. Numerous techniques had been proposed to solve the reconfiguration problem. Ahuja et al. (2007) formulated the reconfiguration problems within a multi-objective framework. Besides, that paper combined concepts from artificial immune systems (AIS) and ant colony optimization (ACO) to explore the search space. Gomes et al. (2005) presented a reconfiguration algorithm which is especially suited to large-scale distribution systems. The algo-rithm used a heuristic strategy, which starts with the system in a meshed status, with all maneuverable switches closed. Jin et al. (2004) proposed a method based on modified binary particle swarm optimization (BPSO) for distribution power network reconfiguration with the objective of load balancing. Chiou et al. (2005) presented an effective method  X  variable scaling hybrid differential evolution (VSHDE)  X  for solving the network reconfi-guration for power loss reduction and voltage profit enhancement of distribution systems. Ahuja and Pahwa (2005) proposed ACO implemented in a novel hypercube framework on a 33-bus test system for solving reconfiguration problems for loss minimiza-tion. In the paper of Carpaneto and Chicco (2008) , the loss minimization objective is achieved by applying the ant colony optimization in a hypercube framework.

However, Mitra and Venayagamoorthy (2011) have different opinions. They consider that a few differences exist between a normal distribution system and a naval shipboard X  X  power system (SPS). The active power loss in an electric ship is very small compared to that of a terrestrial power grid. Therefore, active power loss minimization may be not a necessary objective for SPS reconfiguration. In navy ships, there are several emergency loads which must be served during different conditions. Meanwhile, the shipboard electric network should be reconfigured very quickly so that the quality of power of those critical loads is maintained at the desired level at all times. On the other hand, Ding et al. (2009) presented the concepts of  X  X  X issions X  X  in naval ships; the priorities of the loads should be varied according to the nature of the mission. These particularities of a ship X  X  power system necessitate a simple, fast, and intelligent reconfiguration strategy to produce the desired result. Reconfiguration of the shipboard power system is a promising research area. Mitra and Venayagamoorthy (2011) have proposed a fast reconfiguration algorithm, considering voltage stability. The dynamic reconfiguration algorithm pro-posed in that paper ( Mitra and Venayagamoorthy, 2011 ) for both the single-objective and multi-objective formulations is first verified in Matlab and then implemented in real time based on a real-time digital simulator (RTDS) and a DSP. But in multi-objective simulation test, a Pareto front is resulted. Researchers have to choose appropriate operating point from the Pareto front according to specific missions manually. Obviously, it is not convenient. Some other developments have been proposed ( Kumar et al., 2007 ) by using binary PSO and GA, respectively. An increase in the number of potential solutions betters the exploration but eventually makes the algorithm slow and unfit for real time applications. In addition to PSO and GA, agent-based reconfiguration strategies have been proposed in papers of Yu et al. (2010) and Solanki et al. (2010) .

A novel approach to reconfigure shipboard power system is presented in this paper, which is faster and capable to output final results without choosing operating point from Pareto front. First, the SPS reconfiguration problem is formulated as a multi-objective optimization problem. Second, this study presents a dynamic neighborhood small population PSO (DNSPPSO) algo-rithm. The new algorithm combines dynamic neighbor strategy ( Hu and Eberhart, 2002 ) and small population PSO together to enhance the algorithm X  X  execution speed. Meanwhile, mission conditions are constructed as an input argument so that the final solution could be obtained directly for the multi-objective opti-mization problem. The process is faster than the simulation results of Mitra and Venayagamoorthy (2011) and executed automatically with no human participation.

The remainder of this paper is organized as follows: Section 2 discusses the formulation of the reconfiguration as a multi-objective optimization problem. The detail of the proposed novel algorithm of DNSPPSO is presented in Section 3. Section 4 presents the simulation test and the results. Finally, the conclu-sion and future work are summarized in Section 5. 2. Reconfiguration of SPS &amp; formulation
From Fig. 1 of the typical structure, the SPS consists of two main generators of 36 MW (MTG1 and MTG2), two auxiliary generators of 4 MW (ATG1 and ATG2), and several critical and noncritical loads. The loads are represented at eight buses of the network. This representation has 20 circuit breakers, among which four are generator breakers, eight are load breakers, and the remaining eight are path breakers. The status of the breakers can be either  X  X  X LOSED X  X  or  X  X  X PEN X  X ; hence, theoretically, 2 breaker position possibilities exist. Nevertheless, some breakers cannot be opened or closed at the same time. Such as all breakers of generators cannot be opened at same time and all breakers of loads cannot be opened at the same time, and others. The breaker positions must also satisfy the condition P where P gen is the available generation at a particular time and
P , referred to as  X  X  X vailable load X  X  in this paper, is the amount of load to be powered at that point of time. When a fault occurs at a bus, the protection system senses the fault and trips the breakers associated with the fault to isolate it. The available breaker status is thus modified with the fault. The available generation and load profile of the system also change simultaneously. On the basis of these changes, the reconfiguration strategy now searches for a new topology of the ship X  X  power system so that it can supply the maximum number of critical loads with optimal generation. The objective functions for this problem can be formulated as follows: max max 8 &gt; &gt; &gt; &gt; &gt; &lt; &gt; &gt; &gt; &gt; &gt; : where p i is the priority weighting associated with a load L particular mission and N is the total number of loads. A lower priority weight signifies a lower priority. This equation means two optimization objectives: maximize the sum of load magni-tude and maximize the sum of load priority simultaneously.
Comparing with the single objective function is represented in the paper of Mitra and Venayagamoorthy (2011) , the priority of the loads and the magnitudes of the loads are considered separately. Otherwise, we use the single objective of maximizing the product of the priority weighting and the magnitude of the loads, expecting both are being maximized. In practice, however, this may not be so simple. For example, if, during load shedding, there is a very high priority load of 2 MW and a very low priority load of 20 MW, there are clearly two conflicting choices. If the load priority is important, then one will go for shedding the 20 MW load. However, this will not be the preferred choice if the situation needs the maximization of the total magnitude of the load to be served.

In order to resolve these types of multi-objective optimization problems, one has to find out the Pareto optimal front. The concept of Pareto optimality is shown as follows ( Abido, 2003 ): min f i  X  x  X  i  X  1 , ... , N obj subject to : where f i is the i th objective function, x is a decision vector that represents a solution, and N obj is the number of objectives. M and
K are the numbers of equality and inequality constraints, respec-tively. Now, any two solutions x 1 and x 2 of a multi-objective optimization problem can have one of two possibilities: One dominates the other, or none dominates the other. Without losing generality, in a minimization problem, a solution x 1 dominates x if the following two conditions are satisfied: 8 i
A 1 , 2 , ... , N obj : f i x 1  X  X  r f i x 2  X  X  ( j A 1 , 2 , ... , N obj : f i x 1  X  X  o f i x 2  X  X   X  4  X 
If any element of the aforementioned condition is violated, x does not dominate x 2 .If x 1 dominates x 2 , x 1 is called the non-dominated solution. A set of all non-dominated solutions inside the search space is called the Pareto optimal set or the Pareto optimal front.

There are several methods to extract the Pareto optimal front in a multi-objective optimization problem, but in most of the techniques, the process of finding a non-dominated solution is a computationally complex and time-consuming process. The easiest method for a two-objective problem is to represent the weighted sum of two objectives as follows ( Alrashii and El-
Hawary, 2008 ): f  X  x  X  X  o 1 f 1  X  x  X  X  o 2 f 2  X  x  X  X  5  X  where o 1  X  o 2  X  1  X  6  X  that can be optimized with any conventional or evolutionary methods. If o 1 now varies from zero to one in small steps and the optimum value of f ( x ) is calculated for each value of o provides the entire set of Pareto optimal solutions. Nevertheless, this kind of methodology has its shortcoming for practical SPS reconfi-guration. That is, choosing a final solution from Pareto front under a specific mission is necessary. In the next section, a faster algorithm, which can output final solution directly, will be described. 3. DNSPPSO 3.1. Conventional PSO rithms available for solving unconstrained global optimization problems, was originally proposed by Kennedy and Eberhart (1995) as an optimization method. Subsequent numerical experi-ments have demonstrated that the PSO algorithm is efficient for a variety of global optimization problems with nonlinear and multi-peaked features ( Iwasaki et al., 2006 ).
 of which has its own position and velocity (transfer vector). The multi-particle based search technique distinguishes the PSO algo-rithm from many of the other previously proposed optimization algorithms. All the particles shar e information obtained from the other particles, and interactio n among the particles makes the search efficient. Each particle has its own position vector, x ,transfer vector, v , and own best position visited, p best . Furthermore, all the particles share the best position visited by all the particles, g
A particle forms a new transfer vector by linearly combining three component of the transfer vector of the i th particle is manipulated according to the following equation: v where i  X  1, y , m ( m is the size of the swarm), j  X  1, y dimension of a given problem), o , c 1 ,and c 2 are positive constants, rand () is a random number that is uniformly distributed in [0, 1], and k determines the iteration number. Customarily, the transfer vector v ij is also referred to as the velocity in PSO, and the present paper follows this convention. Each particle moves according to the following equation: x
For reconfiguration of SPS, position vector of particles x represents m n n matrix whose each element is distributed in [0, 1]. m is the population size of swarm, n is the breaker number. For example, an initial randomized x is shown as the following: x  X  while, transfer vector v is also a m n n matrix whose element is calculated as (7). p best and g best are calculated and sorted accord-ing to Eq. (2) , the two objectives. 3.2. Discrete PSO
The problem of reconfiguration for SPS is set in a space featuring discrete, qualitative distinctions between variables and between levels of variables. Besides these pure combinatorial problems, researchers frequently cast floating-point problems in binary terms, and solve them in a discrete number space. As any problem, discrete or continuous, can be expressed in a binary notation, it is seen that an optimizer which operates on two-valued functions might be advantageous. In this study, a discrete binary version of PSO ( Kennedy and Eberhart, 1997 ) is used for reconfiguration of SPS. The particle swarm Eq. (7) remains unchanged, except that now p best and x ij are integers in {0, l} and v ij , since it is a probability, must be constrained to the interval [0.0, 1.0]. A logistic transformation S ( v ij ) can be used to accomplish this last modification. The resulting change in posi-tion then is defined by the following rule: if rand  X   X  X  o Sv ij  X  then x ij  X  1 ; else x ij  X  0 where the function S ( v ij ) is a sigmoid limiting transformation and rand () is a quasi-random number selected from a uniform distribution in [0.0, 1.0]. The sigmoid limiting transformation is displayed as the following: Sv ij  X  1 1  X  e v
For reconfiguration of SPS, taking the x in Section 3.1 as an example, breaker vector x is discretized into binary code by using the above method as following: x  X  3.3. Dynamic neighborhood PSO
Here a dynamic neighborhood PSO (DNPSO) is presented ( Hu and Eberhart, 2002 ). In each generation, after calculating dis-tances to every other particle, each particle finds its new neigh-bors. Among the new neighbors, each particle finds the local best particle as the l best . The problem is how to define the distance and how to define the local best particle. Retaining generalization, two-objective continuous numeric optimizations are used to demonstrate the dynamic neighborhood PSO.

In two-dimensional fitness value space, the Pareto front is the boundary of fitness value region; it includes the combination of continuous or discontinuous lines and/or points. For a minimiza-tion problem, the boundary should be located at lower left side of the fitness space. If the first fitness values are fixed, only optimize the second objective function, and the final solution should be  X  X  X ropped X  X  onto the boundary line, which includes the Pareto front. So the algorithm used to search for local optima in each generation is defined as follows:
Step 1: Calculate the distances of the current particle from other particles in the fitness value space of the first objective function (not the variable space).

Step 2: Find the nearest m particles as the neighbors of the current particle based on the distances calculated above ( m the neighborhood size).

Step 3: Find the local optima among the neighbors in terms of the fitness value of the second objective function.

Another modification of the PSO is the update of the p best p is the best position in particle X  X  history. Only when a new solution dominates the current p best , is the p best updated. Based on the above modifications, the PSO algorithm successfully finds multiple optimal solutions and locates the Pareto front. For reconfiguration of SPS, we evaluate the particles by using max-imum of total load recovery first when the current iteration number is smaller than N 1 . Then the particles are evaluated by using maximum of total load priority recovery when the current iteration number is bigger than N 1 . 3.4. Small population PSO
The Small Population PSO (SPPSO) is a classical PSO algorithm but with a small population. For canonical PSO algorithm, popula-tion size is usually 20 X 50. Nevertheless, for SPPSO, the population size is no more than 5. More particles mean more parallel computation time costs. So, SPPSO could save the calculation time for emergency conditions for SPS under faults. Meanwhile, the concept of regeneration is introduced by the authors to give particles the ability to keep relative high accuracy despite a small population. The particles are regenerated after every N iterations, retaining their previous g best and p best fitness values and positions.
The regeneration will keep the diversity of population and retain the best solution so far. The procedures of the technique are defined as follows:
Step 1: If the current iteration number is divisible by some certain number, we use N 2 in this paper, enter Step 2; else, jump out of this strategy and keep updating the position and velocity of particles.
 Step 2: Save the global and personal best position and fitness.
All the current particles are eliminated and randomly gener-ated in searching space.

Step 3: Update the position and velocity of particles. If better solution is found, the saved global and personal best position and fitness will be renewed. Otherwise, keep searching the solution space.

From the above we can see, the selection of the value N 2 crucial in realizing an efficient SPPSO algorithm. If the value of N is low, the new particles may be regenerated too quickly and, in turn, disturb the search process. Thus, the particles will move erratically in the search space. On the other hand, if the particles are regenerated at a higher value of N 2 , the search process will be delayed. Randomizing the positions and velocities of the particles every N 2 iterations aids the particles in avoiding local minima and finding the global minimum. The regeneration concept drastically reduces the number of evaluations required to find the best solution, and each evaluation is less computationally intensive compared to the classical PSO algorithm ( Fig. 3 ).
 3.5. Apply small population to DNPSO neighborhood small population PSO (DNSPPSO) to reconfigure
SPS under faults. Dynamic neighborhood strategy is aiming at handling multi-objective problem; small population strategy is used to balance exploitation and exploration ability during searching process with less time. Dynamic neighborhood strategy sorts the sequence of multi objectives when evaluating them. In this paper, we evaluate the particles by using maximum of total load recovery first when the current iteration number is smaller than N 1 . Then the particles are evaluated by using maximum of total load priority recovery when the current iteration number is bigger than N 1 . This operation would get relatively good fitness after some iterations for maximum of total load recovery, then the rest searching is aiming at maximum of total load priority recovery based on the current solution. As a result, the final solution will satisfy both of the two objectives under missions. At the same time, small population strategy is executed each itera-tion. After updating the particle best and global best solution and fitness, we will check if the current iteration number is divisible by some certain number. In this part, we save the global and particle best position and fitness. Then, all the current particles are eliminated and randomly generated in searching space. Consequently, the position and velocity of particles are updated.
If better solution is found, the saved global and personal best position and fitness will be renewed. Otherwise, keep searching the solution space. This manipulation can keep diversifying population while retaining the best solution and fitness. In other words, increase the global searching capability without losing the previous outstanding particles. Fig. 4 shows the flowchart for
DNSPPSO. First, the population of particles is initialized, each particle having a random position within the multi-dimensional space and a random velocity for each dimension. Second, dynamic neighborhood strategy is executed. If iterations number is smaller than N 1 , then fitness of particles for total load recovery is evaluated; if iterations number is bigger than N 1 , then M best particles are selected for evaluating total load priority. Third, each particle X  X  fitness is evaluated. If the fitness is better than the particle X  X  best fitness, then the position vector is saved for the particle. If the particle X  X  fitness is better than the global best fitness, then the position vector is saved for the global best.
Fourth, small population strategy is executed. During every N iteration, particles are regenerated retaining g best and p values and positions. Finally, the particle X  X  velocity and position are updated until the termination condition is satisfied. 4. Simulation results The platform adopted to develop the DNSPPSO approach is a
PC with the following features: Intel(R) Core(TM)2 Duo E7500 @ 2.93 GHz 2.93 GHz CPU, 2.00 GB RAM, a Windows 7 operating system and the Matlab 2010 development environment. The performance of the proposed reconfiguration strategy comparing with discrete PSO (DPSO), SPPSO and NSGA-II is demonstrated in
Matlab research environments. All the algorithms are executed in 100 independent runs. All the parameters of DPSO, SPPSO, NSGA-II and DNSPPSO for reconfiguration of SPS simulation are shown in Table 1 . The test example is an 8-bus shipboard system represented by the single line diagram in Fig. 1 . A different set of magnitudes and priorities are considered for the multi-objective framework. Those values are listed in Table 2 . Load magnitude and load priority constraints under different missions are shown in Table 3 .

In the above table, o is called inertia weight. A relative bigger magnitude of o will result in a higher flying velocity of particle according to Eq. (7) . The swarm is searching the solution space within a wider range. That is to say, the particles have more capability to search the global solution space of reconfiguration for SPS, i.e., stronger exploitation ability. On the other hand, a relative smaller magnitude of o will result in a lower flying velocity of particle according to Eq. (7) . The swarm is searching the solution space within a narrower range. That means, the particles have more capability to search the local solution space of reconfiguration for SPS, i.e., stronger exploration ability. c are called acceleration coefficients. From Eq. (7) we can see, c c are used to balance influence of p best and g best to other particles. Good balance will avoid over fast convergence of the whole particle swarm to get better breaker solution of reconfiguration of SPS. Meanwhile, we make typical values of max iterations, population size and max velocity, and others. In this paper, all the values come from Mitra and Venayagamoorthy (2011) . Improved performance can be obtained by carefully selecting the parameters. How to dynamically adapt the inertia weight and acceleration coefficient is beyond this study.

A fault is created at Bus 1. Thus, the generator MTG1 of 36 MW and load L8 of 2 MW are tripped. Now, the total available generation is 44 MW, and the total available load is 54 MW. This definitely requires a load of at least 10 MW to be shed. Here, also, generation reserve is not considered.
 In order to make decisions concerning this conflicting scenario, Pareto optimal solutions are obtained by using DPSO, SPPSO and
NSGA-II algorithm. Figs. 5 X 7 show the Pareto front of final solutions by using DPSO, SPPSO and NSGA-II, respectively. Since
Pareto front of final solutions is a solution set, in order to display all the solutions conveniently, we draw a point which represents all loads served. The X -axis represents the sum of load magnitude of a load vector. The Y -axis represents the sum of load priority of a load vector. For example, a load vector [10001010] means L1, L5, and L7 are connected, while the others are disconnected. Con-sidering Table 2 , the sum of load priority is 9, the sum of load o o magnitude is 44. So, we could draw a point (44, 9) and represent the load vector easily. Since it is a discrete optimization problem, the Pareto front also consists of discrete points. Here, operating points are obtained as the Pareto optimal solutions with varying values of o 1 and o 2 according to Eq. (6). Those solutions are chosen by user according to specified mission, such as battle, functional and cruising. Although all the feasible solutions of reconfiguration of SPS can be obtained, but we have to pick out only one operating point from all the solutions according to battle, function or cruising mission manually. Fig. 8 shows one searching process of three missions by applying DNSPPSO. Table 4 shows time cost and mean best fitness comparison of four algorithms. One solution is defined as a load breaker vector. The elements from left to right represent the status of L1 X  X 8, con-secutively. For example, a vector [10110110] means that L2, L5, and L8 are disconnected and L1, L3, L4, L6, and L7 are connected.
DNSPPSO algorithm uses the least time to obtain the final solutions for battle, functional and cruis ing missions. Meanwhile, because of dynamic neighborhood strategy, multi-objective optimization pro-blem is converted into a single objective optimization problem and feasible load breaker vector is obtained, rather than a Pareto optimal front. The percentage of final solutions represents the proportion of each solution to the certain default. In mission battle, load breaker vectors [01111110] and [11110110] satisfy the critical load and priority requirement in Table 3 . Obviously, the former is better than the latter for more load priority su pply. Like mission battle, solution [11011000] is also the most promising one for mission functional.
For cruising mode, the three vectors have the same load supply and load priority supply after reconfiguration. That means, all the three solutionsaresuitableforthisoperatingmode.WhileforDPSO,
SPPSO and NSGA-II, multi-objective is converted into a single objective by using Eq. (5) . The parameters of o 1 and o 2 0 to 1. Since the parameters of o 1 and o 2 are hard to select, all the solutions resulted according to all the magnitudes of o 1 drawn as Figs. 5 X 7 . Since Pareto front of final solutions is a solution set, in order to display all the solutions conveniently, we draw a point which represents all loads served. The X -axisrepresentsthe sum of load magnitude of a load vector. The Y -axis represents the sum of load priority of a load vector. Therefore, all the dots in Figs. 5 X 7 represent all the calculated load vectors. Consequently, we need to pick out the final load breaker vector from the solution set according to load magnitude and loa d priority constraints under different missions. Explicitly, it is not convenient enough.
From the above simulation results, DPSO, SPPSO and NSGA-II could obtain Pareto optimal solutions as shown in Figs. 5 X 7 , considering constraints of different missions in Table 3 . Never-theless, we need to select a relative good solution from the Pareto optimal solutions as the reconfiguration of SPS. Comparing with the other approaches, DNSSPSO may handle reconfiguration of
SPS with less time from Table 4 , outputting the same feasible solutions, meanwhile, no human participation. 5. Conclusions and future research
This paper has presented an intelligent dynamic reconfigura-tion strategy for an electric ship X  X  power system. The problem is formulated as a multi-objective optimization problem. A study in
Matlab has illustrated the capabilities of the proposed reconfi-guration strategy.

Dynamic reconfiguration is carried out by using the DNSPPSO algorithm. The presented strategy is simple and fast without human participation. The speed of this reconfiguration strategy is enhanced by using a few simple logical steps that greatly reduce the search space complexity. In the multi-objective opti-mizing process, the final solution is extracted directly by using constraints under different missions.
In the future, more complex cases must be studied, such as the occurrence of multiple faults simultaneously on different buses, which may result in two or more islanded systems. This would require a path search algorithm to be included in the reconfigura-tion strategy. Intelligent fault identification is another aspect of future research that can be integrated with the intelligent reconfiguration strategy.
 Acknowledgment
The authors would like to thank the Natural Science Founda-tion of Liaoning Province, China for financially supporting this research under Contract No. 20092148.
 References
