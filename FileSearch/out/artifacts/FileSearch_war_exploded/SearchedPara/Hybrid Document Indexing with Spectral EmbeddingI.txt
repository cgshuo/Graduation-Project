 Capturing semantic relations between words in a document representation is a difficult problem. Dif-ferent approaches tried to overcome the term inde-pendence assumption of the bag-of-words represen-tation (Salton and McGill, 1983) for example by us-ing distributional term clusters (Slonim and Tishby, 2000) and expanding the document vectors with synonyms, see (Levow et al., 2005). Since content words can be combined into semantic classes there has been a considerable interest in low-dimensional term and document representations.

Latent Semantic Analysis (LSA) (Deerwester et al., 1990) is one of the best known dimensionality reduction algorithms. In the LSA space documents are indexed with latent semantic concepts. LSA showed large performance improvements over the traditional tf-idf representation on small document collections (Deerwester et al., 1990) but often does not perform well on large heterogeneous collections. LSA maps all words to low dimensional vectors. However, the notion of semantic relatedness is de-fined differently for subsets of the vocabulary. In ad-dition, the numerical information, abbreviations and the documents X  style may be very good indicators of their topic. However, this information is no longer available after the dimensionality reduction.
We use a hybrid approach to document indexing to address these issues. We keep the notion of la-tent semantic concepts and also try to preserve the specifics of the document collection. We use a low-dimensional representation only for nouns and rep-resent the rest of the document X  X  content as tf-idf vectors.

The rest of the paper is organized as follows. Sec-tion 2 discusses our approach. Section 3 reports the experimental results. We conclude in section 4. This section gives the general idea of our approach. We divide the vocabulary into two sets: nouns and the rest of the vocabulary. We use a method of spec-tral embedding, as described below and compute a low-dimensional representation for documents using only the nouns. We also compute a tf-idf represen-tation for documents using the other set of words. Since we can treat each latent semantic concept in the low-dimensional representation as part of the vo-cabulary, we combine the two vector representations for each document by concatenating them. 2.1 Spectral Embedding Spectral methods comprise a family of algorithms that use a matrix of pair-wise similarities S and per-form its spectral analysis, such as the eigenvalue de-composition, to embed terms and documents in a low-dimensional vector space. S = U  X  U T , where the columns of U are its eigenvectors and  X  is a di-agonal matrix with the eigenvalues.
 If we have a matrix of pair-wise word similarities S , its first k eigenvectors U sent the words in the latent semantic space. Seman-tically related words will have high association with the same latent concepts and their corresponding vectors will be similar. Moreover, the vector similar-ity between the word vectors will optimally preserve the original similarities (Cox and Cox, 2001).
We use two approaches to compute spectral em-bedding for nouns. Latent Semantic Analysis (LSA) (Deerwester et al., 1990) and Generalized La-tent Semantic Analysis (GLSA) (Matveeva et al., 2005). For both we used the eigenvalue decomposi-tion as the embedding step. The difference is in the similarities matrix which we are trying to preserve. 2.2 Distributional Term Similarity LSA and GLSA begin with a matrix of pair-wise term similarities S , compute its eigenvectors U and use the first k of them to represent terms and doc-uments, for details see (Deerwester et al., 1990; Matveeva et al., 2005). The main difference in our implementation of these algorithms is the matrix of pair-wise word similarities. Since our representation will try to preserve them it is important to have a ma-trix of similarities which is linguistically motivated. LSA uses the matrix of pair-wise similarities which is based on document vectors. For two words w documents d where tf( w d weight for w bedding restricted to one type of term similarities and dimensionality reduction method.
 GLSA (Matveeva et al., 2005) generalizes the idea of latent semantic space. It proposes to use different types of similarity matrix and spectral em-bedding methods to compute a latent space which is closer to true semantic similarities. One way to do so is to use a more appropriate similarities matrix S . PMI We use point-wise mutual information (PMI) to compute the matrix S . PMI between random vari-ables representing the words w as Thus, for GLSA, S ( w Co-occurrence Proximity An advantage of PMI is the notion of proximity. The co-occurrence statis-tics for PMI are typically computed using a sliding window. Thus, PMI will be large only for words that co-occur within a small fixed context. Our ex-periments show that this is a better approximation to true semantic similarities. 2.3 Document Indexing We have two sets of the vocabulary terms: a set of nouns, N , and the other words, T . We compute tf-idf document vectors indexed with the words in T : where  X 
We also compute a k -dimensional representation with latent concepts c nation of LSA or GLSA term vectors ~w We concatenate these two representations to gener-ate a hybrid indexing of documents: We performed document clustering experiments to validate our approach.
Subset m-n #topics min #d max #d av. #d 5-10 19 6 10 8.2 50-150 21 55 150 94.7 500-1000 2 544 844 694.0 1000-5000 3 1367 2083 1792.3 Table 1: TDT2 topic subsets containing between m and n documents: the number of topics per subset, the minimum, the maximum and the average number of documents per topic in each subset.

All words Nouns Hybrid tf-idf , LSA tf-idf GLSA, GLSA local GLSA Table 2: Indexing schemes: with full vocabulary (All), only nouns (Nouns) and the combination. Data We used the TDT2 collection 1 of news arti-cles from six news agencies in 1998. We used only 10,329 documents that are assigned to one topic. TDT2 documents are distributed over topics very unevenly. We used subsets of the TDT2 topics that contain between m and n documents, see Table 1. words list for the tf-idf indexing, Bikel X  X  parser 3 to obtain the set of nouns and the PLAPACK pack-age (Bientinesi et al., 2003) to compute the eigen-value decomposition.
 Global vs. Local Similarity To obtain the PMI values for GLSA we used the TDT2 collection, de-noted as GLSA based on larger collections gives a better approxima-tion to linguistic similarities, we also used 700,000 documents from the English GigaWord collection, denoted as GLSA and GLSA of size 8.
 Representations For each document we com-puted 7 representations, see Table 2. The vocabulary size we used with the tf-idf indexing was 114,127. For computational reasons we used the set of words that occurred in at least 20 documents with our spec-tral methods. We used 17,633 words for index-ing with LSA and GLSA GLSA. We also indexed documents using only the 15,325 nouns: tf-idf resentation was computed using the tf-idf indexing without nouns and the GLSA Evaluation We used the minimum squared evaluation measures: accuracy and the F1-score. The clustering algorithm assigns each document to a cluster. We map the cluster id X  X  to topic labels using the Munkres assignment algorithm (Munkres, 1957) and compute the accuracy as the ratio of the correctly assigned labels.

The F1 score for cluster c and r is recall. For clusters C = ( c topics T = ( t N topic t and N is the total number of documents. This measure accounts for the topic size and also corrects the topic assignments to clusters by using the max. Table 3 shows that the spectral methods outperform the tf-idf representations and have smaller variance. We report the performance for four subsets. The subset 5  X  10 has a large number of topics, each with a similar number of documents. The subset 50  X  150 has a large number of topics with a less even distri-bution of documents. 500  X  1000 and 1000  X  5000 have a couple of large topics. We ran the clustering over 30 random initializations. To eliminate the ef-fect of the initial conditions on the performance we also used one document per cluster to seed the initial assignment for the 5  X  10 subset.

All methods have the worst performance for the 5  X  10 subset. The best performance is for the subset 500  X  1000 . LSA and GLSA local indexing are com-puted based on the TDT2 collection. GLSA better average performance which confirms that the co-occurrence proximity is important for distribu-tional similarity. The GLSA indexing computed us-ing a large corpus performs significantly worse than 5-10 brackets. For the last experiment, 5-10 GLSA local on the heterogeneous 5  X  10 and 50  X  150 subsets and performs similarly for the other two. It supports our intuition that the document X  X  style and word distribution within the collection are important and may get lost, especially if we use a document collection with a different word distribution to esti-mate the similarities matrix S .

The tf-idf indexing with nouns only, onlyN , has good performance compared to the all-words index-ing. The semantic similarity between nouns seems to be collection independent. The GLSA ing is significantly better than onlyN and tf-idf in most cases and performs similar to GLSA using GLSA more nouns that we could keep in the GLSA and GLSA representations. Nouns convey impor-tant topic membership information and it is advan-tageous to use as many of them as possible.
We observed the same performance relation when we used labels to make the initial cluster assign-ment, see 5  X  10 performed similarly, GLSA formed better with the hybrid scheme being the best.
The hybrid indexing significantly outperforms tf-idf , LSA and GLSA on three subsets. This shows the benefits of using the spectral embedding to discover the semantic relations between nouns and keeping the rest of the document content as tf-idf representa-tion to preserve other indicators of its topic member-ship. By combining two representations the hybrid indexing scheme defines a more complex notion of similarity between documents. For nouns it uses the semantic proximity in the space of latent semantic classes and for other words it uses term-matching.
