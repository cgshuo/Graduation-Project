 Grapheme-to-phoneme (G2P) conversion is the problem of converting a string of letters into a string of phonetic symbols. Closely related to G2P are other string transduction problems in nat-ural language processing (NLP) such as transliter-ation (Sherif and Kondrak, 2007), lemmatization (Dreyer et al., 2008), and spelling error correc-tion (Brill and Moore, 2000). The classical learn-ing paradigm in each of these settings is to train a model on pairs of strings { ( x , y ) } and then to evaluate model performance on test data. While there are exceptions (e.g., (Rao et al., 2015)), most state-of-the-art modelings (e.g., (Jiampojamarn et al., 2007; Bisani and Ney, 2008; Jiampojamarn et al., 2008; Jiampojamarn et al., 2010; Novak et al., 2012)) view string transduction as a two-stage process in which string pairs ( x , y ) in the train-ing data are first aligned , and then a subsequent (e.g., sequence labeling) module is learned on the aligned data. Table 1: Sample monotone many-to-many align-ment between x = phoenix and y = finIks .

State-of-the-art alignments in G2P are charac-terized by the following properties: (i) Alignments are monotone in that the ordering (ii) The alignment is a latent variable and learnt (iii) The unsupervised alignment models are un-To illustrate point (iii), consider, in the field of lemmatization, the case of aligning an inflected word form with the extended infinitive in German, such as absagt ( X  X ejects X ) with abzusagen ( X  X o re-ject X ). Critically, the insertion -zu-appears in in-fixal position and a plausible alignment might be as in Table 2. Then, correctly aligning certain Table 2: Alignment between absagen and abzusagen . Empty string denoted by . analogous forms such as zusagt ( X  X ccepts X ) with their corresponding extended infinitive zuzusagen ( X  X o accept X ) is beyond the scope of a unigram alignment model since this cannot distinguish the linguistically correct alignment from the following linguistically incorrect alignment precisely because it has no notion of context.
In this work, we firstly address bigram align-ment models in G2P. We investigate whether there are phenomena in G2P that require bigram align-ment models and, more generally, whether bigram alignment models produce better alignments  X  with respect to a human gold standard  X  than un-igram alignment models within the G2P setting. We do so, secondly , in a supervised setting where the model learns from gold-standard alignments. While this may seem an odd scenario at first sight, modern alignment toolkits in the related field of machine translation typically include the possibil-ity to learn both in a supervised and unsupervised manner (Liu et al., 2010; Liu and Sun, 2015). The rationale behind supervised learning models may be that they perform better than unsupervised models, and if alignment quality has a large impact upon subsequent string translation performance, then a supervised model may be a suitable alterna-tive. Thirdly , we investigate how alignment qual-ity affects overall G2P performance. This allows us to address whether it is worthwhile to work on better alignment models, which bigram and supervised alignment models promise to be. To our knowledge, all three outlined aspects of align-ments  X  bigram models, supervised learning, and systematically estimating the relationship between alignment quality and overall string transduction performance  X  are novel in the G2P setting and its related fields as outlined; however, see also the related work section.

This work is structured as follows. Section 2 presents definitions and algorithms for uni-and bi-gram alignment models. Section 3 surveys related work. Section 4 presents our data and Section 5 our experiments. We conclude in Section 6. We first formally define the problem of aligning two strings x and y over arbitrary alphabets in a monotone and many-to-many manner. Let ` x = | x | and ` y = | y | denote the lengths of x and y , respectively. Let N = { 0 , 1 , 2 ,... } , and let S  X  N 2 \{ (0 , 0) } be a set defining the valid match-up operations between x characters and y characters. In other words, when ( s,t )  X  S , then this means we allow matches of subsequences of x of length s and subsequences of y of length t . 1
It is convenient to define a monotone many-to-many alignment of x and y as a 2  X  k (for k  X  1 ar-bitrary) nonnegative integer matrix A x , y  X  N 2  X  k satisfying A x , y 1 k = of A x , y sum up to the lengths of the respective strings, 2 and where each column of A x , y lies in S . For any such alignment, we let ( x 1 ,..., x k ) be the corresponding induced segmentation of x and ( y 1 ,..., y k ) be the corresponding induced seg-mentation of y .
 Example. For any S  X  { (1 , 1) , (1 , 2) , (2 , 1) } , the alignment of x = phoenix and y = finIks shown in Table 1 may be represented by the ma-ing induced segmentations are (ph,oe,n,i,x) and ( f , i , n , I , ks ).

Let A S ( x , y ) denote the class of all alignments of x and y . We call a function f : A S ( x , y )  X  R an alignment model . We call an alignment model f a unigram alignment model if f takes the form, for any A x , y  X  X  S ( x , y ) , where sim 1 is an arbitrary (real-valued) similar-ity function measuring similarity of two subse-quences. We call an alignment model f a bigram alignment model if f takes the form where sim 2 is an arbitrary (real-valued) similarity function measuring similarity of successive pairs of subsequences.
 Example. Let sim 1 ( u , v ) be equal to | u | X | v | and let f uni ( A x , y ) be as in Eq. (1). Then, f uni unigram alignment model that assigns the score 1 + 1 + 0 + 1 + 1 + 1 + 2 = 7 to the alignment given in Table 2.
 Example. Let sim 2 ( u , v ) , ( u 0 , v 0 ) = ( | u |  X  | v | ) | v 0 | if | u | = | u 0 | X  1 or u = v and  X  2 oth-erwise. Let f bi ( A x , y ) be as in Eq. (2). Then, f bi is a bigram alignment model assigning the score (1  X  1) 0 + (1  X  1) 1 + (0  X  2) 1 + (1  X  1) 2 + (1  X  1) 1 + (1  X  1) 1  X  2 = 3 to the alignment in Table 2.
In statistical alignment modeling, the task is to find an optimal alignment (i.e., one with maxi-mal score) given strings x and y and given the alignment model f . When f is a unigram model, this can be solved efficiently via dynamic pro-gramming (DP). When f is a bigram alignment model, then finding the optimal alignment can still be solved via DP, by introducing a variable M ijqw denoting the score of the best alignment of x (1 : i ) and y (1 : j ) that ends in the match-up of x ( q : i ) with y ( w : j ) . 3 The variable M ijqw satisfies a recurrence leading to a DP al-gorithm, shown in Algorithm 1. The actual align-ment can be found by storing pointers to the maxi-mizing steps taken. Running time of the algorithm is O ( ` 2 x ` 2 y | S | ) . Note also that the sketched algo-rithm is supervised insofar as it assumes that the similarity values sim 2 (  X  ,  X  ) are known. Typically, such alignment algorithms can be converted into unsupervised algorithms in which similarity mea-sures sim are learnt iteratively, e.g., in an EM-like fashion (cf., e.g., Eger (2012), Eger (2013)); how-ever, in this paper, we only investigate the super-vised base version as indicated. Monotone alignments have a long tradition in NLP. The classical Needleman-Wunsch algo-rithm (Needleman and Wunsch, 1970) computes the optimal alignment between two sequences when only single character matches, mismatches, and skips are allowed. It is a special case of the unigram model (1) for which S = { (1 , 0) , (0 , 1) , (1 , 1) } and sim 1 takes on values from { 0 ,  X  1 } , depending on whether compared subsequences match or not. As is well-known, this alignment specification is equivalent to the edit distance problem (Levenshtein, 1966) in which the minimal number of insertions, deletions and substitutions is sought that transforms one string into another. Substring-to-substring edit oper-ations  X  or equivalently, (monotone) many-to-many alignments  X  have appeared in the NLP context, e.g., in Deligne et al. (1995), Brill and Moore (2000), Jiampojamarn et al. (2007), Bisani and Ney (2008), Jiampojamarn et al. (2010), or, significantly earlier, in Ukkonen (1985), V  X  eronis (1988). Learning edit distance/monotone align-ments in an unsupervised manner has been the topic of, e.g., Ristad and Yianilos (1998), Cot-terell et al. (2014), besides the works already men-tioned. All of these approaches are special cases of our unigram model  X  i.e., they consider particular S (most prominently, S = { (1 , 0) , (0 , 1) , (1 , 1) } ) and sim 1 . 4 Eger (2015b), Yao and Kondrak (2015), and Eger (2015a) generalize to alignments of multiple strings, but likewise only consider un-igram alignment models in their experiments.
Probably the most closely related work to ours is Jiampojamarn and Kondrak (2010). There, older and specialized alignment techniques such as ALINE (Kondrak, 2000) (as well as partly heuristic/semi-automatic alignment methods) are compared with variants of the M2M alignment algorithm, which we also survey. This work does not consider supervised alignments or bigram alignments, as we do. Moreover, Jiampojamarn and Kondrak (2010) also evaluate the impact of alignment quality on overall G2P system accuracy by running a few experiments, finding that better alignment quality does not always translate into better G2P accuracy, but that there is a  X  X trong correlation X  between the two. We more thorougly investigate this question, using, arguably, more heterogeneous aligners, and many more experi-ments. We also quantitatively estimate how align-ment quality influences G2P system accuracy on two different languages via linear regression.
Goldwater et al. (2006) study the effect of context in (unsupervised) word/sequence seg-mentation, which may be considered the one-dimensional specialization of sequence alignment, using a Bayesian method. They find that bigram models greatly outperform unigram models for their task.

Of course, our study is also related to the field of machine translation and its studies on the rela-Algorithm 1 1: procedure BIGRAM -ALIGN ( x = x 1 ...x n , y = y ...y m ; S , sim 2 ) 2: M ijqw  X  X  X  X  for all ( i,j,q,w )  X  Z 4 4: for i = 0 ...n do 5: for j = 0 ...m do 6: for q = 0 ...i + 1 do 7: for w = 0 ...j + 1 do 8: if ( i,j,q,w ) 6 = (0 , 0 , 0 , 0) then 9: if ( i  X  q + 1 ,j  X  w + 1)  X  S then tionship between alignment quality and translation performance (Ganchev et al., 2008). In machine translation, the monotonicity assumption of string transduction does typically not hold, however, ren-dering alignment and translation techniques differ-ent and more heuristic in nature. 4.1 Data For English, we conduct experiments on the Gen-eral American (GA) variant of the Combilex data set (Richmond et al., 2009). This contains about 128 000 grapheme-phoneme pairs as exemplified in Table 3. Importantly, Combilex provides gold-standard alignments, which we will make use of for the supervised alignment models as well as for measuring alignment quality. For German, we ran-p-r-o-b-a-t-ion-a-r-y p-r-@U-b-eI-S-n=-E-r-i Table 3: Sample grapheme-phoneme string pairs in Combilex, using Combilex notation for the phoneme strings. Gold-standard alignments indi-cated in an intuitive manner. domly extract 3 000 G2P string pairs from CELEX (Baayen et al., 1995). We had a native speaker manually align them so that gold standard align-ments are available here, too. Both data sets con-tain quite complex match-ups of character subse-quences such as (2,3) as in English s-oi-r-ee-s /s-wOA-r-P-z or (4,1) as in w-eigh-t /w-P-t but the majority of match-ups are of type (1,1), (2,1), and, to a lesser degree, (1,2) and (3,1). 4.2 Alignment toolkits/models The M2M aligner (Jiampojamarn et al., 2007), which is based on EM maximum likelihood es-timation of alignment parameters, is the classi-cal unsupervised unigram many-to-many aligner in G2P. As has been pointed out (Kubo et al., means that when the M2M aligner is given the freedom to align two sequences without restric-tions, it matches them up as a whole. The rea-son is that a (probabilistic) unigram alignment model adds log-probabilities of matched-up sub-sequences, which, if not appropriately corrected for, makes alignments with few match-ups a pri-ori more likely than alignments with many match-ups, when probabilities of individual match-ups are uniformly or randomly initialized (as is typi-cally the case for EM maximum likelihood esti-mation in unsupervised models). To address this, M2M must artifically restrain, in our language, the set S to be { (1 , 1) , (1 , 2) , (2 , 1) } . In contrast, the Mpaligner (Kubo et al., 2011) introduces a prior (or penalty) in the alignment model which favors  X  X hort X  matches ( s,t ) over  X  X ong X  ones. Finally, the Phonetisaurus aligner (Novak et al., 2012) mod-ifies the M2M aligner by adding additional soft constraints.

Our own alignment model is, as indicated, su-pervised. We implement a unigram alignment model where we specify sim 1 ( u , v ) as Here, logp ( z ) denotes the log-probability  X  esti-mated from the training data  X  of observing the object z , and  X  ,  X  ,  X  and  X  are parameters. This specification says that the subsequences u and v are similar insofar as (i) u and v have been paired frequently in the training data, (ii) the length of u and the length of v have been paired frequently, (iii)/(iv) u / v by itself is likely. We refer to this unigram alignment model as uni  X , X , X , X  . We also implement a bigram alignment model where we specify sim 2 ( u , v ) , ( u 0 , v 0 ) as Here, logp ( z | z 0 ) denotes the logarithm of the con-ditional probability of observing the object z fol-lowing the object z 0 . We refer to this bigram align-ment model as bi  X , X , X , X  . 4.3 Transduction systems We use two string transduction systems for our ex-periments. The first one is DirecTL+ (Jiampo-jamarn et al., 2010), a discriminative string-to-string translation system incorporating joint n -gram features. DirecTL+ is an extension of the model presented in Jiampojamarn et al. (2008) which treats string transduction as a source se-quence segmentation and subsequent sequence la-beling task. In addition, we use Phonetisaurus (Novak et al., 2012), a weighted finite state-based joint n -gram model employing recurrent neural network language model N -best rescoring in de-coding. Both systems take aligned pairs of strings as input and from this construct a monotone trans-4.4 Measuring alignment quality We employ two measures of alignment quality. First, we use word accuracy , defined as the frac-tion of correctly aligned sequence pairs in a test sample. This is a very strict measure that penalizes even tiny deviations from the gold standard. Addi-tionally, we measure the edit distance between the true alignment A x , y and the predicted alignment  X  A x , y . To implement this, we view the two induced segmentations that constitute an alignment  X  e.g., (ph,oe,n,i,x) and ( f,i,n,I,ks )  X  as strings includ-ing splitting signs. Thus, we can compute the edit distance between the gold-standard segmented x string and the predicted segmentation, and analo-gously for the y sequence. Then, we define the edit distance between A x , y and  X  A x , y as the sum of these two string edit distances. For a test sam-ple, we indicate so-defined average edit distance, averaged over all pairs in the sample. 5.1 Alignment quality To measure alignment quality for the different sys-tems, for English, we run experiments on sets of size x + 5 000, where x = 1 000, 2 000, 5 000, 10 000, and 20 000. For the supervised models, we consider x as the training data and the 5 000 effects when training data is very little, we let x also range over 100 and 500 string pairs for the supervised models. For the unsupervised models, we simply take all x + 5 000 string pairs as data to learn from (but evaluate performance only on the 5 000 string pairs, for comparability).

Results are shown in Tables 4, 5, and 6. We first note (Table 4) that the unsupervised mod-els perform decently, obtaining accuracy rates of 80% and beyond under appropriate parametriza-tions. We also observe the M2M aligner X  X  de-terioration in performance as we increase its de-grees of freedom (allowing it to match subse-quences of larger length), confirming our previous remarks. The Mpaligner does not suffer from this problem as it penalizes large matches. Phoneti-saurus suffers from the same problems as M2M, but to a lesser degree. Overall, we find that, under optimal parametrizations, Phonetisaurus produces best alignments, followed by Mpalign and M2M. However, peak performances of all three unsu-pervised aligners are close. Unsurprisingly, the supervised alignment models perform better than the unsupervised ones (Tables 5 and 6). Surpris-ingly, however, they do so with very little train-ing data; fewer than 100 aligned string pairs suf-fice to outperform the unsupervised models under good calibrations. When there is sufficient train-ing data, the supervised models perform splen-didly, with a peak accuracy of 99.43% for the bi-gram alignment model that includes appropriate features (scoring lengths of aligned subsequences, etc.). We also note that the bigram alignment model is almost consistently better than the uni-gram alignment model, with a surplus of about 1% point, depending on specific parametrizations. We performed an analogous analysis for the German data. Results are quite similar except that unigram and bigram alignment model have indis-tinguishable performance on the German data, in-dicating (the known fact) that G2P is a more com-plex task in English, apparently not requiring bi-gram alignment models. Table 5: Unigram model and its alignment accura-cies in % for various training sizes. Table 6: Bigram model and its alignment accura-cies in % for various training sizes.

Error analysis Concerning errors that the uni-gram model commits and the bigram model does not, the majority of errors (roughly 80%) involve match-ups of ed/d and d . For example, the uni-gram model aligns as in while the gold-standard alignment is While all match-ups in both alignments are plau-sible, the bigram model assigns here higher proba-bility to the correct ed/ d match-up in terminal po-sition (consistently favored in the data set), which has a particular meaning there, namely, that of data, there is a single instance where the unigram and bigram alignment model disagree, namely, in the alignment of s-t-o-ff-f-l-a-sch-e /S-t-O-f-f-l-&amp;-S-@, which the unigram model falsely aligns as s-t-o-f-ff-l-a-sch-e /S-t-O-f-f-l-&amp;-S-@; note that in the correct alignment f must follow ff , not vice versa, which depends on context information, e.g., that o/O signifies a short vowel which is followed by a double consonant, not a single consonant.
All remaining errors that the bigram align-ment models commits are, for the best considered parametrization and training set size, typically due to match-up types not seen in the training data, and thus mostly concern foreign names or writings (e.g., Bh-u-tt-o /b-u-t-F, falsely aligned as B-hu-tt-o /b-u-t-F). A few other errors might be corrected when the feature coefficients  X , X , X , X  were opti-mized on a development set rather than set manu-ally. We find no indication that our G2P data, ei-ther for English or German, would further benefit from n -gram alignment models of order n &gt; 2 . 5.2 Alignment quality vs. overall G2P Next, we estimate the relationship between align-ment quality and overall G2P performance (tran-scription accuracy). To this end, for the English data, we use the 5 000 aligned string pairs from the previous experiment on alignment quality and feed them in  X  as training data  X  to either Di-recTL+ or Phonetisaurus as outlined in Section 4. We then evaluate G2P performance  X  in terms of word accuracy (fraction of correctly transcribed strings)  X  on a distinct test set of size 10 000. Figure 1 shows a plot of overall G2P accuracy vs. training set size for the aligner (ranging over the x values in the last section); and a second plot that sketches G2P accuracy as a function of corre-sponding alignment accuracy. We first note that, as the supervised aligner receives more training ( a / b corresponds to x / y subsequences). Transduction Accuracy Transduction Accuracy Transduction Accuracy data from which to align the 5 000 string pairs, the overall G2P accuracy of both DirecTL+ and Phonetisaurus increase substantially (and as a con-vex function of training set size). Apparently, the better alignments produced by more training data for the particular supervised aligner considered di-rectly translate into better overall G2P accuracy. The other plot in the figure shows that, indeed, there seems to be a linear trend coupling align-ment quality with overall G2P performance. Table 7 pairs G2P accuracy with alignment accuracy of selected systems, all run in the x = 20 000 set-ting. While, in the table, better alignments do not necessarily imply better overall G2P performance, the two best alignments also lead to the two best overall G2P performances (although, in this case, the second best alignment is paired with the best overall G2P performance); conversely, the worst alignment quality is coupled with the worst over-all G2P performance.
 Overall, we ran 249 experiments (including the German data) in which we trained DirecTL+ or Phonetisaurus with alignments of specific quali-Mpalign 79.87 55.48 57.54 M2M 3 , 3 37.09 49.25 53.71
Phon 3 , 3 83.37 54.05 56.11 Table 7: Systems, alignment accuracies of corre-sponding produced alignments and transcription accuracy of Phonetisaurus and DirecTL+ when trained with the respective alignments. ties obtained from particularly parametrized align-ers. In each of these cases, we obtained an align-ment quality score and a subsequent overall G2P system performance. The English part of this data is sketched in Figure 2. This figure seems to corroborate the linear relationship (apparently present in Figure 1) between alignment quality and overall G2P system accuracy, particularly, when alignment quality is measured in the more fine-grained metric of edit distance. To formally test Transduction Accuracy Transduction Accuracy this, we regress overall G2P system performance (measured in word accuracy) on edit distance and given in Table 8; in each case, the goodness-of-values above 90% for the English data and about 84% for the German data. Also, the coefficients on alignment quality were highly significantly dif-ferent from zero. The table shows that the co-efficients are on the order of about  X  3.80% to  X  4.70%, meaning that, all else being equal, in-creasing alignment quality by 1 edit distance to the gold-standard alignment increases overall G2P by about 3.80 to 4.70%.
 Table 8: Coefficients on edit distance in the regres-sion of G2P accuracy on edit distance and further variables. For German, DirecTL+ is omitted due to its long run times.

So far, we have estimated the effects of align-ment quality on overall G2P system performance for a fixed size of training data, namely, 5 000 aligned string pairs. To see whether this relation-ship changes when we vary the amount of train-ing data, we run several more experiments. In these, we align training sets of sizes 100, 500, 1 000, 2 000, 10 000, 20 000, 40 000 and 60 000 via our several alignment systems. Then we feed the aligned data to the Phonetisaurus system (we omit DirecTL+ here because of its long run times) and compute overall G2P accuracy on a disjoint test set of size 28 000 approximately. This time, we only use the unsupervised aligners and the gold-standard alignments directly, omitting results for our various supervised aligners. Note, how-ever, that these aligners could, in principle, imi-tate the gold-standard alignments with a very high degree of precision, as previously seen. Table 9 100 5.38 6.43 0.19 9.60 500 16.80 22.43 5.08 23.93 1K 25.79 31.46 18.70 33.37 2K 35.31 42.01 37.74 43.64 10K 58.44 64.05 63.06 64.60 20K 67.70 71.70 71.51 72.21 40K 74.69 78.45 78.13 78.65 60K 78.00 81.07 80.92 81.17 Table 9: Overall G2P accuracy in % as a function training size of aligned data and alignment system. shows that training G2P systems from the human gold standard alignments in each case yields bet-ter overall G2P transcriptions than training them from either of the three unsupervised alignments considered here. However, we note that the sur-plus over the unsupervised alignments decreases as training set size increases. This may be due to the fact that the unsupervised aligners them-selves create better alignments once they are boot-strapped from larger data sets (cf. Table 4). Ad-ditionally, the effect of alignment quality on over-all G2P system performance may simply vanish as training set sizes become large enough because the translation modules can better accomodate  X  X oisy X  data as long as its size is sufficiently large. Figure GOLD/ T Figure 3: Ratio of transcription accuracy when us-ing gold standard alignments (GOLD) and when using alignments generated by T = M2M 3 , 3 , Mpalign, and Phon 3 , 3 , respectively, as a function of size of aligned training set. 3 sketches the decreasing influence of alignment system on overall G2P system performance as size of the aligned data increases. We have investigated the need for bigram align-ment models and the benefit of supervised align-ment techniques in G2P. We have also quantita-tively estimated the relationship between align-ment quality and overall G2P system performance. We have found that, in English, bigram alignment models do perform better than unigram alignment models on the G2P task (we find almost no dif-ferences between unigram and bigram models for the German sample of G2P data we considered). Moreover, we have found that supervised align-ment techniques may perform considerably better than their unsupervised brethren and that few man-ually aligned training pairs suffice for them to do so. Finally, we have estimated a highly significant impact of alignment quality on overall G2P tran-scription performance and that this relationship is linear in nature. At a particular training size, a linear regression model has estimated that improv-ing alignment quality by 1 edit distance toward the gold standard alignments leads to an 3.80-4.70% increase in G2P transcription accuracy. However, we have also found that the importance of good alignments on G2P accuracy appears to dimish as data set size increases, possibly because the trans-lation modules can accomodate more  X  X oisy X  data in this scenario.

As a  X  X olicy X  implication, we recommend the use of supervised alignment techniques particu-larly when the size of the G2P corpus is small or when high quality alignments, as an end in them-selves, are required. In this case, constructing a few dozen or few hundred alignments in an unsu-pervised manner and correcting them by hand (to serve as an input for a supervised technique) may be highly beneficial.

In future work, it may be worthwhile to study the impact of alignment techniques on overall sys-tem performance in other string transduction prob-lems such as transliteration, lemmatization, and spelling error correction.

Our supervised uni-and bigram aligners are available via https://github.com/ SteffenEger/ .
 I thank three anonymous reviewers and Tim vor der Br  X  uck for valuable suggestions.

