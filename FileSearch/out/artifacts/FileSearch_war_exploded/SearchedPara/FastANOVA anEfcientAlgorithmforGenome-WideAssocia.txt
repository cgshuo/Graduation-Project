 Studying the association between quantitati ve phenotype (such as height or weight) and single nucleotide polymorphisms (SNPs) is an important problem in biology . To understand underlying mecha-nisms of comple x phenotypes, it is often necessary to consider joint genetic effects across multiple SNPs. ANO VA (analysis of vari-ance) test is routinely used in association study . Important ndings from studying gene-gene (SNP-pair) interactions are appearing in the literature. Ho we ver, the number of SNPs can be up to millions. Ev aluating joint effects of SNPs is a challenging task even for SNP-pairs. Moreo ver, with lar ge number of SNPs correlated, permuta-tion procedure is preferred over simple Bonferroni correction for properly controlling family-wise error rate and retaining mapping power , which dramatically increases the computational cost of as-sociation study .

In this paper , we study the problem of nding SNP-pairs that have signicant associations with a given quantitati ve phenotype. We propose an efcient algorithm, FastANO VA, for performing ANO VA tests on SNP-pairs in a batch mode, which also supports lar ge permutation test. We deri ve an upper bound of SNP-pair ANO VA test, which can be expressed as the sum of two terms. The rst term is based on single-SNP ANO VA test. The second term is based on the SNPs and independent of any phenotype permuta-tion. Furthermore, SNP-pairs can be organized into groups, each of which shares a common upper bound. This allo ws for maximum reuse of intermediate computation, efcient upper bound estima-tion, and effecti ve SNP-pair pruning. Consequently , FastANO VA only needs to perform the ANO VA test on a small number of can-didate SNP-pairs without the risk of missing any signicant ones. Extensi ve experiments demonstrate that FastANO VA is orders of magnitude faster than the brute-force implementation of ANO VA tests on all SNP pairs.
 Categories and Subject Descriptors: H.2.8 [Database Applica-tions]: Data Mining; J.3 [Life and Medical Sciences]: Biology and Genetics General Terms: Algorithm, Performance Keyw ords: Association study , ANO VA test
Quantitati ve phenotype association study analyzes genetic vari-ation across a population in order to nd the genetic factors un-derlying continuous phenotypes (such as height or weight). These phenotypes are often comple x in the sense that the y are lik ely due to the effects of multiple genes [6, 24]. The most abundant source of genetic variation is represented by single nucleotide polymor -phisms (SNPs). A SNP is a DN A sequence variation occurring when a single nucleotide (A, T, G, or C) in the genome dif fers be-tween indi viduals of a species. For inbred species, a SNP usually sho ws variation between only two of the four possible nucleotide types [12], which allo ws us to represent it by a binary variable. The binary representation of a SNP is also referred to as the genotype of the SNP .

Various statistics can be applied to measure the association be-tween SNPs and the phenotypes of interest, among which ANO VA (analysis of variance) test is one of the standard statistic meth-ods and has been routinely used in quantitati ve phenotype associa-tion study [18]. The goal of ANO VA test is to determine whether the group means are signicantly dif ferent after accounting for the variances within groups. It accomplishes the comparison by de-composing the total variance in the data into within-group variance and between-group variance. If the between-group variance is suf-ciently lar ger than the within-group variance, then the test con-cludes that there is signicant (phenotypic) dif ference between the groups.

In the application of phenotype-SNP association study , the indi-viduals' phenotype values are grouped by the genotype of a SNP or a subset of SNPs. Figure 1(a) sho ws an example of strong asso-ciation between a phenotype and a SNP . 0 and 1 on the x-axis rep-resent the SNP genotype and the y-axis represents the phenotype. Each point in the gure represents an indi vidual. It is clear from the gure that the phenotype values are partitioned into two groups with distinct means, hence indicating a strong association between the phenotype and the SNP . On the other hand, if the genotype of a SNP partitions the phenotype values into groups as sho wn in Figure 1(b), the phenotype and the SNP are not associated with each other .
Recent adv ances in high-throughput techniques enable genotyp-ing SNPs in genome-wide scale, resulting in lar ge datasets con-taining thousands to hundreds of thousands of SNPs [1, 3]. The vast number of SNPs has posed great computational challenge to genome-wide association study . In order to understand the un-derlying biological mechanisms of comple x phenotype, one needs to consider the joint effect of multiple SNPs simultaneously . Al-though the idea of studying the association between phenotype and multiple SNPs is straightforw ard, the implementation is nontri v-ial. For a study with total N SNPs, in order to nd the associa-tion between n SNPs and the phenotype, a brute-force approach Figur e 1: Examples of associations between a phenotype and tw o differ ent SNPs is to exhausti vely enumerate all N and evaluate their associations with the phenotype. The computa-tional burden imposed by this enormous search space often mak es the complete genome-wide association study intractable.
The computational challenge of genome-wide association study is further compounded by another well-kno wn statistical problem  X  the multiple testing problem [14]. The multiple testing problem can be described as the potential increase in Type I error when sta-tistical tests are performed multiple times. Let be the Type I error for each independent test. If n independent comparisons are performed, the experimental-wise error 0 is given by For example, when = 0 : 05 and n = 20 , 0 = 1 0 : 95 20 = 0 : 64 . We have 64% probability to get at least one spurious result. Determining the statistical signicance of the association between the phenotype and SNPs is crucial. Bonferroni correction based on the assumption that all n tests are independent is too conserv ative for the genome-wise association studies since SNPs are often corre-lated. Alternati vely , permutation procedure can be used and much preferred in association studies which automatically tak es the cor -relation structure of SNPs into consideration.

The idea of permutation is to randomly permute the phenotype hundreds to thousands of times. For each permutated phenotype, the association analysis will be repeated. Then the null distrib ution of the test statistics is estimated and used to assess the statistical signicance of the ndings from the original phenotype. Ho we ver, permutation test is very time-consuming since the test procedure needs to be performed in all permutations in order to nd the thresh-old.

Algorithm development to support these lar ge scale analysis is still in its inf anc y stage. Most existing work focuses on studying the association between the phenotype and SNP-pairs and can only handle a small number of SNPs. Given a pair of SNPs, the pheno-type values can be partitioned into at most four groups by the geno-type of the SNP-pair , i.e., 00, 01, 10, and 11. Since each SNP has a distinct location on the genome, the association study of a pheno-type and SNP-pairs is also called two-locus association mapping . Important ndings are appearing in the literature from studying the association between phenotypes and SNP-pairs [21, 22, 27].
Although the standard ANO VA test has been a valuable tool to nd association between SNP-pairs and phenotype, it is usu-ally not performed in genome-wide scale. This is due to the fact that the search space of two-locus association mapping in genome-wide scale prohibits an exhausti ve search. Suppose that the dataset consists of N SNPs and the number of permutations is K . The total number of ANO VA tests is KN ( N 1) = 2 . Given a mod-erate number of SNPs N = 10 ; 000 and number of permutations K = 1 ; 000 , the number of ANO VA tests is around 5 10 Therefore, ANO VA test is often reserv ed for validating a small set of candidates identied by other methods [17, 25].

In this paper , we examine the computational aspect of ANO VA test. We present an efcient algorithm, FastANO VA, and sho w that the standard ANO VA test can be applied in genome-wide scale for two-locus association mapping even when the permutation proce-dure is needed. Unlik e algorithms applying heuristics, FastANO VA is a complete algorithm, i.e., it guarantees to nd the optimal solu-tion, though it does not explicitly examine all possible SNP-pairs. In fact, a lar ge portion of the SNP-pairs are pruned without the need of performing the tests. FastANO VA establishes an upper bound on the two-locus ANO VA test. The upper bound is the sum of two terms: one based on the ANO VA test between phenotype and a sin-gle SNP , and the other based on the pair -wise SNP genotype and the ordered phenotype values. This formulation of the upper bound allo ws the algorithm to calculate the bound for a lar ge number of SNPs together , which enables fast candidate retrie val. Moreo ver, the intermediate results for calculating the second term of the upper bound is independent of phenotype permutations. Hence the y only need to be computed once and can be reused in all permutations. Applying this bound, FastANO VA is able to identify SNP-pairs with signicant ANO VA test values using only a small fraction of the time required by performing ANO VA test on all SNP-pairs. The principles developed in FastANO VA are also applicable to the gen-eral case of testing SNP subsets containing more than two SNPs.
The problem of phenotype-SNP association study has attracted extensi ve research interests and is an ongoing research area in biol-ogy and statistic communities. In this section, we give a briey re-vie w of the related work from a computational point of vie w. Please refer to [4, 7, 11] for excellent surv eys of existing work.
Under the assumption that the number of SNPs is limited, e.g., from tens to a few hundreds, exhausti ve algorithms that explicitly enumerate all possible SNP combinations and evaluate their asso-ciations with the phenotype have been developed [16, 19]. These methods are not well adapted to genome-wide association study .
To avoid exhausti vely enumerating the search space, a common approach is to break the problem into two steps [8, 10]. First, a subset of important SNPs are selected. Second, within the se-lected subset, the association between SNPs and the phenotypes are searched. These methods are not complete since the SNPs with weak mar ginal effects may not be selected in the rst place. Ge-netic algorithm [5, 15] has been applied in nding SNP-pairs for quantitati ve phenotypes. These methods cannot guarantee to nd the optimal solution.

Feature selection methods [13] have been proposed to address the problem of nding important SNPs. In feature selection, the selected feature subset usually contains features that have low cor -relation with each other but have strong correlation with the tar get feature. In the application of selecting SNPs, the goal is to select a subset of SNPs that can be used as proxies for all SNPs in the genome [9, 23]. The selected SNPs can then be used as the input SNPs in the association study . Apparently , these methods are also not complete.
Let f X 1 ; X 2 ; ; X N g be the set of SNPs of M indi viduals (
X i 2 f 0 ; 1 g ; 1 i N ) and Y = f y 1 ; y 2 ; ; y M g be the Table 1: Possible groupings of phenotype values by the geno-types of X i and ( X i X j ) quantitati ve phenotype of interest, where y m ( 1 m M ) is the phenotype value of indi vidual m .

For any SNP X i ( 1 i N ), we represent the F-statistic from the ANO VA test of X i and Y as F ( X i ; Y ) . For any SNP-pair ( X i X j ) , we represent the F-statistic from the ANO VA test of ( X i X j ) and Y as F ( X i X j ; Y ) .

The basic idea of ANO VA test is to partition the total sum of squared deviations SS T into between-group sum of squared devia-tions SS B and within-group sum of squared deviations SS W In our application of two-locus association study , Table 1(a) and Table 1(b) sho w the possible groupings of phenotype values by the genotypes of X i and ( X i X j ) respecti vely .
 1(a) and Table 1(b). We use SS B ( X i ; Y ) and SS B ( X distinct the one locus (i.e., single-SNP) and two locus (i.e., SNP-pair) analyses. Specically , we have The F-statistics for ANO VA tests on X i and ( X i X j ) are: where g in Equation (2) is the number of groups that the genotype of ( X i X j ) partitions the indi viduals into. Possible values of 3 or 4, assuming all SNPs are distinct: If none of groups a , a 2 , b 1 , b 2 is empty , then g = 4 . If one of them is empty , then g = 3 .

Let T = total sum of squared deviations does not depend on the groupings of indi viduals: a specic group, and n group be the number of indi viduals in that lows:
Note that for any group of A , B , a 1 , a 2 , b 1 , b 2 , if then T
The two-locus association mapping with permutation test is typ-ically conducted in the follo wing way [18].
 First, for every SNP-pair ( X i X j ) ( 1 i &lt; j N ), the ANO VA test is performed and F ( X i X j ; Y ) is recorded.
Second, a permutation test is performed to get a reference distri-bution in order to assess the statistical signicance of pre vious nd-ings. More specically , a permutation Y k of Y is generated by sam-pling the phenotype Y without replacement. In other words, phe-notype values are randomly assigned to indi viduals in the dataset with no single phenotype value being assigned to more than one indi vidual. Let Y 0 = f Y 1 ; Y 2 ; ; Y K g be the set of tions of Y . For each permutation Y k 2 Y 0 , let F Y maximum F-statistic value of all SNP-pairs, i.e., The distrib ution of f F Y distrib ution for assessing the statistical signicance of values found using the original phenotype Y : Given a Type I er-ror threshold , the critical value F is the K -th lar gest value in f F Y k j Y k 2 Y 0 g . For example, suppose that = 0 : 01 K = 1000 , then F is the 10th lar gest value in f F Y k j Y The SNP-pair ( X i X j ) whose F-statistic value F ( X i X is considered as signicant at .
 Two computational problems need to be solv ed in this procedure. The rst one is to nd the critical value F for a given Type I error threshold . The second one is to nd all SNP-pairs ( X i X F-statistics are greater than F . We formalize these two problems as follo ws.

Pr oblem (1) : Given the Type I error threshold , nd the critical value F , which is the K -th lar gest value in f F Y
Pr oblem (2) : Given the threshold F , nd all SNP-pairs ( X such that F ( X i X j ; Y ) F .
 A brute force approach to these two problems is to enumerate all SNP-pairs and nd their F-statistics. In Problem (1), for each per -mutation Y k 2 Y , all SNP-pairs need to be enumerated in order to nd the maximum value F Y be enumerated to see if their test values are abo ve the threshold Computationally , Problem (1) is more challenging, since the per -mutation number K can range form hundreds to thousands, which means the running time of nding the critical value F can be hun-dreds to thousands times longer than the running time of nding the signicant SNP-pairs in Problem (2) using a brute-force search.
In the reminder of the paper , we rst deri ve an upper bound on two-locus ANO VA test value and discuss how this upper bound enables an efcient ANO VA testing for a single phenotype. Then we sho w how this approach can be easily extended to handle the permutation procedure.
Since the total sum of squared deviations does not change, from the calculation of F ( X i ; Y ) and F ( X i X j ; Y ) (Equations (1) and (2)), we kno w that the relationship between these two tests only de-pends on the relationship between SS B ( X i ; Y ) and SS Ne xt we sho w that SS B ( X i X j ; Y ) can be updated from For groups A , a 1 and a 2 , let Similarly , we have
Thus, SS B ( X i X j ; Y ) can be updated using SS B ( X i
Note that if any one of f n a ilarly , if any one of f n b
Ne xt, we develop an upper bound of SS B ( X i X j ; Y ) . We rst sho w the deri vation of an upper bound of A . A similar idea can be applied to nd an upper bound of B .
Let f y m j y m 2 A g = f y A values in group A . Without loss of generality , assume that these phenotype values are arranged in ascending order , i.e.,
The deri vative of A with respect to T a Thus we have
We have the range of T a
The maximum value of A is attained when T a T We use R 1 ( X i X j Y ) to denote this upper bound.

Let f y m j y m 2 B g = f y B values in group B . Without loss of generality , assume that these phenotype values are arranged in ascending order , i.e., Similarly , we can deri ve the bound on B :
We use R 2 ( X i X j Y ) to denote this upper bound. The symbols used in Inequalities (4) and (5) are summarized in Table 2.
From Equation (3), Inequalities (4) and (5), we have the overall upper bound on SS B ( X i X j ; Y ) : T HEOREM 4.1. (Upper bound of SS B ( X i X j ; Y ) ) SS
B ( X i X j ; Y ) SS B ( X i ; Y ) + R 1 ( X i X j Y ) + R P ROPERTY 4.2. The upper bound in Theor em 4.1 is tight.
The tightness of the bound is obvious from the deri vation of the upper bound, since there exists some genotype of SNP-pair ( X i X j ) that mak es the equality hold. For the same reason, we have the follo wing property .

P ROPERTY 4.3. The upper bound in Theor em 4.1 does not ex-ceeds the total sum of squar ed deviations, i.e., SS
B ( X i ; Y ) + R 1 ( X i X j Y ) + R 2 ( X i X j Y ) SS T
In this section, we sho w how our algorithm FastANO VA uti-lizes the upper bound in Theorem 4.1 to achie ve efcient two-locus ANO VA testing. In Section 5.1, we describe the method for Prob-lem (2) discussed in Section 3, that is, given the threshold all SNP-pairs whose F-statistics are greater than F . Then in Sec-tion 5.2, we discuss how FastANO VA performs in permutation pro-cedure, i.e., the scenario of Problem (2) in Section 3.
Given the threshold F , to nd all SNP-pairs whose F-statistics are greater than F , a brute-force approach is to enumerate all SNP-pairs. To expedite this process, we emplo y the inequality in The-orem 4.1 to prune SNP pairs that will have no chance to pass the signicance threshold F . From Equation (2), we kno w that nd-ing SNP-pairs ( X i X j ) whose F-statistics F ( X i X j ; Y ) F equi valent to nding SNP-pairs satisfying Theorem 4.1 suggests that we only need to compute the F-statistics for the SNP-pairs that satisfy: We refer to these SNP-pairs as candidate SNP-pairs.

We now discuss how to apply the upper bound in Theorem 4.1 in detail. The set of all SNP-pairs is partitioned into non-o verlapping Figur e 2: The index array Array ( X i ) for efcient retrie val of the candidate SNP-pairs groups such that the upper bound can be readily applied to each group. For every X i (1 i N ) , let AP ( X i ) be the set of SNP-pairs For all SNP-pairs in AP ( X i ) , n A , T A , n B , T B and are constants. Moreo ver, l a u and n b dif ferent SNP-pairs ( X i X j ) in AP ( X i ) .

Note that n a and n b to pro ve that switching n a value and the correctness of the upper bound. This is also true if we switch n b can always assume that n a of 1's and number of 0's in X j when X i tak es value 1, and is the smaller one between the number of 1's and number of 0's in X j when X i tak es value 0. The follo wing property species the values that n a omitted here.

P ROPERTY 5.1. If ther e are m 1's and ( M m ) 0's in X i for any ( X i X j ) 2 AP ( X i ) , the possible values that are f 0 ; 1 ; 2 ; ; b m= 2 cg . The possible values that are f 0 ; 1 ; 2 ; ; b ( M m ) = 2 cg .
 To efciently retrie ve the candidates, the SNP-pairs ( X i 2D array , referred to as Array ( X i ) .

E XAMPLE 5.2. Suppose that ther e are 32 individuals, and the genotype of X i consists of half 0's and half 1's. Thus for the SNP-pair s in AP ( X i ) , the possible values of n a f 0 ; 1 ; 2 ; ; 8 g . Figur e 2 shows the 9 9 arr ay, whose entries repr esent the possible values of ( n a SNP-pair s ( X i X j ) 2 AP ( X i ) . The entries in the same column have the same n a n column. The n b entry of the arr ay is a pointer to the SNP-pair s ( X i X having the corr esponding ( n a
Note that for a SNP-pair ( X i X j ) 2 AP ( X i ) , n a be calculated faster than performing the two-locus ANO VA test. To obtain n a 1's of X j when X i is equal to 0 and 1 respecti vely , which can be done by a linear scan of the M 2 binary matrix consisting of the Algorithm 1 : FastANO VA (no phenotype permutation)
Input : SNPs X 0 = f X 1 ; X 2 ; ; X N g , phenotype Y , and
Output : nd the set of SNP-pairs Resul t ( Y ) = for every X i 2 X 0 , do end return Resul t ( Y ) . genotypes of X i and X j . In contrast, to calculate the F-statistic, we rst need to scan the M 3 binary matrix consisting of X and Y in order to nd out how the phenotype values are grouped by the genotype of ( X i X j ) . Then a constant time O ( t ) to compute the F-statistic.

P ROPERTY 5.3. For any SNP X i , the maximum number of the entries in Array ( X i ) is ( d M
The proof of Property 5.3 is straightforw ard and omitted here. In order to nd candidate SNP-pairs, we scan all entries in Array ( X to calculate their upper bounds. Since the SNP-pairs inde xed by the same entry share the same ( n a upper bound. In this way, we can calculate the upper bound for a group of SNP-pairs together . Note that for typical genome-wide association studies, the number of indi viduals M is much smaller than the number of SNPs N . Therefore, the additional cost for ac-cessing Array ( X i ) is minimal compared to performing ANO VA tests for all pairs ( X i X j ) 2 AP ( X i ) .
 Algorithm 1 describes the FastANO VA algorithm for nding the SNP-pairs whose F-statistics are greater than the threshold The inputs of FastANO VA include the N SNPs, the phenotype Y and the critical value F . For each X i , FastANO VA rst in-candidate SNP-pairs by accessing Array ( X i ) and records them in Cand ( X i ; Y ) . The candidates in Cand ( X i ; Y ) are then evaluated for their F-statistics. The candidates whose F-statistics are greater than or equal to F are reported by the algorithm.
For multiple tests, permutation procedure is often used in genetic analysis for controlling family-wise error rate. For genome-wide association study , permutation is less commonly used because it often entails prohibiti vely long computation time. Our FastANO VA algorithm mak es permutation procedure feasible in genome-wide association study .

Let Y 0 = f Y 1 ; Y 2 ; ; Y K g be the K permutations of the phe-notype Y . Follo wing the idea discussed in Section 5.1, the upper bound in Theorem 4.1 can be easily incorporated in the algorithm to handle the permutations.
 P ROPERTY 5.4. For every SNP X i , the inde xing structur e Array ( X i ) is independent of the permuted phenotypes in
The correctness of this property relies on the fact that, for any ( X i X j ) 2 AP ( X i ) , n a 1 and n b 1 only depend on the genotype Algorithm 2 : FastANO VA (for permutation test)
Input : SNPs X 0 = f X 1 ; X 2 ; ; X N g , phenotype Output : nd the critical value F
T list K dummy phenotype permutations with F-statistics 0 ;
F = 0 ; for every X i 2 X 0 , do end return F . of the SNP-pair and thus remain constant for dif ferent phenotype permutations. Therefore, for each X i , once we build Array ( X it can be reused in all permutations.
 The FastANO VA algorithm for permutation test is described in Algorithm 2. The inputs include the N SNPs, K phenotype per -mutations, and the Type I error threshold . The goal is to nd the critical value F , which is the K -th lar gest value in f F Y 0 g . Recall that F Y k is the maximum F-statistic value for pheno-type Y k . We use T list to keep the K phenotype permutations having the lar gest F-statistics found by the algorithm so far. Ini-tially , T list contains K dummy phenotype permutations with test values 0. The smallest F-statistic value in T list , initially 0, is used as the threshold to prune the SNP-pairs. For each FastANO VA rst inde xes ( X i X j ) 2 AP ( X i ) using Array ( X Then it nds the set of candidate SNP-pairs Cand ( X i ; Y cessing Array ( X i ) for every phenotype permutation Y k a candidate' s F-statistic value is greater than the current threshold, then T list is updated accordingly: If the candidate' s phenotype is not in the T list , then the phenotype in T list having the small-est F-statistic value is replaced by Y k . If the candidate' s phenotype Y k is already in T list , we only need to update its corresponding F-statistic value to be the maximum value found for the phenotype so far. The threshold is also updated to be the smallest F-statistic value in T list . In this section, we study the time and space comple xities of the FastANO VA algorithm for permutation test. The comple xity for a single phenotype can be analyzed in a similar way.

Time complexity : For each X i , FastANO VA needs to inde x ( X i X j ) in AP ( X i ) . The comple xity to build the inde xing struc-ture for all SNPs is O ( N ( N 1) M= 2) . The worst case for access-ing all Array ( X i ) for all permutations is O ( N K ( d 1) 2 ) = O ( N KM 2 ) . Let C = the total number of candidates. The overall time comple xity of Fas-tANO VA is thus O ( N ( N 1) M= 2) + O ( N K ( d M O ( i;k j Cand ( X i ; Y k ) j M ) = O ( N 2 M + N KM 2 + CM ) experimental results sho w that the overhead of building the inde x-ing structures and accessing them for candidate retrie val are negli-gible when lar ge permutation tests are needed. Note that the time comple xity of the brute-force approach is O ( KN ( N 1) M= 2) = O ( KN 2 M ) .

Space complexity : The total number of variables in the dataset, including the SNPs and the phenotype permutations, is N + K maximum space of the inde xing structure Array ( X i ) is 1) 2 + N ) . Note that for each SNP X i , FastANO VA only needs to access one inde xing structure, Array ( X i ) , for all permutations. Once the evaluation process for X i is done for all permutations, Array ( X i ) can be cleared from the memory . Therefore, the space comple xity of FastANO VA is O (( N + K ) M ) + O (( d M N ) = O (( N + K ) M ) since M N . The space comple xity is linear to the dataset size.
In this section, we present extensi ve experimental results on eval-uating the performance of the FastANO VA algorithm. We sho w (1) the runtime comparison between FastANO VA and the brute-force approach under various experimental settings, (2) the punning ef-fect of the upper bound, and (3) the relati ve computational cost of each component of FastANO VA. FastANO VA is implemented in C++. The experiments are performed on a 2.4 GHz PC with 1G memory running Windo wsXP system.

Dataset : The SNP dataset used for the experiments is extracted from a set of combined SNPs from the 140k Broad/MIT mouse dataset [26] and 10k GNF [2] mouse dataset. This mer ged dataset has 156,525 SNPs for 71 indi viduals. The missing values in the dataset are imputed using NPUTE [20]. We use both real pheno-types and synthetic phenotypes in our experiments. The real phe-notype data is available from the Jackson Lab [3].
We use three real phenotypes in our experiments: cardio vascu-lar (blood pressure), metabolism (w ater intak e), and neurosensory (acoustic startle response). Table 3 sho ws the statistics of the geno-type datasets corresponding to the three phenotypes. The number of SNPs in the table indicates the number of unique SNPs in each genotype dataset. # indi viduals 19 26 34
We rst sho w the results on nding the critical value F , which is more time-consuming than nding the signicance SNP-pairs given the critical value F for a single phenotype.
FastANO VA v.s. the brute-f orce appr oach We compare Fas-tANO VA with the brute-force approach under various experimental settings. Since the brute-force approach is very time-consuming, we use a moderate number of SNPs and permutations in the de-fault setting in order to sho w the performance comparisons. The def ault setting is as follo ws: The Type I error threshold The number of permutations is 100. The number of SNP is 10,000 for the two lar ger datasets of metabolism and neurosensory , and 2,900 for the cardio vascular SNP dataset. These experimental set-tings are chosen to demonstrate the performance gain and enhanced scalability offered by FastANO VA over the brute-force implemen-tation. FastANO VA can handle much lar ger SNP panels and lar ger number of permutation tests. The performance of FastANO VA is expected to follo w the same trends presented in the remainder of this section.

Figures 3, 4, and 5 sho w the running time comparison of Fas-tANO VA and the brute-force approach on the three genotype phe-notype datasets using dif ferent settings. The y-axis is in log arithm scale. The numbers abo ve the runtime line of FastANO VA indi-cate the ratio of the runtimes of the brute-force approach over Fas-tANO VA. We terminate the programs that have run over 72 hours without completion.
 Figure 3 sho ws the runtime comparison when varying the Type I error thresholds. For each dataset, the runtime of the brute-force approach does not change over dif ferent Type I error thresholds. The runtime of FastANO VA decreases as the threshold decreases. FastANO VA offers 218 fold speedup when = 0 : 05 and 293 fold speedup when = 0 : 01 on cardio vascular dataset. We can also ob-serv e a similar two-orders-of-magnitude speedup in the metabolism and neurosensory datasets. This is consistent with the pruning ef-fect of the upper bound, which will be presented later in this sec-tion. In general, the lower the Type I error threshold, the more powerful the pruning effect, hence the faster the algorithm.
Figure 4 depicts the comparison of these two approaches when the number of SNPs changes. From these gures, it is clear that FastANO VA is about two orders of magnitude faster than the brute-force approach. The brute-force approach cannot nish in 72 hours when the number of unique SNPs is greater than 26k in the metabolism dataset and greater than 24k in the neurosensory dataset. We ob-serv e that the runtime ratio tends to increase (approaching three-orders-of-magnitude speedup) as the number of SNPs increases. This indicates that the performance gain of FastANO VA is even higher for lar ger SNP datasets.

Figure 5 sho ws the runtime comparison when the number of phe-notype permutations changes. The runtime of the brute-force ap-proach is linear with respect to the number of permutations. Fas-# SNPs 3rd 99 : 996% 99 : 996% 99 : 997% # Perm. 300 99 : 977% 99 : 962% 99 : 919% Table 4: Pruning effects on cardio vascular , metabolism and neur osensory datasets when nding critical value F tANO VA is consistently two orders of magnitude faster than the brute-force approach. The performance gap increases as the num-ber of permutations increases.

Pruning effect of the upper bound Table 4 sho ws the percent-age of SNP-pairs pruned under dif ferent experimental settings. Since the three datasets have dif ferent numbers of SNPs, the 1st to 5th rows in the cate gory of "# SNPs" correspond to the settings from left to right on x-axis in each plot in Figure 4. Most SNP-pairs are pruned under all settings. Moreo ver, as the Type I error threshold decreases, the pruning ratio increases, which is consistent with runtime comparison sho wn in Figure 3. As the number of SNPs increases, the pruning ratio also increases. This is because, with more SNPs, the dynamic threshold used to prune the search space becomes higher . Hence a lar ger portion of SNPs are pruned. This is consistent with results sho wn in Figure 4. Note that from Table 4 we observ e that the pruning ratio tends to remain steady when the number of permutations changes. Ho we ver, we observ e that the runtime ratio increases as the number of permutations increases. The reason for these two dif ferent trends will become clear after we sho w the results on the computational cost of each component of FastANO VA in the next subsection.
In this subsection, we study the comparison between FastANO VA and the brute-force approach in nding signicant SNP-pairs given a critical value F . Only the original phenotype (without permuta-tions) is used in this procedure. We examine the detailed compu-tation cost of each component of the FastANO VA algorithm. Fas-tANO VA has three major components: building the inde xing struc-ture Array ( X i ) for every SNP X i , accessing Array ( X the candidate SNP-pairs, and performing ANO VA tests on these candidates.

Due to space limitation, we only sho w the performance compari-son on the metabolism dataset. Similar beha viors are also observ ed on the other two datasets. The def ault experimental setting is the same as before. Figure 6(a) and Figure 6(b) sho w the runtime of these three components when varying the Type I error threshold and number of SNPs in the dataset respecti vely . Since F is a function of , in Figure 6(a), we plot the runtime with respect to . In both gures, the three lines from the bottom sho w the runtime of these three components. The runtime of the brute-force approach is the top line. As we can see from these two gures, performing two-locus ANO VA tests on candidate SNP pairs is two to three orders of (a) Varying threshold values Figur e 6: Runtime of each component of FastANO VA v.s. run-time of the brute-f orce appr oach in the process of nding sig-nicant SNP-pairs Table 5: Pruning effect on cardio vascular , metabolism and neu-rosensory datasets when nding F Y magnitude faster than performing such tests on all SNP-pairs. This is the benet of the upper bound pruning since most SNP-pairs have been pruned and only a very small portion of candidates need to be evaluated for their F-statistics. The cost for accessing the inde xing structures is also small, which demonstrates the efcienc y of the method introduced in Section 5.1 for candidate retrie val. Among the three components of FastANO VA, the most time-consuming one is building the inde x structures. Yet, its runtime is only a small fraction of the runtime of performing the two-locus ANO VA tests on all SNP pairs. Note that, in permutation test, building the inde x structures is a one time cost. Once the inde x structures are built, the y can be reused in all permutations. Therefore, the amortized overhead per permutation decreases when the number of permuta-tions increases. This is wh y the pruning ratio remains steady as in Table 4 while the runtime ratio increases as in Figure 5 when the number of permutations increases.
Sometimes the users may be interested in nding F Y of all phenotype permutations. In this way, the users can get the critical value F for any Type I error threshold ranging from 0 to 1, without re-running the permutation tests for dif ferent thresh-olds. Recall that, given a set of phenotype permutations f Y 1 ; Y 2 ; ; Y K g , F Y k = max f F ( X i X j ; Y k ) j 1 i &lt; j N g is the maximum F-statistic value for permutation Y k . F is the K -th lar gest value in f F Y k j Y k 2 Y 0 g . In this subsection, we sho w the pruning effect of the upper bound when it is applied to determine F Y for each permutation Y k , the dynamic threshold used to prune the search space is the lar gest F-statistic value of Y k identied by the algorithm so far.

Table 5 sho ws the pruning ratio of applying the upper bound to the three real phenotype datasets. The experimental setting is the same as the def ault setting before. As expected, the pruning ratios are slightly lower than those in Table 4, where smaller Type I error thresholds are used to prune the search space. Ho we ver, the pruning ratios on all three datasets are still abo ve 97% . Moreo ver, nding Table 6: Pruning effect when nding critical value F using thr ee synthetic phenotypes all
F Y k pro vides the adv antage that we can get the F values for all possible values instead of just for a specic one.
To further study the performance of FastANO VA, we generate three synthetic phenotypes whose values follo w three dif ferent dis-trib utions: uniform, standard normal, and standard exponential dis-trib ution. Our purpose is to study the pruning effect of the upper bound under dif ferent phenotype distrib utions. The def ault setting of the experiments in this subsection is as follo ws: #indi viduals = 32, #SNPs=10,000, #permutations=100, = 0 : 01 . There are 60,970 unique SNPs for these 32 indi viduals.

Table 6 sho ws the pruning ratio of FastANO VA under dif ferent settings using permutation test. In this table, we also include the pruning ratio when the number of indi viduals varies. We observ e that the pruning effects are similar to that of real phenotypes, which indicates that the upper bound pruning is effecti ve and insensiti ve to dif ferent phenotype distrib utions.
The lar ge number of available SNPs poses great computational challenge to the genome-wide association study . To assess the signicance of the ndings, permutation test is usually required. These factors mak e the association study a very time-consuming process. Thus tools that can impro ve the efcienc y of the associa-tion study are in demand.

In this paper we present an efcient algorithm, FastANO VA, for genome-wide two-locus ANO VA test. FastANO VA is a complete algorithm which guarantees to nd the optimal solution. Experi-mental results demonstrate that FastANO VA is two to three orders of magnitude faster than the brute-force alternati ve. The efcienc y of FastANO VA is gained from two sources. First, it utilizes an upper bound of the two-locus ANO VA test value to prune a major -ity of the SNP-pairs. Second, it identies and reuses computation units that are independent of the phenotype and hence are invari-ant in permutation test. By eliminating redundant computation of these invariant units, FastANO VA is much more efcient than the brute-force method.

Ev en though FastANO VA is designed for two-locus association study of binary SNPs, the principles used in FastANO VA are gen-eral and applicable to the association study on SNP subsets con-taining more than two SNPs, and the heterozygous case where SNPs are encoded as f 0 ; 1 ; 2 g . In our future work, we will investi-gate how to apply these principles for association study considering joint effects of more than two SNPs and the heterozygous case. This research was partially supported by EP A grant ST AR-RD832720, NSF grant IIS-0448392, and a Micosoft Ne w Faculty Fello wship.
