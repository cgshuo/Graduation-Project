 The searching of objects other than the standard text files that have long been the main focus of information retrieval is a multi-stage process: the features that identify those objects must be identified and extracted, those features must then be stored in a representation allowing for efficient retrieval, and finally, a search engine must be developed or reconfigured to work with the new representation. For this reason we have seen that there are advantages to addressing the common aspects of this problem: representation and searching.
 objects is the topology-sensitive document signature [ 5]. These document signa-tures function as semantically-aware digests of the objects they represent, with pairwise similarity relationships between signatures maintained. These signature representations have a number of properties that make them more desirable to store and search from an information retrieval perspective than the original objects they represent. They are usually much smaller in size, meaning they are easier to store in memory and replicate across cluster nodes. They are also of fixed length, which makes them easy to process efficiently. The document signatures used as an intermediary retrieval format by this soft-ware are functionally locality-sensitive hashes ; that is, rather than exhibiting the traditional properties of hashes (where two different documents will return two completely different hashes and none of the properties of the original document will be reflected in the hash), these more similar the original documents are to each other, the more similar their hashes will be in terms of Hamming [ 7] distance (the number of bits that differ between the two hashes). As a result, these document signatures can be used as a proxy for calculating the similarity between documents even when the original documents are unavailable.
 The TopSig software uses the TOPSIG [ 5] approach to generate signatures, which is a modified version of the Sahlgren [ 10] random indexing method, where the terms or features that make up the original document are hashed and the hashes summed together. Figure 1 shows this process used to build an 8-bit doc-ument signature from a sentence; the terms are hashed into vectors of positive and negative values which are weighted with the term X  X  inverse document fre-quency [ 11], summed together, then reduced to a binary representation (Table 1). The resulting signatures can be used in a number of information retrieval tasks, and because the representation is fixed, they can be used in this manner regardless of the format of the original documents. One of the most natural retrieval models this lends itself to is  X  X ore of the same X -style queries, where one or multiple known documents is available and the user wants to find more documents in the collection that are similar. These representations also lend themselves to classification and clustering tasks; we find that documents that share categories tend to occupy a Hamming space that is closer together than documents that do not (Fig. 1). This property holds for non-text data as well; Fig. 2 shows the results of utilising TopSig in conjunction with spatial smoothing to classify the hyperspectral 145  X  145 Indian Pines remote sensing scene with a 6.1 % error rate.
 A historic criticism of signature-based retrieval approaches is that queries, which require iterating over every signature in the collection in order to perform a search, are not as scalable as their inverted file counterparts [ 13]. When applied more generally to the problem of calculating many Hamming distances and find-ing those hashes that fall closest to the query, this is referred to as the Hamming distance problem [ 8]. TopSig supports both exhaustive Hamming distance queries (which exhibit the Hamming distance problem), as well as the generation and searching of inverted signature slice lists [ 3] (ISSLs).
 topology-aware document signatures and other locality-sensitive hashes, and are designed for the situation where a known signature is available for use as a query, the user wishes to retrieve signatures that are close to the query signature (and is less interested in signatures that are more distant) and where 100 % accu-racy is not required. The signatures are divided up into slices and each of these slices is inverted for storing in a table, where slices and their neighbours can be looked up in constant time. This slicing is functionally equivalent to the use of multiple independent hashing functions in LSH approaches like Minhash [ 1]. The approach can be configured to search a specified Hamming radius of slices adjacent to the query slice, and this can be expanded to bring in more results. Exhaustive Hamming distance comparisons can then be performed on only those results with the greatest potential.
 vide a great improvement to search speed, allowing the 500 million document ClueWeb09 English collection [ 2] to be searched in under 57 ms on one machine, something that would not be possible with exhaustive Hamming distance queries (due to factors including memory bandwidth limitations). The ISSL table needs to be generated beforehand and stored in memory during searching, compared to raw Hamming distance queries which can be performed on the signature collection as-is; however, the fact that it can easily scale to large collections eas-ily makes up for this. While the ISSL approach is geared towards approximate retrieval, this makes it highly flexible and performance-efficient compared to approaches like Spotsigs [ 12] and Multi-Index Hashing [ 9] that guarantee exact retrieval.
 TopSig is written in C and the core indexing and search tools have been heav-ily optimised and developed to take full advantage of multi-threaded systems. While support for multi-node clusters is not explicitly built into the software, the highly configurable nature of TopSig and the fact that signatures produced from multiple sources can be aggregated means that the time-consuming task of generating signatures from a large collection can be easily distributed over many machines with a standard job control system. In our demonstration we will show how TopSig can be used in a variety of infor-mation retrieval contexts that can benefit from the highly scalable and efficient architecture it provides. TopSig is designed to fit into any part of the information retrieval pipeline where it can be of service; as a result, the demonstration will be geared towards showing multiple scenarios where the software can be used. This paper provides a short introduction of the TopSig software, the algorithms it implements and the situations in which it can be used. While the software is still under active development, the main signature indexing and retrieval engines have been solid for the last few years and have already found their use in a variety of different researcher and student projects. TopSig is currently distributed under the GNU General Public License and the source code is freely available to access, modify and redistribute. It is available for download from http://www.topsig.org .

