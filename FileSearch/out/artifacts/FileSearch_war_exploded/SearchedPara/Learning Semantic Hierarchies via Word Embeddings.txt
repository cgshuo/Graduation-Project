 Semantic hierarchies are natural ways to orga-nize knowledge. They are the main components of ontologies or semantic thesauri (Miller, 1995; Suchanek et al., 2008). In the WordNet hierar-chy, senses are organized according to the  X  X s-a X  relations. For example,  X  dog  X  and  X  canine  X  are connected by a directed edge. Here,  X  canine  X  is called a hypernym of  X  dog . X  Conversely,  X  dog  X  is a hyponym of  X  canine . X  As key sources of knowledge, semantic thesauri and ontologies can support many natural language processing applications. However, these semantic resources are limited in its scope and domain, and their manual construction is knowledge intensive and time consuming. Therefore, many researchers Figure 1: An example of semantic hierarchy con-struction. have attempted to automatically extract semantic relations or to construct taxonomies.

A major challenge for this task is the auto-matic discovery of hypernym-hyponym relations. Fu et al. (2013) propose a distant supervision method to extract hypernyms for entities from multiple sources. The output of their model is a list of hypernyms for a given enity (left pan-el, Figure 1). However, there usually also exists hypernym X  X yponym relations among these hy-pernyms. For instance,  X   X   X  ( plant ) X  and  X   X   X   X  ( Ranunculaceae ) X  are both hyper-nyms of the entity  X   X   X  ( aconit ), X  and  X   X   X  ( plant ) X  is also a hypernym of  X   X   X   X  ( Ranunculaceae ). X  Given a list of hypernyms of an entity, our goal in the present work is to construct a semantic hierarchy of these hypernyms
Some previous works extend and refine manually-built semantic hierarchies by using other resources (e.g., Wikipedia) (Suchanek et al., 2008). However, the coverage is limited by the scope of the resources. Several other works relied heavily on lexical patterns, which would suffer from deficiency because such patterns can only cover a small proportion of complex linguistic cir-cumstances (Hearst, 1992; Snow et al., 2005). Besides, distributional similarity methods (Kotler-man et al., 2010; Lenci and Benotto, 2012) are based on the assumption that a term can only be used in contexts where its hypernyms can be used and that a term might be used in any contexts where its hyponyms are used. However, it is not always rational. Our previous method based on web mining (Fu et al., 2013) works well for hy-pernym extraction of entity names, but it is unsuit-able for semantic hierarchy construction which in-volves many words with broad semantics. More-over, all of these methods do not use the word semantics effectively.

This paper proposes a novel approach for se-mantic hierarchy construction based on word em-beddings. Word embeddings, also known as dis-tributed word representations, typically represent words with dense, low-dimensional and real-valued vectors. Word embeddings have been empirically shown to preserve linguistic regular-ities, such as the semantic relationship between words (Mikolov et al., 2013b). For example, v ( king )  X  v ( queen )  X  v ( man )  X  v ( woman ) , where v ( w ) is the embedding of the word w . We observe that a similar property also applies to the hypernym X  X yponym relationship (Section 3.3), which is the main inspiration of the present study.
However, we further observe that hypernym X  hyponym relations are more complicated than a single offset can represent. To address this chal-lenge, we propose a more sophisticated and gen-eral method  X  learning a linear projection which maps words to their hypernyms (Section 3.3.1). Furthermore, we propose a piecewise linear pro-jection method based on relation clustering to better model hypernym X  X yponym relations (Sec-tion 3.3.2). Subsequently, we identify whether an unknown word pair is a hypernym X  X yponym re-lation using the projections (Section 3.4). To the best of our knowledge, we are the first to apply word embeddings to this task.

For evaluation, we manually annotate a dataset containing 418 Chinese entities and their hyper-nym hierarchies, which is the first dataset for this task as far as we know. The experimental results show that our method achieves an F-score of 73.74% which significantly outperforms the pre-vious state-of-the-art methods. Moreover, com-bining our method with the manually-built hier-archy extension method proposed by Suchanek et al. (2008) can further improve F-score to 80.29%. As main components of ontologies, semantic hi-erarchies have been studied by many researchers. Some have established concept hierarchies based on manually-built semantic resources such as WordNet (Miller, 1995). Such hierarchies have good structures and high accuracy, but their cov-erage is limited to fine-grained concepts (e.g.,  X  Ranunculaceae  X  is not included in Word-Net.). We have made similar obsevation that about a half of hypernym X  X yponym relations are absent in a Chinese semantic thesaurus. Therefore, a broader range of resources is needed to supple-ment the manually built resources. In the construc-tion of the famous ontology YAGO, Suchanek et al. (2008) link the categories in Wikipedia onto WordNet. However, the coverage is still limited by the scope of Wikipedia.

Several other methods are based on lexical patterns. They use manually or automatically constructed lexical patterns to mine hypernym X  hyponym relations from text corpora. A hierarchy can then be built based on these pairwise relations. The pioneer work by Hearst (1992) has found out that linking two noun phrases (NPs) via cer-tain lexical constructions often implies hypernym relations. For example, NP 1 is a hypernym of NP 2 in the lexical pattern  X  X uch NP 1 as NP 2 . X  Snow et al. (2005) propose to automatically extract large numbers of lexico-syntactic patterns and subse-quently detect hypernym relations from a large newswire corpus. Their method relies on accurate syntactic parsers, and the quality of the automat-ically extracted patterns is difficult to guarantee. Generally speaking, these pattern-based methods often suffer from low recall or precision because of the coverage or the quality of the patterns.
The distributional methods assume that the con-texts of hypernyms are broader than the ones of their hyponyms. For distributional similarity com-puting, each word is represented as a semantic vector composed of the pointwise mutual infor-mation (PMI) with its contexts. Kotlerman et al. (2010) design a directional distributional measure to infer hypernym X  X yponym relations based on the standard IR Average Precision evaluation mea-sure. Lenci and Benotto (2012) propose anoth-er measure focusing on the contexts that hyper-nyms do not share with their hyponyms. However, broader semantics may not always infer broader contexts. For example, for terms  X  Obama  X  and  X  American people  X , it is hard to say whose contexts are broader.

Our previous work (Fu et al., 2013) applies a web mining method to discover the hypernyms of Chinese entities from multiple sources. We as-sume that the hypernyms of an entity co-occur with it frequently. It works well for named enti-ties. But for class names (e.g., singers in Hong Kong, tropical fruits) with wider range of mean-ings, this assumption may fail.

In this paper, we aim to identify hypernym X  hyponym relations using word embeddings, which have been shown to preserve good properties for capturing semantic relationship between words. In this section, we first define the task formally. Then we elaborate on our proposed method com-posed of three major steps, namely, word embed-ding training, projection learning, and hypernym X  hyponym relation identification. 3.1 Task Definition Given a list of hypernyms of an entity, our goal is to construct a semantic hierarchy on it (Figure 1). We represent the hierarchy as a directed graph G , in which the nodes denote the words, and the edges denote the hypernym X  X yponym relations. Hypernym-hyponym relations are asymmetric and transitive when words are unambiguous:  X   X  x,y  X  L : x H  X  X  X  y  X  X  ( y H  X  X  X  x ) Here, L denotes the list of hypernyms. x , y and z denote the hypernyms in L . We use H  X  X  X  to represent a hypernym X  X yponym relation in this paper. Actually, x , y and z are unambiguous as the hypernyms of a certain entity. Therefore, G should be a directed acyclic graph (DAG). 3.2 Word Embedding Training Various models for learning word embeddings have been proposed, including neural net lan-guage models (Bengio et al., 2003; Mnih and Hinton, 2008; Mikolov et al., 2013b) and spec-tral models (Dhillon et al., 2011). More recent-ly, Mikolov et al. (2013a) propose two log-linear models, namely the Skip-gram and CBOW model, to efficiently induce word embeddings. These two models can be trained very efficiently on a large-scale corpus because of their low time complexity.
No. Examples Table 1: Embedding offsets on a sample of hypernym X  X yponym word pairs.
 Additionally, their experiment results have shown that the Skip-gram model performs best in identi-fying semantic relationship among words. There-fore, we employ the Skip-gram model for estimat-ing word embeddings in this study.

The Skip-gram model adopts log-linear classi-fiers to predict context words given the current word w ( t ) as input. First, w ( t ) is projected to its embedding. Then, log-linear classifiers are em-ployed, taking the embedding as input and pre-dict w ( t )  X  X  context words within a certain range, e.g. k words in the left and k words in the right. After maximizing the log-likelihood over the entire dataset using stochastic gradient descent (SGD), the embeddings are learned. 3.3 Projection Learning Mikolov et al. (2013b) observe that word em-beddings preserve interesting linguistic regulari-ties, capturing a considerable amount of syntac-tic/semantic relations. Looking at the well-known example: v ( king )  X  v ( queen )  X  v ( man )  X  v ( woman ) , it indicates that the embedding offsets indeed represent the shared semantic relation be-tween the two word pairs.

We observe that the same property also ap-plies to some hypernym X  X yponym relations. As a preliminary experiment, we compute the em-bedding offsets between some randomly sampled hypernym X  X yponym word pairs and measure their similarities. The results are shown in Table 1.
The first two examples imply that a word can also be mapped to its hypernym by utilizing word embedding offsets. However, the offset from  X  carpenter  X  to  X  laborer  X  is distant from the one from  X  gold fish  X  to  X  fish , X  indicat-ing that hypernym X  X yponym relations should be more complicated than a single vector offset can represent. To verify this hypothesis, we com-pute the embedding offsets over all hypernym X  one shows some relations about people X  X  occupations. hyponym word pairs in our training data and vi-are adequately distributed in the clusters, which implies that hypernym X  X yponym relations in-deed can be decomposed into more fine-grained relations. Moreover, the relations about animals are spatially close, but separate from the relations about people X  X  occupations.

To address this challenge, we propose to learn the hypernym X  X yponym relations using projection matrices. 3.3.1 A Uniform Linear Projection Intuitively, we assume that all words can be pro-jected to their hypernyms based on a uniform tran-sition matrix. That is, given a word x and its hy-pernym y , there exists a matrix  X  so that y =  X  x . For simplicity, we use the same symbols as the words to represent the embedding vectors. Ob-taining a consistent exact  X  for the projection of all hypernym X  X yponym pairs is difficult. Instead, we can learn an approximate  X  using Equation 1 on the training data, which minimizes the mean-squared error: where N is the number of ( x,y ) word pairs in the training data. This is a typical linear regres-sion problem. The only difference is that our pre-dictions are multi-dimensional vectors instead of scalar values. We use SGD for optimization. 3.3.2 Piecewise Linear Projections A uniform linear projection may still be under-representative for fitting all of the hypernym X  hyponym word pairs, because the relations are rather diverse, as shown in Figure 2. To better model the various kinds of hypernym X  X yponym relations, we apply the idea of piecewise linear re-gression (Ritzema, 1994) in this study.

Specifically, the input space is first segmented into several regions. That is, all word pairs ( x,y ) in the training data are first clustered into sever-al groups, where word pairs in each group are expected to exhibit similar hypernym X  X yponym relations. Each word pair ( x,y ) is represented with their vector offsets: y  X  x for clustering. The reasons are twofold: (1) Mikolov X  X  work has shown that the vector offsets imply a certain lev-el of semantic relationship. (2) The vector off-sets distribute in clusters well, and the word pairs which are close indeed represent similar relations, as shown in Figure 2.

Then we learn a separate projection for each cluster, respectively (Equation 2).
 where N k is the amount of word pairs in the k th cluster C k .

We use the k -means algorithm for clustering, where k is tuned on a development dataset. 3.3.3 Training Data To learn the projection matrices, we extract train-ing data from a Chinese semantic thesaurus, Tongyi Cilin (Extended) (CilinE for short) which Figure 3: Hierarchy of CilinE and an Example of Training Data Generation is organized as a hierarchy of five levels, in which the words are linked by hypernym X  X yponym relations (right panel, Figure 3). Each word in CilinE has one or more sense codes (some words are polysemous) that indicate its position in the hi-erarchy.

The senses of words in the first level, such as  X   X  ( object ) X  and  X   X   X  ( time ), X  are very gen-eral. The fourth level only has sense codes without real words. Therefore, we extract words in the sec-ond, third and fifth levels to constitute hypernym X  hyponym pairs (left panel, Figure 3).

Note that mapping one hyponym to multi-ple hypernyms with the same projection (  X  x is unique) is difficult. Therefore, the pairs with the same hyponym but different hypernyms are ex-pected to be clustered into separate groups. Fig-ure 3 shows that the word  X  dragonfly  X  in the fifth level has two hypernyms:  X  insect  X  in the third level and  X  animal  X  in the second level. dragonfly H  X  X  X  animal should fall into differ-ent clusters.

In our implementation, we apply this constraint by simply dividing the training data into two cat-egories, namely, direct and indirect . Hypernym-hyponym word pair ( x,y ) is classified into the di-rect category, only if there doesn X  X  exist another word z in the training data, which is a hypernym of x and a hyponym of y . Otherwise, ( x,y ) is classi-fied into the indirect category. Then, data in these two categories are clustered separately. Figure 4: In this example,  X  k x is located in the circle with center y and radius  X  . So y is consid-ered as a hypernym of x . Conversely, y is not a hypernym of x 0 . x Figure 5: (a) If d ( X  j y,x ) &gt; d ( X  k x,y ) , we re-move the path from y to x ; (b) if d ( X  j y,x ) &gt; d ( X  k x,z ) and d ( X  j y,x ) &gt; d ( X  i z,y ) , we reverse the path from y to x . 3.4 Hypernym-hyponym Relation Upon obtaining the clusters of training data and the corresponding projections, we can identify whether two words have a hypernym X  X yponym re-lation. Given two words x and y , we find cluster C k whose center is closest to the offset y  X  x , and obtain the corresponding projection  X  k . For y to be considered a hypernym of x , one of the two conditions below must hold.

Condition 1: The projection  X  k puts  X  k x close enough to y (Figure 4). Formally, the euclidean distance between  X  k x and y : d ( X  k x,y ) must be less than a threshold  X  .
Condition 2: There exists another word z sat-isfying x H  X  X  X  z and z H  X  X  X  y . In this case, we use the transitivity of hypernym X  X yponym relations.
Besides, the final hierarchy should be a DAG as discussed in Section 3.1. However, the pro-jection method cannot guarantee that theoretical-ly, because the projections are learned from pair-wise hypernym X  X yponym relations without the w-hole hierarchy structure. All pairwise hypernym X  hyponym relation identification methods would suffer from this problem actually. It is an inter-esting problem how to construct a globally opti-mal semantic hierarchy conforming to the form of a DAG. But this is not the focus of this paper. So if some conflicts occur, that is, a relation cir-cle exists, we remove or reverse the weakest path heuristically (Figure 5). If a circle has only two nodes, we remove the weakest path. If a circle has more than two nodes, we reverse the weakest path to form an indirect hypernym X  X yponym relation. 4.1 Experimental Data In this work, we learn word embeddings from a which contains about 30 million sentences (about 780 million words). The Chinese segmentation is provided by the open-source Chinese language Then, we employ the Skip-gram method (Section 3.2) to train word embeddings. Finally we obtain the embedding vectors of 0.56 million words.
The training data for projection learning is collected from CilinE (Section 3.3.3). We ob-tain 15,247 word pairs of hypernym X  X yponym relations (9,288 for direct relations and 5,959 for indirect relations).

For evaluation, we collect the hypernyms for 418 entities, which are selected randomly from Baidubaike, following Fu et al. (2013). We then ask two annotators to manually label the seman-tic hierarchies of the correct hypernyms. The final data set contains 655 unique hypernyms and 1,391 hypernym X  X yponym relations among them. We randomly split the labeled data into 1/5 for de-velopment and 4/5 for testing (Table 2). The hi-erarchies are represented as relations of pairwise words. We measure the inter-annotator agreement using the kappa coefficient (Siegel and Castel-lan Jr, 1988). The kappa value is 0.96, which indi-cates a good strength of agreement. 4.2 Evaluation Metrics We use precision, recall, and F-score as our met-rics to evaluate the performances of the methods.
Since hypernym X  X yponym relations and its re-verse (hyponym X  X ypernym) have one-to-one cor-respondence, their performances are equal. For hyponym relations and hyponym X  X ypernym relations have one-to-one correspondence, their numbers are the same. Figure 6: Performance on development data w.r.t. cluster size. simplicity, we only report the performance of the former in the experiments. 5.1 Varying the Amount of Clusters We first evaluate the effect of different number of clusters based on the development data. We vary the numbers of the clusters both for the direct and indirect training word pairs.

As shown in Figure 6, the performance of clus-tering is better than non-clustering (when the clus-ter number is 1), thus providing evidences that learning piecewise projections based on clustering is reasonable. We finally set the numbers of the clusters of direct and indirect to 20 and 5, respec-tively, where the best performances are achieved on the development data. 5.2 Comparison with Previous Work In this section, we compare the proposed method with previous methods, including manually-built hierarchy extension, pairwise relation extraction M Snow 60.88 25.67 36.11 M invCL 49.63 62.84 55.46 M F u 87.40 48.19 62.13 M Emb 80.54 67.99 73.74 Table 3: Comparison of the proposed method with existing methods in the test set.
 Table 4: Chinese Hearst-style lexical patterns. The contents in square brackets are omissible. based on patterns, word distributions, and web mining (Section 2). Results are shown in Table 3. 5.2.1 Overall Comparison M
W iki + CilinE refers to the manually-built hierar-chy extension method of Suchanek et al. (2008). In our experiment, we use the category taxonomy shows that this method achieves a high precision but also a low recall, mainly because of the limit-ed scope of Wikipedia.
 M P attern refers to the pattern-based method of Hearst (1992). We extract hypernym X  X yponym relations in the Baidubaike corpus, which is al-so used to train word embeddings (Section 4.1). We use the Chinese Hearst-style patterns (Table 4) proposed by Fu et al. (2013), in which w rep-resents a word, and h represents one of its hy-pernyms. The result shows that only a small part of the hypernyms can be extracted based on these patterns because only a few hypernym relations are expressed in these fixed patterns, and many are expressed in highly flexible manners.
 In the same corpus, we apply the method M Snow originally proposed by Snow et al. (2005). The same training data for projections learn-ing from CilinE (Section 3.3.3) is used as seed hypernym X  X yponym pairs. Lexico-syntactic patterns are extracted from the Baidubaike corpus by using the seeds. We then develop a logistic re-gression classifier based on the patterns to recog-nize hypernym X  X yponym relations. This method relies on an accurate syntactic parser, and the qual-ity of the automatically extracted patterns is diffi-cult to guarantee.

We re-implement two previous distribution-al methods M balApinc (Kotlerman et al., 2010) and M invCL (Lenci and Benotto, 2012) in the Baidubaike corpus. Each word is represented as a feature vector in which each dimension is the PMI value of the word and its context words. We com-pute a score for each word pair and apply a thresh-old to identify whether it is a hypernym X  X yponym relation.

M F u refers to our previous web mining method (Fu et al., 2013). This method mines hy-pernyms of a given word w from multiple sources and returns a ranked list of the hypernyms. We select the hypernyms with scores over a threshold of each word in the test set for evaluation. This method assumes that frequent co-occurrence of a noun or noun phrase n in multiple sources with w indicate possibility of n being a hypernym of w . The results presented in Fu et al. (2013) show that the method works well when w is an entity, but not when w is a word with a common semantic concept. The main reason may be that there are relatively more introductory pages about entities than about common words in the Web.

M Emb is the proposed method based on word embeddings. Table 3 shows that the proposed method achieves a better recall and F-score than all of the previous methods do. It can significantly ( p &lt; 0 . 01 ) improve the F-score over the state-of-
M Emb and M CilinE can also be combined. The combination strategy is to simply merge all pos-itive results from the two methods together, and then to infer new relations based on the transitiv-ity of hypernym X  X yponym relations. The F-score is further improved from 73.74% to 76.29%. Note that, the combined method achieves a 4.43% re-call improvement over M Emb , but the precision is almost unchanged. The reason is that the infer-ence based on the relations identified automatical-ly may lead to error propagation. For example, the relation x H  X  X  X  y is incorrectly identified by M Emb . Table 5: Performance on the out-of-CilinE data in the test set. Figure 7: Precision-Recall curves on the out-of-CilinE data in the test set.
 a 7% F-score improvement over the best baseline M
W iki + CilinE . Therefore, the proposed method is complementary to the manually-built hierarchy extension method (Suchanek et al., 2008). 5.2.2 Comparison on the Out-of-CilinE Data We are greatly interested in the practical perfor-mance of the proposed method on the hypernym X  hyponym relations outside of CilinE. We say a word pair is outside of CilinE, as long as there is one word in the pair not existing in CilinE. In our test data, about 62% word pairs are outside of CilinE. Table 5 shows the performances of the best baseline method and our method on the out-of-CilinE data. The method exploiting the tax-onomy in Wikipedia, M W iki + CilinE , achieves the highest precision but has a low recall. By con-trast, our method can discover more hypernym X  hyponym relations with some loss of precision, thereby achieving a more than 29% F-score im-provement. The combination of these two meth-ods achieves a further 4.5% F-score improvement over M Emb + CilinE . Generally speaking, the pro-posed method greatly improves the recall but dam-ages the precision.

Actually, we can get different precisions and re-Figure 8: An example for error analysis. The red paths refer to the relations between the named entity and its hypernyms extracted using the web mining method (Fu et al., 2013). The black paths with hollow arrows denote the relations identified by the different methods. The boxes with dotted borders refer to the concepts which are not linked to correct positions. calls by adjusting the threshold  X  (Equation 3). Figure 7 shows that M Emb + CilinE achieves a high-er precision than M W iki + CilinE when their recalls are the same. When they achieve the same preci-sion, the recall of M Emb + CilinE is higher. 5.3 Error Analysis and Discussion We analyze error cases after experiments. Some cases are shown in Figure 8. We can see that there is only one general relation  X   X   X  ( plant ) X   X  X  X   X   X   X  ( organism ) X  existing in CilinE. Some fine-grained relations exist in Wikipedia, but the coverage is limited. Our method based on word embeddings can discover more hypernym X  hyponym relations than the previous methods can. When we combine the methods together, we get the correct hierarchy.

Figure 8 shows that our method loses the relation  X   X   X   X  ( Aconitum ) X  H  X  X  X   X   X   X   X  ( Ranunculaceae ). X  It is because they are very semantically similar (their cosine similarity is 0.9038). Their representations are so close to each other in the embedding space that we have not find projections suitable for these pairs. The error statistics show that when the cosine similari-ties of word pairs are greater than 0.8, the recall is only 9.5%. This kind of error accounted for about 10.9% among all the errors in our test set. One possible solution may be adding more data of this kind to the training set. In addition to the works mentioned in Section 2, we introduce another set of related studies in this section.

Evans (2004), Ortega-Mendoza et al. (2007), and Sang (2007) consider web data as a large cor-pus and use search engines to identify hypernyms based on the lexical patterns of Hearst (1992). However, the low quality of the sentences in the search results negatively influence the precision of hypernym extraction.

Following the method for discovering patterns automatically (Snow et al., 2005), McNamee et al. (2008) apply the same method to extract hy-pernyms of entities in order to improve the perfor-mance of a question answering system. Ritter et al. (2009) propose a method based on patterns to find hypernyms on arbitrary noun phrases. They use a support vector machine classifier to identify the correct hypernyms from the candidates that match the patterns. As our experiments show, pattern-based methods suffer from low recall because of the low coverage of patterns.
 Besides Kotlerman et al. (2010) and Lenci and Benotto (2012), other researchers also propose di-rectional distributional similarity methods (Weeds et al., 2004; Geffet and Dagan, 2005; Bhagat et al., 2007; Szpektor et al., 2007; Clarke, 2009). How-ever, their basic assumption that a hyponym can only be used in contexts where its hypernyms can be used and that a hypernym might be used in all of the contexts where its hyponyms are used may not always rational.

Snow et al. (2006) provides a global optimiza-tion scheme for extending WordNet, which is d-ifferent from the above-mentioned pairwise rela-tionships identification methods.

Word embeddings have been successfully ap-plied in many applications, such as in sentiment analysis (Socher et al., 2011b), paraphrase detec-tion (Socher et al., 2011a), chunking, and named entity recognition (Turian et al., 2010; Collobert et al., 2011). These applications mainly utilize the representing power of word embeddings to al-leviate the problem of data sparsity. Mikolov et al. (2013a) and Mikolov et al. (2013b) further ob-serve that the semantic relationship of words can be induced by performing simple algebraic oper-ations with word vectors. Their work indicates that word embeddings preserve some interesting linguistic regularities, which might provide sup-port for many applications. In this paper, we improve on their work by learning multiple lin-ear projections in the embedding space, to model hypernym X  X yponym relationships within different clusters. This paper proposes a novel method for seman-tic hierarchy construction based on word em-beddings, which are trained using a large-scale corpus. Using the word embeddings, we learn the hypernym X  X yponym relationship by estimat-ing projection matrices which map words to their hypernyms. Further improvements are made us-ing a cluster-based approach in order to model the more fine-grained relations. Then we propose a few simple criteria to identity whether a new word pair is a hypernym X  X yponym relation. Based on the pairwise hypernym X  X yponym relations, we build semantic hierarchies automatically.

In our experiments, the proposed method signif-icantly outperforms state-of-the-art methods and achieves the best F1-score of 73.74% on a manual-ly labeled test dataset. Further experiments show that our method is complementary to the previous manually-built hierarchy extension methods.
For future work, we aim to improve word embedding learning under the guidance of hypernym X  X yponym relations. By including the hypernym X  X yponym relation constraints while training word embeddings, we expect to improve the embeddings such that they become more suit-able for this task.
 This work was supported by National Natu-ral Science Foundation of China (NSFC) via grant 61133012, 61273321 and the National 863 Leading Technology Research Project via grant 2012AA011102. Special thanks to Shiqi Zhao, Zhenghua Li, Wei Song and the anonymous re-viewers for insightful comments and suggestions. We also thank Xinwei Geng and Hongbo Cai for their help in the experiments.
