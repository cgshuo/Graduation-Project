 Letter-substitution ciphers encode a document from a known language into an unknown writ-ing system or an unknown encoding of a known writing system. This problem has practical sig-nificance in a number of areas, such as in reading electronic documents that may use one of many different standards to encode text. While this is not a problem in languages like English and Chinese, which have a small set of well known standard en-codings such as ASCII, Big5 and Unicode, there are other languages such as Hindi in which there is no dominant encoding standard for the writing system. In these languages, we would like to be able to automatically retrieve and display the in-formation in electronic documents which use un-known encodings when we find them. We also want to use these documents for information re-trieval and data mining, in which case it is impor-tant to be able to read through them automatically, without resorting to a human annotator. The holy grail in this area would be an application to ar-chaeological decipherment, in which the underly-ing language X  X  identity is only hypothesized, and must be tested. The purpose of this paper, then, is to simplify the problem of reading documents in unknown encodings by presenting a new algo-rithm to be used in their decipherment. Our algo-rithm operates by running a search over the n-gram probabilities of possible solutions to the cipher, us-ing a generalization of the Viterbi algorithm that is wrapped in an A* search, which determines at each step which partial solutions to expand. It is guaranteed to converge on the language-model-optimal solution, and does not require restarts or risk falling into local optima. We specifically con-sider the problem of finding decodings of elec-tronic documents drawn from the internet, and we test our algorithm on ciphers drawn from ran-domly selected pages of Wikipedia. Our testing indicates that our algorithm will be effective in this domain.

It may seem at first that automatically decoding (as opposed to deciphering) a document is a sim-ple matter, but studies have shown that simple al-gorithms such as letter frequency counting do not always produce optimal solutions (Bauer, 2007). If the text from which a language model is trained is of a different genre than the plaintext of a cipher, the unigraph letter frequencies may differ substan-tially from those of the language model, and so frequency counting will be misleading. Because of the perceived simplicity of the problem, how-ever, little work was performed to understand its computational properties until Peleg and Rosen-feld (1979), who developed a method that repeat-edly swaps letters in a cipher to find a maximum probability solution. Since then, several different approaches to this problem have been suggested, some of which use word counts in the language to arrive at a solution (Hart, 1994), and some of which treat the problem as an expectation max-imization problem (Knight et al., 2006; Knight, 1999). These later algorithms are, however, highly dependent on their initial states, and require a number of restarts in order to find the globally op-timal solution. A further contribution was made by (Ravi and Knight, 2008), which, though published earlier, was inspired in part by the method pre-sented here, first discovered in 2007. Unlike the present method, however, Ravi and Knight (2008) treat the decipherment of letter-substitution ci-phers as an integer programming problem. Clever though this constraint-based encoding is, their pa-per does not quantify the massive running times required to decode even very short documents with this sort of approach. Such inefficiency indi-cates that integer programming may simply be the wrong tool for the job, possibly because language model probabilities computed from empirical data are not smoothly distributed enough over the space in which a cutting-plane method would attempt to compute a linear relaxation of this problem. In any case, an exact method is available with a much more efficient A* search that is linear-time in the length of the cipher (though still horribly exponen-tial in the size of the cipher and plain text alpha-bets), and has the additional advantage of being massively parallelizable. (Ravi and Knight, 2008) also seem to believe that short cipher texts are somehow inherently more difficult to solve than long cipher texts. This difference in difficulty, while real, is not inherent, but rather an artefact of the character-level n -gram language models that they (and we) use, in which preponderant evidence of differences in short character sequences is nec-essary for the model to clearly favour one letter-substitution mapping over another. Uniform char-acter models equivocate regardless of the length of the cipher, and sharp character models with many zeroes can quickly converge even on short ciphers of only a few characters. In the present method, the role of the language model can be acutely per-ceived; both the time complexity of the algorithm and the accuracy of the results depend crucially on this characteristic of the language model. In fact, we must use add-one smoothing to decipher texts of even modest lengths because even one unseen plain-text letter sequence is enough to knock out the correct solution. It is likely that the method of (Ravi and Knight, 2008) is sensitive to this as well, but their experiments were apparently fixed on a single, well-trained model.

Applications of decipherment are also explored by (Nagy et al., 1987), who uses it in the con-text of optical character recognition (OCR). The problem we consider here is cosmetically related to the  X  X 2P X  (letter-to-phoneme) mapping prob-lem of text-to-speech synthesis, which also fea-tures a prominent constraint-based approach (van den Bosch and Canisius, 2006), but the constraints in L2P are very different: two different instances of the same written letter may legitimately map to two different phonemes. This is not the case in letter-substitution maps. Substitution ciphers are ciphers that are defined by some permutation of a plaintext alphabet. Ev-ery character of a plaintext string is consistently mapped to a single character of an output string using this permutation. For example, if we took the string  X  hello world  X  to be the plaintext, then the string  X  ifmmp xpsme  X  would be a cipher that maps e to f , l to m , and so on. It is easy to extend this kind of cipher so that the plaintext alphabet is different from the ciphertext alphabet, but still stands in a one to one correspondence to it. Given a ciphertext C , we say that the set of characters used in C is the ciphertext alphabet  X  C , and that its size is n C . Similarly, the entire possi-ble plaintext alphabet is  X  P , and its size is is n P . Since n C is the number of letters actually used in the cipher, rather than the entire alphabet it is sampled from, we may find that n C &lt; n P even when the two alphabets are the same. We refer to the length of the cipher string C as c len . In the above example,  X  P is { ,a,...z } and n P = 27 , while  X  C = { ,e,f,i,m,p,s,x } , c len = 11 and n C = 8 .

Given the ciphertext C , we say that a partial solution of size k is a map  X  = { p 1 : c 1 ,...p k : c } , where c 1 ,...,c k  X   X  C and are distinct, and p ,...,p k  X   X  P and are distinct, and where k  X  n
C . If for a partial solution  X   X  , then we say that  X  0 extends  X  . If the size of  X  0 is k +1 and  X  is size k , we say that  X  0 is an immediate extension of  X  . A full solution is a partial solution of size n C . In the above example,  X  1 = { : ,d : e } would be a partial solution of size 2 , and  X  2 = { : ,d : e,g : m } would be a partial solution of size 3 that immediately extends  X  1 . A partial solution  X  T { : ,d : e,e : f,h : i,l : m,o : p,r : s,w : x } would be both a full solution and the correct one. The full solution  X  T extends  X  1 but not  X  2 .

Every possible full solution to a cipher C will produce a plaintext string with some associated language model probability, and we will consider the best possible solution to be the one that gives the highest probability. For the sake of concrete-ness, we will assume here that the language model is a character-level trigram model. This plain-text can be found by treating all of the length c len strings S as being the output of different charac-ter mappings from C . A string S that results from such a mapping is consistent with a partial solu-tion  X  iff, for every p i : c i  X   X  , the character posi-tions of C that map to p i are exactly the character positions with c i in C .

In our above example, we had C =  X  ifmmp xpsme  X  , in which case we had c len = 11 . So mappings from C to  X  hhhhh hhhhh  X  or  X  hhhhhhhhhh  X  would be consistent with a partial solution of size 0 , while  X  hhhhh hhhhn  X  would be consistent with the size 2 partial solution  X  = { : ,n : e } . In order to efficiently search for the most likely so-lution for a ciphertext C , we conduct a search of the partial solutions using their trigram probabil-ities as a heuristic, where the trigram probability of a partial solution  X  of length k is the maximum trigram probability over all strings consistent with it, meaning, in particular, that ciphertext letters not in its range can be mapped to any plaintext letter, and do not even need to be consistently mapped to the same plaintext letter in every instance. Given a partial solution  X  of length n , we can extend  X  by choosing a ciphertext letter c not in the range of  X  , and then use our generalization of the Viterbi algorithm to find, for each p not in the domain of  X  , a score to rank the choice of p for c , namely the trigram probability of the extension  X  p of  X  . If we start with an empty solution and iteratively choose the most likely remaining partial solution in this way, storing the extensions obtained in a priority heap as we go, we will eventually reach a solution of size n C . Every extension of  X  has a probabil-ity that is, at best, equal to that of  X  , and every partial solution receives, at worst, a score equal to its best extension, because the score is poten-tially based on an inconsistent mapping that does not qualify as an extension. These two observa-tions taken together mean that one minus the score assigned by our method constitutes a cost function over which this score is an admissible heuristic in the A* sense. Thus the first solution of size n C will be the best solution of size n C .

The order by which we add the letters c to par-tial solutions is the order of the distinct cipher-text letters in right-to-left order of their final oc-currence in C . Other orderings for the c , such as most frequent first, are also possible though less elegant. 1 Algorithm 1 Search Algorithm Order the letters c 1 ...c n rence in C , r n
Create a priority queue Q for partial solutions, ordered by highest probability.

Push the empty solution  X  0 = {} onto the queue. while Q is not empty do end while Return  X  X olution Infeasible X .

Our generalization of the Viterbi algorithm, de-picted in Figure 1, uses dynamic programming to score every immediate extension of a given partial solution in tandem, by finding, in a manner con-sistent with the real Viterbi algorithm, the most probable input string given a set of output sym-bols, which in this case is the cipher C . Unlike the real Viterbi algorithm, we must also observe the constraints of the input partial solution X  X  mapping. A typical decipherment involves multiple runs of this algorithm, each of which scores all of the im-mediate extensions, both tightening and lowering their scores relative to the score of the input par-tial solution. A call GVit (  X ,c,r ) manages this by filling in a table G such that for all 1  X  i  X  r , and l,k  X   X  P , G ( i,l,k ) is the maximum probability over every plaintext string S for which:  X  len ( S ) = i ,  X  S [ i ] = l ,  X  for every p in the domain of  X  , every 1  X  j  X   X  for every position 1  X  j  X  i , if C [ j ] = c , The real Viterbi algorithm lacks these final two constraints, and would only store a single cell at G ( i,l ) . There, G is called a trellis. Ours is larger, so so we will refer to G as a greenhouse .

The table is completed by filling in the columns from i = 1 to c len in order. In every column i , we will iterate over the values of l and over the values of k such that k : c and l : are consistent with  X  . Because we are using a trigram character model, the cells in the first and second columns must be primed with unigram and bigram proba-bilities. The remaining probabilities are calculated by searching through the cells from the previous two columns, using the entry at the earlier column to indicate the probability of the best string up to that point, and searching through the trigram prob-abilities over two additional letters. Backpointers are necessary to reference one of the two language model probabilities. Cells that would produce in-consistencies are left at zero, and these as well as cells that the language model assigns zero to can only produce zero entries in later columns.

In order to decrease the search space, we add the further restriction that the solutions of every three character sequence must be consistent: if the ci-phertext indicates that two adjacent letters are the same, then only the plaintext strings that map the same letter to each will be considered. The num-ber of letters that are forced to be consistent is three because consistency is enforced by remov-ing inconsistent strings from consideration during trigram model evaluation.

Because every partial solution is only obtained by extending a solution of size one less, and ex-tensions are only made in a predetermined order of cipher alphabet letters, every partial solution is only considered / extended once.

GVit is highly parallelizable. The n P  X  n P cells of every column i do not depend on each other  X  only on the cells of the previous two columns i  X  1 and i  X  2 , as well as the language model. In our im-plementation of the algorithm, we have written the underlying program in C/C++, and we have used the CUDA library developed for NVIDIA graphics cards to in order to implement the parallel sections of the code. The above algorithm is designed for application to the transliteration of electronic documents, specif-ically, the transliteration of websites, and it has been tested with this in mind. In order to gain re-alistic test data, we have operated on the assump-tion that Wikipedia is a good approximation of the type of language that will be found in most inter-net articles. We sampled a sequence of English-language articles from Wikipedia using their ran-dom page selector, and these were used to create a set of reference pages. In order to minimize the common material used in each page, only the text enclosed by the paragraph tags of the main body of the pages were used. A rough search over internet articles has shown that a length of 1000 to 11000 characters is a realistic length for many articles, al-though this can vary according to the genre of the page. Wikipedia, for example, does have entries that are one sentence in length. We have run two groups of tests for our algorithm. In the first set of tests, we chose the mean of the above lengths to be our sample size, and we created and decoded 10 ciphers of this size (i.e., different texts, same size). We made these cipher texts by appending the contents of randomly chosen Wikipedia pages until they contained at least 6000 characters, and then using the first 6000 characters of the result-ing files as the plaintexts of the cipher. The text length was rounded up to the nearest word where needed. In the second set of tests, we used a single long ciphertext, and measured the time required for the algorithm to finish a number of prefixes of it (i.e., same text, different sizes). The plaintext for this set of tests was developed in the same way as the first set, and the input ciphertext lengths con-sidered were 1000, 3500, 6000, 8500, 11000, and 13500 characters.
In all of the data considered, the frequency of spaces was far higher than that of any other char-acter, and so in any real application the character corresponding to the space can likely be guessed without difficulty. The ciphers we have consid-ered have therefore been simplified by allowing the knowledge of which character corresponds to the space. It appears that Ravi and Knight (2008) did this as well. Our algorithm will still work with-out this assumption, but would take longer. In the event that a trigram or bigram would be found in the plaintext that was not counted in the language model, add one smoothing was used.

Our character-level language model used was developed from the first 1.5 million characters of the Wall Street Journal section of the Penn Tree-bank corpus. The characters used in the lan-guage model were the upper and lower case let-ters, spaces, and full stops; other characters were skipped when counting the frequencies. Further-more, the number of sequential spaces allowed was limited to one in order to maximize context and to eliminate any long stretches of white space. As discussed in the previous paragraph, the space character is assumed to be known.

When testing our algorithm, we judged the time complexity of our algorithm by measuring the ac-tual time taken by the algorithm to complete its runs, as well as the number of partial solutions placed onto the queue ( X  X nqueued X ), the number popped off the queue ( X  X xpanded X ), and the num-ber of zero-probability partial solutions not en-queued ( X  X eros X ) during these runs. These latter numbers give us insight into the quality of trigram probabilities as a heuristic for the A* search.
We judged the quality of the decoding by mea-suring the percentage of characters in the cipher alphabet that were correctly guessed, and also the word error rate of the plaintext generated by our solution. The second metric is useful because a low probability character in the ciphertext may be guessed wrong without changing as much of the actual plaintext. Counting the actual number of word errors is meant as an estimate of how useful or readable the plaintext will be. We did not count the accuracy or word error rate for unfinished ci-phers.

We would have liked to compare our results with those of Ravi and Knight (2008), but the method presented there was simply not feasible Algorithm 2 Generalized Viterbi Algorithm GVit (  X ,c,r )
Input: partial solution  X  , ciphertext character c , Output: greenhouse G .

Initialize G to 0. i = 1 for All ( l,k ) such that  X   X  { k : c,l : C i } is consistent do end for i = 2 for All ( l,k ) such that  X   X  { k : c,l : C i } is consistent do end for i = 3 for ( l,k ) such that  X   X  X  k : c,l : C i } is consis-tent do end for for i = 4 to r do end for on texts and (case-sensitive) alphabets of this size with the computing hardware at our disposal. In our first set of tests, we measured the time con-sumption and accuracy of our algorithm over 10 ciphers taken from random texts that were 6000 characters long. The time values in these tables are given in the format of (H)H:MM:SS. For this set of tests, in the event that a test took more than 12 hours, we terminated it and listed it as unfinished. This cutoff was set in advance of the runs based upon our armchair speculation about how long one might at most be reasonably expected to wait for a web-page to be transliterated (an overnight run). The results from this run appear in Table 1. All running times reported in this section were ob-tained on a computer running Ubuntu Linux 8.04 with 4 GB of RAM and 8  X  2 . 5 GHz CPU cores. Column-level subcomputations in the greenhouse were dispatched to an NVIDIA Quadro FX 1700 GPU card that is attached through a 16-lane PCI Express adapter. The card has 512 MB of cache memory, a 460 MHz core processor and 32 shader processors operating in parallel at 920 MHz each.
In our second set of tests, we measured the time consumption and accuracy of our algorithm over several prefixes of different lengths of a single 13500-character ciphertext. The results of this run are given in Table 2.

The first thing to note in this data is that the ac-curacy of this algorithm is above 90 % for all of the test data, and 100% on all but the smallest 2 ciphers. We can also observe that even when there are errors (e.g., in the size 1000 cipher), the word error rate is very small. This is a Zipf X  X  Law effect  X  misclassified characters come from poorly at-tested character trigrams, which are in turn found only in longer, rarer words. The overall high ac-curacy is probably due to the large size of the texts relative to the uniticity distance of an En-glish letter-substitution cipher (Bauer, 2007). The results do show, however, that character trigram probabilities are an effective indicator of the most likely solution, even when the language model and test data are from very different genres (here, the Wall Street Journal and Wikipedia, respectively). These results also show that our algorithm is ef-fective as a way of decoding simple ciphers. 80% of our runs finished before the 12 hour cutoff in the first experiment.
As far as the running time of the algorithm goes, we see a substantial variance: from a few minutes to several hours for most of the longer ciphers, and that there are some that take longer than the thresh-old we gave in the experiment. Specifically, there is substantial variability in the the running times seen.

Desiring to reduce the variance of the running time, we look at the second set of tests for possible causes. In the second test set, there is a general decrease in both the running time and the number of solutions expanded as the length of the ciphers increases. Running time correlates very well with A* queue size.

Asymptotically, the time required for each sweep of the Viterbi algorithm increases, but this is more than offset by the decrease in the number of required sweeps.

The results, however, do not show that running time monotonically decreases with length. In par-ticular, the length 8500 cipher generates more so-lutions than the length 3500 or 6000 ones. Recall that the ciphers in this section are all prefixes of the same string. Because the algorithm fixes char-acters starting from the end of the cipher, these prefixes have very different character orderings, c ,...,c n tial solutions. The running time of our algorithm depends very crucially on these initial conditions.
Perhaps most interestingly, we note that the number of enqueued partial solutions is in ev-ery case identical or nearly identical to the num-ber of partial solutions expanded. From a the-oretical perspective, we must also remember the zero-probability solutions, which should in a sense count when judging the effectiveness of our A* heuristic. Naturally, these are ignored by our im-plementation because they are so badly scored that they could never be considered. Neverthe-less, what these numbers show is that scores based on character-level trigrams, while theoretically ad-missible, are really not all that clever when it comes to navigating through the search space of all possible letter substitution ciphers, apart from their very keen ability at assigning zeros to a large number of partial solutions. A more com-plex heuristic that can additionally rank non-zero probability solutions with more prescience would likely make a very great difference to the running time of this method. In the above paper, we have presented an algo-rithm for solving letter-substitution ciphers, with an eye towards discovering unknown encoding standards in electronic documents on the fly. In a test of our algorithm over ciphers drawn from Wikipedia, we found its accuracy to be 100% on the ciphers that it solved within a threshold of 12 hours, this being 80% of the total attempted. We found that the running time of our algorithm is highly variable depending on the order of char-acters attempted, and, due to the linear-time the-oretical complexity of this method, that running times tend to decrease with larger ciphertexts due to our character-level language model X  X  facility at eliminating highly improbable solutions. There is, however, a great deal of room for improvement in the trigram model X  X  ability to rank partial solutions that are not eliminated outright.

Perhaps the most valuable insight gleaned from this study has been on the role of the language model. This algorithm X  X  asymptotic runtime com-plexity is actually a function of entropic aspects of the character-level language model that it uses  X  more uniform models provide less prominent sep-arations between candidate partial solutions, and this leads to badly ordered queues, in which ex-tended partial solutions can never compete with partial solutions that have smaller domains, lead-ing to a blind search. We believe that there is a great deal of promise in characterizing natural lan-guage processing algorithms in this way, due to the prevalence of Bayesian methods that use language models as priors.

Our approach makes no explicit attempt to ac-count for noisy ciphers, in which characters are erroneously mapped, nor any attempt to account for more general substitution ciphers in which a single plaintext (resp. ciphertext) letter can map to multiple ciphertext (resp. plaintext) letters, nor for ciphers in which ciphertext units corresponds to larger units of plaintext such syllables or words. Extensions in these directions are all very worth-while to explore.

