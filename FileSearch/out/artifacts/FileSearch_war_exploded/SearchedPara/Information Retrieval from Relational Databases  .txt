 Relational databases are widely used today as a mechanism for providing access to structured data. They, however, are not suitable for typical information finding tasks of end users. There is often a semantic gap between the queries users want to express and the queries that can be answered by the database. In this paper, we propose a system that bridges this semantic gap using domain knowledge contained in ontologies. Our system extends relational databases with the ability to answer semantic queries that are represented in SPARQL, an emerging Semantic Web query language. Users express their queries in SPARQL, based on a semantic model of the data, and they get back semantically relevant results. We define different categories of results that are semantically relevant to the users X  query and show how our system retrieves these results. We evaluate the performance of our system on sample relational databases, using a combination of standard and custom ontologies. H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval  X  retrieval models, search process, query formulation. Semantic Queries, Ontologies, Semantic Relevance, Information Retrieval, Relational Databases, Knowledge Management Relational databases are widely used today as a mechanism for providing access to structured data. However, there are a number of limitations of such databases that make them unsuitable for typical information finding tasks of end-users. There is often a mismatch between the user X  X  intended query and the database X  X  schema. For example, assume there is a database containing information about disaster aid workers located in different parts of the United States. A user may have a query about which aid workers are located in the Gulf Coast region of the United States; however the database tables may only have information about which towns and states aid workers are located in. Thus, although the database may contain the desired information, the user cannot get an answer to his query since the database does not know which towns and states are located in the Gulf Coast. Thus, the user is forced to re-frame his query based on the actual schema and contents of the database. The Semantic Web envisions a world where loosely coupled, independently evolving ontologies provide a common understanding of terms between heterogeneous agents, systems, and organizations. In the past few years, different ontologies have been developed in various domains to capture relevant knowledge. In this paper, we present a system that uses both the data in a relational database and domain knowledge in ontologies to return semantically relevant results to a user X  X  query. Users specify their queries using SPARQL [1], a popular Semantic Web language for querying RDF graphs. Our system takes as input a SPARQL query and uses a Description Logic (DL) reasoner to help infer semantically relevant results  X  this allows returning more results than what is explicitly mentioned in the databases. Our system returns three kinds of semantically relevant results: direct results, inferred results and related results. Depending on the specific relational database and the applications it is used in, different sets of ontologies may be used by our system to help answer semantic queries. In order to support the creation of new ontologies and the reuse of existing ontologies, our system provides an ontology engineering framework. The framework is used by application developers to pull together an appropriate set of ontologies that can provide the required semantic information about terms used in the database. They may reuse existing domain ontologies or define new ones to capture application-specific semantic information. The framework also helps them specify mappers that can convert data from the relational model defined in the database to the semantic model defined in the ontologies. We use the term  X  X emantic query X  to refer to database queries that are based on concepts, properties and instances defined in an ontology and that return semantically relevant results. Such queries are based on the semantic model of the data expressed in the ontologies rather than the E-R model of the data present in a relational database. The result of a semantic query is semantically relevant results. In order to return semantically relevant results, we first have to define which results qualify as semantically relevant. We define 3 types of semantically relevant results based on how these results are obtained and their relationship to the semantic query: Direct results are obtained directly from the database tables; i.e. they consist of only results that are explicitly listed in the database tables. For instance, let us again consider the database containing information about disaster aid workers located in different parts of the United States. The direct results of a semantic query for aid workers in New Orleans contain only those aid worke rs who are explicitly listed as being located in New Orleans i n the database. Most standard database management systems and query languages support the return of direct results. Inferred results are those that can be inferred usi ng the information that is explicitly listed in the databa se and the domain knowledge in the ontologies. The inference is done using Description Logic reasoning. For example, the infer red results of a semantic query for aid workers in the Gulf Coast contains all aid workers in Louisiana, Mississippi, Alabama and othe r states that form part of the Gulf Coast. Thus, although, the da tabase itself had no information about  X  X ulf Coast X , the semantic query can return relevant results. In this case, the inferenc e is made possible with the help of location ontologies that describe which regions a state is located in. Related results are obtained using data in the data base tables and a definition of similarity of concepts and individual s based on the data model in the ontologies. It includes results t hat do not strictly match the user X  X  query, but may still be similar to the actual answers and hence, may also be semantically relevan t. For example, the related results of a query for aid wor kers in New Orleans may also return results from other towns in the state of Louisiana close to New Orleans. Such an expanded re sult set is especially useful if there were no or very few aid workers in New Orleans itself. Our system uses various strategies to generate more general queries that can produce results that are similar t o those produced by the original query. These strategies make use of different kinds of information in the ontologies, including the con cept hierarchy, transitive properties defined between different ins tances and membership of instances in a concept. The query gen eralization algorithm works by repeatedly applying these strate gies to generate more and more general queries until a cert ain pre-specified number of results are obtained. We have developed a system that allows posing seman tic queries in SPARQL on a relational database. The reasoning i s done using Minerva[2], which is a scalable, efficient RDBMS-ba sed DL reasoner. A key feature of Minerva is that it preco mputes all inferences and stores the basic asserted facts as w ell as the inferred facts in a backend relational database. He nce, queries to Minerva are fast since no description-logic reasoni ng is done at query time. In DLs, there are two kinds of facts: " TBox" (which has sentences describing concepts) and "ABox" (whic h has sentences describing instances). Minerva allows eff icient assertion and retraction of ABox facts; however, it cannot ef ficiently handle changes to the TBox. Any such change requires a rec omputation of all inferences and can take a few minutes for la rge ontologies. Fig 1 shows the overall architecture of our system. It contains two Minerva reasoning systems (a primary and a standby) along with the databases they use for storing the asserted and inferred facts. It also contains the original relational database stor ing the data of interest. There are ontologies that describe the se mantic model of the data as well as provide additional domain knowl edge. At the beginning, all the relevant ontologies are l oaded into the primary Minerva system. Next, all the entries in th e original relational database tables are asserted into the pr imary Minerva system through the Mapper, which translates the row s in the database into DL assertions that can be processed b y Minerva. The system also ensures that the Minerva system is kept up-to-date with the relational database. It creates trigg ers on the original database, so that any changes in the tables result in a notification to the Mapper, which then updates the Minerva syste m. The Query Processor takes in queries in SPARQL and poses them to the Minerva system to get direct and inferred re sults. It also does query generalization and obtains a certain pre -specified number of related results. In order to prevent the system from being unrespons ive to queries when the TBox changes, we make use of a standby Min erva system for performing the recomputation of inferenc es. The standby system is initialized with the facts in the ontologies and the database. Once the standby Minerva system is in itialized, the two Minerva systems are switched. The standby syste m now becomes the primary one and answers all semantic qu eries. We tested the performance of the system and found t hat the time for initializing the system and for answering seman tic queries grows linearly with the size of the relational data base. The tests were performed using a sample disaster relief ontol ogy containing about 400 concepts, 120 properties and 500 individu als. The results give a good indication of the scalability o f the system. We are investigating ways of reducing the time for ans wering queries by using better indices in the Minerva database, as well as using other strategies for obtaining related results. [1] Prudhommeaux, E., and Seaborne, A. SPARQL query [2] Ma, L.et al. 2006. IBM Integrated Ontology Developm ent 
