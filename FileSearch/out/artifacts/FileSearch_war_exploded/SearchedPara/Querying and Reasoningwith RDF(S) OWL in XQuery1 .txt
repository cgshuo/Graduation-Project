 The Semantic Web framework [9,14] proposes that Web data represented by HMTL and XML have to be enriched by means of meta-data , in which modeling is mainly achieved by means of the Resource Description Framework (RDF) [19] and the Web Ontology Language (OWL) [20]. OWL is based on the so-called Description Logic (DL) [6], which is a family of logics (i.e. fragments )with different expressive power. On the other hand, XQuery [11] is a typed functional language devoted to express queries against XML documents. It contains XPath 2.0 [8] as a sublanguage. XPath 2.0 supports navigation, selection and extraction of fragments from XML documents. XQuery also includes flowr expressions (i.e. for-let-orderby-where-return expressions) to construct new XML values and to join multiple documents.

In this paper we investigate how to use the XQuery language for querying and reasoning with RDF(S)/OWL-style ontologies. The main features of our proposal can be summarized as follows:  X  XQuery has been developed for querying XML documents, however, Web  X  RDF(S) and OWL querying should be combined with reasoning. RDF(S)  X  Finally, we will propose an implementation of the approach. Firstly, RDF(S)-A great effort has been made for defining query languages for RDF(S)/OWL documents (see [7] for a survey about this topic). The proposals mainly fall on extensions of SQL -style syntax for handling the triple-based RDF structure . In this line the most representative language is SPARQL [21]. Some authors [10,15,1] have already investigated how to combine XML and RDF(S)/OWL querying. RDF(S)/OWL can be combined with XML query languages, for in-stance, by encoding RDF(S)/OWL into XML data and by encoding SPARQL in XQuery. Alternatively, in [13], SPARQL and XQuery are combined in order to provide an unified framework for RDF and XML. We have considered in our ap-proach a different point of view. XQuery can be equipped with a library for the handling of RDF(S)/OWL. And also, the ontologies can be encoded by means of XQuery functions. The advantage of our approach is that XQuery functions are able to reason about the ontology, that is, they are able to infer new information from the TBox and ABox .

OWL/DL reasoning is a topic of researc h of increasing interest in the litera-ture. Most of DL reasoners (for instance, Racer [16], FaCT++ [23], Pellet [22]) are based on tableaux based decision procedures. We can distinguish two main reasoning mechanism in this context. Th e first mechanism focuses on checking consistence of the ontology. Consistence means that the ontology has a model. The second mechanism focuses on retrieving logic consequences from the on-tology. Such logic consequence includes the transitive closure of the subclass and subproperty relationships, the membership of individuals to classes, and the relations between individuals, which are n ot explicitely declared in the ontology.
In our proposal, we have studied a fragment of Description Logic/OWL which can be easily encoded in XQuery. Such an encoding takes Description Logic formulas and encodes them by means of XQuery functions. XQuery is based on the use of flowr expressions for querying XML documents. In our case, we use flowr expressions to query OWL documents, and it allows to encode OWL ontologies by means of XQuery. Such an encoding allows to reason about the elements of the ABox of the ontology: we can infer the membership of individual to classes and the roles that two individuals play . In addition, we are interested in the use of XQuery for querying the meta-data of the TBox .Inthiscase,the XQuery library can be used for retrieving the elements of the TBox .
OWL is a language with different fragmen ts restricted in expressive power (i.e. they consider different subsets of the OWL vocabulary and define restric-(tractability, scalability, complexity, etc) and decidability. Recently, three frag-ments of the new OWL 2 have been proposed: OWL EL, OWL RL and OWL QL [20]. In particular, OWL QL is a fragment OWL 2 allowing efficient query-ing. With respect to the fragment of DL considered in our proposal, we have taken a fragment which is expressive enough that includes the basic elements of OWL. It is a subset of the ALC fragment with some restrictions incorporating some relations between properties. One key point of our fragment is that the TBox has to be acyclic. This condition is required in order to be supported by XQuery. However, we will discuss in the paper the adaptation of our proposal to the recently proposed OWL QL.
 We would like to remark that our work continues previous work about XQuery. In [2], we have studied how to define an extension of XQuery for querying RDF(S)/OWL documents. Similarly to the current proposal, such an exten-sion allows to query XML and RDF(S)/OW L resources with XQuery, however, the proposed extension of the quoted papers is based on the implementation of XQuery in a logic language like Prolog (see [5,4,3] for more details). Finally, we have tested and implemented the proposal of this paper. The XQuery library for handling RDF(S)/OWL together with an example of on-tology encoded in XQuery can be downloaded from http://indalog.ual.es/ XQuerySemanticWeb .

The structure of the paper is as follows. Section 2 will present the kind of ontologies we consider in our framewo rk. Section 3 will describe the XQuery library for RDF(S)/OWL. Section 4 will show the encoding of ontologies in XQuery. Section 5 will give some examples of ontology querying and finally, Section 6 will conclude and present future work. In this section we will define the fragment of OWL of our framework. Definition 1. An ontology O in our framework contains a TBox including a sequence of definitions of the form: where C is a class (i.e. concept) description of left-hand side type (denoted by C  X  X  ), of the form: C ::= C is a class (i.e. concept) description of right-hand side type (denoted by D  X  X  ), of the form: D ::= C 0 | D 1 D 2 | X  P.D . In all previous cases, C 0 is an atomic class(i.e.classname)and P , Q are property (i.e. role) names .Formulasof equivalence E  X  F are syntactic sugar for E F and F E . In addition, the ABox contains a sequence of definitions of the form: P ( a, b ) | C 0 ( a ) where P is apropertyname, C 0 is a class name, and a, b are individual names .Werequire that the TBox does not include concepts and roles that depend themself, that is, the TBox is acyclic.
 Our fragment of OWL is equipped with the basic elements of OWL: equivalence and inclusion of classes, and equivalence and inclusion of properties. In addition, it allows the specification of inverse and symmetric properties, and the domain and range of properties. We have restricted our approach to object properties , it forces to consider properties on datatypes as object properties. Let us remark that in right hand-sides of inclusion relations is not allowed to specify either  X 
C or D 1 D 2 or  X  P.C . The reason for that is the encoding in XQuery of the ontology. Basically, the encoding allows to query the ontology and to use inclusion and equivalence for reasoning. Finally, we require that the TBox is acyclic. The fragment is basically ALC with restrictions in right hand-sides of class axioms, adding some property relations. Let us see now an example of a such a DL ontology (see Figure 1).

The ontology of Figure 1 describes, in the TBox , meta-data in which the elements of Man and the elements of Woman are elements of Person (axiom (1) and (2)); and the elements of Paper and Book are elements of Manuscript (axiom (4)). In addition, a Writer is a Person who is the author of a Manuscript (axiom (3)), and the class Reviewed contains the elements of Manuscript revie-wed by a Person (axiom (5)). Moreover, the Unrated class contains the elements of Manuscript which have not been rated (axiom (6)). The classes Score and Topic contain, respectively, the values of the properties rating and of topic as-sociated to Manuscript (axioms (7) and (8)). The property average rating is a subproperty of rating (axiom (10)). The property writes is equivalent to author of (axiom (9)), and authored by is the inverse property of author of (axiom (11)). Finally, the property author of , and conversely, reviewed by , has as domain a Per-son and as range a Manuscript (axioms (12)-(15)). Axiom (16) defines friend of as a symmetric relation. The ABox describes data about two elements of Book :  X  X ata on the Web X  and  X  X ML in Scottland X  and a Paper : X  X rowingXQuery X . It describes the author of and authored by relationships for the elements of Book and the writes relation for the elements of Paper . In addition, the elements of Book and Paper have been reviewed and rated, and they are described by means of a topic. Now, we will describe the Semantic Web library defined in XQuery. In summary, we have to handle the triples of the TBox and ABox of the given ontology. For simplicity we will assume that the elements of the ABox and the TBox has been declared in separated RDF items, one for each formula . Firstly, in order to handle the ABox , we have defined the following XQuery function: which returns the sequence (i.e. by means of the XQuery  X  node()*  X  X ype) of triples of the ABox included in the document $doc . In order to access to the components of each triple of the ABox we have defined XQuery functions sw:subject , sw:object and sw:property . For instance,
Now, the TBox can be also handled by means of the library. For instance, we can obtain the classes in the TBox which are equivalent to a given class as follows:
Let us remark that a class E can be equivalent by means E  X  F , E  X  D 1 D 2 and E  X  X  X  P.D . The library handles the equivalence formula E  X  F as not ori-ented, and then returns E as equivalent to F ,and F as equivalent to E .The previous function sw:toClass represents a class na me in OWL format. The previous sw:eq is a boolean function to check equality between RDF identifiers. Similarly, we can get the subclasses o r superclasses of a given class in the TBox , by means of the functions sw:subClassOf and sw:superClassOf , respectively. In the library, there are also XQuery functions for querying about properties. For instance, the following function returns the domain of a property: There are also functions sw:inverseOf , sw:equivalentProperty , sw:sub-PropertyOf , sw:superPropertyOf and sw:range , and a function sw:Symme-tricProperty to retrieve the symmetric properties. Finally, we can query the elements of the ontology like classes, properties and individuals. For instance, the following function returns the classes of the TBox :
In the library, there are also functions sw:Properties , sw:Individuals , sw:Unions , sw:Intersections , sw:ClassesofIntersections , sw:Classesof-Unions , sw:Restrictions (i.e. formulas built from  X  and  X  ). Also, there are also functions sw:oftype , sw:type , sw:ofrole and sw:role , retrieving the individ-uals of a certain type, the types of an individual, and the same for roles. Finally, given a property filler we can query the related individuals by means of two functions: sw:About and sw:Resource .

Now, using the Semantic Web library we can write queries for retrieving the elements of the ontology, expressing the result in XML format. For instance, we can get the atomic super classes of a each class: obtaining w.r.t. the running example the XML document:
In summary, the proposed Semantic library of XQuery allows to query the elements of the TBox and the ABox . However, for reasoning with the TBox and the ABox ,wehavetoencodethe TBox by means of XQuery functions. Now, we present an example of encoding of an ontology by means of XQuery. The encoding allows to obtain the logic consequences from the TBox about the elements ABox . For instance, the class Writer of the running example can be defined in XQuery as follows:
The previous encoding defines the class Writer as the union of: the elements of the ABox of type Writer ,andthe X  Person  X  X  which are author of a Manuscript  X , following the TBox formula Person  X  author of.M anuscript Writer .The elements of the ABox of type Writer are retrieved by means of a call to the function sw:oftype of the Semantic library. The elements of the class Per-son are computed by means of the call to the function ex:person ,whichis defined similarly to ex:writer .Thesamecanbesaidfor ex:author of and ex:Manuscript . The intersection is encoded by means of the some-satisfies construction of XQuery, and the same can be said for the existential quantifier. By calling ex:writer(doc( X  X xample.owl X )) , we would obtain:
Basically, the idea of the encoding is as follows. Each class C and property P of the ontology defines a function called C and P , respectively. In the running example we would have the functions: ex:person , ex:man ,etc.inthecaseof classes, and ex:author of , ex:authored by , etc. in the case of properties. Now, the functions for classes are defined as the union of the elements of the ABox of the given class, and the elements of subclasses of the given class in the TBox . In the case of properties, the functions are defined as the union of: the elements of the ABox full-filling the property, and the elements of subproperties of the given property in the TBox . In the running example, author of property is en-coded as follows: Now, by calling ex:author of(doc( X  X xample.owl X )) , we would obtain:
Let us remark that in both examples, the encoding has used the ontology for reasoning about class assertions and property fillers. In the first case Abite-boul , Suciu , Buneman and Simeon are members of the class Writer because they are obtained from the ABox ,andfromthe TBox by means of the rea-soning with the formulas author of  X  writes and authored by  X   X  author of (i.e. sw:author of returns also elements related by means of authored by and writes relationships). The elements of the classes Paper and Book are elements of Manuscript by Paper Book Manuscript . Now, we will show some examples of querying and reasoning w.r.t. the run-ning example. Such examples have been tested and can be downloaded from http://indalog.ual.es/XQuerySemanticWeb .

The first example retrieves the  X  X uthors of a Manuscript X  . Let us remark that the relation  X  X uthor of  X  is equivalent a  X  X rites X  and the inverse of  X  X uthored by X  . In addition, the class  X  X anuscript X  includes the elements of the classes  X  X aper and  X  X ook X  . The query can be expressed in our proposal as follows: obtaining the answer in XML format as follows:
The second example retrieves the  X  X uthors of reviewed manuscripts X  in which the class Reviewed includes the manuscripts for which a  X  X eviewed by X  relation exists. The query can be expresse d in our framework as follows: obtaining as answer: Let us remark that  X  X ML in Scottland X  is not a reviewed manuscript. In this paper we have investigated how to use the XQuery language for querying and reasoning with RDF(S)/OWL-style ontologies. As future work we would like to study how to adapt our proposal to other ontology languages, in particular, how to extend to the recently proposed O WL QL, the W3C proposal for querying OWL ontologies. We have to solve some troubles to cover with OWL QL. Firstly, OWL QL is based on a different fragment o f OWL. It is, for instance, restricted to existential quantification of properties, but on the other side it assumes cyclic ontologies. Moreover, it is focused on conjunctive queries. In order to handle conjunctive queries in OWL QL a rewriting query algorithm has been proposed in [12]. In summary, the adaptation of OWL QL to our framework is not a trivial task. Firstly, we have to implement a fix point operator in XQuery in order to cover with cyclic ontologies. In addition, OWL QL assumes the use of conjunctive queries and query rewriti ng. In this case, we need a formalism for expressing conjunctive queries in XQuery and a mechanism for rewriting. We are investigating how to use SWRL [17] and RIF [18] for expression conjunctive queries and the XQuery its elf for query rewriting.

