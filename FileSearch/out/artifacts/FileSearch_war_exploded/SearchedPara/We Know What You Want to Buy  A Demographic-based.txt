 Product recommender systems are often deployed by e-commerce websites to improve user experience and increase sales. How-ever, recommendation is limited by the product informa-tion hosted in those e-commerce sites and is only triggered when users are performing e-commerce activities. In this paper, we develop a novel product recommender system called METIS, a MErchanT Intelligence recommender Sys-tem, which detects users X  purchase intents from their mi-croblogs in near real-time and makes product recommen-dation based on matching the users X  demographic informa-tion extracted from their public profiles with product demo-graphics learned from microblogs and online reviews. METIS distinguishes itself from traditional product recommender systems in the following aspects: 1) METIS was develope-d based on a microblogging service platform. As such, it is not limited by the information available in any specific e-commerce website. In addition, METIS is able to track users X  purchase intents in near real-time and make recom-mendations accordingly. 2) In METIS, product recommen-dation is framed as a learning to rank problem. Users X  char-acteristics extracted from their public profiles in microblogs and products X  demographics learned from both online prod-uct reviews and microblogs are fed into learning to rank al-gorithms for product recommendation. We have evaluated our system in a large dataset crawled from Sina Weibo. The experimental results have verified the feasibility and effec-tiveness of our system. We have also made a demo version of our system publicly available and have implemented a live system which allows registered users to receive recommen-dations in real time.
 I.2.7 [ Artificial Intelligence ]: Natural Language Process-ing X  Text analysis ; H.3.1 [ Information Storage and Re-trieval ]: text mining E-commerce; product recommender; product demographic; microblog
Recent years have witnessed a great success of e-commerce websites such as Amazon and eBay as they transcend geo-physical barriers and allow individuals or business to for-m transactions anywhere and anytime. A technique widely adopted by e-commerce companies is to exploit product rec-ommender systems to improve user experience and increase sales. Research has found that product recommendation largely influences consumers X  purchase decisions and is like-ly to boost sales [23, 26, 14].

Generally speaking, there are two major challenges in the design of product recommender systems. Firstly, it is dif-ficult to find out users X  demographic information, which is essential for making right recommendations to right person-s. Existing recommender systems relying on collaborative filtering explore techniques for matching users with similar interests and make recommendations on this basis. Never-theless, it is well-known that collaborative filtering suffer-s from the  X  X old-start X  problem when a recommender sys-tem knows little about a new user. Secondly, existing rec-ommender systems embedded in e-commerce websites can only make recommendations when users are performing e-commerce activities in those websites, which cannot capture users X  instantaneous purchase intents outside those websites.
Although there has been much research work on online product recommendation [24, 10, 14], most studies only fo-cus on constructing solutions for certain e-commerce web-sites and are thus constrained by the information available there. In our work here, rather than relying on limited infor-mation available in any specific e-commerce website, we aim to develop a generic online product recommender system by exploring vast amount of information available externally such as that on social media platforms.

Online social media has already become the new arena of our lives and involved different aspects of our social presence from day to day. Through online activities such as chatting with friends and posting short status updates, online social networks (OSNs) have become important platforms where users discuss their needs and desires [11], and even disclose their personal information [3]. Thus, in this paper, we pro-pose to capture users X  purchase intents from OSNs and de-velop a generic product recommender system not limited to any specific e-commerce website. In particular, we develop our recommender system based on a microblogging service p latform due to the following reasons: 1) Microblogs con-tain abundant data from which users X  purchase intents can be easily discovered; 2) Microblogs are continuously updat-ed which implies that users X  purchase intents are also up-dated in real time. This is especially attractive for develop-ing an effective product recommender system; 3) Microblogs contain public profiles of users, including age, sex and/or professions, from which we can extract users X  demographic characteristics.

In this paper, we present the development of a novel prod-uct recommender system called METIS , a MErchanT Intel-ligence recommender System. The main characteristics of METIS that distinguishes itself from traditional product rec-ommender systems are as follows: 1) METIS was developed based on a microblogging service platform which naturally addresses the aforementioned two challenges. First, users X  public profiles on microblogs can be used to extract their de-mographic characteristics. Second, users X  purchase intents can be instantaneously discovered from their tweets and the constantly updated purchase intents allow the development of a more effective recommender system not constrained by the limited information available in any specific e-commerce website. 2) The core to the METIS system is a novel de-mographic based recommendation algorithm which learns product demographics by leveraging knowledge from online social media. Product demographic, sometimes called the target audience, of a product or service is a collection of the characteristics of the people who buy that product. The features derived from both product demographics and the extracted users X  characteristics can be fed into any learning to rank algorithm for real-time product recommendation. 3) We also propose an effective method for semi-automatic ac-quisition of training data for the learning to rank algorithms. This makes our system more practical since it does not rely on actual transaction records from any e-commerce website.
Our system, METIS, aims to link users X  purchase intents with the real-world products in an online fashion. In spe-cific, when a user published a tweet describing her purchase intent, METIS will first identify her purchase intent, then extract her demographic characteristics, and finally return a list of recommended products based on some similarity mea-surement between user X  X  demographic and products X  demo-graphic information. The architecture of METIS is shown in Figure 1 which consists of three major components:
For the development of our system, we choose a microblog-ging platform, Sina Weibo 1 , which is the largest Chinese mi-croblogging site. We have crawled all the information for a set of 5 million active users on Weibo via an authenticat-ed API, including their tweets, following relationships and public profiles. We have retrieved a total of 1.7 billion tweet-s from these 5 million active users within a half-year time span from January 2013 to June 2013. We also choose a e-commerce website, Jingdong 2 , the largest B2C e-commerce website, for the selection of products for making recommen-dations. It is worth mentioning that our system can be easily extended to cover multiple e-commerce websites. For our experiments, we choose three popular product types in Jingdong: laptop, camera and phone. In total, these three product categories contain 3,155 products and 1.13 million user reviews. To deal with such big data, we build our back-end system based on distributed indexing which allows the retrieval of information of users or products in a quick way. We present some preliminary concepts before delving into the details of our system. Purc hase-intent tweet. By following the definition in [11], a tweet is defined as a purchase-intent tweet if it explic-itly expresses a desire or interest of buying some product. Here we only consider explicit expressions of buying desires and ignore implicit purchase intents since the latter is more difficult to detect. Note that we do not assume that the author of a tweet is the one who wants to buy a potential product. In an example tweet below: Th e potential customer of Samsung phone is My son , not the author of the tweet.
 Product demographics. The product demographics 3 , sometimes called the target audience, of a product or ser-vice is a collection of the characteristics of the people who buy that product or service. A demographic profile (often shortened as  X  X  demographic X ) provides enough information about the typical member of this product to create a mental picture of this hypothetical aggregate. For example, a prod-uct demographic might refer to the single, female, middle-class, age 18 to 24, college educated.

Knowing information such as the income status, age and tastes of users can help companies sell more, branch out to other groups and create more products that appeal to tar-get buyers. Instead of identifying these useful demographic attributes manually, we start with the attributes in users X  public profile on Weibo. With reference to the marketing studies [20, 28], we have identified six major demograph-ic attributes: gender, age, marital status, education, career and interests. To quantitatively measure these attributes, we have further discretized them into different bins. We summarize the details of the demographic attributes in Ta-ble 1.

We use probabilities to characterize the demographics of a product. Formally, let A denote the set of attributes and V a denote the set of values for an attribute a . For a product e , its demographic distribution of an attribute a is target consumers with the value v for attribute a . Since ( e;a ) is a distribution, we have more, we use the set of attribute distributions to represent the product demographics, i.e. f ( e;a ) g a  X  X  . Us er profile. User profile , which is also called user de-mographics , is similar to product demographics . Formally, given a user u and the considered attribute set A , we use D u = f v ( u ) a g a  X  X  to denote the user X  X  profile, where v the value of attribute a . On Sina Weibo, a user is required to fill in some attributes in her public profile during regis-tration, which can be modified later.
The task of purchase intent detection on microblogs was first studied in [11] where a classification model is learned to classify a tweet automatically into one of the two categories (containing or not containing purchase intents). While on-ly textual features were used in [11] for classifier training, we additionally explore users X  demographic information in learning classifiers for purchase intent detection. Further-more, only a small set of 1,335 tweets were tested in [11]. Instead, we have explored several ways to improve the effi-ciency of purchase intent detection in order to achieve the near real-time performance when dealing with large amount of social stream data.
Tweets are produced at a dramatic rate. There are on average 100 million tweets generated within a day on Sina Weibo. It is not feasible to directly apply purchase intent classification on such a huge amount of data. Thus, a key-word filtering method is first used to only keep tweets that are likely to contain purchase intents. An annotator major in commerce service is invited to compile a list of purchase indicator keywords which is shown in Table 2. We process the data stream in an online mode by distributing the data into multiple servers. We use a fast string search algorithm to keep tweets that contain at least one purchase indicator keyword in our list for subsequent processing.
 Table 2: List of purchase indicator keywords and their English translations.
We train an intent classifier based on the following fea-tures: Textual features. Hollerit et al. [11] used highly discrim-inative n -gram features which consist of consecutive words (e.g.  X  X uy cheap X  ) or Part-of-Speech (POS) tags (e.g.  X  X B JJ X ) ranked by the chi-squared statistic for training intent classifiers. Intuitively, a word together with its POS tag in a tweet can represent more complete semantics than a single word or POS tag. Thus, we consider a word together with its POS tag as a feature unit. For example, for a phrase X  X uy VB cheap JJ X , instead of generating two separate features  X  X uy cheap X  and  X  X B JJ X , we only generate a single feature  X  X uy-VB cheap-JJ X  and call it lexical-POS feature. Demographic features. The second type of features we consider is users X  demographic information which is incor-porated as additional context to supplement the textual ev-idence. For example, given two tweets respectively from a female and a boy, both tweets have mentioned  X  X ransformer model X . Intuitively, the boy X  X  tweet is more likely to contain a purchase intent. As such, we also extract users X  demo-graphic features containing the six attributes presented in Table 1 for intent classifier training.
It is relatively easy to obtain users X  demographic informa-tion from their public profiles in Sina Weibo. In this section, w e focus on extracting product demographic information, also called target audience or target consumer , from social media. Previously, product demographics are derived from either user surveys [1] or commercial purchase records [10]. As have been discussed earlier, we focused on the six demo-graphic attributes shown in Table 1. We propose to leverage demographic related knowledge from online product reviews and the followings/mentions information on microblogs. The first resource we consider is online product reviews . We have found that users might explicitly mention demo-graphic related information in their reviews in addition to their opinions. For example, in a sentence  X  X  bought my son this phone X  from a product review, the phrase  X  X uy my son X  indicates that the current product is suitable for the author X  X  son, who is a potential target consumer. In this example, we can see that  X  buy somebody something  X  is an importan-t pattern for deriving the demographic knowledge which is embedded in a phrase my son which we call a demographic phrase . We want to collect statistics of such demographic re-lated phrases in order to reliably derive patterns expressing demographic information.

We first propose to use a bootstrap algorithm to itera-tively extract frequent patterns and demographic phrases. Then we further study how to convert these patterns in-to demographic statistics. The bootstrapping algorithm for the extraction of demographic phrases is presented in Algo-rithm 1, in which we iteratively extract new patterns and identify demographic phrases with the extracted patterns. The function ExtractDemographicPhrase ( p , s ) aims to iden-tify the demographic phases in a review sentence s by using the pattern p . Here we only consider extracting nouns, noun phrases, adjectives, and numbers. Note that this algorithm is very flexible to deal with data in an online mode by set-ting the set of identified patterns P as the seed set for new data.

Given a product e , we obtain a set of its related demo-graphic phrases R e which have at least 10 occurrences in our data. We then map these phrases into six demographic di-mensions as has been previously described in Table 1 using a list of pre-defined rules. For example, given a phrase X  X y lit-tle son X , we can map it into two dimensions  X  X ale X (sex) and  X 12 17 X (age) X . We maintain a counter #( a; v ) which counts the number of times phrases being mapped to value v of the attribute a . Finally, we use Laplace smoothing (a.k.a add-one smoothing) to estimate the demographic distribution of a product e for an attribute a as follows where V a is the set of all possible values of attribute a . a valid probability since tribute of a product, we can model the aggregated statistics as a distribution over a set of all possible attribute values, and a higher probability value indicates a more prominent characteristic of the product for that attribute.
The second type of resources we consider is the informa-tion collected from microblogs . The rationale behind is that given a product, we could capture the  X  X ike X  evidence, i.e. positive opinions, of users on the product. Such users can
A lgorithm 1: Bootstrapping algorithm for extracting demographic phrases from online reviews. b e treated as potential target audience for that particular product. As a result, the profiles of these users can be ag-gregated as the product demographics. We detect users X  endorsements on a certain product in microblogs by consid-ering the following two most common user behaviors:
Given a product e , let U e denote the set of its target users who are selected from either the following or the mention-ing categories mentioned above. It is worth noting that in both following and mentioning categories, users may not be directly related to a specific product (e.g.,  X  X Phone 5S X ), instead they may be related to a brand (e.g.,  X  X Phone X ) or a company (e.g.,  X  X pple X ). We introduce b e to denote the brand or company of a product e . We then aggregate the target audience of b e by following the similar approach, and denote it as U b e . Also, for users in U e and U b e , we fur-ther perform spam user filtering by considering their follow-ings/followers, tweet contents and interactions with other users.

The demographic distribution of a product e for attribute a taking the value v is calculated by combing the estimation co mputed from U e and U b e through the Jelinek-Mercer (JM) smoothing method: wh ere 1 [ ] is the indicator function which returns 1 only when the condition is true and is the interpolation coeffi-cient, which is empirically set to be 0.3 in our experiments. The target audience of a product is constructed based on both the information related to itself and that related to its corresponding brand or company.
 In this section, we have presented two methods to lever-age information from social media for product demograph-ics learning. As such, we have two types of feature repre-sentations for product demographics. We do not attempt to combine them into a unified representation, instead, we keep them separate. As will be discussed later, the learning to rank algorithms can automatically assign optimal weights to these two feature types.
Now we discuss how to devise the product recommenda-tion algorithm. A good recommendation algorithm should satisfy two main criteria [2]: 1) it is flexible to incorporate various types of useful information. 2) the algorithm is easy to understand for future extension and the ranking results are intuitive to explain. For the first criterion, we develop a learning to rank framework for product recommendation, which can be used on any types of features. For the sec-ond criteria, we represent products and users in the same demographic feature space, which makes our results easy to explain. Our proposed framework is generic and can be deployed with any ranking algorithms.

Our algorithm consists of two main steps: 1) candidate product generation; 2) learning to rank.
Recall that we have identified the purchase-intent tweets in Purchase Intent Detection . The authors of these tweets are treated as potential consumers, and the tweets reveal purchasing needs from users. In this section, we study how to generate candidate products based on users X  profiles and their purchase-intent tweets.
 tain product can be derived from the identified purchase-intent tweets. We consider an example here:
In this example, we need to detect the user X  X  requirement of price &lt; $200 for a brand, Samsung phone . To build a product knowledge base for products, we have indexed all the product related information such as brand, price, and screen size. Regular expressions have been compiled for each information field and users X  requirements are identified by using the regular expression patterns. We generate a list of candidate products which fulfil the identified requirements. purchase-intent tweet will be the potential customer of its related product. However, we have noticed that there are a considerable number of purchase-intent tweets, in which the potential consumer is not the author of the tweets. See the following example:
The author of this tweet is a female, and if simply taking her as the potential customer of the phone, the recommender system would generate inappropriate recommendations. Al-though it is very challenging to solve this problem, our cur-rent approach naturally address this issue. Recall that we have extracted a set of demographic phrases such as  X  X y son X . We can create a set of virtual users with the profiles of this specific identity ( X  X y son X ). Once we have found that a tweet contains such an identify indicator, we will take its corresponding profile for product recommendation. t the products which fulfil the identified requirements, the number of candidate products is still large which is not suit-able for the learning to rank algorithms. For this reason, we select at most 30 best-sale products among the candidate products as the input to the learning to rank algorithms in the next step.
Having identified the purchase requirements of a potential consumer, we now discuss how to recommend products with the demographic information of both users and products. We formulate the task as a ranking problem and adopt the learning-to-rank algorithm as our solution. We first intro-duce the learning to rank framework briefly.
 ing), a number of queries and their corresponding retrieved documents are given. Furthermore, the relevance levels of the documents with respect to the queries are also provided. The relevance levels are represented as ranks. The objec-tive of learning is to construct a ranking function (model) which achieves the best results in ranking of the training data by minimizing a loss function. Ideally the loss function is defined on the basis of the performance measure used in testing. In retrieval (testing), given a query, the system re-turns a ranked list of documents in a descending order of the relevance scores which are calculated using the ranking function.
 was originally proposed for information retrieval. We first make a connection between product recommendation and information retrieval. In our task, a purchase-intent tweet can be understood as a query and an adopted product can be understood as a relevant document. For convenience, we use the term  X  query  X  to denote a purchase-intent tweet.
To formulate our product recommendation problem as a ranking task, we assume that there are a set of purchase-intent tweets (i.e. queries) Q = f q (1) ; q (2) ; :::; q training. A purchase-intent tweet (query) q ( i ) is associated with a set of n ( i ) candidate products f p ( i ) 1 ; :::; p each candidate product, let y ( i ) j denote the judgment on product p ( i ) j with respect to query q ( i ) . The value of y ca n be either discrete or continuous, and a higher value in-dicates a better recommendation for the query q ( i ) . A fea-ture vector x ( i ) j can be constructed for each query-product ranking function f such that, for each feature vector x ( i ) (corresponding to q ( i ) and p ( i ) j ), it outputs a recommenda-tion score f ( x ( i ) j ) for product ranking.

To learn the ranking function f , there are three general approaches [15]:
We define our task in a generic way such that all the above approaches can be used. Another important problem is how to construct the feature vector for each instance, which is usually the basis of good performance for learning to rank algorithms. We mainly consider two types of features: Query-independent product features. This type of fea-tures are independent of the specific query. Intuitively, the product sale follows  X  X ich-gets-richer X , i.e. a user is more likely to buy a product with more successful sales history and more positive comments. Based on this intuition, we use the following features: the sales history of a produc-t ( sale ) and the overall rating score of a product ( rating ). We also incorporate the overall polarity score of a produc-t ( polarity ) as the third feature. In our dataset, we have found that popular products usually have similar high rat-ing scores. Thus, we consider looking into the reviews and derive the polarity scores based on the opinionated user re-views. Here we follow the unsupervised method in [22] with an open Chinese opinion lexicon to transform review content into polarity scores within the interval of [ 1 ; 1]. For new products, we can smooth these features with the generalized information at the brand level.
 Query-dependent product features. Query-dependent product features are extracted based on a potential user and a candidate product. We quantify the match degree between a user and a product based on their six-dimensional demo-graphic attribute values (see Table 1). Formally, given a user u and a candidate product e , we set the feature value of at-tribute a as the probability in the demographic distribution of e : where v ( u ) a denotes the value of attribute a for user u and is the demographic distribution defined in Equation 1 and 2. Intuitively, if a user closely matches a product, the user will be a representative of the target consumers of the product. Note that we have learnt the demographic distributions from both online reviews and microblogs, and for each attribute, we can obtain two different feature values. Instead of sim-ply combining both values, we keep them separate and let the ranking function learn the weights automatically. The weights of the demographic features learned by a ranking function provide an intuitive way to explain the results. Al-though we have only evaluated our proposed recommender algorithm on the aforementioned features, the algorithm can be easily extended to incorporate other types of features. formance of learning to rank algorithms highly relies on the amount of training data. Previous studies tend to use trans-action records (users X  actual purchase decisions) from online e-commerce websites as supervised information [24]. Howev-er, such data are not always available as e-commerce compa-nies could choose not to reveal their transaction data. Even with the availability of transaction data, it is still difficult to link users across microblogs and e-commerce websites, which makes it infeasible for the evaluation of our current task. Here, we propose a novel approach to acquire training data semi-automatically which is motivated by the following two example tweets from the same user: In the first tweet, a user expressed her desire to buy a Samsung phone for her son. The user subsequently reported that she has purchased a product. The above example forms a query-decision pair, which can be naturally converted into a training instance.

To extract such query-decision pairs, we first identify purchase-intent tweets. Then for each tweet, a set of tweets from the same author which were subsequently published in a week time have also been retrieved. We compile some cue phras-es which are indicative of reporting purchase decisions, e.g.,  X  have bought something X . With such cue phrases, we can then identify those tweets potentially reporting purchasing decisions. We subsequently invite a human judge to manual-ly examine whether these tweets actually report buying deci-sions. The query-decision pairs can then be used as training instances for the learning to rank algorithms.
In our work here, we chose Sina Weibo, the largest Chi-nese microblogging service, as the microblogging platform, and Jingdong, the largest Chinese B2C e-commerce compa-ny, as the e-commerce product database. Our recommender system aims to recommend products on Jingdong to users who have expressed explicit purchase intents on microblogs. We evaluate our recommender system in two aspects: pur-chase intent detection and product recommendation. All the data used in our experiments will be made avail-able. Construction of the dataset. To construct the dataset for the evaluation of purchase intent detection, we first ran-domly select 10,000 tweets which contain at least one key-word expressing purchase intent as listed in Table 2. Then two annotators are asked to label the tweets as containing p urchase intents or not by following the guidelines intro-duced in [11]. The Cohen X  X  Kappa agreement coefficient between annotators is 0.85, which indicates a high-level a-greement. By only keeping the tweets which receive the same labels from both annotators, we end up with 4,434 purchase intent tweets and 5,352 non-purchase intent tweets. Methods to compare. We evaluate the following methods for purchase intent detection:
We train the Support Vector Machines (SVMs) with two different kernels, linear and RBF, on the feature sets men-tioned above.
 Results and analysis. It can be observed from the results presented in Table 3 that using our proposed lexical-POS features ( Ours T ) outperforms the baseline model using tex-tual features only ( Baseline T ). In particular, the improve-ment is more significant with the RBF kernel where over 13% improvement is observed. Adding demographic features to textual features ( Baseline T + D ) improves upon Baseline by 1% with the linear kernel and 4.7% with the RBF kernel. However, additionally incorporating demographic features into our proposed lexical-POS features ( Ours T + D ) only gives marginal improvements compared to Ours T . Overall, the best performance of 81.8% in F-measure is achieved us-ing a combination of lexical-POS and demographic features trained on SVMs with the RBF kernel.
 Table 3: Performance comparison for purchase in-tent detection with SVM.
 Construction of the dataset. We choose three popular product types, phone, camera and laptop, for the construc-tion of our dataset for the evaluation of product recommen-dation. We follow the method of semi-automatic acquisition of query-decision pairs described in Section 5.2 to build our dataset. The statistics of these three product types is sum-marized in Table 4.
 Table 4: Statistics of the dataset for product recom-mendation.
 Me thods to compare. We evaluate our proposed rec-ommender system using two representative learning to rank algorithms from each of the categories, pointwise, pairwise and listwise:
These learning to rank algorithms are trained on two types of features, query-independent features and query-dependent features. We use product sales ( sale ), product polarity s-cores ( polarity ), and product rating scores ( rating ) as query-independent features. The query-dependent features, or de-mographic based features, are derived from online reviews in the Jingdong website and microblogs from Sina Weibo, which are denoted as JD and Weibo respectively.

The open source toolkit, RankLib 4 is used for the im-plementation of these learning to rank algorithms. For each algorithm, five-fold cross-validation is performed and the re-sults are averaged over five such runs.

In our task, the purchase history on e-commerce websites is not available. Thus, existing approaches relying on pur-chase history [24, 14] are not suitable to be used as baselines. For comparison, we built three baselines with each of them using one of the three query-independent features to rank products from our generated candidate product list. Evaluation metrics. The evaluation metrics adopted here are precision at k ( p @ k ) and Normalized Discounted Cumu-lative Gain (NDCG), which are commonly used in informa-tion retrieval. For p @ k , we consider the relevance at the product model level, i.e. the specific product actually pur-chased as described in a tweet is treated as the only relevant product. To compute p @ k , we calcuate the proportion of queries for which we have made the correct recommenda-tions in the top k positions. NDCG takes into account both the ranking positions and the quality grade of products, and is defined as follows: where Q is the set of queries, Z k;j is the normalizer for the j th query which denotes the ideal ranking score for the top k positions, and R ( j; m ) is the relevance level of the m th product for the j th query. For R ( j; m ), we mainly consider three relevance levels: relevant (2), partially-relevant (1) and non-relevant (0). For each query, there is only one relevant product which matches a user X  X  final purchase decision. If a product model does not match the final product purchased but has the same brand, it is treated as partially-relevant. For all the other cases, products are treated as non-relevant. Overall performance comparison. It can be observed from Table 5 that the learning to rank methods are much more effective than the three simple baselines. Furthermore, the performance of the pointwise approach is much better than that of pairwise and listwise approaches. The listwise approaches perform the worst due to the difficulty in ob-taining the full product ordered list for training since there is usually only one correct product decision and the order-ing of irrelevant products is not available. In the pointwise category, MART works very well and nearly achieves the best performance for both p @ k and N DCG @ k in all the three categories, except that it is slightly worse than Ran-domForest for p @5 in the  X  X aptop X  category. Overall, for all methods, the performance in the  X  X hone X  category is much w orse than that of  X  X amera X  and  X  X aptop X . This is because there are more brands and models but much fewer training instances in the X  X hone X  X ategory compared to the other two categories as shown in Table 4.
 Feature selection and analysis. As have been previ-ously mentioned, we have a set of three query-independent features, s ale , p ola rity and r a ting , denoted as spr . We also have two types of query-dependent features Weibo generated from microblogs in Sina Weibo, and JD derived from online reviews in Jingdong. We build our recommender systems using the best learning to rank algorithm, MART , trained from different types of the features. The results are present-ed in Table 6. We can see that 1) the combination of all the features achieves the best performance; and 2) demographic features derived from online reviews in Jingdong and those extracted from microblogs are effective to improve the rec-ommendation performance. Combining these two types of demographic features (Weibo + JD) yields a competitive performance compared to that of using all the features. Table 6: Performance comparison with different type of features for MART . Both denotes Weibo + JD .
 T able 7: Samples of the learnt product demograph-ics based on online reviews. Real numbers denote the learned weights for the corresponding attribute values.
 Q ualitative analysis of demographic features. Ta-ble 6 shows that demographic features are very effective in product recommendation. Here we present in Table 7 some learned demographic features for a phone product, Samsung Galaxy S4. In specific we only show the associated demo-graphic features for  X  X olor X . It can be observed that the demographic distributions indeed varies with different col-ors. Young females prefer white phones while young males like black phones more.

Table 7 shows some learned product demographic features of two different phone brands, Apple and Samsung. We have a couple of interesting observations, 1) Samsung has a more balanced sex distribution; 2) Apple products are more preferred by the consumers in the IT field.
 Table 8: Samples of the learnt product demographic based on microblogs.
 Impac t of the completeness of user profiles. In Ta-ble 1, we have presented the six demographic attributes. It is worth noting that not all users will fill in all the attributes in their public profiles. We want to check how the system performance is affected by the completeness of user profiles. We first analyze the dataset of three product categories in Table 4, where a query-decision pair corresponds to a unique Weibo user. The average number of attributes a user has filled in for each product category is as follows: 2 : 73 1 : 10 (laptop), 2 : 66 1 : 12 (camera) and 2 : 81 1 : 07 (phone). Our evaluation results show that our system generally works well when a user has filled in three or more attributes, and age , sex and interest tags have been identified as the top three most important attributes by using the leave-one-out eval-uation test. To examine the applicability of our system on a large Weibo user population, we compute the proportion-s of the user demographic attributes that can be found in the public profiles of the 5 million Weibo users: sex (1 00%), age ( 36.7%), marital status (4.6%), education (26.3%), ca-reer (12.9%) and tags (6 5.7%). It can be seen that apart from marital status, all the other attributes have consider-able filled-in values, especially the identified top three most important attributes. Among the 5 million Weibo users, 44.1% of them have filled in at least three attributes and 26.5% of them have filled in all the identified top three most important attributes. These statistics provide a support ev-idence to our demographic based approach.
Our dataset consists of 5 million users and 1.7 billion tweets, and about 113 tweets are published every second. As mentioned in Section 3, we use keyword filtering to re-duce the number of tweets for subsequent processing. That is, tweets that do not contain any of the keywords express-in g purchase intents are filtered. After keyword filtering, 3,380,894 tweets have been retained. By averaging this s-tatistics into seconds, there would be 0.216 tweet gener-ated per second. Our dataset covers roughly 10% of the entire Weibo data stream from active users. In this case, our purchase intent detection module will need to deal with about 0 : 216 10 = 2 : 16 tweets per second. We conduct the experiments on servers equipped with an Quad-core AMT opteron(tm) processor 8380 operating at 2.5 GHz running Red Hat Linux version 9.1 and equipped with 70 GB of phys-ical memory. Table 9 shows the running time performance of various steps in our recommender system by running on a single server with a single thread. Here, we chose linear kernel for SVM for the trade-off between accuracy and speed for purchase intent detection. It can be observed from Ta-ble 9 that our approach has a very competitive throughout of tweets per second, which is much larger than 2.16. Table 9: Running time performance of each step in our recommender system.  X  X /s X  denotes  X  X weets per second X .

We have implemented two versions of the aforementioned product recommender system (in Chinese).

Demo system. We have implemented a demo system which simulates the Weibo stream by processing our canned data collected between January and June of 2013. The sys-tem processes each tweet in turn and when it identifies a purchase-intent tweet, it will make an alert in the user in-terface. If we put the mouse over the tweet, the system will display the product recommendation results. The demo system is available at http://sewm.pku.edu.cn/metis .
Weibo service. To allow our recommender system deal with live tweets, we have set up an official account of our system ( http://weibo.com/u/3926085440 ) and a system re-sponse account ( http://weibo.com/u/3802166078 ). If a us-er wants to receive the recommendation service from our sys-tem, she can follow our official Weibo account. Our system maintains a pool of followers, and constantly monitors their tweets. Once we have detected a purchase-intent tweet, our system will generate a tweet which contains the recommen-dation results and a short URL link pointing to the detailed product information via the response account. The tweet contains a mention to the author of the original purchase-intent tweet. Note that the our Weibo service is limited by Sina Weibo API, and it can only deal with a small amount of requests per day.

Architecture description. A distributed platform is constructed for parallel processing, which consists of a mas-ter server and five child servers with the same configuration described in Section 6.3. Each child server keeps a local copy of all the product information. The master node coor-dinates the activities of the child nodes for load balancing. On each child server, an incrementally distributed index sys-tem has been implemented for storing and retrieving tweets, users profiles and product information. Each child server runs a purchase intent detection module and a product rec-ommendation module in a pipeline mode, i.e. the identified purchase intent tweets are directly forwarded into the prod-uct recommendation module on the same server as shown in Figure 1. Finally, the master server collects and returns the results. User privacy has also been considered in the system design: all the user profiles are encrypted in our system and are transparent to the developers. Our work is mainly related to three lines of research: Product recommendation. Early work on product rec-ommendation mainly relies on collaborative filtering which makes recommendations based on matching users with sim-ilar interests [19, 2, 14]. Collaborative filtering suffers from the  X  X old start X  problem. Recently, there have been some attempts to incorporate information from online social net-works into recommendation [21]. In particular, demographic information has been shown to be useful to improve the rec-ommendation performance [13, 18, 10]. Our work is related to the aforementioned research. Nevertheless, we present-ed the first study which identifies users with purchase needs on social networks and make product recommendations by jointly considering both users X  and products X  demographic information. Some design issues and suggested guidelines for the development of product recommender systems have been previously discussed in [23, 26]. We have followed the suggested guidelines but proposed different methodologies for the implementation of our system.
 Learning to rank. Learning to rank was originally pro-posed in information retrieval, where it aims to incorpo-rate various features in a formal way to improve the rank-ing performance of the retrieved results [15]. In this pa-per, we formulate the product recommendation task as a learning to rank problem and evaluate various learning to rank algorithms on both the query-dependent and query-independent features derived from social media data. The learning to rank algorithms we tested include pointwise ap-proaches, MART [9] and RandomForest [5], pairwise ap-proaches, RankSVM [12] and RankBoost [8], and listwise approaches, ListNet [6] and AdaRank [27].
 Social networking mining. Commercial intent detection and analysis has been performed on the Web data [7] and social media data such as Twitter [11]. The correlation be-tween external events and commercial intents on microblogs have been studied in [25]. We also consider automatically detecting purchase intents from microblogs but with differ-ent feature representation and with an additional incorpora-tion of users X  demographic features. Furthermore, we have explored efficient implementation of purchase intent detec-tion in order to achieve the near real-time performance when dealing with large amount of social stream data.

In recent years, there has also been some work on iden-tifying individual X  X  demographic characteristics such as age, gender and interests from social media data [16, 4]. In this paper, we directly extract users X  demographic information from their public profiles in Sina Weibo. We will explore au-tomatic methods in inferring users X  demographic attributes as future work.
In this paper we have presented a novel demographic based product recommender system which detects users X  purchase intents from their microblogs in near real-time and makes product recommendations based on matching the users X  de-mo graphic information extracted from their public profiles with product demographics learned from microblogs and on-line reviews. Unlike traditional product recommender sys-tems which are often designed for some specific e-commerce websites and can only make recommendations when user-s are performing e-commerce activities in those websites, our system is not constrained by any particular e-commerce website and can make instantaneous product recommenda-tions to users who have expressed their purchase intents in micoblogs.

We have conducted extensive experiments on large-scale microblog data crawled from Sina Weibo. The experimen-tal results have verified the feasibility and effectiveness of our proposed recommender system. We have also made a demo version of our system publicly available and have im-plemented a live system which allows registered users to get recommendations whenever they need. We believe our study will have profound influence on both research and industrial communities. In future work, apart from exploring methods to automatically infer users X  demographic information from social media data, we will also investigate other potential-ly useful features to be incorporated into our recommender system.

ACKNOWLEDGEMENTS We thank the anoymous reviewers for his/her thorough review and highly appreciate the comments. We thank Prof. Ming Zhang for the help with the data collection. This work was partially supported by the National Key Basic Research Program (973 Program) of China under grant No. 2014CB340403, 2014CB340405, NSFC Grant 61272340. Yulan He was supported by the UK  X  s EPSRC grant EP/L010690/1. Xin Zhao was sup-ported by MSRA PhD fellowship. Xin Zhao and Yanwei Guo contributed equally to this work and should be consid-ered as joint first authors. Xin Zhao is the corresponding author. [1] Us demographic and business summary data. Product [2] Gediminas Adomavicius and Alexander Tuzhilin. [3] Jin Yeong Bak, Suin Kim, and Alice Oh.
 [4] Bin Bi, Milad Shokouhi, Michal Kosinski, and Thore [5] Leo Breiman. Random forests. Mach. Learn. , 45(1), [6] Zhe Cao, Tao Qin, Tie-Yan Liu, Ming-Feng Tsai, and [7] Honghua (Kathy) Dai, Lingzhi Zhao, Zaiqing Nie, [8] Yoav Freund, Raj Iyer, Robert E. Schapire, and [9] Jerome H. Friedman. Greedy function approximation: [10] Michael Giering. Retail sales prediction and item [11] Bernd Hollerit, Mark Kr  X  oll, and Markus Strohmaier. [12] Thorsten Joachims. Training linear svms in linear [13] Nikolaos Korfiatis and Marios Poulos. Using online [14] Greg Linden, Brent Smith, and Jeremy York.
 [15] Tie-Yan Liu. Learning to rank for information [16] Alan Mislove, Bimal Viswanath, Krishna P.
 [17] Bo Pang and Lillian Lee. A sentimental education: [18] Lingyun Qiu and Izak Benbasat. A study of [19] Badrul Sarwar, George Karypis, Joseph Konstan, and [20] G. Sridhar. Consumer involvement in product choice -[21] Panagiotis Symeonidis, Eleftherios Tiakas, and Yannis [22] Peter D. Turney. Thumbs up or thumbs down?: [23] Felix von Reischach, Florian Michahelles, and [24] Jian Wang and Yi Zhang. Opportunity model for [25] Jinpeng Wang, Wayne Xin Zhao, Haitian Wei, Hongfei [26] Bo Xiao and Izak Benbasat. E-commerce product [27] Jun Xu and Hang Li. Adarank: A boosting algorithm [28] Valarie A Zeithaml. The new demographics and
