 Frequent pattern mining has been extensively studied over decades and has been applied to marketing, recommendation, and other important domains. In addi-and occupancy [ 14 ], have been studied to meet the needs of various applica-tions and different types of transaction databases. Among them, transaction databases with utility information, which reflects users X  interests to items, are important to study. For example, mobile service providers may collect customer mobile App usage profiles upon approval and use them to improve their service. In this case, each customer mobile App traffic profile (daily or monthly) is a transaction, with a mobile App as an item, and its traffic usage as its utility. Another example can be found in browsing logs, where each website with its browsing time can be viewed as an item and its utility.
 answering questions like  X  X n which mobile Apps do the customers spend most by a large portion of transactions and can explain individual customer behaviors to a large extent. In particular, we want to find patterns that occupy a large portion of total utility of the supporting transactions. Towards this goal, we define a novel measure called utility occupancy to measure the utility contribu-tion of a pattern within a transaction. Different from existing utility measures, utility occupancy uses a relative utility ratio in each transaction to emphasize the importance of a pattern to each customer.
 can find frequent patterns with high utility occupancy, and make the following contributions: 1. A novel measure, called utility occupancy is proposed to describe the inter-2. An efficient mining algorithm, called OCEAN , is developed. OCEAN derive 3. Extensive experiments were performed to evaluate the effectiveness and effi-lem formulation. Section 4 derives an upper bound and presents the details of OCEAN. Section 5 provides the detailed experimental evaluation of OCEAN. Finally, Sect. 6 provides some concluding remarks. In addition to the pattern frequency, other properties and interestingness mea-sures of frequent patterns and association rules have been studied in the litera-ture [ 13 ], to fulfill the need for patterns with good quality, and recently, patterns with high occupancy [ 14 ], which means the pattern that occupies a large portion of the transactions it appears in. The occupancy of an itemset in a transaction was defined as the ratio between the number of items in the itemset and the number of items in the transaction, and the occupancy of an itemset in a transaction database was defined as the harmonic average patterns with high occupancy were more effective in webpage print region recom-mendation than maximal frequent patterns. Our work is an extension of itemset occupancy in case of transaction databases with utility information. Since we are bound for utility occupancy is tight to the numerical nature of data closely. Another related problem to our work, which is also an emerging and impor-problem, each transaction contains the quantity of a set of items, and an item ity itemsets without candidate generation. Unlike other existing absolute utility measures, the proposed measure utility occupancy is a relative measure, which emphasizes whether a certain set of items is important for individual users. Suppose a transaction database contains a set of transactions  X  .A tion t containing k items in  X  is in the form of { ( item 1 ,util  X  X  X  util is a numerical value to represent its utility in t . When a utility table is available, such as shown in Table 1 (a), util i is usually calculated as follows. Definition 1. The utility of item i in transaction t , denoted as item i in t . For example, U T 2 ( c )=4  X  3=12 in Table 1 .
 item i in W , item i is also in t . We denote the set of supporting W as  X  W .The support ratio of W , denoted as  X  ( W ), is calculated as of all items in t , i.e , U ( t )= item of the items present in both t and W , i.e , U t ( W )= item itemset W in a database  X  , denoted as TWU ( W ), is defined as the summation of the utilities of W  X  X  supporting transactions, i.e , TWU ( W )= 18 = 92.
 Definition 2. The utility occupancy of an itemset W in its supporting transac-tion t is defined as The utility occupancy of W in a database is defined as the arithmetic average of the utility occupancy values of W in all its supporting transactions,  X  T 5 ( W )+  X  T 7 ( W )) / 3=(9 / 42 + 6 / 32 + 12 / 18) / 3=0 . 355. Definition 3. Given a minimum support threshold  X  and a minimum utility occupancy threshold  X  , the problem of high utility occupancy itemset min-ing is to find all itemsets whose support ratio is no less than occupancy is no less than  X  .
 the utility occupancy measure does not hold downward closure property. In the example of Table 1 ,  X  ( { f, g } )=0 . 355,  X  ( { d, g } itemset is extended, its utility occupancy can either increase or decrease. of a user, high utility occupancy itemset mining selects the itemsets that can For example, compare itemset { a, b } with itemset { f, g them appear in three supporting transactions (T1, T4, and T6 for and T7 for { f, g } ). { f, g } has much larger utility ( U ( than { a, b } ( U ( { a, b } ) = 2 + 2 + 3 = 7), however, the utility occupancy of { a, b } (  X  ( { a, b } )=(2 / 8+2 / 4+3 / 7) / 3=0 . 392) is higher than that of (  X  ( { f, g } )=0 . 355). Our proposed high utility occupancy itemset mining is an extension of the high occupancy itemset mining problem proposed in [ 14 ], which ple, in transaction T6 of our example, the occupancy of { of { c } in terms of cardinality, however,  X  In this section, we first derive an upper bound for utility occupancy, and then describe an efficient algorithm OCEAN to find qualified patterns with the help of the derived upper bound. 4.1 Upper Bound of Utility Occupancy The process of itemset mining can be viewed as an exploration of a set enu-meration tree [ 12 ], whose root node is an empty set, and each node represents an itemset and its children are extended itemsets from it by a certain order. The order can be lexicographic order, or transaction-weighted utility ascending order, which is a common choice in many high utility itemset mining algorithms. In our example, according to the values of transaction-weighted utility, we have b  X  a  X  e  X  d  X  g  X  c  X  f , and we use this order for the rest of the paper. Given a subtree rooted at itemset X , the set of all possible items that can be added to form itemsets in this subtree is called the extension set us consider the subtree rooted at g for our example in Fig. 1 ,and E = the node g .
 Given a subtree rooted at X , we need to derive an upper bound ity occupancy for all possible qualified patterns residing in the subtree without pancy threshold, we can safely discard this subtree from further consideration. Lemma 1. Given a subtree rooted at X , its supporting transaction set its extension set E , for any possible qualified itemset W Proof. Since W  X  X  X  E ,wehave U Theorem 1. Given the minimum support ratio  X  , a subtree rooted at supporting transaction set  X  Proof. Since  X   X  X , and sort this vector in descending order, denoted as ( average of top |  X  W | values of this vector is an upper bound of Furthermore, since a qualified pattern should be supported by at least  X  transactions, we have  X  |  X  | X |  X  W | . Put all together, we have Fig. 1 . Suppose the minimum support ratio is 0.25. We can average the top  X   X  ( { g } ) = (12 / 18 + 21 / 42) / 2=0 . 584.  X   X  ( { g, c } If the minimum utility occupancy ratio is 0.5, we can safely prune the subtree rooted at { g, c } . 4.2 Design and Implementation of OCEAN We design and implement our proposed high utility occupancy mining algorithm based on an important data structure utility list , which was used in the state-of-the-art high utility itemset mining algorithms: HUI-miner [ 11 ]andFHM[ 5 ]. Algorithm 1. UpperBound For any given itemset X and its extension set E , its utility list is a list of the utility list contains a three-tuple record, i.e ,( transaction id Therefore, the itemset data structure in our algorithms has two fields, itemset utiltiy prunning, whereas in OCEAN the upper bound of occupancy is more complicated to calculate, which is given in Algorithm 1 . Note that we do not The utility records are sorted according to transaction id P and P Y , suppose P X .itemset = X , P Y .itemset = Y ,and X the itemset X  X  Y and its utility list can be easily constructed by scanning P .U L and P Y .U L simultaneously and adding a utility record for each common transaction t into P XY .U L . We name this procedure as merge ( P and omitted its detailed implementation. In addition, Size ( P number of transaction records in P X .U L .
 The main idea of our proposed algorithm OCEAN is to perform a depth first search on the set enumeration tree of a database. In Algorithm 2 ,foreach item i , we create an itemset I i such that I i .itemset = ing order according to the transaction-weighted utility of each item. Such order is also used in the depth first search, which is implemented in Algorithm 3 .In Algorithm 3 , qualified itemsets are reported (in line 2 and 3) and node explo-rations are coordinated by determining whether the node should be pruned (in line 5 and 6) and preparing the set of extension itemsets of the node (in line 8 extension set E , for each item y  X  E , X  X  y forms an extension itemset of X . Algorithm 2. OCEAN Algorithm 3. Prune We evaluated the effectiveness and efficiency of the proposed algorithm OCEAN using four real world datasets. In addition to OCEAN, we also implemented a variation: OCEAN without minOccu pruning as our baseline. All algorithms were implemented in JAVA. Experiments were performed on a PC with a 3.4 Hz Intel i7 processor and 8 GB memory running Windows7 OS.
 length of transactions, and the number of items in the longest transaction(s). MobileApp was obtained from a mobile service provider, with each transac-tion recording the traffic data that a customer spends on various mobile Apps. Mushroom , BMS ,and Kosarak are benchmark datasets for high utility item-set mining (downloaded from FIMI Repository [ 1 ]). Mushroom includes descrip-tions of hypothetical samples corresponding to 23 species of gilled mushrooms, each transaction contains 23 items. BMS is a real-life sparse click-stream data from a webstore. Kosarak is a real-life sparse click-stream data of a hungarian on-line news portal. Unlike MobileApp, the other three datasets provide transac-between 1 and 10 by using a log-normal distribution and randomly generated item counts between 1 and 5 as in [ 5 , 11 ]. 5.1 High Utility Occupancy Itemsets Vs. High Utility Itemsets We used MobileApp to illustrate the effectiveness of high utility occupancy item-sets for identifying the set of mobile Apps that users are interested in. Towards this goal, we used OCEAN and FHM to generate 10 itemsets with highest util-ity occupancy values and highest utilities, respectively. The results are shown in Table 3 . The itemsets found by OCEAN are more favorable than those found by FHM for two reasons. First, high utility occupancy itemsets indicate high interests of users in these itemsets. For example, itemset of 77.4 %, which means customers who use mobile Apps { 7,9,14 sets found by OCEAN is larger than that by FHM in general, because larger itemsets lead to a decrease in support ratio which usually harms utility values as well. The diversity of found mobile Apps groups with high occupancy is more favorable for the task of mobile App recommendation or promotion. 5.2 Efficiency of OCEAN We evaluated the efficiency of OCEAN on BMS, Kosarak, and Mushroom datasets. We compared the running time and the number of searched itemsets for OCEAN and OCEAN without minOccu pruning, shorted as OCEAN no, to see how effective our derived upperbound is. The results are shown in Fig. 2 . We fixed minOccu and varied minSupp in Fig. 2 (a), (b) and (c), and we fixed minSupp and varied minOccu in Fig. 2 (d), (e) and (f). Clearly, with increas-ing minOccu, OCEAN pruned more itemsets in addition and run in less time. In general, the running time and the number of searched itemsets of OCEAN decreased as minOccu and minSupp increased. For sparse datasets, small min-Supp and minOccu can be effective too. For example, there are 41270 distinct items in Kosarak. With minSupp and minOccu being 0.14 %, 10 % respectively, OCEAN actually searched 12290355 itemsets, whereas there are 2 itemsets in total. We can see the trend more clearly in Fig. 3 , in which we mea-sured the running time of OCEAN with varying minSupp and minOccu. The higher the minSupp or minOccu is, the fewer the number of searched itemsets is and thus the less running time is. We also studied the memory consumption of OCEAN. We found that for all databases we used, the memory consumption is stable. For example, for Mush-room, the consumption is almost 161 MB for all minSupp and minOccu values. We omitted the detailed memory consumption results due to space constraint. The efficiency of OCEAN is manifestly influenced by the processing order of items. We recorded the running time of OCEAN using TWU (transaction-weighted utility) ascending order, TWU descending order, item occupancy ascending order, item occupancy descending order, and lexicographic order on BMS. Figure 4 shows the experimental results. According to Fig. 4 , the TWU ascending order made a best performance as it can reduce the number of gener-generated under 1  X  10 5 s. In this paper, we propose utility occupancy as a measure for interestingness of itemsets with utility information.The proposed measure can lead to useful item-representing user interests or user habit. We derive an upper bound for utility occupancy from an itemset for all possible extension itemsets from it, and design an efficient mining algorithm using this upper bound based on a utility list data structure and a depth first search procedure. Experimental evaluations on real world data show that the proposed mining algorithm can find such patterns effectively and efficiently.

