 1. Introduction
Although global thresholding cannot cope with effects such as local lighting irregularities and non-homogeneities, it has gained high popularity in wide range of computer vision applications in automatic control quality, document analysis, inspection, detec-tion and monitoring, among many others. In fact, global thresh-olding is by far the most applied segmentation methods for monocromatic images in everyday applications. Image threshold-ing has been an intense research topic, where a number of successful methods have been developed. However, despite the very wide variety of techniques the practical use of thresholding still has unsolved issues.
 constraint. Almost all thresholding techniques rely on generic criteria and have low capability  X  or none at all  X  to be customized to a problem. Thus, in most cases the selection of a suitable thresholding method requires long trial-and-error procedures analyzing the performance of different methods. Note that the existence of a method suitable for the problem is not guaranteed in many cases. Sensitivity and lack of robustness to the properties of images, such as lighting conditions, noise level, and the target size is another critical issue. It occurs very frequently that methods that perform well under some certain conditions fail if the conditions change. Thus, the selection of a method for a given problem requires exhaustive robustness analyses.

This paper proposes a learning-based thresholding method capable of being customized to a given problem. Selecting suitable threshold values is an easy task for a human but dif fi cult for a machine. The objective of our method is to capture thresholding knowledge from humans and imitate their performance. Like many other techniques, our method assumes that the levels of the objects in the images are distributed in histogram clusters, commonly named modes. The input of our method is a set of training images and their corresponding desired threshold values that have been previously selected by an expert. The method is applied in two stages: learning and application. In the learning stage the sets of training images and threshold values are used to train an object/background mode classi fi er using an adaptive neuro-fuzzy inference system. In the application stage the histo-gram of each image is decomposed in its modes, which are to separate the object and background modes using a minimum classi fi cation error criterion that was customized also in the learning stage.

The paper starts presenting a version for the bi-level problem and then extends it to multi-level thresholding. The proposed method can be easily customized to a given problem and shows good robustness to the conditions trained in the learning stage. Different user support software tools have been developed to facilitate its use. Our method has been applied to several problems some of which are described in this paper.

The paper is organized as follows. Related work is brie fl ized in the next subsection. Sections 2 and 3 describe respectively the application and learning stages. Section 4 presents its extension to multi-level thresholding. Section 5 illustrates its use in several com-puter vision problems, shows experimental results of the bi-level and a multi-level thresholding versions, analyzes the sensitivity of the method against the main sources of error and describes implementa-tion details and the user support tools developed. Conclusions is the fi nal section. 1.1. Related work
A large number of successful threshold selection methods have been developed using different criteria. Some are based on analyzing the histogram shape and modes structure using differ-ent approaches such as fi tting histogram with mixtures of Gaus-sians as in Ridler and Calvard (1978) and Kittler and Illingworth (1985) ; searching for peaks and valleys ( Sezan, 1990 ); or perform-ing curvature analysis ( Olivo, 1994 ), among others. Other techni-ques select the threshold using similarity measures between the original and the binarized version of the image based on edge matching ( Venkatesh and Rosin, 1995 ) or texture ( Liu and Srihari, 1994 ). Others are based on the entropy of the image such as Kapur et al. (1985) or Pal (1996) , which minimizes the cross-entropy between the original and the binarized image. Some methods rely on the spatial information such as O'Gorman (1994) and Abutaleb (1989) . A wide survey can be found in Sezgin and Sankur (2004) .
Automated selection of a suitable algorithm for a given problem is an easy task for an experienced human but it is dif fi machine. In most practical image segmentation systems, the intervention of a human operator is often needed to choose the algorithm to be used ( Olabarriaga and Smeulders, 2001; Udupa et al., 1997 ). In most cases long trial-and-error procedures are often necessary to select a method with the required accuracy and robustness for the problem. In fact, many works proposing one method include a list of problems where it can be useful. Other works, e.g. Sezgin and Sankur (2004) , include a classi fi suitability of methods for a number of different conditions.
Work ( Zhang and Luo, 2000 ) attempted to automate this process by iteratively trying different segmentation methods and evaluating the result of segmentation using heuristic knowledge. The iterations will not stop until a satisfying result is obtained. This brute-force approach does not necessarily involve success since the existence of a suitable method for the problem is not ensured. Also the method cannot be applied in real time.
Work ( Xia et al., 2005 ) describes a procedure to select, among several candidate thresholding methods, which is likely to obtain the best performance. The method extracts a number of features from the image such as mean value, standard deviation, skewness and kurtosis and gives them as input to a previously trained Arti fi cial Neural Network, which determines which method is more likely to be suitable for that image. The paper validates the method using only four candidate methods and does not address how it can be extended to the hundreds of different existing thresholding methods. Again, the existence of a suitable method for the problem is not ensured.

Work ( Phillips et al., 2002 ) proposes a training-based method that learns the region in the color space that corresponds to objects of interest segmented by experts in a number of training images. The method works well as long as conditions do not change but it is very sensitive to changing conditions, e.g. lighting.
Also, using training images with different conditions  X  in order to improve robustness  X  leads to large regions in the color space, resulting in high false positive rates in image thresholding.
Learning-based schemes have been widely used in many fi elds such as recognition of gestures ( Erol et al., 2007 ) and human motion ( Moeslund et al., 2006 ), among many others. These methods typically use traditional segmentation methods and then capture and model the object motion or behavior using different tools. This approach is complementary with our method, which could be used instead of the traditional segmentation layers. Other methods learn image background and apply background suppres-sion for segmenting objects in motion. They can only be applied to cases with mobile objects in static images.

This paper proposes a learning-based thresholding method that can be customized to a given problem. It relies on the consistency of histograms representing objects in the images and is particu-larly useful in partially unstructured environments where repre-sentative images of the problem are available. Its main novelties and strengths w.r.t. existing methods are (a) it allows ef capturing the know-how from experienced users; (b) it allows combining different criteria in a fl exible way under a training-based approach; and (c) it is it capable of learning the in conditions and, as result, it is signi fi cantly robust to changing conditions. 2. Application stage
This stage is performed after the learning stage but for clarity it is presented before. Fig. 1 shows a simpli fi ed scheme of the application stage. It has three main steps. First, a multi-mode decomposition technique is applied to the image histogram. Then, the resulting modes are classi fi ed as object or background by a mode classi fi er, which has been trained in the learning stage.
Finally, the threshold between the modes classi fi ed as object and as background is computed using a minimum classi fi cation error index, also customized in the learning stage.

As many thresholding techniques our method assumes that image histograms can be represented as mixtures of modes originated by the contribution of the different objects in the images: h  X  z  X  X   X  where P  X   X  i  X  is the a priori probability of histogram mode p  X  z j i  X  is its probability density function. Although in some works histogram modes have been modeled as Poisson distributions ( Pal and Pal, 1991 ), Gaussian distributions is the most accepted model.
Various techniques have been developed for multi-mode Gaussian histogram decomposition. They often estimate initial values for the
Gaussian mode parameters and then perform iterative parameter re fi nement until a fi tting error is satis fi ed. We adopt the method proposed in Chang et al. (2002) since it simpli fi es parameter re fi nement and has lower computer burden.

Fig. 2 shows images from two different applications. Fig. 2 -bottom shows the modes resulting of the Gaussian multi-mode histogram decomposition. Image histogram s and histogram reconstructions from the resulting modes are in Fig. 2 -center. The modes correspond-ing to the same objects are close and have similar features. This mode consistency for representing objects is widely accepted and exploited by a number of techniques. Our method uses a novel training-based a set of training images and their thresholds determined by an expert. 2.1. Mode classi fi cation classes: object or background. First, we analyze the bi-level problem in monocromatic images, which selects one threshold to separate a set of contiguous bright object modes from a set of contiguous dark background modes. The multi-level problem is addressed in Section 4 .

The objective of mode classi fi cation, see Algorithm 1 ,isto the mixtures of the modes classi fi ed respectively as object and background along the iterations:
O  X  z  X  X   X 
B  X  z  X  X   X  Algorithm 1. Mode classi fi cation.

Require f  X  j g , trained MC 1: S  X f  X  1 g ; i  X  2 2: while ( MC  X   X  i  X  Z 0) do 3: add  X  i to S 4: i  X  i  X  1 5: end while 6: return S
Let f  X  j g be the set of modes resulting from performing multi-mode decomposition to one image. Modes are classi fi ed following a bright-to-dark analysis. Modes are numbered according to its brightness.  X  1 is the brightest mode: in a bi-level problem it is assumed object and S is initialized as S  X f  X  1 g . If one mode is the same class are contiguous. Thus, the analysis fi nishes when the fi rst background mode is found. The remaining non-analyzed modes are classi fi ed as background.

The interpretation and classi fi cation of histogram modes are very complex and depend on each problem. In the learning stage Mode Classi fi er ( MC ) was customized to the problem, see Section 3 . Once MC is trained the classi fi cation of  X  i is performed as follows: MC  X   X  i  X 
Fig. 3 shows an example with a histogram with four mo-des.  X  1 is initialized as object: S  X f  X  1 g and at that moment 2  X  contiguous to O ( z )  X  is object or background. Our method classi fi es  X  i analyzing the similarity between  X  i and O ( z ), see Section 2.3 . During the training stage the degree of similarity between  X  i and O ( z ) in training images is captured and used for the learning of MC . In this example MC classi fi es  X  2 as object. At iteration 2,  X  3 is analyzed and classi fi ed as background. Then, the iterations end and the remaining mode,  X  4 , is classi fi ground. Fig. 3 -right shows the resulting O ( z ) and B ( z ). 2.2. Threshold computation
The objective is to compute the threshold between B ( z )and O ( z ) resulting from the previous step. O ( z )and B ( z )overlapanda minimum error method is used to separate them. In general a threshold value t can originate two types of classi fi cation errors in levels in the image. Our method uses the following error index: error  X  t  X  X   X  FNE  X  t  X  X  X  1  X   X  FPE  X  t  X  ;  X  5  X 
Selecting a suitable  X  can be done manually in simple cases but can be very dif fi cult in many problems. The learning stage includes a mechanism for customizing  X  to a given problem, see Section 3.4 .
Our method selects as threshold the value T that minimizes decreasing function while FNE ( t ) is monotonically non-increasing.
Thus, error ( t ) has an unique local  X  and also global  X  t  X  T that satis fi es f  X  T  X  X  0: f  X  t  X  X 
Keeping on with the example in Fig. 3 and taking e.g.  X   X  0 shows f ( t ) with its unique zero cross. T can be computed ef
For instance, a simple bisection method ensures obtaining T after a maximum of log 2  X  NL  X  evaluations of f ( t ). 2.3. Features for mode classi fi cation similarity metrics that showed good performance when applying the method to different problems.
 simple and ef fi cient similarity metric:
D M  X   X  i ; O  X  X  where  X  O and  X  O are the mean and standard deviation of O ( z ).
Mahalanobis distance takes into account the dispersion of O ( z ) and had better results than Euclidean distance in the experiments carried out.
 a measure of separability between probability distributions, see e.g. Demirkaya (1997) . The intra-class variance between  X  ( z )isde fi ned as the similarity between two probability distributions and can also be used to estimate separability between  X  i and O ( z ):
D B  X   X  i ; O  X  X  log  X  modes brighter than  X  i . The low values of features for  X  ence that there is high similarity between  X  2 and P  X   X  1
Features for  X  3 are low re fl ecting poor similarity between  X  P  X   X  1  X  p  X  z j  X  1  X  X  P  X   X  2  X  p  X  z j  X  2  X  X  . The features for this example using these features it is very easy to design a mode classi fi er capable of differentiating  X  2  X  object  X  from background.
 tures. For instance, mode size can be valuable in problems where objects have similar size. Also, adjacency measurements, which are used in many thresholding techniques, can be interesting in problems with one object in the image but would fail in images with several objects.

In the learning stage the presented method extracts and captures the similarity between object modes, and in the applica-tion stage, it uses this knowledge for mode classi fi cation. The method combines different mode similarity criteria tailored for a problem using a training approach. This is an advantage w.r.t. existing methods that use only one criterion with low adaptation capability. 3. Learning stage
The objective of this stage is to customize the thresholding method to a given computer vision problem. We assume that the desired performance for a problem is expressed by means of a set of training images f im g and their corresponding thresholds f t g , selected by an expert to ful fi ll the requirements of the problem.
When the expert selects t n as the suitable threshold for training image im n , he implicitly provides information that can be used to assign each mode of im n as object or as background. The learning stage captures this knowledge, fi lters out inconsistencies and uses it to train MC using a neuro-fuzzy inference system.

The expert determines the value of t n such that the pixels binarized correspond to the object of interest in the image. It is highly dependent on the application and on the image. That is why it is performed manually, see Section 5.6 .

Fig. 6 shows a simpli fi ed scheme of the learning stage. Two steps are applied to each training image : the multi-mode decomposition and the training data extraction. One input  X  output pair is extracted from each mode analyzed in each training image. The input pair generated for mode  X  i is  X f features g  X  f features g  X 
Section 2.3 , class  X  i is the class assigned to mode  X  i object and class  X  i  X  0 for background) and W  X  i is a measurement of the strength of the input  X  output pair, see Section 3.2 . The training data set, TDS , containing all the input  X  output pairs from all the training images, is used as the data set for the training of MC .
Training data set extraction in Algorithm 2 is applied for each training image. S is used along the iterations as the set of the modes that have been currently assigned as object. It performs a bright-to-dark mode analysis  X  one mode at each iteration starting with  X  2 since  X  1 is assumed object, i.e. S is initialized as
S  X f  X  1 g . At each iteration the following is carried out: computa-tion of f features g  X  assignment of mode  X  i and; generation of the corresponding the iterations continue. Similarly to the scheme in Algorithm 1 , assuming a bi-level problem, if  X  i is assigned as background, the remaining modes are assigned as background and the iterations end. Mode class assignment, at step 3 of the algorithm, is key in Algorithm 2. Training data extraction algorithm for each training image.

Require f  X  j g 1: S  X f  X  1 g ; i  X  2 2: compute f features g  X  3: mode  X  i class assignment as in Section 3.1 4: if (  X  i is assigned as object) then 5: add ( f features g  X  6: i  X  i  X  1 7: Goto Step 2 8: else 9: add ( f features g  X  10: assign remaining modes ( 8  X  j : j 4 i ) as background 11: compute f features g  X  12: add ( f features g  X  13: end if 14: return TDS 3.1. Mode class assignment
When the expert selects t n as a suitable threshold for image im n , he implicitly provides information useful for mode assign-ment. The operation is as follows. We focus on the iteration of Algorithm 2 in which  X  i is analyzed. At that iteration, modes brighter than  X  i have already been assigned as object: S  X f  X  j : j  X  1 ; ... ; i 1 g . Mode assignment of  X  i is carried out analyzing both alternatives  X   X  i is assigned as background  X  i is assigned as object  X  and selecting that with the lowest error. the iterations end and the remaining modes are also assigned as background. Thus, S is left unchanged and, using (5) the error index, assuming that t n is the desired threshold, is as follows: error  X  t n  X  b  X   X   X  t n 1 where O b  X  z  X  and B b  X  z  X  are O  X  z  X  X   X  B  X  z  X  X   X  this iteration is computed as follows: error  X  t n  X  o  X   X   X  t n 1 where O o  X  z  X  and B o  X  z  X  are updated:
O  X  z  X  X   X 
B  X  z  X  X   X  i is assigned as object if error  X  t n  X  b Z error  X  t n  X  ground, otherwise. Using (10) and (13) this mode assignment criterion can be rewritten as
OA  X 
OA  X  i is the gain of assigning  X  i as object w.r.t. assigning it as background. Mode assignment can be determined ef fi ciently using (16) . Notice that the multi-mode decomposition was applied to all training images at the beginning of the learning stage.
In Fig. 7 mode class assignment is applied to an image which histogram has three modes.  X  is taken as  X   X  0 : 35. At iteration 1, the assignment of  X  2 is analyzed. The grey area in Fig. 7 -center is 0 : 73  X  4 0. At iteration 2,  X  3 is analyzed. The grey area in
Fig. 7 -right is  X  NL 1 z  X  t since OA  X  3  X  0 : 05  X  o 0. 3.2. Training pair weight
Each mode  X  i analyzed in training data extraction generates a training data pair  X f features gg  X  training pairs have the same relevance for the training of MC . This method estimates the weight of a training pair as W  X  i  X  terms of classi fi cation error  X  in case that the trained MC makes a mistake classifying  X  i . If a mode generates a training pair with low
W  X  the trained MC misclassi fi es the mode, a low error is originated. On the contrary, if a mode generates a training pair with high W  X  misclassi fi cation of that mode would originate high error. Using ward computation. W  X  i is used to weight each data pair in MC training. 3.3. Training of MC
Inthepreviousstepsthetrainingsets f i m g and f t g have been distilled to obtain the training data set TDS that contains the desired input  X  output operation for MC .Next, TDS is used to train MC . conditions. In the general case it is possible to fi nd repeated pairs those with similar f features g  X  contradictory pairs  X  those with similar f features g  X  one overall representation DS  X f features g X  . For each training pair a
Gaussian function centered at f features g  X 
DS  X f features g X  . The amplitude of each Gaussian is equal to W  X  and its sign is positive if class  X  i  X  1 and negative if class  X 
DS  X f features g X  is a surface in an space with n dimensions, being n the size of f features g .
 techniques and has been used in methods such as Phillips et al. (2002) . In our problem it preserves pair weights and has smoothing properties: repeated pairs sum their contribution in DS  X f features g X  while contradictory pairs weaken their value. Also, it has good interpolation properties, which are interesting if training pairs have sparse or non-uniform distribution in the feature space. number of learning tools could be applied. Only some are to be cited. Neural networks have well-known universal approximation properties but they do not provide explicit representation of the trained system: once trained it is dif fi cult to manually re behavior. Fuzzy systems provide explicit representation using IF-THEN rules. The presented method adopts an Adaptive Neuro
Fuzzy Inference System (ANFIS) method ( Jang, 1993 ). ANFIS is a universal approximator that essentially uses a neural network to train a Takagi  X  Sugeno fuzzy inference system. ANFIS succeeds in capturing the training capability of neural networks together with the explicit representation of fuzzy systems.

MC to approximate DS  X f features g X  . First, it is necessary to con parameters such as the type and nu mber of membership functions for each fuzzy variable. ANFIS iterates applying a combination of least-squares and the backpropagation gradient descent method for training membership function parameters and fuzzy rules in order to emulate DS  X f features g X  . In our problem ANFIS converges when the Mean Square
Error ( MSE ) is below a certain value. 3.4. Customization of  X  establishes a trade-off between FNE ( t ) and FPE ( t ). In some pro-blems the selection of  X  can be done manually but it can be very dif fi cult in complex cases. Our method includes the computation of the optimal  X  customized to training sets f im g and f t g . .
 object and background for im n after applying the training data extraction in Algorithm 2 . Using (5) the error for im n using a threshold value t is error n  X  t  X  X   X   X  t n 1
Recall from Section 2.2 that error n ( t ) has an unique local minimum which position depends on  X  . The value of  X  can be considered customized to im n when the minimum of error n located at the desired threshold t n . This occurs when  X   X  error n  X  t  X  =  X  t j t  X  t n  X  0, i.e.:
O n  X  t n  X  X  1
If we extend the above for the entire training sets, the customized  X  should satisfy  X  n  X  error n  X  t  X  =  X  t j t  X  t determined problem can be solved using least squares. Taking e  X   X  error n  X  t  X  =  X  t j t  X  t n , (18) can be rewritten as follows:
B  X  t n  X  X   X   X  O n  X  t n  X  X  B n  X  t n  X  X  X  e n  X  19  X  The optimal  X  can be computed as the value that minimizes
J  X   X  n e 2 n . Applying least squares it is simple to obtain
The resulting  X  opt is customized to the given training sets f im g and f t g . Notice that although (20) is a closed expression, it is coupled with the computation of O n ( z ) and B n ( z ), which requires having applied mode assignment, which, recalling Section 3.1 , needs having determined  X  opt .

The solution adopted is to iterat e between mode assignment and computation of  X  opt starting with an arbitrary initial  X  assignment in Section 3.1 is executed to obtain O n ( z )and B thedifferencein  X  opt computed in two consecutive iterations is below a value. The problem is monotonic and has a unique solution: convergence and good convergence rate are ensured. In the experi-ments carried out it converged in not more than three or four iterations depending on the suitability of the initial  X  opt results and further discussions can be found in Section 5 . 4. Multi-level thresholding The proposed method is based on characterizing object modes.
In a bi-level problem we assume that the brightest mode is object and the rest are identi fi ed evaluating similarity using a trained classi fi er. The approach can be easily extended to other problems. 4.1. Dark object thresholding in bi-level problems
We extend the proposed approach to bi-level problems in which the objects of interest correspond to the darkest modes in the image. Now the pixels below the threshold are considered object and those above are background. The adapted de fi nitions The new de fi nitions affect error  X  t  X  o and error  X  t  X  also OA  X  i , which becomes
OA  X 
The learning and application stages should apply a dark-to-bright mode analysis, instead of bright-to-dark. Algorithms 1 and 2 remain unaltered if we simply reverse the order of the modes, i.e. take the darkest mode. The rest of the learning and application stages, including the mode classi fi cation features in Section 2.3 and the customization of  X  in Section 3.4 remain unaltered. 4.2. Multi-level threshold simplicity and without loss of generality consider a problem in which imageshavethreeclassesofmodes,themodesofthesameclassare assumed contiguous in the histogram. Class 1 modes are the brightest while class 3 modes are the darkest. Threshold T H separates class 1and class 2modesand T L separates class 2and class 3modes. one after the other. In the application stage the bright-to-dark iterative analysis shown in Algorithm 3 is carried out. The bright-est mode  X  1 is assumed to be class 1. First, it identi fi modes using a previously trained mode classi fi er ( MC 1). The iterations continue as long as the mode analyzed is classi class 1. When MC 1 classi fi es one mode as class 2, it is considered that all class 1 modes have already been identi fi ed and the remaining modes are class 2or class 3. Classifying the remaining modes between class 2or class 3 is a bi-level problem: they can be easily distinguished using MC 2.
 Algorithm 3. Mode classi fi cation with three classes. using  X  L . Fig. 8 sketches a simple example.

The extension of the learning stage to multi-level thresholding is also simple. The expert selects one suitable low and high thresholds for each training image: there are two training thresh-olds sets f t L g and f t H g . f t L g is used to extract input pairs  X f features g  X  used for the training of MC 1, as described in Section 3.3 . Similarly, f t g is used to expert pairs in the training data set TDS 2 for the training of MC 2. MC 1 and MC 2 are trained with the neuro-fuzzy inference system as described in Section 3.3 . Threshold computa-tion weights  X  H and  X  L are computed as in Section 3.4 .
The proposed method can be extended to cases with any number of mode classes ( NC )  X  not only 3. Problems with NC classes require training NC -1 mode classi fi ers and NC -1 threshold computation weight factors.

The multi-level method as described above follows a bright-to-dark mode analysis scheme. Similarly, the method could be applied using a dark-to-bright analysis. The selection between one and the other depends on practical considerations. Dark-to-bright is preferred in cases where dark modes are easier to characterize than bright modes, as in the example in Section 5 . 5. Experiments
The proposed method has been employed in several vision problems. This section describes its use for the segmentation of olives in different state of maturity in an industrial quality control application. In this problem modes belong to three classes: ripe olives ( class 1), which are the darkest modes; under ripe olives apply the bi-level thresholding method described in Section 4.1 to segment ripe dark olives. Second, we apply the multi-level thresh-olding method to segment under ripe olives. Section 5.4 presents the sensitivity analysis of the trained method. Section 5.5 shows the performance of the method one application in hard conditions, i.e. with highlighting inhomogeneities and highly irregular back-ground. Finally, Section 5.6 provides details of its implementation in a software tool. 5.1. Bi-level threshold
Fig. 9 -left shows some of the 50 trainings images representative of the different conditions that can be found in the application.
Training images have different global and local lighting condi-tions and the objects of interest have different shapes, as can be noticed in their histograms. The location, width and shape of the histogram component of the two types of objects and of the background are signi fi cantly different. Suitable training thresholds for binarizing ripe dark olives were selected by an expert to ful the application requirements. Their training thresholds are shown in the fi rst row of Table 1 .

Fig. 9 -center shows the histogram of each image and its training histogram is decomposed in a different number of modes, see Fig. 10 . In each image the training threshold selected by the expert is located at the valley between  X  2 and  X  3 . Thus, in these training images the expert implicitly classi fi es mode  X  1 and  X  2 and the rest as background.

The next step is to select suitable mode features. Mode size was discarded since objects of interest have different sizes. In a preliminary test we computed D M  X   X  i ; O  X  ,  X  2 IC  X   X  for each mode in the training images. Tables 2 and 3 show their values for the images in Fig. 9 -b and -d. It can be noticed that using D  X   X  i ; O  X  it is easy to differentiate between object and background modes, for instance with the following simple MC :
MC  X 
Of course, designing MC is not that simple when dealing with large training data sets. Below the mechanism described in Section 3.3 is used. is computed as described in Section 3.4 . First, we assume  X  0 : 5 and apply the mode object/background assignment in are used to compute (20) . The result of the fi rst iteration is  X  0 : 6937. Distant from the initial value, a new iteration was executed. In the second iteration, mode class assignment was performed. The results were used in (20) . The result was  X  0 : 694. The algorithm converged in two iterations.

To evaluate the convergence rate we repeated the experiment taking initial  X  in the range [0.01  X  0.99]. Fig. 11 shows the number of iterations required for convergence, which were below four when selecting the initial  X  in the range [0.18, 0.95]. Similar results were found in all the problems testbed.

Fig. 12 -top-left shows the mode feature space resulting from the training images: crosses represent features of object modes and, circles, background modes. Although in this application both classes are linearly separable, they cannot be classi fi ed using only one of these features: a traditional thresholding method based on only one of these features would fail. The combination of several criteria under a training approach is a strength of the proposed method. The fi nal steps are to generate DS  X f features g X  integrating Fig. 12 -bottom shows DS  X f features g X  . Positive values in shows the evolution of the fi tting MSE along the iterations of ANFIS. After iteration 30, MC is considered trained.

The trained MC is now ready for validation. First, the perfor-mance of the trained method is evaluated using the training images. The resulting thresholds, in Table 5 , are very similar to the training thresholds provided by the expert. Next, it is applied to validation images and the results are evaluated by the expert.
The validation of the full method can be found in Section 5.3 . 5.2. Multi-level threshold
Now the objective is to segment under ripe olives ( class 2), which originate modes located between the ripe olive modes ( class 1) and the background ( class 3). In this example the same set of training images and the binarized images using these thresholds.

In this example class 1 and class 2 modes are contiguous and the mode classi fi er MC trained in Section 5.1 keeps being valid: it will be taken as MC 1 in the multi-level problem. However, the lower threshold values f t L g selected by the expert are different to the values he selected for the ripe olives in Section 5.1 . Thus, computed in Section 5.1 for ripe olives is not valid and a new tailored to the multi-level problem should be computed. The resulting value is  X  L opt  X  0 : 978. The description is avoided for brevity. Similarly, MC 2 is trained to differentiate between modes from class 2 and class 3.  X  H opt is also determined as  X  following Algorithm 3 . The resulting threshold values computed by the trained method for the images in Fig. 9 -left are very similar to the training thresholds selected by the expert, see Table 4 . The mean percentage of misclassi fi ed pixels w.r.t. images binarized by the threshold given by the expert was 0.18%. The validation of the method is in the next section. 5.3. Validation validation images, different from those in the training set. Fig. 14 illustrates their performance with three images with different lighting conditions and object sizes: (a) original images (top), histogram and resulting thresholds computed by the trained method (center) and multi-level binarized images (bottom). shows the percentage of the pixels that were binarized differently by the expert and by the trained method in each validation image. Mean on the object contours were misclassi fi ed. The expert was also asked to evaluate whether the image was correctly segmented or not. He considered that 94.4% of the validation images were binarized satisfactorily by the proposed trained method.
 the expert ( x axis) versus the thresholds computed by the trained method ( y axis) for the 400 validation images. The matching level is high showing the accuracy and robustness of the proposed method. Similar results were obtained for T H . This matching is particularly accurate in the range [30, 50] whereas there are some few outliers out of this range. This is attributed to the fact that the training has been more detailed in this range since a higher number of images with  X  average  X  conditions were used for training.
In this application these results are satisfactory but if a problem requires higher accuracy in these ranges more images with these conditions should be added to the training set.

Finally,theperformanceoftheproposedmethodiscomparedwith well-known global and local thresholding methods. Otsu (1979) ,
Iterative Selection Thresholding Method (ISTM for brevity) ( Ridler and Calvard, 1978 )and Shanbhag (1994) are between the global thresholding techniques most widely applied in real-world applica-tions. Bernsen (2008) and Sauvola and Pietikinen (2000) are very well-known and used local thresholding methods. These methods were executed using Auto _ Threshold and Auto _ Local _ Threshold software tools. 1 Fig. 16 shows the binarized images resulting from applying
Otsu (a), ITSM (b), Shanhbag (c), Bersen (d) and Sauvola (e) to the validation images as shown in Fig. 14 .
 It is observed that Otsu provides threshold values near T to correctly segment Fig. 16 -a-left and cannot be used to obtain T exhibiting unsuitable sensitivity to changes in lightning conditions.
The results of the rest of the global and local thresholding techniques with the more than 25 different thresholding methods tested. The conclusion of this comparison is as expected: the proposed method is trained speci fi cally for the application while the others use general thresholding criteria.
 5.4. Sensitivity analysis robustness of the proposed method.

In the application stage modes are classi fi ed using the mode classi fi er. Then, they are used to compute the threshold using
As seen in (20) ,  X  opt averages the global performance with all the images in the training set. Thus, the computation of  X  opt threshold has good robustness to random errors in the training images.
 using the minimum error index criterion in (5) and considering the desired threshold value t n . The mode classi fi er averages training pairs extracted from all the images considering their weight in order to minimize the error index in the set of train-ing images. The mode classi fi er captures the average desired performance expressed in the training images and their desired thresholds. Statistically speaking, the more training images used, the more accurate the performance of the mode classi fi er. Mode misclassi fi cation can be originated by two main issues.
The fi rst one is the unavoidable and random small potential contradictions between training pairs that have been extracted from different images. If the mode features used have suitable mode characterization capacity, these errors rarely have impact on thresholding performance. High number of contradictory pairs during the training of the classi fi er is usually originated because 10 20 30 40 50 60 70 Pixel error (%) 10 15 20 25 Pixel error (%) mode features do not characterize well the modes. Speci fi identify these cases were developed in the software implementa-tion of the method, see Section 5.6 .

The second factor that originates mode misclassi fi cation is errors or lacks in the training of the MC . As in any other training-based method, the input data used for training is critical in its performance. The main factors that can disturb the training of the MC are (1) the use of features with unsuitable mode characterization capacity for that application, (2) the use of insuf fi cient or badly chosen training images and (3) errors in the desired threshold selected by the expert. Their impact is analyzed below. 5.4.1. Sensitivity to the mode features
The selection of suitable featur es for a given application is very important in our method. If the features used cannot characterize some modes, these modes will not be classi fi ed well by the MC .Asan illustration, Fig. 17 shows the percentage of the pixels classi differently by the trained method and by the expert in case the MC was trained with features f D M  X   X  i ; O  X  ;  X  2 IC  X   X  i the fi rst case, D B  X   X  i ; O  X  has low in fl uenceonmodecharacterization (see Fig. 12 -top-left).Thus,notusingitdoesnotimpactmuchonthe mode characterization: without it the MC losses its mode classifying originating error rates 74 times higher than in the fi rst case. and corrected during the training stage. The developed imple-mentation, see Section 5.6 , includes tools for that. 5.4.2. Sensitivity to lack in training images tions where the application will operate. Conditions not consid-ered in the training images will originate zones in DS  X f features g X  with values close to zero: the MC does not have information to classify a mode which features lie on these zones.
 the percentage of the pixels classi fi ed differently by the trained method and by the expert in the case that the MC was trained using 70% of the training images ( Fig. 18 -left) and using only 40% of the training images ( Fig. 18 -right). In the fi rst case only few modes were misclassi fi ed which originated high errors but only on a few images. In the second case, the MC does not have enough information and fails to classify a high number of modes originat-ing high in many training images.

The lower the richness in the variety of different conditions in the images are selected to statistical ly represent the conditions where the application should operate. A g ood analysis of the application is necessary to select the training images. 5.4.3. Sensitivity to errors in selection training thresholds
The selection of the desired thresholds is carried out by the expert and thus it is subject to human subjectivity and errors.
Errors in t n affect mode object/background assignation and hence training pair extraction. They also affect the computation of but it has low impact since the computation of  X  opt averages the global performance with all the images in the training set.
Assuming threshold errors with zero mean, errors in the different training images compensate in the computation of  X  opt involving low practical impact.

On the other hand, the in fl uence on the training pair extraction highly depends on the magnitude of the errors in the training thresholds. Low magnitude errors have low impact on object/ background mode assignation and thus, on the performance of the trained method. On the contrary high magnitude errors will originate object/background mode mis-assignation. The MC is then trained to fi t erroneous input data, which has high potential impact on the system performance.

Fig. 19 shows the result of a Monte Carlo analysis where three levels of random Gaussian zero-mean noise (low  X  2  X  1, medium 2  X  2 and high  X  2  X  6) were added to the training thresholds. The percentage of the pixels classi fi ed differently by the trained method and by the expert is shown for each case. As expected, the sensitivity to the threshold errors highly depends on the magnitude of the error. Whereas for low error levels the impact can be considered almost negligible, with high error levels the trained method becomes unsuitable for the application. thresholds and performing validation tests of the trained MC . 5.5. Applications in hard conditions fi sh gills. The images were taken in fi sh farm sea cages in the open sea ( Martinez-de Dios et al., 2003 ). The images have large lighting irregularities and multicolored image background, high levels of clutter and contain some objects out of focus. The objects, are the lowest modes in the images. Fig. 20 shows three training images taken with different conditions and the resulting images binarized with the values selected by the expert, shown in Table 5 . images in Fig. 20 (a,b). Fig. 21 -right shows the multi-mode decom-position of each image. The objects of interest correspond to the low-intensity modes in the histograms.
 used. The training was performed and the validation was done with 350 images. Fig. 22 shows the percentage of the pixels that were segmented differently by the training method and by the expert. A mean of 0.47% of the pixels were misclassi fi ed, almost the double that in the olive application. However, this result can be considered satisfactory taken into account the dif fi culties in the images and scenario.
 analyzed. The results of the proposed method ( Fig. 23 -b) are suitable for the application: it is possible to detect fi the images. The performance of Otsu, ITSM, Shanhbag, Bersen and
Sauvola were evaluated and considered highly unsatisfactory. As an illustration Fig. 23 -c shows the resulting binarized images with
Otsu and, Fig. 23 -d, with Bernsen. The proposed method adapts to different conditions and applications while traditional methods cannot. 5.6. Implementation
Different user support tools for the training and application stages of the proposed method have been implemented. The learning stage tool includes a Graphical User Interface (GUI) for helping the expert training threshold selection. The e xpert user visualizes the original image and the image binarized with the selected threshold so that he caneasilymodifythethresholdval ue and select the most suitable for each image. The tool receives as input the directory where the images are stored and generates as output a fi le with a list that relates image names and threshold values. This fi le is used by an automatic functions that extracts training data sets.

The GUI also includes a library of different mode features, which can be applied to the training images in order to evaluate their performance and help in mode feature selection. It imple-ments functions for extracting training data sets and training of
MC using the MATLAB ANFIS function. Once the method has been trained, the resulting MC and  X  can be saved in fi les to facilitate export and management. The tool also includes functions for validating and evaluating trained method loaded from fi les.
Also, a module that implements the application stage using the trainedmethodloadedfroma fi le has been developed. For higher portability it was implemented in C/C  X  X  and encapsulated in a library. The efforts to reduce the co mputational burden were mainly time problems. In the problem described in Section 5 the application stage took a mean of 2.8 s to process a set of 400 images on an Intel
CORE i5 processor at 2.8 GHz, which is suf fi cient for most applica-tions. Similar timings were obtained in other applications.
The proposed method has been applied to several problems in partially structured environments including document analysis, heat losses detection and forest fi re monitoring ( Martinez-de Dios et al., 2008 ), among others, see Fig. 24 . In all of them it showed similar adaptability and robustness. 6. Conclusions
Selecting suitable threshold values is an easy task for a human but dif fi cult for a machine. The objecti ve of our method is to capture from humans thresholding knowledge for a given application and imitate their performance adoptin g a training-based approach. Of course, global thresholding is not suitable for images with local irregularities and non-homogenei ties. However, it is one of the most applied segmentation methods in a everyday applications and existing techniques have unsolved problems such as customizability and robustness.

In the proposed method customization is obtained by a training-based histogram mode ob ject/background classi fi er and a tunable minimum error criterion. Both are c ustomized in the learning stage using a set of training images and their thresholds selected by an expert to ful fi ll the problem requirements. In a nutshell, during the between modes  X  combining different metrics and criteria  X  used to classify modes. In the applic ation stage, the histogram modes resulting from multi-mode decomposition are classi fi ed with the trained classi fi erandthethresholdiscomputedusingtheminimum error criterion.

The major strengths of the presented method are its capability to be customized to a given problem and its robustness to the conditions learnt in the training. Also, the method requires no settings since all the parameters are determined in the learning stage and it is suitable for bi-level and multi-level thresholding. The method requires training images to learn how histogram modes represent the objects in different conditions. Thus, it cannot be applied in problems where training images are not available. The method has been applied in a number of different applications and showed to be particularly useful in problems in partially unstructured environments, which is the case of most computer vision problems in industrial applications.

As in all training-based techniques its performance is highly dependent on the learning stage. Errors when assigning thresholds to the training images are transmit ted into method. The selection of the training images is also important. Our suggestion is to analyze the problem and select training images in the whole range of conditions, taking a higher number of training images with the most frequent conditions. In the paper we propose some mode classi tion features that worked very well in the problems analyzed. Other featurescouldbeusedtoconsiderparticularitiesoftheproblem.
The proposed method could be extended to color images by employing color 3D histograms of the image and operating with 3D Gaussian modes. The extension to color images and the reduction in computer burden to allow its real-time application are object of current development.
 References
