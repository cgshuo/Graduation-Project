 Scrambling constructions, as found in German and other SOV languages (Becker et al., 1991; Ram-bow, 1994a; Lichte, 2007), cause notorious diffi-culties to linguistic modeling in classical grammar formalisms like HPSG or TAG. A well-known il-lustration of this situation is given in the following two German sentences for  X  X hat Peter has repaired the fridge today X  (Lichte, 2007), with a flexible word order between the two com-plements of repariert , namely between the nomi-native Peter and the accusative den K  X  uhlschrank .
Rambow (1994b) introduced a formalism, un-ordered vector grammars with dominance links (UVG-dls), for modeling such phenomena. These grammars are defined by vectors of context-free productions along with dominance links that Figure 1: A vector of productions for the verb repariert together with its two complements. should be enforced during derivations; for in-stance, Figure 1 shows how a flexible order be-tween the complements of repariert could be ex-pressed in an UVG-dl. Similar dominance mecha-nisms have been employed in various tree descrip-tion formalisms (Rambow et al., 1995; Rambow et al., 2001; Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010) and TAG ex-tensions (Becker et al., 1991; Rambow, 1994a).
However, the prime motivation for this survey is another grammatical formalism defined in the same article: multiset-valued linear indexed gram-mars (Rambow, 1994b, MLIGs), which can be seen as a low-level variant of UVG-dls that uses multisets to emulate unfulfilled dominance links in partial derivations. It is a natural extension of Petri nets, with broader scope than just UVG-dls; indeed, it has been independently rediscovered by de Groote et al. (2004) in the context of linear logic, and by Verma and Goubault-Larrecq (2005) in that of equational theories. Moreover, the decid-ability of its emptiness problem has proved to be quite challenging and is still uncertain, with sev-eral open questions depending on its resolution:  X  provability in multiplicative exponential lin- X  emptiness and membership of abstract cat- X  emptiness and membership of Stabler  X  satisfiability of first-order logic on data  X  emptiness and membership for the various
Unsurprisingly in the light of their importance in different fields, several authors have started in-vestigating the complexity of decisions problems for MLIGs (Demri et al., 2009; Lazi  X  c, 2010). We survey the current state of affairs, with a particular emphasis on two points: 1. the applicability of complexity results to 2. the effects of two linguistically motivated re-The latter notion is imported from Petri nets, and turns out to offer interesting new complex-ity trade-offs, as we prove that k -boundedness and k -rankedness are E XP T IME -complete for MLIGs, and that the emptiness and membership problems are E XP T IME -complete for k -bounded MLIGs but PT IME -complete in the k -ranked case. This also implies an E XP T IME lower bound for emptiness and membership in minimalist grammars with shortest move constraint.

We first define MLIGs formally in Section 2 and review related formalisms in Section 3. We pro-ceed with complexity results in Section 4 before concluding in Section 5.
 Notations In the following,  X  denotes a finite al-phabet,  X   X  the set of finite sentences over  X  , and  X  the empty string. The length of a string w is noted | w | , and the number of occurrence of a symbol a in w is noted | w | a . A language is formalized as a subset of  X   X  . Let N n denote the set of vectors of positive integers of dimension n . The i -th compo-nent of a vector x in N n is x ( i ) , 0 denotes the null vector, 1 the vector with 1 values, and e i the vec-tor with 1 as its i -th component and 0 everywhere else. The ordering  X  on N n is the componentwise ordering: x  X  y iff x ( i )  X  y ( i ) for all 0 &lt; i  X  n . The size of a vector refers to the size of its binary encoding: | x | = P n i =1 1 + max(0 , b log 2 x ( i ) c ) .
We refer the reader unfamiliar with complex-ity classes and notions such as hardness or L OG S PACE reductions to classical textbooks (e.g. Papadimitriou, 1994). Definition 1 (Rambow, 1994b) . An n -dimensional multiset-valued linear indexed gram-mar (MLIG) is a tuple G =  X  N,  X  ,P, ( S, x 0 )  X  where N is a finite set of nonterminal symbols,  X  a finite alphabet disjoint from N , V = ( N  X  N n ) ]  X  the vocabulary, P a finite set of productions in ( N  X  N n )  X  V  X  , and ( S, x 0 )  X  N  X  N n the start symbol. Productions are more easily written as ( A, x )  X  u 0 ( B 1 , x 1 ) u 1  X  X  X  u m ( B m , x m ) u m +1 with each u i in  X   X  and each ( B i , x i ) in N  X  N n .
The derivation relation  X  over sequences in V  X  is defined by  X  ( A, y )  X  0  X   X u 0 ( B 1 , y 1 ) u 1  X  X  X  u m ( B m , y if  X  and  X  0 are in V  X  , a production of form ( ? ) ap-pears in P , x  X  y , for each 1  X  i  X  m , x i  X  y i , and y  X  x = P m i =1 y i  X  x i .

The language of a MLIG is the set of terminal strings derived from ( S, x 0 ) , i.e.
 and we denote by L (MLIG) the class of MLIG languages.
 Example 2. To illustrate this definition, and its relevance for free word order languages, consider the 3-dimensional MLIG with productions and start symbol ( S, 0 ) . It generates the MIX lan-guage of all sentences with the same number of a , b , and c  X  X  (see Figure 2 for an example derivation): L mix = { w  X  X  a,b,c }  X  || w | a = | w | b = | w | c } .
The size |G| of a MLIG G is essentially the sum of the sizes of each of its productions of form ( ? ): | x 0 | + 2.1 Normal Forms A MLIG is in extended two form (ETF) if all its productions are of form terminal ( A, 0 )  X  a or ( A, 0 )  X   X  , or Figure 2: A derivation for bcaabc in the grammar of Example 2. nonterminal ( A, x )  X  ( B 1 , x 1 )( B 2 , x 2 ) or with a in  X  , A , B 1 , B 2 in N , and x , x 1 , x 2 in N Using standard constructions, any MLIG can be put into ETF in linear time or logarithmic space.
A MLIG is in restricted index normal form (RINF) if the productions in P are of form ( A, 0 )  X   X  , ( A, 0 )  X  ( B, e i ) , or ( A, e i )  X  ( B, 0 ) , with A , B in N , 0 &lt; i  X  n , and  X  in ( X   X  ( N  X { 0 } ))  X  . The direct translation into RINF proposed by Rambow (1994a) is exponential if we consider a binary encoding of vectors, but using techniques developed for Petri nets (Dufourd and Finkel, 1999), this blowup can be avoided: Proposition 3. For any MLIG, one can construct an equivalent MLIG in RINF in logarithmic space. 2.2 Restrictions Two restrictions on dominance links have been suggested in an attempt to reduce their complex-ity, sometimes in conjunction: lexicalization and k -boundedness. We provide here characterizations for them in terms of MLIGs. We can combine the two restrictions, thus defining the class of k -bounded lexicalized MLIGs.
 Lexicalization Lexicalization in UVG-dls re-flects the strong dependence between syntactic constructions (vectors of productions representing an extended domain of locality) and lexical an-chors. We define here a restriction of MLIGs with similar complexity properties: Definition 4. A terminal derivation  X   X  p w with w in  X   X  is c -lexicalized for some c &gt; 0 if p  X  c  X | w | . 1 A MLIG is lexicalized if there exists c such that any terminal derivation starting from ( S, x 0 ) is c -lexicalized, and we denote by L (MLIG ` ) the set of lexicalized MLIG languages.

Looking at the grammar of Example 2, any ter-minal derivation ( S, 0 )  X  p w verifies p = 4  X | w | 3 + 1 , and the grammar is thus lexicalized.
 Boundedness As dominance links model long-distance dependencies, bounding the number of simultaneously pending links can be motivated on competence/performance grounds (Joshi et al., 2000; Kallmeyer and Parmentier, 2008), and on complexity/expressiveness grounds (S X gaard et al., 2007; Kallmeyer and Parmentier, 2008; Chi-ang and Scheffler, 2008). The shortest move con-straint (SMC) introduced by Stabler (1997) to en-force a strong form of minimality also falls into this category of restrictions.
 Definition 5. A MLIG derivation  X  0  X   X  1  X   X  X  X  X   X  p is of rank k for some k  X  0 if, no vector with a sum of components larger than k can appear in any  X  j , i.e. for all x in N n such that there exist 0  X  j  X  p ,  X  ,  X  0 in V  X  and A in N with  X  j =  X  ( A, x )  X  0 , one has P n i =1 x ( i )  X  k .
A MLIG is k -ranked (noted k r-MLIG) if any derivation starting with  X  0 = ( S, x 0 ) is of rank k . It is ranked if there exists k such that it is k -ranked.
A 0 -ranked MLIG is simply a context-free grammar (CFG), and we have more generally the following: Lemma 6. Any n -dimensional k -ranked MLIG G can be transformed into an equivalent CFG G 0 in time O ( |G| X  ( n + 1) k 3 ) .
 Proof. We assume G to be in ETF, at the expense of a linear time factor. Each A in N is then mapped to at most ( n + 1) k nonterminals ( A, y ) in N 0 = N  X  N n with P n i =1 y ( i )  X  k . Finally, for each production ( A, x )  X  ( B 1 , x 1 )( B 2 , x 2 ) of P , at most ( n + 1) k 3 choices are possible for pro-ductions ( A, y )  X  ( B 1 , y 1 )( B 2 , y 2 ) with ( A, y ) , ( B 1 , y 1 ) , and ( B 2 , y 2 ) in N 0 .

A definition quite similar to k -rankedness can be found in the Petri net literature: Definition 7. A MLIG derivation  X  0  X   X  1  X   X  X  X   X   X  p is k -bounded for some k  X  0 if, no vector with a coordinate larger than k can appear in any  X  j , i.e. for all x in N n such that there exist 0  X  j  X  p ,  X  ,  X  0 in V  X  and A in N with  X  j =  X  ( A, x )  X  0 , and for all 1  X  i  X  n , one has x ( i )  X  k .
A MLIG is k -bounded (noted k b-MLIG) if any derivation starting with  X  0 = ( S, x 0 ) is k -bounded. It is bounded if there exists k such that it is k -bounded.
 The SMC in minimalist grammars translates ex-actly into 1-boundedness of the corresponding MLIGs (Salvati, 2010).

Clearly, any k -ranked MLIG is also k -bounded, and conversely any n -dimensional k -bounded MLIG is ( kn ) -ranked, thus a MLIG is ranked iff it is bounded. The counterpart to Lemma 6 is: Lemma 8. Any n -dimensional k -bounded MLIG G can be transformed into an equivalent CFG G 0 in time O ( |G| X  ( k + 1) n 2 ) .
 Proof. We assume G to be in ETF, at the expense of a linear time factor. Each A in N is then mapped to at most ( k + 1) n nonterminals ( A, y ) in N 0 = N  X { 0 ,...,k } n . Finally, for each produc-tion ( A, x )  X  ( B 1 , x 1 )( B 2 , x 2 ) of P , each non-terminal ( A, y ) of N 0 with x  X  y , and each index 0 &lt; i  X  n , there are at most k + 1 ways to split ( y ( i )  X  x ( i ))  X  k into y 1 ( i ) + y 2 ( i ) and span a production ( A, y )  X  ( B 1 , x 1 + y 1 )( B 2 , x 2 + y 2 of P 0 . Overall, each production is mapped to at most ( k + 1) n 2 context-free productions.
 One can check that the grammar of Example 2 is not bounded (to see this, repeatedly apply produc-tion ( S, 0 )  X  ( S, 1 ) ), as expected since MIX is not a context-free language. 2.3 Language Properties Let us mention a few more results pertaining to MLIG languages: Proposition 9 (Rambow, 1994b) . L (MLIG) is a substitution closed full abstract family of lan-guages.
 Proposition 10 (Rambow, 1994b) . L (MLIG ` ) is a subset of the context-sensitive languages.
Natural languages are known for displaying some limited cross-serial dependencies, as wit-nessed in linguistic analyses, e.g. of Swiss-German (Shieber, 1985), Dutch (Kroch and San-torini, 1991), or Tagalog (Maclachlan and Ram-bow, 2002). This includes the copy language which does not seem to be generated by any MLIG: Conjecture 11 (Rambow, 1994b) . L copy is not in L (MLIG) .

Finally, we obtain the following result as a con-sequence of Lemmas 6 and 8: Corollary 12. L ( k r -MLIG) = L ( k b -MLIG) = L ( k b -MLIG ` ) is the set of context-free languages. We review formalisms connected to MLIGs, start-ing in Section 3.1 with Petri nets and two of their extensions, which turn out to be exactly equiva-lent to MLIGs. We then consider various linguis-tic formalisms that employ dominance links (Sec-tion 3.2). 3.1 Petri Nets Definition 13 (Petri, 1962) . A marked Petri net 2 is a tuple N =  X  X  ,T,f, m 0  X  where S and T are disjoint finite sets of places and transitions, f a flow function from ( S  X  T )  X  ( T  X S ) to N , and m 0 an initial marking in N can be fired in a marking m in N S if f ( p,t )  X  m ( p ) for all p  X  S , and reaches a new marking m 0 defined by m 0 ( p ) = m ( p )  X  f ( p,t ) + f ( t,p ) for all p  X  S , written m [ t  X  m 0 . Another view is that place p holds m ( p ) tokens , f ( p,t ) of which are first removed when firing t , and then f ( t,p ) added back. Firings are extended to sequences  X  in T  X  by m [  X   X  m , and m [  X t  X  m 0 if there exists m 00 with m [  X   X  m 00 [ t  X  m 0 .

A labeled Petri net with reachability acceptance is endowed with a labeling homomorphism  X  : T  X   X   X   X  and a finite acceptance set F  X  N S , defining the language (Peterson, 1981) L ( N , X ,F ) = {  X  (  X  )  X   X   X  | X  m  X  F, m 0 [  X   X  m } .
Labeled Petri nets (with acceptance set { 0 } ) are notational variants of right linear MLIGs, defined as having production in ( N  X  N n )  X  ( X   X   X  ( X   X   X  ( N  X  N n ))) . This is is case of the MLIG of Example 2, which is given in Petri net form in Figure 3, where Figure 3: The labeled Petri net corresponding to the right linear MLIG of Example 2. circles depict places (representing MLIG nonter-minals and indices) with black dots for initial to-kens (representing the MLIG start symbol), boxes transitions (representing MLIG productions), and arcs the flow values. For instance, production ( S, e 3 )  X  c ( S, 0 ) is represented by the rightmost, c -labeled transition, with f ( S,t ) = f ( e 3 ,t ) = f ( t,S ) = 1 and f ( e 1 ,t ) = f ( e 2 ,t ) = f ( t,e 1 f ( t,e 2 ) = f ( t,e 3 ) = 0 .
 Extensions The subsumption of Petri nets is not innocuous, as it allows to derive lower bounds on the computational complexity of MLIGs. Among several extensions of Petri net with some branch-ing capacity (see e.g. Mayr, 1999; Haddad and Poitrenaud, 2007), two are of singular importance: It turns out that MLIGs in their full generality have since been independently rediscovered under the names vector addition tree automata (de Groote et al., 2004, VATA) and branching VASS (Verma and Goubault-Larrecq, 2005, BVASS).
 Semilinearity Another interesting consequence of the subsumption of Petri nets by MLIGs is that the former generate some non semilinear lan-guages, i.e. with a Parikh image which is not a semilinear subset of N |  X  | (Parikh, 1966). Hopcroft and Pansiot (1979, Lemma 2.8) exhibit an exam-ple of a VASS with a non semilinear reachability set, which we translate as a 2-dimensional right linear MLIG with productions 3 ( S, e 2 )  X  ( S, e 1 ) , ( S, 0 )  X  ( A, 0 ) | ( B, 0 ) , ( A, e 1 )  X  ( A, 2 e 2 ) , ( A, 0 )  X  a ( S, 0 ) , ( B, e 1 )  X  b ( B, 0 ) | b, ( B, e 2 )  X  b ( B, 0 ) | b  X   X   X  and ( S, e 2 ) as start symbol, that generates the non semilinear language Proposition 14 (Hopcroft and Pansiot, 1979) . There exist non semilinear Petri nets languages.
The non semilinearity of MLIGs entails that of all the grammatical formalisms mentioned next in Section 3.2; this answers in particular a conjecture by Kallmeyer (2001) about the semilinearity of V-TAGs. 3.2 Dominance Links UVG-dl Rambow (1994b) introduced UVG-dls as a formal model for scrambling and tree descrip-tion grammars.
 Definition 15 (Rambow, 1994b) . An unordered vector grammars with dominance links (UVG-dl) is a tuple G =  X  N,  X  ,W,S  X  where N and  X  are disjoint finite sets of nonterminals and terminals, V = N  X   X  is the vocabulary, W is a set of vec-tors of productions with dominance links, i.e. each element of W is a pair ( P,D ) where each P is a multiset of productions in N  X  V  X  and D is a re-lation from nonterminals in the right parts of pro-ductions in P to nonterminals in their left parts, and S in N is the start symbol.

A terminal derivation of w in  X   X  in an UVG-dl is a context-free derivation of form S p 1 =  X   X  1 p 2 =  X   X  p p 2  X  X  X  p p is a permutation of a member of W  X  and the dominance relations of W hold in the as-sociated derivation tree. The language L ( G ) of an UVG-dl G is the set of sentences w with some terminal derivation. We write L ( UVG-dl ) for the class of UVG-dl languages.

An alternative semantics of derivations in UVG-dls is simply their translation into MLIGs: as-sociate with each nonterminal in a derivation the multiset of productions it has to spawn. Figure 4 presents the two vectors of an UVG-dl for the MIX language of Example 2, with dashed arrows indi-cating dominance links. Observe that production S  X  S in the second vector has to spawn even-tually one occurrence of each S  X  aS , S  X  bS , and S  X  cS , which corresponds exactly to the MLIG of Example 2.
 The ease of translation from the grammar of Figure 4 into a MLIG stems from the impossi-bility of splitting any of its vectors ( P,D ) into two nonempty ones ( P 1 ,D 1 ) and ( P 2 ,D 2 ) while preserving the dominance relation, i.e. with P = P ] P 2 and D = D 1 ] D 2 . This strictness property can be enforced without loss of generality since we can always add to each vector ( P,D ) a pro-duction S  X  S with a dominance link to each production in P . This was performed on the sec-ond vector in Figure 4; remark that the grammar without this addition is an unordered vector gram-mar (Cremers and Mayer, 1974, UVG), and still generates L mix .
 Theorem 16 (Rambow, 1994b) . Every MLIG can be transformed into an equivalent UVG-dl in log-arithmic space, and conversely.
 Proof sketch. One can check that Rambow (1994b) X  X  proof of L ( MLIG )  X  L ( UVG-dl ) incurs at most a quadratic blowup from a MLIG in RINF, and invoke Proposition 3. More pre-cisely, given a MLIG in RINF, productions of form ( A, 0 )  X   X  with A in N and  X  in ( X   X  ( N  X  { 0 } ))  X  form singleton vectors, and productions of form ( A, 0 )  X  ( B, e i ) with A , B in N and 0 &lt; i  X  n need to be paired with a production of form ( C, e i )  X  ( D, 0 ) for some C and D in N in order to form a vector with a dominance link between B and C .

The converse inclusion and its complexity are immediate when considering strict UVG-dls.

The restrictions to k -ranked and k -bounded grammars find natural counterparts in strict UVG-dls by bounding the (total) number of pending dominance links in any derivation. Lexicaliza-tion has now its usual definition: for every vec-p i,j should contain at least one terminal in its right part X  X e have then L ( UVG-dl ` )  X  X  ( MLIG ` ) . More on Dominance Links Dominance links are quite common in tree description formalisms, where they were already in use in D-theory (Mar-cus et al., 1983) and in quasi-tree semantics for fb-TAGs (Vijay-Shanker, 1992). In particular, D-tree substitution grammars are essentially the same as UVG-dls (Rambow et al., 2001), and quite a few other tree description formalisms subsume them (Candito and Kahane, 1998; Kallmeyer, 2001; Guillaume and Perrier, 2010). Another class of grammars are vector TAGs (V-TAGs), which ex-tend TAGs and MCTAGs using dominance links (Becker et al., 1991; Rambow, 1994a; Champol-lion, 2007), subsuming again UVG-dls. We study in this section the complexity of sev-eral decision problems on MLIGs, prominently of emptiness and membership problems, in the general (Section 4.2), k -bounded (Section 4.3), and lexicalized cases (Section 4.4). Table 1 sums up the known complexity results. Since by The-orem 16 we can translate between MLIGs and UVG-dls in logarithmic space, the complexity re-sults on UVG-dls will be the same. 4.1 Decision Problems Let us first review some decision problems of interest. In the following, G denotes a MLIG  X  N,  X  ,P, ( S, x 0 )  X  : boundedness given  X  X  X  , is G bounded? As seen k -boundedness given  X  X  ,k  X  , k in N , is G k -coverability given  X  X  ,F  X  , G  X  -free in ETF and F reachability given  X  X  ,F  X  , G  X  -free in ETF and F non emptiness given  X  X  X  , is L ( G ) non empty? (uniform) membership given  X  X  ,w  X  , w in  X   X  ,
Boundedness and k -boundedness are needed in order to prove that a grammar is bounded, and to apply the smaller complexities of Sec-tion 4.3. Coverability is often considered for Petri nets, and allows to derive lower bounds on reachability. Emptiness is the most basic static analysis one might want to perform on a gram-mar, and is needed for parsing as intersection approaches (Lang, 1994), while membership re-duces to parsing. Note that we only consider uni-form membership, since grammars for natural lan-guages are typically considerably larger than input sentences, and their influence can hardly be ne-glected.

There are several obvious reductions between reachability, emptiness, and membership. Let  X  log denote L OG S PACE reductions between de-cision problems; we have: Proposition 17. Proof sketch. For (1), construct a reachability in-stance  X  X  0 , { ( E, 0 ) } X  from a coverability instance  X  X  ,F  X  by adding to G a fresh nonterminal E and the productions
For (2), from a reachability instance  X  X  ,F  X  , re-move all terminal productions from G and add in-stead the productions { ( A, x )  X   X  | ( A, x )  X  F } ; the new grammar G 0 has a non empty language iff the reachability instance was positive. Conversely, from a non emptiness instance  X  X  X  , put the gram-mar in ETF and define F to match all terminal pro-ductions, i.e. F = { ( A, x ) | ( A, x )  X  a  X  P,a  X   X   X  X   X  }} , and then remove all terminal productions in order to obtain a reachability instance  X  X  0 ,F  X  .
For (3), from a non emptiness instance  X  X  X  , re-place all terminals in G by  X  to obtain an empty word membership instance  X  X  0 , X   X  . Conversely, from a membership instance  X  X  ,w  X  , construct the intersection grammar G 0 with L ( G 0 ) = L ( G )  X  X  w } (Bar-Hillel et al., 1961), which serves as non emptiness instance  X  X  0  X  . 4.2 General Case Verma and Goubault-Larrecq (2005) were the first to prove that coverability and boundedness were decidable for BVASS, using a covering tree con-struction ` a la Karp and Miller (1969), thus of non primitive recursive complexity. Demri et al. (2009, Theorems 7, 17, and 18) recently proved tight complexity bounds for these problems, ex-tending earlier results by Rackoff (1978) and Lip-ton (1976) for Petri nets.
 Theorem 18 (Demri et al., 2009) . Coverabil-ity and boundedness for MLIGs are 2E XP T IME -complete.

Regarding reachability, emptiness, and mem-bership, decidability is still open. A 2E XP S PACE lower bound was recently found by Lazi  X  c (2010). If a decision procedure exists, we can expect it to be quite complex, as already in the Petri net case, the complexity of the known decision procedures (Mayr, 1981; Kosaraju, 1982) is not primitive re-cursive (Cardoza et al., 1976, who attribute the idea to Hack). 4.3 k -Bounded and k -Ranked Cases Since k -bounded MLIGs can be converted into CFGs (Lemma 8), emptiness and membership problems are decidable, albeit at the expense of an exponential blowup. We know from the Petri net literature that coverability and reachability prob-lems are PS PACE -complete for k -bounded right linear MLIGs (Jones et al., 1977) by a reduc-tion from linear bounded automaton (LBA) mem-bership. We obtain the following for k -bounded MLIGs, using a similar reduction from member-ship in polynomially space bounded alternating Turing machines (Chandra et al., 1981, ATM): Theorem 19. Coverability and reachability for k -bounded MLIGs are E XP T IME -complete, even for fixed k  X  1 .

The lower bound is obtained through an encod-ing of an instance of the membership problem for ATMs working in polynomial space into an in-stance of the coverability problem for 1 -bounded MLIGs. The upper bound is a direct application of Lemma 8, coverability and reachability being reducible to the emptiness problem for a CFG of exponential size. Theorem 19 also shows the E X -
T IME -hardness of emptiness and membership in minimalist grammars with SMC.
 Corollary 20. Let k  X  1 ; k -boundedness for MLIGs is E XP T IME -complete.
 Proof. For the lower bound, consider an instance  X  X  ,F  X  of coverability for a 1 -bounded MLIG G , which is E XP T IME -hard according to Theorem 19. Add to the MLIG G a fresh nonterminal E and the productions which make it non k -bounded iff the coverability instance was positive.
For the upper bound, apply Lemma 8 with k 0 = k + 1 to construct an O ( |G| X  2 n 2 log 2 ( k 0 +1) ) -sized CFG, reduce it in polynomial time, and check whether a nonterminal ( A, x ) with x ( i ) = k 0 for some 0 &lt; i  X  n occurs in the reduced grammar.
Note that the choice of the encoding of k is ir-relevant, as k = 1 is enough for the lower bound, and k only logarithmically influences the exponent for the upper bound.

Corollary 20 also implies the E XP T IME -completeness of k -rankedness, k encoded in unary, if k can take arbitrary values. On the other hand, if k is known to be small, for instance log-arithmic in the size of G , then k -rankedness be-comes polynomial by Lemma 6.

Observe finally that k -rankedness provides the only tractable class of MLIGs for uniform mem-bership, using again Lemma 6 to obtain a CFG of polynomial size X  X ctually exponential in k , but k is assumed to be fixed for this problem. An obvious lower bound is that of membership in CFGs, which is PT IME -complete (Jones and Laaser, 1976). 4.4 Lexicalized Case Unlike the high complexity lower bounds of the previous two sections, NPT IME -hardness results for uniform membership have been proved for a number of formalisms related to MLIGs, from the commutative CFG viewpoint (Huynh, 1983; Bar-ton, 1985; Esparza, 1995), or from more spe-cialized models (S X gaard et al., 2007; Champol-lion, 2007; Koller and Rambow, 2007). We fo-cus here on this last proof, which reduces from the normal dominance graph configurability prob-lem (Althaus et al., 2003), as it allows to derive NPT IME -hardness even in highly restricted gram-mars.
 Theorem 21 (Koller and Rambow, 2007) . Uni-form membership of  X  X  ,w  X  for G a 1-bounded, lexicalized, UVG-dl with finite language is NPT IME -hard, even for | w | = 1 .
 Proof sketch. Set S as start symbol and add a pro-duction S  X  aA to the sole vector of the gram-mar G constructed by Koller and Rambow (2007) from a normal dominance graph, with dominance links to all the other productions. Then G becomes strict, lexicalized, with finite language { a } or  X  , and 1-bounded, such that a belongs to L ( G ) iff the normal dominance graph is configurable.
 The fact that uniform membership is in NPT IME in the lexicalized case is clear, as we only need to guess nondeterministically a deriva-tion of size linear in | w | and check its correctness.
The weakness of lexicalized grammars is how-ever that their emptiness problem is not any eas-ier to solve! The effect of lexicalization is indeed to break the reduction from emptiness to member-ship in Proposition 17, but emptiness is as hard as ever, which means that static checks on the gram-mar might even be undecidable. Grammatical formalisms with dominance links, introduced in particular to model scrambling phe-nomena in computational linguistics, have deep connections with several open questions in an un-expected variety of fields in computer science. We hope this survey to foster cross-fertilizing ex-changes; for instance, is there a relation between Conjecture 11 and the decidability of reachabil-ity in MLIGs? A similar question, whether the language L pal of even 2-letters palindromes was a Petri net language, was indeed solved using the decidability of reachability in Petri nets (Jantzen, 1979), and shown to be strongly related to the lat-ter (Lambert, 1992).

A conclusion with a more immediate linguis-tic value is that MLIGs and UVG-dls hardly qual-ify as formalisms for mildly context-sensitive lan-guages , claimed by Joshi (1985) to be adequate for modeling natural languages, and  X  X oughly X  de-fined as the extensions of context-free languages that display 1. support for limited cross-serial dependen-2. constant growth, a requisite nowadays re-3. polynomial recognition algorithms: holds Nevertheless, variants such as k -ranked V-TAGs are easily seen to fulfill all the three points above. Acknowledgements Thanks to Pierre Cham-bart, St  X  ephane Demri, and Alain Finkel for helpful discussions, and to Sylvain Salvati for pointing out the relation with minimalist grammars.

