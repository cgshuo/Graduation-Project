 Recognizing Textual Entailment (RTE) is the task of identifying, given two text fragments, whether one of them can be inferred from the other (Dagan et al., 2006). This task generalizes a common problem that arises in many tasks at the semantic level of NLP. For example, in Information Extraction (IE) , a sys-tem may be given a template with variables (e.g.,  X  X  is employed by Y X ) and has to find text fragments from which this template, with variables replaced by proper entities, can be inferred. In Summariza-tion , a good summary should be inferred from the given text, and, in addition, should not contain du-plicated information, i.e., sentences which can be in-ferred from other sentences in the summary. Detect-ing these inferences can be performed by an RTE system.

Since first introduced, several approaches have been proposed for this task, ranging from shallow lexical similarity methods (e.g., (Clark and Har-rison, 2010; MacKinlay and Baldwin, 2009)), to complex linguistically-motivated methods, which incorporate extensive linguistic analysis (syntactic parsing, coreference resolution, semantic role la-belling, etc.) and a rich inventory of linguistic and world-knowledge resources (e.g., (Iftene, 2008; de Salvo Braz et al., 2005; Bar-Haim et al., 2007)). Building such complex systems requires substantial development efforts, which might become a barrier for new-comers to RTE research. Thus, flexible and extensible publicly available RTE systems are ex-pected to significantly facilitate research in this field. More concretely, two major research communities would benefit from a publicly available RTE system: 1. Higher-level application developers, who 2. Researchers in the RTE community, that would
Yet, until now rather few and quite limited RTE systems were made publicly available. Moreover, these systems are restricted in the types of knowl-edge resources which they can utilize, and in the scope of their inference algorithms. For example, EDITS 2 (Kouylekov and Negri, 2010) is a distance-based RTE system, which can exploit only lexical knowledge resources. NutCracker 3 (Bos and Mark-ert, 2005) is a system based on logical represen-tation and automatic theorem proving, but utilizes only WordNet (Fellbaum, 1998) as a lexical knowl-edge resource.

Therefore, we provide our open-source textual-entailment system, B IU T EE . Our system provides state-of-the-art linguistic analysis tools and exploits various types of manually built and automatically acquired knowledge resources, including lexical, lexical-syntactic and syntactic rewrite rules. Fur-thermore, the system components, including pre-processing utilities, knowledge resources, and even the steps of the inference algorithm, are modu-lar, and can be replaced or extended easily with new components. Extensibility and flexibility are also supported by a plug-in mechanism , by which new inference components can be integrated with-out changing existing code.

Notable support for researchers is provided by a visual tracing tool , Tracer , which visualizes every step of the inference process as shown in Figures 2 and 3. We will use this tool to illustrate various in-ference components in the demonstration session. 2.1 Inference algorithm In this section we provide a high level description of the inference components. Further details of the al-gorithmic components appear in references provided throughout this section.

B IU T EE follows the transformation based paradigm, which recognizes textual entailment by converting the text into the hypothesis via a sequence of transformations. Such a sequence is often referred to as a proof , and is performed, in our system, over the syntactic representation of the text -the text X  X  parse tree(s). A transformation modifies a given parse tree, resulting in a generation of a new parse tree, which can be further modified by subsequent transformations.

Consider, for example, the following text-hypothesis pair: T ext : ... Obasanjo invited him to step down as president H ypothesis : Charles G. Taylor was offered asylum in
This text-hypothesis pair requires two major transformations: (1) substituting  X  X im X  by  X  X harles G. Taylor X  via a coreference substitution to an ear-lier mention in the text, and (2) inferring that if  X  X  accept Y X  then  X  X  was offered Y X .

B IU T EE allows many types of transformations, by which any hypothesis can be proven from any text. Given a T-H pair, the system finds a proof which generates H from T, and estimates the proof validity. The system returns a score which indicates how likely it is that the obtained proof is valid, i.e., the transformations along the proof preserve entail-ment from the meaning of T.

The main type of transformations is application of entailment-rules (Bar-Haim et al., 2007). An entail-ment rule is composed of two sub-trees, termed left-hand-side and right-hand-side , and is applied on a parse-tree fragment that matches its left-hand-side, by substituting the left-hand-side with the right-hand-side. This formalism is simple yet power-ful, and captures many types of knowledge. The simplest type of rules is lexical rules , like car  X  vehicle . More complicated rules capture the en-tailment relation between predicate-argument struc-tures, like X accept Y  X  X was offered Y . Entailment rules can also encode syntactic phenomena like the semantic equivalence of ac-tive and passive structures ( X Verb[active] Y  X  Y is Verb[passive] by X) . Various knowledge resources, represented as entailment rules, are freely available in B IU T EE  X  X  web-site. The complete formalism of entailment rules, adopted by our system, is described in (Bar-Haim et al., 2007).
Coreference relations are utilized via coreference-substitution transformations: one mention of an en-tity is replaced by another mention of the same en-tity, based on coreference relations. In the above ex-ample the system could apply such a transformation to substitute  X  X im X  with  X  X harles G. Taylor X .
Since applications of entailment rules and coref-erence substitutions are yet, in most cases, insuffi-cient in transforming T into H, our system allows on-the-fly transformations. These transformations include insertions of missing nodes, flipping parts-of-speech, moving sub-trees, etc. (see (Stern and Dagan, 2011) for a complete list of these transforma-tions). Since these transformations are not justified by given knowledge resources, we use linguistically-motivated features to estimate their validity. For ex-ample, for on-the-fly lexical insertions we consider as features the named-entity annotation of the in-serted word, and its probability estimation according to a unigram language model, which yields lower costs for more frequent words.

Given a (T,H) pair, the system applies a search algorithm (Stern et al., 2012) to find a proof O = ( o 1 , o 2 , . . . o n ) that transforms T into H. For each proof step o i the system calculates a cost c ( o i ) . This cost is defined as follows: the system uses a weight-vector w , which is learned in the training phase. In addition, each transformation o i is represented by a feature vector f ( o i ) which characterizes the trans-formation. The cost c ( o i ) is defined as w  X  f ( o i The proof cost is defined as the sum of the costs of the transformations from which it is composed, i.e.: c ( O ) , If the proof cost is below a threshold b , then the sys-tem concludes that T entails H. The complete de-scription of the cost model, as well as the method for learning the parameters w and b is described in (Stern and Dagan, 2011). 2.2 System flow The B IU T EE system flow (Figure 1) starts with pre-processing of the text and the hypothesis. B IU T EE provides state-of-the-art pre-processing utilities: Easy-First parser (Goldberg and Elhadad, 2010), Stanford named-entity-recognizer (Finkel et al., 2005) and ArkRef coreference resolver (Haghighi and Klein, 2009), as well as utilities for sentence-splitting and numerical-normalizations. In addition, B
IU T EE supports integration of users X  own utilities by simply implementing the appropriate interfaces. Entailment recognition begins with a global pro-cessing phase in which inference related computa-tions that are not part of the proof are performed. Annotating the negation indicators and their scope in the text and hypothesis is an example of such cal-culation. Next, the system constructs a proof which is a sequence of transformations that transform the text into the hypothesis. Finding such a proof is a sequential process, conducted by the search algo-rithm. In each step of the proof construction the sys-tem examines all possible transformations that can be applied, generates new trees by applying selected transformations, and calculates their costs by con-structing appropriate feature-vectors for them. New types of transformations can be added to B
IU T EE by a plug-in mechanism, without the need to change the code. For example, imagine that a researcher applies B IU T EE on the medical domain. There might be some well-known domain knowl-edge and rules that every medical person knows. Integrating them is directly supported by the plug-in mechanism. A plug-in is a piece of code which im-plements a few interfaces that detect which transfor-mations can be applied, apply them, and construct appropriate feature-vectors for each applied trans-formation. In addition, a plug-in can perform com-putations for the global processing phase.

Eventually, the search algorithm finds a (approx-imately) lowest cost proof. This cost is normalized as a score between 0 and 1 , and returned as output.
Training the cost model parameters w and b (see subsection 2.1) is performed by a linear learn-ing algorithm, as described in (Stern and Dagan, 2011). We use a Logistic-Regression learning algo-rithm, but, similar to other components, alternative learning-algorithms can be integrated easily by im-plementing an appropriate interface. 2.3 Experimental results B
IU T EE  X  X  performance on the last two RTE chal-lenges (Bentivogli et al., 2011; Bentivogli et al., 2010) is presented in Table 1: B IU T EE is better than the median of all submitted results, and in RTE-6 it outperforms all other systems. As a complex system, the final score provided as output, as well as the system X  X  detailed logging in-formation, do not expose all the decisions and cal-culations performed by the system. In particular, they do not show all the potential transformations that could have been applied, but were rejected by the search algorithm. However, such information is crucial for researchers, who need to observe the us-age and the potential impact of each component of the system.

We address this need by providing an interactive visual tracing tool , Tracer , which presents detailed information on each proof step, including potential steps that were not included in the final proof. In the demo session, we will use the visual tracing tool to illustrate all of B IU T EE  X  X  components 4 . 3.1 Modes Tracer provides two modes for tracing proof con-struction: automatic mode and manual mode . In au-tomatic mode, shown in Figure 2, the tool presents the complete process of inference, as conducted by the system X  X  search: the parse trees, the proof steps, the cost of each step and the final score. For each transformation the tool presents the parse tree before and after applying the transformation, highlighting the impact of this transformation. In manual mode, the user can invoke specific transformations pro-actively, including transformations rejected by the search algorithm for the eventual proof. As shown in Figure 3, the tool provides a list of transformations that match the given parse-tree, from which the user chooses and applies a single transformation at each step. Similar to automatic mode, their impact on the parse tree is shown visually. 3.2 Use cases Developers of knowledge resources, as well as other types of transformations, can be aided by Tracer as follows. Applying an entailment rule is a process of first matching the rule X  X  left-hand-side to the text parse-tree (or to any tree along the proof), and then substituting it by the rule X  X  right-hand-side. To test a rule, the user can provide a text for which it is sup-posed to match, examine the list of potential trans-formations that can be performed on the text X  X  parse tree, as in Figure 3, and verify that the examined rule has been matched as expected. Next, the user can apply the rule, visually examine its impact on the parse-tree, as in Figure 2, and validate that it op-erates as intended with no side-effects.

The complete inference process depends on the parameters learned in the training phase, as well as on the search algorithm which looks for lowest-cost proof from T to H. Researchers investigating these algorithmic components can be assisted by the trac-ing tool as well. For a given (T,H) pair, the auto-matic mode provides the complete proof found by the system. Then, in the manual mode the researcher can try to construct alternative proofs. If a proof with lower cost can be constructed manually it im-plies a limitation of the search algorithm. On the other hand, if the user can manually construct a bet-ter linguistically motivated proof, but it turns out that this proof has higher cost than the one found by the system, it implies a limitation of the learning phase which may be caused either by a limitation of the learning method, or due to insufficient training data. In this paper we described B IU T EE , an open-source textual-inference system, and suggested it as a re-search platform in this field. We highlighted key advantages of B IU T EE , which directly support re-searchers X  work: (a) modularity and extensibility, (b) a plug-in mechanism, (c) utilization of entail-ment rules, which can capture diverse types of knowledge, and (d) a visual tracing tool, which vi-sualizes all the details of the inference process. This work was partially supported by the Israel Science Foundation grant 1112/08, the PASCAL-2 Network of Excellence of the European Com-munity FP7-ICT-2007-1-216886, and the Euro-pean Community X  X  Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 287923 (EXCITEMENT).

