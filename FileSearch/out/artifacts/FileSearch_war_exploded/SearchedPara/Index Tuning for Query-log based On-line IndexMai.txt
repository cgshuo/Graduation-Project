 The existing query-log based on-line index maintenance ap-proaches rely on frequency distribution of terms in the static query-log. Though these approaches are proved to be e-cient, but in real world, the frequency distribution of the terms changes over a period of time. This negatively a ects the eciency of the static query-log based approaches. To overcome this problem, we propose an index tuning strat-egy for reorganizing the indexes according to the latest fre-quency distribution of the terms captured from query-logs. Experimental results show that the proposed tuning strat-egy improves the performance of static query-log based ap-proaches.
 Categories and Subject Descriptors: H.3.1 [Informa-tion Storage and Retrieval]: Content Analysis and Index-ing| Indexing Methods ; H.3.2 [Information Storage and Re-trieval]: Information Storage| File Organization ; H.3.3 [In-formation Storage and Retrieval]: Information Search and Retrieval| Search Process General Terms: Algorithms, Performance Keywords: Inverted File, Inverted Index, Search Engine, Query Log
Inverted indexes are an important and widely used data structure for index maintenance in Information Retrieval (IR) systems. They comprise of dictionary (for storing terms) and postings lists (for storing postings of individual terms) [12]. Postings represent the information about a document for a particular term. Based on the requirement, the postings store information as little as document ID to as large as po-sitional information of term in documents, term frequencies etc. A query to an IR system is a list of terms along with constraints. The result is a list of documents obtained by The w ork was carried out when the author was at Indian Institute of Technology Madras, India
Here, we discuss a brief overview of the query-log based approaches on which index tuning is applied, and the AOL query-log analysis which forms the basis for our proposed index tuning strategy.
In [7], authors proposed a merge based on-line indexing approach using the frequency distribution of terms in the query-log. The pivotal idea of query-log based approaches is to partition the index into two: frequent-term index and infrequent-term index, and adopt a di erent merge policy for each. For partitioning the index, they proposed a hori-zontal partitioning technique in addition to the vertical par-titioning approach. Horizontal partitioning splits the index using a split-point (threshold) calculated by applying pareto principle (80-20) on frequency distribution of terms in the query-log. Frequent terms ( &gt; split-point ) along with their postings lists form frequent-term index and the rest form infrequent-term index.

Based on the horizontal partitioning, three query-log based approaches are proposed in [7] -Single-split Immediate Merge, Single-split Multi-partition, and Multi-split Indexing approach. These three approaches follow a general paradigm used for on-line indexing. An auxiliary index is maintained in the main memory and continuously updated with new docu-ments. Once the auxiliary index size reaches the allowed quota, it is either merged with an on-disk index (with cas-cading merges) or moved as a new partition. Query-log based approaches are multi-partition approaches, i.e. they result in more than one on-disk index to exist simultane-ously. These approaches generalize the idea of Logarithmic merge and Geometric partitioning approaches and use hori-zontal partitioning for splitting the indexes. A brief overview of the query-log based approaches is given below: In Single-split Immediate Merge, the auxiliary index, when it is required to be moved to disk, is merged with the index at Partition 0. Based on user de ned value of r (maximum no. of merges allowed), the index at Partition 0 is split into frequent-term and infrequent-term index using horizontal partitioning. The frequent-term index is maintained using immediate merge policy and infrequent-term index by a lazy merge policy (a generalized logarithmic merge). This index-ing scheme provides a high degree of query performance since frequent-term index is a large single partitioned index. How-ever, the index maintenance costs are expensive but better than na  X  ve immediate merge approach. In Single-split Immediate Merge, the advantages of using lazy merge policy for the large infrequent-term index are shadowed by the use of very expensive immediate merge policy for frequent-term index. This limits the Single-split immediate merge policy from providing better trade-o be-tween index maintenance costs and query performance. Single-split Multi-partition overcomes this problem by adopting an incremental multi-partition active merge policy (a general-ized geometric partitioning) for maintaining frequent-term index. This indexing approach achieves a much better trade-o than the one o ered by Single-split immediate merge.
Algori thm 1 : IndexTuning(onDiskIndexroot, di Log) from ol d query-log to the new query-log. Since over a time span, a large number of terms have frequency changes, it is inecient to consider all of them to be recorded into di -log for index tuning. Instead, we record only the terms which are mis-classi ed according to new log, i.e we take the new query-log and compute the new thresholds based on 80-20 principle. Mis-classi ed terms (or di -terms) are the terms which are infrequent in old query-log and frequent in new query-log or vice-versa.

Building di -term index : After the di -terms are iden-ti ed, the next step is to build a di -term index. During the di -term index construction, the postings list of the terms are extracted from the existing on-disk index and grouped together to form the di -term index. Extracting the postings list for a term is similar to querying the term, this involves traversing through all the indexes for collecting its postings. Every time a postings list for a term is extracted from an index, the postings are not deleted immediately, but they are copied and marked as delete for eciency purpose. The nal postings list for a term is the concatenation of all the identi ed postings. This list is added to the di -term index. Merging the di -terms index with on-disk index : The nal step involved is to merge the di -term index with the existing on-disk index. The merging step is similar to the merging of an auxiliary index with the on-disk index. The di -term index is rst merged with the on-disk index at partition 0, which can trigger cascading merges. Before invoking the merging process, the split-points (threshold) are updated to the new split-points that are obtained from the new query-log using the 80-20 % split principle. Algorithm 1 describes the general index tuning approach. For each term in the computed di -log, rst its postings are extracted from the on-disk index and the term along with its postings are added to the di -term index. After processing all the terms in di -log, the nal di -term index is merged with existing on-disk index (by the InsBlock() described in [7]). Since the three query-log based approaches follow di erent merging schemes, they result in di erent costs for index tuning mainly in uenced by the extraction process costs.
 Algorithm 2 describes the process of extracting the postings for a given term term . First the term 's frequency is obtained from old query-log and compared with the split-point. If the term is frequent, all the frequent-term indexes are queried, otherwise infrequent-term indexes are queried for extract-ing postings. For eciency reasons, extracting postings list operation does not delete the postings but marks them as deleted in the partitions which contain the term. Subse-quently during the merge phase, the postings are deleted in those partitions which participate in merging.
 Figure 2: Index tuning costs for three on-line index-ing approaches 2) Single-split Multiple Partition approach and 3) Multi-partition approach. In the performance study, we evaluated the time taken for tuning the existing on-line index into a new one which is based on the new query-log, and also compared the average time taken for each query in old index and new index.

Figure 2 shows the evaluation of the index tuning costs for the three approaches. Here, one can observe that the index tuning costs for Single-split Immediate merge index is lower compared to the other approaches. This is because, the ex-traction of postings from an index for a term is proportional to the querying time taken for that term. For our test case, we observed that index tuning cost for Single-split Immedi-ate Merge is 7% less of the Single-split Multiple Partition approach and 25% less of the Multi-split Indexing approach.
The evaluation query times after the index tuning for the three approaches is shown in Figure 3. Here, we can ob-serve that the new query times are almost same for all the three approaches. This is because, we have taken only the di -log queries for evaluation. Since all the di -log terms form a single index after index tuning and merged with the existing on-disk index, we have the same query time for di -terms with respect to all the approaches. But this will change once the usage of on-line indexing is resumed. From our experimental study, we observed a signi cant im-provement in query performance. For Single-split Immedi-ate merge (SSIM) the query performance is improved by 58% , for Single-split Multiple Partition approach (SSMP) the improvement is by 61% , and for Multi-split approach the improvement is by 64% .
In this paper, we propose an index tuning approach for query-log based on-line index strategies. The proposed ap-proach overcomes the problems faced by query-log based approaches with dynamic query-logs. We exploit the fre-quency distribution of query-logs to compare and identify the terms that are ineciently handled in the existing index and use a tuning approach to reorganize the existing index. Index tuning cost for a query-log based approach is directly proportional to its query costs. As index tuning reorganizes the existing index, it substantially improves the query per-formance for the terms which are ineciently handled before by query-log based approaches. Thus, the use of index tun-
