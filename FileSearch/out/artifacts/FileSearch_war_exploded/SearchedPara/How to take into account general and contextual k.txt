 1. Introduction
Very often, designers start a new design from a previously studied situation that they could consider as a basis, and then, they finish the design task by using less contextual knowledge as rules or best practices, to adjust the solution to the requirements ( Minsky, 1974 ). When the design domain is wel l known and design activity very routine, designers start with some kind of generic solution that they instantiate according to the re quirements, while comparing the result with previous designs. Therefore, there is no doubt that, most of the time, designers take into account two kinds of knowledge simultaneously: contextual knowl edge corresponding to past cases and general knowledge corresponding to relations, rules or con-straints that link design variables.

If the designers are able to handle and use these two kinds of knowledge, aiding design tools should be able to do the same and process contextual and general knowledge. As very few studies have taken an interest in this kind of knowledge coupling, the goal of this paper is to show that it is possible to support design decisions with two different tools relying on these two kinds of knowledge. We will consider on one hand, a constraint filtering tool working with general knowledge formalized as a constraint satisfaction problem ( CSP ), and secondly, a case-based reasoning tool ( CBR ) operating with contextual knowledge.
 good candidates to assist design decision, for example Dutta et al. (1997) , Nemati et al. (2002) , Fargier et al. (1996) or Goel and Craw (2006) . In this paper, we study how they can cooperate in order to better support design. This cooperation, or coupling, is based on the complementarity of general and contextual knowledge. Therefore, we propose a new way of combining these two types of knowledge in order to take the most of them: they are not just used in sequence, one feeding the other, as it can be found in the literature and presented on the left part of Fig. 1 , but in a real complementary way by exchanging knowledge, as shown on the right part of Fig. 1 . der of this section, we recall the background of constraint filtering (cf. Section 1.1 ) and case-based reasoning (cf. Section 1.2 )and exhibit the context of our proposals (cf. Section 1.3 ). In Section 2 , an example which comes from the industrial problem and runs throughout the paper is presented. In Section 3 ,wedescribebriefly and illustrate the various possibilities for associating the two aiding design tools ( CSP and CBR ) which have been found in the literature. These associations are mainly done in a sequential way, meaning that one of the tools is used first to supply the second one in order to reach a solution. In Section 4 , we present our approach that enables us to use both aiding decision tools in an interactive and simultaneous way, meaning that the tools have to share and exchange knowledge in order to reach a solution. 1.1. CSP approaches
When dealing with constraint filtering to assist design, knowl-edge is explicitly expressed as constraints linking the variables of the problem ( Chenouard et al., 2009 ). A constraint can take various forms: lists of allowed combinations such as f X  x  X  1 , y  X  a  X  ,  X  x  X  2 , y  X  b  X g , mathematical formulae such as y  X  x 2 logical rules, such as  X  A 3 B  X  4 C . All the constraints are gathered in a model which corresponds to the knowledge, expressing what can be accepted or forbidden. In order to find a solution inter-actively, the user defines her/his requirements on some of the model variables. The reasoning process consists in reflecting these requirements through the constraints network to the other vari-ables by limiting their domains only to consistent values. This mechanism, repeated several times, restricts the solution space progressively to reach consistent solutions.

More formally, a CSP can be defined by a triplet f X , D , C g . X is a set of variables, D is a set of domains (one domain for each variable) and C is a set of constraints where a constraint defines the allowed or forbidden combinations of variable values. CSP filtering techniques allow decision results to be propagated interactively on a network of constraints. This kind of decision propagation is also similar to the human ability to deduce consequences from facts. Many works that consider aiding design as a constraint satisfaction problem have been achieved, for example White et al. (2009) , Bin et al. (2010) , Bodirsky and
Dalmau (2006) or Vareilles et al. (2007) . 1.2. CBR approaches In case-based reasoning or CBR ( Riesbeck and Shank, 1989;
Aamodt and Plaza, 1994 ), systems expertise is embodied in a library of past cases, rather than being encoded in classical rules. Each case typically contains a description of the problem, plus a solution and/or the outcome. The knowledge and reasoning process used by designers to solve the problem is not recorded, but implicit in the solution. In order to find a solution, the user describes her/his problem through a list of variables and after all user inputs, the described problem is matched against the cases in the past case base. A similarity function ( Kolodner, 1993 ) let you detect and classify the similar past cases and the most similar ones are retrieved. If the user X  X  problem does not match against any past cases, the system will return the nearest possible ones. The retrieved cases provide ballpark solutions that, generally, must be adapted by the user to fit her/his current problem. Once revised by an expert, the case is added to the case base.
More formally, a case-based reasoning problem can be defined used to describe the case, D is a set of distances (one distance for each attribute) that permits us to calculate a measurement between the values of each attribute and F is an operator that aggregates the distances into a single similarity measurement in order to have the similarity score of each case. CBR techniques support analogy reasoning which is very frequently used by humans for solving problems. Consequently, CBR has been used in numerous works dealing with aiding design, for example Althoff (2008) , Changchien and Lin (2005) , Bergmann et al. (2003) , Carsten (2001) or Bichindaritz and Marling (2006) . 1.3. Proposals context and background
Our proposal is therefore to analyse the association of the two aiding design tools, CSP and CBR , in order to use them on a same design problem. According to Brown and Chandrasekaran (1984) and Coyne et al. (1989) , product design can be characterized with respect to a degree of recurrence in: creative, innovative and routine design. They have also outlined the kind of variables and knowledge necessary to achieve these three kinds of design. As knowledge availability is a strong prerequisite for these two knowledge based tools, we only consider routine design situations.
Therefore, the variables describing design requirements and design solutions, which we shall henceforth call design problem variables, noted Vdp _ i , will be considered by the two aiding design tools. As general ( CSP used) and contextual ( CBR used) knowledge do not necessarily act on the same subset of design problem variables, we can consider three variable sets as represented in Fig. 2 : one set of design problem variables, noted DPV  X f Vdp _ i g , two subsets of DPV , where each variable is associated with:
Most of the time, the set of variables DPV is much greater than each of the two subsets, because it is quite difficult to include all design variables in a knowledge model. When comparing the two subsets CSV and CBV , we consider that they are different but have some design variables in common CCV  X  CSV \ CBV a | , which means that contextual and general knowledge cover different design problem variables. Thus the knowledge of the two aiding design tools is quite different and can be complementary.
Our goal is then to establish some kind of cooperation of the two kinds of knowledge with the two aiding design tools. A new way of combining these two types of knowledge by exploiting their complementarity is then proposed and detailed in Section 4 : the CSP and CBR tools work together by exchanging knowledge in order to find a solution. 2. Industrial problem: needs and example
Previous aiding design tools have been initially proposed for product design. As long as the design process is rather routine, they can be used for any kind of artefact. As a consequence, they are now widely used for aiding the design of systems, processes or services. The example that illustrates this paper deals with the design of maintenance processes for helicopters.

According to Norme NF X60012 (2006) , maintenance means any of the operations required to maintain or re-establish a product in a specified state or to guarantee a predetermined service. In the aeronautical field, average maintenance costs during the life of an aircraft are higher than the initial purchase costs for the products. We must notice that helicopter maintenance cost
In order to manage the helicopter maintenance process, it is essential for each maintenance job firstly to be able to define maintenance operations accurately, and secondly to match the work load with the required resources, in order to estimate the maintenance cost for each job associated with a customer demand. In order to do so, maintenance managers operate with two knowledge sources: the helicopter technical documentation, which can be seen as general knowledge and their own past experience corresponding with previous maintenance jobs which can be seen as contextual knowledge. By maintenance job, we are referring to a full maintenance service between helicopter land-ings and take offs. Three types of maintenance services exist: (iii) mini service MS : in such a case, the less critical parts are is called the Maintenance Report Board or MRB and must be followed absolutely to the letter. The MRB defines the cycles of maintenance for a family of helicopters and each elementary operation (time interval between maintenance operations, the type of maintenance operation, required resources). Globally the
MRB defines what should be done in order to achieve smooth and safe helicopter behavior. Therefore MRB defines all required operations and required resources for each maintenance job.
Maintenance workload and cost can be consequently quantified by experts in maintenance for each maintenance operation and aggregated for the maintenance job.
 time many other operations must be a dded, according to the effective utilization of the helicopter. These operations are non-critical for security but most of the time they prevent early return and improve the helicopter availability. In fact when the helicopter lands for a maintenance service, a detailed diagnosis operation is carried out in order to update the set of maintenan ce operations. Thus, these added operations modify the initially estimated workload and cost and can generate maintenance delay and loss of control of the maintenance process. The information related to these added operations (including workload and cost updates) corresponds in fact with the contextual knowledgeandisstoredinthecasebase.Theideaistousethis knowledge to establish, for each maintenance job, more accurate maintenance operation plans, wo rkload and cost estimations. 2.1. General knowledge handled by the CSP model knowledge and can be formalized as a constraint satisfaction problem defined as follows.
 CCV 2.1.1. Definition of the maintenance job
In order to define all maintenance operations, the MRB requires at least the five following variables, prefixed with the MRB _ JOB symbol:
Helicopter type: corresponds to the helicopter model. There are four models in our example that are modelled using a symbolic variable: MRB _ JOB _ HT with a symbolic domain: { Dragon , Puma , Tiger , Dolphin }.

Maintenance job type: corresponds with three kinds of ser-vices. There are modelled using a symbolic variable MRB _ JOB _ ST with a symbolic domain: { complete , interim , mini }.
Helicopter age: corresponds to the number of years since first take off. This age is modelled using a numerical variable MRB _ JOB _ HA with a continuous domain [0, 100].

Helicopter flight hours: corresponds to the number of flight hours since first take off. This variable, named MRB _ JOB _ FH , has the following continuous domain [0, 10 000].

Helicopter equipment: corresponds with five kinds of utiliza-tion that require specific equipment. They are modelled using a symbolic variable MRB _ JOB _ HE with a symbolic domain { Standard , Rescue , Camera , Agriculture , Military }. 2.1.2. Definition of the maintenance operations The variables describing these operations are prefixed by
MRB _ OPR . Four operations always exist for any maintenance job: diagnosis, first operation noted: MRB _ OPR _ Diagnosis ; disassembly, second operation noted: MRB _ OPR _ Disassembly ; assembly, before last operation noted: MRB _ OPR _ Assembly ; final test, last operation noted: MRB _ OPR _ Finaltest .
All other operations are between previous operations and are characterized with:
A helicopter part HP that corresponds to the part of the helicopter where the operation takes place: { Structure , Engine , Transmission , Cabin }.

A technology required TC that corresponds to the main technology of the operation: { Mechanical , Electrical , Computer , Hydraulics }.
Therefore, 16 operations (four parts and four technologies) can be present between disassembly and assembly. These 16 opera-tions are noted: MRB _ OPR _ HP -TC .

These 20 operations, noted MRB _ OPR _ i with i  X  1 X 20 are defined by three operation description variables, prefixed with the MRB _ OPR _ i symbol:
An operation level that corresponds to four levels of complex-ity and a none level meaning that the operation is not required for this maintenance job. This operation level is modelled using a symbolic variable MRB _ OPR _ i _ LV with a symbolic domain { v ery _ complex , complex , light , very _ light , none }.
An operation resource that corresponds to the main technical resource that is required. This resource is modelled using a symbolic variable MRB _ OPR _ i _ TR with a symbolic domain f tr _1 , tr _2 , ... , tr _50 g .

An operation competency that corresponds to the main human skill that is required. This skill is modelled using a symbolic variable MRB _ OPR _ i _ HC with the symbolic domain f hc _1 , hc _2 , ... , hc _50 g .

Given these elements, the CSP model brings together two subsets: of five variables describing the maintenance job: MRB _ JOB _ V , of 60  X  X  20 n 3  X  variables describing the maintenance opera-tions: MRB _ OPR _ V .
 The knowledge of the MRB permits us to identify and model the constraints between the two previous variable subsets MRB _ JOB _ V and MRB _ OPR _ V . These constraints express the allowed combinations of variable values.

In order to quantify workload and cost, the maintenance experts, relying on their own specific knowledge, have derived workload and cost from MRB for each maintenance operation:
Operation workload: corresponds with the amount of man n hours required by the operation and is modelled using the variable OPR _ i _ WLD -1.

Operation cost: corresponds with the standard cost in euros of the operation and is modelled using the variable OPR _ i _ CST -1. and the constraints that link these two indicators (for each operation) with previous variables belonging to MRB _ JOB _ V and MRB _ OPR _ V . The 40  X  X  20 n 2  X  variables corresponding with these two indicators belong to a variable set called OPR _ WLD -CST _ V . The full CSP model gathers 105 variables. Its architecture is shown in the right part of Fig. 3 . 2.2. Contextual knowledge handled by the CBR model
The content of contextual knowledge is directly associated with the effective maintenance proces s. Therefore each maintenance job and each of its maintenance operation are characterized by:
Two variables corresponding with previous indicators and defined in the CBR variable list:
Three operation description variables that corresponds to the effective maintenance operation: These variables are included in the two following variable sets: Of 40 variables corresponding to effective workload and cost: EFF _ OPR _ WLD CST _ V  X f OPR _ i _ WLD EFF g[f OPR _ i _ CST EFF g .
Of 60 variables corresponding to effective maintenance opera-tions description: EFF -OPR _ V  X  { OPR _ i -EFF }. The differences between effective values belonging to { EFF -belonging to { MRB -OPR _ V } and { OPR _ WLD -CST _ V } result from helicopter effective conditions of utilization. If the helicopter is lightly used or in very good condition, the difference between provisional and effective values is rather small. This is of course not the case when the helicopter is used in very severe conditions.
In that case many maintenance operations have to be added, as explained earlier.

Effective conditions of utilization are characterized by the following four variables prefixed by EFF _ COND symbol:
Aggressive environment: corresponds to specific environments that have very strong consequences on the helicopter avail-ability such as: sea/salt, desert/sand, mountain/snow. These environments are modelled using the variable EFF _ COND _ ENV with the symbolic domain { normal , sea , desert , mountain }.
General use: characterizes the utilization severity. This use is modelled using the symbolic variable EFF _ COND _ SEV with the
Heavy load: characterizes the load level that has a strong impact on engine and transmission. This characteristic is modelled using the variable EFF _ COND _ LOD with the symbolic domain { v ery high , high , normal , low , very low }.
General care: characterizes if various pilots or owners take more or less care of the helicopter. This owner X  X  characteristic is modelled using the variable EFF _ COND _ CAR with the sym-bolic domain { low care , normal , great care }.
 These four variables belong to the variable set EFF _ COND _ V .
In order to identify the maintenance job, the CBR case model therefore contains: a reference number of the helicopter visit, five variables describing the maintenance job MRB _ JOB _ V , four variables for use condition characterization related to the job EFF _ COND _ V , sixty variables for effective maintenance operation description
EFF -OPR _ V , forty variables for effective workload and cost of each opera-tion to EFF _ OPR _ WLD -CST _ V .

The complete CBR model is composed of 110 variables. Its architecture is shown in the left part of Fig. 3 . 2.3. Architecture of knowledge model and synthesis
Given previous elements, it is possible now to assemble the two knowledge models as shown in Fig. 3 . The complete knowledge model brings together the following variable subsets variables DPV . This example has clearly highlighted the needs of taking into account different sources of knowledge in order to make better decision. In this particular context of helicopter maintenance, general knowledge ( MRB ) and contextual knowl-edge (past cases) have to be considered at the same time for estimating the time to carry the service, quoting the more precisely the maintenance price, dealing with any possible risks caused by the operations itself and more importantly, avoiding keeping the helicopter out of service any longer than necessary. 3. Association of CSP and CBR based aiding design tool: related work composed of a knowledge base and a processing unit. For the CSP tool, the knowledge base is the constraint model and the proces-sing unit is the constraint filtering treatment. For the CBR tool, the knowledge base is the case base and we consider for the DPV
Expert KN constraints User CCV processing unit only the retrieval; we consider the adaptation, revision and retention as human process.

We assume in this paper that the knowledge models are inputted, updated and validated by experts while the processing units interact with a user that has a design problem to solve. This means that we assume that the actor, whom we call the user, cannot input a new case in the case base, because we consider that updating knowledge should be achieved by the actor we call the expert. Fig. 4 represents the knowledge base and processing unit of each aiding tool with relevant users and experts that interact with them.

We can see in Fig. 4 that each tool can interact: at the knowledge level with a knowledge expert:
J inputting or outputting knowledge: at the problem level with a user:
J inputting piece of problem or outputting a piece of
The goal of this section is to analyse various combinations of input/output, knowledge base/processing unit of the two aiding tools. Some associations do not present any interest while others correspond to already studied ideas, for an overview of ancient works done before 1995 see Sqalli et al. (1999) .

The association overview is organized in three sub-sections dealing first with knowledge validation ( Section 3.1 ), then with knowledge enrichment ( Section 3.2 ) and finally with sequential use of the two aiding tools ( Section 3.3 ). 3.1. Knowledge validation
By validation, we mean that one of the two knowledge bases (or a part of one) can be used to validate the other one (or a part of it). This assumes that the variables supporting knowledge are present in both knowledge models ( CSP and CBR ) and therefore belong to the intersection CSV and CBV . This also means that the experts agree on the fact that they have more confidence in one of the two knowledge bases (or a part of one). 3.1.1. Validation of general knowledge base
For this validation, the higher confidence is in the contextual knowledge encapsulated in the cases stored in the CBR . The CBR cases are therefore used to validate or invalidate the knowledge of the constraint model. An idea, which has been proposed and discussed by Felfernig et al. (2007) is to take all cases of the case base and to input them sequentially in the constraint filtering process as shown in Fig. 5 .

According to: the number of variable values that are missing in the constraint model, the number of constraints of the constraint model that are not respected, it is possible to quantify for each case a quality grade that characterizes each variable domain validity and each constraint consistency. These atomic numbers can then be aggregated in order to provide a global consistency score for the whole constraint model. With these elements, the experts can decide to validate or invalidate the knowledge model or a part of it. Illustrative example :
Situation 1: Initial situation: The helicopter maintenance pro-
Situation 2: New situation: We assume now that the utilization 3.1.2. Validation of contextual knowledge base
In that case the confidence is in general knowledge embedded in the constraint model, and this CSP model is used to validate or invalidate cases corresponding to the CBR contextual knowledge.
The previous validity checking process idea is considered again ( Fig. 6 ), but the difference is that a consistency score is necessary in order to qualify the validity of each case. Therefore: the number of variable values that are missing in the case description, the number of constraints of the constraint model that are not respected, allow us to quantify a case consistency score. According to this score, the experts can decide to valid or invalid the case. Illustrative example :
Situation 1: Initial situation: The previous situation 1 described
Situation 3: New situation: We assume now that the customer 3.2. Knowledge enrichment (or a part of one) can be used to provide some knowledge to the other one. For this section we assume a high confidence in the source of knowledge. As in the previous sub-section, it is assumed that the variables supporting knowledge are present in both knowledge models ( CSP and CBR ) and therefore belong to the intersection CCV  X  CBV \ CSV . 3.2.1. Enrichment of general knowledge base generate knowledge for the CSP model. Such added knowledge can correspond with: be deduced by a comparison of the structure of the two knowledge others are more delicate because they rely on knowledge extraction data mining). This enrichment process is shown in Fig. 7 .
Thus the structure of the updated knowledge model repre-sented in Fig. 8 shows: effective utilization condition variables (variable set EFF _-
COND _ V ) are now shared by the two CBR and CSP models and belongs now to CCV , moving from upper left to lower centre part of Fig. 8 , for each maintenance operation, two estimated variables are added to CSV  X  workload and cost  X  which take into account effective utilization conditions (variable set OPR _ WLD -CST _ V2 ), lower right part of Fig. 8 , constraints that allow us to compute these estimation vari-ables are added, linking the variables sets: OPR _ WLD -CST _ V ,
EFF _ COND _ V and OPR _ WLD -CST _ V2 . The definition of the last computation constraints is obtained with a regression analysis that processes all cases of the case base. 3.2.2. Enrichment of contextual knowledge base
In this case, the knowledge stored in the constraint model is used to generate knowledge for the CBR model. Most of the time this process can be used when a case is incomplete by missing at least one variable value. This occurs for example when data is lost during case collection or when a group of cases are imported and miss a variable value on all cases. This corresponds with some cases with  X  X  X nowledge holes X  X  that should be filled.
In order to obtain the missing value, each case is processed by the constraint filtering unit in order to propose a value for the required variable. Once the case missing value is obtained, it is inputted in the case base and the contextual knowledge is updated as shown in Fig. 9 .
 Illustrative example :
Situation 1: Initial situation: The previous situation 1 described
Situation 5: New situation  X  -situation 3 of Section 3.1.2 is again DPV User
Expert KN constraints
Expert KN constraints 3.3. Sequential use of aiding tools
Until now, we have only dealt with knowledge validation or completion. We have not dealt with knowledge processing with
CBR and CSP in order to assist design. This section is therefore concerned by the sequential use of the two tools, meaning the output of one is the input of the other without any iteration. Two kinds of behaviours have been identified: the second tool is used to assist the end of the design task mainly accomplished by the first one, the first tool is used to assist preparation of the design task mainly accomplished by the second one. 3.3.1. Aiding decision with CBR then CSP
In this situation shown in Fig. 10 , the case base system is used firstly to retrieve a similar case and secondly, the constraint propagation is used to adapt the case. This method of proceeding is very interesting when constraint models are valid only on a small part of the solution space. In that case CBR can roughly identify a part of the solution space that matches the customer X  X  requirements. Then, the appropriate constraint model (the one defined for the previous part of the solution space) can be selected and used in order to adapt the case and thus to terminate design. This association of tools has been studied by some authors, such as Purvis and Pu (1995) , Inakoshi et al. (2001) , Ruet and Geneste (2002) , Lopez (2003) and Roldan et al. (2010) . Illustrative example :
Situation 1: Initial situation: The previous situation 1 described
Situation 6: Not a new situation  X  There has not a new situation 3.3.2. Aiding decision with CSP then CBR order to assist the definition of the input of the CBR . This way to proceed can be interesting either when the case structure pre-sents a large number of variables or when some constraints express well-known knowledge that cannot be disputed. use CSP first then CBR if the CSP model is incomplete or incorrect and the case-base from the CSP values in order to adapt its solution and solve the current problem. Our proposals lies within these works in which the knowledge bases are incomplete but consistent. the domain of other variables. Once this process is completed:
Thus, the inputs of the CBR are set with a better quality (consistent with the constraint model) and are quicker (con-straints reduce the input possibilities).
 3.4. Synthesis
The goal of this section has been to analyse, thanks to related works, various ways to combine case retrieval and constraint processing for aiding design.

In the first two sections, we dealt with knowledge validation and knowledge completion. They do not directly assist the user in the sense that they do not provide any advice or assistance for aiding design. But when the problems of knowledge maintenance, evolution and validation are addressed, the various ways to associate these two concurrent approaches allow us t o improve confidence in knowledge and thus in the two aiding design tools.

In the last section, we have dealt with knowledge utilization for aiding design. The two proposed operating modes gathering case retrieval and constraint processing can clearly assist the designer.
But as the proposed operating modes use these two tools in a sequence, they cannot combine the two kinds of knowledge on a same design problem as the designer might expect. In order to achieve a more effective cooperation, in the next section we present a more complex association of the two knowledge proces-sing tools in order to be able to combine simultaneously the two different types of knowledge on a same design problem.
Our approach to this integration is novel: firstly, the two tools work together in a simultaneous way by exchanging and sharing knowledge in order to reach a solution, contrary to what can be found in the literature. Secondly, they are used in an interactive way, meaning that the solution space is progressively reduced by the inputs of the designer. 4. Proposal for interactive coupling process
In this section, we propose an interactive way of using general and contextual knowledge at the same time in order to help designers make better design decisions. We make the same assumption that we did at the beginning, a general knowledge base modelled as a CSP and a contextual knowledge base model as a CBR .

It must be stressed that the interactive coupling process is invisible for the users or designers. The two knowledge-based tools are seen as a whole system able to help designers make the best decisions. Therefore, the users cannot ask for a particular treatment.

The coupling process is iterative and is composed of two phases which correspond to the availability of knowledge:
Filtering phase: the general knowledge-based system is used for filtering the constraints and for giving values to the CSV variables.
Retrieval phase: the contextual knowledge-based system is used for retrieving relevant past cases and for advising the user with values to the CBV variables.

These two phases are combined in order to make the most of general and contextual knowledge. Two types of assistance have been identified: in the first one, the knowledge-based system is used for giving a rough idea of the values of the design variables: general and contextual knowledge are juxtaposed in order to complete the design. This first type is described in detail in
Section 4.1 , in the second type, the knowledge-based system is used for giving a more precise idea of the values of the design variables.
In that case, general and contextual knowledge are interlaced in order to complete the design. This second type is described in detail in Section 4.2 .

The proposed process is illustrated on a sub-set of variables of our industrial problem, presented in Section 4.3 . It should be recalled, as stated in Section 1.3 , that the union of the variables of the CSP part CSV  X  { Vcs _ k } and of the variables of the CBR part CBV  X  { Vcb _ j } corresponds to the design problem variables DPV  X  CSV [ CBV and that the intersection of these two subsets of design variables is nonempty: CCV  X  CSV \ CBV a | .
We need to define a  X  X  X ixed X  X  variables set, noted FVS , which corresponds to the DPV variables valuated either by the user X  X  inputs or by the filtering phase: these variables are non-negoti-able, meaning that their value cannot be changed by the user. This set is used for the filtering and for the retrieval phases and can gather CSV and CBV variables. 4.1. Interactive knowledge juxtaposition
The two kinds of knowledge can be juxtaposed in order to give an idea of the current design. The two phases are carried out strictly in sequence: firstly, the filtering phase is done and restricts the domains of the CSV variables and secondly, the retrieval phase is launched on the FVS variables belonging to CBV in order to advise the user on the possible and realistic domain of the un-valuated CBV variables.

In this situation, the designer is going to describe her/his problem onto the design variables DPV step by step. After each user input, the knowledge-based system is going to use in sequence:
Filtering phase on the CSP linking the CSV variables: the constraints C _ i are then used to reduce the domains of the CSV variables.

Retrieval phase on the CBR linking the CBV variables: it should be noted that as some of the CBV variables belong to CCV set, they can be valuated by the CSP filtering process. The retrieval process is then launched in order to complete the values of the un-valuated CBV variables thanks to the CBV variables belong-ing to FVS which already have a  X  X  X ixed X  X  value. In order to give advice about the solutions, an expert should have previously expressed the way of fulfilling each of the CBV variables, either by giving all the values, the maximum, the minimum, the interval of values, or the average value, on a maximal number mn of similar cases with a minimal similarity score ms .
After these two steps (filtering and retrieval), the domain of some DPV variables could have been modified: the designer can continue his/her design with a better knowledge of the possible solutions. Algorithm 1 summarizes this process.
 4.2. Interactive knowledge interlacing
The two kinds of knowledge can be interlaced in order to make the most of contextual and general knowledge. In this situation, some variables belonging to CSV can be linked to some CBV variables by specific constraint.
 We call these particular constraints, contextual constraints.
They belong to the CSP model and have been previously identified and defined by an expert. Each of the contextual constraints is attached to a CSV variable and is described as follows: the list of CBV variables which are used in the constraint, the way of linking the CBV variables to the CSV variables, the maximal number mn c of cases to use, the minimal score ms c of similarity of the use cases.
Let us consider a variable a D CSV . This variable is computed using the ratio of two variables b and l D CBV . The contextual constraint cc expressing this particular knowledge is then 10 , ms c 4 0 : 85  X  .

In this case, the situation is quite the same as in the previous section: the designer is going to describe her/his problem onto the complete set of design variables DPV step by step. After each user X  X  input, the knowledge-based system is going to use in sequence:
Filtering phase, on the CSP linking the CSV variables. This phase is now decomposed into two sub-phases depending on the type of the constraints:
Retrieval phase on the CBR linking the CBV variables. The retrieval process is then launched another time, and follows exactly the same process described for previous knowledge juxtaposition. Here also the idea is to give advice to the user.
Algorithm 1. K NOWLEDGE _J UXTA ( DPV ) 2  X  2 LoRV is the list of modified variables belonging only to CSV . 2  X  2 LoFV is the list of fixed variables belonging only to CBV . Begin
LoRV  X  all the design variables of CSV with a modified domain 2  X  2 The algorithm starts by filtering all the CSV variables :
While  X  LoRV a |  X  Do
End While
LoFV  X  all the  X  X  X ixed X  X  variables of CBV : CBV \ FVS 2  X  2 The algorithm continues by giving values to the CBV variables
S e arch _CBR  X  LoFV , mn , ms  X  Return DPV
Algorithm 2 summarises this process. 4.3. Application on the industrial problem
We illustrate the previous proposals on a sub-set of variables of our industrial problem, described in Section 2 . Firstly, we define the simplified knowledge model and secondly, we propose two running scenarios corresponding to knowledge juxtaposition and interlacing processes. 4.3.1. Considered knowledge model
In this section, we describe the subset of design parameter variables DPV that are necessary to illustrate our proposals.
We first present the variables that belong to both CBR and CSP models D CCV , then, the ones belonging only to the CSP model D
CSV , then the ones belonging only to the CBR model D CBV and we finish by the complete illustrative model.

CCV : Constraint case variables :Assaidpreviously,in Section 2.3 , the job descriptions MRB _ JOB _ V belong to both models.
In order to simplify our problem, we only consider two variables: helicopter type: MRB _ JOB _ HT with the domain { Tiger , Puma }, maintenance job type: MRB _ JOB _ ST with the domain { Com-plete , Interim , Mini }.
 CSV : Constraint satisfaction variables : As said previously, in
Section 2.1 , the maintenance operation descriptions MRB _OPR_ V belong only to the CSP models. In order to simplify our problem, we only consider: one operation, the operation on the mechanical structure of the helicopter: MRB _ OPR _ Struct -Mecha , with two characteristics:
J operation resource: MRB _ OPR _ Struct -Mecha _ TR with the the cost indicator: OPR _ Struct -Mecha _ CST with the domain [1, 6000], the workload indicator: OPR _ Struct -Mecha _ WLD with the domain [1, 3000].

These variables are linked by two constraints: c 1 links MRB _ JOB _ HT , MRB _ OPR _ Struct -Mecha _ LV and
MRB _ OPR _ Struct -Mecha _ TR as described in Table 1 , c 2 links MRB _ JOB _ ST , MRB _ OPR _ Struct -Mecha _ TR and OPR _-Struct -Mecha _ WLD as described in Table 2 ,
We notice that the variable OPR _ Struct -Mecha _ CST is not linked to the other variables because, the corresponding knowledge has not been modelled and is thus missing in the model.

CBV : Case base variables : As said previously, in Section 2.2 , the effective maintenance operation descriptions EFF _ OPR _ V belong only to the CBR models. In order to simplify our problem, we only consider: one operation, the operation on the mechanical structure of the helicopter: EFF _ OPR _ Struct -Mecha , with two characteristics: the cost indicator: OPR _ Struct -Mecha _ CST _ EFF , the workload indicator: OPR _ Struct -Mecha _ WLD _ EFF .
We also need to identify the distances between the possible values of MRB _ JOB _ HT and MRB _ JOB _ ST . These distances are d
Algorithm 2. K NOWLEDGE _I NTER ( DPV ) 2  X  2  X  2 LoRV is the list of modified variables belonging to CSV . 2  X  2 LoFV is the list of fixed variables belonging to CBV . Begin
LoRV  X  all the design variables of CSV with a modified domain 2  X  2 The algorithm starts by filtering all CSV variables :
While  X  LoRV a |  X  Do 2  X  2 v corresponds to the first variable of LoRV v  X  p op  X  LoRV  X 
If  X  v is associated to a contextual constraint  X  Then
CBR_ r equest  X  X  context _ CBV _ set  X  , contextc v , mn c
F i lter _CSP  X  v  X  LoRV  X  all the new reduced variables of CSV
End While 2
LoFV  X  all the new  X  X  X ixed X  X  variables of CBV : CBV \ FVS 2 2
S e arch _CBR  X  LoFV , mn , ms  X  2 Return DPV described in Table 5 for the helicopter type and d 4 described in Table 6 for the service type.

For these CBV variables, when many cases need to be considered for treatment (advice and contextual constraint filtering process), an expert has identified the way of fulfilling them from past cases:
EFF _ OPR _ Struct -Mecha _ TR : all the values of the operation resources are given,
EFF _ OPR _ Struct -Mecha _ LV : all the values of the operation levels are given,
OPR _ Struct -Mecha _ CST _ EFF : the interval of relevant cost values is retrieved, between the four previous distances: F  X  X  d 1  X  d 2  X  2 n d
For computing the similarity score of a case, we consider the distance between values of the fixed variables FVS and the value 1 for the others. The case base contains five past cases as presented in Table 7 .
 posed of 10 design problem variables with two variables D six variables D CSV and six variables D CBV ,asshownif Fig. 12 . 4.3.2. Running scenario cing processes presented respectively in Sections 4.1 and 4.2 .
Firstly, we consider only the interactive knowledge juxtaposition without any contextual constraints. Secondly, we add to the CSP model a contextual constraint in order to compute the cost of the operation OPR _ Struct -Mecha _ CST .

DPV : J OPR _ Struct -Mecha _ CST  X  [1, 6000],
J OPR _ Struct -Mecha _ WLD  X  [1, 3000], on the CBV , all the cases give their values as advised values:
J EFF _ OPR _ Struct -Mecha _ TR  X  { tr _5, tr _1} because all the
J EFF _ OPR _ Struct -Mecha _ LV  X  { light } because all the values
J OPR _ Struct -Mecha _ CST _ EFF  X  {[600, 1500]} because the
J OPR _ Struct -Mecha _ WLD _ EFF  X  570 because the average
For both of the running examples, we consider only three user inputs: MRB _ JOB _ HT  X  Tiger , MRB _ JOB _ ST  X  Complete ,
OPR _ Struct -Mecha _ WLD  X  2500, at the end, before storing the case.

The filtering algorithms are based on arc-consistency as defined by Mackworth and Freuder (1985) for discrete variables and Lhomme (1993) for continuous ones.

At the end of the maintenance service, the user can complete the effective parameters and ask to store the case.
 Interactive knowledge juxtaposition : After the first user X  X  input
MRB _ JOB _ HT  X  Tiger , the knowledge-based system is going to use in sequence:
Filtering phase on the CSV variables. The filtering mechanism deduces: J unchanged: MRB _ JOB _ ST  X  { Complete , Interim , Mini },
J changed: MRB _ OPR _ Struct -Mecha _ TR  X  { tr _1, tr _5} via the J unchanged: MRB _ OPR _ Struct -Mecha _ LV  X  { complex , light }, J unchanged: OPR _ Struct -Mecha _ CST  X  [1, 6000], J unchanged: OPR _ Struct -Mecha _ WLD  X  [1, 3000].

Retrieval phase on the CBV variables. The retrieving mechan-ism advises via the request S EARCH _CBR( LoFV  X  { MRB _-JOB _ HT  X  Tiger }, mn  X  5, ms 4 0 : 9) the following domains. The similarity score for each case is presented in Table 8 : J EFF _ OPR _ Struct -Mecha _ TR  X  { tr _5, tr _1}, J EFF _ OPR _ Struct -Mecha _ LV  X  { light }, J OPR _ Struct -Mecha _ CST _ EFF  X  {[600, 1500]},
After the second user X  X  input MRB _ JOB _ ST  X  Complete , the knowledge-based system is going to use in sequence:
Filtering phase on the CSV variables. The filtering mechanism deduces:
Retrieval phase on the CBV variables. The retrieving mechan-ism advises via the request S EARCH _CBR( LoFV  X  { MRB _-
JOB _ HT  X  Tiger , MRB _ JOB _ ST  X  Complete }, mn  X  5, ms 4 0 : 9) the following domains from cases 4 and 5. The similarity score for each case is presented in Table 9 : The only difference lies in the advice relevant to variable tr _5.

At the end of the service, the user can complete the effective parameters and ask to store the case. For instance, (s)he can arrive at the following result: user X  X  inputs: CSP deduced values: CBR effective values:
If (s)he wants, (s)he can ask to store the values of the CBV into the CBR database.

Interactive knowledge interlacing : Now, we add to the CSP model a numerical constraint nc 1 and a contextual constraint cc 1 in order to compute the cost of the operation OPR _ Struct -Mecha _ CST . The numerical constraint nc 1 links OPR _ Struct -
Mecha _ CST and OPR _ Struct -Mecha _ WLD thanks to the variable a with the domain D a  X  X  1 ; 2 : OPR _ Struct -Mecha _ CST  X 
Struct -Mecha _ WLD . The contextual constraint cc 1 links a to the ratio of two CBV variables ( OPR _ Struct -Mecha _ CST _ EFF , OPR _-
Struct -Mecha _ WLD _ EFF ). This constraint cc 1 is then described as Struct -Mecha _ WLD _ EFF , mn c  X  10 , ms c 4 0 : 85  X  .
The updated illustrative mode listhencomposedof10design problem variables with two variables D CCV ,sixvariables D variables D CBV , and one computational variable as shown in Fig. 13 .
After the first user X  X  input MRB _ JOB _ HT  X  Tiger , the knowledge-based system is going to use in sequence:
Filtering phase on the CSV variables. The filtering mechanism deduces: knowledge-based system is going to use in sequence: variables, in our case the theoretical cost from [1, 6000] without any contextual knowledge to [1625, 5625] consider-ing contextual knowledge and user inputs.

Retrieval phase on the CBV variables. The retrieving mechan-ism advises via the request S EARCH _CBR( LoFV  X  { MRB _ JOB _
HT  X  Tiger , MRB _ JOB _ ST  X  Complete }, mn  X  5, ms 4 0 : 9) the fol-lowing domains. The similarity score for each case is presented in Table 9 : J EFF _ OPR _ Struct -Mecha _ TR  X  { tr _1}, J EFF _ OPR _ Struct -Mecha _ LV  X  { light },
J OPR _ Struct -Mecha _ CST _ EFF  X  {[1300, 1500]}, only cases
J OPR _ Struct -Mecha _ WLD _ EFF  X  800, only cases 4 and
At the end of the service, the user can complete the effective parameters and ask to store the case. user X  X  inputs: J MRB _ JOB _ HT  X  { Tiger }, J MRB _ JOB _ ST  X  { Complete }, CSP deduced values: J MRB _ OPR _ Struct -Mecha _ TR  X  { tr _1}, J MRB _ OPR _ Struct -Mecha _ LV  X  { light },
J OPR _ Struct -Mecha _ CST  X  [1333.35, 1538.46], values
J OPR _ Struct -Mecha _ WLD  X  2500, last user input, consistent CBR effective values:
J EFF _ OPR _ Struct -Mecha _ TR  X  { tr _5}. In reality, the tr _1 J EFF _ OPR _ Struct -Mecha _ LV  X  { light },
J OPR _ Struct -Mecha _ CST _ EFF  X  {760}, corresponding to the
J OPR _ Struct -Mecha _ WLD _ EFF  X  {420}, corresponding to the
If (s)he wants, (s)he can ask to store the values of the CBV into the CBR database. 4.3.3. Synthesis
In this section, we have proposed a complete coupling process using at the same time general and contextual knowledge in order to help designers make the best decisions.

This process is iterative and is able to juxtapose and interlace knowledge deduced from the CSP and the CBR depending on the availability of knowledge. For each of the assistance types, we have proposed an algorithm that explains the aiding design process and we have illustrated it on a simplified industrial problem.
Our approach is quite original because firstly, the two tools really work together and not in a sequential way, as it has been previously studied: they have to exchange and share knowledge in order to find a solution. Secondly, they are used in an interactive aiding design process, meaning that designers input progressively their design requirements in order to complete the current design. Our approach has been developed and tested on the industrial example presented in Section 2 . 5. Conclusion
In this paper, we have presented a new way of associating general and contextual knowledge in order to help designers make the best decisions.

We have begun with a reminder of the different ways of modelling these two kinds of knowledge and by using Artificial Intelligence tools as CSP and CBR . We have then reviewed the process of each of these tools and explained how knowledge are modelled in such tools. We have also presented the industrial problem which is at the origin of our proposals.

We have then reviewed on the studies which have already mixed CSP and CBR approaches. These studies have focused on the validation, on the enrichment and on the sequential uses of the two kinds of knowledge. The sequential uses do not combine the two kinds of knowledge on a same design decision as the designer might expect.

We have therefore proposed a complete coupling process using general and contextual knowledge at the same time in order to help designers make better decisions. This process corresponds to the use of the two tools in a simultaneous way in order to make the most of general and contextual knowledge. Two types of assistance have been identified depending on the availability of knowledge:
In the first one, the knowledge-based system juxtaposes the general and contextual knowledge. General knowledge prunes the solution space while contextual knowledge is used to provide advices to the user,
The second one, the knowledge-based system interlaces the two types of knowledge in order to give more accurate information to the designer. This information corresponds to some specific constraints, named contextual constraints . The contextual constraints link variables belonging to the CSP and to the CBR models and always use updated knowledge thanks to the past cases database.

Our knowledge system matches designers X  expectations: the two types of knowledge are complementary and their simulta-neous use provides more accurate results and better quality information. Their mix (juxtaposition or interlacing) depend on the capability and the skill of the experts to express design relations (constraints, contextual constraints, distance similarity, value fulfillment). The designers can then benefit from general and contextual information in a single system. Our approaches have been developed and tested on an industrial example that highlights the kind of assistance that our knowledge system can provide.
Concerning the contextual constraints, it could be very inter-esting to be able to select some of them or to tune them depending on some CSP variables, to link several CSV to several CBV in a single constraint and to search on cases with several CBV values. We can also use data mining to extract rules from the relevant cases supplied by the CBR . These rules can be translated into constraints and inputted in the CSP model during the filtering process, under specific conditions.
 Acknowledgements
The authors wish to acknowledge the Aerospace Valley Asso-ciation and all partners in the project, and in particular the experts of Helimaintenance R &amp; D for their involvement in the building of the illustrative model.
 References
