 A multi-mode network typically consists of multiple hetero -geneous social actors among which various types of interac-tions could occur. Identifying communities in a multi-mode network can help understand the structural properties of th e network, address the data shortage and unbalanced prob-lems, and assist tasks like targeted marketing and finding in -fluential actors within or between groups. In general, a net-work and the membership of groups often evolve gradually. In a dynamic multi-mode network, both actor membership and interactions can evolve, which poses a challenging prob -lem of identifying community evolution. In this work, we try to address this issue by employing the temporal information to analyze a multi-mode network. A spectral framework and its scalability issue are carefully studied. Experimen ts on both synthetic data and real-world large scale networks demonstrate the efficacy of our algorithm and suggest its generality in solving problems with complex relationships . J.4 [ Social and Behavioral Sciences ]: Sociology; H.3.3 [ Information Search and Retrieval ]: Clustering; I.5.3 [ Pattern Recognition ]: Clustering Algorithms, Experimentation, Performance Evolution, Multi-mode Network, Community Evolution, Dy-namic Network Analysis, Dynamic Heterogeneous Network
Social network analysis [35] is attracting increasing at-tention in many fields besides sociology, including epidemi -ology [20], intelligent analysis [5], targeted marketing a nd recommendation systems [28], etc. Most existing work con-centrates on one-mode network. That is, there is only one type of social actors (nodes) involved in the network and the ties (interactions) between actors are of the same type. This is common in a broad sense such as friendship network, Internet, phone call network, etc. However, some emerging applications such as web mining, collaborative filtering, a nd online targeted marketing involve more than one type of actors and multiple heterogeneous interactions between di f-ferent types of actors. Such a network is called multi-mode network (also known as heterogeneous network) [35].
Take targeted marketing as an example. A three-mode network can be constructed: users, queries, and online ads, as shown in Figure 1. Note that in the figure, both queries and ads are also considered as  X  X ocial actors X , though the user is still the major mode under consideration. There are different interactions among the three types of entities : Users issue queries when searching for his/her desired prod -uct; users can click on those ads that seem interesting to him/her; queries and ads are related to each other naturally by its semantic meanings. Intuitively, two users submittin g similar queries or browsing related ads might share similar interest. Queries relating to ads of the same/similar prod-uct, and submitted by users within a single session are more likely to be related.

One way for one-mode networks to handle the example above is to construct a similarity network on user profiles or queries. Multi-mode network, by employing the relationshi p between different types of objects, could shed light for ac-curate online marketing with limited user information. The network might become more complicated if there are inter-actions between members of the same mode (say, friend-ship networks between users, similarity networks between queries) or attributes associated with certain objects (li ke the product information of the ads).
Another example of multi-mode network is academic pub-lications as shown in Figure 2. Various kinds of related ob-jects (researchers, conference/journals, papers, words) are considered. Scientific literature connects papers by cita-tions; and papers are published at different places (con-ferences, journals, workshops, thesis, etc.); Meanwhile, re-searchers are connected to papers through authorship. Some might also relate to each other by serving simultaneously as journal editors or the program committees of a conference. Moreover, each paper can focus on different topics, which are represented by words. Words are associated to each other based on semantics. At the same time, papers connect to different conferences, journals (venues for publication). In other words, multiple types of objects exist in the same net-work, and objects relate to others (either the same type or different types) through different links. Several objects might have some attributes as well.

Within a multi-mode network, different types of social ac-tors tend to form groups or communities 1 . For instance, users sharing similar interest are more likely to form the same group; queries are clustered naturally if they are re-lating to similar products; and ads are clustered if they aim at the same/similar products. A special case is when there exists a one-to-one correspondence relationship be-tween groups of different modes (user-query-ads), and the actors inside the the group interact with each other fre-quently. More generally, a user group could interact with multiple groups of another mode (i.e., users can have mul-tiple interests, thus relating to various query groups). On e mode network always assumes that the within-group inter-action are dense and between-group interaction are sparse. Different from an one-mode network, a community inside a multi-mode network might have no within-group interaction yet share similar patterns while interacting with groups of other modes.

Some work has been done to identify communities in a net-work of heterogeneous objects or multiple relations [33, 23 , 25] in terms of multi-type relational clustering. However, these methods concentrate on static networks. In reality, some networks tend to evolve gradually; the communities inside a network could grow or shrink, and the membership for specific social actors can shift gradually [8, 19, 4, 21]. In a multi-mode network, actors of different modes evolve differ-
Group and community are interchangeable in this work. ently. For instance, in previous academic example, the inte r-actions between different actors change every year. Within the network, researchers can divert their personal researc h interests, and the  X  X ot X  topics of a field could also change. On the contrary, the community of  X  X ournals/conferences X  tends to be stable, but two venues could also be connected due to the topic change. For instance, social network analy-sis joins researchers from diverse fields recently, thus mak ing those journals on social science becoming more related to transactions concentrating on data mining.

Facing heterogeneous actors with dynamic interactions, discovering the community evolution can benefit in various aspects: 1) to detect the user interest shift leading to more effective targeted marketing; 2) to help browse a long his-tory of network or literature by showing the long-term trend ; 3) to detect suspicious financial online activities if the su b-ject suddenly signals a drastic change in transaction patte rn, etc. However, the problem becomes more challenging in dy-namic multi-mode networks as the evolution of each mode becomes correlated.

In this work, we propose a general model to identify com-munity evolution in dynamic multi-mode networks by adopt-ing a spectral clustering framework. Essentially, the dy-namic multi-mode network consists of a series of network snapshots. We aim to find out how a community evolves. In this model, the effect of temporal change is adopted as a reg-ularization term while performing the clustering. It can be shown that the interactions between two modes, and cluster-ing result of neighboring time stamps can be considered as attributes in a sense, which connects dynamic multi-mode network analysis to classical attribute-based data mining . An iterative algorithm, which does not suffer from hardware constraints even with tens of thousands actors, is presente d to find an optimal solution of the model. The experiments on both synthetic and real-world large scale network data demonstrate the efficacy of our algorithm and suggest its generality in solving problems with complex relationships .
The paper is organized as follows. We present a general framework to find community evolution for dynamic multi-mode networks in Section 2. An iterative solver is provided in Section 3. After that, we also discuss how to handle an actor dying or a new actor joining the network, and other multi-mode networks of diverse properties. In Section 5, extensive experiments on both synthetic and real-world dat a are conducted to study the efficacy and efficiency of our framework. We review some related literature in Section 6 and conclude in Section 7.
We follow the framework presented in [23]. Given an m -mode network with m types of actors where n i is the number of actors for X i , we aim to find how the latent community evolves. In our framework, we only consider discrete time stamps by taking a series of snapshot s, which is commonly adopted in network analysis with tem-poral information [4, 21]. For snapshot at time t , a network N t is represented as multiple interactions between different two modes of actors X i and X j at time stamp t , k i and k denote the number of latent communities for X i and X j re-spectively. Ideally, the interaction between actors can be approximated by the interactions between groups in the fol-lowing form [24, 12]: ship for X i at time stamp t , and A i,j represents the group interaction. In other words, the group identity determines how two actors interact, which is essentially making simi-lar assumption as block models [27]. The difference is that block models deal with the problem from a probabilistic as-pect and concentrate on one-mode or two-mode networks. Here we try to identify the block structure of multi-mode networks via matrix approximation: The constraints in 2 and 3 force each row of the indicator matrix to have only one entry being 1. That is, each actor belongs to only one community.

Naturally, for dynamic multi-mode networks, the objec-tive function without considering its temporal effect can be formulated as where w ( i,j ) a are the weights associated with different inter-actions. Unfortunately, the discreteness of the constrain ts in (2) and (3) makes the problem NP-hard. A strategy that has been well studied in spectral clustering [37] is to allow the cluster indicator matrix to be continuous and relax the hard clustering constraint as follows: Hence, the problem becomes F 1 : min Then we have the following theorem:
Theorem 1. Let C ( i,t ) , 1  X  i  X  m, 1  X  t  X  T be a valid solution of F 1 , then e C ( i,t ) as defined below is also a valid solution with the same objective value.
Proof. It suffices to show that the value of each single term does not change. Given a solution C ( i,t ) and A t i,j which completes the proof.

The formulation F 1 does not consider the relationship be-tween consecutive time stamps. But in reality, the cluster-ing tends to evolve gradually. To get a smooth community evolution, we add a regularization term  X  which forces the clustering sequence to be as smooth as possible: Here, the coefficient 1 2 is presented due to notational con-veniences in later parts. Indeed, we are making a Markov assumption using this regularization. That is, current clu s-ter should be similar to the clustering results in previous time stamp.
 Note that we do not take the regularization as which seems more natural at first glimpse. Since C ( i,t ) essentially equivalent under an orthogonal transformatio n as demonstrated in Theorem 1, comparing them directly does not necessarily capture the difference between the cluster indicator at different time stamps. On the contrary, the regularization term (5) captures the difference of communit y structure of neighboring time stamps, and it is independent of the orthogonal transformation. With this regularizatio n, the problem can be formulated as: F 2 : min + 1 2 with w ( i ) b being the trade-off between the loss of interaction approximation and temporal regularization. The evolution is assumed to take effect gradually. Essentially, we aim to find a community structure which is consistent with the in-teraction matrix, whereas not too different from that of the previous time stamp.
Here, we give an effective iterative algorithm to solve the formation F 2 in (6).
Theorem 2. If C ( i,t ) are given, the optimal group inter-action matrix A t i,j can be calculated as
Proof. Since A t i,j appears only in a single term, we can focus on the term to optimize A t i,j .
The 2nd line is obtained via the property that tr ( AB ) = tr ( BA ) and column orthogonality of C ( i,t ) and C ( j,t )
By setting the derivative with respect to A t i,j to zero, it follows that The proof is completed.
Given the optimal A t i,j , it can be verified that Meanwhile, we have the temporal regularization term Since || R t i,j || 2 F in (7) and k i in (8) are constants, we can transform F 2 into the following objective:
Note that C ( i,t ) is interrelated with both C ( j,t ) and C and there is no direct solver in general. However, it can be be solved as follows: puted as the top left singular vectors of the matrix P t i catenated by the following matrices in column-wise:  X 
Proof. We only focus on those terms in the objective involving C ( i,t ) . Without loss of generality, we discuss the cases when 2  X  t  X  T  X  1 first.
 where M t i is defined as So the problem boils down to a max trace problem with or-thogonality constraint as in (4). According to Ky-Fan theo-rem [6], this max-trace problem has a closed form solution, which corresponds to the subspace spanned by the top k i eigen vectors of M t i .

Note that M i is a square matrix of size n i  X  n i . When the number of actors in X i is huge, direct calculating M and its eigen vectors could be problematic. Instead, we can represent M t i in the following matrix form: where P t i is concatenated by the following matrices in column-wise:  X  For t = 1 or t = T , we only need to keep C ( i,t +1) or C of P t i is much smaller compared to M t i if the number of clusters of each mode is small. Let the SVD of P i as P i U  X  V , then M i = U  X  2 U T . That is, the top left singular vectors [ u 1 ,  X  X  X  , u k i ] corresponds to the top eigen vectors of M i , which completes the proof. Typically, we can use some methods like Arnoldi method [15] to calculate only its top left singular vectors, which could alleviate the computati onal burden for large-scale sparse networks.

As can be seen in (12), the clustering result of neighboring time stamps and clustering of interacted objects, essentia lly form weighted features for clustering of the i -th mode. M being the inner product of P t i , acts like a similarity ma-trix for clustering. Based on Theorem 3, we can update the cluster indicator matrix iteratively based on the  X  X ttribu tes X  obtained from the clustering results of related objects and neighboring time stamps. Given the cluster indicator ma-trix, one problem remains to be addressed is how to recover the discrete hard cluster based on cluster indicator matrix . k-means has been shown to be an effective post-processing method [3]. The overall description of the algorithm is pre-sented in Figure 3. In the algorithm, we specify the ob-jective to be calculated via F 3, as direct calculation of the original formation F 2 usually requires computation of dense matrices, which is not applicable for large scale multi-mod e networks.
Based on the framework proposed in previous section, it is easy to extend the model to handle other multi-mode net-works with various properties.
Actor Attributes . As we have shown in the introduc-tion, a multi-mode network might have attributes for certai n modes of actors. In this situation, we can simply add the weighted attributes as features in P t i (12) when updating the cluster indicator matrix. That is: where F t i denotes the attributes for actors in mode i , and w c denotes the weight.

Within-mode Interactions . It is possible that there is within-mode interaction in a complicated network, e.g, the paper citations in the example of academic publications (Figure 2). For undirected within-mode interaction, we can just add interaction matrix to M t i (10). For directed within-mode interaction R i,i , we can construct a symmetric simi-larity matrix by averaging the commutative strength of in-teractions: or compute a normalized similarity matrix following random walk as shown in [38]. As for one mode, actors within the same community tend to have dense within-group interac-tion and sparse inter-group interaction. This observation is naturally obeyed when the similarity matrix M t i is affected with within-mode interaction for updating clustering.
Inactive and Emerging Nodes . Some actors might become inactive at a certain time period. Meanwhile, new actors might join the network at a specific time stamp. The framework presented in previous section focuses on cases where actors under study do not change. Here, we analyze more realistic cases where actors hibernate or join a networ k.
Note that our derived algorithm just uses C ( i,t  X  1) as at-tributes for current time stamp. When an actor dies or hibernates at certain time stamp, we can delete the entry in C ( i,t  X  1) when updating C ( i,t ) . However, after deletion, the orthogonality constraints might not be satisfied. Since our framework is an approximation to the hard clustering, some tiny deviation from orthogonality does not affect the performance. On the other hand, when lots of actors be-come inactive, the total weights of remaining actors after removal is relatively small, thus affect less while calculat -ing the similarity matrix M t i . This also makes sense since a drastic membership change denotes the latent community is experiencing an  X  X arthquake X , thus it is not necessary to over-regularize the temporal change.

When X i at time stamp t has new actors, a reasonable way is to set the entries related to the new actors in similarity similarity as in[10]. We adopt a simple strategy in this case by setting the entries corresponds to the new nodes to 0 in C ( i,t  X  1) . As we know, the indicator matrix approximates the discrete cluster by 1 /  X  n i [37], where n i is the number of members in the cluster. Hence, setting the new actor X  X  indicator matrix of neighboring time stamps to 0, has the tendency to attach this new member to the large community.
Online Clustering . In some real-world scenarios, the task is to track the cluster evolution in an online fashion. Then the algorithm could be modified accordingly. Instead of iteratively updating C ( i,t ) , we fix t . The corresponding updating matrix P t i and M t i only involve fixed C ( i,t  X  1)
In this section, we compare our proposed evolutionary method in Figure 3 with the method that does not consider any temporal information on both synthetic and real-world data. For completeness, we include the results of both onlin e and offline evolutionary methods.
Since typical real-world data does not have the ground truth (the latent community of each social actor at certain time stamp) available, we resort to synthetic data as a proof of concept to show the efficacy of our algorithm. The syn-thetic network consists of three modes: A , B and C , with 2, 3 and 4 clusters, and 50, 100, and 200 actors, respectively. The interactions occur between each of the two modes. To generate the interaction, we  X  Determine the latent community for each actor;  X  Generate interactions following a Bernoulli distribution
To simulate the evolution,  X  The community membership is determined in the initial  X  The probability of interaction between different groups  X  Uniform random noise is added in each time stamp.
Three methods are compared: independent, online, and evolutionary spectral multi-mode clustering. To study the property of the methods, we generate data of various noise level. For each level, 10 synthetic network are constructed . For simplicity, we set all the weights w ( i,j ) a and w i 1, and deem the algorithm to be converged if the relative objective change is less than 10  X  6 . Normalized mutual in-formation (NMI) [31] is adopted to evaluate the clustering performance. NMI is a measure between 0 and 1. NMI=1 when two clusters are exactly the same. The average per-formance of all the methods are reported in Table 1.
It is evident that the performance deteriorates as the noise increases. When the noise level is low (the left part of the ta -ble), all the methods perform similarly. When the noise is of medium level, our proposed evolutionary multi-mode clus-tering approach outperforms the other two. Surprisingly, i t is difficult to distinguish online clustering from independe nt clustering. This is probably due to the fact that we do not perform any parameter tuning.

To show the effect of parameter tuning, we choose one data set of medium noise level and apply both online clus-tering and evolutionary multi-mode clustering with tempo-ral weights w b varying from 0 . 01 to 1000 and w a fixed to 1. As shown in Figure 4, it might worsen the performance if the temporal weight is too large, that is, when the temporal regularization dominates. However, for all the three modes A , B and C , taking into account the temporal information could help clustering. This is implied when the temporal weight is within the range of 0.01 and 100. It is noticed that complicated clustering structure (e.g. mode C has more clusters than the other 2 modes) requires a larger temporal weight. This could be suggestive for practical deployment. We also plot the average computation time in Figure 5. Independent clustering takes the least time and online clus -tering is comparable. Evolutionary clustering requires mo re time compared with others. This is especially severe when the noise level is very high. In that case, the temporal smoothness is destroyed, thus our algorithm requires more iterations to find an optimal. Two publicly available network data are selected: one is Enron email corpus 2 , and the other is DBLP data 3 .
Enron data [18] provides email documents collected from 150 senior executives in the Enron company. Based on the email communication, we construct a three-mode network (user, email, words) for each month. Here, we focus on users (i.e., email addresses) who send and receive at least 5 email s, reducing the total number of users to 2,359. In addition, we http://ciir.cs.umass.edu/%7Ecorrada/enron/ http://kdl.cs.umass.edu/data/dblp/dblp-info.html remove top frequent words occurring in more than 19,000 documents, and those infrequent words with document fre-quency less than 10, resulting in a vocabulary of 36 , 658 words. Due to the data collection problem, the initial stage yields low email traffic. Thus, we only consider the time period from April, 2001 to March 2002. There are three in-teractions in each month: sender-email, email-receiver, a nd email-words. The weight of email-receiver is normalized by the number of receivers. For word frequency, we notice that some words occur very frequently in one email. To avoid the dominance of these bursty words, we set the weight of inter-action to be log(word freq) + 1 and then scale each email to unit length.

As for DBLP data, four modes are considered: papers, authors, terms (words extracted from the title), and venues (conference or journal names). We extract papers published between 1980-2004, remove those papers without authors or venue information, and terms with low document frequency (less than 20) and stop words, resulting in 491,726 papers, 347,013 authors, 2,826 venues, and 9,523 terms. Figure 6(b) demonstrates the number of papers, active authors, venues, and terms in each year, respectively.
Different from synthetic data, no ground truth of the com-munity membership is available for real-world data. Thus it is difficult to verify the performance of our proposed method directly using NMI as shown on the synthetic data. Instead, we present an approach to compare the relative performance of different methods. For convenience, we present the evalu-ation approach based on the Enron data here. Similar strat-egy can be derived for the DBLP data.

We follow the standard approach to split the Enron data of each month into two parts. The first half is used for training to obtain the clusters of users and words, and the remaining half is used to measure how the cluster approximates the interaction. Notice that there is no overlap between traini ng and test documents, so the clustering result of emails canno t be verified. Therefore, we only focus on how the cluster of words and users approximate the interaction in the test data .
Suppose we are given an interaction R email,i between email and X i (being sender, receiver, or words) for testing. Ideally, R email,i can be factored into the following form where C denotes the cluster membership of different modes. To measure the quality of C i , one natural solution is to use the approximation error R email,i  X  C email AC T i . A cluster indicator matrix can be constructed based on the cluster membership and then plugged into C i to minimize the ap-proximation error. Note that the calculation of a hard clus-tering of C email might introduce more noise in the process, so we directly approximate R email,i by C T i in the following form: It is not difficult to verify that the minimal value is || R || || RC || 2 F , obtained when B = RC . Since || R || 2 F is a con-stant, the cluster assignment that maximizes || RC || 2 F a low approximation error. Therefore, we adopt || RC || 2 measuring the quality of a clustering result. The larger the value, the better a cluster.

Note that this strategy, essentially, is to approximate the sparse interaction with group interaction blocks. Even wit h the true latent community structure, the approximation er-ror could still be large. It is not appropriate to determine the significance of improvement by comparing the absolute value directly. Here, we adopt this measure mainly to com-pare the relative performance of different methods.
For simplicity, we set all the input weights of the algo-rithm in Figure 3 to 1. The number of communities of each mode is fixed to 50 and 20 for Enron and DBLP, respec-tively. The performance of different methods on Enron data are reported in Table 2. Note that most of the time, our pro-posed method works best. Except three months: October, November 2001, and January 2002, in which independent multi-mode clustering method works best. Note that during these three months, the email communication is abundant as shown in Figure 6(a). That is, when the training process has enough data, it is not necessary to consider any tem-poral information. Online clustering, as shown in the table , yields a limited improvement and sometimes could worsen the performance.

For DBLP data, as shown in Table 3, evolutionary cluster-ing often outperforms other two. Online clustering occasio n-ally performs best, and usually better than clustering with -out temporal regularization. Independent clustering, whi ch does not consider temporal smoothness, tends to overfit the training data with a poor latent community structure. In general, taking into account the temporal smoothness helps to extract a better community structure.

One question remains: dose our method find out meaning-ful community and evolutions in reality. In the first block of Figure 6(c), we show one example of venue community concentrating on Web extracted from our method, which is reasonably consistent with the topics associated with thos e conference and journals. To check the validity of our method for detecting evolution, we focus on NIPS conference as an example. We found that NIPS is associated with Neural Network in 1995, but is more aligned with machine learn-ing later as shown in the second block of Figure 6(c). This indicates that our method can detect the evolution of com-munity in multi-mode networks and find out the latent com-munity more accurately.

We also recorded the computation time for all the methods in Table 4. Independent clustering converges quickly, whil e online clustering moderately increases the time, and evolu -tionary clustering costs most computational time. However , as seen in the table, the computational cost is of the same order on both data sets. We found out that independent cluster usually converges in 3 or 4 iterations, whereas evo-lutionary clustering requires less than 10 iterations. Method Independent Online Evolutionary
There have been extensive works studying the structural property of interactions between actors. One probabilisti c approach is the stochastic block model [27], in which the lin k between actors is generated conditioned on the latent clust er membership of actors. Two actors within the same cluster are treated stochastically equivalent . That is, the interac-tions between ( A 1 , B 1 ) and ( A 2 , B 2 ) have the same proba-bility if A 1 and A 2 , B 1 and B 2 belong to the same cluster, respectively. In classic block models, the number of cluste rs are fixed. The work in [17] replaces the constraint by assign-ing a Chinese restaurant process as a prior to generate clus-ter membership for each actor, thus the number of clusters can be automatically determined by assigning proper prior. Mixed block model is also developed [1]. Long et al [25] pro-poses a probabilistic framework similar to stochastic bloc k model to handle multi-mode networks with interactions and attributes. Typically, some MCMC technique is employed to approximate the inference. With the development of topic models [7], it is also extended to model documents within a social network [39], and the author/document, or sender/receiver/email interactions [34, 26]. The model is typically specific for certain type of documents like Emails or papers.

Another attempt to model the structure is latent space model. Intuitively, latent space models map the social acto rs to a latent low-dimensional space such that the actors whose positions are closer to each other are more likely to interac t with each other [29, 16]. However, existing latent space models mainly study one-mode networks. Some works try to address the problem in multi-mode networks. [14] essential ly study a two-mode network (authors and words) and maps both authors and words into the same Euclidean space.
Spectral relational clustering, which is most related to multi-mode network, tries to discover the latent structure based on multiple relational tables. As the original prob-lem of finding discrete cluster assignment (e.g., the entrie s of membership vector are either 0 or 1) is NP-hard, spectral clustering relaxes the constraint to allow the membership vector to be continuous. The initial work of co-clustering [ 11, 36, 24] tries to address the problem of clustering both words and documents simultaneously by taking the advantage of bipartite. [13] extends the problem to a star-typed net-work with multiple heterogeneous data object, and proposes semi-definite programming to solve the problem. [33] pro-poses reinforce clustering for multiple heterogeneous dat a objects. In [23], a general spectral clustering framework i s proposed to handle multi-type relational clustering with d if-ferent kinds of objects and attributes, and an alternating optimization algorithm is presented to find a local optimal.
Temporal change of social networks has been attracting increasing attentions [8, 2]. It is empirically observed th at some real-world networks are evolving [19] and some practi-tioners try to investigate how the network evolve and what could be a reasonable generative process to model the dy-namics [21] or the critical factors to determine the group evolution [4]. On the other hand, clustering to handle evolu -tionary data is also developed. It is assumed that clusterin g result of current situation should be similar to previous ti me stamps. Instead of taking multiple snapshots of the data and independently clustering objects, evolutionary clust er-ing finds out a sequence of clustering with temporal smooth-ness [9, 10, 22]. Latent space model with temporal change is also developed [30], which aims to find an embedding that is consistent with the trade-off between previous time stamp and current distance information extracted from the social network. [32] proposes a general framework to handle dy-namic single-mode network by casting it as a graph coloring problem and some greedy heuristics is developed to handle large-scale data. All the aforementioned works are focus-ing on data with attributes or single-mode network. In this work, we explore the community evolution in multi-mode networks.
In some real-world applications, social actors of various types interact with each other resulting in a multi-mode network. In such a network, different modes of social actors form their own community and tend to evolve gradually. In this work, we propose an evolutionary multi-mode clusterin g algorithm to find community evolution in multi-mode net-works. Within this framework, it is easy to handle networks with attributes, within-mode interactions, and hibernati ng and emerging social actors. We applied our framework to both carefully designed synthetic data sets and real-world large scale multi-mode networks. It is empirically demon-strated that our algorithm tends to find more accurate com-munity information given a sequence of network snapshots. This is more likely when the collected interactions are few and noise is within medium level. Our algorithm can easily scale to large complicated multi-mode networks of tens of thousands of nodes.

The shortcoming of the current framework is that it needs users to provide weights for different interactions and tem-poral information, as well as the number of communities in each mode. How to automatically determine the weights and number of communities is a challenging problem. An-other possible extension is to consider the evolution of gro up interaction. Currently, our model only considers the group membership change. But the interactions between groups could also change gradually. How to capture both the micro-level evolution of actors and macro-level evolution of grou ps simultaneously requires further research.
The work is in part supported by a MITRE research grant. [1] E. Airodi, D. Blei, S. Fienberg, and E. P. Xing. Mixed [2] S. Asur, S. Parthasarathy, and D. Ucar. An [3] F. R. Bach and M. I. Jordan. Learning spectral [4] L. Backstrom, D. Huttenlocher, J. Kleinberg, and [5] J. Baumes, M. Goldberg, M. Magdon-Ismail, and [6] R. Bhatia. Matrix Analysis . Springer, 1997. [7] D. M. Blei, A. Y. Ng, and M. I. Jordan. Latent [8] R. Breiger, K. Carley, and P. Pattison, editors. [9] D. Chakrabarti, R. Kumar, and A. Tomkins.
 [10] Y. Chi, X. Song, D. Zhou, K. Hino, and B. L. Tseng. [11] I. S. Dhillon. Co-clustering documents and words [12] C. Ding, T. Li, W. Peng, and H. Park. Orthogonal [13] B. Gao, T.-Y. Liu, X. Zheng, Q.-S. Cheng, and W.-Y. [14] A. Globerson, G. Chechik, F. Pereira, and N. Tishby. [15] G. H. Golub and C. F. V. Loan. Matrix Computation . [16] M. S. Handcock, A. E. Raftery, and J. M. Tantrum. [17] C. Kemp, T. L. Griffiths, and J. B. Tenenbaum. [18] B. Klimat and Y. Yang. The enron corpus: A new [19] G. Kossinets and D. J. Watts. Empirical analysis of an [20] M. N. Lauren Ancel Meyers and B. Pourbohloul. [21] J. Leskovec, J. Kleinberg, and C. Faloutsos. Graphs [22] Y.-R. Lin, Y. Chi, S. Zhu, H. Sundaram, and B. L. [23] B. Long, Z. M. Zhang, X. W  X u, and P. S. Yu. Spectral [24] B. Long, Z. M. Zhang, and P. S. Yu. Co-clustering by [25] B. Long, Z. M. Zhang, and P. S. Yu. A probabilistic [26] A. McCallum, X. Wang, and A. Corrada-Emmanuel. [27] K. Nowicki and T. A. B. Snijders. Estimation and [28] J. Palau, M. Montaner, and B. Lopez. Collaboration [29] M. S. H. Peter D. Hoff, Adrian E. Raftery. Latent [30] P. Sarkar and A. W. Moore. Dynamic social network [31] A. Strehl and J. Ghosh. Cluster ensembles  X  a [32] C. Tantipathananandh, T. Berger-Wolf, and [33] J. Wang, H. Zeng, Z. Chen, H. Lu, L. Tao, and W.-Y. [34] X. Wang, N. Mohanty, and A. McCallum. Group and [35] S. Wasserman and K. Faust. Social Netwok Analysis: [36] H. Zha, X. He, C. Ding, H. Simon, and M. Gu. [37] H. Zha, X. He, C. H. Q. Ding, M. Gu, and H. D. [38] D. Zhou, J. Huang, and B. Sch  X  olkopf. Learning from [39] D. Zhou, E. Manavoglu, J. Li, C. L. Giles, and
