 1. Introduction cycle. In this phase, the designers search for the main design parameters that fulfill the design constraints as set by the functional requirements of the product. The search normally requires a search through the design search space for regions at the intersection of all the constraints. An initial evaluation of the search space presents the designer with the feasible values of the design variables. These values are then further refined in the detailed design phase to ensure the product functionality, quality and robustness.  X  X  X et-based concurrent engineering X  X  (SCBE) or set based design is an approach utilized by Toyota to pursue its design process.
SCBE begins by broadly considering sets of possible solutions and gradually narrowing the set of possibilities to converge on a final solution ( Sobek et al., 1999 ). SBCE process allows development of sets of solutions as opposed to point based solution ( Richard et al., 2009 ). These sets can then be refined by keeping into view design/ client preferences or feasibility preferences. As the sets narrow, the depth and detail of information increases thereby refining the sets. In addition to the ability to deal with sets, the SBCE approach is inherently robust as well as it allows for the concurrent integration of knowledge related to different interfaces and thereby taking into account different factors such as manufactur-ing variations, process limitations, etc. earlier on thereby reducing the need for design rework or rejection. The approach presented in this paper draws its basis from the concepts of SBCE to perform the search for the robust solutions in presence of variations and uncertainties. The variations and uncertainties present through-out the product life cycle affect the product and therefore are a cause of deviation in the product performance from the requirements set down by the functional requirements ( Schu  X  ellera and Jensenb, 2008 ). A product that performs according to the functional requirements in spite o f variations and uncertainties is called a robust product. Theref oreinordertodesignarobust product that fulfills the functional requirements in spite of uncertainties and variations it is necessary to modify the design process from the initial stages such that these uncertainties and variations are accounted for and product performance is assured. Robust design aims to achieve the design of products in such a manner that they are able to retain their qualities as long as possible while being insensitive to the changes ( Bras and Mistree, 1995 ). Taguchi introduced the concepts of robust design with design of experiments and the quality loss function ( Taguchi, 1987 ); ( Taguchi, 1978 ); ( Phadke, 1989 ); ( Hans-Georg and Bernhard, 2007 ). Ramakrishnan and Rao (1991) formulate the robust design problem as a non-linear optimisation problem with Taguchi X  X  loss function as the objective. Sundaresan et al. (1993) incorporate a sensitivity index (SI) in the optimisation procedure to determine a  X  X  X obust optimum X  X . Bras and Mistree (1995) and Chen et al. (1996) introduce the compromise decision support problem. Genetic algorithm and differential evolution techniques are used by Rout and Mittal (2008) for noisy optimisation of robot manipulator tolerance optimisation. The robust optimisation techniques may be generally divided into the t echniques using mathematical programming or techniques using simulation ( Hans-Georg and Bernhard, 2007 ).
 This article presents an approach based on the fundamentals of SBCE ( Richard et al., 2009 ; Sobek et al., 1999 ) that performs the design space search for the search and exploration of robust solution sets for a product design by taking into account the noise/ variation and uncertainty directly in the product model with the help of  X  X  X niversal X  X  and  X  X  X xistential X  X  quantifiers from constraint satisfaction problem (QCSP). An algorithm developed with interval arithmetic is also proposed that transforms the quantifier consistency checks to a tool independent computable form thus enabling the application of approach towards the problems of mechanical systems. The solution space returned by the proposed approach is intrinsically robust and allows the designer to choose from a space consisting of multiple robust solutions which can then be adopted according to the specific optimisation needs. The following text is divided into the formalization of the design problem for quantifier adoption with help of a formal syntax, transformation of the syntax for application to the mechanical systems and finally an algorithm to implement and run the developed approach for solution space exploration. In order to illustrate the developed approach different examples of design of mechanical systems with varying degree of complexity have also been proposed in the article, which deal with mechanical design of systems with discrete and continuous variables. 2. Expression of product design in terms of constraint satisfaction Design is a process of constraint identification and satisfaction. The process of constraint satisfaction is complex, because coupling between the constraints hinders the process of searching for a feasible design ( Thornton, 1996 ). A design problem can be viewed as constraint satisfaction problem in which the designer aims to find a solution to the key product parameters such as the functional requirements as stipulated by the client needs are satisfied. In order to formalize and visualize the expression of a design problem describable in terms of set based design as well as in context of robust design, it can be generalized as a mapping from a three dimensional space { V , D , C } to a set of solution constraints { c 1 , y , c k }( Motta and Zdrahal, 1996 ; Yvars, 2009 ).
The set of variables V constitutes all the variables associated in the design problem. Unique values of these variables propose a unique solution for the given design problem. The set of domain D constitutes the space of domains of all the variables in the set V such that for each variable v i A V , there is a corresponding domain d
D which describes the starting search space for the variable v
The set of constraints C constitutes the functional requirements and constraints governing the design of the product where each c is a constraint in form of a relation between design variables or parameters and functional requirements.

For a successful design solution, the goal is to determine the proper values for the design variables which satisfy the design constraints. The design variables may be of the geometric nature, engineering nature or manufacturing nature and may deal with shape, configuration, material, manufacturing process, etc. The design constraints are generally e xpressions consisting of the design parameters, constants, design c onstraints and variables. In an engineering model, the representation of constraints may be algebraic equations or predicates, sometimes with a few additional simultaneous equation for homogen ous solution. Different iterative methods for solving such systems exist which may be generalized in the category of constrained satisf action problems (CSP). Existing methods to solve constraint based design problems include symbolic manipulation, demand-driven evaluations, and numerical methods each of which have their qualities and limits ( Thornton, 1996 ). 2.1. Constraint satisfaction problem (CSP) application limitations to robust design
Classical constraint satisfaction problem (CSP) model is used widely for resolution of problems including the design problems in the field of mechanical engineering. However many practical problems include the further problem of uncertainty of data and or universal quantification of the variables involved ( Benhamou et al., 1999 ; Yvars, 2009 ; Stynes Brown ). A solution to such problems aims to find complete satisfying solutions over a finite domain. As discussed earlier, the aim of robust design is to take into account at the earliest possible stage the different uncertain-ties and variations within the product life cycle. Therefore it is essential that the product design model be capable to represent uncertainties and variations. The representation of the product design problem as a CSP enables the simultaneous representation of the product design variables and constraining parameters but is limited in terms of universal quantification of variables and representation of incomplete or uncertain data which might be used to model the uncertainty or variation in a model ( Stynes
Brown ; Yorke-Smith and Gervet, 2009 ). This necessity limits the applicability of CSP towards set based robust design application.
It is therefore useful to have a method which might integrate the incertitude in the system or in environment at an early design stage. In order to do so we develop an approach based on quantified constraint satisfaction problem (QCSP), which not only integrates the notion of uncertainty in the product but also enables quantification of the variables. The next section presents an introduction towards the basic concept of QCSP. 2.2. Quantified constraint satisfaction problem (QCSP) ( Verger et al., 2006 )
The quantified constraint satisfaction problem (QCSP) is a general extension of the constraint satisfaction problem (CSP) in which variables are totally ordered and quantified either existentially or universally ( Chen, 2004 ). This generalization provides a better expressiveness for modeling problems by allowing universal quantification of the variables. For each possible value of such variables, the values have to be found for remaining, existentially quantified, variables so that all the constraints in the problem are satisfied. The QCSP can be used to model PSPACE-complete decision problem from areas such as planning under uncertainty, adversary game playing, and model checking ( Gent and Nightingale, 2005 ). QCSPs find their applica-tion in a field from video game design to manufacturing problems. Nightingale (2005) is as follows: formula of the form QC where Q is a sequence of quantifiers
Q 1 v 1 , y , Q n v n where each quantifier Q i ( 8 or ( ) quantifies a variable v i and each variable occurs exactly once in the sequence.
C is a conjunction of constraints ( c 1 4 , y , 4 c k ) where each c involves some variables among v 1 ,., v j .
 follows. If C is empty then the problem is true. If Q is of the form a A D ( v 1 ) such that Q 2 v 2 , y , Q n v n C [( v 1 , a )] is true. have extended the notion of Arc consistency of CSP to the QCSP.
Mamoulis and Stergiou (2004) have defined an algorithm for Arc consistency for QCSP for binary constraints. The quantified case
Dantan et al. have proposed the integration of QCSP and quantifiers in the domain of product design by solving the problem of product assembly, tolerance analysis and tolerance allocation for mechanical assemblies with QCSP ( Dantan, 2005 ; Dantan and Ballu, 2002 ; Dantan and Qureshi, 2009 ).
 notion from the previous works as discussed above and apply QCSP technique for integrating the notion of robustness in the
Mechanical design process. 3. Problem formalization
In order to formulate a mathematical model of a system, we need to define the semantics of the model.

A general expression for a parametric design problem has already been defined in Section 2. In order to proceed with the adaptation of the generic problem to the case of robust design, it would be useful to detail the concepts and basic notion of the model to be presented. Considering the set { V,D,C } , the definitions of sets V , D and C will be formalized in accordance to the definition proposed by Vareilles (2005) . 3.1. Variables
V represents the set of all variables in the robust design problem. The elements of V , which are individual variables, are denoted by v i .The types of these variables present in a design problem are governed by the constraints which are imposed on them. The variables in the context of this problem may be categorized into symbolic, numeric, discrete, continuous, design or noise variables depending on the point of view. From a viewpoint of definition, the variables may be categorized into symbolic or numeric, whereas from the viewpoint of continuity, the variables may be categorized into discrete or continuous variables. From the viewpoint of robust design the variables may be categorized as design variables or noise variables. A definition of each type is given followed by their depiction in Fig. 1 .
The symbolic variables should have a defined semantic. These are generally used to define a list of symbols. These variables may be considered as discrete variables as they normally take the choice of a symbol within a list of symbol. An example of symbolic variable in the context of the problem being discussed is the variable representing the choice of a specific material among the list of different material names, e.g. a specific material among a given list of materials (Aluminum, SS304, SS146 y The numerical variables cannot have semantic. They can be further decomposed into discrete numerical variables or contin-uous numerical variables. The discrete numerical variables may be of the integer or real type or of the intervals over the integers and example in this respect may be the choice of number of bolts in a flange coupling. The continuous numerical variables are continuous variables limited by the real intervals. The variable for the thickness of a beam would be a continuous numerical variable bound by its domain (e.g. t A {[0.1,0.6]}. Continuous variables are represented by a bold small case italic letter. From a design perspective the variables may be decomposed into design variables or noise variables. The design variables are the variables which determine the key design dimensions. The thickness, width and length of a beam in a beam design are examples of design variables. The noise variables are all those variables which determine the variability of a related design variable in the design problem. The examples of noise variables include the error in a specific dimension, or variation percentage in a specific material property. Manufacturing variation related to a specific dimension is an example of noise variable. 3.2. Domain
The set D consists of the domains of the variables V . It is useful to mention all the different views of the set D that will be utilized throughout the article. As the set D contains the initial domains of all the variables at the start of the design problem therefore it will be titled problem search space (PSS) as this search space provides the starting point for our optimisation problem. The main search space called Problem search space D is a vector containing the initial domain intervals of the set V . The elements of D are conditioned as per the requirements imposed on them by the class of variables. The solution space ( D solution ) constitutes the space of the acceptable solutions of the set of constraints C domains such that for each constraint c i A C , there is a correspond-ing domain d solutioni A D which describes the acceptable solutions for c i . Mathematically the solution space may be expressed as D 3.3. Constraints
Although constraints used during design include heuristics, tables, guidelines, and computer simulations, a majority of those used can be expressed as mathematical constraints ( Thornton, 1996 ). The constraints or the requirements restrain the problem search space. In this article we define three types of constraints relative to our problem which are discrete constraints, continuous constraints and mixed constraints. The discrete constraints are the constraints where a choice between two or more discrete entities is required. The continuous constraints are those constraints where all the involved variables and parameters belong to the domain of real and continuous numbers and the mixed constraints are constraints involving both the discrete and continuous variables.

The constraints may be expressed in forms of function of variables v i and may be an equality or an inequality. The general form of the constraints may be 3.4. Quantifier notion for the robust parametric design problem
In CSP all the variables are existentially quantified, i.e. the interaction between the variables is existential and unique. As mentioned earlier a specific design solution s i is an instance of assigned values of all variables in the set V such that each variable v has a permissible value such that this value belongs to the corresponding domain d i in the set D . The following definitions characterize different types of design models ( Motta and Zdrahal, 1996 ):
A design model s i is complete if each variable v i from V has a value in s i .

A design model s i is admissible if no constraint in C is violated in s i .

A design model s i is valid if it is admissible and satisfies all applicable requirements.

A design model s i is a solution to a parametric design problem if it is complete and valid.

Extending upon the above definition of the valid design, we define the successful robust parametric design s robust as a design which holds its performance as required in the presence of variation. The robust solution is defined as  X  X  X  design model s robust is a robust solution to a parametric design problem if it is complete and valid and accounts for the each variable v i for variation over totality of problem search space (PSS) X  X .

The mathematical translation of the above statement requires the use of the universal and existential quantifiers from QCSP. The existential quantifiers are used to condition the variables in set V such that each variable (design or noise) is conditioned according to requirement. For the matter of clarity in the following expressions, we will denote the design variables as v i whereas the corresponding noise variables will be denoted by D v i explanation of a valid design and s robust in terms of its mappings of V , D and C can be described as follows:
In case of a valid design, there must exist values for all variables v i from set V where each value of v i belongs to domain d i from set D such that all the constraints c i in the set C are verified .

In case of a robust design, for all values of variables v
V where each value of v i belongs to domain d i from set D while keeping in account all possible values of noise variables D v from set V within their respective domains, all the constraints c in the set C are verified .

In order to address the above described definitions for the valid design and robust design, we need to transform the tuple { V,D,C } with help of the integration of the quantifiers as described in
Section 2.2. Therefore we integrate the general design problem described with QCSP, proposing the mathematical model of the system based on QCSP in the following generalized form: f QV , D , C g X  2  X  where QV  X  set of quantified variables and QV  X  QDV [ Q D V QDV  X  set of quantified design variables Q D V  X  Quantified noise or uncertainty variables.

The existence of a valid design model s robust could be written as f X  ( s robust , 8 D V  X  ,  X  D s , D D V  X  , C g X  3  X 
The emerging system can now be formalized mathematically to a robust solution. In the following section using this description we will propose consistency evaluation criteria for the existence of robust solution set. 3.5. Consistency evaluation for solutions constraints, now we propose the condition for the consistency of existence of solution and existence of robust solution. Using the { QV,D,C } notation developed earlier and the basic concepts of hull and box consistency ( Benhamou et al., 1999 ; Bordeaux, 2002 ;
Mamoulis and Stergiou, 2004 ; Chenouard, 2007 ), we propose the following two conditions for consistency of a solution. The first condition deals with the consistency of existence of a solution for a set whereas the second condition performs the consistency for existence of a robust solution for the sets validated by the first condition. 3.5.1. Existence of a solution must exist a solution belonging to the domain of the design parameters such that the design constraints are satisfied. This can be defined as that at least one configuration of design variables belonging to their respective domain must exist and the functional require-ments are fulfilled X  X .

It can be translated mathematically as ( s i A S : s i A D solution  X  4  X  3.5.2. Existence of a robust solution that there must exist a solution satisfying the constraints for all the values of design variables within their domains while keeping in account all possible values of noise variables within their domains. This can be defined as that for all the values of design parameters and for all the values of noise, the constraints must be respected X  X .

This can be mathematically translated as ( s i A S : 8 D V A D D V ,  X  s i , D V  X  A D solution  X  5  X 
A solution s i that fulfills the above two conditions would be a robust solution. The above formulation employs the quantifier notion for exploration of the robust solution. The QCSP formulation has also been developed and applied in earlier research works as stipulating conditions for assembly and functional condition verification of mechanical components for 2D and 3D tolerance analysis applications ( Dantan and Qureshi, 2009 ).
 the above two conditions for application to examples of design space exploration. 4. Implementation transform the notion of the existential quantifier and universal quantifier in a manner such that it is applicable to each variable according to its conditioning and is in a computable form for resolution. In order to address this problem, an approach based on the interval arithmetic has been developed to resolve the quantifier notion in the expression. This approach is tool independent and can be incorporated and used on a variety of computational tools. In the work presented this approach has been used in Mathematica Software. The approach interprets the two conditions expressed earlier for valid and robust design and transforms them with interval arithmetic for calculation. 4.1. Basic notations and definitions
The notations and definitions used regarding the intervals and related operations are adopted from the interval notations in ( Vareilles, 2005 ) and( Parsons and Dohnal, 1992 ).

Consistent with earlier descriptions the real numbers are represented by a small letter in italics and bold  X  X  v  X  X .
The intervals are represented by a non italic small letter in bold x .
 The higher limit of an interval is represented as x .

The lower limit of an interval is represented as x . ~ x is an instance of the interval x .
 Also:
R 1  X  R c represents a constraint over real numbers. c represents a constraint over interval.
 real numbers r such that f r A R 1 9 x r r Z x g if x or x is one of 4.2. Interval operations
Interval arithmetic is based on extension of constraints applicable to real numbers to the intervals. If constraint applies on variables in real number domain then it applies to the intervals as well. These extensions exist for most of the elementary operators (+, ,/, , etc). Following example summarises the concept of expression of an operator in terms of real numbers as well as interval expression.

Let f ( x,y ) be a function of two variables x and y then using this function the definition of the arithmetic operators over real numbers and intervals would be as follows ( Vareilles, 2005 ; Parsons and Dohnal, 1992 ;( Chenouard, 2007 ):
Addition f :  X  x , y  X  / x  X  y f :  X  x , y  X  / x y  X  X  x  X  y , x  X  y
Subtraction f :  X  x , y  X  / x y f :  X  x , y  X  / x y  X  X  x y , x y
Multiplication f :  X  x , y  X  / x y f :  X  x , y  X  / x
Division f :  X  x , y  X  / x = y
The symbols , , { , and are the extensions of ,/, and + operator on the intervals. The problem of division by zero can be addresses by the usage of infinite or semi infinite containing or + N . 4.3. Extension of constraints. c is a natural extension of a constraint c if c is obtained by replacing each occurring constant in the expression k by the smallest possible interval k , each variable v by the smallest possible variable v and each arithmetic operation by its interval extension. In this way we can convert the constraint to an interval constraint. As discussed earlier the constraint may be an equality or an inequality. In case of equality, due to the iterative inner floating point operations carried out, the constraints involving zeros on the one side of equation are evaluated for the given machine precision e which denotes the minimum possible incremental precision attainable by machine/calculation engine. 4.4. Interval analysis
The application of the interval arithmetic essentially allows us to convert the problem from a real number solution to an interval solution which can then be applied to the quantifier translation. In order to show this, we will take the previous example of f ( x,y ) and demonstrate the effect of passing towards the interval arithmetic.

Let x and y be two real numbers such that x  X  30 and y  X  5 then the arithmetic operations performed with these two numbers and their corresponding interval extension by assigning correspond-ing intervals containing the assigned real number x  X  [10,40] and y  X  [4,6] is illustrated by the Table 1 .

The above example shows the usage of interval arithmetic to convert basic arithmetic functions applicable to the real numbers to the corresponding intervals. The e ffectachievedinthismanneristo include the total interval in the calculation rather than to calculate one unique value. The resulting o utput of an interval arithmetic calculation is also an interval which defines the boundary of the solutions originating from the input intervals. This concept will be applied on the constraints of the design problem.

For the sake of clarity, it is necessary to define some terms which will be used during the transformation.
 Definition 1. The design variables involved in the problem are expressed in forms of intervals except in case of design variables of discrete nature. Each interval is a set of connected reals with lowest and upper bounds as floating point intervals. The interval I for a design variable v defined as a real number would therefore be represented in form of an interval as follows: I  X  X  v , v f v A R 9 v r v r v g X  6  X  Also the relationship between the interval I v and domain d variable v is given as I v D D v  X  7  X  Definition 2. A Cartesian product of n intervals B  X  I 1 ? called a box; a domain d is either an interval I or a Union U of disjoint intervals. B is equal to or a subset of the domain set D : B D D  X  8  X 
Definition 3. The set of the initial domains of all the involved variables is D-BOX. A D-Box with arity n is the Cartesian product of n intervals where n is the number of the design variables involved in the problem. It is denoted by / I v 1, I v 2, where each I is an interval. In the following text the term  X  X  X D X  X  will be used for the D-Box.

BD  X  I v 1 , I v 2 , I v 3 , ::: , I vn fg  X  9  X 
Definition 4. An SD-Box BSD with arity n is the Cartesian product of n intervals where n is the number of the design variables involved in the problem. It is denoted by / I sv 1, I sv 2, where each I is an interval. SD-Box is formed when a D-BOX is split. In the following text the term  X  X  X SD X  X  will be used for the D-Box.
 BSD
D BD BSD  X 
Definition 5. An Interval extension of c : R n -R is a mapping c : I n -I such that for all:
I , I , I v 3 , ::: , I vn A I : v 1 A I v 1 , ::::: , v n A I vn An interval extension of a relation r D R n is a relation R that for all:
The constraint to be extended may be an inequality or equality and may be in any of the following forms: c  X  v , v 2 , ::: , v n  X  X  0 -c  X  I v 1 , I v 2 , ::: , I vn  X  X  0 c  X  v , v 2 , ::: , v n  X  r 0 -c  X  I v 1 , I v 2 , ::: , I vn  X  r 0 c  X  v , v 2 , ::: , v n  X  Z 0 -c  X  I v 1 , I v 2 , ::: , I vn  X  Z 0  X  13  X 
Using the above definitions an algorithm has been developed which applies the quantifier notion to the robust design. The following section takes a simple example and demonstrates the different steps of the algorithm. 4.5. Algorithm and transformation to interval analysis
The algorithm is divided into three main parts. The first step takes the BD as an input and is responsible for dividing the BD in
BSD and assigning the BSD to be evaluated to the next step for the evaluation of the existence of robust solution. The conversion from BD to the BSD is a splitting process which depends on the arity of the set BD. The domain splitting process ensures that that each BSD is a subset of BD and that the splitting process applies equally to each of the members of BD. Similarly during the subsequent iterations the splitting of the further BSDs into smaller BSDs is also performed by this module. The splitting of the BSD in the further iterations is automatically increased in the resolution as per the depth requirement of the split to be achieved. Once this step is concluded the results are stored in the results module which then processes the results to present the domains related to the robust solution. A detailed flow chart describing the algorithm has been presented in Fig. 2 .
The initial design domain specified by the design engineer is encapsulated in BD and is used as the starting search space for the algorithm. The algorithm then proceeds by the dividing
BD in the number of BSD as specified by the design engineer. Each of these BSD is then successively passed on to the evaluation module for evaluation of box consistency existence of robust solution.
 consistency of the BSD for finding the existence of robust solution.
This module uses the two conditions expressed earlier to evaluate the robustness of the BSD under consideration. Using the quantifier conditions the relevant constraints arising from the transformation of the real functions f into the interval based functions F involving the interval variables obtained from the transformation of the real variables to interval variables are then used for evaluating the consistency of BSD. The functions may be explicitly or implicitly expressed in terms of equality or inequal-ity. The quantifier conditions are translated by the following mathematical expressions: 4.5.1. Solution consistency existential quantifier. Its transformation into the algorithm with help of the interval analysis stipulates that BSD should be consistent for the given constraints:
I v 1 , I v 2 , I v 3 , ::: , I vn A I : v 1 A I v 1 , ::::: , v
Max  X  c  X  I x 1 , ::: , I xn  X  X  3 Min  X  c  X  I x 1 , ::: , I
For the BSD validated through the check performed by Eq. 4, robustness check is performed by the BSD consistency in presence of noise as stipulated by Eq. 5. This translates as following: 4.5.2. Robust solution consistency
In presence of noise/uncertainty is denoted by N  X f D v i
D v 2 , ::: , D v n g , where D v i is the noise/uncertainty related to the design variable v i , a solution is robust if the BSD is box-consistent in presence of the noise parameters. Therefore, Eq. 5 may be expressed as
I The quantified variables are replaced by the interval variables.
Each variable is assigned an upper and lower bound taken from the extremities of the interval. This operation is carried out for all the involved variables including the noise and design variables.
Similarly the constraints are also transformed into interval constraints which are then able to take the interval variables.
The constraints are then evaluated for the condition of existence of solution. If a BSD does not contain any solution, it is discarded and subsequently BD is reduced. Another BSD is then analyzed for the existence of solution. If an existence solution is found then this BSD is evaluated for global hull consistency of universal quantifier in presence of the uncertainty. In case of a successful evaluation the BSD is saved as a robust design solution space.
However if the space fails to evaluate for the consistency for robust solution, it is further decomposed into BSD until the robust solution space has been found. This process is repeated until the totality of BD has been explored for the robust solution or any other governing condition such as the appearance of first possible robust solution or maximum allotted time is found to be true.
The final module stores the results as they are produced by the evaluation module. The results module serves two purposes.
Firstly, it supplies the updated situation of the search during each iteration to the evaluation module and secondly at the end of the simulation it presents the results in terms of the search space partition in terms of space without solution, space with robust solution and the space with a probable solution. Fig. 2 presents the general flow of the algorithm. After having run for the required number of iterations, the algorithm returns the results in a graphical interface. 4.6. Example
In order to implement the quantifier notion for the design problem solution we will demonstrate the basic methodology of usage of quantifier with the help of a simple example, consisting of a single beam with two real dimensional design variables to consider ( Fig. 3 ), i.e. dimensions of the cross section a , b and one discreet variable for the choice of material. The beam is required to support mass M .

The model of the beam is based on the constraints of maximum admissible stress, maximum admissible mass and maximum admissible change in length. These constraints are mathematically expressed by the following expressions:  X  m  X  r  X  l  X  D l  X  X  a  X  D a  X  X  b  X  D b  X  m r m adm  X  17  X  @ l  X  supported, width of the beam, thickness of the beam, length of the beam and change in length of beam, respectively, whereas the corresponding symbols with subscript adm denote the maximum allowable limits for the respective symbols. Table 2 summarizes the variables.

All the constraints in this case are inequalities. In order to satisfy the constraints such values of a and b are to be found which allow a robust solution accounting for the noise. The quantifier expression for an admissible solution and a robust solution as stipulated by Eqs. 4 and 5 becomes ( a
A d a , ( b A d b : s r s adm , m r m adm , @ l r dl adm  X  19  X  8 a
A d a , 8 b A d b , 8 D a A d D a , 8 D b A d D b , D l A d D l : s r s adm , m r m adm , @ l r dl adm  X  20  X  4.7. Conversion to interval arithmetic
Having developed the quantified expressions for the solution consistency and robust solution consistency for the problem in form of Eqs. 19 and 20, respectively, now the transformation of the problem by interval analysis will be discussed. Considering the Eq. 19, we can see that the existential quantifier performs a check of existence of assignment of variable over the given interval. We formulate the problem by replacement of the existential quantifier by extension to the interval. For this purpose three generalizations pertaining to the three general types of constraints are defined as proposed in ( Vareilles et al., 2009 ). c c c
Let Eq. (16) be written as c ( a,b ) r m adm which is an implicit constraint, With variable intervals a A interval extension discussed in earlier section this constraint transforms to c ( a,b ) m adm r 0. Once the constraint has been extended over the interval, the next step is to calculate the boundary values of c ( a,b ) for the given interval, i.e.  X  c over the totality of interval (robust solution). If c  X  a , b  X  no solution exists. Similarly for constraints of form c ( a,b ) 0
A  X  c  X  a , b  X  , c  X  a , b  X  the constraint is consistent and there is a possibility of a solution. If 0 = 2 X  c  X  a , b  X  , c  X  a , b  X  200 400 600 800 1000 b b the totality of interval (robust solution) and if c  X  a , b  X  solution exists.

Therefore for all the cases presented above, there are three possible outcomes of interval consistency with regard to the constraints. The outcome can be either of the following: The interval is consistent with the constraint.
 The interval is inconsistent with the constraint.

The interval is consistent and inconsistent with the constraint ( Vareilles et al., 2009 ).

In order to translate the consistency developed above for application to quantifier expression, we can now establish that over a given interval the universal quantifier can be evaluated to be true if the interval is consistent with the constraint. Similarly if the interval is consistent and inconsistent with the constraint, the existential quantifier can be evaluated to be true. If the interval is inconsistent with the constraint the quantifier evaluation return false.

Using the above rules the equations for solution consistency and robust solution consistency with existential and universal quantifiers, respectively, as described above transform into a A I a , b A I b r l a b m adm r 0 4 r g s adm r 0 4 g l E M a b l 2 r @ l adm r 0  X  21  X  and a A I a , b A I b r l a b m adm r 0 4
M g a b  X  l x  X  r g s adm g l  X  l D l  X  X  a D a  X  X  b D b  X  m adm r 0 4  X  a D a  X  X  b D b  X   X  X  l D l  X  x  X  g  X  l D l  X 
This transformation is then used to evaluate the example beam shown above for the robust solution in presence of noise/ uncertainty. The solution returned by the algorithm is shown in
Fig. 4 which shows distinctly; robust space; space without solution and unexplored space with probability of solution with help of correspondingly shaded boxes.

The BD and BSD splitting module functioning can be visualized from the diagram on the left in Fig. 4 . The BD is progressively split into smaller BSD with resolution increasing with each iteration. In the above figure, during the 1st iteration BD is split into 4 BSDs and each is evaluated for the existence of the solution. It is evident in the left diagram that 25% of the space was discarded in the first iteration as having no solution (box in the top right corner) leaving the algorithm with 75% of the BD therefore saving critical computational effort. In the second and third iteration 37.5% and 48% of BD is reduced, respectively, with the first appearance of the robust solution. At this moment the search may be stopped or continued with splitting of BSDs with higher resolution to obtain results towards the boundaries of robust solution or for specific variable sensitivities. 5. Application
In order to validate the developed approach, different examples have been treated with the proposed approach. In this section two examples are presented to illustrate the application of the developed approach. 5.1. Embodiment design of a truss A mechanism in form of a truss structure is shown in Fig. 5 . The model is adapted from earlier research works by Wood and
Antonsson (1989) , Scott and Antonsson (2000) and Yannou et al. (2009) . The initial problem as described in the texts is the design of a mechanical structure that would bear a suspended load W at its overhanging end. The model consists of two beams CD and AB which are restrained by the pin joints with the wall and a pin joint between each other. The original model as presented in the 0.04 0.04 Width 0.04 Width previous article has parameters expressed in terms of the beam
CD and a fixed angle between the wall and the beam AB therefore in order to add the depth and complexity to the problem as well as making it more uncoupled, the problem has been redesigned by adding individual dimensional parameters to each truss as well as decoupling the fixed pin joint location between the truss CD and
AB. Also the angle between the truss AB and the wall has been decoupled. The variables including the design and noise variables used in the model are presented in Table 3 .
 developed for verification of the following constraints: Max( W system ) : maximum allowable weight of the system.
Maximum bending stress r b  X  maximum bending stress in the truss CD must be less than or equal to the allowable bending stress limit of the corresponding material.

Maximum compressive force F c  X  maximum allowable compres-sion force in truss AB. This force should not exceed that buckling force F b .

Material cost  X  the maximum material cost for fabricating the assembly should not exceed a given limit.
 These constraints are shown in Table 4 .

Once these equations have been established, the variables in the equations are quantified and then accordingly converted into interval arithmetic resulting into the extension of these con-straints over the intervals. The first step in establishing the model is to quantify each variable in the model to achieve the suitable interaction between the noise variable and design parameters.
Once the quantifier expression has been developed, interval analysis is used to translate the quantifiers associated with each variable to their respected intervals. The equations are then nested in an iterative algorithm which searches the search space (BD) by splitting BD in smaller sub spaces (BSD) and testing the totality of each subspace for presence of a unique solution first and then a robust solution pertaining to the totality of the sub space. This process is repeated for finding the robust solution.
For the given assembly, the algorithm returned the robust results for the example problem with integrated robustness within three iterations. The results obtained in each iteration are shown in form of three dimensional projections between three variables L 1 (length), w 1 (width) and t 1 (thickness), as shown in Figs. 6 X 9 .

In all the above figures the white box represents the total search space (BD) projected in terms of the three selected variables with the starting intervals along their respective axes.
In Fig. 6 , the green boxes after the first iteration show the reduced search space (BSD) marked by the algorithm for a possible existence of a solution. This space is further refined in the 2nd iteration ( Fig. 7 ) and in the third iteration the algorithm succeeds in finding a robust solution among the BSD with integrated noise variables. This solution is shown in Fig. 9 . 5.2. Embodiment design of a flange coupling
The second example shown in Fig. 10 is a rigid flange coupling design problem. This problem has also been adopted from earlier research works ( Yvars et al., 2009 ). Main design requirement in this example is transmission of required torque by the flange between two shafts. The main design considerations for the flange are torque transmission, safety and reliability and cost of the 0.04 Width whole assembly. The variables and constraints related to the design and dimensions of flange are shown in Tables 5 and 6 .
The results obtained for the given example are shown in form of three dimensional projections between three variables D, D and D 2 .In Fig. 11 (a X  X ), the main box represents the total BD projected in terms of the three selected variables with the starting intervals along their respective axes. In Fig. 11 (a), light grey boxes after the first iteration show the possible search space (BSDs) marked by the algorithm for a consistency for existence of a solution. Fig. 11 (b) shows the sets of robust solution within the search space in form of dark grey boxes found after the first iteration consistent for a robust solution. In a similar fashion Fig. 11 (c) and (d) shows results for consistency of solution and consistency of robust solution in 2nd iteration. The choice of the discrete variables can also be shown in a similar way ( Fig. 12 ). 6. Conclusion
The model that has been developed allows for search of sets of robust solutions from the starting domain space search via quantifiers and interval analysis and allows the designer to find the robust sets which can then be optimized from different viewpoints. It is possible to find a robust solution set that satisfies minimum design parameters and constraints as described above.
At the same time it offers the designer flexibility to perform a sensitivity analysis of variables towards different constraints to invoke an analysis of the interaction between the problem search space and the constraints itself, therefore relaxing or narrowing the search space as per the requirement to achieve the quality/ cost constraints. Also the approach can be used to achieve a compromise goal between variables and parameters in a bilateral manner by associating goal priority to a specific function and then allowing the algorithm to relax its bounds with respect to other parameters and constraints such as having a truss structure with a lower over design coefficient in order to save on material costs or to switch towards a different material due to geometric/dimen-sional constraints.

The work presented in this article proposes a new technique of exploring the problem search space of the mechanical systems with help of the quantifier notion. The quantifier notion allows us to explicitly define the design requirements on the individual variables involved in a product design phase. Also the robust design approach proposed in this article takes into account the influence of uncertainty/variance of different design variables on the product performance. The approach proposed in this article allows the design engineer to integrate the notion of uncertainty in product design right from the early design phase and helps him to find the sensitive as well as the robust design regions in the possible product design search space. Different types of noise parameters can be treated by the proposed approach. In the treated examples, the types of the uncertainties are of three type, i.e. dimensional uncertainties/variances, geometric uncertainties and material property uncertainties. Also, from a mathematical point of view two different types of variables and uncertainties have been treated, i.e. discrete and continuous. Finally the developed approach has been tested over a simple mechanism taken from earlier research works and the results have been found t to be consistent with the earlier works. The transformation of quantifier via the interval analysis has proved to be efficient. The usage of interval analysis provides an appreciable gain in the computational time cost. However, currently the work needs to be done to enable automatic transformation from quantifier notion to interval analysis which is currently being carried out manually. References
