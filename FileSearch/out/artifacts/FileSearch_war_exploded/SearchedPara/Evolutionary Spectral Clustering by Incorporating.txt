 Evolutionary clustering is an emerging research area essen -tial to important applications such as clustering dynamic Web and blog contents and clustering data streams. In evo-lutionary clustering, a good clustering result should fit th e current data well, while simultaneously not deviate too dra -matically from the recent history. To fulfill this dual pur-pose, a measure of temporal smoothness is integrated in the overall measure of clustering quality. In this paper, we pro -pose two frameworks that incorporate temporal smoothness in evolutionary spectral clustering. For both frameworks, we start with intuitions gained from the well-known k -means clustering problem, and then propose and solve correspond-ing cost functions for the evolutionary spectral clusterin g problems. Our solutions to the evolutionary spectral clus-tering problems provide more stable and consistent cluster -ing results that are less sensitive to short-term noises whi le at the same time are adaptive to long-term cluster drifts. Furthermore, we demonstrate that our methods provide the optimal solutions to the relaxed versions of the correspond -ing evolutionary k -means clustering problems. Performance experiments over a number of real and synthetic data sets illustrate our evolutionary spectral clustering methods p ro-vide more robust clustering results that are not sensitive t o noise and can adapt to data drifts.
 H.2.8 [ Database Management ]: Database Applications X  Data mining ; H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval X  Information filtering Algorithms, Experimentation, Measurement, Theory  X  Current address for this author: Microsoft Research, One Microsoft Way, Redmond, WA 98052, email: dengyong.zhou@microsoft.com Evolutionary Spectral Clustering, Temporal Smoothness, Preserving Cluster Quality, Preserving Cluster Membershi p, Mining Data Streams
In many clustering applications, the characteristics of th e objects to be clustered change over time. Very often, such characteristic change contains both long-term trend due to concept drift and short-term variation due to noise. For example, in the blogosphere where blog sites are to be clus-tered (e.g., for community detection), the overall interes ts of a blogger and the blogger X  X  friendship network may drift slowly over time and simultaneously, short-term variation may be triggered by external events. As another example, in an ubiquitous computing environment, moving objects equipped with GPS sensors and wireless connections are to be clustered (e.g., for traffic jam prediction or for animal mi -gration analysis). The coordinate of a moving object may follow a certain route in the long-term but its estimated coordinate at a given time may vary due to limitations on bandwidth and sensor accuracy.

These application scenarios, where the objects to be clus-tered evolve with time, raise new challenges to traditional clustering algorithms. On one hand, the current clusters should depend mainly on the current data features  X  ag-gregating all historic data features makes little sense in n on-stationary scenarios. On the other hand, the current clus-ters should not deviate too dramatically from the most re-cent history. This is because in most dynamic applications, we do not expect data to change too quickly and as a con-sequence, we expect certain levels of temporal smoothness between clusters in successive timesteps. We illustrate th is point by using the following example. Assume we want to partition 5 blogs into 2 clusters. Figure 1 shows the rela-tionship among the 5 blogs at time t-1 and time t , where each node represents a blog and the numbers on the edges represent the similarities (e.g., the number of links) betw een blogs. Obviously, the blogs at time t-1 should be clustered by Cut I. The clusters at time t are not so clear. Both Cut II and Cut III partition the blogs equally well. However, according to the principle of temporal smoothness, Cut III should be preferred because it is more consistent with re-cent history (time t-1 ). Similar ideas have long been used in time series analysis [5] where moving averages are often used to smooth out short-term fluctuations. Because simi-lar short-term variances also exist in clustering applicat ions, either due to data noises or due to non-robust behaviors of clustering algorithms (e.g., converging to different loc ally suboptimal modes), new clustering techniques are needed to handle evolving objects and to obtain stable and consistent clustering results.

In this paper, we propose two evolutionary spectral clus-tering algorithms in which the clustering cost functions con-tain terms that regularize temporal smoothness. Evolution -ary clustering was first formulated by Chakrabarti et al. [3] where they proposed heuristic solutions to evolutionary hi er-archical clustering problems and evolutionary k -means clus-tering problems. In this paper, we focus on evolutionary spectral clustering algorithms under a more rigorous frame-work. Spectral clustering algorithms have solid theory fou n-dation [6] and have shown very good performances. They have been successfully applied to many areas such as doc-ument clustering [22, 15], imagine segmentation [19, 21], and Web/blog clustering [9, 18]. Spectral clustering algo-rithms can be considered as solving certain graph partition problems, where different graph-based measures are to be optimized. Based on this observation, we define the cost functions in our evolutionary spectral clustering algorit hms by using the graph-based measures and derive correspond-ing (relaxed) optimal solutions. At the same time, it has been shown that these graph partition problems have close connections to different variation of the k -means clustering problems. Through these connections, we demonstrate that our evolutionary spectral clustering algorithms provide s olu-tions to the corresponding evolutionary k -means clustering problems as special cases.

In summary, our main contributions in this paper can be summarized as the following: 1. We propose two frameworks for evolutionary spectral 2. We derive optimal solutions to the relaxed versions of 3. We also introduce extensions to our algorithms to han-
As stated in [3], evolutionary clustering is a fairly new topic formulated in 2006. However, it has close relationshi ps with other research areas such as clustering data streams, incremental clustering, and constrained clustering.
In clustering data streams, large amount of data that ar-rive at high rate make it impractical to store all the data in memory or to scan them multiple times. Under such a new data model, many researchers have investigated issues such as how to efficiently cluster massive data set by using limited memory and by one-pass scanning of data [12], and how to cluster evolving data streams under multiple resolutions s o that a user can query any historic time period with guaran-teed accuracy [1]. Clustering data stream is related to our work in that data in data streams evolve with time. How-ever, instead of the scalability and one-pass-access issue s, we focus on how to obtain clusters that evolve smoothly over time, an issue that has not been studied in the above works.
Incremental clustering algorithms are also related to our work. There exists a large research literature on incremen-tal clustering algorithms, whose main task is to efficiently apply dynamic updates to the cluster centers [13], medoids [12], or hierarchical trees [4] when new data points arrive. However, in most of these studies, newly arrived data points have no direct relationship with existing data points, othe r than that they probably share similar statistical characte r-istics. In comparison, our study mainly focuses on the case when the similarity among existing data points varies with time, although we can also handle insertion and removal of data points over time. In [16], an algorithm is proposed to cluster moving objects based on a novel concept of micro-clustering. In [18], an incremental spectral clustering al -gorithm is proposed to handles similarity changes among objects that evolve with time. However, the focus of both [16] and [18] is to improve computation efficiency at the cost of lower cluster quality.

There is also a large body of work on constrained cluster-ing. In these studies, either hard constraints such as cannot links and must links [20] or soft constraints such as prior preferences [15] are incorporated in the clustering task. I n comparison, in our work the constraints are not given a pri-ori . Instead, we set our goal to optimize a cost function that incorporates temporal smoothness. As a consequence, some soft constraints are automatically implied when historic d ata and clusters are connected with current ones.

Our work is especially inspired by the work by Chakrabarti et al. [3], in which they propose an evolutionary hierarchic al clustering algorithm and an evolutionary k -means clustering algorithm. We mainly discuss the latter because of its con-nection to spectral clustering. Chakrabarti et al. propose d to measure the temporal smoothness by a distance between the clusters at time t and those at time t-1 . Their cluster distance is defined by (1) pairing each centroid at t to its nearest peer at t-1 and (2) summing the distances between all pairs of centroids. We believe that such a distance has two weak points. First, the pairing procedure is based on heuristics and it could be unstable (a small perturbation on the centroids may change the pairing dramatically). Second , because it ignores the fact that the same data points are to be clustered in both t and t-1 , this distance may be sensitive to the movement of data points such as shifts and rotations (e.g., consider a fleet of vehicles that move together while the relative distances among them remain the same). First, a word about notation. Capital letters, such as W and Z , represent matrices. Lower case letters in vector forms, such as ~v i and ~ l , represent column vectors. Scripted letters, such as V and V p , represent sets. For easy presen-tation, for a given variable, such as W and ~v i , we attach a subscript t , i.e., W t and ~v i,t , to represent the value of the variable at time t . And we use Tr ( W ) to represent the trace of W where Tr ( W ) = P i W ( i, i ). In addition, for a ma-trix X  X  X  n  X  k , we use span ( X ) to represent the subspace spanned by the columns of X . For vector norms we use the Euclidian norm and for matrix norms we use the Frobenius norm, i.e., k W k 2 = P i,j W ( i, j ) 2 = Tr ( W T W ). We state the clustering problem in the following way. For a set V of n nodes, a clustering result is a partition {V 1 , . . . , V k } of the nodes in V such that V =  X  k l =1 V p  X  X  q =  X  for 1  X  p, q  X  k, p 6 = q . A partition (clustering result) can be equivalently represented as an n -by-k matrix Z whose elements are in { 0 , 1 } where Z ( i, j ) = 1 if only if node i belongs to cluster j . Obviously, Z ~ 1 k = ~ 1 n , where ~ 1 k and ~ 1 n are k -dimensional and n -dimensional vectors of all ones. In addition, we can see that the columns of Z are orthogonal. Furthermore, we normalize Z in the following way: we divide the l -th column of Z by p |V l | to get  X  where |V l | is the size of V l . Note that the columns of orthonormal, i.e.,  X  Z T  X  Z = I k .
The k -means clustering problem is one of the most widely-studied clustering problems. Assume the i -th node in V can be represented by an m -dimensional feature vector ~v i  X  X  then the k -means clustering problem is to find a partition {V 1 , . . . , V k } that minimizes the following measure where ~ l is the centroid (mean) of the l -th cluster, i.e., ~ P
A well-known algorithm to the k -means clustering prob-lem is the so called k -means algorithm in which after initially randomly picking k centroids, the following procedure is re-peated until convergence: all the data points are assigned t o the clusters whose centroids are nearest to them, and then the cluster centroids are updated by taking the average of the data points assigned to them.
The basic idea of spectral clustering is to cluster based on the eigenvectors of a (possibly normalized) similarity ma-trix W defined on the set of nodes in V . Very often W is positive semi-definite. Commonly used similarities includ e the inner product of the feature vectors, W ( i, j ) = ~v diagonally-scaled Gaussian similarity, W ( i, j ) = exp(  X  ( ~v ~v ) T diag ( ~ X  )( ~v i  X  ~v j )), and the affinity matrices of graphs.
Spectral clustering algorithms usually solve graph parti-tioning problems where different graph-based measures are to be optimized. Two popular measures are to maximize the average association and to minimize the normalized cut [19]. For two subsets, V p and V q , of the node set V (where V V q do not have to be disjoint), we first define the association between V p and V q as assoc ( V p , V q ) = P i  X  X  Then we can write the k -way average association as and the k -way normalized cut as where V\V l is the complement of V . For consistency, we further define the negated average association as where, as will be shown later, NA is always non-negative if W is positive semi-definite. In the remaining of the paper, instead of maximizing AA , we equivalently aim to minimize NA , and as a result, all the three objective functions, KM , NA and NC are to be minimized.

Finding the optimal partition Z for either the negated average association or the normalized cut is NP-hard [19]. Therefore, in spectral clustering algorithms, usually a re -laxed version of the optimization problem is solved by (1) computing eigenvectors X of some variations of the simi-larity matrix W , (2) projecting all data points to span ( X ), and (3) applying the k -means algorithm to the projected data points to obtain the clustering result. While it may seem nonintuitive to apply spectral analysis and then again use the k -means algorithm, it has been shown that such procedures have many advantages such as they work well in the cases when the data points are not linearly separable [17]. The focus of our paper is in step (1). For steps (2) and (3) we follow the standard procedures in traditional spectr al clustering and thus will not give more details on them.
In this section we propose two frameworks for evolution-ary spectral clustering. We first describe the basic idea.
We define a general cost function to measure the quality of a clustering result on evolving data points. The function contains two costs. The first cost, snapshot cost ( CS ), only measures the snapshot quality of the current clustering re-sult with respect to the current data features, where a higher snapshot cost means worse snapshot quality. The second cost, temporal cost ( CT ), measures the temporal smooth-ness in terms of the goodness-of-fit of the current clusterin g result with respect to either historic data features or his-toric clustering results, where a higher temporal cost means defined as a linear combination of these two costs: in [3], differing only by a constant factor and a negative sign . where 0  X   X   X  1 is a parameter assigned by the user and together with  X  (= 1  X   X  ), they reflect the user X  X  emphasis on the snapshot cost and temporal cost, respectively.
In both frameworks that we propose, for a current par-tition (clustering result), the snapshot cost CS is measured by the clustering quality when the partition is applied to the current data. The two frameworks are different in how the temporal cost CT is defined. In the first framework, which we name PCQ for preserving cluster quality , the cur-rent partition is applied to historic data and the resulting cluster quality determines the temporal cost. In the sec-ond framework, which we name PCM for preserving cluster membership , the current partition is directly compared with the historic partition and the resulting difference determines the temporal cost.

In the discussion of both frameworks, we first use the k -means clustering problem, Equation (1), as a motivational example and then formulate the corresponding evolution-ary spectral clustering problems (both NA and NC ). We also provide the optimal solutions to the relaxed versions of the evolutionary spectral clustering problems and show how they relate back to the evolutionary k -means clustering problem. In addition, in this section, we focus on a special case where the number of clusters does not change with time and neither does the number of nodes to be clustered. We will discuss the more general cases in the next section.
In the first framework, PCQ, the temporal cost is ex-pressed as how well the current partition clusters historic data. We illustrate this through an example. Assume that two partitions, Z t and Z  X  t , cluster the current data at time t equally well. However, to cluster historic data at time t-1 , the clustering performance using partition Z t is better than using partition Z  X  t . In such a case, Z t is preferred over Z because Z t is more consistent with historic data . We formal-ize this idea for the k -means clustering problem using the following overall cost function where Z is computed at time t  X  and ~ l,t  X  1 = P j  X  X  Note that in the formula of CT KM , the inner summation is over all data points in V l,t , the clusters at time t . That is, although the feature values used in the summation are those at time t-1 (i.e., ~v i,t  X  1  X  X ), the partition used is that at time t (i.e., Z t ). As a result, this cost CT KM = KM t  X  1 penalizes those clustering results (at t ) that do not fit well with recent historic data (at t-1 ) and therefore promotes temporal smoothness of clusters.
We now formulate the PCQ framework for evolutionary spectral clustering. We start with the case of negated aver-age association. Following the idea of Equation (6), at time t , for a given partition Z t , a natural definition of the overall cost is The above cost function is almost identical to Equation (6), except that the cluster quality is measured by the negated average association NA rather than the k -means KM .
Next, we derive a solution to minimizing Cost NA . First, it can be easily shown that the negated average association defined in Equation (4) can be equivalently written as Notice that the first term Tr (  X W t +  X W t  X  1 ) is a constant independent of the clustering partitions and as a result, minimizing Cost NA is equivalent to maximizing the trace Tr [  X  Z T t (  X W t +  X W t  X  1 )  X  Z t ], subject to  X  indicator matrix ( cf Sec 2.1). Because maximizing the av-erage association is an NP-hard problem, finding the so-lution  X  Z t that minimizes Cost NA is also NP-hard. So fol-lowing most spectral clustering algorithms, we relax  X  Z X t  X  X  n  X  k with X T t X t = I k . It is well-known [11] that one solution to this relaxed optimization problem is the matrix X t whose columns are the k eigenvectors associated with the top-k eigenvalues of matrix  X W t +  X W t  X  1 . Therefore, after computing the solution X t we can project the data points into span ( X t ) and then apply k -means to obtain a solution to the evolutionary spectral clustering problem under the measure of negated average association. In addition, the value Tr (  X W t +  X W t  X  1 )  X  Tr X T t (  X W t +  X W t  X  1 vides a lower bound on the performance of the evolutionary clustering problem.

Moreover, Zha et al. [22] have shown a close connection between the k -means clustering problem and spectral clus-tering algorithms  X  they proved that if we put the m -dimensional feature vectors of the n data points in V into an m -by-n matrix A = ( ~v 1 , . . . , ~v n ), then Comparing Equations (10) and (8), we can see that the k -means clustering problem is a special case of the negated av-erage association spectral clustering problem, where the s im-ilarity matrix W is defined by the inner product A T A . As a consequence, our solution to the NA evolutionary spectral clustering problem can also be applied to solve the k -means evolutionary clustering problem in the PCQ framework, i.e. , under the cost function defined in Equation (6). 2 Here we can show that NA is positive semi-definite: We have  X  Z T  X  Z = I k and Tr ( W ) = P n i =1  X  i where  X  are the eigenvalues of W ordered by decreasing magni-tude. Therefore, by Fan X  X  theorem [10], which says that rive from (8) that NA  X  P n j = k +1  X  j  X  0 if W is positive semi-definite.
For the normalized cut, we extend the idea of Equation (6) similarly. By replacing the KM Equation (6) with NC , we define the overall cost for evolutionary normalized cut to be Shi et al. [19] have proved that computing the optimal solu-tion to minimize the normalized cut is NP-hard. As a result, finding an indicator matrix Z t that minimizes Cost NC is also NP-hard. We now provide an optimal solution to a relaxed version of the problem. Bach et al. [2] proved that for a given partition Z , the normalized cut can be equivalently written as where D is a diagonal matrix with D ( i, i ) = P n j =1 W ( i, j ) and Y is any matrix in R n  X  k that satisfies two conditions: (a) the columns of D  X  1 / 2 Y are piecewise constant with re-spect to Z and (b) Y T Y = I k . We remove the constraint (a) to get a relaxed version for the optimization problem for some X t  X  X  n  X  k such that X T t X t = I k . Again we have a trace maximization problem and a solution is the matrix X t whose columns are the k eigenvectors associ-ated with the top-k eigenvalues of matrix  X D  X  1 2 t W t further project data points into span ( X t ) and then apply the k -means algorithm to obtain the final clusters.
Moreover, Dhillon et al. [8] have proved that the normal-ized cut approach can be used to minimize the cost function of a weighted kernel k -means problem. As a consequence, our evolutionary spectral clustering algorithm can also be applied to solve the evolutionary version of the weighted kernel k -means clustering problem.
The PCQ evolutionary clustering framework provides a data clustering technique similar to the moving average fra me-work in time series analysis, in which the short-term fluctu-ation is expected to be smoothed out. The solutions to the PCQ framework turn out to be very intuitive  X  the historic similarity matrix is scaled and combined with current simi-larity matrix and the new combined similarity matrix is fed to traditional spectral clustering algorithms.

Notice that one assumption we have used in the above derivation is that the temporal cost is determined by data at time t-1 only. However, the PCQ framework can be eas-ily extended to cover longer historic data by including sim-ilarity matrices W  X  X  at older time, probably with different weights (e.g., scaled by an exponentially decaying factor t o emphasize more recent history). The second framework of evolutionary spectral clustering, PCM, is different from the first framework, PCQ, in how the temporal cost is measured. In this second framework, the temporal cost is expressed as the difference between the cur-rent partition and the historic partition. We again illustr ate this by an example. Assume that two partitions, Z t and Z cluster current data at time t equally well. However, when compared to the historic partition Z t  X  1 , Z t is much more similar to Z t  X  1 than Z  X  t is. In such a case, Z t is preferred over Z  X  t because Z t is more consistent with historic partition .
We first formalize this idea for the evolutionary k -means problem. For convenience of discussion, we write the curren t partition as Z t = {V 1 ,t , . . . , V k,t } and the historic partition measure for the difference between Z t and Z t  X  1 . Comparing two partitions has long been studied in the literatures of classification and clustering. Here we use the traditional chi-square statistics [14] to represent the distance betwe en two partitions where |V ij | is the number of nodes that are both in V i,t time t ) and in V j,t  X  1 (at time t-1 ). Actually, in the above definition, the number of clusters k does not have to be the same at time t and t-1 , and we will come back to this point in the next section. By ignoring the constant shift of -1 and the constant scaling n , we define the temporal cost for the k -means clustering problem as where the negative sign is because we want to minimize CT KM . The overall cost can be written as
Cost KM =  X  CS KM +  X  CT KM (15)
Recall that in the case of negated average association, we want to maximize NA = Tr (  X  Z T W  X  Z ) where  X  Z is fur-ther relaxed to continuous-valued X , whose columns are the k eigenvectors associated with the top-k eigenvalues of W . So in the PCM framework, we shall define a distance dist ( X t , X t  X  1 ) between X t , a set of eigenvectors at time t , and X t  X  1 , a set of eigenvectors at time t-1 . However, there is a subtle point  X  for a solution X  X  X  n  X  k that maxi-mizes Tr ( X T W X ), any X  X  = XQ is also a solution, where Q  X  X  k  X  k is an arbitrary orthogonal matrix. This is because Tr ( X T W X ) = Tr ( X T W XQQ T ) = Tr (( XQ ) T W XQ ) = Tr ( X  X  T W X  X  ). Therefore we want a distance dist ( X that is invariant with respect to the rotation Q . One such solution, according to [11], is the norm of the difference be-tween two projection matrices, i.e., which essentially measures the distance between span ( X t and span ( X t  X  1 ). Furthermore in Equation (16), the number of columns in X t does not have to be the same as that in X t  X  1 and we will discuss this in the next section.
By using this distance to quantify the temporal cost, we derive the total cost for the negated average association as
Cost NA =  X  CS NA +  X  CT NA (17) =  X  h Tr ( W t )  X  Tr ( X T t W t X t ) i +  X  2 k X t X T =  X  h Tr ( W t )  X  Tr ( X T t W t X t ) i +  X  2 =  X  h Tr ( W t )  X  Tr ( X T t W t X t ) i +  X  2 ) =  X  h Tr ( W t )  X  Tr ( X T t W t X t ) i +  X k  X   X Tr X T t =  X  Tr ( W t ) +  X  k  X  Tr h X T t (  X W t +  X X t  X  1 X T t  X  1 Therefore, an optimal solution that minimizes Cost NA is the matrix X t whose columns are the k eigenvectors associated with the top-k eigenvalues of the matrix  X W t +  X X t  X  1 After getting X t , the following steps are the same as before.
Furthermore, it can be shown that the un-relaxed version of the distance defined in Equation (16) for spectral clus-tering is equal to that defined in Equation (15) for k -means clustering by a constant shift. That is, it can be shown ( cf. Bach et al. [2]) that 1 2 As a result, the evolutionary spectral clustering based on negated average association in the PCM framework provides a relaxed solution to the evolutionary k -means clustering problem defined in the PCM framework, i.e., Equation (15).
It is straightforward to extend the PCM framework from the negated average association to normalized cut as Therefore, an optimal solution that minimizes Cost NC is the matrix X t whose columns are the k eigenvectors associated with the top-k eigenvalues of the matrix  X D  X  1 2 t W t D  X X t  X  1 X T t  X  1 . After obtaining X t , the subsequent steps are the same as before.

It is worth mentioning that in the PCM framework, Cost NC has an advantage over Cost NA in terms of the ease of se-lecting an appropriate  X  . In Cost NA , the two terms CS NA and CT NA are of different scales  X  CS NA measures a sum of variances and CT NA measures some probability distribution. Consequently, this difference needs to be considered when choosing  X  . In contrast, for Cost NC , because the CS NC 2-norms scale, for both matrices have  X  max = 1. Therefore, the two terms CS NC and CT NC are comparable and  X  can be selected in a straightforward way.
In the PCM evolutionary clustering framework, all his-toric data are taken into consideration (with different weig hts)  X  X t partly depends on X t  X  1 , which in turn partly depends on X t  X  2 and so on. Let us look at two extreme cases. When  X  approaches 1, the temporal cost will become unimportant and as a result, the clusters are computed at each time win-dow independent of other time windows. On the other hand, when  X  approaches 0, the eigenvectors in all time windows are required to be identical. Then the problem becomes a special case of the higher-order singular value decomposi-tion problem [7], in which singular vectors are computed for the three modes (the rows of W , the columns of W , and the timeline) of a data tensor W where W is constructed by concatenating W t  X  X  along the timeline.

In addition, if the similarity matrix W t is positive semi-semi-definite because both D  X  1 2 t W t D  X  1 2 t and X t  X  1 positive semi-definite.
Now we compare the PCQ and PCM frameworks. For simplicity of discussion, we only consider time slots t and t-1 and ignore older history.
 In terms of the temporal cost, PCQ aims to maximize be maximized. However, these two are closely connected. By applying the eigen-decomposition on W t  X  1 , we have where  X  t  X  1 is a diagonal matrix whose diagonal elements are the eigenvalues of W t  X  1 ordered by decreasing magnitude, and X t  X  1 and X  X  t  X  1 are the eigenvectors associated with the first k and the residual n  X  k eigenvectors of W t  X  1 , respec-tively. It can be easily verified that both Tr ( X T t W t  X  1 and Tr ( X T t X t  X  1 X T t  X  1 X t ) are maximized when X (or more rigorously, when span ( X t ) = span ( X t  X  1 )). The differences between PCQ and PCM are (a) if the eigen-vectors associated with the smaller eigenvalues (other tha n the top k ) are considered and (b) the level of penalty when X t deviates from X t  X  1 . For PCQ, all the eigenvectors are considered and their deviations between time t and t-1 are penalized according to the corresponding eigenvalues. For PCM, rather than all eigenvectors, only the first k eigenvec-tors are considered and they are treated equally. In other words, in the PCM framework, other than the historic clus-ter membership, all details about historic data are ignored . Although by keeping only historic cluster membership, PCM introduces more information loss, there may be bene-fits in other aspects. For example, the CT part in the PCM framework does not necessarily have to be temporal cost  X  it can represent any prior knowledge about cluster member-ship. For example, we can cluster blogs purely based on interlinks. However, other information such as the content of the blogs and the demographic data about the bloggers may provide valuable prior knowledge about cluster mem-bership that can be incorporated into the clustering. The PCM framework can handle such information fusion easily.
There are two assumptions in the PCQ and the PCM framework proposed in the last section. First, we assumed that the number of clusters remains the same over all time. Second, we assumed that the same set of nodes is to be clus-tered in all timesteps. Both assumptions are too restrictiv e in many applications. In this section, we extend our frame-works to handle the issues of variation in cluster numbers and insertion/removal of nodes over time.
In our discussions so far, we have assumed that the num-ber of clusters k does not change with time. However, keep-ing a fixed k over all time windows is a very strong restric-tion. Determining the number of clusters is an important research problem in clustering and there are many effec-tive methods for selecting appropriate cluster numbers (e. g., by thresholding the gaps between consecutive eigenvalues) . Here we assume that the number of cluster k at time t has been determined by one of these methods and we investi-gate what will happen if the cluster number k at time t is different from the cluster number k  X  at time t-1 .
It turns out that both the PCQ and the PCM frameworks can handle variations in cluster number already. In the PCQ framework, the temporal cost is expressed by historic data themselves, not by historic clusters and therefore the com-putation at time t is independent of the cluster number k at time t-1 . In the PCM framework, as we have mentioned, the partition distance (Equation 14) and the subspace dis-tance (Equation 16) can both be used without change when the two partitions have different numbers of clusters. As a result, both of our PCQ and PCM frameworks can handle variations in the cluster numbers.
Another assumption that we have been using is that the number of nodes in V does not change with time. However, in many applications the data points to be clustered may vary with time. In the blog example, very often there are old bloggers who stop blogging and new bloggers who just start. Here we propose some heuristic solutions to handle this issue.
For the PCQ framework, the key is  X W t +  X W t  X  1 . When old nodes are removed, we can simply remove the corre-sponding rows and columns from W t  X  1 to get  X  W t  X  1 (assum-ing  X  W t  X  1 is n 1  X  n 1 ). However, when new nodes are inserted at time t , we need to add entries to  X  W t  X  1 and to extended it to  X 
W t  X  1 , which has the same dimension as W t (assuming W is n 2  X  n 2 ). Without lost of generality, we assume that the first n 1 rows and columns of W t correspond to those nodes in  X 
W t  X  1 . We propose to achieve this by defining  X 
W
Such a heuristic has the following good properties, whose proofs are skipped due to the space limitation.

Property 1. (1)  X  W t  X  1 is positive semi-definite if W t  X  1 is. (2) In  X  W t  X  1 , for each existing node v old , each newly inserted node v new looks like an average node in that the similarity between v new and v old is the same as the average similarity between any existing node and v old . (3) In  X  the similarity between any pair of newly inserted nodes is th e same as the average similarity among all pairs of existing nodes.

We can see that these properties are appealing when no prior knowledge is given about the newly inserted nodes.
For the PCM framework, when old nodes are removed, we remove the corresponding rows from X t  X  1 to get  X  X (assuming  X  X t  X  1 is n 1  X  k ). When new nodes are inserted at time t , we extend  X  X t  X  1 to  X  X t  X  1 , which has the same dimension as X t (assuming X t is n 2  X  k ) as follows That is, we insert new rows as the row average of  X  X t  X  1 After obtaining  X  X t  X  1 , we replace the term  X X t  X  1 X  X   X 
Such a heuristic has the following good property, whose proof is skipped due to the space limit.

Property 2. Equation (20) corresponds to for each newly inserted nodes, assigning to it a prior clustering membersh ip that is approximately proportional to the size of the cluste rs at time t-1.
In this section, we report experimental studies based on both synthetic data sets and a real blog data set.
First, we use several experiments on synthetic data sets to illustrate the good properties of our algorithms.
In this subsection, we show three experimental studies based on synthetic data. In the first experiment, we demon-strate a stationary case where data variation is due to a zero-mean noise. In the second experiment, we show a non-stationary case where there are concept drifts. In the third experiment, we show a case where there is a large difference between the PCQ and PCM frameworks.
 By using the k -means algorithm, we design two baselines. The first baseline, which we call ACC, accumulates all his-toric data before the current timestep t and applies the k -means algorithm on the aggregated data. The second base-line, which we call IND, independently applies the k -means algorithm on the data in only timestep t and ignore all his-toric data before t .

For our algorithms, we use the NA -based PCQ and PCM algorithms, because of the equivalence between the NA -based spectral clustering problem and the k -means cluster-ing problem (Equation (10)). We choose to use W = A T A in the NA -based evolutionary spectral clustering and compare its results with that of the k -means baseline algorithms. For a fair comparison, we use the KM defined for the k -means clustering problem (i.e., Equation (1)) as the measure for performance, where a smaller KM value is better.

The data points to be clustered are generated in the fol-lowing way. 800 two-dimensional data points are initially positioned as described in Figure 2(a) at timestep 1. As can be seen, there are roughly four clusters (the data were actually generated by using four Gaussian distributions ce n-tered in the four quadrants). Then in timesteps 2 to 10, we perturb the initial positions of the data points by adding different noises according to the experimental setup. Un-less stated otherwise, all experiments are repeated 50 time s with different random seeds and the average performances are reported. Figure 2: (a) The initial data point positions and (b) A typical position in the non-stationary case
In the first experiment, for timesteps 2 through 10, we add an i.i.d. Gaussian noise following N (0 , 0 . 5) to the initial po-sitions of the data points. We use this data to simulation a stationary situation where the concept is relatively stab le but there exist short-term noises. In Figures 3(a) and 3(b), we report the snapshot cost CS KM and the temporal cost CT
KM for the two baselines and for our algorithms (with  X  = 0 . 9 for both PCQ and PCM) from timesteps 1 to 10. For both costs, a lower value is better. As can be seen from the figure, the ACC baseline has low temporal smoothness but very high snapshot cost, whereas the IND baseline has the low snapshot cost but very high temporal cost. In com-parison, our two algorithms show low temporal cost at the price of a little increase in snapshot cost. The overall cost  X  CS KM +  X  CT KM is given in Figure 3(c). As can be seen, the ACC baseline has the worst overall performance and our algorithms improve a little over the IND baseline. In addition, Figure 3(d) shows the degree of cluster change over time as defined in Equation (18). We can see that as Figure 3: The performance for the stationary syn-thetic data set, which shows that PCQ and PCM result in low temporal cost at a price of a small in-crease in snapshot cost expected, the cluster membership change using our frame-works is less dramatic than that of the IND baseline, which takes no historic information into account.

Next, for the same data set, we let  X  increase from 0.2 to 1 with a step of 0.1. Figure 4 shows the average snapshot cost and the temporal cost over all 10 timesteps under different settings of  X  . As we expected, when  X  increases, to em-phasize more on the snapshot cost, we get better snapshot quality at the price of worse temporal smoothness. This re-sult demonstrates that our frameworks are able to control the tradeoff between the snapshot quality and the temporal smoothness. Figure 4: The tradeoff between snapshot cost and temporal cost, which can be controlled by  X 
In the second experiment, we simulate a non-stationary situation. At timesteps 2 through 10, before adding random noises, we first rotate all data points by a small random angle (with zero mean and a variance of  X / 4). Figure 2(b) shows the positions of data points in a typical timestep. Figure 5 gives the performance of the four algorithms. As can be seen, while the performance of our algorithms and the IND baseline has little change, the performance of the ACC baseline becomes very poor. This result shows that if an aggregation approach is used, we should not aggregate the data features in a non-stationary scenario  X  instead, we should aggregate the similarities among data points. Figure 5: Performance for a non-stationary syn-thetic data set, which shows that aggregating data features does not work
In the third experiment, we show a case where the PCQ and PCM frameworks behave differently. We first generate data points using the procedure described in the first ex-periment (the stationary scenario), except that this time w e generate 60 timesteps for a better view. This time, instead of 4 clusters, we let the algorithms partition the data into 2 clusters. From Figure 2(a) we can see that there are ob-viously two possible partitions, a horizonal cut or a vertic al cut at the center, that will give similar performance where the performance difference will mainly be due to short-term noises. Figure 6 shows the degree of cluster membership change over the 60 timesteps in one run (for obvious rea-sons, no averaging is taken in this experiment). As can be seen, the cluster memberships of the two baselines jump around, which shows that they are not robust to noise in this case. Also can be seen, the cluster membership of the PCM algorithm varies much lesser than that of the PCQ algorithm. The reason for this difference is that switching the partition from the horizontal cut to the vertical cut wil l introduce much higher penalty to PCM than to PCQ  X  PCM is directly penalized by the change of eigenvectors, which corresponds to the change of cluster membership; for PCQ, the penalty is indirectly acquired from historic data, not historic cluster membership. Figure 6: A case where PCM is more robust vs PCQ
It is difficult to compare the NC -based evolutionary spec-tral clustering with the k -means clustering algorithm. In-stead, in this experiment, we use a toy example in the 2-dimensional Euclidean space with only 4 timesteps (as shown in Figure 7) to compare the non-evolutionary version (up-per panels, with  X  = 1) and the evolutionary version (lower panels, with  X  = 0 . 9) of the NC -based evolutionary spectral clustering algorithms. Figure 7 gives the clustering resul ts with the correct cluster numbers provided to the algorithm. As can be seen, for the non-evolutionary version, at timeste p 2, the two letters  X  X  X  X  X  are confused because they move too near to each other. At timestep 4, due to the change of cluster number, part of the newly introduced letter  X 0 X  is confused with the second  X  X  X . Neither happens to the evolu-tionary version, in which the temporal smoothness is taken into account. Figure 7: A toy example that demonstrates our evo-lutionary spectral clustering is more robust and can handle changes of cluster number
As a conclusion, these experiments based on synthetic data sets demonstrate that compared to traditional cluster -ing methods, our evolutionary spectral clustering algorit hms can provide clustering results that are more stable and con-sistent, less sensitive to short-term noise, and adaptive t o long-term trends.
The real blog data was collected by an NEC in-house blog crawler. Due to space limit, we will not describe how the data was collected and refer interested readers to [18] for details. This NEC blog data set contains 148,681 entry-to-entry links among 407 blogs crawled during 63 consecutive weeks, between July 10th in 2005 and September 23rd in 2006. By looking at the contents of the blogs, we discovered two main groups: a set of 314 blogs with technology focus and a set of 93 blogs with politics focus. Figure 8 shows the blog graph for this NEC data set, where the nodes are blogs (with different labels depending on their group mem-ber) and the edges are interlinks among blogs (obtained by aggregating all entry-to-entry links).
 Figure 8: The blog graph for the NEC data set
One application of clustering blogs is to discover commu-nities. Since we already have the ground truth of the two communities based on content analysis, we start by running the clustering algorithms with k = 2. The data is prepared in this way: each week corresponds to a timestep; all the entry-to-entry links in a week are used to construct an affin-ity matrix for the blogs of that week (i.e., those blogs that are relevant to at least one entry-to-entry link in that week ); and the affinity matrix is used as the similarity matrix W in the clustering algorithms. For baselines, we again use ACC and IND, except that this time the normalized cut al-gorithm is used. For our algorithms, we use the NC -based PCQ and PCM. Figures 9(a),(b), and (c) give the CS NC , CT NC , and Cost NC for the two baseline algorithms and the PCM algorithm (to make the figures readable, we did not plot the results for PCQ, which are similar to those of PCM, Figure 9: The performance on the NEC data, which shows that evolutionary spectral clustering clearly outperforms non-evolutionary ones as shown in Table 1). In Figure 9(d), we show the error between the cluster results and the ground truth obtained from content analysis, where the error is the distance be-tween partitions defined in Equation (18). As can be seen from these figures, the evolutionary spectral clustering ha s the best performance in all four measures. The high snap-shot cost of IND was surprising to us. We believe this could be due to the non-robustness of the normalized cut package (which we obtained from the homepage of the first author of [19]). In addition, note that CT NC is usually smaller than CS
NC because CT NC is computed over those nodes that are active in both t and t-1 and such nodes are usually less than those that are active at t . This is also one of the reasons for the high variation of the curves.
 Table 1: Performance under Different Cluster Num-bers for the Blog Data Set
In addition, we run the algorithms under different cluster numbers and report the performance in Table 1, where the best results among the same category are in bold face. Our evolutionary clustering algorithms always give more stabl e and consistent cluster results than the baselines where the historic data is totally ignored or totally aggregated.
There are new challenges when traditional clustering tech-niques are applied to new data types, such as streaming data and Web/blog data, where the relationship among data evolves with time. On one hand, because of long-term con-cept drifts, a naive approach based on aggregation will not give satisfactory cluster results. On the other hand, short -term variations occur very often due to noise. Preferably the cluster results should not change dramatically over sho rt time and should exhibit temporal smoothness. In this paper, we propose two frameworks to incorporate temporal smooth-ness in evolutionary spectral clustering. In both framewor ks, a cost function is defined where in addition to the traditiona l cluster quality cost, a second cost is introduced to regular -ize the temporal smoothness. We then derive the (relaxed) optimal solutions for solving the cost functions. The solu-tions turn out to have very intuitive interpretation and hav e forms analogous to traditional techniques used in time seri es analysis. Experimental studies demonstrate that these new frameworks provide cluster results that are both stable and consistent in the short-term and adaptive in the long run.
We thank Shenghuo Zhu, Wei Xu, and Kai Yu for the in-spiring discussions, and thank Junichi Tatemura for helpin g us prepare the data sets. [1] C. C. Aggarwal, J. Han, J. Wang, and P. S. Yu. A [2] F. R. Bach and M. I. Jordan. Learning spectral [3] D. Chakrabarti, R. Kumar, and A. Tomkins.
 [4] M. Charikar, C. Chekuri, T. Feder, and R. Motwani. [5] C. Chatfield. The Analysis of Time Series: An [6] F. R. K. Chung. Spectral Graph Theory . American [7] L. De Lathauwer, B. De Moor, and J. Vandewalle. A [8] I. S. Dhillon, Y. Guan, and B. Kulis. Kernel k-means: [9] C. Ding and X. He. K-means clustering via principal [10] K. Fan. On a theorem of weyl concerning eigenvalues [11] G. Golub and C. V. Loan. Matrix Computations . [12] S. Guha, N. Mishra, R. Motwani, and L. O X  X allaghan. [13] C. Gupta and R. Grossman. Genic: A single pass [14] L. J. Hubert and P. Arabie. Comparing partitions. [15] X. Ji and W. Xu. Document clustering with prior [16] Y. Li, J. Han, and J. Yang. Clustering moving objects. [17] A. Ng, M. Jordan, and Y. Weiss. On spectral [18] H. Ning, W. Xu, Y. Chi, Y. Gong, and T. Huang. [19] J. Shi and J. Malik. Normalized cuts and image [20] K. Wagstaff, C. Cardie, S. Rogers, and S. Schroedl. [21] Y. Weiss. Segmentation using eigenvectors: A unifying [22] H. Zha, X. He, C. H. Q. Ding, M. Gu, and H. D.
