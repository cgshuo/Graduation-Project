 Due to the wide availability of Global Positioning System (GPS) technology, many portable devices, such as mobile phones, navigation systems, and GPS loggers, are now location aware. Using these GPS-equipped devices, people can log and share their trajectories on the Web [CarWeb 2010; EveryTrail 2009; Bikemap 2010]. Thanks to these technological advances and the availability of trajectory data, research, and applications on trajectory data mining [Jensen et al. 2007; Li et al. 2007; Giannotti et al. 2007; Lee et al. 2007, 2008; Jeung et al. 2008a, 2008b; Zheng et al. 2008], trajectory data management [Wang et al. 2008; Lange et al. 2008; Tian et al. 2009; Cudr  X  e-Mauroux et al. 2010], and trajectory search [Chen et al. 2005, 2010; Sherkat and Rafiei 2008] have attracted considerable research efforts in recent years.

Trajectory search is an essential function for many applications and Web sites, for example, EveryTrail [EveryTrail 2009], a trip sharing community. In such Web sites, users are able to share trips and connect with other travelers. By specifying a city name (e.g., Taipei) or a spatial range, a user may retrieve all trajectories that go across the spatial range or the city boundary. Trajectory search also exists in other forms. For example, by specifying a sample trajectory as a query, similar trajectories can be retrieved. Recently, an efficient algorithm for finding K trajectories that best connect a given set of Regions-Of-Interest (ROIs) from a trajectory dataset is proposed in Chen et al. [2010]. Nevertheless, while this pioneering work makes significant advances in trajectory search, it is constrained by the assumption that users already have a priori knowledge regarding the ROIs in the planned trajectory before the query is issued. Without this knowledge, the users may have to try out a number of different ROI sets, which is very time consuming. Without making such assumptions, in this article, we propose a trajectory search framework that comprises a number of innovative trajectory mining, ranking, and searching techniques to support efficient trajectory search.

For trip planning, a variety of trip recommendation services have been developed [Takeuchi and Sugimoto 2007; Li et al. 2008; Zheng et al. 2009b; Zheng and Xie 2011; Wei et al. 2010; Cao et al. 2010; Choudhury et al. 2010; Lu et al. 2010]. A significant amount of research efforts have focused on mining ROIs from users X  travel data. In Yoon et al. [2010, 2011], travel routes are derived by specifying the start and end points as well as the duration of the trip. The studies in Choudhury et al. [2010] and Lu et al. [2010] provide another way to discover travel routes from geotagged photos shared by users. However, these travel routes only reveal the visiting sequences of ROIs without indicating the detailed routes. Additionally, users may have different preferences regarding how to tour around a city or a scenic area. To tour around a wide geographical area, for example, a city, some users may prefer a trip to visit as many ROIs as possible, while others may like to stop by only a few ROIs for an in-depth visit. We refer to a trip fitting the former user group as an in-breadth trip and a trip suitable for the latter user group as an in-depth trip . In this article, we aim to develop a service framework to search for trajectories passing through popular ROIs from archived trip trajectories. The trajectory search query is formulated as follows.

Definition 1.1 ( Top K Trajectory Search ). Given a trajectory dataset, a top K trajec-tory search query, specified by a spatial range and a user preference of depth/breadth, retrieves the top K trajectories, each of which passes through some popular ROIs within the specified spatial range, from the trajectory dataset.

For instance, a user would like to take a tour in Taipei. He/she could specify a spatial range using an online map service to cover Taipei as well as his/her preference for an in-breath or in-depth trip. In this article, we develop a Pattern-Aware Trajectory Search (PATS) framework to support the aforementioned trajectory search. As its name indi-cates, PATS is novel because the returned trajectories, representing the most valuable experiences of other travelers fitting the user X  X  trip preference in terms of breath or depth, are obtained based on discovered travel patterns hidden in trip trajectories. In order to retrieve the top K trajectories that meet in-breadth trips or in-depth trips from a trajectory dataset, some challenging issues (summarized as follows) need to be tackled:  X  X iscovering a set of ROIs and inferring how attractive these ROIs are based on travel patterns hidden in users X  trajectories;  X  X esigning trajectory score functions to tailor in-depth or in-breadth trips; and  X  X eveloping an efficient trajectory search algorithm to support time-critical online trajectory search.
 Our design of the PATS framework comprises two components: (1) travel behavior exploration, and (2) trajectory search. In the travel behavior exploration component, we first extract ROIs, where an ROI is a region if the region has been passed through by a certain number of trajectories. For example, in Figure 1, if we set the threshold Figure 1, given the set of ROIs, users still have no idea how to plan a trip. For trip planning, a number of ROIs and a travel sequence of ROIs, referred to as a travel route, should be determined. Therefore, the extracted ROIs only reflect the popularity degree of regions, which is not sufficient for trip planning. For example, a travel route, for example, R 2  X  R 1  X  R 4 , may be planned given the set of ROIs. Note that, according to the three trajectories in Figure 1, there is no such travel route which hints that the route may be impracticable. Thus, in this article, we explore travel patterns that refer to travel sequential relationships among the ROIs hidden in the trajectory dataset, for trip planning. By aggregating travel sequential relationships among ROIs, travel patterns indicate not only sequential relationships but also transition probabilities among ROIs. By inferring the reachability of an ROI from travel patterns, we could determine the attractive score of the ROI. The reachability of an ROI describes how likely a user would be to pass the ROI when traveling around the region. Consequently, we construct a user movement graph, where each vertex represents an ROI and the edges indicate possible transitions between ROIs. In light of the user movement graph, we propose an Attractive Score (AS) algorithm for ROIs via the Markov process. In Figure 1, Tr 1 is likely to be an in-breadth trip because it passes through four ROIs. On the other hand, Tr 2 and Tr 3 are likely to be in-depth trips. The two trajectories Tr 2 and Tr 3 have the same number of ROIs. With regard to how to quantify the in-depth degree of trips, we claim that not only the number of ROIs but also the attractive scores of the ROIs should be considered. As a result, for the trajectory search component, we formulate two trajectory score functions, the depth-trip score function ( DT ) and the breadth-trip score function ( BT ), by taking into account the number of ROIs in a trajectory and the attractive scores of ROIs. To provide online trajectory search, the response time is critical. Accordingly, we propose a Bounded Trajectory Search (BTS) algorithm to efficiently retrieve the top K trajectories based on the two trajectory scores. The main idea of algorithm BTS is to incrementally reduce the searching space to find the top K trajectories without calculating the scores of all the trajectories passing through the user-specified spatial range. To evaluate the proposed PATS framework, we conduct experiments and user studies using a real trajectory dataset. The experimental results show that the PATS framework is able to not only effectively but also efficiently retrieve the top K trajectories consisting of popular ROIs.

The contributions of this article are summarized as follows.  X  X e propose a new trajectory search framework to support trip planning without requiring prior knowledge of ROIs in the specified spatial range.  X  X e employ a user movement graph to capture travel patterns hidden in a trajectory dataset and develop an algorithm to determine the attractive scores of the ROIs.  X  X e design two trajectory score functions DT and BT to tailor in-depth and in-breadth trips, respectively.  X  X e propose an algorithm BTS for efficiently retrieving the top K trajectories ranked according to DT or BT .  X  X e perform a comprehensive performance evaluation of PATS by extensive experi-ments and user studies using a real dataset. The experimental results demonstrate the effectiveness and the efficiency of the proposed PATS.
 The rest of the article is organized as follows. In Section 2, related works are presented. In Section 3, the overview of our framework is given. The design of travel behavior exploration is presented in Section 4. In Section 5, the online trajectory search is described. The experimental results are provided in Section 6. Finally, this work is concluded in Section 7. In this section, we first present existing works about trajectory search and then review the research on ROI recommendation. Finally, the existing research works on trip planning are presented. A considerable amount of research efforts have been put into searching for similar trajectories [Chen et al. 2005; Trajcevski et al. 2007]. An important issue for similar trajectory search is to measure the similarities between the specified trajectory and other trajectories. Thus, most studies focus on the similarity formulation. The authors in Chen et al. [2005] propose an efficient algorithm to discover similar trajectories that have similar geographical movements according to the distance measurement, edit distance on real sequence. Furthermore, by performing translations and rotations on trajectories, the authors in Trajcevski et al. [2007] explore a dynamic similarity measurement in terms of velocity patterns of trajectories and motion transformation. In Chen et al. [2010], the authors formulate a new kind of trajectory search. Given a set of ROIs, the top K trajectories that best connect the given ROIs are derived. The best-connected trajectories are evaluated according to the sum distance between trajectories and a given set of ROIs. The query for the aforementioned trajectory search problem is different from a top K trajectory search query in this article. That is, users do not need to specify a set of ROIs for a top K trajectory query in this article. Our top K trajectory search problem fits some trip planning scenarios in which users may not know the ROIs in advance. Even if users are aware of ROIs, they still require travel routes to indicate visiting sequences among them. However, given a set of ROIs, the number of travel routes that pass these ROIs is huge and it is hard to identify which routes are of interest to the users. In PATS, we not only extract ROIs but also derive travel routes according to a user preference of depth/breadth. These features distinguish our work from others. Several studies have been developed to extract and recommend ROIs [Simon and Fr  X  ohlich 2007; Abowd et al. 1997; Park et al. 2007]. In Simon and Fr  X  ohlich [2007], the authors recommend ROIs which are not only close but also visible to users. According to user preferences, ROIs are recommended by a user X  X  historical preferences in Abowd et al. [1997], Park et al. [2007], and Yoon et al. [2009]. Notice that these ROIs are predefined and derived from existing tour guides or travel information. Therefore, some studies further develop approaches to automatically determine ROIs from a set of trajectories. In Kang et al. [2005], Takeuchi and Sugimoto [2007], Giannotti et al. [2007], and Li et al. [2010], the authors develop density-based algorithms to discover ROIs that are frequently visited by users. By observing the stay time of regions, the authors in Hariharan and Toyama [2004] and Li et al. [2008] extract ROIs whose stay time is longer than a predefined time threshold. In addition to the extraction of ROIs, the authors in Zheng et al. [2009b], Zheng and Xie [2011], and Cao et al. [2010] propose an HITS-based algorithm and a PageRank-based algorithm to assign a score to each ROI. The main theme of the preceding research works is just to extract ROIs from a set of trajectories, but they do not discuss how to derive travel routes. Consequently, the problem setting of these works is different from ours. Trip planning problems are studied in Kumar et al. [2005], Gonzalez et al. [2007], Tian et al. [2009], and Yoon et al. [2010, 2011], Choudhury et al. [2010], and Lu et al. [2010]. Given a source and a destination, the studies in Kumar et al. [2005], Gonzalez et al. [2007], and Tian et al. [2009] focus on planning the shortest/fastest trip between a given source and a specified destination. In [Yoon et al. 2010, 2011], the authors target travel route recommendations which should connect the given start and end points within the time duration constraints. Furthermore, in recent years, the authors in Choudhury et al. [2010] and Lu et al. [2010] have aimed at analyzing the geotagged photos from Flickr. They propose other ways to extract ROIs from photo information and to generate travel routes from their analysis of photos. However, these travel routes reveal the visiting sequences of ROIs without indicating detailed routes, and the travel routes are generated without considering a user X  X  preference for breadth/depth. We claim that without a prior knowledge of ROIs, PATS is able to recommend the top K trajectories according to a user X  X  preference. As presented earlier, in this article, given a spatial range and a user preference of breadth/depth, we aim at deriving the top K trajectories. Note that each trajectory is in fact one of the existing trajectories within or across the specified spatial range, and thus the detailed trip information (i.e., turn-by-turn) for a travel route is available. One challenging task behind PATS is how to derive interest scores of trajectories, and the interest score of a trajectory reflects a user preference of breadth/depth. In PATS, interest scores of each trajectory are determined by the number of ROIs and their corresponding attractiveness. To deal with the aforementioned issue, an offline compo-nent, a travel behavior exploration component, is developed. In addition, PATS has a trajectory search component to support online trajectory search. These two components of PATS are detailed as follows.

Travel behavior exploration component. The main task of the travel behavior explo-ration component is to extract a set of ROIs and to derive their attractive scores. We adopt a density-based approach developed in prior works [Giannotti et al. 2007; Li et al. 2010] to determine ROIs. With the set of ROIs, we consider the travel sequential relationships among the ROIs and propose a user movement graph to capture travel sequential relationships. In the user movement graph, a vertex represents one ROI and edges indicate the transition relationships among ROIs. In light of the user movement graph, we exploit Markov models to assign attractive scores to the ROIs.

Trajectory search component. Through this online component, users issue their queries via our developed Web interface or Android application to retrieve the top K tra-jectories. Explicitly, Figure 3(a) shows the Web interface, where a user can move/adjust the spatial range on Google map, and the spatial range specified in the Google map is then issued to PATS. In Figure 3(a), the entire spatial range shown in the Web interface, which is marked by the black bounded box, is the spatial range specified. Moreover, the spatial range shown in Figure 3(b) is the input of PATS for our Android application. Once the spatial range and a user preference of depth/breadth are submitted, the top K trajectories and nearby attractions (i.e., points of interest) are displayed on the map. Clearly, these trajectories are within or across the spatial range issued. For instance, in Figure 3(a), each trajectory is numbered by its rank, and the route of each trajectory is depicted by green lines. For our Android application, the search results of the trajec-tories are ranked and shown in the right of Figure 3(b). The determination of interest scores of trajectories is discussed later. To efficiently retrieve the top K trajectories, we propose a Bounded Trajectory Search (BTS) algorithm, which is presented in Section 5. The design of travel behavior exploration in PATS is to determine a set of Regions-Of-Interest (ROIs) with their attractive scores. The travel behavior exploration component is performed in an offline manner. Given a set of trajectories, the travel behavior explo-ration component first generates ROIs. With the set of ROIs derived, a user movement graph is constructed to capture travel behavior hidden in a trajectory dataset. In light of the user movement graph, we further propose an Attractive Score (AS) algorithm to assign scores to ROIs. Without loss of generality, a trajectory is expressed by Tr = &lt; p 1 , p 2 ,..., p n &gt; ,and point p i is represented as a latitude/longitude pair, represented as ( lat i , lon i ). Note that locations of data points derived from GPS have measurement bias or sampling error [Pfoser and Jensen 1999]. To deal with these errors, map-matching methods [Lou et al. 2009; Newson and Krumm 2009] could be applied. In addition, to automatically infer semantics of trajectories, the approaches developed in Yan et al. [2010a, 2011] could be adopted. In this article, each trajectory is shared by users and thus each trajectory reflects a travel route, which indicates a visiting sequence of some landmarks or sightseeing locations. These locations are ROIs and are usually visited by many users. Given a set of trajectories, prior works in Giannotti et al. [2007], Li et al. [2008], Zheng et al. [2009a, 2009b], Kang et al. [2005], and Wei et al. [2010] typically employ a density-based approach to extract ROIs with a high density of passing-by trajectories. Accordingly, we use the density-based approach in Giannotti et al. [2007] to extract ROIs.

The approach in Giannotti et al. [2007] explores grids and uses a density-based concept for the extraction of ROIs. Explicitly, given a set of trajectories and a grid length, the whole geographical space is divided into nonoverlapping grids and the density of each grid is calculated as the number of distinct trajectories passing through it. A trajectory passes through a grid, which means that some data points of the trajectory are located in the grid. If the density of a grid exceeds a given minimum density threshold, the grid is extracted and it is thus identified as one ROI, R = {
R ROIs. Once a set of ROIs is derived, a travel route of a trajectory is extracted, where the travel route is represented as a sequence of ROIs. Note that a travel route of a trajectory is regarded as the feature of this trajectory; and for a trajectory Tr ,we denote its travel route as Tr . VS . To facilitate the presentation of our article, the set of travel routes extracted from the trajectory dataset is called a Travel Route Dataset ( TRD ).

In reality, the geographical space is divided into a set of functional zones that have different shapes. For example, Figure 4(a) depicts the different functional zones in northern Taiwan, and these functional zones have different shapes. As mentioned before, in our work, the whole space is divided into grids. In Giannotti et al. [2007], nearby grids whose density values are larger than a predefined threshold can be merged into a larger ROI, so it can also be realized in our work. Figure 4(b) shows travel trajectories around northern Taiwan. As shown in Figure 4(b), the region A would be merged as an ROI. By referring to Figure 4(a), this ROI belongs to a functional zone (i.e., a national park), which demonstrates that the generation of ROIs could have different shapes. By referring to function zones provided by governments, ROIs that are not related to sightseeing could be filtered out. For example, region B in Figure 4(b) is part of a residential area in a city, which is not a sightseeing region. Consequently, though the space is divided into grids, the determination of ROIs could still discover different shapes via merging grids. Moreover, by referring to function zones in geographical information, ROIs could be refined. In our framework, each ROI is associated with an attractive score. If an ROI is likely to be visited by users, it has a higher attractive score. Moreover, not only the popularity of ROIs (that is, the number of user visits) but also the travel behaviors among ROIs should be considered in the formulation of attractive scores. We claim that the attrac-tive scores of ROIs will reflect how likely it is that users will reach the corresponding ROIs from historical travel trajectories shared by users. Intuitively, each trajectory reveals a travel sequential relationship among ROIs. By aggregating travel sequen-tial relationships from a set of trajectories, transition probabilities among ROIs could be derived. Based on the transition probabilities, we could infer the reachability of an ROI. Therefore, a user movement graph is built to capture traversal relationships among ROIs. Different from semantic trajectories [Yan et al. 2010a, 2010b, Yan et al. 2011] developed for high-level representations of trajectories, for example, transporta-tion modes in moves, we focus on exploring travel patterns, that is, travel sequential relationships among the ROIs, hidden in users X  travel trajectories in this article.
Given a set of ROIs R and a travel route dataset TRD , a user movement graph is a weighted directed graph UMG = ( R , E ), where each vertex represents one ROI and a visiting sequence from R i to R j .In UMG , each edge is assigned a weight which is the transition probability between two ROIs.

The weight of each edge is derived by aggregating the transition relationships from a set of trajectories. To derive a weight on an edge from R i to R j , a possible method is to count the number of pairs &lt; R i , R j &gt; in the given travel route dataset and divide from R i to R j would be mainly influenced by one travel route. For instance, given three travel routes Tr 1 . VS : R 1 R 2 R 3 R 1 R 2 , Tr 2 . VS : R 1 R 4 ,and Tr &lt; and Tr 3 . VS , the weight on the edge from R 1 to R 4 is also equal to 1 2 . We argue that framework emphasizes the number of travel routes that have a corresponding traversal relationship. Given a pair of ROIs &lt; R i , R j &gt; and a trajectory Tr , if the travel route Tr . VS has a one-step traversal relationship from ROI R is contained by Tr , denoted as &lt; R i , R j &gt;  X  Tr . Since one travel route may have more from a given trajectory as follows.
 Given an ROI R i  X  R and a trajectory Tr , the individual out-degree of R i with given Tr is defined as
For instance, given the travel route dataset in Table I, deg + ( R 5 | Tr 2 ) = |{ of edges by aggregating the transition relationships from different travel routes in TRD next.
 the corresponding user movement graph UMG = ( R , E ), for each directed edge &lt;
R i , R j &gt; in UMG , the weight of &lt; R i , R j &gt; is defined as
Based on Definition 4.2, we judiciously determine weights of edges in a user move-ment graph. For example, consider the travel route dataset in Table I and a set of ROIs is at least one trajectory (e.g., Tr 1 ) whose travel route takes one-step traversing from R 1 to R 4 . Since only Tr 1 contains is calculated as
Moreover, since a user at R 1 may possibly move to R 4 and R 5 (based on Tr 1 and Tr 3 ), the denominator for the weight of &lt; R 1 , R 4 &gt; is calculated as movement graph is shown in Figure 5. In light of the user movement graph, we develop an algorithm to derive the attractive scores of ROIs. According to discovered travel behaviors represented by the user move-ment graph, we could simulate that how a user traverses among ROIs. For example, given the user movement graph in Figure 5, a user in ROI R 2 is likely to move into ROI R 5 (respectively, R 4 ) with the probability of 2 3 (respectively, 1 3 ). Since the weights of the edges in the user movement graph indicate transition probabilities among ROIs, we derive the attractive scores of ROIs based on the concept of the Markov process and propose an attractive score algorithm. Similar to the PageRank value for each Web page [Brin and Page 1998], the attractive scores of ROIs are formulated as follows.
Definition 4.3 ( Transition Matrix ). Given a user movement graph UMG = ( R , E ), the transition matrix of UMG is defined as where a parameter  X   X  [0 , 1) and w &lt; R
Definition 4.4 ( Attractive Score of an ROI ). Given a user movement graph UMG = ( R , E ) and the corresponding transition matrix M , the attractive scores of vertices in R are defined as  X  Note that the final round attractive score of R i is represented by S ( R i ) for each R
As shown in Algorithm AS, all ROIs have an initial attractive scores of 1. Then, the attractive scores of the ROIs are calculated iteratively in a round-by-round manner. When the scores are stabilized, which means they are almost the same as the scores derived in the prior round, Algorithm AS stops and the final attractive scores of the ROIs are generated accordingly.

Consider the example in Figure 5. Let  X  = 0 . 85. In the first round, all the initial attractive scores of the ROIs are set to 1. We iteratively compute the scores of ROIs using Algorithm AS. In this example, the attractive scores of ROIs converge on the twelfth round. The final attractive scores of the ROIs are shown in Table II.
Since algorithm AS is similar to the PageRank algorithm, we can apply the power method [Golub and Loan 1996] to calculate the scores of the ROIs. According to the study Bahmani et al. [1989], the average time complexity to derive the attractive scores of the ROIs that are stabilized is O ( log ( n  X  log )), where n is the number of vertices in the user movement graph UMG = ( R , E )and0 &lt;&lt; 1. The trajectory search component in PATS provides a search interface for issuing a spatial range K and a user preference depth/breadth. Then, PATS will retrieve the top K trajectories tailored with a user preference specified. In light of attractive scores of ROIs derived, we formulate two score functions: one for an in-depth trip and the other for an in-breadth trip. Next, we propose a Bounded Trajectory Search algorithm (BTS) to efficiently retrieve the top K trajectories. In this section, we formulate two score functions to reflect in-depth trips and in-breadth trips. Note that the output of the trajectory search in PATS is the set of top K trajec-tories. The top K trajectories are those that have higher scores. Clearly, the score of a trajectory will be determined by its corresponding travel route. As mentioned before, a travel route of a trajectory is a visiting sequence of ROIs. Therefore, the score of a trajectory is highly related to not only the number of ROIs but also to the attractive scores of the ROIs.

To measure the scores of a trajectory, two kinds of trip scenarios should be considered: (1) A trip includes a few ROIs with higher attractive scores (i.e., in-depth); (2) a trip includes as many ROIs as possible (i.e., in-breadth). For the in-depth trip, a user may like to go around some ROIs with higher attractive scores even if the number of ROIs is few. The ROIs for an in-depth trip are expected to have a certain level of quality in terms of their average attractive score. Given a spatial range Q , R Q is the set of ROIs that are within the spatial range Q . Therefore, a trajectory Tr has its Depth-Trip score, denoted as DT ( Tr ), and DT ( Tr ) is formulated as
On the other hand, the Breadth-Trip score of a trajectory Tr , denoted as BT ( Tr ), is defined as
With the preceding formulas, each trajectory is able to have two trajectory scores: depth-trip score and breadth-trip score. If a user would like to have an in-depth trip (respectively, in-breadth trip), our framework will return the top K trajectories accord-ing to the depth-trip (respectively, breadth-trip) scores of the trajectories. Note that if a trajectory only has only a few data points within the spatial query range, we only extract these data points of the trajectories (i.e., the subtrajectory) into the search result.

A naive algorithm to perform trajectory search in PATS consists of three steps: (step 1) Given a spatial range Q ,thesetofROIswithin Q (i.e., R Q ) should be generated first; (step 2) Extract the trajectories whose travel routes contain ROIs in R Q ;and (step 3) Calculate both depth-trip scores and breadth-trip scores for the trajectories derived in step 2. A running example for the naive algorithm is given, where the travel route dataset of trajectories is shown in Table I and the attractive scores of the ROIs is in Table II. Assume that a user issues one spatial range Q and a user preference is set to in-naive algorithm, there are ten candidate trajectories (i.e., Tr 1 ,..., Tr 10 ) selected since the travel routes of these trajectories have ROIs that match some ROIs in R Q . For each trajectory selected, the depth-trip score is computed. For example, DT ( Tr 3 )  X  1 . 395 since ROIs R 5 and R 7 are in Tr 3 . VS  X  R Q (i.e., DT ( Tr 3 ) = 1 2 R ( S ( R 5 ) + S ( R 7 )) = 1 . 395). Similarly, DT ( Tr 2 ) = 1 4 R are in the search result.

Since the number of trajectories is huge, the efficiency of the trajectory search is important. Thus, we propose a bounded trajectory search algorithm in PATS. The idea of algorithm BTS is to properly maintain score bounds of quantified trajec-tories and utilize score bounds to eliminate the cost of unnecessary searching for the trajectories that are explicitly not in the top K trajectories.

In PATS, all ROIs are indexed using an R-tree structure. To efficiently retrieve trajectories within ROIs, we implement an inverted trajectory list and for each ROI, and a list of trajectories whose travel routes include that ROI is obtained.
In algorithm BTS, two bounds are maintained: one is the lower bound of the scores (called score bound for simplicity) corresponding to tentatively qualified top K trajecto-ries and the other is the search bound of ROIs to be examined. Given a spatial range Q and a threshold K , we first extract a set of ROIs within Q . Then, these ROIs are sorted by their attractive scores in decreasing order. We denote the sorted list of ROIs as R atively examines ROIs in the sorted list to retrieve candidates for the top K trajectories and to compute their scores. When an ROI is examined, the corresponding trajectories going through this ROI are retrieved. If the number of the retrieved trajectories is smaller than K , algorithm BTS will select the next ROI from R s Q . On the other hand, if the number of the retrieved trajectories is greater than or equal to K , the score bound is set as the score of the K -th trajectory in the retrieved trajectories. The definition of score bound for the lower bound of the scores corresponding to tentatively qualified trajectories is defined as follows.
 qualified candidate trajectories T , the lower bound of the scores (i.e., score bound) of the trajectories in T is defined as LBS T = DT ( Tr )(or BT ( Tr )), where DT ( Tr )(or BT ( Tr )) is the score at rank K in T .

With the score bound derived LBS T , algorithm BTS can easily eliminate trajectories whose scores are smaller than LBS T since these trajectories are not qualified for the top K trajectories. Note that not all ROIs in the sorted list R s Q should be examined. Thus, the aforementioned search bound for ROIs is used to determine which trajec-tories should be retrieved as candidates for the top K trajectories. The search bound in ROIs with respect to LBS T for different trajectory score functions is defined as follows.

Definition 5.2 ( Search Bound for ROIs with respect to LBS T ). Given a LBS T and a sequence R s Q , the search bound to be examined for ROIs is defined as where for trajectory score function DT , and for trajectory score function BT , Notice that IN is a set of the natural numbers.

With the aforesaid two bounds, BTS iteratively examines ROIs in R s Q to retrieve candidates for the top K trajectories until SBR T is met. For each iteration, LBS T and SBR T are updated accordingly. Clearly, the search space for the top K trajectories within the spatial range Q is reduced since not all trajectories passing through Q are retrieved for trajectory score computation, which significantly improves the efficiency of the trajectory search.

Consider the travel route set of trajectories TRD in Table I as an example. A spa-tial range Q (i.e., the rectangle shape in Figure 6) is issued and a threshold K is set that the attractive scores are derived in the example in Section 4.3. Then, we se-quentially scan the ROIs in R s Q one by one to determine which trajectories are to be selected as candidates for the top 5 trajectories. The detailed rounds of BTS are shown in Table IV. Here, we use DT as our trajectory score function for illustration. In the initial round, the parameters in BTS are set as T = X  , LBS T = X  ,and SBR T = R 8 . In the first round, algorithm BTS selects R 6 in R s Q to determine those trajectories that pass through R 6 . Via our trajectory invert list, we could have DT ( Tr 2 ) = 1 . 48, into T in a decreasing order in terms of their scores (i.e., T ={ Tr 8 , Tr 9 , Tr 2 , Tr 6 } ). Since the number of trajectories in T is smaller than 5, we need to include more tra-jectories. Therefore, the next ROI R 2 in R s Q is selected and the trajectories passing through R 2 are retrieved. Two trajectories (i.e., Tr 4 and Tr 5 ) pass through R 2 and their scores are computed as DT ( Tr 4 ) = 1 . 24 and DT ( Tr 5 ) = 1 . 433. Hence, we have mined by their scores. The top 5 trajectories in T are Tr 8 , Tr 9 , Tr 2 , Tr 5 ,and Tr 6 and the score of the fifth trajectory is DT ( Tr 6 ) = 1 . 338. Accordingly, LBS T is set to 1.338. Based on the value of LBS T , SBR T would be updated. Here, SBR T is used to shrink the ROI searching space, thereby reducing the search space of candidates for the top 5 trajectories. By Definition 5.2, SBR T is set to R 7 since the attractive scores of R 6 , R 2 , R ,and R 7 are greater than LBS T = 1 . 338. Note that R 8 is eliminated from the search space since the trajectories passing through the ROIs listed before R 8 in R s Q should have been examined before R 8 is reached. Yet the remaining trajectories in R 8 do not have DT scores higher than LBS T and thus are not qualified. Here, we still need to scan the inverted trajectory list of the next ROI R 5 in R s Q . After deriving DT ( Tr 3 ) = 1 . 395 the fifth trajectory in T is Tr 5 , LBS T = DT ( Tr 5 ) = 1 . 433. Meanwhile, we are able to tighten the search bound (i.e., SBR T = R 5 ), since the attractive scores of R 6 , R ,and R 5 are greater than LBS T = 1 . 433. At this point, since SBR T is reached, search result is the same as that of the naive algorithm in Section 5.1. In this exam-ple, we do not need to retrieve Tr 1 and Tr 10 for the top K trajectories, reducing the search cost.

Given a user movement graph UMG = ( R , E ) and a trajectory dataset D ,thetime complexity of the bounded trajectory search algorithm is O ( n ( logn + m ) +  X  mlogm ), where n =| R | ;  X  is the number of the scanned ROIs and  X   X  n ; m is the number of candidate trajectories and m  X | D | . In Algorithm BTS, the ROIs which overlap the query range are sorted in decreasing order by their attractive scores and the maximum number of ROIs covered by the query range is n , and thus the time complexity of this step is O ( nlogn ). Let the number of scanned ROIs be  X  and the number of trajectories passing the  X  be m . The time complexity for calculating the scores of the m trajectories is O ( mn ) because each trajectory passes at most n ROIs. To update the score bound for candidate trajectories needs O ( mlogm ) and it is performed at most  X  time, and thus the time complexity is O (  X  mlogm ). Therefore, the overall time complexity is O ( n ( logn + m ) +  X  mlogm ). In this section, we analyze the correctness of algorithm BTS. The goal of our analysis is to prove that the accuracy of a search result derived by algorithm BTS is good compared to the naive algorithm. In algorithm BTS, by selecting ROIs within a given spatial range, trajectories passing through the selected ROIs are retrieved as candidates for the top K trajectories. The search bound of ROIs to be examined is used as a stop criteria. It is not necessary to retrieve remaining trajectories because trajectories not examined within the search bound are not qualified as the top K trajectories at all. In BTS, we only select trajectories that certainly pass through the ROIs before SBR in R s Q as candidates for the top K trajectories. If a trajectory only passes through the ROIs after SBR in R s Q but not any other ROI before SBR in R s Q , this trajectory would not be selected as a candidate for the top K trajectories. In short, all trajectories passing through the spatial range are separated into two sets. The trajectories that only pass through the ROIs after SBR in R s Q , are put in the Noncandidate Set, denoted as NS. The remaining trajectories that certainly go through the ROIs before SBR in R s Q are put in a Candidate Set, denoted as CS. Hence, in BTS, we only select all trajectories in CS as candidates of top K trajectories. To prove the correctness of BTS, we should prove that there does not exist a trajectory in NS which should be in the top K trajectories. In other words, we prove that the scores of the trajectories in CS are larger than those of the trajectories in NS. The correctness of BTS is proved by Theorem 5.5 and Theorem 5.8 with respect to different trajectory score functions.
 In Theorem 5.5, we prove the correctness of BTS with the trajectory score function DT . To prove the correctness of BTS, we prove that the scores of the top K trajectories discovered by BTS are larger than the scores of the trajectories that are not selected as candidates by BTS, that is, the minimum trajectory score of the trajectories in CS must be larger than the maximum trajectory score of the trajectories in NS. Before proving Theorem 5.5, we prove two lemmas used in Theorem 5.5. Lemma 5.3 is used to find out the maximum trajectory score from NS. Lemma 5.4 is used to find out the minimum trajectory score from CS.

In Lemma 5.3, we show how to determine the value of the maximum average of a set of numbers selected from a given set of numbers.
 ..., S 2 for i  X  IN and 1  X  i  X  n .

Let a nonempty set S i max be the subset that has the maximum average in S i j for 1  X  j  X  C n the average of the elements in the subset is 1 i i j = 1 x j .

Then we claim that the average of the elements in S i max is greater than the average for i  X  IN and 1  X  i &lt; n .

For i  X  IN and 1  X  i &lt; n ,since x j &gt; x i + 1 for 1  X  j  X  i , 1 i the maximum average and the maximum average is x 1 .

In Lemma 5.4, we show how to determine the value of the minimum average of a set of numbers selected from a given set of numbers.

Similarly, Lemma 5.3 and Lemma 5.4 hold even though a part of the distinct elements in set S are equal.
 ROIs R s Q , the corresponding set of trajectories T that pass through at least one ROI in R Q and a set of candidate trajectories T with LBS T and SBR T , the scores of top K in T are larger than the scores of the trajectories in T /T .
 T . Suppose that there exists a trajectory in T / T such that the score of the trajectory is greater than the score of one of the top K trajectories in T .Letthesizeof R s Q be m and SBR T = R s h . If a trajectory in T / T , the trajectory does not pass through any ROI R s i for 1  X  i  X  h , or it will be in T . The reason is that BTS selects trajectories that pass through the ROIs in { R s 1 ,..., R s h } . Hence, a trajectory in T / T only passes each 1  X  i  X  h , the minimum score of a trajectory that only passes through ROIs maximum trajectory score in T / T is less than the minimum trajectory score in T . However, the minimum trajectory score is smaller than or equal to the score of the K th trajectory in T . Then, there does not exist a trajectory in T / T such that the score of the trajectory is greater than the score of one of the top K trajectories in T . Hence, the scores of the top K trajectories in T are larger than the scores of trajectories in T / T by contradiction.
 Similarly, we prove the correctness of BTS with the trajectory score function BT in Theorem 5.8. Lemma 5.6 and Lemma 5.7 used in Theorem 5.8 are first proved.
 S , S 2 1  X  j  X  C n
Let a nonempty set S i max be the subset that has the maximum summation in S i j for 1  X  j  X  C n the summation of the elements in the subset is i j = 1 x j .

Then, we claim that the summation of the elements in S i max is smaller than the summation of the elements in S i + 1 max for i  X  IN and 1  X  i &lt; n . Thus, we prove that
For i  X  IN and 1  X  i &lt; n ,since x i + 1 &gt; 0 for each i and 1  X  i  X  n , S max is the maximum summation and the maximum summation is P ROOF . The proof is similar to the proof of Lemma 5.6.
 ROIs R s Q , the corresponding set of trajectories T that passes through at least one ROI in R s Q and a set of candidate trajectories T with LBS T and SBR T , the scores of top K in T are larger than the scores of the trajectories in T /T.

P ROOF . The proof for the correctness of BTS with the BT score function is similar to the proof of Theorem 5.5 using Lemma 5.6 and Lemma 5.7. In this section, we conduct experiments to evaluate the performance of our framework. We crawl travel and biking trajectories around Taiwan from EveryTrail and Bikemap [Bikemap 2010; 2009]. There are 6,548 trajectories and 1,301,192 GPS data points. To extract ROIs, the whole space is divided into grids and the grid length is set to l meters. The impact of grid length will be discussed in our experiments later. A performance study of algorithm BST is investigated. Furthermore, to evaluate the scalability of algorithm BTS, we vary the data size by the number of trajectories in the spatial range (denoted as | T Q | ) and the number of ROIs in the spatial range (i.e., | R Q | ). The default settings of some important parameters are that the grid length l = 300 meters, the rank-threshold K = 10, the parameter  X  = 0 . 85, and the minimum density threshold  X  = 10. All experiments are performed on a computer with AMD Phenom II X4 955 processors and 4GB of memory. In this section, we first conduct experiments to demonstrate trajectories derived under two score functions (i.e., DT and BT ) in PATS. Then, a user study is performed to solicit users X  feedback to justify the effectiveness of PATS.
 6.2.1. Top K Trajectories under Different Trajectory Score Functions. We first demonstrate the search result of PATS under different trajectory score functions. The spatial range is the range of Kenting, one of the popular travel areas in Taiwan. The attractions in Kenting [Kenting National Park Headquarters, Taiwan 2011] are depicted in Figure 7. Figure 8 (respectively, Figure 9) shows the top 3 trajectories retrieved under the score function DT (respectively, BT ) by PATS. As shown in Figure 8(a) and Figure 9(a), the length of the top trajectory ranked by DT is smaller than that of the top trajectory ranked by BT . Clearly, trajectory score function DT includes the ROIs having high attractive scores since the score function DT aims at maximizing the average attractive score of ROIs. With the score function BT , long trajectories, passing through many ROIs, are rank highly in the search results. 6.2.2. Quality Evaluation of Top K Trajectories in PATS. In this section, we solicit users X  feedback to evaluate the quality of search results of PATS. In our user study, we randomly invited 30 users from campuses to rate the top K trajectories of PATS. The users consist of 16 females and 14 males, and their ages are between 22 to 35. We provided two search results by issuing spatial ranges: One spatial range covers Kenting and the other is the area of Sun Moon Lake. Due to the fact that we have a sufficient number of trajectories in Kenting and Sun Moon Lake, the search result of these two spatial ranges are sufficient. The spatial ranges for Kenting and Sun Moon Lake are shown in Figure 7 and Figure 10(a), respectively. In our user study, we only set K to be 1. Thus, the top trajectory is retrieved under two score functions. For the spatial range of Kenting scenic area, the top trajectory retrieved for an in-depth trip and the top trajectory retrieved for an in-breadth trip are shown in Figure 8(a) and Figure 9(a), respectively. For the spatial range of Sun Moon Lake scenic area, Figure 10(b) and Figure 10(c) show the top 1 trajectories retrieved for an in-depth trip and an in-breadth trip, respectively. In addition, the attractions in Sun Moon Lake area are illustrated in Figure 10(a).

For each top trajectory under two score functions, we asked the users to rate their interest in the trajectory via four levels: very interested, interested, somewhat inter-ested, or not interested. To provide a quantitative measure, we assigned interest scores to these levels from 3 (very interested) to 0 (not interested). To analyze the effectiveness of the retrieved routes for different travel requirements, the users were divided into two groups: one group of users prefer in-depth trips while the other group of users like in-breadth trips. In the user study, 47% of users preferred in-depth trips (denoted as U
D ) and 53% preferred in-breadth trips (denoted as U B ). To evaluate the performance in different travel scenarios, for each retrieved route, we aggregated the rating of each group and averaged the interest scores.
 The experimental results of the effectiveness of PATS are presented in Figure 11. As shown in Figure 11(a), given the spatial range in Kenting scenic area, the users in group U D are indeed more interested in our recommended in-depth trip (i.e., top trajectory derived by the score function DT ), because the average interest score of a recommended in-depth trip is higher than the average interest score of a recommended in-breadth trip. In addition, given the query range in Kenting scenic area, the users in group U B liked our recommended in-breadth trip (i.e., top trajectory retrieved by trajectory score function BT ) because the average interest score of a recommended in-breadth trip is higher than the average interest score of a recommended in-depth trip. Similarly, Figure 11(b) shows the result of evaluating the users X  feedback for the top trajectory in Sun Moon Lake area. Therefore, the experimental results show that the quality of trajectories derived by PATS is high, and thus PATS could provide different travel routes for two kinds of user preferences. Since algorithm BTS supports online trajectory search in PATS, the efficiency of algorithm BTS is next examined. We compare algorithm BTS with the naive algorithm (algorithm Naive) described in Section 5.1. In the following, the results derived by algorithm BTS with trajectory score functions BT and DT are denoted as BTS-BT and BTS-DT, respectively. We evaluate the efficiency of algorithm BTS by varying grid length l , rank-threshold K , and the trajectory data sizes. 6.3.1. The Impact of Grid Length. In Figure 12, we fix the spatial range such that there is about 1000 trajectories within the spatial range (i.e., | T Q |= 1000) in the experiment. As show in Figure 12, the response time of the three algorithms decreases as the grid length increases. The reason is that the number of ROIs would decrease when the value of grid length l increases. Thus, the computation cost for deriving trajectory scores is decreased due to a smaller number of ROIs. In addition, both BTS-BT and BTS-DT outperform algorithm Naive. This shows the advantage of using bounds to reduce search space for the top K trajectories. Although using a larger grid length can improve the efficiency of query time, the discrimination of trajectories is reduced. This is because each trajectory is likely to have the same travel route. Thus, trajectories will have the same trajectory score in terms of depth-trip and breadth-trip scores. 6.3.2. The Impact of Rank-Threshold. Figure 13 shows the effect of K on BTS which dis-covers the top K trajectories. In the experiment, the spatial range includes 100 ROIs and 1600 trajectories (i.e., | R Q |= 100 and | T Q |= 1600). As can be seen in Figure 13, when the value of K increases, the response time of BTS-BT and that of BTS-DT slightly increases because more candidate trajectories are involved in calculating their trajec-tory scores. Although the response time of the Naive algorithm is not affected by K , the response time of algorithm Naive is much larger than that of BTS-BT and BTS-DT. 6.3.3. The Impact of Trajectory Data Size. For scalability, two factors affect the perfor-mance of online trajectory search. One is the number of ROIs and the other is the number of trajectories. To evaluate the effect of a different number of trajectories (i.e., | T and vary the number of trajectories (i.e., | T Q | ranges from 500 to 2500). In addition, we fix the number of ROIs in the spatial range as 500 (i.e., | R Q |= 500) by randomly choosing 500 ROIs within the spatial range. As shown in Figure 14(a), the response time of the three algorithms increases as | T Q | increases. However, the response times of BTS-DT and BTS-BT are smaller than that of algorithm Naive. Since algorithm BTS is able to reduce the search space for retrieving the top K trajectories, it results in a shorter response time. The performance is prominent when | T Q | is large.

Similarly, to evaluate the effect of a different number of ROIs, we randomly choose | R number of trajectories that pass through the spatial range to be 2000. As shown in Figure 14(b), when | R Q | increases, the response times of algorithm Naive and BTS-BT (or BTS-DT) slightly increase. This is because that with the increase of | R Q | , the cost of trajectory score calculation would increase. Note that BTS-BT and BTS-DT still have better performance than algorithm Naive. The preceding experimental results show that algorithm BTS in PATS is efficient enough to support online trajectory search. In this article, we have dealt with the problem of searching for pattern-aware travel routes from trajectory datasets. We have developed a framework comprising travel be-havior exploration and trajectory search components, to search the top K trajectories with a user preference of depth/breadth. We have built a user movement graph to cap-ture travel behaviors. Then, we have proposed algorithm AS to infer attractive scores of ROIs. In light of attractive scores of ROIs, we have formulated a depth-trip score function and a breadth-trip score function for trajectories. To support time-critical on-line query, we have proposed algorithm BTS without compromising the accuracy of the search results. We have evaluated our framework using a real dataset and have studied the performance of our framework under different parameter settings. In particular, user studies have been conducted and from these studies, our framework effectively derives interesting travel routes according to user preference of depth/breadth. In ad-dition, the experimental results demonstrate the efficiency of our framework as the query time is less than one second overall. In the future, we will develop more complex travel requirements, such as combining both in-depth and in-breadth patterns and considering the travel time of travel routes. Moreover, for the determination of ROIs, we will explore the attractions from social media using photos and check-in records. With the use of social media, users X  travel experiences could be emphasized for travel route planning. In addition, to derive more informative travel routes, we will develop more semantic high-level trajectory search from semantic trajectories.

