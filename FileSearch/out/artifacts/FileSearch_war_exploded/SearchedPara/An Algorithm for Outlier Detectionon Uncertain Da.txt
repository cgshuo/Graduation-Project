 between uncertain and deterministic data, existing data mining algorithms on deterministic data are not suitable for uncertain data. Such data present in-teresting research challenges for a variety of data set and data mining applica-uncertain data mining.

Outlier detection is considered as an important data mining task, aiming at discovery of the elements that are signi ficantly different from other elements, or does not conform to the expected normal behavior, or conforms well to a defined abnormal behavior [3] [5] [8]. Now the flow property and uncertainty of data more and more apparent, outlier detection on uncertain data stream has become a new research topic.

To the best of our knowledge, no existing algorithm considers distance-based on uncertain data stream over sliding window that uncertain data tuple consist of a set of instances. In summary, the major contributions of this work are as follows:  X  The first algorithm for outlier detection over sliding window on uncertain data stream that are tuple level uncertainty is designed.  X  A dynamic storage structure is designe d for outlier detection on uncertain data stream over sliding window, to meet the demands of limited storage and real-time response.  X  We propose an efficient range query method based on SM-tree(Statistics M-tree), it could reduce some of unnecessa ry calculations thereby improve the implementation efficien cy of the algorithm.  X  We also implement a series of experi ment evaluations, showing that our methods are effective and efficient.
 This paper is organized as follows. In the next section, we will introduce the related work. After that, we introduce semantic of outlier on uncertain data stream in section 3. Section 4 proposes the method for outlier detection on uncertain data stream. In section 5, we w ill present the experimental results. Section 6 concludes the paper. uncertain data; (2) outlier detect ion on uncertain data stream. 2.1 Outlier Detection on Uncertain Data The first method for outlier detection o n uncertain data was proposed in [2]. Uncertain data object was represented by a probability density function. The estimation and sampling. However, their work only focused on detecting outlier objects without considering outlier instances.
 Another outlier detection method for un certain data was presented in [12]. If the existing probability of neighbor object was very low, then the centered object was a distance-based outlier. Th eir method only concerned tuple level for property level uncertainty.

Bin Jiang et al. [7] started with a comprehensive model considering both uncertain objects and their instances. T hey assumed that the uncertain objects each uncertain object using the instan ces of objects with similar properties.
The algorithms mentioned above work are all in static fashion. This means that the algorithm must be executed from scratch if there are changes in the underlying data objects, leading to performance degradation when operate on uncertain data stream. 2.2 Outlier Detection on Uncertain Data Stream The first method for outlier detection on uncertain data stream was proposed in and proposed a new definition of distance-based outlier over sliding window. level, so it is not suitable for the uncertain data model studied in this paper.
In this research, we propose a new algorithm for outlier detection on uncertain Our techniques meet the demand of uncertain data stream for running time and storage requirements. Therefore, our study extends to this new research field. definition, and secondly to explain the meaning of the symbol. The traditional outlier definition on certain data is as follows: Definition 1. (Neighbors) R is a user specified threshold, R  X  0 . x i and x j x i has.
 has is less than K, i.e. n ( x i ,R ) &lt;K .
 This definition is only suitable for determine data. For uncertain data set, we need to consider all possible worlds t o determine whether the uncertain data tuple is an outlier in the current window.

It is assumed that uncertain data stream consist of uncertain tuples x 1 , x 2 ,  X  X  X  , x t i.e. x i = { ( x 1 i ,p x 1 Definition 3. (( R, K ) -Outlier Possible World ) We define a possible world World probability in N x i , sum ( x i )= w Definition 4. (( R, K,  X  ) -Outlier) We define that an uncertain tuple x i to be a ( R, K,  X  ) -outlier, if sum ( x i ) is at lest  X  .
 Outliers set and candidates set are stored, safe inliers set needn X  X  be stored. Table 1 summarizes of the most frequently used symbols throughout the paper, along with interpretation. In this section, we provide a new metho d for outlier detection on uncertain stream. We start by describing the framework for outlier detection, and then on uncertain data stream, we can not use the outlier detection method on static database, because of the most straightforward scratch, towards updating the design incremental algorithm, it processes only the changes based on previous result to produce the new result for current window. Next, we will introduce our methods.
 4.1 Framework At first, we introduce the storage structure, in order to meet the demand for ture key information of outlier during the course of uncertain data stream. For example, we list partial uncertain tuple in uncertain data stream: of tuple x i , p x 1 K = 2, range query results for every instance in the current window is showed in Figure 1(range query is find neighbors for instance). We neaten the range query result on the two principles: (1) The instance of one tuple can not appear (2) If there are at least two instances of the same uncertain tuple in the range queries result of a instance, then merge these instances existing probability of probability of x 1 3 and x 2 3 are added, p x 1 is more conducive to analyze in figure 2.

Since the tuple is uncertain data, the probability of an uncertain tuple being an outlier is probability summation of its every instance being an outlier as Definition 5.
 Definition 5. (Uncertain Tuple Outlier Probability) We assume that the uncertain tuple x i consist of m instances (( x 1 i , p x 1  X  X  X  ,( x m instance being an outlier, i.e. pp x i = m j =1 pp x j get the probability of each instance being an outlier.
 Definition 6. (Instance Outlier Probability) The probability of the instance x i being an outlier is denoted by pp x j i , pp x j i = p x j i x 1 being an outlier pp x 1 1 is 0 . 7 an outlier pp x 2 being an outlier is equal to p x 1 = pp x 1 Definition 7. (Non-outlier Instance) Let s x i denote the set of instances that is not an outlier in any possible world. s y x x sets do not overlap and cover the complete objects set, i.e., s y x 1  X   X  , i.e. Through analysis of the results, we can get the outlier in the current window, and then we will design a storage structure. Since we are dealing with uncer-tain data in stream environment, the arrival time of uncertain data will affect sets, preceding neighbors and su cceeding neighbors set, denoted by P x j respectively.
 Definition 8. (Non-outlier Instance Probability) The non-outlier instance x greater than 1  X   X  ,then x j i is non-outlier instance.
 According to the above definition, we only need to store the neighbors that make the tuple become non-outlier(according to the time order), instead of stor-ing all neighbors of each instance. The tuple in P x j tuple x i . It may make tuple x i become outlier from ca ndidate set, therefore, we must consider the expires time of tuple in candidate set. The tuples in P x i is stored with time information and probability. The tuples in the S x i can not be expired before the tuple x i was deleted, so we only store the probability information. For example, in figure 3, we depict an example in two dimen-sional, for K =3,  X  =0 . 7. Let the subscripts denote the order of arrival of { x 6 (0 . 4) ,x on time, be divided into two sets to store, i.e., S x j the storage space to meet the demand of uncertain data stream, we only store the necessary information. According arrival time of each neighbor, to find the existence of the neighbors make tuple x 18 is non-outlier, i.e., p x 1  X   X  ,then x 4.2 Incremental Processing In this paper, we use the count-based window which always maintains the W most recent uncertain tupl es. The uncertain tuples ma intained by the sliding window are termed active objects. When the tuple leaves the window we think that the tuple expires. Along with the arrival of the new uncertain tuples, the old tuples disappear from the window.

In the section, we introduce the increm ental processing for outlier detection on uncertain data stream. Whenever the window slid, the new uncertain tuple arrives, and the old uncertain tuple is moved out from the window. In order to certain tuple. When the old tuple is deleted, it may make the tuple in candidate set become outlier. The impact that a new tuple arrives includes two classifica-tions: (1) The impact to a new uncertain tuple from existing uncertain tuples. (2) The impact to exist uncertain tupl es from a new uncertain tuple. It might make the outlier become candidate tuple, or make the candidate tuples become a safe inlier.

When a new tuple arrives, the range query is done according the probability descending of each instance. According to Definition 6, the important tuples are found and stored in the data structure. Range query could be done according the time of tuple. For instance, when tuple x i arrivals, we first determine whether x i is non-outlier. These instances could be store in store structure of x i .The pseudo code of these operations is given in Algorithm 1.
 and then determine whether the tuple become an outlier. The pseudo code of these operations is given in Algorithm 2.
 x the store structure of x 18 as follows: Algorithm 1. Arrival (tuple x arr ,now) x inlier. When x 18 become a safe inlier along with window slid, we deleted store structure of x 18 . 4.3 Improve the Efficiency of Range Queries In the previous section, we introduce the method of range queries from back to we use the SM-tree(Statistics M-tree) to range query.

The formation of SM-tree that each instance in current window is a left node, and the radius of the leaf node is R is showed in figure 4. Parent node con-tains statistic information of child nodes, M u and M l are min and max time of M node respectively. When a new tuple a rrives, the range query is done for each instance of the new tuple. We assume that the new instance in the range M then first calculate the relationship between leaf nodes of M 1 .Ifwegettheall Algorithm 2. Delete (tuple x i .exp ,now) instances that make the new tuple become non-outlier in the range of M 1 ,it calculations with SM-tree to imp rove efficiency of range queries. We conducted a series of experiments on synthetic data set and real data sets to evaluate the performance of the algorithms proposed in this paper, namely Uncertain Outlier Detectio n on Uncertain Data Stream (denoted by UOD), and Uncertain Outlier Detection based on M-tree(denoted by UOD-M). For com-parison, we implemented Naive Outlier Detection based on Examining Possible Worlds method named (denoted by NUOD).

All the algorithms are implemented in visual C 2010, and experiments are carried out on a PC with a Core i3-3.3 GHz CPU and 4G of main memory. 5.1 Running Time We study the performance of the propose d methods by varying several of impor-tant parameters such as the window size W, the number of outliers, the number of required neighbors K, the distance R and the probability threshold  X  .
First, we test the performance of the algorithm for varying values of W from 10 4 to 10 5 . Figure 5 certify the running time of all algorithms increased when increasing the length of the sliding w indow. The performance of UOD-M and UOD algorithm performs better than NUOD.
 As expected, UOD-M algorithm performs better than UOD algorithm.

In figure 7, we show that the performance of NUOD, UOD-SM and UOD algorithm. We vary K from 1 to 100. Figure 7 show that the running time of UOD-M and UOD decreased when increasing the value of K.

Figure 8 show that running time of UOD is much higher than UOD-M for varying R from [10 , 50]. Figure 9 demonstrate that the running time when in-creasing the probability threshold  X  .Wevary  X  value from 0 . 1to0 . 9. Figure 9 show that of both algorithms d ecreasing when increasing  X  value. 5.2 Memory Consumption Figure 10 show the memory consumption of three data sets. The consumed mem-ory corresponds to the memory needed to store the information for uncertain tuples in current window. From the figure 10, we can see the required amount of memory is only a small fraction of the total memory available in modern machines. In this paper we studied the problem of outlier detection o n uncertain data ability. We proposed outlier definition based on possible worlds, and then the method used to outlier detection on un certain data stream is proposed. A dy-namic storage structure was designed. We have conducted extensive experiments to evaluate the relative performance of the algorithms. The results showed that the algorithm can effect ively detect outliers.

We will continue to study the problem based on outlier detection on uncertain data stream. Next steps of our work are taking more complex uncertain data, such as outlier detection on multi-d imensional uncertain data stream.
