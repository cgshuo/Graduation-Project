 Speech disfluencies (also known as speech repairs) occur frequently in spontaneous speech and can pose difficulties to natural language processing (NLP) since most NLP tools (e.g. parsers, part-of-speech taggers, information extraction modules) are tradi-tionally trained on written language. Speech dis-fluencies can be divided into three intervals, the reparandum , the editing term and the correction (Heeman and Allen, 1999; Liu et al., 2006). (it was) * (you know) it was set
In the above example,  X  X t was X  is the reparandum,  X  X ou know X  is the editing term and the remaining sentence is the correction. The asterisk marks the in-terruption point at which the speaker halts the origi-nal utterance in order to start the repair. The edit-ing term is optional and consists of one or more filled pauses (e.g. uh, uh-huh) or discourse mark-ers (e.g. you know, so). Some researchers include editing terms in the definition of disfluencies. Here we focus only on detecting repetitions (the speaker repeats some part of the utterance), revisions (the speaker modifies the original utterance) or restarts (the speaker abandons an utterance and starts over). We also deal with complex disfluencies, i.e. a series of disfluencies in succession ( X  X  think I think uh I believe that... X ).

In previous work many different approaches to detecting speech disfluencies have been proposed. Different types of features have been used, e.g. lexi-cal features only, acoustic and prosodic features only or a combination of both (Liu et al., 2006). Fur-thermore, a number of studies have been conducted on human transcriptions while other efforts have focused on detecting disfluencies from the speech recognition output.

In this paper we propose a novel framework for speech disfluency detection based on Integer Lin-ear Programming (ILP). With Linear Programming (LP) problems the goal is to optimize a linear ob-jective function subject to linear equality and linear inequality constraints. When some or all the vari-ables of the objective function and the constraints are non-negative integers, LP becomes ILP. ILP has recently attracted much attention in NLP. It has been applied to several problems including sentence com-pression (Clarke and Lapata, 2008) and relation ex-traction (Roth and Yih, 2004). Some of these meth-ods (e.g. (Roth and Yih, 2004)) follow the two-stage approach of first hypothesizing a list of possible an-swers using a classifier and then selecting the best answer by applying ILP. We have adopted this two-stage approach and applied it to speech disfluency detection.

In the first stage we use state-of-the-art tech-niques for speech disfluency detection, in particular, Hidden-Event Language Models (HELMs) (Stolcke and Shriberg, 1996), Maximum Entropy (ME) mod-els (Ratnaparkhi, 1998) and Conditional Random Fields (CRFs) (Lafferty et al., 2001). Nevertheless, any other classification method could be used in-stead. During testing each classifier proposes pos-sible labels which are then assessed in the presence of local and global constraints using ILP. ILP makes the final decision taking into account both the con-straints and the output of the classifier.

In the following we use the Switchboard corpus and only lexical features for training our 3 classi-fiers. Then we apply ILP to the output of each clas-sifier. Our goal is not to investigate the best set of features or achieve the best possible results. In that case we could also use prosodic features as they have been shown to improve performance. Our tar-get is to show that by using ILP we can improve with negligible cost in processing time the performance of state-of-the-art techniques, especially when not much training data is available.

The novelty of our work lies in the two follow-ing areas: First, we propose a novel approach for detecting disfluencies with improvements over state-of-the-art models (HELMs, ME models and CRFs) that use similar lexical features. Although the two-stage approach is not unique, as discussed above, the formulation of the ILP objective function and constraints for disfluency detection is entirely novel. Second, we compare our models using the tasks of both detecting the interruption point and finding the beginning of the reparandum. In previous work (Liu et al., 2006) Hidden Markov Models (combination of decision trees and HELMs) and ME models were trained to detect the interruption points and then heuristic rules were applied to find the correct on-set of the reparandum in contrast to CRFs that were trained to detect both points at the same time.
The structure of the paper is as follows: In sec-tion 2 we describe our data set. In section 3 we de-scribe our approach in detail. Then in section 4 we present our experiments and provide results. Finally in section 5 we present our conclusion and propose future work. We use Switchboard (LDC catalog LDC99T42), which is traditionally used for speech disfluency ex-periments. We transformed the Switchboard annota-tions into the following format: I BE was IE one IP I was right
BE (beginning of edit) is the point where the reparandum starts and IP is the interruption point (the point before the repair starts). In the above ex-ample the beginning of the reparandum is the first occurrence of  X  X  X , the interruption point appears af-ter  X  X ne X  and every word between BE and IP is tagged as IE (inside edit). Sometimes BE and IP occur at the same point, e.g.  X  X  BE-IP I think X .
The number of occurrences of BE and IP in our training set are 34387 and 39031 respectively, in our development set 3146 and 3499, and in our test set 6394 and 7413. In the first stage we train our classifier. Any clas-sifier can be used as long as it provides more than one possible answer (i.e. tag) for each word in the utterance. Valid tags are BE, BE-IP, IP, IE or O. The O tag indicates that the word is outside the disflu-ent part of the utterance. ILP will be applied to the output of the classifier during testing.

Let N be the number of words of each utter-ance and i the location of the word in the utterance ( i =1,..., N ). Also, let C BE ( i ) be a binary variable (1 or 0) for the BE tag. Its value will be determined by ILP. If it is 1 then the word will be tagged as BE. In the same way, we use C BE  X  IP ( i ) , C IP ( i ) , C tively. Let P BE ( i ) be the probability given by the classifier that the word is tagged as BE. In the same way, let P BE  X  IP ( i ) , P IP ( i ) , P IE ( i ) , P O ( probabilities for tags BE-IP, IP, IE and O respec-tively. Given the above definitions, the ILP problem formulation can be as follows: subject to:
Equation 1 is the linear objective function that we want to maximize, i.e. the overall probability of the utterance. Equation 2 says that each word can have one tag only. Equation 3 denotes that the first word is either BE, BE-IP or O. Equation 4 says that the last word is either BE-IP, IP or O. For example the last word cannot be BE because then we would expect to see an IP. Equation 5 defines the transitions that are allowed between tags as described in Table 1 (first row). Equation 5 says that if we have a word tagged as BE it means that the previous word was tagged as BE-IP or IP or O. It could not have been tagged as IE because IE must be followed by an IP before a new disfluency starts. Also, it could not have been BE because then we would expect to see an IP. From Table 1 we can easily define 4 more equations for the rest of the tags. Finally, equation 6 denotes that we cannot transition from BE to BE (we need an IP in between).

We also formulate some additional rules that describe common disfluency patterns. First, let us have an example of a long-context rule. If we have the sequence of words  X  X e was the one um you know she was the one X , we expect this to be tagged as  X  X e BE was IE the IE one IP um O you O know O she O was O the O one O X , if we do not take into account the context in which this pattern occurs. We incor-porate this rule into our ILP problem formulation as follows: Let ( w 1 ,..., w N ) be a sequence of N words where both w 2 and w N  X  7 are personal pronouns, the word sequence w 3 , w 4 , w 5 is the same as the sequence w N  X  6 , w N  X  5 , w N  X  4 and all the words in between ( w 6 ,..., w N  X  8 ) are filled pauses or discourse markers. Then the probabilities given by the classi-fier are modified as follows: P BE (2) = P BE (2) + th 1 , P P are empirically set thresholds (between 0.5 and 1, using the development set of the corpus).
 Now, here is an example of a short-context rule. If we have the same word appear 3 times in a row ( X  X o do do X ) we expect this to be tagged as  X  X o BE-IP do IP do O X . To incorporate this rule into our ILP problem formulation we can modify the probabili-ties given by the classifier accordingly.

In total we have used 7 rules that deal with short-context and 5 rules that deal with long-context de-pendencies. From now on we will refer to the model that uses all rules (general ILP formulation and all pattern-based rules) as ILP and to the model that uses only the general ILP constraints and the short-context pattern-based rules as ILP-. In all rules, we can skip editing terms (see example above). For HELMs we use the SRI Statistical Language Modeling Toolkit. Each utterance is a sequence of word and Part-of-Speech (POS) pairs fed into the toolkit: i/prp BE was/vbd IE one/cd IP i/prp was/vbd right/jj . We report results with 4-grams. For ME we use the OpenNLP Max-Ent toolkit and for CRFs the toolkit CRF++ (both available from sourceforge ). We experimented with different sets of features and we achieved the best results with the following setup ( i is the loca-tion of the word or POS in the sentence): Our word features are  X  w i  X  ,  X  w i +1  X  ,  X  w i  X  1 , w i  X  ,  X  w tures have the same structure as the word features. For ILP we use the lp solve software also avail-able from sourceforge .

For evaluating the performance of our models we use standard metrics proposed in the literature, i.e. F-score and NIST Error Rate. We report results for BE and IP. F-score is the harmonic mean of preci-sion and recall (we equally weight precision and re-call). Precision is computed as the ratio of the cor-rectly identified tags X to all the tags X detected by the model (where X is BE or IP). Recall is the ra-tio of the correctly identified tags X to all the tags X that appear in the reference utterance. The NIST Error Rate measures the average number of incor-rectly identified tags per reference tag, i.e. the sum of insertions, deletions and substitutions divided by the total number of reference tags (Liu et al., 2006). To calculate the level of statistical significance we always use the Wilcoxon signed-rank test.

Table 2 presents comparative results between our models. The ILP and ILP-models lead to signif-icant improvements compared to the plain models for HELMs and ME (p &lt; 10  X  8 , plain models vs. ILP and ILP-). With CRFs the improvement is smaller, p &lt; 0.03 (CRF vs. CRF with ILP), not significant (CRF vs. CRF with ILP-), p &lt; 0.0008 (CRF with ILP vs. CRF with ILP-). HELMs and ME models ben-efit more from the ILP model than the ILP-model (ME only for the BE tag) whereas ILP-appears to perform better than ILP for CRFs.

Table 3 shows the effect of the training set size on the error rates only for BE due to space restrictions. The trend is similar for IP. The test set is always the same. Both ILP and ILP-perform better than the plain models. This is true even when the ILP and ILP-models are trained with less data (HELMs and ME models only). Note that HELM (or ME) with ILP or ILP-trained on 25% of the data performs bet-ter than plain HELM (or ME) trained on 100% of the lecting and annotating data is expensive and time-consuming. Furthermore, for CRFs in particular the training process takes long especially for large data sets. In our experiments CRFs took about 400 iter-ations to converge (approx. 136 min for the whole training set) whereas ME models took approx. 48 min for the same number of iterations and training set size. Also, ME models trained with 100 iter-ations (approx. 11 min) performed better than ME models trained with 400 iterations. The cost of ap-plying ILP is negligible since the process is fast and applied during testing. We presented a novel two-stage technique for de-tecting speech disfluencies based on ILP. In the first stage we trained HELMs, ME models and CRFs. During testing each classifier proposed possible la-bels which were then assessed in the presence of lo-cal and global constraints using ILP. We showed that ILP can improve the performance of state-of-the-art classifiers with negligible cost in processing time, especially when not much training data is available. The improvement is significant for HELMs and ME models. In future work we will experiment with acoustic and prosodic features and detect disfluen-cies from the speech recognition output.
 This work was sponsored by the U.S. Army Re-search, Development, and Engineering Command (RDECOM). The content does not necessarily re-flect the position or the policy of the Government, and no official endorsement should be inferred.
