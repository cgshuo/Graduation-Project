 Standardization efforts are paving the way which leads to the mainstream adop-tion of SaaS (Software-as-a-Service) and cloud computing environments [1]. Cur-rently, different players (e.g., OMG, W3C, Eurocloud, NIST) are undertaking several initiatives 1 (e.g., USDL, TOSCA, CCRA, OCCI) to provide useful and usable standards for cloud computing. In 2009, it was argued that no standard existed [2]. This has changed. For example, The Open Group is working on the Cloud Computing Reference Architecture (CCRA) and EuroCloud is devising guidelines on law, data privacy, and compliance.
Nonetheless, these initiatives have two limitations. On the one hand, efforts are being conducted in isolation and it is not clear to which extend they can be integrated and, on the other hand, there is a lack of certainty as to which standards provide adequate levels of interoperability. For cloud providers (e.g., HostEurope.com and JiffyBox.de ), advances in interoperability can simplify the countless activities involved during the life cycle of applications.
The objective of this paper is to study to which extend current cloud specifica-tions and standards are interoperable. In particular, we investigate how USDL (Unified Service Description Language) [3,4] and TOSCA (Topology and Or-chestration Specification for Cloud Applications) [5] can be integrated to link the description and the management of cloud services 2 , respectively. USDL is being explored by several research projects to enhance the description of service offerings to facilitate service discovery and selection [6]. TOSCA helps providers to automate the deployment and management of services.

OurresearchdesignusestheSaaSapplicationSugarCRM 3 ,anopen-source,web-based customer relationship management(CRM) platform, as a representative use case for evaluating the interoperability level of USDL and TOSCA. Therefore, the various SugarCRM service offerings were modeled with their pricing models, soft-ware options, and legal statements in USDL. The SugarCRM deployment, which included virtual machines, databases, and web servers, as well as its management, was modeled with TOSCA. Based on these activities, the development of a loosely coupled platform as a mean to achieve interoperability between the two specifica-tions wasconducted, building the core part of the proposed approach.The develop-ment of the platform, called SIOPP (ServIce Offering and Provisioning Platform) 4 , involved taking architectural decisions to enable the global and unique identifica-tion of services described with USDL, the remote access and querying of USDL service descriptions, the intelligent routing of service requests to providers, and the dynamic binding of TOSCA deployment d escriptors to service descriptions.
The evaluation of the platform indicated that a high degree of interoperability was achieved. It became possible to sel ect a cloud service from a marketplace, route the request to a provider which had previously announced to offer the service, and deploy the cloud service us ing plans which accounted for the char-acteristics of the service. After setup and configuration, all these steps were conducted automatically without requiring human intervention. Future work re-quires the replication of our research using other emerging specifications (e.g., CloudAudit for auditing and BSI-ESCC for security) to support the full life cycle of cloud applications from cradle to grave .

This paper is structured as follows: In Section 2, we illustrate a motivating scenario explaining the need to integrat e cloud specifications. Section 3 explains how the SaaS SugarCRM from our scenario was described using USDL and how its deployment was specified using TOSCA. The requirements for a platform to make USDL and TOSCA interoperable, as well as the main architectural decisions are presented in Section 4. Sect ion 5 evaluates the developed platform. Section 6 provides a liter ature review. Section 7 discusses our conclusions. Nowadays, the discovery and selection of cloud applications, such as a SaaS Sugar-CRM system, is still mainly carried out manually by consumers. It is not possible to effectively query services offered by diffe rent marketplaces (e.g., AppDirect, Ap-pcelerator, and the Service Delivery Bro ker from Portugal Telecom), because they are not publicized using computer-understandable formats. Marketplaces need to be searched manually. This is a first limitation we want to address.
After a purchase decision is made, and from the provider side, contracting and billing is negotiated by the sales and procurement divisions, the selected cloud application and its customization is given to an IT provider or department with-out any formalization of the executables , technical requirements, management best practices, and so on. Operators invest considerable efforts to learn how to setup and manage the application. Customization is done manually and often research or consulting is required to make a cloud solution work in a particular environment. This manual and error-prone process is not suitable to address fast changing markets and dynamic business requirements. Apart from solutions such as Saleforce, Google Apps, or Microsoft Office 365, this is still the way software is provisioned. This is the second limitation we want to address.

To solve these limitations, USDL is aim ingtoformalize,st ructure, and sim-plify the discovery and selection of services, and TOSCA to automate their man-agement. When used in conjunction, they can automate parts of the lifecycle of cloud applications, namely discovery, selection, deployment, and management. In this section we provide a brief introduction to the two specification languages we will integrate. We also use USDL to describe the SaaS SugarCRM application from our scenario and use TOSCA to model its deployment. 3.1 USDL Overview The Unified Service Description Language was developed in 2008 for describing business, software, or real world services using machine-readable specifications to make them tradable on the Internet [3]. Past efforts were concentrated on de-veloping languages, such as WSDL, CORBA IDL, and RPC IDL, which focused on the description of software interfa ces. Nonetheless, the Internet of Services requires services to be traded, placing emphasis on the description of business-related aspects such as pricing, legal asp ects, and service level agreements. This was the motivation to create USDL. The initial versions of USDL were ready in 2009 [7,3]. Later, in 2011, based on the experiences gained from the first devel-opments, a W3C Incubator group 5 was created and USDL was extended. The extensions resulted from the experience gained in several European academic and industrial projects (e.g., SOA4ALL, Reservoir, ServFace, Shape, etc.). In 2012, a new version named Linked USDL based on Linked Data principles [8] and RDF was proposed. This recent version is currently being explored and eval-uated in several research projects such as FI-Ware (smart applications), FInest (logistics), and Value4Cloud (value-added cloud services).

Linked USDL is segmented in 5 modules. The usdl-core module models general information such as the participants involved during provisioning and service options such as customer support. The cost and pricing plans are mod-eled with usdl-price . The legal terms and conditions under which services may be consumed are modeled with usdl-legal . The module usdl-sla gathers in-formation on the levels of service provided, e.g., availability, response time, etc. Finally, usdl-sec models security features of a service. Due to its benefits, e.g., reusability of existing data models and simplicity in publishing and interlinking services, Linked USDL was used in this research. 3.2 Describing SugarCRM with USDL The information used to model the SaaS SugarCRM was retrieved from its web site. A service and a vocabulary model were created. The vocabulary contained domain dependent concepts from the fiel d of CRM systems (e.g., taxonomies of common installation options). Since Linked USDL only provides a generic service description language, domain specific knowledge needs to be added to further enrich the description of services. The excerpt from Listing 1.1 illustrates the description of the SugarCRM service (in this paper, examples are written using the Turtle language 6 ).
The description starts with the identification of the provider (line 4), the legal usage conditions (line 5), and the general properties of the service (e.g., deploy-ment, scheduled backups, integration, and mobile accessibility). Service offerings connect services to price plans. Listing 1.2 defines four price plans (lines 4-8): professional , corporate , enterprise ,and ultimate .The professional plan includes common features shared with the other plans such as sales force automa-tion, marketing automation, and support automation (lines 15-20). It costs $30 per month (lines 21-25), the contract is annual and the billing is made every month (not shown in this excerpt).
In this example, Linked USDL uses existing vocabularies such as Dublin Core (shown in the model with :dcterms ), GoodRelations ( :gr ), and the domain vocabulary construct ed for CRM systems ( :crm ). 3.3 TOSCA Overview The Topology and Orchestration Specification for Cloud Applications [5] was standardized to enable automated deployment and management of applications while being portable between different cl oud management environments [9]. The management and operation of cloud applications are major concerns in enter-prise IT. For example, the pay-as-you-go model requires fast provisioning and management of application instances. Sin ce these applications typically consist of numerous heterogenous distributed components, the management of the com-ponents itself, the relationships among each other, and the whole application is difficult and expensive in terms of time and money -especially when manual work is required, e.g., deploying and executing scripts in a special order by hand which is error prone. Thus, there is the need to automate management to de-crease the effort and reduce the error rate. In addition, to avoid vendor lock-in, which is a major concern of customers when talking about outsourcing and cloud computing, there is a need to create portable applications which can be moved between different cloud providers. The TOSCA specification is currently stan-dardized by an OASIS Technical Commitee 7 which already published a number of community specification drafts. TOSCA is an XML-based exchange format. The application X  X  architecture, the components it consists of, and the relation-ships among them are modeled formally in a typed topology graph. Each node and relationship defines the management operations it offers. These operations are exposed as web services and are used to manage the individual components and relationships on a fine-granular technical level. The overall management functionalities such as deploying, scaling, backuping, and terminating the whole application are modeled on a higher level of abstraction by using management plans. Plans are implemented as workfl ows, e.g., in BPMN or BPEL, to benefit from compensation, recovery, a nd transaction concepts [9].

TOSCA Service Archives package cloud applications with all the required software artifacts such as installables or applications files as well as their man-agement plans in a portable fashion. These archives can be installed in TOSCA Runtime Environments which provide all functionalities to manage the archive and execute management plans. This enables cloud providers to offer third party services because management details, e.g., how to scale the application or how security is achieved, are hidden and the archives can be treated and operated as a self-contained black box. As the specification does not define a visual notation, in this paper we use Vino4TOSCA [10] as a visual notation for TOSCA. 3.4 Modeling SugarCRM with TOSCA In this section we show how the Sugar CRM deployment was specified with TOSCA, discuss different deployment options, and list possible variabilities. Fig-ure 1 shows one possible topology of a SugarCRM deployment.

The core components of the application are the SugarCrmApp ,whichisaPHP application, and the SugarCrmDb representing the database used by SugarCRM, indicated by the MySqlDbConnection . The PHP application requires an Apache web server including a PHP runtime, which is provided by the installed PHP module. To provide the database, a MySQL relational database management sys-tem ( MySQLRDBMS ) is used. Currently, SugarCRM also supports Microsoft SQL, Oracle 11g, and IBM DB2 which could be used in other deployment options. Apache and MySQL themselves must be installed on an operating system which is in turn provided as a virtual machine image. All nodes have properties, not explicitly depicted in the figure, holding state and management information of the respective nodes. These properties are used to store information about the application: static information such as the hardware specification of a virtual machine, as well as runtime information such as IP-addresses. This information is used and stored by plans during deployment, management, and termination of the application. The fine grained decomposition into components is needed to understand the interdependencies and variabilities exposed via Linked USDL.
One option to support different SugarCRM offerings is to use separate TOSCA topologies with different quality of servi ce (QoS) captured by USDL service offer-ings. The ultimate deployment depicted in Figure 1 (upper box), for example, hosts the web server and database on different virtual machines, whereas an enterprise deployment can use the same virtual machine for both.

On the other hand, there are variations which do not change the structure of the topology. For example, aspects like support options and variations impacting how the application is technically provided. For the latter, possible configurations offered by the VM node are the cloud provider, e.g., Amazon or Rackspace, the physical location, e.g., US or Europe, as well as CPU power, memory size, and hard disk capacity. Beside nodes, it is also possible to configure relations. For example, to tackle security issues, the database connectio n may be encrypted.
Management plans read and write properties which hold runtime information of nodes and relationships. TOSCA designates one plan as build plan, which deploys and initializes the service. Figure 1 (lower box) shows a simplified exam-ple of a build plan which sets up the ultimate version of SugarCRM based on two virtual machines. A real executable plan needs additional activities and structural components for data handling, compen sation, and recovery mechanisms. The shown plan sets up the two infrastructure stacks in parallel starting from the bot-tom by calling management operations provided by the nodes (Figure 1 depicts only three of these calls for simplicity reasons). After stacks are instantiated, the database connection is established and the application is available. Our study on USDL and TOSCA interoperability is timely and relevant because despite standardization efforts clouds may develop in a way that lacks interoper-ability, portability, and reversibility, all crucial for the avoidance of lock-in. Our approach connects in a best of breed manner two promising standardization ef-forts, focusing on different aspects, and proposes an end to end solution for cloud services including modeling, discovery, selection, deployment, and management.
A simple solution to integrate USDL and TOSCA consists in establishing a static link between service descriptions and their corresponding archives. Nonethe-less, since this approach is strongly coupled it would not be able to handle the dynamics of a global service distribution network. For example, what would hap-pen if the TOSCA descriptor associated with a USDL service description would no longer be valid? What if the deployment provider has ceased its operations and transferred its obligations to, presumably, some other provider which will still han-dle the original function? How should the request be handled? 4.1 Architectural Decisions Engineering a platform to integrate servi ce descriptions with service deployments is a major undertaking [6]. We require an architecture that enables a simple transmission of service requests and depl oyment information between customers and providers via marketplaces; which handles adding or removing marketplaces and providers in a loosely coupled manner; which uses a standard data repre-sentation and querying format to ease information exchange and enable inter-operability; and which can rely on existing applications, tools and technologies. When examining theoretical and techno logical advancements to serve as a fun-damental building block it becomes clear that the World-Wide Web combined with semantic web technologies is a poten tial candidate. It is distributed, scal-able, reliable, extensible, simple, and equitable [11]. Therefore, the integration platform developed was constructed based on three main underlying principles: 1. Global service identification and service description access, 2. Intelligent routing of service requests, and 3. Dynamic binding of deployment descriptors.
 The description of cloud services using Linked USDL provides a global service identification mechanism by using HTTP URIs. It also provides a global, stan-dard, and uniform data access [12] to ser vice descriptions by using HTTP URLs and RDF. In contrast to other approaches, e.g., APIs provided as REST or WS-* endpoints [13], an uniform data access enables a simpler interoperability and integration of the marketplace, contai ning service descriptions, and service providers X  platforms responsible for SaaS deployment and management.
The routing of service requests from marketplaces to providers is achieved using an intelligent content-based routing [14]. The analysis of Linked USDL descriptions is implemented through SPARQL and can also make use of RDF-based reasoning engines (e.g., Jena, Pellet, FaCT). Their use for content-based routing enables a more flexible routing mechanism compared with web APIs, because full remote access and querying of the service descriptions is possible. Furthermore, the use of a routing mechanism decouples space and time between marketplaces and providers.

Cloud providers use a publish-subscrib e pattern [15] to establish a dynamic binding of deployment descriptors with Linked USDL service offerings. This en-ables cloud providers to quickly adapt to peak demand by scaling the number of servers which handle deployment requests using TOSCA Runtime Environments.
These architectural consid erations are evaluated in Section 5 with the imple-mentation of the ServIce Offering and Provisioning Platform (SIOPP). 4.2 Global Service Identification and Description Access Cloud applications, such as the SugarCRM of our scenario, can be advertised in marketplaces [3] (e.g., SAP Service m arketplace, Salesf orce.com, and AppDi-rect.com), or in any other system answ ering to HTTP URIs requests (e.g., the provider X  X  web sites), which enables consumers to browse through various offer-ings. A marketplace, or information system, is said to be USDL-compliant if all service offerings are modeled with Linked USDL, and are externally visible and accessible via HTTP URIs. Since Linked USDL relies on linked data principles, two important features are inherited: 1. The use of HTTP URIs provides a simple way to create unique global identi-2. The same HTTP URI, which provides a global unique identifier for a ser-When a suitable Linked USDL HTTP URI has been selected for purchase (for example, our SugarCRM application) , the customer can customize the ser-vice, for example, by selecting the pricing plan which is most suitable to his needs. Assuming that the ultimate plan is selected, the marketplace sends a service request for routing. The service includes the URI and an optional part (the customization string), separated by a question mark ( X ? X ), that contains separated by a ampersand ( X &amp; X ). Both, key and value, are URIs referencing semantic concepts defined within the Linked USDL service description. For example, the URI http://rdfs.genssiz.org/SugarCRM?pricePlan=pricing SugarCRM Ultimate in which the key pricePlan and value pricing SugarCRM Ultimate are concepts defined within the Linked USDL description of the Sug-arCRM application (in this example, the full URI was omitted to make the notation more compact). The customization string adopts the same structure as query strings, a recommendation of the W3C. 4.3 Intelligent Routing of Service Requests Based on the global service identification and description access, the SIOPP platform relies on a content-based routing [14] strategy to forward service re-quests, generated by service marketp laces, to TOSCA deployment providers. The routers examine the content of Linked USDL service descriptions, apply SPARQL queries and reasoning rules X  X roviding some degree of intelligence within the router X  X o determine the providers who are able to provide the re-spective service. The mapping of Linked USDL URIs, pointing to an offering with the application provisioned by TOSCA, is realized by the distributed rout-ing logic depicted in Figure 2. The proposed mechanism is designed with three routing layers: (i) the Global Routing Layer (GRL), (ii) the Local Routing Layer (LRL), (iii) and the TOSCA Routing Layer (TRL).

The Global Routing Layer uses a routing table to map Linked USDL URIs, describing the high level requirements for the application provisioning, such as pricing model, to providers which are able to provision the application accord-ingly. The GRL receives an USDL URI from a marketplace, looks up appropriate providers and selects one of them. This s election may take in to consideration further conditions defined by the user such as pricing, payment method, or secu-rity requirements. However, these asp ects are out of scope for this paper. Each provider is referenced by an endpoint implementing an interface used by the GRL to pass requests to the Local Routing Layer of the respective provider in order to trigger the provisioning of the application.

The Local Routing Layer uses the Linked USDL URI and a (local) routing table to select the corresponding TOSCA archive and TOSCA container, which brings us to the TOSCA Routing Layer. The installations are referenced by a TOSCA service id which can be used to trigger the provisioning of the service by the Local Rout-ing Layer via the TOSCA-Runtime Environment. In addition, the routing table stores the input message used to invoke the build plan. This input message con-tains provider-specific information, for example, IP ranges or credentials, as well as field to pass the Linked USDL URI to the build plan. The plan may use the URI to configure the application based on the information represented by the URI or, in addition, may inspect the Linked USDL service description to gather more in-formation, e.g., details of the selected price plan. Thus, the third TOSCA Routing Layer executes and configures the act ual provisioning of the service.
Listing 1.3 shows an example of an input message used by the build plan to deploy SugarCRM on Amazon EC2 (describ ed in Section 3.4). The message con-tains credentials of the Amazon account to be used (line 2 and 3), the geographic region where the virtual machines should be located (line 4), and a pointer to the USDL offering (line 5). The USDL URI is used by the plan to query the Linked USDL offering by using SPARQL and adjust the deployment. In our prototype, deciding between the deployment options enterprise or ultimate is done based on the selected USDL pricing plan.
Listing 1.4 shows the SPARQL query used by the build plan to inquire about the options which are attached to the pricing plan included by the (customized) USDL URI. The options are then installed automatically.
The use of Linked USDL enables the content-based routing to be (1) intelligent and (2) adaptable. First, inference engines can be used to derive additional infor-mation not explicitly contained in a service description. For example, the Similar-ity Ontology (SO)[16] can be used to deter mine if the description of a service to be routed is so:similar or so:related to some service target. The use of transi-tive properties, such as so:matches ,can be explored to infer implicit routing rules. Second, an adaptable content-based routing is achieved. It is possible to extend ser-vice descriptions with, for example, domain-dependent information as done in the field of logistics with the FInest project 8 ; or enhance service descriptions with ex-ternal information sources, for example, using dbpedia, YAGO, or freebase 9 .This contraststo existing approacheswhichrelyonclosedschemaslikeWSDL.Therout-ing mechanism works with the extensibility of Linked USDL and is able to pro-cess extended service descriptions. The modeling of our SaaS SugarCRM included domain-dependent vocabulary from the CR M field (see Section 3.2). Nonetheless, the evaluation of the impact of additional domain-dependent information on rout-ing was out of scope for this paper. 4.4 Dynamic Binding of Deployment Descriptors The binding of Linked USDL service offerings to TOSCA service deployments is doneina looselycoupledmanner using TOSCAdeploymentdescriptors.ATOSCA deployment descriptor is the combination of (i) a TOSCA Service Archive identi-fier, (ii) the endpoint of its build plan, and (iii) the respective input message for the build plan. The provider X  X  TOSCA Runtime Environment is able to automatically process the TOSCA deploymen t descriptors stored in the routing table of the Lo-cal Routing Layer. The Local Routing Layer maps the USDL URIs, passed by the Global Routing Layer to the provider, to the corresponding TOSCA deployment descriptors solely based on this URI. Our approach uses the publish-subscribe pat-tern which enables providers to dynamically offer their provisioning capabilities to marketplaces. This design achieves advantages in resource management, work-load distribution, and maintenance operations. For example, if a service instance is slowed down by a high request rate, the provider is able to instantiate and subscribe a second instance to distribute the workload. An evaluation was conducted to assert the feasibility, performance, separation of concerns, and limitations of the prototype developed: Feasibility. The integration of USDL and TOSCA required a loosely coupled platform to account for the dynamic nature of service advertisements and ser-vice provisioning. Three main challenges emerged during the construction of the SIOPP prototype: (i) global service identification and remote description access, (ii) intelligent routing of service requests, (iii) and dynamic binding of deploy-ment descriptors. We were able to exploit USDL features (inherited from linked data principles) to achieve an unique service identification schema using Linked USDL URIs and a uniform data access [12] t o service descriptions using Linked USDL HTTP URIs. In contrast to using, e.g., web APIs, it enabled a simpler integration of the marketplace and service providers X  platforms responsible for service deployment and management. T he use of a decentralized management of unique service identifiers was a scalable so lution for the Internet of services. The use of SPARQL for the content-based rout ing [14] of service requests enabled a more flexible querying mechanism when compared, here again, with the access to web APIs to retrieve service data, since a full access to the service specifications is possible remotely. The dynamic asso ciation of a specific TOSCA deployment descriptor with a USDL service offering was achieved using a publish-subscribe pattern [15]. This enables cloud providers to quickly adapt to peak demand by distributing service requests to different TOSCA Runtime Environments. Com-pared to other approaches, e.g., which use business process management or in-tegration by web services, the platform achieved a higher degree of decoupling, certainly more suitable for large scale deployments.
 Performance. Regardless of using SIOPP or not, the application has to be setup using a build plan. Thus, we measured th e performance of each component sepa-rately, to analyze the added runtime. For the GRL we used a hashtable with 500,000 entries and looked up 5,000 entries with a total lookup time of 3ms. To measure the LRL we used a hashtable with 10,000 entries and looked up 1,000 entries which re-sulted in a total lookup time of 2ms. The measurement setting was Win7-64bit, JRE 1.7, Intel i5-2410M, 2,3GHz. The build plan was adapted to return imme-diately after executing the SPARQL query, i.e., before the actual deployment at Amazon started, has an average runtime of 289ms (  X  = 76). The runtime of the plan deploying SugarCRM varies between 4 and 7 minutes, depending on the pro-visioning time of the VMs at Amazon EC2. Thus, the overhead caused by SIOPP, even for peak demands, is n egligible in our scenario.
 Separation of Concerns. The distributed multi-layer routing logic enables the separation of concerns: The GRL reflects h igh level information, e.g., the global routing table may store information about the country of the provider for legal aspects. The LRL handles lower level aspects such as load balancing information, e.g., new service instances can be regis tered in the local routing table for peak demands. The TRL enables, for example, im plementing security aspects directly in management plans. This separation allows providers to focus on configuration and subscription and to design their own strategies based on individual aspects such as pricing. There is no need to understand the application X  X  management. Limitations. Since our routing approach has only three fixed routing compo-nents, it is not scalable for a global operation. One way to address this limita-tion is to adopt a peer-to-peer architecture using an overlay network organized with, e.g., the Simple Knowledge Organization System (SKOS). The network can be partitioned according to service domains (e.g., healt hcare, finance, and logistics). Requests can be routed from domain to domain/subdomains linked using SKOS properties (e.g., skos:narrower and skos:member ). The customiza-tion string (see Section 4.2), works well w ith simple customization. However, it is inadequate for condition-based based customization, i.e. if logical conditions need to be sent along with service reques ts. Also, associating USDL URIs with concrete input values for build plans has been found to be difficult if there is no description on how the values affect the deployment. While several researchers have studied di fferent architectures for marketplaces (e.g., [17,18]), no known studies have been focused specifically on how cloud ser-vice offerings can be connected to their a utomated provisioning. Furthermore, except for a detailed study on cloud computing standardization efforts [19], re-search on interoperability between cloud standards has been overlooked. Our efforts to integrate service specifications and standards was first reported by Cardoso et al. [20]. We concluded that the use of model-driven approaches to transform models was too complex for large scale projects. Therefore, in this paper we based our approach on Linked USDL [6] to achieve a more loosely coupled and simpler alternative.

Pedrinaci et al. [21] propose the iServe platform to publish linked services, which is a subclass of Linked USDL services representing WSDL, RESTful, OWL-S, and WSMO services. Kirschnick et al. [22] reuse existing solutions to install and configure software to cloud environments. In both of these works, the question of how service offerings can tri gger the remote deployment of a service was not addressed.
 Jayasena et al. [23] integrate different financial standards, such as IFX and SWIFT, with an ontology to resolve semantic heterogeneity. This approach works well when the standards being integrated represent similar information. Cardoso et al. [24] follow a similar solution and add the notion of dynamic mappings to estab-lish relations between different specifications. Nonetheless, both achieve limited results when overlap information is small, which is the case of USDL and TOSCA.
While these works use a bottom-up approach, other research took a top-down approach. For example, the Open Services for Lifecycle Collaboration (OSLC) [25] community created specificat ions to prescribe how tools (e.g., re-quirements tools, change management tools, testing tools, and so forth) should be implemented and integrated to exchange data. While the approach has shown to be extremely successful, it cannot be applied to the problem we tackle since the specifications we integrate already exist and were developed by different organizations [19]. The emergence of cloud standards and specifications, such as USDL and TOSCA, brings the necessity to evaluate to which extend they are interoperable. In the presented approach we developed a prototy pical platform to int egrate both speci-fications by modeling the description and deployment of a commercial SaaS appli-cation: SugarCRM. The prototyping process enabled us to identify the challenges and limitations of making USDL and TOSCA interoperable. Important findings indicate that the use of a global service identification and description access en-ables a  X  X ightweight X  integration without having the need to agree on proprietary web APIs. The multi-level and intelligent routing of service requests allows mak-ing routing decisions on different levels of g ranularity (e.g., legal, pricing, and se-curity). The routing based on Linked USDL URIs achieves a high performance since analysis can be made, in many scenarios, only at the URI level. For a more advanced routing, Linked USDL descriptions can be remotely accessed. Finally, the dynamic binding of deployment descriptors with services enables providers to react to changing demands and workloads in a flexible manner.
 Acknowledgment. This work was partially funded by the BMWi project Cloud-Cycle (01MD11023). Additionally, we would like to thank to Alistair Barros for the interesting discussions during our research study.

