 In recent years, new forms of collective a daptive systems(CASs) that consider heterogeneous types of compute units/resources(e.g., software services, human based services and smart-devices) have e merged [20]. These systems allow com-pute units to be flexibly added and/or removed from them, and different collec-tives can overlap with each other by utilizing each other X  X  resources. Compute units within collectives are collaborative, manageable and may be given decision making responsibilities. With the advance of human computation [17] there is a possibility of forming CASs that include human-based services [21] as com-pute units. Social Compute Units(SCUs), introduced in [6], can be considered as one type of these collective adaptive systems. They are virtual compositions of individual human compute units, performing human computation tasks with a cloud-like behavior. SCUs are possible today because of the human resource pools that are provided by human computation platforms (e.g., crowdsourcing plat-forms, social networking platforms and expert networks), which have brought the possibility to investigate ways of utilizing human computation under the service oriented computing paradigm. However, due to the unpredictability of human behavior, human-based services bring considerable challenges in their management. This is especially the case with collective adaptive systems such as SCUs, where the ways to manage resources are obviously different and more complex than the management of crowd workers that work individually, and that of collaborations with fixed number of resources. In this context, traditional plat-forms that support virtual fixed-sized collaborations might not be as efficient as those that support SCUs with elastic capabilities that offer opportunities for variable resource numbers with variable scalable capabilities. There are several reasons for this. First, unexpected tasks might be generated at run-time which may require new type of elements with new type of capabilities. In fixed-resource collaborations, usually existing members need to learn these tasks and thus the work might be delayed and/or executed w ith lower quality. Next, there might be a human-compute unit that is temporarily misbehaving or its performance is degraded. Its exclusion would bring degradation of the collaboration and the performance of the collective, if another appropriate one is not employed in its place. Furthermore, due to badly planned delegations, it is often the case that some resources are overloaded while others are underutilized. The latter comes as a consequence of the problem of the reliance on human resource availability as one of the fundamental ones in social computing. In this context, the willingness of a human resource to execute a particu lar task at a specific time point is often overlooked. However, this is crucial for p latforms supporting work that includes humancomputationbecauseevenifwea ssume that human resources can use  X  X nlimited X  software-based resources, e.g., using the cloud, human behavior is dynamic and highly unpredictable.

The aforementioned problems show that there is a need for management mech-anisms to support elasticity by scaling in size and computing capabilities of SCUs in an elastic way. Authors in [8],[21] identify the underlying challenge in provisioning SCU elasticity to be the lack of techniques that enable proactive provisioning of human capabilities in a uniform way in large scale. Nevertheless, assuming the possibility of utilizing human-based services in a cloud-like way, systems should support runtime elastic coordination of collectives. To address the aforementioned issues, in this paper, we investigate and provide runtime mechanisms with the elasticity notion in mind, so that platforms would be able to provide elastic capabilities of human-based compute units/SCUs ,thatcanbe managed flexibly in terms of the number of resources, as well as their parameters such as cost, quality and performance t ime. Hence, our key contributions are:  X  conceptualizing and modeling the SCU execution phase and states,  X  defining SCU-elasticity properties and APIs,  X  designing an SCU provisioning platform model with elastic capabilities. The rest of this paper is organized as follo ws. In Section 2 we present a motivation example and discuss challenges in elasticity provisioning. In Section 3 we describe the SCU concept, model the execution mode of an SCU and present our platform for managing elastic SCUs. Section 4 illustrates the feasibility of our approach. We present related work in Section 5 and conclude the paper in Section 6. Scenario. Let us consider a concrete scenario of a software development project e.g., for a health-care specific system, and assume that a software start-up com-pany is engaged for its execution and completion. To deliver the end-artifact, these type of projects require diverse set of skills. Hence, in addition to the com-pany employees, some specific parts of t he project might need to be outsourced, e.g., to experts with experience in health-care but also to IT professionals with skills that the start-up is lacking. Hence, to solve the problem of skill deficiency, an SCU including human-based resources /services both from the software devel-oping company but also  X  X utside X  experts is formed. The SCU utilizes software services for collaboration and task execution. On the other hand, the human-based services and the software services that they utilize are supported by an SCU provisioning and management platform that coordinates their performance.
The challenges that arise in this scenario come from the importance of perfor-mance and quality of results in paid expert units. A software solution needs to be delivered on time and in accordance with customer requirements and budget limitations. Fixed composite units with a known number of resources, includ-ing outsourced ones, often have proble ms with overloaded resources and may result in project delays with good quality or on time delivery of solutions with a lower quality than the desired ones. Problems such as those mentioned in the introduction also appear. However, with the availability of online resource-pools from human clouds [10], human-based services can be acquired and released from SCUs on demand, so as to best meet the customer performance and qual-ity requirements. Hence, we assume that the  X  X utside X  experts for our software development SCU can be recruited from human clouds on demand. Under these assumptions and if the SCU supporting platform incorporates mechanisms that allow elasticity, an initial SCU will be able to adapt at runtime with respect to certain parameters, such as the number of its compute units, unit types, structure and performance. This can be particularly important in agile software develop-ment, where both the customer requirements and the development process evolve in an iterative way, and teams have high collaboration with the customer and are more responsive to change. Our hypothesis is that in consequence of these elas-tic capabilities, SCUs will provide higher efficiency at runtime. Thus, platforms that include mechanisms and techniques for runtime support of coordination of SCUs with elastic capabilities are crucial.
 Background and Challenges. As aforementioned, our approach is based on the concept of Social Compute Units [6], which fundamentally represent virtual collective systems with huma n-based resources as compute units that are brought together to work on a common goal with a deadline. These compute units, can belong to an enterprise, they can be invoked from a crowdsourcing platform, an expert network or any platform that hosts pools of available resources for human (including social) computation. In relation to the work of the coauthors in [21], in this paper, we use the term Individual Compute Units (ICUs) for SCU members, which represent human-based services that can be programmed in a manner that they can execute tasks on-demand. Thus , an SCU is composed on request from a customer who defines requirements and sets constraints(e.g.,budget,deadline). It has its compute (performance) power, it can be programmed (managed) and is intended to work utilizing a collaboration platform hosted on the cloud. The behavior of an SCU is cloud-like, in the sense that its duration and performance depends on its goal, customer constraints as well as events generated during its execution.

Considerable related research focus has been put on formation algorithms [1],[13] and performance optimization within fixed teams. However, SCUs have a different nature than teams, as the SCU structures and capabilities can be programmed and SCU members can be elastically managed at runtime. Thus, even if some work for teams can be utili zed, there is a research gap concerning SCU elasticity during the execution phase, in terms of resource numbers but also in terms of non-functional parameters(NFPs) such as cost, reliability, per-formance time etc. There has been a cla ssification of human cloud platforms, where one category of platforms is said to be focused on project governance and complex coordination between resources [10], as opposed to crowdsourcing ones where the responsibility of project governance is not entirely on the platform. Examples of these type of platforms are TopCoder 1 and workio 2 . Even though these type of platforms can manage the lifecycle of collaborations, we argue that they lack the adaptation techniques and flexibility of resource management in terms of elasticity at runtime. For example, the pricing in these cases is not set by the customer like in crowdsourcing, rather the human-based services set their own prices. Thus, there is a possibility that with these models a collective of human resources can be automatically  X  X rogrammed X  so that if the number and type of resources changes the cost does not exceed the customer X  X  total budget. This is one example of NFP elasticity in terms of cost. Consequently, identifying possible elastic operations that can be triggered at critical time points present important challenges for optimizing an SCUs performance. In the context of the aforementioned scenario and what lacks in current platforms, some of the research questions that we confront are:  X  Given an initial formed SCU and a set of monitored team performance met- X  When is optimization(e.g, load balancing) within an SCU not enough and To sum up, this paper investigates the following fundamental challenge: What are the mechanisms that a human computation system needs to deploy so as to provision SCUs with elastic capabilities, both in terms of resource scaling and in terms of variable properties? 3.1 Elastic Social Compute Units Elastic SCUs have elastic capabilities that can be triggered at runtime to tailor their performance to best fit client requ irements at runtime. With human based resources being unpredictable and dynamic, their skills, price, interest and avail-ability can change with time and within a specific context. However as stated in [6] the concept of SCU does not have a no tion of elasticity in itself, thus an SCU provisioning platform which creates, deploys and supports the execution of SCUs needs to include mechanisms for scaling it up or down as needed, and as aforementioned, with this scale an SCUs performance parameters vary as well. These mechanisms should ensure that at each time point these parameters are within desired levels and comply with cu stomer constraints. For our purposes, we conceptually define the elasticity of SCUs as follows: Definition 1. The Elasticity of Social Compute Units is the ability of SCUs to adapt at runtime in an automatic or semi-automatic manner, by scaling in size and/or reorganizing and rescheduling, such that the variations in the overall performance indicators such as capability, availability, effort, productivity and cost, at each point in time are optimal within the boundaries of the customer-set constraints.
 To support elasticity for SCUs, we identify as a prerequisite to have an execu-tion model for an SCU, as previous work identifies SCU phases but do not go into details into its execution phase. An SCU lifecycle consists of the following stages: request, create, assimilate, virtua lize, deploy and dissolve [6]. The elastic-ity mechanisms are needed after the virtualization stage, in the execution phase , which we model next. 3.2 SCU Execution Model We denote a cloud of ICUs (e.g.,from online platforms and/or enterprise inter-nal pool) as the universal set R = { r 1 ,r 2 ,r 3 ...r n } , and the set of ICUs that are members of a particular SCU as S = { s 1 ,s 2 ,s 3 ...s n } ,where S  X  R .Let the set of tasks to be executed from a specific SCU be T = { t 1 ,t 2 ,t 3 ...t n } .For each task t i  X  T , we denote the set of matching, appropriate and possible ICUs that can perform the task t i as P = { p 1 ,p 2 ,p 3 ...p n } ,where P  X  R . Depend-ing on constraints the following can be valid in different situations: P  X  S c , P  X  S or P = S . To provide elasticity, ICUs from S can be released and new ICUs from P can be added to S, therefore, | S | might change at runtime. We model an ICU belonging to the cloud of ICUs R , with the following set of global properties, ICU gl prop = { Id icu , skillset, reputation, price, state global } .Moreover, an ICU from the perspective of the specific SCU of which it is a member, is modeled with its local properties, as ICU lscu prop = { Id scu ,ICU gl prop , state local , productivity, trust } ,where reputation , state productivity ,and trust are aggre-gate metrics that we discuss further in this section.
 States. An SCU in execution mode, at a specific time point  X  , can be in one of the following action-states, SCU state (  X  )= { r unning, suspending, resuming, expanding, reducing, substituting, stopped } . These states are listed in Table 1. The mentioned states are basic/atomic ones and a combination of them makes a complex SCU execution state. For example, an SCU might be running but due to an adaptation action, at the same time multiple ICUs (a cluster of ICUs) within an SCU might be suspended, while a new ICU is being added in expanding state. In this case because running , suspending and expanding are all execution states of an SCU, then running  X  suspending  X  expanding is also an SCU state. However, some states are mutually exclusive if they refer to the whole SCU and cannot be aggregated, i.e., an SCU cannot be in running  X  stopping state. If one of the atomic states refers to (a change in) individual or a cluster of ICUs, an SCU can be in running  X  extending state or for example an SCU can be in a running  X  reducing state. Thus, the aggregate states are valid in the context of the scope that a state-changing action takes place. Table 1 also shows the scope for which the state-changing actions are valid, in terms of the whole SCU, a cluster of ICUs, or ICUs only. The importance of the state of an SCU as a whole is tightly coupled with ICU states and is crucial when applying elastic strategies in two ways: 1) the state of the SCU can be a trigger for elastic operations on the SCU, and 2) it can be a desired result after applying these operations. SCU Elasticity Management. Table 1 shows ways of adaptation triggering: platform based, customer based and ICU based. To clarify, a platform that sup-ports an SCU should have the mechanisms to support all of its execution states elastically. Thus all state-changing actions can be triggered in an automated way as shown in Table 1. Referring to our motivational scenario, in rare cases the customer could suspend the whole SCU of software development until he has consulted and decided for crucial changes. There are other triggering state-changing actions that the customer can also make(shown with light gray check signs). Table 1 also shows which state-changing actions can be most affected by communication and ICU feedback, which we illustrate in Section 4. We show an example for a software developing SCU in execution mode in Fig. 1. At a specific time point ICUs with developer skills are in running state while designers are sus-pended. Next, due to an event when expert information is needed(e.g.,health-care information in our scenario), the SCU is expanded by including ICU with spe-cific expertise and consultancy skills wh ile a designer-ICU is resumed. At another time point each ICU is running, while before dissolving, the SCU is reduced as ICUs with designer and consultancy skills have finished their tasks. Adaptation actions on an SCU can change its execution model not only in terms of the state but also in terms of its execution struct ure. These changes are interdependent with task structure changes and ICU state changes.
 Basic ICU and SCU Metrics. The decision to apply an elastic adaptation action depends on events that are triggered by two level monitoring of global and local metrics, namely to det ect: 1) a violation of preset threshold values for over-all SCU performance, and 2) which ICUs have affected the SCU X  X  performance degradation. The focus of this paper is not to investigate extensive metrics, as many are context dependent. Thus, in this section we list and define some basic ones that we identify to be useful for SCUs at runtime.

Project Effort and Productivity have been listed as performance measures for software projects [12]. Modified versions of these metrics can be reused for SCUs on software and other goals. Thus, we define the SCU Effort as the sum of the average time spent by each ICU on each assigned task. The SCU task completion ratio, gives the fraction of completed tasks within those assigned. However this does not always mean that the results of all completed tasks are also approved. Thus, we also consider the number of valid or approved tasks, which we use for calculating the productivity of an SCU. We define SCU Productivity as the ratio of approved tasks to SCU Effort , giving an average number of tasks-per-time-unit value. The SCU Reputation is a weighted sum of the reputation score of each ICU regarding its expertise for the skill for which is included in the SCU. We model the SCU Reputation in this way because some ICUs in a specific SCU are more crucial than others by executing more critical tasks. We define the, reputation ( s i ) as a function of (Success Rate, Approved Tasks, Timeliness, Reliability, SocialTrust) .The SCU Cost is an aggregate sum of the cost of each ICU for each task according to its type and skill-type requirements. The metrics are given in Table 3, where s i  X  S and t x  X  T . See Table 2 for notation on individual metrics, some of which we use in calculating those in Table 3. The described metrics are dynamic and a platform supporting elastic SCUs should be able to monitor and utilize them in runtime adaptation strategies. From all that was discussed, we can now characterize the elastic profile of an Elasticity APIs. To be able to provide SCU elasticity capabilities, which in-clude ICUs having the aforementioned (and other domain-dependent) properties, we need to have common APIs for their des cription and management. Currently we develop APIs which we categorize in ICU-description APIs for manipulating ICU profiles, ICU-scheduling APIs for ICU management and elastic operations, and communication operations. Table 4 d escribes some specific methods that we develop to be utilized in strategies providing SCU elastic capabilities. 3.3 Elastic SCU Provisioning Platform Figure 2 shows a model of our concept of an elastic SCU provisioning platform, that utilizing our SCU execution model, metrics and API is able to support elastic SCU management. Thus, the platform supports the following behavior: a customer/SCU consumer submits a project/request with multiple tasks to it. When submitting tasks and request for SCU formation, the client specifies functional and non-functional ICU requirements such as: skill, reputation and cost. In addition he specifies overall SCU constraints, such as total budget and deadline. The platform integrates an SCU formation component with ICU se-lection/ranking algorithms. The resource selection and initial task assignment is not in our focus. The SCU creation/formation component X  X  output is an initial SCU created by selecting ICUs from hum an cloud providers. This SCU is  X  X ed X  to a controller -a component that hosts monitoring and adaptation algorithms utilizing APIs for elasticity control, which provide SCU runtime management. The challenge of this component, is to monitor and adapt the SCU in accordance to customer set constraints, such that the SCU gives the maximum performance and quality within the preset boundaries for time related, cost and quality re-lated indicators. Different scheduling and ICU management algorithms can be plugged into the platform, which would support the SCU during its lifecycle. In this section we show the benefit of having explicit state management, metrics and elasticity for supporting elastic SCU. We present the way our framework can simplify the complexity of the develop ment of elasticity strategies for SCUs. Typically, an elasticity strategy for an SCU is a domain-specific problem. In the following, we illustrate how an ICU Feedback-based elastic SCU management strategy can be implemented.

As ICUs within an SCU are inherently dynamic and unpredictable, we cannot always fully rely on the system-based availability information concerning an ICU and fully automated task assignment and scheduling might not always be the most suitable approach, especially when there is a possibility of unexpected generation of tasks at runtime. Hence, we propose an SCU adaptation strategy that uses ICU acknowledgments for their willingness to work on specific tasks. More specifically, these acknowledgments are sent in response to system requests for availability guarantees for the execution of tasks that need reassignment. This strategy supports elasticity in the sense that it departs from the idea that a customer knows in advance which and how many ICUs will contribute and the final cost for his  X  X roject X . However, the customer budget is kept within its limits as the cost may vary within these limits, just as the size and structure of the assembled SCU may vary with time until the final result is returned.
Our example of elastic SCU mechanism is a semi-automatic task scheduling strategy where part of the coordination for task re-assignment is delegated to ICUs. With this approach a task is being re-assigned to a more available ICU, on an ICUs own approval and when certain conditions apply (e.g, when a thresh-old is reached). Thus, the task reassignment decisions are partly based on feedback from ICUs and in this way the elastic SCU management is influenced from  X  X u-man in the loop X  decentrali zed coordination. With this example, we show how new SCU metrics can be derived and how APIs for elastic capabilities can be used. Deriving New SCU Metrics. By utilizing APIs for obtaining SCU metrics at runtime, one can calculate the willingness of an ICU and the willingness confidence score as: (See Table I for notations): Willingness = We derive the willingness confidence value from the basic indicators, ICU will-ingness, and the rate of success in executing the reassigned tasks . The willingness confidence score WCnf, is computed from the number of acknowledgments that an ICU has sent to the scheduler in response to its Requests for Willingness, and the number of successfully completed tasks that are assigned to it as responses to these acknowledgments. Thus, it is an indicator about the reliability of the alternative ICUs guarantee about its willingness to work.
 Programming an Elasticity Strategy Using Elasticity APIs. Consider-ing worker willingness, provides a way to measure and control the unpredictabil-ity/reliability of ICUs by asking them for task-execution guarantees because it provides a way to compare their  X  X tatements X  with their actual behavior. This is what the value of Willingness Confidentiality indicates. In this strat-egy we assume that each incoming task is assigned to the ICU at the top of a ranked list which is returned by a ranking algorithm, and references to the first x most appropriate ICUs from the ranked list are stored as reserves/alternatives for each task. The algorithm can be summarized with the following steps: 1. When a preset threshold, related to a task which is already assigned to 2. Each ICU that receives this request and is ready and wishes to work on the 3. The scheduling component reassigns the task on threshold to the alternative Algorithm 1. Task-reassignment with ICU-side assurance When multiple reserve ICUs send ackno wledgments that they are ready to exe-cute the task, the reassignment decision is made based on the information from the Acks combined with monitoring information about their task queues and logged information about the WCnf score. This type of scheduling combines the freedom of choosing tasks that workers have in crowdsourcing environments, with policy based assignment of tasks. It is these ICU-side guarantees that are combined with task queue analysi s, that can avoid problems such as delegation sinks . We outline the steps of this strategy i n Alg 1. Alternatively, the request for willingness can be sent immediately after the task X  X  initial assignment so that when a threshold is reached the scheduler only checks the task queues of ICUs. Executing an Elasticity Strategy. We implemented the algorithm using methods described in the API section. We created tasks with different skill re-quirements and modeled an ICU with a single skill for simplicity, and assigned each of them different costs. When a deci sion is made about which tasks are go-ing to be reassigned to which ICU, the new cost calculation includes the prices of each of the new ICUs, as follows: where Cost adapt ( scu i )  X  Allowed Budget . Due to space limitations and to the fact that it is not our goal to show how good this strategy is, we provide a supplement material 3 .
 Generally, the results show that SCU productivity raises with the number of ICUs and the same effort, while it declines if the effort is high for a low number of tasks and a small number of ICUs. Resource Management and Adaptation. Work on a retainer model for crowdsourcing environments and examples of its application are presented in [4],[3]. The model is designed for recruiting guaranteed workers by paying them a small additional amount, and in this way keeping them in reserve and in ready state for handling real-time tasks. The similarity of our ICU-feedback based strategy is in that our scheduler keeps references to the top x number of re-sources that are previously ranked as most suitable for a specific task. Hence, these resources are the reserve resour ces in our approach. However, the differ-ence in our approach is that no prior payment is made for reservation of these resources, rather the scheduler sends them a notification asking for feedback for their willingness to execute a task that is already assigned to another resource but for which a threshold is reached. Our model is not concerned with initial task assignment and it is not intended for crowdsourcing tasks, although ICUs may be invoked from a crowdsourcing platform. Authors of [15] present a programming language and framework called CrowdLang for systems that incorporate human computation, and what is of interest to us is that they provide cross-platform integration of resources, in this way making a human cloud possible. There is a considerable amount of work conducted on adaptation and more interestingly on self-adaptation strategies. For example, authors in [16] have presented an archi-tecture that includes a self-adaptation framework for service-oriented collabora-tion systems. The part that this work relates to, is their approach on identifying worker misbehavior patterns (e.g., as a result of uncontrolled task delegations) and providing a solution of reassigning tasks to other alternative resources by taking into account their task-queue size. Our strategy differs from theirs in that tasks are not delegated if ICUs are not willing to accept tasks. Rather, the task reassignment is managed with consent from alternative ICUs. [9] describes a delegation model and related algorithms that concern trust updates. The au-thors mention adoption as a process where the delegation is initiated by the  X  X elegatee X . Our algorithm stands in between delegation and adoption. Collaborative Communities and Teams. The concept of the SCU that we utilize in our work is presented by one of the coauthors in [6]. However, while this is the fundamental work introducing the SCU, it describes its life-cycle and does not go into details into the SCU execution phase as this was not its aim. This is tackled in [19], where researchers have lo oked into a specific case of incident man-agement to investigate how SCUs and their evolution(adaptation) perform better over traditional process management. Res ource discovery in crowdsourcing and team formation strategies and algorithms have been the subject of investigation in many works, such as [1], [2], [14], [13],[5]. The algorithms in these works can be utilized for SCU formation and some also for ICU selection when an SCU needs to be extended. Task executing collaboration models and runtime collaborations are also investigated in works such as [18]. However, the mentioned works focus on fixed teams without elasticity assumptions.
 Elasticity. The notion of elasticity is treated in several domains and contexts and has especially gained importance with the advance of cloud computing. In [8] authors discuss the reasons, challenges and their approach toward virtualizing humans and software under the same service-based model that will enable elastic computing in terms of scaling both softw are and human resources. The concept of elasticity in Cloud computing, is being extended to concepts like application [22] and process [7] elasticity, e.g., in [7], the authors iden tify resource, cost and quality elasticity as being crucial in modeling processes in service oriented computing. Mechanisms and a middleware to support scaling services in and out from applications utilizing SaaS are presented in [11]. Our research focus in this work was to provide mechanisms for effective provi-sioning of SCUs with elastic capabilities and their efficient runtime management. We have modeled an SCU at runtime and provided exemplary algorithm that utilizes operations for provisioning of elastic capabilities. We have shown that platforms supporting human computation in collective collaborations are more reliable by working based on the elasticity concept of scalability in terms of both resources and their parameters. Our future work includes further development of an SCU execution framework, which will include the presented model, metrics, API and algorithms so as to be able to deploy our approach in real environments. Acknowledgments. This work is supported by the Vienna PhD School of In-formatics (http://www.informatik.tuwien.ac.at/teaching/phdschool) and by the EU FP7 FET SmartSociety project(http://www.smart-society-project.eu/) un-der the Grant agreement n.600854.

