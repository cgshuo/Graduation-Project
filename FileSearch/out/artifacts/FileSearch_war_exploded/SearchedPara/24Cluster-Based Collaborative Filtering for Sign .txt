 Due to the tremendous development of the Internet, World Wide Web, and social net-works, network-centric mining and analysis has become an emerging field in science and engineering. These analysis are based on constructing graphs of social systems in which the nodes represent the individuals (or organizations) and the links repre-sent the relations between them [Boccaletti et al. 2006; Strogatz 2001]. It was shown that many real networks show a number of common structural properties, such as small-worldness [Watts and Strogatz 1998], scale-free degree distribution [Barabasi and Albert 1999], densification, and shrinking diameter [Leskovec et al. 2007]. Fur-thermore, many social networks show properties such as community structure and modularity [Girvan and Newman 2002; Newman and Park 2003].

Most social network models consider only the presence/absence of a connection be-tween the nodes in constructing the network structure, and ignore the possible sign of the connection. In many real social networks, however, the relations between individu-als might be positive or negative [Cartwright and Harary 1956; Leskovec et al. 2010b]. Positive relations mean friendship (trust or voting in favor), whereas negative links correspond to enmity (distrust or voting against). One can name Wikipedia, Epinions, and Slashdot as examples of networks with positive and negative links [Brzozowski et al. 2008; Burke and Kraut 2008; Kunegis et al. 2009; Massa and Avesani 2005]. Social networks are highly dynamic, and their structure goes under heavy changes through appearance/disappearance of new nodes and edges [Holme and Saram  X  aki 2012; Kossinets and Watts 2006; Kumar et al. 2006]. Temporal networks, i.e., net-works whose topology and link formation change over time, has been shown to have significantly different dynamic behavior as compared to static networks [Holme and Saram  X  aki 2012]. A possible motivator to change links in a social network would be to improve a utility function such as cooperativity among the nodes [Perc 2009; Perc and Szolnoki 2010].

In network science, this issue is often studied under the topic link prediction ,which refers to reliably predicting future links that are likely to appear in the network [Liben-Nowelly and Kleinberg 2003; L  X  u and Zhou 2011]. The aim of the link prediction problem is to use the information available from the structure of the network, that is, the links that the nodes already have in the network, and extract a number of features. The features can be linked to both local and global properties of networks. These features are then used in a classification/prediction model to predict future links to come.
In signed networks, not only is the link prediction problem important, but also cor-rectly predicting the sign of the links is an important issue. In the sign prediction problem, local and global structural properties of the network are used to determine an unknown sign of an existing link between two nodes [Guha et al. 2004; Leskovec et al. 2010a; Shahriari and Jalili 2014]. Sign prediction has many potential applica-tions in social networks, for example, prediction of trust between two users can be used as a similarity measure in recommender systems [O X  X onovan and Smyth 2005]. In some cases, the signs might be determined by malicious users; the sign prediction problem can identify such activities and purify the network. There are, in general, two approaches for the sign prediction problem; those using machine learning tech-niques and those trying to do the prediction without learning. In methods based on a machine learning framework, first a number of meaningful structural features are extracted, and then a classifier is used to solve the prediction problem [Chiang et al. 2011; DuBois et al. 2011; Leskovec et al. 2010a]. Another class of algorithms tries to use available theories in social science to do the prediction task without performing a learning process. For example, one may use social balance and status theory [Guha et al. 2004; Heider 1946] in order to predict the signs. The logic behind such tech-niques is that the networks are evolved such that they become more balanced or better support status theory [Antal et al. 2005; Leskovec et al. 2010b]. The results of these two approaches cannot be directly compared, since applying machine-learning-based techniques is always costly, whereas computations based on social balance and status theories are much simpler. While methods based on a machine learning framework cannot be applied to very large graphs, those based on social science theories can be simply applied.
 In this manuscript, we use a collaborative filtering approach [Papagelis and Plexousakis 2005; Sarwar et al. 2001] for sign prediction. Collaborative filtering algorithm and its variants are the most frequently used methods in recommender systems. In a user-item network, these algorithms recommend a list of items for each user such that he/she is likely to use (or positively rate) such items. We consider the sign prediction problem as the problem of predicting votes among the nodes, where each node can be simultaneously user (the links are pointed out from users) and item (the links are pointed to the items).

A common drawback of collaborative filtering algorithms is their rather poor perfor-mance for networks with high levels of sparsity, which is the case for many real social networks [Huang et al. 2004; Xue et al. 2005; Yildirim and Krishnamoorthy 2008]. In order to overcome the sparsity problem, we use clustering techniques, that is, first the signed network is divided into a number of clusters such that the highest level of balance is obtained. This can be achieved by trying to maximize the number of posi-tive links inside the clusters and those with negative sign outside them [Yang et al. 2007; Bogdanov et al. 2010; Doreian et al. 2005; Doreian and Mrvar 1996]. Then, each cluster is considered as an individual, and collaborative filtering is applied on them by finding similarities between the clusters. We applied the proposed method on a number of real signed social networks. Our method, being much more scalable and less costly than those based on a machine learning framework, outperformed them in terms of prediction accuracy. The proposed method also showed better performance than those based on social theories; however, these methods are less complex than ours. Our key contributions in this manuscript are as follows.  X  X odeling the signed network as a bipartite user-item network that is commonly used in recommendation systems  X  X pplying user-based collaborative filtering for sign prediction and modifying it to make it appropriate for the sign prediction problem  X  X olving the sparsity problem of signed networks by clustering the network  X  X ntroducing a method to extract conditional similarities between clusters in signed networks In order to formally define the sign prediction problem, let us consider a signed directed graph G ( V , E ), where V indicates the set of nodes and E the set of signed relations between them (for binary signed graphs, the entries of E would be + 1or  X  1). In the sign prediction problem, we assume that all structural information about graph G is given, except the sign of edge ( u , v ) from node u , denoted as trustor, to node v , denoted as trustee. The problem is to infer the disappeared sign of the edge ( u , v ) based on the information extracted from the rest of the graph. Most previous works in sign prediction are based on various machine-learning-based techniques [Chiang et al. 2011; DuBois et al. 2011; Leskovec et al. 2010a; Shahriari and Jalili 2014]. There have also been some efforts to use two psychological theories, namely, social balance and status theories, for predicting the sign of links. In the following, we give a brief description of these methods. The social balance theory is a theory from social psychology to show how people develop their relations in a signed network [Heider 1946]. This theory is based on principles from psychology, such as  X  my friend X  X  friend is my friend X ,  X  X y friend X  X  enemy is my enemy X ,  X  X y enemy X  X  friend is my enemy X , and  X  X y enemy X  X  enemy is my friend  X . Social balance theory is often studied in all-to-all connected signed triads consisting of nodes u , v ,and w . The network will be a balanced structure if we have odd number of occurrences for positive edges (e.g., when all three connections are positive). For general networks, it is argued that the network is balanced if all its triads are balanced. It is simple to show that balanced networks have cycles with only odd numbers of positive connections. However, while real networks are not completely balanced and they are indeed balanced to some extent [Leskovec et al. 2010b]. It can also be shown that if a network is structurally balanced, it is possible to cluster it into a number of subnetworks such that all the links inside the clusters are positive, whereas the inter-cluster links are all negative.

Social balance theory may be used for predicting the unknown sign of the connection links [Leskovec et al. 2010a]. Indeed, real networks may evolve in a way that they get more structurally balanced, that is, the sign of a link is determined such that the triads in which the link is participating are structurally balanced. However, the link ( u , v ) is likely to participate in multiple triads for which some will be balanced, whereas others are unbalanced, for any sign for the link. In such situations, we choose the sign resulting in more balanced triads. More precisely, considering ( u , v ). Sign ( u , v ) indicates the sign of the link from node u to node v . This theory does not predict anything for the case where F balance = 0. In this formula, w i represents the node that forms a triad with u and v ,and n indicates the number of such nodes. Social balance theory does not consider directions in the connections and thus is less likely to work for directed networks. Another theory from social psychology that specif-ically deals with directed signed graphs is social status theory. This theory defines a status value for each node, and a positive edge from u to v means that v has higher status compared to u , whereas a negative edge in the same direction means a higher status for u than v . Obviously, based on social status theory, when the direction of a link changes, its sign also changes. In other words, a positive link from u to v means a negative link from v to u . One can also use this theory for predicting the signs in real networks, which in most cases, are directed [Leskovec et al. 2010b]. To this end, an appropriate measure for the status of the nodes should be first adopted. Then, having the status values for nodes u and v , for which the sign is unknown for the link from u to v , it will be  X  +  X  if the status of v is higher than u and  X   X   X  X f u is of higher status than v . In practical applications, in order to predict the sign of the link from u to v , we consider are changed in a way such that it is from u to w i and from w i to u , respectively (if this makes the change of direction of a link in the original graph, the sign of the link also changes). Then, F status is computed as
When F status &gt; 0, the sign is predicted to be  X  +  X , whereas F status &lt; 0 means  X   X   X  X sthe predicted sign of the link ( u , v ). Similar to balance theory, status theory also works on single triads. In the case that link ( u , v ) participates in multiple triads, the following term can be calculated instead of the Formula (2).

As seen from Equations (1) and (3), in order to be able to use social balance and status theories for predicting the sign of a specific link, this link should participate in some triads, which is far from being the case in many real signed networks. Thus, applying social balance and status theory (in practice) does not result in high prediction accuracy in many real networks, which are sparse and with many of the links not appearing in any triad. We will show that our proposed method does not have this problem and outperforms these methods in terms of prediction accuracy. Most of the research carried out for the sign prediction problem are based on a ma-chine learning framework [Chiang et al. 2011; DuBois et al. 2011; Leskovec et al. 2010a; Shahriari and Jalili 2014]. In methods based on a machine learning framework, first a set of features are constructed for the links (or for the head and tail nodes). Then, a classifier is used to perform the prediction (or classification) task. Recently, Leskovec et al. [2010a] proposed a set of features for the trustor and trustee to use in sign prediction through logistic regression in a machine learning framework. These features are listed in Table I. In the same work, they further extended the feature list by considering some features based on status and balance theories. However, their results showed that this extension of feature list could not significantly improve the performance of the classification, although making the computations more complex.
Predictions obtained through machine learning are usually more precise than those obtained through social balance and status theories. However, they are often compu-tationally costly, which limits their application in large-scale datasets. Furthermore, when the network changes (which is often the case for many real social networks), the learning process should accordingly be updated, which means the computations should be repeated. The problem of a cold start is another common problem of most techniques based on a machine learning framework, which means the algorithms do not have satisfactory performance unless a fair amount of data (e.g., known sign of the links) are already available. As mentioned, methods based on machine learning frameworks cannot be efficiently applied for large networks, and they always suffer from a scalability problem. In this work, we proposed a method based on collaborative filtering that is more computa-tionally efficient than machine learning methods, while resulting in better prediction performance. Collaborative filtering algorithms are well-known in recommender sys-tems where proper items are recommended to users such that the users are likely to use (or positively rate) them in the future. In order to use collaborative filtering methodol-ogy in sign prediction, we suppose that each link ( u , v ) is a vote from (user) u towards (item) v , where the votes can be either + 1or  X  1. Keeping in mind that collaborative fil-tering methods largely depend on reliable similarities between users in order to result in precise prediction, the main problem of applying collaborative filtering to the sign prediction problem is often high levels of sparsity in signed networks. This makes it difficult, if not impossible, to extract similarities between user voting patterns in such networks. Therefore, direct application of collaborative filtering to the sign prediction problem does not result in satisfactory performance.

Here we give a solution to overcome this problem through first clustering the signed network and then applying collaborative filtering to the clusters. In this work, we used collaborative filtering in a different way than is often used in recommender systems. In our method, in order to predict the sign of the link from user a to user b , we take the weighted aggregation of the votes pointed by all users to user b , where the weights are based on the similarity between the voter user and user b . Whereas in standard collaborative filtering used in recommender systems, the vote from user a to user b is based on the votes pointed to user b by those similar to user a . The network clustering is carried out such that it maximizes the number of positive edges inside clusters and those with negative signs between clusters. As the network is clustered and the collaborative filtering algorithm is applied, an output is obtained, which is a value in the range [  X  1 , 1]. We then use a thresholding approach to decide the sign [Zolfaghar and Aghaie 2010].

If the model checker requests successors of a state which are not created yet, the state space uses the simulator to create the successors on-the-fly. To create successor states, the simulator conducts the following steps. Although the problem of sign prediction is similar to predicting users X  voting, they are different in some aspects. The votes (signs) in the problem of sign prediction are limited to + 1and  X  1, whereas they can have much a wider range in recommendation systems. Also, the graph structure in recommender systems has a bipartite type, where the links are from one group of nodes (users) to another group (items). But in the sign prediction problem, each node can have a role as user and item, simultaneously.

In a recommender system, collaborative filtering algorithms try to extract utility of arbitrary items for target users based on previously recorded votes in the systems. As the items are valued for each user, a number of them with the highest value are rec-ommended to the user. Collaborative filtering algorithms can be performed, in general, in two forms: item-based and user-based [Herlocker et al. 2004; Konstan et al. 1997]. In user-based collaborative filtering, prediction is performed based on the recorded votes from other users on the target item, whereas item-based collaborative filtering estimates the utility based on votings from target user on other items. In this work, we used user-based collaborative filtering in the model. In the following, we give a brief description of the user-based collaborative filtering algorithm. The main idea for user-based collaborative filtering is that the users with similar preferences and tastes in the past are likely to have similar preferences in the future. User-based collabora-tive filtering recommends items to a particular user according to the preferences of its similar users. To this end, proper statistical methods are used to find a set of users that have a history of agreeing with the target user by rating or selecting similar sets of items. One of the most frequently used techniques for measuring similarities between users is cosine-based similarity [Sarwar et al. 2001].
 where S x , y represents the list of items, rated by both users u and v ,and r x , s indicates the vote of user x on item s . Sim i , j is the cosine similarity between users i and j .
In order to apply user-based collaborative filtering for the sign prediction problem, the similarity between the nodes should be first extracted. However, due to the high levels of sparsity, as defined in the following formula, of many real signed networks, this might not result in precise prediction. Let us define the sparsity of a network of users and items (in signed social networks all nodes are users and items) as follows,
If a network is sparse, the similarity of preferences between the nodes will not be precise. This can be explained as follows. According to cosine-based similarity, as expressed in Equation (4), in order to measure the similarity between any pair of nodes, first the nodes that received links from these two nodes are extracted, and then the cosine similarity is estimated based on them. However, due to sparsity of real signed networks, there are not many such nodes receiving links from two adjacent nodes, and thus the estimated similarity is not reliable. The reason for higher degrees of sparsity in signed networks than in bipartite networks of recommender systems is due to the fact that in signed networks, all nodes are considered users and items. This leads to having large numbers of nodes which may potentially receive and give votes. In order to compare the sparsity levels of networks of recommender systems and those used for signed prediction, let us consider two sample networks. The networks have N nodes (users) and P links. Furthermore, the network of recommender system has M items, where M &lt;&lt; N . It can be simply seen that the sparsity value of the signed network, (1  X  P / N 2 ), is much higher than that of the one used in the recommender system, (1  X  P / NM ).

We try to tackle the problem caused by sparsity through clustering the network. We try to have nodes with similar preferences of voting in the same clusters. We then apply user-based collaborative filtering to this clustered network by computing the similari-ties between the clusters. It is likely that there are enough links between the clusters, which makes it possible to have enough neighboring clusters for any cluster. Therefore, the inter-cluster similarity scores can be computed reliably in clustered networks. As mentioned in the previous section, a structurally balanced signed network can be clustered into clusters such that the intra-cluster links have positive sign, while all the negative links are inter-cluster. However, real networks do not often have complete structural balance, and they are balanced to some extent. This makes it impossible to find such perfect clusters for real sign networks. Such networks can be divided into clusters such that the positive links become within the clusters and links with a negative sign are placed outside the cluster as much as possible. This means that in such a clustering, we will have some positive inter-cluster and negative intra-cluster links. An approach, called generalized block-modeling, has been proposed for clustering signed networks [Doreian and Mrvar 1996]. This algorithm first randomly assigns the nodes to a number of clusters and then tries to optimize an objective function by reallocating the nodes to predefined clusters. Criterion function implies inconsistent edges with an ideal k -balanced functions, where k indicates the number of clusters that is an input for clustering algorithm. The algorithm uses an objective function to optimize, which is as follows where P is the number of positive edges between clusters, N is the total number of negative edges inside clusters, and E c is the error of the algorithm.  X  is a control parameter in the range [0, 1], where  X &gt; 0.5 means inconstancies of the negative links are more important, whereas  X &lt; 0.5 gives more weight to inter-cluster positive links. Ideally, N and P should be small numbers to have a good clustering algorithm; the optimal algorithm is the one that minimizes E c . Having this objective function, the clustering can be considered as determining the clusters C X  such that where is the possible cluster set for a given signed network. Since has a large space, an iterative local optimization procedure has been introduced to do the optimization task [Doreian and Mrvar 1996]. The following pseudocode summarizes the algorithm.  X  X nitialize nodes with random clusters.  X  X hile E (new clustering) &gt; E (previous cluster); E indicates error, as expressed by
Equation (6).  X  X or each node i ( i = 1 ,..., N ; there are N nodes in the network):
Indeed, each node selects a local optimal cluster by minimizing E c according to the clusters to which its neighboring nodes belong. We used the algorithm proposed by Doreian et al. [2005] and Doreian and Mrvar [1996] to do the local optimization task. This greedy algorithm computes the local clustering error for the nodes. The local clustering error for node i ( LE c , i ) is computed as where N i is the number of negative links between node i and those in its cluster, and P i is the number of positive links between node i and those located in other clusters. The algorithm first randomly assigns the nodes to one of the clusters (having fixed the number of clusters a priori). Then, in each iteration, the nodes, one-by-one are located in the cluster that minimizes its local clustering error, as expressed by Equation (8). After each iteration, the clustering error, as expressed by Equation (6), is computed, and if it is more than that of the previous iteration, the algorithm stops; otherwise, a new iteration is performed. We applied the sign prediction algorithms on three real signed networks: Epinions, Slashdot, and WikiElection. These datasets have been frequently used as benchmarks in sign prediction [Chiang et al. 2011; DuBois et al. 2011; Leskovec et al. 2010b; Shahriari and Jalili 2014].

Epinions. Epinions is an online product review website where users give positive or negative votes to each other based on their review ratings on different topics presented in this website. Indeed, this is a directed signed network with both positive and negative relations among nodes. The Epinions dataset contains 131,828 nodes and 841,372 edges.
 Slashdot. The Slashdot dataset has a similar structure as the Epinions dataset. Slashdot is a technology news website where each user is allowed to give foe or friend values to other users. These labels between users are considered positive and negative edges. The network obtained from this website comprises 82,144 nodes and 549,202 edges.

WikiElection. Wikipedia is a well-known encyclopedia which is managed by some promoting user. These users are elected as administers by the votes of other users, where the users X  votes have positive or negative values.

The statistics of the datasets including the number of nodes and positive/negative links are summarized in Table II. As the network is divided into clusters, similarities between these clusters are obtained. We used cosine similarity of Eq. (4) to obtain these similarities. In order to obtain reliable similarities between the clusters, we used a technique proposed in Quan et al. [2006], which calculates similarity between two clusters based on their votes on the third cluster. In classic collaborative filtering algorithms, the similarities are calculated on the whole set of items. However, users with similar tastes on a category of items (e.g., those items that are in the same cluster) may have completely different preferences on the items of other categories. In order to explain our strategy for calculating the similarity values, let us consider a sample network with four clusters A , B , C ,and D (Figure 1). In such a network, nodes of clusters A and B might have similar votes (or links) with those in cluster C , while having dissimilar votes with the nodes in cluster D . We denote this measure as a conditional similarity metric. Conditional similarity between two clusters A and B with respect to (or conditioned to) a third cluster C ( Sim A , B | C ) is calculated as where S A , B | C indicates the list of nodes in cluster C receiving links from the nodes located in clusters A and B ,and m A , s represents the average of the signs of the links from nodes located in cluster A to node s , which can be calculated as where S A ,v represents the list of nodes of cluster A linking to node v ,and r s ,v is the sign of the edge from nodes s to v .| S A ,v | indicates the number of ratings from nodes of cluster A to node v .

As discussed, the clustered networks will have a majority of links with positive signs inside the cluster and those with negative signs outside the clusters. Considering two clusters A and B , the links from the nodes of A to those in B will have mostly negative signs, while those inside B will be positive. Therefore, it is expected that the similarity of clusters A and B conditioned to B will be negative. Similarity, the similarity between clusters A and B conditioned to any other third cluster gets a positive value.
We applied this procedure on one of the datasets: Epinions. First, the network was divided into four clusters using the clustering algorithm, resulting in clusters 1, 2, 3, and 4. Then, the inter-community similarity values, conditioned to cluster 4, were obtained. Table III shows such similarity scores. As seen, the similarity values between cluster 4 and other clusters are negative, whereas those between clusters 1, 2, and 3 are all positive. These similarity matrices can be used not only in sign prediction, but also in studying the inter-group relationship in social networks, such as determining similar or opposite preferences between different groups. In this work, we performed user-based collaborative filtering, that is, the similarities were calculated based on outgoing links from the nodes, which means that the nodes were treated as users. Alternatively, one can also compute the similarities based on incoming links, that is, treating the nodes as items, leading to item-based collaborative filtering. Therefore, in our approach, in order to predict the sign of link ( u , v ) from node u to node v , the weighted average of the sign of links pointing to node v is considered. The values that are used for weighting the link between nodes i and v (for predicting the sign of ( u , v )) is the similarity between the clusters to which these two nodes belong. The predicted sign of the link from node u to node v ( PS u ,v ) is obtained as where N v represents the number of links pointing to node v ,and Sim U,I|V indicates the similarity between the cluster to which node u belongs ( U )andtheclustertowhich the sign of the link from user node i to node v . This formula can also be represented as where C represents the number of clusters in the network, m I ,v is the average sign of the links from nodes located in cluster I to node v ,and R I ,v is the total number of such links, which, to an extent, shows how reliably nodes of cluster I vote for node v . Let us suppose 100 nodes of cluster A have rated node v (with an average sign of a ), while only three nodes in cluster B have links to node v (with an average sign of b ). Based on Equation (12), the votes originated from cluster A ( a ) will be more reliable (and thus more influential) than those originated from cluster B ( b )insign prediction.

These equations output a real number in the range [  X  1, 1]. We then fix a threshold to decide the sign of the value. A simple threshold could be 0 for which higher values result in positive signs and lower values to negative signs. However, we may select it more consciously to have the highest accuracy on training data. In this section, we investigate the computational complexity of the proposed predictor based on the collaborative filtering strategy. The algorithm is divided into two parts: clustering the sign network and computing the similarity scores between the clusters. We discuss the computation complexity of these sections separately.

Computational complexity for the clustering part is O ( INCd ), where I is the num-ber of iterations, N the number of nodes, C the number of clusters, and d the aver-age number of neighbors for each node, which is indeed the average degree of the network. Since, we have E = dN for directed networks, where E is the number of edges, the complexity reduces to O ( ICE ). Often, the number of clusters is much less than the number of nodes in real-world large-scale networks, and we have E  X  N for sparse networks. Thus, the computational complexity of the clustering section of the algorithm is almost O ( IN ) for sparse networks. In practice, the algorithm converges in a finite number of iterations with I N , and thus the complexity is much less than O ( N 2 ).

The second part of the algorithm X  X omputing the inter-cluster similarity scores X  X as a computational complexity of O ( C 3  X  c ), where  X  c is the number of nodes in each cluster that can be obtained by dividing N with C . Thus, the complexity is O ( C 2 N ). As we described earlier, we used the cosine measure to extract similarity between two clus-ters conditioned to a third. The cosine measure is applied on the c -dimensional vector of two clusters, where the vectors correspond to votes pointing from these clusters to the nodes of a third cluster. Obviously, the algorithm examines cosine similarity for C 3 times. Clustering the network not only overcomes the problem of sparsity of the network but also significantly reduces the computational complexity, as compared to standard collaborative filtering. The computational complexity of standard collabora-tive filtering, O ( N 3 ), is much higher than that of our proposed collaborative filtering, that is, O ( C 2 N ), since C N .

The integrated computational complexity of the algorithm composed of these two parts is O ( C 2 N ) + O ( IN ) for sparse networks .I and C are very small in comparison to N , and in practice, the computational complexity of the algorithm is almost O ( N ). For instance, in our datasets, at most ten clusters are enough to make a good clustering, and the clustering algorithm converges in at most ten iterations. The computational complexity of our algorithm is much less than most approaches based on a machine learning framework. For example, the logistic regression that has been used in this work as a machine learning framework has a computational complexity of O ( E 3 )that is almost O ( N 3 ) for sparse networks. In order to evaluate the performance of the proposed model, we tested them on the datasets and used a ten-fold cross-validation algorithm. In each fold, 90% of the dataset is considered as training dataset (for which the similarity measures are computed) and 10% as test dataset. The datasets has considerably more positive links than those with negative signs, which might bias the results. One way to overcome this problem is to compute the accuracy of the prediction on balance dataset, that is, datasets with equal numbers of positive and negative links. Previous works in this field often tried to solve this problem by randomly removing some of the positive links to make the positive and negative links equal and then generating training and test datasets from this balanced dataset [Guha et al. 2004; Leskovec et al. 2010a; Shahriari and Jalili 2014]. However, some information is lost in this approach. As mentioned, many real signed social networks, including the ones considered in this work, have many more positive edges than those with negative signs (positive edges are almost five times more than negative ones). Balancing these networks will result in randomly removing more than half of the edges (with positive signs), which will completely modify the structure of the networks. An alternative way to avoid loss of useful data is to train the free parameters based on the whole network, and then test the model on balanced datasets. Since the positive edges are randomly removed in order to balance the networks, this process should be repeated a number of times and the results averaged over these runs. In this work, we introduce another method and show that it results in the same expected value but with better reliability compared with the balancing method. Instead of balancing the test datasets a number of times and making an average, we used the mean true positive (TP) rates of the two classes 1 and  X  1.

Let us consider two classes: 1 for the set of positive links and  X  1 for the set of those with negative signs. Let us also consider the TP rate of the classes  X  1and1as  X   X  and  X  + , respectively. The variances are  X   X  and  X  + . Let us suppose the original dataset consists of m positive edges and n negative edges, where n &lt; m , and the balanced test set contains n negative and n positive edges. First, we prove that the methods result in the same expected value. In the following statements, notations  X  +  X  stands for positive connections and  X   X   X  for negative links. In order to have reliable statistics, balanced networks should be constructed a number of times, and the obtained accuracy scores averaged over these runs. The expectation value for accuracy on the balanced test set ( E ( A balanced )) can be calculated as where ( TP the TP rate on individual positive edges. This equation can be extended as follows
Now consider our method where we compute the TP rates for the original data. The expectation value of accuracy ( E ( A )) for our method is
Thus, these methods result in the same mean accuracy. We now show our method is more reliable, that is, it results in lower variance in the accuracy value. Variance of the accuracy in the balanced method ( Var ( A balanced )) can be calculated as and that of our method is calculated as
Since m &gt; n , Var ( A ) &lt; Var ( A balanced ). Therefore, our method leads to more reliable results than the previous one. Two parameters which may largely influence the performance of the collaborative-filtering-based sign prediction are the number of clusters and  X  , as expressed by Equation (6). These parameters should be tuned in the clustering phase of the al-gorithm, before computing the similarity measures. Not a single value of these param-eters is optimal in all networks, and for each of the datasets, a specific value is obtained as optimal. In order to assess the performance of the methods, we computed the ac-curacy of the prediction result by the methods. The prediction accuracy is calculated as Accuracy =
As discussed, due to high sparsity levels in real signed social networks, it is likely that some of the edges do not participate in any triad, for which one cannot use social balance and status theories to make predictions on the signs. In order to make the performance of the collaborative-filtering-based method comparable to those based on social balance and status theories, we used the following metric to assess the accuracy of predictors based on social balance and status theories: where A T indicates the accuracy (as computed by Equation (18)) of the algorithm on the edges that participate in at least one triad in the test set, and R is the ratio of such edges to all edges of the test set. For this relation, it is assumed that for the edges that do not participate in any triad, predictions based on social balance and status theories work as a random machine and select one of the labels 1 or  X  1 at random (such a random assignment process will result in an accuracy of 50%, on average). Indeed, for such cases, social status and balance theories cannot make any prediction, and we used Eq. (19) in order to make them comparable to other methods. Therefore, while the standard definition of accuracy, as expressed by Equation (18), was used to assess the performance of the method based on a machine learning framework (logistic regression in this work) and the proposed collaborative-filtering-based method, the modified measure of accuracy, as expressed by Equation (19), was used to assess the performance of the methods based on social balance and status theories.

Figure 2 shows the accuracy, as expressed by Equation (18), as a function of the num-ber of clusters for the Epinions, Slashdot and Wiki datasets. To run these experiments, we set  X  = 0.5, which means the positive inter-cluster links and negative intra-cluster links were treated the same in the objective function of Eq. (6). It is seen that not a single optimal value is obtained for all networks. As the number of clusters increases, we need more computations to obtain similarity measures, and the computational com-plexity increases. Thus, the fewer clusters we have, the better. We chose the number of clusters as 7, 10, and 10 for the Epinions, Slashdot, and Wiki datasets, respectively.
We next investigated how the prediction accuracy depends on  X  , that is, how much the results depend on penalizing the clustering for positive inter-cluster and negative intra-cluster links. Figure 3 shows the accuracy as a function of  X  for the Epinions, Slashdot, and Wiki datasets, respectively. We obtained  X  = 0.7 as an optimal value for the Epinions and Slashdot datasets, and  X  = 0.9 for the Wiki dataset. Since the optimal  X  is higher than 0.5, this means that penalizing the negative intra-cluster links is more influential than the inter-cluster links with positive signs.

We used the optimal values of the number of clusters and parameter  X  for our proposed collaborative-filtering-based sign predictor. The results were compared with those based on social balance and status theories, which are simple to compute without the need for extensive calculations. We also compared the performance with a machine learning approach where a logistic regression, as a predictor, was used based on the features listed in Table I [Leskovec et al. 2010a]. This method is much more complex than those based on social theories. It is also more complex than our collaborative-filtering-based approach. Figure 4 shows the prediction accuracy of these four algo-rithms in the datasets. As seen, the proposed collaborative-filtering-based algorithm outperformed the other three in terms of prediction performance in all datasets. The collaborative-filtering-based predictor outperformed logistic regression by about 15% in the Epinions dataset. Interestingly, in this dataset, simple predictions based on so-cial balance theory resulted in a close accuracy to logistic regression; 75% for social balance theory and 76% for logistic regression. This means that in such a dataset, a simple and computationally-scalable prediction based on prime social theories can have a comparable performance with complex machine learning techniques.

In the Slashdot dataset, the collaborative-filtering-based predictor demonstrated the best performance with 83% accuracy, followed by the logic regression with 70%, and those based on social balance with 62%, and status theory with 57%. The proposed predictor outperformed the logistic regression by 5% in the Wikipedia dataset. Predic-tion based on social status theory resulted in better accuracy (71%) as compared to the one based on social balance theory (69%) for this dataset. The reason for better performance of status theory than balance theory in this dataset is its specific struc-ture. In the Wikipedia dataset, users with better positions who could demonstrate their reliability to others often received more positive votes. This can be interpreted as their status, that is, users with higher status received more positive votes. Whereas in the two other datasets (Epinions and Slashdots), the votes are mainly based on the tastes and preferences of the users, and thus, balance theory could predict the signs with higher accuracy than status theory.

A reason for higher accuracy of the proposed collaborative-filtering-based algorithm to logistic regression (as a machine learning framework) is that the collaborative-filtering-based algorithm considers global topological features by graph clustering and obtaining inter-cluster similarity scores. Whereas, the approach based on machine learning framework is based on local graph measures, which has limited information on the topological properties of the networks. One can also consider more complicated features for machine-learning-based techniques. However, this requires higher com-putational complexity, resulting in scalability issues of the algorithm, which makes it difficult to apply to large-scale networks. Also, as the features become more compli-cated, the online computational load of the system increases.

In order to further compare machine-learning and collaborative-filtering-based ap-proaches, let us consider a target edge between nodes a and b in which a large portion of outgoing links from node a and incoming connections to node b are positive. In such a case, a method based on machine learning has a tendency to predict the sign of the target edge as positive, but this prediction can make errors when most of the nodes voted on b have totally different tastes than node a , and thus the real value for the target edge may have a negative sign. However, the collaborative-filtering-based al-gorithm considers the similarities between node a and those that have already voted to b . If most of the nodes that have voted to b have negative similarity with a ,the algorithm predicts a negative sign for the link from node a to node b . Indeed, the proposed collaborative-filtering-based predictor not only has lower computational com-plexity than the method based on machine learning but also is capable of considering more useful information and resulting in higher prediction accuracy.

It is worth mentioning that since we do not balance the training dataset, the number of training samples for two classes 1 and  X  1 is not equal, resulting in a bias towards a class with higher numbers of samples in methods based on a machine learning frame-work. Therefore, our results are not directly comparable to those obtained in Leskovec et al. [2010a], since they balance both the training and test datasets to avoid this bias. Balancing both training and test datasets achieves an accuracy of 86%, 80%, and 80% for the Epinions, Slashdot, and Wikipedia datasets, respectively (for the case with embeddedness of 0). Except in the Wikipedia dataset, for which our proposed method resulted in an accuracy of 80% (similar to the one obtained by logistic regression on balanced networks), the proposed method outperformed the logistic regression (applied to balanced networks) in the Slashdot and Epinions datasets. In this manuscript, we introduced an algorithm for sign prediction in social networks with positive and negative signs on the links. The algorithm has two steps: extracting the community structure of the network and applying collaborative filtering for sign prediction. In the first step, the signed network is divided into a number of clusters such that the number of inter-cluster links with positive signs and intra-cluster neg-ative links are minimized. This clustering is due to social balance theory; a signed network is denoted as a structurally balanced network if and only if it can be divided into clusters for which all the intra-cluster links are positive and all the inter-cluster connections have a negative sign. We then used a collaborative filtering algorithm for sign prediction. One of the key ingredients of collaborative filtering methods is the simi-larity values between the network elements. In this work, we used similarity measures between the clusters (based on the links between them). We applied the algorithm on a number of real signed networks and compared its performance with that of a num-ber of algorithms, including those based on social balance and status theories and the one based on a machine learning framework (logistic regression in this work). While the former are simple to compute (and hence can be applied to very large datasets), prediction based on the machine-learning-based technique needs extensive computa-tions and may not be applicable to large networks. Our proposed algorithm is much simpler than those based on machine learning frameworks (e.g., logistic regression), but more complex than those based on social theories. Our experiments showed that the proposed predictor outperformed both simple (i.e., those based on social balance and status theories) and complex (i.e., logistic regression) algorithms. Our strategy in this work is indeed to perform a preprocessing on the network (i.e., extracting the community structure based on minimizing intra-community negative links and inter-community positive connections) ahead of the sign prediction problem. These steps makes it possible to use macro-scale properties (i.e., community-wise similarity scores) in predicting a micro-scale property that is the sign of a connecting link.
A limitation to our work is unavailability of diverse datasets on signed networks that makes it necessary to apply it in more diverse datasets, which has yet to be introduced within the community of social networks. Another future direction for this research would be to apply the same strategy to the link prediction problem. The major challenge in the link prediction problem is to introduce useful features for nodes in order to predict the forthcoming edges. Having the community structure of the network, one could associate higher chances for intra-community links to appear, as compared to inter-community connections. A particular application of the proposed collaborative filtering method could be in recommender systems for which identifying the community structure within items and users could help to build better recommendation systems. The method introduced in this work could be used in other applications as well. For example, similar methods could be used for analyzing inter-group relations in social networks. Such analysis could be used to construct trust-aware recommender systems.
