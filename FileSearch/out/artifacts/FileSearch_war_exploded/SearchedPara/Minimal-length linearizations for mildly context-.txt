 This paper takes up the relationship between two hallmarks of natural language dependency structure. First, there seem to be qualitative constraints on the relationship between the dependency structure of the words in a sentence and their linear ordering. In par-ticular, this relationship seems to be such that any natural language sentence, together with its depen-dency structure, should be generable by a mildly context-sensitivity formalism (Joshi, 1985), in par-ticular a linear context-free rewrite system in which the right-hand side of each rule has a distinguished head (Pollard, 1984; Vijay-Shanker et al., 1987; Kuhlmann, 2007). This condition places strong con-straints on the linear contiguity of word-word de-pendency relations, such that only limited classes of crossing context-free dependency structures may be admitted.

The second constraint is a softer preference for words in a dependency relation to occur in close proximity to one another. This constraint is perhaps best documented in psycholinguistic work suggest-ing that large distances between governors and de-pendents induce processing difficulty in both com-prehension and production (Hawkins, 1994, 2004; Gibson, 1998; Jaeger, 2006). Intuitively there is a relationship between these two constraints: con-sistently large dependency distances in a sentence would require many crossing dependencies. How-ever, it is not the case that crossing dependencies always mean longer dependency distances. For ex-ample, (1) below has no crossing dependencies, but the distance between arrived and its dependent Yes-terday is large. The overall dependency length of the sentence can be reduced by extraposing the relative clause who was wearing a hat , resulting in (2), in which the dependency Yesterday  X  arrived crosses the dependency woman  X  who . There has been some recent work on dependency length minimization in natural language sentences (Gildea and Temperley, 2007), but the relationship between the precise constraints on available lin-earizations and dependency length minimization re-mains little explored. In this paper, we introduce the first efficient algorithm for obtaining lineariza-tions of dependency trees that minimize overall de-pendency lengths subject to the constraint of mild context-sensitivity, and use it to investigate the rela-tionship between this constraint and the distribution of dependency length actually observed in natural languages. In the last few years there has been a resurgence of interest in computation on dependency-tree struc-tures for natural language sentences, spurred by work such as McDonald et al. (2005a,b) show-ing that working with dependency-tree syntactic representations in which each word in the sen-tence corresponds to a node in the dependency tree (and vice versa) can lead to algorithmic benefits over constituency-structure representations. The lin-earization of a dependency tree is simply the linear order in which the nodes of the tree occur in a sur-face string. There is a broad division between two classes of linearizations: projective linearizations that do not lead to any crossing dependencies in the tree, and non-projective linearizations that involve at least one crossing dependency pair. Example (1), for example, is projective, whereas Example (2) is non-projective due to the crossing between the Yes-terday  X  arrived and woman  X  who dependencies.
Beyond this dichotomy, however, the homomor-phism from headed tree structures to dependency structures (Miller, 2000) can be used together with work on the mildly context-sensitive formalism lin-ear context-free rewrite systems (LCFRSs) (Vijay-Shanker et al., 1987) to characterize various classes of mildly non-projective dependency-tree lineariza-tions (Kuhlmann and Nivre, 2006). The LCFRSs are an infinite sequence of classes of formalism for gen-erating surface strings through derivation trees in a rule-based context-free rewriting system. The i -th LCFRS class (for i =0 , 1 , 2 ,... ) imposes the con-straint that every node in the derivation tree maps to to a collection of at most i +1 contiguous substrings. The 0 -th class of LCFRS, for example, corresponds to the context-free grammars, since each node in the derivation tree must map to a single contiguous sub-string; the 1st class of LCFRS corresponds to Tree-Adjoining Grammars (Joshi et al., 1975), in which each node in the derivation tree must map to at most a pair of contiguous substrings; and so forth. The dependency trees induced when each rewrite rule in an i -th order LCFRS distinguish a unique head can similarly be characterized by being of gap-degree i , so that i is the maximum number of gaps that may appear between contiguous substrings of any subtree in the dependency tree (Kuhlmann and M  X  ohl, 2007). The dependency tree for Example (2), for example, is of gap-degree 1. Although there are numerous documented cases in which projectivity is violated in natural language, there are exceedingly few doc-umented cases in which the documented gap degree exceeds 1 (though see, for example, Kobele, 2006). Even under the strongest constraint of projectivity, the number of possible linearizations of a depen-dency tree is exponential in both sentence length and arity (the maximum number of dependencies for any word). As pointed out by Gildea and Tem-perley (2007), however, finding the unconstrained minimal-length linearization is a well-studied prob-lem with an O ( n 1 . 6 ) solution (Chung, 1984). How-ever, this approach does not take into account con-straints of projectivity or mild context-sensitivity.
Gildea and Temperley themselves introduced a novel efficient algorithm for finding the minimized dependency length of a sentence subject to the con-straint that the linearization is projective. Their al-gorithm can perhaps be most simply understood by making three observations. First, the total depen-dency length of a projective linearization can be written as where E i is the boundary of the contiguous substring corresponding to the dependency subtree rooted at w i which stands between w i and its governor, and D ( w special case of D ( w root ,E root )=0 (Figures 1 and 2). Writing the total dependency length this way makes it clear that each term in the outer sum can be optimized independently, and thus one can use dynamic programming to recursively find op-timal subtree orderings from the bottom up. Sec-ond, for each subtree, the optimal ordering can be obtained by placing dependent subtrees on alternat-ing sides of w from inside out in order of increas-ing length. Third, the total dependency lengths be-tween any words withing an ordering stays the same when the ordering is reversed, letting us assume that D ( w These three observations lead to an algorithm with worst-case complexity of O ( n log m ) time, where n is sentence length and m is sentence arity. (The log m term arises from the need to sort the daugh-ters of each node into descending order of length.)
When limited subclasses of nonprojectivity are admitted, however, the problem becomes more diffi-cult because total dependency length can no longer be written in such a simple form as in Equation (1). Intuitively, the size of the effect on dependency length of a decision to order a given subtree discon-tiguously, as in a woman . . . who was wearing a hat in Example (2), cannot be calculated without con-sulting the length of the string that the discontiguous subtree would be wrapped around. Nevertheless, for any limited gap degree, it is possible to use a dif-ferent factorization of dependency length that keeps computation polynomial in sentence length. We in-troduce this factorization in the next section. We begin by defining some terms. We use the word component to refer to a full linearization of a sub-tree in the case where it is realized as a single con-tiguous string, or to refer to any of of the contigu-ous substrings produced when a subtree is realized discontiguously. We illustrate the factorization for gap-degree 1, so that any subtree has at most two components. We refer to the component contain-ing the head of the subtree as the head component , the remaining component as the dependent compo-nent , and for any given (head component, depen-dent component) pair, we use pair component to re-fer to the other component in the pair. We refer to the two components of dependent d j as d j 1 and d j 2 respectively, and assume that d j 1 is the head com-ponent. When dependencies can cross, total depen-dency length cannot be factorized as simply as in Equation (1) for the projective case. However, we can still make use of a more complex factorization of the total dependency length as follows: where l j is the number of links crossing between the two components of d j , and k j is the distance added between these two components by the partial lin-earization at w i . Figure 3 illustrates an example of such a partial linearization, where k 2 is | d 31 | + | d due to the fact that the links between d 21 and d 22 have to cross both components of d 3 . The factor-ization in Equation (2) allows us to use dynamic programming to find minimal-length linearizations, so that worst-case complexity is polynomial rather than exponential in sentence length. However, the additional term in the factorization means that we need to track the number of links l crossing between the two components of the subtree S i headed by w i and the component lengths | c 1 | and | c 2 | . Addition-ally, the presence of crossing dependencies means that Gildea and Temperley X  X  proof that ordering de-pendent components from the inside out in order of increasing length no longer goes through. This means that at each node w i we need to hold on to the minimal-length partial linearization for each combi-nation of the following quantities:  X | c 2 | (which also determines | c 1 | );  X  the number of links l between c 1 and c 2 ;  X  and the direction of the link between w i and its We shall refer to a combination of these factors as a status set . The remainder of this section de-scribes a dynamic-programming algorithm for find-ing optimal linearizations based on the factorization in Equation (2), and continues with several further findings leading to optimizations that make the al-gorithm tractable for naturally occurring sentences. 4.1 Algorithm 1 Our first algorithm takes a tree and recursively finds the optimal orderings for each possible status set of each of its child subtrees, which it then uses to cal-culate the optimal ordering of the tree. To calcu-late the optimal orderings for each possible status set of a subtree S, we use the brute-force method of choosing all combinations of one status set from each child subtree, and for each combination, we try all possible orderings of the components of the child subtrees, calculate all possible status sets for S, and store the minimal dependency value for each appear-ing status set of S. The number of possible length pairings | c 1 | , | c 2 | and number of crossing links l are each bounded above by the sentence length n , so that the maximum number of status sets at each node is bounded above by n 2 . Since the sum of the status sets of all child subtrees is also bounded by n , the maximum number of status set combinations is bounded by ( n 2 m ) m (obtainable from the inequal-ity of arithmetic and geometric means). There are (2 m +1)! m possible arrangements of head word and dependent components into two components. Since there are n nodes in the tree and each possible com-bination of status sets from each dependent sub tree must be tried, this algorithm has worst-case com-plexity of O ((2 m +1)! mn ( n 2 m ) m ) . This algorithm could be generalized for mildly context-sensitive linearizations polynomial in sentence length for any gap degree desired, by introducing additional l terms denoting the number of links between pairs of com-ponents. However, even for gap degree 1 this bound is incredibly large, and as we show in Figure 7, al-gorithm 1 is not computationally feasible for batch processing sentences of arity greater than 5. 4.2 Algorithm 2 We now show how to speed up our algorithm by proving by contradiction that for any optimal or-dering which minimizes the total dependency length with the two-cluster constraint, for any given sub-tree S and its child subtree C , the pair components c 1 and c 2 of a child subtree C must be placed on opposite sides of the head h of subtree S .
Let us assume that for some dependency tree structure, there exists an optimal ordering where c 1 and c 2 are on the same side of h . Let us refer to the ordered set of words between c 1 and c 2 as v . None of the words in v will have dependency links to any of the words in c 1 and c 2 , since the dependencies of the words in c 1 and c 2 are either between themselves or the one link to h , which is not between the two com-ponents by our assumption. There will be j 1  X  0 links from v going over c 1 , j 2  X  0 dependency links from v going over c 2 , and l  X  1 links between c 1 and c . Without loss of generality, let us assume that h is on the right side of c 2 . Let us consider the effect on total dependency length of swapping c 1 with v ,so that the linear ordering is vc 1 c 2  X  h . The total de-pendency length of the new word ordering changes and decreases by another | v | if c 1 is the head com-ponent. Thus the total change in dependency length is less than or equal to If instead we swap places of v with c 2 instead of c 1 so that we have c 1 c 2 v  X  h , we find that the total change in dependency length is less than or equal to It is impossible for the right-hand sides of (3) and (4) to be positive at the same time, so swapping v with either c 1 or c 2 must lead to a linearization with lower overall dependency length. But this is a contradic-tion to our original assumption, so we see that for any optimal ordering, all split child subtree compo-nents c 1 and c 2 of the child subtree of S must be placed on opposite sides of the head h .

This constraint allows us to simplify our algo-rithm for finding the minimal-length linearization. Instead of going through all logically possible or-derings of components of the child subtrees, we can now decide on which side the head component will be on, and go through all possible orderings for each side. This changes the factorial part of our algorithm run time from (2 m +1)! m to 2 m ( m !) 2 m , giving us O cessing time. 4.3 Algorithm 3 We now present two more findings for further in-creasing the efficiency of the algorithm. First, we look at the status sets which need to be stored for the dynamic programming algorithm. In the straightfor-ward approach we first presented, we stored the op-timal dependency lengths for all cases of possible status sets. We now know that we only need to con-sider cases where the pair components are on op-posite sides. This means the direction of the link from the head to the parent will always be toward the inside direction of the pair components, so we can re-define the status set as ( p, l ) where p is again the length of the dependent component, and l is the number of links between the two pair components. If the p values for sets s 1 and s 2 are equal, s 1 has a smaller number of links than s 2 ( l s 1  X  l s 2 ) and s 1 has a smaller or equal total dependency length to s 2 , then replacing the components of s 2 with s 1 will always give us the same or more optimal total dependency length. Thus, we do not have to store instances of these cases for our algorithm.
Next, we prove by contradiction that for any two status sets s 1 and s 2 ,if p s 1 &gt;p s 2 &gt; 0 , l s 1 s  X  X efined as the sum in Equation (2) over only those words inside the subtree headed by h  X  X s less than or equal to t 2 of s 2 , then using s 1 will be at least as good as s 2 , so we can ignore s 2 . Let us suppose that the optimal linearization can use s 2 but not s 1 . Then in the optimal linearization, the two pair com-ponents c s 2 , 1 and c s 2 , 2 of s 2 are on opposite sides of the parent head h . WLOG, let us assume that components c s 1 , 1 and c s 2 , 1 are the dependent com-ponents. Let us denote the total number of links go-ing over c s 2 , 1 as j 1 and the words between c s 2 , 1 c 2 , 2 as v (note that v must contain h ). If we swap c there would be j 2 +1 links going over c s 2 , 1 .Bymov-ing c s 2 , 1 from opposite sides of the head to be right next to c s 2 , 2 , the total dependency length of the sen-tence changes by  X  j 1 | c s 2 , 1 | X  l s 2 | v | +( j 2 +1) Since the ordering was optimal, we know that Since l&gt; 0 , we can see that j 1  X  j 2  X  0 . Now, in-stead of swapping v with c s 2 , 1 , let us try substituting the components from s 1 instead of s 2 . The change of the total dependency length of the sentence will be:
Since j 1  X  j 2  X  0 and p s 1 &gt;p s 2 , the first term is less than or equal to 0 and since t 1  X  t 2  X  0 , the total dependency length will have been be equal or have decreased. But this contradicts our assumption that only s 2 can be part of an optimal ordering.
This finding greatly reduces the number of sta-tus sets we need to store and check higher up in the algorithm. The worst-case complexity remains O duced by several orders of magnitude. 4.4 Algorithm 4 Our last optimization is on the ordering among the child subtree components on each side of the sub-tree head h . The initially proposed algorithm went through all combinations of possible orderings to find the optimal dependency length for each status set. By the first optimization in section 4.2 we have shown that we only need to consider the orderings in which the components are on opposite sides of the head. We now look into the ordering of the com-ponents on each side of the head. We first define the rank value r for each component c as follows: where I ( c ) is the indicator function having value 1 if c is a head component and 0 otherwise . Using this definition, we prove by contradiction that the order-ing of the components from the head outward must be in order of increasing rank value.

Let us suppose that at some subtree S headed by h and with head component C 1 and dependent com-ponent C 2 , there is an optimal linearization in which there exist two components c i and c i +1 of immedi-ate subtrees of S such that c i is closer to h , the com-ponents have rank values r i and r i +1 respectively, r i &gt;r i +1 , and no other component of the imme-diate subtrees of S intervenes between c i and c i +1 . We shall denote the number of links between each component and its pair component as l i , l i +1 . Let l = l are two cases to consider: either (1) c i and c i +1 are within the same component of S ,or(2) c i is at the edge of C 1 nearest C 2 and c i +1 is at the edge of C 2 neareast C 1 .

Consider case 1, and let us swap c i with c i +1 ; this affects only the lengths of links involving connec-tions to c i or c i +1 . The total dependency length of the new linearization will change by This is a contradiction to the assumption that we had an optimal ordering.

Now consider case 2, which is illustrated in Fig-ure 4. We denote the number of links going over c i and c i +1 , excluding links to c i , c i +1 as  X  1 and  X  2 respectively, and the length of words between the edges of C 1 and C 2 as k . Let us move c i +1 to the outermost position of C 1 , as shown in Fig-ure 5. Since the original linearization was optimal, we have:
Let us also consider the opposite case of mov-ing c i to the inner edge of C 2 , as shown in Fig-ure 6. Once again due to optimality of the original linearization, we have Surface Deep Surface Deep But this is a contradiction, since r i &gt;r i +1 . Com-bining the two cases, we can see that regardless of where the components may be split, in an optimal ordering the components going outwards from the head must have an increasing rank value.

This result allows us to simplify our algorithm greatly, because we no longer need to go through all combinations of orderings. Once it has been de-cided which components will come on each side of the head, we can sort the components by rank value and place them from the head out. This reduces the factorial component of the algorithm X  X  complexity to m log m , and the overall worst-case complexity to O ( nm 2 log m ( 2 n 2 m ) m ) . Although this is still ex-ponential in the arity of the tree, nearly all sentences encountered in treebanks have an arity low enough to make the algorithm tractable and even very effi-cient, as we show in the following section. Using the above algorithm, we calculated minimal dependency lengths for English sentences from the WSJ portion of the Penn Treebank, and for German sentences from the NEGRA corpus. The English-German comparison is of interest because word or-der is freer, and crossing dependencies more com-mon, in German than in English (Kruijff and Va-sishth, 2003). We extracted dependency trees from these corpora using the head rules of Collins (1999) for English, and the head rules of Levy and Man-ning (2004) for German. Two dependency trees were extracted from each sentence, the surface tree extracted by using the head rules on the context-free tree representation (i.e. no crossing dependen-cies), and the deep tree extracted by first return-ing discontinuous dependents (marked by *T* and *ICH* in WSJ, and by *T* in the Penn-format ver-sion of NEGRA) before applying head rules. Fig-ure 7 shows the average time it takes to calculate the minimal dependency length with crossing depen-dencies for WSJ sentences using the unoptimized al-gorithm of Section 4.1 and the fully optimized al-gorithm of Section 4.4. Timing tests were imple-mented and performed using Java 1.6.0 10 on a sys-tem running Linux 2.6.18-6-amd64 with a 2.0 GHz Intel Xeon processor and 16 gigs of memory, run on a single core. We can see from Figure 7 that the straight-forward dynamic programming algorithm takes many more magnitudes of time than our op-timized algorithm, making it infeasible to calculate the minimal dependency length for larger sentences. The results we present below were obtained with the fully optimized algorithm from the sentences with a maximum arity of 10, using 49,176 of the 49,208 WSJ sentences and 20,563 of the 20,602 NEGRA sentences.

Summary results over all sentences from each cor-pus are shown in Table 1. We can see that for both corpora, the oberved dependency length is smaller than the dependency length of random orderings, even when the random ordering is subject to the projectivity constraint. Relaxing the projectivity constraint by allowing crossing dependencies intro-duces a slightly lower optimal dependency length. The average sentence dependency lengths for the three random orderings are significantly higher than the observed values. It is interesting to note that the random orderings given the projectivity constraint and the two-cluster constraint have very similar de-pendency lengths, where as a total random ordering increases the dependency length significantly. NEGRA generally has shorter sentences than WSJ, so we need a more detailed picture of depen-dency length as a function of sentence length; this is shown in Figure 8. As in Table 1, we see that English, which has less crossing dependency struc-tures than German, has observed DL closer to opti-mal DL and farther from random DL. We also see that the random and observed DLs behave very sim-ilarly across different sentence lengths in English and German, but observed DL grows faster in Ger-man. Perhaps surprisingly, optimal projective DL and gap-degree 1 DL tend to be very similar even for longer sentences. The picture as a function of sentence arity is largely the same (Figure 9). In this paper, we have presented an efficient dynamic programming algorithm which finds minimum-length dependency-tree linearizations subject to constraints of mild context-sensitivity. For the gap-degree 1 case, we have proven several properties of these linearizations, and have used these properties to optimize our algorithm. This made it possible to find minimal dependency lengths for sentences from the English Penn Treebank WSJ and German NE-GRA corpora. The results show that for both lan-guages, using surface dependencies and deep de-pendencies lead to generally similar conclusions, but that minimal lengths for deep dependencies are consistently slightly higher for English and slightly lower for German. This may be because German has many more crossing dependencies than English. Another finding is that the difference between aver-age sentence DL does not change much between op-timizing for the projectivity constraint and the two-cluster constraint: projectivity seems to give nat-ural language almost all the flexibility it needs to minimize DL. For both languages, the observed lin-earization is much closer in DL to optimal lineariza-tions than to random linearizations; but crucially, we see that English is closer to the optimal linearization and farther from random linearization than German. This finding is resonant with the fact that German has richer morphology and overall greater variability in observed word order, and with psycholinguistic results suggesting that dependencies of greater lin-ear distance do not always pose the same increased processing load in German sentence comprehension as they do in English (Konieczny, 2000). Chung, F. R. K. (1984). On optimal linear arrange-ments of trees. Computers and Mathematics with Applications , 10:43 X 60.
 Collins, M. (1999). Head-Driven Statistical Models for Natural Language Parsing . PhD thesis, Uni-versity of Pennsylvania.
 Gibson, E. (1998). Linguistic complexity: Locality of syntactic dependencies. Cognition , 68:1 X 76. Gildea, D. and Temperley, D. (2007). Optimizing grammars for minimum dependency length. In Proceedings of ACL .
 Hawkins, J. A. (1994). A Performance Theory of Order and Constituency . Cambridge.
 Hawkins, J. A. (2004). Efficiency and Complexity in Grammars . Oxford University Press.
 Jaeger, T. F. (2006). Redundancy and Syntactic Re-duction in Spontaneous Speech . PhD thesis, Stan-ford University, Stanford, CA.
 Joshi, A. K. (1985). How much context-sensitivity is necessary for characterizing structural descrip-tions  X  Tree Adjoining Grammars. In Dowty,
D., Karttunen, L., and Zwicky, A., editors, Nat-ural Language Processing  X  Theoretical, Com-putational, and Psychological Perspectives . Cam-bridge.
 Joshi, A. K., Levy, L. S., and Takahashi, M. (1975). Tree adjunct grammars. Journal of Computer and System Sciences , 10(1).
 Kobele, G. M. (2006). Generating Copies: An inves-tigation into Structural Identity in Language and Grammar . PhD thesis, UCLA.
 Konieczny, L. (2000). Locality and parsing com-plexity. Journal of Psycholinguistic Research , 29(6):627 X 645.
 Kruijff, G.-J. M. and Vasishth, S. (2003). Quantify-ing word order freedom in natural language: Im-plications for sentence processing. Proceedings of the Architectures and Mechanisms for Language Processing conference.
 Kuhlmann, M. (2007). Dependency Structures and
Lexicalized Grammars . PhD thesis, Saarland Uni-versity.
 Kuhlmann, M. and M  X  ohl, M. (2007). Mildly context-sensitive dependency languages. In Pro-ceedings of ACL .
 Kuhlmann, M. and Nivre, J. (2006). Mildly non-projective dependency structures. In Proceedings of COLING/ACL .
 Levy, R. and Manning, C. (2004). Deep depen-dencies from context-free statistical parsers: cor-recting the surface dependency approximation. In Proceedings of ACL .
 McDonald, R., Crammer, K., and Pereira, F. (2005a). Online large-margin training of depen-dency parsers. In Proceedings of ACL .
 McDonald, R., Pereira, F., Ribarov, K., and Haji X  c,
J. (2005b). Non-projective dependency parsing using spanning tree algorithms. In Proceedings of ACL .
 Miller, P. (2000). Strong Generative Capacity: The Semantics of Linguistic Formalism . Cambridge. Pollard, C. (1984). Generalized Phrase Structure
Grammars, Head Grammars, and Natural Lan-guages . PhD thesis, Stanford.
 Vijay-Shanker, K., Weir, D. J., and Joshi, A. K. (1987). Characterizing structural descriptions produced by various grammatical formalisms. In
Proceedings of ACL .
