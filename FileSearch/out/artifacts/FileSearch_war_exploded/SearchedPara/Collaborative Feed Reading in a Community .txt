 Feed readers have emerged as one of the salient applications that characterize Web 2.0. Lately, some of the available readers introduced social features, analogously to other Web 2.0 applications, such as recommendations and tagging. Yet, most of the readers lack collaborative features, such as the ability to share feeds in a community or divide the reading task among community members. In this paper we describe CoffeeReader , a web-based feed reader, which combines social and collaborative features, and is deployed in a small community within our company. CoffeeReader provides awareness of other users' feed lists and read status; it enables information sharing such as tags and recommendations; and aims to support coordination of filtering through feeds to locate important items. We compare these group collaboration features of CoffeeReader with emerging features in publicly available feed readers; present the outcomes of using CoffeeReader within our community; and discuss our findings and their implications on making feed readers more collaborative. H.5.3 Group and Organization Interfaces  X  Computer-supported cooperative work . H.4.3 Communications Applications  X  Information browsers . Design, Human Factors, Measurements. RSS reader, feed reader, feed aggregator, social software, social media, collaboration. In recent years, people are exposed to a growing volume of online information that can hardly be processed, let alone absorbed, by any person singly. Many Web 2.0 applications handle this problem by providing means for filtering the information and by sharing among the crowd, usually by the use of tags, rankings, comments, and recommendations. One prominent example of a Web 2.0 application is a feed reader , also known as RSS reader or feed aggregator , which is usually based on Really Simple Syndication (RSS) [12] or Atom [1] standards. A feed reader provides a customized aggregation of syndicated web content from various sources into a single client, for easy viewing, which  X  X ushes X  to the user information of interest, rather than the user having to poll different sites for updates. Despite the fact that feed readers proliferate, little research has been done in this space. NectaRSS[13] and Gruhl et al. [8] examined several algorithms to filter and prioritize feed items based on user profiles. RELEVANT News [3] and Wang et al. [15] suggested different ways to cluster feeds according to their semantic similarity. Even less research has been conducted to explore the usage of feed readers. An initial study is presented in [9]. They found that feed subscription and feed popularity roughly follow a Zipf distribution. As they suggest, there are users that subscribe to more than 100 feeds and are thus exposed to the problem of information overload, which readers have originally aimed to resolve. We claim that readers should be enhanced with group collaboration features that provide awareness, sharing, and coordination, to allow users to even better cope with information discovery and overload. This is the goal of CoffeeReader, a web-based feed reader for a community. Another tool that supports community feed reading is ScienceSifter [4], where the community defines a list of feeds that are of interest to all members, and browse them in a shared space. Unlike ScienceSifter, CoffeeReader supports both individual and community feed reading in one place; thus allowing its users to not only  X  X ree ride X  the community, but also enjoy the personal touch of their own social network of people they know and trust. Our first goal in developing CoffeeReader was to assist in collaborative community coverage of shared feeds. By allowing the users to expose their feed list and reading habits we aimed at transforming the individual experience of feed reading into a more collaborative one, harnessing the power of the community to ensure users spend less time on the irrelevant items, while not missing out on the important ones. CoffeeReader was deployed in a small community within a corporate environment in order to inspect the effect of its social and collaborative features. Our main contributions are: (1) The effect of using social features in feed readers is studied for the first time; (2) We introduce collaborative features to feed reading and bring them to the awareness of the community; (3) We reflect upon the results of a preliminary study and come up with design recommendations for future feed readers. CoffeeReader was developed with the aim to provide a feed reading experience in a community, where people are familiar with each other's interests, so they know when an item is of interest; where trust already exists, so people can be trusted to let others know of the item; and where intimacy is achieved, so people are willing to share most of their reading habits. This scenario is relevant either among close friends or in a professional setting where reading habits are around a shared domain. Our goal is to allow the community to share reading tasks and reduce the load from individuals. CoffeeReader is based on Gregarious [6], an open-source feed aggregator for the individual user that we enhanced to support a community of users. Similarly to common feed readers, CoffeeReader provides the basic functions required including (1) subscription management, such as adding and removing feeds and arranging feeds in folders; (2) reading management such as automatically bringing the latest new items and clearly showing what items have been read. The CoffeeReader main page can be seen in Figure 1. The features that distinguish CoffeeReader from other feed readers are its social and collaborative features. Social features (characterizing Web 2.0) are those that facilitate awareness and free riding, while collaborative features support coordination for a shared goal. In a small community that has a shared goal these terms become synonymous and we thus treat them as if they are the same. An activity buzz , as can be seen in Figure 1 (a) : most read items, recently added feeds, top recommenders, and a short glance of recent actions of community members. The goal of the buzz is to create a sense of community, encourage discussing commonly read items, and support serendipity. Tagging : enables to tag an item and see how others tagged it. A tag cloud per user is presented, creating a profile of the user's reading interests. In plan is a tag cloud per feed, to collaboratively create a glance summary of feed content over time. Tagging is a method used by some other feed readers (e.g. [5]). Recommendations : an inline widget enables to recommend an item to others through email, see Figure 1 (b) . This feature is common in most feed readers ([2], [5], [7], [11], [14]) and enables to send a recommendation to people in the community or outside. The acquaintance and trust of a small community make recommendations even more useful, helping users to ensure coverage of important items. List of readers per item : each feed item title is decorated with the number of users that have already read it. Hovering over the number reveals the full list of readers; see Figure 1 (c) . Presenting the readers of an item before the user reads it serves for social navigation: in some cases it can attract the user to read the item as well; in others it may spare the user from reading the item, knowing that had it been an important item, it would have been recommended. from this feed, and coverage level  X  by each user and by the community as a whole. Coverage of a feed is calculated by measuring the number of items read out of the total items posted. Exploring the feed statistics page can have different effects: users may decide to remove a feed that is apparently not followed by them, or adopt a feed that is highly covered by others; alternatively users may decide to change their reading habits when discovering that an important feed is not well covered by the community. This unique combination of social and collaborative features creates a community environment that helps reducing information overload from users and makes their reading more effective. On one hand, they may rely on each other for filtering through numerous irrelevant items; on the other hand, by recommendations and collaborative coverage they may ensure they do not miss important items. CoffeeReader was deployed in a small research community within our organization for about nine months. There are 11 members in this community of which six are highly active (daily), making CoffeeReader their main reader. To avoid noisy data, we focus on these six members. We note that their data includes over 95% of the overall user activity in CoffeeReader during the nine month period. In order to investigate user behavior in the community, we collected user activity information both in logs and in the CoffeeReader repository. We also conducted short interviews with the users. The interviews included 10 randomly ordered questions and lasted about 10 minutes. On average, each member is subscribed to 50 feeds (std: 26, median: 58), arranged in six folders (std: 2, med: 6). Only 14.5% of the feeds are private, indicating an openness among community members. On average, users read about 30% of the items they are subscribed to (std: 16, med: 22). We found that on average users explicitly ignore 36% of the items (std: 21.5, med: 37). By explicitly ignore we refer to items that were manually  X  X arked as read X  or items that were only glanced through (for less than three seconds  X  a reasonable time to read the title and decide whether to read its content or not). Feeds with more subscribers have a lower rate of explicit ignore, which is expected as more subscribers suggest that these feeds are more interesting. Our findings suggest no correlation between feeds X  update frequency and coverage, showing that collaborative reading is relevant in all cases, not just for highly updated feeds. In order to examine our main claim, that enhancing readers with group collaboration features allows users to better cope with information discovery and overload, we set out to understand how CoffeeReader impacted basic facets of group collaboration: awareness, sharing, and coordination. CoffeeReader suggests several features for awareness: list of readers per item, activity buzz, publicly viewable subscriptions, and feed statistics. Exploring the list of readers per item turned out to be the most frequently used feature. We found that on average each user does that 2.6 times a day (std: 0.73, med: 2.8). Interviews indicate that users almost always look at the number of readers, peeking into the list mostly out of curiosity, or to avoid recommending an item to someone who already read it. Users look at the buzz at least every time they log in, and find the list of users X  latest actions as most useful (this was the most clicked part of the buzz). One user explained:  X  users X  latest actions are most beneficial to me, letting me know 'I'm not alone', serving as social glue, to talk about what they read when we next meet  X . Users only click on an item in the buzz if they see a very interesting title. These clicks indicate the contribution of the buzz to serendipity. Viewing other users' subscriptions turned out to be an activity mostly performed when first joining CoffeeReader . This was a part of users'  X  X etup X  process in order to adopt subscriptions from their peers. This finding is important as it increases the stickiness of the tool and the community. Newcomers have a welcoming first experience in which they get to know the community and easily create their initial set of feeds. However, in the long run users rarely view their peers X  feed lists. Through interviews we learned that people felt the information was not handy enough: one user said  X  X  X  X  usually overwhelmed by the amount of my own posts, so am never curious enough to look up another person X  . This observation indicates the potential need to provide better awareness to other users X  feeds. A somewhat similar result was observed regarding the feed statistics page . The level of its usage was rather low, though interviews indicated users find it useful. Our conclusion, here too, is that feed statistics should be more tightly integrated into the flow of everyday feed reading. Examining the awareness features, there appears to be a tension between two motivations that are working against each other: the first is to take advantage of the awareness to others X  activities in order to obtain greater coverage while spending less individual time on reading items that have already been read; the second is to read what others have read in order to  X  X e on the same page X  and be able to discuss it. This tension implies that raising awareness to what has been read does not necessarily imply relieving users of the need to read; nevertheless it increases the sense of community and commitment to cover and recommend. Two CoffeeReader features support explicit information sharing: recommendations and tags. The Recommendations feature is the second most frequently used. Each community member sends one recommendation a week on average; a recommendation is sent to a mean of 1.8 people, who belong to the community in 82% of the cases. From the interviews we learned that users send recommendations that are mostly work related, and that they almost always follow the ones they receive. One user commented that  X  it saved me the need to go through entire feeds as I knew others are covering them, even if partially. They also allow me to more comfortably avoid reading (e.g. when abroad or on vacation), as I know I X  X l at least get some highlights  X . Tags are rarely used in CoffeeReader . Typically, in social bookmarking systems [10], tagging is motivated by egocentric reasons, allowing users to categorize URLs according to personal interpretation. Exposing tags to all creates a folksonomy and facilitates information discovery and filtering. For feed reading, the dynamic and transient nature of items makes them less relevant for tagging. Several users said that they use bookmarks rather than item tagging if they find an item that is worth keeping for future reference. Yet, some users testified that they see a different usage for tags when reading in a small community  X  they would tag not for egocentric reasons, but for assisting their peers through this explicit information sharing activity. CoffeeReader does not yet support explicit coordination features such as dividing reading tasks among users. Yet, being aware of the community activities and being able to share information about what is read, already facilitate implicit coordination and supports cooperative coverage. To explore this, we inspected the feeds that are shared by the community, i.e., are subscribed by more than one user. Figure 2 presents the community coverage of feeds vs. the average coverage of feeds by individuals with respect to the number of subscribers to a feed. The triangular points indicate the number of feeds in each group. For example, 8% of the feeds (11) are shared between three community members. Collaboratively, these feeds are 65% covered. Feeds are significantly (p&lt;0.05) better covered by the community than by individual users in all cases. While a community obviously reads a larger number of items, this does not necessarily imply that it reads more distinct items, thus this finding is not trivial even if expected. We find this encouraging and believe that once we support explicit coordination, coverage will increase even further. We present CoffeeReader , a collaborative feed reader which combines social and collaborative features, with awareness of others' readings, sharing of information, and initial facilitation of feed coverage coordination. We examine its usage within a small organizational community for a period of nine months, through usage statistics and interviews. Our study sheds light on the advantages of collaborative features added to a feed reader, potentially relieving users of the need to singly filter through the large amount of irrelevant items, and allowing them to better focus on the items that are relevant to them as individuals and as a community. Reading awareness and recommendations were found to be the most useful features, while others, like tags, were sometimes used in a surprising manner. In cases where our features did not prove to be as effective as expected (e.g., the feed statistics), we discuss the reasons and suggest design alternatives. Our work lays the foundation for transferring feed reading from an egocentric experience to one that takes advantage of the community power. This shift from a user-centric paradigm to a community-centric one may apply to other social software applications beyond feed reading. We thank Elad Shahar for the original idea of creating a collaborative feed reader and Eyal Sonsino for implementing the first prototype. 
