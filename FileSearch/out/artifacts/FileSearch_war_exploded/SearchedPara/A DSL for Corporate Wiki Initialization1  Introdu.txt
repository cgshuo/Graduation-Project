 Wiki X  X  pioneer, Ward Cunningham, defines wikis as "the simplest online database that could possibly work X  X 4]. Nowadays, wikis are becoming a favourite approach for collaborative knowledge formation and knowledge sharing [12]. So far, most studies are conducted for public-access wikis or wikis for supporting learning activities [13]. However, companies are increasingly realizing the benefits of wikis [3]. Indeed, the Intranet 2.0 Global Survey reports that around 47% of the respondent companies were somehow using wikis [10]. Based on these figures, we can expect an increasing adoption of wikis among companies.

As any other Information System, the interplay of technology, work practice, and organization is paramount to achieve successful wiki deployments. Therefore, we can expect differences when wikis are deployed to sustain open communities (e.g., Wikipedia ), offered within a learning organization [13] or are deployed at a company [8]. The peculiarities of each organization will certainly percolate the wiki itself. Indeed, unlike other se ttings, companies provide an existing infrastructure that frames the wiki. Users, roles, permissions, terminology, documents, templates or project milest ones are already ther ebeforethewikiis created. This is not the ca se (or at least not to the sa me extent) in open-access wikis (e.g., Wikipedia ) where the community originates around the wiki itself. Educational settings sit in-between since they offer some pre-existing context but with less demanding constraints than companies.

Consequently, our premise is that, unlike other environments, corporations have all, personal organigrams, documentation practices and task schedules that frame both wiki users and wiki editing. The term  X  X iki scaffolding X  is introduced to denote a wiki installation where some categories, templates, permissions, etc are initialized at the outset to mimic the corporate background. This includes structural concerns (e.g., how are wiki pages arranged along which categories), communication means (who is going to be notified of what), permission needs (e.g., who is allowed to do what), etc. So far, this background is patiently replicated by wiki users t hat, in some cases, are forced to go down to code.

Wiki scaffolding implies not only being knowledgeable about the wiki engine (e.g., MediaWiki ) but also installing third-party extensions. This can certainly discourage users. Lawyer, architects, medical doctors are all profiting from wikis. Hence, our aim is for wiki scaffolding to be made accessible to non technical people ( who ) that collaboratively agree ( how ) on a blueprint for the wiki ( what ). To this end, we propose the use of a Domain Specific Language (DSL). DSLs are reckoned to enhance the quality, productivity, maintainability and portability while permitting domain experts understand, validate and develop the DSL programs themselves [7]. Additionally, collaboration and easy sharing can be promoted by using a graphical DSL (as opposed to a textual DSL ). Specifically, the collaborative mandate suggests capitalizing on existing tools for supporting brainstorming. A common way of recording and expressing brainstorming sessions are mind maps . A mindmap is a diagram to express ideas around a central topic. Now, this central topic is  X  X iki scaffolding X , and mindmaps constructs are reinterpreted to denote scaffolding concerns.
This paper presents the Wiki Scaffolding Language (WSL) (pronounced  X  X histle X ). WSL is built on top of FreeMind [1], a popular, open source tool to create mindmaps. Hence, WSL expressions are mindmaps. Our bet is that users might already been exposed to mindmaps and even to FreeMind , hence reducing the learning curve for WSL . These maps (i.e., WSL expressions) are then compiled into a set of MediaWiki directives whose execution generates the wiki scaffold. MediaWiki is one of the most popular wiki engines [2].
This paper is organized along the design and use of WSL : WSL analysis (Section 2), WSL design (Section 3), WSL realization (Section 4), WSL verification (Section 5) and WSL enactment (Section 6). Discussion through related work is presented in Section 7 . Some conclusions 8 end the paper. This section identifies the scope and main abstractions behind Wiki Scaffolding (WS). The aim is to capture the company X  X  work practice and settings as long as their impact on wiki operation. A main outcome of this analysis is a feature diagram that describes the commonalities and variabilities of domain concepts and their interdependencies [6]. Fig. 1 depicts the feature diagram for WS. The diagram states that a WS expression captures the company settings in terms of existing documentation practices, c ommunication means, restrictions, the existing organigram and finally, presentation concerns. Next paragraphs delve into these notions.
 Documentation Setting. A common problem for open communities is that of fixing a common terminology and understanding. This is easier in the case of corporate wikis where glossaries , documentation guidelines or even, some content might already exists. Th is setting needs to be captured in wiki terms. A basic classification of wiki pages is that of  X  X rticles X ,  X  X ategories X  and  X  X emplates X  . Articles stand for the content that is progressively and socially edited. Next, categories are commonly use d as tags to easily locate, organize and navigate among articles. Glossaries can help to identify initial wiki categories. Finally, templates provide content to be embedded in other pages. Through parameterization, they permit to reuse and ensure a formatted content along distinct pages. Corporate guidelines can then be re-interpreted as wiki templates that guide article editing.

Fig. 1 depicts  X  X lossary X  ,  X  X ontent X  and  X  X uideline X  as three features of the company X  X  documentation setting that can impact the wiki Moreover, wikis frequently support living projects where project milestones might need to be accounted for by the wiki. This does not apply to other settings where content is the result of free-willing participation and hence, contribution is not tight to pressing schedules. Wiki wise, this implies that  X  X vent X  is a semantically meaningful piece of data, and so should it be markuped and rendered (e.g., through a calendar).
 Communication Setting. Wikis are an effective mechanism to support knowl-edge building through collaboration. This implies the existence of coordination and conflict resolution strategies. When wikis are deployed in an existing organization, wikis become an additional means that should be integrated with existing communication channels. This poses a range of questions: who is going to be notified of what? Does the existing organizational structure need to be mirrored in the wiki? How is currently achieved such communication? Is email/phone/chatting used for this purpose?
Wiki wise, communication can be interna l or external. Internal communication is achieved within the wiki. At this respect, two mechanisms are considered:  X  X iscussion pages X  and  X  X emplates X  . Discussion pages (a.k.a.  X  X alk X  pages in MediaWiki ) can be used for discussion and communicating with other users. In this way, discussions are kept aside from the content of the associated page. Templates have also been identified as effective means to deliver fixed messages (e.g., warnings, to-do reminders, etc). On the other hand, external communication refers to the ability to notify wiki changes outside the wiki itself (e.g., through  X  RSS feeds  X  any rss client can be used).
 Organigram Setting. Companies tend to be organized somehow, what is indicated with the distinct  X  X oles X  that the  X  X mployees X  adopt in projects. Restriction Setting. Unlike public-access wikis, cor porate wikis normally limit access to employees. Permissions are coun terintuitive in a wiki setting where openness is a hallmark. Indeed, MediaWiki natively supports a basic mechanism where the scope of permissions is the whol e wiki: you can either edit the whole set of wiki pages or not (e.g., anonymous users cannot read pages). By default, wiki pages can be freely operated. However, permission demands are more stringent in a company setting. Indeed, a study on the use of wikis in the enterprise reports that  X  X ower relationships and competit ion between stakeholders created a need to read access in the ResearchWiki X  [5]. F or the time being, t wo permissions are considered:  X  X ead X  and  X  X dit X  . Additional permissions could be added in future releases if feedback so advises 1 .
 Presentation Setting. Most companies project a unified image in terms of rendering and presentation. Wikis resort to  X  X kins X  2 for rendering. These skins are engine specific. However, we do not expect our target audience to know about skins. We should strive to capture presentation concerns in abstract terms, better said, through domain criter ia that could later be used by the DSL engine to determine the most appropriate skin. Specifically, we consider  X  X ikiSize X  and  X  X ikiEditFreq X  . Based on the expected size an d edit frequency of the wiki, heuristics can make an educated guess about the wiki skin. In this way, the DSL engine frees stakeholders from being knowledgeable about presentation issues, offering good-enough outputs. Notice that the wiki administrator can latter change this automatically-selected skin. Additionally, the  X  X ogo X  and  X  X idebar X  features are introduced for customizing both headers and index panes which are available for speeding up wiki access. The aforementioned concerns are now captured through a DSL . DSL design implies first to set the abstract syntax, and next, select one of the possible concrete syntaxes [11]. Based on the feature diagram, the abstract syntax describes the concepts of the language, the relationships among them, and the structuring rules that constrain the model elements and their combinations in order to respect the domain rules. This is expressed as the DSL metamodel. Fig. 2 depicts the abstract syntax for WSL .A scaffolding model includes four main model classes, namely: (1) The Content class, which is a graph described along Items and Links . Items capture the different kinds of data existing in the company that need to be also available at wiki inception. As identified in section 2, this content includes glossary terms (  X  X ategory X  itemType ), content ready to be available as a wiki article (  X  X rticle X  itemType ), guides for content structure (  X  X emplate X  itemType )or events to capture scheduling milestones (  X  X vent X  itemType ). Next, Links relate these Items together. Links are also typed based on the type of the related items :  X  X elatedWith X  link (a general item -to-item association) ;  X  X elongsTo X  link (to associate a category to an item);  X  X emplatedBy X  link (to associate a template to an item );  X  X cheduledFor X  link (to associate an event to an item ). Items also hold three boolean properties: discussion (to indicate whether this item is subject to discussion), rssFeed (to specify the availability of a feed subscription for this item )and indexPaneEntry (to capture that the item is to be indexed in the sidebar). (2) The Organigram class, which captures a basic arrangement of Employ-ees in terms of Roles .
 (3) The Restriction class, which binds together three elements: a permission subject (i.e., an Item ), a permission grantee (i.e., a Role )anda denial (i.e.,  X  X ead X  and  X  X dit X  ). (4) The Presentation class, which holds properties to guide the rendering of the wiki. Specifically, index requirements are captured through four common indexing schemas: toolboxPane (entries include  X  X hat links here X ,  X  X pload file X ,  X  X rintable version X  , etc), navigationPane (entries include  X  X ecent changes X ,  X  X elp X   X  X ain page X  , etc), indexPane (where entries are set by the designer through the Item  X  X  indexPaneEntry attribute), and searchPane (as a search facility to locate articles based on content). The logo is also captured here.

Next, this abstract syntax is realized through a concrete syntax. This implies a mapping between the metamod el concepts and their textual or visual representation. Preliminary feedback indicates that a visual syntax would be more suitable. The user profile (i.e., domain experts) as well as the collaboratively way of obtaining the wiki blueprint, advise to go for a visual DSL. Rather than developing our own visual language, we decide to capitalize on an existing one: FreeMind . With over 6,000 daily downloads, FreeMind is one of the most popular tools for mindmap drawing. Fig. 3 shows a snapshot of a FreeMind map. The main advantage of this tool is the easiness to play around to capture your mental model (e.g., nodes, and their descendants, can be easily moved around; branches can be collapsed, etc). This decision not only speeds up development but, more importantly, it will hopefully facilitate WSL adoption among end users. Next section introduces WSL as a visual language on top of FreeMind . WSL is a visual language on top of FreeMind .Thatis,a WSL expression is a compliant FreeMind map. However, the opposite does not hold. Some maps might not deliver a compliant wiki scaffolding, where compliance is determined by the abstract syntax in fig. 2. Therefore, WSL maps are a subset of FreeMind maps. FreeMind maps are internally represented as XML files along an XML schema . On top of it, WSL imposes an additional set of constraints that ensures that maps account for compliant scaffoldings (i.e., conform to the WSL abstract syntax). Before delving into how WSL constructs are mapped into FreeMind elements, next subsection introduces an example. 4.1 WSL Example Consider the use of wikis to support software projects. The scattering of stakeholders, the need for collaboration and tracking, and the iterative manners that characterize software projects make wikis an attractive platform [9]. Fig. 3 provides an example for the Purchase Project as a WSL mindmap.

FreeMind depicts ideas and their relationships as nodes and edges that follow a radial distribution. In our example, the Organigram branch captures the existing roles as well as the employees assigned to these roles. The Restriction branch lists limitations in terms of wiki operations. The Event branch captures two milestones attached to pages  X  X equirement analysis X  and  X  X oftware desiNG X  at the onset. Next, the company already has some guidelines to capture use cases and document deliverables. Such practices should also be adhered to when in the wiki. The Template branch refers to two such guidelines through the  X  X seCaseTemplate X  node and the  X  X eliverableGuidelines X  node. The Presentation branch will impact on the rendering of the wiki based on the expected  X  X ikiSize X  and  X  X ikiEditingFreq X . A X  traffic light  X  X con is used to indicate the three possible values of these properties: large (red light), medium (yellow light) and small (green light). As for the sidebar, this node includes a navigation pane (denoted by the  X  list  X  X con ) and a search pane (denote by the  X  magnifier  X  X con ). The sidebar is finally completed with an index pane (denoted by the  X  X ook here X  icon on categories  X  X se Cases X  ,  X  X est X  ,etc). Regarding to restrictions,  X  X riority X  icon sets a restriction whereby  X  X oders X  (i.e., the role) are restricted from reading (i.e., the denial) the article  X  X ustomer class diagram X  (i.e., the item). As for the corporate glossary, common terms already in use include  X  X se Cases X ,  X  X unctional Test X ,  X  X ompatibility Test X  etc. These terms find their way as wiki categories. Hierarchical relationships among categories are captured by describing a category as a child of the parent category (e.g.,  X  X est X   X   X  X unctional Test X  ). Wiki articles are denoted as bubbled nodes (e.g.,  X  X equirements analysis X  stands for an article which is categorised as  X  X eliverable X  ). The title of a node behaves as an identifier, so that two FreeMind nodes placed differently but with the very same title, stand for the same notion. This permits the Content graph to be flattened as a FreeMind tree.

It can look odd to introduce articles at wiki inception since wiki X  X  raison d X  X tre is precisely collaborative article e diting. Indeed, we do not expect too many articles to be introduced at scaff olding time. However, the need to come up with some articles might be known from the very beginning. The scaffolding permits so by introducing a node whose title becomes the title of the wiki article. For instance, the node  X  X oftware design X  yields a wiki article with the namesake title. Even more, some relationships might be known at the outset. For instance, trace requirements made advisable to keep a hyperlink between the  X  X urchase entry test X  and the  X  X urchase entry UC X  . This is depicted as an arrow between the node counterparts.

Based on preliminary user feedback, we also consider article content to be known at scaffolding time. This is realized as a child of the given article (together with the  X  X nfo X  icon ). Fig. 3 illustrates the two options. The content of  X  X urchase entry test X  is explicitly provided as the text of its child node. By contrast, the content of  X  X urchase rejection test X  is already available at the company as a Word document. FreeMind permits to introduce hyperlinks as node content (denoted through a small red arrow). This facility is used to our advantage to link  X  X urchase rejection test X  to the external document holding its content. Likewise, corporate guidelin es can find their way as wiki templates. So far, WSL only supports Word documents (exported as XML ). At deployment time (i.e., when the WSL map is enacted), these exter nal documents are turned into either, article content or wiki templ ates. Fig. 6 provides a screenshot of the main page as generated by the WSL engine. The rest of this section provides a detail account of WSL expressivity. 4.2 WSL Concrete Syntax WSL abstract syntax is realized as a graphical concrete syntax. A mapping is then set between elements of the abstrac t syntax and their visual counterparts in FreeMind . These  X  X isual counterparts X  are set by the FreeMind metamodel. Therefore, a set of mappings between elements of the WSL metamodel and elements of the FreeMind metamodel is realized. Additionally, some constraints need to restrict the expressiveness of FreeMind to result in valid  X  X caffolding maps X  (i.e., compliant with the WSL metamodel).

FreeMind metamodel (see fig. 4). A Map is a compound of Nodes .Nodes have a title and might hold a link to an external document (local or remote) as well as a set of properties mainly referri ng to rendering concerns. For instance, the Style property can be fork and bubble and determines the look of the node as a tagged line tag or a bubble, respectively. Next, nodes are basically arranged in a tree-like way. A central node serves as the common root. Tree structures are constructed using Edges . An Edge is a connector that relates a node with its parent node. Additionally, Arrowlinks are also connectors but in this case, the connection is between tw o arbitrary nodes. Finally, Icons 3 and Fonts can be associated with nodes in an attempt to reflect the underlying semantics of the node. Of course, this semantics resides in the users X  head.
 WSL-to-FreeMind mapping (see Table 1, first two columns). Once FreeMind visual symbols are introduced, the next step is to indicate a mapping between the WSL abstract syntax and these symbols:  X  Scaffolding class. The root node is the FreeMind counterpart of this class.  X  Organigram class. A bubble node with title  X  X rganigram X  denotes the origin  X  Presentation class. A bubble node with title  X  X resentation X  denotes this  X  Restriction class. A bubble node with title  X  X estriction X  denotes this class. A  X  Content class. There is not a FreeMind counterpart for the Content class as  X  Item class. Items are typed as  X  X ategory X ,  X  X rticle X ,  X  X emplate X  and  X  X vent X  .  X  Link class. Links are classified as relatedWith , belongsTo , templatedBy and WSL maps are a subset of FreeMind maps, i.e., WSL metamodel imposes additional constraints on top of the FreeMind metamodel. Such constraints can be verified on user request or at d eployment time. Fig. 5 provides a snapshot of the  X  X ools X  menu now extended to address WSL maps : X  X SL configuration X  permits to configure parameters for the MediaWiki installation;  X  X SL deployment X  causes the generation of t he wiki instance from the WSL specification;  X  X SL Skeleton X  provides a FreeMind mapwiththebasic WSL nodes (e.g., Organigram , Restriction ,etc)sothatmisspellsareprevented;and finally,  X  X SL Map Checking X  triggers WSL map verification.
 Fig. 5 depicts the verification outcome for our sample problem (see fig. 3). Messages can be warnings and errors. For our sample, two warnings are noted. One informs about the lack of the optional Presentation node which, in this example, is due to a misspelling (  X  X resentationnn X  ). The other warning notifies about a common mistake in wiki construction: setting a relatedWith relationship between an article and a category. This is an odd situation that could be mistaken with the belongsTo relationship, and so is it indicated. As for errors, they prevent the wiki from being generated. For our sample case, these errors include: a misspelling of an event date (e.g.,  X 01/19/2011 X  ); referring to a non-existent node (e.g.,  X  X oftware desiNG X  ); partial definition of a restriction where either the denial, the employee or the article is missing (e.g., restriction ); unsupported document extension (e.g., extension  X  X MK X  is not supported; so far, only XML and TXT files can become page content).
 By selecting the  X  X SL deployment X  option of the Tool menu (see fig. 5), the current map is turned into a wiki installation in MediaWiki . This means that around 400 LOC (mainly SQL statements) are auto matically generated for the current example. Figs. 6 and 7 provides three screenshots of the gener-ated pages: the main page (illustrating the use of the CategoryTree and Calen-dar extensions), the  X  X urchase rejection Test X  article page (which is obtained from a Word XML document) and the  X  X urchase Rejection UC X  (which follows the  X  X seCaseTemplate X  also externally obtained). Space limitations prevent us from giving a detail account of this generation process. For the purpose of this paper, it is enough to show the mapping between FreeMind constructs and MediaWiki primitives. The last two columns in Table 1 indicates such mappings.

It is important to notice that some scaffolding features require additional MediaWiki extensions (e.g., Category-Tree ). The WSL engine builds upon MediaWiki version 1.16 and the exten-sions have been tested against it. Such composition is provided as a unit by WSL . This raises the issue of platform evolution, i.e., new versions of MediaWiki (or its extensions) might impact the WSL engine. This is certainly true. But, how real is this threat? First, MediaWiki is a stable platform backed by thousands of installations. And second, wikis can be upgraded once deployed. That is, WSL can be used to generate the wiki scaffold, and next, the user can upgrade to the newest version (just two clicks away). This makes us confident about the lifespan of WSL . Mindmaps have long been recognized as a useful technique for brainstorming. Recently, enhancements have been pr oposed to improve the efficacy of mind maps (e.g., use of pictorial stimuli [14]). Although benefits are reported, these extensions decrease simplicity, and jeopardize interoperability. There certainly exists more sophisticated tools for brainstorming than FreeMind, but we value popularity, simplicity and cost as main selection criteria.

Another important remark is that of scalability. Although it is not the aim of scaffolding to offer a complete wiki map but just a blueprint, large projects can require large scaffoldings. This can lead to cluttered WSL maps. Fortunately, FreeMind offer view-like mechanisms that p ermit to filter map nodes based on content and relationships. Testing stakeholders can filter those nodes based on containing the string  X  X est X  , whereas template-minded stakeholders can restrict the view to those nodes related with a template.

As for visual DSLs, they are still scarce compare with textual DSL ([11] for an overview). Our insight here is that the context where the DSL is to be deployed is generally overlooked in DSL publications. Our experience is that DSL success not only depends on finding the right abstractions but also on producing minimum disturbance to existing practices. FreeMind was chosen on these grounds. We introduced the notion of  X  X iki scaffolding X  as a way to capture the contextual setting for wikis deployed in an existing organization. While wikis for virtual communities create such setting as they go along, corporate wikis know this context at the onset. We introduced a DSL for wiki scaffolding that abstracts from the technicalities that go in setti ng those parameters down to wiki code. By capitalizing on FreeMind as the conduit for WSL concrete syntax, we expect non-technical communities to benefit fr om the scaffolding. An ecdotical evidences suggest that the benefits of the DSL go beyond speeding up wiki deployment or promoting user participation. Knowledge retention is achieved by the DSL engine embedding good practices about both presentation and structure. This helps introducing wikis in organizations without wiki experience. As for the expressiveness of WSL , current constructs are based on a literature survey about the use of wikis in companies. Social conventions and incentives will emerge and evolve to guide contributors, resolve disputes and help manage wiki deployments in organizations. As these issues find support in wiki engines, WSL constructs will need to be extended.
 Acknowledgments. This work is co-supported by the Spanish Ministry of Education, and the European Social Fund under contract TIN2008-06507-C02-01/TIN (MODELINE), and Conserjer X a de Educaci X n y Ciencia of Castilla-La Mancha under contract PAC08-0160-6141 (IDONEO). Puente has a doctoral grant from the Spanish Ministry of Science &amp; Education.

