 JUAN DAVID CRUZ and C  X  ECILE BOTHOREL , Telecom -Bretagne A social network is composed of actors linked according to different types of relation-ships. However, a social network is more than only links and actors: people are defined by their profile, their motivations, the context in which they use a social networking tool; they interact, and these interactions occur in a particular context (date, location, etc.); the  X  X riendship link X  does not mean the same kind of relationship, etc.
Thus all the elements, nodes, and links in the network may have additional infor-mation depending on the social context. This nontopological information enriches the network but is still underexploited by researchers. Integrating this additional informa-tion in social networks (and media) analysis will allow further exploration and better understanding.

Wasserman and Faust [1994] define three types of variables composing a social network.  X  Structural. This information is related with the connections of each individual in the network. Measures of this variable study the nodes in a pairwise way generalizing the measure for the whole network.  X  Composition. This information is referred to the individual information of each node in the network. It is defined individually, that is, composition variables describe each actor in a particular context through the definition of a set of features.  X  Affiliation. This kind of information represents the mode of a network indicating the attachment of each node to a group, for example, a club, a school, or a community. For example, in a social network where the employees from one company exchange messages, it is possible to consider the type of projects in which each employee is in-volved. Thus, we could search communities of people who have met before and have worked on similar projects. Those communities of cooperation could be used to find experts or to create work teams in the organization. We could also consider the em-ployees X  competences and discover communities of practice. If the profiles reflect more organizational aspects, it could be interesting to compare organizational communities with the aforementioned communities of practice. The goal is to analyze from different perspectives the same real augmented network, and not to limit the analysis just to the structural perspective.

In order to provide such analysis from different perspectives, we propose a method which combines the structural information and the composition information (also called here the network X  X  semantic information). This semantic information can be divided into subsets of information: some profile variables describe professional skills, others to the past projects, teams and sports for example. We introduce the concept of point of view to consider the different perspectives of analysis involving different parts of the actors X  profile.

A point of view can be defined as a set of features which represents a state of the network under a given perspective and can be used to guide, in this case, the community detection process.

Moreover those communities divide the social network into several, functional groups, which may interact in different ways. This interaction can be performed by several nodes according to some role, which can be changed as per the selected point of view. To analyze the interactions between groups it is possible to use a graphical model somehow depicting those groups; the groups are represented as a clustered graph which contains the node and edge sets and a tree representing the inclusion hierarchy of each node. Thus, these clustered graphs contain the structure of the original graph and the partition configuration, that is, the relationships between clusters.

These kinds of graphs are useful to analyze the composition of communities, in terms of the types of nodes and other information associated to them, to analyze the structure of the partition regarding the relationships between clusters, and to find nodes with specific roles supporting the information flow at different levels within the network.
Most of the algorithms used to layout clustered graphs are designed to represent clearly each cluster as an entity far from other clusters in the graph, which helps to analyze just the composition of the clusters from a semantic perspective; however, the links between groups are not taken into account, making it difficult to study the interactions between groups and the role of the nodes in these interactions. These roles emerge from the position of a node in the network.

Thus, we propose a community detection and visualization method which uses the structure of the network as the representation of the way actors connect each other and the information associated to them and their role in the network. This method is based on the idea that the analysis of a social network can be performed from different perspectives, or points of view, according to the available social information.
The community detection model integrates the structural and the composition infor-mation to create an augmented social network and from it to identify communities, and the layout algorithm divides the nodes according to their neighborhood into two types: border nodes, which have neighbors in other and in their own community, and inner nodes, which have neighbors only in their own community.

The visualization method provides elements to identify the roles of nodes in the network. We have chosen here the role typology as defined by Cross and Parker [2004] but one may consider any other typology.  X  Central nodes have a high degree, that is, most of the information in the network passes through them.  X  Boundary spanners provide critical links between two or more communities.  X  Information brokers can be seen as experts in some domain and, for example, help to leverage expertise in a corporate network.  X  Peripheral people are those persons who do not interact with other groups, or who are not central regarding the configuration of the network. Into this class are located those nodes without any connection, that is, degree 0.
 These roles emerge from the position of a node in the network. Note that from one point of view a node may be a peripheral node, but from another point of view, the same node, in the same network, can be an information broker, connecting several communities and becoming more important. Our proposed model gives elements to perform these kinds of analyses.
 The article is organized as follows: some related and previous work is presented in Section 2. In Section 3 the community detection and visualization model is presented. In Section 4 analysis of the complexity of the model and some considerations on the execution time are presented. Experiments and results are presented in Section 5. Finally, in Section 6, conclusions and future work are presented. Several methods have been developed to find clusters in a graph, or which is equivalent, to find communities in a social network. In general, those methods have been defined as optimization problems where the objective function is the maximization of some quality index. The indices measure the quality of a partition C based on the number of edges within the cluster and the number of inter-cluster edges.

Gaetler [2005] and Brandes et al. [2008] define three quality indices: the coverage , which measures the weight of all the intra-cluster edges compared to the weight of all edges within the graph; the conductance , which is based on the observation that if a cluster is well connected, then a large number of edges have to be removed in order to bisect it, and the performance , which defines the quality of a given cluster based on whether a pair of nodes forming an edge belongs to the same cluster or two disconnected nodes belong to different clusters. In both cases it is said that the classification is correct. Additionally, another index, the modularity Q , proposed by Newman and Girvan [2004], compares the fraction of the edges within each cluster with the fraction of edges among clusters, that is, the intra-cluster edges, density versus the inter-cluster sparsity.

The algorithm proposed by Newman [2001] iteratively finds and removes the edge with the highest betweenness score. This process allows finding groups which are loosely connected with each other and with well-connected nodes within the group. The partition with the highest modularity gives the best partition. The main drawback of this approach is the complexity of the computation of the betweenness; the general algorithm will take O ( mn 2 )for m edges and n nodes, so its cost for huge graphs is prohibitive.

One of the most used metrics to measure the quality of a graph partition, according to Fortunato [2010], is the modularity Q proposed by Newman and Girvan [2004]. In general these approaches can find better partitions when the adjacency matrix of the graph is sparse [Fortunato 2010]. The modularity compares the fraction of the edges within each cluster with the fraction of edges among clusters, thus, a higher modularity means that the proportion of the edges falling into clusters is greater than the edges between them. However, the direct calculation of the modularity is an O ( n 2 ) operation.
To reduce the calculation time of the modularity, Blondel et al. [2008] have proposed an agglomerative algorithm to find communities. In the first step each node is assigned to one community and the initial modularity is calculated. Then, each node i is removed from its community and moved iteratively to each community. After each movement the modularity gain is calculated, and i will be assigned to the community giving the largest positive gain of Q . If no positive gain is possible, i remains in its original community. This process is applied iteratively until no further improvement can be achieved and no individual move will improve the modularity. This algorithm is executed in linear time for sparse graphs [Blondel et al. 2008].

Du et al. [2007] present an algorithm to detect communities in large-scale social networks. Their method is based on the enumeration of all the maximal cliques, that is, a complete subgraph which is not contained in any other complete subgraph. After all the maximal cliques are enumerated, they generate kernels associated to those cliques and then perform the community detection by assigning nodes to each kernel. After this, they try to optimize the modularity obtained by moving nodes accordingly. This algorithm has a complexity of O ( n 2 ), where n is the number of nodes.
Most of the classic algorithms find disjoint partitions. However, most of the social net-works from the real world may contain actors belonging to more than one community. For example, Pizzuti [2009] presents a method for detecting overlapped communities. This method uses a genetic algorithm with a fitness function which minimizes the relation between the edges within each group and the edges connecting nodes outside each group.

Lipczak and Milios [2009] propose a genetic algorithm for detecting communities. In this case, the individuals are represented as a string of groups, which is a vector of size n containing the number of items in each of the k groups. During the selection and the crossover operations, the genes are selected according to the potential improve-ment of the fitness function they may give. The fitness function, in fact, is composed of three measures: the normalized cut, proposed in Shi and Malik [2000], the modu-larity, proposed in Newman and Girvan [2004], and the silhouette width, proposed in Rousseeuw [1987]. In general, the complexity of this method is in the order of O (  X  n 2 ), where n is the number of nodes and  X  the number of iterations of the simulation.
Other clustering methods, such as Markov clustering, iterative conductance cutting, and geometric minimum spanning tree, are discussed in Brandes et al. [2008], and some methods for evaluating communities are presented in Kwak et al. [2009] and in G  X  unter and Bunke [2003].

The previous methods only consider topological properties of the social network. The closest related work is that of Zhou et al. [2009], who present a community detection approach using structural and attribute similarities. They use a random walk through-out a predefined set of k clusters, and try to maximize the distance between clusters by moving nodes according to their similarity. First, they create an augmented graph from the node attributes, then they execute the random walk over the transition matrix generated by the augmented graph. This leads them to find k groups of semantically close nodes. To measure the clustering from a structural point of view, they use the density of edges within the clusters.

Our method, instead, integrates the composition information by finding first the composition categories and then changing the weights of the graph according to the semantic similarity of the nodes. This allows finding partitions keeping the community structure of the graph, based on the modularity Q . Thus, the final number of groups in the partition is defined by the algorithm and not a priori by the user. A clustered graph can be defined as a particular type of hierarchical graphs in which the distance between two nodes from different levels in the inclusion tree is one, maximum. This tree can be seen as the dendrogram derived from a hierarchical clustering process. From this definition, Eades and Feng [1997] propose a layout method to exploit this structure in a recursive way using a force-directed layout algorithm and a layered 3D visualization. First, the nodes within each community are placed in the first layer of the 3D representation using a force-directed algorithm. Then another layer is added above the first one. In this layer a circle representing each community is drawn in the centroid of the nodes placed in the previous step. This operation is repeated throughout all levels in the inclusion tree. Figure 1(a) shows an example of the final representation.
Tamassia [1987] presents an algorithm which uses rectangles to represent nodes and straight lines with right angles to represent links. This kind of layout is used also by di Giacomo et al. [2007] to present a synthetic view of Web graphs. In this case the rectangles are big enough to contain the nodes from each community, which can be problematic with huge graphs. Figure 1(b) shows an example of this representation.
Noack [2003] presents a force-directed algorithm which uses at the same time a linear model to represent the node attraction between adjacent nodes and a logarithmic model for the repulsion between nonconnected nodes. This approach does not use a clustered graph but it uses the LinLog model to find the partition while the graph is being drawn. Shen et al. [2006] use a similar approach, using the position of nodes from the graphic model to define the communities.

Li and Takatsuka [2004] adapt the visualization techniques of degree of interest and logical fisheye view to clustered graphs. With these approaches, the user focuses its attention on some fragments of the graph. Authors propose a transformation of the classic interaction techniques such as filtering and browsing for this kind of graphs. Thus, the algorithm uses the subjacent hierarchical structure to find the user X  X  points of interest and present the information in an intuitive way.

Bourqui et al. [2007] present a method to layout weighted clustered graphs. They define four constraints for graph layout algorithms.
 (1) Forbid overlapping groups to ease the groups X  detection. (2) Save the inclusion tree to visualize the hierarchy produced by the clustering (3) Use a convex polygon to contain each group. (4) Respect the weighted graph distances using energy minimization functions.
Using the clustered graph definition given by Eades and Feng [1997] and including the definition of quotient graph from Brockenauer and Cornelsen [2001], which is used to represent the nodes in each hierarchical level, they begin placing the nodes (metanodes) from the level 0 (the root of the inclusion tree), and then, placing the nodes from the subsequent levels. The initial placing occurs by setting each node position such that the distance between them is the same. This is only possible if there are at least three nodes in the level; if there are not enough nodes, they take nodes from the next level to do the operation. After all the levels have been computed, the placement refinement phase begins, using a force-directed algorithm. To ensure that the drawn nodes do not overlap, they use Voronoi cells defined by the ancestors of the previous level. Figure 2(a) shows an example of this visualization.

In general, most clustered graphs layout algorithms use general graph layout classic techniques, suited to fit into a hierarchical structure. These methods are not aimed to analyze interactions between communities, therefore, we propose an approach to differentiate nodes according to their role in the community: border nodes, connect-ing different communities, and inner nodes, connecting nodes only inside their own community.

Aligned to this perspective Ther  X  on et al. [2008] present a layout method for over-lapping groups in co-authorship networks. This method uses a modification of force-directed algorithms, modeling the attraction force between connected nodes as a spring and the repulsion force between nonconnected nodes as a gravitational force. The difference is that in this algorithm the links between nodes are not shown, drawing instead a convex hull for each group. Since this method has been conceived for over-lapping groups, those nodes belonging to several communities will be placed at the border of the group and will be drawn as pie charts, showing the affiliation percentage to each community.

Our approach places the nodes from each group in a way that allows the analysis of the interactions between communities. This placement also allows to identify and study the roles of the nodes. This approach is based on multidimensional scaling or MDS: given a set of points in a  X  -dimensional space S and a similarity matrix of each pair of points s i , s j  X  S , MDS will search, for each point, a coordinate in R 2 minimizing the difference between the similarities and the distances of the points. Thus, the set of points is the set of nodes of the graph and we define a similarity measure based on the neighborhood of each node. Details of the algorithm will be given in following sections. The model depicted in Figure 3 uses the three variables that compose a social net-work to extract nonevident information from the integration of these variables. The proposed model first integrates the structural and composition variables into an affil-iation variable that represents a partition whose groups contain well-connected and similar nodes. Then, using this partition, a layout algorithm for clustered graphs is used to analyze the results as presented in Section 1.
 Before the description of the model we want to introduce some notations which are helpful to fully understand it.

Let G ( V , E ) be an undirected graph with a set V of n nodes and a set E of m edges. e ( u ,v )  X  E is the edge between the nodes u and v , e ( u ) is the set of all edges to or from the node u .Let F  X   X  R f be a vector of f features representing the composition information of each node; and let C ={ C 1 , C 2 ,..., C k } be a partition of the set V into k i .Notethat E ( C i , C j )  X  E .

Thus, the social network is defined by S ( G , F  X  , C ), where G represents the structural variable, F  X  represents the composition variable, and C the affiliation variable.
Instead of using the whole set of features it is possible to define perspectives, or points of view, of the features, that is, analyzing the set of nodes using subsets of the features set.

Analyzing the network from different points of view allows comparing different con-figurations of the nodes, for example, different partitions produced by different features applied to the same set of nodes.
 Definition 3.1 ( PointofViewPoV F  X  ). Given a set of features F  X  , a point of view PoV F  X  is one of the p -combinations of the p elements of F  X  .

Thus, PoV F  X   X  P ( F  X  ). Note that this definition accepts the  X  and F  X  itself as points of view. In the first case, a void point of view represents the non existence of composition variables, thus the social network is taken just as a graph. In the second case, there is no restriction on the size or components of the point of view, and since F  X   X  P ( F  X  )it can be used as a point of view as well.

Definition 3.2 ( Augmented Social Network S + ). Given a social network S ( G , F  X  , C ), where G is the graph representing the structure variable, F  X  the composition vari-able, and C the affiliation variable, the augmented social network is defined as S + ( G , PoV +
As a consequence, the augmented social network can be described by different per-spectives, or contexts, allowing to perform a different analysis for each perspective. For example, the nodes can be grouped in several ways: one for each point of view, making it possible to contrast different partitions.
 Definition 3.3 ( Inner Node v  X  ). Given a group C i  X  C , a node v is an inner node of C i iff Therefore, an inner node has edges only to/from nodes in its own community. Definition 3.4 ( Border Node v + ). Given a group C i  X  C , a node v is a border node of C Therefore, a border node has at least one edge to/from a node in a different community.
Thus, the node set is divided into k + 1 subsets: k subsets V  X  i , i = 1 , 2 ,..., k containing the inner nodes from each community and one subset V + composed of border nodes from all communities.

We define now the roles that can be assigned to nodes according their position in the network.
 Definition 3.5 ( Isolated Node ). An inner node v  X  is isolated if degree ( v  X  ) &lt; 2. Thus, isolated nodes are nodes with at most one neighbor.

Definition 3.6 ( Central Node ). Given a node v , v is a central node if degree ( v ) &gt;  X  + 3  X  , where  X  is the mean node degree and  X  is the degree standard deviation.
Definition 3.7 ( Boundary Spanner Node ). Given a border node v  X  V + , v is a bound-of v and N + ( v ) is the set of neighbors of border nodes of v .

Definition 3.8 ( Broker Node ). Given a border node v  X  V + , v is a broker node if |
Hence, spanner nodes connect inner nodes with other communities, that is, they work as bridges between inner nodes and the interaction zone; on the other hand, broker nodes connect other border nodes from different communities, that is, they connect border nodes from different communities. Note that these two roles are not exclusive.
In the proposed model we need to measure the dissimilarity between nodes. This can be done by measuring the geodesic distance, which, according to Wasserman and Faust [1994], is one of the most used in the field. This distance represents the shortest path However, this measure does not provide an idea about the neighborhood of the nodes. Fortunato [2010] presents the Jaccard distance d J to measure the overlap between the neighborhood of two nodes u and v . This distance is given by
Thus, if the neighborhoods of two nodes u and v contain the same elements, the distance will be 0, that is, the nodes will be totally similar in terms of their local structure. By merging the composition and the structural information it is possible to guide the graph clustering process by adding information related to the similarity of the nodes in a real context. To do this, the community detection process is divided into two phases. During the first, the point of view is clustered using Kohonen maps [Kohonen 1997], or Self-Organizing Maps (SOM), to obtain groups based on the similarity of the node features. In general this method does not need any a priori knowledge about the data [Chifu and Letia 2010], just the definition of the size of the grid, which can be derived from the dataset size; it also has several advantages regarding other clustering methods such as k-means, which is less robust to high-dimensional patterns and in which the number of k clusters has to be defined as an input for the algorithm [Kantardzic 2002]. Additionally, the result of the SOM process can be used to analyze qualitative variables, such as the composition information by using a 2D representation of the map (U-matrix) and heat maps among others [Kohonen 1997].

Thus, the groups found in the first phase are used to change the weight of the edges in the graph, and then, in the second phase, a classic community detection algorithm is used.

Figure 4 shows a summary of the community detection phase. The input of the model is an augmented graph S + , from which the point of view is used in the first step and the structural variable in the second step.

The output of the first step is a partition C SOM where groups divide the nodes ac-cording to their composition information. This partition is used as input for the second step.

The second step starts by changing the weights of the edges of the social graph according to C SOM and then detecting the communities using a classic graph clustering algorithm, which provides the final partition C S of the augmented network. 3.2.1. Step 1: Semantic Clustering. Given a point of view derived from a set F  X  , each node can be characterized by its vector of features, or an instance  X  of the point of view. Each instance  X  is an input pattern for the clustering. The SOM network will group the nodes according to the similarities of their features.

The SOM network N has been implemented using a square lattice of l  X  l neurons, where l =| PoV F  X  | is the number of features in the point of view.

This method is a classic unsupervised clustering algorithm which groups a set of  X  -dimensional input vectors according to one similarity measure and which does not require to define the number of clusters as an input; on the contrary, the result is given according to the distribution of the points in the dataset.

The SOM algorithm starts by assigning random weights vectors on the network, then with each pattern, in this case each instance  X  i , the distance to each weight vector is calculated. The one with the minimum distance to the pattern is set to be the winner neuron and the weights are recalculated to be closer to this pattern. This procedure is repeated with all patterns for several cycles until the network is stable, grouping the patterns according to their similarity.

At the end of this step a partition C SOM is created. The groups in this partition contain actors which are semantically close, that is, they are similar. To measure the quality of the partition we use the average distance between the points of each group: a low distance indicates a good cluster quality.

To have a standard measure we will center and normalize the distances to have comparable results, namely from 0 to 1. 3.2.2. Step 2: Structural Clustering and Community Detection. Once the semantic partition C SOM has been found it is possible to begin the second step of the proposed method.
The graph clustering algorithm is based on the modularity optimization algorithm proposed by Blondel et al. [2008]. This is an agglomerative algorithm which maximizes the modularity Q , presented by Newman and Girvan [2004], by locally changing the composition of the communities. The algorithm has two steps: (i) the modularity opti-mization, and (ii) a community aggregation to create a graph of communities. These two steps are repeated until the modularity cannot be improved.

Before the execution of the fast unfolding algorithm, we include the information from step 1. This is performed by changing the weights of the edges according to the partition C SOM . Thus, for each pair of neighbor vertices v i ,v j ,  X  i = j  X  V , the weight of the edge e ( v i ,v j ) is changed according to the Euclidean distance between the PoV instances corresponding to each node by where  X   X  1 is a constant value, d ( N ij ) is the distance between the neurons i and j , and  X  ij = 1if v i and v j belong to the same partition in C SOM ,  X  ij = 0 otherwise.
After the weights are changed according to Eq. (2) a partition C S is found using the fast unfolding algorithm. This partition contains the final set of communities, which has both, the composition information and the structural information.

By using Eq. (2) we transform the graph into a weighted graph. In this case, the modularity is calculated from the sum of the weights and not only counting how many edges fall inside a community versus the edges falling outside. This change also in-dicates that nodes which are semantically close have a stronger connection between them. The layout algorithm divides the nodes according to their neighborhood into two types: border nodes, which have neighbors in other and in their own community, and inner nodes, which have neighbors only in their own community. This division allows to rep-resent the interactions between communities and to differentiate the different clusters in the graph.

To perform the division the algorithm seeks within each group of the partition C S and classifies the nodes, assigning all the border nodes to a unique set and the inner nodes to a set corresponding to each community, that is, there are k + 1 sets, one of border nodes and k sets of inner nodes, where k is the number of groups in C S .
Figure 5(a) shows the general placement of the nodes in the layout. The border nodes are located in the interaction zone, and the inner nodes from each community are placed outside that zone. Figure 5(b) presents an example of the placement of an actual clustered graph. The convex hulls surrounding each group show the limits of the group. Note that each inner node subset is placed in front of the corresponding border nodes from its same community.
 3.3.1. Multidimensional Scaling. Multidimensional scaling is a technique to represent similarities or dissimilarities among objects in a space and map them as distances into another  X  -dimensional space. For a graphical representation,  X  must be either 2 or 3.
There are several implementations of the MDS algorithm which can be classified, according to Ingram et al. [2009], into three types: first, classic methods with analytical solutions minimizing a strain function, second, methods optimizing a stress function through a gradient descent and nonlinear optimization techniques, and third methods optimizing a stress function, but using forces as in a spring-mass simulation instead.
In this work we use the SMACOF (Scaling by MAjorizing a COmplicated Function) algorithm, proposed by de Leeuw [1977], which belongs to the second category, and which according to Ingram et al. [2009] has the most accurate results.

In order to measure the proximity between the distances and the dissimilarities a stress function is used. This function  X  ( X ) is given by where X is the point matrix, d ij is the Euclidean distance, and  X  ij is the dissimilarity between objects i and j .

Since SMACOF uses a gradient descent approach, initial values of the points may change the final result. This means that the solution is a local minima depending on the starting point. This may pose problems to the user due to the impossibility of reproducing results. Borg and Groenen [1997] recommend that the centroid initial coordinates should be (0 , 0).

Hence, we define a matrix X [0] to contain the initial coordinates of the nodes to be placed over the perimeter of a circle of radius r = 1 and center c = (0 , 0). The position of each node is where  X  i = ( i  X  1) 2  X  k and i = 1 , 2 ,..., k .

In this way the coordinates follow the recommendation of Borg and Groenen [1997] and have always the same initial location. 3.3.2. Drawing the Border Nodes V + . The border nodes are placed inside a circle of radius 0 . 5 and center c = (0 , 0). The Algorithm 1 shows the process to place the border nodes. This set is taken as a whole and contains nodes from all the communities. Thus, the idea is to show the relationships between communities according to the position of each node.

Since the dissimilarity function is calculated from the neighborhood structure of each node, a proximity in the layout reflects a structural proximity in the graph G .
The algorithm returns the x and y coordinates of each node. These coordinates X V + are used in the next step to calculate the position of nodes in the inner nodes sets. 3.3.3. Drawing the Inner Nodes of Each Community V  X  i . These are the nodes of each commu-nity i which interact only with nodes within their own community. Thus, each subset is placed in front of the border nodes of the same community. To do this the center P i of the community is given by where r = 0 . 75 and m i is the slope of the vector formed by the centroid of the community border nodes i and the origin. Thus, m i =  X  y i  X  x where u x and u y are the coordinates x , y of the node u .

Therefore, each of those points is the centroid of its respective community and will be used by the Algorithm 2 to place each group.

Thus, the algorithm finds the position of each inner node from each community. At this point the coordinates are centered in the origin and in the interval [  X  1 , 1] for both x and y . So in the next step the coordinates of the nodes in each community have to be transformed to be centered on the point defined by Eq. (6) and normalized to fit into the annulus of inner radius 0 . 5 and outer radius 1.
 The Algorithm 3 summarizes the whole layout process.
 The complexity of this community detection and visualization model can be divided into two parts: first the complexity of the community detection algorithm and then the complexity of the visualization algorithm. In the first case, we have a combination of two algorithms executed sequentially giving an overall complexity and an execution time proportional to the sum of both.

For the visualization model we execute the same algorithm k + 1 times, where k is the number of communities in the partition. So the overall complexity of this component is proportional to the sizes of each category (border nodes and inner nodes).
For both algorithms we used a graph, extracted from Twitter, with 5389 nodes and 46440 edges. According to the density of edges  X  of this graph is  X   X  0 . 32%, it corre-sponds to a sparse graph. For the community detection model we used a point of view with 35 features. The first step in the community detection algorithm is the semantic clustering of the nodes according to the selected point of view. This process compares each one of the n input patterns to the  X  = l  X  l neurons of the network N and the weights of the winner neuron are recalculated.

This process is repeated until the N converges, that is, the weights do not change or until a maximum number of iterations  X  . The worst case occurs when all the iterations are performed, making the number of operations proportional to  X   X  n  X   X  . In general the complexity is
The next step is the weight change process. During this step each edge is checked and the its weight changed. The complexity is
The last step is the final graph clustering. This step is performed using Blondel X  X  algorithm whose complexity T Q ( n ) has been reported to be linear in the number of nodes for sparse adjacency matrices [Blondel et al. 2008].

Since each step is performed sequentially, the overall complexity of the community detection algorithm is T SOM ( n ) + T ( n ) + T Q ( n ).

Figure 6(a) shows the execution time of the algorithm for points of view of different size. The test was performed using the same graph and increasing by one the numbers of features used to calculate the semantic partition.

The increase in the execution time has a quadratic order according to the number of features used. The whole layout algorithm is divided into two general steps: the first one places the border nodes, and then, using the centroid of each community, places the inner nodes.
The SMACOF algorithm iteratively reduces a stress function to find a set of points mapping dissimilarities among objects. The most costly operation of SMACOF is the matrix multiplication which, its basic calculation, has a complexity of T ( n ) = O ( n 3 ), however, the multiplications taking place are between a matrix of coordinates of size n  X  2 and an intermediate matrix b of size n  X  n , hence the complexity is in the order of O ( n 2 ). Additionally, since in this algorithm we divide the nodes into different groups, the complexity is not the same.

The complexity values T B ( n )and T I ( n ) for Algorithm 1 and Algorithm 2 respectively are given by If i  X  C V  X  i = X  then the expected size of each inner node set is n  X  V + k , thus the com-plexity is where k is the number of communities. Therefore, the overall complexity is
Note that  X  T ( n ) &lt; T ( n ). Nonetheless, the worst case is when i  X  C V  X  i = X  ,thatis,all the nodes belong to the border nodes set. In this case, the complexity is in the order of O ( n 2 ).

This particular case is not very probable in the social networks context. According to Newman and Girvan [2004], a social network has a community structure which means that the number of edges within communities is notably greater than the edges between communities.

The most expensive step of the algorithm, in terms of computational cost, is the matrix multiplication. For that matter all the matrix multiplication operations were done using an implementation of the level-3 BLAS [Dongarra et al. 1990] which is able to perform calculations using multicore architectures.

Figure 6(b) shows the execution time growth according to the number of border nodes set size. The worst execution time, as expected according to Eq. (7), occurs when all the nodes belong to the border nodes set. To test the community detection model, the visualization algorithm, and to perform some basic analyses using their results, we conducted a number of experiments. In these experiments we want to examine the behavior of the partitions when external information is used to calculate the communities and explore the roles of the nodes, presented in Section 1, using the final location of the nodes according to the layout algorithm. To perform the experiments we used a social graph representing a personal social network downloaded from Facebook using NameGenWeb [Hogan 2011]. This network corresponds to people known by its owner in different contexts: family, university, high-school, coworkers, PhD studies, and a former research project. This graph contains 334 nodes and 5394 edges.

Additionally, for this graph we used three points of view. The first point of view is the null point of view (denoted by PoV NULL ), the second point of view ( PoV COMP )isthe description of each node by their competences, the third point of view ( PoV SPOR ) enun-ciates the preferred sport of each actor in the network. The categories and summary of the points of view are presented in the Table I. In this work, to measure the quality of the partitions, we use two measures: the mod-ularity Q and the average semantic distance D C . The first one, Q  X  [  X  1 , 1], proposed by Newman and Girvan [2004], compares the fraction of the edges within each clus-ter with the fraction of edges among clusters, namely the intra-cluster edges X  density versus the inter-cluster sparsity. This measure has been conceived for sparse graphs [Brandes et al. 2008] with a community structure, for example, social networks; for other kinds of graphs, such as complete graphs, this measure will not work properly. The second measure, D C , will calculate the average distance between all the points in each group in the partition. This distance will be normalized in order to have values within the interval [0 , 1], 0 being a perfect match and 1 a total dissimilarity.
To test the whole model we perform first the community detection process, then using the resulting partitions, we test the layout algorithm and perform some basic analyses of the results.

Thus, the community detection process is applied for each point of view defined for the graph in the Table I; the results of this phase are presented in the Table II.
For the PoV NULL , the modularity is the optimal value for this specific graph: the modularity has been conceived to use only the structure as reference, hence any change on the partition configuration for the same graph will impact this value as discussed in Cruz et al. [2011a]. We will use the average semantic distance of this point of view, which is the worst value for a given optimal modularity partition, as reference value.
Note that the average semantic distance may change according to the point of view used. For example, using the PoV SPOR the distance is changed.

The partitions calculated with the PoV COMP and PoV SPOR have a higher modularity, which means that during the calculation of the groups, after the weight change, those nodes with a higher edge weight were more probable to be in the same group. This can be corroborated through the values of the average semantic distance, which is less than each reference value. This shows how nodes within each group are closer from a semantic perspective.

The composition of the partitions C NULL and C COMP are presented in Figures 7(a) and 7(b) respectively. In the first case, the groups are derived only from the structural information; therefore the groups contain nodes from almost each category, except groups 2 and 3. In the second case, each group has dominant category and its content is less variable. This dominance of some category in each group is reflected in the value of the average semantic distance: elements within each group are more similar.
Similarly, the composition of sport preferences for the point of view PoV SPOR for partitions C NULL and C SPOR are presented in Figures 7(c) and 7(d) respectively. In this case, in the first partition the sports seem to be more equally distributed while in the second case there are communities with dominant sports. For example, in groups 3, 8, and 11 in C SPOR , more than 75% of their members prefer the same sport. This shows how by influencing the community detection process actors in each group are more similar.

The principal feature of the model is the integration of the information used to create the new partition; this imposes some restrictions on the quality of the clusters, that is, they do not have an optimal modularity nor an optimal average distance but instead, there is a trade-off between them as presented in Cruz et al. [2011b].

Using the partition C COMP it is possible to extract information which was not evident before, for example, groups 2 and 7. In the first case this is a group of people who were in the group 2 of C NULL , which is the family and family friends group, but their competence (arts) is very specific compared with the other members. The second case corresponds to a group of people who were in the group 4, which contains former colleagues and researchers from an old project. Thus, these persons are strongly connected and they share the same competence.

On the other hand, for the partition C SPOR , in spite of the fact it has a better mod-ularity than C NULL , the average semantic distance is quite high. This is due to high variability of the sport preferences of the actors in each group, that is, each actor has a preferred sport independently of its environment in contrast to the partition C COMP in which in each group it is more probable to have communities with similar competences.
Thus, the model creates a more fine-grained partition than C NULL , which reveals nonevident information contained within the graph and in C NULL according to the selected point of view. Using the two partitions: C NULL and C COMP ,for PoV NULL and for PoV COMP respectively, from the community detection process it is possible to test the layout algorithm (Algo-rithm 3).

After the layout algorithm is executed it is possible to analyze the social network from the perspective of four roles: isolated nodes, central nodes, boundary spanner nodes, and broker nodes. Isolated nodes are inner nodes, central nodes may be either inner nodes or border nodes, while spanner and broker nodes are border nodes only. 5.3.1. Isolated Nodes. These nodes are inner nodes, thus they are located outside the interaction zone. But their feature is their low centrality degree, 0 or 1. In the network used in these experiments there are no nodes with degree 0. Figure 8 shows the isolated nodes in the network and their location in each partition.

Since the condition to be categorized as an isolated node lies only on the centrality degree, the isolated nodes set will not change from one point of view to another. This is because the connectivity characteristics of the nodes do not change. However, the location of each of these nodes may change according to the location of its only neighbor.
For example, nodes 187 and 30 in Figure 8(a) are located in group 1, family and family friends members, however, once the point of view is changed, they have been moved to a group with a majority of persons belonging to the semantic category 4 in the case of C COMP (community 7 in Figure 8(b)), and to the group 1 in C SPOR (Figure 8(c)), where their few neighbors were located. 5.3.2. Central Nodes. Central nodes are nodes in the social graph which have a high centrality degree. These nodes centralize the information pass within the network, and can be  X  X sed X  as information broadcasters. To identify the central nodes we choose those lying outside the majority, in this case outside the interval [  X  + 3  X  ] where  X  is the average degree and  X  its standard deviation.
 Figures 9(a), 9(b), and 9(c) show the layout result for each of the input partitions. The condition for central nodes is based entirely on the centrality degree, thus the identified central nodes will not change from one point of view to another; what may change is their type: from inner to border nodes and vice versa.

In this case, the node 138 in Figure 9(a) is an inner node, but when the point of view is changed, it becomes a border node, connecting other communities besides its own. Additionally, this node and the node 8 that were within the same community, composed of all the people known during the period of PhD studies, are now separated: the change of the point of view splits the group (5 in Figure 9(a)) into two groups, one of undergraduate students and the other of researchers, reflecting the difference of the competences of each group and in their structure.

The node 146 remains in a similar position in the three partitions. In this case most of the neighborhood of the node is the same in each point of view. This happens because the group 2 in Figure 9(a) is mostly composed of nodes belonging to the category 1 as those nodes within the group 3 in Figure 9(b) and group 5 in Figure 9(c).
Note that nodes 138 and 8, in C NULL belong to the same group, while in C COMP , even if they are close, they are assigned to different communities. In C SPOR they are again assigned to the same group. In fact, group 5 in Figure 9(a) and group 10 in Figure 9(c) have a similar actor composition. 5.3.3. Boundary Spanner Nodes. These are border nodes which connect inner nodes with other communities. Thus, spanners are the point of contact of the inner nodes with the interaction zone and are characterized by a high number of neighbors belonging to the same community and a low number of neighbors outside their own group. This means they can also connect several communities but their main job is to bridge inner nodes to other communities.

Figure 10 presents the spanner nodes for the points of view used. Note also that these nodes are near the bounds of the interaction zone which means that these border nodes are different, in terms of their neighborhood, from other border nodes in other communities, supporting the premise of the MDS algorithm to place similar nodes close to each other.
 In the partition C NULL there are 53 boundary spanner nodes and in the partition C
COMP there are 33. This difference is due to the passing of nodes from the inner nodes set to the border nodes set when the PoV COMP is used.

One example of this case involves nodes 23 and 312. These nodes were located within the group 1 (Figure 10(a)) as spanner nodes connecting, among others, node 185. After the application of the PoV COMP these nodes are a group, nodes 23 and 312 are not boundary spanners anymore, and node 185 has become a border node.

Figure 10(c) shows the reduced number of spanner nodes in partition PoV SPOR . This shows that several former inner nodes have become border nodes; anyway inner nodes in communities without spanner nodes are disconnected from the interaction zone but instead, they are connected through other border nodes. 5.3.4. Broker Nodes. These nodes are the connectors between different communities, that is, their role is to create a bridge from one community to one or more different communities. Figure 11 illustrates the location of broker nodes, connecting 2 or more communities, for each point of view in the graph.

In the partition C NULL (Figure 11(a)) there are 2 broker nodes. In the other partition, in Figure 11(b) there are 10 broker nodes, of which 8 are new. The shared nodes are the nodes 281 and 312. The first one, in the first point of view, connects the groups of undergrad studies, high-school, and of people known during PhD studies (2,3,5 in Figure 11(a)), while this same node in the second point of view connects not only the same nodes of the previous case but a new group of people from a research project.
Partition C SPOR (Figure 11(c)) contains 23 broker nodes. This increase in the number of broker nodes is due to the conversion of nodes from inner nodes to border nodes. In this partition nodes 312 and 281 are broker nodes, like in the other two partitions. The remaining broker nodes are in general different, which shows how the interactions change by changing the selected point of view.
 The difference between boundary spanner and broker nodes is what they connect. Spanner nodes connect inner nodes from their own community with at least one other community: they can introduce an inner node to a border node from another community. On the other hand, broker nodes connect border nodes from different communities: they can interact with different communities. Note that these roles are not mutually exclusive; a broker node can be a spanner node.

Nodes in this role can interact with and interconnect different communities. Their importance in the network lies in the fact that if they disappear from the network several groups can be disconnected. This is very important when analyzing social net-works in organizations where isolated groups can produce bad organizational results [Cross and Parker 2004]. The information contained within a social network is composed of several features describing the actors and their relationships, and also includes the structure of the graph itself. In general, most of the community detection and visualization algorithms do not take these types of information into account in any integrated way.
We have presented community detection and visualization models which are de-signed to use the combination of the structural and the composition information. The community detection model uses both types of information to find partitions, which are used later by the visualization model to present their structure and analyze the interactions between communities and the roles of the nodes.

Thus, the structural information is represented by the social graph and the composi-tion information is represented as a set of features assigned to each node in the graph; the composition information is divided into points of view, which are subsets of the set of features describing an actor. These points of view help reducing the dimensional-ity of the features and allows studying the social network from different perspectives. During the semantic clustering process each node instance is presented to the SOM network until it converges and the weights between neurons remain stable. The result of this step is a partition of the nodes set according to their profiles.
With this partition, we change the weights of the edges of the social graph, integrat-ing, in this way, the composition information into the social graph: edges connecting two nodes which belong to the same semantic group will have a higher weight, while remaining edges will have a weight of 1. This change produces a stronger connection between similar nodes. This integration allows to identify partitions without specifying the number of communities or their sizes, as stated in Newman [2006] to be desirable in community detection algorithms.

Finally, after the composition information has been integrated with the structural information, a classic graph clustering algorithm is used. This algorithm has been designed to optimize the modularity, which lies over the weight of the edges of graph; since we changed the weights, the clustering algorithm will group similar nodes (high weighted edges) with a major probability.

We have also presented in this article a novel layout algorithm for clustered graphs which divides the nodes into different groups according to their connectivity type: nodes with edges only from/to their own community and nodes with edges from/to their own community and from/to other communities, inner nodes and border nodes respectively. This division allows to analyze the interactions of the communities in the network by placing the border nodes in the center of the drawing.

To determine the positions of the nodes in each subset we use multidimensional scaling, which is designed to map dissimilarities between points in a space to Euclidean distances in R 2 . In this case the dissimilarities are given by the overlap between the neighborhoods of two nodes: two nodes are similar if their neighbor sets are similar. Thus, two similar nodes will be placed close to each other in the plane.

This distribution allows to study four roles of nodes regarding relationships and interaction between groups in social networks. These roles could be easily identified in networks with few nodes, however, when the network size increases this task becomes difficult.

To test the model we have used a social graph extracted from Facebook and three points of view: one, the trivial point of view, containing no features, another dividing the nodes into 7 categories according to the competences in various academic fields of each actor, and one in which the sport preferences of each actor are depicted.
The community detection results have shown that the partitions have lower semantic distances than in the case of only structural clustering, that is, the groups are more similar in terms of social information. However, by doing this, the modularity of the original graph will be reduced because of the nature of the quality measurements used.
The visualization tests for the PoV NULL have shown that the position of the bor-der nodes shows a clear difference between communities, and in general the groups are placed on the edge of the circumference. This means the members of each com-munity have a similar neighborhood and are in general more connected to their own communities.

The layout of the PoV COMP shows how the inclusion of the point of view modifies the community structure of the graph. This inclusion also modifies the roles of the nodes in the interaction zone (where the border nodes are located); this is one of the advantages of the visualization model: it enables the user to find and compare the roles in each point of view.

The layout of the PoV SPOR shows also the modification of the partition configuration by the inclusion of a point of view. In this case, this point of view indicates the preferred sport of each actor in the network; a particularity of this point of view is that the sport is an individual choice, thus in this case the groups are independent of the chosen sport making this partition have a higher semantic variability.

Regarding the execution time of the community detection model, the complexity is higher than the complexity for the structural-based model because of the preprocessing of the composition information. Today, this imposes some restrictions in the number of features: the execution time is very sensible to the number of features because of the SOM training. The high number of dimensions may mislead the SOM training because of the Hughes effect Hughes [1968], also known as the curse of dimensionality, and how the semantic distance is measured. Hence, we will study the statistical properties of the points of view to try to reduce this effect.

As per the visualization algorithm, the execution time burden lies on the heavy matrix multiplication steps. However, the division of the nodes set reduces this time by multiplying several small matrices instead of one huge matrix and using the routines from level-3 BLAS.

A priority for future work is to develop a benchmarking framework for testing the model using different datasets, including domains besides social networks and existent algorithms, as reference. This framework will be designed to produce standard results in terms of the measures used to compare different algorithms; this requirement is due to the variety of measures and datasets used by each algorithm.

Additionally future work will include the development of a model to automatically go from the layout of one point of view to another, including the analysis of the dependence of the groups on the selected point of view. Finally we are working in the development of a navigation and exploration model in order to understand the roles and interac-tions of the nodes and the automatic integration of the structural and the composition information to the visual model to carry out analyses from different perspectives.
