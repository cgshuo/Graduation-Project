 User-Generated Content (UGC) is an increas ingly important information source on the Web. UGC applications process individual data streams from a large number of Internet users and make this information available globally, e.g. Social Networking, Collabora-tive Content Publishing, File Sharing, Virtual Worlds and other collaborative activities. Examples of UGC include purported factual information, user opinions or reviews on public events and issues, files and documents. The value of the information from these applications is proportional to the inform ation credibility  X  users need to be able to ascertain the credibility of the information in the UGC.

Confirming the credibility of a given content item using a centralised authority is infeasible due to the scale of UGC, and so most systems allow the users themselves to provide feedback, or score the content items that other users have provided. Score-Finder [4] was proposed addressing the problem of aggregating feedback.

Not all UGC applications can be hosted centrally. For example, file sharing applica-tions are more effective when they are decentr alised, using a peer-to-peer (P2P) model, and it is widely accepted that the P2P model i s applicable to a large range of UGC appli-cations. Such applications are emerging, and they do not have a central trusted authority that will undertake the computations in a secure way. Indeed one of the motivations for these applications is to the contrary that there is no central authority in which trust must be placed. The distribution of trust therefore removes the so called  X  X rust bottleneck X  but creates a different problem of distributed trust. Furthermore, distributed functional-ity that benefits the majority of peers in a peer-to-peer system, such as UGC scoring, is likely to be supported in the sense that the required computational load put onto the peers will be accepted. As a result, sophis ticated UGC credibility methods are very desirable but significantly challenging to apply in a decentralised system.

Both structured and unstructured peer-to-peer networks are considered in this pa-per, and different strategies are accordingl y used. Structured networks provide unified access to each shared resource, namely all peers in a structured network can map an arbitrary resource identifier  X  usually file names or hash values of the file content  X  to a certain host. On the other hand, each peer in an unstructured peer-to-peer network sees only a local area of the network, and s earches intended resources by propagating request messages.

In this paper we consider the problem of aggregating users X  feedback for both a structured and an unstructured P2P architecture, and we use ScoreFinder as an instance of sophisticated credibility management al gorithms. We provide a structured P2P ap-proach for implementing ScoreFinder, and s how how is it implemented on a structured peer-to-peer platform. We also provide an unstructured P2P approach for implementing ScoreFinder, based on gossiping. Particularly, the method of using time-slots defined on the Real-Time Clock to synchronise decen tralised computation is novel and useful in other gossiping protocols where restrict ed synchronisation is required. We simulate network topology and churn to show its affect, as compared to a centralised or ideal computation. 2.1 Article-Annotator Model and ScoreFinder We in [4] introduce a model of cre dibility management, called the Article-Annotator (A-A) model and a comprehensive framework for Credibility Management, called Score-Finder . The participants and shared content items are named Annotators and Articles respectively, and the evaluations made by annotators are called Scores , which are num-bers between 0 and 1.

The key operation of ScoreFinder, denoted as ExpertnessEstimation ,isto iteratively calculate the weight of each score contributed by annotators to articles, and accordingly calculate the weighted aver age of scores to an article as the infer-ence of the value or quality of the article, denoted as AggregateResult .Anad-ditional operation is to shift scores from each user to remove general biases, denoted as ScoreShifting . 2.2 Decentralised Frameworks There are decentralised frameworks for impl ementing algorithms in structured and un-structured peer-to-peer networks. In unstructured p2p networks, there are algorithms employing flood or gossip messages to gradually aggregate values distributed over all peers. In [5], the authors proposed an approach to compute an overall average of values on each peer by continuously exchanging the status in each small-scaled sub-network (particularly, between the direct neighbourhoods). Similar approaches are adopted in GossipTrust [11], where opinions are unint erruptedly exchanged between each peer and a randomly selected peer (or all other p eers) to reach the commonly agreed values. In [1], a general model of such problems is e stablished for computing a linear combina-tion of values distributed in peer-to-peer networks. More emphasis in the paper is placed on privacy of participants. On the other hand, most structured networks maintain a Dis-tributed Hash Table (DHT) among peers. A DHT provides a many-to-one map between keys and peers; in most cases the distribution of keys over peers is uniformly random. It can be used for distributing data or for assigning logical roles over peers. Upon a given set of peers, a search to a given key always h its the same peer. These characteristics are employed in our framework, among other things, to map each of items to a peer that is in charge of organising the computation. Sophisticated frameworks also provide the ability of maintaining int egrity of the Hash Table, by duplicating and/or migrating data items from left peers to other available peers. In practice, we used Pastry [9] as the DHT in our experiments; other DHT platforms like CAN [7] and Chord [10] provide the same function. 3.1 Decentralisation in Structured Peer-to-Peer Networks In this section we explain how we implemented a structured P2P application that uses ScoreFinder to rank articles. A decentralis ed architecture is proposed in Figure 1. The centralised ScoreFinder algorithm is simply split into two parts, the annotator compo-nent and the tracker component that could run on each peer; data exchange between such peers is through the underlying structured peer-to-peer network. The principles in splitting the centralised algorithm are: (1) to minimise the network transfer, and (2) to minimise computation on the tracker side because trackers are likely to become bottle-necks in the system. Thereby, the annotator component provides its expertness estimate and score shifting factor (respectively e and b ) to each related tracker (i.e. trackers host-ing articles that this annotator has read) and the tracker component provides the most recent results ( r = { r j } ) on hosted articles to the annotators that have read them.
Algorithm 1 and Algorithm 2 outline the com putation in the tracker component and the annotator component, respectively. S T , E T and r T denote the relevant part (i.e. those for articles hosted in this peer) of S , E and r in each tracker peer, while S A and r
A denote the relevant part of S and r in each annotator peer. In particular, r AT denotes the set of temporary results in the intersection of the corresponding r A and r T .We use B T to denote the score shifting vector (i.e. b i ) from annotators who gave scores to articles that are hosted by this tracker.

These two algorithms continue to iterate for the lifetime of the objects which instan-tiate them. We consider that in a peer-to-peer network, there are always new peers, new content items and new annotations to be included, so the process of refining the ranking Algorithm 1. Process on Each Tracker Algorithm 2. Process on Each Annotator ( i ) is continuously running across the life cycle of the peer-to-peer application. Further-more, there is no synchronisation between peers, i.e. every peer arbitrarily sends its most recent data at any time, and is always r eady to receive messages from others. Af-ter receiving an update message, e.g. updating e or r i , the peer updates its local cache, and uses the cache to continue with the nex t round of computation. Between each loop, the algorithm pauses for a short period. Network conditions largely influence the selec-tion of this period. In our experiment, the period is set to 4 seconds since messages are delivered through an application level route, which usually consists of 2 or 3 hops. 3.2 Decentralisation in Unstructured Peer-to-Peer Networks The ScoreFinder algorithm is also implemented in unstructured peer-to-peer networks using a gossip-based approach. We note that peers in unstructured peer-to-peer net-works do not have a global perspective to t he whole network, instead each peer sees a relatively small set of peers, called its neighbours . Therefore, there is no well-known peers, like trackers in a structured peer-to-peer network, which can be in charge of or-ganising computation for each article; inst ead peers continuously exchange information with neighbours to propagate the influence of each original value to the whole network.
Also considered is the time-dependent ch ange of values and their weights. Because of our expertise and score adjustment operations, the shifted scores ( S T ) and the ex-pertise estimates for each annotator ( e ) change in time. We need to compute time-dependent weighted average values, as shown in the following formula, for coping such changes: where v = { v i ( t ) } and w ( t )= { w i ( t ) } are two sets of time-depending functions. We define i w i ( t )=1 for any t . A number of studies have focused on computing time-dependent weighted average values (as shown in Formula 1) in peer-to-peer networks using gossiped messages. The algorithm introduced in [3] uses epochs to divide the continuous computation into segments, in each segment the computation is restarted to validate changed values on each peer or valu es from new joiners. Peers in the network are synchronised by a broadcasting protoco l.We then implemented ScoreFinder based on our time-slot based protocol.
 Article Overlay Network. Considering the very large number of articles that are shared in current Internet applications, it is infeasible to store the status for all arti-cles in each peer. In our approach, each node maintains a separate neighbour set for each annotated article, and exchanges messa ges only with peers that have the same an-notated articles. This is equivalent to building an overlay network for each article over the original peer-to-peer network, and computing the weighted average score for the article on this overlay network. Figure 2(a) shows two overlay networks for article 101 and article 102 resp., built upon the original peer-to-peer network. Each contains all the peers giving scores to the article. Each peer finds peers that annotated same articles by flooding search messages.
 Time-slots and Gossip Messages. To compute average values that always reflect the recent status of the peer-to-peer system, w e use time-slots to synchronise the computa-tion between peers. Time slots are periods that are predefined on the Real-Time Clock (RTC) and known by all peers. For example, the application could define every 5 min-utes from 0:00 o X  X lock to be a time-slot, i.e. there are 288 slots in 24 hours. Nowadays, a large number of computers, including desktop computers, servers, mainframes and even mobile devices, could maintain a precise Real-Time Clock by frequently synchronising their local clock with Network Time Protoco l (NTP) servers. Therefore, a time-slot is started and terminated nearly simultaneous ly on all such peers. In the beginning of each time-slot, computation is restarted from a new status, in which scores and weights are both updated based on the recent results from t he last time-slot, and weighted average values reflecting those updated parameter s are reached in the end of the time-slot. Figure 2(b) shows an example of three gossip messages exchanged between peers. Each node maintains two values for each annotated articles (identified by i ): the summed weights, w i , and the summed product of weights and scores, v i . Assuming that a node is directly connected to k peers for article i , in each step (the length of which is ran-domly determined by the node, usually 3-5 seconds) this node sends a message to each current time-slot (  X  ). Afterwards, this peer re-compute its w i and v i by adding v and w in all messages received in the past step that have the correct slot ID. It is noticeable that there could be zero or multiple messages from the same peer that are received in a step, which does not influence the validity of the algorithm. This cycle is repeated until the end of the current time-slot, then a ll peers update the result of each annotated article by computing r  X  i = v i w time-slot, each peer re-evaluate its v i and w i by ( e  X  s  X  ij ) and e  X  .Thisprocessisshown in Algorithm 3. 4.1 Outline of Experiment In evaluating ScoreFinder, we implemented a simulator to imitate the scenario that con-tent items are shared and annotated in peer-to-peer networks, including structured and unstructured models. In our experimental uns tructured peer-to-peer network, the boot-strap is done by propagating messages in a flooding way to find peers that annotated same articles. Each peer keeps at least 5 neighbours for each overlay network (i.e. for Algorithm 3. The Algorithm in each peer in a unstr uctured peer-to-peer network each annotated article, a peer connects to 5 othe r peers giving scores to this article too), and propagates search messages through the p2p network in bootstrap or when a neigh-bour is found to be unavailable. Each search message has a Time-to-live (TTL) field to limit the diameter of the propagation. Each p eer receiving the message retransmits the message to a limited number of neighbours until a peer annotating the same article is found or the TTL is exhausted. The targeted peer then sends back an acknowledgement message to the inquirer establishing a connection with it. We used the MovieLens data set [8], containing 10 million ratings for 10681 movies from 71567 volunteers,to evalu-ate our algorithms; the data set was shuffled and randomly re-sampled to a smaller data set in each trial. The two decentralised vari ants of ScoreFinder were examined in the experiment. 4.2 Evaluation Method We evaluated our results with a supervised approach. In contrast of the size of our samples (150 annotators), we chose movies that received more than 2000 scores in each of the two data sets, so the average scores from such a large number of annotators could be regarded as the common agreed opinion, and used as the reference. The evaluation function used in the experiment was the Mean Squared Error (MSE) between inferred credibility values and the reference; a smaller evaluation value denotes a more accurate result. In peer-to-peer networks, results on each peer could be different to each other, so we accumulated errors along each annotation, i.e. if an article is annotated by two peers, the error between the oracle score an d the final result on each of the two peers is takenintotheMSE. 4.3 Results and Discussion Accuracy. Figure 3(a) shows the distribution o f accuracy improvement in 60 trials, each was on a randomly re-sampled data set fro m respectively the MovieLens data set and the Netflix data set. There were 150 annotators and 2000 content items selected for building each re-sampled data set, as we ll as all scores between those selected enti-ties. In this figure, our algorithms have a gener al better performance than the baseline. The performance of the unstructured peer-to-peer implementation stably follows the centralised implementation, where the perfo rmance of the structured peer-to-peer im-plementation has a larger variance to the cen tralised implementation. This could be explained by the difference on the extents of synchronisation of the two decentralised implementations. In the unstructured network, the algorithm closely follow the steps of the centralised ScoreFinder, namely each iteration is strictly synchronised by time-slots; whereas in the structured network, it does not follow the steps of the centralised ScoreFinder, namely all peers arbitrarily ch ange their scores and weights any time, and the scores are gradually injected from the annotators to the trackers. This inconsistency made the latter one may have larger variance than the centralised algorithm. We also note that there is difference between average v alues calculated on different peers in the end of each time-slot, this led the accuracy of ScoreFinder in unstructured peer-to-peer networks consistently lower than the centralised implementation.

Looking into a single trial, the speed of convergence of the two ScoreFinder variants is analysed in Figure 3(b) and Figure 3(c). Both variants converged in the trial, nonethe-less the unstructured variant consumed mo re time to reach converge nce. This is because agreed weighted average values are reach ed after a round of exchanging messages in structured networks, but in unstructured n etworks it needs a whole time-slot to reach the agreed average values.
 Robustness. To reveal the robustness of ScoreFinder in a variable network circum-stance, we simulated two types of network conditions with different strengths. First, we randomly discarded messages between peers to examine the influence from packet loss. Second, we randomly shut down a number of peers in every 10 seconds to see how our algorithms reacted to variance on availability of peers. The same data set was used in the two simulations to facilitate comparison. Figure 4(a) and Figure 4(b) show the results in different packet loss rate s and invalid peer ratios; in each condition the experiment was run 5 times. It is showed that the variant for unstructured networks is more sensitive to packet loss, whereas that for structured networks is more sensitive to churn.
 We introduced two decentralised variants of ScoreFinder, a credibility management framework, for respectively structured and unstructured peer-to-peer network applica-tions. The performance of our algorithm is examined in an experiment using two real world data sets. The results reveal the mer it of our approach by comparing to two base-lines that are widely used in real applicati ons. A number of issues regarding attacks and misbehaviour of users are discussed in the paper.

The primary challenge to decentralise S coreFinder is to compute weighted aver-age scores from parameters that change in time, by this means two approaches are used in different network models to synchronise distributed computation. In struc-tured peer-to-peer networks, tracker components are hosted in peers which have addresses that are closest to the identifica tion of articles, whereas globally agreed time-slots are used to coordinate paces of comput ation in unstructured peer-to-peer net-works. The approach of using time-slots to synchronising computation across peers is equal to building a logic-time framework in a distributed environment, by which highly synchronised algorithms can be decen tralised. Influence from churn and net-work conditions to the accuracy of the decen tralisation methods was examined in the experiments.
 5.1 Future Study In this paper, no methods for identifying c liques and reducing their influence are con-sidered. Annotators in cliques are only pena lised by degrading their individual expert-ness levels considering that their scores may differ from other experts not in the clique. Nonetheless, unbiased scores from an annotator who gives biased scores to only a small subset of the content items are all lower w eighted, hence we need an approach to say which part of their scores is unbiased and which part is not. Still, the criteria for clique identification could be closely related to the application, which is need to be further investigated.

In [6], the authors argue that weighted average values could be computed along span-ning trees which is formed by multi-casting messages. We noticed that there are two ad-vantages using spanning trees instead of exchanging gossip messages in implementing ScoreFinder. First, spanning tree-based algorithms have significantly faster convergence speed than gossip message approaches; furthermore, the upper bound of the number of messages to be exchanged before all peers r eaching to an agreement i s definite in a tree. Second, a peer in a spanning tree may change its local score and weight at any time, and the new agreement of weighted averag e value that reflects those changes will be reached in each peer under the same upper bound; namely no synchronising mecha-nisms, like time-slots or super peers, are necessary for spanning-tree styled algorithms. SCRIBE [2], CAN [7] and other multi-casting algorithms are useful platform, whereby spanning trees are built in unstructured peer-to-peer networks.

