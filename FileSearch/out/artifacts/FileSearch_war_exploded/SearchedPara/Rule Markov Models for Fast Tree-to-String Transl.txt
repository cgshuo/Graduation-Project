 Statistical machine translation systems typically model the translation process as a sequence of trans-lation steps, each of which uses a translation rule, for example, a phrase pair in phrase-based transla-tion or a tree-to-string rule in tree-to-string transla-tion. These rules are usually applied independently of each other, which violates the conventional wis-dom that translation should be done in context. To alleviate this problem, most state-of-the-art sys-tems rely on composed rules , which are larger rules that can be formed out of smaller rules (includ-ing larger phrase pairs that can be formerd out of smaller phrase pairs), as opposed to minimal rules , which are rules that cannot be formed out of other rules. Although this approach does improve trans-lation quality dramatically by weakening the inde-pendence assumptions in the translation model, they su ff er from two main problems. First, composition can cause a combinatorial explosion in the number of rules. To avoid this, ad-hoc limits are placed dur-ing composition, like upper bounds on the number of nodes in the composed rule, or the height of the rule. Under such limits, the grammar size is man-ageable, but still much larger than the minimal-rule grammar. Second, due to large grammars, the de-coder has to consider many more hypothesis transla-tions, which slows it down. Nevertheless, the advan-tages outweigh the disadvantages, and to our knowl-edge, all top-performing systems, both phrase-based and syntax-based, use composed rules. For exam-ple, Galley et al. (2004) initially built a syntax-based system using only minimal rules, and subsequently reported (Galley et al., 2006) that composing rules improves B leu by 3.6 points, while increasing gram-mar size 60-fold and decoding time 15-fold.

The alternative we propose is to replace composed rules with a rule Markov model that generates rules conditioned on their context. In this work, we re-strict a rule X  X  context to the vertical chain of ances-tors of the rule. This ancestral context would play the same role as the context formerly provided by rule composition. The dependency treelet model de-veloped by Quirk and Menezes (2006) takes such an approach within the framework of dependency translation. However, their study leaves unanswered whether a rule Markov model can take the place of composed rules. In this work, we investigate the use of rule Markov models in the context of tree-to-string translation (Liu et al., 2006; Huang et al., 2006). We make three new contributions.
 First, we carry out a detailed comparison of rule Markov models with composed rules. Our experi-ments show that, using trigram rule Markov mod-els, we achieve an improvement of 2.2 B leu over a baseline of minimal rules. When we compare against vertically composed rules, we find that our rule Markov model has the same accuracy, but our model is much smaller and decoding with our model is 30% faster. When we compare against full com-posed rules, we find that our rule Markov model still often reaches the same level of accuracy, again with savings in space and time.
 Second, we investigate methods for pruning rule Markov models, finding that even very simple prun-ing criteria actually improve the accuracy of the model, while of course decreasing its size.

Third, we present a very fast decoder for tree-to-string grammars with rule Markov models. Huang and Mi (2010) have recently introduced an e ffi cient incremental decoding algorithm for tree-to-string translation, which operates top-down and maintains a derivation history of translation rules encountered. This history is exactly the vertical chain of ancestors corresponding to the contexts in our rule Markov model, which makes it an ideal decoder for our model.

We start by describing our rule Markov model (Section 2) and then how to decode using the rule Markov model (Section 3). Our model which conditions the generation of a rule on the vertical chain of its ancestors, which allows it to capture interactions between rules.

Consider the example Chinese-English tree-to-string grammar in Figure 1 and the example deriva-tion in Figure 2. Each row is a derivation step; the tree on the left is the derivation tree (in which each node is a rule and its children are the rules that sub-source and target derived tree. For any derivation node r , let anc 1 ( r ) be the parent of r (or  X  if it has no parent), anc 2 ( r ) be the grandparent of node r (or  X  if chain of ancestors anc 1 ( r ) anc n ( r ).

The derivation tree is generated as follows. With probability P( r 1 |  X  ), we generate the rule at the root node, r 1 . We then generate rule r 2 with probability P( r 2 | r 1 ), and so on, always taking the leftmost open substitution site on the English derived tree, and gen-erating a rule r i conditioned on its chain of ancestors with probability P( r i | anc n no more children can be generated. Thus the proba-bility of a derivation tree T is For the minimal rule derivation tree in Figure 2, the probability is: P( T ) = P( r 1 |  X  ) P( r 2 | r 1 ) P( r 3 | r 1 ) Training We run the algorithm of Galley et al. (2004) on word-aligned parallel text to obtain a sin-gle derivation of minimal rules for each sentence pair. (Unaligned words are handled by attaching them to the highest node possible in the parse tree.) The rule Markov model can then be trained on the path set of these deriva-tion trees.
 Smoothing We use interpolation with absolute discounting (Ney et al., 1994): where c ( r | anc n seen rule r after the vertical context anc n the discount for a context of length n , and (1  X   X  n ) is set to the value that makes the smoothed probability distribution sum to one.
 We experiment with bigram and trigram rule Markov models. For each, we try di ff erent values of D 1 and D 2 , the discount for bigrams and trigrams, respectively. Ney et al. (1994) suggest using the fol-lowing value for the discount D n :
IP( x 1 :NP x 2 :VP)  X  x 1 x 2
VP( x 1 :PP x 2 :VP)  X  x 2 x 1
PP( x 1 :P x 2 :NP)  X  x 1 x 2 NP(Sh  X  al  X  ong)  X  Sharon derivation tree derived tree pair
AS le
AS le
AS le
AS le Here, n 1 and n 2 are the total number of n -grams with exactly one and two counts, respectively. For our corpus, D 1 = 0 . 871 and D 2 = 0 . 902. Additionally, we experiment with 0 . 4 and 0 . 5 for D n . Pruning In addition to full n -gram Markov mod-els, we experiment with three approaches to build smaller models to investigate if pruning helps. Our results will show that smaller models indeed give a higher B leu score than the full bigram and trigram models. The approaches we use are:  X  RM-A: We keep only those contexts in which  X  RM-B: We keep only those contexts that were  X  RM-C: We try a more principled approach In this paper, we use our rule Markov model frame-work in the context of tree-to-string translation. Tree-to-string translation systems (Liu et al., 2006; Huang et al., 2006) have gained popularity in recent years due to their speed and simplicity. The input to the translation system is a source parse tree and the output is the target string. Huang and Mi (2010) have recently introduced an e ffi cient incremental decod-ing algorithm for tree-to-string translation. The de-coder operates top-down and maintains a derivation history of translation rules encountered. The history is exactly the vertical chain of ancestors correspond-ing to the contexts in our rule Markov model. This makes incremental decoding a natural fit with our generative story. In this section, we describe how to integrate our rule Markov model into this in-cremental decoding algorithm. Note that it is also possible to integrate our rule Markov model with other decoding algorithms, for example, the more common non-incremental top-down / bottom-up ap-proach (Huang et al., 2006), but it would involve a non-trivial change to the decoding algorithms to keep track of the vertical derivation history, which would result in significant overhead.
 Algorithm Given the input parse tree in Figure 3, Figure 4 illustrates the search process of the incre-mental decoder with the grammar of Figure 1. We write X @  X  for a tree node with label X at tree address  X  (Shieber et al., 1995). The root node has address  X  , and the i th child of node  X  has address  X . i . At each step, the decoder maintains a stack of active rules, which are rules that have not been completed yet, and the rightmost ( n  X  1) English words translated thus far (the hypothesis), where n is the order of the word language model (in Figure 4, n = 2). The stack together with the translated English words comprise a state of the decoder. The last column in the fig-ure shows the rule Markov model probabilities with the conditioning context. In this example, we use a trigram rule Markov model.

After initialization, the process starts at step 1, where we predict rule r 1 (the shaded rule) with prob-ability P( r 1 |  X  ) and push its English side onto the stack, with variables replaced by the correspond-ing tree nodes: x 1 becomes NP @1 and x 2 becomes The dot ( ) indicates the next symbol to process in with English word order. We then predict lexical rule r 2 with probability P( r 2 | r 1 ) and push rule r 2 onto the stack:
In step 3, we perform a scan operation, in which we append the English word just after the dot to the current hypothesis and move the dot after the word. Since the dot is at the end of the top rule in the stack, we perform a complete operation in step 4 where we pop the finished rule at the top of the stack. In the scan and complete steps, we don X  X  need to compute rule probabilities.

An interesting branch occurs after step 10 with two competing lexical rules, r 6 and r  X  word y  X u can be translated as either a preposition with (leading to step 11) or a conjunction and (leading to step 11  X  ). The word n -gram model does not have enough information to make the correct choice, with . As a result, good translations might be pruned be-cause of the beam. However, our rule Markov model has the correct preference because of the condition-ing ancestral sequence ( r 3 , r 4 ), shown in Figure 5. with , our corpus statistics will give a higher proba-bility to P( r 6 | r 3 , r 4 ) than P( r  X  the decoder to score the correct translation higher. Complexity analysis With the incremental decod-ing algorithm, adding rule Markov models does not change the time complexity, which is O ( nc | V | g  X  where n is the sentence length, c is the maximum number of incoming hyperedges for each node in the translation forest, V is the target-language vocabu-lary, and g is the order of the n -gram language model (Huang and Mi, 2010). However, if one were to use rule Markov models with a conventional CKY-style bottom-up decoder (Liu et al., 2006), the complexity would increase to O ( nC m  X  1 | V | 4( g  X  1) ), where C is the maximum number of outgoing hyperedges for each node in the translation forest, and m is the order of the rule Markov model. 4.1 Setup The training corpus consists of 1.5M sentence pairs with 38M / 32M words of Chinese / English, respec-tively. Our development set is the newswire portion of the 2006 NIST MT Evaluation test set (616 sen-tences), and our test set is the newswire portion of the 2008 NIST MT Evaluation test set (691 sen-tences).

We word-aligned the training data using GIZA ++ followed by link deletion (Fossum et al., 2008), and then parsed the Chinese sentences using the Berkeley parser (Petrov and Klein, 2007). To extract tree-to-string translation rules, we applied the algo-rithm of Galley et al. (2004). We trained our rule Markov model on derivations of minimal rules as described above. Our trigram word language model was trained on the target side of the training cor-pus using the SRILM toolkit (Stolcke, 2002) with modified Kneser-Ney smoothing. The base feature set for all systems is similar to the set used in Mi et al. (2008). The features are combined into a standard log-linear model, which we trained using minimum error-rate training (Och, 2003) to maximize the B leu score on the development set.

At decoding time, we again parse the input sentences using the Berkeley parser, and convert them into translation forests using rule pattern-matching (Mi et al., 2008). We evaluate translation quality using case-insensitive IBM B leu -4, calcu-lated by the script mteval-v13a.pl . 4.2 Results Table 1 presents the main results of our paper. We used grammars of minimal rules and composed rules of maximum height 3 as our baselines. For decod-ing, we used a beam size of 50. Using the best bigram rule Markov models and the minimal rule grammar gives us an improvement of 1 . 5 B leu over the minimal rule baseline. Using the best trigram rule Markov model brings our gain up to 2 . 3 B leu . These gains are statistically significant with p &lt; 0 . 01, using bootstrap resampling with 1000 samples (Koehn, 2004). We find that by just using bigram context, we are able to get at least 1 B higher than the minimal rule grammar. It is interest-ing to see that using just bigram rule interactions can give us a reasonable boost. We get our highest gains from using trigram context where our best perform-ing rule Markov model gives us 2 . 3 B leu points over minimal rules. This suggests that using longer con-texts helps the decoder to find better translations.
We also compared rule Markov models against composed rules. Since our models are currently lim-ited to conditioning on vertical context, the closest comparison is against vertically composed rules. We find that our approach performs equally well using much less time and space.

Comparing against full composed rules, we find that our system matches the score of the base-line composed rule grammar of maximum height 3, while using many fewer parameters. (It should be noted that a parameter in the rule Markov model is just a floating-point number, whereas a parameter in the composed-rule system is an entire rule; there-fore the di ff erence in memory usage would be even greater.) Decoding with our model is 0 . 2 seconds faster per sentence than with composed rules.
These experiments clearly show that rule Markov models with minimal rules increase translation qual-ity significantly and with lower memory require-ments than composed rules. One might wonder if the best performance can be obtained by combin-ing composed rules with a rule Markov model. This is straightforward to implement: the rule Markov model is still defined over derivations of minimal rules, but in the decoder X  X  prediction step, the rule Markov model X  X  value on a composed rule is cal-culated by decomposing it into minimal rules and computing the product of their probabilities. We find that using our best trigram rule Markov model with composed rules gives us a 0 . 5 B leu gain on top of the composed rule grammar, statistically significant with p &lt; 0 . 05, achieving our highest score of 28 . 0. 1 4.3 Analysis Tables 2 and 3 show how the various types of rule Markov models compare, for bigrams and trigrams, / test time (sec / sent) respectively. It is interesting that the full bigram and trigram rule Markov models do not give our high-est B leu scores; pruning the models not only saves space but improves their performance. We think that this is probably due to overfitting.

Table 4 shows that the RM-A trigram model does fairly well under all the settings of D n we tried. Ta-ble 5 shows the performance of vertically composed rules at various settings. Here we have chosen the setting that gives the best performance on the test set for inclusion in Table 1.

Table 6 shows the performance of fully composed rules and fully composed rules with a rule Markov million rules), the drop in B leu score resulting from adding the rule Markov model is not statistically sig-nificant. Besides the Quirk and Menezes (2006) work dis-cussed in Section 1, there are two other previous e ff orts both using a rule bigram model in machine translation, that is, the probability of the current rule only depends on the immediate previous rule in the vertical context, whereas our rule Markov model can condition on longer and sparser derivation his-tories. Among them, Ding and Palmer (2005) also use a dependency treelet model similar to Quirk and Menezes (2006), and Liu and Gildea (2008) use a tree-to-string model more like ours. Neither com-pared to the scenario with composed rules.

Outside of machine translation, the idea of weak-ening independence assumptions by modeling the derivation history is also found in parsing (Johnson, 1998), where rule probabilities are conditioned on parent and grand-parent nonterminals. However, be-sides the di ff erence between parsing and translation, there are still two major di ff erences. First, our work conditions rule probabilities on parent and grandpar-ent rules , not just nonterminals. Second, we com-pare against a composed-rule system, which is anal-ogous to the Data Oriented Parsing (DOP) approach in parsing (Bod, 2003). To our knowledge, there has been no direct comparison between a history-based PCFG approach and DOP approach in the parsing literature. In this paper, we have investigated whether we can eliminate composed rules without any loss in trans-lation quality. We have developed a rule Markov model that captures vertical bigrams and trigrams of minimal rules, and tested it in the framework of tree-to-string translation. We draw three main conclu-sions from our experiments. First, our rule Markov models dramatically improve a grammar of minimal rules, giving an improvement of 2 . 3 B leu . Second, when we compare against vertically composed rules we are able to get about the same B leu score, but our model is much smaller and decoding with our model is faster. Finally, when we compare against full composed rules, we find that we can reach the same level of performance under some conditions, but in order to do so consistently, we believe we need to extend our model to condition on horizon-tal context in addition to vertical context. We hope that by modeling context in both axes, we will be able to completely replace composed-rule grammars with smaller minimal-rule grammars.
 We would like to thank Fernando Pereira, Yoav Goldberg, Michael Pust, Steve DeNeefe, Daniel Marcu and Kevin Knight for their comments. Mi X  X  contribution was made while he was vis-iting USC / ISI. This work was supported in part by DARPA under contracts HR0011-06-C-0022 (subcontract to BBN Technologies), HR0011-09-1-0028, and DOI-NBC N10AP20031, by a Google Faculty Research Award to Huang, and by the Na-tional Natural Science Foundation of China under contracts 60736014 and 90920004.

