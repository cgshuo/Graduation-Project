 In fact, workflow is becoming one of the hottest technologies in the enterprize information technology arena, which means that workflow systems have rapidly been adopted by many organizations. The primary reason why workflow systems are so hot-issued comes from the belief that they help large organizations to im-prove dramatically the way they operat e, and their effectiveness has also come under our observation in numerous deployments. But, many of the workflow products have been experienced being ine ffective for serious workflow applica-tions because they generally lack necessities for modeling capability, scripting tools, dynamic change supports, and many other advanced features of the work-flow systems. Particularly, many successf ul large workflow customers found out that as they tried to scale up from pilo t test mode to enterprize-wide mode, there were severe symptoms of inflexibility and non-scalability[1]. Therefore, the recent requirements on the workflow systems have been set up and characterized by the challenge -Performance and Scalability.
 fects the system X  X  scalability and performance can be determined by the factors -workflow engagement factor, workflow structure factor and workflow instan-tiation factor. The workflow engagement factor has to do with how large the organization is -How many workflow models including actors, roles and appli-cation programs does the system have to handle? The workflow structure factor has to do with how large and complex a single workflow model is -How many activities are associated within a single workflow model or collaborative work-flows ? and how complex their control/data flow relationships are? -And, the workflow instantiation factor has to do with how large the number of instances coming out of workflow models is -How many instances do the workflow models produce? We, in this paper, try to esti mate and measure the facts how well our architecture and system is coping with th ese factors, architecturally as well as systematically.
 and more of their paperwork to electronic systems, the workflow system must grow to accommodate much larger numbers of users, work items (workcases), information items, and complex workflow applications, in general. So, the goal is to develop a workflow architecture and system that not only be useful for workflow applications as small as 50 or 100 simultaneous workcases of a workflow procedure, but also be scalable up to 500,000 or 1 million workcases without any seriously performable degradation. As a consequence of this, the architecture and system is able to provide acceptable performance for much larger and much more complex workflow applications, too. We name it  X  X -Chautauqua 2 Workflow Management System X . The system is dev eloped by the EJB-based framework approach, and it is fully deployable and operable now on the internet-based computing environment.
 gree of workflow complexity for scoping our paper X  X  goal. In the next section, we propose a large scale workflow architecture and illustrate its mathematical esti-mations of performance by comparing wit h other conventional workflow archi-tectures. In consequent sections, we des cribe about details of the e-Chautauqua workflow management system and its runt ime execution experience and perfor-mance measures, and introduce several related works that our research group and the workflow literature have done for issues of the large scale workflow ar-chitectures and their performances. Finally, we summarize what we have done, the results of which workflow architectures are adequate and adaptive for very large-scale workflow applications, and what the future works and further research issues are. Nowadays, there exist hundreds of comme rcial workflow management products. The genesis of workflow management software was in automating document-driven workflow procedures such as officeTalk-D[5], etc.. Some of the early prod-ucts were extensions to the document imaging and management software. The emphases of those workflow products have been on routing, sharing, applica-tion launching, and cooperating activities of workflows. Meanwhile, the current products are pursuing the issues of transactional workflows and large scale work-flows. Especially, the feature of supporting the  X  Large-scale Workflows  X  is still hot-issued in the literat ure, because the architect ures of almost all workflow products are belonging to a family of the client-server architecture that suffers from performance and scalability problems in the situation where it is faced with large scale workflow applications. More scalable architectures need to be supported for the large scale workflows.
 paper. As mentioned before, many workflow management systems have been de-veloped and described in the workflow literature; we cannot describe them all here. Almost all commercialized products, such as BizFlow, InConcert, Staffware, FloWare, Notes, ActionWKF, FlowWorks and FlowMark workflow management systems, have adopted a certain type of ad vanced workflow architectures employ-ing a sort of the EJB enterprize middleware platform. Particularly, JBoss jBPM is a typical example of the new paradig m recently happening in the literature. It is pursuing a flexible, extensible workflow management system as the open source enterprize middlew are platform. JBoss jBPM can be used in the simplest environment like an ant task and scale up to a clustered J2EE application. At first, we have developed the e-Chautauqua workflow system so as to be operable on the Weblogic EJB web application server framework, and now it is deployed on the JBoss EJB enterprize middleware platform.
 We have developed a workflow management system that aims for very large scale workflows applications, and it is named e-Chautauqua workflow management system. e-Chautauqua is based on the wor kcase-oriented workflow architecture, and especially we have implemented it b y the Enterprize Java Beans framework approach. In this section, we describe e-Chautauqua X  X  overall system architecture and its workflow message queue mechanism providing asynchronous communica-tion channels among the agents. Also, in order to show that e-Chatauqua might be reasonably acceptable as a very large s cale worfklow management system, we gives two experimental observations on e-Chautauqua -One is an operational example by capturing the runtime client X  X  screens, and the other is a perfor-mance evaluation result by measuring the response times for each of workcase objects to be created by the engine. 3.1 A Workflow Architecture Design Guidance Through the In [10], we developed five architectural performance analytic models by using the layered queueing model, and mathe matically analyzed them by the method of layers methodology. One of the models is of the passive workflow architecture (denoted by PM /w 18 Workflow Enactment Processes in Fig. 1), two are of the class active workflow architectures (CAM/w2CPUsandCAM/w18CPUs), and the other two models are of the instance active workflow architectures (IAM /w 2 CPUs and IAM /w 18 CPUs). See [10] for more detail on the larger view of the analyses. In here, we present just the results of the architectural performance estimations as shown in Fig. 1. The results shows that the average response time is much larger in the passive workflow architecture (PM) than in the class-active workflow architectures (CAM) as w ell as in the instance-active workflow architecture (IAM), even though the passive workflow architecture increases not only the number of workflow engine servers (processes) (PM w/ 18 WEPs) but also the number of hardware processors (PM w/18 CPUs). This means that the instance-active workflow architecture has a higher performance in a more distributed environment as the workflow scales up.
 passive workflow architectural category and the active workflow architectural category (the class-active and the instance-active workflow architectural style) are very large. The active workflow architectural categories X  performance is far superior to the passive workflow architectural categories X . The outcomes of this performance analysis work might be predicted based on the conceptual intuition. But, the derived comparisons between th e first instance-active workflow archi-tecture (IAM w/ 2 CPUs) and the second in stance-active workflow architecture (IAM w/ 18 CPUs) makes us a bit surprised, because the first X  X  performance is better than the second X  X , which is not what we expected from the conceptual intuition. Therefore, it might be true that it will be a burden if the number of executable processes in the system in creases without limit. That is, in the instance-active workflow arc hitecture, the number of executable processes or ob-jects, which are proportionally related to the number of workcases, must be inflicting heavy effects on its performan ce. As a result, based on these estima-tions we are able to reach the following guidance in conceiving a very large scale workflow architecture:  X  X ule1 . The instance active workflow architectural style is more appropriated  X  X ule2 . The number of executable processes or objects composing a workflow  X  X ule3 . Both of the above rules should be simultaneously satisfied, but Rule 3.2 The Workcase-Oriented Workflow Architecture of e-Chautauqua In this section we try to derive a conceptual workflow architecture from the guidance. At first, in order to keep the Rule 1, it is necessary to understand which entity of a workflow model is transformed or embodied into active compo-nents (such as a process, object or thread) of the architecture. That is, workflow procedures, activities, workcases, role s, actors must be the typical entities of a workflow model, and the instances that are instantiated from any entity among them can be embodied into active components in the instance active workflow architecture. It should be reasonable if we choose the activity entity or the work-case entity as a subject of embodiment in the architecture. So, with respect to the Rule 1, it is possible to derive two candidates as a very large scale workflow architecture -One is an activity-oriented instance active workflow architectural style, the other is a workcase-oriented instance active workflow architectural style. Based on the Rule 2, we have to choose the workcase-oriented instance active workflow architectural style as a very large scale workflow architecture, because we obviously know that the num ber of executable processes or objects maintained in the workcase-oriented architecture is much smaller than in the activity-oriented architecture. Finally , we reach the decision that the workcase-oriented instance active workflow archit ectural style, which is abbreviated to the workcase-oriented workflow architectur al style, is the proper conceptual archi-tecture for very large scale workflow management systems.
 workcase-oriented workflow architectur al style. There need to be several dif-ferent kinds of agents in the architecture, and however the most essential agent is the control agent taking in charge of the control flow functionality that is the primary role of a workflow engine. So, the core work in deriving a workflow architecture is on how to configure and organize the inside of the control agent. Conclusively, in the workcase-oriente d workflow architecture, a set of workcase objects fulfill the control agent X  X  functionality, and a workcase object can be realized as either a work item (token) or an instance of workflow procedure in a workflow system. Therefore, it is po ssible to consider two kinds of workcase objects -One is the case that a token b ecomes an active component and takes in charge of activity enactment control by itself, and the other is the case that an instance of workflow procedure becomes a n active component whenever a work-case is initiated. After completing an individual workcase, the active components (workcase objects) corresponding to the workcase are automatically destroyed. We believe that the workcase-oriented instance-active architecture should be very appropriate for maximizing the distribution capability and the resources X  usage efficiency in performing the enactment sc heduling and event-handling tasks. Note that almost all of the current workflow systems that are developed based on the OMG Joint-flow X  X  workflow architectural style are categorized in the activity-oriented instance active workflow architectural style, and so their control agents are composed of a set of activity objects. In the next section, we experimentally show that the workflow management system embedding the workcase-oriented workflow architecture is able to afford feasible performances in very large scale workflow workloads. 3.3 The Overall System Architecture of e-Chautauqua The functional descriptions of e-Chautauqua X  X  architectural components and the ways they cooperate with each other are b riefly explained in this section. Basi-cally, e-Chautauqua is fully implemente d so as to provide almost all services and facilities specified in the international workflow standards from the interfaces 1 through 5 announced by WfMC. For examples, in terms of the workflow defi-nition language, it completely handles WPDL as well as XPDL, and also it is able to support the Wf-XML 2.0 interoperability interface, which has recently released by WfMC, for interacting with other heterogeneous workflow systems. Our focus is on the workflow enactment component (the so-called workflow en-gine).
 sists of several agent-based componen ts, such as PDL (process definition lan-guage) Agent, OM (organization management) Agent, Administration Agent, Tool Agent, requester, worklist handler, script interpreter, logger, workflow Mes-sage Beans using JMS message queue, and Enactment &amp; Control Agent consist-ing of workcase objects registered in the workcase pool. These all components aredeployedonanEnterprizeJ ave Beans middleware platform 3 and they asyn-chronously communicate with each other through a JMS-based message queue mechanism named the workflow message beans. engines is the workcase object compon ent. That is, as stated in the concep-tual architecture section, almost all conventional workflow engines are based on the activity-oriented workflow architectural style, but on the other hand e-Chautuaqua X  X  engine is based on the workcase-oriented workflow architectural style. In the activity-oriented workflo w engines, the control flow management functionality is performed through inter actions among activity objects, because the core component is the activity object component. In contra st to this, the con-trol flow management is done by the workcase objects in the workcase-oriented workflow engine (e-Chauta uqua), and so the activity precedence information is stored to the inside of each workcase object as data. Conclusively, the most valuable benefit that we expect from the workcase object component is that the control flow management functionality can be done by much simpler mechanism, and also it can be efficiently done with much smaller amount of computing re-sources, because the workcase-oriented w orkflow engine is able to dramatically decrease the number of objects resided and managed in the system. These facts mean also that the workcase-oriented workflow engine like e-Chautuaqua must be more appropriate and durable for the very large scale workflows, and it must give satisfaction in the higher degree of workflow instantiation complexity. Fig. 4 is to present the class diagram of e-Chautauqua engine as an implementation result of the system architecture of Fig. 3. The components in the system architecture of e-Chautauqua are implemented as workcasebean class, worklisthandlerbean class, requestbean class, and so on, respectively.
 cess (procedure) builder and simulator are r esponsible for describing, specifying, and simulating workflow procedures through the graphical user interfaces. The graphical description of a workflow pro cedure can be represented in a textual form through the workflow procedure description language (WPDL) or the XML workflow procedure description language (XPDL). The workflow administration and monitoring services are used for managing the administrative tasks, like ini-tiating workcases, performing dynamic changes of data-flow and control-flow in a workcase, terminating or holding tasks of a workcase, monitoring the execution statuses of tasks associated with a workcase, and serving other administrative and monitoring requests. The services ar e operable on a graphical user interface, too. The script interpreter performs the definition of transition conditions in buildtime and their processing during runtime.
 through the workflow message bean. The workflow message queue mechanism uses a message-driven bean for realizing the reliable message transmission, which is based upon the JMS (Java Message Server) queue as an asynchronous message communication channel. An example using the workflow message queue mecha-nism is illustrated in Fig. 5. That is, a component sending a message composes the message in a certain format and transmits it to a JMS queue, and then the JMS queue looks up the message map to find out the target component and its method and parameters by interpretin g the received message from the sending component, and finally the JMS queue invokes the method for passing the pa-rameters X  values or for returning the execution results. Fig. 5 shows that the sending component is a runtime client trying to request starting a workcase, and the target component is the requester that takes in charge of the responsibility for starting the workcase. 3.4 Operational Example: e-Chautauqua Runtime Client In this section, we present an operational example of e-Chautauqua by showing captured screens of the runtime client user interface and its related functionali-ties.InFig.6,Thefirstscreenfromthel owest layer in the overlapped screens is the runtime client X  X  user interface having a worklist folder, workflow (or process) model folder, running workcases (instances) folder, and a workflow monitoring folder. The second screen is showing a wo rkflow model graphically represented by the information control net, and on the top of the screen there are several toggle switches used for alternatively showing the workflow model information such as activity X  X  name, transition informations, control flow, data flow and so on. The last third screen shows the workflow mod el of the second screen represented in XPDL. We have observed e-Chautauqua X  X  runtime executions for practically measuring its performance and evaluating whether e-Chautauqua is affordable for the higher degree of the workflow instantiation complexity as a very large scale workflow management system. In general, it is v ery hard to measure the elapsed time or the processing time of a workcase in a workflow system, because it X  X  not easy to define or predict the processing time of each activity in the workflow model. So, we measure the response time for e-Chautauqua to crea te a workcase object after being requested a start workcase r equest to the requester component. In order to conduct the performance measurement work, we built an automatic generator of the start workcase request messages. Fig. 7 shows the result of the performance measurement after measuring e-Chautauqua X  X  response times for more than one million workcases. As you see the central tendency graph in Fig. 7, the tendency line reveals a shape of exponential function from the point where the number of workcases in the system starts passing the point of one million and three hundreds thousands workcases.
 if e-Chautauqua guarantees the acceptabl e performance for the very large scale workflow applications. We would say that the maximum number of workcases in the system should be large enough to a ccept the decision, because we deployed e-Chautauqua on the weblogic middleware platform running on a very simple hardware configuration. If we deploy the system on a more powerful hardware configuration like a clustering platform, then we can surely expect that the performance measurement result is much more reasonable for the very large scale workflow environment. In this paper, we have newly defined the degree of workflow complexity in order to reasonably scope the very large scale workflow applications. Also, We have investigated performances of various alternatives of workflow architectures for very large scale workflow systems, especially which are satisfied with the higher degree of the workflow instantiation complexity. Based upon the results of our mathematical analysis, we analytically proved that the instance active workflow architectural style is much more scalable than any other styles of workflow archi-tectures such as the server-client workflow a rchitectural style, and the class active workflow architectural style. By considering the analytical proof, we have pro-posed the workcase-oriented workflow architecture for the very large scale work-flow applications, and described the implementation details of e-Chautauqua workflow management system embedding the workcase-oriented workflow archi-tecture. Finally, we have presented the p erformance measurement result of the e-Chautauqua workflow management system, and reached the decision that the architecture and system should be affordable for the very large scale workflow requirements. Based upon the results of this paper, we can further dig our re-search into the world of Grid-based workflow architectures or/and P2P-based workflow architectures for exploring more advanced workflow architectures and systems targeting at the very large scale workflow applications.

