 Recent work in commerce search has shown that understanding the semantics in user queries enables more effective query analysis and retrieval of relevant products. However, due to lack of sufficient domain knowledge, user queries often include terms that cannot be mapped directly to any product attribute. For example, a user look-ing for designer handbags might start with such a query because she is not familiar with the manufacturers, the price ranges, and/or the material that gives a handbag designer appeal. Current com-merce search engines treat terms such as designer as keywords and attempt to match them to contents such as product reviews and product descriptions, often resulting in poor user experience.
In this study, we propose to address this problem by reformu-lating queries involving terms such as designer , which we call modifiers , to queries that specify precise product attributes. We learn to rewrite the modifiers to attribute values by analyzing user behavior and leveraging structured data sources such as the prod-uct catalog that serves the queries. We first produce a probabilistic mapping between the modifiers and attribute values based on user behavioral data. These initial associations are then used to retrieve products from the catalog, over which we infer sets of attribute val-ues that best describe the semantics of the modifiers. We evaluate the effectiveness of our approach based on a comprehensive Me-chanical Turk study. We find that users agree with the attribute values selected by our approach in about 95% of the cases and they prefer the results surfaced for our reformulated queries to ones for the original queries in 87% of the time.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval X  Query formulation ; H.2.8 [ Database Management ]: Database Applications X  Data mining Algorithms, Experimentation
There has been tremendous growth in the amount of commerce conducted over the web in the past decade. Most online trans-actions begins with search , both in dedicated e-commerce sites ( e.g., Amazon) and in search engine verticals ( e.g., Bing or Google shopping). However, there are important characteristics that dif-ferentiates commerce search from web search. While web search is predominantly performed over unstructured data such as con-tents of web pages, commerce search is performed over structured data in the form of a product catalog. The rich semantics in the structured catalog, when leveraged, enables effective query analy-sis and ranking [7, 10]. In particular, keywords queries with an-notated with type semantics, ( e.g., [ nikon digital cameras ] as [ brand:nikon category:digital cameras ]) enables effective retrieval from structured data sources [10].

However, not all commerce queries can be annotated with such clean semantics. For example, consider the query [ designer hand-bags ]. There is no explicit type semantics that can be associated with the term [ designer ] based on the catalog. Such queries are rather a norm, than an exception: Due to possible lack of domain knowledge, users often express their information need using com-bination of keywords, some of which may be easily typed to an explicit semantic type ( e.g., [ brand:nikon ]) and others that can not be ( e.g., [ designer ]). We call the former typed tokens and the latter free tokens .

Today, when presented with a query that contains free tokens , commerce search engines treat these tokens as keywords and per-form keyword search over the available unstructured data such as product descriptions and user reviews associated with the catalog. There are several drawbacks to this solution. First, these sources could be noisy X  X  seller may have incentives to label the hand-bags he sells with positive terms such as  X  X esigner X  and  X  X tylish X  to boost sales. Second, the information can be dated X  X  handbag that is considered designer a year ago may become blas X  today. Fi-nally, it can adversely affect recall, if the free token is rare and/or not mentioned in the unstructured data.

Figure 1 shows an illustrative example that demonstrates the lim-itation of matching free tokens as keywords. In this figure, we show the results for the query [ designer handbags ] on Amazon, with search restricted to category Women X  X  Handbags &amp; Purses (re-sults without restriction appear worse). In our opinion, the retrieved products are poor reflections of characteristics of  X  X esigner X  hand-bags. These products are likely retrieved due to the term  X  X esigner X  in their titles. Much better results can be retrieved if the system un-derstands that the token [ designer ] refers to small set of combi-nations of semantics that constitute  X  X esigner X  appeal to handbags. For instance, if [ designer handbags ] is reformulated to [ (gucci OR prada) leather handbags ], better results can be retrieved. Figure 1: Results for the query [ designer handbags ] on Ama-zon
In this paper, we study this problem. We focus on a class of free tokens which we call modifiers that change the set of products to be retrieved For example, in the category of televisions, the free token portable indicates that the users are likely looking for televisions that are light in weight and small in size. We propose a principled approach to reformulate queries containing modifiers to ones that specify precise attributes. We first learn to identify the set of modi-fiers among all free tokens. We then learn the association of differ-ent attribute values with modifiers by analyzing the user browsing behavior in search sessions. The intuition is that users who issue queries such as [ designer handbags ] will end up spending more time browsing [ designer handbags ] in their search session, and can thus inform us the attributes that give handbags  X  X esigner X  ap-peal. These associations are then used to retrieve products from the product catalog, over which we infer sets of attribute values that best describe the modifiers. We conduct a comprehensive study to evaluate our approach, and find that in 95% of the cases users agree with our selected attribute values for the modifiers and in 87% of the cases prefer the results based on our reformulated queries to the original ones. We direct the reader to [6] for a full version of this paper.

The remainder of the paper is organized as follows. We first re-view past work on commerce search and query reformulation in Section 2. We then explain our approach of combining user browse signals with structured data from product catalogs to produce can-didate reformulations in Section 3. We present a comprehensive user study conducted over the Mechnical Turk platform in Sec-tion 4. We conclude with our main findings and suggest future research directions in Section 5.
Previous work on understanding commerce queries has focused on the problem of inferring the attributes to be associated with typed tokens [8, 10]. In this work, we assume access to such a parser to understand the typed tokens and focus on the problem of reformulating queries that contain modifiers into ones that spec-ify precise attribute values that can well satisfy the users. In this respect, our work also differs from the traditional query reformu-lations [5, 8] and document expansion [2, 4] since our goal is to map free tokens in the query to structured attribute values describ-ing the products in the catalog. When semantics is inferred for only a subset of tokens, search is performed by combination of exact or approximate match of typed tokens against the attribute values in the index and keyword search against the textual description of the product (using the free tokens ). Recent literature has focused on ef-fective answering of keyword queries, in the light of sparse and/or inaccurate textual descriptions ( c.f. [12] for a recent survey). These methods make an essential assumption that the keywords appear in the database. Our work does not make such an assumption and in fact, aims to infer a mapping from keywords to attribute-value pairs.
Our work is done in the context of a commerce search engine that answers commerce queries given a product catalog. We as-sume the existence of a semantic parser that identifies the attributes in the query and extracts their associated values, based on past work such as [10]. We call the processed queries annotated queries . For example, the query [ gucci handbags ] will be annotated as [ category:handbags brand:gucci ]. However, not all tokens in the query can be matched to an attribute. Such tokens will be marked as free by the parser, e.g., the token designer . Some of these tokens modify the sets of products to be retrieved. Our goal is to identify such modifiers and reformulate queries with modifiers into ones that specify precise attribute values that can well satisfy the users, such as from [ category:handbags free:designer ] to [ category:handbags brand:gucci material:leather ].
 The following notations will be used throughout the section. Let P denote a database of products. Let A denote the set of attributes of the products, with | A | = k . For each attribute a  X  A , let V the set of valid values for attribute a . We denote the set of all valid attribute-value pairs, or AV pairs for short, by AV , defined by the set { ( a , v ) : a  X  A , v  X  V a } . Each product p  X  P is represented as a set of AV pairs, { ( a 1 , v 1 ) , ( a 2 , v 2 ) ,..., ( a k , v For a set of AV pairs S , let P ( S ) denote the subset of products in P that match all of the specified attribute values. For example, if S = { ( brand, sony ) , ( diagonal size, 32 ) } , then P ( S ) represents all products with brand equals sony and with diagonal size equals 32.
Let U denote the collection of user browse sessions. Each ses-sion, called a browse trail , is associated with a query and a se-quence of websites visited by the user. Let D denote the set of domains in U , and T denote all tokens in the queries. These tokens include both typed tokens expressed as AV pairs and free tokens that the parser cannot map to any attribute value, denoted by F . We consider some of these free tokens to be modifiers , i.e., tokens that restrict the subset of products to be retrieved, denoted by M . The goal of our work is to find an algorithm that associates each modifier m  X  M with a set of AV pairs S  X  AV .
Given a query containing a modifier, our approach attempts to discover the relevant product attributes by analyzing the websites users visit after their queries. As search engines may fail to sur-face good results due to inability to understand the modifiers, we consider all of the user search activities including the queries, the clicks, and the subsequent browsing behavior, collectively known as browse trails [3, 9, 11]. Formally, given a collection of browse trails U , we compute the frequency counts c ( t , d ) of how often queries containing token t  X  T ends up visiting domain d  X  D . The frequency counts are computed using a variant of the heavy hit-ter algorithm. For each trail u , we create a set of token-domain pairs by pairing up each domain in u with each of the tokens in the originating query, and run a sampling-based algorithm to determine approximate counts. The resulting frequency counts can be shown to be close to the true counts [9]. Given these counts, together with suitable normalization, we can compute for example the distribu-tion of free tokens for a given domain d , P ( f | d ) for f  X  F . These are used in identifying the set of valid modifiers and estimating the association probabilities between modifiers and AV pairs. Algorithm 1: Generative model of modifiers and AV pairs.
 Pick a domain d according to P ( d ) Pick an attribute a according to P ( a | d ) Pick a value v according to P ( v | a , d )
Pick a modifier m according to P ( m | d )
The goal of this step is to identify the set of modifiers from amongst all free tokens. Intuitively speaking, we consider a free token to be a valid modifier if it helps the user distinguish what kinds of products she has in mind. As our analysis is aggregated at the domain level, we consider a free token to be distinguishing if the webpages the users went to are concentrated over few domains.
Drawing on this intuition, we propose a scoring mechanism based loosely on the TF-IDF retrieval function. Specifically, for each free token f  X  F , let im p ( f ) denote its importance score, as given by where d f ( f ) is number of domains in D for which the free token f has a non-zero weight. We then select the 10 free tokens with the highest scores for each category as candidate modifiers.
We postulate a generative process of modifiers and AV pairs as described in Algorithm 1. The generative process allows us to rea-son in a principled manner about the relationship between the mod-ifiers and the AV pairs. We can write the joint distribution as a product of conditional distributions: Each of these quantities can be directly obtained from the frequency counts computed in Section 3.1.

By marginalizing the joint distribution with respect to the do-mains, we obtain The conditional probability of an AV pair ( a , v ) given a modifier m , which we call the association score , equals: The scores constitute a candidate mapping between modifiers and AV pairs, and are used as input to the final rewrite generation step.
Our goal is to find mappings from modifiers to sets of AV pairs that (a) bring in combinations of pairs that are precise to the modi-fier, and (b) generalize well. Hence, we look for rewrites that pin-point specific attribute values and cover many products that match the AV pairs with high association scores. As AV pairs that are common in the catalog are more likely to be associated with a modi-fier by chance, we also want to weight AV pairs by their frequencies in the catalog. This leads us to the concept of coverage scores .
D EFINITION 1 (C OVERAGE S CORES ). Let the set of AV pairs with association scores be denoted by C = { ( a i , v i , s fine the weight function w : P 7 X  R + as
Algorithm 2: Identify Product Features input : A set C = { ( a i , v i , s i ) } m i = 1 of AV pairs ( a output : A set S = { ( S j , c j ) } n j = 1 of sets of AV pairs S
P 00  X  /0 , W  X  0; foreach ( a i , v i , s i )  X  C do end
S  X  /0; for  X   X  ( 0 , 1 ) do end return S ; which measures how well product p satisfies the set C.

The coverage score s of a set of AV pairs S = { ( a i , v respect to AV pairs with association scores C and importance val-ues of attributes z : A 7 X  R + , equals c ( S ) = w ( S ) z ( S ) , where for which w ( S ) can be interpreted as the fraction of weights that the products satisfying S covers among all products, and z ( S ) the relative importance of the attributes covered in S.

We were unable to determine if an efficient algorithm exists for finding the set of AV pairs that maximizes the coverage score. We consider a heuristic based on finding frequent itemsets, where in our setting an item corresponds to an AV pair, and an itemset corre-sponds to a set of AV pairs. Lemma 1 connects the two problems.
L EMMA 1. A set of AV pairs with the highest coverage score must be a maximal itemset for some threshold  X  .

Our algorithm for finding the set of AV pairs with the highest coverage score is given in Algorithm 2. The F IND -I TEMSET can be adapted from past work such as the apriori algorithm [1] to incorporate weights. Based on Lemma 1, one needs to try all values of  X  to find the set of AV pairs with the highest coverage score. In implementation, we conduct an  X  -grid search over the range ( 0 , 1 ) . In experiments, we find that our results are not sensi-tive to the choice of  X  as long as it is smaller than 0 . 1. An interest-ing research question is to establish a guarantee on the quality of the candidate set as a function of  X  .
We conducted a series of experiments to evaluate our approach for rewriting queries that contain modifiers. The first two exper-iments focus on the association scores, and evaluate the absolute Key Category Modifiers Kitchen Appliances AC Airconditioners central, commercial, ductless DW Dishwashers portable, quiet KN Knives chef X  X , gourmet OV Ovens freestanding RF Refrigerators counter-depth, small, undercounter Clothing and Accessories HB Handbags casual, designer, evening JK Jackets designer, insulated, kids, retro WL Wallets designer, stylish Consumer Electronics DP DVD Players portable, remote, streaming RD Radar Detectors portable, remote TV Televisions portable, remote, streaming VR Voice Recorders portable, remote
Table 1: Categories and modifiers evaluated in experiments. and relative relevance of the selected attribute values. The third experiment evaluates the end-to-end user experience of the search results retrieved based on the reformulated queries compared to that of using the original queries.
We obtained the search and browse histories from consenting users of a popular browser toolbar over a 6-month period between November 2010 and April 2011. We first classified the queries into product categories using a Na X ve Bayes text classifier, and selected a number of categories of products for which there are an abun-dance of queries (over 10 , 000 queries per category). The queries from the selected categories were then parsed and annotated with type semantics on the techniques described in [10]. Next, we pro-cessed these histories as described in Section 3.1. A set of valid modifiers was selected based on the criteria described in Section 3.2 (see Table 1). We restricted the experiments only to these sub-sets based on the number of queries each modifier-category pair received and the uniqueness of the category under the top-level categories (of consumer electronics , kitchen appliances , and clothing and accessories ).

For each category, we retrieved product details from a product catalog where each product is specified as a set of attribute-value pairs as described in Section 3.
In the first experiment, we evaluated the absolute relevance of the attribute values with high association scores for a modifier. The experiment is set up as follows. For each modifier of each cate-gory, we selected the five values with the highest association scores for each attribute. We then asked human judges to rate whether each of the selected attribute values are relevant to the modifier in question. The judges are given three options: relevant , not relevant , and unable to decide . Each attribute-value pair is evaluated seven times. We post-process the results by filtering out any judgment that fails a simple sanity test. 1
We deliberately left some entries blank, and caught and threw out judges who assigned relevant to such entries. Figure 2: Agreements rates of the selected attribute values by categories. Categories that belong to the same major category are further grouped by colors.
 Table 2: Anecdotal examples of attribute values with high as-sociation scores for select modifiers
We measured relevance by agreement rates , defined as The results by categories are shown in Figure 2.

Across the 12 categories, the average agreement rate of the se-lected attribute values is about 95%. The results are consistent across the top-level categories, with the average agreement rate for kitchen appliances, clothing and accessories, and consumer elec-tronics being 94%, 95%, and 97% respectively.

We present in Table 2 some anecdotal examples of the attribute values presented to human judges. For portable dishwashers , the association scores rank the top manufacturer to be Danby fol-lowed by Edgestar . To verify this result, we manually examine a number of commerce portals and found that 24" Danby dishwash-ers are considered a good candidate for portable dishwashers. Like-wise, we examine the manufacturers selected for evening handbags. We found that Sydney Love handbags are typically more colorful and small compared to other manufacturers, two aspects that are usually associated with evening handbags. In the category of re-frigerators, we find that people who search for small refrigerators often look for wine chillers, beverage coolers etc. Our results bear out our hypothesis. Finally, going through the products pages of dishwashers made by Dacor and made by Fisher and Paykel, we found words such as WhisperWash and Quiet that are used to de-scribe the features of these dishwashers on Amazon.
In the final experiment, we evaluated whether our query refor-mulation technique leads to improved relevance in the results re-trieved. The experiment is set up as follows. For each modifier of each category, we consider the set of AV pairs with the highest coverage score as produced by Algorithm 2. We generate a query reformulation by concatenating together the attribute values. We is-sued both the reformulation and the original query to Amazon, and asked human judges to rate which of the results are more relevant to the original query.

In 15 out of 18 queries (87%), the judges prefer the reformula-tion over the original query. Examining the result pages for both queries, we find that our results are better partly because of the products they retrieved, and partly due to the inclusion of solely products that belong to the category in question. For example, the query [ ductless air conditioners ] retrieved a mix of air conditioners, books, and remote controls, whereas the reformula-tion [ sanyo mini split air conditioners ] retrieved only air conditioners. This example highlights the danger of treating each query word as a keyword, as the keyword often cause unintended matches.
Our approach to inferring and associating AV pairs to modifiers is based on wisdom of crowds through the use of browse trails. Using the browse trails of a large number of users, we associated modifiers to the attribute value pairs, and used these associations along with their probabilities to infer sets of AV pairs that best de-scribe the semantics.

Our first experiment showed that the top scoring attribute-value pair associations are highly relevant to the modifier. This validates our assumption that the domains that the users reach are likely to be similar for the queries that contain a modifier and its associated attribute-value pairs. Therefore, by tracing the trails of domains, one can find reliable associations. The second experiment shows the importance of generalizing the associations to enable better re-call, both by adding additional attribute value pairs not present in the queries, and by identifying more holistic representation of the associations. In 87% of the cases, the re-written query using our approach resulted in retrieval of products considered more relevant by the users.
 There are certain limitations to the experiments presented. First, Mechanical Turk experiments are often noisy, and human judges could be subject to different sources of biases. As noted before, we found that the human judges in the experiments have exhibited a bias towards better known brands. This bias does not necessarily work in our favor as our approach is not designed to take advantage of popular brands. Indeed, for a number of cases our algorithm ends up selecting lesser-known specialty brands over well-known brands. Second, human judges may not be always knowledgeable about the particular products. As discussed in the Introduction, users issue queries containing modifiers partly due to lack of do-main knowledge and do so to seek help from the search engine. They may be unfamiliar with the manufacturers that specialize in making streaming DVD players or in making quiet dishwashers. However, note that we are not asking the human judges to come up with the mapping, but rather to validate the algorithmically gener-ated mapping, a relatively simpler task.

We would like to end this section by discussing limitations to our approach. Our solution takes as input from several components and its ultimate success depends on the precision of these components. Problems in these components can manifest itself in a variety of ways. For example, queries can sometimes be misclassified, and annotations may confuse one attribute with another. Such errors often lead to poor estimates of association scores. The product catalog we work with has many missing values. This limits the success of our final reformulation step as all the coverage scores were depressed. Improving the quality of the catalog will certainly improve our results, and this was confirmed in a smaller-scale ex-periment where we manually scrubbed the air conditioner database and obtained better results.
We study the problem of query reformulation in commerce search that map queries containing modifiers to ones that specify pre-cise attribute values of the products to be retrieved. We did so by combining user behavior data and the product catalog of a com-merce search engine to produce the mappings. The user behavior data provides us with an initial association of attribute values with modifiers, the signal of which was then amplified and generalized through the use of the product catalog to identify common features of the products that satisfy the selected attribute values. As part of a comprehensive user study, we find that users agree with the at-tribute values selected by our approach in about 95% of the cases and they prefer the results surfaced for our reformulated queries to ones for the original queries in 87% of the time. [1] Rakesh Agrawal and Ramakrishnan Srikant. Fast algorithms [2] Sanjay Agrawal, Kaushik Chakrabarti, Surajit Chaudhuri, [3] Mikhail Bilenko and Ryen W. White. Mining the search [4] Surajit Chaudhuri, Venkatesh Ganti, and Dong Xin.
 [5] Shady Elbassuoni, Maya Ramanath, and Gerhard Weikum. [6] Sreenivas Gollapudi, Samuel Ieong, and Anitha Kannan. [7] Sreenivas Gollapudi, Samuel Ieong, Alexandros Ntoulas, and [8] Xiao Li, Ye-Yi Wang, and Alex Acero. Extracting structured [9] Debmalya Panigrahi and Sreenivas Gollapudi. Result [10] Nikos Sarkas, Stelios Paparizos, and Panayiotis Tsaparas. [11] Ryen W. White and Steven M. Drucker. Investigating [12] Jeffrey Xu Yu, Lu Qin, and Lijun Chang. Keyword Search in
