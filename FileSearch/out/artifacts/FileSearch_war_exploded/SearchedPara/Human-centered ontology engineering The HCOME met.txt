 REGULAR PAPER Konstantinos Kotis  X  George A. Vouros Abstract The fast emergent and continuously evolving areas of the Semantic Web and Knowledge Management make the incorporation of ontology engineer-ing tasks in knowledge-empowered organizations and in the World Wide Web more than necessary. In such environments, the development and evolution of on-tologies must be seen as a dynamic process that has to be supported through the entire ontology life cycle, resulting to living ontologies. The aim of this paper is to present the H uman-C entered O ntology Engineering Me thodology (HCOME) for the development and evaluation of living ontologies in the context of communities of knowledge workers. The methodology aims to empower knowledge workers to continuously manage their formal conceptualizations in their day-to-day activities and shape their information space by being actively involved in the ontology life cycle. The paper also demonstrates the H uman C entered ON tology Engineering E nvironment, HCONE, which can effectively support this methodology.
 Keywords Semantic web  X  Ontology engineering  X  Human-centered computing  X  Knowledge management 1 Introduction Ontologies are formal conceptualizations of domains, describing the meaning of (abstract and concrete) domain aspects by means of concepts and their interre-lations [ 1 ]. Ontologies have been realized as the key technology to shaping and exploiting information for the effective management of knowledge and evolution of the Semantic Web. Ontologies establish a common vocabulary for commu-nity members to interlink, combine, and communicate knowledge shaped through practice and interaction among community members, binding the knowledge pro-cesses of creating, importing, capturing, retrieving and using knowledge [ 19 ]. ganizations can prove to be a hindrance if not done in a way that is seamless to the day-to-day activities of the organization members [ 24 ]. Traditionally, knowl-edge engineers develop the ontologies that are required by knowledge workers, and provide these ontologies for exploitation. However, due to constant updating, changing and evolution of ontologies, there must be a close collaboration between knowledge engineers and knowledge workers, 1 requiring the active and decisive involvement of the latter in all stages of the ontology engineering processes [ 20 ]. explicating the meaning of the worldwide available information. Ontologies con-stitute the backbone of this effort, providing machine-exploitable semantic infor-mation for the Knowledge Web. But how could we possibly populate the Semantic Web, enabling information providers to attach semantic information to every pub-lished information item, shaping also their consensual conceptualisations? Current efforts aim to support the automatic and manual structuring of web pages using ontologies, in conjunction to ontology learning and enrichment. In conjunction to these approaches, we believe that people must be empowered to manage their ontologies shaping their common information space.
 gineering of ontologies within a knowledge management setting. From feasibility analysis and identification of goals, to requirements X  specification, implementa-tion, evaluation and maintenance of ontologies, the ontology life cycle must be clearly defined and further supported by ontology engineering tools [ 21 ]. Early ontology engineering methodologies have been developed to support knowledge engineering tasks, starting from the feasibility analysis and requirements spec-ification of a knowledge-based system and proceeding to its deployment. Most recent methodological approaches [ 4 , 21 ] focus on the application-driven engi-neering of ontologies, supporting the introduction of ontology-based knowledge management systems. According to all these approaches, the development, main-tenance and evolution of ontologies is primarily a process driven by the knowl-edge engineer who gathers updates to the ontology and initiates the switchover to a new version of the ontology after thoroughly testing possible effects to the application. Only very recent ontology engineering methodologies concern about the role of knowledge workers and about their active involvement in the ontology life cycle [ 15 ]. However, no methodology fully supports the decisive involvement of knowledge workers in the ontology life cycle. Specifically, existing ontology engineering methodologies: 1. Emphasize on the role of knowledge engineers (or of a centralized structure 2. Do not support the seamless integration of ontology engineering tasks to 3. Are not fully supported by tools that empower knowledge workers to actively proach to the engineering of ontologies, called HCOME where the active partici-pation of knowledge workers in the ontology life cycle is accentuated. Doing so, ontologies are developed and managed according to knowledge workers X  abilities, are developed individually as well as conversationally, and are put in the context of workers X  experiences and working settings, as an integrated part of workers X   X  X nowing X  process [ 2 , 24 ]. Leveraging the role of knowledge workers by empow-ering them to participate actively in the ontology life cycle, the human-centered approach entails the development of tools that provide greater opportunities for them to manage and interact with their conceptualisations in a direct and continu-ous mode.
 ical approaches let us consider the following scenarios in a living organization setting:  X  Scenario No. 1: Involved in a knowledge retrieval process, a worker is search- X  Scenario No 2: In a knowledge use process, a worker browses, recalls existing  X  Scenario No 3 : In the day-to-day information creation and import tasks, work-knowledge workers in shaping their information through their active and decisive involvement in ontology engineering tasks. Section 2 of this paper presents issues concerning the engineering of ontologies in the context of communities of knowl-edge workers, and Sect. 3 points on generic requirements for the human-centered engineering of ontologies. Section 4 presents the Human Centered Ontology Engineering Methodology (HCOME), and Sect. 5 presents the overall architec-ture and functionality of a human-centred environment for ontology engineering (HCONE), which have been designed and implemented to support the deploy-ment of the HCOME. Section 6 presents related work and results concerning a preliminary evaluation of HCOME. Finally, Sect. 7 concludes the paper. 2 Engineering of ontologies As it is widely argued and shown in the above scenarios, ontologies explicate con-ceptualizations that are shaped and exploited by humans during practice .Being part of knowledge that people possess, conceptualizations evolve in communities as part of knowing [ 2 ] .  X  X nowing X  is about interactions with the world as well with members of communities, with the aim to create new knowledge. Personal knowl-edge is created through practice, whereas group knowledge is created through interaction between community members.
 nities of knowledge workers involves their development, evaluation, exploitation and their continuous evolution as part of knowing , as humans achieve their goals in their working contexts. In particular it involves:  X  The development of personal conceptualizations. People develop their own  X  The development of commonly agreed group conceptualizations . Developing  X  The evaluation and exploitation of conceptualizations. Exploitation and eval-their conceptualizations include their unfamiliarity with formal representation languages and knowledge engineering principles/methods, as well as with meth-ods and techniques for constructing and synthesizing ontologies. Existing ontol-ogy engineering environments and methodologies have been designed and imple-mented for the knowledge engineer, concentrating mostly on the ontology devel-opment process. This leads communities of knowledge workers to develop se-mantically poor thesauruses for their domains, or even abandoning the trial for semantically annotating their resources, since in most of the cases they are not willing to pay the costs implied by employing knowledge engineering resources. gous to the user-centered software engineering approaches: Knowledge engineers with the participation of domain experts (artefact X  X  users) gather the requirements for the ontologies, and either by using a knowledge representation language or by using an ontology engineering environment, design and implement prototype ontologies. These ontologies are commented by experts to be further improved so as to asymptotically represent a consensual conceptualisation of the domain at hand. This contrasts to the old-fashioned technology-centered design approach in which developers gather requirements, design and implement an artefact and leave users to cope with what they have produced. However, even with the involvement of users, the approach to ontologies engineering is still mostly machine-oriented: Knowledge engineers deal with these artefacts at the symbol level, mediating be-tween domain conceptualisations and their formal representations, which cannot be further manipulated or even (in some cases) be inspected by domain experts. This leads to a machine-oriented, knowledge engineer-centered ontology engi-neering approach. It relies heavily on de-contextualized principles of engineering ontologies, with formal means for capturing subtle domain aspects, but does not deal with the way people develop their conceptualisations in the context of their day-to-day activities, individually or conversationally with colleagues. participate actively in the ontology engineering processes in collaboration with knowledge engineers. In particular, they must be enabled to develop, evaluate and further evolve ontologies individually and conversationally with their co-workers, according to their cognitive abilities, skills, knowledge base and context of work. Ideally, this must happen in the background of the day-to-day knowledge intensive activities of workers, in a seamless way to their working practices, and so that the semantic validity of specifications is assured. 3 The human centered engineering of ontologies Taking into account the above mentioned issues, constraints and considerations to the engineering of ontologies, and to: (a) support the active and decisive involvement of knowledge workers in all stages (b) further empower people to engineer their ontologies shaping their information We propose a human-centered approach to the engineering of ontologies. This is an in-principle approach to devising ontology engineering methodologies and construction supporting tools, that emphasizes at providing greater  X  X pportunities X  for the members of knowledge management organizational units to develop their conceptualizations during their day-to-day activities [ 7 ].
 of computing in society, towards a new age of human and machine symbiosis [ 7 ]. Joint research efforts on cognition, ergonomics, psychology, social sciences and information technologies contribute to the development of human-centered systems, leading to a new world of applications and services. In this new era, systems X  designers have to really understand the use of systems in conjunction with the cognitive abilities , contextual constraints and activities of users . the triple of  X  X eople-machine-context X  as the unit of analysis [ 7 ]. This principle involves studying people capacities and goals, computational mechanisms and interface capabilities, all within their appropriate contexts. Context involves or-ganizations, activities, practices, norms and constraints that are inherent in these activities, policies, procedures, as well as devices and media that people use for communicating and doing their work.
 the context of organizational structures, we shall not focus (at least in the first place) on object-centered representation formalisms or on other technolog-ical/engineering issues, but put special emphasis on the physical way of interact-ing with these conceptualizations and on the way conceptualizations are formed by means of people interacting among themselves and practicing.
 interests and aims. Although domain or decision tasks may be well distributed among them and there may be power relations among them, knowledge work-ers share a common conceptualization that provides the basis for their consensual domain conceptualization. However, due to their complimentary knowledge, the domain conceptualization is considered to be distributed among them. Therefore, we consider that knowledge workers contribute to ontology specifications on an equal basis. On the other hand, concerning the cognitive and perceptual capabil-ities of knowledge workers, we must emphasize that they are not familiar with knowledge representation languages, ontology engineering principles and prac-tices. Therefore, they must manipulate ontologies at a level of abstraction that is more  X  X onvenient X  for them, interacting with their conceptualizations in a direct mode.
 develop ontology engineering environments that would empower specific persons in specific contexts, following well-established ontology engineering methodolo-gies for the design of human-centered information systems (e.g. [ 26 ]). However, rather than examining a specific case for engineering ontologies, we point on im-portant generic issues for the human-centered engineering of ontologies within organization structures. The list of issues is by no means complete. However it points on what we consider to be the most important issues that need to be con-sidered within an ontology engineering methodology, based on the characteristics of knowledge workers that the above analysis reveals: 1. Allow an eclectic way to the development of ontologies. Members of communi-2. Emphasize on the need for a natural and consistent way to interact with 3. Provide the means for exchanging, using and evaluating ontologies conversa-4. Consider mapping of concepts X  definitions to other ontologies and/or lexical ers to actively participate in the ontology life cycle following a human-centered methodology, the whole life cycle must be supported by appropriate tools. 4 HCOME: A human-centered methodology to ontology engineering In this section we describe the HCOME methodology to ontology engineer-ing that points to the way knowledge workers develop their conceptualisations continuously through the phases of requirements specification to that of ontolo-gies X  deployment, development and maintenance, exploitation and evaluation. 4.1 Description of the HCOME approach HCOME provides clear distinction between the phases of the ontology life cycle, goals that should be achieved in each phase and tasks that can be performed so as to achieve these goals. These are summarized in Table 1 .
 reached between knowledge workers. Tasks are performed by workers either indi-vidually or conversationally. In the first case, we consider that tasks are performed in the personal space of workers (marked in Table 1 with the letter  X  X  X ). In the latter case, tasks are performed in an information space that a group of knowledge workers shares, i.e. in a shared space (markedinTable 1 with the letter  X  X  X ). A worker can initiate any ontology engineering task in his personal or shared space, or take part to a task that has been initiated by other members of the community. issues described in Sect. 3. 4.1.1 Specification phase During the HCOME specification phase, knowledge workers are joining groups that are about to develop shared ontologies. Having identified themselves within a group, during this initial phase of ontology engineering, workers are discussing re-quirements, produce specification documents, and agree on the aim and the scope of the new ontology. This phase may start from a worker that has already formed a conceptualisation of specific domain aspects and needs the contribution of col-leagues to further develop the conceptualisation.
 shared space and includes: a. The specification of the scope and aim of the ontology. This is essential in b. An argumentation dialogue between the members of the team to obtain com-c. Recording of the agreed specifications in appropriate forms and documents. 4.1.2 Conceptualisation phase Having agreed on the scope and aim of the ontology to be developed, workers in their personal space can follow any approach or combination of approaches to the development of ontologies: They may improvise by integrating concepts in a con-ceptual system, provide concepts with informal definitions attaching information items to them, compare, merge and refine/generalize existing ontologies. Since the consultation of other well-known and/or widely acknowledged resources is critical to the ontology development process, the collaborators may perform this task before sharing their conceptualisations with others. Collaborators should be able to create, store, maintain, compare, merge and manage different versions of ontologies.
 a. The import of existing ontologies, for the reuse of conceptualisations. b. The consultation of generic top ontologies, thesauruses and domain resources, c. The improvising of ontologies, allowing the from-scratch development of for-d. The mapping, merging and management of multiple versions of ontologies, e. The comparison of different versions of an ontology, for tracking ontologies X  f. Attaching to ontology concepts information items with further comments, ex-4.1.3 Exploitation phase The need to achieve a common understanding about the working domain, push in-evitably ontologies developed in personal spaces to the shared space [ 24 ]. Shared ontologies can be used within workers setting, in the context of specific ontology-driven applications and tasks, and exploited and evaluated conversationally. The exploitation of an ontology version that has been developed by a colleague is seen as part of the ontology life cycle because it provides feedback for the conceptual-izations developed. The evaluation and further development of personal ontologies is achieved via a structured conversation, and criticism on the ontology versions posted in the shared space. The recording of this conversation enables the tracking of changes and rationale behind ontology versions, supporting the decisions on conceptualising the domain in the final ontology.
 a. The inspection of agreed or shared ontologies either by individuals in their per-b. The comparison of shared versions of an ontology, for identifying the differ-c. The posting of arguments upon versions of ontologies for supporting workers 5 HCONE support to the HCOME H uman C entered ON tology Engineering E nvironment is a prototype environment [ 8 ] that has been designed and implemented taking into account the above-pointed generic issues for the human-centered engineering of ontologies, with the aim to support HCOME. The overall architecture of HCONE is shown in Fig. 1 .
 gies in a personal space, publication of ontologies in a shared space, formation of groups for the conversational development of ontologies, and participation in argumentation dialogues for reaching consensual conceptualizations. Agreed on-tologies are stored in a virtual space and can be further evolved in workers X  per-sonal space, become shared and so on.
 functionality in any HCONE point. Doing so, workers are free to combine their own method using the environment, following an eclectic way to ontology de-velopment. For instance, a worker may construct an ontology in her personal space while receiving comments on a previous version of the same ontology that has been shared with co-workers. In the meantime, she is trying to comply with generic ontological commitments that the group has agreed to comply with, whereas in another slice of her work she is trying to merge her ontology with an ontology issued by a co-worker.
 (a) decide on the scope and aims of ontologies; (b) improvise domain conceptualizations by constructing personal ontologies; (c) consult generic ontologies that provide important semantic distinctions and (d) manage different versions of their ontologies, tracking the differences be-(e) get proper consultation from machine exploitable/readable lexicons by map-(f) merge ontologies and further manipulate merged conceptualizations; (g) share their ontologies with groups of co-workers; and (h) follow argumentation dialogues towards consensual domain conceptualiza-is separately discussed in the next section, concerns sharing ontologies with group members and supporting group members X  participation in structured conversations about conceptualizations. This is a built-in, rather than a generic argumentation or threaded patched-on discourse facility, since it has been designed to support people to discuss ontological aspects and incorporate their suggestions/positions to specifications. This functionality, with the distinct name SharedHCONE, sup-ports contextualization of the built ontologies, criticism and evaluation of the built artefacts, identification of possible opportunities for community members X  collab-oration, and helps workers overcome deadlocks within problematic situations that arise in ontologies specification.
 relation to the three phases of the HCOME approach to ontology engineering. 5.1 Specification phase The HCOME specification phase is supported by SharedHCONE. Among others, SharedHCONE provides support to the tasks of identifying a group of collab-orators and of specifying conversationally the scope and aims of the ontology. SharedHCONE realizes a shared space where any group member can post a new ontology, specifying the subject, scope and aim for constructing this new ontol-ogy. Having publicized an ontology, all community members receive an e-mail message that provides details about the new ontology, as these are specified by the initiator of the discussion, and calls community members to become members of the discussion group. Being members of the group, it is assumed that community members have already agreed on the importance of the new ontology, and commit to take part in the upcoming discussion.
 aiming to reach an agreement on the aim and scope of an ontology, are discussing requirements, produce specification documents, raise issues concerning the scope and the aim of the ontology, make proposals, state arguments for and against these proposals. The argumentation model of SharedHCONE is further explained in the paragraphs that follow. 5.2 Conceptualization phase Having specified the aim and scope of an ontology, collaborators can either con-struct their own version of that ontology in their personal space using HCONE, and then post it to the shared space for further discussion and evaluation using SharedHCONE. Furthermore, workers can download shared or agreed ontology versions from the SharedHCONE shared space to their personal space, to elabo-rate and evaluate them, and produce new versions. These versions can be posted again to the shared space for further discussion and evaluation.
 constructing and refining ontologies, for merging existing ontologies and for con-sulting generic lexicons and ontologies. 5.2.1 Constructing and refining ontologies HCONE supports people to interact with their conceptualizations hiding low-level implementation details, enabling them to express subtle ontological distinctions, complying at the same time with formal constraints of specifications. Formal spec-ification of ontologies in HCONE is done in the NeoClassic Description Logic [ 14 ].
 pressive power of NeoClassic, without dealing with low-level implementation de-tails. As is it shown in Fig. 2 , this is achieved by following canned natural lan-guage dialogues based on a slight variation of the What-You-See-Is-What-You-Meant (WYSIWYM) [ 17 ] knowledge-editing paradigm. Although users specify the definition of a concept, they get a feedback text that reflects the definition of the corresponding concept (part 1 of Fig. 2 ) whereas in the background a for-mal Description Logic definition is constructed, which can be further converted to standard schemes. Typical tasks that users may perform when defining a concept include concept and roles mapping to word senses through lexicon consultation (described in the next paragraphs), checking for concepts X  definition consistency, and deletion/addition of relations with other concepts.
 sions of an ontology. The versioning mechanism is not currently very sophisti-cated. It requires from users to assign specific suffixes on ontology file names to indicate that these are versions of a source initial ontology. However, a more ad-vanced version management mechanism, which will be presented subsequently, is provided by SharedHCONE. Additional functionality on ontology comparison enables users to identify differences between ontology versions. The comparison functionality provides the means for comparing any pair of ontologies, indicating similarities and differences for concept /role definitions and pointing on concepts and roles that are specified only in one of the ontologies compared.
 seamless access to reasoning services provided by Description Logics. These services include automatic concepts X  classification, concepts X  definitions con-sistency checks (e.g. between a concept and its subsumers) and detection of concepts X  definitions differences. Feedback from these reasoning services is constantly provided to users during ontology construction/ management and is of high significance. For instance, as Fig. 3 shows, although tracking the differences between two versions of the same ontology, as well as during merging, reasoning services identify semantically equivalent definitions, allowing proper handling of versions and disallowing semantic errors. 5.2.2 Consultation of generic ontologies Knowledge workers may follow a deductive approach to concepts X  specifications by elaborating a generic top ontology. In this case, concepts X  definitions can be checked for their semantic validity against generic conceptualizations by means of the consistency checking mechanisms provided by the representation and reason-ing system. In doing so, the construction of domain specific ontologies is speed-up, since it is guided by the semantic distinctions and ontological principles of the generic ontologies consulted. HCONE, in its current status, provides the option of importing any generic ontology, given that it has been implemented in NeoClas-sic. We have contacted experiments with a generic ontology for terminological resources that incorporates EuroWordNet and SIMPLE semantic commitments [ 25 ]. 5.2.3 Consultation of lexicons Critical to the ontology specification process is the lexicons consultation process. Through lexicon consultation, users are guided to the consensual definition of terms, guided to follow well-established norms and practices in the community they are exercising their practice (e.g. by consulting a terminological lexicon or a thesaurus) or in the wider context (e.g. by mapping their conceptions to the appro-priate word senses in a lexical database). In HCONE, lexicon consultation can be supported in any of the following two ways: (a) by mapping concepts definitions to word senses of a machine-readable/exploitable lexicon, (b) by simply consulting lexicons and other resources.
 cover the human-oriented-intended semantics of concepts specifications, clarify-ing humans intentions and enabling them to bridge different perspectives in con-ceptualizing a domain.
 Semantic Indexing (LSI) technique [ 3 ]. LSI is a vector space technique for infor-mation retrieval and indexing. LSI has been chosen since it provides high precision in mapping concepts meaning to word senses, which, based on our experiments, can be up to 70% [ 9 ].
 semantic space where terms and documents that are closely associated are placed near one another. Currently, HCONE exploits the WordNet [ 12 ] lexical database to match descriptions of terms provided by the user with word senses in WordNet. LSI in this case constructs a semantic space of terms and word senses. of a given concept are shown to the user in an ordered way (best matches first). In case no WordNet senses are found that correspond to user X  X  specifications, then the user is asked to provide a word sense that is close to his specifications. Further experiments [ 9 ] have recently shown that a semiautomatic method can be applied to minimize user involvement in validating mappings to WordNet, keeping the precision still in high percentages.
 (i.e. description logic role names) are also mapped to word senses. Currently, the results of role name mapping are exploited only for the generation of the feedback text during concepts X  definition. 5.2.4 Merging ontologies In conjunction to the formal definition of concepts, having mapped terms to word senses, HCONE has gathered the informal intended meaning of terms. Having done that, concepts in different ontologies can be associated among themselves, resulting in effective merging of ontologies.
 produces a new ontology [ 9 ]. The merging functionality exploits all the available types of knowledge available: Linguistic, structural, domain knowledge, and also some matching heuristics. Recently, due to the importance of this task in the on-tology engineering life cycle, we have developed methods for the semiautomated mapping and merging of ontologies [ 9 ].
 results of the merging process to the end user as a feedback report that describes the merging actions that the system has performed.
 further manipulated according to users X  preferences. 5.3 Exploitation phase Having constructed a new version of an ontology in his personal space, a collab-orator may post it to the shared space using the HCONE post functionality. To manage ontologies in the shared space, SharedHCONE provides facilities that as-sist collaborators to produce an agreed ontology, which will be uploaded to the SharedHCONE agreed space. 5.3.1 Sharing ontologies SharedHCONE supports contextualization of the constructed ontologies in orga-nizational working practices and workers experiences, criticism and evaluation of the built artefacts, identification of possible opportunities for collaboration among workers, as well as overcoming deadlocks within problematic situations that arise in conceptualizing a domain.
 pose solutions and post arguments concerning an ontology that has been shared (Fig. 6 ). Specifically, the argumentation dialogue follows a version of the IBIS model [ 10 ], which is based on three main abstractions.  X  Issue , representing a problem to be solved;  X  Position , which can be either a solution to an issue raised, or a new version of  X  Argument , which can be either a  X  X upporting argument X , speaking in favour of a generic model shown in Fig. 7 . The users are able to post issues, arguments and positions following a variation of the IBIS model. Performing dialogue acts, users construct a discourse graph that is presented in the form of a threaded discussion. According to the SharedHCONE argumentation model, an issue represents a deci-sion problem. A position is a statement that resolves an issue and can be a posting of a new version of an ontology. The argument either supports or objects a posi-tion. These abstractions are related by predefined relationships, as it is shown in Fig. 7 . We have also limited the IBIS model to seven relationships between the ab-stractions mentioned: zero or more positions or versions of an ontology may pro-vide a solution for an issue raised. Each such version can be supported or objected by zero or more arguments. Also an issue can suggest a new position/version, or an issue can be the generalization or specialization of another issue. Furthermore, an argument can raise an issue. It is important to notice that an argument can be posted without having to support or reject a position or ontology version, and a position or version does not have to be an answer to an issue. These relationships support the modelling of the discussion in a more natural way.
 tus, the e-mail notification manager sends each new discourse object to all com-munity members via e-mail. Users can intervene at any point in the discussion by performing any legal discourse act and can also inspect and download in their personal space any ontology version posted at any point in the discussion using the corresponding SharedHCONE functionality (Fig. 8 ).
 and get the natural language description of any concept. Furthermore, they can inspect the differences between two ontology versions through a formal compari-son service that is based on the same techniques as the ones included in personal HCONE comparison functionality. Figure 8 depicts the results provided by the comparison service.
 between two versions of the same ontology, people can track the rationale behind each version and more important, behind the agreed ontology.
 personal space and further study and exploit them in their working setting, and being supported to conversationally review ontologies, are decisively and actively involved in the evaluation and evolution of ontologies. 6 Related work and evaluation Work on ontology engineering methodologies has been extensively discussed and compared in [ 11 , 13 , 16 ]. It must be pointed that only very recently ontology engineering methodologies did mature, incorporating tasks concerning reusability and maintenance.
 pare methodologies. This comparison motivated the proposal of the METHONTOLOGY methodology. This is a well-known second-generation methodology which has been considerably influenced by software engineering methodologies. The methodology proposes an evolving prototyping ontology life cycle, proposing reusability, version management and project management activ-ities. Although METHONTOLOGY proposes that ontology engineering must be done at the knowledge level rather than at the symbol/implementation level, there are no tool-supported activities that would enable this to happen. Furthermore, OntoWeb [ 13 ] extensively describes and compares existing methodologies based also in the IEEE software engineering framework, taking into account the construction strategies used, ontology engineering processes, methodologies X  use, and technological support. In [ 16 ] authors establish a framework that specifies the activities that compose an ontology engineering process. This framework is more appropriate than the IEEE software engineering framework used in [ 11 ], because it fits more appropriately in the ontology engineering process. In particular [ 16 ] identify the need to consider issues that are related to distributed, dynamic and uncontrolled environments such as the Web or modern knowledge-based orga-nizations in which ontologies are being built and deployed. Based on this work, a recent methodological proposal to ontology engineering called DILIGENT [ 15 ] moves towards specifying activities for engineering distributed, loosely controlled, and evolving ontologies.
 methodology is very close to HCOME. We would say that both efforts move towards the third-generation of ontology engineering methodologies. Specifically, both methodologies consider distributed settings and thus emphasize on issues concerning collaboration and argumentation. In addition, both methodologies consider evolving ontologies, pointing on the importance of argumentation dialogues, versions management and merging of ontologies. Finally, they both consider that engineers must somehow minimize their involvement (control) dur-ing the engineering of ontologies, passing control to domain experts. However the two approaches tackle this issue differently: DILIGENT is clearly depended on decisions of a control board, whereas HCOME is a tool supported methodology that empowers knowledge workers to be actively and decisively participate in the ontology life cycle. In the following paragraphs we point on specific points in whichHCOMEdifferstoDILIGENT.
 agement of ontologies, the completion of some tasks is partially dependent on the decisions of a board of experts. For instance, knowledge workers cannot use any updated version of an ontology for exploitation, evaluation or further refinement, unless the board decides that the changes made in the shared ontology are valid. Although this eases the management of ontology versions, there is no evidence on how DILIGENT provides the power to knowledge workers to develop and evalu-ate multiple shared versions of an ontology.
 by DILIGENT, users are constrained in this process since they are not allowed to inspect, conversationally exploit and evaluate ontologies that have been con-tributed by others. This prohibits the direct manipulation of conceptualisations developed by co-workers, hindering the bridging of different perspectives and con-versationally overcoming deadlocks in conceptualizing the domain.
 methodology that places knowledge workers at the center of the ontology life cycle, accentuating their role and active involvement in every task of the ontology management processes. In particular, HCONE, the H uman C entered ON tology Engineering E nvironment supports all phases and tasks of HCOME, provid-ing functionalities for ontology requirements specification, conceptualization, ex-ploitation and evaluation.
 tools have been carried out in latest reviews (e.g. [ 13 ]). Although other tools con-sider some of the key issues presented in Sect. 3 for the human-centered engi-neering of ontologies, only HCONE provides access in a wide range of necessary functionalities. The major emphasis of HCONE is the minimization of the upfront knowledge engineering effort that a worker should put to accomplish a particu-lar HCOME task. For instance, authoring an ontology from scratch and merging it with an existing version of another ontology is a task that can be performed in almost every ontology engineering environment, but the way these tasks have been realized in HCONE differ significantly from their realization in other tools: HCONE balances the degree of users X  involvement in ontology engineering with a formal representation language and advanced reasoning services, guaranteeing validity of specifications. An important functionality of HCONE is the Shared-HCONE that concerns the support for conversational development and evaluation of ontologies. This functionality, as already pointed, supports essential tasks of HCOME such as requirements specification, evolution and exploitation of ontolo-gies, as well as tracking the rationale behind different ontology versions. in the Information and Communications Systems Engineering Department of the University of the Aegean. Although the evaluation of the methodology itself is biased by the HCONE tool and the way it supports the methodological tasks, the questionnaires and discussions with the students reveals the importance to consider the issues for human-centered engineering of ontologies. Students that took part in the evaluation had already gained background knowledge on ontolo-gies in the frame of their MSc course. Although it was their first time that they had to develop an ontology, they found it easy to follow the tasks of HCOME, which where distinctively and fully provided by HCONE. The requirements specification for the ontology to be developed was given to them at the start of their project. Students developed their own conceptualisations in their personal space. Their participation in the exploitation phase was of critical importance for students with less developed skills on ontology engineering, since they received consultation from more skilled students, and in some cases they received developed versions of an ontology as a starting point to their own development process. Participation of their supervisor in this phase, playing the role of a knowledge engineer, gave them hints and comments on their conceptualizations, adding extra value to the task of collaborative construction and evaluation of ontologies. During the development process, the comparison and merging tasks saved them a lot of time due to their value in reusing information. This, in conjunction to the conversational development of ontologies, has helped them to understand and bridge the gaps between different conceptualizations. This is essential for co-workers to reach an agreed conceptualisation. 7 Concluding remarks In this paper we have conjectured that the engineering of ontologies must be seen as a dynamic and collaborative process that in most of the cases starts with an initial specification of requirements and/or an initial rough ontology, which is later revised, refined and filled in with the details by knowledge workers.
 to a living ontology [ 20 ] with the decisive and active participation of knowledge workers in collaboration with knowledge engineers. Towards this aim we have presented a new tool supported approach to the engineering of ontologies called HCOME. This has been designed and evaluated in the AI Lab of the Information and Communication Systems Eng. Department of the University of the Aegean. supports the HCOME approach provides a modular environment that supports an eclectic approach to ontology engineering, focusing on these functionalities to a greater extent than other tools and empowering knowledge workers to develop their formal conceptualizations either individually or conversationally (with co-workers). According to Gibbon et al. [ 5 ] there must be a balance between usage and technology, and between formality and informality. HCONE, following the human-centered approach, emphasizes on integrating ontology engineering environments with knowledge workers practices considerably, enabling knowl-edge workers to interact directly with their conceptualizations at a high-level of abstraction.
 forts. Further evaluation of the methodology is needed in wider and more varied work settings.
 References Author Biographies
