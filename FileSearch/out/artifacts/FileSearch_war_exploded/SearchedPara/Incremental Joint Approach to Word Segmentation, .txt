 In processing natural languages that do not include delimiters (e.g. spaces) between words, word seg-mentation is the crucial first step that is necessary to perform virtually all NLP tasks. Furthermore, the word-level information is often augmented with the POS tags, which, along with segmentation, form the basic foundation of statistical NLP.

Because the tasks of word segmentation and POS tagging have strong interactions, many studies have been devoted to the task of joint word segmenta-tion and POS tagging for languages such as Chi-nese (e.g. Kruengkrai et al. (2009)). This is because some of the segmentation ambiguities cannot be re-solved without considering the surrounding gram-matical constructions encoded in a sequence of POS tags. The joint approach to word segmentation and POS tagging has been reported to improve word seg-mentation and POS tagging accuracies by more than 1% in Chinese (Zhang and Clark, 2008). In addition, some researchers recently proposed a joint approach to Chinese POS tagging and dependency parsing (Li et al., 2011; Hatori et al., 2011); particularly, Ha-tori et al. (2011) proposed an incremental approach to this joint task, and showed that the joint approach improves the accuracies of these two tasks.

In this context, it is natural to consider further a question regarding the joint framework: how strongly do the tasks of word segmentation and de-pendency parsing interact? In the following Chinese sentences:
S  X   X  s V  X  s  X   X  s current peace-prize and peace operation related
S  X   X  s V  X  s  X   X  s  X  S current peace award peace operation related group the only difference is the existence of the last word  X  S ; however, whether or not this word exists changes the whole syntactic structure and segmen-tation of the sentence. This is an example in which word segmentation cannot be handled properly with-out considering long-range syntactic information.
Syntactic information is also considered ben-eficial to improve the segmentation of out-of-vocabulary (OOV) words. Unlike languages such as Japanese that use a distinct character set (i.e. katakana ) for foreign words, the transliterated words in Chinese, many of which are OOV words, fre-quently include characters that are also used as com-mon or function words. In the current systems, the existence of these characters causes numerous over-segmentation errors for OOV words.

Based on these observations, we aim at build-ing a joint model that simultaneously processes word segmentation, POS tagging, and dependency parsing, trying to capture global interaction among these three tasks. To handle the increased computa-tional complexity, we adopt the incremental parsing framework with dynamic programming (Huang and Sagae, 2010), and propose an efficient method of character-based decoding over candidate structures.
Two major challenges exist in formalizing the joint segmentation and dependency parsing task in the character-based incremental framework. First, we must address the problem of how to align com-parable states effectively in the beam. Because the number of dependency arcs varies depending on how words are segmented, we devise a step align-ment scheme using the number of character-based arcs, which enables effective joint decoding for the three tasks.

Second, although the feature set is fundamen-tally a combination of those used in previous works (Zhang and Clark, 2010; Huang and Sagae, 2010), to integrate them in a single incremental framework is not straightforward. Because we must perform de-cisions of three kinds (segmentation, tagging, and parsing) in an incremental framework, we must ad-just which features are to be activated when, and how they are combined with which action labels. We have also found that we must balance the learning rate between features for segmentation and tagging decisions, and those for dependency parsing.
We perform experiments using the Chinese Tree-bank (CTB) corpora, demonstrating that the accura-cies of the three tasks can be improved significantly over the pipeline combination of the state-of-the-art joint segmentation and POS tagging model, and the dependency parser. We also perform comparison ex-periments with partially joint models, and investi-gate the tradeoff between the running speed and the model performance. In Chinese, Luo (2003) proposed a joint con-stituency parser that performs segmentation, POS tagging, and parsing within a single character-based framework. They reported that the POS tags con-tribute to segmentation accuracies by more than 1%, but the syntactic information has no substantial ef-fect on the segmentation accuracies. In contrast, we built a joint model based on a dependency-based framework, with a rich set of structural features. Us-ing it, we show the first positive result in Chinese that the segmentation accuracies can be improved using the syntactic information.

Another line of work exists on lattice-based pars-ing for Semitic languages (Cohen and Smith, 2007; Goldberg and Tsarfaty, 2008). These methods first convert an input sentence into a lattice encoding the morphological ambiguities, and then conduct joint morphological segmentation and PCFG pars-ing. However, the segmentation possibilities consid-ered in those studies are limited to those output by an existing morphological analyzer. In addition, the lattice does not include word segmentation ambigu-ities crossing boundaries of space-delimited tokens. In contrast, because the Chinese language does not have spaces between words, we fundamentally need to consider the lattice structure of the whole sen-tence. Therefore, we place no restriction on the seg-mentation possibilities to consider, and we assess the full potential of the joint segmentation and depen-dency parsing model.

Among the many recent works on joint segmen-tation and POS tagging for Chinese, the linear-time incremental models by Zhang and Clark (2008) and Zhang and Clark (2010) largely inspired our model. Zhang and Clark (2008) proposed an incremental joint segmentation and POS tagging model, with an effective feature set for Chinese. However, it re-quires to computationally expensive multiple beams to compare words of different lengths using beam search. More recently, Zhang and Clark (2010) pro-posed an efficient character-based decoder for their word-based model. In their new model, a single beam suffices for decoding; hence, they reported that their model is practically ten times as fast as their original model. To incorporate the word-level fea-tures into the character-based decoder, the features are decomposed into substring-level features, which are effective for incomplete words to have compara-ble scores to complete words in the beam. Because we found that even an incremental approach with beam search is intractable if we perform the word-based decoding, we take a character-based approach to produce our joint model.

The incremental framework of our model is based on the joint POS tagging and dependency parsing model for Chinese (Hatori et al., 2011), which is an extension of the shift-reduce dependency parser with dynamic programming (Huang and Sagae, 2010). They specifically modified the shift action so that it assigns the POS tag when a word is shifted onto the stack. However, because they regarded word seg-mentation as given, their model did not consider the interaction between segmentation and POS tagging. 3.1 Incremental Joint Segmentation, POS Based on the joint POS tagging and dependency parsing model by Hatori et al. (2011), we build our joint model to solve word segmentation, POS tag-ging, and dependency parsing within a single frame-work. Particularly, we change the role of the shift ac-tion and additionally use the append action, inspired by the character-based actions used in the joint seg-mentation and POS tagging model by Zhang and Clark (2010).

The list of actions used is the following:  X 
A : append the first character in the queue to the word on top of the stack.  X 
SH ( t ): shift the first character in the input queue as a new word onto the stack, with POS tag t .  X 
RL / RR : reduce the top two trees on the stack, Although SH ( t ) is similar to the one used in Hatori et al. (2011), now it shifts the first character in the queue as a new word, instead of shifting a word. Fol-lowing Zhang and Clark (2010), the POS tag is as-signed to the word when its first character is shifted, and the word X  X ag pairs observed in the training data and the closed-set tags (Xia, 2000) are used to prune unlikely derivations. Because 33 tags are defined in the CTB tag set (Xia, 2000), our model exploits a total of 36 actions.

To train the model, we use the averaged percep-tron with the early update (Collins and Roark, 2004). In our joint model, the early update is invoked by mistakes in any of word segmentation, POS tagging, or dependency parsing. 3.2 Alignment of States When dependency parsing is integrated into the task of joint word segmentation and POS tagging, it is not straightforward to define a scheme to align ( syn-chronize ) the states in the beam. In beam search, we use the step index that is associated with each state: the parser states in process are aligned according to the index, and the beam search pruning is applied to those states with the same index. Consequently, for the beam search to function effectively, all states with the same index must be comparable , and all terminal states should have the same step index.
We can first think of using the number of shifted characters as the step index, as Zhang and Clark (2010) does. However, because RL / RR actions can be performed without incrementing the step index, the decoder tends to prefer states with more de-pendency arcs, resulting more likely in premature choice of  X  X educe X  actions or oversegmentation of words. Alternatively, we can consider using the number of actions that have been applied as the step index, as Hatori et al. (2011) does. However, this results in inconsistent numbers of actions to reach the terminal states: some states that segment words into larger chunks reach a terminal state earlier than other states with smaller chunks. For these reasons, we have found that both approaches yield poor mod-els that are not at all competitive with the baseline (pipeline) models 1 .

To address this issue, we propose an indexing scheme using the number of character-based arcs. We presume that in addition to the word-to-word de-pendency arcs, each word (of length M ) implicitly has M  X  1 inter-character arcs, as in: A x B x C , notes a word). Then we can define the step index as the sum of the number of shifted characters and the total number of (inter-word and intra-word) depen-dency arcs, which thereby meets all the following conditions: (1) All subtrees spanning M consecutive characters have the same index 2 M  X  1 . (2) All terminal states have the same step index 2 N (including the root arc), where N is the number of characters in the sentence. (3) Every action increases the index.
 Note that the number of shifted characters is also necessary to meet condition (3). Otherwise, it allows an unlimited number of SH ( t ) actions without incre-menting the step index. Figure 1 portrays how the states are aligned using the proposed scheme, where a subtree is denoted as a rectangle with its partial index shown inside it.

In our framework, because an action increases the step index by 1 (for SH ( t ) or RL / RR ) or 2 (for A ), we need to use two beams to store new states at each step. The computational complexity of the entire process is O( B ( T + 3)  X  2 N ) , where B is the beam
Figure 1: Illustration of the alignment of steps. size, T is the number of POS tags ( = 33 ), and N is the number of characters in the sentence. Theo-retically, the computational time is greater than that with the character-based joint segmentation and tag-ging model by Zhang and Clark (2010) by a factor of T +3 T +1  X  2 N N ' 2 . 1 , when the same beam size is used. 3.3 Features The feature set of our model is fundamentally a com-bination of the features used in the state-of-the-art joint segmentation and POS tagging model (Zhang and Clark, 2010) and dependency parser (Huang and Sagae, 2010), both of which are used as baseline models in our experiment. However, we must care-fully adjust which features are to be activated and when, and how they are combined with which ac-tion labels, depending on the type of the features be-cause we intend to perform three tasks in a single incremental framework.

The list of the features used in our joint model is presented in Table 1, where S01 X  X 05, W01 X  W21, and T01 X 05 are taken from Zhang and Clark (2010), and P01 X  X 28 are taken from Huang and Sagae (2010). Note that not all features are always considered: each feature is only considered if the action to be performed is included in the list of ac-tions in the  X  X hen to apply X  column. Because S01 X  S05 are used to represent the likelihood score of substring sequences, they are only used for A and SH ( t ) without being combined with any action la-bel. Because T01 X  X 05 are used to determine the POS tag of the word being shifted, they are only ap-plied for SH ( t ) . Because W01 X  X 21 are used to de-termine whether to segment at the current position or not, they are only used for those actions involved in boundary determination decisions ( A , SH ( t ) , RL 0 and RR 0 ). The action labels RL 0 / RR 0 are used to denote the  X  X educe X  actions that determine the word boundary 2 , whereas RL 1 / RR 1 denote those  X  X educe X  actions that are applied when the word boundary has already been fixed. In addition, to capture the shared nature of boundary determination actions ( SH ( t ) , RL 0 / RR 0 ), we use a generalized action label SH  X  to represent any of them when combined with W01 X  W21. We also propose to use the features U01 X  X 03, which we found are effective to adjust the character-level and substring-level scores.

Regarding the parsing features P01 X  X 28, because we found that P01 X  X 17 are also useful for segmen-tation decisions, these features are applied to all ac-tions including A , with an explicit distinction of ac-tion labels RL 0 / RR 0 from RL 1 / RR 1 . On the other hand, P18 X  X 28 are only used when one of the parser actions ( SH ( t ) , RL , or RR ) is applied. Note that P07 X  P09 and P18 X  X 21 ( look-ahead features ) require the look-ahead information of the next word form and POS tags, which cannot be incorporated straightfor-wardly in an incremental framework. Although we have found that these features can be incorporated using the delayed features proposed by Hatori et al. (2011), we did not use them in our current model because it results in the significant increase of com-putational time. 3.3.1 Dictionary features
Because segmentation using a dictionary alone can serve as a strong baseline in Chinese word seg-mentation (Sproat et al., 1996), the use of dictio-naries is expected to make our joint model more ro-bust and enables us to investigate the contribution of the syntactic dependency in a more realistic setting. Therefore, we optionally use four features D01 X  X 04 associated with external dictionaries. These features distinguish each dictionary source, reflecting the fact that different dictionaries have different characteris-tics. These features will also be used in our reimple-mentation of the model by Zhang and Clark (2010). 3.4 Adjusting the Learning Rate of Features In formulating the three tasks in the incremental framework, we found that adjusting the update rate depending on the type of the features (segmenta-tion/tagging vs. parsing) crucially impacts the final performance of the model. To investigate this point, we define the feature vector ~  X  and score  X  of the Table 1: Feature templates for the full joint model. action a being applied to the state  X  as  X (  X ,a ) = ~  X   X  ~  X  (  X ,a ) = ~  X   X  n ~  X  st (  X ,a ) +  X  where ~  X  st corresponds to the segmentation and tag-ging features (those starting with  X  X  X ,  X  X  X ,  X  X  X , or  X  X  X ), and ~  X  p is the set of the parsing features (start-ing with  X  X  X ). Then, if we set  X  p to a number smaller than 1 , perceptron updates for the parsing features will be kept small at the early stage of training be-cause the update is proportional to the values of the feature vector. However, even if  X  p is initially small, the global weights for the parsing features will in-crease as needed and compensate for the small  X  p as the training proceeds. In this way, we can con-trol the contribution of syntactic dependencies at the early stage of training. Section 4.3 shows that the best setting we found is  X  p = 0 . 5 : this result sug-gests that we probably should resolve remaining er-rors by preferentially using the local n -gram based features at the early stage of training. Otherwise, the premature incorporation of the non-local syntac-tic dependencies might engender overfitting to the training data. 4.1 Experimental Settings We use the Chinese Penn Treebank ver. 5.1, 6.0, and 7.0 (hereinafter CTB-5, CTB-6, and CTB-7) for evaluation. These corpora are split into train-ing, development, and test sets, according to previ-ous works. For CTB-5, we refer to the split by Duan et al. (2007) as CTB-5d, and to the split by Jiang et al. (2008) as CTB-5j. We also prepare a dataset for cross validation: the dataset CTB-5c consists of sentences from CTB-5 excluding the development and test sets of CTB-5d and CTB-5j. We split CTB-5c into five sets (CTB-5c-n ), and alternatively use four of these as the training set and the rest as the test set. CTB-6 is split according to the official split described in the documentation, and CTB-7 is split according to Wang et al. (2011). The statistics of these splits are shown in Table 2. As external dic-tionaries, we use the HowNet Word List 3 , consist-ing of 91,015 words, and page names from the Chi-nese Wikipedia 4 as of Oct 26, 2011, consisting of 709,352 words. These dictionaries only consist of word forms with no frequency or POS information.
We use standard measures of word-level preci-sion, recall, and F1 score, for evaluating each task. The output of dependencies cannot be correct unless the syntactic head and dependent of the dependency relation are both segmented correctly. Following the standard setting in dependency parsing works, we evaluate the task of dependency parsing with the un-labeled attachment scores excluding punctuations. Statistical significance is tested by McNemar X  X  test (  X  : p &lt; 0 . 05 ,  X  : p &lt; 0 . 01 ). 4.2 Baseline and Proposed Models We use the following baseline and proposed models for evaluation.  X  SegTag : our reimplementation of the joint seg-mentation and POS tagging model by Zhang and
Clark (2010). Table 5 shows that this reimple-mentation almost reproduces the accuracy of their implementation. We used the beam of 16, which they reported to achieve the best accuracies.  X  Dep X  : the state-of-the-art dependency parser by
Huang and Sagae (2010). We used our reimple-mentation, which is used in Hatori et al. (2011).  X  Dep : Dep X  without look-ahead features.  X  TagDep : the joint POS tagging and dependency parsing model (Hatori et al., 2011), where the look-ahead features are omitted. 5  X  SegTag+Dep / SegTag+Dep X  : a pipeline combina-tion of SegTag and Dep or Dep X .  X  SegTag+TagDep : a pipeline combination of Seg-
Tag and TagDep, where only the segmentation output of SegTag is used as input to TagDep; the output tags of TagDep are used for evaluation.  X  SegTagDep : the proposed full joint model. All of the models described above except Dep X  are based on the same feature sets for segmentation and Figure 2: F1 scores (in %) of SegTagDep on CTB-5c-1 w.r.t. the training epoch (x-axis) and parsing feature weights (in legend). tagging (Zhang and Clark, 2008; Zhang and Clark, 2010) and dependency parsing (Huang and Sagae, 2010). Therefore, we can investigate the contribu-tion of the joint approach through comparison with the pipeline and joint models. 4.3 Development Results We have some parameters to tune: parsing feature weight  X  p , beam size, and training epoch. All these parameters are set based on experiments on CTB-5c. For experiments on CTB-5j, CTB-6, and CTB-7, the training epoch is set using the development set.
Figure 2 shows the F1 scores of the proposed model (SegTagDep) on CTB-5c-1 with respect to the training epoch and different parsing feature weights, where  X  X eg X ,  X  X ag X , and  X  X ep X  respectively denote the F1 scores of word segmentation, POS tagging, and dependency parsing. In this experiment, the ex-ternal dictionaries are not used, and the beam size of 32 is used. Interestingly, if we simply set  X  p to 1, the accuracies seem to converge at lower levels. The  X  p = 0 . 2 setting seems to reach almost identi-cal segmentation and tagging accuracies as the best setting  X  p = 0 . 5 , but the convergence occurs more slowly. Based on this experiment, we set  X  p to 0.5 throughout the experiments in this paper.

Table 3 shows the performance and speed of the full joint model (with no dictionaries) on CTB-5c-1 with respect to the beam size. Although even the beam size of 32 results in competitive accuracies for word segmentation and POS tagging, the depen-dency accuracy is affected most by the increase of the beam size. Based on this experiment, we set the beam size of SegTagDep to 64 throughout the exper-Table 3: F1 scores and speed (in sentences per sec.) of SegTagDep on CTB-5c-1 w.r.t. the beam size. iments in this paper, unless otherwise noted. 4.4 Main Results In this section, we present experimentally obtained results using the proposed and baseline models. Ta-ble 4 shows the segmentation, POS tagging, and dependency parsing F1 scores of these models on CTB-5c. Irrespective of the existence of the dic-tionary features, the joint model SegTagDep largely increases the POS tagging and dependency pars-ing accuracies (by 0.56 X 0.63% and 2.34 X 2.44%); the improvements in parsing accuracies are still significant even compared with SegTag+Dep X  (the pipeline model with the look-ahead features). How-ever, when the external dictionaries are not used ( X  X o/dict X ), no substantial improvements for seg-mentation accuracies were observed. In contrast, when the dictionaries are used ( X  X /dict X ), the seg-mentation accuracies are now improved over the baseline model SegTag consistently (on every trial). Although the overall improvement in segmentation is only around 0.1%, more than 1% improvement is observed if we specifically examine OOV 6 words. The difference between  X  X o/dict X  and  X  X /dict X  re-sults suggests that the syntactic dependencies might work as a noise when the segmentation model is in-sufficiently stable, but the model does improve when it is stable, not receiving negative effects from the syntactic dependencies.

The partially joint model SegTag+TagDep is shown to perform reasonably well in dependency parsing: with dictionaries, it achieved the 2.02% im-provement over SegTag+Dep, which is only 0.32% lower than SegTagDep. However, whereas Seg-Tag+TagDep showed no substantial improvement in tagging accuracies over SegTag (when the dictionar-ies are used), SegTagDep achieved consistent im-provements of 0.46% and 0.58% (without/with dic-Figure 3: Performance of baseline and joint models w.r.t. the average processing time (in sec.) per sen-tence. Each point corresponds to the beam size of 4, 8, 16, 32, (64). The beam size of 16 is used for SegTag in SegTag+Dep and SegTag+TagDep. tionaries); these differences can be attributed to the combination of the relieved error propagation and the incorporation of the syntactic dependencies. In addition, SegTag+TagDep has OOV tagging accura-cies consistently lower than SegTag, suggesting that the syntactic dependency has a negative effect on the POS tagging accuracy of OOV words 7 . In contrast, this negative effect is not observed for SegTagDep: both the overall tagging accuracy and the OOV accu-racy are improved, demonstrating the effectiveness of the proposed model.

Figure 3 shows the performance and processing time comparison of various models and their com-binations. Although SegTagDep takes a few times longer to achieve accuracies comparable to those of SegTag+Dep/TagDep, it seems to present potential for greater improvement, especially for tagging and parsing accuracies, when a larger beam can be used. 4.5 Comparison with Other Systems Table 5 and Table 6 show a comparison of the seg-mentation and POS tagging accuracies with other state-of-the-art models.  X  X ruengkrai+  X 09 X  is a lattice-based model by Kruengkrai et al. (2009).  X  X hang  X 10 X  is the incremental model by Zhang and Clark (2010). These two systems use no external re-sources other than the CTB corpora.  X  X un+  X 11 X  is a CRF-based model (Sun, 2011) that uses a combina-tion of several models, with a dictionary of idioms.  X  X ang+  X 11 X  is a semi-supervised model by Wang et al. (2011), which additionally uses the Chinese Gigaword Corpus.

Our models with dictionaries (those marked with  X (d) X ) have competitive accuracies to other state-of-the-art systems, and SegTagDep(d) achieved the best reported segmentation and POS tagging accuracies, using no additional corpora other than the dictio-naries. Particularly, the POS tagging accuracy is more than 0.4% higher than the previous best sys-tem thanks to the contribution of syntactic depen-dencies. These results also suggest that the use of readily available dictionaries can be more effective than semi-supervised approaches. In this paper, we proposed the first joint model for word segmentation, POS tagging, and depen-dency parsing in Chinese. The model demonstrated substantial improvements on the three tasks over the pipeline combination of the state-of-the-art joint segmentation and POS tagging model, and depen-dency parser. Particularly, results showed that the accuracies of POS tagging and dependency pars-ing were remarkably improved by 0.6% and 2.4%, respectively corresponding to 8.3% and 10.2% er-ror reduction. For word segmentation, although the overall improvement was only around 0.1%, greater than 1% improvements was observed for OOV words. We conducted some comparison ex-periments of the partially joint and full joint mod-els. Compared to SegTagDep, SegTag+TagDep per-forms reasonably well in terms of dependency pars-ing accuracy, whereas the POS tagging accuracies are more than 0.5% lower.

In future work, probabilistic pruning techniques such as the one based on a maximum entropy model are expected to improve the efficiency of the joint model further because the accuracies are apparently still improved if a larger beam can be used. More efficient decoding would also allow the use of the look-ahead features (Hatori et al., 2011) and richer parsing features (Zhang and Nivre, 2011).
 Acknowledgement We are grateful to the anony-
