 Making accurate recommendations for users has become an important function of e-commerce system with the rapid growth of WWW. Conventional recommendation systems usually recommend similar objects, which are of the same type with the query object without exploring the semantics of different similarity measures. In this paper, we organize objects in the recommendation system as a heterogeneous network. Through employing a path-based relevance mea-sure to evaluate the relatedness between any-typed objects and capture the subtle semantic containing in each path, we implement a prototype system (called HeteRecom ) for semantic-based recommendation. HeteRecom has the fol-lowing unique properties: (1) It provides the semantic-based recommendation function according to the path specified by users. (2) It recommends the similar objects of the same type as well as related objects of different types. We demon-strate the effectiveness of our system with a real-world movie data set.
 H.2.8 [ Database Management ]: Database applications-Data Mining Algorithms, Design, Experimentation heterogeneous information network, recommendation, simi-larity, semantic search (a) Heterogeneous net-work of movie data Figure 1: An example of heterogeneous information network and its schema. the Heterogeneous Information Networks (HIN) [3] provides a new perspective to design the recommendation system. HINs are the logical networks involving multiple-typed ob-jects and multiple-typed links denoting different relations. It is clear that HINs are ubiquitous and form a critical com-ponent of modern information infrastructure [3]. Although the bipartite network [5] has been applied to organize com-ponents of recommendation system, HIN is a more general model which contains more comprehensive relations among objects and much richer semantic information. Fig. 1(a) shows an HIN example on the movie recommendation data. The network includes the richer objects (e.g., movie, actor, director) and their relations. The network structure can be represented with the star schema as shown in Fig. 1(b). HIN has an unique property [6, 7]: the different paths con-necting two objects have different meanings. For example, in Fig. 1(b), movies can be connected via X  X ovie-Actor-Movie X  ( MAM ) path, X  X ovie-Type-Movie X ( MTM ) path, and so on. It is clear that the semantics underneath these paths are d-ifferent. The MAM path means that movies have the same actors, while the MTM path means that movies have the same types. Here the meta path connecting two-typed ob-jects is defined as relevance path [6]. Obviously, the distinct semantics under different relevance paths will lead to differ-ent relatedness and recommendation.

Focusing on non-personalized recommendation, this pa-per demonstrates a semantic recommendation system, called HeteRecom . Different from conventional recommendation systems, it is based on HIN. Generally, HeteRecom has the following unique features. (1) Semantic recommendation. The system can recommend objects of the designated type based on the relevance path specified by users. (2) Rel-evance recommendation. Besides the same-typed objects recommendation, the system can recommend other related objects.

The implementation of HeteRecom faces the following challenges. (1) Relevance measure of heterogeneous object-s. In order to recommend the different-typed objects, the system needs to measure the relatedness of different-typed objects. (2) The weight learning method. It is a key issue for an integrated recommendation to automatically deter-mine the weights of different relevance paths. (3) Efficien-t computing strategies. In order to provide online service, the recommendation system needs to efficiently compute the relevance measure. In order to solve these challenges, the HeteRecom system first applies a path-based relevance mea-sure, which can not only effectively measure the relatedness of any-typed objects but also subtly capture the semantics containing in the relevance path. Besides, a heuristic weight
This paper applied the HeteSim [6], a path-based rele-vance measure, to do semantic recommendation. The basic idea behind HeteSim is that similar objects are related to similar objects. The HeteSim is defined as follows. Definition 1. HeteSim [6]: Given a relevance path P = R 1  X  R 2  X  X  X  X  X  X  R l , HeteSim between two objects s and t ( s  X  R 1 :S and t  X  R l :T ) is: HeteSim ( s; t | R 1  X  R 2  X  X  X  X  X  X  R l ) = 1 | where O ( s | R 1 ) is the out-neighbors of s based on relation R , I ( t | R l ) is the in-neighbors of t based on relation R l , and R:S ( R:T ) represents the source (target) object of relation R , respectively.

Essentially, HeteSim ( s; t |P ) is a pair-wise random walk based measure, which evaluates how likely s and t will meet at the same node when s follows along the path and t goes against the path. The path implies the semantic information and HeteSim evaluates the relatedness of any-typed object pairs according to the given path. The HeteSim measure has shown its potential in object profiling, experts finding, and relevance search. The detailed information can be seen in [6].

Since relevance paths embody different semantics, users can specify the path according to their intents. The seman-tic recommendation calculates the relevance matrix with HeteSim and recommends the top k objects.
There are many relevance paths connecting the query ob-ject and related objects, so the relevance recommendation should comprehensively consider the relevance measures based on all relevance paths. It can be depicted as follows. where N is the number of relevance paths, P i is a relevance path connecting the object types A and B , w i is the weight of path P i . Although there can be infinite relevance paths connecting two objects, we only need to consider those short paths, since the long paths are usually less important [7].
The next question is how to determine the weight w i . The supervised learning [4] can be used to estimate these param-eters. However, it is impractical for an online system: (1) It is time-consuming, even impractical, to learn these parame-ters on an online system. (2) It is very labor intensive and subjective work to label those learning instances. Here we propose a heuristic weight learning method.

The importance ( I ) of a path P = R 1  X  R 2  X  X  X  X  X  X  R l is determined by its strength ( S ) and length ( l ). Obviously, the path strength is decided by the strength of relations constructing the path, which can be defined as follows. with small relevance values and keep those unimportant n-odes with large relevance values. Since we usually pay close attention to the top k recommendation, we set the thresh-old " as the top k relevance value of the matrix. The k is dynamically adjusted as follows. where L is the vector length. W is the threshold which deter-mines the size of non-zero elements. The larger W or may lead to the denser matrix with less loss. In order to quick-ly determine the top k relevance value, it is approximately computed with the sample data from the raw matrix. We showcase the HeteRecom prototype system using IMD-B movie data as the example application. The IMDB movie data was downloaded from The Internet Movie Database 1 . The IMDB movie data collects 1591 movies before 2010. The related objects include actors, directors and types, which are organized as a star schema shown in Fig. 1(b).

Fig. 3 demonstrates the interface of the HeteRecom sys-tem, which is developed with Java. The left part of in-terface shows the basic information of the data set. The right part shows the recommendation results. In the se-mantic recommendation, users specify the key words and semantic path, the recommendation results will be exhibit-ed in the panel. Fig. 3(a) shows the movies with the same actors of  X  X ron Man X  by specified the  X  X AM X  path. The HeteRecom can make many recommendations that conven-tional systems cannot do. For example, recommending the movies that have the same style with the movies of  X  X rnold Schwarzenegger X  can be done by the path AM T M . In the relevance recommendation, the system can simultaneously recommend different-typed objects. Fig. 3(b) shows the recommendation results of the movie  X  X ron Man X , which in-cludes the similar movies and related actors, directors and types. We can make many interesting recommendations on HeteRecom . For example, if we want to know the informa-tion about the action movie, we can search  X  X ction X . The system will recommend related action movies, actors and directors. www.im db.com/
