 Peer-to-peer (p2p) systems offer an efficient means of data sharing among a dynamically changing set of a large num-ber of autonomous nodes. Each node in a p2p system is connected with a small number of other nodes thus creat-ing an overlay network of nodes. A query posed at a node is routed through the overlay network towards nodes host-ing data items that satisfy it. In this paper, we consider building overlays that exploit the query workload so that nodes are clustered based on their results to a given query workload. The motivation is to create overlays where nodes that match a large number of similar queries are a fe wlinks apart. Query frequency is also taken into account so that popular queries have a greater effect on the formation of the overlay than unpopular ones. We focus on range selection queries and use histograms to estimate the query results of each node. Then, nodes are clustered based on the similarity of their histograms. To this end, we introduce a workload-aware edit distance metric between histograms that takes into account the query workload. Our experimental results show that workload-aware overlays increase the percentage of query results returned for a given number of nodes visited as compared to both random (i.e., unclustered) overlays and non workload-aware clustered overlays (i.e., overlays that cluster nodes based solely on the nodes X  content). H.2.4 [ Database Management ]: Systems  X  Distributed Databases, Query Processing; H.3.3 [ Information Stor-age and Retrieval ]: Information Search and Retrieval  X  Clustering, Search Process; H.3.4 [ Information Storage and Retrieval ]: Systems and Software  X  Distributed Sys-tems, Information Networks, Performance Evaluation Algorithms, Measurement, Performance, Experimentation Peer-to-Peer systems, Small Worlds, Range Queries, Over-lay Network, Query Routing, Clustering
In peer-to-peer (p2p) computing, a large and dynamically changing set of autonomous computing nodes (the peers) cooperate to share resources and services. Since, it is not possible for a node to kno wabout (i.e. connect with) all other nodes in the system, each node connects with a subset of the system nodes, thus forming an overlay network on top of the physical one, for instance, on top of the Internet. A query for data may be issued at any node. The query is routed through the overlay network from the issuing node towards nodes that havedata satisfying it. Weare interested in maximizing the number of query results returned for a given number k of nodes visited.

Ideally, for each query, we would like to visit only the best k nodes for the query, that is, the k nodes that have the most results. One way to attain a large number of results is by clustering nodes based on their content so that nodes with similar content are nearby in the overlay network (e.g., [2]). Then, once a query is routed to the appropriate cluster, relevant nodes are nearby. In this paper, we propose forming clusters not based solely on the content of the nodes but also on the query workload , so that both the type and the frequency of queries is taken into account in constructing the overlay.

In particular, we consider workload-aware overlays in the form of small-worlds. Intuitively, the topology of a small-world network represents a numberof smaller networks (clus-ters) of relevant nodes that are rich in links between their nodes (short-range links), while they are linked to each other with a few random connections (long-range links) [24]. We definethe relevance of two nodes based on their query results to the system workload. The reason for such  X  X orkload-aware X  small-world overlays is that once in the appropriate group, the most relevant to a query nodes are a fe wshort-range links apart. Long-range links are used for routing among groups.

We present an approach for building such overlays based on a decentralized procedure that exploits local indexes. A local index is a characterization of the content of a node. To attain workload-awareness, we define similarity among indexes, so that nodes with similar indexes match similar sets of queries. Similarity is also weighted ,sothatmatching frequent queries counts  X  X ore X  than matching infrequent ones.

To demonstrate the feasibility of workload-aware cluster-ing, in this paper, we consider range queries. For instance, the attributes of the query may correspond to the character-istics of music files (such as release-year, artist-name) in a music file-sharing system or the available resources (such as CPU, memory) in a resource-sharing p2p system. We use histograms as local indexes to estimate the query results offered by each node. Furthermore, we propose a workload-aware edit-based distance metric between histograms that takes into account the workload (both the type and fre-quency of the queries).
 Related Work. There are two basic types of p2p overlays: structured and unstructured ones. In structured p2p sys-tems, data items (or indexes) are placed at specific nodes usually based on distributed hashing (DHTs) such as in CAN [18], Chord [10] and P-Grid [1]. In DHTs, each data item is associated with a key and each node is assigned a range of keys and thus items. Structured overlays usually follo wa regular topology, such as a ring or grid. Recently, re-searchers have proposed extending DHTs (e.g., Chord) with long range links towards creating small-worlds [14]. Other extensions, instead of associating keys to data items based just on their identifier, associate with each data item (or node) a vector describing its content extracted using IR al-gorithms and then use this vector as input to the hash func-tions [21, 20]. However, this creates a dimensionality re-duction problem, since the dimension of the vectors should match the dimension of the DHT. These proposals can col-lectively be seen as building content-based small-worlds in DHT-based p2p systems. In this case, the usual problems with structured p2p systems arise. The DHT topology is regulated since all nodes have the same number of neigh-bors and the selection of neighbors is strictly determined by the DHT semantics. Furthermore, sophisticated load bal-ancing procedures are required and often content movement is necessary.

In unstructured p2p systems, there is no assumption about the placement of data items at the nodes. Many recent re-search efforts focus on clustering nodes based on the con-tent in such non DHT-based overlays. In most cases, the number or the description of the clusters is fixed and global knowledge of this information is required. In [2], nodes are partitioned into topic segments based on their documents. A fixed set of clusters is assumed, each one corresponding to a topic segment. Clusters of nodes are formed in [22] based on predefined semantic categories of their documents. Sim-ilarly, [7] assumes predefined classification hierarchies based on which queries and documents are categorized. The clus-tering of nodes in [13] is based on the schemes of the nodes and on predefined policies provided by human experts. As-sociative overlays [5] cluster nodes into groups called guide rules, by examining whether their content satisfies some predicate. Our approach does not assume any knowledge of the clusters and extends content clustering by incorpo-rating the query workload in the formation of clusters.
Our main focus in this paper is not on range query pro-cessing; we just consider range queries to demonstrate how the type of queries influences the creation of clusters. There has been a number of proposals for processing range queries in structured p2p systems [19, 9, 3]. A central issue is again dimensionality reduction.
 Contributions. In summary, in this paper,
Our experimental results sho wthat our small-world con-struction procedure is effective, since in the resulting peer-to-peer system, the distance of two nodes in the overlay is proportional to the distance of their histograms. Fur-thermore, routing is very efficient, in particular, for a given number of visited nodes, there is an increase of about 60% in the number of results returned when compared to a non-clustered overlay and 40% when compared to a non workload-aware clustered one.
 Paper organization. In Section 2, we motivate the need for workload-aware small-world overlays. In Section 3, we propose appropriate histogram distance metrics. In Section 4, we describe how histograms are used in routing and con-structing workload-aware overlays. In Section 5, we present experimental results, while Section 6 concludes the paper.
We assume a p2p system with a set N of nodes n i .The set N of nodes changes as ne wnodes leave and join the system. Each node is connected to a number of other nodes called its neighbors forming an overlay network of nodes. Aquery q for an item may be posed at any of the nodes, while items that satisfy the query may be stored at various nodes. The query is routed in the overlay from the node that posed the query to nodes offering items that match it. We are interested in maximizing the number of query results returned for a given number of nodes visited.

Ideally, we would like to route each query q only through those nodes that have the largest number of results for q . To this end, we define PeerRecall .Intuitively, P eerRecall expresses ho wfar from the optimal a routing protocol per-forms. Let results ( n i ,q ) be the number of results for query q returned by node n i .Let V be the set of nodes ( V  X  N ), visited by a routing protocol, Sresults ( V,q ) denotes the sum of the number of results for query q returned by each node that belongs to V .
 Definition 1 (PeerRecall). Let Visited ( Visited  X  N ) be the set of nodes visited during the routing of a query q and Optimal ( Optimal  X  N ) be the set of nodes such that |
Optimal | = | Visited | and n i  X  Optimal  X  results ( n i  X  results ( n j ,q ) ,  X  n j /  X  Optimal . We define P eerRecall
To increase PeerRecall , for each query, the nodes offering the most results should be close to each other in the overlay network, thus forming clusters of relevant nodes. We are interested in creating such overlay topologies in the form of small-worlds. Formally, small-world networks are char-acterized by: (a) a small diameter and (b) a large cluster-ing coefficient [24, 11]. The diameter of the network is the maximum network-distance between any two nodes in the network, where network-distance is the shortest path be-tween the two nodes. The clustering coefficient captures the probability that two neighbors of a node are also neighbors themselves; it is the average fraction of pairs of neighbors of a node that are neighbors of each other. Intuitively, the topology of a small-world network represents a number of Figure 1: (left) ramdom and (right) small-world overlay. smaller networks (groups or clusters) that are rich in links between their nodes (short-range links). These smaller net-works are linked to each other through a few connections (long-range links).

Figure 1 shows such a small-world overlay network and a random (non clustered) one. In a workload-aware small-world network, nodes that match a query q are a fe wshort-range links away, thus once in the right group all matching nodes are nearby. Long-range links are used to locate the right group. To build such small-world overlays, we consider both the content of each node and the query workload.
Definition 2 (Query Workload). Aqueryworkload is a set W of pairs ( q m , f m )where q m denotes a query and f m its frequency.

For example, consider keyword-valuequeries andthework-load W = { ( x = X  A  X , 3/4), ( x = X  B  X , 1/4) } . Consider three nodes n 1 , n 2 and n 3 . Assume that node n 1 has data items with values  X  A  X  X nd X  B  X , node n 2 with values  X  A  X  X nd X  C  X  and node n 3 with values  X  B  X  X nd X  D  X . Most probably a non workload-aware clustering approach would consider nodes n 2 and n 3 equally similar to node n 1 ,sincebothshareone common value with it. However, when taking into account the workload, node n 2 is more  X  X imilar X  to n 1 ,since n 1 n 2 match a larger part of the workload than n 1 and n 3 .
To construct workload-aware overlays, each node main-tains a summary of the items stored locally; this is called a local index .Let LI ( n i ) denote the local index and S ( n the number of items of node n i .Wecreateclustersofnodes that have similar local indexes taking into account a given workload. To this end, the distance ( d ) between the local indexes of two nodes must be descriptive of  X  X ow much X  the two nodes match a given workload. In particular,
Property 1 (workload-awareness property). A distance metric d between two local indexes is said to be workload-aware for a workload W , if for any three nodes n , n 2 and n 3 ,
To estimate the number of results ( results ( n i ,q )) pro-vided by each node n i , we use histograms as local indexes.
Histograms are widely used to approximate data distri-butions [12]. We have previously used histograms to route queries in p2p systems [15]. Here, we use them to construct workload-aware overlays. First, we focus on retrieving data items (tuples) from a relation R (set of tuples) based on a single attribute x . We then extend our approach for selec-tions on more than one attribute. Histograms can be also Figure 2: The local indexes of nodes 1, 2, 3, and 4 and used to estimate the results of more complex queries (for in-stance, queries involving joins); our approach can be readily extended for such cases. As usual, we use the notation t . x to denote the value of attribute x of a tuple t  X  X  .
Building accurate histograms is a well-studied problem (e.g., [17, 12]). Since, our focus is on showing how his-tograms can be used to construct workload-aware overlays, we consider simple equi-width histograms. The equi-width histogram H of an attribute x is an array H i constructed as follows. Without loss of generality, assume a numerical domain for attribute x , D = { 0 , M X  1 } . The domain of at-tribute x is divided into b mutually disjoint ranges of equal width r called buckets . For each such bucket i ,0  X  i  X  b of H , H i is the average frequency of values in bucket i ,that is, the number of tuples (data items) for which it holds ir  X  t.x &lt; ( i +1) r divided by the total number of tuples. In addition to array H , we maintain the total number of tuples, called the histogram size . LI ( n ) denotes the histogram used as the local index of node n and S ( LI ( n )) its size.
Besides its local index, each node n maintains one routing index RI ( n, e ) for each of its links e , that summarizes the content of all nodes that are reachable from n using link e at a distance at most R , called radius . Routing indexes (e.g., [6]) are used to route queries towards nodes that are expected to store many results for a query. The histogram-based routing index is computed as follows:
Definition 3 (histograms as routing index). The histogram-based routing index RI ( n, e ) of radius R of the link e of node n is defined as follows: for 0  X  i  X  b  X  1 , RI i ( n, e )= S ( RI ( n, e )) =  X  p  X  P S ( LI ( p )) ,where P is the set of nodes p within distance R of n reachable through link e .
An example is shown in Fig. 2. The set of nodes within distance R of n is called the horizon of radius R of n .Fora given query q , the local histogram LI ( n ) of a node n provides an estimation of the number of results (matching tuples) of node n , while the routing index RI ( n, e )providesanesti-mation of the number of results that can be found when the query is routed through link e up to a distance R .Weshall use the notation H ( n ) to denote a histogram (used either as alocal LI ( n ) or as a routing index RI ( n, e )). We consider a workload of range queries over attribute x : W = { ( q ij , f ij ), where q ij = { t : i  X  t.x &lt; j } frequency } .The range of the query is j  X  i .Foraquery q ,let hresults ( H ( n ) ,q ) be the number of matching tuples estimated using the histogram H ( n )ofnode n . Using his-tograms to estimate the number of results is straightforward [16]. Figure 3: Intuitively, the distance between H ( n 1 ) and We consider two-well known distance metrics (namely, the L 1 and the edit distance) and extend them to take into account the workload. For simplicity of presentation, in the following we consider equal-sized histograms. The L 1 distance of two histograms H ( n 1 )and H ( n 2 ) is defined as:
Definition 4 ( L 1 histogra mdistance). Let H ( n 1 ) and H ( n 2 ) be two histograms with b buckets, their L 1 tance, d L 1 ( H ( n 1 ) ,H ( n 2 )) is defined as: d L 1
It is easy to see that the L 1 distance satisfies the workload-awareness property (i.e., it is representative of the number of results) only for very specific types of workloads, in par-ticular, for the workload W = { ( q ij ,f ij ), where i = mr , j =( m +1) r  X  1for0  X  m  X  b  X  1and f ij =1 /b } .One reason is that, although the histograms we study are ordinal (i.e, there is an ordering among their buckets), the L 1 dis-tance does not take into account this ordering. For example, for the three histograms of Fig. 3, the distance between his-tograms H ( n 1 )and H ( n 2 ) that have all their values at adja-cent buckets(buckets 0 and 1 respectively) should be smaller than the distance between histograms H ( n 1 )and H ( n 3 have their values at buckets further apart (buckets 0 and 4 respectively). This is because, the difference between the number of results provided by node n 1 and the number of results provided by node n 2 is smaller for a larger number of different range queries than for nodes n 1 and n 3 . However, the three histograms have the same pair-wise L 1 distance.
In general, a histogram distance that takes into account the position of buckets is said to satisfy the shuffling depen-dence property. As shown, L 1 does not satisfy this prop-erty. We consider an edit distance based similarity metric for which the shuffling dependence property holds. The edit distance of two histograms H ( n 1 )and H ( n 2 ) is the total number of all necessary minimum movements for transform-ing H ( n 1 )to H ( n 2 ) by moving elements to the left or right. It has been shown that this is captured by the following definition [4]:
Definition 5 (edit histogra mdistance). Let H ( n 1 ) and H ( n 2 ) be two histograms with b buckets, their edit dis-tance, d e ( H ( n 1 ) ,H ( n 2 )) is defined as: d e ( H ( n  X  Let us define as: pref ( l )=  X 
Then, the edit distance can be written as:
It can beshown that theedit distance satisfies theworkload-awareness property for the special case of equi-probable prefix-range queries, that is for queries with one sided ranges: W = { ( q 0 m ,f 0 m ), where m = jr  X  1, for 0 &lt;j  X  b and f 0 m =1 /b } . The edit distance is shuffling dependent and workload-aware for some queries whose range spans more than one bucket. However, it does not take into account the frequency of queries, and it is not workload-aware for all possible workloads of range queries.

Recall that the workload-awareness property requires that the distance between the histograms of two nodes be de-scriptive of the difference in the number of results the nodes provide for a given workload. In the ideal case, we want the distance between two histograms H ( n 1 )and H ( n 2 )ofnodes n 1 and n 2 to correspond to the difference in the number of results provided by n 1 and n 2 for a given workload. For simplicity, consider a query q ij ,where i and j are bucket boundaries. It can be easily shown [16] that the estimated difference in the results, hdiffer ,oftwonodes n 1 and n 2 is:
Based on Eq. (3), we define a workload-aware variation of the edit-based distance metric.

Definition 6. [workload-aware edit histogra m mea-sure] Let H ( n 1 ) and H ( n 2 ) be two histograms with b buck-ets, their workload-aware edit measure, wd e ( H ( n 1 ) ,H ( n is defined as:
It can be shown [16] that wd e : (i) is a metric and (ii) satisfies Property 1 for a workload W = { ( q ij ,f ij ) } and j are bucket boundaries, if we set w ij to be proportional to f ij . Our experimental results indicate that it also works well for more general workloads, i.e., for workloads where i and j are not necessarily bucket boundaries.
So far, we have considered queries that involve a single attribute. Histogram-based local and routing indexes can be used also in the case of queries that involve more than one attribute. Let us assume m attributes x i ,1  X  i  X  m each having (without loss of generality) a numerical domain D i = { 0 , M i  X  1 } . There is a number of different approaches to exploiting histograms in this case. One approach is to se-lect one of the attributes and cluster on this. The attribute selected may be the one present in most queries or the one with the largest skew among nodes. Another straightfor-ward extension is to select c (1 &lt;c  X  m ) attributes and build one histogram per each. Then, we can define the distance between two nodes as the weighted sum of the c single-attribute workload-aware distances. The weight for each of the distances should be based on the popularity of the respective attribute.

Such approaches, however, ignore any value dependencies that may exist among the attributes. To deal with this issue, we may also consider a multi-dimensional histogram built on all or a subset c of the m attributes. Again, we consider equi-width histograms. Each D i is divided into b i ranges of equal width r i . The buckets are no whyper-rectangles. The value of bucket H i 1 i 2 ...i c is the percentage of items having values i 1 r 1  X  t.x 1 &lt; ( i 1 +1) r 1 and i 2 r 2  X  t.x and ... and i c r c  X  t.x c &lt; ( i c +1) r c .
The distances defined in the previous section can be gen-eralized for multidimensional histograms. For example, let us define pref ( l 1 ,l 2 ) for the case of two-dimensional his-tograms H ij ( n 1 )and H ij ( n 2 ) for two attributes x l  X  b 1  X  1and0 &lt;l 2  X  b 2  X  1and pref ( l 1 ,l 2 ) = 0, other-wise. Consider the range query q i 1 j 1 i 2 j 2 = { r : i and j 1  X  t.x 2 &lt;j 2 } .Itholds: | pref ( i 2 ,j 2 )  X  pref ( i 2 ,j 1  X  1)  X  pref ( i 1  X  1 ,j 1 ,j 1  X  1) | .

Based on the equation above, similar to Def. 6, we get the workload-aware variation of the edit distance for two-dimensional histograms.
We describe first ho whistogram-based routing indexes are used to route a query and then how workload-aware small-world overlays are constructed. We distinguish between two types of links: short-range or short links that connect nodes with similar histograms and long-range or long links that connect nodes with non-similar histograms.
Aquery q may be posed at any node n . Our goal is to route the query q through a set of nodes that gives a large number of results for q , that is, we want to maximize P eerRecall . To achieve this, we use the following simple heuristic: each node n that receives a query q propagates the query through the link e whose routing index gives the  X  link l = e ). By following this link, the query is propagated towards the nodes that are estimated to provide the most results and thus P eerRecall is increased. The routing of a query stops either when a predefined number of nodes is visited ( MaxV isited ) or when a satisfactory number of results is located. Initially, if there are no matching nodes within the horizon of a node ( hresults ( RI ( n, e ), q )=0 link e of n ), we follow the long-range link of node n (even if it does not match the query). The idea is that we want to move to another region of the network, since the current region (bounded by the horizon) has no matching nodes.
Each ne wnode n that enters the system tries to locate similar nodes to connect with using its local index LI ( n )asa query. In particular, each ne wnode n posses to some known node in the system a join message that contains its local index LI ( n ) as a query. With the join message, a list L (ini-tially empty) is also maintained with all nodes visited during the routing of the message. Each node p that receives this message propagates it through its link e whose routing index  X  d (( RI ( p, l ) ,LI ( n ))  X  link l = e ). The message is prop-agated until up to JMaxV isited nodes are visited. Then, node n creates short links with the SL nodes in the list L of visited nodes whose local indexes have the smallest distance with it. With probability P l ,node n also creates a long link with another node from the list different from the SL nodes previously selected. Short links are inserted so that nodes with relevant data are located nearby in the overlay and a large clustering coefficient is attained. Long links are used for keeping the network diameter small. The motivation is that we want to be easy to find both all relevant results once in the right group, and the relevant group once in another group, thus increasing P eerRecall .

When a node n leaves the system, there are two issues involved. Due to space limitation, we provide just an outline of their treatment here. First, the local index of node n is  X  X ubtracted X  from the routing indexes of all nodes in its horizon. To achieve this, the local index LI ( n ) is propagated to all nodes within network distance R (i.e, the radius) of n . Second, we must ensure that the network remains connected and that the small-world properties still hold. For keeping the network connected, the idea is to link in a path all the neighbors of the departing node n . Further, for ensuring that the small-world properties hold, node n selects some of the nodes in its group and moves its long links (if any) to them. In addition, it replaces its short links to neighboring nodes by connecting each such neighboring node to some other node in its group.
An important issue is the estimation of the query work-load. This issue is beyond the scope of the paper, however, we outline some ideas of attaining such estimations. Some or all nodes in the system may keep statistics of the queries that arrive to them, that is, of their local query workload. For the estimation of this workload, each node may keep a random sample . The idea is for each set S of M queries arriving at a node, to sample m ( &lt;&lt; M ) queries randomly and uniformly and replace the previous sample of this node. Another approach to obtaining the sample of the local query workload is the reservoir sampling algorithm [23]. For each set of M queries arriving at a node, a random sample of s queries is computed as follows. Each node inserts the first s queries from the set S into a  X  X eservoir X . Then a random number of queries from S are skipped and the next query replaces a randomly selected query in the reservoir. Another random number of queries is then skipped, and so forth, un-til the last query from the set S arrives at the node. The same procedure is repeated with the next set S of M queries arriving at the node. To obtain an estimation of the total query workload, some form of gossiping or epidemic propa-gation [8] may also be used. Each node must propagate its local workload to a selected subset of its neighbors.
In this section, we evaluate the performance of our ap-proach experimentally. We first consider ho wthe distance metrics behave for different types of queries and data dis-tributions. Then, we use the histograms and the different distance metrics to construct and query a workload-aware peer-to-peer system.
We run a set of experiments to evaluate the histogram dis-tance metrics with regards to the workload-awareness prop-erty (Property 1). We use 100 histograms (nodes) H [ m ], 0  X  m&lt; 100, with 100 buckets each and x  X  [0 , 999]. There are 100000 tuples per histogram (node). We consider a data distribution where for histogram H [ m ], 0  X  m&lt; 100, a fraction of the tuples, denoted as DC ( Data Concentration ), falls in bucket m and the remaining ones are distributed uni-formly among the rest of its buckets. We considered other distributions as well, where the majority of tuples are dis-tributed in more than one bucket; the results attained are qualitative the same.

We compute the distance of each histogram H [ m ], 1  X  m&lt; 100 (i.e. the histogram with most tuples in bucket m ), with H [0] (the histogram with most tuples in bucket 0) using the three distance metrics. We consider the dif-ference between the number of results estimated by each H [ m ] and the number of results estimated by H [0], that is: hdiffer ( H [ m ] ,H [0] ,q ij ) with respect to their distance d ( H [ m ] ,H [0]). The desired behavior (as expressed by Prop-erty 1) is for the difference in the numberof results estimated by the two histograms to be proportional to their distance: the smaller the distance between the two histograms, the smaller the difference in the result sizes.

We consider the average performance of the three distance metrics for a mixed query workload of queries with range from 0 to 50 (Fig. 4). The weights w ij of the workload-aware edit distance are set equal to the query frequencies: w ij = f ij ,where f ij is the frequency of the queries starting at i and ending at j and thus having range k = j  X  i .The starting bucket of each query is chosen uniformly at random. We also consider the case where the starting point i does not correspond to a bucket boundary but is chosen uniformly at random from the domain of the attribute ( wedit ( general )).
As expected, L 1 does not perform well. In particular, be-cause of the nature of the data distribution, all histograms have the same L 1 distance with H [0], since L 1 considers only individual buckets. However, their result sizes when com-pared with H [0] are different (for all queries but for those with range equal to 0). The edit distance performs better than L 1 , since it takes into account the order of buckets; it is shuffling-dependent. In particular, as the distance between the histograms increases, their respective difference in the results also increases. However, at some point, the differ-ence in the results becomes constant while the histogram distances do not. This is because the edit distance between two histograms takes into account the ordering of all buck-ets, while a query with range k involves only k + 1 buck-ets, and thus it does not depend on the difference that the two histograms may have in the rest of their buckets. For example, for a query with range 0, the difference in the re-sults between any H [ m ]and H [0] is the same, since the query involves only a single bucket. However, their edit dis-tance is different, since it considers all their buckets. Con-sequently, the edit distance works well only for queries with Figure 5 :(left) Edit and (right) workload-aware edit distance for multi-attribute histograms large ranges. For the workload-aware edit distance, the dif-ference in the results increases proportional to the histogram distances. The workload-aware edit distance satisfies the workload-awareness property even when i is not a bucket boundary. We also consider the sensitivity of the results with regards to the choice of DC . The results are similar.
We then conducted a number of experiments using multi-attribute queries. In this case, each node stores a relation that includes tuples of two integer attributes x 1 ,x 2  X  For ease of presentation, we consider 10 buckets per dimen-sion, resulting in histograms with 100 two-dimensional buck-ets. Again, we use a data distribution where 70% of the tuples of each node belong to one bucket, and the rest are uniformly distributed among the rest of the buckets. The tuples in each bucket also follo wthe uniform distribution. Figure 5 demonstrates that the performance of (left) the edit and (right) the workload-aware edit distance is similar to that of single-attribute histograms.
In this set of experiments, we use histograms to construct a small-world overlay network. We consider a p2p net-work where each node stores tuples with an integer attribute x  X  [0 , 999]. The tuples at each node are summarized using a histogram with 100 buckets. We consider the same data dis-tribution as in the previous experiments with DC set to 0.7. We study the properties of the network created using our workload-aware small-world construction procedure, in par-ticular, we evaluate the clustering quality and the diameter of the network. When joining the network, each new node creates 1 to 2 short links ( SL = 1 or 2) and one long link with varying probability P l . The routing of the join message stops when a maximum number ( JMaxV isited )ofnodesis visited. JMaxV isited is set equal to a small fraction of the nodes in the network roughly equal to log ( | N | )where | is the number of nodes. We compare the small-world p2p networks constructed using the three distance metrics with a randomly constructed p2p network, that is with a p2p sys-tem in which each new node connects to the same number of nodes as in the small-world network but these nodes are Figure 6: Clustering quality for (left) L 1 and (right) Figure 7: Clustering quality for workload-aware edit chosen uniformly at random from the nodes currently in the system. The size of the network varies from 500 to 1500 nodes and the radius of the horizon from 1 to 3. The input parameters are summarized in Table 1.

To demonstrate the workload-aware characteristics of the p2p network, we consider two different types of query work-loads: (a) QW 0 with queries with range equal to 0 and (b) QW 10 with queries with range equal to 10. The L 1 dis-tance is expected to work well with QW 0 , since it consid-ers individual buckets, while the edit distance is expected to perform better with QW 10 . The workload-aware distance should work well in both cases, since its weights are adapted based on the workload. Figures 6 and 7 show the clustering quality of the created overlays. The p2p network created by using the L 1 and the edit distance is independent of the query workload (Fig 6), thus, it is the same for both the QW 0 and the QW 10 workloads. However, when using the workload-aware edit distance, the network created for QW 0 (Fig. 7(left)) is different than the one created for QW 10 (Fig. 7(right)).

For all distance metrics, the diameter of the network cre-ated is small (of logarithmic order to the number of nodes, i.e. belo w10 for SL = 2 and 500 nodes), very close to that of the random network. In terms of clustering, in the created network, nodes with similar histograms should be lo-cated nearby in the network. To evaluate this, we measure the average histogram distance between nodes at the vari-ous network distances in the created p2p networks. For the QW 0 workload, the desirable clustering is the one that clus-ters together nodes that have the majority of their tuples at the same bucket. There is no need for ordering among these clusters, that is, all clusters are  X  X imilar X  to each other with respect to the results they return to QW 0 .AsshowninFig. 6(left), this is achieved by the L 1 distance. For the QW workload, the desirable clustering is the one that clusters together nodes that have the majority of their tuples at up to 10 neighboring buckets. There should be some ordering among these clusters, since some clusters are  X  X ore similar X  than others in terms of the results they return to QW 10 .As shown in Fig. 6(right), the edit distance orders nodes based on the similarity of all their buckets (not just the 10 adja-Figure 8: Influence of the number of nodes on the (left) cent ones). The workload-aware distance behaves as the L 1 for the QW 0 workload (Fig. 7(left)). For the QW 10 work-load, it orders nodes based on their adjacent buckets (Fig. 7(right)). For the random network, the histogram distance between two nodes is the same independently of their net-work distance, since there is no clustering of similar nodes.
We performed various experiments with different param-eters for the network. The results are similar for SL =1. However, the clustering created is more weak since there are fewer links among similar nodes than for SL =2.Thisbe-comes more evident for the edit and the workload-aware edit distance for QW 10 where the ordering of the nodes based on their histogram distance stops after some network distance. Thus, for SL = 1 due to the limited number of links in a group, similar nodes may be located further apart. We also performed a number of experiments varying the number of nodes in the network from 500 to 1500. As shown in Fig. 8(left) for the QW 10 query workload, the diameter of the network scales well when increasing the number of nodes and remains of logarithmic order. Figure 8(right) depicts the clustering quality that remains unaffected as the num-ber of nodes increases, which means that examining a small number of nodes when joining the system suffices. Query Routing. In this set of experiments, we evaluate the performance of query routing using as our performance measure P eerRecall (as defined in Def. 1). We compare the constructed clustered network with a randomly constructed p2p system ( random ) and also with a randomly constructed p2p system that uses histograms for query routing only ( random join ). We consider a network of 500 nodes and examine the influence of the horizon in the query routing performance for both the QW 0 and QW 10 query workloads. The radius varies from 1 to 3. Query routing stops when a maximum number ( MaxV isited ) of nodes is visited; this is set equal to roughly 5% of the nodes.

Using histograms for both clustering and query routing results in much better performance than using histograms only for routing or not using histograms at all (Fig. 9). P eerRecall decreases for radius greater than 2. The reason is that there are more links, and thus, much more nodes are included within the horizon of a particular node. Thus, a very large number of nodes correspond to each routing index. This results in losing more information than using radius 2.

We performed various experiments regarding a number of parameters of the network construction procedure. Since the focus of this paper is on the workload-aware proper-ties of the network, we report only briefly on some of our findings. We varied the probability P l of creating a long link for each node that joins the system from 0.2 to 1. In general, P eerRecall improves as the number of long links Figure 9: PeerRecall when varying the radius with SL Figure 10: (left) Clustering quality (radius = 2) and increases, since it is easier to locate the appropriate group. However there is a value of P l after which there is no sig-nificant improvement in performance. This value depends on the network configuration (e.g., number of short links), the histogram distance used, the data distribution and the query workload. In general, a value of P l belo w0.6 seems to work well. We also varied the number of nodes from 500 to 1500, P eerRecall remains nearly constant for all histogram distance metrics. Finally, we also evaluated the performance of the network (clustering and P eerRecall )asnodesleave the system. Both clustering and P eerRecall remain unaf-fected even when 50% of the nodes leave the network. Using Multi-Attribute Histograms. We conducted a set of experiments using multi-attribute histograms. Tuples are distributed among the nodes as in the single-attribute case. Our experimental results sho wa behavior similar with the single-attribute case. Figure 10 depicts the network con-structed for a two-dimensional histogram and for a query workload with range 3 for each attribute (whose results oc-cupy 16 buckets). Again, the workload-aware edit distance provides the best results. Figures 10(left) and 10(right) show the clustering quality of the constructed network and its routing performance respectively, for 500 nodes and SL =2.
In this paper, we propose using histograms for building small-worlds overlays. The creation of the small worlds is workload-aware, since it depends on the query workload. To achieve this, we introduce appropriate workload-aware his-togram distance metrics that incorporate the frequency and range of queries in the definition of distance. Our experi-mental results sho wthat our procedure is effective: in the constructed overlay, the network distance of two nodes is proportional to the distance of their local indexes and thus nodes that match similar queries are nearby in the network. Furthermore, routing is very efficient, in particular, for a given number of visited nodes, the results returned are 60% more than in a non-clustered overlay. We are currently work-ing on techniques for workload estimation and for adapting the overlay as the system workload changes. We are also looking into using other type of histograms besides equi-width ones as well as using histograms in structured p2p systems.
Work supported by EPEAEK II, program Pythagoras.
