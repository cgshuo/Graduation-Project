 With the rapid development of microarray technologies, the amounts of high-dimensional microarray data are being generated, which in turn pose great chal-lenges for existing analysis technique. Clustering is one of the most important methods as similar expression profiles imply a related function and indicate the same cellular pathway [1].

Table 1(a) shows an example of microarray dataset, D, consisting of a set of rows and a set of columns, where the rows denote genes, G = { g 1 ,g 2 ..., g m } ,andthe columns denote time points with uniform time intervals, T = { t 1 ,t 2 ..., t n } .Note For simplicity, certain cells have been left blank in the table. We assume that those blank cells are filled by some random expression values. Table 1(b) is a transposed version of the running example in Table 1(a) after some row permutations, where two different regulation gro ups emerge. The first one, shadowed and enveloped by a solid polygon, is plotted in Figure 1(b) against every gene X  X  expression profile of it. Similarly, Figure 1(a) corresponds to the second one not shadowed but enveloped by a dashed rectangle. Note: any pair of genes within a regulation group show either coherent patterns or time-shifting coherent patterns.

Traditional clustering algorithms work in the full dimensional space, which consider the value of each point in all the dimensions and try to group the similar points together. Unfortunately, most of these conventional clustering al-gorithms [2,3] do not scale well to cluster high dimensional data sets in terms of effectiveness and efficiency, because of the inherent sparsity of high dimensional data. Biclustering [4, 5], however, does not have such a strict requirement. If some points are similar in several dimensions (a subspace), they will be clus-tered together in that subspace. This is very useful, especially for clustering in a high dimensional space where often only some dimensions are meaningful for some subset of points.
As a step forward, pattern-based biclustering [6] algorithms take into consid-eration the fact that genes with strong correlation do not have to be spatially close in correlated subspace. However, the existing pattern-based biclustering algorithms are only limited to address pure shifting [7, 8] or pure scaling [9] patterns under the same conditions. For example, the second regulation group of Table 1(b) is visualized in Fig. 1(a). It is a typical pure scaling regulation group since the three patterns are of the relationship: g 8 = g 3  X  0 . 5= g 9  X  3 / 2. Note that since the shifting cluster and the scaling cluster can be transformed mutually [9], we only give the example for scaling pattern here.

Although the previous methods mentioned above prove successful somewhat, they ignore an important bio-interesting pattern implicit in time series microar-ray data, i.e. time-shifting pattern . For example, the expression profiles of genes in the first regulation group of Table 1(b) are illustrated by Figure 1(b), where and falling patterns but with a successive time-lag. Biologically, the relationship implicit in Figure 1(b) is very interesting since from time series gene expression data it is apparent that most genes do not regulate each other simultaneously but after a certain time-lag [10]. That is, a gene may control or activate another gene downstream in a pathway [11]. In this case, their expression profiles may be staggered, indicating a time-lagged response in the transcription of the sec-ond gene [11]. Accordingly, we call the relationship among genes in Figure 1(b) time-shifting , which facilitates the study of genetic regulatory networks.
In this paper, we are interested in mining this kind of time-shifting patterns, which is really bio-interesting but have received little attention so far. Current pattern-based models only validate the case when the time-lag is 0, which is just the special case of our time-shifting pattern.

The main contributions of this work are: (1) We propose a new clustering model, namely ts-cluster, to capture not only the coherent patterns but also the time-shifting coherent patterns. It is a generalization of existing time series pattern-based methods; (2) We propose a tree-based clustering algorithm, i.e. FBLD, which discovers all qualified significant ts-clusters in a  X  f irst b readth-first and l ast d epth-first X  manner. Further, several novel pruning rules are also designed; (3) We consider the relative expression magnitude instead of the ab-solute one, which makes the proposed model more flexible and robust; (4) We conducted extensive experimental studies on both real data sets and synthetic data sets to confirm the effectivenes s and efficiency of our algorithm.
The remainder of this paper is organized as follows: Section 2 gives some preliminary conceptions and the probl em statement. In section 3, we present the ts-cluster model and propose the FBLD algorithm for mining this kind of time-shifting coherent clusters. We also design several advanced pruning rules to improve the performance of the algorithm. Experimental results and analysis are described in Section 4. Finally, w e summarize our research in Section 5. In this section, we define the ts-Cluster model for mining time-shifting co-regulation patterns. 2.1 The Preliminary and Problem Statement experimental time points with uniform time intervals. A two dimensional mi-croarray time series dataset is a real-valued m  X  n matrix D = G  X  T = { d ij } ,with i  X  [1 ,m ], j  X  [1 ,n ], whose two dimensions correspond to genes and times re-spectively. Each entry d ij records the expression value of gene g i at time t j . 1  X  i t subsequence of T .Wecall Y an L -segment of T if its length (the number of elements), denoted | Y | ,is L +1.
 sequences, and t i 1  X  t j 1 . We say that there is a time-shifting relationship between Y p and Y q iff we have j k = i k + t for all k is, Y q is lagged t time intervals behind Y p . Obviously, Y q is the same as Y p when t = 0. For unity, we also regard Y p and Y q as two time sequences with time-lagged relationship in this case.
 lagged 2 time intervals behind Y 1 .
 Definition 3. O Operation. Given a gene g x ,a 1 -segment &lt;t i ,t j &gt; specifies the following three types of regulations, where d xi and d xj denote the expression values of gene x on the time point t i and t j respectively, and  X  ( &gt; 0) is a user-specified regulation threshold: (1) up-regulation ,denoted O x ( t i ,t j ) = ,if d xj  X  d xi &gt; X  (2) non-regulation ,denoted O x ( t i ,t j ) =  X  ,if | d xj  X  d xi |  X  (3) down-regulation ,denoted O x ( t i ,t j ) = ,if d xj  X  d xi &lt;  X   X  Note: we only consider the genes related to regulation, so those occurring non-regulation are overlooked in this paper.
 Definition 4. General Similarity .Let g x and g y be any two genes in the data { i 1 ,i 2 , ..., i n Definition 5. TS-Cluster. Let C = r i =1 X i Y i = { c xy } ,whereX i is a subset of genes ( X i  X  G ) ,andY i is a subsequence of time points ( Y i  X  T ) ,thenX i  X 
Y i specifies a submatrix of D = G  X  T . C is a ts-cluster if and only if: (1)  X 
Y relationship between Y i and Y j ,and(3)  X  g x  X  X i ,  X  g y  X  X j , 1  X  i, j  X  r , suppose Y j is lagged  X t time intervals behind Y i ,  X  t i ,t j  X  Y i , the condition O For example, Fig 1(b) shows a ts-cluster C 1 = { g 1 } X { t 1 ,t 3 ,t 4 } X  X  g 4 ,g 5 } X  { t Apparently, their similarity can not be revealed by previous models. In the ts-cluster model, any two genes have a time-sh ifting co-regulation relationship on their corresponding time sequences, and moreover the previous pattern-based mothod is just a special case of the ts-cluster model when  X t is equal to 0. Although a ts-cluster in Definition 5 represents a time-shifting cluster, our def-inition can be easily generalized to cover other types of time-lag patterns, such as time shifting-and-inverting pattern etc, just by modifying the third condition of the ts-cluster definition, which determines the types of ts-cluster.
Let B be the set of all ts-clusters that satisfy the given homogeneity conditions, then C X  X  is called a maximal ts-cluster iff there doesn X  X  exist another cluster C  X  X  such that C is contained by C .
 Problem Definition. Given: (1) D , a microarray data matrix, (2)  X  ,auser-specified maximum regulation threshold, (3) min t , a minimal number of time points, and (4) min g , a minimal number of genes, the task of mining is to find all maximal ts-clusters, which satisfy Definition 5 and all the given thresholds. The ts-Cluster algorithm has two main steps: (1) Construct initial TS-tree. The co-regulation information and preliminary ts-clusters of all 1-segments are pre-served in this step; (2) Develop initial TS-tree recursively to find all maximal ts-Clusters. Unlike the previous algorithms, we take a  X  X irst breadth-first and last depth-first X  searching strategy, which combines the pruning rules special for pure breadth-first or pure depth-first, to make the algorithm more efficient.
We give the outline of the algorithm followed by the discussions on every main step. First, we construct the initial TS-tree for 1-segments (line 1-2), which will be discussed in Section 3.1, where pruning rules 3 and 4 are used for trimming nonsignificant ts-clusters and unpromising developments (line 3). Note: Algo-rithm 1 will find maximal ts-clusters for 1-segments if min t = 2 (line 4-6). Sec-ond, we develop the initial TS-tree recursively (line 7-13), which will be discussed in Section 3.2. There are two steps in the tree-based clustering. In step 1 (line 7-12), we construct a tree in a breadth-first method. Unlike the previous work, it construct a TS-tree containing the minimal required number of conditions as soon as possible via the proposed min t -based jumping techniques. In step 2 (line 3), we switch to the development of TS-tree with depth-first. In this step, the pruning rule 2, which is designed for filtering those non-maximal TS-clusters, can be used. line 1-8 in Procedure DFS( T l , l f ) detail the development of TS-tree when the height of tree, l , satisfies the limitation of min t . Finally, we obtain the complete set, M , of maximal TS-clusters and return it (line 14-15). 3.1 Construct Initial TS-Tree For clarity, we first look at the appearance of the initial TS-tree, and then de-scribe how it is developed recursively. Figure 2 shows the initial TS-tree con-structed from Table 1, which contains th e ts-clusters according to Definition 5 for all pairs of time points. There are two branches under each leaf node. One, with  X   X , represents all genes under it are up-regulated, and the other, with  X   X , represents all genes under it are down-regulated. Each ts-cluster C = with number  X 0 X  baseline buckets since the time sequence of a baseline bucket ( Y 1 ) is composed of the time points in the path from the root to the node that the ts-cluster C linked to. The number within each bucket denotes the time inter-vals that Y i is lagged behind Y 1 . For example, in Figure 2, the leftmost ts-cluster under t 1 t 3 is composed of five buckets. The time sequence of the baseline bucket ( Y the bucket X  X  number is 1. Analogically, the time sequence of the third bucket is &lt;t 3 ,t 5 &gt; ,andsoon.
 The process of constructing the initial TS-tree is described as follows: Step 1. We begin with the time sequence &lt;t 1 ,t 2 &gt; , which corresponds to path t t 2 in Figure 2, and find the two baseline buckets under it: one with  X   X , which contains all genes up-regulated on time sequence &lt;t 1 ,t 2 &gt; , and the other with  X   X , which contains all genes down-regulated on time sequence &lt;t 1 ,t 2 &gt; .Next, it is the two baseline buckets to be extended.
 one as step 1 does, where  X t  X  [1,m-2]. After generating the two baseline buckets for each { t (1+  X t ) ,t (2+  X t ) } , we need to use these buckets to backwards generate used as a bucket with number 3 to extend the ts-cluster with  X   X  under t 1 t 2 , as a bucket with number 2 to extend the ts-cluster with  X   X  under t 2 t 3 ,and as a bucket with number 1 to extend the ts-cluster with  X   X  under t 3 t 4 .Note: we need not to generate new buckets. Instead, we only need to keep pointers to the corresponding baseline buckets. Figure 2 shows the logical structure of the initial TS-tree and only baseline buckets exist in main memory.
 is constructed, as Figure 2 shown. 3.2 Develop TS-Tree Recursively In this subsection, we introduce how to develop the initial TS-tree recursively to generate all maximal ts-clusters. A TS-tree with height l ,representsall l -segments. Here, an l -segment is represented by a corresponding path in TS-tree from an element in the root node to an element in the leaf node.

Unlike the previous algorithms, we propose a  X  X irst breadth-first and last depth-first X  searching strategy to make the ts-Cluster algorithm more efficient. As mentioned above, the development consists of two phases, i.e. the first phase, BFD(an acronym for  X  X readth-first development X ), and the second phase, DFD (an acronym for  X  X epth-first development X ).

In BFD phase, different from previous work [9], there is no need to grow TS-tree level by level until the TS-tree is of height min t . There is a trick during the development that we can skip several levels of TS-tree based on the following min t -based jumping pruning rule.
 l )) -segment, jumping over ( k +1) -segment  X  MIN ( min t , ( k + l  X  1)) -segment, if
With Pruning 1, we can quickly jump to the ( min t  X  1) level, and meanwhile wecanskipover( k +1)-segment  X  MIN ( min t , ( k + l  X  1))-segment. As shown in Figure 3, we develop the TS-tree in a breadth-first method via min t -based jumping strategy if min t =3, as shown above the broken line of Figure 3.
Generally, the proposed technique is efficiency since min t is usually suitable large for significant co -regulated gene clusters [7]. For example, if min t =8, we Note: the height of initial TS-tree is 1 since it represents all 1-segments .Once the height of TS-tree grows up to min t  X  1, the development switches to the next phase, i.e. DFD.

In DFD, we always develop the leftmost path. Let T = { t i 1 ,t i 2 ,  X  X  X  ,t il } be the current time sequence to be extended. Let T j = { t il ,t j } be any time sequence that can extend T . Then we create a new node which contains the set of t j and link the new node to the tail of T (cell t il ). Next we generate the ts-clusters for each extended time sequence T = { t i 1 , t i 2 ,  X  X  X  , t il , t j } .
We continue the process by depth-firs t method until the rightmost path is developed. DFD allows the following pruning rule, which avoids the non-maximal TS-clusters generated.
 Pruning Rule 2. Given two pathes X and Y of a TS-tree, where X corresponds Y and the ts-clusters under X is the same as those under Y , then the ts-clusters be pruned because they are guaranteed not to contain any maximal ts-cluster.
FBLD is a hybrid of BFD and DFD. It first develops TS-tree in a breadth-first way. Once the height of TS-tree grows up to min t  X  1, the development switches to the next phase, DFD. Pruning rule 1 and pruning rule 2 can be used in FBLD successively, so it outperforms single BFD or single DFD in performance. 3.3 More Pruning Strategies Besides the pruning rules 1 and 2 mentioned above, the following pruning rules can also be used in FBLD, which are essential for the efficiency.
 Pruning Rule 3. min g -based pruning. For a ts-cluster linked to a cell (say v), we can prune it if it contains less than min g genes, as further extension of the corresponding time sequence will only reduce the number of genes in the ts-cluster. Furthermore, we prune the search after v if all the ts-clusters linked to it are pruned.
 Pruning Rule 4. Pruning short Sequence (a) For a time sequence &lt;t i ,t j &gt; of length 2, let T be any arbitrary extended time sequence from &lt;t i ,t j &gt; , then according to our algorithm, the expression any coherent gene cluster having min t or more times points, and thus all the ts-Clusters on it can be pruned and the search after it can also be pruned. (b) When constructing the initial TS-tree, we only need to generate the ts-Clusters on &lt;t i ,t j &gt; when the condition i + (m-j + 1) &lt;min t is met, applying pruning rule 4 (a). And we can further prune the buck-ets in the ts-Clusters on these time sequences. Let c be a ts-Cluster on &lt;t T lead to any coherent gene cluster having min t or more times, and thus b can be pruned if its bucket number d &gt;m  X  min t +1  X  ( j  X  i ) .

For example, in Figure 3, the time sequence of the bucket 3 in the leftmost of min t = 5, as the longest time sequence from &lt;t 4 ,t 5 &gt; extended along with &lt;t 1 ,t 2 &gt; is &lt;t 4 ,t 5 ,t 6 ,t 7 &gt; . We implemented and tested our approaches on both real and synthetic microarry data sets in Java. For convenience, the basic breadth-first approach is called BBFS, the basic depth-first approach is called BDFS, and the first breadth-first and last depth-first approach is called FBLD. The tests are conducted on a 2.4-GHz DELL PC with 512 MB main memory running Windows XP.
 For the real dataset we used a yeast gene expression data from [12], Yeast Datasets contains expression levels of 2884 genes under 17 conditions, which is a subset of [12]. The synthetic datasets , which are obtained with a data generator algorithm with three input parameters: k , the number of embedded clusters (#clusters) in the data set; max g and min g , the maximal and minimal numbers of genes in a ts-Cluster, resp ectively. We generate the data sets by setting min g =10and min t =5. max t is set to the value of 20, and max g is set to 1000. Clusters are generated by restricting the value of relevant dimen-sions for each instance in a cluster. Values for irrelevant dimensions are chosen randomly.
 4.1 Efficiency We first evaluate the performance of the three approaches, i.e. BBFS, BDFS and FBLD, on synthetic data sets as we increase the number of genes and the number of time points in the data sets. The average run times of the three algorithms are illustrated in Figure 4 respectively, where we vary the parameters invoked with min g =30, min t =6, and  X  =0.01.
Figure 4(a) shows the scalability for three approaches under different number of genes, when the number of time points is fixed to 6. Figure 4(b) shows the scalability for three approaches under different number of time points, when the number of genes is fixed to 30. The response time of the mining algorithms is mostly determined by the size of TS-tree. As the number of genes and the number of time points increase, the size of develo ped TS-tree will get deeper and broader. Hence, the response time will unavoidably become longer. FBLD cut down the search space significantly, so it spends the least response time. BBFS need to decide which buckets(ts-Clusters) can be joined with a given bucket during the development of TS-tree, however, BDFS need not. So BBFS will spend more time than BDFS.

Next, we study the impact of the parameters( min g and min t )towardsthe response time on the real datasets and one synthetic dataset. The results are showninFigure5andFigure6.As min g and min t increase, the response time shortened. According to pruning rule 3, more number of unqualified ts-clusters are eliminated when min g is larger. As a result, a smaller TS-tree is constructed, which spends less time. A similar effect can be observed w.r.t min t in Figure 6. 4.2 Effects of the Parameters The mined ts-cluster is validated w.r.t three parameters, i.e., min g , min t and  X  . We set their default values as min g =30, min t =5 and  X  =0.01. Then we test the effect of the parameters on the real GT data set by varying only one parameter while keeping the other one as default. Figure 7 show the effect of each parameter on the number of ts-clusters. Interestingly, the two curves in Figures 7(a) and 7(b) share similar trends. That is, when the value of the parameter (represented by the X axis) increases, the number of ts-clusters (represented by the Y axis) goes down. The curve drops sharply until a  X  X not X  is met, then the curve goes stably to the right. For example, we can see the  X  X nots X  of min g =50 in Figure 7(a), min t =5 in Figure 7(b) and  X  =0.01 in Figure7(c). These  X  X nots X  indicate that there exist stable and significant ts-clusters in the real data set. They are highly correlated, involving a statistically significant number of genes and time points. The  X  X nots X  also suggest the best settings of the parameters to avoid the coherent gene clusters formed just by chance. In this work, we proposed a ts-Cluster model for identifying arbitrary time-lagged shifting patterns from time series gene expression data. However, our definition can be generalized to cover time-lagged inverting or other types of time-lagged patterns just by modifying the third condition of the ts-Cluster definition. We have overcome the problem of previous pattern-based biclustering algorithms which can only find pure shifting, scaling or inverting patterns that are just special cases of the ts-Cluster model. And, based on a TS-tree structure, we have developed a  X  X irst breadth-first and last depth-first X  searching strategy with effective pruning rules to make the maximal ts-clusters mining more efficient. Experimental results prove that our algorithm is able to discover a significantly number of biologically meaningful ts-Clusters missed by previous work. [1] T. R. Hughes, M.J.M.: Functional discovery via a compendium of expression [2] V. Filkov, S.S., Zhi, J.: Analysis techniques for microarray time-series data. [3] S. Erdal, O.O., Ray, W.: A time series analysis of microarray data. In: [4] R. Agrawal, J. Gehrke, D.G., Raghavan, P.: Authomatic subspace clustering [5] L. Parsons, E.H., Liu, H.: Subspace clustering for high dimensional data: a [6] Cheng, Y., Church, G.M.: Biclustering of expression data. In: 8th Interna-[7] J. Pei, X. Zhang, M.C.H.W., Yu, P.S.: Maple: A fast algorithm for maximal [8] H. Wang, W. Wang, J.Y., Yu, P.S.: Clustering by pattern similarity in large [9] Zhao, L., Zaki, M.J.: Tricluster: An effective algorithm for mining coherent [10] H. Yu, N. Luscombe, J.Q., Gerstein, M.: Genomic analysis of gene expres-[11] J. Qian, M.D.F.: Beyond synexpression relationships local clustering of [12] P. Spellman, G. Sherlock, M.Z., et al: Comprehensive identification of cell
