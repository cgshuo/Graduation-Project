 KEVIN MCNALLY and MICHAEL P. O X  X AHONY, University College Dublin The scale of the Web and the heterogeneous nature of its content [Signorini and Gulli 2005] introduces many significant information discovery challenges. For all of the recent developments in search engine technologies, modern search engines continue to struggle when it comes to providing users wi th fast and efficient access to information. For example, recent studies have highlighted how even today X  X  leading search engines fail to satisfy 50% of user queries [Smyth et al. 2005]. Part of the problem rests with the searchers themselves: with an average of only 2 X 3 terms [Lawrence and Giles 1998; Spink and Jansen 2004], the typical Web search query is often vague with respect to the searcher X  X  true intentions or information needs [Song et al. 2007]. Moreover, searchers sometimes choose query terms that are not well represented in the page that they are seeking, so simply increasing the length of queries will not necessarily improve search performance.

Two promising and powerful new ideas in web search are personalization and collaboration. Personalization questions the one-size-fits-all nature of mainstream Web search X  X wo different users with the same query will receive the same result-list, despite their different preferences X  X nd argues that Web search needs to become more personalized so that the implicit needs and preferences of searchers can be accommodated [Asnicar and Tasso 1997; Budzik and Hammond 2000; Chang et al. 2000; Chirita et al. 2004, 2005; Finkelstein et al. 2001; Granka et al. 2004; Ma et al. 2007; Makris et al. 2007; Pretschner and Gauch 1999; Shen et al. 2005; Speretta and Gauch 2005; Zhou et al. 2006].

This article focuses on the second idea, that of collaboration. In the main, Web search takes the form of an isolated interaction between lone searcher and search engine. Recently, however, there has been considerable interest in the potential for Web search to evolve to become a more social activity [Evans and Chi 2010; Evans et al. 2010; Golovchinsky et al. 2009; Morris et al. 2010], whereby the search efforts of a user might be influenced by their social graph or the searches of others, potentially leading to a more collaborative model of search. In the broadest sense the idea of social search is one that tries to unify two distinctive information discovery worlds: the traditional world of Web search and the information-sharing world of social networks. Only a few years ago, by and large, the majority of people located information of interest through their favorite mainstream search engine. But recently there has been a very noticeable change in how many Web users satisfy their information needs. For example, recent statistics from Twitter claim that its users are explicitly searching tweet content 24 billion times per month 2 as compared to approximately 88 billion queries per month for Google. Similarly, at the time of writing, Facebook X  X  own statistics highlight how its users are sharing upwards of 30 billion items of content every month. 3 Many of these items of content would have previously been located through mainstream search engines. Instead, today they are being accessed via our social networks and, in terms of raw volume of information-seeking activity, the social networks are now beginning to compete with mainstream search engines.

This shift in our information discovery habits has lead to an explosion in the number and variety of new social search type services, all of which can influence our informa-tion discovery activities, bringing the world of Web search and social networks even closer together (see Figure 1). In this context, social search can mean many things to many people. For some, social search is all about searching the real-time Web (blogs and microblogs) a la the likes of InfoAxe, OneRiot, and Topsy. For others, social search is about indexing and filtering Web content according to the online activities or opin-ions of users; see, for example, Mahalo (curated search categories), Scour (content indexed and filtered by real-time conversations) or the now-ended Wikia Search. For yet others, social search is about social bookmarking services (e.g. Delicious, XMarks, Twine), people search (e.g. Pipl, Nayms, Spock), or social news services (e.g., Digg, Reddit, Mixx).

Our aim is to make mainstream search engines more collaborative and to help people during routine search tasks by harnessing the recent search experiences of their friends and colleagues via their social networks. The focus of this article is the HeyStaks search service, which adds a layer of collaboration on top of mainstream search engines, so users continue to search as normal but benefit from a more collaborative/social search experience. The core HeyStaks system has been described in detail elsewhere [Smyth et al. 2009a, 2009b], so we shall only review the HeyStaks approach in this article. However, a key contribution of this article is a detailed description of a recent live-user trial of HeyStaks in order to understand the usage and collaboration patterns of users and also the quality of HeyStaks X  social recommen-dations relative to the organic results of mainstream search engines. In addition, a second contribution of this article is a novel enhanced reputation model for HeyStaks, which has been developed in order to evaluate the reputation of individual searchers based on their search contributions. We go on to demonstrate how this reputation model can be used to further improve the quality of HeyStaks recommendations, by prioritizing those that origina te from more reputable users. This article focuses on discussing HeyStaks as a collaborative information retrieval technology, augmented by a reputation system based on the collaborations that implic-itly take place between searchers in the HeyStaks social search utility. As such this background section covers recent, relevant work in the two broad areas of collaborative information retrieval and reputation systems. Approaches to collaborative information retrieval can be usefully distinguished in terms of two important dimensions, ti me X  X ynchronous versus asynchronous search X  X nd place X  X hat is, colocated versus remote searchers. Co-located systems offer a collaborative search experience fo r multiple searchers at a single location, typically sharing a single PC [Amershi and Morris 2008; Smeaton et al. 2008], whereas remote approaches allow searchers to perf orm their searches at different locations across multiple devices [Morris and Horvitz 2007a, 2007b; Smyth et al. 2009b]. The former enjoy the obvious benefit of an increased faculty for direct collaboration that is enabled by the face-to-face nature of colocated search, while the latter offer a greater opportunity for collaborative search. Alternatively, synchronous approaches are char-acterized by systems that broadcast a  X  X all to search, X  in which specific participants are requested to engage in a well-defined search task for a well defined period of time [Smeaton et al. 2008]. In contrast, asynchronous approaches are characterized by less well-defined, ad hoc search tasks and provide for a more open ended approach to collaboration in which different searchers contribute to an evolving search session over an extended period of time [Boydell and Smyth 2010; Morris and Horvitz 2007a].
A good example of the colocated, synchronous approach to collaborative Web search is given by the work of Amershi and Morris [2008]. Their CoSearch system is designed to improve the search experience for colocated users where computing resources are limited; for example, a group of school children having access to a single PC. CoSearch is specifically designed to leverage peripheral devices that may be available (e.g. mo-bile phones, extra mice etc.) to facilitate distributed control and division of effort, while maintaining group awareness and communication. The purpose of CoSearch is to demonstrate the potential for productive collaborative Web search in resource-limited environments. The focus is very much on dividing the search labor while maintaining communication among searchers; live user studies speak to the success of CoSearch in this regard [Amershi and Morris 2008]. The work of Smeaton et al. [2007] is related in spirit to CoSearch but focuses on image search tasks using a table-top computing envi-ronment. Once again, preliminary studies speak to the potential for such an approach to improve overall search productivity and collaboration, at least in specific types of information access tasks. A variation on these forms of synchronous search activities is presented by Smeaton et al. [2008], where the use of mobile devices as the primary search device allows for a remote form of synchronous collaborative search. The iBingo system allows a group of users to collaborate on an image search task with each user using an iPod touch device as their primary search/feedback device (although conven-tional PCs appear to be just as applicable).
 Remote search collaboration (whether asynchronous or synchronous) is the aim of SearchTogether, which allows groups of searchers to participate in extended shared search sessions as they search to locate information on particular topics [Morris and Horvitz 2007a]. The SearchTogether system allows users to create shared search ses-sions and invite other users to join in these sessions. Each searcher can independently search for information on a particular topic, but the system provides features to allow individual searchers to share what they find with other session members by recom-mending and commenting on specific results. SearchTogether supports synchronous collaborative search by allowing searchers to invite others to join in specific search tasks, allowing cooperating searchers to synchronously view the results of each others X  searches via a split-screen style results interface. As with CoSearch, one of the key de-sign goals in SearchTogether is to support a division of labor in complex, open-ended search tasks. In addition, a key feature of the work is the ability to create a shared awareness among group members by reducing the overhead of search collaboration at the interface level. SearchTogether does this by including various features, from integ-rated messaging, query histories, and recommendations arising out of recent searches.
The collaborative information retrieval systems we have so far examined have as-sumed the availability of an underlying search engine and provided a collaboration interface that effectively imports search results directly, allowing users to share these results. As noted by Pickens et al. [2008], one of the major limitations of these ap-proaches is that collaboration is restrict ed to the interface, in the sense that while individual searchers are notified about the activities of collaborators, they must indi-vidually examine and interpret these activities in order to reconcile their own activities with their cosearchers. Consequently, the work by Pickens et al. [2008] describes an approach to collaborative search that is more tightly integrated with the underlying search engine resource so that the operation of the search engine is itself influenced by the activities of collaborating searchers. For example, mediation techniques are used to prioritize as yet unseen documents, while query recommendation techniques are used to suggest alternative avenues for further search exploration.

HeyStaks has been designed to support collaborative Web search tasks that are asynchronous and remote. Our objective is to tightly integrate this form of collabora-tive Web search with mainstream search engines, which is a key point of differentia-tion with respect to previous collaborative search approaches. An overview of the main components of the HeyStaks social search utility is given in Section 3. Recently there has been considerable interest in reputation systems to provide a mechanism to evaluate user reputation and interuser trust across a growing number of social Web and e-commerce applications [J X sang and Golbeck 2009; O X  X onovan and Smyth 2005, 2006; Resnick and Zeckhauser 2002; Resnick et al. 2000; Sabater and Sierra 2005]. This work is, in part, motivated by the idea that an understanding of user reputation can serve as the basis for strategies to guard against malicious users [Hoffman et al. 2009; J X sang and Golbeck 2009; Lazzari 2010]. Here, we present a brief review of the work that has been undertaken in this regard.

To begin, the reputation system used by eBay has been examined by J X sang et al. [2007] and Resnick and Zeckhauser [2002]. Briefly, eBay elicits feedback from buyers and sellers regarding their interactions with each other, and that information is aggregated in order to calculate user reputation scores. The aim is to reward good behavior on the site and to improve robustness by leveraging reputation to predict whether a vendor will honour future transactions. Resnick and Zeckhauser [2002] found that using information received dire ctly from users to calculate reputation is not without its problems. Feedback is generally reciprocal; users almost always give positive feedback if they themselves had received positive feedback from the person they performed a transaction with. In many of these cases the information given is false, therefore reputation is not a reliable indicator of future vendor performance. J X sang et al. [2007] confirms this, stating such systems require manual curation and protection from malicious users.

The work of O X  X onovan and Smyth [2005] addresses reputation in recommender systems. Unlike conventional reputation systems like eBay X  X , reputation is not calcu-lated by examining feedback received directly from users. Instead, the standard col-laborative filtering algorithm is modified to add a user-user trust score to compliment the normal profile or item-based similarity score, so that recommendation partners are chosen from those users that are not only similar to the target user, but who have also had a positive recommendation history with that user. O X  X onovan and Smyth posit that reputation can be estimated by meas uring the accuracy of a profile at making predictions over time. Using this metric average prediction error is improved by 22%.
Similar to O X  X onovan and Smyth [2005], Massa and Avesani [2007] propose a repu-tation algorithm called MoleTrust that can be used to augment an existing collabora-tive filtering system. The mechanism calculates a trust metric similar to item-based similarity, which propagates across a net work of content producers. This algorithm can be tuned to propagate ov er a specific depth across a social graph, meaning that reputable users only have influence over a set of users of a known size. They find that MoleTrust can improve the accuracy of predictions made by a recommender system, even in cases where users have provided few ratings.

Other recent research has examined reputation systems employed in social net-working platforms. Lazzari performed a ca se study of the professional social net-working site Naymz [Lazzari 2010]. He warns that calculating reputation on a global level allows users who have interacted with only a small number of others to accrue a high degree of reputation, making the system vulnerable to malicious use. Similar to J X sang et al. [2007], Lazzari [2010] suggests that vulnerability lies in the site itself, allowing malicious users to game the reputation system for their own ends. Apply-ing reputation globally affords malicious users influence over the entire system, which adds to its vulnerability.

In Section 4, we present a computational model of user reputation for the HeyStaks social search utility. The rationale for the model is twofold, in that it seeks to both protect the quality of HeyStaks recommendations in the face of malicious activity and also to incentivize users to behave in a manner that promotes long-term value for all HeyStaks members. In designing HeyStaks, our primary goal is to provide social Web search enhance-ments, while at the same time allowing searchers to continue to use their favorite search engines. HeyStaks adds two basic features to any mainstream search engine. First, it allows users to create search staks , as a type of folder for their search experi-ences at search time. Staks can be configured to be public (anyone can join) or private (invitation only). Second, HeyStaks uses staks to generate recommendations that are added to the underlying search results that come from the mainstream search engine. These recommendations are results that stak members have previously found to be relevant for similar queries and help the searcher to discover results that friends or colleagues have found interesting, results that may otherwise be buried deep within Google X  X  default result-list.

As shown in Figure 2, HeyStaks takes the form of two basic components: a client-side browser toolbar and a back-end server. The toolbar (see Figure 3) allows users to create and share staks and provides a range of ancillary services, such as the ability to tag or vote for pages. The toolbar also captures search result click-thrus and manages the integration of HeyStaks recommendations with the default result-list. The back-end server manages the individual stak indices (indexing individual pages against query/tag terms and positive/negative votes), the stak database (stak titles, members, descriptions, status, etc.), the HeyStaks social networking service, and of course, the recommendation engine.

In the following sections we review how HeyStaks captures search activities within search staks and how this search knowledge is used to generate and filter result rec-ommendations at search time; more detailed technical details can be found in Smyte et al. [2009a, 2009b]. In HeyStaks, each search stak ( S ) serves as a profile of the search activities of the stak members. Each stak is made up of a set of result pages ( S = { r 1 , ..., r k } )andeachresult is anonymously associated with a number of implicit and explicit interest indicators, based on the types of actions that users can perform on these pages. A number of primary actions are facilitated, for example, in the following.  X  Selections (or Click-thrus) . A user selects a search result (whether organic or rec-ommended). Similarly, HeyStaks allows a user to preview a page by opening it in a frame (rather than a window), and popout a page from a preview frame into a browser window.  X  Voting . A user positively votes on a given search result or the current Web page.  X  Sharing . A user chooses to share a specific search result or Web page with another user (via email or by posting to their Facebook Wall etc.).  X  Tagging/Commenting . A user chooses to tag and/or comment on a particular result or Web page.

Result selections are an example of an implicit action in the sense that this type of action is part and parcel of normal routine search activity. It is also a weak indicator of relevance because users will frequently select pages that turn out to be irrelevant to their current needs. Nevertheless, the frequent selection of a specific page in a specific stak, in response to a particular type of query, suggests relevance. The three other forms of actions (voting, sharing, tagging) we refer to as explicit actions in the sense that they are not part of the normal search process, but rather they are HeyStaks specific actions that the user must chose to use. This type of deliberation suggests a stronger indicator of relevance and as such, these actions are considered to be more reliable that simple result selections when it comes to evaluating the relevance of a page at recommendation t ime. Each result page r S i from stak S , then is associated with these indicators of relevance, including the total number of times a result has been selected ( sel ), the query terms ( q 1 , ..., q n ) that led to its selection, the number of received ( v + ,v  X  ), and the number of people it has been shared with ( share ), as indicated by Equation (1). This idea is related to earlier work by [Amitay et al. 2005] and [Smyth et al. 2004], which involve storing pages indexed by query terms. However, the present technology extends this approach to include other indicators of result relevance, such as usage data and filtering rules, as explained in the following.
Thus, each result page is associated with a set of term data (query terms and/or tag terms) and a set of usage data (the selection, tag, share, and voting count). The term data is represented as a Lucene 4 index, with each result indexed under its associated query and tag terms, and provides the basis for retrieving and ranking recommenda-tion candidates. The usage data provides an additional source of evidence that can be used to filter results and to generate a final set of recommendations. At search time, recommendations are produced in a number of stages: first, relevant results are re-trieved and ranked from the stak index; next, these recommendation candidates are filtered based on the usage evidence to eliminate noisy recommendations; and finally, the remaining results are added to the Goog le result-list according to a set of recom-mendation rules. Briefly, there are two types of recommendation candidates. Primary recommendations are results that come from the active stak S t ; whereas secondary recommendations come from other staks in the searcher X  X  stak-list. To generate these recommendation candidates, the HeyStaks server uses the current query q t as a probe into each stak is assigned a relevance score using a TF*IDF -based retrieval function as per Equa-tion (2), which serves as the basis for an initial recommendation ranking.
Staks are inevitably noisy, in the sense that they will frequently contain results that are not on topic. Thus, the retrieval and ranking stage may select results that are not strictly relevant to the current query con text. To avoid making spurious recommenda-tions, HeyStaks employs an evidence filter, which uses a variety of threshold models to evaluate the relevance of a particular result in terms of its usage evidence; tagging evidence is considered more important than voting, which in turn is more important than implicit selection evidence. The precise details of this model are beyond the scope of this article but suffice it to say that any results that do not meet the necessary evidence thresholds are eliminated from further consideration; further detail can be found in Smyth et al. [2009a, 2009b]. HeyStaks is designed to help users to collaborate during Web search tasks and, impor-tantly, it succeeds in integrating collabora tive recommendation techniques with main-stream search engines. In the next section we introduce our user reputation model, which is based on the collaboration events that inherently occur between users who share their search experiences. In turn, we show how this model can be employed to further enhance the quality of recommendations provided by HeyStaks by using reputation to influence the ranking of recommended results. The different types of activities that a user can perform on a Web page (click-thrus, tagging, voting, sharing) are ultimately combined and leveraged by HeyStaks to make recommendations at search time. While the recommendation algorithm described in Section 3 differentially weights different activity types (so that tagging, for example, is considered a more reliable indicator of interest that a simple result click-thru), the source of the activity (that is, the user performing the activity) is not considered explic-itly. Intuitively, we might expect that some users are more experienced searchers than others; perhaps their activities should be considered more reliable at recommendation time. Thus recommendation candidates that h ail from the activities of very experi-enced users might be considered ahead of ca ndidates that come from the activity of less experienced users. This is particularly important given the potential for malicious users to disrupt stak quality by introducing dubious results to a stak. For example, as it stands, it is feasible for a malicious user to flood a stak with results in the hope that at least some will be recommended to other users at search time. If unchecked, this type of gaming has the potential to significantly degrade recommendation quality; see also recent related research on malicious users and robustness by the recommender systems community [Bryan et al. 2008; Lam and Riedl 2004; Mobasher et al. 2007; O X  X ahony et al. 2002].

In the following section, we describe how user activities in HeyStaks can be har-nessed to generate a computational model of user reputation, based on the collabo-ration events that naturally occur between HeyStaks users who share their search experiences. In turn we will describe how this reputation information can be combined with relevance to produce an improved reco mmendation engine, one that is capable of recommending results on the basis of their relevance to the user X  X  query and stak con-text and according to the reputation of those users who were the source of these results within the staks in question. It seems natural that the reputation of searchers should be linked to the search knowl-edge that they contribute to HeyStaks. In simple terms, this search knowledge is based on the creation and sharing of search staks, and ultimately, the Web pages that are added to these staks as a result of user activity. Each activity on the part of users causes the creation of new search knowledge. If the target page is new to a stak, then its selection, sharing, voting, or tagging will cause it to be added to the stak for the first time. If the page is already represented, as a result of an earlier activity (perhaps by a different stak member), then the page X  X  stak record will be updated to reflect the additional activity.

What then is the relationship between search activity and searcher reputation? It might be thought that more search knowledge is better than less search knowledge so it might make sense to model reputation as a direct function of the sheer volume of activity that a given searcher engages in. This would be a mistake. For a start, just because a user is creating a lot of search knowledge by adding many pages to search staks, it does not mean that this new knowledge is useful, especially to others. On the contrary, one of the major concerns in any social recommender is the potential for misuse through the actions of malicious users, a problem that would no doubt be exacerbated by valuing the contribution of very productive malicious users. Ultimately in a social media context, reputation is a form of incentive. It allows HeyStaks to communicate the value of a user X  X  contributions to that user, and poten-tially to others, and this can help significantly to drive further contributions [Preece and Shneiderman 2009; Rashid et al. 2006]; related to this, is the concept of trust in recommender systems and social networks [Kuter and Golbeck 2010; O X  X onovan 2009], where for example, the accumulation of trust scores can motivate users to en-hance the quantity and quality of their contributions. But like any incentive, reputa-tion can be gamed and thus it is vitally important that the incentive is tightly coupled to the sort of behavior that benefits the system and its users as a whole. A reputation model that is the sum of all user activities does not meet this requirement since it is not necessarily to anyone X  X  benefit to create a system that is measured simply by the volume of its search knowledge. Instead, it is the quality of this search knowledge that is important, and so our model of reputation must consider search knowledge quality. The long-term value of HeyStaks as a social search service critically depends on the ability of users to benefit from its quality search knowledge, and if for example, all of the best search experiences are tied up in private staks and never shared, then this long-term value will be greatly diminished. Thus, our model of reputation must recognize the quality of shared search knowl edge. There is a way to capture this notion of shared search by quality in a manner that serves to incentivize users to behave in just the right way to grow long-term value for all. The key idea is that ultimately, the quality of shared search knowledge can be estimated by looking at the frequency of search collaborations within HeyStaks.

If HeyStaks recommends a result to a searcher, and the searcher chooses to act on this result (i.e. select, tag, vote or share), then we can view this as a single instance of search collaboration. The current searcher who chooses to act on the recommendation is known as the consumer and in the simplest case, the original searcher, whose earlier action on this result caused it to be added to the search stak and ultimately recommended, is known as the producer. In other words, the producer created search knowledge that was deemed to be relevant enough to be recommended and useful enough for the consumer to act upon it. The basic idea behind our reputation model is that this act of implicit collaboration between producer and consumer confers a unit of reputation on the producer (Figure 4(a)). If a given user is a regular producer of search knowledge that is frequently recommended to, and acted on, by many other users, then this producer will accumulate a high reputation score. Moreover, if users create lots of staks and share these staks with many other users, or simply join staks that have been created by others, then they cre ate an opportunity for more collaboration events; and if users contribute good search knowledge to shared staks then their reputation score will benefit from the realization of these frequent collaboration op-portunities. In this way, this collaboration-based model of reputation is incentivizing users not just to create search knowledge of high quality but also to share it with others. The conferral of reputation by a single cons umer on a single producer (Figure 4(a)) is the simplest case of our reputation model. More generally, at the time when the consumer acts (selects, tags, votes, etc.) on the promoted result, there may have been a number of past producers who each contributed part of the search knowledge that caused this result to be promoted. A specific producer may have been the first to se-lect the result in a given stak, but subsequent users may have selected it for different queries, or they may have voted on it or tagged it or shared it with others indepen-dently of its other producers. Thus we need to be able to share reputation across these different producers; see Figure 4(b).

More formally, let us consider the selection of a result r by a user c , the consumer, at time t . The producers responsible for the recommendation of this result are given by producers ( r , t ) as per Equation (3), such that each p i denotes a specific user in a specific stak.
Then, for each producer of r , p i , we update its reputation as in Equation (4). In this way reputation is shared equally among its k contributing producers; see Figure 5 for an example of how user reputation can evolve over time.
Bear in mind that we are modeling user reputation at the stak level. Each user will have a separate reputation score for each stak in which they collaborate. When a result is recommended to a consumer it may origin ate from a number of different staks, so its producers may be members of different staks. Indeed the same user may be a pro-ducer of this result in more than one contributing stak. This model ensures that user reputation scores are updated at consumption time, on a stak by stak basis, thus en-suring that producers get credited based on their stak contributions. This is important because it allows us to distinguish between different reputation levels for the same user in different staks, thereby reflecting different degrees of expertize across differ-ent subjects. For example, the same user might be an expert when it comes to Italian cuisine, and enjoy a high reputation level in this stak, but might have little experience or knowledge when it comes to their new-found love of motorcycle maintenance.
In Section 4.4, we will describe how this type of reputation model can be combined with result relevance at recommendation time with a view to providing a measure of protection against malicious users. Given the formulation of the reputation model, some protection against malicious activity is inherently provided because users only benefit if their results are recommended and also selected by other users. Thus, even if recommended, irrelevant resu lts are unlikely to be selected by consumers and the rep-utation of the malicious producer will not benefit, so that over time, the contributions of malicious users are less likely to be recommended in the future.

The reputation model as it stands is, however, susceptible to gaming in the follow-ing manner. To increase their reputation, malicious users could attempt to flood a stak with pages in the hope that at least some are recommended and subsequently acted on by other users. If this happens, then these malicious producers will ben-efit from increased reputation, and further pages from these users may continue to be recommended. The problem is that the cu rrent reputation model distributes rep-utation equally among all producers. To address this, we can adjust our reputation model by changing the way in which reputation is distributed. The basic idea is that a producer should receive more reputation if many of their past contributions have been consumed by other users but they should receive less reputation if most of their contributions have not been consumed.

More formally, for a producer p i ,let n t ( p i , t  X  1) be the total number of distinct results that this user has added to the stak in question prior to time t ; remember that p i refers to a single user and a specific stak. Further, let n r ( p i of these results that have been subsequently recommended and consumed by other users. We define the consumption ratio according to Equation (5);  X  is an initialization constant that is set to 0.01 in our experime nts. Accordingly, if a producer has a high consumption ratio it means that many of their contributions have been consumed by other users, suggesting that the producer has consistently added useful content to the stak. In contrast, if a user has a low consumption ratio then it means that few of their contributions have proven to be useful to other users.
Thus, given the selection of a result r by a consumer c at time t :if p 1 , ..., p k are the contributing producers, then we can use their consumption ratios as the basis for sharing reputation according to Equation (6).
In this way, users who have a history of contributing many irrelevant results to a stak (that is, users with low consumption ratios) will receive a small proportion of the reputation share compared to users who have a history of contributing many useful results. In the previous sections we have described a reputation model for users. Individual stak members accumulate reputation when results that they have added to staks are recommended and acted on by other users. We have described how reputation is dis-tributed among multiple producers during these collaboration events. In this section we describe how this reputation information can be used to produce better recommen-dations at search time.
 In fact there are at least two ways in which this reputation information can be used. For example, we can implement a reputation threshold so that results that originate from users with some minimum reputation score can be considered as recommenda-tion candidates. We will return to this simple reputation threshold in the evaluation section, which follows, but for now we will focus on a complementary mechanism to allow reputation information to influence recommendations.

The recommendation engine described in Section 3 operates at the level of an indi-vidual result page and scores each recommendation candidate based on how relevant it is to the target query. If we are to allow reputation to influence recommendation ranking, as well as relevance, then we need to transform our user-based reputation measure into a result-based reputation measure. How then can we compute the repu-tation of a result that has been recommended by a set of producers?
One option is to simply add the reputation scores of the producers. However, this favors results that have been produced by lots of producers, even if the reputation of these producers is low. Another option is to compute the average of the reputation scores of the producers. However, this tends to depress the reputation of results that have been produced by many low-reputation users even if some users have very high reputation scores. In our work we have found a third option to work best. The repu-tation of a result page r at time t is simply the maximum reputation of its associated producers; see Equation (7). Thus, as long as at least some of the producers are con-sidered reputable, this result will receive a high reputation score, even if many of the producers have low reputation scores. These less reputable users might be novices with respect to their knowledge of the stak topic, so their low reputations are not as much of a concern in the face of highly reputable producers.
Now we have two ways to evaluate the appropriateness of a page for recommendation X  X he relevance of the page as per Equation (2) and its reputation as per Equation (7) X  X nd we can combine these two scores using a simple weighted sum according to Equation (8), to calculate the rank score of a result page r and its producers p 1 , ..., p k at time t , with respect to query q t . The weight w varies between 0 and 1 and can be used to adjust the influence of relevance and reputation. For exam-ple, if w = 0 then recommended pages are ranked according to their relevance to the target query only, whereas if w = 1 then they are ranked by their reputation scores only. In the following section we will evaluate the rankings produced over a range of values for w . In this section we describe the results of a closed, live-user trial of HeyStaks, designed to evaluate the utility of HeyStaks X  brand of collaborative search in fact finding, infor-mation discovery tasks. In addition we also have the opportunity to evaluate the po-tential benefits of our new reputation model when it comes to boosting the relevance of HeyStaks X  default recommendations. It is worth highlighting that this present evalua-tion complements earlier evaluations of HeyStaks such as those carried out by Smyth et al. [2009b]. These earlier evaluations had the benefit of being open-ended trials, following users during routine search tasks, but were limited in their ability to eval-uate the relevance of HeyStaks recommendations. Instead, these earlier evaluations reported on typical usage by HeyStaks user s, focusing on stak creation and sharing behavior. The benefit of the present closed trial is that it facilitates a more detailed comparative evaluation of result relevance, comparing HeyStaks recommendations to the default Google results, via a manual categorization of the relevance of all the re-sults acted on by all users during the course of the trial. Our experiment involves 64 first-year undergraduate university students with varying degrees of search expertize. Users were asked to participate in a general knowledge quiz, during a supervised laboratory session, answering as many questions as they could from a set of 20 questions in the space of 1 hour. The students worked concur-rently on the same set of questions, which were randomly ordered to avoid any learning bias. The questions were selected from a quiz book by Preston and Preston [2007], and were chosen specifically for their obscurity and difficulty, and lead users to perform queries that are informational in nature. The questions and their correct answers are shown in Table I.

It was highly unlikely that students would be able to answer any significant number of these questions from their own general knowledge, so the purpose of this experiment was to look at how the students used HeyStaks and Google to help them answer these questions. Each user was allocated a desktop computer with Mozilla X  X  Firefox Web browser and the HeyStaks toolbar preinstalled; they were permitted to use Google, enhanced by HeyStaks functionality, as an aid in the quiz. Users were made aware of the functionality provided by the HeyStaks toolbar, so if they found a page they liked they could either tag it or vote on it, having been informed in an introductory one hour lecture and demonstration of the HeyStaks system how this might affect future Google searches and the searches of others. Note however that users were not explicitly directed to use the HeyStaks toolbar, rather to avail of it as they saw fit.
The 64 students were randomly divided into search groups. Each group was as-sociated with a newly created search stak, which would act as a repository for the groups X  search knowledge. We created 6 solitary staks, each containing just a single user, and 4 shared staks containing 5, 9, 19, and 25 users. The solitary staks served as straightforward benchmarks to evaluate the search effectiveness of individual users on a noncollaborative search setting, whereas th e different sizes of shared staks provided an opportunity to examine the effectiveness of collaborative search across a range of different group sizes.

All activity on both Google search results and HeyStaks recommendations was logged, as well as all queries submitted during the experiment. Specifically, the fol-lowing event/activity information was logged during the trial for later analysis.  X  the time in which the activity took place (a Unix timestamp);  X  the ID of the user who acted on a result and the stak ID in which the action was taken;  X  the URL of the result page acted on;  X  the type of action (result selection, tag, vote, or share) performed;  X  the type of result acted on, i.e. either an organic Google result or a HeyStaks rec-ommended result.

During the 60-minute trial, a total of 3,124 queries and 1,998 result activities (se-lections, tagging, voting, popouts) were logged, and 724 unique results were selected. As expected, during the course of the trial, result selections X  X he typical form of search activity X  X ominated over HeyStaks-specific activities such as tagging and voting. As shown in Figure 6(a), averaged across all staks, result selections accounted for just over 81% of all activities, with tagging accounting for just under 12% and voting for only 6%.

For the purpose of establishing a ground truth for result relevance, each result page was examined post-trial by a number of experts and its relevance with respect to the appropriate quiz question w as categorized as follows.  X  Not relevant X  X hat is, the result page content had no relevance with respect to a question;  X  partially relevant X  X hat is, the result page contained an implicit reference to the answer or to a part of the answer to a question;  X  relevant X  X hat is, the result page contained the answer to a question.
 Figure 6(b) shows a relevance breakdown of the result pages logged during the course of the trial. 66% of the result pages acted on were categorized as being not relevant with respect to the questions posed, while only 14% were deemed relevant. These findings demonstrate the difficulty of the questions presented. We will return to this relevance information later in this section when we use it to evaluate the relevance of HeyStaks recommendations.
 Using this trial data we can explore a number of important questions pertaining to the benefits, or otherwise, of social Web search and the value of reputation during result recommendation. In particular, in the remaining sections we will explore the following questions.  X  Is there evidence that search collabora tion helps individual searchers find more relevant results than they might have on their own, in the absence of collaboration?
To answer this question we can look at the outcome of our quiz as the core search task. Overall, do students from shared search staks perform better than students from solitary search staks? Do the former attempt more questions than the latter?
Do they answer more questions correctly?  X  How does collaboration influence the efficiency of search sessions? For example, are there any differences in terms of the number of queries submitted or results selected (or tagged etc.) between solitary searchers and the collaborating searchers who are members of shared staks?  X  How good are the recommendations made by HeyStaks? Specifically, how often can users expect to benefit from recommend ations, and when recommendations are made, how relevant are they relative to the default organic results from the under-lying search engine?  X  Does our reputation model offer a useful perspective on searcher reputation and/or expertise? How do searchers in the trial a ccumulate reputation across shared staks?
Do we see evidence of search leaders and followers? To what extent could this repu-tation model help to impro ve recommendation quality?
We will attempt to answer each of these questions with reference to the data from our live-user trial. To begin with, it is worth looking at the overall performance of students during the quiz as a basic outcome measure for this search task. Will the students participating in shared staks benefit from the searches of other stak members and outperform solitary searchers? And to what extent does stak size and the number of collaborators influence performance?
Figures 7(a) and (b) present box-plots of the number of questions attempted and answered correctly per user across the diffe rent stak sizes; note that for clarity we have grouped the results obtained for the 6 solitary staks and reported the aggregate information as a single solitary stak, indicated as the stak of size 1. These results point to the benefit of sharing and collaboration during this search task. For example, we see that the single-users of the 6 solitary staks attempt a median of 3.5 questions and answer only 3.0 of these questions correctly. By comparison, the median values across shared staks are between 5.5 and 8 questions attempted and between 4 to 7 questions correctly answered.

In general the influence of stak size is less clear in terms of these measures of overall performance. In the 9-person stak, more questions are answered correctly (7) than any of the other shared staks, for example, even compared to the much larger 19-person and 25-person staks. It is likely that the search expertize of individual users is playing a role here and so a simple measure such as stak size is unlikely to be a powerful predictor of overall performance given the variation in expertize that likely exists among the individual members of a stak. Moreover, the closed-world nature of this trial X  X taks are limited by people and by topic to a 20-question quiz X  X ikely limits the value of increasingly large staks, at least beyond some minimal critical mass. We have presented evidence to show how the members of our shared staks perform better than solitary searchers in our search task. Our key hypothesis is that this is due, at least in part, to the benefits of the type of search collaboration that HeyStaks is designed to facilitate. Specifically, we posit that the members of shared staks will benefit from relevant results, promoted due to the activities of other stak members, results that might otherwise be difficult to find. We will look in more detail at these promotions in the next section but first it is useful to look at the level of granular search activity across the different search staks. Are there any differences between the numbers of queries submitted, or activi ties performed by users across different stak sizes, for example?
Figures 8(a) and (b) presents box-plots for the number of queries and activities per user across the different search stak sizes; remember that by activity, we mean in-stances of users selecting, tagging, sharing, or voting for results, as an indicator of relevance. We can view the number of queries submitted by a searcher as a proxy for their search effort and the number of activities (result selections, tagging, etc.) they generate to be an indicator of relevance for the results returned for these queries. To begin with, we can see that the solitary searchers submit more queries than the students in the shared staks. Specifically , as per Figure 8(a), across these users the median number of queries submitted during the course of the search task is 52, com-pared with only 39 X 46 queries for users in the shared staks; or to put it another way, solitary searchers submit 13% X 33% more queries than their collaborating coun-terparts in shared staks. And when we look at the number of activities registered by solitary and collaborating users (Figure 8(b)) X  X s preliminary indicators of result relevance X  X e see the former have a median 23 activities (selections, tags, etc.) across these queries, compared to 28 X 40 activites for the members of the shared staks; this is a relative increase of 22% X 74% in favor of the shared staks.

An even clearer picture takes shape when we combine these two results to look at the median number of activities per query per user across the staks, as per Figure 9(a); this can be viewed as a proxy for the relevance (via number of activi-ties) per unit search effort (number of queries submitted). Now we can see a very significant difference between the activities per query for the solitary searchers (approximately 0.4 activities per query) and the collaborating searchers in the shared staks (approximately 0.6 X 0.8 activities per query). In other words, 1.5 to 2-times as many queries lead to some form of activity among the users in shared staks compared to the solitary searchers, suggesting that the former are benefitting significantly from results that are, apparently at least, more relevant than those experienced by the latter. Again we will return to the notion of relevance in a future section but for now perhaps an even more pragmatic metric of relevance per unit search effort can be calculated by combining the average number of correct quiz answers per query per user across the various staks. This is presented in Figure 9(b), and once again we can see a very significant difference between the solitary searchers and the users who are members of shared staks. In the case of the former, on average they correctly answer 0.044 questions per query, but for the latter this ratio increases to 0.15. In other words, on a per query basis, our collaborating searchers are answering up to more than 3 times as many questions correctly than the solitary searchers, which is a very significant productivity gain for the members of shared staks. Given that the members of shared search staks seem to be enjoying improved search productivity when compared to their solitary counterparts, we now turn our attention to the likely source of this improvement: the recommendations that are generated by HeyStaks. To begin with, it is worth looking at how often HeyStaks is able to recom-mend results to the members of the different staks. This is presented in Figure 10 as the percentage of queries that result in at least one HeyStaks recommendation. As expected, larger staks mean more recommendations, bec ause there are more search experiences to act as a source of recommendations. For example, on average over the solitary staks, we find that only 16% of queries lead to recommendations, and by def-inition, these recommendations are due to the solitary searcher submitting queries that are similar to those they have used previously. In contrast, the likelihood of rec-ommendations grows quickly as stak size increases. Even for the 5-person stak, nearly 40% of queries lead to recommendations, growing to over 62% for the largest 25-person stak.

Of course simply making lots of recommendations is not the goal of HeyStaks. The success of these recommendations will depend on how relevant they are, and in par-ticular, whether they are more relevant than the default, organic results from Google. To explore this we focus on those search results that ultimately received user atten-tion (selections, tags, etc.). There are 724 of these results, and as mentioned previ-ously, we manually categorized each as relevant, partially relevant, or not relevant. Figures 11(a) and (b) show the percentage of these result activities that are relevant, partially relevant, and not relevant, for both the default (Google) organic results and the HeyStaks recommendatio ns, across the shared staks. In this case we exclude single-person staks as we wish to examine the effects of result-sharing, rather than simply result recovery.

Comparing the graphs for the recommended results versus the organic results we can see a significant relevance benefit for the former. For example, an average of 48% of recommended result activities (avera ged across the 4 different stak sizes) are deemed to be relevant compared to only 28% for the organic results; in other words, the recommendations that attract user activity tend to be more frequently relevant than the organic results that attract user activity. Similarly, we find that on average, 41% of the organic result activities are for not-relevant results compared to only 21% for the recommended result activities.
To better quantify this relevance benefit we can compute a relevance ratio for or-ganic and recommended results as per Equation (9). Basically, this is the ratio of relevant results to not-relevant results. A relevance ratio less than 1 means that the majority of results are not relevant, whereas a relevance ratio of more than 1 means that the majority of results are relevant. Figure 12 presents the relevance ratio of organic and recommended results on a stak by stak basis. For each stak we can see that the recommended results have a much higher relevance ratio than the default organic results. For example, in the case of the 5-person stak, the organic results have a relevance ratio of 0.5. However, the relevance ratio for the recommended results in this stak is more than twice as high, at 1.3.

It is worth discussing the 9-person stak, which does especially well by this evalua-tion measure. Although not the largest stak, this stak is the best performer (e.g. more questions answered correctly per user), most likely because its members are better searchers to begin with. The relevance ratio of its recommended results is 4.7 (about 55% of these results are relevant) which points to the very high quality of the recom-mendations made for this group of searchers. But it is interesting to note that for this stak, the relevance ratio of the organic results is also relatively high, at 1.1. This sup-ports the notion that these stak members are better than the average searchers. Even their organic search results are more relevant than the norm, presumably because they are able to produce more effective que ries in the first instance. And of course if the resulting organic results are more relevant to begin with, then this will ultimately translate into superior recommended results because these more-relevant organic re-sults ultimately become recommendations themselves as they are acted on by users. The results of the previous section highlight the potential benefits of the HeyStaks form of collaborative Web search in the context of the target search task. Rec-ommended results turned out to be significantly more relevant, according to our independent relevance metric, than conventional organic results. In effect, we found Heystaks to be amplifying the relevance of organic results through its recommen-dation process, with better quality organic results leading to a progressive uplift in the quality of the results that make it through the various recommendation stages and filters. As an aside, the correlation between the organic relevance ratio and the recommendation relevance ratio data from Figure 12 is 0.98, indicating a strong linear relationship between the quality of the organic results and the subsequent quality of the recommended results. This bodes well for HeyStaks, as it means that recommendation relevance is fuelled by search expertize within a stak, which creates a kind of positive feedback loop in the drive towards better recommendations. However, this type of positive feedback is not without its dangers and one obvious problem is that on its own, it could provide a mechanism for malicious users to spam a stak and accelerate the promotion of their target content. Even absent overtly malicious users, recommendation quality can degrade if prolific, but inexperienced, searchers contribute large quantities of irrelevant results to a stak.

Clearly there needs to be some sort of control to protect against such issues in prac-tice and it is with this in mind that we have developed the reputation model described in Section 4, which provides a mechanism to differentiate between recommendations that are derived from the activities of inexperienced versus experienced or malicious versus well-meaning users. In this section we explore the reputation data generated during the live-user trial. In what follows, reputation is shared among the producers in a collaboration event in proportion to the quality of their previous search contribu-tions as described in Section 4.3. We will focus our reputation analysis on the 58 users who were members of the shared staks, since by definition the reputation model does not apply to searchers in solitary staks.

Figure 13 plots the reputation scores, accumulated by the end of the trial, across the 58 collaborating searchers. Recall that th e reputation score of a user is effectively a function of the frequency with which their contributions have been recommended and subsequently selected (or otherwise acted on) by other searchers. Clearly there is a diverse range of reputation scores across all of these users. All users have a reputation score greater than zero, indicating that everyone contributed to at least some collabo-ration events within their respective staks. Interestingly, there are a number of users with especially high reputation scores. The top 8 users have reputation scores of 20 or more, indicating that they acted as producers for at least 20 collaboration events, and likely many more depending on how many other producers were also involved in the same events, which as described in Section 4.3, affects the distribution of reputation across producers. In fact, the mean number of p roducers per collaboration event is 3.4, with a standard deviation of 2.3.

We might ask where these reputation scores come from for our users. For exam-ple, do they accrue from just a small number of key results that many other users select when they are recommended? Or do we find that different users are broadly contributing to search expertize across a wid er variety of results? As it turns out, the latter is the case. Figure 14 plots the reputation score of a user versus the number of distinct results contributed to collaboration events by that user. We can see that the more reputable users contribute more distin ct results (from 10 to 27 distinct results), which then serve as valuable search knowledge to drive effective recommendation and collaboration.

Turning our attention to reputation at the stak-level, Figure 15 presents box-plots for the reputation scores per user across the 4 shared staks. As we might expect, we can immediately see how larger staks tend towards higher median reputation scores across their members X  X ore members means more opportunity for collaboration and thus higher reputation potential X  X ut this tendency does not always hold. For exam-ple, we can see that the median reputation score for members of the 5-person stak is approximately 5 compared to median reputation scores of 10 X 15 for the larger 9, 19, and 25-person staks. The most reputable user in the trial, with a reputation score of 35, hails from the 19-person stak; however, the next two most reputable users, both with reputation scores in excess of 30, are members of the 9-person stak, which has a very similar median reputation score (14.5) despite having ten fewer members com-pared to the 19-person stak (14.9). We know f rom our earlier performance results that the users in the 9-person stak perform particularly well, both in terms of their quiz performance (e.g. median questions correct per queries submitted) and the relevance of their search results. This performance is reflected in their reputation scores too. Moreover, the box-plot for the 9-person stak indicates a higher reputation-score at the first and third quartiles than is found for any of the other staks.

This data relates to the reputation scores that accumulated by the end of the 60-minute trial. It is also interesting to look at how reputation builds during the course of the trial. For example, is there a slow accumulation of reputation, indicating that effective collaboration is ra re during the early stages of the trial? Or does effective collaboration start from an early stage, in which case we should find a more rapid growth in reputation among stak members. To examine this we note the number of users with non-zero reputation scores at 5-minute intervals during the trial; we do this retrospectively by analysing the collaboration logs. The results are plotted in Figure 16 for each of the 4 shared staks across the 60-minute duration of the trial (from 10.30 am to 11.30 am). We see a consistent reputation profile across the 4 staks with reputation beginning to accumulate from an early stage, albeit more slowly, as expected, for the 5-person stak. For example, by the 20-minute mark, the 9, 19, and 25-person staks all have in excess of 80% of their members with non-zero reputation, compared to 40% for the 5-person stak. For these 3 larger staks, 100% of their members have non-zero reputation by about halfway through the trial. In other words, most stak members contribute useful search knowledge to staks from a very early stage so that other members start to benefit from useful recommendations from very early on during the trial. It is interesting to note that the 9-person stak performs particularly well according to this measure X  X ndeed it outper forms the largest 25-person stak. Again, these findings indicate that stak size is not the only determining factor when it comes to driving collaboration between users; it is likely that the quality of the search content in the 9-person stak also plays a key role in this regard. As discussed previously the motivation for incorporating a reputation model into the HeyStaks recommendation engine is to provide a way for searcher expertize to influ-ence recommendation. In Sect ion 4.4, we described how to calculate the reputation score of a result page from its producers an d how to incorporate this into the recom-mendation ranking process by combining result reputation with the default HeyStaks X  relevance score. During the present trial we did not include the reputation model directly for the purpose of ranking recommendations; the results presented up until now are all based on the default Heystaks relevance-based recommendation system described in Section 3.2. However, because we can compute the reputation of users at any point during the course of the trial, it is feasible to retrospectively apply the repu-tation model to rerank the HeyStaks recommendations in order to assess the relevance of the reranked recommendations in comparison to the default ranking.
 To do this, we simply reranked the recommendations for every trial query, using Equation (8) in Section 4.4. We adjusted the reputation weight, w ,from0(noreputa-tion) to 1 (pure reputation ranking) to examine the effect of modulating the influence of reputation compared to the default He yStaks recommendation score. In addition we tested a reputation filter to eliminate any recommendations which had less than a predefined reputation threshold. In principle, by increasing the reputation threshold in this way we should experience an improvement in recommendation quality, but at the same time it will reduce recommendation coverage X  X he number of recommenda-tions that can be made X  X ecause none of the recommendations for certain queries will exceed the threshold. The effect of this is presented in Figure 17(a) as a graph of cover-age versus reputation threshold. It is clear that as the reputation threshold increases there is a steady decline in coverage. Obviously there is little to be gained from increas-ing the reputation threshold to such an ext ent that no, or very few, recommendations can be made, so for the purpose of this experiment we consider reputation thresholds of 0 (providing 100% coverage because all result pages have reputation  X  0), 0.3 (pro-viding coverage of approximately 70%), and 0.5 (providing coverage of just under 40%).
For the purpose of a side-by-side comparison of the standard HeyStaks recommen-dation ranking versus the variations (by reputation, weight, and reputation threshold) on reputation-based ranking we calculated the relevance ratio across all top-ranked recommendations made by each system for all queries submitted during the user trial. Relevance ratio is calculated as the number of relevant pages recommended divided by the number of not relevant pages recommended as per Equation (9). The results of this experiment are presented in Figure 17(b) as the relative benefit (percentage increase in relevance ratio) of reputation-based ranking, in comparison to the default HeyStaks recommendation ranking, for different values of the reputation weight ( w ), from 0 to 1, and for 3 different reputation thresholds (0, 0.3, and 0.5). For example, according to Figure 17(b), we see that at a reputation threshold of 0 and a reputation weight of 0.5, there is a relative benefit of 35%. At these settings, the relevance ratio for default HeyStaks X  recommendations was 1.25, and the relevance ratio for recom-mendations using reputation-based ranking was 1.69, leading to a relative benefit of (1 . 69 X 1 . 25) / 1 . 25 or 35%.

Clearly the results for Figure 17(b) speak to the significant benefits that can be gained by integrating our reputation model with the default HeyStaks X  recom-mendation engine. We can see that across all of the reputation weights evaluated, once reputation is allowed to influence the recommendation ranking (that is, once the reputation weight is greater than 0) then there is an increase in the relative number of top-ranked recommendations that are judged to be relevant. Based on the reputation data generated in this trial, the optimal reputation weighting seems to be in the 0.4 X 0.6 region (with relative benefits in the 35% X 45% range), allowing reputation to play a more or less equal role to the default HeyStaks X  recommendation score during ranking. As the reputation weight is increas ed, initially we see a rapid increase in its relative benefit score but as the reputation weight exceeds 0.6 we see relative benefit fall back as it begins to overinfluence the recommendation rankings. As expected there is a benefit due to increasing the reputation threshold: the relative benefit curves for the 0.3 and 0.5 thresholds both outperform the 0 threshold setting. However there is little real difference in the outcome between the 0.3 and 0.5 thresholds, at least in this experiment, most likely because of the limits of the data available during this trial. In this evaluation we have described the results of a live-user trial of HeyStaks. Im-portantly we acknowledge that this trial is limited and that our results must be viewed in the context of these limitations. It is not a large-scale trial of thousands or millions of searchers. Such a trial might be possible in the context of conventional search en-gines but it is not feasible, at least not yet, for HeyStaks. Nevertheless the trial does involve a reasonable number of users and reflects a realistic search use-case. Of course this use-case X  X  fact-finding search task X  X lso has its limitations. It is, for example, just one of the many reasons why users avail of search engines and there is clearly an opportunity for further work in order to broaden our evaluation to cover more open-ended search and discovery tasks; preliminary results for these open-ended style eval-uations have been presented in Smyth et al. [2009b]. Nevertheless, our closed quiz does provide useful insight and facilitates a thorough evaluation with respect to an independent model of result relevance, and as such we could state definitively which results were relevant and which were not relevant, on a question by question basis. Given these trial limitations, the outcome of our evaluation has been very positive. We have demonstrated that there are clear benefits for those users who participated in shared staks compared to solitary searchers. The former enjoyed improved search per-formance overall and required significantly less search effort. The evaluation helped to clarify the relevance benefits of HeyStaks recommendations. Shared stak members benefited from recommendations that were objectively more relevant than the default organic search results. These recommendations effectively amplified the relevance of results selected by search leaders and benefitted search followers accordingly.
Finally, we demonstrated the benefits of our proposed reputation model in a very concrete, albeit offline, manner. By allowing reputation to influence recommendation ranking it was possible to significantly improve the relevance of the top-ranked rec-ommendations made to users. Of course we are not able to conclude that this will mean that searchers are likely to directly benefit from this improved ranking, be-cause we were not in a position to evaluate the actual responses of live users to these reranked recommendations. I t is conceivable, for example , that searchers may avoid these more relevant results when they are ranked using reputation, while selecting them in the default HeyStaks ranking. However, this seems most unlikely and it is common practice in Web search evaluations to acknowledge that there is an extremely strong bias between the position of results and their likelihood of selection (see e.g. Keane et al. [2008]). It is generally accepted that if one can produce rankings where top-ranked results are more relevant, the n these rankings are likely to meet with a better user response. Hence we believe that the findings from the offline evaluation of the reputation model in the previous section are significant when considered from this viewpoint.
 The world of Web search is changing. Many of our information needs are being met by sharing through social networks as much as they are through queries to search engines. As Web search evolves, there is a significant opportunity for search engines to accommodate a more collaborative form of information discovery, one that takes advantage of our social networks to deliver an improved search experience that can be influenced by our trusted friends and reputable third-parties.

To this end we have described the HeyStaks social search service. HeyStaks sup-ports collaborative Web search by allowing the past search experiences of our friends and colleagues to influence our future searches. It does this by providing a segmented social search experience in which individ ual users can create and share search staks on topics of their choosing. At search time, HeyStaks learns from the search activi-ties of the members of a stak and uses this information to generate recommendations based on results that other users have recently found relevant for similar searches. HeyStaks delivers this social search functionality via the browser so that users can continue to use their favorite mainstream search engines while benefiting from a more collaborative search experience. The core co ntribution of this article has been an ex-tension of the HeyStaks recommendation engine, which incorporates a novel model of search reputation, based on the extent to which a user contributes to collaboration across the staks of which they are members.

We have also described a live-user trial of HeyStaks to demonstrate the relevance of its core recommendations across different types of search stak, and the value of the reputation model as a way to further i mprove recommendatio n quality. Overall the results of this trial speak to the clear benefits of this more collaborative approach to Web search. Collaborating searchers dem onstrated improved performance in the benchmark task and an objective evaluation of result relevance indicates that the HeyStaks recommendations enjoyed superior relevance to the default Google results. Moreover, we demonstrated how the reputation model quickly helped to distinguish the most experienced searchers from those less experienced, and by incorporating reputation into the recommendation process it was possible to further improve the relevance of recommendations by over 40%.

Finally, it is worth highlighting that HeyStaks is a robust, scalable social search service that has been designed not as a laboratory testbed but rather as a deployable social search service. To this end the service is currently available in beta form online at the HeyStaks Web site.

