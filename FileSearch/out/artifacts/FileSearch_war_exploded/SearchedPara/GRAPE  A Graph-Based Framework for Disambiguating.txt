
Statistics show that people search makes up 30 % of all searches on Google or Yahoo [1]. However, due to the increasing availability of Web data, finding the relevant information about a particular person becomes more and more difficult. People information is often scattered across many pages, and names are heavily ambiguous in Web people search. Unfortunately, regular search engines do not provide effective solutions for people search. For example, when Google is queried with a person name of  X  X ohn Smith X , the top 100 returned Web pages refer to at least 10 different namesakes, including famous English soldier, singer, and common people. In order to find the information about the target  X  X ohn Smith X , users are forced to either add keywords (which could lead to degradation of recall) or browse every Web page (which is time-consuming). Thus, solving the problem of name ambiguity is a major concern in Web people search.

Although several research efforts have been made to ad-dress Web people search and related challenges [2][3][4][5], more efficient and effective approach in Web people name disambiguation has yet to be developed.

In this paper, a people entity denotes  X  X  unique person X , and a people name may correspond to several people entities. It is observed that people tag information (e.g., organization, location, and occupation) is more informative for users than the set of Web pages retrieved by search engines. Taking a people name query  X  X ohn Smith X  for example, if tags  X  X olitician X  and  X  X lasgow University Union X  co-occur in several retrieved pages, it may be suggested that these pages describe the same people entity of  X  X ohn Smith X . The co-occurrence of these tags can help achieve high disambigua-tion quality. However, not any tag set can represent a unique people entity, for example, a combination of tags  X  X olitician X  and  X  X SA X  are more likely to refer to multiple people entities. This suggests that different types of tags make different contributions in name disambiguation, and we will make full use of this observation in this work.
 Given a people name as a query, let document corpus D = { d 1 ,d 2 ,...,d n } be the set of the top n returned results from a search engine. Differently from the previous methods [6][5][7][8], this paper proposes a weighted graph-based framework, GRAPE, to both disambiguate and tag people appearances in Web search. First, eight types of tags are extracted from each document d  X  D , including people name, organization, location, email address, phone number, birth date, occupation, and URL domain. Then the proposed framework views the unique tag corpus A = { a 1 ,a 2 ,...,a m } extracted from D as a graph with m nodes, where a node is created for each unique tag a  X  A , and an edge is added between two tags when they co-occur in the same document. Secondly, the importance of each tag in A is measured, and a clustering algorithm is performed on the graph to group these tags into clusters, while the tags in each cluster are used to represent a certain people entity.
The contributions of this work are summarized as follows. The rest of this paper is organized as follows. In Section II, we introduce the related work. Section III provides some details of the graph-based framework. Section IV presents the experimental results. We conclude our paper and discuss some future work in Section V.

Numerous approaches have been mainly proposed for author disambiguation in publication citations and Web people name disambiguation [9][10][2][11], among which we focus on the later. In [2], Bagga and Baldwin applied agglomerative clustering technique based on context sim-ilarity. However, they tested in their experiment a single person name of  X  X ohn Smith X , which is insufficient for generalizing the real world challenge. Except for using the context information in name disambiguation, the approach taken by [8] applies clustering techniques over the rich extracted biographic features. This study further shows the importance of categorical information (e.g., occupation and birth year), which can improve the performance of namesake distinction. Additionally, [4] combines two unsupervised frameworks to leverage an existing social network of people to aid disambiguation, among which one is based on link structure of the Web pages while another adopts agglomera-tive/conglomerative double clustering. Experimental results show that the hybrid model is effective in name disambigua-tion but requires background knowledge about the target person.

Since most of the given corpus include limited informa-tion about the ambiguous people name, online resources are often used to mine more information about the tar-geted people name. [6] creates extended queries to a Web search engine to disambiguate different people with the same name. [5] tries to utilize the online encyclopedia for people information detection and disambiguation. Moreover, Kalashnikov et al. [12] presented a new Web people search approach based on collecting co-occurrence information from the Web. Their method performs well on the name disambiguation task, however, it is more suitable on sever-side since much time is consumed on the task of Web co-occurrence counting.

Some graph-based approaches have also been proposed to solve similar problems. [13] proposes a method to represent a corpus of email messages as a graph and effectively solves the problem of name ambiguity in email documents. Likewise, [14] builds a graph for Web people search results, each node represents one text type, such as token, webpage, metadata, title, or body. The authors proposed a random walk model to determine whether two Web pages in the graph refer to the same person. However, their experimental study shows that the performance of this approach is not very good.

One of the major tasks of workshops SemEval-2007 [15] and WePS-2009 [16] is to disambiguate people names in a Web searching scenario. Besides, many meta-search engines including Vivisimo (http://ww-w.vivisimo.com) and Carrot2 (http://www.carrot2.org) are working on clustering to resolve the name ambiguity problem. Recently, some commercial systems for people search have also emerged, such as Wink (www.wink.com) and Spock (www.spock.com).

This paper aims to solve the problem of name ambiguity in Web people search. Differently from others, our work uses a graph-based framework to enable a wider range of information (e.g., people tag types and tag relationships). Additionally, a new method is proposed to measure the importance of people tags in name disambiguation. Note that a very preliminary version of the paper was published as a poster in WWW X 09 conference [17]. In this study, we make further enhancements, and especially provide large amounts of experimental validation for the proposed framework.
A people name query in this paper consists of a first name and a last name, and a collection of documents obtained by inputting the query to a search engine is denoted by D = { d 1 ,d 2 ,...,d n } . Assume D contains a set of people entities, and each people entity is relevant to a few tags. Our approach for Web people appearance disambiguation is to group the extracted tags into different clusters, such that each resulting tag cluster corresponds to a people entity.

Figure 1 depicts the GRAPE framework. After preprocess-ing and extracting people tags from the set of documents D , a graph is modeled on the extracted tags, and then a clustering algorithm is performed on the graph with the purpose of obtaining the final tag clusters. In this section, we describe the framework in detail.
 A. Preprocessing
Preprocessing is a critical initial step to clean and select data for further development. Given the document corpus D , some noisy documents which are irrelevant to the given people name should be removed. We first fix three legal mentions of the given queried people name, namely, &lt; firstname &gt;&lt; lastname &gt; , &lt; firstname &gt;&lt; middlename &gt;&lt; lastname &gt; , and &lt; lastname &gt;&lt; firstname &gt; . Meanwhile, a constraint of word boundary is employed to detect illegal people name mentions. For example, with respect to the name query of  X  X dward Fox X , the mention of  X  X dward Foxe X  will be ignored. Then documents without any legal mention of the given people name are discarded. Next, the remaining documents are cleaned off their HTML markups and Javascript coding. Finally, we transform both the html escape characters and ASCII code to the source string, for example,  X  &amp;nbsp;  X  is converted to blank, and  X  &amp;#65;  X  is converted to letter  X  X  X .

As the preprocessing proceeds, junk documents and for-mat contents in the documents are filtered out. However, a Web document may not totally focus on the queried people name, but also contain other irrelevant tag information. To compensate for this, we apply a chunk window around each occurrence of the given people name. We have tested different window sizes on training data and compared the disambiguation performance versus window sizes as shown in Figure 2. In the figure,  X  X ull X  denotes the entire document, F
PI and F EB are the performance evaluation measures, which will be discussed in detail in Section IV-B. The experimental results show that chunk window of 2500 makes the best performance. Although the difference between using the window size of 2500 and using the full document is not large, several unusually long documents always happen, which dramatically increases the burden of running time. Therefore, the chunk window of 2500 characters in length before and after the name is recommended. To avoid infor-mation loss, the chunk window starts (ends) at the beginning (end) of a complete sentence and an overlap between the windows results in a merged window. These chunk windows can serve two purposes. On the one hand, it avoids extracting some noisy tags, on the other hand, it can balance the length of documents in D to some extent.
 It must be noted that accurate tag extraction often depends on the rich context information surrounding the queried peo-ple name. In order to preserve complete context information, stopwords (i.e., high frequency common words) removal and word stemming (i.e., reducing derived words to their stem form) are not performed at this step. For instance, in the context of  X  X ohn Smith was appointed as Foundation Professor at the University of Sydney X , if all the stopwords  X  X s X ,  X  X t X ,  X  X he X , and  X  X f X  are removed beforehand, the tag  X  X niversity of Sydney X  is probably missed in extraction. B. Tag Extraction
As shown in Figure 1, after preprocessing, tags are extracted from the chunk windows in each document. Many different types of tags can be used to describe a person. In this paper, we select eight common types of people tags in-cluding people name, organization, location, email address, phone number, birth date, occupation, and URL domain. Intuitively, some combinations of these tags can uniquely characterize a specific people entity. In this subsection, we introduce the tag extraction patterns and filtering rules. 1) Extraction Patterns: Both model-based and rule-based methods are employed in tag extraction. People name, orga-nization, and location are detected using both the character language model and hidden Markov model from a natural language processing toolkit Lingpipe 1 , other types of tags are extracted based on a set of extraction rules.

Email address is a string of characters separated into two parts by an  X  X  X , that is,  X  X sername@domain-name X . Phone number is a sequence of numbers, whose format is standardized by ITU-T (http://www.i-tu.int/ITU-T/). The phone number pattern accepts tags in both local format (e.g., 6258657 ) and international format (e.g., 1-626-780-7552). In addition, a number of variants of the phone number are considered. For example,  X (503) 494-6862 X  are often represented as  X 503-494-6862 X  or  X 5034946862 X . According to the regular standards discussed above, rules are generated for email address and phone number respectively.

In order to improve the extraction accuracy, we combine the extraction rules and a predefined common occupation dictionary for occupation detection, that is, occupation must be one mention in the dictionary, which is collected from Wikipedia in advance. Additionally, as the full URLs of the hyperlinks seem to be too specific, we define a rule to output the root of each URL. For example, given the extracted URL  X  X ttp://www.macombbar.org/associations/ X , the rule will re-turn  X  X ww.macombbar.org X  as the URL domain tag.

Table 1 shows the extraction rules for birth date, occu-pation and URL domain, where name denotes one of the legal mentions of the queried people name, birthdate is in the form of date, occupation is one mention in the common occupation dictionary, and domain represents the extracted URL domain name. 2) Filtering Rules: The extracted tags are used to identify each people entity for a given people name. And yet, preprocessing is not perfect, and some extracted tags make little sense for this purpose, which will be filtered out from the tag corpus as follows. The quality of tags is extremely important for clustering. These filtering rules, which can improve the accuracy of tag extraction, lead to better clustering results and help represent people entity characteristically.
 C. Graph Modeling
Through Web document preprocessing and tag extraction, eight types of tags T = { people name, organization, loca-tion, email address, phone number, birth date, occupation, URL domain } are extracted, and a union of eight tag sets A = 8 i =1 T i is generated, where T i contains the non-repetitive (i.e., unique) tags with the type t i  X  T .
Regarding the tag corpus A for a people name, we build an undirected labeled graph G =( V, E ) , where the node set V = { v 1 ,v 2 ,...,v m } is a set of unique tags (where m is the total number of unique tags), and each edge ( v i ,v j )  X  E represents the co-occurrence of the tags corresponding to v i and v j in the same document in D . The graph G for any given query name is not always a connected graph. In the following, we first give some definitions, then introduce how to compute a weight for each edge and each node in G . 1) Definition: Given a tag graph G =( V, E ) and one of its subgraphs G  X  G , if the subgraph G is a maximal clique subgraph containing all the tags in a single document, it is called a micro-cluster . In fact, micro-clusters denote the initial co-occurrence relationships among the tags. Figure 3 gives an example of a tag graph and there are in total four micro-clusters. In the following we introduce several other definitions.

Definition 1. ( Bridge-tag ) Node v is defined as a bridge-tag, if v links at least two micro-clusters. In Figure 3, nodes 3 and 6 each corresponds to a bridge-tag.

Definition 2. ( Reachable ) Any node v is reachable from w , if there is a chain of nodes u 1 ,u 2 ,...,u m , u 1 = v , u m = w , such that there is an edge between u i and u i +1 ,  X  i  X  X  1 ,...,m  X  1 } , which can be equivalently formalized as:
Definition 3. ( Macro-cluster ) A subgraph C is called a macro-cluster when it consists the maximal micro-clusters, which interconnect with strong connectivity strength. Details on the measure of connectivity strength are postponed to be discussed in Section III-D, and we note that each bridge-tag belongs to at least one macro-cluster. According to the definition of macro-cluster, we can get the following property.

Property 1. If C is a macro-cluster, all nodes in C are reachable from each other and C has the maximal reachability (i.e., if a non-bridge tag v is in C , any other non-bridge tags connected with v arealsoin C ), formally:
M acro -cluster ( C )  X  Proof:
Let tags v, w belong to micro-clusters M v and M w respectively. The proof is outlined as follows. (1) We first prove the reachability of a macro-cluster C . Assume that  X  v, w  X  C are not reachable, so any tag in M v is also not reachable from tags in M w . Then the connectivity strength between M v and M v is zero, which draws the conclusion that v and w are not in the same macro-cluster. Therefore, we conclude that  X  v, w  X  C , Reachable( v, w ) must be true. (2) Suppose v  X  C, w  X  V and v, w are not bridge tags, we have M v  X  C . Since ( v, w )  X  E, we can get w  X  M v and M w = M v . Thus, we conclude that w  X  C . 2) Edge Weighting: Roughly speaking, if two distinct tags co-occur frequently in multiple documents, they may be strongly relevant. Accordingly, in the proposed graph model, an edge indicates the relevance of the connected nodes corresponding to tags v and w , and the edge weight, edgeweight ( v, w ) , is defined as the number of documents where v and w co-occur. 3) Node Weighting: Although the eight tag types are all used to describe people on the Web, different types of tags have their own characteristics. Generally, there is a low probability that an email address is shared by two namesakes, while two namesakes could be relevant with the same organization or location. This observation leads us to assign different type weights to nodes with different tag types.

Intuitively, an ideal tag type should have the following property that each of its tags is uniquely associated with one people entity, while the more the number of distinct tags of one type for each people entity w.r.t. a query name, the less this tag type contributes in name disambiguation. For instance, if a person has cooperated with two companies, two different company names may occur around this person name in two documents d 1 and d 2 respectively. Obviously, the company names (with the tag type of  X  X rganization X ) misguide name disambiguation regarding whether d 1 and d 2 mention the same people entity.

In this work, we assign a type weight to each node according to the following heuristic: the higher the number of unique tags of a certain type, the smaller the weight of each node with this tag type. Thus, the tag weighting function is defined as Formula 1, where v denotes any tag with the type t i  X  T . | A | is the number of non-repetitive tags in D , and | T i | is the number of unique tags of the type  X  t i  X  . | T i | =1 means that there is only one tag typed t i in D . Although this situation is very rare given a large document corpus, we assign constant 1 to avoid zero-valued divisor. D. Clustering
It is found that each of the majority of the documents in D usually refers to a single people entity. However, the influence that a document mentions more than one people entity should be considered, therefore, we have performed experiments, in which documents overlapping in different clusters was allowed when the same document mentions several people entities (i.e., namesakes). The experimental results show a higher precision but much lower recall, which results in the degradation of the overall performance (i.e., the harmonic mean of precision and recall). Hence, our work proposes a clustering algorithm for name disambiguation under the assumption that a document exactly concerns one people entity w.r.t. the given query name.

Accordingly, this algorithm first assigns tags in a micro-cluster to a separate initial cluster. Then the algorithm groups micro-clusters into several macro-clusters, each of which represents a unique people entity. In order to complete this task, the connectivity strength between micro-clusters has to be considered to judge whether tags from different micro-clusters are actually referred to the same people entity. 1) Connectivity Strength (CS): Vector Space Model(VSM) is traditionally used to measure the similarity between documents [2][18][19], but documents with many tags are poorly represented in VSM because they have a small scalar product and a large dimensionality. To overcome this shortcoming, we measure the similarity between any two micro-clusters M i and M j , denoted by Connectivity Strength , using Formula 2. If the Connectivity Strength is above a predefined threshold  X  , the tags in these clusters are considered to refer to the same people entity and should be merged into one macro-cluster. [11] has defined a function of  X  X onnection Strength X  in a entity-relationship graph, and used a topic-based correlation clustering through training the skylines. Differently, our  X  X onnectivity Strength X  is defined in a tag graph to measure the similarity between micro-clusters based on bridge-tags. Here, b k is the bridge-tag linking micro-clusters M i and M j ( k = 1 ,...,n ), and Cohesion ( b k ,M i ) is the internal cohesion of tag b k in M i , which will be defined later. Although different documents might miss different types of tags about the queried people, they usually contain some types of tags, which connect different documents. Thus, the micro-clusters corresponding to the same people entity are usually connected by the bridge tags. This formula means that the more the bridge-tags connecting these two micro-clusters and the higher the cohesion weight of each bridge-tag, the larger the connectivity strength between them. Based on the cohesion value of a bridge tag, the proposed graph-based approach effectively clusters the tags referred to the same people entity scattering in different cliques together.
Most of the existing work weight the words by TF-IDF [2][5]. That is, suppose f(w) is the frequency of word w in document d , N is the total number of documents, and df ( w ) is the document frequency of word w , then the weight of word w in the TF-IDF representation of d is defined as follows.
The measure of TF-IDF regards words with higher fre-quency and lower document frequency more important. In this work, the worthless tags with high document frequency have been filtered out as stop words in Section III-B2. On the other hand, some infrequent but relevant tags which have high type weights are retained as they are effective in name disambiguation. For this reason, we develop a more effective method, Cohesion , by applying a similar framework with TF-IDF. The proposed new method is employed to compute the importance of a tag, taking both tag frequency and type weight into account. This method emphasizes on the internal cohesion of a tag in a micro-cluster. The higher the cohesion value, the more important the tag v to micro-cluster M .
Let p ( v, M ) be the probability of tag v in micro-cluster M obtained from the number of occurrences of tag v divided by the total number of all tag occurrences in the micro-cluster M . Assuming the independence between any two distinct tags in the same micro-cluster, we have the co-occurrence probability for any two connected nodes v and w in the micro-cluster M , p ( vw, M )= p ( v, M ) p ( w, M ) . We compute the internal cohesion of tag v in M as follows.
As defined in Formula 3, a high Cohesion weight is reached by a high type weight and a high joint occurrence probability of v with other nodes w j in M ( m is the number of nodes connected with v in M ). In addition, the Cohesion formula is factorized by a co-occurring weighting parameter  X  , which is the minimum number of v involved bridge-tags linking M and any other micro-clusters. This factor is introduced to measure the relevancy of tag v with other tags in M . Since common tags, which occur too frequently have been filtered out as stop words, if tag v often occurs with many other tags linking M and other micro-clusters, there is a high relevancy of tag v with M , and accordingly the cohesion weight of v in M is high. Compared with TF-IDF, the Cohesion measure is more suitable for the tag evaluation in people name disambiguation on the Web. 2) Clustering Algorithm: The clustering is performed in two steps. In the first step, all the micro-clusters (i.e., maximal clique subgraphs) are first identified. In the second step, a single link clustering algorithm is adopted to merge two connected micro-clusters with the connectivity strength value above a predefined threshold  X  to form a larger micro-cluster until all the micro-clusters are visited. In this way, we get a final set of macro-clusters.

The optimal threshold  X  for clustering is acquired through training data. The training data set is divided into 10 parts randomly, and then 10-fold cross validation [20] is adopted to estimate the disambiguation performance. Finally, the threshold, having the best average performance, is deter-mined as the clustering parameter  X  on test data sets. In this work, the threshold is trained to be 0.45 for the GRAPE model. 3) Tagging: The output of the above clustering algorithm is a set of tag clusters, each of which represents a unique people entity. According to the framework in Figure 1, we applied our GRAPE approach in a real Web application. Given a query name, after preprocessing and tag extraction from the returned top 100 results of a Web search engine, we get people tag clusters by using the clustering algorithm. Finally, we select tags with high frequency in each type of tag set to represent each people entity effectively.
As illustrated in Figure 4, we demonstrate the tag clusters generated by our approach for three people entities regarding the query name of  X  X ndrew Powell X . The final set of tags except URL domain in each cluster are listed in a table under the corresponding people entity.
 A. Data Sets
We evaluated our GRAPE approach using four different public data sets. The first one is SIGIR X 05 [1], which contains 9 common people names and 110 Web pages for each name. The second data set, WWW X 05 [4], is composed of 12 person names. The third one is the test data set of task WePS X 07 in SemEval-2007 [15], containing 30 people names. Both WWW X 05 and WePS X 07 consist of collections of Web pages obtained from the top 100 results for a person name query to an Internet search engine. The forth data set is WePS X 09 [16], which contains 30 people names, and 150 returned Web pages for each people name.

We used the training data of the WePS competition 2 to learn the clustering threshold. This data set contains 49 different people names and has also been designed as the training data of both WePS X 07 and WePS X 09 tasks.

For each people name in the data set, a tag-based graph is modeled and the proposed clustering algorithm groups the micro-clusters in the graph into several macro-clusters, each of which characterizes a unique people entity (i.e., namesake). The average number of tags, bridge-tags and micro-clusters for each query name in the test data sets are summarized in Table II.
 B. Evaluation Measures
Two measures, F EB [21] and F PI [15], were used for evaluation. Herein, F EB is the extended B-cubed measure based on Precision and Recall, while F PI is the harmonic mean of the standard Purity and Inverse-Purity clustering measures. As stated in [21], the measure of F PI focuses on the match between clusters and category, and F EB can handle the problem of overlapping clustering effectively. Moreover, F EB measure satisfies most of the clustering con-straints and is recommended for generic clustering problems. In the following evaluation, Precision, Recall, Purity, and Inverse-Purity are abbreviated as EB-P, EB-R, P, and IP respectively.
 C. Empirical Results
Four different sets of experiments were conducted to validate the effectiveness of the proposed framework in disambiguating and tagging people names.
We used TF-IDF and Equal-Weight (denoted by EQW) as the baseline methods on SIGIR X 05 and WWW X 05. TF-IDF employs the vector space model in clustering based on the tag frequency and inverse document frequency. On the other hand, EQW assumes each tag typeweight in Cohesion measure is equal, which aims to verify the effectiveness of the typeweight measure. The names from WWW X 05 are primarily of researchers in related research area and more diverse than SIGIR X 05, we tested them separately to indicate the effectiveness of our proposed method for different real world challenges.

The experimental results on SIGIR X 05 and WWW X 05 are presented in Table III and Table IV respectively, where the best scores are in boldface. As the results indicate, the proposed method makes a big improvement over the method TF-IDF in name disambiguation. The idea of assigning different types of tags with different weights makes signifi-cant improvement on SIGIR X 05 and a little improvement on WWW X 05. In addition, as demonstrated in Section III-D3, our approach generates a set of meaningful tags to describe each cluster (corresponding to a namesake).

Some experiments were also performed on a Web people search task using data sets from WePS X 07 [15] and WePS X 09 [16]. Table V and Table VI compare our approach with the top 3 best systems in WePS X 07 and WePS X 09, respectively. We used the same training data and test data as the systems in both WePS X 07 and WePS X 09 tasks to make sure that the performance comparison is unbiased.

From the results in Table V and Table VI we see, the proposed GRAPE approach achieves better overall perfor-mance (measured by F EB and F PI ) than the state-of-the-art systems. Due to some uncertain information in doc-uments, even annotator in person cannot decide whether some document belongs to a cluster or a new people entity. According to [16], the F EB / F PI performance of Oracle systems which know what is the best clustering threshold for each test instance on WePS X 09 is 0.85/0.90, which indicates that our GRAPE approach works well and almost achieves the optimal performance.

Furthermore, we conducted a set of experiments for different tag sets. Table VII shows the results. NE denotes the combination of people name, organization, and location, while BioTag denotes the tag set including email address, phone number, birth date, and occupation. [12] represents the social network of a namesake using only people names and organizations, as they speculate that locations cannot be reliable for people disambiguation as many people might be linked to one location. Thus, we also report the disam-biguation effectiveness using people name and organization only (denoted by  X  X E  X  Location X  in Table VII). The results in Table VII show that the tag type of location is useful in most of cases, thus we retain location in name disam-biguation and tagging. Although different tag combinations play different roles over different data sets, the experimental results demonstrate the effectiveness of the combination of NE, BioTag, and URL domain in name disambiguation. There have been many attempts to utilize the extended Web resources for disambiguating people names. We imple-mented another clustering algorithm (denoted by WebExt), which uses additional Web resources in Web people name disambiguation as presented in [6]. Given a Web documents corpus, WebExt extracts terms from each document, and then compares these terms by inputting each term as a query to Web search engines and collecting the snippets in the top 100 returned results. Based on the term similarities, WebExt computes the document similarity by using group-average agglomerative clustering algorithm (GAAC). Figure 5 shows the comparison results, where F EB and F PI measure results for the same algorithm are presented separately with the same color in each data set.

According to the results in Figure 5, our GRAPE ap-proach performs better than the WebExt algorithm. WebExt considers the entire document, which adds much noise. Moreover, WebExt is over an order of magnitude slower than GRAPE. Therefore, it is a big challenge to exploit the external Web resources to improve the performance of people name disambiguation. Bad external resources usually bring in much noisy information, which costs much time and leads to inaccurate clustering results.

This paper proposes a novel weighted-graph based frame-work, GRAPE, to both disambiguate and tag the people names in Web search. A graph structure is devised to model the relationships among people tags, and an unsupervised clustering algorithm is developed to cluster all the tags for each people entity, which effectively solves the problem of name disambiguation in Web people search. Specially, the proposed method takes type weight into account to measure the importance of tags. Furthermore, an extensive performance study was performed using several public data sets and the proposed approach outperforms all the existing solutions.

A number of approaches exist to improve the capability of Web search for people information searching. However, it still remains a challenging research issue. For future work, we have three main research interests. One is people tag extraction. Most natural language processing tools were previously used to train a model for a news corpus, such as Lingpipe used in this paper, yet the Web is noisier. Thus, some specific extraction models are needed for more accurate tag extraction in Web pages. The second direction is to explore the social networks. It is observed that people name is the most frequent type of tag, people name indices or family trees are often presented in the returned pages. These pages are too ambiguous for name disambiguation, but provide a good source for social network construction. Hence, an extension of this work is to mine the people relationships on the Web. Furthermore, we plan to apply the proposed framework in a real Web people search system, and provide the analysis of efficiency for further validation. This work was supported in part by National Natural Science Foundation of China under Grant No. 60833003 and No. 90924025, National Basic Research Program of China under Grant No. 2006CB303103, an HP Labs In-novation Research Program award, a research award from Google, Inc., and the Program for New Century Excellent Talents in University under Grant No. NCET-07-0491, State Education Ministry of China, the Guangdong Provincial Government, State Education Ministry of China under Grant No. 0712226-100097.
