 Web services expose their functionalities through the Web, via application pro-gramming interfaces (APIs), which can be invoked by the client applications. Concerning software evolution, Web services are black box dependency magnets As application developers have no access to the internals of the services they use, they are clearly dealing with software modules of a black box nature. At the same time, even a small change in a Web service can reflect to a vast number of applications that use it. In particular, when a conventional API changes, the developers of the dependent applications can avoid dealing with the changes by sticking with an older version of the API. On the contrary, when a Web service changes, the evolution typically comes with a strict time plan, within which the developers of the dependent applications must migrate to the new version [ 4 ]. Understanding the evolution of Web services is therefore both difficult and important for application developers who need to know whether they can depend on the stability of the services they use and whether there are patterns and regularities concerning their evolution. Unfortunately, although existing research [ 5 , 15 ] has provided valuable information on the statistical breakdown of the changes occurring to the services X  interfaces, the understanding of regularities and patterns during the lifetime of services has not been investigated yet. oriented paradigm in industry, i.e., the Amazon Web Services (AWS) context, we perform a principled empirical study that detects evolution patterns and regularities, based on Lehman X  X  laws of software evolution [ 3 , 11 ]. Our find-ings indicate that service evolution typically comes with spikes of change, during which operations are added or updated, followed by longer or shorter  X  X alm X  periods that focus on internal improvements of service correctness, performance and security and allow the developers of Web service applications to absorb the changes. Typically, the provided functionality increases in a predictable manner , whereas, unfortunately, its incremental growth is not predicable . Based on our findings, we provide recommendations that can be used by the developers of Web service applications for service selection and application maintenance. In partic-ular, evolution histories with calm periods between spikes are a desirable feature in service selection, as it allows the absorbtion of change. Thus, the study of the change history and functionality expansion can be used to attest on the suitabil-ity of a service during service selection. Concerning maintenance, functionality expansion can be predicted. At the same time, as the heartbeat of change itself is unpredictable, resources and time must be allocated to keep the applications up to date.
 on software evolution; Sect. 3 provides the basic concepts of our approach, along with the setup of the empirical study; Sect. 4 details our method and findings; Sect. 5 discusses the practical implications of the study for the developers of Web service applications; Sect. 6 concerns threats to validity; finally, Sect. 7 summa-rizes our contribution and discusses future work. To come up with patterns and detailed insights in the evolution of Web services, we resort to traditional tools from the area of software evolution. Back in the 70 X  X , Meir Lehman and his colleagues initiated their study on the evolution of software systems [ 3 ] and continued to refine and extend it for the next 40 years (e.g., [ 11 , 12 ]). Lehman X  X  laws concentrate on the evolution of E-type systems , i.e., software systems that solve a problem, or address an application in the real world. The essence of Lehman X  X  laws is that the evolution of an E-type system is a controlled process that follows the behavior of a feedback-based mechanism . More specifically, the evolution process is driven by positive feedback that reflects the need to adapt to the changing environment, by adding functionalities to the evolving system. The growth of the system is constrained by negative feedback that reflects the need to perform maintenance activities ,soastopreventthe deterioration of the system X  X  quality. In [ 9 ], the authors provide a detailed his-torical survey of the evolution of Lehmans X  X  laws. Further studies revealed the diverse behavior of software concerning the validity of Lehman X  X  laws. In [ 16 ], for instance, the authors found evidence that commercial software is typically more faithful to the laws than academic and research software. A number of studies focused on open source software (e.g., [ 7 , 8 , 10 , 18 ]), while in [ 17 ], we employed Lehman X  X  laws to investigate the evolution of open-source databases; the common ground in all these studies is that they found support for the laws of continuing change and growth.
 So far, the efforts that concern the evolution of Web services focus on classi-fications of changes, compatibility checks, version control and so on [ 1 , 5 , 6 , 15 ]. [ 5 , 15 ] provide a first valuable insight on the evolution of real-world services. In both of these works the authors observed that the changes occurring to the services X  interfaces are mostly additions and updates, while the deletions were relatively few. Another interesting empirical study on Web service evolution is reported in [ 4 ]. In this study the authors interview the developers of Web service applications to investigate the problems they encounter, due to the evo-lution of the services they use. Moreover, they investigate the evolution policies employed by the service providers. The findings of this study showed that differ-ent providers follow different practices and essential features like versioning are sometimes neglected. Moreover, the providers force changes upon the developers of Web service applications, so as to co-evolve with the services.
 Going beyond the state of the art, in this paper we perform, for the first time in the related literature, a principled empirical study that exploits Lehman X  X  laws of software evolution to provide detailed insights on the evolution of Amazon services. Based on our findings we further provide recommendations that can be used by the developers of Web service applications for service selection and application maintenance. In this section, we discuss the basic concepts and the overall setting of our study. 3.1 Basic Concepts We study the evolution of services that follow the standard Web services architec-ture and expose their functionalities via WSDL specifications. The core concept of the data model that we employ in our study is the service evolution history , which provides information about the way that a service evolves.
 Definition 1. Service evolution history -The evolution history for a ser-s . The elements of H s are totally ordered with respect to the their corresponding release dates. Definition 2. Service release -A service release that belongs to the evolu-tion history, H s ,ofaservice, s , is a tuple, r s i =( ID, date, Size, Change ) that consists of the following elements:  X  ID is the release identifier that reflects the order of r  X  date , is the release date of r s i .  X  Size , is a tuple of basic size metrics that concern different parts of the WSDL  X  Change , is a tuple of basic change metrics that concern the transition from 3.2 Amazon Web Services Amazon is a major service provider that provides a variety of services, hosted on the AWS infrastructure. AWS is very popular, having customers such as NASA, NASDAQ, Netflix, Facebook, Adobe, D-Link, etc. 5 . In our study, we selected 6 Web services, for which it was possible to recover their detailed evolution history. Following, we provide further details regarding the functionalities of the examined services, while Table 1 gives information concerning the service releases that we considered.
 via the allocation and management of virtual servers, deployed on the AWS infrastructure. Elastic Load Balancing (ELB) can be used together with EC2, to balance the load that is handled by a set of virtual servers, which have been allocated, via EC2. Auto Scaling (AS) provides means for scaling up, or down, a set of virtual servers that have been allocated via EC2. Simple Queue Ser-vice (SQS) allows message-based communication via queues. Relational Data-base Service (RDS) provides means for managing and using relational databases, over the AWS infrastructure. Mechanical Turk (MTurk) provides access to a scal-able workforce, via an interface that offers operations for the creation of tasks, the qualification/selection of workers who are going to perform the tasks, the retrieval/approval of the work done, the payment of the workers, etc. 3.3 Release History Extraction and Assessment Method To proceed with our study we calculated the evolution history for each one of the examined Web services. To this end, we exploited the public service release notes and the WSDL specifications that are available in the service provider X  X  Web portal. To automate the evolution history extraction we used Membrane SOA 6 which allows to parse and compare WSDL specifications. We exported the evolution histories in the form of an Excel spreadsheet, from which we pro-duced more advanced metrics and graphical representations of the data, which facilitated the assessment of Lehman X  X  laws in our context (Sects. 4 and 5 ). In our deliberations, we consider the latest definitions of Lehman X  X  laws that are given in [ 11 ]. At a glance, the steps that constitute our assessment method are summarized below.  X  For each law, we identify the criteria for the validation of the law in the context of Web services.  X  Then, we evaluate these criteria in the case of Amazon services.  X  We conclude on the validity of the law.  X  Finally, we draw conclusions on what practitioners should conclude. Due to the limited space it is practically impossible to provide all the data in detail 7 . Therefore, for each law, we discuss the main findings and we provide indicative graphical representations of the data for the most interesting cases. 4.1 Continuing Change (Law I)  X  X n E-type system must be continually adapted, or else it becomes less satis-factory in use X  [ 11 ]. The intuition behind the first law is that as time goes by, both the operational environment and the users X  needs change, causing the need for the system to change too [ 11 ]. In the service-oriented paradigm, as the ser-vices are publicly available through the Web, the number of the applications that depend upon them and their diversity is potentially unlimited. Hence, the potentials for the emergence of new requirements and the need for changing the services can be very high. In our study, we assess the first law based on the heartbeat of changes that have been performed during the service evolution history.
 The Case of Amazon Services. The study of the heartbeat of changes in the case of Amazon services reveals two main observations. The first one is that for a large number of service releases, the service interface remains unchanged (Fig. 1 ). According to the service release logs, in these releases most of the activ-ity concerns bug fixing, documentation, security and performance improvements, deployment extensions, provision of client side APIs for specific programming languages and environments. The second observation, which is inline with prior studies on the evolution of services [ 5 , 15 ], is that the overwhelming majority of changes concern additions and updates ; there are very few cases of deletions. Overall, the essence of the law holds for the examined services. Notable proper-ties are that changes are mostly internal and involve the structure of the exported operations less frequently; when they do, they involve mostly updates and addi-tions . 4.2 Increasing Complexity (Law II)  X  X s an E-type system is changed its complexity increases and becomes more dif-ficult to evolve, unless work is done to maintain or reduce the complexity X  [ 11 ]. Software complexity is a vast concept that involves several aspects (Lehman et al. [ 11 ] refer to requirements and specification complexity, architecture complexity, design and implementation complexity, structural complexity, etc.) and metrics widely discussed in the literature (see e.g., [ 18 ] for a large number of complex-ity metrics). Addressing all these aspects in one study is simply not possible. Complexity from the viewpoint of the developers of Web service applications is mostly related to the effort required for (a) understanding, using and testing the functionalities of the interfaces exposed by the employed services [ 14 ], and, (b) keeping the client applications up to date [ 2 ]. Regarding these aspects of service complexity, in the empirical study that we performed in [ 2 ], we found that the developers of Web service applications suggest the decomposition of fat interfaces, as they find them hard to understand and use. Based on this finding, in this paper we assess the second law with respect to the ratio of interfaces to operations. We consider that a particular service release is hard to understand, use and test if the provided interfaces consist of many operations. Following, we formally define the metric that we employ, with respect to the concept of service evolution history.
 Definition 3. Interface Complexity -For a service release r to the evolution history, H s ,ofaservice, s , we assess interface complexity in terms of the complement of the ratio of the provided interfaces to the operations offered by these interfaces, i.e., C ( r s i )=1  X  r s i .Size The Case of Amazon Services. Regarding the second law, in all cases we observed that the value of C ( r s i ) is generally high, which means that the inter-faces of the examined services are composed of many operations (Fig. 2 ). This holds, even for the initial releases of the services, where the value of C ( r ically higher than 0.9 for all datasets (except SQS). As time passes, the value of C ( r ) increases smoothly with a slow logarithmic trend . To further validate this observation we performed a logarithmic regression analysis. In all cases except for SQS (Fig. 2 ), the R 2 values that we obtained are high (from 0.576 to 0.928, 0.83 on average), indicating the logarithmic trend that we observed. Notably, there is no evidence of the existence of a control mechanism for the aspect of com-plexity that we assess . As we discussed in the case of the first law, the deletions of operations are very rare. Interface decomposition would be another possible way to reduce complexity (e.g., [ 2 ]). Nevertheless, for the examined services the number of provided interfaces is typically constant during the evolution history of the services. To sum up, we conclude that the second law holds . Specifically, the results brought out the following properties: Interface complexity, measured in terms of the ratio of interfaces to operations, is high; it smoothly increases over time; usually the increase is logarithmic .
 4.3 Self Regulation (Law III)  X  X lobal E-type system evolution is feedback regulated X  [ 11 ]. The term regulation is used in the third law to emphasize that the system evolves in a controlled way, guided by (a) positive feedback activities that cause the system X  X  functional capacity to grow, and, (b) negative feedback maintenance activities that resist to the unrestrained growth.
 patterns in the incremental growth of a system [ 11 , 17 , 18 ]. Specifically, Lehman and his colleagues, observed ripples, which reflect the existence of a stabiliza-tion mechanism. Spikes indicate releases where the positive feedback activities that grow the functional capacity of the system dominate, while valleys indicate releases of small or even negative growth, where most of the effort is spent for negative feedback maintenance activities. Further studies report similar obser-vations in open source software [ 18 ] and database schemas [ 17 ]. In the afore-mentioned studies, the incremental growth of the system is measured as the size difference between two subsequent releases. The size of the system is typically measured with respect to the system implementation (e.g., number of modules, number of schema tables). To assess the third law, in the case of services we follow a similar track, by looking for patterns in the incremental growth of a service. In our study, we measure the incremental growth of a service in terms of the difference in the number of operations provided by subsequent service releases, as this is the actual increase in the functional capacity of the service that is perceived by the developers of Web service applications.
 Definition 4. Incremental growth -For a pair of subsequent service releases r , r s i +1 that belong to the evolution history, H s operations defined in the specification of r s i +1 and r r +1 .Size [ Opers ] The Case of Amazon Services. As the case of typical E-type systems, in the incremental growth of Amazon services we also have spikes . However, an interesting difference is that the spikes are usually sparse interrupted by periods of calmness , where the functional capacity of the Web service does not grow. MTurk appears to be an exception with consequent spikes, and only one short calmness period. In traditional E-type systems, negative feedback is concerned with correction actions, documentation improvement, dead code elimination, structural cleanups and restructurings, aiming to restrict uncontrolled change and its side effects. In the case of Amazon services, although we do not observe significant restructuring activities that are externally visible (resulting in an increased structural complexity  X  Law II), we can however claim that the growth that results from the positive feedback is not uncontrolled or continuous: on the contrary, we frequently see occasions where documentation improvements, bug fixing, security patching and extension of programming facilities take place (see Law I). In conclusion, there is evidence that the third law holds . Although there are no visible restructurings and consolidations, we observe two patterns of incremental growth, specifically, spikes and calmness periods, which together indicate the existence of a stabilization mechanism . 4.4 Conservation of Organizational Stability (Law IV)  X  X he work rate of an organization evolving an E-type system tends to be constant over the operational lifetime of that system, or phases of that lifetime X  [ 11 ]. In practice, a constant work rate, along with the patterns that control the self-regulated evolution of the E-type system, facilitate the planning of resources that are needed for the E-type system X  X  evolution activities. Unfortunately, though, the assessment of the law has been problematic early on (see e.g., [ 12 ]or[ 18 ]), as the available information on indicators like personnel time dedicated to software evolution is typically unavailable and inaccurate. An approximation suggested by Lehman et al. [ 12 ] involves measuring number of changes performed per release. The Case of Amazon Services. In all cases we observed that the amount of changes is not invariant during the lifetime of the Amazon services; on the contrary, it may vary a lot (Fig. 1 ). Also, it is not possible to speak about phases in which the amount of changes remains constant. On the other hand, it is not possible to know precisely the work done behind the scenes (e.g., refactorings, repairs, etc.). Therefore, based on our results we can not confirm or disprove the fourth law of software evolution . 4.5 Conservation of Familiarity (Law V)  X  X he incremental growth of E-type systems is constrained by the need to maintain familiarity X  [ 11 ]. Based on the observations of Lehman and his colleagues [ 12 ], the validity of the law is demonstrated by two factors that relate with incremental growth. The first one (which is more related to the wording of the law) is that releases characterized by high incremental growth are followed by releases with lower incremental growth, thus, smoothening the process of understanding and mastering the performed changes. The second factor is that in the long term there is a declining trend in the incremental growth of the system, due to the increasing complexity of the system, which hardens the understanding of the changed context.
 The Case of Amazon Services. We do not observe a clear declining trend in the incremental growth of the operations that are provided by the examined services (Fig. 3 ). However, as pointed out in the case of the third law (Sect. 4.3 ), spikes in the incremental growth of the operations are typically followed by calmness periods of zero growth. Overall, we conclude that the essence of the fifth law holds . Specifically, the property that comes out from the results is that releases characterized by non-zero incremental growth, tend to be followed by releases of zero incremental growth . 4.6 Continuing Growth (Law VI)  X  X he functional capability of E-type systems must be continually enhanced to maintain user satisfaction over system lifetime X  [ 11 ]. As discussed in detail in [ 11 ] the sixth law reflects the addition of new functionalities, while the first law generally concerns functional and behavioral changes. Based on the exact wordings of the law, its validity for a particular system involves the existence of a continuous increasing trend in the growth of the system. To assess the law in the case of Web services, we employ a metric typically used in the related literature [ 11 , 18 ], the functionality growth. In our study, we measure the growth of the service as the number of operations provided by a particular service release. More formally, we employ the following metric.
 Definition 5. Growth -The growth of the operations G op release r s i that belongs to the evolution history, H s ,ofaservice, s , is defined as the number of operations provided by r s i , i.e., G op ( r The Case of Amazon Services. In all of the Amazon services we observed an increasing trend in the growth of the service operations . However, the periods of growth are interrupted by periods of calmness , consisting of subsequent service releases that offer the same number of operations (in Fig. 4 , the solid lines depict the actual growth, while the dashed and the dotted lines give growth predictions, discussed later in law VIII). Hence, the results that we obtained indicate that the sixth law holds . Nevertheless, the services do not grow exactly as originally stated in the law ; their functional capacity increases, but the increase is not continuous . 4.7 Declining Quality (Law VII)  X  X he quality of an E-type system will appear to be declining, unless rigorously maintained and adapted to operational environment changes X  [ 11 ].
 As discussed in [ 11 ] this law is closely related with the first and the sixth law, in the sense that the system must be adapted and extended, with respect to the evolving operational environment. Otherwise, it is likely that the provided func-tionalities will not be satisfactory for the users and the overall perceived quality of the system will downgrade. Regarding the assessment of the the seventh law, Lehman and his colleagues do not provide a concrete definition of quality. On the contrary, in [ 11 ] they state that the quality of an E-type system is a func-tion of many factors, whose definition, modeling, measurement and monitoring depend on several aspects, which may include organization, product, process properties and goals. In the case of Web services, the main problem concerning the assessment of the seventh law is that the required data are typically not publicly available to the developer of Web service applications. Nevertheless, in [ 11 , 12 ], Lehman and his colleagues discuss a more general strategy to support the seventh law, which can be used in the case of Web services. Their strategy relies on logical induction, in the sense that the decline of the system quality, logically follows from the growth of the system X  X  functional capacity (law VI), and from the increasing complexity that comes along with functionality growth (law II).
 The Case of Amazon Services. So far, in our study we have evidence of the growing functional capacity of the examined services (Fig. 4 ) that confirm the validity of the sixth law (Sect. 4.6 ). Moreover, we have some evidence of the increasing interface structural complexity of the examined services (Fig. 2 ) that support the validity of the second law (Sect. 4.2 ). Therefore, by follow-ing the general strategy suggested by Lehman and his colleagues in [ 11 , 12 ], we have indications that the seventh law holds for the examined services. However, given that the publicly available specifications of the examined services are not accompanied by concrete qualitative evaluations, we cannot confirm or disprove the law, based on indisputable objective measurements . 4.8 Feedback System (Law VIII)  X  X -type evolution processes are multi-level multi-loop, multi-agent feedback sys-tems X  [ 11 ]. According to Lehman, the last law is a concise summary of the other seven. In the literature, the main evidence for the validity of the law is to show that the actual growth of the system adheres to the inverse square (IS) model, which provides a feedback-based growth prediction formula [ 11 , 17 , 18 ]. In our study we also rely on this strategy. Following, we adapt the IS growth prediction formula, with respect to the definition of growth that we provided in Sect. 4.6 . Definition 6. IS model for services -According to the IS model, the pre-dicted operations X  growth, G op ( r s i ) , for a service release r evolution history, H s ,ofaservice, s ,is: G op ( r s i )= G where G op ( r s i  X  1 ) is the estimated operations X  growth for the previous service release, r s i  X  1 ,and E estimates effort. More specifically, E is the average of individual E j , calculated for the service release history H ( G tions X  growth for a service release r s j ,and G op ( r s tions X  growth for the previous service release r s j  X  1 .
 The Case of Amazon Services. To assess the eighth law we calculated the estimated values of the operations X  growth, with respect to the IS model, and compared them with the respective actual values, derived from the evolution histories of the Amazon services. Specifically, we considered 3 variants of the model. The first variant, denoted by  X  = all , corresponds to the original IS model employed by Lehman in [ 12 ], where E is computed over the entire evolution history. The other two variants (inspired from [ 17 ]), compute an average effort taking only the recent past into consideration. Specifically, in  X  =2and  X  =4, E is computed for every release r s i , over the previous 2 and 4 releases, respectively. To assess the quality of the estimated values, compared to the actual ones, we further calculated the values of the R 2 statistic for the IS model variants. Based on the results, we observed that  X  = 2 gives quite good estimations ( R from 0.60 to 0.96, 0.78 on average). In fact,  X  = 2 gives the best estimations in all cases, but MTurk where  X  = all outperforms the other two variants (Fig. 4 ). So, overall, we have evidence that the eighth law holds ; specifically, we can safely state that the growth of the examined Web services can be accurately estimated via a feedback-based formula that exploits changes in previous service releases . Our study revealed that Amazon services live quite normal lives. Although their loyalty to Lehman X  X  laws can not be fully confirmed, the Amazon services are popular and constitute an integral part of a successful platform. Therefore, we consider the evolution patterns that we observed in our findings, as a baseline for a list of recommendations that target the developers of Web service applications and concern service selection and usage.
 heartbeat of the service; calm lives consisting of frequent periods of calmness, where the functional capacity of a service does not change, interrupted by spikes of change that involve mostly additions and updates, indicate a normal life. During the calm periods, the service is typically enhanced in terms of correct-ness, documentation, security, performance and usability, showing that the ser-vice provider takes perfective maintenance seriously, performs bug fixing and improvements. Check the incremental growth of the service; again, the existence of spikes and calmness periods indicates that the service evolves normally, with respect to an underlying stabilization mechanism.
 the service; if you observe that releases of non-zero incremental growth, tend to be followed by releases of zero incremental growth, it means that there will be ample time to absorb the changes that take place.
 Is the heartbeat of changes predictable in some way? Even for healthy services, it may not really be possible to forecast the heartbeat of changes that occur over time. Thus, you have to accommodate for resources for the worst case.
 Will I have time to learn about new functionalities? Check the growth of the service; typically there is an increasing trend in the growth of the service operations. If you observe that the increase is not continuous, you can count on the interval for the understanding of the new features.
 Is the amount of new functionalities predictable in some way? It is likely that you could coarsely predict the expansion of the offered operations and plan accordingly; try to do this via a feedback-based regression formula that is based on Lehman X  X  IS model.
 Will the complexity of the service be a problem for service usage? Even for healthy services, complexity could be an issue. You have to assess the specific aspects of complexity that concern you (e.g., specification, architectural, structural, etc.). The complexity could be quite high and it may increase over time. However, if the increase is smooth and predictable, you do not have to worry too much. In any case, you will have to anticipate the need to allocate time and resources for understanding and using the service.
 Will the quality of the service improve, decline, remain as is? Most likely you wont be able to tell, based on available information; first you will have to determine the aspects of quality that concern you, then you you will have to assess them by yourself. Anticipate the need to allocate time and resources for QoS evaluation. Regarding external validity , our study focused on the in-depth analysis of Ama-zon services. We studied the evolution of Amazon services that provide vari-ous functionalities. The population of the examined services is reasonable, with respect to similar studies [ 5 , 15 , 17 , 18 ]. More importantly, we considered services that have already made a notable impact in industry. Hence, we are confident that our findings are representative of the overall population of Amazon services and that they are of interest to a broad community of developers. Nevertheless, the reader should be careful not to overgeneralize the results to the overall pop-ulation of existing Web services. At the same time, our approach for the assess-ment of Web service evolution is general and can be used to perform further similar studies. Also, the recommendations that we provide for service selection and usage are general and concern the overall population of Web services. When it comes to construct validity , we used Membrane SOA, a well-known open-source API, for the accurate construction of evolution histories. Moreover, we manually inspected random samples of the collected data. Internal validity , is not a major issue in our study as we do not attempt to establish any partic-ular cause-effect relationships. Regarding conclusion validity , we validated the observed relations and trends with well-known statistic methods. From a broader perspective, we believe that the success of the service-oriented development paradigm strongly depends on whether services live a normal life. Understanding the patterns and regularities that rule the evolution of services is a key factor for increasing the developers X  confidence on the services that they use, or intend to use. In this paper, we studied the evolution of Amazon ser-vices. To perform our study we followed a principled approach that is based on Lehman X  X  laws of software evolution. Although our findings showed that Amazon services are healthy, this cannot be taken for granted for all services. To this end, developers of Web service applications can exploit our principled approach, to assess the health of the services they are interested in. Based on our study, we further derived a list of practical recommendations that target the developers of Web service applications and concern service selection and application maintenance.
 significant practical importance are the forecasting of service evolution, and the study of the relationship between the evolution of services (e.g., number, size, frequency of spikes) and the applications that use them (e.g., number of clients, usage profile).Metrics for service complexity and growth that account for more factors (e.g., input/output parameters) is also a research issue that deserves to be further investigated. Finally, another interesting challenge is to introduce a principled patterns-based method that allows the developers of Web service applications to assess the healthiness of the Web services X  that they use.
