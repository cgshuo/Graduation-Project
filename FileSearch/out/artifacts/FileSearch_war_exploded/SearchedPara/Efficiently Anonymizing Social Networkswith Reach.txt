 The goal of graph anonymization is avoiding disclosure of privacy in social networks through graph modifications mean-while preserving data utility of the anonymized graph for social network analysis. Graph reachability is an important data utility as reachability queries are not only common on graph databases, but also serving as fundamental operations for many other graph queries. However, the graph reacha-bility is severely distorted after the anonymization. In this paper, we solve this problem by designing a reachability pre-serving anonymization (RPA for short) algorithm. The main idea of RPA is to organize vertices into groups and greed-ily anonymizes each vertex with low anonymization cost on reachability. We propose the reachable interval to efficiently measure the anonymization cost incurred by an edge addi-tion, which guarantees the high efficiency of RPA. Extensive experiments illustrate that anonymized social networks gen-erated by our methods preserve high utility on reachability. H.2.8 [ Database Management ]: Database Applications X  Data Mining Social networks; Privacy; Anonymization; Reachability
Social networks usually contain individuals X  sensitive in-formation, which makes it an important concern to avoid compromising individual privacy when releasing social net-work data. Graph anonymization, as an valid method for privacy protection, has been extensively studied in the past few years [3, 6, 12, 13, 14]. One of the fundamental issues when anonymizing social network data is avoiding disclosure of individuals X  sensitive information while still permitting certain analysis and queries on the network. Reachability is an important graph query as reachability queries are not only common on graph databases, but they also serve as fun-damental operations for many other graph queries. For in-stance, SNS (Social Networking Services) generally support queries on the relationship path between two users. In prac-tice, graph reachability is nontrivially distorted, and the ac-companying information loss is incurred by graph anonymiza-tion. The reason is that existing anonymization algorithms use the number of modified edges as the only metric to eval-uate information loss, neglecting the fact that the impact on graph reachability varies with different edge modifications.
Figure 1: A social network graph and the degrees.
Figure 1 describes a toy microblog network G and the degrees of vertices in G ,where d in and d out refer to the in-degree and out-degree of a vertex, respectively. A directed edge ( a, b ) indicates that a is a follower of b . Assuming the adversary has acquired that Alice has no follower and follows two other individuals, i.e. d in ( Alice )=0and d out ( Alice )= 2, it is not difficult for the adversary to re-identify vertex a as Alice with 100% co nfidence, since there is only one vertex having the same degree (including in-degree and out-degree) as Alice .

To avoid vertex re-identification using degrees as back-ground knowledge, k -degree anonymization has been pro-posed in [7] and the general idea is to modify the network so that for each vertex v , there exist at least k  X  1other vertices having the same degrees as v , thus the probabil-ity of the adversary re-identifying the identity of a vertex would not be larger than 1 k . For instance, G 1 and G 2 Figure 2 are two 2-degree anonymized versions for G .We say u, v is a reachable pair, if vertex v is reachable from u . Specifically, G 1 is obtained through inserting edge ( g, a ) into G , resulting in 31 new reachable pairs, such as g, a Figure 2: Two anonymized versions for G in Figure 1(a). and h, p . Correspondingly, only one new reachable pair j, a is introduced in G 2 .Let R ( G )denotethesetofall reachable pairs in G . For simplicity, we define that a vertex can reach itself. For graph G and its k -anonymized version G , we define anonymization cost Cost ( G, G k )tomeasure the utility of G k on reachability, which is calculated as: Equation 1 equals to the quantity of incremental and decre-mental reachable pairs in G k .Higher Cost ( G, G k ) implies low utility of G k on reachability. By employing Equation 1, we could get Cost ( G, G 1 ) = 31 and Cost ( G, G 2 )=1, indicating that the reachability of G is better preserved in G 2 than in G 1 . To preserve the reachability, for graph G , we expect to find an anonymized version G k ,ofwhich Cost ( G, G k ) is minimized.
It is significant to preserve the reachabilities of anonymized graphs, yet few existing research work [1, 6, 7, 12, 13, 14] pays enough attention to it. Anonymizing social networks with reachability preservation is much more challenging.
Given an n -vertex and m -edge graph G , how to efficiently measure the anonymization cost on reachability due to graph modifications? As we will show in this paper, measuring the anonymization cost incurred by an edge addition is a fre-quent operation in our reachability preserving anonymiza-tion algorithm. Unfortunately, this process is time costly. For example, when measuring the impact on reachability due to adding edge ( g, a )into G , a straightforward method is to calculate the reachable vertex set of each vertex in G before and after the addition and check the difference then. A breadth-first search is needed for each vertex to obtain the reachable vertex set, which requires O ( n + m )time. Thus, it would take O (2 n ( n + m )) time to measure the impact due to an edge addition. The high time complexity makes it im-practical for massive graphs. As a fundamental operation in graph anonymization, efficiently measuring the anonymiza-tion cost on reachability proposes us a challenge.
Our contributions can be summarized as follows: (1) To retain the reachability in social networks, we develop a reach-ability preserving anonymization (RPA for short) algorithm. (2) We propose the reachable interval to efficiently mea-sure the anonymization cost incurred by an edge addition, which guarantees the high efficiency of RPA. (3) Our exten-sive empirical results illustrate that anonymized social net-works generated by our methods preserve high data utility on reachability.

The remainder of the paper is organized as follows. Sec-tion 2 summarizes the related work. Section 3 gives the problem definition and we present the RPA algorithm in Section 4 then. In Sections 5, a technique is devised to ac-celerate RPA. We evaluate our methods in Section 6. Section 7 concludes the paper.
In previous work, privacy attacks in social networks are mainly classified into two categories, including vertex re-identification attacks and link re-identification attacks.
In vertex re-identification attacks (a.k.a. identity disclo-sure), an adversary identifies the identities of vertices in the published network using the subgraphs associated with tar-get individuals as background knowledge. Liu et al. in [7] propose k -degree anonymity to prevent from privacy attack-ing using vertex degree as adversary knowledge. Zhou et al. in [13] protect identity privacy through anonymizing the 1-neighborhood subgraph of each vertex. To resist subgraph based vertex re-identification attacks, Hay and Campan in [2, 6] propose to cluster vertices into super nodes, thus ver-tices in a super node are indistinguishable from each other. Zou et al. in [14] present a privacy preserving model K -Automorphism for protecting identity privacy.

In link re-identification (a.k.a. link disclosure) attacks, an adversary aims at identifying sensitive relationships among individuals in social network. Ying et al. in [11] study graph randomization through adding/removing and switch-ing edges randomly while preserving the spectrum of the network. Liu et al. in [8] propose inference security to pre-vent link inference attacks in social networks. Cormode and Bhagat in [1, 4] study graph anonymization to protect link privacy in bipartite graphs. Fard et al. in [5] propose sub-graph randomization to protect sensitive relationships for directed social network graphs. Due to the fact that many real life social networks (e.g., Twitter, e-mail networks) are directed graphs, in this work, we represent a social network as a directed graph G =( V, E ) with | V | = n and | E | = m ,where V is the vertex set, and E  X  V  X  V istheedgeset.Wealsouse V ( G )and E ( G )to denote the vertex set and edge set of G .Weuse( u, v )to represent the edge from vertex u to vertex v . Specifically, we say v is an out-neighbor of u and u is an in-neighbor of v . We use d in ( u )/ d out ( u )todenotethe in/out-degree of u , i.e., the number of edges coming to or out of u .Forvertex u  X  V , we represent the degree of u in the form of ( d in ( u ) ,d We say link u to v when adding the edge ( u, v )into E .
In this work, we assume that the adversary uses both the in-degrees and out-degrees as background knowledge to re-veal the identities of individuals. Based on the privacy model of k-degree anonymity in [7], we formally present our privacy model in social networks.
 Definition 1. ( k -Degree Anonymity) Given graph G ( V, E ) and integer k ,if  X  v  X  V ,thereexist m ( m  X  k other vertices u 1 ,u 2 ,...u m that satisfy d in ( v )= d d out ( v )= d out ( u i )(1  X  i  X  m ) , we say graph G is k -degree anonymous.
For instance, both G 1 and G 2 in Figure 2 are 2-degree anonymous graphs. In this paper, we focus on reachability preserving anonymization in directed graphs. With no diffi-culty our approach can be applied in undirected graphs, for eachedgecanberegardedasanedgewithbi-directions.

Definition 2. (Reachability) Given graph G ( V, E ) and vertices u, v  X  V , we say vertex v is reachable from vertex u if there is a path starting from u and ending at v ,andwe define that u, v is a reachable pair of G , denoted as u v . The reachability of graph G refers to the set of all reachable pairs in G , denoted as R ( G ) .

Given graph G ( V, E )andinteger k ,weexpecttoconstruct a k -degree anonymous graph G k ( V k ,E k ) through a set of graph-modification operations on G such that G k preserves the reachability of G as much as possible. As described in [12, 14], for the purpose of k -anonymity, it is not necessary for the output graph to have the same set of vertices as the original one, i.e. V k  X  V . Moreover, we restrict the graph-modification operations to vertex and edge additions, that is V  X  V k and E  X  E k . We formally propose the Reacha-bility Preserving Anonymization problem as follows.
Problem 1. (Reachability Preserving Anonymiza-tion) Given graph G =( V, E ) and integer k , find a k -degree anonymous graph G k ( V k ,E k ) such that Cost ( G, G k ) is min-imized.

As only vertex and edge additions are allowed in graph anonymization, R ( G )  X  R ( G k ) obviously. Then Equation 1 equals to Cost ( G, G k )= | R ( G k )  X  R ( G ) | , which measures the quantity of incremental reachable pairs in G k .
Theorem 1. The problem of Reachability Preserv-ing Anonymization is NP-hard.
In this section, we introduce our reachability preserving anonymization algorithm (RPA for short), which is described in Algorithm 1. The main idea of RPA is to group vertices with similar degrees and equalize them on their degrees. Given specified value of in-degree and out-degree, the algo-rithm greedily anonymizes each vertex with low anonymiza-tion cost on reachability. Due to the power law distribution of the degrees of vertices in social networks, the algorithm starts with the vertices of high in-degrees and out-degrees as the remaining ones are easy to anonymize.

First, the algorithm marks all vertices in the network as  X  X nanonymized X  and stores them in Set ua (lines 2-3). Iter-atively, the vertex in Set ua with maximal d in + d out value is picked as Seed (line 5). If the size of Set ua is no smaller than 2 k , the algorithm selects a subset vSet that contains the k nearest vertices to Seed (lines 6-7). Otherwise, all ver-tices in Set ua are collected into vSet (line 9). Notice that for vertex u ,wemapitsdegree( d in ( u ) ,d out ( u )) to a point in 2-dimension space, and use Manhattan distance to measure the distance between two points.

As we could know, the in-degrees and out-degrees of ver-tices are non-decreasing as only vertex and edge additions are allowed in graph anonymization. Thus, the algorithm anonymizes each vertex in vSet with the maximal values of Algorithm 1: Reachability Preserving Anonymization
Input : a social network graph G ( V, E )andthe
Output :ananonymizedgraph G k ; 1 initialize G k = G ; 2 mark all vertices in G k as  X  X nanonymized X ; 3 Set ua = { unanonymized vertices in G k } ; 4 repeat 5 Seed = s  X  Set ua with maximal d in ( s )+ d out ( s ); 6if | Set ua | X  2 k then 7 vSet = k nearest vertices to Seed in Set ua ; 8else 9 vSet = the remaining vertices in Set ua ; 12 for each vertex u  X  vSet do 13 anonymizeOutDegree ( G k ,u,d out ,vSet ); 14 anonymizeInDegree ( G k ,u,d in ,vSet ); 15 mark u as  X  X nonymized X  and remove u in Set ua ; 16 until Set ua ==  X  ; 17 return G k ; Algorithm 2: anonymizeOutDegree
Input :Graph G k ,vertex u  X  V ( G k ), integer d out and 1 candNeighbors = { candidate out-neighbors in
G k } X  vSet ; 2 while d out ( u ) &lt;d out and candNeighbors =  X  do 3 u = v in candNeighbors with minimum Cost ( u, v ); 4 add ( u, u )into E ( G k ); 5 remove u from candNeighbors ; 6if t = d out  X  d out ( u ) &gt; 0 then 7 add t vertices into V ( G k ) marked as  X  X nonymized X ; 8 link u to these newly added vertices; in-degree and out-degree in the same set (lines 10-15). As shown in Algorithm 2, given out-degree d out and vertex u , anonymizeOutDegree greedily selects d out  X  d out ( u )ver-tices and links u to them. Each selected vertex v should satisfy the following conditions: The first one is a necessary condition for v being a new out-neighbor of u . The second one guarantees anonymiz-ing u would not affect the anonymity of other anonymized vertices. We call these two conditions as  X  the Candidate Neighbor Condition(CNC)  X , and vertices satisfying CNC are candidate out-neighbors of u . For a candidate in-neighbor v of u , the first condition is modified to ( v, u )  X  E ( G tice that to keep the in-degrees no larger than d in ,novertex in vSet is selected as the candidate out-neighbors of u .In the loop from line 2 to 5, Algorithm 2 greedily selects vertex v with minimum Cost ( u, v ) as the new out-neighbor of u , where Cost ( u, v ) refers to the anonymization cost incurred by adding ( u, v )into G k and is calculated as: Theverticeswelink u to are removed from candNeighbors (line 5). If candNeighbors is empty and d out is still larger than d out ( u ), Algorithm 2 adds d out  X  d out ( u )verticesinto G k and links u to them (lines 6-8). According to the power law distribution, the quantity of vertices having degree (1 , 0) in G k is much larger than the anonymity parameter k .Ob-viously, these newly added vertices also have degree (1 , 0), so we safely mark them as  X  X nonymized X  (line 7). The al-gorithm anonymizeInDegree anonymizes d in ( u )into d in adopting the same heuristic strategy as Algorithm 2, and we omit the details here. In practice, the impact of added vertices could be neglected as the quantity is small, which will be shown in Section 6.
 Review the contents in Section 1.2, the naive method takes O (2 n ( n + m )) time to calculate Cost ( u, v ) for each candidate out-neighbor v , which is impractical for massive social net-works. In order to reduce the time complexity of Algorithm 2, we focus on how to efficiently measure Cost ( u, v ). In this section, we introduce how to efficiently measure Cost ( u, v ). We propose the definition of reachable inter-val, based on which we present the technique to measure anonymization cost. As the size of reachable intervals is key to the time complexity of measuring Cost ( u, v ), we ex-tend the dual labeling in [10] to generate smaller reachable intervals, which guarantee the high efficiency of the mea-surement.

Given graph G ( V, E )andvertex p  X  V ,weuse R ( p )to denote the set of vertices that are reachable from p .Let R  X  1 ( p ) represent the set of vertices, from which p is reach-able, i.e. the reachable vertex set of p in the reverse graph G  X  1 . For simplicity of discussion, assuming a vertex could reach itself, i.e. p  X  R ( p )and p  X  R  X  1 ( p ). As only vertex and edge additions are allowed in the anonymization, we use  X  R ( p ) to denote the set of incremental vertices to R ( p ) due to the addition of edge ( u, v ). When inserting edge ( u, v ) into E , not all vertices X  reachabilities will be affected.
Theorem 2. The addition of edge ( u, v ) into graph G only has impacts on reachabilities of the vertices in R  X  1
According to Theorem 2, the anonymization cost Cost ( u, v ) could be calculated through checking  X  R ( p )foreachvertex p  X  R  X  1 ( u ), and Equation 2 is equivalent to:
We propose a data structure, named reachable interval, to efficiently calculate  X  R ( p ). We first assign each vertex an integer id. Then, we generate a reachable interval for each vertex based on these ids.

Definition 3. (Reachable Interval) For vertex u ,we represent R ( u ) as an union of intervals, among which consti-tutes of vertex ids, and we name it reachable interval, using R ( u ) as denotation.

Let p id denote the id of vertex p .Forvertices u and p ,it is obvious that p id  X  R l ( u )iff u p . Then, for vertex p ,we have |  X  R ( p ) | = |  X  R l ( p ) | .Wecalculate X  R l ( p )toreplace  X  R ( p )inEquation3.
 Theorem 3. When add edge ( u, v ) into G , for vertex p  X  R  X  1 ( u ) , we have  X  R
To guarantee calculating  X  R l ( p ) in high efficiency, we ex-tend the dual labeling coding scheme in [10] to generate reachable intervals, on which  X  R l ( p ) could be calculated in O ( t )time,where t n . The dual labeling consists of two main steps. The first step is constructing a spanning tree of the input graph. Then, the dual labeling assigns interval-based labels to the vertices and keeps track of the non-tree edges so that the reachability information is complete.
Different from DAG (directed acyclic graph), social net-works generally contain cycles. Given graph G ( V, E )with |
V | = n and | E | = m , we first find the strongly connected components of G and represent each component with a su-per node. It takes O ( n + m ) time to find these super nodes using Tarjan X  X  algorithm in [9]. For graph G in Figure 1(a), a spanning tree T and the super nodes are presented in Fig-ure 3(a), where the solid arrows form a spanning tree and the dotted arrows are non-tree edges. Obviously, all ver-tices in a super node are equivalent to each other concerning reachability. In the remainder of the paper, the term  X  X ode X  will be used to refer to a maximal set of strongly connected vertices. We assume that the graph consists of only one connected component; disjoint components can be hooked together by creating a virtual root node. (a) A spanning tree T and the super nodes. Figure 3: The extended dual labeling coding scheme.
For accurately measuring the anonymization cost, we ex-tend the dual labeling to assign ids to the nodes of T ,af-ter we modify it to accommodate the cases where multi-ple vertices are contained in one node. Through travers-ing the spanning tree T ,eachnode u is assigned with an interval label [ u start ,u end ). Specifically, u start u start + cnt ( u ), where u is the preorder predecessor of u and cnt ( u ) refers to the number of vertices in u ( u start assigned 0 when u is the root node). As for the value of u u end equals to u end when u is a non-leaf node, where u is the postorder predecessor of u .Inthecaseof u being a leaf node, u end equals to u start + cnt ( u ). All vertices in a node u share the interval label of u .Weconsider u start as the id of node u . Figure 3(b) shows a spanning tree T with the as-signed interval labels. The transitive link table L maintains the edge transitive closure over the non-tree edges, which is shown as follows: A reachability query, u v , can be answered in O (1) time by using the interval labels of u and v and the transitive link table(see[10]fordetails). Algorithm 3: Generate Reachable Interval Input : a spanning tree node u , transitive link table L ;
Output : the reachable interval of u ; 4 R l ( u )= R l ( u )  X  [ v start ,v end ); 5return R l ( u );
For a node u in the spanning tree T , Algorithm 3 gener-ates a reachable interval R l ( u ), consisting of the intervals of nodes that are reachable from u through tree edges and non-tree edges. Obviously, the reachable interval of each vertex in u is R l ( u ). Assuming there are t non-tree edges in T ,then L consists of at most t ( t +1) 2 entries. The time complexity of Algorithm 3 is O ( t 2 ). Evidently, R l ( u ) contains at most t +1 intervals. For instance, the reachable intervals of f and g in Figure 3(b) are as follows: It is worth mentioning that, by finding the minimal equiv-alent graph [10], the number of non-tree edges is minimal. When adding edge ( u, v )into E ,forvertex p  X  R  X  1 ( u ), as R l ( v )and R l ( p ) contain at most t + 1 intervals, it re-quires O ( t ) time to calculate  X  R l ( p )= R l ( v )  X  r = | R  X  1 ( u ) | , then calculating Equation 3 would require O ( rt ) time, where r n and t n in real social networks.
In the discussion above, we measure the anonymization cost without considering the added fake vertices. For vertex p ,let f i ( p )and f o ( p ) denote the numbers of fake in-neighbors and out-neighbors of p , respectively. The following equation is extended from Equation 3, which shows the calculation of Cost ( u, v ) when considering the fake vertices. Cost ( u, v )= In Equation 4,  X  R l ( p )= R l ( v )  X  R l ( p ). We classify the incremental reachable pairs into four categories, which are shown in the  X  X ategory X  column of Table 1. The reachable pair v, v of category fake,true indicates that v is a fake vertex and v is a true vertex.
 Table 1: The incremental reachable pair categories represented by terms in Equation 4.

In this section, we provide extensive experiments to eval-uate our methods. We have used two real social network datasets, which are both directed graphs 1 : Eu-Email and Epinions. Table 2 presents the statistics of these two datasets. Number of vertices 265214 75879 Number of edges 420045 508837 Maximum in-degree 7631 3035 Maximum out-degree 930 1801
Average in/out-degree 1.58 6.71 # of vertices with degree (0, 1) 170768 18328 # of vertices with degree (1, 0) 36922 11774 Average clustering coefficient 0.3093 0.2283 Number of triangles 267313 1624481 Diameter (longest shortest path) 13 13
We implemented our RPA algorithm. For comparison, we modified and implemented the anonymization algorithm in [13] and named the modified version as Neighbor-Greedy. An anonymization cost function is introduced in [13], which measures the similarity between two vertices on their neigh-borhoods. We employed the same function in Neighbor-Greedy except that we used the degrees of vertices instead of the neighborhoods as the metric.

We evaluate the running time, the anonymization cost and the quantities of the added edges and vertices of these two algorithms, where we set k =10 , 20 , 30 , 40 , 50. All programs are implemented in Java and performed on a 2.33GHz Intel Core 2 Duo CPU with 4GB DRAM running the Windows XP operating system.
 A. Running Time We show the running time of anonymization on both datasets with respect to different k values in Figure 4. It can be ob-served that the runtime gets higher with the increment of k value. RPA occupies the higher runtime due to the task of preserving reachability in anonymization. With the help of reachable intervals, RPA is almost as efficient as Neighbor-Greedy in runtime. Figure 4: The runtime of graph anonymization.
 B. Anonymization Cost Given graph G and the corresponding k -degree anonymous version G k ,weuse incremental ratio = | R ( G k )  X  R ( G to measure the anonymization cost on graph reachability. Notice that R ( G k ) contains all reachable pairs in G k ing the pairs containing fake vertices. We show the results in Figure 5. Obviously, higher incremental ratio indicates more anonymization cost on graph reachability. It can be
Available at http://snap.stanford.edu/data/ observed that Neighbor-Greedy results in the highest incre-mental ratio, which is averagely 50% larger than RPA on both datasets. This phenomenon could be ascribed to the impacts of edge additions on reachability being neglected. The incremental ratios of the RPA are averagely less than 2%, proving the anonymized graphs generated by our meth-ods preserve high data utility on reachability. C. The Quantities of Added Edges and Vertices To measure the ratio of added edges in G k , we define adding sults. As Neighbor-Greedy uses the number of edges being added to measure the anonymization cost, it generally re-quires the least adding edge operations during the anonymiza-tion process. Besides that, RPA is close to Neighbor-Greedy on adding edge ratio.

In Table 3, we present how many fake vertices are inserted in the anonymized graphs, where N-G refers to Neighbor-Greedy. As shown in Table 3, none of the two algorithms inserts more than 70 vertices on either of the dataset, while there are thousands of vertices having degree (0,1) or (1,0) in the anonymized graph (the results are not shown due to space limitation). Thus, it would be infeasible for an adver-sary to obtain further privacy information through removing the fake vertices from the anonymized graph along with the incident edges.

In this paper, we propose the problem of reachability pre-serving anonymization. We solve the problem by designing the RPA algorithm. We present the reachable interval to ef-ficiently measure the anonymization cost, which guarantees the high efficiency of RPA. Our extensive empirical studies illustrate that anonymized social networks generated by our methods preserve high data utility on reachability.
The work is partially supported by the National Basic Re-search Program of China (973 Program) (No. 2012CB316201), the National Natural Science Foundation of China (Nos. 61173031, 61272178), the Joint Research Fund for Overseas Natural Science of Chin a (No. 61129002), a nd the Funda-mental Research Funds for the Central Universities (Nos. N120504001, N100704001). [1] S. Bhagat, G. Cormode, B. Krishnamurthy, and [2] A. Campan and T. Truta. A clustering approach for [3] J. Cheng, A. Fu, and J. Liu. K-isomorphism: privacy [4] G. Cormode, D. Srivastava, T. Yu, and Q. Zhang. [5] A. M. Fard, K. Wang, and P. S. Yu. Limiting link [6] M.Hay,G.Miklau,D.Jensen,D.Towsley,and [7] K. Liu and E. Terzi. Towards identity anonymization [8] X. Liu and X. Yang. Protecting sensitive relationships [9] R. Paige and R. E. Tarjan. Three partition refinement [10] H.Wang,H.He,J.Yang,P.S.Yu,andJ.X.Yu.Dual [11] X. Ying and X. Wu. Randomizing social networks: a [12] M. Yuan, L. Chen, and P. Yu. Personalized privacy [13] B. Zhou and J. Pei. Preserving privacy in social [14] L. Zou, L. Chen, and M.  X  Ozsu. K-automorphism: A
