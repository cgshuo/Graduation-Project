 In large organisations, a business proces s often exists in many variations. Those stem from different legal requirements in different countries, deviations in the IT infrastructure, or organisationa l differences [1]. The existence of process variants is inevitable  X  a certain degree of variability is needed to meet the concerns of a specific organisational unit. Variants are often documented in independent process models. As the variability is not made explicit, synergies between variants are hard to explore and process harmonisation is impeded.

Recently, approaches to control the cre ation of process variants based on well-defined change patterns [2,3,4] or configurations [5,6] have been presented. How-ever, enforcement of such a controlled variability of processes is hard to achieve once process variants are created independently in different organisational units. Therefore, we focus on the use case of m anaging decoupled process variants. To this end, identification of commonalities and differences between process variants is of central importance. Those have to be made explicit to allow for a compar-ison of the variants. This is a prerequisite for any process harmonisation effort that aims at reducing the amount of allowed process variability.

There are two fundamental challenges towards efficient management of pro-cess variants: the appropriate specification of formal operations to support rea-soning with process variants, and the foundation of such operations upon an appropriate behavioural abstraction of processes. Throughout this paper, we will demonstrate that the essential variant management questions can be an-swered based on set algebraic operations o f complementation, intersection, and union, and the relations of set equivalence and inclusion. Although there are sev-eral works on particular subsets of these aspects such as inclusion (or behaviour inheritance) [7,8,9] and union (or merging behaviour) [10,11,12,13], we currently miss an overarching set algebra which pr ovides the means to efficiently calculate with behaviour.

There is a wide spectrum of behavioural ab straction available upon which alge-braic operations could be defined. Existing work on behaviour inheritance [8,9,14] builds on an adapted notion of branching bisimilarity. That is, activities that are without counterpart can either be blocked or hidden when assessing behavioural equivalence. Such an approach has the drawback that the underlying notion of branching bisimilarity is computationally hard as it is based on state space anal-ysis, cf., [15]. Therefore, we base our set algebra on behavioural profiles, a be-havioural abstraction of process model s that can be computed efficiently for a broad class of models. Behavioural profiles capture the essential behaviour of the set of traces of a process in terms of order c onstraints, and they are insensitive to skipping of an activity. Differences related to causal constraints are often observed among process variants, and behavioural profiles have been found to provide a suit-able abstraction to reason about consistency of process variants [16].
Our contribution is a formal definition of a set algebra for calculating with behavioural profiles of process variants. Our approach is inspired by work on a set algebra for service interaction [17]. The concepts are applied to an industry model collection, for which we identify variant clusters and analyse behavioural commonalities. In this way, our work informs formal research on behavioural inheritance as much as engineering approaches towards merging of behaviour.
The remainder of this paper is structured as follows. The next section illustrate the use case in more detail and presents formal preliminaries. Section 3 defines a set algebra for behavioural profiles, which is applied in Section 4 to address various questions on managing process variability. We present findings from a case study with industry models in Section 5. Finally, Section 6 discusses our approach in the light of related work, before Section 7 concludes the paper. This section introduces the background of our work. First, Section 2.1 elaborates on the use case of managing decoupled process variants. Subsequently, Section 2.2 presents our formal model and Sectio n 2.3 defines behavioural profiles. 2.1 Challenges for Managing Decoupled Process Variants We illustrate our use case using the two process models depicted in Fig. 1. Both models capture the process of registering a newborn and are adapted versions of the models obtained in different Dutch municipalities, cf., [18]. The administra-tive processes of Dutch municipalities are rather similar due to legal regulations and a non-normative reference model. Nevertheless, these processes show a cer-tain degree of variation caused by, for instance, the size of the municipality or the used information systems, and evolve independently from each other.
Identification of best practices or reduc ing of the number of process variants among the municipalities can be seen as driven factors for process harmonisation. This requires the identification of semantically corresponding activities of differ-ent process models based on linguistic or structural analysis [19,20,21]. Those techniques may reveal that the activity  X  X ign Birth Certificate X  in model ( I )cor-responds to the activity  X  X ssue Birth Certificate X  in model ( II ). For this paper, we assume correspondences between activities to be given.

Once we identify correspondences between activities of various pairs of models, we can define clusters of related models that capture variants of the same process. The following challenges must be addressed to support process harmonisation efforts for a particular cluster of process variants.

C1: Given a set of variants, what are their commonalities in terms of shared behaviour? This question relates to the challenge of identifying the behaviour that is invariably agreed on by all variants, i.e., the implemented invariant behaviour.

C2: Given a set of variants, what is the most general allowed behaviour? The challenge when answering this question is to integrate the behaviour defined by all process variants, such that the most general behaviour becomes visible. This is required to come to a notion of a configurable model known from [5,6], which subsumes the complete behaviour defined in single variants.

C3: Given a set of variants, what are their commonalities in terms of shared forbidden behaviour? Similar to the first question, also the shared forbidden behaviour is of interest for managing process variants.

C4: Given a set of variants, which variants are redundant in terms of the specified behaviour? The challenge behind this question is to identify variants for which the specified behaviour is completely subsumed by another process variant. In that case, the existence of the former variant may be challenged.
Although these questions may be approached on a structural level by in-vestigating the set of shared activities, more detailed conclusions can only be drawn once the behavioural perspective is considered. For instance, the activities  X  X pdate GBA Data X  and  X  X end Notifications X  show different behavioural con-straints in the models in Fig. 1. To con sider such differences, we approach the aforementioned questions based on a set algebra for behavioural profiles. Be-havioural profiles are a behavioural abstraction that focusses on order constraints and is insensitive to causal constraint s between activities, such as skipping an activity. Fig. 1 illustrates that such differences are often observed among pro-cess variants due to additional process entries and exits. Behavioural profiles have been found to provide a suitable abstraction to reason about consistency of process variants [16]. 2.2 Formal Model We use a notion of a process model that is based on a graph containing activity nodes and control nodes. It captures t he commonalities of p rocess description languages. For illustration purposes, we use a subset of BPMN and EPCs. Definition 1. (Process Model) A process model is a tuple P =( A, s, e, C, F, T ) where:  X  A is a finite non-empty set of activity nodes,  X  C is a finite set of control nodes,  X  N = A  X  C is a finite set of nodes with A  X  C =  X  ,  X  F  X  N  X  N is the flow relation, such that ( N, F ) is a connected graph,  X  X  n = { n  X  N | ( n ,n )  X  F } and n  X  = { n  X  N | ( n, n )  X  F } denote direct pre- X  s  X  A is the only start node, such that  X  s =  X  ,  X  e  X  A is the only end node, such that e  X  =  X  ,  X  T : C  X  X  and, xor } associates each control node with a type.
 The start and end activity nodes are assumed to carry no semantic meaning but indicate initialisation and termination of a process. Refactoring may be applied to arrive at these start and end activity nodes [22]. We assume trace semantics for process models. Execution semantics of a process model is defined by a translation into a Petri net following on common formalisations, cf., [23]. As our notion of a process model compri ses a dedicated start and end activity nodes, the resulting Petri net is a workflow net (WF-net) [24]. All control nodes are of type and or xor , such that the WF-net is free-choice [24]. The translation into WF-nets defines the behaviour of a process model P =( A, s, e, C, F, T ), which is captured by a set of traces T P . It comprises a set of lists of the form s  X 
A  X  , which represent the execution order of activities. 2.3 Behavioural Profiles A behavioural profile captures behaviou ral characteristics of a process model by three relations between pairs of activity nodes. These relations are based on the notion of weak order . Two activities of a process model are in weak order, if there exists a trace in which one activity occurs after the other. Note that we require only the existence of such a trace.
 Definition 2 (Weak Order Relation). Let P =( A, s, e, C, F, T ) be a process model and T P its set of traces. The weak order relation P  X  A  X  A contains all pairs ( x, y ) , such that there is a trace  X  = n 1 ,...,n m in T P with j  X  X  1 ,...,m  X  1 } and j&lt;k  X  m for which holds n Two activity nodes of a process model might be related by weak order in three different ways, which define the characteristic relations of the behavioural profile. Definition 3 (Behavioural Profile). Let P =( A, s, e, C, F, T ) be a process model. A pair ( x, y )  X  A  X  A is in one of the following relations:  X  The strict order relation  X  The exclusiveness relation +  X  The interleaving order relation || We illustrate the relations of the behavioural profile for the lower model in Fig. 1. For instance, it holds (1) (5) as both activities are ordered whenever they oc-cur together in a trace. It holds (8) + (9) as both activities will never occur in a single trace, and (5) || (6) due to the potential concurrent execution. The rela-tions of the behavioural profile are mutually exclusive. Along with the reverse strict order  X  1 = { ( x, y )  X  ( A  X  A ) | ( y, x )  X  } , the relations partition the Cartesian product of activities. An activity is either said to be exclusive to itself (e.g., (1) + (1) in Fig. 1) or in interleaving order to itself (e.g., (6) || (6)). The former holds, when an activity cannot b e repeated, wherea s the latter implies that the activity may be executed multiple times. The behavioural profile is a behavioural abstraction. Hence, there m ay be process models that show differ-ent trace semantics but have equal behavioural profiles. Moreover, behavioural profiles may be lifted from activities to labels of activities. Still, this may re-sult in serious information loss as two occurrences of activities with equal la-bels would not be distinguished. The behavioural profile B P of a process model P =( A, s, e, C, F, T ) may be restricted to a subset of activity nodes A  X  A by restricting the definition of the three relations P ,+ P ,and || P to A  X  A .We refer to this restricted profile as the behavioural profile over A .

Computation of the behavioural profile of a process model is done efficiently under the assumption of soundness. Soundness is a correctness criteria that guar-antees the absence of behavioural anomalies, such as deadlocks [25]. It has been defined for WF-nets, so that it can be directly applied to our notion of a pro-cess model. We are able to reuse techniqu es for the computation of behavioural profiles introduced for sound free-choice WF-nets [16]. Using these results, be-havioural profiles are computed in O ( n 3 ) time with n as the number of nodes of the respective WF-net. To introduce a set algebra for behavioural profiles, we first discuss a notion of strictness for profile relations in Section 3.1. Then, Section 3.2 introduces set-theoretic relations, while Section 3.3 turn sthefocusonset-the oretic operations. 3.1 Strictness of Behavioural Relations The relations of the be-havioural profile can be clas-sified according to their strictness , as they allow differ-ent levels of freedom for the occurrences of activities in a trace. Interleaving order can be seen as the absence of any restriction on the order of po-tential occurrence  X  the activities are allowed to appear in an arbitrary order. In contrast, (reverse) strict order defines a particular order of execution for two activities, whereas exclusiveness compl etely prohibits the occurrence of two ac-tivities together in one trace. Therefor e, we consider interleaving order to be the weakest relation, while exclusivenes s is the strictest relation. For a dedicated chy of traces that show either none, one, or both activities, illustrated in Fig. 2. Here, all traces that conform to a specific behavioural relation are part of the encircled set of traces. A process model that defines interleaving order between two activities x and y allows for any trace, i.e., it may contain none, one, or both activities in any order. A model that imposes exclusiveness for both activities is most restrictive. It allows for tra ces that comprise none or only one of the activities. This set is a proper subset of the traces induced by interleaving order.
This notion of strictness is the foundation for the definition of a set algebra for behavioural profiles. Our operations and relations are not defined based on sets of traces, but on the relations of the behavioural profile. Still, the strictness of behavioural relations illustrated above with sets of traces is taken into account. 3.2 Set-Theoretic Relations We start by introducing three set relations, i.e., equivalence, inclusion, and empti-ness for behavioural profiles. Most use cases require the application of these con-cepts for behavioural profiles of differen t models for which a separate relation identifies corresponding pairs of activities. To keep the formalisation concise, we abstract from such corresp ondences and assume corresponding activities to be identical. As partially overlapping sets of activities do not impose serious chal-lenges, we restrict the discussion to the b ehavioural aspects and assume identical sets of activities once more than one behavioural profile is considered. Equivalence. Two behavioural profiles are equivalent, if they enforce equal be-havioural constraints for the shared activities. Equivalence of behavioural profiles does not imply equal trace semantics for the shared activities, cf., [16]. Definition 4 (Equivalence). Let B 1 = { 1 , + 1 , || 1 } and B 2 = { 2 , + 2 , || 2 } be two behavioural profiles over a set of activities A . B 1 equals B 2 , denoted by B + 1 =+ 2 ,and Inclusion. An inclusion holds between two behavioural profiles, if one profile completely subsumes the behavioural constraints of another profile for shared activities according to the notion of strictness discussed in the previous section. Definition 5 (Inclusion). Let B 1 = { 1 , + 1 , || 1 } and B 2 = { 2 , + 2 , || 2 } be two behavioural profiles over a set of activities A . B 1 includes B 2 , denoted by B  X  a  X  a  X  a If
B Fig. 3 illustrates inclusion of behavioural profiles (relations for start and end nodes are omitted). The profile of model 3(a) includes the one of model 3(b) as the former is less restrictive. It allows for ordered execution of activities A and B , whereas model 3(b) forbids any occurrenc e of both activities in the same trace. Due to the assumed behavioural abstraction, inclusion of the behavioural profiles does not imply inclusion of the respective sets of traces. Still, the behavioural abstraction allows us to cope with variations as they are visible for activities  X  X earch GBA Data X  and  X  X pdate GBA Data X  in our example in Fig. 1. Model ( II ) defines strict order for both activities, whereas model ( I ) completely disallows joint occurrence of both activities. Hen ce, the behavioural constraints imposed by model ( I ) are included in the constraints imposed by model ( II ). Any trace-based assessment will fail to address such cases.
 Emptiness. A behavioural profile is empty, if it defines all pairs of activities, except for the start and end activity, to be exclusive. Such a profile forbids the execution of any activity other than th e start and the end activity. As those activities are assumed to carry no semantic meaning but indicate initialisation and termination of the process, such a trace is considered to be empty. Definition 6 (Emptiness). Let B = { , + , ||} be a behavioural profile over a set of activities A with s, e  X  A being start and end activities. B is empty ,ifand 3.3 Set-Theoretic Operations We introduce three set operations for behavioural profiles, i.e., complementation, intersection, and union. Again, we abstract from a correspondence relation, as-sume that corresponding activities are identical, and focus on the constraints for shared activities once multiple behavioural profiles are considered. Complementation. The complement operation is defined for a single behavioural profile and returns a profile that specifies reverse relations for all pairs of activities of the original behavioural profile.
 Definition 7 (Complement). Let B = { , + , ||} be a behavioural profile over a set of activities A .The complement B = { C , + C , || C } of B is a behavioural profile over A , such that for all pairs of activities ( a 1 ,a 2 )  X  A  X  A it holds:  X  a  X  a  X  a The complement operation is illustrated in Fig. 4. Model 4(a) and model 4(b) show complementary behavioural profiles (neglecting start and end nodes)  X  the profile of the left model is the complement of the profile of the right model, and vice versa. For instance, there is a strict order const raint between activities A and B in model 4(a), whereas both activities are in reverse strict order in model 4(b). Further, activity A may occur multiple times in model 4(a), whereas it is exclusive to itself in model 4(b).
 Intersection. Given two behavioural profiles, the intersection operation yields a third behavioural profile that combines the strictest relations of the behavioural profile for all shared pairs of activities. Th erefore, the intersection represents the behavioural constraints that are shared by both profiles.
 Definition 8 (Intersection). Let B 1 = { 1 , + 1 , || 1 } and B 2 = { 2 , + 2 , || 2 } be two behavioural profiles over a set of activities A .The intersection  X  of these B , such that for all pairs of activities ( a 1 ,a 2 )  X  A  X  A it holds:  X  a  X  a  X  a We illustrate the intersection of behavioural profiles with the models in Fig. 5. The lower model (c) shows a behavioural profi le that corresponds to the intersection of the behavioural profiles of the upper two models (a) and (b). Consider, for in-stance, activities A and B . While model (a) allows for interleaving order between both activities, model (b) is more restric tive and enforces strict order. Hence, the intersection also defines strict order for both activities. Due to the assumed be-havioural abstraction, again, model (c) does not represent the intersection of the sets of traces of models (a) and (b). Referring to our example in Fig. 1, the set of shared complete traces is empty for both models. The evident behavioural com-monalities of both models are not revea led by a trace-based assessment. The in-tersection of behavioural profiles allows to address such scenarios.
 Union. The union operation for two behavioural profiles yields a third be-havioural profile that combines the weakest constraints of the two profiles given as input parameters for all pairs of activities. We trace back the definition of the union operation to the complement and intersection operations using De Mor-gan X  X  rule. The union B 3 of two behavioural profiles B 1 and B 2 over a set of activities A , denoted by B 3 = B 1  X  X  2 is defined as B 3 = B 1  X  B 2 . In this section, we discuss how the set algebra for behavioural profiles is applied to address the questions raised in Section 2.1 regarding the management of decoupled process variants. Let P 1 ,...,P n be a set of models that were found to capture different variant sofabusinessprocesswith A being the shared activities.
C1: Shared behaviour: Greatest Common Divisor. The shared behaviour may be referred to as the Greatest Common Divisor (GCD), cf., [14]. Given a set of process variants, the GCD is characterised by a behavioural profile B GCD over A that is derived by computing the intersection of all profiles B P 1 ,..., B P n . Hence, the GCD integrates the constraints shared by all variants. The profile B GCD may be checked for emptiness. If it is empty, all variants impose contradicting constraints for the shared activities. A model representing the GCD can be syn-thesized from the profile B GCD following the approach introduced in [26]. Note that the synthesises imposes certain cons istency requirements on the behavioural profile. Further, the behavioural commonality between a single variant P i and the GCD is quantified as the relative share of activity pairs that have equal rela-tions in B GCD and B P i . This measure quantifies how much additional behaviour the variant allows for, relative to the behaviour shared with all variants.
Fig. 6 depicts the GCD for the variants of our initial example in Fig. 1. The behavioural profile of the GCD comprises all constraints from model ( I )asthey are more restrictive than those imposed by model ( II ). The GCD visualises the basic ordering constraints of both variants. Still, it is not identical to model ( I ) as certain causalities are abstra cted by the behavioural profile.

C2: Most general behaviour: Least Common Multiple. The most general be-haviour is referred to as the Least Common Multiple (LCM) of a set of variants. It is characterised by a behavioural profile B LCM over A that is derived by computing the union of all profiles B P 1 ,..., B P n . The LCM imposes solely the weakest constraints for a pair of activities in the set of variants. Again, a model is derived from B LCM using the synthesis approach for behavioural profiles.
Fig. 6 depicts the LCM for the variants of our initial example. The parallel execution of three activities is caused b y the interleaving order imposed by the profile of the LCM. As all of them may be executed multiple times (interleaving order as a self-relation), they are also part of a control flow cycle. Note that model synthesis for these activities includes various design decisions on how to represent interleaving order (by concu rrency or by cyclic structures) [26]. Hence, the synthesis approach may be adapted so that an LCM with a different struc-ture, but identical behav ioural profile is created.

C3: Shared forbidden behaviour: Complementary LCM. In order to charac-terise the behaviour that is forbidden by all variants for shared activities, a behavioural profile B SFB over A is created as the complement of the LCM, B that are not implemented in any variant due to the strictness of behavioural relations, cf., Section 3.1. Conclusions are drawn solely from the (reverse) strict order and interleaving order relations of the profile B SFB .If B SFB defines in-terleaving order between two activities, all variants show exclusiveness for these activities. Hence, the potentially arbitr ary order implied by the interleaving or-der constraint is forbidden in all variants. Similar conclusions are drawn for (reverse) strict ord er constraints in B SFB .
 We illustrate this concept with the activities  X  X pdate GBA Data X  and  X  X end Notifications X  of our initial example. For both activities, the LCM defines inter-leaving order, which yields exclusivenes s in the complement. As exclusiveness is the strictest relation, we cannot draw any conclusions on shared forbidden be-haviour. For the activities  X  X onfirm Identity X  and  X  X pdate GBA Data X  , however, the LCM defines a strict order constraint from the former to the latter. There-fore, the reverse strict order in the complement is shared forbidden behaviour and prevents execution of activity  X  X pdate GBA Data X  before  X  X onfirm Identity X  .
C4: Redundancy of variants: Inclusion of variants. Given the behavioural profiles of two process variants P i and P j , the question whether the behaviour of one variant is captured in the other variant for the shared activities is traced back to the inclusion of their behavioural profiles, i.e., B P i  X  X  P j .Inthiscase, all constraints imposed by P i would be equal or less strict than the constraints imposed by P j , so that the behaviour (according to the behavioural profile) of P j is covered by P i . That suggests integration of variant P j into variant P i .
Investigating the two models given in Fig. 1, the behavioural profile of model ( II ) includes the profile of model ( I ) for the shared activities. Hence, when aiming at reducing the number of variants, the existence of model ( I ) may be challenged. Our approach to managing process variability has been evaluated based on the SAP reference model [27]. This model coll ection describes the functionality of the SAP R/3 system and comprises 604 process diagrams, which are expanded to 737 models in EPC notation as some diagrams contain multiple disconnected EPCs. These EPC models capture different func tional aspects of an enterprise, such as sales or accounting. However, the models are not fully orthogonal. Various models show an overlap, such that events and functions with identical labels occur in multiple models. These models, therefore, represent process variants.
For our analysis, we excluded all models that showed behavioural anomalies, such as deadlocks and livelocks [28], or ambiguous instantiation semantics [29]. We also normalised multiple start and en d events, and replaced block-structured OR-split and OR-join connectors with AND connectors, which does not impact on the behavioural profile. These selections and transformations led to a set of 493 EPC models, that are grounded on our formal model introduced in Sec-tion 2.2. Hence, we were able to leverage the efficient techniques mentioned in Section 2.3, so that behavioural profiles were computed in milliseconds. Table 1 gives on overview of the observed clusters of process variants in the SAP reference model. Given a threshold of shared nodes, we derived all process model clusters of maximal size for which the set of shared nodes was equal or larger than the threshold. For these clusters, Table 1 depicts the number of clusters, their average and maximal size, and the number of considered models. For instance, requiring variants to share at least 12 nodes led to 23 clusters comprising 56 distinct models. The aver age size of the clusters is three models, the maximum size is seven models. The derived values witness the existence of a large number of process variants in the model collection.

In order to analyse the commonalities for all identified model clusters, we implemented the presented set algebra and derived the LCM. This analysis re-vealed that the behavioural profile of the LCM was often equal to the profile of at least one model in the cluster. Based on this observation, we checked for all clusters of variants whether the behavioural profile of one variant includes the profiles of all other variants for the shared nodes. In fact, this was the case for all but two clusters. The identified LCM models could be used as a starting point for harmonising the reference model by removing redundant variants and integrating their non-shared nodes into the former model. Consider, for instance, the excerpts of two encountered process v ariants in Fig. 7. Both models share 16 nodes, some of them are highlighted in the excerpt. For some shared nodes both models define different behavioural constraints. Still, the behaviour of the right model includes the behaviour of the left model for shared nodes, which suggests integration of the processing defined by the left model into the right one.
Using this approach, more than half of the identified variants could be removed from the collection as indicated by the last row in Table 1. Depending on the number of required shared nodes, the reference model could be reduced by up to 127 process models. Research related to our work is conducted mainly in three areas: comparison of behaviour, modelling of process variants, and behaviour synthesis.

The comparison of behaviour as defined by the operators in this paper is re-lated to various notions of behavioural equivalence of the linear time  X  branching time spectrum [30]. Behavioural profiles provide an abstraction which approxi-mates trace equivalence at the weaker end of this spectrum. Notions of inclusion are discussed in work on behavioural equi valence [7,8,9]. Recent works calculate a degree of behavioural similarity betw een process models based on linguistic, graph-matching, and state-based concepts, see [31] for an overview. Our work instead provides a precise definition of how to determine the behavioural intersec-tion of two process models. There is als o work that aims to determine the union of the behaviour captured by two proces s models [10,11,12,13]. None of these works has been integrated and extended towards the definition of an algebra.
The requirements for representing variants of a process have been addressed by different modelling approaches. In our work we build on the assumption that the union or intersection of two process models is again a process model. This approach is in line with work on the configuration of workflow models [6]. Other approaches use dedicated elements for capturing variation points on the level of the modelling language. Such languages include Configurable EPCs [5,32], ag-gregated EPCs [33], Provop [3], or variant rich process models [34], which pick up ideas and concepts from modelling of software product families [35] and fea-ture diagrams [36]. These approaches typically assume that variation is identified and explicitly represented by a human modeller while our algebraic operations permit the calculation of intersection or union from two model variants.
Similar relations, but not exactly those of behavioural profiles, are used in a pre-processing step of approaches to synth esize a process model [37]. Please refer to [38] for a discussion of the conceptual differences between the relations used in [37] and those of the behavioural profile. Our general idea of defining an algebra for managing process variants is inspired by an algebra for operating guidelines, a formal concept for the synthesis of in teraction partners for a process [17]. In this paper, we addressed two fundamental challenges of managing process variants, the specification of formal operations for reasoning with variants, and the foundation of such operations upon an appropriate behavioural abstraction. As a solution, we proposed a set algebra for behavioural profiles that enables conclusions on behavioural commonalities and differences using set-theoretic re-lations and operations. We showed how these concepts are used to address the problem of managing process variants. Our case study illustrated the potential of our approach for harmonisation of process model collections.

Having defined a complete algebra for the (abstracted) behaviour of processes allows for behavioural analysis way beyond similarity measurement. For instance, a process model may be used to encode forbidden behaviour. Using our algebraic operations, a model collection may th en be analysed whether it allows for the forbidden behaviour. Our operations may also be used during the design of process models. As an example, subsumption of behavioural profiles may hint at the creation of model fragments that can b e found in a model co llection already.
We also have to reflect on some limitations of our approach. We focus on the control flow perspective and neglect data and resource assignments. We foresee that our set algebraic approach may be extended in these directions. As a starting point, the standard set theoretic operations may be applied to sets of data artefacts and resources. However, operations that consider the interplay between the perspectives (i.e., the inter section of data access constraints for a certain role) can be assumed to provide even more value. Another restriction is our assumption of elementary 1:1 corre spondences between activities of two behavioural profiles. Differences in the abs traction level are likely to be observed in practice, in particular if models are cre ated for different purposes (e.g., process analysis vs. process design). In future work, we aim at lifting our approach to the level of n:m correspondences between activities.

