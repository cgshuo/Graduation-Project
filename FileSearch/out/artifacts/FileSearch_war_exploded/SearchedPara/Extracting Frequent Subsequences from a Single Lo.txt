
In this paper, we study frequent-subsequence extrac-tion from a single very-long data-sequence. First we pro-pose a novel frequency measure, called the total frequency , for counting multiple occurrences of a sequential pattern in a single data sequence. The total frequency is anti-monotonic, and makes it possible to count up pattern occur-rences without duplication. Moreover the total frequency has a good property for implementation based on the dy-namic programming strategy. Second we give a simple on-line algorithm for a specialized subsequence extraction problem, i.e., a problem with the infinite window-length. This specialized problem is considered to be a relaxation of the general-case problem, thus this fast on-line algorithm is important from the view of practical applications.
Sequential data mining has been increasing its impor-tance in various kinds of practical applications, and has been studied by many researchers [1, 2, 5, 9, 10, 11]. Agrawal and Srikant [1] conducted the first research among them, and used the framework where a database consists of multiple data sequences. This framework has been adopted by many other researchers, such as [2, 10]. On the other hand, another framework, that is, a database consisting of a single very-long data sequence, has been investigated in [5, 9, 11]. In the latter framework, multiple occurrences of a sequential pattern have to be counted up in a given very-long single data sequence. Yang et. al. [11] gave an efficient mining method for asynchronous periodic patterns in time series data, which was improved in [5]. They, how-ever, did not study the anti-monotonicity for frequency mea-sures of sequential patterns. As is well known, the anti-monotonicity is very important for efficient computation for sequential/transaction data mining. Mannila and Toivo-nen [9] studied various sorts of sequential pattern mining in a single large data sequence. They proposed the sliding window system as a frequency measuring system. The anti-monotonicity holds for the frequency measure based on the sliding window system, but unfortunately, the sliding win-dow system has a defect, i.e., the duplicate counting of an occurrence of a sequential pattern.

In this paper, we first propose a novel frequency mea-sure, called the total frequency , for counting multiple occur-rences of a sequential pattern in a very-long single data se-quence. The total frequency satisfies the anti-monotonicity property, and makes it possible to count up pattern occur-rences without duplication. Moreover the total frequency has a good property for the dynamic programming strategy. As is well known, the dynamic programming strategy plays an central role in efficient data mining for sequential and/or transaction patterns, such as in Apriori-All [1, 2] and Pre-fixSpan [10]. We can construct, with the total frequency, an efficient system like Apriori or PrefixSpan for the sequen-tial data mining of a single data sequence. We show a result of our preliminary experiment for evaluating the total fre-quency measure with respect to non-duplicate counting.
Second, we study a on-line algorithm for extracting fre-quent subsequences for a single long data sequence, i.e., a data stream. Although several researchers investigated on-line algorithms for extracting frequent item or itemsets from data streams [3, 6, 8], there is no study, due to our knowledge, for extracting frequent subsequences from data streams. we give a fast on-line algorithm for extracting maximal frequent sequences for a specialized problem such that the window-length is assumed to be infinite. This prob-lem is itself theoretically interesting, and moreover, this problem can be considered as a relaxation problem of a gen-eral case with a finite window-length. We can use this prob-lem as a key component in the pruning method. Hence a fast on-line algorithm for this problem is also very impor-tant from the view of practical applications.
 The remaining part of this paper is organized as follows: Section 2 is for preliminaries. In Section 3, we clarify some problems in naive frequency measures for multiple occur-rences of a sequential pattern in a single data sequence. Section 4 gives two novel frequency measures: the first is the head frequency measure and the second is the total fre-quency measure, which is defined based on the head fre-quency. Section 5 shows the result of our evaluation exper-iment. Section 6 gives an on-line algorithm for a simple problem. Section 7 is for the conclusion. We use the ordinary notations in the literature [10]. Let I = { i 1 ,i 2 ,...,i n } be a set of all items .An itemset is a non-empty set of items. A sequence is an ordered list of itemsets. A sequence  X  is denoted by s 1 s 2  X  X  X  s m where each s j is an itemset, i.e, s j  X  I . Each s j is also called an element of the sequence, and denoted as ( a 1 a 2  X  X  X  a where a k  X  I for 1  X  k  X  l . For simplicity, the brackets are omitted if an element has only one item. For example, ( ac )( a )( b )( bc )( b ) is denoted as ( ac ) ab ( bc ) b . An item can occur at most once in an element of a sequence, but can occur multiple times in different elements of a sequence. A sequence  X  = s 1 s 2  X  X  X  s m is called a subsequence of another sequence  X  = t 1 t 2  X  X  X  t n , denoted as  X   X  ,if there exist integers 1  X  j 1 &lt;j 2 &lt;  X  X  X  &lt;j m  X  n such that s  X  t j Let D be a set of sequences, called a sequence database . A frequency measure M ( D,  X  ) of a sequence  X  over D is a function such that M ( D,  X  ) returns a non-negative real number as the frequency value of  X  occurring in D .Wesay, M
D is anti-monotonic if M ( D,  X  )  X  M ( D,  X  ) for any pair of sequences  X  and  X  such that  X   X  . Given a threshold value MS , called a minimal support value , a sequence  X  is said to be frequent in a sequence database D if M ( D,  X  )  X  MS . A frequent sequence  X  in D is said to be maximal if there exists no frequent sequence  X  in D such that  X   X  and  X  =  X  . In the sequel, we abbreviate a frequency measure M ( D,  X  ) simply as M (  X  ) if D is clear from the context and no confusion arises.

In Agrawal X  X  sequential pattern mining, a sequence database D is assumed to be a set of sequences, where fre-quent subsequences, i.e., frequent sequential patterns ,are extracted from D . In this framework, the number of se-quences in D containing a sequential pattern  X  is important, but the multiple occurrences of  X  in each sequence from D are completely ignored, and are not counted up at all. In this paper, we consider a single-sequence database , denoted as S , which consists of a single very-long sequence, and study an efficient extraction method of a sequential pattern which repeatedly appears in S .
The anti-monotone property for sequence frequency measures plays a substantially important role in efficient data mining of frequent patterns. In this paper, we try to construct an anti-monotonic frequency measure for mining a sequential pattern which occurs multiple times in a single very-long sequence. Almost all naive frequency measures of multiple occurrences lack th e anti-monotone property. Example 1 Consider a sequence aa ( ab ) b as a database S . Clearly the subsequence a occurs three times and b occurs two times in S 1 , whereas the subsequence ab has five occurrences in S 1 . Therefore, the simple frequency measure, i.e., the number of occurrences of a subsequence in S 1 , does not satisfy the anti-monotone property. More-over, another naive measure, i.e., the occurrence ratio of a subsequence, is not anti-monotonic either. Consider the following occurrence ratio R ( S,  X  ) for a sequence  X  in a single-sequence database S : In this case, the ratio R ( S 1 , a ) is 3 4 (= 2 the ratio R ( S 1 , ab ) is 5 6 (= 5 R (
S 1 , ab ) . Therefore, the ratio R ( S 1 , X  ) does not satisfy the anti-monotonicity, either.
 The sliding window system investigated in Mannila and Toivonen [9] is a natural and good framework for measuring frequent sequential patterns, but unfortunately has a serious drawback.

Example 2 Let us consider a sliding window system for counting the number of occurrences of a sequence. Fig-ure 1 illustrates a window system for a single-sequence database S 2 = abcde , where the window-length is as-sumed to be three. The sequence S 2 is split into seven subsequences W 1 ,  X  X  X  ,W 7 through a sliding window. In this framework, the occurrence frequency SW ( S 2 , X  ) for a sequence  X  in S is defined to be the number of actual subsequences W i containing  X  . For example, we have SW ( S 2 , cd )=2 and SW ( S 2 , cde )=1 .Obvi-ously, the frequency measure SW ( S 2 , X  ) satisfies the anti-monotonicity. The frequency SW ( S 2 , X  ) , however, has a defect such that SW ( S 2 , X  ) repeatedly counts an occur-rence of a short subsequence  X  in S , which causes a du-plication. For example, SW ( S 2 , cde )=1 , but for the single element sequence c ,wehave SW ( S 2 , c )=3 . Moreover, although the sequences ce and de both have two elements, SW ( S 2 ce )=1 but SW ( S 2 , de )=2 . Notice that all of the subsequences cde , c , ce and de have exactly one occurrence in S 2 respectively. Thus there clearly exists an unfair treatment between short sequential patterns and long ones under the sliding window system.
In the sequel, we construct an anti-monotonic frequency measure step by step. The measure SW ( S,  X  ) in the slid-ing window system counts a single element multiple times, which causes some shortcomings. We propose here the head frequency which avoids such duplicate counting by re-stricting a counting position to the first one in a window.
Given a sequence  X  = s 1 s 2  X  X  X  s m and integers i ( 1  X  i  X  m )and k ,an window sequence of  X  starting from the i -th element with length k , denoted as win (  X , i, k ) ,isdefined as follows: win (  X , i, k )=
Definition 1 (Head Frequency) Let S be a single-sequence database s 1 s 2  X  X  X  s m and  X  be a sequence t t 2  X  X  X  t n .The head frequency H-freq ( S,  X  ) of  X  in S with k -length window is where the function  X  is defined as:  X  ( s i  X  X  X  s j , t 1  X  X  X  t n )=
Consider again the sequence S 2 = abcde as in Exam-ple. 2. We have Similarly, the subsequences cde , c , ce and de all have the same head frequency one. No duplicate counting is performed with the head frequency measure.

Example 3 (Continued from Ex. 1) Suppose the same sequence S 1 = aa ( ab ) b as in Example. 1. The subsequence ab occurs in three window sequences win ( S 1 , 1 , 3) = aa ( ab ) ,win ( S 1 , 2 , 3) = a ( win ( S 1 , 3 , 3) = ( ab ) b . Thus we have In this case, we have H-freq ( S 1 , a , 3)  X  H-freq ( S 1 , ab , 3) for the pair of a and ab .How-ever, the head frequency still does not satisfy the anti-monotonicity in general. For example, clearly, H-freq ( S 1 , b , 3) = 2 . Hence, we have monotonic in general, H-freq has an interesting property, that is, the right anti-monotonicity property.

Definition 2 (Right Expansion) Let  X  be a sequence s 1 s 2  X  X  X  s m and  X  be a sequence t 1 t 2  X  X  X  t n .Wesay,  X  is a right expansion of  X  if  X   X  and s 1  X  t 1 .
Definition 3 (Simple Right/Itemset Expansion) Let  X  be a sequence s 1 s 2  X  X  X  s m , t  X  I be an itemset and i be an integer such that 1  X  i  X  m .The simple right expansion of  X  with t at the position i is the sequence s 1  X  X  X  s i ts i +1  X  X  X  s m . Given an itemset u such that s  X  u ,the itemset expansion of  X  with u the position i is the sequence s 1  X  X  X  s i  X  1 ,us i +1  X  X  X  s m .

Proposition 1 Let  X  and  X  be sequences such that  X  is a right expansion of  X  . The sequence  X  can be obtained from  X  by successively applying simple right expansions and/or itemset expansions, finitely many times, with appropriate itemsets u 1 ,u 2 ,  X  X  X  ,u k at some positions.

Definition 4 (Right Anti-Monotonicity) Let M be a function from sequences to non-negative real numbers. We say, M is right anti-monotonic if M (  X  )  X  M (  X  ) for any pair of sequences  X  and  X  such that  X  is a right expansion of  X  .
 Lemma 1 The head frequency H-freq is right anti-monotonic, that is, for any single-sequence database S , any pair of sequences  X  and  X  such that  X  is a right expansion of  X  and any window-length k , we have Proof: According to Definition 3, the head frequency ob-viously has the right anti-monotonicity both for the simple right expansion and for the itemset expansion. More pre-cisely, for any pair of sequences  X  and  X  such that  X  is either a right expansion of  X  or an itemset expansion of  X  ,wehave Hence, from Proposition 1, this lemma can immediately be proved.

Given a single-sequence database S and a sequence  X  = t 1  X  X  X  t n , the measure H-freq ( S,  X , k ) counts the number of occurrences for the first element t 1 of  X  in S ,whereas, for the second and later elements t 2 ,  X  X  X  ,t n , H-freq just checks whether each of t 2 ,  X  X  X  ,t n occurs in S or not. Notice that H-freq ( S,  X , k ) never counts the actual number of occurrences for each succeeding element t 2 ,  X  X  X  ,t n For example, given S 3 = aaabccc ,wehave whereas there is a difference in the numbers of occurrences of the element b and c . Intuitively, the sequence ac must have a greater frequency value than ab in S 3 .Thus,we next propose another frequency measure which considers the numbers of occurrences for all subsequences of a given sequence.

Definition 5 (Total Frequency) Let S be a single-sequence database and  X  be a sequence. The total frequency T-freq ( S,  X  ) of  X  in S with k -length window is
Example 4 Reconsider the previous sequence S 3 = aaabccc as a database. We have whereas we have T-freq ( S 3 , ab , 5) = 1 The total frequency has the anti-monotone property. Theorem 1 (Anti-Monotonicity of Total Frequency) The total frequency T-freq is anti-monotonic, that is, for any single-sequence database S , any pair of sequences  X  and  X  such that  X   X  and any window-length k , we have Proof: Let  X   X  be a set of all subsequences of  X  ,andsimi-larly for  X   X  of a sequence  X  .Since  X   X  ,wehave  X   X   X   X  . Thus, according to Definition 5, T-freq ( S,  X , k )  X  T-freq ( S,  X , k ) is immediate.
 Now, we study some computational aspects of T-freq ( S,  X , k ) . Although naive computation of T-freq ( S,  X , k ) needs to compute all H-freq ( S,  X , k for every subsequence  X   X  , we fortunately have the following lemma which can drastically reduce the number of the subsequences being necessary to compute T-freq ( S,  X , k ) .

Given a sequence  X  = t 1 t 2  X  X  X  t n , we write suf (  X , i denote the suffix subsequence t i t i +1  X  X  X  t n of  X  for i  X  n .
 Lemma 2 Let S be a single-sequence database,  X  be a se-quence t 1 t 2  X  X  X  t n and k be an window-length. We have Proof: Suppose that  X  is a subsequence u 1 u 2  X  X  X  u m of  X  . Then there exist integers 1  X  j 1 &lt;j 2 &lt;  X  X  X  &lt;j m such that u 1 = t j 1 ,u 2 = t j 2 ,...,u m = t j m . Thus, the suffix sequence suf (  X , j 1 )= t j 1 t j 1 +1 ...t n is clearly an right expansion of  X  . Hence, from Lemma 1, we have Thus, for any subsequence  X  of  X  , there exist an integer h and a suffix sequence suf (  X , h ) such that H-freq ( S,  X , k H-freq ( S, suf (  X , h ) ,k ) . Therefore, according to Defini-tion 5, this lemma is obvious .

Notice that, for a sequence  X  of length n , the number of all subsequences  X   X  is exponential to n , i.e., 2 n , whereas the number of all suffix sequences from  X  is linear to n . Hence, Lemma 2 is enormously beneficial for practical computation of T-freq ( S,  X , k ) . Furthermore, the following corollary is obvious from Lemma 2.

Corollary 1 Let S be a single-sequence database,  X  be a sequence and k be an window-length. We have
This corollary means that, if we adopt a dynamic pro-gramming strategy, then the necessary operation at the stage for counting T-freq ( S,  X , k ) of a sequence  X  of length n is essentially just the computation of H-freq ( S,  X , k ) a look-up operation in the table containing all intermedi-ate results H-freq ( S,  X , k ) for sequences  X  of length n which are already completed at the previous stage. Notice that the previous results H-freq ( S,  X , k ) to be stored in the table are restricted into the ones for frequent sequences  X  . These properties are significantly important and advanta-geous for finding out all maximal frequent subsequences in a given very-long sequence.
We conducted some experiments for evaluating the total frequency measure T-freq ( S,  X  ) with a sort of event track-ing problems for news stories [4, 7], of which importance is now significantly increasing in the information retrieval field.

We have recently started the research on sequential text mining from a huge number of newspaper articles which are sorted by the temporal order determined by the dates of pub-lication. This research aims to construct a corpus/dictionary of frequent temporal sequences of events , where we assume that each important event is described by some important words/phrases. In this paper, we report the result of a pre-liminary experiment which uses the MAINICHI Newspaper corpus in Japanese. We used 12,596 Japanese articles in the local/city news pages published through the first half year of 2000.

The experimental result is shown in Figure 2. The verti-cal axis is the number of frequent maximal sequential pat-terns (see examples listed in the below) which were ex-tracted from the MAINICHI Newspaper corpus. The hori-zontal axis is for the length of extracted sequential patterns. The item set is a set of impor tant words/phrases which are selected from the newspaper corpus in the preprocessing stage. Each element in a sequence consists of several impor-tant words/phrases which appeared in several articles pub-lished in the same one day. The window-length used in this experiment is seven, which means that we considered fre-quent event sequences occurring in seven-day periods. We developed and used a preliminary program for the experi-ment, which is based on an Apriori-like method proposed by Agrawal and Srikant [1]. The dynamic programming strategy plays an central role in the Apriori-like method, and we fully enjoyed the computational benefit provided by Corollary 1 throughout the experiment.
 The result clearly shows that the sliding window measure SW ( S,  X  ) has the tendency of duplicate counting of an oc-currence of a short sequence. It is very difficult to find out long frequent sequences if we use the measure SW ( S,  X  ) The total frequency measure T-freq ( S,  X  ) mustbeamore appropriate measure than SW ( S,  X  ) .
Figure 2. The numbers of frequent event se-quences by T-freq ( S,  X  ) and SW ( S,  X  )
As mentioned above, several researchers investigated on-line algorithms for extracting frequent item or itemsets from data streams [3, 6, 8], there is, however, no study for extract-ing frequent subsequences from a singe data streams, due to our knowledge. In this section, we give a fast on-line algo-rithm for extracting maximal frequent subsequences for a specialized problem where the window-length is assumed to be infinite. This problem is itself theoretically interest-ing, and moreover, this problem, as shown in Lemma 3, can be considered as a relaxation problem of a general problem with a finite window-length. We can use this problem as a key component in the pruning method. Hence a fast on-line algorithm for this problem is also very important from a practical viewpoint. The following lemma is immediate from Definition 5.
 Lemma 3 Let S be a single-sequence database and  X  be a sequence. For any integer k , we have Therefore, given the same minimal support value MS, for any maximal frequent subsequence  X  in S with the window-length k , there is a maximal frequent subsequence  X  in S with the window-length k +1 such that  X   X  .
 In this section, the window length k is clear because k is assumed to be infinite here, thus we abbreviate H-freq ( S,  X , k ) and T-freq ( S,  X , k ) as H-freq ( S,  X  T-freq ( S,  X  ) respectively.

Let S be a sequence s 1  X  X  X  s m and s be an item set. The tail expansion of S with s , denoted as S  X  s , is the sequence s 1  X  X  X  s m s .The frequency measure Fr ( S, s ) of an itemset s in S is defined as T-freq ( S, s ) . Given a minimal support value MS , an itemset s is frequent in S if T-freq ( S, s MS .

The next theorem shows an essential feature of the total frequency measure, and is a theoretical base of an on-line algorithm shown below.

Theorem 2 (Incremental Property) Let S be a single-sequence database,  X  be a maximal frequent subsequence in S and s be an itemset. Suppose that t is a subset of s and satisfies the following maximal frequent condition: 1. t is frequent in the tail expansion S  X  s . 2. there is no subset u of s such that t  X  u and t = u Then, the tail expansion  X   X  t of  X  with t is a maximal frequent subsequence in S  X  s .
 Proof: Let MS be a given minimal support value, S be s 1 s 2  X  X  X  s m and  X  be t 1 t 2  X  X  X  t n . Then the expansions S  X  s and  X   X  t are S  X  s = s 1 s 2  X  X  X  s m s an  X   X  t = t t 2  X  X  X  t n t , respectively. We prove the followings: 1.  X   X  t is frequent in S  X  s . 2.  X   X  t is maximal among all frequent subsequences of
Case 1: Now we shall prove the above first prop-erty. From the assumption of this theorem, we have T-freq ( S,  X  )  X  MS . Thus, from Lemma 2, we obtain, for any suffixes suf (  X , i )= t i t i +1  X  X  X  t n ( i =1 ,...,n ), Consider here the suffixes of the expansion  X   X  t . For each suf (  X   X  t ,i )= t i t i +1  X  X  X  t n t ( i =1 ,...,n ), we have, according to Definition 1, Moreover, from the assumption t  X  s and the definition of  X  (see Definition 1), we have for k =1 ,...,m , Therefore, from Definition 1, we obtain for each i = 1 ,...,n Furthermore, H-freq ( S  X  s , t )  X  MS holds because t is frequent in S  X  s from the assumption. Therefore, from Lemma 2, we finally have T-freq ( S  X  s , X   X  t )  X  MS .
Case 2: Next, we prove the maximality of  X   X  t with the contradiction method. Suppose that  X   X  t is not maximal among all frequent subsequences in S  X  s . Then there is a subsequence  X  = u 1 u 2  X  X  X  u q  X  1 u q such that  X   X  t  X  and  X   X  t =  X  . Clearly, the last element u q of  X  must be a subset of s , and moreover must be maximal among all frequent subsets of s in S  X  s , because if not, it obvi-ously contradicts the maximality of  X  . Therefore, from the definition of  X  , we have, for each k =1 ,...,m and each i =1 ,...,q  X  1 , From the definition of  X  , T-freq ( S  X  s , u 1  X  X  X  u q )  X  is obvious. Therefore, according to the same discussion as in Case 1 ,wehave T-freq ( S, u 1  X  X  X  u q  X  1 )  X  MS .That means that u 1  X  X  X  u q  X  1 is a frequent subsequence in S .
Here, we split the remaining proof into two cases whether t = u q or not. In the case of t = u q ,these-quence u 1  X  X  X  u q  X  1 must contain t 1  X  X  X  t n as a proper subsequence, because  X  = u 1  X  X  X  u q  X  1 u q is initially de-fined as a sequence properly containing t 1  X  X  X  t n t .This, however, contradicts the assumption that  X  = t 1  X  X  X  t n is a maximal frequent subsequence in S . In the other case of t = u q ,since u 1  X  X  X  u q  X  1 contains t 1  X  X  X  t n t as a proper subsequence, u 1  X  X  X  u q  X  1 must contains t 1  X  X  X  as a proper subsequence. This also contradicts the maxi-mality of  X  = t 1  X  X  X  t n among all frequent subsequence in S . We have now completed the proof for Case 2 .
In the sequel, we show a novel on-line incremental al-gorithm which repeatedly executes the expansion operation given in Theorem 2 for extracting maximal frequent subse-quences. At each step of the main loop, one itemset is used for the tail expansion of the intermediate sequence database. We generate new maximal frequent subsequences in the ex-panded sequence database by ext ending intermediate maxi-mal frequent sequences obtained in the previous step.
Definition 6 Let each F i (1  X  i  X  m ) be an set of item-sets. The direct sum F = F 1  X  F 2  X  X  X  X  X  F m denotes the set of all itemset sequences of length m ,thatis, F = { s 1 s 2  X  X  X  s m | s 1  X  F 1 ,s 2  X  F 2 ,  X  X  X  ,s m  X  Definition 7 (On-line algorithm with T-freq measure) This on-line algorithm incrementally computes all maximal frequent subsequences in a single-sequence database. Input data at each step of the main loop are: (1) S n = s 1 s 2  X  X  X  s n which is an intermediate sequence database constructed through the previous steps; (2) an itemset s used for the tail expansion of S n ;(3)a frequency table FR n which is for recording the values Fr ( S n ,t ) of each itemset t appearing in S n ;(4)aset F n = F 1  X  X  X  X  X  F h n of all maximal frequent subsequences in S n .
 Output data at each step are: (1) the tail expansion S n +1 = S n  X  s = s 1 s 2  X  X  X  s n s ; (2) the expanded set F n +1 of all maximal frequent subsequences in S n +1 ;(3) the updated frequency table FR n +1 .

A minimal support value MS is given as an initial in-put. The initial sequence database S 0 is the empty sequence. The initial table FR 0 consists of the values 0 ( = Fr ( S for any itemset t . The initial F 0 is the empty set. We incre-mentally compute F n +1 at each step n as follows: 1. Expand S n with s at the tail, and generate S n +1 = 2. Compute Fr ( S n +1 ,t ) for each itemset t with the fol-3. Compute the set C of new frequent itemsets, i.e., 4. Compute F n +1 for the two cases of C =  X  or not:
We have the following theorem for the above on-line al-gorithm.

Theorem 3 (Soundness and Completeness) Let S be a single-sequence database and F n be the set of all maximal frequent subsequences in S . Suppose that F n +1 is the set of sequences obtained from F n by the above on-line algo-rithm with T-freq. F n +1 is the set of all maximal frequent subsequences occurring in the tail expansion S  X  s . Proof: This is immediate from Theorem2.

Example 5 We show the behavior of the on-line algorithm through an example. Let S = ( ab ) c ( abc )( abc ) be the final single-sequence database. Suppose that the minimal support value MS is two. There are two maximal frequent sequences c ( abc ) and ( ab )( abc ) in S . At each stage, each one itemset of S becomes available, and we incremen-tally compute and expand intermediate maximal frequent subsequences by using the on-line algorithm.
 Step 1: Input: S 0 =  X  , s =( ab ) , FR 0 = the empty table, F 0 =  X  1. S 1 = ( ab ) . 2. Increment each value of Fr ( S 0 , ( a )) , Fr ( S 0 , 3. C =  X  . 4. F 1 = F 0 .
 Output: S 1 = ( ab ) , FR 1 , F 1 =  X  .
 Step 2: Input: S 1 = ( ab ) , s =( c ) , FR 1 , F 1 =  X  . 1. S 2 = ( ab ) c . 2. Increment Fr ( S 1 , ( c )) , and generate FR 2 . 3. C =  X  . 4. F 2 = F 1 .
 Output: S 2 = ( ab ) c , FR 2 , F 2 =  X  .
 Step 3: Input: S 2 = ( ab ) c , s =( abc ) , FR 2 , F 2 =  X  1. S 3 = ( ab ) c ( abc ) . 2. Increment each Fr value of ( a ) , ( b ) , ( c ) , ( ab 3. C = { ( a ) , ( b ) , ( c ) , ( ab ) } . 4. F 3 = Output: S 3 = ( ab ) c ( abc ) , FR 3 , F 3 .
 Step 4: Input: S 3 = ( ab ) c ( abc ) , s =( abc ) , FR 3 1. S 4 = ( ab )( c )( abc )( abc ) . 2. Increment each Fr value of ( a ) , ( b ) , ( c ) , ( ab 3. C = { ( a ) , ( b ) , ( c ) , ( ab ) , ( ac ) , ( bc ) 4. F 4 = Output: S 4 = ( ab ) c ( abc )( abc ) , FR 4 , F 4 .
We conducted preliminary ex periments for evaluating the performance of the on-line algorithm shown above. The results show good the scalability for the growth of length n of a single-sequence database S = s 1 s 2  X  X  X  s n ,thatis, the computation time is linear to the length n of S .Onthe other hand, this algorithm is somewhat vulnerable with re-spect to growth of the size of each itemset s i in S ,thatis,a memory-consuming problem. The algorithm proposed here is too naive for this problem. One remedy is to cut down all subsets of non-frequent itemsets from the working table in FR i in Definition 7. The space allowed to us is limited, so the detail of this improvement is omitted here. Notice that, if we restrict the frequent subsequences to be extracted to the subsequences which consist of items, not of itemsets, then the on-line algorithm proposed in this paper no longer suffers the above memory-consuming problem.
In this paper, we first proposed a novel frequency mea-sure, called the total frequency T-freq ( S,  X , k ) , for counting multiple occurrences of a sequential pattern  X  in a very-long single data sequence S . The total frequency satisfies the anti-monotonicity property, and counts up pattern occur-rences without duplication. T-freq ( S,  X , k ) . Secondly, we show an on-line algorithm for extracting maximal frequent sequences for a simple problem with the infinite window-length.

Now we are developing an off-line very fast extracting algorithm of frequent subsequences in a single sequence database by using the on-line algorithm proposed here as a predicting method for pruning. We shall show this method and experiment results elsewhere in the near feature. This research was supported partly by Grant-in-Aid from The Ministry of Education, Science and Culture of Japan (No.16500078), and also, was supported by Research Foun-dation for the Electrotechnogly of Chubu.
 [1] R. Agrawal and R. Srikant: Mining Sequential Pat-[2] R. Agrawal and R. Srikant: Mining sequential [3] M.Datar, A.Gionis, P.In dyk and R.Motwani: Main-[4] F. Fukumoto and Y. Suzuki: Detecting Shifts in News [5] K-Y. Huang and C-H. Chang: Asynchronous Peri-[6] R.M.Karp, S.Shenker and C.H.Papadimitriou: A Sim-[7] M. Nakamura, K. Iwanuma and H. Nabeshima: [8] G.S.Manku and R.Motwani: Approximate Frequency [9] H. Mannila and H. Toivonen: Knowledge Discov-[10] J. Pei, J. Han, B. Mortazavi-Asl, H. Pinto, Q. Chen, [11] J. Yang, W. Wang and P. S. Yu: Mining Asynchronous [12] M. J. Zaki: Efficient Enumeration of Frequent Se-
