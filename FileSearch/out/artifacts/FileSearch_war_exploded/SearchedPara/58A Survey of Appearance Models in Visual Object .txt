
XI LI ANTHONY DICK and ANTON VAN DEN HENGEL , The University of Adelaide
One of the main goals of computer vision is to enable computers to replicate the basic functions of human vision, such as motion perception and scene understanding. To achieve the goal of intelligent motion perception, much effort has been spent on visual object tracking, which is one of the most important and challenging research topics in computer vision. Essentially, the core of visual object tracking is to robustly estimate the motion state (i.e., location, orientation, size, etc.) of a target object in each frame of an input image sequence.

In recent years, a large body of research on visual object tracking has been published in the literature. Research interest in visual object tracking comes from the fact that it has a wide range of real-world applications, including visual surveillance, traffic flow monitoring, video compression, and human-computer interaction. For example, visual object tracking is successfully applied to monitor human activities in residential areas, parking lots, and banks (e.g., W 4 system [Haritaoglu et al. 2000] and VSAM project [Collins et al. 2000]). In the field of traffic transportation, visual object tracking is also widely used to cope with traffic flow monitoring [Coifman et al. 1998], traffic accident detection [Tai et al. 2004], pedestrian counting [Masoud and Papanikolopoulos 2001], and so on. Moreover, visual object tracking is utilized by the MPEG-4 video compression standard [Sikora 1997] to automatically detect and track moving objects in videos. As a result, more encoding bytes are assigned to moving objects while fewer encoding bytes are for redundant backgrounds. Visual object tracking also has several human-computer interaction applications, such as hand gesture recognition [Pavlovie et al. 1997] and mobile video conferencing [Paschalakis and Bober 2004].

Note that all these applications heavily rely on the information provided by a robust visual object tracking method. If such information is not available, these applications would be no longer valid. Therefore, robust visual object tracking is a key issue to making these applications viable.
In general, a typical visual object tracking system is composed of four modules: object initialization, appearance modeling, motion estimation, and object localization. (i) Object Initialization . This may be manual or automatic. Manual initialization is performed by users to annotate object locations with bounding boxes or ellipses.
In contrast, automatic initialization is usually achieved by object detectors (e.g., face or human detectors). (ii) Appearance Modeling . This generally consists of two components: visual repre-sentation and statistical modeling. Visual representation focuses on how to con-struct robust object descriptors using different types of visual features. Statistical modeling concentrates on how to build effective mathematical models for object identification using statistical learning techniques. (iii) Motion Estimation . This is formulated as a dynamic state estimation problem: x t = f ( x t  X  1 ,v t  X  1 )and z t = h ( x t ,w t ), where x evolution function, v t  X  1 is the evolution process noise, z h denotes the measurement function, and w t is the measurement noise. The task of motion estimation is usually completed by utilizing predictors such as linear regression techniques [Ellis et al. 2010], Kalman filters [Kalman 1960], or particle filters [Isard and Blake 1998; Arulampalam et al. 2002]. (iv) Object Localization . This is performed by a greedy search or maximum a posterior estimation based on motion estimation.

Many issues have made robust visual object tracking very challenging, including (i) low-quality camera sensors (e.g., low frame rate, low resolution, low bit-depth, and color distortion); (ii) challenging factors (e.g., nonrigid object tracking, small-size ob-ject tracking, tracking a varying number of objects, and complicated pose estimation); (iii) real-time processing requirements; (iv) object tracking across cameras with non-overlapping views [Javed et al. 2008]; and (v) object appearance variations (as shown in Figure 1) caused by several complicated factors (e.g., environmental illumination changes, rapid camera motions, full occlusion, noise disturbance, nonrigid shape defor-mation, out-of-plane object rotation, and pose variation). These challenges may cause tracking degradations and even failures.

In order to deal with these challenges, researchers have proposed a wide range of appearance models using different visual representations and/or statistical modeling techniques. These appearance models usually focus on different problems in visual object tracking and thus have different properties and characteristics. Typically, they attempt to answer the following questions.  X  X hat characterstic and/or properties should be tracked (e.g., bounding box, ellipse, contour, articulation block, interest point, and silhouette, as shown in Figure 2)?  X  X hat visual representations are appropriate and robust for visual object tracking?  X  X hat are the advantages or disadvantages of different visual representations for different tracking tasks?  X  X hich types of statistical learning schemes are suitable for visual object tracking?  X  X hat are the properties or characteristics of these statistical learning schemes during visual object tracking?  X  X ow should the camera/object motion be modeled in the tracking process?
The answers to these questions rely heavily on the specific context/environment of the tracking task and the tracking information available to users. Consequently, it is necessary to categorize these appearance models into several task-specific categories and discuss in detail the representative appearance models of each category. Motivated by this consideration, we provide a survey to help readers acquire valuable tracking knowledge and choose the most suitable appearance model for their particular tracking tasks. Furthermore, we examine several interesting issues for developing new appear-ance models.
Figure 3 shows the organization of this survey, which is composed of two modules: visual representation and statistical modeling. The visual represen-tation module concentrates on how to robustly describe the spatiotemporal characteristics of object appearance. In this module, a variety of visual representa-tions are discussed, as illustrated by the tree-structured taxonomy in the left part of
Figure 3. These visual representations can capture various visual information at differ-ent levels (i.e., local and global). Typically, the local visual representations encode the local statistical information (e.g., interest point) of an image region, while the global vi-sual representations reflect the global statistical characteristics (e.g., color histogram) of an image region. For a clear illustration of this module, a detailed literature review of visual representations is given in Section 3.

As shown in the right part of Figure 3, the statistical modeling module is inspired by the tracking-by-detection idea, and thus focuses on using different types of statisti-cal learning schemes to learn a robust statistical model for object detection, including generative, discriminative, and hybrid generative-discriminative ones. In this module, various tracking-by-detection methods based on different statistical modeling tech-niques are designed to facilitate different statistical properties of the object/non-object class. For a clear illustration of this module, a detailed literature review of statistical modeling schemes for tracking-by-detection is given in Section 4.

Moreover, a number of source codes and video datasets for visual object tracking are examined to make them easier for readers to conduct tracking experiments in
Section 5. Finally, the survey is concluded in Section 6. In particular, we additionally address several interesting issues for the future research in Section 6.
In the recent literature, several related surveys (e.g., [Ger  X  onimo et al. 2010; Candamo et al. 2010; Cannons 2008; Zhan et al. 2008; Kang and Deng 2007; Yilmaz et al. 2006;
Forsyth et al. 2006; Sun et al. 2006; Hu et al. 2004; Arulampalam et al. 2002]) of visual object tracking have been made to investigate the state-of-the-art tracking algorithms and their potential applications, as listed in Table I. Among these surveys, the topics of the surveys [Cannons 2008; Yilmaz et al. 2006] are closely related to this article.
Specifically, both of the surveys [Cannons 2008; Yilmaz et al. 2006] focus on low-level tracking techniques using different visual features or statistical learning techniques, and thereby give very comprehensive and specific technical contributions.
The main differences between these two surveys [Cannons 2008; Yilmaz et al. 2006] and this survey are summarized as follows. First, this survey focuses on the 2D appear-ance modeling for visual object tracking. In comparison, the surveys of Cannons [2008] and Yilmaz et al. [2006] concern all the modules shown in Figure 3. Hence, this survey is more intensive, while theirs are more comprehensive. Second, this survey provides a more detailed analysis of various appearance models. Third, the survey of Yilmaz et al. [2006] splits visual object tracking into three categories: point tracking, kernel track-ing, and silhouette tracking (see Figure 7 [Yilmaz et al. 2006] for details); the survey of
Cannons [2008] gives a very detailed and comprehensive review of each tracking issue in visual object tracking. In contrast to these two surveys, this survey is formulated as a general module-based architecture (shown in Figure 3) that enables readers to easily grasp the key points of visual object tracking. Fourth, this survey investigates a large number of state-of-the-art appearance models which make use of novel visual features and statistical learning techniques. In comparison, the other surveys [Cannons 2008;
Yilmaz et al. 2006] pay more attention to classic and fundamental appearance models used for visual object tracking.
The contributions of this survey are as follows. First, we review the literature of vi-sual representations from a feature-construction viewpoint. Specifically, we hierar-chically categorize visual representations into local and global features. Second, we take a tracking-by-detection criterion for reviewing the existing statistical modeling schemes. According to the model-construction mechanisms, these statistical model-ing schemes are roughly classified into three categories: generative, discriminative, and hybrid generative-discriminative. For each category, different types of statistical learning techniques for object detection are reviewed and discussed. Third, we provide a detailed discussion on each type of visual representations or statistical learning tech-niques with their properties. Finally, we examine the existing benchmark resources for visual object tracking, including source codes and databases.
A global visual representation reflects the global statistical characteristics of object appearance. Typically, it can be investigated in the following main aspects: (i) raw pixel representation; (ii) optical flow representation; (iii) histogram representation; (iv) covariance representation; (v) wavelet filtering-based representation; and (vi) ac-tive contour representation. Table II lists several representative tracking methods using global visual representations (i.e., rows 1 X 14).  X  Raw Pixel Representation . As the most fundamental features in computer vision, raw pixel values are widely used in visual object tracking because of their simplicity and efficiency. Raw pixel representation directly utilizes the raw color or intensity values of the image pixels to represent the object regions. Such a representation is simple and efficient for fast object tracking. In the literature, raw pixel representations are usually constructed in the following two forms: vector-based [Silveira and Malis 2007; Ho et al. 2004; Li et al. 2004; Ross et al. 2008] and matrix-based [Li et al. 2007;
Wen et al. 2009; Hu et al. 2010; Wang et al. 2007; Li et al. 2008]. The vector-based representation directly flattens an image region into a high-dimensional vector and often suffers from a small-sample-size problem. Motivated by attempting to alleviate the small-sample-size problem, the matrix-based representation directly utilizes 2D matrices or higher-order tensors as the basic data units for object description due to its relatively low-dimensional property.

However, raw pixel information alone is not enough for robust visual object track-ing. Researchers attempt to embed other visual cues (e.g., shape or texture) into the raw pixel representation. Typically, the color features are enriched by fusing other visual information, such as edge [Wang et al. 2007] and texture [Allili and Ziou 2007].  X  Optical Flow Representation . In principle, optical flow represents a dense field of displacement vectors of all the pixels inside an image region and is commonly used to capture the spatiotemporal motion information of an object. Typically, optical flow has two branches: constant-brightness-constraint (CBC) optical flow [Lucas and Kanade 1981; Horn and Schunck 1981; Werlberger et al. 2009; Sethi and Jain 1987; Salari and Sethi 1990; Santner et al. 2010] and non-brightness-constraint (NBC) optical flow [Black and Anandan 1996; Sawhney and Ayer 1996; Hager and Belhumeur 1998; Bergen et al. 1992; Irani 1999; Wu and Fan 2009]. The CBC optical flow has a constraint on brightness constancy, while the NBC optical flow deals with the situations with varying lighting conditions.
  X  Histogram Representation . Histogram representations are popular in visual object tracking because of their effectiveness and efficiency in capturing the distribution characteristics of visual features inside the object regions. In general, they have two branches: single-cue and multi-cue. (i) A single-cue histogram representation often constructs a histogram to capture (ii) A multi-cue histogram representation aims to encode more information to en- X  Covariance Representation .In order to capture the correlation information of object appearance, covariance matrix representations are proposed for visual representa-tion [Porikli et al. 2006; Tuzel et al. 2006]. According to the Riemannian metrics [Li et al. 2008; Hu et al. 2012], the covariance matrix representations can be divided into two branches: affine-invariant Riemannian metric-based and log-Euclidean
Riemannian metric-based. (i) The affine-invariant Riemannian metric [Porikli et al. 2006; Tuzel et al. 2006] (ii) The log-Euclidean Riemannian metric [Arsigny et al. 2006] formulates the  X  Wavelet Filtering-Based Representation . In principle, a wavelet filtering-based representation takes advantage of wavelet transforms to filter the object region in different scales or directions. For instance, He et al. [2002] utilize a 2D Ga-bor wavelet transform (GWT) for visual representation. Specifically, an object is represented by several feature points with high GWT coefficients. Moreover,
Li et al. [2009] propose a tracking algorithm based on three-layer simplified biologically inspired (SBI) features (i.e., image layer, S1 layer, and C1 layer).
Through the flattening operations on the four Gabor energy maps in the C1 layer, a unified SBI feature vector is returned to encode the rich spatial frequency information.  X  Active Contour Representation . In order to track the nonrigid objects, active contour representations have been widely used in recent years [Paragios and Deriche 2000;
Cremers 2006; Allili and Ziou 2007; Vaswani et al. 2008; Sun et al. 2011]. Typically, an active contour representation (shown in Figure 5) is defined as a signed distance map . where R in and R out , respectively, denote the regions inside and outside the contour
C, and d ( x , y , C ) is a function returning the smallest Euclidean distance from point ( x , y ) to the contour C . Moreover, an active contour representation is associated with an energy function which comprises three terms: internal energy, external energy, and shape energy. The internal energy term reflects the internal constraints on the object contour (e.g., the curvature-based evolution force), the external energy term measures the likelihood of the image data belonging to the foreground object class, and the shape energy characterizes the shape prior constraints on the object contour. 3.1.1. Discussion. Without feature extraction, the raw pixel representation is simple and efficient for visual object tracking. Since only considering the color information on object appearance, the raw pixel representation is susceptible to complicated appear-ance changes caused by illumination variation.

The constant-brightness-constraint (CBC) optical flow captures the field information on the translational vectors of each pixel in a region with the potential assumption of locally unchanged brightness. However, the CBC assumption is often invalid in the complicated situations caused by image noise, illumination fluctuation, and local defor-mation. To address this issue, the non-brightness-constraint optical flow is developed to introduce more geometric constraints on the contextual relationship of pixels.
The single-cue histogram representation is capable of efficiently encoding the sta-tistical distribution information of visual features within the object regions. Due to its weakness in characterizing the spatial structural information of tracked objects, it is often affected by background distractions with similar colors to the tracked objects. In order to capture more spatial information, the spatial-color histogram representation is introduced for visual object tracking. Usually, it encodes the spatial information by either modeling object appearance in a joint spatial-color feature space or taking a patch-division strategy. However, the preceding histogram representations do not consider the shape or texture information of object appearance. As a consequence, it is difficult to distinguish the object from the background with similar color distribu-tions. To alleviate this issue, the shape-texture histogram representation is proposed to integrate shape or texture information (e.g., gradient or edge) into the histogram rep-resentation, leading to the robustness of object appearance variations in illumination and pose.

The advantages of using the covariance matrix representation are as follows: (i) it can capture the intrinsic self-correlation properties of object appearance; (ii) it provides an effective way of fusing different image features from different modalities; (iii) it is low dimensional, leading to the computational efficiency; (iv) it allows for comparing regions of different sizes or shapes; (v) it is easy to implement; (vi) it is robust to illumination changes, occlusion, and shape deformations. The disadvantages of using the covariance matrix representation are as follows: (i) it is sensitive to noisy corruption because of taking pixel-wise statistics; (ii) it loses much useful information, such as texture, shape, and location.

A wavelet filtering-based representation is to encode the local texture information of object appearance by wavelet transform, which is a convolution with various wavelet filters. As a result, the wavelet filtering-based representation is capable of character-izing the statistical properties of object appearance in multiple scales and directions (e.g., Gabor filtering).

An active contour representation is designed to cope with the problem of nonrigid object tracking. Usually, the active contour representation adopts the signed distance map to implicitly encode the boundary information of an object. On the basis of level set evolution, the active contour representation can precisely segment the object with a complicated shape.
As shown in Figure 6, local feature-based visual representations mainly utilize interest points or saliency detection to encode the object appearance information. In general, the local features based on the interest points can be mainly categorized into seven classes: local template-based, segmentation-based, SIFT-based, MSER-based, SURF-based, corner feature-based, feature pool-based, and saliency detection-based. Several representative tracking methods using local feature-based visual representations are listed in rows 15 X 22 of Table II.  X  Local Template-Based . In general, local template-based visual representations repre-sent an object region using a set of part templates. In contrast to the global template-based visual representation, they are able to cope with partial occlusions effectively and model shape articulations flexibly. For instance, a hierarchical part-template shape model is proposed for human detection and segmentation [Lin et al. 2007].
The shape model is associated with a part-template tree that decomposes a human body into a set of part-templates. By hierarchically matching the part-templates with a test image, the proposed part-template shape model can generate a reliable set of detection hypotheses, which are then put into a global optimization framework for final human localization.  X  Segmentation-Based . Typically, a segmentation-based visual representation incor-porates the image segmentation cues (e.g., object boundary [Ren and Malik 2007]) into the process of object tracking, which leads to reliable tracking results. Another alternative is based on superpixel segmentation, which aims to group pixels into perceptually meaningful atomic regions. For example, Wang et al. [2011] construct a local template-based visual representation with the superpixel segmentation, as shown in Figure 7. Specifically, the surrounding region of an object is segmented into several superpixels, each of which corresponds to a local template. By building a local template dictionary based on the mean shift clustering, an object state is predicted by associating the superpixels of a candidate sample with the local templates in the dictionary.  X  SIFT-Based . Usually, a SIFT-based visual representation directly makes use of the
SIFT features inside an object region to describe the structural information of ob-ject appearance. Usually, there are two types of SIFT-based visual representations: (i) individual SIFT point-based and (ii) SIFT graph-based. For (i), Zhou et al. [2009] set up a SIFT point-based visual representation and combine this visual represen-tation with the mean shift for object tracking. Specifically, SIFT features are used to find the correspondences between the regions of interest across frames. Meanwhile, the mean shift procedure is implemented to conduct a similarity search via color his-tograms. By using a mutual support mechanism between SIFT and the mean shift, the tracking algorithm is able to achieve a consistent and stable tracking perfor-mance. However, the tracking algorithm may suffer from background clutter which may lead to a one-to-many SIFT feature matching. In this situation, the mean shift and SIFT feature matching may make mutually contradictory decisions. For (ii), the
SIFT graph-based visual representations are based on the underlying geometric con-textual relationship among SIFT feature points. For example, Tang and Tao [2008] construct a relational graph using SIFT-based attributes for object representation.
The graph is based on the stable SIFT features which persistently appear in sev-eral consecutive frames. However, such stable SIFT features are unlikely to exist in complex situations, such as shape deformation and illumination changes.  X  MSER-Based . An MSER-based visual representation needs to extract the MSER (maximally stable extremal region) features for visual representation [Sivic et al. 2006]. Subsequently, Tran and Davis [2007] construct a probabilistic pixelwise oc-cupancy map for each MSER feature and then perform the MSER feature matching for object tracking. Similar to Tran and Davis [2007], Donoser and Bischof [2006] also use MSER features for visual representation. To improve the stability of MSER features, they take temporal information across frames into consideration.  X  SURF-Based . With the scale-invariant and rotation-invariant properties, the SURF (Speeded Up Robust Feature) is a variant of SIFT [Bay et al. 2006]. It has similar properties to those of SIFT in terms of repeatability, distinctiveness, and robustness, but its computational speed is much faster. Inspired by this fact, He et al. [2009] develop a tracking algorithm using a SURF-based visual representation. By judging the compatibility of local SURF features with global object motion, the tracking algorithm is robust to appearance changes and background clutters.
  X  Corner Feature-Based . Typically, a corner feature-based visual representation makes use of corner features inside an object region to describe the structural properties of object appearance and then matches these corner features across frames for object lo-calization. For instance, Kim [2008] utilizes corner features for visual representation and then performs dynamic multilevel corner feature grouping to generate a set of corner point trajectories. As a result, the spatiotemporal characteristics of object appearance can be well captured. Moreover, Grabner et al. [2007] explore the intrinsic differences between the object and non-object corner features by building a boosting discriminative model for corner feature classification.  X  Local Feature-Pool-Based . Recently, local feature-pool-based visual representations have been widely used in ensemble learning-based object tracking. Usually, they need to set up a huge feature pool (i.e., a large number of various features) for constructing a set of weak learners, which are used for discriminative feature selection. Therefore, different kinds of visual features (e.g., color, local binary pattern [Collins et al. 2005], histogram of oriented gradients [Collins et al. 2005; Liu and Yu 2007; Yu et al. 2008],
Gabor features with Gabor wavelets [Nguyen and Smeulders 2004], and Haar-like features with Haar wavelets [Babenko et al. 2009]) can be used by FSSL in an inde-pendent or interleaving manner. For example, Collins et al. [2005] set up a color fea-ture pool whose elements are linear combinations of the following RGB components: { (  X  the discriminative color features from this pool. Grabner and Bischof [2006] construct an ensemble classifier by learning several weak classifiers trained from the Haar-like features [Viola and Jones 2002], histograms of oriented gradient (HOG) [Dalal and
Triggs 2005], and local binary patterns (LBP) [Ojala et al. 2002]. Babenko et al. [2009] utilize the Haar-like features to construct a weak classifier and then apply an online multiple instance boosting to learn a strong ensemble classifier for object tracking.  X  Saliency Detection-Based . In principle, saliency detection is inspired by the focus-of-attention (FoA) theory [Palmer 1999; Wolfe 1994] to simulate the human perception mechanism for capturing the salient information of an image. Such salient infor-mation is helpful for visual object tracking due to its distinctness and robustness.
Based on saliency detection, researchers apply the biological vision theory to visual object tracking [Toyama and Hager 1996; Mahadevan and Vasconcelos 2009]. More recently, Yang et al. [2007, 2010] construct an attentional visual representation method based on the spatial selection. This visual representation method takes a two-stage strategy for spatial selective attention. At the first stage, a pool of attentional regions (ARs) are extracted as the salient image regions. At the second stage, discriminative learning is performed to select several discriminative attentional regions for visual representation. Finally, the task of object tracking is taken by matching the ARs between two consecutive frames. 3.2.1. Discussion. The aforementioned local feature-based representations use local templates, segmentation, SIFT, MSER, SURF, corner points, local feature pools, or saliency detection, respectively. Due to the use of different features, these represen-tations have different properties and characteristics. By representing an object re-gion using a set of part templates, the local template-based visual representations are able to encode the local spatial layout information of object appearance, resulting in the robustness to partial occlusions. With the power of image segmentation, the segmentation-based visual representations are capable of well capturing the intrinsic structural information (e.g., object boundaries and superpixels) of object appearance, leading to reliable tracking results in challenging situations. Since the SIFT features are invariant to image scaling, partial occlusion, illumination change, and 3D camera viewpoint change, the SIFT-based representation is robust to appearance changes in illumination, shape deformation, and partial occlusion. However, it cannot encode pre-cise information on the objects, such as size, orientation, and pose. The MSER-based representation attempts to find several maximally stable extremal regions for feature matching across frames. Hence, it can tolerate pixel noise but suffers from illumination changes. The SURF-based representation is on the basis of the Speeded Up Robust
Features, which has the properties of scale invariance, rotation invariance, and com-putational efficiency. The corner-point representation aims to discover a set of corner features for feature matching. Therefore, it is suitable for tracking objects (e.g., cars or trucks) with plenty of corner points and sensitive to the influence of nonrigid shape deformation and noise. The feature pool-based representation is strongly correlated with feature selection-based ensemble learning that needs a number of local features (e.g., color, texture, and shape). Due to the use of many features, the process of feature extraction and feature selection is computationally slow. The saliency detection-based representation aims to find a pool of discriminative salient regions for a particular ob-ject. By matching the salient regions across frames, object localization can be achieved.
However, its drawback is to rely heavily on salient region detection, which is sensitive to noise or drastic illumination variation.
In general, the global visual representations are simple and computationally efficient for fast object tracking. Due to the imposed global geometric constraints, the global visual representations are susceptible to global appearance changes (e.g., caused by illumination variation or out-of-plane rotation). To deal with complicated appearance changes, a multi-cue strategy is taken by the global features to incorporate multiple types of visual information (e.g., position, shape, texture, and geometric structure) into the appearance models.

In contrast, the local visual representations are able to capture the local structural object appearance. Consequently, the local visual representations are robust to global appearance changes caused by illumination variation, shape deformation, rotation, and partial occlusion. Since they require the keypoint detection, the interest point-based lo-cal visual representations often suffer from noise disturbance and background distrac-tion. Moreover, the local feature pool-based visual representations, which are typically required by discriminative feature selection, need a huge number of local features (e.g., color, texture, and shape), resulting in a very high computational cost. Inspired by the biological vision, the local visual representations using biological features attempt to capture the salient or intrinsic structural information inside the object regions. This salient information is relatively stable during the process of visual object tracking.
However, salient region features rely heavily on salient region detection which may be susceptible to noise or drastic illumination variation, leading to potentially many feature mismatches across frames.
Recently, visual object tracking has been posed as a tracking-by-detection problem, where statistical modeling is dynamically performed to support object detection.
According to the model-construction mechanism, statistical modeling is classified into three categories, including generative, discriminative, and hybrid generative-discriminative.

The generative appearance models mainly concentrate on how to accurately fit the data from the object class. However, it is very difficult to verify the correctness of the specified model in practice. Besides, the local optima are always obtained during the course of parameter estimation (e.g., expectation maximization). By introducing online-update mechanisms, they incrementally learn visual representations for the foreground object region information while ignoring the influence of the background.
As a result, they often suffer from distractions caused by the background regions with similar appearance to the object class. Table III lists representative tracking-by-detection methods based on generative learning techniques.

In comparison, discriminative appearance models pose visual object tracking as a binary classification issue. They aim to maximize the separability between the object and non-object regions discriminately. Moreover, they focus on discovering highly in-formative features for visual object tracking. For computational consideration, online variants are proposed to incrementally learn discriminative classification functions for the purpose of object or non-object predictions. Thus, they can achieve effective and ef-ficient predictive performances. Nevertheless, a major limitation of the discriminative appearance models is to rely heavily on training sample selection (e.g., by self-learning or co-learning). Table IV lists representative tracking-by-detection methods based on discriminative learning techniques.

The generative and discriminative appearance models have their own advantages and disadvantages and are complementary to each other to a certain extent. Therefore, researchers propose hybrid generative-discriminative appearance models (HGDAMs) to fuse the useful information from the generative and the discriminative models. Due to taking a heuristic fusion strategy, HGDAMs cannot guarantee that the performance of the hybrid models after information fusion is better than those of the individual models. In addition, HGDAMs may add more constraints and introduce more parame-ters, leading to more inflexibility in practice. Table V lists representative tracking-by-detection methods based on hybrid generative-discriminative learning techniques.
Typically, this type of generative appearance model adaptively learns several compo-nents for capturing the spatiotemporal diversity of object appearance. They can be classified into two categories: WSL mixture models and Gaussian mixture models.  X  WSL Mixture Models . In principle, the WSL mixture model [Jepson et al. 2003] contains the following three components: W -component, S -component, and L -component. These three components characterize the interframe variations, the stable structure for all past observations, and outliers, such as occluded pixels, re-spectively. As a variant of Jepson et al. [2003], another WSL mixture model [Zhou et al. 2004] is proposed that directly employs the pixelwise intensities as visual fea-tures instead of using the filter responses (e.g., [Jepson et al. 2003]). Moreover, the L -component is discarded in modeling the occlusion using robust statistics, and an
F -component is added as a fixed template that is observed most often.  X  Gaussian Mixture Models . In essence, the Gaussian mixture models [McKenna et al. 1999; Stauffer and Grimson 2000; Han and Davis 2005; Yu and Wu 2006; Wang et al. 2007] utilize a set of Gaussian distributions to approximate the underlying density function of object appearance, as shown in Figure 8. For instance, an object appearance model [Han and Davis 2005] using a mixture of Gaussian density func-tions is proposed for automatically determining the number of density functions and their associated parameters, including mean, covariance, and weight. Rectangular features are introduced by averaging the corresponding intensities of neighboring pixels (e.g., 3  X  3or5  X  5) in each color channel. To capture a spatialtemporal de-scription of the tracked objects, Wang et al. [2007] present a Spatial-color Mixture of Gaussians (referred to as SMOG) appearance model, which can simultaneously encode both spatial layout and color information. To enhance its robustness and stability, Wang et al. further integrate multiple cues into the SMOG appearance model, including three features of edge points: their spatial distribution, gradient intensity, and size. However, it is difficult for the Gaussian mixture models to select the correct number of components. For example, adaptively determining the com-ponent number k in a GMM is a difficult task in practice. As a result, the mixture models often use ad-hoc or heuristic criteria for selecting k , leading to the tracking inflexibility.

Kernel-based generative appearance models (KGAMs) utilize kernel density estimation to construct kernel-based visual representations and then carry out the mean shift for object localization, as shown in Figure 9. According to the mechanisms used for kernel construction or mode seeking, they may be split into the following six branches: color-driven KGAMs, shape-integration KGAMs, scale-aware KGAMs, nonsymmetric
KGAMs, KGAMs by global mode seeking, and sequential-kernel-learning KGAMs.  X  Color-Driven KGAMs . Typically, a color-driven KGAM [Comaniciu et al. 2003] builds a color histogram-based visual representation regularized by a spatially smooth isotropic kernel. Using the Bhattacharyya coefficient as the similarity metric, a mean shift procedure is performed for object localization by finding the basin of attraction of the local maxima. However, the tracker [Comaniciu et al. 2003] only considers color information and therefore ignores other useful information, such as edge and shape, resulting in the sensitivity to background clutters and occlusions.
Another color-driven KGAM [Leichter et al. 2010] is developed to handle multiview color variations by constructing the convex hull of multiple view-specific reference color histograms.  X  Shape-Integration KGAMs . In general, shape-integration KGAMs aim to build a ker-nel density function in the joint color-shape space. For example, a shape-integration
KGAM [Leichter et al. 2009] is proposed to capture the spatiotemporal properties of object appearance using color and boundary cues. It is based on two spatially normalized and rotationally symmetric kernels for describing the information about the color and object boundary.
  X  Scale-Aware KGAMs . In essence, scale-aware KGAMs are for capturing the spa-tiotemporal distribution information on object appearance at multiple scales. For instance, a scale-aware KGAM [Collins 2003] using the difference of Gaussian-based mean shift features is presented to cope with the problem of kernel scale selection by detecting local maxima of the Difference-of-Gaussian (DOG) scale-space filters formulated as follows.
 where  X  is a scaling factor. Based on a new probabilistic interpretation, another scale-aware KGAM [Nguyen et al. 2007] is proposed to solve a maximum likelihood problem, which treats the coordinates for the pixels as random variables. As a result, the problem of kernel scale selection is converted to that of maximum likelihood optimization in the joint spatial-color space.  X  Nonsymmetric KGAMs . Conventional KGAMs use a symmetric kernel (e.g., a circle or an ellipse), leading to a large estimation bias in the process of estimating the complicated underlying density function. To address this issue, a nonsymmetric
KGAM [Yilmaz 2007] is developed based on the asymmetric kernel mean shift with adaptively varying the scale and orientation of the kernel. In contrast to the symmetric mean shift (only requiring the image coordinate estimate), the nonsymmetric KGAM needs to simultaneously estimate the image coordinates, the scales, and the orientations in a few number of mean shift iterations. Introducing asymmetric kernels can generate a more accurate representation of the underlying density so that the estimation bias is reduced. Furthermore, the asymmetric kernel is just a generalization of the previous radially symmetric and anisotropic kernels.  X  KGAMs by Global Mode Seeking . Due to the local optimization property of the mean shift, large interframe object translations lead to tracking degradations or even failures. In order to tackle this problem, Shen et al. [2007] propose an annealed mean shift algorithm motivated by the success of the annealed importance sampling, which is essentially a way of assigning the weights to the states obtained by multiple simulated annealing runs [Neal 2001]. Here, the states correspond to the object positions while the simulated annealing runs are associated with different bandwidths for the kernel density estimation. The proposed annealed mean shift algorithm aims to make a progressive position evolution of the mean shift as the bandwidths monotonically decrease (i.e., the convergence position of mean shift with the last bandwidth works as the initial position of the mean shift with the next bandwidth), and finally seeks the global mode.  X  Sequential-Kernel-Learning KGAMs . Batch-mode kernel density estimation needs to store the nonparametric representations of the kernel densities, leading to a high computational and memory complexity. To address this issue, Han et al. [2008] develop a sequential kernel density approximation (SKDE) algorithm for real-time visual object tracking. The SKDE algorithm sequentially learns a nonparametric representation of the kernel density and propagates the density modes over time.  X  Discussion . The color-driven kernel-based tracking algorithms mainly take the color information into consideration. However, complicated factors may give rise to drastic tracking degradations, including scale changes, background clutters, occlusions, and rapid object movements. To address this issue, various algorithmic extensions have been made. The aim of scale-aware tracking algorithms is to capture the multiscale spatial layout information of object appearance. Thus, they are capable of effectively completing the tracking task under the circumstance of drastic scaling changes. Moreover, the edge or shape information is very helpful for accurate object localization or resisting background distraction. Motivated by this consideration, shape-driven kernel-based tracking algorithms have been developed to integrate the edge or shape information into the kernel design process.
Normally, the kernel-based tracking algorithms utilize symmetric kernels (e.g., a circle or an ellipse) for object tracking, resulting in a large estimation bias for complicated underlying density functions. To tackle this problem, nonsymmetric kernel-based tracking algorithms are proposed to construct a better representation of the underlying density. Conventional kernel-based tracking algorithms tend to pursue the local model seeking, resulting in tracking degradations or even failures due to their local optimization properties. To address this issue, researchers borrow ideas from both simulated annealing and annealed importance sampling to obtain a feasible solution to global mode seeking. In practice, the factors of computational complexity and memory consumption have a great effect on real-time kernel-based tracking algorithms. Thus, sequential techniques for kernel density estimation have been developed for online kernel-based tracking.
In visual object tracking, a target is usually associated with several underlying sub-spaces, each of which is spanned by a set of basis templates. For convenience, let denote the target and ( a 1 a 2 ... a N ) denote the basis templates of an underlying sub-space. Mathematically, the target  X  can be linearly represented in the following form. where ( c 1 c 2 ... c N ) is the coefficient vector. Therefore, subspace learning-based genera-tive appearance models (SLGAMs) focus on how to effectively obtain these underlying subspaces and their associated basis templates by using various techniques for sub-space analysis. For instance, some SLGAMs utilize eigenvalue decomposition or linear regression for subspace analysis, and others construct multiple subspaces to model the distribution characteristics of object appearance. According to the used techniques for subspace analysis, they can be categorized into two types: conventional and unconven-tional SLGAMs. 4.3.1. Conventional Subspace Models. In general, conventional subspace models can be split into the following two branches: linear subspace models and nonlinear subspace models.  X  Linear Subspace Models . In recent years, linear subspace models (LSMs) have been widely applied to visual object tracking. According to the dimension of the used feature space, LSL can be divided into (i) lower-order LSMs and (ii) higher-order LSMs. The lower-order LSMs [Black and Jepson 1996; Ho et al. 2004; Li et al. 2004;
Skocaj and Leonardis 2003; Wen et al. 2012] need to construct vector-based subspace models (e.g., eigenspace by principal component analysis shown in Figure 10), while the higher-order LSMs needs to build matrix-based or tensor-based subspace models (e.g., 2D eigenspace by 2D principal component analysis and tensor eigenspace by tensor analysis).

For (i), several incremental principal component analysis (PCA) algorithms are proposed to make linear subspace models more efficient. For instance, an incre-mental robust PCA algorithm [Li et al. 2004] is developed to incorporate robust analysis into the process of subspace learning. Similar to Li et al. [2004], Skocaj and
Leonardis [2003] embed the robust analysis technique into the incremental subspace learning framework, which makes a sequential update of the principal subspace. The learning framework considers the weighted influence of both individual images and individual pixels within an image. Unlike the aforementioned robust PCA algorithm based on weighted residual errors, the incremental subspace learning algorithms [Levy and Lindenbaum 2000; Brand 2002] utilize incremental singular value decom-position (SVD) to obtain a closed-form solution to subspace learning. However, these incremental PCA algorithms cannot update the sample mean during subspace learn-ing. To address this issue, a subspace model based on R-SVD (i.e., rank-R singular value decomposition) is built with a sample mean update [Ross et al. 2008]. More-over, Wang et al. [2012] apply partial least square analysis to learn a low-dimensional feature subspace for object tracking. In theory, the partial least square analysis is capable of modeling relations between sets of variables driven by a small number of latent factors, leading to robust object tracking results.

For (ii), a set of higher-order LSMs are proposed to address the small-sample-size problem, where the number of samples is far smaller than the dimension of samples. Therefore, many researchers have begun to build matrix-based or tensor-based subspace models. For instance, Wang et al. [2007] directly analyze the 2D image matrices and construct a 2DPCA-based appearance model for object tracking.
In addition to the foreground information, they also consider background information to avoid the distractions from the background clutters. Moreover, Li et al. [2007, 2010] and Wen et al. [2009] take advantage of online tensor decomposition to construct a tensor-based appearance model for robust visual object tracking.  X  Nonlinear Subspace Models . If the training data lie on an underlying nonlinear man-ifold, the LSM-based tracking algorithms may fail. Therefore, researchers attempt to employ nonlinear subspace learning to capture the underlying geometric infor-mation from target samples. For the robust human tracking, a nonlinear subspace model [Lim et al. 2006] is built using nonlinear dimension reduction techniques (i.e., local linear embedding). As a nonlinear generalization of PCA, a nonlinear subspace model [Chin and Suter 2007] based on kernel principal component analysis (KPCA) is constructed to capture the kernelized eigenspace information from target samples. 4.3.2. Unconventional Subspace Models. In general, unconventional subspace models can also be used for visual object tracking. Roughly, they can be divided into three cate-gories: sparse/nonsparse representation, autoregressive modeling, and multi-subspace learning.  X  Sparse/Nonsparse Representation . Typically, a set of target samples is associated with an underlying subspace spanned by several templates. The likelihood of a can-didate sample belonging to the object class is often determined by the residual be-tween the candidate samples and the reconstructed samples derived from a linear representation. To ensure a sparse linear representation, an tion procedure is adopted to obtain a sparse linear representation solution [Mei and Ling 2009]. Based on the sparse representation technique in Mei and Ling [2009],
Jia et al. [2012] propose a tracking method that further improves the tracking accu-racy by using the block-division spatial pooling schemes (e.g., average pooling, max pooling, and alignment pooling). Moreover, Zhang et al. [2012] present a multitask sparse optimization framework based on a p , q -regularized least-square minimiza-tion cost function. Instead of treating test samples independently, the framework explores the interdependencies between test samples by solving an group sparsity problem. When p = q = 1, the framework degenerates to the popular tracker [Mei and Ling 2009].

To achieve a real-time performance of the 1 tracker [Mei and Ling 2009], a subspace model [Li et al. 2011] based on compressive sensing is built by solving an orthogo-nal matching pursuit (OMP) optimization problem (i.e., random projections), which is about 6,000 times faster than that of Mei and Ling [2009]. Similar to Li et al. [2011], Zhang et al. [2012] make use of compressive sensing (random projections) to generate a low-dimensional compressive feature descriptor, leading to a real-time tracking performance. Alternatively, Bao et al. [2012] take advantage of the popular accelerated proximal gradient (APG) approach to optimize the square minimization problem, which has a quadratic convergence property to ensure the real-time tracking performance. Another way of improving the efficiency of the 1 tracker [Mei and Ling 2009] is to reduce the number of 1 process of evaluating test samples [Mei et al. 2011]. This task is accomplished by estimating the minimal error bound of the likelihood function in particle filtering, resulting in a moderate improvement in tracking efficiency. From a viewpoint of sig-nal compression, Li et al. [2013] construct a compact 3D-DCT object representation based on a DCT subspace spanned by cosine basis functions. With the power of fast
Fourier transform (FFT), the proposed 3D-DCT object representation is capable of ef-ficiently adapting to spatiotemporal appearance variations during tracking, leading to robust tracking results in complicated situations.

On the other hand, the sparsity of the linear representation is unnecessary for robust object tracking as long as an adequate number of template samples are pro-vided, as pointed out in Li et al. [2012]. Therefore, a nonsparse metric weighted linear representation (with a closed-form solution) is proposed to effectively and efficiently model the intrinsic appearance properties of the tracked object [Li et al. 2012].  X  Autoregressive Modeling . Since tracking is a time-dependent process, the target samples from adjacent frames are mutually correlated. To characterize the time dependency across frames, a variety of appearance models are proposed in recent years. For instance, a dynamical statistical shape representation is proposed to cap-ture the temporal correlation information on human silhouettes from consecutive frames [Cremers 2006]. The proposed representation learns a linear autoregressive shape model, where the current silhouette is linearly constrained by the previous silhouettes. The learned shape model is then integrated into the level-set evolution process, resulting in robust segmentation results.  X  Multi-Subspace Learning . In order to capture the distribution diversity of target samples, several efforts establish the double or multiple subspaces for visual rep-resentation. For example, Fan et al. [2008] present a bi-subspace model for visual tracking. The model simultaneously considers two visual cues: color appearance and texture appearance. Subsequently, the model uses a co-training strategy to exchange information between two visual cues. For video-based recognition and tracking, Lee and Kriegman [2005] present a generic appearance model that seeks to set up a face appearance manifold consisting of several submanifolds. Each submanifold cor-responds to a face pose subspace. Furthermore, Kwon and Lee [2010] construct a set of basic observation models, each of which is associated with a specific appear-ance manifold of a tracked object. By combining these basic observation models, a compound observation model is obtained, resulting in a robustness to combinatorial appearance changes.
  X  Active Appearance Models (AAMs) . Usually, AAMs [Hou et al. 2001; Sclaroff and
Isidoro 2003; Matthews and Baker 2004] need to incorporate two components: (a) shape and (b) appearance. For (a), the shape s of an AAM can be expressed as a linear combination of a base shape s 0 and several shape vectors (s s = s coordinates of the v vertices making up the mesh. For (b), the appearance of the AAM can be represented as a linear combination of a base appearance A appearance images ( A i ( x )) m i = 1 such that A ( x ) = pixel lying inside the base mesh s 0 . Therefore, given a test image, the AAM needs to minimize the following cost function for the model fitting. where W ( x ; p ) denotes a piecewise affine warp that transforms a pixel x
AAM. 4.3.3. Discussion. The lower-order linear subspace models (LSMs) usually learn vector-based visual representations for visual object tracking. For tracking efficiency, several incremental LSMs (e.g., incremental PCA) are developed for online visual object track-ing. Since the vector-based visual representations suffer from the small-sample-size problem, researchers construct higher-order matrix-based or tensor-based visual rep-resentations. However, these LSMs potentially assume that object appearance sam-ples lie on an underlying linear manifold. In practice, this assumption is often violated because of complex extrinsic/intrinsic appearance changes. Motivated by this consid-eration, nonlinear subspace models are developed for visual representation. However, the problem with these nonlinear subspace models is that they are computationally expensive due to the nonlinear subspace learning (e.g., nonlinear dimension reduction).
In recent years, unconventional subspace models have been proposed for visual object tracking. These models either enforce the sparsity constraints on the linear represen-tation solution or have different assumptions of subspace properties. However, the sparsity-constrained linear representation typically induces a high optimization com-plexity, which motivates researchers to develop an efficient optimization method (e.g.,
APG and OMP) for a real-time tracking performance. Without the conventional single-subspace assumption, bi-subspace or multi-subspace algorithms are proposed to more precisely model the distribution diversity of the target samples, but at the cost of an additional computation.
In the last decade, boosting-based discriminative appearance models (BDAMs) have been widely used in visual object tracking because of their powerful discriminative learning capabilities. According to the learning strategies employed, they can be categorized into self-learning and co-learning BDAMs. Typically, the self-learning
BDAMs utilize the discriminative information from a single source to guide the task of object/non-object classification, while the co-learning BDAMs exploit the multisource discriminative information for object detection. More specifically, the self-learning
BDAMs first train a classifier over the data from the previous frames and subsequently use the trained classifier to evaluate possible object regions at the current frame.
After object localization, a set of so-called positive and negative samples are selected to update the classifier. These positive and negative samples are labeled by the previously trained classifier. Due to tracking errors, the training samples obtained in the tracking process may be polluted by noise. Therefore, the labels for the training samples are unreliable. As the tracking process proceeds, the tracking error may be accumulated, possibly resulting in the drift problem. In contrast, the co-learning
BDAMs often takes a semisupervised strategy for object/non-object classification (e.g., co-training by building multiple classifiers).

On the other hand, BDAMs also take different strategies for visual representation, that is, single-instance and multi-instance ones. The single-instance BDAMs require precise object localization. If a precise object localization is not available, these tracking algorithms may use suboptimal positive samples to update their corresponding object or non-object discriminative classifiers, which may lead to a model drift problem. More-over, object detection or tracking has its own inherent ambiguity, that is, precise object locations may be unknown even for human labelers. To deal with this ambiguity, the multi-instance BDAMs are proposed to represent an object by a set of image patches around the tracker location. Thus, they can be further classified into single-instance or multi-instance BDAMs. 4.4.1. Self-Learning Single-Instance BDAMs. Based on online boosting [Oza and Russell 2001], researchers have developed a variety of computer vision applications, such as object detection [Viola and Jones 2002] and visual object tracking [Grabner et al. 2006;
Grabner and Bischof 2006]. In these applications, the variants of boosting are invented to satisfy different demands.  X  Conventional BDAMs . As shown in Figure 11, the conventional BDAMs first make a discriminative evaluation of each feature from a candidate feature pool and then select the top-ranked features to conduct the tracking process [Grabner et al. 2006; Grabner and Bischof 2006]. To accelerate the feature selection process, Liu and Yu [2007] utilize gradient-based feature selection to construct a BDAM, but this
BDAM requires an initial set of weak classifiers to be given in advance, leading to difficulty in general object tracking. These BDAMs often perform poorly in capturing the correlation information between features, leading to the redundancy of selected features and the failure to compensate for the tracking error caused by other features.
To address this issue, a feature weighting strategy is adopted to attach all the fea-tures from the feature pool with different weights and then perform weighted fusion for object tracking. For instance, Avidan [2007] constructs a confidence map by pixel classification using an ensemble of online-learned weak classifiers, which are trained by a feature weighting-based boosting approach. Since it needs to store and compute all the features during feature selection, the feature weighting-based boosting ap-proach is computationally expensive. Furthermore, Parag et al. [2008] build a feature weighting-based BDAM for object tracking, where the weak classifiers themselves are adaptively modified to adapt to scene changes. Namely, the parameters of the weak classifiers are adaptively changed instead of replaced when the new data arrive.
The common property of the feature weighting-based BDAMs is that they depend on a fixed number of weak classifiers. However, this property may restrict the flexibility of the trackers in practice.  X  Dynamic Ensemble-Based BDAMs . The conventional BDAMs need to construct a fixed number of weak learners in advance and select these weak learners itera-tively as the boosting procedure proceeds. However, due to the time-varying prop-erty of visual object tracking, they are incapable of effectively adapting to dynamic object appearance changes. To address this problem, a dynamic ensemble-based
BDAM [Visentini et al. 2008] is proposed to dynamically construct and update the set of weak classifiers according to the ensemble error value.  X  Noise-Insensitive BDAMs . To make visual object tracking more robust to noise corrup-tion, a set of BDAMs are proposed in the literature. For instance, Leistner et al. [2009] point out that the convex loss functions typically used in boosting are highly sen-sitive to random noise. To enhance robustness, Leistner et al. [2009] develop a generic BDAM called online GradientBoost, which contains a set of noise insen-sitive loss functions. In essence, this BDAM is an extension of the GradientBoost algorithm [Friedman 2001] and works similarly to the AnyBoost algorithm [Mason et al. 1999].  X  Particle Filtering Integration-Based BDAMs . To make visual object tracking more efficient, researchers embed feature selection into the particle filtering process. For example, Wang et al. [2005] and Okuma et al. [2004] propose two online feature selection-based BDAMs using particle filtering, which generate the candidate state set of a tracked object, and the classification results of AdaBoost is used to determine the final state.  X  Transfer Learning-Based BDAMs . Typically, most existing BDAMs have an underly-ing assumption that the training samples collected from the current frame follow a similar distribution to those from the last frame. However, this assumption is often violated when the drift problem takes place. To address the drift problem, a number of novel BDAMs [Wu et al. 2012; Luo et al. 2011] are proposed to categorize the samples into two classes: auxiliary samples (obtained in the last frames) and target samples (generated in the current frame). By exploring the intrinsic proximity relationships among these samples, the proposed BDAMs are capable of effectively transferring the discriminative information on auxiliary samples to the discriminative learning process using the current target samples, leading to robust tracking results. 4.4.2. Co-Learning Single-Instance BDAMs. In general, the self-learning BDAMs suffer from the model drift problem due to their error accumulation caused by using the self-learning strategy. In order to address this problem, researchers adopt the semisuper-vised learning techniques [Zhu 2005] for visual object tracking. For instance, Grabner et al. [2008] develop a BDAM based on semisupervised online boosting. Its main idea is to formulate the boosting update process in a semi-supervised manner as a fused de-cision of a given prior and an online classier, as illustrated in Figure 12. Subsequently,
Liu et al. [2009] make use of the co-training strategy to online learn each weak clas-sifier in boosting instead of only the final strong classifier. The co-training strategy dynamically generates a series of unlabeled samples for progressively modifying the weak classifiers, leading to robustness to environmental changes. It is proven that the co-training strategy can minimize the boosting error bound in theory.
 4.4.3. Multi-Instance BDAMs. To deal with the underlying ambiguity of object localiza-tion, multiple instance learning is used for object tracking, as illustrated in Figure 13.
In principle, it represents an object by a set of image patches around the tracker location.  X  Self-Learning Multi-Instance BDAMs . For example, Babenko et al. [2009] represent an object by a set of image patches which correspond to an instance bag, with each instance being an image patch. Based on online multiple instance boosting, a tracking system is developed to characterize the ambiguity of object localization in an online manner. The tracking system assumes that all positively labeled instances are truly positive, but this assumption is sometimes violated in practice. Furthermore, the tracking system trains the weak classifiers based only on the current frame and is likely to be overfitting. Instead of equally treating the samples in each bag [Babenko et al. 2009], Zhang et al. [2012] propose an online weighted multiple instance tracker which incorporates the sample importance information (i.e., the samples closer to the current tracker location are of greater importance) into the online multi-instance boosting learning process, resulting in robust tracking results. To characterize the cumulative loss of the weak classifiers across multiple frames instead of the current frame, Li et al. [2010] propose an online multi-instance BDAM using the strong convex elastic net regularizer instead of the 1 regularizer and further prove that the proposed multiple instance learning (MIL) algorithm has a cumulative regret (evaluating the cumulative loss of the online algorithm) of number of boosting iterations.
  X  Co-Learning Multi-Instance BDAMs . Zeisl et al. [2010] and Li et al. [2013] combine the advantages of semisupervised learning and multiple instance learning in the process of designing a BDAM. Semisupervised learning can incorporate more prior information, and multiple instance learning focuses on the uncertainty about where to select positive samples for model updating. 4.4.4. Discussion. As mentioned previously, BDAMs can be roughly classified into self-learning-based and co-learning-based ones. Self-learning-based BDAMs adopt the self-learning strategy to learn object/non-object classifiers. They utilize previously learnt classifiers to select positive and negative training samples and then update the current classifiers with the selected training samples. As a result, tracking errors may be gradually accumulated. In order to tackle this problem, co-learning-based BDAMs are developed to capture the discriminative information from many unlabeled samples in each frame. They generally employ semisupervised co-learning techniques to update the classifiers with both labeled and unlabeled samples in an interleaved manner, resulting in more robust tracking results.

On the other hand, conventional BDAMs take a single-instance strategy for visual representation, that is, one image patch for each object. The drawback of this single-instance visual representation is to rely heavily on exact object localization, without which the tracking performance could be greatly degraded because of the suboptimal training sample selection. To address this issue, MIL is introduced to visual object tracking. It takes into account the inherent ambiguity of object localization, represent-ing an object by a set of image patches around the tracker location. As a result, the
MIL-based tracking algorithms can achieve robust tracking results but may lose accu-racy if the image patches do not precisely capture the object appearance information.
However, all BDAMs need to construct a huge local feature pool for feature selection, leading to a low computational speed. Additionally, they usually obtain a local optimal solution to object tracking because of their focus on local features rather than global features.
SDAMs aim to learn margin-based discriminative SVM classifiers for maximizing in-terclass separability. SDAMs are able to discover and remember informative samples as support vectors for object/non-object classification, resulting in a strong discriminative power. Effective kernel selection and efficient kernel computation play an importance role in designing robust SDAMs. According to the used learning mechanisms, SDAMs are typically based on self-learning SDAMs and co-learning SDAMs.  X  Self-Learning SDAMs . In principle, the self-learning SDAMs are to construct SVM classifiers for object/non-object classification in a self-learning fashion. For example,
Avidan [2004] proposes an offline SDAM for distinguishing a target vehicle from a background. Since the SDAM needs substantial prior training data in advance, ex-tending the algorithm to general object tracking is a difficult task. Following the work in Avidan [2004], Williams et al. [2005] propose a probabilistic formulation-based
SDAM which allows for propagating observation distributions over time. Despite its robustness, the proposed SDAM needs to fully encode the appearance variation information, which is impractical in the tracking process. Tian et al. [2007] utilize an ensemble of linear SVM classifiers to construct a SDAM. These classifiers can be adaptively weighted according to their discriminative abilities during different periods, resulting in robustness to large appearance variations. These SDAMs need to heuristically select positive and negative samples surrounding the current tracker location to update the object/non-object SVM classifier.

To avoid the heuristic and unreliable step of training sample selection (usually requiring accurate estimation of object location), two strategies are adopted in the literature. One is based on a structured output support vector machine (SVM) [Hare et al. 2011; Yao et al. 2012], and the other is based on ranking SVM [Bai and Tang 2012]. The key idea of these two strategies is to integrate the structured constraints (e.g., relative ranking or VOC overlap ratio between samples) into the max-margin optimization problem. For instance, Hare et al. [2011] propose an SDAM based on a kernelized structured SVM, which involves an infinite number of structured loss (i.e., VOC overlap ratio)-based constraints in the structured output spaces. In addition,
Bai and Tang [2012] therefore pose visual object tracking as a weakly supervised ranking problem, which captures the relative proximity relationships between sam-ples towards the true target samples.  X  Co-Learning SDAMs . In general, the co-learning SDAMs rely on semisuper-vised/multikernel learning to construct SVM classifiers for object/non-object clas-sification. For instance, Tang et al. [2007] adopt the co-training SVM technique to design a semisupervised tracker. The disadvantage of this tracker is that it requires several initial frames to generate adequate labeled samples, resulting in the inflex-ibility in practice. Lu et al. [2010] and Yang et al. [2010] design SVM classifiers using multikernel learning (MKL) for visual object tracking. MKL aims to learn an optimal linear combination of different kernels based on different features, including the color information and spatial pyramid histogram of visual words. 4.5.1. Discussion. With the power of max-margin learning, the SDAMs have a good generalization capability of distinguishing foreground and background, resulting in an effective SVM classifier for object localization. However, the process of constructing the SDAMs requires a set of reliable labeled training samples, which is a difficult task due to the influence of some complicated factors, such as noisy corruptions, occlusions, illumination changes, etc. Therefore, most existing SDAMs take a heuristic strategy for training sample collection (e.g., spatial distance based or classification score based), which may lead to the instability or even drift of the tracking process. To address this issue, the structured SVM is applied to model the structural relationships (i.e., VOC overlap ratio) between samples, resulting in a good tracking performance in terms of generalization and robustness to noise. During tracking, a hard assignment of a sample to a class label usually leads to the classification error accumulation. To alleviate the issue, the ranking SVM (a weakly supervised learning method) is also introduced into the tracking process, where the relative ranking information between samples is incorporated into the constraints of max-margin learning.

The common point of the preceding SDAMs is to take a self-learning strategy for object/non-object classification without considering the discriminative information from unlabeled data or multiple information sources. Motivated by this, the co-learning
SDAMs are developed to integrate such discriminative information into the SVM learn-ing process by semisupervised/multikernel learning. More recently, randomized learning techniques (e.g., Random Forest [Breiman 2001; Shotton et al. 2008; Lepetit and Fua 2006] and Ferns [  X  successfully introduced into the vision community. In principle, randomized learning techniques can build a diverse classifier ensemble by performing random input selec-tion and random feature selection. In contrast to boosting and SVM, they are more com-putationally efficient and easier to extend for handling multiclass learning problems. In particular, they can be parallelized so that multicore and GPU implementations (e.g., [Sharp 2008]) can be performed to greatly reduce runtime. However, their tracking performance is unstable for different scenes because of their random feature selection.
Inspired by randomized learning, a variety of RLDAMs are proposed in the field of visual object tracking, including online random forests [Saffari et al. 2009; Santner et al. 2010], random naive Bayes classifiers [Godec et al. 2010], and MIForests [Leistner et al. 2010]. For instance, Godec et al. [2010] develop a visual object tracking algorithm based on online random naive Bayes classifiers. Due to the low computational and memory costs of random naive Bayes classifiers, the developed tracking algorithm has a powerful real-time capability for processing long-duration video sequences. In contrast to online Random Forests [Saffari et al. 2009], the random naive Bayes classifiers have a higher computational efficiency and faster convergence in the training phase.
Moreover, Leistner et al. [2010] present an RLDAM named MIForests which uses multiple instance learning to construct randomized trees and represents the hidden class labels inside target bags as random variables.
Discriminant analysis is a powerful tool for supervised subspace learning. In princi-ple, its goal is to find a low-dimensional subspace with a high interclass separability.
According to the learning schemes used, it can be split into two branches: conventional discriminant analysis and graph-driven discriminant analysis. In general, conventional
DADAMs are formulated in a vector space, while graph-driven DADAMs utilize graphs for supervised subspace learning. 4.7.1. Conventional DADAMs. Typically, conventional discriminant analysis techniques can be divided into one of the following two main branches.  X  Unimodal DADAMs . In principle, unimodal DADAMs have a potential assumption that the data for the object class follow a unimodal Gaussian distribution. For in-stance, Lin et al. [2004] build a DADAM based on incremental Fisher linear discrim-inant analysis (IFLDA). This DADAM models the object class as a single Gaussian distribution and models the background class as a mixture of Gaussian distributions.
Nguyen and Smeulders [2006] use linear discriminant analysis (LDA) for discrimina-tive learning in the local texture feature space obtained by Gabor filtering. However, there is a potential assumption that the distributions of the object and the back-ground classes are approximately Gaussian ones with an equal covariance. Li et al. [2008] construct a DADAM using the incremental 2DLDA on the 2D image matri-ces. Since matrix operations are directly made on these 2D matrices, the DADAM is computationally efficient. Moreover, another way of constructing unimodal DADAMs is by discriminant metric learning, which aims to linearly map the original feature space to a new metric space by a linear projection [Wang et al. 2010; Jiang et al. 2011, 2012]. After discriminant metric learning, the similarity between intraclass samples are minimized, while the distance between interclass samples are maximized, re-sulting in an effective similarity measure for robust object tracking. Note that the above DADAMs are incapable of dealing well with the object and background classes having multimodal distributions.  X  Multimodal DADAMs . In essence, multimodal DADAMs model the object class and the background class as a mixture of Gaussian distributions. For example, Xu et al. [2008] take advantage of adaptive subclass discriminant analysis (SDA) (i.e., an extension to the basic SDA [Zhu and Martinez 2006]) for object tracking. The adaptive
SDA first partitions data samples into several subclasses by a nearest-neighbor clustering and then runs the traditional LDA for each subclass.
 4.7.2. Graph-Driven DADAMs. Researchers utilize the generalized graph-based discrim-inative learning (i.e., graph embedding and graph transductive learning) to construct a set of DADAMs for visual object tracking. Typically, these DADAMs mainly have the following two branches.  X  Graph-Embedding-Based DADAMs . In principle, the goal of graph-embedding-based
DADAMs is to set up a graph-based discriminative model which utilizes the graph-based techniques to embed the high-dimensional samples into a discriminative low-dimensional space for the object/non-object classification. For instance, Zhang et al. [2007] design a DADAM based on graph-embedding-based LDA, which makes a basic assumption that the background class is irregularly distributed with multiple modalities, while the object class follows a single Gaussian distribution. However, this basic assumption does not hold true in the case of complex intrinsic and extrinsic object appearance changes.  X  Graph Transductive Learning-Based DADAMs . In general, graph transductive learning-based DADAMs aim to utilize the power of graph-based semisupervised transductive learning for the likelihood evaluation of the candidate samples belong-ing to the object class. They make use of the intrinsic topological information between the labeled and unlabeled samples to discover an appropriate decision hyperplane for object/non-object classification, as shown in Figure 14. For instance, Zha et al. [2010] develop a tracker based on graph-based transductive learning. The tracker utilizes the labeled samples to maximize the interclass separability and the unla-beled samples to capture the underlying geometric structure of the samples. 4.7.3. Discussion. The goal of DADAMs is to learn a decision hyperplane to separate the object class from the background class. However, the traditional DADAMs perform poorly when both the object class and the background class have multimodal sta-tistical distributions. To overcome this limitation, multimodal discriminant analysis is adopted to explore the training data distributions by data clustering. To make a nonlin-ear extension to the conventional DADAMs, graph-based DADAMs are proposed. These
DADAMs try to formulate the problem of discriminant analysis as that of graph learn-ing, such as graph embedding and graph transductive learning. However, a drawback is that these algorithms need to retain a large amount of labeled/unlabeled samples for graph learning, leading to their impracticality for real tracking applications.
In principle, CLDAMs need to constructed the foreground and background codebooks to adaptively capture the dynamic appearance information from the foreground and background. Recently, Yang et al. [2010a] constructed two codebooks of image patches using two different features X  X GB and LBP features X  X eading to the robustness in handling occlusion, scaling, and rotation. To capture more discriminative information, an adaptive class-specific codebook [Gall et al. 2010] is built for instance tracking. The codebook encodes the information on spatial distribution and appearance of object parts and can be converted to a more instance-specific codebook in a probabilistic way (i.e., probabilistic votes for the object instance). Inspired by the tracking-by-detection idea,
Andriluka et al. [2008] establish object-specific codebooks, which are constructed by clustering local features (i.e., shape context feature descriptors and Hessian-Laplace interest points) extracted from a set of training images. These codebooks are then embedded into a part-based model for pedestrian detection.

Therefore, CLDAMs often consider the discriminative information not only from the background but also from other object instances. However, it is very difficult to construct a universal codebook for different scenes or objects. As a result, it is necessary to collect different training samples for different scenes or objects, leading to inflexibility in practice. In addition, determining the codebook size is a difficult task in practice.
As discussed in Ulusoy and Bishop [2005], the generative and the discriminative mod-els have their own advantages and disadvantages and are complementary to each other to some extent. Consequently, much effort has been made to propose a variety of hybrid generative-discriminative models for combining the benefits of both the genera-tive and the discriminative models in visual object tracking. These hybrid generative-discriminative models aim to combine the generative and the discriminative models in a single-layer or multilayer manner. 4.9.1. HGDAMs via Single-Layer Combination. HGDAMs via single-layer combination aim to fuse the generative and the discriminative models at the same layer. They attempt to fuse the confidence scores of the generative and the discriminative models to generate better tracking results than just using them individually. Typically, they have two kinds of combination mechanisms: decision-level combination and intermediate-level combination.  X  HGDAMs via Decision-Level Combination . In principle, such HGDAMs focus on how to effectively fuse the confidence scores from the generative and the discriminative models. For instance, a linear fusion strategy [Kelm et al. 2006] is taken to combine the log-likelihood of discriminative and generative models for pixel classification. It is pointed out [Kelm et al. 2006] that the performance of the combined generative-discriminative models is associated with a balance between the purely generative and purely discriminative ones. In addition, Lin et al. [2004] propose a HGDAM that is a generalized version of the Fisher Linear Discriminant Analysis. This HGDAM con-sists of two components: the observation submodel and the discriminative submodel.  X  HGDAMs via Intermediate-Level Combination . In principle, the HGDAMs via intermediate-level combination aim to simultaneously utilize both low-level features and high-level confidence scores from the generative and the discriminative models.
For instance, Yang et al. [2009] impose three data-driven constraints on the proposed object appearance model: (1) negative data, (2) bottom-up pairwise data constraints, and (3) adaptation dynamics. As a result, the object appearance model can greatly ameliorate the problem of adaptation drift and can achieve good tracking performances in various nonstationary scenes. Furthermore, Grabner et al. [2007] propose a HGDAM based on a boosting algorithm called Eigenboosting, which re-quires visual features to be discriminative with reconstructive abilities at the same time. In principle, eigenboosting aims to minimize a modified boosting error-function in which the generative information (i.e., eigenimages generated from Haar-like binary basis-functions using robust PCA) is integrated as a multiplicative prior. 4.9.2. HGDAMs via Multilayer Combination. In principle, the goal of the HGDAMs via multilayer combination is to combine the information from the generative and discriminative models at multiple layers. In general, such HGDAMs can be divided into two classes: HGDAMs via sequential combination and HGDAMs via interleaving combination.  X  HGDAMs via Sequential Combination . In principle, the HGDAMs via sequential combination aim to fuse the benefits of the generative and discriminative models in a sequential manner. Namely, they use the decision output of one model as the input of the other model. For example, Everingham and Zisserman [2005] combine generative and discriminative head models. A discriminative tree-structured classifier is trained to make efficient detection and pose estimation over a large pose space with three degrees of freedom. Subsequently, a generative head model is used for the identity verification. Moreover, Shen et al. [2010] develop a generalized kernel-based HGDAM which learns a dynamic visual representation by online SVM learning. Subsequently, the learned visual representation is incorporated into the standard MS tracking pro-cedure. Furthermore, Lei et al. [2008] propose a HGDAM using sequential Bayesian learning. The proposed tracking algorithm consists of three modules. In the first module, a fast relevance vector machine algorithm is used to learn a discriminative classifier. In the second module, a sequential Gaussian mixture model is learned for visual representation. In the third module, a model combination mechanism with a three-level hierarchy is discussed, including the learner combination (at level one), classifier combination (at level two), and decision combination (at level three).  X  HGDAMs via Interleaving Combination . In principle, the goal of the HGDAMs via interleaving combination is to combine the discriminative-generative information in a multilayer interleaving manner. Namely, the decision output of one model is used to guide the learning task of the other model and vice versa. For instance, Yu et al. [2008] utilize a co-training strategy to combine the information from a SVM classifier and a generative multi-subspace model [Lee and Kriegman 2005] in a multilayer interleaving manner.
To evaluate the performance of various tracking algorithms, one needs the same test video dataset, the ground truth, and the implementation of the competing tracking algorithms. Table VI lists the current major resources available to the public.
Another important issue is how to evaluate tracking algorithms in a qualitative or quantitative manner. Typically, qualitative evaluation is based on intuitive perception by human. Namely, if the calculated target regions cover more true object regions and contain fewer non-object pixels, the tracking algorithms are considered to achieve better tracking performances; otherwise, the tracking algorithms perform worse. For a clear illustration, a qualitative comparison of several representative visual representations is provided in Table VII in terms of computational speed as well as handling occlu-sion, illumination variation, and shape deformation capabilities. Moreover, Table VIII provides a qualitative comparison of several representative statistical modeling-based appearance models in terms of computational speed, memory usage, online adaptabil-ity, and discriminability.
 In contrast, a quantitative evaluation relies heavily on the ground truth annotation.
If objects of interest are annotated with bounding boxes, a quantitative evaluation is performed by computing the positional errors of four corners between the tracked bounding boxes and the ground truth. Alternatively, the overlapping ratio between the tracked bounding boxes (or ellipses) and the ground truth can be calculated for the quantitative evaluation: r = A t A g A and A g is the ground truth. The task of ground truth annotation with bounding boxes or ellipses is difficult and time consuming. Consequently, researchers take a point-based annotation strategy for the quantitative evaluation. Specifically, they either record object center locations as the ground truth for simplicity and efficiency or mark several points within the object regions by hand as the ground truth for accuracy (e.g., seven mark points are used in the dudek face sequence [Ross et al. 2008]). This way, we can compute the positional residuals between the tracking results and the ground truth for the quantitative evaluation.
In this work, we have presented a survey of 2D appearance models for visual object tracking. The presented survey takes a module-based organization to review the literature of two important modules in 2D appearance models: visual represen-tations and statistical modeling schemes for tracking-by-detection, as shown in Figure 3. The visual representations focus more on how to robustly describe the spatiotemporalcharacteristics of object appearance, while the statistical modeling schemes for tracking-by-detection put more emphasis on how to capture the gener-ative/discriminative statistical information of the object regions. These two modules are closely related and interleaved with each other. In practice, powerful appearance models depend on not only effective visual representations but also robust statistical models.

In spite of great progress in 2D appearance models in recent years, there are still several issues remaining to be addressed.  X  Balance between Tracking Robustness and Tracking Accuracy. Existing appearance models are incapable of simultaneously guaranteeing tracking robustness and track-ing accuracy. To improve the tracking accuracy, more visual features and geometric constraints are incorporated into the appearance models, resulting in a precise object localization in the situations of particular appearance variations. However, these vi-sual features and geometric constraints can also lower the generalization capabilities of the appearance models in the aspect of undergoing other appearance variations.
On the other hand, to improve the tracking robustness, the appearance models relax some constraints on a precise object localization, thus allowing for more ambiguity of the object localization. Thus, balancing tracking robustness and tracking accuracy is an interesting research topic.  X  Balance between Simple and Robust Visual Features . In computer vision, designing both simple and robust visual features is one of the most fundamental and important problems. In general, simple visual features have a small number of components. As a result, they are computationally efficient but have a low discriminability. In contrast, robust visual features often have a large number of components. Consequently, they are computationally expensive and have sophisticated parameter settings. Therefore, how to keep a good balance between simplicity and robustness plays an important role in visual object tracking.  X  2D and 3D Information Fusion . 2D appearance models are computationally efficient and simple to implement. Due to the information loss of 3D-to-2D projections, 2D appearance models cannot accurately estimate the poses of the tracked objects, lead-ing to sensitivity to occlusion and out-of-plane rotation. In contrast, 3D appearance models are capable of precisely characterizing the 3D pose of the tracked objects, re-sulting in robustness to occlusion and out-of-plane rotation. However, 3D appearance models require a large parameter-search space for 3D pose estimation, resulting in expensive computational costs. Therefore, combining the advantages of 2D and 3D appearance models is a challenging research topic. To accelerate the pose estimation process of the 3D appearance models, a possible solution is to use the tracking results of the 2D appearance models as the initialization of the 3D appearance models. How-ever, how to effectively transfer from 2D tracking to 3D tracking is still an unsolved problem.  X  Intelligent Vision Models . Inspired by the biological vision, a number of high-level salient region features are proposed to capture the salient semantic information of an input image. These salient region features are relatively stable during the process of tracking, while they rely heavily on salient region detection which may be affected by noise or drastic illumination variation. Unreliable saliency detection leads to many feature mismatches across frames. Consequently, it is necessary to build an intelligent vision model that can robustly track these salient region features across frames like what human vision offers.  X  Camera Network Tracking . Typically, the appearance models are based on a single camera, which provides a very limited visual information of the tracked objects. In recent years, several appearance models using multiple overlapping cameras are proposed to fuse different visual information from different viewpoints. These appearance models usually deal with the problem of object tracking in the same scene monitored by different cameras. Often they cannot complete the tracking task of the same object in different but adjacent scenes independently. In this case, tracking in a large camera network needs to be established for a long-term monitoring of the objects of interest. However, how to transfer the target information from one camera subnetwork to another is a crucial issue that remains to be solved.  X  Low-Frame-Rate Tracking . Due to the hardware limits of processing speed and mem-ory usage, mobile devices or microembedded systems usually produce video data with a low frame rate (e.g., abrupt object motion), which makes the tracking job challeng-ing. In this situation, the appearance models need to have good generalization and adaptation capability of online coping with the object appearance variations during tracking. Therefore, it is crucial to construct a robust appearance model with efficient visual modeling and effective statistical modeling for real-time applications.
