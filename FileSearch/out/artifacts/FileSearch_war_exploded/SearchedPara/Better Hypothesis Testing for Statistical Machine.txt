 The need for statistical hypothesis testing for ma-chine translation (MT) has been acknowledged since at least Och (2003). In that work, the proposed method was based on bootstrap resampling and was designed to improve the statistical reliability of re-sults by controlling for randomness across test sets. However, there is no consistently used strategy that controls for the effects of unstable estimates of model parameters. 1 While the existence of opti-mizer instability is an acknowledged problem, it is only infrequently discussed in relation to the relia-bility of experimental results, and, to our knowledge, there has yet to be a systematic study of its effects on hypothesis testing. In this paper, we present a series of experiments demonstrating that optimizer insta-bility can account for substantial amount of variation in translation quality, 2 which, if not controlled for, could lead to incorrect conclusions. We then show that it is possible to control for this variable with a high degree of confidence with only a few replica-tions of the experiment and conclude by suggesting new best practices for significance testing for ma-chine translation. Statistical machine translation systems consist of a model whose parameters are estimated to maximize some objective function on a set of development data. Because the standard objectives (e.g., 1-best BLEU, expected BLEU, marginal likelihood) are not convex, only approximate solutions to the op-timization problem are available, and the parame-ters learned are typically only locally optimal and may strongly depend on parameter initialization and search hyperparameters. Additionally, stochastic optimization and search techniques, such as mini-mum error rate training (Och, 2003) and Markov chain Monte Carlo methods (Arun et al., 2010), 3 constitute a second, more obvious source of noise in the optimization procedure.

This variation in the parameter vector affects the quality of the model measured on both development data and held-out test data, independently of any ex-perimental manipulation. Thus, when trying to de-termine whether the difference between two mea-surements is significant, it is necessary to control for variance due to noisy parameter estimates. This can be done by replication of the optimization procedure with different starting conditions (e.g., by running MERT many times).

Unfortunately, common practice in reporting ma-chine translation results is to run the optimizer once per system configuration and to draw conclusions about the experimental manipulation from this sin-gle sample. However, it could be that a particu-lar sample is on the  X  X ow X  side of the distribution over optimizer outcomes (i.e., it results in relatively poorer scores on the test set) or on the  X  X igh X  side. The danger here is obvious: a high baseline result paired with a low experimental result could lead to a useful experimental manipulation being incorrectly identified as useless. We now turn to the question of how to reduce the probability falling into this trap. The use of statistical hypothesis testing has grown apace with the adoption of empirical methods in natural language processing. Bootstrap techniques (Efron, 1979; Wasserman, 2003) are widespread in many problem areas, including for confidence estimation in speech recognition (Bisani and Ney, 2004), and to determine the significance of MT re-sults (Och, 2003; Koehn, 2004; Zhang et al., 2004; Zhang and Vogel, 2010). Approximate randomiza-tion (AR) has been proposed as a more reliable tech-nique for MT significance testing, and evidence sug-gests that it yields fewer type I errors (i.e., claiming a significant difference where none exists; Riezler and Maxwell, 2005). Other uses in NLP include the MUC-6 evaluation (Chinchor, 1993) and pars-ing (Cahill et al., 2008). However, these previous methods assume model parameters are elements of the system rather than extraneous variables.
Prior work on optimizer noise in MT has fo-cused primarily on reducing optimizer instability (whereas our concern is how to deal with optimizer noise, when it exists). Foster and Kuhn (2009) mea-sured the instability of held-out BLEU scores across 10 MERT runs to improve tune/test set correlation. However, they only briefly mention the implications of the instability on significance. Cer et al. (2008) explored regularization of MERT to improve gener-alization on test sets. Moore and Quirk (2008) ex-plored strategies for selecting better random  X  X estart points X  in optimization. Cer et al. (2010) analyzed the standard deviation over 5 MERT runs when each of several metrics was used as the objective function. In our experiments, we ran the MERT optimizer to optimize BLEU on a held-out development set many times to obtain a set of optimizer samples on two dif-ferent pairs of systems (4 configurations total). Each pair consists of a baseline system (System A) and an  X  X xperimental X  system (System B), which previous research has suggested will perform better.

The first system pair contrasts a baseline phrase-based system (Moses) and experimental hierarchi-cal phrase-based system (Hiero), which were con-structed from the Chinese-English BTEC corpus (0.7M words), the later of which was decoded with the cdec decoder (Koehn et al., 2007; Chiang, 2007; Dyer et al., 2010). The second system pair con-trasts two German-English Hiero/cdec systems con-structed from the WMT11 parallel training data (98M words). 4 The baseline system was trained on unsegmented words, and the experimental system was constructed using the most probable segmenta-tion of the German text according to the CRF word segmentation model of Dyer (2009). The Chinese-English systems were optimized 300 times, and the German-English systems were optimized 50 times.
Our experiments used the default implementation of MERT that accompanies each of the two de-coders. The Moses MERT implementation uses 20 random restart points per iteration, drawn uniformly from the default ranges for each feature, and, at each iteration, 200-best lists were extracted with the cur-rent weight vector (Bertoldi et al., 2009). The cdec MERT implementation performs inference over the decoder search space which is structured as a hyper-graph (Kumar et al., 2009). Rather than using restart points, in addition to optimizing each feature inde-pendently, it optimizes in 5 random directions per it-eration by constructing a search vector by uniformly sampling each element of the vector from (  X  1 , 1) and then renormalizing so it has length 1. For all systems, the initial weight vector was manually ini-tialized so as to yield reasonable translations.
Results are reported using BLEU (Papineni et al., 2002), M ETEOR 5 (Banerjee and Lavie, 2005; Denkowski and Lavie, 2010), and TER (Snover et al., 2006). 4.1 Extraneous variables in one system In this section, we describe and measure (on the ex-ample systems just described) three extraneous vari-ables that should be considered when evaluating a translation system. We quantify these variables in terms of standard deviation s , since it is expressed in the same units as the original metric. Refer to Table 1 for the statistics.
 Local optima effects s dev The first extraneous variable we discuss is the stochasticity of the opti-mizer. As discussed above, different optimization runs find different local maxima. The noise due to this variable can depend on many number of fac-tors, including the number of random restarts used (in MERT), the number of features in a model, the number of references, the language pair, the portion of the search space visible to the optimizer (e.g. 10-best, 100-best, a lattice, a hypergraph), and the size of the tuning set. Unfortunately, there is no proxy to estimate this effect as with bootstrap resampling. To control for this variable, we must run the optimizer multiple times to estimate the spread it induces on the development set . Using the n optimizer samples, with m i as the translation quality measurement of the development set for the i th optimization run, and m is the average of all m i s, we report the standard deviation over the tuning set as s dev : A high s dev value may indicate that the optimizer is struggling with local optima and changing hyperpa-rameters (e.g. more random restarts in MERT) could improve system performance.
 Overfitting effects s test As with any optimizer, there is a danger that the optimal weights for a tuning set may not generalize well to unseen data (i.e., we overfit). For a randomized optimizer, this means that parameters can generalize to different degrees over multiple optimizer runs. We measure the spread in-duced by optimizer randomness on the test set met-ric score s test , as opposed to the overfitting effect in isolation. The computation of s test is identical to s dev except that the m i s are the translation metrics cal-culated on the test set . In Table 1, we observe that s test &gt; s dev , indicating that optimized parameters are likely not generalizing well.
 Test set selection s sel The final extraneous vari-able we consider is the selection of the test set it-self. A good test set should be representative of the domain or language for which experimental ev-idence is being considered. However, with only a single test corpus, we may have unreliable results because of idiosyncrasies in the test set. This can be mitigated in two ways. First, replication of ex-periments by testing on multiple, non-overlapping test sets can eliminate it directly. Since this is not always practical (more test data may not be avail-abile), the widely-used bootstrap resampling method (  X  3) also controls for test set effects by resampling multiple  X  X irtual X  test sets from a single set, making it possible to infer distributional parameters such as the standard deviation of the translation metric over (very similar) test sets. 6 Furthermore, this can be done for each of our optimizer samples. By averag-ing the bootstrap-estimated standard deviations over optimizer samples, we have a statistic that jointly quantifies the impact of test set effects and optimizer instability on a test set. We call this statistic s Different values of this statistic can suggest method-ological improvements. For example, a large s sel in-dicates that more replications will be necessary to draw reliable inferences from experiments on this test set, so a larger test set may be helpful.
To compute s sel , assume we have n indepen-dent optimization runs which produced weight vec-tors that were used to translate a test set n times. The test set has ` segments with references R =  X  R 1 , R 2 , . . . , R `  X  . Let X =  X  X 1 , X 2 , . . . , X where each X i =  X  X i 1 , X i 2 , . . . , X i`  X  is the list of translated segments from the i th optimization run list of the ` translated segments of the test set. For each hypothesis output X i , we construct k bootstrap replicates by drawing ` segments uniformly, with re-placement , from X i , together with its corresponding reference. This produces k virtual test sets for each optimization run i . We designate the score of the j th virtual test set of the i th optimization run with m ij . 4.2 Comparing Two Systems In the previous section, we gave statistics about the distribution of evaluation metrics across a large number of experimental samples (Table 1). Because of the large number of trials we carried out, we can be extremely confident in concluding that for both pairs of systems, the experimental manipulation ac-counts for the observed metric improvements, and furthermore, that we have a good estimate of the magnitude of that improvement. However, it is not generally feasible to perform as many replications as we did, so here we turn to the question of how to compare two systems, accounting for optimizer noise, but without running 300 replications.
We begin with a visual illustration how opti-mizer instability affects test set scores when com-paring two systems. Figure 1 plots the histogram of the 300 optimizer samples each from the two BTEC Chinese-English systems. The phrase-based system X  X  distribution is centered at the sample mean 48.4, and the hierarchical system is centered at 49.9, a difference of 1.5 BLEU, correspond-ing to the widely replicated result that hierarchi-cal phrase-based systems outperform conventional phrase-based systems in Chinese-English transla-tion. Crucially, although the distributions are dis-tinct, there is a non-trivial region of overlap, and experimental samples from the overlapping region could suggest the opposite conclusion!
To further underscore the risks posed by this over-lap, Figure 2 plots the relative frequencies with which different BLEU score deltas will occur, as a function of the number of optimizer samples used. When is a difference significant? To determine whether an experimental manipulation results in a statistically reliable difference for an evaluation met-ric, we use a stratified approximate randomization (AR) test. This is a nonparametric test that approxi-mates a paired permutation test by sampling permu-tations (Noreen, 1989). AR estimates the probability ( p -value) that a measured difference in metric scores arose by chance by randomly exchanging sentences between the two systems. If there is no significant difference between the systems (i.e., the null hypoth-esis is true), then this shuffling should not change the computed metric score. Crucially, this assumes that the samples being analyzed are representative of all extraneous variables that could affect the out-come of the experiment. Therefore, we must include multiple optimizer replications. Also, since metric scores (such as BLEU) are in general not compa-rable across test sets, we stratify, exchanging only hypotheses that correspond to the same sentence.
Table 2 shows the p -values computed by AR, test-ing the significance of the differences between the two systems in each pair. The first three rows illus-trate  X  X ingle sample X  testing practice. Depending on luck with MERT, the results can vary widely from insignificant (at p &gt; . 05 ) to highly significant.
The last two lines summarize the results of the test when a small number of replications are performed, as ought to be reasonable in a research setting. In this simulation, we randomly selected n optimizer outputs from our large pool and ran the AR test to determine the significance; we repeated this proce-dure 250 times. The p -values reported are the p -values at the edges of the 95% confidence interval (CI) according to AR seen in the 250 simulated com-parison scenarios. These indicate that we are very likely to observe a significant difference for BTEC at n = 5 , and a very significant difference by n = 50 (Table 2). Similarly, we see this trend in the WMT system: more replications leads to more significant results, which will be easier to reproduce. Based on the average performance of the systems reported in Table 1, we expect significance over a large enough number of independent trials. No experiment can completely control for all pos-sible confounding variables. Nor are metric scores (even if they are statistically reliable) a substitute for thorough human analysis. However, we believe that the impact of optimizer instability has been ne-glected by standard experimental methodology in MT research, where single-sample measurements are too often used to assess system differences. In this paper, we have provided evidence that optimizer instability can have a substantial impact on results. However, we have also shown that it is possible to control for it with very few replications (Table 2). We therefore suggest:  X  Replication be adopted as standard practice in  X  Replication of optimization (MERT) and test  X  Use of the median system according to a trusted
