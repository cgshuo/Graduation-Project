 REGULAR PAPER Slobodan Ribari  X  c  X  Tomislav Hrka  X  c Abstract In this paper, we present the model and simulator of a multi-agent sys-tem (MAS) for temporally rich domains. The theoretical foundations of the model include a knowledge representation scheme based on an original modification of Petri nets, called Petri nets with time tokens (PNTTs), as well as temporal reason-ing based on the extension of Allen X  X  temporal logic. The proposed MAS, called TeMAS, has a hierarchical structure, consisting of different levels, where each level contains clusters of agents. A paradigm of hierarchically organized black-boards is used for the communication among agents, clusters, as well as levels. We describe an object-oriented implementation of a program simulator of TeMAS and give an example of the use of the simulator for interpretation of events in a dynamic scene.
 Keywords Multi-agent system  X  Petri nets  X  Knowledge representation  X  Temporal reasoning  X  Simulation 1 Introduction Multi-agent systems (MASs) are becoming an increasingly important area in many fields of computer science, for example, robotics [ 29 ], image interpretation and computer vision [ 27 , 41 , 50 ], artificial life [ 30 , 46 ], web applications [ 21 ]and many business and industrial applications [ 1 , 16 , 48 ], as well as in many other fields of artificial intelligence [ 47 ].
 cordingtoFerber[ 15 ], an intelligent agent, as a basic building block of a MAS, can be defined as a physical or virtual entity that (i) is capable of acting in an environment; (ii) can communicate directly with other agents; (iii) is driven by a set of tendencies; (iv) possesses resources of its own; (v) is capable of perceiving its environment; (vi) has only a partial representation of this environment; (vii) possesses skills and can offer services; and (viii) might be able to reproduce itself. environment and that is capable of flexible autonomous action in this environ-pro-activity, and social ability [ 54, 57].
 where E is the environment, i.e., a space that generally has a volume; O isaset of movable or stationary objects situated in E ; A is a set of agents that can be considered as specific objects ( A  X  O ) representing active entities in the system; R is a set of relations among the objects and agents; Op is a set of the operations of agents, such as perceiving, transforming, and manipulating objects; and LoU is a set of so-called laws of the universe that are common for E . This paper pro-poses a model of a MAS called TeMAS (temporal MAS). This model is primarily intended to be a building block used in dynamic computer-vision systems that are the central component of intelligent systems performing sophisticated opera-tions such as motion tracking, reasoning, and interpreting the behavior of several moving objects allocated in the scene. The above also includes event prediction in temporally rich domains, where temporally rich domains, according to the defini-tion given by Pellavin and Allen [ 38], can be understood as domains that include concurrent actions that take time, the simultaneous occurrence of many actions, and domains with external events or natural forces.
 computer-vision systems: first, the theoretical foundation of the reasoning agent based on an original high-level Petri-net model; second, the architecture of the hierarchically organized MAS with a paradigm of hierarchically organized black-boards used for the communication among agents; and finally, the object-oriented MAS simulator based on the two aforementioned aspects. 2 Related work In the past three decades, different formal models have been proposed in an at-tempt to provide an effective solution to the problem of crisp or fuzzy temporal knowledge representation and reasoning: situation calculus [ 31 ], time specialist [22 ], interval-based temporal logic [ 2], formal logic of plans [ 38], time maps [ 12], metric constraints [ 13 ], timed, time and temporal Petri nets [ 9, 20, 32, 33, 49], fuzzy time Petri nets [ 36 ], and a point-interval logic [ 59]. In the paper [ 3],atem-poral argumentation system is proposed. The authors give an alternative temporal logic allowing interval as well as instant-based temporal references, which im-proves in several aspects the widely used Allen X  X  logic of intervals. In the paper [26 ], the elements of the spatio-temporal knowledge representation for dynamic environments are presented, where an event is defined as a finite set of objects that move in a given time along specified routes. The pattern is a set of  X  X imilar X  events. Similarity based on the mathematical notion of similitude is used. In the paper [ 58], the temporal index is adopted to realize the logical unified temporal data view and the seamless conjunction of non-temporal data and temporal data, and the unified temporal information model of temporal knowledge and temporal data has been established with temporal attribute.
 system is its simulation on one of the simulation platforms [ 28, 51]. In Fig. 1,we propose the taxonomy of MAS simulation platforms and the corresponding MAS models related to the wider focus of our research. The taxonomy is based on the following characteristics: domain dependency, time representation, and the ability of time reasoning.
 independent and domain-dependent platforms. One aspect of a MAS simulator is the way that time is represented. The existing domain-independent MAS sim-ulators generally deal with time in an implicit way: agents are first modeled as separate entities with appropriate abilities, and then integrated into a MAS using a particular activation regime or scheduling algorithm [ 17]. This scheduling al-gorithm is responsible for the temporal order of the agent X  X  actions, but it does not model the duration of the agent X  X  actions and does not enable time reason-ing. For example, in the Swarm simulation platform [ 35] the user defines how the time is simulated by writing a schedule of activities. The schedule contains a set of actions in a specified order. Individual actions take place at some specific time points, and time advances only by events scheduled at successive times. A very similar situation occurs for the time representation in the RePast simulator [ 11]. RePast behaves as a discrete-event simulator whose quantum unit of time is called a tick . Each event is scheduled for execution in a corresponding tick, so that a relative ordering of the events is enabled. In the MASON simulation platform [ 4], time is also represented implicitly by means of the so-called Discrete Event Sched-uler, which permits agents to perform actions in time. In the SeSAm simulation platform [ 24], the activity of an agent at any moment of time is determined either according to a so-called skeletal plan associated with each agent, or by firing a rule with a higher priority (in order to react to emergency situations). Ferber developed a BRIC language for modeling and simulating intelligent agents and MASs [ 15]. In BRIC, the agent X  X  activities are modeled by means of Colored Petri Nets, but they are not time related. Therefore, the order of activities is determined by the Colored Petri Net execution rules.
 platform called MASS, which includes an explicit model of time. In MASS, agents use a hierarchical task structure for the representation of their goals and capabili-ties. Goals are decomposed into sub-goals, and sub-goals are achieved by means of methods . One of the attributes associated with each method is its temporal du-ration.
 example, in StarLogo [ 42], which is intended for the simulation of massively par-allel systems, the activities of agents and their relative ordering are specified by means of a modification of the Logo programming language. The CORMAS sim-ulator [ 25], intended for the modeling of renewable resources in natural and social dynamics, also employs a discrete-event simulation and a scheduler of the agent X  X  tinuous two-or three-dimensional worlds. The time line is divided by means of discrete time points, where differential equations are solved during each step of the simulation. Weyns and Holvoet proposed a Colored Petri Net based model for the space-situated agents where time is implicitly represented [ 55 , 56]. tion, but most of them do not have a temporal reasoning ability. The BREVE platform for the simulation of decentralized systems and artificial life [ 23]hasa continuous time representation and enables the scheduling of events for execution at specified time points.
 sentation and a temporal reasoning ability. Temporal reasoning allows a selection of the agent X  X  actions based on temporal considerations. The REAKT architecture is built around a temporal blackboard, which provides the storage and manage-ment of objects used by a set of agents. Each object instance is defined by its attributes or slots. There are two types of slots: static slots, the value of which does not change over time; and temporal slots, the value of which changes over time. Temporal constraints among data are kept in a temporal graph named the Time Map, which is managed by a module called the Time Map Manager. A their extreme time points: (begin, end). Thus, the time corresponding to an event can be exactly known (both the time points of the beginning and end are known, which is usually the case with past events), partially known (the time of the begin-ning is known, but the end time is undefined; this is usually the case with current events), known with imprecision (an event starts or finishes at some point within an interval) and temporally dependent (the starting or ending time of an event de-pends on other temporal facts). The temporal reasoning in REAKT is performed by means of rule-based agents.
 tion platform can be classified as domain specific, with explicit time representation and reasoning. 3 Theory outline for the proposed MAS In this section, we briefly describe the theoretical principles that are necessary for an understanding of the proposed MAS model. The theory includes a description of high-level Petri nets, called Petri nets with time tokens (PNTTs) [ 43], as well as some extensions of the original Allen X  X  time interval logic, by means of which the relations between the time point and time interval, as well as the relations between two time points can be described. 3.1 Petri nets with time tokens 3.1.1 Definition of the PNTTs PNTTs are high-level Petri nets based on the p -timed net model (which associates with each place p the time corresponding to the duration of an action or state) and a new concept of time tokens. A time token, like a token in the Colored Petri Nets [18 , 19], has  X  X ndividuality, X  i.e., it carries inherent information about the current time of its detainment at the visiting places during the execution of the net. In the definition given earlier, P , T , I ,and O are the components of ordi-P ={ p m  X  0, I is an input function I : T  X  P  X  , a mapping from transitions into bags of places, O is an output function O : T  X  P  X  , a mapping from transitions into bags of places, P  X  T = X  .
 time delays ( Q  X  is the set of non-negative rational numbers). A  X ( p i )  X  ( Q  X   X  X  ) corresponds to the time duration of some action or state associated with the place p .Thevalue  X ( p i ) can be considered as a time delay of tokens at the place p i . delays TD ={  X ( p 1 ),  X  ( p 2 ),..., X ( p n ) } .
 1  X  r &lt;  X  , is a set of time tokens. A time token m k  X  1 token m k i (see Sect. 3.1.3).
 product, where P is a set of places, TD is a set of time delays, and  X  denotes the the sequence of places and time delays that is assigned to the time token m k i as a consequence of the execution of the PNTT. It determines the time track for m k i that is formed on the basis of visiting places and the time delays of all time tokens that are ancestors of m k i .
 It determines the current amount (current accumulated time) of detaining time for the token m k i  X  M that is obtained during the execution of the PNTT. An initial time accumulation  X  0 can be assigned to a time token that is initially distributed in the PNTT. It can be interpreted as an initial extension of the time interval of the corresponding place corresponding to this time token.
 carries information about the initial time accumulation, about the time of detain-ment of its ancestor time tokens at the visiting places and about the current accu-mulated time. This information (the time track and the current accumulated time) will be used for temporal reasoning. In general, the structure of a time token can be where  X  c is the current accumulated time. The structure of a time token is graphi-cally depicted in Fig. 2.
 ( p power set of M . With 0 we denote the initial marking, i.e., the initial distribution of time tokens in the places of the PNTT. 3.1.2 PNTT graph The PNTT can be represented by a bipartite directed multigraph. The circles rep-resent places, while the bars represent transitions. The directed arcs connecting the places and transitions are defined by means of an input function I , while the arcs directed from the transitions to places are defined by an output function O . Multi-ple input places and multiple output places are represented by multiple arcs. The time tokens are represented by dots (  X  ) in the places. Due to the  X  X ndividuality X  of tokens, every dot is labeled with m k i  X  M ; i = 1 , 2 ,..., r ; k = 1 , 2 ,... 3.1.3 Execution rules for PNTT Generally, tokens give dynamical properties to the PN, and they are used to define the execution of a PN: by firing an enabled transition t j , tokens are removed from its input places (elements of I ( t j ) ). Simultaneously, new tokens are created and distributed to its output places (elements of O ( t j ) )[ 39]. In the PNTT, a transi-tion is enabled if each of its input places has at least as many tokens in it as arcs from the place to the transition and if the time of detainment of these tokens in the places has elapsed. Such tokens are called movable time tokens. The firing of an enabled transition in the PNTT is performed automatically and immediately after the transition is enabled. The number of tokens at the input and output places is changed in accordance with the basic definition for an original PN. The firing of the enabled transition in the PNTT removes time tokens from its input places and simultaneously generates time tokens X  X uccessors in its output places. Due to the individuality of time tokens, the time tokens at output places can be viewed as new tokens that have additional (new) information about the time of stay at the corresponding (input) places. Each time token carries a specific history of the execution of the PNTT, and its history depends on the time token X  X ncestor X  X  path through the PNTT. If the number of movable time tokens at the input place p i ber of appearances of p i in the bag I ( t j ) ), then different selection strategies for choosing the time tokens X  X ncestors that will be involved in the firing process can be used. For example, (i) the random selection of the time tokens; (ii) the last-in-first-out (LIFO) strategy, based on the arrival of the tokens into the place; (iii) the first-in-first-out (FIFO) strategy; or (iv) the selection of the time tokens with the stormiest (time) history, i.e., the time tokens with the most complex structure. In our temporal knowledge representation scheme, we use strategy (iv) to specify the time tokens X  X ncestors because these time tokens contain the richest informa-tion needed for temporal reasoning, and they are used for the generation of time tokens X  X uccessors.
 Example 1 Figure 3a shows the marked PNTT graph defined as: P = { p O ( t  X  the time of detainment of the tokens at places p 1 and p 2 has elapsed, the time tokens become movable, transition t 2 is enabled, and it fires automatically. The firing of transition t 2 results in a new marking, where the old time tokens are re-moved from its input places and their successors are created at its output places. tokens X  X uccessors are shown in Fig. 3b and e, respectively. The new marking time token m 1 1 , and both of them have the same structure. Let us suppose that  X  =  X  (the time token m 1 4 has already been movable), the transition t 1 is enabled and fires automatically. The new marking is depicted in Fig. 3c. The corresponding structures of the time tokens are shown in Fig. 3f. 3.1.4 Formal analysis of the PNTT A formal analysis of the PNTT can be achieved by means of modified, well-elaborated procedures for ordinary Petri nets [ 39 , 40]. In general, analysis prob-lems for Petri nets, such as safeness, boundedness, conservation, liveness, reacha-bility, etc., are based on a reachability tree analysis. Due to the specific application of our model, instead of the reachability tree with additional time information, we have proposed the firing diagram. The firing diagram is represented by a two-dimensional space: discrete-time and time tokens, in which the visited places and fired transitions are specified for each time token. In the firing diagram, the x -axis represents the discrete time, while the y -axis contains the time tokens. From the firing diagram, one can see the time detainment of time tokens, the sequence of firing-enabled transitions, as well as the reached states or the actions in the model, where the indexes for  X  indicate the indexes of the places. The firing diagram depicted in Fig. 4 shows the execution of the PNTT from Example 1. 3.2 Temporal logic Since our goal is the design of a MAS for reasoning in temporally rich domains, in this section we briefly describe the basic time primitives of the model. Two basic temporal primitives are used: a time point (also referred to as the date [ 14 ]) and a time interval [ 2]. Due to the specific application areas of our model, we have used the concepts of crisp time points and intervals, as well as crisp temporal relations. poral relations [ 2],whichareshowninTable 1. By letting one of the time intervals degenerate to a time point, it is possible to define five relations between the time point and the time interval (Table 2)[3]. By letting both of the time intervals de-generate to time points, three additional relations between the time points can be obtained (Table 3).
 time points, fuzzy intervals, and fuzzy relations [ 10, 14, 44]. 3.3 Temporal knowledge scheme The temporal knowledge scheme KRPTT is defined as follows: KRPTT = ( PNTT , TLM , X , X , F ) , where the PNTT is a Petri net with time tokens, while TLM is a module based on the extension of Allen X  X  temporal logic. A function  X  : P  X  ( D  X  C  X  : T  X  (  X  C set of events and control events C t . The meaning of C p and C t will be ex-plained in the context of time-dependent event-driven reasoning. The functions  X  and  X  give the semantic interpretation of the model. The set F is a set of flags. In and p j denote elements from P as places potentially with time tokens that have to be tested by the TLM, according to the temporal relation tr . The evaluation of the tr is based on information that is carried by the time tokens from the places p i and p j . The temporal relation tr is from a set of 13 possible Allen X  X  time-interval relations (Table 1)definedin[ 2], five relations between time point and time inter-val (Table 2) and three relations between time point and time point (Table 3). In flags, tr can be compounded by using the logical connective OR .The p k ,..., p c in the flag f i specify the places (called control places) in which the TLM sets to-kens depending on the result of the evaluation of tr . These tokens, called control tokens, are treated as time tokens with zero current accumulated time (time tokens without a time history).
 of the system.
 is capable of inferring about the temporal relations between two time intervals, between the time point and the time interval, and finally between two time points. The evaluation of tr is activated when one of the time tokens is available in the specified place and when the time of its stay in the place has elapsed, i.e., the token becomes movable (for temporal relations &lt; (before) and &gt; (after)) or when both time tokens are available and movable at the places specified by TLM. The TLM is data driven, and the transfer of the copies of time tokens ac-tivates the evaluation of the temporal relation. Immediately after the evaluation, if the relation tr is satisfied, the control tokens are transferred to control places p ,..., p 3.3.1 Reasoning The time reasoning in the KRPTT, which allows an agent to infer about the tempo-ral relations and to achieve time-dependent goals, is based on the dynamical prop-erties that are manifested by the execution of the PNTT. The process of the rea-soning in the proposed representation scheme is called the time-dependent event-driven reasoning. It includes not only the ability to reason about time relations between actions and/or states in the temporally rich domains but also the ability to determine the subsequent activities or states based on initial or current activ-ities (states) and temporal information associated with each activity (state). The reasoning process can be described as follows. The input is the initial marking of the KRPTT representation of the world. It determines the current activities (states) and the temporal relations among the activities (states). As time proceeds, the en-abled transitions are automatically fired and time tokens are distributed through the PNTT. Depending on the path through the PNTT and the time duration of the activities (states), each time token carries a history of the execution of the PNTT. The firing sequences are additionally controlled by the TLM in such a way that it tests and evaluates the temporal relations between activities (states), which cor-respond to the places specified by flags. According to the results of the temporal correspond to the control states c p  X  C p ) specified by the flags. These tokens have an influence on the result of the firing sequence in the PNTT. The combina-tion of the time tokens associated with activities (states) and control tokens, both present at the same time, can be interpreted as a time-dependent if X  X hen rule im-plementation. If there are enough time and control tokens at the corresponding input places, the transition (corresponding to the control event c t  X  C t )isfired, i.e., the time-dependent rule is activated and the action (or conclusion) is gener-ated. It is obvious that the process described earlier is driven by time-dependent events.
 clude if these time-dependent goals can be achieved and detect the sequence(s) of activities (states) that lead to these goals. By applying the functions  X  and  X  ,the semantic interpretation of the sequences mentioned earlier can be obtained. By varying the initial marking of the scheme and by changing the time durations of some activities or states, the scheme can be used for planning in temporally rich domains. 4 TeMAS model Since the proposed MAS model is primarily intended to be used in knowledge-based computer-vision systems and it is well known that computer-vision systems, as well as many other complex systems, are hierarchically organized [ 6, 37, 34], the organization of our MAS model is hierarchical. The MAS consists of several levels, which are composed of a number of clusters consisting of agents that per-form identical or similar tasks. An example of the hierarchical structure of the MAS, adapted to computer-vision system activities, is depicted in Fig. 5. on behavioral agents [ 27, 53 ]. In this paper, we describe the MAS structure re-lated to the higher levels of the computer-vision system (i.e., from category-based processing to event recognition and dynamic scene interpretation) called TeMAS. 4.1 Agent An agent is the basic building block of the TeMAS model. Figure 6 depicts the structure of an agent.
 its environment. In the TeMAS model, the agent X  X  representation of an environ-ment consists of knowledge about temporal relations, implicit knowledge about spatial relations and a meta-knowledge. All these kinds of knowledge are con-tained in the agent X  X  knowledge base. The knowledge about temporal relations as well as implicit knowledge about spatial relations in the agent X  X  environment are represented by means of the KRPTT knowledge representation scheme. The agent X  X  meta-knowledge ( aMK ) is implemented as a list of all the places of the PNTT that belong to the agent. As we shall see later, meta-knowledge has an im-portant role in the communication among agents.
 the relations between time primitives (time intervals and time points). This is the basis for achieving its time-dependent goals. In the proposed model, temporal rea-soning is event driven. The basic agent component that is responsible for temporal reasoning is the agent X  X  temporal logic module ( aTLM ). The aTLM tests the tem-poral relations between two time primitives that are contained in the structures (i.e., time track and current accumulation time) of the copies of time tokens in testing places denoted by flags. The agent X  X  knowledge base and aTLM commu-nicate by means of the agent X  X  blackboard ( aBB ). When a time token arrives in the place of the PNTT denoted by a flag, the agent creates a message consisting of the structure of that time token and the structure of the corresponding flag, and places the message on the blackboard. The structure of the message is shown in Fig. 7a. agent X  X  meta-knowledge ( aMK ), the agent determines whether another place de-noted by the same flag is in the PNTT structure of the agent X  X  local knowledge base. If it is so, the agent leaves the message on its own blackboard. When another time token arrives in another place denoted by the same flag, another message with the same structure is formed and placed on the agent X  X  blackboard. When both messages (invoked by the same flag) are present on the agent X  X  blackboard (except for the flags with temporal relations &lt; (before) and &gt; (after) where the arriving of only one message is enough), the agent X  X  TLM is activated and it eval-uates the specified temporal relation between the two time primitives specified in the messages. The aTLM returns a logical value: true or false. Based on the output of the aTLM, the return message is formed and placed on the agent X  X  blackboard. The return message has a similar structure to that already described in the original message, but instead of a copy of the time token, it only specifies the logical value, i.e., the output of the aTLM. Instead of the complete flag structure, the other part of the return message contains only a list of the control places (Fig. 7b). When the return message arrives on the agent X  X  blackboard, the agent inspects the logical value contained in the evaluation result (see Fig. 7b), and if this value is true the agent puts the control tokens into, by the message specified, control places, en-abling certain control transitions of the PNTT in this way. The process mentioned earlier is related to the inside-agent communication. 4.2 Clusters and levels Agents in the TeMAS model are organized into clusters. A cluster consists of a group of agents that perform identical or similar tasks. A cluster also has its own temporal logic module ( cTLM ), its blackboard ( cBB ), and its meta-knowledge ( cMK ). Figure 8a depicts the structure of a cluster.
 of TeMAS. The structure of the level (Fig. 8b) is similar to the cluster structure: it consists of one or more agent clusters, a level temporal logic module ( lTLM ), a level blackboard ( lBB ), and the level X  X  meta-knowledge ( lMK ).
 with a global temporal logic module ( gTLM ), a global blackboard ( gBB ), and a global meta-knowledge ( gMK ).
 model has a four-level nested recursive structure (Figs. 6 and 8). 4.3 Communication among agents, clusters, and levels The need for communication among different system components in TeMAS (i.e., agents, clusters, and levels) arises when a flag specifies that two time primitives, which are specified by two time tokens belonging to different agents, have to be compared. In such cases, the procedure described in Sect. 4.1. (inside-agent com-munication) cannot be performed because the two messages with corresponding time primitives (extracted from the time track) will not appear on the same agent X  X  blackboard, and therefore neither agent X  X  TLM will be able to perform the evalu-ation of the corresponding time relation.
 time relation in the TLM belonging to the higher levels of the system hierarchy. In that case, the communication scenario is performed as follows. When a time to-ken enters into a place marked by a flag, a corresponding message is placed on the agent X  X  blackboard, as described in Sect. 4.1. Besides supporting a mechanism for the inside-agent communication, the agent X  X  blackboard has an additional func-tion. It can be considered as a starting point for a communication among other system components. Immediately after a message arrives onto the agent X  X  black-board, the agent, by means of its meta-knowledge, determines whether both test-ing places specified by the same flag belong to its own PNTT. If so, the agent proceeds as we have described in Sect. 4.1. If the agent determines that one of the places denoted by the flag does not belong to its own PNTT, the agent per-forms the  X  X orward and delete X  action. It forwards the message to the blackboard of the next higher hierarchical component (i.e., a cluster blackboard) and deletes it from its own blackboard. When the message arrives to the blackboard of a higher-level component, a procedure similar to the one mentioned earlier is repeated. The component, by means of its meta-knowledge, checks whether both places belong to the PNTTs of the agents located inside the component. If so, the component waits for another message corresponding to the same flag, and when it arrives, the component X  X  TLM is activated and the temporal relation is evaluated. If one of the specified places does not belong to the agents inside the component, it again performs a  X  X orward and delete X  action and forwards the message to the higher component X  X  blackboard. For example, the message is forwarded from the cluster to the level. The described procedure of message routing is depicted in Fig. 9. appropriate component X  X  TLM (boolean value: true or false), a return message is formed and placed on the blackboard of the component that has performed the evaluation. Since, depending on the result of the evaluation, a control token has to be placed into the specified control place(s), the return message has to be routed to the corresponding agent(s). The routing procedure of the return message is based on the meta-knowledge of different system components and on the  X  X ackward and delete X  action, similar to the already-described procedure of routing an original message, but in the opposite direction. After a return message arrives on the com-ponent X  X  blackboard, the component consults its meta-knowledge and determines whether the specified control place is located in some of its sub-components or not. If so, the component returns the backward message to the blackboard of the corresponding sub-component and deletes it from its own blackboard. If the spec-ified place is not located in any of the sub-components at the lower hierarchical levels, the component forwards the return message to the blackboard of the next hierarchically higher component. The described procedure repeats until the return message reaches the blackboard of the corresponding agent. The agent then puts or does not put a control token(s) in the specified control place(s), depending on the result of the evaluation, which is contained in the return message. The process of routing a return message is depicted in Fig. 10 . 5 TeMAS simulator 5.1 Object-oriented implementation of the TeMAS simulator Based on the proposed architecture of TeMAS, an object-oriented simulator was developed. In general, object-oriented design includes the following elements: ab-straction into classes and objects, encapsulation, modularity, and inheritance with polymorphism [ 45].
 tionships; therefore, the abstraction of these elements into classes is straightfor-ward. Four main classes are used to build this structure: CMAS , CLevel , CClus-ter ,and CAgent , which represent different hierarchical components of the model (i.e., a MAS, a level, a cluster and an agent, respectively). Figure 11 depicts the simplified structure of the TeMAS simulator in UML class diagram notation [ 7]. The mentioned hierarchical components share a similar structure: each of them contains a blackboard, a TLM, a meta-knowledge, and either a set of lower-level entities (for example, MAS contains levels, a level contains clusters and a cluster contains agents) or a knowledge base in the form of a KRPTT (if the component is an agent).
 of the four classes mentioned earlier. All four of them inherit a base class called CBaseAgent .
 of a class CTLM and a list of integers that represent meta-knowledge, where each integer corresponds to an index of an appropriate place of the PNTT. The class CBlackboard represents a blackboard structure, and its main property is a list of messages. It also includes corresponding member functions for reading from and writing to a blackboard. The messages are implemented as instances of a class CMessage . The class CMessage reflects a message structure and is composed of a time token and a corresponding flag. The class CTLM represents a TLM, which is responsible for the evaluation of the temporal relations. from the class CBaseAgent , the main property of the class CMAS is a list of levels that the MAS contains. It is implemented as a list of instances of a class CLevel . as a list of instances of a class CCluster . The organization of the class CCluster is identical to the classes mentioned earlier and contains a list of instances of the class CAgent .
 local blackboard, TLM, and meta-knowledge. But instead of containing a list of lower-level entities, an agent contains a knowledge base represented by means of a KRPTT knowledge representation scheme. In our object-oriented model, this scheme is represented by the class CKRPTT .
 tation scheme. It contains an instance of a Petri net with time tokens, a set of flags, and functions  X  and  X  , which give semantic interpretation to places and transi-tions. A PNTTs is also built from well-defined elements, i.e., places and transi-tions, and therefore its abstraction into a class is easy. In our implementation, it is represented by the class CPNTT . Places are represented as instances of the class CPlace and transitions as instances of the class CTransition . The class CPlace contains a list of tokens that are present in a specific place at a given moment of time.
 which is a list of pairs (identifier (ID) of visited place, time of detainment of the token in that place). This class also contains an initial time of detainment of the token and the total accumulated time.
 places and a list of pointers to all the output places. An important member func-tion of CTransition is the function fire() , which fires a transition if it is enabled (i.e., removes time tokens from input places and puts them into output places of a transition, adding a new entry to a token X  X  list of visited places).
 two places for which a temporal relation has to be evaluated, an identifier of the mentioned temporal relation and a list of indexes of places into which a control token has to be put if the relation is to be satisfied. 5.2 TeMAS simulator description and user interface Based on the hierarchical structure of the MAS described earlier, the KRPTT knowledge representation scheme and the underlying PNTT, the TeMAS simu-lator provides the means for describing the structure of the MAS, and the agent X  X  knowledge base that describes situations from temporally rich domains, and it supports temporal reasoning. The program is developed in a C ++ environment for Windows and Linux platforms. It has an open architecture and a user-friendly graphical interface. The main window of the program with drop-down menus and a toolbar is shown in Fig. 12 .
 the currently simulated MAS in a tree-like form. The right-hand part of the window is a workspace where windows of different components of the sys-tem represented by TeMAS (i.e., agents, clusters, levels, etc.) are displayed. The windows of the agents show the structure and marking of the agent X  X  PNTTs, as well as the current state of the agent X  X  local blackboard. The windows of other components (clusters, levels, and a MAS) contain an area with a symbolic representation of their subcomponents and a component X  X  blackboard.
 a file with a definition of the system, or by manually adding different components via drop-down menus. When the structure of the TeMAS and all its subcompo-nents have been specified, the simulation can be performed either step-by-step or at once. If a goal state of the system is reached, or if the predefined number of steps is achieved, the simulation finishes and the simulator notifies the user about the result. 5.3 Example of using the TeMAS simulator for the interpretation of a dynamic scene In this section, we give an example of using the TeMAS simulator to interpret a laboratory dynamic scene. The initial position of four agents ( Robot1 , Robot2 , Robot3 ,and Robot arm ) is shown in Fig. 13 . Robot1 and Robot2 are equipped with sonars, and Robot3 has a CCD camera. The Robot arm holds the brick. Three movable robots share a common goal: one of them has to reach the charger (Fig. 13 ). all three robots have the same velocity). At a glance, with the assumption that all the movable robots start to operate at the same time, Robot3 is the nearest to the charger, but due to an obstacle ( Obstacle1 ), its path is the longest. Robot1 is the candidate for achieving the goal in the shortest possible time, but there is also the Robot arm that can drop a brick ( Obstacle2 ) in the path of Robot1 , making its mission impossible. Figure 14 shows five frames taken from the frame sequence of the dynamical scene.
 system (Fig. 5), the described situation is represented by the corresponding TeMAS level, consisting of four agents organized in two clusters (Fig. 15 ). Each agent is modeled by a corresponding PNTT. The time delays  X ( p i ) =  X  i as well as the function  X  are denoted at each place, while the function  X  is assigned to each transition. The initial marking 0 , the initial time accumulation of time tokens, and the distribution of the flags are also depicted in Fig. 15 .
 flags. The set of flags F for the modeled system is The individual flags are defined as follows: f f f f f f f f f Robot1 leaves the collision zone before the brick falls on the floor, then Robot1 can continue approaching the charger. The flags f Gi ; i = 1 , 2 , 3 denote the goal states. For example, a flag f G 2 denotes the goal state  X  Robot2 has reached the charger X .
 example: Let us suppose that Robot1 starts its moving at the time t 0 = 0(the action starts at the beginning of the world), Robot2 starts its moving after 1 . 4 time units and Robot3 starts to operate after 1 . 7 time units. After 0 . 45 time units, Robot arm releases the brick. What will occur in the scene for the scenario mentioned earlier? earlier, performed step-by-step, are presented as follows. The screen snapshot of the TeMAS simulator with the graphical PNTT representation of the agents, the separate windows (gray ones) is shown in Fig. 16 .
 and the time token m 2 in the place p 8 (belonging to agent Robot2 ), which are marked by flags, messages will appear on the blackboards of these two agents after the first step of the simulation. Messages on the blackboard of Robot1 are invoked by flags f 1 and f 2 , while messages on the blackboard of Robot2 are invoked by flags f 3 , f 5 ,and f 6 . The messages are represented by envelopes (graphical mode) or by a detailed textual description (Fig. 17 ). The first step will also result in the firing of enabled transitions t 5 (agent Robot3 )and t 8 (agent Robot arm ), result-ing in new markings of the PNTTs of Robot3 and Robot arm . The screen snap-shot of the simulator after performing the first step of the simulation is shown in Fig. 17 .
 Robot2 are forwarded to a corresponding cluster blackboard (based on the meta-knowledge of corresponding agents), enabled transitions t 6 and t 9 are fired auto-matically, and two new messages are placed on the blackboard of the agent Robot arm due to the flags f 1 and f 2 placed at p 18 . Since the testing places ( p 2 and p 18 ) specified by flags f 1 and f 2 do not belong to the same cluster, messages corresponding to them are forwarded to the level blackboard. Messages invoked by flags f 3 , f 5 ,and f 6 (located at the place p 8 ) will be evaluated by the cluster temporal logic module (cTLM) after the arrival of other corresponding messages, invokedbytheflags f 3 , f 5 ,and f 6 placed at p 14 and p 5 , to the cluster black-board (cBB). In the subsequent steps, other messages are generated, forwarded and deleted, specified temporal relations for the time intervals are evaluated, return messages are forwarded to the corresponding agent X  X  blackboards, and depending on the result of the time relation evaluation (false or true), the control tokens are put in the control places. The situation immediately before the last step of the simulation is shown in Fig. 18 . The blackboard of Robot2 contains two return messages (depicted in Fig. 18 in textual mode), both of which specify the result of the evaluation  X  true . X  Therefore, control tokens are placed into the control places p 7 and p 9 , and the transition t 4 is enabled.
 time token reaches the place p 10 . The place p 10 is denoted by the goal flag f
G 2 and it corresponds to the goal state of the system:  X  Robot2 has reached the charger. X  The snapshot corresponding to this final situation is shown in Fig. 19 .
 tween different simulated activities can be analyzed by means of firing diagrams. The simulator generates a firing diagram for each agent automatically. The firing diagrams for four modeled agents are shown in Fig. 20 . From the firing diagrams, it can be seen that Robot1 enters the state  X  Robot1 stops in front of an obstacle X  (corresponding to the place p 5 )in t = 3 . 0 time units, because the brick falls on the floor (place p 19 )before Robot1 reaches the collision zone, i.e., in t = 1 . 45 time units. The firing diagram related to Robot2 also shows that Robot2 reaches the charger in t = 7 . 4 time units. Robot3 cannot reach the charger because Robot2 is already there. In other circumstances (e.g., longer initial delay of Robot2 ), Robot3 could reach the charger at t = 8 . 7 time units (Fig. 20 ). tokens, as well as by changing the time durations of some states and actions, dif-ferent results for the simulation can be obtained. 6Conclusion The proposed MAS model called TeMAS was used for modeling and planning in temporally rich domains. The TeMAS effectively integrates temporal information and metric, logic between time primitives, action and/or state specification, and planning. The modified Petri nets, called PNTTs, are used as the basic building blocks for agent X  X  knowledge representation and temporal reasoning, as well as for modeling situations in temporally rich domains.
 temporal information, well-defined methods (based on the modified PN theory) for the analysis of the model, and simple modeling of the different time relations among the actions and states by changing the initial marking and time values assigned to time tokens and places.
 and the object-oriented simulator, the system can be used for analysis and planning actions and activities in temporally rich domains.
 work concerning the proposed model and simulator. First, we intend to extend the model in order to support an explicit representation of spatial information and then to develop an integrated spatio-temporal reasoning and planning model for hierarchical dynamic computer-vision systems.
 References Author Biographies
