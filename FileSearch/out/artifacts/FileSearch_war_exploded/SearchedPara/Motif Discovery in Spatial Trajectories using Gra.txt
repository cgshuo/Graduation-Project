 University of Maryland Baltimore County Spatial trajectory analysis is cruc ial to uncovering insights into the motives and nature of human behavior. In this work, we study the problem of discovering motifs in trajectories based on symbolically transformed representations and context free grammars. We propose a fast and robust grammar induction algorithm called mSEQUITUR to infer a grammar rule set from a trajectory for motif generation. Second, we designed the Symbolic Trajectory Analysis and VIsualization System (STAVIS), the first of its kind trajectory analytical system that applies grammar inference to demonstrate the efficiency and effectiveness of mSEQUITUR for generating trajectory signatu res and discovering motifs. H.2 [ Database Management ]: Database Applications  X  data mining, spatial databases and GIS. spatial trajectory, motif discovery, grammar induction, activity recognition. human behavior analysis. From traces of GPS (Global Positioning System) signals recorded on smartphones to object movements tracked in surveillance video feeds, the modes by which spatial movements are captured have increased in both breadth and fidelity. As a result, there is a tremendous amount of data that can be used to help bring insights into the motives and behaviors of moving agents. Some examples of analytics performed on spatial motif discovery [10]. Two critical factors that impact the performance and accuracy of trajectory analytics are the data X  X  massive size and the presence of noise. For example, in the GeoLife data [25-27] where approximately 150 users X  GPS coordinates are recorded (some for indexed spatial coordinates for an individual. With more than 150 signal attenuation and computationa l constraints placed on the GPS algorithms that can efficiently an d robustly process large and noisy data sets. In this work, we study the problem of generating a compact and scalable model for large and noisy trajectory data and apply the model to discover repeated pa tterns (motifs). Under the assumption that observations of a spatial trajectory arise from a generative process that probabilistic ally outputs trajectory segments characteristic and meets the constraints for scalability and voluminous and noisy data issues by transforming the 2D or 3D spatiotemporal data into a symbolic representation and modeling it via grammar rules. This paper proposes a fast and robust induction algorithm called mSEQUITUR to generate the grammar rules and the Symbolic Trajectory Analysis and VIsualization System (STAVIS), the first of its kind trajectory analytical system that analytical operations. This system supports an end-to-end analytical framework for queryi ng, processing, and visualizing symbolic spatial trajectories. The major contributions of this paper are summarized as follows: 1. Proposed a novel linear space/time grammar induction (GI) 2. Developed the first analytical system framework, STAVIS, for In this section, we briefly discuss background and related work on trajectories, and the problem statement: Definition 1 . Spatial trajectory : A trajectory  X  and ordered set of (noisy) location points sampled from a curve generated by an object moving in 2-dimensional geogr aphic space. Problem Statement . Given a trajectory  X  , generate a robust and compact grammar rule set from  X  with time and space complexity linear in the size of  X  . deep human understanding of the underlying generative processes and additional machine processing fo r motif detection. The choice of model class is thus extremel y important because it must be expressive, a good match to the structure in the data, and amenable to human inspection. In addition, our application domain demands efficient learning. Grammars meet all of these desiderata. GI is the problem of identifying a grammar from a target class using a set of strings known to belong to the language of the grammar (positive examples) and, optionally, a set of strings known to not belong to the language (negative examples). At a strings and is refined (made more specific) by creating new non-terminals and rules [24]. Merging approaches start with a grammar Non-terminals and rules are then merged to generalize the language to accept unseen strings (but no negative examples if they are available). Our work is based on the SEQUITUR algorithm [19], which learns context-free grammars in time O(n) wh ere n is the size of the input. In [11], we proposed a grammar-based motif discovery algorithm for time series, and SEQUITUR was the choice of grammar induction algorithm. The experimental results show that the adaptation of SEQUITUR to time series data successfully discovers repeated patterns of previously unknown lengths. While the results are promising, there are some limitations with the algorithm. More specifically, SEQUITUR uses a splitting operator to replace is no merging operator, the resul ting grammar does not generalize  X  it only accepts the given input string. As a result, it does not work well for noisy data. We address this major weakness in this paper. Our approach to merging is related to that employed by Bayesian description length prior on gramma rs with the probability of the data given the grammar, and is mo st similar to previous work on learning reversible regular [1] and context-free [20] grammars that make extensive use of contexts. From the perspective of spatial trajectory mining, the majority of existing work concentrates on indexing and similarity searchs in large spatial databases [3], most of which are based on shape-based similarity measures. Other pattern learning tasks include periodicity analysis [12], relative motion identification [6], trajectory classification [8], spatial co-occurrence discovery [2], clustering [9], and outli er detection [7, 10]. These techniques were shown to be useful for discovering animal and bird migration movement data. Analytical and visualization systems have also been developed for spatial trajectories [18]. However, most of these systems focus on cluster analysis and are optimized for player tracking in recreational sports. the problem of efficiently ge nerating signatures of spatial trajectories. The signatures are applied within a symbolic system framework, STAVIS, to improve the robustness of trajectory pattern analysis. We propose a three-step transformation process that allows efficient computation and ad aptation of grammar induction as follows. Step 1 (Data Linearization) : We employ a space-filling curve indexed by time. Space-filling curves provide an efficient and preserved. They have been used extensively for multidimensional selected the Hilbert space-filling curv e due to its superior ability to preserve distances [17].
 Step 2 (Data discretization): Once we linearize the trajectory, we discretize the series into a symbol ic string sequence using Symbolic Aggregate approXimation (SAX) [14]. SAX offers many unique advantages over other aggregati on methods. Specifically, SAX computational complexity, but also removes noise and, consequently, produces more meaningful results.
 Step 3 (Grammar Induction) : We infer a grammar from the SAX string produced from Step 2 using mSEQUITUR. Each string delimited by a space represents one or more consecutive subsequences and is treated as a terminal symbol, an atomic unit for patterns. mSEQUITUR generates a hierarchy of rules, each of which represents a repeated pattern, and from these rules, additional machine processing (e.g., motif discovery) can be performed. The starting point for our work is the SEQUITUR algorithm for inferring context-free grammars from sequences. The algorithm processes the input sequence in a single left-to-right pass and produces as output a context-free grammar that generates one string, the input sequence. SEQU ITUR does this by enforcing two constraints: bigram uniqueness and rule utility. The first constraint requires that every bigram occurs only once in the grammar, and is violated when the second occurrence of a bigram is seen in the left-to-right pass over the input sequence. To enforce this constraint the expands to the bigram. The other constraint enforced by SEQUITUR is rule utility, which requires that every non-terminal be used more than once. Over time the interaction of these two rules exposes recurring hierarchical structure in the input sequence. As stated earlier, though SEQUITUR is exceptionally efficient for operator. That means the resulti ng grammars cannot generate or recognize any sequences not provi ded as input. Practically, grammars trained on suspicious trajectories would only recognize mSEQUITUR, a major extensi on of SEQUITUR that allows merging yet is still efficient. The merging operator is described as follows. Given two non-terminals, X and Y, create a ne w non-terminal Z and replace all occurrences of X and Y in the grammar with Z. The resulting grammar can now generate new st rings, ones in which a substring generated by an X is replaced by a substring generated by a Y, and vice versa. The difficult question is deciding when such a merge is warranted. The usual answer is to look at context . contain both terminal and non-terminal symbols. Given s  X  L let C(s) be the contexts of s, whic h is a set of strings whose size is are created by making a copy of s and replacing one non-terminal context, with the wildcard marking a non-terminal position and the remainder of the string being the context. If two different non-candidates for merging. Consider the following simple ex ample. Given the input sequence abcababc, SEQUITUR produces the following grammar: S  X  R1 R2 R1; R1  X  R2 c; R2  X  a b R1. Non-terminal R1 expands to a right-hand side with one non-terminal (R2) and one terminal (c). Non-terminal R2 expands to the terminal string ab. If we expand the start symbol to depth 1 we get the string R1 R2 R1. Expanding to depth 2 yields the string R2 c a b R2 c, and expanding to depth 3 gives the string abcababc. As the expansion depth increases the strings become longer and tend to have more terminals and fewer non-terminals. Given string s = R1 R2 R1, the contexts of s, denoted C(s), are {* L (A) for all non-terminals A, and then the contexts of each string generated. Note that s = R1 R2 R1 is in L 1 (S). If any two different fully instantiated (non-wildcarded ) string match a context (where any non-terminal can match a wildcard), then the non-terminals that match the wildcard position are merge candidates. When dealing with spatiotemporal trajectories, a context is a partial trajectory. That is, the terminal s and non-terminals in the sequence ultimately expands to a sequence of terminals, and by virtue of the way the terminals were generated and the grammar was learned, the terminal sequence represents the path through space and time at the level of the raw trajectory data. Note that every non-terminal in the original SEQUITUR algorithm expands to exactly one string of contains a non-terminal, it means that they correspond to two terminal strings that share some structure but differ in the trajectory generated at the unmatched position. Time and space complexity: One of the appealing features of SEQUITUR is its efficiency. Therefore, our goal is to support merging, and thus learning of gramma rs that generalize, efficiently. In particular, our proposed mS EQUITUR generates grammar in time linear in the input sequence length n. We first note that SEQUITUR is a bottom-up algorithm that runs in time linear in the size of the input sequence. To support merging in mSEQUITUR, we need a list of the strings that can be generated by each non-terminal to a fixed depth and th e contexts (wildcarded strings) associated with each. Because the algorithm is bottom-up, it is trivial to augment the representation to include the depth of a non-terminal, which is the depth of the tree it generates. When forming non-terminals that expand directly to strings of terminals, their sole depth 1 expansion is recorded. When forming a depth 2 non-expansions of its right-hand side . By recording with each non-terminal its deepest expansion to depth d  X  1, it is possible to maintain information about stri ngs generated to depth d while learning the grammar with onl y constant overhead. Given a non-terminal X  X  depth d expa nsion, the contexts for that string can be generated in a linear pass over the expansion and stored in a hash table keyed on c ontext where the value stored is a makes it possible to identify all merge candidates in time O(nd) for input sequence length n and depth d expansions of non-terminals. the size of the input. Initially, each non-terminal generates exactly one string to depth d, and the contexts are represented implicitly by not generate any new contexts, though it does allow them to be combined in new ways when making future merging decisions. Therefore, while mSEQUITUR runs, the space requirements do not grow, but remain linear in the size of the input. STAVIS supports an end-to-end analysis workflow through a web-recorded trajectory traces composed of the following features: track ID, spatial point coordinates, and times. Although a trajectory is a continuous function mapping from the time domain to the spatial domain, in practice they are recorded as discrete spatiotemporal (ST) point samples. As a result, the database represents a trajectory as an ST point set. STAVIS integrates three primary functions: ST filtering , trajectory transformation , and signature analysis and visualization . The performing an ST query on the dataset. Trajectory transformation applies the Hilbert space-filling curve and SAX to map the ST visualization apply grammar induction (mSEQUITUR and SEQUITUR) on the SAX representations and perform motif discovery and visualization on the grammar rules. STAVIS implements SEQUITUR a nd mSEQUITUR for signature following motif discovery methods: Fixed-length motif discovery: applied directly on SAX words and employs fixed-length motif fi nding algorithm [13, 21]; Variable-length motif discovery: applied on signatures generated by SEQUITUR and extracts motifs from the signatures; Noise tolerant variable-length motif discovery: applied on signatures generated by mSEQUITUR and extracts motifs from the signatures. To evaluate the efficiency of our proposed mSEQUITUR method and symbolic based approach to trajectory data, we compare the baseline motif [13, 21], SEQUITUR, and mSEQUITUR approaches to determine their capacity to identify patterns or anomalies in various scenarios using STAVIS. We compiled two different test datasets from Micros oft X  X  GeoLife and a synthetically concatenated to mimic repetitive tr ips with slight divergences. The approximately 10,000 sampled points and generated by concatenating one trajectory to itself four times to achieve known repetition. For each of these datasets, we look at the original trajectory on the map to visually identify where common patterns are expected to occur. We also pay attention to locations where discontinuities occur on the Hilbert SFC transformed representation to analyze the impact this may have on the discove red patterns. Next, the baseline motif, SEQUITUR, and mSEQUITUR are performed on the SAX transformed Hilbert curve and the resulting patterns compared. If a specific pattern appears dissimilar to a related occurrence, we understand why the two seemingly dissimilar subsequences were categorized into the same pattern. Furthermore, we compare each algorithm (baseline motif, SEQUITUR, and mSEQUITUR) to see if new patterns are discovered or if previously matching patterns are no longer being captured or matched together. We experimented with different parameters to evaluate the system X  X  sensitivity to parameter choices. Initially, we started with the parameters used in [14, 15] th at were found to be most effective in discovering and matching the patte rns. Then we made slight changes to those values to avoid largely overlapping subsequences that hindered visualization, but still allowed for the discovery of the expected patterns. It was found that SAX window size = 20, alphabet size = 4, Hilbert grid order = 2 4 , and mSEQUITUR depth window allows us to capture ev ery possible subsequence in the time series, while the use of nume rosity reduction allows us to reduce overlap and detect va riable length patterns. Annotations on the time series graphs show starting points of discovered rule occurrence, and a dashed box of the same color indicates where the matching rule occurrence was expected but not Fig. 1(e) depicts the patterns discovered by mSEQUITUR. pattern on the other repeated, half of the trip. The rule depicted in missed in Fig. 1(a) and Fig. 1(b). All of these rules, however, were successfully captured by mSEQUITUR X  X  context and merge candidates shown in Fig. 1(e). Since mSEQUITUR matches the candidates, the combination of all three related rules results in more discoveries of the expected pattern occurrences. For the baseline motif results (Fig. 1(d)), the algorithm discovered many of the patterns that the three SEQUITUR rules missed, but still misses some of the patterns that mSEQUITUR was able to detect. While mSEQUITUR is not always able to detect every matching pattern, motif but with higher accuracy. F v f r u 2 m m S a a H t h a s I n S m a r t h a g F ig 2. shows th v arying sizes of f igure gives the a u ns discarded. 2 .50GHz with 6 G m SEQUITUR X  X  m atched the the o S ection 3.1. Fo r a verage increase a ttributable to H owever, the u p h e input size. a lgorithm can e s patial trajectory n this paper, S TAVIS frame w m otif discovery a bility to gene r elevant motifs i h an the compe t a lgorithm will b g eometric const r
