 Can we use social networks to combat spam? This paper investi-gates the feasibility of MailRank, a new email ranking and classi-fication scheme exploiting the social communication network cre-ated via email interactions. The underlying email network data is collected from the email contacts of all MailRank users and up-dated automatically based on their email activities to achieve an easy maintenance. MailRank is used to rate the sender address of arriving emails such that emails from trustworthy senders can be ranked and classified as spam or non-spam. The paper presents two variants: Basic MailRank computes a global reputation score for each email address, whereas in Personalized MailRank the score of each email address is different for each MailRank user. The eval-uation shows that MailRank is highly resistant against spammer attacks, which obviously have to be considered right from the be-ginning in such an application scenario. MailRank also performs well even for rather sparse networks, i.e., where only a small set of peers actually take part in the ranking of email addresses. G.2.2 [ Discrete Mathematics ]: Graph Theory; H.3.4 [ Information Systems ]: Information Storage and Retrieval X  Systems and Soft-ware ; H.2.7 [ Information Systems ]: Database Management X  Se-curity, Integrity and Protection Algorithms, Experimentation, Measurements Email Reputation, SPAM, MailRank, Personalization
While scientific collaboration without email is almost unthink-able, the tremendous increase of unsolicited email (spam) over the past years [5] has rendered email communication without spam Copyright 2005 ACM 1-59593-140-6/05/0010 ... $ 5.00. people with a presumably high global reputation (e.g., Linus Tor-valds) might not be very important in the personal context of a user, compared to other persons (e.g., the project manager).

In this paper we propose MailRank, a new approach to ranking and classifying emails according to the address of email senders. The central procedure is to collect data about trusted email ad-dresses from different sources and to create a graph for the social network, derived from each user X  X  communication circle [1]. There are two MailRank variants, which both apply a power-iteration al-gorithm on the email network graph: Basic MailRank results in a global reputation for each known email address, and Personalized MailRank computes a personalized trust value. MailRank allows to classify email addresses into  X  X pammer address X  and  X  X on-spammer address X  and additionally to determine the relative rank of an email address with respect to other email addresses. This paper analyzes the performance of MailRank under several scenarios, including sparse networks, and shows its resilience against spammer attacks.
The paper is organized as follows: Section 2 provides informa-tion about existing anti-spam approaches, trust and reputation algo-rithms, as well as a description of PageRank and some approaches to personalizing it. In Sect. 3, we describe our proposed variants of MailRank, which we then evaluate in Sect. 4. Finally, our results are summarized in Sect. 5.
Because of the high relevance of the spam problem, many at-tempts to counter spam have been started in the past, including some law initiatives. Technical anti-spam approaches comprise one or several of the following basic approaches [16]:
Content-based approaches [7] analyze the subject of an email or the email body for certain keywords (statically provided or dy-namically learned using a Bayesian filter) or patterns that are typ-ical for spam emails (e.g., URLs with numeric IP addresses in the email body). The advantage of content-based schemes is their abil-ity to filter quite a high number of spam messages. For exam-ple, SpamAssassin can recognize 97% of the spam if an appro-priately trained Bayesian filter is used together with the available static rules [10]. The main drawback is that they (e.g., the set of static keywords) have to be adapted continuously since otherwise the high spam recognition rate will decrease [10].

Header-based approaches examine the headers of email mes-sages to detect spam. Whitelist schemes collect all email addresses of known non-spammers in a whitelist to decrease the number of false positives from content-based schemes. In contrast, black-list schemes store the IP addresses (email addresses can be forged easily) of all known spammers and refuse to accept emails from them. A manual creation of such lists is typically highly accu-rate but puts quite a high burden on the user to maintain it. PGP key servers could be considered a manually created global white-list. An automatic creation can be realized, for instance based on previous results of a content-based filter as is done with so-called autowhitelists in SpamAssassin. Both blacklists and whitelists are rather difficult to maintain, especially when faced with attacks from spammers who want to get their email addresses on the list (white-list) or off the list (blacklist).
 low an outgoing link from the current page with probability c or will get bored and select a random page with probability (1  X  c ) (i.e., the E vector has all entries equal to 1 /N , where N is the number of pages in the Web graph). To achieve personalization, the random surfer must be redirected towards the preferred pages by modifying the entries of E . Several distributions for this vector have been proposed since: TrustRank [8] biases towards a set of ham pages in order to identify Web spam, HubRank [2] gives an additional importance to hubs, pages collecting links to many other important pages on the Web, etc.

Personalized PageRank [11] uses a new approach: it focuses on user profiles. One Personalized PageRank Vector (PPV) is com-puted for each user. The personalization aspect stems from a set of hubs (H), each user having to select her preferred pages from it. For each page of H, an auxiliary PPV called basis vector is precom-puted. Then, PPVs for any preference set P are expressed as a lin-ear combination of basis vectors. To avoid the massive storage re-sources the basis hub vectors would use, they are decomposed into partial vectors (encoding the part unique to each page, computed at run-time) and the hubs skeleton (capturing the interrelationships among hub vectors, stored off-line). Section 3.3 discusses how this can be adapted to our email ranking and classification scenario. Social reputation schemes are usually designed for use within P2P networks. However, they provide an useful insight into uti-lizing link analysis to construct reputation systems, as well as into identifying different attack scenarios. [21] presents a categoriza-tion of trust metrics, as well as a fixed-point personalized trust al-gorithm inspired by spreading activation models. It can be viewed as an application of PageRank on a sub-graph of the social network. [18] builds a Web of trust asking each user to maintain trust values on a small number of other users. The algorithm presented is also based on a power iteration, but designed for the context of the Se-mantic Web, composed of logical assertions. Finally, EigenTrust [12] is a pure fixed-point PageRank-like distributed computation of reputation values for P2P environments. This algorithm is also used in the MailTrust approach [13], a collaborative spam filter-classifications received from collaborators by a PageRank-like rep-utation value to minimize the influence of spammers and malicious peers on the collaborative spam filtering scheme.
In order to compute a rank for each email address, MailRank collects data about the social networks derived from email commu-nication of all MailRank users and aggregates them into a single email network . Figure 1 depicts an example email network graph. Node U 1 represents the email address of U 1 , node U 2 the email ad-dress of U 2 , and so on. U 1 has sent emails to U 2 , U 4 , and U 3 ; U 2 has sent emails to U 1 and U 4 , etc. These communication acts are then interpreted as trust votes , e.g., from U 1 towards U 2 , U 4 and U , and depicted in the figure using arrows.
The following sections provide more information about each cen-tral aspect of MailRank: what data are used by the algorithm, where these data are stored, how the ranks are generated and how we can use them for computing global or personalized reputation scores.
As for all trust / reputation algorithms, it is necessary to collect as many personal votes as possible in order to compute relevant ratings. Collecting the personal ratings should require few or no manual user interactions in order to achieve a high acceptance of the system. Similarly, the system should be maintained with lit-tle or no effort at all, thus having the rating of each email address computed automatically.

To achieve these goals, we use already existing data inferred from the communication dynamics, i.e., who has exchanged emails with whom. This results in a global email social network. We dis-tinguish three information sources as best serving our purposes: 1. Email Address Books. If a person A has the addresses 2. The  X  X o: X  Fields of outgoing emails (i.e.,  X  X o: X ,  X  X c: X  and 3. Autowhitelists created by anti-spam tools (e.g., SpamAssas-
The main goal of MailRank is to assign a rank to each email ad-dress known to the system and to use this rank (1) to decide whether each email is coming from a spammer or not, and (2) to build up a ranking among the filtered non-spam emails. Its basic version comprises two main steps: 1. Determine a set of email addresses with a very high reputa-2. Apply the power iteration algorithm to the email network
Regarding the attack resilience, it is important for the biasing http://www.infoworld.com/article/04/09/07/HNspamspit 1.html Personalizing on each user X  X  acquaintances tackles these aspects. Its main effect is boosting the weight of the user X  X  votes, while de-creasing this influence for all the other votes. Thus, the direct com-munication partners will achieve much higher ranks, even though initially they were not among the highest ones. Moreover, due to the rank propagation, their votes will have a high influence as well.
Now that we have captured the user requirements mentioned, we should also focus our attention on a final design issue of our system: scalability. Simply biasing MailRank on user X  X  acquaintances will not scale well, because it must be computed for each preference set, that is for every registered user.
 Jeh and Widom [11] have proposed an approach to calculate Personalized PageRank vectors, which can also be adapted to our scenario, and which can be used with millions of subscribers. To achieve scalability, the resulting personalized vectors are divided in two parts: one common to all users, precomputed and stored off-line (called  X  X artial vectors X ), and one which captures the specifics of each preference set, generated at run-time (called  X  X ubs skele-ton X ). We will have to define a restricted set of users on which rankings can be biased (we shall call this set  X  X ub set X , and note it with H ). There is one partial vector and one hub skeleton for each user from H . Once an additional regular user registers, her personalized ranking vector will be generated by reading the al-ready precomputed partial vectors corresponding to her preference set (step 1), by calculating their hubs skeleton (step 2), and fi-nally by tying these two parts together (step 3). Both the algorithm from step 1 (called  X  X elective Expansion X ) and the one from step 2 (named  X  X epeated Squaring X ) can be mathematically reduced to biased PageRank. The latter decreases the computation error much faster along the iterations and is thus more efficient, but works only with the output of the former one as input. In the final phase, the two sub-vectors resulted from the previous steps are combined into a global one. The algorithm is depicted in the following lines. To make it clearer, we have also collected the most important defini-tions it relies on in table 1.

Finally, it should be noted that the original algorithm has been proven to be equivalent to a biased PageRank [11]. Thus, it pre-serves all the useful properties of the PageRank algorithm (e.g., to the MailRank server and forwards the email to the local email server. To increase efficiency, only those votes that have not been submitted yet (or that would expire otherwise) are sent. Also, for privacy reasons, votes are encoded using hashed versions of email addresses. Upon receiving an email, the proxy queries the Mail-Rank server about the ranking of the sender address (if not cached locally) and classifies / ranks the email accordingly.

Further extensions of our prototype will make use of secure sign-ing schemes to enable us to analyze both outgoing and incoming emails for extracting the  X  X otes X  and submitting them to the Mail-but also introduces the votes of spammers into MailRank. Such votes have a very positive aspect, since they increase the score for the spam recipients (i.e., non-spammers). Thus, spammers face more difficulties to attack the system and increase their own rank.
By definition, spammers send the same / very similar message to very many (typically millions of) recipients. However, they can run two different strategies to choose the sender address: First, they use a new (random) email address for each spam message even if they send the same message to millions of recipients (from an anal-ysis we performed on the autowhitelists of several large university institutions in Germany, we found that 95% of the spammer ad-dresses were used only once). In this manner, they are trying to circumvent blacklists of email addresses. Furthermore, they use these addresses only for sending spam emails to non-spammers. Second, they use email addresses from well-known non-spammers (forging of sender address) assuming that these addresses are in the whitelists of many spam detection tools. Sender authentica-tion schemes as those listed in Sect. 2 already prevent forging the sender address (when installed on the email server) and are actually required for any whitelist-based scheme. However, sender authen-tication cannot counteract the much more common former spam-ming strategy.

As soon as the MailRank service becomes widespread, spam-mers will surely try to attack it in order to increase the rank of their own address(es). We identified and simulated several ways of from one or several spammer addresses to one or several non-spam-mer addresses. However, the algorithm ensures that it is not pos-sible to change your own score by the votes you are issuing to-wards others. Therefore, such attacks are only reasonable if the spammers vote for another spammer address to increase its rank, forming a malicious collective (cf. Fig. 2). This is comparable to link farming in the Web in order to attack PageRank. However, re-cently there has been an extensive amount of work on identifying and neutralizing such attacks on power iteration algorithms (see for example [20]), and thus the threat they represent to social reputa-tion schemes has been significantly reduced.

Another possible attack is to make non-spammers vote for spam-mers. To counter incidental votes for spammers (e.g., because of a misconfigured vacation daemon), an additional confirmation pro-cess could be required if a vote for one particular email address would move that address from  X  X pammer X  to  X  X on-spammer X . How-ever, spammers could still pay non-spammers to send spam on their need to ensure that the sender did indeed vote for the recipient, i.e., the vote / email is not faked. This can be achieved by relying on / extending current sender authentication solutions. other environments, such as P2P networks, which were also useful as a starting point for analyzing attacks in the MailRank scheme. fore, we protected the votes of the top nodes in the other two meth-spammers regarded as spammers, depending on the percentage of nodes with deleted votes, with the error bars at each point showing the minimum / maximum over five simulation runs.
Non-spammers registered to the MailRank system will be clas-sified as spammers only when very few, non-reputable MailRank users send them emails. As studies have shown that people usually exchange emails with at least five partners, such a scenario is rather theoretical. However, as the power-law distribution of email com-munication is expected only after the system has run for a while, we intentionally allowed such temporary anomalies in the graph. Even though for high deletion rates ( 70  X  90% ) they resulted in some non-spammers being classified as spammers, MailRank still performed well, especially in the more realistic  X  X vg X  scenario (the bigger error observed in the theoretical  X  X andom X  scenario was ex-pected, since random removal may result in the deletion of high-rank nodes contributing many links to the social network). Finally, the error rate decreases fast when the removal approaches 100% ,
If we monitor current spammer activities (i.e., sending emails to non-spammers), the emails / votes from spammers towards non-spammers can be introduced into the system as well. This way, spammers actually contribute to improve the spam detection capa-bilities of MailRank: The more new spammer email addresses and emails are introduced into the MailRank network, the higher they increase the score of the receiving non-spammers. This can be seen in a set of simulations with 20,000 non-spammer addresses and a varying number of spammers (up to 100,000, cf. Fig. 4), where the rank of the top 0 . 25% non-spammers increases linearly with the number of spammer addresses included in the MailRank graph.
In order to be able to attack MailRank, spammers must receive votes from other MailRank users to increase their rank. As long Gnutella P2P network (http://www.gnutella.com/). 13 The 100% from  X  X ottom99.9% X  and  X  X vg X  actually refer to 100% of the non-protected nodes. then the not registered user is no longer known to the system. collective to push one node into the biasing set, the more collec-tives exist in the network. This is because the spammers registered to the system implicitly vote for the non-spammers upon sending them (spam) emails.

Virus infections. Another possible attack on MailRank is to use virus / worm technology to infect non-spammers and make them vote for spammers. We simulated such an attack according to Newman X  X  studies [14], which showed that when the 10% most connected members of a social network are not immunized (e.g., using anti-virus applications) worms would spread too fast. Sim-ulation results are shown in Fig. 6 with a varying amount of non-spammers voting for 50% of all spammers. If up to about 25% of the non-spammers are infected and vote for spammers, there is still a significant difference between the ranks of non-spammers and spammers, and no spammer manages to get a higher rank than the non-spammers. If more than 25% non-spammers are infected, the spammer with the highest rank starts to move up in the rank list (the upper line from Fig. 6 descends towards rank 1). Along with this, there will be no clear separation between spammers and non-spammers, and two threshold values must be employed: one Mail-Rank score T 1 above which all users are considered non-spammers and another one T 2 &lt; T 1 beneath which all are considered spam-mers, the members having a score within ( T 1 , T 2 ) being classified as unknown.
This paper investigated the feasibility of MailRank, a new email ranking and classification scheme, which intelligently exploits the social communication network created via email interactions. On the resulting email network graph, a power-iteration algorithm is used to rank trustworthy senders and to detect spammers. Mail-Rank performs well both in the presence of very sparse networks: Even in case of a low participation rate, it can effectively distin-guish between spammer email addresses and non-spammer ones, even for those users not participating actively. MailRank is also very resistant against spammer attacks and, in fact, has the prop-erty that when more spammer email addresses are introduced into the system, the performance of MailRank increases.

Based on these encouraging results we are currently investigat-ing several future improvements for our algorithms. We intend to move from a centralized system to a distributed one to make the system scalable for a large-scale deployment. We are currently in-vestigating a DNS-like system, in which the computation is han-dled in a distributed manner by several servers. Finally, another
