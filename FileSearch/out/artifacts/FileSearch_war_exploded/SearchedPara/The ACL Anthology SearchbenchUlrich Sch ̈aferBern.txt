 Scientists in all disciplines nowadays are faced with a flood of new publications every day. In addi-tion, more and more publications from the past be-come digitally available and thus even increase the amount. Finding relevant information and avoiding duplication of work have become urgent issues to be addressed by the scientific community.

The organization and preservation of scientific knowledge in scientific publications, vulgo text doc-uments, thwarts these efforts. From a viewpoint of a computer scientist, scientific papers are just  X  X n-structured information X . At least in our own sci-entific community, Computational Linguistics, it is generally assumed that NLP could help to support search in such document collections.

The ACL Anthology 1 is a comprehensive elec-tronic collection of scientific papers in our own field (Bird et al., 2008). It is updated regularly with new publications, but also older papers have been scanned and are made available electronically. We have implemented the ACL Anthology Searchbench 2 for two reasons: Our first aim is to provide a more targeted search facility in this col-lection than standard web search on the anthology website. In this sense, the Searchbench is meant to become a service to our own community.

Our second motivation is to use the developed system as a showcase for the progress that has been made over the last years in precision-oriented deep linguistic parsing in terms of both efficiency and coverage, specifically in the context of the DELPH-IN community 3 . Our system also uses further NLP techniques such as unsupervised term extraction, named entity recognition and part-of-speech (PoS) tagging.

By automatically precomputing normalized se-mantic representations (predicate-argument struc-ture) of each sentence in the anthology, the search space is structured and allows to find equivalent or related predicates even if they are expressed differ-ently, e.g. in passive constructions, using synonyms, etc. By storing the semantic sentence structure along with the original text in a structured full-text search engine, it can be guaranteed that recall cannot fall behind the baseline of a fulltext search.

In addition, the Searchbench also provides de-tailed bibliographic metadata for filtering as well as autosuggest texts for input fields computed from the corpus  X  two further key features one can expect from such systems today, nevertheless very impor-tant for efficient search in digital libraries.
We describe the offline preprocessing and deep parsing approach in Section 2. Section 3 concen-trates on the generation of the semantic search in-dex. In Section 4, we describe the search interface. We conclude in Section 5 and present an outlook to future extensions. The basis of the search index for the ACL Anthol-ogy are its original PDF documents, currently 8,200 from the years 2002 through 2009. To overcome quality problems in text extraction from PDF, we use a commercial PDF extractor based on OCR tech-niques. This approach guarantees uniform and high-quality textual representations even from older pa-pers in the anthology (before 2000) which mostly were scanned from printed paper versions.

The general idea of the semantics-oriented ac-cess to scholarly paper content is to parse each sen-tence they contain with the open-source HPSG (Pol-lard and Sag, 1994) grammar for English (ERG; Flickinger (2002)) and then distill and index seman-tically structured representations for search.
To make the deep parser robust, it is embedded in a NLP workflow. The coverage (percentage of full deeply parsed sentences) on the anthology cor-pus could be increased from 65 % to now more than 85 % through careful combination of several robustness techniques; for example: (1) chart prun-ing , directed search during parsing to increase per-formance, and also coverage for longer sentences (Cramer and Zhang, 2010); (2) chart mapping , a novel method for integrating preprocessing informa-tion in exactly the way the deep grammar expects it (Adolphs et al., 2008); (3) new version of the ERG with better handling of open word classes; (4) more fine-grained named entity recognition, includ-ing recognition of citation patterns; (5) new, better suited parse ranking model (WeScience; Flickinger et al. (2010)). Because of limited space, we will fo-cus on (1) and (2) below. A more detailed descrip-tion and further results are available in (Sch  X  afer and Kiefer, 2011).

Except for a small part of the named entity recog-nition components (citations, some terminology) and the parse ranking model, there are no further adaptations to genre or domain of the text corpus. This implies that the NLP workflow could be easily and modularly adapted to other (scientific or non-scientific) domains X  X ainly thanks to the generic and comprehensive language modelling in the ERG.
The NLP preprocessing component workflow is implemented using the Heart of Gold NLP mid-dleware architecture (Sch  X  afer, 2006). It starts with sentence boundary detection (SBR) and regu-lar expression-based tokenization using its built-in component JTok, followed by the trigram-based PoS tagger TnT (Brants, 2000) trained on the Penn Tree-bank (Marcus et al., 1993) and the named entity rec-ognizer SProUT (Dro  X  zd  X  zy  X  nski et al., 2004). 2.1 Precise Preprocessing Integration with Tagger output is combined with information from the named entity recognizer, e.g. delivering hypo-thetical information on citation expressions. The combined result is delivered as input to the deep parser PET (Callmeier, 2000) running the ERG. Here, citations, for example, can be treated as either persons, locations or appositions.

Concerning punctuation, the ERG can make use of information on opening and closing quotation marks. Such information is often not explicit in the input text, e.g. when, as in our setup, gained through OCR which does not distinguish between  X  and  X  or  X  and  X . However, a tokenizer can often guess (recon-struct) leftness and rightness correctly. This infor-mation, passed to the deep parser via chart mapping, helps it to disambiguate. 2.2 Increased Processing Speed and Coverage In addition to a well-established discriminative max-imum entropy model for post-analysis parse selec-tion, we use an additional generative model as de-scribed in Cramer and Zhang (2010) to restrict the search space during parsing. This restriction in-creases efficiency, but also coverage, because the parse time was restricted to at most 60 CPU seconds on a standard PC, and more sentences could now be parsed within these bounds. A 4 GB limit for main memory consumption was far beyond what was ever needed. We saw a small but negligible decrease in parsing accuracy, 5.4 % best parses were not found due to the pruning of important chart edges.
Ninomiya et al. (2006) did a very thorough com-parison of different performance optimization strate-gies, and among those also a local pruning strategy similar to the one used here. There is an important difference between the systems, in that theirs works on a reduced context-free backbone first and recon-structs the results with the full grammar, while PET uses the HPSG grammar directly, with subsumption packing and partial unpacking to achieve a similar effect as the packed chart of a context-free parser.
In total, we parsed 1,537,801 sentences, of which 57,832 (3.8 %) could not be parsed because of lexi-con errors. Most of them were caused by OCR ar-tifacts resulting in unexpected punctuation character combinations. These can be identified and will be deleted in the future.

Figure 1 displays the average parse time of pro-cessing with a mild chart pruning setting, together with the mean quadratic error. In addition, it con-tains the distribution of input sentences over sen-tence length. Obviously, the vast majority of sen-tences has a length of at most 60 words 4 . The parse times only grow mildly due to the many optimiza-tion techniques in the original system, and also the new chart pruning method. The sentence length dis-tribution has been integrated into Figure 1 to show that the predominant part of our real-world corpus can be processed using this information-rich method with very low parse times (overall average parse time &lt; 2 s per sentence).

The large amount of short inputs is at first surpris-ing, even more so that most of these inputs can not be parsed. Most of these inputs are non-sentences such as headings, enumerations, footnotes, table cell content. There are several alternatives to deal with such input, one to identify and handle them in a pre-processing step, another to use a special root con-dition in the deep analysis component that is able to combine phrases with well-defined properties for inputs where no spanning result could be found.
We employed the second method, which has the advantage that it handles a larger range of phenom-ena in a homogeneous way. Figure 2 shows the change in percentage of unparsed and timed out in-puts for the mild pruning method with and without the root condition combining fragments.
Figure 2 shows that this changes the curve for un-parsed sentences towards more expected character-istics and removes the uncommonly high percent-age of short sentences for which no parse can be computed. Together with the parses for fragmented input, we get a recall (sentences with at least one parse) over the whole corpus of 85.9 % (1,321,336 sentences), without a significant change for any of the other measures, and with potential for further im-provement. In contrast to shallow parsers, the ERG not only handles detailed syntactic analyses of phrases, com-pounds, coordination, negation and other linguistic phenomena that are important for extracting seman-tic relations, but also generates a formal semantic representation of the meaning of the input sentence in the Minimal Recursion Semantics (MRS) repre-sentation format (Copestake et al., 2005). It consists of elementary predications for each word and larger constituents, connected via argument positions and variables, from which predicate-argument structure can be extracted.

MRS representations resulting from deep parsing are still relatively close to linguistic structures and contain more detailed information than a user would like to query and search for. Therefore, an additional extraction and abstraction step is performed before storing semantic structures in the search index.
Firstly, MRS is converted to DMRS (Copes-take, 2009), a dependency-style version of MRS that eases extraction of predicate-argument struc-ture using the implementation in LKB (Copestake, 2002). The representation format we devised for the search index we call semantic tuples , in fact quintu-ples &lt; subject, predicate, first object, second object, adjuncts &gt; ; example in Figure 3. The basic extrac-tion algorithm consists of the following three steps: (1) calculate the closure for each elementary pred-ication based on the EQ (variable equivalence) re-lation, and group the predicates and entities in each closure respectively; (2) extract the relations of the groups, which results in a graph as a whole; (3) re-cursively traverse the graph, form one semantic tu-ple for each predicate, and fill in the corresponding information under its scope, i.e. subject, object, etc.
In the example shown in Figure 3, entity groups like  X  X ur systems X ,  X  X he baseline X , and  X  X ood perfor-mance on the SRL task X , as well as predicate groups  X  X eating X  and  X  X chieved X  are formed at the first step. In the second step, the graph structure is extracted, i.e., the relation between the groups. Finally, two semantic tuples are filled in with both the predicates and the corresponding information. Notice that the modifier(s) of the entity belong to the same entity group, but the modifier(s) of the predicate will be put into the Adjuncts slot. Similarly, the coordina-tion of the entities will be put into one entity group, while the coordination of predicates will form mul-tiple semantic tuples.

Since we are extracting predicate-argument struc-ture, syntactic variations such as passive construc-tions and relative clauses will be all  X  X ormalized X  into the same form. Consequently,  X  X he book which I read X ,  X  X  read the book X , and  X  X he book was read by me X  will form the exact same semantic tuple &lt; I, read, the book, N/A, N/A &gt; . The resulting tuple structures along with their associated text are stored in an Apache Solr/Lucene 5 server which receives queries from the Searchbench user interface. The Searchbench user interface (UI) is a web appli-cation running in every modern, JavaScript-enabled web browser. As can be seen in Figure 4, the UI is divided into three parts: (1) a sidebar on the left ( Filters View ), where different filters can be set that constrain the list of found documents; (2) a list of found documents matching the currently set filters in the upper right part of the UI ( Results View ); (3) the Document View in the lower right part of the UI with different views of the current document.
A focus in the design of the UI has been to al-low the user to very quickly browse the papers of the ACL Anthology and then to find small sets of rele-vant documents based on metadata and content. This is mainly achieved by these techniques: (i) changes in the collection of filters automatically update the Results View; (ii) metadata and searchable content from both the Results View and the Document View can easily be used with a single click as new filters; (iii) filters can easily be removed with a single click; (iv) manually entering filter items is assisted by sen-sible autosuggestions computed from the corpus; (v) accidental filter changes can easily be corrected by going back in the browser history.
 The following kinds of filters are supported: Statements (filter by semantic statements, i.e., the actual content of sentences, see Section 4.1), Key-words (filter by simple keywords with a full-text search), Topics (filter by topics of the articles that were extracted with an extended approach of the un-supervised term extractor of Frantzi et al. (1998)), Publication (filter by publication title/event), Au-thors (filter by author names), Year (filter by pub-lication year), Affiliations (filter by affiliation or-ganizations), Affiliation Sites (filter by affiliation cities and countries) 6 . Found papers always match all currently set filters. For each filter type multi-ple different filter items can be set; one could search for papers written jointly by people from different research institutes on a certain topic, for example. Matches of the statements filter and the keywords filter are highlighted in document snippets for each paper in the Results View and in the currently se-lected paper of the Document View.

Besides a header displaying the metadata of the currently selected paper (including the automatically extracted topics on the right), the Document View provides three subviews of the selected paper: (1) the Document Content View is a raw list of the sen-tences of the paper and provides different kinds of interaction with these sentences; (2) the PDF View shows the original PDF version of the paper; (3) the Citations View provides citation information includ-ing link to the ACL Anthology Network (Radev et al., 2009).

Figure 4 shows the search result for a query com-bining a statement ( X  X btain improvements X ), a topic  X  X ependency parsing X  and the publication year 2008. As can be seen in the Results View, six papers match these filters; sentences with semantically sim-ilar predicates and passive voice are found, too. 4.1 Semantic Search The main feature which distinguishes the ACL An-thology Searchbench from other search applications for scientific papers is the semantic search in paper content. This enables the search for (semantic) state-ments in the paper content as opposed to searching for keywords in the plain text. Our use of the term  X  X tatement X  is loosely along the lines of the same term used in logic. Very simple sentences often bear a single statement only, while more complex sentences (especially when having multiple clauses) contain multiple statements. Each of the semantic tuples extracted from the papers of the ACL Anthol-ogy (cf. Section 3) corresponds to a statement.
The Statements filter is responsible for the seman-tic search. Statements used in filters may be under-specified, e.g., one may search for statements with a certain semantic subject but with arbitrary semantic predicates and objects. There are two ways in which a new statement filter can be set: (1) entering a state-ment manually; (2) clicking a sentence in the Doc-ument Content View and choosing the statements of this sentence that shall be set as new statement fil-ters (cf. Figure 5), i.e. it is possible to formulate and refine queries  X  X y example X .

Throughout the user interface, no distinction is made between the different kinds of semantic ob-jects and adjuncts so as to make it easy also for non-linguists to use the search and to be more ro-bust against bad analyses of the parser. Therefore, the different semantic parts of a statement are high-lighted in three different colors only, depending on whether a part is the semantic subject, the semantic predicate or anything else (object/adjunct).
In order to disengage even further from the con-crete wording and make the semantic search even more  X  X eaning-based X , we additionally search for synonyms of the semantic predicates in statement filters. These synonyms have been computed as an intersection of the most frequent verbs (semantic predicates) in the anthology corpus with WordNet synsets (Fellbaum, 1998), the main reason being re-duction of the number of meanings irrelevant for the domain. This relatively simple approach could of course be improved, e.g. by active learning from user clicks in search results etc. We have described the ACL Anthology Search-bench, a novel search application for scientific dig-ital libraries. The system is fully implemented and indexes 7,500 papers of the 8,200 parsed ones. For the other 700, bibliographic metadata was missing. These and the remaining 10,000 papers are currently being processed and will be added to the search in-dex. The goal of the Searchbench is both to serve as a showcase for benefits and improvement of NLP for text search and at the same time provide a use-ful tool for researchers in Computational Linguis-tics. We believe that the tool by now already sup-ports targeted search in a large collection of digital research papers better than standard web search en-gines. An evaluation comparing Searchbench query results with web search is in progress.

Optionally, the Searchbench runs in a linguistic debug mode providing NLP output a typical user would not need. These analyses are accessible from a context menu on each sentence (cf. Figure 4). Both a tabular view of the semantic tuples of a sentence (cf. Figure 3) and different kinds of information re-lated to the parsing of the sentence (including the MRS and a parse tree) can be displayed.

Future work, for which we are urgently seek-ing funding, could include integration of further NLP-based features such as coreference resolution or question answering, as well as citation classifi-cation and graphical navigation along the ideas in Sch  X  afer and Kasterka (2010).
 We are indebted to Peter Adolphs, Bart Cramer, Dan Flickinger, Stephan Oepen, Yi Zhang for their sup-port with ERG and PET extensions such as chart mapping and chart pruning. Melanie Reiplinger, Benjamin Weitz and Leonie Gr  X  on helped with pre-processing. We also thank the anonymous review-ers for their encouraging comments. The work de-scribed in this paper has been carried out in the context of the project TAKE (Technologies for Ad-vanced Knowledge Extraction), funded under con-tract 01IW08003 by the German Federal Ministry of Education and Research, and in the context of the world-wide DELPH-IN consortium.

