 such as costumer privacy and business secrets, cannot be breached in cloud computing system. Since it is of much difficulty to execute query and analysis operations on the encrypted data in traditional cryptosystem which focus on properties have been recently proposed to efficiently support the query over encrypted cloud dataset.
 out the k nearest points for a given query point. Because of its fundamental protocol for processing k -NN queries on R-tree index, where encrypted dataset cated computation and communication for securely searching k -NN nodes. The return approximate results in cloud. The work [ 9 ] puts forward an asymmetric scalar-product-preserving encryption (ASPE) scheme to securely support data-base outsourcing and k -NN query service on encrypted dataset. Nevertheless, query users have the access to the full key for encrypting and decrypting out-sourced data in ASPE, and cloud server can completely breaks the outsourced database once he obtains the key from any untrustworthy query user. The work [ 9 ] also gives an enhanced ASPE schme to resist the chosen-plaintext attack. However, [ 12 ] has proved that the enhanced ASPE in [ 9 ] cannot achieve the declared security under chosen-plaintext attack, and no accurate k -NN query scheme can resist the chosen-plaintext attack. Elmehdwi et al. X  X  scheme [ 17 ] time to encrypt each query point in a collaborative manner. It will introduce not only lots of computation burden and IT device cost to data owner, but also many communication overheads for each query. While a big number of queries are submitted for encrypting in a short period, data owner may become a bot-k -NN query scheme on encrypted cloud data which can support both data pri-query.
 In this paper, we focus on the data security and privacy problems of out-sourced database storage and k -NN query in cloud computing. Through enhanc-an online data owner for query encryption and computation, but can still pre-The main contributions of this work can be summarized as follows:  X  We present a new approach to encrypt the outsourced database and query points. It can effectively support k -NN computation over encrypted data, and strongly preserve the privacy of database and query points.  X  encrypting/decrypting the outsourced database to query users, but does not require an online data owner.
  X  Through analysis and extensive experiments, we evaluate the computation system model, design goals, some notations. Section 3 proposes our new secure k -NN query scheme on encrypted cloud data. Section 4 analyzes the overheads Sect. 6 concludes the paper. 2.1 System Model We consider the cloud computing model including three types of entities: one cloud server, one data owner and several query users. The cloud server has huge but bounded storage space and computation capability to provide out-sourcing data storage and query service. Data owner utilizes the cloud service sourced to cloud server. Let D and D  X  denote data owner X  X  original database and encrypted database, respectively. In this work, we assume that there are p vate d -dimensional query points. For the query point q =( q will locally encrypt her query points, and send the encrypted values to cloud server, who completes the k -NN computation and returns the index of k -NN and we use them interchangeably. 2.2 Threat Model and Design Goals Data Privacy. Data privacy requires that the plain dataset D is not revealed to anybody else except for data owner himself while outsourcing storage and as it can access the outsourced database D  X  in the system model. To prevent the attacker from learning the private plain data, only encrypted data will be points. This corresponds to the ciphertext-only attack in cryptography. the encrypted points. The attack is the same as known-sample attack in [ 15 ]. Level-3 attacker is supposed to also know all the numbers that data owner since data owner in [ 9 , 12 ] will share his decryption key with query users. Query Privacy. The query privacy requires that each query point is privately kept to the corresponding query user throughout the k -NN computation. Efficiency. Additionally, our scheme will preserve the security and privacy in an efficient and practical manner. Concretely speaking, (1) the key generation and database point encryption in data owner should be of high efficiency in (3) computing k -NN on the encrypted database should not notably increase the cost of cloud server comparing to that on plain dataset. Additionally, for the goals of outsourcing and data owner X  X  IT cost reduction, the query encryption owner. 2.3 Notations  X 
D  X  data owner X  X  database D = { p 1 , p 2 ,  X  X  X  , p m } , where  X || p ||  X  Euclidean norm of p  X 
D  X  encrypted D ,and D = { p 1 , p 2 ,  X  X  X  , p m } where p of p .  X  q  X  a query point, and q j denotes its j -th dimension.  X  q  X  the encrypted result of q .  X  M  X   X  X he i -th row of matrix M .  X I  X  index set of k -NN of query point q .  X  [ X ] X  X heset { 1 , 2 ,  X  X  X  ,X } , for any positive integer X .  X   X   X  a random permutation of several numbers 1  X  the permutation inverse to  X   X   X  A and U  X   X  A is a (2 d +2)  X  d matrix, and U is a (2 d + 2)-dimensional vector. They are the numbers that data owner discloses to query user, and will be used to generate encrypted query points. 3.1 Highlight of Our Scheme Let the ( d + 1)-dimensional vectors  X  p i =(  X  2 p i , || p scalar  X  p i  X   X  q , instead of Euclidean distance of p i p and q .
 In our secure scheme, data owner randomly generates a ( d + 1)-dimensional vector r  X  R d +1 and a permutation  X  of ( d + 1) numbers. Then,  X  (  X  2 p i , || p i || 2 )and  X  q =( q , 1) are permuted into  X  respectively. It is easy to say  X  p i  X   X  q =  X  p i  X   X   X  q dom vectors S and  X  ( q ) such that for all j  X  [ d + 1],  X  p  X  q dimension of vectors  X  p i ,  X  p i ,  X  q ,  X  q , S and we have Then, for all i, j  X  [ m ], there is  X  p i  X   X  q  X   X  p points of q can be exactly found out by adopting the new distance  X  is remarkable that  X  , r and S all are private information of data owner. The which will be later explained in detail.
 completed by data owner. Correspondingly, q is encrypted into Here,  X  is a positive random real number, M is a (2 d +2) invertible matrix, and they both are independently selected and privately kept by data owner. While computing the encrypted query point q the private plain query point q , but the other inputs, such as  X  , S communication between query user and data owner, thus it only reveals partial information about the key to query users, but data owner is required to be online all the time for encrypting each query point. In this paper, we propose a new secure k -NN query scheme on encrypted cloud data. Comparing to the for computing (  X  M 1  X   X   X  q ) which is the first dimension of The other dimensions of q can be obtained through similar steps. Here, we use two ( d + 1)-dimensional vectors M od 1  X  =( M tor by sequentially and alternately arranging each dimension of input vectors. For example, if a =( a 1 ,a 2 ,  X  X  X  ,a x )and b =( b 1 ,b ( a ,b vectors  X  M 1  X  =  X   X   X  1 (  X  M od 1  X  ) ,  X   X  1 (  X  M ev q owner, we generate the random vector  X  ( q ) as follows.
 Data owner selects a random ( d + 1)-dimensional vector ( X ,X 2 ,  X  X  X  ,X d +1 ), and  X  ( q ) inherently equals to  X  ( of  X  q ) is not visibly computed in our scheme and no one knows it. Further, there is  X  q =  X   X  q ,  X   X  1 (  X  ( q ) ) =  X   X  q , X +  X  M and the permutation  X  , he can calculate the sum  X  j =  X  (for all j  X  [ d + 1]) and u = d +1 j =1 X j  X  M 1 , 2 j q =  X  M 1  X   X   X  q =  X  M 1  X   X   X  q = u + d +1 j =1  X  j  X  q Since the last dimension of  X  q is a constant 1 (i.e.  X  q disclosed to query users can be further revised to the set U Similarly, for i =2to2 d + 2, query user can access the data set {
A dimension q i . Thus, if data owner reveals the matrix A =[ A tor
U =( U user by q = U T + Aq T .
 At last, we further adjust our scheme to enhance the security. While regis-tering with the system, each query user independently generates a random d invertible matrix W and submits it to data owner, then data owner releases matrix  X  A and vector U to the corresponding query user, where Then, her query encryption can be completed by computing q As  X  A and U can be figured out based on matrix M , permutation random parameters  X  and X , then, each number in  X  A and on the values of any query point. Hence, data owner can compute and outsourcing the encrypted database to cloud, query user can complete the index set of k -NN for the encrypted query points, therefore data owner is not our scheme. 3.2 Formal Steps of Our Scheme section. base, then he will distribute the random matrix  X  A and vector query user for encrypting query points. W is a d  X  d random invertible matrix but  X  A and W is randomly generated by individual users, and no query user data owner. The steps of this stage are as follows.
 two ( d + 1)-dimensional vectors r =( r 1 ,r 2 ,  X  X  X  ,r d +1 S generates a random positive number  X   X  R + and a random ( d + 1)-dimension vector X =( X 1 ,X 2 ,  X  X  X  ,X d +1 )  X  R d +1 , and for all i Then, data owner computes a (2 d +2)  X  d matrix A and a (2 d + 2)-dimensional vector U =( U 1 ,U 2 ,  X  X  X  ,U 2 d +2 ) by the following way, Here, M ij is the value in row i , column j of matrix M , dimension of  X  M i  X  ,and A i  X  denotes the i -th row of matrix required to make the rank of A be less than d .
 While each query user registers in the system, the query user independently selects a d  X  d random matrix W , and sends the matrix to data owner, then the her local computation of encrypted query points, where  X  A completed by only the data owner. Every point is encrypted as a single unit. The output is the encrypted database D = { p i | p i  X  D } ( r ,r and extends  X  p i to the (2 d + 2)-dimensional vector  X  of  X  p . Then, data owner obtains the encrypted result and uploads p i to cloud server.  X  QEnc ( q , U ,  X  A , W )  X  X  q } : Taking the private point inputs, query user locally encrypt the query point q into steps.
 After obtaining vector U and matrix  X  A , query user can locally encrypt each query point q =( q 1 ,q 2 ,  X  X  X  ,q d )into q =( q 1 ,q 2 , Here, A ij is the element in row i , column j of matrix A dimension of U ,and W jt is the value in row j , column t of matrix  X  KNNComp ( D , q , k )  X  X I q } : Query user uploads q to cloud server, then cloud server computes the index set of k -NN in D of the encrypted query point q according to the distance p  X  q , and sends the index set I q of the k -NN in D to the corresponding query user. 4.1 Cost Analysis Computation Complexity . During key generation, it takes data owner O ( d time to generate Key = { r , S , M ,  X  } and O ( d 2 ) time to compute In database encryption stage, data owner spends O ( d 2 ) computation time on of the total database.
 While encrypting query points, our approach takes O ( d tion/multiplication operations to compute one encrypted query point, which is completed by query user.
 In outsourcing k -NN computation stage, cloud server can compute the k -NN k -NN points where m is the number of points in D . The computation complexity of KNNComp is O ( md log k ).
 Communication Overheads. We analyze the communication overheads from are transferred between data owner and each query user, and no communica-tion occurs in the stage QEnc of our scheme, thus, communication overheads of k indexes to query user, which cost k X  bits. 4.2 Security Analysis Data Privacy . We guarantee the data privacy of our scheme by Theorem 1 . Theorem 1. The encrypted database D in our scheme is secure against level-2 attack.
 obvious that our encryption is more secure than the simple matrix encryption p i =  X  completes the proof of the theorem.
 will discuss data privacy in level-3 attack, i.e., the attacker obtains matrix and vector U except all the data a level-1 attacher knows.
 Security against Level-3 Attacker. While obtaining matrix from some untrustworthy query users, the attacker cannot infer the matrix has shown that even if attaining  X  ( M i, 2 j + M i, 2 j  X  D .AccordingtoEq.( 2 ), the matrix A in our scheme just consists of  X  ( M M randomly permuted. Here, the coefficient  X  is also randomly selected by data owner. Therefore, our scheme can resist level-3 attacker as well. Query Privacy. Since query user only sends encrypted query points to cloud server and data owner learns nothing about the query points, we will analyze scheme, cloud server can legally learn the encrypted value point q , where q = U T +  X  AW q T . We discuss the query privacy from two levels as follows. ( i ) Cloud server knows encrypted query points, encrypted database D and the view of cloud server, it cannot infer q from q . ( ii ) Except the data in above first level, cloud server also receives from some untrustworthy query users. Then, the cloud can obtain an equation In this situation, the cloud server still cannot figure out the query point two reasons: ( ii -1) Because  X  A = AW  X  1 and the rank of matrix cannot be inferred while the attacker learns  X  A and q  X  U random matrix W is kept private to data owner and the corresponding query user, therefore, query privacy can also be well preserved even if cloud server works out an accurate estimation of ( Wq T )fromEq.( 7 ).
 4.3 Comparison Computation Complexity Comparison . In Table 1 , we compare the compu-computation cost in key generation is used to create random key for encrypt-ing database and query points. In our scheme, each query user will submit a duces O ( d 2 ) expense to query user, but each query user only does this once regardless of the number of her query points. During encrypting the database for outsourcing, each solution takes almost the same computation cost. While encrypting each query points, ASPE and our approach do not need an online scheme costs O ( md log k ) in the stage KNNComp .
 stage comparing to ASPE  X  the most efficient one, but our approach is secure against level-3 attack in which situation the outsouced database in ASPE will be entirely breached. Since it only needs to compute the distributed key once per query user, the KeyGen of our scheme is also practical, which will be fur-requires that data owner must be online for encrypting each query points, thus its query encryption is much more time-consuming than that of ASPE and our new scheme, especially when each query user wants to encrypt a big number of query points.
 Comparison of Security and other Properties . Table 2 further compares in [ 13 , 14 ] and our solution can achieve better security than ASPE, but our scheme has an obvious advantage that it does not require an online data owner. The property, that need no online data owner, denotes the query users can securely complete each k -NN query through directly communicating with cloud server after the outsourced database is uploaded to cloud and the query user has gained necessary data (such as the key) while registering with the system in
KeyGen stage. Comparing with the scheme in [ 13 , 14 ], our main advantage is communication and computation overheads and the IT expense of data owner, system. In this section, we evaluate and compare the performance of ASPE, the approach Windows XP operating system with Intel(R) Core(TM) i5-2430M 2.40 GHz CPU and 2.0 GB memory. Every scheme is implemented using Microsoft Visual C++. The experiment results show that key generation in our scheme cost a little more time for generating the key than that in the existing solutions, but our scheme still takes less than 1 ms to complete key generation even when d is as high as 100.
 We further evaluate the encryption time for m = 10 K to 100 K (here, K=10 and d = 2 to 100. Figure 1 (1) shows the running time while m equals to 60 K with d = 10. As we can see from the figures, our new approach expends almost encrypting the database of 100 K 10-dimensional points. While m =60Kand d = 100, the database encryption time of our scheme is still less than 43 s. Therefore, the database encryption costs are relatively practical. For query encryption, our running time is similar to that of ASPE, which during the query encryption of our solution and ASPE. While query point is 100-dimensional, our scheme can encrypt one point within 1 ms. scanning to compute the k -NN points. For the encrypted database with the same number of points in the same dimension space, the query time is exactly the same as each other. In this paper, we proposed a new secure outsourcing storage and k -NN query scheme, which can well preserve the privacy of database and query points in cloud, and efficiently support k -NN query on encrypted data. We also consider the security against the attacker who learns the data that data owner releases extensive experiments confirm the above properties of our approach. collusion attack of cloud server and malicious query users.

