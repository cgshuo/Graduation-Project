 Online social networks (OSNs), such as Twitter, Facebook, Sina Weibo, Renren and Foursquare, have become more and more popular in recent years. Each social network can be represented as an individual graph and focuses on a speci Oftentimes, people are getting involved in numeric social networks concurrently. For example, we can access the latest news from Twitter and Sina Weibo, post our photos using Foursquare. Thus, it comes as no surprise that many users often have multiple separate accounts in different OSNs, although there are no direct correspondences or connections among these multiple accounts belonging to the same users from different networks. Discovering the correspondences between accounts of the same user, i.e. social prerequisite for many practical Web based applications, such as detecting more providing better customer support and personalized services matching the user pref-Foursquare. However, existing research (such as [ 3  X  8 ]) have showed that it is very media platforms. The main reason is that users and social platform operators take extremely strict measures to avoid divulging user personal information. Previous studies (such as [ 7 , 9 , 10 ]) assume that they can collect rich user works, existing methods mainly employ supervised learning techniques [ 3 , 7 , 8 , 11 (with an exception which uses unsupervised learning [ 14 ]) to build binary classi private information in many real-world applications. As such, existing research will suffer when only incomplete information is available.
 handle huge amount of potential account pairs from different OSNs. Particularly, the computational cost for identifying pair-wise accounts is N number of accounts in source and target networks, respectively). We can imagine how many account pairs could be generated given each OSN could have more than 1 billion to perform the intensive classi fi cation task.
 In this paper, we employ open APIs, provided by the social platform operators, to only collect the publically available attributes, including 6 user pro friend network attribute. Thus, we are handling the SIL problem in a dif practical scenario with incomplete information sources. In addition, we also observe that many pro fi le attributes have missing or false values, making this research even more challenging. Additionally, to tackle the second challenge, contrast to existing standard classi fi cation methods, we leverage anchor link information and propose a largely reduces the search space and is thus more feasible than existing methods for handling those real-world large scale OSNs. link was formalized as connecting identity problem across communities in [ 3 early stage. Subsequently, various methods were proposed.
 The performance of existing methods largely relies on the extracted features, from user pro fi les, user generated content, behaviors and friend networks. Some research user, based on the assumption that same users will have the similar names from created by a user, i.e. timestamp of posts, geo-location attached to post and writing social links. Another research explores the social meta path concept (which is a means to capture connection information in the social networks) to generate useful compound features from friendship, location, timestamp of post and post content [ 21 ]. Some works have shown that other information about users, like their group memberships suf fi cient enough to achieve good performance.
 limited or incomplete features and thus much worse results. In addition, the existing link to overcome the above two weaknesses from the existing methods.  X  : V ( G )  X  P maps each account in V ( G ) to a natural person in P . Social Identity Link, SIL. Given an account I i S from a source network G ( G
S )), social identity link problem is to fi nd a corresponding account I network G T (i.e. I j T 2 V ( G T )), such that  X  S ( I i fact, formula should be associated with a certain probability or con pairs where one account from source anchor set AR S in G S from target anchor set AR T in G T : ALS ={( ar i S , ar i provided, ar i S 2 AR S , AR S V ( G S ), ar i T 2 AR T , AR either questionnaires or rule-based fi ltering methods.
 local expansion algorithm iteratively searches the new putative social identity links until they cannot be found. Figure 1 shows the key idea of our proposed method. Given and then we try to fi nd a best matching account from G T sequence ( ar i S , ar i T )  X  (3 S ,1  X  T )  X  (5 S ,4  X  T This detailed algorithm is shown in Algorithm 1. In step 1, we initialized a queue Q as an empty set, which will be used to store the given anchor nodes in AR generated anchor nodes from source network. We also initialize an output set O . Steps 2 and 3 mark all the nodes in the source network as  X  unvisited will go through all the anchor nodes ar i in AR S and generated anchor nodes. Particu-larly, for each unvisited anchor node in the source network (step 8), we neighbors (step 9). Then, for each of the neighbors, function FindSIL () in step 10 is used to fi nd the best match account in the target network introduced in next section. Step 11 will add the newly generated anchor nodes from the source network into the queue Q . Finally, the results are returned in the step 13. The worst-case time complexity of Algorithm 1 is O (| V ( G | V ( G )| and | E ( G S )| are the number of accounts and the number of edges between users in source network G S respectively.
 particular, given an anchor link ( ar i S , ar i T )and ar matching account I j T is likely to locate in a small range of the anchor account ar is because, the friend connections in one network have higher chance to be re-occurred in another network either directly (re-occurrence connections) or indirectly (friends friends). As such, our proposed technique can largely reduce the search space based on this novel idea. Our goal is to solve SIL problem with minimum expected computational cost. We de fi ne search range and use it to control computational cost in the target network G u and end at v . Note d ( u , v )is  X  if v is not reachable from u : Search Range. Given an anchor link ( ar i S , ar i T ) where ar and G T respectively, the search range R d ( ar i T ) around ar R R than or equal to in fi nity; that is to say, R d  X  inf ( ar space. The effect of the parameter d on the system performance of user identi discussed in the Subsect. 6.2 in detail. We introduce how to select a best match account from the candidate set. Particularly, we fi rst de fi ne some distinguishing features in nickname, hometown and friend net-work. Learning models are subsequently used to fi nd the best match accounts. 5.1 Features De fi nition (1) Nickname Similarity: Features derived from the nickname have been widely pairs (which is created manually for the same users from different social platforms.) possess different nicknames. Nonetheless, we fi nd that many pairs of different nick-namesbelonging tosameusers are somewhatrelated.Wehaveperformed comparison of these ground-truth social links and summarized the most frequent relationships between two nickname pairs as follows: (1) there exists a common substring, such as (  X   X   X  ,zjp  X   X  042); (2) a common substring occurs many times in one nickname, such as (  X   X   X  ,  X   X  X  X  X  X  X  X  ); (3) there are no differences if Chinese characters are converted into alphabets, such as (  X   X   X  ,  X   X   X  ) (both are Fan Yizheng). In order to tackle the case (3), we convert Chinese characters into their corresponding alphabets when there are mismatches between two nicknames written in Chinese characters.
 de fi nitions. We denote the nickname of an account by Ni (.) for two accounts I common substring between two nicknames, which is implemented by the gen-eralized suf fi x tree [ 25 ]. We de fi ne q =| lcs ( Ni ( I longest continuous common substring between Ni ( I i S ) and Ni ( I s to represent the frequency which lcs ( Ni ( I i S ), Ni ( I and in all nicknames respectively. Finally, function len (.) and max (.) are used to compute the length of a nickname, and the maximum nickname length. as follows: NiS ( I i S , I j T )=( CoC ( Ni ( I i S ), Ni ( I
Ni ( I j T )) + SpS ( Ni ( I i S ), Ni ( I j T )))/4, where CoC ( Ni ( I ( I i S ), Ni ( I j T )) = q / max ( len ( Ni ( I i S )), len ( Ni ( I the longest common substring . ReS ( Ni ( I i S ), Ni ( I common substring . SpS ( Ni ( I i S ), Ni ( I j T )) = 1 = rarity of the longest common substring in all nicknames. Typically, those account pairs with less rare longest common substring will get higher similarity than those frequent ones, as they are more helpful for identi fi cation purpose. (2) Hometown Similarity: We observe that different social networks could have different types of location information. Sina Weibo and Twitter only possess the current location, while Renren and Facebook possess many different types of locations, such as hometown, current city and workplace. Because hometown in
Renren may be different from current location in Sina Weibo for same users (we could move to other places for education or to make a living), we are facing a very challenging task, i.e. how to compute hometown/location similarity based on different types of location information.

One is that the hometown is still the same as the current location for some account pairs. For example, in our ground-truth linked account pairs, there are 46 % of account pairs, of which location in Sina Weibo is the same as hometown in
Renren (they are kind of permanent dwellers in their hometown). The other is that, empty, the CH 1 ( I i S , I j T ) is not empty, and l h appears in CH l formula (5), in which a is used to re fl ect the contribution of l
HoS ( I i S , I j T ) is equal to 0.3. (3) Friendliness : We suppose that accounts ar i S and ar
I
S is a neighbor of ar [ 26 ] can be used to indirectly explain this underlying inference. which is related to the parameter d . Then, FrS ( ar i T , I following metrics: (1) FrS 1 ( ar i T , I j T )=1, d  X  1; (2) FrS d  X  2; (3) FrS 3 ( ar i T , I j T )=| CN ( N ( ar i T ), I common neighbors between two accounts, | CN (.)| is the size of CN (.). 5.2 Decision Model on Pairwise Similarity (1) Machine Learning Models: Existing studies on the social identity link identi-fi cation mainly rely on the supervised classi fi cation model. There are four clas-si fi cation models, namely multilayer perceptron (MLP) in [ 4 ], support vector machine (SVM) in [ 7 , 14 ], logistic regression (LR) in [ 8 ], and Naive Bayes (NB) in [ 15 ], which have been demonstrated to perform well for this problem. As such, we also build these four classi fi cation models using our labeled dataset so that we can apply them to select the best match account from the candidate set in the target network. The experiments are described in detail in Subsect. 6.2 . The results reported in Fig. 3 show that LR and MLP models are more accurate. Thus, we select LR and MLP models for our experiments on the whole dataset. (2) Algorithm for Finding the Best Match Account: After all problems mentioned 6.1 Experimental Setup (1) Data Preparation: As there is no publicly available benchmark datasets for social (2) Evaluation Metrics: We conduct our experiment on both the small set of labeled wrong ratio ( Wr ) are computed as follows: Pr = tp / total , Ur = up / total , Wr = fp / total . In addition, we evaluate the proportion of predicted account pairs in whole data set. We de fi ne the coverage ratio ( Cr )as Cr = total / min ( N where N 1 and N 2 are the number of accounts in the source network and target network, respectively. (3) Comparative Methods: In this subsection, we compare our proposed methods with the following state-of-the-art methods. (1) Nickname Similarity Method ( NSM ): Many features extracted from nicknames (2) Rule -based Filtering Method ( RFM ): The rule-based (3) Our Method based on Logistic Regression ( OM -LR ): we use LR model to (4) Our Method based on Multilayer Perceptron ( OM -MLP ): we use MLP model 6.2 Experimental Results We fi rst aim to fi nd the best classi fi cation models through performing experiments on some negative instances where the number of negative instances is determined by an imbalance ratio and the number of positive instances.
 We partition the dataset into two groups using 10-fold cross validation (CV). Note this is different from standard CV as we use less training data and more test data, to iteration of the cross validations, we sample the negative account pairs according to different imbalance ratios. Figure 3 shows the performance comparison of 4 different classi fi cation models under 4 different imbalance ratios (1:5). From Fig. 3 , LR and MLP get better performance than the other two methods, and their performance is very close. So we choose both LR and MLP models for selecting the best match account from candidates.
 and RFM methods, based on the large set of unlabeled ground-truth data. As the range includes all accounts from the target network ( d = inf ). Our methods use 186 randomly selected anchor links only and Table 1 shows experimental results for dif-ferent methods. The fi rst four columns show the performance in terms of various and the last column Total is the total number of predicted account pairs. observe that rule based method RFM , albeit accurate (with highest precision), its coverage ratio Cr = 5.4 %, is much lower than 13.7 % and 13.1 % of our proposed OM-LR and OM-MLP respectively. In addition, the number of correct account pairs identi fi ed by RFM is much less than that by our OM-LR and OM-MLP. In summary, our methods, especially OM-LR, can identify much more correct social links than existing methods, which cannot be identi fi ed by both NSM and RFM methods. Finally, we evaluate the effectiveness of OM-LR and OM-MLP under different values of parameter d. Fig. 4 ( a ) shows the cumulative percentage of the matched account pairs with regard to the different d . About 80 % of account pairs are matched with d  X  2 by the OM-LR or OM-MLP. In particular, there are about 50 % of matched account pairs, in which each account from the target network is found in R the different d . About 90 % of account pairs are correctly matched with d OM-LR or OM-MLP. Only about 7 % of account pairs are correctly matched with d  X  5. These statistics reveal that most of correct social links can be found in small range ( d  X  2) around their anchor links and generated anchor links. As such, our 6.3 Ef fi ciency Evaluation In existing methods, the computational cost of identifying pair-wise accounts is N ( N and N 2 are the number of accounts in G S and G T respectively). For our method, the computational cost is estimated as follows.
 Given an account I i S in G S and an anchor link ( ar i S the search range R d ( ar i T )of I i S is denoted by | R R tree by Tr ( G T ), and let the average number of friends per account in Tr ( G we can compute the number of accounts of Tr ( G T )by N 2  X  ( k  X  ) m . Obviously, N Let us consider real social networks described in the Subsect. 6.1 . The average shortest path length of RenRen is about 5 (that was also con Assume m = 4, which is less than the actual value. Then the average number of friends per account in G T is about 340 computed by k 2 =2 E 2 / N 93 % of account pairs are correctly matched with d  X  3 in our methods, the number of accounts in the search range can be estimated by | R d  X  3 R ( ar i T )| = k 2  X  +( k 2  X  ) 2 +( k 2  X  ) 3  X  k 2 + k 2 than N 2 = 40,618. If we assume m = 5, then the number of accounts in the search range | R ( ar i T )| = 3,766, which is smaller than that m =4.
 Next, we also use the total execution time to evaluate the ef methods. We conduct experiments on our methods with different parameter values, i.e. d = inf and d  X  3, where d = inf represents the computational cost N denotes the computational cost N 1 | R d  X  3 ()|. The parameter d about 93 % of account pairs are correctly matched with d  X  experiments and latency observations are conducted on a PC, with Intel X  Core i5-4460 processor and 8 GB main memory.
 Figure 4 ( c ) shows the relationship between the number of the matched accounts and the time cost. The time cost of OM-LR ( d  X  3) and OM-MLP( d less than the time cost of OM-LR( d = inf ) and OM-MLP ( d = inf ) for identifying the same number of account pairs. Of course, the high ef fi ciency of OM-LR( d and OM-MLP with the same d value is very close. In this paper, we address the problem of linking user accounts of the same natural person across different social networks. Our proposed method is based on our unique friends/neighbors in different social platforms should still be directly or indirectly connected to itself. Based on the theoretical assumption, we propose a novel method, which is to link accounts across different social platforms using the local expansion strategy . Experimental results demonstrate that our proposed method outperforms applied to link up user accounts across other Chinese or English social networks (e.g. Twitter and Facebook), as long as we can collect their large-scale network data.
