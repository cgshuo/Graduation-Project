 Users X  behaviors (actions) in a social network are influence d by var-ious factors such as personal interests, social influence, a nd global trends. However, few publications systematically study ho w social actions evolve in a dynamic social network and to what extent dif-ferent factors affect the user actions.
 In this paper, we propose a Noise Tolerant Time-varying Fact or Graph Model (NTT-FGM) for modeling and predicting social ac -tions. NTT-FGM simultaneously models social network struc ture, user attributes and user action history for better predicti on of the users X  future actions. More specifically, a user X  X  action at time t is generated by her latent state at t , which is influenced by her at-tributes, her own latent state at time t  X  1 and her neighbors X  states at time t and t  X  1 . Based on this intuition, we formalize the social action tracking problem using the NTT-FGM model; then prese nt an efficient algorithm to learn the model, by combining the id eas from both continuous linear system and Markov random field.
Finally, we present a case study of our model on predicting fu -ture social actions. We validate the model on three differen t types of real-world data sets. Qualitatively, our model can disco ver inter-esting patterns of the social dynamics. Quantitatively, ex perimental results show that the proposed method outperforms several b aseline methods for social action prediction.
 H.2.8 [ Database Management ]: Data Mining; J.4 [ Computer Applications ]: Social and Behavioral Sciences Algorithms, Experimentation Social action tracking, Time-varying factor graphs, Socia l influ-ence analysis
This work was done when the last two authors are visiting Ts-inghua University.

With the success of many large-scale online social networks , such as Facebook, MySpace, Ning, and Twitter, social networ k analysis has become a popular research topic, attracting tr emen-dous interests from mathematics, biology, physics, comput er sci-ence, and sociology. Considerable research has focused on fi nd-ing the macro-level mechanisms of the social influence such a s degree distributions, diameter, clustering coefficient, c ommunities, and small world effect [1, 8, 21, 28]. However, these methods pro-vide us with limited insights into the micro-level dynamics of the social network such as how an individual user changes his beh av-iors (actions) and how a user X  X  action influences his friends .
It is well recognized that users X  actions in a social network are influenced by various complex and subtle factors [11, 17]. In this work, we address the social action tracking problem: i.e., h ow to simultaneously model the social network structure, user at tributes and user actions over time?
Recently, quite a few related studies have been conducted, f or example, dynamic social network analysis [12, 16, 19, 24, 25 ], so-cial influence analysis [2, 6, 7, 15, 23, 29, 20], and group beh avior analysis [3, 13, 26, 31]. The social action tracking problem ad-dressed in this paper is very different from these works. Dyn amic social network analysis is to model how friendships drift ov er time using a dynamic model [24] or to investigate how different pr e-processing decisions and different network forces such as s election and influence affect the modeling of dynamic networks [25]. S o-cial influence analysis either aims to verify the existence o f social influence [2, 6, 7, 15, 23] or tries to quantify the strength of the influence [10, 29]. Group behavior analysis intends to study the patterns of user joining different communities [26], or to l earn the classification patterns based on the network structure and c ontent information [31], or to study the statistics of user groups [ 3]. In the social action tracking problem, we try to model the various f actors that may influence users X  dynamic behaviors (actions) into a unified model.
 Motivating Examples To clearly motivate this work, we con-duct the following analysis on three real social networks: T wit-ter 1 , Flickr 2 , and Arnetminer 3 . On Twitter, we define the action as whether a user discusses the topic  X  X aiti Earthquake X  on his mi-croblogs (tweets). On Flickr, we define the action as whether a user adds a photo to his favorite list. On Arnetminer, the act ion is defined as whether a researcher publishes a paper on a speci fic conference (or journal). The analysis includes three aspec ts: (1) social influence; (2) time-dependency of users X  actions; (3 ) action http://www.twitter.com, a microblogging system. http://www.flickr.com, a photo sharing system. http://arnetminer.org, an academic search system. Figure 1: Social influence. The x-axis stands for the percentage of Figure 2: Time-dependency of users X  actions. The x-axis stands correlation between users. Figure 1 shows the effect of soci al influ-ence. We see that with the percentage of one X  X  friends perfor ming an action increasing, the likelihood that the user also perf orms the action is increased. For example, when the percentage of one  X  X  friends discussing  X  X aiti Earthquake X  on their tweets incr eases the likelihood that the user posts tweets about  X  X aiti Earthqua ke X  is also increased significantly. Figure 2 illustrates how a use r X  X  action is dependent on his historic behaviors. It can be seen that a s trong time-dependency exists for users X  actions. For instance, o n Twit-ter, averagely users who posted tweets about  X  X aiti Earthqu ake X  will have a much higher probability (+20-40%) to post tweets on this topic than those who never discussed this topic on their blogs. Figure 3 shows the correlation between users X  actions at the same timestamp. An interesting phenomenon is that friends may pe r-form an action at the same time. E.g., on Twitter, two friends have a higher probability (+19.6%) to discuss  X  X aiti Earthquake  X  than two users randomly chosen from the network.

Thus, the problem becomes how to effectively and efficiently track the dynamic users X  actions. This problem is non-trivi al and poses a set of unique challenges.

First, the social network data (e.g., network structure and so-cial actions) are very noisy. Users performing the same acti on may not have the same preference towards that action. Likewi se, users who did not perform the action do not mean they have no interests towards the action. Second, user behaviors are hi ghly time-dependent. For example, the influence of a user on anoth er (strongly) depends on their historic interactions. Third, users X  ac-tions are usually correlated. In addition, as real social ne tworks are getting larger with thousands or millions of users. It is imp ortant to develop the model that can scale well to real large data sets. Contributions In this paper, we try to systematically investigate the problem of social action tracking with the following con tribu-tions: Figure 3: Action correlation. The x-axis stands for different time
The rest of the paper is organized as follows: Section 2 forma lly formulates the problem; Section 3 explains the proposed mod el. Section 4 presents the algorithm for learning the model. Sec tion 5 gives experimental results that validate the effectivenes s and the computational efficiency of our methodology. Finally, Sect ion 6 discusses related work and Section 7 concludes.
In this section, we first give several necessary definitions a nd then present a formal definition of the problem.
 A static social network can be represented as G = ( V, E ) , where V is the set of | V | = N users and E  X  V  X  V is the set of directed/undirected links between users. Given this, we ca n define the user X  X  action as follows.

Definition 1. Action : An action y performed by user v i at time t can be represented as a triple ( y, v i , t ) (or shortly y the set of actions of all users at time t . Further we denote all users X  actions as the action history Y = { ( y, v i , t ) } i,t .
Without loss of generality, we first consider the binary acti on, that is y t i  X  { 0 , 1 } , where y t i = 1 indicates that user v an action at time t , and y t i = 0 indicates that the user did not per-form the action. Such an action log can be available from many online systems. For example, on Twitter, the action y t i fined as whether user v i posts a tweet (microblog) about a specific topic (e.g.,  X  X aiti Earthquake X ) at time t . Further, we assume that each user is associated with a number of attributes and thus h ave the following definition.
 Definition 2. Time-varying attribute matrix : Let X t be an N  X  d attribute matrix at time t in which every row x i corresponds to a user, each column an attribute, and an element x ij is the j attribute value of user v i .

The attribute matrix describes user-specific characterist ics, and can be defined in different ways. For example, on Twitter, eac h attribute can be defined as a keyword and the value of an attrib ute can be defined as the frequency of a keyword occurring on a user  X  X  posted tweets. Thus, we can define the input of our problem, a s et of attribute augmented networks.

Definition 3. Attribute augmented network : The attribute augmented network is denoted as G t = ( V t , E t , X t , Y V t is the set of users and E t is the set of links between users at time t , and X t represents the attribute matrix of all users in the network at time t , and Y t represents the set of actions of all users at time t .
Based on the above concepts, we can define the problem of so-cial action tracking. Given a series of T time-dependent attribute augmented networks, the goal is to learn a model that can best fit the relationships between the various factors and the user a ctions. More precisely, Problem 1. Social action tracking. Given a series of T time-dependent attribute augmented networks { G t = ( V t , E t , X t , Y t ) } , where t  X  { 1 , , T } , the goal of social ac-tion tracking is to learn a mapping function
Note that in this general formulation, we allow the graph str uc-ture to evolve over time and also arbitrary dependency from t he past. To have a tractable problem to work with, we model the time-dependency by introducing a latent state for each user . More specifically, their actions are generated by their latent st ates, which are dependent on their neighbors X  states at time t and t  X  1 .
Our formulation of social action tracking and prediction is quite different from existing work on dynamic social network anal ysis. Scripps et al. [25] investigate how different pre-processi ng deci-sions and different network forces such as selection and infl uence affect the modeling of dynamic networks. Sarkar and Moore [2 4] propose a dynamic model that accounts for friendships drift ing over time. Both papers consider using user similarity and social struc-ture to predict links between social users. Tang et al. study the topic-level social influence and Goyal et al. [10] investiga te how to learn the influence probabilities from the history of users X  actions. Both learned model can be used for action prediction. Howeve r, the methods do not consider user X  X  own attributes and historic a ctions. One X  X  action should be determined by his intrinsic preferen ce to some extent. As for social influence analysis, there are quit e a lot of publications focusing on measuring the existence of influ ence qualitatively [2, 27], but most of these methods do not consi der modeling and predicting user actions.
To summarize, for modeling and tracking social actions, we h ave the following intuitions: 1. Users X  actions at time t are influenced by their friends X  his-2. Users X  actions at time t are usually dependent on their previ-3. Users X  actions at a same time t have a (strong) correlation.
Moreover, the discrete variable y t i only models the user X  X  action at a coarse level, but cannot describes the intention degree of the user to perform an action. Directly modeling the social acti ons Y would inevitably introduce noise to the model. Hence, a cont inuous variable for modeling the action bias is favorable.

With the intuitions discussed above, we propose a noise tole r-ant time-varying factor graph model (NTT-FGM) for social ac tion Figure 4: Graphical representation of the NTT-FGM model. tracking. Before explaining the model in detail, we first int roduce the definition of latent action state.

Definition 4. Latent action state : For each user X  X  action y define a (continuous) latent state z t i  X  [0 , 1] , which corresponds to a combination of the observed action y i and a possible bias, to de-scribe the actual intention degree of the user to perform the action. Figure 4 shows the graphical structure of the NTT-FGM model. An action of user v i at time t , i.e., y t i is modeled by using a (con-tinuous) latent action state z t i , which is dependent on friends X  his-toric actions z t  X  1  X  v i (where  X  v i represents friends of user v the network), users X  action correlation z t  X  v x . Specifically, in the NTT-FGM model, each discrete action is mapped into the latent state space and the action bias is mode led using a factor function. For example, for y t i = 1 , a small value of its corresponding z t i suggests that a user v i has a low intention to perform the action, thus a large action bias | y t i  X  z fluence between users is modeled using the latent states base d on the same assumption as in HMM [9] and Kalman Filters [14]: la-tent states of users X  actions at time t are conditionally independent of all the previous states given the latent states at time t  X  1 . Fi-nally, actions X  correlation is also modeled in the latent st ate space. A Markov random field is defined to model the dependency (cor-relation) among the continuous latent states. Different fr om the traditional Markov random field model (e.g., CRF [18], HMM [9 ], Kalman Filters [14]), the NTT-MRF model uses a continuous va ri-able to describe the latent state, and utilizes a combinatio n of mul-tivariate Gaussian function and Markov random field to incor porate both time-inter and time-intra dependency between users X  a ctions. Now, we explain the proposed NTT-FGM model in detail.
 T , | V | = N , we can define the joint distribution over the actions Y given G as where notation  X  v i represents neighbors of v i in the social net-work. The joint probability has three types of factor functi ons, cor-responding to the intuitions we have discussed. Specificall y,
The three factors can be instantiated in different ways, refl ecting our prior knowledge for different applications. In this pap er, we will give a general definition for the three factors. For the a ction bias factor f ( y t i | z t i ) , we define it using a Gaussian function: where  X  is a variance to control the bias and its value can be learned using an EM-style algorithm or predefined empirically. Note that if we only consider the binary action, the bias factor can be a lso defined based on a Bernoulli distribution.

For influence factor f ( z t i | z t  X  1  X  v matrix M t  X  1 to describe the social network at time t  X  1 , where the element m t  X  1 ij = 1 represents that user v i and v lationship in the social network (i.e., e ij  X  E ), and m indicates there is no relationship between v i and v j . Given this, we can formally define the influence factor as: degree of v j on v i . For example, given a higher influence  X  action of user v j is more likely to induce user v i to behave in a similar way. Z 1 is a normalization factor. When j = i , we refer to the influence as self-influence, which actually character izes the dependency of the user X  X  action on his own previous state.
The correlation factor can be naturally modeled in a Markov r an-dom field. Therefore, by the fundamental theorem of random fie lds, we can define the correlation factor as: where h ij ( z t i , z t j ) is a feature function to capture the correlation between user v i and v j at time t ; h k ( z t i , x t ik defined on user v i and the k -th attribute x ik ; d is the number of attributes;  X  ij and  X  k are respectively weights of the two functions; and Z 2 is again a normalization factor.

Finally, by integrating Eqs. (2)-(4) into Eq. (1), we can obt ain the following joint probability
Learning NTT-FGM is to estimate a parameter configuration Y , that maximizes the log-likelihood objective function O (  X  ) = log p  X  ( Y | G ) , i.e.,
There are two challenges to solve the objective function. Fi rst, as the network structure in the social network can be arbitra ry (may contain cycles), traditional methods such as Junction Tree [32] and Belief Propagation [34] cannot result in an exact solution. Second, to calculate the normalization factor Z , it is necessary to guaran-tee that the denominator of Eq. (5), i.e., the exponential fu nction exp { . } , is integrable. Based on these considerations, we instanti ate the factor functions g ( . ) and h ( . ) as follows
We see that all of the factor functions are defined by quadrati c functions. This is because quadratic equation satisfies the above two requirements: it is integrable and it offers the possibi lity to design an exact solution. Moreover, by defining in this way, t he in-fluence factor and the correlation factor can be elegantly ex plained with the information diffusion theory, by which the actions of users spread in the social network along the relationships [4, 12] . Finally, the objective function O (  X  ) can be rewritten as where where C = (2  X  X  2 ) N  X  T 2 is a constant.
The task of model learning is to estimate the parameters  X  = (10). For this purpose, we need to first solve the integration of Z . As y is discrete, we can easily integrate out the first term in the exp { . } function of Eq. (11). Further to guarantee that Z is inte-to solve the integration. To deal with this, our basic idea is to trans-form the exponential function exp { . } into a multivariate Gaussian distribution, and calculate the integration as follows: (D erivation is given in Appendix 10.1.) a NT  X  NT block tridiagonal matrix; and b = X  X  is a NT -by concatenating all time-varying attribute matrices toge ther. Given this, we can design an EM-style algorithm to maximize O (  X  ) , as summarized in Algorithm 1: (Details including gradient s of the parameters are given in Appendix 10.2.)
Based on the learned parameters  X  , we can predict the users X  future actions. Specifically, for predicting a user X  X  actio n y time T + 1 , we first compute the latent state z T +1 i ; and then use the latent state to infer the action y T +1 i . To compute the latent state z i , we have the following formula:
However, the above equation calculates the latent state ind epen-dently and ignore the correlation between actions. By furth er con-sidering the action correlation factor, that is to compute a ll z to-gether, we can solve the following linear system:
Then, we can predict the users X  actions y according to their cor-responding latent states z by: where z + and z  X  are respectively the average state values of the corresponding actions y = 1 and y = 0 in the training data, and are computed by: where I is the indicator function.
As a social network may contain millions of users and hundred s of millions of social ties between users, it is impractical t o learn a NTT-FGM from a huge data using a single machine. Specifically , there are two major problems in our NTT-FGM model, namely, memory space and computing time. We use a sparse representat ion to solve the first problem. To speed up the computing, we deplo y the learning task on a distributed system based on the MPI (Me s-sage Passing Interface).

MPI is a message-passing library interface specification. I n the message-passing parallel programming model, data is moved from the address space of one process to that of another process th rough cooperative operations on each process. Based on the messag e passing scheme, we employ the master-slave model. That is, mas-ter can assign tasks to the slaves (computers), and combine t he re-sults in the master machine.

Specifically, in our learning algorithm, the time-consumin g step lies in the calculation of the gradients,  X  log  X  k ,  X  log  X  which requires computing the inverse of the matrix A . Note A is a NT  X  NT matrix, which is too large to be held in memory when deal with a large data. Thus, we compute each column of A respectively by solving the following linear equation where x i represents the i column of A  X  1 and b i represents a NT -dimension vector, with the i th element 1 , the other elements 0 . Thus in each iteration, the master broadcasts the parameter s to each slave and assigns the tasks to solve Equation (18) to the slav es av-eragely. All the salve computers calculate A , and send the results back to the master. The master reduces all the distributed re sults, and broadcasts the updated parameters to the slaves again fo r the next iteration.
The proposed approach for social action prediction is very g en-eral and can be applied to analyze different kinds of social n et-works. In this section, we present various experiments to ev aluate the effectiveness and efficiency of the proposed approach. A ll data sets and codes are publicly available. 4 Data Sets We perform our experiments on three different gen-res of real-world data sets: Twitter (a microblogging data s et crawled from twitter.com), Flickr (a data set of photo shari ng from flickr.com), and Arnetminer (a publication data set arnetmi ner.org). http://arnetminer.org/stnt/ http://www.carelpedre.com/
The action in Twitter is defined as the topic (e.g.,  X  X aiti Ear th-quake X ) discussed by the user. More specifically, we selecte d sev-eral very relevant keywords, e.g.,  X  X aiti X ,  X  X arthquake X , and  X  X es-cue X . If a user posts a tweet containing the topic (keyword), we say that the user performs the action. We crawled the data fro m January 12nd, when the Haiti Earthquake struck, to January 2 6th. In the twitter data, we view one day as a time stamp. For exam-ple, a user called for donation for Haiti, his friends may res pond by re-tweeting it, or posting a supporting message.

While the action of the Flickr data is defined as whether a user adds a photo to his favorite list. For example, if a user added a photo to his favorite list, his friends may also add the photo to their favorite. We extract the historic action log from 11/0 1/2006 to 03/20/2007 in the data set, dividing into 14 time stamps, 10 d ays a stamp.

The action of the Arnetminer data is defined as whether a re-searcher publishes a paper at a specific venue. For example, i f a researcher published a paper at KDD, which may influence his c ol-laborators to publish papers at KDD as well. The data is split into 10 time stamps, one for each year.

On all the three data sets, the attributes X is defined as the con-tents of tweets, information of photos, or related publicat ion venues of the researcher. The content of each tweet is preprocessed by (a) removing stop-words and numbers; (b) removing words that ap pear less than three times in the corpus; and (c) lowercasing the o btained words. Then for each user, we combine all words in the remaini ng words in the tweets posted by the user and create the attribut e vec-tor by taking words as features.
 Comparison Methods We compare the following methods for so-cial action tracking:
SVM: It uses users X  associated attributes as well as their neigh-bors X  states to train a classification model and then employs the classification model to predict users X  actions. For SVM, we e m-ploy SVM-light. 6 wvRN: It employs a weighted-vote relational neighbor classifier [20] to train a classification model by making use of network i nfor-mation. In prediction, the relational classifier estimates the action state of a user by the weighted mean of his neighbors.

NTT-FGM: it uses the proposed NTT-FGM model to train the action tracking model and further uses the learned model for pre-diction.

According to our preliminary experiments, the  X  in the Gaussian distribution does not significantly influence the performan ce. Thus, for simplicity, we empirically set  X  = 1 .
 Evaluation Measures To evaluate our method, we consider the following three angles : http://svmlight.joachims.org/ Table 1: Performance of action prediction with different ap -proaches (%).
 ArnetMiner
The basic learning algorithm is implemented using C++ and al l experiments are performed on a server running Ubuntu 8.10 wi th a AMD Phenom(tm) 9650 Quad-Core Processor (2.3GHz) and 8GB memory. The distributed learning algorithm is implemented under the MPI parallel programming model 7 . We perform the distributed training on 5 computer nodes (20 CPU cores) with AMD proces-sors (2.3GHz) and 40GB memory in total. We set the maximum number of iterations as 250 and the threshold for the change o f  X  ,  X  , and  X  to 1 e  X  3 .
On all the three data sets, we use the historic users X  actions to train the action tracking model and use the learned model to p redict the users X  actions in the last time stamp.

Table 1 lists the prediction performance of the different ap -proaches on the three data sets with the following observati ons: Performance comparison Our method NTT-FGM consistently achieves better performance comparing to the baseline meth ods. In terms of F1-Measure, NTT-FGM can achieve a +10% improve-ment compared with the (SVM). At the same time, NTT-FGM gives robust results, while the performance of wvRN is very sensit ive to the data characteristics, with the highest F1-Measure on th e Flickr data and extremely low value in the Twitter data. This is beca use on Flickr the user X  X  action of adding favorite photos is main ly influ-enced by her friends X  actions and wvRN can be viewed as a simpl e influence model, which makes wvRN mostly predicts  X 1 X  on Flic kr, but the Twitter network (about  X  X aiti earthquake X ) in our ex peri-ment is relatively sparse, as a result wvRN outputs all  X 0 X . W hile our approach shows robust and consistent performance on all the data sets, which is important for the extendability of the me thods. Factor contribution analysis NTT-FGM captures three factors: 1) influence, 2) correlation and 3) personal interests/attrib utes. Next http://www.mcs.anl.gov/research/projects/mpich2/ Figure 5: Contribution of different factor functions. NTT-FGM-we perform an analysis to evaluate the contribution of diffe rent fac-tors defined in our model. In particular, we remove those fact ors one by one (first influence factor function, followed by the co rrela-tion factor function), and then train and evaluate the predi ction per-formance of NTT-FGM. Figure 5 shows the F1-Measure score aft er ignoring the factor functions. We can observe clear drop on t he pre-diction performance, which indicates that our method works well by integrating the different factors for action tracking (p rediction) and each defined factor in our method contributes improvemen t in the performance. Also, we find that the decrease varies on dif fer-ent data sets. On twitter there is a very low correlation betw een users X  actions because users mainly post tweets on Twitter b ased on their previous experience or friends X  tweets, and relati vely act independently at a same time t .
 Latent action states The learned latent action states essentially play a role as smoothing. Figure 6 illustrates several examp les of the learned latent action states. It can be easily seen that t he learned latent states (denoted as the red curve) is much more smoothi ng than the original discrete actions (denoted as the black ste p line), which indicates that latent action states can model the bias in binary actions. This is desirable for most prediction/classificat ion tasks and further confirms us the advantage of the proposed NTT-FGM model.
We now evaluate the efficiency of our approach by comparing the distributed learning algorithm with the basic one on the three data sets.

Table 2 lists the CPU time required for learning the NTT-FGM model on a single machine (Basic NTT-FGM) and by the dis-tributed learning algorithm using 5 computer nodes (each 4 c ores). The distributed learning algorithm typically achieves a si gnificant reduction of the CPU time. For example, on Arnetminer, we obt ain Table 2: Efficiency performance on the three data sets (5 com-puter nodes, each 4 cores) a speedup &gt; 17  X  , and on Flickr, the distributed learning algorithm results in a speedup &gt; 13  X  .

We also evaluate the speedup of the distributed learning alg o-rithm using different numbers of computer nodes (5, 10, 15, 2 0 cores) to evaluate the cost of message passing. The speedup, as shown in Figure 7 (a), is close to the perfect line in the begin ning. Although it decreases inevitably as the number of cores incr eases, it scales very well with &gt; 10  X  speedup using 15 threads.
We further analyze how the network structure affects the effi -ciency of the learning algorithm. We generate a synthetic da ta set for this experiments by varying the density of the networ k (x-axis) increases, both basic learning and the distribute d learning algorithm need more CPU time to train the NTT-FGM model, but the speedup of the distributed algorithm is consistently hi gh (about 14  X  15  X  using 20 threads).
Now we present three case studies to demonstrate the effecti ve-ness of the proposed model.  X  X aiti Earthquake X  The Haiti Earthquake is a devastating earth-quake, leaving the country in shambles. We use our results to an-alyze people X  X  actions related to the catastrophe on Twitte r. Table 3 lists several example tweets about  X  X aiti Earthquake X . We see that these tweets are about a call-for-donation by the famou s tennis player  X  X erena Williams (serenajwilliams)  X . The call-for message was soon retweeted by  X  X ctsofFaithblog X  and  X  X adameali X  on their own microblogs, and a bit later the Haitian radio host  X  X arel pe-dre X  added a comment on Serena Williams X  X  Twitter. These Twi tter users are one of the most influential users and their actions o n  X  X aiti Earthquake X  quickly spread on Twitter with retweet and repl y. (Be-cause of this, Carel Pedre received a special  X  X umanitarian  X  award at the second annual  X  X horty Awards X  in New York.) With the pr o-posed model, we can identify the most influential users, whos e ac-tions can induce a large cascade followings, and track the in forma-tion flows (via social ties with a high influence score or corre lation score). In this way, we can understand how the influence sprea ds among people.  X  X ublication at KDD X  We can also use the NTT-FGM model to track and predict who will publish (or submit) papers to KDD 2 010. We train the NTT-FGM model using the Arnetminer data before 2009 and use the learned model to predict the latent action st ate of each researcher, and finally obtain a list of researchers ran ked by the latent state. Table 4 lists a few representative example s selected from the top 100 ranked researchers. We see that our approach can not only find some famous researchers but also discover so me  X  X ewcomers X  to the KDD community. The first row lists several well-established researchers who have published a lot on KD D. The second row shows several  X  X ew X  researchers who have no paper (or only few papers) published at KDD.  X  X orrelation between Researchers X  Based on the learned NTT-FGM model, we can generate a correlation/influence map for be tter user analysis. Figure 8 shows an example correlation map bet ween Table 3: Action tracking on Twitter for  X  X aiti Earthquake X . Table 4: Prediction on who will publish on (or submit to) KDD 2010. The examples are selected from the top 100 researchers predicted by the NTT-FGM model.
 researchers. The strength of the link between two researche rs in-dicates the correlation score. We see some researchers have strong correlation because they coauthored quite a few papers, e.g ., Jiawei Han and Philip Yu. While our approach also finds some research ers have strong correlation, e.g., Ravi Kumar and Christos Falo utsos, although they only coauthored one or two paper(s). The disco v-ered correlation can potentially benefit many applications such as link prediction. More correlation/influence analysis resu lts can be found at http://arnetminer.org/stnt/. Dynamic Social Network Analysis A number of models have been proposed to analyze dynamic social network with more an d more dynamic information available in online social networ ks. Sarkar et al. [24] develop a generalized model associating e ach en-Figure 8: Example correlation analysis between researcher s. The strength represents the correlation score between two r e-searchers. tity in Euclidean latent space and use kernel functions for s imilarity in latent space to model friendship drifting over time. Scri pps et al. [25] present a model to investigate how different pre-proce ssing de-cisions and different network forces such as selection and i nfluence affect the modeling of dynamic networks. They also demonstr ate the effects of attribute drifting and the importance of indi vidual at-tributes in forming links over time. Yang et al. [33] propose a dynamic stochastic block model for finding communities and t heir evolutions in a dynamic social network. Zheleva et al. [35] p ro-pose a generative model which captures the statistical prop erties of these complex networks and the co-evolution of social and af filia-tion networks. Existing work on dynamic social network anal ysis mainly focuses on finding macro-level mechanisms of social d y-namics, while our work tries to gain more insights into the mi cro-level dynamics of the social network.
 Social Influence Analysis Social influence analysis is an impor-tant research topic in social network analysis. One branch o f social influence analysis is to verify the existence of social influe nce [2, 6, 7, 15, 23]. Anagnostopoulos et al. [2] focus on identifyin g and understanding social influence. They apply a statistical an alysis method to identify and measure whether social influence is a s ource of correlation between the actions of individuals with soci al ties. Crandall et al. [6] have developed techniques for identifyi ng and modeling the interactions between social influence and sele ction using data form online communities. Domingos and Richardso n [7] investigate social influence in the customer network. Th ey pro-pose a model to identify customer X  X  influence between each ot her in the customer network. They build a probabilistic model to mine the spread of influence for viral marketing [23]. A similar wo rk is to maximize the spread of influence through a social network [ 15]. The basic idea is to find and convince a small number of influent ial users to adopt a product, and the goal is to trigger a large cas cade for further adoptions through the effect of  X  X ord of mouth X  ( in-fluence) in the social network. Another trend in social influe nce analysis is to quantitatively estimate the strength of the i nfluence. Tang et al. [29] study the difference of the social influence o n dif-ferent topics and propose Topical Affinity Propagation (TAP ) to model the topic-level social influence in social networks an d de-velop a parallel model learning algorithm based on the map-r educe programming model. Goyal et al. [10] aims to learn the influen ce probabilities from historic users X  actions. Compared with these so-cial influence analysis works, we simultaneously model the s ocial network structure, user attributes, and user actions into a unified model.
 Group Behavior Analysis Group analysis is based on the view that deep lasting change can occur within a carefully formed group whose combined membership reflects the wider norms of societ y. There is an interest, in group analysis, on the relationship between the individual group member and the rest of the group resulti ng in a strengthening of both, and a better integration of the indi vidual with his or her community, family and social network. Shi et a l. [26] study the pattern of user participation behavior, and t he fea-ture factors that influence such behavior on different forum data sets. Tang et al. [31] employ relational learning to address the interdependency among data instances. Backstrom et al. [3] pro-pose a partitioning on the data that selects for active commu nities of engaged individuals.
In this paper, we study a novel problem of social action track -ing. We propose a noise tolerant time-varying factor graph m odel (NTT-FGM) to formalize this problem in a unified model. Three factor functions are defined to capture the intuitions disco vered in our observation and an efficient algorithm is presented to le arn the tracking model. A distributed learning algorithm has been i mple-mented under the message-passing parallel programming mod el. We experiment on three different genres of data sets and furt her present a case study on social action prediction using the le arned NTT-FGM model. Experimental results on three different typ es of data sets demonstrate that the proposed approach can effe ctively model the social actions and clearly outperforms several al ternative methods for action prediction. The distributed learning al gorithm also has a good scalability performance.

The general problem of social action tracking represents a n ew and interesting research direction in social network minin g. There are many potential future directions of this work. A direct a dap-tation is to apply the NTT-FGM model for link prediction, whi ch is important problem in social network. To add a user as a frie nd (e.g., follow somebody on Twitter) may be also influenced by s ocial network structure, one X  X  interests, and friends correlati on. Another interesting issue is to extend the NTT-FGM model so that it ca n handle actions of multiple values. Another issue is to desig n the approach for (semi-)supervised learning. Sometimes, it ma y be dif-ficult to collect sufficient labeled training data for an acti on. How to make use of the unlabeled data to help improve the predicti on performance is an interesting problem. Research was sponsored in part by National Natural Science Foundation of China (No. 60703059), Chinese National Key Fo un-dation Research (No. 2007CB310803), and National High-tec h R&amp;D Program (No. 2009AA01Z138). Quan Lin is supported by NSFC (No. 70771043). [1] R. Albert and A. L. Barabasi. Statistical mechanics of [2] A. Anagnostopoulos, R. Kumar, and M. Mahdian. Influence [3] L. Backstrom, R. Kumar, C. Marlow, J. Novak, and [4] N. T. Bailey. The mathematical theory of infectious dise ases [5] M. Cha, A. Mislove, and K. P. Gummadi. A [6] D. Crandall, D. Cosley, D. Huttenlocher, J. Kleinberg, a nd [7] P. Domingos and M. Richardson. Mining the network value [8] M. Faloutsos, P. Faloutsos, and C. Faloutsos. On power-l aw [9] Z. Ghahramani and M. I. Jordan. Factorial hidden markov [10] A. Goyal, F. Bonchi, and L. V. Lakshmanan. Learning [11] M. Granovetter. The strength of weak ties. American Journal [12] D. Gruhl, R. Guha, D. Liben-Nowell, and A. Tomkins. [13] L. Guo, E. Tan, S. Chen, X. Zhang, and Y. E. Zhao.
 [14] S. S. Haykin. Kalman Filtering and Neural Networks . John [15] D. Kempe, J. Kleinberg, and E. Tardos. Maximizing the [16] J. Kleinberg. Temporal dynamics of on-line informatio n [17] D. Krackhardt. The Strength of Strong ties: the importance of [18] J. D. Lafferty, A. McCallum, and F. C. N. Pereira.
 [19] J. Leskovec, L. Backstrom, R. Kumar, and A. Tomkins. [20] S. Macskassy and F. Provost. A simple relational classi fier. [21] M. E. J. Newman. The structure and function of complex [22] T. Qin, T.-Y. Liu, X.-D. Zhang, D.-S. Wang, and H. Li. [23] M. Richardson and P. Domingos. Mining knowledge-shari ng [24] P. Sarkar and A. W. Moore. Dynamic social network analys is [25] J. Scripps, P.-N. Tan, and A.-H. Esfahanian. Measuring the [26] X. Shi, J. Zhu, R. Cai, and L. Zhang. User grouping behavi or [27] P. Singla and M. Richardson. Yes, there is a correlation : -[28] S. H. Strogatz. Exploring complex networks. Nature , [29] J. Tang, J. Sun, C. Wang, and Z. Yang. Social influence [30] J. Tang, J. Zhang, L. Yao, J. Li, L. Zhang, and Z. Su. [31] L. Tang and H. Liu. Relational learning via latent socia l [32] W. Wiegerinck. Variational approximations between me an [33] T. Yang, Y. Chi, S. Zhu, Y. Gong, and R. Jin. A bayesian [34] J. S. Yedidia, W. T. Freeman, and Y. Weiss. Generalized [35] E. Zheleva, H. Sharara, and L. Getoor. Co-evolution of s ocial
In this subsection, we introduce how we obtain the integrati on of Z . Equation 11 can be rewritten in the form of a multivariate Gaussian distribution. The standard formation of the integ ration of Multivariate Gaussian Distribution is as follows: where u and is a m -dimension vector, M is a m  X  m matrix. The idea here is to transform the exponential function exp { . } in Eq. (11) into a formation of multivariate Gaussian distribu tion. where c is a value independent of z . With further derivation, we can arrive block tridiagonal matrix, and | A | is determinant of matrix A . The elements of A is defined as follows: (we use i t to denote i + ( t  X  1)  X  N for simplicity.) This construction matches our intuition. A i t ,i t represents the coef-A The algorithm for model learning primarily consists of two s teps. To summarize, in the first step, we fix z and update  X ,  X ,  X  accord-ing to their gradients. We need to guarantee that  X  k ,  X  Thus, conventional gradient descent cannot be directly app lied to the constrained problem. We employ a technique similar to th at in [22]. Specifically we first maximize O (  X  ) with respect to the log function. As a result, we get: where where the notation M : with a colon denotes the long column vec-tor formed by concatenating the columns of matrix M .

In the second step, we fix  X ,  X ,  X  to update ~z , by solving a linear system:
