 Due to the exploding popularity of online social networks (OSN) and micro-blogging platforms, such as Facebook, Twitter, LinkedIn, and Google+, spread-ing information with URLs has become a general phenomenon in social interac-tions. According to our observation by randomly sampling 140 million Twitter messages related to  X  X ouTube X , as high as 91.8% of messages contain at least one URL. Moreover, other similar experim ents also indicate a high frequency of URL attachment in messages with certain keywords, such as 75.8% in  X  X oogle X , 60.7% in  X  X ews X , and 54.2% in  X  X bama X . Since the data generation rate on OSN is very high, it is challenging to efficiently deal with real-time social streams. As far as Facebook is concerned, there are more than 900 million users, and in each day, over 3 billion comments and 300 million photos are added and uploaded in this platform 1 . On the other hand, from the report of mediabistro.com 2 ,over 500 million accounts have registered on Twitter in March 2012, and the num-ber of tweets per day has reached 400 million 3 . It can be perceived that social streams are now a large-scale data warehouse with a great wealth of real-time information [1], such as news, blog arti cles, interesting facts, comments, and multimedia content. Although there are several existing services (e.g., Twitter Search, Google, and Bing) offering the social streams searching function based on the similarity between text content and query keywords, the results are often not well-organized and thus cannot provide users concise and meaningful infor-mation. For example, if a user intends to query social messages about specific breaking news, it is impossible for him/her to explore all related contents which are unstructured and generated rapidly. Furthermore, users may desire to know what time-sensitive news and hot topics are widely discussed at this moment. These functionalities cannot be provided by existing systems and are not yet fully explored in the literature.

In this paper, we focus on mining significant URLs which attract much at-tention and are highly discussed on OSN. We aim to monitor social streams containing a specific keyword and return the top-k up-to-date ranking list of significant URLs. The motivations of focusing on URLs are as follows. First, with the text length restriction, people are only allowed to write limited charac-ters in a social message. Thus, to provide more complete information and share news with friends, attaching URLs has become a common approach in OSN and micro-blogging platforms [2, 3]. Second, URL is a universal locator that is language-independent, which means that people using different languages may still share identical URL. Third, since URL is a convenient cross-platform linker, it is helpful for celebrities or companies to find out which mediums are often in-cluded and highly correlated to them. However, although URL provides many ad-vantages, discovering significant URLs possesses numerous challenges. The first challenge comes from the wide use of UR L shortening services, which greatly increases complexity and difficulty when dealing with various kinds of URLs. Second, some URL shortening services have the time limit, which means URL shorteners could be invalid after a period of time. Third, since social streams are dynamic and ever-increasing, designing an efficient and real-time mining scheme for dealing with such large-scale and noisy data is a challenging task.
To the best of our knowledge, there is no existing mechanism which considers all above issues and fully explores the discovery of significant URLs on large-scale and real-time social streams. In this paper, we propose the Significant URLs MINing algorithm (abbreviated as SURLMINE) that incorporates a variety of social features to determine the significance and popularity of URLs. In addition, each post will just be analyzed once so as to reduce computation time and enable real-time processing to users. To verify the effectiveness of the proposed algorithm, we collect more than 75 million tweets in 30 days from May 6th to June 6th in year 2012 with the specific keywords. The experimental results show that the proposed scheme not only is able to extract significant URLs with high precision, but also satisfies real-tim e need in large-scale s ocialstreams.The rest of this paper is outlined as follows. Section 2 reviews the related studies on searching and recommendation techniques in micro-blogging platforms. We elaborate the details of our data crawling scheme and observation in Section 3, while Section 4 introduces the proposed SURLMINE algorithm. Extensive experiments and performance evaluation are presented in Section 5. Finally, concluding remarks are given in Section 6. Mining in OSN has been widely discussed in recent years due to its rapid growth. One major advantage of discovering knowledge from OSN is that social messages generally reflect most recent news and topi cs, and it is hardly to be accomplished by directly applying traditional algorithms, such as PageRank. The reason is that several related algorithms typically suffer the cold start problem, indicating that time-sensitive and relevant contents cannot be discovered in time to pro-vide latest information [4]. Therefore, some researchers aim to extract interesting contents and rank them based on certain query inputs. In [5], Duan et al. used Rank-SVM technique to obtain critical features for selecting the candidate set, and the tweets are ranked according to the relevance of topics. The three pivotal features in [5] are: whether a tweet contains one or more URLs, the length of a tweet (number of characters), and the authority of user accounts. Phelan et al. [6] proposed a novel news recommendation technique called Buzzer, which har-nesses real-time Twitter data as the basis for ranking and recommending articles from the collection of RSS feeds. Dong et al. [7] exploited Gradient Boosted De-cision Tree algorithm to improve receny ran king from real-time Twitter streams. Another research direction is the burst detection. In [8], Mathioudakis et al. attempted to catch the vocabularies which suddenly appear with an unusually high rate. They also showed that the proposed approach has good performance in extracting trending topics from real-time information streams.

Note that most prior studies have all encountered the challenge of not being able to process large-scale datasets [9, 10] due to the high cost of computation time. In order to reduce the amount of data returned by each query, some re-searches proposed to narrow down search range by considering a small group of people among friends and the friends of friends [3, 10]. However, the main weaknesses of those methods are that re sults may be affected by preconception, and the quality of results also highly depends on the user X  X  social communities. Moreover, even if bursty events can be precisely detected, further description and details are still unable to be given just by a set of words. Considering the period of presidential election, the nam es of president candidates will appear very frequently in social discussion, but further analysis is required to find out what do users talk about and which articles are representative ones. The most important thing is that the information diffusion patterns and behaviors of par-ticipants toward various topics have b een confirmed as different [3]. Therefore, it is challenging to design a universal mining scheme which covers various topics in such large-scale data streams.

Our work builds on earlier contributions in three key respects. First, due to the diversity of URL shortening services and the time limitation of URL shorteners, most previous works only tracked one format of URL shorteners. For example, in [7] and [11], the authors focus on tinyURL and bit.ly respectively. In this paper, we consider involving all kinds of URL shorteners, and thus more complete information is covered for mining significant URLs. Second, micro-blogging is a constantly evolving medium where users often leave and join, and relationships between users may also change anytime. Thus, in order to obtain more information, our crawling has included a more wide range of global real-time streams that could be spread from any person and in any language, which is much bigger than crawling from user communities. Third, since social stream is a Big Data with high volume of noise and fast data generation rate, in order to be applicable in such context, each post will be regarded as an impact to certain URLs. Even if a post is a spam message, our algorithm is still able to determine the negative influence and incrementally updates the significant coefficients toward certain URL wit hout any prior learning process. In this paper, we evaluate our scheme with Twitter platform, since it is the most popular micro-blogging website w ith more than 140 million active users 4 . After gathering a large amount of Twitter data, URLs can be directly extracted and expanded from shortened forms to original forms. In Section 3.1, we first introduce two common approaches for crawling social messages from Twitter information streams. Next, we explain the procedures of expanding various URL shorteners and provide detailed analysis in Section 3.2. 3.1 Real-Time Crawling There are two main approaches for collecting Twitter data, which are REST API 5 and streaming API 6 . Although both methods a llow developers to access Twitter data, they are still several differ ent properties between them. REST API provides simple interfaces for most Twitter functionality, and up to a maximum of 100 tweets will be returned per query. Twitter also applies a rate limitation to REST API where at most 350 requests are permitted per hour 7 . On the other hand, streaming API requires keeping a permanent HTTP connection open, and it randomly returns tweets containing a specific search keyword with the total quantity never exceeding 1% of all public data streams. Without the overhead and duplication issues caused by polling REST API at endpoint, streaming API is able to crawl a larger number of tweets. Table 1 shows the information of the data quantity by both APIs from May 6th to June 30th (55 days) in year 2012. 3.2 URL Statistics By employing the above-mentioned crawling mechanism, we are able to deter-mine the percentage of URLs in Twitter data and the proportional distributions of various URL shortening services. As shown in Table 2, among the specified four keywords, more than 54.22% of tweets attach at least one URL, in par-ticular for tweets that mention  X  X ouTube X , where the URL attachment rate is as high as 90.80%. This statistic indicates that the popularity of URL shorting services may vary with different topics. Mo reover, there are still many other ser-vices which are not so well-known and are infeasible to enumerate all of them. Therefore, developing a universal expanding method is desirable for covering more complete information.

To resolve this difficulty, we devise a subroutine to expand all kinds of URL shorteners to their original forms by recursively tracking their redirections. To enable the real-time processing, this subroutine will be executed immediately whenever a URL is detected. With origi nal URLs expanded by the devised pro-cedure, we are able to calculate the average number of URLs embedded in a tweet and the frequency of URL occurrence more accurately. As can be seen in Figure 1, most tweets tend to attach only one URL, and tweets that contain more than three URLs are less than 0.1%. In addition, Figure 2 shows the cumu-lative distribution function (CDF) of the frequency of URL occurrence, which addresses that only a very small number of URLs are posted frequently, and most URLs are just attached in one message. It is worthy to notice that most frequently attached URLs do not always imply they are significant or popular ones that interest users. It is becaus e in order to gain more focus, spammers usually attempt to continuously post a large number of advertise links or phish-ing links to defraud audience. Moreover, some ordinary URLs with very high frequency is just owing to their inherent function, such as www.google.com. Ta-ble 3 gives instances of top-5 URLs with the most frequency of occurrence in messages containing keywords  X  X oogle X  and  X  X ews X , respectively.
 As mentioned previously, the frequen cy of URL occurrence cannot be directly exploited to guarantee the quality of links due to some malicious operations and inherent characteristics. To better identify the significance of each URL, we devise SURLMINE algorithm to estimate the significance coefficients of URLs by measuring several characteristic features of social messages (i.e. tweets). In Section 4.1, we introduce four pivotal features that are considered in SURLMINE algorithm, and the details of SURLMINE are described in Section 4.2. 4.1 Characteristic Features of Social Messages There are four characteristic features us ed to estimate the significance coefficients of URLs. They are (1) Follower-Friend ratio, (2) language distribution ratio, (3) duration and period, and (4) decay model, which are explained as follows. Follower-Friend Ratio. Nowadays most of OSNs support non-reciprocal re-lationships to manage the social circles of users. The characteristic of non-reciprocal relationships is that it allows users to add anyone into their circles without their approval. For instance, users on Twitter and Google+ are allowed to directly add celebrities, such as Barack Obama or Lady Gaga, into their social circles without any permission. Thus, we can determine the ratio of followers to friends to quantify the user popularity. Let S = { u 1 ,u 2 ,u 3 ,... } denote the set of distinct URLs in real-time social streams. For each URL u i  X  X  , the Follower-Friend ratio  X  i is defined as follows. In above equation, C i follower and C i friend respectively represent the number of followers and friends of the author who spreads the URL u i . As discuss in [12], the ratio  X  directly reflect an author X  X  popularity, for a user who has  X   X  2, it means that he/she is a popular person, and lots of people want to hear what he/she said. Oppositely, if  X &lt; 1, it shows this person is a knowledge seeker but not getting much attentio n. Therefore, in our scheme, so as to mining those URL that concerned by most of people, if a U RL posted by a high Follower-Friend ratio author, the URL will be regarded as more significant.
 Language Distribution. In SURLMINE, for a URL u i ,let l 1 ,l 2 ,l 3 ,...,l i m represent the number of messages used in m i kinds of languages. We first use m i for comparing global popularity. Once the m i is equal to other URLs, the language distribution ratio  X  i will be determined as follow by using average standard deviation. It can be noticed from above equation that if the language distribution of URL u i is balanced, the value of  X  i will approach zero. Oppositely, if the distribution is uneven, the value of  X  i will be much larger. Since each URL definitely links to a web page, if users attach an identical URL with different languages, it can be inferred that this URL probably contains international insights. Moreover, owing to the fact that most spam messages are spread in one particular language, the probability of a spam URL mentioned by several different languages must be very low. In this way, we perceive that language distribution not only reflects global popularity, but also simultaneously contributes to resolve the problem of spam links. Duration and Period. In our scheme, we use both duration and period to differentiate various URL influences and behaviors. By enforcing the limitation of both period and duration, we can rapidly eliminate outdated URLs and the URLs just discussed in a flash of time. Let T = set of URLs that point to identical web page with u i in S .ForeachURL u i  X  X  , the duration d i and period p i are formulated as follows. In Eq. 3, t i j represents the timestamp of URL u i j in T i ,and k i is the frequency of occurrence of URL u i in S at that time. That is, the duration d i is the time between t i 1 to t i k , and the period p i is the specific value of duration d i to the frequency of occurrence k i .
 Decay Model. In addition, a decay function model has been applied to deter-mine the decay ratio  X  i k for each u in T i , which is defined as follows. In above equation,  X  is a constant value used to determine the average period of first  X  URLs in T i ,and  X  is a threshold that determines the multiple of average period for decay cycles. Note that the minimum decay  X  i k is experimentally set as 0.01 since if a URL is unfrequented for a long time (more than  X  times as many as the average period), the value of t i k  X  t i k  X  1 will be large. In such situation, the decay ratio  X  i k will be very small or negative, and this situation must be prevented. Oppositely, if URL has just been attached, the difference of t i k and t  X  1 will be small, and the decay ratio  X  i k will approach to 1, indicating a weak decay. 4.2 SURLMINE Algorithm By considering above-mentioned features, the goal of SURLMINE is to incre-mentally update the significance coefficient of a URL so as to immediately output u any significance coefficient  X  i k , it only requires the Follower-Friend ratio (i.e.  X  ) is the previous state of  X  i k that is kept in memory.
 Algorithm 1. Significant URLs MINing Algorithm (SURLMINE)
For each incoming URL u , SURLMINE first expands u to the original form  X  u , and next identifying whether URL  X  u has been quoted before by examining if URL  X  u is an element of S .Ifitisnot,thisimplies  X  u is a new URL and the sig-nificance coefficient  X  of S will be directly assigned as its Follower-Friend ratio. Otherwise, if it is the first time that author  X  attaches URL  X  u , the significance will be incrementally determined with the previous state of significance coeffi-cient by Eq. 5. Finally, significance coefficient will be inserted into the set R in decreasing order. When doing insertion, once the significance coefficients are equal, URL that has higher language distribution ratio will be regarded more significant. The two thresholds of minDuration and maxPeriod are separately set as 1 and 0.5 to filter those immature URL. It indicates even a URL u has a high significance coefficient, the URL can be outputted if and only if duration d i is larger than minDuration and period p i is less than maxPeriod . Overall, with the incremental characteristic, SURLMINE is able to maintain an up-to-date ranking list of significant URLs in the environment of fast-pacing social streams. Moreover, since SURLMINE is unnecessary to scan past data for updating sig-nificance coefficients, and thus large storage space and computation time can be saved. In this paper, we conduct a series of experiments to verify the effectiveness of SURLMINE on a personal computer with 3.4 GHz CPU and 4 GB main mem-ory. The implementation and experimental design are described in Section 5.1. We then present the performance evaluation o f precision and efficiency in Section 5.2. 5.1 Experimental Design In order to make experiments more extensible and modular, we divide the im-plementation into two parts. The first part is the data crawling through Twitter streaming API. The major task of this data crawler is maintaining a connection with Twitter servers to contin uously access tweets that c ontain the specified key-words. The second part is responsible for significant URLs mining that outputs up-to-date top-k URLs, where k is defined as 0.01% of URLs collected in that day. In our experiments, we additionally implement Boolean Spreading Activa-tion algorithm and Burst Detection algorithm [8] (abbreviated as BSA and BD respectively) for comparing purpose. The BSA has been widely used in areas such as information retrieval and epidemic models, where its ranking strategy is mainly based on the frequency of occurrence. On the other hand, the BD outputs the URLs that suddenly appear with an unusually high rate by contin-uously tracking period of URLs. To judge the precision of different algorithms, since the preference for information may differ from person to person, evaluating URL significance through manual study by a specific group of people may be biased. To better solve this problem, we focus on the social streams of Twitter that mention the keyword  X  X ouTube X  and attach at least one URL. YouTube is well-known for being the busiest video sharing site, where the total number of views in each day has exceeded 4 billion. Moreover, since each video on YouTube has its own statistics about audience rating, we can validate video significance by considering following conditions (1) more than 500,000 of view counts; (2) more than 1,000 of views per day after 24 hours with present view count growing rate; (3) the ratio of like and dislike is more than 100. If one of the above conditions is satisfied, a video will be identified as a significant video, and the precision is the percentage of significant video URLs. 5.2 Precision and Efficiency Issues The experiments have been continuously executed for 30 days from May 6th to June 6th in year 2012. During this period, we snapshot our data warehouse at several time points with different durations. As shown in Table 4, after 30 days, there are totally 41 million videos mentioned in 75 million tweets. Moreover, since we only focus on social messages with URL attachment, an additional search term  X  X ttp X  will be automatically appended for any querying topics before crawling. Thus, around 99% of tweets contain at least one valid URL, except some special cases, such as the tweets containing the term  X  X ttp X  but with no URL attached. The results of precision evaluation are shown in Figure 3. It can be seen that SURLMINE is more precise than BSA and BD algorithm. On average, the precision can reach up to 92%. By further analyzing the output URLs of these three algorithms, we notice that most advertising and noisy URLs are unable to be excluded by BSA algorithm. In general, these tweets are posted frequently and swiftly accumulate a hig h frequency of occurrence in a short time. This situation causes that based only on the frequency of occurrence, unwanted URLs always rank high and are hardly to be replaced by new ones. The similar problem has occur in BD algorithm as well. Although BD algorithm has better precision than BSA algorithm, the main weakness of BD algorithm is that it needs more time to become stable. Thi s is because if the frequency of URL occurrence is not large enough for detecting bursty events, the precision of BD algorithm could be lower.

On the other hand, regarding the efficiency issue, SURLMINE only takes about 140 nanoseconds to in crementally include a new URL. Note that the time for the URL expansion step is not covered. Moreover, Figure 4 shows the com-parison of cumulative computation time with the number of URLs increasing. It can be seen that the total computation time for analyzing the whole data warehouse (up to 75 million URLs) is only about 11 seconds. Furthermore, al-though SURLMINE considers more chara cteristic features and employs more advanced processing, the execution time is not significantly larger than that of BSA, which is solely based on the frequ ency of occurrence. These evaluations verify that SURLMINE can deal with large-scale and real-time social streams and can be applicable to real applications. In this paper, to enable the real-time processing of significant URLs extraction from OSNs, we proposed an efficient and effective algorithm named SURLMINE. The up-to-date ranking list of significant URLs are produced by incrementally updating the significance coefficients of al l collected URLs with four pivotal fea-tures, including Follower-Friend ratio, language distribution, topic duration and period and decay model. In our experiments, the collected datasets with over 75 million messages from Twitter cover various kinds of languages, and URLs. With such general settings and such a large quantity of tweets, the precision of SURLMINE can still reach up to 92%, which verifies the effectiveness of the proposed scheme. Moreover, the experimen tal results also validate that the incre-mental capability of SURLMINE greatly enhances the efficiency performance. Consequently, these evidences indica te that SURLMINE can be applicable to large-scale and real-time social streams.

