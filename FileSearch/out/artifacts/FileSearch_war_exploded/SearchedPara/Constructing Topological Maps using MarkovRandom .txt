 The task of generating a topological map from video data has gained prominence in recent years. Topological representations of routes spanning multiple kilometers are robuster than metric and cognitively more plausible for use by humans. They are used to perform path planning, providing waypoints, and defining reachability of places. Topological maps can correct for the drift in visual odometry systems and can be part of hybrid representations where the environment is represented metrically locally but topologically globally.
 We identify two challenges in constructing a topological map from video: how can we say whether two images have been taken from the same place; and how can we reduce the original set of thou-sands of video frames to a reduced representative set of keyframes for path planning. We take into advantage the fact that our input is video as opposed to an unorganized set of pictures. Video guaran-tees that keyframes will be reachable to each other but it also provides temporal ordering constraints on deciding about loop closures. The paper has three innovations: We define a novel image similarity score which uses dynamic programming to match images using both the appearance and the layout of the features in the environment. Second, graphical models are used to detect loop-closures which are locally consistent with neighboring images. Finally, we show how the temporal assumption can be used to generate compact topological maps using minimum dominating sets.
 We formally define a topological map T as a graph T = ( K, E T ) , where K is a set of keyframes and E T edges describing connectivity between keyframes. We will see later that keyframes are representatives of locations. We desire the following properties of T : Loop closure For any two locations i, j  X  K , E T contains the edge ( i, j ) if and only if it is possible Compactness Two images taken at the  X  X ame location X  should be represented by the same Spatial distinctiveness Two images from  X  X ifferent locations X  cannot be represented by the same Note that spatial distinctiveness requires that we distinguish between separate locations, however compactness encourages agglomeration of geographically similar images. This distinction is im-portant, as lack of compactness does not lead to errors in either path planning or visual odometry while breaking spatial distinctiveness does. Our approach to building topological maps is divided into three modules: calculating image similarity, detecting loop closures, and map construction. As defined it is possible to implement each module independently, providing great flexibility in the algorithm selection. We now define the interfaces between each pair of modules.
 Starting with I , a sequence of n images, the result of calculating image similarity scores is a matrix M n  X  n where M ij represents a relative similarity between images i and j . In section 2 we describe how we use local image features to compute the matrix M . To detect loop-closures we have to discretize M into a binary decision matrix D n  X  n where D ij = 1 indicates that images i and j are geographically equivalent and form a loop closure. Section 3 describes the construction of D by defining a Markov Random Field (MRF) on M and perform approximate inference using Loopy Belief Propagation (Loopy-BP). In the final step, the topological map T is generated from D . We calculate the set of keyframes K and their associated connectivity E T using the minimum dominating set of the graph represented by D (Section 4).
 Related Work The state of the art in topological mapping of images is the FAB-MAP [8] algo-rithm. FAB-MAP uses bag of words to model locations using a generative appearance approach that models dependencies and correlations between visual words rendering FAB-MAP extremely successful in dealing with the challenge of perceptual aliasing (different locations sharing common visual characteristics). Its implementation outperforms any other in speed averaging an intra-image comparison of less than 1ms. Bayesian inference is also used in [1] where bags of words on local image descriptors model locations whose consistency is validated with epipolar geometry. Ran-ganathan et al. [14] incorporate both odometry and appearance and maintain several hypotheses of topological maps. Older approaches like ATLAS [5] and Tomatis et al. [17] define maps on two levels, creating global (topological) maps by matching independent local (metric) data and com-bining loop -closure detection with visual SLAM (Self Localization and Mapping). The ATLAS framework [5] matches local maps through the geometric structures defined by their 2D schematics whose correspondences define loop-closures. Tomatis et al [17] detect loop closures by examining the modality of the robot position X  X  density function (PDF). A PDF with two modes traveling in sync is the result of a missed loop-closure, which is identified and merged through backtracking. Approaches like [3] [19] [18] and [9] represent the environment using only an image similarity matrix. Booij et al [3] use the similarity matrix to define a weighted graph for robot navigation. Navigation is conducted on a node by node basis, using new observations and epipolar geometry similarity matrix by searching for and sampling cells which are more likely to describe existing search space incrementally when new images are processed. Fraundoerfer et al [9] use hierarchical vocabulary trees [13] to quickly compute image similarity scores. They show improved results by using feature distances to weigh the similarity score. In [15] a novel image feature is constructed from patches centered around vertical lines from the scene (radial lines in the image). These are then used to track the bearing of landmarks and localize the robot in the environment. Goedeme [10] proposes  X  X nvariant column segments X  combined with color information to compare images. This is followed by agglomerative clustering of images into locations. Potential loop-closures are identified within clusters and confirmed u sing Dempster-Shafer probabilities.
 Our approach advances the state of the art by using a powerful image alignment score without em-ploying full epipolar geometry, and more robust loop colsure detection by applying MRF inference on the similarity matrix. It is together with [4] the only video-based approach that provides a greatly reduced set of nodes for the final topological representation, making thus path planning tractable. For any two images i and j , we calculate the similarity score M ij in three steps: generate image fea-tures, sort image features into sequences, calculate optimal alignment between both sequences. To detect and generate image features we use Scale Invariant Feature Transform (SIFT) [12]. SIFT was selected as it is invariant to rotation and scale, and partially immune to other affine transformations. Feature sequences Simply matching the SIFT features by value [12] yields satisfactory results (see later in figure 2). However, to mitigate perceptual aliasing, we take advantage of the fact that features represent real world structures with fixed spatial arrangements and therefore the similarity score should take their relative positions into account. A popular approach, employed in [16], is to enforce scene rigidity by validating the epipolar geometry between two images. This process, al-though extremely accurate, is expensive and very time-consuming. Instead, we make the assumption that the gravity vector is known so that we can split image position into bearing and elevation and we take into account only the bearing of each feature. Sorting the features by their bearing, results in ordered sequences of SIFT features. We then search for an optimal alignment between pairs of sequences, incorporating both the value and ordering of SIFT features into our similarity score. Sequence alignment To solve for the optimal alignment between two ordered sequences of fea-tures we employ dynamic programming. Here a match between two features, f a and f b , occurs if programming is the enforcement of the ordering constraint. This ensures that the relative order of features matched is consistent in both sequences, exactly the property desired to ensure consistency between two scene appearances. Since bearing is not given with respect to an absolute orientation, ordering is meant only cyclically, which can be handled easily in dynamic programming by repli-cating one of the input sequences. Modifying the first and last rows of the score matrix to allow for arbitrary start and end locations yields the optimal cyclical alignment in most cases. This comes at the cost of allowing one-to-many matches which can result in incorrect alignment scores. The score of the optimal alignment between both sequences of features provides the basis for the similarity score between two images and the entries of the matrix M . We calculate the values of M ij for all i &lt; j  X  w . Here w represents a window used to ignore images immediately before/after our query. Using the image similarity measure matrix M , we use Markov Random Fields to detect loop-closures. A lattice H is defined as an n  X  n lattice of binary nodes where a node v i,j represents the probability of images i and j forming a loop-closure. The matrix M provides an initial esti-mate of this value. We define the factor  X  i,j over the node v i,j as follows:  X  i,j (1) = M ij /F and  X  i,j (0) = 1  X   X  i,j (1) where F = max( M ) is used to normalize the values in M to the range [0 , 1] . Loops closures in the score matrix M appear as one of three possible shapes. In an intersection the score matrix contains an ellipse. A parallel traversal, when a vehicle repeats part of its trajectory, is seen as a diagonal band. An inverse traversal, when a vehicle repeats a part of its trajectory in the opposite direction, is an inverted diagonal band. The length and thickness of these shapes vary with the speed of the vehicle (see figure 1 for examples of these shapes). Therefore we define lat-tice H with eight way connectivity, as it better captures the structure of possible loop closures. As adjacent nodes in H represent sequential images in the sequence, we expect significant overlap in their content. So two neighboring nodes (in any orientation), are expected to have similar scores. Sudden changes occur when either a loop is just closed (sudden increase) or when a loop closure is complete (sudden decrease) or due to noise caused by a sudden occlusion in one of the scenes. By imposing smoothness on the labeling we capture loop closures while discarding noise. Edge k = { i  X  1 , i, i + 1 } and l = { j  X  1 , j, j + 1 } then Figure 1: A small ellipse resulting from an intersection (a) and two diagonal bands from a parallel (b) and inverse (c) traversals. All extracted from a score matrix M . where 1  X   X  (we ignore the case when both k = i and j = l ). Overall, H models a probability distribution over a labeling v  X  X  1 , 0 } n  X  n where: In order to solve for the MAP labeling of H , v  X  = arg max v P ( v ) , the lattice must first be trans-formed into a cluster graph C . This transformation allows us to model the beliefs of all factors in the graph and the messages being passed during inference. We model every node and every edge in H as a node in the cluster graph C . An edge exists between two nodes in the cluster graph if the relevant factors share variables. In addition this construction presents a two step update schedule, alternating between  X  X ode X  clusters and  X  X dge X  clusters as each class only connects to instances of the other. Once defined, a straightforward implementation of the generalized max-product belief propagation algorithm (described in both [2] and [11]) serves to approximate the final labeling. We initialize the cluster graph directly from the lattice H with  X  i,j =  X  i,j for nodes and  X  i,j,k,l =  X  i,j,k,l for edges. The MAP labeling found here defines our matrix D determining whether two images i and j close a loop. Note, that the above MAP labeling is guaranteed to be locally optimal, but is not necessarily consistent across the entire lattice. Generally, finding the globally consistent optimal assignment is NP-hard [11]. Instead, we rely on our definition of D , which specifies which pairs of images are equivalent, and our construction in section 4 to generate consistent results. Finally the decision matrix D is used to define keyframes K and determine the map connectivity E
T . D can be viewed as an adjacency matrix of an undirected graph. Since there is no guarantee that D found through belief propagation is symmetric, we initially treat D as an adjacency matrix for a directed graph, and then remove the direction from all the edges resulting in a symmetric graph D 0 = D  X  D T . It is possible to use the graph defined by D 0 as a topological map. However this representation is practically useless because multiple nodes represent the same location. To achieve compactness, D 0 needs to be pruned while remaining faithful to the overall structure of the environ-ment. Booij [4] achieve this by approximating for the minimum connected dominating set. By using the temporal assumption we can remove the connectedness requirement and use minimum dominat-ing set to prune D 0 . We find the keyframes K by finding the minimum dominating set of D 0 . Finding the optimal solution is NP-Complete, however algorithm 1 provides a greedy approximation. This approximation has a guaranteed bound of H ( d max ) (harmonic function of the maximal degree in the graph d max ) [6].
 The dominating set itself serves as our keyframes K . Each dominating node k  X  K is also associated with the set of nodes it dominates N k . Each set N k represent images which have the  X  X ame location X . The sets { N k : k  X  K } in conjunction with our underlying temporal assumption are used to connect the map T . An edge ( k, j ) is added if N k and N l contain two consecutive images from our sequence, i.e. ( k, j )  X  E T if  X  i such that i  X  N k and i + 1  X  N l . This yields our final topological map T . Algorithm 1 : Approximate Minimum Dominating Set Input : Adjacency matric D 0 Output : K , { N k : k  X  K }
K  X  X  X  while D 0 is not empty do end The system was applied to five image sequences. Results are shown for the system as described, as well as for FAB-MAP ([8]) and for different methods of calculating image similarity scores. Image sets Three image sequences, indoors , Philadelphia and Pittsburgh 1 were captured with a Point Gray Research Ladybug camera. The Ladybug is composed of five wide-angle lens camera arranged in circle around the base and one camera on top facing upwards. The resulting output is a sequence of frames each containing a set of images captured by the six cameras. For the outdoor sequences the camera was mounted on top of a vehicle which was driven around an urban setting, in this case the cities of Philadelphia and Pittsburgh. In the indoor sequence, the camera was mounted on a tripod set on a cart and moved inside the building covering the ground and 1st floors. Ladybug images were processed independently for each camera using the SIFT detector and extractor pro-vided in the VLFeat toolbox [20]. The resulting features for every camera were merged into a single set and sorted by their spherical coordinates. The two remaining sequences, City Centre and New College were captured in an outdoor setting by Cummins [7] from a limited field of view camera mounted on a mobile robot. Table 1 summarizes some basic properties of the sequences we use. All the outdoor sequences were provided with GPS location of the vehicle / robot. For Philadelphia Data Set Length No. of frames Camera Type Format Indoors Not available 852 spherical raw Ladybug stream file Philadelphia[16] 2.5km 1,266 spherical raw Ladybug stream file Pittsburgh 12.5km 1,256 spherical rectified images New College[7] 1.9km 1,237 limited field of view standard images City Centre[7] 2km 1,073 limited field of view standard images and Pittsburgh, these were used to generate ground truth decision matrices using a threshold of 10 meters. Ground truth matrices were provided for New College and City Centre. For the indoor sequence the position of the camera was manually determined using building schematics at an arbi-trary scale. A ground truth decision matrix was generated using a manually determined threshold. The entire system was implemented in Matlab with the exception of the SIFT detector and extractor implemented by [20].
 Parameters Both the image similarity scores and the MRF contain a number of parameters that need to be set. When calculating the image similarity score, there are five parameters. The first t match is the threshold on th L 1 norm at which two SIFT features are considered matched. In addi-tion, dynamic programming requires three parameters to define the score of an optimal alignment: s match , s gap , s miss . s match is the value by which the score of an alignment is improved by including correctly matched pairs of features. s gap is the cost of ignoring a feature in the optimal alignment (insertion and deletion), and s miss is the cost of including incorrectly matched pairs (substitution). We use t match = 1000 , s match = 1 , s gap =  X  0 . 1 and s miss = 0 . Finally we use w = 30 as our window size, to avoid calculating similarity scores for images taken within very short time of each other. Constructing the MRF requires three parameters, F ,  X  and  X  . The normalization factor, F , has already been defined as max( M ) . The  X  used in defining edge potentials is  X  = 0 . 05 F where F is again used to rescale the data in the interval [0 , 1] . Finally we set  X  = 2 to rescale the Gaussian to favor edges between similarly valued nodes. Inference using loopy belief propagation features two parameters, a dampening factor  X  = 0 . 5 used to mitigate the effect of cyclical inferencing and n = 20 , the number of iterations over which to perform inference.
 Results In addition to the image similarity score defined above, we also processed the image sequences using alternative similarity measures. We show results for M SIFT ij = number of SIFT matches, M REC ij = number of reciprocal SIFT matches (the intersection of matches from image i to image j and from j to i ). We also show results using FAB-MAP [8]. To process spherical images using FAB-MAP we limited ourselves to using images captured by camera 0 (Directly forwards / backwards). Figure 2 shows precision-recall curves for all sequences and similarity measures. The curves were generated by thresholding the similarity scores. Our method outperforms state of the art in terms of precision and recall in all sequences. The gain from using our system is most pronounced in the Philadelphia sequence, where FAB-MAP yields extremely low recall rates. Table 2 shows the results of performing inference on the image similarity matrices. Finally figure 3 shows the topological map resulting from running dominating sets on the decision matrices D . We use the ground truth GPS positions for display purposes only. The blue dots represent the locations of the keyframes K with the edges E T drawn in blue. Red dots mark keyframes which are also loop-closures. For reference, figure 4 provides ground truth maps and loop-closures. We presented a system that constructs purely topological maps from video sequences captured from moving vehicles. Our main assumption is that the images are presented in a temporally consistent manner. A highly accurate image similarity score is found by a cyclical alignment of sorted feature sequences. This score is then refined via loopy-belief propagation to detect loop-closures. Finally we constructed a topological map for the sequence in question. This map can be used for either path planning or for bundle adjustment in visual SLAM systems. The bottleneck of the system is comput-ing the image similarity score. In some instances, taking over 166 hours to process a single sequence while FAB-MAP [8] accomplishes the same task in 20 minutes. In addition to implementing score calculation with a parallel algorithm (either on a multicore machine or using graphics hardware), we plan to construct approximations to our image similarity score. These include using visual bags of words in a hierarchical fashion [13] and building the score matrix M incrementally [19, 18]. Acknowledgments Financial support by the grants NSF-IIS-0713260, NSF-IIP-0742304, NSF-IIP-0835714, and ARL/CTA DAAD19-01-2-0012 is gratefully acknowledged. Figure 3: Loop-closures generated using minimum dominating set approximation. Blue dots rep-resent positions of keyframes K with edges E T drawn in blue. Red dots mark keyframes with loop-closures. Figure 4: Ground truth maps and loop-closures. Blue dots represent positions of keyframes K with edges E T drawn in blue. Red dots mark keyframes with loop-closures. [1] A. Angeli, D. Filliat, S. Doncieux, and J.-A. Meyer. Fast and incremental method for loop-[2] Christopher M. Bishop. Pattern Recognition and Machine Learning (Information Science and [3] O. Booij, B. Terwijn, Z. Zivkovic, and B. Krose. Navigation using an appearance based topo-[4] O. Booij, Z. Zivkovic, and B. Krose. Pruning the image set for appearance based robot local-[5] M. Bosse, P. Newman, J. Leonard, M. Soika, W. Feiten, and S. Teller. An atlas framework [6] V. Chvatal. A greedy heuristic for the set-covering problem. Mathematics of Operations [7] M. Cummins and P. Newman. Accelerated appearance-only SLAM. In Proc. IEEE Interna-[8] M. Cummins and P. Newman. FAB-MAP: Probabilistic Localization and Mapping in the Space [9] F. Fraundorfer, C. Wu, J.-M. Frahm, and M. Pollefeys. Visual word based location recognition [10] T. Goedem  X  e, M. Nuttin, T. Tuytelaars, and L. Van Gool. Omnidirectional vision based topo-[11] D. Koller and N. Friedman. Probabilistic Graphical Models: Principles and Techniques . MIT [12] D. Lowe. Distinctive image features from scale-invariant keypoints. International Journal of [13] D. Nister and H. Stewenius. Scalable recognition with a vocabulary tree. volume 2, pages [14] A. Ranganathan, E. Menegatti, and F. Dellaert. Bayesian inference in the space of topological [15] D. Scaramuzza, N. Criblez, A. Martinelli, and R. Siegwart. Robust feature extraction and [16] J.-P. Tardif, Y. Pavlidis, and K. Daniilidis. Monocular visual odometry in urban environments [17] N. Tomatis, I. Nourbakhsh, and R. Siegwart. Hybrid simultaneous localization and map [18] C. Valgren, T. Duckett, and A. J. Lilienthal. Incremental spectral clustering and its application [19] C. Valgren, A. J. Lilienthal, and T. Duckett. Incremental topological mapping using omnidirec-[20] A. Vedaldi and B. Fulkerson. VLFeat: An open and portable library of computer vision algo-
