 information systems, embedded sensors or social media leads to a strong demand for interests [1]. Two main trends can be currently observed, where the main difference is in the purpose of data analytics. Approaches which are optimized on the processing of time-critical information is not entirely in the scope of Big Data Analytics [2]. Fast Data Analytics (FDA) aims to identify actionable, time-critical situations, which can often only be detected by a combined observation of different sources. Taking a mail inbox or the GPS sen s proactively notify its users extracts your flight plan f r time to leave the office in o traffic situation and train d e
A technology enabling [3], as it provides powerful continuous, heterogeneous 1, e.g., multiple event sou r event processing engine. U matched against incoming is created and forwarded to 
During the last years, th e processing performance, a d gines [4], or dealing with t h Less effort has been put int CEP management basicall y meaning the identification that are needed in order to the data an event should i n patterns. Event patterns ar e [6,7], as they reflect comp l processing language. Man y languages, rule-based lan g languages today suffer fro m sive but restricts the patter n In order to create and faci l need for fast and simple g only restricted to technica useful event sources, onl y define relevant patterns b a strategy [8]. While users o f emerging need for better management of event processing. 
In this paper, we argue that the acceptance and usage of event processing in every-the whole lifecycle of an event processing-based application and which uses domain ontology-based model used as background knowledge which combines technical-oriented terms with domain-specific knowledge, 3) A methodology which helps breaking down high-level strategic goals into fine-grained, measurable business goals which can be translated into event patterns in a semi-automatic way and 4) A way to background knowledge during the initial event architecture design. Chapter 3 discussed related work on event processing and event pattern management. Afterwards, we introduce the conceptual model in detail, followed by a validation in section 5, which shows the application of the proposed model in a real-world scena-rio. Finally, we outline future work in section 6. company holds a number of stores that are selling electronic products. Stores operate independently, while procurement is performed by the company X  X  headquarter. Prod-ucts are bought by a number of suppliers. In addition, the headquarter subcontracts a and brought to the warehouse. From the warehouse, products are shipped to the retail capabilities, short-term subsequent deliveries of products is of high importance. 
We consider the presence of several data sources which provide real-time information:  X  rent vehicle speed  X  with the company, so that they can receive offers based on their current location.  X  loaded.  X  The enterprise information systems (such as Customer Relationship Management, 
Fleet Management and Order Management software) basically support the genera-changed.  X  opinions about the company in social networks and blogs in real-time. The company aims to make use of such data sources in order to increase the situation-al awareness and to enable faster reac tion on potential threats or opportunities which and storage costs as well as lost profits due to sold out products should be minimized, (KPI) in real time. Some example KPIs which might be of interest include:  X 
The current percentage of delivery vehicles which arrive on time  X 
Currently trending products  X 
The importance of products in a specific region, measured by the number of men-tions in social networks  X  The average revenue per customer category Potential threats might be:  X 
Unsatisfied customers. Customers might mention their unsatisfaction through dif-publishes a negative mention about the comp any in a social network proactively by offering support.  X 
Traffic jams. Traffic jams can be risky for LSPs (because they violate the previous-ly planned daily route), as well as retail stores (because of lost revenue due to sold streets which affect an existing route plan through external sources which triggers the rescheduling of the touring plan. On the other hand, business opportunities, meaning the detection of a situation which appear, such as:  X 
An important customer who has preordered a specific product is notified imme-diately after the product arrives at the store and the customer is within a fixed ra-dius around the store.  X  another supplier after a new order was placed by the headquarter. Obviously, due to a large number of various event sources, a potentially large number patterns. As many possible patterns presented in this scenario can be clearly assigned to a specific business goal, goal definition a pproaches can be used to create a hierar-chical process which breaks down business strategy to event patterns. Without a me-thodology, the definition of patterns is error-prone and ad-hoc. 
In addition, the expressivity of patterns must be supported by the event architecture to pattern definition in everyday business situations. The design of the event architecture, meaning the event identification and their prop-erties, heavily depends on the existing application and sensor landscape. systems engineering:  X 
How can sources which produce real-time information be identified, and which events have to be produced by the underlying systems?  X 
Which methodologies support the formulation of strategy-oriented business goals and how can they broken down to technically-oriented event patterns?  X 
Which actors are involved in the setup an d execution of real-time information sys-tems and how are they related?  X 
How can the usage of domain knowledge support the goal-oriented pattern defini-tion process? In the following section, we discuss related work addressing these issues. Afterwards, section 4 presents a methodology for domain-aware design of events and patterns. management and Business-IT-Alignment. 3.1 Event Processing Networks An event processing network is described as a collection of event processing agents, consisting of event producers, consumers and processing agents as nodes and a set of Detect. Transformation agents require a single or multiple events as an input and per-event which contains additional information compared to the input event. A complete description of EPA types can be found in [9]. In our approach, EPAs are used for the non-technical users for a more simplified definition of event patterns. 3.2 Event Pattern Management managing event patterns. Vidakovic et. al. propose a business-oriented methodology applying the Business Motivation Model (BMM) and transfers such goals to a logical, pattern definition process is completely manual and relies on technical knowledge of a specific event pattern language. An approach for user-oriented rule management has non-technical users, but does not describe how rules are identified using a structured way. Finally, Sen et. al. present a methodology for the management of complex event evolution) of event patterns into account, they propose an RDFS-based event pattern excludes the problem of how relevant patterns can be identified. 3.3 Business-IT-Alignment Business-IT-alignment refers to applying Information Technology (IT) in an appropriate business strategy by introducing a requirements engineering analytical framework. In our patterns based on strategy-oriented business goals. In this chapter, we present a methodology for the identification of relevant events and and opportunities which affect business goals. 4.1 Overview of the Methodology tected in real-time is required in order to achieve competitive advantages or to avoid threats. In general, this process can be di vided into the Setup Phase, where the event infrastructure is built and the Execution Phase, where relevant situations which need information used as header attributes (like timestamps and identifiers) in events. 
In parallel to these processes, a domain model is constructed reflecting the applica-tion domain. In our motivating scenario, this would include modeling different actors, basic event patterns are built which construct the Event Pattern Pool , a repository of that new operations should be supported. 4.2 Actor model In this section, we briefly describe several roles which are used in the setup phase as well as during the execution phase. Later in this chapter, we will further elaborate on the specific tasks an actor is involved in. Management. The role of managers is the definition of a business strategy and high-percent). define fine-grained business goals, opportunities which should be detected at runtime successful achievement of the underlying goal. nical point of view. Pattern engineers are responsible for the technical implementation of a goal-oriented event pattern. In some cases where a corresponding pattern is very responsible for monitoring the pattern execution and for the adaption of event pattern based on changed business requirements. business-oriented definition of event patterns. 4.3 Setup Phase which is comprised of event sources, events and event properties. This technical mod-el is connected to a business domain model, which is the basis for a higher-level way performed during the setup phase in more detail. Afterwards, we present an integrated based model. sources. We assume each source has different characteristics, e.g., different data types operations during event processing are possible or not. As an example, the calculation Systems, Hardware Sensors and Information Feeds. 
Existing Information Systems are identified by using methodologies provided by an enterprise architecture framework like the Zachman Framework [14]. Information example provided in the motivating scenario , there are several enterprise information Management and Warehouse Management. Information systems can support the acti-vation of underlying hardware sensors, i.e., a mobile application might be able to send information gathered by the mobile phone X  X  GPS sensor.
 Event Identification and Event Design. Upon the model of event sources, a detailed scribed in Figure 4, our event model is consisted of events, event properties, property types, actions and event sources as described above. actors. As an example, if the order management system creates an event in the case a ment of an order, this event would be named  X  X rderReceived X  from the perspective of the warehouse and  X  X rderPlaced X  from the perspective of the customer despite being the same event. closely related to real-world objects which are essential from a business user X  X  point general properties of the domain object. In addition, a domain object can have differ-ent static properties, which do not change over time. This might be the category of a model. A more detailed example will be provided in the validation. Combined Business/Event/Pattern Model. Once the domain model has been devel-technical details such as event processing agent types, supported event operators and aggregation windows as well as the modeled business logic. The combined model is described in Figure 6. 
The connection between real-world domain objects and technical-level events al-self-description of their functionality. BEPAs are connected to one or more events as an event input, a specific EPA type and one or more events which are produced as an output. A formal description of the BEPA structure is given in the following section. BEPAs are modeled hierarchically, meaning the input of a BEPA is either an event or another existing BEPA. In our proposed methodology, BEPAs are modeled by pattern straction of event processing agents to n on-technical users in a way which allows the definition of event patterns from a business perspective. Business users modeling new patterns by using a graphical tool are able to use BEPAs from a business event pattern pool. This pool might be extended on demand by pattern engineers, in the case a new functionality is demanded by business users. implemented.  X  X   X   X ,...,  X   X  a set of event operators.  X  is denoted a set of existing BEPAs. A Business Event Processing Agent is a tuple  X  X , X  X , X  X  X  X  X   X  X  X  X  with  X   X  X  X   X  X   X  type. In addition, we assume  X  : X  X  X  X   X  X   X   X   X  X   X  and  X  X  X  X   X  X   X  : X  X   X   X  . Furthermore, an event is a tuple  X  X   X   X  X  , X , X  X , X  X   X   X   X  X , X  X  X  X   X  X , X  X   X  X  :  X  X  X  . An event source produces an event which has at least the required properties, so that  X  X  X   X   X  : X  X   X  X  . In this sense, we define a function  X  X  X  X  X   X   X   X   X  X 0,1 X  with: 
Each BEPA provides a function  X   X   X  X   X   X  X  X  which calculates an event output BEPA performs an operation on an event set if the event which should be attached to accepted, if its payload contains the property type required by the EPA. In this sense, accepts events if they are provided by a specific source type. This means, the function  X  X  X  X  X  X  X  X   X   X  X   X   X  X 0,1 X  is only valid if: In words, BEPAs are independent from their underlying event source. Events that are designed events are only accepted by the system if they contain the property defined self-describing in a way that it defines which input is needed in order to produce the approach does not only require a specific property format (e.g., a location data type), event sources is  X  X  X  X  X  X  X  X  X  X  X  X  X  X , X  X  X  X  X  X   X  X  X  X  X  X   X  . Using these properties, the BEPA can be configured to accept events with the following properties: meaning there must be at least one input event which is produced by a mobile sensor. In addition, due to the link between domain objects and event sources, business users are provided with only those operators that are supported by an event produced by a domain object. The presented approach has been tested in an EU FP7 project. In this project, we per-formed the setup phase in a way described in section 4 in the case of a SME company real-time awareness in the partner X  X  IT systems was the intransparency of the current return requests of customers were stored on a mobile device and processed during the next business day. After the partial implementation of our approach, the company was automatically in the case several conditions have been met. As already described, our generation of new event patterns. 
As follows, we present the application of our methodology on the specific use case evaluation results as well as important lessons learned are provided. The overall strategy was to introduce real-time awareness within the company. This objective should be achieved by establishing an event-driven architecture besides real-time responsiveness through semi-automatic adjustment of business processes information systems (customer relationship management, enterprise resource plan-orders directly). Finally, we added already existing GPS sensors which are installed in all delivery vehicles of the company to our model. steps, a deep analysis of the company X  X  business processes and a workshop with do-were produced by the identified source types. Events were chosen based on their im-model consisting of the entities Warehouse, Customer, Vehicle, Document and Order point of view, we extended this taxonomy with further information gathered through and products based on their category (e.g., cosmetics, food, electronics). been constructed. At first, the taxonomy of domain objects was mapped with technic-al events. We developed a method called semantic requests [15] in order to allow the we implemented the following BEPAs:  X  proximity(Vehicle, Geometry, x) detects a vehicle which approaches an area 
Customer, 10) in order to notify customers that their order is about to be delivered.  X  trending(Product, Geometry, x) is used to identify products that are currently with-just-in-time delivery of perishable food based on the current demand.  X  within a certain time period. representation. A simplified instantiated domain model and corresponding events are illustrated in figure 7. The conceptual model presented in section 4 is extended with a use case-specific taxonomy (shown in rounded rectangles) and an example instantia-tion of a proximity-BEPA (illustrated in gray rectangles). quality of the model. In another workshop, we analyzed the proposed model and the for the selected use case. These metrics are: 2. Correctness/Soundness: it indicates how relevant the identified event types are 3. Complexity: it indicates how difficult it is for end developers to deal with the Currently, we are working on the developmen t of a graphical editor which allows the completed. In this paper, we presented a novel methodology for designing events and patterns in ous environments. Moreover, the need for flexible processes is big in today X  X  compet-itive environment as a lost customer, or a missed opportunity to recruit a new custom-event and pattern definition approach which considers requirements of non-technical ness strategy with event processing technologies by bridging the current gap between business event processing agents and semantic web services. 
