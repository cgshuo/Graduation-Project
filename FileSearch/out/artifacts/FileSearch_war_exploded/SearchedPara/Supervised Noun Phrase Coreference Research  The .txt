 Noun phrase (NP) coreference resolution, the task of determining which NPs in a text or dialogue re-fer to the same real-world entity, has been at the core of natural language processing (NLP) since the 1960s. NP coreference is related to the task of anaphora resolution, whose goal is to identify an antecedent for an anaphoric NP (i.e., an NP that depends on another NP, specifically its an-tecedent, for its interpretation) [see van Deemter and Kibble (2000) for a detailed discussion of the difference between the two tasks]. Despite its sim-ple task definition, coreference is generally con-sidered a difficult NLP task, typically involving the use of sophisticated knowledge sources and inference procedures (Charniak, 1972). Compu-tational theories of discourse, in particular focus-ing (see Grosz (1977) and Sidner (1979)) and cen-tering (Grosz et al. (1983; 1995)), have heavily influenced coreference research in the 1970s and 1980s, leading to the development of numerous centering algorithms (see Walker et al. (1998)).
The focus of coreference research underwent a gradual shift from heuristic approaches to machine learning approaches in the 1990s. This shift can be attributed in part to the advent of the statisti-cal NLP era, and in part to the public availability of annotated coreference corpora produced as part of the MUC-6 (1995) and MUC-7 (1998) confer-ences. Learning-based coreference research has remained vibrant since then, with results regularly published not only in general NLP conferences, but also in specialized conferences (e.g., the bien-nial Discourse Anaphora and Anaphor Resolution Colloquium (DAARC)) and workshops (e.g., the series of Bergen Workshop on Anaphora Resolu-tion (WAR)). Being inherently a clustering task, coreference has also received a lot of attention in the machine learning community.

Fifteen years have passed since the first paper on learning-based coreference resolution was pub-lished (Connolly et al., 1994). Our goal in this paper is to provide NLP researchers with a sur-vey of the major milestones in supervised coref-erence research, focusing on the computational models, the linguistic features, the annotated cor-pora, and the evaluation metrics that were devel-oped in the past fifteen years. Note that several leading coreference researchers have published books (e.g., Mitkov (2002)), written survey arti-cles (e.g., Mitkov (1999), Strube (2009)), and de-livered tutorials (e.g., Strube (2002), Ponzetto and Poesio (2009)) that provide a broad overview of coreference research. This survey paper aims to complement , rather than supersede, these previ-ously published materials. In particular, while ex-isting survey papers discuss learning-based coref-erence research primarily in the context of the in-fluential mention-pair model, we additionally sur-vey recently proposed learning-based coreference models, which attempt to address the weaknesses of the mention-pair model. Due to space limita-tions, however, we will restrict our discussion to the most commonly investigated kind of corefer-ence relation: the identity relation for NPs, exclud-ing coreference among clauses and bridging refer-ences (e.g., part/whole and set/subset relations). The widespread popularity of machine learning approaches to coreference resolution can be at-tributed in part to the public availability of an-notated coreference corpora. The MUC-6 and MUC-7 corpora, though relatively small (60 doc-uments each) and homogeneous w.r.t. document type (newswire articles only), have been exten-sively used for training and evaluating coreference models. Equally popular are the corpora produced uations in the past decade: while the earlier ACE corpora (e.g., ACE-2) consist of solely English newswire and broadcast news articles, the later ones (e.g., ACE 2005) have also included Chi-nese and Arabic documents taken from additional sources such as broadcast conversations, webblog, usenet, and conversational telephone speech.
Coreference annotations are also publicly avail-able in treebanks. These include (1) the English Penn Treebank (Marcus et al., 1993), which is la-beled with coreference links as part of the Onto-Notes project (Hovy et al., 2006); (2) the T  X ubingen Treebank (Telljohann et al., 2004), which is a collection of German news articles consisting of 27,125 sentences; (3) the Prague Dependency Treebank (Haji  X c et al., 2006), which consists of 3168 news articles taken from the Czech National Corpus; (4) the NAIST Text Corpus (Iida et al., 2007b), which consists of 287 Japanese news arti-cles; (5) the AnCora Corpus (Recasens and Mart  X  X , 2009), which consists of Spanish and Catalan jour-nalist texts; and (6) the GENIA corpus (Ohta et al., 2002), which contains 2000 MEDLINE abstracts.
Other publicly available coreference corpora of interest include two annotated by Ruslan Mitkov X  X  research group: (1) a 55,000-word corpus in the domain of security/terrorism (Hasler et al., 2006); and (2) training data released as part of the 2007 Anaphora Resolution Exercise (Or  X asan et al., 2008), a coreference resolution shared task. There are also two that consist of spoken dialogues: the TRAINS93 corpus (Heeman and Allen, 1995) and the Switchboard data set (Calhoun et al., in press).
Additional coreference data will be available in the near future. For instance, the SemEval-2010 shared task on Coreference Resolution in Multiple Languages (Recasens et al., 2009) has promised to release coreference data in six languages. In addi-tion, Massimo Poesio and his colleagues are lead-ing an annotation project that aims to collect large amounts of coreference data for English via a Web In this section, we examine three important classes of coreference models that were developed in the past fifteen years, namely, the mention-pair model, the entity-mention model, and ranking models. 3.1 Mention-Pair Model The mention-pair model is a classifier that deter-mines whether two NPs are coreferent. It was first proposed by Aone and Bennett (1995) and McCarthy and Lehnert (1995), and is one of the most influential learning-based coreference mod-els. Despite its popularity, this binary classifica-tion approach to coreference is somewhat undesir-able: the transitivity property inherent in the coref-erence relation cannot be enforced, as it is possible for the model to determine that A and B are coref-erent, B and C are coreferent, but A and C are not coreferent. Hence, a separate clustering mecha-nism is needed to coordinate the pairwise classifi-cation decisions made by the model and construct a coreference partition.

Another issue that surrounds the acquisition of the mention-pair model concerns the way train-ing instances are created. Specifically, to deter-mine whether a pair of NPs is coreferent or not, the mention-pair model needs to be trained on a data set where each instance represents two NPs and possesses a class value that indicates whether the two NPs are coreferent. Hence, a natural way to assemble a training set is to create one instance from each pair of NPs appearing in a training doc-ument. However, this instance creation method is rarely employed: as most NP pairs in a text are not coreferent, this method yields a training set with a skewed class distribution, where the negative in-stances significantly outnumber the positives.
As a result, in practical implementations of the mention-pair model, one needs to specify not only the learning algorithm for training the model and the linguistic features for representing an instance, but also the training instance creation method for reducing class skewness and the clustering algo-rithm for constructing a coreference partition. 3.1.1 Creating Training Instances As noted above, the primary purpose of train-ing instance creation is to reduce class skewness. Many heuristic instance creation methods have been proposed, among which Soon et al. X  X  (1999; 2001) is arguably the most popular choice. Given method creates a positive instance between NP and its closest preceding antecedent, NP negative instance by pairing NP intervening NPs, NP
With an eye towards improving the precision of a coreference resolver, Ng and Cardie (2002c) pro-pose an instance creation method that involves a single modification to Soon et al. X  X  method: if NP is non-pronominal, a positive instance should be formed between NP pronominal antecedent instead. This modification is motivated by the observation that it is not easy for a human, let alone a machine learner, to learn from a positive instance where the antecedent of a non-pronominal NP is a pronoun.

To further reduce class skewness, some re-searchers employ a filtering mechanism on top of an instance creation method, thereby disallowing the creation of training instances from NP pairs that are unlikely to be coreferent, such as NP pairs that violate gender and number agreement (e.g., Strube et al. (2002), Yang et al. (2003)).

While many instance creation methods are heuristic in nature (see Uryupina (2004) and Hoste and Daelemans (2005)), some are learning-based. For example, motivated by the fact that some coreference relations are harder to identify than the others (see Harabagiu et al. (2001)), Ng and Cardie (2002a) present a method for mining easy positive instances, in an attempt to avoid the inclu-sion of hard training instances that may complicate the acquisition of an accurate coreference model. 3.1.2 Training a Coreference Classifier Once a training set is created, we can train a coref-erence model using an off-the-shelf learning algo-rithm. Decision tree induction systems (e.g., C5 (Quinlan, 1993)) are the first and one of the most widely used learning algorithms by coreference researchers, although rule learners (e.g., RIPPER (Cohen, 1995)) and memory-based learners (e.g., TiMBL (Daelemans and Van den Bosch, 2005)) are also popular choices, especially in early appli-cations of machine learning to coreference resolu-tion. In recent years, statistical learners such as maximum entropy models (Berger et al., 1996), voted perceptrons (Freund and Schapire, 1999), and support vector machines (Joachims, 1999) have been increasingly used, in part due to their ability to provide a confidence value (e.g., in the form of a probability) associated with a classifica-tion, and in part due to the fact that they can be easily adapted to train recently proposed ranking-based coreference models (see Section 3.3). 3.1.3 Generating an NP Partition After training, we can apply the resulting model to a test text, using a clustering algorithm to co-ordinate the pairwise classification decisions and impose an NP partition. Below we describe some commonly used coreference clustering algorithms.
Despite their simplicity, closest-first cluster-ing (Soon et al., 2001) and best-first clustering (Ng and Cardie, 2002c) are arguably the most widely used coreference clustering algorithms. The closest-first clustering algorithm selects as the antecedent for an NP, NP However, if no such preceding noun phrase exists, no antecedent is selected for NP clustering algorithm aims to improve the precision of closest-first clustering, specifically by selecting as the antecedent of NP ing NP that is classified as coreferent with it.
One criticism of the closest-first and best-first clustering algorithms is that they are too greedy. In particular, clusters are formed based on a small subset of the pairwise decisions made by the model. Moreover, positive pairwise decisions are unjustifiably favored over their negative counter-parts. For example, three NPs are likely to end up in the same cluster in the resulting partition even if there is strong evidence that A and C are not coref-erent, as long as the other two pairs (i.e., (A,B) and (B,C)) are classified as positive.

Several algorithms that address one or both of these problems have been used for coreference clustering. Correlation clustering (Bansal et al., 2002), which produces a partition that respects as many pairwise decisions as possible, is used by McCallum and Wellner (2004), Zelenko et al. (2004), and Finley and Joachims (2005). Graph partitioning algorithms are applied on a weighted, undirected graph where a vertex corresponds to an NP and an edge is weighted by the pairwise coreference scores between two NPs (e.g., Mc-Callum and Wellner (2004), Nicolae and Nico-lae (2006)). The Dempster-Shafer rule (Dempster, 1968), which combines the positive and negative pairwise decisions to score a partition, is used by Kehler (1997) and Bean and Riloff (2004) to iden-tify the most probable NP partition.

Some clustering algorithms bear a closer resem-blance to the way a human creates coreference clusters. In these algorithms, not only are the NPs in a text processed in a left-to-right manner, the later coreference decisions are dependent on the earlier ones (Cardie and Wagstaff, 1999; Klenner NP, NP ers each preceding NP, NP tecedent in a right-to-left order. If NP are likely to be coreferent, the algorithm imposes an additional check that NP constraint on coreference (e.g., gender agreement) with any NP in the cluster containing NP positing that the two NPs are coreferent.

Luo et al. X  X  (2004) Bell-tree-based algorithm is another clustering algorithm where the later coref-erence decisions are dependent on the earlier ones. A Bell tree provides an elegant way of organizing the space of NP partitions. Informally, a node in the i th level of a Bell tree corresponds to an i th-order partial partition (i.e., a partition of the first i
NPs of the given document), and the i th level of the tree contains all possible i th-order partial parti-tions. Hence, a leaf node contains a complete par-tition of the NPs, and the goal is to search for the leaf node that contains the most probable partition. The search starts at the root, and a partitioning of the NPs is incrementally constructed as we move down the tree. Specifically, based on the corefer-ence decisions it has made in the first i the tree, the algorithm determines at the i th level whether the i th NP should start a new cluster, or to which preceding cluster it should be assigned.
While many coreference clustering algorithms have been developed, there have only been a few attempts to compare their effectiveness. For ex-ample, Ng and Cardie (2002c) report that best-first clustering is better than closest-first cluster-ing. Nicolae and Nicolae (2006) show that best-first clustering performs similarly to Bell-tree-based clustering, but neither of these algorithms performs as well as their proposed minimum-cut-based graph partitioning algorithm. 3.1.4 Determining NP Anaphoricity While coreference clustering algorithms attempt to resolve each NP encountered in a document, only a subset of the NPs are anaphoric and there-fore need to be resolved. Hence, knowledge of the anaphoricity of an NP can potentially improve the precision of a coreference resolver.

Traditionally, the task of anaphoricity determi-nation has been tackled independently of corefer-ence resolution using a variety of techniques. For example, pleonastic it has been identified using heuristic approaches (e.g., Paice and Husk (1987), Lappin and Leass (1994), Kennedy and Bogu-raev (1996)), supervised approaches (e.g., Evans (2001), M  X uller (2006), Versley et al. (2008a)), and distributional methods (e.g., Bergsma et al. (2008)); and non-anaphoric definite descriptions have been identified using rule-based techniques (e.g., Vieira and Poesio (2000)) and unsupervised techniques (e.g., Bean and Riloff (1999)).

Recently, anaphoricity determination has been evaluated in the context of coreference resolution, with results showing that training an anaphoric-ity classifier to identify and filter non-anaphoric NPs prior to coreference resolution can improve a learning-based resolver (e.g., Ng and Cardie (2002b), Uryupina (2003), Poesio et al. (2004b)). Compared to earlier work on anaphoricity deter-mination, recently proposed approaches are more  X  X lobal X  in nature, taking into account the pair-wise decisions made by the mention-pair model when making anaphoricity decisions. Examples of such approaches have exploited techniques in-cluding integer linear programming (ILP) (Denis and Baldridge, 2007a), label propagation (Zhou and Kong, 2009), and minimum cuts (Ng, 2009). 3.1.5 Combining Classification &amp; Clustering From a learning perspective, a two-step approach to coreference  X  classification and clustering  X  is undesirable. Since the classification model is trained independently of the clustering algo-rithm, improvements in classification accuracy do not guarantee corresponding improvements in clustering-level accuracy. That is, overall perfor-mance on the coreference task might not improve.
To address this problem, McCallum and Well-ner (2004) and Finley and Joachims (2005) elimi-nate the classification step entirely, treating coref-erence as a supervised clustering task where a sim-ilarity metric is learned to directly maximize clus-tering accuracy. Klenner (2007) and Finkel and Manning (2008) use ILP to ensure that the pair-3.1.6 Weaknesses of the Mention-Pair Model While many of the aforementioned algorithms for clustering and anaphoricity determination have been shown to improve coreference performance, the underlying model with which they are used in combination  X  the mention-pair model  X  re-mains fundamentally weak. The model has two commonly-cited weaknesses. First, since each candidate antecedent for an anaphoric NP to be resolved is considered independently of the oth-ers, the model only determines how good a candi-date antecedent is relative to the anaphoric NP, but not how good a candidate antecedent is relative to other candidates. In other words, it fails to answer the question of which candidate antecedent is most probable. Second, it has limitations in its expres-siveness: the information extracted from the two NPs alone may not be sufficient for making an in-formed coreference decision, especially if the can-didate antecedent is a pronoun (which is semanti-cally empty) or a mention that lacks descriptive in-formation such as gender (e.g.,  X  X linton X ). Below we discuss how these weaknesses are addressed by the entity-mention model and ranking models. 3.2 Entity-Mention Model The entity-mention model addresses the expres-siveness problem with the mention-pair model. To motivate the entity-mention model, consider an example taken from McCallum and Wellner (2003), where a document consists of three NPs:  X  X r. Clinton, X   X  X linton, X  and  X  X he. X  The mention-pair model may determine that  X  X r. Clinton X  and  X  X linton X  are coreferent using string-matching features, and that  X  X linton X  and  X  X he X  are coref-erent based on proximity and lack of evidence for gender and number disagreement. However, these two pairwise decisions together with transitivity imply that  X  X r. Clinton X  and  X  X he X  will end up in the same cluster, which is incorrect due to gen-der mismatch. This kind of error arises in part because the later coreference decisions are not de-pendent on the earlier ones. In particular, had the model taken into consideration that  X  X r. Clinton X  and  X  X linton X  were in the same cluster, it proba-bly would not have posited that  X  X he X  and  X  X lin-ton X  are coreferent. The aforementioned Cardie and Wagstaff algorithm attempts to address this problem in a heuristic manner. It would be de-sirable to learn a model that can classify whether an NP to be resolved is coreferent with a preced-ing, possibly partially-formed, cluster. This model is commonly known as the entity-mention model.
Since the entity-mention model aims to classify whether an NP is coreferent with a preceding clus-ter, each of its training instances (1) corresponds to an NP, NP (2) is labeled with either POSITIVE or NEGATIVE , depending on whether NP C by a set of cluster-level features (i.e., features that are defined over an arbitrary subset of the NPs in C a feature employed by the mention-pair model by applying a logical predicate. For example, given the NUMBER AGREEMENT feature, which deter-mines whether two NPs agree in number, we can apply the ALL predicate to create a cluster-level feature, which has the value YES if NP number with all of the NPs in C wise. Other commonly-used logical predicates for creating cluster-level features include relaxed ver-sions of the ALL predicate, such as MOST , which is true if NP of the NPs in C C ploy cluster-level features makes it more expres-sive than its mention-pair counterpart.

Despite its improved expressiveness, the entity-mention model has not yielded particularly en-couraging results. For example, Luo et al. (2004) apply the ANY predicate to generate cluster-level features for their entity-mention model, which does not perform as well as the mention-pair model. Yang et al. (2004b; 2008a) also investi-gate the entity-mention model, which produces re-sults that are only marginally better than those of the mention-pair model. However, it appears that they are not fully exploiting the expressiveness of the entity-mention model, as cluster-level features only comprise a small fraction of their features.
Variants of the entity-mention model have been investigated. For example, Culotta et al. (2007) present a first-order logic model that determines the probability that an arbitrary set of NPs are all co-referring. Their model resembles the entity-mention model in that it enables the use of cluster-level features. Daum  X e III and Marcu (2005) pro-pose an online learning model for constructing coreference chains in an incremental fashion, al-lowing later coreference decisions to be made by exploiting cluster-level features that are computed over the coreference chains created thus far. 3.3 Ranking Models While the entity-mention model addresses the expressiveness problem with the mention-pair model, it does not address the other problem: fail-ure to identify the most probable candidate an-tecedent. Ranking models, on the other hand, al-low us to determine which candidate antecedent is most probable given an NP to be resolved. Ranking is arguably a more natural reformula-tion of coreference resolution than classification, as a ranker allows all candidate antecedents to be considered simultaneously and therefore directly captures the competition among them. Another desirable consequence is that there exists a nat-ural resolution strategy for a ranking approach: an anaphoric NP is resolved to the candidate an-tecedent that has the highest rank. This contrasts with classification-based approaches, where many clustering algorithms have been employed to co-ordinate the pairwise classification decisions, and it is still not clear which of them is the best.
The notion of ranking candidate antecedents can be traced back to centering algorithms, many of which use grammatical roles to rank forward-looking centers (see Walker et al. (1998)). Rank-ing is first applied to learning-based coreference resolution by Connolly et al. (1994; 1997), where a model is trained to rank two candidate an-tecedents. Each training instance corresponds to the NP to be resolved, NP date antecedents, NP antecedent of NP value indicates which of the two candidates is bet-ter. This model is referred to as the tournament model by Iida et al. (2003) and the twin-candidate model by Yang et al. (2003; 2008b). To resolve an NP during testing, one way is to apply the model to each pair of its candidate antecedents, and the can-didate that is classified as better the largest number of times is selected as its antecedent.

Advances in machine learning have made it pos-sible to train a mention ranker that ranks all of the candidate antecedents simultaneously. While mention rankers have consistently outperformed the mention-pair model (Versley, 2006; Denis and Baldridge, 2007b), they are not more expressive than the mention-pair model, as they are unable to exploit cluster-level features, unlike the entity-mention model. To enable rankers to employ cluster-level features, Rahman and Ng (2009) pro-pose the cluster-ranking model, which ranks pre-ceding clusters , rather than candidate antecedents, for an NP to be resolved. Cluster rankers there-fore address both weaknesses of the mention-pair model, and have been shown to improve mention rankers. Cluster rankers are conceptually similar to Lappin and Leass X  X  (1994) heuristic pronoun re-solver, which resolves an anaphoric pronoun to the most salient preceding cluster.

An important issue with ranking models that we have eluded so far concerns the identification of non-anaphoric NPs. As a ranker simply im-poses a ranking on candidate antecedents or pre-ceding clusters, it cannot determine whether an NP is anaphoric (and hence should be resolved). To address this problem, Denis and Baldridge (2008) apply an independently trained anaphoricity clas-sifier to identify non-anaphoric NPs prior to rank-ing, and Rahman and Ng (2009) propose a model that jointly learns coreference and anaphoricity. Another thread of supervised coreference research concerns the development of linguistic features. Below we give an overview of these features.
String-matching features can be computed ro-bustly and typically contribute a lot to the per-formance of a coreference system. Besides sim-ple string-matching operations such as exact string match, substring match, and head noun match for different kinds of NPs (see Daum  X e III and Marcu (2005)), slightly more sophisticated string-matching facilities have been attempted, includ-ing minimum edit distance (Strube et al., 2002) and longest common subsequence (Casta  X no et al., 2002). Yang et al. (2004a) treat the two NPs in-volved as two bags of words, and compute their similarity using metrics commonly-used in infor-mation retrieval, such as the dot product, with each word weighted by their TF-IDF value.

Syntactic features are computed based on a syntactic parse tree. Ge et al. (1998) implement a Hobbs distance feature, which encodes the rank assigned to a candidate antecedent for a pronoun by Hobbs X  X  (1978) seminal syntax-based pronoun resolution algorithm. Luo and Zitouni (2005) ex-tract features from a parse tree for implement-ing Binding Constraints (Chomsky, 1988). Given an automatically parsed corpus, Bergsma and Lin (2006) extract from each parse tree a dependency path, which is represented as a sequence of nodes and dependency labels connecting a pronoun and a candidate antecedent, and collect statistical in-formation from these paths to determine the like-lihood that a pronoun and a candidate antecedent connected by a given path are coreferent. Rather than deriving features from parse trees, Iida et al. (2006) and Yang et al. (2006) employ these trees directly as structured features for pronoun resolu-tion. Specifically, Yang et al. define tree kernels for efficiently computing the similarity between two parse trees, and Iida et al. use a boosting-based algorithm to compute the usefulness of a subtree.
Grammatical features encode the grammati-cal properties of one or both NPs involved in an instance. For example, Ng and Cardie X  X  (2002c) resolver employs 34 grammatical features. Some features determine NP type (e.g., are both NPs def-inite or pronouns?). Some determine the grammat-ical role of one or both of the NPs. Some encode traditional linguistic (hard) constraints on corefer-ence. For example, coreferent NPs have to agree in number and gender and cannot span one an-other (e.g.,  X  X oogle X  and  X  X oogle employees X ). There are also features that encode general linguis-tic preferences either for or against coreference. For example, an indefinite NP (that is not in ap-position to an anaphoric NP) is not likely to be coreferent with any NP that precedes it.

There has been an increasing amount of work on investigating semantic features for coreference resolution. One of the earliest kinds of seman-tic knowledge employed for coreference resolu-tion is perhaps selectional preference (Dagan and Itai, 1990; Kehler et al., 2004b; Yang et al., 2005; Haghighi and Klein, 2009): given a pronoun to be resolved, its governing verb, and its grammatical role, we prefer a candidate antecedent that can be governed by the same verb and be in the same role. Semantic knowledge has also been extracted from WordNet and unannotated corpora for computing the semantic compatibility/similarity between two common nouns (Harabagiu et al., 2001; Versley, 2007) as well as the semantic class of a noun (Ng, 2007a; Huang et al., 2009). One difficulty with deriving knowledge from WordNet is that one has to determine which sense of a given word to use. Some researchers simply use the first sense (Soon et al., 2001) or all possible senses (Ponzetto and Strube, 2006a), while others overcome this prob-lem with word sense disambiguation (Nicolae and Nicolae, 2006). Knowledge has also been mined from Wikipedia for measuring the semantic relat-edness of two NPs, NP Strube (2006a; 2007)), such as: whether NP pears in the first paragraph of the Wiki page that has NP which this page belongs, and the degree of overlap between the two pages that have the two NPs as their titles (see Poesio et al. (2007) for other uses of encyclopedic knowledge for coreference reso-lution). Contextual roles (Bean and Riloff, 2004), semantic relations (Ji et al., 2005), semantic roles (Ponzetto and Strube, 2006b; Kong et al., 2009), and animacy (Or  X asan and Evans, 2007) have also been exploited to improve coreference resolution.
Lexico-syntactic patterns have been used to capture the semantic relatedness between two NPs and hence the likelihood that they are coreferent. For instance, given the pattern X is a Y (which is highly indicative that X and Y are coreferent), we can instantiate it with a pair of NPs and search for the instantiated pattern in a large corpus or the Web (Daum  X e III and Marcu, 2005; Haghighi and Klein, 2009). The more frequently the pat-tern occurs, the more likely they are coreferent. This technique has been applied to resolve dif-ferent kinds of anaphoric references, including other -anaphora (Modjeska et al., 2003; Markert and Nissim, 2005) and bridging references (Poesio et al., 2004a). While these patterns are typically hand-crafted (e.g., Garera and Yarowsky (2006)), they can also be learned from an annotated cor-pus (Yang and Su, 2007) or bootstrapped from an unannotated corpus (Bean and Riloff, 2004).
Despite the large amount of work on discourse-based anaphora resolution in the 1970s and 1980s (see Hirst (1981)), learning-based resolvers have only exploited shallow discourse-based fea-tures , which primarily involve characterizing the salience of a candidate antecedent by measuring its distance from the anaphoric NP to be resolved or determining whether it is in a prominent gram-matical role (e.g., subject). A notable exception is Iida et al. (2009), who train a ranker to rank the candidate antecedents for an anaphoric pro-noun by their salience. It is worth noting that Tetreault (2005) has employed Grosz and Sid-ner X  X  (1986) discourse theory and Veins Theory (Ide and Cristea, 2000) to identify and remove candidate antecedents that are not referentially ac-cessible to an anaphoric pronoun in his heuristic pronoun resolvers. It would be interesting to in-corporate this idea into a learning-based resolver.
There are also features that do not fall into any of the preceding categories. For example, a mem-orization feature is a word pair composed of the head nouns of the two NPs involved in an in-stance (Bengtson and Roth, 2008). Memoriza-tion features have been used as binary-valued fea-tures indicating the presence or absence of their words (Luo et al., 2004) or as probabilistic fea-tures indicating the probability that the two heads are coreferent according to the training data (Ng, 2007b). An anaphoricity feature indicates whether an NP to be resolved is anaphoric, and is typ-ically computed using an anaphoricity classifier (Ng, 2004), hand-crafted patterns (Daum  X e III and Marcu, 2005), and automatically acquired pat-terns (Bean and Riloff, 1999). Finally, the outputs of rule-based pronoun and coreference resolvers have also been used as features for learning-based coreference resolution (Ng and Cardie, 2002c).
For an empirical evaluation of the contribution of a subset of these features to the mention-pair model, see Bengtson and Roth (2008). Two important issues surround the evaluation of a coreference resolver. First, how do we obtain the set of NPs that a resolver will partition? Second, how do we score the partition it produces? 5.1 Extracting Candidate Noun Phrases To obtain the set of NPs to be partitioned by a re-solver, three methods are typically used. In the first method, the NPs are extracted automatically from a syntactic parser. The second method in-volves extracting the NPs directly from the gold standard. In the third method, a mention detec-tor is first trained on the gold-standard NPs in the training texts, and is then applied to automatically extract system mentions in a test text. 7 Note that these three extraction methods typically produce different numbers of NPs: the NPs extracted from a parser tend to significantly outnumber the system mentions, which in turn outnumber the gold NPs. The reasons are two-fold. First, in some corefer-ence corpora (e.g., MUC-6 and MUC-7), the NPs that are not part of any coreference chain are not annotated. Second, in corpora such as those pro-duced by the ACE evaluations, only the NPs that belong to one of the ACE entity types (e.g., PER -
Owing in large part to the difference in the num-ber of NPs extracted by these three methods, a coreference resolver can produce substantially dif-ferent results when applied to the resulting three sets of NPs, with gold NPs yielding the best results and NPs extracted from a parser yielding the worst (Nicolae and Nicolae, 2006). While researchers who evaluate their resolvers on gold NPs point out that the results can more accurately reflect the per-formance of their coreference algorithm, Stoyanov et al. (2009) argue that such evaluations are unre-alistic, as NP extraction is an integral part of an end-to-end fully-automatic resolver.

Whichever NP extraction method is employed, it is clear that the use of gold NPs can considerably simplify the coreference task, and hence resolvers employing different extraction methods should not be compared against each other. 5.2 Scoring a Coreference Partition The MUC scorer (Vilain et al., 1995) is the first program developed for scoring coreference parti-tions. It has two often-cited weaknesses. As a link-based measure, it does not reward correctly iden-tified singleton clusters since there is no corefer-ence link in these clusters. Also, it tends to under-penalize partitions with overly large clusters.
To address these problems, two coreference scoring programs have been developed: B 3 (Bagga and Baldwin, 1998) and CEAF (Luo, 2005). Note that both scorers have only been de-fined for the case where the key partition has the same set of NPs as the response partition. To apply these scorers to automatically extracted NPs, dif-ferent methods have been proposed (see Rahman and Ng (2009) and Stoyanov et al. (2009)).

Since coreference is a clustering task, any general-purpose method for evaluating a response partition against a key partition (e.g., Kappa (Car-letta, 1996)) can be used for coreference scor-ing (see Popescu-Belis et al. (2004)). In practice, these general-purpose methods are typically used to provide scores that complement those obtained via the three coreference scorers discussed above. It is worth mentioning that there is a trend to-wards evaluating a resolver against multiple scor-ers, which can indirectly help to counteract the bias inherent in a particular scorer. For further dis-cussion on evaluation issues, see Byron (2001). While we have focused our discussion on super-vised approaches, coreference researchers have also attempted to reduce a resolver X  X  reliance on annotated data by combining a small amount of labeled data and a large amount of unlabeled data using general-purpose semi-supervised learn-ing algorithms such as co-training (M  X uller et al., 2002), self-training (Kehler et al., 2004a), and EM (Cherry and Bergsma, 2005; Ng, 2008). Interest-ingly, recent results indicate that unsupervised ap-proaches to coreference resolution (e.g., Haghighi and Klein (2007; 2010), Poon and Domingos (2008)) rival their supervised counterparts, casting doubts on whether supervised resolvers are mak-ing effective use of the available labeled data.
Another issue that we have not focused on but which is becoming increasingly important is mul-tilinguality. While many of the techniques dis-cussed in this paper were originally developed for English, they have been applied to learn coref-erence models for other languages, such as Chi-nese (e.g., Converse (2006)), Japanese (e.g., Iida (2007)), Arabic (e.g., Luo and Zitouni (2005)), Dutch (e.g., Hoste (2005)), German (e.g., Wun-sch (2010)), Swedish (e.g., Nilsson (2010)), and Czech (e.g., Ngu . y et al. (2009)). In addition, re-searchers have developed approaches that are tar-geted at handling certain kinds of anaphora present in non-English languages, such as zero anaphora (e.g., Iida et al. (2007a), Zhao and Ng (2007)).
As Mitkov (2001) puts it, coreference resolution is a  X  X ifficult, but not intractable problem, X  and we have been making  X  X low, but steady progress X  on improving machine learning approaches to the problem in the past fifteen years. To ensure fur-ther progress, researchers should compare their re-sults against a baseline that is stronger than the commonly-used Soon et al. (2001) system, which relies on a weak model (i.e., the mention-pair model) and a small set of linguistic features. As re-cent systems are becoming more sophisticated, we suggest that researchers make their systems pub-licly available in order to facilitate performance comparisons. Publicly available coreference sys-tems currently include JavaRAP (Qiu et al., 2004), GuiTaR (Poesio and Kabadjov, 2004), BART (Ver-sley et al., 2008b), CoRTex (Denis and Baldridge, 2008), the Illinois Coreference Package (Bengt-son and Roth, 2008), CherryPicker (Rahman and Ng, 2009), Reconcile (Stoyanov et al., 2010), and Charniak and Elsner X  X  (2009) pronoun resolver.
We conclude with a discussion of two ques-tions regarding supervised coreference research. First, what is the state of the art? This is not an easy question, as researchers have been evaluat-ing their resolvers on different corpora using dif-ferent evaluation metrics and preprocessing tools. In particular, preprocessing tools can have a large impact on the performance of a resolver (Barbu and Mitkov, 2001). Worse still, assumptions about whether gold or automatically extracted NPs are used are sometimes not explicitly stated, poten-tially causing results to be interpreted incorrectly. To our knowledge, however, the best results on the MUC-6 and MUC-7 data sets using automatically extracted NPs are reported by Yang et al. (2003) (71.3 MUC F-score) and Ng and Cardie (2002c) results on the ACE data sets using gold NPs can be found in Luo (2007) (88.4 ACE-value).

Second, what lessons can we learn from fifteen years of learning-based coreference research? The mention-pair model is weak because it makes coreference decisions based on local informa-tion (i.e., information extracted from two NPs). Expressive models (e.g., those that can exploit cluster-level features) generally offer better perfor-mance, and so are models that are  X  X lobal X  in na-ture. Global coreference models may refer to any kind of models that can exploit non-local infor-mation, including models that can consider mul-tiple candidate antecedents simultaneously (e.g., ranking models), models that allow joint learning for coreference resolution and related tasks (e.g., anaphoricity determination), models that can di-rectly optimize clustering-level (rather than classi-fication) accuracy, and models that can coordinate with other components of a resolver, such as train-ing instance creation and clustering. We thank the three anonymous reviewers for their invaluable comments on an earlier draft of the pa-per. This work was supported in part by NSF Grant IIS-0812261. Any opinions, findings, and conclusions or recommendations expressed are those of the author and do not necessarily reflect the views or official policies, either expressed or implied, of the NSF.

