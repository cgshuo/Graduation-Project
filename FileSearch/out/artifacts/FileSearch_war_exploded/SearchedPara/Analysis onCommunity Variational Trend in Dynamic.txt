 Temporal analysis on dynamic networks has become a pop-ularly discussed topic today, with more and more emerging data over time. In this paper we investigate the problem of detecting and tracking the variational communities within a given time period. We rst de ne a metric to measure the strength of a community, called the normalized tempo-ral community strength. And then, we propose our analysis framework. The community may evolve over time, either split to multiple communities or merge with others. We address the problem of evolutionary clustering with require-ment on temporal smoothness and propose a revised soft clustering method based on non-negative matrix factoriza-tion. Then we use a clustering matching method to nd the soft correspondence between di erent community dis-tribution structures. This matching establishes the connec-tion between consecutive snapshots. To estimate the vari-ational rate and meanwhile address the smoothness during continuous evolution, we propose an objective function that combines the conformity of current variation and histori-cal variational trend. In addition, we integrate the weights to the objective function to identify the temporal outliers. An iterative coordinate descent method is proposed to solve the optimization framework. We extensively evaluate our method with a synthetic dataset and several real dataset-s. The experimental results demonstrate the e ectiveness of our method, which is greatly superior to the baselines on detection of the communities with signi cant variation over time.
 H.2.0 [ Information Systems ]: General Dynamic Networks; Evolutionary Clustering; Community Analysis
Dynamic network analysis aims at discovering knowledge from evolutionary process of network data. It has attracted more and more attention in recent years, with the avail-ability of many dynamic online datasets. Compared with static network analysis focusing on only one snapshot, dy-namic analysis makes it possible to detect the key elements through a certain period of time, or the critical factors to the evolutionary trend [25]. It also has extensive prospect in many real applications [4, 23], such as future prediction, investment and so on.

In this paper we focus on dynamic community variation analysis. There have been many studies in recent years on community level research [1,6,11,17,24,26]. Compared with node level analysis, the community level work widens our scope in the exploration of group formation and structure. We propose a novel framework to detect the communities that have signi cant strength variation. We rst de ne the normalized community strength by claiming that, the strength of a network should depend on the di erence be-tween the internal and outward edge weights. And then, we take into account the strength of historical networks to guarantee that the network progresses smoothly.

To make the clustering well suited for dynamic evolution scenario, we adopt a revised method based on non-negative matrix factorization(NMF) [12]. In many real world net-works, one node may simultaneously belong to multiple com-munities, e.g., an author working in an interdisciplinary re-search could have frequent collaboration with people in d-i erent areas. For this reason, we propose our community detection method based on NMF which allows overlapping clusters. Besides, we combine the current clustering cost with the historical cost to jointly measure the clustering quality in a dynamic process. After the communities are detected from the network at time t , we will use them as the initialization for time t + 1. This guarantees the clustering between consecutive timestamps will not change dramati-cally. This can also be well explained in an evolutionary view, where the clustering is formed as a result of the pre-vious snapshot, and evolves into new community structure by an iterative update process. After we obtain the cluster-ings on each snapshot, we nd the correspondence between each consecutive snapshots by solving an optimization func-tion. With the knowledge of corresponding matching, the individually detected communities from each snapshot can be linked as a whole series. By the above processing, we can deal with the evolving communities that allow membership change in further investigation and analysis.
After w e obtain all the clustering and correspondence in-formation, we are able to detect the communities with sig-ni cant variations. In this paper, we focus on the variation in community strength. To illustrate this kind of variation, a toy example of a user-to-user network is given in Figure 1. In this example the network consists of two communities, with nodes from each one represented in either circle or dia-mond shapes. At time t in Figure 1(a), both of communities have exactly the same strength. Here we show three prin-cipal kinds of evolutionary changes in strength, by di erent conditions at time t + 1. For case 1 at time t + 1 shown in Figure 1(b), the users in the left community have more interactions than previous timestamp while the users in the right community lose some internal links that existed be-fore. Hence we can determine the relatively high variational rate of the left community. For case 2 shown in Figure 1(c), one user from the right community joins the left community, which changes the memberships in both communities. This case can be further extended to community splitting and merging. For case 3 shown in Figure 1(d), the users in both communities have more interactions than before. However, with comparison we can observe that the left community grows much faster than the right one. In real applications there may exist a global trend that leads to an overall uni ed variation. In this case we are more interested in communi-ties with signi cant growth or recession compared with this global trend.

From the detected communities we can discover lots of in-teresting knowledge. This can be well illustrated by many real life scenarios. It is easy to notice in social networks that some newly emerging groups grow rapidly, with members becoming more interactive as time progresses. This is prob-ably caused by the fact that these members share common interests, which are quite related with the current period, such as election or the advent of some new social phenom-ena. In social-sharing networks, a fast growing community usually indicates the viral spread of certain messages. It is very likely to discover hot research topics in a co-author network if we can detect the community with rising collab-oration frequency. We can also nd similar cases in the biological domain. For certain kind of diseases such as can-cer, it has been reported [10] that the expression pro ling of some genes will change as the cancer progresses. If we can nd the communities with signi cant changes compared with others, it will be a remarkable insight and improvement to the medical research.

The variational rate should depend on the strength change from one time to the next. In addition, we consider temporal smoothness of the variational rate by combining with histor-ical growth trend, as we do not expect it to change dramat-ically. Furthermore, there are often noise caused by either uncommon perturbation or data acquisition error. To reduce the in uence of these factors, we apply weights on commu-nities to estimate the contribution made by each of them. Given these conditions, we propose an objective function, which integrates temporal information and noise reduction. By solving this function using an iterative updating method, we can gure out the nal strength variational rate.
We organize the paper as follows. In Section 3.1, we de ne the community strength metric. In Section 3.2, we propose the rst stage of the framework, and describe our method on solving evolutionary clustering and soft clustering corre-spondence. Section 3.3 presents the second stage with the Figure 1: A Toy Example of Variation in Communi-ty Strength. measurement and detection of community variation. Some extensive applications are listed in Section 3.4. We include our experimental results in Section 4 and we conclude our work in Section 5.
The problem of community detection in dynamic networks has been studied in recent years [3, 5, 7, 8, 18, 22, 27]. Com-pared with static networks, the clustering on dynamic net-works should consider historical conformity and temporal factors. Chi et al. [7,8], Lin et al. [18], Chakrabarti et al. [5] and Berger-Wolf et al. [3] proposed di erent community dis-covery methods on dynamic networks. These methods main-ly combined the clustering quality on both current and his-torical networks. Even if these methods can guarantee the accuracy and consistency for clustering results, they provide limited information for each community during the evolu-tionary process.

There are also many works devoted in solving the corre-spondence between di erent clusterings. The clustering de-scribes the community layout in each snapshot. The match-ing can be implemented in a hard way [15], where only the best matched entity is selected. This can be applied to the problem of label switching, but not with the dynamic net-work analysis, which involves community merging and s-plitting. To allow one-to-many relationships, the clustering matching can be done in a soft way [20], in which each en-try of the matching matrix denotes the probability of the correspondence between the pair of communities. Gupta et al. [14] also proposed a method to do community matching with the awareness of outliers. It reduces the a ect brought by the temporal outliers on the matching problem by solving an objective function in form of weighted square error.
With recent research on dynamic networks, we can have a better idea on how users behave in networks and how com-munities evolve over time. Backstrom et al. [2] did research on the evolution and growth of communities in social net-works. They analyzed the features that lead to the trend of community growth. Cook et al. [9] reported that group chat on Twitter leads to a growing trend. However, these works do not well address the issue of how to precisely de-tect and track the communities that vary signi cantly as time progresses. Nan et al. [13] proposed the PACS algo-rithm, which measures the temporal community strength by combining both current and historical network informa-tion. Even if PACS algorithm provides an e ective way to measure the community strength, it can only apply to the case with xed community memberships. If we track in a long period with many membership alterations involved, the result from PACS will be less meaningful. Further, it can not be used to measure community variation.
The basic ow of our framework is given in Figure 2. It can be divided into two stages. The rst stage involves solving evolutionary clustering in dynamic networks and correspon-dence between snapshots. Then by combining the strength in each community and the matching information, we use the proposed algorithm to estimate the variational rate for each community. In this section, we will rst de ne the temporal community strength, based on which we will pro-pose our dynamic community signi cant variation detection approach. To formalize the problem, we rst start with the notation introduction. We represent a matrix using the no-tation D . D i;j denotes the ( i, j ) th element of matrix D . D and D :j denote the i th row and j th column of matrix D , re-spectively. As for a vector V , V i represents the i th element in this vector. Some notations used in this paper are listed in Table 1.
Given a network sequence { G t } t =1 ;::;T , each G t = &lt; V W t &gt; is the network at time t , where V t is the set of nodes in the network, E t includes all the edges that link pair of nodes, and W t is a symmetric matrix representing the edge weight-s. Each community in network at time t is a subset of V t which usually has strong internal intensity compared with between-community connections. The community strength of a co mmunity z in G t can be de ned as [13]:
Strength ( z ) = by which we can conclude that the communities with high-er strength should have stronger internal intensity and less outward edges. The rst term ensure the positive strength value.

As usually well detected communities have much stronger internal intensity, the penalty from the external edges, or the second term in Eq. 1 is limited. The results are thus biased towards the ones with larger size. Here we propose the normalized community strength as: whic h penalizes the strength value by the size of community. It can be further reformulated with some matrix derivation to the following equation: in which C t is the | V t | X  by  X  K t cluster membership matrix at time t , with ( i, j ) th element denotes the probability that the i th node belongs to j th community. K t denotes the number of clusters detected at time t . 1 N 1 ;N 2 denotes an N 1 matrix with all entries set as 1.

In real applications, people usually expect gradual tran-sition of community strength, which necessitates a tradeo between current and historical status. The strength value can then be reformulated by solving the following objective function: in which T S is the matrix of temporal community strength, with ( z, t ) th element representing the temporal community strength of z at time t . By using Lagrangian Multipliers, we can rewrite the objective function as:
Here we only focus our optimization with respect to a cer-tain timestamp t . N orStrength ( z ) is the normalized com-munity strength of z , and N orHStrength ( z ) is the normal-ized community strength of z on previous snapshot, that is: By setting the derivative of the equation with respect to T S z;t , we obtain the following equations: and Then from equations above we get the solution for T S z;t
For each network at time t , i.e., G t , we rst conduct com-munity detection on the network, and then match the con-secutive clusterings with soft correspondence. This proce-dure can guarantee the accuracy of clustering and mean-while establish the links among communities from di erent timestamps.
 To allow for soft clustering, we adopt the 3-factor NMF. To make sure the clustering does not change dramatically from time t  X  1 to time t , we penalizes the clustering quality of current clustering on the previous network. As the input network matrix is symmetric in our case, the optimization function is as follows: where  X  denotes the weight for penalty of current clustering on historical network, C t is the | V t | X  by  X  K t cluster mem-bership matrix, K t is the number of clusters at t , and S the cluster relationship matrix. The iterative update rules for C t , S t and S t  X  are as:
We up date one parameter by xing the others and re-peat the process iteratively until convergence. Given the condition in real applications, we can assume that the com-munities evolve continuously, i.e., the formation of a group should depend more or less on historical data. We do not consider the situation in which events take place indepen-dently at each time or with random probability. Based on this assumption, after we compute the community mem-bership matrix for a certain timestamp t , we set it as the initialization for time t + 1, which ensures the smoothness of clustering evolution. The whole procedure is given in Al-gorithm 1.
 Algo rithm 1: Evolutional Clustering
The resul t of Algorithm 1 is a series of community mem-bership matrices { C t } t =1 ;::;T . Even if we have initialized the clustering process by previous clustering, the clusterings in di erent timestamps may still be inconsistent with their cluster labels, e.g., C t and C t +1 are as follows:
It is then very likely that the rst cluster in C t corre-sponds to the second cluster in C t +1 and vice versa. Also, it is commonly observed that one community may split into multiple while several other communities can merge into one during evolution. Thus, a clustering matching is necessary for consistency maintenance. Given the assumption that networks evolve gradually and smoothly, we can focus on the clustering matching between two consecutive snapshots.
Given two clusterings represented by membership matri-ces as C src and C tar , we are going to nd the matching relationship M from C src to C tar by solving the following optimization function, which is proposed in [20]: f ( M ) =  X  C tar  X  C src M  X  2
The second term in the function controls the sparseness of matching, which very well ts our case of dynamic evo-lution. As in consecutive timestamps merging and splitting usually occurs gradually and gently, we use the sum of vari-ance on the matching probability for each cluster in C tar to balance the correspondence, which guarantees that on-ly limited number of communities from C src are matched to each community in C tar .  X  denotes the weight for this term. The third term serves as the approximation of the constraint that this term. M z 1 ;z 2 represents the probability that cluster z in C src matches to cluster z 2 in C tar .
 We use the following multiplicative updating rule: The symbol of '  X  ' denotes the entry-wise matrix product. It has been proved by utilizing auxiliary function [20] that the value of f ( M ) in Eq. 14 will be non-increasing and will nally reach convergence by the update using Eq. 15. For each pair of consecutive community membership matrix C t and C t +1 , we iteratively update M until convergence. With the community matching matrix, we can have a clear idea how the community of one time matches to the other in the next timestamp, and even how communities merge or split to form new ones during evolution.
We are interested in the communities with signi cant vari-ation in their community strength. On one hand, we analyze in a dynamic view to detect this type of phenomena, as this occurs during the evolutionary process. On the other hand, the growth or recession should not depend too much on the size of community or the strength of community. We can il-lustrate this problem with a social network example. There are many topics that have been liked or shared by a large number of people. However, these groups may stay with rel-atively static activities over time and show little evidence of further growth. On the contrary, there may be some small groups where apparent growth takes place with their inter-actions. We are more interested in these groups, where more useful knowledge can be discovered, and some measures can be taken accordingly based on predictable future trend.
We investigate the problem of community growth by con-sidering the relationship between consecutive timestamp-s. In a real evolutionary process, we hold the assumption that the community strength value varies gradually and the probability of sharp increase or decrease is rare. Hence we measure the variational rate as a linear combination of the change at current time with the previous trend. On the oth-er hand, it is commonly seen that some perturbation takes place with data over time in real applications. This kind of noise may be detected by traditional methods as signi cant growing or recession phenomena and mislead the learning method. To mitigate these e ects, we use weight param-eters to control the contribution for each community, and propose the following objective function with respect to a certain timestamp t : in which log ( 1 a for each community,  X  is the parameter for the linear trade-o between current and previous variation, M 1 stands for the matching matrix of clustering from time t to t  X  1, M stands for the matching matrix from time t  X  1 to t  X  2, and here we use M ( i, j ) to denote the ( i, j ) th entry in M . L 1 and L 2 denote the set of communities at time t  X  1 and t  X  2, respectively, and R z represents the variational rate of community z at t , the time when z emerges. Then we solve the optimization problem by following the iterative method.
We rst use Lagrangian Multipliers to rewrite the ob-jective function together with the constraint,  X  is the La-grangian multipliers for constraint the one for constraint derivative to zero with respect to a k , we have the following updating rule: and
B y combining Eq. 18 and Eq. 20, we have:
Th en we update R from a k . By setting the derivative with respect to R z as zero, we have the following updating rules:
To formulate the method in matrix operations, we have listed the whole process in Algorithm 2 with some deriva-tion and name it as VACS (Variation Analysis of Communi-ty Strength). In the algorithm, T C, T P, DC, DP, T CC and T P P are used as some intermediate matrices or vectors to reduce repetitive computing during the calculation of DN and N N , which are derived from Eq. 23 and Eq. 25. The symbol of '  X  ' denotes entry-wise division. In general, the variational rate will be larger than 1 for the growth in com-munity strength, and less than 1 for the recession.
Our proposed method VACS well utilizes the informa-tion from evolutionary clustering and soft matching corre-spondence. It allows changes in community membership and takes account of temporal smoothness. Also by the weight setting and the bound on Algori thm 2: VACS : Community Growth Analysis from tem poral outliers can be mitigated. After we solve the objective function at time t , we can obtain the variational rate R z for all z belonging to snapshot at t  X  1. The design at this point is reasonable due to the fact that, by the time t , we only have enough information to estimate the growing trend for communities at t  X  1, with the change during the interval from t  X  1 to t . On the other hand, for optimization procedure on each R z , we need the matching and temporal strength information from all communities at time t . This explains the reason why we segment our framework as t-wo stages and conduct clustering and matching before the estimation of variational rate on communities.
The proposed framework can estimate the variational rate for each community detected in dynamic networks. In addi-tion, the method can be further extended to many applica-tions. Here we introduce the problem of top-K consistently growing communities detection and online incremental pro-cessing based on our method.
 Top-K most Consistently Growing Communities .

Through Algorithm 2, we have estimated the variational rate for each community. In most cases, compared with the communities that suddenly shoot up, people are more interested in the ones with consistent growth over whole tracking period. As the variational rate is highly related with the ratio of strength between consecutive snapshots, we aggregate them by the product of the variational value at each snapshot. Assume the community z appears at time t , the growth consistency value can thus be expressed as: in which R t is a column vector which consists of the varia-tional value of all the communities detected at time t , M denotes the clustering matching matrix from time t  X  n + 1 to time t  X  n when n is positive, and the one from time t  X  n  X  1 to t  X  n when n is negative.

We can also formulate Eq. 27 in a weighted way, and the measure becomes GCM z = RM ( t z ) = R z . The weight w t can depend on many factors, such as the interval length from timestamp t to t + 1, the number of communities at time t , the overall average growth value at time t , and so on.
 Online Community Growth Analysis .

In recent years, online analysis has attracted more and more attention. Online processing means we should run our algorithm on streaming data without future information. In this part we brie y discuss the online version of VACS . It is very helpful if we can detect the fastest or slowest growing community at the time when it happens, by which we can take some measures accordingly as soon as possible.
The VACS method can be easily adapted in online incre-mental applications. Assume we are working on a parallel computing environment. When new data arrives at time t , we already have all the information before t . We can calculate evolutionary clustering from C t  X  1 by solving Eq. 10. The NMF problem can be eciently solved in paral-lel [19]. Then we compute in parallel on each community in C t for its matching to C t  X  1 as well as its temporal commu-nity strength. After synchronization, we solve Eq. 17 itera-tively on each community emerging at time t  X  1 in parallel. An outer non-parallel loop is used to control the update for { a k } . The parallel update for each R i is implemented in-side the loop. When we reach convergence, we calculate the estimate of variational rate for each community at time t as Re i = M i:  X  R t  X  1 , where M is the matching matrix and R  X  1 is the variational rate for communities arising at time t  X  1, i.e., the output from VACS . Then we use Re as the initialization for the iterative calculation for R t , when new data comes.
In this section we implement our framework on both syn-thetic and real world datasets. We validate the performance of community detection in rst two experiments, by com-paring with ground truth information. In the second and third experiments we evaluate our method on DBLP and IMDB datasets as case studies. We justify our results by using concrete data information.
In this part we rst evaluate our method on a synthet-ic dataset created according to [18]. We generated networks for 10 consecutive snapshots, each with 100 nodes. We man-ually divide them into 5 communities { C 1 , C 2 , C 3 , C and each has 20 nodes. At the initial stage, we add edges for each community by tuples ( p in , p out ) and set the weight on each edge to be 1. p in denotes the probability to ad-d each internal edge and p out stands for the probability to add each between-community edge. We set the value for each community as (0 . 2 , 0 . 1) and generate the network in 1 st snapshot. Then from 2 nd to 10 th snapshot, we in-crease or decrease the weight on edges by using a 4-tuple G = ( p inc , p dec , p oinc , p odec ). From snapshot t we double the weight on each internal edge with probabil-ity p inc , or add the edge if the weight is 0 at t  X  1. On the contrary, for each internal edge, we reduce the weight by half with probability p dec . Similarly, we use p oinc p odec to control weight increase or decrease for between-community edges. We set this 4-tuple to each communi-C created, we know the community C 1 has the most signi cant growing trend and C 5 has the slowest variation. To show the e ectiveness of our method, we compare our method with two baseline methods. As there is no previous method that handles the same problem, we make comparison with the variation of two previous relevant methods [13].
Community Internal Density(CID) : In this baseline method, we rst calculate the internal density for each communi-ty by the normalized sum of its internal weight [17], as Rate C ( z ) = CID t +1 ( z ) /CID t ( z ).

K-Nearest Neighbors(KNN) : At each snapshot, for each community z we detect its top-K most similar community by Jaccard coecient. Then the variation can be comput-ed as the weighted sum of the variation rate of these K communities, Rate K ( z ) = normalized Jaccard coecient, s.t. variational rate calculated from our method, but with no historical information, i.e.,  X  = 1.

We use the proposed evolutionary clustering on this gen-erated network series and got 25 overlapping communities in each snapshot. We measure the similarity at each times-tamp between the fastest growing community detected by each method( VACS , KNN , CID ) with community C 1 using Jaccard coecient. On the other hand, as we notice from the way of community generation, these ve communities in-crease their weights with higher probability on internal edges than outward edges, and they more or less increase their in-ternal strength over time. Hence the community with weak-est growing trend should consist of nodes well separated to these prede ned communities. To measure this, we use en-tropy S =  X  experimental results in Figure 3 and Table 2.

Tab le 2 presents the average value in ten snapshots. We can observe that our method outperforms baselines in both fastest and slowest growing community detection. In Fig-ure 3, we can also observe that, as the time passes, the value of Jaccard coecient via our method increases more consistently with less perturbation. This well demonstrates the e ect of temporal smoothness, as we not only consider current growth, but also combine the trend in past time. The overall growth in Figure 3(a) and overall decrease in Figure 3(b) also illustrates the better community detection result, which well demonstrates the e ectiveness of evolu-tionary clustering.
The social evolution dataset records the daily activities from students through their mobile phones. It was collect-ed by MIT dynamics lab [21], and provides the informa-tion about the call, message and sharing in a given peri-od. The dataset also gives information from surveys tak-en on 10/19/2008, 12/13/2008, 3/5/2009, 4/17/2009 and Table 3: Weights for Various Friendship Categories 5/22/ 2009 , respectively. To validate our result using this information, we divided the original interaction records into ve snapshots by the date of surveys, and constructed net-work W k from each snapshot. W k is a symmetric matrix in which ( i, j ) th entry denotes the frequency of interaction-s between i th student and j th student. We also construc-t friendship network F t . In each survey, the student was asked his friendship with others in terms of the ve levels given in Table 3. We assign the weight on each edge from 0 to 3 based on the level of friendship.

To validate the variation detection using this friendship network F t , we rst measure the intensity of each commu-nity in F t by the gap between the inside-community aver-age friendship and the outside-community average friend-ship. The community division is based on membership ma-trices { C t } t =1 ;::;T , which has already been decided from the interaction network by earlier mentioned evolutionary clus-tering procedure. The intensity value will be higher if stu-dents in same community know each other well, while they have few connections outward. After we gathered the in-tensity values, we calculate the friendship variational rate for each community at time t with two versions. In the rst version we x the community and the rate is com-puted as Rate ( z ) = Intens t +1 ( z ) /Intens t ( z ). The second version takes into consideration of clustering evolution and matching, and can be calculated by equation Rate ( z ) = M  X  1 z:  X  Intens t +1 /Intens t ( z ). M  X  1 is the matching ma-trix from t to t + 1, Intens t is the column vector of inten-sity value for all communities at time t . The correspond-ing CID baseline equation in second version will become Rate C ( z ) = M  X  1 z:  X  CID t +1 /CID t ( z ) and the same modi-cation goes for KN N baseline. For both cases, the higher rate value indicates the trend of higher intimacy for this group. Then we rank the variation rate for all communities at same timestamp, which we call rank L f .

As this friendship information re ects the real belief by students, it can be used to validate the inference by our method from their daily activities. With the variational rate value gured out by the VACS algorithm, we rank the value in each snapshot as L v . We then verify whether our results match the survey information, by measuring the correlation between L f and L v , using Kendall's  X  coecient [16]. The result is shown in Figure 4(a). Kendall's  X  ranges from -1 to 1, where -1 indicates completely reverse ranking and 1 indicates identical ranking. The higher the value, the more correlated the two rankings are. It can be easily observed from Figure 4(a) that VACS outperforms baselines in both with and without community matching cases. As CID main-ly focuses on internal density and ignores the outward edges, it may not be able to measure the friendship precisely. Com-pared with CID , KNN performs much better, as it uses a di erent community metric, and also involves local informa-tion. However, it did poorly compared with VACS as it does not take into consideration of the temporal informa-tion. On the other hand, VACS matches the real friend-ship information best, as it not only involves smoothness, but also reduces the noise. Even with the xed community in rst version, VACS with evolutionary view outperforms baselines, which are designed speci cally for xed member-ship. When we consider the evolution of communities, or use second version, the advantage of VACS becomes more obvious, despite the revision for baseline methods in evolu-tionary view.

In this dataset, the attitude of students will not change dramatically in short time. If two students i and j keep close communication for a long time, and in one snapshot their interaction frequency drops sharply, this is more likely to be caused by some personal reason rather than by the sud-den change of great friends to strangers. On the contrary, if two students never know each other before, and from a certain timestamp t they start to message each other very frequently. This usually means they share some topics and get to know each other, but their belief of friendship will not change directly from strangers to close friends. In most cases, this change takes place gradually. Hence, temporal smoothness is very necessary in this case. The result well demonstrates VACS can re ect the variational trend of s-tudents' real belief on friendship.

We then evaluated the in uence from historical informa-tion and the temporal outlier detection. Figure 4(b) shows the relation between rank correlation  X  and  X  . We can ob-serve that it reaches its peak at around  X  = 0 . 8. This hill-shaped curve well illustrates that the best measure takes place with a good combination of current and historical in-formation. When  X  is close to one, it loses historical infor-mation and thus little smoothness is involved. When  X  is very small, it works poorly. This is predictable as we can-not rely completely on historical trend while almost ignoring what happens currently. Figure 5 shows the interaction and Figure 4: Performance on Social Evolution Dataset. friendship variational rate of temporal outlier communities, detected with largest a k value at each snapshot. Interac-tion variational rate on community z at time t is de ned as InterRate ( z ) = N orStrength ( z ) /N orHStrength ( z ), and friendship variational rate is de ned as F riendRate ( z ) = Intens t ( z ) /Intens t  X  1 ( z ), which represents the variational rate of real friendship in community. We can observe that large gap exists between the two curves when the community is identi ed as a temporal outlier. Hence the variational rate estimated from interaction network cannot truly re ect the friendship variational trend for these detected communities, which well supports the e ectiveness of our method.
We also validated the e ectiveness of evolutionary cluster-ing in our framework. By utilizing the friendship network information, we calculate the clustering quality for the in-teraction networks. Similar to the previous experiments, for each community we use the gap between average inter-nal friendship and outward friendship weights as the quality measure. Then we take the average for all detected commu-nities as the overall clustering quality. We make compari-son on the results with di erent historical penalty weights, as well as hard clustering baseline. The result is shown in Figure 6. As in this case one student may belong to mul-tiple friendship communities, a hard clustering method is less meaningful than soft correspondence. We can observe that the hard clustering method K-means performs poorly compared with the soft NMF-based method. At the rst timestamp, we have no historical information and thus the quality value is very close for curves with di erent weight-s. It can be observed that the clustering quality is optimal when  X  is around 0 . 15. At this point it reaches the best tradeo between historical and current information. After we combine the historical information, we can nd the per-formance will become better over time. When  X  reaches 1, which means we rely 50% on history, we get a relative-ly poor clustering. Thus, we conclude that the temporal smoothness is necessary, while the weight for combination should be chosen properly. We applied our method on a subset of DBLP Dataset [28]. There are totally 144,179 papers involved which are pub-lished during 1991-2000. We divided them into 5 snapshots, each with a 2 year period. There are in total 1059 authors and 43 venues involves. From the provided information, we construct an author-to-author network from each timestamp and set the weight for each edge as the collaboration times during that period. Two nodes will not be linked if the corresponding authors share no overlap on any publication.
We detect the author communities that grow signi cantly in collaboration. We rst detect the most consistently grow-ing community from 1991-2000 by the method mentioned above. We assume it to be community z that belongs to time t . In this dataset we hold the assumption that the com-munity evolves with relative strong internal intensity. Hence it is less likely to nd dramatic membership change during evolution, such as the case with one community equally split to multiple small communities. Based on this assumption, we then nd from each snapshot other than t the communi-ty that matches z best. Table 4 shows the fastest growing community and the corresponding conferences or journals where they coauthored. The number enclosed in parenthe-sis denotes the times of collaboration in this venue.
We can easily observe from Table 4 that the collaboration frequency for this group keeps growing consistently, from only 3 times in the rst snapshot to 18 times in the last snapshot. We can also nd that new members keep joining as time progresses, who started collaboration with authors already in this group, from which we can infer that the eld they are working on is quite attractive during the period. By
Figure 6: The In uence of Historical Information. observing the venues of their publications, we can conclude that these authors work in relatively close and limited areas. Further, they started to coauthored more consistently over time in certain conferences or journals such as AI*IA and ISMIS. This well explains their high variational rate and shows the e ectiveness of our method.
In this experiment we detect the top fastest growing movie star communities by applying our method on a subset of IMDB dataset 1 . This dataset involves the American made comedy movies and TV plays from 1991-2002 , together with the information of corresponding actors that participate in them. We construct an actor-to-actor network from four s-napshots, each with a 4 year period. The weight of each edge ( v i , v j ) will be set as the collaboration frequency be-tween actor i and actor j during that period. Totally 700 movie stars are involved in this dataset. www.imd b.com/interfaces
We run the VACS algorithm to measure the variation-al rate for star communities. We detect the top-3 fastest growing communities and track the collaboration for each of them from 1991 to 2002. The detailed information is given in Table 5. The 2nd to 5th columns in the table indicates the times of cooperation inside this group during each time period. We can observe that all three communities show the rapid growth trend. The collaboration of the third commu-nity decreased at the beginning, but later shows a strong re-bound, which makes it an overall top-3 fastest growing group during 1991-2002. All these three communities hold the sim-ilarity that the actors in each one share similar interest in certain type of movie, or they have established consistent collaboration on some series movie or TV plays. The results well support that the communities detected by VACS are really meaningful.
In this paper, we proposed a method called VACS to analyze the variational rate for communities on dynamic networks. The VACS algorithm involves information from clustering evolution, temporal smoothness and noise reduc-tion. The whole framework can be implemented by two separate stages. At the rst stage we conducted evolution-ary clustering, soft correspondence matching and temporal strength calculation. At the second stage we solved the pro-posed optimization model and obtained the estimation of the variational rate for each community. The e ectiveness is well supported by the validation on synthetic and social evolution datasets, in which our method outperforms base-lines in various comparisons. The case studies on DBLP and IMDB datasets also show very impressive results with inter-esting information uncovered from the detected signi cant communities.
The materials published in this paper are partially sup-ported by the National Science Foundation under Grants No. 1218393 and No. 1016929.
