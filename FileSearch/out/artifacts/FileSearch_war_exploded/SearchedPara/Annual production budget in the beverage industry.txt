 1. Introduction
The beverage industry is a sub-sector of the food industry, the second largest sector in the Europ ean manufacturing industry in terms of value added. It supplies a variety of products from wine, beer and spirits to mineral and sparkling water and soft drinks.
Markets worldwide are strongly a ffected by cultural differences, especially in Europe. This effect creates the environment for the appearance of small to medium size companies that are specialized in local products and/or local bran ds. Nevertheless, there are a number of large multinational companies able to compete in markets across the globe offering a wide variety of products, such as soft drinks. Today X  X  competition in this sector leads companies to expand their product portfolio, which combined with the advanced technology present in modern production sites, raises the need for efficient production planning. Moreover, production sites in this industry tend to be geographically disperse allowing companies to satisfy local demands at lower costs. Production planning is often conducted considering only one plant at time, ignoring the potential benefits of coordination. This paper is inspired by a real industrial case from a company competi ng in the beer and soft drink industries. The focus is to define a long-term production plan to a series of production (filling) lines located in different plants. The scheduling of product families at each filling line is the basis for production, inventory, and trans fer decisions. Transfer decisions represent movements of finished products and come from the fact that demand observed at a geographical area around each plant can be satisfied by other production sites to cope with under capacity of a given plant. Under these conditions, plants act both as production and distribution centers since warehouses are located near them and have individual demand. Decisions are traditionally made for a rolling planning horizon of 12 X 18 months with a monthly bucket.
Real-world production planning problems often result in intract-able models, and even simplified versions result in NP-hard problems. However, only realistic modelling of the problem features can help managers in their decisions, which was already pointed out as a field of future research of two previous literature reviews on production planning problems ( Karimi et al., 2003 ; Jans and Degraeve, 2006 ). Furthermore, to deal with the complexity of industrial applica-tions, Jans and Degraeve (2006) encourage the use of metaheur-istics. Naturally, the large-scale instances that arise in our application demand their use. Metaheuristics are frameworks used to solve combinatorial optimization problems, guiding other simple heuristics to search for high quality solutions. Local search (or neighborhood search) is among these heuristics. They attempt to iteratively improve an incumbent solution by replacing it with a better solution found in its neighborhood leading to a local optimum. Several schemes have been developed to overcome the entrapment in local optima. Variable neighborhood search (VNS) is a local search framework based on systematic change of neighborhoods both to find local optimum and to perturb the solution to emerge from entrapment ( Hansen et al., 2008 ). We make use of VNS principles and of our problem formulation to develop a heuristic for the problem.
Our local search attempts to find a better assignment of families to filling lines, and the subsequent decisions on production, inventory and transfers are achieved through linear programming (LP). This neighbor evaluation methodology can be expensive as we are dealing with very large neighborhoods, the refore we test diffe rent techniques to speed-up the local search. The final tableau of the LP simplex algorithm provides valuable information that we use to guide the search. Other, speed-up techniques involve the use of dual-reoptimi-zation to quickly identify and get rid of low quality solutions. Tests performed on a set of randomly gen erated instances attested to the algorithm X  X  superiority over commercial solvers and other VNS variants for medium and large size instances. Later the benchmark against industry current practice revealed its potential cost saving capability.

The remainder of the paper is as follows. In Section 2, we start by describing the production process of the two different types of products (beer and soft drinks) tackled here. Planning process and major planning constraints are introduced in Section 3. We also integrate long-term planning in the industry planning framework and pinpoint industry practices. Section 4 presents the real-world case study and related work in the literature. Section 5 is dedicated to the problem modelling and solution methodology.
Section 6 reports numerical experiments, first on a collection of randomly generated instances to assess the quality and robust-ness of the algorithm, and later on real-world instances, together with a benchmark against the current practice at a company.
Finally, the paper ends with a short summary and outlook. 2. The beer and soft drink production process
Beer and soft drink industries share some common features in their production process. Both encompass two main production stages: liquid production (stage I) and liquid bottling (stage II).
Stage I of the beer production process, also known as brewing, it has the purpose of converting the sugars present in the starch source into alcohol through a reaction of a yeast. Different beers have different recipes that determi ne their production process. Yet, generally there are three main processes in beer production: wort preparation, fermentation and maturation, and filtering. Wort preparation consists of the extraction of the fermentable sugars from usually barley malt and, in addition, of hop. Fermentation follows next and its goal is to transform the sugars into ethanol through the action of fermenting yeasts. Undesirable substances from the censorial point-of-view, are removed in maturation in a series of chemical, biological and physical steps. Fermentation and maturation processes have the longest processing times and depending on the beer recipe, they can last from 4 days to 3 weeks. The beer resulting from the previous process is turbid , therefore a filtration process is conducted. During this step for some flavored beers, syrups or concentrates are also added. Non-alcoholic beers pass through a stripping process to remove the ethanol. For more detail about the beer production process the reader is referred to Eskin (1990) , Kent and Evers (1994) and Kourtis and Arvanitoyannis (2001) .
On the other hand, soft drinks are beverages consisting primarily of carbonated water, sugar, and flavorings. Stage I of soft drink production starts with water clarification. Liquid flavor preparation follows next, and is conducted in specialized mixing tanks. Sugar, flavor concentrates and water ar e pumped in a specific sequence and then carefully mixed. Sophisticated machines control the flow of the ingredients to ensure the perfect recipe. Carbonation is generally the last step in soft drink production, normally performed just before liquid bottling. For more information on soft drink produc-tion, see Matthews (2003) .

In the second stage, different sized cans, glass bottles (disposable and reusable), kegs and plastic (PET) bottles (less common in the beer case) are filled with beer and soft drinks. A filling line consists on a series of conveyor belts and machines that wash, fill, seal, label and pack the bottles, cans or kegs ( Cooke et al., 2005 ; Tsarouhas and
Arvanitoyannis, 2010 ). The first step involves washing and disinfec-tion of containers, which afterwards pass through an inspection to guarantee the absence of poten tial hazards. The next machine performs the filling and capping of containers. To ensure product shelf life over a determined period, a pasteurization step follows container filling. For soft drinks, the pasteurization step may take place in a mixing tank instead. Its duration depends on the product features. Labelling is carried out next. Filled containers inspection certificates that the specified volume has been introduced and no defects occurred during t he process. Packing con tainers into paper-boxes, packs or other selling units precedes palletization and storage. Since these processes are done in series from hereafter, we will refer to the set of machines that compose a filling line as awhole. 3. Planning production in the beverage industry
Planning production in the beverage industry, specifically in the beer industry, is a complex process. Not only are there several processes involved, but also increasing competitiveness of the market forces companies to enlarge their product portfolio posing new challenges and raising the need for decision support tools to help managers. 3.1. Main planning constraints
One of the main planning constraints is related to the sales profile of these products. Sales of beer and soft drinks have high seasonality and variability. Beer and soft drinks consumption peaks at Easter and Christmas, but summer is by far the highest point in terms of sales. Moreover, there is a clear increase of sales in the second half of each month. On the other hand, capacity remains almost constant throughout the year and it can be evaluated by the number of production hours avai lable. Product demand is also affected by other sources of variability, such as brand management and clients commercial policy. Some of the most important customers of these companies are large retailers with extremely aggressive marketing strategies that require almost instantaneous response from suppliers. These sales characteristics stress produc-tion and lead the industry to work on a make-to-stock basis. But, diversity of the product range makes sales hard to forecast.
Looking at the industry supply chain, a typical beverage industry company has one or more plants relatively close to the geography of demand, in order to avoid transfer costs, which otherwise would have assumed an important percentage of the total cost. Within each plant, stages I and II of the production process are most of the time divided and buffers may exist between stages, with typically a single unit of stage I supplying a series of parallel filling lines. It is a common practice in industry to consider the filling stage (II) as the bottleneck of the entire production process, due to several reasons. For the beer case, buffers between the different main processes of stage I allow it to be more flexible. Moreover, the high number of different products that have to be manufactured in stage II correspond to a few different types of beer (or syrups for the soft drinks) in stage I, since SKU (Stock Keeping Unit) differences may rely on a different container, label or package affecting only stage II.

Filling lines are usually divided according to their technological aspects (e.g. filling lines for kegs are unable to fill bottles or cans). Furthermore, an important disti nction is made between filling lines for disposable and reusable bottles, since an extra step and machine are needed to conduct an additional washing procedure in the latter case. Hence, disposable bottles filling lines cannot fill reusable bottles, but no restrictions are present the other way around. Even so, filling lines are relatively flexible and often a certain product can be assigned to several alternative lines, even within the same plant, but with throughput rates (measu red in terms of liters per minute (l/min)), that might be substantially different.

Each filling line can only produce a single product at any time, being adjusted to fill a certain liquid, container type and size, and final package. A product changeover may involve several changes in the filling line and possibly a cleaning step. Liquid type switchovers always involve the cleaning of the filling line and sometimes the setup of the pasteurization machine. On the other hand, switches on the container type and/or size an d final packaging trigger mechan-ical adjustments in most machine settings. These operations consume scarce production time (capacity) and can cause loss of material, that depend on the production sequence. Therefore, we have the presence of sequence-dependent changeover times and costs. The increase of the number of products that took place in recent years has reduced the operational times of filling lines as more setups are needed. In addition, market pressure to work with less stock and to deliver products more frequently has also increased the number of production batches , reducing their size and conse-quently leading to the appearan ce of additional extra setups.
Filling lines operate on a shift basis and their capacity can be translated into the number of hours available for production.
Some of the filling lines operate around the clock, therefore overtime is not always an option. Investing in new lines is also problematic as it greatly increases fixed costs. Some investments can be made in order to make filling lines more flexible, but they have to be carefully studied since their cost can be significant. Yet, such changes would only produce effects in the long-term, and short-term capacity can be considered constant. All the afore-mentioned reasons raise the issue of efficient production plann-ing as it can guarantee a better utilization of resources and, ultimately, the competitiveness of the company.

In the presence of a multi-plant environment further planning features appear. Some product specialization is possible, aiming to achieve better throughput rates or standard quality require-ments in stage I due to larger production batches whose process is easier to control. Nevertheless, for standard products production near the consumption location should yield low cost production plans due to shorter transfer costs. 3.2. Production planning systems in the beverage industry
To face the constraints described above and the different nature of decisions and actions, production planning in the beverage industry is made by several company echelons with different aims and planning horizons. Although decisions are strongly dependent, it is virtually impossible to sustain a single decision model for the entire decision-making process as it would be extremely hard to maintain, solve and interpret. Moreover, market dynamics also determine that highly detailed plans for a distant future are in most occasions useless. Planning decisions are therefore made in a hierarchical process composed of three levels: strategic (long-term) planning, tactical (medium-term) planning and operational (short-term) planning. Long-term plan-ning assesses investments in the installed capacity, trying to balance capacity with demand for a planning horizon of 12 X 18 months. Concerning tactical planning, the focus is to derive plans for operations, essentially production and distribution, aiming at cost efficiency. Here planning horizons commonly span from 4 to 12 weeks. The lower level of the hierarchy schedules operations to the available resources looking at a very short planning period from 1 day up to 1 week. These levels operate in a rolling horizon approach, only a few periods in the begin of the planning horizon are actually executed, furthermore the output of an upper level constitutes an important input for the following level. 4. The case study
Our study is motivated by a Portuguese company that competes in the beverage industry with sal es across the globe. The company holds many nationally very popular brands of beer, soft drinks, and mineral and sparkling water. Produ ction sites are spread around the country, accounting for eight pla nts and more than 20 filling lines. Mineral and sparkling water plants are located near a water source, while other production sites are responsible for beer and soft drink production. Only planning of beer and soft drinks has to be done simultaneously as both product types share common production resources and this will be the scope of our study. The aim is to create the annual production budget (PB).

PB is part of the company X  X  annual budgeting process. The budgeting is a vital tool to align company goals and translate the strategy defined into the next 12 months. Annual budgeting starts in mid September and lasts until late October. The first main task is the creation of an annual sales budget (SB). SB is driven by a monthly sales forecast for each product in the following year. In parallel, the production departments of each plant schedule the filling lines maintenance calendar and estimate throughput rates for each product. These throughput rates are approximations based on the previous years and also reflect exp ected gains or losses of efficiency. Embedded in these estimations ar e the sequence-dependent setups witnessed in the years before. The goal of the PB is not to obtain a detailed schedule for production lines, but rather an estimation of the adequacy of resource capacity to SB. Therefore, production sequencing is disregarded and capacity loss due to sequence-dependent setups is incorporated in throughput rates.

The PB is conducted by the planning department and aims at validating the SB from an industrial and economical point-of-view. Besides SB and throughput rates, the available capacity is an input determined from the filling lines maintenance calendar and the number of available days for production. Capacity is estimated per filling line and divided into three categories: normal workdays, Saturdays and holidays, and Sundays. This distinguishes normal capacity from overtime. SB is generally distributed among the plants according to the past years sales. However, technological constraints, production quality assurance or product specialization can imply a pre-determined plant. Technological constrains are related to production and filling equipments required to produce certain products. Production qualit y assurance deals with situations in which minimum batch sizes and/or production frequency may not be achieved if forecasts for family X  X  demand are disaggregated.
PB only accounts for the filling stage, since this stage is considered the production process bottleneck . Therefore, the number of working shifts is decided only for the filling stage. PB decides on the assign-ment of products to the different filling lines in the planning horizon and the definition of production lotsizes. Through this step, plant inventory and inter-plant transfers a re also determined. The objective is to satisfy SB while minimizing inventory holding costs, setup costs, inter-plant transfer costs and overtime costs.

PB conclusion triggers the creation of the transportation and materials procurement budget. 4.1. Company practice and opportunities
The creation of the PB is a har d time-consuming task. The planner is challenged with over 150 products divided by approxi-mately 60 product families and 14 different filling lines, although technological constrains restrict the problem size. One of the strategies used by the company to overcome this problem is the choice of a preferential machine to supply the demand of each product at each plant. Frequently, more than one filling line of the same plant can produce a certain pr oduct gross requirement, but the definition of a preferential filling line rule automatically fixes allocation, turning the act of planning easier. Nevertheless, through-out the process is natural that so me filling lines exceed their normal capacity. Requirements can be moved to another filling line of the same plant, can anticipate raising inventory holding costs or can be moved to filling lines of other plants originating transfers and/or inventory costs. Another possibility is to use overtime capacity, which is limited to a certain maximum. PB is done once a year and the main key performance indicators regard average filling line utilization, total inventory, transfer and overtime costs. 4.2. Related work
Most literature has focused on the operational and tactical levels and the integration of both in beverage and related industries (e.g. soft drinks, Ferreira et al., 2009 , foundries,
Araujo et al., 2007 , glass industry, Almada-Lobo et al., 2007 and animal feed, Clark et al., 2010 ). Nevertheless, some work is also available on medium to long-term planning mostly in terms of mathematical formulations. These models often include produc-tion, distribution and inventory management with capacity investments. Chandra and Fisher (1994) show that the integration of production and distribution in a single decision model yields better results than optimizing separate models. In Jolayemi and Olorunniwo (2004) decisions on production, transportation, purchasing and warehouse capacity extension are made for a multi-plant and multi-warehouse environment. Martin et al. (1993) study a real-world case in the flat glass business. Produc-tion, distribution, and inventory operations are managed in a single model. An application in the chemical process industry is presented by Timpe and Kallrath (2000) . Batch and campaign production in a multi-plant production system is decided along with distribution and marketing decisions. A real-world problem in steel manufacturing is approached by Sambasivan and Yahya (2005) . Almada-Lobo et al. (2008) present a long-term production planning model in the glass industry. A multi-plant production system where each plant has a set of production lines is considered but with common demand, i.e. demand is not attached to a specific location. The significant sequence-dependent setup costs and time that arise in this industry lead to the need of sequencing of product families. A VNS-based heuristic is used to solve the problem. Another industrial example at a metal item manufacturer is given by Dhaenens-Flipo and Finke (2001) .
Authors formulate an integrated production-distribution model considering a production system composed of multiple factories having several parallel production lines. Sequence-dependent setups are considerer at this level due to their magnitude and managed through pre-defined sequences. Distribution decisions relate to transfers from plants to warehouses and from warehouses to clients. Other examples occur in production environments where items are produced in a series of processes occurring in different plants ( Kaminsky and Simchi-Levi, 2004 ). 5. Solution methodology
In this section we first present a mixed integer optimization model representing the problem that arises in the PB, hereafter called long-term production planning problem (LT3P). Based on this model a solution procedure is described aiming to achieve good quality solutions in limited computational time, which is not accomplished by exact methods. 5.1. Mathematical formulation The model considers a multi-plant environment with P plants. Each plant has its own individual demand and storage capacity.
As mentioned before, a certain plant can supply demand for another plant but additional transfer cost has to be accounted for.
Common filling lines force us to simultaneously plan both beer and soft drink products. Filling lines are considered the produc-tion bottleneck of the production system, therefore decisions are taken only for this step. Products sharing common production features, the same container type and final package, are grouped into product families. The model considers a planning horizon divided into T periods, usually months. To formulate the model the following nomenclature is used:
Indices i product: i A N  X f 1 , ... , N g f family: f A F  X f 1 , ... , F g j , k plant: j , k A P  X f 1 , ... , P g m filling line: m A M  X f 1 , ... , M g t period: t A T  X f 1 , ... , T g Sets
M j set of filling lines belonging to plant j
F m set of families that can be produced on filling line m
N
N
Parameters cap mt available capacity at filling line m in period t (in time j m plant of filling line m f i family of product i d ijt demand of product i at plant j at the end of period t h ijt unitary holding cost of product i at plant j at the end of r ijkt unitary transfer cost of product i from plant j to plant k c fmt setup cost of family f on filling line m in period t p fmt throughput rate of family f on filling line m in period t b imt upper bound on production quantity of product i on To capture decision making the following variables are defined:
X imt production quantity of product i on filling line m in
I ijt stock of product i at plant j at the end of period t
W ijkt transfer quantity of product i from plant j to plant k in
Y fmt (  X  1) if a setup occurs to family f on filling line m in
The model is stated as follows:
I  X 
X
X  X  I , W ijkt , X imt  X  Z 0 , Y fmt A f 0 , 1 g :  X  5  X 
The objective function (1) minimizes the sum of the holding, transfer and setup costs. Inventory balance constraints (2) control product flow in each plant. Demand for product i at plant j in period t is either met by available stock, production within the plant or from transfers from other plants, not considering back-logging or sales lost. Transfers among plants occur within the same time period. Without loss of generality, we assume that transfer cost r ijkt satisfies the triangular inequality, r variables are guaranteed in (4). Production of product i on filling line m in period t can only occur if the filling line has been set up limited to b imt  X  min f cap mt p f i mt , P j A P P T u  X  t
The problem described is similar to the single stage, multi-plant, multi-item and multi-period capacitated lot sizing problem (MPCLSP) described in Sambasivan and Schimidt (2002) , Sambasivan and Yahya (2005) and Nascimento et al. (2010) .
Few papers address this variant of the standard capacitated lot sizing problem (CLSP). In Sambasivan and Schimidt (2002) the authors describe a heuristic to solve the problem based on transfers of production lots. The paper Sambasivan and Yahya (2005) presents a heuristic based on the Lagrangian relaxation.
The authors dualize capacity constraints and solve the N uncapa-citated subproblems via reformulation into a set of shortest path problems with common fixed-charge constraints. Computational experiments are conducted with instances of up to 15 products, six periods and four plants. Nascimento et al. (2010) propose a greedy randomized adaptive search procedure (GRASP) combined with path-relinking. Results are compared to the method described in Sambasivan and Yahya (2005) and the authors claim to achieve a better performance in terms of the mean gap of the linear relaxation of the problem. In addition, the proposed heuristic was also tested in the parallel machine lot sizing problem, which in fact is a special case of MPCLSP, when transfers among plants are discarded. In this scenario each plant corre-sponds to a machine.

Although similar to the MPCLSP, our model has different assumptions. As we cannot aggregate machine resources of the same plant due to technological constraints, each plant may have one or more machines, contrarily to the MPCLSP that assumes a single machine. Moreover, setup times are not considered here (contrarily to Sambasivan and Yahya, 2005 ; Nascimento et al., 2010 ) since throughput rates used by the company already include them considering an average lotsize. Still, such a general-ization could be easily made considering s fmt , the time to set up family f on machine m in period t , and replacing constraints (3) by
X
In addition, production costs are neglected, which could be overcome by introducing the parameter v imt defining the unitary production cost of product i on machine m in period t , and adding production cost into the objective function (1): min Obj 2  X  Obj 1  X 
Finally, setups are not considered in terms of products but rather of product families. Such assumption relies on the purpose of our model. The family setup costs aim to minimize the number of production lines producing the same family as an indicator of future capacity losses at the operational level when sequence-dependent setup times are considered. Products within each family are strongly related representing minor setups among them as few characteristics vary from one to another. In other words, sequence-dependent setups among products of different families are much more costly in terms of time and cost. Hence, by minimizing the number of times a family is produced we are also faced with a reduced number of major setups between families in detailed plans. Regardless these observations, if each family is only composed by a single product we end up with setups defined by product.

Further modifications to the model incorporate other impor-tant planning decisions. One of them is the use of overtime ( O  X  zdamar and Bozyel, 2000 ). Overtime can be used to face lack of production capacity and is especially important during peak seasons. Distinction is made between overtime on Saturdays and holidays (type I) and overtime on Sundays (type II). Type I overtime is less costly than type II. To introduce these decisions in the model we first need to define the respective parameters and decision variables.

Parameters mo I mt  X  mo II mt  X  maximum available overtime capacity of type I Variables mt  X  O II mt  X  overtime of type I (type II) used on filling line m To integrate overtime decisions in the model, objective function (1) must be transformed into min Obj 3  X  Obj 1  X  and constraint (3) becomes
X Finally, the following constraints impose limits on overtime utilization: 0 r O I mt r mo I mt , 0 r O II mt r mo II mt , 8 m A M , t Hence, the overall LT3P model reads min Obj 3 satisfying  X  2  X  ,  X  4  X  ,  X  7  X  and  X  8  X  ,  X  I , W ijkt , X imt , O I mt , O II mt  X  Z 0 , Y fmt A f 0 , 1 g : 5.2. Solution procedure
Standard single-item CLSP has been proven to be NP-hard ( Bitran and Yanasse, 1992 ), so are the respective multi-item and multi-plant versions. In this paper, we present results that confirm the difficulty of solving to optimality moderate and large size instances, thus motivating heuristics to find approximate solutions to the problem. We propose heuristics inspired by the VNS principles. As briefly mentioned before, VNS systematically exploits the change of neighborhood both in descent to local optima and in escape from them ( Hansen et al., 2008 ). VNS relies on local search heuristics that starting from an initial solution x attempt to find an improvement within a neighborhood N ( x ).
Until such an improvement is possible, the heuristic iterates, otherwise it stops. To create a VNS scheme, one must provide a set of pre-defined neighborhoods structures N k  X  k  X  1 , ... , k and an initial solution x . The initial solution can be obtained from any simple construction heuristic. A basic scheme of VNS ( Mladenovic and Hansen, 1997 ) combines stochastic and deter-ministic changes of neighborhoods using the following three steps that are repeated until the stopping criteria is reached.
Move and neighbor-
Several VNS variants have been developed since it first appeared to solve many combinatorial optimi zation problems. One of the best known variants is the variable neighborhood descent (VND) method, which is a deterministic version of VNS where several neighborhood structures in sequence within the local search phase are searched, but no shaking step is performed. Furthermore, VND can replace the local search phase in VNS giving origin to general VNS (GVNS). When local search is costly in computational terms, these methods can suffer from efficiency problems. The reduced VNS (RVNS) is useful in such cases, as it is a pure stochastic m ethod where random points are generated from N k and the incumbent solution is updated in case of an improvement. Naturally, this variant reduces the effectiveness of the search. VNS design and consequently its efficiency and effective-ness are closely related to the selection of neighborhoods and their order. VNS conducts the search through different neighborhoods usually in increasing distances, evaluated by some metric (or quasi-metric). In 0 X 1 mixed integer problems like ours, the distance between two solutions can be based on the Hamming distance ( D that states the number of elementary changes in 0 X 1 variables to turn one solution into another. Most applications rank the neighborhoods in increasing order of their complexity, which usually corresponds to a bigger Hamming distance. Moreover, the use of nested neighbor-hoods, i.e. N 1  X  x  X  N 2  X  x  X  N k max  X  x  X  , is often a common choice.
Still, the understanding of the problem structure can be crucial to a suitable choice of neighborhoods and their sequence. VNS also represents a trade-off between int ensification of the search (local search) and diversification (shaking), which is important to balance. 5.2.1. Solution representation
We use an incomplete representation of the solution, consid-ering the different permutations of the binary family setup variables Y fmt , which are controlled by our algorithm. Given a fixed set of binary values (setup pattern Y 0 fmt  X  , by replacing them in our MIP model, the remaining problem can be solved optimally as an LP. Hence, production, inventory, transfer and overtime decisions are dependent on the setup pattern. The neighborhood structures are induced from the changes in the setup pattern. 5.2.2. Initial solution
Finding a feasible solution for the LT3P is difficult, specially in tight capacity scenarios. In our case, it implies selecting a setup pattern, which can be translated into a plan that verifies demand and capacity constraints. We overcome this problem by introducing artificial decision variables defined as the initial stock the objective function using h 0 ij . Doing so, we allow any setup pattern to be feasible, which is also important during the execu-tion of the algorithm. Under these conditions, the term
P less, for the case study, if real-world initial stock is considered, it is not penalized in the objective function.

Even though solutions with empty setups or with setups for every family in each period are now feasible, we want to test the impact of the initial solution on the search efficiency and efficacy.
For that purpose we have developed three procedures to define an initial setup pattern. 1. LotForLot is inspired in a lot-for-lot policy. The procedure works period-by-period and plant-by-plant identifying the total gross requirements for a certain product family R fjt
P i A N fam f d ijt .If R fjt 4 0, a setup will be triggered on machine m
A M j having the highest throughput rate p fmt . 2. The second and third procedures are both inspired by the work of Nascimento et al. (2010) . Ignoring capacity constraints and/ or inter-plant transfers, the problem can be compared to F uncapacitated lot sizing problems on parallel machines, which are solvable through the optimal algorithm of Sung (1986) . (a) Uncap works plant-by-plant and a minimum production (b) UncapNoTransf attempts to find a production schedule for
Next, we describe the general procedure for UncapNoTransf as it is a generalization of Uncap . For each family f let f fmut be the production cost of family on production line m in period u to meet requirements D iut for all products i A N fam f from periods u to t for all plants:
D  X  f
Moreover, let j ft be the minimum production cost from period 1 up to period t ( j f 0  X  0  X  . Quantity j ft can be obtained recursively using  X  min f j f , u 1  X  f fmut g u A 1 ... t , t A T :
A dynamic programming forward recursion algorithm has been used to solve each subproblem and thus fixing the setup pattern.
The assumptions made during this procedure allow us to have a rough approximation of a possible interesting setup pattern. 5.2.3. Neighborhood structures
Neighbors of an incumbent solution x are obtained by slightly changing the setup pattern and solving afterwards the resulting
LP. The set of all possible minor changes, also called moves, constitute the neighborhood N ( x ). We have defined three different type of moves: on machine m at period t from 0 to 1, therefore neighborhood (b) remove ( f , m , t ) is the inverse move of insertion , thus N
All neighbor solutions of N I ( x )and N R ( x )havea D H neighbor solutions of N T ( x )have D H  X  2. The size of the neighbor-hood N T ( x ) can be controlled by setting limits to t d when d b and d f control the backward and forward searching ranges, respectively. Note that when t o a t d and only in this case m equal to m d .

These three types of neighborhoods try to explore different ideas. The insertion move attempts to find a new family allocation such that the additional setup cost incurred is shorter than the savings resulting from production, holding, transfer and overtime costs. On the other hand, its inverse remove tries the opposite allowing an increase of the other costs through the mitigation of setup costs. Moves resulting from transfer are more difficult to interpret. When changing a setup within the same machine we attempt to introduce or eliminate inventory, whether we try backward or forward movements, and possibly decrease overtime costs. Moving setups to other machines in the same period tries to save setup costs that may benefit potential transfers. Moving to other machines in different periods can cause or eliminate inventory, transfers and overtime and eventually reduce setup costs. Transfer moves also seek for machine load balancing in tight capacity problems. Nevertheless, when evaluating a neighbor, the
LP mathematical model is optimized over the entire planning horizon, therefore performing a change in the setup pattern can have multiple effects on the production, inventory, transfer and overtime decisions, and the above description is myopic in those cases. In fact, this constitutes the reason for the partial solution representation, since heuristically determining production, inven-tory, transfer and overtime quantities may wrongly reject inter-esting setup patterns. The price to pay for such decisions is a more costly local search in terms of computational times. 5.2.4. Algorithm design
In theory, the larger the neighborhood, the better is the quality of locally optimal solutions, and the greater the accuracy of the final solution obtained. Standard VNS examines the entire neighborhood during local search. For large problem instances it is impractical to search the neighborhood exhaustively as it can be too time consuming. In practice, strategic/tactical decisions can be taken in a relatively wide time window; however, this is only true if a single plan is to be created. Frequently, these plans are obtained by studying different scenarios varying data inputs substantially redu-cing the available time for response. Therefore, it is required to partially search the neighborhood in an efficient manner.
To speed-up the algorithm, the evaluation of each neighbor can incorporate rules to quickly identify expensive neighbors and save time in the LP optimization. Since moves are performed based on a known solution, plenty of information is available. In addition, changes in the setup pattern are usually rather small.
Solving the LP from scratch can be very time consuming, thus the previous best found solution constitutes the initial basis in the new LP and then it is just reoptimized. To early discard expensive neighbors, let z t best denotes the best solution found to date and best the respective setup pattern cost. The remaining costs related to production, inventory and transfers calculated by the LP are neighbor can be easily computed based on z s best , therefore we can reject a neighbor whose z s neighbor 4 z t best without making any itera-tion in the LP. Besides, z t best z s neighbor is the maximum value that neighbor can take before being refused. By the solving the LP using a dual simplex method, at each iteration the dual solution corresponds to a lower bound on z o neighbor . Thus the method can potentially saving precious computational time. If the method does not stop the LP optimization in course, it means that we have found a new best solution. This technique has already been explored by Meyr (2002) .

Although these rules can save valuable computational time, for large size instances the result of exhaustively exploring the entire neighborhood still remains unsatisfactory. The ultimate goal is to somehow explore only a portion of each large neighborhood and still find the local optima, or at least find an improvement move, if such a move exists. Traditional t echniques to improve efficiency of VNS such as the aforementioned RVNS often compromise efficacy, especially because neighbors are selected randomly. Hung et al. (2003) propose in the context of Tabu Search the usage of ranking heuristics based on the information provided by the LP to prune the search of the neighborhood. Their techniques were able to reduce running time through one of the two strategies: explore a portion of the ranked neighbors according to the heuristics or to evaluate sequentially the ranked neighbors until an improvement is found. They have developed heuristics to rank neighbors that are obtained either by insertion or remove moves.

RVNS can be a solution to explore large neighborhoods due to its smaller CPU effort vital in the case study. Still, the randomness of the shaking phase can lead the algorithm to randomly suggest expensive neighbors too often, despite that the dual-reoptimization process may perform an early rej ection. Inspired by the work of Hung et al. (2003) , we have designed new rules to improve the standard RVNS. The idea is to associate a probability to each neighbor according to its potentia l cost savings. For that purpose we make use of the information available after solving the LP. Let us define b mt and p imt as the shadow prices (dual variables) of constraints (7) and (4), respectively. Additionally, we define SL as the surplus of capacity on machine m in period t in the current criteria presented in (1). Initially the potential improvement of an insertion ( f , m , t )moveisthecostoftheextrasetupthathastobe performed (line 1). Then the max imum production quantity of family f is determined considering the surplus of capacity on machine m in period t (line 2). The procedure then iterates through the products belonging to family f ( N fam f  X  selecting the one with maximum value of p imt (line 5). Let Y be the set of products selected previously. The potential impro vement is increased by the term min mt a ,where a may equal to the total demand of the selected product at the plant of machine in the incumbent period (line 7) or the maximum of the remaining surplus of capacity (line 10). In both situations, the remaining surplus of capacity, and Y are updated (lines 8, 11 and 13). The algorithm loops until no remaining surplus is available or all products belonging to the family have been (2). Its initial potential improvement is the saving coming from removing the existent setup (line 1). The potential improvement is then updated (line 3) using b mt over the total production quantity of family f determined in line 2. Evaluating a transfer ( f , m move is hard because it introduces more changes in the model and therefore the available information is less reliable, yet it can be seen as a combination of an insertion ( f , m d , t d  X  and a remove ( f , m summing both potential improvements. Shadow prices can be seen as the marginal utility of the resources. Move insertion ( f , m , t ) explores the marginal utility of an additional setup of family f on machine m in period t assuming that it remains valid for the maximum between the surplus of capacity and the total demand of the family. The same principle is behind the evaluation of remove ( f , m , t ), but this time making use of the marginal utility of  X  X  X reeing X  X  capacity. The potential improvements are only estimations of the real improvement on the objective function, thus we should not restrict too much the search based on them. After calculations are made for all neighbors in the incumbent neighborhood, the improvement ( Imp fmt ). Let s  X  r  X  be the rank of neighbor r .The probability m  X  r  X  of choosing a candidate neighbor is given by  X  r  X  X  where bias ( r ) is called the bias function. Pure RVNS makes use of a at the top of the list, any of the following bias functions can be used: linear bias bias  X  r  X  X  1 = s  X  r  X  ,logbias bias  X  r  X  X  log exponential bias bias  X  r  X  X  e s  X  r  X  . Exponential bias is the most extreme case were mostly the top candidates are chosen, liner bias is less extreme than exponential and log bias is the least differ-entiator function. To select the candidate neighbor to explore a random number is generated according to an uniform distribution and compared to the probabilities calculated. We call this enhance-ment to standard RVNS as Adaptive Reduced Variable Neighborhood Search (ARVNS).

Algorithm 1. Potential improvement of an insert ( f , m , t ) move. 1: Potential improvement: Imp fmt :  X  c fmt 2: Maximum family production: MaxProd  X  SL mt 3: Current produced products: Y  X   X  4: while MaxProd 4 0 AND Y N fam 5: i min  X  argmax f p imt j i A N fam 6: if MaxProd 4 d i 7: Imp fmt  X  Imp fmt  X  p i 8: MaxProd  X  MaxProd d i 9: else 10: Imp fmt  X  Imp fmt  X  p i 11: MaxProd  X  0 12: end if 13: Y  X  Y [f i min g 14: end while 15: return Imp fmt
Algorithm 2. Potential improvement of a remove ( f , m , t ) move. 1: Potential improvement: Imp fmt :  X  c fmt 2: Actual family production: X f mt  X  P i 3: 4: return Imp fmt 6. Production plans validation and comparison
In this section we present computational experiments divided into two sections. First we validate our solution procedures on a randomly generated set of small to medium sized instances ( Tests
I ). Afterwards, we use the algorithm with the best performance to solve two real-world instances based on the annual production budget of the case study for the years of 2010 and 2011 ( Tests II ). All heuristics were implemented in C  X  X  , compiled using Microsoft
Visual Studio 2008 and run on an Intel Core i7 Q720 1.60 GHz processing unit with 6 GB of random access memory, using a single core. IBM ILOG Cplex 12.1 was used both as mixed integer and linear programming solver and was limited to one thread to have a fair comparison. 6.1. Tests I
This set of tests is designed to validate the proposed algorithm and prove its superiority against other variants reported in the literature. Nevertheless, the features from the case study instances are kept, such as the absence of setup times and production costs, and the use of overtime. All parameters with the exception of demand are considered to be time independent, for example p fmt  X  p fm , 8 t A T . This applies only for the generated instances since our heuristics can manage time-dependent para-meters. Input parameters of each problem instance were gener-ated based on the uniform distribution. The ranges used for the parameters are given in Table 1 . Available capacity of all machines of the same plant is calculated according to cap with a  X  1 : 25. The maximum amount of both types ( mo I mt of overtime is set to 10% of the available capacity. Test classes are defined by the quintuplet ( F , N , P , M , T ). The number of families F and the number of plants P are always less than or equal to the number of products N and the number of machines M , respec-tively. The process to assign product to families and machines to plant is the same. For example, if five products have to be assigned to three families, the first three are assigned each one to a different family and the remaining two are randomly allocated to a family. Tests were conducted using F  X  {5,10,15},
N  X  2 F , P  X  {3}, M  X  {4,6} and T  X  {6,9,12} and for each combination 10 different instances were generated, corresponding to a total of 180 instances.

We have run each test instance using Cplex 12.1 on the mathematical formulation LT3P presented in Section 5 with a maximum running time of 600 s (time required by the company to have a solution for a new scenario). Thus, at the end of each run we potentially have an upper bound (the current best integer solution found by the branch-and-cut algorithm) and a lower bound also provided by the same algorithm. The mean gap obtained through Cplex 12.1 is our solution evaluation metric.
The percentage Gap to the best known lower bound is then computed as
Gap  X  z h z lb z where z h is the solution obtained by the method under evaluation and z lb is the best lower bound known provided by Cplex 12.1. All instances were feasible without considering initial inventory. Furthermore, for some problems the optimal solution was found.
Table 2 reports the number of probably optimal solutions (out of 10) found in each test class by Cplex 12.1. Naturally, as the number of families, machines and periods increase, the number of instances solved until optimality decreases sharply. We then tested our solution approach for two variants: RVNS and ARVNS. RVNS relies on a random bias function, while ARVNS makes use of a linear bias function. Neighborhoods were ordered according to insertion , transfer and remove , as it was proved during pre-testing to be the most promising sequence. Th e maximum number of successive iterations without improving was used as stopping criterion and set to 1000. Both methods were run for the three different types of initial solutions ( LotForLot , Uncap and UncapNoTransf ). Ten runs were executed for each instance using the different configurations: initial solution and solution approach variant.

Tables 3 and 4 report the average solution gap and Tables 5 and 6 present the average running times for the three methods under evaluation in the different test classes. The performance of our solu-tion approach clearly depends on the initial solution. UncapNoTransf yields the overall best mean gap and Uncap generally outperforms LotForLot , in particular when using ARVNS. Running times increase as the problem size increases, specially when using LotForLot as initial solution. Regarding solution quality, for small sized instances exact methods have, as expected, the best mean gaps. Nevertheless, for medium size instances, such a s test class (15,30,3,4,12) and (15,30,3,6,12) our solution approaches are more competitive than exact methods both in solution quality, running time and robustness (minimum and maximum gaps). Thus , tests show that our solution approaches are more competitive for large-scale problems. Exact methods are less attractive as problems grow in size, specially as the number of periods increases. Enhan ced neighbor selection present in ARVNS proved to be profitable. ARVNS is always superior to standard RVNS (with a statistically significant p -value o 0 : 01  X  and generally takes less running time. Iterations in ARVNS take longer to perform because both evaluation of potential improvement and sorting of neighbors have to be done to properly calculate m  X  r  X  .Yet, this type of neighbor selection allows the search to converge faster and to a better local optimum. Hence, ARVNS seems to be a very promising tool to effectively explore large neighborhoods and therefore to be used in real-world problems. 6.2. Tests II
The second set of instances are based on real data from the case study. There are two instances corresponding to the annual production budget of 2010 and 2011, respectively. Both only consider the planning of beer and soft drinks plants. The instance related to the year of 2009 comprises data from three plants, each one having a set of 1 X 5 filling lines, totaling 10 filling lines. Sales budget forecasts are available over the next 12 months for a total of 125 products, which can be aggregated into 62 different product families. Technological restrictions limit family assign-ments to filling lines, nevertheless more than 100 family-filling line allocations are possible in each time period. In the year of 2011, again the total number of plants is 3, but the number of filling lines increased to a total of 14, ranging between 4 and 5 in each plant. The number of products also increased to over 160, which are now aggregated into 68 different product families. As a result, the number of possible family-filling line allocations is now over 120. For both instances, data related to family through-put rates, product holding and transfer costs, and overtime costs are estimations made by the company based on previous years. The benchmark was conducted on the following PB scenarios:
U1 : Company X  X  PB transformed into a solution of our optimiza-tion model (LT3P), thus allowing to compute the objective function.

U2 : Fixed family allocation (setup pattern Y 0 fmt  X  from the com-pany X  X  PB solving the subsequent problem optimally through the LT3P LP model.

U3 : PB obtained using ARVNS with a maximum number of iterations without improvement of 1000, LotForLot as the initial solution strategy and the same neighborhood order from the previous tests (configuration with best overall performance in Tests I ). The final solution is the best among five runs.

Nowadays, PB is done using spreadsheets, but is mainly a manual process. Previous experience in PB creation constitutes the pillar of the planning process as it follows implicitly cost based decisions. A comparison with company planning is not always straightforward since a manual planning solution does not always strictly obeys all restrictions. Scenario U2 tries to reduce this gap by creating the best possible scenario with the current family allocation and also shows the drawback of pre-defined family-filling line allocations. Table 7 reports results for the three scenarios for the two real-world instances. All costs are measured in terms of monetary units (m.u.). Not surprisingly, optimizing production, inventory, transfer and overtime decisions, for the company X  X  family allocation (scenario U2 ) has a strong impact.
Manually performing these decisions will likely lead to sub-optimality. Creating PB with ARVNS by relaxing family allocations can further improve these results. Scenario U2 achieves a total cost saving of 24% and 34% in 2010 and 2011, respectively. A large portion of cost savings cames for overtime reduction, an inter-esting result since the company is obsessed with the holding costs. Our heuristic obtained the best plans, yielding 35% cost reduction in 2010 and 39% in 2011. Plans clearly show the existing trade-offs among costs. For example, in 2010 both U2 and U3 yield higher holding costs than those in the company X  X  plan, while in 2011 transfer costs suggested by U3 increase as this can lessen overtime. Moreover, scenario U3 always reduces the total number of setups. Excluding setup costs, all other costs are relatively easy to quantify and, therefore, very accurate. The direct potential cost savings from inventory, transfer and overtime costs in both years are significant, representing 36% and 40%, respec-tively, for 2010 and 2011. Savings in 2011 are bigger because we are considering more products and filling lines. Figs. 1 and 2 help to understand the obtained results. In the 2011 instance, scenario U1 comprehensibly shows the difficulty of dealing with peak demand that occurs during Summer. Inventory is built up early in the year to face seasonality, in addition during the summer season both transfers and overtime requirements increase. The two optimized scenarios can deal with this effect more smoothly. Scenario U3 in the last part of the year uses notably less overtime, but it uses more inventory and transfers quantities compared to scenario U2 as a means to achieve a more cost-efficient plan.

The average running times of our heuristic were 100 and 180 s for the 2010 and 2011 instances, respectively. This confirms the ability of the heuristic of effectively solving large problems. 7. Discussion
This paper is motivated by a real-world production planning problem in the beverage industry. The goal is to produce a long-term plan assigning and scheduling product family production lots in a multi-plant environment, having each plant one or more production lines. Total setup, inventory, transfers and overtime costs constitute the objective to minimize. We first formulate the problem as a mixed integer program. Based on our mathematical formulation we have developed a heuristic suitable for the large size instances present in industrial applications. A partial solution representation of product family setup decisions (binary variables) was used and the production, inventory, transfer and overtime quantities (continuous variables) are determined by solving a linear program. We make use of the information provided by sensitivity analysis of the linear program to guide the local search. Neighbors are evaluated and sorted according to their potential improvement and neighbor selection is done according to this rank. We are dealing with very large problem instances from the case study and as tests have proved, the heuristic is able to efficiently explore wide solution spaces.
Another important feature of our heuristic is its flexibility, due to the partial solution representation. One can add different requirements to the model, for example production costs, family setup times, minimum family production batches, that were not considered in this application, without having to change the procedure. These adjustments are only needed in the mixed integer problem, which constitutes the base of the linear program.
Tests on real-world instances validated our approach, as we are able to notably improve current company practice. Therefore, this study can constitute the basis for the implementation of a decision support tool for long-term production planning within the company. The test of different planning scenarios and the introduction of a rolling horizon procedure for long-term planning can be features of the planning tool with great capability of enhancing current planning decisions.

It would be interesting to test the new heuristic in other large-scale problems to further validate its potential. References
