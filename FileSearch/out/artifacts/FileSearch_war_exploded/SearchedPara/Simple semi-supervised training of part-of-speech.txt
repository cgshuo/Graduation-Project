 Semi-supervised part-of-speech (POS) tagging is relatively rare, and the main reason seems to be that results have mostly been negative. Meri-aldo (1994), in a now famous negative result, at-tempted to improve HMM POS tagging by expec-tation maximization with unlabeled data. Clark et al. (2003) reported positive results with little labeled training data but negative results when the amount of labeled training data increased; the same seems to be the case in Wang et al. (2007) who use co-training of two diverse POS taggers. Huang et al. (2009) present positive results for self-training a simple bigram POS tagger, but re-sults are considerably below state-of-the-art.
Recently researchers have explored alternative methods. Suzuki and Isozaki (2008) introduce a semi-supervised extension of conditional ran-dom fields that combines supervised and unsuper-vised probability models by so-called MDF pa-rameter estimation, which reduces error on Wall Street Journal (WSJ) standard splits by about 7% relative to their supervised baseline. Spoustova et al. (2009) use a new pool of unlabeled data tagged by an ensemble of state-of-the-art taggers in every training step of an averaged perceptron POS tagger with 4 X 5% error reduction. Finally, S X gaard (2009) stacks a POS tagger on an un-supervised clustering algorithm trained on large amounts of unlabeled data with mixed results.
This work combines a new semi-supervised learning method to POS tagging, namely tri-training (Li and Zhou, 2005), with stacking on un-supervised clustering. It is shown that this method can be used to improve a state-of-the-art POS tag-ger, SVMTool (Gimenez and Marquez, 2004). Fi-nally, we introduce a variant of tri-training called tri-training with disagreement, which seems to perform equally well, but which imports much less unlabeled data and is therefore more efficient. This section describes our dataset and our input tagger. We also describe how stacking is used to reduce POS tagging to a classification task. Fi-nally, we introduce the supervised learning algo-rithms used in our experiments. 2.1 Data We use the POS-tagged WSJ from the Penn Tree-bank Release 3 (Marcus et al., 1993) with the standard split: Sect. 0 X 18 is used for training, Sect. 19 X 21 for development, and Sect. 22 X 24 for testing. Since we need to train our classifiers on material distinct from the training material for our input POS tagger, we save Sect. 19 for training our classifiers. Finally, we use the (untagged) Brown corpus as our unlabeled data. The number of to-kens we use for training, developing and testing the classifiers, and the amount of unlabeled data available to it, are thus:
The amount of unlabeled data available to our classifiers is thus a bit more than 25 times the amount of labeled data. 2.2 Input tagger In our experiments we use SVMTool (Gimenez and Marquez, 2004) with model type 4 run incre-mentally in both directions. SVMTool has an ac-curacy of 97.15% on WSJ Sect. 22-24 with this parameter setting. Gimenez and Marquez (2004) report that SVMTool has an accuracy of 97.16% with an optimized parameter setting. 2.3 Classifier input The way classifiers are constructed in our experi-ments is very simple. We train SVMTool and an unsupervised tagger, Unsupos (Biemann, 2006), on our training sections and apply them to the de-velopment, test and unlabeled sections. The re-sults are combined in tables that will be the input of our classifiers. Here is an excerpt: 1
Each row represents a word and lists the gold standard POS tag, the predicted POS tag and the word cluster selected by Unsupos. For example, the first word is labeled  X  X T X , which SVMTool correctly predicts, and it belongs to cluster 17 of about 500 word clusters. The first column is blank in the table for the unlabeled section.

Generally, the idea is that a classifier will learn to trust SVMTool in some cases, but that it may also learn that if SVMTool predicts a certain tag for some word cluster the correct label is another tag. This way of combining taggers into a single end classifier can be seen as a form of stacking (Wolpert, 1992). It has the advantage that it re-duces POS tagging to a classification task. This may simplify semi-supervised learning consider-ably. 2.4 Learning algorithms We assume some knowledge of supervised learn-ing algorithms. Most of our experiments are im-plementations of wrapper methods that call off-the-shelf implementations of supervised learning algorithms. Specifically we have experimented with support vector machines (SVMs), decision trees, bagging and random forests. Tri-training, explained below, is a semi-supervised learning method which requires large amounts of data. Consequently, we only used very fast learning al-gorithms in the context of tri-training. On the de-velopment section, decisions trees performed bet-ter than bagging and random forests. The de-cision tree algorithm is the C4.5 algorithm first introduced in Quinlan (1993). We used SVMs with polynomial kernels of degree 2 to provide a stronger stacking-only baseline. This section first presents the tri-training algo-rithm originally proposed by Li and Zhou (2005) and then considers a novel variant: tri-training with disagreement.

Let L denote the labeled data and U the unla-beled data. Assume that three classifiers c 1 , c 2 , c 3 (same learning algorithm) have been trained on three bootstrap samples of L . In tri-training, an unlabeled datapoint in U is now labeled for a clas-sifier, say c 1 , if the other two classifiers agree on its label, i.e. c 2 and c 3 . Two classifiers inform the third. If the two classifiers agree on a label-ing, there is a good chance that they are right. The algorithm stops when the classifiers no longer change. The three classifiers are combined by ma-jority voting. Li and Zhou (2005) show that un-der certain conditions the increase in classification noise rate is compensated by the amount of newly labeled data points.

The most important condition is that the three classifiers are diverse. If the three classifiers are identical, tri-training degenerates to self-training. Diversity is obtained in Li and Zhou (2005) by training classifiers on bootstrap samples. In their experiments, they consider classifiers based on the C4.5 algorithm, BP neural networks and naive Bayes classifiers. The algorithm is sketched in a simplified form in Figure 1; see Li and Zhou (2005) for all the details.

Tri-training has to the best of our knowledge not been applied to POS tagging before, but it has been applied to other NLP classification tasks, incl. Chi-nese chunking (Chen et al., 2006) and question classification (Nguyen et al., 2008). 1: for i  X  X  1 .. 3 } do 2: S i  X  bootstrap sample ( L ) 3: c i  X  train classifier ( S i ) 4: end for 5: repeat 6: for i  X  X  1 .. 3 } do 7: for x  X  U do 9: if c j ( x ) = c k ( x )( j, k 6 = i ) then 10: L i  X  L i  X  X  ( x, c j ( x ) } 11: end if 12: end for 13: c i  X  train classifier ( L  X  L i ) 14: end for 15: until none of c i changes 16: apply majority vote over c i 3.1 Tri-training with disagreement We introduce a possible improvement of the tri-training algorithm: If we change lines 9 X 10 in the algorithm in Figure 1 with the lines: two classifiers, say c 1 and c 2 , only label a data-point for the third classifier, c 3 , if c 1 and c 2 agree on its label, but c 3 disagrees . The intuition is that we only want to strengthen a classifier in its weak points, and we want to avoid skewing our labeled data by easy data points. Finally, since tri-training with disagreement imports less unlabeled data, it is much more efficient than tri-training. No one has to the best of our knowledge applied tri-training with disagreement to real-life classifica-tion tasks before. Our results are presented in Figure 2. The stacking result was obtained by training a SVM on top of the predictions of SVMTool and the word clusters of Unsupos. SVMs performed better than deci-sion trees, bagging and random forests on our de-velopment section, but improvements on test data were modest. Tri-training refers to the original al-gorithm sketched in Figure 1 with C4.5 as learn-ing algorithm. Since tri-training degenerates to self-training if the three classifiers are trained on the same sample, we used our implementation of tri-training to obtain self-training results and vali-dated our results by a simpler implementation. We varied poolsize to optimize self-training. Finally, we list results for a technique called co-forests (Li and Zhou, 2007), which is a recent alternative to tri-training presented by the same authors, and for tri-training with disagreement (tri-disagr). The p -values are computed using 10,000 stratified shuf-fles.

Tri-training and tri-training with disagreement gave the best results. Note that since tri-training leads to much better results than stacking alone, it is unlabeled data that gives us most of the im-provement, not the stacking itself. The differ-ence between tri-training and self-training is near-significant ( p &lt; 0.0150). It seems that tri-training with disagreement is a competitive technique in terms of accuracy. The main advantage of tri-training with disagreement compared to ordinary tri-training, however, is that it is very efficient. This is reflected by the average number of tokens in L i over the three learners in the worst round of learning:
Note also that self-training gave very good re-sults. Self-training was, again, much slower than tri-training with disagreement since we had to train on a large pool of unlabeled data (but only once). Of course this is not a standard self-training set-up, but self-training informed by unsupervised word clusters. 4.1 Follow-up experiments SVMTool is one of the most accurate POS tag-gers available. This means that the predictions that are added to the labeled data are of very high quality. To test if our semi-supervised learn-ing methods were sensitive to the quality of the input taggers we repeated the self-training and tri-training experiments with a less competitive POS tagger, namely the maximum entropy-based POS tagger first described in (Ratnaparkhi, 1998) that comes with the maximum entropy library in (Zhang, 2004). Results are presented as the sec-ond line in Figure 2. Note that error reduction is much lower in this case. This paper first shows how stacking can be used to reduce POS tagging to a classification task. This reduction seems to enable robust semi-supervised learning. The technique was used to improve the accuracy of a state-of-the-art POS tagger, namely SVMTool. Four semi-supervised learning meth-ods were tested, incl. self-training, tri-training, co-forests and tri-training with disagreement. All methods increased the accuracy of SVMTool sig-nificantly. Error reduction on Wall Street Jour-nal Sect. 22-24 was 4.2%, which is comparable to related work in the literature, e.g. Suzuki and Isozaki (2008) (7%) and Spoustova et al. (2009) (4 X 5%).

