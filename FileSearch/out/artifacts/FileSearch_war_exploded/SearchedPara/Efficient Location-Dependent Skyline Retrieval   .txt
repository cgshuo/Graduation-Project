 Owing to the ever growing popularity of mobile devices and rapid advent of wireless technology, information systems are expected to be able to handle a tremendous devices are equipped with positioning systems, which gave rise to a new class of mo-bile services, i.e., location-based services (LBS). LBS enable users of mobile devices to search for facilities such as restaurants, shops, and car-parks close to their route. In general, mobile clients send location-dependent queries to an LBS server from where the corresponding location-related information is returned as query results. 
The skyline query is one very important query for users X  decision making. The conventional skyline query focuses on non-spatial attributes of objects and does not consider proximity. Considering both the proximity and non-spatial attributes of was recently presented [1, 2]. Unlike the conventional skyline query, whose result is client, the query result of an LDSQ is closely relevant to the location of the mobile client, i.e., the location of the mobile client is a parameter of the LDSQ. To answer LDSQs, mobile clients need to connect to the corresponding LBS server through a GSM/3G/Wi-Fi service provider and the LBS server is responsible for processing each LDSQ. With the ever growing number of mobile devices, the sharply increas-ing query loads are already resulting in network congestion and the performance bottle of the LBS server. Aim to the above scalability limitations, in this paper, we explore to leverage P2P data sharing to answer LDSQs. The remainder of this paper is organized as follows. We review the related work in Section 2. In Section 3, we first formulate the problem studied in this work, and then describe the reference infrastructure for processing LDSQ. Section 4 presents the proposed processing approach. We evaluate the proposed approaches through com-prehensive experiments in Section 5. Finally, Section 6 concludes this paper. Skyline query has received considerable atte ntion due to its importance in numerous applications. The skyline operator is first introduced into the database community by buted skyline [12] and etc., have been addressed. 
The abovementioned methods only focus on non-spatial attributes of objects and address the problem of LDSQ which is the most relevant to our work. LDSQ enables cept of valid scope is introduced to address the query answer validation issue and two query algorithms to answer LDSQ, namely brute-forth and  X  -Scanning , are proposed. Furthermore, [2] explores how to efficiently answer LDSQ in road networks where The main disadvantage of the methods present in [1, 2] is lack of scalability and thus caused by the ever growing number of mobile devices. In this section, we first formally define LDSQ and related concepts, and then describe the system infrastructure for supporting LDSQ. Notations and Definitions. Let S be the set of spatial objects stored at the LBS server represent the distance between o and query point q where d (.) denotes a distance me-and related concepts.
 skyline of q over S . given set of spatial objects with respect to a given query point. 
The introduction of valid scope provides the chance of sharing query results among neighboring mobile clients. System Infrastructure. Our system infrastructure is a LBS system based on GSM or 3G and supports anytime, anywhere data access and processing using a portable size wireless mobile device. Mobile client in general communicates with a Mobile Base MBS has a wireless interface to establish communication with mobile clients and can serve a large number of mobile clients. The power of a MBS defines its communica-tion region, which we refer to as a cell . One or more MBSs are connected with a Base Station Controller (BSC), which coordinates the operations of MBSs when com-manded by the Mobile Switching Center. The LBS server is connected to a BSC through a high-speed wired network and provides location based information services for mobile clients. Mobile clients equippi ng with GPSs can communicate with MBSs using wireless channels. A mobile client can freely move among cells and transpa-increasing deployment of new P2P wireless communication technologies, there are short-range networks (MANETs) that allow ad hoc connections with neighboring mobile clients. This enables mobile clients to communicate with neighboring peers in an ad hoc manner for data sharing [13]. proach ( SLSQ ) to improve the preceding  X  -Scanning algorithm present in [1]. Differ-server is responsible for answering each LDSQ, SLSQ first tries to get the query result when these cached data do not match the LDSQ request, are the corresponding LDSQ request and location information transmitted to the LBS server through the neighbor-each mobile client to cache its last LDSQ result and the corresponding valid scope. LDSQ with respect to peer i and VS ( S , MC ) denotes the valid scope of the last LDSQ MC ) and VS ( S , MC ) are cached in MC . Specifically, the processing strategy of SLSQ is described as follows: all its single-hop peer i for i =1, 2, ..., k and waits the result from peer i . erwise it sends the message  X  X o X  to MC . sends the message  X  X K X  to the peer i and waits the result from the peer i ; otherwise it largest network delay between two neighboring mobile clients based on MANETs, and slack represents the slack factor. to MC ; otherwise the LBS server calls the algorithm present in [1] to compute LSK ( S , (5) MC caches the result received from the peer i or the LBS server and meanwhile returns LSK ( S , peer i ) (or LSK ( S , MC )). hop peer i and the LBS Server. Algorithm 1. SLSQ -MC ( R , L ( MC )) Input : LDSQ request ( R ) and the location of MC ( L ( MC ) ) 
In Algorithm 1 and the following Algorithm 2, CacheData denotes the cache ca-pacity allocated by MC or peer i for caching its last LDSQ result and the correspond-caching the last LDSQ result and CacheData . VS ( S , MC ) denotes the remaining space of CacheData used to caching the corresponding valid scope. Algorithm 2. SLSQ -peer i ( R , L ( MC )) Input : LDSQ request ( R ) and the location of MC ( L ( MC ) ) largest network delay between two neighboring mobile clients based on MANETs, and slack represents the slack factor. Algorithm 3. SLSQ -LBS ( S , L ( MC )) Input : the set of spatial objects ( S ) and the location of MC ( L ( MC ) ) 1: LSK ( S , MC )  X   X  -Scanning ( S , L ( MC ) ); 
In Algorithm 3, functions  X  -Scanning () and  X  -Scanning VS () are responsible for re-spectively computing LDSQ and valid scope, whose detailed descriptions are present in [1]. In this section, we first describe the experimental settings and then present the simula-tion results. Experiment Settings. Our simulation experiments are based on the same data sets of spatial objects as [1], namely School and NBA . In the simulation, mobile clients have the LBS server has sufficient memory space to load all the candidate objects. In order LDSQs. Table 1 lists the main simulation parameters. Our simulator consists of two main modules: the MC module and the BSC module. The MC module generates and controls the query requests of all MC s. Each MC is an independent object that decides its movement autonomously. The BSC module man-ages the spatial object set and meanwhile coordinates the operations of MBSs. CPU time. Fig. 1 shows how CPU time of the three methods varies with the number other methods under two different data sets ( School and NBA ). This is because SLSQ enables a large number of LDSQs to be answ ered directly from the results cached in neighboring mobile clients tests required by brute-fo r Scanning gets a distinct a d blindly checks all objects a tionship tests . The another NBA data sets shows a littl e data set in non-spatial attri b spatial attributes, which ca u
Fig. 2 shows CPU time , reflects the range of P2P w The bigger R usually mean s we expect, SLSQ achieves a and the performance gap b e because SLSQ avoids a gre a Moreover, for SLSQ , the i n opportunity to fulfill its L D influenced by R . 
Fig. 3 shows the perfor m function of | P |. As shown i delay. This is because SLS Q the cached data by its nei match the LDSQ request, d is, in many cases SLSQ ans boring peers. This enables S ing and handoff caused b y crease of attribute dimensionality. 
Fig. 4 shows the performance of the three methods in terms of network delay, as a overhead of routing, message forwarding and handoff caused by connecting the re-mote LBS server while the overhead is required by brute-forth and  X  -Scanning for all enced by R in network delay while the network delay of SLSQ decreases as R grows. The reason is that brute-forth and  X  -Scanning directly ask the LBS server to compute LDSQs so do not involve the P2P wireless transmission between mobile clients, while higher opportunity to fulfill its LDSQ by P2P sharing. match the LDSQ request, are the corresponding LDSQ request and location informa-tion transmitted to the LBS server. Extensive experiments are conducted, and the results demonstrate the effectiveness of our methods. A promising direction for future work is o consider on-air processing of LDSQ in road networks. Acknowledgment. This work is supported by the Natural Science Foundation (NSF) of China under Grant No. 61170174 and the NSF of Tianjin under Grant No. 11JCYBJC26700. 
