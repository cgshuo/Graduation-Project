 Language Modeling (LM) has been successfully applied to Information Retrieval (IR). However, most of the existing LM approaches only rely on term occurrences in documents, queries and document collections. In traditional unigram based models, terms (or words) are usually considered to be independent. In some recent studies, dependence models have been proposed to incorporate term relationships into LM, so that links can be created between words in the same sentence, and term relationships (e.g. synonymy) can be used to expand the document model. In this study, we further extend this family of dependence models in the following two ways: (1) Term relationships are used to expand query model instead of document model, so that query expansion process can be naturally implemented; (2) We exploit more sophisticated inferential relationships extracted with Information Flow (IF). Information flow relationships are not simply pairwise term relationships as those used in previous studies, but are between a set of terms and another term. They allow for context-dependent query expansion. Our experiments conducted on TREC collections show that we can obtain large and significant improvements with our approach. This study shows that LM is an appropriate framework to implement effective query expansion. H.3.3 [ Information Systems ]: Information Search and Retrieval  X  retrieval models. Keywords: Language model, Term relationships, Information flow, Query expansion Language Modeling (LM) is an approach used in many recent studies in IR. It not only produces promising experimental results (comparable to the best IR systems), but also provides a solid theoretical setting. However, the classical LM approaches usually assume independence between indexing units, which are unigrams or bigrams. In reality, a word may be related to other words. An example is the synonymy relationship. Such relationships between terms should be properly integrated into LM. 
Some recent approaches try to extend the existing LM by incorporating term relationships or dependencies [1, 4, 6]. Term relationships are considered in the following two perspectives: (1) One may create relationships or links among document terms or among query terms. In such a way, a sentence (either in a query or in a document) is interpreted not only as a set of words, but also as a set of relationships or links among the words. Under such an interpretation, for a document to be retrieved, it has to contain not only the words required in the query as in the classical LM, but also the additional links required by the query. Therefore, term relationships are used to enhance document and query representations in this perspective. This is the idea of dependence model implemented in [6]. (2) Term relationships can also be considered between query terms and document terms, so that indirect correspondence between document and query can be inferred during query evaluation. This is what is done in [1, 4]: If a document does not contain the same terms as the query does, but contains some relationships. In both [1] and [4], term relationships are used to expand the document model, so that the probability of the related terms in the document will be increased. Our work also aims to exploit relationships between query terms and documents terms in the context of the second perspective as [1, 4]. However, there are two differences: (1) The previous work often aims to improve the document model in order to increase probabilities of related terms in a document. This can be regarded as a document expansion approach. Our work aims to use term relationships in query expansion within the LM framework. (2) There are not many large linguistic resources such as Wordnet available for IR. Therefore, a question that one may raise is, beside co-occurrence relationships, can we extract other types of relationship from data that can be incorporated into LM? In this paper, we exploit inferential term relationships extracted by using a more sophisticated approach, namely Information Flow (IF). Unlike the traditionally used pairwise term relationships, these relationships are context-dependent, in the sense that they are between a set of terms and another term (e.g. (Java, computer)  X  programming). This would help reduce the inappropriate applications of the relationships in wrong contexts (when ambiguity arises). The information flow model has produced encouraging results when employed in concert with the classical vector space model [2, 15]. In this paper, we integrate relationships computed by information flow into a LM. 
It will be shown that the idea of query expansion can be integrated into LM in a straightforward way  X  query expansion via term relationship can be seen as a new smoothing of query model. Query expansion in LM has also been investigated in several on feedback documents to enhance the original query model. In our work, we use explicit relationships between terms for query expansion, similarly to traditional query expansion approaches. Our experiments will show that we can obtain improvements by expanding the query model using both co-occurrence relationships and IF relationships, but IF relationships make a much larger contribution to it. This paper is organized as follows. The next section briefly describes the existing LM approaches. In Section 3, we first give an overview on query expansion via LM, and then describe our approach of integrating term relationships into LM for query expansion. Section 4 presents the method of deriving inferential term relationships. Our experimental set-up and the empirical results on the TREC data set are presented in Section 5. Finally, section 6 concludes the paper and highlights some future directions. The basic idea of LM for IR is to compute the conditional probability P ( Q|D ), i.e., the probability of generating a query Q given the observation of a document D [5] . Documents are then ranked in descending order of this probability. 
Assuming that words in the query are independent, we have a general unigram model formulated as follows: where q i is a term (unigram in this paper) in the query. 
Another popular formulation of LM in IR is the KL-divergence [5]. In this case, a document model is estimated, so is a query model. The score is then determined by KL-divergence between the two models. More specifically: where V is the vocabulary of the collection, M Q respectively language models for Q and D . Note that in previous studies, )|( QtP can be restricted to query terms only, i.e., 
In practice, this restriction also has the advantage of reducing the complexity of the query evaluation process. 
We can observe that both formulas still require the query terms to appear in a document for the latter to be retrieved. With smoothing of the document model, one can increase the probability )|( DqP i of a term q i absent in D from zero to a small value, thus making it possible for a document not containing some of the query terms to be retrieved. It is important to note that smoothing increases the probabilities of all the non-occurring terms in the document uniformly or proportionally to the term distribution in the whole collection. No distinction is made between the terms that are really related to the document terms and those that are not related. 
In fact, some terms are strongly related to others. For example, suppose that the term  X  X lgorithm X  appears in a document. The probability that the document satisfies a query on  X  X omputer X  is much higher than that for a query on, say,  X  X lephant X . Therefore, if both terms are absent from a document, then the increase of the probabilities of  X  X omputer X  and  X  X lephant X  in the document should not be equal or simply proportional to their distribution in the collection. Instead, it should be a function based on the strength of their relationships to the document term  X  X lgorithm X . This is the idea of [4] which incorporates term relationships in document language models. Now let us examine how a query term is satisfied in a document (i.e. the document is relevant to the query term). On one hand, if the query term is contained in the document, it is certainly satisfied by the document to some degree. On the other hand, however, a query term not appearing in a document does not necessarily mean that the document is not relevant. There may be some other terms in the document that are strongly related to the given query term, for example, synonyms. In this second case, the document can still be judged relevant to some extent through the term relationships. Taking both cases into account, the probability where U  X  and model and the model with term relationships. This expression satisfaction or a satisfaction through term relationships. Starting with this development, we can further derive: In this formula, )|( DP U  X  and )|( DP R  X  determines the probability of selecting each of the models, given a document. model, and ),|( DqP Ri  X  can be estimated by considering any kind of term relationships. In [4], co-occurrences, as well as relationships in Wordnet, are used to estimate ),|( DqP Alternatively, the translation relationships proposed in [1] can also be used. 
If we limit our consideration to the above two models only, we have 1)|()|( =+ DPDP equal )|( DP viewed as another variation of smoothing between a unigram model and a dependence model: where )|( DP
We can see here that the effect of integrating term relationships is to create a new document model P (.| D ), which is smoothed by a relation model (the second term of the above formula). We can therefore term the approach  X  X ocument expansion X . The converse of  X  X ocument expansion X  is  X  X uery expansion X , the LM, it aims to build a better query model. 
Several previous studies have investigated query expansion via pseudo-relevance feedback. [12] selects the terms that have high probability in the feedback documents, but low probability in the collection, as expansion terms. These terms are integrated into a new query model. [11] uses a similar approach. 
More recent studies try to exploit feedback documents in model-based approaches. Basically, feedback documents are used to create different language models, which are considered to be samples for relevance [9] or for a new query model [8, 18]. The original query terms are used to focus the selection among these sample models. The selected sample models are then used to form a new query/relevance model. 
Although all the above approaches also aim at building a new query model, which is expanded from the original query in a certain way, we notice that these approaches basically make use of a new term distribution within a subset of documents and within the collection. No term relationships are explicitly used, which, in our opinion, is necessary to determine P ( t i | Q ). Our approach aims precisely to make use of term relationships in query expansion. With respect to formula (2), query expansion consists of finding a better way of estimating P ( t i | Q ), so that not only the terms expressed in the query will have a non-zero probability, but also other related terms. While this idea is intuitive and appealing, it has not been fully incorporated into LM framework. 
Classical smoothing techniques, by combining the collection model or other term distributions, can only redress this issue to some extent: One can arrive at a smoothed query model in which more terms will receive non-zero probabilities, which are thus taken into account in query evaluation. However, as we already stated, if we only rely on term frequency redistribution via smoothing, the effect of term relationships is simply ignored. For example, it is likely that for a query on  X  X omputer X , the new term  X  X lgorithm X  may not necessarily receive a higher probability than the term  X  X lephant X  after the redistribution. As a result, the term  X  X lephant X  will have equal or even higher importance to  X  X lgorithm X  in the evaluation of the query on  X  X omputer X , which is counter-intuitive. In this case, it is more reasonable to assign a higher probability to the term  X  X lgorithm X  due to the relationship between  X  X lgorithm X  and  X  X omputer X . In addition, a na X ve utilization of smoothing by a collection model results in a large query model (having all terms with non-zero probability), thereby increasing the cost of computing the matching function between query and document models. Our alternative solution is to smooth the original query model P ML ( t i | Q ) by another probability function P according to some explicit term relationships: where  X  is a mixture parameter as in formula (3). This formula expresses the main idea of our approach. It is similar to that proposed in [18]. However, as one will see, our expansion is based on explicit term relationships instead of pseudo-relevance feedback. 
Putting this into formula (2) using KL-divergence, we obtain the following formula: 
Notice that the first term is a sum over the query words (instead of all the vocabulary). This is because 0 ) | ( = Q t P The second term corresponds to the classical query expansion determined, and their probabilities in the document model are used in query evaluation. 
Similarly to the earlier case on document expansion, there are investigate two following ones:  X  One can use co-occurrence information to generate statistical  X  One can also use some other types of knowledge, such as 
Whatever the relationships used, it is important to restrict the number of terms t i to be considered in the second term of formula (5) in order to render the approach more computationally efficient. Therefore, some selection or filtering of terms according to their P R ( t i | Q ) should be done. This selection does not raise the same zero-probability problem as for document model, because with a zero-probability for P R ( t i | Q ) in formula (5), the whole score will not be - X  . Term co-occurrences have been used to derive term relationships in a number of studies [14]. Typically, one observes the frequency of term co-occurrences within a certain context, which can be the whole document, passage, or a window of fixed length. Then the strength (or probability) of term relationship is calculated as follows: where f ( t 1 , t 2 ) is the frequency of co-occurrences of t HAL (Hyperspace Analogue to Language) is a cognitively motivated and validated semantic space model for deriving term co-occurrence relationships [3, 10]. What HAL does is to generate a word-by-word co-occurrence matrix from a large text corpus via a l -sized sliding window: All the words occurring within the window are considered as co-occurring with each other. By moving the window across the text corpus, an accumulated co-occurrence matrix for all the words in a certain vocabulary is produced. The strength of association between two words is inversely proportional to their distance. This idea is similar to the decaying factor according to distance used in [7]. 
An example showing the HAL space for the text  X  X he effects of pollution on the population X  using a 5-word moving window ( l =5) is depicted in Table 1. 
The original HAL space is direction sensitive: The co-occurrence information preceding and following a word are recorded separately by the row and column vectors. However, for the purpose of deriving term relationships in IR, word order does not seem to be important. Therefore, the HAL vector of a word is represented by adding up its row and column vectors. For a given word, the dimensions in its HAL vector whose weights are higher than a threshold (set at the mean positive weight in our experiments) are called  X  X uality properties X  of the word. 
To fit in the LM framework, a probabilistic HAL space can be estimated by normalizing a HAL vector by the sum of all the dimension weights: where HAL ( t 2 | t 1 ) is the weight of t 2 in the HAL vector of t Below are the probability values we obtain for the simple example: pollution = {effects:0.17, of:0.21, on: 0.21, population: 0.12, the:0.29} This example demonstrates how a word is represented as a weighted vector whose dimensions comprise other words. The weights represent the strengths of associations between  X  X ollution X  and other words seen in the context of the sliding window: The higher the weight of a word, the more it has lexically co-occurred with  X  X ollution X  in the same context(s). From a large corpus, the vector derived contains much noise. In order to reduce noise, only the dimensions with weights above the mean are kept and then normalized so that they sum to 1. Thus we can consider the weight )|( function for )|(
Different words can be combined to form more complex concepts like  X  X pace program X . A vector is also obtained for this latter by combining the HAL vectors of the individual terms. A however, we employ a more sophisticated concept combination heuristic [2]. It can be envisaged as a weighted addition of underlying vectors paralleling the intuition that in a given concept combination, some terms are more dominant than others. For example, the combination  X  X pace program X  is more  X  X pace-ish than  X  X rogram-ish  X . Dominance is determined by the specificity of the term, that is, dominance is assumed to correlate with the idf of a term. Space restrictions preclude a more detailed description of the concept combination heuristic, but by way of illustration, we have the following vector for the concept combination  X  X pace program X : Information flow is a mechanism developed to do information inference [15]. We say that there is an information flow from a set of terms (or information items) k tt , , 1 K to another term former entails, or  X  X uggests X , to some degree, the latter. This is  X  X remise X . information flows. Their approach can be summarized as follows:  X  The initial HAL space is filtered so that for each term, only  X  The degree of information flow from k tt , , 1 K where c i denotes the HAL vector for term t i , concept combination vector of individual vectors c quality properties of the vector in question, and which determines the strength of information flow necessary to sanction the associated inference. In our case, this threshold plays no role as terms will be ranked according to the degree of information flow from the premise being a set of query terms. The top raked terms will then be used to prime the query model. More details about this come shortly. Information flow is a normalized score which essentially measures how many of the quality properties of the source vector are also quality properties of the target vector. The more such quality properties, the higher the information flow. Maximal information flow is achieved when all quality properties of the source vector  X  X ap X  into the target. For example, some top ranked information flows from  X  X pace program X  (TREC query 011) are listed as follows (where the numbers are degrees): space , program |-
Notice that the bolded terms in the above example, such as  X  X atellite X ,  X  X entagon X ,  X  X cientists X , etc. , are absent from the vector for  X  X pace program X . These new terms appear in the above vector because they share many of the context words with  X  X pace program X . Some of the added terms (e.g. satellite) are indeed closely related to  X  X pace program X . This example shows the possible benefit of IF. 
Note that the degrees of information flow in the above example are in range of (0,1] rather than probabilities. To fit in the LM framework, the probability of information flow relationships can be computed as: In comparison with the classical co-occurrence relationships, IF have the following unique characteristics:  X  IF is constructed on a filtered HAL space. Therefore, a lot of  X  Information flow computation allows for  X  X enuine X   X  IF is not always a relationship between pairs of terms. Rather,  X  The use of term combination allows us not to be limited to Now we explain how we can use different term relationships to define ) | ( Q t P relationships derived from raw co-occurrence data (or HAL space); (2) using inferential relationships of IF. Assume a set of term relationships defined between pairs of terms with probability ) | (
Putting it into formula (5), we obtain: 
As noted earlier, in practice, it is computationally inefficient to prime query models with positive probabilities for all terms in the vocabulary. Some selection is warranted. One way to do this is to limit to a reasonable number of terms during the expansion (for term relationships is selected. We then have the following approximation: q is selected. 
This formula corresponds to the approach using pairwise term relationships for query expansion. One may observe some similarity between formula (7) and the translation model proposed in [1]. However, our formula is used to expand query model, while that of [1] is used to expand document model. Assume that we have extracted a set of IF relationships. Then where Q j is a single query term, or a group of query terms, corresponding to the premise of an IF relationship. An important difference from the previous formula is that term relationships are no longer pairwise. The idea of using a set of terms as the premise shown that the best approach to query expansion is to determine the expansion terms not according to their relationships to individual query terms, but to the whole query. In our formulation, Q j expresses a set of query terms that are necessary to determine an appropriate expansion term. So our above formula is an implementation of the idea of [13] in the LM framework. 
P ( Q j | Q ) is another component to be determined. A possible way is to determine it according to the probabilities of terms composing Q j in the query. In our experiments, however, we will 1/| Q X  | where Q X  is the number of terms in the expanded query. This simple solution does not have any impact in our experiments, because our queries are very short, and usually all the original query terms are included in the premise of the IF relationships used. 
Formula (5) now becomes: relationships used in query expansion. Assume that we have selected a set E of the strongest IF relationships. The following approximation can then be made: 
Note that our discussions above focus on query model. For the document model, one has to use a smoothing method as proposed in other studies [18]. We will test several smoothing methods in our experiments. We evaluate our model described in the previous sections using TREC collections  X  AP (Associated Press). Some statistics are shown in Table 2. All documents have been processed in a standard manner: Terms are stemmed using the Porter stemmer and stop words are removed. The experiments reported here use the AP89 collection (TREC disk 1) for topics 1-50, and the AP 88&amp;89 collection (TREC disks 1 and 2) with TREC topics 101-150 and 151-200. Only the titles of the topics are used as queries. follows: Basic LM: As reference models, we use unigram models with different smoothing techniques proposed in [17].
 HAL-based query expansion : This model is used to investigate whether using co-occurrence information via HAL in query expansion can bring some improvements. In this model, the HAL spaces are constructed from both collections using a wi ndow size of 8 words (i.e. l = 8). For expanding the query model, we select the top 85 highly weighted dimensions (quality properties) in the vector representation of the combination of query terms, which is derived via the concept combination heuristic. Both the window size and the number of vector dimensions are set empirically, and they have led to good performance in a previous study [2]. Global IF-based query expansion : This test is to investigate whether information flow analysis contributes positively to query model derivation. The top 85 information flows extracted from the whole document collection are used to expand the query model. Comparing with HAL-based query expansion, this experiment can show the additional benefit to extract IF from HAL space. Local IF-based query expansion with pseudo-relevance feedback: In contrast to the previous method, this method constructs a local context (HAL) space by using the top 50 feedback documents in response to a query, and thereafter deriving a query model via IF computation from this local collection. The fifty documents were retrieved by the basic LM model. The top 60 information flows are used to expand query model. This number is also determined empirically. The experimental results are measured using average precision (AvgPr) and recall, which are calculated on top 1000 retrieved documents. In the experiments using language models, we use the Lemur toolkit 1 . In our models, several parameters have to be determined:  X  in formulas (8) and (9), and the other smoothing parameters involved in different smoothing methods (e.g. Dirichlet prior, etc.). These parameters could be tuned automatically, for example, using EM algorithm [17]. However, in this paper, we determine these parameters empirically. The results that we report here are the best ones we obtained. The corresponding parameters are indicated in the summary of results. Tables 3-5 show the experimental results on AP89 with queries 1-50, AP88-89 with queries 101-150 and 151-200 respectively. The percentages in the table are the relative changes with respect to the basic LM without query expansion. In general, the methods under comparison perform very similarly in the three cases. Smoothing on document model: In our basic methods, two different smoothing methods are used on document model: Dirichlet and Two-stage smoothing. These methods have shown good results in other studies [17], and they are robust. In our experiments, the parameters have been tuned so that we can obtain the best effectiveness for these basic methods. One can observe that the effectiveness reported here is slightly higher than those reported in the previous studies on the same collections. For the other models, we do not change these parameters from the basic methods, but try to set other parameters, namely the mixture weight  X  co and  X  IF . So the other models are not tuned to their best. Query expansion with HAL or co-occurrence information: When HAL relationships are used for query expansion, we can obtain improvements of around 3-4% for each of the smoothing methods. This improvement is similar to those reported in other studies that use co-occurrences to extend document model [4]. This comparable effectiveness improvement suggests that one can use co-occurrence information to expand either document model or query model, and both lead to similar effects. Although the query expansion is performed online (while document expansion is performed offline), as we limit the number of expansion terms, this will not require too much additional time for query evaluation. Query expansion with global IF relationships: In contrast, when we use IF to expand queries (LM with IF), the effectiveness is greatly improved for each smoothing met hod. The effectiveness reported here are higher than those reported in other studies on the same test collections [2]. This experiment shows that IF combined with LM can indeed add interesting terms into queries, which cannot be added using raw co-occurrence relationships. The main reason is that the application of IF relationships are more constrained than that of pairwise relationships. When a new term is added by expansion, all (or most of) the query terms are used as the premise of IF relationship. In comparison with pairwise relationships, IF relationships allow us to avoid applying term relationships in inappropriate contexts. Therefore, less noisy terms are added during query expansion. In addition, in this experiment, as the queries are short, the IF relationships used to do query expansion usually include all the original query terms. Therefore, the selected expansion terms are chosen according to the whole query in a similar way to [13]. Query expansion with local IF relationships: The last column (LM with IF &amp; FB) shows the benefit of combining IF with pseudo-relevance feedback. This combination results in a set of local IF relationships extracted from the subset of documents that are closely related to the query. The local IF performs generally better than global IF. The comparison between expansion with global and local IF relationships is similar to that between global and local context analysis [16]. 
To see the difference between global and local IF relationships, we show below the 20 strongest terms in the expanded query from  X  X pace program X  using local IF relationships: 
We can see in this example that the terms with strong degrees are more relevant to the query than in the previous example (shown in section 4.3) with global IF relationships. 
We can also compare this experiment with the previous studies on query expansion using feedback documents [8, 9, 18]. Our method shows higher effectiveness on the same test collections (AP88-89, queries101-150). This confirms the advantage to extract explicit term relationships from feedback documents, instead of using them as term distributions. In order to see the impact of expanding query model with a relation model, we change the value of the smoothing factor the series of experiments with IF relationships. The results are shown in Figures 1-3. 
As we can see, in all the cases, when  X  IF &lt;1 (i.e. when the relation model is combined to some extent), we see clear improvements in the retrieval effectiveness compared to the case of  X  IF =1 (i.e. the basic model without relation model). In addition, 0.7. These results suggest that smoothing by the relation model of IF is a useful and robust approach. Language modeling emerges as an appropriate and effective framework for IR. However, most of the models assume term independence. As a consequence, they ignore relationships between terms (e.g. synonymy) which may enhance retrieval performance. 
In some recent models, pse udo-relevance feedback has been used to create a better document or query model. However, no explicit term relationships are extracted, and the feedback documents only serve as different term distributions. relationships have been used in query expansion in order to obtain a better expression of the query (or information need). However, the same approach has not been implemented in a LM setting. 
In this paper, we propose an approach to LM which integrates the idea of query expansion. Term relationships are used to derive a new query model. Two specific types of term relationship are considered in this paper: co-occurrence relationships (or HAL relationships) and inferential relationships derived from information flow. We show that the idea of query expansion with term relationships can be naturally implemented in LM. Our experiments on TREC test collection show that such a query expansion is beneficial to IR. In addition, when IF relationships are used, query expansion is carried out in a context-dependent manner. This allows us to make a better selection of the expansion terms appropriate to the given query, and provides an effective way to deal with term ambiguity. As IF relationships are extracted from documents, the approach can also be combined with the idea of pseudo-relevance feedback. Our experiments show that such a combination allows us to extract query-centered IF relationships. These relationships turn out to be better than the IF relationships computed from the whole document collection. The present study shows the feasibility of integrating query expansion in LM. Several aspects can be improved: (1) In our current experiments, the parameters are set empirically. In fact, they can be tuned automatically using a mechanism, such as EM. (2) In our model, a query is still discomposed into single words (or unigram). This means that we have not considered the possible links between words in the query. This makes arise the question about query representation by words. It is often believed that words are not the best representation units. A possible solution would be to combine our approach with that of [6], so that term relationships are considered both between and within document and query. (3) Finally, we will test our approach on more test collections. The work reported in this paper has been funded in part by an NSERC CRD grant (Canada), the Research Exchange Program of University of Montreal, and the Distributed Systems Technology Center (DSTC). [1] A. Berger and J. Lafferty (1999). Information Retrieval as [2] P. D. Bruza and D. Song (2002). Inferring Query Models by [3] C. Burgess, K. Livesay and K. Lund (1998). Explorations in [4] G. Cao, J. Y. Nie and J. Bai (2005). Integrating Term [5] W.B. Croft and J. Lafferty (2002). Language Models for [6] J. F. Gao, J. Y. Nie, G. Wu and G. Cao (2004). Dependence [7] J. F. Gao, J. Y. Nie, J. Zhang, E. Xun, M. Zhou and C. Huang [8] J. Lafferty and C. Zhai (2001). Document Language Models, [9] V. Lavrenko and W. B. Croft (2001). Relevance-based [10] K. Lund and C. Burgess (1996). Producing High-[11] K. Ng. (1999). A Maximum Likelihood Ratio Information [12] J. Ponte and W. B. Croft (1998). A Language Modeling [13] Y. Qiu and H. P. Frei (1993). Concept Based Query [14] H. Sch X tze and J. O. Pedersen (1997). A Co-occurrence [15] D. Song and P. D. Bruza (2003). Towards Context-sensitive [16] J. Xu and W. B. Croft (1996). Query Expansion Using Local [17] C. Zhai and J. Lafferty (2001). A Study of Smoothing [18] C. Zhai and J. Lafferty (2001). Model-based Feedback in the 
