 In this paper we propose TripBuilder , a new framework for personalized touristic tour planning. We mine from Flickr the information about the actual itineraries followed by a multitude of different tourists, and we match these itinera-ries on the touristic Point of Interests available from Wikipedia. The task of planning personalized touristic tours is then modeled as an instance of the Generalized Maximum Cover-age problem. Wisdom-of-the-crowds information allows us to derive touristic plans that maximize a measure of inter-est for the tourist given her preferences and visiting time-budget. Experimental results on three different touristic cities show that our approach is effective and outperforms strong baselines.
 H.3.3 [ Information Storage and Retrieval ]: Informa-tion Search and Retrieval X  | Information Filtering, Search process Tourist Trip Recommendation, Trajectory Mining
Planning a travel itinerary is a complex task for tourists approaching their destination for the first time. Different sources of information such as travel guides, maps, on-line institutional sites and travel blogs are consulted in order to devise the right blend of Points of Interest (PoIs) that best covers the subjectively interesting attractions and can be visited within the limited time planned for the travel. Moreover, the tourist has to guess how much time is needed to visit each attraction and to move from one PoI to the next one.
 These simple considerations motivate our proposal of Trip-Builder , an unsupervised approach that possibly overcomes the above limitations by exploiting the wisdom-of-the-crowds from past tourists to build a personalized plan of visit. Builder takes as input the target destination, the time available for the visit, the (explicit or implicit) user X  X  pro-file, and builds a personalized tour crossing a selection of the PoIs. The recommended tour maximizes user X  X  interests and respect the visiting time constraint since it takes into account both the time to enjoy the attractions and the time needed for moving from one PoI to the next one. Moreover, the knowledge used to feed the TripBuilder recommenda-tion model is entirely extracted in an unsupervised way from two publicly available collaborative services: Wikipedia and Flickr. Thereinafter, we will consider touristic cities as the destination targets of our users, although our technique is general and scale-independent and could be applied even to build travel itineraries crossing large regions or countries.
More in details, TripBuilder -our novel framework for building trip plans -consists of the following contributions:  X  we introduce an unsupervised method for mining common patterns of movements of tourists in a given geographic area. The method uses i) Flickr, to gather public photos (and their metadata) from users all around the world, and ii), Wikipedia to gather information regarding Points of
Interest (PoIs) in the given touristic city. The results of our unsupervised method is a touristic database storing
PoIs, their popularity, visiting time, categorization, and the patterns of movement of tourists that visited them in the past;  X  we define the TripCover problem as an instantiation of the Generalized Maximum Coverage (GMC) problem. We model each visiting pattern by means of the PoIs and the associated Wikipedia categories, and the GMC profit func-tion by considering PoIs popularity and the actual user preferences over the same Wikipedia categories. The cost function is instead built by considering the average visit-ing time for the PoIs in the patterns plus the time needed to move from one PoI to the next one. Our algorithm is thus able to provide visiting plans made up of actual touristic itineraries that are the most tailored to the spe-cific preferences of the tourist;  X  we build three real-world datasets from Wikipedia pages and photos taken in three different cities of large touristic interest. We made the three datasets available for down-loading to favor reproducibility of our results and advances in the field;  X  we present detailed experiments showing that our solution outperforms strong baselines.
Several works in the literature are proposing methods to recommend list of PoIs based on the actual location of the user [8, 15, 14, 7]. In this paper, instead of producing a list of candidate PoIs based on the location of the user, we investigate a method for suggesting  X  X ouristic trips X  made of time-budgeted itineraries followed by actual tourists that cross PoIs matching the user preferences. Even if Builder could be easily adapted to fit a Location-based Service Model, in this paper we build precomputed itine-raries that are recommended to the user before the visit, at the planning stage. In this sense our approach can be considered a step further the simple location-based PoI rec-ommendation. The task of designing a trip for a tourist approaching a new city has been investigated in the liter-ature as we can see in the interesting survey on the topic presented in [11].

An early work on this topic is [4]. Authors use the Travel-ing Salesman Problem (TSP) as a starting problem to plan trips. Shang et al. propose and investigate a problem called User Oriented Trajectory Search (UOTS) for trip recom-mendation [9]. Given a trajectory data set, the query input contains a set of intended places given by the tourist and a set of textual attributes describing the tourist preference. If a trajectory is connecting/close to the specified query loca-tions, and the textual attributes of the trajectory are simi-lar to the tourist preference, it will be recommended to the tourist for reference.

An interesting approach to the trip recommendation prob-lem is the one proposed by Vansteenwegen et al. , where authors define the Tourist Trip Design Problems (TTDP) [10, 13]. The orienteering problem, which originates in the operational research literature, is used as a starting point for modeling the TTDP. The problem involves a set of possible locations having a score and the objective is to maximize the total score of the visited locations, while keeping the total time (or distance) below the available time budget. The score of a location represents the interest of a tourist in that location. Scores are calculated using the vector space model and the TTDP is solved using a guided local search meta-heuristic. Authors compare their technique versus a competitor. Both algorithms are applied to a real data set from the city of Ghent. Results show that the approach turns out to be faster and produces solutions of better qual-ity. Lately, they propose a tourist expert system, called the  X  X ity Trip Planner X  [12], that allows planning routes for five cities in Belgium.
 The orienteering problem is also employed in [2]. Here, De Choudhury et al. construct intra-city travel itineraries auto-matically by tapping a latent source reflecting geo-temporal traces left by millions of tourists. To do so, as in our case they firstly extract photo streams of individual users from Flickr. In the second step, they aggregate all user photo streams into a PoI graph. Itineraries are then automati-cally constructed from the graph based on the popularity of the PoIs and subject to the user X  X  time and destination con-straints. The problem is modeled as an orienteering problem and they propose a variation of a recursive greedy algorithm to solve it. Some important limitations affect the paper: i) the proposed orienteering problem does not model user pref-erences, ii) it also does not model co-visitation of different PoIs, iii) the greedy algorithm solving the orienteering prob-lem explicitly needs a source PoI, a destination PoI, the total number of PoIs to be visited in the trip and a possible set of PoI to not be visited. However, this information could not be implicitly available.

Lu et al. [6], propose a novel data mining-based approach, namely  X  X rip-Mine X , to efficiently find the optimal trip which satisfies the user X  X  travel time constraint based on the user X  X  location. Kurashima et al. [5] propose a travel route recom-mendation method that makes use of the photographers X  his-tories as held by Flickr. Recommendations are performed by means of a photographer behavior model, which estimates the probability of a photographer visiting a landmark. Au-thors demonstrate the effectiveness of the proposed method using a real-life dataset in terms of the prediction accuracy of the travel behavior.

Similar to the objective of the papers cited above, our work intend to merge touristic data analysis and informa-tion synthesis. To overcome some of the limitations listed above, we propose to solve the trip planning problem in a completely unsupervised way. We exploit PoIs and their cat-egories from Wikipedia, and the tourist traces from photos in Flickr to automatically build a dataset. This knowledge base contains very rich information about the touristic city and about the way in which tourists visited its attractions. Finally, we model the planning of a trip as an instance of the Generalized Maximum Coverage problem that composes the trip from latent tourist-generated behaviors. As a con-sequence, we naturally model co-visitation of different PoIs as we directly compose traces performed by real tourists in a city. Furthermore, user preferences are mapped to the cate-gorization of PoIs automatically extracted from Wikipedia. Our method is thus able to devise when a given PoI is ap-pealing for a particular user by mapping both the user and the PoI on a fixed categorization.
Let P = { p 1 ,...,p N } be the set of PoIs in our touristic city. Each PoI p is univocally identified by its geographic co-ordinates, a name, a radius specifying its spatial extent, and a relevance vector , ~v p  X  [0 , 1] | C | , measuring the normalized relevance of p w.r.t a set of categories C . Without loss of generality, we assume that the set C is predetermined and fixed and that the relevance of every PoI for each category is known. Symmetrically, let u be a user from the set U , and ~v u  X  [0 , 1] | C | the preference vector stating the normalized interest of u for the categories in C . The preference vector can be explicitly given by the user, or implicitly learned
Definition 1 (User-PoI Interest). Given a PoI p , its relevance vector ~v p , a user u , and the associated prefer-ence vector ~v u , we define the User-PoI Interest function as a the following function  X ( p,u ) : P  X U  X  [0 , 1] : tween the user preference and the PoI relevance vectors, pop ( p ) is a function measuring the popularity of p , and  X   X  [0 , 1] is a parameter controlling how much user preference and popularity of PoIs have to be taken into account.
Without loss of generality, we assume to know the pref-erence vectors of all the users in advance. A uniform dis-tribution can be used for ~v u in the case the profile of u is (initially) unavailable. Definition 2 (PoI History). Giver a user u and the PoIs P , the PoI history H u of u is the temporally ordered sequence of points of interest visited by u . Each PoI p of H is annotated with the two timestamps indicating the start time and the end time of the visit:
Note that having the start time and the end time we have an implicit representation of the time the user u has spent for the visit of p .

Definition 3 (Trajectory). Given a PoI History H u and a time threshold  X  , we define a trajectory T u any subse-quence of H u such that:
Trajectories are thus sequences of PoIs visited consecu-tively. They are obtained by cutting the user PoI history where the time interval between the visit to two subsequent PoIs is greater than a given threshold.

By applying the same temporal splitting criterium to all the Poi histories of users U we obtain the set S = { s 1 ,...,s of relevant trajectories. Note that S results from a set-union operation that disregards timestamps annotating ev-ery tourist visit to a PoI. The temporal information can be however exploited to compute estimates of the average time required for visiting a given PoI, and for every PoI-to-PoI movement. Thus, let  X  ( p ) : P  X  R be an estimate of the time needed to visit p , and  X  ( p i ,p j ) : P X P  X  R an estimate of the time needed to a user to move from p i to p j . Finally, let ~z = ( z 1 ,...,z M ) be the total traveling time associated with the M trajectories in S , obtained by exploiting  X  (  X  ,  X  ).
We are now ready to formulate the TripCover prob-lem, i.e., the problem of generating an optimal personal-ized itinerary given tourist X  X  preferences and her budget in term of available time to spend in the city. Without loss of generality, we assume that the User-PoI Interest for all the items in S is strictly positive. More formally,  X  s  X  S , P p  X  s  X ( p,u ) &gt; 0. In fact, if this would not hold for some trajectory, these trajectories could be removed from S with-out any consequence for the functionality of the system. TripCover( B ) : Given a tourist u , PoIs P , a time budget B , trajectories S , User-PoI Interest function  X , cost function  X  ( p ) and vector ~z . Find a subset of S that: where
The TripCover( B ) problem as formulated in (1) is an in-stance of the Generalized Maximum Coverage (GMC) prob-lem that is proven to be NP-hard [1]. In particular, given a tourist u , TripCover( B ) can be captured by the GMC formulation by: i) the bins in GMC represent the trajec-tories in S ; ii) the profit  X ( p,u ) and the cost  X  ( p ) depend only on p and u and not from the bins. The TripCover( B ) problem is thus NP-hard. An efficient greedy approximation algorithm for the GMC problem is known that achieves an approximation ratio of e/ ( e  X  1) + ,  X  &gt; 0 [1]. We used this approximation algorithm (whose source was kindly pro-vided us by the authors) after slightly modifying it to take into account TripCover( B ) specific constraints.
 Scheduling the Trip on a Multi-Day Plan . Trip-Builder needs to schedule the solution of the specific in-stance of the TripCover problem on the (multi-)day plan of the tourist. Recall that the solution of TripCover is a set of trajectories maximizing tourist profit. These trajecto-ries have then to be scheduled on the tourist X  X  agenda. For a lack of space, we do not address the scheduling issue in this paper. A possible solution could be to find the shortest path crossing all the starting and ending PoIs of the trajectories in the solution by means of a TSP algorithm. The TSP in-stance to be solved is in our case very simple since it has to devise short connections among the suggested trajectories and not among all the PoIs. The resulting solution consist in a unique path crossing all the relevant PoIs and joining all the selected trajectories that could be easily scheduled on the tourist X  X  agenda.
In this section we discuss the process used to build our touristic knowledge base from user-generated content. We also introduce the metrics used to assess effectiveness and we provide a detailed assessment of TripBuilder performance vs. meaningful baselines.

In order to assess TripBuilder we consider three case studies, each with its particular characteristics. In partic-ular, we generate -in a complete unsupervised process -a knowledge base covering three Italian cities which are im-portant from a touristic point of view and thus guarantee variety and diversity: Pisa, Florence and Rome. The ratio-nale of the choice is to propose a complete evaluation of our techniques by varying the size of the cities and the richness of public user-generated content available for download 2 PoIs . The first step is identifying the set of PoIs in the tar-get geographical region. Given the bounding box BB containing the city of interest, we download all the geo-referenced Wikipedia pages falling within this region. We as-sume each geo-referenced Wikipedia named entity, whose ge-ographical coordinates falls into BB city , to be a fine-grained Link to the dataset: https://github.com/igobrilhante/ Point of Interest. For each PoI, we retrieve its descriptive la-bel, its geographic coordinates as reported in the Wikipedia page, and the set of categories the PoI belongs to. Categories are reported at the bottom of the Wikipedia page, and are used to link articles under a common topic. They form a hi-erarchy, although sub-categories may be a member of more than one category. By considering the set C of categories associated with all the PoIs, we generate the normalized rel-evance vector of each PoI. We then perform a density-based clustering to group in a single PoI touristic entities which are very close one to each other. Clustering very close PoIs is important since a tourist in a given place can enjoy all the attractions in the surroundings even if she do not take pho-tos to all of them. Moreover, it aims at reducing the sparsity that might affect trajectory data. To cluster the PoIs we use DBScan [3] by setting 1 as the minimum number of points and 200 meters as . Finally, we obtain the relevance vector for the clustered PoIs by considering the occurrences of each category in the members of the clusters and by normalizing the resulting vector. At the end of this first step we have the set P = { p 1 ,...,p N } of PoIs and the relevance vector ~v  X  [0 , 1] | C | for each of these PoIs in a fully automatic way by exploiting Wikipedia as an external source of knowledge. Users and PoI histories . As second step we need a method for collecting users U and the long-term itinera-ries crossing the discovered PoIs. We query Flickr to re-trieve the metadata (user id, timestamp, tags, geographic coordinates, etc.) of the photos taken in the given area BB city . The assumption we are making is that photo al-bums made by Flickr users implicitly represent touristic iti-neraries within the city. To strengthen the accuracy of our method, we retrieve only the photos having the highest geo-referenced precision. This process thus collects a large set of geo-tagged photo albums taken by different users within BB city . We preliminary discard photo albums containing only one photo. Then, we spatially match the remaining photos against the set of PoIs previously collected. We as-sociate a photo to a PoI when the photo was taken within a circle having the PoI as its center and r = 100 meters as radius . Note that in order to deal with clustered PoIs, we consider the distance of the photo from all constituent mem-bers: in the case the photo falls within the circular region of at least one of the members, it is assigned to the clustered PoI. Moreover, since several photos by the same user are usually taken close to the same PoI, we consider the times-tamps associated with the first and last of these photos as the starting and ending time of the user visit to the PoI. Fi-nally, the popularity of each PoI is computed as the number of distinct users that take at least one photo in its circular region. The above process allows us to generate the set of users U , their PoI history, and estimates for the popularity and visiting time of each PoI. Finally, the preference vector for each user is built by summing up and normalizing the relevance vectors of all the PoIs occurring in her PoI history. Trajectories . In order to build the set S of trajectories we split users X  PoI histories as detailed in Definition 2. To choose the splitting threshold  X  we try to understand users X  macroscopic behavior by carefully analyzing the inter-arrival time of each pair of consecutive photos taken in different PoIs. Therefore, for each city we compute the distribution of probability of the inter-arrival time P ( x  X   X  ) of pairs of consecutive photos. Then we devise the time threshold  X  such that P ( x  X   X  ) = 0 . 9. Results show that while for Rome and Florence the resulting threshold is about 5 and 6 hours respectively, for the smallest city of Pisa it decreases to about 3 hours.
 Traveling time computation . An important aspect of TripBuilder is that we recommend complete itineraries fit-ting the available time budget and not just the set of PoIs to be visited. The trip building step should therefore consider not only PoI visiting time but also the time  X  ( p i ,p j to move between consecutive PoIs in the itinerary. Since measuring intra-PoI moving time from the photo albums re-sulted to be inaccurate for not popular PoIs, we resort to an external service. Given two PoIs in a city, we compute function  X  (  X  ,  X  ) by querying for the Google Maps X  walking distance. Naturally, this is an approximation since several variations could happen: tourists may use a car, or use pub-lic transportation, or take a taxi. However, our method is parametric to these aspects, and the system can be easily adapted to consider the different choices. Moreover, most PoIs in our touristic cities are actually at walking distances. Table 1 shows the main characteristics of the three datasets. The second column reports the number of PoIs for each of the three cities. Note that these numbers refer to the re-sult of the clustering phase, while the number of entities extracted from Wikipedia are 124, 1 , 022, and 671 for Pisa, Florence and Rome, respectively. Furthermore, columns  X # Users X  and  X # Photos X  report the number of distinct users and photos retrieved from Flickr. Finally, column  X # Traj. X  reports the total number of trajectories extracted from the dataset.
 Table 1: Statistics regarding the three datasets.

We assess the effectiveness of TripBuilder by compar-ing its performance with those obtained by two baseline methods on common evaluation metrics that consider the actual behavior of users as mined from Flickr. In particular, we conduct our experiments on the three cities by splitting the three datasets in training and test sets, and by varying the parameter  X  affecting the contributions of PoIs/user-similarity and PoI-popularity to user profit. For every city, we consider the 100 users with the longest PoI histories as test set. Since users in the test set are the golden standard used to compute effectiveness figures, we choose the users having the longest PoI histories to be able to vary in a sig-nificant range the time budgets (e.g., we can not evaluate a personalized 4-days itinerary in Rome with test users that actually visited only a pair of popular PoIs). The average number of PoIs visited by our 100 test users is 12 . 2, 53 . 9, 51 . 2 for Pisa, Florence, and Rome, respectively. Note that in the whole datasets the averages drop respectively to 2 . 7, 4 . 9, and 4 . 6. The preference vector of every one of the 100 test users in each city, along with a time budget varying in the range 1, 2, and 4 days (1 / 2, 1 days in the case of the small city of Pisa that can be visited even in less than one day) 3 , are given in input to TripBuilder and the baseline algorithms.

We compare the performance of TripBuilder against the baselines detailed below.
 Trajectory Popularity (Tpop) . This baseline builds the trip by taking into account the normalized popularity of the trajectories in S computed as the sum of the popularity of the constituent PoIs divided by the length of the trajectory. It works by adding to the visiting plan once at a time the most popular trajectories until the time budget is reached. Trajectory Personalized Profit (Tppro) . Given the preference vector of a tourist, this baseline sorts the tra-jectories in S by decreasing normalized user/PoI similarity. Such trajectory score is computed as the sum of user/PoI similarities of all the PoIs in the trajectory divided by trajec-tory length. The baseline algorithm builds the personalized itinerary by adding once at a time the trajectories having the highest profit for the specific tourist until the total time budget is reached.

The metrics used to evaluate and characterize the itinera-ries are defined below.
 Recall (on PoIs and Categories) . This is the popular recall metrics that in the Information Retrieval domain mea-sures the fraction of the documents that are relevant to the query that are successfully retrieved. In our case it is com-puted for a user and a suggested itinerary as the fraction of PoIs (or Categories) in the user PoI history which occurs in the suggested itinerary.
 Popularity Score . A popularity score S pop is computed for an itinerary T by summing the popularity of the PoIs covered by T . More formally, where pop ( p ) is the number of distinct users who visited p . Personal Profit Score . Given an itinerary T and a user u , a profit score ( S pro u ) for T can be computed as where sim ( ~v p , ~v u ) is the user/PoI similarity function over PoI relevance user preference vectors given in Definition 1. Visiting Time Score . This score assumes that the average per-PoI visit time of an itinerary is related with its interest-ingness. The higher the average per-PoI visit time computed as the sum of the visiting times for the constituent PoIs, the higher the interestingness. Given an itinerary T , its Visiting Time Score ( S vt ) is
We assume the normal daily activity of a tourist in a city to be of twelve hours. Our solution is, however, completely agnostic w.r.t. the daily agenda and works as well with tourist-provided agenda defining different time slots. where  X  ( p ) is the average visiting time (in seconds) for PoI p . Note that this metrics is particularly meaningful for bud-geted itineraries as the ones we deal with. In fact at parity of total time budget an itinerary with higher Visiting Time Score should be preferred over one having a lower score since the former in principle involves more time to enjoy interest-ing attractions and less time to move from one PoI to the next one.
 The results of the experiments conducted are reported in Table 2. It is worth recalling that our approach aims at maximizing the user X  X  total profit/interest over the PoIs fit-ting her budget. In terms of S pro u , our solution improves the baselines up to 91% in Pisa (with an absolute improvement  X  S pro u of 0 . 272), 173% in Florence ( X  S pro u = 0 . 249) and 130% in Rome ( X  S pro u = 0 . 403). In addition, it builds trips that increase S vt up to 25 minutes in Pisa, about 4 hours in Florence, and approximately 11 hours in Rome. There-fore our algorithm suggests itineraries that better match user preferences and involve lower intra-PoI movement time than the baselines.

By observing the column S pro u on Table 2, we can con-clude that TripBuilder constantly outperforms the base-lines and presents a behavior which is sensitive to  X  . It is worth highlighting two situations: i) when  X  = 0, Trip-Builder is comparable to Tpop (both considering only pop-ularity), and we can see that our algorithm obtains higher S u ; ii) when  X  = 1, TripBuilder considers only user X  X  interest, similarly to Tppro, but still it achieves higher S values. Thus, we may conclude that  X  plays an important role in TripBuilder to balance the contribution of user X  X  profit/interest and PoI X  X  popularity.

Another important metric is the visit time reported in column S vt . The higher the visit time, the more relevant the recommended trip is to the user, since it is more ad-vantageous to the user to spend time visiting the PoIs than moving among them. As our GMC formulation takes this factor into account (as a cost), it tends to exploit in the so-lution trajectories that visit close PoIs and maximize user profit. Consequently, TripBuilder is able to globally build trips maximizing S vt . We can see from the results in the table that TripBuilder uses more appropriately the time budget. The difference in S vt becomes higher when bigger cities and larger budgets are considered. In the case of Pisa, the three algorithms have quite similar Visit Time Scores, with slight gains for TripBuilder . In the case of the larger cities of Florence and Rome, TripBuilder remarkably out-performs the baselines. This could happen because PoIs in small cities are close and concentrated in a small region, while in bigger cities larger intra-PoI traveling time can im-pact the S vt metric.
 In terms of PoIs and categories recall (Recall-P and Recall-C in Table 2), all algorithms get at least 75% of the relevant PoIs and 96% of the categories for Pisa. As shown in Ta-ble 2, TripBuilder cannot reach the 99% of category recall of Tpop, but the 98% is still a signal that TripBuilder chooses PoI of relevant categories for the users. Looking at PoIs recall, on the other hand, TripBuilder gets better results than the baselines: 87% compared to 83% of Tpop and 79% of Tppro for the one-day time budget. When we compare the results for Florence and Rome, we observe that TripBuilder outperforms PoIs recall results as well as cat-Table 2: Performance of TripBuilder (TB) by vary-ing the parameter  X  and the baselines according to various metrics. egories recall results in all the experiments. This happens mostly thanks to the capability of TripBuilder of build-ing trips with an higher visit time within the time budgets, consequently more PoIs are likely to be visited. Finally, we can see that the  X  parameter allows to fit the expectations of the user. For small values of  X  we have higher recall val-ues because trajectories crossing popular PoIs are preferred. When  X  is increased, recall figures decreases (although stay always significantly over the baselines) because unexpected trajectories fitting the user interests are suggested that may constitute serendipitous recommendations.
In this paper we introduced TripBuilder , a unsupervised framework for the recommendation of personalized touristic itineraries that model the planning of a trip as a instance of the Generalized Maximum Coverage problem. It works by composing the itinerary that maximizes a measure of user interest over the PoIs while globally respecting the user time budget. We evaluate TripBuilder on datasets collected for three cities differentiated by size and touristic interest. Re-sults show that TripBuilder outperforms two strong base-lines for all the metrics adopted in the assessment. Future work includes a deeper investigation of how to schedule the TripBuilder solution on the tourist agenda.
 Acknowledgments. We acknowledge Liran Katzir and all authors of [1] for providing us their GMC source code. This work was partially supported by EU FP7 Marie Curie project SEEK (no. 295179), CIP-PSP project E-CLOUD (no. 325091), PRIN 2011 project ARS TECNOMEDIA, CNPQ Scholarship (no. 306806/2012-6), CNPQ Casadinho/ PROCAD Project (no. 552578/2011-8), and CNPQ-CNR Bilateral Project (no. 490459/2011-0).

