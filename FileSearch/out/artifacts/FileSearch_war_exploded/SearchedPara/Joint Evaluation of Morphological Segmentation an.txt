 A parser takes a sentence in natural language as in-put and returns a syntactic parse tree representing the sentence X  X  human-perceived interpretation. Cur-rent state-of-the-art parsers assume that the space-delimited words in the input are the basic units of syntactic analysis. Standard evaluation procedures and metrics (Black et al., 1991; Buchholz and Marsi, 2006) accordingly assume that the yield of the parse tree is known in advance. This assumption breaks down when parsing morphologically rich languages (Tsarfaty et al., 2010), where every space-delimited word may be effectively composed of multiple mor-phemes, each of which having a distinct role in the syntactic parse tree. In order to parse such input the text needs to undergo morphological segmentation , that is, identifying the morphological segments of each word and assigning the corresponding part-of-speech (PoS) tags to them.

Morphologically complex words may be highly ambiguous and in order to segment them correctly their analysis has to be disambiguated. The multiple morphological analyses of input words may be rep-resented via a lattice that encodes the different seg-mentation possibilities of the entire word sequence. One can either select a segmentation path prior to parsing, or, as has been recently argued, one can let the parser pick a segmentation jointly with decoding (Tsarfaty, 2006; Cohen and Smith, 2007; Goldberg and Tsarfaty, 2008; Green and Manning, 2010). If the selected segmentation is different from the gold segmentation, the gold and parse trees are rendered incomparable and standard evaluation metrics break down. Evaluation scenarios restricted to gold input are often used to bypass this problem, but, as shall be seen shortly, they present an overly optimistic upper-bound on parser performance.

This paper presents a full treatment of evaluation in different parsing scenarios, using distance-based measures defined for trees over a shared common denominator defined in terms of a lattice structure. We demonstrate the informativeness of our metrics by evaluating joint segmentation and parsing perfor-mance for the Semitic language Modern Hebrew, us-ing the best performing systems, both constituency-based and dependency-based (Tsarfaty, 2010; Gold-berg, 2011a). Our experiments demonstrate that, for all parsers, significant performance gaps between re-alistic and non-realistic scenarios crucially depend on the kind of information initially provided to the parser. The tool and metrics that we provide are completely general and can straightforwardly apply to other languages, treebanks and different tasks. In morphologically rich languages (MRLs) substan-tial information about the grammatical relations be-tween entities is expressed at word level using in-flectional affixes. In particular, in MRLs such as He-brew, Arabic, Turkish or Maltese, elements such as determiners, definite articles and conjunction mark-ers appear as affixes that are appended to an open-class word. Take, for example the Hebrew word-token BCLM, 1 which means  X  X n their shadow X . This word corresponds to five distinctly tagged elements: B ( X  X n X /IN), H ( X  X he X /DEF), CL ( X  X hadow X /NN), FL ( X  X f X /POSS), HM ( X  X hey X /PRN). Note that morpho-logical segmentation is not the inverse of concatena-tion. For instance, the overt definite article H and the possessor FL show up only in the analysis. The correct parse for the Hebrew phrase  X  X CLM HNEIM X  is shown in Figure 1 (tree1), and it pre-supposes that these segments can be identified and assigned the correct PoS tags. However, morpholog-ical segmentation is non-trivial due to massive word-level ambiguity. The word BCLM, for instance, can be segmented into the noun BCL ( X  X nion X ) and M (a genitive suffix,  X  X f them X ), or into the prefix B ( X  X n X ) followed by the noun CLM ( X  X mage X ). 2 The multi-tude of morphological analyses may be encoded in a lattice structure, as illustrated in Figure 2.
In practice, a statistical component is required to decide on the correct morphological segmentation, that is, to pick out the correct path through the lat-tice. This may be done based on linear local context (Adler and Elhadad, 2006; Shacham and Wintner, 2007; Bar-haim et al., 2008; Habash and Rambow, 2005), or jointly with parsing (Tsarfaty, 2006; Gold-berg and Tsarfaty, 2008; Green and Manning, 2010). Either way, an incorrect morphological segmenta-tion hypothesis introduces errors into the parse hy-pothesis, ultimately providing a parse tree which spans a different yield than the gold terminals. In such cases, existing evaluation metrics break down. To understand why, consider the trees in Figure 1. Metrics like P ARS E VAL (Black et al., 1991) cal-culate the harmonic means of precision and recall on labeled spans  X  i, label, j  X  where i, j are termi-nal boundaries. Now, the NP dominating  X  X hadow of them X  has been identified and labeled correctly in tree2, but in tree1 it spans  X  2 , NP , 5  X  and in tree2 it spans  X  1 , NP , 4  X  . This node will then be counted as an error for tree2, along with its dominated and dominating structure, and P ARS E VAL will score 0.
A generalized version of P ARS E VAL which con-siders i, j character-based indices instead of termi-nal boundaries (Tsarfaty, 2006) will fail here too, since the missing overt definite article H will cause similar misalignments. Metrics for dependency-based evaluation such as A TTACHMENT S CORES (Buchholz and Marsi, 2006) suffer from similar problems, since they assume that both trees have the same nodes  X  an assumption that breaks down in the case of incorrect morphological segmentation.
Although great advances have been made in pars-ing MRLs in recent years, this evaluation challenge remained unsolved. 3 In this paper we present a solu-tion to this challenge by extending T ED E VAL (Tsar-faty et al., 2011) for handling trees over lattices. Input and Output Spaces We view the joint task as a structured prediction function h : X  X  X  from input space X onto output space Y . Each element x  X  X is a sequence x = w 1 , . . . , w n of space-delimited words from a set W . We assume a lexicon LEX , distinct from W , containing pairs of segments drawn from a set T of terminals and PoS categories drawn from a set N of nonterminals.
 Each word w i in the input may admit multiple morphological analyses, constrained by a language-specific morphological analyzer MA . The morpho-logical analysis of an input word MA ( w i ) can be represented as a lattice L i in which every arc cor-responds to a lexicon entry  X  s, p  X  . The morpholog-ical analysis of an input sentence x is then a lattice L obtained through the concatenation of the lattices L 1 , . . . , L n where MA ( w 1 ) = L 1 , . . . , MA ( w n L n . Now, let x = w 1 , . . . , w n be a sentence with a morphological analysis lattice MA ( x ) = L . We define the output space Y MA ( x )= L for h (abbreviated Y
L ), as the set of linearly-ordered labeled trees such that the yield of LEX entries  X  s 1 , p 1  X  ,. . . ,  X  s k each tree (where s i  X  T and p i  X  N , and possibly k 6 = n ) corresponds to a path through the lattice L . Edit Scripts and Edit Costs We assume a DEL (  X  s, p  X  , i, j ) } of edit operations which can add or delete a labeled node c  X  N or an entry  X  s, p  X   X  LEX which spans the states i, j in the lattice L . The operations in A are properly constrained by the lat-tice, that is, we can only add and delete lexemes that belong to LEX , and we can only add and delete them where they can occur in the lattice. We assume a function C ( a ) = 1 assigning a unit cost to every op-eration a  X  A , and define the cost of a sequence  X  a 1 , . . . , a m  X  as the sum of the costs of all opera-tions in the sequence C (  X  a 1 , ..., a m  X  ) = P m i =1 An edit script ES ( y 1 , y 2 ) =  X  a 1 , . . . , a m  X  is a se-quence of operations that turns y 1 into y 2 . The tree-edit distance is the minimum cost of any edit script that turns y 1 into y 2 (Bille, 2005).
 Distance-Based Metrics The error of a predicted structure p with respect to a gold structure g is now taken to be the TED cost, and we can turn it into a score by normalizing it and subtracting from a unity: The term | p | + | g | X  2 is a normalization factor de-fined in terms of the worst-case scenario, in which the parser has only made incorrect decisions. We would need to delete all lexemes and nodes in p and add all the lexemes and nodes of g , except for roots. An Example Both trees in Figure 1 are contained in Y L for the lattice L in Figure 2. If we re-place terminal boundaries with lattice indices from Figure 2, we need 6 edit operations to turn tree2 into tree1 (deleting the nodes in italic , adding the nodes in bold ) and the evaluation score will be T
ED E VAL ( tree2,tree1 ) = 1  X  6 14+10  X  2 = 0 . 7273 . We aim to evaluate state-of-the-art parsing architec-tures on the morphosyntactic disambiguation of He-brew texts in three different parsing scenarios: (i) Gold: assuming gold segmentation and PoS-tags, (ii) Predicted: assuming only gold segmentation, and (iii) Raw: assuming unanalyzed input text.
For constituency-based parsing we use two mod-els trained by the Berkeley parser (Petrov et al., 2006) one on phrase-structure (PS) trees and one on relational-realizational (RR) trees (Tsarfaty and Sima X  X n, 2008). In the raw scenario we let a lattice-based parser choose its own segmentation and tags (Goldberg, 2011b). For dependency parsing we use MaltParser (Nivre et al., 2007b) optimized for He-brew by Ballesteros and Nivre (2012), and the Easy-First parser of Goldberg and Elhadad (2010) with the features therein. Since these parsers cannot choose their own tags, automatically predicted segments and tags are provided by Adler and Elhadad (2006).
We use the standard split of the Hebrew tree-bank (Sima X  X n et al., 2001) and its conversion into unlabeled dependencies (Goldberg, 2011a). We use P ARS E VAL for evaluating phrase-structure trees, A
TTACH S CORES for evaluating dependency trees, and T ED E VAL for evaluating all trees in all scenar-ios. We implement S EG E VAL for evaluating seg-mentation based on our T ED E VAL implementation, replacing the tree distance and size with string terms.
Table 1 shows the constituency-based parsing re-sults for all scenarios. All of our results confirm that gold information leads to much higher scores. T
ED E VAL allows us to precisely quantify the drop in accuracy from gold to predicted (as in P ARS E-VAL ) and than from predicted to raw on a single scale. T ED E VAL further allows us to scrutinize the contribution of different sorts of information. Unla-beled T ED E VAL shows a greater drop when moving from predicted to raw than from gold to predicted , and for labeled T ED E VAL it is the other way round. This demonstrates the great importance of gold tags which provide morphologically disambiguated in-formation for identifying phrase content.

Table 2 shows that dependency parsing results confirm the same trends, but we see a much smaller drop when moving from gold to predicted . This is due to the fact that we train the parsers for predicted on a treebank containing predicted tags. There is however a great drop when moving from predicted to raw , which confirms that evaluation benchmarks on gold input as in Nivre et al. (2007a) do not pro-vide a realistic indication of parser performance.
For all tables, T ED E VAL results are on a simi-lar scale. However, results are not yet comparable across parsers. RR trees are flatter than bare-bone PS trees. PS and DEP trees have different label sets. Cross-framework evaluation may be conducted by combining this metric with the cross-framework protocol of Tsarfaty et al. (2012). We presented distance-based metrics defined for trees over lattices and applied them to evaluating parsers on joint morphological and syntactic dis-ambiguation. Our contribution is both technical, providing an evaluation tool that can be straight-forwardly applied for parsing scenarios involving trees over lattices, 4 and methodological, suggesting to evaluate parsers in all possible scenarios in order to get a realistic indication of parser performance. We thank Shay Cohen, Yoav Goldberg and Spence Green for discussion of this challenge. This work was supported by the Swedish Science Council.
