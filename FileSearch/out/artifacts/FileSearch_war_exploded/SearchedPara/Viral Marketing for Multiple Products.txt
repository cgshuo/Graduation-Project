
Word of Mouth information exchange, now dubbed Vi-ral Marketing, has been a successful vehicle (the most successful one, before the advent of mass communication media like newspaper) for spreading awareness of news, events and influences for centuries. With the advent of digital communication and social interaction medias rangi ng from telecommunication (SMS, cell phones, etc.), emails to recent social networking services (e.g. orkut, facebook , twitter, etc.), more and more of our social interaction beca me accessible as digital traces of our social network. These social networking graphs have suddenly given us access to a very detailed information about user interactions and soci al behavior, that can be used in more successful and targeted online viral marketing.

Viral marketing has received attention from a multitude of perspectives over the past decades. The earliest works studied the cascading characteristics of word of mouth propagation, where the information cascades in the social network using the interactions of individuals X  X  user who knows the information tells it to (some of) his friends, who then tell it to their friends and so on. These cascades typically start from a few individuals who are the initial carriers ( seeds ) and over time cover portions of the social network far beyond the friend network of the initial carrier s. Such cascades are a versatile phenomena, common in many different kinds of spreads such as news, contagious disease s, advertisements, product recommendations, health warning s, etc. Several researchers have explored social networks for designing realistic spreading models [1], finding influenti al users and communities, etc. The most relevant to our work are the works on maximizing the influence spread by care-fully selecting the initial seeds [2], [3]. Based on certain well studied influence spread models, given the social network and the size of the required seed set, the aim is to choose a set of seeds that maximize the overall influence.
Further, on a more applied front, there already are in-stances of successful viral marketing campaigns in real life (e.g. the Nike commercial 1 ) that use social networking websites such as orkut.com and facebook.com to market products. It is only a matter of time when marketing compa-nies 2 that specialize in targeted viral marketing and would design and run a marketing campaign for their customers will also become commonplace. We take the point of view of mass marketers who design viral marketing campaigns for multiple products of their customers.

Specifically, we aim at maximizing the influence spread for multiple non-competing products  X  1  X  X  X  t . Each product comes with its total budget for its campaign, that translate s into the number of seeds k i that we should select for it.
In a social network, users have widely different values on the amount of  X  X nfluence X  they exert on their friends. Typically, there are a few highly influential users that make perfect candidates for initial seeds. Further, each seed us er is sent the product information in form of a coupon or advertisement through email, SMS or a phone call. However, we have to be careful while marketing multiple products; as a single user getting too many of these messages will start regarding them as spam. This not only irritates the user, but also might encroach privacy, which would be counter productive to the marketing campaign. To avoid this, we put a constraint on the number of products for which a user can be selected as a seed. Note that a user can be influenced for any number of products, if the influence is propagated by someone in her social network; the restrictions are only on the promotional messages sent directly to her by the marketer.

To measure the performance of seed selection, we choose the total influence summed over all products as the key metric. Notice that maximizing the sum of influences also yields maximum average influence, which is a desirable metric to optimize.

We assume here that the products are not competing with each other, except for choosing the seeds. What it means is that once the seed selection is done, influence propagation for each product happens independent of others . In practice, products in separate categories (like soaps an d music players) are non-competing, so that users can buy any number of them if they like, and do not have to choose only one if given multiple promotions. Note that this is unlike the competitive influence maximization over multipl e products [4], where each product is actually competing with others for influencing every node, and only the product that reaches a node first influences it.

In this section we formally define the influence maxi-mization problem for multiple products. We start with some preliminaries of the influence maximization problem. A. Preliminaries
Consider the directed graph G ( V, E ) where nodes rep-resent the identities of users and edges represent social interactions (friend relationships, message exchanges, e tc.). In the influence maximization problem, the nodes that are influenced by a product are called active and others are called inactive . All nodes are initially inactive; The marketer chooses a set S  X  V of seed nodes and makes them active. Starting from the seeds, the influence propagates in the graph as follows X  X he seed nodes make some of their neighbors active (according to the propagation model that w e will discuss shortly). The newly active nodes then influence some of their neighbors, and so on. Hence the influence starts from the set S and cascades in the graph through the outgoing edges of the active nodes. The aim of the influence maximization problem is to choose the initial seed set S so that the final influence (i.e. the number of active nodes at the end of the cascade) is maximized.
 We first define the influence model we use in this paper. Independent Cascade Model [5]: In this model we are given the probability values p uv (  X  1 ) for each edge ( u, v )  X  E , and assume that any active node u has a probability p uv of activating its neighbor v . The influence is propagated in a randomized fashion X  X fter becoming active, each node has exactly one chance of activating each of its inactive neighbors according to the edge probabilities. Af ter its chance is over, it becomes dormant (but influenced) and does not activate any of its neighbors anymore. Starting fro m the initial seed nodes being active, this process repeats ti ll there are no active nodes left, leaving behind a set of nodes that are influenced.

Although we consider only Independent Cascade model in this paper, all our results can be easily extended to the Linear Threshold model [1]. We assume the existence of an influence oracle that, given the set of seeds ( S ) and the inputs to the cascade model, can estimate the number of nodes ( I ( S ) ) that will be influenced at the completion of the cascade. Note that, designing an oracle that gives exact size of influence is a hard problem in itself and in many cases, the best one can do is to get an approximate oracle. We deal with the oracle design in Section VI-B. Until then, we assume that such an (approximate) oracle is given and use it to design our algorithms.
 B. Problem Formulation
In this work we are interested in collective viral marketing campaigns for t products  X  1  X  X  X  t . We assume that the products are non-competitive, i.e. influence propagation for any two products happen independent of each other, and that a node can get influenced by any number of products; all t products in the best case. We are given a vector of seed requirements k 1  X  X  X  t , where k i is target number of seeds for  X  i . The aim is to select the seed sets S = S 1  X  X  X  k , where S i  X  V is the set of seeds for  X  i , subject to the product constraint | S i |  X  k  X  i  X  { 1 t } . Further, we denote  X  v as the number of products for which the node v can be chosen as a seed ( |{ i : v  X  S i }|  X   X  v ). We call these the node constraints. These node constraints make sure that we do not spam any node during the campaign.

We define I ( S i ) as the expected number of nodes being influenced (including the seeds) by choosing S i as the seed set (computed by the influence oracle). Since the propagatio n is independent for each product, the total number of nodes influenced is I ( S ) = P t 1 I ( S i ) . We want to choose S such that this overall influence is maximized. Observe that the value of I ( S i ) can be computed by making suitable calls to the influence oracle.

We are now ready to define the influence maximization problem for multiple products. t-Product Influence Maximization ( t -IM): Given the graph G ( V, E ) and the set of seed-sizes k 1 ...t , find the seed set S 1 ...t ( S i  X  V ), that satisfies the following constraints, | S i | X  k i ,  X  i  X  X  1 t } (product constraints) |{ i : v  X  S i }| X   X  v ,  X  v  X  V (node constraints) and maximizes I ( S ) = P t 1 I ( S i ) .

It is easy to see that the above problem is a strict general-ization of the influence maximization problem studied in [3] , as setting t = 1 reduces our problem to [3]. Hence the NP-hardness of the problem carries over to our formulation.
We assume that the seed selection process involves pro-viding some form of incentives to the users. Therefore, users will certainly adopt a product if they are picked up as seeds (unless of course the node constraints are violated). However, our algorithms can be easily adapted to the probabilistic setting, where the seeds will become active only with certain probabilities.

Note that, it is not always possible to solve the t -IM problem where the seed requirements of all the products are met with equality. There can be a situation where a product  X  i is assigned less than k i seeds and all nodes in V  X  S i have saturated their node constraints; therefore no further seeds can be assigned to it. Although the nodes in S i might have positive slacks in their node constraints, they can X  X  be reassigned to S i ; which means product i will be left with less than k i seeds allocated. Interestingly enough, we can arrive at a situation where some of the product and node constraints are not met with equality, although no further allocation could be possible. This is unlike the single product case, in which one can always assign k (  X | V | ) seeds.
The node constraints make the problem of selecting the seeds hard. Let us consider the case when all k i are equal to k . If all the  X  v values are more than t , then the optimum set of seeds of size k , chosen for all the products is the optimum solution for the t -IM problem. However, since in practice we aim to market a large number of products and the node constraints are expected to be small, the t -IM problem becomes much harder than the single product version. In the next example, we show that if we choose the sets iteratively for products one after the other, we could get a solution that is O ( t ) times worse than optimal.

Example 2.1: In the graph shown in Figure 1, let k i = k = t,  X  i  X  { 1 ...t } and  X  v = 1 ,  X  v  X  V . The p uv value is 1 for the directed edges and 0 otherwise. For example, choosing the node x i activates all the nodes in the set N and the nodes x i 1 and x i 2 , while choosing y i activates only one extra node y i 1 ; choosing any other node only activates itself. If the seeds are chosen one by one, the first product will choose x 1  X  X  X  t , while the rest of the products will pick nodes in Y . The total influence I ( S ) = | N | +3 t +2( t  X  1) t = | N | + t (2 t + 1) . On the other hand, the optimal solution is to choose one node from X and the rest from Y for each product, with the total cost of I OP T ( S ) = t ( | N | + 2 t + 1) . For | N |  X  t , iterative seed selection is O ( t ) worse than optimum.

Note that while it is natural to assume that increasing marketing messages have negative impact on its influence on users [6], assuming a hard threshold on the number of messages he is receptive of is clearly not the only possibility; here we discuss some more options. Generally speaking, it is safe to assume that the probability with which he is influenced by messages (and forwards them to his friends) decreases with the number of messages he receives. How-ever, this implies that now not only the selection of seeds, but also the relative order in which products are marketed decides the amount of overall influence a product gets. E.g, a product with the same seeds, if marketed after another product (with overlapping seeds) may get lesser influence than if marketed before it, because the overlapping users will be less influenced by whichever product goes second. It turns out that even after seed selection, just the ordering of products is a hard problem in itself; hence tackling both in one go makes the formulation unclean.

One way to resolve this product-ordering problem is to as-sume that it is already provided. Another model could be that receiving multiple messages affect a user X  X  influence for all the products. In other words, receiving another promotional message changes the user X  X  reaction to previous messages also, unlike previous models where only the influence of subsequent messages are diminished. This could be the practical approach to take as usually the information about user behavior is only at the granularity of the average influence with multiple messages. It turns out that the t -IM problem under the above assumption can also be solved efficiently. We discuss this version briefly in Section VI. C. Contributions
In this work, we make the following contributions:
We define the influence maximization problem ( t -IM) for multiple non-competing products. We identify that parallel to seed selection, avoiding spam is a key issue while mar-keting multiple products. To the best of our knowledge, this is the first work to consider joint optimization of selecting seeds for multiple products. We give two algorithms for the t -IM problem, called
G REEDY and F AIR G REEDY . The first algorithm uses greedy hill climbing on multiple products. Using the theory of p -systems and sub modular functions, we prove that it gives 1 / 3 -approximation to the t -IM problem. We observe that G REEDY gives high total influence, but the influence values for individual product can differ by a huge factor. The F AIR G REEDY technique does a more fair allocation of seeds, and gives a high overall influence while ensuring that over the course of the algorithm, products with similar requirements of seeds get similar influences.
We also extend our techniques to an online setting where only  X  -approximate seed requirements are known for fu-ture products, while the marketing must start for products that have already arrived. We show the G REEDY algorithm gives a 1 / 3 (1+  X  )  X  1 approximation to the t -IM problem.
We also show that our techniques extend to the case of  X  -approximate oracle, giving 1 / 3  X   X  approximation to the t -IM problem.
We implement our techniques and the approximate ora-cles, and conduct extensive experimental study on real social graphs. Our algorithms give at least 30% improve-ment over other strategies, and also scale well with large graphs.

Several studies of information diffusion on networks have emerged over past few decades, including word of mouth exchanges [5], topics on blogs and recommendation websites [7], and of course on mathematical models [1]. We refer the reader to a comprehensive survey paper of these models by Wortman [8]. Clearly these papers study the basis of information diffusion, but the most directly relevant to us are the mathematical models proposed in [1], [5], that we use in our work.

Recently, several interesting empirical studies have been conducted over a variety of different social networks to understand the influence cascade process [7], [9]. As an example, Leskovec et al. [6] analyze a large recommendation network (for dvd, books, etc.) and noted that viral marketin g is very effective and responsible for significant sales of products in many categories. Cha et al. [10] studied the popularity of photos in the Flickr social network, and found that on average a majority ( 55% ) of popularity rankings of photos is due to social cascades. In another recent work, Tang et al. [11] use social networks and the knowledge of user X  X  interests in different topics to extract influences a mong users. These influence values can be used as an input to the propagation models that are used in our work.

The closest research to (and part of the motivation behind) our work are the papers on optimal seed selection for maximizing influence [2], [9], [12]. Domingos et al. [2] were among the first to pose influence maximization as an optimization problem of selecting the best seeds. Kempe et al. [3], studied this problem under popular cascade models and used sub-modularity of influence in obtaining constant factor approximations to seed selection. Recently, Mossel et al. [12] proved that the (approximate) influences obtained by sampling oracles are also sub-modular, and hence closed an open question in the seed selection techniques, relevant to both [3] and our work.

In another recent work, Hartline et al. [13] take a very different approach, maximizing not the influence but the net profit of selecting a set of seeds. Since they do not consider influence cascades and work only with direct influences by seeds, their techniques are not relevant to our work. In [14] authors model cascades as heat diffusion process and use 1: S i =  X   X  i  X  X  1 , 2 , , t } ; 2: R = { 1 , 2 , , t } ; /* the products that require more 3: U = V ; /* the nodes with unsatisfied constraints */ 4: while U 6 =  X  and R 6 =  X  do 5: /* some node constraints are not satisfied and some 6: pick node v  X  U and product i  X  R with the 8: if ( v.num copies =  X  v ) then U  X  U  X  X  v } ; 9: if ( | S i | = k i ) then R  X  R  X  X  i } ; 10: end while it to select seeds; but their model is very different from those that we use. Another body of work is targeted at competitive influence maximization [4], [15], where two or more products are competing to influence nodes in the social network. The techniques involve game-theoretic arguments to find out seeds that optimally counter the selection of opponents. Although these papers are similar to our work as they also involve multiple products, their goal is very different than ours X  X hey view it as a competition, where each product selfishly maximize its own influence, while we aim to solve a joint optimization problem for non-competing products.

We also use several tools from Matroid theory and sub-modular function maximization [16] to solve the t -IM problem. Although not directly relevant to viral marketing , several recent papers [17], [18] on this topic gives us helpf ul insights on solving the t -IM problem and improvements in their results might be carried over to our work.
 A. The G REEDY Algorithm
We will now describe our first technique, called G REEDY , solving the t -IM problem. The main idea is to adapt the local greedy hill climbing algorithm [16] to the multiple product case, subject to the node and the product constraints. At eac h step, it picks the node v and the seed set S i s.t. adding v to S i gives the maximum increase I ( v, S i ) to the overall influence, and add it to S i ; here, I ( v, S i ) is the increase in influence by adding node v to the seed set S i 3 . To get a solution satisfying the two constraints in the t -IM problem, it ignores the nodes whose node constraints are already satisfied and the product s that already have the required number of seeds. We repeat this until all products get the required number of seeds, or n o further assignment is possible. The pseudo-code of G REEDY is shown in Algorithm 1.

It would be helpful in both understanding the G REEDY procedure and for the analysis to imagine the influence happening over t copies of the graph, one for each product. We call these graphs G 1  X  X  X  t , where G i ( V i , E i ) is the i th V any two nodes in separate copies, that makes these graph disconnected from each other. Figure 2 shows an example of this construction, where we show the original graph G on the left and it X  X  two copies (for 2 products) in the middle. Note that we assume the same propagation model for each graph G i for ease of exposition, but this assumption can be relaxed later.

As the influence propagation for each product happens independently, after choosing the seeds, the influence for each product is restricted within its own copy and have no effect on any other copy. The G REEDY algorithm in each step chooses the node v i  X  G  X  with the maximum value of I ( v i , S i ) and adds it to S i . It doesn X  X  choose a node v i if the original node was already chosen  X  v times ( |{ j : v j  X  S }| &gt;  X  v ) or its copy already has required number of seeds ( | S i | X  k i ). Let us look at an example of G REEDY algorithm before moving to the analysis.
 Example 4.1: The Figure 2 shows the steps of the G
REEDY algorithm on an example graph G , with the In-dependent Cascade model ( p uv values for all the edges are as shown). There are t = 2 products and we need to select k 1 = k 2 = 2 seeds for each. The  X  values are:  X  f = 2 and 1 for all other nodes. For selecting the first seed, the expected influence for nodes are E a,b,c,d,e,f = the first product ( S 1 = { a } ). For the next step, the best (top 4) candidates for the next seed are { f 2 , c 2 , c 1 , f 1 } and the choose f as a seed for the second product. Note that for the first product, these values are conditional to a already chosen as a seed, making f 1 is smaller than c 1 , even though that was not the case in the beginning. The middle graph shows the seeds selected after the first two iterations. The rightmost graph shows the final seed selections as S 1 = { a, c } and S 2 = { e, f } , the expected influences for the products are 4 . 1 and 3 . 6 respectively. We also show the influenced nodes (dashed set) in one sample run of the cascade processes, that achieves influence values of 4 and 3 resp. for the two products.
 B. p-system and Approximation
We now analyze the G REEDY algorithm and prove that it gives a 1 / 3 -approximation to the t -IM problem. We use the theory of Matroids and sub-modular function maximization, defined as follows.
 Definition 1: Sub-Modular function [16]: A function f : U  X  R is called sub-modular iff  X  B  X  A ,
In other words, adding elements to set gives diminishing increments to the function value X  X he marginal increase due to adding the element x decreases (specifically, is non-increasing) as the set increases. Observe that our influence function I ( S ) is sub-modular, since the influence function for each product is sub-modular [3], [12] and the overall influence is a non-negative linear combination (specificall y, the sum of) individual influences. The sub-modular function optimization is well studied in the context of Matroids, defined as below.

Definition 2: Matroid: A Matroid is a pair M = ( U, I ) , where I  X  2 U is a subset of the power set (all possible subsets) of U that satisfies the following constraints.
I is an Independent Set System :  X   X  I , and  X  A  X  I , any set B  X  A then B  X  I (All subsets of any independent set is also independent).  X  A, B  X  I and | A | &gt; | B | :  X  x  X  A  X  B s.t. B  X  X  x } X  I
The first constraint defines an Independent set system, and each set S  X  I is called an independent set . The problem of maximizing a sub-modular function on a Matroid is to find the independent set S  X  I , s.t. f ( S ) is maximum over all such sets S . If the input set is a Matroid, it is known that the sub-modular function maximization can be approximated within a constant factor (1/2 or (1  X  1 /e ) in certain cases) using the greedy hill climbing approach [16].

Notice that the Independent Set system essentially defines the feasible sets over which the function is defined. The fea-sible sets in our problem are the seed allocations S = S 1  X  X  X  t that do not violate any node or product constraint. It can be shown that the feasible seed allocations form an Independen t system I S , as they satisfy the independence constraints in Definition 2.
 However, the feasible sets I S do not form a Matroid. Consider the following example with 2 products, all k i = 2 and a graph containing 2 nodes ( a and b ) and  X  v = 1 . Let X = { a 1 , b 2 } and Y = { a 2 } , we can add neither a 1 nor b to Y , as that will violate either the node constraint of a or product constraint for  X  2 , respectively. Hence we need to resort to a slightly weaker definition on an independent set system, called a p-system , defined below.

Definition 3: p-system [16]: An independent system I is called a p-system if  X  A  X  U and X, Y  X  A s.t. X, Y  X  I , and X and Y are respectively the maximal sets of maximum and minimum sizes w.r.t. A 5 , then
This says that for any set A  X  U , the sizes of any two maximal independent subsets of A do not differ by a factor more than p . Note that A need not be an independent set itself, this definition is true for any subset of U . It can be shown that a Matroid is a 1 -system (and vice versa), as all the maximal sets of a Matroids are of equal size. Further, a sub-modular function maximization over a p -system can be approximated to a constant factor using the hill climbing due to the following result by Calinescu et. al. [18]. We will now prove that our feasible sets form a 2 -system.
Lemma 4.1: The feasible seed allocation for the t -IM problem forms a 2 -system.
 A be any subset of U . Further, let X =  X  t 1 X i and Y =  X  t 1 Y i be the maximal sets in A of maximum and minimum sizes, respectively. Define the node set v  X  = { v 1 , v 2 , , v t } , and X ( v ) and Y ( v ) to be the subset of nodes from v  X  that are selected in X and Y , respectively. Note that if for all i , | Y |  X  | X i | then X and Y are of same sizes and hence the feasible seed allocation is a Matroid. Consider the case For such a product i , pick any node v i  X  X i  X  Y i  X  A . As Y is maximal, adding v i to it must violate either product or node constraint (otherwise we can make a larger set Y  X  v i ). But due to product constraint on X i , k i  X  | X i | &gt; | Y i | and so adding v i to Y i will not violate product constraints. So it must violate node constraint, i.e. v i must already be picked as a seed for  X  v products in Y , hence | Y ( v ) | =  X  v . Further, 1: S i =  X   X  i  X  X  1 , 2 , , t } ; 2: R = { 1 , 2 , , t } ; /* the products that require more 3: U = V ; /* the nodes with unsatisfied constraints */ 4: while U 6 =  X  and R 6 =  X  do 5: /* pick the product with minimum influence and give 6: pick the product i  X  R with the minimum I ( S i ) 7: pick node v  X  U the maximum I ( v, S i ) value for 8: S i  X  S i  X  v ; 9: if ( v.num copies =  X  v ) then U  X  U  X  X  v } ; 10: if ( | S i | = k i ) then R  X  R  X  X  i } ; 11: end while there could be only  X  v nodes from v  X  in X , as X must also satisfy the node constraints, hence | X ( v ) | X   X  v .
Let D  X  V be the set of nodes in G that have a copy in the set X  X  Y , D = { v :  X  v i  X  X  X  Y } . Summing over all such v  X  X  in the set X  X  Y , we get
Hence, we get | X |  X  2 | Y | , which implies that the t -IM is a 2 -system.

The approximation factor of G REEDY follows from the above lemma.

Theorem 4.1: The G REEDY algorithm gives a seed allo-cation with influence at least 1 / 3 times the optimum. lemma shows that the t -IM problem forms a 2 -system, and the hill climbing gives a 1 / ( p + 1) approximation of sub-modular function maximization for any p -system [18].
Notice that Lemma 4.1 is independent of the influence propagation model, but only deals with the feasible alloca-tion of seeds subject to node and product constraints. Hence the Theorem 4.1 is applicable to both Independent cascade and Linear Threshold [1] models, as both have sub-modular influence function.
 In this section we present our next algorithm called F
AIR G REEDY that aims at selecting seeds fairly , while still maximizing the overall influence. Notice that the t -IM problem is only targeted at maximizing the total influence summed over all the products. However, it is quite possible that two products with the same seed sizes may get very different influences.

Observe that in certain graphs even the most fair allocation could be arbitrarily unfair. For example, consider a graph with a node v with a large degree d v , high influence probabilities ( p vx = 1 for all neighbors x of v ) and  X  v = 1 , while all others have relatively small influence probabilit ies (  X  0 ). Clearly, the product that gets v is roughly O ( d v ) better than others. Although this is an extreme example, we observed similar phenomena in more realistic graphs with different values of influence probabilities. For example, i n our experiments, we could observe roughly 25% difference in influences using G REEDY algorithm.

Let us first define the fairness of a seed selection. The basic motivation is (assuming same seed sizes) to select seeds such that all products get roughly the same influence, in other words, maximize the minimum influence among all products. However, with varying seed sizes, this goal is counter-intuitive as the products with smaller number of seeds will (and should) get less influence, and just focusing on maximizing that will not give a fair spread to other products. Another approach could be to maximize the minimum value of average influence per seed selected per product ( max min i { I ( S i ) /k i } ). Again, it is expected to get lesser influence per seed as the number of seeds increase, due to the sub-modularity of the influence function. Hence this approach would be biased towards better seeds for products with high k i values.

Based on the above discussion, we target a fair allocation during all steps of the seed selection process. At any step, w e call the products that still require more seeds as active, an d the rest as inactive. The aim is to maximize the minimum influence among all active products ( R in F AIR G REEDY ) at any step. This tries to alleviate the shortcomings of both the definitions discussed above, as it compares the current influence of active nodes, for which both high and low spread products compete equally; and the products with smaller seed requirement get inactive early and hence do not suffer from getting smaller average per-seed influence.
The overall technique is described in Algorithm 2. The idea is that at each step, we pick the product i  X  R (that requires more seeds) with the minimum influence so far and then assign it the seed that increases its influence by the maximum value. Repeat this until all product requirements are met or there is no node that can be further assigned as a seed. We show the steps of this F AIR G REEDY on the example graph of Figure 2.
 Example 5.1: For the graph shown in Figure 2, the F AIR -G
REEDY differs from G REEDY in the third step, where instead of picking the node c 1 , it selects f 2 as the second product has lesser influence so far. The final seeds selected are S 1 = { a, f } and S 2 = { c, f } , with the individual influences 3 . 78 and 3 . 8 respectively. Observe that the overall influence has gone down slightly as compared to G REEDY , but the ratio of influences is almost 1 compared to about 1 . 15 .
 A. Approximate Product Information
Our G REEDY technique requires the seed sizes of all the products before starting. However, in many cases this information may not be known a priori, and becomes avail-able only as products arrive with their actual requirements over time. We assume w.l.o.g. that products arrive in order {  X  1 ,  X  2 , ,  X  t } . Since the campaign should start for the products that have already arrived, we need to solve the t -IM problem in an online setting X  X elect seeds for  X  i without noted earlier (see Example 2.1), selecting seeds iterative ly, ignoring other products could result into sub-optimal over all influence.

We now consider online version of t -IM problem, when only approximate seed requirements of future products are known. Specifically, for a small constant  X   X  0 , we are given a vector  X  k 1  X  X  X  t with the guarantee that the actual seed sizes would be s.t.  X  k i  X  k i  X   X  k i (1+  X  ) . We basically run the G
REEDY algorithm to select  X  k 1  X  X  X  t sized seed sets initially, and then select the extra seeds when the actual k i values are revealed. It can be show that this selection gives a 1 / 3 (1+  X  )  X  1 approximation to the online t -IM problem. We omit the details of the proof.

Lemma 6.1: For the online t -IM problem with  X  -approximate seed sizes  X  k 1  X  X  X  t , we can find the seeds with total influence at least 1 / 3 (1 +  X  )  X  1 times the optimum. B. Approximate Oracle
So far we have assumed the existence of an oracle that can compute the exact influence of any seed set. In practice, however, computing the exact influence is a computationally hard problem to tackle, but can be approximated within a (1  X   X  ) factor, for any  X  &gt; 0 , by running the cascade process multiple times with the same seed set and taking an average over the influences achieved in all the runs. Using Hoeffding X  X  inequality, we can prove that with O n 2  X  2 lg n runs, we can get within a (1  X   X  ) factor of the exact influence, with high probability 6 .

Mossel et al. [12] proved that the  X  -approximate influ-ences  X  I ( S ) obtained by sampling oracles are also sub-modular. Further, Calinescu et. al. ( [18], Appendix A) analyze the approximate oracle for a p -system and prove that the (slightly modified) greedy hill climbing algorithm gives an approximation factor of (1  X   X  ) / ( p + 1  X   X  ) . Hence with  X  -approximate influence oracle, we get the following lemma.
Lemma 6.2: Given  X  -approximate influence oracle, we can find the seeds for the t -IM problem with total influence at least 1 / 3  X   X  times the optimum.
 C. Variations to the t -IM Problem We now discuss a few extensions to the t -IM problem. So far we have assumed and built techniques for the case when the user X  X  adaptation for a product follows a hard threshold, i.e. he stops responding to influences after a certain number of seed messages (the  X  value). However, in reality, the reaction of a user to the increasing number of seed messages happens in stages; he might gradually become less influenced by the messages (and then might ultimately stop responding). We now consider some of these scenarios where a user X  X  influence decreases gradually over number of messages received.

We model this by making the influence probabilities as a (decreasing) function p uv ( m u ) of the number of products ( m u ) for which node u has been chosen as a seed. As discussed in Section II-B, this decreased influence can affe ct either cascades of all products or only subsequent products . Due to lack of space, we consider only the former case, however, an argument very similar to the following applies to the latter as well 7 . When a node u is selected as a seed for product  X  i , the overall influence values of all the products for which u was chosen as seed a previously decrease, as the value of influences from u to all other nodes ( p u  X  ) has decreased. As a consequence, the influence due to the seed set S selected so far also decreases (or is non-increasing). Observe that in the t -IM problem, the influence to other product do not change as p u  X  remains unchanged.
This implies that the influence function I ( S ) , while still sub-modular, might now be non-monotone; adding a node as a seed might now decrease the overall influence. In a recent study, Lee et al. [19] provided an efficient 2-factor approximation algorithm (also based on greedy selection) t o maximize non-monotone sub-modular functions over Ma-troid constraints. Since our influence function is also sub-modular, we can directly apply their result to also get a 2-factor approximation.
 A. Dataset Description and Influences
We evaluated our techniques extensively on social graph traces collected from Orkut, Flickr and Twitter social net-works.

Orkut: Our entire Orkut dataset [10] consists of about 3 million nodes and 24 million edges. Since the dataset did not furnish any more information other than the friendships -links, we had to generate the influence probabilities p uv randomly. Following [6], we assume that they follow a power-law distribution for social graphs like ours.
Flickr: This dataset [10] consists of around 2 . 5 million users, 12 million friendship links and about 13 . 8 million pic-tures. The dataset contains the friendship information amo ng users along with the time when any user marked a picture as  X  X avorite X . We computed the influence probabilities as follows. For two friends u and v , if u marks a picture p as a favorite followed by v marking the same photo as a favorite, we count it as an instance of u  X  X  influence on v . We define the number of instances of such influence, divided by the total number of pictures marked by u as favorite as the the influence probability ( p uv ) of u on v .

Twitter: We extracted this dataset by crawling twit-ter.com 8 . It contains about 1 . 5 million tweets from roughly 40 thousand users. To compute the influence ( p uv ), we count the number of tweets a user v posts that are similar to what his friend (or a user that he follows ) u posted earlier. We now define a measure of similarity (sim ( t u , t v ) ) between tweets t u and t v posted by u and v respectively. If both t u and t v contain urls, and if the urls match then we assign sim ( t u , t v ) = 1 , otherwise the it is 0 . Else, we extract the named entities (proper nouns, name of people, places, ob-jects, etc.) 9 N ( t u ) and N ( t v ) using the Stanford Named En-tity Recognizer (NER) The similarity is now defined as the We now assign p uv as the fraction of the number of instances where sim ( t u , t v ) is more than a threshold.
Further, we fixed all the node constraints (  X  ) to a small constant, 3, for all the experiments. In the experiments, we choose the same number of seeds k i = k for each product, and used the values t = 20 and k = 100 , unless specified otherwise. We implemented a sampling oracle that averages over 100 runs of the influence cascade. Our experiements show (results omitted) that this oracle predicts influence w ith an error of less than 2% in practice.
 B. Comparison among the Algorithms We compare both of our algorithms (G REEDY and F AIR -G
REEDY ) with a number of baseline algorithms. The algo-rithm RANDOM selects the seeds randomly from the graph, while MAXDEG takes the highest degree nodes as the seeds. Further, 1-LEVEL computes the expected influence of each node on it X  X  immediate neighbors and chooses the nodes with the highest value of this 1-level influence. Figure 3 draws the comparison among their resulting per product influences , for different number of seeds per products (by varying k in the range [50 , 300] ).

Clearly, both the G REEDY and the F AIR G REEDY out-perform other techniques across all datasets, showing thei r effectiveness. Comparing with MAXDEG, which is the best among baseline algorithms, G REEDY is roughly 30% more on Flickr and Twitter datasets. Observe that since the p uv values are generated randomly in Orkut, it is highly suited towards MAXDEG (as highest degree nodes are expected to also have highest influences); G REEDY still beats MAXDEG by about 10% . Since MAXDEG has no knowledge about the influence value, we also compared with the 1-LEVEL heuristic that chooses the nodes with the highest influence t o its immediate neighbors. Interestingly, even this heurist ic can do no better (even worse in many cases) than MAXDEG. We also tried (results not shown) a similar heuristic that uses influence estimates ( I ( ) ) of nodes instead of 1-level influence, but the results were very similar to 1-LEVEL.
We would also like to point out the behavior of G REEDY with different values of k . As expected, the overall influence increases with k , and follows a roughly linear increasing trend. We next varied the value of t in the range [20 , 140] while keeping k fixed. We show the resulting influences per product in Figure 4, for two different values of k . Due to the node constraints, all the products compete for the influenti al seeds, and so we expect that the average influence would come down with increasing the number of products. We see that for k = 200 , influence per product decreases only by 20% as we try to market 7 times more product, across the larger (Orkut and Flickr) datasets. This is a good news from the marketing company X  X  perspective; they don X  X  lose much by marketing more products at the same time.
 C. Fairness
We now study the difference in influences of different products for G REEDY and F AIR G REEDY algorithm. As we have the same number of seeds for each product, to be fair it is necessary that the ratio of maximum and minimum influences of products should be low; 1 in the most fair case when all products get the same influence. In Figure 5, we plot the ratio of max. and min. influence for different values of t . The results show that F AIR G REEDY algorithm performs consistently better than the G REEDY algorithm on all the graphs. Moreover, as the number of products increase, the F
AIR G REEDY algorithm still manages to keep the ratio close to 1 , while the plot for G REEDY shows a distinct increasing trend. We also observed that (data not shown) even the overall influence of the two techniques are quite close for all values of t , similar to the results shown in Figure 3. Hence the F AIR G REEDY always gives almost identical total influence, but also ensures fairness among products.
We now study the fairness of G REEDY and F AIR G REEDY algorithms when products have different seed requirements . We randomly generate seed requirements from the interval [20,60] and assign them randomly to the products and report the average fairness. Figure 6 shows the result of this experiment on the the Flickr and Twitter data set. In the figure, value i on the x-axis implies that the number of distinct seed requirements of products is equal to t/ 2 i , and the y-axis shows the average fairness (ratio of max. and min. influences of products with same seed requirement) over all the values of distinct seed requirements. As can be seen from the plot, F AIR G REEDY achieves ratio close to 1.0 for both the data sets whereas, the G REEDY exhibits a steady decline in performance, as the number of distinct seeds are required . D. Scalability
We next study the performance of algorithms with datasets of different sizes. To generate the datasets, we split the Or kut graph into smaller subgraphs of various sizes 10 . We show the variation of running times for both F AIR G REEDY and G
REEDY by increasing the the number of nodes in the graph in Figure 7. We observe that both of our algorithms scale well with input size, and can mine large real life graphs in reasonable time (e.g. it takes about 50 minutes to run on the 1 million node graph).

In this paper we have presented the influence maximiza-tion problem for t non-competing products. We observe that parallel to maximizing influence, the issue of avoiding spamming users is a key while marketing multiple products. Our G REEDY algorithm generalizes the greedy hill climbing technique to the multiple product case, and gives a 1 / 3 -approximation to the t -IM problem. The F AIR G REEDY gives a more fair allocation of seeds to the products while still giving high overall influence. We also extend our results to the case when approximate oracle or product information is known. Our experiments with real life datasets show that these techniques are both scalable and out-perform naive strategies by a huge margin.

