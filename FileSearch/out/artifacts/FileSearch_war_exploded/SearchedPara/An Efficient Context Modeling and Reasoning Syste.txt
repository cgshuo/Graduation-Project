 Invisibility is a key requirement of pervasive computing. To achieve it, applications in pervasive environment have to adapt their behaviors to the context, which is defined characteristics of pervasive computing. 
In pervasive computing community, much work focuses on context modeling and reasoning, which deal with high-level abstraction and inference of pervasive contextual information. Several prototype systems have been proposed [2] [4], but most of the systems take all available contextual information as the input without classification. The amount of the contextual information is so huge that these systems are inefficient, even useless. 
In this paper, an attribute-base context filtering technology (ACMR) is proposed to improve the performance of contextual information processing. We argue that a specific application do not care about all contextual information. It X  X  necessary to design a mechanism to evaluate the contextual information. In ACMR, two metrics, recorded by context sources. Different app lications may have various requirements on the absolute attributes of the contextual information. E.g., a dynamic map loading information reflects the relevance between the contextual information and context-aware application. An applic ation are not concerned about every piece of context. For example, Tom X  X  mobile phone only cares about the contextual information of Tom designed in ACMR. These filters discard th e contextual information whose absolute or relative attributes does not reach the applications X  requirements and reduce the overhead of the context reasoner. Additionally, to encourage the reuse and standardization, contexts ontology TORA is developed to model the contexts and their absolute attributes in the pervasive environment. Experiments demonstrate such reduction of the input greatly improves the performance of the context processing system.  X  X he rest of the paper is organized as follows. The Section 2 compares the ACMR with the related works and TORA is introduced in the Section 3. Section 4 depicts the overview and main data structures of ACMR respectively. Section 5 presents the detail of the attribute-based filtering technology. We evaluate the performance in Section 6 and the conclusion is drawn in Section 7. X  There are several context modeling and reasoning systems. X.H.Wang [2] [3] proposed ontology-based context modeling and reasoning. Anand [4] use probabilistic environment, which is also on basis of ontology. However, these works only focus on how to get high-level contexts from raw contexts. They did not care about how to consume the high-level contexts. Moreover, in their reasoning mechanism, all raw applications. Such solutions may impose high overhead on the system. 
Our previous work has proposed the AOCF [7] technology to deal this problem. It adopts Concerned Value algorithm to analyze the relevance between the applications information, while we consider the absolute attributes are also important in this paper. T. Buchholz [9] has proposed the term  X  X OC X  to represent the absolute attributes of contexts. K. Henricksen [10] address absolute attributes of contexts through tagging quality parameters to associations between entities and attributes. However, these works only address the modeling of the absolute attributes and they don X  X  give a concrete method to analyze and utilize them. As aforementioned, in ACMR system, to encourage the reuse and standardization of contextual information, we define cont ext ontology TORA using OWL [11] (Web Ontology language), which is developed as a vocabulary extension of RDF (the Resource Description Framework) and is derived from the DAML+OIL Web Ontology Language. According to Schilit [8], contexts in pervasive computing can be divided into three categories: user contex t, computing entity context and physical context. Corresponding to the above three categories respectively, we define three OWL classes, which form the skeleton of TORA. All other classes are sub-class of them. Fig.1 shows a part of TORA. In realistic pervasive computing environments, there are special concepts in each domain. For simplicity, we adopt first order to represent the contextual information in TORA, that is, each piece of contextual information has a subject, a predicate and an object. 
Comparing to previous context ontologies [2][3][4], TORA takes absolute attributes of contextual information into account. As shown in Fig.1, all contextual information may have two absolute attributes, age and accuracy. The age indicates the time that since the generation of the contextual information. Since the contextual information may change over time, that a piece of context is sensed earlier means its reliability is lower. In general, age will be specified by adding a time-stamp to context information. Thus, clock synchronization between the context source and the context consumer is needed. Accuracy denotes the probability of that a piece of context is correct. Some of the context providers are unreliable sensors, which may provide the wrong contextual information. These context providers may estimate the accuracy of the contextual information they provide. 
Each subcategory of TORA and domain ontology can define the absolute attributes if need. For example, in military domain, there may be some fake contextual information provided by enemies. So it X  X  necessary to mark the trust-worthiness of the contextual information in military domain. Since the contextual information in the physical subcategory characterizes the situation of physical entities, it is reasonable to mark precision in such contexts, e.g., the precision of temporal contexts is 1 millisecond. 4.1 Architecture Similar to our previous work [7], the ACMR system consists of 5 components: context reasoner, context knowledge base (CKB), context modeler, context filter and context-aware applications (Fig. 2). The context modeler is the interface between environmental devices and the ACMR system. After receiving contexts from heterogeneous context sources, the context modeler uses TORA to mark thes e contexts as well as their absolute pm, the context modeler marks this context as Fig.3: 
The context knowledge base (CKB) stores the TORA and provides interfaces to context reasoner and context filter. For simplicity, in the following illustration we import the term  X  X riple X  from RDF graph [5] to abstract the OWL contextual instances in CKB. E.g. the context in Fig.3 can be abstracted as &lt;Tom locatedIn RoomA (timestamp:200503081000)&gt;. 
The context reasoner infers high-level contexts from raw contexts using defined rule set. The context-aware applications consume the high-level contexts output from the high-level contexts. The rule set and the policy set can be used as the basis of the attribute-based filtering technology, which will be introduced in Section 6. application can propose requirements on the absolute attributes of the contexts. If some contexts cannot reach the requirements, they may be discarded by absolute filter without processing. The relative filter analyzes the relevance between applications and contexts to discard the contexts th at are not related to applications. 4.2 Main Data Structures Prior to describing the data structures in ACMR, we assume a scenario of Tom X  X  mobile phone, which is smart enough to adap t to the user X  X  contexts. For example, if watching TV, the volume will be turned up. 
As mentioned in the previous section, rule set and policy set are two important data structures in the attribute-base filtering technology. The rule set is predefined knowledge that is stored in the context reasoner. Its syntax is shown in Fig.4. triples in policy engine and the CKB are instance-based. The difference between class-based triples and instance-based triples is that the elements of the former Person, not a specific instance. 
As shown in the Fig.2, each application contains a policy set , which help the application to choose the suitable reaction to the environment contexts. The elements of the policy set are pieces of policy. The syntax of the policy is similar with that of the rule in rule set. There are two differences between them: 1.The conclusion (right side of deducing sign  X =&gt; X ) of policy is not triple but the action to be adopted; 2. The condition (triple in the left side of  X =&gt; X ) of policy is instance-based. Partial policy set of Tom X  X  mobile phone is shown in Fig.5. Note that each piece of policy is associated with an absolute attribute requirements list (AARL). This list shows in what situation the corresponding policy is valid. It is reason able that different policies are associated with different AARL. Take the age attribute for example, some activities are static and some are dynamic. So policies about the dynamic activities require the contexts updated in higher rate. In the following example, watching TV is regarded as the more dynamic activity than sleeping. So the policy about the former limits the contexts should be collected no more than 120 seconds ago, while the limitation of the policy about the later is 600 seconds. 
The context filter maintains two important tables for each application: concerned value (CV) table and absolute filtering (AF) table . Concerned Values, ranging from 0 to 1, map applications to contextual in stances. Higher CV denotes the contextual instance is more useful for the application. An example CV table is shown in Tab.1. (R,C). 
Note that the CV tables record the app lications X  concerned value about an instance (the first column of each row) not a contex t triple. There are 3 columns in each table: subject, predicate and object, which corres pond to the three parts of RDF triple respectively. If an instance appears in the different part of a context triple, the application X  X  CV about it may be different. In above example, the first row means the AppA X  X  CV about instance WashroomA is 0.05, only if WashroomA is the object of a context. The AppA are not concerned about WashroomA if it is subject or predicate of a context. Similarly, the second row means the AppA X  X  CVs about instance Tom are 0.07 or 0.03, if Tom is subject or object of a context respectively. The application X  CVs about unlisted contexts instance are 0. In Section 4 we will presents how can we get and use the CVs. 
AF table records the application X  X  requirements on the absolute attributes of contexts. The format is shown in Tab.2. The left column is the specific context triple and the right one is the application X  X  requirements list of the contexts. The main idea of the Attribute-base filtering follows two principles: (1) If a specific application is concerned about a given context, this context or the high-level contexts deduced from it are likely to exist in the policy set of the application. (2) The applications X  requirements on the raw contexts is the same as those on the high-level contexts deduced from them. Based on these two principles, the CV table and AF table can be derived by the policy set and rule set. The attribute-base filtering 2.Filtering contexts. 5.1 Creating CV Table and AF Table Now we will introduce this process step by step: Step 0: Initialization. The first job in this process is creating a temporary data structure back tracing tree (BTT). The root of the BTT is set as  X  X olicy set X  and then the triples in the condition part of policy set are inserted into the BTT as the children triple (say T) in BTT  X  X atches X  a triple (say R) in the conclusion of a rule, the triples the triples in the BTT is instance-based, while those in the rule set are class-based. So, and  X ?u X  are both Person and  X  X om X  is a instance of  X ?u X . The final BTT of Tom X  X  phone is shown in Fig. 6. Step 1: Creating CV Table. After creating the BTT, each triple is assigned a CV from top to bottom. The CV of root node is 1. For simplicity, the policies in the policy set future work, we will improve this mechanism by analyzing the importance of a policy. So the CVs of the rest nodes are assigned according to formula 1: corresponding triple. 
As aforementioned, the triples in BBT are composed of three instances, which are subject, predicate and object respectively. We firstly transform the triples of BBT into Instance-CV triple (instance, part, CV (instance, part)), while the part refers to subject, predicate or object. The CV (instance, part) is assigned as CV (triple) /3. For triples: (Tom, subject, 0.083), (locatedIn, predicate, 0. 083), and (Bed, object, 0.083). For each Instance-CV triple (I, P, C), the C is added to the Entry (I, P). After above operations, the CV table of Tom X  X  mobile phone is established. We give partial CV table of Tom X  X  mobile phone in Tab.2 nodes of the root in BTT. Since these triples are the condition part of policy set, they are assigned the AARL associated with the corresponding policies. As the aforementioned principle, the application X  X  requirements on the raw contexts is the same as those on the high-level contexts deduced from them. Base on this principle, the rest triple nodes inherit the AARL of their parent nodes. By finishing this assignment, the triple in the BTT is inserted into the left column of AF table and their corresponding AARL is inserted into the right column. If more than one nodes are marked as the same triple and they have different requirements on the same absolute attribute, we choose the most relax one to make sure high successful rate of reasoning. For example, there are two nodes marked  X &lt;Tom locatedIn LivingRoom&gt; X . If their AARLs declaim  X  X ge &lt;=200 seconds X  and  X  Age &lt;=600 attribute of this triple. The final AF table is shown in Tab.3. Step 3: Absolute Filtering. As raw contexts were sent from the CKB to the context context cannot reach the requirement, this context will be discard. Step 4: Relative Filtering. If a raw context passes absolute filter, its CV is computed by formula (2) firstly. CV (&lt;S, P, O&gt;) = Entry (S, Subject) + Entry (P, Predicate) + Entry (O, Object) (2) and discarded. However, the K has to be chosen properly. An overly large K leads to loss of useful contexts, while too small K compromise the efficiency of the context filter. This problem will be discussed in the next section. 
Because the context filter discards some contexts, it is possible that the context reasoner cannot infer the right high-level contex t successfully. In this case, to keep the system available, the context filter is temporarily shut down and all contexts are sent to the context reasoner. In this section, we will give the results of our prototype experiment. The context reasoner is built based on Jena 2 Semantic Web Toolkit [6], which supports rule-based inference over OWL/RDF graphs. The experiment is run on the Windows 2000 operating system with the P4-2.4GHZ CPU and 256M main memory. To present the ACMR X  X  improvement on the performance, we compare the ACMR with CONON [2] [3], which is an ontology-based context reasoning mechanism without context filter technology. This mechanism is called as CONON because it is used to name the ontology they develop. In our experiments, we continue to use the scenario of Tom X  X  mobile phone and develop 205 OWL classes for it. To demonstrate the ACMR X  X  good performance in case of overwhelming contexts, we simulate a large raw context sets ranging from 500 to 7000 RDF triples in the CKB. The value K in ACMR is set as 0.35 and two systems use the same amount of rules. Fig. 8 shows the comparison between these two systems. 
In this figure we can see while the number of raw context triples increase, the advantage of ACMR over CONON becomes larger and larger. It is easily to be explained in theory. Because of the high change rate of contextual information, the bottleneck of the performance in ACMR system is in the context reasoner. As the proportion of useful contextual information is static, the more context triples are sent to the context filter, the more trashy contexts are discarded and the shorter the response time is. In this paper, we present the ACMR, an efficient context modeling and reasoning systems, in which the context ontology TORA is developed to model the contexts and their absolute attributes. Attribute-base context filtering technology is proposed and upgrades the performance of ACMR. In our future work, some improvements are needed in this system, such as analyzing the importance of the rules and policies. However, the experiment shows the good performance of the ACMR system. 
