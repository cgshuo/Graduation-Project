 The event extraction task in ACE (Automatic Con-tent Extraction) evaluation involves three challeng-ing issues: distinguishing events of different types, finding the participants of an event and determin-ing the roles of the participants. 
The recent researches on the task show the availability of transductive inference, such as that of the following methods: cross-document, cross-sentence and cross-event inferences. Transductive inference is a process to use the known instances to predict the attributes of unknown instances. As an example, given a target event, the cross-event in-ference can predict its type by well using the re-lated events co-occurred w ith it within the same document. From the sentence: (1)He left the company. ACE, which means that he left the place; or an End-Position event, which means that he retired from the company. But cr oss-event inference can use a related event  X  Then he went shopping  X  within the same document to identify it as a Transport event correctly. 
As the above example might suggest, the avail-ability of transductive inference for event extrac-tion relies heavily on the known evidences of an event occurrence in speci fic condition. However, the evidence supporting the inference is normally unclear or absent. For instance, the relation among events is the key clue for cross-event inference to predict a target event type, as shown in the infer-ence process of the sentence (1). But event relation extraction itself is a hard task in Information Ex-traction. So cross-event inference often suffers from some false evidence (viz., misleading by un-related events) or lack of valid evidence (viz., un-successfully extracting related events). 
In this paper, we propose a new method of transductive inference, named cross-entity infer-ence, for event extraction by well using the rela-tions among entities. This method is firstly motivated by the inherent ability of entity types in revealing event types. From the sentences: (2)He left the bathroom . (3)He left Microsoft . it is easy to identify the sentence (2) as a Transport event in ACE, which means that he left the place, because nobody would retire ( End-Position type) from a bathroom. And compared to the entities in sentence (1) and (2), the entity  X  Microsoft  X  in (3) would give us more confidence to tag the  X  left  X  event as an End-Position type, because people are used to giving the full name of the place where they retired. 
The cross-entity inference is also motivated by the phenomenon that the entities of the same type often attend similar events. That gives us a way to predict event type based on entity-type consistency. From the sentence: (4) Obama beats McCain. it is hard to identify it as an Elect event in ACE, which means Obama wins the Presidential Election, or an Attack event, which means Obama roughs somebody up. But if we have the priori knowledge that the sentence  X  Bush beats McCain  X  is an Elect event, and  X  Obama  X  was a presidential contender just like  X  Bush  X  (strict type consistency), we have ample evidence to predict that the sentence (4) is also an Elect event. 
Indeed above cross-entity inference for event-type identification is not the only use of entity-type consistency. As we shall describe below, we can make use of it at all issues of event extraction: y For event type : the entities of the same type are most likely to attend similar events. And the events often use consistent or synonymous trigger. y For event argument (participant) : the enti-ties of the same type normally co-occur with simi-lar participants in the events of the same type. y For argument role : the arguments of the same type, for the most part, play the same roles in similar events. 
With the help of above characteristics of entity, we can perform a step-by-step inference in this order: y Step 1 : predicting event type and labeling trigger given the entities of the same type. y Step 2 : identifying arguments in certain event given priori entity type, event type and trigger that obtained by step 1. y Step 3 : determining argument roles in certain event given entity type, event type, trigger and ar-guments that obtained by step 1 and step 2. 
On the basis, we give a blind cross-entity infer-ence method for event extraction in this paper. In the method, we first regard entities as queries to retrieve their related doc uments from large-scale language resources, and use the global evidences of the documents to generate entity-type descrip-tions. Second we determine the type consistency of entities by measuring the similarity of the type de-scriptions. Finally, given the priori attributes of events in the training data, with the help of the en-tities of the same type, we perform the step-by-step cross-entity inference on the attributes of test events (candidate sentences). 
In contrast to other transductive inference meth-ods on event extraction, the cross-entity inference makes every effort to strengthen effects of entities in predicting event occurrences. Thus the inferen-tial process can benefit from following aspects: 1) less false evidence, viz. less false entity-type con-sistency (the key clue of cross-entity inference), because the consistency can be more precisely de-termined with the help of fully entity-type descrip-tion that obtained based on the related information from Web; 2) more valid evidence, viz. more enti-ties of the same type (the key references for the inference), because any entity never lack its con-geners. The event extraction task we addressing is that of the Automatic Content Extraction (ACE) evalua-tions, where an event is defined as a specific occur-rence involving participants. And event extraction task requires that certain specified types of events that are mentioned in the source language data be detected. We first introduce some ACE terminol-ogy to understand this task more easily: y Entity : an object or a set of objects in one of the semantic categories of interest, referred to in the document by one or more (co-referential) entity mentions. y Entity mention : a reference to an entity (typi-cally, a noun phrase). y Event trigger : the main word that most clear-ly expresses an event occurrence (An ACE event trigger is generally a verb or a noun). y Event arguments : the entity mentions that are involved in an event (viz., participants). y Argument roles : the relation of arguments to the event where they participate. y Event mention : a phrase or sentence within which an event is describ ed, including trigger and arguments. 
The 2005 ACE evaluation had 8 types of events, with 33 subtypes; for the purpose of this paper, we will treat these simply as 33 separate event types and do not consider the hierarchical structure among them. Besides, the ACE evaluation plan defines the following standards to determine the correctness of an event extraction: y A trigger is correctly labeled if its event type and offset (viz., the position of the trigger word in text) match a reference trigger. y An argument is correctly identified if its event type and offsets match any of the reference argu-ment mentions, in other word, correctly recogniz-ing participants in an event. y An argument is correctly classified if its role matches any of the reference argument mentions. 
Consider the sentence: (5) It has refused in the last five years to revoke the license of a single doctor for committing medi-cal errors . 1 The event extractor should detect an End-Position event mention, along with the trigger word  X  revoke  X , the position  X  doctor  X , the person whose license should be revoked, and the time dur-ing which the event happened: 
It is noteworthy that event extraction depends on previous phases like name identification, entity mention co-reference and classification. Thereinto, the name identification is another hard task in ACE evaluation and not the focus in this paper. So we skip the phase and instead directly use the entity labels provided by ACE. Almost all the current ACE event extraction sys-tems focus on processing one sentence at a time (Grishman et al., 2005; Ahn, 2006; Hardyet al. 2006). However, there have been several studies using high-level information from a wider scope: 
Maslennikov and Chua (2007) use discourse trees and local syntactic dependencies in a pattern-based framework to incorporate wider context to refine the performance of relation extraction. They claimed that discourse information could filter noi-sy dependency paths as well as increasing the reli-ability of dependency path extraction. 
Finkel et al. (2005) used Gibbs sampling, a sim-ple Monte Carlo method used to perform approxi-mate inference in factored probabilistic models. By using simulated annealing in place of Viterbi de-coding in sequence models such as HMMs, CMMs, and CRFs, it is possible to incorporate non-local structure while preserving tractable inference. They used this technique to augment an informa-tion extraction system with long-distance depend-ency models, enforcing label consistency and extraction template consistency constraints. 
Ji and Grishman (2008) were inspired from the hypothesis of  X  X ne Sense Per Discourse X  (Ya-rowsky, 1995); they extended the scope from a single document to a cluster of topic-related docu-ments and employed a rule-based approach to propagate consistent trigger classification and event arguments across sentences and documents. Combining global evidence from related docu-ments with local decisions, they obtained an appre-ciable improvement in both event and event argument identification. 
Patwardhan and Riloff (2009) proposed an event extraction model which consists of two compo-nents: a model for sentential event recognition, which offers a probabilistic assessment of whether a sentence is discussing a domain-relevant event; and a model for recognizing plausible role fillers, which identifies phrases as role fillers based upon the assumption that the surrounding context is dis-cussing a relevant event. This unified probabilistic model allows the two components to jointly make decisions based upon both the local evidence sur-rounding each phrase and the  X  X eripheral vision X . 
Gupta and Ji (2009) used cross-event informa-tion within ACE extraction, but only for recovering implicit time information for events. 
Liao and Grishman (2010) propose document level cross-event inference to improve event ex-traction. In contrast to Gupta X  X  work, Liao do not limit themselves to time information for events, but rather use related events and event-type consis-tency to make predictions or resolve ambiguities regarding a given event. In event extraction, current transductive inference methods focus on the issue that many events are missing or spuriously tagged because the local in-formation is not sufficient to make a confident de-cision. The solution is to mine credible evidences of event occurrences from global information and regard that as priori knowledge to predict unknown event attributes, such as that of cross-document and cross-event inference methods. 
However, by analyzing the sentence-level base-line event extraction, we found that the entities within a sentence, as the most important local in-formation, actually contain sufficient clues for event detection. It is only based on the premise that we know the backgrounds of the entities before-hand. For instance, if we knew the entity  X  vesu-vius  X  is an active volcano, we could easily identify the word  X  erupt  X , which co-occurred with the en-tity, as the trigger of a  X  volcanic eruption  X  event but not that of a  X  spotty rash  X . 
In spite of that, it is actually difficult to use an entity to directly infer an event occurrence because we normally don X  X  know the inevitable connection between the background of the entity and the event attributes. But we can well use the entities of the same background to perform the inference. In de-tail, if we first know entity(a) has the same back-ground with entity(b) , and we also know that entity(a) , as a certain role, participates in a specific event, then we can predict that entity(b) might par-ticiptes in a similar event as the same role. 
Consider the two sentences 2 from ACE corpus: (5) American case for war against Saddam . (6) Bush should torture the al Qaeda chief op-erations officer . 
The sentences are two event mentions which have the same attributes: 
From the sentences, we can find that the entities  X  Saddam  X  and  X  Qaeda chief  X  have the same back-ground (viz., terrorist leader), and they are both the arguments of Attack events as the role of Target . So if we previously know any of the event men-tions, we can infer another one with the help of the entities of the same background. 
In a word, the cross-enti ty inference, we pro-posed for event extraction, bases on the hypothesis: 
Entities of the consistent type normally partici-pate in similar events as the same role .

As we will introduce below, some statistical da-ta from ACE training corpus can support the hy-pothesis, which show the consistency of event type and role in event mentions where entities of the same type occur. 4.1 Entity Consistency and Distribution 
Within the ACE corpus, there is a strong entity consistency: if one entity mention appears in a type of event, other entity mentions of the same type will appear in similar events, and even use the same word to trigger the events. To see this we calculated the conditional probability (in the ACE corpus) of a certain entity type appearing in the 33 ACE event subtypes. Figure 1. Conditional probability of a certain entity type appearing in the 33 ACE event subtypes (Here only the probabilities of Population-Center , Ex-
Figure 2. Conditional probability of an entity type appearing as the 34 ACE role types (Here only the probabilities of Population-Center , Exploding and 
As there are 33 event subtypes and 43 entity types, there are potentially 33*43=1419 entity-event combinations. However, only a few of these appear with substantial frequency. For example, the Population-Center entities only occur in 4 types of event mentions with the conditional prob-ability more than 0.05. From Table 3, we can find that only Attack and Transport events co-occur frequently with Population-Center entities (see Figure 1 and Table 3). Table 3: Events co-occurring with Population-Center with the conditional probability &gt; 0.05 
Actually we find that most entity types appear in more restricted event mentions than Population-Center entity. For example, Air entity only co-occurs with 5 event types ( Attack , Transport , Die , Transfer-Ownership and Injure ), and Exploding entity co-occurs with 4 ev ent types (see Figure 1). Especially, they only co -occur with one or two event types with the conditional probability more than 0.05. Table 4: Distribution of entity-event combination corresponding to different co-occurrence frequency 
Table 4 gives the distributions of whole ACE entity types co-occurring with event types. We can find that there are 37 types of entities (out of 43 in total) appearing in less than 5 types of event men-tions when entity-event co-occurrence frequency is larger than 10, and only 2 (e.g. Individual ) appear-ing in more than 10 event types. And when the fre-quency is larger than 50, there are 41 (95%) entity types co-occurring with less than 5 event types. These distributions show the fact that most in-stances of a certain entity type normally participate in events of the same type. And the distributions might be good predictors for event type detection and trigger determination. Table 5: Event types co-occurred with Air entities 
Besides, an ACE entity type actually can be di-vided into more cohesive subtypes according to similarity of background of entity, and such a sub-type nearly always co -occur with unique event type. For example, the Air entities can be roughly divided into 4 subtypes: Fighter plane , Spacecraft , Civil aviation and Private plane , within which the Fighter plane entities all appear in Attack event mentions, and other three subtypes all co-occur with Transport events (see Table 5). This consis-tency of entities in a subtype is helpful to improve the precision of the event type predictor. 4.2 Role Consistency and Distribution 
The same thing happens for entity-role combina-tions: entities of the same type normally play the same role, especially in the event mentions of the same type. For example, the Population-Center entities occur in ACE corpus as only 4 role types: Place , Destination , Origin and Entity respectively with conditional probability 0.615, 0.289, 0.093, 0.002 (see Figure 2). And They mainly appear in Transport event mentions as Place , and in Attack as Destination . Particularly the Exploding entities only occur as Instrument and Artifact respectively with the probability 0.986 and 0.014. They almost entirely appear in Attack events as Instrument . 
Table 6: Distribution of entity-role combination corresponding to different co-occurrence frequency 
Table 6 gives the distributions of whole entity-role combinations in ACE corpus. We can find that there are 38 entity types (out of 43 in total) occur as less than 5 role types when the entity-role co-occurrence frequency is larger than 10. There are 42 (98%) when the frequency is larger than 50, and only 2 (e.g. Individual ) when larger than 10. The distributions show that th e instances of an entity type normally occur as consistent role, which is helpful for cross-entity inference to predict roles. In this section we present our approach to using blind cross-entity inference to improve sentence-level ACE event extraction. 
Our event extraction system extracts events in-dependently for each sente nce, because the defini-tion of event mention constrains them to appear in the same sentence. Every sentence that at least in-volves one entity mention will be regarded as a candidate event mention, and a randomly selected entity mention from the candidate will be the star-ing of the whole extraction process. For the entity mention, information retrie val is used to mine its background knowledge from Web, and its type is determined by comparing the knowledge with those in training corpus. Based on the entity type, the extraction system performs our step-by-step cross-entity inference to predict the attributes of the candidate event mention: trigger, event type, arguments, roles and whether or not being an event mention. The main frame of our event extraction system is shown in Figure 3, which includes both training and testing processes. 
In the training process, for every entity type in the ACE training corpus, a clustering technique (CLUTO toolkit) 3 is used to divide it into different cohesive subtypes, each of which only contains the entities of the same background. For instance, the Air entities will be divided into Fighter plane , Spacecraft , Civil aviation , Private plane , etc (see Table 5). And for each subtype, we mine event mentions where this type of entities appear from ACE training corpus, and extract all the words which trigger the events to establish corresponding trigger list. Besides, a set of support vector ma-chine (SVM) based classifiers are also trained: y Argument Classifier: to distinguish arguments of a potential trigger from non-arguments 4 ; y Role Classifier: to classify arguments by ar-gument role; y Reportable-Event Classifier (Trigger Classi-fier): Given entity types, a potential trigger, an event type, and a set of arguments, to determine whether there is a reportable event mention. 
In the test process, for each candidate event mention, our event extraction system firstly pre-dicts its triggers and event types: given an ran-domly selected entity mention from the candidate, the system determines the entity subtype it belong-ing to and the corresponding trigger list, and then all non-entity words in the candidate are scanned for a instance of triggers from the list. When an instance is found, the system tags the candidate as the event type that the most frequently co-occurs with the entity subtype in the events that triggered by the instance. Secondly the argument classifier is applied to the remaining mentions in the candidate; for any argument passing that classifier, the role classifier is used to assign a role to it. Finally, once all arguments have been assigned, the reportable-event classifier is applied to the candidate; if the result is successful, this event mention is reported. 5.1 Further Division of Entity Type 
One of the most important pretreatments before our blind cross-entity inference is to divide the ACE entity type into more cohesive subtype. The greater consistency among backgrounds of entities in such a subtype might be good to improve the precision of cross-entity inference. 
For each ACE entity type, we collect all entity mentions of the type from training corpus, and re-gard each such mention as a query to retrieve the 50 most relevant documents from Web. Then we select 50 key words that the most weighted by TFIDF in the documents to roughly describe back-ground of entity. After establishing the vector space model (VSM) for each entity mention of the type, we adopt a clustering toolkit (CLUTO) to further divide the mentions into different subtypes. Finally, for each subtype, we describe its centroid by using 100 key words which the most frequently occurred in relevant documents of entities of the subtype. 
In the test process, for an entity mention in a candidate event mention, we determine its type by comparing its background against all centroids of subtypes in training corpus, and the subtype whose centroid has the most Cosine similarity with the background will be assigned to the entity. It is noteworthy that global information from the Web is only used to measure the entity-background con-sistency and not directly in the inference process. Thus our event extraction system actually still per-forms a sentence-level inference based on local information. 5.2 Cross-Entity Inference 
Our event extraction system adopts a step-by-step cross-entity inference to predict event. As dis-cussed above, the first step is to determine the trig-ger in a candidate event mention and tag its event type based on consistency of entity type. Given the domain of event mention that restrained by the known trigger, event type and entity subtype, the second step is to distinguish the most probable ar-guments that co-occurring in the domain from the non-arguments. Then for each of the arguments, the third step can use the co-occurring arguments in the domain as important contexts to predict its role. Finally, the inference process determines whether the candidate is a reportable event men-tion according to a confidence coefficient. In the following sections, we focus on introducing the three classifiers: argument classifier, role classifier and reportable-event classifier. 5.2.1 Cross-Entity Argument Classifier 
For a candidate event mention, the first step gives its event type, which roughly restrains the domain of event mentions where the arguments of the candidate might co-occur. On the basis, given an entity mention in the candidate and its type (see the pretreatment process in section 5.1), the argu-ment classifier could predict whether other entity mentions co-occur with it in such a domain, if yes, all the mentions will be the arguments of the can-didate. In other words, if we know an entity of a certain type participates in some event, we will think of what entities also should participate in the event. For instance, when we know a defendant goes on trial, we can conclude that the judge , law-yer and witness should appear in court . 
Table 7: Features selected for SVM-based cross-
A SVM-based argument classifier is used to de-termine arguments of candidate event mention. Each feature of this classifier is the conjunction of: y The subtype of an entity y The event type we are trying to assign an ar-gument to y A binary indicator of whether this entity sub-type co-occurs with other subtypes in such an event type (There are 266 entity subtypes, and so 266 features for each instance) Some minor features, such as another binary indi-cator of whether arguments co-occur with trigger in the same clause (see Table 7). 5.2.2 Cross-Entity Role Classifier 
For a candidate event mention, the arguments that given by the second step (argument classifier) provide important contextual information for pre-dicting what role the local entity (also one of the arguments) takes on. For instance, when citizens (Arg1) co-occur with terrorist (Arg2), most likely the role of Arg1 is Victim . On the basis, with the help of event type, the prediction might be more precise. For instance, if the Arg1 and Arg2 co-occur in an Attack event mention, we will have more confidence in the Victim role of Arg1. 
Besides, as discussed in section 4, entities of the same type normally take on the same role in simi-lar events, especially when they co-occur with sim-ilar arguments in the events (see Table 2). Therefore, all instances of co-occurrence model {entity subtype, event type, arguments} in training corpus could provide effective evidences for pre-dicting the role of argument in the candidate event mention. Based on this, we trained a SVM-based role classifier which uses following features: y Feature 1 and Feature 2 (see Table 7) y Given the event domain that restrained by the entity and event types, an indicator of what sub-types of arguments appear in the domain. (266 en-tity subtypes make 266 features for each instance) 5.2.3 Reportable-Event Classifier 
At this point, there are still two issues need to be resolved. First, some triggers are common words which often mislead the extraction of candidate event mention, such as  X  it  X ,  X  this  X ,  X  what  X , etc. These words only appear in a few event mentions as trigger, but when they once appear in trigger list, a large quantity of noisy sentences will be regarded as candidates because of their commonness in sen-tences. Second, some arguments might be tagged as more than one role in specific event mentions, but as ACE event guideline, one argument only takes on one role in a sentence. So we need to re-move those with low confidence. 
A confidence coefficient is used to distinguish the correct triggers and roles from wrong ones. The coefficient calculate the frequency of a trigger (or a role) appearing in specific domain of event men-tions and that in whole training corpus, then com-bines them to represent its confidence degree, just like TFIDF algorithm. Thus, the more typical trig-gers (or roles) will be given high confidence. Based on the coefficient, we use a SVM-based classifier to determine the reportable events. Each feature of this classifier is the conjunction of: y An event type (domain of event mentions) y Confidence coefficients of triggers in domain y Confidence coefficients of roles in the domain. We followed Liao (2010) X  X  evaluation and ran-domly select 10 newswire texts from the ACE 2005 training corpus as our development set, which is used for parameter tuning, and then con-duct a blind test on a separate set of 40 ACE 2005 newswire texts. We use the rest of the ACE train-ing corpus (549 documents) as training data for our event extraction system. 
To compare with the re ported work on cross-event inference (Liao, 2 010) and its sentence-level baseline system, we cross-validate our method on 10 separate sets of 40 ACE texts, and report the optimum, worst and mean performances (see Table 8) on the data by using Precision (P), Recall (R) and F-measure (F). In addition, we also report the performance of two human annotators on 40 ACE newswire texts (a random blind test set): one knows the rules of event extraction; the other knows nothing about it. 6.1 Main Results 
From the results presented in Table 8, we can see that using the cross-en tity inference, we can improve the F score of sentence-level event extrac-tion for trigger classification by 8.59%, argument classification by 11.86%, and role classification by 11.9% (mean performance). Compared to the cross-event inference, we gains 2.87% improve-ment for argument classification, and 3.81% for role classification (mean performance). Especially, our worst results also have better performances than cross-event inference. 
Nonetheless, the cross-entity inference has worse F score for trigger determination. As we can see, the low Recall score weaken its F score (see Table 8). Actually, we select the sentence which at least includes one entity mention as candidate event mention, but lots of event mentions in ACE never include any entity mention. Thus we have missed some mentions at the starting of inference process. 
In addition, the annotator who knows the rules of event extraction has a similar performance trend with systems: high for trigger classification, mid-dle for argument classifica tion, and low for role classification (see Table 8). But the annotator who never works in this field obtains a different trend: higher performance for argument classification. This phenomenon might prove that the step-by-step inference is not the only way to predicate event mention because human can determine ar-guments without considering triggers and event types. 6.2 Influence of Clustering on Inference A main part of our blind inference system is the entity-type consistency de tection, which relies heavily on the correctness of entity clustering and similarity measurement. In training, we used CLUTO clustering toolkit to automatically gener-ate different types of entities based on their back-ground-similarities. In testing, we use K-nearest neighbor algorithm to determine entity type. 
Table 9: Noises in subtype 1 of  X  Air  X  entities (The 
We obtained 129 entity subtypes from training set. By randomly inspecting 10 subtypes, we found nearly every subtype in volves no less than 19.2% noises. For example, the subtype 1 of  X  Air  X  in Ta-ble 5 lost the entities of  X  MiGs  X  and  X  enemy planes  X , but involved  X  terrorist  X ,  X  Saddam  X  , etc (See Table 9). Therefore, we manually clustered the subtypes and retry the step-by-step cross-entity inference. The results (denoted as  X  X isible 1 X ) are shown in Table 10, within which, we additionally show the performance of the inference on the rough entity types provided by ACE (denoted as  X  X isible 2 X ), such as the type of  X  Air  X ,  X  Popula-tion-Center  X ,  X  Exploding  X , etc., which normally can be divided into different more cohesive sub-types. And the  X  X lind X  in Table 10 denotes the performances on our subtypes obtained by CLUTO. 
It is surprised that the performances (see Table 10, F-score) on  X  X isible 1 X  entity subtypes are just a little better than  X  X lind X  inference. So it seems that the noises in our blind entity types (CLUTO clusters) don X  X  hurt the inference much. But by re-inspecting the  X  X isible 1 X  subtypes, we found that their granularities are not enough small: the 89 manual entity clusters actually can be divided into more cohesive subtypes. So the improvements of inference on noise-free  X  X isible 1 X  subtypes are partly offset by loss on weakly consistent entities in the subtypes. It can be proved by the poor per-formances on  X  X isible 2 X  subtypes which are much more general than  X  X isible 1 X . Therefore, a rea-sonable clustering method is important in our in-ference process. We propose a blind cross-entity inference method for event extraction, which well uses the consis-tency of entity mention to achieve sentence-level trigger and argument (role) classification. Experi-ments show that the method has better perform-ance than cross-document and cross-event inferences in ACE event extraction. 
The inference presented here only considers the helpfulness of entity types of arguments to role classification. But as a superior feature, contextual roles can provide more ef fective assistance to role determination of local argument. For instance, when an Attack argument appears in a sentence, a Target might be there. So if we firstly identify simple roles, such as the condition that an argu-ment has only a single role, and then use the roles as priori knowledge to classify hard ones, may be able to further improve performance.
 We thank Ruifang He. And we acknowledge the support of the National Natural Science Founda-tion of China under Grant Nos. 61003152, 60970057, 90920004. 
