 The herding algorithm has recently been presented by Welling ( 2009b ) as a computationally attractive al-ternative method for learning in intractable Markov random fields models (MRF). Instead of first estimat-ing the parameters of the MRF by maximum like-lihood / maximum entropy (which requires approxi-mate inference to estimate the gradient of the partition function), and then sampling from the learned MRF to answer queries, herding directly generates pseudo-samples in a deterministic fashion with the property of asymptotically matching the empirical moments of the data (akin to maximum entropy). The herding algo-rithm generates pseudo-samples x t with the following simple recursion: where X is the observation space;  X  is a feature map from X to F , which could be viewed as the vector of sufficient statistics for some exponential family, and  X  is a mean vector to match (the empirical moment vec-tor of the same family). Unlike in frequentist learning of MRFs, the parameter w t never converges to a point in herding and actually follows a  X  X eakly chaotic X  walk ( Welling &amp; Chen , 2010 ).
 The herding updates can be motivated from two dif-ferent perspectives. From the learning perspective , the herding updates can be derived by performing fixed-step-size subgradient ascent on the zero-temperature limit of the annealed likelihood function of the MRF X  called the  X  X ipi function X  by Welling ( 2009b ). From this perspective, herding was later generalized to MRFs with latent variables ( Welling , 2009a ) as well as discriminative MRFs ( Gelfand et al. , 2010 ). From the moment matching perspective, which has been explored more in details by Chen et al. ( 2010 ), the herding updates can be derived as an effective way to choose greedily pseudo-samples x t in order to quickly decrease the moment discrepancy E t . = k  X   X  1 t able regularity conditions, E t decreases as O (1 /t ) for the herding updates X  X his is faster than i.i.d. sampling from the distribution generating  X  (e.g., the train-ing data) which would yield the slower O (1 / This faster rate has been explained by negative auto-correlations amongst the pseudo-samples and was used by Chen et al. ( 2010 ) to sub-select a small collection of representative  X  X uper-samples X  from a much larger set of i.i.d. samples. We make the following contributions:  X  We show that herding as described by Eq. ( 1 ) is equivalent to a specific type of conditional gradi-ent algorithm (a.k.a. Frank-Wolfe algorithm) for the problem of estimating the mean  X  . This provides a novel understanding and another explicit cost func-tion that herding is minimizing.  X  This interpretation yields improvements, for the task of estimating means , with other faster variants of the conditional gradient algorithm, which lead to non-uniform weights , one based on line-search, one based on an active-set algorithm.  X  Based on existing results from convex optimization, we extend and improve the convergence results of herding. In particular, we provide a linear con-vergence rate for the line-search variant in finite-dimensional settings and show how the conditions assumed by Chen et al. ( 2010 ) in fact never hold in the infinite-dimensional setting.  X  We run experiments that show that algorithms which estimate faster the mean than herding gener-ate samples that are not better (and typically worse) than the ones obtained with herding when evaluated in terms of the ability to approximate a sample with large entropy, a property which (if or when satisfied by herding) could be the basis for an interpretation of herding as a learning algorithm ( Welling , 2009b ). We start with a similar setup as Chen et al. ( 2010 ), where herding can be interpreted as a way to approx-imate integrals of functions in a reproducing kernel Hilbert space (RKHS). We consider a set X and a map-ping  X  from X to a RKHS F . Through this mapping, all elements of F may be identified with real func-tions f on X defined by f ( x ) = h f,  X ( x ) i , for x  X  X . We denote by k : ( x, y ) 7 X  k ( x, y ) the associated pos-itive definite kernel. Note that the mapping  X  may be explicit (classically in low-dimensional settings) or implicit X  X here the kernel trick can be used, see Sec-tion 4.3 and Chen et al. ( 2010 ).
 Throughout the paper, we assume that the data is uniformly bounded in feature space, that is, for all x  X  X , k  X ( x ) k 6 R , for some R &gt; 0; this condition is needed for the updates of Eq. ( 1 ) to be well-defined. We denote by M  X  F the marginal polytope ( Wainwright &amp; Jordan , 2008 ; Chen et al. , 2010 ), i.e., the convex-hull of all vectors  X ( x ) for x  X  X . Note that for any f  X  F , we have and that | f ( x ) | = |h f,  X ( x ) i| 6 k f k R for all x  X  X and f  X  F (i.e., all functions with finite norm are bounded).
 Extreme points of the marginal polytope. In all the cases we consider in Section 5 , it turns out that all points of the form  X ( x ), x  X  X are extreme points of M (see an illustration in Figure 1 ). This is indeed always true when k  X ( x ) k is constant for all x  X  X (for example for our infinite-dimensional kernels on [0 , 1] in Section 5.1 ); it is also true if  X ( x ) contains both an injective feature map e  X ( x ) and its self-tensor-product e  X ( x )  X  e  X ( x ), which is the case in the graphical model examples in Section 5.2 .
 Mean element and expectation. We consider a fixed probability distribution p ( x ) over X . Follow-ing Chen et al. ( 2010 ), we denote by  X  the mean ele-ment (see, e.g., Smola et al. , 2007 ): Note that in the learning perspective, p is the empirical distribution on the data and so  X  is the corresponding empirical moment vector to match. To approximate this mean, we consider n points x 1 , . . . , x n  X  X com-bined linearly with positive weights w 1 , . . . , w n that sum to one. These define  X  p , the associated weighted empirical distribution, and  X   X  the approximating mean: For all functions f  X  F , we then have Cauchy-Schwarz inequality, and controlling  X   X   X   X  is enough to control the error in computing the expectation for all f  X  F with finite norm. Note that a random i.i.d. sample from p ( x ) would lead to an expected worst-case error which is less than 4 R  X  n  X  X  classical result based on Rademacher averages (see, e.g. Boucheron et al. , 2005 ). In this paper, we will try to find a good estimate  X   X  of  X  based on a weighted set of points from {  X ( x ) , x  X  X } , generalizing Chen et al. ( 2010 ), and show how this relates to herding. This paper brings together three lines of work, namely the approximation of integrals, herding and convex op-timization. The links between the first two were clearly outlined by Chen et al. ( 2010 ), while the present pa-per provides the novel interpretation of herding as a well-established convex optimization algorithm. 3.1. Quadrature/cubature formulas The evaluation of expectation, or equivalently of in-tegrals, is a classical problem in numerical analysis. When the input space X is a compact subset of R p and p ( x ) is the density of the distribution with re-spect to the Lebesgue measure, then this is equivalent to evaluating the integral formulas are aimed at computing such integrals as a weighted combinations of values of f at certain points, which is exactly the problem we consider in Section 2 . Although a thorough review of quadrature formulas is outside of the scope of this paper, we mention two methods which are related to our approach. First, given a positive definite kernel and a given set of points (typically sampled i.i.d. from a given distribution), the Bayes-Hermite quadrature of O X  X agan ( 1991 ) essen-tially computes an orthogonal projection of  X  onto the affine hull of this set of points. This does not lead to positive quadrature weights, and one may thus replace the affine hull by the convex hull to obtain such non-negative weights, which we do in our experiments in Section 5 .
 Moreover, quasi-Monte Carlo methods consider se-quences of so-called  X  X uasi-random X  quadrature points so that the empirical average approaches the inte-gral. These quasi-random sequences are such that the approximation error goes down as O (1 /n ) (up to logarithmic terms) for functions of bounded vari-ation, as opposed to O (1 / In simulations, we used a Sobol sequence (see, e.g., Morokoff &amp; Caflisch , 1994 ). 3.2. Franke-Wolfe algorithms Given a smooth (twice continuously differentiable) convex function J on a compact convex set M with gradient J  X  , Frank-Wolfe algorithms are a class of it-erative optimization algorithms that only require (in addition to the computation of the gradient J  X  ) to be able to optimize linear functions on M . The first class of such algorithms is often referred to as conditional gradient algorithms: given an iterate g t , the minimum of h J  X  ( g t ) , g i over g  X  M is computed, and the next iterate is taken on the segment between g t and g , i.e., g t +1 =  X  t g t +(1  X   X  t ) g , where  X  t  X  [0 , 1]. There are two natural choices for  X  t , (a) simply taking  X  t = 1 / ( t + 1) and (b) performing a line search to find the point in the segment with optimal value (either for J or for a quadratic upper-bound of J ). These are illustrated in Figure 2 , and convergence rates are detailed in Sec-tion 4.2 . Moreover, for quadratic functions, the condi-tional gradient algorithm with step sizes  X  t = 1 / ( t +1) has a dual interpretation as subgradient ascent (see, e.g., Bach , 2011 ), which we outline in Section 4.1 . Finally, in order to minimize the number of iterations, a variant known as the minimum-norm-point algo-rithm will find g t +1 that minimizes J on the convex hull of all previously visited points, using a specific active-set algorithm (see Bach , 2011 , Sec. 6, for de-tails). For convex sets with finitely many extreme points, it converges in a finite number of iterations with higher (though still polynomial) iteration com-putational cost ( Wolfe , 1976 ). To relate herding with conditional gradient algorithms, we consider the following optimization problem: with the trivial unique solution  X  . A conditional gradi-ent algorithm to solve this optimization problem with stepsize  X  t = 1 / ( t + 1) use the iterates But these updates are exactly the same as herding via the change of variable g t =  X   X  w t /t . Indeed, the minimizer of a linear function of a convex set  X  g t +1 can be restricted to be an extreme point of M ; this implies that  X  g t +1 =  X ( x t +1 ) for a certain x t +1 herding updates in Eq. ( 1 ) are thus equivalent to the conditional gradient minimization of J with step size given by  X  t = 1 / ( t + 1).
 With this choice of step size, we get ( t + 1) g t +1 = tg t +  X ( x t +1 ), that is g t = 1 t get uniform weights in Eq. ( 2 ).
 For general step-sizes  X  t  X  [0 , 1], if we assume that we start the algorithm with  X  0 = 1 (which implies g 1 =  X ( x 1 )), then we get that g t =  X  v  X  1 )  X  u  X  1  X ( x u ) , which thus leads to non-uniform weights in Eq. ( 2 ), though they still sum to one. The conditional gradient updates in Eq. ( 4 ) can thus be seen as a generic algorithm to obtain a weighted set of points to approximate  X  , and traditional herding is the  X  t = 1 / ( t + 1) step-size case.
 A second choice of step-size for t  X  1 is to use a line search, which leads in this setting (where the global unconstrained minimum happens to belong to M ) to  X  herding with non-uniform weights.
 We finally comment on the initialization g 0 for the updates in Eq. ( 4 ). In the kernel herding algorithm of Chen et al. ( 2010 ), the authors use w 0 =  X  as this is required to interpret the herding updates as greedily minimizing E t (with the additional assumptions that k  X ( x ) k is constant). In our setting, this corresponds to choosing g 0 = 0 (which might be outside of M , though this is not problematic in practice). Another stan-dard choice (for MRFs in particular) is to use w 0 = 0 ( g 0 =  X  ), which means that the first point x 1 is chosen randomly from the extreme points of M  X  X his is the scheme we used. As is common in convex optimiza-tion, we didn X  X  see any qualitative difference in our experiments between the two types of initialization. 4.1. Dual problem and subgradient descent Welling ( 2009b ) proposed originally an algorithmic in-terpretation of herding as performing subgradient as-cent with constant step size on a function obtained as the zero temperature limit of the log-likelihood of an exponential model that he called the  X  X ipi func-tion X . Our interpretation of the procedure as a Frank-Wolfe algorithm might therefore appear as a conflict-ing interpretation at first sight. To establish a natu-ral connection between these two interpretations, we can compute the Fenchel-dual optimization problem to Eq. ( 3 ). Indeed, we have (with standard arguments for swapping the min and max operations): min The dual function f 7 X  min x  X  X  f ( x )  X  X  f,  X  i X  1 2 k f k 1-strongly concave and non-differentiable, and a nat-ural algorithm to maximize it is thus subgradient as-cent with a step size equal to 1 t +1 , which is known to be equivalent to the primal conditional gradient al-gorithm with step sizes  X  t = 1 / ( t + 1) ( Bach , 2011 , App. A). It is therefore not surprising that herding is equivalent to subgradient ascent with a decreas-ing stepsize on this function (with the identification f t = g t  X   X  =  X  w t /t ). The presence of the squared norm which is added to the  X  X ipi function X  merely re-flects the change of scaling between g t and w t . It is worthwhile mentioning that other functions, like Breg-man divergences, would have led to a different dual function hence adding a different term than a squared norm to the  X  X ipi function X . 4.2. Convergence analysis Without further assumptions on the problem, then the two choices of step sizes lead to a convergence rate of the form ( Dunn , 1980 ; Bach , 2011 ): where R is diameter of the marginal polytope. Note that the convergence in O (1 /t ) does not lead to im-proved estimation of integrals over random sampling. Moreover, without further assumptions, current theo-retical analysis does not allow to distinguish between the two forms of conditional gradient algorithms (al-though they differ a bit in practice, see Section 5 ). However, if we assume that within the affine hull of M , there exists a ball of center  X  and radius d &gt; 0 that is included in M (i.e.,  X  is in the relative inte-rior of M ), then both choices of step sizes yield faster rates than random sampling. For the version with line search, we actually obtain a linear convergence rate ( Beck &amp; Teboulle , 2004 ): For the version without line search (  X  t = 1 / ( t + 1)), Chen et al. ( 2010 ) shows the slower convergence rate in O (1 /t 2 ): 1 Concerning the assumption that  X  is in the relative interior of M , we now show that in finite-dimensional settings, this assumption is always satisfied under rea-sonable conditions, while it is never satisfied in a large class of infinite-dimensional settings (namely for Mer-cer kernels).
 We first provide an equivalent definition of this condi-tion which is used in the proofs. Let A be the affine hull of M ,  X  0 the orthogonal projection of 0 on A , and e F the space of directions (or difference space) of A (i.e., e F = A  X   X  0 ). 1 Now there exists d &gt; 0 so that any element of A which is at distance less than d of  X  is in M if and only if  X  f  X  F , the maximum of f  X  g over g  X  A and k g  X   X  k 6 d is less than the maximum of f  X  g over g  X  M . Given the properties of A and e F , this is equivalent to: Proposition 1 Assume that F is finite-dimensional, that X is a compact topological measurable space with a continuous kernel function, and that the distribution p has full support on X . Then  X  d &gt; 0 so that Eq. ( 5 ) is true.
 Proof sketch. It is sufficient to show that  X  : f 7 X  max x  X  X  f ( x )  X  h  X , f i is a norm on e F : as all norms are equivalent in finite dimensions, we get d k f k  X   X ( f ) for some d &gt; 0, yielding Eq. ( 5 ).  X  is con-vex and positively homogeneous by construction. Now  X ( f ) = 0 implies that E p ( x ) [ f ( x )  X  max y f ( y )] = 0, and thus f ( x ) = max y f ( y ) for x in the support of p (assumed to be X ) using the fact that f is continuous (since the kernel is continuous), and so f is a constant function. We then have two possibilities: either  X  0 = 0, in which case one can show that there is no non-zero constant functions in F ; otherwise f =  X  X  0 for some  X  and thus the orthogonality condition h f,  X  0 i = 0 implies that  X  = 0. Both cases imply f = 0, hence  X  is a norm.
 Proposition 2 Assume X is a compact subspace of R , and that the kernel k is a continuous function on X  X  X . If F is infinite-dimensional, then there exists no d &gt; 0 so that Eq. ( 5 ) is true.
 Proof sketch. We can apply Mercer theorem to the kernel  X  k ( x, y ) of the projection onto the orthogonal of {  X ,  X  0 } . This kernel is also a Mercer kernel, and we get an orthonormal basis ( e k ) k &gt; 1 of L 2 ( X ) with countably many eigenvalues  X  k that are summable. Moreover, (  X  k e k ) k &gt; 1 is known to be an orthonormal basis of the associated feature space F ( Cucker &amp; Smale , 2002 ), and for all x, y  X  X ,  X  k ( x, y ) = with uniform convergence. This implies that for f k =  X  k e k , we have k f k k = 1, and h f k ,  X  0 i = h f k ,  X  i = 0. If we assume that there exists d &gt; 0 so that Eq. ( 5 ) is Since X is compact, there exists a cover of F with finitely many balls of radius d/ 4 R . Let Y be the finite set of centers. Since all functions f k are Lipschitz-continuous with constant 2 R , then for all k &gt; 1, max x  X  X  | f k ( x ) | &gt; d  X  2 R  X  d/ 4 R = d/ 2. Since Y is finite, there exists x  X  Y so that | f k ( x ) | &gt; d/ 2 &gt; 0 for infinitely many values of k ; this contradicts the summability of The last proposition shows that the current theory only supports the slower rates of O (1 /t ) for the two conditional gradient algorithms in infinite-dimensional settings. On the other hand, we note that, in some cases, traditional herding performs empirically better without known theoretical justification (see Section 5 ). 4.3. Computational issues In order to run a herding algorithm, there are two potential computational bottlenecks: Computing expectations h  X ,  X ( x ) i : in a learning context (empirical moment matching), these are done through an empirical average. In an integral evalua-tion context, in finite-dimensional settings, one needs to compute E p ( x )  X ( x ); while in an infinite-dimensional setting, following Chen et al. ( 2010 ), expectations of the form E p ( x ) k ( x, y ) need to be computed. This can be done for some pairs of kernels/distributions, like the ones we choose in Section 5 , but not in general. Minimizing h g t  X   X ,  X ( x ) i with respect to x  X  X : in general, this computation may be relatively hard (it is for example NP-hard in the context of the graph-ical models we consider in Section 5 ). In practice, Chen et al. ( 2010 ) and Welling ( 2009a ) perform local search, while another possibility is to perform the min-imization through exhaustive search in a finite sam-ple. Note that a convex relaxation through variational methods ( Wainwright &amp; Jordan , 2008 ) could provide an interesting alternative. The goals of these simulations are (a) to compare the different algorithms aimed at estimating integrals, i.e., assess herding for the task of mean estimation (Sec-tion 5.1 and Section 5.2 ), and (b) to briefly study the empirical relationship with maximum entropy estima-tion in a learning context (Section 5.3 ). 5.1. Kernel herding on X = [0 , 1] Problem set-up. In this section, we consider X = [0 , 1] and the norm k f k 2 = infinite-dimensional space of functions with zero mean and whose  X  -th derivative exists and is in L 2 ([0 , 1]). As shown by Wahba ( 1990 ), the associated kernel is Bernoulli polynomial, with B 2 ( x ) = x 2  X  x + 1 6 and B We consider either the uniform density on [0 , 1], or a randomly selected density of the form p ( x )  X  quired expectations may be computed in closed form. In particular, the mean element is computed as  X  : x 7 X  E [ k ( Y, x )] which may be computed in closed form by expanding all terms in the Fourier basis. As for the optimization step, it consists in minimizing g ( x )  X   X  ( x ) over the interval [0 , 1] which can be done efficiently with exhaustive search.
 Comparison of mean estimation procedures.
 We compare in Figure 3 two kernels, i.e., with  X  = 1 (left and middle plots) and  X  = 3 (right plot), the following mean estimation procedures, and plot log 10 k  X   X   X   X  k , for two densities, the uniform den-sity (middle and right) and a randomly selected non-uniform density (left). We compare the following:  X  cg-1/(t+1) : conditional gradient procedure with  X  t = 1 t +1 , which is the original herding procedure of Welling ( 2009a ), leading to uniform weights.  X  cg-l.search : conditional gradient procedure with line search (with non-uniform weights).  X  min-norm-point : Minimum-norm point algorithm.
This leads to non-uniform weights.  X  random : Random selection of points (from p ( x )), averaged over 10 replications.  X  sobol : a classical quasi-random sequence, with uni-form weights. For non-uniform densities, we first apply the inverse cumulative distribution function. For all of these (except for min-norm-point), we also consider an extra a posteriori projection step (denoted by the -proj suffix), which computes the optimal set of non-uniform weights by finding the best approxima-tion of  X  in the convex hull of the points selected by the algorithm. We can draw the following conclusions:  X  Min-norm-point algorithms always perform best.  X  Conditional gradient with line search is performing slightly worse than regular herding. (Note that we are in the infinite-dimensional setting and so they both have O ( t  X  1 ) as theoretical rate.)  X  The extra projection step always significantly im-proves performance, and sometimes enough that random selection of point combined with a reprojec-tion outperforms regular herding (at least for  X  = 3, i.e., with a smaller feature space).  X  On the right plot, it turns out that the Sobol se-quence is known to achieve the optimal rate of
O ( t  X  2 ) for k  X   X   X   X  k 2 for the associated Sobolev space ( Wahba , 1990 ). In this situation, regular herding empirically achieves the same rate; how-ever, the theoretical analysis provided in the present paper or by Chen et al. ( 2010 ) does not allow to ex-plain or support this statement theoretically. Estimation from a finite sample. In Figure 4 , we compare three of the previously mentioned herd-ing procedures when all quantities are computed from a random sample of size 1000. In plain, testing er-rors are computed (using exact expectations) while in dashed, the training errors are computed. All meth-ods eventually fit the empirical mean, with no further progress on the testing error, this behavior happening faster with the min-norm-point algorithm. 5.2. Estimation on graphical models We consider X = { X  1 , 1 } d and a random variable com-puted as the sign (in { X  1 , 1 } ) of a Gaussian random vector in R d , together with  X ( x ) composed of x and of all of its pairwise products xx  X  . In this set-up, we can compute the expectation E p ( x )  X ( x ) in closed form, as the mass assigned to the positive orthant by a bivari-ate Gaussian distribution with correlation  X  , which is We are here in the finite-dimensional setting and the faster rates derived in Section 4.2 apply.
 We generated 10000 samples from such a distribution and performed herding with exact expectations but with minima with respect to x computed over this sam-ple (by exhaustive search over the sample). We plot results in Figure 5 , where we see the superiority of the min-norm-point procedure over the two other proce-dures (which include regular herding). Note that the line-search algorithm is slower than the 1 / ( t + 1)-rule, which seems to contradict the bounds. The bounds depend on the distance d between the mean and the boundary of the marginal polytope. If this is too small (much like if the strong convexity constant is too small for gradient descent), the linear convergence rate can only be seen for larger numbers of iterations. 5.3. Herding and maximum/minimum entropy Given a moment vector  X  obtained from the empirical mean of  X ( x ) on data, the goal of herding is to produce a pseudo-sample whose moments match  X  without having to estimate the canonical parameters of the cor-responding model. A natural candidate for such a dis-tribution is the maximum entropy distribution and we will compare it to the results of herding in cases where it can be easily computed, namely for X = { X  1 , 1 } d (with d 6 10) and either  X ( x ) = x  X  [  X  1 , 1] d or  X ( x ) = ( x, xx  X  ). In this setup, following Welling ( 2009a ), the distribution on x  X  X is estimated by the empirical distribution Learning independent bits. We first consider  X ( x ) = x and some specific feasible moment  X   X  M . It is well-known that the maximum entropy distri-bution is the one with independent bits. In the top panels of Figure 6 , we compare the norm between the maximum entropy probability vector and the one esti-mated by two versions of herding, namely conditional gradient with stepsize  X  t = 1 / ( t + 1) (regular herd-ing with uniform weights) and with line search (with non-uniform weights) X  X he min-norm-point algorithm leads to quantitatively similar results. We show re-sults in Figure 6 for a mean vector  X  which is a ran-dom uniform vector in [  X  1 , 1] d (left plots), and for a mean  X  which is random with uniform (  X  i + 1) / 2 val-ues in { 1 , 2 , 3 , 4 , 5 }  X  2 values  X  which is are random with uniform (  X  i + 1) / 2 values in { 1 , 2 , 3 , 4 , 5 } / 6 (right plots). Note that the difference between rational and irrational means was already brought up by Welling &amp; Chen ( 2010 ) through the link between herding and Sturmian sequences. For each of the mean vector, we plot in the top plots, the error in estimating the full maximum entropy dis-tribution (a vector of size 2 d ), and in the bottom plots, the error in estimating the feature means (a vector of size d ). We can draw the following conclusions:  X  For a random vector  X  (left plots), then regular herding (with no line search) empirically converges to the maximum entropy distribution.  X  For rational ratios between the means (but irra-tional means, middle plots), then there is no con-vergence to the maximum entropy distribution.  X  For rational means (right), there is no convergence either, but the behavior is more erratic.  X  The line-search procedure never converges to the maximum entropy procedure. On the opposite, it happens to be close to a minimum entropy solution, where many states have probability zero.
 Experiments considered in Figure 6 considered a single draw of the mean vector  X  , but similar empirical con-clusions may be drawn from other random samples, and we conjecture that for almost surely all random vectors  X   X  [  X  1 , 1] d (which would avoid rational ratios between mean values), then regular herding converges to the maximum entropy distribution. The next ex-periment shows that this is not the case in general. Learning non-independent bits. We now con-sider  X ( x ) = ( x, xx  X  ), and a certain random feasi-ble moment  X   X  M . As before, we compare the norm between the maximum entropy probability vec-tor and the one estimated by the two versions of herd-ing. We present results in Figure 7 for a mean vec-tor obtained by the corresponding exponential family distribution with zero weights for the features x and constant weights on the features xx  X  . We see that the herding procedures, while leading to a consistent esti-mation of the mean vector, does not converge to the maximum entropy distribution and other unreported experiments have led to similar results. We showed that herding generates a sequence of points which give in sequence the descent directions of a con-ditional gradient algorithm minimizing the quadratic error on the moment vector. Therefore, if herding is only assessed in terms of its ability to approxi-mate the moment vector, it is outperformed by other more efficient algorithms. Clearly, herding was orig-inally defined with another goal, which was to gen-erate a pseudo-sample whose distribution could ap-proach the maximum entropy distribution with a given moment vector. Our experiments suggest empirically, that while this is the case in certain cases, herding fails in other case, which are not chosen to be par-ticularly pathological. This probably prompts for a further study of herding.
 Our experiments also show that algorithms that are more efficient than herding at approximating the mo-ment vector fail more blatantly to approach a maxi-mum entropy distribution and they present character-istics which would rather suggest a minimization of the entropy. This suggests the question of whether there is a tradeoff between approximating most efficiently the mean vector and approximating well the maximum en-tropy distribution, or if the two goals are in fact rather aligned? In any case, we hope that formulating herd-ing as an optimization problem can help form a better understanding of its goals and its properties. Acknowledgements. We thank Ferenc Husz  X ar and Zoubin Ghahramani for helpful discussions. This work was supported by the European Research Coun-cil (SIERRA Project) and the city of Paris ( X  X esearch in Paris X  program).

