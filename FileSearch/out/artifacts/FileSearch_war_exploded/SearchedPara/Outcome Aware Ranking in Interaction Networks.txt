 In this paper, we present a novel ranking technique that we developed in the context of an application that arose in a Service Delivery setting. We consider the problem of ranking agents of a service organization. The service agents typically need to interact with other service agents to ac-complish the end goal of resolving customer requests. Their ranking needs to take into account two aspects: firstly, their importance in the network structure that arises as a result of their interactions, and secondly, the value generated by the interactions involving them. We highlight several other applications which have the common theme of ranking the participants of a value creation process based on the net-work structure of their interactions and the value generated by their interactions. We formally present the problem and describe the modeling technique which enables us to encode the value of interaction in the graph. Our ranking algorithm is based on extension of eigen value methods. We present ex-perimental results on real-life, public domain datasets from the Internet Movie DataBase. This makes our experiments replicable and verifiable.
 H.2.8 [ Database Management ]: Database Applications X  Data Mining Algorithms, Experimentation  X  { kameshwaran.s, pvinayak, sameepmehta } @in.ibm.com  X  The work was done while the author was at IBM Research -India Node Ranking, Interaction Networks, Social Network Anal-ysis, Centrality Measures
There are many situations from quite diverse domains which display the following common characteristics. A group of people or agents are involved in a set of activities that are intended to create value. The process of value creation is rarely based on individual ability and typically involves in-teraction or collaboration. So, the end result of the process is two pronged: firstly, there is a cumulative value created due to the interactions between the agents and secondly, an interaction network that captures the pattern of historical interactions between the agents involved in the value cre-ation process. Therefore, when we want to rank the agents in such settings we have to take into account their influence in the network as well as their contribution to the value creation process.

We begin with two motivating applications. First one is an application in software services setting which directly moti-vated our research work. One of the distinguishing features of the Services industry is that it involves people interacting with each other to solve a client X  X  specific problem rather than transforming goods (or raw materials) to produce a product. One of the predominant components of the soft-ware services industry is that of providing maintenance and support services. Essentially, the service organization takes the responsibility for resolving requests for maintenance and support activities of a software product (or a specific mod-ule of a software product). The requests may come from either the users of the software product or a testing team of the software product. A service delivery manager X  X  view of the operations is as follows: a series of requests arrive; for each request, the manager puts together a team of agents to resolve the request; an outcome indicating the effective-ness with which the request is resolved is recorded. After a sufficiently long duration of delivering such a service with a stable set of agents, the delivery manager may wish to rank the agents. One might be tempted to believe that the manager would like to rank the agents based on their aver-age effectiveness. But, our interviews with domain experts revealed that the importance of an agent is not just based on average effectiveness. Domain experts would like to take into account an agent X  X  connection pattern in the delivery network as well due to the following reasons. A typical re-quest requires modifications to one or more submodules of the product and also it needs agents with different roles such as developer, reviewer, tester etc. Since each request re-quires handoffs between the agents responsible for them, an agent X  X  connections indirectly capture the agent X  X  influen ce: familiarity with the subdomains of the connected agents due to the handoffs and ability (or inability) to work with the other agents (depending on the outcomes). When a new service request arrives, estimates of the agents X  influence (or rank) and their role/expertise can be utilized to make a de-cision on the composition of the team to resolve the request.
As mentioned before, similar problem arises in diverse sce-narios. As a second example, we consider the problem of ranking authors based on academic publications. The goal of academic publication is to disseminate new knowledge and novel insights obtained from academic research. So, the outcome of every academic publication can be measured based on parameters like, the conference or journal in which it appeared, sustained citations it gets over a period of tim e, awards it wins and so on. At the same time, the influence of an academic researcher is not determined merely by the outcomes of the papers. The connections an author devel-ops and the influence of coauthors play a major role in the overall influence of an academic researcher. So, the rank-ing of academic researchers needs to take into account the structure of their interactions (obtained from a database l ike DBLP) and the impact of their papers (obtained from cita-tions, impact ratings of conferences etc). Some of the works in this direction can be seen in [10, 11, 9].

The literature of social network analysis (SNA) is rich on ranking nodes [13, 7, 12, 8]. However, most of the techniques are aimed at capturing the structural properties of the net-works. To the best of our knowledge, the task of ranking nodes while simultaneously taking into account both the structure and the outcomes has not been formalized. We summarize the SNA literature and shortcomings of the tra-ditional ranking techniques.

The notion of service interaction networks was introduced in [6] to capture and analyze the phenomena of agents inter-acting for a shared goal of value creation. In this paper, we develop a novel technique for ranking nodes that takes both the structure and outcomes into account. We first build an augmented network that varies from standard social net-works by introducing special nodes corresponding to out-comes and creating appropriate directed edges (as opposed to undirected networks that are common in social network analysis). In the augmented network, the special status of the outcomes is captured by associating certain explicit va l-ues (or utilities) with the outcome nodes. We then develop an eigenvector-like method to rank the nodes of the aug-mented network such that the special outcome nodes are not influenced by the ranking process (as they are priors). We explore interesting mathematical and semantic proper-ties of our technique.

We present experiments that show the progress our method makes in the direction of outcome aware ranking. We com-pare it against a baseline algorithm derived from tradition al eigenvector ranking approach. As outlined in the conclu-sions, this is a limitation and we are working on other base-line algorithms for comparison. The nature and sensitivity of the business data prevents us from sharing the details of our findings in the service delivery application. In this paper, we present our experiments and findings on real-life datasets from the Internet Movie DataBase (IMDB) 1 . These datasets are such that, it is easier for wider audience to re-late to, and also to replicate and verify our experiments. The instances we have been able to extract from the IMDB dataset are of moderate size. We leave the tasks of rigorous experimentation on even larger datasets and comparisons against larger set of baseline heuristics for future work.
The rest of the paper is organized as follows. In Sec-tion 2.1, we discuss related literature on node ranking in graphs. In Section 2.2, we illustrate the inadequacies of cu r-rent ranking schemes, taking the interactions in Figures 1 and 2 as an example. In Section 2.3, we formally define the problem. In Section 3, we present our ranking algorithm for outcome and structure aware ranking. In Section 4 we present our experimental setup and results.
Ranking nodes of a network with respect to some impor-tance or influence measure is an active research topic in the fields of social network analysis, network data mining, and in general complex networks. A node refers to an entity that could be an individual, role, group, or an organiza-tion. Edges encode relationships between nodes, which are of two kinds: Persistent (weblinks, friendship, membership, affiliations) and discrete interactions (e-mails, collaboration, authorship, team work). In the following, we briefly review some of the works in node ranking related to our problem. Various methods exist for ranking nodes in a network. Degree Centrality is a measure in which the nodes in the network are ranked based on the number of nodes to which they are connected. This translates to ranking nodes purely based on their experience or number of interactions . Eigen-vector centrality [8, 12] is a popular measure for ranking nodes in a network. It measures the centrality of a node as a linear combination of the centralities of the nodes to whic h it is connected. Unlike degree, which weighs every adjacent node equally, the eigenvector weighs adjacent nodes accord -ing to their centralities. Let A = [ a ij ] N  X  N be the (weighted) adjacency matrix of a network with N nodes. The measure x for node i depends on the status measures of the interact-ing nodes; x i  X  P j a ij x j . This can be expressed in matrix notation as  X x = Ax . Here,  X  is the largest eigenvalue and x is the corresponding eigenvector. The agents can then be ranked based on the component wise value of the eigen-vector x . The idea of using the eigenvector to do ranking dates back to the 1950 X  X  [13, 7]. However, in recent times, this concept has been applied on a massive scale in ranking the web-pages in the HITS [8] and the PageRank [12] algo-rithms. A small representative sample of relevant work on node ranking with relevance to the problem considered in this paper, are presented below.

Co-authorship networks have been used extensively to de-termine the status of individual researchers and the struc-ture of scientific collaboration [10, 11]. To rank the author s in a co-authorship network, AuthorRank algorithm was pro-posed in [9]. It is a modification of PageRank [12] algorithm for a weighted, directed network. PageRank is originally designed to rank retrieval results based on the hyperlink http://www.imdb.com/interfaces Figure 1: Individual interactions with illustrative outcomes from different communities Figure 2: Interaction network of interactions from Figure 1 structure (persistent relationship) of the web, which is a d i-rected, binary graph. The ranking is similar to eigenvector ranking where a page has high rank if the sum of the ranks of its backlinks is high. In AuthorRank, the construction of the weights on the links between the authors is different from that of the PageRank. The co-authorship frequency and the number of authors per publication are taken into account in the network construction. Some context aware measure have also been proposed. Haveliwala [5] developed topic-sensitive PageRanks by computing several eigenvec-tors biased by specific topics. The rankings for a query was obtained by appropriate combination of precomputed eigen-vectors. White and Smyth [14] developed an algorithm to rank the relative importance of nodes in a network with re-spect to a set of  X  X oot nodes X . Their technique is based on the notion of weighted paths. A node is considered to be important to a root node if they share many short paths. Chitrapura and Kashyap [3] presented a flow based algo-rithm to rank webpages based on their relevance to the user query. Delong et al. [4] developed conceptual encoding of th e links of the webgraph by extracting keywords and repeating phrases from anchor data of the web-pages. They exploited the augmented webgraph to present improved concept-aware page ranking. Asur et al [1] presented algorithms to find important nodes in dynamic networks by studying the node evolution and interactions. We observe that none of these works explicitly take the  X  X utcome X  of the events that give rise to the structure while ranking the nodes.
In this section, we present some of the limitations of the previous approaches to measuring the influence or impor-tance of the nodes of a network. Consider the example shown in Figure 1 which models agent interactions in three different applications. There are five agents A , B , C , D , and E and four interactions involving subsets of them. In case Table 1: Rankings based on different methodologies of service delivery, outcome is measured based on customer satisfaction index, in case of academic collaboration, cit a-tion is assumed to be the outcome, and in case of movies, the average IMDB rating with a threshold of 8/10 is taken to be a binary outcome. The structure of their interactions is captured in Figure 2. For the sake of exposition, we consider the case of service delivery outcomes (first row of Figure 1).
We begin with the ideal or expected ranking that takes both the structural importance of the nodes and the out-comes into account.
Considering both structural importance and contribution to outcomes, it is imperative that C should be ranked first and B should be ranked second. In terms of structural im-portance, E and D have the advantage of being connected to the most important node. However, the node A has the distinction of having the highest outcome score. But, A  X  X  outcome score is only marginally higher than D  X  X . E  X  X  out-come score is much lower than A  X  X . So, we consider D, A, E to be the expected ordering between them that takes both the aspects into account; thus, giving the final ordering of C, B, D, A, E .
 The results of known ranking methods is tabulated in Table1. Next, we explain different rankings in some detail.
Degree ranking merely counts the number of interactions and hence quantifies only the experience. The ranking due to degree is: C, B, { A, D, E } .
Eigenvector ranking reflects the structural importance qui te well by modeling the inherited or transferred status and im-plicitly takes into account the degree ranking. The largest eigenvector for the adjacency matrix of the network is 1.847 7 and the corresponding eigenvector is 0.271 ( A ), 0.5( B ), 0.653 With respect to this example, its limitation is exposed by the fact that it fails to distinguish between D and E which have a clear separation in terms of outcomes.
The ranking obtained by just considering the average sat-isfaction indices for each of the nodes is, A, D, E, B, C . This ranking completely ignores the structural importance of no des B and C .

From the above discussion, we observe that the intended ranking mechanism should be similar in spirit to eigenvec-tor ranking. However, it should be able to take into ac-count value creation aspects of nodes to distinguish betwee n nodes which seem to display similar or equal structural im-portance. In this section, we formalize the problem considered. Let V = { 1 , 2 , . . . , N } be the set of agents in the system. Let { 1 , 2 , . . . , T } be the set of interactions that have taken place in the system. Each interaction results in one of the possibl e outcomes R = { 1 , . . . , M } . Following indices are used: i and j for agents, t for interactions, and m for the outcomes. An interaction t  X  X  1 , 2 , . . . , T } involves a subset of agents V t  X  { 1 , 2 , . . . , N } . The pattern of the interaction is given by the edge set E t with a non-negative  X  t ij denoting the weight on the edge ( i, j )  X  E t . The weight for non-existent edges is zero:  X  t ij = 0, ( i, j ) 6 X  E t . As t is an interaction among the V t agents, the graph ( V t , E t ) is connected. The specific structure of the graph is given by the nature of the interaction. If the interaction is that of a group work with one interaction involving all, then the graph is complete. For a hierarchical interaction, the graph will have a tree structure. Let R t  X  { 1 , 2 , . . . , M } be the observed outcome of the interaction. The interaction t can thus be completely characterized by the tuples ( V t , E t , {  X  t ij } , R t of applications of interest to us, whether it is service deli very or academic collaboration or IMDB rating, the interactions are mainly of group work.

Let  X  m  X  R denote the utility or value of an outcome m  X  R . The set {  X  m : m  X  R } can be cardinally ordered and if  X  m  X  &gt;  X  m  X  X  , then the outcome m  X  is preferable to m  X  X  . Typically, the utility of the outcomes is ascertained based on domain knowledge and also varies over time. Even more importantly, the user of a ranking scheme may want to experiment with different options of outcomes. So, the representation of the data and the technique should ideally allow the user to change just the outcome values and observe the corresponding changes in ranking.

Given the past t interactions { ( V t , E t , {  X  t ij } , R outcome utilities {  X  m : m  X  R } , goal is to rank the agents in a manner that captures both their structural importance as well as their contribution to the value creation process.
Firstly, the individual interactions are aggregated to ob-tain the agent interaction network , which, with a slight abuse of notation, is given by the graph ( V, E, {  X  ij } ): The overall strength of interaction between any two agents is the linear combination of the individual strength of inte r-actions. If the interactions are chronologically ordered, then  X  can be used as the past influence factor to model the rela-tive importance of the interactions with respect to time. By judiciously choosing {  X  t } , one can model various kinds of past influences: Uniform , sliding window , etc. We call the edge weight matrix A = [  X  ij ] of order N as the agent inter-action matrix . This matrix aggregates the past interactions, but does not capture any information on the outcomes of the interactions. We now present a method that augments this matrix in a way that appropriately aggregates the con-tribution of the nodes to the value creation process.
The main reason the eigenvector based approach captures the structural aspects so well is the manner in which a node transfers part of its status to its neighbors and derives its own status as a linear combination of the status of its neigh-bors. Consider an interaction which involves V t nodes and have R t as outcome. We need a mechanism by which the utility of R t can be transferred in parts to the nodes in V At the same time, the utility of the outcome R t itself is a prior and should not be affected by the status of the nodes in V t . This suggests the following natural directed construc-tion. Let the outcome of interaction t be m . The graph ( V t , E t , {  X  t ij } ) is updated as follows: The outcome m is added as a node (and is called as outcome-node ). A directed edge is added from m to each of the other agents that participated in the interaction. The weights on the newly added edges that are given by (6) and (7), captures the relative contribution of agents in realizing the outcom e m . The weights on the non-existent edges are zero:  X  t im  X  i and  X  t mi = 0,  X  i 6 X  V t . The status or the influence of the outcome node is later used in the algorithm to transfer it to the participating nodes via the directed edges.

Without loss of generality, we can assume that each of the outcomes is realized in at least one of the interactions. The aggregation of the graphs augmented with outcomes is given by: The outcomes { 1 , 2 , . . . , M } are added as nodes to the in-teraction network and an edge from outcome m to a node i exists if i had been a part of at least one interaction with out-come m . The weights on the outcome-agent edges are taken as linear combination of the corresponding weights in the individual interactions. We call the above network as the agent-outcome interaction network and the corresponding edge weight matrix as the agent-outcome interaction matrix  X  of order ( N + M ). For the network in figure 2 with out-come II of figure 1, the agent-outcome interaction network is shown in figure 3. The four outcomes O 1 , O 2 , O 3 , O 4 cor-respond to the outcomes of the four interactions. Assuming equal contribution from each agent, weight on the directed edge from an outcome to an agent is 1 / 2.

The matrix  X  captures both the inter-agent interactions and agent-outcome interactions. It is asymmetric. The over -all intended effect of the directed construction is to let the outcome-nodes transfer their utilities to the agents and th e utilities of the outcome-nodes are not altered. The matrix  X , however does not take into account the utilities of the outcomes {  X  m } . We treat the utilities as exogenous status of the outcomes and combine with  X  to obtain the rank-ing. Note that, in our representation, to experiment with Figure 3: Interaction network with outcomes aug-mented as nodes different valuations of outcomes, all we need to do is specify different e vectors.
The traditional eigenvector ranking has a limitation that it can only be applied to non-negative, symmetric matri-ces. Thus, if the underlying graph is asymmetric, especiall y with unchosen nodes (nodes with zero in-degree), the rank-ing provided by eigenvector centrality is inconsistent. Th e unchosen nodes receive no status from the other nodes and hence contribute nothing to the nodes to which they are con-nected. But, in our construction the zero in-degree nodes play a critical role of transferring the status of outcomes t o the nodes.

Let e be the vector that captures the status of the out-comes nodes. That is, e [ i ] for agent nodes are made identical and for outcomes nodes, it will be a function of their values. Let x be the vector that an iterative technique computes as the final influence of the nodes. In other words, the differ-ence vector ( x  X  e ) should be expressible in an eigenvector-like form with respect to a scaling parameter  X  and the incident matrix  X  of the augmented network. In other words, we are looking for an x such that,
Observe that the Equation (13) captures the effect of interactions and the values associated with the outcomes nodes. Our measure of influence of the nodes is similar to a centrality measure used by Bonacich [2] in finding influence of nodes in unweighted, directed graphs in very small social networks coming from marriage data among elite families. In what follows we establish some important properties of our approach.

Firstly, it is easy to see that, it reduces to the eigenvector ranking when the relationships are symmetric and the value of all the outcomes are identical (say zero). In the general setting as above, the value of x is given by The vectors e and x , and identity matrix I are of order ( N + M ). We can show that the method works best when  X  is in the range (0 , 1 / X  ) where  X  is the largest eigenvalue of  X  (when it exists). We omit the details due to space considerations. We now present the effect of both the free parameters of the iterative approach:  X  and the vector of outcome values, e .
In this section, we first show that our usage of the vector e is semantically sound. In particular, we show that the value of outcome nodes themselves do not undergo any change during the algorithm. We then show how to set e rigorously. Let us assume for now that we have chosen  X   X  (0 , 1 / X  ). The vector e for our problem is ( e 1 , e 2 , . . . , e N where the first N components correspond to the exogenous status of the nodes and the last M correspond to the exoge-nous status of different outcomes. We define e as follows: The assignments in Equation 15 reflect the fact that the ex-ogenous status of all the agent nodes are uniform. The out-comes on the other hand have their utilities as the external status. The utilities are unique up to a linear transforma-tion and hence the external status of an outcome is defined as proportional to its utility by a non-zero scalar  X  . In other words, {  X  X  m } still preserves the cardinal structure and the relative magnitude of the utilities are unchanged. Figure 4: Rank quotients of vertices as a function of  X 
The justification for associating non-uniform exogenous status with the outcome nodes is: the utilities of the differ-ent outcomes are independent of the way they are achieved. For example, the utility of a research article is not deter-mined by the authors of the paper, rather it is decided by its impact, say the number of citations it gets. Therefore, whil e the exogenous status of the outcome-nodes should influence the status of the other nodes, the solution x of Equation 14 should not alter the status of the outcome nodes. The follow-ing derivations show this property to be indeed true. Define matrix Y of order ( N + M ): By definition of  X , Rephrasing x vector in terms of Y , Figure 5: A star interaction network with 21 agents and 5 outcomes Substituting for the e , as defined in (15) and (16), Thus the components of x corresponding to outcome nodes have the same value as their external status. On the other hand, x i s (called ranking quotients ) for the other nodes are dependent on  X  and rankings could possibly change with re-spect to the choice of  X  . As the other terms in (22) are constants, we have N lines given by equations (22) as a function of  X  . If all these lines are parallel, then ranking is independent of  X  . Otherwise, the rankings will depend on  X  as shown in figure 4. The ambiguity in ranking is due to the magnitudes of  X ,  X  , and {  X  m } . The  X  and {  X  m } are instance specific and hence  X  should be chosen such that ranking is not affected. One possibility is to choose a positive  X  &gt;  X  (greater than all the intersecting points, as shown in figure 4), so that the ranking will remain unchanged with further increase in  X  value. As each line will possibly intersect at N  X  1 points with N  X  1 lines, the total number of possible intersecting points are ( N  X  1)( N  X  2) / 2. Hence, the max-imum of the intersection points,  X  max can be estimated in O ( N 2 ) time.
Another free parameter that affects the ranking is  X   X  (0 , 1 / X  ). The parameter  X  reflects the relative importance of the structure versus outcomes in determining the rank of the agents. For the network in Figure 3, the largest eigen-value of the  X  matrix is 1.8477 and hence  X  was chosen in the range (0 , 1 / 1 . 8477). The table 2 shows the rankings ob-tained for ten different equally spaced  X  values in the above range. The ranking given by mid-range  X  values is that of the expected ranking, whereas the low range is same as that of outcome rank and the higher range is more similar to eigenvalue and degree rank (also see table 1). In the fol-lowing, we propose a novel way of analyzing the influence of outcomes and interactions over the ranking and thereby choosing  X  judiciously.

Let an  X   X  (0 , 1 / X  ) be chosen. Let R be the ranking for the utility {  X  m } . Construct a new set of utility {  X  with the opposite order of preference. Thus, if the outcome has the highest utility in {  X  m } , then it has the lowest in {  X  m } . Similarly, the outcome with second highest in {  X  m is one but last in {  X  m } . Let R be the ranking with utility {  X  m } and  X  . For a given value of  X   X  (0 , 1 / X  ), we would like to estimate the influence of structure and outcomes in the final rankings. We do this by exploiting the concept of Kendall correlation [7]. Given two complete rankings, it computes a score in the range of [  X  1 , 1]. If the score is close to 1, it means the two rankings are identical and if it is close to -1, it means the two rankings are near opposite orders. If the Kendall correlation,  X  ( R, R ) is close to 1, then the outcomes have negligible influence, as the rankings are not modified with the reversed utilities. Similarly, if the correlation coefficient is close to -1, one can infer otherwis e. An equal influence of outcomes and interactions is achieved for an  X  with which zero correlation is achieved. Such an  X  may not exist for a given interaction network, as shown in the following example.

Consider the star interaction network of figure 5. The agents A 1 , A 2 , . . . , A 20 had interacted with agent A 0. The strength of interactions with A 0 are 1 , 2 , . . . , 20 for agents were observed. As shown in the figure, all the individual in-teractions of A 0 with A 20 , A 19 , A 18, and A 17 had resulted in O 1. Similarly, interactions with the next four agents in decreasing sequence resulted in O 4 and so on. Each inter-action has equal contribution from A 0 and the interacting agent for the resulting outcome. Hence, the weight of the edge from outcome node O 1 to A 20 is 10 (half of 20 inter-actions) and that of to A 0 is 37 (half of 20 + 19 + 18 + 17). For brevity, the network augmented with outcome nodes and edges are not shown in the figure.

Figure 6 shows three different utility functions U1, U2, and U3 for the outcomes. The utilities are scaled to range (0, 1] as they are unique up to a multiplication by a positive scalar (  X  max ensures the uniqueness). All the three func-tions are increasing over O 1, O 2, O 3, O 4, and O 5. The rate of increase, however, is different: linear for U1, marginally increasing for U2, and marginally decreasing for U3. Thus, one can expect the difference in rate of increase to be re-flected in the rankings. Let the utilities U1, U2, and U3 be reversed. For example, reversed utilities of U1 for O 1, O 2, O 3, O 4, and O 5 are 1, 0 . 762, 0 . 525, 0 . 287, and 0 . 05. It is easy to verify that the ranking for the reversed utilities of Figure 7: Trade-off of interactions and outcomes for utilities U1, U2, and U3 U1, U2, and U3, for all  X   X  (0 , 1 / X  ) will be A 0, A 20, A 19, . . . , A 1. Incidentally for this network, this ranking is also the same as that of degree based ranking and eigen ranking. Figure 7 shows the variations in Kendall correlation coeffi-cient for the rankings with opposite utilities, with respec t to  X   X  (0 , 0 . 018) (the maximum eigen value  X  = 53 . 572). As expected, the correlation is increasing towards 1. For al l the three utility functions, the minimum possible correla-tion coefficient is positive and hence influence of the struc-ture of agent interactions is considerably more than that of outcomes. For U2, Kendall correlation coefficient of zero is obtained for  X  = 0 . 02 and a ranking obtained for this  X  takes into account both the interactions and the outcomes in equal strengths. Note that the above discussions are for illustra -tive purposes and the inferences (with respect to U1, U2, and U3) are limited to the given star network. However, the proposed methodology of reversing the utilities and comput -ing the correlation of the rankings for all  X   X  (0 , 1 / X  ) enables one to analyze the trade-off of influence of outcomes and in-teractions. As it needs reversal of utilities and the rankin gs are derived from the same network, there are no anomalies in the trade-off analysis and requires no additional routine s for the algorithm. Based on our analysis of the impact of  X  for the star network and for the network shown in Figure 3, we follow a heuristic of picking  X  in the lower half of the range of (0 , 1 / X  ) to give a slight bias towards outcomes.
As shown during the problem formulation naive applica-tion of known ranking techniques to our problem gives un-satisfactory results as they were not designed keeping thes e requirements in mind. However, as observed during the for-mulation, several characteristics of the eigenvector rank ing are essential in our setting too. So, a natural question, can a slight modification to the eigenvector ranking give mean-ingful rankings in our context?
Consider the matrix  X  obtained from the special construc-tion described in Section 3.1.1. This matrix is an asymmet-ric matrix. This is inevitable as the outcomes play a special role. So, we cannot directly use eigenvector computation which is meant for symmetric matrices. So, a natural heuris-tic is to consider the ranking according to the left singular vector corresponding to the largest singular value of  X . In this case,  X  is modified as follows: if there is an edge of weight w from an agent node i to an outcome node of value v , the corresponding  X  entry is set to be w v . Intuitively, this heuristic does not address the subtle technical point w e covered in depth: that of ensuring that the outcomes are used to influence the ranking of agents and not vice versa. Our experiments show that this approach produces results which are inferior to the ones obtained by our technique.
In this section, we present experimental results that show the efficacy of our approach. In the service delivery ap-plication for which we developed our approach, ranking is used in conjunction with the roles and responsibilities of t he agents to determine ideal team composition for new service requests. Since an automated tool cannot capture all the nu-ances of the service delivery, the output of the tool is used as a guidance rather than in a strict sense. This, and the sensitivity of the business data, makes is difficult to report our field trials in a consistent way. Moreover, it is difficult to replicate and verify without sharing the data which re-veals certain statistical properties pertaining to the ser vice delivery organization. So, for the purpose of verifiability and replicability, we conduct and report our experiments on the datasets from IMDB.
 We consider the problem of ranking movie actors. Typical SNA approach would rank the agents based on the X  X o-actor X  network structure. Typical outcome oriented ranking would rank the actors based on the average  X  X utcome X  of their movies (with appropriate statistical filters). However, as argued in the introduction, our approach of simultaneously considering both the structure and the outcomes captures the dynamics better (as demonstrated in the experiments as well). We view each movie as an interaction involving the leading actors of the movie. The outcome of a movie should be indicative of its success or failure. We choose the IMDB dataset as it provides us with an appropriate proxy for the outcomes. Arguably, the outcome of a movie is impacted quite a lot by participants such as the director and rest of the technical team. However, in a mass rating medium like IMDB where a single movie gets thousands of votes, it is the performance of the main actors which influences its rating to a great extent. So, for a movie, we consider its overall user rating in the IMDB as its outcome. To ensure that our assumptions hold, we consider only those movies that have a certain minimum number of votes. It is also common to see multiple actors sharing screen in multiple movies which is common with the features of the service delivery applica-tion that motivated our work. Another advantage with the IMDB dataset is, we can use familiar, identifiable names in small experiments and conduct controlled acts like changin g the outcomes of their movies or including/excluding specifi c movies (or time periods) to show the conceptual strength of our formulation.

IMDB allows us to programmatically extract the following data: list of all movies, list of movies according to genre an d time period, within a genre top user rating movies, within a genre a random mix of movies and so on. We also get the user ratings corresponding to the movies in the lists that we work with. Also, for each movie, it lists the list of actors in the movie. So, for a given set of movies, we construct the interaction network as follows: each actor who appears in any of the movies is an agent, each movie represents an interaction that is incident on all its main actors (we choos e first 6 listed names) and the outcome associated with the interaction is the average user ratings for the movie. Given this interaction data, we construct the  X  matrix as describe d in Section 3.1.1. Our experimentation explores the effects o f the different constructions for the vector outcome values. A s explained in last section, we choose  X  in the lower range of (0 , 1 / X  ). Some of the important conceptual aspects that we exhibit from our experiments are:
The IMDB dataset, due to the presence of large number of widely recognizable actors makes it easy to verify intuitiv e correctness of the experiments on small datasets. We have extracted two special instances ( List 1 and List 2 ) each hav-ing 28 and 30 actors respectively (small enough to be easily interpreted and large enough to need computation) which can be used to highlight conceptual strengths. List 1 and List 2 are enumerated in Table 3. The first instance consists of 28 actors from contemporary times. The second instance consists of 30 actors whose prime era was before 1970s. Since these two sets have fairly well known actors, we make our conceptual points using these instances.

Results of ranking algorithms are generally meaningful only for connected interaction networks. When the graph is disconnected, the rankings across different components are not comparable. Therefore, we limit our instances to only connected interaction networks. We employ simple traver-sal techniques over the movie and actor lists to construct instances which are connected. To demonstrate the stabil-ity of the computational approach we construct interaction networks with 200, and 400 actors (11114 movies). To auto-matically assess the sensitivity of our technique for chang es in outcomes, we use the Kendall tau distance (  X  from now) between the following two rankings: before and after change s in the outcomes. As for the feasibility of our approach for very large graphs, it should be noted that the computa-tion of an inverse is the most time consuming part; O ( n Therefore, for most interaction networks like the complete ly cleaned, connected IMDB or DBLP, our approach can be used without any problem. For truly massive graphs like the web graph, exact computation is not feasible. Develop-ing a technique that can be used even on massive graphs is an important challenge for future work.

The goal of these experiments is to evaluate the ability of our OARA approach and SVD to take into account outcomes while ranking the actors. We conduct our experiment as follows. Let  X  be the matrix constructed according to the method in Section 3.1.1. Let e be the vector of outcome values. We generate the OARA and SVD rankings under four different conditions as defined below: For the rest of the experiments we use R 1 , R 2 , R 3 , R denote the rankings obtained by OARA and SVD by this process for the different lists and different e s considered in the experiments. The different rankings obtained for List 1 are as in Table 4 (With A 1 = 9 , A 2 = 23 , A 3 = 28 , A Table 4: Rankings of actors in List1 under different conditions Table 5: Rankings of Al Pacino  X  and Robert de Niro in both the lists The rankings are given in the ascending order of ranks; the actor with the first rank appears first and so on.
Let us now check how the two methods dealt with changes in outcomes (refer Table 4). One would expect the rankings of A 1 and A 2 to go down and those A 3 and A 4 to go up. Notice (by comparing R 1 and R 3 ) that OARA rankings of the both top actors (number 23 and 9) have gone down while those of the two chosen mid-ranked actors A3 and A4 (num-ber 28 and 16) have gone up. Notice (by comparing R 2 and R ) that there is hardly a noticeable change in the SVD rankings before and after modification. This shows that our formulation is more sensitive to changes in outcomes.
We conducted experiments to check if our approach can indicate relative influence of actors across time periods (R e-fer to Table 5). Since the List 2 involves mainly old actors, only movies up to 1980 are contained in their interaction networks. We consider two actors, Robert De Nero and Al Pacino who are present in both the lists. Since their interac -tion with the old actors is limited, they are ranked towards the end in List 2 whereas they are ranked high in List 1.
The vector of outcome values plays a crucial role in the ranking obtained by OARA. Conceptually, there are two main settings. One, in which every outcome has some pos-itive value (degree varies) and the other, in which some of the outcomes may have negative values. As an example of a setting with negative outcomes is IMDB where a user rat-ing of 7 or below is treated as an indication of its failure and a rating above 7 is treated as an indication of its suc-cess. In such a case, it is meaningful to associate positive and negative weights with different outcomes. An exam-ple of setting of only positive outcomes whose degree varies is the academic publications by researchers in refereed con -ferences and journals. The value varies depending on the forum and citations and so on. So, in this case, the weights associated with outcomes are appropriately weighted posi-tive values (for example, 100 citations is more than 10 times better than 10 citations!). Below, we show how different ways of setting the vector e influences the rankings.
Case 1. When all outcomes were positive. In this case, every movie is treated as having a non-zero positive out-come. The value of a movie with rating R the outcome was set to be 2 R . Refer to Table 6. Here, ranking R 1 is the rank-ing on original data. Ranking R 3 is obtained by reducing Table 6: Rankings of actors in List2 generated for Case 1 Table 7: Rankings generated of actors in List2 for Case 2 the outcomes of a subset of the movies of actors 17 and 24. In this case, although OARA shows changes in some of the connected actors like 21 and 11, it does not change the rank-ing of 17 and 24 themselves as they had other movies with high positive value and since the values of movies with re-duced rating was still positive, they did not suffer in rankin g (contrary to expectation).

Case 2. When the outcomes are mixed. This is the most general case where the outcomes are treated as positive and negative. For example, a movie whose average rating is 5 is deemed a failure and thus having a negative outcome, and a movie with a rating of 8 is considered to be a positive outcome. Specifically, we set the weights for different out-comes as follows. If a movie has the corresponding rating R greater than 7 then the associated was 2 R , else the outcome is  X  2 8  X  R . We repeated the experiment for Case 1 with this setting (Refer to Table 7). Observe that R 1 and R 3 were noticeably different. Note that relative ranks of 17 ( A 1 dropped while that of 21 ( A 4 ) has improved. The reason for the stability of 24 in the ranking is his close collaboration with actors 2 and 11 with whom he has acted in 14 movies. Table 7 shows the ratings from experiment on List 2.
Case 3. Vector e can be used to take into account any known special status of the agents themselves. In this case, the status of an actor may be enhanced due to an award or a rise in popularity. In this case, non-uniform setting of e [ i ] for nodes corresponding to agents to take this into account. Observe original ranking for List 2. Actors with indices 27 (Robert De Nero) and 26 (Al Pacino) are appearing towards end in R 1 . If we now increase the importance of these two actors (because of award winning performances) and keep the importance of rest of the actors uniform, then, we notice that not only these two actors, but, also those who interacte d with them (like Marlon Brando) benefit in the ranking. The new ranking after changing importance of the two actors is denoted by R 5 . Rankings are shown in Table 8.
We extracted larger, connected networks consisting of 200 and 400 actors respectively. The fact that we used only the first few of the listed actors for each movie limited the size of the connected networks that we could detect. We use Kendall correlation [7] to see how rankings are correlated (Refer to Section 3.2.2 for interpreting this measure) acro ss different experiments. As before, we decrease the value of Table 8: Rankings generated of actors in List2 for Case 3 outcomes of two top actors and increase the outcome of two middle ranked actors. This process affects a large fraction o f the nodes in the network because of the cascading effect of the X  X o-actor X  X etwork structure. As a result, the rankings of most actors are likely to see major shifts, and hence, the two rankings are likely to look almost unrelated. We notice that , for the OARA rankings, the Kendall correlation measure is close to zero and for the SVD rankings it is in the range of 0 . 6. These experiments provide important empirical evi-dence that our method accounts both the structure and the outcomes in its rankings; and, the SVD based approach is not as effective.

Case 1. Network of 200 actors.  X  ( R 1 , R 3 ) = 0 . 007352 and  X  ( R 2 , R 4 ) = 0 . 68160
Case 2. Network of 400 actors.  X  ( R 1 , R 3 ) = 0 . 087 and  X  ( R 2 , R 4 ) = 0 . 6345
This research was conducted for the application of rank-ing agents in a service delivery setting. Although we are not able to share results on the actual data, we present results on data obtained from a service delivery simulator that we developed. Our simulator captures various real-lif e, people-centric aspects of service delivery that we observe d in practice: a. compatibility and incompatibilities betwe en people within team settings and their effect on the outcomes b. transient slackness in performance of people due to repet -itive nature of tasks in service delivery c. performance as-pects such as ramp-up curve when people begin their work. Here, we briefly discuss our experiments with the simulator. A reference to the technical report on our simulator will be provided in the final version of the paper.

Our simulator created an environment of 500 agents. As-sociated with each agent was a list of compatible and in-compatible agents, apart from individual level of compe-tency. We generated a time-series of requests tagged by types. We used the types of the recent requests performed by an agent to measure his likelihood of slackening. For a given request, we picked agents so as to balance load (a common practice in service delivery). For each assignment of agents, we computed a likely-outcome that takes into ac-count: their individuals levels of competency, their affin-ity for slackening, and basic compatibility index between them as a team. We repeated the experiments carried out in Section 4.4 on the simulated data. With the usual mean-ings of rankings R 1 , R 2 , R 3 , R 4 , over multiple runs, we found Kendall measure between R 1 and R 3 in case of simulation is much higher than those obtained in Section 4.4. This could be because, the outcomes are computed by a method which combines the parameters of the simulation in a predictable manner whereas the outcomes of the movies do not neces-sarily follow any predictable model.
The main goal of our work is to highlight applications that require ranking that takes the structure and outcomes associated with the interaction networks. We developed a novel ranking technique and presented several mathemati-cal properties of the technique. Our technique is sensitive to changes in both structural and outcome aspects of the in-teraction networks. There are several directions to pursue . One of the drawbacks of our current empirical work is the comparison against a single baseline heuristic. There are other ways of modifying the interaction networks that take the outcomes into account. For example, one may rank the actors separately based on structure and outcomes and then use rank aggregation techniques to get a combined ranking. We are currently working on this approach. From a com-putational point of view, the need to invert a matrix is the most challenging task of this approach. To make this scale to massive graphs, we need to develop a heuristic which ap-proximates the matrix computation in the same sense as power method does for eigenvector computation. Conduct-ing our experiments on massive real-life datasets is anothe r focus of our current work. [1] S. Asur, S. Parthasarathy, and D. Ucar. An [2] P. Bonacich and P. Lloyd. Eigenvector-like measures [3] K. P. Chitrapura and S. R. Kashyap. Node ranking in [4] C. DeLong, S. Mane, and J. Srivastava.
 [5] T. H. Haveliwala. Topic-sensitive page rank. In In the [6] S. Kameshwaran, S. Mehta, V. Pandit, G. Parija, [7] M. G. Kendall. Further contributions to the theory of [8] J. M. Kleinberg. Authoritative sources in a [9] X. Liu, J. Bollen, M. L. Nelson, and H. V. de Sompel. [10] M. Newman. Scientific collaboration networks: I. [11] M. Newman. Scientific collaboration networks: II. [12] L. Page, S. Brin, R. Motwani, and T. Winograd. The [13] T. H. Wei. The algebraic foundations of ranking [14] S. White and P. Smyth. Algorithms for estimating the
