 In order to deal with the divers ified nature of XML documents as well as individual user pref erences, we propose a novel Multi-Ranker Model (MRM), which is able to abstract a spectrum of important XML properties and adapt the features to different XML search needs. The model c onsists of a novel three-level ranking structure and a training module called Ranking Support Vector Machine in a voting Spy Na  X   X  ve Bayes Framework (RSSF). RSSF is effective in learning search preference and then ranks the returned results adaptivel y. In this demonstration, we present our prototype developed from the model, which we call it the MRM XML search engine. The MRM engine employs only a list of simple XML tagged keywords as a user query for searching XML fragments from a collection of real XML documents. The demonstration presents an indepth analyses of the effectiveness of adaptive rankers, tailored XML rankers and a spectrum of low level ranking features. H.3.3 [ Information System ]: Information Search and Retrieval, Retrieval models Management, Measuremen t, Experimentation. The goal of our system is to obtain an effective ranked list of XML fragments as an answer to the user query, taking into account individual preferences on fragments [4]. In this demonstration, we present our wo rk that extends traditional IR theory to rank XML fragments by considering the granularity of XML data and user feedback. The extension includes many important features in XML data such as key-tag proximity, data granularity and contextual paths as basic indexing units. Our prototype, called the MRM engine, is able to cater to the mixed searching needs from different users by providing a set of adaptive rankers at the top level, when given a corpus of diversified XML datasets. The MRM engine consists of a training module called Ranking Support Vector Machine in a voting Spy Na  X   X  ve Bayes Framework (RSSF). RSSF refines the rankers in a non-intervening manner by learning users X  feedback on the returned search results. The search performance of the trained ranker is shown to be adaptable to the users X  preferences in XML searching. We show empirically that the RSSF is able to improve the MRM significantly in the learning process and needs only a small set of training XML fragments. We demons trate that the trained MRM na X ve Bayes requires both positive and negative examples as training data, while we only have positive examples as indicated by the preference feedback as discussed in [4]. We empirically justified that each XML ranker has its individual strengths in attaining good precision and ranking quality in different XML preferences in [4]. In our experiments, we only used limited training datasets to train the MRM and generate the adaptive rankers for different users in the learning process. The RSSF is able to make the learning process efficient and the adaptive rankers effective, even when the amount of learning data is relatively small and sparse. Figure 2. A simplified architecture of the MRM prototype. Figure 2 shows the basic ideas and the logistics of how we search XML documents by using key-tags within the MRM prototype. When the user submits a key-ta g query, the search engine will search the XML databases by matching the submitted key-tags. The query results (i.e. a set of XML fragments) are obtained based on the relevance scores which are detailed [4]. The obtained results (i.e. a set of labelled XML fragments) are then passed to the MRM module for ranking and sent to the us er. The user X  X  feedback is then sent to the Voting SpyNB Training Module for adapting the standard rankings. For each fragment in the returned result, we measure the relevance scores and pass them to the MRM. The MRM collects user preferences and uses the RSSF algorithm to optimize the adaptive ranking functions in the top level by assigning different weights to the features of XRs in the middle level. The result of adaptive ranking constitutes an adaptive ranking towards the preferences tailored to the user. In this demonstration, we plan to set up the prototype in order to illustrate the principle and the eff ectiveness of our new strategies. First, we show the details of th e spy operations with some search queries in VSNB in a walking ma nner. This will give interesting insights of the effect of spying a nd voting. Second, we demonstrate the effectiveness of the MRM by showing the contributions of the rankers at the three levels. This will show the mechanism of adaptive ranking in our approach. We prepare 30 queries [7] for the DBLP dataset [5] and the queries for INEX 2006 [2] are modified from the 125 INEX 2006 topics. Specifically, we have four specific tasks detailed as follows. 1. We plan to illustrate step by step how Voting Spy Na X ve 
