 The phonological tier is a level of representation where not all speech sounds are present. For ex- X  X ello X  is simply the vowels in order without the consonants:  X  ai  X  a  X  a .

Tiers were originally introduced to describe tone systems in languages (Goldsmith, 1976), and subse-quently many variants of the theory were proposed (Clements, 1976; Vergnaud, 1977; McCarthy, 1979; Poser, 1982; Prince, 1984; Mester, 1988; Odden, 1994; Archangeli and Pulleyblank, 1994; Clements and Hume, 1995). Although these theories differ in their details, they each adopt the premise that repre-sentational levels exist which exclude certain speech sounds.

Computational work exists which incorporates and formalizes phonological tiers (Kornai, 1994; Bird, 1995; Eisner, 1997). There are also learning algorithms which employ them (Hayes and Wilson, 2008; Goldsmith and Riggle, to appear). However, there is no work of which the authors are aware that addresses the expressivity or properties of tier-based patterns in terms of formal language theory.
 This paper begins to fill this gap by defining Tier-Based Strictly Local (TSL) languages, which gen-eralize the Strictly Local languages (McNaughton and Papert, 1971). It is shown that TSL languages are necessarily star-free, but are incomparable with other known sub-star-free classes, and that natural groups of languages within the class are string exten-sion learnable (Heinz, 2010b; Kasprzik and K  X otzing, 2010). Implications and open questions for learn-ability and Optimality Theory are also discussed.
Section 2 reviews notation and key concepts. Sec-tion 3 reviews major subregular classes and their re-lationships. Section 4 defines the TSL languages, relates them to known subregular classes, and sec-tion 5 discusses the results. Section 6 concludes. We assume familiarity with set notation. A finite al-phabet is denoted  X  . Let  X  n ,  X   X  n ,  X   X  denote all sequences over this alphabet of length n , of length less than or equal to n , and of any finite length, re-spectively. The empty string is denoted  X  and | w | de-notes the length of word w . For all strings w and all nonempty strings u , | w | currences of u in w . For instance, | aaaa | language L is a subset of  X   X  . The concatenation of two languages L For L  X   X   X  and  X   X   X  , we often write L X  instead of L {  X  } .

We define generalized regular expressions (GREs) recursively. GREs include  X  ,  X  and each letter of  X  . If R and S are GREs then RS , R + S , R  X  S , R , and R  X  are also GREs. The language of a GRE is defined as follows. L (  X  ) =  X  . For all  X   X   X   X  {  X  } , L (  X  ) = {  X  } . If R and S are regular expressions then L ( RS ) = L ( R ) L ( S ) , L ( R + S ) = L ( R )  X  L ( S ) and L ( R  X  S ) = L ( R )  X  L ( S ) . Also, L ( R ) =  X   X   X  L ( R ) and L ( R  X  ) = L ( R )  X  . For example, the GRE  X  denotes the language  X   X  .
A language is regular iff there is a GRE defin-ing it. A language is star-free iff there is a GRE defining it which contains no instances of the Kleene star (*). It is well known that the star-free languages (1) are a proper subset of the regular languages, (2) are closed under Boolean operations, and (3) have multiple characterizations, including logical and al-gebraic ones (McNaughton and Papert, 1971).

String u is a factor of string w iff  X  x, y  X   X   X  such that w = xuy . If also | u | = k then u is a k -factor of w . For example, ab is a 2-factor of aaabbb . The function F within them.
 For example, F
The domain F  X   X  in the usual way: F k ( L ) =  X  w  X  L F k ( w ) . We also consider the function which counts k -factors up to some threshold t .

F k,t ( w ) = { ( u, n ) : u is a k -factor of w and For example F
A string u =  X  string w iff w  X   X   X   X  | u | = k we also say u is a k-subsequence of w . For example, ab is a 2-subsequence of caccccccccbcc . By definition  X  is a subsequence of every string in  X   X  . The function P  X  k maps words to the set of sub-sequences up to length k found in those words. P  X  k ( w ) = { u  X   X   X  k : u is a subsequence of w } For example P above, the domains of F languages in the usual way. Several important subregular classes of languages have been identified and their inclusion relation-ships have been established (McNaughton and Pa-pert, 1971; Simon, 1975; Rogers and Pullum, to Regular Star-Free appear; Rogers et al., 2010). Figure 1 summarizes those earlier results as well as the ones made in this paper. This section defines the Strictly Local (SL), Locally Threshold Testable (LTT) and Piece-wise Testable (PT) classes. The Locally Testable (LT) languages and the Strictly Piecewise (SP) lan-guages are discussed by Rogers and Pullum (to ap-pear) and Rogers et al. (2010), respectively. Readers are referred to these papers for additional details on all of these classes. The Tier-based Strictly Local (TSL) class is defined in Section 4.
 Definition 1 A language L is Strictly k -Local iff there exists a finite set S  X  F The symbols  X  and  X  invoke left and right word boundaries, respectively. A language is said to be Strictly Local iff there is some k for which it is Strictly k -Local. For example, let  X  = { a, b, c } and L = aa  X  ( b + c ) . Then L is Strictly 2-Local because for S = {  X  a, ab, ac, aa, b  X  , c  X  } and every w  X  L , every 2-factor of  X  w  X  belongs to S .

The elements of S can be thought of as the per-missible k -factors and the elements in F S are the forbidden k -factors. For example, bb and  X  b are forbidden 2-factors for L = aa  X  ( b + c ) .
More generally, any SL language L excludes ex-actly those words with any forbidden factors; i.e., L is the intersection of the complements of sets defined to be those words which contain a forbidden fac-tor. Note the set of forbidden factors is finite. This provides another characterization of SL languages (given below in Theorem 1).
 Formally, let the container of w  X   X   X   X   X  be For example, C (  X  a ) = a  X   X  . Then, by the immedi-ately preceding argument, Theorem 1 is proven. Theorem 1 Consider any Strictly k -Local language L . Then there exists a finite set of forbidden factors  X  S  X  F k (  X   X   X   X  ) such that L =  X  w  X   X  S C ( w ) . Definition 2 A language L is Locally t -Threshold k -Testable iff  X  t, k  X  N such that  X  w, v  X   X   X  , if F k,t ( w ) = F k,t ( v ) A language is Locally Threshold Testable iff there is some k and t for which it is Locally t -Threshold k -Testable.
 Definition 3 A language L is Piecewise k -Testable iff  X  k  X  N such that  X  w, v  X   X   X  , if P P A language is Piecewise Testable iff there is some k for which it is Piecewise k -Testable. This section provides the main results of this paper. 4.1 Definition The definition of Tier-based Strictly Local lan-guages is similar to the one for SL languages with the exception that forbidden k -factors only apply to elements on a tier T  X   X  , all other symbols are ig-nored. In order to define the TSL languages, it is necessary to introduce an  X  X rasing X  function (some-times called string projection), which erases sym-bols not on the tier.
 where u
For example, if  X  = { a, b, c } and T = { b, c } then E  X  1  X  n  X   X  T  X   X  iff u is a factor of E Then the TSL languages are defined as follows. Definition 4 A language L is Strictly k -Local on Tier T iff there exists a tier T  X   X  and finite set S  X  F k (  X  T  X   X  ) such that Again, S represents the permissible k -factors on the tier T , and elements in F the forbidden k -factors on tier T . A language L is a Tier-based Strictly Local iff it is Strictly k -Local on Tier T for some T  X   X  and k  X  N .
 To illustrate, let  X  = { a, b, c } , T = { b, c } , and S = {  X  b,  X  c, bc, cb, b  X  , c  X  } . Elements of S are the permissible k -factors on tier T . Elements of F (  X  T  X   X  )  X  S = { bb, cc } are the forbidden fac-tors on tier T . The language this describe includes words like aabaaacaaabaa , but excludes words like aabaaabaaacaa since bb is a forbidden 2-factor on tier T . This example captures the nature of long-distance dissimilation patterns found in phonology (Suzuki, 1998; Frisch et al., 2004; Heinz, 2010a). Let L guage.

Like SL languages, TSL languages can also be characterized in terms of the forbidden factors. Let the tier-based container of w  X   X  T  X   X  be C For example, C if w =  X  1  X  n  X  T  X  then C T ( w ) = In the case where w begins (ends) with a word boundary symbol then the first (last)  X   X  in the pre-vious GRE must be replaced with ( X   X  T )  X  .
 Theorem 2 For any L  X  TSL , let T, k, S be the tier, length, and permissible factors, respec-tively, and  X  S the forbidden factors. Then L = T Proof The structure of the proof is identical to the one for Theorem 1. 4.2 Relations to other subregular classes This section establishes that TSL languages prop-erly include SL languages and are properly star-free. Theorem 3 shows SL languages are necessarily TSL. Theorems 4 and 5 show that TSL languages are not necessarily LTT nor PT, but Theorem 6 shows that TSL languages are necessarily star-free.
 Theorem 3 SL languages are TSL.
 Proof Inclusion follows immediately from the defi-nitions by setting the tier T =  X  .
 The fact that TSL languages properly include SL ones follows from the next theorem.
 Theorem 4 TSL languages are not LTT. Proof It is sufficient to provide an example of a TSL language which is not LTT. Consider any threshold t and length k . Consider the TSL language L cussed in Section 4.1, and consider the words Clearly w 6 X  L F k (  X  w  X  ) = F k (  X  v  X  ) k -factors. In fact for any factor f  X  F it is the case that | w | F k,t (  X  w  X  ) = F k,t (  X  v  X  ) it would follow by definition that either both w, v  X  L D or neither w, v belong to L D , which is clearly false. Hence L Theorem 5 TSL languages are not PT.
 Proof As above, it is sufficient to provide an exam-ple of a TSL language which is not PT. Consider any length k and the language L Clearly w 6 X  L P  X  k ( w ) = P  X  k ( v ) words have exactly the same k-subsequences (for any k), both words are not in L does not belong to PT.
 Although TSL languages are neither LTT nor PT, Theorem 6 establishes that they are star-free. Theorem 6 TSL languages are star-free.
 Proof Consider any language L which is Strictly k -Local on Tier T for some T  X   X  and k  X  N . By Theorem 2, there exists a finite set  X  S  X  F such that L =  X  guages are closed under finite intersection and com-plement, it is sufficient to show that C free for all w  X   X  T  X   X  .

First consider any w =  X  ( X   X  T )  X  =  X   X  T  X   X  and  X   X  =  X  , the set C T ( w ) can be written as This is a regular expression without the Kleene-star. In the cases where w begins (ends) with a word boundary symbol, the first (last)  X  in the GRE above should be replaced with  X  T  X  . Since every C can be expressed as a GRE without the Kleene-star, every TSL language is star-free.

Together Theorems 1-4 establish that TSL lan-guages generalize the SL languages in a different way than the LT and LTT languages do (Figure 1). 4.3 Other Properties There are two other properties of TSL languages worth mentioning. First, TSL languages are closed under suffix and prefix. This follows immediately because no word w of any TSL language contains any forbidden factors on the tier and so neither does any prefix or suffix of w . SL and SP languages X  X ut not LT or PT ones X  X lso have this property, which has interesting algebraic consequences (Fu et al., 2011).
Next, consider that the choice of T  X   X  and k  X  N define systematic classes of languages which are TSL. Let L immediately that L (Heinz, 2010b). A string extension class is one which can be defined by a function f whose do-main is  X   X  and whose codomain is the set of all finite subsets of some set A . A grammar G is a particular finite subset of A and the language of the grammar is all words which f maps to a subset of G . For L set of permissible factors on tier T and the func-tion is w 7 X  F word is mapped to the set of k -factors present on tier T . (So here the codomain X  X he possible grammars X  X s the powerset of F
String extension classes have quite a bit of structure, which faciliates learning (Heinz, 2010b; Kasprzik and K  X otzing, 2010). They are closed un-der intersection, and have a lattice structure under the partial ordering given by the inclusion relation (  X  ). Additionally, these classes are identifiable in the limit from positive data (Gold, 1967) by an in-cremental learner with many desirable properties.
In the case just mentioned, the tier is known in advance. Learners which identify in the limit a class of TSL languages with an unknown tier but known k exist in principle (since such a class is of finite size), but it is unknown whether any such learner is efficient in the size of the input sample. Having established the main results, this section dis-cusses some implications for phonology in general, Optimality Theory in particular, and future research.
There are three classes of phonotactic constraints in phonology: local segmental patterns, long-distance segmental patterns, and stress patterns (Heinz, 2007). Local segmental patterns are SL (Heinz, 2010a). Long-distance segmental phono-tactic patterns are those derived from processes of consonant harmony and disharmony and vowel har-mony. Below we show each of these patterns belong to TSL. For exposition, assume  X  = { l,r,i,  X  o,u,o } .
Phonotactic patterns derived from attested long-distance consonantal assimilation patterns (Rose and Walker, 2004; Hansson, 2001) are SP; on the other hand, phonotactic patterns derived from at-tested long-distance consonantal dis similation pat-terns (Suzuki, 1998) are not (Heinz, 2010a). How-ever, both belong to TSL. Assimilation is obtained by forbidding disagreeing factors on the tier. For example, forbidding lr and rl on the liquid tier T = { l, r } yields only words which do not contain both [l] and [r]. Dissimilation is obtained by for-bidding agreeing factors on the tier; e.g. forbidding ll and rr on the liquid tier yields a language of the same character as L
The phonological literature distinguishes three kinds of vowel harmony patterns: those without neu-tral vowels, those with opaque vowels and those with transparent vowels (Bakovi  X c, 2000; Nevins, 2010). Formally, vowel harmony patterns without neutral vowels are the same as assimilatory conso-nant harmony. For example, a case of back harmony can be described by forbidding disagreeing factors { T = { i,  X  o,u,o } . If a vowel is opaque, it does not har-monize but begins its own harmony domain. For ex-ample if [i] is opaque, this can be described by for-tier. Thus words like lulolil  X  o are acceptable because oi is a permissible factor. If a vowel is transpar-ent, it neither harmonizes nor begins its own har-mony domain. For example if [i] is transparent (as in Finnish), this can be described by removing it from on tier T = {  X  o,u,o } . Thus words like lulolilu are ac-ceptable since [i] is not on the relevant tier. The rea-sonable hypothesis which follows from this discus-sion is that all humanly possible segmental phono-tactic patterns are TSL (since TSL contains SL). Additionally, the fact that L tersection has interesting consequences for Optimal-ity Theory (OT) (Prince and Smolensky, 2004). The intersection of two languages drawn from the same string extension class is only as expensive as the in-tersection of finite sets (Heinz, 2010b). It is known that the generation problem in OT is NP-hard (Eis-ner, 1997; Idsardi, 2006) and that the NP-hardness is due to the problem of intersecting arbitrarily many arbitrary regular sets (Heinz et al., 2009). It is un-known whether intersecting arbitrarily many TSL sets is expensive, but the results here suggest that it may only be the intersections across distinct L classes that are problematic. In this way, this work suggests a way to factor OT constraints characteri-zable as TSL languages in a manner originally sug-gested by Eisner (1997).

Future work includes determining automata-theoretic characterizations of TSL languages and procedures for deciding whether a regular set be-longs to TSL, and if so, for what T and k . Also, the erasing function may be used to generalize other subregular classes. The TSL languages generalize the SL languages and have wide application within phonology. Even though virtually all segmental phonotactic con-straints present in the phonologies of the world X  X  lan-guages, both local and non-local, fall into this class, it is striking how highly restricted (sub-star-free) and well-structured the TSL languages are.
 We thank the anonymous reviewers for carefully checking the proofs and for their constructive crit-icism. We also thank the participants in the Fall 2010 Formal Models in Phonology seminar at the University of Delaware for valuable discussion, es-pecially Jie Fu. This research is supported by grant #1035577 from the National Science Foundation.
