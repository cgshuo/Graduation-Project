 Wenxin Yang 1(  X  ) , Xin Wang 1 , Seyyed Mohammadreza Rahimi Taxi is an important way of transportation as it provides fast, secure and personalized travels for passengers. However, taxis spend 35%-60% of their time cruising along the roads looking for passengers [1]. With the advent of GPS tracking technology on taxis, improving taxis X  performance based on taxi GPS trajectory data becomes a promising solution [2,3,4,5,6]. A few challenges exist when using GPS trajectories to improve taxi performance. passengers are unknown and may vary as time changes. How to summarize and lenging. Secondly, most existing works do no t consider temporal factor and the route recommendation is not customized for the individual taxi. It may result in sending all daily trajectories of a taxi with 5 second interval could be around 4 GB [8]. Therefore, how to make recommendation based on the big trajectory data is still challenging. 
To address above problems, we propose a temporal probability grid network gen-erated from historical taxi trajectories. Then a profitable route recommendation algo-Specifically, the contributions of the paper are summarized as follows. 
First, we present a temporal probability grid network by modeling potential profit-ability of locations based on the taxis historical GPS data. The grid network separates dating the cruising taxis. 
Second, a profitable grid assignment algorithm is proposed based on the spatial and temporal factors of taxis. The assignment algorithm distributes the potential profitable grids among taxis according to the probability and capacity of grids. The assignment also balances the workload among a group of taxis. 
Third, a concept of the shortest expected cruising distance is proposed. The shortest expected cruising distance indicates the potential cruising distance from a taxi to po-Based on it, an Adaptive Shortest Expected Cruising Route (ASECR) algorithm, which can dynamically recommend the route, is implemented by finding the most potential temporal probability grid network will also be updated via different time stamps. 
Fourth, to efficiently handle the big trajectory data and support updating k nearest profitable grids, a new data structure kdS-tree is implemented in ASECR. In this section, we briefly review some related works on taxi route recommendation. Ge et L-length sub-routes from all pick-up points and recommends the best route among these multiple taxis. In [4], roads are divided into road segments based on the appearance fre-quency of passengers and vacant taxis are assigned to the locations based on the expecta-methods provide personalized route recommendation to individual taxi drivers based on do not consider other taxis that may lead to the overall imbalance taxi load. Definition 1. A taxi  X  is defined as a 5-tuple, denoted as: where  X   X  and  X   X  are the origin and destination of the taxi. origin to the destination.  X  is the starting time of the route show whether the taxi is occupied. Definition 2. A GPS-reading  X   X  of a taxi  X  is defined as a 3-tuple, denoted as: where  X  is the time stamp of the GPS-reading. and  X  is a Boolean value showing whether taxi is occupied by a passenger at time shold jectories into sub-trajectories, or called  X  X rips X . Definition 3. A trip of a taxi  X  is defined as a set of GPS readings, denoted as: Each trip is a sub-trajectory during which the taxi  X  is in service. Since GPS-readings from taxis are generally imprecise, directly matching the GPS-readings on existing road network could be problematic. In addition, the opera-tions on the existing road network are comput ational expensive due to the large amount of vertices (i.e. junctions) and edges (i.e. road segments) on the road network. In this paper, a temporal probabilistic grid network from historical GPS trajectories is defined to divide the interested region into small grids and summarize the temporal and spatial information from taxis X  GPS trajectories. Definition 4. A grid  X  is a 4-tuple, denoted as: where  X  is the center location of the grid  X  ,  X  and sengers of the grid  X  at the time  X  . Definition 5. A grid network  X  X  is a weighted directed graph, denoted as: connect two neighbor grids if consecutive G PS-readings exist between the two grids. Definition 6. Given a set of taxis T and the time interval performance starting between  X  2 X ,1 X   X  is defined as: where  X  X  X  X   X  X  X  X  X  X  X  X  X  X  X  is the travelled distance that a taxi is in cruising state. is the travelled distance that a taxi is in occupied state.  X  having a passenger on b o distance performance indic a paper, we assume the dista n Hence, the problem of fi Definition 7. Given a set o mend routes to a set of tax i imized. It is formulized as: where . X  X  X  This definition profit of all taxis is maxim i tances for all taxis. In othe r formance of the whole gro u Building the temporal pro b steps: primary grid networ k grids. 4.1 Primary Grid Net w To generate the primary gr i and GPS-readings are pro j lowing two steps briefly sh o overlaid with gridlines, sh o center of each grid becom e between two grid nodes if a tions: a) Two readings are p more than one GPS-readin g accurate for tracking GPS d consecutive GPS-readings w every pair of consecutive GPS-readings are plotted based on the following empirical distribution function: where  X  is the total number of the time intervals of two consecutive GPS-readings and  X  is the time interval between two consecutive GPS-readings less than interval threshold is set to the value when gradient of the curve dramatically dropped. Fig. 1 shows an example plot of the time interval distribution. In this example, we can assume that taxi is out-of-service if the time interval between two GPS-readings is over 420 seconds, i.e. 7 minutes, because the gradient of the curve dramatically des-cend and almost keep even after it. It means most time intervals between consecutive GPS-readings are less than 420 seconds.After identifying the time interval threshold for distances between two consecutive GPS-readings so as to determine the grid size. Fig. 2 shows a plot of the distribution of distances between consecutive GPS-readings. The gradient of distribution curve approaches to zero at around 550 meters, which represents the consecutive GPS-readings are at most 550 meters apart. Then 550 meters can be a good value for the grid size. 4.2 Calculation of Probability and Capacity of Grids Probability of finding a passenger in a location and capacity of a grid are two temporal properties will be calculated. The definitions are given as follows. Definition 8. The probability of finding a passenger in a grid  X  2 X ,1 X   X  is defined as: | X | where is the number of taxis showing pickups in grid  X  2 X ,1 X   X  | X | and is the total number of taxis entering grid  X  2 X ,1 X   X  . non-equilibrium of supply and demand. To avoid that, the capacity of a grid is defined to control the number of taxis assigned to it. Definition 9. The capacity of a grid  X  in a time interval where | X | is the number of pickups in the grid in the given time interval. route is recommended for each taxi. The recommended route connects assigned potential profitable grids with potential minimum cruising distance. The capacity of each released potential profitable grid is updated after a taxi picks up a passenger. 5.1 Potential Profitable Grids Assignment removes one potential profitable grid from it and assigns to the starving taxi. 5.2 Profitable Route Recommendation Profitable route recommendation is to find a route with the shortest expected cruising concept of the expected cruising distance is introduced. Then a method to search the route with the shortest expected cruising distance route is proposed. 5.2.1 Expected Cruising Distance However, the potential passengers X  locations are unknown in advance. To find a profitable route for each taxi, we find the passengers through the expected cruising distance. going to move along a route  X  X  X  X  X   X   X ,  X   X ,...,  X   X  in time interval may pick up passengers at any grid of the route. For each grid following equation: at previous grids but in grid  X   X  .  X  X  X  X  , where  X  X  X  X  X  X   X   X ,  X  X  X   X  is the Euclidean distance between grid grid  X   X  X  X  . The expected cruising distance could be calculated by integrating the dis-before picking up a passenger. We define the expected cruising distance as follows: interval  X  2 X ,1 X   X  is defined as: Definition 11. Given a taxi  X  and a set of potential profitable grids the shortest expected cruising distance in the time interval expected cruising distance of all possibl e routes which connect all grids in 5.2.3 Adaptive Shortest Expected Cruising Route (ASECR) Algorithm among them. However, the time complexity for this solution is O(n!), where n is the number of assigned grids. In this paper, a heuristic method ASECR is proposed with a threshold K on the number of assigned profitable grids in a recommended route. 
As shown in Fig. 3, for all empty taxis, the ASECR algorithm updates the potential cruising route based on taxi X  X  current locatio n and current time in line 6. The process grid network in line 7. 
The most time consuming operation of the ASECR algorithm is to generate and update a profitable route to each taxi based on its current time and location. However, the volume of GPS dataset is so large that the response time on a single computer is too long to be practically useful. Furthermore, the data cannot be all loaded into memory and will lead to frequent disk accesses. ASECR is built based on the grid network that partitions the space into regular regions and the simple structure is inherently suitable for parallel. Therefore, we utilize a kdS-tree data structure to tackle the problems. Algorithm findAdaptiveShorestExpectedCruisingRoute (T, G, k) 
Input: T is a set of empty taxis; G is the grid network. 1. for each taxi t in T { 2. while taxi t is empty { 3. currentGrid = t. getCurrentLocation( ); 4. assignGridstoTaxis (T, G, currentTime, currentGrid); 5. assignGrids = t.getTopKNearestAssignedGrid(k); 6. t.findShortestExpectedCruisingRoute(currentGrid, assignGrids); } 7. G.updateCapacity(t); } 5.2.4 kdS-Tree As mentioned, ASECR algorithm constantly updates the K nearest potential profitable grids based on current time and taxi X  X  current location. Finding K nearest neighborhood (kNN) has been discussed in many literatures and can be solved through spatial index structures, such as kd-tree[10] and R-tree[11]. However, these spatial index structures do not perform well for continuous kNN because they are not designed for frequently updating tree structures and efficiently querying profitable potential grids. A new data structure named kdS-tree is proposed to solve the problem. minimum enclosing circle is created to include all grids. Each node of kdS-tree contains two minimum enclosing circles are formed for two clusters. Based on the x-coordinate of 21 profitable potential grids. (b) shows the generated minimum enclosing circles based on the 21 grids, and (c) is the resulting kdS-tree. computed. The top-k nearest distances from th e taxi to the grids are recorded. Then a the current k-th nearest distance. Therefore, the upper bound for searching the k nearest grids is the radius of the query circle. Next, for each node whose splitting circle over-bound is updated. To speed up the query process, two pruning rules are proposed based on the branch-and-bound technique in [13]: 
The Downward Pruning rule removes tree nodes whose circle does not intersect the entire branch of that tree node can be pruned. The Upward Pruning rule removes tree nodes whose circle completely contains the query circle. If query circle is completely the current k nearest grids as well as its ancestor nodes. So this tree node and its an-cestor tree nodes can be pruned. The two rules can be specifically represented as: Downward Pruning: If dist ( TC, QC ) &gt; r( TC )+r( QC ) , then for each grid g dist ( g j , QC ) &gt; r ( QC ) . Therefore, the tree node of TC can be pruned. g TC and the center of QC (i.e. taxi location  X  , and dist ( g g candidates for the kNN and allows fast check and insertion. In this section, we evaluate the performance of ASECR algorithm on two real taxi data-runs. Two real taxi datasets are from San Francisco, USA and Shenzhen, China. The San the frequency of 10 minutes per reading and the Shenzhen dataset contains GPS trajecto-reading. Each GPS-reading includes fields: unique taxi ID, longitude and latitude, status Shenzhen dataset by using the grid determination method discussed above. 6.1 Parameter Study on the Number of Potential Profitable Grids K which the distance performance levels off. The reason is when K increases, more assigned distance performance stabilized. The reason is that most taxis would have already picked from Shenzhen dataset, which the level off K value is 6. with respect to different K values. As shown in Fig. 6, the running time increases with the increasing of K value. In practice, the distance performance and the computation Shenzhen dataset for the rest of experiments. 6.2 KdS-Tree Performance Pruning Eff ectiveness and Query Efficiency In this section, we first compare the query efficiency of the proposed kdS-tree over the kd-tree. The query efficiency is defined as the difference of the query response CPU time between kdS-tree and kd-tree over the query response CPU time of kd-tree. Fig. 7 outperforms the kd-tree and the query efficiency increases as K increases. The reason is more nodes which need to be examined by kd-tree than kdS-tree. Then we evaluate the effectiveness of the proposed pruning rules on the kdS-tree. Francisco dataset contains 1862 nodes. Table 1 shows the average number of visited kdS-tree nodes for one taxi to find K nearest profitable grids with and without the two pruning rules. The number of potential profitable grids K varies from 2 to 12. As ex-pected, the pruning rules can reduce the number of visited nodes. For example, when K is set to 8, 197 nodes are visited with pruning rules while 361 nodes are visited without eliminated during the search process. 6.3 Evaluation on Recommendation LCP method[3] and the baseline method. Here, the length of route for LCP method is baseline method recommends all taxis to their nearest profitable grid with respect of each grid X  X  capacity. In the experiments, we evaluate algorithms by simulating the real world events on every 2-hour time window of a day. 
Fig. 8 and 9 study the overall performance of the algorithms based on San Francisco data and Shenzhen data on weekday. The ASECR algorithm outperforms LCP method and baseline method in term of distance performance of taxis, which show the effec-nificant improvement for both distance performance. The other observation from Fig. 8 mance is higher than that of non-rush hours. This is because during rush hours, there are more passengers, which indicates more pick-up opportunities during rush hours. 
For further investigations, Fig. 10 and 11 give the average distance performance on figures. Different than weekdays, the distance performance of ASECR are better than LCP and baseline algorithms from 10:00 to 22:00 for both San Francisco and Shenzhen data. It shows that people take taxis at different times on weekends than weekdays. In this paper, a temporal profitable grid network is built by mining taxis historical GPS regarding the time and location of a taxi are changing over time we propose the ASECR algorithm, an adaptive rout e searching method based on the continuous movement of taxis. To improve the efficiency of the algorithm, a new data structure called kds-tree and map-reduce models are implemented in the algorithm. The experiments show that the method can provide better profitable routes to a group of taxis to improve the taxis performance. on the evaluating of the proposed algorithm on larger datasets. In addition, more efforts and query for the big data. 
