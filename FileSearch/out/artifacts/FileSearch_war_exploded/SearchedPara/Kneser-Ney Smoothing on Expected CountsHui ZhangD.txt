 In speech and language processing, smoothing is essential to reduce overfitting, and Kneser-Ney (KN) smoothing (Kneser and Ney, 1995; Chen and Goodman, 1999) has consistently proven to be among the best-performing and most widely used methods. However, KN smoothing assumes inte-ger counts, whereas in many NLP tasks, training instances appear with possibly fractional weights. Such cases have been noted for language model-ing (Goodman, 2001; Goodman, 2004), domain adaptation (Tam and Schultz, 2008), grapheme-to-phoneme conversion (Bisani and Ney, 2008), and phrase-based translation (Andr  X  es-Ferrer, 2010; Wuebker et al., 2012).

For example, in Expectation-Maximization (Dempster et al., 1977), the Expectation (E) step computes the posterior distribution over possi-ble completions of the data, and the Maximiza-tion (M) step reestimates the model parameters as if that distribution had actually been observed. In most cases, the M step is identical to estimating the model from complete data, except that counts of observations from the E step are fractional. It is common to apply add-one smoothing to the M step, but we cannot apply KN smoothing.

Another example is instance weighting. If we assign a weight to each training instance to indi-cate how important it is (say, its relevance to a par-ticular domain), and the counts are not integral, then we again cannot train the model using KN smoothing.

In this paper, we propose a generalization of KN smoothing (called expected KN smoothing) that operates on fractional counts, or, more precisely, on distributions over counts. We rederive all the steps of KN smoothing to operate on count distri-butions instead of integral counts. We demonstrate how to apply expected KN to two tasks where KN smoothing was not applicable before. One is lan-guage model domain adaptation, and the other is word alignment using the IBM models (Brown et al., 1993). In both tasks, expected KN smoothing improves performance significantly. Before presenting our method, we review KN smoothing on integer counts as applied to lan-guage models, although, as we will demonstrate in Section 7, KN smoothing is applicable to other tasks as well. 2.1 Maximum likelihood estimation Let u w stand for an n -gram, where u stands for the ( n 1) context words and w , the predicted word. Let c ( u w ) be the number of occurrences of u w . We use a bullet ( ) to indicate summa-tion over words, that is, c ( u ) = maximum-likelihood estimation (MLE), we max-imize obtaining the solution 2.2 Absolute discounting Absolute discounting (Ney et al., 1994)  X  on which KN smoothing is based  X  tries to generalize bet-ter to unseen data by subtracting a discount from each seen n -gram X  X  count and distributing the sub-tracted discounts to unseen n -grams. For now, we assume that the discount is a constant D , so that the smoothed counts are where n 1 + ( u ) = jf w j c ( u w ) &gt; 0 gj is the number of word types observed after context u , and q u ( w ) specifies how to distribute the subtracted discounts among unseen n -gram types. Maximizing the like-lihood of the smoothed counts  X  c , we get p ( w j u ) = How to choose D and q u ( w ) are described in the next two sections. 2.3 Estimating D by leaving-one-out The discount D can be chosen by various means; in absolute discounting, it is chosen by the method of leaving one out . Given N training instances, we form the probability of each instance under the MLE using the other ( N 1) instances as train-ing data; then we maximize the log-likelihood of all those instances. The probability of an n -gram token u w using the other tokens as training data is p loo ( w j u ) =
We want to find the D that maximizes the leaving-one-out log-likelihood where n r = jf u w j c ( u w ) = r gj is the number of n -gram types appearing r times, and C is a constant not depending on D . Setting the partial derivative with respect to D to zero, we have Solving for D , we have Theoretically, we can use iterative methods to op-timize D . But in practice, setting D to this upper bound is e ff ective and simple (Ney et al., 1994; Chen and Goodman, 1999). 2.4 Estimating the lower-order distribution Finally, q u ( w ) is defined to be proportional to an ( n 1)-gram model p  X  ( w j u  X  ), where u  X  is the ( n 2)-gram su ffi x of u . That is, where  X  ( u ) is an auxiliary function chosen to make the distribution p ( w j u ) in (2) sum to one.
Absolute discounting chooses p  X  ( w j u  X  ) to be the maximum-likelihood unigram distribution; un-der KN smoothing (Kneser and Ney, 1995), it is chosen to make p in (2) satisfy the following con-straint for all ( n 1)-grams u  X  w : Substituting in the definition of p mle from (1) and p from (2) and canceling terms, we get c ( u  X  w ) = Solving for p  X  ( w j u  X  ), we have Kneser and Ney assume the denominator is con-stant in w and renormalize to get an approximation where The computation of D and p  X  above made use of n and n r + , which presupposes integer counts. But in many applications, the counts are not integral, but fractional. How do we apply KN smoothing in such cases? In this section, we introduce count dis-tributions as a way of circumventing this problem. 3.1 Definition In the E step of EM, we compute a probability dis-tribution (according to the current model) over all possible completions of the observed data, and the expected counts of all types, which may be frac-tional. However, note that in each completion of the data, the counts are integral. Although it does not make sense to compute n r or n r + on fractional counts, it does make sense to compute them on possible completions.

In other situations where fractional counts arise, we can still think of the counts as expectations un-der some distribution over possible  X  X ealizations X  of the data. For example, if we assign a weight between zero and one to every instance in a cor-pus, we can interpret each instance X  X  weight as the probability of that instance occurring or not, yield-ing a distribution over possible subsets of the data.
Let X be a random variable ranging over pos-sible realizations of the data, and let c X ( u w ) be the count of u w in realization X . The expecta-tion E [ c X ( u w )] is the familiar fractional expected count of u w , but we can also compute the proba-bilities p ( c X ( u w ) = r ) for any r . From now on, for brevity, we drop the subscript X and understand c ( u w ) to be a random variable depending on X . The n r ( u ) and n r + ( u ) and related quantities also become random variables depending on X .

For example, suppose that our data consists of the following bigrams, with their weights: We can interpret this as a distribution over eight subsets (not all distinct), with probabilities: Then the count distributions and the E [ n r ] are: 3.2 E ffi cient computation How to compute these probabilities and expecta-tions depends in general on the structure of the model. If we assume that all occurrences of u w are independent (although in fact they are not al-ways), the computation is very easy. If there are k occurrences of u w , each occurring with proba-bility p i , the count c ( u w ) is distributed according to the Poisson-binomial distribution (Hong, 2013). The expected count E [ c ( u w )] is just distribution of c ( u w ) can be computed as follows: where s ( k , r ) is defined by the recurrence s ( k , r ) = We can also compute p ( c ( u w ) r ) = max the floor operation being needed to protect against rounding errors, and we can compute Since, as we shall see, we only need to compute these quantities up to a small value of r (2 or 4), this takes time linear in k . We are now ready to describe how to apply KN smoothing to count distributions. Below, we reca-pitulate the derivation of KN smoothing presented in Section 2, using the expected log-likelihood in place of the log-likelihood and applying KN smoothing to each possible realization of the data. 4.1 Maximum likelihood estimation The MLE objective function is the expected log-likelihood, whose maximum is 4.2 Absolute discounting If we apply absolute discounting to every realiza-tion of the data, the expected smoothed counts are E [  X  c ( u w )] = where, to be precise, the expectation E [ n 1 + ( u )] should be conditioned on c ( u w ) = 0; in practice, it seems safe to ignore this. The MLE is then 4.3 Estimating D by leaving-one-out It would not be clear how to perform leaving-one-out estimation on fractional counts, but here we have a distribution over realizations of the data, each with integral counts, and we can perform leaving-one-out estimation on each of these. In other words, our goal is to find the D that maximizes the expected leaving-one-out log-likelihood, which is just the expected value of (3): E [ L loo ] = E where C is a constant not depending on D . We have made the assumption that the n r are indepen-dent.

By exactly the same reasoning as before, we ob-tain an upper bound for D : In our example above, D = 1 . 52 4.4 Estimating the lower-order distribution We again require p  X  to satisfy the marginal con-straint (5). Substituting in (7) and solving for p  X  as in Section 2.4, we obtain the solution
For the example above, the estimates for the un-igram model p  X  ( w ) are 4.5 Extensions Chen and Goodman (1999) introduce three exten-sions to Kneser-Ney smoothing which are now standard. For our experiments, we used all three, for both integral counts and count distributions. 4.5.1 Interpolation In interpolated KN smoothing, the subtracted dis-counts are redistributed not only among unseen events but also seen events. That is,  X  c ( u w ) = max f 0 , c ( u w ) D g + n 1 + ( u ) Dp  X  In this case,  X  ( u ) is always equal to one, so that q ( w ) = p  X  ( w j u  X  ). (Also note that (6) becomes an exact solution to the marginal constraint.) The-oretically, this requires us to derive a new estimate for D . However, as this is not trivial, nearly all im-plementations simply use the original estimate (4).
On count distributions, the smoothed counts be-come
In our example, the smoothed counts are: which give the smoothed probability estimates: 4.5.2 Modified discounts Modified KN smoothing uses a di ff erent discount D r for each count r &lt; 3, and a discount D 3 + for counts r 3. On count distributions, a similar ar-gument to the above leads to the estimates: One side-e ff ect of this change is that (6) is no longer the correct solution to the marginal con-straint (Teh, 2006; Sundermeyer et al., 2011). Al-though this problem can be fixed, standard imple-mentations simply use (6). 4.5.3 Recursive smoothing In the original KN method, the lower-order model p  X  was estimated using (6); recursive KN smoothing applies KN smoothing to p  X  . To do this, we need to reconstruct counts whose MLE is (6). On integral counts, this is simple: we generate, for each n -gram type v u  X  w , an ( n 1)-gram token u  X  w , for a total of n 1 + ( u  X  w ) tokens. We then apply KN smoothing to these counts.

Analogously, on count distributions, for each n -gram type v u  X  w , we generate an ( n 1)-gram to-ken u  X  w with probability p ( c ( v u  X  w ) &gt; 0). Since
E [ c ( u  X  w )] = this has (11) as its MLE and therefore satisfies the marginal constraint. We then apply expected KN smoothing to these count distributions.

For the example above, the count distributions used for the unigram distribution would be: 4.6 Summary In summary, to perform expected KN smoothing (either the original version or Chen and Good-man X  X  modified version), we perform the steps listed below: compute count distributions x 3.2 estimate discount D (10) (13) estimate lower-order model p  X  (11) x 4.5.3 compute smoothed counts  X  c (8) (12) compute probabilities p (9)
The computational complexity of expected KN is almost identical to KN on integral counts. The main addition is computing and storing the count distributions. Using the dynamic program in Sec-tion 3.2, computing the distributions for each r is linear in the number of n -gram types, and we only need to compute the distributions up to r = 2 (or r = 4 for modified KN), and store them for r = 0 (or up to r = 2 for modified KN). Witten-Bell (WB) smoothing is somewhat easier than KN to adapt to fractional counts. The SRI-LM toolkit (Stolcke, 2002) implements a method which we call fractional WB : where n 1 + ( u ) is the number of word types ob-served after context u , computed by ignoring all weights. This method, although simple, inconsis-tently uses weights for counting tokens but not types. Moreover, as we will see below, it does not perform as well as expected KN.

The only previous adaptation of KN smoothing to fractional counts that we are aware of is that of Tam and Schultz (2008) and Bisani and Ney (2008), called fractional KN . This method sub-tracts D directly from the fractional counts, zero-ing out counts that are smaller than D . The dis-count D must be set by minimizing an error metric on held-out data using a line search (Tam, p. c.) or Powell X  X  method (Bisani and Ney, 2008), requiring repeated estimation and evaluation of the language model. By contrast, we choose D by leaving-one-out. Like KN on integral counts, our method has a closed-form approximation and requires neither held-out data nor trial and error. N -gram language models are widely used in appli-cations like machine translation and speech recog-nition to select fluent output sentences. Although they can easily be trained on large amounts of data, in order to perform well, they should be trained on data containing the right kind of language. For ex-ample, if we want to model spoken language, then we should train on spoken language data. If we train on newswire, then a spoken sentence might be regarded as ill-formed, because the distribution of sentences in these two domains are very di ff er-ent. In practice, we often have limited-size training data from a specific domain, and large amounts of data consisting of language from a variety of domains (we call this general-domain data). How can we utilize the large general-domain dataset to help us train a model on a specific domain?
Many methods (Lin et al., 1997; Gao et al., 2002; Klakow, 2000; Moore and Lewis, 2010; Ax-elrod et al., 2011) rank sentences in the general-domain data according to their similarity to the in-domain data and select only those with score higher than some threshold. Such methods are ef-fective and widely used. However, sometimes it is hard to say whether a sentence is totally in-domain or out-of-domain; for example, quoted speech in a news report might be partly in-domain if the do-main of interest is broadcast conversation. Here, we propose to assign each sentence a probability to indicate how likely it is to belong to the domain of interest, and train a language model using ex-pected KN smoothing. We show that this approach yields models with much better perplexity than the original sentence-selection approach. 6.1 Method One of the most widely used sentence-selection approaches is that of Moore and Lewis (2010). They first train two language models, p in on a set of in-domain data, and p out on a set of general-domain data. Then each sentence w is assigned a score They set a threshold on the score to select a subset.
We adapt this approach as follows. After selec-tion, for each sentence in the subset, we use a sig-moid function to map the scores into probabilities: Figure 1: On the language model adaptation task, expected KN outperforms all other methods across all sizes of selected subsets. Integral KN is ap-plied to unweighted instances, while fractional WB, fractional KN and expected KN are applied to weighted instances.
 Then we use the weighted subset to train a lan-guage model with expected KN smoothing. 6.2 Experiments Moore and Lewis (2010) test their method by partitioning the in-domain data into training data and test data, both of which are disjoint from the general-domain data. They use the in-domain training data to select a subset of the general-domain data, build a language model on the se-lected subset, and evaluate its perplexity on the in-domain test data. Here, we follow this experimen-tal framework and compare Moore and Lewis X  X  unweighted method to our weighted method.

For our experiments, we used all the English data allowed for the BOLT Phase 1 Chinese-English evaluation. We took 60k sentences (1.7M words) of web forum data as in-domain data, further subdividing it into 54k sentences (1.5M words) for training, 3k sentences (100k words) for testing, and 3k sentences (100k words) for fu-ture use. The remaining 12.7M sentences (268M words) we treated as general-domain data.

We trained trigram language models and com-pared expected KN smoothing against integral KN smoothing, fractional WB smoothing, and frac-tional KN smoothing, measuring perplexity across various subset sizes (Figure 1). For fractional KN, for each subset size, we optimized D to mini-mize perplexity on the test set to give it the great-est possible advantage; nevertheless, it is clearly the worst performer. Expected KN consistently gives the best perplexity, and, at the optimal sub-set size, obtains better perplexity (148) than the other methods (156 for integral KN, 162 for frac-tional WB and 197 for fractional KN). Finally, we note that integral KN is very sensitive to the subset size, whereas expected KN and the other methods are more robust. In this section, we show how to apply expected KN to the IBM word alignment models (Brown et al., 1993). This illustrates both how to use expected KN inside EM and how to use it beyond language modeling. Of course, expected KN can be applied to other instances of EM besides word alignment. 7.1 Problem Given a French sentence f = f 1 f 2 f m and its English translation e = e 1 e 2 e n , an alignment a is a sequence a 1 , a 2 ,..., a m , where a i is the index of the English word which generates the French word f i , or NULL. As is common, we assume that each French word can only be generated from one English word or from NULL (Brown et al., 1993; Och and Ney, 2003; Vogel et al., 1996).

The IBM models and related models define probability distributions p ( a , f j e , X  ), which model how likely a French sentence f is to be generated from an English sentence e with word alignment a . Di ff erent models parameterize this probability dis-tribution in di ff erent ways. For example, Model 1 only models the lexical translation probabilities: Models 2 X 5 and the HMM model introduce addi-tional components to model word order and fer-tility. All, however, have the lexical translation model p ( f j j e i ) in common. It also contains most of the model X  X  parameters and is where overfit-ting occurs most. Thus, here we only apply KN smoothing to the lexical translation probabilities, leaving the other model components for future work. 7.2 Method The f and e are observed, while a is a latent vari-able. Normally, in the E step, we collect expected counts E [ c ( e , f )] for each e and f . Then, in the M step, we find the parameter values that maximize their likelihood. However, MLE is prone to over-fitting, one symptom of which is the  X  X arbage col-lection X  phenomenon where a rare English word is wrongly aligned to many French words.

To reduce overfitting, we use expected KN smoothing during the M step. That is, during the E step, we calculate the distribution of c ( e , f ) for each e and f , and during the M step, we train a language model on bigrams ef using expected KN smoothing (that is, with u = e and w = f ). This gives a smoothed probability estimate for p ( f j e ).
One question that arises is: what distribution to use as the lower-order distribution p  X  ? Following common practice in language modeling, we use the unigram distribution p ( f ) as the lower-order distribution. We could also use the uniform distri-bution over word types, or a distribution that as-signs zero probability to all known word types. (The latter case is equivalent to a backo ff language model, where, since all bigrams are known, the lower-order model is never used.) Below, we com-pare the performance of all three choices. 7.3 Alignment experiments We modified GIZA ++ (Och and Ney, 2003) to perform expected KN smoothing as described above. Smoothing is enabled or disabled with a command-line switch, making direct comparisons simple. Our implementation is publicly available
We carried out experiments on two language pairs: Arabic to English and Czech to English. For Arabic-English, we used 5.4 + 4.3 million words of parallel text from the NIST 2009 con-pairs (LDC2006E86) for evaluation. For Czech-English, we used all 2.0 + 2.2 million words of training data from the WMT 2009 shared task, and 515 word-aligned sentence pairs (Bojar and Prokopov  X  a, 2006) for evaluation.
 For all methods, we used five iterations of IBM Models 1, 2, and HMM, followed by three iter-ations of IBM Models 3 and 4. We applied ex-pected KN smoothing to all iterations of all mod-els. We aligned in both the foreign-to-English and English-to-foreign directions and then used the grow-diag-final method to symmetrize them (Koehn et al., 2003), and evaluated the alignments using F-measure against gold word alignments.
As shown in Table 1, for KN smoothing, in-terpolation with the unigram distribution performs the best, while for WB smoothing, interestingly, interpolation with the uniform distribution per-forms the best. The di ff erence can be explained by the way the two smoothing methods estimate p  X  . Consider again a training example with a word e that occurs nowhere else in the training data. In WB smoothing, p  X  ( f ) is the empirical unigram distribution. If f contains a word that is much more frequent than the correct translation of e , then smoothing may actually encourage the model to wrongly align e with the frequent word. This is much less of a problem in KN smoothing, where p  X  is estimated from bigram types rather than bigram tokens.

We also compared with variational Bayes (Ri-ley and Gildea, 2012) and fractional KN. Overall, expected KN performs the best. Variational Bayes is not consistent across di ff erent language pairs. While fractional KN does beat the baseline for both language pairs, the value of D , which we op-timized D to maximize F1, is not consistent across language pairs: as shown in Figure 2, on Arabic-English, a smaller D is better, while for Czech-English, a larger D is better. By contrast, expected KN uses a closed-form expression for D that out-performs the best performance of fractional KN.
Table 2 shows that, if we apply expected KN smoothing to only selected stages of training, adding smoothing always brings an improvement, Figure 2: Alignment F1 vs. D of fractional KN smoothing for word alignment.
 Table 2: Smoothing more stages of training makes alignment accuracy go up. For each row, we smoothed all iterations of the models indicated. Key: H = HMM model; = smoothing enabled;  X  = smoothing disabled. with the best setting being to smooth all stages. This shows that expected KN smoothing is consis-tently e ff ective. It is also interesting to note that smoothing is less helpful for the fertility-based Models 3 and 4. Whether this is because modeling fertility makes them less susceptible to  X  X arbage collection, X  or the way they approximate the E step makes them less amenable to smoothing, or an-other reason, would require further investigation. 7.4 Translation experiments Finally, we ran MT experiments to see whether the improved alignments also lead to improved trans-lations. We used the same training data as before. For the Arabic-English tasks, we used the NIST 2008 test set as development data and the NIST 2009 test set as test data; for the Czech-English tasks, we used the WMT 2008 test set as develop-ment data and the WMT 2009 test set as test data.
We used the Moses toolkit (Koehn et al., 2007) to build MT systems using various alignments (for expected KN, we used the one interpolated with the unigram distribution, and for fractional WB, we used the one interpolated with the uni-form distribution). We used a trigram language model trained on Gigaword (AFP, AP World-stream, CNA, and Xinhua portions), and minimum error-rate training (Och, 2003) to tune the feature weights.

Table 1 shows that, although the relationship between alignment F1 and B leu is not very con-sistent, expected KN smoothing achieves the best B leu among all these methods and is significantly better than the baseline ( p &lt; 0 . 01). For a long time, and as noted by many authors, the usage of KN smoothing has been limited by its restriction to integer counts. In this paper, we ad-dressed this issue by treating fractional counts as distributions over integer counts and generalizing KN smoothing to operate on these distributions. This generalization makes KN smoothing, widely considered to be the best-performing smoothing method, applicable to many new areas. We have demonstrated the e ff ectiveness of our method in two such areas and showed significant improve-ments in both.
 We thank Qing Dou, Ashish Vaswani, Wilson Yik-Cheung Tam, and the anonymous reviewers for their input to this work. This research was sup-ported in part by DOI IBC grant D12AP00225.
