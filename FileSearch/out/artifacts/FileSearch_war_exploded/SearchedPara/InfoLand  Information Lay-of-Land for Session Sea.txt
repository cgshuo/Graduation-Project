 Search result clustering (SRC) is a post-retrieval process that hierarchically organizes search results. The hierarchical structure offers overview for the search results and displays an  X  X nformation lay-of-land X  that intents to guide the users throughout a search session. However, SRC hierarchies are sensitive to query changes, which are common among queries in the same session. This instability may leave users seemly random overviews throughout the session. We present a new tool called InfoLand that integrates external knowledge from Wikipedia when building SRC hierarchies and increase their stability. Evaluation on TREC 2010-2011 Session Tracks shows that InfoLand produces more stable results organiza-tion than a commercial search engine.
 H.3.3 [ Information Systems ]: Information Storage and Retrieval X  Information Search and Retrieval Search Results Clustering; Session Search
Search result clustering (SRC) [1, 4] is a post-retrieval pro-cess that hierarchically organizes search results. It is used in Meta search engines such as Yippy.com (previously known as Clusty). SRC hierarchies display an information  X  X ay of land X  for search and help users to quickly locate relevant documents from piles of search results.
 Session search has recently attracted more attentions in Information Retrieval (IR) research. A session usually con-tains multiple queries. These queries are usually highly re-lated to a main topic and to each other. Ideal SRC hier-archies generated for queries in the same session should be highly related too. However, the state-of-the-art SRC hi-erarchies are usually sensitive to query changes and hence proaches often produce mixed-initiative clusters and reduce hierarchy stability.

We propose a novel hierarchy construction tool, InfoLand, which injects world knowledge to an existing hierarchy to increase its stability. Evaluation over TREC 2010 and 2011 Session tracks shows that InfoLand produces significantly more stable stable SRC hierarchies than Yippy.
We propose three major steps in building stable concept hierarchies: concept extraction, mapping to Wiki entries, and hierarchy construction. First, a single query q and its search results D are processed and a set of concepts C that best represents D are extracted by algorithms described in [5]. Concepts from the hierarchy built by Yippy are also included in C .

Next, for a concept c  X  C , InfoLand maps it to its most relevant Wiki entry e , which is called a reference Wiki entry . We built a Lemur 2 index over the entire Wikipedia collection in ClueWeb09. 3 A concept c is sent as a query to the index and the top 10 returned Wiki pages are examined. The ti-tles of these pages are considered as candidate Wiki entries for c and are denoted as { e i } , i = 1  X  X  X  10. Due to ambiguity in natural language, the top returned results may not be re-lated to the current search session. We hence disambiguate Wiki entries by measuring the similarity between the entires and the topics mentioned in the search queries. The similar-ity is measured by by mutual information between an entry candidate e i and all concepts C for query q : where log(1+ ctf ( c ))  X  idf ( c ) measures the importance of con-cept c in representing the main topic in D . Point-wise Mu-tual Information (PMI) measures the similarity between e i where df( x ; E) is the document frequency of term x in corpus E and | E | is the collection size.

The most relevant Wiki entry to the query is selected as the reference Wiki entry . We obtain reference Wiki entries e x and e y for concepts x and y and decide whether x sub-sumes y based on the following cases: (a) e x is a Wiki category: From e y  X  X  Wiki page, we extract the Wiki categories that e y belongs to. We call the list of Wiki categories for e y super categories and denote them as S . x subsumes y if e x  X  X  y . (b) Only e y is a Wiki category: x does not subsumes y . (c) Neither e x nor e y is a Wiki category: We form super category sets for both S y and S x . For each s yi  X  S y , we extract its super categories and form a super-supercategory set SS y for e y . We then measure the normalized overlap be-where count( s ; s  X  S x and s  X  SS y ) denotes the number of categories that appear in both S x and SS y . If Score sub ( x, y ) for a potential parent-child pair ( x, y ) is above 0.6, we con-sider x subsumes y .

Lastly, based on the subsumption relationship identified, we form SRC hierarchies as in [3]. http://www.lemurproject.org. http://www.lemurproject.org/clueweb09.php/.

