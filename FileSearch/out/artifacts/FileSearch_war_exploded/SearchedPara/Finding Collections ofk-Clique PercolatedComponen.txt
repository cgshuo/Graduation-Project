 During the last decade, graph mining ha s received an increasing interest in the data mining community. More recently, seve ral works have considered the mining of enriched graphs where attributes are associ ated to the vertices. These works led to interesting results, for instance in clustering [4,8,15,16], dense graph min-ing [7,12] or graph matching [14].

In this paper, we focus on the special case where the domain of the attributes is Boolean and we propose to extract collections of components called k -clique percolated components [1]. More precisely, we define a pattern as a Collection of Homogeneous k -clique Percolated components (CoHoP), where homogeneity means that the vertices in all components share a common set of Boolean at-tributes having value true . A CoHoP pattern must also satisfy two additional constraints: it must contain more than a given number of k -clique percolated components and the vertices must ha ve in common more than a given number of attributes set to true .A k -clique percolated component has been defined in [1] as a union of cliques of size k connected by overlaps of k  X  1 vertices (we recall the more formal definition in the next section), and since then, it has been widely accept as one structure that can be used to represent the notion of community. A CoHoP, as introduced here, can thus be interpreted as a set of communities, where elements in all communities share similar Boolean properties.
 In this paper, we also present a sound and complete algorithm to extract the CoHoPs, and we show on two datasets (a coauthor graph and a gene interaction graph) that these patterns can be used to capture useful information, depicting underlying hidden structure of the graph.

The rest of the paper is organized as follo ws. Section 2 introduces the definition of the CoHoP patterns. The extraction algorithm is described in Section 3 and the experiments are reported in Sectio n 4. The related works are discussed in Section 5, and Section 6 briefly concludes. In this section, we first define the dataset structure and recall the notion of k -clique percolated component. Then, we define the targeted patterns, that are collections of k -clique percolated components.

Graphs where information are associat ed to vertices have been used in dif-ferent research areas under various names, e.g. attributed graphs [12,14,15,16], itemset-associated graphs [2], informative graphs [4,8], graphs with feature vec-tors [7]. In this paper, we use the term attributed graphs, and restrict ourselves to Boolean attributed graphs.
 Definition 1 (Boolean attributed graph). A Boolean attributed graph is denoted G =( V , E , A , F ) where V is the set of vertices, E is the set of edges, A is the set of Boolean attributes, and F : V X  2 A is the function returning for a vertex the set of attributes having value true.
 For notational convenience, let us define the following functions.
 Definition 2 (Functions vert and Atb ). Let x be an attribute. The function vert ( x )= { v  X  X  | x  X  X  ( v ) } returns the set of vertices having value true for the attribute x .Let M be a collection of sets of vertices. Then, Atb ( M )= Let G be an attributed graph. We denote G [ V ] the subgraph of G induced by the set of vertices V , i.e., G restricted to the vertices in V . The notation G X denotes the subgraph induced by the set of vertices having value true for all attributes in X , i.e., G X = G [  X  x  X  X vert ( x )].

A clique is a set of vertices in which every pair of distinct vertices is connected by an edge and a k -clique is a clique of size k .A k -clique percolated component (termed also k -clique-community in [11]) is a relaxed version of the concept of cliques. The definition of k -clique percolated component given in [1] can be reformulated as follows using an equivalence relation over the cliques. Definition 3 (Adjacency relation). Let G be an attributed graph and R be the adjacency relation over the k -cliques in G .Two k -cliques are related by R if and only if they have an intersection of at least k  X  1 vertices. Let R t be the transitive closure of R .
 The relation R is symmetric and reflexive, so R t is symmetric, reflexive, and transitive. Consequently, R t is an equivalence relation.
 Definition 4 ( k -clique Percolated Component ( k -PC)). A k -PC is the union of all k -cliques in a class of equivalence over R t .
 In other words, a k -PC is the union of all k -cliques that can be reached from each other through a series of adjacent k -cliques. We will denote C kpc ( G ) the collection of all k -PCs in an attributed graph G . Compared to other fault-tolerant clique definitions, the particularity of k -PC is to enforce the fact that each vertex can be reached from any other vertex through well connected subset of vertices [11]. In the context of social networks, it represents a community where each person, even if not directly connected to anot her member, can easily find a way to com-municate with him/her. Note also that with this definition, a clique is contained in at most one k -PC. However, since a vertex can be in several cliques sharing less than k  X  1 vertices, it can be part of several k -PCs.

As mentioned in the introduction, our purpose is to explore the relation be-tween strongly connected s ubgraphs. To perform this task we extract collections of set of vertices such that, with k ,  X  ,and  X  three user defined positive in-tegers, (1) all vertices are homogeneous, more precisely, they have at least  X  true-valued attributes in common, (2) the collection contains at least  X k -PCs and (3) all k -PCs showing the same true-valued attributes are in the collection. These patterns are defined more precisely as follows.
 Definition 5 (Collection of Homogeneous k -PCs (CoHoP)). Let k ,  X  , and  X  be three strictly positive integers, and G be an attributed graph. A collection M of sets of vertices is a CoHoP if and only if:  X  | Atb ( M ) | X   X  (the vertices in M are homogeneous);  X  M contains at least  X k -PCs, i.e., | M | X   X  ;  X  M is the collection of all k -PCs in G Atb ( M ) , i.e., M contains all k -PCs Note that due to the constraint on homogeneity, a k -PC which is formed by vertices sharing less than  X  attributes cannot be part of a CoHoP. We first present a naive algorithm enumerating all subgraphs which might con-tain a pattern. Then we show how to safely reduce the subgraphs enumeration, and we describe the corresponding algorithm. Finally we describe implementa-tion techniques.
 Naive Algorithm While Definition 5 is very declarative, we establish the following more construc-tive definition of the CoHoPs.
 Lemma 1. Let k ,  X  ,and  X  be three strictly positive integers, and G be an at-tributed graph with A the set of Boolean attributes in G . A collection M of sets of vertices is a CoHoP if and only if there exists X  X  X  such that M = C kpc ( G X ) , |
X | X   X  ,and | M | X   X  . Proof. First, consider a CoHoP M . By direct application of Definition 5, there exists X = Atb ( M )  X  X  such that M = C kpc ( G X ), | X | X   X  ,and | M | X   X  . Now we prove the reciprocal. Consider X a set of attributes satisfying | X | X   X  , and M a collection of sets of vertices such that M = C kpc ( G X )and | M | X   X  .Since M = C kpc ( G X ), then X  X  Atb ( M ). So G Atb ( M ) is a subgraph of G X and since all vertices in M are also in G Atb ( M ) ,wehave M = C To compute all patterns, a naive algorithm can enumerate the subgraphs G e = G
X for all non empty set of attributes X ,andforeach G e computes all k -PCs in
G k -PCs is a CoHoP. From Lemma 1, this algorithm is correct. However, with this enumeration technique, 2 |A|  X  1 subgraphs will have to be enumerated (2 |A|  X  1 non empty subsets of A ). The following lemmas are used to reduce the collection of subgraphs that has to be enumerated.
 Reducing the Collection of Graphs to Be Enumerated First, we introduce the notion of k -max-clique which is a clique having at least k vertices and not being a subset of any other clique. The collection of all k -max-cliques in an attributed graph G is denoted C kmax ( G ).

The next lemma states that we can disca rd the attributed graphs that do not contain at least  X k -max-cliques, and also their subgraphs.
 Lemma 2. Let G be an attributed graph. If G does not contain at least  X k -max-clique s, then neither G nor any subgraph of G can contain a CoHoP.
 Proof. Let G be an attributed graph having less than  X k -max-cliques. Since all k -cliques in a k -max-clique are in the same k -PC, then the number of k -max-cliques cannot be greater than the number of k -PCs. So, G cannot contain  X  k -PCs and thus cannot contain a CoHoP. The same holds for any subgraph of G , since a subgraph of G cannot contain more k -max-cliques than G .
 According to the following lemma, we can avoid the enumeration of graphs (and their subgraphs) if they are induced by sets of attributes shared by not enough vertices to contain a CoHoP.
 Lemma 3. Let G be an attributed graph and x an attribute shared by less than k vertices in G . Then, the graph G { x } and all its subgraphs cannot contain a CoHoP.
 Proof. Straightforward since G { x } contains less than k vertices.
 The following property allows to reduce the set of vertices under consideration. Lemma 4. Let G be an attributed graph. Only vertices in a k -max-clique of G can form a CoHoP in G or in any subgraph of G .
 Proof. Direct, as a vertex which is not in a k -max-clique cannot be in any k -PC. Algorithm Description A recursive function FindCoHoP , that takes advantage of Lemmas 2, 3, and 4 to prune the search space, is presented as Algorithm 1. The input of the algorithm for the first call is the whole attributed graph, i.e., G e = G ,and A c ,thesetof candidate attributes remaining under consideration to find attributes shared by subgraph, is A .

Line 1 checks that there is at least  X k -max-cliques in G e .Ifitisnotthe case,fromLemma2nosubgraphof G e including G e itself can contain a k -PC. Line 2 computes the set of vertices which might contain a k -PC (i.e., V r )as the union of all k -max-cliques in G e according to Lemma 4. Line 3 checks (1) if there is at least  X  attributes shared by all vertices in V r ( | X  v  X  X  r F ( v ) | X   X  )and is a CoHoP, and is output on line 4 .On line 5 , attributes from A c shared by all vertices in V r are removed from A c . Removing these attributes does not change the collection of enumerated subgraphs, since if we pick such an attribute FindCoHoP ( line 9 ). On line 6 , attributes shared by less than k vertices in V r are removed from A c , according to Lemma 3. This avoids unnecessary calls to FindCoHoP with subgraphs having not enough vertices. Lines 7 to 9 perform a standard recursive enumeration scheme to produce in a depth first way, and element by element (the x that is picked), all subsets of A c . While A c is not empty, an attribute x is picked ( line 8 ) and function FindCoHoP is called with the subgraph of G e induced by the set of vertices in V r sharing attribute x , i.e., G [ V r  X  vert ( x )].
 Algorithm 1. FindCoHoP Theorem 1. Algorithm 1 returns all CoHoP patterns and only CoHoP patterns. Proof. Lemma 1 and Lemmas 2 to 4 (safety of the pruning) ensure the com-pleteness of Algorithm 1. Line 3 ensures its soundness.
 Note that a given CoHoP might be output several times by Algorithm 1. Such duplicates are removed in a sim ple post-processing step. Implementation We give here some details about the implementation of Algorithm 1 used in the experiments presented in the next section.

The algorithm used to compute the collection of k -PCs in a graph is the one described in [11] and also used for instance in [3]. It first builds a matrix representing the adjacency relation between the k -cliques, and then compute the connected components of k -cliques (the k -PCs) using this matrix. The algorithm used to compute the k -max-cliques is CLIQUES [13]. Both the collection of k -computed only once for a given attribut ed graph on respectively lines 1 and 3, and are reused on lines 2 and 4. Moreover, the computation of the k -PCs is done on line 3 only if the vertices in V r have at least  X  attributes in common (i.e., | X 
Finally, since vertices in a pattern must share at least one attribute (  X   X  1), in general it is not necessary to compute the k -max-cliques of the whole graph. So, the first level of the enumeration is computed using only lines 6 to 9 of Algorithm 1, with V r the set of all vertices of the input attributed graph. In this section we report experiments on th ree datasets built using real data: two bibliographic datasets (DBLP 1 and DBLP 2 ), and a biological dataset (BioData). The size and density of these datasets are presented in Table 1. All experiments were performed on a PC running GNU/Linux with a 3 GHz Core 2 Duo CPU and 8 GB of main memory installed (no more than 2 GB where used). We first describe the datasets, then, we illustrate the interest of the CoHoPs by mean of three typical examples of pattern found. Next, we discuss the performances of the algorithm and parameter setting.
 Collaboration Network: DBLP 1 and DBLP 2 datasets have been built using the public DBLP database 1 . This database contains rather exhaustive bibli-ographic information on most computer science conferences and journals. We built our datasets using all conferences and journal up to august 2011. A vertex corresponds to an author and the attributes associated to a vertex are the con-ferences and journals in which the author has published. An edge between two authors represents the fact that they have coauthored some papers.

For DBLP 1 we wanted a large dataset to assess the performances of extraction algorithm. Consequently, in DBLP 1 , we put an edge to represent each pair of coauthors, and for the attributes, an author is associated to all conferences and journals in which she/he has published. This led to a dataset containing 997 , 050 authors and 5 , 963 conferences/journals.

The dataset DBLP 2 was targeted to obtained more meaningful patterns. Thus, in DBLP 2 , we focused on pairs of authors that have been collaborating more sig-nificantly, and we put an edge between two authors if they were coauthors of at least three articles. We also required a stronger relationship between authors and conferences/journals. Indeed, we associated a conference or a journal to an author, only if this author has published at least three times in this confer-ence/journal. Finally, in DBLP 2 , authors that remain associated to no confer-ence/journal (i.e., authors who have never published three times in the same conference/journa l) were removed.
 Protein Interaction Network: BioData has been built using two databases STRING 2 [5] and SQUAT 3 [6]. STRING integrates data on protein-protein in-teractions from different sources (e.g., ge nomic data, co-expression, experiments, literature). Among these i nteractions we only retained interactions with confi-dence 4 higher or equal to 400 (default STRING selection threshold). SQUAT is a public database of Boolean gene expression data resulting from SAGE experi-ments. SQUAT contains for thousands of genes, the sets of biological situations (termed libraries ) where these genes are overexpressed. In our experiments, only Human species genes were used. We built the BioData dataset as follows. A vertex is a gene, and we put an edge between two genes if there was an inter-action reported in STRING (confidence of at least 400) between the proteins corresponding to these two genes. The attr ibutes associated to a gene were sim-ply the biological situations in which the gene was overexpressed according to the SQUAT database. In our experiments, only Human species genes were used, this led to 15 , 571 genes common to the two databases. For these genes we have expression data in SQUAT for 486 different biological situations.
 4.1 Illustration of the Interest of the Patterns Collaboration Network: Let us first define some vocabulary in the context of a network of researchers. In [11] the authors consider that a k -PC is a community in the sense that  X  X t consists of several complete subgraphs that tend to share many of their nodes X . Consequently, we will use the term community for a k -PC. We will also say that two communities ar e connected if there is an edge between both communities. In DBLP 2 , we searched for CoHoPs with at least seven 4-PCs were all authors have published in the same three conferences or journals (i.e., k =4,  X  =3and  X  = 7). With this parameter setting, 57 CoHoPs where extracted. To illustrate the kind of patterns that were retrieved, we focus on two patterns presented in Figures 1(a) and 1(b).

The pattern on Figure 1(a) contains seven 4-PCs, all authors having published in conferences or journals related to medical imaging. The authors N. Avache, H. Delingette, G. Malandain, S. Ourselin, X. Pennec, and P. M. Thompson are forming a community connected to all other communities except one and is the core of a star-based topology. Knowing such a structure is useful to make some decisions. For instance having researchers of the core community as partners in a project, or choosing this community as a destination for a post-doc position could be a great opportunity to benefit from contacts with all the other groups. We also investigated the role of the authors connecting two communities (i.e., the endpoints of edges connecting two communities) in this pattern using Ar-netMiner 5 . We found that four of these bridging nodes [10] were advisor of at least half of the authors of their respective communities. So they are likely to be senior researchers and this is coherent with the fact that they appear as bridges between communities.

In the second CoHoP, presented on Figure 1(b), all authors have published at least three times in three conferences related to speech communication / spo-ken language. It contains nine communi ties, seven of them not being connected to any other. Moreover, from the personal page of the authors, we found out that in most cases a community is formed by people working in the same re-search institute. So, here most communities are formed by researchers working in the field of speech processing and not strongly publishing with researchers from other institutes. Such structure with disconnected groups of people sharing similar interests might be interesting fo r several tasks. For instance, it can give hints to funding organisms to set up long term development strategies of col-laboration networks. Or it can also be helpful, in a normal day-to-day activity, like finding reviewers for a paper, by suggesting experts in the same domain as the authors, but having no closed collaborations (strong coauthor relationship) with these authors (and also eventually having no closed collaborations with the other experts).
 Protein Interaction Network: In the BioData dataset, we searched for Co-HoPs with at least three 3-PCs were all ge nes are overexpressed in at least four biological situations (i.e., k =3,  X  =4,and  X  = 3) and obtained 25 patterns. The CoHoP containing the greatest number of k -PCs is presented Figure 2. This CoHoP is composed of 7 k -PCs, and all vertices ar e genes overexpressed in 4 situations corresponding to normal white blood cells activities. The pattern contains (from left to right) a ring made of 4 groups of genes (4 k -PCs), with two other groups forming a tail link to the ring, and an extra isolated group. Such a structure suggest, among others, the following biological questions. Is there any order in the activation of the groups along the ring ? Do the groups forming the tail act as a trigger for the whole ring activity ? Are there some interactions between the isolated group and the others (while no such interaction is reported in STRING with a confidence of 400 or greater) ? All these questions can lead to interesting deeper investigations through wet biology experiments. 4.2 Performance Study Figure 3 shows that the extraction can be made in less than 25 minutes when k  X  4onDBLP settings were run in less than 10 seconds). We can also notice that in all settings, the runtime increases significantly when k decreases. The runtime increase when  X  decreases, as shown on Figure 3(b), is mainly due to the computation of k -PCs from a large number of k -max-cliques.

The number of output patterns is given on Figure 4. As expected this number decreases when the values of k ,  X  ,and  X  increase. Such curves can be used to help setting the extraction parameters. For instance, for communities, the literature [11,3] recommends to use a value of k between 3 and 6. So, for DBLP 2 , since the running time is rather low, we could count the number of patterns for these values of k and a whole range of values of  X  and  X  . Then we chose among these settings the ones that were meaningful and that lead to collections of patterns of reasonable size (for human browsing). Local pattern mining in attributed graphs to find homogeneous set of vertices is rather recent, and two main families of approaches have been developed.
In the first family [7,12], a pattern is a single densely connected subgraph (e.g., a quasi-clique) such that the vertices have homogeneous feature values. Such a pattern can reveal a module, a group or a community sharing similar properties or interests. A pattern in our approach is set of groups sharing similar attribute values, and thus exhibits a different kind of structures made of several groups (not a single one). Moreover the notion of group is also different, and corresponds for CoHoPs to an another well known form of communities, the k -clique percolated components. It should also be pointed out, that if the user is interested in extracting single groups, this can also be done, in the case of CoHoPs, by setting parameter  X  to 1 and by outputting all k -clique percolated components as separated patterns.

Our proposal is closer to the second family of approaches [2,9], where a pattern is a collection of set of vertices in a subgraph made of vertices sharing similar attribute values. These previous works adopt opposite views on the kind of structures they consider . In [9] the constraint on the structure of a group is very strong, since the sets of vertices mu st be cliques. On the contrary, in [2], the choice was made to be very tolerant, since a set of vertices is simply required to form a connected subgraph. We introduce in this paper a complementary approach, that exhibits another kind of group structures, namely the k -clique percolated components, that are typical g roup structures used in the literature to capture the notion of community. In this paper, we considered graphs havi ng a set of Boolean attributes associated to each vertex. We proposed to find Collection of Homogeneous k -clique Perco-lated components (CoHoP) and gave a sound and complete algorithm for this task. We shown by means of experiments on real datasets that the extractions can be made in practice and lead to meaningful patterns.
 Acknowledgments. This work is partly funded by the Rh X  one-Alpes Com-plex Systems Institute (IXXI) through the REHMI project, and by the French National Research Agency (ANR) through the projects FOSTER (ANR-2010-COSI-012-02).
