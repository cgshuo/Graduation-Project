 Sentence segmentation, or the detection of sentence boundaries, is very much a solved problem for En-glish. Sentence boundaries can be determined by looking for periods, exclamation marks and ques-tion marks. Although the symbol (dot) that is used to represent period is ambiguous because it is also used as the decimal point or in abbreviations, its resolu-tion only requires local context. It can be resolved fairly easily with rules in the form of regular expres-sions or in a machine-learning framework (Reynar and Ratnaparkhi, 1997).

Chinese also uses periods (albeit with a different symbol), question marks, and exclamation marks to indicate sentence boundaries. Where these punctua-tion marks exist, sentence boundaries can be unam-biguously detected. The difference is that the Chi-nese comma also functions similarly as the English period in some context and signals the boundary of a sentence. As a result, if the commas are not disam-biguated, Chinese would have these  X  X un-on X  sen-tences that can only be plausibly translated into mul-tiple English sentences. An example is given in (1), where one Chinese sentence is plausibly translated into three English sentences. (1)  X 
In this paper, we formulate Chinese sentence seg-mentation as a comma disambiguation problem. The problem is basically one of separating commas that mark sentence boundaries (such as [2] and [5] in (1)) from those that do not (such as [1], [3] and [4]). Sentences that can be split on commas are gener-ally loosely coordinated structures that are syntacti-cally and semantically complete on their own, and they do not have a close syntactic relation with one another. We believe that a sentence boundary detec-tion task that disambiguates commas, if successfully solved, simplifies downstream tasks such as parsing and Machine Translation.
 The rest of the paper is organized as follows. In Section 2, we describe our procedure for deriving training and test data from the Chinese Treebank (Xue et al., 2005). In Section 3, we present our learning procedure. In Section 4 we report our re-sults. Section 5 discusses related work. Section 6 concludes our paper. To our knowledge, there is no data in the public domain with commas explicitly annotated based on whether they mark sentence boundaries. One could imagine using parallel data where a Chinese sen-tence is word-aligned with multiple English sen-tences, but such data is generally noisy and com-mas are not disambiguated based on a uniform stan-dard. We instead pursued a different path and de-rived our training and test data from the Chinese Treebank (CTB). The CTB does not disambiguate commas explicitly, and just like the Penn English Treebank (Marcus et al., 1993), the sentence bound-aries in the CTB are identified by periods, exclama-tion and question marks. However, there are clear syntactic patterns that can be used to disambiguate the two types of commas. Commas that mark sen-tence boundaries delimit loosely coordinated top-level IPs, as illustrated in Figure 1, and commas that don X  X  cover all other cases. One such example is Figure 2, where a PP is separated from the rest of the sentence with a comma. We devised a heuristic algorithm to detect loosely coordinated structures in the Chinese Treebank, and labeled each comma with either EOS (end of a sentence) or Non-EOS (not the end of a sentence). After the commas are labeled, we have basically turned comma disambiguation into a binary classi-fication problem. The syntactic structures are an obvious source of information for this classification task, so we parsed the entire CTB 6.0 in a round-robin fashion. We divided CTB 6.0 into 10 portions, and parsed each portion with a model trained on other portions, using the Berkeley parser (Petrov and Klein, 2007). The labels for the commas are derived from the gold-standard parses using the heuristics described in Section 2, as they obviously should be. We first established a baseline by applying the same heuristic algorithm to the automatic parses. This will give us a sense of how accurately commas can be disambiguated given imperfect parses. The research question we X  X e trying to address here basically is: can we improve on the baseline accuracy with a ma-chine learning model? We conducted our experiments with a Maximum Entropy classifier trained with the Mallet package (McCallum, 2002). The following are the features we used to train our classifier. All features are de-scribed relative to the comma being classified and the context is the sentence that the comma is in. The actual feature values for the first comma in Figure 1 are given as examples: 1. Part-of-speech tag of the previous word, and 2. Part-of-speech of the following word and the 3. The string representation of the following word 4. The phrase label of the left sibling and the 5. The conjunction of the ancestors, the phrase la-6. Whether there is a subordinating conjunction 7. Whether the parent of the comma is a coordi-8. Whether the comma is a top-level child, defined 9. Whether the parent of the comma is a 10. The punctuation mark template for this sen-11. whether the length difference between the left Our comma disambiguation models are trained and evaluated on a subset of the Chinese TreeBank (CTB) 6.0, released by the LDC. The unused por-tion of CTB 6.0 consists of broadcast news data that contains disfluencies, different from the rest of the CTB 6.0. We used the training/test data split rec-ommended in the Chinese Treebank documentation. The CTB file IDs used in our experiments are listed in Table 1. The automatic parses in each test set are produced by retraining the Berkeley parser on its corresponding training set, plus the unused por-tion of the CTB 6.0. Measured by the ParsEval met-ric (Black et al., 1991), the parsing accuracy on the CTB test set stands at 83.63% (F-score), with a pre-cision of 85.66% and a recall of 81.69%.

There are 1,510 commas in the test set, and our heuristic baseline algorithm is able to correctly label 1,321 or 87.5% of the commas. Among these, 250 or 16.6% of them are EOS commas that mark sen-tence boundaries and 1,260 of them are Non-EOS commas. The results of our experiments are pre-sented in Table 2. The baseline precision and recall for the EOS commas are 59.1% and 79.6% respec-tively with an F1 score of 67.8% . For Non-EOS commas, the baseline precision and recall are 95.7% and 89.0% respectively, amounting to an F1 score of 70.1%. The learned maximum classifier achieved a modest improvement over the baseline. The over-all accuracy of the learned model is 89.2%, just shy of 90%. The precision and recall for EOS commas are 64.7% and 76.4% respectively and the combined F1 score is 70.1%. For Non-EOS commas, the pre-cision and recall are 95.1% and 91.7% respectively, with the F1 score being 93.4%. Other than a list of most frequent words that start a sentence, all the features are extracted from the sentence the comma occurs in. Given that the heuristic algorithm and the learned model use essentially the same source of in-formation, we attribute the improvement to the use of lexical features that the heuristic algorithm cannot easily take advantage of.

Table 3 shows the contribution of individual fea-ture groups. The numbers reflect the accuracy when each feature group is taken out of the model. While all the features have made a contribution to the over-(%) p r f1 p r f1 Overall 87.5 89.2 EOS 59.1 79.6 67.8 64.7 76.4 70.1 Non-
EOS all accuracy on the development set, some of the features (3 and 8) actually hurt the overall perfor-mance slightly on the test set. What X  X  interesting is while the heuristic algorithm that is based entirely on syntactic structure produced a strong baseline, when formulated as features they are not at all effec-tive. In particular, feature groups 7, 8, 9 are explicit reformulations of the heuristic algorithm, but they all contributed very little to or even slightly hurt the overall performance. The more effective features are the lexical features (1, 2, 10, 11) probably because they are more robust. What this suggests is that we can get reasonable sentence segmentation accuracy without having to parse the sentence (or rather, the multi-sentence group) first. The sentence segmenta-tion can thus come before parsing in the processing pipeline even in a language like Chinese where sen-tences are not unambiguously marked. There has been a fair amount of research on punctua-tion prediction or generation in the context of spoken language processing (Lu and Ng, 2010; Guo et al., 2010). The task presented here is different in that the punctuation marks are already present in the text and we are only concerned with punctuation marks that are semantically ambiguous. Our specific focus is on the Chinese comma, which sometimes signals a sentence boundary and sometimes doesn X  X . The Chi-nese comma has also been studied in the context of syntactic parsing for long sentences (Jin et al., 2004; Li et al., 2005), where the study of comma is seen as part of a  X  X ivide-and-conquer X  strategy to syntactic parsing. Long sentences are split into shorter sen-tence segments on commas before they are parsed, and the syntactic parses for the shorter sentence seg-ments are then assembled into the syntactic parse for the original sentence. We study comma disambigua-tion in its own right aimed at helping a wide range of NLP applications that include parsing and Machine Translation. The main goal of this short paper is to bring to the attention of the field a problem that has largely been taken for granted. We show that while sen-tence boundary detection in Chinese is a relatively easy task if formulated based on purely orthographic grounds, the problem becomes much more challeng-ing if we delve deeper and consider the semantic and possibly the discourse basis on which sentences are segmented. Seen in this light, the central problem to Chinese sentence segmentation is comma disam-biguation. We trained a statistical model using data derived from the Chinese Treebank and reported promising preliminary results. Much remains to be done regarding how sentences in Chinese should be segmented and how this problem should be modeled in a statistical learning framework.
 This work is supported by the National Science Foundation via Grant No. 0910532 entitled  X  X icher Representations for Machine Translation X . All views expressed in this paper are those of the au-thors and do not necessarily represent the view of the National Science Foundation.
