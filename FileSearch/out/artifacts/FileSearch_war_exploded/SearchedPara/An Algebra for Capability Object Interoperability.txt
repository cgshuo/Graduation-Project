 With the rapid development of the World Wide Web, the integration of heterogeneous together as a whole. In these systems, a user poses a query on a mediator [1], which computes the answer by accessing the data at the underlying source relations. So the capability description challenges, as illustrated by the following example. BOOKS source relation admits users searching for books by specifying the author or title attribute. to the mediator. integration in distributed and heterogeneous resources. propose capability object algebra and illustrate the computing by example. Section 5 shows the properties of the algebraic operators. Section 6 presents our conclusions. systems. query templates supported by the source. Each attribute in a template can be adorned as bound, free. Since it only has a set of pre-defined query templates that it knows to answer, the integration system can answer a restricted set of queries. maximum number of inputs that must be specified in a query to the source. Since the less powerful. source capabilities. exported data items, which make it too hard for the data providers. the minimal number of attributes for which values are wanted. and bound. returned in the answer. associated with search attributes and hype rlinks are mapped to abstract attributes. given attribute in a binding pattern. They define the capabilities of a mediator as the set of queries supported by the mediator on the integrated views it exports. In virtue of the template-computing algorithm, the capabilities of a mediator can be computed capabilities. wrappers[11,12], and the difference of the same attribute between the base source and mediator is the former domain is subset of the later. capability object by the triple ( OID, R, cp ), where: several capability objects associating to the same source with the same OID . object can be computed from the capabilities of the sources object it mediates. which allows us to systematically compose mediator objects from diverse data capability, and thus enhances the scalability of our approach. In this section, we present an algebra that allows us multiple levels of composition of mediator objects. The problem we are addressi ng in this paper specially deals with the computation of mediator objects, after the mediator views and their definition in terms of source objects are identified. are relevant to the condition. definitions. capability objects, where, cd 1 ), ior 1 = ( Input 1 , Output 1 ), cd 1 = {( att1 i , dom1 att1i ) | att1 i ior 2 = ( Input 2 , Output 2 ), cd 2 = {( att2 j , dom2 att2j ) | att2 j cd , Att 1 are attributes set of cd 1 and Att 2 are attributes set of cd 2 . O ( oid , R , cp ), we introduce ATT ( R ) operation to get all attributes of R . subset of cd with the attributes projection on the attributes subset A . 2 })}.
 1 , 2 , 3 , 4 })}.
 { 0 })}. 4.1 Operators for Simple Mediator As the query capability of a mediator object is affected by the techniques used by the mediator in processing the queries posed to it, we, in this section, make simple query-processing assumption on mediators as in [10]. That is to say, mediator does not apply any post-processing conditions and pass bindings from one join operand to another. 4.1.1 Union the union of the two capability objects resulting in a new capability object, which is: by system, and doesn X  X  bear any meaning. O follows: with the values for attribute x . Dec })}). 4.1.2 Join definitions can be derived by analogy. object, which is expressed as: cp 3 ), where, June }), ( v , { True , False })}). 4.1.3 Select att  X  c ,  X   X  {&lt;, &gt;,  X  ,  X  , =}, att  X  Att1 , c  X  const . False })}), 4.1.4 Projection att accept the mediator queries with some required binding attributes absent. while the other attributes in R , Output 1 and cd 1 are left out, where, where, 4.2 Operators for Advanced Query-P rocessing Techniques in Mediators In this section, we consider advanced quer y-processing techniques in mediators, while mediator capability objects support post-proce ssing and passing bindings, which only impact the definition of Join and Selection. 4.2.1 Join When processing a query on a join view over a set of base views, since some of the attributes of subsequent base-view queries, the operator is non-commutative. cp 3 ) as in Example 7. June }), ( v , { True , False })}). O O . As is known to all, we can improve query performance by reducing the intermediate results transmission over network. 4.2.2 Select 4.1.3. whose definition is the same as in Example 8. explored the Web. sources is as follows: in Figure 3, while S 1 contain two capability objects O 1 and O 2 . objects O 5 and O 6 in the following operations: objects O 5 and O 6 are: attributes and the domain of publisher attribute is { SOUTHCHINAPUBLISHER }. on which queries to submit to the mediator. many input bindings that are supported in the source capability object and projecting out the minimal set of attributes needed by the mediator query. upon the properties of the operators. for the following hold: O 1  X  O 2 = O 2  X  O 1 . following hold: O 1 O 2 = O 2 O 1 . perform typical rewriting optimization while making sure that only optimal execution plans are explored. If an operator is commutative the query optimizer can reverse the that improve the performance of queries tremendously. are. In some situations, mediator capabilities are manually computed and specified. object integration algebra that provides the formal basis for composition of capability optimization while composing information from multiple sources. No.60172012); the Hunan Provincial Natural Science Foundation of China (Grant No. 03JJY3110). 
