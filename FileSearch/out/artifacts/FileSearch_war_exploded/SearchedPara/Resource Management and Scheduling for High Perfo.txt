 Advances in networking technology and computational infrastructure make it pos-sible to construct large-scale high-performance distributed computing environ-ments, or computational grids [1]. A grid system is a distributed collection of com-puter and storage resources maintained to serve the need of some community or virtual organization (VO) [2]. Resources in the grid are organized as resource do-mains that are individual and autonomous administrative domains, which usually are in the range of Local Area Network. The choice of strategies used to schedule jobs in such environments will depend on the target application. Grid computing can be used for the deployment and solution of problems involving large-scale equation systems such as they are appearing in finite element analysis of solids and structures as well as fluid dynamics. With the development of Grid computing and Web service, the WS-Resource Framework (WSRF) [3] was presented by a team from IBM and Globus Alliance, more consistent with current Web service [5]. The central theme of WSRF is the ma-nipulation of state, and the argument is that there is great value in the canonical refer-encing and/or manipulation of state. The difference between OGSI and WSRF is that WSRF requires no modification to Web service tooling; while the problem with OGSI is that it is not a pure subset or constraining of Web service. For example, OGSI re-quired a modification to the Web Service Description Language (WSDL) that was eventually called Grid-WSDL. This meant that special tools were needed to parse and process Grid-WSDL for these Grid services and that commercial and non-commercial community is to determine the extent to which WSRF and WS-Notification adds value above the Web service approach. 
The core of the WS-Resource Framework (WSRF) is the WS-Resource, "the component from the composition of a Web service and a stateful resource" [6] de-scribed by an XML document (with known schema) that is associated with the Web service X  X  portTypes and addressed by a WS-Addressing endpoint reference [7]. WSRF is based on the OGSI specification and can be thought of as expressing the OGSI concepts in terms that are more compatible with today X  X  Web service stan-dards. In fact, OGSI did not really support interacting with these base Web services and instead only interacted with Grid services, while WSRF fully supports interact-ing with these base Web services. 
In this paper, we introduce a resource management infrastructure for the computa-tional grid based on the WS-Resource Framework, and present a scheduling strategy for assigning jobs in the grid context. The paper is organized as follows. In Section 2, we discuss the related works. In Section 3, we introduce the application mode derived from the practical scientific ap-plications. In Section 4, we propose a hierarchical infrastructure for resource man-agement based on WS-Resource Framework. In Section 5, we present a modification of the DLS algorithm in the grid environment. Section 6 focuses on the performance evaluation with simulations, and experimental results are presented in this section. At last, we conclude this paper in Section 7. There are many research efforts focusing on the issue of resource management and scheduling in the grid context. In the prev ious research works for grid computing, paper [8] introduce an architecture for resource management in traditional computa-tional grids, and paper [9] describe the resource management portions of the Legion metacomputing system, which is based on the object-oriented concept. The Grid Architecture for Computational Economy (GRACE) [10] is presented, which mainly focus on incorporating an economic model into a grid system with existing middlewares, such as Globus and Legion. An agent-based resource management system [11] is proposed for grid computing, which uses a hierarchy of homogenous agents for both service advertisement and discovery, and integrates these with a per-formance prediction based scheduler. There are also many other related research works for resource management in the grid environment such as [12][13][14]. These presented models or architectures have a common characteristic, that is, re-sources in the grid are organized by the hierarchical means, which facilitates the scalability of the system. And the virtualization of resources is the trend for manag-ing resources in the grid context. 
In this paper, we proposed a resource management architecture for computational grids, which is compliant with the specifications of the WS-Resource Framework, and inherits the merit of the research works of the predecessors. In addition, we present a modified algorithm for scheduling issue in the grid context, which is based on the work found in [15]. Many large-scale high performance scientif ic applications are available today that were written well before Grid computing appeared. Sometimes, it needs to integrate some legacy code programs together for solving a large-scale scientific or engineering problem. How to integrate these legacy code programs into service-oriented grid ar-chitectures with the smallest possible effort and best performance is a crucial point in more widespread industrial take-up of grid technology. 
Considering the characteristic of WAN (wide area network), it is not suitable to schedule jobs among different distributed control domains, which need frequent communication with each other. In this paper we focus on computational grids, which provide the computational platform for high performance computing applications. There are different kinds of computers in a computational grid, and the variety includes different computation architectures, different operating systems and different compile environments, etc. Furthermore, some scientific computing problems need domain. So we argue that the computational grid is suitable for one kind of the scien-tific computing problem that can be divided into multiple sub-problems, which can be solved with these legacy scientific or engineering applications with the small commu-nication frequency. 
A series of large-scale sub-problems derived from one scientific computing prob-lem could be solved in parallel by deploying them to the grid context. However, these sub-problems are generally dependent on each other, and we assume that the depend-ence among the solving of these sub-problems derived from the same scientific com-problem of the same scientific computing problem. 
Solving a large-scale scientific computing problem can be represented by a set of computational tasks, which solving a set of sub-problems derived from the scientific computing problem. Formally, these tasks can be organized using a directed acyclic tasks to be executed for solving the corresponding sub-problems, and the set of weighted, directed edges E represents communications between tasks, which can be two tasks. 
In the following, we use the term  X  X ask X  or  X  X ob X  to represent the sub-problem de-rived from the scientific computing problem, which are executed respectively on the distributed resources as corresponding specifi c computational application instances in the computational grid. t h ree p a rt s re s p ecti v el y .
 4.1 G r i d Porta l and WS-Resource, etc. In the other hand, the specific applications are developed by researchers who have little or no experience with building distributed applications. Ideally, end users can conveniently solve the large-scale scientific computing problem with the multiple specific applications through the grid platform. Many engineering experiences show that end users are best severed by Grid Portals, which are web sev-given the task of authenticating the user with the Grid and invoking the needed Web services required to launch the user's applications. 4.2 Global Resource Management After the customized request of end users sent to the global middleware that imple-ments the global resource management and scheduling in the grid environment, it will be analyzed and decomposed in accordance with the characteristic of the request. In computing problem can be decomposed into a set of sub-problems that are dependent on each other. 
One component of the global middleware is the broker service, which resolves the request outputted by grid portal and generally adopts different decomposition strate-gies for different problems. For example, the integration simulation for an airplane can be decomposed into multiple sub-application models, such as tail plane, airframe, tialize the simulation scenario, and then it is broker services that decompose the prob-lem into multiple sub-problems, and at last solving the sub-problems come down to solving a series of tasks of solving large-scale dynamics equation systems. The de-composition strategy is dependent on the specific application type, and correspond-other application type. 
As described above, a large-scale scientific computing problem can be decomposed and evolved into a series of computational tasks, which can be denoted as a DAG. from the information center, and decide how to assign the multiple computational tasks to distributed computational Web service with effective scheduling strategies. In section 5, we will propose a scheduling strategy for resource assignment in the grid. 4.3 Local Resource Management If a scientific or engineering computationa l problem can be decomposed into multiple sub-problems, the sub-problems can be solved across distributed computational re-sources with the benefit of the grid computing. In the WS-Resource Framework, these distributed application instances created for solving corresponding sub-problems, are treated as stateful resources and can be manipulated by Web services in order to form WS-Resources [6]. 
One of key ideas in the WS-Resource Framework is that the service is separated stateful. To create a new stateful service, besides the stateless Web service providing the function, a WS-Resource factory is requir ed, which also is a Web service to create the instance of a stateful resource. Therefore for managing the local computational re-sources, there are two kinds of Web services, and we name them as JobFactorySer-vice and JobManageService, which are illustrated as Fig. 2. 
JobFactoryService is a Web service that creates all jobs for all requests, and func-tions as a WS-Resource factory. The created jobs are also modeled as WS-Resources, and the state of jobs are represented by WS-Resource Properties and are identified by endpoint references (EPR), which are returned to the service requestor. For publishing information of local computational resources, there is a Dedicated WS-Resource that only its specific functions but also the information of computational resources, which is very useful for scheduling jobs across multiple distributed computational resources. 
JobManageService is also a Web service that manages all jobs created by JobFac-toryService corresponding to user requests, and encapsulates the jobs as WS-Resource. It is JobManageService that publish information about jobs submitted to back-end scheduling system, and the information is represented by the resource prop-erties of the corresponding WS-Resource, which include job state, stdout location, stderr location, etc. JobManageService also has all the operations defined in the port-Types such as WS-ResourceProperties [16], WS-ResourceLifetime [17], WS-BaseNotification[18], which are executed by the Dedicated WS-Resource. 4.4 Physical Computational Resource Management In the WS-Resource Framework, not only tasks created for solving sub-problems can be modeled as WS-Resources, but also physical computational resources in the grid are modeled as WS-Resource. It is the Dedicated WS-Resource that defined in the model physical resources in the local domain and publish the information about the physical computational resources. The information is very important for co-allocation service to determine how to assign tasks in the grid context. Through the grid portal, end users can conveniently query the information about physical resources such as CPU speed, memory capacity, system load, etc. 
Physical computational resources include hardware such as high performance computers, high-speed network, large capability storage, and software such as specific applications and legacy code programs. All these resources are modeled as WS-Resource in the WS-Resource Framework. Then the WS-Resource in the specified lo-cal resource domain performs the computational function differing from WS-Resources in other resource domains. Then one sub-problem derived from a large-scale scientific problem can be solved only in some particular resource domains with corresponding specific WS-Resources instead of all resource domains, which is vital program can be executed in parallel in the range of one resource domain, this problem is beyond the scope of the paper. derived from one large-scale scientific computing problem in the grid context. 5.1 Conceptual Mode l for Resource Scheduling Generally, the scientific computing problems discussed in the paper are computation-intensive rather than communication-intensive, and each specific software application many scientific computing softwares. Correspondingly, the WS-Resource modeling one specific software application only executes one task at a time, which also is mod-eled by one WS-Resource. We assume this WS-Resource modeling the specific soft-ware application is associated with one dedicated computational hardware resource for simplicity. The computational grid consists of a set of heterogeneous WS-tional cost function, : CV R  X  X  R , represents the cost of each task on each available WS-Resource. The cost of executing task i v on WS-Resource j R can be denoted by Cv R . For a particular task that cannot be executed on a given WS-Resource, the function will be infinity. Then, the concept model for resource scheduling in the grid context is illustrated as Fig. 3. 5.2 Scheduling Strategy For scheduling tasks in one large-scale computing problem effectively, we present a modification of DLS algorithm, which will be described in details as follows. 
As with nearly all list scheduling algorithms, the DLS algorithm operates by as-signing a priority to each task in that graph, and the priority is called a level. And the matched at state ( ) t  X  , where ( ) t  X  encompasses both the state of the WS-Resources and the state of the communication resources at time t . The dynamic level can be defined to be task, and is defined as the largest sum of ex ecution times along any directed path from WS-Resource j R will be idle. ( , ) ij vR  X  accounts for the varying processing capabil-ity, and it is defined as: Where () i Cv denotes the median execution time of a task i v over all the WS-the largest finite execution time. 
In equation (1), the value of the three items determines the dynamic level of a task in the DAG. However, one task can only be scheduled to some specific WS-Resources in the grid context, which is di fferent from the situation where a majority of tasks can be scheduled to all processors in paper [15], and the value of a majority of DLs is negative infinite, and cannot be solved even with the  X  X eneralized X  dynamic level. So the modification of DLS algorithm is proposed as follows. tion time of a task i v over all available WS-Resources. With this dynamic level defi-WS-Resource in order to maximize the MDL . The other merit of this strategy is that both tasks and WS-Resources are chosen at the same time, which is superior to inde-pendently selecting either tasks or WS-Resources. For testing the performance of the presented scheduling algorithm, we perform a se-ries of simulation experiments with a custom, event-based simulator. Our scheduling goal is to minimize the makespan [19], or the scheduling length for a large-scale sci-entific computing problem. We define the task-WSR ratio as the number of available WS-Resources for one task divided by the total of all WS-Resources, and examine the effect of the task-WSR ratio on the performance of the presented algorithm. 
In the first situation, the total of WS-Resou rces are 8, and one large-scale scientific computing problem can be decomposed into 32 tasks. The size of tasks is uniformly distributed in the range [10000, 50000], and the communication volume between Resources is uniformly distributed in the range [100, 500], the communication speed is uniformly distributed in the range [10, 50]. The experimental results are the average value of the 1000 simulation runs where one task can be executed randomly on rela-tive WS-Resources, and the experimental result is illustrated as Fig. 4(a). 
The second situation is the same as the first situation except that the size of tasks is trated as Fig. 4(b). 
According to the Fig. 4 (a) and (b), the makespan reduces as the task-WSR ratio increases, and the experimental result indicat es that when the number of available WS-Resources for executing one task increas es, the total execution time of all tasks in one large-scale scientific computing problem would decrease. However, it is noted that when the number of available WS-Resources for executing one task decreases, the performance of the algorithm does not deteriorate quickly, the per-formance loss is about 8% compared to the situation that one task can be executed on all WS-Resources. 
So we can conclude that the modified algorithm is suitable for scheduling multiple sub-problems derived from one large-scale scientific computing problem in the grid context, where these sub-problems just ca n be assigned to some particular WS-Resources instead of all WS-Resources, which is described in this paper. In this paper, we focus on resource management and scheduling for high perform-ance computing application, which is ba sed on the WS-Resource Framework. We firstly abstract the concrete implementation in a particular large-scale scientific computing problem and generally model theses kinds of scientific computational problems as DAGs. Then we propose a hier archical infrastructure for resource man-agement in the grid context, which is compliant with the WS-Resource Framework. Based on the application model and resource management model, we expand the existed DAG scheduling algorithm for grid computing, and propose a modified scheduling algorithm in the grid context, and test the performance of the presented scheduling algorithm. Experimental results indicate that the proposed algorithm is suitable for the grid scenario. 
In the further, we will work on utilizing the presented hierarchical infrastructure and the scheduling strategy to organize CFD Grid Application Platform [20] and man-age distributed computational resources in the grid environment. (No.2004AA104340 and No.2004AA104280), the National Natural Science Founda-tion of China (No. 60173031 and No. 60473092), ChinaGrid Program of MOE of China, and the grand project (No.03dz15027) of the Science and Technology Com-mission of Shanghai Municipality. [3] Czajkowski, K., Ferguson, D., Foster, I., Frey, J., Graham, S., Sedukhin, I., [4] Tuecke, S., Czajkowski, K., Foster, I., Frey, J., Graham, S., Kesselman, C., Maguire, T., 
