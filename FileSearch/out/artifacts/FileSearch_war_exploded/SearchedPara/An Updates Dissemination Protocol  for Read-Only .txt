 Rapid advances in wireless communication technology have greatly improved the performance and availability of mobile information services. At the same time, port-able computing devices such as notebook computers and palmtop machines are becoming the mainstream of computing equipments. Thanks to such advances, many novel mobile database applications have emerged to meet the need of accessing data resources anywhere and anytime. Among these applications, read-only transaction processing that aims at providing consistent data to read-only transactions generated less, read-only transaction processing in mobile real-time computing environments, which not only requires consistent data access to database servers but also has time constraints on both data and transactions, has not received adequate attention even though its significance for applications such as stock and traffic information dissemi-nation [6,9,11] . Owing to the inherent limitation of wireless communication network, the bandwidth of the downstream channel from the database server to mobile clients is much larger than that of the upstream channel and in some cases upstream channels even do not exist. Therefore, instead of pull-based data dissemination methods, data broadcast has been widely accepted as an ef ficient way for mobile clients to get their needed data. When data broadcast is used to propagate frequently updated data to read-only transactions issued from mobile clients, we call it updates dissemination. To the best of our knowledge, updates dissemination is addressed first in [2] and the authors discuss the tradeoffs between data currency and performance issues. However transaction semantics is not supported and the consistency criterion is relatively relax. Transactional support is introduced in the Datacycle architecture and the serializabil-changes of values read by transactions [12] . Recently two efficient updates dissemina-tion protocols, the multi-version data broadcast (MVB) and the invalidation method (IR), are proposed in [4,5]. However, the majority of existing updates dissemination protocols do not take the time constraints into account, whereas data dissemination methods referring to real-time characteristics do not support the transactional seman-tics [6,13] . In this paper, we investigate the problems of disseminating consistent data to read-only transactions with deadlines in mobile real-time computing environments. A novel updates dissemination protocol called mixed real-time data broadcast (MRTB) is proposed. In mixed real-time data broadcast , a set of new techniques including reducing the length of consistency intervals, immediate updates dissemination policy and on-demand data delivery are incorporated seamlessly. Moreover, an enhanced index structure is designed for read-only tr ansactions to judge precisely when to re-quest the desired data. Simulation results show that the proposed protocol can provide higher data currency and lower miss rate compared with existing updates dissemina-tion protocols and is more appropriate for mobile real-time computing environments. The rest of the paper is organized as follows. Section 2 presents the preliminaries. Section 3 introduces the details of mixed real-time data broadcast protocol . Section 4 presents the performance evaluation of the proposed protocol. Finally, conclusion is made in section 5. We assume that the database is a finite set composed of a number of data items, that is, DB = {d i  X  i = 1, 2, ... , n}. Definition 1. The value of data item d at time instance  X  is called the state of d at  X  , denoted by S  X  (d). Definition 2. The states of all data items in DB at time instance  X  is called the state of DB at  X  , denoted by S  X  (DB) = { S  X  (d i )  X  i = 1, 2, ... , n}. Definition 3. Let S  X  tion (  X  1 &lt;  X  2 )  X  ( S  X  noted by S  X  Definition 4. Let T be an read-only transaction that committed at time instance  X  c T is consistent if and only if: T is consistent only if data items in its read set form a subset of a consistent state of DB at time instance  X  earlier than  X  c . Guaranteeing the consistency of transactions is essential for many applications such as stock and traffic information dissemination. So we follow strictly the consistency criterion in Def. 4 and do not consider relaxing it to gain the improvement in other performance metrics in this paper. Definition 5. If T is consistent and condition (d  X  R (T))  X  ( S  X  {d  X  d  X  R (T)  X  S  X   X  period. Thus, how to reduce the amount of stale data read by transactions, namely, decreasing SS , is one key issue in designing efficient updates dissemination protocols. Smaller SS is, transactions will read much more current data items. Definition 6. The miss rate, denoted by MR , is defined as N miss /N total , where N miss and N number of transactions processed in the system respectively. MR is the other performance metric since missing deadlines is undesirable for appli-cations with constraint on their completion time. In conclusion, the requirements for updates dissemination protocols for read-only transaction processing in mobile real-time computing environments are to reduce SS and MR on the premise of ensuring the consistency of transactions. each broadcast cycle. Under periodic broadcast, if the waiting time is not of great importance, transactions need not issue explicit data request since all data items defi-nitely appear in the broadcast sooner or later. Definition 7. Let d i be the i th data item instance in a broadcast cycle and  X  (i) is the broadcast cycle, m is the monotonically increasing sequence number of CI k i, m and k is the length of CI k i, m . with each other. Theoretically two successive consistency intervals may be over-lapped and their lengths are not necessarily id entical, while from the practical point of view, in this paper we only address qualified updates dissemination protocols with the the end of one consistency interval is just the beginning of the next one. For simplic-ity of presentation, in the following sections we use CI m to represent CI k i, m and CI k to denote a set of consistency intervals whose length is equal to k . The system model includes two relatively independent parts, the server-side model and the client-side model. The server-side model consists of the database server, the broadcast server and the mobile support station, which are interconnected by the fixed network. We assume the size of each data item is identical and each update is labeled with a time-stamp to indicate when the value is taken. The basic time unit in the sys-livers data through the downstream channel and supports two kinds of broadcast: broadcast on-schedule (BOS) and broadcast on-demand (BOD). BOS refers to that all data items in the database are propagat ed according to the chosen scheduling algo-aimed at exploiting the channel efficiently. BOD takes the user requirements into consideration and delivers data items on-demand to meet their data requests. The mobile support station is responsible for managing the upstream channel, through which mobile clients may send data requests if the desired data do not appear timely. At the same time, a data requests queue is maintained at the mobile support station. which read-only transactions are generated one at a time. Each read-only transaction completion time. In this paper the firm transaction model is adopted, which means abortion have no negative effect on the system. If a read-only transaction has finished commits immediately. Otherwise, e.g., an inconsistent read occurs, the read-only transaction will have to be restarted as long as its deadline does not expire. The next run of the transaction can r ead consistent data item from the local cache directly. Since the functions and behavior of transac tions in real-time applications are much more predictable [9] , we assume the number of read operations of a read-only transac-tion can be obtained using certain pre-analysis techniques before its execution. 3.1 Real-Time Data Broadcast Based on the transaction execution model described above and the definition of SS , we can get the following proposition easily. Proposition 1. Given any qualified updates dissemination protocol, for two consis-CI With existing updates dissemination protocols, restarting transactions is the common way to ensure the consistency. To continue their execution, restarted transactions have to wait until the new values of updated data items appear. However, the waiting time depends on particular scheduling algorithms and so is unpredictable, which is quite undesirable for transactions with deadline constraints. To reduce the uncertainty of the waiting time, a new policy is introduced in this paper. Definition 8. Given any qualified updates dissemination protocol, suppose data item d is updated during consistency interval CI m at the server and cannot be broadcast by the chosen scheduling algorithm during the remaining portion of CI m , the immediate updates dissemination policy (IUDP) delivers the new value of d instantly at the be-ginning of CI m+1 without waiting for being scheduled. By the transaction execution mode l we can get proposition 2 readily. Proposition 2. With a particular updates dissemination protocol, using IUDP can provide the new values of updated data items to restarted transactions more timely than the one without IUDP. MVB seriously affects the data currency mainly due to its long broadcast cycle and the delivery of old versions of data items. To increase data currency, two improve-ments for MVB are made in the design of the real-time data broadcast protocol (RTB: the preliminary version of the proposed protocol). The first improvement is shortening the length of consistency intervals as well as only delivering the latest version of data during each consistency interval. According to proposition 1, appro-priate length candidate may be 1/ n , e.g., half or one third, of the length of the whole broadcast cycle, where n is a natural number bigger than 1. This improvement can decrease the probability of reading stale data for read-only transactions dramatically. execution time of restarted read-only transactions. In particular, at the beginning of each consistency interval the new values (NV) of updated data during the preceding consistency interval are delivered immediately instead of waiting for being scheduled by the scheduling algorithm. To maintain the consistency, at the beginning of each consistency interval (just before NV) an invalidation report (IR) is propagated similar consistency interval. Each read-only transaction, say T i , reads IR periodically and determines to restart or not by judging whether data items in its read set are found in IR. If an inconsistent read occurs, T i has to restart to ensure the consistency. items in the cache may become stale. There are various approaches to communicating updates to the client caches. Invalidation combined with a form of autoprefetching was dates policy is used in this paper. In particular, if data items in the cache are found in IR, the new values of such items will be autofetched once they appear in NV. As to the cache replacement policy, the most commonly used one, LRU, is adopted in this paper. 3.2 Mixed Real-Time Data Broadcast Results presented in [3] indicate that BOD has a better performance in meeting data needs with deadlines compared with pure BO S. Similar research works in [6,12] also show that mixed data broadcast, which combines BOS with BOD, performs better than just using a broadcast policy alone. Though RTB in conjunction with BOD seems to be promising in reducing the miss rate , several technical problems still need to be resolved. between BOS and BOD. Considering the complexity of bandwidth allocation, the ratio of BOD to BOS is fixed in the mixed real-time data broadcast (MRTB) and may be adjusted as a system parameter in practice. With respect to the period of BOD, in MRTB it is set the same as that of the consistency interval to simplify the implemen-tation as well as provide much higher data currency. send their data requests if necessary. Index techniques are widely used in broadcast may be a good candidate to solve the second problem. However, existing index tech-niques assume that the contents of data broadcast is known in advance, which is not suitable for MRTB due to the dynamic change of contents in NV and OD. Therefore, in the following section we will adapt existing index techniques to MRTB by certain enhancements.
 construct the index, which avoids the difficulty and complexity of index dynamic gen-eration. The whole index consists of a series of index entries and other special attached information. Each index entry consists of a 2-tuple &lt; K, Pos &gt;, where K is the key value of corresponding data item; Pos is the relative position of the data item in BOS. Each data item in data broadcast consists of a 4-tuple &lt; K, Pos, Offset, Content &gt;, where K is the key value of the data item; for data items not within NV and OD, Pos is equal to its within NV and OD, Pos is equal to the Pos value of the last data item in the preceding consistency interval and Offset is equal to its relative position in NV and OD; Content is composed of the other fields of the data item. at the server, denoted by UpdateRate , and the proportion of BOD to BOS, denoted by Ratio , are included in the index. UpdateRate can be the average of update rates in last several broadcast cycles or other meaningful estimations in terms of practical application scenarios. In addition, the length of BOS, denoted by N , is also attached in the index. Based on above index structure and attached information, for any read operation issued by read-only transactions, say r (d), the time elapsed from the read operation begins to the desired data items appears can be got by equation 1 (Note that in this paper time is measured in terms of the time unit for broadcasting a single data item). where Pos and Offset are the corresponding values of the data item being broadcasted when the read operation begins; IPos is the Pos value of the needed data item got by index searching. MOD is the modulus operation. item may appear in time. However, read-only transactions often have more than one read operations. Thus, the transaction deadline should be assigned to all data items of interest. In MRTB we use the serial assignment policy, i.e., dividing the remaining execution time of a read-only transaction equally among all pending read operations. The deadline of each data item can be determined according to equation 2. where DL (d i ) is deadline of the i th data item of a read-only transaction; Deadline is the deadline of the read -only transaction; Current_Time is the time now; NoQueries is the number of read operations of the read-only transaction. bigger than NODP (d i ) the transaction may wait the appearance of the desired data item on the channel. Otherwise, a data request will be generated. to EDF scheduling policy [12] . The detailed implementation of MRTB protocol is depicted in Fig. 1 and Fig. 2. items in the database and the broadcast server periodically broadcasts them to a large population of mobile clients. To simplify the analysis and implementation, we evalu-ate these update dissemination protocols (MVB, IM, RTB and MRTB) combined with the flat scheduling algorithm. The bandwidth proportion of BOD to BOS is Ratio . Index is broadcast NoIndexes times per broadcast cycle, which is used for read-only transactions to determine the accurate position of needed data items and judge when to send data requests. Update transactions at the server are generated per UpdateInter-date distribution is across the range 1 to UpdateRange . The length of consistency intervals is ConsistencyInterval . The basic time unit in our simulation is the time used to broadcast a single data item. only transaction has NoQueries read operations. The deadline of read-only transaction tween MinLaxity and MaxLaxity . If a read-only transaction has to restart due to incon-sistent read, it can continue to execute as long as current time is no larger than its dead-line. The read operations of read-only transactions access data items from the range 1 to ReadRange . The access probabilities follow a Zipf distribution with a parameter  X  r . The cache size in the client is CacheSize and cache replacement policy is LRU. If data items are updated, the corresponding cache entries are invalidated and subsequently autoperfetched. The performance metrics are the miss rate and the system staleness. The main parameters and the baseline values are summarized in Table 1. Experiment 1: We change UpdateInterval to compare the performance metrics of MVB, IM, RTB and MRTB under different update rate. The number of versions for MVB is 2. and strict restart rules. MVB owns the lowest one since it allows transactions to read obvious when the update rate is high. RTB is higher than those of the others, the shortened waiting time of restarted transac-tions thanks to IUDP leads to its better performance than IM. Compared with MVB, the miss rate of RTB is higher due to its high restart rate when the update rate is high. RTB and MVB diminishes gradually. Since MRTB can meet more transactions with short deadlines through mixed broadcast policy, it performs best. MRTB is not given since it is similar to that of RTB. The system staleness of all three protocols decreases with the reduction of the update rate. MVB has the highest one because it allows transactions to read stale versions of data. Owing to the invalidation method, the metric of IM and RTB is observably better than that of MVB. Compared with IM, RTB has a better performance since the shorter length of consistency inter-vals further decreases the probability of r eading outdated data. Because transactions begins and commits during one consistency interval still may read outdated data, the system staleness of RTB is not equal to 0. Experiment 2: In this experiment we change the system workload and the bandwidth ratio of BOD to BOS to observe the variation of performance metrics for RTB and MRTB. data needed by read-only transactions changes from 0.5 to 6 times as many as the amount of data broadcast, i.e., the system workload increases by degrees. From Fig.6 we can see that with the increase of the system workload, the miss rate of MRTB increases accordingly due to the limited bandwidth of BOD. But it does not exceed that of RTB under the same update rate. crease with the increase of on-demand bandwidth but ascends slightly after Ratio exceeds one critical point. Reason for this phenomenon may be that the increase of bandwidth for BOD results in the longer broadcast cycle, which in turn leads to trans-actions that can get their needed data through BOS before now have to acquire data from BOD. When the increasing speed of data requests becomes larger than that of bandwidth for BOD, the miss rate may drop instead of increasing constantly. At the same time, the transaction laxities also have an impact on the critical point. The shorter the transaction laxities are, the earlier the critical point emerges. and bandwidth effectiveness for disseminating a large volume of data to numerous mobile clients. In this paper, we study the problem of providing consistent data to read-only transactions in real-time data broadcast environment. The main contribu-tions of this paper include the following. First, we formally define the performance objectives based on the detailed analysis of update dissemination protocols for read-only transaction processing in real-time data broadcast environment. Next, a new updates dissemination protocol called mixed real-time data broadcast is proposed. Finally, extensive simulation experiments are implemented and numerical results show that MRTB has better performance compared with existing updates dissemina-tion protocols. The future emphasis of our research is the design and evaluation of more flexible and adaptive bandwidth allocation algorithm suitable for the proposed updates dissemination protocol. The work in this paper was partially supported by the National Nature Science Foun-dation under grant 60203017 and SRF for ROCS, SEM.
