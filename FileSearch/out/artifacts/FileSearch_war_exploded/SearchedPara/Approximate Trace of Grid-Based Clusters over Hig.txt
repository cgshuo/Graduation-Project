 A data stream is defined as a massive unbounded sequence of data elements continuously generated at a rapid rate. Consequently, on-line data stream processing should satisfy the following requirements[1,2,3]. First, each data element should be examined at most once to analyze a data stream. Second, memory usage for data stream analysis should be confined finitely although new data elements are continuously generated in a data stream. Third, newly generated data elements should be processed as fast as possible to produce the up-to-date analysis result of a data stream, so that it can be instantly utilized upon request. To satisfy these requirements, data stream processing sacrifices the correctness of its analysis result by allowing some errors. 
To find clusters in an on-line data stream, the k-median algorithm[4] which is the partitioning clustering method uses an O(1)-approximate k-medoid method for each sub-set of a data stream. In order to overcome the iterative evaluation of the conventional k-medoid algorithm[5], its objective is to maintain only the consistently good set of k approximate data elements ,i.e., medoids each of which represents the center of a cluster for the data elements observed so far in a data stream. Another partitioning clustering method, CluStream[6], is proposed to find the clusters of data elements generated in an evolving data stream. It executes the conventional K-means method to find initial q pseudo clusters called micro clusters . As a new data element arrives, the cluster features of the q micro clusters are continuously updated. The cluster feature vectors of all clusters at each specified timestamp are stored as a snapshot. The CluStream produces k final clusters called macro clusters by executing the K-means algorithm once more on the micro clusters of these snapshots. Although these partition-based clustering algorithm have relatively good scalability to the number of dimensions, they suffer from handling noise data elements. In other words, as in most partitioning clustering algorithms such as k-means and k-medoid, noise elements can substantially influence the generation of a cluster, so that it may be difficult to produce a correct result in some cases. 
We have proposed a grid-based clustering method called a hybrid-partition method [7] for an on-line data stream. Since the size of each grid-cell can be different, it is impossible to employ any index structur e to directly access a specific grid-cell for a specified data element. Therefore, the ranges of all the partitioned grid-cells should be sequentially examined one by one. As the number of grid-cells is increased, this operation takes longer and becomes a bottleneck for the algorithm. Furthermore, the hybrid-partition method does not have good scalability to the number of dimensions. 
To cope with this shortcoming, a one-dimensional grid-based clustering algorithm is proposed in this paper. While the one-dimensional clusters of each dimension are traced independently, the clusters of mult i-dimensional data space can be identified based on the one-dimensional clusters of each dimension. This one-dimensional approach can provide better scalability to the number of dimensions although the accuracy of multi-dimensional clusters may be degraded. However, this drawback is not critical since data stream processing produces approximate result anyway. Furthermore, this one-dimensional approach requires much less memory space than the multi-dimensional approach does. Therefore, the confined space of main memory can be more efficiently utilized by the one-dimensional approach. Due to these reasons, the one-dimensional approach can provide better performance in terms of time and space complexity in the grid-based clustering method. 
Unlike the hybrid-partition method, the proposed method divides a dense grid-cell whose current support becomes greater than or equal to a predefined partitioning threshold S par into h equal-size smaller grid-cells at each dimension. Conversely, a set of consecutive sparse grid-cells can be merg ed into a single grid-cell. Subsequently, this recursive partitioning process is terminated when the interval of every dimension cell . By carefully setting the value of  X  to be aligned with the partitioning factor h , it is possible to make the size of every unit grid-cell be the same, so that the problem of our previous work can be avoided. A sibling list is a structure to manage the set of all grid-cells created in each dimension and it acts as an index to locate a specific grid-cell. 
The remaining of this paper is organized as follows. Section 2 reviews the hybrid-partition method. Section 3 presents the structure of a sibling list and proposes a one-dimensional grid-based clustering method. In Section 4, several experiment results are comparatively analyzed to evaluate the perf ormance of the proposed method. Finally, Section 5 presents conclusions. A data stream for d -dimensional data space N = N 1  X  ...  X  N d is defined as an infinite set of continuously generated data elements as follows: To find clusters over a data stream, we have proposed a statistical grid-based clustering method[7]. The range of each dimension N i is initially partitioned by p denote the start and end values in the j th interval of the i th dimension. Consequently, p d number of initial cells are formed in N and each initial cell g is defined by a set of d space rs = I 1  X  ...  X  I d . However, the initial rectangular space of an initial cell becomes pruning operations are performed subsequently. When these rectangular spaces are defined as the interval size of the i th dimension of the cell g . The range of the cell g is the united spaces of all the rectangular spaces rs 1 ,..., rs q , R(g) = U q the current distribution statistics of those data elements in the current data stream D t that are within its range as defined in Definition 1. [Definition 1] Distribution Statistics of a grid-cell g ( RS , c ,  X  ,  X  ) denote those elements in D t that are in the range of the cell g , i.e., D g t ={ e | e  X  D t and e
R( g ) }. The distribution statistics of the cell g are defined as follows: 
As a new data element is generated continuously, each cell monitors the distribution statistics of data elements within its range. When the support of an initial cell becomes high enough, one of the dimensions of the data space is chosen as a dividing dimension based on the distribution statistics of data elements in the cell. Subsequently, the range of the dense cell is dynamically divided into two mutually exclusive smaller cells, called intermediate cells , with respect to the selected dividing dimension. In addition, the distribution statistics of the initial cell are used to estimate those of each divided cell. Similarly, when an intermediate cell itself becomes dense, it is partitioned by the same way. Differently with the initial cell, the parent intermediate cell is replaced by the divided cells when it is partitioned. Eventually, a dense region of each initial cell is recursively partitioned until it becomes the smallest cell called a unit cell . 
To partition a dense cell, three different methods:  X  -partition,  X  -partition and hybrid-partition are introduced in [7]. The hybrid partition method chooses one of the two partitioning methods based on the congestion rate of the dividing dimension for a given dense cell. By selecting an appropriate partition method, the number of cell partition steps as well as the number of cells can be minimized. The definition of a one-dimensional grid-cell is the same as in Definition 1 except it maintains scalar values rather than vectors. Given a predefined partitioning factor h,
U and g i .I  X  g j .I=  X  ( i  X  j , 1  X  i,j  X  h ) . In the current data stream D of a multi-dimensional data space , a grid-cell g in the dimension N l traces the recent g.c /| D t |. When the current support of a grid-cell becomes dense enough, i.e. greater Since such partitioning can be performed recursively in a dense region of the dimension N l , the interval of each grid-cell in the dimension N l can be different. However, among grid-cells, there exists total ordering relations hip according to the interval of a grid-cell. Let G ={ g 1 , g 2 ,..., g v } be the set of all one-dimensional grid-cells iff g i .I &lt; g j . I . In order to manage the dynamically varied configuration of grid-cells in the entire data space of the dimension efficiently, the grid-cells are structured by a sibling list defined in Definition 2. [Definition 2] A sibling list S Given a dimension N l of a multi-dimensional data stream, a sibling list S of order m is defined as follows; 2. Each sibling entry E i maintains a data structure E(min,max,G [1,..., m ], next_ptr) 3. The range of S is defined by the union of the ranges of all the sibling entries in S
As shown in Figure 1, a sibling list is structured by a single linked list of sibling entries each of which can hold the distribution statistics of a fixed number of one-dimensional grid-cells. Each entry of a sibling list maintains its range [min, max) to locate a specific grid-cell effi ciently. For a data element e , a grid-cell g whose interval includes the data element e is searched in the sibling list. To accomplish this, the sibling entry whose range includes the element e is located first and its grid-cells are looked up in sequence. When the distribution statistics of the grid-cell g was updated lastly at the v th data element in a data stream, the distribution statistics of the grid-cell g is updated for the t th data element as follows: 
When a dense grid-cell g in a sibling list S is partitioned into h equal-size smaller grid-cells g 1 ,...,g h , the distribution statistics of each partitioned grid-cell can be more precisely monitored. The grid-cell g is replaced by the partitioned grid-cells g 1 ,..., g h , so that total ordering relationship of the grid-cells in S should be preserved. As in the hybrid-partition method, the distributio n statistics of each partitioned grid-cell g j (1  X  j  X  h ) are estimated based on those of the grid-cell g . More specifically, the distribution function of g , 2
This partitioning procedure can be recursively invoked until a unit grid-cell is found. Given the range( N ) of a data space of a dimension N , the total number of recursive partitioning operations needed to produce a unit one-dimensional grid-cell is log h ( range ( N )/  X  ). A one-dimensional cluster in the dimension N of a data stream D is a group of adjacent dense unit grid-cells wh ose current supports are greater than or equal to S min . 
While the one-dimensional clusters of each dimension are continuously traced, the set of multi-dimensional clusters at a specific time in a multi-dimensional data stream is found in off-line by the snapshot of the one-dimensional clusters of each dimension. From each sibling list S i of each dimension N i (1  X  i  X  d), its one-dimensional is denoted by two scalar values on the i th dimension. Given the d-dimensions, the set of d -dimensional clusters can be found by enumerating all the combinations of the one-dimensional clusters of every dimension. In order to analyze the performance of the proposed method, several data sets of varying dimensionality are generated by the data generator used in ENCLUS [8]. Each data set contains one million data elements. The domain size of each dimension is set to 100. Most of data elements are concentrated on randomly chosen 20 data regions whose sizes in each dimension are also randomly varied. The two support thresholds S mer and S par are assigned relatively to a predefined minimum support S min . The conditions of most experiments are S min =0.02, S mer =0.1  X  S min , S par =0.8  X  S min , m =10 and h =4 unless they are specified differently. Whenever 100K new data elements are processed, every sparse grid-cell is tried to be merged by traversing all the nodes of a sibling list. In all experiments, data elements are looked up one by one in sequence to simulate the environment of an on-line data stream. 
In Figure 2, the proposed method is compared with the hybrid-partition method ( hybrid-1d, hybrid-multi ) and K-median algorithm[4]( lsearch) . The term hybrid-1d means that the one-dimensional version of the hybrid-partition partition method is used to find only one-dimensional clusters while the term hybrid-multi means that the hybrid-partition method itself. The available memory space of clustering is confined to 300KB. The accuracy of the proposed algorithm is measured by the ratio of the number of correctly clustered elements by the proposed algorithm over the total number of data elements clustered by STING when  X  =0.05. Let C(i,sting) denote a set of data elements grouped in the i th cluster by STING(  X  =0.05). Similarly, let C(i,X) denote a set of data elements grouped in the same i th cluster by one of the three clustering methods. The accuracy is determined as follows: 
As the number of dimensions becomes larger, the accuracy of the proposed method is decreased as shown in the figure. When the dimensionality of a data stream is increased, the memory usage is rapidly incr eased because the number of grid-cells is also increased. Therefore, given confined me mory space, to find clusters successfully, the size of  X  should be enlarged, so that the number of grid-cells can be reduced. Therefore, the resolution of a grid-cell is degraded as the number of dimensions is increased. Since the memory requirements of the three grid-based methods are different, the size of  X  for each method is also different . This is because the available confined memory space is fixed. The accuracy of the hybrid-1d method is less accurate than that of the proposed method because the range of a grid-cell is dynamically determined. The accuracy of the hybrid-multi method is the worst. Due to this reason, as the dimensionality is increased, its memory requirement is rapidly increased, which also make s its processing time be longer. The accuracy of LSEARCH is similar to the proposed method because the partitioning clustering method only finds the center of a cluster rather than the exact boundary of a cluster. 
Figure 2-(b) shows the size variation of  X  . For the same size of confined memory space, the resolution of clusters by the proposed method is more effectively maintained. As shown in Figure 2-(c), the processing time of the proposed method is better than those of the others. 
Figure 3 shows the performance comparison when the size of confined memory space is varied for a 40-dimensional data stre am. In Figure 3-(a), the three grid-based methods are compared in terms of accuracy. As the size of confined memory space is increased, the resolution of identified cl usters becomes more precise due to the smaller size of  X  as shown in Figure 3-(b). However, because the hybrid-multi method that its accuracy is the worst. As shown in Figure 3-(c), the two one-dimensional approaches take less processing time than the hybrid-multi method does. Since the grid-based clustering does not have good scalability to the dimensionality of this paper can effectively maintain the on-going distribution statistics of continuously generated data elements in each dimension of a data stream. This one-dimensional approach can provide better scalability to the number of dimensions although the accuracy of identified multi-dimensional clusters may be less accurate. In other words, the one-dimensional approach requires much less memory space than the multi-dimensional approach does, so that the confined space of main memory can be more effectively utilized by the one-dimensional approach. Therefore, the one-dimensional approach can provide better performance in terms of time and space complexity. Acknowledgments. This work was supported by the Korea Science and Engineering Foundation(KOSEF) through the National Research Lab. Program funded by the Ministry of Science and Technology (No.M10600000225-06J0000-22510). 
