 Different buyers exhibit different purchasing behaviors. Some rush to purchase new products while others tend to be more cautious, waiting for reviews from people they trust. In mar-ket analysis, the former group of buyers is often referred to as innovators and early adopters while the latter group is referred to as laggards. The adoption behavior is a dynamic feature of the user and varies over groups of products, e.g., innovators of literature may not be the innovators of elec-tronics. The adoption order of users is a dynamic feature of the product, which can help to predict the future po-tential buyers. However, such dynamic features are usually unavailable in the description of products. In this paper, we study the user behavior of an online review website X  Epinions.com. We first propose to model user adoption be-haviors by creating a total ordering among users who rate the products in a given category. We develop a greedy al-gorithm and a Markov-chain based algorithm for computing the category total ordering. Next, we show that by using user behavior information, we can more accurately predict the category of a new product as well as predict which users will follow. Furthermore, by using the Epinion.com trust network as evidence, we demonstrate that our total order-ing can group users into communities that closely resemble the trust network. Thus the adoption order can be a useful feature in recommendation systems.
 H.3.3 [ Information Systems ]: Information Search and Re-trieval X  Information Filtering Algorithms, Experimentation Social Networks, Ranking, Recommendation
In market analysis, the user adoption time of a product is an important research area that influences where advertisers spend their money. The time interval between when a new product first arrives on the market and when a particular buyer purchases it varies due to a multitude of factors. In-evitably, some buyers will purchase a product before their peers, whether drawn by a particular brand or product fea-ture. In some cases, such as during the release of Apple X  X  iPhone, potential buyers line up before the product X  X  official release date to prove their brand loyalty and be the first in their social circle to own the product.

Studies in social science demonstrate that such differences in time of adoption are a reflection of the buyer X  X  interests in the product. According to Diffusion of Innovation the-ory [11], buyers can be divided into five categories: Inno-vators , Early Adopters , Early Majority , Late Majority , and Laggards wherein the innovators and early adopters influ-ence the community while the early majority, late majority and laggards follow their lead. Online review websites, such as Amazon.com and Epinions.com, provide buyers a conve-nient channel to express their opinions on a variety of prod-ucts via a word-of-mouth fashion. These review websites are a good test bed for us to study the adoption patterns of different users. In this work, we study the behavior of users by using data from the Epinions.com website.

The first question we try to answer is how to detect users of different adoption types. In this work we model the or-dering based on the adoption behavior by creating a total ordering of all users for categories of products. Each prod-uct is associated with a group of users who have purchased it, and each group of users can be ordered by their purchase dates, creating a total ordering of users per product referred to as a product total ordering . These product total orderings are combined into a single total ordering of users per cate-gory, referred to as the category total ordering and reflects the order we might expect a user to adopt a new product in the category.

Secondly, we want to demonstrate that user behavior can benefit traditional tasks such as classification and recom-mendation. Traditionally, only static features, such as prod-uct features and user demographic, are used for such tasks. We believe that user adoption behaviors is indicative of user interest in the underlying features of a common group of products. Such dynamic features reflected by user behav-ior have not been exploited for traditional tasks in previous studies. Additionally, our innovator/laggard model allows us to identify natural groups of products. We demonstrate this point by using the trust network in Epinions.com. By grouping products which have a similar innovator/laggard ordering, we find subsets of users that better represent small worlds than the original categories based on the link distri-bution in the trust network.

We summarize the contributions of this work as follows.
The rest of this paper is organized as follows. In Section 2, we survey related work. In Section 3, we present our total ordering framework for capturing the user adoption behav-ior. We evaluate the obtained total orderings in Section 4. We illustrate applications of total orderings by applying the total orderings to the category prediction task and follower prediction task in Section 5. We investigate the relationship between the obtained total ordering and the trust network in Epinions.com in Section 6. In Section 7, we conclude and provide future directions for our work.
There are two research areas that are closely related to our work: predicting the influence of individuals in a social network and ordering products according to their ratings.
Researchers have long since been interested in identify-ing influential users who will affect a market space. Early work by Domingos et al [2] modeled the information flow directly across a graph of customers to determine a cus-tomer X  X  individual network value. Kempe et al [4] explored activation models by utilizing the principle of submodular-ity. In Kempe X  X  work each node had a chance of activating it X  X  neighbors. When a certain threshold of neighbors were activated, a given node would become active, and could then affect the remaining inactive nodes. Once a node was active, it remained active. Rusmevichientong et al [13] used a non-parametric approach to model the spread of influence over the probable network using amazon.com data.

Measuring influence has also been explored outside of prod-uct recommendation. Song et al [15] modeled the proba-bility of a concept or idea flowing through the blogsphere by using time-based Markov chains. The algorithm worked by creating an early adoption matrix through observables and determining the transition probability using Bayes rule. Song et al [14] expanded this work by modeling the infor-mation flow using continuous Markov chains, incorporating the probability of information staying at a given node rather than spreading outward.

While some of these models attempt to derive the under-lying network structure in order to predict influential users, artificially creating a network can be very difficult in the web, as Song argued, since users may not explicitly cite their sources and may be influenced by other media out-side the web. The link structure and the information flow users gather are not necessarily the same. Similar problems arise in evaluating the derived network. Kossinets et al [7] also modeled information flow, based on the potential, in order to improve the robustness of his model against nor-mal cyclical patterns. Ma et al [9] used a heat diffusion model to show influence. While the activation methods are similar, Ma X  X  model differs from [13, 4] in that the experi-ment was run on epinions.com [3] which had an explicit trust network with which to diffuse influence over. Although the trust network can help product recommendation, users who trust each other typically have rated very few products in common [16]. The link structure of a graph has also been theorized to identify innovators [12].

In this work we do not use the network structure directly, instead we rely on it as a sanity check for evaluating the strength of our clusters: we use our understanding of eco-nomics to cluster users into meaningful groups, then use these groups to evaluate subsections of the trust network to see how well each cluster forms a social network by itself.
Recently, researchers have explored ordering-based prod-uct rankings. The general notion is a product ranking in-fluenced by two factors -the global ranking of products and a local preference. Yao et al [18] modeled pairwise rankings as a graph between products where each link represented one user X  X  preference. Yao then used Hodge decomposition to separate the graph into three orthogonal pieces: a global ordering, user local preference, and an error component for how well the data fit the model. He showed his method X  X  effectiveness on the Netflix [10] dataset. Liu et al [8] cre-ated a global ordering of products using a greedy approach based on one product X  X  desirability over another, as well as a Markov random field approach similar to PageHits.
Both Liu and Yao determined that ordering based meth-ods for product rankings can be as effective as collaborative filtering [18, 8]. The Markov chain approach proposed by Liu for total orderings is similar to the transition proba-bilities method proposed by Song [14]. Our model connects the two ideas, using total orderings to predict followers from innovators in order to reason about the products.

Our work on ordering users is similar to the learning-to-rank problem of ordering search results for a query. The difference lies in the grouping of objects and in the way we learn. In learning to rank we learn to order pages relative to a specific query by attempting to minimize the error in a group of learned page orderings. Here we are given the individual ordering of users for each product and attempt to find a single global ordering for which error is minimized.
The Epinions.com data contains reviews made by different Figure 1: Pipeline overview. Each product is rep-resented as a list of user nodes (a). These lists are combined into a single graphical form (b), which is then traversed to produce a path through the graph representing a common ordering (c). users on a verity of different products. Since we do not have the actual purchase dates, we use the review dates as a reasonable approximation in this study. We theorize that the observed order can provide information about a user X  X  interest in a product and do not use any review content or rating information; instead, we only use the dates with which the reviews were posted.

Assuming that the innovators and laggards are consistent among products of similar ilk, we choose to define a total or-dering for each category of products. In Epinions.com, there are different tiers of categories (e.g., a cell phone is in the category  X  X hones X  which is a subcategory of  X  X lectronics X ). We investigate these tiers separately in our study.
For a given category, there are a set of products, which we denote by P , and a set of corresponding users who have reviewed P , which we denote by U . Each product p  X  X  in the given category corresponds to a group of users U p  X  U who have reviewed p . There exists a natural total ordering among users in U p according to the time stamp of reviews posted by the users on p . We call such a total ordering a product total ordering corresponding to product p , and we denote it by  X  p : U p  X  N , where N is the set of natural numbers to indicate a user X  X  position in a certain ordering. The challenge here is how to create a category total ordering (denoted by  X   X  : U  X  N ) that best fits the product total ordering  X  p for each product p in the given category.
While our two techniques for deriving the total ordering differ mathematically, they follow the same broad procedure outlined in Figure 1. In step (a) the three product total or-derings are shown in a graphical form. The product order-ings have a total of 4 distinct users represented by colored nodes. The individual product orderings are then combined into a single graph where the weight on each link is a measure of the degree to which the source user node occurs before the destination user node (b). The total ordering, as shown on the right of the figure, is a path through the graph that vis-its every node, maximizing the weight of links whose source nodes occur earlier in the path than the destination nodes (c). Mathematically, we write the problem as to find the optimal category total ordering where Q i,j is the number of times user i occurs before user
It is worth noting how our problem definition differs from that of Liu [8] and Yao [18]. Instead of ranking products as in [8, 18], our focus is on ordering users. In our data, as in most recommender systems, the number of users in a category is [  X  ] is the Iverson bracket, i.e., 1 if the condition in square brackets is satisfied, and 0 otherwise. much larger than the number of products, and therefore the number of reviews issued per user is often smaller than the number of reviews per product. As a result, there are less constraints to satisfy relative to the number of objects being ordered. Each derived total ordering will have high agree-ment, despite being very different from each other. Consider the following example. Suppose a user i has only rated one before user i who occurs before user k . Let  X   X  be the best category total ordering. If user j occurs at position m and user k occurs at a later position, n , in  X   X  , then there are ( m  X  n ) possible places for user i to occur such that user i is concordant with both user j and user k . Then there are ( m  X  n ) possible orderings which are equally as good as  X  Thus in this problem setting there are likely to be multiple orderings that have the same agreement. These orderings may not perform equally well in the prediction tasks. As a result, performance of our experiments in Sections 5 and 6 is sensitive to the method of ordering.
The greedy method of deriving the category total ordering selects a user based on the potential of the user to form concordant pairs with the remaining users. The potential for user i is defined as q ( i ) = P j ( Q i,j  X  Q j,i ) where Q number of times user i occurs at an earlier position than user j among all product total orderings in the category. Thus, if user i was selected, there would be P j Q j,i instances that are concurrent with the ordering and P j Q i,j instances that would be discordant.

The greedy algorithm is as follows. Let i = arg max k q ( k ), the user with the highest potential among all users who have not been selected. Add user i to the end of the category total ordering and update the potentials of all remaining users by q ( k ) = q ( k )  X  Q i,k + Q k,i .

By the way q (  X  ) is defined, it is trivial to show P k q ( k ) = 0, and so there must be at least one user with a non-negative potential each iteration. Additionally, Q j,i is bounded above by the number of product orderings that contain both user i and user j . Therefore, a user who occurs in more product orderings has a higher maximum potential than users who occur in less. Thus the greedy approach has a natural bias towards ordering users with few product ratings last. It has been shown that the greedy approach is within a factor of 2 of the optimal solution [1].
The random-walk-based method of deriving the category total ordering models the users by a Markov chain. The probability of walking from user i to user j corresponds with the probability of user i occurring in the total ordering at some point before user j .

We start by computing a count matrix Q as in our greedy approach. Thus the transition count Q i,j is the number of product total orderings where user i occurs before user j and indicates the tendency for user i to rate a product before user j . While there are many ways we can represent the transition probability, p ( j | i ), of a user j rating a product immediately after user i , we choose to follow Liu X  X  work [8]. From the count matrix, we can then compute p ( j | i ) = of users which tend to follow each other, but still gives some weight to pairs of users who have never been seen. Let P be the transition probability matrix such that P i,j = p ( j | i ).
Given an initial start probability vector p 0 for the proba-bility of each user starting a product ordering, we can com-pute the probability of a random walk ending at each user at time t , p t = p t  X  1  X  P . In the limit, we will reach the stable eigenvector p  X  = lim t  X  X  X  p t . After obtaining p  X  , we derive the category total ordering as  X   X  ( i ) &lt;  X   X  ( j )  X  X  X  p p [ j ]. The intuition is that if p  X  [ j ] is higher than p there are more transitions (directly or indirectly) into user j in the Markov chain. User j should then be selected at a later position in the category total ordering.
In this section we derive the category total ordering us-ing both the greedy and Markov-chain based algorithms. We define a modified Kendall X  X  Rank Correlation Coefficient (KRCC2), for measuring the performance of each algorithm.
To evaluate our total orderings we used a modification to the traditional Kendall X  X  Rank Correlation Coefficient (KRCC) [5, 6]. The traditional KRCC for two orderings  X  1 and  X  2 on two sets of users U 1 and U 2 is defined as s The term  X  1 ( i ) is the rank position of user i in the ordering of  X  1 and I  X  is an indicator function of whether the signs disagree, that is, whether user i and user j are discordant.
KRCC defines the similarity between two orderings  X  and  X  2 by the number of pairs of discordant users relative to the number of co-occurring users in each ordering. If two orderings share no users in common, they would be in per-fect agreement. This definition becomes problematic when measuring similarity between products by their users since most of our products have only a fraction of users in com-mon. Two products that have few or no users in common are likely appealing to two different audiences and should not be considered similar. To counter this issue, we modify the traditional KRCC slightly and get KRCC2 defined as s .
 In KRCC2, I + is the indicator function for when the two signs agree, that is when user i and user j are concor-dant. When one ordering is subsumed by another, KRCC and KRCC2 are equivalent, but when two orderings are dis-parate, the similarity score in KRCC2 is  X  1. Thus an order-ing is penalized for having spurious users. This becomes an important distinction in section 5, where we compute the KRCC2 between a product total ordering and a category total ordering generated from other products.

Both KRCC and KRCC2 are sensitive to the size of the smallest order, which is typically the product total ordering. In 2001 product total orderings have an average of 6.2 users where categories contained on average 290 users.
We evaluate our category total ordering algorithms on a dataset mined from epinions.com[3] in June of 2008. Epin-ions.com provides a diverse set of products split under broad Figure 2: Users who occur early in the product total orderings tend to rate slightly more products. categories, e.g.,  X  X ids &amp; Family X , as well as specific cate-gories, e.g.,  X  X aby Care. X  Epinions.com also provides a trust network, where users have explicitly indicated the trust they have for other users. We crawled 14 broad categories, 118 specific categories with 62,952 products. Our snapshot con-tained 45,172 users with 501,502 trust links. We postpone the study of the trust network until Section 6. In the absence of a purchase date, we use review date. For simplicity, we only consider the first date when a user reviewed a product more than once.

From the data we explore the relation between average product total ordering of a user and the number of products the user rated in Figure 2. Only users who joined prior to 2001 and reviews dated after 2001 were considered. Thus all users would have an opportunity to review all products. Figure 2 shows the category coverage (percentage of rated products in a category) as a function of the average normal-ized position of a user. Each curve represents one category of products. Since many users rank a handful of products, we average across all users occurring at the xth interval for the category. As the curve shows, those who tend to occur earlier in the review ordering (hence likely innovator) tend to review more products in each category than the likely laggards. If we further assume that there is a positive cor-relation between the number of reviews and the number of purchases, we can draw a conclusion that innovators tend to purchase more than laggards.

Next, we investigate the performance of our two algo-rithms in computing category total orderings. In Figure 3 and Figure 4 we graph the results of the KRCC2 score over time for both the greedy ordering method and the Markov ordering method. For a given timestamp, we collect all user reviews posted on or before the timestamp, then group the reviews by product categories using the 14 broad categories and 118 specific categories provided by Epinions.com. We compute a category total ordering for each category and measure the overlap between category total ordering and each product total ordering using the KRCC2. A higher KRCC2 score means the given category total ordering is consistent with more of the product total orderings in the category and therefore fits the data better.

From Figure 3 and Figure 4 we observe that the effects of the added constraints are much larger across all prod-Figure 3: The average Kendall Rank Correlation Coefficient for the category total orderings derived using the Greedy Ordering.
 Figure 4: The average Kendall Rank Correlation Coefficient for the category total orderings derived using the Markov Ordering. ucts than either specific or broad categories. When there is a similarity between items, there is more consistency in the order with which users review them and a total order-ing is more easily achieved. As expected, we can see that the roles of innovators and laggards are more consistent in a specific category of products. We also observe from the figures that contrary to Liu X  X  findings [8], on this Epinions data the greedy ordering method outperforms the Markov ordering method. We believe this result is due to the do-main difference between our task and Liu X  X  discussed earlier and in the natural biases of the two algorithms.

The sparseness of the epinions.com data adversely affects the performance of the Markov approach. To illustrate this, suppose we have a set of product orderings analogous to Fig-ure 5. Here, there is only one product user j has reviewed, so user j occurs in only one product ordering, Q [ i,j ] =  X 
Q [ k,j ] = 1. In contrast, user i has rated many prod-ucts, and occurs in many product orderings,  X  k Q [ k,i ] = p where 1 p . This implies  X  k P [ k,j ]  X  k P [ k,i ]. Therefore the probability of transitioning to user j is low compared to the probability of transitioning to i . Thus, p  X  [ j ] p As a result, user j would occur before user i in the total ordering creating a discordant pair.

In the greedy approach, the potential to create concor-dant pairs with users who occur infrequently is relatively small. The algorithm has a natural bias towards selecting frequently occurring users first. As we have seen in Fig-Figure 5: In this example user j , a likely laggard, rated only one product where user i has rated many products and is neither innovator or laggard. ure 2, users who rate more products tend to occur earlier in the product ordering. Thus the natural bias in the greedy algorithm better matches the observed data.

Since the Greedy approach outperformed the Makrov ap-proach in terms of KRCC2, we use the greedy approach to find total orderings throughout the rest of this paper.
While we can calculate agreement between orderings, we have no ground truth total category ordering within the Epinions.com framework. In this section, we evaluate the derived category total ordering in traditional information re-trieval tasks of classification and recommendation to prove their usefulness.
It is commonly accepted that a user X  X  adoption time of a product is influenced by his or her interests in it. Since categories often group similar products with similar features, a user is likely to have a similar interest level across the products in the category. We should be able to predict the category of a product based on the user adoption times.
In the following experiments we partition our products into two sets of 31,000 products. We derive the category total orderings for products in the first set. The category of a product in the second set is predicted to be the category whose derived total ordering from the first set is most similar to the product total ordering according to KRCC2. In order to evaluate the effectiveness of the ordering, we only consid-ered test cases which had at least three users. We name our algorithm for classifying product categories by using cate-gory total orderings  X  X otalOrdering X , and we compare the performance with that of three baseline algorithms.
Our first baseline,  X  X ayes X , consisted of a Naive Bayes clas-sifier with an ordering independence assumption. We com-pute p ( c | u 1 ,u 2 ,...,u n ) which is proportional to p ( u  X  X  X  p ( u n | c ) p ( c ). Users themselves are already a strong fea-ture for classifying product categories. We compare our al-gorithms with this baseline to demonstrate that the ordering of users can improve classification of products.

In our second baseline,  X  X airwise X , we wanted to see the impact of the relative ordering on the classification prob-lem to determine whether a full ordering was necessary. We model the pairwise ordering between all pairs of users for each category regardless of how far apart they appear. Here we use the sufficient statistics as the relative probability for u occurring before u j for each category. Figure 6: The category prediction accuracies using the four methods. Total Ordering outperforms all other methods.

The third baseline,  X  X arkov X , is a first-order Markov pre-diction method. In this baseline, we use the Markov as-sumption that the probability of a user occurring next in a chain is independent of all other users given the user imme-diately occurred before it. Then the category for a prod-uct with observed reviews by u 1  X  X  X  u n is proportional to baseline differs from the Pairwise baseline in that only neigh-boring observations are considered.

All of our experiments used Good-Turing smoothing to accommodate for data sparseness.
The results are shown in Figure 6. In the figure, we plot the percentage of time the true category was in the top N predicted categories. As we can see, the Total Order-ing method outperforms the others, with accuracy around 100% for N  X  3. The Bayes algorithm has the next best performance, followed by the Markov ordering and finally the Pairwise algorithm. The primary reason the total order-ing method for product classification works so well is that it is less sensitive to categories with few users and to the presence of new users. Since each user rates on average 2.5 products per category (4.9 products overall), and each prod-uct has an average of 4 ratings, rare users is a fairly common occurance.

To illustrate the rare user problem, let us assume a test product has a new, previously unseen user, u i , between u and u i +1 . In the Markov baseline the transition probabil-ity for p ( u i  X  1 | u i +1 ) might be high, but since u been witnessed before the transition probability p ( u i | u as well as the transition probability between p ( u i  X  1 both low, even with smoothing. If the user has already shown interest in other categories, as is often the case, their p ( u i | u i +1 ) in those categories may be much higher, adversely affecting the Markov approach. The Pairwise baseline model is also susceptible to new users since there are n  X  1 out of namely p ( c | u 1 ,u i ) ... p ( c | u i  X  1 ,u i ), p ( c | u In the Bayes baseline approach p ( c | u i ) is also low. Each new user, however, only affects one term, which explains why the Bayes approach outperforms the other baselines.

In our Total Ordering, u i is not discordant with any other u , and the same number of concordant pairs still exists. As a result, the method achieves a much higher performance over the other algorithms.
While knowing a product X  X  category is useful, predicting the order of laggards is also of interest. In this experiment, we used the Total Ordering algorithm with KRCC2, as well as a Bayes baseline approach since it outperformed the other baselines. We use the same product train and test set as in Section 5.1. For a product in the test set, we used the order of user reviews that predate 2001 to predict the product category, and then predicted the order of the users who will review the product next. We tested in two scenarios: one where the true category was known, and again when the true category needed to be predicted.
If the true category was known, we predicted the ordering of users who would follow was exactly the total ordering for the category. If the category was not known, we weighted each category according to the KRCC2 similarity metric. To determine how to evaluate the probability of one user being a laggard relative to another we look at the distribu-tion of users for each product total ordering. For two users in the category, the number of users who occur between them in any given product ordering ( dist ( u i ,u j an exponential distribution. We thus model the probability of the user u i occurring before user u j as proportional to e
For the Bayes ordering, we make the Na  X   X ve Bayes in-dependence assumption. Assuming the first n users are ( u 1 ,...,u n ) and we compute the probability of the next, pre-viously unseen user u i as p ( u i | u 1 ,u 2 ,...,u n )  X  Q based on the assumption that the prior probability P ( u i uniform, P ( u 1 ,u 2 ,...,u n ) is independent of u i , and the inde-pendence assumption between u 1 ,u 2 ,...,u n given u i . Where-fore we are selecting the user who maximizes the expression p ( u i | u 1 ,u 2 ,...,u n )  X  p ( u i | u 1 ) p ( u i | u
The results are shown in Figures 7. In the figure, the x axis represents the number of followers to be ordered by the algorithms, while the y axis represents the KRCC2 score between the predicted ordering and the true ordering of fol-lowers. We see that the category total orderings clearly out-performs the Bayes baseline algorithm. This is likely due to the fact that the spacing of users in the product total ordering is similar to those of the category total ordering.
Even though TotalOrdering outperforms Bayes at predict-ing category, KRCC2 exhibits a much stronger improvement with explicit category information. In fact, ctegory knowl-edge has little effect on Bayes Classifiers. Interestingly, the additional information of the category did not help the Bayes approach much. Next we explore total orderings in a social context. An Epinions.com user explicitly indicates which other users he or she trusts, revealing a network of trust. In this section, we conduct several experiments to show that our category total ordering has a strong correlation with the trust network by identifying small world subsets. Figure 7: Measuring the accuracy of predicting fol-lowers with KRCC2 similarity metric between pre-dicted and actual follower orderings.
 Figure 8: The amount of influence is measured in the number of users who  X  X rust X  a given user.
We first show that there exist correlations between innova-tors, laggards and trust. It has been shown that innovators have a greater impact on the rest of the network than the laggards [11]. Thus, they are more likely to be influencers (trusted by others). We consider only users who have been members of epinions.com prior to 2001, and their reviews post January 1st, 2001, since newer members will not have the opportunity to appear early in the total ordering and have less exposure for the other users to trust them. We also only consider categories which have at least 100 prod-ucts to prevent data sampling issues. In Figure 8 we map the average normalized position in the product total order-ings with the average amount of trust users put in those who occur at that position. Each curve represents the plot for a broad category, and each point on a curve denotes the aver-age amount of trust placed in users who occur at the average normalized position. The aggregation over all products con-cur with each individual category curve. From Figure 8 we see the amount of trust a user obtains tends to be higher if the user occurs earlier in the product orderings. Thus users who are likely innovators tend to be more trusted than users who are laggards.
As we has seen in Section 4, the category total orderings often have high agreement with each of the product total orderings. We also have seen in Section 5 that the derived category total ordering can be used in product category clas-sification. In this section, we propose a k -means-type algo-rithm to cluster products and users based on the category total ordering. We use the trust network at Epinions.com as external evidence to measure the performance of the user clustering (i.e, user communities).
For our total ordering clusterer, the centroid is the derived category total ordering for each cluster and assign products to the cluster whose centroid is closest to the product to-tal ordering as measured by KRCC2. We continue to com-pute the centroid and repartition the data until convergence. While each product exists in only one cluster, we say a user belongs to any cluster with which they have rated a product. As can be seen, our algorithm is based on two intuitions: (1) the sets of products have a natural order of users who are in-terested in some aspect of the products (2) users who share the same interests are more likely to know each other. Thus if we group users based on the category total ordering, we believe we will see more trust links between users in the given category.

We also use a k -means-type algorithm for the baseline algorithm, using only the set of users as the feature for a product. The centroid is computed as the union of users who have reviewed at least one product in the given clus-ter, U c . If U p is the set of users who have reviewed product centroid, where | X | is the cardinality of a set. The denomi-nator helps control the cluster size, and prevents one cluster from dominating the others when partioning the products according to which category they are most similar too.
We use the trust network in Epinions.com as external ev-idence to measure the user communities obtained by each clusterer. Once we have clustered the products according to each algorithm, a graph is constructed for each category based on the social network aspect of Epinions.com. Each node in the graph represents a user who rated a product in that cluster. A link is then added between users u i and u user u i explicitly trusted user u j on the epinions.com web-site. From there we computed the Clustering Coefficient [17] for each resulting subgraph of the trust network. The clus-tering coefficient measures how close a node is from forming a clique with it X  X  neighbors. It was first used by Watts et al[17] to show how closely a network resembles a small world graph. Graphs with a high Clustering Coefficient tend to ex-hibit the small world property where there is a short path between any two nodes. Social networks are often measured in terms of their small world properties.

In Figure 9 we plot the average clustering coefficient as a function over time. As can be seen, our total order-ing algorithm clearly outperforms the baseline algorithm based on the set similarity. The clusters tended to also have higher Clustering Coefficients, and better resemble small world graphs. This shows that ordering based clustering can be used to identify communities. While we use the trust net-work to indirectly verify the effectiveness of our method of using the total ordering to characterize user adoption pat-terns; we believe these results show the potential of user Figure 9: The average clustering coefficient over the product cluster user graphs as a function of time. adoption patterns to analyze and predict the trust among users. We plan to conduct such studies in future work.
In this paper, we studied the user adoption patterns by creating total orderings of users in an online product review web site, Epinions.com to identify innovators and laggards. We discussed two algorithms for computing the category to-tal ordering induced from the reviews of the individual prod-ucts and demonstrated that the category total ordering is consistent with the orders of users reviewing each individual product. We also proposed to use a modified version of the Kendall X  X  Rank Correlation Coefficient to compare different algorithms for computing the total orderings.

We applied the category total ordering to two traditional information retrieval tasks: predicting product categories and predicting the followers. The former task can help au-tomatic classification of new products while the latter task has been shown helpful for personalized recommendation. Our experimental results showed that by using the category total ordering as a new feature, the performance of both tasks are significantly improved.

We also studied the relationship between the user adop-tion pattern and the trust among users. We showed that the category total ordering offers a new mechanism for de-tecting user communities and predicting the trust network among users. This result demonstrated that our model in user adoption pattern is beneficial in other social network tasks such as trust network analysis.

In future work we plan to further investigate the relation-ship between user adoption patterns. We seek to answer questions such where innovators and laggards place their trust, whether a laggard tends to trust innovators or other laggards. We will also conduct a user study of adoption-time based personalized recommendation. This research was supported in part by National Science Foundation IIS-0713111, a NSF graduate Fellowship, and a gift from Microsoft. Any opinions, findings, conclusions or recommendations expressed in this paper are the authors X , and do not necessarily reflect those of the sponsors. [1] W. W. Cohen, R. E. Schapire, and Y. Singer.
 [2] P. Domingos and M. Richardson. Mining the network [3] Epinions.com. Epinions.com. [4] D. Kempe, J. Kleinberg, and E. Tardos. Maximizing [5] M. Kendall. A new measure of rank correlation. In [6] M. Kendall. Rank correlation methods. Charles [7] G. Kossinets, J. Kleinberg, and D. Watts. The [8] N. Liu and Q. Yang. Eignerank: A ranking-oriented [9] H. Ma, H. Yang, M. R. Lyu, and I. King. Mining [10] Netflix. Netflix prize. http://www.netflixprize.com [11] E. M. Rogers, editor. Diffusion of Innovations . The [12] T. Rohan, T. J. Tunguz-zawislak, S. G. Sheffer, and [13] P. Rusmevichientong, S. Zhu, and D. Selinger. [14] X. Song, Y. Chi, K. Hino, and B. L. Tseng.
 [15] X. Song, B. L. Tseng, C. Y. Lin, and M. T. Sun. [16] S. K. Tyler and Y. Zhang. Open domain [17] D. J. Watts and S. Strogatz. Collective dynamics of [18] Y. Yao. Hodge decomposition, spectral embedding,
