 In supervised text classification learning algo-rithms, the learner (a program) takes human la-beled documents as input and learns a decision function that can classify a previously unseen doc-ument to one of the predefined classes. Usually a large number of documents labeled by humans are used by the learner to classify unseen documents with adequate accuracy. Unfortunately, labeling a large number of documents is a labor-intensive and time consuming process.

In this paper, we propose a text classification algorithm based on Latent Dirichlet Allocation (LDA) (Blei et al., 2003) which does not need la-beled documents. LDA is an unsupervised prob-abilistic topic model and it is widely used to dis-cover latent semantic structure of a document col-lection by modeling words in the documents. Blei et al. (Blei et al., 2003) used LDA topics as fea-tures in text classification, but they use labeled documents while learning a classifier. sLDA (Blei and McAuliffe, 2007), DiscLDA (Lacoste-Julien et al., 2008) and MedLDA (Zhu et al., 2009) are few extensions of LDA which model both class labels and words in the documents. These models can be used for text classification, but they need expensive labeled documents.

An approach that is less demanding in terms of knowledge engineering is ClassifyLDA (Hing-mire et al., 2013). In this approach, a topic model on a given set of unlabeled training documents is constructed using LDA, then an annotator assigns a class label to some topics based on their most probable words. These labeled topics are used to create a new topic model such that in the new model topics are better aligned to class labels. A class label is assigned to a test document on the ba-sis of its most prominent topics. We extend Clas-sifyLDA algorithm by  X  X prinkling X  topics to unla-beled documents.

Sprinkling (Chakraborti et al., 2007) integrates class labels of documents into Latent Semantic In-dexing (LSI)(Deerwester et al., 1990). The ba-sic idea involves encoding of class labels as ar-tificial words which are  X  X prinkled X  (appended) to training documents. As LSI uses higher or-der word associations (Kontostathis and Pottenger, 2006), sprinkling of artificial words gives better and class-enriched latent semantic structure. How-ever, Sprinkled LSI is a supervised technique and hence it requires expensive labeled documents. The paper revolves around the idea of labeling top-ics (which are far fewer in number compared to documents) as in ClassifyLDA, and using these la-beled topic for sprinkling.

As in ClassifyLDA, we ask an annotator to as-sign class labels to a set of topics inferred on the unlabeled training documents. We use the labeled topics to find probability distribution of each train-ing document over the class labels. We create a set of artificial words corresponding to a class la-bel and add (or sprinkle) them to the document. The number of such artificial terms is propor-tional to the probability of generating the docu-ment by the class label. We then infer a set of topics on the sprinkled training documents. As LDA uses higher order word associations (Lee et al., 2010) while discovering topics, we hypothe-size that sprinkling will improve text classification performance of ClassifyLDA. We experimentally verify this hypothesis on three real world datasets. Several researchers have proposed semi-supervised text classification algorithms with the aim of reducing the time, effort and cost involved in labeling documents. These algorithms can be broadly categorized into three categories depending on how supervision is provided. In the first category, a small set of labeled documents and a large set of unlabeled documents is used while learning a classifier. Semi-supervised text classification algorithms proposed in (Nigam et al., 2000), (Joachims, 1999), (Zhu and Ghahra-mani, 2002) and (Blum and Mitchell, 1998) are a few examples of this type. However, these algo-rithms are sensitive to initial labeled documents and hyper-parameters of the algorithm.

In the second category, supervision comes in the form of labeled words (features). (Liu et al., 2004) and (Druck et al., 2008) are a few examples of this type. An important limitation of these algorithms is coming up with a small set of words that should be presented to the annotators for labeling. Also a human annotator may discard or mislabel a pol-ysemous word, which may affect the performance of a text classifier.

The third type of semi-supervised text classifi-cation algorithms is based on active learning. In active learning, particular unlabeled documents or features are selected and queried to an oracle (e.g. human annotator).(Godbole et al., 2004), (Ragha-van et al., 2006), (Druck et al., 2009) are a few ex-amples of active learning based text classification algorithms. However, these algorithms are sensi-tive to the sampling strategy used to query docu-ments or features.

In our approach, an annotator does not label documents or words, rather she labels a small set of interpretable topics which are inferred in an un-supervised manner. These topics are very few, when compared to the number of documents. As the most probable words of topics are representa-tive of the dataset, there is no need for the annota-tor to search for the right set of features for each class. As LDA topics are semantically more mean-ingful than individual words and can be acquired easily, our approach overcomes limitations of the semi-supervised methods discussed above. 3.1 LDA LDA is an unsupervised probabilistic generative model for collections of discrete data such as text documents. The generative process of LDA can be described as follows: 1. for each topic t , draw a distribution over 2. for each document d  X  D Where, T is the number of topics,  X  t is the word probabilities for topic t ,  X  d is the topic probabil-ity distribution, z d,n is topic assignment and w d,n is word assignment for nth word position in docu-ment d respectively.  X  t and  X  w are topic and word Dirichlet priors.
 The key problem in LDA is posterior inference. The posterior inference involves the inference of the hidden topic structure given the observed doc-uments. However, computing the exact posterior inference is intractable. In this paper we estimate approximate posterior inference using collapsed Gibbs sampling (Griffiths and Steyvers, 2004).
The Gibbs sampling equation used to update the assignment of a topic t to the word w  X  W at the position n in document d , conditioned on  X  t ,  X  w is: where  X  w,c is the count of the word w assigned to the topic c ,  X  c,d is the count of the topic c assigned to words in the document d and W is the vocabulary of the corpus. We use a subscript d,  X  n to denote the current token, z d,n is ignored in the Gibbs sampling update. After performing collapsed Gibbs sampling using equation 1, we use word topic assignments to compute a point estimate of the distribution over words  X  w,c and a point estimate of the posterior distribution over topics for each document d (  X  d ) is:
Let M D = &lt; Z,  X  ,  X  &gt; be the hidden topic structure, where Z is per word per document topic assignment,  X  = {  X  t } and  X  = {  X  d } . 3.2 Sprinkling (Chakraborti et al., 2007) propose a simple ap-proach called  X  X prinkling X  to incorporate class la-bels of documents into LSI. In sprinkling, a set of artificial words are appended to a training docu-ment which are specific to the class label of the document. Consider a case of binary classification with classes c 1 and c 2 . If a document d belongs to the class c 1 then a set of artificial words which represent the class c 1 are appended into the doc-ument d , otherwise a set of artificial words which represent the class c 2 are appended.

Singular Value Decomposition (SVD) is then performed on the sprinkled training documents and a lower rank approximation is constructed by ignoring dimensions corresponding to lower singular values. Then, the sprinkled terms are removed from the lower rank approximation. (Chakraborti et al., 2007) empirically show that sprinkled words boost higher order word associ-ations and projects documents with same class la-bels close to each other in latent semantic space. In our text classification algorithm, we first infer a set of topics on the given unlabeled document cor-pus. We then ask a human annotator to assign one or more class labels to the topics based on their most probable words. We use these labeled topics to create a new LDA model as follows. If the topic assigned to the word w at the position n in docu-ment d is t , then we replace it by the class label assigned to the topic t . If more than one class la-bels are assigned to the topic t , then we randomly select one of the class labels assigned to the topic t . If the annotator is unable to label a topic then we randomly select a class label from the set of all class labels. We then update the new LDA model using collapsed Gibbs sampling.

We use this new model to infer the probability distribution of each unlabeled training document over the class labels. Let,  X  c,d be the probability of generating document d by class c . We then sprin-kle s artificial words of class label c to document d , such that s = K  X   X  c,d for some constant K .
We then infer a set of | C | number of topics on the sprinkled dataset using collapsed Gibbs sam-pling, where C is the set of class labels of the training documents. We modify collapsed Gibbs sampling update in Equation 1 to carry class label information while inferring topics. If a word in a document is a sprinkled word then while sampling a class label for it, we sample the class label asso-ciated with the sprinkled word, otherwise we sam-ple a class label for the word using Gibbs update in Equation 1.

We name this model as Topic Sprinkled LDA (TS-LDA). While classifying a test document, its probability distribution over class labels is inferred using TS-LDA model and it is classified to its most probable class label. Algorithm for TS-LDA is summarized in Table 1. We determine the effectiveness of our algorithm in relation to ClassifyLDA algorithm proposed in (Hingmire et al., 2013). We evaluate and com-pare our text classification algorithm by comput-ing Macro averaged F1. As the inference of LDA is approximate, we repeat all the experiments for each dataset ten times and report average Macro-F1. Similar to (Blei et al., 2003) we also learn supervised SVM classifier (LDA-SVM) for each dataset using topics as features and report average Macro-F1. 5.1 Datasets We use the following datasets in our experiments. 1. 20 Newsgroups: This dataset contains messages across twenty newsgroups. In our experiments, we use bydate version of the is divided into training (60%) and test (40%) datasets. We construct classifiers on training datasets and evaluate them on test datasets. 2. SRAA: Simulated/Real/Aviation/Auto UseNet data 2 : This dataset contains 73,218 Table 1: Algorithm for sprinkling LDA topics for text classification UseNet articles from four discussion groups, for simulated auto racing (sim auto), simulated aviation (sim aviation), real autos (real auto), real aviation (real aviation). Following are the three classification tasks associated with this dataset. 1. sim auto vs sim aviation vs real auto vs real aviation 2. auto (sim auto + real auto) vs aviation (sim aviation + real aviation) 3. simulated (sim auto + sim aviation) vs real (real auto + real aviation) We randomly split SRAA dataset such that 80% is used as training data and remaining is used as test data. 3. WebKB: The WebKB dataset 3 contains 8145 web pages gathered from university computer science departments. The task is to classify the webpages as student, course, faculty or project . We randomly split this dataset such that 80% is used as training and 20% is used as test data. We preprocess these datasets by removing HTML tags and stop-words.
 For various subsets of the 20Newsgroups and WebKB datasets discussed above, we choose number of topics as twice the number of classes. For SRAA dataset we infer 8 topics on the train-ing dataset and label these 8 topics for all the three classification tasks. While labeling a topic, we show its 30 most probable words to the human an-notator.

Similar to (Griffiths and Steyvers, 2004), we set symmetric Dirichlet word prior (  X  w ) for each topic to 0.01 and symmetric Dirichlet topic prior (  X  t ) for each document to 50/ T , where T is number of topics. We set K i.e. maximum number of words sprinkled per class to 10. 5.2 Results Table 2 shows experimental results. We can ob-serve that, TS-LDA performs better than Classi-fyLDA in 5 of the total 9 subsets. For the comp-religion-sci dataset TS-LDA and ClassifyLDA have the same performance. However, Classi-fyLDA performs better than TS-LDA for the three classification tasks of SRAA dataset. We can also observe that, performance of TS-LDA is close to supervised LDA-SVM. We should note here that in TS-LDA, the annotator only labels a few topics and not a single document. Hence, our approach exerts a low cognitive load on the annotator, at the same time achieves text classification perfor-mance close to LDA-SVM which needs labeled documents. 5.3 Example Table 3 shows most prominent words of four topics inferred on the med-space subset of the 20Newsgroup dataset. We can observe here that most prominent words of the first topic do not rep-resent a single class, while other topics represent either med (medical) or space class. We can say here that, these topics are not  X  X oherent X . We use these labeled topics and create a TS-LDA model using the algorithm described in Table 1. Table 4 shows words corresponding to the top two topics of the TS-LDA model. We can observe here that these two topics are more coherent than the topics in Table 3.
Hence, we can say here that, in addition to text classification, sprinkling improves coherence of topics.

We should note here that, in ClassifyLDA, the annotator is able to assign a single class label to a topic. If the annotator assigns a wrong class la-bel to a topic representing multiple classes (e.g. first topic in Table 3), then it may affect the perfor-mance of the resulting classifier. However, in our approach the annotator can assign multiple class labels to a topic, hence our approach is more flexi-ble for the annotator to encode her domain knowl-edge efficiently. In this paper we propose a novel algorithm that classifies documents based on class labels over few topics. This reduces the need to label a large collection of documents. We have used the idea of sprinkling originally proposed in the context of supervised Latent Semantic Analysis, but the setting here is quite different. Unlike the work in (Chakraborti et al., 2007), we do not assume that we have class labels over the set of training documents. Instead, to realize our goal of reduc-ing knowledge acquisition overhead, we propose a way of propagating knowledge of few topic labels to the words and inducing a new topic distribu-tion that has its topics more closely aligned to the class labels. The results show that the approach can yield performance comparable to entirely su-pervised settings. In future work, we also envi-sion the possibility of sprinkling knowledge from background knowledge sources like Wikipedia (Gabrilovich and Markovitch, 2007) to realize an alignment of topics to Wikipedia concepts. We would like to study effect of change in number of topics on the text classification performance. We will also explore techniques which will help an-notators to encode their domain knowledge effi-ciently when the topics are not well aligned to the class labels.

