
Extensible mark-up language, XML (W3C X  X  XML 2000), is a markup language de-rived from standard generalized markup language (SGML) (W3C X  X  SGML 1986), which makes use of a hierarchical format for encoding structured data within a docu-ment. It allows the web publishers to declare their own elements and attributes using arbitrary words so that customized doc ument formats can be set up. Each XML element embeds the meaning of its corresponding data. Hence, the elements and their arrangement in the hierarchy not only describe the XML document structure but also implicitly provide its semantic meanings that will be very useful for the manipulation of XML documents in many applications.
 area of research in the past few years (Lee et al. 2001; Nierman and Jagadish 2002) and it is fundamental to many applications, such as integrating XML data source (Guha et al. 2002; Galhardas et al. 2002), XML dissemination (Pereira et al. 2001; Altinel et al. 2000), XML routing (Chan et al. 2002a, 2002b) and XML repositories (Liefke and Suciu 2000). For example, the structural similarity may en-able the XML filter and router to disseminate XML documents that satisfy the min-imum similarity to the user X  X  subscriptio n and to classify similar XML documents into the same category. To compute the structural similarity among XML documents, an effective and yet efficient method for c orrelating XML struct ures is needed. The problem is by no means trivial due to the irregular and incomplete properties of
XML documents. For example, XML documents may contain the same data, but they may have different structures. Even when they use the same document type descriptor (DTD), their tree structures may not be identical. Various methods have been proposed to solve the problem. In Nierman and Jagadish (2002), Moh et al. (2000) and Nestorov et al. (1998), the (tree) edit distance is adopted to measure the similarity among XML documents. They work on finding the minimum sequence of edit operations that can transform an XML tree into another. The sequence obtained can then be used to compute the similarity. References (Moh et al. 2000; Nestorov et al. 1998) also proposed to extract the DTD or schema from a collection of XML documents. One may then quantify the structural similarity between an XML docu-ment and a DTD. Documents that are similar to a selected DTD can then be grouped for classification and/or clustering applications. However, it is well known that any edit distance measure critically depends on the costs of the underlying edit operations and the problem of obtaining these edi t costs is still unsolved (Bunke 1997). duced in Lee et al. (2001), Miyahara et al. (2001, 2002) and Chang et al. (2001).
This approach makes use of data mining techniques to find the repetitive (docu-ment) structure for determining the similarity between documents. In Miyahira et al. (2001, 2002), a tag tree pattern is used to represent a semistructured document. It is an edge-labeled tree that has hyperedges as variables. An edge label is a tag or a key-word in XML, and a variable can be substituted by any tree. The proposed method still requires human intervention to provide the training examples. In Chang et al. (2001), another attempt to mine maximal frequent tag tree patterns in semistructured documents is reported. An application of the so-called PAT tree for pattern discov-ery in the encoded token strings of Web pages is proposed. By giving the expected pattern frequency and length, the PAT tree allows the user to easily traverse the tree to find all maximal frequent patterns. However, if the XML document set is large, the PAT tree will consume a huge amount of storage space. In Lee et al. (2001), the structural similarity is defined as the number of paths that are common and simi-lar between the hierarchical structures of the XML documents. They proposed to compute a minimal hierarchical structure of an XML document using automata and determine the frequent path of a tree using an adapted sequential mining approach.
This method provides accurate quantitative computation of similarity between XML documents, and encouraging experimental results have been reported.
 archical information, i.e. the level of the hierarchy at which an element locates.
Several weaknesses of this method can be observed. First, XML documents with dissimilar hierarchical structures but many c ommon paths (located at different levels of the hierarchies) will have very high similarity. Consider the two XML trees T and
Q in Fig. 1, where tree P matches trees T and Q with a common rooted element labeled A and the subelements labeled C and D, i.e. the subtree R of Fig. 1 is their common tree. Here, the common elements C and D do not locate at the same level of the two hierarchies (of T and Q) but the high similarity value as computed by the method of Lee et al. will indicate that they are exactly the same. Second, the proposed similarity computation method restricts measuring the element similarity in the preprocessing stage and prevents the use of the level information of common elements to discover the synonym elements in the mining stage. Given trees P and Q of Fig. 1, the method of Lee et al. will return subtree R as the common tree.
It will not produce an unknown node between the common root and the common leaf nodes as exemplified by tree S in Fig. 1, where the level information remains unchanged. If this method can return tree S as the common tree, we can reuse this common tree to determine the location of synonym elements and thus efforts to identify the possible location of synonym elements can be saved. Further, we can compute the similarity between each pair of unknown elements, i.e. B and B ,by their surrounding elements. We also tried to take this element similarity into account because it can be used to determine the degrees of semantic heterogeneity between the XML documents. In some cases, it can further qualify the similarity between the XML documents.

In this paper, we further pursue the sequential pattern mining approach to com-pute the structural similarity of XML documen ts. Here, the structural similarity means the number of paths and elements that are common and similar among the hierarch-ical structure of the XML documents. A simple method composed of a preprocess-ing step and a postprocessing step (for the mining engine) is proposed and through which the XML semantics can be determined and hence the similarity between the
XML documents can be computed appropriately. To overcome the aforementioned weaknesses of the method of Lee et al. , the proposed method takes into account the change of level information in the tree hierarchy and elements along the path.
It is beneficial to the similarity computatio n and also facilitates the determination of synonyms or common unmatched elements (a common unmatched element refers to the element located at a relatively similar position in the common path but denoted by another wording of the same meaning) between the paths. The rest of this paper is organized as follows. In Sect. 2, the problem of sequential mining of frequent XML document tree pattern and the proposed preprocessing method are presented.
The similarity computation and the way to identify the synonyms between XML documents are described in Sect. 3. Sectio n 4 reports the experimental results. The final section concludes the paper and outlines the future work.
In this section, we first introduce a preprocessing step for the incorporation of hier-archical information in encoding the XML tree X  X  paths. It is based on the preorder tree representation (PTR) (Sedgewick 1996) and will be introduced after a brief re-view of how to generate an XML tree from an XML document. We then describe the sequential pattern mining approach to compute the similarity between two sets of encoded paths, i.e. two XML documents. For easier presentation, it is initially assumed that there are no duplicate labels and each element in the XML document is assumed unique. The XML X  X  hierarchical structure can be re presented by a labeled rooted tree (W3C X  X 
DOM 2002). Figure 2 shows the correspondence between an XML document and its XML tree. XML tree is a rooted tree, wh ere each node represents an element in the XML document and the children of each node are the subelements of that node.
In the rest of the paper, each XML document is represented as a labeled tree and the structure of the XML document is considered.
 thesis system (Sedgewick 1996). In this system, a tree is defined by a sequence of parentheses and it consists of a root and a sequence of subtrees. Each tree is enclosed in parentheses of its parent node. By rewriting the parentheses at different levels and their correspondence to the parent node of the tree, the structural relationship can be easily seen. As the parent hesis system is a space-efficient representation of the tree structure, it is extremely useful in a pplications where very large trees need to be stored. Figure 3 shows the representation of the XML tree in Fig. 2 using the parenthesis system.

In this paper, we have adopted another representation to encode the XML tree, i.e. the preorder tree representation (PTR) (Sedgewick 1996). It is an extension of the parenthesis system wher e the information of each node is listed before its subtree and a tree is simply represented by a list of nodes and their parentheses. The key difference between the paren thesis system and the preord er tree representation is the inclusion of the node labels in the representation. Figure 4 shows an example of the XML tree in PTR.

As the XML X  X  hierarchical structure is r epresented as a labeled, rooted tree, the path can be represented by the elements from the root to the leaf. In the preorder representation, each element followed by a le ft parenthesis denotes a change of level in the tree hierarchy, i.e. going down the tree. The left parenthesis is a start symbol of traversing from a nonleaf root of the tree. The right parentheses are meaningless and hence can be removed from the path. More importantly, it reduces the mining time significantly. Under this representation, the level and the structure of the tree can be presented by a set of paths. It contains not only the path X  X  element information but also the level of the hierarchy for every element in the path.
 subtrees by the level of the tree structure. Each unit is associated with some document contents and indicates the amount of information included. The higher level of the tree structure contains more information at a coarser resolution while the lower level of the tree consists of less information at a finer resolution. Besides, the level of the tree also facilitates the determination of common unmatched elements between the paths and it will be described in the next section. Therefore, if any such paths are found frequently by the mining algorithm, the structural similarity between XML documents can be computed by determining the number of paths and their levels of hierarchy that are common and similar. To do so, we first go through the following four preprocessing steps for XML document representation. They are illustrated in Fig. 5.

Step 1 Conversion: Convert the XML document to tree format. The values of the elements in the tree are not considered here and only the structural information will be passed to the subsequent steps. The converted XML tree of Fig. 2 is shown in Fig. 5.

Step 2 Path Extraction: Traverse the elements from the root to each leaf node of the tree. Record the sequence and hier archical information for each path.
Step 3 Duplicated Path Removal: Remove any duplicated path. The duplicated paths in the tree are not considered here and only the unique ones will be passed to the next step.

Step 4 Path Encoding: Encode each path by the preorder tree representation. The root of the path is listed before the lower lev el elements and all the traversed elements are sorted by their levels in the tree. The path is then represented by the elements from the root to the leaf and separ ated by the left parentheses.
 2001) only considers the common elements in the paths and ignores the level of hierarchy of the elements. Based on step 4, the level of hierarchy can be introduced via the left parenthesis in the encoded path. Figure 6 elaborates the differences be-tween the proposed PTR encoding scheme and the method of Lee et al. The goal of this new scheme is to achieve more accurate similarity computation from the mined preorder path patterns and to identify the possible synonym term locations. Consider the two XML trees Y and Z in Fig. 6, where tree X matches tree Y and Z with a common rooted element A and the subelements C, D and E. For the PTR method, the common elements C, D and E do not locate at the same level of the two hier-archies and their similar values are diff erent. Besides, B and F can be identified as possible synonym terms.
The problem being considered here is ba sed on the idea that each path traversing from the root to the leaf of an XML document can be viewed as a sequence and based on which the sequential pattern mining (Agrawal and Srikant 1995) can be applied to find the frequent tree patterns. Each sequence corresponds to a set of elements ordered by decreasing level of hi erarchy and is labeled by a sequence-ID.
We denote it as x 1 x 2 ... x n and call such a sequence XML-sequence. An XML document contains a number of XML-sequences. Let the set of XML-sequences of an XML document be {s 1 s 2 , .., s n }. Using the terminology of Agrawal and Srikant (1995), a sequence is contained in another if it is a sequential subset of that sequence (see Agrawal and Srikant (1995) for details). In a set of sequences, a sequence s is maximal if it is not contained in any other sequence.

Here, we are given a database D of XML sequences, each of which consists of the following fields: document-ID, sequence-ID, tag (element) and the corresponding level of the hierarchy. No document is assumed having more than one element with the same sequence-ID and the level of hierarchy. Thus, we combine the document-
ID, sequence-ID and level of the sequence to be the identifier of that sequence. We also do not consider the number of identical sequences found in an XML document.
The problem of mining XML sequence patterns is to find the maximal frequent se-quences among all sequences satisfying the user-specified minimum support. Each such maximal frequent sequence represe nts a common structure or pattern of the
XML documents. To do so, we go through th e similar steps of the AprioriAll al-gorithm (Agrawal and Srikant 1995) and the major difference from the AprioriAll algorithm is the minimum support that is defined as the percentage of documents that have itemset or sequence in any one of their paths. Thus, the support count should be incremented only once per document even if the document contains the same set of items in two different paths. Another important point is that the minimum support of the mining stage must be 100% for our similarity computation application. In order to mine the frequent tree patterns or structural sequences, all XML-sequences are extracted and then encoded in PTR format. We go through the following steps for finding the maximal frequent sequences via the mining algorithm depicted in Fig. 7. An example is illustrated in Fig. 8.

Step 1 Sort Path Phase: The database D is sorted, with document-ID and path-ID as the major key and level as the minor key. This step implicitly converts a set of elements into a path. In the example given in Fig. 8(a)&amp;(b), the records or transac-tions convert to the document X  X  paths as in Fig. 8(c).

Step 2 Frequent Itemset Phase: In this phase, we find the first set of frequent (or large) itemsets L 1 . Here, the definition of finding frequent itemsets in a given database is slightly different from that being used in Agrawal and Srikant (1995).
In this paper, the support is defined as the percentage of documents that have the itemset in any one of their paths. Thus, the support count should be incremented only once per document even if the document contains the same set of items in two different paths. Another difference is that the minimum support must be 100% for our similarity computation application. The set of frequent itemsets is then mapped to a set of contiguous integers as exemplified in Fig. 8(d), which shows a mapping table for the next phase.

Step 3 Transform ation Phase: In this phase, we transform each path into another representation using the mapping table. Each element X  X  name is replaced by the mapped integer. If the element X  X  name is not included in the mapping table, it is not retained in the transformed path becau se it is not frequent. After this step, the path is represented by a list of integers. The path transformation step is shown in
Fig. 8(e) and the transformed representa tion can reduce the storage space and speeds up the mining process because nonfrequent items (which do not satisfy the minimum support) have already been removed.
 Step 4 Sequence Phase: In Agrawal and Srikant (1995), two algorithms, called AprioriAll and AprioriSome, have been pr oposed to realize this step. They follow
Fig. 7 to find the set of all frequent itemsets L k , i.e. the frequent sequences (common paths). The most critical computation of Fig. 7 is to generate potentially frequent se-quences (candidates) from the frequent seque nces obtained in previous iterations. As illustrated in Fig. 8(f), candidate four-pat h sequences can be generated from frequent three-path sequences. It has to go through a join step to form new longer sequence candidates, e.g. 1 , 2 , 2 , 3and1 , 2 , 3 , 2 are obtained by joining 1 then a prune step to remove those new candidates for which the subsequence frequent, e.g. 1 , 2 , 3 , 2 is pruned because a subsequence 2 listed in the frequent three-path sequences column). Details of such join-and-prune processes can be found from Agrawal and Srikant (1995) and therefore are omitted here. Based on Fig. 7, the set of all frequent itemsets, as exemplified by frequent one-path, two-path, three-path and four-path sequences in Fig. 8(g) are prepared and they will then be used to find the maximal frequent sequences in the next step.
Step 5 Maximal Phase: In this phase, we find the maximal frequent sequences among the set of frequent sequences according to Agrawal and Srikant (1995). The algorithm of this phase is described in Fig. 9 and the result of the example in Fig. 8 is recorded in the last column of Fig. 8(g), which can be translated into a set of common (document) paths and then a common XML tree as shown in Fig. 8(h).
As described in the previous section, the sequential pattern mining algorithm (Agra-wal and Srikant 1995) was adopted to find the maximal common paths (i.e. maximal frequent sequences) from the encoded XML paths of the two documents for compar-ison. Based on the mining results, the similarity between two documents D can be measured by the ratio between the m aximal common paths and the extracted paths of the larger document, i.e. the one with more elements. In this way, the simi-larity can change more quickly with the XML document size and it provides a more reasonable similarity value. In order to reduce the potentially extreme effect of the root element in the similarity computa tion (i.e. the root occurs in each path and it will be counted multiple times and hence domin ate the similarity computation), we assume that a pair of more similar XML documents should have a higher number of maximal common paths and more left par entheses in the paths. The similarity between two XML documents D 1 and D 2 is defined as follows: where N is the total number of level-1 subtrees (directly under the root) in the larger document; N t is the total number of paths in the subtree t of the N subtrees; M the number of elements in the path p of the subtree t ; m elements of the longest maximal frequent sequence that is contained in the path p of the subtree t ; and if the two documents have the same root element, MR will be follows. If the two documents are very s imilar to each other, more common paths are mined and have good matches to the extracted path from the original documents (the larger one is chosen here). Thus, m t , p will approach M m , p / M t , p of Eq. (1) close to 1 and Si m (D 1 ,D
Based on the maximal frequent sequences being mined, we propose an idea that determines the possible positions of synonyms, i.e. common unmatched elements, and uses them to calculate the similarity of these elements. We call this similarity as element similarity (ES), which can be us ed as an additional measure for document similarity computation.

The ES is determined as follows. First, the maximal common path (maximal frequent sequence) obtained from the mining stage is used to determine the most similar paths from each document. The most similar path means the longest path that contains the maximal frequent sequence. For notational convenience, let S
S be two sets of PTR-encoded paths from two XML documents D which we aim at determining the common paths and identifying the synonyms. Let p  X  S be their maximal common path.

Second, p c is aligned with p i and p j and the candidates of common unmatched element from each path are determined. Let e c , 1 ... of the path p c ,where k is the number of elements in p (last) element of path p c . Consider the paths p 1
G, (, E and p c = A, (, (, E. For p 1 and p c , B and D are considered as different elements in the alignment of p 1 and p c and thus they are the candidates for common unmatched element from p 1 . Similarly, for p 2 and p in the alignment of p 2 and p c and then G is the candidate for common unmatched element from p 2 . Algorithmically, when the elements of the common path e  X ( X  and e c , r + 1 =  X ( X  where 1  X  r &lt; k are located, a common unmatched element is assumed to exist between the positions r and r + respect to p i or p j , the element(s) between the c orresponding positions (i.e. e  X ( X  and e c , r + 1 =  X ( X ) is (are) the candidate(s) o f common unmatched element or possible synonyms.

Third, a reference table is constructed for the candidates identified in the previous step and the element similarity is computed . The reference table stores information about the leaf nodes (elements) of the subt ree for each candidate common unmatched element. For easier presentation, it is initially assumed that there are no duplicate la-bels and each element in the XML docum ent is assumed unique. Because each elem-ent is assumed unique in each XML document and the XML structure is acyclic, the leaf nodes indicate the semantic or concept of their ancestors. Based on this concept, each XML document is considered a concept hierarchy (Meng et al. 2002). Using their terminology, the concept hierarchy contains a number of concepts organized into multiple levels. The concepts at higher levels have broader meanings than those at lower levels. A child concept contains more specific meaning than its parent con-cept. In general, the leaf elements represen t the semantic of their parent element. We make use of this property to measure the semantic association between the candidate common unmatched elements from p i and p j and to compute the element similarity.
The element similarity of candi date common unmatched elements e and p j , respectively, is defined as where N a and N b are the sets of leaf nodes from the reference table for e respectively; | . | is the cardinality operator. Obviously, similarity ( e real interval [0, 1].

The most relevant pair of common unmatched elements for documents D
D can be determined by the elements pair with the highest value in Eq. (2). Such a similarity measure can be used to further qualify the XML document similarity. By replacing the zero contribution of the unmat ched element(s) in the path in Eq. (1) with the ES in Eq. (2), a combined method called PTR&amp;ES is proposed and the new similarity computation is defined as where c t , p is the sum of maximal ES of the common unmatched elements in the path p of subtree t ,i.e. where j is the number of common unmatched element in the path p of subtree t ; e and e i , b are the candidates of common unmatched elements from the two documents in the location i of path p of subtree t . The PTR and PTR&amp;ES similarity computation are exemplified in Fig. 10.
The goals of our experiments are to validate the idea of incorporating hierarchical information for better similarity computation and to test on the effectiveness of the proposed methods. To do so, the method of Lee et al. was chosen for comparisons.
The reason is that the method of Lee et al. uses a similar approach to determine the structural similarity of XML document and provides a 50 X 100% improvement in de-termining similarity over the traditional vector-space model. Our experiments were conducted as follows. We downloaded two sets of DTDs from ACM X  X  SIGMOD
Record homepage (ACM homepage 2002). These two sets of DTDs were published in 1997 and 2002. The DTDs published in 2002 are a modified version of the DTDs published in 1997. We called the DTDs that were published in 1997 as version 1 and the DTDs that were published in 2002 as version 2. Each DTD set contains the following three DTDs: Ord inaryIssuePage.dtd, Proceed ingsPage.dtd and Sigmod-
Record.dtd. Specifically, these two versions of the DTDs contain common elements, but the hierarchical structures between the corresponding DTDs (with same DTD name but different versions) are different. We use these six DTDs in the following experiments. We also downloaded IBM X  X  XML document generator from IBM home-page (1999). This generator accepts the ab ove DTDs as input and creates the sets of XML documents for simulations. We added the option of generating documents skewed with maximum height equal to seven and maximum repeated pattern equal to three, where some tag names appear more fre quently than others, as is generally the case in real-life documents. Based on the two sets of XML documents with similar characteristics, their simila rities were computed, analyzed and reported as follows.
In this experiment, five XML documents were generated from each DTD (homoge-neous XML documents) and the similarities between documents generated from the same DTD were computed. As the XML documents come from the same DTD, this is called homogeneous XML document similarity. Figure 11 shows a summary of the results. It can be seen that the similarity values obtained by the PTR method is quite similar to those of the method of Lee et al. In fact, they are slightly higher because our method uses a different path repr esentation scheme and similarity metric to calculate the XML document similarity.

Table 1 lists the means and variances of this experiment. For homogeneous XML document similarity computations, our method has lower variance than the method of Lee et al. It indicates that our method optimizes the potentially extreme effect of the common element in the structural similarity computation of the method of Lee et al. It is because the method of Lee et al. only considers the common element in the path while we consider also the level of hierarchy, making it more insensitive to unmatched elements in the paths. Thus, the proposed method fluctuates less than the method of Lee et al.
In this experiment, the similarities between documents of different DTDs (heteroge-neous XML documents) were analyzed. As the XML documents come from differ-ent DTDs, this is called heterogeneous XML document similarity. The XML docu-ments from ProceedingsPage.dtd (version 1) were adopted as the base documents while those from SigmodRecord.dtd (version 1 and 2) were used as query docu-ments. That is, documents from SigmodReco rd.dtd are used to search for most simi-lar documents from ProceedingsPage.dtd. Sp ecifically, the hierarchical structure be-tween SigmodRecord.dtd (version 2) and Pro ceedingsPage.dtd is more similar to that between Sigmod-Record.dtd (version 1) an d ProceedingsPage.d td. The experimen-tal results are shown in Table 2, where DocumentSet(x,y,z) is used to denote the similarities between document x from Pro ceedingsPage.dtd and document y from
SigmodRecord.dtd (version 1) and between document x and document z from Sig-modRecord.dtd (version 2). As the XML documents come from different DTDs, this is called heterogeneous XML document similarity.

Table 3 lists the means and variances of this experiment. For heterogeneous XML document similarity computations, our method has lower variance (except the docu-ment similarities with ProceedingsPage1. xml) than the method of Lee et al. It also indicates that our method optimizes the potentially extreme effect of the common element in the structural similarity computation of the method of Lee et al. For the document similarities with Proceedings-Pag e1.xml, the PTR method has higher vari-ance than the method of Lee et al. The reas on is that ProceedingsPage1.xml has an extremely dissimilar common hierarc hical structure (e.g. the width and height of the tree structure) to all the SigmodRecord.xml and PTR encoding provides this potential effect of hierarchical information i n the structural similarity computation.
This hierarchical information causes the PTR method to have higher variance than the method of Lee et al. Based on the statistics obtained, we conclude that, when comparing the extremely dissimilar str ucture documents, the PTR method, utilizing the level of hierarchical information, has obtained more reasonable results than the method of Lee et al. (discussed in the following part) and, when comparing the simi-lar structure documents, the PTR method also provides more stable (fluctuates less) results than the method of Lee et al.
 pared. Here, the PTR method was found superior to the method of Lee et al. For
DocumentSet (2,1,1), DocumentSet(2,2,2), DocumentSet(2,3,3), DocumentSet(2,4,4) and DocumentSet(2,5,5), the method of Lee et al. shows that the similarity values of
ProceedingsPage-SigmodReco rd(version 1) and Proceedings Page-SigmodRecord(ver-sion 2) are the same. The reason is that the two versions of SigmodRecord.dtd X  X  documents contain the same number of common elements in the paths for the Pro-ceedingsPage.dtd X  X  document. When comp aring these two sets of documents, our
PTR method can determine the most similar document from them. Again, this is due to the considerations of the hierarchical information in the proposed method. As mentioned in the beginning of this section, the hierarchical structure between SigmodRecord (version 2) and ProceedingsPa ge.dtd is more similar to that between
SigmodRecord.dtd (version 1) and ProceedingsPage.dtd. Hence, the proposed PTR method has obtained more reasonable results than the method of Lee et al. Similar cases have been observed from Table 2 but are omitted here.

PTR method. Consider the three XML trees SigmodRecord.xml (version 1 and 2) and ProceedingsPage.dtd in Fig. 13, where t ree ProceedingsPage.xml matches tree
SigmodRecord.xml with common elements labeled A, C, E, G, H, I and J. Here, these common elements are identified by the method of Lee et al. and hence the similarity values between them are the sa me. As these elements do not locate at the same level of the two hierarchies, they are treated differently by our method and hence the similarity values are different. The PTR method not only discovers these common elements but also determines th e common unmatched element positions such as elements labeled N and F, which will be considered as synonym terms.
This property provides an additional capability to calculate the distance among XML documents.
 method. DocumentSet(x,y) is used to denote the similarity between document x from ProceedingsPage.dtd and document y from SigmodRecord.dtd (version 1). For
DocumentSet(1,1), DocumentSet(1,3) and DocumentSet(1,5), the PTR method ob-tained a different result in DocumentSet(1,3) from the method of Lee et al. The reason is that their method has found different numbers of common elements in the paths for the SigmodRecord-Proceedings Page cases and hence generated differ-ent similarity values. The PTR method has obtained the same results for the three document set cases. For the PTR method, these common elements do not locate at the same level of the two hierarchies, they are treated differently by our method and hence the overall similarity values (lev el of hierarchical information and common element) of these documents are the same . It has also been validated that documents with dissimilar hierarchical structures but many common paths (located at different levels of the hierarchies) will not have unreasonably high similarity values generated by the proposed PTR method.

DocumentSet(1,3) and DocumentSet(1,5), the PTR method shows that the similarity values among them are the same (as indicated in Fig. 14). When comparing these three sets of documents, our PTR&amp;ES method can determine the most similar docu-ment from them, i.e. SigmodRecord.dtd X  X  document 3. It found common unmatched elements in the paths and hence generate d nonzero unmatched element similarity values. Similar cases (e.g. DocumentSet (4,1 ), DocumentSet(4,2), Document Set(4,4) and DocumentSet(4,5), which all SigmodRecord.dtd X  X  documents contain the same number of common elements and unmatched elements in the paths for the Proceed-ingsPage4.xml, both PTR and the method of Lee et al. show that the similarity values among them are the same) have been observed from other heterogeneous XML docu-ment similarity experiments but are omitted here. The common unmatched element similarity (PTR&amp;ES) method provides a further improvement in computing the XML documents X  structural similarity and compensates the shortcoming of the PTR method and the method of Lee et al.
 method and the PTR&amp;ES method. Consider the XML trees SigmodRecord1.xml, Sig-modRecord2.xml and ProceedingsPage.xml in Fig. 16, where the middle tree matches the other two trees with common elements labeled A, C, E, G, H, I and J and unmatched common elements labeled N a nd F. Here, these common elements and unmatched common elements are also determined by the PTR method. There are the same number of common elements and common unmatched elements in the two
SigmodRecord.xml trees, and so the PTR and the method of Lee et al. as well can-not distinguish which of the two trees is mo st similar to ProceedingsPage.xml. For the PTR&amp;ES method, it determines not only these common elements and unmatched common elements, but also the similar ity of common unmatched elements such as
N and F. The positions of N and F are considered as the synonym terms and can be used as additional information to calculate the distance among the XML docu-ments for further distinguishing the most similar XML document among the XML documents with the same number of common elements and unmatched common elements.
Table 4 provides another result of heterogeneous XML documents similarity ex-periment using the XML documents from OrdinaryIssuePage.dtd (version 1) as the base documents while those from Proceedi ngsPage.dtd (version 1 and version 2) were used as query documents. The similar r esults and cases have been observed in this experiment but the discussions are omitted here. From Table 2 and Table 4, the similarity value between the documents from OrdinaryIssuePag e.dtd and Proceed-ingsPage.dtd is higher than that between the documents from SigmodRecord.dtd and
ProceedingsPage.dtd. It indi cates that the ProceedingsPage .dtd is more similar to Or-dinaryIssuePage.dtd than SigmodRecord.dtd.
XML has become increasingly popular and people will have strong needs for a tool to effectively and automatically retrieve the target XML documents. There exist pre-vious works on extracting paths from XML documents and finding maximal common paths among extracted XML paths using the sequential pattern mining approach. In order to determine the similarity between XML documents, a previous algorithm takes advantage of the common elements in the paths but ignores the hierarchical information. In this paper, a new preprocessing step for preparing XML documents for similarity computation using sequential pattern mining is proposed. It makes use of a preorder tree representation (PTR) to encode the XML tree X  X  paths. It has the ability to include the element X  X  semantic and hierarchical structure of document in the computation of similarity between XML documents. A novel postprocessing step is also proposed to calculate the common unmatched element similarity obtained from the hierarchical information-based mining stage. It estimates the element X  X  semantics by their subtree or leaf node. The experimental results showed that the PTR method is preferable to the method of Lee et al. (Lee et al. 2001). It can overcome some of its weaknesses and provide more stable and reasonable similarity measurements.
The combined PTR and element similarity (PTR&amp;ES) method provides a further im-provement in computing the XML documents X  structural similarity and compensates the shortcoming of the PTR method and the method of Lee et al. We believe that the proposed methods can provide valuable help to the development and evaluation of XML similarity. The only drawback of our methods is that, as it is using the
PTR encoding method, the adapted sequen tial pattern mining required more time (roughly 2 X 3 times more) to find the maximal sequences than the method of Lee et al.
 Several issues for further research and i mplementation are raised by this work.
One being included in our future works is the investigation of a way to classify or cluster the XML documents by their content and hierarchical structure. Toward this direction, it would be worthwhile to integrate with the classical content-based retrieval method(s). The structural semantic can be used as the abstract of the docu-ment and the filter on the document content. It would be interesting to investigate the impact both on performance as well as quality of the results observed in XML clustering.

