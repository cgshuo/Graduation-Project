 Identity and access management will play an extremely critical role in the advancement of e-business as a primary mode of operation. As a result, this technology will transform the way organizations deploy security. This transformation could revolutionize business information systems, allowing organizations to use management is to protect valuable stakeholder information resources. The effectiveness of a solution is measured in terms of how well the assets of the stakeholders are protected, while their mission and business objectives are met. 
The decision-making on identity design involves hard choices such as resource allocation and competing objectives and organization strategy. When selecting controls, many factors need to be consid ered, including the protection policy of the organization, the legislation and regulations that govern the enterprise, along with safety, reliability, and quality requirements. Yet, there is no systematic analysis technique through which one can go from answers to these questions to particular security and privacy solutions. 
This paper is a follow up step to [3] on intentional modeling to support identity management, wh ere we propose the methodological framework for identity management. In this paper, we further elaborate on how to use this modeling approach to analyze the strategic rationales of business players/stakeholders, and their influences to the design decision making of system architecture in the setting of identity management, this modeling approach can help understand the major differences of existing vendor-based solutions, such as the .NET Passport [4], and Liberty Alliance ID management specification [2] With the support of this modeling approach, identity solution providers will be able to provide customizable solutions to different users. Organizations, who want to deploy identity management in its business settings, will be able to form an integrated solution that addresses competing high-level concerns with maximum optimization. In this section, we use the modeling constructs of a strategic actors modeling framework i* to build models explaining the identity problem at an intentional level. Strategic actors modeling framework i* uses concepts such as actor, role, agent, dependency, to represent the social context of a system explicitly, so that we may understand the fundamental needs and alternative ways to serve them better. 
Managing digital identities is about intelligently using identities to achieve business goals  X  such as increasing customer satisfaction, higher security, and reducing costs. In conducting business online, an organization can only use identities that are trusted. In i* , an intentional entity is defined as an actor, who seeks opportunities to fulfill his strategic interests, and mitigate vulnerabilities and threats to such interests. For instance, we may represent a business organization as an actor, whose high-level business requirements may be defined as softgoals, such as profitability, customer satisfaction, cost efficiency, security, etc. Such requirements are  X  X oft X  in nature as it relies on stakeholders X  subjective judgments. Lower level, concrete softgoals may have a positive or a negative contribution to a higher-level softgoal. Its influence can be a sufficient one or a partial one. We may also use tasks to represent concrete course of actio ns, or operationalize the softgoals. In i* framework, actors are distinguished into abstract roles and concrete agents. We usually use roles to represent conceptual functional units, while using agents to represent the entities with physical existence, either human, or machinery. Figure 1 illustrates the identity management requirements from another perspective, a strategic dependencies perspective. Instead of studying the internal rationales of actors, a Strategic Dependency view focus more on their bilateral social dependency relationships. Reading the model in Figure 1 from the right hand side, a general identity management requirements initiates by a Principal agent X  X  request to a Policy Enforcer to grant him access (to a service, resource, or application). In return, the Policy Authorization Assertions . However, again, the Authorization Authority will ask the Principal Although the authority roles are always combined one way or another in reality, we separate them here on the purpose of clearly acknowledging each unique functional unit. 
In a Strategic Dependency model, actors form social dependency networks to further their strategic interests, but at the same time, it also brings vulnerabilities and threats. By analyzing the strength and power of the depended parties, we may reason about their opportunities and vulnerabilities qualitatively. For example, a vulnerable dependency may be propagated upstream along the dependency link to impact other indirectly connected actors and their goals. Comparing this model with the diagram in Figure 1, we will notice that although the two models has common components, the model below has the advantage in many asp ects: it has richer ontological concepts that may explicitly distinguish entities of different nature; the strategic and intentional perspective makes it a natural choice for representing causal relationships. When combined with a SR model, it will be able to give a complete picture regarding an intentional entity X  s opportunities and vulnerabilities. Having the general business requirements and basic functional units needed for identity management identified, we may continue to explore the alternative architectural design options. There are currently many possible ways to macro-architecting the identity management service in an online business organization. The scenario given above shows that we may manage identity within the organization as-is. In such organization, identity management treatments are usually duplicated, and each individual owns and manages multiple disjoint identities simultaneously. Cost efficiencies are severely impacted by password resetting, multiple login/logout sessions, and manual interventions to integrate individual services, etc. Due to such unsatisfying state of the practice, we are motivated to explore other possible options in the following sub-sections. 3.1 Outsourcing ID Service: The .NET Passport Paradigm Outsourcing ID service means that the organization will delegate the task of managing identity to an outside actor, who has the specialty and would like to provide required ID service for the organization. The Microsoft .NET Passport [4] is a typical example for such model. It is composed of a suite of services for signing in users across a number of application. It solves the authentication problem for users by any site that supports a Passport service (referred to as Passport member web site, or participating site). The objective of Passport single sign in service is to help increase customer satisfaction by allowing easy access without the frustration of repetitive registrations and forgotten passwords. Continuing the analysis in the earlier sections, the model in Figure 2 shows that, Passport.com PLAYS the role of identity Service Provider , who takes on the responsibility of Authentication , Identification and Attribute Authority . In the mean while, Passport Member objectives and obligations of a common service user. As we can see, Passport.com is the only Identity Service Provider within the context. collecting ID Service Fee from Passport Member Web Site s, and to whom the user has to count on for Privacy . While this architecture improves simplicity of usage, it brings vulnerability to the security of user X  X  personal information. It satisfies the business needs of Passport.com very well, but at the expense of risking user privacy. Although Passport.com may move to use new protection technologies such Kerberos Ticket, it can only mitigate certain kinds of attacks, such as interception, but not those brought by the business model itself. 3.2 Form Federations: Th e Liberty Identity Paradigm The members of Liberty Alliance envision a networked world across which individuals and businesses can engage in virtually any transaction without compromising the privacy and security of vital identity information. To accomplish this vision, the Liberty Alliance establishes open technical specifications [2] to support a broad range of network identity-based interactions. The basic functional requirements of the Liberty architecture and protocols including the following: identity federation, authentication, use of pseudonyms, support for anonymity, and global logout. 
The strategic dependency model shown in Figure 3 follows similar ideas to the one on .NET Passport in Figure 2. The major differences in the Liberty Alliance ID standard are: companies (e.g. Company1.com , Company2.com ) implementing Liberty Alliance Identity Management play Liberty Identity Provider (LIP) role and Liberty Service Provider (LSP) role simultaneously. Usually, when one is playing LSP , another acts as a LIP . The two agents need to have mutual Trust , and that the Identity (of an user Jim need to) Be Federated beforehand. 
The distributive nature of the model shows that there can have several circles of trust in the Liberty standard mode. It implies that power and duty on identity management are distributed evenly among web service providers. By asking for the consent of user when doing identity federatio n, users can get back partial control to practice, as an open standard, it does not have strong enforcement to the matter. Service provider who deploys the Liberty-enabled products can choose among alternative ways of doing federation, redirection, and authentication. The relationship between providers is mutual trust and identity federation, rather than constant identity service user to provider relationship. 
Based on the analysis procedure in the previous subsections, stakeholders of a given organization will be able to identify a macro-architecture that matches the organization X  X  requirements and preferences the most. If an organization decides to play a more specialized role in an identity management business model, a natural, but difficult next step can be the evaluation, selection, and acquisition of the multiple, interdependent software components to meet the complex systems requirements and implementation constraints. While picking instances for candidate architectures, we have to follow certain general heuristic rules, as well as some architecture specific rules, such as those of Liberty. Example general rules can be: Components from same vendor are conflict free, but can be more expensive. Components with more functional units are more expensive. Combined use of components from different vendor has to be confirmed by a past case. All functional points required by candidate architecture have to be covered. Bearing these general rules, and high-level business objectives such as: low cost, best security, we will be able to identify a group of COTS components that could be combined to form a balanced solution that trading-off multiple concerns from different stakeh olders. Some example input knowledge of this process is given in Appendix B. An elaborated COTS component selection approach based on i* can be found in [1]. 
The i* approach is complementary to existing frameworks and techniques for identity management. Our approach supports the exploration and management of structural alternatives, based on a balanced consideration of all competing requirements, thus complementing the various point solutions of recent identity management techniques. Our approach is distinctive in its treatment of agents/actors as being strategic, and thus readily adap table to the identity management analysis domain illustrated in this paper. While this paper has given some preliminary exploration on how the modeling process goes, much remains to be done. Fundamental ontology of the reusable design knowledge about identity management solutions need to be further elicited and codified. Another direction worth pursuing is to provide design decision support to implementers of open standard, such as SAML and Liberty. These are topics of ongoing research. 
