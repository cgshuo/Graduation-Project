 Time series is a sequence of real values, each of which represents a value mea-sured at a point in time. With the growing popularity of time series data in science, engineering and business, ther e is an increasing demand to apply data mining approaches to gain a more clear insight about the data. Segmentation is one of the important tasks in mining time series[7] and is useful in its own right as a tool for delimiting similar neighboring sequential data[3] and change detec-tion, etc. The problem of segmentation arises in many data mining applications, including bioinformatics and context-aware systems. However, on one hand, ex-isting methods mainly focused on the static data(i.e. the data in database)[4][6], and little work was done on the streaming time series; on the other hand, for most of the time, time series data in real life are typically streaming data, such as the stock prices, currency exchange rates, e lectrocardi ograms, etc, it is desirable to segment time series stream in many applications.

As noted in [1], time series streams arrive online, and are usually in an un-known order and unbounded mode, significant challenges on segmenting time series stream lie on the one-pass real processing, and the process should finish in linear time with limited memory consumption. However, as we shall see, most of the existing methods on static time series data try their best to segment the data into optimal subsequences, and may be infeasible in segmenting the high speed time series streams. For most purposes, especially in the context of time series stream, an exact optimal segmenting is not required[5]. We, therefore, use an approximate method instead. The original method, works by applying an adaptively segmenting tool to minimize the reconstruction error.

In this work, we introduce an approach to segment time series stream. Our contributions can be simply summarized as follows. 1. We show most of the methods on segmenting static time series can be in-2. We propose an approximate technique, called Adaptive Piecewise Constant 3. We demonstrate the effectiveness of t he segmentation method by extensive
The rest of the paper is organized as fo llows. Section 2 reviews the related work and provides a background for our work. In Section 3 we present the ways to produce APCA segmenting on static time series. We propose the method APCAS to segment time series stream in Sectio n4.InSection5wegiveexperimental results and make discussions about the results. Finally we offer conclusions in Section 6. 2.1 Review of Segmentation Algorithms Segmenting static time series data has been extensively studied in the past decades. However, there is no unified definition on time series segmentation[6]. Generally, time series segmentation is to divide long time series sequences into several non-overlapping short subsequences, and data lie into the short sequence have certain properties, such that the data in the same subsequence are more similar to each other, the reconstruction error is minimal to a given threshold etc. Keogh et al.[6] gave a general surv ey of different segmenting time series methods.

There are three major approaches to segment time series[6], namely, sliding window , top-down and bottom-up segmentation , respectively.  X  The sliding window method extends iteratively the segment in the current  X  The top-down method breaks the series down iteratively into even-smaller  X  The bottom-up method merges neighboring segments iteratively into even-
These approaches have different features that may act as strengths or weak-nesses in the static time series segmentation, and some algorithms[4][6], appear to be more complex, are a combination of one or two of these approaches. As we are now in the context of time series stream segmentation, the data in the whole stream is usually unavailable at one time, and we pay more our attention to whether the method can be finished in lin ear time. With such considerations, the sliding window method is more appropriate in segmenting time series stream, as it has relative lower computational c omplexity and can be solved in acceptable time.

In terms of the result of segmentation , all the segmentation methods need a stopping criterion to terminate iteration. Given a time series T , existing time series segmenting methods, try to produce the best segmentations[6] as,  X  exact K segments.  X  maximum reconstruction error of e ach subsequence does not exceed some  X  total reconstruction e rror of the whole segmentation does not exceed some
As observed by Keogh et al.[6], the performance of the algorithms is tightly related with the parameters(i.e., the K , max error , total error etc.), different parameters may produce different segment ations. However, as t ime series stream is generally endless with time, and the overall image of time series stream is usu-ally unavailable, thus it is undesirable to require the user to provide parameters about the whole time series stream(such as the K , total error ). In other words, the parameters specified by user should r eflect the local properties, rather than the global properties, of time series stream.

Another part in time series segmentation is with regard to the choice of which approximate line to fit the data. Some researches utilized the line regression, or line interpolation method. The difference between the two methods, is that in the line regression, the result line joins the end points of the subsequence, while that is not a must in the line interpolation. We choose APCA to segment time series stream. We observe that, in the relative smooth streaming data, the methods of line regression and line interpolation may produce many redundant segmenta-tions, as illustrated in the example of line interpolation in Fig. 1. However, as we will demonstrate later, the exact APCA on static time series is not suitable to stream segmentation directly, we give an approximate computation method to work in linear time, and apply it to the time series stream segmentation. 2.2 Backgrounds for APCA In this section, we review some background material for APCA. Since we will constantly reference to the APCA approximation for the rest of the paper, we first describe the technique. For more deta iled description, interested readers are recommended to [5]. The notations used in the paper are listed in Table 1.
Given a time series T , the APCA approximation of T is a sequence of 2 M values in the following format: where M is the number of variable-length segments, tv i (1  X  i  X  M )isthemean value of data points in the i th segment, and tr i (1  X  i  X  M ) is the right end point in the i th segment. Fig.2 shows an example of APCA segmentation. In this section, we discuss the ways to produce the APCA segmentation.
For a time series T , the most straight way to produce its APCA segmentation is to slide a window on T , and calculate the error c error point by point. If c error overcomes the threshold  X  , then segmentation occurs. The idea is illustrated in Table 2.

To get the N optimal APCA segments from a time series of length n ,requires a O ( Nn 2 ) time complexity with dynamic programming[2].

Keogh et al.[5] pointed out that exact optimal approximation is usually not required, and they proposed a method to produce an approximation in O ( nlogn ), which uses a wavelet transformation a nd converts the problem into a wavelet compression problem.

These methods, even with the approximate APCA, all require more than one-pass computation of the data in the sliding window and suffer from the non-linear computational complexity, thus are not fit in the context of stream. In this section, we give the approximate method APCAS to segment time series stream. Before that, we first give two realistic consumptions about time series stream:  X  The time series stream is in large volume and in high speed;  X  The memory of handling system is relative low, the size of sliding window is
Let us look back to the algorithm to produce exact APCA segmentation on static time series in Table 2. When a new data point enters into sliding window, the c avg and c error will be updated accordingly. However, the computation of c error is a loop through the data points in the segment, and calculating the sum of deviation value to the c avg (i.e. k i =1 | t i  X  c avg | ) of each data point in the segment. We observed that, when a n ew data point arrives smoothly, the new value of c avg changes slowly.
 Proposition 1. Suppose there is a segment in sliding window with length k ,and the next data point with value of t k +1 arrives. If t k +1  X  c avg ,then c error  X  c error + | t k +1  X  c avg | .
 Proof. For simplicity, we denote the segment in sliding window as T s = t 1 ,t 2 ,..., t . From the computation of APCA in Table 2, we have if t k +1  X  c avg ,thenfrom(4),weget thus from (6) and (7), we have The idea behind such approximation is illustrated in Fig.3. As c avg  X  c avg ,we calculate the c error with equation (8), and the st ep can be finished in constant time.

After the replacement, the algorithm to produce APCA in Table 2 then, changes to the one shown in Table 3.

One thing, however, should be noted in the approximate algorithm that, there is an inherent loop in calculation of the new average value of T [ left, right ](i.e. c avg ), which prevents the algorithm from finishing in linear time. To solve the problem, we set a variable c sum to temporarily store the sum of values of data points in the segment. Since and the number of data points in the current segment can be calculated as right  X  left +1, thus we don X  X  need to recalculate the c avg by looping forwardly through the data points in the segment when a new data point arrives, we just update the value of c sum with equation (9), and this step needs O (1).
As data in time series stream arrives with time, hence differs from the seg-mentation on static time series, the segmentation on time series stream should also continue with data, and should not make any hypothesis of the data vol-ume(such as length of n ). In the approximate algorithm of APCAS shown in Table 4, we set a boolean flag stop by user to let the user decide whether or not to stop the segmentation process.

The algorithm in Table 4 is a one-pass computation, and can be applied into time series stream segmentation. To put the point more clearly, we design a Finite State Automata(FSA) to model the process of APCAS segmentation, which is shown in Fig. 4. In FSA, the initial state is EnterNewSegment ,which indicates that a new segment starts, when the first data point enters into the sliding window, the state changes to WithinSegment , and with more data points arrives, FSA calculates the c error continuously. If c error &lt; X  , the data point is not the segment boundary, and the state does not change; and if c error  X   X  , the data point is recognized and marked by FSA as the right boundary of the segment, the state changes back to EnterNewSegment to start a new segment segmentation.

There still remains a problem to be se ttled, as readers may have noted, the hypothesis of Proposition 1 is that the stream runs smoothly, t k +1  X  c avg , but what if t k +1 c avg ? Now we take time to explain here, which we have omitted previously. As seen fr om equation (8), the c avg is not replaced with c avg in the part of | t k +1  X  c avg | . As in calculating the c avg when the data point assumed to be in the same relative smooth segment, the c avg  X  c avg ,thus increases quickly and the FSA may recognize the new data point t k +1 as the right segment boundary, our experiments validate such conclusion. In this section, we empirically demonstrate the utility of APCAS in time se-ries stream segmentation with a compreh ensive set of experiments. For these experiments, we used a PC with a Pentinum 3-866 processor, 256MB RAM and 40GB disk space. The source code for the experiments is written in C++ Language(with g++ 3.2.3 as the compiler). Note that in order to allow repro-ducibility, all the source code and datasets are freely available, interested readers may contact with the authors by email.

For completeness, we implemented all the methods proposed in this work. We have taken great care to create high quality implementations of all techniques. All approaches are optimized as much as possible. 5.1 Experiment Metrics In our experiments, we evaluated the efficiency of different techniques using three metrics. We measured the memory usage and the segment precision as the main factors affecting overall performance of the segmentation. In addition, we measured the elapsed time as the performance metric directly perceived by the user.  X  Memory usage. This is memory consumption during the segmentation. As  X  Segment precision. AsAPCASisanapproximatemethodtoAPCA,we  X  X lapsedtime. We used wall-clock time to measure the elapsed time during 5.2 Evaluation on Artificial Data The data sets used in this section were cre ated using a random time series genera-tor that produces n time series, one of the example and its APCA segmentation are shown in Fig. 5, the approximate APCAS segmentation of the dataset is shown in Fig. 6.
The memory usage during segmentation is shown in Fig. 7, the comparison of segmentation precision is shown in Fig. 8 and the elapsed time is shown in Fig. 9. As the results indicate, APCAS outperforms the exact APCA method in the memory consumption and elapsed time dramatically. However, compared with the exact computation of APCA, APCAS suffers from the precision loss. Nonetheless, the precision loss is accep table in real applicat ion(the max loss is roughly within 8%). 5.3 Evaluation on Real Data Our real data are the measure data fr om a signal processing device. A small sketch of the data, together with the results of exact APCA and approximate APCASareshowninFig.10andFig.11,r espectively. One observation can be made based on the results, the right location of each segment in APCAS is very near to that in APCA(i.e. 36  X  35, 60  X  60, 92  X  91, 103  X  101, and 126  X  126), which indicates that, as expected, the FSA recognizes the data points with a large fluctuation and performs the segmentation on the data points.
The memory usage on segmenting real dataset is shown in Fig. 12. The same trend is observed from the results. With time elapses, the advantage of APCAS over memory increases. Fig. 13 compares the segmentation precision of the exact APCA and APCAS methods on real data segmentation. The precision loss is lower than 9% and is a cceptable in stream. In this paper we propose an approximate method, namely, APCAS, to segment time series stream.We devised a Finite State Automata to model the process. The method works in linear time, has its wide applications in streaming data. Experiments show, the APCAS is a fast method and can be easily run in the memory constraint applications. The loss of precision of the method, compared with the exact APCA, is in acceptable sco pe. For future research, we plan to apply the method APCAS to change detection and signal processing in time series stream to further examine the applicability of this approach.
