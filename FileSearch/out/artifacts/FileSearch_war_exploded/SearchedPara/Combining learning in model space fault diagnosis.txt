 1. Introduction
Critical infrastructure systems (CIS), including water, gas or electricity networks, are complex large-scale systems, geographi-cally distributed and decentralized with a hierarchical structure, requiring highly sophisticated supervisory and real-time control (RTC) schemes to ensure high performance achievement and maintenance when conditions are non-favourable ( Sch X tze et al., 2004; Marinaki and Papageorgiou, 2005 ) due to e.g. sensor and actuator malfunctions (faults). Each sub-system composing the CIS is constituted of a large number of elements with time-varying behaviour, having many different operating modes and subject to changes due to operational constraints. To deal with this problem, the use of an on-line fault diagnosis system able to detect such faults and correct them by activating different kinds of techniques e. g. data validation/reconstruction of sensor faults is desirable. This will prevent the RTC from being stopped every time that a fault appears, which is one of the main reasons why global RTC is not widely applied in the world ( Sch X tze et al., 2004 ). Furthermore, the fault diagnosis process intends to identify which fault is causing the monitored events, including e.g. hardware and software faults.
Generally, two main strategies are available in the literature when addressing the fault diagnosis problem, which are hardware redundancy (preferred in critical systems) based on the use of extra sensors and actuators, and analytical redundancy, based on the use of software sensors or models combining information gathered by the sensor measurements or using other actuators to compensate the faulty ones. Nevertheless, the use of hardware redundancy in large-scale systems is very expensive and increases the number of maintenance and calibration operations, which calls for the use of combined hardware and analytical redundancy approaches in CIS ( Carrozza et al., 2008 ). The capability to detect and isolate faults in these systems is important to keep their integrity safe. This problem has been targeted by numerous researchers from many different points of view, as overviewed in the compilation of techniques included in Venkatasubramanian et al. (2003a  X  c) , and more recently in Ding (2008) .
In this paper, an innovative framework that investigates the fault diagnosis problems in the model space instead of the data/ signal space is developed. This fault diagnosis framework is integrated with a data validation/reconstruction methodology introduced in Quevedo et al. (2010a) .  X  Learning in model space ( Chen et al., 2014 ) is implemented by fi tting a series of mated  X  models using a series of signal segments selected with a sliding window, and then apply the learning techniques to discriminate and isolate fault models from healthy models. Reser-voir computing is chosen as an example to approximate the signal segments. Dynamic reservoirs of reservoir models have been shown to be  X  generic  X  in the sense that they are able to represent a wide variety of dynamical features of the input driven signals, so that given a task at hand only the linear readout on top of reservoir needs to be retrained ( Luko  X  evi  X  ius and Jaeger, 2009 ). Hence, in the formulation the underlying dynamic reservoir will be the same throughout the signal  X  the differences in the signal characteristics at different times will be captured solely by the linear readout models and will be quanti fi ed in the function space of readout models.

Here it is assumed that, for some suf fi ciently long initial period, the system is in a  X  normal/healthy  X  regime so that when a fault occurs the readout models characterizing the fault will be suf ciently  X  distinct  X  from the normal ones. A variety of novelty/ anomaly detection techniques can be used for the purposes of detection of deviations from the  X  normal  X  regime. In this contribu-tion, support vector machines (SVMs) in the readout model space are used, so new faults occurring will be captured by the algorithm proposed operating in the readout model space.
 The contributions of this paper are listed as follows:
First, data validation and reconstruction techniques are inte-grated with learning in the model space for effective fault diagnosis.

Second, SVMs are used in the model space for fault detection/ isolation.

Finally, the proposed methodologies are applied to the Barcelona water network as a case study in this paper. 2. Data validation/reconstruction approach
In systems like CIS, a telecontrol system is acquiring, storing and validating data gathered from different kinds of sensors every given sampling time to accurately real-time monitor the whole system. In this process, problems in the communication system, e.g. between sensors and data loggers or in the telecontrol system itself, are frequent and produce data loss which may be of great concern in order to have valid historic records. When this is occurring, lost data should be replaced by a set of forecasted data which should be a representative of the data lost. Another common problem in CIS is caused by the unreliable sensors, which may be affected by e.g. offset, drift, freezing in the measurements ( Kanakoudis and Tolikas, 2001; Kanakoudis and Tsitsi fl i, 2011; and replaced by forecasted data, since it may be used for system management tasks e.g. maintenance, planning, investment plans, billing, security and operational control ( Quevedo et al., 2010a ) and system fault detection and isolation ( Fig. 1 ).

Different types of data validation methods with distinct degrees of complexity may be considered according to the avail-able system knowledge. Generally, two types of methods can be considered, one for elementary  X  low-level  X  signal based methods and another for  X  high-level  X  model-based methods. The fi use simple heuristics and limited statistical information from the sensors ( Burnell, 2003; J X rgensen et al., 1998 ) and is typically based on checking either signal values or variations, whilst the second class uses models for consistency-checking of the sensor data ( Tsang, 2003 ). Here, the fi rst class of data validation methods has been used to deal with sensor communication faults. 2.1. Data validation process The data validation process is inspirited in the Spanish AENOR-UNE norm 500540 ( Quevedo et al., 2010a ). The methodology applies a set of consecutive validation tests to a given dataset ( Fig. 2 ), to fi nally assign a certain quality level depending on the tests passed.

In a system like the one considered here, and in telecontrolled systems in general, one of the most common faults occurring is sensor communication fault. This type of fault is related with level zero of the sensor validation methodology in Quevedo et al. (2010a) . This level checks whether the data is properly recorded, assuming that data acquisition systems sample data at a certain fi xed rate. Hence, this level allows detecting problems in the data acquisition or communication system.

Here, communication faults are considered as the faults affect-ing the sensor of the telecontrol system, and data validation and reconstruction procedures are used as a pre fi lter to estimate the missing data when this type of faults is occurring. 2.2. Data reconstruction process
The output of the data validation process ( Fig. 2 ) is used to identify the invalidated data that should be reconstructed. Spatial and time series (TS) models (Levels 4 and 5 in Fig. 2 ) are used for this purpose, depending on the performance of each model.
On the one hand, spatial models (SM) take advantage of the relation between different variables emplaced in the system. For example, in hydraulic systems, this relation is generally obtained from the mass balance model of the element relating the different measured variables involved, which states that the incoming and outcoming fl ows in a tank subsystem must be equal ^ x SM  X  k  X  X  x  X  k 1  X  X  where ^ x SM is the spatial model tank volume estimation, x is the measured tank volume, q in is the incoming tank fl ow, q out outcoming tank fl ow and  X  t is the sampling time. From this equation, the volume estimation for a particular tank subsystem may be stated. Estimation of other variables (e.g. ^ q in obtained from algebraic manipulation of the latter.

However, real elements include uncertainty (due to e.g. unex-pected behaviour of the plant, inaccuracy of the model) which may lead to the non-satisfaction of the mass balance in the element considered. Hence, consistency of the data collected by a certain sensor with its spatial model ( Quevedo et al., 2010b ), i.e. the correlation between data coming from spatially related sensors, may be maintained. For example, the data of the fl ow meters located in different points of the same pipe in a transport water network allows for checking the reliability of the sensor set and performing the corresponding correction, e.g. by using a linear regression model of input  X  output measured data in the pipe (which is ideally the identity function). In the case of the tank level estimation (1) , this correction is introduced as ^ x  X  k  X  X  a ^ x SM  X  k  X  X  b  X  2  X  where ^ x c is the corrected estimation of the volume using regres-sion model parameters  X  a ; b obtained with the training dataset and ^ x SM is the spatial model volume estimation using measured measured value x  X  k  X  1  X  .

On the other hand, TS models take advantage of the temporal redundancy of the measured variables. A widely used method for signal forecasting is the Holt-Winters (HW) approach ( Makridakis et al., 1998; Winters, 1960 ). This method is widely used because of its simplicity. There are various versions of this method e.g. additive or damped trend, additive or multiplicative seasonality, single or multiple seasonality. Here, good performance has been attained with the additive single seasonality version. In this case, the forescasted value of which is obtained in Eq. (3) for a forecasting horizon  X  ^ x  X  k  X  X  R  X  k  X   X  X   X  G  X  k  X   X  X  S  X  k L  X  X  3  X  where R is the level estimation removing seasonality
R  X  k  X   X  X   X   X  x  X  k  X   X  S  X  k L  X   X  X  X  X  1  X   X  X  R  X  k  X  1  X  G is the trend estimation
G  X  k  X   X  X   X   X  R  X  k  X   X  R  X  k  X  1  X  X  S is the seasonal component estimation
S  X  k  X   X  X   X   X  x  X  k  X   X  R  X  k  X   X  X  X  X  1  X   X  S  X  k  X  L  X  ; 0 o  X  and L is the season (daily) periodicity,  X  ,  X  and  X  are the HW parameters (level, trend and season smoothing factors, respec-tively), x is the measured value and ^ x TS  X  k  X  T  X  is the TS model forecasted value.
 Hence, analysing the historic records of a certain sensor, a HW
TS model is derived and used to forecast the data of this element when a fault is affecting its readings.

The models' accuracy is measured by the mean squared error (MSE) index, evaluated in the n  X  48 previous values to k . The model having the best MSE index when the communication fault is produced (i.e. when the data validation process is not satisfac-tory) is used to produce the reconstructed sensor signal. 3. Fault diagnosis approach
To address the challenges in learning based fault diagnosis, this section applies deterministic reservoir computing as a model to approximate complex multi-input/multi-output systems, and introduces the learning in the model space approach in the
Barcelona water network. 3.1. Deterministic reservoir model
Reservoir computing (RC) ( Luko  X  evi  X  ius and Jaeger, 2009 )isa class of state space models based on a  X  fi xed  X  randomly constructed state transition mapping, realized through the so-called reservoir and a trainable (usually linear) readout mapping from the reser-voir. Popular RC methods include echo state networks (ESNs) ( Jaeger, 2001 ), liquid state machines (LSMs) ( Maass et al., 2002 ) and the back-propagation decorrelation neural network ( Steil, 2004 ).

This paper is based on echo state networks, which are one of the simplest yet effective forms of RC. Generally speaking, ESNs are recurrent neural networks with a non-trainable sparse recurrent part (reservoir) and a simple linear readout. Typically, the reser-voir connection weights and the input weights are randomly generated.

In order to satisfy the suf fi cient condition for the  X  echo state the weights in the reservoir are scaled to ensure that the spectral radius of these weight matrix W is less than one. ESNs have been successfully applied to many applications, such as short-term stock price prediction ( Lin et al., 2009 ), speech recognition ( Skowronski and Harris, 2007 ), nonlinear adaptive fi ltering ( Xia et al., 2010 ), and analysing grammatical structure ( Tong et al., 2007 ).
Given the input signal u and output signal y , the reservoir model with N reservoir (state) units can be formulated as follows: x  X  t  X  X  tanh  X  R x  X  t 1  X  X  V u  X  t  X  X  ;  X  7  X  f  X  x  X  t  X  X  X  W x  X  t  X  X  a ;  X  8  X  function of the reservoir, and f  X  x  X  t  X  X  is the output readout from the reservoir; R is a  X  N N  X  dynamic coupling weight matrix; V and W are the input and output weight matrices, respec-tively.

In order to construct a reservoir model, a number of parameters input connections, the reservoir topology and its weights. The input connections, reservoir topology and the connection weights are randomly generated and fi xed during the readout training. This speci fi cation often requires numerous trails and even luck ( Xue et al., 2007 ), and the weight structure and the random connectiv-
These problems are preventing ESNs from becoming a widely accepted tool.

There has been research that proposes fi xed and simple reservoir topologies as an alternative to the randomized reservoir, including feedforward ESNs model with tapped delay connections (
 X  er  X  ansk X  and Ti  X  o, 2008 ), simple cycle topology ( Rodan and
Ti  X  o, 2011 ) and simple cycle topology with regular jumps ( Rodan and Ti  X  o, 2012 ). The simple cycle reservoir with regular jumps (CRJ) could identify the minimum complexity in constructing reservoirs, which is competitive with other ESNs algorithms. The deterministic CRJ can approach with arbitrary accuracy the mem-ory capacity of any non-linear recurrent networks.

The CRJ model is deterministically constructed and extremely simple. In CRJ, the structure of R is particularly simple: reservoir units are connected in a uni-directional cycle with bi-directional shortcuts (jumps) (see Fig. 3 ). All cyclic connections have the same weight r c 4 0 (where the subscript c is the fi rst letter of cycle and indicates that the related r is the cycle weight, the subscripts i and j in notation r i and r j appeared later have the same meaning).
Likewise, all jumps share the same weight r j 4 0. The input weight matrix is also highly constrained: the input connections have the same absolute value r i 4 0. The state space model used in this paper is illustrated in Fig. 3 .

In that case, the CRJ model has a small degree of local clustering and a small average path length. Jaeger and Haas Jaeger and Haas, 2004 suggested that reservoirs should ideally have small cluster-ing degree (sparse reservoirs) to spread the dynamic information in the reservoir and a small average path length can be bene for a variety of dynamical time scales. The structure of the CRJ model is illustrated in Fig. 3 .

The traditional randomize RC is largely driven by a series of randomized model building stages, which could be unstable and hard to understand, especially for fault diagnosis. In this paper, we propose to use the deterministic reservoir algorithm, i.e. CRJ, to the signals in fault diagnosis, because CRJ can approximate the nonlinear function with inner memory and due to the linear training, the CRJ model can be trained fast and run in real-time. 3.2. Reservoir model distance
Learning in the model space is proposed by Chen et al. (2014) based on the idea of using a model to approximate multi-input/ multi-output systems that generate a model-induced feature space, and then construct some machine learning algorithms in the model-induced feature space.

There are several ways to generate the model-induced feature space from the original signal space. One possible way is to use the parameter vector of each model as an individual point in the model space. Generally speaking, the parametric space is not equivalent to the model space, especially for non-linear models. The following will de fi ne the distance in the model space.
In the model-induced feature space, the 2-norm distance
L  X  f 1 ; f 2  X  X  where  X  f 1  X  x  X  f 2  X  x  X  X  2 is to measure the difference between f integral range. Here, x is assumed to be uniformly distributed.
In the following, the application of the distance de fi nition in the model space for linear models has been demonstrated. The linear model, e.g. auto regressive model, reservoir model, represented by the following equation: f  X  x  X  X  W 1 x  X  a ; number of variables in the model, W 1 is the parameters ( O N matrix) in the model, O is the number of output vectors and a  X  X  a 1 ; ... ; a o is the bias vector for output nodes.
The distance between two readouts from the same reservoir can be calculated based on the following equation ( Chen et al., 2014 ): L  X  f 1 ; f 2  X  X  f  X  x  X  X  W 1 x  X  a 1 , f 2  X  x  X  X  W 2 x  X  a 2 , W  X  W 1 W 2 Scaling the squared model distance ( L 2 2  X  f 1 ; f 2  X  )by2 1 3  X  which differs from the squared Euclidean distance of the readout parameters  X  by the factor 1/3 applied to the differences in the linear part W of the af fi ne readouts. Hence, more importance is given to the than to the  X  orientation  X  of the readout mapping.

The above analysis assumed that the distribution of x is uni-form in the integral range C . When the distribution of x is non-uniform, sampling techniques and analytical techniques using e.g. a Gaussian mixture model can be employed to calculate the distance. 3.3. Support vector machines for fault diagnosis
In fault diagnosis, it should be determined whether a running sub-system (or component) is under a healthy operation condi-tion, or whether a faulty situation is occurring. Based on the  X  learning in the model space  X  framework, support vector machines will be employed in the model space for fault diagnosis.
Support vector machines are supervised learning models that one approach and the one-against-the-rest approach can be employed approach is used for multi-class learning problems since it is more ef fi cient than the one-against-the-rest approach.

In the learning in the model space approach, a sliding window is used to select signal segments to train reservoir models. The sliding window is moved forward by one step at a time, which can reduce fault detection delays. When the sliding window is moving forward, more reservoir models are obtained. Thus, the pairwise model distance L 2  X  f i ; f j  X  can be obtained. The calculated model distance will be used in the Gaussian RBF kernel to replace the data distance with the model distance L 2  X  f i ; f j  X   X  f ; f j  X  X  exp f s L 2  X  f i ; f j  X g : where s is the kernel parameter and will be tuned by cross validation. 4. Case study: Barcelona water supply network 4.1. Description
The Barcelona water network, used as the case study here, supplies water to about three million consumers, distributed in 23 different municipalities covering an area of 424 km 2 . Water supplied may be extracted from both surface and underground sources, Ter (surface source) and Llobregat (both surface and underground source) being the most important ones in terms of capacity and use. Water coming from these sources is conducted through about 4645 km of pipes to 218 different demand sectors (district metered areas  X  DMAs) with about 400 control points installed. Currently, the Barcelona SCADA system receives real-time data gathered by 200 local monitoring stations, mainly meters and some pressure sensors. Most of these fl ow meter control points are installed in the inlet of the DMA, so that their measurement is highly representative of the whole DMA water demand. Summarizing, the complete Barcelona supply network is modelled by 63 storage tanks, 7 underground sources, 3 surface sources, 79 pumps, 50 valves, 18 nodes and 88 demands.
Regarding the actual SCADA system implemented in the net-work, a datalogger is recording raw data every 10 min from the ground sensors. These data are sent once a day using the ModBus communication protocol via the GSM radio/telephone XTC net-work to an ORACLE operational database of the telecontrol system ( Fig. 4 ) which is implemented by a TopKapi SCADA ( http://www. areal.fr/ ). These collected data are hourly averaged by the company and supplied for further use.

Before utilising the sensor data recorded by the SCADA system in the network management system, these data must be treated with two operations, which are the raw data insertion process and the data validation and replacement process. 4.2. Raw data insertion process
This is the procedure involving the data acquisition by the operational database in the SCADA system from the data-loggers, which may be affected by different kinds of malfunctions e.g. communication faults or missing sensor/data-logger data.
This data loss, which will affect further management processes such as statistic and hydraulic balance studies, must be recovered the data gap is easily detected and reported by the communication system itself by an attached error message. A more challenging problem is the replacement of these lost data by some virtual dataset which is a representative of the missed sensor readings if the malfunction would not occurred. 4.3. Data pre-fi lter
At present, there is an automatic data pre-fi lter, using data validation and reconstruction procedures implemented at each control point. This pre-fi ltering process, described in Section 2 ,is activated when a sensor communication fault is occurring, which in order to achieve a complete sensor dataset to ful fi l further methods needing this information, despite this faulty situation. 5. Results 5.1. Fault scenarios To illustrate the methodologies proposed here, a part of the Barcelona water network that includes two subsystems, known as Orioles and Cervell X  ( Figs. 5 and 6 , respectively), is being used. This part of the network includes the following elements: Tanks: d 175 LOR , d 147 SCC , d 205 CES , d 263 CES
Actuators with fl ow sensors: iOrioles , iStaClmCervello , iCesal-
Demands with fl ow sensors: c 175 LOR , c 147 SCC , c 205 CES , Level sensors: xd 175 LOR , xd 147 SCC , xd 205 CES , xd 263 CES A simulator of the network has been developed in MATLAB/
SIMULINK in order to test the proposed methodologies before being implemented in the real system. The model used by this simulator has been fully calibrated/validated using real-world data, providing a good degree of representativeness of the real network behaviour (in terms of MSE index) after this process ( Pascual et al., 2013 ).

The simulator also includes the possibility to introduce faults in the different elements of the network. The faults that will be studied are located in actuator sensors and demand sensors. The simulator allows introducing different kinds of faults in these elements, which are detailed next:
Sensor communication: When this fault is occurring, a loss of new
Freezing: When this fault is taking place, the signal remains
Offset: When this fault is occurring, an unknown constant
Drift: When this fault appears, a ramp function is added to the Sensor noise degradation: When this fault occurs, a zero-mean
To test and adjust the methodology proposed in this paper, different fault scenarios have been de fi ned, all considering a dataset of one month period. On the one hand, sensor commu-nication faults have been considered, appearing along the 12th day (before any other system fault is appearing) and causing the loss of new recorded data of the sensor affected whilst they are occurring. In many actual telecontrolled systems, these faults are noti an external indicator provided by the communication system itself, with its detection being a trivial problem. On the other hand, further system faults have been considered, appearing at the beginning of the 16th day. The system faults considered are both abrupt or incipient nature. The parametrization of these faults is depicted in Table 1 .

Several examples of faulty signals are illustrated in Fig. 7 . 5.2. Data validation/reconstruction results
One month of data has been used to perform sensor data validation and reconstruction: the fi rst four days of data have been used for model training (both spatial and TS, as described in Section 2 ) and the rest of the data have been used to test the method. The validation and reconstruction algorithms have been implemented in an on-line fashion, which is of paramount importance for a method to be applied in a real-time system. Sensor communication faults have been considered, particularly in demand and actuator sensors, as detailed in Section 5.1 . These faults are occurring along day 12 (hour 288) and endure 2 days (until hour 336), whilst there is no new data available from the sensor affected. When the fault occurs, the Level 0 data validation test ( Fig. 2 ) noti fi es a communication fault and the data recon-struction process is activated. The reconstruction is performed via the SM or TS model, depending on their particular performance, which is measured by the MSE index as described in Section 2 , with n  X  48 samples.

First, a communication fault in the Orioles subsystem pump sensor (ID.32 in Table 1 ) is produced, achieving the results depicted in Fig. 8 . Model parameters obtained using the training dataset are [ a  X  0.627, b  X  1.04] for the spatial model and  X   X  2 : 698e 2,  X  1e 5,  X   X  1 for the TS model with a prediction horizon of  X   X  20 samples, assuming daily periodicity ( L  X  24 samples). When the communication fault is produced, the spatial model obtains better MSE index, so it is used for sensor reconstruction, achieving good performance for this particular sensor.

Also, a communication fault in the Orioles subsystem demand
Model parameters obtained using the training dataset are [ a  X  0.627, b  X  1.04] for the spatial model and  X   X  8 : 622e 1,  X   X  3 : 526e 1 for the TS model with a prediction horizon of  X   X  20 samples, assuming daily periodicity ( L  X  24 samples). When the communication fault is produced, the TS model obtains better MSE suitable performance for this particular sensor. 5.3. Fault diagnosis results
Since the default setting of MATLAB is to optimize the classi tion and regression trees (CART) algorithm, 4 the default setting in
MATLAB for CART has been used. Bagging and Adaboosting are ensemble algorithms with decision trees (CARTs) as based learners (CARTs have been optimized by MATLAB). They have only one parameter 5 to specify, i.e. the number of trees in the ensembles. A popular choice (100 decision trees) is adopted in these comparisons.
The fault detection performance is measured by fault detection rate (FDR) and false alarm rate (FAR). In fault isolation, the performance is measured by precision , recall (or sensitivity), and speci fi city . The precision , recall and speci fi city are de follows: precision  X  tp tp  X  fp ; recall  X  tp tp  X  fn ; specificity  X  tn tn  X  fp ; where tp , tn , fp , fn indicate true positive, true negative, false positive, false negative, respectively. Precision measures the pro-portion of positive test results that are true positives, also referred to as positive predictive value. Recall measures the proportion of actual faults which are correctly identi fi ed as such and speci measures the proportion of normal data which are correctly identi fi ed.

As introduced in Section 5.1 , since there are four components with faults, four deterministic reservoir computing models, each with 25 nodes in the reservoir, have been employed in the proposed framework.

For each dataset, 50% of data have been employed as training data and the remaining 50% of data have been used as testing data. The experiments are run for 100 times.

In fault diagnosis, the fi rst step to perform is to discriminate faulty situations from faultless situations. Tables 2  X  6 reported the fault detection results using the proposed algorithm. In this table, fault detection rate (FDR), false alarm rate (FAR) and detection delay are employed as three different metrics. According to these tables, it is observed that SVM outperformed all other algorithms.
The fault isolation ability of the proposed algorithm is reported in Tables 7  X  11 . In these tables, the confusion matrices are illustrated to demonstrate the fault isolability capabilities of the method. The confusion matrix is a speci fi c table layout that allows visualization of the performance of the fault diagnosis algorithm. Each column of the matrices represents the instances in a predicted class/fault, whilst each row represents the instances in an actual class/fault. The name stems from the fact that it makes easy to see if the system is confusing two classes (i.e. commonly mislabelling one as another). A confusion matrix displays the number of correct and incorrect predictions made by the fault isolation model compared with the actual classi fi cation in the test data. The matrix is N N , where N is the number of faults in this study.

According to Tables 7  X  11 , fault type 1 is often confused with fault type 2. This is because type 1 and type 2 are both additive offset faults with similar magnitudes, and the only difference is that fault type 1 is abrupt and fault type 2 is incipient (slowly developing). Therefore, fault type 2 will be similar to fault type 1 after some time when fault type 2 develops to the desired magnitude.

Table 12 reports the fault isolation performance in model spaces measured by precision , recall (or sensitivity) and speci Based on this table, Bagging and SVM outperform other classi in terms of three metrics. Adaboost seems to over fi t the noise and leads to inferior results.

Some examples of faulty signals and fault diagnosis results obtained using the  X  learning in model space  X  approach are pre-see that  X  additive incipient offset  X  and  X  additive drift dif fi cult to detect and usually with relatively large delay, since these two types of faults are similar to normal signal in the beginning. 6. Conclusion
In this paper, an effective fault diagnosis framework has been proposed to tackle the challenge in complex engineering systems like CIS, with unstructured and time-varying environments. Com-bined two-stage successful method has been proposed to detect and correct sensor communication faults using a data pre-the fi rst stage, in order to guarantee a reliable dataset to perform system fault diagnosis of faults of different nature in the second stage. Regarding the sensor data pre-fi lter, sensor data validation and reconstruction using combined spatial and time series models have been implemented with successful results when commu-nication faults occur in the telecontrol system, which is one of the most common faults affecting this kind of systems. After pre-fi ltering the sensor data, the  X  learning in model space  X  method is implemented by fi tting a series of  X  generative  X  models using a series of signal segments selected with a sliding window. Each signal segment can be represented by one model. To rigorously measure  X  distance  X  between models, the distance in model space has been de fi ned and an example to use deterministic reservoir computing to act as a  X  generative  X  model has been shown. The deterministic reservoir computing can approximate a model with input  X  output dynamics and it can exploit spatial  X  temporal corre-lations that exist in collected data, thus it fi ts the framework well.  X  Learning in model space  X  is a generic learning framework for cognitive fault diagnosis, and it is applicable to any systems, including complex multiple-input and multiple-output (MIMO) systems. In order to maintain the generality of our approach and to illustrate how this generic approach works, the reservoir model is adopted here. In addition, other fi tted models and learning algorithms in the model space can also be used in this framework.
Future work includes more in-depth studies of different generative ( fi tted) models and learning algorithms that best suit the sug-gested framework.
 Acknowledgements
This work is supported by the European Union Seventh Frame-work Programme, in the framework of the iSense project, under Grant agreement no. INSFO-ICT-270428.
 References
