 We introduce ConnotationWordNet , a connotation lexicon over the network of words in conjunction with senses , as defined in WordNet. A connotation lexicon, as introduced first by Feng et al. (2011), aims to encompass subtle shades of sentiment a word may conjure, even for seemingly objective words such as  X  X culpture X  ,  X  X h.D. X  ,  X  X osettes X  . Understanding the rich and complex layers of con-notation remains to be a challenging task. As a starting point, we study a more feasible task of learning the polarity of connotation.

For non-polysemous words, which constitute a significant portion of English vocabulary, learning the general connotation at the word-level (rather than at the sense-level ) would be a natural oper-ational choice. However, for polysemous words, which correspond to most frequently used words, it would be an overly crude assumption that the same connotative polarity should be assigned for all senses of a given word. For example, consider  X  X bound X  , for which lexicographers of WordNet prescribe two different senses:  X  (v) abound : (be abundant of plentiful; exist  X  (v) abound, burst, bristle : (be in a state of
For the first sense, which is the most commonly used sense for  X  X bound X  , the general overtone of the connotation would seem positive. That is, al-though one can use this sense in both positive and negative contexts, this sense of  X  X bound X  seems to collocate more often with items that are good to be abundant (e.g.,  X  X esources X  ), than unfortunate items being abundant (e.g.,  X  X omplaints X  ).
However, as for the second sense, for which  X  X urst X  and  X  X ristle X  can be used interchangeably overtone is slightly more negative with a touch of unpleasantness, or at least not as positive as that of the first sense. Especially if we look up the Word-Net entry for  X  X ristle X  , there are noticeably more negatively connotative words involved in its gloss and examples.

This word sense issue has been a universal chal-lenge for a range of Natural Language Processing applications, including sentiment analysis. Recent studies have shown that it is fruitful to tease out subjectivity and objectivity corresponding to dif-ferent senses of the same word, in order to improve computational approaches to sentiment analysis (e.g. Pestian et al. (2012), Mihalcea et al. (2012) Balahur et al. (2014)). Encouraged by these recent successes, in this study, we investigate if we can attain similar gains if we model the connotative polarity of senses separately.

There is one potential practical issue we would like to point out in building a sense-level lexical resource, however. End-users of such a lexicon may not wish to deal with Word Sense Disam-biguation (WSD), which is known to be often too noisy to be incorporated into the pipeline with re-spect to other NLP tasks. As a result, researchers often would need to aggregate labels across differ-ent senses to derive the word-level label. Although such aggregation is not entirely unreasonable, it does not seem to be the most optimal and princi-pled way of integrating available resources.
Therefore, in this work, we present the first uni-fied approach that learns both sense-and word-level connotations simultaneously. This way, end-users will have access to more accurate sense-level connotation labels if needed, while also having ac-cess to more general word-level connotation la-bels. We formulate the lexicon induction problem as collective inference over pairwise-Markov Ran-dom Fields (pairwise-MRF) and derive a loopy be-lief propagation algorithm for inference.

The key aspect of our approach is that we ex-ploit the innate bipartite graph structure between words and senses encoded in WordNet. Although our approach seems conceptually natural, previous approaches, to our best knowledge, have not di-rectly exploited these relations between words and senses for the purpose of deriving lexical knowl-edge over words and senses collectively. In ad-dition, previous studies (for both sentiment and connotation lexicons) aimed to produce only ei-ther of the two aspects of the polarity: word-level or sense-level, while we address both.

Another contribution of our work is the intro-duction of loopy belief propagation (loopy-BP) as a lexicon induction algorithm. Loopy-BP in our study achieves statistically significantly better performance over the constraint optimization ap-proaches previously explored. In addition, it runs much faster and it is considerably easier to imple-ment. Last but not least, by using probabilistic rep-resentation of pairwise-MRF in conjunction with Loopy-BP as inference, the resulting solution has the natural interpretation as the intensity of con-notation. This contrasts to approaches that seek discrete solutions such as Integer Linear Program-ming(Papadimitriou and Steiglitz, 1998).

ConnotationWordNet , the final outcome of our study, is a new lexical resource that has conno-tation labels over both words and senses follow-ing the structure of WordNet. The lexicon is pub-licly available at: http://www.cs.sunysb. edu/  X  junkang/connotation_wordnet .)
In what follows, we will first describe the net-work of words and senses (Section 2), then intro-duce the representation of the network structure as pairwise Markov Random Fields, and a loopy be-lief propagation algorithm as collective inference (Section 3). We then present comprehensive eval-uation (Section 4 &amp; 5 &amp; 6), followed by related work (Section 7) and conclusion (Section 8). heterogeneous graph with multiple types of nodes and edges. As shown in Figure 1, it contains two types of nodes; (i) lemmas (i.e., words, 115K) and (ii) synsets (63K), and four types of edges; ( t 1 ) predicate-argument (179K), ( t 2 ) argument-argument (144K), ( t 3 ) argument-synset (126K), and ( t 4 ) synset-synset (3.4K) edges.

The predicate-argument edges, first introduced by Feng et al. (2011), depict the selectional prefer-ence of connotative predicates (i.e., the polarity of a predicate indicates the polarity of its arguments) and encode their co-occurrence relations based on the Google Web 1T corpus. The argument-argument edges are based on the distributional similarities among the arguments. The argument-synset edges capture the synonymy between argu-ment nodes through the corresponding synsets. Fi-nally, the synset-synset edges depict the antonym relations between synset pairs.

In general, our graph construction is similar to that of Feng et al. (2013), but there are a few im-portant differences. Most notably, we model both words and synsets explicitly, and exploit the mem-bership relations between words and senses. We expect that edges between words and senses will encourage senses that belong to the same word to receive the same connotation label. Conversely, we expect that these edges will also encourage words that belong to the same sense (i.e., synset definition) to receive the same connotation label.
Another benefit of our approach is that for var-ious WordNet relations (e.g., antonym relations), which are defined over synsets (not over words), we can add edges directly between corresponding synsets, rather than projecting (i.e., approximat-ing) those relations over words. Note that the lat-ter, which has been employed by several previous studies (e.g., Kamps et al. (2004), Takamura et al. (2005), Andreevskaia and Bergler (2006), Su and Markert (2009), Lu et al. (2011), Kaji and Kit-suregawa (2007), Feng et al. (2013)), could be a source of noise, as one needs to assume that the semantic relation between a pair of synsets trans-fers over the pair of words corresponding to that pair of synsets. For polysemous words, this as-sumption may be overly strong. We formulate the task of learning sense-and word-level connotation lexicon as a graph-based clas-sification task (Sen et al., 2008). More formally, we denote the connotation graph G W ORD +S ENSE by G = ( V,E ) , in which a total of n word and synset nodes V = { v 1 ,...,v n } are connected with typed edges e ( v i ,v j ,t )  X  E , where edge types t  X  { pred -arg,arg -arg,syn -arg,syn -syn } de-pict the four edge types as described in Section 2. A neighborhood function N , where N v = { u | e ( u,v )  X  E }  X  V , describes the underlying network structure.

In our collective classification formulation, each node in V is represented as a random variable that takes a value from an appropriate class label do-main; in our case, L = { + ,  X  X  for positive and negative connotation. In this classification task, we denote by Y the nodes the labels of which need to be assigned, and let y i refer to Y i  X  X  label. 3.1 Pairwise Markov Random Fields We next define our objective function. We pro-pose to use an objective formulation that utilizes pairwise Markov Random Fields (MRFs) (Kinder-mann and Snell, 1980), which we adapt to our problem setting. MRFs are a class of probabilistic graphical models that are suited for solving infer-ence problems in networked data. An MRF con-sists of an undirected graph where each node can be in any of a finite number of states (i.e., class labels). The state of a node is assumed to be de-pendent on each of its neighbors and independent the joint probability of the graph can be written as a product of pairwise factors, parameterized over the edges. These factors are referred to as clique potentials in general MRFs, which are essentially functions that collectively determine the graph X  X  joint probability.

Specifically, let G = ( V,E ) denote a network of random variables, where V consists of the un-observed variables Y that need to be assigned val-ues from label set L . Let  X  denote a set of clique potentials that consists of two types of factors:  X  For each Y i  X  Y ,  X  i  X   X  is a prior map- X  For each e ( Y i ,Y j ,t )  X  E ,  X  t ij  X   X  is a com-Objective formulation Given an assignment y to all the unobserved variables Y and x to ob-served ones X (variables with known labels, if any), our objective function is associated with the following joint probability distribution P ( y | x ) = where Z ( x ) is the normalization function. Our goal is then to infer the maximum likelihood as-signment of states (i.e., labels) to unobserved vari-ables (i.e., nodes) that will maximize Equation (1). Problem Definition Having introduced our graph-based classification task and objective for-mulation, we define our problem more formally. Given Classify the nodes Y i  X  X  , into one of two classes; L = { + ,  X  X  , such that the class assignments y i maximize our objective in Equation (1).

We can further rank the network objects by the probability of their connotation polarity. 3.2 Loopy Belief Propagation Finding the best assignments to unobserved vari-ables in our objective function is the inference problem. The brute force approach through enu-meration of all possible assignments is exponen-tial and thus intractable. In general, exact in-ference is known to be NP-hard and there is no known algorithm which can be theoretically shown to solve the inference problem for gen-eral MRFs. Therefore in this work, we em-ploy a computationally tractable (in fact linearly scalable with network size) approximate infer-ence algorithm called Loopy Belief Propagation (LBP) (Yedidia et al., 2003), which we extend to handle typed graphs like our connotation graph.
Our inference algorithm is based on iterative message passing and the core of it can be concisely expressed as the following two equations: b i ( y i ) =  X   X  i ( y i )
A message m i  X  j is sent from node i to node j and captures the belief of i about j , which is the probability distribution over the labels of j ; i.e. what i  X  X hinks X  j  X  X  label is, given the current la-bel of i and the type of the edge that connects i and j . Beliefs refer to marginal probability dis-tributions of nodes over labels; for example b i ( y i ) denotes the belief of node i having label y i .  X  and  X  are the normalization constants, which respec-tively ensure that each message and each set of marginal probabilities sum to 1 . At every iteration, each node computes its belief based on messages received from its neighbors, and uses the compat-ibility mapping to transform its belief into mes-sages for its neighbors. The key idea is that after enough iterations of message passes between the nodes, the  X  X onversations X  are likely to come to a consensus, which determines the marginal proba-bilities of all the unknown variables.

The pseudo-code of our method is given in Al-gorithm 1. It first initializes all messages to 1 and prior s to unbiased (i.e., equal) probabilities for all nodes except the seed nodes for which the sentiment is known (lines 3-9). It then proceeds by making each Y i  X  Y communicate messages
Input: Connotation graph G = ( V,E ) , prior potentials  X  s for seed words s  X  S , and
Output: Connotation label probabilities for each node i  X  V \ P foreach e ( Y i ,Y j ,t )  X  E do // initialize msg.s foreach i  X  V do // initialize priors repeat // iterative message passing until all messages stop changing with their neighbors in an iterative fashion until the messages stabilize (lines 10-14), i.e. conver-the marginal probabilities, that is of assigning Y i with label y i , by computing the final beliefs b i ( y i (lines 15-17). We use these maximum likelihood probabilities for label assignment; for each node i , we assign the label L i  X  max y
To completely define our algorithm, we need to instantiate the potentials  X  , in particular the priors and the compatibilities, which we discuss next. Priors The prior beliefs  X  i of nodes can be suit-ably initialized if there is any prior knowledge for their connotation sentiment (e.g., enjoy is posi-tive, suffer is negative). As such, our method is flexible to integrate available side information. In case there is no prior knowledge available, each node is initialized equally likely to have any of the possible labels, i.e., 1 Compatibilities The compatibility potentials can be thought of as matrices, with entries ij ( y i ,y j ) that give the likelihood of a node hav-ing label y i , given that it has a neighbor with label y j to which it is connected through a type t edge. A key difference of our method from earlier mod-els is that we use clique potentials that differ for edge types, since the connotation graph is hetero-geneous. This is exactly because the compatibil-ity of class labels of two adjacent nodes depends on the type of the edge connecting them: e.g., + syn -arg  X  X  X  X  X  X  X  X  X  + is highly compatible, whereas +  X  X  X  X  X  X  X  X  X  + is unlikely; as syn -arg edges capture synonymy; i.e., words-sense memberships, while syn -syn edges depict antonym relations.

A sample instantiation of the compatibilities is shown in Table 1. Notice that the potentials for pred -arg , arg -arg , and syn -arg capture ho-mophily, i.e., nodes with the same label are likely to connect to each other through these types of edges. 4 On the other hand, syn -syn edges con-nect nodes that are antonyms of each other, and thus the compatibilities capture the reverse rela-tionship among their labels.
 Table 1: Instantiation of compatibility potentials. Entry  X  t ij ( y i ,y j ) is the compatibility of a node with label y i having a neighbor labeled y j , given the edge between i and j is type t , for small . Complexity analysis Most demanding compo-nent of Algorithm 1 is the iterative message pass-ing over the edges (lines 10-14), with time com-plexity O ( ml 2 r ) , where m = | E | is the num-ber of edges in the connotation graph, l = |L| , the classes, and r , the iterations until convergence. Often, l is quite small (in our case, l = 2 ) and r m . Thus running time grows linearly with the number of edges and is scalable to large datasets. ConnotationWordNet is expected to be the super-set of a sentiment lexicon, as it is highly likely for any word with positive/negative sentiment to carry connotation of the same polarity. Thus, we use two conventional sentiment lexicons, General In-quirer (G EN I NQ ) (Stone et al., 1966) and MPQA (Wilson et al., 2005b), as surrogates to measure the performance of our inference algorithm. 4.1 Variants of Graph Construction The construction of the connotation graph, de-synsets, has been described in Section 2. In ad-dition to this graph, we tried several other graph constructions, the first three of which have previ-ously been used in (Feng et al., 2013). We briefly describe these graphs below, and compare perfor-mance on all the graphs in the proceeding.
 G the connotative predicates and their arguments. As such, it contains only type t 1 edges. The edges between the predicates and the arguments can be weighted by their Point-wise Mutual Information G cludes the predicates and all the argument words. Predicate words are connected to their arguments as before. In addition, argument pairs ( a 1 , a 2 ) are connected if they occurred together in the  X  a 1 and a  X  or  X  a 2 and a 1  X  coordination (Hatzivassiloglou and McKeown, 1997; Pickering and Branigan, 1998). This graph contains both type t 1 and t 2 edges. The edges can also be weighted based on the distributional similarities of the word pairs. G G
W ORD W / O VERLAY , with additional edges, where argument pairs in synonym and antonym relation are connected to each other. Note that un-not contain any synset nodes. Rather, the words that are synonyms or antonyms of each other are directly linked in the graph. As such, this graph contains all edge types t 1 through t 4 . G is, it has all the predicate, arguments, and synset nodes, as well as the four types of edges between them. In addition, we add edges of a fifth type t 5 between the synset nodes to capture their similar-ity. To define similarity, we use the glossary def-initions of the synsets and derive three different scores. Each score utilizes the count ( s 1 ,s 2 ) of overlapping nouns, verbs, and adjectives/adverbs among the glosses of the two synsets s 1 and s 2 . with count less than 3. The weighted version has the count s normalized between 0 and 1.
 the count s by the length of the gloss (the avg of two lengths), that is, p = count / avg(len gloss( s 1 ), len gloss( s 2 )) and discard edges with p &lt; 0 . 5 . The weighted version contains p values as edge weights.
 the graph we discard edges with p &lt; 0 . 6 . To weigh the edges, we use the cosine similarity be-tween the gloss vectors of the synsets based on the TF-IDF values of the words the glosses contain.
Note that the connotation inference algorithm, as given in Algorithm 1, remains exactly the same for all the graphs described above. The only dif-ference is the set of parameters used; while G W ORD one and two edge types, respectively and only use compatibilities ( t 1 ) and ( t 2 ) , G W ORD uses all four S
IM graphs use an additional compatibility matrix for the synset similarity edges of type t 5 , which is the same as the one used for t 1 , i.e., similar synsets are likely to have the same connotation label. This flexibility is one of the key advantages of our al-gorithm as new types of nodes and edges can be added to the graph seamlessly. 4.2 Sentiment-Lexicon based Performance In this section, we first compare the performance that do not include synset nodes but only words. Then we analyze the performance when the addi-tional synset similarity edges are added. First, we briefly describe our performance measures.

The sentiment lexicons we use as gold standard are small, compared to the size (i.e., number of words) our graphs contain. Thus, we first find the overlap between each graph and a senti-Table 2: Connotation inference performance on various graphs.  X -W  X  indicates weighted versions (see  X  4.1). P : precision, R : recall, F : F1-score (%). ment lexicon. Note that the overlap size may be smaller than the lexicon size , as some sen-timent words may be missing from our graphs. Then, we calculate the number of correct la-bel assignments. As such, precision is defined as ( correct / overlap ), and recall as ( correct / lexicon size ). Finally, F1-score is their har-monic mean and reflects the overall accuracy.
As shown in Table 2 (top), we first observe that including the synonym and antonym relations in prove the performance significantly, almost by an order of magnitude, over graphs G W ORD W / P RED -A those relation types. Furthermore, we notice that better than those on the word-only graphs. This shows that including the synset nodes explicitly in the graph structure is beneficial. What is more, it gives us a means to obtain connotation labels for the synsets themselves, which we use in the evaluations in the next sections. Finally, we note that using the unweighted versions of the graphs provide relatively more robust performance, po-tentially due to noise in the relative edge weights.
Next we analyze the performance when the new edges between synsets are introduced, as given in Table 2 (bottom). We observe that connecting the synset nodes by their gloss-similarity (at least in the ways we tried) does not yield better perfor-Different from earlier, the weighted versions of the similarity based graphs provide better perfor-mance than their unweighted counterparts. This suggests that glossary similarity would be a more robust means to correlate nodes; we leave it as fu-ture work to explore this direction for predicate-argument and argument-argument relations. 4.3 Parameter Sensitivity Our belief propagation based connotation senti-ment inference algorithm has one user-specified parameter (see Table 1). To study the sensitivity of its performance to the choice of , we reran our experiments for = { 0 . 02 , 0 . 04 ,..., 0 . 24 } 6 and report the accuracy results on our G W ORD +S ENSE in Figure 2 for the two lexicons. The results indicate that the performances remain quite stable across a wide range of the parameter choice. Figure 2: Performance is stable across various . In this section, we present the result of human evaluation we executed using Amazon Mechani-cal Turk (AMT). We collect two separate sets of labels: a set of labels at the word-level, and an-other set at the sense-level. We first describe the labeling process of sense-level connotation: We selected 350 polysemous words and one of their senses, and each Turker was asked to rate the con-notative polarity of a given word (or of a given word, we asked 5 Turkers to rate and we took the average of the 5 ratings as the connotative inten-sity score of the word. We labeled a word as nega-tive if its intensity score is less than 0 and positive otherwise. For word-level labels we apply similar procedure as above.
Table 3: Word-/Sense-level evaluation results 5.1 Word-Level Evaluation We first evaluate the word-level assignment of connotation, as shown in Table 3. The agreement between the new lexicon and human judges varies between 84% and 86.98%. Sentiment lexicons such as SentiWordNet (Baccianella et al. (2010)) and OpinionFinder (Wilson et al. (2005a)) show low agreement rate with human, which is some-what as expected: human judges in this study are labeling for subtle connotation, not for more ex-plicit sentiment. OpinionFinder X  X  low agreement rate was mainly due to the low hit rate of the words (successful look-up rate, 33.43%). Feng2013 is the lexicon presented in (Feng et al., 2013) and it showed a relatively higher 72.13% hit rate.
Note that belief propagation was run until 95% and 99% of the nodes were converged in their beliefs. In addition, the seed words with known connotation labels originally consist of 20 positive and 20 negative predicates. We also extended the seed set with the sentiment lexicon words and de-note these runs with E -for  X  E xtended X . 5.2 Sense-Level Evaluation We also examined the agreement rates on the sense-level. Since OpinionFinder and Feng2013 do not provide the polarity scores at the sense-level, we excluded them from this evaluation. Be-cause sense-level polarity assignment is a harder (more subtle) task, the performance of all lexicons decreased to some degree in comparison to that of word-level evaluations. 5.3 Pair-wise Intensity Ranking A notable goodness of our induction algorithm is that the outcome of the algorithm can be inter-preted as an intensity of the corresponding conno-tation. But are these values meaningful? We an-swer this question in this section. We formulate a pair-wise ranking task as a binary decision task as follows: given a pair of words, we ask which one is more positive (or more negative) than the other. Since we collect human labels based on scales , we Table 4: Results of pair-wise intensity evaluation, for intensity difference threshold = 2.0 already have this information at hand. Because different human judges have different notion of scales however, subtle differences are more likely to be noisy. Therefore, we experiment with vary-ing degrees of differences in their scales, as shown in Figure 3. Threshold values (ranging from 0.5 to 3.0) indicate the minimum differences in scales for any pair of words, for the pair to be included in the test set. As expected, we observe that the perfor-mance improves as we increase the threshold (as pairs get better separated). Within range [0.5, 1.5] (249 pairs examined), the accuracies are as high as 68.27%, which shows that even the subtle differ-ences of the connotative intensities are relatively well reflected in the new lexicons.
 Figure 3: Trend of accuracy for pair-wise intensity evaluation over threshold
The results for pair-wise intensity evaluation (threshold=2.0, 1,208 pairs) are given in Table 4. Despite that intensity is generally a harder prop-erty to measure (than the coarser binary catego-rization of polarities), our connotation lexicons perform surprisingly well, reaching up to 74.83% accuracy. Further study on the incorrect cases re-veals that SentiWordNet has many pair of words with the same polarity score (23.34%). Such cases seems to be due to the limited score patterns of SentiWordNet. The ratio of such cases are ac-counted as Undecided in Table 4. Finally, to show the utility of the resulting lexi-con in the context of a concrete sentiment analysis task, we perform lexicon-based sentiment analy-sis. We experiment with SemEval dataset (Strap-parava and Mihalcea, 2007) that includes the hu-man labeled dataset for predicting whether a news headline is a good news or a bad news , which we expect to have a correlation with the use of con-notative words that we focus on in this paper. The good/bad news are annotated with scores (ranging from -100 to 87). We construct several data sets by applying different thresholds on scores. For exam-ple, with the threshold set to 60, we discard the in-stances whose scores lie between -60 and 60. For comparison, we also test the connotation lexicon from (Feng et al., 2013) and the combined senti-ment lexicon G EN I NQ +MPQA.

Note that there is a difference in how humans judge the orientation and the degree of connota-tion for a given word out of context, and how the use of such words in context can be perceived as good/bad news. In particular, we conjecture that humans may have a bias toward the use of posi-tive words, which in turn requires calibration from the readers X  minds (Pennebaker and Stone, 2003). That is, we might need to tone down the level of positiveness in order to correctly measure the ac-tual intended positiveness of the message.

With this in mind, we tune the appropriate cali-bration from a small training data, by using 1 fold from N fold cross validation, and using the re-maining N  X  1 folds as testing. We simply learn the mixture coefficient  X  to scale the contribution of positive and negative connotation values. We tune this parameter  X  8 for other lexicons we com-pare against as well. Note that due to this param-eter learning, we are able to report better perfor-mance for the connotation lexicon of (Feng et al., 2013) than what the authors have reported in their paper (labeled with *) in Table 5.

Table 5 shows the results for N = 15 , where the new lexicon consistently outperforms other com-petitive lexicons. In addition, Figure 4 shows that the performance does not change much based on the size of training data used for parameter tuning ( N = { 5 , 10 , 15 , 20 } ). Several previous approaches explored the use of graph propagation for sentiment lexicon induction (Velikovich et al., 2010) and connotation lexicon Table 5: SemEval evaluation results, for N = 15 Figure 4: Trend of SemEval performance over N , the number of CV folds induction (Feng et al., 2013). Our work intro-duces the use of loopy belief propagation over pairwise-MRF as an alternative solution to these tasks. At a high-level, both approaches share the general idea of propagating confidence or belief over the graph connectivity. The key difference, however, is that in our MRF representation, we can explicitly model various types of word-word, sense-sense and word-sense relations as edge po-tentials. In particular, we can naturally encode re-lations that encourage the same assignment (e.g., synonym) as well as the opposite assignment (e.g., antonym) of the polarity labels. Note that integra-tion of the latter is not straightforward in the graph propagation framework.

There have been a number of previous studies that aim to construct a word-level sentiment lex-icon (Wiebe et al., 2005; Qiu et al., 2009) and a sense-level sentiment lexicon (Esuli and Sebas-tiani, 2006). But none of these approaches con-sidered to induce the polarity labels at both the word-level and sense-level. Although we focus on learning connotative polarity of words and senses in this paper, the same approach would be applica-ble to constructing a sentiment lexicon as well.
There have been recent studies that address word sense disambiguation issues for sentiment analysis. SentiWordNet (Esuli and Sebastiani, 2006) was the very first lexicon developed for sense-level labels of sentiment polarity. In recent years, Akkaya et al. (2009) report a successful em-pirical result where WSD helps improving senti-ment analysis, while Wiebe and Mihalcea (2006) study the distinction between objectivity and sub-jectivity in each different sense of a word, and their empirical effects in the context of sentiment analysis. Our work shares the high-level spirit of accessing the sense-level polarity, while also de-riving the word-level polarity.

In recent years, there has been a growing re-search interest in investigating more fine-grained aspects of lexical sentiment beyond positive and negative sentiment. For example, Mohammad and Turney (2010) study the affects words can evoke in people X  X  minds, while Bollen et al. (2011) study various moods, e.g.,  X  X ension X ,  X  X epression X , be-yond simple dichotomy of positive and negative sentiment. Our work, and some recent work by Feng et al. (2011) and Feng et al. (2013) share this spirit by targeting more subtle, nuanced sentiment even from those words that would be considered as objective in early studies of sentiment analysis. We have introduced a novel formulation of lexicon induction operating over both words and senses, by exploiting the innate structure between the words and senses as encoded in WordNet. In addi-tion, we introduce the use of loopy belief propaga-tion over pairwise -Markov Random Fields as an effective lexicon induction algorithm. A notable strength of our approach is its expressiveness: var-ious types of prior knowledge and lexical relations can be encoded as node potentials and edge po-tentials. In addition, it leads to a lexicon of bet-ter quality while also offering faster run-time and easiness of implementation. The resulting lexi-con, called ConnotationWordNet , is the first lex-icon that has polarity labels over both words and senses. ConnotationWordNet is publicly available for research and practical use.
 This research was supported by the Army Re-search Office under Contract No. W911NF-14-1-0029, Stony Brook University Office of Vice Pres-ident for Research, and gifts from Northrop Grum-man Aerospace Systems and Google. We thank reviewers for many insightful comments and sug-gestions.
