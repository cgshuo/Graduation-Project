 Pooria Joulani pooria@ualberta.ca Andr  X as Gy  X orgy gyorgy@ualberta.ca Csaba Szepesv  X ari szepesva@ualberta.ca In this paper we study sequential learning when the feedback about the predictions made by the forecaster are delayed. This is the case, for example, in web advertisement, where the information whether a user has clicked on a certain ad may come back to the en-gine in a delayed fashion: after an ad is selected, while waiting for the information if the user clicks or not, the engine has to provide ads to other users. Also, the click information may be aggregated and then pe-riodically sent to the module that decides about the ads, resulting in further delays. (Li et al., 2010; Dudik et al., 2011). Another example is parallel, distributed learning, where propagating information among nodes causes delays (Agarwal &amp; Duchi, 2011).
 While online learning has proved to be successful in many machine learning problems and is applied in practice in situations where the feedback is delayed, the theoretical results for the non-delayed setup are not applicable when delays are present. Previous work concerning the delayed setting focussed on specific on-line learning settings and delay models (mostly with constant delays). Thus, a comprehensive understand-ing of the effects of delays is missing. In this paper, we provide a systematic study of online learning problems with delayed feedback. We consider the partial moni-toring setting , which covers all settings previously con-sidered in the literature, extending, unifying, and often improving upon existing results. In particular, we give general meta-algorithms that transform, in a black-box fashion, algorithms developed for the non-delayed case into algorithms that can handle delays efficiently. We analyze how the delay effects the regret of the algo-rithms. One interesting, perhaps somewhat surprising, result is that the delay inflates the regret in a multi-plicative way in adversarial problems, while this effect is only additive in stochastic problems. While our gen-eral meta-algorithms are useful, their time-and space-complexity may be unnecessarily large. To resolve this problem, we work out modifications of variants of the UCB algorithm (Auer et al., 2002) for stochastic ban-dit problems with delayed feedback that have much smaller complexity than the black-box algorithms. The rest of the paper is organized as follows. The prob-lem of online learning with delayed feedback is defined in Section 2. The adversarial and stochastic problems are analyzed in Sections 3.1 and 3.2, while the mod-ification of the UCB algorithm is given in Section 4. Due to space limitations, some proofs are omitted and are included only in the extended version of this paper (Joulani et al., 2013). We consider a general model of online learning, which we call the partial monitoring problem with side in-Parameters: Forecaster X  X  prediction set A , set of out-comes B , side information set X , reward function r : X X A X B  X  R , feedback function h : X X A X B  X  X  , time horizon n (optional).
 At each time instant t = 1 , 2 ,...,n : 1. The environment chooses some side information 2. The side information x t is presented to the fore-3. The feedback h t = h ( x t ,a t ,b t ) is scheduled to be 4. The agent observes H t = { ( t 0 ,h t 0 ) : t 0  X  t,t Figure 1: Partial monitoring under delayed, time-stamped feedback. formation. In this model, the forecaster (decision maker) has to make a sequence of predictions (ac-tions), possibly based on some side information, and for each prediction it receives some reward and feed-back, where the feedback is delayed. More formally, given a set of possible side information values X , a set of possible predictions A , a set of reward functions R  X  { r : X  X A  X  R } , and a set of possible feedback values H , at each time instant t = 1 , 2 ,... , the fore-caster receives some side information x t  X  X ; then, possibly based on the side information, the forecaster predicts some value a t  X  A while the environment si-multaneously chooses a reward function r t  X  R ; fi-nally, the forecaster receives reward r t ( x t ,a t ) and some time-stamped feedback set H t  X  N  X H . In particular, each element of H t is a pair of time index and a feed-back value, the time index indicating the time instant whose decision the associated feedback corresponds to. Note that the forecaster may or may not receive any di-rect information about the rewards it receives (i.e., the rewards may be hidden). In standard online learning, the feedback-set H t is a singleton and the feedback in this set depends on r t ,a t . In the delayed model, how-ever, the feedback that concerns the decision at time t is received at the end of the time period t +  X  t , after the prediction is made, i.e., it is delayed by  X  t time steps. Note that  X  t  X  0 corresponds to the non-delayed case. Due to the delays multiple feedbacks may arrive at the same time, hence the definition of H t .
 The goal of the forecaster is to maximize its cumula-tive reward P n t =1 r t ( x t ,a t ) ( n  X  1). The performance of the forecaster is measured relative to the best static strategy selected from some set F  X  { f | f : X  X  A} in hindsight. In particular, the forecaster X  X  perfor-mance is measured through the regret , defined by A forecaster is consistent if it achieves, asymptotically, the average reward of the best static strategy, that is E [ R n ] /n  X  0, and we are interested in how fast the average regret can be made to converge to 0.
 The above general problem formulation includes most scenarios considered in online learning. In the full information case, the feedback is the reward func-tion itself, that is, H = R and H t = { ( t,r t ) } ) (in the non-delayed case). In the bandit case, the fore-caster only learns the rewards of its own prediction, i.e., H = R and H t = { ( t,r t ( x t ,a t )) } . In the par-tial monitoring case, the forecaster is given a reward function r : X  X  A  X  B  X  R and a feedback func-tion h : X  X A X B  X  H , where B is a set of choices (outcomes) of the environment. Then, for each time instant the environment picks an outcome b t  X  B , and the reward becomes r t ( x t ,a t ) = r ( x t ,a t ,b H shown in Figure 1 in the delayed case. Note that the bandit and full information problems can also be treated as special partial monitoring problems. There-fore, we will use this last formulation of the problem. When no stochastic assumption is made on how the sequence b t is generated, we talk about the adversarial model. In the stochastic setting we will consider the case when b t is a sequence of independent, identically distributed (i.i.d.) random variables. Side informa-tion may or may not be present in a real problem; in its absence X is a singleton set.
 Finally, we may have different assumptions on the de-lays. Most often, we will assume that (  X  t ) t  X  1 is an i.i.d. sequence, which is independent of the past predictions ( a s ) s  X  t of the forecaster. In the stochastic setting, we also allow the distribution of  X  t to depend on a t . Note that the delays may change the order of observ-ing the feedbacks, with the feedback of a more recent prediction being observed before the feedback of an earlier one. 2.1. Related work The effect of delayed feedback has been studied in the recent years under different online learning scenarios  X  t ) R ( n )  X  O (  X  const )  X  R ) R ( n )  X  O (  X  D )  X  R 0 ( n/  X  D ) log(  X  max ) R ( n )  X  O (  X  const )  X  R ( n/ X  const )  X  log n ) ) R n  X  ( 1 + E [ G  X  n ])  X  R 0
Monitoring Side Info R n  X  ( 1 + E [ G  X  n ])  X  R 0 and different assumptions on the delay. A concise sum-mary, together with the contributions of this paper, is given in Table 1.
 To the best of our knowledge, Weinberger &amp; Or-dentlich (2002) were the first to analyze the delayed feedback problem; they considered the adversarial full information setting with a fixed, known delay  X  const . They showed that the minimax optimal solution is to run  X  const + 1 independent optimal predictors on the subsampled reward sequences:  X  const + 1 prediction strategies are used such that the i th predictor is used at time instants t with ( t mod (  X  const + 1)) + 1 = i . This approach forms the basis of our method devised for the adversarial case (see Section 3.1). Langford et al. (2009) showed that under the usual conditions, a sufficiently slowed-down version of the mirror de-scent algorithm achieves optimal decay rate of the av-erage regret. Mesterharm (2005; 2007) considered an-other variant of the full information setting, using an adversarial model on the delays in the label predic-tion setting, where the forecaster has to predict the label corresponding to a side information vector x t While in the full information online prediction prob-lem Weinberger &amp; Ordentlich (2002) showed that the regret increases by a multiplicative factor of  X  const , in the work of Mesterharm (2005; 2007) the important quantity becomes the maximum/average gap defined as the length of the largest time interval the forecaster does not receive feedback. Mesterharm (2005; 2007) also shows that the minimax regret in the adversar-ial case increases multiplicatively by the average gap, while it increases only in an additive fashion in the stochastic case, by the maximum gap. Agarwal &amp; Duchi (2011) considered the problem of online stochas-tic optimization and showed that, for i.i.d. random delays, the regret increases with an additive factor of order E  X  2 .
 Qualitatively similar results were obtained in the bandit setting. Considering a fixed and known de-lay  X  const , Dudik et al. (2011) showed an additive tic setting (with side information), while (Neu et al., 2010) showed a multiplicative regret for the adversarial bandit case. The problem of delayed feedback has also been studied for Gaussian process bandit optimization (Desautels et al., 2012), resulting in a multiplicative increase in the regret that is independent of the de-lay and an additive term depending on the maximum delay.
 In the rest of the paper we generalize the above results to the partial monitoring setting, extending, unifying, and often improving existing results. In this section we provide black-box algorithms for the delayed feedback problem. We assume that there ex-ists a base algorithm Base for solving the prediction problem without delay. We often do not specify the assumptions underlying the regret bounds of these al-gorithms, and assume that the problem we consider only differs from the original problem because of the delays. For example, in the adversarial setting, Base may build on the assumption that the reward func-tions are selected in an oblivious or non-oblivious way (i.e., independently or not of the predictions of the forecaster). First we consider the adversarial case in Section 3.1. Then in Section 3.2, we provide tighter bounds for the stochastic case. 3.1. Adversarial setting We say that a prediction algorithm enjoys a re-gret or expected regret bound f : [0 ,  X  )  X  R un-der the given assumptions in the non-delayed set-ting if (i) f is nondecreasing, concave, f (0) = 0; and (ii) sup b sup b of Weinberger &amp; Ordentlich (2002) for the adversar-ial full information setting subsamples the reward se-quence by the constant delay  X  const + 1, and runs a base algorithm Base on each of the  X  const + 1 sub-sampled sequences. Weinberger &amp; Ordentlich (2002) showed that if Base enjoys a regret bound f then their algorithm in the fixed delay case enjoys a regret bound (  X  const +1) f ( n/ (  X  const +1)). Furthermore, when Base is minimax optimal in the non-delayed setting, the subsampling algorithm is also minimax optimal in the (full information) delayed setting, as can be seen by constructing a reward sequence that changes only in every  X  const + 1 times. Note that Weinberger &amp; Or-dentlich (2002) do not require condition (i) of f . How-ever, these conditions imply that yf ( x/y ) is a concave function of y for any fixed x (a fact which will turn out to be useful in the analysis later), and are satisfied by all regret bounds we are aware of (e.g., for multi-armed bandits, contextual bandits, partial monitoring, etc.), which all have a regret upper bound of the form e O ( n  X  for some 0  X   X   X  1, with, typically,  X  = 1 / 2 or 2 / 3. 1 In this section we extend the algorithm of Weinberger &amp; Ordentlich (2002) to the case when the delays are not constant, and to the partial monitoring setting. The idea is that we run several instances of a non-delayed algorithm Base as needed: an instance is  X  X ree X  if it has received the feedback corresponding to its previous prediction  X  before this we say that the instance is  X  X usy X , waiting for the feedback. When we need to make a prediction, we use one of existing instances that is free, and is hence ready to make an-other prediction. If no such instance exists, we create a new one to be used (a new instance is always  X  X ree X , as it is not waiting for the feedback of a previous pre-diction). The resulting algorithm, which we call Black-Box Online Learning under Delayed feedback (BOLD) is shown below (note that when the delays are con-stant, BOLD reduces to the algorithm of Weinberger &amp; Ordentlich (2002)): Algorithm 1 Black-box Online Learning under De-layed feedback ( BOLD ) for each time instant t = 1 , 2 ,...,n do end for Clearly, the performance of BOLD depends on how many instances of Base we need to create, and how many times each instance is used. Let M t denote the number of Base instances created by BOLD up to and including time t . That is, M 1 = 1, and we cre-ate a new instance at the beginning of any time in-stant when all instances are waiting for their feedback. Let G t = P t  X  1 s =1 I { s +  X  s  X  t } be the total number of outstanding (missing) feedbacks when the forecaster is making a prediction at time instant t . Then we have G t algorithms waiting for their feedback, and so M t  X  G t + 1. Since we only introduce new instances when it is necessary (and each time instant at most one new instance is created), it is easy to see that for any t , where G  X  t = max 1  X  s  X  t G t .
 We can use the result above to transfer the regret guar-antee of the non-delayed base algorithm Base to a guarantee on the regret of BOLD.
 Theorem 1. Suppose that the non-delayed algorithm Base used in BOLD enjoys an (expected) regret bound f
Base . Assume, furthermore, that the delays  X  t are in-dependent of the forecaster X  X  prediction a t . Then the expected regret of BOLD after n time steps satisfies Proof. As the second inequality follows from the con-cavity of y 7 X  yf Base ( x/y ) ( x,y &gt; 0), it remains to prove the first one.
 For any 1  X  j  X  M n , let L j denote the list of time instants in which BOLD has used the prediction cho-sen by instance j , and let n j = | L j | be the number of time instants this happens. Furthermore, let R j denote the regret incurred during the time instants t with t  X  L j : where a t is the prediction made by BOLD (and in-stance j ) at time instant t . By construction, instance j does not experience any delays. Hence, R j n gret in a non-delayed online learning problem. 2 Then,
R n = sup Now, using the fact that f Base is an (expected) regret bound, we obtain E [ R n |  X  1 ,..., X  n ]  X  where the first inequality follows since M n is a deter-ministic function of the delays, while the last inequal-ity follows from Jensen X  X  inequality and the concavity of f Base . Substituting M n from (1) and taking the expectation concludes the proof.
 Now, we need to bound G  X  n to make the theorem mean-ingful. When all delays are the same constants, for n &gt;  X  const we get G  X  n =  X  t =  X  const , and we get back the regret bound of Weinberger &amp; Ordentlich (2002), thus generalizing their result to partial monitoring. We do not know whether this bound is tight even when Base is min-imax optimal, as the argument of Weinberger &amp; Or-dentlich (2002) for the lower bound does not work in the partial information setting (the forecaster can gain extra information in each block with the same reward functions).
 Assuming the delays are i.i.d., we can give an interest-ing bound on G  X  n . The result is based on the fact that although G t can be as large as t , both its expectation and variance are upper bounded by E [  X  1 ].
 Lemma 2. Assume  X  1 ,..., X  n is a sequence of i.i.d. random variables with finite expected value, and let B ( n,t ) = t + 2 log n + Proof. First consider the expectation and the variance of G t . For any t ,
E [ G t ] = E and, similarly  X  2 [ G t ] = so  X  2 [ G t ]  X  E [  X  1 ] in the same way as above. By Bernstein X  X  inequality (Cesa-Bianchi &amp; Lugosi, 2006, Corollary A.3), for any 0 &lt;  X  &lt; 1 and any t we have, with probability at least 1  X   X  , Applying the union bound for  X  = 1 /n 2 , and our pre-vious bounds on the variance and expectation of G t , we obtain that with probability at least 1  X  1 /n , Taking into account that max 1  X  t  X  n G t  X  n , we get the statement of the lemma.
 Corollary 3. Under the conditions of Theorem 1, if the sequence of delays is i.i.d, then
E [ R n ]  X  ( B ( n, E [  X  1 ]) + 2) f Base Note that although the delays can be arbitrarily large, whenever the expected value is finite, the bound only increases by a log n factor. 3.2. Finite stochastic setting In this section, we consider the case when the predic-tion set A of the forecaster is finite; without loss of generality we assume A = { 1 , 2 ,...,K } . We also as-sume that there is no side information (that is, x t is a constant for all t , and, hence, will be omitted; the results can be extended easily to the case of a finite side information set, where we can repeat the proce-dures described below for each value of the side in-formation separately). The main assumption in this section is that the outcomes ( b t ) t  X  1 form an i.i.d. se-quence, which is also independent of the predictions of the forecaster. When B is finite, this leads to the standard i.i.d. partial monitoring (IPM) setting, while the conventional multi-armed bandit (MAB) setting is recovered when the feedback is the reward of the last ous section, we will assume that the feedback delays are independent of the outcomes of the environment. The main result of this section shows that under these assumptions, the penalty in the regret grows in an ad-ditive fashion due to the delays, as opposed to the mul-tiplicative penalty that we have seen in the adversarial case.
 By the independence assumption on the outcomes, the sequences of potential rewards r t ( i ) . = r ( i,b t ) and feed-same prediction i  X  A . In this setting we also as-sume that the feedback and reward sequences of dif-ferent predictions are independent of each other. Let  X  i = E [ r t ( i )] denote the expected reward of predict-ing i ,  X   X  = max i  X  X   X  i the optimal reward and i  X  with  X  i  X  =  X   X  the optimal prediction. Moreover, let T ( n ) = P n t =1 I { a t = i } denote the number of times i is predicted by the end of time instant n . Then, defin-ing the  X  X aps X   X  i =  X   X   X   X  i for all i  X  X  , the expected regret of the forecaster becomes Similarly to the adversarial setting, we build on a base algorithm Base for the non-delayed case. The advan-tage in the IPM setting (and that we consider expected regret) is that here Base can consider a permuted or-der of rewards and feedbacks, and so we do not have to wait for the actual feedback; it is enough to receive a feedback for the same prediction. This is the idea at the core of our algorithm, Queued Partial Monitoring with Delayed Feedback (QPM-D): Algorithm 2 Queued Partial Monitoring with Delays (QPM-D) Create an empty FIFO buffer Q [ i ] for each i  X  X  .
Let I be the first prediction of Base . for each time instant t = 1 , 2 ,...,n do end for Here we have a Base partial monitoring algorithm for the non-delayed case, which is run inside the al-gorithm. The feedback information coming from the environment is stored in separate queues for each pre-diction value. The outer algorithm constantly queries Base : while feedbacks for the predictions made are available in the queues, only the inner algorithm Base runs (that is, this happens within a single time instant in the real prediction problem). When no feedback is available, the outer algorithm keeps sending the same prediction to the real environment until a feedback for that prediction arrives. In this way Base is run in a simulated non-delayed environment. The next lemma implies that the inner algorithm Base actually runs in a non-delayed version of the problem, as it experiences the same distributions: Lemma 4. Consider a delayed stochastic IPM prob-lem as defined above. For any prediction i , for any s  X  N let h 0 i,s denote the s th feedback QPM-D receives sequence with the same distribution as the sequence of feedbacks ( h t,i ) t  X  N for prediction i .
 To relate the non-delayed performance of Base and the regret of QPM-D, we need a few definitions. For any t , let S i ( t ) denote the number of feedbacks for prediction i that are received by the end of time in-stant t . Then the number of missing feedbacks for i when making a prediction at time instant t is G i,t = T thermore, for each i  X  A , let T 0 i ( t 0 ) be the number of times algorithm Base has predicted i while being queried t 0 times. Let n 0 denote the number of steps the inner algorithm Base makes in n steps of the real IPM problem. Next we relate n and n 0 , as well as the number of times QPM-D and Base (in its simulated environment) make a specific prediction.
 Lemma 5. Suppose QPM-D is run for n  X  1 time instants, and has queried Base n 0 times. Then n 0  X  n and Proof. Since Base can take at most one step for each feedback that arrives, and QPM-D has to make at least one step for each arriving feedback, n 0  X  n . Now, fix a prediction i  X  A . If Base , and hence, QPM-D, has not predicted i by time instant n , (3) trivially holds. Otherwise, let t n,i denote the last time instant (up to time n ) when QPM-D predicts i . Then T ( n ) = T i ( t n,i ) = T i ( t n,i  X  1) + 1. Suppose has been queried n 00  X  n times by time instant t n,i (inclusive). At this time instant, the buffer Q [ i ] must be empty and Base must be predicting i , otherwise QPM-D would not predict i in the real environment. This means that all the S i ( t n,i  X  1) feedbacks that have arrived before this time instant have been fed to the base algorithm, which has also made an extra step,
T i ( n )  X  T 0 i ( n 0 )  X  T i ( t n,i  X  1) + 1  X  ( S i ( t We can now give an upper bound on the expected re-gret of Algorithm 2.
 Theorem 6. Suppose the non-delayed Base algo-rithm is used in QPM-D in a delayed stochastic IPM environment. Then the expected regret of QPM-D is upper-bounded by where E R Base n is the expected regret of Base when run in the same environment without delays.
 When the delay  X  t is bounded by  X  max for all t , we also have G  X  i,n  X   X  max , and E [ R n ]  X  E R Base n + O (  X  When the sequence of delays for each prediction is i.i.d. with a finite expected value but unbounded sup-port, we can use Lemma 2 to bound G  X  i,n , and obtain a bound E R Base n + O ( E [  X  1 ] + p E [  X  1 ] log n + log n ). Proof. Assume that QPM-D is run longer so that Base is queried for n times (i.e., it is queried n  X  n 0 more times). Then, since n 0  X  n , the number of times i is predicted by the base algorithm, namely T 0 i ( n ), can with the expectation of (3) gives which in turn gives,
X As shown in Lemma 4, the reordered rewards and feed-the same distribution as the original feedback sequence ( h t,i ) t  X  N . The base algorithm Base has worked on the first T 0 i ( n ) of these feedbacks for each i (in its extended run), and has therefore operated for n steps in a simu-lated environment with the same reward and feedback distributions, but without delay. Hence, the first sum-mation in the right hand side of (5) is in fact E R Base n the expected regret of the base algorithm in a non-delayed environment. This concludes the proof. While the algorithms in the previous section provide an easy way to convert algorithms devised for the non-delayed case to ones that can handle delays in the feed-back, improvements can be achieved if one makes mod-ifications inside the existing non-delayed algorithms while retaining their theoretical guarantees. This can be viewed as a  X  X hite-box X  approach to extending on-line learning algorithms to the delayed setting, and enables us to escape the high memory requirements of black-box algorithms that arises for both of our methods in the previous section when the delays are large. We consider the stochastic multi-armed bandit problem, and extend the UCB family of algorithms (Auer et al., 2002; Garivier &amp; Capp  X e, 2011) to the delayed setting. The modification proposed is quite natural, and the common characteristics of UCB-type algorithms enable a unified way of extending their per-formance guarantees to the delayed setting (up to an additive penalty due to delays).
 Recall that in the stochastic MAB setting, which is a special case of the stochastic IPM problem of Section 3.2, the feedback at time instant t is h t = r ( a t ,b t there is a distribution  X  i from which the rewards of each prediction i are drawn in an i.i.d. manner. Here we assume that the rewards of different predictions are independent of each other. We use the same notation as in Section 3.2.
 Several algorithms devised for the non-delayed stochastic MAB problem are based on upper confi-dence bounds (UCBs), which are optimistic estimates of the expected reward of different predictions. Dif-ferent UCB-type algorithms use different upper con-fidence bounds, and choose, at each time instant, a prediction with the largest UCB. Let B i,s,t denote the UCB for prediction i at time instant t , where s is the number of reward samples used in computing the es-timate. In a non-delayed setting, the prediction of a UCB-type algorithm at time instant t is given by a one can simply use the same upper confidence bounds only with the rewards that are observed, and predict at time instant t (recall that S i ( t  X  1) is the number of rewards that can be observed for prediction i before time instant t ). Note that if the delays are zero, this algorithm reduces to the corresponding non-delayed version of the algorithm.
 The algorithms defined by (6) can easily be shown to enjoy the same regret guarantees compared to their non-delayed versions, up to an additive penalty de-pending on the delays. This is because the analyses of the regrets of UCB algorithms follow the same pattern of upper bounding the number of trials of a suboptimal prediction using concentration inequalities suitable for the specific form of UCBs they use.
 As an example, the UCB1 algorithm (Auer et al., 2002) uses UCBs of the form B i,s,t =  X   X  i,s + p 2 log( t ) /s , where  X   X  i,s = 1 s P s t =1 h 0 i,t is the average of the first s observed rewards. Using this UCB in our decision rule (6), we can bound the regret of the resulting algorithm (called Delayed-UCB1) in the delayed setting: Theorem 7. For any n  X  1 , the expected regret of the Delayed-UCB1 algorithm is bounded by
E [ R n ]  X  X Note that the last term in the bound is the addi-tive penalty, and, under different assumptions, it can be bounded in the same way as after Theorem 6. The proof of this theorem, as well as a similar regret bound for the delayed version of the KL-UCB algo-rithm (Garivier &amp; Capp  X e, 2011) can be found in the extended version of the paper (Joulani et al., 2013). We analyzed the effect of feedback delays in online learning problems. We examined the partial monitor-ing case (which also covers the full information and the bandit settings), and provided general algorithms that transform forecasters devised for the non-delayed case into ones that handle delayed feedback. It turns out that the price of delay is a multiplicative increase in the regret in adversarial problems, and only an additive in-crease in stochastic problems. While we believe that these findings are qualitatively correct, we do not have lower bounds to prove this (matching lower bounds are available for the full information case only). It also turns out that the most important quantity that determines the performance of our algorithms is G n , the maximum number of missing rewards. It is interesting to note that G  X  n is the maximum number of servers used in a multi-server queuing system with infinitely many servers and deterministic arrival times. It is also the maximum deviation of a certain type of Markov chain. While we have not found any immedi-ately applicable results in these fields, we think that applying techniques from these areas could lead to an improved understanding of G  X  n , and hence an improved analysis of online learning under delayed feedback. This work was supported by the Alberta Innovates Technology Futures and NSERC.
 Agarwal, Alekh and Duchi, John. Distributed delayed stochastic optimization. In Shawe-Taylor, J., Zemel,
R.S., Bartlett, P., Pereira, F., and Weinberger, K.Q. (eds.), Advances in Neural Information Processing Systems 24 (NIPS) , pp. 873 X 881, 2011.
 Auer, Peter, Cesa-Bianchi, Nicol`o, and Fischer, Paul.
Finite-time analysis of the multiarmed bandit prob-lem. Machine Learning , 47(2-3):235 X 256, May 2002. Cesa-Bianchi, Nicol`o and Lugosi, G  X abor. Prediction, Learning, and Games . Cambridge University Press, New York, NY, USA, 2006. ISBN 0521841089.
 Desautels, Thomas, Krause, Andreas, and Burdick,
Joel. Parallelizing exploration-exploitation trade-offs with gaussian process bandit optimization. In Proceedings of the 29th International Conference on Machine Learning (ICML) , Edinburgh, Scotland, UK, 2012. Omnipress.
 Dudik, Miroslav, Hsu, Daniel, Kale, Satyen, Karam-patziakis, Nikos, Langford, John, Reyzin, Lev, and
Zhang, Tong. Efficient optimal learning for contex-tual bandits. In Proceedings of the 27th Conference on Uncertainty in Artificial Intelligence (UAI) , pp. 169 X 178, Corvallis, Oregon, 2011. AUAI Press.
 Garivier, Aur  X elien and Capp  X e, Olivier. The KL-UCB algorithm for bounded stochastic bandits and be-yond. In Proceedings of the 24th Annual Conference on Learning Theory (COLT) , volume 19, pp. 359 X  376, Budapest, Hungary, July 2011.
 Joulani, Pooria, Gy  X orgy, Andr  X as, and Szepesv  X ari,
Csaba. Online learning under delayed feed-back. Extended version of a paper submitted to ICML-2013, 2013. URL http://webdocs. cs.ualberta.ca/ ~ pooria/publications/ DelayedFeedback-ICML2013-Extended.pdf .
 Langford, John, Smola, Alexander, and Zinkevich,
Martin. Slow learners are fast. In Bengio, Y., Schu-urmans, D., Lafferty, J., Williams, C. K. I., and Culotta, A. (eds.), Advances in Neural Information Processing Systems 22 , pp. 2331 X 2339. 2009.
 Li, Lihong, Chu, Wei, Langford, John, and Schapire,
Robert E. A contextual-bandit approach to person-alized news article recommendation. In Proceedings of the 19th International Conference on World Wide
Web (WWW) , pp. 661 X 670, New York, NY, USA, 2010. ACM.
 Mesterharm, Chris J. On-line learning with delayed label feedback. In Jain, Sanjay, Simon, HansUl-rich, and Tomita, Etsuji (eds.), Algorithmic Learn-ing Theory , volume 3734 of Lecture Notes in Com-puter Science , pp. 399 X 413. Springer Berlin Heidel-berg, 2005.
 Mesterharm, Chris J. Improving on-line learning . PhD thesis, Department of Computer Science, Rutgers University, New Brunswick, NJ, 2007.
 Neu, Gergely, Gy  X orgy, Andr  X as, Szepesv  X ari, Csaba, and
Antos, Andr  X as. Online markov decision processes under bandit feedback. In Lafferty, J., Williams, C.
K. I., Shawe-Taylor, J., Zemel, R.S., and Culotta, A. (eds.), Advances in Neural Information Processing Systems 23 (NIPS) , pp. 1804 X 1812, 2010.
 Weinberger, Marcelo J. and Ordentlich, Erik. On delayed prediction of individual sequences. IEEE
Transactions on Information Theory , 48(7):1959 X 
