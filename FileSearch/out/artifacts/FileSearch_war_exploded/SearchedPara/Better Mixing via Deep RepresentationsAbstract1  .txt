 Yoshua Bengio 1 CheckMy@WebPage.ca Gr  X egoire Mesnil 1 CheckMy@WebPage.ca Yann Dauphin CheckMy@WebPage.ca Salah Rifai CheckMy@WebPage.ca Deep learning algorithms attempt to discover multiple levels of representation of the given data (see (Ben-gio, 2009) for a review), with higher levels of repre-sentation defined hierarchically in terms of lower level ones. The central motivation is that higher-level rep-resentations can potentially capture relevant higher-level abstractions. Mathematical results in the case of specific function families have shown that choosing a sufficient depth of representation can yield exponen-tial benefits, in terms of size of the model, to repre-sent some functions (H  X astad, 1986; H  X astad and Gold-mann, 1991; Bengio et al. , 2006; Bengio and LeCun, 2007; Bengio and Delalleau, 2011). The intuition be-hind these theoretical advantages is that lower-level features or latent variables can be re-used in many ways to construct higher-level ones, and the poten-tial gain becomes exponential with respect to depth of the circuit that relates lower-level features and higher-level ones (thanks to the exponential number of paths in between). The ability of deep learning algorithms to construct abstract features or latent variables on top of the observed variables relies on this idea of re-use, which brings with it not only computational but also statistical advantages in terms of sharing of statistical strength , e.g., as already exploited in multi-task learn-ing (Caruana, 1995; Baxter, 1997; Collobert and We-ston, 2008) and learning algorithms involving parame-ter sharing (Lang and Hinton, 1988; LeCun, 1989). There is another  X  less commonly discussed  X  moti-vation for deep representations, introduced in Bengio (2009): the idea that they may help to disentangle the underlying factors of variation. Clearly, if we had learning algorithms that could do a good job of dis-covering and separating out the underlying causes and factors of variation present in the data, it would make further processing (typically, taking decisions) much easier. One could even say that the ultimate goal of AI research is to build machines that can understand the world around us, i.e., disentangle the factors and causes it involves, so progress in that direction seems important. If learned representations do a good job of disentangling the underlying factors of variation, earning (on top of these representations, e.g., towards specific tasks of interest) becomes substantially easier because disentangling counters the effects of the curse of dimensionality. With good disentangling, there is no need for further learning, only good inference. Sev-eral observations suggest that some deep learning algo-rithms indeed help to disentangle the underlying fac-tors of variation (Goodfellow et al. , 2009; Glorot et al. , 2011). However, it is not clear why, and to what extent in general (if any), different deep learning algorithms may sometimes help this disentangling.
 Many deep learning algorithms are based on some form of unsupervised learning, hence capturing salient structure in the data distribution. Whereas deep learning algorithms have mostly been used to learn features and exploit them for classification or regres-sion tasks, their unsupervised nature also means that in several cases they can be used to generate samples. In general the associated sampling algorithms involve a Markov Chain and MCMC techniques, and these can notoriously suffer from a fundamental problem of mix-ing between modes : it is difficult for the Markov chain to jump from one mode of the distribution to another, when these are separated by large low-density regions, a common situation in real-world data, and under the manifold hypothesis (Cayton, 2005; Narayanan and Mitter, 2010). This hypothesis states that natural classes present in the data are associated with low-dimensional regions in input space (manifolds) near which the distribution concentrates, and that differ-ent class manifolds are well-separated by regions of very low density. Slow mixing between modes means that consecutive samples tend to be correlated (belong to the same mode) and that it takes many consecu-tive sampling steps to go from one mode to another and even more to cover all of them, i.e., to obtain a large enough representative set of samples (e.g. to compute an expected value under the target distribu-tion). This happens because these jumps through the empty low-density void between modes are unlikely and rare events. When a learner has a poor model of the data, e.g., in the initial stages of learning, the model tends to correspond to a smoother and higher-entropy (closer to uniform) distribution, putting mass in larger volumes of input space, and in particular, between the modes (or manifolds). This can be visu-alized in generated samples of images, that look more blurred and noisy. Keep in mind that MCMCs tend to make moves to nearby probable configurations . Mixing between modes is therefore initially easy for such poor models. However, as the model improves and its cor-responding distribution sharpens near where the data concentrate, mixing between modes becomes consider-ably slower. Making one unlikely move (i.e., to a low-probability configuration) may be possible, but mak-ing N such moves becomes exponentially unlikely in N , as illustrated in Figure 1. Since sampling is an integral part of many learning algorithms (e.g., to es-timate the log-likelihood gradient), slower mixing be-tween modes then means slower or poorer learning, and one may even suspect that learning stalls at some point because of the limitations of the sampling algo-rithm. To improve mixing between modes, a powerful idea that has been explored recently for deep learning algorithms (Desjardins et al. , 2010; Cho et al. , 2010; Salakhutdinov, 2010b;a) is tempering (Neal, 1994). The idea is to use smoother densities (associated with higher temperature in a Boltzmann Machine or Markov Random Field formulation) to make quick but approx-imate jumps between modes, but use the sharp  X  X or-rect X  model to actually generate the samples of in-terest around these modes, and allow samples to be exchanged between the different levels of temperature. Here we want to discuss another possibly related idea, and claim that mixing between modes is easier when sampling at the higher levels of representation . The objective is not to propose a new sampling algorithm or a new learning algorithm, but rather to investi-gate this hypothesis through experiments using ex-isting deep learning algorithms. The objective is to further our understanding of this hypothesis through more specific hypotheses aiming to explain why this would happen, using further experimental validation to test these more specific hypotheses. The idea that deeper generative models produce not only better fea-tures for classification but also better quality samples (in the sense of better corresponding to the target dis-tribution being learned) is not novel and several obser-vations support this hypothesis already, some quanti-tatively (Salakhutdinov and Hinton, 2009), some more qualitative (Hinton et al. , 2006). The specific contri-butions of this paper is to focus on why the samples may be better, and in particular, why the chains may converge faster, based on the previously introduced idea that deeper representations can do a better job of disentangling the underlying factors of representation. We first clarify the first hypothesis to be tested here. If experiments validate that hypothesis, the most im-portant next question is: why? The main explanation we conjecture is formalized in the following hypothesis. Why would that help to explain H1 ? Imagine an ab-stract (high-level) representation for object image data in which one of the factors is the  X  X everse video bit X , which inverts black and white, e.g., flipping that bit replaces intensity x  X  [0 , 1] by 1  X  x . With the de-fault value of 0, the foreground object is dark and the background is light. Clearly, flipping that bit does not change most of the other semantic characteristics of the image, which could be represented in other high-level features. However, for every image-level mode, there would be a reverse-video counterpart mode in which that bit is flipped: these two modes would be separated by vast  X  X mpty X  (low density) regions in input space, making it very unlikely for any Markov chain in input space (e.g. Gibbs sampling in an RBM) to jump from one of these two modes to another, be-cause that would require most of the input pixels or hidden units of the RBM to simultaneously flip their value. Instead, if we consider the high-level representa-tion which has a  X  X everse video X  bit, flipping only that bit would be a very likely event under most Markov chain transition probabilities, since that flip would be a small change preserving high probability. As another example, imagine that some of the bits of the high-level representation identify the category of the object in the image, independently of pose, illumination, back-ground, etc. Then simply flipping one of these object-class bits would also drastically change the raw pixel-space image, while keeping likelihood high. Jumping from an object-class mode to another would therefore be easy with a Markov chain in representation-space, whereas it would be much less likely in raw pixel-space. Another point worth discussing (and which should be considered in future work) in H2 is the notion of de-gree of disentangling. Although it is somewhat clear what a completely disentangled representation would look like, deep learning algorithms are unlikely to do a perfect job of disentangling, and current algorithms do it in stages, with more abstract features being ex-tracted at higher levels. Better disentangling would mean that some of the learned features have a higher mutual information with some of the known factors. One would expect at the same time that the features that are highly predictive of one factor be less so of other factors, i.e., that they specialize to one or a few of the factors, becoming invariant to others. Please note here the difference between the objective of learn-ing disentangled representations and the objective of learning invariant features (i.e., invariant to some spe-cific factors of variation which are considered to be like nuisance parameters). In the latter case, one has to know ahead of time what the nuisance factors are (what is noise and what is signal?). In the former, it is not needed: we only seek to separate out the factors from each other. Some features should be sensitive to one factor and invariant to the others.
 Let us now consider additional hypotheses that spe-cialize H2 .
 H3(a) says is that disentangling has the effect that the projection of high-density manifolds in the high-level representation space have a smoother density and are easier to model than the corresponding high-density manifolds in raw input space. Let us again use an object recognition analogy. If we have perfectly dis-entangled object identity, pose and illumination, the high-density manifold associated with the distribution of features in high-level representation-space is flat: we can interpolate between some training examples (i.e. likely configurations) and yet stay in a high-probability region. For example, we can imagine that interpo-lating between two images of the same object at dif-ferent poses (lighting, position, etc.) in a high-level representation-space would yield images of the ob-ject at intermediate poses (i.e., corresponding to likely natural images), whereas interpolating in pixel space would give a superposition of the two original images (i.e., unlike any natural image). If interpolating be-tween high-probability examples (i.e. within their con-vex set) gives high-probability examples, then it means that the distribution is more uniform (fills the space) within that convex set, which is what H3(b) is saying. In addition, a good high-level representation does not need to allocate as much real estate (sets of values) for unlikely configurations. This is already what most unsupervised learning algorithms tend to do. For ex-ample, dimensionality reduction methods such as the PCA tend to define representations where most con-figurations are likely (but these only occupy a sub-space of the possible raw-space configurations). Also, in clustering algorithms such as k-means, the train-ing criterion is best minimized when clusters are ap-proximately equally-weighted, i.e., the average poste-rior distribution over cluster identity is approximately uniform. Something similar is observed in the brain where different areas of somatosensory cortex corre-spond to different body parts, and the size of these ar-eas adaptively depends (Flor, 2003) on usage of these (i.e., more frequent events are represented more finely and less frequent ones are represented more coarsely). Again, keep in mind that the actual representations learned by deep learning algorithms are not perfect, but what we will be looking for here is whether deeper representations correspond to more unfolded manifolds and to more locally uniform distributions, with high-probability points occupying an overall greater volume (compared to the available volume). The learning algorithms used in this paper to explore the preceding hypotheses are the Deep Belief Network or DBN (Hinton et al. , 2006), trained by stacking Re-stricted Boltzmann Machines or RBMs, and the Con-tractive Auto-Encoder or CAE (Rifai et al. , 2011a), for which a sampling algorithm was recently proposed (Ri-fai et al. , 2012). In the experiments, the distribution under consideration is the asymptotic distribution as-sociated with the stochastic process used to generate samples. In the case of DBNs it clearly corresponds to the analytically defined distribution associated with the formula for the DBN probability. The Markov transition operator for DBNs is the one associated with Gibbs sampling (in the top RBM) (Hinton et al. , 2006). The Markov transition operator for stacked CAEs has been spelled out in Rifai et al. (2012) and linked to Langevin MCMC in Alain et al. (2012). Each layer of the DBN is trained as an RBM, and a 1-layer DBN is just an RBM. An RBM defines a joint distribution between a hidden layer h and a visible layer v . Gibbs sampling at the top level of the DBN is used to obtain samples from the model: the sampled top-level representations are stochastically projected down to lower levels through the conditional distribu-tions P ( v | h ) defined in each RBM. To avoid unneces-sary additional noise, and like previous authors have done, at the last stage of this process (i.e. to obtain the raw-input level samples), only the mean-field val-experiments on face data (where grey levels matter a lot), a Gaussian RBM is used at the lowest level. An auto-encoder (LeCun, 1987; Hinton and Zemel, 1994) is parametrized through an encoder function f mapping input-space vector x to representation-space vector h , and a decoder function g mapping representation-space vector h to input-space recon-struction r . The experiments with the CAE are with h = f ( x ) = sigmoid( Wx + b ) and r = g ( h ) = sigmoid( W T h + c ). The CAE is a regularized auto-encoder with tied weights (input to hidden weights are the transpose of hidden to reconstruction weights). Let J =  X  X  ( x )  X  X  the Jacobian matrix of the encoder func-tion. The CAE is trained to minimize a cross-entropy reconstruction loss plus a contractive regularization penalty  X  || J || 2 F (the sum of the squared elements of the Jacobian matrix). Like RBMs, CAE layers can be stacked to form deeper models, and one can ei-ther view them as deep auto-encoders (by composing the encoders together and the decoders together) or like in a DBN, as a top-level generative model (from which one can sample) coupled with encoding and de-coding functions into and from the top level (by com-posing the lower-level encoders and decoders). A sam-pling algorithm was recently proposed for CAEs (Rifai et al. , 2012), alternating between projecting through the auto-encoder (i.e. performing a reconstruction) and adding Gaussian noise JJ T in the directions of variation captured by the auto-encoder. The experiments have been performed on the MNIST digits dataset (LeCun et al. , 1998) and the Toronto Face Database (Susskind et al. , 2010), TFD. The for-mer has been heavily used to evaluate many deep learning algorithms, while the latter is interesting be-cause of the manifold structure it displays, and for which the main control factors (such as emotion and person identity) are known.
 We have varied the number of hidden units at each layer independently for shallow and deep networks, and the models that gave best validation performance for each depth are shown. The qualitative aspects of the results were insensitive to layer size. The results reported are for DBNs with 768-1024-1024 layer sizes (28  X  28 input) on MNIST, and 2304-512-1024 on TFD (48  X  48 input). The CAEs have sizes 768-1000-1000 and 2304-1000-1000 on MNIST and TFD respectively. 4.1. Sampling at Different Depths 4.1.1. Better Samples at Higher Levels To test H1 , we first plot sequences of samples at var-ious depths. One can verify in Fig. 2 that samples obtained at deeper layers are visually more likely and mix faster between modes.
 In addition, we measure the quality of the obtained samples, using a procedure for the comparison of sam-ple generators described in Breuleux et al. (2011). Note that the mixing properties measured here are a consequence of the underlying models as well as of the chosen sampling procedures. For this reason, we have chosen to monitor the quality of the samples with respect to the original data generating distribu-tion that was used to train the model. The procedure of Breuleux et al. (2011) measures the log-likelihood of a test set under the density computed from a Parzen window density estimator built on generated samples (10 , 000 samples here). Log-likelihoods for different models are presented in Table 1 (rightmost columns). Those results also suggest that the quality of the sam-ples is higher if the Markov chain process used for sam-pling takes place in the upper layers.
 This observation agrees with H3(b) that moving in higher-level representation spaces where the manifold has been expanded provides higher quality samples than moving in the raw input space where it may be hard to stay in high density regions. 4.1.2. Visualizing Representation-Space by According to H3(a) , deeper layers tend to locally un-fold the manifold near high-densities regions of the input space, while according to H3(b) there should be more relative volume taken by plausible configu-rations in representation-space. Both of these would imply that convex combinations of neighboring exam-ples in representation-space correspond to more likely input configurations. Indeed, interpolating between points on a flat manifold should stay on the manifold. Furthermore, when interpolating between examples of different classes (i.e., different modes), H3(b) would suggest that most of the points in between (on the linear interpolation line) should correspond to plau-sible samples, which would not be the case in input space. In Fig. 3, we interpolate linearly between neigh-bors in representation space and visualize in the in-put space the interpolated points obtained at various depths. One can see that interpolating at deeper levels gives visually more plausible samples. 4.2. Measuring Mixing Between Modes by We evaluate here the ability of mixing among various classes. We consider sequences of length 10, 20 or 100 and compute histograms of number of different classes visited in a sequence, for the two different depths and learners, on TFD. Since classes typically are in dif-ferent modes (manifolds), counting how many differ-ent classes are visited in an MCMC run tells us how quickly the chain mixes between modes. We have cho-sen this particular method to monitor mixing modes because it focuses more directly on visits to modes, instead of the traditional autocorrelation of the sam-ples (which measures how fast the samples change). Fig. 4(c,f) show that the deeper architectures visit more classes and the CAE mixes faster than the DBN. 4.3. Occupying More Volume Around Data In these experiments (Fig. 4 (a,b,d,e)) we estimate the quality of samples whose representation is in the neighborhood of training examples, at different levels of representation. In the first setting (Fig. 4 (a,b)), the samples are interpolated at the midpoint between an example and its k -th nearest neighbor, with k on the x-axis. In the second case (Fig. 4 (d,e)), isotropic noise is added around an example, with noise stan-dard deviation on the x-axis. In both cases, 500 sam-ples are generated for each data point plotted on the figures, with the y-axis being the log-likelihood intro-duced earlier, i.e., estimating the quality of the sam-ples. We find that on higher-level representations of both the CAE and DBN, a much larger proportion of the local volume is occupied by likely configurations, i.e., closer to the input-space manifold near which the actual data-generating distribution concentrates. Whereas the first experiment shows that this is true in the convex set between neighbors at different dis-tances (i.e., in the directions of the manifold), the sec-ond shows that this is also true in random directions locally (but of course likelihoods are also worse there). The first result therefore agrees with H3(a) (unfold-ing) and H3(b) (volume expansion), while the second result mostly confirms H3(b) . 4.4. Discriminative Ability vs Volume Hypothesis H3 could arguably correspond to worse discriminative power 2 : if on the higher-level represen-tations the different classes are  X  X loser X  to each other (making it easier to mix between them), would it not mean that they are more confusable? We first confirm with the tested models (as a sanity check) that the deeper level features are conducive to better classifi-cation performance, in spite of their better generative abilities and better mixing between modes.
 We train a linear SVM on the concatenation of the raw input with the upper layers representations (which worked better than using only the top layer, a setup already used successfully when there is no supervised fine-tuning (Lee et al. , 2009)). Results presented in Table 1 show that the representation is more linearly separable if one increases the depth of the architecture and the information added by each layer is helpful for classification. Also, fine-tuning a MLP initialized with those weights is still the best way to reach state-of-the-art performances.
 To explain the good discriminant abilities of the deeper layers (either when concatenated with lower layers or when fine-tuned discriminatively) in spite of the better mixing observed, we conjecture the help of a better dis-entangling of the underlying factors of variation, and in particular of the class factors. This would mean that the manifolds associated with different classes are more unfolded (as assumed by H3(a) ) and possibly that dif-ferent hidden units specialize more to specific classes than they would on lower layers. Hence the unfolding ( H3(a) ) and disentangling ( H1 ) hypotheses reconcile better discriminative ability with expanded volume of good samples ( H3(b) ). The following hypotheses were tested: (1) deeper rep-resentations can yield better samples and better mix-ing between modes; (2) this is due to better disentan-gling; (3) this is associated with unfolding of the man-ifold where data concentrate along with expansion of the volume good samples take in representation-space. The experimental results were in agreement with these hypotheses. They showed better samples and better mixing on higher levels, better samples obtained when interpolating between examples at higher levels, and better samples obtained when adding isotropic noise at higher levels. We also considered the potential con-flict between the third hypothesis and better discrimi-nation (confirmed on the models tested) and explained it away as a consequence of the second hypothesis. This could be immediate good news for applications requiring to generate MCMC samples: by transport-ing the problem to deeper representations, better and faster results could be obtained. Future work should also investigate the link between better mixing and the process of training deep learners themselves, when they depend on an MCMC to estimate the log-likelihood gradient. One interesting direction is to investigate the link between tempering and the better mixing chains obtained from deeper layers.
 Acknowledgements The authors thank A. Courville and P. Vincent for fruitful discussions, as well as NSERC, Canada Re-search Chairs, CIFAR, Compute Canada and by the French ANR Project ASAP ANR-09-EMER-001.
 Codes for the experiments have been implemented us-ing the Theano (Bergstra et al. , 2010) Machine Learn-ing libraries.

