 ORIGINAL PAPER Mahnaz Shafii  X  Maher Sid-Ahmed Abstract Skewdetectionandcorrectionofascanneddocu-ment is a preprocessing step for optical character recognition systems. We present a novel approach in skew detection and correction of a typed document by minimizing the area of the axis-parallel bounding box. Advantage of our approach over existing methods is that our algorithm is script and con-tent independent. Moreover, our algorithm is not subject to skew angle limitations. The performance of our algorithm was evaluated using images of different scripts with varying skew angles with and without graphical images. Our exper-iments show that our algorithm outperforms existing state-of-the-art skew detection algorithms.
 Keywords Axes-parallel bounding box method  X  Document digitization  X  Optical character recognition  X  Script recognition  X  Skew correction  X  Skew detection 1 Introduction Electronic conversion of scanned images of typed or printed text has various applications such as document management, searchablehistorical documents, automatictranslationof for-eign scripts. Skew detection and correction of the image of a text is an important preprocessing step of any optical charac-ter recognition (OCR) system. Ideal skew correction algo-rithms require the following characteristics: reliable, fast, accurate, script independent, and without angle limitations. Although many methods have been introduced in the litera-ture but a single method with the above-mentioned character-istics has yet to be presented. Skew angle detection methods mainly fall into one the following four categories: 1.1 Projection profile [PP] This method was initially proposed by Postl [ 1 ]. In this method, histograms of the number of black pixels along hor-izontal lines through the document for a range of angles are calculated. For a non-skewed document, horizontal projec-tion profile will have peaks whose width are equal to the char-acters X  height with maximum peak heights at the text lines and valleys whose width are equal to the between-the-line spacing. Therefore, for each angle, a measure of the varia-tion in the bin heights (such as variance) along the projection profile is tracked and the angle with the most variation gives the skew angle. Figure 1 shows histograms of a document for two different skew angles. As shown, when a document has a non-zero skew angle, the horizontal histogram is spread at different row numbers. However, in a zero-skewed page, the histogram is clearly discreet with strong peaks and sepa-rated by valleys. Also, since the number of black pixels in a document is constant, the total spectrum energy is constant. Therefore, for anon-skewedpage, thesameamount of energy has to spread in a smaller area. That is why for a non-skewed page, histogram peaks are much stronger than the peaks on a skewed page.

The limitation of this method is that the document needs to be graphical image free as images have greater contribu-tion than text lines in the profile, therefore, compromising the accuracy of angle detection. Moreover, this method is not very efficient, as projection profile of all possible angles need to be calculated. Additionally, projection profile meth-ods work best when the skew angle is within  X  10  X  to 15  X  and the accuracy of skew detection depends upon the angu-lar resolution of the projection profile. Finally, projection profile methods are very sensitive to noise.

In order to reduce high computational costs, several vari-ations of Postl X  X  original method have been proposed. Baird [ 2 ] proposed a technique to select a subset of the points to be projected. He suggested finding the connected components and projecting only the bottom-centers of the connected com-ponents parallel to set of angles. For each angle, the sum of squares of the values in the projection profile is used as a cri-terion function. Finally, by using least-squares procedure, the peak of the criterion function is approximated. Ciardiella [ 3 ] selected a subregion of a text based on high density of black pixels per row and used projection profile of this selected subregion. The criterion function used in this method is the mean-square deviation of the profile. Since, only a subregion of the whole document is selected, the computational cost of the algorithm reduces.

Ishitani [ 4 ] selected a cluster of parallel lines on the image and the bins of the profile stored the number of black to white transitions along the lines. Again, the aim of this modifica-tion was to improve the high computational cost of rotating the whole document for a wide range of angles. Bloomberg [ 5 ] extracted a sample image in the skewed document. Skew angle was calculated for the sample image rather than whole document, which supposedly results in a faster skew estima-tion method. Same as Ciardiella X  X  method, the goal was to apply the algorithm on a section of a page. In a more recent work, Grafmuller [ 6 ] refers to shortcomings of PP but sug-gests using information from prior steps in preprocessing to improve processing time. 1.2 Hough transform [HT] The Hough transform was first introduced by Duda [ 7 ], who generalized the idea of Paul Hough [ 8 ]. In 1981, Ballard [ 9 ] applied the HT method to detect arbitrary shapes. In 1988, Illingworth [ 10 ] used HT to correct skew angle of a page. In this method, each point in Cartesian space ( x , y ) is mapped to a sinusoidal curve in  X   X   X  Hough space using transform function  X  = x cos  X  + y sin  X  . When multiple points are on the same line, their transformation will intersect at the same point on the transform plane. Therefore, an accumula-tor is defined to track number of intersections that sinusoidal curves have at various  X  and  X  values. As the number of intersections increases at a particular value  X  so does the possibility of having a line in the original image correspond-ingtothat  X   X   X  coordinate value. Finally, identified peaks give the angles at which straight lines can be fit through the original pixels. The skew angle of the documents is found by averaging the  X  s with highest accumulator peaks.
Figure 2 shows detected lines with highest HT accumula-tor peaks on a skewed page. The average skew angles of these lines are considered the skew angle of the page. Figure 3 is the Hough parameter space for the skewed page shown in Fig. 2 . In this space, each black pixel of the page transforms to a sinusoid. The point of intersect between two sinusoids indi-cates the parameters of the line passing through both points. The white squares in Fig. 3 show the five points in HT space with the most values of Hough accumulator, corresponding to the lines found in Fig. 2 .

HT is known as a skew detection method with high accu-racy but relatively slow. As explained earlier, in this method, every black pixel of a page needs to be transferred to Hough space, which makes this method computationally expensive. Also, this method is slow in the presence of noise, and in case of sparse text; it is difficult to choose a peak in Hough space [ 11  X  13 ]. Moreover, due to high computational cost, usually the skew is assumed within a range and relatively coarse angle intervals ( X  &gt; 0 . 5  X  ) are calculated.
In order to decrease the amount of data within a binary image, Hinds [ 11 ] suggested using  X  X urst image. X   X  X urst image X  is a gray-scale image in which each pixel X  X  intensity represents the vertical run-length of a column of black pix-els in the original binary image. After finding  X  X urst image, X  Hough transform is applied to either vertical or horizontal burst image. The drawback is that in order to increase the speed of the algorithm, the resolution of the document image has to be decreased before creating  X  X urst image. X  Also, this method does not perform well when the majority of the doc-ument is non-textual [ 12 ]. Manjunath [ 14 ] reduced number of Hough transforms by taking centroids of connected com-ponents instead of using all image pixels. Le [ 15 ] and oth-ers used the bottom pixels of the candidate objects within a selected region for Hough transformation. A more recent paper by Singh [ 16 ] offers an improved algorithm with a pre-processing step using block adjacency graph (BAG). This paper claims improvements in processing time, however, notes that their improved algorithm works best for Roman scripts. Most of the improvements to the HT method aim at reducing input data to the Hough space; however, they usu-ally increase the complexity of the algorithm and reduce the accuracy of the skew angle detection. 1.3 1st-Nearest-neighbor [NN] clustering This method is based on connected components in which the first nearest-neighbors of all connected components are found and the histogram of the direction vectors for all nearest-neighbors is obtained [ 17 ]. By using Histogram peak, the skew angle can be found. Here are the main steps in the 1st-NN algorithm:  X  Determine connected components  X  Find the nearest neighbor (minimum distance) for each  X  Obtain angle of vectors connecting each component to  X  Accumulate the angles in a histogram  X  The dominant peak in the histogram indicates the skew
Figure 4 is an example of connected components detected on a skewed page and Fig. 6 is the histogram of the accu-mulated angles. The histogram clearly shows a strong peak at  X  25  X  ; therefore, by rotating the image by + 25  X  the skew of the image is corrected. Please note that by correcting the skew of the image, the image is going to be upside-down. Therefore, an orientation correction algorithm is needed to correct the image orientation (Fig. 5 ).

The advantage of 1st-NN method is that it is not limited to any range of skew angles. However, in the presence of noise and subparts of characters, accuracy of this method decreases significantly. In addition, this method requires special atten-tion for dealing with different scripts, and connected or bro-ken characters, and heavily depends on the quality of the binarization process output. This dependency can be very problematic when dealing with complex or degraded data, such as historical documents. 1.4 Fourier transform [FT] In this method, first 2D Fourier transform will be applied to the image plane. Then, coefficients of the power spectrum are calculated and stored in a spectrum. A directional criterion for each angle is then calculated. The angle that maximizes the directional criterion is assumed to give the skew angle of the image. Peake [ 18 ] extended the earlier work of Postl [ 1 ] by calculating skew angle from Fourier spectrums calculated from a number of equally sized blocks of the original image. Peake noted that a directional alignment of energy occurs in Fourier space along an angle corresponding to the skew of the image. He speculates this directional alignment is due to spacing with the lines of a text.

To evaluate the Fourier transform in skew detection of documents, we implemented Peake X  X  method. Based on this method, we sliced an image to four blocks of equal size (Fig. 6 ). Then, using FFT, the Fourier spectrum was com-puted for each block. Based on Peak X  X  recommendation, a small window of size WxW, centered at the origin, was removed to improve the accuracy of the skew detection (Fig. 7 ).
For consistency between the blocks, all values are normal-ized and five highest pairs of peaks are found and the angle of the line connecting each point and the center of the block with respect to the vertical axis is calculated. Finally, in a his-togram, sums of normalized value of the peaks in the Fourier spectrum for each angle are collected. In the histogram, the bin with the highest peak is assumed to give the skew angle (Fig. 8 ).

For large images, this method is computationally expen-sive as 2D Fourier transform of all blocks in the document has to be computed. Also very often for a document image, the largest density direction of Fourier space may be different than the true skew direction.

In addition to the methods mentioned above, researchers have proposed other methods such as image dilation and region-labeling approach, bagging method, statistical mix-ture model, and recursive morphological transform, but none satisfies all characteristics of an ideal skew detection algo-rithm [ 19  X  23 ].

In this paper, we propose a new method based on geo-metrical features of a skewed document. In this method, we calculate the area of an axes-parallel rectangle bounding box (Figs. 9 , 10 ). By rotating only the peripheral pixels of a text usingasimplenumericalmethod,theareaoftheaxes-parallel rectangles is minimized. The angle with the least area of the axes-parallel rectangle represents the skew angle. We would like to mention that our algorithm differs from typical min-imum area bounding box methods such as the ones offered in [ 24 ] and [ 25 ]. Safabakhsh X  X  method [ 24 ] is based on min-imizing the area of a bounding box found from boundary pixels of connected components in the text. This method is computationally intensive, as all connected components of a text is held in memory for bounding box area calculation and for all possible angles.

In the patent filed by Rudak [ 25 ], the boundary pixels are used to create a polygon and at each rotational angle a criterion is defined as the difference between the area of the polygon and the bounding box. Again, Rudak X  X  method requires several computationally intensive calculations like creating the encompassing polygon, calculating the area of the polygon, vertex transformations for each rotation and more importantly not a methodological approach to search for its criterion minimization.

In our method, however, only the outer peripheral pixels of a document are used to form an axes-parallel rectangle. Then, using the bisection numerical method, skew angle is detected efficiently in a few iterations. 2 Proposed algorithm Our algorithm relies on correcting the skew angle of a text using the outer peripheral pixels, and therefore, can correct the skew of a text regardless of the script or the contents of the text. This method performs well compared with many of the available techniques because it can correct texts con-taining images, diagrams, etc. and works with no skew angle limitations.

The following theorem is the basis of our skew correction methodology: Theorem In Euclidean plane geometry, assume a rectangle centered at origin and rotated by angle  X  . Using four corner vertices of this rectangle, create another rectangle oriented parallel to the axes. The area of this axes-parallel rectangle is minimum when  X  is a multiple of  X  /2.

The proof of the above theorem is trivial, as a skewed rectangle can always be  X  X itted X  in a rectangle parallel to the axes made from its vertices (demonstrated in Fig. 9 ). In our algorithm, we use this basic trigonometry fact to minimize the area of the rectangle created from four most corner pixels of an image and parallel to the axes. In other words, we rotate the text in a way to eliminate the gray regions of the picture in Fig. 9 . 2.1 Step-by-step description of our algorithm Step 0 : Preprocessing: After image binarization, apply noise removal and border elimination techniques to prepare the image for skew detection [ 26  X  28 ].
 Step 1 : Text border detection: Simply scan the document row by row to detect the first and the last black pixel in each row. From this point forward, just use the text border pixels as a representative of the document.
 Step 2 : Corner pixel detection: minRow: From step 1, find pixels with the minimum row number. Among them, the pixel with the minimum column number is minRow pixel (Point A in Fig. 10 ). maxRow: From step 1, find pixels with the maximum row number. Among them, the pixel with maximum column num-ber is maxRow pixel (Point C in Fig. 10 ). maxCol: From step 1, find pixels with the maximum column number. Among them, the pixel with minimum row number is maxCol pixel (Point B in Fig. 10 ). minCol: From Step 1, find the pixels with the minimum col-umn. Among them, the pixel with maximum row number is minCol pixel (Point D in Fig. 10 ).
 Step 3 : Calculate the area of a rectangle parallel to axes (dashed rectangle in Fig. 10 ):
A = ( maxCol  X  minCol ) .( max Ro w  X  minRo w) (1) Step 4 : Find direction of rotation to minimize the area: Rotate border pixels  X  1  X  .
 Otherwise, there is no direction. Skip Step 5 and set  X  = Step 5 : Rotate the picture 8  X  in a loop in the direction found in Step 4 and monitor area of the rectangle.
  X  =  X  Step 6 : Use bisection method with half steps to find the angle giving the minimum area: Step 7 :  X  is the skew angle. Rotate the original picture by to correct the skew angle of the text. Based on theorem men-tioned earlier, the result of the skew correction by minimizing the calculated area may be a multiple of  X / 2. Therefore, in step 8, we correct a possible 90  X  turned document using a simple smearing algorithm.
 Step 8 : Scan the document row-wise between rowMin and rowMax and column-wise between minCol and maxCol .If column-wise scan had more white columns than row-wise white rows, then the picture need to be rotated 90  X  .Ifthe direction obtained from step 4 was positive, rotate  X  90  X  if the direction obtained from step 4 was negative or it was no direction, rotate + 90  X  . 2.2 Limitations of our algorithm Our algorithm only guarantees a successful skew correction for a rectangular area with text lines parallel to one of its edges. This condition is considered uncommon, as most of the text regions are either left or right aligned. Even for the center-aligned documents, first and last sentences usu-ally form an edge, and therefore our algorithm can correct the skew angle successfully. Figure 11 shows examples of uncommon skewed texts which require some knowledge of orientation of the text lines for skew correction.
Also, our algorithm does not apply to documents con-taining text regions with different skew angles unless the document is segmented to separate regions before skew cor-rection. 3 Results 3.1 Our method compared to existing methods To compare our algorithm to the existing state-of-the-art skew detection algorithms, we programmed four conven-tional skew detection techniques: PP, HT, 1st-NN, FT. Test environment consisted of a PC with Intel i5-2540M CPU @ 2.60GHzwith16Gbofmemoryandthetestswereperformed in MATLAB. To measure the computing time, MATLAB X  X   X  X lock X  function was used. Total of 130 images were used from the following sources:  X  Our database of 30 images  X  University of Maryland Tobacco800 image database  X  www.mediateam.oulu.f-i image data base.

We categorized our database to two groups of  X  X ypi-cal Samples X  consisted of 100 images obtained from online sources and  X  X xtreme Samples X  consisted of 30 images. All images were at least 300 dpi. 3.1.1 Typical samples Table 1 and Fig. 12 show the results of our method compared with the other conventional methods. As indicated in Fig. 12 , the goal is to approach a 100% success rate as fast as possible. It is clear that our method is superior compared with other methods both in the success rate and average time required for skew correction. As mentioned earlier, our method is very efficient as it works only with the peripheral boundaries of the text. On the other hand, the success of our method is highly dependent to a successful noise removal preprocessing. 3.1.2 Extreme samples In the extreme samples category, we created skewed pages in which typical skew correction techniques usually perform poorly. One example is when a page is skewed more than 45 includes images/tables and consists of more than one column. Each image in this category was carefully scanned, then cor-rected in Photoshop for a 0  X  . Then, each image was arbitrar-ily rotated using the rotate function in Photoshop. Success is assumed when the difference between the estimated skew angle and the tagged skew angle is &lt; 1  X  . Figure 13 shows samples of the images in this category.

Table 2 shows the results of our method compared with the other conventional methods. As shown, our method is suc-cessful in correcting all 30 images in this category. However, in some cases, the orientation of the image is not corrected. Among the conventional methods, PP performed best but not so much successful when images include pictures. 1st -NN method performed poorly as this method works best in simple text images. 3.2 Illustration of few examples Below are some selected examples showing the skewed image (left) and the skew corrected image using our method (right) (Figs. 14 , 15 , 16 ).
 Example 1: Example 2: Example 3:
In this example, the image is de-skewed correctly. How-ever, the page is upside-down. As noted above, if the original text is between 135  X  to 225  X  or exactly at 270  X  , our algorithm corrects the skew but not its orientation. Here, the image skew angle is 209  X  . Therefore, it is de-skewed to an upside-down orientation.
 Example 4:
In this example, the text is de-skewed correctly. However since this Japanese text is written column-wise, its orienta-tion is not correct. Here, an orientation correction algorithm specific to Japanese script is needed. This correction algo-rithm could be a simple smearing algorithm such as the one used in step 8, tuned for a top-to-bottom documents (Fig. 17 ). Example 5:
This image is de-skewed correctly. The preprocessing step of our algorithm removed the black borders and then the algo-rithm finds and corrects the skew of the image. However, because the original image is skewed 170  X  , our algorithm de-skews the image to an upside-down orientation. Please note the complexity of this document image as it includes an embedded table and picture and a wide bordered header. Also, the image has three columns with page number and footer. Other state-of-the-art algorithms such as projection profile were not successful in de-skewing this image (Fig. 18 ). 4 Conclusions In this paper we presented a novel technique for skew cor-rection of a document. Our technique is based on an axes-parallel bounding box and works regardless of the content of the document. Therefore, our algorithm works in existence of graphical images, tables, charts, etc. with no angle lim-itations. A comparison of this algorithm with the existing state-of-the-art skew angle algorithms proved a reliable and fast algorithm, outperforming the compared methods. References
