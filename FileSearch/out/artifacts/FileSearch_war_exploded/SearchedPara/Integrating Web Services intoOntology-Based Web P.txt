 Currently Web portals which try to weave loosely pieces of Web into a structured view for a special interested group of people have received much attention. Lead-ing industry companies like Microsoft 1 and IBM 2 have developed products for automatically generating and maintaining portals. They provide an extensible framework that lets information and services be easily plugged in and allows the end user personalize and organize their own view of the portal. However the lack of semantics makes the generated portals difficult to be processed by machines. into ontology-based Web portal generation and maintenance. SEAL[1] provides a general framework for developing semantic portals. Numerous tools such as KAON portal[2], ODESeW[3], OntoWeaver[4], and OntoWebber[5] have been developed to help design, generate and maintain ontology-based Web portals. However, these systems lack the integration of Web services which may provide more dynamic information and richer functionalities. into a portal. A software framework called SPortS( S emantic + Port al + S ervice) has been designed and implemented to automatically generate service-integrated Web portals based on declarative specifications. The generated portals can pro-vide users and computer agents with convenient access to everything they need to get their tasks done.
  X  Based on the common OWL-DL[6] formalism, semantic Web services[7] and  X  By decomposing complex queries until they can be answered using avail- X  Through capturing recently visited concepts to form a semantic context,  X  In order for other programs and agents on the Semantic Web to visit the  X  SPortS uses OWL-DL as the underlying knowledge representation formal-the SPortS system in section 2. By explaining the Web portal generation and presentation process, section 3 shows how Web services are integrated in the pre-sentation level. Then in section 4, we describe the query decomposition algorithm that integrates information from both Web services and domain knowledge. This explains how data level integration with Web services is achieved. Section 5 de-scribes the dynamic context-sensitive recommendation of Web services in the generated portal. By recommending services to the user, the generated portal integrates the functions of the services. Finally, we discuss related work in section 6 and conclude the paper in section 7. In the design of the SPortS architecture(Fig.1), the main objective is to integrate Web services at the presentation level, the data level, and the function level. Among them, the data level plays a central role of driving the integration on the other two levels. In SPortS, data is stored in four knowledge bases which are all based on the OWL-DL formalism.
 Domain Knowledge Base stores the domain classes, properties, and individ-Service Knowledge Base stores OWL-S 3 descriptions of all available seman-Site Knowledge Base contains the site ontology used to model the portal at Meta Knowledge Base is designed to enable us to directly manipulate classes unified ontology. Queries issued to the virtual knowledge base can be expressed in the unified ontology without caring how knowledge from different knowledge bases and services are composed to answer them. This task is actually accom-plished by the Query Decomposition Engine. In this way, information from dif-ferent sources are integrated and can be accessed transparently.
 bases. The domain knowledge engineer builds the domain knowledge base from which the default site knowledge base is automatically generated by the site ontology default generator . After that, the portal designer uses a WYSIWYG tool to design the content, layout and navigational structure of the portal by changing the site knowledge base. At the same time, the service engineer is responsible for populating the service knowledge base with available semantic Web services. namically constructs a Web page for the user X  X  request according to the virtual knowledge base. The construction process will be described in Section 3. The Query Decomposition Engine which is utilized by Output Generator to provide all data in the Web page is discussed in Section 4. Decomposed queries that can be answered by a single knowledge bases are ultimately processed with the help of the inference engine.
 intelligently analyzes context knowledge and recommends services that the user may be interested in. The recommended service can be presented in the portal for invocation, which achieves function level integration. Section 3.2 and Section 5 will give more details about this process.
 edge base. So the change to the virtual knowledge base will simultaneously be reflected in the generated Web pages. It means that the maintenance work will only consist of updating the virtual knowledge base. This can greatly reduce the resources (manpower, money) for maintaining and editing the portal. 3.1 Site Ontology and Portal Generation The site ontology is designed to model Web portals at a conceptual level. As shown in Fig.2, the site ontology includes the following core classes: Web page , container , class binding and navigation rule .
 The class models the static view of the portal as a tree of con-The class models the structure unit of Web pages. Container has The class models what properties of and how the individuals The class models the navigational structure of the portal.
 3.2 Presentation of Semantic Web Services Based on the common OWL-DL formalism, semantic Web services and domain knowledge are processed and presented uniformly in our system. In this sub-section, we show in detail how Web services are presented in exactly the same manner using the mechanism mentioned above.
 ommended Web services. The OWL-DL class description of its content is Rec-ommendedService, whose individuals are retrieved by the Query Decomposition Engine (ref. Section 4) via the Recommendation Service (ref. Section 5). When the  X  X orrow proceedings from library X  service link is clicked, a navigation rule which replaces the content of the DetailContainer with the clicked individual is activated. Fig.4 illustrates the result page.
 viceResultPresentation, to act as the proxy between the user and the Web service provider. The ServiceInputPresentation will generate a specific form according to every service X  X  Input in service knowledge base. Then the user can input service parameters by filling the form. After the form is submitted, a navigation rule is activated to use the ServiceResultPresentation to capture the input, invoke the Web service and display the result in a uniform way.
 fantastic. There are some attempts to develop a standard for Web Services for Remote Portlets (WSRP)[10]. Its aim is to enable reuse of services at the presen-tation layer. So when it is being widely used, every WSRP-compliant Web service can be fully integrated into our portal without loss of even presentation details. The primary motivation for designing the Query Decomposition Engine is to provide SPortS with the ability to get data from the virtual knowledge base without knowing whether it comes from domain knowledge bases or Web services. Then the data level integration which is at the core of the SPortS system can be achieved. 4.1 Problem Definition Until now, there is no standard for how to query DL knowledge bases. In [11], a DL query language is proposed. However, just as [11] has stated, how to ef-ficiently retrieve answer sets for the proposed query language is still an open problem. Besides, [11] showed that by rolling up role terms, many queries can be transformed into the form of a DL class expression. Then in order to make our system work, we formalize queries as OWL-DL class expressions in the unified ontology of the virtual knowledge base.
 scribed as the combination of its input/output class descriptions. Each input of a service will have an input class description to constrain its type. We simplify the output as another class of individuals, which is described as an output class O . Moreover, we require that the output class be constructed by inputs and constants with OWL-DL constructors. The O is called output class description which records the functional relationship between the output and the inputs. compose all services to retrieve all individuals of the query X  X  class expression. In this sense, it is actually a problem of semantic composition of information providing services as we described in [12].
 SPortS. The domain knowledge base with the support of a DL reasoning en-gine can answer any complex queries about it alone. So its capabilities can X  X  be easily be described by OWL-DL class expressions. However, it can be dealt with separately in the query decomposition algorithm. Whenever a query (or part of a query) is going to be decomposed, it is first checked against domain knowledge base to see whether it can be answered entirely . It will be further decomposed if the domain knowledge base cannot handle it alone. In the follow-ing, we thus focus on how normal information providing services are described and composed. 4.2 Basic Ideas In this subsection, we give a brief description of the query decomposition algo-rithm. A more complete and detailed description of the the algorithm and some discussion are available in [12].
 OWL-DL class expressions. Therefore, in theory, the query decomposition algo-rithm needs to find a semantically-equivalent logic combination of several OWL-DL class expressions for a given OWL-DL query class. It is tightly related to the problem of DL query rewriting on views[13][14] . Currently in SPortS, we attack the problem through decomposing the query X  X  syntax tree with regard to its semantics.
 to the OWL-DL abstract syntax definition in [6], the tree has 6 basic elements shown in Fig. 5. Note that in the figure union ( ) is not regarded as a basic element of the syntax tree. Actually with the application of the De Morgan Law A B =  X  (  X  A  X  B ), all union operations can be normalized into intersection and complement operations. Furthermore, we normalize the query expressions and service output class descriptions so that no intersection operations contain intersection class operands (e.g. ( A B ) C is normalized to A B C ), and no complement operations contain complement class operands (i.e.  X  (  X  A )is normalized to A ). to show a list of upcoming conferences focused by our lab in the IndexContainer, the query Q A in the Apex-Lab-Portal example can be expressed as formula:  X  focusedBy . { apexLab } Conference  X  hasDeadline . (  X  laterThan . { today } ) (1) It can be parsed as a syntax tree shown in Fig.6. In the example, there is a service which has the capability to return a list of conferences whose paper submission deadlines are later than an input date. The input class description of the service X  X  capability is the class Date. The output class description O is: and its syntax tree is shown in Fig.7.
 ferences are focused by the lab. That is, the class can be answered by the domain knowledge base. We can see that the intersection ( ) of (2) and (3) is equivalent to (1)  X  the query Q A . It is more clear seen on the Fig.6. (3) is the central-left part of the tree and (2) is the central-right part of the tree. The query is then equivalent to the intersection of the two parts. This example shows how the information providing service S A and the domain knowledge base is composed together to answer a query. This idea can be seen as a horizontal decomposition. On the other hand, we also need a vertical decomposition method, i.e. query result of a sub-tree may be used as input to feed another service.
 In Web portals, especially E-Commerce portals, world changing services may play a pivotal role because they can perform real world (business) transactions. Many current semantic portals are limited to only presenting domain knowledge. Adding world changing services will greatly enrich the portal X  X  functionality and help user act based on contextual knowledge. However, simply listing all available services on the portal is far from an appropriate integration method. Users may be over-loaded with lots of irrelevant or uninteresting services. SPortS solves the problem by listing only those services that are contextually relevant. The function is pro-vided by another information providing service  X  Recommendation Service. includes the concepts/classes that the user recently visits. For instance, in our running Apex-Lab-Portal example, when the user clicks a conference link to show its details, he/she is probably interested in those services that involve related concepts, such as conferences, papers, proceedings, etc at that moment. However, with time, the user may gradually shift his/her focus to other concepts in the portal during his/her visit and the list of relevant services should change accordingly. We simulate this process by assigning temperatures to concepts that reflect their degrees of the user X  X  attention.  X  X otter X  concepts receive more visits and the temperature will be dropped if it is not visited by the user for a while. graph G =( V, E ) where V is the set of all the classes in the unified ontology of the virtual knowledge base and the edges in E are the semantic relations between classes. The graph can be obtained by converting the OWL-DL descriptions of the virtual knowledge base into an RDF graph. Currently in SPortS, we obtain the graph using a special algorithm that analyzes the OWL-DL class descriptions. For each vertex c  X  V , a temperature t ( c ) is assigned and for each edge r  X  E a thermal conduction factor d ( r ) is assigned. All t ( c ) are initialized to 0 and d ( r ) are initialized according to the semantic types of r . For a path p consisting of edges r 0 ,r 1 ,...r n in the graph, its thermal conduction factor d ( p )= n i =0 d ( r i ). To measure the mutual influences between any pair of vertices c 1 and c 2 , we define the maximum thermal conduction factor between them as md ( c 1 ,c 2 )= max { d ( p ) | p connects c 1 and c 2 } and we define md ( c, c )=1 for any c . Whenever a user visits some concepts by browsing a Web page, the following procedure is used to update the temperatures of concepts: temperatures. Based on this context, the relevance value of a semantic Web service s is calculated as where c i is the concept in the OWL-S description of s . The services are then ranked according to the relevance values rel ( s ) and recommended to the user. In addition to the dynamic recommendation, SPortS also supports static recom-mendation that always recommends specific services for certain concepts. System administrators can utilize this feature to enforce business policies on service rec-ommendation. Recently, a great variety of technologies and systems have been developed to achieve the goal of automatic semantic Web portal generation. Similar to SPortS, they use ontologies to model a data-intensive Web site at a conceptual level. As a result, the portal designer can focus on the conceptual structure of the target portal and domain knowledge, independently of its realization.
 maintaining semantic portals, and extended the semantic modules to include a large diversity of intelligent means for accessing the Web site, like semantic ranking, machine accessing, etc.
 WebODE[15] ontology engineering platform that automatically generates and manages a knowledge portal. It provides functions for content provision, content visualization, and content search and querying. It also provides an easy-to-use tool suite for the administration of the generated knowledge portals. munity Portal as part of the OntoAgents project. It takes the sources from ontologies in RDF or semi-structured data like HTML with corresponding data translators.
 SPortS, It defines a site ontology to model the navigational structure and the compositional structure of a data-intensive Web site on the basis of pre-existing site modelling approaches. It provides explicit mapping mechanisms, which make it possible to generate quickly site implementations from the conceptual model. OntoWeaver[4] extends IIPS by proposing and introducing a customization framework into the ontology-based Web modelling approach to the design and maintenance of Web applications.
 proaches is that SPortS tightly integrates semantic Web services, both infor-mation providing services and world changing services, into generated portals. Semantic portals generated by previous approaches are mostly limited to only presenting and editing domain knowledge. By integrating information providing services into the portal, more dynamic and up-to-date information from services can be combined with domain knowledge to serve the users. By adding services to the generated portal and recommending them according to semantic con-texts, the portal X  X  functionality is greatly enriched and the user can act on the contextual knowledge in the portal. In this paper, we have presented SPortS, an OWL-DL based semantic portal system that integrates semantic Web services into generated portals at the pre-sentation level, the data level, and the function level. At the presentation level, semantic Web services can be uniformly presented as first class citizens with domain knowledge. At the data level, knowledge from information providing services can be retrieved and composed together with domain knowledge to answer complex queries. In this way, potentially broader and more up-to-date information from services can be synthesized. At the function level, the recom-mendation of services greatly enriches the generated portal X  X  functionality and can help users act in the portal based on contextual knowledge.
 At the presentation level, the generated portal can only display Web services in a uniform way, so for those services which serve as desktop-applications, SPortS can only integrate their functions without presentation details. The WSRP stan-dard can be used to solve this problem. At the data level, due to the lack of an appropriate OWL query language and the difficulties in decomposing queries, we cannot fully utilize the information to answer more queries with better re-sults. At the function level, the portal personalization is not yet designed in the current prototype. For example, the semantic context used by the service recommendation does not include any personalization information. Our future work will be focused on these aspects.

