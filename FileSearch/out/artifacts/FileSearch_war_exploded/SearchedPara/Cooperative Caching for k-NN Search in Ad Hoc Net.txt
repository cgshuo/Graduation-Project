 Mobile ad hoc networks have multiple limitations in performing similarity-based nearest neighbor search  X  dynamic topology, frequent disconnections, limited power, and restricted bandwidth. Cooperative caching is an effective technique to reduce network traffic and increase accessibility. In this paper, we pr opose to solve the k-nearest-neighbor search problem in ad hoc networks using a semantic-based caching scheme which reflects the content distribution in the network. The proposed scheme describes the semantic similarity among data objects using constraints, and employs cooperative caching to estimate the content distribution in the network. The query resolution based on the cooperative caching scheme is non-flooding and hierarchy-free. H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval  X  Query formulation, Retrieval models Algorithms, Design Ad hoc network, cooperative caching, similarity search. Wireless ad hoc networks have received considerable research attention due to the provisions of wireless communications without location limitations and pre-built infrastructure. This very nature brings better flexibility to the network systems; however, it also causes some challenges. For example, efficient similarity-based nearest neighbor retrieval (i.e. k -NN search) is complicated by the inherent characteristics of the wireless ad hoc networks such as storage, bandwidth, connectivity, and energy. One approach to overcome this challenge is to use the knowledge of data content distribution in the network to facilitate k -NN query resolution. In response to a query, nodes in an ad hoc network can be partitioned into two groups based on semantic similarity: the nodes containing content-similar data and the nodes that only possess irrelevant data. To improve the performance, the search should be performed within only the relevant nodes. This strategy reduces the network traffic and consequently, improves system performance. This paper presents a cooperative semantic-based caching scheme that keeps track of the recently issued queries and the resolutions. We address the fundamental problem of supporting similarity search within the network, in which each node caches the semantic content of earlier queries issued to or passing by it. By analyzing the cache content, an overview of data distribution in the network is obtained, and the later queries are resolved with optimized search cost. For similarity search, there are several traditional methodologies such as search trees [1] that are used in centralized systems and distributed hash tables [2] that enable content/location lookup in peer-to-peer networks. Due to the infrastructure-free nature of ad hoc networks, it is impractical to maintain a search tree overlaid on the mobile nodes. Moreover, the performance of search trees degrades rapidly in high-dimensional spaces due to the existence of dimensionality curse . The distributed hash tables usually incur formidably high system overhead maintaining the content/ location mapping, considering the dynamic topology and frequent disconnections. Flooding is a fundamental search strategy in ad hoc networks. However, flooding implies large consumption of system resources  X  storage, bandwidth, and energy. In addition, due to the share-medium nature of most ad hoc networks, flooding may also cause serious redundancy, contention, and collision of rebroadcast messages in the shared wireless channels, which is known as the broadcast storm . Caching has been widely used in wireless network environments to improve system performance. The literature reports research works trying to provide solutions to mobile ad hoc data retrieval using cooperative caching [3]. However, the conventional caching schemes are based on exact match and cannot be directly apply to similarity search in ad hoc networks. Compared with the traditional caching schemes, we use locality constraints to indicate the content similarity of data points. Our strategy is to derive the distribution density from the results of earlier queries. Formally, given a set of data points x 1 the earlier query results in an n -dimensional space, we can find a hyper-rectangle region including all these data points: H ( x 1 , x 2 ,..., x m ) = MBR n ( x 1 , x =  X  where MBR n (.) is the n -dimensional minimum bounding hyper-rectangle and mbi i (.) is the minimum bounding interval along the The distribution density of the query results is a probability over the hyper-rectangle region H ( x 1 , x 2 ,..., x m ), whose value (given a query x and a search radius r ) can be defined as: P ( x , r ) =  X  The cooperative caching scheme can be described as follows: Each mobile node maintains a distribution density description of the earlier query results and the locations of requested data. When receiving a new query x , a mobile node will compare this query with the distribution density and determine the related nodes and appropriate search radius. Avoid forwarding the query to content-irrelevant nodes whose data are not enclosed in the search region. Therefore, the network traffic can be reduced and response time can also be improved (considering less possibility of collison). Due to the limitation of cache size, the local cache may not have enough sp ace for new data results. The replacement policy of our scheme can support various cache granularities according to different QoS requirements. Frequently accessed data objects are represented with finer descriptions in smaller regions with dense distribution density, which further improves the cache hit ratio. A simulated ad hoc network comprising up to 256 nodes and 65,536 data points was implemented to evaluate the proposed caching scheme. The nodes join/leave the network according to a Poisson process during a period of 6000 seconds. The access pattern in the queries follows Zipf-like distribution, which is widely used for non-uniformly distributed queries. Two r ecently proposed caching schemes, CacheData and CachePath, were chosen for the comparison. Figure 1 shows the cache hit ratio as a function of the node density and cache size in the ad hoc network. As can be seen, the cache hit ratio of our scheme increases as the number of nodes increases, while CacheData and CachePath have decreased hit ratio with increased node density. In CacheData and CachePath approaches, due to the fixed data set size, the average number of objects in each node decreases as node density increases. Therefore the probability of hitting the results of earlier queries decreases in CacheData and CachePath. However, in our scheme, each mobile node prefetches the semantic descriptions of query results that passed by it for possible future use. The increased node density leads to increased number of queries, which causes more query results stored in the local caches. In another simulation run, we examined the impact of cache size and mobility on the average query response delay. As can be seen from Figure 2, the average delay of CacheData is much more affected by cache size than CachePath and our c ooperative caching scheme. This can be explained by the fact that CacheData often has to remove less frequently visited data item from cache due to the large data size and limited cache space. Also notice that the average delay increases as node mobility increases. However, the delay of CachePath increases much faster than that of cooperative caching. Similarity search is a challenging problem in ad hoc networks due to the limitations of mobility, bandwidth, and infrastructure-free nature. In this paper we propose a semantic-based cooperative caching scheme to facilitate the efficient similarity search in ad hoc networks. It uses constraints and distribution density to represent data contents, increasing cache hit ratio while reducing the cache space requirement. [1] Fu, A., W., Chan, P., M., Cheung, Y., and Moon, Y., S., [2] Tang, C., Xu, Z., and Dwarkadas, S., Peer-to-peer [3] Yin, L., and Cao, G., Supporting cooperative caching in ad 
