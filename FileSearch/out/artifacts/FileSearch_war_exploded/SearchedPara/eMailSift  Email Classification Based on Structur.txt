
In this paper we propose a novel approach that uses structure as well as the content of emails in a folder for email classification. Our approach is based on the premise that representative  X  common and recurring  X  structures/patterns can be extracted from a pre-classified email folder and the same can be used effectively for clas-sifying incoming emails. A number of factors that influence representative structure extraction and the classification are analyzed conceptually and validated experimentally. In our approach, the notion of inexact graph match is leveraged for deriving structures that provide coverage for characterizing folder contents. Extensive experimentation validate the se-lection of parameters and the effectiveness of our approach for email classification.
In the Internet age, rapid dissemination of data and a quick method to apprise others of the information available is possible by means of electronic mail. Electronic mail can be viewed as a special type of document as it is primarily text along with some identifying information unique to it (e.g., from, to, subject, cc, attachments and so on). Email has evolved as a convenient means of communication be-tween individuals as well as groups. It is a fast, efficient, and an inexpensive way of reaching out to a large number of people at the same time. This very reason is also the bane of electronic mail communication. Users often find them-selves expending large amounts of time and effort sifting through the mass of email messages and classifying them to their corresponding folders [14]. A tool (hopefully auto-mated) is needed for the management of email due to its sheer volume and the need to retrieve relevant emails as needed later. Mis-classification and putting it in the wrong place is as good as losing the email as it will be extremely difficult to locate it later. One aspect of email management is to classify email messages into appropriate folders au-tomatically with acceptable accuracy. Certainly, the pres-ence of an automated system can reduce the time to classify emails, search for a particular email and retrieve relevant emails.
The characteristics of documents and emails differ sig-nificantly and as a consequence email classification poses certain challenges, not often encountered in text or docu-ment classification. Some of the differences and the con-comitant challenges are: 1. Manual classification of emails is based on personal 2. Each users X  mailbox is different and is constantly 3. The information content of emails vary significantly, 4. The characteristics of folders may vary from dense 5. Emails are typically classified into subfolders within a
In this paper we propose a novel approach that uses both the structure and its content for email classification. Since emails exhibit a structure in the form of headers and the message body, they can be represented graphically and the relationships between various terms (e.g., the occurrence of a term in the subject or body of the message and so on) can be represented in the form of a graph, we have chosen graph mining as a viable technique for pattern extraction and clas-sification. The approach is based on the premise that repre-sentative  X  common and recurring  X  structures/patterns can be extracted from a pre-classified email folder and the same can be used effectively for classifying incoming emails. We believe that a folder consists of representative emails and the structure and content of these representative emails can be extracted by adapting graph mining techniques to work with domain knowledge. We also hypothesize that the no-tion of inexact graph matching (or isomorphic graph com-parison) is critical for this to work as it helps in group-ing similar structures within emails instead of looking for exact/identical matches that may be difficult to find in the email domain.

The main contribution of this paper is in the novelty of the approach in considering both structure and content for classification. To the best of our knowledge, this is the first attempt to assess the applicability of graph mining for clas-sification. A graph model has been used by Schenker et al. [12] for classifying web documents, but the conventional vector model based k -NN algorithm has been extended to handle graph based data. The graph theoretical-distance measure for computing the distance translates to the max-imal common subgraph distance proposed in.

The remainder of the paper is organized as follows. Sec-tion 2 presents related work. A brief overview of graph mining is presented in Section 3 . Section 4 provides an out-line of the proposed eMailSift mail classification system. Section 5 describes the detailed system design. Section 6 presents the experimental results and comparison with the naive Bayesian probabilistic classifier. Section 7 has con-clusions and future work.
Depending upon the mechanism used, email classifica-tion schemes can be broadly categorized into: i) Rule based classification, ii) Information Retrieval based classification and iii) Machine Learning based classification techniques. Rule Based Classification: Rule based classification sys-tems use rules to classify emails into folders. William Co-hen [4] uses the RIPPER learning algorithm to induce  X  X ey-word spotting rules X  for email classification. i-ems [6] is a rule based classification system that learns rules based only on sender information and keywords. Ishmail [7] is another rule-based classifier integrated with the Emacs mail program Rmail.
 Information Retrieval Based Classification: Segal and Kephart [13] have used the TF-IDF classifier as the means for classification in SwiftFile , implemented as an add-on to Lotus Notes. It predicts three likely destination folders for every incoming email. The TF-IDF classifier performs well in the absence of a large training set and also when the amount of training data increases, adding to the heterogene-ity of a folder.
 Machine Learning Based Classification: The iFile sys-tem by Rennie [9] uses the naive Bayes approach for ef-fective training, providing good classification accuracy, and for performing iterative learning. Re:Agent by Boone [2] first uses the TF-IDF measure to extract useful features from emails and then predicts the actions to be performed using the trained data and a set of keywords. Mail Agent Inter-face ( Magi ) by Payne and Edwards [10] uses the symbolic rule induction system CN2 [3] to induce a user-profile from observations of user interactions.
Graph mining aims at discovering interesting and repet-itive patterns/substructures within structural data. Most im-portantly, the representation in graph format preserves the structural information of the original structure, which may be lost when the problem is translated to other represen-tation schemes. Relevant work in graph mining includes the Subdue substructure discovery system by Cook and Holder [5]. Subdue uses beam search to discover interest-ing subgraphs and compresses the original graph with in-stances of the discovered substructures. The frequent sub-graphs approach by Kuramochi and Karypis [8] maps the Apriori algorithm to structural data represented in the form of a labeled graph and finds frequent itemsets that corre-spond to recurring subgraphs in the input. gSpan [15] uses a canonical representation by mapping each graph to a code and uses depth-first search to mine frequent subgraphs.
We believe that emails can be represented using struc-tural relationships as an email has a structure in the form of the information contained in the headers, the subject and the body. This is radically different from the existing cor-pora of work where emails are considered as general text having no particular structure. Our work requires a means of substructure discovery directed by specific constraints (explained later). The notion of matching inexactly within bounds dictated by various domain characteristics is neces-sary. FSG and gSpan do not have this notion of matching inexactly within a threshold value as they use canonical la-beling. Hence, we have chosen the same for our work. Subdue Substructure Discovery System: The Subdue graph based mining algorithm accepts as input a forest of graphs and identifies the best subgraph that minimizes the input forest using the minimum description length (MDL) principle [11]. Subdue is capable of identifying both exact and inexact (or isomorphic) substructures in the input graph. It uses a branch and bound algorithm that runs in polyno-mial time for inexact graph match and identifies graphs that differ in their vertex or edge labels using a threshold param-eter that characterizes the inexactness. Threshold : The threshold parameter provides a similarity measure for the inexact graph match. It specifies the amount of variation between instances of a substructure. The in-stances match if matchcost ( sub, inst ) &lt; = size ( inst threshold . A threshold value of 0.0 implies exact graph match.
 Beam : Subdue employs a beam value during its search to determine the set of best substructures that it will carry for-ward from one iteration to the next. Substructure discovery is performed by expanding the vertices of the input graph by the edges that are incident on them. During each iteration of the algorithm, beam specifies the maximum number of substructures (the best substructures from all the iterations up to the current one) that are retained for expansion during the next iteration.
 Nsubs : It specifies the maximum number of the best sub-structures returned by Subdue.
 Size : This parameter is used to limit the size of the substruc-tures that are considered. Size refers to the number of ver-tices in the substructure. A minimum and maximum value is specified that determines the range of the size parameter.
The eMailSift system aims at automating the process of email classification. It uses graph mining techniques to clas-sify emails into the corresponding folders. The overall flow is as shown in Fig. 1 and a brief description of each process-ing step is given below.

Folder Pre-processing: The emails in a given folder form the training set for generating interesting and repetitive pat-terns once the stop words have been eliminated. Stop word removal is performed during folder pre-processing and the same is also carried out on the incoming email to elimi-nate commonly occurring words that carry no special mean-ing. As part of pre-processing, various characteristics of the email folder are extracted in order to derive the optimal set of parameters for substructure discovery. The average email size in a folder, the number of words retained from each
Figure 1. eMailSift Mail Classification System email are examples of folder characteristics. The resulting email is finally converted into a chosen graph representation for classification.

Graph Representation: The next step is to choose a graph representation that is appropriate for the email do-main and use it for representing the emails in a folder. Emails have a definite common structure in terms of their content (e.g., the from, to, and subject fields). We will dis-cuss two graph schemes, one that lends itself to general text classification and the second that is tailored for email clas-sification.

Substructure Extraction: Graph mining techniques are used for extracting representative substructures. The sub-structure discovery process is driven by parameters derived from the folder characteristics.

Representative Substructure Pruning: The output of the discovery process may contain a large number of substruc-tures. Retaining all of them may not be necessary and the goal of pruning is to identify the subset needed for discrim-inating incoming emails during classification.

Representative Substructure Ranking: It is important to discriminate among the set of pruned representatives from the viewpoint of classification. Each representative sub-structure is ranked to indicate its representativeness and the associated rank is used in classifying incoming emails. Certainly, there is a difference between an incoming email matching a highly ranked substructure versus an average one. This is important when incoming emails are classified into multiple folders.

Classification: The incoming email is compared with the representative substructures of a folder to determine if it matches any of the representative substructures. If a match is found the email is classified to the corresponding folder. For multiple folder classification, in case of more than one match, the ranks associated with the matched substructures are used for resolving the folder to which the email is to be classified. It is classified into the folder with the highest ranked substructure match.
This section presents a detailed discussion of each step in the classification process. The influence of folder charac-teristics and their mapping into parameters that affect sub-structure discovery along with the rationale for the choice of parameters and alternatives considered are discussed.
Prior to the generation of the input graph for a folder, the emails in the same are processed to eliminate stop words. Since the goal is to retain substructures that are frequent across emails in a given folder, the terms that comprise the substructures have to be frequent as well and should appear across emails in a folder. This choice of retaining words that are common across emails takes care of the disparity in mail length, as some emails are considerably longer than oth-ers. Words are ranked based on their occurrence frequency across all emails in a folder and those whose frequencies ac-count for more than f % of the sum of all frequencies are re-tained. The rationale behind this is to study the effect of  X  f  X  on classification. Currently, this parameter is set to 80%. To construct the graph, only those words in the message body that are a member of this frequent set are used. This ensures the words chosen are frequent across a substantial number of emails in the folder.
The first step in discovering representative patterns is to transform the emails into a graph format for mining. As we believe our current approach can be useful for general doc-ument classification, a canonical representation that can be used for all types of text has been proposed. It is a simple star-graph representation that consists of a central anchor vertex, with the chosen words from the document form-ing the remaining vertices. These are connected by edges to the central vertex with a descriptive edge label such as contains . The scheme of Fig. 2 shows such a represen-tation where the edge labels used are from , subject , to and contains to differentiate between the various signifi-cant components of an email. All the experimental results reported in this paper are using this representation, which shows the effectiveness of this approach even with a canon-ical graph representation.

Other representations are possible. The representation in Fig. 3 corresponds to the scheme specifically customized for representing emails in graph form. The representation differentiates between the email headers and the contents of the email body. It can be used to study classification using either headers only or all the information present in the email.
Our goal is to identify representative structures of a given folder. In order to achieve this, we have to choose a number of appropriate input parameters to guide the Subdue algo-rithm (such as beam , threshold and others). We believe that the folder itself needs to be used as a source for de-riving these parameters as folders vary in their characteris-tics. This way, the representative structures generated will be customized to a folder and not based on a fixed set of parameter values. These parameters must be tunable and be effective for diverse email and folder characteristics. Below, we discuss the key characteristics of email folders that we believe are useful for substructure discovery and how they can be derived.
 Average Email Size and Threshold: The threshold pa-rameter determines the amount of inexactness allowed dur-ing substructure discovery. During inexact graph match, it determines the number of vertices and edges that can vary among instances of the same substructure. The actual num-ber is determined by ( num of vertices + num of edges )  X  threshold (1)
Since each email in a folder has a different size (even af-ter pre-processing), we use the average email size as one of the characteristics of a folder. We argue that a low value of threshold allows for a significant amount of inexact-ness while comparing substructure instances of emails that contain a greater a number of words in the message body. This is because, for a large email body, even with a low threshold , the actual value as determined by equation 1 will allow a reasonable amount of inexactness. This ensures that similar substructures with slight variations are identi-fied. For emails with smaller message bodies and hence fewer vertices in the input graph representation, a larger value of threshold is required for inexact match that allows similar number of variations as in the former case. Using the size of the emails in a folder, we can always determine the amount of inexactness to allow for graph match. If the amount of inexactness to be allowed in terms of the number of edge/vertex label variations is  X  i  X , the particular value of threshold is obtained by where, avg ms is the average size of messages in a folder.
Here, we have interpreted the average email size as a parameter that affects pattern discovery and used it to de-rive the value of the threshold that allows for a reasonable amount of variation.
 Average Email &amp; Folder Size Vs. Number of Substruc-tures: The number of substructures returned by Subdue as the set of best substructures is limited by the parameter nsubs . To ensure that the representative set consists of sub-structures that characterize the folder, the number of sub-structures to be returned by the discovery process has to be derived from the folder characteristics. If the average size of the emails in a folder is large, then the number of sub-graphs is also large. Similarly, if there are a large number of emails in a folder, there probably are a large number of substructure instances as well as substructures themselves that characterize the folder. The above two folder and email characteristics are used to derive the number of substruc-tures as given by the following: where, F s is the size of the folder and w 1 is the weighting factor applied to the same avg ms is the average size of the messages in the folder w 2 is the weight applied to the average email size As is evident, the effect of folder size is pronounced with increased weight assignment for the same. The particular numeric value for w 1 depends upon the size of the folder under consideration. We have discriminated folders into small (less than 60 emails), medium (61 to 200) and large (greater than 200 emails) depending upon their sizes. Due to space constraints the discussion for small folders is pre-sented here. Since Subdue picks substructures based on their ability to compress the original graph, for a small folder, large substructures despite their low frequencies are picked as best substructures, since abstracting even their few instances results in greater compression of the original graph. To ensure that comparatively smaller sized repetitive substructures are picked, a large value of nsubs is required. Also, as the average email size increases, the probability of an increase in the number of substructures is higher. There-fore, we arrive at the following weights for w 1 and w 2
Similar weight measures specific to medium and large sized folders have also been derived by experimentation. Beam size: Beam determines the number of best substruc-tures retained at the end of each iteration of the discovery algorithm. The value of the beam chosen is in proportion to folder size. Large sized folders typically contain many patterns owing to the large number of emails. Also, ac-cumulation of email in folders may lead to heterogeneous folder content, making it to hard to identify and associate definite patterns with the folder. Hence, a relatively large value of beam is required to guarantee interesting substruc-ture discovery. A low value of beam will result in the loss of some interesting substructures as they will not get a chance to be evaluated in subsequent iterations of the discovery al-gorithm. Experiments employing beam sizes of 2, 4, 6, 8, 10 and 12 were performed on the experimental folders. De-pending upon folder size in almost all cases, a beam value of 12 worked well for large folders. For small and medium sized folders, beam values that returned good results were 2 and 4 respectively. A larger value of beam for these folders only leads to increased computation time and extra process-ing in terms of pruning the unnecessary substructures. Substructure size Vs. Minsize: Substructures that are common across email folders do not help in the classifica-tion process as they provide no discriminating capability. The substructure size can be constrained above a minimum size to pick substructures that contain something more than a common  X  X ore X . From the graph representation of Fig 3, it can be inferred that the smallest sized substructure will contain at least four vertices. These are the root, header, and at least two among the  X  X o X ,  X  X rom X ,  X  X ender X ,  X  X c X  ad-dress fields and the  X  X ubject X  field if all the other fields are different. Substructures smaller than this are common to all emails within a folder and also across all folders. There-fore, we constrain the minimum size of the substructures reported to be 4. This constraint needs to be determined from the graph representation scheme employed. Applying the same argument, for the representation shown in Fig. 2, the minimum size of the substructure should be 3. Substructure Pruning and Ranking: A large number of substructures are returned as part of the discovery process, however, they are all not interesting from the viewpoint of classification. Inexact graph match returns substructures similar to others in terms of occurrence frequency and sub-structure size, while varying in one or more vertex or edge descriptions. Retaining several structures which have the same frequency and size and vary slightly will not con-tribute to classification especially when inexact match is used. Also, since the discovery algorithm uses compression as a heuristic it identifies certain large substructures that do not occur very frequently. It is necessary to prune this set of substructures to retain those that are true representatives of a folder and to save space along with reduction in compu-tation during classification. To prune the possibly large set of substructures, only those that differ in frequency and size are retained. Also, substructures with very low frequencies as compared to the folder size are eliminated from consid-eration as potential representative substructures.
The representative substructures are then ranked based on the frequency of occurrence, average email size and sub-structure size. Substructures with sizes comparable to the average email size and which cover a reasonable number of emails are preferred, as this signifies correlation with folder contents. The rank R s of each substructure is computed by the following equation and reflects the need for ranking substructures based upon frequency and size.
 where, S s is the size of the substructure avg ms is the average email size of the emails in the folder f is the occurrence frequency of the substructure and f
L is the frequency of the most repeated substructure
The best n substructures that are chosen as representa-tive substructures are ranked as explained previously. Obvi-ously, n varies with the folder and average email size. These ranked representative substructures are then used for classi-fication. Each incoming email is compared with the set of ranked representative substructures of all folders. As with the generation of representative pattern subgraphs, inexact graph match is used for comparison. The email is filed to the corresponding folder if a match occurs. Since, the rep-resentative substructures of each folder are ranked, in case of multiple matches, the email is filed to the folder with the highest ranked substructure match signifying higher corre-lation with the folder contents.
The eMailSift system hasbeen implemented in Perl. The input to the system consists of one or more folders and a number of parameters such as the split for cross validation, choice of graph representation, beam value etc. The proto-type pre-processes the folders, generates graphs, computes the various parameters and invokes the discovery algorithm. The generated output is pruned and ranked for classifica-tion. The outcome along with a number of other values gen-erated are logged for further analysis. The experiments have been carried out on Pentium Xeon 2.66 Ghz dual processor machine with 2GB memory.

We have used several folders whose total size varies from 10 to 470 odd emails to ascertain that the classification is not specific to a particular folder or a particular size of the folder. In addition, these folders were selected from pub-lic listserv X  X  and personal emails to provide diversity in the way they have been classified by humans. Extensive ex-periments were carried out to compare the performance of eMailSift with that of the probability based naive Bayesian classifier. Here, we are able to present only a subset of the experimental results due to space constraints. The accuracy metric used for evaluation purposes is defined as the per-centage of correct category assignments to the total number of emails to be classified.
The results of the comparison of eMailSift (using inex-act graph match) with the probability based naive Bayesian classifier is presented below. The naive Bayes classifier pre-dicts the correct class for an unknown sample based on its feature vector. Despite the simplifying assumption of term independence that is made, the naive Bayes classifier does fairly well.
The performance of eMailSift is consistent irrespective of the size of the email folder. It performs well for large sized folders that have heterogenous content and simillarly for spare folders. In cases where naive Bayes performs bet-ter, it is only marginally better. Also, naive Bayes fails to classify incoming emails for some folders, whereas eMail-Sift performs better. In summary, as is evident from the plot of the Fig. 4, the performance of eMailSift is much better than naive Bayes and it is consistent in successfully classi-fying incoming emails. Naive Bayes assigns probabilities to word occurrences. Terms that are common to many fold-ers and have a higher weight assignment in one folder will outweigh the others during classification leading to wrong results. eMailSift on the other hand, works with looking for patterns of word occurrences and avoids this problem.
The ability to match inexactly is important, especially in the email domain, mostly because emails do not corre-spond to a set vocabulary and the information content of emails is low as compared to documents. Therefore, it is very hard to find exact pattern matches and the ability to in-exactly match instances becomes significant. Experiments were conducted to study classification using exact and in-exact graph match and the results are shown in the graph of Fig. 5. Exact graph match works well with fairly good clas-sification accuracy. Inexact graph match improves upon the classification as is evident from the graph. For sparse fold-Figure 5. Exact Graph Match Vs. Inexact
Graph Match ers, usage of inexact graph match enabled successful clas-sification of test emails as opposed to exact match, which did not do well on sparse folders. This reinforces our ar-gument for using inexact graph match to better classifica-tion accuracy. In addition, inexact graph match also worked well for large sized folders. Despite heterogeneous email content, inexact graph match is capable of grouping sub-structure instances that vary within specified bounds. This differs from exact match which groups instances that are identical, something that is hard to come by in large folders with diverse content.
The eMailSift classifier works well on folders of all sizes. With an increase in folder size, leading to an increase in the heterogeneity of a folder, the classification accuracy remains good as shown in the graph of Fig. 6.

This experiment was conducted on the same folder by adding emails to increase the size of the folder. An increase in folder size is reflected as a variation in folder character-istics  X  folder size and average email size. The computation Figure 6. Classification Accuracy Vs. Folder
Size of these parameters and their subsequent interpretation in determining the parameters for substructure discovery en-sures that the representative substructures returned cover a significant amount of similarities present in a folder. Het-erogeneity of folder contents with accumulation of email does not pose a problem. The same argument is true with the reduction of folder contents. In essence, since the rep-resentative substructures of a folder are derived from the folder characteristics themselves, any change in the folder contents will lead to a corresponding change in the repre-sentative set. Hence, our approach ensures that during clas-sification the representative set used characterizes the cur-rent folder contents. This is also seen in the plot of Fig. 7, where the results of classification using two different splits of the training set are shown. The classifier is trained on 80/60 percent of the emails and the remaining 20/40 per-cent are used for classification. From the graph it is evident that decrease or increase in training set size does not ad-versely affect classification accuracy and the performance of eMailSift remains consistent. However, additional analy-sis/experimentation is needed to characterize and derive the training set size for a given folder.
Intuitively, many users classify emails based on header information. The information contained within the body serves to augment that contained in the headers and can be used to refine the classification. Experiments were con-ducted to compare classification using the information con-tained only in the email headers versus the information con-tained both in the email headers as well as the message body. Our experiments reveal a fair amount of classification using information present only in the email headers as can be seen in Fig. 8. While the classification using headers is fair in this case, it might not be so in general. For instance, if the correspondence of a user is from a limited clientele, but covers a range of issues, classification with the information contained within the header may not be sufficient by itself to enable good classification. We therefore deduce that in-formation within the body is required to correctly classify emails in a majority of cases. Since some of the folders are classified better with the header information only, addi-tional analysis and research is required to decide whether a folder can be analyzed to predict if only the header or both header and body should be used for classification. Desiderata: The performance of eMailSift is good for a variety of folder and email characteristics. The classifier performs well in the absence of a large training set and ex-hibits good classification accuracy even with an increase in folder size. eMailSift was up to the challenge and returned good classification for large-sized folders due to its ability to discover associations and allow some leeway both while grouping instances and also during classification. with a re-duced feature set was comparable to the classification using a larger feature set. This is important to enable good classi-fication for folders where In summary, the performance of eMailSift is consistent over various folders and email traits and we are able to validate our premise for the adaptation of mining techniques for classification. For additional details, please refer to [1]
In summary, we have proposed an innovative approach for email classification using graph mining and the viabil-ity of the same has been established. A detailed analysis of parameters that affect the classification process has been presented and the experimental results validate the effec-tiveness of our approach. We believe that the technique is applicable for general document and web page classifica-tion as well and intend to extend our work in that direction. We are also investigating the efficiency of this approach as compared to traditional approaches and means for improv-ing it.

