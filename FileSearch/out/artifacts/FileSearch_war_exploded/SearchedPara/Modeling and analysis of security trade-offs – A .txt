 1. Introduction  X  X  X ecurity is about trade-offs, not absolutes.  X  Ravi Sandhu
In designing software systems, security is typically only one design objective among many. Security safeguards may con-flict with usability, performance, and even functionality. For example, if usability concerns are not addressed in the design of a secure system, users respond by circumventing security mechanisms [1,2]. Achieving a balance between the intrusiveness of security mechanisms [3] and usability goals is an important consideration in designing successful secure software sys-tems. Security goals can have their own contradictions because confidentiality, integrity, privacy, accountability, availability, and recovery from security attacks often conflict fundamentally. For example, accountability requires a strong audit trail and end-user authentication, which conflicts with privacy needs for user anonymity [3].

Ultimately, security is about balancing the trade-offs among the competing goals of multiple actors to achieve a  X  X  X ood enough X  security. In current practice, security designers often adopt security mechanisms such as firewalls, access control, or encryption without explicit recognition of, and systematic treatment of competing design objectives originating from var-ious stakeholders. While risk assessment methods such as [4,5] address balancing the costs and effects of security solutions to achieve good enough security, assuming security costs and benefits are measurable, this paper focuses on qualitatively analyzing trade-offs that security goals and alternative security solutions impose on other quality objectives.
This question then arises: what conceptual modeling techniques can be used to help designers analyze security trade-offs to achieve  X  X  X ood enough X  security? To our knowledge, existing conceptual modeling techniques for modeling security-re-lated information and trade-off analysis techniques do not raise and answer this question.

The remaining parts of this paper are structured as follows. In Section 2, we consider the criteria for a suitable conceptual modeling technique for dealing with security trade-offs. In Section 3, a number of existing approaches to security trade-off analysis are reviewed and compared to the introduced criteria. From analyzing the limitations of existing methods, in Section 4, we propose a conceptual modeling technique for modeling and analyzing security trade-offs in a multi-actor setting. The meta-model of security concepts is introduced as well. In Section 5, we describe the goal model evaluation and trade-off analysis technique. Section 6 summarizes the results of some case studies. Finally, Section 7 discusses the results and lim-itations of the approach. 2. Conceptual modeling criteria for security trade-offs analysis
Trade-off analysis is a systematic examination of the advantages and disadvantages of requirements and/or design choices for a system to achieve the right balance among several competing goals [6]. When some goals are not sufficiently satisfied, designers need to explore further alternatives that can better achieve those goals, without detrimentally hurting the others.
Each potential solution can have positive effects on the achievements of some goals while having negative effects on others. A careful and systematic process for security trade-off analysis can be very challenging, because to resolve security trade-offs one need to consider competing goals of multiple stakeholders, risk of attacks, security countermeasure, and their impacts.
In this context, we ask: what are the criteria for a proper conceptual modeling technique for dealing with security trade-offs? What concepts need to be modeled, and how are they involved in the trade-off analysis? In many engineering disci-plines, trade-offs are analyzed using detailed mathematical models. However, in designing secure software systems, multiple stakeholders with diverse, incommensurable, and competing goals impose security trade-offs that cannot be reduced easily to mathematical functions. Conceptual modeling techniques, on the other hand, offer the possibility of analyzing the factors that contribute to trade-offs and their structural compositions and relationships.

The conceptual foundation for trade-off modeling needs to convey the idea that attempting to improve one quality can adversely affect other quality objectives. Therefore, the conceptual modeling technique needs to provide conceptual con-structs to express: (1) design goals and objectives, alternative operationalizations to achieve the objectives, and the impacts of alternative operationalizations on goals and solutions; (2) actors who seek alternative design solutions to achieve their individual goals and objectives. Furthermore, security objectives are not affected only by alternative security solutions and operationalizations of quality goals. In case of security goals, the trade-off constructs need to express; (3) threat of exter-nal/internal actors and vulnerabilities that impact security and other requirements.
 Design goals and objectives
Security and other trade-offs take root from conflicts among design objectives that originate from stakeholder goals. While selecting a security solution among alternatives is difficult, the more fundamental problem is that designers need to decide about alternate security mechanisms subject to multiple factors such as cost, time-to-market, various non-functional require-ments (NFRs), security policies, standards, and individual goals of various stakeholders. Therefore, the conceptual foundation for expressing trade-offs needs to provide means for modeling stakeholders X  goals and design objectives. By modeling the alternative solutions that operationalize the objectives and structuring the impact of operationalizations on the goals, one can analyze what causes trade-offs among objectives. To resolve the trade-offs, the model needs to express the extents to which design objectives are satisfied or denied. The extents or measures could be quantitative or qualitative. Quantitative ap-proaches can greatly simplify decision making, but can be difficult to apply due to lack of agreed metrics, subjective quality requirements, or unavailability of accurate measures in the early stages of the system development. The modeling technique should be able to support analysis despite inaccurate, incomplete, or subjective knowledge about goals as well. Actors
Design objectives typically originate from multiple sources and stakeholders such as the system X  X  users, administrators, top managers, project managers, and customers. The conceptual modeling technique needs to consider multiple actors that impose competing goals on the designer. The modeling technique should be able to model trade-offs that occur within a sin-gle actor or across multiple actors.
 Security-specific concepts
Security requirements are needed because of the threat of malicious actors. Achievement of security objectives are affected by threats of internal or external actors and existence of vulnerabilities in system design. Trade-offs cannot be resolved without relating the impacts of attacks and exploitation of vulnerabilities on the systems functionality and quality objectives. Therefore, the conceptual modeling technique for modeling security trade-off needs to model security-specific concepts such as threats and vulnerabilities. In addition, decision makers need an expression of the security benefits of the solutions [7] to compare their trade-offs. Hence, the modeling technique should provide means to model to what extent at-tacks are successful, how attacks affect stakeholders X  and design goals, and how countermeasures protect the stakeholders X  goals against the threats. 3. Existing approaches to security modeling and trade-offs
Security requirements engineering frameworks derive security requirements based on security-specific concepts such as assets, threats, and vulnerabilities, taken from the security engineering domain. To incorporate security-related aspects into the requirements engineering and software design processes, different approaches tackle the security requirements from dif-ferent viewpoints.
 Attack modeling techniques
Some approaches such as Attack Tree [8] and Attack Graph [9] focus on modeling attacks and adversaries. Approaches such as misuse cases invert the normal functionalities of the system to express the misuses and malicious behavior. As pro-posed by Sindre and Opdahl [10], a misuse case is a use case from the point of view of a hostile actor which poses a threat to the system. They claim that looking at systems from a misuser perspective increases the chance of discovering threats that would otherwise be ignored.

The misuse case approach is adopted by Alexander [6] for trade-off analysis. Alexander asserts that the misuse case ap-proach accurately visualizes the structure of the situation in a way that emphasizes the essential points of conflicts and trade-offs; therefore, use/misuse case representation may make trade-off analysis and human judgments more informed and systematic. Another similar approach is the notion of abuse case, proposed by McDermott and Fox [11], which helps to model a type of interaction between a system and actors where the results of the interaction are harmful to the system.
Another example of inverting normal behavior for analyzing security attacks is the notion of anti-goals. Van Lamsweerde [12] proposes a goal oriented framework for generating and resolving obstacles to achieve goals. The malicious obstacles, called anti-goals, are set up by the attackers to threaten security goals. The anti-goals are refined to form a threat tree, in which the leaf nodes are either software vulnerabilities or anti-requirements. New security requirements are then obtained as countermeasures.
 Security goals and requirements modeling
Some approaches focus on modeling security-related information, security requirements, and security goals. The UMLsec modeling language [13] is an example of a security-specific conceptual modeling approach for modeling security require-ments and security-specific information. The main uses of this approach are first, to encapsulate knowledge and make it available to developers in the form of a widely used design notation, and secondly, to provide formal evaluation to check if the constraints associated with the UMLsec stereotypes are fulfilled in a given specification.
 SecureUML is another UML-based modeling language for the model-driven development of secure distributed systems.
SecureUML takes advantage of Role-Based Access Control (RBAC) for specifying authorization constraints by defining a vocabulary for annotating UML models with information relevant to access control [14]. The SecureUML meta-model is de-fined as an extension of the UML meta-model, and the concepts of RBAC are represented directly as meta-model types. Goal and agent oriented modeling and analysis
In addition to attacks and protection aspects, security requirements are derived from analysis of interactions and depen-dencies of social actors in the organizational contexts [17,18] . Such considerations to derive security requirements bring other related issues such as trust, ownership, permission and delegation among actors to the security requirements model-ing and analysis process [19,20] .

Agent and goal oriented approaches describe systems as intentional agents that depend on each other or compete to achieve their goals. In recent years, such approaches in requirements engineering have emerged for analyzing and designing complex information systems. Examples of goal oriented frameworks are KAOS [21] and the NFR framework [22]. Agent ori-ented approaches include the i * [23] and Tropos [24] frameworks. Several approaches such as [17 X 19,25 X 27] propose frame-works for modeling and analyzing security concepts by taking advantage of agent and goal oriented techniques. The majority of these approaches employ qualitative goal evaluation, while [25] suggests a quantitative approach for analyzing security requirements.
 Risk analysis and decision making
Risk analysis has been considered as an important activity of security requirements engineering and secure software design. The risk-based security requirements engineering framework in [15] is concerned with integrating requirements engineering practices with security engineering and interleaving requirements and architecture design by adopting risk analysis practices as a key activity. The approach aims to analyze the impacts of threats on the business by linking the risk impacts with the business value.

The CORAS framework [4] provides another UML profile for risk assessment. The proposed profile defines UML stereo-types and rules for specialized UML diagrams to support of model-based risk assessment. Asset diagram is proposed to iden-tify assets; threat diagram captures unwanted incidents causing loss in asset value. State analysis diagram is proposed to estimate and document the frequency and consequence of the unwanted incidents, and treatment diagrams are models ex-tended with specialized use cases representing treatments.

Another approach for deciding on security requirements and design is proposed in [16], where probabilistic inference on security influence diagrams and Bayesian Networks are used to support trade-off analysis. In this work, authors discuss the criteria of the language for security requirements modeling and analyzing. They assert that the language should be able to represent decision X  X  maker goals, domain of control, and causal relation between goals (indirect and controlled).
The above survey of security-related modeling notations and security requirements frameworks reveals that existing security conceptual modeling techniques do not consider trade-offs between security and other quality objectives explicitly.
While trade-off analysis is considered in the misuse case approach of Alexander [6], use/misuse cases do not express quality requirements, their operationalizations, and impacts. More generally, trade-off analysis has been considered in a few soft-ware engineering research efforts. Trade-offs are mostly considered between alternative architecture and design solutions in contributions such as Architecture Tradeoff Analysis Method (ATAM) [28] and Cost-Benefit Architecture Analysis (CBAM) [28], Aspect-Oriented Risk-Driven Development (AORDD) [29], and Security Verification and security solution Design Trade-off analysis (SVDT) [7]. Although these approaches do not provide a conceptual modeling framework for expressing trade-offs, studying the decision making process in these approaches is of interest for extracting the criteria for a conceptual mod-eling framework that enables trade-off analysis.

In what follows, we study Architecture Tradeoff Analysis Method (ATAM) and Cost-Benefit Analysis Method (CBAM) [28] as general purpose and widely used architectural trade-off analysis methods which consider security as one of the quality scenarios. SVDT and AORDD are studied as security-specific methods and the representatives of quantitative analysis meth-ods based on probabilistic reasoning. Since the proposal for security trade-offs modeling and analysis in this paper is based on expressing competing goals of multiple actors, we finally study whether the existing agent and goal oriented approaches provide the required conceptual modeling basis for expressing trade-offs. 3.1. ATAM and CBAM essence
Bass et al. [28] introduce a framework for modeling quality attributes and architectural alternative designs using the no-tion of scenarios and tactics, respectively. A quality attribute scenario is a quality attribute-specific requirement, and consists of six parts: source of stimulus, stimulus, environment, artifact, response, and response measure. Achievement of quality sce-narios relies on tactics.

ATAM is a labor-intensive evaluation method to analyze whether an architecture decision satisfies particular quality goals. ATAM helps designers to prioritize scenarios and evaluate alternative tactics using a  X  X  X uality Attribute Utility Tree X .
Scenarios that have at least one high priority of importance or difficulty are chosen for a detail analysis to examine if the selected tactics satisfy the scenario.

The result of the ATAM analysis is an  X  X  X rchitectural Approach Analysis X  table for each quality scenario. In this table, eval-uators identify and record sensitivity, trade-off, risks and non-risks points of alternative tactics for satisfying a scenario. Sen-sitivity and trade-off points are architectural decisions that have effect on one or more quality attributes, the former positively and the latter negatively. In ATAM, a risk is defined as an architectural decision that may lead to undesirable con-sequences. Similarly, a nonrisk is an architectural decision that, upon analysis, is considered safe. The conceptual elements related to trade-offs in ATAM may be captured in a meta-model as in Fig. 1 .
 CBAM [28] picks up where ATAM leaves off. It takes ATAM outputs as input and adds cost factors to the trade-off analysis.
CBAM uses scenarios as a way to concretely express specific quality attributes. Stakeholders vote for scenarios to select the top priority scenarios for further analysis. Stakeholders assign the value for calculating stimulus-response utility per each scenario, which helps to create the utility-response curves. The utility is based on the importance of each scenario and its response value. The overall utility is combined with the project cost of an architectural strategy to calculate the final Return
On Investment (ROI) measure. The ROI value for each architectural strategy is the ratio of the total benefit to the cost. Using the ROI value, the architectural strategies can be rank-ordered and compared, and a final decision made. 3.2. SVDT and AORDD approach Houmb et al. [7] propose the Security Verification and security solution Design Trade-off analysis (SVDT) approach using UMLsec for modeling security solutions and Bayesian Belief Network (BBN) as the basis of trade-off analysis implementation.
UMLsec is used to verify if the design solutions satisfy the security requirements. Design solutions that pass the verification are then evaluated using security solution design trade-off analysis.
 The SVDT approach is a complementary work on Aspect-Oriented Risk-Driven Development (AORDD) framework [29].
AORDD framework provides risk assessment process and cost-benefit trade-off analysis. Both SVDT and AORDD trade-off analysis methods compute Return on Security Investment (RoSI) using BBN. Fig. 2 illustrates the relationship between the main concepts involved in AORDD risk assessment, which specifies the structure of the inputs to the AORDD cost-benefit trade-off analysis and the topology of the BBN.

The result of risk assessment is a list of misuses which need security treatments. This list and a list of alternative security treatments are fed into the BBN to compute the RoSI. RoSI is computed using a set of trade-off parameters, such as priorities, security risk acceptance criteria, standards, laws and regulations, policies, business goals, budget, and time-to-market. RoSI for a particular solution is derived by evaluating the effect and cost of the solution against the security requirements, and the misuse impact and frequency [7].
The proposed approaches in [17 X 19,26,27] take advantage of the i * and Tropos frameworks for modeling and analyzing security requirements. In these approaches, systems are modeled as intentional agents collaborating or competing with each other to achieve their goals. Security issues arise when some actors, while striving to achieve their own goals, intentionally or unintentionally threaten other actors X  goals; therefore, agent and goal oriented approaches provide a suitable basis for dealing with security.

The approach in [17] suggests using relationships among strategic actors for analyzing security requirements. In [17], po-tential attackers of the systems are distinguished from other actors. Liu et al. [18] analyze attackers, dependency vulnerabil-ities among actors, countermeasure, and access control using the i * modeling framework. In [19], a framework known as
Secure Tropos for modeling and analyzing security requirements based on the notions of trust, ownership, and permission delegation is developed. In [26,27] , the  X  X  X hreat X  and  X  X  X ecurity constraint X  modeling elements are added to the i * meta-model.
Threat elements are employed in the  X  X  X ecurity diagram X  to express potential violation against the security goals, and security constraints are used to impose security requirements on actors X  dependencies. The meta-model of related concepts to the
Tropos goal model, which is the core of all these approaches, is depicted in Fig. 3 . 3.4. Discussion and limitations of the surveyed approaches
ATAM and CBAM provides a labor-intensive method for deciding on alternative architecture design, and AORDD and SVDT are designed for comparing alternative security solutions based on the solution costs and benefits, potential misuse effects and probability, and trade-off parameters. In these two groups of work, trade-offs are expressed at different levels of explic-itness. In the ATAM and CBAM approaches, trade-offs are listed in a table rather than expressed by models, formulas, or a computation mechanism. Trade-offs are analyzed by an architecture expert who evaluates each design tactic in terms of its costs and benefits. In the AORDD and SVDT methods, the trade-off model is developed by the BBN designer instead of the target system designers and analysts. In this way, a single fixed formulation of relationships between trade-off param-eters are reused for multiple projects.

In the ATAM approach, trade-offs among quality scenarios and tactics in the  X  X  X rchitectural Approach Analysis X  table are expressed indirectly and implicitly. In this table, for each scenario alternative tactics are analyzed. However, the impacts of tactics are analyzed on one specific scenario rather across multiple scenarios. Moreover, ATAM does not incorporate the de-gree of sensitivity or trade-off between tactics and qualities in the analysis procedure, since the  X  X  X rchitectural Approach
Analysis X  table does not provide means for expressing the impact of tactics on stimuli (attacks) and does not specify the con-sequences of applying a solution on other quality scenarios. The ATAM process does not separately capture the impact of each tactic on stimuli of security scenarios (attacks).

ATAM does not consider cost as a trade-off factor that usually has the highest priority over the other factors. CBAM is proposed to address this weakness. The CBAM approach to trade-off analysis requires the designer to obtain accurate quan-titative measures of current response and expected response of architectural strategies for each affected scenarios. The major obstacle toward applying CBAM would be unavailability and inaccuracy of such measures in the early stages of development and lack of agreement on metrics and measurement methods.

CBAM relies on the utility values gathered from votes of various stakeholders through consensus. In this way, CBAM re-solves the conflict of goals among stakeholders by computing the ROI of each strategy based on their votes for utility of each strategy. However, the accuracy and reliability of the utility values and stakeholders X  confidence in their votes is an issue in validity of CBAM analysis. Finally, the ATAM and CBAM methods are not designed for security trade-off analysis and the im-pact of other forces such as attacks and vulnerabilities are not explicitly incorporated into the analysis.
SVDT and AORDD are specifically designed for making security trade-offs, relying on a pre-defined probabilistic reasoning model of trade-offs in the form of a BBN. This requires the software designers to obtain quantitative measures or qualitative scales of the impacts of the misuses and solutions. The major limitation is the inaccuracy or unavailability of quantitative data on the impact of misuses and solutions especially in the early stages of the development lifecycle.

Generally, the suggested BBN topologies in [7] do not consider a general source of trade-off inputs such as NFRs and func-tionalities. The single value of RoSI does not indicate what quality objectives are achieved or failed. The input trade-off parameters of the designed BBN are limited to factors such as budget, time-to-market, laws and regulation, which had been designed and incorporated into the BBN topology. It is assumed that a single topology that is designed for trade-off analysis would be applicable in every context.
 The final result of the trade-off analysis is a number (RoSI), indicating the return on investment for each security solution.
Although automatic computation of RoSI using the trade-off inputs and parameters fed into the BBN is efficient and desir-able, the designers and analysts do not have explicit traces to follow what aspects of the design caused the difference in the final result of RoSI. In other words, the only metric to compare two alternative security solutions is the RoSI values for those solutions, which makes it difficult to judge the impact of multiple contributing factors of alternative different design solu-tions. In addition, if the system designers and analysts need to trace the impact of changes in BBN parameters, they need to learn about the topology of the BBN which they have not designed.

Table 1 summarizes a comparison of the ATAM/CBAM and AORDD/SVDT approaches based on the evaluation criteria dis-cussed in Section 2. The third column compares the conceptual modeling constructs that agent and goal oriented approaches provide for expressing trade-offs among design objectives.

Agent and goal oriented approaches such as [17 X 19,26,27] provide the conceptual basis for security trade-off modeling and analysis. However, a mechanism for security trade-offs analysis is not elaborated in these frameworks. The method in [18] lacks a direct and explicit way to model the competition among malicious and non-malicious actors X  goals. In this approach, trade-off modeling among goals is limited to the non-malicious actors. The proposed framework in [19] does not support modeling malicious behavior. In [26,27] , threats are modeled in the security diagram, but the model does not trace security goals or threats to the source actors. This approach does not consider modeling the relation between counter-measures and attacks. Although security trade-offs can be expressed by the goal oriented methods, the approaches over-viewed do not consider security trade-offs explicitly. 4. The security trade-offs modeling notation
We propose a meta-model of security concepts for systematically addressing security trade-offs, considering the limita-tions of existing approaches and reviewing well known security knowledge sources such as NIST guidelines, standards like [31], CERT [32], and widely used textbooks such as [33,34] . Fig. 4 depicts the meta-model of security concepts where the core concepts are actors and goals. Actors employ mechanisms or attacks to achieve their goals or malicious goals, protect assets, patch or exploit the vulnerabilities.

The proposed modeling notation for expressing security trade-offs builds upon the i * framework which provides a nota-tion to model actors , their goals and intentional dependencies and competitions among the actors. Actors achieve goals on their own or depend on each other for goals to be achieved, tasks to be performed, and resources to be furnished. Quality goals, which do not have clear-cut criteria for satisfaction degree, are modeled as softgoals . Means-ends relation between goals and tasks is used to model alternative ways to achieve a goal [35]. Contribution links enable expressing the impact of tasks and (soft)goals on other softgoals. However, the i * notation lacks explicit modeling constructs for concepts such as attacks and vulnerabilities. In this section, we propose some extensions to the i * notation, which provide conceptual struc-tures for modeling and analyzing security trade-offs. Fig. 4 shows how elements of the meta-model are mapped to the i * modeling constructs. In what follows, detailed descriptions of the meta-model elements and corresponding i * modeling ele-ments is given. 4.1. Malicious actor, goals and tasks
Actors depend on, or compete with each other to achieve their goals. Meanwhile, malicious actors try to achieve their own goals. Representing a malicious actor with a different modeling construct in i * was first employed in [17] by highlighting them with a black shadow rectangle. This notation was used to model malicious goals in [18]. We make use of this notation in which malicious goals, softgoals, tasks, and actors are highlighted by a black shadow rectangle. By distinguishing mali-cious modeling elements from non-malicious ones, we emphasize studying the attackers X  goals and tasks. Although attack-er X  X  behavior might be partially unknown and generic, an important aspect of trade-off analysis depends on studying attackers X  options and the risks they pose to other actors X  goals.
 A security threat is any malicious behavior that interferes with the achievement of other actors X  goals. For example, in network or over the Internet. 4.2. Assets and vulnerabilities
An asset is any thing that has a value for the organization [34]. Physical resources, information, and people can be counted as assets. In this way, the concept of asset is well matched with the  X  X  X esource X  modeling element of the i * . Assets can be the services an organization offer or receive, and in this case, can be represented by tasks or goals that actors offer to the  X  X  X epender X  actors.

In security terminology, a vulnerability is any weakness in, or back door to the system [34]. For example, it is said that buffer overflow and password cracking are the most common vulnerabilities of many computer systems [33]. Generally, assets or services bring vulnerabilities to the system, and attackers usually try to achieve malicious goals through exploiting a vul-nerability. In the i * notation, tasks are usually decomposed to goals, softgoals, other tasks, and resources. In this way, the harm from an attack is the cost of the failed task that relies on the compromised assets. In a similar approach in [36,37] , threats are described in terms of assets, the action that exploits the assets, and the subsequent harm.
 provide modeling construct to express vulnerabilities. We add the vulnerability modeling element to i * , accompanied with a graphical representation. For example, in Fig. 5 , to protect confidentially employees are authenticated by the host. Hence,
Password is one of the employees X  assets they need to protect. On the other hand, Password losing is one of the most important vulnerability points in computer systems. Sniffing for password is an attack against the goal of Protect password. Through this attack and Password losing vulnerability, the goal of Fraud under someone else X  X  name can be satisfied, and the attacker gains a valuable asset: the Password . 4.3. Relationship between attacks and security mechanisms
In the i * notation, the relationship between softgoals and other elements is modeled by contribution links [23]. If an ele-ment has a negative impact on a softgoal, yet not enough to prevent it, the contribution link type is  X  X  X urt X  and visualized by  X  X   X . If the element is sufficient to prevent a softgoal, the contribution link type is called  X  X  break X  and represented by  X  X   X .
This qualitative approach is used to model the impact of attacks on softgoals and the impact of security mechanisms on mali-cious tasks and goals. In security engineering, various mechanisms have different effects on attacks. Contribution of mech-anisms to attacks are categorized as (1) Prevent; (2) Detect; (3) Recover [34].

These categories are added as attributes of the contribution links.  X  X  X etect X  and  X  X  X ecover X  contribution links may partially mitigate the effect of attacks. To sufficiently counteract an attack, security mechanisms must be related to the attack with a  X  X  X revent X  contribution link. Mechanisms related to the attacks with Detect contribution links cannot control any attack. Sim-ilarly, Recover contribution links is used to indicate that the mechanism recovers the system after the attack. Recover link would be useful to express availability and integrity goals that rely on recovering the system after the failure. 4.4. Expressing trade-offs using the proposed conceptual structure
The proposed approach provides the means to model goals and trace them back to the source actors. In this approach, trade-offs among goals are modeled by contribution links. Through contribution link types of , , + and ++ [22], the qual-itative effect of alternative solutions are propagated to the other goals and attacks. The i * notation offers the conceptual structure to model trade-offs between sub-goals of high level goals. For example, in Fig. 5 , the employee can Use root password on local machines to completely prevent the attack of Sniffing for password [33]. However, this security solution contributes trade-off among usability and security is modeled through relationships among the corresponding refined sub-goals. 5. Trade-off analysis and decision making
In the previous section, we proposed a conceptual modeling technique for modeling security trade-offs. In this part, we propose a trade-off analysis method for use with the trade-off model. Designers need to balance the trade-offs to mitigate the security risks and yet satisfy the goals of multiple actors. A goal is at risk when it may be denied (partially or fully) by the successful behavior of malicious actors. Partially or fully denial of goals are the result of contribution links of type  X  X   X  and  X  X   X . Designers need to examine available alternative security solutions, and verify the impacts of each one on attacks and goals to finally select the one which fits with goals of multiple actors. Goal model evaluation is the procedure to ensure that actors X  top level goals are satisfied by the choices they have made [38]. The security goal model evaluation, which consists of interactive qualitative reasoning, is based on the method proposed in [22] and refined in [38]. Fig. 6 depicts the proposed security trade-off analysis procedure.

In the first step, evaluator assumes that attackers are successful in performing tasks and satisfying their goals, since attackers are usually external actors that designer has no sure knowledge of their abilities and skills. Therefore, the leaf nodes in attackers X  goal model are labeled fully satisfied. This assumption does not imply that the risk of attacks is definite, as it is possible that evaluation of attackers X  goal model yields to denial of higher goals of attacker. The leaf labels are prop-agated to upper goals. Once the impact of malicious actors X  behavior is propagated to the entire goal model, the evaluator assigns labels to the tasks and goals that operationalize security mechanism (step 7). This label indicates the evaluator X  X  judgment about the success of the corresponding actor in performing a security task or achieving a security goal. This judg-ment could be based on knowledge of previous experiences, empirical studies, or subjective knowledge [7].
 In step 9, the goal model indicates which goals are fully or partially satisfied or denied for the examined security solution.
The procedure iterates until a security design solution is found that, based on the evaluator X  X  perception, satisfies an accept-able configuration of goals. However, the evaluator may prefer to examine further alternatives to select the security design solution that satisfies more goals. After evaluating an alternative, the status of some goals may be unknown, prompting the designer to elaborate the models (step 10). In case of conflict of goals, other alternatives should be examined to resolve the conflicts (step 11).

Propagation of the labels is based on the contribution types and rules summarized in Table 2 . The contribution in [38] provides details about aggregation rules for multiple contributions. The rules provided in Table 2 are merely valid for the
Prevent contribution type, as we discussed earlier that recovering from, or detecting an attack do not lead to controlling the attack. 6. Case studies
For developing the extended i * notation, we worked out a number of examples using NIST guidelines [31] and security engineering knowledge in [33]. In addition to those example cases, we applied the notation to two example cases originally used by other authors to illustrate their similar techniques for doing security modeling and analysis. In the first example case, we modeled and analyzed the Guardian Angel (GA) system [39], a patient and physician supporting system, which was modeled and analyzed in [18]. The second case study is eSAP system, an agent-based health and social care system, which was used as the case study system in [25 X 27] .

The main objective of the case studies is to evaluate and compare existing goal and agent oriented approaches with the proposed method in terms the expressiveness of security models and ability to express security trade-off. The case studies demonstrate how different approaches to modeling and analyzing security aspects would yield different types of analysis and design decisions. In addition, the contribution of current method is distinguished from the previous works. To illustrate the differences, we have borrowed fragments of the original models developed in [25,18] .

In a third example case, we modeled and analyzed a simple course registration system, using the proposed extensions to the i * and the framework proposed in [28]. In this case study, the proposed trade-off analysis method is compared with the
ATAM to study the differences of ATAM procedural analysis and explicit trade-off modeling in the proposed method. 6.1. Case study one: guardian angel project
GA is a patient and physician supporting system using software agents. This information system is centered on the indi-vidual patient instead of the provider, in which a set of  X  X  X uardian angel X  (GA) software agents integrates all health-related concerns about an individual. This personal system will help track, manage, and interpret the subject X  X  health history, and offer advice to both patient (in the case study Abby plays patient role) and provider. Patients provide the medical information to a PDA which is connected to other systems such as the GA-Home , GA-Hospital and peer GA-PDA .

The methodological framework for dealing with security requirements in [18] is illustrated with the examples of design-ing GA software agents. The requirements elicitation process in this approach starts with identifying and modeling actors and their goals and tasks. In parallel, vulnerabilities, malicious actors and intents are identified and integrated into the goal models. Finally, countermeasures for attacks are chosen and added to the models and process ends with countermeasure analysis.

This approach takes advantage of network of Strategic Dependency (SD) to model the dependency among actors and their goals which provides the basis to analyze the opportunities and vulnerabilities. The basic premise for attacker analysis is that all the actors are assumed guilty until proven innocent. In this way, each actor of the goal model can be a potential attacker and is studied in two roles: its regular role and its potential malicious role.

In vulnerability analysis, each dependency is analyzed as a potential threat against the system. One of the actors in the dependency relation is substituted by its corresponding attacker, and vulnerable dependencies are highlighted with a black shadow rectangle. Fig. 7 depicts the dependency vulnerability analysis in [18]. Fig. 8 illustrates the original attack model of
GA system presented in [16]. For each vulnerable dependency, alternative attacks are identified and modeled as tasks that contribute to the malicious goal.

In [18], countermeasures are chosen for each attack. Countermeasures are added to the attacks model, and are related to attacks with a  X  X  X reak X  or  X  X  X urt X  contribution link. Fig. 9 gives the countermeasure analysis model of GA in [18]. The goal model evaluation in original models is limited to the evaluating threats and their corresponding safeguards. The safeguards affect other goals such as performance and usability, but generally, the resulting models in [18] do not capture these trade-offs that security mechanisms impose on other goals.

Fig. 10 depicts the resulting security trade-off model developed using the proposed i * extensions. In this model, the same security mechanisms and goals modeled in Fig. 9 are used to structure the GA-PDA goal model. In this view, potential attacks, malicious goals, and sub-goals are taken into account. This model expressed the impact of on the attacker X  X  goals and the effect of malicious goals and alternative malicious tasks on attacker X  X  goals and softgoals.

Fig. 10 provides explicit model of trade-offs that alternative mechanisms and potential attacks impose. This model provides the designer with a view to potential malicious behavior, alternative protection mechanisms, their trade-offs and consequences. The model provides the security goal model evaluation results as well. The resulting goal model captures the effects of each alternative attack on malicious and non-malicious actors X  (soft)goals. As a result, designer can evaluate risk of threats, and select security solutions for attackers X  behavior based on the explicit consequence of malicious actors X  behavior. The evaluation steps are highlighted by number tags. This procedure starts with assigning satisfaction labels to the malicious tasks and goals. For example, in the first step, the evaluator assigns a satisfied label to System X  X  Password Crack-ing. In the next steps, these labels are propagated through the goal model.

We now consider the weaknesses in the approach taken in [18,16] and compare it with the proposed approach in the current work. Analyzing the dependencies as the potential vulnerabilities in [18] is useful, but it is not enough to uncover the potential threats imposed by external entities. In addition, the models do not capture goals and intentions of the attacker.
The designer needs to know how the attacker may use the vulnerabilities as a backdoor to the system, since deciding among different countermeasures depends on the attacker X  X  goals. For example, the designer needs to differentiate between the goals of a professional hacker and intentions of a curious kid to select proper security mechanisms. The approach in [18] neglects analyzing alternative attacks that each one requires specific security safeguard. In term of expressiveness of concep-tual constructs, a major weakness of the modeling approach in Fig. 9 is that both security safeguards and attacks are located inside the boundary of the attacker; therefore, the model does not specify which actor(s) employs the security mechanisms. Finally, the contributions of security mechanisms on goals of other actors are not modeled.
 6.2. Case study two: eSAP system The second example case is the eSAP system used as the case study system in [25 X 27] . The electronic Single Assessment
Process (eSAP) system is an agent-based health and social care system for the effective care of older people. Taking into ac-count a substantial part of the eSAP in the original case study, the following stakeholders are defined: The Older Person actor is the old person (patient) that wishes to receive appropriate health and social care. The Professional actor represents health and/or social care professionals involved in the care of the Older Person. The DoH actor represents the English Department of Health, which is responsible for the effective care of the Older Person. The Benefits Agency actor is an agency that helps the
Older Person. Financially, and the R&amp;D Agency actor represents a research and development agency that is interested in obtain-ing medical information.

The approach proposed in [26,27] integrates security concerns into the Tropos framework. Security constraints are mod-eled in a diagram called the actor diagram. Security requirements and goals are expressed by  X  X  X onstraints X , which are rep-resented using a cloud placed between the dependencies, at the side of the actor who has to satisfy the constraint. This approach is useful, since it enables the designer to relate the security requirements to goals and functionalities.
The approach in [26,27] introduces  X  X  X ecurity diagram X , which uses i * notation to model security requirements and poten-tial threats. Fig. 11 gives the original security diagram of eSAP, which contains the security goals, threats, and safeguards.
Threats are modeled explicitly in the  X  X  X ecurity diagram X  using a pentagon. The impact of threats on softgoals such as privacy and availability is modeled using contribution links.

However, the model does not trace the threats to the source actors, and the relation between countermeasures and threats are not elaborated in the resulting models. The main lack of the security diagram in the original case study is that the resulting models do not include actors; therefore, it is not clear who has the goals, who threatens the goals and why, who employs the mechanisms, and what is the impact of the mechanisms on other goals of actors.

In [26,27] , once the stakeholders X  goals and security constraints are identified, each actor is studied in more depth and alternative security solutions are examined considering the constraints imposed to the actor. Then, secure entities are intro-duced to help satisfying the imposed security constraints. However, it is not discussed why security requirements and con-straint need to be distinguished by other softgoals.

Fig. 12 depicts one of the actor analysis models taken from [27]. The actor analysis model lacks considering the impact of security goals on attacks and threats. Therefore, alternative security solutions are modeled through means-end relations without the trade-offs that they impose on other goals and softgoals.

Fig. 13 illustrates the goal model of professional actor, developed using the proposed extensions to i * . This model includes threats, security mechanisms and contributions of goals and attacks. This model includes the malicious tasks and goals and the corresponding impact on goals of professional actor. Fig. 13 illustrates a part of security trade-off analysis for eSAP sys-tem using the proposed approach. The steps of goal model evaluation are indicated by the tags. 6.3. Case study three: course registration system To our knowledge, the ATAM method provides is not applied in a security-specific case study. In this part, we apply the ATAM approach, using the notion of scenarios and tactics, to an example system. We use a simple course registration system to illustrate and compare the ATAM and our proposed approach. In this system, students take or drop courses by choosing them from a course catalogue, the system X  X  admin edit course catalogues, and professors post final marks to the system. The privacy policies do not allow the system X  X  admin to view academic history of students, but professors have access to the marks of their own courses. Academic history of students is personal information and should not be disclosed to the other students.

In what follows, the resulting artifacts and models developed by using the framework in [28] and our proposed approach are presented. First the models and artifacts which express the security requirements and design goals are given. Then the security solution models and trade-off analysis results are presented.

In [28], quality requirements are expressed as scenarios. Table 3 summarizes security and performance scenarios for the example course registration system. Scenarios provide the means to express requirements by specifying a circumstance and expected behavior of the system in that context. The circumstances are described by a stimulus and its source. To express malicious actors X  behavior, threat can be expressed by the stimulus whose source is the attacker. However, this approach does not provide means to express the consequences of the attacks on other requirements.

The approach in [28] suggests expressing security design solutions in terms of tactics. ATAM helps the designer evaluate each alternative tactic. The evaluator creates a  X  X  X uality Attribute Utility X  tree where utility is the expression of the overall goodness of the system. A utility tree begins with utility as the root node. Quality requirements are placed as children of utility. Scenarios are placed at leaves of the tree. Fig. 14 depicts the utility tree for the example system. The difficulty to achieve and importance of each scenario is ranked by high/medium/low scheme.

Based on the ATAM recommendations, scenarios that have at least one high priority of importance or difficulty should be analyzed in more detail to examine if the decided tactics satisfy the scenario. The result is an architectural approach analysis table for each scenario. Table 4 presents the architectural approach analysis table for the case study system. The utility tree does not model satisfaction degree of scenarios and contributions of quality requirements on each other.
Besides, the utility tree approach does not specify which actor imposes the scenarios; therefore, the conflicts and trade-offs among goals of various stakeholders are not expressed explicitly. In this way, trade-offs among various quality scenarios are not expressed.

The  X  X  X rchitectural approach analysis X  table does not provide means to express the impacts of each tactics on stimuli (at-tacks). Trade-offs among quality scenarios and tactic in the architectural approach analysis table are expressed indirectly and implicitly, since trade-off and risk points, instead of referring to quality scenarios, point to affected quality properties. More-over, the table does not capture the degree of sensitivity or trade-off between tactics and qualities. The analysis method does not provide any means to add qualitative or quantitative measures about the success or impacts of tactics and stimuli.
Fig. 15 depicts the malicious goal model affecting Jimmy X  X  goals. This model includes threats, security design alternatives, and the result of trade-off analysis using security goal model evaluation. The selected alternatives and their impacts on threats are specified using the evaluation labels. The result of evaluation shows that Encrypt transaction messages and Public Key mechanisms result in losing performance. The implementation cost is hurt by Public Key mechanism and is improved by
Encrypt transaction messages; therefore, there is a conflict on achieving implementation cost goal. On the other hand, both possible attacks ( Sniff transactions and Crack Jimmy X  X  password) would be controlled by these mechanisms, and performance goal is partially denied.

This model and the result of ATAM analysis in Table 4 result in similar conclusions. However, the goal model enables designers to express the trade-off rationale explicitly. Security goal models represent scenarios in terms of goals and softgo-als, attack scenario in terms of malicious goals, and tactics in terms of security mechanisms. In the goal models, trade-offs among goals are expressed using contribution links. The results of goal model evaluation, which are assigned as satisfaction or denial labels to the goal graph elements, represent the trade-off analysis results graphically and explicitly. 6.4. Summary of the results
The case studies and comparison of resulting models reveals strong and weak points of the previous works our proposed technique. The resulting models using the approach developed by Liu et al. [18] do not capture the goals and intentions be-hind malicious behavior. Therefore, the models do not specify how security alternatives protect the goals of actors against the threats. The models do not express which actor employs the security mechanisms, and the consequences of security mechanisms on goals of other actors are not modeled and analyzed. The current proposal resolves these expressiveness is-sues by separating malicious and non malicious actors and behavior.

In the models originally presented in [25 X 27], threats are not related to malicious actors who pose threats. This reduces the expressiveness and understandability of the models. Besides, the impacts of security mechanisms on threats are not ex-pressed; therefore, the designer makes the trade-offs while the effectiveness of alternative solutions to protect the actors X  goals against the threats is not considered.

The resulting artifacts of applying ATAM [28] for security trade-off analysis do not express security-specific aspects such as threats and vulnerabilities explicitly. Therefore, the artifacts do not capture the impact of threats on the quality goals of actors. In the ATAM approach, trade-offs are listed in tables for one scenario at a time. There are not explicit models of trade-offs across scenarios.

In the method proposed in this paper, threats are assigned to malicious actors, and the impacts of malicious behavior are expressed as contributions links from the malicious actors X  boundaries to other actors X  elements. Alternative solutions are selected considering potential goals and behavior of the attackers. In addition, trade-offs that mechanisms impose are incor-porated into the models by contributions of mechanisms and goals on softgoals. 7. Discussions, conclusions, and future work
In this paper, we began by considering the criteria for a conceptual modeling technique that enables designers to model and analyze security trade-offs among competing goals of multiple actors to achieve a good enough security. We studied existing approaches to trade-off analysis and identified limitations of these approaches. Based on the evaluation criteria and limitation of previous works, we proposed extensions to the i * notation for modeling and analyzing security trade-offs of a multi-actor system. The proposed modeling notation is accompanied with a qualitative trade-off analysis procedure based on goal model evaluation methods. The procedure provides the designers with assessment of security mechanisms X  impact on actors X  goals and threats.

In the proposed notation, malicious and non-malicious elements are distinguished in the meta-model and the graphical representation. However, the definition of attack and security countermeasure is fundamentally a matter of perspective. A task or a goal counted as malicious can be perceived non-malicious from a different viewpoint. The sequences of actions for mounting an attack are similar to sequences of actions performed by non-malicious actors, and therefore, the line to differ-entiate malicious actions from non-malicious ones is arbitrary.

Other factors make establishing a definition for malicious behavior difficult. For instance, the concept of competition can be perceived comparable to the notion of attack, since competitions have similar impacts that attacks have, while the com-petitions are not malicious, illegal, or unauthorized. Since, it is a matter of perspective, distinguishing the malicious and non-malicious behavior does not affect the analysis. Malicious elements have the same semantics of ordinary intentional ele-ments and they can be similar or identical to non-malicious elements.

On the other hand, as discussed by Sindre and Opdahl [40], graphical models become much clearer if the distinction be-tween malicious and non-malicious elements is made explicit and the malicious actions are visually distinguished from the legitimate ones. In particular, Sindre and Opdahl show that the use of inverted elements strongly draws the attention to dependability aspects early on for those who discuss the models.

The proposed method in this paper suggests that analysts collect and model stakeholders and attackers goals and tasks for each project to analyze the trade-offs. Proposals such as SVDT [7] suggest using a single fixed set of pre-identified goals with their relationships and trade-offs expressed in a fixed BBN topology. The BBN design is unchanging and reused for every pro-ject. In such an approach, the trade-off model is a parametric (and possibly probabilistic) formula rather than a conceptual model. If the right topology that is applicable for all contexts is designed, it would save the analysts efforts to develop de-tailed goal models for every project.

Approaches such as SVDT, ATAM, and CBAM do not provide modeling techniques to express, extract, and resolve trade-offs among quality goals. Developing a specific goal model for every context and problem provides a deeper understanding for the analysts. Goals and requirements that are unique to a project can be dealt with specifically. Given the differences in these approaches, the usefulness of each approach for various contexts needs to be evaluated in practice.

In the current proposal, although the i * notation provides a proper basis for modeling and analyzing trade-offs, the models become complex and cumbersome when the goal models reach a certain size. Another limitation of the proposed approach is that a comprehensive source of knowledge of security mechanisms and corresponding contributions does not exist. In future work, we aim to conduct empirical studies of how security designers make trade-offs in practice, to adopt the proposed sys-tematic trade-off analysis framework for integration into everyday design practice. We aim to build a security requirements and design knowledge base to gather and catalogue reusable knowledge about security trade-offs. Tool support for managing and applying security knowledge will also be studied. In this paper, the meta-model is mapped to the extended i * graphical representation. In future work, we aim to develop formal semantics for the meta-model in order to support automated reasoning.
 Acknowledgements
Financial support from Natural Science and Engineering Research Council of Canada and Bell University Labs is gratefully acknowledged.

References
