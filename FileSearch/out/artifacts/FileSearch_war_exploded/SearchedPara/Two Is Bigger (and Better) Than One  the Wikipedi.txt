 Knowledge has unquestionably become a key component of current intelligent systems in many fields of Artificial Intelligence. The creation and use of machine-readable knowledge has not only entailed researchers (Mitchell, 2005; Mirkin et al., 2009; Poon et al., 2010) developing huge, broad-coverage knowledge bases (Hovy et al., 2013; Suchanek and Weikum, 2013), but it has also hit big industry players such as Google (Singhal, 2012) and IBM (Ferrucci, 2012), which are mov-ing fast towards large-scale knowledge-oriented systems.

The creation of very large knowledge bases has been made possible by the availability of collaboratively-curated online resources such as Wikipedia and Wiktionary. These resources are increasingly becoming enriched with new con-tent in many languages and, although they are only partially structured, they provide a great deal of valuable knowledge which can be harvested and transformed into structured form (Medelyan et al., 2009; Hovy et al., 2013). Prominent examples include DBpedia (Bizer et al., 2009), BabelNet (Navigli and Ponzetto, 2012), YAGO (Hoffart et al., 2013) and WikiNet (Nastase and Strube, 2013). The types of semantic relation in these resources range from domain-specific, as in Freebase (Bollacker et al., 2008), to unspec-ified relations, as in BabelNet. However, un-like the case with smaller manually-curated re-sources such as WordNet (Fellbaum, 1998), in many large automatically-created resources the taxonomical information is either missing, mixed across resources, e.g., linking Wikipedia cate-gories to WordNet synsets as in YAGO, or coarse-grained, as in DBpedia whose hypernyms link to a small upper taxonomy.

Current approaches in the literature have mostly focused on the extraction of taxonomies from the network of Wikipedia categories. WikiTaxonomy (Ponzetto and Strube, 2007), the first approach of this kind, is based on the use of heuristics to determine whether is-a relations hold between a category and its subcategories. Subsequent ap-proaches have also exploited heuristics, but have extended them to any kind of semantic relation expressed in the category names (Nastase and Strube, 2013). But while the aforementioned at-tempts provide structure for categories that sup-ply meta-information for Wikipedia pages, sur-prisingly little attention has been paid to the ac-quisition of a full-fledged taxonomy for Wikipedia pages themselves. For instance, Ruiz-Casado et al. (2005) provide a general vector-based method which, however, is incapable of linking pages which do not have a WordNet counterpart. Higher coverage is provided by de Melo and Weikum (2010) thanks to the use of a set of effective heuris-tics, however, the approach also draws on Word-Net and sense frequency information.

In this paper we address the task of taxono-mizing Wikipedia in a way that is fully indepen-dent of other existing resources such as WordNet. We present WiBi, a novel approach to the cre-ation of a Wikipedia bitaxonomy, that is, a tax-onomy of Wikipedia pages aligned to a taxonomy of categories. At the core of our approach lies the idea that the information at the page and category level are mutually beneficial for inducing a wide-coverage and fine-grained integrated taxonomy. We induce a Wikipedia bitaxonomy, i.e., a taxon-omy of pages and categories, in 3 phases: 1. Creation of the initial page taxonomy: we 2. Creation of the bitaxonomy: we leverage 3. Refinement of the category taxonomy: fi-The output of our three-phase approach is a bitax-onomy of millions of pages and hundreds of thou-sands of categories for the English Wikipedia. The goal of the first phase is to induce a taxonomy of Wikipedia pages. Let P be the set of all the pages and let T P = ( P,E ) be the page taxonomy directed graph whose nodes are pages and whose edge set E is initially empty ( E :=  X  ). For each p  X  P our aim is to identify the most suitable gen-eralization p h  X  P so that we can create the edge ( p,p h ) and add it to E . For instance, given the page A PPLE , which represents the fruit meaning of apple , we want to determine that its hypernym is F RUIT and add the hypernym edge connecting the two pages (i.e., E := E  X  X  ( A PPLE , F RUIT ) } ). To do this, we perform a syntactic step, in which the hypernyms are extracted from the page X  X  tex-tual definition, and a semantic step, in which the extracted hypernyms are disambiguated according to the Wikipedia inventory. 3.1 Syntactic step: hypernym extraction In the syntactic step, for each page p  X  P , we extract zero, one or more hypernym lemmas, that is, we output potentially ambiguous hypernyms for the page. The first assumption, which follows Figure 1: A dependency tree example with copula. the Wikipedia guidelines and is validated in the literature (Navigli and Velardi, 2010; Navigli and Ponzetto, 2012), is that the first sentence of each Wikipedia page p provides a textual definition for the concept represented by p . The second assump-tion we build upon is the idea that a lexical tax-onomy can be obtained by extracting hypernyms from textual definitions. This idea dates back to the early 1970s (Calzolari et al., 1973), with later developments in the 1980s (Amsler, 1981; Calzo-lari, 1982) and the 1990s (Ide and V  X  eronis, 1993).
To extract hypernym lemmas, we draw on the notion of copula, that is, the relation between the complement of a copular verb and the copular verb itself. Therefore, we apply the Stanford parser (Klein and Manning, 2003) to the definition of a page in order to extract all the dependency rela-tions of the sentence. For example, given the def-inition of the page J ULIA R OBERTS , i.e.,  X  X ulia Fiona Roberts is an American actress. X , the Stan-ford parser outputs the set of dependencies shown in Figure 1. The noun involved in the copula re-lation is actress and thus it is taken as the page X  X  hypernym lemma. However, the extracted hyper-nym is sometimes overgeneral ( one , kind , type , etc.). For instance, given the definition of the page A POLLO ,  X  X pollo is one of the most impor-tant and complex of the Olympian deities in an-cient Greek and Roman religion [...]. X , the only copula relation extracted is between is and one . To cope with this problem we use a list of stop-nym, we replace it with the rightmost noun of the first following noun sequence (e.g., deity in the above example). If the resulting lemma is again a stopword we repeat the procedure, until a valid hy-pernym or no appropriate hypernym can be found. Finally, to capture multiple hypernyms, we iter-atively follow the conj and and conj or relations starting from the initially extracted hypernym. For example, consider the definition of A RISTOTLE :  X  X ristotle was a Greek philosopher and polymath, a student of Plato and teacher of Alexander the Great. X  Initially, the philosopher hypernym is selected thanks to the copula relation, then, fol-lowing the conjunction relations, also polymath , student and teacher are extracted as hypernyms. While more sophisticated approaches like Word-Class Lattices could be applied (Navigli and Ve-lardi, 2010), we found that, in practice, our hy-pernym extraction approach provides higher cov-erage, which is critical in our case. 3.2 Semantic step: hypernym disambiguation Since our aim is to connect pairs of pages via hypernym relations, our second step consists of disambiguating the obtained hypernym lemmas of page p by associating the most suitable page with each hypernym. Following previous work (Ruiz-Casado et al., 2005; Navigli and Ponzetto, 2012), as the inventory for a given lemma we consider the set of pages whose main title is the lemma itself, except for the sense specification in parenthesis. For instance, given fruit as the hypernym for A P -PLE we would like to link A PPLE to F RUIT as op-posed to, e.g., F RUIT ( BAND ) or F RUIT ( ALBUM ). 3.2.1 Hypernym linkers To disambiguate hypernym lemmas, we exploit the structural features of Wikipedia through a pipeline of hypernym linkers L = { L i } , applied in cascade order (cf. Section 3.3.1). We start with the set of page-hypernym pairs H = { ( p,h ) } as obtained from the syntactic step. The successful application of a linker to a pair ( p,h )  X  H yields a page p h as the most suitable sense of h , result-ing in setting isa ( p,h ) = p h . At step i , the i -th linker L i  X  L is applied to H and all the hy-pernyms which the linker could disambiguate are removed from H . This prevents lower-precision linkers from overriding decisions taken by more accurate ones.

We now describe the hypernym linkers. In what follows we denote with p h  X  p h the fact that the definition of a Wikipedia page p contains an oc-currence of h linked to page p h . Note that p h is not necessarily a sense of h .
 Crowdsourced linker If p h  X  p h , i.e., the hyper-nym h is found to have been manually linked to p h in p by Wikipedians, we assign isa ( p,h ) = p h . For example, because capital was linked in the B set isa ( B RUSSELS , capital ) = C APITAL CITY . Category linker Given the set W  X  P of Wikipedia pages which have at least one category in common with p , we select the majority sense of h , if there is one, as hyperlinked across all the definitions of pages in W : where 1( p 0 h  X  p h ) is the characteristic function which equals 1 if h is linked to p h in page p 0 , 0 otherwise. For example, the linker sets isa ( E GGPLANT , plant ) = P LANT because most of the pages associated with T ROPICAL FRUIT , a cat-egory of E GGPLANT , contain in their definitions the term plant linked to the P LANT page.
 Multiword linker If p m  X  p h and m is a multiword expression containing the lemma h as one of its words, set isa ( p,h ) = p h . For example, we set isa ( P ROTEIN , compound ) = C
HEMICAL COMPOUND , as chemical compound is linked to C HEMICAL COMPOUND in the defini-tion of P ROTEIN .
 Monosemous linker If h is monosemous in Wikipedia (i.e., there is only a single page p h for that lemma), link it to its only sense by setting isa ( p,h ) = p h . For example, we extract the hypernym businessperson from the definition of M
ERCHANT and, as it is unambiguous, we link Distributional linker Finally, we provide a dis-tributional approach to hypernym disambiguation. We represent the textual definition of page p as a distributional vector ~v p whose components are all the English lemmas in Wikipedia. The value of each component is the occurrence count of the cor-responding content word in the definition of p .
The goal of this approach is to find the best link for hypernym h of p among the pages h is linked to, across the whole set of definitions in Wikipedia. Formally, for each p h such that h is linked to p h in some definition, we define the set of pages P ( p h ) whose definitions contain a link to p h , i.e., P ( p h ) = { p 0  X  P | p 0 h  X  p h We then build a distributional vector ~v p 0 for each p 0  X  P ( p h ) as explained above and create an ag-gregate vector ~v p termine the similarity of p to each p h by calcu-lating the dot product between the two vectors sim ( p,p h ) = ~v p  X  ~v p p h we perform the following association:
For example, thanks to this linker we set 3.3 Page Taxonomy Evaluation Statistics We applied the above linkers to the October 2012 English Wikipedia dump. Out of the 3,829,058 total pages, 4,270,232 hypernym lemmas were extracted in the syntactic step for 3,697,113 pages (covering more than 96% of the total). Due to illformed definitions, though, it was not always possible to extract the hypernym lemma: for example, 6 A PRIL 2010 B AGHDAD BOMBINGS is defined as  X  X  series of bomb ex-plosions destroyed several buildings in Baghdad X , which only implicitly provides the hypernym.
The semantic step disambiguated 3,718,612 hy-pernyms for 3,294,562 Wikipedia pages, i.e., cov-ering more than 86% of the English pages with at least one disambiguated hypernym. Figure 2 plots the number and distribution of hypernyms disam-biguated by our hypernym linkers.
 Taxonomy quality To evaluate the quality of our page taxonomy we randomly sampled 1,000 Wikipedia pages. For each page we provided: i) a list of suitable hypernym lemmas for the page, mainly selected from its definition; ii) for each lemma the correct hypernym page(s). We calcu-lated precision as the average ratio of correct hy-pernym lemmas (senses) to the total number of lemmas (senses) returned for all the pages in the dataset, recall as the number of correct lemmas (senses) over the total number of lemmas (senses) in the dataset, and coverage as the fraction of pages for which at least one lemma (sense) was returned, independently of its correctness. Results, both at lemma-and sense-level, are reported in Ta-ble 1. Not only does our taxonomy show high pre-cision and recall in extracting ambiguous hyper-nyms, it also disambiguates more than 3/4 of the hypernyms with high precision. 3.3.1 Hypernym linker order The optimal order of application of the above linkers is the same as that presented in Section 3.2.1. It was established by selecting the combina-tion, among all possible permutations, which max-imized precision on a tuning set of 100 randomly sampled pages, disjoint from our page dataset. The page taxonomy built in Section 3 will serve as a stable, pivotal input to the second phase, the aim of which is to build our bitaxonomy, that is, a taxonomy of pages and categories. Our key idea is that the generalization-specialization informa-tion available in each of the two taxonomies is mutually beneficial. We implement this idea by exploiting one taxonomy to update the other, and vice versa, in an iterative way, until a fixed point is reached. The final output of this phase is, on the one hand, a page taxonomy augmented with addi-tional hypernymy relations and, on the other hand, a category taxonomy which is built from scratch. 4.1 Initialization Our bitaxonomy B = { T P ,T C } is a pair consist-ing of the page taxonomy T P = ( P,E ) , as ob-tained in Section 3, and the category taxonomy T
C = ( C,  X  ) , which initially contains all the cate-gories as nodes but does not include any hypernym edge between category nodes. In the following we describe the core algorithm of our approach, which iteratively and mutually populates and re-fines the edge sets E ( T P ) and E ( T C ) . 4.2 The Bitaxonomy Algorithm Preliminaries Before proceeding, we define some basic concepts that will turn out to be use-ful for presenting our algorithm. We denote by super T ( t ) the set of all ancestors of a node t in the taxonomy T (be it T P or T C ). We further define a verification function t ; T t 0 which, in the case of T
C , returns true if there is a path in the Wikipedia category network between t and t 0 , false other-wise, and, in the case of T P , returns true if t 0 is a sense, i.e., a page, of a hypernym h of t (that is, ( t,h )  X  H , cf. Section 3.2.1). For instance, S for categories because the former is a sub-category of the latter in Wikipedia, and R ADIOHEAD ; T B
AND ( MUSIC ) for pages, because band is a hy-pernym extracted from the textual definition of R
ADIOHEAD and B AND ( MUSIC ) is a sense of band in Wikipedia. Note that, while the super function returns information that we have already learned, i.e., it is in T P and T C , the ; operator holds just for candidate is-a relations, as it uses knowledge from Wikipedia itself which is poten-tially incorrect. For instance, S PORTSMEN ; T M
EN  X  S SPORTS in the Wikipedia category net-tween the two Wikipedia pages, both hold accord-ing to our definition of ; , while connecting the wrong hypernym candidates. At the core of our algorithm, explained below, is the mutual lever-aging of the super function from one of the two taxonomies (pages or categories) to decide about which candidates (for which a ; relation holds) in the other taxonomy are real hypernyms.

Finally, we define the projection operator  X  , such that  X  ( c ) , c  X  C , is the set of pages categorized with c , and  X  ( p ) , p  X  P , is the set of categories associated with page p in Wikipedia. For instance, the pages which belong to the category O LYMPIC SPORTS are given by . . . , T RIATHLON } . Vice versa,  X  ( T RIATHLON ) = WATER SWIMMING } . The projection operator  X  enables us to jump from one taxonomy to the other and expresses the mutual membership relation be-tween pages and categories.
 Algorithm We now describe in detail the bitax-onomy algorithm, whose pseudocode is given in Algorithm 1. The algorithm takes as input the two taxonomies, initialized as described in Section 4.1. Starting from the category taxonomy (line 1), the algorithm updates the two taxonomies in turn, un-til convergence is reached, i.e., no more edges can be added to any side of the bitaxonomy. Let T be the current taxonomy considered at a given mo-ment and T 0 its dual taxonomy. The algorithm proceeds by selecting a node t  X  V ( T ) for which no hypernym edge ( t,t h ) could be found up until that moment (line 3), and then tries to infer such (lines 5-12). This is the core of the bitaxonomy al-gorithm, in which hypernymy knowledge is trans-ferred from one taxonomy to the other. By apply-ing the projection operator  X  to t , the algorithm considers those nodes t 0 aligned to t in the dual using the super T 0 function (line 6). The nodes reached in T 0 act as a clue for discovering the suit-able hypernyms for the starting node t  X  V ( T ) . To perform the discovery, the algorithm projects the count of each projection t h  X   X  ( t 0 Algorithm 1 The Bitaxonomy Algorithm 8). Finally, the node  X  t h  X  V ( T ) with maximum count, and such that t ; T  X  t h holds, if one exists, is promoted as hypernym of t and a new hypernym edge ( t,  X  t h ) is added to E ( T ) (line 12). Finally, the role of the two taxonomies is swapped and the pro-cess is repeated until no more change is possible. Example Let us illustrate the algorithm by way of an example. Assume we are in the first iteration ( T = T C ) and consider the Wikipedia category t = O LYMPICS (line 3) and its super-categories I category has 27 pages associated with it (line 5), 23 of which provide a hypernym page in T P (line 6): e.g., P ARALYMPIC G AMES , associated with the category O LYMPICS , is a M ULTI -SPORT EVENT and is therefore contained in S . By con-sidering and counting the categories of each page in S (lines 7-8), we end up counting the category M categories, such as A WARDS and S WIMSUITS , once. As M ULTI -SPORT EVENTS has the highest count and is connected to O LYMPICS by a path in the Wikipedia category network (line 11), the hypernym edge ( O LYMPICS , M ULTI -SPORT EVENTS ) is added to T C (line 12). As the final phase, we refine and enrich the cate-gory taxonomy. The goal of this phase is to pro-vide broader coverage to the category taxonomy T
C created as explained in Section 4. We apply three enrichment heuristics which add hypernyms to those categories c for which no hypernym could be found in phase 2, i.e., @ c 0 s.t. ( c,c 0 )  X  E ( T C Single super-category As a first structural re-finement, we automatically link an uncovered cat-egory c to c 0 if c 0 is the only direct super-category of c in Wikipedia.
 Sub-categories We increase the hypernym cov-erage by exploiting the sub-categories of each un-covered category c (see Figure 3a). In detail, for each uncovered category c we consider the set sub ( c ) of all the Wikipedia subcategories of c (nodes c 1 ,c 2 ,...,c n in Figure 3a) and then let each category vote, according to its direct hyper-nym categories in T C (the vote is as in Algo-rithm 1). Then we proceed in decreasing order which is connected to c via a path in T C , i.e., c ; T c 00 of c which lies in the path from c to c 0 and add the hypernym edge ( c,c 00 ) to E ( T C ) . For ex-ample, consider the category F RENCH TELEVI -SION PEOPLE ; since this category has no asso-ciated pages, in phase 2 no hypernym could be found. However, by applying the sub-categories heuristic, we discover that T ELEVISION PEOPLE BY COUNTRY is the hypernym most voted by our target category X  X  descendants, such as F RENCH COUNTRY is at distance 1 in the Wikipedia category network from F RENCH TELEVISION T Super-categories We then apply a similar heuristic involving super-categories (see Figure 3b). Given an uncovered category c , we consider its direct Wikipedia super-categories and let them vote, according to their hypernym categories in T
C . Then we proceed in decreasing order of vote and select the highest-ranking category c 0 which is connected to c in T C , i.e., c ; T up the direct ancestor c 00 of c which lies in the path from c to c 0 and add the edge ( c,c 00 ) to E ( T C ) . 5.1 Bitaxonomy Evaluation Category taxonomy statistics We applied phases 2 and 3 to the output of phase 1, which was evaluated in Section 3.3. In Figure 4a we show the increase in category coverage at each iteration throughout the execution of the two phases (1SUP, SUB and SUPER correspond to the three above heuristics of phase 3). The final outcome is a category taxonomy which includes 594,917 hypernymy links between categories, Figure 3: Heuristic patterns for the coverage re-finement of the category taxonomy. covering more than 96% of the 618,641 categories in the October 2012 English Wikipedia dump. The graph shows the steepest slope in the first iterations of phase 2, which converges around 400k categories at iteration 30, and a significant boost due to phase 3 producing another 175k hypernymy edges, with the super-category heuris-tic contributing most. 78.90% of the nodes in T C belong to the same connected component. The average height of the biggest component of T
C is 23.26 edges and the maximum height is 49. We note that the average height of T C is much greater than that of T P , which reflects the category taxonomy distinguishing between very subtle classes, such as A LBUMS BY ARTISTS , A Category taxonomy quality To estimate the quality of the category taxonomy, we ran-domly sampled 1,000 categories and, for each of them, we manually associated the super-categories which were deemed to be appropriate hypernyms. Figure 4b shows the performance trend as the al-gorithm iteratively covers more and more cate-gories. Phase 2 is particularly robust across it-erations, as it leads to increased recall while re-taining very high precision. As regards phase 3, the super-categories heuristic leads to only a slight precision decrease, while improving recall consid-erably. Overall, the final taxonomy T C achieves 85.80% precision, 83.40% recall and 97.20% cov-erage on our dataset.
 Page taxonomy improvement As a result of phase 2, 141,105 additional hypernymy links were also added to the page taxonomy, resulting in an overall 82.99% precision, 77.90% recall and 92.10% coverage, with a non-negligible 3% boost from phase 1 to phase 2 in terms of recall and cov-erage on our Wikipedia page dataset.

We also calculated some statistics for the result-ing taxonomy obtained by aggregating the 3.8M hypernym links in a single directed graph. Over-all, 99% of nodes belong to the same connected component, with a maximum height of 29 and an average height on the biggest component of 6.98. Although the extraction of taxonomies from machine-readable dictionaries was already being studied in the early 1970s (Calzolari et al., 1973), pioneering work on large amounts of data only appeared in the 1990s (Hearst, 1992; Ide and V  X  eronis, 1993). Approaches based on hand-crafted patterns and pattern matching techniques have been developed to provide a supertype for the extracted terms (Etzioni et al., 2004; Blohm, 2007; Kozareva and Hovy, 2010; Navigli and Ve-lardi, 2010; Velardi et al., 2013, inter alia). How-ever, these methods do not link terms to existing knowledge resources such as WordNet, whereas those that explicitly link do so by adding new leaves to the existing taxonomy instead of acquir-ing wide-coverage taxonomies from scratch (Pan-tel and Ravichandran, 2004; Snow et al., 2006).
The recent upsurge of interest in collabo-rative knowledge curation has enabled several approaches to large-scale taxonomy acquisition (Hovy et al., 2013). Most approaches initially focused on the Wikipedia category network, an entangled set of generalization-containment rela-tions between Wikipedia categories, to extract the hypernymy taxonomy as a subset of the network. The first approach of this kind was WikiTaxonomy (Ponzetto and Strube, 2007; Ponzetto and Strube, 2011), based on simple, yet effective lightweight heuristics, totaling more than 100k is-a relations. Other approaches, such as YAGO (Suchanek et al., 2008; Hoffart et al., 2013), yield a taxonom-ical backbone by linking Wikipedia categories to WordNet. However, the categories are linked to the first, i.e., most frequent, sense of the category head in WordNet, involving only leaf categories in the linking.

Interest in taxonomizing Wikipedia pages, in-stead, developed with DBpedia (Auer et al., 2007), which pioneered the current stream of work aimed at extracting semi-structured information from Wikipedia templates and infoboxes. In DBpedia, entities are mapped to a coarse-grained ontology which is collaboratively maintained and contains only about 270 classes corresponding to popular named entity types, in contrast to our goal of struc-turing the full set of Wikipedia articles in a larger and finer-grained taxonomy.

A few notable efforts to reconcile the two sides of Wikipedia, i.e., pages and categories, have been put forward very recently: WikiNet (Nas-tase et al., 2010; Nastase and Strube, 2013) is a project which heuristically exploits different as-pects of Wikipedia to obtain a multilingual con-cept network by deriving not only is-a relations, but also other types of relations. A second project, MENTA (de Melo and Weikum, 2010), creates one of the largest multilingual lexical knowledge bases by interconnecting more than 13M articles in 271 languages. In contrast to our work, hy-pernym extraction is supervised in that decisions are made on the basis of labelled training exam-ples and requires a reconciliation step owing to the heterogeneous nature of the hypernyms, some-thing that we only do for categories, due to their noisy network. While WikiNet and MENTA bring together the knowledge available both at the page and category level, like we do, they either achieve low precision and coverage of the taxonomical structure or exhibit overly general hypernyms, as we show in our experiments in the next section.
Our work differs from the others in at least three respects: first, in marked contrast to most other re-sources, but similarly to WikiNet and WikiTaxon-omy, our resource is self-contained and does not depend on other resources such as WordNet; sec-ond, we address the taxonomization task on both sides, i.e., pages and categories, by providing an algorithm which mutually and iteratively transfers knowledge from one side of the bitaxonomy to the other; third, we provide a wide coverage bitaxon-omy closer in structure and granularity to a manual WordNet-like taxonomy, in contrast, for example, Table 2: Page and category taxonomy evaluation. using  X  2 test, p &lt; 0 . 02 ( p &lt; 0 . 01 ) between WiBi and the daggered resource. 7.1 Experimental Setup We compared our resource (WiBi) against the Wikipedia taxonomies of the major knowledge re-sources in the literature providing hypernym links, namely DBpedia, WikiNet, MENTA, WikiTax-onomy and YAGO (see Section 6). As datasets, we used our gold standards of 1,000 randomly-sampled pages (see Section 3.3) and categories (see Section 5.1). In order to ensure a level playing field, we detected those pages (categories) which do not exist in any of the above resources and re-moved them to ensure full coverage of the dataset across all resources. For each resource we cal-culated precision, by manually marking each hy-pernym returned for each page (category) as cor-rect or not. As regards recall, we note that in two cases (i.e., DBpedia returning page super-types from its upper taxonomy, YAGO linking cat-egories to WordNet synsets) the generalizations are neither pages nor categories and that MENTA returns heterogeneous hypernyms as mixed sets of WordNet synsets, Wikipedia pages and categories. Given this heterogeneity, standard recall across re-sources could not be calculated. For this reason we calculated recall as described in Section 3.3. 7.2 Results Wikipedia pages We first report the results of the knowledge resources which provide page hy-pernyms, i.e., we compare against WikiNet, DB-pedia and MENTA. We use the original outputs from the three resources: the first two are based on dumps which are from the same year as the one used in WiBi (cf. Section 3.3), while MENTA is based on a dump dating back to 2010 (consisting of 3.25M pages and 565k categories). We decided to include the latter for comparison purposes, as it uses knowledge from 271 Wikipedias to build the final taxonomy. However, we recognize its perfor-mance might be relatively higher on a 2012 dump.
We show the results on our page hypernym dataset in Table 2 (top). As can be seen, WikiNet obtains the lowest precision, due to the high num-ber of hypernyms provided, many of which are incorrect, with a recall between that of DBpe-dia and MENTA. WiBi outperforms all other re-sources with 84.11% precision, 79.40% recall and 92.57% coverage. MENTA seems to be the clos-est resource to ours, however, we remark that the hypernyms output by MENTA are very heteroge-neous: 48% of answers are represented by a Word-Net synset, 37% by Wikipedia categories and 15% are Wikipedia pages. In contrast to all other re-sources, WiBi outputs page hypernyms only.
 Wikipedia categories We then compared all the knowledge resources which deal with categories, i.e., WikiTaxonomy, YAGO and MENTA. For the latter two, the above considerations about the 2012 dump hold, whereas we reimplemented WikiTax-onomy, which was based on a 2009 dump, to run it on the same dump as WiBi. We excluded WikiNet from our comparison because it turned out to have low coverage of categories (i.e., less than 1%).
We show the results on our category dataset in Table 2 (bottom). Despite other systems ex-hibiting higher precision, WiBi generally achieves higher recall, thanks also to its higher category coverage. YAGO obtains the lowest recall and coverage, because only leaf categories are consid-ered. MENTA is the closest system to ours, ob-taining slightly higher precision and recall. No-tably, however, MENTA outputs the first WordNet sense of entity for 13.17% of all the given answers, which, despite being correct and accounted in pre-cision and recall, is uninformative. Since a system which always outputs entity would maximise all the three measures, we also calculated the perfor-mance for MENTA when discarding entity as an recall drops to 71.95%. Further analysis, pre-sented below, shows that the specificity of its hy-pernyms is considerably lower than that of WiBi. 7.3 Analysis of the results To get further insight into our results we per-formed two additional analyses of the data. First, we estimated the level of specialization of the hypernyms in the different resources on our two datasets. The idea is that a hypernym should be valid while at the same time being as specific as possible (e.g., S INGER should be preferred over P
ERSON ). We therefore calculated a measure, which we called specificity, that computes the per-centage of times a system outputs a more specific answer than another system. To do this, we anno-tated each hypernym returned by a system as fol-lows:  X  1 if the answer was wrong, 0 if missing, &gt; 0 if correct; more specific answers were assigned higher scores. When comparing two systems, we select the respective most specific answers a 1 ,a 2 and say the first system is more specific than the latter whenever score ( a 1 ) &gt; score ( a 2 ) . Table 3 shows the results for all the resources and for both the page and category taxonomies: WiBi consis-tently provides considerably more specific hyper-nyms than any other resource (middle column).
A second important aspect that we analyzed was the granularity of each taxonomy, determined by drawing each resource on a bidimensional plane with the number of distinct hypernyms on the x axis and the total number of hypernyms (i.e., edges) in the taxonomy on the y axis. Figures 5a and 5b show the position of each resource for the page and the category taxonomies, respectively. As can be seen, WiBi, as well as the page tax-onomy of MENTA, is the resource with the best granularity, as not only does it attain high cover-age, but it also provides a larger variety of classes as generalizations of pages and categories. Specif-ically, WiBi provides over 3M hypernym pages chosen from a range of 94k distinct hypernyms, while others exhibit a considerably smaller range of distinct hypernyms (e.g., DBpedia by design, but also WikiNet, with around 11k distinct page hypernyms). The large variety of classes provided by MENTA, however, is due to including more than 100k Wikipedia categories (among which, categories about deaths and births alone repre-sent about 2% of the distinct hypernyms). As re-gards categories, while the number of distinct hy-pernyms of WiBi and WikiTaxonomy is approxi-mately the same (around 130k), the total number of hypernyms (around 580k for both taxonomies) is distributed over half of the categories in Wiki-Figure 5: Hypernym granularity for the resources. Taxonomy compared to WiBi, resulting in a dou-ble number of hypernyms per category, but lower coverage (cf. Table 2). In this paper we have presented WiBi, an auto-matic 3-phase approach to the construction of a bitaxonomy for the English Wikipedia, i.e., a full-fledged, integrated page and category taxonomy: first, using a set of high-precision linkers, the page taxonomy is populated; next, a fixed point algo-rithm populates the category taxonomy while en-riching the page taxonomy iteratively; finally, the category taxonomy undergoes structural refine-ments. Coverage, quality and granularity of the bitaxonomy are considerably higher than the tax-onomy of state-of-the-art resources like DBpedia, YAGO, MENTA, WikiNet and WikiTaxonomy.

Our contributions are three-fold: i) we propose a unified, effective approach to the construction of a Wikipedia bitaxonomy, a richer structure than those produced in the literature; ii) our method for building the bitaxonomy is self-contained, thanks to its independence from external resources (like WordNet) and the virtual absence of supervision, making WiBi replicable on any new version of Wikipedia; iii) the taxonomy provides nearly full coverage of pages and categories, encompassing the entire encyclopedic knowledge in Wikipedia.
We will apply our video games with a purpose (Vannella et al., 2014) to validate WiBi. We also plan to integrate WiBi into BabelNet (Navigli and Ponzetto, 2012), so as to fully taxonomize it, and exploit its high quality for improving semantic predicates (Flati and Navigli, 2013).
 We thank Luca Telesca for his implementation of WikiTaxonomy and Jim McManus for his com-ments on the manuscript.
