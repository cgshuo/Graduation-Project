 Users are often supposed to give effective queries so that the return of an information retrieval (IR) system is anticipated to cater to their information needs. One major challenge they face is what terms should be generated when formulating the queries. The general assumption of previous work [14] is that nouns or noun phrases are more informative than other parts of speech (POS ), and longer queries could provide more information about the underlying information need. However, are the query terms that the users believe to be well-performing really effective in IR? 
Consider the following description of the information need of a user, which is an example description query in NTCIR-4: Find articles containing the reasons for NBA Star Michael Jordan's retirement and what effect it had on the Chicago Bulls . Re-moving stop words is a common way to form a query such as  X  contain , reason , NBA Star , Michael Jordan , retirement , effect , had , Chicago Bulls  X , which scores a mean average precision (MAP) of 0.1914. It appears obviously that terms contain and had carry relatively less information about the topic. Thus, we take merely nouns into account and generate another query,  X  reason , NBA Star , Michael Jordan , retirement , effect , Chicago Bulls X  , which achieves a better MAP of 0.2095 . When carefully ana-lyzing these terms, one could find that the meaning of Michael Jordan is more precise than that of NBA Star , and hence we improve MAP by 14% by removing NBA Star . Yet interestingly, the performance of removing Michael Jordan is not as worse as we think it would be. This might be resulted from that Michael Jordan is a famous NBA excluded? There is no explicit clue to help users determine what terms are effective in an IR system, especially when they lack experience of searching documents in a spe-cific domain. Without comprehensively understanding the document collection to be retrieved, it is difficult for users to generate appropriate queries. 
As the effectiveness of a term in IR depends on not only how much information it carries in a query (subjectivity from users) but also what documents there are in a collection (objectivity from corpora), it is, therefore, important to measure the effec-tiveness of query terms in an automatic way. Such measurement is useful in selection of effective and ineffective query terms, which can benefit many IR applications such as query formulation and query expansion.

Conventional methods of retrieval models, query reformulation and expansion [13] attempt to learn a weight for each query term, which in some sense corresponds to the importance of the query term. Unfortunately, such methods could not explain what properties make a query term effective for search. Our work resembles some previous works with the aim of selecting effective terms. [1,3] focus on discovering key concepts from noun phrases in verbose queries with different weightings. Our work focuses on how to formulate appropriate qu eries by selecting effective terms or drop-ping ineffective ones. No weight assignments are needed and thus conventional re-trieval models could be easily incorporated. [4] uses a supervised learning method for selecting good expansion terms from a number of candidate terms generated by pseu-do-relevance feedback technique. However, we differ in that, (1) [4] selects specific features so as to emphasize more on the relation between original query and expan-sion terms without consideration of linguistic features, and (2) our approach does not introduce extra terms for query formulation. Similarly, [10] attempts to predict which words in query should be deleted based on query logs. Moreover, a number of works [2,5,6,7,9,15,16,18,19,20] pay attention to predict the quality or difficulty of queries, and [11,12] try to find optimal sub-queries by using maximum spanning tree with mutual information as the weight of each edge. However, their focus is to evaluate performance of a whole query whereas we consider units at the level of terms. 
Given a set of possible query terms that a user may use to search documents rele-vant to a topic, the goal of this paper is to formulate appropriat e queries by selecting effective terms from the set. Since exhaustively examining all candidate subsets is not feasible in a large scale, we reduce the problem to a simplified one that iteratively selects effective query terms from the set. We are interested in realizing (1) what characteristic of a query term makes it effective or ineffective in search, and (2) whether or not the effective query terms (if we are able to predict) can improve IR performance. We propose an approach to automatically measure the effectiveness of query terms in IR, wherein a regression model learned from training data is applied to conduct the prediction of term effectiveness of testing data. Based on the measure-ment, two algorithms are presented, which formulate queries by selecting effective terms and dropping ineffective terms from the given set, respectively. 
The merit of our approach is that we co nsider various aspects that may influence retrieval performance, including linguistic properties of a query term and statistical relationships between terms in a document collection such as co-occurrence and context dependency. Their impacts on IR have been carefully examined. Moreover, we have conducted extensive experiments on NTCIR-4 and NTCIR-5 ad-hoc IR tasks to evaluate the performance of the proposed approach. Based on term effectiveness prediction and two query formulation algorithms, our method significantly improve MAP by 9.2% on average, compared to the performance of the original queries given in the benchmarks.

In the rest of this paper, we describe the proposed approach to term selection and query formulation in Section 2. The experimental results of retrieval performance are presented in Sections 3. Finally, in Section 4, we give our discussion and conclusions. 2.1 Problem Specification When a user desires to retrieve information from document repositories to know more about a topic, many possible terms may come into her mind to form various queries. We call such set of the possible terms query term space T ={ t 1 , ..., t n }. A query typi-cally consists of a subset of T. Each query term t i T is expected to convey some information about the user X  X  information need . It is, therefore, reasonable to assume that each query term will have different degree of effectiveness in documents retrieval. Suppose Q denotes all subsets of T , that is, Q=Power Set(T) and |Q|= 2 n . The problem gain between the retrieval performance of T and  X  q (  X  q  X  Q ) is maximized: The higher the score pf ( x ) is, the better the retrieval performance can be achieved. 
An intuitive way to solve the problem is to exhaustively examine all candidate sub-set members in Q and design a method to decide which the best  X  q * is. However, since an exhaustive search is not appropriate for applications in a large scale, we re-duce the problem to a simplified one that chooses the most effective query term t i ( t  X  T ) such that the performance gain between T and T-{ t Once the best t i * is selected,  X  q * could be approximated by iteratively selecting effec-tive terms from T . Similarly, the simplified problem could be to choose the most inef-fective terms from T such that the performance gain is minimized. Then  X  q * will be approximated by iteratively removing ineffective or noisy terms from T . 
Our goals are: (1) to find a function r : T  X  R , which ranks { t 1 , ..., t n } based on their effectiveness in performance gain (MAP is used for the performance measurement in this paper), where the effective terms are sel ected as candidate query terms, and (2) to formulate a query from the candidates selected by function r . 2.2 Effective Term Selection To rank term t i in a given query term space T based on function r , we use a regression model to compute r directly, which predicts a real value from some observed features corpus, where f ( t i ) is the feature vector of t i , which will be described in Section 2.4. 
The regression model we adopt is Support Vector Regression (SVR), which is a regression analysis technique based on SVM [17]. The aim of SVR is to find the most appropriate hyperplane w which is able to predict the distribution of data points accu-tween ground truth y i =  X  X  X   X   X   X   X  X  X  X  X  X  X  X  X  X   X   X  X  X  X  X  X / X  X  X  X  and predicted value r (t i ), and r is required to be in the form of w f ( t i )+ b . Finding function r is therefore equivalent to solving the convex optimization problem: subject to: where C determines the tradeoff between the flatness of r and the amount up to which deviations larger than  X  are tolerated,  X  is the maximum acceptable difference between riables that cope with otherwise infeasible constraints of the optimization problem. We use the SVR implementation of LIBSVM [8] to solve the optimization problem. 
Ranking terms in query term space T ={ t 1 , ..., t n } according to their effectiveness is terms t i T into an ordering sequence of effectiveness or ineffectiveness by r ( t i ). 2.3 Generation and Reduction Algorithms Generation and Reduction formulate queries by greedily selecting effec-tive terms or dropping ineffective terms from space T based on function r. 
When formulating a query from query term space T , the Generation algorithm computes a measure of effectiveness r ( t i ) for each term t i T , includes the most effective term t i * and repeats the process until k terms are chosen (where k is a empiri-cal value given by users). Note that T is changed during the selection process, and thus statistical features should be re-estimated according to new T . The selection of the best candidate term ensures that the current selected term t i * is the most informa-tive one among those that are not selected yet. 
Compared to generation, the Reduction algorithm always selects the most ineffec-query term space T , Reduction aims to remove such ineffective terms and will repeat the process until | T |-k terms are chosen. 2.4 Features Used for Term Selection Linguistic and statistical features provide important clues for selection of good query terms from viewpoints of users and collections, and we use them to train function r . Linguistic Features: Terms with certain linguistic properties are often viewed se-mantics-bearing and informative for search. Linguistic features of query terms are mainly inclusive of parts of speech (POS) and named entities (NE). In our experi-ment, the POS features comprise noun, verb, adjective, and adverb, the NE features include person names, locations, organizations, and time, and other linguistic features contain acronym, size (i.e., number of words in a term) and phrase, all of which have shown their importance in many IR applications. The values of these linguistic fea-tures are binary except the size feature. POS and NE are labeled manually for high quality of training data, and can be tagged automatically for purpose of efficiency alternatively. about the term in a document collection. This information could be about the term itself such as term frequency (TF) and inverse document frequency (IDF), or the rela-tionship between the term and other terms in space T . We present two methods for estimating such term relationship. The first method depends on co-occurrences of term-topic co-occur feature . The second method extracts so-called context vectors as feature computes the similarity between the context vectors of t i and t j while the term-topic context feature computes the similarity between context vectors of t i and T -{ t i }. 
Term-term &amp; term-topic co-occur features : The features are used to measure whether T and how much the intension is. The term without substitutes is supposed to be impor-tant in T . Point-wise mutual information (PMI), Chi-square statistics ( X 2 ), and log-either t j or T -{ t i } in this paper. Suppose that N is the number of documents in the collec-PMI is a measure of how much term t i tells us about Z . X compares the observed frequencies with frequencies expected for independence. LLR is a statistical test for making a decision between two hypotheses of dependency or independency based on the value of this ratio. We make use of average, minimum, and maximum metrics to diagnose term-term co-occur features over all possible pairs of ( t i ,t j ), for any  X   X   X  X   X  : rankings varied from 1 to n are treated the additional features. 
The term-topic co-occur feature s are nearly identical to the term-term co-occur features with an exception that term-topic co-occur features are used in measuring the computed from the indices of IR systems with caches. Term-term &amp; term-topic context features : The co-occurrence features are reliable for estimating the relationship between high-frequency query terms. Unfortunately, term t is probably not co-occurring with T-{ t i } in the document collection at all. The con-text features are hence helpful for low-frequency query terms that share common contexts in search results. More specifically, we generate the context vectors from the list of pairs &lt;document ID, relevance score&gt;, which can be obtained from the search context features, we are required to retrieve documents. The retrieval performance may affect the quality of the context features and the process is time-consuming. 3.1 Experiment Settings We conduct extensive experiments on NTCIR-4 and NTCIR-5 English-English ad-hoc IR tasks. Table 1 shows the statistics of the data collections. We evaluate our methods with description queries, whose average length is 14.9 query terms. Both queries and documents are stemmed with the Porter stemmer and stop words are re-moved. The remaining query terms for each query topic form a query term space T . Three retrieval models, the vector space model (TFIDF), the language model (Indri) and the probabilistic model (Okapi), are constructed using Lemur Toolkit [21], for examining the robustness of our methods across different frameworks. MAP is used as evaluation metric for top 1000 documents retrieved. To ensure the quality of the training dataset, we remove the poorly-performing queries whose average precision is below 0.02. As different retrieval models have different MAP on the same queries, there are different numbers of training and test instances in different models. We up-sample the positive instances by repeating them up to the same number as the nega-tive ones. Table 2 summarizes the settings for training instances. 3.2 Performance of Regression Function evaluate the prediction accuracy of our regression function r : where R 2 explains the variation between true label  X   X  =  X  X  X   X   X   X   X  X  X  X  X  X  X  X  X  X   X   X  X  X  X  X  X / X  X  X  X  y  X  is the mean of the ground truth. 
Table 3 shows the R 2 values of different combinations of features over different retrieval models, where two other features are taken into account for comparison. Content load ( Cl ) [14] gives unequal importance to words with different POS. Our modified content load (m-Cl) sets weight of a noun as 1 and the weights of adjectives, verbs, and participles as 0.147 for IR. Our m-SCS extends the simplified clarity score collection language models (unigram distributions). 
It can be seen that our function r is quite independent of retrieval models. The per-formance of the statistical features is better than that of the linguistic features because the statistical features reflect the statistical relationship between query terms in the document collections. Combining both outperforms each one, which reveals both features are complementary. The improvement by m-Cl and m-SCS is not clear due to their similarity to the other features. Combining all features achieves the best R 2 value 0.945 in average, which guarantees us a large portion of explainable variation in y and hence our regression model r is reliable. 3.3 Correlation between Feature and MAP Yet another interesting aspect of this study is to find out a set of key features that play the variance of function r . This task can usually be done in ways fully-addressed in regression diagnostics and subset selection, each with varying degrees of complexity. One common method is to apply correlation analysis over the response and each pre-dictor, and look for highly-correlated predictor-response pairs. 
Three standard correlation coefficients are involved, including Pearson's product-moment correlation coefficient, Kendall's tau, and Spearman's rho. The results are given in Fig. 2, where x-coordinate denotes features and y-coordinate denotes the value of correlation coefficient. From Fig. 2, two context features,  X  X osine X  and  X  X o-sineinc X , are found to be positively-and highly-correlated (  X  &gt;0.5) with MAP, under Pearson's coefficient. The correlation betw een the term-term context feature (cosine) and MAP even climbs up to 0.8. For any query term, high context feature value indi-cates high deviation in the result set caused by removal of the term from the query topic. The findings suggest that the drastic changes incurred in document ranking by removal of a term can be a good predictor. The tradeoff is the high cost in feature computation because a retrieval processing is required. The co-occurrence features such as PMI, LLR, and  X  2 also behave obviously correlated to MAP. The minimum value of LLR correlates more strongly to MAP than the maximum one does, which means that the independence between query terms is a useful feature. 
In the linguistic side, we find that two features  X  X ize X  and  X  X hrase X  show positive, medium-degree correlation (0.3&lt;  X  &lt;0.5) with MAP. Intuitively, a longer term might naturally be more useful as a query term than a shorter one is; this may not always be the case, but generally it is believed a shorter term is less informative due to the am-biguity it encompasses. The same rationale also applies to  X  X hrase X , because terms of noun phrases usually refer to a real-world event, such as  X 911 attack X  and  X 4th of July X , which might turn out to be the key of the topic. 
We also notice that some features, such as  X  X oun X  and  X  X erb X , pose positive influ-ence to MAP than others do, which shows high concordance to a common thought in NLP that nouns and verbs are more informative than other type of words. To our surprises, NE features such as  X  X erson X ,  X  X eo X ,  X  X rg X  and  X  X ime X  do not show as high sufficient enough. Features  X  X df X  and  X  X -SCS X  whose correlation is highly notable have positive impacts. It supports that the statistical features have higher correlation values than the linguistics ones. 3.4 Evaluation on Information Retrieval In this section, we devise experiments for testing the proposed query formulation algorithms. The benchmark collections are NTCIR-4 and NTCIR-5. The experiments can be divided into two parts: the first part is a 5-fold cross-validation on NTCIR-4 dataset, and in the second part we train the models on NTCIR-4 and test them on NTCIR-5. As both parts differ only in assignment of the training/test data, we will stick with the details for the first half (cross-validation) in the following text. 
The result is given in Table 4. Evaluation results on NTCIR-4 and NTCIR-5 are presented in the upper-and lower-half of the table, respectively. We offer two base-line methods in the experiments:  X  X L1 X  puts together all the query terms into one query string, while  X  X L2 X  only consider nouns as query terms since nouns are claimed to be more informative in several previous works. Besides, the upper bound UB is presented in the benchmark: for each topic, we permute all sub queries and discover the sub-query with the highest MAP. As term selection can also be treated as a classification problem, we use the same features of our regression function r to train two SVM classifiers, Gen-C and Red-C. Gen-C selects terms classified as  X  X ffective X  while Red-C removes terms classified as  X  X neffective X . Gen-R and Red-R denote our Generation and Reduction algorithms, respectively. The retrieval results are presented in terms of MAP. Gain ratios in MAP with respect to the two baseline methods are each method (against the BL1) by viewing AP values obtained in all query session as data points, with p &lt;0.01 marked ** and p &lt;0.05 marked * . 
From Table 4, the MAP difference between two baseline methods is small. This might be because some nouns are still noisy for IR. The four generation and reduction methods significantly outperform the baseline methods. We improve the baseline methods by 5.60% to 11.9% in the cross-validation runs and on NTCIR-5 data. This result shows the robustness and reliability of the proposed algorithms. Furthermore, all the methods show significant improvements when applied to certain retrieval mod-els, such as Indri and TFIDF; performance gain with Okapi model is less significant on NTCIR-5 data, especially when reduction algorithm is called for. The regression methods generally achieve better MAP than the classification methods. This is be-cause the regression methods always select the most informative terms or drop the most ineffective terms among those that are not selected yet. The encouraging evaluation results show that, despite the additional costs on iterative processing, the performance of the proposed algorithms is effective across different benchmark col-lections, and based on a query term space T , the algorithms are capable of suggesting better ways to form a query. 
We further investigate the impact of various ranking schemes based on our pro-posed algorithms. The ranking scheme in the Generation algorithm (or the Reduction algorithm) refers to an internal ranking mechanism that decides which term shall be included in (or discarded away). Three types of ranking schemes are tested based on our regression function r.  X  max-order X  always returns the term that is most likely to contribute relevance to a query topic,  X  X in-order X  returns the term that is most likely to bring in noise, and  X  X andom-order X  returns a randomly-chosen term. Figure 3 shows the MAP curve for each scheme by connecting the dots at (1, MAP (1) ), ... , (n, MAP (n) ), where MAP (i) is the MAP obtained at iteration i . It tells that the performance curves in the generation process share an interesting tendency: the curves keep going up in first few iterations, while after the maximum (locally to each method) is reached, they begin to go down rapidly. The findings might informally establish the validity of our assumption that a longer query topic might encompass more noise terms. The same  X  X p-and-down X  pattern does not look so obvious in the reduction process; however, if we take the derivative of the curve at each iteration i (i.e., the performance gain/loss ratio), we might find it resembles the pattern we have discovered. We may also find that, in the generation process, different ranking schemes come with varying degrees of MAP gains. The ranking scheme  X  X ax-order X  constantly provides the largest performance boost, as opposed to the other two schemes. In the reduction process,  X  X ax-order X  also offers the most drastically per-formance drop than the other two schemes do. Generally, in the generation process, the best MAP value for each setting might take place somewhere between iteration n/2 to 2n/3 , given n is the size of the query topic. In this paper, we propose an approach to measure and predict the impact of query terms, based on the discovery of linguistic, co-occurrence, and contextual features, which are analyzed by their correlation with MAP. Experimental results show that our query formulation approach significantly improves retrieval performance. 
The proposed method is robust and the experimental results are consistent on dif-ferent retrieval models and document collections. In addition, an important aspect of this paper is that we are able to capture cer tain characteristics of query terms that are highly effective for IR. Aside from intuitive ideas that informative terms are often lengthy and tagged nouns as their POS category, we have found that the statistical features are more likely to decide the effectiveness of query terms than linguistics ones do. We also observe that context features are mostly correlated to MAP and thus are most powerful for term difficulty prediction. However, such post-retrieval features require much higher cost than the pre-retrieval features, in terms of time and space. 
The proposed approach actually selects lo cal optimal query term during each itera-tion of generation or reduction. The reason for this greedy algorithm is that it is inap-propriate to exhaustively enumerate all sub-queries for online applications such as search engines. Further, it is challenging to automatically determine the value of pa-rameter k in our algorithms, which is selected to optimize the MAP of each query topic. Also, when applying our approach to web applications, we need web corpus to calculate the statistical features for training models. 
