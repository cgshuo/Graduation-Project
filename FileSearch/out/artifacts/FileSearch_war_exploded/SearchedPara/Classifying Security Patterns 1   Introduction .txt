 A pattern is a packaged reusable solution to a recurrent problem. Design patterns embody the experience and knowledge of many designers and when properly catalogued, they provide a repository of useful solutions for different types of problems [8]. They have shown their value in many projects and have been adopted by many institutions. Design patterns have been extended to other aspects of software, first to architectural aspects of design, then to the analysis stage. Analysis and design patterns are now well established as a convenient and reusable way to build high-quality object-oriented software. 
Security has become an important concern in current systems. The main objectives of security are to protect the confidentiality, integrity, and availability of data. Data is a valuable resource and it has become the target of many attacks by people who hope to gain monetary advantages, make political statements, or just vandalize. Security Authentication, Access Control and Authorization, Logging, Cryptography, and Intrusion Detection. Security patterns describe mechanisms that fall into these categories (or combinations thereof) to stop or mitigate attacks as well as the abstract models that guide the design of these mechanisms. Security patterns join the extensive knowledge accumulated about security with the structure provided by patterns to provide guidelines for secure system construction and evaluation. A good number of security patterns have been described in the literature and several catalogs have appeared [3, 9, 11, 12, 13, 14]. 
However, it is not enough to have a catalog of security patterns, we also need a guidance for the designers about how to select appropriate patterns. We are seeing the appearance of more and more complex systems, incorporating web access and all kinds of distribution structures. Security should be applied in the whole life cycle of applications and at each stage patterns can be applied to provide specific security into her design. Designers need guidance about how to select appropriate patterns. A step in this direction is a good classification of security patterns. We present here some possible classifications based on archit ectural concerns, architectural layers, and some relationships between patterns. We show the use of these classifications through a pattern diagram, where the designer can na vigate in order to select appropriate patterns. 
Sections 2 and 3 show several classifications based on different viewpoints for security patterns. Section 4 introduces a diagram for describing relationships based on those classifications. The last section presents some conclusions and future work. Because we consider security patterns to be architectural patterns, we should look at software architecture classifications. [1] classifies architectural patterns using the type of concerns they address, e.g. Layered Structure, Data Flow, Adaptation, User Interaction, Distribution. This means we sh ould classify security patterns according to Authenticator , Remote Authenticator / Authorizer , and Credential (see [3] for references to these patterns). Chapters 7 and 8 of [12] are organized in this way. 
We can think of a computer system as a hierarchy of layers, where the application layer uses the services of the database and operating system layers, which in turn, execute on a hardware layer. These layers provide another dimension for classification. We can define patterns at all levels. This allows a designer to make sure that all levels are secured, and also makes easier propagating down the high-level constraints. At the highest level we have patterns that describe the use of security models to define access control to the application objects: Authorization (Access Matrix) , Role-Based Access Control (RBAC) , Reference Monitor , Multilevel Security , Attribute-Based Access Control (ABAC) . A recent paper defines Session-Based versions of those Controlled Virtual Address Space , and others. Patterns for web services security include: Application Firewall, XML Firewall, XACML Authorization, XACML Access Control Evaluation , and WSPL [2] (References for all these are found in [3]). Fig. 1 shows the combination of concerns and levels where patterns with the same concern, e.g. Authentication, may appear in multiple levels. 
The life cycle stage where the pattern is applied is another dimension. For approaches are selected at the design stage. Kubo et al. [10] have proposed an automated relationship analysis technique for patterns. This technique utilizes existing text processing techniques (such as TF-IDF and vector space model) to extract patterns from documents and to calculate the strength of pattern relationships based on document similarity. We apply now this technique to security patterns belonging to four catalogs: Fernandez X  firewall patterns [12], legal cases pattern [6], and other patterns, together with Yoder's architectural patterns [15]. Fig. 2 visualizes some of the results. The resulting graph is a specific classification, which suggests several useful relationships including some which are not explicitly specified in the original documents. For example:  X  The pattern Secure Handling of Legal Cases [6] is recognized as a sub-pattern  X  As another example, there is a Similar Forces relation (i.e. relation in which 
These newly found relations are useful for selecting security patterns belonging to several catalogs. This technique can extract appropriate relationships in a catalog and across different catalogs. Since this techniqu e is automated, this technique is more scalable than other manual classification techniques. However, there is a tradeoff between scalability and validity; manual classification techniques are superior in terms of result X  X  validity because they are based on experts X  considerations. Fig. 3 shows a pattern diagram that relates some operating system security patterns [12]. A pattern diagram uses these classifications to help the designer navigate in the design space. For example, an operating system designer can start from a Secure Process and use a Controlled Pro cess Creator to create new processes in a secure Controlled Virtual Address Space (with controlled rights). The general structure of the virtual address space is defined through a Virtual Address Space Structure Selection. Patterns can be classified according to ma ny viewpoints. A good classification can make their selection easier and more precise. We have shown three possibilities: using as reference the architectural/functional objectives of the patterns, using as reference the architectural layers of a system, and looking at linguistic similarities in their descriptions. Combining these classifications and expressing them as pattern diagrams which summarize the relevant patterns at a given stage or for a given concern, can guide designers in the selection of appropriate patterns. 
Future work will include refining these classifications and incorporate them in a proposed methodology [7] and the development of further patterns. We are also working on the use of patterns combined with Model-Driven Development to produce secure systems. We will also check the tradeoff between manual and automatic classifications and clarify the applicability of each classification technique. Composition of patterns to accomplish more complex properties is another open problem. Finally, how well the patterns cover the space of requirements needs to be evaluated. 
