 In recent years, standardized examinations have proved a fertile source of evaluation data for lan-guage processing tasks. They are valuable for many reasons: they represent facets of language under-standing recognized as important by educational ex-perts; they are organized in various formats designed to evaluate specific capabilities; they are yardsticks by which society measures educational progress; and they affect a large number of people.

Previous researchers have taken advantage of this material to test both narrow and general language processing capabilities. Among the narrower tasks, the identification of synonyms and antonyms has been studied by (Landauer and Dumais, 1997; Mo-hammed et al., 2008; Mohammed et al., 2011; Tur-ney et al., 2003; Turney, 2008), who used ques-tions from the Test of English as a Foreign Lan-guage (TOEFL), Graduate Record Exams (GRE) and English as a Second Language (ESL) exams. Tasks requiring broader competencies include logic puzzles and reading comprehension. Logic puzzles drawn from the Law School Administration Test (LSAT) and the GRE were studied in (Lev et al., 2004), which combined an extensive array of tech-niques to solve the problems. The DeepRead sys-tem (Hirschman et al., 1999) initiated a long line of research into reading comprehension based on test prep material (Charniak et al., 2000; Riloff and The-len, 2000; Wang et al., 2000; Ng et al., 2000).
In this paper, we study a new class of problems intermediate in difficulty between the extremes of synonym detection and general question answer-ing -the sentence completion questions found on the Scholastic Aptitude Test (SAT). These questions present a sentence with one or two blanks that need to be filled in. Five possible words (or short phrases) are given as options for each blank. All possible an-swers except one result in a nonsense sentence. Two examples are shown in Figure 1.

The questions are highly constrained in the sense that all the information necessary is present in the sentence itself without any other context. Neverthe-less, they vary widely in difficulty. The first of these examples is relatively simple: the second half of the sentence is a clear description of the type of behavior characterized by the desired adjective. The second example is more sophisticated; one must infer from the contrast between medicine and poison that the correct answer involves a contrast, either useless vs. effective or curative vs. toxic . Moreover, the first, in-correct, possibility is perfectly acceptable in the con-text of the second clause alone; only irrelevance to the contrast between medicine and poison eliminates it. In general, the questions require a combination of semantic and world knowledge as well as occasional logical reasoning. We study the sentence comple-tion task because we believe it is complex enough to pose a significant challenge, yet structured enough that progress may be possible.

As a first step, we have approached the prob-lem from two points-of-view: first by exploiting lo-cal sentence structure, and secondly by measuring a novel form of global sentence coherence based on latent semantic analysis. To investigate the use-fulness of local information, we evaluated n-gram language model scores, from both a conventional model with Good-Turing smoothing, and with a re-cently proposed maximum-entropy class-based n-gram model (Chen, 2009a; Chen, 2009b). Also in the language modeling vein, but with potentially global context, we evaluate the use of a recurrent neural network language model. In all the language modeling approaches, a model is used to compute a sentence probability with each of the potential com-pletions. To measure global coherence, we propose a novel method based on latent semantic analysis (LSA). We find that the LSA based method performs best, and that both local and global information can be combined to exceed 50% accuracy. We report re-sults on a set of questions taken from a collection of SAT practice exams (Princeton-Review, 2010), and further validate the methods with the recently proposed MSR Sentence Completion Challenge set (Zweig and Burges, 2011).
 Our paper thus makes the following contributions: First, we present the first published results on the SAT sentence completion task. Secondly, we eval-uate the effectiveness of both local n-gram informa-tion, and global coherence in the form of a novel LSA-based metric. Finally, we illustrate that the lo-cal and global information can be effectively fused.
The remainder of this paper is organized as fol-lows. In Section 2 we discuss related work. Section 3 describes the language modeling methods we have evaluated. Section 4 outlines the LSA-based meth-ods. Section 5 presents our experimental results. We conclude with a discussion in Section 6. The past work which is most similar to ours is de-rived from the lexical substitution track of SemEval-2007 (McCarthy and Navigli, 2007). In this task, the challenge is to find a replacement for a word or phrase removed from a sentence. In contrast to our SAT-inspired task, the original answer is indicated. For example, one might be asked to find alternates for match in  X  X fter the match , replace any remain-ing fluid deficit to prevent problems of chronic de-hydration throughout the tournament. X  Two consis-tently high-performing systems for this task are the KU (Yuret, 2007) and UNT (Hassan et al., 2007) systems. These operate in two phases: first they find a set of potential replacement words, and then they rank them. The KU system uses just an N-gram lan-guage model to do this ranking. The UNT system uses a large variety of information sources, and a language model score receives the highest weight. N-gram statistics were also very effective in (Giu-liano et al., 2007). That paper also explores the use of Latent Semantic Analysis to measure the degree of similarity between a potential replacement and its context, but the results are poorer than others. Since the original word provides a strong hint as to the pos-sible meanings of the replacements, we hypothesize that N-gram statistics are largely able to resolve the remaining ambiguities. The SAT sentence comple-tion sentences do not have this property and thus are more challenging.

Related to, but predating the Semeval lexical sub-stitution task are the ESL synonym questions pro-posed by Turney (2001), and subsequently consid-ered by numerous research groups including Terra and Clarke (2003) and Pado and Lapata (2007). These questions are similar to the SemEval task, but in addition to the original word and the sentence context, the list of options is provided. Jarmasz and Szpakowicz (2003) used a sophisticated thesaurus-based method and achieved state-of-the art perfor-mance, which is 82%.

Other work on standardized tests includes the syn-onym and antonym tasks mentioned in Section 1, and more recent work on a SAT analogy task in-troduced by (Turney et al., 2003) and extensively used by other researchers (Veale, 2004; Turney and Littman, 2005; D. et al., 2009). Perhaps the most straightforward approach to solv-ing the sentence completion task is to form the com-plete sentence with each option in turn, and to eval-uate its likelihood under a language model. As discussed in Section 2, this was found be be very effective in the ranking phase of several SemEval systems. In this section, we describe the suite of state-of-the-art language modeling techniques for which we will present results. We begin with n-gram models; first a classical n-gram backoff model (Chen and Goodman, 1999), and then a recently pro-posed class-based maximum-entropy n-gram model (Chen, 2009a; Chen, 2009b). N-gram models have the obvious disadvantage of using a very limited context in predicting word probabilities. There-fore we evaluate the recurrent neural net model of (Mikolov et al., 2010; Mikolov et al., 2011b). This model has produced record-breaking perplexity re-sults in several tasks (Mikolov et al., 2011a), and has the potential to encode sentence-span information in the network hidden-layer activations. We have also evaluated the use of parse scores, using an off-the-shelf stochastic context free grammar parser. How-ever, the grammatical structure of the alternatives is often identical. With scores differing only in the fi-nal non-terminal/terminal rewrites, this did little bet-ter than chance. The use of other syntactically de-rived features, for example based on a dependency parse, are likely to be more effective, but we leave this for future work. 3.1 Backoff N-gram Language Model Our baseline model is a Good-Turing smoothed model trained with the CMU language modeling toolkit (Clarkson and Rosenfeld, 1997). For the SAT task, we used a trigram language model trained on 1.1B words of newspaper data, described in Section 5.1. All bigrams occurring at least twice were re-tained in the model, along with all trigrams occur-ring at least three times. The vocabulary consisted of all words occurring at least 100 times in the data, along with every word in the development or test sets. This resulted in a 124k word vocabulary and 59M n-grams. For the Conan Doyle data, which we henceforth refer to as the Holmes data (see Section 5.1), the smaller amount of training data allowed us to use 4-grams and a vocabulary cutoff of 3. This re-sulted in 26M n-grams and a 126k word vocabulary. 3.2 Maximum Entropy Class-Based N-gram Word-class information provides a level of abstrac-tion which is not available in a word-level lan-guage model; therefore we evaluated a state-of-the-art class based language model. Model M (Chen, 2009a; Chen, 2009b) is a recently proposed class based exponential n-gram language model which has shown improvements across a variety of tasks (Chen, 2009b; Chen et al., 2009; Emami et al., 2010). The key ideas are the modeling of word n-gram probabilities with a maximum entropy model, and the use of word-class information in the defini-tion of the features. In particular, each word w is assigned deterministically to a class c , allowing the n-gram probabilities to be estimated as the product of class and word parts Both components are themselves maximum entropy n-gram models in which the probability of a word or class label l given history h is determined by exp( P k f k ( h, l )) . The features f k ( h, l ) used are the presence of various patterns in the concatena-tion of hl , for example whether a particular suffix is present in hl . 3.3 Recurrent Neural Net Language Model Many of the questions involve long-range depen-dencies between words. While n-gram models have no ability to explicitly maintain long-span context, the recently proposed recurrent neural-net model of (Mikolov et al., 2010) does. Related approaches have been proposed by (Sutskever et al., 2011; Socher et al., 2011). In this model, a set of neu-ral net activations s ( t ) is maintained and updated at each sentence position t . These activations encapsu-late the sentence history up to the t th word in a real-valued vector which typically has several hundred dimensions. The word at position t is represented as a binary vector w ( t ) whose length is the vocabulary size, and with a  X 1 X  in a position uniquely associated with the word, and  X 0 X  elsewhere. w ( t ) and s ( t ) are concatenated to predict an output distribution over words, y ( t ) . Updating is done with two weight ma-trices u and v and nonlinear functions f () and g () (Mikolov et al., 2011b): with f () being a sigmoid and g () a softmax: The output y ( t ) is a probability distribution over words, and the parameters u and v are trained with back-propagation to minimize the Kullback-Leibler (KL) divergence between the predicted and observed distributions. Because of the recurrent connections, this model is similar to a nonlinear infinite impulse response (IIR) filter, and has the potential to model long span dependencies. Theoretical considerations (Bengio et al., 1994) indicate that for many prob-lems, this may not be possible, but in practice it is an empirical question. Latent Semantic Analysis (LSA) (Deerwester et al., 1990) is a widely used method for representing words and documents in a low dimensional vector space. The method is based on applying singular value decomposition (SVD) to a matrix W repre-senting the occurrence of words in documents. SVD results in an approximation of W by the product of three matrices, one in which each word is rep-resented as a low-dimensional vector, one in which each document is represented as a low dimensional vector, and a diagonal scaling matrix. The simi-larity between two words can then be quantified as the cosine-similarity between their respective scaled vectors, and document similarity can be measured likewise. It has been used in numerous tasks, rang-ing from information retrieval (Deerwester et al., 1990) to speech recognition (Bellegarda, 2000; Coc-caro and Jurafsky, 1998).

To perform LSA, one proceeds as follows. The input is a collection of n documents which are ex-pressed in terms of words from a vocabulary of size m . These documents may be actual documents such as newspaper articles, or simply as in our case no-tional documents such as sentences. Next, a m x n matrix W is formed. At its simplest, the ij th entry contains the number of times word i has occurred in document j -its term frequency or TF value. More conventionally, the entry is weighted by some no-tion of the importance of word i , for example the negative logarithm of the fraction of documents that contain it, resulting in a TF-IDF weighting (Salton et al., 1975). Finally, to obtain a subspace represen-tation of dimension d , W is decomposed as where U is m x d , V T is d x n , and S is a d x d diag-onal matrix. In applications, d &lt;&lt; n and d &lt;&lt; m ; for example one might have a 50 , 000 word vocab-ulary and 1 , 000 , 000 documents and use a 300 di-mensional subspace representation.

An important property of SVD is that the rows of U S -which represents the words -behave sim-ilarly to the original rows of W , in the sense that the cosine similarity between two rows in U S ap-proximates the cosine similarity between the corre-sponding rows in W . Cosine similarity is defined as 4.1 Total Word Similarity Perhaps the simplest way of doing sentence comple-tion with LSA is to compute the total similarity of a potential answer a with the rest of the words in the sentence S , and to choose the most related option. We define the total similarity as: When the completion requires two words, total sim-ilarity is the sum of the contributions for both words. This is our baseline method for using LSA, and one of the best methods we have found. 4.2 Sentence Reconstruction Recall that LSA approximates a weighted word-document matrix W as the product of low rank matrices U and V along with a scaling matrix S : W  X  U SV T . Using singular value decomposition, this is done so as to minimize the mean square re-construction error P ij Q 2 ij where Q = W  X  U SV T . From the basic definition of LSA, each column of W (representing a document) is represented as that is, as a linear combination of the set of basis functions formed by the columns of U S , with the combination weights specified in V T j . When a new document is presented, it is also possible to repre-sent it in terms of the same basis vectors. Moreover, we may take the reconstruction error induced by this representation to be a measure of how consistent the new document is with the original set of documents used to determine U S and V (Bellegarda, 2000).
It remains to represent a new document in terms of the LSA bases. This is done as follows (Deer-wester et al., 1990; Bellegarda, 2000), again with the objective of minimizing the reconstruction error. First, note that since U is column-orthonormal, (1) implies that Thus, if we notionally index a new document by p , we proceed by forming a new column (document) vector W p using the standard term-weighting, and then find its LSA-space representation V p using (2). We can evaluate the reconstruction quality by insert-ing the result in (1). The reconstruction error is then Note that if all the dimensions are retained, the re-construction error is zero; in the case that only the highest singular vectors are used, however, it is not. Due to the fact that the sentences vary in length we choose the number of retained singular vectors as a fraction f of the sentence length. If the answer has n words we use the top nf components. In practice, a f of 1.2 was selected on the basis of development set results. 4.3 A LSA N-gram Language Model In the context of speech recognition, LSA has been combined with classical n-gram language models in (Coccaro and Jurafsky, 1998; Bellegarda, 2000). The crux of this idea is to interpolate an n-gram lan-guage model probability with one based on LSA, with the intuition that the standard n-gram model will do a good job predicting function words, and the LSA model will do a good job on words pre-dicted by their long-span context. This logic makes sense for the sentence completion task as well, mo-tivating us to evaluate it.

To do this, we adopt the procedure of (Coccaro and Jurafsky, 1998), using linear interpolation be-tween the n-gram and LSA probabilities: p ( w | history ) = The probability of a word given its history is com-puted by the LSA model in the following way. Let h be the sum of all the LSA word vectors in the his-tory. Let m be the smallest cosine similarity be-tween h and any word in the vocabulary V : m = min w  X  V sim ( h, w ) . The probability of a word w in the context of history h is given by Since similarity can be negative, subtracting the minimum ( m ) ensures that all the estimated prob-abilities are between 0 and 1 . 4.4 Improving Efficiency and Expressiveness Given the basic framework described above, a num-ber of enhancements are possible. In terms of ef-ficiency, recall that it is necessary to perform SVD on a term-document matrix. The data we used was grouped into paragraph  X  X ocuments, X  of which there were over 27 million, with 2.6 million unique words. While the resulting matrix is highly sparse, it is nev-ertheless impractical to perform SVD. We overcome this difficulty in two ways. First, we restrict the set of documents used to those which are  X  X elevant X  to a given test set. This is done by requiring that a doc-ument contain at least one of the potential answer-words. Secondly, we restrict the vocabulary to the set of words present in the test set. For the sentence-reconstruction method of Section 4.2, we have found it convenient to do data selection per-sentence .
To enhance the expressive power of LSA, the term vocabulary can be expanded from unigrams to bi-grams or trigrams of words, thus adding information about word ordering. This was also used in the re-construction technique. 5.1 Data Resources We present results with two datasets. The first is taken from 11 Practice Tests for the SAT &amp; PSAT 2011 Edition (Princeton-Review, 2010). This book contains eleven practice tests, and we used all the sentence completion questions in the first five tests as a development set, and all the questions in the last six tests as the test set. This resulted in sets with 95 and 108 questions respectively. Additionally, we re-port results on the recently released MSR Sentence Completion Challenge (Zweig and Burges, 2011). This consists of a set of 1 , 040 sentence completion questions based on sentences occurring in five Co-nan Doyle Sherlock Holmes novels, and is identical in format to the SAT questions. Due to the source of this data, we refer to it as the Holmes data .
To train models, we have experimented with a variety of data sources. Since there is no publi-cally available collection of SAT questions suitable to training, our methods have all relied on unsu-pervised data. Early on, we ran a set of experi-ments to determine the relevance of different types of data. Thinking that data from an encyclopedia Data Dev % Correct Test % Correct Encarta 26 33 Wikipedia 32 31 LA Times 39 42 might be useful, we evaluated an electronic version of the 2003 Encarta encyclopedia, which has ap-proximately 29M words. Along similar lines, we used a collection of Wikipedia articles consisting of 709M words. This data is the entire Wikipedia as of January 2011, broken down into sentences, with fil-tering to remove sentences consisting of URLs and Wiki author comments. Finally, we used a com-mercial newspaper dataset consisting of all the Los Angeles Times data from 1985 to 2002, containing about 1.1B words. These data sources were evalu-ated using the baseline n-gram LM approach of Sec-tion 3.1. Initial experiments indicated that that the Los Angeles Times data is best suited to this task (see Table 1), and our SAT experiments use this source. For the MSR Sentence Completion data, we obtained the training data specified in (Zweig and Burges, 2011), consisting of approximately 500 19th-century novels available from Project Guten-berg, and comprising 48M words. 5.2 Human Performance To provide human benchmark performance, we asked six native speaking high school students and five graduate students to answer the questions on the development set. The high-schoolers attained 87% accuracy and the graduate students 95%. Zweig and Burges (2011) cite a human performance of 91% on the Holmes data. Statistics from a large cross-section of the population are not available. As a fur-ther point of comparison, we note that chance per-formance is 20%. 5.3 Language Modeling Results Table 2 summarizes our language modeling results on the SAT data. With the exception of the base-line backoff n-gram model, these techniques were too computationally expensive to utilize the full Los Angeles Times corpus. Instead, as with LSA, a  X  X el-evant X  corpus was selected of the sentences which contain at least one answer option from either the
Method Data (Dev / Test) Dev Test 3-gram GT 1.1B / 1.1B 39% 42% Model M 193M / 236M 35 41 RNN 36M / 44M 37 42 LSA-LM 293M / 358 M 48 44
Method Dev ppl Dev Test ppl Test 3-gram GT 195 36% 190 44% Model M 178 36 175 42 RNN 147 37 144 42 development or test set. Separate subsets were made for development and test data. This data was further sub-sampled to obtain the training set sizes indicated in the second column. For the LSA-LM, an interpo-lation weight of 0.1 was used for the LSA score, de-termined through optimization on the development set. We see from this table that the language models perform similarly and achieve just above 40% on the test set.

To make a more controlled comparison that nor-malizes for the amount of training data, we have trained Model M, and the Good-Turing model on the same data subset as the RNN, and with the same vocabulary. In Table 3, we present perplexity re-sults on a held-out set of dev/test-relevant Los Ange-les Times data, and performance on the actual SAT questions. Two things are notable. First, the re-current neural net has dramatically lower perplexity than the other methods. This is consistent with re-sults in (Mikolov et al., 2011a). Secondly, despite the differences in perplexity, the methods show little difference on SAT performance. Because Model M was not better, only uses n-gram context, and was used in the construction of the Holmes data (Zweig and Burges, 2011), we do not consider it further. 5.4 LSA Results Table 4 presents results for the methods of Sections 4.1 and 4.2. Of all the methods in isolation, the sim-ple approach of Section 4.1 -to use the total cosine similarity between a potential answer and the other words in the sentence -has performed best. The ap-proach of using reconstruction error performed very well on the development set, but unremarkably on the test set. 5.5 Combination Results A well-known trick for obtaining best results from a machine learning system is to combine a set of diverse methods into a single ensemble (Dietterich, 2000). We use ensembles to get the highest accuracy on both of our data sets.

We use a simple linear combination of the out-puts of the other models discussed in this paper. For the LSA model, the linear combination has three in-puts: the total word similarity, the cosine similarity between the sum of the answer word vectors and the sum of the rest of sentence X  X  word vectors, and the number of out-of-vocabulary terms in the answer. Each additional language model beyond LSA con-tributes an additional input: the probability of the sentence under that language model.

We train the parameters of the linear combination on the SAT development set. The training minimizes a loss function of pairs of answers: one correct and one incorrect fill-in from the same question. We use the RankNet loss function (Burges et al., 2005): where ~x are the input features for the incorrect an-swer, ~y are the features for the correct answer, ~w are the weights for the combination, and f ( z ) = log(1 + exp( z )) . We tune the regularizer via 5-fold cross validation, and minimize the loss using L-BFGS (Nocedal and Wright, 2006). The results on the SAT test set for combining various models are shown in Table 5. 5.6 Holmes Data Results To measure the robustness of our approaches, we have applied them to the MSR Sentence Completion set (Zweig and Burges, 2011), termed the Holmes data . In Table 6, we present the results on this set, along with the comparable SAT results. Note that the latter are derived from models trained with the Los Angeles Times data, while the Holmes results are derived from models trained with 19th-century novels. We see from this table that the results are similar across the two tasks. The best performing single model is LSA total word similarity.

For the Holmes data, combining the models out-performs any single model. We train the linear com-bination function via 5-fold cross-validation: the model is trained five times, each time on 3 / 5 of the data, the regularization tuned on 1 / 5 of the data, and tested on 1 / 5 . The test results are pooled across all 5 folds and are shown in Table 6. In this case, the best combination is to blend LSA, the Good-Turing language model, and the recurrent neural network. To verify that the differences in accuracy between the different algorithms are not statistical flukes, we perform a statistical significance test on the out-puts of each algorithm. We use McNemar X  X  test, which is a matched test between two classifiers (Di-etterich, 1998). We use the False Discovery Rate method (Benjamini and Hochberg, 1995) to control the false positive rate caused by multiple tests. If we allow 2% of our tests to yield incorrectly false results, then for the SAT data, the combination of the Good-Turing smoothed language model with an LSA-based global similarity model (52% accuracy) is better that the baseline alone (42% accuracy). Secondly, for the Holmes data, we can state that LSA total similarity beats the recurrent neural net-work, which in turn is better than the baseline n-gram model. The combination of all three is sig-nificantly better than any of the individual models.
To better understand the system performance and gain insight into ways of improving it, we have ex-amined the system X  X  errors. Encouragingly, one-third of the errors involve single-word questions which test the dictionary definition of a word. This is done either by stating the definition, or provid-ing a stereotypical use of the word. An example of the first case is:  X  X reat artists are often prophetic (visual) : they perceive what we cannot and antici-pate the future long before we do. X  (The system X  X  incorrect answer is in parentheses.) An example of the second is:  X  X ne cannot help but be moved by Theresa X  X  heartrending (therapeutic) struggle to overcome a devastating and debilitating accident. X 
At the other end of the difficulty spectrum are questions involving world knowledge and/or logical implications. An example requiring both is,  X  X any fear that the ratification (withdrawal) of more le-nient tobacco advertising could be detrimental to public health. X  About 40% of the errors require this sort of general knowledge to resolve. Based on our analysis, we believe that future research could prof-itably exploit the structured information present in a dictionary. However, the ability to identify and manipulate logical relationships and embed world knowledge in a manner amenable to logical manip-ulation may be necessary for a full solution. It is an interesting research question if this could be done implicitly with a machine learning technique, for ex-ample recurrent or recursive neural networks. In this paper we have investigated methods for answering sentence-completion questions. These questions are intriguing because they probe the abil-ity to distinguish semantically coherent sentences from incoherent ones, and yet involve no more con-text than the single sentence. We find that both local n-gram information and an LSA-based global coher-ence model do significantly better than chance, and that they can be effectively combined.
