 Today, a number of algorithms exist for constructing tag hierar-chies from social tagging data. While these algorithms were de-signed with ontological goals in mind, we know very little about their properties from an information retrieval perspective, such as whether these tag hierarchies support efficient navigation in social tagging systems. The aim of this paper is to investigate the useful-ness of such tag hierarchies (sometimes also called folksonomies -from folk-generated taxonomy) as directories that aid navigation in social tagging systems. To this end, we simulate navigation of directories as decentralized search on a network of tags using Kleinberg X  X  model. In this model, a tag hierarchy can be applied as background knowledge for decentralized search. By constraining the visibility of nodes in the directories we aim to mimic typical constraints imposed by a practical user interface (UI), such as lim-iting the number of displayed subcategories or related categories. Our experiments on five different social tagging datasets show that existing tag hierarchy algorithms can support navigation in theory, but our results also demonstrate that they face tremendous chal-lenges when user interface (UI) restrictions are taken into account. Based on this observation, we introduce a new algorithm that con-structs efficiently navigable directories on our datasets. The results are relevant for engineers and scientists aiming to improve naviga-bility of social tagging systems.
 H.5.4 [ Information Interfaces and Presentation ]: Hypertext/ Hy-permedia X  Navigation ; H.3.4 [ Information Storage and Retrieval ]: Systems and Software X  Information networks ; H.5.3 [ Information Interfaces and Presentation ]: Group and Organization Interfaces X  Collaborative computing Experimentation, Measurement, Algorithms Navigation, Simulation, Social Tagging, Folksonomy
Social tagging systems allow users to organize information in an unconstrained manner by freely choosing so-called tags to anno-tate a set of potentially diverse resources, such as photos in Flickr, Web pages in Delicious or scientific articles in CiteULike [11]. In addition to using tagging systems for personal organization of in-formation, users can share annotations with each other.

In past research, our research community has aimed to capture emergent semantic structures from the vocabulary originating in such systems, for example in the form of tag hierarchies [3, 4, 8, 12, 13] or so-called  X  X olksonomies 1  X   X  from folk-generated tax-onomies. However, this line of research has mainly pursued an on-tological goal, and did not focus on the usefulness of folksonomies for navigation . For example [3, 12, 23] propose algorithms for constructing semantically sound tag hierarchies from social tagging data. A detailed analysis of approaches to semantic relatedness of tags in social tagging systems can be found in e.g. [7]. In our own previous work [19, 20], we investigated the extent to which tag se-mantics are influenced by user motivation and usage practices.
While there are a number of studies on the usefulness of tags for general information retrieval purposes, we know very little about the usefulness of tag hierarchies as directories , i.e. to support ac-tivities such as browsing or navigation . Recent theoretical work in this area for example has shown that the ability of tags to efficiently encode resources for later retrieval decreases over time [9]. In our own previous work [10], we evaluated the suitability of different tag hierarchies to support navigation in social tagging systems on a theoretical level -not taking user interface constraints into account. The practicability and usefulness of integrating tag hierarchies into user interfaces of social tagging systems thus remains unclear, and -to the best of our knowledge -has not been investigated so far.
This paper sets out to address this gap. We aim to assess the usefulness of tag hierarchies for supporting navigation processes in user interfaces of social tagging systems by adopting simulation as our method of choice. We start by hypothetically inserting excerpts of tag hierarchies into user interfaces of tagging systems similar to the way concept hierarchies are used in other systems, such as the Google Directory, to guide users to resources (see Figure 1 for an example). We then model a user navigating this hypothetical user interface: The user starts at an arbitrary tag and navigates to another tag in the system using the directory. Adopting Kleinberg X  X  decen-tralized search algorithm, we simulate this by using tag hierarchies as background knowledge that guides a navigator towards the desti-nation tag. In addition, we model typical user interface restrictions through a series of adjustable parameters such as limiting the num-ber of subcategories presented to a user or constraining the number of related categories (please see Figure 1). By doing simulations, http://www.vanderwal.net/folksonomy.html Figure 1: Google Directory user interface with typical direc-tory elements including breadcrumbs, subcategories, and re-lated categories. we are able to conduct a thorough analysis of the effects of a vari-ety of user interface restrictions on the usefulness of tag hierarchies for navigating 5 different real-world tagging datasets. This allows us to obtain novel insights and draw general conclusions about the drawbacks and promises of applying tag hierarchies as directories for navigating social tagging systems. We will show that tag hier-archies can support efficient navigation in social tagging systems in theory, but common user interface restrictions impair their prac-tical suitability as a navigational aid significantly. Based on these results, we devise a novel directory algorithm capable of operating efficiently under typical user interface constraints.

In summary, this paper makes the following contributions:
The rest of this paper is organized as follows. In Section 2 we present a model for directory-based navigation using Kleinberg X  X  algorithm for decentralized search in networks. In Subsection 2.3, we introduce the parameters for modeling user interface restric-tions. In Section 3, we present our experimental setup and in Sec-tion 4 we discuss our experiment results. In Section 5 we introduce a new adaptation of an existing tag hierarchy algorithm and demon-strate how it can operate successfully under typical user interface constraints. Finally, we conclude the paper and provide some di-rections for future work.
To investigate the implications of adopting tag hierarchies as a navigational aid in tagging systems, we model and simulate such navigation. Instead of observing real user behavior, we choose sim-ulation mainly because current tagging systems do not offer direc-tory support yet and simulation provides us with better experimen-tal control and thus makes it possible to analyze different user in-terface issues across multiple datasets. In the following, we shortly introduce our simulation model and its theoretical background.
One of the research questions attracting a lot of interest in the field of networks is the relation between network structure and function, such as the relation between the structure and routing function of a network. Ever since the  X  X mall world X  experiment [26] conducted by Stanley Milgram, researchers have been intrigued by the routing efficiency or navigability question in social networks  X  how people are able to find unknown people who are, potentially, geographically and socially distant to themselves. The key aspect of this question is the absence of the global knowledge of the net-work  X  people know only their friends and therefore posses only the local knowledge of the network but are still able to find un-known people. Similar navigability has been observed in other real networks such as metabolic or neural networks, or has been an im-portant design goal for engineers of communication networks such as the Internet or different peer-to-peer networks (see e.g. [2]). Re-searchers identified the concept of similarity between nodes [22, 24, 32] or more generally the concept of distance between nodes [1, 15, 17, 18, 32] as an important aspect of establishing network-ing navigability. Combining the notion of distance between nodes with the algorithmic term of greedy routing [17], Kleinberg theo-retically introduced network navigability [15, 18] in the following way: nodes use distance to select the next node in a routing session and the greedy algorithm selects the adjacent node closest (with the smallest distance) to the current destination node. The algo-rithm and its applications have been studied in the recent literature, see e.g. [16].

In [30] the authors abstract the notion of distance as introduced by Kleinberg to a hidden distance between nodes. Hidden distances define a hidden metric spaces which governs not only routing in the network but also the network formation and emergence of net-work structural properties such as power-law degree distributions and high node clustering. The authors connect observable emergent structural properties of a network with its navigability by defin-ing a region of navigable networks in two dimensional space with clustering-coefficient [33] and power-law exponent as dimensions. On the other hand, a hidden metric space is also a geometric entity in which nodes are identified by their co-ordinates in it  X  distance between nodes is their geometric distance in that particular metric space. An interesting research question is the structure of such hid-den metric spaces that underlie observable networks. In [5], the authors introduce a model with the circle as a hidden metric space and show its effects on routing in the global airport network. In [21] the authors discuss hyperbolic geometry as a hidden metric space whereas in [6] the authors apply hyperbolic geometry as a model of the hidden metric space of the Internet and design a novel greedy Internet routing algorithm.

The relation between Kleinberg X  X  node distance and the recent work on hidden metric spaces can easily be established. In Klein-berg X  X  model, the nodes are organized into a hierarchy according to their similarity  X  the distance between two nodes corresponds then to the height of their least common ancestor in that hierarchy [18] (Adamic [1] and Watts [32] introduce similar distance defi-nitions). Hyperbolic geometry, as well as a hierarchy, distributes distances exponentially  X  it is, therefore, possible to approximate a hyperbolic metric space by a tree [21].
We adopt a a tripartite hypernetwork model for social tagging systems where V = R  X  U  X  T , and R is the resource set, U is the user set, and T is the tag set [8, 27, 29]. An annotation of a partic-ular resource with a particular tag produced by a particular user is a hyperedge ( r, t, u ) , connecting three nodes from these three dis-joint sets. Such a tripartite hypernetwork can be mapped onto three different bipartite networks connecting users and resources, users and tags, and tags and resources, or onto e.g. tag-to-tag networks. For different purposes it is often more practical to analyze one or more of these networks. For example, in the context of ontology learning, the bipartite networks of users and tags has been shown to be an effective projection [25]. In this paper, we focus on tag-to-tag networks (based on a tag-to-resource network) to mimic a tag-based user navigation task.

In a next step, we use a given tag hierarchy as a particular in-carnation of a hidden metric space. We simulate greedy navigation through the observable tag-to-tag network querying the tag hierar-chy for node distances  X  the idea is that the tag hierarchy is useful for supporting navigation if the greedy navigation using that hier-archy as the hidden metric space is successful.

The simulation algorithm starts its search at a randomly selected start node and tries to reach a randomly selected destination node . Search is carried out by moving along the links in the network in a number of intermediate steps. At each step, the link leading to the node that is closest (the node that is at the smallest hierarchy distance) to the destination node is selected. The basic idea behind such a greedy strategy is that there is a high probability to find a link to the destination node in the neighborhood of related nodes. The distance between two nodes v and w is calculated via a linear transformation of the height h ( v,w ) , which is the height of the least common ancestor of v and w in the tag hierarchy. More specifi-cally, the parent node, the children nodes and the sibling nodes are considered to be at distance d =1 . From there on, the distance is recursively assigned, e.g., the parent X  X  siblings and the grand-children nodes are at distance d =2 , the children of the parent X  X  siblings are at distance d =3 , the grandchildren of the parent X  X  siblings are at distance d =4 and so on. More details and an illus-trative example of this particular simulation algorithm can be found in [10]. The algorithm is a variant of the simulation algorithm pre-sented in [1].

For evaluation, we use the length of the shortest path . This re-flects a typical scenario of navigation in tagging systems  X  the user will explore the tagging system by navigating to find relevant topics as quickly as possible , i.e., with as few clicks as possible. To model users behavior during navigation we apply the following strategy: if the agent arrives at a certain node for the second time, the search stops and is counted as a failure (no backtracking)  X  this mimics the situation where a user arrives at a tag that she has already visited, and then decides to, e.g., switch to the search field or to leave the system. In addition, if possible we try to avoid coming to a given node for the second time to model user exploration of alternative paths in the network. Thus, if the agent has two or more available paths with nodes at the same distances from the destination than a node that has not been already visited is preferred by the agent.
We simulate navigation in a large number of routing sessions (e.g. 1,000,000 sessions, see Section 3.3 for details on the ex-perimental setup). Then, we quantify the quality of navigational support provided by a given tag hierarchy by measuring the suc-cess rate s of the greedy algorithm (the number of successfully reached destination nodes divided by the total number of routing sessions), and by the stretch  X  [21], which is the ratio of the aver-age greedy hops h to average shortest paths l (this measure tells us how longer are greedy paths as compared to global shortest paths). Those lengths are calculated over the e.g. 1,000,000 selected ses-sions. The measures are similar to those introduced in [6]. In addi-tion to the global values calculated in [6], we calculate the measures for each observable shortest path in the networks.

In a final step, we analyze the structure of the greedy paths. This analysis provides insight into the importance of tag hierarchies and network nodes for the navigation process -in this way we can iden-tify potential bottlenecks in folksonomies.
Today, none of the popular tagging systems provide directory-based navigational aids. We therefore synthesize a model of a hy-pothetical user interface using user interface ideas from existing in-formation systems with hierarchical organization of resources, such as Google Directory 2 . Such systems typically display the following user interface elements for any given node in a concept hierarchy (see Figure 1 for a screenshot or e.g. Google Directory 3 We perform our experiments on five different tagging datasets. Directories are produced by a standard tag similarity network al-gorithm (see Section 3.2). General statistics about our datasets are depicted in Table 1, more details are presented next.
Data from the following social tagging systems was used as an empirical basis: formerly DMOZ http://www.google.com/dirhp?hl=en
In our model siblings of a particular node are considered to be related to that node http://www.kde.cs.uni-kassel.de/ws/dc09/ http://www.citeulike.org/faq/data.adp
In previous work we have evaluated a series of existing tag hi-erarchy algorithms on a theoretical level, without taking user inter-face constraints into account [10]. As we have found that centrality-based algorithms outperform hierarchical clustering algorithms by a large margin (see [10, 31] for more details) we select one of these algorithms to conduct further investigations of their usefulness un-der typical user interface constraints. It is reasonable to assume that other centrality-based tag hierarchy algorithms will behave simi-larly under our constraints.

In this work we select an algorithm based on [12], where the authors propose to use so-called tag similarity networks and the centrality of tags for the construction of tag hierarchies. In their work, tag similarity networks are unweighted networks where each tag is a node in the network, and two nodes are linked to each other if their similarity is above a predefined similarity threshold. In the simplest case, the threshold is defined by tag overlap  X  if the tags do not overlap in at least one resource then they are not linked to each other in the tag similarity network. To construct tag hierar-chies, the algorithm requires the ranking of nodes in a descending order according to how central the tags are in the tag similarity net-work. In particular, this ranking produces a centrality order where the most general tags from a dataset are in the top positions. The algorithm starts by a single node tree with the most general tag as the root node. The algorithm then proceeds by iterating through the centrality list and adding each tag to the tree  X  the algorithm calculates the similarities between the current tag and each tag cur-rently present in the tree and adds the current tag as a child to its most similar tag. The authors define their algorithm in an exten-sible manner by supporting different similarity as well as different centrality measures. The presented algorithm uses cosine similarity and closeness centrality.

The work by [3] extends [12] by using tag co-occurrence as the similarity measure and the degree centrality as the centrality mea-sure. In particular, the algorithm executes an extensive preprocess-ing of the dataset e.g. to remove synonym tags or to resolve am-biguous tags. For our work, we study this variation of the algo-rithm as both alternatives produce semantically and pragmatically comparable tag hierarchies. For reasons of simplicity, we skip the preprocessing of the dataset in this work and apply the alternative similarity and centrality measures only. https://www.uni-koblenz.de/FB4/Institutes/IFI/AGStaab/ Research/DataSets/PINTSExperimentsDataSets/
With greedy navigation, we model and then simulate navigation in tagging systems. We select 1,000,000 distinct tag pairs that we call search pairs containing tags with degrees smaller or equal to 5 from the connected component of tag-to-tag tagging network. We adopt this low-degree selection strategy to make the simulated nav-igation task more  X  X ifficult X  as finding e.g. the most central tag in a power law tag network is a trivial task. The first tag from the tag pair represents a starting node for navigation, modeling an arbitrary user entry page into the system (e.g. a landing page from a search engine, the latest tag from a news feed, or similar). We assume that users who come to the tagging system would explore the system to find one or more related topics or resources of current interest -we model this by means of the second tag (and the corresponding resource set) from the tag pair. We define this second tag as the destination node for the greedy navigation. The goal of the agent is to find a short path from the starting node to the destination node from the search pair.

To quantify the performance of the greedy navigator, we com-pare its path to the global shortest path (the shortest paths between two pairs assuming global knowledge of the network topology) be-tween two selected nodes. We calculate the global shortest path between nodes from each search pair using breadth first search.
In this section we present the simulation results of adopting tag hierarchies as a navigational aid without any user interface restric-tions, i.e. the entire tag hierarchy is accessible to a greedy nav-igator. It is important to note that this is a hypothetical setting, where a navigator has the entire directory at her disposal. In cur-rent directory-based systems (such as Google Directory), this is not the case. Therefore, these results are only of a theoretical value -they shed light on the nature of the greedy navigation process and help to identify potential pitfalls and bottlenecks, as well as ideas for solutions to those problems. Please note that these results are consistent with our previous results on theoretical suitability of tag hierarchies as a navigational support [10]  X  where here, we extend this investigation by discussing the structure of paths of the greedy navigator.

Consistently over all datasets, the greedy navigator performs very well with success rates close to 100%. Moreover, the navigator is very efficient in finding a short paths -in most cases it requires the same number of steps as the global shortest path -the global stretch is very close to 1 (see the far-left column of Figure 2).
As observed by [5], the path structure of the greedy navigator fol-lows the zoom-out/zoom-in phase pattern. In the zoom-out phase, the navigator starts at a low degree node in the network periphery; it then exits the periphery and enters the network core visiting one of the high degree nodes there. In the zoom-in phase, the navigator leaves the core for its low-degree destination node in the periphery. Over all datasets, the top nodes are the most visited nodes -these are the nodes from the network core where the phase transition in the navigation process occurs (see the far-left column of Figure 3).
Table 2 shows the importance of the top degree nodes for greedy navigation  X  a huge fraction of all greedy paths go through the top 10% tags. This can be characterized as the main pitfall of tag hi-erarchies as a navigational tool. The top level categories in tag hierarchies have a huge number (hundreds, even thousands) of sub-categories and related categories (see e.g. [10] or Figure 4a). The greedy navigator has no problems in finding the optimal path to-wards the network periphery from such a high-degree node  X  all are almost ideal. Slightly worst success rates for longer shortest paths (e.g. l TopN(%) Visits(%) paths at any given node are always visible to the greedy navigator. On the other hand, a typical user interface restricts visibility of sub-categories to only a few, e.g. 10 or 20 categories which are sorted by a ranking algorithm. Typically, all other subcategories are only visible after clicking through e.g. a paginated category list.
In the next section we model such UI restrictions and investi-gate the practical usefulness of tag hierarchies to support naviga-tion processes in user interfaces of social tagging systems.
In our simulations, we model the limited ability of user interfaces to display a directory in its entirety. This enables us to study the limitations of tag hierarchies where the number of subcategories is very high (in some cases, existing tag hierarchy algorithms produce nodes with thousands of children nodes). To model the constraints of a typical user interface, we set n =20 and m =20 and select randomly n tags as subcategories and respectively m tags as re-lated categories. While similar constraints can be found in typical directory-based information systems such as Google Directory, our framework can easily evaluate and accommodate other values. For all practical purposes though, the results presented in this paper are based on the above parameter values.
 Breadcrumbs. In all our experiments that model UI constraints, we introduce breadcrumb-aided navigation to our hypothetical user interfaces. In our simulations, breadcrumbs can speed up the zoom-out phase -in most cases the navigator jumps over low-degree nodes directly to the top nodes (see the center-left, center-right, and far-right columns in Figure 3). This is an intuitive behavior that can be expected from a greedy navigator.

In many cases, the effects of breadcrumbs on the greedy naviga-tor is a decrease in the number of hops -often the navigator takes a direct, otherwise non-present, breadcrumb path to e.g. the root node. In some rare cases breadcrumbs can cause the stretch to even sink below 1 (see e.g. stretch values for l  X  8 in 2j).
 Subcategories. Constraining the display of subcategories to n 20 impairs the success rate of the navigator tremendously. Des-tination nodes have small degrees -finding a path to those nodes requires the navigator to select appropriate preceding nodes from a given high-degree node. However, because of the particular user interface restriction, the appropriate nodes are very often not visi-ble from a given high-degree node and this often leads to a failure. High stretch values indicate that the navigator bounces between the related and parent nodes until it finds its way down towards the destination node (see the center-right column of Figure 2).
Since the number of visible children is limited to a small value the zoom-in phase is disrupted -only few paths headed towards their final destination in the periphery find their way promptly. In-stead, the navigator  X  X ounces X  between parent and sibling nodes to find its way down to the destination node (see the center-right column in Figure 3).
 Related categories. The effect of limiting the number of related nodes (siblings) visible from the current node to m =20 is that far less shortcuts between related nodes are being taken. Instead of taking a shortcut, the navigator often visits one of the parent nodes and only then one of the siblings or grand-siblings -this increases the number of necessary hops. Although breadcrumbs reduce the total number of hops the first effect is, by far, more significant -the total hops number and consequently the stretch increases (see the center-left column of Figure 2). On the other hand, the success rate remains almost uneffected. In certain cases it even increases (see e.g. 2b) -the navigator does not take the path over a non-visible sibling but takes an alternative (more successful) path via bread-crumbs or a visible sibling at the same distance to the destination node.

Concerning the path structure the following effects can be ob-served. While in the core, the majory of paths go up to the parent or root node. As the number of visible siblings is limited shortcuts are taken rarely (see the center-left column in Figure 3). Related and subcategories restriction. When both user interface restrictions are applied at the same time (which again is typical in hierarchically organized information systems), the success rate drops drastically (see the far-right column in Figure 2). Even some of the nodes at l =1 can not be found by the navigator -because of the user interface restrictions they are not visible anymore from the start node. On the one hand, the navigator can not find its way down towards the destination node. On the other, the  X  X ouncing X  between the related nodes is now also  X  X orbidden X  and this leads to disappointing success rates. Now -since both of the problems apply -the zoom-in phase is disrupted and the navigator does not  X  X ounce X  between siblings anymore. Most of the paths lead to the root node and then finish there without finding their way out of the core (see the far-right column in Figure 3).

In summary, these results suggest that existing algorithms for constructing tag hierarchies produce hierarchical structures that are not useful for aiding navigation under practical user interface con-straints.
The main pitfall of the tag hierarchies that we simulated so far is their breadth  X  top level categories have too many subcategories, typically hundreds or thousands. Figure 4a depicts out-degree dis-tributions of the tag hierarchies in our datasets. These distribu-tions are essentially power-low distributions with a small number of high-degree tags (these are the top hierarchy nodes) and a large number of low-degree tags (these are the nodes from the lower hi-erarchy levels). As our previous analysis have shown the top level number of hops (cf. the yellow lines in 3a and 3b). Center-Right: ( n =20 ) The navigator  X  X ounces X  between parent and sibling Figure 4: Left: Cumulative out-degree distribution of tag hi-erarchies produces by the algorithm described in [3]. Top level tags have hundreds, even thousands of subcategories  X  this makes those hierarchies useless for navigation as a typical user interface displays only a limited number of subcategories. Right: Cumulative degree distributions of tag-to-tag networks show existence of a large number of low-degree nodes that are typically connected to a single network hub. nodes are crucial for the navigation. However, the UI limitations restrict the number of displayed subcategories to only a few and thus limit the usefulness of tag hierarchies as a navigational aid.
This requires a new tag hierarchy algorithm that is able to take into account display limitations of a typical user interface. In other words, the algorithm takes as an input parameter the display size and produces a tag hierarchy that can fit into a given user inter-face. Thus, the input parameter defines maximal number of subcat-egories and related categories that can be displayed. Technically, this input parameter defines branching factor b of the tag hierarchy.
In the following, we present a novel adaptation of the previously applied tag hierarchy algorithm that significantly recovers naviga-tional support under typical user interface constraints by introduc-ing a branching factor b as an input parameter. Moreover, we will demonstrate that our algorithm produces tag hierarchies that effi-ciently support users in navigating social tagging systems .
The new algorithm is a two-pass procedure. In the first pass the algorithm works similarly as proposed in [3] with the difference that the algorithm populates not only a single tree but a forest with multiple trees. The algorithm attaches maximally b  X  1 subcate-gories to any given category in the forest. Before the second pass the algorithm sorts the produced trees in descending order of their size (the number of categories that they contain). We will call the largest tree in the forest the main tree.

In the second pass the algorithm attaches other trees to the main tree by linking the root node of a given tree to its most similar node from the main tree. If the most similar node has only one free sub-category spot left then a special misc category is first inserted in that free spot and then the given tree is attached to that misc cat-egory. The nesting of misc categories is necessary and it can be arbitrarily deep, e.g. if a misc category has only a single free sub-category spot left then another sub-misc category is first inserted in that spot and then a given tree is attached to that sub-misc category.
The goal of this approach is to connect as much trees as possible (and thus as much tags as possible) to the main tree without creating deep misc/sub-misc subtrees. However, such nested misc category constructs can not be avoided completely as the structure of the tag-to-tag network dictates their existence. Figure 4b shows the out-degree distributions of tag-to-tag networks in our analyzed datasets. The distributions show that there is a huge number of tags with a very small degrees  X  this means that these tags also have low centrality values. Further, these tags are typically connected only to high-degree tags. Because of their small centrality low-degree Input: b branching factor
Output: F = &lt;V,E&gt; add C [0] to V /* Start of the first pass */ for i =1 ... | C | do end for /* End of the first pass */
WCCS  X  getWccs ( V ) /* Start of the second pass, WCSS[0] is the main tree */ for i =1 ... | WCCS | do end for /* End of the second pass */ tags are therefore added to the final tag hierarchy in the later stages of the process  X  typically when all of the free spots of high-degree tags are already taken.

For example, we want to discuss the following situation. Sup-pose there is a high-degree node in the network. Because of its degree the node possesses high centrality and resides therefore in one of the top hierarchy levels. In a typical power-law network, such node is connected to a small number of other high or mid-degree nodes with higher centrality values and to a significantly larger number of low-degree nodes with small centrality values (the latter representing the long tail). Thus, the algorithm first attaches adjacent high and mid-degree nodes as subcategories of the given node and uses all free subcategory spots. With high probability, the low-degree neighbors have links only to the given node (or similar high-degree nodes with no free subcategory spots) and need to be attached to that node via its misc subcategory. As the number of such neighbors is larger than a typical branching factor nesting of misc categories is necessity.

Please note that the misc subtrees do not break semantics of the tag-to-tag networks, as no tags are attached to unrelated tags. Rather, the tags are pushed farther away from their most related tags into its nested misc categories.

The proposed algorithm (see Figure 5) requires:
Our experiments with the hierarchies produced by the new al-gorithm show significant improvements in success rate across all datasets. Essentially, we were able to completely recover the suc-cess rate (see Figure 6). However, stretch increases and ranges be-tween 2 and 3. This is caused by navigating the long tail of low de-gree tags  X  as those tags are situated within nested misc categories the number of hops before reaching the destination node increases with the number of hierarchy levels containing long tail tags. This phenomena is mostly visible for global shortest paths of 2 as two long tail tags are very often both linked to one and the same high-degree node.
While algorithms for constructing tag hierarchies have received much attention from a semantic research perspective, their useful-ness for supporting navigation in social tagging systems under typ-ical user interface constraints was generally unknown. The simula-tions and experimental results conducted in this work demonstrate that using existing tag hierarchies produced by existing algorithms as directories in user interfaces of social tagging systems yields sub-optimal results. Based on these insights, we presented and evaluated a novel adaptation of an existing algorithm that (i) sig-nificantly outperforms existing approaches, and (i) almost matches the results of the same algorithms in a hypothetical (i.e. uncon-strained user interface) setting. The results of this work illuminate a way towards integrating tag hierarchies into user interfaces in an efficient way, i.e. in a way that enables users to navigate direc-tories efficiently. Our work is relevant for engineers interested in integrating directory-based navigation support into user interfaces of social tagging systems and for scientists interested in the design and analysis of social tagging systems. [1] L. Adamic and E. Adar. How to search a social network. [2] L. A. Adamic, R. M. Lukose, A. R. Puniyani, and B. A. [3] D. Benz, A. Hotho, and G. Stumme. Semantics made by you [4] D. Benz, C. K X rner, A. Hotho, G. Stumme, and [5] M. Bogu X  X , D. Krioukov, and K. C. Claffy. Navigability of [6] M. Bogu X  X , F. Papadopoulos, and D. Krioukov. Sustaining [7] C. Cattuto, D. Benz, A. Hotho, and G. Stumme. Semantic [8] C. Cattuto, C. Schmitz, A. Baldassarri, V. D. P. Servedio, [9] E. H. Chi and T. Mytkowicz. Understanding the efficiency of [10] D. Helic, M. Strohmaier, C. Trattner, M. Muhr, and [11] D. Helic, C. Trattner, M. Strohmaier, and K. Andrews. On [12] P. Heymann and H. Garcia-Molina. Collaborative creation of [13] A. Hotho, R. Jaeschke, C. Schmitz, and G. Stumme.
 [14] A. Hotho, R. J X schke, C. Schmitz, and G. Stumme.
 [15] J. Kleinberg. The small-world phenomenon: an algorithm [16] J. Kleinberg. Complex networks and decentralized search [17] J. M. Kleinberg. Navigation in a small world. Nature , [18] J. M. Kleinberg. Small-world phenomena and the dynamics [19] C. Koerner, D. Benz, M. Strohmaier, A. Hotho, and [20] C. Koerner, R. Kern, H. P. Grahsl, and M. Strohmaier. Of [21] D. Krioukov, F. Papadopoulos, M. Kitsak, A. Vahdat, and [22] E. A. Leicht, P. Holme, and M. E. J. Newman. Vertex [23] R. Li, S. Bao, Y. Yu, B. Fei, and Z. Su. Towards effective [24] F. Menczer. Growing and navigating the small world web by [25] P. Mika. Ontologies are us: A unified model of social [26] S. Milgram. The small world problem. Psychology Today , [27] M. Ramezani, J. Sandvig, T. Schimoler, J. Gemmell, [28] R. Schifanella, A. Barrat, C. Cattuto, B. Markines, and [29] C. Schmitz, A. Hotho, R. J X schke, and G. Stumme. Mining [30] M. A. Serrano, D. Krioukov, and M. Bogu X  X . Self-similarity [31] M. Strohmaier, D. Helic, D. Benz, C. K X rner, and R. Kern. [32] D. J. Watts, P. S. Dodds, and M. E. J. Newman. Identity and [33] D. J. Watts and S. H. Strogatz. Collective dynamics of
