 Social network data analysis raises concerns about the privacy of related entities or individuals. To address this issue, organizations can publish data after simply replacing the identities of individuals with pseudonyms, leaving the overall structure of the social net-work unchanged. However, it has been shown that attacks based on structural identification (e.g., a walk-based attack ) enable an adver-sary to re-identify selected individuals in an anonymized network. In this paper we explore the capacity of techniques based on ran-dom edge perturbation to thwart such attacks. We theoretically establish that any kind of structural identification attack can effec-tively be prevented using random edge perturbation and show that, surprisingly, important properties of the whole network, as well as of subgraphs thereof, can be accurately calculated and hence data analysis tasks performed on the perturbed data, given that the legit-imate data recipient knows the perturbation probability as well. Yet we also examine ways to enhance the walk-based attack , propos-ing a variant we call probabilistic attack . Nevertheless, we demon-strate that such probabilistic attacks can also be prevented under sufficient perturbation. Eventually, we conduct a thorough theoret-ical study of the probability of success of any structural attack as a function of the perturbation probability. Our analysis provides a powerful tool for delineating the identification risk of perturbed social network data; our extensive experiments with synthetic and real datasets confirm our expectations.
 H.2.7 [ Database Management ]: Database Administration X  Se-curity, integrity, and protection ; H.2.8 [ Database Management ]: Database applications X  Data mining ; K.4.1 [ Computers and So-ciety ]: Public Policy Issues X  Privacy privacy, social network, random perturbation, graph utility
Today data owners (e.g., private corporations, public organiza-tions) can store large volumes of digital human interactions. Ex-amples include interactions among groups of players in an online game, for file-sharing in P2P networks, and among individuals in online social networks. In most cases, the network at hand can be represented by a graph G =( V,E ) , where vertices stand for indi-viduals and edges for interactions or relations. Data owners wish to publish such graphs, e.g. for social studies and marketing.
Nevertheless, publication should not reveal sensitive personal in-formation contained in the network. A na X ve graph anonymization approach is to remove identifying attributes such as names, e-mails or IP addresses, and still publish the network in a way that allows all kind of analysis of its graph properties.

Unfortunately, this na X ve anonymization approach does not guar-antee privacy protection. As Hay et al. [8] discerned, the structural characteristics of the published graph, combined with background knowledge, can expose individuals. For instance, assume an adver-sary has access to graph G n in Figure 1(b), the na X vely anonymized version of the graph in Figure 1(a) and and knows that Suzanne has 3 friends, none of whom has more than 2 friends. With this knowl-edge, the adversary can identify Suzanne as node 3 .

Backstrom et al. [1] have shown that a practical way for an ad-versary to gain structural knowledge is to embed a known subgraph (e.g., register dummy users in an online social network and link them to victims). Figure 1(c) shows our example graph includ-ing an embedded subgraph (nodes { 11 , 12 , 13 , 14 , 15 } nodes were connected to Suzanne and Robert (e.g., by tricking them to respond to a bogus friendship invitation). An adversary capable to locate the inserted subgraph efficiently can also identify Suzanne and Robert and hence infer other attributes of theirs. Let G A =( V A ,E A ) be the inserted subgraph and k = | V number of vertices in G A . Typically, it suffices for k to be in the order of log | G o | , as the number of possible k -node subgraphs, hence the probability that the inserted subgraph is unique, grows exponentially with k 2 . Locating G A is an intractable problem [7], hence impractical for large graphs. Therefore, [1] only considers subgraphs having a connected backbone (i.e., a Hamiltonian path of their k nodes), and describes an efficient walk-based attack : an adversary can locate G A by searching for k -node paths hav-ing the same degree sequence as G A (e.g., the subgraph of nodes { 11 ... 15 } in Figure 1(c) has degree sequence [2 , 5 , 3 , 4 , 2] ).
In this paper, we study the effectiveness of random edge pertur-bation as a tool for preventing structural identification in an anony-mized graph. We assume that the original graph G o is first trans-formed to G n by na X ve anonymization, and then G n is altered to G by random edge perturbation with perturbation probability  X  . Fig-ure 1(d) shows a perturbed graph G p , in which edges (4 , 5) , (8 , 9) and (11 , 13) in G n have been removed, whereas edges (13 , 15) and (5 , 10) have been added. Fittingly, the degree sequence of G cannot be found in G p ; therefore the walk-based attack fails.
Remarkably, Ying and Wu [12] reject random edge perturbation as a method for privacy preservation on the grounds that it obfus-cates important graph characteristics; Bonchi and Tassa arrive at a similar, albeit more positive result [2]. We inspect such claims by showing that estimation algorithms can accurately recover impor-tant graph properties (e.g., density, degree distribution, transitivity, modularity, etc) from the perturbed graph, not only for the complete original graph, but more crucially, even for subgraphs thereof -for which publishing such measures directly to the end-user would not be a solution. We apply this methodology on several graph metrics used in graph analysis [5]. Our estimation algorithms are not ap-plicable only on the presented metrics; in addition, we introduce a generic framework for estimating a class of utility metrics.
Nevertheless, we are wary that an adversary can employ a method-ology similar to ours so as to launch sophisticated attacks. We demonstrate this potential by generalizing the walk-based attack of [1] to a probabilistic walk-based attack , which examines multiple possible degree sequences, each with its own probability of appear-ance. We show that, while being more computationally intensive than the deterministic variant, our probabilistic attack is practicable in perturbed graphs with higher success probability. Furthermore, we generalize our study to take into account any possible structural attack, even by extremely powerful adversaries having the compu-tational power to enumerate all possible subgraphs of size k inside G n . Our analysis delineates the probability of success in that case, for subgraph size k and perturbation probability  X  .

To summarize, our contributions are outlined as follows: We show how important graph properties can be accurately recovered from a perturbed graph, even though this perturbed graph does not look like the original . We introduce a novel probabilistic attack , more powerful than the one [1]. We compute the probability of suc-cess of any structural attack, offering a yardstick for assessing the privacy risk entailed by the publication of perturbed graph data.
The idea that privacy can be preserved after randomization while data characteristics can be partially recovered, which we espouse, was debuted in the context of association rule mining [6, 11].
Backstrom et al. [1] were the first to present an attack demon-strating that na X ve anonymization is insufficient to ensure privacy in graph data. They emphasize the differences between active attacks, where the adversary adds nodes and edges before publication, and passive attacks, where they do not, and propose the walk-based and cut-based attacks; the extent to which random edge perturba-tion can protect from this family of active attacks was not exam-ined in [1]. Hay et al. [9] proposed a privacy protection technique based on random edge insertions and deletions, similar to the ran-dom edge perturbation that we study. However, the efficiency and utility preservation of their scheme were not studied. In [8], Hay et al. formalize two adversary knowledge models based on sub-graph queries and hub fingerprints, and propose an approach using structure aggregation and sampling to protect from such attacks; however this method does not preserve the complete graph struc-ture. Ying and Wu [12] assert that random edge perturbation sig-nificantly degrades a graph X  X  utility; this assertion is true if utility metrics are measured on the perturbed graph; however [12] does not attempt to recover graph properties by estimation algorithms.
Zhou and Pei [13] use edge addition (along with generalization of node labels) in order to ensure that, for every node in the graph, there exist at least k  X  1 other nodes that share isomorphic neighbor-hoods. Similarly, Liu and Terzi [10] bring a graph in a form such that, for each node, there exist at least k  X  1 other nodes having the same degree, while Cormode et al. [4] study the anonymization problem for bipartite graphs and propose the notion of safe group-ings . Zou et al. [14] propose the model of k -automorphism, which guarantees that the anonymized graph consists of k structurally in-distinguishable subgraphs; Cheng et al. [3] expand on this concept with k -isomorphism, in which a graph is published in the form of k identical disjoint subgraphs. Unfortunately, such syntactic ano-nymization methods can severely alter the nature of the published network so as to conform to the privacy guarantee they provide. For example, by k -isomorphism, a connected graph is converted to an assortment of k identical disjoint graphs; thus, the published graph is not an anonymized version of the whole original, but only of thereof. Besides, the computational complexity of these syntactic schemes renders them inapplicable on very large graphs.

Recently, Bonchi et al [2] used an entropy-based privacy met-ric to evaluate several graph anonymization techniques; they con-clude that techniques based on random perturbation are comparable to syntactic methods. Our work builds upon these findings by in-specting the potential to estimate a graph X  X  original properties and the viability of structural attacks after random perturbation.
Let G o =( V,E ) be an undirected graph representing the orig-inal social network and let N = | V | . Without loss of generality, we assume that V is ordered and V [ i ] refers to the i th set. Na X ve anonymization replaces all labels in G o with random pseudonyms. The resulting graph is denoted by G n , where new la-bels are given by L ( V [ i ] , G n ) , i  X  [1 ,N ] .As G the same set of nodes and edges, G n =( V,E ) .

Random edge perturbation yields a perturbed graph G p = ( V,E p ) from a na X vely anonymized graph G n by adding or remov-ing edges. Let  X   X  [0 , 1 2 ) be a user-defined perturbation probabil-ity , known to the legitimate data recipient, and ( V [ i ] ,V [ j ]) denote the edge between nodes V [ i ] and V [ j ] . For every pair of nodes V [ i ] ,V [ j ]  X  V it holds that: We assume that the adversary knows a subgraph G A =( V A ,E in the original graph G o . G A contains k ordered nodes, with la-bels L ( V A [ i ] ,G A ) known to the adversary; the latter aims to iden-tify G A in G p , i.e., an ordered set Y of k nodes in G p quantify the probability that the adversary will succeed.
Before we study the adversary X  X  success probability, we study the effect of perturbation on different graph utility metrics. No single metric for measuring a graph X  X  utility exists, as organizations may use a graph for different purposes. Still, there are a few widely ac-cepted metrics [5]. We study four popular metrics: density, degree distribution, transitivity, and modularity. While past research has asserted that such metrics rapidly degrade with random edge per-turbation [12], we outline how, even when the metrics measured on the perturbed graph vary greatly from those of the original, we can still accurately estimate their original values.
The density metric for a general graph is the ratio of the number of edges in the graph over the number of possible edges. It de-scribes the average level of connectivity between nodes. Formally, the density value is defined as follows:
The density metric is widely used in social network data anal-ysis. Admittedly, due to perturbation, the number of edges in the perturbed graph will differ from that in the original graph. How-ever, we can use the known perturbation probability to estimate the original density. Since the density value depends on the graph size and the number of edges, when the graph size is known, we only need to estimate the original number of edges. Let h = | E (unknown) number of edges in G o ,and h p = | E p | the observed number of edges in the perturbed graph G p . We can estimate the value of h via the maximum-likelihood estimator  X  h ,definedas: where Pr( h p | h ) is the probability of observing h p edges in the perturbed graph when the original graph has h edges. Intuitively, the estimator  X  h is the number of edges in the original graph that is most likely to result in h p edges in the perturbed graph.
To estimate  X  h , we need to find a value h that maximizes Pr( h Alternatively, we can find the value of  X  h by deriving an equation with the following rationale: since each edge removal and addi-tion during perturbation can be viewed as an independent Bernoulli trial, the value of h that maximizes Pr( h p | h ) is the one that renders the expected number of edges in the perturbed graph equal to h Given that each existing edge survives with probability (1 each non-existing one is created with probability  X  , the equality in consideration is expressed as follows: where M = N ( N  X  1) 2 is the number of possible edges in the graph. The quantity on the right-hand side of the equation is the expected number of edges in G p when the number of edges in G is  X  h . Solving Equation 3 for  X  h ,weget:
The degree is a cardinal feature of a node. In social networks, degrees describe the number of friends a person has. In many real-world networks, degrees exhibit a power-law distribution.
Our estimation for degree distribution is similar to that for den-sity estimation, as a node X  X  original degree can be estimated via its degree in the perturbed graph. While there may be a high error in the estimation for an individual node, the total degree distribution can still be accurately estimated. We first focus on estimating the original degree of a single node. Let d p be a node X  X  observed de-gree in G p ,and  X  d o our estimator of its degree in G o As in our density estimation solution, we can estimate  X  d ting d p to be equal to the expected degree of the node at hand in G when its original degree is  X  d o . Therefore it is:
Solving the latter for  X  d o ,weget:
Let  X  d o [ i ] be the estimator of the i th node X  X  degree. Then [  X  d [1] ,  X  d o [2] ,...,  X  d o [ N ]] forms an estimation of the degree sequence of all nodes in G o , whence we derive an estimate of the distribution. Transitivity measures the incidence of order-3 loops in a graph. In a social network, if v 1 is connected to both v 2 and v is a relatively high probability that v 2 and v 3 are also connected (i.e., a friend X  X  friend is a friend ). Most social networks present high transitivity. Formally, a network X  X  transitivity T is defined as:
In the above formula, N  X  is the number of triangles in the net-work, and N 3 is the number of connected triplets , i.e., subgraphs of exactly 3 connected nodes (albeit not necessary triangular).
To compute a graph X  X  transitivity, we have to count the number of triangles and the number of connected triplets therein. Such struc-tures may be destroyed post-perturbation, yet we can still count the number of different triplet structures in G p , and thereby estimate the number of triangles and connected triplets in G o .

Given any triplet of nodes in G o , the possible edge connections therein fall into the following four patterns:
Given a triplet pattern in G o , we can calculate the probability that it will be transformed into one of the three other patterns in G . For instance, a triangle in G o can become a triplet of either Pattern 2 , Pattern 3 or Pattern 4 , or remain unchanged. Figure 2 depicts the calculations of the probabilities that a pattern in G converted to another pattern in G p . We emphasize that these cal-culations are obtained under the simplistic assumption that each triplet conversion is independent of others. This assumption serves our objective of deriving an estimation, which is ultimately tested in our experiments. Thus, for example, the probability that a trian-gle in G o remains unchanged in G p is (1  X   X  ) 3 ; the probability that a triangle becomes a triplet of Pattern 2 (for which three possible cases as shown in Figure 2) is 3(1  X   X  ) 2  X  . Given the counts of triplets in different patterns ( T p , X p , I p and D p )in G pattern convertion probabilities in Figure 2, we can devise a system of linear equations with four unknown estimator variables  X  I and  X  D o , as we did for density and degree distribution estimation. Solving this system of equations, we get:
Then, given the maximum-likelihood estimators of triangles and connected triplets  X  X o , we estimate the transitivity of G
Social networks exhibit community structures. A characteris-tic of such a community is that intra-community links are more than inter-community links. The modularity is a metric measur-ing whether a partition of graph exhibits community properties. To compute modularity, the network is partitioned into a fixed number of communities. A symmetric matrix A is formed such that the el-ements A [ i, i ] (i.e., the diagonal of matrix A ) are the fractions of links between the nodes in the same community i . The other ele-ments A [ i, j ] are the fractions of links between communities i and j . The network X  X  modularity is defined as:
The modularity value depends on the entries in matrix A .To estimate modularity, we first create an estimator  X  A for A .Todo so, we use an auxiliary symmetric matrix, B ,inwhich B [ i, i ] is the number of edges within community i and B [ i, j ] the number of edges between community i and community j . B p and  X  B refer to the matrix in the perturbed graph and the estimator for B , respec-tively. Once  X  B is computed,  X  A can be derived from  X  B by dividing each entry by the estimated total number of edges. Since the en-tries in B are counts of edges between nodes, we can apply similar technique as in density estimation to estimate  X  B . B p is directly computed by counting the edges within and between partitions in the perturbed graph. The relation between  X  B [ i, i ] and B In the above equation z i is the number of nodes in partition i . Assuming the number of nodes in community i ( j )is z i ( z relation between  X  B [ i, j ] and B p [ i, j ] is:
Each entry in  X  A is then computed by dividing the corresponding entry in  X  B by the estimated number of edges in the network.
While it is impossible to provide an exhaustive enumeration of estimation methods for every possible graph utility metric, in this section we provide a generic framework for the estimation a partic-ular class of such metrics.

A common characteristic of the above four metrics is that the utility value relies on the counts of certain substructures (a sub-graph) in the graph. For example, the density value relies on the count of disconnected pairs of nodes and the count of connected pairs of nodes. Similarly, the transitivity value relies on the count of connected triplets and the count of triangles in the graph. Gener-ally, the class of the utility metrics whose values rely on the counts of substructures can be estimated using a generic framework. The generic framework for estimation is described as follows.
Let S beasetof s max substructures relevant to a particular util-ity metric, where S i refers to the i th substructure. For example, in transitivity estimation, s max =2 , and the two substructures are triangles and connected triplets. S i .c refers to the count of the i th substructure in the original graph. Therefore, the utility value is a function of the counts of different structures in f (
S 1 .c, S 2 .c,..., S s max .c ) . To estimate the utility value, we need to estimate the value of S i .c for all substructures in S the number of nodes in the i th substructure. For transitivity estima-tion, the number of nodes in the two substructures (triangles and triplets) are both 3. In the perturbed graph, we count the number of all substructures involving S 1 .s, S 2 .s,..., S s max count of all the substructures in the perturbed graph is denoted as p , p 2 , ... , p t max . For transitivity estimation, they are the counts of the four patterns involving three nodes. The  X  S i .c  X  imum likelihood estimations for the parameters S i .c , and can be derived by solving the following maximization problem:  X  S 1 .c,  X  S 2 .c,...,  X  S s max .c =argmax
Given the estimation  X  S i .c  X  i , we can compute the estimated util-ity value using function f . Note that the counting of all substruc-tures is only feasible for substructures involving a small number of nodes. For example, in density, we count substructures involving two nodes, and in transitivity substructures involving three nodes only. For utility metrics involving substructures of a larger number of nodes, we can use sampling (defining an upper limit for counting or execution time) to estimate their values.

While not all utility metrics can be effectively recovered, there exists an ineffective algorithm (impractical due to the computation cost) that follows standard procedures to estimate all the metrics. The algorithm is described as follows: Let G denote the set of all possible graphs on N number of nodes. For each possible graph G [ i ] , there is a probability that G [ i ]= G o , which can be computed based on G [ i ] , G p and  X  , and denoted by Pr( G [ i ]= G sider a particular metric Z , we can measure its value val each G [ i ] . Lastly, the sum of val i ( Z )  X  Pr( G [ i ]= G an estimation to the metric Z in the original graph. Although the-oretically sound, this algorithm is impracticable as it requires the enumeration of all possible graphs on N nodes. A more efficient recovery of specific other metrics is left as an open problem.
The quality of our estimations is also a concern. To assess that quality, we can compute the standard error of the mean, StErr . For example, from Equation 4, we estimate the variance of
Let R =1 ( R =0 ) denote the event there exists (does not exist) an edge between a particular pair of nodes. Therefore, Pr( R = 1) = h M  X  (1  X   X  )+(1  X  h M )  X   X  ,and Pr( R =0)= h M  X   X  +(1 )  X  (1  X   X  ) . Therefore,  X  2 ( h p )= M  X  Pr( R =1)  X  Pr( R =0) . Substituting in Equation 14, we get:
As we argued, by carefully designing estimation algorithms, many of the original graph properties can be accurately estimated. Nev-ertheless, the same potential can also be exploited by an adversary to launch more sophisticated attacks.
The probabilistic attack starts out from the observation that an adversary can confidently estimate a degree interval (i.e., range) for each embedded malicious node. Using an approach similar to that of the walk-based attack [1], the adversary can efficiently enumer-ate a list of candidate degree sequences that will include, with high probability, the one that represents the embedded subgraph G In most cases, the adversary can arrive at a single degree sequence that represents with high probability the subgraph embedded in G This disposition is enabled by the fact that candidate degree se-quences are filtered out in our attack methodology using two tests: the interval degree check and the error-tolerant edge check .These tests work differently from those of the walk-based attack [1].
We face a few challenges in demonstrating the feasibility of the attack: first, the prediction of degree ranges should be correct with high probability. Second, the length of the predicted interval for an adversary X  X  node should be as small as possible, as a large interval may result in a large number of nodes passing the degree check , causing a severe penalty to the attack X  X  time complexity. Last, in order for our attack to succeed, the perturbation may alter the at-tacker X  X  subgraph but must not have destroyed the k -path (i.e., path of k nodes) therein. In Table 1 we show the probability that this k -path is preserved (i.e., all its edges are preserved after perturba-tion) for several combinations of different  X  and k , computed as (1  X   X  ) k  X  1 under perturbation probability  X  . As this probability is quite high, the adversary can reasonably assume that the embedded subgraph X  X  k -path is preserved in G p after perturbation.
Let d o be the degree of a malicious node in G o and d p the de-gree of the same node after perturbation. In the following, we first compute Pr( d p | d o ) , i.e., the probability that, given that the node X  X  original node degree is d o , its degree after perturbation is d
Let r be the number of neighbors eventually removed from the set of d o  X  X  neighbors in G o ,and a the number of new neighbors added, due to perturbation. Without loss of generality, suppose that the d p neighbors of the malicious node at hand are generated in two steps: first, r neighbors are disconnected and the number of remaining neighbors is d o  X  r ; then, a = d p  X  ( d o  X  r ) nodes are connected and become neighbors, so the total number of neighbors is d o  X  r + a = d p . Then the following three inequalities hold:
It follows that r is in the range of [max { 0 ,d o  X  d p } r neighbors can be removed in d o r ways, and new neighbors added in N
Thus, an adversary can efficiently compute Pr( d p | d o ) . The pos-sible values of d p after perturbation ranges from 1 to N the distribution of these values is not uniform. For each embed-ded node, the adversary can select a small subset of d p values and build an interval I representing the range of possible degrees for that node. We check inclusion in this interval as our degree check .
The removal and addition of neighbors of an embedded node can be viewed as two independent Binomial processes . The expected values for r and a are E [ r ]= d o  X   X  and E [ a ]=( N  X  respectively. Pr( d p | d o ) is maximized for r = E [ r ] and a = E [ a ] (hence d p = E [ d p ] ). Then the chosen interval I for the embedded node at hand is centered at d p = E [ d p ] , with w other values to its left and right, where w is a small non-negative integer. Eventually, the predicted degree interval for a selected malicious node in G I =[ E [ d p ]  X  w, E [ d p ]+ w ] .Let Pr( d p  X  X  ) be the probability that the embedded node X  X  degree is in I after perturbation. An effective attack is possible if the adversary can find a fine-tuned value of w such that Pr( d p  X  X  ) is sufficiently large and yet the width of I is small. Let I V A [ i ] be the degree interval for embedded node V A [ i ] ,and D p be the degree sequence of the embedded graph G
A in G p . Then the probability that all embedded nodes X  degrees fall into their respective intervals is calculation is made under the assumption that the events of different embedded nodes X  degrees falling into their respective intervals are independent of each other, which helps us derive our estimate.
Table 2 shows the values of Pr( d p  X  X  ) for selected values of  X  and w with k =12 . We observe that, when the number of nodes in the network is 10 , 000 , the perturbation probability is 0 . 001 and w =4 , then the probability that a single embedded node falls into the interval I is close to 1. Moreover, the probability that all the embedded nodes X  degrees fall into their respective intervals after perturbation is also close to 1 in the same configuration. We con-clude that, with this configuration, the attacker is almost sure that all embedded nodes will pass the interval degree check .
For example, in the graph in Figure 1(c), the adversary X  X  degree sequence is [2 , 5 , 3 , 4 , 2] . Yet in the perturbed graph G of the node labeled 11 has become 1 . Then, if a walk-based attack is launched, this node will not be detected. Still, with a probabilis-tic attack , the adversary is able to estimate the degree interval for each embedded node. For example (after integer rounding) the es-In this scenario node 11 can still be accepted by the adversary as a candidate embedded node, allowing for a successful attack. Algorithm 1: The probabilistic attack Data : G p , G A ,  X  , w as chosen, m =0 , k -path;
Result :A k -path containing identifiers of nodes in V A ; 1 while k -path not found and w max , m max unreached do 2 T =new Tree(); level =0 ; 3 foreach V [ i ] in G p do 4 localSearch( V [ i ] , level , T .root()); 5if w&lt;w max then 6 w ++ ; 7 else if m&lt;m max then 8 m ++ ;
Function localSearch( curnode , level , parent ) 1if level = k then 2return ; 3if curnode passes Interval Degree and ET-Edge checks then 4 T .add( curnode , parent ); 5 foreach neighbor nb of curnode do 6 localSearch( nb , level ++ , curnode );
Algorithm 1 describes our probabilistic attack . T is the tree of all candidate subgraphs, w is the width parameter for the degree intervals used in the interval degree check (chosen by the adversary as discussed) and m is the maximum number of errors that we allow in the employed error-tolerant edge check . The main block of the algorithm is a loop that continues until a k -path is found in the localSearch function (shown below), or both w and m reach their predefined maximum thresholds w max and m max .

Our probabilistic attack algorithm follows the pattern of a walk-based attack [1], with the key difference being on the two tests it performs (Line 3 in localSearch ). To pass the interval degree check , a node X  X  degree should fall in the predicted degree interval V [ level ] .Topassthe error-tolerant edge check , the number of errors in edge checks accumulated in the path from this node to the root should not be larger than m . At each iteration of the main loop, if a k -path is not found, we relax the searching condition by either increasing w or m . However, using large w and m enlarges search space. The maximum w and m values that can be used depend on the attacker X  X  computational resources.
In order to compromise the victims X  privacy, the adversary has to correctly identify the victims. However, due to perturbation, the links between the victim and the adversary X  X  nodes may have changed which raises new challenges for identifying the victims. We propose a method that minimizes the impact of perturbation and establishes robust links against perturbation. Let the set of nodes that represent the victims in the network be V T = {  X  1 , X  S  X  i  X  V A is the set of maliciously embedded nodes that are linked to victim  X  i , 1  X  i  X  q . Our approach is as follows: we define two parameters  X  1 and  X  2 ,where  X  1 defines the minimum size of S and  X  2 defines the minimum number of different members between the two sets S  X  i and S  X  j ,for i = j . Formally:
Moreover, we require that none of the adversary X  X  nodes share common neighbors other than the nodes in V T and V A . To prove the robustness of the links between the victims and the adversary X  X  nodes, we show analytically that the probabilities of the three events that affect the identification of the victims are negligible.
Claim 1 : The probability that S  X  i for any  X  i changes due to perturbation tends to be 0 when  X   X  0 .

P ROOF . S  X  i is preserved for any  X  i if the edge relations between this  X  i and all the adversary X  X  nodes are preserved (i.e, (1 Therefore, the probability that S  X  i changes is 1  X  (1  X   X   X  0 , 1  X  (1  X   X  ) k  X  0 .
 Claim 2 : The probability that there is a node v outside sets V and V T such that E v , the set of edges between v and the nodes from V A , is equal to S  X  i for the victim  X  i , decreases fast with the increase of  X  1 .

P ROOF . Let us consider a particular node v which already has an edge with a node in S  X  i . The probability that it forms new edges with all other nodes in S  X  i but not with the nodes in V at most  X   X  1  X  1  X  (1  X   X  ) k  X   X  1 +1 . Moreover, the total number of such possible nodes v in the network is N  X  k  X  q . Therefore, in this claim. When  X  = c N , this probability at most c  X  taking N  X  k  X  q as N and (1  X   X  ) k  X   X  1 +1 as 1), which decreases fast with the increase of  X  1 .

Claim 3 : The probability that the set S  X  i of malicious nodes connected to victim  X  i becomes the same as the set S  X  j nodes connected to victim  X  j after perturbation decreases fast with the increase of  X  2 .
 P ROOF . Let the number of non-common elements in S  X  i and S  X  j be x ij . Similarly to the derivation of equation 27, S verted to S  X  j by perturbation if and only if an x ij number of edge additions and deletions occurs. Therefore, after perturbation, Pr( S  X   X  2 , which decreases fast with the increase of  X  2 .

A trivial algorithm that builds our robust links operates as fol-lows: for each victim  X  i , repetitively select a subset of nodes in V at random, until a subset that satisfies both  X  1 and  X  2 is found; then link  X  i to all the nodes in this subset of V
The adversary can successfully identify his subgraph based on the assumption that the k -path is not broken. However, the pub-lisher can increase the perturbation probability so that, with high probability, the k -path is broken and therefore the probabilistic at-tack is infeasible. Let  X  , the secure parameter, be the maximum probability that the k -path is preserved. Therefore,
The following inequality gives the minimum  X  to be used so as to prevent the probabilistic attack with probability no less than 1
We now provide a generic analysis of a structural attack X  X  prob-ability of success. We assume that any structural attack can be translated into an instance of the graph isomorphism problem and show that an adversary who can enumerate all permutations of k nodes in G p , will also be able, with high probability, to detect the embedded nodes under a random perturbation scheme for low  X  .
Let Y i be the i th permutation of k nodes in the network. We assume an extreme case where the adversary has infinite computa-tional power and is able to enumerate all permutations of k nodes in the network: Y = { Y i :1  X  i  X  P N k } where P N k = N the total number of permutations. The adversary will then choose a particular permutation Y  X  X  as a candidate for V A and will as-sume that Y [ i ] is V A [ i ] . However, the adversary faces the following two challenges when choosing Y : first, the perturbation may have changed the embedded graph G A in such a way that G A cannot be detected in G p . Second, even if the adversary succeeds in locating a permutation Y that matches subgraph G A in appearance, there is still a probability that Y is not the actual V A , but only a look-alike.
We define  X  Y as the probability that the chosen Y is V A G . For the sake of conciseness, we use E Y A to denote the set of edges among the nodes in Y , after perturbation, in the event that this set has been created by perturbing the set E A , i.e., in the event that Y = V A .Then  X  Y =Pr( E Y A | E p ) .

Let E Y p be the set of edges among the nodes in Y in the perturbed graph E p . Then the following theorem holds:
T HEOREM 5.1. For a perturbed graph G p of size N withaper-turbation value  X  , the probability that an adversary detects the em-bedded subgraph G A , for a permutation of k nodes Y ,is: P ROOF . First, we rewrite the expression using Bayes X  theorem,
In the above equation, Pr( E Y i A ) is the prior probability of Y be-ing the attacker X  X  nodes, which is the same for all i . Therefore:
We first focus on the numerator Pr( E p | E Y A ) in Equation 22. We split the set of edges in the perturbed graph into two sets: E edges between the nodes in Y , only and E Y p , the other edges in E By definition, E Y p = E p  X  E Y p . E Y p and E Y p are independent, hence: Inserting the conditional variable E Y A to Equation 23, we get: E Y p ) (by Equation 23). Then Equation 24 becomes:
Combining Equations 22 and 25, and using E Y i p for E Y p
The intuition behind the derived equation for  X  Y is the follow-ing: the numerator Pr( E Y p | E Y A ) is the likelihood of the particular chosen permutation Y to be V A . The denominator is the sum of the likelihoods of each permutation Y i in the network being V The ratio describes the probability of success of the particular se-lection Y being V A . Thus, the value of  X  Y depends on the value of computation of the exact  X  Y would require the enumeration of all permutation of k nodes in the graph. In the following, we study the conditional probability Pr( E Y p | E Y A ) for a particular Y .
Given that Y is the set of embedded nodes and E Y A is the set of edges among the nodes in Y before perturbation, Pr( E Y p the probability that the set of edges among the nodes in Y becomes E p after perturbation. With this fact in mind, the derivation of Pr( E Y p | E Y A ) becomes easy: let m be the number of non-common edges in E Y p and E Y A . The minimum value of m is 0 , achieved when E Y A and E Y p are identical, and its maximum value is M = 2 , obtained when E Y A and E Y p are totally foreign to each other. Since each edge removal or addition occurs with probability  X  ,the probability that E Y A is converted to E Y p is: From a (computationally powerful) adversary X  X  point of view, Equation (20) can be used to compute  X  Y for each Y = Y i attacker will then assume that the set Y that gives the maximal value of  X  Y is the embedded subgraph V A in G p . In particular, given that the denominator is constant for a given E A and G adversary will simply opt for the set Y that maximizes the numera-tor in Equation (20). The best-case scenario for an adversary is that m =0 (i.e., E Y p and E Y A are identical). Otherwise, an adversary will choose the Y that gives the most similar subgraph to G
In the following we provide a simple method for estimating the value of  X  Y . For any permutation of k nodes Y i ,let m Y i E from all possible edges among the nodes of Y i . Then the expected value of m Y i is M 2 and the expected value of Pr( E Y i (1
Thus, our estimate of  X  Y depends on  X  and m . Table 3 lists dif-ferent  X  Y estimates with respect to different  X  and m combinations in a network of 10 , 000 nodes with 10 malicious nodes. Intuitively, m can be seen as the number of altered edges from E Y A to E note that, unless both  X  and m are high,  X   X  Y approaches 1 .
We observe that  X   X  Y tends to be large only when m is small. If the lowest value of m is kept large (e.g., greater than 10, as in the last row of Table 3), then  X   X  Y is kept low. In effect, to assess the potential for a successful attack, we study the distribution of m under random edge perturbation. This perturbation can be seen as a binomial process that adds and deletes edges with probability  X  . Then the probability distribution of m is:
The last column of Table 3 shows instances of the probability distribution for m with the values of k and  X  fixed. We observe that Pr( m =0) equals 0 . 9955 and 0 . 9559 for  X  =0 . 0001 and  X  =0 . 001 . This result shows that m tends to be rather small with high probability. Thus, we conclude that  X   X  Y tends to be large for such perturbation probabilities. This is good news for an adversary who has the computational powers to enumerate all subgraphs and choose the one most similar to the embedded one.
We now present our experimental evaluation. First, we inves-tigate the probability of success of the probabilistic attack under different values of  X  , and measure its execution time. Next, we investigate the effect of perturbation on the graph properties.
All experiments ran on a 2.33GHz CPU, Windows-XP machine with 3.25GB RAM. We employ two real datasets: The Enron dataset is the graph of email exchange among employees of Enron, having 4,644 accounts. Each account corresponds to a node and two ac-counts are linked if they have exchanged emails in both directions. The DBLP dataset 2 is a random subset of 20,000 authors from the DBLP bibliography. Each author corresponds to a node and two authors are linked if they are coauthors in at least one paper. The Wiki dataset 3 is a network Wikipedia encyclopedia writers around the world. It consists of 7,115 nodes and 103,689 edges.
In our first experiment, we assess the probability of success of our probabilistic attack as opposed to that of the classical walk-based attack [1]. We first test the walk-based attack on the Enron and DBLP data, measuring its success rate in trials of 200 sepa-rate attack runs, as a function of the perturbation probability  X  .An attack run is considered to be successful, if the adversaries can de-tect the sequence of embedded nodes and re-identify at least one victim node. In [1], the suggested number of malicious nodes k is  X (log( N )) and the number of victim nodes is q = O (log 2 Following this suggestion, we vary k at values 20 , 25 , 30 for both graphs, with number of victims 100 , 157 and 225 , respectively.
Figures 4a,e show our results, which provide a glimpse of the probability that an adversary successfully identifies the embedded nodes in perturbed DBLP and Enron data using a walk-based at-tack. When  X  is 0, all attacks are 100% successful. Still, already for rather small values of  X  ( 10  X  7 to 10  X  6 ), the success rate drops drastically to very low values. In addition, the success rate is lower for larger k under the same perturbation value  X  ; that is because, with larger k , the node degree sequence of the malicious nodes is more likely to be changed or the backbone to be broken, making the attack more likely to fail. In effect, the walk-based attack can be effectively prevented through random edge perturbation, with minimal impact on the graph X  X  structure (as  X  is negligible).
On the other hand, Figures 4b-d,f-h show the success rate of the probabilistic attack on the same DBLP and Enron data, again in trials of 200 runs each. We show results for several values of the interval-width parameter w . As the search space of the attack algorithm grows with w , the success rate also rises with it. For  X  10  X  4 , the probabilistic attack succeeds in almost 100% of the cases, in stark contrast to the walk-based one. Still, as  X  grows fur-ther, the observed success rate swiftly drops for all values of w .As with the walk-based attack, the success rate falls as k grows.
Figures 3a,b show the execution time of our attack as a function of interval-width w and error-tolerance m , with  X  =10  X  3 number of malicious nodes is k =4log( N ) and the number of victims q =log 2 ( N ) . The algorithm X  X  search space grows with both w and m (Section 4.2), hence the execution time also ascends with them, yet remains lower than 3 minutes, rendering the attack rather feasible on reasonably-sized real-world data sets.
An adversary who successfully identifies the embedded subgraph inside the perturbed graph may yet not locate the target victims, as the edges between the embedded nodes and the victims may have been removed. Table 4 shows the measured percentage of victims that can be identified in a successful attack. The number of malicious nodes and the victims remain at k =4log( N ) and at q =log 2 ( N ) . As the table shows, more than 91% of victims are identified when the attack succeeds.
The error-tolerance m also affects an attack X  X  probability of suc-cess. Table 5 shows an instance of this effect: in a trial of 100 attacks with m =0 on the Enron graph perturbed with  X  =0 . 04 , there are 53 successes, 35 failures due to false predicted interval, and 6 due to broken path or edge check failures. Still, when we re-lax the requirement for passing the edge check test, we can increase the number of successes to 58 and 59 .

To sum up, the probabilistic attack is more effective than the walk-based one and feasible in terms of runtime. Still, both can be prevented under random perturbation with sufficiently large  X  .
We use the perturbed data derived in previous experiments to evaluate the extent to which graph properties are preserved. Fig-ures 5a-f show the density, transitivity and degree distribution for perturbed DBLP and Enron data. Each figure shows the original, perturbed, and estimated values. Density and transitivity values vary with the perturbation probability  X  , while the degree distri-bution is given as a single snapshot for  X  =10  X  3 . We observe that, while graph properties deviate significantly from the originals as  X  grows, our derived estimates are resilient to perturbation and approximate the original values well. Significantly, our estimation algorithms provide accurate approximations even under perturba-tion probabilities that render probabilistic attacks unviable.
Furthermore, we illustrate the benefit of our method in terms of measuring the properties of subgraphs of the original graph. This application of our technique offers an undeniable benefit, as pub-lishing the graph cannot be substituted by directly publishing the measures of interest. We measure the same six structural proper-ties over subgraphs of different sizes extracted from the original DBLP and Enron graphs, and average our results over 10 different randomly extracted subgraphs. Figures 5g-l show our results as a function of subgraph size, with  X  =0 . 001 . For density and transi-tivity, we show again the original, perturbed, and estimated values, for each subgraph size. For degree distribution, we now present the sum of absolute errors between the perturbed/estimate and origi-nal distribution values for each degree. Our results reconfirm our findings even with subgraphs extracted from the parent graphs.
Overall, our results corroborate our claim that a published graph allows accurate estimations of graph properties not only for the whole graph, but also for subgraphs thereof, where publishing the measures directly to end-users would not be a satisfactory solution.
We now attempt to perform a specific data mining task, distance-based node classification, over perturbed data.

Social networks often possess hubs, i.e., nodes with very high degree. A particular person X  X  connectivity pattern to the hubs in-dicates that person X  X  interests. For example, in a social election, a person X  X  voting pattern may indicate its political views. Thus, node classification based on such patterns is useful. We consider a classification of nodes based on the distance between their hub connectivity pattern (HCP) and some target patterns (TPs). Given a set of hubs, a node X  X  HCP is the subset of hubs that this node has connectivity to. Each TP i is a subset of the hubs defined by the analyst. Given a set of k hubs, HCP and TP i are k -dimensional binary vectors. The distance between HPC and a particular TP the edit distance between the two vectors. For each TP i , a group of nodes G i is formed by assigning group membership to the nodes that have closest distances to TP i than to all other TP j aim to classify each node to the right group.

We use the Wiki graph. Hubs are chosen as the nodes that have top-10 degrees in the graph (ranging from 482 to 1,053). We ex-tract a subset of 200 nodes for classification, each having at least 4 connections to the hubs. For instance, the 10-dimensional binary data (0 0 1 0 1 0 0 1 1 0) represent the HCP for a node that has connectivity to the 3rd, 5th, 8th and 9th hubs. We define four target patterns, TP 1 = (0000000000),TP 2 = (0101010101), TP 3 = (1111111111)andTP 4 = (1010101010),hence4 classes of nodes. We assign IDs to the nodes so that nodes that are classified into the same group have consecutive IDs. Figure 6(a) visualizes the original classification. Figures 6(b,c,d,e) show the classification obtained from the perturbed graph with increasing  X  . Remarkably, the classification is faithful even with  X  =0 . 01 , with which both walk-based attack and probabilistic attack fail (see Fig-ure 4). Classification error becomes apparent with larger  X  as Fig-ures 6(d,e) show, while most nodes are still correctly classified.
In this paper we have delineated the effectiveness of random edge perturbation as a tool for privacy-preserving publication of graph data in the face of structural attacks. We have shown that sophisticated attacks based on probabilistic heuristics are feasible when the perturbation probability is sufficiently low, but can be thwarted as that probability grows. Moreover, we conducted an in-depth theoretical study of the probability of success for any struc-tural attack. Our analysis offers a yardstick for assessing the pri-vacy risk entailed by the publication of perturbed graph data. On the other hand, we developed methods that accurately estimate the properties of the original graph from the perturbed data. A thor-ough experimental study validates our analysis and explores the tradeoff between privacy and utility. Last, we have effectively demon-strated that data mining tasks such as distance-based node classifi-cation can be successfully performed even under random edge per-turbation probabilities with which structural attacks typically fail. We thank Dr. Yufei Tao for sharing insights on this topic, and Dr. Ee-Chien Chang and Dr. Hai Feng Yu for their constructive feedback. Mingqiang Xue is supported by I 2 Rgrant.
