 With the advent of Internet, the resources which could be accessed by a user are not limited to his/her own computer anymore. HTML, which meets the need of static re-sources sharing and presentation over the Internet, came into fashion.  X  X he more you ogy could provide. Web services, which can integrate static resources to provide more guages for collaboration over the Internet, instead of relying on special collaboration solutions packages. 
Many new language technologies are invented to give users more freedom to util-and computer, the cooperation between services and even collaboration in some spe-cial cases. However, most of them are limited in dealing with the human-computer re-lationship. Furthermore, most of the user interfaces are  X  X nherently serial, turn-taking dialogues with a single IO stream. Even when there are several devices, the inputs are treated conceptually as a single multiplexed stream, and interaction proceeds in half-duplex, alternating between user and computer X  [7]. 
The goal of grid technology is to solve the problem of resource and knowledge software, called the GSML suite [11], which includes a GSML language and a set of tools. GSML (Grid Service Markup Language) is an XML-based markup language sources and to support interaction between a user and the grid. A GSML document (a GSML page) can describe control and data flows between pipes, and then unite them into an integrated GSML application. We implement knowledge sharing through us-ers X  collaboration. GSML applications can be defined recursively, so that different us-ers can include existing GSML applications in their own GSML pages to implement sharing and collaboration. 
This article is organized as follows: In Section 2, we present the related projects of our work. In Section 3, we outline the basic requirements for GSML. The role of Sec-We evaluate the advantages and disadvantages of GSML in Section 5. Finally, we draw the conclusion in Section 6. programming languages for the Internet, especially for sharing and collaboration. The We focus on languages, not special solution software packages for collaboration. 2.1 HTML HTML has become the most popular form of presentation in the Internet. The essen-tial property of the World Wide Web is its universality which is enabled by hypertext links whose power is that  X  X nything can link to anything X  [2]. 
HTML is originally designed as a language for static Web contents. Later, many server-side extension techniques emerged to generate HTML documents dynamically, such as CGI, JSP, PHP etc. The client-side HTML browser can also accommodate dynamic contents. JavaScript is a wide-used script language which can handle user X  X  ease of use of the original HTML. 2.2 Web Service Composition Languages Web service composition languages try to describe the interaction of distributed ser-vices and integrate them to a new one accord ing to users X  demand. Two representative compositional languages are WSFL and BPEL. 
Web Service Flow Language (WSFL) [8] is an XML-based Web service composi-tion language. There are two models of compositions: for particular business process (Flow Model) and for description of interaction patterns between a collection of Web Services (Global Model). WSFL supports recursive composition. Business Process Execution Language (BPEL) [9] is the upgrade version of WSFL used in business area. BPEL represents a convergence of ideas in the WSFL and XLANG [10] which can track the states and detect the errors of protocols in an auto- X  X ssume sequences of peer-to-peer message exchanges, both synchronous and asynchronous, within stateful, long-running interactions involving two or more par-synchronous or uncorrelated asynchronous interactions X  [9]. The common hierarchy model of Web Service composition language is shown in Figure 1. 
All the Web Service composition languages share several common characteristics: they can define a new WSDL-based Web Service according to users X  demand; they are not designed for normal users, but serve as intermediate components for business process; they emphasize the interaction, combination and cooperation between Web more, they all do not support collaboration between users. 2.3 XAML &amp; XUL The Extensible Application Markup Language (XAML) [4] allows mixing XML tags and executable scripts written in C# language together. XML tags are used to describe displaying widgets while C# script can access platform-depend objects. XAML itself can be compiled into C# codes and execute on the Microsoft Longhorn System. 
The XML User Interface Language (XUL) [6 ] aims to developing a UI description language which is OS-independent. Now XUL is mainly used in Mozilla projects and develop complex plug-ins (Extension) by using XPCOM to access system native objects. 2.4 DPML Discovery Process Markup Language (DPML) [1] is a data-flow management lan-manage and execute complex knowledge discovery and real-time data analysis proce-dures as remote services. A data process unit is called a  X  X ode X  and several nodes can be composed to a new  X  X uper node X . Users can only see the node X  X  inputs, outputs and properties. composition and flexible programming. But  X  calculus lacks the operator of interaction, so it does not support the collaboration between users. Moreover, nodes are not suitable for general-purposed resources composition because they are data process units. 2.5 Object Oriented Programming Languages Object Oriented Programming Languages like Java can be used to write expressive the languages have some limitations. The languages do not support programming on-demand at client side. The changes of application requirements usually lead to recon-struction of application at programming language level. 2.6 Comparison HTML WSFL/B Target User Normal Running Constraint OS Independent Presentation Power Service Oriented Collaboration Support Functionality Very GSML. We describe these requirements along three aspects while bearing in mind using resources, providing a simple but flexible mechanism to operate these resources and allow users collaborating with eac h other to accomplish complex tasks. 3.1 Resources Composition functionality of the resources and then add them to particular applications seamlessly. The flexibility problem includes: how to develop, deploy and use self-defined re-how to encapsulate the application logic into a new resource. The Vega GOS project oping and deploying problems. So the main concern of GSML in resources composi-tion is how to organize the control and data flow of resources. 3.2 Program at Client-Side GSML is a programming language for ordinary users. Because it is easy to make mis-takes while writing the markup languages, there is a need of GSML that provides the users a simple and visualized composing tool to help them reduce the mistakes. 3.3 Collaborative Environment complex application requires the negotia tion and communication between different users. Some existing applications implement collaborating work for some special ar-eas. There has no generic infrastructure that can support different types of collabora-transporting etc. A prototype of GSML and its tool suite have been implemented using Java and Eclipse X  X  SWT. In this section, we will present salient features of the GSML language itself and the associated implementation architecture. 
We start with an application example. Figure 2 shows a snapshot of a GSML ap-plication: the GSML-Based Education Grid Platform. There are two GSML browsers which are browsing their own GSML documents. Each GSML document contains four local pipes and one remote pipe which is the delegate of the other browser. Local bottom-left part, a real-time video-meeting pipe at the bottom-right part and an invisi-ble Web Service invoker used to call the reasoning service. 
When two GSML documents are loaded, their local pipes will be initialized. Then browser will raise a connection, and then the remote pipes will be initialized. We or-ganized the event flow so that: when any side draws something on the white-board, all Events from different pipes are organized into event-sets which implement the barrier and reconstruction of event. In this example, there are four event-sets in each GSML application: the first contains events transmitted from white-board to remote browser; bined by events from white-board to reasoning service invoker and the last event-set is made up of events from service invoker to HTML browser to display the result. 
This is a simple example. But it already shows the basic characteristics of GSML-same GSML applications. The notions of  X  X vent X ,  X  X vent-Set X ,  X  X ipe X  and  X  X SML Application X  will be described in the following parts. 4.1 Concepts Like other markup languages, GSML has its own characteristics. These characteristics based on the schema of GSML. Event value. The identifier can be regarded as an operation name and the parameters are the arguments of the operation. The destination of event transmission can do some execu-tion according to the inform ation contained in events or just ignore them. Target Target describes what, where and when the event will be transmitted. So it has three sion to determine whether or not the transmission occurs. Event-Set Event-Set is made up of a set of events and several targets. The event-set occurs when pression by events X  parameters. If one target X  X  expression results in True, a event then will be sent to the destination. Pipe atomic action or a very complicated applica tion. In GSML specification, pipes are de-fined recursively to implement abstraction and collaboration. GSML Application GSML application is a user-defined application which is described by GSML docu-ment and run in GSML browser. GSML application contains a set of pipes and event-sets. The pipes are organized as a table for displaying. The recursive definition of pipe guarantees that GSML application can be encapsulated into a new pipe. 4.2 Recursive Definition The recursive definition of pipe and GSML application is an important hypothesis and constraint in our work. A pipe must be either prescribed by a GSML document or just an atomic action. GSML applications. Secondly, WSDL can merely specify the interface of Web Ser-vices, so it is impossible that users could trace one web service X  X  internal status and ex-GSML application to a recursively enumerable structure which only contains atomic ac-tions and events. The recursive definition makes it possible that users can test the reli-ability of one GSML application. Finally, the recursive definition is the basis of collabo-ration. GSML-based collaboration is implemented between several different GSML when the GSML application can be encapsulated into a pipe, these pipes could be used as the agents through which GSML application can transmit events to others. 4.3 Architecture In order to obtain collaboration feature, we must consider the following four levels of problems in our implementation. Sharing Problem Pipe is a standard-based component ranging from simple atomic action to complex application. Pipes use events as their communication medium while GSML only need to manage the event flow. Pipe is defined recursively, so users can abstract a GSML local pipes, but also as a peer-provider of remote pipes for other browser. Connection Problem The transmission of events needs a reliable connection from the source to the destina-tion. Since the source and the destination often locate in different machines, socket is suitable as the channel of events. Every pipe can be described by its input and output events. So we need an asynchronous socket to do events exchange. Now we use Java 2 NIO to be IO foundation that can implement efficient asynchronous event transmis-sion. The GSML browser implements a peer-server which can listen to other brows-ers X  request then load local pipes and order them to connect remote browsers. Interaction Problem Interaction occurred in GSML browser can be divided into two parts: man versus pipe and pipe versus browser. GSML browser is not responsible for handling user X  X  action from input device. Man-pipe interactions are implemented by pipe X  X  internal logic. In-teractions between pipes are described in GSML document by using event transmis-sion. But if we consider the problem in another point of view, the pipe is also can be described by GSML. If the whole GSML app lication is unfolded recursively, the dif-described and verified by GSML. Collaboration Problem lem. After getting the solution of sharing problem, we further encapsulate the GSML browser, which is running a GSML application, as a remote pipe. When users need to the event flow. All the local and remote pipes except remote browser treat the browser pipe equally. Events can be sent to and r eceived from the browser pipe which acts like other normal pipes. By using this mechanism, users can implement heterogeneous collaboration on their demand. 
After addressing and solving above four problems, the architecture of GSML ma-tures naturally. Figure 3 shows this architecture. The evaluation of our work should be divided into two parts: one is for GSML itself, the other is for GSML-based collaboration. 5.1 GSML GSML Target User Normal User Running Constraint All the GSML application must be run in GSML browser. OS Independent Yes. GSML tool suite is implemented by Java language. 
Presentation Power Medium. GSML only implements a GUI container. Pipes Service Oriented Yes. Because pipe can be regarded as a kind of service. Collaboration Support Yes. This is the main goal of GSML. 
Functionality Medium. The pipe X  X  recursive definition limits the power 5.2 GSML-Based Collaboration In Boyd X  X  article [3], he described seven characteristics of business systems and pre-sented four engineering model patterns. The engineering models are: Online, Messag-ing, Batch and Stream IO. We use the similar approach that analyzes GSML-based collaboration from the pattern view to evaluate our work. Motivation In grid environment, a large-scaled science problem usually requires many staffs, in-struments, data and software. These grid applications need not only the service-typed resources based on open standards, but also a great deal of traditional resources with-collaboration among multi-parts of staffs and many kinds of software components. Our goal is to provide a general-purpose technology platform for the CSCW (Com-puter Supported Cooperative Work) community to build and run its applications. Context teractive functions may not be completed without other X  X  help. For example, in China, most people choose to travel by trains. Many travelers like to arrange their plan well tween them, their original travel agency and their new travel agency. Solution and Example GSML-based Education Grid Platform example. Known Uses &amp; Related Patterns pattern is used to solve problems which required several attendants working together to complete a complicated task. Collaboration needs two directions of messaging: one is from local GSML application to remote; another is from remote to local. User Interaction 
Predictability of Access Object Model Structure Throughput Relatively User Response Time Process Initiation Distributed Processing determine user requirements and resource space. User requirements are always chang-ing. Users and resources can join or leave grid at any time. Users in grid need both a flexible resource sharing mechanism and an effective knowledge sharing infrastruc-ture. In grid environment, human-computer relationship is not limited to man-computer interaction any more, but al so includes man-man collaboration. 
GSML is collaboration oriented markup la nguage. It can change the application based asynchronous events are used to be the medium of data and instruction. Events GSML has similar characteristics with message passing programming languages in distributed systems. 
In order to obtain collaboration, GSML app lications are defined recursively so that different applications can import others as their own remote pipes. Events then can be sent to the remote applications. GSML provides a general-purposed collaboration in-frastructure. We also develop a GSML tool suite to help users run GSML applications and edit GSML documents. GSML tools suite includes a composer and a browser. The composer gives users an easy way to organize the event flow visually. The browser includes a peer-server for local pipe s, an event bus for pipes connection and a display container. 
GSML is an important part of VEGA project. VEGA [12] stands: versatile resources, enabling intelligence, global uniformity and autonomous control. GSML sources and GSML-based collaboration to help users promoting their work efficiency. Together with VEGA GOS which aims to deal with G and A problems, GSML has made some significant progress. We are pleased to acknowledge contributions by Lijuan Xiao, Xingwu Liu, Ge He, Science Foundation of China (Grant No. 69925205), the China Ministry of Science and Technology 863 Program (Grant No. 2002AA104310), and the Chinese Academy of Sciences Oversea Distinguished Scholars Fund (Grant No. 20014010). 
