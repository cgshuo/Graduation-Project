 Recommender systems using Collaborative Filtering tech-niques are capable of make personalized predictions. How-ever, these systems are highly vulnerable to profile injec-tion attacks. Group attacks are attacks that target a group of items instead of one, and there are common attributes among these items. Such profiles will have a good probabil-ity of being similar to a large number of user profiles, making them hard to detect. We propose a novel technique for iden-tifying group attack profiles which uses an improved metric based on Degree of Similarity with Top Neighbors ( DegSim ) and Rating Deviation from Mean Agreement ( RDMA ). We also extend our work with a detailed analysis of target item rating patterns. Experiments show that the combined meth-ods can improve detection rates in user-based recommender systems.
 H.3 [ Information Storage and Retrieval ]: H.3.3 Infor-mation Search and Retrieval; K.4 [ Computers and Soci-ety ]: K.4.4 Electronic Commerce X  Security Recommender Systems, Group Attack, Attack Detection
Recently, recommender systems have become an effective tool for information retrieval, and has played an impor-tant role in many popular web services, such as Amazon, YouTube, Netflix, Yahoo! etc. However, due to the open na-ture of CF (Collaborative Filtering) recommender systems, they suffer significant vulnerabilities from being attacked by malicious raters that inject profiles consisting of biased rat-ings. These attacks are carried out in order to influence the system X  X  behavior and have been termed  X  X hilling X  or  X  X ro-file injection X  attacks. Shilling attacks can be divided into push and nuke attacks to make a target item more or less likely to be recommended respectively. Since attackers try to make their profiles look similar to genuine ones, it is a difficult task to correctly identify shilling attacks. Attacks can cause different losses to unprotected systems depending on the purpose of the attackers. They can push or nuke some specified items by injecting some profiles into the sys-tem; in some ways, they can ruin the system by injecting a large number of profiles, which lead to a breakdown of the system. Lam [1] analysed the influence of different types of attacks on prediction shift in recommender systems.
Many attack profiles are based on random and average attack models which were introduced originally in Lam and Reidl [1]. Both of these attack models involve the generation of attack profiles using randomly assigned ratings to the filler items in the profiles. In a random attack the assigned ratings are based on the overall distribution of user ratings in the database, while in an average attack the rating for each filler item is computed based on its average rating for all users. In addition to these standard attack models, several more sophisticated models have been studied. In this work we have evaluated group attack models, including segment and bandwagon attack models [2]. There are four parts in a group attack profile, including target item, selected set, filler set and unrated set. Selected items in malicious profiles are a set of items that make the profile look normal and makes them harder to detect. There are common attributes in a selected set, for example, items that are most rated, those with common topics, those with special interests, and so on. A target item is an item that attackers want to promote. Since items in a select set are rated with the same score as the target item, we see target item as an element in the select set. Unrated items are items that are not rated. The more attack profiles that are statistically identical to genuine profiles, the harder they are to detect. We generated the filler ratings in the same way as the average attack model in this paper.

The main contribution of this paper is an unsupervised approach to attack detection that does not rely on profile classification, called Target Item Analysis ( DeR-TIA ). The other contribution of this research is that we propose a novel metric DegSim to detect group attacks. The rest of the paper is organized as follows. In the next section, we exam-ine previous work in the area of attack detection in recom-mender systems. Section 3 introduces the background work on which our approach is based. Section 4 introduces the detailed formulation of our approach. Our experimental re-sults are presented in Section 5. Finally we summarize our research contributions in Section 6.
The word  X  X hilling X  was first termed in 2004 [1]. There have been some recent research efforts aimed at detecting and reducing the effects of profile injection attacks [3, 4]. These attacks consist of a set of attack profiles, each con-taining biased rating data associated with a fictitious user identity. Since  X  X hilling X  profiles look similar to authentic profiles, it is difficult to identify them. A lot of research has been undertaken to employ supervised learning for shilling attack detection such as [5]. Three classification algorithms [6], k NN-based, C4.5-based and SVM -based, are used to im-prove the robustness of the recommender system. These su-pervised algorithms need a large number of labeled users to enhance the accuracy. Classification-based methods require balanced numbers of attack and normal profiles to train the classifiers. Work by Zhang et al. [7] has shown singular value decomposition ( SVD ) techniques can also help reduce the effects of attacks. It is obvious that unsupervised learn-ing based detectors do not make use of the labeled data which indeed exists and is significant for detection. An un-supervised shilling attack detection algorithm using princi-pal component analysis ( PCA ) is proposed in [8]. Hurley et al. [9] utilize Neyman-Pearson theory to construct both supervised and unsupervised detectors. Statistical detection techniques [10] are also used to detect shilling attacks.
There are item-based CF systems and user-based CF sys-tems, in this paper, we consider only user-based CF algo-rithms. A kNN -based algorithm is the most popular CF algorithm. Rating data is represented as a user  X  item Ma-trix R ,with R ( u, i ) representing the rating given by user u for item i , if there exists a rating on item i , or otherwise there will be a null value. Similarity between users is then computed using the Pearson correlation: where I is the set of items that users u and v both rated, R ui is the rating user u gave to item i ,and R u is the average rating of user u .

It is impractical to apply a supervised learning approach to the raw data because of its sparsity. As a result, some researchers focused on profile analytics data and attribute reduction techniques to lower the dimensionality of the data. In [11] some generic detection attributes and model-specific detection attributes are proposed. In this paper, we use two generic attributes to detect group shilling attacks.
As researchers have hypothesized attack profiles are likely to have a higher similarity with their top 25 closest neigh-bors than real users [11]. The DegSim attribute is based on the average Pearson Correlation of the profile X  X  k nearest neighbours and is calculated in Equation 2: where W uv is the Pearson correlation between user u and user v ,and k is the number of neighbours.

RDMA measures the deviation of agreement from other users on a set of target items, combined with the inverse rating frequency for these items. RDMA can be calculated in the following way: where N u is the number of items user u rated, r u,i is the rating given by user u to item i , NR i is the overall number of ratings in the system given to item i .
There are different metrics that have been proposed to measure the features of profiles. In [12] a number of al-gorithm independent qualitative factors are used in ana-lyzing the influence of a user on a recommender system. Chirita [11] proposed several metrics for analyzing rating patterns of malicious users and evaluate their potential for detection. Considering the fact that attackers should have a high influence in the system in order to effectively promote the target items, we use the metrics RDMA and DegSim to reveal distinctive features in the rating patterns. Overall attackers should have a high influence in the system in or-der to promote the target items effectively. There are three different features in attack profiles, which enable us to dif-ferentiate between genuine and attack profiles. Firstly in group attack profiles, filler items are randomly chosen thus the similarity based on these filler items between attack and genuine profiles should be lower. Secondly, since shilling at-tacks usually try to push items with low ratings, the users mounting such an attack will assign a rating that deviates from the average rating value assigned by the genuine pro-files. Last but not least, all target items are assigned a high-est or lowest value, the count number of this value should be greater than other values among items. Attackers should therefore have relatively high values for RDMA ,aswellas low values in DegSim . Based on these reasons, RDMA and DegSim are used to reveal these distinctive features in the rating patterns. This metric are suitable to detect random and average attacks, but is ineffective in group attacks be-cause the select set in attack profiles can make them more similar with the genuine profiles. So we propose a new metric called DegSim that calculates the similarity of ratings in-dependently. DegSim can be calculated using Equation 4: R is the rating scale of the rating database and r is a rat-ing score. DegSim r is the mean value of DegSim r .When calculating DegSim r , all ratings not equal to r are replaced with 0. DegSim r is then calculated with Equation 2 using the new transform rating matrix. There maybe no difference between attack profiles and genuine profiles in DegSim ,but there would be differences in DegSim . Using this method DegSim of attack profiles will be relatively greater than genuine profiles, as long as there are differences in each rat-ing scale.

There are two phases in DeR-TIA . In the first phase, we extract profile attributes using Equation (3) and Equation (4); use k -means(with k equals to 2) to split each group of attributes; choose the two greater parts, and we consider the intersection between the two parts as the output of Phase 1. From this process, we get a pool of suspicious profiles. The pseudocode is in Algorithm 1.
 Algorithm 1 DeR-TIA Phase 1: Find suspicious profiles Input: Rating Matrix M; Output: Suspected profiles, SUS RD ; 1: RDMA u  X  Calculate RDMA ( M ); 2: DegSim u  X  Calculate DegSim ( M ); 3: { R 1 ,R 2 } X  kmeans( RDMA u ); 4: { D 1 ,D 2 } X  kmeans( DegSim u ); 5: D =max( D 1 , D 2 ), R =max( R 1 , R 2 ); 6: SUS RD  X  X  SUS RD | D  X  R } ; 7: return suspected profiles SUS RD .
 In the second phase, genuine profiles are filtered out in SUS RD using target item analysis. An item is considered a target item, when it is rated proportionally higher than the rest. For example, if 80% of the profiles in the sus-picious pool rated an item with the highest possible rating, we consider that item as a target item. We then move all the profiles that rated the suspected target item with the high-est (or lowest) rating into the DetectedResult Set. These profiles are considered to be attackers. The intuition be-hind this is that we believe the attackers will target one specific item many times if they want to push the item to the recommendation list. To detect the proportion, we use an absolute count threshold  X  . Attack profiles should occur at least 20 times for a considerable prediction shift [4]. On the other side, there will be more false positives if  X  is too small. Considering these factors, we don X  X  consider attacks that number less than 6 and set  X  equals 6. If the count (highest rating r ) for an item is greater than 6, then item is regarded as a target item. Profiles that rated item i with the highest rating r are considered as attackers, and moved to the DetectedResult pool. The pseudocode is in Algorithm 2.
 Algorithm 2 DeR-TIA Phase 2, Filter out genuine profiles. Input: The set of suspected profiles SUS RD ; highest rating Output: Final detect result set DetectedResult ; 1: DetectedResult =  X  ; 2:  X  i  X  I,count i  X  number of ratings in item i equal r ; 3: while max( count ) &gt; X  do 4: item t  X  X  item i | count i =max( count ) } ; 5:  X  p  X  SUS RD ,P  X  p rate item t with r ; 6: DetectedResult  X  P  X  DetectedResult ; 7: SUS RD  X  SUS RD  X  P ; 8: end while 9: return DetectedResult .
In this section, we conduct extensive experiments on dif-ferent datasets and a benchmark detection method.
We now describe datasets we have used in the experi-ments, and the metrics we have used to evaluate attributes, followed by experimental results. We use four publicly-available datasets, including MovieLens 100K Dataset, Movie-Lens 1M Dataset, subset of Netflix Dataset and subset of Eachmovie Dataset. Information of the four datasets is as Table 1.

To evaluate the performance of our technique we used two metrics: Detection Rate and False Positive rate ,whichare used in similar experiments [13]. Detection rate is defined as the number of detected attacks divided by the number of attacks.
 False positive rate is the number of genuine profiles that are predicted as attacks divided by the number of genuine profiles.

Three tests were done, all of them were push attacks. In the first test, we evaluate our technique in four datasets. Attack profiles are generated as follow: in select set, 1% of the most rated items in the datasets are chosen, these items are rated as maximum rating; the ratings for filler items are distributed around the average rating for each item. Figure 1: Detection rate and false positive rate in different datasets when the attack size is 5% and filler size varies.

Figure 1 shows the detection and false positive rates of the proposed method while facing group attacks on differ-ent datasets. Figure 1(A) is the detection rate when the Figure 2: Detection rate of single target attack when attack size and filler size varies.
 Figure 3: Detection rate of group attack when the attack size and filler size varies. attack size is 5% and filler size varies. Figure 1(B) shows the false positive rate of the detection. We find that the detection rates increase very fast along with an increase in filler size. The detection rates reach close to 100% when filler size reaches 4%. The false positive rates, on the other hand, consistently stay below 0.5% when the filler size is greater than 2%, regardless of attack size.

In the second test, we compare our method with the state-of-art unsupervised  X  X  -based method [13] using ML100k Dataset when the select set is zero, that is, there is only one target item in an attack profile, and the filler size is 5% and the attack size varies from 1%, 3%, 5%, 7% and 9%. Figure 2 shows the detection rates of  X  X  -based method (A) and our method (B) when facing single target push attack. In our method (B), detection rate reaches almost 100% when the filler size is greater than 4%. The false positive rates are relatively low.

In the third test, we compare  X  X  -based method and our method using ML100k Dataset when the select set varies from 2 to 10. Figure 3 shows the detection rates of  X  X  -based method (A) and our method (B) when facing group Push attacks. In our method, the detection rate reaches almost 100%. The false positive rates are below 0.5%, which is low.
In this paper, we propose an unsupervised group detection method De-TIA . We improved a metric of profiles called DegSim , which measures the difference in similarity be-tween genuine profiles and attack profiles better. Tests show that a detection method using the new metric can improve the performance of detection. As for future work, we will further study attack detection methods on more complicated attack models using the new metric DegSim . This research work was funded by the National Natural Science Foundation of China under Grant No. 61379158, the Ph.D. Programs Foundation of Ministry of Education of China No. 20120191110028.
