 Business process models are used within a range of organizational initiatives [19]. However, human readers are limited in their cognitive capabilities to make sense of large and complex business process models [2,33]. One well-known way to ad-dress this issue is by applying abstraction , the act of retaining essential properties of a process model on a particular level of analysis while hiding insignificant pro-cess details. Indeed, in a recent empirical in vestigation into the need for business process model abstraction [32], we found that its most prominent use case is the need for gaining a quick overview of the process. In such a situation, the user wants to familiarize herself with a business process but has only a large process model of many detailed activities at her disposal. To deal with such a demand, the process model can then be displayed as a partially ordered set of coarse-grained activities, each of which aggregates a number of lower-level activities. As an example, an abstract ion of a process model that captures the creation of a forecasting report is sho wn in Fig. 1. In this figure, m is the initial model and m a is the abstract model of the same process.

While it has been empirically shown that abstraction can significantly improve the sense-making of large process models [25], a limited insight exists into the criteria that experienced modelers use to decide on which activities to aggregate into new ones. A number of techniques has been proposed that exploit structural properties of a process model to arrive at abstract models [5,24]. It seems likely that experienced process modelers take a wider range of properties into account rather than just a model X  X  control flow. F or example, the fact that two activities use the same document and are executed by the same role may be used as relevant inputs in deciding to cluster these two into an aggregated activity. This situation applies, for example, to the activities Prepare data for quick analysis and Perform quick data analysis in Fig. 1.

In this paper, we complement the existing streams of work with respect to pro-cess model abstraction by proposing an ab straction technique that incorporates semantic aspects contained within a pro cess model. We rely on the observation that industrial process models are often enriched with non-control flow model ele-ments. Examples are: data that is being processed within an activity, IT systems invoked within particular activities, an d roles assigned to activities. The central idea in this paper is that activities associated with the same non-control flow elements are semantically related and, therefore, more appropriate candidates to be aggregated into the same activity than activities without shared elements.
A number of recent contributions exist that consider semantic aspects for aggregation, e.g., [8,31]. However, their assumptions, e.g., the existence of an ac-tivity ontology [31], are too strict for generic use. Our approach is based on the application of the vector space model, an algebraic model popular in information retrieval [28]. As we will discuss in this paper, the use of vector spaces allows to determine the degree of similarity betw een activities according to several in-formation types available in process m odels. We have validated the proposed technique applying it to a process model repository that is in use by a large European telecommunication organization. The repository incorporates hierar-chical relations between high-level activities and the activities that they aggre-gate. Also, the process models contain various types of semantic information. The validation suggests that our approach closely approximates the decisions of the involved modelers to cluster activities.

The main contribution of this paper is a technique that may assist novice process modelers in the abstraction o f complex process models by mimicking the abstraction decisions of more exper ienced modelers, as discovered from ex-isting models. In this way, the technique allows to reuse activity aggregation principles for future aggregation decisions. Since the lack of experienced process modelers is a noted issue in many large modeling projects [26], this is a valuable asset to improve the process model quality. Meanwhile, the designed technique can also support experienced modelers enabling process mod el abstraction in conformance to their specific abstractio n style. Hence, experts can accelerate their modeling routine configuring this technique, while staying in control over the modeling outcome. Finally, the technique can also be used to safeguard a particular  X  X ingerprint X  of a process model collection with resp ect to abstraction choices.

The paper is structured a ccordingly. We continue in Section 2 explaining the proposed algorithm, along with providing the required background knowledge. Section 3 empirically validates the proposed approach, using an industrial set of process models from the tel ecommunication sector. Fin ally, Section 4 contrasts our contribution with the related research, while Section 5 concludes the paper. This section elaborates on the proposed activity aggregation algorithm. After the introduction of the main concepts, we argue how activity aggregation can be interpreted as a clustering problem. We discuss a suitable clustering algorithm and alternative activity distance meas ures. The section focuses on one specific measure that enables the tuning of an activity aggregation. We explain how the aggregation setup is realized and show how the setup information can be mined from an existing process model collection. 2.1 Foundations The designed aggregation algorithm inspects an activity environment, i.e., pro-cess model elements that are related to ac tivities in a process model. Examples of such elements are data objects accessed b y activities and roles supporting ac-tivity execution, e.g., see model in Fig. 1. The list of such model element types varies depending on the process modeling language, the tool at hand, modeling procedures taken into account, and the modeler X  X  style. Each of the model ele-ment types can be considered as an acti vity property that has a specific value. Definition 1 formalizes the activity property concept.
 Definition 1 (Activity Property Value and Activity Property Type).

Let P be a finite nonempty set of activity property values. Alongside, T is a finite nonempty set of activity property types. Mapping type : P X  X  assigns a type to each value.
 The process model in Fig. 1 illustrates Definition 1. Raw data , FA data ,and Analyst are examples of activity property values. The process model presents two activity property types: Role and Data object . For instance, type(Raw data) =Dataobject , type(FA data) = Data object ,and type(Analyst) = Role .Further, we define a process model as follows.
 Definition 2 (Process Model). A tuple m i =( A i ,G i ,F i ,P i ,props i )isa process model, where:  X  A i is a finite nonempty set of activities;  X  G i is a finite set of gateways;  X  N i = A i  X   X  G i is the set of nodes, where  X   X  denotes a disjoint union of sets;  X  F i  X  N i  X  N i is the flow relation;  X  P i  X  X  is a set of activity property values;  X  props i : A i  X  2 P i is a mapping that assigns property values to an activity. Definition 2 does not make a distinction between different gateway types, since the future discussion does not make use of them. Mapping props i assigns activity property values to model activities. Referring to model m in the motivating example of Fig. 1, mapping props i can be illustrated as props i (Collect data) = { Clerk, Raw data } . Notice that Definitions 1 and 2 allow to manage the considered activity property types in a flexible fashion: it is enough to introduce a new activity property type to set T ,thevaluesto P , and respectively update mapping type . Thereafter, new activity properties can be easily considered within the activity aggregation. Finally, we postulate the concept of a process model collection.
 Definition 3 (Process Model Collection). A tuple c =( M, A, P,  X  )isa process model collection, where:  X  M is a nonempty finite set of n process models with elements  X  A =  X   X  i =1 , 2 ,...,n A i is a set of collection activities;  X  P =  X  i =1 , 2 ,...,n P i is a set of collection activity property values;  X   X   X  M  X  M is a subprocess relation refining a process model with subpro-Definition 3 explicitly enumerates the model collection activities and property value types. The relation  X  formalizes the subprocess relation that exists between models. Note that according to the definition,  X  enables only a process model hierarchy without loops. Without loss of generality in the remainder of this paper we discuss abstraction of process m odels within a process model collection. Indeed, a process model m i can be seen as a trivial process model collection c =( { m i } ,A i ,P i ,  X  ). 2.2 Activity Aggregation as Cluster Analysis Problem In this paper we interpret activity aggregation as a problem of cluster analysis. Consider process model m i =( A i ,G i ,F i ,P i ,props i ) from process model collec-tion c =( M, A, P,  X  ). The set of objects to be clust ered is the set of activities A . The objects are clustered according t o a distance measure: objects that are  X  X lose X  to each other according to this measure are put together. The distance between objects is evaluated through a nalysis of activity property values P .The cluster analysis outcome, activity clust ers, correspond to coarse-grained activi-ties of the abstract process model. While cl uster analysis provides a large variety of algorithms, e.g., see [29], we focus on one algorithm that suits the business process model abstraction use case in focus.

In the considered scenario, the user demands control over the number of activ-ities in the abstract process model. For example, a popular practical guideline is that five to seven activities are displayed on each level in the process model [30]. Provided a fixed number, e.g. 6, the clustering algorithm has to assure that the number of clusters equals the request by the user. We turn to the use of k-means clustering algorithm, as it is simple to implement and typically exhibits good performance [16]. K-means clustering partitions an activity set into k clusters. The algorithm assigns an activity to the cluster, which centroid is the closest to this activity. To evaluate an activity distance, we analyze activity property values P . We foresee a number of alternative activity distance measures and elaborate on them in the next section. 2.3 Activity Distance Measures To introduce the distance measure among activities we represent activities as vec-tors in a vector space. Such an approach is inspired by the vector space model, an algebraic model widely used in information retrieval [28]. The space dimensions correspond to activity property values P and the vector space can be captured as vector ( p 1 ,...,p | P | ), where p j  X  P for j =1 ,..., | P | .Consideranexampleset of property values P = { FA data, QA data, Raw data } and the corresponding vector space presented in Fig. 2. A vector v a representing an activity a  X  A i in process model m i =( A i ,G i ,F i ,P i ,props i ) is constructed as follows. If activity a is associated with a property value p j  X  P i , the corresponding vector dimension  X  ( v a ) has value 1; otherwise, the dimension  X  j ( v a )hasvalue0: For process model m in Fig. 1, activities Prepare data for quick analysis and Prepare data for full analysis correspond, respectively, to vectors v 1 =(0 , 1 , 1) and v 2 =(1 , 0 , 1) in the vector space with dimensions FA data, QA data, Raw data , see Fig. 2.

Similarity of two vectors in the space i s defined by the angle between these vectors: the larger the angle, the more distant the activities are. Typically, the cosine of the angle between two vectors i s used as a vector similarity measure: Then, the distance between two activities is: By construction the vector dimension values are non-negative. Hence, the activity similarity and activity distance measures vary within the interval [0 , 1].
For a process model collection c =( M, A, P,  X  ) we distinguish two types of vector spaces. On the one hand, a vect or space can be formed by the dimen-sions corresponding to the activity property values disregard their type, i.e., all elements of P . We reference such spaces as heterogeneous vector spaces .Anexam-ple of a heterogeneous vector space is a space with 6 dimensions Analyst, Clerk, FA data, QA data, Raw data ,and Senior analyst . On the other hand, a vector space can be formed by the dimensions corresponding to the activity property values of a particular type. Given an activity property type t ,suchaspaceis formally defined by the set P t = { X  p  X  P : type ( p )= t } . We refer to such spaces as homogeneous vector spaces . Fig. 2 provides an example of a homogeneous vector space formed by activity properties of type Data object .Wedenotethe activity distance in a heterogeneous space with dist h ( a 1 ,a 2 ) and in a homoge-neous vector space with dist t ( a 1 ,a 2 ), where t is the respective activity property type. Both distance measures can be employed for activity aggregation. If the user wants to make use of one activity property type t only, the distance is de-fined by dist t . To cluster activities according t o several activity property types, dist h can be employed. In addition, we introduce an alternative distance measure dist agg that aggregates multiple homogeneous distance measures dist t : In Equation 3, the set T corresponds to the activity property types that appear in process model collection c . Then, function dist agg is the weighted average value of distance measures in the vector spaces corresponding to the available activity property types. Coefficient w t is the weight of dist t indicating the impact of the activity distance according to property type t . We reference all the weights in Equation 3 as W =( w t 1 ,...,w t n ), where n = | T | . In the remainder of this section we will explain the role of vector W . 2.4 Process Model Collection Abstraction Fingerprint The application of different abstraction operations to one process model leads to various abstract representations of th e modeled business process. The differences between abstraction operations are explained by their pragmatics, i.e., various abstraction purposes. If the abstraction is realized by a human, the modeling habits of the designer are reflected in th e abstraction operation as well. Hence, abstraction pragmatics and modeling habits of the designer are inherent proper-ties of the abstraction operation and together form an abstraction style .Weuse vector W in Equation 3 to model an abstraction style.

From the user perspective vector W is the tool to express the desired abstrac-tion style. We foresee two scenarios how vector W can be obtained. In the first scenario, the user explicitly specifies W . This approach is useful if the user wants to introduce a new abstraction style. However, coming up with an appropriate value for W may be challenging. Hence, the second scenario implies that vector W is mined from a process model collection enriched with subprocess relation (formalized with  X  in Definition 3). The discovered vector is a  X  X ingerprint X  of the process model collection with respect to the used abstraction style. We will now describe an approach how vector W can be discovered from such a process model collection.

The discovery process of a model collection X  X  abstraction fingerprint is driven by the following argumentation. Activi ties of a process model collection are ag-gregated into aggregated activities, i.e. subprocess placeholders, by the model designer. We aim to achieve an activity clustering algorithm that approximates this aggregation behavior of a human. This is possible if an activity distance mea-sure employed by the algorithm resembles the criteria that a human designer uses to aggregate activities into a subprocess. The exact criteria are unknown. Yet, for each pair of activities we can observe the outcome: Either the activities be-long to different subprocesses or to the same one. For a process model collection c =( M, A, P,  X  ) function diff formalizes this observation: To mine the process model collection fingerprint W we select its value in such a way that the behavior of function dist agg approximates the behavior of diff .The discovery of vector W is realized by means of linear regression. In our setting, the values dist t are considered independent variables and the value of function diff the the dependent variable. Components of vector W are the regression coefficients. The standardized coefficien ts indicate the impact of each activity property type on the abstraction style. Hence, it is possible to reveal criteria em-ployed by the human designer during abstraction. Furthermore, the regression X  X  coefficient of determination R 2 allows to judge how well the obtained statisti-cal model explains the observed behavior. For our purposes, R 2 suggests if the discovered statistical model can be use d for business process model abstraction. The proposed activity aggregation mechanism calls for validation. The goal of the validation is to learn how well the proposed operation approximates the abstraction style of human modelers. We performed an empirical validation of the approach by conducting an experiment with a real world business process model collection. This section provides a detailed discussion of the validation; it describes in detail the explored process m odel collection, explains the experiment design, and discusses the validation results. 3.1 Validation Setup As a research object we choose a set of business process models from a large telecommunication service provider. This organization is currently in the process of setting up a repository with high-quality process models, which are brought together for the purpose of consultation and re-use by business users. The model set includes 30 elaborate models, enriched with activity properties of the follow-ing types: roles , responsible roles , IT systems ,and data objects . It is noticeable that a special type of roles, i.e., responsible roles , is also distinguished in these models. In addition to these non-control flow types of information, we also study the impact that activity labels and activity neighboring control flow elements have on the decision to aggregate activities into the same subprocess. To com-pare activities with respect to their labels, the corresponding vector space is formed by the words that appear in the labels. Against this background, finding the distance between activities becomes an information retrieval task as labels can be treated as documents in information retrieval. The comparison of activi-ties with respect to their neighbors shows whether the neighborhoods of the two activities intersect, i.e., contain the same flow elements. Table 1 outlines the rel-evant properties of the process models. In the existing repository, the models are hierarchically organized using a subprocess relation. Within the model set, we have identified 8 subprocess hierarchies. Each hierarchy contains a root process model refined with subprocesses, allowing for several levels of refinement.
To formally validate how good the designed activity aggregation approximates the behavior of modelers clustering a set of activities into the same subprocess, we selected the following approach. For each pair of activities that belong to the same process hierarchy, we have evaluated two values in the process model collection: diff and dist . Here, diff describes the human abstraction style, which indicates whether the activities have been decided to be placed in the same sub-process or not. The value of dist represents the vector space distance between the two activities in accordance with our approach. To discover if the two ap-proaches yield similar results, we study the correlation between the two variables. A strong correlation of two variables implies that dist is a good distance measure in the clustering algorithm. In this case, the inclusion of two activities within the same subprocess is mirrored by a close positioning of the corresponding vec-tors in the vector space. Given the nature of the observed variables, we employ Spearman X  X  rank correlation coefficient.

In the following, we first investigate the human abstraction style in the model collection as a whole. Then, we verify the results organizing a K-fold cross valida-tion. We partition the model sample into 4 subsamples, i.e., k =4andperform four tests. In each test, three subsamples are used to discover vector W , while the fourth subsample is used to evaluate the correlation values between the diff and dist measures in different vector spaces. In this way, a more reliable in-sight is developed into the question whe ther the human abstraction style can be mimicked in contrast to using the whol e process model collection for both the discovery and the evaluation of this correlation. 3.2 Validation Results Table 2 outlines the validation X  X  results. The columns in the table correspond to distance measures. While the first 6 co lumns correspond to distances in ho-mogeneous spaces, the last three columns reflect the distance measure taking into account multiple activity properties. All three distance measures make use of the activity property types in columns 1 X 6. The distance dist h is measured in heterogeneous vector space, where dimensions are activity property values of types listed in columns 1 X 6. The distance measure dist avg is the average value of distances in columns 1 X 6. The distance measure dist agg is evaluated according to Equation 3. Vector W used in dist agg is obtained using linear regression as described in the previous section. Rows of Table 2 correspond to experiments. The first row describes the study of the whole model collection. Rows 2 X 5 de-scribe the results of 4 tests along the K-fold cross validation we explained earlier, while the last row provides the average correlations observed in the 4 separate tests.

The correlation values that are presented in Table 2 are all significant using a confidence level of 99%, i.e., all p values are lower than 0.01. However, no statistically significant results were obtained for the distance in the homogeneous vector space that corresponds to Data objects . Overall, the presented correlation values range around 0.7. This level is gen erally consid ered to indicate a strong correlation [11,12], particularly in situations where human decision making is involved. Therefore, we can speak of a strong relation between the dist and diff measures.

Among the distance measures in homogeneous spaces, one can point out the distance in the Role space that overall displays the highest correlation values for the different studies (0.61 X 0.79). In contrast, correlation values for Label are the lowest (0.20 X 0.53). Another observation is that distances taking into account multiple activity property types tend to have higher correlations. From these, dist agg outperforms all other distance measures with a value arriving at 0.77 when all models are considered. For the a verage values of the K-fold cross vali-dations, however, dist h , dist avg ,and dist agg demonstrate a similar performance, with correlation values of 0.71, 0.67, and 0.68 respectively. This observation can be explained by the fact that dist agg is parameterized by vector W  X  X he abstraction fingerprint of a particular model set. Thus, the distance measure dist agg  X  X rained X  on one model set may never excel dist avg , once the set of mod-els is changed. Tests 1 X 4 support this argumentation. Note that this result does not restrict the applicability of the a pproach: in a real world setting, the goal is to transfer the abstraction style from one model set to another. The average values in the lower row should, theref ore, be seen as most important from the ones displayed.

A careful inspection of the linear regre ssion results associated with parame-terizing vector W provides additional insights. In particular, we are interested in the observed R 2 values and the beta coefficients (also known as  X  X tandardized coefficients X ). The R 2 for the whole model set, as well as the average value for the K-fold cross validation is 0.52. This value shows the explained level of vari-ation in abstraction style as explained by the various distance measures under consideration and can be considered as m oderately strong. The beta coefficients of the distance measures in various spaces reveal their impact on the activity ag-gregation. The beta coefficients for activity property types Role and Responsible role have average values of 0.55 and 0.37, respectively. At the same time, the standardized coefficients of Neighbor and Label property types fluctuate around 0. The average value for IT systems is in between, with a beta coefficient of 0.19. The provided numbers illustrate that the activity property types Role and Responsible role have a big impact on the abstraction style of the considered pro-cess model collection. IT systems also contributes to the activity aggregation, but the influence of activity labels and activity neighborhood is insignificant. Clearly, such insights may differ from one process model to the other.
The validation indicates that the suggested distance measures can be used in a close approximation of the abstraction style of human modelers. Among the introduced measures, dist agg is of great interest, as it takes into account the abstraction style of a particular process model collection. Furthermore, the validation revealed activity property types, Role and Responsible role ,thathave the highest impact on the abstraction style for this particular collection. The topic of business process model abstra ction can be related to several research streams. We identify these streams lo oking both from the perspective of the disciplines of software engineerin g and business process management.

Model properties and relations are thoroughly investigated in the software engineering area. For instance, in [21,22] K  X  uhne elaborates on the concepts of model, metamodel, model types, and mode l relations. These works systematically describe and organize relations, e.g., generalization and classification, which are seminal for the problem of model abstraction. Closely related are also the studies that cover model granularity. In [17], the authors investigate model and meta-model granularity. The authors compare several metamodels and come up with best practices with respect to granularity. One can observe that the relation be-tween a coarse-grained activity in an abstract model and its counterparts in the initial model is the meronymy, or part-o f, relation. Meronymy has been studied in depth in the software engineering domain [3,13]. Although the referenced pa-pers do not provide concrete techniques for the implementation of abstraction within process models, they facilitate a better problem understanding and help to identify the main concepts in this domain.
Business process management is the discipline concerned with using methods, techniques, and software to design, enact, control, and analyze operational pro-cesses. A large body of knowledge corresponds to process model analysis based on model transformations. Model transformations can be reused in the context of the abstraction problem. An example of such a transformation consists of re-duction rule sets for Petri nets, e.g., see [4,23,27]. Each reduction rule explicitly defines a structural fragment to be discovered in the model and a method of this fragment transformation. Hence, re duction rule sets enable process model abstraction through iterative rule application. As the transformed process frag-ments are explicitly defined, each reduction rule set handles only a particular model class. Thereby, each reduction rule set requires an argument about the model class reducible with the given rules. The model class limits the application of abstraction approaches based on reduction rules [5,10]. Process model decom-position approaches are free of this limitation: they seek for process fragments with particular properties. An examp le of such a decomposition is presented in [34], where single entry single exit fragments are discovered. The result of process model decomposition is the hier archy of process fragments according to the containment relation, i.e., the process structure tree. Such a tree can be used for abstraction in process models [24]. Finally, one can distinguish model transformations that preserve process behavior properties. In [1], van der Aalst and Basten introduce three notions of behavioral inheritance for WF-nets and study inheritance properties. The paper suggests model transformations, such that the resulting model inherits the behavior of the initial model. An approach for process model abstraction can exploit such transformations as basic opera-tions. While the outlined model transformations can support solving the general problem of process model abstraction, th ey all focus on structural and behav-ioral aspects of models and model transfo rmations, leaving the semantic aspect out of scope.

Many tasks in the management of large p rocess model collections can be traced back to the problem of activity matching , which is closely related to the problem of business process model abstraction. Ex amples of such management tasks are: the search for a particular process model over a process model set or ensuring the consistency of models capturing one and the same process from different perspec-tives. Activity matching is realized through analysis of activity properties: activ-ity labels, referenced data objects and neighboring activities. In [9,35] the authors suggest activity matching algorithms and evaluate them. While the named works explore the existing process models and do not directly address the problem of pro-cess model abstraction, their results have a potential of being applied in business process model abstraction. Semantic aggregation of activities relates to research on semantic business process management. Notice that process models enriched with semantic information facilitate many process analysis tasks, see [18]. Along this line of research, several authors argue how to use activity ontologies to realize activity aggregation [6,7]. It should be noticed, however, that such works imply the existence of a semantic description for mo del elements and their relations, which is a restriction that rarely holds in real world settings.

Establishing an activity X  X  granularity level is also a recurrent challenge in process mining, where logs contain record s that are often very fine-granular. As such, the process models directly mine d from the logs can be overloaded with information making them hard to comprehend. Activity clustering is an efficient means to raise the abstraction level for the mined models. In [14,15] G  X  unther and van der Aalst propose activity aggregation mechanisms based on clustering algorithms. The mechanisms extensively use information present in process logs, but which are less common for process models, i.e., timestamps of activity starts and stops, activity frequencies, and transition probabilities. Thus, in contrast to the activity aggregation approach proposed in this paper, process mining considers other activity property types for clustering and utilize other clustering algorithms. Despite business process model abstra ction has been addressed in a number of research endeavors, this paper proposes a novel approach in this area. Specifically, it exploits semantic aspects X  X eyond the c ontrol-flow perspective X  X o determine a similarity between different activities for the purpose of simplifying process model abstraction. Relevant levels of s imilarity can be deter mined on the basis of existing process models in which abstraction was already applied.

Our main contribution is a method to discover sets of related activities, where each set corresponds to a coarse-grained activity of an abstract process model. As a second contribution, we propose an approach to discover an abstraction style inherent to a given process model collection, which is reusable for ab-straction of new process models. Both co ntributions are of practical interest, as they addresses model management i ssues recurrently appearing in process model projects. The experimental validation provides strong support for the applicability and effectiveness of the presented ideas.
 Our approach is characterized by a number of limitations and assumptions. First of all, it builds on the assumption that all kinds of semantic information, such as data objects, roles, and resour ces, can be observed within the descrip-tions of process models in industrial collections. The process model collection we obtained through our co operation with a large tel ecommunication company clearly confirms this idea, but this also applies to other industrial repositories, such as the SAP Reference Model [20]. Seco ndly, in our validation we have merely focused on the appearance or not of two activities being within the same sub-process or process model, although it can be imagined that a more fine-grained correspondence measure could y ield even more useful results.

These and other limitations guide our future research plans. The direct next step for us is the use of advanced vector space models reflecting the relations between different activity property values . Such models enable activity cluster-ing algorithms to consider the structure of organigrams and data object rela-tions. Meanwhile, it can also be beneficial to consider other clustering algorithms and compare the outcome with the solution introduced in this paper. From a practical perspective, it is important to suggest names for coarse-grained activi-ties that are products of activity aggregation. Finally, we would like to improve the validation method for activity aggregation. On the one hand, this implies re-placing correlation with an alternative metric for activity aggregation quality. On the other hand, the validation will require an empirical study involving human modelers and stakeholders, who can evaluate the proposed activity aggregation.
