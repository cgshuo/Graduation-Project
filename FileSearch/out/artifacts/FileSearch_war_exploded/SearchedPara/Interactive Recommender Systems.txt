 In this tutorial we will explore the field of interactive video and music recommendations (eg [1, 6, 3, 2]) and their appli-cation at Netflix and Spotify. Interactive recommender sys-tems enable the user to steer the received recommendations in the desired direction through explicit interaction with the system. In this tutorial, we outline the various aspects that are crucial for a smooth and effective user experience. In particular, we present our insights from several A/B tests. The tutorial will help researchers and practitioners in the RecSys community to gain a deeper understanding of the challenges related to the application of recommender sys-tems in the online video and music entertainment business. H.2.8 [ Database Management ]: Database Applications X  Data Mining Interactive Recommender Systems; Personalization
In the larger ecosystem of recommender systems used on a website, interactive recommender systems are positioned between a lean-back recommendation experience of the user and an active search for a specific piece of content. They adapt to the user X  X  current interests based on instantaneous explicit feedback, steering the recommendations in the de-sired direction, or to discover new titles in a certain niche of the catalog.

In this tutorial, we will discuss several aspects that are especially important for interactive recommender systems, including the following: design of the user interface and its tight integration with the algorithm in the back-end; com-putational efficiency of the recommender algorithm; as well as choosing the right balance between exploiting the feed-back from the user as to provide relevant recommendations, c  X  and enabling the user to explore the catalog and steer the recommendations in the desired direction.

In particular, we will explore the field of interactive video and music recommendations and their application at Net-flix and Spotify. We outline some of the user-experiences built, and discuss the approaches followed to tackle the var-ious aspects of interactive recommendations. We will discuss lessons learned from our user studies and A/B tests.
In this tutorial, we will first discuss challenges that are specific to building an interactive recommender system.
In an interactive setting, where recommendations adjust based on the user X  X  feedback, it is quite easy to confuse the users so that they cannot clearly follow what and why recom-mendations are changing. We will discuss different variants of guiding the user in an intuitive way through an interactive experience.
While an interactive system has to yield relevant recom-mendations by exploiting the user X  X  feedback, it is equally important that the provided recommendations allow the user to navigate / explore and to interactively steer the recom-mendations in the desired direction. As to ensure naviga-bility, diversity in the recommendation list as well as the popularity of the recommended items has to be adapted on a continuous basis according the user X  X  sequence of actions.
The degree of diversity (eg [8]), as opposed to focused / relevant recommendations, varies dependent on the user X  X  sequence of actions. Beginning with a vastly diverse set, diversity may be reduced as long as the user continues to zoom into a certain niche of similar items. In contrast, when the sequence of a user X  X  actions indicates that she intends to navigate out of a certain niche, or from one niche to a neighboring one, the algorithm has to automatically increase the degree of diversity.

Additionally, the balance between popularity and rele-vance/similarity of items (eg [7]) varies according to the user X  X  actions as well: as the user zooms into a niche area, popularity may be reduced. As to aid navigation to a neigh-boring niche or to a completely different genre, it is helpful to recommend increasingly popular titles.
In the second part of the tutorial, we will discuss the im-plications of the above challenges on the user interface as well as the recommendation algorithm of interactive recom-mender systems. We will illustrate the various points based on the two systems that we have built.
There are several important properties of the user inter-face (UI). First, it has to be easy and intuitive to use, re-quiring minimal effort by the user. Moreover, the UI has to be tightly integrated with the recommendation algorithm in the back-end. For one, the UI has to allow the user to provide informative feedback data to the algorithm. Con-versely, the UI has to allow for instantaneous updates of the recommendations by the algorithm, while making these up-dates transparent and easy to understand. For instance, we found it to be less confusing to the user when the UI up-dates the recommendations only slowly, so that the user can understand and follow them. It is also crucial to understand the user X  X  intent when they come to the site as to determine as to when and how to invite the user to provide feedback in an interactive mode.
Specific to algorithms used in an interactive setting, we will discuss the following important properties.

While explicit feedback is provided by the user in an in-teractive setting, we found it useful to train the algorithm on implicit feedback data, as these data better reflect what users actually prefer to play (as opposed to what they think they like).

The algorithm has to be flexible as to combine relevance, popularity and diversity in varying degrees as to capture the user X  X  intent and allow them to receive useful recommenda-tions while also enabling effective navigation at the same time, as discussed above. For instance, through matrix fac-torization (eg [5, 4]) one can derive a compact representation for each item in the catalog in the form of a latent vector. While the orientations of the vectors reflect similarity, their norms reflect the items X  popularity. These are important properties to derive a scoring function that allows for dy-namic modification of the norms of the vectors, as well as incorporating a notion of diversity based on item similarity. In addition to the recommender algorithm, we used a sec-ond algorithm as to predict the optimal balance (ie weights) between relevance, popularity and diversity based on the sequence of a user X  X  actions.

Moreover, the algorithms for interactive recommender sys-tems have to be sufficiently efficient as to compute recom-mendations in real time based on the user X  X  current actions.
Spotify X  X  radio service allows users to start an interactive music session seeded by an artist, track, album, genre, or playlist. The service will then play music similar to the seed. Additionally, the radio service provides users the op-portunity to explicitly  X  X une X  their station using positive and negative  X  X humbs X . The underlying recommendation engine powering the radio service jointly optimizes for seed similar-ity, artist and album diversity, user taste personalization, as well as station personalization based on the explicit thumbs feedback user has provided. An important difference to note between the music and movie domains is that music is con-sumed more quickly and there is less of a commitment to evaluate recommendations. This means that explicit inter-active feedback can be gathered more quickly and there is less of a cost in exploring new content to gather taste and intent.
Interactive recommendations can help the user find videos to watch in various scenarios that are not well covered by the Netflix homepage or search. For instance, a user may like to actively explore certain sub-genres of movies or TV shows in the Netflix catalog, before settling on a video to watch. To this end, we built two user experiences. In the first one, a single title is shown at a time and the user can navigate with positive and negative  X  X humbs X  to the next title. In the second experience, several relevant but diverse titles are shown simultaneously, and the user is able to se-lect the subset of interest. Based on the chosen titles, the recommendations are refreshed, which enables the user to it-eratively refine the set of selected titles and hence to explore parts of the catalog. We conducted several user studies as well as A/B tests, where we experimented with various user interfaces as well as algorithms tuned in different ways.
H.S. and R.v.Z. would like to thank Caitlin Smallwood and Carlos Gomez-Uribe for their encouragement and sup-port of this work. [1] S. Bostandjiev, J. O X  X onovan, and T. H  X  ollerer. [2] N. Hariri, B. Mobasher, and R. Burke. Context [3] E. Gansner, Y. Hu, S. Kobourov, and C. Volinsky. [4] C. Johnson. Logistic Matrix Factorization for Implicit [5] Y. Koren, R. Bell, and C. Volinsky. Matrix [6] B. N. Miller, I. Albert, S. K. Lam, J. A. Konstan, and [7] H. Steck. Item popularity and recommendation [8] S. Vargas, L. B. , A. Karatzoglou, and P. Castells.
