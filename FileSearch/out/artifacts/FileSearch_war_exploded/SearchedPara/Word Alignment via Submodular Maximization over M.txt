 Word alignment is a key component in most statisti-cal machine translation systems. While classical ap-proaches for word alignment are based on generative models (e.g., IBM models (Brown et al., 1993) and HMM (Vogel et al., 1996)), word alignment can also be viewed as a matching problem, where each word pair is associated with a score reflecting the desirabil-ity of aligning that pair, and the alignment is then the highest scored matching under some constraints.
Several matching-based approaches have been proposed in the past. Melamed (2000) introduces the competitive linking algorithm which greedily constructs matchings under the one-to-one mapping assumption. In (Matusov et al., 2004), matchings are found using an algorithm for constructing a maximum weighted bipartite graph matching (Schrijver, 2003), where word pair scores come from alignment posteriors of generative models. Similarly, Taskar et al. (2005) cast word alignment as a maximum weighted matching problem and propose a framework for learning word pair scores as a function of arbitrary features of that pair. These approaches, however, have two potentially substantial limitations: words have fertility of at most one, and interactions between alignment decisions are not representable.
Lacoste-Julien et al. (2006) address this issue by formulating the alignment problem as a quadratic assignment problem, and off-the-shelf integer linear programming (ILP) solvers are used to solve to op-timization problem. While efficient for some median scale problems, ILP-based approaches are limited since when modeling more sophisticated interactions, the number of variables (and/or constraints) required grows polynomially, or even exponentially, making the resultant optimization impractical to solve.
In this paper, we treat the word alignment problem as maximizing a submodular function subject to matroid constraints (to be defined in Section 2). Submodular objective functions can represent complex interactions among alignment decisions, and essentially extend the modular (linear) objectives used in the aforementioned approaches. While our extensions add expressive power, they do not result in a heavy computational burden. This is because maximizing a monotone submodular function under a matroid constraint can be solved efficiently using a simple greedy algorithm. The greedy algorithm, moreover, is a constant factor approximation algorithm that guarantees a near-optimal solution. In this paper, we moreover show that submodularity naturally arises in word alignment problems when modeling word fertility (see Section 4). Experiment results on the English-French Hansards alignment task show that our approach achieves lower align-ment error rates compared to the maximum weighted matching approach, while being at least 50 times faster than an ILP-based approach. Matroids and submodularity both play important roles in combinatorial optimization. We briefly in-troduce them here, referring the reader to (Schrijver, 2003) for details.

Matroids are combinatorial structures that general-ize the notion of linear independence in matrices. A pair ( V, I ) is called a matroid if V is a finite ground set and I is a nonempty collection of subsets of V that are independent . In particular, I must satisfy (i) if X  X  Y and Y  X  I then X  X  I , (ii) if X,Y  X  I and | X | &lt; | Y | then X  X  X  e } X  X  for some e  X  Y \ X . We typically refer to a matroid by listing its ground set and its family of independent sets: M = ( V, I ) .
A set function f : 2 V  X  R is called submodu-lar (Edmonds, 1970) if it satisfies the property of diminishing returns : for any X  X  Y  X  V \ v , a sub-modular function f must satisfy f ( X + v )  X  f ( X )  X  f ( Y + v )  X  f ( Y ) . That is, the incremental  X  X alue X  of v decreases as the context in which v is considered grows from X to Y . If this is satisfied everywhere with equality, then the function f is called modu-lar . A set function f is monotone nondecreasing if  X  X  X  Y , f ( X )  X  f ( Y ) . As shorthand, in this pa-per, monotone nondecreasing submodular functions will simply be referred to as monotone submodular .
Historically, submodular functions have their roots in economics, game theory, combinatorial optimiza-tion, and operations research. More recently, submod-ular functions have started receiving attention in the machine learning and computer vision community (Kempe et al., 2003; Narasimhan and Bilmes, 2004; Narasimhan and Bilmes, 2005; Krause and Guestrin, 2005; Narasimhan and Bilmes, 2007; Krause et al., 2008; Kolmogorov and Zabin, 2004; Jegelka and Bilmes, 2011) and have recently been introduced to natural language processing for the task of docu-ment summarization (Lin and Bilmes, 2010; Lin and Bilmes, 2011). We are given a source language (English) string e I 1 = e ,  X  X  X  ,e i ,  X  X  X  ,e I and a target language (French) string f J 1 = f 1 ,  X  X  X  ,f j ,  X  X  X  ,f J that have to be aligned. Define the word positions in the English string as set E , { 1 ,  X  X  X  ,I } and positions in the French string as set F , { 1 ,  X  X  X  ,J } . An alignment A between the two word strings can then be seen as a subset of the Cartesian product of the word posi-tions, i.e., A  X  { ( i,j ) : i  X  E,j  X  F } , V, and V = E  X  F is the ground set. For convenience, we refer to element ( i,j )  X  A as an edge that connects i and j in alignment A .

Restricting the fertility of word f j to be at most k j is mathematically equivalent to having | A  X  P E j | X  k , where A  X  V is an alignment and P E j = E  X { j } . Intuitively, P E j is the set of all possible edges in the ground set that connect to j , and the cardinality of the intersection between A and P E j indicates how many edges in A are connected to j . Similarly, we can impose constraints on the fertility of English words by constraining the alignment A to satisfy | A  X  P F i |  X  k i for i  X  E where P F i = { i } X  F . Note that either of { P E j : j  X  F } or { P F i : i  X  E } constitute a partition of V . Therefore, alignments A that satisfy | A  X  P E j | X  k j ,  X  j  X  F , are independent in the partition matroid M E = ( V, I E ) with and alignments A that satisfy | A  X  P F i | X  k i ,  X  i  X  E , are independent in matroid M F = ( V, I F ) with
Suppose we have a set function f : 2 V  X  R + that measures quality (or scores) of an alignment A  X  V , then when also considering fertility constraints, we can treat the word alignment problem as maximizing a set function subject to matroid constraint: Problem 1. max A  X  V f ( A ) , subject to: A  X  X  , where I is the set of independent sets of a matroid (or it might be the set of independent sets simultaneously in two matroids, as we shall see later).

Independence in partition matroids generalizes the typical matching constraints for word alignment, where each word aligns to at most one word ( k j = 1 ,  X  j ) in the other sentence (Matusov et al., 2004; Taskar et al., 2005). Our matroid generalizations pro-vide flexibility in modeling fertility, and also strate-gies for solving the word alignment problem effi-ciently and near-optimally. In particular, when f is monotone submodular, near-optimal solutions for Problem 1 can be efficiently guaranteed.
For example, in (Fisher et al., 1978), a simple greedy algorithm for monotone submodular function maximization with a matroid constraint is shown to have a constant approximation factor. Precisely, the greedy algorithm finds a solution A such that f ( A )  X  1 m +1 f ( A  X  ) where A  X  is the optimal solution and m is number of matroid constraints. When there is only one matroid constraint, we get an approxima-tion factor 1 2 . Constant factor approximation algo-rithms are particularly attractive since the quality of the solution does not depend on the size of the prob-lem, so even very large size problems do well. It is also important to note that this is a worst case bound, and in most cases the quality of the solution obtained will be much better than this bound suggests.
Vondr  X  ak (2008) shows a continuous greedy al-gorithm followed by pipage rounding with approx-imation factor 1  X  1 /e (  X  0 . 63 ) for maximizing a monotone submodular function subject to a ma-troid constraint. Lee et al. (2009) improve the 1 m +1 -approximation result in (Fisher et al., 1978) by show-ing a local-search algorithm has approximation guar-antee of 1 m + for the problem of maximizing a mono-tone submodular function subject to m matroid con-straints ( m  X  2 and &gt; 0 ). In this paper, however, we use the simple greedy algorithm for the sake of efficiency. We outline our greedy algorithm for Prob-lem 1 in Algorithm 1, which is slightly different from the one in (Fisher et al., 1978) as in line 4 of Al-gorithm 1, we have an additional requirement on a such that the increment of adding a is strictly greater than zero. This additional requirement is to main-tain a higher precision word alignment solution. The theoretical guarantee still holds as f is monotone  X  i.e., Algorithm 1 is a 1 2 -approximation algorithm for Problem 1 (only one matroid constraint) when f is monotone submodular.

Algorithm 1 requires O ( | V | 2 ) evaluations of f . In practice, the argmax in Algorithm 1 can be efficient implemented with priority queue when f is submod-ular (Minoux, 1978), which brings the complexity down to O ( | V | log | V | ) oracle function calls. We begin this section by demonstrating that submod-ularity arises naturally when modeling word fertility. To do so, we borrow an example of fertility from (Melamed, 2000). Suppose a trained model estimates s ( e 1 ,f 1 ) = . 05 ,s ( e 1 ,f 2 ) = . 02 and s ( e 2 ,f where s ( e i ,f j ) represents the score of aligning e i f . To find the correct alignment ( e 1 ,f 1 ) and ( e 2 ,f the competitive linking algorithm in (Melamed, 2000) poses a one-to-one assumption to prevent choosing ( e 1 ,f 2 ) over ( e 2 ,f 2 ) . The one-to-one assumption, however, limits the algorithm X  X  capability of handling models with fertility larger than one. Alternatively, we argue that the reason of choosing ( e 2 ,f 2 ) rather than ( e 1 ,f 2 ) is that the benefit of aligning e 1 and f diminishes after e 1 is already aligned with f 1  X  this is exactly the property of diminishing returns, and therefore, it is natural to use submodular functions to model alignment scores.

To illustrate this further, we use another real example taken from the trial set of English-French Hansards data. The scores estimated from the data for aligning word pairs ( the, le ), ( the, de ) and ( of, de ) are 0 . 68 , 0 . 60 and 0 . 44 respectively. Given an English-French sentence pair:  X  I have stressed the CDC as an example of creative, aggressive effective public ownership  X  and  X  je le ai cit  X  e comme exemple de propri  X  et  X  e publique cr  X  eatrice, dynamique et efficace  X , an algorithm that allows word fertility larger than 1 might choose alignment ( the, de ) over the fact that the is already aligned with le . Now if we use a submodular function to model the score of aligning an English word to a set of French words, we might obtain the correct alignments ( the, le ) and ( of, de ) by incorporating the diminishing returns property (i.e., the score gain of ( the, de ), which is 0 . 60 out of context, could diminish to something less than 0 . 44 when evaluated in the context of ( the, le )).
Formally, for each i in E , we define a mapping  X  : 2 V  X  2 F with i.e.,  X  i ( A ) is the set of positions in F that are aligned with position i in alignment A .

We use function f i : 2 F  X  R + to represent the benefit of aligning position i  X  E to a set of positions in F . Given score s i,j of aligning i and j , we could have, for S  X  F , where 0 &lt;  X   X  1 , i.e., we impose a concave function over a modular function, which produces a submod-ular function. The value of  X  determines the rate that the marginal benefit diminishes when aligning a word to more than one words in the other string. Summing over alignment scores in all positions in E , we obtain the total score of an alignment A : which is again, monotone submodular. By diminish-ing the marginal benefits of aligning a word to more than one words in the other string, f ( A ) encourages the common case of low fertility while allowing fer-tility larger than one. For instance in the aforemen-tioned example, when  X  = 1 2 , the score for aligning both le and de to the is the score of aligning the to le and of to de is  X  0 . 44  X  1 . 49 , leading to the correct alignment. We evaluated our approaches using the English-French Hansards data from the 2003 NAACL shared task (Mihalcea and Pedersen, 2003). This corpus con-sists of 1.1M automatically aligned sentences, and comes with a test set of 447 sentences, which have been hand-aligned and are marked with both  X  X ure X  and  X  X ossible X  alignments (Och and Ney, 2003). Us-ing these alignments, alignment error rate (AER) is calculated as: where S is the set of sure gold pairs, and P is the set of possible gold pairs. We followed the work in (Taskar et al., 2005) and split the original test set into 347 test examples, and 100 training examples for parameters tuning.

In general, the score of aligning i to j can be modeled as a function of arbitrary features. Although parameter learning in our framework would be another interesting topic to study, we focus herein on the inference problem. Therefore, only one feature (Eq. 5) was used in our experiments in order for no feature weight learning to be required. In particular, we estimated the score of aligning i to j as where the translation probability p ( f j | e i ) and alignment probability p ( i | j,I ) were obtained from IBM model 2 trained on the 1.1M sentences. The IBM 2 models gives an AER of 21.0% with French as the target, in line with the numbers reported in Och and Ney (2003) and Lacoste-Julien et al. (2006).
We tested two types of partition matroid con-straints. The first is a global matroid constraint: which restricts fertility of all words on F side to be at most b. This constraint is denoted as Fert F ( A )  X  b in Table 1 for simplicity. The second type, denoted as Fert F ( A )  X  k j , is word-dependent: where the fertility of word on j is restricted to be at most k j . Here k j = max { b : p b ( f )  X   X ,b  X  { 0 , 1 ,..., 5 }} , where  X  is a threshold and p b ( f ) is the probability that French word f was aligned to at most b English words based on the IBM 2 alignment.
As mentioned in Section 3, matroid constraints generalize the matching constraint. In particular, when using two matroid constraints, Fert E ( A )  X  1 and Fert F ( A )  X  1 , we have the matching constraint where fertility for both English and French words are restricted to be at most one. Our setup 1 (see Ta-ble 1) uses these two constraints along with a modular objective function, which is equivalent to the max-imum weighted bipartite matching problem. Using greedy algorithm to solve this problem, we get AER 21.0% (setup 1 in Table 1)  X  no significant difference compared to the AER (20.9%) achieved by the ex-act solution (maximum weighted bipartite matching approach), illustrating that greedy solutions are near-optimal. Note that the bipartite matching approach does not improve performance over IBM 2 model, presumably because only one feature was used here.
When allowing fertility of English words to be more than one, we see a significant AER reduction using a submodular objective (setup 4 and 5) instead of a modular objective (setup 2 and 3), which verifies our claim that submodularity lends itself to modeling the marginal benefit of growing fertility. In setup 2 and 4, while allowing larger fertility for English words, we restrict the fertility of French words to be most one. To allow higher fertility for French words, one possible approach is to use constraint Fert F ( A )  X  2 , in which all French words are allowed to have fertility up to 2. This approach, how-ever, results in a significant increase of false positive alignments since all French words tend to collect as many matches as permitted. This issue could be alleviated by introducing a symmetric version of the objective function in Eq. 3 such that marginal benefit of higher fertility of French words are also compressed. Alternatively, we use the second type of matroid constraint in which fertility upper bounds of French words are word-dependent instead of global. With  X  = . 8 , about 10 percent of the French words have k j equal to 2 or greater. By using the word-dependent matroid constraint (setup 3 and 5), AERs are reduced compared to those using global matroid constraints. In particular, 18.6% AER is achieved by setup 5, which significantly outperforms the maximum weighted bipartite matching approach. We also compare our method with model of Lacoste-Julien et al. (2006) which also allows fer-tility larger than one by penalizing different levels of fertility. We used s i,j as an edge feature and p b ( f ) as a node feature together with two additional features: a bias feature and the bucketed frequency of the word type. The same procedures for training and decoding as in (Lacoste-Julien et al., 2006) were performed where MOSEK was used as the ILP solver. As shown in Table 1, performance of setup 5 outperforms this model and moreover, our approach is at least 50 times faster: it took our approach only about half a second to align all the 347 test set sentence pairs whereas using the ILP-based approach took about 40 seconds. We have presented a novel framework where word alignment is framed as submodular maximization subject to matroid constraints. Our framework extends previous matching-based frameworks in two respects: submodular objective functions generalize modular (linear) objective functions, and matroid constraints generalize matching constraints. Moreover, such generalizations do not incur a prohibitive computational price since submodular maximization over matroids can be efficiently solved with performance guarantees. As it is possible to leverage richer forms of submodular functions that model higher order interactions, we believe that the full potential of our approach has yet to be explored. Our approach might lead to novel approaches for machine translation as well.
 We thank Simon Lacoste-Julien for sharing his code and features from (Lacoste-Julien et al., 2006), and the anonymous reviewers for their comments. This work was supported by NSF award 0905341.
