 Twitter is a well-known social network service that allows users to post short 140 character status update which is called  X  X weet X . A twitter user can  X  X ollow X  other users to get their latest updates. Twitter cur-rently has 19 million active users. These users fol-lows 80 other users on average. Default Twitter ser-vice displays  X  X weets X  in the order of their times-tamps. It works well when the number of tweets the user receives is not very large. However, the flat timeline becomes tedious to read even for av-erage users with less than 80 friends. As Twitter service grows more popular in the past few years, users X   X  X ollowing X  list starts to consist of Twitter ac-counts for different purposes. Take an average user  X  X ob X  for example. Some people he follows are his  X  X olleagues X , some are  X  X echnology Related Peo-ple X , and others could be  X  X V show comedians X . When Bob wants to read the latest news from his  X  X olleagues X , because of lacking effective ways to group users, he has to scroll through all  X  X weets X  from other users. There have been suggestions from many Twitter users that a grouping feature could be very useful. Yet, the only way to create groups is to create  X  X ists X  of users in Twitter manually by se-lecting each individual user. This process is tedious and could be sometimes formidable when a user is following many people.

In this paper, we propose an interactive group cre-ating system for Twitter. A user creates a group by first providing a small number of seeding users, then the system ranks the friend list according to how likely a user belongs to the group indicated by the seeds. We know in the real world, users like to group their  X  X ollows X  in many ways. For example, some may create groups containing all the  X  X omputer sci-entists X , others might create groups containing their real-life friends. A system using  X  X ocial informa-tion X  to find friend groups may work well in the lat-ter case, but might not effectively suggest correct group members in the former case. On the other hand, a system using  X  X extual information X  may be effective in the first case, but is probably weak in finding friends in the second case. Therefore in this paper, we propose to use multiple information sources for group member suggestions, and use a cross-validation approach to find the best-fit sub-system for the final suggestion. Our results show that automatic group suggestion is feasible and that selecting approximate sub-system yields additional gain than using individual systems. There is no previous research on interactive sug-gestion of friend groups on Twitter to our knowl-edge; however, some prior work is related and can help our task. (Roth et al., 2010) uses implicit so-cial graphs to help suggest email addresses a person is likely to send to based on the addresses already entered. Also, using the social network informa-tion, hidden community detection algorithms such as (Palla et al., 2005) can help suggest friend groups. Besides the social information, what a user tweets is also a good indicator to group users. To character-ize users X  tweeting style, (Ramage et al., 2010) used semi-supervised topic modeling to map each user X  X  tweets into four characteristic dimensions. Creating groups manually is a tedious process. However, creating groups in an entirely un-supervised fashion could result in unwanted results. In our system, a user first indicates a small number of users that belong to a group, called  X  X eeds X , then the system suggests other users that might belong to this group. The general structure of the system is shown in Figure 1.
As mentioned earlier, we use different informa-tion sources to determine user/group similarity, in-cluding textual information and social connections. A module is designed for each information source to rank users based on their similarity to the provided seeds. In our approach, the system first tries to detect what sub-system can best fit the seed group. Then, the corresponding system is used to generate the fi-nal ranked list of users according to the likelihood of belonging to the group.

After the rank list is given, the user can adjust the size of the group to best fit his/her needs. In addition, a user can correct the system by specifically indicat-ing someone as a  X  X egative seed X , which should not be on the top of the list. In this paper, we only con-sider creating one group at a time with only  X  X ositive seed X  and do not consider the relationships between different groups.

Since determining the best fitting sub-system or the group type from the seeds needs the use of the two sub-systems, we describe them first. Each sub-system takes a group of seed users and unlabeled target users as the input, and provides a ranked list of the target users belonging to the group indicated by the seeds. 3.1 Tweet Based Sub-system In this sub-system, user groups are modeled using the textual information contained in their tweets. We collected all the tweets from a user and grouped them together.

To represent the tweets information, we could use a bag-of-word model for each user. However, since Twitter messages are known to be short and noisy, it is very likely that traditional natural language pro-cessing methods will perform poorly. Topic mod-eling approaches, such as Latent Dirichlet Alloca-tion (LDA) (Blei et al., 2003), model document as a mixture of multinomial distribution of words, called topics. They can reduce the dimension and group words with similar semantics, and are often more robust in face of data sparsity or noisy data. Be-cause tweet messages are very short and hard to infer topics directly from them, we merge all the tweets from a user to form a larger document. Then LDA is applied to the collection of documents from all the users to derive the topics. Each user X  X  tweets can then be represented using a bag-of-topics model, where the i th component is the proportion of the i th topic appearing in the user X  X  tweet.

Given a group of seed users, we want to find target users that are similar to the seeds in terms of their tweet content. To take multiple seed instances into consideration, we use two schemes to calculate the similarity between one target user and a seed group.  X  centroid: we calculate the centroid of seeds,  X  average: we calculate the similarity between
In this paper, we explore using two different sim-ilarity functions between two vectors ( u i and v i ), cosine similarity and inverse Euclidean distance, shown below respectively.
After calculating similarity for all the target users, this tweet-based sub-system gives the ranking ac-cordingly. 3.2 Friend Based Sub-system As an initial study, we use a simple method to model friend relationship in user groups. In the future, we will replace it with other better performing meth-ods. In this sub-system, we model people using their social information. In Twitter, social informa-tion consists of  X  X ollowing X  relation and  X  X entions X . Unlike other social networks like  X  X acebook X  or  X  X yspace X , a  X  X ollowing X  relation in Twitter is di-rected. In Twitter, a  X  X ention X  happens when some-one refers to another Twitter user in their tweets. Usually it happens in replies and retweets. Because this sub-system models the real-life friend groups, we only consider bi-directional following relation between people. That is, we only consider an edge between users when both of them follow each other. There are many hidden community detection algo-rithms that have been proposed for network graphs (Newman, 2004; Palla et al., 2005). Our task is how-ever different in that we know the seed of the target group and the output needs to be a ranking. Here, we use the count of bi-directional friends and mentions between a target user and the seed group as the score for ranking. The intuition is that the social graph be-tween real life friends tends to be very dense, and people who belong to the clique should have more edges to the seeds than others. 3.3 Group Type Detection The first component in our system is to determine which sub-system to use to suggest user groups. We propose to evaluate the fitness of each sub-system base on the seeds provided using a cross-validation approach. The assumption is that if a sub-system (information source used to form the group) is a good match, then it will rank the users in the seed group higher than others not in the seed.

The procedure of calculating the fitness score of each sub-system is shown in Algorithm 1. In the in-put, S is the seed users (with more than one user), U is the target users to be ranked, and subrank is a ranking sub-system (two systems described above, each taking seed users and target users as input, and producing the ranking of the target users). This pro-cedure loops through the seed users. Each time, it takes one seed user S i out and puts it together with other target users. Then it calls the sub-system to rank the new list and finds out the resulting rank for S . The final fitness score is the sum of all the ranks for the seed instances. The system with the highest score is then selected and used to rank the original target users.
 Algorithm 1 Fitness of a sub-system for a seed group Our data set is collected from Twitter website using its Web API. Because twitter does not provide direct functions to group friends, we use lists created by twitter users as the reference friend group in testing and evaluation. We exclude users that have less than 20 or more than 150 friends; that do not have a qual-ified list (more than 20 and less than 200 list mem-bers); and that do not use English in their tweets. After applying these filtering criteria, we found 87 lists from 12 users. For these qualified users, their 1 , 383 friends information is retrieved, again using Twitter API. For the friends that are retrieved, their 180 , 296 tweets and 584 , 339 friend-of-friend infor-mation are also retrieved. Among all the retrieved tweets, there are 65 , 329 mentions in total. In our experiment, we evaluate the performance of each sub-system and then use group type detection algorithm to adaptively combine the systems. We use the Twitter lists we collected as the reference user groups for evaluation. For each user group, we randomly take out 6 users from the list and use as seed candidate. The target user consists of the rest of the list members and other  X  X riends X  that the list cre-ator has. From the ranked list for the target users, we calculate the mean average precision (MAP) score with the rank position of the list members. For each group, we run the experiment 10 times using ran-domly selected seeds. Then the average MAP on all runs on all groups is reported. In order to evaluate the effect of the seed size on the final performance, we vary the number of seeds from 2 to 6 using the 6 taken-out list members.

In the tweet based sub-system, we optimize its hy-per parameter automatically based on the data. After trying different numbers of topics in LDA, we found optimal performance with 50 topics (  X  = 0 . 5 and  X  = 0 . 04 ).

Table 1 shows the performance of each sub-system as well as the adaptive system. We include the baseline results generated using random ranking. As a stronger baseline (BOW baseline), we used co-sine similarity between users X  tweets as the similar-ity measure. In this baseline, we used a vocabulary of 5000 words that have the highest TF-IDF values. Each user X  X  tweet content is represented using a bag-of-words vector using this vocabulary. The ranking of this baseline is calculated using the average simi-larity with the seeds.

In the tweet-based sub-system,  X  X os X  and  X  X uc X  mean cosine similarity and inverse Euclidean dis-tance respectively as the similarity measure.  X  X ent X  and  X  X vg X  mean using centroid vector and average similarity respectively to measure the similarities between a target user and the seed group. From the results, we can see that in general using a larger seed group improves performance since more informa-tion can be obtained from the group. The  X  X osAvg X  scheme (which uses cosine similarity with average similarity measure) achieves the best result. Using cosine similarity measure gives better performance than inverse Euclidean distance. This is not surpris-ing since cosine similarity has been widely adopted as an appropriate similarity measure in the vector space model for text processing. The bag-of-word baseline is much better than the random baseline; however, using LDA topic modeling to collapse the dimension of features achieves even better results. This confirms that topic modeling is very useful in representing noisy data, such as tweets.

In the adaptive system, we also used  X  X osAvg X  scheme in the tweet based sub-system. After the au-tomatic sub-system selection, we observe increased performance. This indicates that users form lists based on different factors and thus always using one single system is not the best solution. It also demonstrates that our proposed fitness measure us-ing cross-validation works well, and that the two in-formation sources used to build sub-systems can ap-propriately capture the group characteristics. In this paper, we have proposed an interactive group creation system for Twitter users to organize their  X  X ollowings X . The system takes friend seeds pro-vided by users and generates a ranked list according to the likelihood of a test user being in the group. We introduced two sub-systems, based on tweet text and social information respectively. We also pro-posed a group type detection procedure that is able to use the most appropriate system for group user ranking. Our experiments show that by using differ-ent systems adaptively, better performance can be achieved compared to using any single system, sug-gesting this framework works well. In the future, we plan to add more sophisticated sub-systems in this framework, and also explore combining ranking out-puts from different sub-systems. Furthermore, we will incorporate negative seeds into the process of interactive suggestion.

