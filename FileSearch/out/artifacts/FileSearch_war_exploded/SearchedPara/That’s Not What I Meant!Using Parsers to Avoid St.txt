 Rajkumar &amp; White (2011; 2012) have recently shown that some rather egregious surface realiza-tion errors X  X n the sense that the reader would likely end up with the wrong interpretation X  X an be avoided by making use of features inspired by psycholinguistics research together with an other-wise state-of-the-art averaged perceptron realiza-tion ranking model (White and Rajkumar, 2009), as reviewed in the next section. However, one is apt to wonder: could one use a parser to check whether the intended interpretation is easy to re-cover, either as an alternative or to catch additional mistakes? Doing so would be tantamount to self-monitoring in Levelt X  X  (1989) model of language production.

Neumann &amp; van Noord (1992) pursued the idea of self-monitoring for generation in early work with reversible grammars. As Neumann &amp; van Noord observed, a simple, brute-force way to gen-erate unambiguous sentences is to enumerate pos-sible realizations of an input logical form, then to parse each realization to see how many inter-pretations it has, keeping only those that have a single reading; they then went on to devise a more efficient method of using self-monitoring to avoid generating ambiguous sentences, targeted to the ambiguous portion of the output. We might question, however, whether it is really possible to avoid ambiguity entirely in the general case, since Abney (1996) and others have argued that nearly every sentence is potentially ambiguous, though we (as human comprehenders) may not notice the ambiguities if they are unlikely. Tak-ing up this issue, Khan et al. (2008) X  X uilding on Chantree et al. X  X  (2006) approach to identifying  X  X nnocuous X  ambiguities X  X onducted several ex-periments to test whether ambiguity could be bal-anced against length or fluency in the context of generating referring expressions involving coordi-nate structures. Though Khan et al. X  X  study was limited to this one kind of structural ambiguity, they do observe that generating the brief variants when the intended interpretation is clear instanti-ates Van Deemter X  X  (2004) general strategy of only avoiding vicious ambiguities  X  X hat is, ambigui-ties where the intended interpretation fails to be considerably more likely than any other distractor interpretations X  X ather than trying to avoid all am-biguities.

In this paper, we investigate whether Neumann &amp; van Noord X  X  brute-force strategy for avoid-ing ambiguities in surface realization can be up-dated to only avoid vicious ambiguities, extend-ing (and revising) Van Deemter X  X  general strategy to all kinds of structural ambiguity, not just the one investigated by Khan et al. To do so X  X n a nutshell X  X e enumerate an n -best list of realiza-tions and rerank them if necessary to avoid vicious ambiguities, as determined by one or more auto-matic parsers. A potential obstacle, of course, is that automatic parsers may not be sufficiently rep-resentative of human readers, insofar as errors that a parser makes may not be problematic for human comprehension; moreover, parsers are rarely suc-cessful in fully recovering the intended interpreta-tion for sentences of moderate length, even with carefully edited news text. Consequently, we ex-amine two reranking strategies, one a simple base-line approach and the other using an SVM reranker (Joachims, 2002).

Our simple reranking strategy for self-monitoring is to rerank the realizer X  X  n -best list by parse accuracy, preserving the original order in case of ties. In this way, if there is a realization in the n -best list that can be parsed more accurately than the top-ranked realization X  X ven if the intended interpretation cannot be recovered with 100% accuracy X  X t will become the preferred output of the combined realization-with-self-monitoring system. With this simple reranking strategy and each of three different Treebank parsers, we find that it is possible to improve BLEU scores on Penn Treebank development data with White &amp; Rajkumar X  X  (2011; 2012) baseline generative model, but not with their averaged perceptron model. In inspecting the results of reranking with this strategy, we observe that while it does sometimes succeed in avoiding egregious errors involving vicious ambiguities, common parsing mistakes such as PP-attachment errors lead to unnecessarily sacrificing conciseness or fluency in order to avoid ambiguities that would be easily tolerated by human readers. Therefore, to develop a more nuanced self-monitoring reranker that is more robust to such parsing mistakes, we trained an SVM using dependency precision and recall features for all three parses, their n -best parsing results, and per-label precision and recall for each type of dependency, together with the realizer X  X  normalized perceptron model score as a feature. With the SVM reranker, we obtain a significant improvement in BLEU scores over White &amp; Rajkumar X  X  averaged perceptron model on both development and test data. Additionally, in a targeted manual analysis, we find that in cases where the SVM reranker improves the BLEU score, improvements to fluency and adequacy are roughly balanced, while in cases where the BLEU score goes down, it is mostly fluency that is made worse (with reranking yielding an acceptable paraphrase roughly one third of the time in both cases).

The paper is structured as follows. In Sec-tion 2, we review the realization ranking mod-els that serve as a starting point for the paper. In Section 3, we report on our experiments with the simple reranking strategy, including a discus-sion of the ways in which this method typically fails. In Section 4, we describe how we trained an SVM reranker and report our results using BLEU scores (Papineni et al., 2002). In Section 5, we present a targeted manual analysis of the devel-opment set sentences with the greatest change in BLEU scores, discussing both successes and er-rors. In Section 6, we briefly review related work on broad coverage surface realization. Finally, in Section 7, we sum up and discuss opportunities for future work in this direction. periments reported in this paper. The OpenCCG realizer generates surface strings for input seman-tic dependency graphs (or logical forms) using a chart-based algorithm (White, 2006) for Combi-natory Categorial Grammar (Steedman, 2000) to-gether with a  X  X ypertagger X  for probabilistically assigning lexical categories to lexical predicates in the input (Espinosa et al., 2008). An exam-ple input appears in Figure 1. In the figure, nodes correspond to discourse referents labeled with lexical predicates, and dependency relations between nodes encode argument structure (gold standard CCG lexical categories are also shown); note that semantically empty function words such as infinitival-to are missing. The grammar is ex-tracted from a version of the CCGbank (Hocken-maier and Steedman, 2007) enhanced for realiza-tion; the enhancements include: better analyses of punctuation (White and Rajkumar, 2008); less er-ror prone handling of named entities (Rajkumar et al., 2009); re-inserting quotes into the CCGbank; Figure 1: Example OpenCCG semantic depen-dency input for he has a point he wants to make , with gold standard lexical categories for each node and assignment of consistent semantic roles across diathesis alternations (Boxwell and White, 2008), using PropBank (Palmer et al., 2005).

To select preferred outputs from the chart, we use White &amp; Rajkumar X  X  (2009; 2012) realization ranking model, recently augmented with a large-scale 5-gram model based on the Gigaword cor-pus. The ranking model makes choices addressing all three interrelated sub-tasks traditionally con-sidered part of the surface realization task in natu-ral language generation research (Reiter and Dale, 2000; Reiter, 2010): inflecting lemmas with gram-matical word forms, inserting function words and linearizing the words in a grammatical and natu-ral order. The model takes as its starting point two probabilistic models of syntax that have been de-veloped for CCG parsing, Hockenmaier &amp; Steed-man X  X  (2002) generative model and Clark &amp; Cur-ran X  X  (2007) normal-form model. Using the aver-aged perceptron algorithm (Collins, 2002), White &amp; Rajkumar (2009) trained a structured predic-tion ranking model to combine these existing syn-tactic models with several n -gram language mod-els. This model improved upon the state-of-the-art in terms of automatic evaluation scores on held-out test data, but nevertheless an error analysis re-vealed a surprising number of word order, func-tion word and inflection errors. For each kind of error, subsequent work investigated the utility of employing more linguistically motivated features to improve the ranking model.
 To improve word ordering decisions, White &amp; Rajkumar (2012) demonstrated that incorporat-ing a feature into the ranker inspired by Gib-son X  X  (2000) dependency locality theory can de-liver statistically significant improvements in au-tomatic evaluation scores, better match the distri-butional characteristics of sentence orderings, and significantly reduce the number of serious order-ing errors (some involving vicious ambiguities) as confirmed by a targeted human evaluation. Sup-porting Gibson X  X  theory, comprehension and cor-pus studies have found that the tendency to min-imize dependency length has a strong influence on constituent ordering choices; see Temperley (2007) and Gildea and Temperley (2010) for an overview.

Table 1 shows examples from White and Rajku-mar (2012) of how the dependency length feature (
DEPLEN ) affects the OpenCCG realizer X  X  output even in comparison to a model ( DEPORD ) with a rich set of discriminative syntactic and depen-dency ordering features, but no features directly targeting relative weight. In wsj 0015.7, the de-pendency length model produces an exact match, while the DEPORD model fails to shift the short temporal adverbial next year next to the verb, leav-ing a confusingly repetitive this year next year at the end of the sentence. Note how shifting next year from its canonical VP-final position to appear next to the verb shortens its dependency length considerably, while barely lengthening the depen-dency to based on ; at the same time, it avoids ambiguity in what next year is modifying. In wsj 0020.1 we see the reverse case: the depen-dency length model produces a nearly exact match with just an equally acceptable inversion of closely watching , keeping the direct object in its canoni-cal position. By contrast, the DEPORD model mis-takenly shifts the direct object South Korea, Tai-wan and Saudia Arabia to the end of the sentence where it is difficult to understand following two very long intervening phrases.

With function words, Rajkumar and White (2011) showed that they could improve upon the earlier model X  X  predictions for when to employ that -complementizers using features inspired by Jaeger X  X  (2010) work on using the principle of uniform information density , which holds that human language use tends to keep information density relatively constant in order to optimize communicative efficiency. In news text, com-(White and Rajkumar, 2012) plementizers are left out two times out of three, but in some cases the presence of that is cru-cial to the interpretation. Generally, inserting a complementizer makes the onset of a complement clause more predictable, and thus less informa-tion dense, thereby avoiding a potential spike in information density that is associated with com-prehension difficulty. Rajkumar &amp; White X  X  exper-iments confirmed the efficacy of the features based on Jaeger X  X  work, including information density X  Their experiments also showed that the improve-ments in prediction accuracy apply to cases in which the presence of a that -complementizer ar-guably makes a substantial difference to fluency or intelligiblity. For example, in (1), the pres-ence of that avoids a local ambiguity, helping the reader to understand that for the second month in a row modifies the reporting of the shortage; with-out that , it is very easy to mis-parse the sentence as having for the second month in a row modifying the saying event. (1) He said that /  X  ? for the second month in a row,
Finally, to reduce the number of subject-verb agreement errors, Rajkumar and White (2010) ex-tended the earlier model with features enabling it to make correct verb form choices in sentences involving complex coordinate constructions and with expressions such as a lot of where the correct choice is not determined solely by the head noun. They also improved animacy agreement with rela-tivizers, reducing the number of errors where that or which was chosen to modify an animate noun rather than who or whom (and vice-versa), while also allowing both choices where corpus evidence was mixed. 3.1 Methods We ran two OpenCCG surface realization models on the CCGbank dev set (derived from Section 00 of the Penn Treebank) and obtained n -best ( n = 10 ) realizations. The first one is the baseline gen-erative model (hereafter, generative model) used in training the averaged perceptron model. This model ranks realizations using the product of the Hockenmaier syntax model, n -gram models over words, POS tags and supertags in the training sec-tions of the CCGbank, and the large-scale 5-gram model from Gigaword. The second one is the averaged perceptron model (hereafter, perceptron model), which uses all the features reviewed in Section 2. In order to experiment with multiple parsers, we used the Stanford dependencies (de Marneffe et al., 2006), obtaining gold dependen-cies from the gold-standard PTB parses and auto-matic dependencies from the automatic parses of each realization. Using dependencies allowed us to measure parse accuracy independently of word order. We chose the Berkeley parser (Petrov et al., 2006), Brown parser (Charniak and Johnson, 2005) and Stanford parser (Klein and Manning, 2003) to parse the realizations generated by the No reranking 87.93 87.93 87.93 Table 2: Devset BLEU scores for simple ranking on top of n -best perceptron model realizations Figure 1: Example parsing mistake in PP-attachment (wsj 0043.1) Figure 2: Example parsing mistake in PP-attachment (wsj 0043.1) two realization models and calculated precision, recall and F 1 of the dependencies for each realiza-tion by comparing them with the gold dependen-cies. We then ranked the realizations by their F 1 score of parse accuracy, keeping the original rank-ing in case of ties. We also tried using unlabeled (and unordered) dependencies, in order to possi-bly make better use of parses that were close to being correct. In this setting, as long as the right pair of tokens occur in a dependency relation, it was counted as a correctly recovered dependency. 3.2 Results Simple ranking with the Berkeley parser of the generative model X  X  n -best realizations raised the BLEU score from 85.55 to 86.07, well below the averaged perceptron model X  X  BLEU score of 87.93. However, as shown in Table 2, none of the parsers yielded significant improvements on the top of the perceptron model.

Inspecting the results of simple ranking re-vealed that while simple ranking did success-fully avoid vicious ambiguities in some cases, parser mistakes with PP-attachments, noun-noun compounds and coordinate structures too often blocked the gold realization from emerging on top. To illustrate, Figure 2 shows an example with a PP-attachment mistake. In the figure, the key gold dependencies of the reference sentence are shown in (a), the dependencies of the realization selected by the simple ranker are shown in (b), and the de-pendencies of the realization selected by the per-ceptron ranker (same as gold) appear in (c), with the parsing mistake indicated by the dashed line. The simple ranker ends up choosing (b) as the best realization because it has the most accurate parse compared to the reference sentence, given the mis-take with (c).
 Other common parse errors are illustrated in Figure 3. Here, (b) ends up getting chosen by the simple ranker as the realization with the most ac-curate parse given the failures in (c), where the ad-ditional technology, personnel training is mistak-enly analyzed as one noun phrase, a reading un-likely to be considered by human readers.

In sum, although simple ranking helps to avoid vicious ambiguity in some cases, the overall re-sults of simple ranking are no better than the per-ceptron model (according to BLEU, at least), as parse failures that are not reflective of human in-tepretive tendencies too often lead the ranker to choose dispreferred realizations. As such, we turn now to a more nuanced model for combining the results of multiple parsers in a way that is less sen-sitive to such parsing mistakes, while also letting the perceptron model have a say in the final rank-ing. 4.1 Methods Since different parsers make different errors, we conjectured that dependencies in the intersection of the output of multiple parsers may be more re-liable and thus may more reliably reflect human comprehension preferences. Similarly, we conjec-tured that large differences in the realizer X  X  percep-tron model score may more reliably reflect human fluency preferences than small ones, and thus we combined this score with features for parser accu-racy in an SVM ranker. Additionally, given that parsers may more reliably recover some kinds of dependencies than others, we included features for each dependency type, so that the SVM ranker might learn how to weight them appropriately. Finally, since the differences among the n -best parses reflect the least certain parsing decisions, and thus ones that may require more common sense inference that is easy for humans but not machines, we conjectured that including features from the n -best parses may help to better match human performance. In more detail, we made use of the following feature classes for each candidate realization: perceptron model score the score from the real-precision and recall labeled and unlabeled preci-per-label precision and recall ( dep ) precision n -best precision and recall ( nbest ) labeled and
In training, we used the BLEU scores of each realization compared with its reference sentence to establish a preference order over pairs of candi-date realizations, assuming that the original corpus sentences are generally better than related alterna-tives, and that BLEU can somewhat reliably pre-dict human preference judgments.

We trained the SVM ranker (Joachims, 2002) with a linear kernel and chose the hyper-parameter c , which tunes the trade-off between training error and margin, with 6-fold cross-validation on the de-vset. We trained different models to investigate the contribution made by different parsers and differ-ent types of features, with the perceptron model score included as a feature in all models. For each parser, we trained a model with its overall preci-sion and recall features, as shown at the top of Ta-ble 3. Then we combined these three models to get a new model (Bkl+Brw+St in the table) . Next, to this combined model we separately added (i) the per-label precision and recall features from all the parsers (BBS+dep), and (ii) the n -best features from the parsers (BBS+nbest). The full model (BBS+dep+nbest) includes all the features listed above. Finally, since the Berkeley parser yielded the best results on its own, we also tested mod-els using all the feature classes but only using this parser by itself. 4.2 Results Table 3 shows the results of different SVM rank-ing models on the devset. We calculated signifi-cance using paired bootstrap resampling (Koehn, Table 3: Devset results of SVM ranking on top of perceptron model. Significance codes:  X  X  X  for p &lt; 0 . 05 ,  X  for p &lt; 0 . 1 .
 Table 4: Final test results of SVM ranking on top of perceptron model. Significance codes:  X  X  X  for p &lt; 0 . 05 ,  X  for p &lt; 0 . 1 . tures and the n -best parse features contributed to achieving a significant improvement compared to the perceptron model. Somewhat surprisingly, the Berkeley parser did as well as all three parsers us-ing just the overall precision and recall features, but not quite as well using all features. The com-plete model, BBS+dep+nbest, achieved a BLEU score of 88.73, significantly improving upon the perceptron model ( p &lt; 0 . 02 ). We then confirmed this result on the final test set, Section 23 of the CCGbank, as shown in Table 4 ( p &lt; 0 . 02 as well). 5.1 Targeted Manual Analysis In order to gain a better understanding of the suc-cesses and failures of our SVM ranker, we present here a targeted manual analysis of the develop-ment set sentences with the greatest change in BLEU scores, carried out by the second author (a native speaker). In this analysis, we consider whether the reranked realization improves upon or detracts from realization quality X  X n terms of adequacy, fluency, both or neither X  X long with a linguistic categorization of the differences be-tween the reranked realization and the original top-ranked realization according to the averaged perceptron model. Unlike the broad-based and ob-jective evaluation in terms of BLEU scores pre-sented above, this analysis is narrowly targeted and subjective, though the interested reader is in-vited to review the complete set of analyzed ex-amples that accompany the paper as a supplement. We leave a more broad-based human evaluation by naive subjects for future work.

Table 5 shows the results of the analysis, both overall and for the most frequent categories of changes. Of the 50 sentences where the BLEU score went up the most, 15 showed an improve-ment in adequacy (i.e., in conveying the intended meaning), 22 showed an improvement in fluency (with 3 cases also improving adequacy), and 16 yielded no discernible change in fluency or ade-quacy. By contrast, with the 50 sentences where the BLEU score went down the most, adequacy was only affected 4 times, though fluency was af-fected 32 times, and 15 remained essentially un-in the order of VP constituents usually led to a change in adequacy or fluency, as did ordering changes within NPs, with noun-noun compounds and named entities as the most frequent subcate-gories of NP-ordering changes. Of the cases where adequacy and fluency were not affected, contrac-tions and subject-verb inversions were the most frequent differences.

Examples of the changes yielded by the SVM ranker appear in Table 6. With wsj 0036.54, the averaged perceptron model selects a realiza-tion that regrettably (though amusingly) swaps purchasing and more than 250  X  X ielding a sen-tence that suggests that the executives have been purchased! X  X hile the SVM ranker succeeds in ranking the original sentence above all competing realizations. With wsj 0088.25, self-monitoring with the SVM ranker yields a realization nearly identical to the original except for an extra comma, where it is clear that in public modifies do this ; by contrast, in the perceptron-best realization, in public mistakenly appears to modify be disclosed . With wsj 0041.18, the SVM ranker unfortunately prefers a realization where presumably seems to modify shows rather than of two politicians as BLEU wins 15 22 16 10 9 7 3 4 -11 BLEU losses 4 32 15 8 13 5 5 4 7 -(middle) or left it the same (bottom) in the original, which the averaged perceptron model prefers. Finally, wsj 0044.111 is an exam-ple where a subject-inversion makes no difference to adequacy or fluency. 5.2 Discussion The BLEU evaluation and targeted manual analy-sis together show that the SVM ranker increases the similarity to the original corpus of realizations produced with self-monitoring, often in ways that are crucial for the intended meaning to be apparent to human readers.

A limitation of the experiments reported in this paper is that OpenCCG X  X  input semantic depen-dency graphs are not the same as the Stanford de-pendencies used with the Treebank parsers, and thus we have had to rely on the gold parses in the PTB to derive gold dependencies for measur-ing accuracy of parser dependency recovery. In a realistic application scenario, however, we would need to measure parser accuracy relative to the re-alizer X  X  input. We initially tried using OpenCCG X  X  parser in a simple ranking approach, but found that it did not improve upon the averaged perceptron model, like the three parsers used subsequently. Given that with the more refined SVM ranker, the Berkeley parser worked nearly as well as all three parsers together using the complete feature set, the prospects for future work on a more realistic scenario using the OpenCCG parser in an SVM ranker for self-monitoring now appear much more promising, either using OpenCCG X  X  reimplemen-tation of Hockenmaier &amp; Steedman X  X  generative CCG model, or using the Berkeley parser trained on OpenCCG X  X  enhanced version of the CCG-bank, along the lines of Fowler and Penn (2010). Approaches to surface realization have been de-veloped for LFG, HPSG, and TAG, in addition to CCG, and recently statistical dependency-based approaches have been developed as well; see the report from the first surface realization shared task (Belz et al., 2010; Belz et al., 2011) for an overview. To our knowledge, however, a com-prehensive investigation of avoiding vicious struc-tural ambiguities with broad coverage statistical parsers has not been previously explored. As our SVM ranking model does not make use of CCG-specific features, we would expect our self-monitoring method to be equally applicable to re-alizers using other frameworks. In this paper, we have shown that while using parse accuracy in a simple reranking strategy for self-monitoring fails to improve BLEU scores over a state-of-the-art averaged perceptron realiza-tion ranking model, it is possible to significantly increase BLEU scores using an SVM ranker that combines the realizer X  X  model score together with features from multiple parsers, including ones de-signed to make the ranker more robust to parsing mistakes that human readers would be unlikely to make. Additionally, via a targeted manual analy-sis, we showed that the SVM reranker frequently manages to avoid egregious errors involving  X  X i-cious X  ambiguities, of the kind that would mislead human readers as to the intended meaning.

As noted in Reiter X  X  (2010) survey, many NLG systems use surface realizers as off-the-shelf com-ponents. In this paper, we have focused on broad coverage surface realization using widely-available PTB data X  X here there are many sen-tences of varying complexity with gold-standard annotations X  X ollowing the common assumption that experiments with broad coverage realization are (or eventually will be) relevant for NLG ap-plications. Of course, the kinds of ambiguity that can be problematic in news text may or may not be the same as the ones encountered in particular ap-plications. Moreover, for certain applications (e.g. ones with medical or legal implications), it may be better to err on the side of ambiguity avoidance, even at some expense to fluency, thereby requir-ing training data reflecting the desired trade-off to adapt the methods described here. We leave these application-centered issues for investigation in fu-ture work.

The current approach is primarily suitable for offline use, for example in report generation where there are no real-time interaction demands. In fu-ture work, we also plan to investigate ways that self-monitoring might be implemented more effi-ciently as a combined process, rather than running independent parsers as a post-process following realization.
 We thank Mark Johnson, Micha Elsner, the OSU Clippers Group and the anonymous reviewers for helpful comments and discussion. This work was supported in part by NSF grants IIS-1143635 and IIS-1319318.

