 When two characters in a book break bread, is their meal just a result of biological needs or does it mean more? Cognard-Black et al. (2014) argue that this simple interaction reflects the diversity and back-ground of the characters, while Foster (2009) sug-gests that the tone of a meal can portend either good or ill for the rest of the book. To support such theo-ries, scholars use their literary expertise to draw con-nections between disparate books: Gabriel Conroy X  X  dissonance from his family at a sumptuous feast in Joyce X  X  The Dead , the frustration of Tyler X  X  mother in Dinner at the Homesick Restaurant , and the grudging respect for a blind man eating meatloaf in Carver X  X  Cathedral .

However, these insights do not come cheap. It takes years of careful reading and internalization to make connections across books, which means that relationship symmetries and archetypes are likely to remain hidden in the millions of books published every year unless literary scholars are actively search-ing for them.

Natural language processing techniques have been increasingly used to assist in these literary investiga-tions by discovering patterns in texts (Jockers, 2013). In Section 6 we review existing techniques that clas-sify or cluster relationships between characters in books using a fixed set of labels (e.g., friend or en-emy). However, such approaches ignore interactions between characters that lie outside of the established lexicon and cannot account for the dynamic nature of relationships that evolve through the course of a book, such as the vampiric downfall of Lucy and Arthur X  X  engagement in Dracula (Figure 1) or Win-ston Smith X  X  rat-induced betrayal of Julia in 1984 .
To address these issues, we propose the task of un-supervised relationship modeling, in which a model jointly learns a set of relationship descriptors as well as relationship trajectories for pairs of literary char-acters. Instead of assigning a single descriptor to a particular relationship, the trajectories learned by the model are sequences of descriptors as in Figure 1.
The Bayesian hidden topic Markov model ( HTMM ) of Gruber et al. (2007) emerges as a natural choice for our task because it is capable of computing rela-tionship descriptors (in the form of topics) and has an additional temporal component. However, our experiments show that the descriptors learned by the HTMM are not coherent and focus more on events or environments (e.g., meals, outdoors) than interper-sonal states like happiness and sadness.

Motivated by recent advances in deep learning, we propose the relationship modeling network ( RMN ), which is a novel variant of a deep recurrent autoen-coder that incorporates dictionary learning to learn relationship descriptors. We show that the RMN achieves better descriptor coherence and trajectory accuracy than the HTMM and other topic model base-lines in two crowdsourced evaluations described in Section 4. In Section 5 we show qualitative results and make connections to existing literary scholarship. Our dataset consists of 1,383 fictional works pulled from Project Gutenberg and other Internet sources. Project Gutenberg has a limited selection (outside of science fiction) of mostly classic literature, so we add more contemporary novels from various genres such as mystery, romance, and fantasy to our dataset. To identify character mentions, we run the Book-NLP pipeline of Bamman et al. (2014), which in-cludes character name clustering, quoted speaker ery detected character mention, we define a span as beginning 100 tokens before the mention and end-ing 100 tokens after the mention. We do not use sentence or paragraph boundaries because they vary considerably depending on the author (e.g., William Faulkner routinely wrote single sentences longer than many of Hemingway X  X  paragraphs). All spans in our dataset contain mentions to exactly two characters. This is a rather strict requirement that forces a reduc-tion in data size, but spans in which more than two characters are mentioned are generally noisier.
Once we have identified usable spans in the dataset, we apply a second filtering step that removes rela-tionships containing fewer than five spans. Without this filter, our dataset is dominated by fleeting inter-actions between minor characters; this is undesirable since our focus is on longer, mutable relationships. Finally, we filter our vocabulary by removing the 500 most frequently occurring words, as well as all words that occur in fewer than 100 books. The latter step helps correct for variation in time period and genre (e.g.,  X  X hou X  and  X  X hy X  found in older works like the Canterbury Tales ). Our final dataset contains 20,013 relationships and 380,408 spans, while our This section mathematically describes how we apply the RMN to relationship modeling on our dataset. Our model is similar in spirit to topic models: for an input dataset, the output of the RMN is a set of relationship descriptors (topics) and X  X or each relationship in the dataset X  X  trajectory, or a sequence of probability distributions over these descriptors (document-topic assignments). However, the RMN uses recent ad-vances in deep learning to achieve better control over descriptor coherence and trajectory smoothness (Sec-tion 4). 3.1 Formalizing the Problem Assume we have two characters c 1 and c 2 in book b . We define S c each span s t  X  S c { w 1 ,w 2 ,...,w l } of fixed size l that contains men-tions (either directly or by coreference) to both c 1 and c . In other words, S c scene, chronologically ordered, in which c 1 and c 2 are present together. 3.2 Model Description As in other neural network models for natural lan-guage processing, we begin by associating each word type w in our vocabulary with a real-valued embed-ding v w  X  R d . These embeddings are rows of a V  X  d matrix L , where V is the vocabulary size. Similarly, characters and books have their own em-beddings in rows of matrices C and B . We want B to capture global context information (e.g.,  X  X oby Dick X  takes place at sea) and C to capture immutable aspects of characters not related to their relationships (e.g., Javert is a police officer). Finally, the RMN learns embeddings for relationship descriptors, which requires a second matrix R of size K  X  d where K is the number of descriptors, analogous to the number of topics in topic models.

Each input to the RMN is a tuple that contains identifiers for a book and two characters, as well as the spans corresponding to their relationship: ( b,c 1 ,c 2 ,S c is to reconstruct S c relationship descriptors from R as shown in Figure 2; we now describe this process formally. 3.2.1 Modeling Spans with Vector Averages
We compute a vector representation for each span s in S c in that span, Then, we concatenate v s dings v c and feed the resulting vector into a standard feed-forward layer to obtain a hidden state h t , In all experiments, the transformation matrix W h is d  X  4 d , and we set f to the ReLu function, ReLu ( x ) = max(0 ,x ) . 3.2.2 Approximating Spans with Relationship
Now that we can obtain representations of spans, we move on to learning descriptors using a variant of dictionary learning (Olshausen and Field, 1997; Elad and Aharon, 2006), where our descriptor matrix R is the dictionary and we are trying to approximate input spans as a linear combination of items from this dictionary.

Suppose we compute a hidden state for every span s in S c pute a weight vector d t over K relationship descrip-tors with some composition function g , which is fully specified in the next section. Conceptually, each d t is a relationship state , and a relationship trajectory is a sequence of chronologically-ordered relationship states as shown in Figure 1. After computing d t , we use it to compute a reconstruction vector r t by taking a weighted average over relationship descriptors, Our goal is to make r t similar to v s contrastive max-margin objective function similar to previous work (Weston et al., 2011; Socher et al., 2014). We randomly sample spans from our dataset and compute the vector average v s span as in Equation 1. This subset of span vectors is N . The unregularized objective J is a hinge loss that minimizes the inner product between r t and the negative samples while simultaneously maximizing the inner product between r t and v s
J (  X  ) = where  X  represents the model parameters. 3.2.3 Computing Weights over Descriptors
What function should we choose for our composi-tion function g to represent a relationship state at a given time step? On the face of it, this seems trivial; we can project h t to K dimensions and then apply a softmax or some other nonlinearity that yields non-relationship states at previous time steps. To model the temporal aspect of relationships, we can add a recurrent connection, where W d is of size K  X  ( d + K ) and softmax ( q ) =
Our hope is that this recurrent connection will carry some of the previous relationship state over to the current time step. It should be unlikely for two characters in love at time t to fall out of love at time t + 1 even if s t +1 does not include any love-related words. However, because the objective function in Equation 4 maximizes similarity with the current time step X  X  input, the model is not forced to learn a smooth interpolation between the previous state and the current one. A natural remedy is to have the model predict the next time step X  X  input instead, but this proves hard to optimize.

We instead force the model to use the previous relationship state by modifying Equation 5 to include a linear interpolation between d t and d t  X  1 , Here,  X  is a scalar between 0 and 1 . We experiment with setting  X  to a fixed value of 0 . 5 as well as allow-ing the model to learn  X  as in where  X  is the sigmoid function and v  X  is a vector of dimensionality 2 d + K . Fixing  X  = 0 . 5 initially and then tuning it after other parameters have con-verged improves training stability; for the specific 3.2.4 Interpreting Descriptors and Enforcing
Recall that each descriptor is a d -dimensional row of R . Because our objective function J forces these descriptors to be in the same vector space as that of the word embeddings L , we can interpret them by looking at nearest neighbors in L using cosine distance as the similarity metric.

To discourage learning descriptors that are too sim-ilar to each other, we add another penalty term X to our objective function, where I is the identity matrix. This term comes from the component orthogonality constraint in indepen-dent component analysis (Hyv  X  arinen and Oja, 2000).
We add J and X together to obtain our final train-ing objective L , where  X  is a hyperparameter that controls the magni-tude of the uniqueness penalty. Because no previous work explores the interpretabil-ity of unsupervised relationship modeling over time, evaluating the RMN is tricky. Further compounding the problem is the subjective nature of the task; for example, is a trajectory that ignores a key event bet-ter than one that hallucinates episodes absent from source text?
With these issues in mind, we conduct three eval-uations to show that our output is reasonable. First, we conduct a crowdsourced interpretability experi-ment that shows RMN s produce significantly more coherent descriptors than three topic model baselines. A second crowdsourced task indicates that our model produces trajectories that match plot summaries more accurately than topic models. Finally, we qualita-tively compare the RMN  X  X  output to existing static annotations of literary relationships and find both expected and surprising results. 4.1 Topic Model Baselines Before moving onto the evaluations, we briefly describe three baseline models, all of which are Bayesian generative models. Latent Dirichlet al-location (Blei et al., 2003, LDA ) learns a single document-topic distribution per document; we can apply LDA to our dataset by concatenating all spans from a relationship into a single document. Similarly, NUBBI (Chang et al., 2009a) learns separate sets of
LDA and NUBBI are incapable of taking into ac-count the chronological ordering of the spans because they view all relationships tokens as exchangeable. While we can compare the descriptors learned by these models to those of the RMN , we cannot evaluate their trajectories . We turn instead to the hidden topic Markov model (Gruber et al., 2007, HTMM ), which foregoes the bag-of-words assumption of LDA and NUBBI in favor of modeling topic segments within a document as a Markov chain. This model outputs a smooth sequence of topic assignments over a docu-ment, so we can compare the trajectories it learns on our dataset to those of the RMN . 4.2 Experimental Settings In our descriptor interpretability experiments, we vary the number of descriptors (topics) for all models ( K = 10 , 30 , 50 ). We train LDA and NUBBI for 100 iterations with a collapsed Gibbs sampler, and the HTMM uses the default setting of 100 EM iterations.
For the RMN , we initialize the word embedding matrix L with 300-dimensional GloVe embeddings trained on the Common Crawl (Pennington et al., 2014). The character and book embeddings ( C and B ) are initialized randomly. We fix  X  to 0.5 for the first 15 epochs of training; after the descriptor ma-trix R has converged, we fix R and tune  X  using model baselines do not have access to character and book metadata, for fair comparison we also train a  X  X eneric X  version of the RMN ( GRMN ) where the metadata embeddings are removed from Equation 2. The uniqueness penalty  X  is set to 10  X  4 .
All of the RMN model parameters except L are optimized using Adam (Kingma and Ba, 2014) with a learning rate of 0.001 for 30 epochs; the word also apply word dropout (Iyyer et al., 2015) to the input spans, removing words from the vector average computation in Equation 1 with probability 0.5. 4.3 Do Descriptors Make Sense? The goal of our first experiment is to compare the de-scriptors R learned by the RMN to the topics learned by the topic model baselines. We conduct a word intrusion experiment (Chang et al., 2009b): workers identify an  X  X ntruder X  word from a set of words that X  other than the intruder X  X ome from the same topic. For the topic models, the five most probable words are joined by a highly-probable word from a different topic as the intruder. We use the same procedure for the RMN and GRMN , except that cosine similarity to
Label MP Nearest Neighbors Label MP Most Probable Words descriptor embeddings replaces topic-word probabil-ity. To control for randomness in the training process, we train three of each model, so the final experiment consists of 1,350 tasks ( K = 10 , 30 , 50 descriptors per trial, three trials per model).

We collect judgments from ten different workers evaluation metric, model precision ( MP ), is the frac-tion of workers that select the correct intruder word for a descriptor k . Low model precision signals de-scriptors that lack cohesive themes.

On average, the RMN  X  X  descriptors are much more interpretable than those of the baselines, as it achieves a mean model precision of 0.73 (Figure 3) across all values of K . There is little difference between the model precision of the three topic model baselines, which hover around 0.5. There is also little difference between the GRMN and RMN ; however, visualizing the learned character and book embeddings as in Figure 6 may be insightful for literary scholars. We show example high and low precision descriptors for the RMN and HTMM in Table 1; a full list is included in the supplementary material. 4.4 Do Trajectories Make Sense? While the previous evaluation focused only on de-scriptor quality, our next experiment compares the trajectories learned by the best RMN model from the intrusion experiment (measured by highest mean model precision) to those learned by the best HTMM model, which is the only baseline capable of learning relationship trajectories. Workers read a plot sum-mary and choose which model X  X  trajectory best repre-sents the relationship in question. We use the K = 30 setting because it provides the best balance between descriptor variety and trajectory interpretability. For this evaluation, we crawl Wikipedia, Goodreads, and SparkNotes for plot summaries associated with our 1,383 books. We then remove all relationships where each involved character is not mentioned at least five times in the summary, which We present workers with two characters, a plot summary, and a visualization of trajectories learned by the RMN and the HTMM (Figure 4). The workers then select the trajectory that best matches the relationship described by the summary.

To generate the visualizations, we first have an external annotator label each descriptor from both models with a single word as in Table 1. For fairness, the annotator is unaware of the underlying models. For the RMN , we visualize trajectories by displaying the label of the argmax over descriptor weights d t at each time step t . Similarly, for the HTMM , we
The results of this task with seven workers per comparison favor the RMN : for 87 out of the 125 evaluated relationships (69.6%), the workers choose the RMN  X  X  trajectory over the HTMM  X  X . We com-pute the Fleiss  X  value (Fleiss, 1971) to correct our inter-annotator agreement for chance and find that  X  = 0 . 32 , indicating fair agreement among the work-ers. Furthermore, thirty-four relationships had unani-mous agreement among the seven workers; of these, twenty-six were unanimous in favor of the RMN com-pared to only eight for the HTMM . 4.5 What Makes a Relationship Positive? While the previous two experiments show that the RMN is more interpretable and accurate than baseline models, we have not yet shown that its insights can aid in drawing connections across various books and genres. As a first step in this direction, we investi-gate what makes a relationship positive or negative by comparing trajectories from the RMN and HTMM to static affinity annotations from a recently-released dataset (Massey et al., 2015) of fictional relationships. Expected correlations (e.g., murder and sadness are strongly negative descriptors) emerge alongside sur-prising ones ( politics is negative, religion is positive).
The affinity labeling task of Massey et al. (2015) requires workers to describe a given relationship as positive, negative, or neutral. We consider only non-neutral relationships for which two annotators agree Model Positive Negative on the affinity label and remove all books not present in our own dataset. This filtering step results in 120 relationships, 78% of which are positive and the re-maining 22% negative.

Since the annotations are static, we first aggregate our trajectories across all time steps. We compute K -dimensional  X  X verage positive X  and  X  X verage neg-ative X  weight vectors a p and a n by averaging the relationship states d t for the RMN and the document-topic distributions for the HTMM across all time steps for relationships labeled with a particular affinity. Then, we compute the vector difference a p  X  a n and sort it to produce a ranked list of descriptors, where descriptors with positive differences occur more fre-quently in positive relationships. Table 2 shows the most positive and most negative descriptors; of par-ticular interest is the large negative weight associated with political relationships from both models. Our experiments show the superiority of the RMN over various topic model baselines in both descrip-tor interpretability and trajectory accuracy, but what causes the improved performance? In this section, we analyze similarities between the RMN and HTMM and look at qualitative examples where the RMN suc-ceeds and fails. We also connect the findings of our affinity experiment to existing literary scholarship.
Both models are equally proficient at learning and assigning event-based descriptors (e.g., crime , violence , food ). More specifically, the RMN and HTMM agree on environmental descriptions (e.g., boats, outdoors) and graphic sexual scenes (Figure 5, middle).

However, the RMN is more sophisticated with in-terpersonal relationships. None of the topic model baselines learns negative emotional descriptors such as sadness or suffering , which explains the inaccurate HTMM trajectory of Arthur and Lucy in the left-most panel of Figure 5. All of the topic model baselines learn duplicate topics; in Table 2, one love descriptor is highly positive while a duplicate is strongly nega-tive. 11 The RMN circumvents this problem with its uniqueness penalty (Equation 8).

While the increased descriptor variety is a posi-tive, sometimes it leads the RMN astray. The model largely ignores the love between Charles Darnay and Lucie Manette in Dickens X  A Tale of Two Cities due to book X  X  sad tone; meanwhile, the HTMM  X  X  trajectory, while vastly simplified, does pick up on the romance (Figure 5, right). While the RMN  X  X  learnable book and character embeddings should help, the signal in a span cannot lead to the  X  X roper X  descriptor.
Both the RMN and HTMM learn that politics is strongly negative (Table 2). Existing scholarship supports this finding: Victorian-era authors, for ex-ample, are  X  X bsessed with otherness . . . of antiquated social and legal institutions, and of autocratic and/or dictatorial abusive government X  (Zarifopol-Johnston, 1995), while in science fiction,  X  X ystopia X  X  X recisely because it is so much more common (than utopia) X  X  bears the aspect of lived experience X  (Gordin et al., 2010). Our affinity data comes primarily from Victo-rian novels (e.g., by Dickens and George Eliot), lead-ing us to believe that that the models are behaving reasonably. Finally, returning to the  X  X xtra X  meaning of meals discussed in Section 1, food occurs slightly more frequently in positive relationships. There are two major areas upon which our work builds: computational literary analysis and deep neu-ral networks for natural language processing.
Most previous work in computational literary anal-ysis has focused either on characters or events. In the former category, graphical models and classi-fiers have been proposed for learning character per-sonas from novels (Bamman et al., 2014; Flekova and Gurevych, 2015) and film summaries (Bamman et al., 2013). The NUBBI model of Chang et al. (2009a) learns topics that statically describe characters and their relationships. Because these models lack tempo-ral components (the focus of our task), we compare instead against the HTMM of Gruber et al. (2007).
Closest to our own work is the supervised struc-tured prediction problem of Chaturvedi et al. (2016), in which features are designed to predict dynamic se-quences of positive and negative interactions between two characters in plot summaries. Other research in this area includes social network construction from novels (Elson et al., 2010; Srivastava et al., 2016) and film (Krishnan and Eisenstein, 2015), as well as attempts to summarize and generate stories (Elsner, 2012).

While some of the relationship descriptors learned by our model are character-centric, others are more events-based, depicting actions rather than feelings; such descriptors have been the focus of much previ-ous work (Schank and Abelson, 1977; Chambers and Jurafsky, 2008; Chambers and Jurafsky, 2009; Orr et al., 2014). Our model is more closely related to the plot units framework (Lehnert, 1981; Goyal et al., 2013), which annotates events with emotional states.
The RMN builds on deep recurrent autoencoders such as the hierarchical LSTM autoencoder of Li et al. (2015); however, it is more efficient because of the span-level vector averaging. It is also similar to recent neural topic model architectures (Cao et al., 2015; Das et al., 2015), although these models are limited to static document representations. We hope to apply the RMN to nonfictional datasets as well; in this vein, Iyyer et al. (2014) apply a neural network to sentences from nonfiction political books for ideology prediction.

More generally, topic models and related genera-tive models are a central tool for understanding large corpora from science (Talley et al., 2011) to poli-tics (Nguyen et al., 2014). We show representation learning models like RMN can be just as interpretable as LDA -based models. Other applications for which researchers have prioritized interpretable vector rep-resentations include text-to-vision mappings (Lazari-dou et al., 2014) and word embeddings (Fyshe et al., 2015; Faruqui et al., 2015). We formalize the task of unsupervised relationship modeling, which involves learning a set of relation-ship descriptors as well as a trajectory over these descriptors for each relationship in an input dataset. We present the RMN , a novel neural network archi-tecture for this task that generates more interpretable descriptors and trajectories than topic model base-lines. Finally, we show that the output of our model can lead to interesting insights when combined with annotations in an existing dataset.
 We thank Jonathan Chang and Amit Gruber for pro-viding baseline code, Thang Nguyen for helpful dis-cussions about our model, and the anonymous re-viewers for their insightful comments. This work was supported by NSF grant IIS -1320538. Boyd-Graber is also partially supported by NSF grants CCF -1409287 and NCSE -1422492. Any opinions, findings, conclu-sions, or recommendations expressed here are those of the authors and do not necessarily reflect the view of the sponsor.
