 We present a new method for mining and ranking streams of news stories using cross-stream sequential patterns and content similarity. In particular, we focus on stories re-porting the same event across the streams within a given time window, where an event is defined as a specific thing that happens at a specific time and place. For every discov-ered cluster of stories reporting the same event we create an itemset-sequence consisting of stream identifiers of the sto-ries in the cluster, where the sequence is ordered according to the timestamps of the stories. Furthermore, we record exact timestamps and content similarities between the re-spective stories. Given such a collection of itemset-sequences we use it for two tasks: (I) to discover recurrent temporal publishing patterns between the news streams in terms of frequent sequential patterns and content similarity and (II) to rank the streams of news stories with respect to time-liness of reporting important events and content authority. We demonstrate the applicability of the presented method on a multi-stream of news stories which was gathered from RSS feeds of major world news agencies.
 Categories and Subject Descriptors: H.4.m [Information Systems Applications]: Miscellaneous General Terms: Experimentation Keywords: News streams, Text mining
Newswires are the primary means for journalists and infor-mation analysts of being informed about worldwide events. Journalists often subscribe to several newswires and receive via RSS feeds hundreds of news stories per day. Now the fundamental questions, that arise are: (I) to what extent are those news sources correlated in terms of recurrent tem-poral publishing patterns and content similarity when re-porting the same events? and (II) what is the rank of the news sources with respect to timeliness of reporting impor-tant events and content authority? Clearly, a knowledge of such ranks and dependencies could help the analyst to more efficiently and more thoroughly accomplish his every day tasks. Therefore, in this paper we present a new frame-work for mining and ranking streams of news stories using cross-stream sequential patterns.

In our framework we focus on stories reporting the same event across streams of news stories. In order to discover clusters of such stories we implemented an incremental text document clustering algorithm that uses a time-window of a given duration (e.g., 24 hours). The reason we use the sliding time-window is because news stories discussing the same event tend to be temporally proximate across the news streams suggesting a use of a combined measure, which in-cludes both: the content similarity and the temporal prox-imity as a criterion for document clustering. For every dis-covered cluster we create an itemset-sequence consisting of stream identifiers of the stories in the cluster, where the se-quence is ordered according to the timestamps of the stories. If there are stories from different streams having the same timestamp then we put their stream identifiers in the same itemset. We also record exact timestamps and content simi-larities between the respective stories. Note that in the case of clusters of text documents reporting the same event the pairwise cosine similarity between documents may vary sub-stantially as a result of diversity of term usage to express the same meaning with respect to the same event across different news streams. Given such a collection of itemset-sequences we use it for two tasks: (I) to discover recurrent temporal publishing patterns between the news streams in terms of frequent sequential patterns and content similarity and (II) to rank the streams of news stories with respect to time-liness of reporting important events and content authority. In experiments we demonstrate the applicability of the pre-sented method on the multi-stream of news stories that was gathered from RSS feeds of the major world news agencies.
Our research is related to Topic Detection and Tracking (TDT) [2], which investigates methods for automatically or-ganizing news stories by the events that they discuss. How-ever, the closest related works to ours are: [3], where fre-quent itemset mining in terms of name entities was used to find recurrent topics in text document collections; and [4], where the problem of ranking news sources and news articles was first defined.

The appeal of our method for mining and ranking news streams is that occurrences of frequent patterns have prob-abilistic interpretation and we can take advantage of proba-bilistic/statistical methods to deal with the inherent uncer-tainty in the data in the spirit of [5].
To the best of our knowledge, this is the first paper that: (I) defines the problem of mining and ranking stream of news stories using cross-stream sequential patterns; (II) presents a new method for ranking news sources with respect to time-liness of reporting important events and content authority and (III) combines sequential pattern mining [1] with text mining and with event detection and tracking.

The paper is organized as follows. Section 2 presents the-oretical foundation, Section 3 presents our framework for mining recurrent cross-stream sequential patterns, Section 4 defines the problem, Section 5 presents the algorithm for ranking streams of news stories with respect to timeliness and content authority, Section 6 presents experimental re-sults and finally Section 7 presents conclusions.
In this section we review the problem of sequential pat-tern mining [1]. Let A = { a 1 ,a 2 ,...,a |A| } be a set of items (alphabet). A subset I X  X  ,where I = { a 1 ,a 2 ,...,a |I| called an itemset or element and is also denoted by ( a 1 ...,a |I| ). An itemset-sequence s =[ I 1 , I 2 ,. . . , ordered list of itemsets, where I i  X  X  . The size of the itemset-sequence is denoted by | s | and the length of itemset-sequence s is defined as l = s =[ I 1 , I 2 ,..., I n ]isa subsequence of itemset-sequence s = [
I , I 2 ,..., I m ], denoted s s , if there exist integers 1 i I i n .Wealsosaythat s is a supersequence of s and s is contained in s . Given a collection of itemset-sequences S =[ s 1 ,s 2 ,...,s | S | ]the support (frequency) of an itemset-sequence s , denoted by sup S ( s ), is defined as the number of itemset-sequences s i  X  S that contain s as a subsequence. The relative support (relative frequency) is the fraction of itemset-sequences that contain s as a subsequence. Given a support threshold minSup an itemset-sequence s is called a frequent sequential pattern (belongs to the set of frequent se-quential patterns FS )if sup S ( s )  X  minSup . The problem of mining sequential patterns is to find all frequent sequential patterns in S given minSup .Wealsouse minRelSup to de-note minimum relative support. A pattern s is called a closed frequent sequential pattern (belongs to the set of closed fre-quent sequential patterns CS )if s  X  FS such that s s and sup S ( s )= sup S ( s ). Table 1 presents an example col-lection of itemset-sequences, where itemset-sequence id =1 has size s = 3, length l = 4 and consists of three elements (itemsets): (1 , 3), 1 and 1.
Let D = { d (1) ,d (2) ,...,d ( |D| ) } be a multi-stream of news stories (documents) defined as a set of input streams (news sources) each of a possibly different length | d ( i ) | as a result of a different publishing rate of each news stream. d ( i [ d with respect to publishing timestamp, where d ( i ) t is a docu-ment in stream i at a time point t .Everydocument d ( i ) has three attributes: (I) the exact publishing timestamp d t .timestamp ; (II) stream identifier d source) and (III) text content denoted d ( i ) t .content .The publishing timestamp d ( i ) t .timestamp is unique in each stream d ) meaning that two documents in the same news source cannot be published simultaneously.

Let C =[ d 1 ,d 2 ,...,d C ] be a cluster of documents (re-porting the same event in our case) defined as a sequence of documents ordered with respect to publishing timestamp d .timestamp . We convert such a discovered cluster to an itemset-sequence s =[ I 1 , I 2 ,..., I | s | ], where I i A = { 0 , 1 ,..., |D|  X  1 } is the set of all stream identifiers of D . Each itemset I i contains stream identifiers of documents with the same timestamp ( d i .timestamp ) and the itemset-sequence s is ordered with respect to the timestamps of the itemsets. Notice that since only documents form different streams can have the same timestamp, representing them by an itemset of their stream identifiers is appropriate. As an example consider itemset-sequence [(2 , 4) , 2 , 3] in Table 1, where I 1 =(2 , 4) means that two documents: the first from source 2 and the second from source 4 were published simultaneously before a document from streams 2 and 3 cor-respondingly.

The main usefulness of itemsets in our framework is to provide a flexible pattern-wise facility which allows us to quantize the time scale since without quantization the prob-ability of two documents having the same timestamp is very small. Therefore we introduce a quantization step parame-ter Q t (e.g., 5 minutes).

Let sim ( i, j )bethe cosine similarity or content similarity between documents i and j . Clearly for an itemset-sequence of length l there are l 2  X  l 2 such different similarity pairs.
We now define the average content similarity and the variance of the content similarity between documents in an itemset-sequence s over the whole collection of itemset-sequences S as follows
AvgSim S ( s )= 2 and
VarSim S ( s )= 2 where j 1  X  j 2 ...  X  j l are the positions where s occurs in s as a subsequence. Thus, (1) computes the average content similarity over all itemset-sequences containing s as a subsequence. We also use StdDevSim S ( s ) to denote p VarSim S ( s ).

Given a collection of itemset-sequences S we discover in-teresting cross-stream patterns as follows: (I) we use Pre-fixSpan [6] to obtain a set of frequent sequential patterns F for a given minRelSup ; (II) we perform the following filtering of F : (i) we filter out patterns consisting of all identical symbols; (ii) we select frequent closed sequential patterns and (iii) we select patterns for which AvgSim S  X  minAvgSim and VarSim S  X  minV arSim .
Thus, as a measure of interestingness for discovering se-quential patterns in addition to minRelSup ,whichisthe standard measure [1], we also use minAvgSim and minV arSim , which reflect the content dependencies between the news sto-ries.
The problem of mining and ranking streams of news sto-ries using cross-stream sequential patterns can be defined as follows.

Given: (I) multi-stream of documents D ; (II) sliding time-window size w (e.g., 24 hours); (III) time quantization step size Q t (e.g., 1 hour) for quantizing the time scale; (IV) minimum relative frequency threshold minRelSup for se-quential patterns and (V) minimum average content similar-ity minAvgSim and its variance minV arSim for sequential patterns.

Tasks: (I) discover recurrent temporal publishing patterns between the streams of news stories in terms of frequent se-quential patterns for which AvgSim S  X  minAvgSim and VarSim S  X  minV arSim and (II) rank the streams of news stories with respect to timeliness of reporting important events and content authority.
In the following sections we assume that we are given a collection of itemset-sequences S =[ s 1 ,s 2 , ...,s n ], where s I i j  X  X  ,where A = { a 1 ,a 2 , ...,a |A| } is the set of stream identifiers. Also M = max 1  X  i  X  n | s i | is the maximum size of an itemset-sequence in S .
In this section we present a probabilistic ranking function that ranks with respect to the following factors: (I) the im-portance of a cluster increases with its size; and (II) the importance of a position in a time-ordered cluster increases with respect to the distance from the last position. Let P ( i, j, k ) be the joint probability distribution that source i occurs at position j in a cluster of size k . Given the presented factors, which determine the rank, we factorize P ( i, j, k )as follows where: P ( i | j, k ) is the probability of source i given position j in cluster of size k , P ( j | k )= 1 k is the probability of po-sition j in cluster of size k for j  X  k and  X  k = P ( k )isthe probability of cluster of size k .Let P ( i )= the marginal distribution of i , which can be expressed using (3) as follows We estimate P ( i | j, k )from S as P ( i | j, k )= N n ( N n ( i, j, k ) is the number of occurrences of source i in po-sition j in a cluster of size k and N n ( j, k )isthenumber of occurrences of cluster of size k . We estimate  X  k from S as  X  k = N n ( k ) n . We derive the probabilistic ranking func-tion rankP rob 1 ( i ) from (4) by weighted marginalization as follows. Let w cluster ( k )and w pos ( j ) be the weights (impor-tance) of cluster of size k and position j in a given cluster. As an example we set w cluster ( k )= k 2 and w pos ( j )=( k +1 Then rankP rob 1 ( i ) can be expressed as follows: In order to obtain ranking values in the interval [0 , 1] we normalize (5) to obtain the following function In order to prevent (6) from favoring sources having high publishing rate we normalize it by p i the (relative frequency) of source i in the input collection of itemset-sequences S and obtain the following ranking function
Note that we can also use some distance measure to quan-tify the divergence of ranking provided by rankP rob from p i (the model of randomness).
In this section we present a content-aware ranking func-tion that ranks with respect to the following factors: (I) the importance of a cluster increases directly with its size and inversely with its time-span (the time distance between the first and the last document); and (II) the importance of a document in a given position (its authority) in a time-ordered cluster is proportional to the difference between the average combined similarity (content similarity and tempo-ral distance) for the following documents and the previous documents in the cluster.

Let  X  t ( i, j ) be the temporal distance between documents d i and d j ,where X  t ( i, j )= e notes the factor by which the value of the function decays within the time interval w being the time window size. Then the combined similarity w ( d i ,d j ), can be expressed as follows where sim ( i, j ) is the content similarity.

Now we define the average combined similarity with re-spect to previous and following documents. Given an itemset-=1 ,l  X  j d l be the set of documents that precede document d ) .stream = i in position j in s .Let F ollow ( s, i, j )= S ment d ( i ) .stream = i in position j in s . Then the average combined similarity with respect to previous documents (in positions j &lt;j ), denoted In ( s, i, j ),canbeexpressedas follows Also the average combined similarity with respect to the fol-lowing documents (in positions j&lt;j ), denoted Out ( s, i, j ), can be expressed as follows Out ( s, i, j )= 1 | Given the value of In ( s, i, j )and Out ( s, i, j ) we define  X  X u-thority X  of source i corresponding to a document in position j as follows
We now define the contribution of a given itemset-sequence s to the rank of source i .Let Pos ( s, i ) be the set of all posi-tions in s corresponding to source i . Then the contribution of s to the rank of source i can be defined as follows where w cluster ( k ) is the weight of the cluster of size k and  X  (0 , | s | X  1) is the time-span of the cluster. Finally the content-aware ranking function for source i in a collection of itemset-sequences S of size n = | S | canbeexpressedas follows: Thus, (13) computes an average of (12) over all itemset-sequences in S .
In this section we present our experimental results on the multi-stream of news stories of size 102367 stories that have been retrieved, via RSS feeds, from the following eleven news sources: ABC news (ABC), Aljazeera (ALJ), Asso-ciated Press (AP), British Broadcast Co. (BBC), Canadian Broadcast Co. (CBC), Xinhua News Agency (CHV), Cen-tral News Agency Taiwan (CNE), CNN, MSNBC, Reuters (REU) and United Press International (UPI). The stories were retrieved over a period of 6 months from the 12-th of November 2008 to the 24-th of May 2009. We used an in-cremental clustering algorithm and obtained a collection of itemset-sequences S of size | S | = 14660, where the maxi-mum itemset-sequence size M = 52. We carried out ex-tensive experiments on the collection but because of space limitations in this paper we present only two of them. Figure 1 presents results for rankP rob 1 ( i ), where we can see that rankP rob 1 ( i ) deviates from p i implying that indeed occur-rences of news sources in the collection of itemset-sequences depend on the cluster size and position within the cluster. Figure 2 presents results for the content aware ranking func-tion rankCT ( i ).
We presented a new method for mining and ranking streams of news stories using cross-stream sequential patterns and content similarity. In experiments on news streams gathered from RSS feeds corresponding to major world news agencies we showed the applicability of the presented method. Figure 1: Ranking of the news stories obtained us-ing probabilistic ranking function rankP rob 1 ( i ), where rankP rob 1 ( i ) assumes that occurrences of a source i depend on the cluster size k and position j within the cluster and p is the relative frequency of source i in the collection of itemset-sequences Figure 2: Ranking of the news stories obtained using the content-aware ranking function rankCT ( i )
