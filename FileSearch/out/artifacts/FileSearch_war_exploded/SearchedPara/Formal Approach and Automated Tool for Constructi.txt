 Extracting domain knowledge from databases can facilitate the development of Web ontologies. In this paper, a formal approach and an automated tool for cons tructing ontologies from Object-oriented database models (OODMs) are developed. The approach corresponding database instances into the ontology structure and ontology instances, respectively. Case studies show that the efficient. I.2.4 [Knowledge Representati on Formalisms and Methods]: Representation languages; I.2.6 [Learning]: Knowledge acquisition. Theory, Languages, Design, Algorithms, Management. Object-oriented database; Ontology; Ontology learning. Full implementation of the Sema ntic Web requires widespread availability of ontologies. Currently, lots of methods and tools have been developed to constr uct ontologies from various data resources such as textual data , knowledge base, and database models [8]. Compared to other types of data resources, ontology construction from database mode ls has attracted the most attention, because most domain knowledge and data are still stored in databases [8]. For a comprehensive review of constructing ontologies from database models (such as ER models, relational models), please refer to [8]. database models (e.g., relationa l models, ER models), Object-oriented database model (OODM) has been developed in response to the complex data modeling requirements (e.g., CAD, office automation, and engineering desi gn) [3], [7]. OODM, which can also their dynamic aspects (methods ), is therefore considered to possess higher modeling power than ER and relational models [4]. With the wide utilization of OODMs, it is possible and meaningful to investigate how to construct ontologies from OODMs, which will facilitate the development of Web ontologies. and ontologies, some researches (e .g., [6], [9]) investigated how to represent and handle ontologies by Object-oriented techniques. In addition, there are several wo rks investigating data modeling with Description Logics, such as the approaches [1], [2] established correspondences between Description Logics and data models (e.g., ER mode ls, OODMs). To our best knowledge, so far, no research on how to construct Web ontologies from Object-oriented database models has been done. tool for constructing ontologies from Object-oriented database models (OODMs). Here, we consider the OODM and its corresponding database instances, and translate them into the ontology structure and ontology instances, respectively. Furthermore, following the proposed approach, we implement an automated translation tool OODB2OWL , which can automatically construct ontologies by extracting knowledge stored in the Object-oriented database db4o [11]. Case studies show that the efficient. database models ( OODMs ) and OWL DL ontologies , in order to establish the precise corre spondences between them. In the following, based on [1], [2], we give a formal definition of OODMs. For a comprehensive review of OODMs, please refer to [2], [3]. based on the notions of object , class , attribute , method , and inheritance . Formally, an OODM is a tuple S = ( D where: z D S is a set of type names D (e.g., string , integer ). z C S is a set of class names C . z A S is a set of attribute names A = A SS  X  A SC ; an attribute can z F S is a finite set of class declarations ; for each class C  X  C where: reality at a university. An ontology formulated in OWL DL language is called OWL DL ontology [12], which consists of the ontology structure O [5], [10] in detail). [12], and we further add the individual axioms to the definition. a couple O = ( O S , O I ) = ( ID 0 , Axiom 0 ), where: OWL DL identifier set partitioned into: set of OWL DL axioms. We say that an interpretation I is a model of O iff it satisfies all axioms in O . In this section, we propose a fo rmal approach and an automated tool for constructing OWL DL ontologies from OODMs. Definition 3 gives a formal approach for translating an OODM into the OWL DL ontology structure. Starting with the construction of OWL DL identifiers , the approach induces a set of axioms from the OODM. The ontology can then be evaluated by the domain experts. be an OODM. The OWL DL ontology structure O S =  X  ( S ) = ( ID Axiom 0 ) can be defined by function  X  in Table 1: reasons of space, which can be sanctioned by the semantic-preserving translations from an OODM to a Description Logic knowledge base introduced in [1], [2]. SC )  X  CID 0 and V 1 = invof_  X  (U 1 )  X  OPID 0 and V 2 = invof_  X  (U 2 )  X  OPID 0 )  X  ( C ) ). domain (  X  ( C i )) range (  X  ( A )) inverseOf  X  (U i ) ). database instances w.r.t. OODMs into OWL DL ontology instances . Firstly, let us briefly introduce the representation forms of instances in OODMs and ontologies.
 individual axioms (see [5]): (i) Individual ( o type( C 1 o )... value( U 1 , v 1 )...); (ii) SameIndividual ( o DifferentIndividuals ( o 1 ... o n ). database instances w.r.t. an OODM specify that: (i) an object o is [ A : V 1 ,..., A k : V k ]. Here, as mentioned in Section 2.1, A value or a set value, and i  X  {1,..., k }. database instances to OWL DL ontology instances. instances w.r.t. an OODM S , the OWL DL ontology instances w.r.t. the ontology structure  X  ( S ) can be derived as the rules: (1) Each object (i.e., object identifier OID ) in database instances (2) Each class C in database instances corresponds to a class (3) The simple attributes, complex attributes, and methods of (4) The assertion o : C corresponds to the individual axiom: (5) The assertion o : [ A 1 : V 1 ,..., A k : V In this section, following the propos ed approaches in Sections 3.1 and 3.2, we implemented an au tomated translation tool called OODB2OWL , which can automatically construct OWL DL ontologies from OODMs and databa se instances stored in db4o . widely used open source object database recommended by Object-oriented Databa se Management Group ( ODMG ), enables Java and .NET developers to stor e and retrieve any application predefine or maintain a separate, rigid data model. 1.6 platform. OODB2OWL includes three main modules: connecting and parsing module , translation module , and output module . The connecting and parsing module uses the regular expression to parse OODMs and da tabase instances stored in db4o , and stores the parsed results as Java ArrayList classes; translation module translates th e OODM and database instances into the OWL DL ontology structure and instances based on the proposed approaches; output m odule produces the resulting OWL DL ontology which is saved as a text file and displayed on the tool screen (see Figure 2). For reasons of space, here we give an example only, which can show that the proposed approach is feasible and the implemented tool is efficient. Figure 2 shows the screen snapshot of OODB2OWL , which displays the translations from the OODM in Figure 1 and its corresponding database instances (Figure 2) to the OWL DL ontology structure and instances (Figure 2). 
Figure 2. Screen snapshot of OODB2OWL , where the db4o, the ontology and the parsed results are displayed in the left, In this paper, we have devel oped a formal approach and an automated tool for constructing ontologies from Object-oriented database models (OODMs). A fo rmal definition of OODMs was proposed. The OWL DL ontology was introduced. What X  X  more, we proposed a formal approach that can translate an OODM and its corresponding database instances into the ontology structure and instances. Furthermore, we implemented an automated translation tool, which can automatically construct ontologies from OODMs and database instances stored in the object database db4o . Our approach and tool will facilitate the development of Web ontologies. been designed following the disciplined methodologies, thus we will experiment with other OODMs to enrich our approach. We will also develop the other appro aches of constructing ontologies. We thank the anonymous reviewers for their valuable suggestions. The work is supported by the Fundamental Research N090504005) and the National Natural Science Foundation of China (60873010). [1] Baader, F., McGuinness, D., Nardi, D. (eds.). 2003. The [2] Calvanese, D., Lenzer ini, M., Nardi, D. 1999. Unifying class-[3] Cattell, R.G.G., Barry, D.K., et al. 2000. The Object Data [4] Guimar X es, J. 1995. The object oriented model and its [5] Horrocks, I., Patel-Schneider, P. F. (eds.). 2003. From SHIQ [6] Meditskos, G., Bassiliades, N. 2008. A Rule-Based Object-[7] McHaney, R., Hagmann, C. 2003. Object-Oriented Database. [8] Maedche, A., Steffen, S. 2001. Ontology Learning for the [9] Oren, E., Heitmann, B., D ecker, S. 2008. ActiveRDF: [10] OWL: Ontology Web Language, http://www.w3.org/ [11] Object-oriented database db4o : http://www.db4o.com/ [12] Xu, Z., Zhang, S., Dong, Y. 2006. Mapping between 
