 Dynamic programming algorithms, also known as tabular or chart-based algorithms, are at the core of many applications in natural language processing. When applied to formalisms such as context-free grammar, they provide polynomial-time parsing al-gorithms and polynomial-space representations of the resulting parse forests, even in cases where the size of the search space is exponential in the length of the input string. In combination with appropri-ate semirings, these packed representations can be exploited to compute many values of interest for ma-chine learning, such as best parses and feature expec-tations (Goodman, 1999; Li and Eisner, 2009).
In this paper, we follow the line of investigation started by Huang and Sagae (2010) and apply dy-namic programming to (projective) transition-based dependency parsing (Nivre, 2008). The basic idea, originally developed in the context of push-down automata (Lang, 1974; Tomita, 1986; Billot and Lang, 1989), is that while the number of computa-tions of a transition-based parser may be exponential in the length of the input string, several portions of these computations, when appropriately represented, can be shared. This can be effectively implemented through dynamic programming, resulting in a packed representation of the set of all computations.
The contributions of this paper can be summarized as follows. We provide (declarative specifications of) novel, polynomial-time algorithms for two widely-used transition-based parsing models: arc-standard (Nivre, 2004; Huang and Sagae, 2010) and arc-eager (Nivre, 2003; Zhang and Clark, 2008). Our algorithm for the arc-eager model is the first tabular algorithm for this model that runs in polynomial time. Both algorithms are derived using the same general tech-nique; in fact, we show that this technique is applica-ble to all transition-parsing models whose transitions can be classified into  X  X hift X  and  X  X educe X  transitions. We also show how to reverse the tabulation to de-rive a new transition system from an existing tabular algorithm for dependency parsing, originally devel-oped by G X mez-Rodr X guez et al. (2008). Finally, we discuss in detail the role of feature information in our algorithms, and in particular the conditions under which the feature models traditionally used in transi-tion-based dependency parsing can be integrated into our framework.

While our general approach is the same as the one of Huang and Sagae (2010), we depart from their framework by not representing the computations of a parser as a graph-structured stack in the sense of Tomita (1986). We instead simulate computations as in Lang (1974), which results in simpler algo-rithm specifications, and also reveals deep similari-ties between transition-based systems for dependency parsing and existing tabular methods for lexicalized context-free grammars. We start by briefly introducing the framework of transition-based dependency parsing; for details, we refer to Nivre (2008). 2.1 Dependency Graphs Let w D w 0 w n 1 be a string over some fixed alphabet, where n 1 and w 0 is the special token root . A dependency graph for w is a directed graph G D .V w ;A/ , where V w Df 0;:::;n 1 g is the set of nodes, and A V w V w is the set of arcs. Each node in V w encodes the position of a token in w , and each arc in A encodes a dependency relation between two tokens. To denote an arc .i;j/ 2 A , we write i ! j ; here, the node i is the head, and the node j is the dependent. A sample dependency graph is given in the left part of Figure 2. 2.2 Transition Systems A transition system is a structure S D .C;T;I;C t / , where C is a set of configurations , T is a finite set of transitions , which are partial functions t W C * C , I is a total initialization function mapping each input string to a unique initial configuration, and C t C is a set of terminal configurations .

The transition systems that we investigate in this paper differ from each other only with respect to their sets of transitions, and are identical in all other aspects. In each of them, a configuration is de-fined relative to a string w as above, and is a triple c D .; X ;A/ , where and  X  are disjoint lists of nodes from V w , called stack and buffer , respectively, and A V w V w is a set of arcs. We denote the stack, buffer and arc set associated with c by .c/ ,  X .c/ , and A.c/ , respectively. We follow a standard convention and write the stack with its topmost ele-ment to the right, and the buffer with its first element to the left; furthermore, we indicate concatenation in the stack and in the buffer by a vertical bar. The initialization function maps each string w to the ini-tial configuration . X  X ; X 0;:::; j w j 1 X ; ; / . The set of terminal configurations contains all configurations of the form . X 0 X ; X  X ;A/ , where A is some set of arcs.
Given an input string w , a parser based on S pro-cesses w from left to right, starting in the initial con-figuration I.w/ . At each point, it applies one of the transitions, until at the end it reaches a terminal configuration; the dependency graph defined by the arc set associated with that configuration is then re-turned as the analysis for w . Formally, a computation of S on w is a sequence D c 0 ;:::;c m , m 0 , of configurations (defined relative to w ) in which each configuration is obtained as the value of the preced-ing one under some transition. It is called complete whenever c 0 D I.w/ , and c m 2 C t . We note that a computation can be uniquely specified by its initial configuration c 0 and the sequence of its transitions, understood as a string over T . Complete computa-tions, where c 0 is fixed, can be specified by their transition sequences alone. To introduce the core concepts of the paper, we first look at a particularly simple model for transition-based dependency parsing, known as the arc-stan-dard model . This model has been used, in slightly different variants, by a number of parsers (Nivre, 2004; Attardi, 2006; Huang and Sagae, 2010). 3.1 Transition System The arc-standard model uses three types of transi-tions: S hift ( sh ) removes the first node in the buffer and pushes it to the stack. L eft -A rc ( la ) creates a new arc with the topmost node on the stack as the head and the second-topmost node as the dependent, and removes the second-topmost node from the stack. R ight -A rc ( ra ) is symmetric to L eft -A rc in that it creates an arc with the second-topmost node as the head and the topmost node as the dependent, and removes the topmost node.

The three transitions can be formally specified as in Figure 1. The right half of Figure 2 shows a com-plete computation of the arc-standard transition sys-tem, specified by its transition sequence. The picture also shows the contents of the stack over the course of the computation; more specifically, column i shows the stack .c i / associated with the configuration c i . 3.2 Push Computations The key to the tabulation of transition-based depen-dency parsers is to find a way to decompose com-putations into smaller, shareable parts. For the arc-standard model, as well as for the other transition systems that we consider in this paper, we base our decomposition on the concept of push computations . By this, we mean computations on some input string w with the following properties: (P1) The initial stack .c 0 / is not modified during the computation, and is not even exposed after the first transition: For every 1 i m , there exists a non-empty stack i such that .c i / D .c 0 / j i . (P2) The overall effect of the computation is to push a single node to the stack: The stack .c m / can be written as .c m / D .c 0 / j h , for some h 2 V w .
We can verify that the computation in Figure 2 is a push computation. We can also see that it contains shorter computations that are push computations; one example is the computation 0 D c 1 ;:::;c 16 , whose overall effect is to push the node 3 . In Figure 2, this computation is marked by the zig-zag path traced in bold. The dashed line delineates the stack .c 1 / , which is not modified during 0 .

Every computation that consists of a single sh tran-sition is a push computation. Starting from these atoms, we can build larger push computations by means of two (partial) binary operations f la and f ra , defined as follows. Let 1 D c 10 ;:::;c 1m 1 and 2 D c 20 ;:::;c 2m 2 be push computations on the same input string w such that c 1m 1 D c 20 . Then where c is obtained from c 2m 2 by applying the ra transition. (The operation f la is defined analogously.) We can verify that f ra . 1 ; 2 / is another push com-putation. For instance, with respect to Figure 2, f ra . 1 ; 2 / D 0 . Conversely, we say that the push computation 0 can be decomposed into the subcom-putations 1 and 2 , and the operation f ra . 3.3 Deduction System Building on the compositional structure of push com-putations, we now construct a deduction system (in the sense of Shieber et al. (1995)) that tabulates the computations of the arc-standard model for a given input string w D w 0 w n 1 . For 0 i n , we shall write  X  i to denote the buffer  X i;:::;n 1 X  . Thus,  X  0 denotes the full buffer, associated with the initial configuration I.w/ , and  X  n denotes the empty buffer, associated with a terminal configuration c 2 C t .
Item form. The items of our deduction system take the form  X i;h;j X  , where 0 i h &lt; j n . The intended interpretation of an item  X i;h;j X  is: For every configuration c 0 with  X .c 0 / D  X  i , there exists a push computation D c 0 ;:::;c m such that  X .c m / D  X  j , and .c m / D .c 0 / j h .

Goal. The only goal item is  X 0;0;n X  , asserting that there exists a complete computation for w .
Axioms. For every stack , position i &lt; n and arc set A , by a single sh transition we obtain the push computation .; X  i ;A/;. j i; X  i C 1 ;A/ . There-fore we can take the set of all items of the form  X i;i;i C 1 X  as the axioms of our system.

Inference rules. The inference rules parallel the composition operations f la and f ra . Suppose that we have deduced the items  X i;h 1 ;k X  and  X k;h 2 ;j X  , where 0 i h 1 &lt; k h 2 &lt; j n . The item  X i;h 1 ;k X  asserts that for every configuration c 10 with  X .c 10 / D  X  i , there exists a push computation 1 D c 10 ;:::;c 1m 1 such that  X .c 1m 1 / D  X  k , and we deduce the existence of a second push compu-tation 2 D c 20 ;:::;c 2m 2 such that c 20 D c 1m 1 , means of f ra , we can then compose 1 and 2 into a new push computation Here,  X .c/ D  X  j , and .c/ D .c 10 / j h 1 . Therefore, we may generate the item  X i;h 1 ;j X  . The inference rule for la can be derived analogously.

Figure 3 shows the complete deduction system. 3.4 Completeness and Non-Ambiguity We have informally argued that our deduction sys-tem is sound. To show completeness, we prove the following lemma: For all 0 i h &lt; j j w j and every push computation D c 0 ;:::;c m on w with  X .c 0 / D  X  i ,  X .c m / D  X  j and .c m / D .c 0 / j h , the item  X i;h;j X  is generated. The proof is by induction on m , and there are two cases: m D 1 . In this case, consists of a single sh transi-tion, h D i , j D i C 1 , and we need to show that the item  X i;i;i C 1 X  is generated. This holds because this item is an axiom. m 2 . In this case, ends with either a la or a ra transition. Let c be the rightmost configuration in that is different from c m and whose stack size is one larger than the size of .c 0 / . The computations are both push computations with strictly fewer tran-sitions than . Suppose that the last transition in is ra . In this case,  X .c/ D  X  k for some i &lt; k &lt; j , .c/ D .c 0 / j h with h &lt; k ,  X .c m 1 / D  X  j , and .c m 1 / D .c 0 / j h j h 0 for some k h 0 &lt; j . By induction, we may assume that we have generated items  X i;h;k X  and  X k;h 0 ;j X  . Applying the inference rule for ra , we deduce the item  X i;h;j X  . An analo-gous argument can be made for f la .

Apart from being sound and complete, our deduc-tion system also has the property that it assigns at most one derivation to a given item. To see this, note that in the proof of the lemma, the choice of c is uniquely determined: If we take any other con-figuration c 0 that meets the selection criteria, then the computation 0 2 D c 0 ;:::;c m 1 is not a push computation, as it contains c as an intermediate con-figuration, and thereby violates property P1. 3.5 Discussion Let us briefly take stock of what we have achieved so far. We have provided a deduction system capable of tabulating the set of all computations of an arc-standard parser on a given input string, and proved the correctness of this system relative to an interpre-tation based on push computations. Inspecting the system, we can see that its generic implementation takes space in O . j w j 3 / and time in O . j w j 5 / .
Our deduction system is essentially the same as the one for the CKY algorithm for bilexicalized context-free grammar (Collins, 1996; G X mez-Rodr X guez et al., 2008). This equivalence reveals a deep correspon-dence between the arc-standard model and bilexical-ized context-free grammar, and, via results by Eisner and Satta (1999), to head automata. In particular, Eisner X  X  and Satta X  X   X  X ook trick X  can be applied to our tabulation to reduce its runtime to O . j w j 4 / . The main goal with the tabulation of transition-based dependency parsers is to obtain a representation based on which semiring values such as the high-est-scoring computation for a given input (and with it, a dependency tree) can be calculated. Such com-putations involve the use of feature information. In this section, we discuss how our tabulation of the arc-standard system can be extended for this purpose. 4.1 Scoring Computations For the sake of concreteness, suppose that we want to score computations based on the following model, taken from Zhang and Clark (2008). The score of a computation is broken down into a sum of scores score .t;c t / for combinations of a transition t in the transition sequence associated with and the config-uration c t in which t was taken: The score score .t;c t / is defined as the dot product of the feature representation of c t relative to a feature model  X  and a transition-specific weight vector E  X  t : The feature model  X  is a vector h 1 ;:::; n i of elementary feature functions , and the feature rep-resentation  X .c/ of a configuration c is a vector E x D h 1 .c/;:::; n .c/ i of atomic values. Two ex-amples of feature functions are the word form associ-ated with the topmost and second-topmost node on the stack; adopting the notation of Huang and Sagae (2010), we will write these functions as s 0 : w and s : w , respectively. Feature functions like these have been used in several parsers (Nivre, 2006; Zhang and Clark, 2008; Huang et al., 2009). 4.2 Integration of Feature Models To integrate feature models into our tabulation of the arc-standard system, we can use extended items of the form  X i;h;j IE x L ; E x R  X  with the same intended interpretation as the old items  X i;h;j X  , except that the initial configuration of the asserted computations
D c 0 ;:::;c m now is required to have the feature representation E x L , and the final configuration is re-quired to have the representation E x R : We shall refer to the vectors E x L and E x R as the left-context vector and the right-context vector of the computation , respectively.

We now need to change the deduction rules so that they become faithful to the extended interpretation. Intuitively speaking, we must ensure that the feature values can be computed along the inference rules. As a concrete example, consider the feature model  X  D h s 1 : w ; s 0 : w i . In order to integrate this model into our tabulation, we change the rule for ra as in Figure 4, where x 1 ;:::;x 4 range over possible word forms. The shared variable occurrences in this rule capture the constraints that hold between the feature values of the subcomputations 1 and 2 asserted by the premises, and the computations f ra . 1 ; 2 / asserted by the conclusion. To illustrate this, suppose that 1 and 2 are as in Figure 2. Then the three occurrences of x 3 for instance encode that
 X  s 0 : w  X .c 6 / D  X  s 1 : w  X .c 15 / D  X  s 0 : w  X .c 16
We also need to extend the axioms, which cor-respond to computations consisting of a single sh transition. The most conservative way to do this is to use a generate-and-test technique: Extend the ex-isting axioms by all valid choices of left-context and right-context vectors, that is, by all pairs E x L ; E x R that there exists a configuration c with  X .c/ D E x L and  X . sh .c// D E x R . The task of filtering out use-less guesses can then be delegated to the deduction system.

A more efficient way is to only have one axiom, for the case where c D I.w/ , and to add to the deduction system a new, unary inference rule for sh as in Fig-ure 4. This rule only creates items whose left-context vector is the right-context vector of some other item, which prevents the generation of useless items. In the following, we take this second approach, which is also the approach of Huang and Sagae (2010). 4.3 Computing Viterbi Scores Once we have extended our deduction system with feature information, many values of interest can be computed. One simple example is the Viterbi score for an input w , defined as where .w/ denotes the set of all complete compu-tations for w . The score of a complex computation f . 1 ; 2 / is the sum of the scores of its subcomputa-tions 1 ; 2 , plus the transition-specific dot product. Since this dot product only depends on the feature representation of the final configuration of 2 , the Viterbi score can be computed on top of the infer-ence rules using standard techniques. The crucial calculation is indicated in Figure 4. 4.4 Computing Prefix Scores Another interesting value is the prefix score of an item, which, apart from the Viterbi score, also in-cludes the cost of the best search path leading to the item. Huang and Sagae (2010) use this quan-tity to order the items in a beam search on top of their dynamic programming method. In our frame-work, prefix scores can be computed as indicated in Figure 5. Alternatively, we can also use the more involved calculation employed by Huang and Sagae (2010), which allows them to get rid of the left-con-text vector from their items. 1 4.5 Compatibility So far we have restricted our attention to a concrete and extremely simplistic feature model. The fea-ture models that are used in practical systems are considerably more complex, and not all of them are compatible with our framework in the sense that they can be integrated into our deduction system in the way described in Section 4.2.

For a simple example of a feature model that is incompatible with our tabulation, consider the model  X  0 D h s 0 : rc : w i , whose single feature function ex-tracts the word form of the right child ( rc ) of the topmost node on the stack. Even if we know the val-ues of this feature for two computations 1 ; 2 , we have no way to compute its value for the composed computation f ra . 1 ; 2 / : This value coincides with the word form of the topmost node on the stack asso-ciated with 2 , but in order to have access to it in the context of the ra rule, our feature model would need to also include the feature function s 0 : w .
The example just given raises the question whether there is a general criterion based on which we can de-cide if a given feature model is compatible with our tabulation. An attempt to provide such a criterion has been made by Huang and Sagae (2010), who define a constraint on feature models called  X  X onotonicity X  and claim that this constraint guarantees that feature values can be computed using their dynamic program-ming approach. Unfortunately, this claim is wrong. In particular, the feature model  X  0 given above is  X  X onotonic X , but cannot be tabulated, neither in our nor in their framework. In general, it seems clear that the question of compatibility is a question about the relation between the tabulation and the feature model, and not about the feature model alone. To find practically useful characterizations of compatibility is an interesting avenue for future research. Up to now, we have only discussed the arc-standard model. In this section, we show that the framework of push computations also provides a tabulation of another widely-used model for dependency parsing, the arc-eager model (Nivre, 2003). 5.1 Transition System The arc-eager model has three types of transitions, shown in Figure 6: S hift ( sh ) works just like in arc-standard, moving the first node in the buffer to the stack. L eft -A rc ( la e ) creates a new arc with the first node in the buffer as the head and the topmost node on the stack as the dependent, and pops the stack. It can only be applied if the topmost node on the stack has not already been assigned a head, so as to preserve the single-head constraint. R ight -A rc ( ra e ) creates an arc in the opposite direction as L eft -A rc , and moves the first node in the buffer to the stack. Finally, R educe ( re ) simply pops the stack; it can only be applied if the topmost node on the stack has already been assigned a head.

Note that, unlike in the case of arc-standard, the parsing process in the arc-eager model is not bottom-up: the right dependents of a node are attached before they have been assigned their own right dependents. 5.2 Shift-Reduce Parsing If we look at the specification of the transitions of the arc-standard and the arc-eager model and restrict our attention to the effect that they have on the stack and the buffer, then we can see that all seven transitions fall into one of three types: We refer to transitions of type T1 as shift and to transitions of type T2 and T3 as reduce transitions .
The crucial observation now is that the concept of push computations and the approach to their tabula-tion that we have taken for the arc-standard system can easily be generalized to other transition systems whose transitions are of the type shift or reduce . In particular, the proof of the correctness of our de-duction system that we gave in Section 3 still goes through if instead of sh we write  X  X hift X  and instead of la and ra we write  X  X educe X . 5.3 Deduction System Generalizing our construction for the arc-standard model along these lines, we obtain a tabulation of the arc-eager model. Just like in the case of arc-standard, each single shift transition in that model (be it sh or ra e ) constitutes a push computation, while the reduce transitions induce operations f la e and f re . The only difference is that the preconditions of la e and re must be met. Therefore, f la e . 1 ; 2 / is only defined if the topmost node on the stack in the final configuration of 2 has not yet been assigned a head, and f re . 1 ; 2 / is only defined in the opposite case.
Item form. In our deduction system for the arc-ea-ger model we use items of the form  X i;h b ;j X  , where 0 i h &lt; j j w j , and b 2 f 0;1 g . An item  X i;h b ;j X  has the same meaning as the corresponding item in our deduction system for arc-standard, but also keeps record of whether the node h has been assigned a head ( b D 1 ) or not ( b D 0 ).
 Goal. The only goal item is  X 0;0 0 ; j w j  X  . (The item  X 0;0 1 ; j w j  X  asserts that the node 0 has a head, which never happens in a complete computation.)
Axioms. Reasoning as in arc-standard, the axioms of the deduction system for the arc-eager model are the items of the form  X i;i 0 ;i C 1 X  and  X j;j 1 ;j C 1 X  , where j &gt; 0 : the former correspond to the push computations obtained from a single sh , the latter to those obtained from a single ra e , which apart from shifting a node also assigns it a head.

Inference rules. Also analogously to arc-standard, if we know that there exists a push computation 1 of the form asserted by the item  X i;h b ;k X  , and a push computation 2 of the form asserted by  X k;g 0 ;j X  , where j &lt; j w j , then we can build the push compu-tation f la e . 1 ; 2 / of the form asserted by the item  X i;h b ;j X  . Similarly, if 2 is of the form asserted by  X k;g 1 ;j X  , then we can build f re . 1 ; 2 / , which again is of the form by asserted  X i;h b ;j X  . Thus:
As mentioned above, the correctness and non-am-biguity of the system can be proved as in Section 3. Features can be added in the same way as discussed in Section 4. 5.4 Computational Complexity Looking at the inference rules, it is clear that an im-plementation of the deduction system for arc-eager in the case of arc-standard. However, a closer inspec-tion reveals that we can give even tighter bounds. In all derivable items  X i;h b ;j X  , it holds that i D h . This can easily be shown by induction: The property holds for the axioms, and the first two indexes of a consequent of a deduction rule coincide with the first two indexes of the left antecedent. Thus, if we use the notation  X i b ;k X  as a shorthand for  X i;i b ;k X  , then we can rewrite the inference rules for the arc-eager system as in Figure 7, where, additionally, we have added unary rules for sh and ra and restricted the set of axioms along the lines set out in Section 4.2. With this formulation, it is apparent that the space complexity of the generic implementation of the de-duction system is in fact even in O . j w j 2 / , and its time complexity is in O . j w j 3 / . We now reverse the approach that we have taken in the previous sections: Instead of tabulating a transi-tion system in order to get a dynamic-programming parser that simulates its computations, we start with a tabular parser and derive a transition system from it. In the new model, dependency trees are built bot-tom-up as in the arc-standard model, but the set of all computations in the system can be tabulated in space O . j w j 2 / and time O . j w j 3 / , as in arc-eager. 6.1 Deduction System G X mez-Rodr X guez et al. (2008) present a deductive version of the dependency parser of Yamada and Mat-sumoto (2003); their deduction system is given in Fig-ure 8. The generic implementation of the deduction system takes space O . j w j 2 / and time O . j w j 3 / .
In the original interpretation of the deduction system, an item  X i;j X  asserts the existence of a pair of (projective) dependency trees: the first tree rooted at token w i , having all nodes in the substring w i w k 1 as descendants, where i &lt; k j ; and the second tree rooted at token w j , having all nodes in the substring w k w j as descendants. (Note that we use fencepost indexes, while G X mez-Rodr X guez et al. (2008) indexes positions.) 6.2 Transition System In the context of our tabulation framework, we adopt a new interpretation of items: An item  X i;j X  has the same meaning as an item  X i;i;j X  in the tabulation of the arc-standard model; for every configuration c with  X .c/ D  X  i , it asserts the existence of a push computation that starts with c and ends with a config-uration c 0 for which  X .c 0 / D  X  j and .c 0 / D .c/ j i .
If we interpret the inference rules of the system in terms of composition operations on push computa-tions as usual, and also take the intended direction of the dependency arcs into account, then this induces a transition system with three transitions: . j i;j j  X ;A/ ` .;j j  X ;A [f j ! i g / . la h / . j i j j; X ;A/ ` . j i; X ;A [f i ! j g / . ra / We call this transition system the hybrid model , as sh and ra are just like in arc-standard, while la h is like the L eft -A rc transition in the arc-eager model ( la e ), except that it does not have the precondition. Like the arc-standard but unlike the arc-eager model, the hybrid model builds dependencies bottom-up. In this paper, we have provided a general technique for the tabulation of transition-based dependency parsers, and applied it to obtain dynamic program-ming algorithms for two widely-used parsing models, arc-standard and (for the first time) arc-eager. The basic idea behind our technique is the same as the one implemented by Huang and Sagae (2010) for the special case of the arc-standard model, but in-stead of their graph-structured stack representation we use a tabulation akin to Lang X  X  approach to the simulation of pushdown automata (Lang, 1974). This considerably simplifies both the presentation and the implementation of parsing algorithms. It has also enabled us to give simple proofs of correctness and establish relations between transition-based parsers and existing parsers based on dynamic programming.
While this paper has focused on the theoretical aspects and the analysis of dynamic programming versions of transition-based parsers, an obvious av-enue for future work is the evaluation of the empiri-cal performance and efficiency of these algorithms in connection with specific feature models. The feature models used in transition-based dependency parsing are typically very expressive, and exhaustive search with them quickly becomes impractical even for our cubic-time algorithms of the arc-eager and hybrid model. However, Huang and Sagae (2010) have pro-vided evidence that the use of dynamic programming on top of a transition-based dependency parser can improve accuracy even without exhaustive search. The tradeoff between expressivity of the feature mod-els on the one hand and the efficiency of the search on the other is a topic that we find worth investigat-ing. Another interesting observation is that dynamic programming makes it possible to use predictive fea-tures, which cannot easily be integrated into a non-tabular transition-based parser. This could lead to the development of parsing models that cross the border between transition-based and tabular parsing.
