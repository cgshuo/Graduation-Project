 Wireless Sensor Network (WSN) is widely used for tracking, monitoring and other purposes. The problem of collect ing data packets from the sensor nodes and depositing those to the sink node is known as Data Gathering Problem [1,2]. Using mobile elements for data gathering in the WSN is a recent trend [3]. It has many advantages. For example, it i ncreases connectivity, reduces cost of deployment of a dense WSN and increases the lifetime of the WSN. However, it has the disadvantage of high latency as these mobile elements have limited speed (compared to the high speed data gathering by routing). The dedicated mobile element in the WSN which collects data packets and brings those to the static sink is called Mobile Data Collector ( MDC ). A convenient way to control the latency in the case of data collection by the MDC is to carefully plan its path so that the path is as short as possible. In this work, we present a path-planning method that shortens the path of the MDC iteratively. We test our path-planning method in a simulation which is run on a realistic testbed. Experimental results show that the shortening of the path indeed translates into decreased latency and other improvements.
 Rest of the sections are organized as follows. Related works are discussed in Section 2. The problem is formulated in Section 3. Our method is presented in Section 4. Experimenta l results are presented in Section 5. The prospect of future work is presented in Section 6. A complete survey on using mobile elem ents for data collection in the WSN is presented in [3]. Earlier works on mobile elements can be found in [4], [5], [6] and [7]. However, random motion of the mobile elements in these works is not suitable for optimization. Mobile sinks have been considered in [8] and [9]. Mobile relay based approaches for opportunistic networks have been surveyed in [10]. How-ever, these methods are not suitable for the WSN because of its difference with such networks. In [11], an energy-efficient data gathering mechanism for large-scale multi-hop network has been proposed. The inter-cluster tour proposed in this work is NP -hard. Latency issue is not addressed in it. One of the heuristics used in this work produces edges which are not connected with any nodes of the WSN. Latency is considered while planning path for the mobile collector in [12] and [13]. Methods presented in these works produce a shorter tour termed Label Covering tour from a TSP-tour . However, the transmission range of the sensor nodes is ignored in the shortening process. In [14], authors propose an approxi-mation algorithm which is based on the TSP-tour of the MDC . Although, the computation time ( O ( n )) is impressive, the solution is applicable to only certain kind of TSP-tour (tours for which the centroid of the tour-polygon lies within that polygon). If a condition regarding the concavity of the given TSP-tour is not met, the problem of finding the optimal solution becomes NP -hard. In [15], authors address the problem of planning paths of multiple robots so as to collect the data from all sensors in the least amount of time. The method presented here exploits earlier work on TSP -tour with neighborhood problem. However, this work does not utilize the available location information of the sensor nodes to the fullest as it allows the traversal of the full boundary of the transmission region of a node. In sparse network, one or more sensor nodes have no neighbors at all. As a result, the traversal of the boundary those nodes is futile and adds up to the tour-length. We represent a WSN with n nodes by a complete graph K n where the graph-nodes represent the sensors and the sink. The edges in this graph represent the Euclidian distances between two nodes. We adopt the disk model of the given transmission range TXR . A circle with radius TXR centered at a node represent the area of radio transmission of that node. We assume that there are one sink and one MDC in the WSN and that both the sink and the sensor nodes are static. A tour or cycle for the MDC is a closed path in the graph K n which starts and ends at the sink node. Definition 1. A TSP-tour is a tour in which the MDC visits the exact location of all the nodes in the WSN exactly once. The min-cost TSP tour 1 is a TSP-tour in which the MDC covers the minimum Euclidian distance.
 Definition 2. Atour T by the MDC is complete if each sensor node of the WSN can send data packets to the visiting MDC directly or via a neighboring which forwards packets. Otherwise, the tour is incomplete.
 By definition, a TSP-tour is complete. However, it is not a good choice for a delay-sensitive WSN as explained in the following section.
 Definition 3. Data Delivery Latency (DDL) of a packet is the time-difference between the generation and delivery of the packet.
 Let a packet i be generated at t g time after the MDC has set out from the sink node. The MDC completes the current tour in t T time according to some tour plan T . DDL for a packet i is given by: If n packets are collected in the current tour by the MDC , average packet delivery latency t avg is given by: The term n i =1 t g ( i ) n in Equation 2 is the average packet generation time .This parameter is not controllable as it depends on the sampling rate of the sensor nodes and the event frequency. However, we may improve both per packet DDL ( t ) and average DDL ( t avg ) by decreasing the tour-time t T (See Equation 1 and 2). The tour-time of the TSP-tour i.e. t TSP has two components: the fraction of tour-time t h when the MDC halts and collects data from the nearby nodes and the fraction of tour-time t m when the MDC travels between the node positions. When the number of nodes is very high and/or the network is sparse, t h &lt;&lt; t m and thus t m dominates tour-time t TSP . This assumption is logical for practical scenario where the speed of a commercially available robotic car used as MDC usually is 5 ms  X  1 whereas packet transfer from a sensor node to the MDC happens in the order of miliseconds [16]. Thus, decreasing the motion time t m contributes to improving latency. If the speed of the MDC is v MDC ,andifwe assume that it accelerates to this speed instantly and stops instantly, then where | t TSP | is the path-length of the TSP-tour . Given a particular MDC , v MDC is fixed. The only way to decrease tour-t ime is decreasing the length of the tour i.e. | t TSP | (See Equation 4). However, decreasi ng the tour-length arbitrarily has the risk of making the resulting tour incom plete. Therefore, we address the issue carefully so that, the resulting tour is complete and shorter than the TSP-tour . Problem Statement Given a TSP-tour of the MDC in a WSN, find a tour T d that is complete and shorter than the TSP-tour . 4.1 Linear Shortcut of a Tour Definition 4. A linear shortcut of given a tour is derived by choosing 0, 1 or 2 points (called Anchor Points) from each tour-edge according to some strategy and connecting those points by straight lines in the order of visiting those edges. It is called linear as only new straight lines are introduced in the resulting tour instead of any curves. An example of linear shortcut of a tour is shown in Figure 1. Five Anchor Points p ,p 2 ,p 3 ,p 4 and p 5 are chosen from five tour-edges. Those are connected in the order of their visiting in the given tour to produce the linear shortcut. The first and the last points are also conn ected to make the path a cycle. The tour Using principle of triangle inequality, Lemma 1 can be easily proved. Lemma 1. If at least one anchor point is not coincident with the endpoint of the tour-edge, the linear shortcut is shorter than the given tour. (Proved using Triangle Inequality) 4.2 Linear Shortcut of the TSP-tour In [12] and [13], a tour known as Label Covering or LC tour is derived from the TSP-tour . As shown in Figure 2, the tour-edges between nodes 1 and 2 are also within the range of Node 3 and 5. Therefore, the label set of this edge is { 1 , 2 , 3 , 5 } . Similarly, the sets of labels of all other edges are determined. the minimum length label covering tour is determined by making shortcut of zero or more edges of the given TSP-tour . For the graph shown in Figure 2, the 4.3 Linear Shortcut of the LC -tour Definition 5. The segment of the tour-edge which is within the circle represent-ing the transmission area of a node is called the Contact Interval (CI) of that node on that edge.
 As shown in Figure 3, four nodes are c overed by an edge connecting Node n i and n j .Eachoftheir CI  X  X  is represented by two points on the edge i.e the l (which is encountered first by the MDC on this edge) and the r points. For example, the CI of Node n i +1 is given by ( ln i +1 ,rn i +1 ). If the intersection of the circle and the straight line is beyond the edge, the end-point of the CI is the nearest end-point of the edge. For example, in Figure 3, r -point of Node n i +5 is the location of Node n j .
 Definition 6. Given a list of contact intervals CI e of a tour-edge e ,Critical Contact Interval or CCI is the interval of the minimum length which has at least one point from each contact interval.
 Critical Contact Interval or CCI of i -th edge is represented by two points-lcci and rcci on that edge. These points can be determined as follows: For example, the CCI of the edge shown in Figure 3 is determined in Figure 4.
After the CCI  X  X  have been computed, we can connect r point of the CCI of an edge with the l point of the CCI of the next edge. However, the nodes visited in the given tour may be missed as shown in Figure 5(a). Therefore, to cover those nodes, we apply the following method for a Node n i : 1. If both the edges have non-Null CCI  X  X , i.e. there are intermediate nodes on 2. If the incoming edge does not have any intermediate node with overlapping Now, we join the r point of the previous edge with the l point of the next edge. The final edges are shown as bold straight lines in Figure 5(c). We term this shortening as tightening of the given tour by the linear shortcut method. We term the shorter tour derived from the LC-tour as Tight Label Covering tour or TLC -tour. 4.4 Iterative Improvement of the TLC -tour The path found in Figure 5(c) can be further shortened using the linear shortcut method. We divide each iteration of improvement into 2 steps: 1. Connect the r point rcc i of i -th edge with l point lcc j of the next edge ( j -th 2. Re-associate the intermediate circles with the resulting edges and recompute Now, we use the following policy to re-associate the circles when existing tour-edges break into shorter ones and new edges are added : 1. For each circle adjacent with two edges, the CI  X  X  for the both the edges are 2. If the CI  X  X  for both the edges are equal, the circle is associated with the As shown in Figure 5(d), there a re eight edges. Circle of Node n 1 has overlaps with both the outgoing and the incoming edges. However, unlike the incoming edge, the circle has a CI of non-zero length with the outgoing edge. Therefore, we associate Node n 1 with this edge. Node n 2 has CI  X  X  of zero length with both the incoming and the outgoing eges. Therefore, we associate it with the incoming edge.The CCI oftheedgeconnecting n 1 and n 2 is updated after this re-association . In similar ways, we determine the l and r points of the CCI  X  X  of the remaining edges. After this round of re-associating of circles and computation of the CCI  X  X  of respective edges, we join the r point of an edge with the l point of the next edge. Thus, the tour as show n in Figure 5(e) is derived. According to the Lemma 1, it is shorter than the tour derived in the previous iteration.
We can continue this way in to more iterations to tighten the given tour. The steps are illustrated in Figure 5(f), 5(g) and 5(h).

The given LC -tour and the TLC -tour derived after Iteration 4 has been im-posed on each other for comparison in Figure 6. The derived TLC -tour is a significantly shorter than the LC -tour.
 Condition for the Termination of Iterations: We can define path gain g ( t TLC )fora TLC -tour derived in iteration i as follows: Here | t TLC | i is the length of the TLC -tour derived in iteration i .Westopthe iterations for path-shortening as soon as the path gain is below a threshold like 1%, 5% etc.
 Computation Complexity: Our method of generating TLC-tour is formally presented in Algorithm 1. First, we generate the CI  X  X  for all the circles in O ( n ) time. Then, we sort the CI  X  X  in the non-decreasing order of the distance from the first endpoint of the edge in O ( n log n ) time. Therefore, we generate the CCI for an edge in O ( n + n log n )= O ( n ) time. For a given tour, there are O ( n )edges. Therefore, we generate CCI  X  X  of all the edges in O ( n 2 ) time. Then, we connect successive r and l Points in O ( n ) time. For each edge, we test the circles for re-association .Theremaybe O ( n ) such circles associated with each edge and a total of O ( n ) edges. Therefore, updating the CCI  X  X  takes O ( n 2 )time. Algorithm 1. Generating TLC-tour from LC-tour If there are m iterations, then generating TLC-tour from LC-tour takes O ( mn 2 ) time. We illustrate the stages of computation along with the time com-plexity in Figure 7. We use Castelia [17] framework of OMENT++ simulator to distribute sensor nodes randomly. The sensor nodes also generated packet randomly. We use Con-cord TSP-Solver [18] to compute the optimal TSP-tour .Wederivethe LC -tour from the TSP-tour and the TLC -tour from the LC -tour using path-gain thresh-old of 5%. The MDC tours continuously in TSP-tour, LC-tour and TLC-tour . During its travel, it collects the packets from the sensor nodes and deposits those to the sink node. We vary the value of TXR from 2 m to 32 m . Low value of TXR indicates lower degree of connectivity and hence, sparse network. Sim-ilarly, higher value of TXR indicates dense network.

As shown in Figure 8(a), average packet delivary latency is always the lowest for TLC-tour and the highest for TSP-tour . The value is comparatively better in the case of the sparse WSN. In Figure 8(b), throughput for the entire run is shown. The value is always the highest for TLC -tour and the lowest for the TSP-tour . We have given a framework for shortening a given tour of the MDC .There-sulting tour decreases packet delivery latency and increases throughput. The TLC-tour derived by Linear Shortcut of the LC-tour is highly suitable for real-time WSN in which high latency is undesirable.

In our future work, we shall consider more objectives besides minimizing la-tency, for example-facilitating multi-hop forwarding among the sensor nodes, load-balancing of the network traffic etc. We shall also extend the path-planning for a WSN with multiple MDC  X  X  and multiple sinks.
 Acknowledgements. The authors would like to thank the department of Com-puter Science &amp; Engineering, Bangladesh University of Engineering &amp; Technol-ogy (BUET) for its generous support, laboratory, library and online resource facilities.

