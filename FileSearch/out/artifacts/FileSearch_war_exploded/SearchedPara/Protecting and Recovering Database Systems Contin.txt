 frequently. For example, hardware breaks, software has defects, viruses propagate, data loss by those disasters have become more dominant, accounting for up to 80% [2] of data loss. Recent high-profile data loss has raised awareness of the need to plan database systems must be continuously available and businesses also must be prepared to provide continued serv ice in the event of disasters. 
Many data protection solutions including fault-tolerance and disaster-tolerance techniques have been employed to increas e database systems availability and to reduce the damage caused by data loss, corr uption and disaster [3]. Backup [4] is the three modes: full backup, incremental backup and differential backup, all of which can be implemented offline and online. In addition, there are several solutions such as redundant disk arrays (RAID) [5], mirroring [6], snapshot [7] and replication [8]. 
However, conventional backup technologies have many drawbacks. First, offline weekly) down or completely offline, and although online backup (hot backup) allows to backup with database still running, it has to bare some performance penalty. Second, backup is time-consuming and takes a long time to recover data. Third, database systems can only be restored back to a pre-determined previous point, and data between backups are vulnerable to data loss. Recent research [1] has shown that businesses. Other solutions have most of the same drawbacks as backup. Therefore, information age. 
In order to remove backup window and resolve recovery point objective (RPO) and recovery time objective (RTO) issues, researchers present continuous data protection (CDP) [9]. CDP represents a major breakthrough in data protection and dramatically changes the data protection focus from bac kup to recovery. With CDP continuously this provides rapid recovery to any desired point in the past when disaster strikes and access to data at any point in time (APIT) [10] after recovery. CDP offers more flexible RPO and faster RTO than traditional data protection solutions which were designed to create, manage and store single-point-in-time (SPIT) [11] copies of data, thereby reducing data loss and eliminating costly downtime. 
CDP has appeared only for a short while, so it isn X  X  well understood. With our technologies aren X  X  the real CDP and are only near-CDP. Our first contribution, then, is a taxonomy of current CDP technologies and a strict definition of CDP. Our second contribution is the design of a CDP model for database systems, referred to as continuous data protection and recovery model (CDP-R). It is built on block-level and provides continuous protecting and recovering of database systems X  data. The final contribution is an evaluation of our CDP-R model, simply comparing it with other backup technologies. 2.1 Taxonomy companies, research institutions and emerging companies. There are several assessment criteria for CDP designs and we summarize the basic axes as data protection scheme, design level, storage repository and recovery mechanism. Data protection scheme. Current CDP systems implement a continuous or near-continuous data protection scheme for retrieving even the most recently saved data: 2. Near-CDP systems : do not have the detail of CDP and take snapshots of data at 
CDP syOstems can recover the primary to any point in time and near-CDP only can provide some scheduled point-in-time r ecovery. So we do not consider near-CDP in this paper. Design level. CDP systems have been implemented at the block-, file-or application-level against disasters: 1. Block-level CDP systems: operate above the physical storage or logical volume 2. File-level CDP systems : operate just above the file system. They capture and 3. Application-level CDP systems : operate directly within the specific application supporting many different applications with the same general underlying approach. It can achieve high performance and help to build a multi-platform CDP engine to paper, although file-and application-level CDP could readily be implemented. CDP data over time. CDP systems employ a distinct and dedicated node or the host itself as the storage repository: 1. Distinct storage repository : is architected in an independent location where all 2. Self-storage repository : is established on the protected host itself where changed Recovery mechanism. Recovery mechanism determines the recovery procedure and can be implemented in two modes: 1. Independent recovery : is achieved only accordin g to the storage repository 2. Dependent recovery : is achieved with the storage repository and an initial replica 
We use the independent recovery mechanism in the following text. 2.2 Definition According to CDP systems and researchers, the SNIA (Storage Networking Industry Association) CDPSIG Continuous Data Protection Special Interest Group defines CDP as  X  a methodology that continuously captures or tracks data modifications and stores changes independent of the primary data, enabling recovery points from any point in the past. X  [9]
While various CDP systems confuse us, the above definition is too simple to guide define CDP in two aspects (i.e. protection and recovery) theoretically as follows: Definition 1. () P t  X  is the data image/view of the primary P at time 0 () tt t  X  where  X  is the initial data image/view at the beginning time P from time 1 t to time 2 t . When 0 (,) P tt the procedure is called as continuous data protection (CDP) from 0 t to t . the beginning time 0 t . If the backup B receives the delta () P t  X  from the primary P at time t , () ( ) () BB P tttt  X  X   X  = X  X + where 0 t  X  X  and inductively the blocks with the same address at time 0 () tt t  X  , when |()| B t  X  is restored to the primary P and overwrites the blocks of the primary P according to the address of each block, the procedure is called as continuous data recovery (CDR) at time t . In order to protect and recover database systems continuously, we set out to design a model of continuous protection and recovery (CDP-R). The goal of CDP-R model is to keep the copy of each block-level change of the database system in a distinct storage repository and make the data of the database system available despite both hardware failures and software failures, which could exploit a continuous protection and recovery of database systems. CDP-R model is composed of client , primary and backup as shown in Fig. 1 : 
Client gives an intelligent management platform for users to operate database systems and configure CDP-R model. Primary includes database system, protector, storage and log, Backup includes repository, storage and time-index-table. The protector and the repository are main components of CDP-R model to protect and recover database systems as shown in Fig. 2 . The protector continuously captures every change of the primary and sends to the backup. The repository receives data from the primary and stores data over time in storage. 3.2 Workflow synchronously in the primary log, and the block-level data can then be written to the primary storage. Simultaneously, CDP-R model implements three-step work: 1. Capture : After the capture-module gets every block-level change of database 2. Backup : The replication-module replicates every backup record to the backup 3. Retrieve : When database system needs recovering in case of data loss, corruption 
The whole procedure of capture-backup-retrieve is implemented in the background automatically. Fig. 3 shows the state transitions of a data block in CDP-R model. CDP-R model is implemented by three key technologies (referred to as 3R) as follows: 1. Replication : To meet users X  need and fit the networks situation, the primary must 2. Repository : To store and conveniently lookup every backup record, the backup 3. Recovery : To deal with a disaster, the primary must recover from the backup. 
To capture and encapsulate the changes of database system at the primary continuously, CDP-R model can adopt Loadable Kernel Modules (LKM) on Linux or Windows Driver Model (WDM) on Windows. We won X  X  discuss this technology in more details here. 4.1 Replication Replication mode. The replication protocol plays an important role in CDP-R model. of synchronous and asynchronous. We deal with a block-level change of database system by nine steps and implement the replication protocol in synchronous and asynchronous modes as shown in Fig. 4 . write the log/time-index-table before writing the storage. We also execute several steps in parallel and solve the block-level changes by pipelining. Synchronous mode ensures that a backup record has been posted to the backup before the request of database system completes at the application-level. Database system performing an application may experience the response time degradation caused by each backup record incurring the cost of a network round-trip, but the backup is up to date. If a disaster occurs at the primary, data can be recovered from any surviving backup with minimal loss. Asynchronous mode completes an update when it has been recorded in the log and storage at the primary. The response time is shorter at the cost of the backup being potentially out of date. If a disaster strikes, decision to use synchronous or asynchronous mode depends on users X  requirements, the available network bandwidth, network latency and the number of backup servers. consistency by two means: 1. Send-queue and receive-queue : The backup records are queued temporarily in a 2. Atomic replication and atomic write : While data consistency in synchronous 4.2 Repository Time index table. When we want to recover the primary, we need select a past time records stored in the storage. It just maps t to address in the storage. In order to generate a unique fingerprint for every time, CDP-R model uses the popular, efficient hash algorithm for many security systems and its output is a 160-bit hash value. Assuming the granularity of time is microsecond and random hash values has a uniform distribution, a collection of n different times and a hash function that pair will collide, i.e. is enough for protecting common database systems, 614 365*24*60*60*10 10 n = X  and then p is less than 20 10  X  . Obviously, Sha1 is suitable for CDP-R model and the collision scenario can be ignored. 
Although it is ideal that every backup r ecord has a unique timestamp, in fact a series of backup records may have the same timestamp. For example, there may be some backup blocks with the same microsecond timestamp in current computer with the same timestamp. After receiving a backup record, repository extracts the timestamp from it and hashes the timestamp with Sha1. Then check whether the item has been in time index table. If yes, repository locates the address in the storage and collect a series of backup records with the same time. DeltaChain. We present DeltaChain to manage the storage at the backup. DeltaChain is like a link list composed of a large number of segments, and a segment has a series Peabody [12] or TRAP-Array [13]. Continuous storage increases the speed of locating the address and reduces storage fragments in Peabody which stores every version of block continuously. 
Time index
Delt a Ch a in ( S tor a ge) DeltaChain is fully initialized by 0 () P t  X  and k is equal to the number of all the data blocks of the primary, all the backup records in Segment 0 is corresponding to all the repository where 0 rij disc disc = and 0 r data is the data at the same address before being overwritten. Then the repository stores it as the rth  X  backup record to Segment 0 before storing ,, overwritten has to be replicated and stored into Segment 0 . 
The other segments have the same function, and are used to store ordinary backup records. All the backup records in a segm ent have the same timestamp. A segment increases with receiving a new backup record. 4.3 Recovery The primary faces several threat categorie s: data loss, data corruption and Data the primary and map data corruption and inaccessibility threats into data loss. 
After a failure, we can adopt one of the following continuous-data-recovery newest version of each data block in the segments from time 0 t to time i t , and send description. The pseudo-code of recovery algorithms are shown in Table 1 . 
In Table 1 , the symbol S i denotes the segment with time i t , and S is a temporary variable to keep the segment S i . The symbol B denotes the backup records that will be GetSegment(t), GetNextSegment(S), Coalesce(B,S) and Recover(B,P) are APIs supplied by CDP-R model. GetSegment(t) is used to get the segment according to time t and GetNextSegment(S) is used to get the next segment of the current segment S . Coalesce(B,S) and Recover(B,P) are very important as shown in Fig. 6 : 1. Coalesce(B,S) : is used to coalesce the backup records of B and S with the same According to the above introduction, CDP is an innovative data protection technique and different from traditional data protection technologies, such as backup, mirroring, snapshot and replication (See Table 2 ). 
CDP-R model supplies a new approach to protect and recover database by adopting the technology of CDP, and can be implemented on any platform, such Linux, Windows and Unix. Here we just give an example to evaluate CDP-R model base on Logical Volume Manager on Linux: 
If a database system (e.g. Oracle) build on CDP-R model at 8:00:00 a.m. and the time granularity of CDP-R is second, when the database system is in a disaster 14:00:00 p.m., we can restore the database system to a past time point between 8:00:00 and 13:59:59. 
In CDP-R model, by coalescing the backup records in every segment of the repository, the storage space is reduced by up to 20%. By coalescing the backup records before restoring to the primary, the transmission bandwidth is reduced by up to 42%. In additional, fast recovery is 1~1.5 times faster than full recovery. Database systems are very important and require 24x7 availability. CDP transforms keep business continuity. CDP is more comprehensive and cost-effective than any other solution, such as backup, snapshot, mirroring and replication. 
CDP-R model adopts the CDP technology to solve the data restoration time-gap based on the taxonomy and definition of CDP technology. CDP-R model synthesizes the technologies of block-level replication, repository and recovery to offer the ultimate solution. Therefore, CDP-R can provide days, weeks or months (even years) of protection with microsecond/second/minute/hour granularity. CDP-R model also can achieve the high performance and satisfy all kinds of database systems. 
CDP-R model complies with the needs of database system protection, but there still exits some future work. For example, we need to optimize the structure of DeltaChain and the recovery algorithms. Furthermore, we are developing a prototype system based on CDP-R model and hope to explore many of these avenues. Acknowledgments. This work is supported by the National Natural Science Foundation of China (60573096). 
