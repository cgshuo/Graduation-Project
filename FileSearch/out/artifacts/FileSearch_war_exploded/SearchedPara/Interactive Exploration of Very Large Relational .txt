 The grand tour, one of the most popular methods for multi-dimensional data exploration, is based on orthogonally pro-jecting multidimensional data to a sequence of lower dimen-sional subspaces and then moving continuously from one to another. By running experiments on screen and in the CAVE virtual environment, we were able to use the method for the 3D rendering of very large relational datasets where projections are made onto 3D subspaces. 3D cluster-guided tour is proposed where sequences of projections are deter-mined by centroids of data clusters. It makes inter-cluster-distance-preserving projections in the perspectives that the data clusters are displayed as separate as possible. The ex-ploration of very large datasets is supported by using vol-ume rendering through texture splatting. Volume rendering takes as input only the aggregation or part of data needed for rendering, which can be retrieved efficiently by SQL queries in an ad hoc manner while we explore or drill down large datasets. To facilitate interactive picking and brushing, a kd-tree multidimensional indexing mechanism is designed. Access methods for subspace search and range query are proposed to greatly reduce the cost of searching and picking interesting data records. Various add-on features, such as projecting variable axes and cluster similarity graphs, help further the understanding of data.
 H.2.8 [ Database Management ]: Database Applications X  Data Mining ; I.3.6 [ Computer Graphics ]: Methodology and Techniques X  Interaction Techniques ; I.3.7 [ Computer Graphics ]: Three Dimensional Graphics and Realism X  Animation, Virtual Reality ; H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval X  Clus-tering, Selection Process ; G.3 [ Mathematics of Comput-ing ]: Probability and Statistics X  Multivariate Statistics Design, Experimentation Visualization techniques have proven to be of high value in exploratory data analysis and data mining. When we talk about very large relational tables, we imply that either the tables are very wide (up to a few hundred dimensions), or very long (a huge number of records), or both. For small dataset with a few dimensions and a few records, scatter-plot is an excellent means for visualization. Patterns could be efficiently unveiled by simply drawing each data record as a geometric object in the space determined by two or three numeric variables of the data, while its size, shape, color and texture determined by other variables of the data. The ability to draw scatterplots is a common feature of many vi-sualization systems. However, conventional scatterplots lose their effectiveness as either dimensionality or the number of records becomes large.
 The ways to handle large datasets are then twofold: to deal with high dimensionality and to deal with large number of records. Many techniques, such as scatterplot matrix, par-allel coordinates, star glyphs, and dimensional stacking, are developed to visualize data of more than three dimensions. While these techniques are useful to explore moderate di-mensioned datasets, they are not intuitive for interactive exploration. To retain the nature of data records as multidi-mensional points, a good way is to project data orthogonally onto 2D or 3D subspaces which allow us to look at relational data in a geometry that is within the perceptibility of hu-man eyes. Since there is an infinite number of possibilities to project high dimensional data onto lower dimensions, the grand tour method [1, 5, 6] provides an overview of all pos-sible projections through sampling all possible planes ran-domly. By displaying a number of intermediate projections obtained by interpolation between any two projections, the entire process creates an illusion of continuous smooth mo-tion. This helps to find interesting projections which is hard to find in the original data with only low dimensional plots. A tour could be further guided by projection pursuit which examines the distribution of data and aims at helping the users to find interesting projections. For clustered datasets, the position of data clusters could be used to help choos-ing projections. The idea is to choose the centroids of four clusters and project all data points onto a 3D subspace de-termined by these four cluster centroids. The four clus-ters will then be displayed as separate as possible from each other. Furthermore, this projection is distance-preserving in the sense that the distance shown between any two of these
Permission to make digital or hard copies of part or all of this work or permission and/or a fee.

KDD 2000, Boston, MA USA  X  ACM 2000 1 -58113 -233 -6/00/0 8 ...$5.00 four cluster cen troids is exactly the same as their original distance. We call this a cluster-guided pro jection. By us-ing grand tour linking the cluster-guided pro jections from one to another with a geo desic (actually pseudo-geo desic after interp olation) path, a view er can quic kly have a good sense of the position of all data clusters by moving smo othly through all cluster-guided pro jections. This is what we call the cluster guided tour.
 Datasets could also be very large in terms of the num ber of data records. Mo dern relational databases often con tain so man y records that it is impractical to displa y interactiv ely all of them as points in a single scatterplot. Even if the dis-play of so man y points were possible, its usefulness would be diminished by overwhelming app earance and excessiv e occlusion. Previous way to deal with this problem is sam-pling. In this pap er we sho w a better way for the exploration of very large dataset by visualizing 3D densit y maps using volume rendering.
 To handle large num ber of data records, one impro vemen t to scatterplot is to dra w densit y maps instead of individual data points. The way to dra w 3D densit y map is volume ren-dering. The main idea behind volume rendering is that data points are discretized and group ed into bins. Eac h bin is a range of values for eac h of the variables. Data points belong-ing to eac h range are then categorized into eac h bin. Volume rendering tak es eac h of these bins, and displa ys them onto screen as voxels. There are man y metho ds of implemen ting volume rendering. Since the result is exp ected to represen t an amorphous cloud of colored data points, it is felt that texture splatting using Gaussian footprin ts[18] is the most natural choice.
 Volume rendering tak es as input only a set of data bins and, in eac h bin, the num ber of data records. The size of this highly aggregated data is much smaller than that of the original, making it possible to be transferred from database in an ad hoc manner. More imp ortan tly, data bins and the num ber of records in eac h bin can be retriev ed efficien tly from relational database by the SQL GR OUP BY query . To further accelerate the pro cess, the binned and aggregated data can be pre-calculated and stored as summary tables in database. Volume rendering, together with database sup-port, enables fast rendering of very large datasets. Pic king and brushing are problems for the interactiv e ex-ploration of very large datasets. Pic king and brushing are special kinds of range queries that eac h mouse clic k on screen selects a  X  X ubular X  range in the original n -dimensional space. Since the data to be selected are points in high dimensional space, it is felt that kd-tree[3] and its varian ts suc h as k-d-b-tree[12] and KD-DT[15] are favorable multidimensional in-dexing mec hanisms. Access metho d of subspace searc h and range query is prop osed to tak e adv antage of the kd-tree data structure to reduce the cost of searc hing and picking interesting data points.
 There are other issues for the interactiv e visualization of re-lational data. For example, a direct interface to databases is absolutely necessary so that only data needed for render-ing are retriev ed in an ad hoc manner while we drill down large datasets. Another issue is that man y variables are categorical rather than numerical. The values of categorical variables have no explicit ordering. This mak es them diffi-cult to map to a linear scatterplot axis. Furthermore, real world datasets have alw ays a lot of missing values[11]. Miss-ing values need special treatmen ts in data visualization, for the same reason they are specially treated in databases. There are man y previous work focusing on the visualization of multiv ariate datasets. XmdvT ool[17] is a tool integrat-ing scatterplot matrices, parallel coordinates, star glyphs, and dimensional stac king by linking alternativ e views using brushing. The idea of using sequences of lower dimensional pro jections to sim ulate higher dimensional displa y was pro-posed in [1]. An example visualization system that imple-men ted 2D pro jection and grand tour was XGobi[13]. 2D cluster-guided pro jections were studied in [8] and were im-plemen ted in CViz, whic h concen trates on 2D pro jections determined by any three clusters. There are also exam-ples of exploratory data visualization in immersiv e virtual realit y environmen ts. Virtual Data Visualizer[16] emplo ys a data organization with data arranged hierarc hically in classes that can be visualized within the virtual environ-men t. VR Gobi[14], whic h is a virtual realit y extension of XGobi, uses the C2 immersiv e environmen t for the dynamic displa y of statistical graphics. So far, the only application we have encoun tered that implemen ts volume rendering for visual data mining is the SplatViz[2] tool in the SGI MineSet soft ware.
 This pap er presen ts the n23T ool, a visual exploration tool whic h uses 3D grand tour for relational data and 3D clus-ter guided tour for data clusters. Compared with previous work suc h as CViz[8] on 2D cluster pro jections, n23T ool is capable of 3D view by taking adv antage of mo dern graphics hardw are. It allo ws tour transition between cluster views. Up to four clusters can be displa yed in a distance-preserving way in a 3D view. All these features mak e it easier to dis-cover complex patterns and holes in datasets. n23T ool is particularly capable for very large datasets through volume rendering. Selection and drill down are instan tly supp orted through interface with databases. Tw o versions of the tool have been implemen ted: one is an on-screen version; the other is a virtual realit y version using the CA VE[7] immer-sive virtual environmen t. The on-screen version supp orts stereo displa y whic h pro vides depth cues for 3D scatterplot. The virtual realit y version is more impressiv e. With the CA VE as a 3D  X  X agic can vas X , scatterplots can be dra wn in mid-air in a 3D virtual space. The n23T ool was designed as a high end tool to cater the needs for the visual explo-ration of very large datasets. It is now routinely emplo yed for database exploration, prepro cessing and analyzing clus-tering results. Grand tour is an extension of data rotation for multidimen-sional datasets. It is based on selecting a sequence of pro-jections and moving con tinuously from one pro jection to the next. By displa ying a num ber of intermediate pro jections obtained by interp olation between any two pro jections, the entire pro cess creates an illusion of con tinuous, smo oth mo-tion. This helps to find interesting pro jections whic h are hard to find with only low-dimensional plots of the origi-nal data. Furthermore, grand tour allo ws a view er to easily Figure 1: Moving 2D projections along a geodesic path in a 3D space. keep trac k of a specific group of data points throughout the journey of a tour.
 For illustration, supp ose we are to mak e a 2D tour of 3D Euclidean space(Figure 1). The most straigh t way to move from one 2D pro jection to the next is a sequence of inter-polated pro jections to move the 2D pro jection plan, or a 2-frame (a 2-frame is an orthonormal pair of vectors), to the next along a geo desic path. For 3D grand tour of n -dimensional ( n &gt; 3) datasets, in the same way, it is nec-essary to have an explicitly computable sequence of inter-polated 3-frames in n -dimensional Euclidean space. The n -dimensional data is then pro jected, in turn, onto the 3D subspace spanned by eac h 3-frame. For the shortest path to move from one 3D pro jection to another, the sequence of the interp olated 3-frames should be along a geo desic path. Mo v-ing along a geo desic path creates a sequence of intermediate pro jections moving smo othly from the curren t to the tar-get pro jection. This is a way of assuring that the sequence of pro jections is comprehensible, and also moves rapidly to the target pro jection. For 3D pro jections, a geo desic path is simply a rotation in the (at most) 6-dimensional subspace con taining both the curren t and the target 3D subspaces. This implies that some prepro jection is useful in the imple-men tation to speed up computation.
 There are various ways of choosing paths of a tour. A sim-plest way is random tour . The target pro jection in eac h step in a random tour is randomly generated. This creates a way for dynamic bro wsing of relational data by moving among randomly chosen 3D subspaces. Another straigh tforw ard way is choosing the span of any three arbitrary variables as a 3D subspace and moving from this span to the next span of another three variables. The pro jection in a span is ex-actly a 3D scatterplot. This is more than 3D scatterplots, however, because more information could be unveiled by the motion moving from one pro jection to another. This is what we call simple projection . Simple pro jection gives a way to con tinuously chec k a sequence of scatterplots of data on any three variables. Figure 2 sho ws a simple pro jection of the Adult dataset from the UCI ML Rep ository[4]. Tw o cate-gorical variables, educ ation and occup ation , are plotted with their possible values sho wn along the axes from the origin. A con tinuous variable, age , is displa yed with its mean value set at the origin and its range of values mark ed by num bers. More adv anced ways of grand tour come from exploratory statistics where data distribution is involved in choosing the path of a tour. For example, one way is to restrict paths of pro jections to principal comp onen ts and canonical variate subspace[10]. Another way constructs hill-clim bing paths that follo w gradien ts of pro jection pursuit indices[6, 9]. These techniques are efficien t ways to examine statistical significance of variables. For clustered datasets, however, we have a way, what we call the cluster-guide d tour , to sho w the structure of data clusters.
 Supp ose that we have partitioned an n -dimensional dataset into k ( k &gt; 4) clusters, and let { c j } k j =1 denote the cen troids of these clusters. Any com bination of four distinct and non-colinear cluster cen troids c a , c b , c c and c d in { c a unique 3D subspace of n -space. Let i 1 , i 2 and i 3 constitute an orthonormal basis of the 3D subspace (this could be ob-tained by orthonormalizing, for example, c b  X  c a , c c  X  c c  X  c a ). We can then compute a 3D pro jection by pro ject-ing the n -dimensional dataset onto the 3-frame ( i 1 , i This pro jection preserv es the inter-cluster distances, that is, the Euclidean distances between any two of the four clus-ter cen troids { c a , c b , c c , c d } will remain unc hanged after the pro jection. This pro jection is a righ t persp ectiv e to view these four clusters because the four clusters are visualized as separate as possible. Figure 3: A 3D cluster-guided projection where the 3D subspace is determined by centroids of 4 clus-ters 0, 1, 3, 5. The projection-determining cluster centroids are visualized as big spheres, while other cluster centroids are visualized as smaller cubes. Cluster-guided tour is a way to get cluster cen troids involved in choosing pro jection steps. Giv en k cluster cen troids, there are at most ( k 4 ) com binations of unique 3D cluster pro jec-tions. The basic idea behind cluster-guided tour is simple: Cho ose a target pro jection from ( k 4 ) possible cluster-guided pro jections, move smo othly from the curren t pro jection to the target pro jection, and con tinue. We illustrate the 3D cluster-guided tour on the Boston housing data set[4]. The dataset was clustered into 6 clusters. There are ( 6 4 ) = 15 pos-sible 3D cluster-guided pro jections. One of them is plotted in Figure 3. The 3D cluster-guided tour rev eals significan t information about the position of clusters. One of the problems of displa ying large multi-dimensional data sets with 3D scatterplot is the possibilit y of having more than one data point with the same values. These points would be dra wn in the exact same location in a scat-terplot, prev enting the view er from seeing more than one data point. Another problem is that the visual presen ta-tion of a large dataset using a scatterplot would result in millions of data points cluttered together making it nearly imp ossible for the average human to understand.
 An impro vemen t of scatterplot to displa y large num ber of data points is to dra w densit y map instead of individual data points. The way to dra w 3D densit y map is volume rendering. Volume rendering helps a view er perceiv e the densit y of data points in eac h location of a 3D scatterplot. Con ventionally , volume rendering is the direct displa y of 3D volume data. However, the volume data it has to tak e as input here are multidimensional. The multidimensional voxelized data to be rendered are obtained using binning. The tradeoff between accuracy and rendering speed is deter-mined by binning resolution. Relational table is a natural data structure for represen ting the voxelized data because of the sparsit y of data points in multidimensional space. Eac h voxel is represen ted as a record in the table. The weigh t of eac h voxel after binning is an aggregation. In most cases, it is the num ber of data points in a corresp onding bin. In some other cases, it may be the sum or even the weigh t records by the value of some other variable. We use again the Boston Housing data as an example. The first step is to bin the variables to a desired resolution. Then an aggrega-tion is performed to compute coun ts using binned numeric variables as keys. This results in the pro cessed data sho wn in Table 1. There will be at most one row (bin) for eac h com bination of variables.
 Uniform binning is used to discretize the con tinuous vari-ables. Categorical variables use unique values as bins. The binning is performed directly on database using aggregation queries. To further speed up the pro cess, a summary table can be created in database to store the binning results. Since table is used as the underlying data structure, no storage is wasted on regions with no data.
 We decided to use splatting[18] as a way for volume render-ing. Splatting pro jects voxels onto the 2D viewing plane. The pro jection of eac h voxel is appro ximated by a Gaus-sian splat, whose opacit y and colour dep end on those of the voxel. The resulting splats are comp osited on top of eac h other in bac k to fron t order to pro duce the final image. Splatting was prop osed to impro ve the calculation speed at the price of less accurate rendering. The n23T ool utilizes the splatting metho d using 2D texture splats. A high degree of accuracy is not necessary for our purp oses as compared to the rendering speed.
 Opacit y is assigned to eac h voxel as a function of its weigh t of the corresp onding bin. The function used in the n23T ool is: where  X  is the opacit y of a splat at its cen ter, weight is Figure 4: Volume rendering of a simple projection. the weigh t of aggregated data points in the bin, and  X  is a scale factor. This exp onen tial opacit y function is effectiv e in mo deling ligh t propagation through clouds of tiny ligh t-emitting spheres. The colour of the splat is determined by the average value of colors of all points in the corresp onding bin. The splats are dra wn in bac k to fron t order, at eac h bin location to form an image that appro ximates the app earance of a scatterplot of the original data (Figure 4). A slider is used to vary the value of the scale factor  X  . This allo ws global scaling of the opacit y for eac h splat to mak e an entire displa y image of rendered splats more or less transparen t. An adv antage of the n23T ool is that it has direct interface to bac kend database system. With database supp ort, the volume exploration of a large dataset nev er needs retrieving the whole dataset. The less aggregated subset of data will not be retriev ed until you select a subset of data and drill down. This pick-and-drill-do wn pro cess could con tinue until you reac h the record level when a set of individual data points are retriev ed. In this way, the n23T ool is capable of visual exploration of very large datasets. Brushing and picking are fundamen tal requiremen ts for in-teractiv e data exploration. During the journey of a tour, a view er can easily keep trac k of the movemen t of selected data points. Data points picked up can then be related bac k to the data, thus mak e it possible for further analysis suc h as launc hing another tour of selected data points or another mining pro cess for drill down. Due to the highly interac-tive nature of brushing and picking, the brute force way of searc hing all data records for matc hing points will not work for large datasets. An index and searc h strategy is needed. Figure 5: kd-tree splitting patterns: (a) Cyclic split-ting, and (b) Domain priorit y splitting.
 There exist a num ber of multidimensional indexing tech-niques. Since we tak e data as a set of static points in n -dimensional Euclidean space, it seems that kd-tree is a good choice. Binary kd-trees organize n -dimensional data for ef-ficien t searc h of nearest neigh bors. A kd-tree partitions a dataset recursiv ely by the median of the dimension with the greatest range. The  X  X ongest X  dimension is alw ays split in an attempt to keep eac h node X  X  geometric region as compact as possible. The user specifies a threshold, that is, the min-imum num ber of data records allo wed in a leaf node. The algorithm uses the threshold to decide when to stop parti-tioning a node. Eac h leaf lists the data records that satisfy the conditions implied by the path to the leaf. kd-tree is a main-memory data structure generalizing the binary searc h tree to multidimensional data. To adapt kd-trees to secondary storage, one way is to choose domains cyclically to split interior nodes(Figure 5(a)) and pac k mul-tiple interior nodes into a single page. We are better off in-cluding in one page a node and all its descendan ts for some num ber levels. Another way is to have multiw ay branc hes at eac h interior node where interior nodes look more like B-tree nodes whic h have multiple partitions along a dimen-sion(Figure 5(b)).
 Typical inputs to kd-tree searc h are a  X  X uery X  instance (a n -dimensional position) and a threshold, whic h defines the size of neigh bor. For brushing and picking on screen, how-ever, eac h mouse clic k specifies a n -dimensional  X  X ub e X  with 2 dimensions bounded by the size of the brush and the rest n  X  2 dimensions open for free 1 . Furthermore, the orien ta-tion of the brushing  X  X ub e X  will alw ays change dep ending on the move of pro jections in a tour. In suc h a case, it would be desirable to have kd-tree regions as  X  n -cubical X  as possible. The cyclic splitting pattern(Figure 5(a)) would be better than the domain priorit y splitting(Figure 5(b)). This is because that, in most cases, the former would have smaller regions to searc h for brushing and picking. It is con venien t to think of a brushing  X  X ub e X  as an n -dimensional region that satisfies a neigh borho od inequation. Brushing is to select all data points within this region. The searc h begins from the root of kd-tree. If that node is not a 1 In the case of 3D brushing and picking in a virtual realit y environmen t, 3 dimensions are bounded by a 3D brush, and the rest n  X  3 dimensions are open for free. leaf, the query region is compared to the node X  X  split point and the appropriate children that intersect with the query region are iden tified. Recursiv e call to eac h child is then made. If the node is a leaf, the algorithm chec ks whether eac h data point at the leaf is within the query region. The algorithm finally returns a list of selected data points. It is quite common for man y variables to be categorical rather than numerical. A categorical variable can be mapp ed onto a linear scatterplot axis in the same way as a numeric variable, pro vided that some order of distinct values of that variable is given along the categorical axis. Here we have sev eral options: First, the distinct values of a categorical variable may be explicitly listed. The order of the cate-gorical values being listed will be the order these values be arranged on the axis. Second, categorical values could be group ed together, reflecting the natural taxonom y of values. Third, values of a categorical variable can also be sorted alphab etically , or numerically by aggregate value of some other variable.
 The scatterplot in Figure 2 sho ws two categorical variables, occup ation and educ ation . Values of occup ation are sorted by the variable hours-p er-we ek along the left axis. The oc-cupations, farming-fishing and executive-managerial , listed at the end of the axis have the longest working hours, and private-house-servic es has the shortest. Values of educ ation are given explicitly with some of the values, suc h as Masters and Doctor ate , are group ed together.
 It is common for relational data to con tain missing values. These missing values are treated quite differen tly from one data mining algorithm to another. The remedies for deal-ing with missing values are based on the randomness of the missing data pro cess and the metho d used to estimate the missing values[11]. Simply remo ving all nulls isn X  X  a fully satisfactory solution since you significan tly bias the data. Also, assuming nulls to a certain value, for example, the mean of the variable, is generally not acceptable as this in-troduces more confusion and creates outliers. There are algorithms[11] that try to estimate a maxim um likeliho od value for eac h null. For the purp ose of visualization, we think it is better to do nothing more on missing values but to keep what it is. Null axis values for a con tinuous variable are placed below the range of the values for that variable. For a categorical variable, missing values are placed at the origin of the corresp onding axis. They are not confused with other values as all categorical values are arranged on the positiv e part of the categorical axis. In addition, null color values are sho wn as gra y, and null lab el and message values are sho wn with a question mark. In Figure 2, the value of occup ation is sometimes missing. These points app ear on the plane through the origin where the value of occup ation is zero, offset from the points that have the first occupation value. CA VE is a pro jection-based virtual environmen t that uses 3D computer graphics and position trac king to immerse view ers inside a 3D space. The CA VE allo ws multiple view-Figure 6: A snapshot of the n23T ool CAVE Version. The wireframe box indicates the CAVE X  X  physical space where data points being plotted in mid-air.
 The cube at the bottom is for brushing. ers to enter the space and share the same virtual exp erience. With the CA VE as a 3D  X  X agic can vas X , 3D pro jection of high dimensional data is rendered as a galaxy in mid-air in the virtual space (Figure 6). This helps visualize the exact 3D position of data points, sho w similarit y or dissimilar-ity between clusters, and determine whic h clusters to merge or to split further. The variable vectors, whic h sho w the con tribution to the pro jection of eac h variable, are visual-ized as lines in white color through the origin and mark ed by the names of variables at their far ends. There are two ways of interactiv e picking: brushing with a resizable cub e brush (sho wn in Figure 6); and cluster-pic king by selecting a cluster cen troid. The CA VE has plen ty of space for 3D rendering.
 The CA VE was initially designed for scien tific and engineer-ing visualization. It has no tool or library for GUI design. The n23T ool requires a user interface that is fairly com-plicated for a virtual environmen t. The interface must be designed to give the user con trol over the journey of a tour. We have tak en the approac h that a com bination of more-or-less traditional men us and more direct means of icon ma-nipulation will do the job. Con trols in the n23T ool include a panel (sho wn in the lower-righ t corner of the righ t wall in Fugure 6) and submen us for various actions and con trol-ling animation. Tools include a cub e brush for picking data points, reclustering using the k-means clustering algorithm, single step forw ard and bac kward in a guided tour, and so on. A dizzy feeling besets man y view ers of high-dimensional data pro jections and they may ask  X  X o w do I kno w what I am looking at X . In geometric terms, the task is to locate the position of a pro jection 3-frame. In XGobi[13], a visual way of con veying this information is to pro ject the variable unit vectors in n -space like regular data, and render the result together with data points. n23T ool follo ws the way used in XGobi. Examples of the ap-plication are sho wn throughout all screen snapshots in this pap er. A generalized trip od called  X  n -pod X  is an enhanced rendition of the n variable unit vectors in n -space. Variable unit vectors in the n -pod can be treated as if they were real data, rendered as lines, and lab eled by variable names in the far ends so that they are recognized as guide posts rather than data. Con tinuous variables are displa yed as lines with their means set at the origin. This is for the easy mark of both minim um and maxim um values at both ends of eac h line. Categorical variables are displa yed as rays starting from the origin. The n23T ool alw ays maps categorical val-ues onto the positiv e part of a categorical axis. The n -pod looks like a star with n unequal rays (or lines across the origin for con tinuous variables) in 3D space, eac h indicating the con tribution of a variable to the curren t pro jection. Data pro jection is a con tinuous transformation. Tw o points whic h are close with eac h other will remain close after pro-jection. However, two points whic h are close in a pro jection need not be close themselv es. To somewhat mitigate this information loss, we use cluster similarit y graph as an en-hancemen t to data pro jection.
 A cluster similarit y graph can be defined as follo ws. Let vertices be a set of cluster cen troids, and add an edge be-tween two vertices if the distance between them is less than a user-con trolled threshold. It is thus intuitiv ely clear that changing the threshold value will rev eal the difference of dis-tances among cluster cen troids. The cluster similarit y graph can be overlaid onto data pro jections. Figure 7 represen ts a cluster similarit y graph at a certain threshold. It can be seen that the Clusters 0, 1, 3 are close to eac h other, among whic h Cluster 1 and Cluster 3 are close to Cluster 4 whic h is close to Cluster 2. Cluster 5 is standalone from all others. The cluster similarit y graph adds yet another information dimension to cluster pro jections.
 Other features of the n23T ool include parallel clustering and stereo displa y. The n23T ool implemen ted multithread k-means clustering on shared memory mac hines. The man y it-erations that the clustering function has to perform is spread out over man y pro cesses (threads). The on-screen version of the n23T ool includes an option to view the scatterplot and volume rendering in stereoscopic images. This pap er discussed the n23T ool, a tool using 3D grand tour and volume rendering to visualize very large relational datasets. Grand tour creates an illusion of smo oth motion through multidimensional space. Cluster-guided tour pre-serv es distances between the cluster cen troids. It allo ws us to capture the inter-cluster structure of complex relational data. Volume rendering using texture splatting enables the Figure 7: A cluster similarit y graph adds yet an-other information dimension. visual exploration of very large datasets. Brushing, interac-tive picking and drill down are well supp orted by the kd-tree index and the access metho d for subspace searc h and range query . With database supp ort, only aggregation or part of data that are needed in rendering are retriev ed. Categorical variables are pro cessed in the same way as con tinuous vari-ables, pro vided that the orders of their distinct (or group ed) values are listed explicitly or sorted numerically by aggre-gate value of some other variable. A CA VE virtual realit y environmen t is at our disp osal for 3D immersiv e displa y. The use of the CA VE virtual environmen t maximizes the chance of finding patterns. Add-on features and interaction tools invite view er X  X  interaction with data. This approac h of multidimensional visualization pro vides a natural metaphor to visualize large datasets and data clusters by mapping the data onto a time-indexed family of 3D natural pro jections suitable for human eye X  X  exploration.
 The n23T ool scales well to large datasets. The computa-tional complexit y of tour is linear to the num ber of vari-ables. The num ber of variables matters only in calculating dot pro ducts whic h has a linear complexit y to the dimen-sionalit y of argumen ts. Making pro jections and scatterplots have a computational complexit y linear to the num ber of data points. This is in the sense that all data points have to be pro jected one by one. With volume rendering, this complexit y can be greatly reduced. Whatev er how big an original dataset is, volume rendering tak es the binned and aggregated relational data as input.
 The n23T ool represen ts a new data mining strategy that al-lows users to understand both the pro cess of mining and the data at hand. The cluster-guided tour is a way to use data mining as a driv e for visualization, that is, clustering iden tifies homogenous sub-p opulations of data, and the sub-populations are used to help design the path of a tour. The same principle applies to other data mining techniques, for instance, to iden tify the significan t rules pro duced by classi-fication and rule induction. We hop e that the n23T ool will be useful to visually explore results generated by other data mining techniques. This remains as one of the future work. [1] D. Asimo v. The grand tour: A tool for viewing [2] B. G. Bec ker. Volume rendering for relational data. In [3] J. L. Ben tley . Multidimensional binary searc h trees [4] C. L. Blak e, E. Keogh, and C. Merz. UCI rep ository of [5] D. Cook and A. Buja. Man ual con trols for [6] D. R. Cook, A. Buja, and J. Cabrera. Grand tour and [7] C. Cruz-Neira, D. J. Sandin, T. DeF anti, R. Ken yon, [8] I. S. Dhillon, D. S. Mo dha, and W. S. Spangler. [9] J. Friedman and J. Tukey. A pro jection pursuit [10] C. Hurley and A. Buja. Analyzing high-dimensional [11] R. Little and D. Rubin. Statistic al Analysis With [12] J. T. Robinson. The K-D-B-tree: A searc h structure [13] D. F. Swayne, D. Cook, and A. Buja. XGobi: [14] J. Symanzik, D. Cook, B. D. Kohlmey er, U. Lec hner, [15] D. Talb ert and D. Fisher. Exploiting sample-data [16] R. van Teylingen, W. Ribarsky , and C. van der Mast. [17] M. Ward. High dimensional brushing for interactiv e [18] L. Westo ver. Footprin t evaluation for volume
