 We consider a distributed information system that allows autonomous consumers to query autonomous providers. We focus on the problem of query allocation from a new point of view, by considering consumers and providers X  satisfac-tion in addition to query load. We define satisfaction as a long-run notion based on the consumers and providers X  preferences . We propose and validate a mediation pro-cess, called SBMediation ,whichiscomparedto Capaci -ty based query allocation. The experimental results show that SBMediation significantly outperforms Capacity ba -sed when confronted to autonomous participants.
 H.2.4 [ Database Management ]: Systems  X  Distributed databases, Query processing ; H.4.0 [ Information Systems Applications ]: General Economics, Management, Performance Autonomous participants, participants X  satisfaction, query allocation, imposition, payment
We consider a distributed information system with a me-diator that enables consumers to access distributed informa-tion providers through queries [5]. Consumers and providers (for clarity, we refer to both together as participants) are au-tonomous in the sense that they are free to enter and leave  X  Work partially funded by ARA  X  X assive Data X  of the French ministry of research (Respire project) and the Eu-ropean Strep Grid4All project.  X 
This author is supported by the Mexican National Council for Science and Technology (CONACyT).
 Copyright 2007 ACM 978-1-59593-803-9/07/0011 ... $ 5.00. the system at will and do not depend on anyone to do so. Then, the main function of the mediator is to allocate each incoming query to the providers that can answer it. Much work in this context has focused on query load balancing (QLB) [3, 8]. This is obviously important for the efficiency of the system. However, participants may have certain ex-pectations with respect to the mediator, which are not only performance-related.

Providers X  expectations reflect their preferences in per-forming some queries rather than others. For example, aprovider p c could represent a pharmaceutical company, which wants to promote a new insect repellent. Thus, it is more interested in treating the queries related to mosquitoes or insect bites than general queries. Once the advertising campaign is over, the provider X  X  preferences may change. Consumers expect the mediator to provide them with in-formationthatbestfitstheir preferences . However, prefer-ences are usually considered as private data by participants, since revealing them means revealing strategies. Thus, par-ticipants express their preferences via an intention notion, which can combine different criteria such as preferences and load . For instance, a provider may not intend to perform queries (even if it prefers them) because of local reasons, e.g. by overload . Since it is autonomous, a participant which is dissatisfied too long may just leave the mediator. Intuitively, the system satisfies the participants if the mediator meets their expectations.

In this context, query allocation is a challenge for sev-eral reasons. First, to our knowledge, there is no definition of satisfaction to characterize how well the system meets the participants X  expectations in the long-run. Economi-cal models consider utility and rationality [7], but they are not long-run notions. Second, participants X  expectations are usually contradictory. Third, the query demand should be satisfied even if sometimes consumers and providers do not desire to deal with providers and queries, respectively. Fi-nally, participants X  departures may have consequences on the functionalities provided by the system. Providers X  de-parture may mean the loss of important system capabilities and consumers X  departure is a l oss of queries for providers.
After giving some preliminary concepts in Section 2, we present the main contributions of this paper. In Section 3, we define the notion of participants X  satisfaction that al-lows knowing whether the query allocation method meets the participants X  expectations. We then propose in Section 4 a query allocation mediation process, called SBMediation , with the objective of satisfying participants by finding not only relevant providers (i.e. interesting results) to con-sumers, but also finding interesting queries to providers. In Section 5, we compare, through experimentation, the SBMediation  X  X  behavior to a classic QLB method, namely Capacity based (e.g. [3]). We mainly study both processes from a satisfaction point of view, and analyze the impact on performance of the participants X  autonomy. Finally, we conclude in Section 6.
The system consists of a mediator, m ,ofasetofcon-sumers, C , and of a set of providers, P . Providers are heterogeneous in terms of capacity, thereby some providers are more powerful than others and can treat more queries per time unit. Providers have a finite capacity to perform queries, which denotes the number of computational units they can have. The utilization of a provider p  X  P at time t , U p ( t ), denotes how much it is loaded w.r.t. its capacity at that time. Queries are formulated in a format abstracted as atriple q = &lt;c,d,n&gt; such that q.c  X  C is the identifier of the consumer that has issued q , q.d is the description of the task to be done, and q.n  X  N  X  is the number of providers to which q.c wishes to allocate q .Set P q denotes the set of providers registered to a mediator m , which does not appear in the notation for simplicity, and that can treat the query q . There is a large body of work on matchmaking, see e.g. [2, 4] which we could simply reuse. The allocation of some query q is denoted by a vector All
As we assume all incoming queries should be treated, this leads to q.n &gt; N q , the consumer q.c gets N q results instead of q.n .
Two kinds of satisfaction could be considered: (i) the sat-isfaction of a participant with what it gets from the system, e.g. a consumer that receives results from the providers it wants to avoid is simply not satisfied and (ii) the partic-ipant X  X  satisfaction with the job that the query allocation method does for it, e.g. a provider that performs queries it does not want is not satisfied with the query allocation method if there exist queries of its interests that it does not get. Because of space limitations, we just consider the for-mer in this paper, which we simply call satisfaction .The satisfaction notion may have a deep impact on the system, because participants may decide whether to stay or to leave the system based on it.

We assume that participants have a limited memory ca-pacity and regularly assess only their k last interactions with the system. Notice that the k value may be different for each participant depending on its memory capacity, but also on its strategy. For simplicity, we assume that they all use the same value of k . Thus, we define the satisfaction of par-ticipants over their k last interactions. Let us make two general remarks. First, the participant X  X  satisfaction may evolve with time, but for the sake of simplicity, we do not in-troduce time in our notations. Second, the following presen-tation is completely symmetrical for the participants X  inten-tions as well as for their preferences . However, for simplicity, we develop the following characteristics only for preferences , whose values are in the interval [  X  1 .. 1].
Intuitively, the consumer X  X  satisfaction is useful to answer the following question: how far the providers that have dealt with the last queries of a consumer meet its expectations? This notion is based on the memory of a consumer, which is denoted by set IQ k c .The preferences of a consumer c  X  C to allocate its query q to a each provider p  X  P q are stored in vector P ing its query q is related to those providers that performed q , which are denoted by set c P q . The average of preferences expressed by the providers in set c P q is an intuitive technique to define such a notion. Nevertheless, a simple average does not take into account the fact that a consumer may desire different results. The following equation takes into account of this point using n instead of || c P q || . where n stands for q.n . Values of function  X  s ( c, q )areinthe interval [0 .. 1]. Thus, we define the satisfaction of a consumer as the average of its obtained satisfactions concerning its k last queries.

Definition 1. Consumer Satisfaction
Its values are between 0 and 1. The closer the satisfaction to 1, the more a consumer is satisfied.
Intuitively, with this notion, we strive to answer the fol-lowing question: how well the last queries that a provider has treated meet its expectations? To define this notion, each provider tracks its shown preferences to perform the k last proposed queries in vector P queries to a provider p are denoted by set PQ k p .Conversely to a consumer that always receives results at each interac-tion, a provider does not receive all queries that have been proposed to it. Hence, a provider cannot evaluate its sat-isfaction at each interaction. Thus, we define the satisfac-tion of a provider p  X  P as in Definition 2, where set SQ ( SQ k p  X  PQ k p ) denotes the set of queries that provider p performed among set PQ k p .

Definition 2. Provider Satisfaction Its values are in the interval [0 .. 1]. The closer the value to 1, the greater the satisfaction of a provider.
The satisfaction balanced mediation ( SBMediation )as-sumes that the consumers in the system show their inten-tions , denoted by vector providers keep them private. Instead, providers bid on queries, which is a means to reflect their intentions .Con-sidering the allocation of some query q , the providers in P bid on q . The bids are represented by a vector  X   X  B [ p ]  X  R for all p  X  P q . If it is positive, the higher the bid is, the more p wants to be allocated q . If it is negative, the lower it is the less p wants to treat q . Intuitively, provider p  X  X  bid reflects its intention to perform q . This should lead to the providers X  satisfaction. However, if only bids are con-sidered, the consumer may be dissatisfied either because its intentions w.r.t. providers are not considered (when it gets answers from providers it doesn X  X  want) or because some queries are not performed (because no provider wants to treat them). Hence, to satisfy the consumer, SBMediation : (i) directly considers the consumer X  X  intentions ( imposes the query when not enough providers want to per-form it [9]. Processing SBMediation for some query q , amounts to computing (i) All defines all the  X  X onetary X  transfers that occur among the providers in P q . In both steps, bids and consumer X  X  inten-tions have to be balanced to ensure satisfaction.
Query q is allocated to the min ( n, N q )  X  X est X  providers, which are given by vector of ranking iff p is the best ranked, ranked and so on. Hence, All i  X  min ( n, N q ). Vector levels
Definition 3. Vector of providers X  levels  X  p  X  P q ,with  X   X  [0 .. 1] ,  X   X 
L [ p ]=
Parameter  X  reflects the relative im portance the mediator gives to the intentions or the bids. A competition occurs when the number of providers with a positive bid is equal or higher than n , or else there is an imposition.
Unlike an usual auction mechanism, bids cannot be di-rectly compared, because of the consumer X  X  intentions . Thus, to calculate the payment we define the theoretical bid (  X   X 
B Th ( p, l )), which corresponds to the amount that p should bid for reaching level l .With  X  =0and  X  =1if l  X  0, and  X  =  X  1otherwise, competition case, the payments are calculated in the spirit of a generalized Vickrey auction, except that the selected providers pay the amount they should bid to reach the level of the first unselected provider. In an imposition case, the-oretical bids are used to define what each of the providers owe due to the imposition of some of them.
B Th ( p, l )=  X max (((  X   X  l ) 1  X  (  X   X  CI q c [ p ]+1) The money used in the whole system is purely virtual . We could speak of tokens as well, which are used to regu-late the system and which are not linked to any particular business model. Also, for the system to be correctly reg-ulated, we must define how the money circulates. In fact, the providers spend and earn money through the mediator only by (i) bidding on queries and (ii) paying to compensate other providers that have been imposed. They earn money when they are imposed by the process. The mediator never looses money and even tends to accumulate some, thus mak-ing the providers poorer and poorer [1]. This could distort the mediation process or even block the system. Hence, this piled up money is regularly redistributed to the providers, in a equitable way. From the providers point of view, this is another, regular, way of earning money.
Once a provider p obtains its intention to perform query q (denoted by function PI p ( q )) [6], it proceeds to work out its bid to perform it. Intuitively, the bid is the product of its intention by its current money balance, denoted by bal Nonetheless, such a simple procedure may lead p to spend all, or almost all, its money on only one query. Thus, to avoid so, p offers at most only a pre-defined percentage of bal p , denoted by the constant 0 &lt;c 0  X  1. We formally define the providers X  bid in Definition 4, where constant c is set to the initial money balance of a provider. Definition 4. Aprovider X  X Bid
The idea behind above definition is that a provider always sets positive bids when it desires to perform queries and it is not overutilized , otherwise it sets a negative bid. This allows a provider to preserve its preferences while good response times are also ensured to consumers.
Our main objective is to evaluate, from a satisfaction point of view, how well SBMediation operates.
We built a Java-based simulator that models a mono-mediator distributed information system following the me-diation system architecture presented in [1]. We compare the SBMediation process to Capacity based one [3, 8], which is a well-known approach, in distributed informa-tion systems, to balance queries among providers. Capa -city based allocates queries to those providers that have the most available capacity amongst the set P q of providers. For SBMediation we set  X  =0 . 5, which means that the consumer X  X  and providers X  interests are given the same im-portance for allocating queries. In all the simulations, the number of consumer and provider sites is 200 and 400 re-spectively. In our experiments, the consumer X  X  preferences denote their intentions , while the provider X  X  intentions are computed as defined in Section 4.3. To simulate high auton-omy in our experiments, we randomly obtain the consumers X  preferences between 0 and 1, and the providers X  preferences between  X  1 and 1. We assume that providers decide to leave the system if their satisfaction is equal or smaller than 0 . 3, which is a very low threshold.
We analyze SBMediation from two points of view: satis-faction and performance . We also validated SBMediation regarding QLB, which results show that, for workloads from 10% to 60% of the total system capacity (i.e. the aggre-gate capacity of all providers), SBMediation approach is under and so worse than Capacity based one. Nonethe-less, we observed that, for workloads from 60% to 100% of the total system capacity, SBMediation almost ensures the same QLB than Capacity based . This is because, for high workloads , providers start to pay more attention to their uti-lization . However, we do not present neither discuss further such results by lack of space in this paper.

Concerning satisfaction , we observed through our experi-ments that participants X  satisfaction is almost the same for different query arrival rates (from 10% to 100% of the total system capacity). By this fact and space reasons, we only present the satisfaction results for a query arrival rate of 100% of the total system capacity. On the one hand, con-sumers benefit from more paid attention to their intentions by SBMediation than Capacity based (see Figure 1(a)). Consumers are always more satisfied with SBMediation be-cause Capacity based proceeds in a blind way as far as this point is concerned. On the other hand, providers are also al-ways more satisfied with SBMediation than Capacity based (see Figure 1(b)). This demonstrated that SBMediation gives in average interesting queries to providers and Capa -city based punishes them with uninteresting ones. Notice that, the values of the providers X  satisfaction suffer from greater oscillations than those of consumers, because of nat-ural competition of providers for performing queries.
Now, we proceed to study the impact on performance of the providers X  autonomy. We observed during our experi-mentations that while Capacity based looses in average 60% of providers for all query arrival rates, SBMediation looses only a 27% of providers! Indeed, such provider X  X  departures are reflected on the ensured response time 1 .Weobserve in Figure 1(c) that SBMediation significantly outperforms Capacity based , which cannot ensure good response times. Therefore, SBMediation can scale up when confronted to autonomous providers while Capacity based cannot.
In this paper, we addressed the query allocation problem in distributed information systems from a new point of view, by considering not only query load but also participants X  satisfaction . Our work brings several contributions.
First, we proposed the satisfaction notion that reflects, in the long run, whether participants X  expectations are met by the query allocation method. This definition is original since it is independent of how participants compute their intentions and how the mediation process considers them.
As is conventional, it is defined as the elapsed time from themomentthataquery q is issued to the moment that the q.c site receives the response of q .
 Second, we propose a mediation process, called SBMediation , that considers the participants X  intentions while allocating queries. We discussed how query allocation and invoicing steps leads to participants X  satisfaction .The originality of SBMediation is to satisfy both participants X  expectations and query demand.

Finally, we evaluated and compared, through experimen-tation, the behavior of SBMediation to the behavior of Ca -pacity based .Wedemonstratedthat SBMediation signif-icantly outperforms Capacity based . We showed that con-sumers and providers are, in general, very satisfied with SBMediation . This is not the case for Capacity based which suffers from several providers X  departures due to dis-satisfaction. Furthermore, the results demonstrate that SBMediation can scale up in these systems while Capa -city based cannot. Finally, since SBMediation considers the consumers X  intentions and providers X  bids without any consideration about how they are computed, SBMediation is self-adaptable to the changes in their expectations.
