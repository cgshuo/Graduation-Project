 This paper presents a set of algorithms used for music recom-mendations and personalization in a general purpose social network www.ok.ru , the second largest social network in the CIS visited by more then 40 millions users per day. In addi-tion to classical recommendation features like  X  X ecommend a sequence X  and  X  X ind similar items X  the paper describes novel algorithms for construction of context aware recommenda-tions, personalization of the service, handling of the cold-start problem, and more. All algorithms described in the paper are working on-line and are able to detect and ad-dress changes in the user X  X  behavior and needs in the real time.

The core component of the algorithms is a taste graph con-taining information about different entities (users, tracks, artists, etc.) and relations between them (for example, user A likes song B with certainty X , track B created by artist C , artist C is similar to artist D with certainty Y and so on). Using the graph it is possible to select tracks a user would most probably like, to arrange them in a way that they match each other well, to estimate which items from a fixed list are most relevant for the user, and more.
In addition, the paper describes the approach used to esti-mate algorithms efficiency and analyze the impact of differ-ent recommendation related features on the users X  behavior and overall activity at the service.
 [ Information Systems ]: Personalization, Collaborative fil-tering, Social recommendation Algorithms, Case Study musical recommendations, personalization, random walk
The success of nearly all Internet projects nowadays highly depends on how much value can they provide for the user re-quiring as less efforts as possible. Recommender systems are one of the approaches used to increase  X  X alue for effort X  rate. By analyzing user activity in the past a good recommender selects items which are most relevant to the current user X  X  needs increasing user satisfaction, loyalty and the revenue of the project. Due to the high demand for the recommender systems in the industry, there is a very large field of research works in this area.

The most commonly used recommenders are collabora-tive [2, 6]  X  they analyze users behavior in the past and mine correlations between items and users. However, there is also a growing interest in the content based [7] and social [8] recommendation algorithms, in order to address limitation of the collaborative algorithms caused by the data sparsity and the  X  X old-start problem X . It is now clear that none of these approaches is perfect and the best would be to combine benefits from all three worlds.

This paper proposes a composite approach for the rec-ommender systems based on a taste graph which combines all data mined from the history of users X  activity, content metadata and social network. Vertices of the graph repre-sent different entities: users, tracks, artists, etc. Edges of the graph represent relations between entities: a user likes a track, an artist is similar with another artist and so on. All edges are weighted according to the certainty of the re-lation and all weights are normalized in order to produce a stochastic system .

The algorithms described in the paper are applied for the music service of  X  X K X  ( www.ok.ru )  X  a general purpose so-cial network, which is the second largest social network in the CIS used mainly for fun and communication with rich media services. Daily audience of the network is more than 40 millions users mainly from the Russian Federation, East-ern Europe and Middle Asia.
The taste graph for musical recommendations consists of the following parts: users X  preferences, artists X  similarity, tracks X  similarity and artists X  tracks.

Users X  preferences, in turn, are composed from different parts. All the history of user playbacks is recorded into a data warehouse and aggregated at a daily basis. Further-more, there is a running window of the 1000 last played tracks with the time stamps in a real-time storage which is also considered. In addition to the playbacks history there is a real-time storage of the users X  custom play lists to consider.
The artists X  similarity is created by an analysis of play-backs history. Analysis is done in multiple steps: first of all from a set of all artist X  X  tracks representative tracks are selected, then playbacks for these tracks are aggregated in order to get user X  X rtist matrix. Using a simple correlation measure artist X  X rtist matrix is constructed and then more precise correlation measure is applied iteratively to artist X  artist matrix to refine it. Finally, outliers filtration algo-rithms are applied to the matrix and the top similars are selected.

For the tracks X  similarity matrix for each pair of tracks A and B an amount of playbacks from the same user in the scope of limited time window is counted. Than the baselines are applied in order to address tracks popularity and results are normalized. In the end outliers filtration is applied and the top similars are selected.

The artists X  works are selected from the music catalog meta data which keeps mapping from track to its main artist and overall rating of the tracks in the system is used as a weighting function. Track ratings are analyzed in dynamics in order to put tracks with higher interest recently above others.

With the taste graph recommendations can be constructed using random walk with restart [5]. The main idea is to tra-verse graph randomly starting from the user X  X  node with the probability  X  to restart at each step. Given initial vector of the user X  X  preferences random walk recommender finds a fixed point of x =  X   X  x + (1  X   X  )  X  next ( x ) also known as the steady-state probability distribution . Items with higher steady-state probability are most likely to be relevant. This approach can be used to solve another recommender X  X  task extend list . In this case the content of the list is chosen as the initial state of the walk and personalization technique described below can be used to improve results considering user X  X  preferences.

Taste graph can be used to estimate the relevance of a set of items I (search result, top tracks, etc.) for user u . This could be done by traversing the graph from user preferences vector in a limited number of steps counting all the visits of the vertices from target vector. The vertices with higher number of more probable visits are considered as more rel-evant for the user.

Each time user opens the radio he would like to get a new sequence which is relevant, coherent, diverse and novel. In order to achieve that we implemented random pick with re-jection . Items are picked randomly from the weighted list and each selected item is challenged by a probabilistic rejec-tion algorithm, which depends on multiple factors.

The most important rejection factors are based on the previous presence . Presence of item itself can be covered by a simple  X  X es or no X  factor prohibiting repeated inclusion of the item. Presence of other works from the item X  X  artist can be considered in two dimensions: the overall presence and the distance from the previous entry. The overall pres-ence is modeled as an exponentially descending factor and the distance to previous entry factor is modeled as inversed exponential descend.

While previous presence rejection factors increase diver-sity and novelty of the recommended sequence, coupling with nearest predecessors factors increase coherence of the sequence. The main idea here is to estimate the weight of the paths between item v and its nearest predecessors in the sequence using the taste graph which could be done by using the personalization technique.

In order to provide value for the user, recommended music must address current context the user is in now (working, having a dinner or playing with his kids). The problem of context awareness is explored in [1] and two techniques were adopted to generate contextual recommendations: contex-tual pre-filtering of user X  X  preferences and contextual post-filtering of the generated recommendations.

The filtering is done by analyzing all paths of length N starting from the context set and ending in the vertices of fil-tered set . Three measures are collected: count of the paths, sum of weights on the all paths and the weight of the best path. Vertices reached high enough limit for at least one of the measures are selected as the input for recommenda-tions generation (when doing pre-filtering) or randomization algorithm (when doing post-filtering).

The selection of the context set is done by the user himself, but he is provided with a bundle of automatically generated sets based on user preference clustering . After experiment-ing with multiple clustering algorithms, we ended up using affinity propagation [3] with common neighborhood subgraph density [4] as a similarity measure.

When a new user joins the system demographical infor-mation is used to support him at the beginning. All users are split into segments depending on their age, sex and re-gion. Behavior of the users in the scope of a demography group is analyzed in order to create a demography profile . When a user has no own preferences, best matching demog-raphy profile is used instead. Even if user already has some preferences, but not that much, then his own preferences are mixed with demography profile.

When new item is added to the system it becomes the most interesting candidate for being recommended. How-ever, due to the lack of statistics it has only a few links with other items and low overall rating, thus it is unlikely to be recommended. In order to identify relevant new items re-cently added content is analyzed and activity around them is compared to the time they spent in the system. In or-der to boost these items in recommendation the weight of the corresponding artist X  X rack link is set to a very high level comparing to other links from this artist.
One of the most common approaches to evaluation is the offline analysis based on the historical data [9]. It is simple and cheap, but has an inherent drawback  X  recommender proposing items user probably knows always get higher score then the recommender proposing relevant items user not likely knows and can X  X  find them himself. An alternative to offline analysis chosen in this work is an online experi-ment either on a selected subgroup of the users, or on all of them. the main page comparing to clicks.
Personalization of the main page (the list of 100 songs user sees after entering the music area) was the first significant feature based on the recommender launched at 2012-11-16. Figure 1 shows user activity trends during the 6 months passed after the launch. Three main indicators are collected: 1. Amount of playbacks from the main page comparing 2. Amount of  X  X ikes X  from the main page comparing to 3. Amount of playback from the main page comparing to  X  X y music X  is the list of the user X  X  favorite tracks, it is the most popular list in the system and is used as the measure of overall level of activity. In this perspective the first indica-tor shows the relevance of the content, the second indicator shows the novelty and the third shows the users X  confidence. Following periods are highlighted: 1. Main page contains top tracks based on the all users 2. Personalization enabled selecting top 100 tracks for a 3. Size of the underlying list increased to 1500. 4. Enabled suppression of the known items ( w 0 set to 5. Changed the underlying list preparation algorithm. 6. Track known by a user removed from the main page. 7. Full removal disables, Gaussian noise introduced into 8. Strength of the known tracks suppression decreased, 9. Use of demography data enabled for the new users.
According to the first two charts at the figure 1 person-alized main page performs two-three times better then the non-personalized variant. During initial experiments (stages 2-5) each time settings of the personalization were adjusted the user activity at the main page increased (users seen new content there), but a downward trend emerged after few days (users got used to what they see). Stage 6 showed that the strong filtering of known content increases novelty (amount of likes increased), but relevance and the users X  in-terest decreased (playbacks dropped). Replacement of the strong filtering with a lighter suppression (known content still might appear, but with a decreased weight) and intro-duction of the Gaussian noise at the stage 7 changed trend for likes to upward and for playbacks to sideways. Increas-ing the underlying list size and using demographical data we achieved upwards trends in both areas.

The third chart at the figure 1 shows the evolution of the users X  confidence in the content of the main page. For lists users are confident in they tend to turn playback on with a click and listen, but for the lists with low confidence they tend to control playbacks thoroughly. With the per-sonalization enabled the users X  confidence increased slowly and without downward trend. Attempts to increase novelty (at stages 6 and 7) increased the amount of clicks, but it is more an indication of the increased curiosity then of the decreased confidence. The confidence chart also shows that at weekends users tend to produce more clicks.
Recommender systems and personalization are a crucial tool for nearly all kind of web sites. For www.ok.ru intro-duction of personalization for the content of the main page in the music area has increased user activity there threefold. This shows that the common recommender X  X  use case  X  X ec-ommend a sequence X  is not the only interesting case. Thus, modern industrial recommender must be flexible enough to address different tasks and to employ the information of the different kinds. Orchestrating multiple recommenders can address this challenge, but at the cost of increased compu-tation complexity.

Taste graph described in this paper has many of the de-sired properties: it can include data of different kind in a sin-gle model and support different kind of algorithms with rea-sonable computational complexity and immediate reaction to the changes in the user behavior. The results achieved at www.ok.ru are very promising in terms of both increased user activity and the recommender X  X  non-functional proper-ties (computational efficiency, scalability and flexibility). [1] G. Adomavicius and A. Tuzhilin. Context-aware [2] C. Desrosiers and G. Karypis. A comprehensive survey [3] D. Dueck. Affinity propagation: clustering data by [4] Y. Kang and S. Choi. Common neighborhood [5] I. Konstas, V. Stathopoulos, and J. M. Jose. On social [6] Y. Koren and R. Bell. Advances in collaborative [7] P. Lops, M. Gemmis, and G. Semeraro. Content-based [8] A. K. Milicevic, A. Nanopoulos, and M. Ivanovic. [9] G. Shani and A. Gunawardana. Evaluating
