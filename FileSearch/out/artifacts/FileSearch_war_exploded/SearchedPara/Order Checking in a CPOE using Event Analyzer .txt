 In this paper we present our experience in applying Event Analyzer, a processing engine we have developed to extract patterns from a sequence of events, in the checking of medical orders of a CPOE system. We pr esent some extensions we have implemented in Event Analyzer in order to fulfill the needs of those orders checking, as well as some performance evaluation results. We also outline some problems we are facing now to adapt Event Analyzer X  X  pattern detection engine to support streaming orders in an on-line CPOE checking system. H.2.m [ Database Management ]: Miscellaneous. Experimentation. Sequential pattern, pattern detection, order checking. Recently, the number of Japanese hospitals that have introduced a complete electronic health record system (EHS) has largely Health, Labor and Welfare. However, almost all medium and large sized hospitals are already using computer-based physician order entry (CPOE) systems for a long time. CPOE systems allow the physician to directly enter his/her medical orders so that those orders are communicated to other hospital services such as laboratories, radiology, pharmacy, etc. The potential benefits of CPOE systems include proce ss improvement, more rapid implementation of physician orders , optimal use of physician time, cost savings, and reduction of medical errors in order entry [8]. Modern CPOE systems can also provide the ordering physician with relevant information such as references to medication standards and potential contradicti ons at the time of order entry, helping him/her to make better or dering decisions. Statistics show that CPOE systems reduce medica tion errors and, in addition, lower adverse events, reduce utiliza tion and decrease variations in care when properly utilized. However, as reported in [8], there is much room left for improvement yet. Aiming at fully utilizing the ordering information of an CPOE system to improve patient safety, we have worked with the medical staff of a private medium-sized hospital and found that the examination of only a single or der and its cross-reference with patient and drug master data is not enough in many cases. If the checking of contextual correlation of those orders was performed, much more medical errors could be avoided. In this paper we present e xperiments we are conducting in supporting more complex checks of sequences of medical orders. In Section 2 we review Event Analyzer, a sequential pattern checking engine we have developed and that is being used in BI solutions. We show how some of those checks necessary in CPOE systems were implemented by us ing the commercial version of Event Analyzer, and how we extended Event Analyzer to support others. In Section 3 we present the types of order checks we have implemented to detect potentially dangerous situations that require the physicians to be no tified. We also show some evaluation results with comparis on with another implementation using queries on a relational database system whenever possible. Then, in Section 4 we present problems we are facing to adapt Event Analyzer to support stream ing orders in an on-line CPOE checking system. Finally Secti on 5 presents some concluding remarks. Fujitsu X  X  Interstage Suite is a broad family of modular and flexible software products. As illu strated in Figure 1, Interstage Navigator is Fujitsu X  X  Business In telligence software platform and one of the core applications of Interstage Suite. Interstage Navigator Central Server pr ovides data warehouse (DWH) building functions such as aggregation of operational data. Interstage Navigator Explorer Se rver consists of interrelated components that closely collaborate to offer complete and integrated Business Intelligence solutions. In many such Business Intelligence solutions, the examination of only a record that represents a single event is not enough. A collective view of the events, with the determination of the relationships between them is usually necessary. The traditional on-line analytical processing (OLAP) that aggregates facts grouped by dimensions can be very useful for the executive managers to have a global view of some aspects of the business. However, for a more precise problem X  X  identification, an analysis of the sequential nature of the data that is represented by an ordering relationship between the ev ents is often necessary. Much of the events can be ordered by time, by linear positions, or by integer rankings. We use the term se quence to refer to events that are ordered due to such a relationship. Traditional relational databases provide no abstraction of ordering in the data model, so they cannot efficiently handle queries based on the logical sequentiality in the data [1],[5],[6],[7]. Event Analyzer is Interstage Navigator Explorer Server X  X  component that detects all the events in a sequence that match pre-specified patterns X  conditions [2]. It was first developed and applied to Business Intelligence solu tions [3]. However, we have found that it is general enough to be applied in a broader range of applications including the healthcar e as described in this paper. Let R be a set of records composed of n attributes {a 1 , a By specifying attribute a k as the Group Coordinate (GC) and a the Order Coordinate (OC), where 1  X  k  X  n, 1  X  l  X  n, and k  X  l , then R is partitioned according to the GC into a set of partitions and each partition X  X  records are sorted according to the OC. This results in a set of sequences of events that are ordered on the a values, where there is one sequence for each value of a k Let X  X  suppose a set of records with four attributes {patient, day, test, result} that contains info rmation about each patient X  X  test results. By specifying patient as th e GC and day as the OC, in the example illustrated in Figure 2, we logically have three sequences of events. One sequence gives the result of Mary X  X  tests, another sequence gives the results of John X  s tests, and the third sequence gives the results of James X  X  tests. For the set of sequences defined by the specifications of the GC and OC, Event Analyzer allows the definition of an m-pattern [e  X   X  i,i +1 represents the distance relationship between consecutive events e i and e i +1 . This distance relationship specifies whether two consecutive events e i and e i +1 of the pattern occur simultaneously, contiguously, or non-contiguously in the input sequence of events. Specifically: (a) e i  X  e i +1 means that both events occur simultaneously; (b) e i  X  e i +1 means that the events ar e contiguous; that is, e occurs immediately after e i ; 
Figure 2. Transforming a set of events into three sequences of (c) e i  X  e i +1 means that e i +1 occurs after but not necessarily immediately after e i . Each event e i (1  X  i  X  m) of the pattern satisfies some intra-event conditions; that is, some conditions for the values of any of the the examination of the event its elf. Besides these intra-event conditions that specify how different events in the pattern are inter-related with specifications for the values of any of the attributes a j for 1  X  j  X  n, j  X  k , where a k is the GC. A special inter-event condition gives the window size ws of the pattern; that is, the maximum distance allowed between the first event e 1 and the last event e m of the pattern, i.e., ws  X  e m .a l  X  e OC. Consider a simple example that searches for a pattern composed of three events [e 1  X  e 2  X  e 3 ], where e 1 specifies an abnormal result of CRP test (i.e., higher than 0.3), e 2 specifies an abnormal result of ESR test (i.e., higher than 10.0), and e 3 specifies again a result of CRP test. The ESR test should have been done within a week from the first CRP test, and the la st CRP test should have been done within a month from the first CRP test, with an improvement of at least 20% from its initial a bnormal value. This pattern is expressed in Event Analyzer X  X  query language as shown in Figure 3. Figure 3. Pattern specification in Event Analyzer X  X  language . In DEFINE CONTEXT the GC, OC as well as the other attributes of the events composing the sequence are specified by GROUP, ORDER and DATA, respectively. In this case, patient is the GC, day is the OC and there are also the test and result attributes. Then, in DEFINE EVENT the intra-even t conditions, that is, conditions for the values of test and result attributes of the event that require only the examination of the event itself are specified, and in DEFINE CONDITION the inter-event conditions, that is, conditions that specify how different events in the patterns are inter-related with specifications for the values of result and day attributes, as well as the information of the events to output are specified. Figure 4 shows the two patterns that satisfy all the conditions specified in the query in Figure 3 for the sequence of events in Figure 2. A more detailed description of Event Analyzer X  X  query language can be found in [2]. The input data on which the CON TEXT is defined corresponds to a relation stored in the Interstage Navigator Central Server X  X  DW. For each specified pattern, Event Analyzer makes use of Interstage Navigator data-access functions to collect the records of the relation already sorted on values of {GC, OC}. Thus, sequences ordered on the OC for each value of the GC are processed one-by-one in Event Analyzer. For each sequence of a GC value, Figure 5 presents a simplified pseudocode for the detection of an m-pattern when the events cannot have the same order value and therefore  X  e i ,e i +1 Except the first event e 1 , which is specified by an intra-event condition  X  i.e., e 1 = f intra1 (C 1 ), where C 1 event e i can be specified by a conjunction of intra-event and inter-event conditions  X  i.e., e i = f intra i (C i ) AND f  X  m. A special inter-event condition that we will consider separately is the maximum distance allowed between two consecutive events e i and e i +1 , which we denote as  X  instance, when the OC attribute is the day attribute, then  X  e i +1 .day  X  e i .day. When the distance  X  i,i +1 is not specified, we take  X  i,i +1 as the window size ws. While there is a new input event r to process /* level 1 */ /* levels 2 to m-1 */ /* last level m */ Discard the oldest node e 1 and all nodes linked only to it Due to space limitations in this paper, we will not present details of the extensions that are necessary for the more complex case in which multiple events can have the same order value (e.g., multiple simultaneous results) and therefore  X  e i ,e i +1  X  }. Basically, all simultaneous input events must be checked once against each of the pattern events e i , and a check must be made to prevent the same input event r from appearing in different events e i of the pattern. A more detailed description of Event Analyzer X  X  pattern detection algorithm can be found in [3]. In Section 3.2 we show some orders X  checks that were implemented using Event Analyzer. Besides the basic functionalities supported by the commercial version of Event Analyzer, some few extensions we re included in order to better support the checking of some orders. We found the following three limitations in the commercial version of Event Analyzer: (a) GC can not be specified in multiple attributes; therefore, (b) the check of a pattern is only performed over one sequence Although these limitations were not strictly essential since they could be avoided by doing some data pre-processing or by splitting a more complex pattern into multiple simpler ones, we extended Event Analyzer to support them since these new features make the whole system processing more efficient. Besides those three minor extensions, we found that the commercial version had to be extended to support a very important feature: to detect that a portion of a specified pattern is missing. Event Analyzer was originally designed to fully detect pre-defined patterns. However, we found that another very important feature is to partially detect pre-defined patterns, i.e., to detect when specific events of a pre-defined pattern are missing. As in this medical ordering monitoring, many checks are done to verify if a fully specified pattern that is undesirable is detected, but in many cases, the physician has to be notified when only part of a correct pattern has been perfo rmed, that is, an important part of the protocol procedure is missing. For example, let X  X  suppose tests B and C can not be performed without first performing test A. Therefore, if orders of tests B and C are not preceded by an order of test A, the physician should be notified; or if tests D and F can not be performed skipping test E between them, a notification have to be sent if there are orders of tests D and F, but an order of test E between them is missing. We have extended Event Analyzer so that the check of a missing event e i , which is represented by !e i is also performed. For example, to find that test A is missing before B and C, we should detect the occurrence of pattern [!e 1  X  e 2  X  e 3 ] where e e .test= X  X  X , e 3 .test= X  X  X ; and to find that test E is missing between D an F, we should detect the occurrence of [e 1 e .test= X  X  X , e 2 .test= X  X  X , e 3 .test= X  X  X . About 200 patterns were listed so th at an e-mail would be sent to the appropriate physician to notify him/her that a potentially dangerous situation represented by the pattern was detected for his/her patient. Those patterns were carefully analyzed and could be basically classified into 4 types: Type 1: Check the number of or ders within a span of time Type 2: Existence of an order that depends on another previous(later) order(result) Type 3: Check of a sequence of orders(results) Type 4: Check the variation of test X  X  results Figures 6, 7, 8 and 9 show how the following 4 patterns T1, T2, T3 and T4 that correspond to patte rns of types 1, 2, 3 and 4, respectively, are specified using Event Analyzer X  X  query language. Pattern T1: Pattern T2: Pattern T3: Pattern T4: Table 1 shows some evaluation resu lts of the processing times for the detection of patterns T1, T2, T3 and T4 described in Section 3.2 in an implementation usi ng Event Analyzer and another implementation using only Fujitsu X  X  Symfoware relational database system whenever possible. For patterns T1, T2 and T4, only input events from the medical order database are utilized. For pattern T3, besides orders, diagnosis data are also utilized. Note that for pattern T1 that is quite simple, Event Analyzer X  X  result is slightly better than that of Symfoware. For pattern T2 Event Analyzer shows an improvement of about 23% compared to that of Symfoware. For both T1 and T2, if the patterns were more complex and required longer multi-way joins in the implementation using Symfoware, the difference would be greater. For pattern T2 that looks for the ab sence of an event in the pattern, Event Analyzer shows much better performance. Concerning pattern T4 that searches for test result X  X  variation in a time series, it cannot be directly implemented in a relational database unless we add an attribute with the corresponding sequential order value for each record. Our experiments so far were with off-line medical order checks. The idea was to store the order data in the DW during the day, and to check them during the night. For each detected pattern, an e-mail would be sent to the corresponding physician notifying about his/her patient X  X  situati on that requires attention and possibly some action. Now we are studying the feasibility of checking the medical orders at real-time so that the physicians could be immediately notified as s oon as the orders were entered. Here we outline some problems we are facing to use the core checking engine of Event Analyzer in the development of such an on-line order checking system. Problem 1: Problem 2: Problem 3: We presented our experience applying Event Analyzer for the checking of medical orders in a CPOE system. We found that for the off-line checking, which is the actual utilization of Event Analyzer, the patterns can be detected efficiently. However, we found that differing to our previous experience in other fields, the adaptation of Event Analyzer for an on-line processing is not straightforward since the sequential patterns are not specified in the order the data arrive, and the time windows can be much longer. We plan to continue our extensions to support the on-line monitoring of medical orders. We are also planning to expand the checking patterns to cover records from the entire EHS, and whenever necessary to extend the functions of Event Analyzer to support those checks. [1] Harada, L. An Efficient Sliding Window Algorithm for [2] Harada, L., Hotta, Y., Akaboshi , N., Kubota, K., Ohmori, T., [3] Harada, L., Hotta, Y., and Ohmori, T. Detection of [4] Harada, L., and Hotta, Y. Cont extual Correlation of Business [5] Ramakrishnan, R., Donjerkovic, D., Ranganathan, A., Beyer, [7] Seshadri, P., Livny, M., and Ramakrishnan, R.. SEQ: A [8] Sitting, D.F., and Stead, W.W. Computer-based physician [9] Srivastava, U., and Widom J. Fl exible Time Management in 
