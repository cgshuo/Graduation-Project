 We propose a system for detecting local events in the real-world using geolocation information from microblog docu-ments. A local event happens when people with a common purpose gather at the same time and place. To detect such an event, we identify a group of Twitter documents describ-ing the same theme that were generated within a short time and a small geographic area. Timestamps and geotags are useful for nding such documents, but only 0.7 % of doc-uments are geotagged and not sucient for this purpose. Therefore, we propose an automatic geotagging method that identi es the location of non-geotagged documents. Our geotagging method successfully increased the number of ge-ographic groups by about 115 times. For each group of doc-uments, we extract co-occurring terms to identify its theme and determine whether it is about an event. We subjec-tively evaluated the precision of our detected local events and found that it had 25.5 % accuracy. These results demon-strate that our system can detect local events that are dif-cult to identify using existing event detection methods. A user can interactively specify the size of a desired event by manipulating the parameters of date, area size, and the min-imum number of Twitter users associated with the location. Our system allows users to enjoy the novel experience of nding a local event happening near their current location in real time.

People share the latest information on a wide variety of real-world events by microblog documents such as Twitter. p ropose an automatic geotagging method for identifying the location from which each non-geotagged document is gen-erated. Our geotagging method determines the degree to which a place name is associated with a location in the real-world. For example, when the place name \Times Square" appears in a document, it is likely to be about Times Square in New York. However, when \McDonald's" appears in a document, it is dicult to determine the location, given that this restaurant chain is found all over the world. Hence, terms that refer to locations with limited geographical dis-tributions are useful for identifying the locations of Twit-ter documents. We assign geolocation information to non-geotagged documents by identifying such place names. We then group documents generated within a short time and a small geographic area. In a test, applying our geotagging method to non-geotagged documents increased the number of groups identi ed by 115 times.

The detected groups include not only local events but also locations visited by many people, e.g., a large train station. Although many microblog documents may be posted from a large train station, people typically have di erent reasons for being there. To detect only local events and discard non-event groups, we analyze co-occurring terms that ap-pear in many of the documents of each group, and if none is detected, the group of documents is discarded. In con-trast, in the case of a local event such as a live performance at a city hall, we are likely to detect the artist's name as a co-occurring term across documents. Thus, the artist's name would be useful information for users wanting to un-derstand the content of the event. We subjectively evaluated our method of event detection, which had about 25.5 % ac-curacy. Thus, using our system, a user can enjoy the novel experience of nding an event near his or her current loca-tion in real time.
Event detection is an active eld of research, and many unique methods have been proposed. Di erent methods have been proposed for the detection of di erent types of events such as news [8] and earthquakes [7]. Becker et al. found an event by clustering Twitter documents based on the similarity of their content and then determined whether the documents described a real-world event [3]. Zhao et al. detected events using topic intensity over time [10]. Al-though these methods are useful for detecting relatively large events, our goal is to detect smaller local events. Lee et al. proposed a method for detecting locations where peo-ple crowd as a local event [5], applying a k-means clustering method to geotagged Twitter documents. However, because only a small number of Twitter documents are geotagged, only a small number of large and popular events can be de-tected using this method.

Therefore, we try to increase the number of local events detected by identifying the locations of non-geotagged doc-uments. Amitay et al. proposed a method for geotagging web content [1]. Cheng et al. proposed a technique for esti-mating a Twitter user's location [2]. Although their meth-ods can predict a location at the city level, our geolocation method can predict a location at the building level. Wing et al. attempted to estimate the location of each document in Wikipedia and Twitter based on terms in their content [9]. However, they reported a mean location prediction error of 967 km when their method was applied to Twitter docu-results, and the others are not.

I D Da te Pl ace Name Tw eets/Users Key Terms Desc ription th e location in real time. To search large numbers of docu-ments quickly, our system makes use of Solr 3 , an open source search platform based on Lucene. This process increases the number of geotagged Twitter documents by about 2.5 times.
Popular Place Extractor: This module nds popu-lar places by detecting geotags observed frequently in Twit-ter documents posted during the user-speci ed period. To gather geotags that are scattered within a small region e-ciently, we use the Geohash algorithm 4 . This algorithm con-verts geolocation information to a hash value. Nearby places are represented as similar values, which enable to nd pop-ular places as regions where many Twitter documents are posted eciently.

Key Term Extractor: This module extracts key terms that describe an event that might be held at each popular place. Key terms that appear three times or more in the Twitter documents associated with the popular place are extracted. The place with one or more extracted key terms is identi ed as a local event. Popular places with no key terms are discarded. Before the process, we exclude all retweets in advance, because a user who retweets a document is likely not to be in the same location as the original document was posted.
We evaluate the performance of our system for detecting local events using Twitter documents posted on June 18, 2011, in Japan. We collected 7,135 geotagged documents posted from Japan and 2,453,725 non-geotagged Japanese documents.
 Geotag Allocation: We rst create the Place Name Database from geotagged documents posted in April and May 2011. We extract 19,537 place names and geographical coordinates from Japanese Twitter documents. Then, using this database, we assign geolocation information to 17,204 non-geotagged documents.

Popular Place and Key Term Extraction: Our sys-tem nds 689 popular places with areas of 20 30 m 2 and documents posted by more than ve unique Twitter users. The Key Term Extractor discards 343 popular places with-out key terms, leaving 346 popular places identi ed as local events, as shown in Figure 1.

Evaluation: To evaluate the accuracy of our local-event detection system, we performed a subjective user study. We asked ve computer science students to con rm whether the identi ed events were truly events. According to their re-h ttp://lucene.apache.org/solr/ http://geohash.org/ recommended because this area properly detected resulted in correct detection of many local events in our tests. Fi-nally, the user inputs a number in the user count input eld to specify the minimum number of unique Twitter users re-quired to detect a popular place. When the user wants to identify only big events, a large number is speci ed. If too small a number is used, many irrelevant popular places will be detected. We recommend inputting a number that detect a reasonable number of real local events.

Now the Jasmine system is ready to detect local events in real time. The user clicks the \Detect Events" button. After a few seconds, all of the events detected are listed below this button and displayed on the map as yellow markers. When the user clicks on an event in this list, the map automatically moves to the corresponding yellow marker, and all of the Twitter documents posted from that location are displayed in a balloon. The user can also click on a yellow marker on the map to see all of the related Twitter documents. The upper area of the balloon presents the place name and the extracted key terms related to the event. Key terms are printed in the order of extraction.

We present an example of a detected local event in Fig-ure 3. Our system detects a free market festival in a park in Kanagawa, Japan. The place name is \Tsujidou Sea-side Park." The extracted key terms are \Sea{Sky Festival," \Free market,"\held," and \now." These terms suggest that the Sea{Sky Festival, featuring a free market, is being held in the park. This festival is a local and minor event, held for the rst time to raise funds for the victims of the 2011 Tohoku Earthquake, according to the event's website. The balloon shows that one Twitter document says that every-body should support victims by attending the festival, and another says that the writer is a volunteer at the festival. It is not impossible for a user to nd and attend this festival without using our system. However, by reading these Twit-ter documents, the user might be more enthusiastic about attending the event after learning about the spirit of the fes-tival. By collaborating with Twitter, Jasmine allows users to actively choose local events that they want to attend.
