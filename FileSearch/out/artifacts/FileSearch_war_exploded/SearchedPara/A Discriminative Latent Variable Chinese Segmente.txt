 For most natural language processing tasks, words are the basic units to process. Since Chinese sen-tences are written as continuous sequences of char-acters, segmenting a character sequence into a word sequence is the first step for most Chinese process-ing applications. In this paper, we study the prob-lem of Chinese word segmentation (CWS), which aims to find these basic units (words 1 ) for a given sentence in Chinese.

Chinese character sequences are normally am-biguous, and out-of-vocabulary (OOV) words are a major source of the ambiguity. Typical examples of OOV words include named entities (e.g., orga-nization names, person names, and location names). Those named entities may be very long, and a dif-ficult case occurs when a long word W ( | W | X  4 ) consists of some words which can be separate words on their own; in such cases an automatic segmenter may split the OOV word into individual words. For example, (Computer Committee of International Federation of Automatic Control) is one of the organization names in the Microsoft Research corpus. Its length is 13 and it contains more than 6 individual words, but it should be treated as a single word. Proper recogni-tion of long OOV words are meaningful not only for word segmentation, but also for a variety of other purposes, e.g., full-text indexing. However, as is il-lustrated, recognizing long words (without sacrific-ing the performance on short words) is challenging.
Conventional approaches to Chinese word seg-mentation treat the problem as a character-based la-beling task (Xue, 2003). Labels are assigned to each character in the sentence, indicating whether the character x i is the start ( Label i = B ), middle or end of a multi-character word ( Label i = C ). A popu-lar discriminative model that have been used for this task is the conditional random fields (CRFs) (Laf-ferty et al., 2001), starting with the model of Peng et al. (2004). In the Second International Chinese Word Segmentation Bakeoff (the second SIGHAN CWS bakeoff) (Emerson, 2005), two of the highest scoring systems in the closed track competition were based on a CRF model (Tseng et al., 2005; Asahara et al., 2005).

While the CRF model is quite effective compared with other models designed for CWS, it may be lim-ited by its restrictive independence assumptions on non-adjacent labels. Although the window can in principle be widened by increasing the Markov or-der, this may not be a practical solution, because the complexity of training and decoding a linear-chain CRF grows exponentially with the Markov or-der (Andrew, 2006).
 To address this difficulty, a choice is to relax the Markov assumption by using the semi-Markov con-ditional random field model (semi-CRF) (Sarawagi and Cohen, 2004). Despite the theoretical advan-tage of semi-CRFs over CRFs, however, some pre-vious studies (Andrew, 2006; Liang, 2005) explor-ing the use of a semi-CRF for Chinese word seg-mentation did not find significant gains over the CRF ones. As discussed in Andrew (2006), the rea-son may be that despite the greater representational power of the semi-CRF, there are some valuable fea-tures that could be more naturally expressed in a character-based labeling model. For example, on a CRF model, one might use the feature  X  X he cur-rent character x i is X and the current label Label i is
C  X . This feature may be helpful in CWS for gen-eralizing to new words. For example, it may rule out certain word boundaries if X were a character that normally occurs only as a suffix but that com-bines freely with some other basic forms to create new words. This type of features is slightly less nat-ural in a semi-CRF, since in that case local features  X  ( y i ,y i +1 ,x ) are defined on pairs of adjacent words. That is to say, information about which characters are not on boundaries is only implicit. Notably, ex-cept the hybrid Markov/semi-Markov system in An-drew (2006) 2 , no other studies using the semi-CRF (Sarawagi and Cohen, 2004; Liang, 2005; Daum  X  e III and Marcu, 2005) experimented with features of segmenting non -boundaries.

In this paper, instead of using semi-Markov mod-els, we describe an alternative, a latent variable model, to learn long range dependencies in Chi-nese word segmentation. We use the discrimina-tive probabilistic latent variable models (DPLVMs) (Morency et al., 2007; Petrov and Klein, 2008), which use latent variables to carry additional infor-mation that may not be expressed by those original labels, and therefore try to build more complicated or longer dependencies. This is especially meaning-ful in CWS, because the used labels are quite coarse: Label ( y )  X  X  B, C } , where B signifies beginning a word and C signifies the continuation of a word . 3 For example, by using DPLVM, the aforementioned feature may turn to  X  X he current character x i is X , Label i = C , and LatentV ariable i = LV  X . The current latent variable LV may strongly depend on the previous one or many latent variables, and there-fore we can model the long range dependencies which may not be captured by those very coarse la-bels. Also, since character and word information have their different advantages in CWS, in our latent variable model, we use hybrid information based on both character and word sequences. 2.1 Discriminative Probabilistic Latent Given data with latent structures, the task is to learn a mapping between a sequence of observa-tions x = x 1 ,x 2 ,...,x m and a sequence of labels y = y 1 ,y 2 ,...,y m . Each y j is a class label for the j  X  X h character of an input sequence, and is a mem-ber of a set Y of possible class labels. For each se-quence, the model also assumes a sequence of latent variables h = h 1 ,h 2 ,...,h m , which is unobserv-able in training examples.

The DPLVM is defined as follows (Morency et al., 2007):
P ( y | x ,  X  )= where  X  are the parameters of the model. DPLVMs can be seen as a natural extension of CRF models, and CRF models can be seen as a special case of DPLVMs that have only one latent variable for each label.

To make the training and inference efficient, the model is restricted to have disjoint sets of latent vari-ables associated with each class label. Each h j is a member in a set H y the class label y j . H is defined as the set of all pos-sible latent variables, i.e., the union of all H y Since sequences which have any h j /  X  H y definition have P ( y | x ,  X  )=0 , the model can be further defined 4 as: where P ( h | x ,  X  ) is defined by the usual conditional random field formulation: in which f ( h , x ) is a feature vector. Given a training set consisting of n labeled sequences, ( x i , y i ) , for i =1 ...n , parameter estimation is performed by optimizing the objective function, The first term of this equation is the conditional log-likelihood of the training data. The second term is a regularizer that is used for reducing overfitting in parameter estimation.

For decoding in the test stage, given a test se-quence x , we want to find the most probable label sequence, y  X  : For latent conditional models like DPLVMs, the best label path y  X  cannot directly be produced by the Viterbi algorithm because of the incorporation of hidden states. In this paper, we use a technique scribed in Sun and Tsujii (2009), for producing the most probable label sequence y  X  on DPLVM.
 1968) with a Viterbi heuristic function is adopted to produce top-n latent paths, h 1 , h 2 ,... h n . In addi-tion, a forward-backward-style algorithm is used to compute the exact probabilities of their correspond-ing label paths, y 1 , y 2 ,... y n . The model then tries to determine the optimal label path based on the top-n statistics, without enumerating the remaining low-probability paths, which could be exponentially enormous.

The optimal label path y  X  is ready when the fol-lowing  X  X xact-condition X  is achieved:
P ( y 1 | x ,  X  )  X  (1  X  where y 1 is the most probable label sequence in current stage. It is straightforward to prove that y  X  = y 1 , and further search is unnecessary. This is because the remaining probability mass, 1  X  timal label path in this case. For more details of the inference, refer to Sun and Tsujii (2009). 2.2 Hybrid Word/Character Information We divide our main features into two types: character-based features and word-based features. The character-based features are indicator functions that fire when the latent variable label takes some value and some predicate of the input (at a certain position) corresponding to the label is satisfied. For each latent variable label h i (the latent variable la-bel at position i ), we use the predicate templates as follows:  X  Input characters/numbers/letters locating at po- X  The character/number/letter bigrams locating  X  Whether x j and x j +1 are identical, for j =( i  X   X  Whether x j and x j +2 are identical, for j =( i  X  The latter two feature templates are designed to de-tect character or word reduplication, a morphologi-cal phenomenon that can influence word segmenta-tion in Chinese.

The word-based features are indicator functions that fire when the local character sequence matches a word or a word bigram. A dictionary containing word and bigram information was collected from the training data. For each latent variable label unigram h , we use the set of predicate template checking for word-based features:  X  The identity of the string x j ...x i , if it matches  X  The identity of the string x i ...x k , if it matches  X  The identity of the word bigram ( x j ...x i  X  1 ,  X  The identity of the word bigram ( x j ...x i ,
All feature templates were instantiated with val-ues that occur in positive training examples. We found that using low-frequency features that occur only a few times in the training set improves perfor-mance on the development set. We hence do not do any thresholding of the DPLVM features: we simply use all those generated features.

The aforementioned word based features can in-corporate word information naturally. In addition, following Wang et al. (2006), we found using a very simple heuristic can further improve the seg-mentation quality slightly. More specifically, two operations, merge and split , are performed on the DPLVM/CRF outputs: if a bigram A B was not ob-served in the training data, but the merged one AB was, then A B will be simply merged into AB ;on the other hand, if AB was not observed but A B ap-peared, then it will be split into A B . We found this simple heuristic on word information slightly im-proved the performance (e.g., for the PKU corpus, +0.2% on the F-score). We used the data provided by the second Inter-national Chinese Word Segmentation Bakeoff to test our approaches described in the previous sec-tions. The data contains three corpora from different sources: Microsoft Research Asia (MSR), City Uni-versity of Hong Kong (CU), and Peking University (PKU).

Since the purpose of this work is to evaluate the proposed latent variable model, we did not use ex-tra resources such as common surnames, lexicons, parts-of-speech, and semantics. For the generation of word-based features, we extracted a word list from the training data as the vocabulary.

Four metrics were used to evaluate segmentation results: recall ( R , the percentage of gold standard output words that are correctly segmented by the de-coder), precision ( P , the percentage of words in the decoder output that are segmented correctly), bal-anced F-score ( F ) defined by 2 PR/ ( P + R ) , recall of OOV words ( R -oov). For more detailed informa-tion on the corpora and these metrics, refer to Emer-son (2005). 3.1 Training the DPLVM Segmenter We implemented DPLVMs in C++ and optimized the system to cope with large scale problems, in which the feature dimension is beyond millions. We employ the feature templates defined in Section 2.2, taking into account those 3,069,861 features for the MSR data, 2,634,384 features for the CU data, and 1,989,561 features for the PKU data.

As for numerical optimization, we performed gradient decent with the Limited-Memory BFGS (L-BFGS) 6 optimization technique (Nocedal and Wright, 1999). L-BFGS is a second-order Quasi-Newton method that numerically estimates the cur-vature from previous gradients and updates. With no requirement on specialized Hessian approxima-tion, L-BFGS can handle large-scale problems in an efficient manner.

Since the objective function of the DPLVM model is non-convex, we randomly initialized parameters for the training. 7 To reduce overfitting, we employed an L 2 Gaussian weight prior 8 (Chen and Rosen-feld, 1999). During training, we varied the L 2 -regularization term (with values 10 k , k from -3 to 3), and finally set the value to 1. We use 4 hidden variables per label for this task, compromising be-tween accuracy and efficiency. 3.2 Comparison on Convergence Speed First, we show a comparison of the convergence speed between the objective function of DPLVMs and CRFs. We apply the L-BFGS optimization algo-rithm to optimize the objective function of DPLVM and CRF models, making a comparison between them. We find that the number of iterations required for the convergence of DPLVMs are fewer than for CRFs. Figure 1 illustrates the convergence-speed comparison on the MSR data. The DPLVM model arrives at the plateau of convergence in around 300 iterations, with the penalized loss of 95 K when # passes = 300 ; while CRFs require 900 iterations, with the penalized loss of 98 K when # passes = 900 .
 However, we should note that the time cost of the DPLVM model in each iteration is around four times higher than the CRF model, because of the incorpo-ration of hidden variables. In order to speed up the MSR S.C. 88K 2,368K 5K 4,050K CU T.C. 69K 1,455K 5K 2,403K PKU S.C. 55K 1,109K 5K 1,826K training speed of the DPLVM model in the future, one solution is to use the stochastic learning tech-nique 9 . Another solution is to use a distributed ver-sion of L-BFGS to parallelize the batch training. Since the CRF model is one of the most successful models in Chinese word segmentation, we compared DPLVMs with CRFs. We tried to make experimen-tal results comparable between DPLVMs and CRF models, and have therefore employed the same fea-ture set, optimizer and fine-tuning strategy between the two. We also compared DPLVMs with semi-CRFs and other successful systems reported in pre-vious work. 4.1 Evaluation Results Three training and test corpora were used in the test, including the MSR Corpus, the CU Corpus, and the PKU Corpus (see Table 1 for details). The results are shown in Table 2. The results are grouped into three sub-tables according to different corpora. Each row represents a CWS model. For each group, the rows marked by  X  represent our models with hy-brid word/character information. Best05 represents the best system of the Second International Chinese Word Segmentation Bakeoff on the corresponding data; A06 represents the semi-CRF model in An-drew (2006) 10 , which was also used in Gao et al. (2007) (denoted as G07 ) with an improved perfor-mance; Z06-a and Z06-b represents the pure sub-word CRF model and the confidence-based com-bination of CRF and rule-based models, respec-tively (Zhang et al., 2006); ZC07 represents the word-based perceptron model in Zhang and Clark (2007); T05 represents the CRF model in Tseng et al. (2005); C05 represents the system in Chen et al. (2005). The best F-score and recall of OOV words of each group is shown in bold.
 As is shown in the table, we achieved the best F-score in two out of the three corpora. We also achieved the best recall rate of OOV words on those two corpora. Both of the MSR and PKU Corpus use simplified Chinese, while the CU Corpus uses the traditional Chinese.

On the MSR Corpus, the DPLVM model reduced more than 10% error rate over the CRF model us-ing exactly the same feature set. We also compared our DPLVM model with the semi-CRF models in Andrew (2006) and Gao et al. (2007), and demon-strate that the DPLVM model achieved slightly bet-ter performance than the semi-CRF models. Andrew (2006) and Gao et al. (2007) only reported the re-sults on the MSR Corpus.
 In summary, tests for the Second International Chinese Word Segmentation Bakeoff showed com-petitive results for our method compared with the best results in the literature. Our discriminative la-tent variable models achieved the best F-scores on the MSR Corpus (97.3%) and PKU Corpus (95.2%); the latent variable models also achieved the best re-calls of OOV words over those two corpora. We will analyze the results by varying the word-length in the following subsection. 4.2 Effect on Long Words One motivation of using a latent variable model for CWS is to use latent variables to more adequately learn long range dependencies, as we argued in Sec-tion 1. In the test data of the MSR Corpus, 19% of the words are longer than 3 characters; there are also 8% in the CU Corpus and 11% in the PKU Corpus, respectively. In the MSR Corpus, there are some ex-tremely long words ( Length &gt; 10 ), while the CU and PKU corpus do not contain such extreme cases.
Figure 2 shows the recall rate on different groups of words categorized by their lengths (the number of characters). As we expected, the DPLVM model performs much better on long words ( Length  X  4 ) than the CRF model, which used exactly the same feature set. Compared with the CRF model, the DPLVM model exhibited almost the same level of performance on short words. Both models have the best performance on segmenting the words with the length of two. The performance of the CRF model deteriorates rapidly as the word length in-creases, which demonstrated the difficulty on mod-eling long range dependencies in CWS. Compared with the CRF model, the DPLVM model performed quite well in dealing with long words, without sacri-ficing the performance on short words. All in all, we conclude that the improvement of using the DPLVM model came from the improvement on modeling long range dependencies in CWS. 4.3 Error Analysis Table 3 lists the major errors collected from the la-tent variable segmenter. We examined the collected errors and found that many of them can be grouped into four types: over-generalization (the top row), errors on named entities (the following three rows), errors on idioms (the following three rows) and er-rors from inconsistency (the two rows at the bottom).
Our system performed reasonably well on very complex OOV words, such as
Gold Segmentation Segmenter Output
Co-allocated org. names
Idioms Shijiazhuang-city Branch, the second sales depart-ment) and (Science and Technology Commission of China, National In-stitution on Scientific Information Analysis). How-ever, it sometimes over-generalized to long words. For example, as shown in the top row, (National Department of Environmental Protection) and (The Central Propaganda Department) are two organization names, but they are incorrectly merged into a single word.

As for the following three rows, (Chen Yao) and (Chen Fei) are person names. They are wrongly segmented because we lack the features to capture the information of person names (such use-ful knowledge, e.g., common surname list, are cur-rently not used in our system). In the future, such errors may be solved by integrating open resources into our system. (Vasillis) is a transliter-ated foreign location name and is also wrongly seg-mented.

For the corpora that considered 4 character idioms as a word, our system successfully combined most of new idioms together. This differs greatly from the results of CRFs. However, there are still a number of new idioms that failed to be correctly segmented, as listed from the fifth row to the seventh row.
Finally, some errors are due to inconsistencies in the gold segmentation. For example, // (pro-pagandist) is two words, but a word with similar structure, (theorist), is one word. (desertification) is one word, but its synonym, // (desertification), is two words in the gold seg-mentation. We presented a latent variable model for Chinese word segmentation, which used hybrid information based on both word and character sequences. We discussed that word and character information have different advantages, and could be complementary to each other. Our model is an alternative to the ex-isting word based models and character based mod-els.

We argued that using latent variables can better capture long range dependencies. We performed experiments and demonstrated that our model can indeed improve the segmentation accuracy on long words. With this improvement, tests on the data of the Second International Chinese Word Segmen-tation Bakeoff show that our system is competitive with the best in the literature.

Since the latent variable model allows a wide range of features, so the future work will consider how to integrate open resources into our system. The latent variable model handles latent-dependencies naturally, and can be easily extended to other label-ing tasks.
 We thank Kun Yu, Galen Andrew and Xiaojun Lin for the enlightening discussions. We also thank the anonymous reviewers who gave very helpful com-ments. This work was partially supported by Grant-in-Aid for Specially Promoted Research (MEXT, Japan).

