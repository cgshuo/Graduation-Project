 Given the high expressivity of the Web Ontology Language OWL 2, there is a potential for great diversity in the log-ical content of OWL ontologies. The fact that many nat-urally occurring entailments of such ontologies have multi-ple justifications indicates that ontologies often overdeter-mine their consequences, suggesting a diversity in support-ing reasons. On closer inspection, however, we often find that justifications X  X ven for multiple entailments X  X ppear to be structurally similar, suggesting that their multiplicity might be due to diverse material , not formal grounds for an entailment.

In this paper, we introduce and explore several equiva-lence relations over justifications for entailments of OWL ontologies which partition a set of justifications into struc-turally similar subsets. These equivalence relations range from strict isomorphism to looser notions of similarity, cov-ering justifications which contain different class expressions, or even different numbers of axioms. We present the results of a survey of 78 ontologies from the biomedical domain which shows that OWL ontologies used in practice often contain large numbers of structurally similar justifications. We find that a large justification corpus can be reduced by 97% of its original size to a small core of frequently occurring justification templates.
 H.3.5 [ On-Line Information Services ]: Web-Based Ser-vices; I.2.4 [ Knowledge Representation Formalisms and Methods ]: Semantic Networks; J.3 [ Life and Medical Sciences ]: Biology and Genetics, Medical Information Sys-tems Semantic Web; OWL; ontologies; explanation; debugging; bioinformatics
Since it became a W3C standard in 2004, the Web On-tology Language OWL 1 has become a widely used language for representing knowledge from a variety of domains. OWL is based on the expressive description logic SROIQ [10], which allows the use of complex constructors to model infor-mation about the relationships between classes, properties, and individuals. Due to its foundations in description log-ics and the availability of highly optimised description logic reasoners , OWL ontology modellers and users can apply au-tomated reasoning techniques to elicit not only explicitly asserted knowledge in the ontology, but also implicit infor-mation which is entailed by the ontology. OWL ontologies can be subject to frequent revisions, may edited collabora-tively, or merged with existing ontologies. These processes, paired with the potentially large size and complexity of an ontology, can lead to errors which manifest either as logical errors (incoherence and inconsistency) or unwanted entail-ments which are considered to be incorrect in the context of the domain knowledge modelled in the ontology.

Justifications [12], minimal entailing subsets of an OWL ontology, provide helpful and easy-to-understand explana-tion support when repairing unwanted entailments in the ontology debugging process. They are currently the preva-lent form of explanation in OWL ontology editors such as Prot  X eg  X e 4. While previous research has focused on the issue of making individual justifications easier to understand (e.g. [8, 11, 13]), only little attention has been paid to the occur-rence of multiple justifications other than the computational problems they often imply. An entailment of an OWL on-tology can have a large number of justifications (potentially exponential in the number of axioms in the ontology), with up to several hundreds found in large real-life ontologies [5].
When encountering multiple justifications for a finite set of entailments of an ontology (e.g. unwanted atomic sub-sumptions, or unsatisfiable classes), we are often faced with a seemingly large and diverse body of reasons why the en-tailments hold. On closer inspection, however, we frequently find that sets of justifications are very similar, and often even contain structurally identical axioms, with only class, prop-erty, and individual names diverging. Pointing out these similarities, and grouping justifications based on their shared structures might greatly assist a user in coping with mul-tiple justifications: rather than trying to understand each individual material justification, the user can focus on un-derstanding the formal template of a particular subset of http://www.w3.org/TR/owl2-overview/ justifications. Potentially, a user might have to deal with far fewer justifications, thus having a significantly reduced effort when repairing an ontology. This raises several ques-tions: first, how do we determine whether two justifications are structurally similar, and second, how prevalent are such similarities in ontologies used in practice?
A well-known syntactical equivalence relation in OWL is structural equivalence . The OWL Structural Specification states the condition for two OWL objects (named classes, properties, or instances, complex expressions, or OWL ax-ioms) to be structurally equivalent: in short, it defines the objects to be equivalent if they contain the same names and constructors, regardless of ordering and repetition (in an un-ordered association). The OWL API implements this notion of structural equivalence by default.

A second equivalence relation is justification isomorphism which was first introduced in a study of the cognitive com-plexity of justifications [7]: two justifications are isomorphic if they are structurally identical, 4 i.e. the axioms contain the same types of class expressions and only differ in the class, property and instance names. The following example shows two justifications J 1 and J 2 which we consider to be isomorphic: Example 1.
 It is straightforward to see that in the above justifications the class A in J 1 can be mapped to E in J 2 , the property r to s , and the class C to F in order to obtain identical justifications.

While justification isomorphism helps to eliminate the ef-fects of diverging class, property, and instance names, we can also identify types of justifications which may be considered to be very similar despite their use of different constructors: Example 2.
 In this example, the semantics of the complex class expres-sions B u C in J 1 and  X  r.C in J 2 are not relevant for the respective entailment; their occurrences in the justifications and their entailments can be replaced by freshly generated class names without affecting the entailment relation. Such a substitution, in turn, would make the two justifications isomorphic. In other words, the complex expressions in J are used in a propositional way.

Likewise, justifications of different lengths may be consid-ered similar if their general structure of reasoning is identi-cal: http://www.w3.org/TR/owl2-syntax
Note that, in the spirit of consistent naming, we will use the term  X  X somorphism X  for the newly introduced equivalent relations despite their not being isomorphisms (i.e. bijective mappings) in the true sense. Modulo structural equivalence.
 Example 3.
 These two justifications clearly require the same form of rea-soning from a user which means we may consider them to be structurally similar in some way. Strict isomorphism only applies to justifications which contain the same number of axioms; it does not cover situations like one shown above. However, for the purpose of structuring sets of justifications and analysing the logical diversity of a corpus of justifica-tions, capturing those kinds of similarities illustrated in the above examples would be highly desirable.

The idea of studying justification patterns, or rules , has been explored by Nguyen et al. [15, 14]. In a survey of over 500 OWL ontologies, the authors extracted justification sub-sets, so-called rules, of up to 4 axioms, and identified the 57 most frequently occurring patterns. These rules were then translated into natural language as used as the basis for proof-like explanations. While this approach (if extended to complete justifications) would capture similar justifications of the type shown in Example 1, it does not cover justi-fications which differ in the subexpressions or numbers of axioms they use.

In this paper, we introduce two new equivalence relations, subexpression-isomorphism  X  s and lemma-isomorphism  X  ` , between justifications based on the subexpressions of their axioms and axiom subsets, respectively, and show how these equivalence relations can be used to determine the logical di-versity of a set of justifications. We then present a detailed survey of ontologies from the biomedical domain in which we investigate the effects of the different types of isomorphism, as well as the effects superfluous expressions have on struc-tural similarity. We find that a surprisingly large number of justifications are indeed structurally similar, which shows us that debugging strategies based on isomorphism templates are indeed applicable to ontologies used in practice.
We assume the reader to be familiar with OWL and the underlying Description Logic SROIQ [10]. In what fol-lows, A,B,... denote class names in an ontology O , r,s role names, and sig (  X  ) denotes the set of entity names in an OWL axiom  X  .

Justifications [17, 12] are a type of explanation for entail-ments of OWL ontologies; they are used in OWL ontology editors such as Prot  X eg  X e 4. A justification is defined as a minimal subset of an ontology O that causes an entailment  X  to hold: Definition 1. J is a justification for O | =  X  if J  X  O , J | =  X  and, for all J 0  X  X  , it holds that J 0 2  X  .
For every axiom which is asserted in the ontology, the axiom itself naturally is a justification. We call such a jus-tification a self-justification , and an entailment which has only a self-justification and no other justification in O a self-supporting entailment.

While justifications are minimal with respect to the num-ber of axioms they contain, the axioms themselves may still contain superfluous expressions. A laconic justification [8] is a justification which does not contain any superfluous ex-pressions, and for each  X  X egular X  justification we can com-pute a preferred laconic version. The following example il-lustrates several aspects of non-laconicity in a justification: Example 4.
 First, we can reduce the intersection in the first axiom to the single expression  X  2 r.C without affecting the entail-ment. Second, this expression can then be weakened to  X  1 r.C . Third, the class name C in both axioms can be substituted with &gt; . This results in the laconic justification { A v X  1 r. &gt; ,  X  r. &gt;v D } .

It is important to note that a justification is always defined with respect to an entailment  X  . In the remainder of this paper we will therefore use the term justification to describe a justification-entailment pair ( J ,  X  ) where J is a minimal entailing axiom set for  X  .
Justification isomorphism was first introduced as a way to reduce sampling bias in a user study to validate a model for the cognitive complexity of OWL justifications [7]. The study assumed that users would perceive justifications which are structurally identical as equally difficult to understand, taking into account some variation caused by the complexity of class names and domain knowledge. In order to reduce the risk of bias caused by presenting users a series of struc-turally identical justifications, the study reduced the corpus of 64,800 to 11,600 structurally distinct, i.e. non-isomorphic, justifications. Justification isomorphism is defined as fol-lows:
Definition 2. Two justifications ( J 1 , X  1 ), ( J 2 , X  renaming  X  which maps class, property, and instance names in J 1 and  X  1 to class, property, and instance names in J and  X  2 , respectively, such that  X  ( J 1 ) = J 2 and  X  (  X  1. The relation  X  i is symmetric, reflexive and transitive, 2. Justification isomorphism preserves the numbers and
From the above definition of isomorphism it follows that only justifications with the same number and types of ax-ioms and subexpressions can be isomorphic. It is easy to see, however, that justifications can have a similar structure despite their use of different expressions, as demonstrated in Example 2. Furthermore, obfuscating complex expres-sions which can be substituted by propositional variables reduces superfluous clutter in a justification, thus improv-ing the readability of a justification akin to laconic justifica-tions. This motivates a notion of subexpression-isomorphism (s-isomorphism), an equivalence relation which allows not only the mapping of class names, but also that of complex subexpressions.

The idea of finding similarities between concepts in de-scription logics has been widely explored in the work on unification and matching , e.g. [3, 1, 2], for the purpose of de-tecting redundant class descriptions in ontologies. Given two class expressions C and D , a unification problem C  X  ? asks whether there exists a substitution  X  , that is, a map-ping from a set of named classes in C into the set of class expressions in D , such that  X  ( C )  X   X  ( D ). The aim of unifi-cation is to find a suitable substitution  X  which maps atomic classes C to (possibly non-atomic) classes in D such that the two classes are made equivalent.

While the idea behind s-isomorphism is based on unifica-tion and matching, the concepts are not directly applicable to the given problem of matching justifications. In our case, the inputs are of different shape from the matching prob-lem: the goal is to unify two sets of axioms and the cor-responding entailments, rather than matching a single class expression (a class pattern ) which contains variables to a class expression. That is, we attempt to identify pairs of possibly complex class expressions that, when replaced with names, result in isomorphic justifications. This means that the substitution mechanism as used in unification is not ap-plicable.

We therefore introduce a justification template  X , which functions as the unifying justification , and two substitutions  X  , X  2 for use in s-isomorphism. We will use freshly intro-duced entity names x i for the named classes, properties, and instances in a template  X . In order for s-isomorphism to be transitive, the justifications will have to fulfil certain side-conditions, which will be used in the proof of Proposition 2: S1 For any C in the range of  X  1 (  X  2), C is not equivalent S2 For any C in the range of  X  1 (  X  2) is satisfiable in a single S3 For any C 1 , C 2 in the range of  X  ac 1 (  X  ac 2 , respectively),
Definition 3. Two justifications ( J 1 , X  1 ), ( J 2 , X  2 tion template (  X  , X  ) and two injective substitutions  X  satisfying S1 to S3 , such that 1.  X  | =  X  2.  X  1 ( X ) = J 1 and  X  2 ( X ) = J 2 3.  X  1 (  X  ) =  X  1 and  X  2 (  X  ) =  X  2 .

The mappings  X  1 and  X  2 map class, property, and individ-ual names in the template ( X  , X  ) to subexpressions of ( J  X  ) and ( J 2 , X  2 ), respectively.

Note that in order to be s-isomorphic, the justifications may differ in the number of subexpressions. As with strict isomorphism, however, they must have the same number of axioms: J 1  X  s J 2  X  X J 1 | = |J 2 | .

Proposition 1. S-isomorphism is a more general case of strict isomorphism: J 1  X  i J 2  X  X  1  X  s J 2 .
Proof. Let ( J 1 , X  1 )  X  i ( J 2 , X  2 ) via a mapping  X  . Then we can consider a template  X  to correspond to J 1 , the map-ping  X  1 is the identity relation id which maps J 1 to itself, and  X  2 corresponds to the mapping  X  used for strict isomor-phism. Thus J 1  X  i J 2 then J 1  X  s J 2 .

Proposition 2. The relation  X  s is reflexive, transitive and symmetric for description logics without nominals up to SRIQ .

Proof. Reflexivity and symmetry of  X  s are straightfor-ward to see; therefore we will only outline a proof of the transitivity of s-isomorphism for logics not containing nom-inals. For a complete detailed proof as well as an example of the non-transitivity of s-isomorphism in the presence of nominals the reader is referred to [4].

Let ( J a , X  a )  X  s ( J b , X  b ) via  X  ab 1 , X  ab 2 , ( X   X  show that given this situation, it is always possible to con-struct two mappings  X  ac 1 , X  ac 2 and a template ( X  ac , X  that ( J a , X  a )  X  s ( J c , X  c ) via  X  ac 1 , X  ac 2 and ( X  trated in Figure 1.

We first describe the construction of the ( X  ac , X  ac ) by cre-ating the parse trees of the three justifications and  X  X e-using X  the expressions occurring at the corresponding position in the parse trees of the templates ( X  ab , X  ab ), ( X  bc , X  bc is, we construct the template ( X  ac , X  ac ) as a combination of the two existing templates.

The mappings  X  ac 1 and  X  ac 2 are then simply constructed as the mappings from the expressions at the positions in the parse tree of ( X  ac , X  ac ) to the expressions at their corre-sponding positions in the parse trees of ( J a , X  a ) and ( J respectively.

Finally, we show that the entailment relation  X  ac | =  X  ac holds by describing the steps to extend any model I  X  ac to a model of  X  ac by constructing a model I a of J (or I c of J c , respectively) using the side conditions S1 X  X 3 described above. By showing that it is always possible to construct a template ( X  ac , X  ac ) for the justifications J J c such that J a  X  s J c , we have proved the transitivity of the relation  X  s
Finally, note that the substitutions  X  1 and  X  2 are injective, but not surjective. As we have shown in the proof of 2, injectivity of the mappings is a condition for the transitivity of s-isomorphism. However, the mappings are not surjective, as the set of subexpressions in the justifications J 1 and J can be of higher cardinality than the set of class names in  X  (unless the justifications themselves contain no complex expressions). This is illustrated by the following counter-example of non-surjective mappings: Example 5.

The set of all subexpressions of J 2 is { A,B,  X  r.C,B u  X  r.C,D } .  X  2 maps only to a subset of these subexpres-sions; there exists no mapping for the  X  X maller X  expressions (or I c of J c , respectively)  X   X  .

Now (  X  ac ,  X  ac )isobtainedfromthislabelledtreeby  X  removing all subtrees below nodes labelled with variables ( x, . . . ) Figure 1: Graph representing the relations between three justifications which are s-isomorphic via transitivity. B and  X  r.C . This shows that a substitution  X  can be non-surjective.

Despite the mappings being non-surjective, we require each subexpression to either have a corresponding variable in  X  which maps to it directly, or to occur as part of a larger subexpression which has a corresponding variable in J . This guarantees that the isomorphic justifications have the same number of subexpressions which correspond to variables in J .
While s-isomorphism covers a number of justifications that can be regarded as equivalent due to them requiring the same type of reasoning to reach the entailment, it only ap-plies to justifications which have the same number of ax-ioms. S-isomorphism does not take into account cases where the justifications differ only marginally in some subset, but where the general reasoning may be regarded as similar nonetheless. We therefore introduce the notion of lemma-isomorphism (l-isomorphism), which extends s-isomorphism with the substitution of subsets of justifications through in-termediate entailments, so-called lemmas . The general mo-tivation behind l-isomorphism is demonstrated by the fol-lowing example: Example 6.

It is straightforward to see that both J 1 and J 2 require the same type of reasoning from a human user. As the justi-fications only differ in the length of the atomic subsumption chains that lead to the entailment, we can certainly consider them to be similar with respect to some similarity measure. However, the two justifications are not considered isomor-phic with respect to the definitions for strict isomorphism or s-isomorphism. We therefore introduce a new type of iso-morphism which takes into account the fact that subsets of justifications can be replaced with intermediate entailments which follow from them.

A lemma  X  for a justification J is an entailment of a sub-set S of J . In order to define l-isomorphism, we need to introduce two more concepts: tidy axiom sets, and justifica-tion lemmatisations , that is, justifications which are enriched with lemmas, as defined by Horridge [6].

Tidy axiom sets prevent meaningless lemmatisations by ensuring that the set S that generates a lemma is consistent and does not entail synonyms for &gt; or  X  . They are defined as follows [6]: Definition 4. A set of axioms S is tidy if S 6| = &gt;v X  , S 6| = A v X  and S 6| = &gt;v A for all A  X  sig ( S ) .
The following definition of summarising lemmatisations is based on the definition of lemmatisations given by Horridge [6], however, with some modifications: first, Horridge X  X  defi-nition considers the cognitive complexity of a lemmatisation in order to ensure that a lemmatisation is easier to under-stand than the justification it is based on. As the complexity of a lemmatisation is not relevant for l-isomorphism, we drop this condition. Second, the original definition is too weak for use in l-isomorphism, as we will show with an example be-low; thus, we introduce a new condition for the justification subset S which ensures that the lemmas used for the lem-matisation are summarising . And finally, we simplify the definition to omit some unneeded details:
Definition 5. Let ( J , X  ) be a justification, let S = S S be a set of tidy subsets of J , and let  X  S = S  X  i be a set of lemmas such that S i | =  X  i . The set J  X  S = ( J \ S )  X   X  called a summarising lemmatisation of J if 2. S i are pairwise disjoint.
 If clear from the context, a summarising lemmatisation J
Proposition 3. Given a S i  X  S that is substituted with a lemma  X  i in a summarising lemmatisation J  X  S , there is no set S 0  X  S i such that S 0 | =  X  i .

Proof. This proposition follows from the minimality con-dition for justifications: given a justification ( J , X  ), we re-move a subset S i  X  X  and replace it with a lemma  X  i such that ( J \ S i )  X  X   X  i } is a justification for  X  . If there exists a subset S 0  X  S i such that S 0 | =  X  i , then it also holds that ( J \ S i )  X  S 0 | =  X  . Therefore, the axioms S i \ S 0 dant with respect to the entailment  X  , which violates the minimality condition for J  X  S .

Given the definitions for lemmatisations, we can now de-fine lemma-isomorphism as an extension to subexpression-isomorphism:
Definition 6. Two justifications ( J 1 , X  1 ), ( J 2 , X  lemma-isomorphic (( J 1 , X  )  X  ` ( J 2 , X  )) if there exist sum-marising lemmatisations J  X  S 1 1 , J  X  S 2 2 which are s-isomorphic: J
L-isomorphism using arbitrary summarising lemmatisa-tions as defined above carries two undesirable properties: first, the lemmatised justifications might differ strongly from the original justifications; in the most extreme case, the lem-matisation of a justification can be the entailment itself. We therefore have to introduce an additional constraint that en-sures that a lemmatisation is understandable to a user. Sec-ond, we cannot guarantee that l-isomorphism using arbitrary lemmas is in fact transitive, which means that l-isomorphism would lose the desirable property of being an equivalence re-lation. In order to demonstrate l-isomorphism in this paper, we therefore restrict lemmatisations to a very simple pat-tern, namely maximal atomic subsumption chains .

While research on human understanding of description logic is fairly limited, an exploratory study by Horridge et al. [7] found that chains of atomic subsumption axioms of the type S = { A 0 v A 1 ,A 1 v A 2 ...A n  X  1 v A n } are one of the easiest recognizable patterns for OWL ontology users. Given a chain S in a justification, often only the relation between the subclass A 0 in the first axiom and the superclass A n the last axiom is relevant for understanding how the axioms in S contribute to the justification. That is, the subsump-tion chain produces a summarising lemma  X  = A 0 v A n .
We call an atomic subsumption chain S = A 0 v ... v A n maximal if there is no longer chain S 0 = A 0 v ... v A n + k k  X  1. It is possible for a set of axioms to form an apparently maximal subsumption chain in which only a subset of the chain can be substituted by a summarising lemma, as shown in the following example: Example 7.
 The axiom set S 0 = { A v B,B v C,C v D } in Example 7 is a maximal atomic subsumption chain in J which entails A v D . It is clear to see, however, that the entailment does not hold in the lemmatisation J \ S  X  X  A v D } as the important lemmas A v C and C v D would be lost; that is, the lemmatisation based on S 0 is not summarising. We can only substitute the non-maximal chain S = { A v B,B v C } with its entailment A v C in order to obtain a summarising lemmatisation.

While substituting non-maximal chains is not problem-atic in itself, an implementation of the atomic subsumption chain lemmatisation to detect non-maximal chains would re-quire searching through all subchains of the maximal atomic subsumption chain in order to find a suitable, substitutable, chain. Therefore, our current implementation only attempts to substitute maximal chains, which may lead to false neg-ative results when attempting to compare two justifications which are only l-isomorphic through lemmatisations using non-maximal chains.

We can show [4] that allowing arbitrary summarising lem-matisations can lead to non-transitivity of l-isomorphism for justifications which contain multiple reasons for an entail-ment to hold, a phenomenon called internal masking [9]. Thus, disallowing justifications with internal masking would eliminate one cause of non-transitivity. However, whether this is the only restriction we have to apply in order to preserve the transitivity of lemma-isomorphism remains an open question. For the time being, we treat all results of the l-isomorphism implementation as possible approximations. This means that it is possible that some sets of justifications may be considered to be non-isomorphic when they actually are. Hence, we may potentially over-estimate the logical di-versity of a corpus of justifications and under-estimate the effects of l-isomorphism, which we consider acceptable for the purpose of demonstrating the concept of l-isomorphism in this paper.
In this section, we present a survey of a corpus of OWL ontologies from the biomedical domain. The purpose of this survey is to analyse the structural similarities of justifica-tions which are representative, in terms of size and expres-sivity, for the range of ontologies used in practise. In order to prevent bias through hand-picking  X  X uitable X  ontologies, our aim was to use an independently motivated corpus of ontologies. Thus, the choice was between a random sample of web ontologies (e.g. obtained from a web crawl) and an existing ontology repository. As the NCBO BioPortal ontol-ogy repository [16] contains a large number of actively used and well-studied ontologies which cover a broad spectrum of size and expressivity, it seemed a suitable choice for an extensive survey of justificatory structure.
The NCBO BioPortal is a web-based ontology repository which provides over 300 ontologies published by research groups from the biomedical domain. It also includes the full set of OBO Foundry 5 ontologies, which use a flat-file format that can be translated into OWL 2; therefore, the OBO ontologies were included in the corpus. At the time of downloading (May 2012), 322 OWL and OBO files were listed in BioPortal, of which 256 could be downloaded via the BioPortal REST interface and successfully parsed by the OWL API. Each downloadable ontology was merged with its imports closure and serialised as OWL/XML file. For prac-tical reasons, a processing timeout of 20 minutes was set for all reasoning tasks (consistency checking and classification). The overall timeout per ontology for each experiment was set to 90 minutes. The reasoners used were JFact version 0.9 and Pellet version 2.3.0. All experiments were run on a Mac Mini with a 2.7 GHz Intel Core i7 processor, with 16 GB RAM assigned to the JVM.

Due to the small number of  X  X aturally occurring X  unsat-isfiable classes in published OWL ontologies, we shifted our analysis from obvious  X  X rrors X , that is, unsatisfiable classes, to atomic subsumptions which represent the class hierarchy of an ontology. We computed the set of atomic subsump-tions of type A v B for named, satisfiable classes A and B of each ontology, including self-supporting entailments, and excluding tautologies such as A v&gt; . We then computed all justifications for the entailments and filtered out all  X  X rivial X  justifications, i.e. self-justifications as well as justifications which consisted only of an atomic subsumption chain. Due to performance issues, the justification generation and iso-morphism detection was limited as follows: The resulting set S s consisted of non-trivial 141,560 justi-fications for 19,097 entailments from 78 ontologies in the corpus. http://www.obofoundry.org/
The 78 ontologies in the corpus span a broad spectrum of sizes and expressivities, ranging from ontologies with as few as 4 classes and 5 logical axioms to as many as 38,640 classes and 68,777 axioms. Some of the basic metrics for the on-tologies in the corpus are shown in Tables 1. A complete list of the 78 ontologies (i.e. those containing some non-trivial justifications) including their metrics and experiment results can be found online. 6
Regarding their expressivity, 64 ontologies are OWL 2 DL ontologies, of which 18 are in the OWL 2 EL profile, 8 in OWL 2 QL, and 7 in OWL 2 RL. The remaining 14 ontolo-gies were OWL 2 Full. Note that the three OWL 2 pro-files are not exclusive, that is, an ontology can fall into sev-eral profiles. The description logic complexity in the corpus ranges from EL ++ (the 18 ontologies in the OWL 2 EL pro-file) to full OWL 2 DL expressivity ( SROIQ , 4 ontologies), with several ontologies being in a highly expressive descrip-tion logic ( SHQ or SRQ including either inverse properties I or nominals O ).
The general idea behind the implementation of a program to check whether two justifications are isomorphic is the comparison of the parse trees of the two justifications. Each axiom in a justification is parsed into its parse tree where the nodes are labelled with either entity names (properties or classes), OWL constructors, or integers (in the case of cardinality restrictions). The parse tree of a justification simply contains each axiom parse tree as child of a blank root node. The algorithm then traverses the trees and, at each node, performs a comparison to check whether the nodes can be matched according to the rules of the given isomorphism. While details of the implementation are omitted for space reasons, the complete code is made available online. 7
In order to determine the frequency of isomorphic justifi-cations in the corpus, we analysed the justifications for the entailments in S s in three different experiments: Ex. 1: justifications for a single entailment.
 Ex. 2: justifications for all entailments within an ontology. Ex. 3: justifications for all entailments of all ontologies in The isomorphism statistics were generated for all three types of isomorphism, that is, strict, subexpression-, and lemma-isomorphism.

The mean times per ontology required to determine iso-morphism between justifications (including parsing the jus-https://sites.google.com/site/isocikm2013/ https://sites.google.com/site/isocikm2013/ tifications and existing templates from file) ranged between 22.8 seconds (for strict isomorphism between justifications for individual entailments) and 192.3 seconds (for checking s-isomorphism within an ontology).
The first experiment investigates the occurrence of struc-turally similar justifications for the justifications of each in-dividual entailment in the corpus, which gives us an indi-cation of the applicability of isomorphism-based debugging techniques for individual entailments with multiple justifi-cations.

Strict isomorphism reduces the average number of justi-fications per entailment from 7.4 to 4.9 templates per en-tailment (  X  = 9.5, m = 2), which is a reduction by 33.7% compared to the full corpus.

On average, a template covers 1.5 justifications (standard deviation  X  = 2.3, median m = 1), with some ontologies con-taining entailments with large numbers of isomorphic justi-fications. One such example is the Orphanet Ontology of Rare Diseases , whose dominating templates are of the type  X  1 = { C 1 v C 2 ,C 2 v X  p 1 .C 4 ,domain ( p 1 ,C 3) }| = C 1 v C 3 with atomic subsumption chains of arbitrary size in place of the first subsumption axiom, and some variations that include subproperty axioms. Two of the templates of this type cover the majority (110 and 105 justifications, respec-tively) of the 220 justifications each for several entailments in the ontology. From personal contact with the Orphanet developers we have learned that this OWL ontology is in fact generated automatically from an existing medical database, which explains the frequent occurrences of uniform justifi-cations.

S-isomorphism across the justifications of individual en-tailments only affects a very small number of entailments in the corpus. The average number of templates per entail-ment, compared to the full corpus, remains nearly identical at 4.915 for strict and 4.903 for s-isomorphism (  X  = 9.5, m = 2). Compared to strict isomorphism, the number of tem-plates is reduced by only 0.3%. This small reduction does not affect the average number of justifications per template, which remains at 1.5 justifications. Overall, only 166 entail-ments (0.9% of the total corpus) from 15 of the 78 ontologies are affected by s-isomorphism; the remaining 63 ontologies contain the same number of templates as for strict isomor-phism.

While s-isomorphism does not have a strong effect on in-dividual entailments, l-isomorphism shows a more visible re-duction in template numbers. 8 On average, the justifications are reduced to 4.7 templates per entailment (  X  = 8.8, m = 2), which is reduction by 4.1% compared to both strict and s-isomorphism.
Note that S s does not contain any justifications that consist entirely of atomic subsumption chains. That is, all atomic subsumption chains that are affected by l-isomorphism will be strict subsets of the justifications in the corpus. Table 2: Reduction and template coverage per ontology.
A total of 1,492 entailments (7.8% of the total corpus) from 43 ontologies are affected by l-isomorphism, with an average reduction of 30.3% compared to strict isomorphism for those entailments. The strongest effects can be seen in the Fission Yeast Phenotype ontology, where the justifica-tions for several entailments only differ in the length of their atomic subsumption chains and thus are each reduced to a single template of the type
Across the justifications for all entailments of an ontology, the reductions caused by the three equivalence relations are clearly more visible than for individual entailments. How-ever, the effects of the relations differ strongly across the 78 ontologies, with strict isomorphism generally having the strongest impact, and s-isomorphism having the lowest im-pact. Overall, only three ontologies show no effect for any of the three types of isomorphism; two of these contain only a single justification (which means there is no reduction pos-sible), while one ontology ( OBOE SBC ) contains 5 distinct justifications. Table 2 shows an overview of the mean re-duction and template coverage for the three isomorphism types.

Compared to the results for individual entailments, the effects of the equivalence relations are much more significant if we consider the justifications for all entailments in an ontology. On average, an ontology in S s contains 1,814.9 justifications; these are reduced to 436.1 templates through strict isomorphism, which is an average reduction by 73.1%. 4 ontologies with small numbers of justifications (less than 10) are not affected by strict isomorphism, while the remain-ing 74 ontologies show reductions of up to 99.6%. 28 of those ontologies are reduced by more than 90%; with an average number of 3,092 justifications per ontology, these reductions reveal significant numbers of structurally similar justifica-tions.

The templates cover an average of 8.2 justifications each (  X  = 22.4, m = 2), with some of the highest coverage oc-curring in the Orphanet ontology. The 3,948 justifications in this ontology can be reduced to only 14 templates, which are all variations (featuring atomic subsumption chains of varying length) of the template  X  2 we have shown above.
S-isomorphism reduces the justifications in the corpus by an average of 74% per ontology, which is only a small change compared to strict isomorphism. The number of justifica-tions covered by a single template is slightly increased to 8.8 (  X  = 23.5, m = 2) justifications per template.

Again, the majority of ontologies (44 of 78) are not af-fected by s-isomorphism, whereas 5 ontologies show reduc-Table 3: Template frequency and coverage (mean, median, min, max) across the corpus.

Type Count % of S s Mean Med Min Max all 141,560 100% ----strict 12,527 8.8% 11.3 2 1 2,072 subex 10,952 7.8% 12.9 2 1 2,128 lemma 5,487 3.1% 25.8 3 1 7,490 tions of between 20% and 38.3% compared to strict isomor-phism. This includes the Bleeding History Phenotype on-tology (1,158 justifications, 60 isomorphism templates, 37 s-isomorphism templates), which contains a number of jus-tifications of the type which is s-isomorphic to justifications that contain a named class in place of the disjunction C 2 t C 3 in the subsumption axiom, thus matching template  X  1 .

Closer inspection of the Lipid ontology (3,258 justifica-tions, 1,762 isomorphism templates, 1,471 s-isomorphism templates) reveals that a large number of justifications in the ontology consist of a single equivalence axiom of the form C 1 v C 2 u x with the entailment being C 1 v C 2. The remainder of the conjunction, represented by x , consists of a number of complex expressions of varying length and nesting depth. While s-isomorphism captures these types of justifi-cations (since the remainders x can all be matched against each other), the actual reason for their similarity lies in their identical cores C 1 v C 2, with the remainder x being a su-perfluous part.

As for single entailments, l-isomorphism has a stronger effect on the justification corpus than s-isomorphism when applied across each ontology, as it reduces the justifications in an ontology by an average of 78.2%.

A template covers an average of 12 justifications (  X  = 38, m = 3) in each ontology, which is a visible increase from the 8.8 justifications covered by s-isomorphism. 13 ontologies (with an average number of 32.1 justifications) show no reaction to l-isomorphism, whereas 12 ontologies containing large numbers of justifications (mean = 1,555.8) see a reduction of 41.7% and more, up to 82.1% compared to s-isomorphism. In the final stage of our analysis of isomorphism in the BioPortal corpus, we will look at the templates spanning all justifications for all entailments across the ontologies in the corpus. While we have seen that isomorphic justifica-tions occur frequently within an ontology, we now analyse the structural similarity of justifications across multiple on-tologies. Table 3 gives an overview of the numbers of tem-plates in S s for the three isomorphism types against the full justification corpus, as well as the coverage (number of jus-tifications) per template.

The 141,560 justifications in S s are reduced to only 12,527 templates, which is a reduction by 91.2%. On average, 11.3 justifications (  X  = 54.3, m = 2) share the same template, with the 8 most frequent templates covering over 1,000 justi-fications each. The most frequent templates (by numbers of justifications covered) are all variations of the template  X  that is, a combination of a domain axiom and a subsumption axiom with an existential restriction on the RHS, including some additional subsumption axioms, an equivalence axiom in place of a subsumption, or variations of the filler.
If we look at the spread of templates across the ontologies in the corpus, we find that only 8.7% of the templates cover justifications in multiple ontologies, with a maximum spread of 26 ontologies for two templates which are, again, varia-tions of  X  1 . Figure 2a shows the frequency distributions of the justification templates across the justifications and on-tologies in S s . The y-position of a data point indicates the number of justifications a template covers is, and the bubble size indicates the number of ontologies a template occurs in.
We can see that a small number of templates covers large numbers of justifications, with a steep drop to 10 and less justifications per template around the 2,000 mark. If we take a closer look at the numbers, we find that the majority of justifications in the corpus (81.2%) are covered by the 2,000 most frequent templates (out of 12,527), and a third (33.1%) of justifications are even covered by the 100 most frequent templates.

The effects of s-isomorphism across the corpus are only marginal compared to strict isomorphism. The justifica-tions are reduced to 10,952 templates, which is an overall reduction by 92.2% and a 1% difference compared to strict isomorphism. The number of justifications covered by a sin-gle template is slightly increased with an average of 12.9 justifications (  X  = 59, m = 2) per template.

The most frequent template (by numbers of justifications) is again  X  2 , which covers 2,128 (1.5% of the total set) justifi-cations in 26 ontologies. Across the ontologies in the corpus, the most frequent template occurs in 28 of the 78 ontologies. This template is a single equivalence axiom which we have already seen in the Lipid ontology: The superfluous part x matches a number of operands such as atomic classes and existential restrictions. Interestingly, while this template occurs in the highest number of ontolo-gies, it only covers 573 justifications across the corpus.
Across all justifications in the corpus, l-isomorphism has a clearly visible impact. The 141,560 justifications are reduced to only 5,487 templates, which is less than half as many tem-plates as the strictly isomorphic ones, and an overall reduc-tion of 96.9%. Figure 2b shows the frequency of templates for l-isomorphism.

On average, a template covers 25.8 justifications (  X  = 208.5, m =3); however, the large standard deviation shows that the distribution of justifications per template has shifted towards a few very frequent templates, whereas there is still a  X  X ong tail X  of 1,878 templates that match only a single jus-tification. If we consider the distribution of justifications per template over the quartiles of the corpus, 25% of the justifications in S s can be covered by the 8 most frequent templates, 50% by the 44 most frequent templates, and 75% by the 277 (out of 5,487) most frequent templates. The most frequent templates are all subtle variations of a tem-plate containing only two or three axioms:  X  4 = { C 1 v C 2 ,C 3  X  C 2 t C 4 ,C 3 v C 5 }| = C 1 v C 5  X  5 = { C 1 v C 2 ,C 5  X  C 2 t C 3 }| = C 1 v C 5  X  6 = { C 1 v C 2 ,C 3  X  C 2 t C 4 t C 6 ,C 3 v C 5 }| = C 1 v C 6  X  7 = { C 1 v C 2 ,C 5  X  C 2 t C 3 t C 4 }| = C 1 v C 5 Note that any subsumption axiom in the templates  X  4 to  X  7 corresponds to an atomic subsumption chain of arbitrary length. These templates each cover between 4,206 and 7,490 justifications, which amounts to 17% of all justifications in the corpus. If we look at the number of ontologies a template occurs in, the most frequent templates are  X  3 and  X  5 , both of which can be found in 28 of the 78 ontologies in the corpus. Overall, however, as with strict and s-isomorphism, only a fraction of the templates (8.5%) occur in multiple ontologies, while the majority of templates (5,018 out of 5,487) can only be found in a single ontology.
As we have already seen in our discussion of s-isomorphism, a justification can potentially be non-isomorphic only due to it containing superfluous subexpressions that do not con-tribute to the entailment. In order to determine to which ex-tent superfluous parts affect isomorphism, we computed the laconic versions for justifications in S s , which resulted in a corpus S sl containing 47,667 laconic justifications, of which 31.6% were now atomic subsumption chain justifications or self-justifications. The number of laconic justifications is significantly lower compared to S s for two reasons: first, due to the high runtime of the laconic justification genera-tion mechanism, some justifications could not be computed; hence, due to timeouts, the number of entailments in S is only 18,300 (compared to 19,097 in S s ). More striking, however, is the effect of removing superfluous expressions on the equality between justifications: multiple regular jus-tifications for individual entailments frequently resulted in the same laconic justification, which drastically reduces the number of justifications despite the difference in the number of entailments being only small. Table 4 shows a compar-ison of the cross-corpus reductions for laconic and regular justifications in S s and S sl , respectively.

Across S sl , strict isomorphism reduces the justifications to 3,653 templates, which is a reduction to 7.6% (compared with 8.8% for the regular justifications in S s ). 8 out of the 10 most frequent templates (by number of justifications they cover) are atomic subsumption chains between 1 and 8 ax-ioms. Interestingly, this also indicates that, despite the ap-parent complexity of many justifications in the corpus (recall that we only computed the laconic versions of non-trivial justifications), the actual reasoning behind those justifica-tions comes down to simple atomic subsumption.

Perhaps unsurprisingly, s-isomorphism only has a small effect on S sl . The laconic justifications are reduced to 2,936 templates, which is a reduction to 6.2% of the corpus. Just as with strict isomorphism, this is only a marginally stronger reduction compared to the corpus of regular justifications (7.8%).

Finally, l-isomorphism reduces the laconic justifications in S sl to only 1,789 templates, which is an overall reduc-tion to 3.8% of the set of laconic justifications. In terms of the overall proportion this is a smaller reduction than for l-isomorphism in regular justifications (3.1%). However, since the set S sl is only roughly a quarter of the size of S this smaller relative reduction is not too surprising. As we could already expect based on the prevalent templates we found for strict isomorphism, the most frequent template is a single atomic subsumption axiom, which covers atomic subsumption chain justifications of arbitrary length. This template covers the 15,066 justifications (31.6%) in the cor-pus we have already mentioned above, and can be found in 61 of the 78 ontologies.
In this paper, we introduced two new equivalence relations between justifications for entailments of OWL ontologies, subexpression-isomorphism  X  s and lemma-isomorphism  X  ` , which capture various degrees of structural similarities be-tween justifications. Our analysis of justification isomor-phism in the BioPortal corpus revealed that strict isomor-phism and lemma-isomorphism have a significant impact on the landscape of justifications in our sample: the 141,560 justifications in the corpus are effectively reduced to only 5,487 distinct templates. If we remove all superfluous ex-pressions from the justification axioms, this logical similari-ties between justifications are even more visible, as the jus-tifications can be reduced to only 1,789 templates, which is just over 1% of the size of the original corpus. This analysis shows us that the logical diversity of OWL justifications can be considerably lower than it appears, while the small effect of s-isomorphism also indicates that there exists a certain amount of real logical diversity in the modelling of ontolo-gies, and that complex subexpressions are generally not used in a propositional way.

For application in OWL debugging tools, both strict iso-morphism and lemma-isomorphism seem promising as the basis for improved debugging techniques, such as grouping structurally similar justifications and presenting a user with an abstract template rather than a set of justifications. As we have seen, this can significantly reduce the number of justifications a user has to inspect in order to understand the reasoning behind them, thus reducing their effort when it comes to repairing the justifications. For future work, we are planning to design and implement such a debugging tool, for example as a plugin to the Prot  X eg  X e 4 editor, and conduct user evaluation studies to determine the usefulness of such a tool. [1] F. Baader, R. K  X  usters, A. Borgida, and D. L. [2] F. Baader and B. Morawska. Unification in the [3] F. Baader and P. Narendran. Unification of concept [4] S. Bail. The Justificatory Structure of OWL [5] S. Bail, M. Horridge, B. Parsia, and U. Sattler. The [6] M. Horridge. Justification Based Explanation in [7] M. Horridge, S. Bail, B. Parsia, and U. Sattler. The [8] M. Horridge, B. Parsia, and U. Sattler. Laconic and [9] M. Horridge, B. Parsia, and U. Sattler. Justification [10] I. Horrocks, O. Kutz, and U. Sattler. The even more [11] A. Kalyanpur, B. Parsia, and B. Cuenca Grau.
 [12] A. Kalyanpur, B. Parsia, E. Sirin, and J. Hendler. [13] J. S. C. Lam, J. Z. Pan, D. Sleeman, and [14] T. A. T. Nguyen, R. Power, P. Piwek, and S. Williams. [15] T. A. T. Nguyen, R. Power, P. Piwek, and [16] N. F. Noy, N. H. Shah, P. L. Whetzel, B. Dai, M. Dorf, [17] S. Schlobach and R. Cornet. Non-standard reasoning
