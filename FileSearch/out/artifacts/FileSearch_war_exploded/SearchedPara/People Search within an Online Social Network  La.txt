 Popular online social networks (OSN) generate hundreds of terabytes of new data per day and connect millions of users. To help users cope with the immense scale and influx of new information, OSNs provide a search functionality. However, most of the search engines in OSNs today only support key-word queries and provide basic faceted search capabilities overlooking serendipitous network exploration and search for relationships between OSN entities. This results in siloed in-formation and a limited search space. In 2013 Facebook in-troduced its innovative Graph Search product with the goal to take the OSN search experience to the next level and fa-cilitate exploration of the Facebook Graph beyond the first degree. In this paper we explore people search on Facebook by analyzing an anonymized social graph, anonymized user profiles, and large scale anonymized query logs generated by users of Facebook Graph Search. We uncover numerous in-sights about people search across several demographics. We find that named entity and structured queries complement each other across one X  X  duration on Facebook, that females search for people proportionately more than males, and that users submit more queries as they gain more friends. We in-troduce the concept of a lift predicate and highlight how a graph distance varies with the search goal. Based on these insights, we present a set of design implications to guide the research and development of the OSN search in the future. graph distance; query log analysis; Facebook; people search H.3.3 [ Information Search and Retrieval ]: Information filtering, Query formulation, Search process
Online Social Networks (OSN) have revolutionized the way people communicate with each other by connecting mil-lions of individuals on the same platform, e.g. Facebook on average had 802 million daily active users in March 2014 1 Inside OSNs users constantly post status updates and share various aspects of their lives via photos, check-ins, and etc. This ease of content production coupled with the scale of OSNs have resulted in the exponential growth of informa-tion. Popular OSNs generate hundreds of terabytes of new data per day and contain billions of photos [3].

To help users cope with the immense scale and influx of new information, OSNs provide a search functionality. Typ-ically, an OSN search engine allows users to submit keyword queries and retrieves OSN entities (people, photos, and etc.) based on a textual similarity of an entity description to a query with some adjustments for the entity popularity, re-cency of update, and proximity to a searcher. Examples in-clude such OSNs as LinkedIn, Pinterest, and Foursquare. To facilitate discovery, OSNs usually provide a faceted search interface [42], which allows users to filter entities by express-ing conditions on their attributes. However, until recently none of the existing OSNs provided an interactive inter-face for rapid and flexible formulation of structured queries or supported search for relationships between entities, e.g.  X  Friends of my friends living in Shanghai  X . Therefore, the search was still limited resulting in siloed information.
Human-Computer Information Retrieval (HCIR) [27, 28, 50] proposed a fresh paradigm to think about the search within an OSN  X  one which combines navigational and ex-ploratory capabilities. HCIR aims to  X  empower people to explore large scale information bases but demands that peo-ple also take responsibility for this control by expending cog-nitive and physical energy  X , e.g. make an effort to write a structured query. Embracing this paradigm, in 2013 Face-book introduced its innovative Graph Search product with the goal to take the OSN search experience to the next level and facilitate exploration of the Facebook Graph beyond the first degree. Facebook Graph Search allows users to search for entities and relationships between entities and, following the terminology from [49], supports: (a) interactive free-text queries , like  X  Lady Gaga  X  (navigational queries for one entity by name); (b) interactive structured queries , like  X  Photos of people who live in China  X  (exploratory queries for filtering entities with conditions on attributes; the instances of a rich query grammar); (c) one-shot free-text queries , like  X  query log mining  X  (limited to users X  status updates). All queries are separated into three different logs based on a query type.
Since Facebook Graph Search is the first search product of its kind operating at scale and used by millions of people, http://newsroom.fb.com/Key-Facts it is important to study its usage patterns and dynamics to guide the HCIR research and innovations in search within OSNs in the right direction going forward. In this paper we contribute by analyzing large scale anonymized query logs generated by users of Facebook Graph Search. We focus on the people search query logs because the people vertical is the most popular search vertical on Facebook. Only two query types, (a) and (b), were considered because the last one wasn X  X  available in the logs provided for the analysis. The main contributions of this paper are presented below. First, we analyze how named entity and structured queries co-exist within one search product and establish their com-plementary nature. This finding showcases the importance of each query type for enabling flexible search within OSNs. Second, we share unique insights about people search on Facebook related to a graph search distance via anonymized query logs and an anonymized social graph mining. Third, we perform a privacy-preserving demographic profiling and discover demographic-specific people search patterns. Fi-nally, we present insights about structured grammar usage, which is unique to the Facebook Graph Search product.
In the next sections we cover related work, definitions, and background material; describe the data sets; and sum-marize high level properties of logs. Starting from Section 5, we share multiple insights about Facebook Graph Search us-age. We present design implications in Section 8 and discuss limitations and conclusions of the work thereafter.
Research on people search has a long history. Early works studied ways to automatically assign reviewers to papers [12] or find topical experts [36] by representing people via docu-ments they are associated with and framing people search as a traditional information retrieval or recommendation prob-lem. However, as [40] noticed, it fundamentally changes the nature of the problem when the objects are people rather than documents. People form social relationships, and there-fore, ranking people is qualitatively more complex than rank-ing textual documents. As a result, [40] proposed the con-cept of social matching to emphasize the social dimension. In turn, that led to the research and development of social matching systems, such as Referral Web [22], Expertise Rec-ommender [30], and Aardvark [16], which return relevant people taking into account the social similarity between a candidate result and a searcher. [1] studied the fundamen-tal properties of social networks making social search pos-sible and concluded that  X  where the data is incomplete or reflects non-hierarchical structure, tools that support social search should assist users by either providing a broader view of their local community or directly assisting users through a global analysis of the network data  X  pointing out to the importance of search within OSNs. Recently, exploratory people search was investigated in the context of a People-Explorer project [15], which allows users to explicitly model their search preferences using sliders. Based on extensive ex-periments, the authors concluded that it is crucial to model task difference and user variance in people search.
Looking at the related work from a query log mining per-spective, there is a large body of research dedicated to the analysis of web search engine usage. Starting from the influ-ential taxonomy of web search queries [8], researchers stud-ied query logs to understand how users search, analyzing the length [5, 20, 34, 39], topical distribution [4, 35], and tem-poral patterns [4] of queries. Query logs were also used to understand search sessions [21] and re-finding [38, 44].
Because we are exploring people search, which is a type of vertical search operating in the people vertical, it is impor-tant to consider studies of vertical search engine logs. [31] studied queries issued to a blog search engine, and found that people were particularly likely to search for named en-tities, e.g. people and blogs on a topic of interest. [37] com-pared blog queries with news queries, observing that queries often refer to people and temporally relevant content. [39] compared microblog search and web search, and found that Twitter users similarly search for temporally relevant infor-mation and people. A study of a web people search query log [48] revealed that a significant number of users type just one query, that people search has lower click-through rates (CTR) compared to web search, and that the most popular results come from social media (OSNs). Recently, people search behavior and the role of graph distance in name and non-name queries was explored using the LinkedIn log [17]. It was reported that for name queries users pri-marily click on only one of the results and a shorter graph distance leads to higher CTR, while for non-name queries users are more likely to click on multiple results that are not among their existing connections, but with whom they have shared connections, i.e. the second degree connections.
Search logs were also used to uncover relationships be-tween the search behavior and demographic characteristics of users. [6, 45] described the methodologies for usage of query logs and demographic profiles for search personaliza-tion. [47] presented the demographic-specific insights about search sessions and query topics. Several studies explored the influence of gender and age on search behavior. It is reported based on a series of interviews that males used search engines more than females in 2004 [13], but in 2012 the numbers equalized [32]. By analyzing web search en-gine usage, [25] found that females write longer queries than males. [10] investigated the search behavior of users retriev-ing information for children.

This paper complements and extends existing studies from three perspectives. First, while there is a large body of work on the topic of people search from an algorithmic side, there are only two people search query log studies [17,48] and only one of them is about search within an OSN [17]. We continue this line of work and answer previously untouched questions, e.g.  X  X ow does search behavior vary with age? X . Addition-ally, we present novel insights about structured grammar usage unique to Facebook Graph Search, e.g.  X  X hat are the strategies for a name disambiguation? X . Second, we ex-tend the research on social search by studying query logs of an entity search system. Existing query log studies in the blogosphere [31], web [48], and Twitter [39] focused on docu-ment search systems. Third, our analysis uses logs generated by the system supporting several different query types, and therefore, we can do cross-type search behavior comparisons. Typically, search systems support only one query type.
In this section we describe the specifics of a user interface and provide definitions necessary to understand the paper.
The search process starts by navigating to a Typeahead interface (Figure 1(a)). In the null-state, before any symbol is typed, Typeahead presents 7-8 query suggestions person-alized for a searcher. These might include named entity queries or simple structured grammar queries. On every keystroke the Typeahead results get updated, and the user is presented with the input-dependent suggestions. At any point in time the user can pick a relevant result among the suggested options or keep typing. Suggestions, representing named entities, serve as search results directly, and upon click redirect to the corresponding entity page. Structured grammar queries lead to a standard search engine results page, called a Browse interface (Figure 1(b)), where the user is presented with a list/grid of entities matching the query conditions. For example,  X  Lady Gaga  X  is a named entity query, which upon click will navigate a searcher to the page maintained by Lady Gaga.  X  People who like Information Re-trieval and live in USA  X  is an example of a grammar query, with three predicates ( people , like , residents ) and two en-tities ( USA :Country, Information Retrieval :Field of Study). To effectively explore entities on Facebook, users may con-struct sophisticated structured grammar queries by concate-nating predicate-entity pairs using a boolean AND operator. The search engine supports queries for entities in dozens of categories such as Apps , Pages , People , Posts , and others.
Before we proceed to the analysis, it is useful to define some terminology. To make the definitions clear, where nec-essary we reference an example shown in Figure 2.

Person: In our case, people are represented as entities from: (a) a User category with all standard capabilities, such as friending, commenting and so forth; (b) human-like subcategories of a Page category such as Athlete , Music Band , Politician , and others  X  a broadcast-style account, typically used by celebrities to interact with their fans. One individual could have a User account and be an admin for several Pages . Unless otherwise stated, in the rest of this paper we focus on queries for Person from the User cate-gory. We only consider queries for Person from the Page category while discussing celebrity search in Section 6.
Celebrity: According to [29, 43], a celebrity is a  X  highly visible in the media and overly public individual, who usually has emerged from the entertainment or sports industry and whose private life attracts greater public interest than the professional life  X . For consistency, we define a celebrity as a Person with more than 10000 friends, fans, or followers.
Functional Predicate: In typed logic, F is a functional predicate with a domain type T and a codomain type U if, given any object X of type T , F ( X ) is an object of type U [19]. The type of the predicate coincides with the codomain type. Similarly, a query type has the type of the result. Search grammar consists of numerous functional predicates, which perform typed mappings defined on the entities. For example, friends is a functional predicate that, given an entity of type User , produces a set of friends for this user and, hence, is a User predicate; photos-in , given an entity of type Location , produces a set of photos taken in that location and, hence, is a Photo predicate.

Semantic Query Template: Grammar queries consist of keywords, entities, and functional predicates, which can be combined using a boolean AND operator and functional su-perposition. An example query  X  Photos of Alice and friends of Alice and males named Bob who live in California  X  has a parsing tree shown in Figure 2(a). It has functional pred-icates as inner-nodes and keywords (a quoted string) and entities of types User and State as leaves. Because Face-book Graph Search is a highly personalized search engine, almost any two query parsing trees are different. However, semantics of these queries might be similar. For example, users may search for their friends by name, but names of the friends are likely to be different. Therefore, to study search patterns at a more general level, we categorize all grammar queries into factor classes [26] based on the structure of the corresponding parsing tree. First, we replace all leaves with the generic sentinel, e.g.  X  Alice  X ,  X  Bob  X , and  X  California  X  are mapped to  X  $  X . Second, we sort tree nodes level-by-level using a lexicographic ordering on node names. Such factor classes are called Semantic Query Templates and each query goes to one class. An example is illustrated in Figure 2. Figure 2: A grammar query (a) after a few transfor-mations becomes a Semantic Query Template (b).

Graph [Search] Distance: The entities of all types (ver-tices) and various relationships between them (edges) form a Facebook Entity Graph (a Social Graph is an undirected subgraph of the Entity Graph made of only User vertices and friends edges). We use a traditional graph theoretic definition of the graph distance as the minimal number of edges connecting two given vertices [7]. We categorize all User queries into three major classes based on the graph distance between a searcher and a result:
For example, a user searching for a friend of a friend by name, e.g.  X  John Smith  X , performs a Non-friend query.
It is important to note that while named entity queries are not ambiguous based on the categorization above, the degree of a structured query is not strictly defined since it might contain multiple entities and various predicates. Therefore, for structured grammar queries we use the following distance calculation algorithm. We only consider grammar queries in-volving at least one User entity, such as  X  Photos of User1 and User2  X  or  X  Places visited by me  X . We then look at each entity involved in a query and assign it a distance us-ing the Social Graph and functional superposition of User predicates. Finally, we compute a bit vector with the three components, one for each of the three classes of graph dis-tance, and normalize it by the number of non-zero compo-nents. Therefore, a grammar query might contribute to the weighted count for each of the graph distances.
 For clarity, let us apply this algorithm to the query in Figure 2(a) by enumerating hypothetical searchers. Each User entity participates in a path from the root to this entity in the parsing tree: intersect  X  photos-of  X  friends  X  Alice and intersect  X  photos-of  X  Alice . If the searcher is Alice, the output vector is (0 . 5 , 0 . 5 , 0), a half for herself and a half for friends of Alice. If the searcher is a friend of Alice, the output vector is (0 , 1 , 0) because both paths are about Alice, who is one edge apart from the friend. If the searcher is not a friend of Alice, the output vector is (0 , 0 , 1).
This and other custom data processing pipelines were im-plemented as MapReduce jobs [9]. Simple aggregation statis-tics were computed using Hive [41].
We study people search behavior using four data sets col-lected at Facebook: (a) one which gives insight into the navi-gational search  X  an anonymized log of named entity queries; Data Set Attribute Count Named Entity Query (NEQ) Log Users 3 M Structured Query (SQ) Log Users 3 M Social Graph Vertexes 858 M User Profiles Users 858 M
Table 1: Basic statistics about the data sets used. (b) another which gives insight into the exploratory search  X  an anonymized log of structured queries; (c) one which al-lows us to calculate graph distances  X  an anonymized Social Graph; (d) one which allows us to discover demographic-specific patterns  X  a set of anonymized User Profiles. Query logs were collected in the second half of 2013. The Social Graph and User Profiles were captured on 2013-10-17. The sizes of the data sets are given in Table 1.
The log contains named entity queries for Person from three million randomly sampled en_US (English, USA) users, who made at least one such query both in the month preced-ing the study and during the study periods. This allowed us to level novelty effects and observe a stable search be-havior representative of a general population. Finally, after filtering we worked with 58 . 5 million queries. Each query log record includes such fields as an anonymized id of a searcher, an anonymized id of an entity to be searched, a time stamp, an entity type, and the query metadata.
The log contains structured grammar queries of three mil-lion randomly sampled en_US (English, USA) users, who made at least one such query both in the month preceding the study and during the study periods. Unlike named entity queries, which are handled purely by Typeahead and always require a query writing or a suggestion selection, each struc-tured grammar query and the corresponding Browse search engine results page (SERP) gets a unique URL, which can be shared and accessed without writing a query. We excluded such records from the log to make sure that it contains only authentic user-generated queries. Finally, after filtering we worked with 10 . 9 million structured grammar queries.
Participants in the Structured Query Log are independent from the participants in the Named Entity Query Log. Any overlaps are due to coincidence. Although the samples are independent and we don X  X  join them, this doesn X  X  prevent us from discovering general insights for both query types.
We used a snapshot of the anonymized Social Graph made of 858 million entities and 270 billion edges. To gauge an understanding of search patterns for different demographic slices, we used an anonymized data set with the four user profile attributes: age, gender, number of friends, and celebrity status. Using information from the profiles, we performed checks for representativeness of our samples by comparing the key statistical properties of attribute value distributions for a sample and all 858 million profiles. The differences were insignificant because of the large sample size, which aligns with the reasoning on significance for big data [45]. Figure 3: Power law graphs for query frequency of Named Entity (left) and Structured (right) Queries.
Characteristic of online usage behavior, we observed power law distributions for query popularity and user activity. Fig-ure 3(a) shows the query frequency distribution in a log-log scale for NEQ, which follows a power law with the slope  X  = 2 . 63. Figure 3(b) shows three query frequency distri-butions in a log-log scale for SQ. Each graph corresponds to a different definition of a unique grammar query: (a) one which at a display form level (the query string), e.g.  X  Photos of Alice and Bob  X , has the slope  X  = 2 . 38; (b) one which at an entity level, e.g. { Alice , Bob } , has the slope  X  = 2 . 08; (c) one which at a semantic template level, e.g.  X  Photos of $ and $  X , has the slope  X  = 1 . 15. As we can see, most of the queries are issued only a few times; however, there are some very popular queries. The power law also holds for user ac-tivity with the slopes  X  = 2 . 43 for NEQ and (a)  X  = 2 . 08, (b)  X  = 1 . 90, and (c)  X  = 1 . 13 for SQ, which shows that there are some very avid searchers. This observation is pre-dictable and aligns with existing log studies [2, 24, 48].
To shed light on the semantics of the most popular people queries, we computed the frequency distribution over Person subcategories of the Page category for the top-1000 celebrity Page queries for both NEQ and SQ, shown in Table 2. Both distributions are quite similar to each other and follow a power law. Musicians, public figures, and actors represent the three most popular celebrity Page categories.

Rank NEQ Perc. SQ Perc. 1 Musician/Band 32.2% Musician/Band 27.7% 2 Public Figure 19.4% Actor/Director 26.9% 3 Actor/Director 17.8% Public Figure 19.1% 4 Entertainer 8.2% Entertainer 8.4% 5 Artist 7.4% Artist 6.4% 6 Athlete 7.3% Athlete 5.2% 7 Character 2.5% Character 2.3% 8 Comedian 2.2% Politician 1.8% 9 Politician 1.9% Author 1.3% 10 Author 1.1% Comedian 0.8% Table 2: Semantics of the top-1000 celebrity queries.
Contributing to the line of work on repeat queries [33, 38], we looked at the query frequency from a different perspective and computed an average query repetition ratio per user, i.e. a fraction of unique queries out of all queries. Since in web search navigational queries are repeated differently from oth-ers [33], it is worth seeing how NEQ and SQ compare to each other in our scenario. We found that the repetition ratio for NEQ is 0 . 56. For each definition of a unique SQ, the repeti-tion ratios are (a) 0 . 72, (b) 0 . 62, and (c) 0 . 47, respectively. Therefore, users search for different people using SQ more than NEQ and repeat Semantic Query Templates to learn about different people . Surprisingly, we found that the repe-tition ratios both for NEQ and SQ stay the same for all three classes of queries based on the graph distance. One inter-esting implication from it is that users repeatedly search for non-friends without adding them as friends. The repetition ratios stay the same for various demographic slices.
Unique to this study are the insights about people search for various demographics and graph distances. The graph distance is the key parameter to quantify users X  tendency for OSN exploration via search. The distribution over the graph distances is presented in Table 3. Other alternatives to quantify the OSN exploration via search are the number of unique queries or the repetition ratio. They have been considered in the previous section.
 Query Type Self Friend Non-friend NEQ 0 . 6% 57.6% 41 . 8% SQ 5.2% 31 . 2% 63.6% Table 3: Query distribution over graph distances.

Users search for friends using NEQ and for non-friends using SQ. This demonstrates the importance and utility of having both query types to enable more effective exploration of the Social Graph. Self queries are negligible compared to an overall query volume, yet there is a significant difference between NEQ and SQ Self queries. Users search for them-selves more using SQ. We think that this is because SQ are used to curate personal data published on Facebook, like  X  My Photos  X , while there are many other ways to navigate to a personal profile beyond using NEQ for yourself.
Drilling down, we study people search behavior for differ-ent demographic slices. Among many available options, we picked the four attributes of the user profile: age, gender, number of friends, and celebrity status. Age and gender were used in multiple existing log studies [6, 11, 45 X 47], and it is interesting to compare their findings with the ones for Facebook. Number of friends and celebrity status are new attributes unique for this log study, which allow to capture the social dimension specific to search within OSNs.
We present a series of figures for each of the attributes in question. In the first column, we show fractions of the Friend queries out of all non-Self User queries for a set of bins; in the second column, we show the search trends for Named Entity User queries; in the third column  X  for Structured User queries. We focus on Friend and Non-friend queries, since Self queries are not common. Figure 4 presents how the graph distance varies with age. Looking at Figure 4(b), we see that Friend queries are more popular among NEQ for all age bins. On the contrary, ac-cording to Figure 4(c) the graph for SQ is bi-modal. While average number of NEQ per user; (c) average number of SQ per user. Non-friend queries prevail for the younger group of users, Friend queries prevail for the older group of users. One can also notice a clear cyclic pattern in a combined Figure 4(a), which depicts the fractions of Friend queries out of all non-Self User queries for NEQ and SQ. Both graphs have one valley for users in their 30 s and one peak for users in their 70 s , which shows that the younger users more actively search for Non-friends and the older users more actively search for Friends relative to an average user. The graph for SQ has a higher variation than the graph for NEQ suggesting that the search personalization is more beneficial for SQ than NEQ.
It is reported in [13] that males searched more than fe-males in 2004, but in 2012 the usage of search engines con-verged to the same level [32]. At the same time females communicate more and use the web less than males [18, 23]. We compared the search usage for female and male users in our case and found three insights. First, females write more queries than males (Figure 5(b,c)). Second, females more ac-tively search for Friends using NEQ compared to an average user (Figure 5(a)). The fraction of Friend NEQ to the sum of Friend and Non-friend NEQ for females is 0 . 605, while for males it is 0 . 542. Third, according to Figure 5(a), we also found that males search more actively for Non-Friends using SQ compared to the mean for the population. The fraction of Friend SQ to the sum of Friend and Non-friend SQ for males is 0 . 328, while for females it is 0 . 348. The ideas based on these insights are discussed in Section 8.
In Figure 6 we present how the graph search distance de-pends on the number of friends. First, note that the ratio of Friend to Friend and Non-friend User queries reaches its saturation level at around 0 . 75 for NEQ and 0 . 43 for SQ (Figure 6(a)). Interestingly, the graph for SQ almost reaches its saturation already for the first bin (less than 100 friends), while the graph for NEQ grows steadily and saturates at around 10 th bin (1000 friends). Second, the more friends a user has, the more Friend NEQ the user writes (Figure 6(b)). This suggests that users actively use NEQ to find information about their existing friends. On the contrary, the trend for Non-friend NEQ declines slightly with more friends. Therefore, we speculate that in this case people have already  X  X riended X  a good amount of users they want in their network. Third, it is worth noticing the volatil-ity of graphs for different graph distances. The trend for Non-friend NEQ is flat, while Friend NEQ contribute to the growth of the query volume (Figure 6(b)). The trend for Friend SQ is flat, while the volume of Non-friend SQ changes depending on the number of friends (Figure 6(c)). This again suggests that NEQ are fundamental for search-ing for friends and SQ are fundamental for searching for non-friends. Together these two query types enable both navigational and exploratory people search on Facebook.
In Figure 7 we extend the analysis presented in the pre-vious section and consider how celebrity status influences search behavior. This is an important question to study since search effectiveness and, hence, usage could be different in that extreme case (larger search space of friends). Because having 10000 friends is a rare event, there may only be a few celebrities in the original sampled query logs. Therefore, we considered a complete set of non-novice celebrity users of Facebook Graph Search and analyzed their anonymized queries during the same time intervals as for the original NEQ and SQ logs. According to Figure 7(b,c), on average celebrity users submit more NEQ and less SQ than typi-cal users, which is in agreement with the findings presented in the previous section regarding the correlations between the number of queries and the number of friends. Moreover, from Figure 7(a) we conclude that the ratio of Friend queries to the sum of Friend and Non-friend queries for celebrities is biased towards the first degree connections compared to typ-ical users. These findings suggest that celebrities are not as interested in exploring the graph and mostly use Facebook Graph Search for navigational purposes.

We deepen the analysis further by segmenting queries into celebrity and typical groups analogous to the approach we used for the searchers, i.e. we check whether a query con-tains an entity which has at least 10000 friends or fans. We computed the ratios of celebrity queries out of all non-Self User queries for NEQ and SQ, two demographic groups (typ-ical and celebrity), and graph distances ( Friends and Non-friends ). The results are presented in Table 4. It is worth highlighting that this experiment and the corresponding in-sights are about users searching for celebrities as Users and not about users searching for celebrities as Pages .
According to Table 4, celebrities search more for other celebrities than typical users. To see whether this was a re-sult of celebrities having more celebrity friends, and there-fore, simply searching for friends, we calculated the average number of celebrity friends for a celebrity and found that it is 0 . 016 2 . The ratio of celebrity queries is higher than this, i.e. celebrities search for other celebrities disproportionally The same value for a typical user was infinitesimally small. Type Ratio NEQ SQ
Typical Celebrity/Typical
Celebrity Celebrity/Typical Table 4: Relationship between a celebrity status of a queried entity and a celebrity status of a searcher. more than for typical users. Two other interesting findings are that both typical users and celebrities are more likely to search for a celebrity when they write a Non-friend query relative to a Friend query and using an NEQ relative to a SQ. Therefore, the surplus might be achieved by suggesting Non-friend celebrity NEQ to Facebook users in Typeahead.
A prior query log study of a web people search engine [48] reports that users write queries with additional keywords to disambiguate a name of a person to be searched or to find relationships between people. The most used keywords were city names, jobs, and activities. However, the advanced functionality of that system was limited only to such key-words. We push this line of work forward and share insights about people search on Facebook, where users can write non-ambiguous grammar queries using a rich set of predicates.
To understand how SQ length depends on the query popu-larity, we computed the average number of functional predi-cates for top-100 and top-1000 most frequent semantic query templates (SQ-A). We didn X  X  use traditional definitions of the query length such as the number of letters or words [5, 20, 34] because structured queries consist of indelible enti-ties and predicates. We additionally computed the lengths of SQ with at least one (a) friends predicate (SQ-F), (b) friends-of-friends composite predicate (SQ-FF), to under-stand how SQ length depends on the graph distance. The former serves as a proxy for Friend queries, while the latter for Non-friend queries. Table 5 summarizes the results. SQ Type top-100 top-1000 SQ-A 1.64  X  0.59 2 . 00  X  0 . 72 SQ-F 1.01  X  0.61 1 . 70  X  0 . 77 SQ-FF 1.63  X  0.76 2 . 02  X  0 . 89 Table 5: Average structured grammar query length measured as the number of functional predicates.

As we can see, shorter SQ is more popular because the average query length for top-100 is smaller than for top-1000. This is a predictable finding because shorter queries are likely easier to write. More interestingly, users write shorter queries when they search for the first degree con-nections. We have two ideas to explain this. First, the number of friends is much smaller compared to the number of non-friends, and hence, it takes less information to encode them (search entropy is lower). Second, according to [44],  X  repeat web queries are shorter and more effective  X . Analo-gously, users might be more effective in formulating queries about their friends because they know more about them. To understand what predicates people use to disambiguate SQ while searching for people, we computed top-10 predi-cates most frequently co-appearing in SQ with at least one User predicate having a clear distance semantics, i.e the same SQ-F and SQ-FF sets of queries. Table 6 summa-rizes the results. An exemplary SQ for the second column is  X  Photos of my friends who like CIKM2014  X ; for the third column  X   X  Friends of my friends who are not my friends  X .
Rank in SQ-F in SQ-FF Lift predicates 1 No predi-2 likers residents residents 3 residents students photos-of 4 employees employees friends(me) 5 members likers friends(X) 6 students No predicates non-friends(me) 7 females users-named females 8 visitors friends(X) photos-liked 9 home-10 (likers, Table 6: Top-k predicates for different user queries.
The users disambiguate queries using predicates in the fol-lowing groups: location  X  visitors , residents , home-residents (e.g.  X  Friends who visited Dublin  X ), affiliation  X  employees students , employer-location , members (e.g.  X  Employees of Tesla Motors  X ), interest  X  likers (e.g.  X  People who like Hadoop and Pig  X ), gender  X  females (e.g.  X  Females who are single  X ), and relation to other users  X  non-friends(me) (e.g.  X  Friends of Bob who are not my friends  X ). They also submit queries for people without providing any predicate, and some queries that have predicates are more popular than queries without them. However, we found that on average, shorter queries are more popular. To investigate why some longer queries are more frequent than their shorter counterparts, we introduced the concept of a lift predicate.

A Lift Predicate is a predicate that, when used as part of a query, increases the frequency of the query compared to the query without this predicate. For example, if we have the query  X  X sers named Alice who live in California X  with the frequency 100 and the query  X  X sers who live in California X  with the frequency 50, then users-named is a lift predicate because the former query is more frequent than the latter.
The lift predicates are insightful because unlike in tradi-tional query frequency analysis, which tells us what queries are popular, they help us understand why some queries are popular. Top-10 lift predicates are presented in the right-most column of Table 6. In addition to the groups of pred-icates discussed above, users are interested in photos discuss how to leverage lift predicates in Section 8.
In the previous section we studied what predicates people use to disambiguate their SQ in order to find other peo-ple. Below we study what people want to learn about other people and whether it depends on the graph distance. Similar to the distance calculation algorithm described in Section 3.2, we consider only queries with at least one entity. For each entity in a query we (a) identify the distance from the searcher using the Social Graph or functional superpo-sition of the User predicates, e.g. friends(friends(me)) has a distance two; (b) find the closest non-User predicate, for which it serves as an argument unwrapping the functional embedding. For example, a query photos-of(friends(me)) is a Friend query and the closest non-User predicate is photos-of ; a query videos-commented(123) submitted by a friend of the user with the anonymous id = 123 is a Friend query and the closest non-User predicate is videos-commented a query photos-in(places-liked(me)) is a Self query and the closest non-User predicate is places-liked . The results for top-30 grammar predicates are presented in Figure 8.
Some predicates are  X  X ure X  because they can be applied only to the entities at a specific distance, e.g. places-near while most of the predicates have all of the distance compo-nents. We observe a high variation from predicate to pred-icate and most of the predicates have a distribution over the graph distances deviating from the average distribu-tion presented in Section 6. Users apply the friends pred-icate to non-friends, while interest-related predicates, e.g. page-liked and videos-liked , are biased towards friends. Users are also interested in knowing the locations of their first degree connections, e.g. current-cities . Job-related predicates, e.g. employers , are used more for non-friends, which aligns with Granovetter X  X  theory of weak ties [14]. Some predicates with the related semantics, like media, have drastically different distributions: while photos-of is biased towards non-friends, videos-of is often used for friends.
In this section, we discuss what our findings suggest for the design of next-generation search products within OSNs. Our key finding is that users search more for friends using NEQ and for non-friends using SQ (Section 6). Moreover, this behavior is consistent across numerous demographic slices (Section 6.1). Therefore, an interactive Typeahead interface supporting both NEQ and SQ facilitates naviga-tion and exploration and makes information stored within Facebook useful and easy to search. Having these two query types tailored to a specific class of information needs within one system is beneficial for users of the OSN as these queries don X  X  compete but rather complement each other. A similar idea was proposed based on the analysis of a LinkedIn peo-ple query log, where the authors found serious differences in post-search behavior for name and non-name queries.
We noticed significant changes in search behavior for users with different demographics. We found that the number of Friend queries grows as users gain more friends, while the number of Non-friend queries slightly declines (Section 6.1.3), that celebrity users search for celebrities more than typi-cal users (Section 6.1.4), that females and users, who are older than 60, are more interested in the first degree connec-tions compared to the rest of the users in our sample (Sec-tions 6.1.1,6.1.2), and several others. Therefore, we propose to further innovate around personalized search query sug-gestions given our demographics X  distinct people search pat-terns. It is worth mentioning that SQ usage behavior has a wider variation across different demographics, and hence, it makes sense to focus the efforts on that query type.
For example, we recommend building personalized gram-mar query suggestions at a Semantic Query Template level because we found that users reuse Semantic Query Tem-plates to search for different entities. Moreover, users re-peatedly search for non-friends without adding them to their friend network. This implies that query suggestions shouldn X  X  be limited to friends only, but should also include some in-teresting distant vertices in the Social Graph.

We believe that the quality of search suggestions would improve using lift predicates by concatenating them to the User queries to facilitate entity disambiguation. Addition-ally, it would speed up the query writing process. Lift pred-icates are advantageous over frequent query suggestions be-cause the former can boost the popularity of a new query, while the latter are limited to the set of existing queries.
We found that the distribution over graph distances varies from predicate to predicate. While some predicates are used primarily to explore information about friends, other predi-cates are used for non-friends. We propose ranking entities for a predicate using its graph distance distribution.
We discovered that users write shorter queries when they search for Friends and use more predicates to find Non-friends . Therefore, we propose generating interactive query suggestions by predicting an intended search distance and deciding whether (a) to add one more predicate to the orig-inal query to generate a list of longer queries or (b) to stop growing the query and iterate over the predicates applicable for the entity in question. For example, once a user specified a name of a friend, it makes sense to show other predicates used for friends, e.g. pages-liked or videos-liked (Figure 8). At the same time, if the user typed a name of a non-friend, it makes sense to extend the query using one of disambiguation or lift predicates, e.g. employees or residents (Table 6).
We do acknowledge several limitations of this study. First, the paper uses proprietary data sets, which makes the re-producibility of the study possible only by a selected few. Yet we argue that the methodology underlying the reported analysis is general to allow similar analyses by other re-searchers with access to similar data sets. Moreover, it is the first large scale study of a search system providing structured querying capabilities for a casual user, which is important to distribute in the information retrieval community. Second, throughout the paper we consider three categories of queries based on the graph distance  X  Self , Friend , and Non-friend . However, we could have done more fine-grained analysis and calculated exact graph distances between entities by using more compute power. Third, some findings might depend on the concrete implementation of the Typeahead query sugges-tion algorithm, e.g. users might search for Non-friends more using SQ simply because they are shown such suggestions. However, the same applies to almost any query log study of a modern search engine. Finally, we used a quantitative ap-proach, which knowingly has its own shortcomings. While it allows to uncover numerous data-driven insights at scale, it cannot uncover users X  motivations and goals. Therefore, we can only speculate about the reasons underlying observed user behavior. Qualitative survey or interviews are neces-sary to backup our quantitative findings.
In this work we conducted a large scale analysis of Face-book Graph Search query logs. It is the first analysis that revealed insights on how demographic attributes and graph distance affect people search on Facebook. We presented a comprehensive overview of named entity and structured grammar queries usage and uncovered many new insights about people search within OSNs. The key takeaways from our study are two-fold. First, named entity and structured queries complement each other and it is crucial to have them both in one system to address a diverse set of information needs of users. Second, search behavior changes a lot for users with different demographics and it is important to model this variance to fulfil interests of everyone. We plan to extend this study with the qualitative research and under-stand user motivations underlying specific search behavior.
We thank the entire Facebook Graph Search Team for con-tributing their stellar work on various search subsystems, Shih-Wen Huang and anonymous reviewers for their valu-able feedback on the drafts of this paper.
