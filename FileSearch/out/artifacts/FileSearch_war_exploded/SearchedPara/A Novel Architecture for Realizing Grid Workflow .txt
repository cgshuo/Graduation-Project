 In recent years, scientists and engineers are building more and more complex applica-tions to manage and process large data sets, and execute scientific experiments on distributed resources [1, 2]. Such applica tion scenarios require means for composing and executing complex grid computing. Grid computing has emerged as a global platform to support organizations for coordinated sharing of distributed data, applica-tions, and processes [3]. To satisfy these demands, many efforts have been made towards the development of workflow systems for Grid computing. Grid workflow systems which are evoking a high degree of interest aim to support modeling, redes-ign and execution of large-scale sophisticated e-science and e-business processes [4, 5]. 
Grid workflows, in contrast to production and administrative business workflows, are normally more flexible and completely automatic. They typically rely on distrib-uted and autonomous processes for information interaction [5]. Because the data and computing may be dispersed in a physically distributed environments(especially un-der inter-organizational environments), one of the key challenges for grid computing is to define a common mechanism that the grid workflow system can handle the data transfer issue and invoke the computational tools over a distributed and heterogeneous platform. This mechanism is exactly the goal that grid computing technology works to achieve in scientific environments. Grid computing technology satisfies the require-ment by providing a new computing infrastructure for large-scale resource sharing and distributed system integration. 
This paper aims at designing and building basic infrastructure for grid computing in the form of a workflow system capable of defining and enacting service processes, as well as supporting related interactive behaviors among these service processes. The semantics of Pi-Calculus for Grid workflow modeling. Section 3 applies this technol-ogy to a special grid workflow setting. Finally, section 4 gives a short conclusion. resources in a well-defined order to accomplish a specific goal. Such workflow sys-many service agents which are involved in one global workflow process under inter-organizational environments. Each of the agents has its own local workflow process. Figure 1 shows a typical example of grid workflow system which consists of five local workflow processes. 
Recently there has been an increased intere st in formal modeling of grid workflow systems. Pi-calculus developed by Robin Milner in the late 1980s is about modeling to describe dynamically changing networks of concurrent processes. Pi-calculus pro-vides a framework in which to develop the appropriate formalism. There are several reasons for using Pi-Calculus for grid workflow modeling: sary to develop an efficient technology that is capable of handling dynamic behaviors across enterprise boundaries. It requires th at the formal method should be capable of coping with those dynamic aspects, and the Pi-Calculus can precisely satisfy this requirement. classical or non-classical logic to describe the concurrency among processes, but it is easy for the Pi-Calculus to do so. describe interactions among processes. 
Pi-Calculus contains just two kinds of entities: processes and channels. Processes, sometimes called agents, are the active components of a system. Definition 1. The syntax of polyadic Pi-Calculus is as follows: t v START ACTIVITY DECISION SPLIT JOIN END  X  indicates the type of a chan-tion, () WWW RVV  X  X  is a set of channels among local workflow processes. 
In Definition 2, the overall processes are decomposed into many kinds of activities that are ordered based on the dependencies among them. Definition 3. If activity A is automatic activity, then its corresponding representation ). . _ [ _ ]. ACTION release resource resource id FINISH where uppercase names of the defini-tion ( START , ACTION , and FINISH ) denote processes and lowercase names denote ( _ resource id ) to communicate neighbor activities. Definition 4. If activity A is manual activity, then its corresponding representation of Definition 5. If activity A is time-triggering activity, then its corresponding represen-FINISH . Definition 6. If activity A and activity B have sequence dependency and their corre-sponding processes expression is A , B respectively, and then the sequence depend-Definition 7. If activity A and activity B have XOR-split dependency and their corre-sponding processes expression is A , B respectively, then the XOR-split dependency responding processes expression is A , B respectively, then the XOR-join depend-Definition 9. If activity A and activity B have AND-split dependency and their corresponding processes expression is A , B respectively, then the AND-split de-Definition 10. If activity A and activity B have AND-join dependency and their corre-sponding processes expression is A , B respectively, then the AND-join dependency Definition 11. If the decision expression  X  is true, then activity A will be executed; / ]) bstartB . In this section, we introduce a grid workflow system implemented by Pi-Calculus mechanism. It is a loosely coupled inter-organizational workflow system which con-sists of three local workflows: Customer, Producer and Supplier. Figure 2 shows how communication procedures among local work flow processes are handled under inter-organizational environments. 
In Figure 2, it can be easily seen that the process () PCustomer shares four channels with the process () P Supplier . 
We use Pi-Calculus to describe the behavior of activities in Figure 2. For example, we give the following descriptions of two activities in () PCustomer according to definition 3 to 5. 804 Z. Feng et al. 
We also use Pi-Calculus to describe the communication of any two processes of the inter-organizational workflow system. For example, we give the following descrip-tions of communications between  X  X ustomer X  process and  X  X roducer X  process ac-cording to definition 6 to 11. tion of grid workflow system is proposed by Pi-Calculus technique. This approach provides interactive graphic user interf ace to support dynamic control and easy com-munication of an executed grid workflow, and provides a powerful tool for production and execution of workflow-based Grid appli cations. We are currently in the process to develop a Grid workflow enactment engine to execute Grid workflow applications based on the proposed approach. The work has been supported by the Zhejiang Province Science and Technology Plan (jTang Middleware) and the National Natural Science Foundation, China (No. 60273056). The name of contact author is Jianwei Yin. 
