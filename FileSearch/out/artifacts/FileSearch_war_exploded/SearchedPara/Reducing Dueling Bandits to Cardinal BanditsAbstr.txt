 Technion, Dept. of Computer Science, Haifa 32000, Israel Yahoo Labs, Haifa 31905, Israel Thorsten Joachims TJ @ CS . CORNELL . EDU Cornell University, Dept. of Computer Science, Ithaca, NY 14850, USA When interacting with an online system, users reveal their preferences through the choices they make. Such a choice  X  often termed implicit feedback  X  may be the click or tap on a particular link in a web-search ranking, or watching a par-ticular movie among a set of recommendations. Connect-ing to a classic body of work in econometrics and empirical work in information retrieval (Joachims et al., 2007), such implicit feedback is typically viewed as an ordinal prefer-ence between alternatives (i.e.,  X  X  is better than B X ), but it does not provide reliable cardinal valuations (i.e.,  X  X  is very good, B is mediocre X ).
 To formalize the problem of learning from preferences, we consider the following interactive online learning model, which we call the Utility-Based Dueling Bandits Prob-lem (UBDB) similar to (Yue et al., 2012; Yue &amp; Joachims, 2011). At each iteration t , the learning system presents two actions x t ,y t  X  X to the user, where X is the set (either finite or infinite) of possible actions. Each of the two actions has an associated random reward (or utility) for the user, which we denote by u t and v t , respectively. The quantity u t (resp. v t ) is drawn from a distribution that depends on x t (resp. y t ) only. We assume these utilities are in [0 , 1] . The learning system is rewarded the average utility U av t = ( u t + v t ) / 2 of the two actions it presents, but it does not observe this reward . Instead, it only ob-serves the user X  X  binary choice among the two alternative actions x t ,y t , which depends on the respective utilities u and v t . In particular, we model the observed choice as a { 0 , 1 } -valued random variable b t distributed as where  X  : [0 , 1]  X  [0 , 1] 7 X  [0 , 1] is a link function. Clearly, the link function has to satisfy  X  ( A,B ) +  X  ( B,A ) = 1 . Below we concentrate on linear link functions (defined in Sec. 2). The binary choice is interpreted as a stochas-tic preference response between the left alternative x t (if b t = 0 ) and the right alternative y t (if b t = 1 ). The utility U av captures the overall latent user experience from the pair of alternatives. A concrete example of this UBDB game is learning for web search, where X is a set of rank-ing functions among which the search engine selects two for each incoming query; the search engine then presents an interleaving (Chapelle et al., 2012) of the two rankings, from which it can sense a stochastic preference between the two ranking functions based on the user X  X  clicking behav-ior.
 The purpose of this paper is to show how UBDB can be reduced to the conventional (cardinal) stochastic Multi-Armed Bandit (MAB) problem 1 , which has been studied since 1952 (Robbins, 1952). In MAB, the system chooses only a single action x t  X  X in each round and directly ob-serves its cardinal reward u t , which is assumed to be drawn from a latent but fixed distribution attached to x t . The set X in the traditional MAB game is of finite cardinality K . In more general settings (Dani et al., 2008; Mannor &amp; Shamir, 2011), this set can be infinite but structured in some way. Dani et al. (2008), for example, assume a stochastic setting in which X is a convex, bounded subset of R n , and the expectation  X  ( x ) of the corresponding value distribution is  X   X ,x  X  , where  X   X  R n is an unknown coefficient vector and  X  X  ,  X  X  is the inner product with respect to the standard basis. We refer to this as the linear expected utility setting . We study here both the finite setting and the infinite setting. Main results. We provide general reductions from UBDB to MAB. More precisely, we use a MAB strategy as a black-box for helping us play the UBDB game. The art is in exactly how to use a black-box designed for MAB in order to play UBDB. We present one method, Doubler (Section 3) which adds an extra O (log T ) factor to the ex-pected regret function compared to that of the MAB black-box, assuming the MAB black-box has polylogarithmic (in T ) regret, where T is the time horizon. When the MAB black-box has polynomial regret, only an extra O (1) factor is incurred. This algorithm works for infinite bandit spaces. We also present a reduction algorithm MultiSBM (Sec-tion 4) which works for finite bandit spaces and gives an O (log T ) regret, assuming the MAB black-box enjoys an O (log T ) expected regret function with some mild higher moment assumptions. These assumptions are satisfied, for example, by the seminal UCB algorithm (Auer et al., 2002). Our analysis in fact shows that for sufficiently large T , the regret of MultiSBM is asymptotically identical to that of UCB not only in terms of the time horizon T but in terms of second order terms such as the differences between the val-ues of the arms; it follows that MultiSBM is asymptoti-cally optimal in the second order terms as well as in T . Fi-nally, we propose a third algorithm Sparring (Section 5) which we conjecture to enjoy regret bounds comparable to those of the MAB algorithms hiding in the black boxes it uses. We base the conjecture on arguments about a related, but different problem. In experiments (Section 7) compar-ing our reductions with special-purpose UBDB algorithms, Sparring performs clearly the best, further supporting our conjecture.
 All results in this extended abstract assume the linear link function (see Section 2), but we also show preliminary re-sults for other interesting link functions in Appendix D. Contributions in relation to previous work. While spe-cific algorithms for specific cases of the Dueling Bandits problem already exist (Yue et al., 2012; Yue &amp; Joachims, 2011; 2009), our reductions provide a general approach to solving the UBDB. In particular, this paper provides gen-eral reductions that make it possible to transfer the large body of MAB work on exploiting structure in X to the dueling case in a constructive and algorithmic way. Sec-ond, despite the generality of the reductions their regret is asymptotically comparable to the tournament elimination strategies in (Yue et al., 2012; Yue &amp; Joachims, 2011) for the finite case as T  X   X  , and better than the regret of the online convex optimzation algorithm of (Yue &amp; Joachims, 2009) for the infinite case (albeit in a more restricted set-ting).
 In our setting, the reward and feedback of the agent play-ing the online game are, in some sense, orthogonal to each other, or decoupled . A different type of decoupling was also considered in Avner et al. X  X  work (Avner et al., 2012), although this work cannot be compared to theirs. There is yet more work on bandit games where the algorithm plays two bandits (or more) in each iteration, e.g. Agarwal et al. (Agarwal et al., 2010), although there the feedback is cardinal and not relative in each step. There is much work on learning from example pairs (Herbrich et al., 2000; Fre-und et al., 2003; Ailon et al., 2012) as well as noisy sorting (Karp &amp; Kleinberg, 2007; Feige et al., 1994), which are not the setting studied here. Finally, our results connect multi-armed bandits and online optimization to the classic econometric theory of discrete choice, with its use of pref-erential or choice information to recover values of goods (see (Train, 2009) and references therein).
 Another important topic related to our work is that of par-tial monitoring games . The idea was introduced by (Pic-colboni &amp; Schindelhauer, 2001). The objective in partial monitoring is to choose at each round an action from some finite set of actions, and receive a reward based on some unknown function chosen by an oblivious process. The ob-served information is defined as some (known) function of the chosen action and the current choice of the oblivious process. One extreme setting in which the observed infor-mation equals the reward captures MAB. In the other ex-treme, the observed information equals the entire vector of rewards (for all actions), giving rise to the so-called full in-formation game. Our setting is a strict case of partial mon-itoring as it falls in neither extremes. Most papers dealing with partial monitoring either discuss non-stochastic set-tings or present problem-independent results. In both cases the regret is lower bounded by to our setting (see (Antos et al., 2012) for a characteriza-tion of partial monitoring problems). Bart  X  ok et al. (Bart  X  ok et al., 2012) do present problem dependent bounds. Using their work, a logarithmic (in T ) bound can be deduced for the dueling bandit problem, at least in the finite case. How-ever, the dependence on the number of arms is quadratic, whereas we present a linear one in what follows. Our algo-rithms are also much simpler and directly take advantage of the structure of the problem at hand. The set of actions (or arms ) is denoted by X . In a standard stochastic MAB (multi-armed bandit) game, each bandit x  X  X has an unknown associated expected utlity  X  ( x )  X  [0 , 1] . At each step t the algorithm chooses some x t  X  X and receives from  X  X ature X  a random utility u t  X  [0 , 1] , drawn from a distribution of expectation  X  ( x t ) . This util-ity is viewed by the algorithm. 3 The regret at time T of an algorithm is defined as R ( T ) = P T t =1 (  X  ( x where x  X  is such that  X  ( x  X  ) = max x  X  X  X  ( x ) (we assume the maximum is achievable). Throughout, for x  X  X we will let  X  x denote  X  ( x  X  )  X   X  ( x ) whenever we deal with MAB. (We will shortly make reference to some key results on MAB in Section 2.1.) In this work we will use MAB algorithms as black boxes. To that end, we define a Singleton Bandit Machine (SBM) as a closed computational unit with an internal timer and memory. A SBM S supports three operations: reset , advance and feedback . The reset operation simply clears its state. 4 The advance operation returns the next bandit to play, and feedback is used for simulating a feedback (the utility). It is assumed that advance and feedback op-erations are invoked in an alternating fashion. For exam-ple, if we want to use a SBM to help us play a traditional MAB game we first invoke reset( S ) , then invoke and set x 1  X  advance( S ) , we will play x 1 against nature and ob-serve u 1 and then invoke feedback( S,u 1 ) . We then invoke and set x 2  X  advance( S ) , then we X  X l play x 2 against na-ture and observe u 2 , then invoke feedback( S,u 2 ) and so on. For all SBM X  X  S that will be used in the algorithms in this work, we will only invoke the operation feedback( S,  X  ) with values in [0 , 1] . In the utility based dueling bandit game (UBDB), the algo-rithm chooses ( x t ,y t )  X  X  X  X at each step, and a corre-sponding pair of random utilities ( u t ,v t )  X  [0 , 1] are given rise to, but not observed by the algorithm. We assume u t drawn from a distribution of expectation  X  ( x t ) and v t dependently from a distribution of expectation  X  ( y t ) . The algorithm observes a choice variable b t  X  X  0 , 1 } distributed according to the law (1.1). This random variable should be thought of as the outcome of a duel, or match between x t and y t . The outcome b t = 1 (resp. b t = 0 ) should be inter-preted as  X  y t is chosen X  (resp.  X  x t is chosen X ). 5 The link function  X  , which is assumed to be known, quantitatively determines how to translate the utilities u t ,v t to winning probabilities. The linear link function  X  lin is defined by Pr[ b t = 1 | ( u t ,v t )] =  X  lin ( u t ,v t ) := The unobserved reward is U av t = ( u t + v t ) / 2 , and the corresponding regret after T steps is R av ( T ) := P implies that expected zero regret is achievable by setting ( x ternatives would be displayed as one, as would naturally happen in interleaved retrieval evaluation (Chapelle et al., 2012). It should be also clear that playing ( x  X  ,x  X  ) is pure exploitation, because the feedback is then an unbiased coin with zero exploratory information.
 We also consider another form of (unobserved) utility, which is given as U choice t := u t (1  X  b t ) + v t b t . We call this choice-based utility, since the utility that is obtained depends on the user X  X  choice. Accordingly, we define R t :=  X  ( x reward associated with either the left bandit or the right bandit, whichever was actually chosen . The utility U choice captures the user X  X  experience after choosing a result. In an e-commerce system, U choice may capture conversion , namely, the monetary value of the choice. Although both utility modelings U av and U choice are well motivated by applications, we avoid dealing with choice based utilities and regrets for the following reason: regret bounds with respect to U av imply similar regret bounds with respect to U Observation 2.1. Assuming a link function where u &gt; v implies  X  ( u,v ) &gt; 1 / 2 , for any x t ,y t , E [ R choice E [ R av t | ( x t ,y t )] . (Due to lack of space, the proof can be found in Ap-pendix E.) The observation X  X  assumption on the link func-Algorithm 1 UCB algorithm for MAB with | X | = K arms. Parameter  X  affects tail of regret per action in X .  X  x  X  X , set  X   X  x =  X   X  x  X  X , set t x = 0 set t = 1 while true do end while tion in words is: when presented with two items, the item with the larger utility is more likely to be chosen. This clearly happens for any reasonable link function. We henceforth assume utility U av and regret R av and will no longer make references to choice-based versions thereof. 2.1. Classic Stochastic MAB: A Short Review We review some relevant classic MAB literature. We begin with the well known UCB policy (Algorithm 1) for MAB in the finite case. The commonly known analysis of UCB provides expected regret bounds. For the finite X case, we need a less known, robust guarantee bounding the probabil-ity of playing a sub-optimal arm too often. Lemma 2.2 is implicitly proved in (Auer et al., 2002). For completeness, we provide an explicit proof in Appendix A.
 Lemma 2.2. Assume X is finite. Fix a parameter  X  &gt; 0 . Let H := P x  X  X \{ x  X  } 1 /  X  x . When running the UCB policy (Algorithm 1) with parameter  X  for T rounds the expected regret is bounded by Furthermore, lex x  X  X denote some suboptimal arm and let s  X  4  X  ln( T ) /  X  2 x . Denote by  X  x ( T ) the random vari-able counting the number of times arm x was chosen up to time T . Then Pr[  X  x ( T )  X  s ]  X  2  X   X  ( s/ 2)  X   X  . For the infinite case, we will review a well known setting and result which will later be used to highlight the useful-ness of Algorithm 2 (and the ensuing Theorem 3.1). In this setting, the set X of arms is an arbitrary (infinite) convex set in R d . Here, the player chooses at each time point a vector x  X  X and observes a stochastic reward with an ex-pected value of  X   X ,x  X  , for some unknown vector  X   X  R d This setting was dealt with by Dani et al. (2008). They provide an algorithm for this setting that could be thought of as linear optimization under noisy feedback. Their al-gorithm provides (roughly) bodies and polylog( T ) regret for polytopes. Formally, for general convex bodies, they prove the following.
 Lemma 2.3 (Dani et al. 2008) . Algorithm C Dani et al. (2008), provides an expected regret of O p dT log 3 T (resp. O p d 2 T log 3 T ) for any convex set of arms.
 In case X is a polytope with vertex set V and there is a unique vertex v  X   X  V achieving max x  X  X  X   X ,x  X  , and any other vertex v  X  V satisfies the gap condition  X   X ,v  X   X   X   X ,v  X   X  X  X   X  for some  X  &gt; 0 , we say we are in the  X  -gap case.
 Lemma 2.4 (Dani et al. 2008) . Assume the  X  -gap case. Al-of Dani et al. (2008), provides an expected regret of O  X   X  1 d 2 log 3 T (resp. O  X   X  1 d 3 log 3 T ). In this section we consider UBDB in the case of a large or possibly infinite set of arms X , and the linear link function. The setting where X is large typically occurs when some underlying structure for X exists through which it is pos-sible to gain information regarding one arm via queries to another. Our approach, called Doubler , is best explained by thinking of the UBDB strategy as a competition between two players, one controlling the choice of the left arm and the other, the choice of the right one. The objective of each player is to win as many rounds possible, hence intuitively, both players should play the arms with the largest approx-imated value. Since we are working with a stochastic en-vironment it is not clear how to analyze a game in which both players are adaptive, and whether such a game would indeed lead to a low regret dueling match (see also Sec-tion 5 for a related discussion). For that reason, we make sure that at all times one player has a fixed stochastic strat-egy, which is updated infrequently.
 We divide the time axis into exponentially growing epochs. In each epoch, the left player plays according to some fixed (stochastic) strategy which we define shortly, while the right one plays adaptively according to a strategy provided by a SBM. At the beginning of a new epoch, the distribu-tion governing the left arm changes in a way that mimics the actions of the right arm in the previous epoch. The for-mal definition of Doubler is given in Algorithm 2. The following theorem bounds the expected regret of Al-gorithm 2 as a function of the total number T of steps and the expected regret of the SBM that is used.
 Theorem 3.1. Consider a UBDB game over a set X . As-sume the SBM S in Line 1 of Doubler (Algorithm 2) has an expected regret of c log  X  T after T steps, for all Algorithm 2 ( Doubler ): Reduction for finite and infinite X with internal structure. 1: S  X  new SBM over X 2: L X  an arbitrary singleton in X 3: i  X  1 , t  X  1 4: while true do 5: reset( S ) 6: for j = 1 ... 2 i do 7: choose x t uniformly from L 8: y t  X  advance( S ) 9: play ( x t ,y t ) , observe choice b t 10: feedback( S,b t ) 11: t  X  t + 1 12: end for 13: L  X  the multi-set of arms played as y t in the last 14: i  X  i + 1 15: end while T . Then the expected regret of Doubler is at most 2 c  X  bounded by some function f ( T ) =  X ( T  X  ) (with  X  &gt; 0 ), then the expected regret of Doubler is at most O ( f ( T )) . The proof is deferred to Appendix B. By setting the SBM S used in Line 1 as the algorithms C ONFIDENCE B ALL 1 or C
ONFIDENCE B ALL 2 of Dani et al. (2008), we obtain the following: Corollary 3.2. Consider a UBDB game over a set X . As-sume that the SBM S in Line 1 of Doubler is algorithm C a compact convex set, then the expected regret of Doubler is at most O ( q dT log 3 ( T )) (resp. O ( q d 2 T log 3 the  X  -gap setting (see discussion leading to Lemma 2.4), the expected regret is bounded by O  X   X  1 d 2 log 4 ( T ) (resp. O  X   X  1 d 3 log 4 ( T ) ).
 In the finite case, one may set the SBM S to the standard UCB, and obtain: Corollary 3.3. Consider a UBDB game over a finite set X of cardinality K . Let  X  i be the difference between the reward of the best arm and the i  X  X h best arm. Assume the SBM S in Line 1 of Doubler is UCB. Then the expected regret of Doubler is at most O ( H log 2 ( T )) where H := P Memory requirement issues: A possible drawback of Doubler is its need to store the history of y t from the last epoch in memory, translating to a possible memory re-quirement of  X ( T ) . This situation can be avoided in many natural cases. The first is the case where X is embedded in a real linear space and the expectation  X  ( x ) is a linear Algorithm 3 ( MultiSBM ): Reduction for unstructured finite X by using K SBMs in parallel. 1: For all x  X  X : S x  X  new SBM over X , reset( S x ) 2: y 0  X  arbitrary element of X 3: t  X  1 4: while true do 6: y t  X  advance( S x t ) 7: play ( x t ,y t ) , observe choice b t 8: feedback( S x t ,b t ) 9: t  X  t + 1 10: end while function. Here, there is no need to store the entire his-tory of choices of the left arm but rather the average arm (recall that here the arms are thought of as vectors in R hence the average is well defined). Playing the average arm (as x t ) instead of picking an arm uniformly from the list of chosen arm gives the same result with memory re-quirements equivalent to storage of one arm. In other cases (e.g., X is not even geometrically embedded) this cannot be done. Nevertheless, as long as we are in a  X  -gap case, as T grows, the arm played as y t is the optimal one with increasingly higher probability. In more detail, if the regret incurred in a time epoch is R , then the number of times a suboptimal arm is played is at most R/  X  . As R is polylog-arithmic in T , the required space is polylogarithmic in T as well. We do not elaborate further on memory requirements and leave this as future research. In this section we present and analyze an alternative reduc-tion strategy, called MultiSBM , particularly suited for the finite X case where the elements of X typically have no structure. MultiSBM will not incur an additional log-arithmic factor as our previous approach did. Unlike the algorithms in (Yue &amp; Joachims, 2011; Yue et al., 2012), we will avoid running an elimination tournament, but just resort to a standard MAB strategy by reduction. Denote K = | X | . The idea is to use K different SBMs in paral-lel, where each instance is indexed by an element in X . In step t we choose a left arm x t  X  X in a way that will be explained shortly. The right arm, y t is chosen according to the suggestion on the SBM indexed by x t , and the binary choice is fed back to that SBM. In the next round, x t +1 set to be y t , namely, the right arm becomes the left one in the next step. Algorithm 3 describes MultiSBM exactly. Naively, the regret of the algorithm can be shown to be at most K times that of a single SBM. However, it turns out that the regret is in fact asymptotically competitive with that of a single SBM, without the extra K factor. Specif-ically, we show that the total regret is in fact dominated solely by the regret of the SBM corresponding to the arm with maximal utility. To achieve this, we assume that the SBM X  X  implement a strategy with a certain robustness prop-erty that implies a bound not only on the expected regret, but also on the tail of the regret distribution. More pre-cisely, an inverse polynomial tail distribution is necessary. Interestingly, the assumption is satisfied by the UCB algo-rithm (Auer et al., 2002) (as detailed in Lemma 2.2). Recall that x  X   X  X denotes an arm with largest valuation  X  ( x ) , and that  X  x :=  X  ( x  X  )  X   X  ( x ) for all x  X  X . Assume  X  x &gt; 0 for all x 6 = x  X  . 7 Definition 4.1. Let T x be the number of times a (sub-optimal) arm x  X  X is played when running the policy T rounds. A MAB policy is said to be  X  -robust when it has the following property: for all s  X  4  X   X   X  2 x ln( T ) , it holds that Pr[ T x &gt; s ] &lt; 2  X  ( s/ 2)  X   X  .
 Recall that as discussed in Section 2.1, in Auer et al. X  X  (2002) classic UCB policy this property can be achieved by slightly enlarging the confidence region.
 Theorem 4.2. The total expected regret of MultiSBM (Algorithm 3) in the UBDB game is O H X  ln T + H X  K ln K + K ln ln T  X  X assuming the policy of the SBMs defined in Line 1 is  X  -robust for  X  = max(3 , ln( K ) / ln ln( T )) . The robustness can be ensured by choosing the UCB policy (Algorithm 1) for the SBM with parameter  X  .
 Note that achieving (  X  = 3) -robustness requires imple-menting a variant of UCB with a slight modification of the confidence interval parameter in each SBM. Therefore, if the horizon T is large enough so that ln ln T &gt; (ln K ) / 3 , then the total regret is comparable to that of UCB in the standard MAB game.
 The proof of the theorem is deferred to Appendix C. The main idea behind the proof is showing that a certain  X  X os-itive feedback loop X  emerges: if the expected regret in-curred by the right arm at some time t is low, then there is a higher chance that x  X  will be played as the left arm at time t + 1 . Conversely, if any fixed arm (in particular, x is played very often as the left arm, then the expected regret incurred by the right arm decreases rapidly. In this section we describe a heuristic called Sparring for playing UBDB, which shows extremely good performance Algorithm 4 ( Sparring ): Reduction to two SBMs. 1: S L ,S R  X  two new SBMs over X 2: reset( S L ) , reset( S R ) ,t  X  1 3: while true do 4: x t  X  advance( S L ) ; y t  X  advance( S R ) 5: play ( x t ,y t ) , observe choice b t  X  X  0 , 1 } 6: feedback( S L , 1 b t =0 ) ; feedback( S R , 1 b t =1 ) 7: t  X  t + 1 8: end while in our experiments. Unfortunately, as of yet we were un-able to prove performance bounds that explain its empirical performance. Sparring uses two SBMs, corresponding to left and right . In each round the pair of arms is chosen ac-cording to the strategies of the two corresponding SBMs. The SBM corresponding to the chosen arm receives a feed-back of 1 while the other receives 0 . The formal algorithm is described in Algorithm 4.
 The intuition for this idea comes from analysis of an adver-sarial version of UDBD, in which it can be easily shown that the resulting expected regret of Sparring is at most a constant times the regret of the two SBMs which emu-late an algorithm for adversarial MAB. (We omit the exact discussion and analysis for the adversarial counterpart of UDBD in this extended abstract.) We conjecture that the regret of Sparring is asymptotically bounded by the com-bined regret of the algorithms hiding in the SBM X  X , with (possibly) a small overhead. Proving this conjecture is es-pecially interesting for settings in which X is infinite and a MAB algorithm with polylogarithmic regret exists. Indeed, previous literature based on tournament elimination strate-gies does not apply to infinite X , and Doubler presented earlier is probably suboptimal due to the extra log-factor it incurs.
 Proving the conjecture appears to be tricky due to the fact that the left (resp. right) SBM does not see a stochastic en-vironment, because its feedback depends on non-stochastic choices made by the right (resp. left) SBM. Perhaps there exist bad settings where both strategies would be mutually  X  X tuck X  in some sub-optimal state. We leave the analysis of this approach as an interesting problem for future research. Our experiments will nevertheless include Sparring . Lower Bound: Our results contain upper bounds for the regret of the dueling bandit problem. We note that a match-ing lower bound, up to logarithmic terms can be shown via a simple reduction to the MAB problem. This reduction is the reverse of the others presented here: simulate a SBM by using a UBDB solver. It is an easy exercise to obtain such a reduction whose regret w.r.t. the MAB problem is at most twice the regret of the dueling bandit problem. It follows that the same lower bounds of the classic MAB problem apply to the UBDB problem.
 Adversarial Setting: One may also consider an adver-sarial setting for the UBDB problem. Here, utilities of the arms that are assumed to be constant in the stochastic case are assumed to change each round in some arbitrary way. We do not elaborate on this setting due to space constraints but mention that (a) a lower bound of of the MAB problem is valid in the UDBD setting, and (b) the Sparring algorithm, when using SBM solvers for the adversarial setting, can be shown to obtain the same regret bounds of said SBM solvers. We now present several experiments comparing our algo-rithms with baselines consisting of the state-of-the-art I TERLEAVED F ILTER ( IF ) (Yue et al., 2012) and B EAT T HE M
EAN B ANDIT ( BTMB ) (Yue &amp; Joachims, 2011). Our ex-periments are exhaustive, as we include scenarios for which no bounds were derived (e.g. nonlinear link functions), as well as the much more general scenario in which BTMB was analyzed (Yue &amp; Joachims, 2011).
 Henceforth, the set X of arms is { A,B,C,D,E,F } . For applications such as the interleaving search engines (Chapelle et al., 2012), 6 arms is realistic. We considered 5 choices of the expected value function  X  (  X  ) and 3 link functions 89 . For each 15 combinations of arm values and link func-tion we ran all 5 algorithms IF , BTMB , MultiSBM , Doubler , and Sparring with random inputs spanning a time horizon of up to 32000 .
 We also set out to test our algorithms in a scenario de-fined in (Yue &amp; Joachims, 2011). We refer to this set-ting as YJ. Unlike our setting, where choice probabili-ties are derived from (random) latent utilities together with a link function, in YJ an underlying unknown fixed ma-trix ( P xy ) is assumed, where P xy is the probability of arm x chosen given the pair ( x,y ) . The matrix satisfies very mild constraints. Following (Yue &amp; Joachims, 2011), define xy = ( P xy  X  P yx ) / 2 . The main constraint is, for some unknown total order over X , the imposition x y  X  X  X  ( x,y ) &gt; 0 . The optimal arm x  X  is maximal in the total order. The regret incurred by playing the pair ( x The BTMB algorithm (Yue &amp; Joachims, 2011) proposed for YJ is, roughly speaking, a tournament elimination scheme, in which a working set of candidate arms is main-tained. Arms are removed from the set whenever there is high certainty about their suboptimality. Although the YJ setting is more general than ours, our algorithms can be executed without any modification, giving rise to an interesting comparison with BTMB . For this compari-son, we shall use the same matrix ( xy ) x,y  X  X as in (Yue &amp; Joachims, 2011), which was empirically estimated from an operational search engine.
 (Note that x  X  = A B C D E F .) Experiment Results and Analysis Figure 1 contains the expected regrets of these described scenarios as a function of the log (to the base 2 ) of the time, averaged over 400 executions, with one standard deviation confidence bars. The experiments reveal some interesting results. First, the heuristic approach is superior to all others in all of the set-tings. Second, among the other algorithms, the top two are the algorithms IF and MultiSBM , where MultiSBM is superior in a wide variety of scenarios. We dealt with choice in sets of size 2 . What happens in cases where the player chooses from larger sets? We also analyzed only the linear choice function. See Appendix D for an extension of the results in Section 4 to other link functions.
 Both algorithms Doubler and MultiSBM treated the left and right sides asymmetrically. This did not allow us to consider distinct expected valuation functions for the left and right positions. 10 Algorithm Sparring is symmetric, further motivating the question of proving its performance guarantees.
 Proving (or refuting) the conjecture in Section 5 regard-ing the regret of Sparring is an interesting open problem. Much like our proof idea for the guarantee of MultiSBM , there is clearly a positive feedback loop between the two SBM X  X  in Sparring : the more often the left (resp. right) arm is played optimally, the right (resp. left) arm would experience an environment which is closer to that of the standard MAB, and would hence incur expected regret ap-proximately that of the SBM it implements.
 The authors thank anonymous reviewers for thorough and insightful reviews. This research was funded in part by NSF Awards IIS-1217686 and IIS-1247696, a Marie Curie Reintegration Grant PIRG07-GA-2010-268403, an Israel Science Foundation grant 1271/33 and a Jacobs Technion-Cornell Innovation Institute grant.
 Agarwal, Alekh, Dekel, Ofer, and Xiao, Lin. Optimal algo-rithms for online convex optimization with multi-point bandit feedback. In COLT , pp. 28 X 40, 2010.
 Ailon, Nir, Begleiter, Ron, and Ezra, Esther. Active learn-ing using smooth relative regret approximations with ap-plications. Journal of Machine Learning Research -Pro-ceedings Track , 23:19.1 X 19.20, 2012.

Csaba. Toward a classification of finite partial-monitoring games. Theoretical Computer Science , 2012. Auer, Peter, Cesa-Bianchi, Nicol ` o, and Fischer, Paul. Finite-time analysis of the multiarmed bandit problem. Mach. Learn. , 47(2-3):235 X 256, May 2002.
 Avner, Orly, Mannor, Shie, and Shamir, Ohad. Decoupling exploration and exploitation in multi-armed bandits. In ICML , 2012.

An adaptive algorithm for finite stochastic partial moni-toring. arXiv preprint arXiv:1206.6487 , 2012.
 Chapelle, O., Joachims, T., Radlinski, F., and Yue, Yisong.
Large-scale validation and analysis of interleaved search evaluation. ACM Transactions on Information Systems (TOIS) , 30(1):6:1 X 6:41, 2012.
 Dani, Varsha, Hayes, Thomas P., and Kakade, Sham M. Stochastic linear optimization under bandit feedback. In COLT , pp. 355 X 366, 2008.
 Feige, Uriel, Raghavan, Prabhakar, Peleg, David, and Up-fal, Eli. Computing with noisy information. SIAM J. Comput. , 23(5):1001 X 1018, October 1994.
 Freund, Yoav, Iyer, Raj D., Schapire, Robert E., and Singer,
Yoram. An efficient boosting algorithm for combining preferences. Journal of Machine Learning Research , 4: 933 X 969, 2003.
 Herbrich, R, Graepel, Thore, and Obermayer, Klaus. Large margin rank boundaries for ordinal regression. Book chapter, Advances in Large Margin Classifiers , 2000. Joachims, T., Granka, L., Pan, Bing, Hembrooke, H.,
Radlinski, F., and Gay, G. Evaluating the accuracy of implicit feedback from clicks and query reformulations in web search. ACM Transactions on Information Sys-tems (TOIS) , 25(2), April 2007.
 Karp, Richard M. and Kleinberg, Robert. Noisy binary search and its applications. In Proceedings of the eigh-teenth annual ACM-SIAM symposium on Discrete algo-rithms , SODA  X 07, pp. 881 X 890, 2007.
 Mannor, Shie and Shamir, Ohad. From bandits to experts:
On the value of side-observations. In NIPS , pp. 684 X 692, 2011.
 Piccolboni, Antonio and Schindelhauer, Christian. Discrete prediction games with arbitrary feedback and loss. In
Computational Learning Theory , pp. 208 X 223. Springer, 2001.
 Robbins, H. Some aspects of the sequential design of ex-periments. Bulletin of the AMS , 58:527 X 535, 1952. Train, Keneth. Discrete Choice Methods with Simulation . Cambridge University Press, 2009.
 Yue, Yisong and Joachims, T. Interactively optimizing in-formation retrieval systems as a dueling bandits prob-lem. In International Conference on Machine Learning (ICML) , pp. 151 X 159, 2009.
 Yue, Yisong and Joachims, Thorsten. Beat the mean bandit. In ICML , pp. 241 X 248, 2011.
 Yue, Yisong, Broder, Josef, Kleinberg, Robert, and
Joachims, Thorsten. The k-armed dueling bandits prob-
