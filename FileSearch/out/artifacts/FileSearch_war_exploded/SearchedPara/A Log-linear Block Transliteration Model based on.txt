 Cross-lingual natural language applications, such as in-formation retrieval, question answering, and machine translation for web-documents (e.g. Google translation), are becoming increasingly important. However, current state-of-the-art statistical machine translation (SMT) sys-tems cannot yet translate named-entities which are not seen during training. New named-entities, such as per-son, organization, and location names are continually emerging on the World-Wide-Web. To realize effective cross-lingual natural language applications, handling out-of-vocabulary named-entities is becoming more crucial.
Named entities (NEs) can be translated via transliter-ation: mapping symbols from one writing system to an-other. Letters of the source language are typically trans-formed into the target language with similar pronunci-ation. Transliteration between languages which share similar alphabets and sound systems is usually not dif-ficult, because the majority of letters remain the same. However, the task is significantly more difficult when the language pairs are considerably different, for example, English-Arabic, English-Chinese, and English-Japanese. In this paper, we focus on forward transliteration from Arabic to English.

The work in (Arbabi et al., 1994), to our knowledge, is the first work on machine transliteration of Arabic names into English, French, and Spanish. The idea is to vow-elize Arabic names by adding appropriate vowels and uti-lizing a phonetic look-up table to provide the spelling in the target language. Their framework is strictly applica-ble within standard Arabic morphological rules. Knight and Graehl (1997) introduced finite state transducers that implement back-transliteration from Japanese to English, which was then extended to Arabic-English in (Stalls and Knight, 1998). Al-Onaizan and Knight (2002) translit-erated named entities in Arabic text to English by com-bining phonetic-based and spelling-based models, and re-ranking candidates with full-name web counts, named en-tities co-reference, and contextual web counts. Huang (2005) proposed a specific model for Chinese-English name transliteration with clusterings of names X  origins, and appropriate hypotheses are generated given the ori-gins. All of these approaches, however, are not based on a SMT-framework. Technologies developed for SMT are borrowed in Virga and Khudanpur (2003) and Ab-dulJaleel and Larkey (2003). Standard SMT alignment models (Brown et al., 1993) are used to align letter-pairs within named entity pairs for transliteration. Their ap-proach are generative models for letter-to-letter transla-tions, and the letter-alignment is augmented with heuris-tics. Letter-level contextual information is shown to be very helpful for transliteration. Oh and Choi (2002) used conversion units for English-Korean Transliteration; Goto et al. (2003) used conversion units, mapping En-glish letter-sequence into Japanese Katakana character string. Li et al. (2004) presented a framework allowing direct orthographical mapping of transliteration units be-tween English and Chinese, and an extended model is presented in Ekbal et al. (2006).

We propose a block-level transliteration framework, as shown in Figure 1, to model letter-level context infor-mation for transliteration at two levels. First, we pro-pose a bi-stream HMM incorporating letter-clusters to better model the vowel and non-vowel transliterations with position-information, i.e., initial and final , to im-prove the letter-level alignment accuracy. Second, based on the letter-alignment, we propose letter n-gram (letter-sequence) alignment models ( block ) to automatically learn the mappings from source letter n-grams to target letter n-grams. A few features specific for transliterations are explored, and a log-linear model is used to combine Figure 1: Transliteration System Structure. The upper-part is these features to learn block-level transliteration-pairs from training data. The proposed transliteration frame-work obtained significant improvements over a strong baseline transliteration approach similar to AbdulJaleel and Larkey (2003) and Virga and Khudanpur (2003). The remainder of this paper is organized as follows. In Section 2, we formulate the transliteration as a general translation problem; in Section 4, we propose a log-linear alignment model with a local search algorithm to model the letter n-gram translation pairs; in Section 5, exper-iments are presented. Conclusions and discussions are given in Section 6. Transliteration can be viewed as a special case of transla-tion. In this approach, source and target NEs are split into letter sequences, and each sequence is treated as a pseudo sentence . The appealing reason of formulating transliter-ation in this way is to utilize advanced alignment models, which share ideas applied also within phrase-based sta-tistical machine translation (Koehn, 2004).

To apply this approach to transliteration, however, some unique aspects should be considered. First, letters should be generated from left to right, without any re-ordering. Thus, the transliteration models can only exe-cute forward sequential jumps. Second, for unvowelized languages such as Arabic, a single Arabic letter typically maps to less than four English letters. Thus, the fertility for each letter should be recognized to ensure reasonable length relevance. Third, the position of the letter within a NE is important. For example, in Arabic, letters such as  X  X l X  at the beginning of the NE can only be translated into  X  X he X  or  X  X l X . Therefore position information should be considered within the alignment models.

Incorporating the above considerations, transliteration can be formulated as a noisy channel model. Let f J f f 2 ...f J denote the source NE with J letters, e I 1 e e 2 ...e I be an English transliteration candidate with I letters. According to Bayesian decision rule:  X  e = arg max where P ( f J is the English letter sequence model corresponding to the monolingual language models in SMT. In this noisy-channel scheme, P ( f J transliteration, in which the transliteration between and f J letter n-gram transliteration level ( block -level). Our transliteration models are illustrated in Figure 1. We propose a Bi-Stream HMM of P ( f J letter-to-letter alignments in two directions: Arabic-to-English (F-to-E) and English-to-Arabic (E-to-F), shown in the upper-part in Figure 1; refined alignment is then obtained. We propose a log-linear model to extract block-level transliterations with additional informative features, as illustrated in the lower-part of Figure 1. Standard IBM translation models (Brown et al., 1993) can be used to obtain letter-to-letter translations. How-ever, these models are not directly suitable, because letter-alignment within NEs is strictly left-to-right. This sequential property is well suited to HMMs (Vogel et al., 1996), in which the jumps from the current aligned posi-tion can only be forward. 3.1 Bi-Stream HMMs We propose a bi-stream HMM for letter-alignment within NE pairs. For the source NE f J stream HMM is defined as follows: p ( f J 1 | e I 1 )= where a j maps f j to the English letter e a a j in the English named entity. p ( a j | a j  X  1 ) is the transi-tion probability distribution assuming first-order Markov dependency; p ( f j | e a icon; c f cluster level translation lexicon. As mentioned in the above, the vowel/non-vowel linguistic features can be uti-lized to cluster the letters. The letters from the same clus-ter tend to share the similar letter transliteration forms. p ( c f the transliteration process.

The HMM in Eqn. 2 generates two streams of observa-tions: the letters together with the letters X  classes follow-ing the distribution of p ( f j | e a Figure 2: Block of letters for transliteration. A block is defined state, respectively. To be in accordance with the mono-tone nature of the NE X  X  alignment mentioned before, we enforce the following constraints in Eqn. 3, so that the transition can only jump forward or stay at the same state: Since the two streams are conditionally independent given the current state, the extended EM is straight-forward, with only small modifications of the standard forward-backward algorithm (Zhao et al., 2005), for pa-rameter estimation. 3.2 Designing Letter-Classes Pronunciation is typically highly structured. For in-stance, in English the pronunciation structure of  X  cvc  X  ( consonant-vowel-consonant ) is common. By incorpo-rating letter classes into the proposed two-stream HMM, the models X  expressiveness and robustness can be im-proved. In this work, we focus on transliteration of Ara-bic NEs into English. We define six non-overlapping letter classes: vowel , consonant , initial , final , noclass , and unknown . Initial and final classes represent semantic markers at the beginning or end of NEs such as  X  X l X  and  X  X Al X  (in romanization form). Noclass signifies letters which can be pronounced as both a vowel and a conso-nant depending on context, for example, the English let-ter  X  X  X . The unknown class is reserved for punctuations and letters that we do not have enough linguistic clues for mapping them to phonemes. To further leverage the information from the letter-context beyond the letter-classes incorporated in our bi-stream HMM in Eqn. 2, we define letter n-grams , which consist of n consecutive letters , as the basic transliter-ation unit. A block is defined as a pair of such letter n-grams which are transliterations of each other. Dur-ing decoding of unseen NEs, transliteration is performed block-by-block, rather than letter-by-letter. The goal of transliteration model is to learn high-quality translitera-tion blocks from the training data in a unsupervised fash-ion.

Specifically, a block X can be represented by its left and right boundaries in the source and target NEs shown in Figure 2: in source language, and its projection of e i + k glish NE with left boundary at the position of i , and right boundary at ( i + k ) .

We formulate the block extraction as a local search problem following the work in Zhao and Waibel (2005): given a source letter n-gram f j + l jected boundaries of candidate target letter n-gram e i + k according to a weighted combination of the diverse fea-tures in a log-linear model detailed in  X  4.3. The log-linear model serves as a performance measure to guide the local search, which, in our setup, is randomized hill-climbing , to extract bilingual letter n-gram transliteration pairs. 4.1 Features for Block Transliteration Three features: fertility , distortion , and lexical transla-tion are investigated for inferring transliteration blocks from the NE pairs. Each feature corresponds to one as-pect of the block within the context of a given NE pair. 4.1.1 Letter n-gram Fertility
The fertility P (  X  | e ) of a target letter e specifies the probability of generating  X  source letters for translitera-tion. The fertilities can be easily read-off from the letter-alignment, i.e., the output from the Bi-stream HMM. Given letter fertility model P (  X  | e i ) , a target letter n-gram , and a source n-gram f J probability of letter n-gram length relevance: P ( J | e I via a dynamic programming.

The probability of generating J letters by the English letter n-gram e I The recursively updated cost  X  [ j, i ] in dynamic program-ming is defined as follows:  X  [ j, i ] = max where P Null (0 | e i ) is the probability of generating a Null generating one source letter from e i ;  X  [ j, i ] is the cost so far for generating j letters from i consecutive English letters (letter n-gram) e i After computing the cost of  X  [ J, I ] , the probability P ( J | e I 1 ) is computed for generating the length of the source NE f J With this letter n-gram fertility model, for every block, we can compute a fertility score to estimate how relevant the lengths of the transliteration-pairs are. 4.1.2 Distortion of Centers
When aligning blocks of letters within transliteration pairs, we expect most of them are close to the diagonal due to the monotone alignment nature. Thus, a simple position metric is proposed for each block considering the relative positions within NE-pairs.

The center  X  length of ( l + 1) is simply a normalized relative position in the source entity defined as follows:
For the center of English letter-phrase e i + k define the expected corresponding relative center for ev-ery source letter f j 0 using the lexicalized position score as follows: where P ( f j 0 | e i ) is the letter translation lexicon estimated in IBM Models 1  X  5 . i is the position index, which is weighted by the letter-level translation probabilities; the term of P i + k that the expected center is within the range of the target length. The expected center for e i + k age of the  X 
Given the estimated centers of  X  can compute how close they are via the probability of tone alignment nature of transliteration pairs, a simple gaussian model is employed to enforce that the point (  X  4.1.3 Letter Lexical Transliteration
Similar to IBM Model-1 (Brown et al., 1993), we use a  X  X ag-of-letter X  generative model within a block to ap-proximate the lexical transliteration equivalence: of-word unigram. Since named entities are usually rela-tively short, this approximation works reasonably well in practice. 4.2 Extended Feature Functions Because of the underlying nature of the noisy-channel model in our proposed transliteration approach in Section 2, the three base feature functions are extended to cover the directions both from target-to-source and source-to-target. Therefore, we have in total six feature functions for inferring transliteration blocks from a named entity pair.

Besides the above six feature functions, we also com-pute the average letter-alignment links per block. We count the number of letter-alignment links within the block, and normalize the number by the length of the source letter-ngram. Note that, we can refine the letter-alignment by growing the intersections of the two di-rection letter-alignments from Bi-stream HMM via ad-ditional aligned letter-pairs seen in the union of the two. In a way, this approach is similar to those of refining the word-level alignment for SMT in (Och and Ney, 2003). This step is shown in the upper-part in Figure 1.
Overall, our proposed feature functions cover rela-tively different aspects for transliteration blocks: the block level length relevance probability in Eqn. 5, lexical translation equivalence, and positions X  distortion from a gaussian distribution in Eqn. 8, in both directions; and the average number of letter-alignment links within the block. Also, these feature functions are positive and bounded within [0 , 1] . Therefore, it is suitable to apply a log-linear model (in  X  4.3) to combine the weighted indi-vidual strengths from the proposed feature functions for better modeling the quality of the candidate translitera-tion blocks. This log-linear model will serve as a per-formance measure in a local-search in  X  4.4 for inferring transliteration blocks. 4.3 Log-Linear Transliteration Model We propose a log-linear model to combine the seven fea-ture functions in  X  4.1 with proper weights as in Eqn. 11:
Pr ( X | e , f )= where  X  m ( X, e , f ) are the real-valued bounded feature functions corresponding to the seven models introduced in  X  4.1. The log-linear model X  X  parameters are the weights {  X  m } associated with each feature function.
With hand-labeled data, {  X  m } can be learnt via gen-eralized iterative scaling algorithm (GIS) (Darroch and Ratcliff, 1972) or improved iterative scaling (IIS) (Berger et al., 1996). However, as these algorithms are computa-tionally expensive, we apply an alternative approach us-ing a simplex down-hill algorithm to optimize the weights toward better F-measure of block transliterations. Each feature function corresponds to one dimension in the sim-plex, and the local optimum only happens at a vertex of the simplex. Simplex-downhill has several advantages: it is an efficient approach for optimizing multi-variables given some performance measure. We compute the F-measure against a gold-standard block set extracted from hand-labeled letter-alignment.

To build gold-standard blocks from hand-labeled letter-alignment, we propose the block transliteration co-herence in a two-stage fashion. First is the forward pro-jection: for each candidate source letter-ngram f j + n search for its left-most e l and right-most e r projected positions in the target NE according to the given letter-alignment. Second is the backward projection: for the target letter-gram e r most f r 0 projected positions in the source NE. Now if l 0  X  j and r 0  X  j + n , i.e. f r l is contained within the source letter-ngram f j + n fined as coherent for the aligned pairs: ( f j + n accept coherent X as gold-standard blocks. This block transliteration coherence is generally sound for extracting the gold-blocks mostly because of the the monotone left-to-right nature of the letter-alignment for transliteration. A related coherence assumption can be found in (Fox, 2002), where their assumption on phrase-pairs for sta-tistical machine translation is shown to be somewhat re-strictive for SMT. This is mainly because the word align-ment is often non-monotone , especially for langauge-pairs from different families such as Arabic-English and Chinese-English. 4.4 Aligning Letter-Blocks: a Local Search Aligning the blocks within NE pairs can be formulated as a local search given the heuristic function defined in Eqn. 11. To be more specific: given a Arabic letter-ngram f tation, we use stochastic hill-climbing with Eqn. 11 as the performance measure. Down-hill moves are accepted to allow one or two left and right null letters to be attached to e i + k i to expand the table of transliteration-blocks.
To make the local search more effective, we normal-ize the letter translation lexicon p ( f | e ) within the parallel entity pair as in: In this way, the distribution of  X  P ( f | e ) is sharper and more focused in the context of an entity pair.

Overall, given the parallel NE pairs, we can train the letter level translation models in both directions via the Bi-stream HMM in Eqn. 2. From the letter-alignment, we can build the letter translation lexicons and fertility tables. With these tables, the base feature functions are then computed for each candidate block, and the features are combined in the log-linear model in Eqn. 11. Given a named-entity pair in the training data, we rank all the transliteration blocks by the scores using the log-linear model. This step is shown in the lower-part in Figure 1. 4.5 Decoding Unseen NEs The decoding of NEs is an extension to the noisy-channel scheme in Eqn. 1. In our configurations for NE translit-eration, the extracted transliteration blocks are used. Our letter ngram is a standard letter-ngram model trained us-ing the SriLM toolkit (Stolcke, 2002). To transliterate the unseen NEs, the decoder (Hewavitharana et al., 2005) is configured for monotone decoding. It loads the transliter-ation blocks and the letter-ngram LM, and it decodes the unseen Arabic named entities with block-based translit-eration from left to right. 5.1 The Data We have 74,887 bilingual geographic names from LDC2005G01-NGA, 11,212 bilingual person names 92,099 NE pairs. We split them into three parts: 91,459 pairs as the training dataset, 100 pairs as the development dataset, and 540 unique NE pairs as the held-out dataset. An additional test set is collected from the TIDES 2003 Arabic-English machine translation evaluation test set. The 663 sentences contain 286 unique words, which were not covered by the available training data. From this set of untranslated words, we manually labeled the entities of persons, locations and organizations, giving a total of 97 unique un-translated NEs. The BAMA toolkit was used to romanize the Arabic words. Some names from this test set are shown in Figure 1.

These untranslated NEs make up only a very small fraction of all words in the test set. Therefore, having correct transliterations would give only small improve-ments in terms of BLEU (Papineni et al., 2002) and NIST scores. However, successfully translating these unknown NEs is very crucial for cross-lingual distillation tasks or question-answering based on the MT-output.
To evaluate the transliteration performance, we use edit-distance between the hypothesis against a reference set. This is to count the number of insertions, dele-tions, and substitutions required to correct the hypoth-esis to match the given reference. An edit-distance of zero is a perfect match. However, NEs typically have more than one correct variant. For example, the Arabic name  X  X Hmd X  (in romanized form) can be transliterated as Muhammad or Mohammed; both are considered as correct transliterations. Ideally, we want to have all vari-ants as reference transliterations. To enable our translit-eration evaluation to be more informative given only one reference, edit-distance of one between hypothesis and reference is considered to be an acceptable match. 5.2 Comparison of Transliteration Models We compare the performance of three systems within our proposed framework in Figure.1: the baseline Block sys-tem, a system in which we use a log-linear combination of alignment features as described in  X  4.3, we call the the L-Block system, and finally a system, which also uses the bi-stream HMM alignment model as described in  X  3. This last system will be denoted LCBE system.

The baseline is based on the refined letter-alignment from the two directions of IBM-Model-4, trained with a scheme of 1 5 h 5 4 5 using GIZA++ (Och and Ney, 2004). The final alignment was obtained by growing the inter-sections between Arabic-to-English (AE) and English-to-Arabic (EA) alignments with additional aligned letter-pairs seen in the union. This is to compensate for the inherent asymmetry in alignment models. Blocks (letter-ngram pairs) were collected directly from the refined letter-alignment, using the same algorithm as described in  X  4.3 for extracting gold-standard letter blocks. There is no length restrictions to the letter-ngram extracted in our system. All the blocks were then scored using relative frequencies and lexical scores in both directions, similar to the scoring of phrase-pairs in SMT (Koehn, 2004).
In the L-Block system additional feature functions as defined in  X  4.1 were computed on top of the letter-level alignment obtained from the baseline system. A log-linear model combining these features was learned with the gold-blocks described in  X  4.3. Transliteration blocks were extracted using the local-search  X  4.4. The other Table 2: Transliteration accuracy for different translitera-tion models.
 components remained the same as in the baseline system.
The LCBE system is an extension to both the baseline and the L-Block system. The key difference in LCBE is that our proposed bi-stream HMM in Eqn. 2 was ap-plied in both directions with extended letter-classes. The resulting combined alignment was used together with all features of the L-Block system to guide the local-search for extracting the blocks. The same procedure of decod-ing was then carried out for the unseen NEs using the extracted blocks.

To build the letter language model for the decoding process, we first split the English entities into charac-ters; additional position indicators  X  begin X  and  X  end X  were added to the begin and end position of the named-entity;  X  middle X  was added between the first name and last name. A letter-trigram language model with SRI LM toolkit (Stolcke, 2002) was then built using the target side (English) of NE pairs tagged with the above position in-formation.

Table 2 shows that the baseline system gives an accu-racy of 39.18%, while the extended systems L-Block and LCBE give 41.24% and 46.39%, respectively. These re-sults show that the additional features besides the letter-alignment are helpful. The L-Block system, which uses these features, outperforms the baseline system signifi-cantly by 2.1% absolute in accuracy. The results also show that the bi-stream HMM alignment, which uses not only the letters but also the letter-classes, leads to signif-icant improvement. It outperforms the L-Block system, which does not leverage the letter-classes and monotone alignment, by 4.15% absolute. 5.3 Incorporation of Spell Checking Our spelling-checker is based on the suggested word-forms from web search engines for ambiguous candi-dates. We collected web statistics frequency for both the proposed transliteration candidates from our system, and also the suggested candidates from web-search engines. All the candidates were re-ranked by their frequencies.
Figure 3 shows the performances on the held-out set, using system LCBE augmented with a spell-checker ( LCBE+Spell ), with varying sizes of N-best hypotheses lists. The held-out set contains 540 unique named entity pairs. We show accuracy when exact match is requested and when an edit distances of one is allowed. Figure 3: Transliteration accuracy of LCBE and LCBE+Spell Figure 4: Transliteration accuracy of N-best hypotheses for
Figure 4 shows the performances in the unseen test set of LCBE and LCBE+Spell, with varying sizes of N-best hypotheses lists. LCBE+Spell reaches 52% accuracy in 1-best hypothesis. In the 5-best and 10-best cases, the ac-curacies of LCBE+Spell system archive the highest per-formances with 66% and 72.16% respectively. The spell-checker increases the 1-best accuracy by 11.12% and the 10-best accuracy by 7.69%. All these improvements are statistically significant. These results are also comparable to other state-of-the-art statistical Arabic name transliter-ation systems such as (Al-Onaizan and Knight, 2002). 5.4 Comparison with the Google Web Translation We finally compared our best system with the state-of-the-art Arabic-English Google Web Translation (Google). Table 3 shows transliteration examples from our best system in comparison with Google (as in June racy for the 1-best hypothesis, which is comparable to the results when using the LCBE transliteration system, while LCBE+Spell archived 52%. Table 3: Transliteration examples between LCBE+Spell and Google web translation. In this paper we proposed a novel transliteration model. Viewing transliteration as a translation task we adopt alignment and decoding techniques used in a phrase-based statistical machine translation system to work on letter sequences instead of word sequences. To improve the performance we extended the HMM alignment model into a bi-stream HMM alignment by incorporating letter-classes into the alignment process. We also showed that a block-extraction approach, which uses a log-linear com-bination of multiple alignment features, can give signif-icant improvements in transliteration accuracy. Finally, spell-checking based on work occurrence statistics ob-tained from the web gave an additional boost in translit-eration accuracy.

The goal for this work is to improve the quality of ma-chine translation, esp. when used in cross-lingual infor-mation retrieval and distillation tasks, by incorporating the proposed framework to handle unknown words. Fig-ure 5 gives an example of the difference named entity transliteration can make. Shown are the original SMT system output, the translation when the proposed translit-eration models are used to translate the unknown named-entities, and the reference translation. A comparison of the two SMT outputs indicates that integrating the pro-posed transliteration model into our machine translation system can significantly improve translation utility. This work was partially supported by grants from DARPA (GALE project) and NFS (Str-Dust project). Figure 5: Incorporation of the transliteration model to our
