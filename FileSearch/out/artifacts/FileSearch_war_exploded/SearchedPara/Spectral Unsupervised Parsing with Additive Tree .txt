 Solutions to the problem of grammar induction have been long sought after since the early days of computational linguistics and are interesting both from cognitive and engineering perspectives. Cog-nitively, it is more plausible to assume that chil-dren obtain only terminal strings of parse trees and not the actual parse trees. This means the unsu-pervised setting is a better model for studying lan-guage acquisition. From the engineering perspec-tive, training data for unsupervised parsing exists in abundance (i.e. sentences and part-of-speech tags), and is much cheaper than the syntactically annotated data required for supervised training.
Most existing solutions treat the problem of un-supervised parsing by assuming a generative pro-cess over parse trees e.g. probabilistic context free grammars (Jelinek et al., 1992), and the con-stituent context model (Klein and Manning, 2002). Learning then reduces to finding a set of parame-ters that are estimated by identifying a local max-imum of an objective function such as the likeli-hood (Klein and Manning, 2002) or a variant of it (Smith and Eisner, 2005; Cohen and Smith, 2009; Headden et al., 2009; Spitkovsky et al., 2010b; Gillenwater et al., 2010; Golland et al., 2012). Un-fortunately, finding the global maximum for these objective functions is usually intractable (Cohen and Smith, 2012) which often leads to severe lo-cal optima problems (but see Gormley and Eisner, 2013). Thus, strong experimental results are often achieved by initialization techniques (Klein and Manning, 2002; Gimpel and Smith, 2012), incre-mental dataset use (Spitkovsky et al., 2010a) and other specialized techniques to avoid local optima such as count transforms (Spitkovsky et al., 2013). These approaches, while empirically promising, generally lack theoretical justification.

On the other hand, recently proposed spectral methods approach the problem via restriction of the PCFG model (Hsu et al., 2012) or matrix com-pletion (Bailly et al., 2013). These novel perspec-tives offer strong theoretical guarantees but are not designed to achieve competitive empirical results.
In this paper, we suggest a different approach, to provide a first step to bridging this theory-experiment gap. More specifically, we approach unsupervised constituent parsing from the per-spective of structure learning as opposed to pa-rameter learning. We associate each sentence with an undirected latent tree graphical model, which is a tree consisting of both observed variables (corre-sponding to the words in the sentence) and an ad-ditional set of latent variables that are unobserved in the data. This undirected latent tree is then di-rected via a direction mapping to give the final constituent parse.

In our framework, parsing reduces to finding the best latent structure for a given sentence. How-ever, due to the presence of latent variables, struc-ture learning of latent trees is substantially more complicated than in observed models. As before, one solution would be local search heuristics.
Intuitively, however, latent tree models en-code low rank dependencies among the observed variables permitting the development of  X  X pec-tral X  methods that can lead to provably correct solutions. In particular we leverage the con-cept of additive tree metrics (Buneman, 1971; Buneman, 1974) in phylogenetics and machine learning that can create a special distance met-ric among the observed variables as a function of the underlying spectral dependencies (Choi et al., 2011; Song et al., 2011; Anandkumar et al., 2011; Ishteva et al., 2012). Additive tree met-rics can be leveraged by  X  X eta-algorithms X  such as neighbor-joining (Saitou and Nei, 1987) and recursive grouping (Choi et al., 2011) to provide consistent learning algorithms for latent trees.
Moreover, we show that it is desirable to learn the  X  X inimal X  latent tree based on the tree metric ( X  X inimum evolution X  in phylogenetics). While this criterion is in general NP-hard (Desper and Gascuel, 2005), for projective trees we find that a bilexical parsing algorithm can be used to find an exact solution efficiently (Eisner and Satta, 1999).
Unlike in phylogenetics and graphical models, where a single latent tree is constructed for all the data, in our case, each part of speech sequence is associated with its own parse tree. This leads to a severe data sparsity problem even for moderately long sentences. To handle this issue, we present a strategy that is inspired by ideas from kernel smoothing in the statistics community (Zhou et al., 2010; Kolar et al., 2010b; Kolar et al., 2010a). This allows principled sharing of samples from different but similar underlying distributions.
We provide theoretical guarantees on the re-covery of the correct underlying latent tree and characterize the associated sample complexity un-der our technique. Empirically we evaluate our method on data in English, German and Chi-nese. Our algorithm performs favorably to Klein and Manning X  X  (2002) constituent-context model (CCM), without the need for careful initialization. In addition, we also analyze CCM X  X  sensitivity to initialization, and compare our results to Seginer X  X  algorithm (Seginer, 2007). In this section, we detail the learning setting and a conditional tree model we learn the structure for. 2.1 Learning Setting Let w = ( w 1 ,...,w ` ) be a vector of words corre-sponding to a sentence of length ` . Each w i is rep-resented by a vector in R p for p  X  N . The vector is an embedding of the word in some space, cho-sen from a fixed dictionary that maps word types to R p . In addition, let x = ( x 1 ,...,x ` ) be the as-sociated vector of part-of-speech (POS) tags (i.e. x i is the POS tag of w i ).

In our learning algorithm, we assume that ex-{ 1 ,...,N } are given, and the goal is to predict a bracketing parse tree for each of these examples. The word embeddings are used during the learn-ing process, but the final decoder that the learning algorithm outputs maps a POS tag sequence x to a parse tree. While ideally we would want to use the word information in decoding as well, much of the syntax of a sentence is determined by the POS tags, and relatively high level of accuracy can be achieved by learning, for example, a supervised parser from POS tag sequences.

Just like our decoder, our model assumes that the bracketing of a given sentence is a function of its POS tags. The POS tags are generated from some distribution, followed by a determin-istic generation of the bracketing parse tree. Then, latent states are generated for each bracket, and finally, the latent states at the yield of the bracket-ing parse tree generate the words of the sentence (in the form of embeddings). The latent states are represented by vectors z  X  R m where m &lt; p . 2.2 Intuition For intuition, consider the simple tag sequence x = ( VBD , DT , NN ) . Two candidate constituent parse structures are shown in Figure 2 and the cor-rect one is boxed in green (the other in red). Re-call that our training data contains word phrases that have the tag sequence x e.g. w (1) = ( hit , the , ball ) , w (2) = ( ate , an , apple ) .
Intuitively, the words in the above phrases ex-hibit dependencies that can reveal the parse struc-ture. The determiner ( w 2 ) and the direct object ( w 3 ) are correlated in that the choice of deter-miner depends on the plurality of w 3 . However, the choice of verb ( w 1 ) is mostly independent of the determiner. We could thus conclude that w 2 and w 3 should be closer in the parse tree than w 1 and w 2 , giving us the correct structure. Informally, the latent state z corresponding to the ( w 2 ,w 3 ) bracket would store information about the plural-ity of z , the key to the dependence between w 2 and w 3 . It would then be reasonable to assume that w 2 and w 3 are independent given z . 2.3 A Conditional Latent Tree Model Following this intuition, we propose to model the distribution over the latent bracketing states and words for each tag sequence x as a latent tree graphical model, which encodes conditional inde-pendences among the words given the latent states.
Let V := { w 1 ,...,w ` ,z 1 ,...,z H } , with w i rep-resenting the word embeddings, and z i represent-ing the latent states of the bracketings. Then, ac-cording to our base model it holds that: where  X  argument in the latent tree corresponding to tag sequence x . 1 If z is the root, then  X  All the w i are assumed to be leaves while all the z i are internal (i.e. non-leaf) nodes. The param-eters  X  ( x ) control the conditional probability ta-bles. We do not commit to a certain parametric family, but see more about the assumptions we make about  X  in  X  3.2. The parameter space is de-noted  X  . The model assumes a factorization ac-cording to a latent-variable tree. The latent vari-ables can incorporate various linguistic properties, such as head information, valence of dependency being generated, and so on. This information is expected to be learned automatically from data. Our generative model deterministically maps a POS sequence to a bracketing via an undirected latent-variable tree. The orientation of the tree is determined by a direction mapping h dir ( u ) , which is fixed during learning and decoding. This means our decoder first identifies (given a POS sequence) an undirected tree, and then orients it by applying h dir on the resulting tree (see below).

Define U to be the set of undirected latent trees where all internal nodes have degree exactly 3 (i.e. they correspond to binary bracketing), and in addi-tion h dir ( u ) for any u  X  X  is projective (explained in the h dir section). In addition, let T be the set of binary bracketings. The complete generative model that we follow is then:  X  Generate a tag sequence x = ( x 1 ,...,x ` )  X  Decide on u ( x )  X  U , the undirected latent tree that x maps to.  X  Set t  X  X  by computing t = h dir ( u ) .  X  Set  X   X   X  by computing  X  =  X  ( x ) .  X  Generate a tuple v = ( w 1 ,...,w ` ,z 1 ,...,z H ) where w i  X  R p ,z j  X  R m according to Eq. 1. See Figure 1 (left) for an example.
 The Direction Mapping h dir . Generating a bracketing via an undirected tree enables us to build on existing methods for structure learning of latent-tree graphical models (Choi et al., 2011; Anandkumar et al., 2011). Our learning algorithm focuses on recovering the undirected tree based for the generative model that was described above. This undirected tree is converted into a directed tree by applying h dir . The mapping h dir works in three steps:  X  It first chooses a top bracket ([1 ,R  X  1] , [ R,` ]) where R is the mid-point of the bracket and ` is the length of the sentence.  X  It marks the edge e i,j that splits the tree accord-ing to the top bracket as the  X  X oot edge X  (marked in red in Figure 1(center))  X  It then creates t from u by directing the tree out-ward from e i,j as shown in Figure 1(center) The resulting t is a binary bracketing parse tree. As implied by the above definition of h dir , se-lecting which edge is the root can be interpreted as determining the top bracket of the constituent parse. For example, in Figure 1, the top bracket that the  X  X oot X  edge e z into precisely this bracketing. As indicated in the above section, we restrict the set of undirected trees to be those such that after applying h dir the resulting t is projective i.e. there are no crossing brackets. In  X  4.1, we discuss an effective heuristic to find the top bracket without supervision. Our goal is to recover t  X  T for tag sequence x tuition about the algorithm, consider a partition of the set of examples D into D ( x ) = { ( w ( i ) , x ( i ) )  X  an identical sequence of part of speech tags. As-sume for this section |D ( x ) | is large (we address the data sparsity issue in  X  3.4).
 We can then proceed by learning how to map a POS sequence x to a tree t  X  T (through u  X  U ) by focusing only on examples in D ( x ) .

Directly attempting to maximize the likelihood unfortunately results in an intractable optimiza-tion problem and greedy heuristics are often em-ployed (Harmeling and Williams, 2011). Instead we propose a method that is provably consistent and returns a tree that can be mapped to a bracket-ing using h dir .
 If all the variables were observed, then the Chow-Liu algorithm (Chow and Liu, 1968) could be used to find the most likely tree structure u  X  U . The Chow-Liu algorithm essentially computes the distances among all pairs of variables (the neg-ative of the mutual information) and then finds the minimum cost tree. However, the fact that the z i are latent variables makes this strategy substan-tially more complicated. In particular, it becomes challenging to compute the distances among pairs of latent variables. What is needed is a  X  X pecial X  distance function that allows us to reverse engineer the distances among the latent variables given the distances among the observed variables. This is the key idea behind additive tree metrics that are the basis of our approach.

In the following sections, we describe the key steps to our method.  X  3.1 and  X  3.2 largely describe existing background on additive tree metrics and latent tree structure learning, while  X  3.3 and  X  3.4 discuss novel aspects that are unique to our prob-lem. 3.1 Additive Tree Metrics Let u ( x ) be the true undirected tree of sentence x and assume the nodes V to be indexed by [ M ] = { 1 ,...,M } such that M = |V| = H + ` . Fur-thermore, let v  X  V refer to a node in the undi-rected tree (either observed or latent). We assume the existence of a distance function that allows us to compute distances between pairs of nodes. For example, as we see in  X  3.2 we will define the dis-tance d ( i,j ) to be a function of the covariance ma-trix E [ v i v &gt; j | u ( x ) , X  ( x )] . Thus if v i and v observed variables, the distance can be directly computed from the data.

Moreover, the metrics we construct are such that they are tree additive , defined below: Definition 1 A function d u ( an additive tree metric (Erd  X  os et al., 1999) for the undirected tree u ( x ) if it is a distance metric, 2 and furthermore,  X  i,j  X  [ M ] the following relation holds: where path u ( the (undirected) path from i to j in the tree u ( x ) .
As we describe below, given the tree structure, the additive tree metric property allows us to com-pute  X  X ackwards X  the distances among the latent variables as a function of the distances among the observed variables.

Define D to be the M  X  M distance matrix among the M variables, i.e. D ij = d u ( cate the word-word, latent-word and latent-latent sub-blocks of D respectively. In addition, since u ( x ) is assumed to be known from context, we denote d u (
Given the fact that the distance between a pair of nodes is a function of the random variables they represent (according to the true model), only D WW can be empirically estimated from data. However, if the underlying tree structure is known, then Definition 1 can be leveraged to compute D
ZZ and D ZW as we show below.
We first show how to compute d ( i,j ) for all i,j such that i and j are adjacent to each other in u ( x ) , based only on observed nodes. It then follows that the other elements of the distance matrix can be computed based on Definition 1. To show how to compute distances between adjacent nodes, con-sider the two cases: (1) ( i,j ) is a leaf edge; (2) ( i,j ) is an internal edge.
 Case 1 (leaf edge, figure 3(a)) Assume without loss of generality that j is the leaf and i is an in-ternal latent node. Then i must have exactly two other neighbors a  X  [ M ] and b  X  [ M ] . Let A denote the set of nodes that are closer to a than i and similarly let B denote the set of nodes that are closer to b than i . Let A  X  and B  X  denote all the leaves (word nodes) in A and B respectively. Then using path additivity (Definition 1), it can be d ( i,j ) =
Note that the right-hand side only depends on distances between observed random variables. Case 2 (internal edge, figure 3(b)) Both i and j are internal nodes. In this case, i has exactly two other neighbors a  X  [ M ] and b  X  [ M ] , and similarly, j has exactly other two neighbors g  X  [ M ] and h  X  [ M ] . Let A denote the set of nodes closer to a than i , and analogously for B , G , and H . Let A  X  , B  X  , G  X  , and H  X  refer to the leaves in A,B,G , and H respectively. Then for any a  X   X  shown that: d ( i,j ) = 1
Empirically, one can obtain a more robust em-pirical estimate b d ( i,j ) by averaging over all valid 3.2 Constructing a Spectral Additive Metric In constructing our distance metric, we begin with the following assumption on the distribution in Eq. 1 (analogous to the assumptions made in Anandkumar et al., 2011).
 Assumption 1 (Linear, Rank m , Means) E [ z i |  X  where A ( z E [ w i |  X  where C ( w
Also assume that E [ z i z &gt; i | x ] has rank m  X  i  X  [ H ] .

Note that the matrices A and C are a direct function of  X  ( x ) , but we do not specify a model family for  X  ( x ) . The only restriction is in the form of the above assumption. If w i and z i were dis-crete, represented as binary vectors, the above as-sumption would correspond to requiring all con-ditional probability tables in the latent tree to have rank m . Assumption 1 allows for the w i to be high dimensional features, as long as the expectation requirement above is satisfied. Similar assump-tions are made with spectral parameter learning methods e.g. Hsu et al. (2009), Bailly et al. (2009), Parikh et al. (2011), and Cohen et al. (2012).
Furthermore, Assumption 1 makes it explicit that regardless of the size of p , the relationships among the variables in the latent tree are restricted to be of rank m , and are thus low rank since p &gt; m . To leverage this low rank structure, we propose using the following additive metric, a normalized variant of that in Anandkumar et al. (2011): where  X  m ( A ) denotes the product of the top m singular values of A and  X  i.e. the uncentered cross-covariance matrix. We can then show that this metric is additive: Lemma 1 If Assumption 1 holds then, d spectral is an additive tree metric (Definition 1).
 A proof is in the supplementary for completeness. From here, we use d to denote d spectral , since that is the metric we use for our learning algorithm. 3.3 Recovering the Minimal Projective It has been shown (Rzhetsky and Nei, 1993) that for any additive tree metric, u ( x ) can be recovered by solving arg min u  X  X  c ( u ) for c ( u ) : where E u is the set of pairs of nodes which are adjacent to each other in u and d ( i,j ) is computed using Eq. 3 and Eq. 4.

Note that the metric d we use in defining c ( u ) is based on the expectations from the true distri-bution. In practice, the true distribution is un-known, and therefore we use an approximation for the distance metric  X  d . As we discussed in  X  3.1 all elements of the distance matrix are functions of observable quantities if the underlying tree u is known. However, only the word-word sub-block D
WW can be directly estimated from the data without knowledge of the tree structure.

This subtlety makes solving the minimization problem in Eq. 6 NP-hard (Desper and Gascuel, 2005) if u is allowed to be an arbitrary undirected tree. However, if we restrict u to be in U , as we do in the above, then maximizing  X  c ( u ) over U can be solved using the bilexical parsing algorithm from Eisner and Satta (1999). This is because the com-putation of the other sub-blocks of the distance matrix only depend on the partitions of the nodes shown in Figure 3 into A , B , G , and H , and not on the entire tree structure.

Therefore, the procedure to find a bracketing for a given POS tag x is to first estimate the dis-tance matrix sub-block b D WW from raw text data (see  X  3.4), and then solve the optimization prob-lem arg min u  X  X   X  c ( u ) using a variant of the Eisner-Satta algorithm where  X  c ( u ) is identical to c ( u ) in Eq. 6, with d replaced with  X  d .

Summary. We first defined a generative model that describes how a sentence, its sequence of POS tags, and its bracketing is generated (  X  2.3). First an undirected u  X  U is generated (only as a func-tion of the POS tags), and then u is mapped to a bracketing using a direction mapping h dir . We then showed that we can define a distance met-ric between nodes in the undirected tree, such that minimizing it leads to a recovery of u . This dis-tance metric can be computed based only on the text, without needing to identify the latent infor-mation (  X  3.2). If the true distance metric is known, Algorithm 1 The learning algorithm for find-ing the latent structure from a set of examples Inputs: Set of examples ( w ( i ) , x ( i ) ) for i  X  [ N ] , a kernel K  X  ( j,k,j 0 ,k 0 | x , x 0 ) , an integer m Data structures: For each i  X  [ N ] ,j,k  X  b  X  Algorithm: (Covariance estimation)  X  i  X  [ N ] ,j,k  X  ` ( x ( i ) ) and estimate each p  X  p covariance matrix as:  X  Compute  X  d spectral ( j,k )  X  j,k  X  ` ( x ( i ) ) using
Eq. 5. (Uncover structure)  X  i  X  [ N ] example, return the structure h dir ( X  u ( i ) ) . with respect to the true distribution that generates the words in a sentence, then u can be fully recov-ered by optimizing the cost function c ( u ) . How-ever, in practice the distance metric must be esti-mated from data, as discussed below. 3.4 Estimation of d from Sparse Data We now address the data sparsity problem, in par-ticular that D ( x ) can be very small, and therefore estimating d for each POS sequence separately can
In order to estimate d from data, we need to es-timate the covariance matrices  X  { 1 ,...,` ( x ) } ) from Eq. 5.

To give some motivation to our solu-tion, consider estimating the covariance matrix  X  x = ( DT 1 , NN 2 , VBD 3 , DT 4 , NN 5 ) . D ( x ) may be insufficient for an accurate empirical es-timate. However, consider another sequence x 0 = ( RB 1 , DT 2 , NN 3 , VBD 4 , DT 5 , ADJ 6 , NN 7 ) . Although x and x 0 are not identical, it is likely that  X  determiner and the noun appear in similar syn-tactic context.  X  similar, but  X  to  X  appear in a different syntactic context.

The observation that the covariance matrices depend on local syntactic context is the main driv-ing force behind our solution. The local syntactic context acts as an  X  X nchor, X  which enhances or re-places a word index in a sentence with local syn-tactic context. More formally, an anchor is a func-tion G that maps a word index j and a sequence of POS tags x to a local context G ( j, x ) . The anchor we use is G ( j, x ) = ( j,x j ) . Then, the covariance matrices  X  ing (Hastie et al., 2009), where the smoother tests similarity between the different anchors G ( j, x ) . The full learning algorithm is given in Figure 1. The first step in the algorithm is to estimate the covariance matrix block b  X  sitions ( j,k ) in x ( i ) . Instead of computing this block by computing the empirical covariance ma-trix for positions ( j,k ) in the data D ( x ) , the al-gorithm uses all of the pairs ( j 0 ,k 0 ) from all of N training examples. It averages the empirical covariance matrices from these contexts using a kernel weight, which gives a similarity measure for the position ( j,k ) in x ( i ) and ( j 0 ,k 0 ) in an-other example x ( i 0 ) .  X  is the kernel  X  X andwidth X , a user-specified parameter that controls how in-clusive the kernel will be with respect to exam-ples in D (see  X  4.1 for a concrete example). Note that the learning algorithm is such that it ensures that b  X 
Once the empirical estimates for the covariance matrices are obtained, a variant of the Eisner-Satta algorithm is used, as mentioned in  X  3.3. 3.5 Theoretical Guarantees Our main theoretical guarantee is that Algorithm 1 will recover the correct tree u  X  X  with high prob-ability, if the given top bracket is correct and if model in  X  2. We give the theorem statement be-low. The constants lurking in the O -notation and the full proof are in the supplementary.

Denote  X  lar value of  X  Theorem 1 Define  X  u as the estimated tree for tag sequence x and u ( x ) as the correct tree. Let 4 ( x ) := min Assume that N  X O Then with probability 1  X   X  ,  X  u = u ( x ) . where  X  function of the underlying distribution over the tag sequences x and the kernel bandwidth  X  .

Thus, the sample complexity of our approach depends on the dimensionality of the latent and observed states ( m and p ), the underlying singu-lar values of the cross-covariance matrices (  X   X  ( x ) ) and the difference in the cost of the true tree com-pared to the cost of the incorrect trees ( 4 ( x ) ). We report results on three different languages: En-glish, German, and Chinese. For English we use the Penn treebank (Marcus et al., 1993), with sec-tions 2 X 21 for training and section 23 for final testing. For German and Chinese we use the Ne-gra treebank and the Chinese treebank respectively and the first 80% of the sentences are used for training and the last 20% for testing. All punc-
We primarily compare our method to the constituent-context model (CCM) of Klein and Manning (2002). We also compare our method to the algorithm of Seginer (2007). 4.1 Experimental Settings Top bracket heuristic Our algorithm requires the top bracket in order to direct the latent tree. In practice, we employ the following heuristic to find the bracket using the following three steps:  X  If there exists a comma/semicolon/colon at in-dex i that has at least a verb before i and both a noun followed by a verb after i , then return ([0 ,i  X  1] , [ i,` ( x )]) as the top bracket. (Pick the rightmost comma/semicolon/colon if multi-ple satisfy the criterion).  X  Otherwise find the first non-participle verb (say at index j ) and return ([0 ,j  X  1] , [ j,` ( x )]) .  X  If no verb exists, return ([0 , 1] , [1 ,` ( x )]) . Word embeddings As mentioned earlier, each w i can be an arbitrary feature vector. For all lan-guages we use Brown clustering (Brown et al., 1992) to construct a log( C ) + C feature vector where the first log( C ) elements indicate which mergable cluster the word belongs to, and the last C elements indicate the cluster identity. For En-glish, more sophisticated word embeddings are easily obtainable, and we experiment with neural word embeddings Turian et al. (2010) of length 50. We also explored two types of CCA embed-dings: OSCCA and TSCCA, given in Dhillon et al. (2012). The OSCCA embeddings behaved bet-ter, so we only report its results.
 Choice of kernel For our experiments, we use the kernel where  X  denotes the user-specified bandwidth, and  X  ( j,k,j 0 ,k 0 | x , x 0 ) = k ) = sign ( j 0  X  k 0 ) (and  X  otherwise).

The kernel is non-zero if and only if the tags at position j and k in x are identical to the ones in position j 0 and k 0 in x 0 , and if the direction be-tween j and k is identical to the one between j 0 and k 0 . Note that the kernel is not binary, as op-posed to the theoretical kernel in the supplemen-tary material. Our experiments show that using a non-zero value different than 1 that is a function of the distance between j and k compared to the distance between j 0 and k 0 does better in practice. Choice of data For CCM, we found that if the full dataset (all sentence lengths) is used in train-ing, then performance degrades when evaluating on sentences of length  X  10 . We therefore restrict the data used with CCM to sentences of length  X  ` , where ` is the maximal sentence length being evaluated. This does not happen with our algo-rithm, which manages to leverage lexical informa-tion whenever more data is available. We therefore use the full data for our method for all lengths.
We also experimented with the original POS tags and the universal POS tags of Petrov et al. (2011). Here, we found out that our method does better with the universal part of speech tags. For CCM, we also experimented with the origi-nal parts of speech, universal tags (CCM-U), the cross-product of the original parts of speech with the Brown clusters (CCM-OB), and the cross-product of the universal tags with the Brown clus-ters (CCM-UB). The results in Table 1 indicate that the vanilla setting is the best for CCM.
Thus, for all results, we use universal tags for our method and the original POS tags for CCM. We believe that our approach substitutes the need for fine-grained POS tags with the lexical informa-tion. CCM, on the other hand, is fully unlexical-ized.
 Parameter Selection Our method requires two parameters, the latent dimension m and the band-width  X  . CCM also has two parameters, the num-ber of extra constituent/distituent counts used for smoothing. For both methods we chose the best parameters for sentences of length `  X  10 on the English Penn Treebank (training) and used this set for all other experiments. This resulted in m = 7 , X  = 0 . 4 for our method and 2 , 8 for CCM X  X  extra constituent/distituent counts respec-tively. We also tried letting CCM choose differ-ent hyperparameters for different sentence lengths based on dev-set likelihood, but this gave worse results than holding them fixed. 4.2 Results Test I: Accuracy Table 2 summarizes our re-sults. CCM is used with the initializer proposed indicate the performance of our method for neural embeddings, CCA embeddings, and Brown clus-tering respectively, using the heuristic for h dir de-scribed in  X  4.1. NN-O, CC-O, and BC-O indicate that the oracle (i.e. true top bracket) was used for h dir . For our method, test set results can be ob-tained by using Algorithm 1 (except the distances are computed using the training data).

For English, while CCM behaves better for short sentences ( `  X  10 ), our algorithm is more robust with longer sentences. This is especially noticeable for length  X  40 , where CCM breaks down and our algorithm is more stable. We find that the neural embeddings modestly outperform the CCA and Brown cluster embeddings.

The results for German are similar, except CCM breaks down earlier at sentences of `  X  30 . For Chinese, our method substantially outperforms CCM for all lengths. Note that CCM performs very poorly, obtaining only around 20% accu-racy even for sentences of `  X  20 . We didn X  X  have neural embeddings for German and Chinese (which worked best for English) and thus only used Brown cluster embeddings.

For English, the disparity between NN-O (ora-cle top bracket) and NN (heuristic top bracket) is rather low suggesting that our top bracket heuris-tic is rather effective. However, for German and Chinese note that the  X  X C-O X  performs substan-tially better, suggesting that if we had a better top bracket heuristic our performance would increase. Test II: Sensitivity to initialization The EM al-gorithm with the CCM requires very careful ini-tialization, which is described in Klein and Man-ning (2002). If, on the other hand, random ini-tialization is used, the variance of the performance of the CCM varies greatly. Figure 4 shows a his-togram of the performance level for sentences of length  X  10 for different random initializers. As one can see, for some restarts, CCM obtains ac-curacies lower than 30% due to local optima. Our method does not suffer from local optima and thus does not require careful initialization.
 Test III: Comparison to Seginer X  X  algorithm Our approach is not directly comparable to Seginer X  X  because he uses punctuation, while we use POS tags. Using Seginer X  X  parser we were able to get results on the training sets. On English: 75 . 2% ( `  X  10 ), 64 . 2% ( `  X  20 ), 56 . 7% ( `  X  40 ). On German: 57 . 8% ( `  X  10 ), 45 . 0% ( `  X  20 ), and 39 . 9% ( `  X  40 ). On Chinese: 56 . 6% ( `  X  10 ), 45 . 1% ( `  X  20 ), and 38 . 9% ( `  X  40 ).

Thus, while Seginer X  X  method performs better on English, our approach performs 2-3 points bet-ter on German, and both methods give similar per-formance on Chinese. We described a spectral approach for unsu-pervised constituent parsing that comes with theoretical guarantees on latent structure recovery. Empirically, our algorithm performs favorably to the CCM of Klein and Manning (2002) without the need for careful initialization.
 Acknowledgements : This work is supported by NSF IIS1218282, NSF IIS1111142, NIH R01GM093156, and the NSF Graduate Research Fellowship Program under Grant No. 0946825 (NSF Fellowship to APP).
