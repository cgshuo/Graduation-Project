 Feedback driven data exploration schemes have been implemented for non-structured data (such as text) and document-centric XML collections where formulating precise queries is often impossible. In this paper, we study the problem of enabling exploratory access, through ranking, to data-centric XML. Given a path query and a set of results identified by the system to this query over the data, we consider feedback which capture s the user X  X  preference for some features over the others. The feedback can be  X  X ositive X  or  X  X eg-ative X . To deal with feedback, we develop a probabilistic feature significance measure and describe how to use this for ranking re-sults in the presence of dependencies between the path features. We bring together these techniques in AXP , a system for adaptive and exploratory path retrieval. The experimental results show the effectiveness of the proposed techniques.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval: Relevance feedback.
 Algorithms, Measurement.
 Relevance feedback, inter-depende nt structural feature, feature cover, data-centric XML.
Feedback-based exploration of data sets has been shown to be very effective in non-structured data domains, such as text re-trieval [7] and multimedia where formulating precise queries is of-ten impossible. In the context of information retrieval (IR) and mul-timedia applications, where the data and queries on text collections are often modeled as keyword vectors [8], user feedback about the relevance or irrelevance of the result documents is used for adjust-ing the weights in the query vector by increasing the weights of the more relevant keywords [8].

In environments where the user may not know the underlying structure of the data which she is querying (thus is not able to form a precisely specified statements of interest), queries over structured and semi-structured data (e.g., tree or graph) may also suffer from similar problems. In particular, an incompletely specified query may return too many results. Consider, for example, the data in Fig-ure 1, which describes several metadata items in a scientific repos-itory; A query  X  I am interested in the  X  X itles X  in the current repos-itory  X (i.e. //title ), would return five matches. While there are some initial attempts, such as [5, 9], to address the challenge of en-abling feedback on structured data (e.g., document-centric XML), this is still a largely unexplored area, with no effective strategies to support user feedback. One reason for this is that, while there are plenty of works on feedback on data that can be represented as vec-tors, not all data and queries are easy to map onto a vector space. This is especially true in semi-structured and structured data (e.g., data-centric XML documents, graphs), where the structure is often a critical component of the data. Path expressions  X  which express the desired characteristics of the paths on the data graph X  combine requirements about values (such as the tags of an XML document) with requirements about the structural organization of these values. This renders the traditional feedback techniques inapplicable.
In this paper, we focus on the problem of feedback-based explo-ration of path results over data-centric XML. Such path results can be got from a path query. We recognize that, in some cases, the user is exploring the data within the context of an initial query but does not have well-defined correctness criteria in mind yet. In such cases, she may want the system to rank the results in the next it-eration according to the positive or negative feedback she provides on the current results. To accommodate such declarations of pref-erence, the system needs to support feedback and ranking .Wepro-pose an adaptive, and exploratory, path retrieval ( AXP ) framework to help a user explore the path results of her query by incorporating her preferences through positive and negative feedback.
Query refinement through relevance feedback has been well studied in the fields of information retrieval [7] and multimedia. Most of the existing algorithms rely on the vector model [8]ofdata to support feedback-based query refinement. Intuitively, the vector describes the composition of the data or the query in terms of its constituent features (such as color, edge, or keyword). The vector model is especially suitable for supporting feedback, because the user feedback can be used both (a) to move the initial query vector in the vector space in a way that better represents the user X  X  inten-tions or (b) to re-assess the significance of the features so that the query better reflects user X  X  feedback.

As we described in the introduction, relevance feedback may also be needed when dealing with structured and semi-structured data. While vector models are proved to be effective in supporting feedback, not all data can be easily mapped onto a feature space and this is especially true for data with complex structures. The increas-ingly common usage of graph-and tree-structured data, such as XML documents, poses new challenges in data retrieval and feed-back processing. A recent Dagstuhl report [3] on  X  X anked XML Querying X  highlights the significance of the  X  X oo-many-answers X  problem to keyword-based XML retrieval. Observing that the tra-ditional IR-based feedback processes cannot be directly applied to improve semi-structured data or XML retrieval, recent works, in-cluding [10, 6, 9, 5], have explored the role of relevance feedback for refining queries over XML documents. However, the existing work [6, 9, 5] focus on exploring document-centric INEX data set, but not data-centric XML collections. In addition, different from the above works, which only tackle positive feedback, the algo-rithms we present in the paper consider both positive and negative feedback.
As mentioned in Section 1, when a path query returns a large number of results, it may not be feasible for the users to view and interpret all the results. To avoid such overload, given a large num-ber, N , of paths, AXP presents the user only a small number, K , of these paths. Initially, these K paths are randomly selected and there is no specific presentation order. By providing feedback over the presented paths, the user is able to explore the alternative paths and focus on the subset that is of interest to her.
 Data and query models . We focus on data-centric XML collec-tions and path expressions of type P { /,//,  X  X  . The path expres-sions are composed of query steps, each consisting of an axis (par-ent/child  X / X  or ancestor/descendant  X // X ) test and a label test. Given a document, T , and a path query, Q , the result to the query is an embedding of the query nodes onto the nodes of the data tree in such a way that all label and structural predicates are satisfied. Problem of exploring path results .Let R be a set of path results of a query Q against a document collection T . Our goal is to im-prove the top K results (in R ) by incorporating users X  preferences (through relevance feedback) in an exploratory manner.
 Structural features of a label path .Theset, F ( P ) , of features of a label-path P = l 0  X  X  X  X  X  l j is the maximal set of path queries such that F ( P )= { F i | F i ( P )= true } where F i is in the type of P /,// } . A feature of a label-path can be as short as a 1-label like //l
E XAMPLE 2.1. Given a label-path P = repository  X  project title ,where X  repository  X  is the label of the root node, includes single label features, /project , //project , //title , as well as 2-label features, /project/title , /project//title , //project/title , and //project//title (we ignore the root label). Feedback model . AXP handles different forms of feedback: Given r  X  R ,let P ( r ) be a data path defined by r . The user feedback over r is a 2-tuple F = F + s ,F  X  s :
E XAMPLE 2.2. Consider the path query  X  //title  X , when pre-sented with the set of results the user might want to express that she would prefer to see dataset in the path results. Her feedback can be represented as the 2-tuple { //dataset } , {} .
 Contributions : (1) We propose and formalize two kinds of feed-back (LIKE and DISLIKE) to reorder path results over data-centric XML. (2)We propose probabilistic measures and algorithms for structural feature significance analysis by taking into account the structural dependencies between path features. We bring together these techniques in an adaptive, and exploratory, path retrieval ( AXP ) framework.
Given a set R of path results, the feedback is used for ranking the alternative results so that user can explore relevant parts of the data. AXP splits any complex feedback statement into its constituent 1-and 2-label feature elements for further analysis. These features capture the two key structural building blocks of label paths: 1-label features of the form  X  //l n  X  capture existence of nodes with a certain label and 2-label features of the form  X  //l n /l  X  //l n //l m  X  capture the parent/child and ancestor/descendant re-lationships between these labels. Note that, while they are simpler than more complex structural features, even these are not fully inde-pendent from each other; e.g.,  X  //l n /l m  X  implies  X  //l set of features are not mutually independent (e.g., one path feature includes the other one as a sub-feature), this might negatively affect the relevance feedback process: feature independence assumption is often necessary for simplifying the probabilistic formulas [7]. In Section 3.2.1, we describe how AXP addresses inter-dependences between the features.
Path features used during the f eedback process need to distin-guish those paths that are aligned with the user X  X  relevance judg-ment from those that are against it. Thus, features can be weighted based on how well they contribute to this relevance judgment. set of K results presented to the user for feedback, and F set of 1-or 2-label features extracted from the user X  X  (LIKE or DIS-LIKE) relevance feedback statements. The significance of feature f  X  F s , relative to the result set, R K denoted as p ( f | sults that satisfy the feature f , whereas R K ( F s ) is the set of results that satisfy any of the feedback statements in F s .

E XAMPLE 3.1. Consider two results to query,  X  //title  X : r 1 = repository  X  coding _ sheet  X  title , and r 2 = repository  X  coding _ sheet  X  data _ file  X  title .As-sume that the user marks  X  /coding _ sheet  X  X n r 1 and  X  //coding _ sheet/data _ file  X  X n r 2 as feedback. Thus, F s = { /coding _ sheet, //coding _ sheet/data _ file } , R R
K ( F s )= { r 1 ,r 2 } . The 1-label feature  X  f 1 = /coding _ sheet  X  appears in both r 1 and r 2 ; thus, p ( f 1 | R K ,F s )=1 feature  X  f 2 = //coding _ sheet/data _ file  X  is only in r 2 ; thus, p ( f 2 | R K ,F s )=0 . 5 .
We define the score of a result in terms of the significances of its features as they relate to the user feedback: If a result contains features that are significant relat ive to the positive feedback, intu-itively, its score needs to be high; on the other hand, if the result path contains features that are significant relative to the negative feedback, its overall score needs to be low. Let F + s and sent positive and negative feedback, respectively.

D EFINITION 3.2 (R ESULT SCORE ). The combined score of a result r i is defined as follows: Here, p ( Like | r i , F + s ) denotes the probability that result r judged relevant by the system based on the feedback in F + R K be the set of K results shown to the user for feedback and R
K denote those that satisfy at least one of the positive feedback statements in F + s . Then,
On the other hand, p ( Dislike | r i , F + s ) denotes the probability that result r i is judged not relevant based on F + s .Let R R tive feedback statements in F + s . Then,
The terms, p ( Dislike | r i , F  X  s ) and p ( Like | r i similarly based on F  X  s . Note that, since they are computed based on different sets of feedback, p ( Dislike | r i , F + s ) equivalent to p ( Dislike | r i , F  X  s ) . Similarly, for p and p ( Like | r i , F + s ) . Given these, and using the Bayes X  theorem, we can rewrite score ( r i ) as follows:
Since the term at the right is constant, we only need to compute the term on the left. Given a feature set F and a corresponding R  X  R K , we need to compute p ( r i | R ,F ) .Let F ( r i note the set of corresponding features of the path r i .Since r the conjunction of all of its features, we can write p ( r p ( we could easily rewrite this as however, the 1-or 2-label features of the form  X  //l n  X ,  X  //l and  X  //l n //l m  X  are not always independent. For example, feature  X  //l n //l m  X  implies the feature  X  //l n  X . Similarly,  X  //l plies  X  //l n //l m  X . Thus, such dependencies between features have to be taken into account in assessing their contributions.
Given two inter-dependent features of a path, we refer to the one that always implies the other as the more specific feature:
D EFINITION 3.3 (S PECIFICITY ). Given two features f g , f the feature f s is more specific than f g , (denoted as f any label path P , f g is a feature of P if f s is a feature of P . Whenever the feature //project/title is in a path, the feature //project//title is also satisfied; thus //project/title is a more specific feature than //project//title . Given a set of features, its feature cover consists of the most specific features in the set:
D EFINITION 3.4 (F EATURE C OVER ). A feature cover F c corresponding to a feature set F is the set of all features in F such that  X  f i  X  F c , f j  X  Fs.t.f j f i .

T HEOREM 3.1. Let F be a set of features and F c be the corre-sponding feature cover. Then, p f  X  F f = p f  X  F c f .
 That is, the probability that any given path P contains all features in F is equal to the probability that the path contains all features in the cover, F c . Due to the space limitations, we omit the proof.
The following corollary provides us with a way to deal with inter-dependent features of a path when computing p ( r i
C OROLLARY 3.1. Let r i be a result path, F ( r i ) be the set of features of r i , and F c ( r i ) be the corresponding feature cover. Then,
In other words, the features in the cover are sufficient when com-puting the score of a path.

However, one more challenge remains in computing p ( r i | R ,F ) based on the feature cover. While the above corollary is sufficient for computing p ( r i | R ,F ) for paths that consist solely of features that occur in R , if any of the features does not occur in R ,thenwehave p ( r i | R ,F )=0 . This means that if any one of r i  X  X  features does not occur in R , it is not dis-tinguishable from other such paths, irrespective of how significant all its other features are. Naturally, this is not appropriate when ranking paths that contain a feature for which no user feedback is applicable. To prevent 0 -ing out of p ( r i | R ,F ) for such paths, a lower-bound,  X  , is used: i.e., if a feature f does not occur in R or when R =  X  ,then p ( f | R ,F )=  X  . Here,  X  is a positive real number, such that  X  1 / | R | ; i.e., smaller than the p ( of any single feature. In the experiments we use  X  =1 / | Let the number of results presented to the user for feedback be K and let the average length of the result path be l . Let the size of the feedback cover be | F c | . Thus, computing feature scores takes O (
Kl | F c | ) time, where each result is scanned and the features are counted. Once the features are counted, all results obtained in the previous iteration have to be re-scored. If the total number of results is |
R | , then this is done in O ( | R || F c | ) time.
We implemented the AXP framework and the underlying tech-niques using Java. The experiments were performed on a Xeon(TM) 2.9GHz processor workstation with 2.00G RAM.

Data and queries. The experiment results we report here are on the TreeBank data set [2]. This data set is a data-centric collection in that it contains the part-of-speech tags of Wall Street Journal articles, but not the textual content itself. Thus, it is a suitable set for feedback over data-centric XML. INEX data set [1] is not used because it is document-centric. We used a portion of the TreeBank XML tree, with  X  400 K nodes and with a deep (the maximum depth is  X  30 and the average depth is  X  8 ) recursive structure. Thus, the data set also provides a suitable environment for testing the effect of feedback based exploration of path structured data. Each data point presented in the feedback performance figures in this section is obtained by averaging the corresponding perfor-mance metric for multiple queries on the same data set.

Feedback and the ground truth. In order to evaluate the rel-evance feedback process, we used both simulated (as in [4]) and human-provided feedback. For each query, one of its results is ran-domly chosen to represent its ground truth ; i.e., the path that best Figure 2: Effectiveness of feedback in matching ground truth; different curves denote different feedback amounts Figure 3: Effectiveness of feedback in matching ground truth; different curves denote different inconsistency rates represents user X  X  preferences. Given K (= 20) result paths, those features that occur in the ground truth are candidates to be provided as positive feedback; features that do conflict with the ground truth are negative feedback candidates.

Efficiency and effectiveness measures. We report execution times as the measure of efficiency. The effectiveness of the feed-back process can be evaluated by observing whether the rank-ings obtained through the feedback process are correlated with the ground truth: given a result path with a system assigned score, s , and with m mismatches with the ground truth (each missed or extra feature counts as a mismatch), the score should be negatively cor-related with the number of mismatches. The standard measure of correlation, Pearson correlation coefficient assumes that the rela-tionship between the two variables is linear. In AXP , we do not ex-pect the result score and the number of mismatches will necessarily have a (inversely) linear relationship. Thus, we report Kendall-tau rank coefficient which does not make the assumption of linearity.
Evaluation of the feedback process . The results are collected using 10 different feedback sequences on 10 different queries. (1) Effectiveness. The first set of feedback experiments shows the effectiveness of the positive and negative feedback in matching the rankings. As it can be seen in Figure 2, both positive and neg-ative feedback improve the quality of the ranking. Negative feed-back has a slight edge over positive feedback; this is because there are more negative features in the data that can cause mismatches with the ground truth than the positive features that can be missed. Nevertheless, using both positive and negative feedback together is the most effective approach for improving rankings (compare the 1P+1N curve with the 2P+0N and 0P+2N curves). Providing more feedback ( 2P+2N curve) consistently improves the quality of the ranking, indicating that AXP is effective in getting the most out of the feedback statements.

We also ran a set of experiments to study the effects of poten-tial inconsistencies in user feedback. For this purpose, a portion of the feedback provided to the system was modified to be incon-sistent with the ground truth: in other words, the user is providing counter-productive feedback to this search goal. As shown in Fig-ure 3, when the inconsistency of the user feedback increases, this negatively affects the quality of the ranking with respect to the base ground truth. In fact, when most of the feedback are inconsistent with the ground truth (see the  X  I=0.8  X  curve where the inconsis-tency rate in the feedback is 80%), the ranking coefficient becomes negative. This result is consistent with the expected behavior of feedback schemes and shows that our feedback process interprets the user X  X  feedback correctly and can help the user when she is able to provide feedback that does not contain extreme inconsistency. Figure 4: Scatter-plot depicting the processing times of feed-back as a function of the number of results to be reranked (2) Execution time. As it can be seen in Figure 4, the execution time of the feedback generation process is linear in the number of results to be reranked. The cost of the statistical analysis phase for the feedback is negligible. (3) User study. Using the same data set and 7 users who are not knowledgeable about the data, we ran user studies. We provided these users 10 random queries and target results and asked them to try to reach the target result path using feedbacks. After single iteration, the user is presented top 10 result paths. With 2P+2N feedback, the average Kendall-tau coefficients were 0.31 and 0.38 respectively. Without feedback the coefficient was 0.12. Feedback indeed helps improve the Kendall-tau coefficient of the results; more feedback helps achieve higher improvements.
This paper presented an adaptive, and exploratory, path retrieval framework, AXP , to help the user explore the path query results from data-centric XML collections, by providing positive and neg-ative feedback that reflect her interests. Feedback are for ordering paths based on preference criteria. We developed a probabilistic path ranking scheme to deal with feedback statements. Experi-ments showed that feedback statements can be very effective in helping focus the exploration process.
