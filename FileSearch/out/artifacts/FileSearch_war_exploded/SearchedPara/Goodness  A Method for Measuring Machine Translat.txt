 State-of-the-art Machine Translation (MT) systems are making progress to generate more usable translation outputs. In particular, statistical machine translation systems (Koehn et al., 2007; Bach et al., 2007; Shen et al., 2008) have advanced to a state that the transla-tion quality for certain language pairs (e.g. Spanish-English, French-English, Iraqi-English) in certain do-mains (e.g. broadcasting news, force-protection, travel) is acceptable to users.

However, a remaining open question is how to pre-dict confidence scores for machine translated words and sentences. An MT system typically returns the best translation candidate from its search space, but still has no reliable way to inform users which word is likely to be correctly translated and how confident it is about the whole sentence. Such information is vital to realize the utility of machine translation in many ar-eas. For example, a post-editor would like to quickly identify which sentences might be incorrectly trans-lated and in need of correction. Other areas, such as cross-lingual question-answering, information extrac-tion and retrieval, can also benefit from the confidence scores of MT output. Finally, even MT systems can leverage such information to do n-best list reranking, discriminative phrase table and rule filtering, and con-straint decoding (Hildebrand and Vogel, 2008).
Numerous attempts have been made to tackle the confidence estimation problem. The work of Blatz et al. (2004) is perhaps the best known study of sentence and word level features and their impact on transla-tion error prediction. Along this line of research, im-provements can be obtained by incorporating more fea-tures as shown in (Quirk, 2004; Sanchis et al., 2007; Raybaud et al., 2009; Specia et al., 2009). Sori-cut and Echihabi (2010) developed regression models which are used to predict the expected BLEU score of a given translation hypothesis. Improvement also can be obtained by using target part-of-speech and null dependency link in a MaxEnt classifier (Xiong et al., 2010). Ueffing and Ney (2007) introduced word pos-terior probabilities (WPP) features and applied them in the n-best list reranking. From the usability point of view, back-translation is a tool to help users to assess the accuracy level of MT output (Bach et al., 2007). Literally, it translates backward the MT output into the source language to see whether the output of backward translation matches the original source sentence. However, previous studies had a few shortcomings. First, source-side features were not extensively inves-tigated. Blatz et al.(2004) only investigated source n-gram frequency statistics and source language model features, while other work mainly focused on target side features. Second, previous work attempted to in-corporate more features but faced scalability issues, i.e., to train many features we need many training ex-amples and to train discriminatively we need to search through all possible translations of each training exam-ple. Another issue of previous work was that they are all trained with BLEU/TER score computing against 211 the translation references which is different from pre-dicting the human-targeted translation edit rate (HTER) which is crucial in post-editing applications (Snover et al., 2006; Papineni et al., 2002). Finally, the back-translation approach faces a serious issue when forward and backward translation models are symmetric. In this case, back-translation will not be very informative to indicate forward translation quality.

In this paper, we predict error types of each word in the MT output with a confidence score, extend it to the sentence level, then apply it to n-best list reranking task to improve MT quality, and finally design a vi-sualization prototype. We try to answer the following questions:  X  Can we use a rich feature set such as source- X  Can we predict more translation error types i.e  X  How good do our prediction methods correlate  X  Do confidence measures help the MT system to  X  How confidence score can be presented to im-
In Section 2, we describe the models and training method for the classifier. We describe novel features including source-side, alignment context, and depen-dency structures in Section 3. Experimental results and analysis are reported in Section 4. Section 5 and 6 present applications of confidence scores. 2.1 Problem setting Confidence estimation can be viewed as a sequen-tial labelling task in which the word sequence is MT output and word labels can be Bad/Good or Insertion/Substitution/Shift/Good . We first esti-mate each individual word confidence and extend it to the whole sentence. Arabic text is fed into an Arabic-English SMT system and the English translation out-puts are corrected by humans in two phases. In phase one, a bilingual speaker corrects the MT system trans-lation output. In phase two, another bilingual speaker does quality checking for the correction done in phase one. If bad corrections were spotted, they correct them again. In this paper we use the final correction data from phase two as the reference thus HTER can be used as an evaluation metric. We have 75 thousand sen-tences with 2.4 million words in total from the human correction process described above.

We obtain training labels for each word by perform-ing TER alignment between MT output and the phase-two human correction. From TER alignments we ob-served that out of total errors are 48% substitution, 28% deletion, 13% shift, and 11% insertion errors. Based on the alignment, each word produced by the MT sys-tem has a label: good, insertion, substitution and shift. Since a deletion error occurs when it only appears in the reference translation, not in the MT output, our model will not predict deletion errors in the MT output. 2.2 Word-level model In our problem, a training instance is a word from MT output, and its label when the MT sentence is aligned with the human correction. Given a training instance x , y is the true label of x ; f stands for its feature vector f ( x,y ) ; and w is feature weight vector. We define a feature-rich classifier score ( x,y ) as follow To obtain the label, we choose the class with the high-est score as the predicted label for that data instance. To learn optimized weights, we use the Margin Infused Relaxed Algorithm or MIRA (Crammer and Singer, 2003; McDonald et al., 2005) which is an online learner closely related to both the support vector machine and perceptron learning framework. MIRA has been shown to provide state-of-the-art performance for sequential labelling task (Rozenfeld et al., 2006), and is also able to provide an efficient mechanism to train and opti-mize MT systems with lots of features (Watanabe et al., 2007; Chiang et al., 2009). In general, weights are updated at each step time t according to the following rule: where L ( y,y 0 ) is a measure of the loss of using y 0 in-stead of the true label y . In this problem L ( y,y 0 ) is 0-1 loss function. More specifically, for each instance x i in the training data at a time t we find the label with the highest score: the weight vector is updated as follow  X  can be interpreted as a step size; when  X  is a large number we want to update our weights aggressively, otherwise weights are updated conservatively. where C is a positive constant used to cap the maxi-mum possible value of  X  . In practice, a cut-off thresh-old n is the parameter which decides the number of features kept (whose occurrence is at least n ) during 212 training. Note that MIRA is sensitive to constant C , the cut-off feature threshold n , and the number of iter-ations. The final weight is typically normalized by the number of training iterations and the number of train-ing instances. These parameters are tuned on a devel-opment set. 2.3 Sentence-level model Given the feature sets and optimized weights, we use the Viterbi algorithm to find the best label sequence. To estimate the confidence of a sentence S we rely on the information from the forward-backward inference. One approach is to directly use the conditional prob-abilities of the whole sequence. However, this quan-tity is the confidence measure for the label sequence predicted by the classifier and it does not represent the goodness of the whole MT output. Another more ap-propriated method is to use the marginal probability of Good label which can be defined as follow: p ( y i = Good | S ) is the marginal probability of label Good at position i given the MT output sentence S .  X  ( y i | S ) and  X  ( y i | S ) are forward and backward values. Our confidence estimation for a sentence S of k words is defined as follow goodness ( S ) is ranging between 0 and 1, where 0 is equivalent to an absolutely wrong translation and 1 is a perfect translation. Essentially, goodness ( S ) is the arithmetic mean which represents the goodness of translation per word in the whole sentence. Features are generated from feature types: abstract templates from which specific features are instantiated. Features sets are often parameterized in various ways. In this section, we describe three new feature sets intro-duced on top of our baseline classifier which has WPP and target POS features (Ueffing and Ney, 2007; Xiong et al., 2010). 3.1 Source-side features From MT decoder log, we can track which source phrases generate target phrases. Furthermore, one can infer the alignment between source and target words within the phrase pair using simple aligners such as IBM Model-1 alignment.
 Source phrase features: These features are designed to capture the likelihood that source phrase and target word co-occur with a given error label. The intuition behind them is that if a large percentage of the source phrase and target have often been seen together with the same label, then the produced target word should have this label in the future. Figure 1a illustrates this feature template where the first line is source POS tags, the second line is the Buckwalter romanized source Arabic sequence, and the third line is MT output. The source phrase feature is defined as follow Source POS: Source phrase features might be suscep-tible to sparseness issues. We can generalize source phrases based on their POS tags to reduce the number of parameters. For example, the example in Figure 1a is generalized as in Figure 1b and we have the follow-ing feature: Source POS and phrase context features: This fea-ture set allows us to look at the surrounding context of the source phrase. For example, in Figure 1c we have  X  hdhh alamlyt  X  generates  X  process  X . We also have other information such as on the right hand side the next two phrases are  X  ayda  X  and  X  tshyr  X  or the se-quence of source target POS on the right hand side is  X  RB VBP  X . An example of this type of feature is 3.2 Alignment context features The IBM Model-1 feature performed relatively well in comparison with the WPP feature as shown by Blatz et al. (2004). In our work, we incorporate not only the 213 IBM Model-1 feature but also the surrounding align-ment context. The key intuition is that collocation is a reliable indicator for judging if a target word is gener-ated by a particular source word (Huang, 2009). More-over, the IBM Model-1 feature was already used in sev-eral steps of a translation system such as word align-ment, phrase extraction and scoring. Also the impact of this feature alone might fade away when the MT sys-tem is scaled up.
 We obtain word-to-word alignments by applying IBM Model-1 to bilingual phrase pairs that generated the MT output. The IBM Model-1 assumes one target word can only be aligned to one source word. Therefore, given a target word we can always identify which source word it is aligned to.
 Source alignment context feature: We anchor the target word and derive context features surround-ing its source word. For example, in Figure 2a and 2b we have an alignment between  X  tshyr  X  and  X  refers  X  The source contexts  X  tshyr  X  with a window of one word are  X  ayda  X  to the left and  X  aly  X  to the right. Target alignment context feature: Similar to source alignment context features, we anchor the source word and derive context features surrounding the aligned target word. Figure 2c shows a left target context feature of word  X  refers  X . Our features are derived from a window of four words.
 Combining alignment context with POS tags: In-stead of using lexical context we have features to look at source and target POS alignment context. For in-stance, the feature in Figure 2d is 3.3 Source and target dependency structure The contextual and source information in the previous sections only take into account surface structures of source and target sentences. Meanwhile, dependency structures have been extensively used in various translation systems (Shen et al., 2008; Ma et al., 2008; Bach et al., 2009). The adoption of dependency structures might enable the classifier to utilize deep structures to predict translation errors. Source and tar-get structures are unlikely to be isomorphic as shown in Figure 3a. However, we expect some high-level linguistic structures are likely to transfer across certain language pairs. For example, prepositional phrases (PP) in Arabic and English are similar in a sense that PPs generally appear at the end of the sentence (after all the verbal arguments) and to a lesser extent at its beginning (Habash and Hu, 2009). We use the Stanford parser to obtain dependency trees and POS tags (Marneffe et al., 2006).
 Child-Father agreement: The motivation is to take advantage of the long distance dependency relations between source and target words. Given an alignment between a source word s i and a target word t j . A child-father agreement exists when s k is aligned to t l , where s k and t l are father of s i and t j in source and target dependency trees, respectively. Figure 3b illustrates that  X  tshyr  X  and  X  refers  X  have a child-father agreement. To verify our intuition, we analysed 243K words of manual aligned Arabic-English bitext. We observed 29.2% words having child-father agreements. In term of structure types, we found 27.2% of copula verb and 30.2% prepositional structures, including object of a preposition, prepositional modifier, and preposi-tional complement, are having child-father agreements. Children agreement: In the child-father agreement feature we look up in the dependency tree, however, we also can look down to the dependency tree with a similar motivation. Essentially, given an alignment be-tween a source word s i and a target word t j , how many children of s i and t j are aligned together? For exam-ple,  X  tshyr  X  and  X  refers  X  have 2 aligned children which are  X  ayda-also  X  and  X  aly-to  X  as shown in Figure 3c. 4.1 Arabic-English translation system The SMT engine is a phrase-based system similar to the description in (Tillmann, 2006), where various features are combined within a log-linear framework. These features include source-to-target phrase transla-tion score, source-to-target and target-to-source word-to-word translation scores, language model score, dis-tortion model scores and word count. The training data for these features are 7M Arabic-English sentence pairs, mostly newswire and UN corpora released by LDC. The parallel sentences have word alignment au-tomatically generated with HMM and MaxEnt word aligner (Ge, 2004; Ittycheriah and Roukos, 2005). Bilingual phrase translations are extracted from these word-aligned parallel corpora. The language model is a 5-gram model trained on roughly 3.5 billion English words.
 Our training data contains 72k sentences Arabic-English machine translation with human corrections which include of 2.2M words in newswire and weblog domains. We have a development set of 2,707 sen-tences, 80K words (dev); an unseen test set of 2,707 sentences, 79K words (test). Feature selection and pa-rameter tuning has been done on the development set in which we experimented values of C,n and iterations in range of [0.5:10], [1:5], and [50:200] respectively. The final MIRA classifier was trained by using pocket crf toolkit 1 with 100 iterations, hyper-parameter C was 5 and cut-off feature threshold n was 1.

We use precision ( P ), recall ( R ) and F-score ( F ) to evaluate the classifier performance and they are com-puted as follow:
F = 2*P*R P+R 4.2 Contribution of feature sets We designed our experiments to show the impact of each feature separately as well as their cumu-lative impact. We trained two types of classifiers to predict the error type of each word in MT out-put, namely Good/Bad with a binary classifier and Good/Insertion/Substitution/Shift with a 4-class classi-fier. Each classifier is trained with different feature sets as follow:  X  WPP: we reimplemented WPP calculation based  X  WPP + target POS: only WPP and target POS fea- X  Our features: the classifier has source side, align- X  WPP + our features: adding our features on top of  X  WPP + target POS + our features: using all fea-WPP 69.3 68.7 64.4 63.7 + source side 72.1 71.6 66.2 65.7 + alignment context 71.4 70.9 65.7 65.3 + dependency structures 69.9 69.5 64.9 64.3 WPP+ target POS 69.6 69.1 64.4 63.9 + source side 72.3 71.8 66.3 65.8 + alignment context 71.9 71.2 66 65.6 + dependency structures 70.4 70 65.1 64.4 Table 1: Contribution of different feature sets measure in F-score.

To evaluate the effectiveness of each feature set, we apply them on two different baseline systems: using WPP and WPP+target POS, respectively. We augment each baseline with our feature sets separately. Ta-ble 1 shows the contribution in F-score of our proposed feature sets. Improvements are consistently obtained when combining the proposed features with baseline features. Experimental results also indicate that source-side information, alignment context and dependency 215 unseen test sets. structures have unique and effective levers to improve the classifier performance. Among the three proposed feature sets, we observe the source side information contributes the most gain, which is followed by the alignment context and dependency structure features. 4.3 Performance of classifiers We trained several classifiers with our proposed feature sets as well as baseline features. We compare their per-formances, including a naive baseline All-Good classi-fier, in which all words in the MT output are labelled as good translations. Figure 4 shows the performance of different classifiers trained with different feature sets on development and unseen test sets. On the unseen test set our proposed features outperform WPP and target POS features by 2.8 and 2.4 absolute F-score respec-tively. Improvements of our features are consistent in development and unseen sets as well as in binary and 4-class classifiers. We reach the best performance by combining our proposed features with WPP and target POS features. Experiments indicate that the gaps in F-score between our best system with the naive All-Good system is 12.9 and 6.8 in binary and 4-class cases, re-spectively. Table 2 presents precision, recall, and F-score of individual class of the best binary and 4-class classifiers. It shows that Good label is better predicted than other labels, meanwhile, Substitution is gener-ally easier to predict than Insertion and Shift . 4.4 Correlation between Goodness and HTER We estimate sentence level confidence score based on Equation 7. Figure 5 illustrates the correla-tion between our proposed goodness sentence level confidence score and the human-targeted translation edit rate (HTER). The Pearson correlation between goodness and HTER is 0.6, while the correlation of WPP and HTER is 0.52. This experiment shows that goodness has a large correlation with HTER. The black bar is the linear regression line. Blue and red Table 2: Detailed performance in precision, recall and F-score of binary and 4-class classifiers with WPP+target POS+Our features on the unseen test set. bars are thresholds used to visualize good and bad sen-tences respectively. We also experimented goodness computation in Equation 7 using geometric mean and harmonic mean; their Pearson correlation values are 0.5 and 0.35 respectively. Experiments reporting in Section 4 indicate that the proposed confidence measure has a high correlation with HTER. However, it is not very clear if the core MT system can benefit from confidence measure by provid-ing better translations. To investigate this question we present experimental results for the n-best list rerank-ing task.

The MT system generates top n hypotheses and for each hypothesis we compute sentence-level confidence scores. The best candidate is the hypothesis with high-est confidence score. Table 3 shows the performance of reranking systems using goodness scores from our best classifier in various n-best sizes. We obtained 0.7 TER reduction and 0.4 BLEU point improvement on the de-velopment set with a 5-best list. On the unseen test, we obtained 0.6 TER reduction and 0.2 BLEU point im-provement. Although, the improvement of BLEU score 216 Figure 5: Correlation between Goodness and HTER. Table 3: Reranking performance with goodness score. is not obvious, TER reductions are consistent in both development and unseen sets. Figure 6 shows the im-provement of reranking with goodness score. Besides, the figure illustrates the upper and lower bound perfor-mances with TER metric in which the lower bound is our baseline system and the upper bound is the best hy-pothesis in a given n-best list. Oracle scores of each n-best list are computed by choosing the translation can-didate with lowest TER score. Besides the application of confidence score in the n-best list reranking task, we propose a method to visual-ize translation error using confidence scores. Our pur-pose is to visualize word and sentence-level confidence scores with the following objectives 1) easy for spotting translations errors; 2) simple and intuitive; and 3) help-ful for post-editing productivity. We define three cate-gories of translation quality (good/bad/decent) on both word and sentence level. On word level, the marginal probability of good label is used to visualize translation errors as follow: Figure 6: A comparison between reranking and oracle scores with different n-best size in TER metric on the development set.
 On sentence level, the goodness score is used as follow:
Different font sizes and colors are used to catch the attention of post-editors whenever translation errors are likely to appear as shown in Table 4. Colors are ap-plied on word level, while font size is applied on both word and sentence level. The idea of using font size and colour to visualize translation confidence is simi-lar to the idea of using tag/word cloud to describe the content of websites 2 . The reason we are using big font size and red color is to attract post-editors X  attention and help them find translation errors quickly. Figure 7 shows an example of visualizing confidence scores by font size and colours. It shows that  X  not to deprive yourself  X , displayed in big font and red color, is likely to be bad translations. Meanwhile, other words, such as  X  you  X ,  X  different  X ,  X  from  X , and  X  assimilation  X , dis-played in small font and black color, are likely to be good translation. Medium font and orange color words are decent translations. In this paper we proposed a method to predict con-fidence scores for machine translated words and sen-tences based on a feature-rich classifier using linguistic and context features. Our major contributions are three novel feature sets including source side information, alignment context, and dependency structures. Experi-mental results show that by combining the source side information, alignment context, and dependency struc-ture features with word posterior probability and tar-get POS context (Ueffing &amp; Ney 2007; Xiong et al., 2010), the MT error prediction accuracy is increased from 69 . 1 to 72 . 2 in F-score. Our framework is able to predict error types namely insertion, substitution and shift. The Pearson correlation with human judgement increases from 0 . 52 to 0 . 6 . Furthermore, we show that the proposed confidence scores can help the MT sys-tem to select better translations and as a result improve-ments between 0.4 and 0.9 TER reduction are obtained. Finally, we demonstrate a prototype to visualize trans-lation errors.
 This work can be expanded in several directions. First, we plan to apply confidence estimation to per-form a second-pass constraint decoding. After the first pass decoding, our confidence estimation model can la-bel which word is likely to be correctly translated. The second-pass decoding utilizes the confidence informa-tion to constrain the search space and hopefully can find a better hypothesis than in the first pass. This idea is very similar to the multi-pass decoding strategy em-ployed by speech recognition engines. Moreover, we also intend to perform a user study on our visualiza-tion prototype to see if it increases the productivity of post-editors.
 We would like to thank Christoph Tillmann and the IBM machine translation team for their supports. Also, we would like to thank anonymous reviewers, Qin Gao, Joy Zhang, and Stephan Vogel for their helpful com-ments.

