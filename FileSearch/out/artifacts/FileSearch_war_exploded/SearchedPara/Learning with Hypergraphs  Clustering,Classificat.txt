 In machine learning problem settings, we generally assume pairwise relationships among the objects of our interest. An object set endowed with pairwise relationships can be naturally illustrated as a graph, in which the vertices represent the objects, and any two vertices that have some kind of relationship are joined together by an edge. The graph can be undirected or directed. It depends on whether the pairwise relationships among objects are symmetric or not. A finite set of points in Euclidean space associated with a kernel matrix is a typical example of undirected graphs. As to directed graphs, a well-known instance is the World Wide Web. A hyperlink can be thought of as a directed edge because given an arbitrary hyperlink we cannot expect that there certainly exists an inverse one, that is, the hyperlink based relationships are asymmetric [20].
 However, in many real-world problems, representing a set of complex relational objects as undirected or directed graphs is not complete. For illustrating this point of view, let us consider a problem of grouping a collection of articles into different topics. Given an article, assume the only information that we have is who wrote this article. One may construct an undirected graph in which two vertices are joined together by an edge if there is at least one common author of their corresponding articles (Figure 1), and then an undirected graph based clustering approach is applied, e.g. spectral graph techniques [7, 11, 16]. The undirected graph may be further embellished by assigning to each edge a weight equal to the Figure 1: Hypergraph vs. simple graph. Left: an author set E = { e 1 , e 2 , e 3 } and an article v , and 0 otherwise. Middle: an undirected graph in which two articles are joined together by an edge if there is at least one author in common. This graph cannot tell us whether the same person is the author of three or more articles or not. Right: a hypergraph which completely illustrates the complex relationships among authors and articles. number of authors in common. The above method may sound natural, but within its graph representation we obviously miss the information on whether the same person joined writing three or more articles or not. Such information loss is unexpected because the articles by the same person likely belong to the same topic and hence the information is useful for our grouping task.
 A natural way of remedying the information loss issue occurring in the above methodology is to represent the data as a hypergraph instead. A hypergraph is a graph in which an edge can connect more than two vertices [2]. In other words, an edge is a subset of vertices. In what follows, we shall unifiedly refer to the usual undirected or directed graphs as simple graphs. Moreover, without special mentioning, the referred simple graphs are undirected. It is obvious that a simple graph is a special kind of hypergraph with each edge containing two vertices only. In the problem of clustering articles stated before, it is quite straightforward to construct a hypergraph with the vertices representing the articles, and the edges the authors (Figure 1). Each edge contains all articles by its corresponding author. Even more than that, we can consider putting positive weights on the edges to encode our prior knowledge on authors X  work if we have. For instance, for a person working on a broad range of fields, we may assign a relatively small value to his corresponding edge.
 Now we can completely represent the complex relationships among objects by using hy-pergraphs. However, a new problem arises. How to partition a hypergraph? This is the main problem that we want to solve in this paper. A powerful technique for partitioning simple graphs is spectral clustering. Therefore, we generalize spectral clustering techniques to hypergraphs, more specifically, the normalized cut approach of [16]. Moreover, as in the case of simple graphs, a real-valued relaxation of the hypergraph normalized cut criterion leads to the eigendecomposition of a positive semidefinite matrix, which can be regarded as an analogue of the so-called Laplacian for simple graphs (cf. [5]), and hence we sugges-tively call it the hypergraph Laplacian. Consequently, we develop algorithms for hypergraph embedding and transductive inference based on the hypergraph Laplacian.
 There have actually existed a large amount of literature on hypergraph partitioning, which arises from a variety of practical problems, such as partitioning circuit netlists [11], clustering categorial data [9], and image segmentation [1]. Unlike the present work however, they generally transformed hypergraphs to simple ones by using the heuristics we discussed in the beginning or other domain-specific heuristics, and then applied simple graph based spectral clustering techniques. [9] proposed an iterative approach which was indeed designed for hypergraphs. Nevertheless it is not a spectral method. In addition, [6] and [17] considered propagating label distributions on hypergraphs.
 The structure of the paper is as follows. We first introduce some basic notions on hy-pergraphs in Section 2. In Section 3, we generalize the simple graph normalized cut to hypergraphs. As shown in Section 4, the hypergraph normalized cut has an elegant prob-abilistic interpretation based on a random walk naturally associated with a hypergraph. In Section 5, we introduce the real-valued relaxation to approximately obtain hypergraph normalized cuts, and also the hypergraph Laplacian derived from this relaxation. In section 6, we develop a spectral hypergraph embedding technique based on the hypergraph Lapla-cian. In Section 7, we address transductive inference on hypergraphs, this is, classifying the vertices of a hypergraph provided that some of its vertices have been labeled. Experimental results are shown in Section 8, and we conclude this paper in Section 9. Let V denote a finite set of objects, and let E be a family of subsets e of V such that  X  e  X  E = V. Then we call G = ( V, E ) a hypergraph with the vertex set V and the hyperedge set E. A hyperedge containing just two vertices is a simple graph edge. A weighted hypergraph is a hypergraph that has a positive number w ( e ) associated with each hyperedge e, called the weight of hyperedge e. Denote a weighted hypergraph by G = ( V, E, w ) . A hyperedge e is said to be incident with a vertex v when v  X  e. For a vertex v  X  V, its degree is defined by d ( v ) = of S. For a hyperedge e  X  E, its degree is defined to be  X  ( e ) = | e | . We say that there is a hyperpath between vertices v 1 and v k when there is an alternative sequence of distinct A hypergraph is connected if there is a path for every pair of vertices. In what follows, the hypergraphs we mention are always assumed to be connected. A hypergraph G can be represented by a | V | X | E | matrix H with entries h ( v, e ) = 1 if v  X  e and 0 otherwise, called the incidence matrix of G . Then d ( v ) = Let D v and D e denote the diagonal matrices containing the vertex and hyperedge degrees respectively, and let W denote the diagonal matrix containing the weights of hyperedges. Then the adjacency matrix A of hypergraph G is defined as A = HWH T  X  D v , where H T is the transpose of H. For a vertex subset S  X  V, let S c denote the compliment of S. A cut of a hypergraph G = ( V, E, w ) is a partition of V into two parts S and S c . We say that a hyperedge e is cut if it is incident with the vertices in S and S c simultaneously.
 Given a vertex subset S  X  V, define the hyperedge boundary  X  X  of S to be a hyperedge set which consists of hyperedges which are cut, i.e.  X  X  := { e  X  E | e  X  S 6 =  X  , e  X  S c 6 =  X  X  , and define the volume vol S of S to be the sum of the degrees of the vertices in S , that is,vol S := Clearly, we have vol  X  X  = vol  X  X  c . The definition given by Equation (1) can be understood as follows. Let us imagine each hyperedge e as a clique, i.e. a fully connected subgraph. For avoiding unnecessary confusion, we call the edges in such an imaginary subgraph the subedges. Moreover, we assign the same weight w ( e ) / X  ( e ) to all subedges. Then, when a hyperedge e is cut, there are | e  X  S || e  X  S c | subedges are cut, and hence a single sum term in Equation (1) is the sum of the weights over the subedges which are cut. Naturally, we try to obtain a partition in which the connection among the vertices in the same cluster is dense while the connection between two clusters is sparse. Using the above introduced definitions, we may formalize this natural partition as For a simple graph, | e  X  S | = | e  X  S c | = 1 , and  X  ( e ) = 2 . Thus the right-hand side of Equation (2) reduces to the simple graph normalized cut [16] up to a factor 1 / 2 . In what follows, we explain the hypergraph normalized cut in terms of random walks. We associate each hypergraph with a natural random walk which has the transition rule as follows. Given the current position u  X  V, first choose a hyperedge e over all hyperedges incident with u with the probability proportional to w ( e ) , and then choose a vertex v  X  e uniformly at random. Obviously, it generalizes the natural random walk defined on simple graphs. Let P denote the transition probability matrix of this hypergraph random walk. Then each entry of P is In matrix notation, P = D  X  1 v HWD  X  1 e H T . The stationary distribution  X  of the random walk is which follows from that
X We written c ( S ) = that is, the ratio vol S/ vol V is the probability with which the random walk occupies some vertex in S. Moreover, from Equations (3) and (4), we have that is, the ratio vol  X  X / vol V is the probability with which one sees a jump of the random walk from S to S c under the stationary distribution. From Equations (5) and (6), we can understand the hypergraph normalized cut criterion as follows: looking for a cut such that the probability with which the random walk crosses different clusters is as small as possible while the probability with which the random walk stays in the same cluster is as large as possible. It is worth pointing out that the random walk view is consistent with that for the simple graph normalized cut [13]. The consistency means that our generalization of the normalized cut approach from simple graphs to hypergraphs is reasonable. As in [16], the combinatorial optimization problem given by Equation (2) is NP-complete, and it can be relaxed (2) into a real-valued optimization problem We define the matrices  X  = D  X  1 / 2 v HWD  X  1 e H T D  X  1 / 2 v and  X  = I  X   X  , where I denotes the identity matrix. Then it can be verified that Note that this also shows that  X  is positive semi-definite. We can check that the smallest eigenvalue of  X  is 0 , and its corresponding eigenvector is just results in linear algebra, we know that the solution to the optimization problem is an eigenvector  X  of  X  associated with its smallest nonzero eigenvalue. Hence, the vertex set simple graph, the edge degree matrix D e reduces to 2 I. Thus  X  = I  X  which coincides with the simple graph Laplacian up to a factor of 1 / 2 . So we suggestively call  X  the hypergraph Laplacian.
 As in [20] where the spectral clustering methodology is generalized from undirected to directed simple graphs, we may consider generalizing the present approach to directed hy-pergraphs [8]. A directed hypergraph is a hypergraph in which each hyperedge e is an ordered pair ( X, Y ) where X  X  V is the tail of e and Y  X  V \ X is the head . Directed hypergraphs have been used to model various practical problems from biochemical networks [15] to natural language parsing [12]. As in the simple graph case [4, 10], it is straightforward to extend the spectral hypergraph clustering approach to k -way partitioning. Denote a k -way partition by ( V 1 ,  X  X  X  , V k ) , where V 1  X  V 2  X   X  X  X   X  V k = V, and V i  X  V j =  X  for all 1  X  i, j  X  k. We may obtain a k -way partition by minimizing c ( V 1 ,  X  X  X  , V k ) = the combinatorial optimization problem can be relaxed into a real-valued one, of which the solution can be any orthogonal basis of the linear space spanned by the eigenvectors of  X  associated with the k smallest eigenvalues.
 Theorem 1. Assume a hypergraph G = ( V, E, w ) with | V | = n. Denote the eigenvalues of minimization is over all k -way partitions. Then Proof. Let r i be a n -dimensional vector defined by r i ( v ) = 1 if v  X  V i , and 0 otherwise. Then where F = [ f 1  X  X  X  f k ] . Clearly, F T F = I. If allowing the elements of r i to take arbitrary continuous values rather than Boolean ones only, we have The last equality is from standard results in linear algebra. This completes the proof. The above result also shows that the real-valued optimization problem derived from the relaxation is actually a lower bound of the original combinatorial optimization problem. Unlike 2-way partitioning however, it is unclear how to utilize multiple eigenvectors simul-taneously to obtain a k -way partition. Many heuristics have been proposed in the situation of simple graphs, and they can be applied here as well. Perhaps the most popular one among them is as follows [14]. First form a matrix X = [ X  1  X  X  X   X  k ] , where  X  i  X  X  are the eigenvectors of  X  associated with the k smallest eigenvalues. And then the row vectors of X are regarded as the representations of the graph vertices in k -dimensional Euclidian space. Those vectors corresponding to the vertices are generally expected to be well separated, and consequently we can obtain a good partition simply by running k -means on them once. [18] has resorted to a semidefinite relaxation model for the k -way normalized cut instead of the relatively loose spectral relaxation, and then obtained a more accurate solution. It sounds reasonable to expect that the improved solution will lead to improved clustering. As reported in [18], however, the expected improvement does not occur in practice. We have established algorithms for spectral hypergraph clustering and embedding. Now we consider transductive inference on hypergraphs. Specifically, given a hypergraph G = ( V, E, w ) , the vertices in a subset S  X  V have labels in L = { 1 ,  X  1 } , our task is to predict the labels of the remaining unlabeled vertices. Basically, we should try to assign the same label to all vertices contained in the same hyperedge. It is actually straightforward to derive a transductive inference approach from a clustering scheme. Let f : V 7 X  R denote a classification function, which assigns a label sign f ( v ) to a vertex v  X  V. Given an objective functional  X (  X  ) from some clustering approach, one may choose a classification function by where R emp ( f ) denotes a chosen empirical loss, such as the least square loss or the hinge loss, and the number  X  &gt; 0 the regularization parameter. Since in general normalized cuts are thought to be superior to mincuts, the transductive inference approach that we used in the later experiments is built on the above spectral hypergraph clustering method. Consequently, as shown in [20], with the least square loss function, the classification function is finally given by f = ( I  X   X   X )  X  1 y, where the elements of y denote the initial labels, and  X  is a parameter in (0 , 1) . For a survey on transductive inference, we refer the readers to [21]. All datasets except a particular version of the 20-newsgroup one are from the UCI Ma-chine Learning Depository. They are usually referred to as the so-called categorical data . Specifically, each instance in those datasets is described by one or more attributes. Each attribute takes only a small number of values, each corresponding to a specific category. Attribute values cannot be naturally ordered linearly as numerical values can [9]. In our experiments, we constructed a hypergraph for each dataset, where attribute values were regarded as hyperedges. The weights for all hyperedges were simply set to 1 . How to choose suitable weights is definitely an important problem requiring additional exploration how-ever. We also constructed a simple graph for each dataset, and the simple graph spectral clustering based approach [19] was then used as the baseline. Those simple graphs were constructed in the way discussed in the beginning of Section 1, which is essentially to define pairwise relationships among the objects by the adjacency matrices of hypergraphs. The first task we addressed is to embed the animals in the zoo dataset into Euclidean space. This dataset contains 100 animals with 17 attributes. The attributes include hair , feathers , eggs , milk , legs , tail , etc. The animals have been manually classified into 7 different categories. We embedded those animals into Euclidean space by using the eigenvectors of the hypergraph Laplacian associated with the smallest eigenvalues (Figure 2). For the an-imals having the same attributes, we randomly chose one as their representative to put in the figures. It is apparent that those animals are well separated in their Euclidean repre-sentations. Moreover, it deserves a further look that seal and dolphin are significantly Figure 2: Embedding the zoo dataset. Left panel: the eigenvectors with the 2nd and 3rd smallest eigenvalues; right panel: the eigenvectors with the 3rd and 4th smallest eigenvalues. Note that dolphin is between class 1 (denoted by  X  ) containing the animals having milk and living on land, and class 4 (denoted by  X  ) containing the animals living in sea. Figure 3: Classification on complex relational data. (a)-(c) Results from both the hyper-graph based approach and the simple graph based approach. (d) The influence of the  X  in letter recognition with 100 labeled instances. mapped to the positions between class 1 consisting of the animals having milk and living on land, and class 4 consisting of the animals living in sea. A similar observation also holds for seasnake . The second task is classification on the mushroom dataset that contains 8124 instances described by 22 categorical attributes, such as shape , color , etc. We remove the 11th attribute that has missing values. Each instance is labeled as edible or poisonous . They contain 4208 and 3916 instances separately. The third task is text categorization on a modified 20-newsgroup dataset with binary occurrence values for 100 words across 16242 articles (see http://www.cs.toronto.edu/~roweis ). The articles belong to 4 different top-ics corresponding to the highest level of the original 20 newsgroups, with the sizes being 4605 , 3519 , 2657 and 5461 respectively. The final task is to guess the letter categories with the letter dataset, in which each instance is described by 16 primitive numerical attributes (statistical moments and edge counts). We used a subset containing the instances of the letters from A to E with the sizes being 789 , 766 , 736 , 805 and 768 respectively. The exper-imental results of the above three tasks are shown in Figures 3(a)-3(c). The regularization parameter  X  is fixed at 0 . 1 . Each testing error is averaged over 20 trials. The results show that the hypergraph based method is consistently better than the baseline. The influence of the  X  used in the letter recognition task is shown in Figure 3(d). It is interesting that the  X  influences the baseline much more than the hypergraph based approach. We generalized spectral clustering techniques to hypergraphs, and developed algorithms for hypergraph embedding and transductive inference. It is interesting to consider applying the present methodology to a broader range of practical problems. We are particularly interested in the following problems. One is biological network analysis [17]. Biological networks are mainly modeled as simple graphs so far. It might be more sensible to model them as hypergraphs instead such that complex interactions will be completely taken into account. The other is social network analysis. As recently pointed out by [3], many social transactions are supra-dyadic; they either involve more than two actors or they involve numerous aspects of the setting of interaction. So standard network techniques are not adequate in analyzing these networks. Consequently, they resorted to the concept of a hypergraph, and showed how the concept of network centrality can be adapted to hypergraphs.

