 Finding patterns of social interaction within a population has wide-ranging applications including: disease modeling, cultural and information transmission, and behavioral ecol-ogy. Social interactions are often modeled with networks. A key characteristic of social interactions is their continual change. However, most past analyses of social networks are essentially static in that all information about the time that social interactions take place is discarded. In this paper, we propose a new mathematical and computational frame-work that enables analysis of dynamic social networks and that explicitly makes use of information about when social interactions occur.
 Categories and Subject Descriptors: I.6.5 Simulation and Modeling: Model Development General Terms: Algorithms, Design Keywords: dynamic social networks, algorithms, disease spread.
Finding patterns of social interaction within a population has wide-ranging applications including: disease modeling [14, 22], cultural and information transmission [4, 6, 9, 18, 30, 32], intelligence and surveillance [4, 21, 26], business management [5, 8, 28, 29], conservation biology and behav-ioral ecology [10, 11, 25]. The most common way to capture information on social interactions is a network [15, 16, 20, 27, 31].

Typically, each individual is represented by a node in the network, and there is an edge between two nodes if a so-cial interaction has occurred at any point in time between  X 
Was supported by the National Science Foundation post-doctoral fellowship grant EIA 02-05116  X 
Supported by the National Science Foundation grant CCR-0313160 and by the Sandia University Research Program Grant No. 191445 Copyright 2006 ACM 1-59593-339-5/06/0008 ... $ 5.00. Figure 1: The top two rows are two dynamic graphs that map to the same static graph (third row). the two individuals represented by these nodes. Depend-ing on the source of data, a social interaction could be a verbal or written communication (cellphones, emails, blogs, chatrooms, etc.), scientific collaboration (co-authorship net-works), sexual contact (HIV patients, dating among adoles-cents), or physical or virtual proximity (visiting websites, physical locations, groups of animals). Edges are commonly weighted by frequency of interaction.

This network model of social interactions has been very successfully. However, a major drawback of this model is that it is essentially static in that all information about the time that social interactions take place is discarded. The static nature of the model can give inaccurate or inexact in-formation about patterns in the data. For example, as Fig-ure 1 illustrates, in some cases, very different dynamic data can give rise to the same static graph. Thus, decisions made based solely on the static data may be flawed. For example, assume the edges in Figure 1 represent social contact that can cause disease transmission. Suppose we can vaccinate only one person and we want to minimize the total number of infected individuals at the end, assuming that the disease always crosses each edge and that any individual may be infected initially. From the static graph, it seems that no matter which single individual is vaccinated there will be two individuals infected at the end. However, in the first dynamic graph, assuming the initial infection starts at step 0, only b needs to be vaccinated so that no matter whether a or c is infected initially, the infection will not spread.
The static graph representation prevents us from even ask-ing certain fundamental questions about either the causes or consequences of social patterns. How quickly can a dis-ease spread through the population and which individuals should we inoculate to slow down its spread? How do the size and stability of social structures change with outside circumstances (e.g. season, time of day, predator activity, upcoming conference or journal deadlines, court subpoenas, terrorist activities)? Are there differences in the life span of social structures with respect to their size and the de-mographics of their members? To be able to answer these questions, we need to have information on when social in-teractions occurred. This level of information is becoming increasingly available, but the analytical and computational tools are still lagging.

Research in dynamic network analysis has proceeded in several directions. The statistical mechanics view [2, 3] con-siders networks as complex physical systems and strives to describe laws governing their evolution and limit behavior and properties. A more computational view [7] incorporates probabilities and uncertainty into the structure information and combines social network analysis with multi-agent sys-tems. Computer simulations until recently have been the main computational technique to incorporate dynamic net-work information, e.g. [14]. The last few years have seen a development of systematic algorithmic approaches to dy-namic network analysis, mostly in the context of information networks [1, 18, 20, 19, 23, 24]. Yet, most of the methods focus on the frequency , rather than concurrency and order of interactions. Moreover, most dynamic models are network evolution models where nodes and edges can be added but not deleted over time.

In this paper, we propose a new mathematical and compu-tational framework that enables analysis of dynamic social networks and that explicitly makes use of information about the time that social interactions occur. We present several algorithms for obtaining information about the structure of dynamic social networks in thi s framework and demonstrate the utility of these algorithms on real data.

The rest of the paper is organized as follows: in Section 2 we describe our new framework for analyzing dynamic social networks. In Section 3 we present algorithms that use this framework to find some basic properties of dynamic social networks. In particular, we give algorithms for finding the most persistent and the largest social structures, as well as social structures that encompass a set of specified groups of individuals. Section 6 lists a collection of open problems and comments on some possible solution approaches. Input Data: To answer questions about social structure in a dynamic setting, we assume that a population of individ-uals is monitored in some way over a period of time. Inter-actions between individuals are recorded at every timestep. For the purpose of this paper, we assume that the input is in the form of the partition of the individuals into groups at every time step. Given a population X = { x 1 , ..., x n define a group to be a subset g  X  X . We assume that the input is a set of partitions, P 1 ,P 2 , ..., P T of X , one partition for each time step. Each partition, P i , is a set of disjoint groups .Wedenoteby P ( g ) the index of the partition to which g belongs. That is, if g  X  P i then P ( g )= i .
Given two groups, g and h , a set similarity measure sim ( , ), and a turnover threshold  X  , the two groups are similar if sim ( g, h )  X   X  . Our definition is independent of any specific set similarity measure. There are many possible such mea-sures, including the standard Jaccard similarity measure [17] (the size of the intersection over the union). We do assume that the similarity measure is efficiently computable and we also assume the following properties hold: 1. sim ( g, g ) has maximum similarity value. 2. sim ( h, g ) monotonically increases with the increase of 3. sim ( h, g ) monotonically increases with the decrease of We now define the main concept of our framework -a meta-group.

Definition 1. Given partitions P 1 , ..., P T of a set of in-dividuals X , a set similarity measure sim ( , ) , a turnover threshold  X  and a function  X  ( T ) ,a metagroup MG is a se-quence of groups MG = g 1 , ..., g l ,  X  ( T )  X  l  X  T such that 1. no two groups in MG are in the same partition and 2. the consecutive groups in MG are  X  X imilar X  in that: We call the parameter  X  the persistence of a metagroup. Note, that the intersection between g 1 and g l may be null by this definition; our only constraint is that the groups change gradually (as defined by  X  ).

Definition 2. An individual x  X  X is a member of a metagroup MG = g 1 , ..., g l if the number of groups g 1 to which x belongs is at least an a priori chosen member-ship threshold function  X  (which may be a function of T ,the total number of individuals associated with MG , and other parameters).

The values of  X  (persistence),  X  (turnover) and  X  (mem-bership), give the meaning of a  X  X roup X . Our framework is independent of these definitions and is capable of providing significant answers for a wide range of applications.
We use a weighted multipartite directed graph for the con-ceptual representation: G =( V 1 , ..., V T ,E )where V i set of groups in partition P i and ( g i ,g j )  X  E if P ( g and sim ( g i ,g j )  X   X  . Note that this is a directed acyclic graph (DAG) since all the edges are directed from an earlier time step to a later one. The weight w ( g i ,g j )= sim ( g A metagroup in this graph is a path of length at least  X  ( T ). We shall call this graph a metagroup  X  -graph .

From now on we assume the definition of a metagroup that satisfies a priori given thresholds of  X  and  X  and an individ-ual membership that satisfies a threshold  X  . We assume the input is in the form of a metagroup  X  -graph described above with the present edges of weight no less than  X  . Metagroup Statistics: It may be impractical to list all the metagroups; in some cases there are an exponential number. Nonetheless, we can calclulate many statistics efficiently, such as the number of metagroups and the average meta-group lifespan. The number of metagroups is the number of paths of length at least  X  in the  X  -graph and the average metagroup length is the average length of a path that is at least  X  long. Both can be computed with the same sim-ple dynamic programming algorithm presented below. Let P ( g, l ) denote the number of paths of length exactly l from a minimal vertex (no incoming edges) to a group g .Wecom-pute the table P ( g, l ) starting with the groups in partition 0 and moving forward in time to partition T .
 Extremal Metagroups: A fundamental question about social groups is that of their persistence. Most Persistent Metagroup: Find a metagroup MG which maximizes the number of groups associated with MG . The question is equivalent to finding the longest path in a DAG, which is a well studied problem and can be solved in linear time using dynamic programming on a topologically sorted graph.
Alternatively, one can ask for the most stable (least turnover) metagroup. In our framework this is equivalent to the path of length at least  X  with the heaviest average edges. Most Stable Metagroup: Find a metagroup MG with the maxi-mum sum of the edge weights divided by the length of the path. Again, in a DAG, such a path can be easily found us-ing dynamic programming on a topologically sorted graph.
Wecanalsoaskforametagroupwiththelargestmember-ship. Largest Metagroup: Find the metagroup MG which maximizes the number of members of MG . The following simple algorithm solves this problem.
 In this algorithm, S ( g, k, l )isthe set of individuals that ap-pear at least k times in a metagroup of length at least l that ends at the current group g . N ( g, k, l ) keeps track of the in-coming edge of the metagroup to which g is assigned. ( P ( g ) is the index of the partition to which g belongs). The worst case running time of the algorithm is O ( mT 2 n | E | ), where m is the total number of groups.

Note that all of the various metagroup statistics we have discussed so far can be computed in one pass over the data, while building the metagroups graph.
We demonstrate the conceptual metagroup framework on a dataset which is considered a benchmark in comparing social networks analysis methods [15], the Southern women data from 1930s Natchez, Mississippi [12]. The dataset has been used to compare methods that identify communities from social interactions and the core versus the periphery members within each community [15]. Figure 2 shows the data of participation of the 18 women in 14 social activi-ties over the nine month period [12]. Figure 3 shows the corresponding metagroups graph for  X  = . 6. Each vertex represents a group defined by a social event. The groups are ordered chronologically and numbered using the numbering from the table in Figure 2. The similarity between any two groups g and h is computed using the generalized Jaccard or greater are shown. The metagroup graph has three con-Figure 3: The metagroup graph for the Southern women data with  X  = . 6 nected components: Freeman [15] compares 21 different social network analysis techniques on this dataset. Figure 4 shows the assignment of individuals to clusters by different methods. Using the most stable metagroups MG 1and MG 3, our method separates the individuals into clusters (using  X  =1) { 1  X  7 , 9 } and { 10  X  15 } , which is exactly as the algebraic topology based DOR79 method [13] with competence score of .923 [15]. In Figure 4: Clusters assigned by 21 procedures. Clus-ters are designated by colors. An individual assigned to more than one cluster has  X  X  X  X  of two colors. addition, Freeman compares the assignment of individuals to the core and the periphery of a cluster by different meth-ods. Figure 5 summarizes the results. Our method (using the range of  X  ) separates the first cluster as 1 3 4 5 | and the second as 12 13 14 | 11 15 | 10, which is different from DOR79 but comparable to the overall trend. Overall, our method provides insights comparable to the other tech-niques. However, the main advantage of our approach is that it explicitly addresses the time component of the data and provides a unifying frame work for a more sophisticated analysis, as demonstrated in the following section. Group Connectivity: A natural question to ask is, given a collection of groups at different time steps, do they belong Figure 5: Core/Periphery assignment by 11 proce-dures. The bars separate the groups in decreasing order of  X  X entrality X . to the same overall social structure, i.e. the same meta-group. Formally, there are several computational problems of
Group Connectivity: Let g 1 , ..., g l be a set of groups in separate partitions, ordered by their partition indices (i.e., P ( g i ) &lt;P ( g i +1 )). Then we may ask (1) Is there a meta-group that contains all the groups? (2) Find the most per-sistent/stable/largest metagroup that contains all groups. (3) If no metagroup contains all the groups, find the one that contains most. To answer all of these questions we first preprocess the graph (using simple BFS) to find a connected component with the vertices g 1 , ..., g l being the cut vertices and all the minimal vertices being in partitions before g g 1 itself) and all maximal vertices being in partitions after g (or g l itself). We shall call this subgraph a  X  -component of g 1 , ..., g l .Withthis  X  -component graph we can answer the various group connectivity questions.

Is there a metagroup that contains all the groups? If the  X  -component of the groups is connected then the question is whether there is a path from a minimal to a maximal vertex of length at least  X  .

Find the most persistent/stable/largest metagroup that con-tains all groups. This is equivalent to finding the longest/average heaviest/largest membership path from a minimal to a max-imal vertex in a connected  X  -component. We return such a path if it is of length at least  X  .

Find the metagroup that contains the maximum number of groups { g 1 , ..., g l } . A dynamic programming algorithm that tracks M ( g ), the maximum number of groups { g 1 , ..., g a metagroup that ends at g .
 Individual Connectivity: Similar to group connectivity, we may ask questions about individual connectivity. That is, given a set of individuals, do they belong to the same social structure. More formally, Individual Connectivity :Let S  X  X be a set of individuals.

Find the metagroup that contains the largest number of individuals in S as members. This is equivalent to the Largest Metagroup problem over S on the originial meta-group  X  -graph.

Find the most persistent metagroup that contains all the individuals in S as its members. Again, we use the Largest Metagroup algorithm with slight modifications.

Find the largest metagroup that contains all the individu-als in S as members. Again, a modification of the Largest Metagroup answers this question.
 Critical Group Set: Until now, we have been able to solve all of our problems in polynomial time. However, it would be naive to expect that all the aspects of a dynamic social network can be explored so efficiently. For example, the question of fragility of a social network can be formulated in many ways. One way to ask it is to consider the smallest set of groups whose absence would leave no recognizable overall social structures. Formally, Critical Groups Set :Find the smallest set of groups whose removal leaves no meta-groups (with respect to given  X  and  X  ). This question is particularly important in an epidemiological context where it is safe to have prolonged interactions for periods no longer than the non-contagious incubation period of a disease, yet it is important to quarantine people otherwise. In this con-text some groups may be considered more important (or easier) to dissipate than others and this would lead to a vertex-weighted version of the problem. Alternatively, these are the events where vaccination stations should be posi-tioned for mass vaccination. For example, flu vaccines on university campuses may be administered more effectively outside of some lecture halls than others. More generally, Min k-Path Vertex Shattering Set : for an arbitrary graph G =( V, E ) find the smallest (weighted) subset of ver-tices U  X  V such that the subgraph induced by V  X  U has no paths longer than k  X  1. We show that the complexity of this problem very much depends on the specific value of k .
First, we show that the general problem is NP-complete by demonstrating that the unweighted Min 2-Path Ver-tex Shattering Set is equivalent to Min Vertex Cover , which is a well studied NP-complete problem.

Theorem 1. Min 2-Path Vertex Shattering Set is polynomially equivalent to Min Vertex Cover .

Corollary 1. Min k-Path Vertex Shattering Set on an arbitrary graph G is NP-complete.

The special structure of a metagroup  X  -graph does not improve the complexity of the Min2-pathVertexShat-tering Set problem.

Theorem 2. Min 2-path Vertex Shattering Set on ametagroup  X  -graph is NP-complete.

While the Min k -path Vertex Shattering Set problem is NP-hard for an arbitrary k , we present a polynomial time algorithm for k = T in a DAG, where T is the length of the longest path in G .Let P ( v, l ) be the number of paths of length exactly l from a minimal vertex to v  X  V .The algorithm uses the function k-Graph : Alg k-Graph ( k )
In the order of a BFS from the minimal vertices:  X  v, l, 0 l  X  T
P ( v, l )= FOR all maximal v and l  X  k s.t. P ( v, l ) &gt; 0 DO RETURN the resulting traced graph G k
Lemma 1. Algorithm k -Graph( k ) returns a subgraph G k of G that contains every edge in G which is in some path of length at least k from a minimal to a maximal vertex in G .
Corollary 2. G k contains all the paths of length at least k from a minimal to a maximal vertex in G .
 The running time of the k-Graph algorithm is O ( | E || V since each edge is traced exactly once and T  X | V | .Us-ing the function k-Graph we can state the Min T-Path Vertex Shattering Set solution.
 Alg Min T-Path Vertex Shattering Set G T = k-Graph ( T )
Add a vertex s connected to all the minimal vertices and a vertex t connected from all the maximal vertices in G T
U = minimal vertex cut in the resulting graph G T + { s, t RETURN U .

Theorem 3. Algorithm Min T-Path Vertex Shatter-ing Set is a polynomial time algorithm that returns the smallest subset of vertices U whose removal leaves a sub-graph with no path of length T (where T is the length of the longest path in the original graph G ).
 Figure 6: Here two groups are similar only if they are identical. The removal of any individual does not change the structure of the graph until there is only one individual left. Until that point the singleton paths are T/ 2 long and do not intersect the path connecting the group of all the individuals. When there is only one individual left then the one path remaining is T long.
 Critical Individual Set: Another way to address the ques-tion of the fragility of a social network is to ask what is the smallest number of individuals whose absence would leave no recognizable social structures. In the epidemiological setting, for example, vaccination of those individuals would prevent the spread of a disease (with the right definitions of a group and a metagroup). Critical Individuals Set: Find the smallest set of individuals whose removal leaves no metagroups.

First we note that removing individuals from the pop-ulation does not guarantee that the metagroups become less persistent (the paths in the metagroups graph become shorter). In fact, Figure 6 shows an example of a meta-groups graph for which the removal of all but one individual (no matter which one) leads to a doubling of the path length. While the example in Figure 6 may seem contrived, in fact the same phenomenon occurs in every metagroups  X  -graph where  X  is such that only identical groups are connected.
The example above shows that the identity similarity mea-sure may be impractical, parti cularly in the context of dis-ease or information spreading. The identity similarity mea-sure assumes that even groups that share most of their mem-bers but are not identical do not pass information between them or transmit diseases. Once we relax the requirement for the two groups to be identical, both the realistic impli-cations and the combinatorics of the critical individual set change drastically.

Proposition 1. For any edge in the graph ( h, g ) and any individual x there are three possible ways in which the re-moval of x can affect the weight of the edge ( h, g ) : 1. If x/  X  h and x/  X  g then sim ( h, g ) does not change with 2. If x  X  h  X  g then sim ( h, g ) will not increase with the 3. If x  X  h but x/  X  g (or vice versa) then sim ( h, g ) will The proof of this is straight forward once we recall the three properties of the similarity measure.

There are several greedy heuristics for this problem. In particular, one may iteratively remove the individual that: 1) appears in the intersections of the largest number of groups that are still connected by an edge; 2) removes the largest number or the heaviest of edges; 3) reduces the (to-tal) weight of the edges by most; or 4) removes edges from the largest number of metagroups.

There are many other questions one may ask about a dy-namic network that can be easily modeled computationally in our framework. We give a list of open problems here. Individual Membership: Given an individual x , find the metagroup MG which maximizes the cardinality of the set of groups in MG in which x occurs. That is, |{ i, s.t. x  X  g i ,g i  X  MG }| Extroverts and Introverts: Find the individual who is a member of the largest (smallest) number of metagroups. Loyal Individuals: Given an individual, what fraction of its time is it a member of the same metagroup? Find the individuals that appear most frequently in one metagroup. Metagroup Representative: Given a metagroup MG ,is there an individual who occurs more in this metagroup than any other individual and occurs in MG more than in any other metagroup? Demographic Distinction: Given a coloring of individu-als (a partition), is there a property that distinguishes one color from the others, i.e. some color is in more meta-groups, fewer metagroups, longer metagroups, more time in any metagroup (e.g. on average), etc.? (Each color rep-resents a demographic set.) Critical Parameter Values: Identify the largest values of  X ,  X  for which there exists at least 1 ( k ) metagroup. Identify the largest value of  X  for which each metagroup has at least one member.
 Critical Time Moments: Identify critical time moments. For example, the time when groups X  membership changes most, i.e. minimal edge cut.

For all of the above questions it is important also to keep in mind that the input graph may be very large and even polynomial algorithms may be too slow. Thus, the real goal in this domain would be to design sublinear algorithms. We are grateful to S. (Muthu) Muthukrishnan, Dan Ruben-stein, Siva Sundaresan, Ilya Fischoff, David Kempe, Simon Levin and many others for their help and insights.
