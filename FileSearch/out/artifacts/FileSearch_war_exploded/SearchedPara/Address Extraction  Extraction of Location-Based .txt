 The development of wireless telecommunication has ushered in an era of mobile communicating and computing. As a result, Location-Based Service (LBS) has be-come a fashionable theme in the industry. It involves the ability to find the geographi-cal location of a mobile device and provide services based on this location informa-tion. Updating and retrieving large amounts of location-based data is a significant problem in LBS applications. On the other hand, the ever-growing collection of texts available on the Web constitutes a valuable pool of up-to-date location-based infor-mation. Modern Web information retrieval and information extraction approaches can thus be useful in collecting location-based data through the Internet. mation extraction, as much location-based information may be identified on the basis of corresponding postal addresses. For example, www.yellowpages.ca provides a large and valuable database containing abundant services with their addresses. How-involves the ability to scan textual content, identify possible lexical address descrip-tions, and finally label text segments as understandable address structures. location and regional position, as shown in Figure 2. Based on this observation, ad-dress extraction should consider adequate information. Considering the text segment  X  X ingston Street will be under construction from June 9 to July 15 X ,  X  X ingston X  and  X  X treet X  are concepts in the postal address domain, but  X  X ingston Street X  is not a valid address. On the other hand,  X  X oblaws supermarket, located at 125 Kingston Street, Toronto X  contains the address descriptor  X 125 Kingston Street, Toronto X . mailing address can be written as  X  X uite 113, 100 Kingston Street, Toronto, ON X  or  X 100 Kingston Street, Suite 113, Toronto, ON X . On the other hand, not all address elements have to appear in a real address. For example, the above address does not contain a  X  X irection X  description. Some addresses may not have suite information. Another problem is vocabulary [1,2]. Language use may cause semantic misunder-standing due to synonyms (different words for the same meaning) and polysemy (the same word with different meanings). In the synonym case, for example,  X  X treet X  is often written as its short form  X  X t X ,  X  X t. X  or  X  X tr X ;  X  X est X  is often abbreviated as  X  X  X . To illustrate the polysemy problem,  X  X uebec X  is a province in Canada, but it is also a city name in the province of Quebec;  X  X ntario X  is a province in Canada but it may also be a street name in some city;  X  X herbrooke X  may also appear as a city name or a street name. the Web. The method employs an ontology-based conceptual information retrieval approach combined with graph matching me thods to automatically identify possible address structures in a Web page. Section 2 reviews recent research in the field of content-based information retrieval. Section 3 details our method and Section 4 evalu-ates our experiments. Finally, Section 5 gives the conclusion. new. Many research groups, such as the Message Understanding Conference (MUC) and the Text REtrieval Conference (TREC), have given considerable attention to the information extraction approach over the la st decade. Postal address extraction is a new problem, however. The tasks of MUC-7 allowed researchers to extract street address information for a vehicle launch event [4], but most of their proposals are not accurate enough for location-based data identification. Other researchers utilize a standard address database to perform geo-pa rsing of Web pages [5, 6]. However, this approach is not able to handle diverse address inscription forms. ceptual analysis of unstructured texts. In such systems, researchers tend to use the domain ontology as a conceptual structure to accomplish concept extraction by com-bining human knowledge and computing techniques. Mapping the words onto a set of predefined concepts (knowledge) is one way to discover a text X  X  underlying mean-ings. In this context, an ontology specifies a conceptualization of a particular knowl-edge domain [7], in which each concept is formalized as a node in the ontology and a relationship between concepts is represented by an edge linking concept nodes. model to represent documents. Each document is normalized to a concept-element vector and each element value is determined by concept frequency. An ontology or thesaurus is used to merge synonyms and other related syntax. However, a common vector cannot exhibit the relationship am ong concepts. Philosophers and linguists have found that graph structures are a better way to represent human knowledge. Conceptual graphs [11] and semantic networks are academic efforts towards machine understanding. Graph-based document representation can easily preserve implicit knowledge in the context of texts. However, transforming plain texts into graphs is not an easy task, since concepts or their relationships have to be identified automati-cally. Graph matching is also a difficult problem (NP-complete). These two draw-backs obstruct the application of graph structures in information retrieval. A document is described as a subgraph of a predefined ontology, after concepts in the document are identified and mapped onto th is ontology. Comparing concepts corre-sponds to node similarity. Approximate graph matching is used in this paper. 3.1 Ontology Construction Ontologies play an increasingly important role in real-world modeling. An ontology is  X  X  specification of a conceptualization X  [12] . Such a conceptualization can be defined as a structure &lt;D, R&gt; , where D is a domain and R represents relevant relations on D . main and defines underlying relations between these concepts. teer, in which each concept can be described as a duple c=(inscription, meaning) , where inscription corresponds to the lexical insc ription form of the concept and meaning is the syntactic sense of the concept. For example, the word  X  X herbrooke X  will be transformed into two concepts:  X  X treet_name:Sherbrooke X  and  X  X ity:Sherbrooke X , as  X  X herbrooke X  can actually be either a street name or a city name. The top-level ontology in the postal address domain (Figure 3) is the abstract understanding of a real mail address. These concepts are the basic entities and general descriptors. On the other hand, factual concepts located in the lower level of the on-tology graph are the instances of street name, street type, direction, city and province. Concepts are linked together by means of their semantic relations, classified as verti-cal and horizontal: decomposition hierarchy. For instance, municipal location can be composed of street-number , street-name , street-type , etc. Figure 3 gives a PartOf relation for the top-level ontology in the address domain. the concept being defined. For example, Northeast is an instance of Direction , and Toronto is an instance of city . Figure 4 shows an InstanceOf relation. the concept being defined. Fig. 5 gives a Similar relation for the concept NE . hood relation when two concepts are linked together in the document, either in the same sentence or in two adjacent sentences. For example, in  X 20 Jutland Road, Etobi-coke, Ontario X ,  X  X utland X  is a SyntacticNeighbor of  X  X oad X , and  X  X oad X  is a Syntac-ticNeighbor of  X  X utland X  and  X  X tobicoke X . Figure 6 gives an example of this relation. the ontology graph. N is the set of concept nodes corresponding to ) , ( d n N = , where n is the inscription form of the concept, d is the description of the concept and E is the set of edges linking concept nodes to represent relationships. It is a 4-tuple = , where Pa is the PartOf relation, In is the InstanceOf relation, Si is the Similar relation and Sn is the SyntacticNeighbor relation. 3.2 Concept Id entification To represent a text segment in a document using a predefined ontology, concepts must first be identified from the unstructured text. However, documents do not contain concepts explicitly, but rather words. Once concepts are expressed in a language (words and grammar), it is possible to identify them by analyzing phrases [10]. We use the following rules with regard to the relationship categories men-tioned above. Rule 1: The SyntacticNeighbor relation can be id entified if two concepts are contigu-ous in the document. For example, the phrase  X  X aple Street in Canada X  indicates that the concept  X  X aple X  is a SyntacticNeighbor of the concept  X  X treet X ; the concept  X  X treet X  has the SyntacticNeighbor  X  X aple X  but not  X  X anada X . Rule 2: If a concept is an instance of its parent node, that parent node is also identi-fied. For example, in Figure 2, if the concept  X  X ast X  is spotted, the  X  X irection X  con-cept should be selected. Rule 3: If a concept is found, its similar sibling concepts must be identified. For ex- X  X ORTHEAST X  and  X  X ORTH EAST X  will also be picked out. Rule 4: If an identified concept has more than one meaning, all the related concept nodes are highlighted and their parent nodes are also picked out. For example,  X  X her-brooke X  can be either  X  X treet_name X  or  X  X ity X . If  X  X herbrooke X  is identified in the document, both  X  X treet_name:Sherbrooke X  and  X  X ity:Sherbrooke X  are highlighted and their InstanceOf relation parent nodes  X  X treet_name X  and  X  X ity X  are also picked out. Rule 5: The SyntacticNeighbor relation is transferred from the child node to its parent node, following the InstanceOf relation edge. For example, in the phrase  X  X aple Street in Canada X , we know that  X  X aple X  and  X  X treet X  are syntactic neighbors,  X  X a-child node of  X  X treet type X  under the InstanceOf relation. instance of  X  X uite_number X  or  X  X treet_number X ,  X  TORONTO  X  as a possible instance of both  X  X treet_name X  and  X  X ity X ,  X  ROAD  X  as an instance of  X  X treet_type X  (its syno-nym  X  RD  X  is also selected),  X  ETOBICOKE  X  as being in the same situation as  X  TORONTO  X , and finally  X  ON  X  as an instance of  X  X rovince X  (its synonym  X  ONTARIO  X  is also selected). Following the above five rules, general concepts,  X  X uite_number X ,  X  X treet_number X ,  X  X treet_name X ,  X  X treet_type X ,  X  X ity X ,  X  X rovince X  are determined, with their relations. Figure 7 illustrates the resulting ontology graph. 3.3 Graph Matching Graph matching allows us to compute similarity and map common concept nodes between knowledge structures. The similarity between the graph of a text segment and the predefined template graph of the address structure is used to determine whether a phrase is a real address. On the side of node-to-node mapping, ambiguous nodes can be resolved by coherent correspondences and then used to fill out the tabu-lar address structure. Hence, the process involves two steps: graph similarity meas-urement and node mapping. Template Graph and Abstract Descriptor Subgraph To perform graph matching, two definitions have to be given: the template graph, which utilizes a graph to state predefined knowledge of address structure, and the abstract descriptor subgraph, which concentr ates the general concepts extracted from a text segment graph to present abstract knowledge of the text. postal address domain, a real address is always written according to some official, uniform rules. Although it has diverse orders in different countries or regions, the elements contained in an address are usually the same and their number is limited. In Canada, these elements are  X  suite descriptor  X ,  X  suite number  X ,  X  street number  X , plate graph can be predefined to simulate conceivable cases of addresses. Figure 8 presents the SyntacticNeighbor relations between these elements and includes all possible connections in an address expressi on. This graph is actually a predefined knowledge structure representing a general address conceptualization. 
An abstract descriptor subgraph is the subgraph of concentrated general con-cepts in the top level of the text segment graph. This notion is based on human analy-sis of postal address structure. For example,  X 100 Kingston St, Toronto, ON X  has a StreetNumber(100)-StreetName(Kingston)-StreetType(St)-City(Toronto)-Province (ON) structure. Here, we call the general concept  X  X treetName" as an abstract de-scriptor of the concept  X  X ingston X , the ge neral concept  X  X treetType X  as an abstract descriptors (InstanceOf or PartOf parent of top-level concept nodes) can be induced by following InstanceOf and PartOf relation edges. These general concepts are then extracted and their SytacticNeighbor relations are determined by transferring from the SyntacticNeighbor relation concepts in the lower level of the ontology. For example, in  X  20 TORONTO ROAD ETOBICOKE ON  X  and its graph representation in Figure 7, we can acquire the abstract descriptor subgraph in Figure 9, where each concrete concept has been mapped onto its gene ral concept along an InstanceOf edge. Similarity Measurement Graph similarity measurement in the inform ation retrieval field has received consid-erable attention from researchers such as [13, 14]. Most of their proposals define graph similarity based on the similarity between concepts and the similarity between relations, corresponding to separate node and edge comparisons. In the address do-main, however, the graph similarity problem is relatively simple. The similarity be-tween two graphs can be defined by the following formula: segment  X 20 TORONTO ROAD ETOBICOKE ON X , if we compare its abstract de-scriptor subgraph (Figure 9) with the template graph (Figure 8) and prune off dupli-cated elements (for instance, by regardin g the two  X  X treet_name X  nodes as a single  X  X treet_name X , and the two edges connecting  X  X treet_name X  and  X  X treet_type X  as one Structure Mapping Structure mapping is a node-to-node mapping problem, also called graph isomor-phism in mathematical terminology. The goal is to find a one-to-one correspon-dence of nodes, conserving adjacency, between two graphs or subgraphs. It is well known that isomorphism can be determined by means of a brute-force tree-search enumeration procedure. Although studies su ch as [15, 16] and the recent work in [17] give more innovative and optimized solutions, this problem still belongs to the class NP-Hard. In the address domain, however, it can be simplified for practical purposes. The trick we have used is to obtain an isomorphism between the template graph and the abstract descriptor subgraph by following InstanceOf relation edges. For a real address structure and its abstract descriptor subgraph, we admit the fol-lowing two facts: Fact 1 : A node of the template graph may be present only once in the abstract de-scriptor subgraph. For example, in the address  X  20 TORONTO ROAD ETOBICOKE ON  X ,  X  X treet_number( 20 ) X ,  X  X treet_name( TORONTO ) X ,  X  X treet_type( ROAD ) X ,  X  X ity( ETOBICOKE ) X  and  X  X rovince( ON ) X  appear once, and other address elements, such as  X  X irection X ,  X  X uite_descriptor X  and  X  X uite_number X  do not appear. template graph. For example,  X  X uite_number X  can never connect with  X  X treet_name X  directly (in the real world,  X  X uite_descri ptor X  always precedes  X  X uite_number X ); an edge linking  X  X uite_number X  and  X  X treet_name X  in the abstract descriptor subgraph is false and probably caused by word polysemy and ambiguity. spondences between the template graph and the abstract descriptor graph in a two-step task: Step 1: Eliminate edges found in the abstract descriptor subgraph but not in the tem-plate graph (Fact 2). For example, in Figure 9, the edges linking  X  X uite_number X  and  X  X treet_name X ,  X  X treet_number X  and  X  X ity X ,  X  X treet_name X  and  X  X rovince X  do not exist in the template graph. They should be pruned off as in Figure 10. Step 2: Find a path along SyntacticNeighbor edges in the abstract descriptor subgraph subject to the following conditions: (1) each instance concept node is mapped to a unique abstract descriptor node; (2) no abstract descriptor node is duplicated. For exam-ple, a path through Figure 9 can be determined as shown by the heavy line in Figure 11. an address candidate. The instance concept will now be fit into the tabular structure as its abstract descriptor representative. If no path can be found in the abstract descriptor subgraph, it means that the representable address candidate cannot be parsed to a valid address structure. On the other hand, the existence of two or more paths in the abstract descriptor subgraph means that th ere are ambiguous meanings for the address candidate. In that case, human intervention is required to validate these possibilities. Our ontology construction for the address domain makes use of the DMTI GIS data-base, which provides instance concepts su ch as  X  X treet_name X ,  X  X treet_type X ,  X  X irec-tion X  and  X  X ity X  for Ontario, Canada. We used www.yellowpages.ca as a test Web document set to evaluate our proposal. segment including two or more nodes can be regarded as an address candidate and transformed into a graph. The graph similari ty measurement is then compared. We set the threshold of similarity for extracting the most likely addresses at 0.29. In fact, this threshold value depends on the ontology graph. Since the template graph contains a total of 9 nodes and 15 edges, a possible address structure should contain at least 4 of the nodes in the template graph and the corresponding 3 edges. Thus the minimum of the similarity value, according to Formul a 5, should be 0.291667. Filtering by the threshold yields the list of extracted address candidates shown in Table 1. whose computed similarity exceeds the thre shold value. Two of these candidates,  X  X AST YORK 4 ETOBICOKE 11 NORTH YORK 21 SCARBOROUGH 39 TORONTO 57 YORK 14 ONTARIO X  and  X 0 1 2 3 4 5 6 7 8 9 A B C D E X , are re-jected at the stage of structure mapping, since no valid path can be found in their abstract descriptor subgraphs. cision and recall measurements, as suggeste d by MUC. MUC defines scores of preci-sion and recall by comparing the system response to an answer key [3]. Let key N be address candidates in the system response and correct N the number of correct addresses in the system response. Then score X , combining recall and precision scores , is also used to measure both factors. The  X  X  score X  is defined as document corpus available for evaluating postal address extraction, we tested our system manually on two Web databases: www.yellowpages.ca and Yahoo! Business-Finder. The results are listed in Table 2. 
Hence, the precision and recall evaluation of our system is as follows: precision , 724 . 0 = recall and 734 . 0 = F . The aim of the work described here is to achieve automatic location-based data updat-ing from the Web. Most location-awareness information can be recognized by postal addresses. Node mapping of an address graph fits an identified address segment into slots in a tabular structure. This technique can not only be utilized in mobile applica-tions, but can also be applied in geo-marketing and other applications of location-based services. On the other hand, since the method itself is based on domain ontol-ogy, it can also be extended to the automatic extraction of lightweight knowledge. problem needs to be considered in the pro cess of address identification and extraction. To achieve this goal, string similarity has to be integrated as part of the node similar-ity measurement. However, such a consideration undoubtedly increases the computa-distance computation itself consume system running time, but word-by-word and phrase-by-phrase comparison within the document must also be executed. Hence, tradeoff solutions between typing-error det ection and address identification perform-ance have to be found. Other problems include noise elimination and separation of joined address phrases. For example,  X 20 Portland Blvd Sherbrooke Quebec 100 King Street Cockville Quebec X  (two joined addresses) would be regarded as one address segment by the procedure described here. 
