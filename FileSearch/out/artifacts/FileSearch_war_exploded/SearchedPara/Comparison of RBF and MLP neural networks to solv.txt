 Shital S. Chiddarwar, N. Ramesh Babu n 1. Introduction
An industrial robot is a general purpose manipulator having several rigid links connected in series by revolute or prismatic joints driven by actuators. One end of the chain is attached to a supporting base while the other end is free and attached with a tool to execute certain tasks. The motion of joints results in relative motion between the links. The robot servo control system requires the reference inputs to be in joint coordinates whereas the task is generally stated in terms of Cartesian coordinate system. For efficient control of the position and orientation of the robot end-effector to reach its object, the understanding of kinematic relationship between the joint coordinate system and the Cartesian coordinate system is essential.

The kinematics problem of robots is generally categorized into forward kinematics and inverse kinematics problems. The forward kinematics problem is to find the position and orientation of the end-effector of a robot with respect to a reference coordinate system, given the joint variable vector q T  X  ( q q ) of robot arm and various geometric link parameters. Here, superscript  X  T  X  on vectors and matrices denotes a transpose operation and n is the number of degrees of freedom. The inverse kinematics problem is to calculate the joint variable vector  X  q  X  for positioning the end-effector of the robot arm at the desired position with the desired orientation, given the geo-metry of a robot and pose of its end-effector (Cartesian position and orientation) with respect to the reference coordinate system.

For successful task execution in various industrial applications like spot welding, precision assembly, packaging, etc., the path planning is done at the background or in offline mode in order to determine the Cartesian path for robot. The execution of this Cartesian path demands for conversion of Cartesian coordinates into joint angle coordinates using inverse kinematics relations. Hence, inverse kinematics computations for a serial robot are elemental for design, analysis of workspace for path planning, trajectory planning and control and offline programming of robots. This conversion is done by mapping Cartesian space of robot into its joint space by using inverse kinematics relations. This mapping process is nonlinear due to association of nonlinear trigonometric equations and becomes more complex for the robot with complex geometry and multi-degree of freedom. Moreover, the associated problems like the coupled nature of position and orientation kinematics of the robot, existence of multiple solutions and the presence of singularities add to the computa-tional complexities.

In literature, the computation of inverse kinematics solutions for control of a robot is attempted by means of various methods such as algebraic methods ( Duffy, 1980 ; Paul, 1981 ), geometric methods ( Wang et al., 2001 ), numerical methods ( Chen et al., 1999 ; Angeles, 1985 ; Wang and Chen, 1991 ) and neural network based methods ( Morris and Mansor, 1997, 1998 ; Hasan et al., 2006 ; Lou and Brunn, 1999 ).

Generally, algebraic methods are used to obtain closed form solutions. The major concern of algebraic methods is to obtain closed form inverse kinematics solution as it guarantees the existence of analytical solutions in the form of bounded/finite number of functions in terms of parameters of the robot. The existence of closed form IK solutions is of prime importance for continuous control of an industrial robot supported by a sensory system. In this method, the kinematic equations of the robot are transformed into higher degree of polynomials in tangent of half angle of joint angles and then all the roots of polynomial are numerically determined. The desired inverse kinematics solution for a six degree of freedom (DOF) robot is the solution of 16th order polynomial equation ( Pieper, 1968 ). The degree of poly-nomial from sixteen to two was reduced by using wrist partition principle which provided the IK solutions for positioning and orientation DOF separately ( Duffy, 1980 ). Further, the computa-tional complexity in finding IK solutions was reduced by using the concept of homogenous transformation matrix along with algebraic methods ( Paul, 1981 ). As these methods do not consider unique geometric aspects of each robot, algebraic methods are generally combined with geometric methods to derive the IK solutions for any given robot ( Wang et al., 2001 ). Even with these efforts, the involvement of complex higher order polynomials and in-depth analysis of robot geometry retarded the generalization and wide application of these methods for finding IK solutions. In view of these shortcomings, various attempts were made to use numerical methods for finding IK solutions of the robot ( Chen et al., 1999 ; Angeles, 1985 ; Wang and Chen, 1991 ). Essentially, these methods either make use of the Newton X  X aphson scheme, modified predictor-corrector algorithm, conjugate gradient algo-rithm, separation of variable method ( Chen et al., 1999 ) or adopt various optimization algorithms in order to solve an equivalent minimization problem ( Angeles, 1985 ; Wang and Chen, 1991 ).
The solutions with numerical methods are influenced by initial value selection, limited convergence and unavailability of multi-ple solutions. Moreover, they do not provide solution if Jacobian matrix at a particular pose of robot is singular. Above all, numerical as well as algebraic methods may fail to give accurate
IK solutions for commonly used industrial robots having coupled position and orientation kinematics. The main reason behind this is the unavailability of closed form inverse kinematics solution for a robot due to its complex trigonometric equations.

From the above discussion, it is evident that the most commonly used algebraic, geometric or numerical methods pose difficulties in finding IK solutions of serial robot effectively.
Further, these methods are not suitable to develop a generalized strategy that is efficient enough to obtain IK solutions indepen-dent of robot geometry and the number of degrees of freedom.
Hence, a few attempts were made to apply artificial neural network (ANN) for prediction of IK solutions for any particular robot. Essentially, ANN approximates inverse kinematics relations of the robot in order to map the Cartesian configuration into corresponding joint angles. The accuracy of predicted joint angles depends upon the method used for training of the network.
Among the various methods used for training of the network, back propagation neural network (BPANN), perceptron neural network and radial basis function (RBF) are the most commonly used. Out of them, BPANN is the most popularly implemented to determine IK solutions of planar as well as articulated robots ( Morris and Mansor, 1997, 1998 ; Hasan et al., 2006 ; Lou and Brunn, 1999 ).
Morris and Mansor (1997) used a BPANN trained with the data obtained from IK equation of two and three DOF planar robot to determine their IK solutions and also made use of look-up tables to select an appropriate solution from multiple solutions. The error in the solutions predicted using BPANN for six DOF PUMA robot was further reduced by adopting offset error compensation method ( Lou and Brunn, 1999 ). BPANN was also used to develop an adaptive learning algorithm for control of a six DOF Fanuc robot by computing IK solutions ( Hasan et al., 2006 ). For a robot with an offset in end-effector, the accurate determination of IK solutions was effectively addressed by BPANN ( Bingul et al., 2005 ). In all these approaches, ANN architecture considered
Cartesian coordinates for position and Euler angles for orientation representation as input and joint angles as the output. However, a four layer perceptron neural network proposed for predicting IK solutions of a custom made robot employed transformation matrix for better representation of orientation and Cartesian coordinates as input to the network ( Karlik and Aydin, 2000 ).
Certain hybrid techniques made use of ANN along with expert system, fuzzy logic and genetic algorithm for obtaining
IK solutions ( Oyama et al., 2001 ; Baheshti et al., 2003 ; Kalra and Prakash, 2003 ). IK solution of two DOF planar robot was determined with an expert system that has made use of modular neural network architecture ( Oyama et al., 2001 ). Adaptive fuzzy logic approach was employed to determine IK solutions of three
DOF planar robot ( Baheshti et al., 2003 ). A neuro-genetic approach that combined ANN and genetic algorithm was used to solve the IK problem of two DOF planar robot ( Kalra and
Prakash, 2003 ). Though these approaches can easily provide IK solutions for two or three DOF planar robots, these methods demand for high performance computing systems and complex computer programming for obtaining the solutions of more DOF robots. In view of this, neural network based approaches are likely to be superior to the hybrid methods. Among the existing networks, BPANN as well as perceptron neural network are time intensive due to the requirements of more number of epoch (iterations) for training of network ( Baheshti et al., 2003 ). On the contrary, RBF neural network shows faster convergence rate and high accuracy due to its ability of local approximation ( Zhang et al., 2005 ). RBF along with look-up table was used for predicting joint angles for two and three DOF planar robot ( Morris and
Mansor, 1998 ). Due to its faster convergence rate, it was also used for training the ANN for successful prediction of singularity free IK solutions of a six axis redundant robot ( Mayorga and Sanongboon, 2005 ). Moreover, RBF can handle large database very effectively and converges quickly which makes it efficient to predict IK solutions within short period.

From the above, it is evident that the earlier approaches made use of ANN to approximate complex inverse kinematics equa-tions. This aspect demands for availability of IK equations well in advance. Most of the earlier researchers implemented ANN based approaches to well studied robots like PUMA, or STANFORD whose IK equations are well known or to two/three DOF robots whose IK equations can be derived very easily. Further, the training data obtained from derived IK equations may contain mapping error due to nonlinear mapping between joint angle coordinates and Cartesian coordinates leading to inaccuracies in predicted IK solutions ( Wang et al., 2001 ). This mapping error may generate significant deviation of the end-effector from its desired position. This aspect emphasizes the need for an alternate approach that is independent of the derivation of complex IK equations in order to generate the mapping error free training data.

In all the earlier approaches, the accuracy of predicted IK solutions is dependent upon the availability of large number of training patterns. Generation of such large data set becomes impractical for a robot situated in a cluttered workspace. To handle such practical scenario, it is essential to have an approach that can generate training patterns irrespective of the available number of feasible configurations.

Further, overall performance of ANN also depends on archi-tecture of neural network used for prediction IK solutions. Most popularly used BPANN requires enormous time for training the network with a large finite data set. This particular short-coming of BPANN prompts one to look for a better architecture that can tackle large data set and also consumes less time for training.

The present work attempts to resolve these crucial issues by proposing a fusion approach that makes use of RBF ANN for prediction of joint angles and forward kinematics relations to determine the deviation of the pose of end-effector obtained from predicted joint angles from the desired pose. The data required for training of ANN is proposed to be derived from the forward kinematics relations instead of deriving a set of complex inverse kinematics equations. The scope of this work is limited to computation of inverse kinematics solutions at the various poses of the path obtained in Cartesian coordinates from the high-end path planner. The proposed ANN based fusion approach along with the strategies adopted for data generation and formulation of ANN is described in the next section. The results obtained with the proposed approach, the conclusions derived along with future scope of the approach are presented in the subsequent sections. 2. Proposed approach
Fig. 1 shows the role of proposed fusion approach in the overall framework being developed for robot motion planning and control. The proposed approach determines the inverse kinematics solution for each pose of robot end-effector in the path obtained by high end path planner ( Chiddarwar and Ramesh
Babu, 2007, 2009 ). In the proposed approach, ANN model plays an important role in obtaining IK solutions. The selection of appropriate network, formulation of ANN model and the generation of data for building ANN are crucial in developing an effective model for the purpose envisaged above. These aspects are dealt in the following sections. 2.1. ANN based fusion process for predicting IK solutions
Fig. 2 shows a typical collision free path generated by a path planner for an industrial 6R serial KUKA-Kr robot ( Fig. 3 ). Table 1 presents Denavit Hartenberg parameters for this robot ( Verdonck, 2004 ). This path can be realized by moving the end-effector of poses namely, Pose  X  X  P and Z coordinates for the position and roll, pitch and yaw for orientation of the end-effector is provided by the path planner. This particular pose of end-effector has to be converted into joint angles (IK solution) to control the movement of end-effector along the path. In the proposed ANN based fusion approach, the successive poses of the end-effector are converted into incremental joint of angles of robot, so as to obtain the absolute joints angles for any chosen pose of end effector ( Fig. 4 ).
Consider the movement of end-effector from Pose  X  X  P s to intermediate Pose  X  X  P the respective coordinates of Pose  X  X  P incremental change in pose, i.e. d X ,d Y ,d Z , dRoll, dPitch and dYaw is obtained. The absolute coordinates of Pose  X  X  P mental change in pose d X ,d Y ,d Z , dRoll, dPitch and dYaw are given 1000 Z as an input to the ANN in order to obtain incremental joint angles d y ,d y 2 ,d y 3 ,d y 4 ,d y 5 and d y 6 . Joint angles ( y 1 Pose  X  X  P s are determined by considering the next pose also as
Pose  X  X  P s . Incremental joint angles (d y 1 ,d y 2 ,d y obtained from ANN for any two successive poses and added to the previous joint angles ( y 1 , y 2 , y 3 , y 4 , y 5 , y 6 angles ( y 0 1 , y 0 2 , y 0 3 , y 0 4 , y 0 5 , y 0 6 ), where y y  X  y 3  X  d y 3 ; y 0 4  X  y 4  X  d y 4 ; y 0 5  X  y 5  X  d y 5 to check the relevance of these joint angles to the requisite pose of end-effector, these angles ( y 0 1 , y 0 2 , y 0 3 , y 0 4 pose Pose  X  X  P new by using forward kinematics relations and the deviation ( e 1 ) of the predicted pose Pose  X  X  P new from the required pose Pose  X  X  P permissible limit e 1 , then the new joint angles ( y , y for the intermediate Pose  X  X  P this particular deviation is added to the Pose  X  X  P
Pose  X  X  P
The above procedure is continued until the deviation in the pose of end-effector is within the acceptable limit. In the present work, this particular limit ( e 1 ) is considered to be around 7 0.02 mm.

From the above, it is clear that neural network in fusion approach considers the Cartesian position ( X , Y , Z ), and incre-mental Cartesian position (d X ,d Y ,d Z ), orientation (Roll, Pitch,
Yaw), incremental orientation (dRoll, dPitch and dYaw) to give out incremental joint angles (d y 1 ,d y 2 ,d y 3 ,d y 4 ,d y chosen poses in the workspace. Among the various types of networks, RBF and Multi Layer Perceptron (MLP) feed forward neural network do not get trapped at local minima as these methods follow the supervised learning process by utilizing input as well as output information for training the weights of the network ( Mayorga and Sanongboon, 2005 ). Both types of net-works are chosen to analyse the behavior of the proposed fusion process with different types of learning algorithms used for training of neural networks. Formulation of RBF and MLP ANN for predicting IK solutions in the form of incremental joint angles and the strategy adopted for generation of training data are presented in the following sections. 2.1.1. Formulation of RBF ANN for fusion process
The RBF architecture used for the proposed fusion process is shown in Fig. 5 . Radial basis function networks typically have three layers: an input layer, a hidden layer with a nonlinear RBF activation function and a linear output layer. The activation function in the hidden layer of the RBF network is Gaussian, which is characterized by its response that decreases monotonically with distance from a central point.

The problem of estimating the joint space coordinates for the robot at any given point in the workspace is based on the position in terms of X , Y and Z coordinates and orientation in terms of Roll, Pitch and Yaw. This entails finding an approximating function
IK( ws ) representing inverse kinematic solution in which work-space ws , is an N-dimensional vector.

In this case, the components of ws { X , Y , Z , Roll, Pitch, Yaw, d X , d Y ,d Z , dRoll, dPitch, dYaw} ( N  X  12) are independent variables. In the RBF network, IK( ws ) can be expressed as a linear combination of multivariate Gaussian basis function as follows: IK  X  ws  X  X  where f  X  ws  X  X  exp where f j ( ws ) is the output of j th node in hidden layer, c center of j th RBF node for the k th input variable WS k , s width of Gaussian function, W j is the weight between j th RBF unit and output layer neuron, b o is the bias term and M is the number of hidden layer neurons.

The learning process of a radial basis function network involves the determination of parameters c kj , s j and w input X  X utput data. The values of center, c kj , are selected randomly from the training data set. The width of Gaussian radial basis function, s j , is expressed in terms of the maximum distance between the chosen center d and the number of centers M as  X  d = the weights are determined. These weights are computed using multiple layer regression techniques. This involves processing of P training patterns through M hidden nodes to generate an M P matrix, say H . The aim is to find out the weight vector W (1 M vector) such that the error between the computed output vector S (1 P vector) and the target output vector T , is minimum. This can be achieved by minimizing the equation : T S :  X  : T WH : :
U : represents the Euclidean norm. The weight vector W is determined by finding the least squares solution of this equation using pseudo-inverse of H as W  X  TH T ( HH T ) 1 . These values of centers, width and weight are used for training the network. Based on the given spread, RBF function iteratively adds one neuron at a time to the network until the sum squared error falls below a specified error goal or a maximum number of neurons is reached. After several trials, a three layer network architecture having 12 neurons in input layer, 68 neurons in hidden layer and 6 neurons in output layer is identified as the most suitable architecture. The RBF ANN is developed by using MATLAB Neural Network Toolbox function  X  X ewrb X  (Demuth and Beale, 1998). It is built with the spread constant of the Gaussian set to 0.75 and training goal of sum squared errors set to 0.001. 2.1.2. Formulation of MLP for fusion process
The multilayer perceptron network consists of an input layer, an output layer and usually one or more hidden layers. Fig. 6 shows the architecture of MLP network employed for prediction of incremental joint angles with the proposed fusion approach. It has an input layer of 12 neurons, one hidden layer of 68 neurons with sigmoidal activation function, j , defined by log sigmoid function given in Eq. (3), where y is the corresponding input  X 
For the output layer, a linear activation function is used in the implementation. The approximating function IK( ws ), representing IK solution is defined by Eqs. (4) and (5). In this case, the same workspace ( ws ) components that were used for RBF network are chosen. The learning process of MLP network involves the use of the input X  X utput data to determine the weights and biases. The training function updates the weights and bias values according to Levenberg X  X arquardt optimization.
 IK  X  ws  X  X  c where A  X  ws  X  X  j where c is the linear activation function at the output layer;
W ( k , j ) is the weight between k th input and j th summation of hidden layer node; W 2 ( j ) is the weight between j th hidden layer neuron and output summation node; b 1 ( j ) is the bias term applied to the j th hidden layer neuron; b 2 (1) is the term applied to the output layer neuron; ws ( k ) is the k th element of input vector ws ; M is number of hidden layer neurons.

It minimizes a linear combination of squared error weights, and then uses Bayesian regularization to determine the correct combination of the results in a network that generalizes satisfactorily. For developing the MLP network, MATLAB neural network toolbox function  X  X rainbr X  ( Demuth and Beale, 1998 )is used with training goal and Marquardt adjustment parameter set to 0.001 and 0.005, respectively. 2.1.3. Generation of training data
The data needed for training of neural network is obtained from the forward kinematics relations of the robot. The joint space of the robot can be considered as an inverse image of the
Cartesian space and vice versa. Similarly, the forward kinematics can be assumed to be an inverse image of inverse kinematics and vice versa ( Zhang et al., 2005 ). Based on this, it is decided to employ forward kinematics relations for determining the pose of end-effector, i.e. P  X  { X , Y , Z , Roll, Pitch, Yaw} corresponding to
Q  X  { y and the corresponding joint angle Q as the output for the neural network training data. In other words, Q -P relationship is used while generating the data whereas P -Q mapping is done while training the neural network. ANN trained with such data set is found to predict IK solutions more accurately due to insignificant mapping errors between input and output data ( Chiddarwar and Ramesh Babu, 2008 ).

For the present work, pose in the workspace of KUKA-Kr robot corresponding to a set of joint angles is determined from forward kinematics relations of the robot. From the entire workspace of the KUKA-Kr robot, 70 different poses of end-effector are selected for building the neural network. The selection is done in such a way that these poses randomly cover the entire work space so as to obtain IK solutions for any path of the robot. Moreover, these selected poses are ensured to be collision free, singularity free and fulfill all kinematic constraints imposed by the robot joints.
The position, orientation and joint angles at these 70 poses are already determined by forward kinematics relations. Therefore, the derived database contains set of 70 poses, i.e. P  X  ( P
P , y , P 70 ) and corresponding joint angles Q  X  ( Q 1 , Q 2 , Q
The neural network used for fusion process demands for training dPitch, dYaw} and output as {d y 1 ,d y 2 ,d y 3 ,d y 4 ,d y incremental changes in pose and joint angles are determined by finding the difference between these values for successive poses.
For example, consider the poses P 1 and P 2 as the first and second pose in the data set. The position and orientation of pose P
Y , Z , Roll 1 , Pitch 1 , Yaw 1 } and corresponding set of joint angles
Q
P  X  { X 2 , Y 2 , Z 2 , Roll 2 , Pitch 2 , Yaw 2 } and Q 2  X  { y y , y 62 } as corresponding set of joint angles. The incremental change in pose for P 1 , i.e. {d X 1 ,d Y 1 ,d Z 1 , dRoll dYaw 1 }  X  { X 1 , Y 1 , Z 1 , Roll 1 , Pitch 1 , Yaw 1 } { X 2
Yaw } and corresponding change in joint angles {d y 11 ,d y 21 d y y , y 62 }. Therefore, one training pattern thus obtained consists of input as { X 1 , Y 1 , Z 1 , Roll 1 , Pitch 1 , Yaw 1 ,d X dPitch 1 , dYaw 1 } and output as {d y 11 ,d y 21 ,d y 31
This procedure was repeated for obtaining cardinal incremental changes for P 1 by considering each of remaining 69 poses as successive pose. On the same lines, the data set consisting of pose, incremental change in pose and corresponding incremental joint angle was determined for remaining 69 poses. The training data thus obtained consists of 4890 patterns. The training of RBF as well as MLP ANN for prediction of incremental joint angles was done by using 70% of total data set. The remaining 30% of data set was used for testing the performance of ANN. Validation of network was done by obtaining inverse kinematics solutions at requisite poses along the path considered for study. 3. Conventional methods for determination of IK solutions
RBF and MLP neural network architecture predicts only absolute joint angles for any requisite pose of the end-effector ( Zhang et al., 2005 ). In order to assess the accuracy of prediction of inverse kinematics solutions with the proposed fusion approach, the joint angles are also determined by using conven-tional architecture of RBF and MLP neural networks. IK solutions are also obtained by implementing a well known iterative technique ( Jazar, 2007 ). The results obtained from this iterative technique are used to analyse the accuracy of inverse kinematics solutions predicted by the proposed fusion process and the conventional architecture of neural network. 3.1. Conventional RBF and MLP ANN for prediction of IK solutions
Figs. 7 and 8 presents the conventional RBF and MLP architecture used for prediction of inverse kinematics solutions. The working principle of both the neural networks is the same as explained earlier. In case of this particular architecture, the ws components or inputs to network are { X , Y , Z , Roll, Pitch, Yaw} ( N  X  6) and outputs of the network are { y 1 , y 2 , y 3 network has 6 neurons in input layer, 68 neurons in hidden layer and 6 neurons in output layer. The parameters used for training RBF and MLP neural networks are the same as that used for prediction of incremental joint angles.

Based on the assumption that forward kinematics can be assumed as an inverse image of inverse kinematics and vice versa ( Zhang et al., 2005 ), forward kinematics relations are used iteratively to determine the pose of end-effector, i.e. P  X  { X , Y , Z , Roll, Pitch, Yaw} corresponding to Q  X  { y 1 , y 2 , y 3 , y training data set is determined for locations over entire work volume of the robot which are within kinematic limits of the robot joints and do not show any singularity.

Hence, the pose P forms the input and corresponding joint angle Q forms the output of the neural network. In order to maintain uniformity in training of ANN, a simulation data set thus obtained for training and testing of this network also consists of 4890 patterns. In this case also, 70% of total data set was used for training and remaining 30% of data was used for testing of the network. 3.2. IK solution using iterative method
Iterative algorithm given by Jazar (2007) is most commonly used for determination of IK solutions. Since this iterative technique gives accurate results, the IK solution at the pose of end-effector thus obtained is considered as the desired solution for that particular pose. The iterative algorithm utilized for this purpose follows the strategy given below: 1. Set the initial counter i  X  0. 2. Find or guess an initial estimate q (0) . 3. Calculate the residue d T ( q ( i ) )  X  J ( q ( i ) ) d q is the desired solution. 6. Set i  X  i +1 and return to step 3.

The tolerance can be set on variables q ( i +1) q ( i ) o e Jacobian J I o e . The effectiveness of this method depends upon the guess value or initial value of joint angles. In this work, guess
MATLAB ( Corke, 1996 ). The feasibility of solution is determined by substituting the obtained theta values in the forward kinematic solution. The results obtained from the proposed ANN based approaches are compared with the desired values to compute the error in the predicted solution. 4. Results and discussion
The proposed fusion approach which makes use of RBF ANN for prediction of IK solutions was implemented to obtain the IK solutions for five poses of the path shown in Fig. 3 . The predicted set of joint angles for each pose of the end-effector is presented in Table 2 . In the same table, the inverse kinematics solutions obtained with iterative technique, conventional RBF and MLP ANN are also presented. The IK solution obtained with iterative technique is considered to be accurate. Hence, the same is considered as the basis for comparison of results. From the results presented in Table 2 , it is clear that the IK solution obtained with
RBF ANN fusion process is found to be superior to the solutions obtained with other approaches. RBF ANN fusion process shows average percentage error of 0.56 in prediction of IK solutions whereas MLP ANN fusion process predicts IK solutions with 0.72% error. The conventional RBF and MLP ANN show average error of 1.97%and 2.36%, respectively, in the prediction of IK solutions.
Moreover, the results obtained with the proposed approach are closer to the desired solution, found with iterative technique.
In order to obtain the better idea of performance of various configurations of neural networks, the effective errors, i.e. root mean square (RMS) errors associated with all joint angles are obtained and presented in Table 3 . The RMS error is determined for the testing data and the results are shown in Fig. 9 .
From the RMS error values given in Table 3 and Fig. 9 , it can be seen that the RMS error with RBF ANN used for fusion process is the lowest, falling in the range of 0.02 X 0.11 1 in contrast to the errors observed with MLP used for fusion process as 0.66 X 1.1
RBF for absolute joint angles with 0.11 X 0.34 1 , and MLP for absolute joint angle with an error of 1.32 X 1.95 1 . Large errors noticed with MLP networks can be attributed to the premature termination of network training process (approximately after training for 26 h). However, RBF network training was continued until the convergence condition is reached. On the contrary, MLP showed better performance when used with the proposed fusion process. The fusion approach shows accuracy in prediction of joint angle as neural networks used in the approach are trained to predict incremental joint angles. The computation of incremental angles also helps to avoid the trapping of solution at local minima and minimizes the mapping error in IK solutions.

Table 4 shows the overall CPU time taken by each configuration for training, testing of neural network and prediction of IK solutions for the five poses of the path shown in Fig. 3 . For computation purpose, a Pentium 4 system with 256
MB RAM and 2.4 GHz processor was used. From these results, it can be noticed that RBF network took nearly 190 min in contrast to 1400 min (approx.) taken by MPL network. The reason behind faster convergence of RBF ANN may be its working principle. RBF
ANN iteratively adds one neuron at a time to the network until the sum squared error falls below a specified error goal or a maximum number of neuron is reached. The overall CPU time required for training, testing and validation of neural networks with fusion process is slightly more than the time taken for forming the neural networks to predict absolute joint angles. This additional time is consumed for computing intermediate poses using forward kinematics in the proposed approach.

Form the results presented in Table 4 , it can be noticed that the time consumed by iterative technique is much larger and is about 450 min to compute the inverse kinematics solutions of five poses along the path shown in Fig. 3 . Out of this time, 60% of the total CPU time is seen to be taken for determining the initial feasible solution. Unlike iterative technique that requires initial feasible solution for determining the IK solution, neural network in the proposed approach captures the robot kinematics and gives out the IK solution quickly for any other path determined by the path planner. Hence, the proposed approach can become a viable option for real time path planning and precise control of robot. 5. Conclusions
The proposed ANN based fusion approach combined the neural network with forward kinematics relations to address the inverse kinematics problem of robots. Unlike the traditional neural network approaches that provide absolute joint angles as an output, the ANN in the proposed approach generates incremental joint angles and minimizes the deviations by utilizing the forward kinematics relations. Another important feature of the proposed approach is to generate the data for training the ANN with forward kinematics relations of robot. The nature of date used for training of neural network and the computation of joint angles in incremental fashion has not only made the determination of IK solutions very easy but also more precise. This approach can be used for prediction of inverse kinematics solutions for any type of robot irrespective of its geometry and number of degrees of freedom associated with it.
 References
