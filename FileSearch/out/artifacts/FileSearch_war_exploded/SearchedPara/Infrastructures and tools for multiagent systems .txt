 Nowadays, technological evolution in the areas of Computer
Technology and Communications (Internet, WWW, e-commerce, wireless connectivity, virtual worlds, etc.) has made Information
Technology research and development focus on solving chal-lenges in order to develop distributed applications. Distributed systems are increasingly viewed as collections of service-provider and service-consumer components that are interlinked by dyna-mically defined workflows.
 However, the biggest impact of this focus has been on the way applications are thought of and developed. Current applications require built-in components to which more and more complex tasks can be delegated. These components show higher levels of intelligence, are capable of sophisticated ways of interacting since they are massively distributed, and are quite often embedded in all sorts of appliances and sensors. These autonomous compo-nents are usually referenced to as agents in order to emphasize their capability to represent human interests, and to be autono-mous and socially aware.
 This technological evolution of the new generation of distrib-uted systems has given rise to new computation paradigms such as: peer-to-peer technologies, grid computing, autonomic computing, computation as interaction.

With these new paradigms, it is becoming increasingly natural to view large systems in terms of the services that they offer and, consequently, in terms of the entities or agents that provide or consume services. In a vast amount of the literature, multiagent systems have been selected as a proper paradigm for complex distributed systems. In this new paradigm, computation is some-thing that occurs by means of and through communication among computational entities. Instead of being a solitary activity, computation becomes an inherently social one, leading to new ways of conceiving, designing, developing, and handling compu-tational systems ( Sierra et al., 2011 ).

An example of the influence of this point of view is the emerging model of software as a service, as in the service-oriented architectures. In this model, applications are no longer monolithic, single-user applications or distributed applications managed by only one organization. Instead, they are societies of computational entities (components) that can be considered as service providers; they may enter or abandon different societies at different times and for different reasons; and they may form coalitions or virtual organizations among themselves to attain their current goals. Services should be provided by concrete entities or agents that send and receive messages, whereas the services themselves are the resources characterized by the func-tionality that is provided.

Interconnection and distribution, coupled with the need for
These emerging domains and environments are open and
Autonomy, interaction, and mobility as key features. They have to cope with the (high) dynamism of the system topology and with semantic mismatches in the interaction. These are both natural consequences of the distributed and autonomous nature of the components.

Security mechanisms and trust measures that complement the classical cryptographic methods. Trust measures are essential in open environments where interactions have to be made under uncertainty of the environment state.

Techniques that enable software components to reach agree-ments on the mutual performance of services.

Negotiation, argumentation, decision-making, knowledge modeling, virtual organizations and learning. These will be the sandbox techniques used to build this next generation of software systems.

Software engineering methodologies that deal with the issues raised in these new application scenarios ( Giret et al., 2005 ; Botti et al., 2008 ).

When developing applications based on the new generation
In order for multiagent systems to be included in the real
We need new infrastructures and tools to provide support for
Identity Management in Multiagent Systems, Secure Infrastruc-tures and Tools for Multiagent Systems, Infrastructures and tools that support Social and Organizational Models, Infrastructures and tools that support Trust and Reputation Models, Infrastruc-tures for agent-based Service-Oriented Systems, Industry imple-mentations of multiagent systems, etc.

Among the many different topics of interest, in this special issue,  X  X  X nfrastructures and Tools for Multiagent Systems for the new generation of Distributed Systems X  X , we focus on the following:
Social simulation. This is a research field that applies compu-tational methods to study issues in the social sciences.
The challenges explored include problems in sociology, poli-tical science, economics, anthropology, geography, archeology and linguistics ( Takahashi et al., 2007 ). Two works in the social simulation area are presented in this special issue. Caballero et al. (this issue) present a proposal for supporting cognitive behavior of certain agents in wide social agent simulations.
They propose using Jason to provide cognitive capabilities to a reduced number of agents, running on a wide social simulation that is supported by MASON. Marik and Pechoucek (2004) refer to the knowledge necessary to give support to all these social abstractions as social knowledge. They also point out that it plays an important role in increasing the efficiency in highly decentralized multiagent systems. On the same topic, Burdalo et al. (this issue) present TRAMMAS, an abstract model of an event-tracing system for multiagent systems. Unlike most traditional tracing systems, the model here is not only con-ceived as a helping tool for multiagent system developers or administrators, but also as an additional indirect communica-tion mechanism that allows agents and other entities in the system to generate trace events, as well as to receive events generated by other entities.

Multiagent simulation. Developing tools for multiagent simu-lations have always been an active area of research, with emphasis being placed on different aspects  X  architecture, scalability, efficiency, fault-tolerance, and effectiveness of the system. A number of frameworks have been developed such as Netlogo ( Seth Tisue, 2004 ), JADE ( Bellifemine et al., 1999 ), ZASE ( Yamamoto et al., 2007 ), DMASF ( Rao et al., 2007 ), MASON ( Luke et al., 2005 ), and Repast ( North et al., 2007 ).
In this area, Sethia et al. (this issue) present a framework for agent simulation environment that is built on Hadoop cloud.
Hadoop is a novel framework that runs applications that involve thousands of nodes and petabytes of data. It allows a developer to focus on agent models and their optimization without getting involved in fault-tolerance issues. Extensibility of the hardware on which the framework is running is made easy by Hadoop. This is done by allowing the dynamic addition of new nodes and by allowing heterogeneity among the operating systems on which the different nodes are running.
Therefore, it provides a strong backbone for implementing a large-scale, agent-based simulation framework.

Security. Security-related studies in the multiagent systems (MAS) research field have been increasing over the last few years, as have intelligent autonomous agents and MAS-based applications ( Such et al., in press ). An understanding of the actual risk is needed when using these sorts of applications, since an agent X  X  incorrect or inappropriate behavior may cause undesired effects such as money loss and data loss. For this topic, Such et al. (this issue) propose formalized definitions of partial identities and their relationship to trust and reputation. Partial identities are a key concept for identifying entities.
They also play a crucial role in trust and reputation, by modeling part of the context where trust and reputation take place. In this sense, both trust and reputation are established through partial identities.
 Models of trust ( Sierra and Debenham, 2006 ), reputation ( Sierra and Debenham, 2009 ), and argumentation ( Amgoud and Prade, 2009 ; Alsinet et al., 2008 ) to improve negotiating strategies ( Faratin et al., 1998 ; Kraus, 1997 ; Hindriks et al., 2008 ). Research progress in the development of these theore-tical models has made them very sophisticated and has enabled software agents to interact with and help humans in a more efficient and believable way. For this topic, Fabregues et al. (this issue) present a testbed that provides an environ-ment where very expressive illocutions can be exchanged among a small set of agents. Agents compete with the aim of getting more power; however, power is obtained by coopera-tion. To be able to increase your power, you have to convince others to help you. Thus, agents repeatedly negotiate to convince others to accept a plan of action where both coop-erate and split the benefit. Being friendly, persuasive, loyal, and trustworthy are some of the skills that can be tested with this testbed.
 Industry implementations of multiagent systems and wireless sensor networks (WSNs) are currently emerging as one of the most innovative technologies, enabling and supporting the next generation of ubiquitous and pervasive computing scenarios ( Sohraby et al., 2007 ). WSNs are capable of support-ing a broad array of high-impact applications in several domains such as disaster/crime prevention, military, environ-ment, logistics, health care, and building/home automation. Programming WBSN applications is a complex task, it requires suitable programming paradigms and frameworks that can handle the specific characteristics of WBSN. Several kinds of frameworks and approaches have been proposed to date, and the multiagent system approach is one of the more promising. For this topic, Aiello et al. (this issue) present an agent-oriented approach that relies on the basic features that characterize domain-specific frameworks, as well as on the MAPS framework. This offers more programming effectiveness while providing the required efficiency. By using MAPS, a WBSN application has been structured as a set of agents that are distributed on sensor nodes supported by a component-based agent execution engine that provides basic services such as message transmission, agent creation, timer handling, easy access to the sensor node resources, and agent migration (if needed).
 References
