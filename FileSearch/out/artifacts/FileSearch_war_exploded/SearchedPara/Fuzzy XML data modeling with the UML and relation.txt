 1. Introduction
With the wide utilization of the Web and the availability of huge amounts of electronic data, information representation and exchange over the Web becomes important, and XML has been the de facto standard [7] .
XML and related standards are technologies that allow the easy development of applications that exchange data over the Web such as e-commerce (EC) and supply chain management (SCM). This creates a new set of data management requirements involving XML, such as the need to store and query XML documents. the XML document [10,16 X 19,38,45] . Among these kinds of databases, relational databases might be the more promising alternative because of the widespread use and mature techniques [13] . Moreover, XML lacks necessary to use other methods to describe data paradigms and develop a true conceptual data model, and then transform this model into an XML encoded format, which can be treated as a logical model. Conceptual data modeling of XML document schema [11,35,27,48,14] and XML schema [2,37] have been studied in the recent past. In [11] , for example, UML was used for designing XML DTD (document type definition). The idea is to use essential parts of the static UML to model the XML DTD. The mapping between the static part of the UML (i.e., class diagrams) and the XML DTDs was developed. To take advantage of all facets that DTD concepts offer, the authors further extended the UML language in an UML-compliant way.
In real-world applications, however, information is often vague or ambiguous. Therefore, different kinds of ness, uncertainty, and ambiguity are five basic kinds of imperfect information in database systems [6] . resented more than once in a database or in several different databases. For example, the age of George is stored as 34 and 37 simultaneously. Information inconsistency usually comes from information integration [12] .  X  Of course, imprecision and vagueness are relevant to the content of an attribute value, meaning that a choice must be made from a given range (interval or set) of values without knowing which one to choose.
In general, vague information is represented by linguistic values. For example, the age of Michael is a set vague information.
Chris is 35 right now should be 98%. The random uncertainty, described using probability theory, is not considered in the paper.  X  The ambiguity means that some elements of the model lack complete semantics, leading to several possible interpretations.

For example, the age of Michael is a set {18,19,20,21} and their possibilities are 70%, 95%, 98%, and 85%, uncertainty are the major groups. Imprecision and inconsistency are essential properties of the information itself, whereas uncertainty is a property of the relation between the information and our knowledge about by Zadeh [52] have been widely used for the quantification of imprecision and uncertainty.
Fuzzy information has been extensively investigated in the context of the relational model [8,34,36] .In order to model uncertain data and complex-valued attributes as well as complex relationships among objects,
Web-based business intelligence. Unfortunately, although it is the current standard for data representation and exchange over the Web, XML is not able to represent and process imprecise and uncertain data, although the databases with imprecise and uncertain information have been extensively discussed. Currently, little research has been done in modeling and querying imperfect XML data. Only XML with incomplete informa-tion [1] and probabilistic data in XML [30,47] has been proposed in research papers. More recently, Lee and
Fanjiang [20] developed a fuzzy OO modeling technique schema based on XML to model requirement spec-ifications and incorporate the notion of stereotype to facilitate the modeling of imprecise requirements.
In this paper, we identify multiple granularity of data fuzziness in XML. Based on possibility distribution theory, we developed a fuzzy XML data model that addresses all types of fuzziness. Also, we developed a fuzzy UML data model to design the fuzzy XML data model conceptually. In particular, we investigated the formal conversions from the fuzzy UML model to the fuzzy XML model, and the formal mapping from the fuzzy XML model to the fuzzy relational databases. Regarding the practical issues of fuzzy UML, the UML in this paper does not aim to provide an  X  X  X fficial X  X  extension to the UML.

The remainder of this paper is organized as follows: Section 2 gives basic knowledge concerning fuzzy rela-in an XML document, and a fuzzy representation model for fuzzy data in XML is thereby proposed. The fuzzy extension to the UML class model and conceptual design of the fuzzy XML with the fuzzy UML are in Section 5 . Section 6 concludes this paper. 2. Fuzzy sets and the fuzzy relational databases
The fuzzy set was originally introduced by Zadeh in 1965 [52] . Let U be a universe of discourse and F be a fuzzy set in U . A membership function l F : U ! [0,1] is defined for F , where l membership degree of u in the fuzzy set F . Thus, the fuzzy set F is described as follows: when U is not a discrete set, the fuzzy set F can be represented by Note that, in this paper, l F is used to represent the membership function of fuzzy set F ,and l sets.
 approach, where X takes values in U , a fuzzy value is described by a possibility distribution p
Here, p X ( u i ), u i 2 U denotes the possibility that u possibility distribution relates with the possibility of occurring a value within a distribution. Let p It is clear that p X = F is true [36] .
 ular , mod-popular }.

A similarity relation Sim on the universe of discourse U is a mapping: U  X  U ! [0,1] so that (a) for 8 x 2 U , Sim  X  x ; x  X  X  1 (reflexivity) (b) for 8 x ; y 2 U ; Sim  X  x ; y  X  X  Sim i  X  y ; x  X  , and (symmetry) (c) for 8 x ; y ; z 2 U , Sim  X  x ; z  X  P max y  X  min  X  Sim  X  x ; y  X  ; Sim  X  y ; z  X  X  X  . (transitivity) relation, the resemblance relation, for example, only holds the properties of reflexivity and symmetry.
Fuzzy set and possibility distribution theories have been used to extend various database models and this form of it. A relation instance r on a relational schema R ( A
Dom( A 1 )  X  Dom( A 2 )  X   X  Dom( A n ), in which Dom( A i tuples associated with possibilities and attribute values represented by possibility distributions. respectively, as follows:
Here p i Dom( A i ) with Dom( A i ) being the domain of attribute A (or proximity and resemblance) relation.
Here a i 2 Dom A i , d 2 X  0 ; 1 , p A p  X  x  X  ; x 2 Dom  X  A i  X  , denotes the possibility that x is the actual value of t [ A
Consider the three fuzzy relations r 1 , r 2 and r 3 in Fig. 1 .In r fuzzy values represented by the similarity relation given in Table 1 . Relation r crisp. Relation r 2 is based on the fuzzy relational model of type 2. In r bility degree but the values of attribute Age of the tuples are all fuzzy. Relation r tional model of type 3.

Based on the above-mentioned basic fuzzy relational database models, there are several extended fuzzy relational databases where attribute values may be possibility distributions, and tuples are connected with bility distribution and resemblance relation arise in a relational database simultaneously.
This paper focuses on the fuzzy relational databases where n -tuples have the following form: follows:
Definition. A fuzzy relation r on a relational schema R ( A product of Dom( A 1 )  X  Dom( A 2 )  X   X  Dom( A n )  X  Dom( A subset or even a set of fuzzy subset and Dom( A n +1 ) is (0,1].

It should be pointed out, however, that although several fuzzy relational database models are proposed in abases only have two kinds, namely, the fuzziness in attribute values and the fuzziness in tuples. 3. The fuzzy XML model
XML document is developed. Here, we focus on XML DTD and develop the extended XML DTD for the fuzzy XML document. 3.1. The fuzziness in the XML document
Two kinds of fuzziness can be found in a relational model: one is to associate membership degrees with value being true.

XML data are structured, and XML can represent imprecise and uncertain information naturally. In the case of XML, we may have membership degrees associated with elements. It is also possible to associate pos-We modify the schema in XML to make any attribute into a sub-element.

Now let us interpret what a membership degree associated with an element means, given that the element can source XML document is assigned conditioned on the fact that the parent element exists certainly. In other be available in the source XML document. By default, relative possibilities are therefore regarded as 1.0.
Consider a chain A ! B ! C from the root node A . Assume that the source XML document contains the Then we have Here, Poss ( C j B ), Poss ( B j A ), and Poss ( A ) can be obtained from the source XML document. addresses available simultaneously. In case we do not have complete knowledge of the e-mail address for  X  X  X om Smith X  X , we may say that the e-mail address may be  X  X  TSmith@yahoo.com  X  X  with possibility 0.60, and fuzzy conjunctive data.

In summary, we have two kinds of fuzziness in an XML document:  X  the first is the fuzziness in elements, and we use membership degrees associated with such elements; such values.
 ancestor X  X escendant chain.
 Fig. 2 gives a fragment of an XML document with fuzzy information.

USA. Wayne State University is located in downtown Detroit, and the possibility that it is included in the universities in Detroit is 1. Oakland University, however, is located in a nearby county of Michigan, named
Oakland. Whether Oakland University is included in the universities in Detroit depends on how to define the area of Detroit, the Greater Detroit Area or only The City of Detroit. Assume that it is unknown and the employee, Frank Yager, at Oakland University is under the stage of promotion and his position may be asso-
Tom Smith, he has fuzzy values in the attributes age and email, which are represented by a disjunctive pos-sibility distribution and conjunctive possibility distribution, respectively. 3.2. The representation model 3.2.1. Representation of fuzzy data in the XML document Val to specify the possibility of a given element existing in the XML document.
 &lt; /Val &gt; is omitted from the XML document.
 construct should indicate the type of a possibility distribution being disjunctive or conjunctive. dant chain. In fact, we can also have possibility distributions and values over non-leaf nodes. Observe the disjunctive Dist construct in Lines 6 X 19, which express the two possible statuses for the employee with ID 0.6. 3.2.2. DTD modification
It has been shown that the XML document must be extended for fuzzy data modeling. As a result, several fuzzy constructs have been introduced. In order to accommodate these fuzzy constructs, it is clear that the
DTD of the source XML document should be correspondingly modified. In this section, we focus on DTD modification for fuzzy XML data modeling.
First we define Val element as follows: &lt; !ELEMENT Val (#PCDATA j original-definition) &gt;
Then we define Dist element as follows: &lt; !ELEMENT Dist (Val+) &gt;
Now we modify the element definition in the classical DTD so that all of the elements can use possibility in the DTD is changed from &lt; !ELEMENT leafElement (#PCDATA) &gt;to defined as &lt; !ELEMENT leafElement (#PCDATA) &gt;.

Also, it is possible that leaf element leafElement may be a fuzzy one, taking a value represented by a pos-sibility distribution (e.g., age of student in Fig. 2 ). Then it may be defined as &lt; !ELEMENT leafElement (Dist) &gt;.

Furthermore, we have the following definition. &lt; !ELEMENT Dist (Val+) &gt; &lt; !ELEMENT Val (#PCDATA) &gt;
For the non-leaf element, say nonleafElement , first we should change the element definition from &lt; !ELEMENT nonleafElement (original-definition) &gt;to and then add &lt; !ELEMENT Val (original-definition) &gt;.
 as &lt; !ELEMENT nonleafElement (original-definition) &gt;.

When the non-leaf element nonleafElement is a fuzzy one, we differentiate two situations: the element takes defined as follows: &lt; !ELEMENT nonleafElement (Val+) &gt; &lt; !ELEMENT Val (original-definition) &gt;
The latter element is defined as &lt; !ELEMENT nonleafElement (Dist) &gt; &lt; !ELEMENT Dist (Val+) &gt; &lt; !ELEMENT Val (original-definition) &gt;
Then the DTD of the XML document in Fig. 2 is shown in Fig. 3 . 4. Conceptual design of the fuzzy XML DTD with the fuzzy UML data model
This section presents the issues on how to conceptually design the fuzzy XML DTD with the UML class diagram. To this purpose, we should first extend the classical UML data model for fuzzy data modeling. 4.1. The fuzzy UML data model UML provides a collection of models to capture the many aspects of a software system [5,29,31] .
Note that while the UML reflects some of the best OO modeling experiences available, it suffers from deficiency of some necessary semantics. One of the deficiencies can be generalized as the need to handle imprecise and uncertain information although such information exists in knowledge engineering and databases and has extensively been studied [32] . In the following, we propose the fuzzy UML data model. 4.1.1. Fuzzy class
The objects having the same properties are gathered into classes that are organized into hierarchies. The-oretically, a class can be considered from two different viewpoints: (b) an intensional class, where the class is defined by a set of attributes and their admissible values. object is fuzzy because of a lack of information. For example, an object representing a part in preliminary (a) A class is extensionally defined, where some objects with similar properties are fuzzy ones. Then the (c) The subclass produced by a fuzzy class by means of specialization, and the super-class produced by some ses. These three levels of fuzziness are defined as follows: (b) The second level is related to the fuzzy occurrences of objects. (c) The third level concerns the fuzzy values of attributes of special objects.
 name should be followed by a pair of words WITH mem DEGREE, where 0 6 mem 6 1 is a scalar and used to universities. This data model contains some classes, and the class  X  X  X mployee X  X  may or may not need to be  X  X  X ell Phone X  X  may or may not need to be included in the class. Assume we have  X  X  X mployee WITH 0.8
DEGREE  X  X  and  X  X  X ell Phone WITH 0.6 DEGREE  X  X , which mean the class and attribute with the first level 1. Also note that attribute values may be fuzzy. In order to model the third level of fuzziness, a keyword attribute is introduced into the class to represent object membership degree to the class, which attribute the second level of fuzziness, we use a dashed-outline rectangle to denote such a class.
Generally, students may or may not have their own offices. So when class Student is designed, it is unknown attribute l is introduced into the class.
 4.1.2. Fuzzy generalization superclass, overriding some attributes and methods of the superclass, and defining some new attributes and relationship.

However, a class produced from a fuzzy class must be fuzzy. If the former is still called subclass and the class with membership degree of [0,1] at this moment. We have the following criteria to determine the fuzzy subclass/superclass relationship. (a) For any (fuzzy) object, say e , let the membership degree that it belongs to the subclass, say B ,be l (b) Assume that a threshold, say b , is given. Then l B ( e ) P b . Here B , e , and l
The subclass B is then a subclass of the superclass A with a membership degree. This membership degree is the minimum of the membership degrees to which these objects belong to the subclass. Here the given threshold is used for a computational threshold to avoid propagating infinitesimal degrees (the same in the rest of this paper). Formally, we have the following definition for the fuzzy subclass X  X uperclass relationship.
 Definition. Let A and B be two (fuzzy) classes with object membership functions l be a given threshold. We say B is a subclass of A if
The membership degree that B is a subclass of A should be min of A and B in the universe of discourse, and l A ( e ) and l respectively.

It should be noted, however, that in the above-mentioned fuzzy generalization relationship, we assume that membership degree denoted by scalar, namely, with the first level of fuzziness.

Definition. Let two classes A and B be A WITH degree _ A DEGREE and B WITH degree _ B DEGREE. Here, degree _ A and degree _ B are the scalars of membership degree. Let l functions of A and B , respectively. Then B is a subclass of A if objects to A and B must be greater than or equal to the given threshold, and the membership degree of any object to A must be greater than or equal to the membership degree of this object to B , the membership de-greater than or equal to the membership degree of B .

Consider a fuzzy superclass A and its fuzzy subclasses B 1 l degree _ A , degree B 1 ; degree B 2 , ... , and degree B the relationships between fuzzy subclass and superclass. The basic idea is that, since any object belonging to the subclass should belong to the superclass, the common attribute domains of the superclass should in-clude the common attribute domains of the subclass.
 a given threshold b , we say B is a subclass of A if of attributes.

To figure out or estimate the inclusion degree of two classes, one needs to know the (fuzzy) attribute domains of the two classes and the weight of the attributes. The problem of evaluating the inclusion degree respect to the superclass are discussed in detail.

Now let us consider the situation that classes A or B are the classes with scalars of membership degree, namely, with the first level of fuzziness.

Definition. Let two classes A and B be A WITH degree _ A DEGREE and B WITH degree _ B DEGREE. Here, degree _ A and degree _ B are the scalars of membership degree. Then B is a subclass of A if must be greater than or equal to the given threshold, and the scalar of the membership degree of A must be greater than or equal to the scalar of the membership degree of B .
 more than one of the superclasses have common attributes, and the subclass does not explicitly declare the not being the same as the situation in classical object-oriented databases [25] . ond level of fuzziness. That means that the classes may have some objects which belong to the classes with membership degree. These two classes can be generalized into class Youth , a class with the second level of fuzziness. 4.1.3. Fuzzy aggregation
An aggregation captures a whole-part relationship between a class named aggregate and a group of classes jected into a set of objects of constituent parts. Formally, let A be an aggregation of constituent parts
B , B 2 , ... , and B n . For e 2 A , the projection of e to B aggregation is fuzzy. At this point, a class is an aggregation of constituent parts with membership degree of [0,1]. We have the following criteria to determine the fuzzy aggregation relationship: (a) For any (fuzzy) object, say e , let the membership degree that it belongs to the aggregate, say A ,be l (b) Assume that a threshold, say b , is given. Then l A ( e ) P b . Here, A , e , and l Then A is the aggregate of B 1 ; B 2 ; ... ,and B n , with the membership degree min  X  l ... ; l Bn  X  e # Bn  X  X  . It is clear that l A ( e ) cannot have a bigger value than any l l l relationship.

Definition. Let A be a fuzzy aggregation of fuzzy class sets B functions are l A , l B 1 ; l B 2 ; ... , and l Bn , respectively. Let b be a given threshold. Then
That means a fuzzy class A is the aggregate of a of group fuzzy classes B of the member degree to which its projection to any of B 1
B greater than or equal to the given threshold.

Now let us consider the first level of fuzziness in the above-mentioned classes A , B they are the fuzzy classes with membership degrees.

Definition. Let A WITH degree _ A DEGREE, B 1 WITH degree _ B
DEGREE, ... , B n WITH degree _ B n DEGREE be classes. Here degree _ A , degree _ B degree _ B n are the scalars of membership degree. Let l A functions of A , B 1 , B 2 , ... , and B n , respectively. Then A is an aggregate of B
Here b is a given threshold. tion relationship using the inclusion degree developed in [25] .

Definition. Let A be a fuzzy aggregation of fuzzy class sets B let the projection of A to B i be denoted by A # B i . Then Being the same as the fuzzy generation, here l ( B i , A #
B semantically includes A # Bi . The membership degree that A is an aggregation of B min  X  l  X  B 1 ; A # B 1  X  ; l  X  B 2 ; A # B 2  X  ; ... ; l  X  B
Furthermore, the expression above can be extended for the situation that A , B first level of fuzziness, namely, they may be the fuzzy classes with membership degrees.
Definition. Let b be a given threshold and A WITH degree _ A DEGREE, B WITH degree _ B 2 DEGREE, ... B n WITH degree _ B n DEGREE be classes. Then A is an aggregate of
B , B 2 , ... , and B n if
A dashed open diamond is used to denote a fuzzy aggregate relationship. A fuzzy aggregation relationship is and chassis and fuzzy class old engine is a fuzzy one with the second level of fuzziness. 4.1.4. Fuzzy association caused by such facts that  X  the class instances belong to the given classes with possibility degree, and bership degree between two connected instances (e.g., the degree of  X  X  X riendship X  X  of two people).
Also, it is possible that the two levels of fuzziness mentioned above may occur in association relationship given above. Therefore, the linguistic association is not discussed in the paper.
We can place a pair of words WITH mem DEGREE (0 6 mem 6 1) after the role name of an association arrowhead to denote the second level of fuzziness in the association relationship. fuzzy association relationship in (a) and (b) arise simultaneously.
 l A and l B , respectively. Then the object instance e of A is one with a scalar of membership degree l the object instance f of B is one with a scalar of membership degrees l membership degree, which can be calculated by l ( e ) = 1.0 and l B ( f ) = 1.0. Then iness, denoted A WITH degree _ A DEGREE and B WITH degree _ B DEGREE, respectively. Here degree _ A degree _ ass is a scalar and calculated by For the instance e of A and the instance f of B , in which l
DEGREE and B WITH degree _ B DEGREE, respectively. Let ass ( A , B ) be the association relationship with the first level of fuzziness between A and B, which is explicitly indicated with WITH degree _ ass DEGREE. instance e of A be one with a scalar of membership degree l a scalar of membership degree l B ( f ). Then we have 4.1.5. Fuzzy dependency
The dependency between the source class and the target class is only related to the classes themselves and the possibility degree of source class.
 Let Employee and Employee Dependent be two classes. It is clear that Employee Dependent is dependent on
Employee and there is a dependency relationship between them. But it is possible that Employee may have the has the first level of fuzziness with a 0.85 possibility degree. Thus, the dependency relationship between Employee and Employee Dependent is a fuzzy one with 0.85 degree of possibility.

Since the fuzziness of the dependency relationship is denoted implicitly by first level of fuzziness of the tionship. Fig. 8 shows a fuzzy dependency relationship.

Car is a superclass, and New Car and Old Car are its two fuzzy subclasses, namely, they may have fuzzy instances. Similarly, class Employee has three fuzzy subclasses: Young Employee , Middle Employee ,and Old
Employee . Classes Employee and Car have the fuzzy association relationship, using , which fuzziness is at classes and they have no fuzziness at the three levels. 4.2. Transformation of the fuzzy UML to the fuzzy XML model For our transformation approach, relevant constructs are the fuzzy extensions of those of UML X  X  Static and various kinds of fuzzy dependencies. We develop the transformation of these constructs into DTD fragments. 4.2.1. Transformation of classes
UML classes are transformed into XML element type declarations [11] . Here, the class names become the names of the element types and the attributes are transformed into element content description. It is noted that, in the UML, attribute names are mandatory, whereas the attribute types are optional. In contrast, an element content construction.

In the fuzzy UML model, four kinds of classes can be identified, which are (a) classes without any fuzziness at the three levels, (b) classes with fuzziness only at the third level, (c) classes with fuzziness at the second level, and (d) classes with fuzziness at the first level.

For the classes in case (a), they can be transformed following the approach developed in [11] . The trans-second levels of fuzziness into XML DTD.
 content description with content type #PCDATA . We should use &lt; !ELEMENT age (Dist) &gt; &lt; !ELEMENT Dist (Val+) &gt; &lt; !ELEMENT Val (#PCDATA) &gt; rather than use &lt; !ELEMENT age (#PCDATA) &gt;.

Similarly, we use &lt; !ELEMENT email (Dist) &gt; &lt; !ELEMENT Dist (Val+) &gt; &lt; !ELEMENT Val (#PCDATA) &gt; in place of &lt; !ELEMENT e-mail (#PCDATA) &gt;.
 that the class instances belong to the class with membership degrees. For such a class, when its class name becomes the name of the element type, the attributes cannot be transformed into element content description directly. We should use &lt; !ELEMENT employee (Dist) &gt; &lt; !ELEMENT Dist (Val+) &gt; &lt; !ELEMENT Val (fname?, position?, office?, course?) &gt; rather than directly use &lt; !ELEMENT employee (fname?, position?, office?, course?) &gt;
Fig. 10 depicts the details transforming classes  X  X  X tudent X  X  and  X  X  X mployee X  X  into the fuzzy XML. An aggre-stituent parts as the special attributes of the aggregate. Then we can transform the aggregations using the approach to the transformation of classes.
 4.2.2. Transformation of generalizations
The generalization in the UML defines a subclass/superclass relationship between classes: one class, called an additional ID attribute stated #REQUIRED , and each subelement must be augmented by a #REQUIRED and the attributes are transformed into element content description.

Now consider the fuzziness in the generalization in the fuzzy UML model. Assume that the superclass and ished according to the transformation of fuzzy classes developed above. Meanwhile, the created superelement and each subelement must be associated with ID #REQUIRED and IDREF #REQUIRED , respectively. Fig. 11 depicts the transformation of the fuzzy generalization. 4.2.3. Transformation of associations
Associations are relationships that describe connections among class instances. An association is a more general relationship than aggregation or generalization. So basically we can transform the associations in the UML using the approach to the transformation of generalizations given above. That is, first the class tion. Then each element transformed must be augmented by a #REQUIRED IDREF attribute [15] , which is an artificial one and from another class involved in the association.

Since, in the fuzzy UML data model, each class involved in an association may have fuzziness at the type/ depicts the transformation of the fuzzy association. 5. Transformation of the fuzzy XML to the fuzzy relational model This section presents the transformation of the fuzzy XML DTD to the fuzzy relational database model. Here we need a DTD tree created from the hierarchical XML DTD. The formal mapping from the fuzzy
DTD tree to the fuzzy relational schema is developed in this section. 5.1. DTD tree and mapping to the relational database schema
The hierarchical XML and the flat relational data models are not fully compliant so the transformation is not a straightforward task. Generally, a DTD tree can be created from the hierarchical XML DTD. Its nodes as many times as they appear in the DTD. The element nodes can be further classified into two kinds: leaf element nodes and nonleaf element nodes. So in the DTD tree, we have three kinds of nodes, which are attri-butes are associated with ID #REQUIRED or IDREF #REQUIRED in DTD. We call these attribute nodes key attribute nodes .

A DTD tree can be constructed when parsing the given DTD [40] . Fig. 13 shows a simple DTD tree example.

The created DTD tree is then mapped into the relational schema following the ensuing processing:
Note that there may be cycles in DTD and element declarations that are referenced from more than one table through the parent table X  X  primary key.

The DTD tree in Fig. 13 is mapped into the relational schemas shown in Fig. 14 . 5.2. Mapping the fuzzy XML model into the fuzzy relational database model
Generally speaking, the fuzzy XML DTD presented in Section 3 can be transformed into the fuzzy rela-tional database schema using a similar processing as given above under a classical environment. That is, we first construct a DTD tree through parsing the given fuzzy DTD, and then map the DTD tree into the from the classical DTD tree above because the fuzzy DTD contains new attribute and element types, which are relational database schema.

In the fuzzy DTD tree, in addition to (key) attribute nodes, leaf element nodes, and nonleaf element nodes, nonleaf element node as its parent node.

From this figure, we can also identify four kinds of Val element nodes as follows: (a) They do not have any child node except the Poss attribute nodes ( type-1 ). (b) They only have leaf element nodes as their child nodes except the Poss attribute nodes ( type-2 ). (c) They only have nonleaf element nodes as their child nodes except the Poss attribute nodes ( type-3 ).
In the following, we describe the transformation of the fuzzy DTD tree into the fuzzy relational database formation of the fuzzy DTD tree to the fuzzy relational model the Poss attribute nodes, Val element nodes, and Dist element nodes in the fuzzy DTD tree do not take part in composing the created relational schema process: (a) Take the root node of the given fuzzy DTD tree and create a relational table. Its attributes first come (c) For other nonleaf element nodes in the fuzzy DTD tree, apply the same processing given in (b) until all paper.
 bute  X  X  X ge X  X  is one that may take fuzzy values. 6. Conclusion
The wide utilization of the Web has resulted in the availability of huge amounts of electronic data. Infor-mation representation and exchange over the Web become important, and XML has been the de facto stan-dard. On one hand, this creates a new set of data management requirements involving XML, such as the need to store and query XML documents. On the other hand, fuzzy sets and possibility distributions have been database modeling is receiving increasing attention for intelligent data processing [23] .
In order to manage fuzzy data in XML, this paper investigated the fuzzy XML data modeling. Based on possibility distribution theory, we first identified multiple granularity of data fuzziness in UML and XML.
The fuzzy UML data model and fuzzy XML data model that address all types of fuzziness are developed. Fur-ther, we developed the formal conversions from the fuzzy UML model to the fuzzy XML model, and the for-mal mapping from the fuzzy XML model to the fuzzy relational databases. It should be noted that the fuzzy extension of XML in this paper only focuses on XML DTD because it has traditionally been the most com-mon method for describing the structure of XML instance documents. But XML DTD lacks enough expres-sive power to properly describe highly structured data, and XML Schema provides a much richer set of structures, types and constraints for describing data [4] . The issues on fuzzy XML data modeling based on XML Schema will be stated in a forthcoming paper.
 Acknowledgments
The authors thank the anonymous referees for their valuable comments and suggestions, which improved the technical content and the presentation of the paper. Many thanks are due to Lorna Tucci for reading our paper and offering editorial advice. Work is supported by the Program for New Century Excellent Talents in University (NCET-05-0288) and in part by the MOE Funds for Doctoral Programs (20050145024) and SRF for ROCS, MOE.

References
