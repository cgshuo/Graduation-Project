 and Roth, 2015; Shi et al., 2015; Koncel-Kedziorski et al., 2016). Advancement in this area has great potential to be used as automatic tutoring service for school students. However till date, all the ad-vances in this area are not easily accessible to the general population. I LLINOIS M ATH S OLVER ad-dresses this issue by providing a web based plat-form, where users can type in their math word prob-lem and get the answer. It also outputs the mathe-matical expression generating the answer, allowing students to understand how to solve the problem. Fig 1 shows a screenshot of the web interface of the I
All systems for math word problem solving are trained and evaluated on datasets created from tu-toring websites and textbooks. However the prob-lems from the aforementioned sources tend to have limited variety in problem types and vocabulary. Of-ten these systems are brittle, and make mistakes with slight variation of text. As a result, there is a need for an easy way to analyze the robustness of these systems, as well as extract a wider variety of math word problems not available from textbooks and tu-toring websites. I LLINOIS M ATH S OLVER solves both these purposes, providing users an easy way to test the robustness of the system, and a tool for crowd based data acquisition. We expect people to query with small edits to math word problem text, to make our system get the wrong answer. This al-lows for adverserial data acquisition, which can help identify intricacies of mathematical reasoning. val (  X  ) , which computes the numeric value of the mathematical expression represented by that non-terminal. The above rule states that whenever we see the word  X  X ivided X  between two expressions, we can parse them into a new expression. The value of the new expression will be obtained by dividing the first expression value with the second one. Overall, we have 26 such derivation rules, and we will be aug-menting it as we come across more varied number queries. We use CKY algorithm for parsing. The derivation rules naturally capture composition. In the above example, it will first parse {  X  X um, 7 , 5  X  } into an expression E , and next parse { 6 , divided, E } . 2.2 General Arithmetic Problem Solver The second component of our system is the arith-metic word problem solver developed in our previ-ous work (Roy and Roth, 2015). The solver tackles a general class of arithemetic word problems, and achieves state of the art results on several benchmark datasets of arithmetic word problems. 2.2.1 Technical Details
The solver decomposes an input arithmetic prob-lem into several decision problems, and learns pre-dictors for these decision problems. Finally the pre-dictions for the decomposed problems are combined to generate a binary expression tree for the solution mathematical expression. Fig 2 gives an example of an arithmetic word problem coupled with the binary expression tree of the solution.
For an expression E , let I ( E ) be the set of all quantities in P which are not used in expression E . Let T be an expression tree for E . We define Score( E ) of an expression E in terms of the above scoring functions and a scaling parameter w I follows: Score( E ) = w I where LCA ( q i , q j , T ) is the operation at the LCA node of q i and q j in the expression tree T .
Our search for solution expression tree is also constrained by legitimacy and background knowl-edge constraints, detailed below. 1. Positive Answer : Most arithmetic problems 2. Integral Answer : Problems with questions
Let C be the set of valid expressions that can be formed using the quantities in a problem P , and which satisfy the above constraints. The inference algorithm now becomes the following: 2.2.2 Evaluation
We evaluated our arithmetic word problem solver on three publicly available datasets  X  addition sub-traction problems from AI2 dataset (AI2) (Hosseini et al., 2014), single operation problems from Illi-nois dataset (IL)(Roy et al., 2015), and multi-step problems from commoncore dataset (CC)(Roy and Roth, 2015). We compare against systems which had achieved previously known best scores on these datasets, and show that our system achieves state of the art performance on all the above datasets. Table 1 shows the comparison. Finally, the models of the I
LLINOIS M ATH S OLVER are trained on the union of the aforementioned datasets. problems by semi-automatically generated parsing rules, and is similar to our CFG parsing approach for tackling number queries. Kushman et al. (2014) proposes a template based approach for solving al-gebra word problems and finally, our system pro-posed in Roy and Roth (2015) solves a general class of arithmetic word problems, and achieves state of the art results on multiple arithmetic word problem datasets. This is the solver we use for handling arith-metic problems in I LLINOIS M ATH S OLVER . We release I LLINOIS M ATH S OLVER , an online tool to automatically solve number queries and arithemtic word problems. It will help elementary school students to self-tutor. In addition, it will be a source of highly varied math queries, which might reveal difficulties of mathematical reasoning, and as-sist future advancement in the area.

There are various fronts on which we will be improving the system in future. Currently, the arithemetic solver assumes the final solution can be generated by combining the numbers mentioned in the text, and hence, cannot introduce new numbers for the solution. . For example,  X  X  eat 1 apple each day. How many apples will I eat in 1 week ? X  is currently not handled since it requires knowing that 1 week has 7 days. This will require leveraging a knowledge base to bring in the additional informa-tion. We will also try to handle algebra word prob-lems, which involve generating multiple equations with one or more variables, and then solving these equations to generate the answer.
