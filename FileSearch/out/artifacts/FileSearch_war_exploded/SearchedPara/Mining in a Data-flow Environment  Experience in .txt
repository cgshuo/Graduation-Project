 in order to minimize the time required in using the as part of the 1998 DARPA Intrusion Detection Evaluation 
In many business and engineering applications, raw data collected from fielded systems needs to be pro-cessed into various forms of structured and semantically-rich records before data analysis tasks can produce ac-curate, useful, and understandable results. Consider the problem of credit card fraud detection. Each credit card purchase transmits a stream of data containing the credit card number, amount, and the type of merchan-
Many data mining techniques consider only accuracy and/or complexity measures as evaluation criteria when extracting models from data. The problem of efficiency, i.e., the cost, in time and space, of model execution in real-time has not been adequately studied. 
To address these important and challenging problems adequately, one needs to have access to the  X  X ata-flow X  in its entirety. This is sometimes impossible because of legal or organizational constraints. Our research is in a somewhat different and advantageous context since, in applying data mining techniques to build network intrusion detection models [LSM98, LSM99], data is abundant nearly everywhere (all one needs is a computer on a network). 
In this paper, we focus our discussion on the auto-matic techniques of comparing frequent patterns mined from normal and intrusion data, and constructing ap-propriate features for building classification models. We report the results of the 1998 DARPA Intrusion Detec-tion Evaluation, which showed that the detection mod-els produced using our data mining programs performed better than or equivalent to the knowledge engineered intrusion detection systems. We also discuss techniques for deriving the low cost  X  X ecessary X  conditions of each learned rule, which are used to filter out  X  X nnecessary X  (i.e., wasteful) real-time rule checking. 
Our contributions to KDD are: new techniques for feature construction based on frequent patterns mined from the data with a  X  X inimum X  preprocessing; a simple yet useful pattern encoding and comparison technique to assist model construction; strategies for minimizing the cost of model execution in real-time; and most importantly, the demonstration (i.e., through objective evaluation) of the feasibility and advantage of applying these more systematic and semi-automatic data mining approaches to network intrusion detection, an important, challenging, and traditionally knowledge engineering application area. 
This rest of the paper is organized as follows. We first give a brief overview of the problem of network intrusion detection, and summarize the extentions we made to the basic association rules [AIS93] and frequent episodes [MTV95] algorithms, that are based on the characteristics of network audit data. We then discuss the feature construction steps, which include mining and comparing two sets of patterns to identify the  X  X ntrusion only X  frequent patterns, and parsing each such pattern to construct temporal and statistical features. We report the experiments of using our techniques on the DARPA data. We then describe how to utilize the associations between low cost features and the class labels as the  X  X ecessary X  conditions for rules to be checked in real-time execution. tensions to the basic association rules and frequent episodes algorithms that utilize the schema-level infor-mation about connection records in mining frequent patterns [LSM98, LSM99]. We briefly describe the main ideas here. 
Observe that a network connection can be uniquely identified by the combination of its time (start time), src-host (source host), src-port (source port), dst-host (destination host), and service (destination port), which are the  X  X ssential X  attributes of network data. We argue that  X  X elevant X  association rules should describe patterns related to the essential attributes. Depending on the objective of the data mining task, we can designate one (or several) essential attribute(s) as the uzis attribute(s) [LSM98], which is used as a form of item constraint in association rule mining. During candidate generation, an itemset must contain value(s) of the axis attribute(s). When axis attributes are used, the frequent episodes algorithm first finds the frequent associations about the axis attributes, and then computes the frequent sequential patterns from these associations. Thus, the associations among attributes and the sequential patterns among the records are combined into a single rule. 
Some essential attributes can be the references of other attributes. These reference attributes normally carry information about some  X  X ubject X , and other attributes describe the  X  X ctions X  that refer to the same  X  X ubject X . For example, if we want to study the sequential patterns of connections to the same destination host, then dst-host is the  X  X ubject X  and service is the action. When reference attribute [LSM99] is used, the frequent episodes algorithm ensures that, is an intrusion where the attacker typically makes connections to many ports (i.e., using many different services) of a host in a short period of time. A lot of such connections will be  X  X ejected X  since many ports are normally closed. Using d&amp;-host as both the axis and reference attribute produces very distinct intrusion patterns, for example, (flag = REJ, dst-host = hostA) --+ (f Zag = REJ, dst-host = hostA). But no intrusion pattern is found when using the service as the axis attribute and dst-host as the reference attribute since a large number of different services are attempted in a short period time, and as a result, for each service the  X  X ame destination host connection rejected X  sequential patterns are not frequent. 
We need to alleviate the user from the burden of  X  X uessing X  these choices. An iterative procedure that involves pattern mining and comparison, feature construction from patterns, and model building and evaluation is thus employed. In each iteration, a different combination of axis attribute and reference attribute is selected. The choices are limited among the essential attributes, that is, service, dst-host, src-dst, or src-port. Note that the exact time is never frequent and is thus omitted. Since intrusions are generally targeted to some victim host(s) in the network, we start with service as the axis attribute and dst-host as the reference attribute. For each iteration, the set of features along with the performance of the resulting classifier, in both TP (true positive) and FP (false positive) is recorded. The set of features that results in the best model is selected at the end of this procedure. 
We focus our discussion on pattern comparison and feature construction here. more  X  X imilar X  to Xj than t0 Xk if Xi &lt; Xj &lt; XI, (or XI, &lt; Xj &lt; Xi) holds. 
Given a set of associations, we use the following algorithm to compute the encodings: 
When encoding associations from network records, we use the following decreasing  X  X rder of importance X : flag, axis attribute, reference attribute, the rest of  X  X s-sential X  attributes in alphabetical order, and the re-maining attributes in alphabetical order. The attribute flag is most important (i.e., interesting) in an associa-tion since its value is a summary of how the connection has behaved according to the network protocols. Any value other than  X  X F X  (i.e., normal connection estab-lishment and termination) is of great interest for intru-sion detection. Table 3 shows some examples of encod-ings. Here service is the axis attribute, and dst-host is the reference attribute. The associations are encoded (processed) in the order of their positions in the table (i.e., first row first). 
An advantage of our encoding scheme is that we can use simple arithmetic operations to very easily control the  X  X evel of detail X  required for analysis or comparison of the associations. For example, if we choose to  X  X gnore X  sxbytes, we can simply do an integer division of 10 on the encodings. 
With the encodings of associations, we can now map an episode rule, X,Y + 2, where X, Y, and 2 are associations (itemsets), to a 3-d data point ( encodingx, encodingy, encodingz) for pattern visualization. Due to the difficulties of manipulating n-dimensional (n &gt; 3) form Ll,L2 + Rj. If L2 is missing, we simply set encodingL, = 0. 
For pattern comparison, we first convert the 3-d encoding of an episode into a l-d value. Assume Output: the updated 3 
Begin [ii ii; (12) if VZ is in all the itemsets then begin end additional features into the connection records, using the algorithm in Figure 2. This procedure parses a frequent episode and uses three operators, count, percent, and average, to construct statistical features. 
These features are also temporal since they measure only the connections that are within a time window w and share the same reference attribute value. The intuition behind the feature construction algorithm port) is targeted X . The actual values, e.g.,  X  X ttp X , is often not important because the same attack method can be applied to different targets, e.g., Ytp X . On the other hand, the actual  X  X on-essential X  attribute values, e.g., flag = SO, often indicate the invariant of an intrusion because they summarize the connection behavior according to the network protocols. 
Based on the above observations, we can postprocess the patterns to eliminate the exact host names and service names before the encoding and comparison steps. Briefly, for each pattern, we use STCO, srcr, etc., &amp;to, dstr, etc., and STVO, s~zlr, etc., to replace the source hosts, destination hosts, and services in the current pattern. 
As an example of feature construction, the %yn flood X  pattern results in the following additional fea-tures: a count of connections to the same dst-host in the past 2 seconds, and among these connections, the percentage of those that have the same service as the current, and the percentage of those that have the  X  X O X  %w 
An open problem here is how to decide the right time window value w. Our experience shows that when we plot the number of patterns generated using different w values, the plot tends to stabilize after the initial sharp jump. We call the smallest w in the stable region we. Our experiments showed that the plot of accuracies of the classifiers that use the temporal and statistical features calculated with different 20, also stabilizes after w 2 wc and tend to taper off. Intuitively, a requirement for a good window size is that its set of sequential patterns is stable, that is, sufficient patterns are captured and noise is small. We therefore use wc for adding temporal and statistical features. 3.3 Experiments with DARPA data We participated in the 1998 DARPA Intrusion Detec-tion Evaluation Program, prepared and managed by MIT Lincoln Labs. The objective of this program is to survey and evaluate research in intrusion detection. A standard set of extensively gathered audit data, which includes a wide variety of intrusions simulated in a mil-itary network environment, was provided by DARPA. Each participating site was required to build intrusion detection models or tweak their existing system param-eters using the training data, and send the results (i.e., detected intrusions) on the test data back to DARPA for performance evaluation. We summarize our experi-ence here X . 
We were provided with about 4 gigabytes of com-pressed raw (binary) tcpdump data of 7 weeks of net-work traffic, which can be processed into about 5 million attempts, the behavior of suid programs, etc. We call these features the  X  X ontent X  features. We then built three specialized models, using RIP-
PER, that each has a different set of features and de-tects different categories of intrusions. For example, for the  X  X ontent X  model, each connection record contains the  X  X ntrinsic X  features and  X  X ontent X  features, and the resultant RIPPER rules detect U2R and R2L attacks. 
A meta-classifier was used to combine the predictions of the three base models when making a final predic-tion to a connection record. Table 4 summarizes these models. The numbers in bold, for example, 9, indicate the number of automatically constructed temporal and statistical features being used in the RIPPER rules. We see that for both the ?raffic X  and host-based  X  X raffic X  models, our feature construction process contributes the majority of the features actually used in the rules. 
We report here the performance of our detection models as evaluated by MIT Lincoln Labs. We trained our intrusion detection models, i.e., the base models and the meta-level classifier, using the 7 weeks of labeled data, and used them to make predictions on the 2 weeks of unlabeled test data. The test data contains a total of 38 attack types, with 14 types in the test data only (i.e., they are  X  X ew X  to our models). 
Figure 3 shows the ROC curves of the detection models by attack categories as well as on all intrusions. 
In each of these ROC plots, the x-axis is the false alarm rate, calculated as the percentage of normal connections classified as an intrusion; the y-axis is the detection rate, calculated as the percentage of intrusions detected (since the models produced binary outputs, the ROC curves are not continuous). We compare here our models with other participants (denoted as Group 1 to 3) in the DARPA evaluation program2. These groups used knowledge engineering approaches to build their intrusion detection systems. We can see from the figure that our detection models have the best overall performance, and in all but one attack category, our model is one of the best two. intruders to first overload an IDS, and use the detection delay as a window of opportunity to quickly perform their malicious intent. For example, they can seize control of the operating system and  X  X ill X  the IDS. 
We need to examine the time delay associated with each feature in order to speed up the model execution. 
In a  X  X ata-flow X  environment such as real-time intrusion detection, the time delay of a feature includes not only the time of its computation, but also the time of its readiness (i.e., when it can be computed). For example, the flag of a connection can only be computed (summarized) after the last packet of the connection has arrived, whereas the service of a connection can be obtained by checking the header of the first packet. 
We partition the features into 3  X  X ost X  (time delay) levels: level 1 features can be computed from the first packet; level 2 features can be computed at the end of the connection, using only information of the current connection; level 3 can be computed at the end of the connection, but require access to data of (many) other alone is not necessarily the optimal solution for fast model evaluation. We thus seek to compute an  X  X fficient schedule X  for feature computation and rule testing to minimize model evaluation costs, and to increase the response rate for real-time detection. 4.1 Low Cost  X  X ecessary X  Conditions 
Ideally, we can have a few tests involving the low cost (i.e., level 1 and level 2) features to eliminate the majority of the rules that need to be checked, and thus eliminating the needs to compute some of the high cost features. 
In order to eliminate a rule for intrusion I, we need a test of the form of F 4 -I, which can be derived from 
I + 7F. We can compute the association rules that have the intrusion labels on the LHS and the low cost features on the RHS, and with a confidence of 100%. We discovered several such associations for the RIP-
PER rules, for example, ping-of-death + service = icmp-echo [c = 1.01, phf + service = http [c = 1.01, port-scan + src-bytes = 0 [c = 1.01, and syn-flood -+ flag = SO [c = 1.01, etc. Note that most of these fea-ture values, for example, src-bytes = 0, are not in the 
RIPPER rules because they are prevalent in the normal data. That is, they don X  X  have predictive power. How-ever, these associations are the  X  X ecessary X  conditions for the intrusions, for example,  X  X his connection is a port-scan attack only if src-bytes is O X , which is equiv-alent to  X  X f the src-bytes is not 0, then this connection is not a port-scan attack X . 
Note that when the RHS of such associations has n feature value pairs (regarding to different features), there are a corresponding n independent necessary conditions. We can always select the one with the lowest cost. We can also merge associations, I + Ai = v1 [cl], 
I -+ Ai = v2 [c2], . . . . and I -+ Ai = v, [c,], where cyzl ci = 1.0, t in o a single association, I + Ai = v1 vu2 . . . v 21, [c = 1.01. For example, we have from the DARPA data, buffer-overflow -+ service = telnet t X  1 ;;4 and b ff -% ow + service = rlogin Lrvice = tklnet V rlogin [c = 1.01. 
When a RIPPER rule for an intrusion is excluded because of the failure of its necessary condition, the features of the rule need not be computed, unless they are needed for other candidate (remaining) rules. We next discuss how to do efficient bookkeeping on the candidate rules and features to determine a schedule for feature computation and rule condition testing. 4.2 Real-time Rule Filtering 
Suppose that we have n RIPPER rules. We use a n-bit vector, with the bit order corresponding to the order of the rules output by RIPPER, as the remaining vector to indicate which rules still need to be checked. Initially, 
In DC-l (Detector Constructor) [FP97], a sequence of operations for constructing features (indicators) is needed before a cellular phone fraud detector (a classifier) is constructed. We have a harder problem here because there is no standard record format for connection records (we had to invent our own). We also need to construct temporal and statistical features not just for  X  X ndividual accounts X , but also over different connections and services. That is, we are modeling different logical entities that take on different roles and whose behavior is recorded in great detail. Extracting these from a fast and overwhelming stream of packet data adds considerable complexity to the problem. 
We described the challenges as well as opportunities for KDD in a  X  X ata-flow X  environment. Using network intrusion detection as a concrete case study, we showed that the  X  X xpert-intensive X  feature construction process (which is part of data preprocessing) can be guided and supported by data mining programs. Our approach is to encode and compare the frequent patterns mined from the normal and intrusion datasets, and automatically construct statistical and temporal features that describe the anatomy and invariant behavior of the attacks. 
The results from the DARPA evaluation show that the intrusion detection models produced using our method outperformed other  X  X nowledge-engineered X  systems. 
We also pointed out that it is critical to consider the cost (time delay) of real-time execution of a model. We devised a simple scheme that aims to use a few low cost tests to filter out a large portion of the high cost feature computations. 
As for future work, we will continue our research on optimizing learned rules for real-time execution. We will also study the issues of network anomaly detection, which is the only possible means to detect new attacks that are completely different in nature than any of the known intrusions. This research is supported in part by grants from 
DARPA (F30602-96-1-0311) and NSF (IRI-96-32225 and CDA-96-25374). We would like to thank Forster 
Provost of Bell Atlantic, and William Cohen of AT&amp;T for helpful discussion. [AIS93] R. Agrawal, T. Imielinski, and A. Swami. 
