 Supervised dependency parsing achieves the state-of-the-art in recent years (McDonald et al., 2005a; McDonald and Pereira, 2006; Nivre et al., 2006). Since it is costly and difficult to build human-annotated treebanks, a lot of works have also been devoted to the utilization of unannotated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised de-pendency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower per-formance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised pars-ing, it is a promising strategy to project the de-pendency structures from a resource-rich language to a resource-scarce one across a bilingual corpus (Hwa et al., 2002; Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang et al., 2009).
For dependency projection, the relationship be-tween words in the parsed sentences can be sim-ply projected across the word alignment to words in the unparsed sentences, according to the DCA assumption (Hwa et al., 2005). Such a projec-tion procedure suffers much from the word align-ment errors and syntactic isomerism between lan-guages, which usually lead to relationship projec-tion conflict and incomplete projected dependency structures. To tackle this problem, Hwa et al. (2005) use some filtering rules to reduce noise, and some hand-designed rules to handle language heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation adaptation with quasi-synchronous grammar features. Jiang and Liu (2009) resort to a dynamic programming procedure to search for a completed projected tree. However, these strategies are all confined to the same category that dependency projection must produce completed projected trees. Because of the free translation, the syntactic isomerism between languages and word alignment errors, it would be strained to completely project the dependency structure from one language to another.

We propose an effective method for depen-dency projection, which does not have to pro-duce complete projected trees. Given a word-aligned bilingual corpus with source language sen-tences parsed, the dependency relationships of the word pairs in the source language are projected to the word pairs of the target language. A depen-dency relationship is a boolean value that repre-sents whether this word pair forms a dependency edge. Thus a set of classification instances are ob-tained. Meanwhile, we propose an intuitionistic model for dependency parsing, which uses a clas-sifier to determine whether a pair of words form a dependency edge. The classifier can then be trained on the projected classification instance set, so as to build a projected dependency parser with-out the need of complete projected trees.
Experimental results show that, the classifier trained on the projected classification instances significantly outperforms the projected depen-dency parsers in previous works. The classifier trained on the Chinese projected classification in-stances achieves a precision of 58.59% on the CTB standard test set. More importantly, when this classifier is integrated into a 2nd-ordered max-imum spanning tree (MST) dependency parser (McDonald and Pereira, 2006) in a weighted aver-age manner, significant improvement is obtained over the MST baselines. For the 2nd-order MST parser trained on Penn Chinese Treebank (CTB) 5.0, the classifier give an precision increment of 0.5 points. Especially for the parser trained on the smaller CTB 1.0, more than 1 points precision in-crement is obtained.

In the rest of this paper, we first describe the word-pair classification model for dependency parsing (section 2) and the generation method of projected classification instances (section 3). Then we describe an application of the projected parser: boosting a state-of-the-art 2nd-ordered MST parser (section 4). After the comparisons with previous works on dependency parsing and projection, we finally five the experimental results. 2.1 Model Definition Following (McDonald et al., 2005a), x is used to denote the sentence to be parsed, and x the i -th word in the sentence. y denotes the de-pendency tree for sentence x , and ( i, j )  X  y rep-resents a dependency edge from word x x , where x
The task of the word-pair classification model is to determine whether any candidate word pair, x dependency edge. The classification result C ( i, j ) can be a boolean value: as produced by a support vector machine (SVM) classifier (Vapnik, 1998). p = 1 indicates that the classifier supports the candidate edge ( i, j ) , and p = 0 the contrary. C ( i, j ) can also be a real-valued probability: as produced by an maximum entropy (ME) classi-fier (Berger et al., 1996). p is a probability which indicates the degree the classifier support the can-didate edge ( i, j ) . Ideally, given the classifica-tion results for all candidate word pairs, the depen-dency parse tree can be composed of the candidate edges with higher score (1 for the boolean-valued classifier, and large p for the real-valued classi-fier). However, more robust strategies should be investigated since the ambiguity of the language syntax and the classification errors usually lead to illegal or incomplete parsing result, as shown in Figure 1.

Follow the edge based factorization method (Eisner, 1996), we factorize the score of a de-pendency tree s ( x , y ) into its dependency edges, and design a dynamic programming algorithm to search for the candidate parse with maximum score. This strategy alleviate the classification er-rors to some degree and ensure a valid, complete dependency parsing tree. If a boolean-valued clas-sifier is used, the search algorithm can be formal-ized as: And if a probability-valued classifier is used in-stead, we replace the accumulation with cumula-tive product: Where y is searched from the set of well-formed dependency trees.

In our work we choose a real-valued ME clas-sifier. Here we give the calculation of dependency probability C ( i, j ) . We use w to denote the param-eter vector of the ME model, and f ( i, j, r ) to de-note the feature vector for the assumption that the word pair i and j has a dependency relationship r . The symbol r indicates the supposed classification result, where r = + means we suppose it as a de-pendency edge and r =  X  means the contrary. A feature f tivated by the assumption and equals 0 otherwise. The dependency probability can then be defined as: 2.2 Features for Classification The feature templates for the classifier are simi-lar to those of 1st-ordered MST model (McDon-of some words and POS tags surrounded word i and/or word j , as well as an optional distance rep-resentations between this two words. Table shows the feature templates we use.

Previous graph-based dependency models usu-ally use the index distance of word i and word j to enrich the features with word distance infor-mation. However, in order to utilize some syntax information between the pair of words, we adopt the syntactic distance representation of (Collins, 1996), named Collins distance for convenience. A Collins distance comprises the answers of 6 ques-tions:  X  Does word i precede or follow word j ?  X  Are word i and word j adjacent?  X  Is there a verb between word i and word j ?  X  Are there 0, 1, 2 or more than 2 commas be- X  Is there a comma immediately following the  X  Is there a comma immediately preceding the Besides the original features generated according to the templates in Table 1, the enhanced features with Collins distance as postfixes are also used in training and decoding of the word-pair classifier. 2.3 Parsing Algorithm We adopt logarithmic dependency probabilities in decoding, therefore the cumulative product of probabilities in formula 6 can be replaced by ac-cumulation of logarithmic probabilities: Thus, the decoding algorithm for 1st-ordered MST model, such as the Chu-Liu-Edmonds algorithm Algorithm 1 Dependency Parsing Algorithm. used in McDonald et al. (2005b), is also appli-cable here. In this work, however, we still adopt the more general, bottom-up dynamic program-ming algorithm Algorithm 1 in order to facilitate the possible expansions. Here, V [ i, j ] contains the candidate parsing segments of the span [ i, j ] , and the function E VAL ( d ) accumulates the scores of all the edges in dependency segment d . In prac-tice, the cube-pruning strategy (Huang and Chi-ang, 2005) is used to speed up the enumeration of derivations (loops started by line 4 and 5). After the introduction of the word-pair classifica-tion model, we now describe the extraction of pro-jected dependency instances. In order to allevi-ate the effect of word alignment errors, we base the projection on the alignment matrix, a compact representation of multiple GIZA++ (Och and Ney, 2000) results, rather than a single word alignment in previous dependency projection works. Figure 2 shows an example.

Suppose a bilingual sentence pair, composed of a source sentence e and its target translation f . y is the parse tree of the source sentence. A is the alignment matrix between them, and each element A word e function  X  ( y , i, j, r ) to investigate the dependency relationship of word i and word j in parse tree y :  X  ( y , i, j, r ) = Then the score that word i and word j in the target sentence y forms a projected dependency edge, Figure 2: The word alignment matrix between a Chinese sentence and its English translation. Note that probabilities need not to be normalized across rows or columns. s + ( i, j ) s + ( i, j ) = The score that they do not form a projected depen-dency edge can be defined similarly: s  X  ( i, j ) = Note that for simplicity, the condition factors y and A are omitted from these two formulas. We finally define the probability of the supposed pro-jected dependency edge as:
C p ( i, j ) =
The probability C 0 and 1. Obviously, C most ambiguous case, where we can not distin-guish between positive and negative at all. On the other hand, there are as many as 2 | f | ( | f | X  1) candi-date projected dependency instances for the target sentence f . Therefore, we need choose a threshold b for C the instances with C positive, and the instances with C are selected as the negative. The classifier can be used to boost a existing parser trained on human-annotated trees. We first estab-lish a unified framework for the enhanced parser. For a sentence to be parsed, x , the enhanced parser selects the best parse  X  y according to both the base-line model B and the projected classifier C . Here, s of the baseline model and the projected classi-fier, respectively. The parameter  X  is the relative weight of the projected classifier against the base-line model.

There are several strategies to integrate the two evaluation functions. For example, they can be in-tegrated deeply at each decoding step (Carreras et al., 2008; Zhang and Clark, 2008; Huang, 2008), or can be integrated shallowly in a reranking man-ner (Collins, 2000; Charniak and Johnson, 2005). As described previously, the score of a depen-dency tree given by a word-pair classifier can be factored into each candidate dependency edge in this tree. Therefore, the projected classifier can be integrated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into de-pendency edges.
 We choose the 2nd-ordered MST model (Mc-Donald and Pereira, 2006) as the baseline. Es-pecially, the effect of the Collins distance in the baseline model is also investigated. The relative weight  X  is adjusted to maximize the performance on the development set, using an algorithm similar to minimum error-rate training (Och, 2003). 5.1 Dependency Parsing Both the graph-based (McDonald et al., 2005a; McDonald and Pereira, 2006; Carreras et al., 2006) and the transition-based (Yamada and Mat-sumoto, 2003; Nivre et al., 2006) parsing algo-rithms are related to our word-pair classification model.

Similar to the graph-based method, our model is factored on dependency edges, and its decod-ing procedure also aims to find a maximum span-ning tree in a fully connected directed graph. From this point, our model can be classified into the graph-based category. On the training method, however, our model obviously differs from other graph-based models, that we only need a set of word-pair dependency instances rather than a reg-ular dependency treebank. Therefore, our model is more suitable for the partially bracketed or noisy training corpus.

The most apparent similarity between our model and the transition-based category is that they all need a classifier to perform classification conditioned on a certain configuration. However, they differ from each other in the classification re-sults. The classifier in our model predicates a de-pendency probability for each pair of words, while the classifier in a transition-based model gives a possible next transition operation such as shift or reduce . Another difference lies in the factoriza-tion strategy. For our method, the evaluation score of a candidate parse is factorized into each depen-dency edge, while for the transition-based models, the score is factorized into each transition opera-tion.

Thanks to the reminding of the third reviewer of our paper, we find that the pairwise classifica-tion schema has also been used in Japanese de-pendency parsing (Uchimoto et al., 1999; Kudo and Matsumoto, 2000). However, our work shows more advantage in feature engineering, model training and decoding algorithm. 5.2 Dependency Projection Many works try to learn parsing knowledge from bilingual corpora. L  X u et al. (2002) aims to obtain Chinese bracketing knowledge via ITG (Wu, 1997) alignment. Hwa et al. (2005) and Ganchev et al. (2009) induce dependency gram-mar via projection from aligned bilingual cor-pora, and use some thresholds to filter out noise and some hand-written rules to handle heterogene-ity. Smith and Eisner (2009) perform depen-dency projection and annotation adaptation with Quasi-Synchronous Grammar features. Jiang and Liu (2009) refer to alignment matrix and a dy-namic programming search algorithm to obtain better projected dependency trees.

All previous works for dependency projection (Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang and Liu, 2009) need complete projected trees to train the projected parsers. Be-cause of the free translation, the word alignment errors, and the heterogeneity between two lan-guages, it is reluctant and less effective to project the dependency tree completely to the target lan-guage sentence. On the contrary, our dependency projection strategy prefer to extract a set of depen-dency instances, which coincides our model X  X  de-mand for training corpus. An obvious advantage of this strategy is that, we can select an appropriate filtering threshold to obtain dependency instances of good quality.

In addition, our word-pair classification model can be integrated deeply into a state-of-the-art MST dependency model. Since both of them are Table 2: The corpus partition for WSJ and CTB 5.0. factorized into dependency edges, the integration can be conducted at each dependency edge, by weightedly averaging their evaluation scores for this dependency edge. This strategy makes better use of the projected parser while with faster de-coding, compared with the cascaded approach of Jiang and Liu (2009). In this section, we first validate the word-pair classification model by experimenting on human-annotated treebanks. Then we investigate the ef-fectiveness of the dependency projection by eval-uating the projected classifiers trained on the pro-jected classification instances. Finally, we re-port the performance of the integrated dependency parser which integrates the projected classifier and the 2nd-ordered MST dependency parser. We evaluate the parsing accuracy by the precision of lexical heads, which is the percentage of the words that have found their correct parents. 6.1 Word-Pair Classification Model We experiment on two popular treebanks, the Wall Street Journal (WSJ) portion of the Penn English Treebank (Marcus et al., 1993), and the Penn Chi-nese Treebank (CTB) 5.0 (Xue et al., 2005). The constituent trees in the two treebanks are trans-formed to dependency trees according to the head-finding rules of Yamada and Matsumoto (2003). For English, we use the automatically-assigned POS tags produced by an implementation of the POS tagger of Collins (2002). While for Chinese, we just use the gold-standard POS tags following the tradition. Each treebank is splitted into three partitions, for training, development and testing, respectively, as shown in Table 2.

For a dependency tree with n words, only n  X  1 positive dependency instances can be extracted. They account for only a small proportion of all the dependency instances. As we know, it is important to balance the proportions of the positive and the negative instances for a batched-trained classifier. We define a new parameter r to denote the ratio of the negative instances relative to the positive ones. Figure 3: Performance curves of the word-pair classification model on the development sets of WSJ and CTB 5.0, with respect to a series of ratio r .
 Table 3: Performance of the word-pair classifica-tion model on WSJ and CTB 5.0, compared with the current state-of-the-art models.
 For example, r = 2 means we reserve negative instances two times as many as the positive ones. train the ME classifier on extracted instances. We set the gaussian prior as 1.0 and the iteration limit as 100, leaving other parameters as default values. We first investigate the impact of the ratio r on the performance of the classifier. Curves in Fig-ure 3 show the performance of the English and Chinese parsers, each of which is trained on an in-stance set corresponding to a certain r . We find that for both English and Chinese, maximum per-formance is achieved at about r = 2 . 5 . 3 The English and Chinese classifiers trained on the in-stance sets with r = 2 . 5 are used in the final eval-uation phase. Table 3 shows the performances on the test sets of WSJ and CTB 5.0.

We also compare them with previous works on the same test sets. On both English and Chinese, the word-pair classification model falls behind of the state-of-the-art. We think that it is probably Figure 4: The performance curve of the word-pair classification model on the development set of CTB 5.0, with respect to a series of threshold b . due to the local optimization of the training pro-cedure. Given complete trees as training data, it is easy for previous models to utilize structural, global and linguistical information in order to ob-tain more powerful parameters. The main advan-tage of our model is that it doesn X  X  need complete trees to tune its parameters. Therefore, if trained on instances extracted from human-annotated tree-banks, the word-pair classification model would not demonstrate its advantage over existed state-of-the-art dependency parsing methods. 6.2 Dependency Projection In this work we focus on the dependency projec-tion from English to Chinese. We use the FBIS Chinese-English bitext as the bilingual corpus for dependency projection. It contains 239K sen-tence pairs with about 6.9M/8.9M words in Chi-nese/English. Both English and Chinese sentences are tagged by the implementations of the POS tag-ger of Collins (2002), which trained on WSJ and CTB 5.0 respectively. The English sentences are then parsed by an implementation of 2nd-ordered MST model of McDonald and Pereira (2006), which is trained on dependency trees extracted from WSJ. The alignment matrixes for sentence pairs are generated according to (Liu et al., 2009).
Similar to the ratio r , the threshold b need also be assigned an appropriate value to achieve a bet-ter performance. Larger thresholds result in better but less classification instances, the lower cover-age of the instances would hurt the performance of the classifier. On the other hand, smaller thresh-olds lead to worse but more instances, and too much noisy instances will bring down the classi-fier X  X  discriminating power.
 We extract a series of classification instance sets Table 4: The performance of the projected classi-fier on the test sets of CTB 2.0 and CTB 5.0, com-pared with the performance of previous works on the corresponding test sets.
 Table 5: Performance improvement brought by the projected classifier to the baseline 2nd-ordered MST parsers trained on CTB 1.0 and CTB 5.0, re-spectively. with different thresholds. Then, on each instance set we train a classifier and test it on the develop-ment set of CTB 5.0. Figure 4 presents the ex-perimental results. The curve shows that the max-imum performance is achieved at the threshold of about 0.85. The classifier corresponding to this threshold is evaluated on the test set of CTB 5.0, and the test set of CTB 2.0 determined by Hwa et al. (2005). Table 4 shows the performance of the projected classifier, as well as the performance of previous works on the corresponding test sets. The projected classifier significantly outperforms pre-vious works on both test sets, which demonstrates that the word-pair classification model, although falling behind of the state-of-the-art on human-annotated treebanks, performs well in projected dependency parsing. We give the credit to its good collaboration with the word-pair classification in-stance extraction for dependency projection. 6.3 Integrated Dependency Parser We integrate the word-pair classification model into the state-of-the-art 2nd-ordered MST model. First, we implement a chart-based dynamic pro-gramming parser for the 2nd-ordered MST model, and develop a training procedure based on the perceptron algorithm with averaged parameters (Collins, 2002). On the WSJ corpus, this parser achieves the same performance as that of McDon-ald and Pereira (2006). Then, at each derivation step of this 2nd-ordered MST parser, we weight-edly add the evaluation score given by the pro-jected classifier to the original MST evaluation score. Such a weighted summation of two eval-uation scores provides better evaluation for can-didate parses. The weight parameter  X  is tuned by a minimum error-rate training algorithm (Och, 2003).
 Given a 2nd-ordered MST parser trained on CTB 5.0 as the baseline, the projected classi-fier brings an accuracy improvement of about 0.5 points. For the baseline trained on the smaller CTB 1.0, whose training set is chapters 1-270 of CTB 5.0, the accuracy improvement is much sig-nificant, about 1.5 points over the baseline. It indicates that, the smaller the human-annotated treebank we have, the more significant improve-ment we can achieve by integrating the project-ing classifier. This provides a promising strategy for boosting the parsing performance of resource-scarce languages. Table 5 summarizes the experi-mental results. In this paper, we first describe an intuitionis-tic method for dependency parsing, which re-sorts to a classifier to determine whether a word pair forms a dependency edge, and then propose an effective strategy for dependency projection, which produces a set of projected classification in-stances rather than complete projected trees. Al-though this parsing method falls behind of pre-vious models, it can collaborate well with the word-pair classification instance extraction strat-egy for dependency projection, and achieves the state-of-the-art in projected dependency parsing. In addition, when integrated into a 2nd-ordered MST parser, the projected parser brings signifi-cant improvement to the baseline, especially for the baseline trained on smaller treebanks. This provides a new strategy for resource-scarce lan-guages to train high-precision dependency parsers. However, considering its lower performance on human-annotated treebanks, the dependency pars-ing method itself still need a lot of investigations, especially on the training method of the classifier. This project was supported by National Natural Science Foundation of China, Contract 60736014, and 863 State Key Project No. 2006AA010108. We are grateful to the anonymous reviewers for their thorough reviewing and valuable sugges-tions. We show special thanks to Dr. Rebecca Hwa for generous help of sharing the experimen-tal data. We also thank Dr. Yang Liu for sharing the codes of alignment matrix generation, and Dr. Liang Huang for helpful discussions.

