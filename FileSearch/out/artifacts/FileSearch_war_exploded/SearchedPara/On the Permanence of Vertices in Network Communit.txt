 Despite the prevalence of community detection algorithms, relatively less work has been done on understanding whether a network is indeed modular and how resilient the commu-nity structure is under perturbations. To address this issue, we propose a new vertex-based metric called permanence , that can quantitatively give an estimate of the community-like structure of the network.

The central idea of permanence is based on the obser-vation that the strength of membership of a vertex to a community depends upon the following two factors: (i) the distribution of external connectivity of the vertex to indi-vidual communities and not the total external connectivity, and (ii) the strength of its internal connectivity and not just the total internal edges.

In this paper, we demonstrate that compared to other metrics, permanence provides (i) a more accurate estimate of a derived community structure to the ground-truth com-munity and (ii) is more sensitive to perturbations in the network. As a by-product of this study, we have also devel-oped a community detection algorithm based on maximizing permanence. For a modular network structure, the results of our algorithm match well with ground-truth communities. H.2.8 [ Database Application ]: Data mining; E.1 [ Data Structure ]: Graphs and networks permanence; community analysis; modularity
Finding accurate community structures, i.e., groups of vertices that have more connections within a group than across the groups is one of the central problems in network analysis. Several community detection algorithms have been proposed over the last decade; these algorithms are generally based on optimizing certain scoring functions (for example, modularity [21] or conductance [18]). The output of these algorithms is an assignment of the vertices to their respec-tive communities, for which the designated parameters are optimal (or nearly-optimal) 1 . However, almost all these de-tection techniques will always output a set of communities, irrespective of whether the network has an inherent commu-nity structure or not. Moreover, the optimal values of the scoring functions do not provide any insight as to whether a network actually possesses community structure or not. For example, the highest modularity in the Jazz network is 0.45 [5] and that of the Western USA power grid is 0.98 [5, 13]. However, it has been observed [5, 13], that Jazz has a much stronger community structure than the power grid.
The key reason for this is that optimization metric such as modularity frequently enforces the detection algorithm to make a choice by arbitrarily breaking ties. While this indeed increases the value of the metric, each such tie-breaking ob-fuscates the possibility of other community assignments. In grid-like networks, where choices can occur frequently, such tie-breaking can produce inaccurate or insignificant commu-nities, while producing a high scoring function. Although, methods for finding consensus communities [17] can indicate whether the communities are significant or not, these tech-niques are dependent on the number of algorithms used to find the consensus.

In this paper, we propose a novel vertex-based scoring function called permanence whose optimization encounters much fewer tie-breaking situations in a network. The key idea behind formulating permanence is as follows. Most op-timization metrics consider either the degree of a vertex in a community or the total number of external connections of the vertex (i.e., those connections that are attached with the other neighbors of the vertex outside the community). We posit that the distribution of the external connections of a vertex is equally important. In particular, our vertex assign-ment decisions are based not on the total number of external connections but on the maximum number of external con-nections to any single neighboring community. To the best of our knowledge, we are the first to make this distinction between the total external connections and their distribu-tion. Permanence of a vertex thus quantifies its propensity to remain in its assigned community and the extent to which it is  X  X ulled X  [5] by the neighboring communities.
The value of permanence ranges from 1 (vertex is strongly connected to its assigned community) to -1 (vertex is weakly connected to its assigned community, and possibly wrongly assigned). If the permanence is zero, this indicates that the vertex is pulled equally by all its neighbors, all of which are in different communities. The  X  X ull X  in the metric is mod-eled as the maximum number of external connections to any single neighboring community. The introduction of pull in the formulation significantly reduces the frequency of tie-breaking situations that the algorithm has to encounter. In case the  X  X ull X  from all the neighboring communities is equal for a vertex, we assign it to a singleton community (i.e., com-munity containing only one vertex), rather than assigning it to one of the (larger size) neighboring communities.
The sum of the permanence of all vertices, normalized by the number of vertices, provides the permanence of the network. It indicates to what extent, on an average, the vertices of a network are bound to their communities. As with permanence, this value also ranges from 1 to (nearly) -1. Maximizing permanence can be therefore used as an alternative method for identifying communities which con-stitutes a by-product of the current study. This approach of combining the microscopic (vertex-level) information to ob-tain the mesoscopic (community-level) information provides a more fine-grained view of the modular structure of the net-work. As the community structure of the network degrades, so does the value of permanence of the entire network.
The principal benefits of our approach are  X  (i) perma-nence provides a quantitative estimate of the inherent com-munity structure of the network (Section 2), (ii) permanence is comparable (and sometimes better) than several other popular community scoring functions in identifying good communities (Section 4), (iii) permanence is very sensitive to the different perturbations of the network  X  a desirable property for a community scoring metric (Section 5), (iv) for modular networks, maximizing permanence algorithm is more successful in finding ground-truth communities as compared to several other community detection algorithms (Section 6), (v) community detection using maximizing per-manence can reduce the effect of resolution limit, degeneracy of solutions and asymptotic growth of the optimal value with network size (Section 6).
In this section, we explain the concepts that lead to the formulation of permanence followed by a definition of the formula.
In contrast to most optimization metrics that either con-sider the degree of the vertex in a community or the total number of external neighbors of the vertex, in permanence we consider the distribution of external connections of the vertex to its neighboring communities. A vertex that has equal number of connections to all its external communi-ties (e.g., a vertex with total 6 external connections with 2 to each of 3 neighboring communities) has equal  X  X ull X  from each community whereas a vertex with more exter-nal connections to one particular community (e.g., a vertex with total 6 external connections with 1 connection each to two neighboring communities and 4 connections to the third neighboring community), will experience more  X  X ull X  from that community due to large number of external con-nections to it.

This property is demonstrated by a toy example in Fig-ure 1(a). If the edge ( a,b ) is deleted and the edge ( a,c ) is added, then the number of external connections remains the same, and the value of modularity, conductance and cut-ratio are also the same for this change. However, in the initial graph, vertex a had more  X  X ull X  from the community of b , in fact proportional to the number of its internal con-nections, whereas in the modified version a has equal pull from both the communities of b and c . Our permanence formula, defined in Section 2.3, takes this distinction into account.

Figure 1(b) shows a histogram of the fraction of vertices versus the ratio between the number of total ( E sum maximum ( E max ) external connections for two representa-tive networks. We notice that  X  (i) very few vertices have (closely) similar values of E sum and E max (i.e., ratio=1); the majority have significantly different E sum and E max the ratio between these two quantities is not constant; it is spread over a wide range of values. Therefore, we can-not estimate E max from the value of E sum . Consequently, metrics that are based on total number of external connec-tions lack the information as to what extent a vertex may be  X  X ulled X  by the neighboring communities which can bet-ter estimated by E max . Using E sum can potentially result in frequent ties that need to be arbitrarily resolved by the community detection algorithms based on such metrics.
When computing permanence, we use the maximum num-ber of external connections, i.e., the maximum pull, to any one external community, instead of combining all the exter-nal connections.
The internal connections of a community are generally considered together as a whole. However, how strongly a vertex is connected to its internal neighbors can differ. The toy example of Figure 1(c) shows two networks each having two communities. Both the networks have the same number of edges; and the modularity, conductance and cut-ratio for the two divisions are exactly the same. However, the vertices on the left-hand graph are more tightly connected to each other than the vertices on the right-hand graph. To measure this internal connectedness of a vertex, one can compute the clustering coefficient of the vertex with respect to its internal neighbors. The higher this internal clustering coefficient, the more tightly the vertex is connected to its community.
As an empirical study, we further obtain the internal clus-tering coefficient per vertex of the benchmark networks for their ground-truth communities. Figure 1(d) shows a his-togram of the internal clustering coefficient versus the num-ber of vertices corresponding to a specific range of internal clustering coefficient. As can be seen from the histogram, for most vertices the internal clustering coefficients are gen-erally towards the high range. However, for LFR (  X  =0.6) there is a reverse trend. In this network, there are more ver-tices with lower internal clustering coefficient. This network by construction has a weaker community structure than the other networks in the set, and thus quite a few of its vertices are loosely connected internally (see more in Section 6).
To represent whether vertices are tightly connected within their communities, we include the internal clustering coeffi-cient as a factor in computing permanence.
Based on our observations on the distribution of external connections and the internal clustering coefficient, we for-Figure 1: (Color online) Toy examples and empirical observations demonstrating the drawbacks of exist-ing community scoring metrics. The communities in (a) and (c) are distinguished by different colors. Figure 2: Toy example depicting permanence of a vertex v (here I ( v ) =4, D ( v ) =7, E max ( v ) =2, c in mulate permanence of a vertex based on the following two criteria that measure the possibility of the vertex remaining in its own community: (i) The internal connections, I ( . ), of the vertex v should be more than the maximum connections to a single exter-nal community, E max ( . ), which results more internal pull than the maximum external pull. This criteria is repre-sented in the permanence computation as the ratio of I ( v ) and E max ( v ) (indicated by F1 in Equation 1). If the vertex has no external connections, F1 is just the value of the inter-nal connections. We normalize this value by the total degree of the vertex, D ( v ) (indicated by F2 in Equation 1), which ensures that the product of F1 and F2 will be between 0 (no internal connections) and 1 (no external connections). (ii) Within a specific community, the internal neighbors of the vertex v should be highly connected among each other (i.e., its internal clustering coefficient 2 , c in ( v ), should be high). This criteria emphasizes that a vertex is likely to be within a community if it is part of a near-clique substruc-ture. For computing c in ( v ), we assume that each community should have at least three vertices and three internal connec-tions; otherwise, c in ( v ) is set to 0. When computing perma-nence, we impose a penalty based on low internal clustering coefficient (indicated by F3 in Equation 1). The less the internal clustering coefficient, the more the penalty imposed to the final outcome of the community score. This value also ranges from 0 (no penalty) to 1 (maximum penalty).
We aggregate these two criteria to formulate permanence of a vertex v as follows: Figure 2 depicts a toy example for measuring permanence of a vertex v . Note that, this formula actually differentiates between the two cases in Figure 1(a) with higher perma-nence value for the case where the external pull is uniform. Similarly, the formula differentiates between the two cases in Figure 1(c) by imposing more penalty on the network that has a less tightly knit internal substructure. For vertices that do not have any external connections, Perm ( v ) is considered to be equal to the internal clustering coefficient (i.e., Perm ( v ) = c in ( v )). The maximum value of Perm ( v ) is 1 and is obtained when vertex v is an internal node and part of a clique. The lower bound of Perm ( v ) is close to -1. This is obtained when I ( v ) D ( v ), such vertex v ,  X  1 &lt; Perm ( v )  X  1. The permanence of a graph G ( V,E ), where V is the set of vertices and E is the set of edges, is given by Perm ( G ) = 1 | V | P v  X  V Perm ( v ). For a graph G ( V,E ), the range is  X  1 &lt; Perm ( G )  X  1.
Perm ( G ) will be closer to 1 as more vertices have high permanence, that is more vertices are in well-defined com-munities. This can happen only if the network has a strong community structure. The maximum value obtained is when G consists of a series of disconnected cliques. If there is a vertex bridging between two cliques, then the highest overall permanence will be obtained if each clique acts as a separate community and bridging vertex forms a singleton commu-nity. For a grid, the best value of Perm ( G ) will be zero, i.e., each vertex is assigned to a singleton community.
In this section, we provide a brief overview of the datasets, metrics and comparative methods that we use for our exper-iments.
We use the LFR benchmark model [15] to generate syn-thetic networks along with their ground-truth communities. Users can specify the following properties: number of nodes ( n ), average ( &lt; k &gt; ) and maximum ( k max ) degree, the de-gree distribution, the community size distribution, and the mixing-coefficient (  X  ). The mixing coefficient represents the ratio (in average) between the external connections of a node to its degree. Thus the lower the value of  X  , the stronger the community in the network. For our experiments, we set the number of nodes as 1000, and  X  as 0.1, 0.3 and 0.6 (unless mentioned otherwise). For the rest of the param-eters, we use the default values mentioned in the authors X  implementation 3 [15].

We also use three real-world networks 4 whose true com-munity structures are known a-priori and whose properties are summarized in Table 1.
 Football network was proposed by Girvan and Newman [10] which contains the network of American football games between Division IA colleges during regular season Fall of 2000. The vertices in the graph represent teams (identified by their college names), and edges represent regular-season games between the two teams they connect.
 Indian Railway network proposed by Ghosh et al. [9] con-sists of nodes representing stations, where two stations s and s j are connected by an edge if there exists at least one train-route such that both s i and s j are scheduled halts on that route. The weight of the edge between s i and s the number of train-routes on which both these stations are scheduled halts. We filter out the low-weight edges and then make the resultant network unweighted. We tag each station based on the state in India 5 to which that station belongs. The states act as communities since the number of trains within each state is much higher than the number of trains between two states.
 Co-authorship network is derived from the citation dataset developed by Chakraborty et al. [4]. This dataset contains the metadata (title, author(s), related field(s) 7 of the pa-per, publication venue, year of publication, references and abstract) of all the papers of computer science published be-tween 1960 to 2009 and archived in DBLP repository. We build an aggregated undirected coauthorship network where each node represents an author, and an undirected edge be-tween a pair of authors is drawn if they were co-authors at least once. Since each paper is marked by its related field, we assume this field as the research area of the author(s) writing that paper. Therefore, an author may possess more than one area of research interests. We resolve this by tagging each author by the major field on which she has written most of the papers. These fields act as the ground-truth communi-ties. Besides the aggregated network, we also create some intermediate networks mentioned in Table 8 by cumulatively aggregating all the vertices and edges over each year, e.g., 1960-1971, 1960-1972, ..., 1960-1980.
Note that, the principles for constructing the Indian rail-way network and the co-authorship network are the same  X  there is an underlying bipartite structure in each case; for railway network, it is the station-train interaction network with an edge denoting if a particular train passes through a station, while for the co-authorship network it is the article-author interaction network with an edge denoting the au-thorship of a researcher in a scientific article. The railway network is therefore the one-mode projection of the train-station network and the co-authorship network is similarly the one-mode projection of the article-author network. Note that, although the principles of construction are same for both the networks (one clique per train/article is imposed in the one-mode projection), the results, as we shall see in Section 6 are far better for the railway network since the ground-truth here is much more fine-grained in comparison to the co-authorship network.
 Table 1: Properties of real-world networks; n and e are the number of nodes and edges, c is the number of communities, &lt; k &gt; and k max its average and max-imum degree, n min c and n max c the sizes of its smallest and largest communities.

The goodness of a community is often measured by how well certain scoring functions are optimized. Here we com-pare the optimal value of permanence for the obtained com-munities versus three popular scoring functions, namely mod-ularity (Mod) [21], conductance (Con) [18] and cut-ratio (Cut) [19]. In order to make the higher the better, we mea-sure (1-Con) and (1-Cut) for conductance and cut-ratio re-spectively.
A stronger test of the correctness of the community de-tection algorithm, however, is by comparing the obtained community with a given ground-truth structure. We use three standard validation metrics, namely Normalized Mu-tual Information (NMI) [7], Adjusted Rand Index (ARI) [12] and Purity (PU) [20] to measure the accuracy of the de-tected communities with respect to the ground-truth com-munity structure. [14] argues that these measures have cer-tain drawbacks in that they ignore the connectivity of the network. We therefore also use the weighted versions of these measures, namely Weighted-NMI (W-NMI), Weighted-ARI (W-ARI) and Weighted-Purity (W-PU) as proposed in [14]. Note that, all the metrics are bounded between 0 (no matching) and 1 (perfect matching).
We use the following community detection algorithms for comparison with our proposed algorithm discussed in Sec-tion 6: (i) Modularity-based: FastGreedy [22], Louvain [3] and CNM [6]. (ii) Random walk-based: WalkTrap [24]. (iii) Compression-based: InfoMod [25] and InfoMap [26]. (weighted) validation measures are shown in column 9 (column 13).  X  =0.3)
In this section, we demonstrate the effectiveness of per-manence as a scoring function for evaluating the goodness of detected communities, and compare it with modularity, 1-Con and 1-Cut. To do this, we perform the following ex-periment, on the same lines as that of [27].

These are the steps in our experiment: (i) We apply sev-eral community detection algorithms on a specified network and obtain the vertex-to-community assignment as given by each algorithm; (ii) We compute the values of all the com-munity scoring functions for these communities; (iii) For each scoring function we rank the algorithms based on which one of these produces the most optimal (highest) value; (iv) We then compare the obtained community with the known ground-truth community and compute the respective valida-tion measures, namely NMI, ARI, Purity and their weighted versions; (v) For each validation metric, we rank the algo-rithms based on the one that produces the highest value, i.e., best match with ground-truth.

Table 2 shows the results of the experiment performed on football network. Scoring functions (columns 2-5) are mea-sures of goodness of the community set obtained. The vali-dation metrics (columns 6-8, 10-12) measure the concurrence of the communities with the ground-truth communities. We posit that since these two types of measures are orthogo-nal, and because the validation metrics generally provide a stronger measure of correctness after measuring similarity with the ground-truth structure, the values of a good scor-ing function should  X  X atch X  those of the validation metrics. That is, if a scoring function indeed identifies the correct communities, then when its value is high (low), the values of the corresponding validation metrics would also be high (low).

To compute this correlation, we compare the relative ranks, because the range of the values is not commensurate across the quantities and we are more interested in observing the  X  X p X  or  X  X own X  direction, rather than the absolute values. For each network, we measure the Spearman X  X  rank corre-lation between all pairs of scoring functions and validation measures. Note that, it is not always possible to assign ranks uniquely. We used different ranking schemes to break ties. Here, we present the results using dense ranking; we have also used standard competition ranking and fractional rank-ing (see in [1]) and our results are consistent across all the different methods.

Results. Table 2 shows the values and ranks for the dif-ferent metrics for football network. For all the networks, the rank correlations of the scoring functions and the vali-dation metrics are shown as heat maps in Figure 3. Lighter color indicates higher correlation and hence more similarity between the scoring function and the validation metric. For the networks having distinct community structure such as LFR (  X  = 0 . 1), football and railway networks, permanence shows comparable performance as that of other scoring func-tions. However for LFR network, with the increase of  X  , the inter-community connection density starts increasing, and it is difficult for any community detection algorithm and/or scoring function to capture the ground-truth communities. Interestingly, we observe that the rank correlation obtained through the permanence scores and those through valida-tion metrics is exceptionally high for LFR (  X  = 0 . 6) and coauthorship networks which seem to have poor community normalized by the maximum value obtained from each function. structure compared to the other networks (see Table 1 and Table 5). Since the ground-truth communities are not well formed, there is a wide variance in the type of community structures identified by different algorithms. Permanence score can capture this variability much better than other scoring functions. To summarize the results, in Table 3 we present the average rank correlations of these community scoring functions across all the validation metrics for each network. We observe that for all the networks, permanence on an average produces the best ranking followed by modu-larity, conductance and cut-ratio in order.
 Table 3: Average rank correlations (over different validation metrics) of the community scoring func-tions for all the networks. For each network, the highest (best) correlation is in bold font.

We now evaluate the sensitivity of permanence under dif-ferent perturbations of the ground-truth community struc-ture. We posit that a good metric for evaluating commu-nities should be stable under small perturbations of the ground-truth communities (i.e., groups of nodes that dif-fer very slightly from the ground-truth communities). This indicates that the scoring function is robust to noise. How-ever, if the perturbation is beyond a threshold, i.e., when the ground-truth community structure is perturbed to such an extent that it resembles a random set of nodes, then a good scoring function should assign it a low score.
Given a graph G = &lt; V,E &gt; and perturbation intensity p , we start with the ground-truth community S and then modify it (i.e., change its members) by executing the per-turbation strategy p  X  m times. The value of m is based on different strategies, as described below. For our experi-ments, we adopt three perturbation strategies motivated by the methods proposed in [28]: (i)Edge-based perturbation picks a random inter-comm-unity edge ( u,v ) where u  X  S and v  X  S 0 (where S 6 = S then swaps the memberships (i.e., assign u to S 0 and v to S ). It continues until p  X | E | iterations are completed (here, m = | E | ). This strategy preserves the size of S . However, if v is not connected to any other nodes in S except u , then it makes S disconnected. (ii) Random perturbation takes community members and replaces them with random non-members. We pick two random nodes u  X  S and v  X  S 0 (where S 6 = S 0 ) and then swap their memberships. It continues until p  X  | V | itera-tions are completed (here, m = | V | ). Random perturbation maintains the size of S but may disconnect S . Generally, it degrades the quality of S faster than edge-based strat-egy, since edge-based strategy only affects the  X  X ringe X  of the community. (iii) Community-based perturbation adopts a similar mechanism as in the edge-based strategy. However, it con-siders each community S from the ground-truth community structure one by one and continues the perturbation until p  X | S | constituent nodes of the community are swapped with the other non-constituent nodes (here, m = | S | ). This pro-cess is repeated for all the communities separately. This perturbation decreases the quality of the ground-truth com-munities the fastest among the three since the number of swaps is much higher than the others.

We perturb different networks using these three perturba-tion strategies for values of p ranging between 0.01 to 0.5. We compute the values of four community scoring functions, i.e., modularity, permanence, 1-Con and 1-Cut. For small values of p , small change of the original value of the scoring function is desirable since it indicates that the scoring func-tion is robust to noise. For high perturbation intensities (i.e., for larger values of p ), the value should drop signifi-cantly since the communities become more random.
 Results. Figure 4 shows the results of our experiments. For a commensurate comparison, we rescale the values of each parameter by normalizing with the maximum value ob-tained from that function. For all three strategies, the values of the scoring functions tend to decrease with the increase of p , and the effect is most prominent in community-based strategy followed by random and edge-based strategies. For each network, once p has reached a certain threshold, the decrease is much faster in permanence. On more careful inspection, we find that this happens because the internal structure of a community completely breaks down if pertur-bation is taken beyond a point and thus has an avalanche ef-fect on the value of the clustering coefficient ( c in ( v ) in Equa-tion (1)). This in turn quickly pulls the value of permanence down. Summarizing, the results indicate that permanence is a better measure for distinguishing true communities from randomized sets of nodes than the other parameters.
Inspired by the effectiveness of permanence as a scoring function and its sensitivity to perturbations, we develop a community detection algorithm called Max Permanence 8 (pseudocode in Algorithm 1) that identifies communities by maximizing permanence.

Our algorithm is a heuristic, that strives to obtain a high value of permanence. In this algorithm, we begin with ini-tializing every vertex to a singleton community. A vertex is moved to a community only if this movement results in a net increase in the number of internal connections and/or a net decrease in the number of external connections to any of the neighboring communities. If such a move is not possible, then either the vertex remains as a singleton (such as in the case where moving to any one of the candidate communi-ties will give equal permanence) or moves to the community where it is more tightly connected with its neighbors (this causes the vertex to have positive permanence). This pro-cess is repeated for each vertex and the entire relocation of all vertices is repeated over several iterations until the per-manence value converges. However, convergence is not the-oretically guaranteed, but we observed that the algorithm converges with high probability.
Table 4 shows results of the improvement of our method (as differences) compared to the average and best perfor-mances of six competing algorithms (given in Section 3.4) based on six ground-truth based validation metrics.
Comparable results -in LFR (  X  = 0.1) and football net-works, since the communities are well-separated, most algo-rithms efficiently capture these partitions and our method is comparable to the other algorithms as well.

Improved results -in LFR (  X  = 0 . 3) and railway networks, our method significantly outperforms other algorithms. More-over in railway network, we observe that our algorithm de-tects three singleton communities (i.e., communities each containing only one vertex), one of which is also present in the ground-truth structure. None of the community detec-tion algorithms is able to capture this singleton community. Moderate results -our method does not work well for the LFR (  X  = 0 . 6) network. For coauthorship network, we ob-serve that though our algorithm outperforms the average performance of the competing algorithms, it performs less well than that of the two information-theoretic approaches (Infomod and Infomap).
 Reasons behind moderate performance LFR (  X  =0.6)  X  To understand why our algorithm is not as competitive for LFR (  X  = 0 . 6), we further observe the qual-ity of the ground-truth communities in three LFR networks. We observe that while the average internal clustering coeffi-cient of vertices in LFR (  X  = 0 . 1) is 0.78, it deteriorates to 0.36 for LFR (  X  = 0 . 6). Moreover, 97% of vertices in ground-truth communities of LFR (  X  =0.6) have less internal con-nections than the external connections (while LFR (  X  =0.1) Algorithm 1 Max Permanence and LFR (  X  =0.3) hardly have any such nodes). This indi-cates that LFR (  X  = 0 . 6) does not have modular structure in the ground-truth communities.

To further strengthen this claim, we also measure the sim-ilarity of the communities obtained by different community detection algorithms (as listed in Section 3.4) across differ-ent validation measures. The results in Table 5 clearly show the degradation of the similarity values with the increase in  X  . The reason is that with the increase in  X  , the commu-nities in LFR network tend to be less well-knit, and thus the agreement of the outputs of different algorithms is also less. Therefore, the output of a good community detection algorithm should reflect such absence of modular structure in the network (hence shows poor performance).
 Coauthorship network  X  To explain the permanence-based results obtained from coauthorship network, we further an-alyze the communities obtained from our algorithm. We check the title and the abstract of the papers written by the authors in each community of coauthorship network, and notice that our method splits large ground-truth commu-nities into denser submodules. This splitting is mostly no-ticed in older research areas such as Algorithms and Theory, Databases etc. These submodules are actually the subfields (sub-communities) of a field (community) in computer sci-ence domain. Few examples of such sub-communities ob-competing algorithms.
 tained from our algorithm are noted in Table 6. Thus, our algorithm, in addition to identifying well-defined communi-ties, is also able to unfold the hierarchical organization of a network.
 Table 5: Average values among pairwise similarities between outputs of the community detection algo-rithms on different LFR networks.
 Table 6: Example of communities and sub-communities obtained from coauthorship network using Max Permanence algorithm.
 Comparison of largest community size. Many op-timization algorithms have the tendency to underestimate smaller size communities (known as the resolution limit prob-lem [11]) and sometimes tend to produce very large size communities. In our test suite, we observe the similar ten-dency in all the competing algorithms whereas the com-munities obtained by permanence are smaller in size. In Table 7, we show for two representative networks that the size of the largest communities detected by the other algo-rithms is much larger than the size of the largest commu-nity present in the ground-truth structure. We also measure the maximum similarity (using Jaccard coefficient) between the largest-size community detected by each algorithm with the communities in ground-truth structure and notice that Max Permanence is able to detect largest size community which is most similar to the ground-truth structure. There-fore, we hypothesize that our algorithm has the potentiality to reduce the effect of resolution limit.
As discussed earlier, modularity maximization algorithms suffer from the issues including (a) resolution limit, (b) de-generacy of solution and (c) dependence on the size of the graph [11]. We now discuss how each of these problems are ameliorated by maximizing permanence.

We demonstrate that community assignments are different in a modularity-based algorithm vis-a-vis Max Permanence Table 7: Size of the largest communities obtained from different community detection algorithms and their similarities with the ground-truth structure for two networks (LFR (  X  =0.3, N=1000) and football). algorithm using the example in Figure 5. In this figure, we assume that apart from the edges through v , there is no connection between the communities A and B .
 Figure 5: (Color online) An illustrative example to show the community assignment of vertex v .

Terminology. Let vertex v be connected to  X  (  X  ) nodes in community A ( B ), and these  X  (  X  ) nodes form the set N ( N  X  ). The number of vertices in community A is ( x +  X  ), and in community B is ( y +  X  ). Let the average internal degree of a vertex a  X  N  X  and a vertex b  X  N  X  , before v is assigned to any of the communities, be I  X  and I  X  respectively. Let the average internal clustering coefficient of the neighboring nodes in communities A and B be C A and C B respectively. If v is added to communities A ( B ) then the average internal clustering coefficient of v becomes C v A ( C v B ), and the average internal clustering coefficient of the nodes in N  X  ( N  X  C  X  ( C  X  ).

We assume that the communities A and B are tightly con-nected internally such that the values of C A and C B are very high ( &gt; 0.5). To simplify the explanations, we consider the case where none of the neighbors of v are connected to each other. If v does not add any new edges to the group of neigh-
Given this scenario, we can determine the conditions (due to the lack of space detailed calculations are provided in an online appendix [1]) for which a particular assignment of v to any of the communities will give the highest permanence. average internal degree, &lt; k &gt; : average degree, &lt; c &gt; : average internal clustering coefficient, &lt; E max Using these conditions, we show how permanence overcomes some of the issues related to modularity maximization. Degeneracy of solution is a problem where a community scoring function (e.g., modularity) admits multiple distinct high-scoring solutions and typically lacks a clear global max-imum, thereby, resorting to tie-breaking [11]. For our exam-ple, when  X  =  X  , modularity maximization algorithm will assign v arbitrarily to A or B . However, in the case of per-manence, v will remain as a separate community so long as the following condition is maintained:
Condition. If  X  =  X  , C  X  = C B I  X   X  1 I A , B and v will remain separate rather than v joining com-
We observe that when  X  =  X  = 1, then C v A = 0 and the communities will always remain separate. Furthermore, as  X  increases, the left-hand side of the above condition will become larger than the right, thus increasing the chance of separate communities.
 Resolution limit is a problem where communities of cer-tain small size are merged into larger ones [11]. A classic example where modularity cannot identify communities of small size is a cycle of m cliques. Here maximum modularity is obtained if two neighboring cliques are merged.
In the case of permanence, we can determine that whether two communities A and B would merge (as in modularity) or whether v would join community A (we select A , but similar analysis can also be done for the case when v joins B ), by the following condition:
Condition. Joining v to community A gives higher per-manence than merging the communities A , B and v if C  X  = C and also if C  X  = C B I  X   X  1 I This result is independent of the size of the communities. Moreover, so long as A and B are almost cliques (internal clustering coefficients &gt; 0.5), C v A is sufficiently high and C is sufficiently small (e.g., C v A &gt; 2/3 and C v B =0), v will join community A rather than merging. Thus, in general, the highest permanence is obtained if v joins the community to which it is very tightly connected rather than the one to which it is loosely connected.
 Asymptotic growth of value of a metric implies a strong dependence on the size of the network and the number of modules the network contains [11]. Rewriting Equation 1, we get the permanence of the entire network G as follows: We can notice that most of the parameters in the above formula are independent of the network size and the num-ber of communities. Table 8 illustrates the change in mod-ularity and permanence with the symmetric growth of the network size in coauthorship network. Note that, the inter-mediate networks are formed by cumulatively aggregating all the vertices and edges of coauthorship network over the years, e.g., 1960-1971, 1960-1972,..., 1960-1980. We observe that the modularity increases consistently with the symmet-ric growth, while the value of permanence remains almost constant.
A huge volume of work has been devoted to finding com-munities in large networks, including diverse methods such as modularity optimization [3, 6], spectral graph-partitioning [23], random-walk [24], information-theoretic [25, 26], con-sensus clustering [17] and many others (see [8] for the re-view). Recently, Chakraborty et al. [5] pointed out how vertex ordering influences the results of the community de-tection algorithms. They identify invariant groups of ver-tices (named as  X  X onstant communities X ) whose assignment to communities are not affected by vertex ordering.
On the other hand, several metrics for evaluating the quality of community structure have been proposed. The most popular is modularity [21]. However, community de-tection using modularity has certain issues including reso-lution limit, degeneracy of solutions and asymptotic growth [11]. To address these issues, multi-resolution versions of modularity [2] were proposed to allow researchers to specify a tunable target resolution limit parameter. Furthermore, Lancichinetti and Fortunato [16] stated that even those multi-resolution versions of modularity are not only inclined to merge the smallest well-formed communities, but also to split the largest well-formed communities.
In this paper, we have introduced a new vertex-based met-ric, permanence for evaluating the goodness of communities in networks. From our experiments we observe that the per-manence score has a good correlation with the quality of the ground-truth communities (Section 4) and is sensitive to perturbations in the community structure (Section 5). In addition, permanence also provides some significant advan-tages compared to other popular community scoring func-tions.

The value of permanence strongly correlates to the com-munity like structure of the network . For example, the power grid network, which is not at all modular [13], has a mod-ularity of 0.98 and a permanence of -0.16. In contrast, community-rich networks such as a circle of 30 cliques gen-erate permanence (modularity) of 0.92 (0.87). Therefore, permanence can also be used to identify whether the net-work is at all suitable for community detection.

We believe that the advantages of permanence arise be-cause it is a local vertex-based metric as opposed to the more common global/mesoscopic metrics. At the same time, per-manence also derives the benefits of a global metric to a certain extent by looking into the exact community assign-ments of the external neighbors of the vertex considered. Perfectly global metrics tend to aggregate the effect of the connections of all the vertices in a community. As we have seen in Section 2 we can lose information by aggregation, particularly if the distribution of the connections is skewed. A vertex-based metric is more fine-grained, and therefore al-lows partial estimation of communities in a network whose entire structure is not known.

In this paper we have empirically demonstrated the ad-vantages of permanence. As an immediate future work, we plan to extend permanence metric to evaluate the quality of overlapping communities and communities in dynamic and weighted networks. We believe that this metric will help in formulating a strong theoretical foundation for identifying community structures where the ground-truth is not known. All the codes, datasets and supporting materials are publicly available at http://cnerg.org/permanence/ . The first author of the paper is financially supported by Google India PhD Fellowship Grant for Social Computing. The authors from University of Nebraska are supported by College of IS&amp;T, the Graca grant for UNO-SPR and the RISC Fellowship. [1] http://cse.iitkgp.ac.in/resgrp/cnerg/Files/ [2] A. Arenas, A. Fern  X andez, and S. G  X omez. Analysis of [3] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and [4] T. Chakraborty, S. Sikdar, V. Tammana, N. Ganguly, [5] T. Chakraborty, S. Srinivasan, N. Ganguly, [6] A. Clauset, M. E. J. Newman, and C. Moore. Finding [7] L. Danon, A. Diaz-Guilera, J. Duch, and A. Arenas. [8] S. Fortunato. Community detection in graphs. Phys. [9] S. Ghosh, A. Banerjee, N. Sharma, S. Agarwal, and [10] M. Girvan and M. E. Newman. Community structure [11] B. Good, Y. D. Montjoye, and A. Clauset.
 [12] L. Hubert and P. Arabie. Comparing partitions. [13] B. Karrer, E. Levina, and M. E. J. Newman.
 [14] V. Labatut. Generalized measures for the evaluation [15] A. Lancichinetti and S. Fortunato. Benchmarks for [16] A. Lancichinetti and S. Fortunato. Limits of [17] A. Lancichinetti and S. Fortunato. Consensus [18] J. Leskovec, K. J. Lang, A. Dasgupta, and M. W. [19] J. Leskovec, K. J. Lang, and M. Mahoney. Empirical [20] C. D. Manning, P. Raghavan, and H. Sch  X  utze. [21] M. E. Newman. Modularity and community structure [22] M. E. J. Newman. Fast algorithm for detecting [23] M. E. J. Newman. Spectral methods for community [24] P. Pons and M. Latapy. Computing communities in [25] M. Rosvall and C. Bergstrom. An [26] M. Rosvall and C. T. Bergstrom. Maps of random [27] K. Steinhaeuser and N. V. Chawla. Identifying and [28] J. Yang and J. Leskovec. Defining and evaluating
