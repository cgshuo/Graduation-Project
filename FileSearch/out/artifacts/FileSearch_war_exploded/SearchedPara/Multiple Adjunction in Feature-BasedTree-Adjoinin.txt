 CNRS, LORIA Universit  X e de Lorraine, LORIA In parsing with Tree Adjoining Grammar (TAG), independent d erivations have been shown by is not directly applicable to Feature-Based TAGs (FB-TAG). We provide a recognition algorithm for FB-TAG that supports both dependent and independent der ivations. The resulting algorithm semantic dependencies on the other hand. 1. Introduction
A Tree Adjoining Grammar (TAG; Joshi and Schabes 1997) consi sts of a set of elemen-tary trees and two combining operations, substitution and a djunction. Consequently, a
TAG derivation can be described by a tree (called a derivation tree ) specifying which elementary TAG trees were combined using which operations t o yield that derivation.
In this tree, each vertex is labeled with a tree name and each e dge with a description of the operation (node address and operation type) used to co mbine the trees labeling its end vertices. As we shall see in Section 3.2, in TAG, each d erivation tree specifies a unique parse tree, also called derived tree .
 approximation of semantic dependencies between the words o f a sentence (Kroch 1989; Rambow, Vijay-Shanker, and Weir 1995; Candito and Kahane 19 98; Kallmeyer and
Kuhlmann 2012). As shown by Schabes and Shieber (1994), howe ver, there are several possible ways of defining TAG derivation trees, depending on how multiple adjunc-tion of several auxiliary trees at the same tree node is handl ed. The standard notion of derivation proposed by Vijay-Shanker (1987) forbids multiple adjunct ion, thus enforcing dependent derivations. In contrast, the extended notion of derivation proposed by Schabes  X  and Shieber (1992, 1994) allows multiple adjunction at a sin gle node, thereby yielding so-called independent derivations (i.e., derivations where the relation between the ad-joining trees is left unspecified). The difference between t he two types of derivations is illustrated in Figure 1. While in the standard (dependent) d erivation, one adjective tree in the extended (independent) derivation, both adjective t rees adjoin to the noun tree. dent derivations better reflects linguistic dependencies. Making use of the distinction in-troduced in TAG between predicative and modifier auxiliary t rees (Schabes and Shieber (1994), Section 3.1), they define a parsing algorithm that as signs dependent derivations to predicative auxiliary trees but independent derivation s to multiple modifier auxiliary trees adjoining to the same node. In case both predicative an d modifier auxiliary trees adjoin to the same node, their parsing algorithm ensures tha t predicative trees appear above the modifier trees in the derived tree.
 implemented TAGs (e.g., XTAG [The XTAG Research Group 2001] , SemXTAG [Gardent 2008], or XXTAG 1 [Alahverdzhieva 2008]) feature structures and feature uni fication are central. They are used to minimize the size of the grammar ; to model linguistic phenomena such as verb/subject agreement; and to encode a un ification-based syn-tax/semantics interface (e.g., Gardent and Kallmeyer 2003 ).
 (FB-TAG); and we show that the resulting parsing algorithm n aturally accounts for the interplay of dependent vs. independent derivation structu res with syntactic constraints, linear ordering, and scopal vs. nonscopal semantic depende ncies.
 independent derivations put forward by Schabes and Shieber (1994) and we briefly discuss the interactions that may arise between dependent a nd independent deriva-tions. Section 3 summarizes their approach. In Section 4, we present the intuitions and motivations underlying our proposal and we highlight the di fferences with Schabes and
Shieber X  X  approach. Section 5 presents our proposal. Secti on 6 concludes. 2. Why Are Independent Derivations Desirable?
We start by summarizing Schabes and Shieber X  X  motivations f or independent derivations. We then discuss the interactions between depe ndent and independent derivations. 42 2.1 Motivations for Independent Derivations tions. The first motivation concerns the interaction of verb s with multiple modifiers.
Consider sentences 2 in Examples (1) and (2). (1) a. Richard Parker and Pi wandered the Algae Island yester day through the (2) a. N The Orangutan reminded Pi of his mother yesterday through th e the meerkats , whereas verbs such as to remind do not. In TAG, such restrictions can be modeled using selective adjoining constraints to specify w hich modifier tree may or may not be adjoined at a particular node in a given tree. There fore, it is possible to license (1) and to rule out (2c). In Example (2a), however, un der the dependent notion of adjunction, the tree for the directional adverbial through the meerkats will adjoin to the constraints placed by the verb on its modifiers must be passed through by modifier trees (here, the tree for yesterday ) to also rule out sentences such as Example (2a). Propagatin g selective adjunction constraints in TAG would lead to a form alism for which derivation trees are no longer context-free (Schabes and Shieber 1994) .
 proaches. Stochastic lexicalized TAG specifies the probabi lity of an adjunction of a given auxiliary tree at a given node in another elementary tree (Re snik 1992; Schabes 1992).
Thus, under the standard notion of derivation, the overall p robability of the string roasted red pepper would be determined by the probability of red adjoining to pepper and the probability of roasted adjoining to red . In contrast, independent adjunction would result in a derivation such that the overall probability of t he string roasted red pepper would be determined by the probability of both red and roasted adjoining to pepper .
Schabes and Shieber (1994, page 97) argue that it is plausibl e that  X  X he most important relationships to characterize statistically are those bet ween modifier and modified, rather than between two modifiers. X  biguities involving modifiers. Given a sentence such as Exam ple (3), where the relative scope of the modifiers twice and intentionally is ambiguous, under the extended definition of adjunction, a synchronous T AG modeling the relation between syntactic trees and logical formulae can account fo r both readings. ifier trees to the tree for blink : Depending on which order the auxiliary trees for twice and intentionally adjoins to blink , the logical formula built will be either intention-ally(twice(blink)) or twice(intentionally(blink)) , thus capturing the ambiguity. 2.2 Dependent, Independent, and Mixed Derivations
To capture the different types of semantic dependencies and morpho-syntactic con-straints that may hold between multiple auxiliary trees adj oining to the same entity, both dependent and independent derivations are needed.
 between each of them, multiple intersective modifiers apply ing to the same entity (Example (4)) are best modeled using an independent derivat ion. constraints, stacked predicative verbs (i.e., verbs takin g a sentential complement,
Example (5a)) and non-intersective modifiers (Example (5c) ) require dependent deriva-tions. Consider sentences (5a X  X ), for instance. If predica tive trees were assigned an independent derivation, sentence (5a) would be judged ungr ammatical (because want requires an infinitival complement but would adjoin to the fin ite verb slept ) and con-versely, sentence (5b) would incorrectly be judged grammat ical (because both want and try require an infinitival complement). Similarly, in Example ( 5c), the church is
Syrian Orthodox, not Syrian and Orthodox. Assigning a depen dent rather than an inde-pendent derivation to such cases straightforwardly captur es the distinction between intersective and non-intersective modifiers. (5) a. X John wanted to assume that Peter slept. (Dependent derivati on) derivations, for example, when multiple modifiers and predi cative verbs adjoin to the same verb (Example (6a)) or in the case of a derivation (Examp le (6b)) involving both intersective (old) and non-intersective (i.e., Syrian in S yrian Orthodox) modifiers. (6) a. Yann said that John knows that Richard Parker and Pi wan dered the Algae dent, independent, and mixed derivations but is restricted to appropriately distinguish between various types of modifiers. Moreover, the feature in formation encoded in the grammar further restricts the derivation structures produ ced, thereby accounting for the interactions between adjunction, linear ordering, and morpho-syntactic constraints. 3. Multiple Adjunction in Tree Adjoining Grammars
Grammars (LIGs; Gazdar 1988) that makes the derivation proc ess explicit. Schabes and 44
Shieber (1994) modify this compilation to allow for both dep endent and independent derivations. The resulting LIG is further exploited to spec ify a parsing algorithm that recovers those derivations.
 with an informal description of their approach. In Section 3 .2, we introduce ordered derivation trees. Section 3.3 provides a brief introductio n to LIG. Section 3.4 summa-rizes the TAG-to-LIG compilation proposed by Vijay-Shanke r and Weir (1991). Finally,
Section 3.5 describes the modifications introduced by Schab es and Shieber (1994) to allow both for dependent and for independent derivations. 3.1 Schabes and Shieber X  X  Proposal: Motivations and Intuit ions
Tree Adjoining Grammar distinguishes between two types of a uxiliary trees, namely, modifier vs. predicative auxiliary trees (Joshi and Vijay-S hanker 2001). Whereas pred-icative trees are assigned to verbs taking a sentential argu ment, modifier trees are assigned to all other auxiliary trees (e.g., verbal auxilia ries, adjectives, adverbs, prepo-sitions, and determiners). More generally, the difference between a predicative and a sponds to an argument node selected by its lexical anchor (i. e., the word that selects that tree) whereas in a modifier auxiliary tree, the foot node is an open slot corresponding to the phrase being modified. When associating semantic enti ties with tree nodes (as proposed, for example, by Joshi and Vijay-Shanker [2001] an d Gardent and Kallmeyer [2003]), this difference can be seen by noting the entities a ssociated with root and foot nodes: These are distinct in a predicative tree but identica l in modifier trees. tematically associates dependent derivations with predic ative auxiliary trees and in-dependent derivations with modifier auxiliary trees. In add ition, they introduce two mechanisms to ensure that each derivation tree unambiguous ly specifies a linguistically plausible derived tree.
 node (which are thus ambiguous with respect to the derived tr ee they describe) by assuming that derivation trees are ordered and that linear p recedence (LP) statements can be used to constrain the order of siblings in a derivation tree. For instance, given the independent derivation shown in Figure 1, an LP statemen t stating that  X  occur before  X  roasted in the derivation tree will ensure that  X  the derived tree and therefore that the resulting derived tr ee yields the phrase roasted red pepper rather than red roasted pepper .
 predicative trees always occur above all modifier trees in th e derived tree ( X  X utermost predication X ). This ensures, for instance, that under the r eading where yesterday refers to the arriving rather than the saying (i.e., when both say and yesterday adjoin to arrive ),
Example (7a) is derived but not Example (7b). (7) a. X Peter says that yesterday John arrived late. 3.2 Ordered Derivation Trees In the standard version of TAG, each derivation tree describ es a unique derived tree.
In the case of a dependent derivation, unicity follows from t he fact that dependent
Ordered derivation tree and corresponding derived tree.  X  ,  X   X  derivations specify the order in which adjunction takes pla ce (e.g.,  X  and the result to  X  ). As a result, if  X  2 adjoins to  X  1 tree X  X amely, a tree where  X  2 appears above  X  1 .
 possible, depending on the order in which the auxiliary tree s are adjoined. To ensure a unique mapping from derivation to derived tree, Schabes an d Shieber (1994) therefore introduce the notion of ordered derivation trees . Ordered derivation trees differ from standard TAG derivation trees in that (i) they may contain si bling edges labeled with the same address, and (ii) they specify a total order on such s iblings.

As indicated by the shared g address on their parent edge, auxiliary trees  X  adjoin to the same node X  X amely, the node with address g in the elementary tree  X  .
Because the derivation tree is ordered,  X  1 will appear below  X  which in turn will be below  X  3 , and so on. In short, given a set of auxiliary trees all adjoining to the same tree node, the derived tree produced fr om an ordered derivation tree following an independent derivation will be identical to the derived tree produced with the corresponding dependent derivation X  X hat is, the d ependent derivation where  X  , ...,  X  n appear in increasing index order from top to bottom. 3.3 Linear Indexed Grammar
Like context-free grammars, LIGs (Gazdar 1988) are string r ewriting systems where strings are composed of terminals and nonterminals. In a LIG , however, nonterminal symbols may be associated with a stack of symbols, called indices . A LIG rule can thus be represented as follows:
N and N i are nonterminals whereas  X  and  X  i are strings of stack symbols. The symbol .. stands for the remainder of the stack symbols. Note that the r emainder of the stack sym-bols associated with the left-hand side is associated with o nly one of the nonterminal (namely, N i ) on the right-hand side. 46 1991) to provide a common framework for the extensions of con text-free grammars. In particular, Vijay-Shanker and Weir (1991, 1993) showed a we ak equivalence between
LIGs, TAGs, and combinatory categorial grammars (Steedman 2000) and proposed a LIG-based polynomial-time CYK recognition algorithm for TAGs and combinatory categorical grammars. In what follows, we show how Schabes a nd Shieber (1994) use a
LIG variant of TAGs to license both dependent and independen t derivations. 3.4 TAG to LIG Compilation The TAG-to-LIG compilation proposed by Vijay-Shanker and W eir (1991) produces
LIG rules that simulate a traversal of the derived tree produ ced by the original TAG grammar. In these LIG rules, each node  X  of a TAG elementary tree is viewed as having both a top t [ .. X  ] and a bottom b [ .. X  ] component to account for the possibility of an adjunction. Figure 3 illustrates the traversal of the TAG-d erived trees specified by the LIG resulting fromVijay-Shanker and Weir (1991) TAG-to-LI G compilation.
 to a unique node in some elementary tree of the grammar. The in ner stack symbols are used to keep track of the nodes higher in the derived tree wher e an auxiliary tree has been adjoined.
 node  X  and the top of its immediate daughters in two configurations, depending on whether  X  dominates the foot node (Type 1) or not (Type 2). Rules of Type 3 handle nodes that require neither substitution nor adjunction. Th is rule handles cases where no adjunction occurs at a node by rewriting the top of this nod e to its bottom. Rules of Type 6 model substitution. Finally, rules of Types 4 and 5 h andle adjunction. They specify that, for any given node  X  and any auxiliary tree  X  that may adjoin to  X  , the top of  X  rewrites to the top of the root node of  X  ; and the bottom of the foot of  X  to the bottom of  X  . It follows that there can be no multiple adjunction in this L IG version of TAG. 3.5 Modifying the TAG to LIG Compilation to Allow for Multipl e Adjunctions
To associate predicative tree adjunctions with dependent d erivations and multiple mod-ifier adjunctions with independent derivations, Schabes an d Shieber (1994) modify the compilation of TAG to LIG, proposed by Vijay-Shanker and Wei r (1991) as sketched in Figure 5. Type 4(a) rules apply to adjunctions involving p redicative trees. They are identical to Type 4 rules in the Vijay-Shanker and Weir X  X  app roach and therefore enforce a standard (dependent) derivation for predicative trees. I n contrast, Type 4(b) rules apply to adjunctions involving modifiers and result in an ind ependent derivation. occur above modifier trees adjoined at the same node) alluded to in Section 3.1 follows from the interactions between the Type 4(a) and Type 4(b) LIG rules.

Standard and Extended derivation using the LIG compilation . They also propose a recognition and a parsing algorithm with complexity of O ( n 4. Multiple Adjunction in Feature-Based TAG
In this section, we explain why a straightforward extension of Schabes and Shieber X  X  proposal to FB-TAG would not work and we outline the intuitio ns and motivations underlying our approach. Section 5 will then introduce the d etails of our proposal. 48 4.1 Feature-Based Tree Adjoining Grammar
We start by a brief description of FB-TAG and of the unificatio ns performed during derivation. FB-TAG was introduced by Vijay-Shanker (1987) and Vijay-Shanker and
Joshi (1988, 1991) to support the use of feature structures i n TAG. Figure 6 shows a toy FB-TAG for illustration.
 structures. Nonterminal and foot nodes are decorated with t wo feature structures called top (T) and bottom (B), and substitution nodes are decorated with a single top feature structure. During derivation, feature structure unificati on constrains tree combination, as illustrated in Figure 7. Substitution unifies the top feat ure structure of a substitution node with the top feature structure of the root node of the tre e being substituted. The adjunction of an auxiliary tree  X  to a tree node  X  o unifies the top and bottom feature structures of  X  o with the top feature structure of the root node of  X  and the bottom feature structure of its foot node, respectively. Finally, at the end of the derivation, the top and bottom feature structures of all nodes in the derived tree are unified.
Det NP* [] [] all grammar shown in Figure 6, and Figure 9 shows the correspondi ng derived and deriva-tion trees. As can be seen, the feature constraints encoded i n the grammar correctly ensure that all the meerkats can be derived (leftmost derivation tree in Figure 9) but not the all meerkats (rightmost in Figure 9). The incorrect derivation is blocke d by the feature structure [ det : nil ] on the foot of the auxiliary tree  X  4.2 Why a Simple Extension of the LIG Framework to FB-TAG Will Not Work
To motivate our approach, we start by considering a simple ex tension of Schabes and Shieber X  X  LIG framework to FB-TAG, where each LIG rule en forces unifications mimicking those applied in FB-TAG. In particular, let us ass ume that Type 3 rules 50 ( X  X o adjunction X ) unify the top and the bottom feature struc tures of nodes where no adjunction occurs, and Type 4(b) rules ( X  X tart root of adjun ction X ) unify the top feature (  X . T ) of the node (  X  ) being adjoined to with the top feature structure (  X  node (  X  r ) of the auxiliary tree being adjoined: 4 in the case of an independent multiple adjunction. Intuitiv ely, the reason for this is that, in Schabes and Shieber X  X  approach, multiple adjuncti on starts and ends from the bottom component of the node being adjoined to. This is fin e when no features are involved because the category of the node being adjoined to is always identical to the root and foot node of the auxiliary trees being adjoine d. When nodes carry feature structures, however, a unification clash can occur t hat makes derivation fail.
Thus, in our example, derivation incorrectly fails because the bottom feature structures of the root node of the auxiliary tree for all and the bottom feature structure of the root node of the auxiliary tree for the should unify but have conflicting value. As shown by the dependent derivation for all the meerkats depicted in Figure 8, this is incorrect. 4.3 Proposal: Intuition and Motivations
As we just saw, in the case of multiple independent adjunctio ns, a straightforward extension of Schabes and Shieber X  X  LIG framework to FB-TAG f ails to correctly cap-ture the unification constraints encoded in the grammar. Mor e generally, when ex-tending multiple independent adjunction to FB-TAG, it is cr ucial that the feature constraints encoded by the linguist describe the same set of derived trees no matter which derivation tree is produced. We therefore propose a pa rsing algorithm that, given several auxiliary trees  X  1 , . . . ,  X  n adjoining at the same node  X  unifications independently of whether the derivation is dep endent, independent, or mixed dependent/independent.
 to a single node  X  o . While it depicts the unifications enforced by our parsing al gorithm for the derivation tree shown on the right hand side (i.e., fo r the independent adjunction enforced by a dependent adjunction of  X  2 into  X  1 into  X  on a single node (here  X  o ), the unification constraints of FB-TAG require that the bot tom feature structure of the foot of an auxiliary tree which appe ars higher in the derived tree (here,  X  2 ) unifies with the bottom feature structure of the root of the a uxiliary tree appearing immediately below it in the derived tree (her e  X  the root of the node to which it adjoins (here  X  o ). In other words, while a multiple adjunction on  X  o operates on  X  o only, a correct implementation of FB-TAG unification constraints requires keeping track of the feature structur es associated with the auxiliary trees successively adjoining to  X  o .
 not with feature structures but with reference variables po inting to feature structures.
The parsing algorithm is then specified so as to support depen dent, independent, and mixed derivations while enforcing the same unifications as w ould be performed under a dependent adjunction. 4.4 Comparison With Schabes and Shieber X  X  Approach
Before giving the technical details of our parsing algorith m (Section 5), we first highlight some differences between our and Schabes and Shieber X  X  appr oach. In particular, we show that (i) whereas Schabes and Shieber resort to three d istinct mechanisms to account for word order constraints (i.e., selective adjo ining constraints, linear 52 precedence statements on derivation trees, and a constrain t on parsing), the FB-
TAG approach supports a uniform treatment of word order and ( ii) our approach straightforwardly accounts for mixed dependent/independ ent derivations that would require some additional stipulation in Schabes and Shieber  X  X  approach. 4.4.1 Ordering Constraints among Modifier Auxiliary Trees. In TAG, determiners and verbal auxiliaries are modifier rather than predicative auxiliary trees (cf. Section 3.1). Because
Schabes and Shieber X  X  definitions systematically associat e modifiers with independent derivations, all examples in (11a X  X ) undergo an independen t derivation and constraints must therefore be provided to determine the order of the sibl ing nodes in the resulting derivation tree. (11) a. X The sonatas should have been being played by Sarah. and strict ordering constraints on temporal and spatial adv erbial phrases in German), Schabes and Shieber (1994) suggest the use of LP constraints on derivation tree siblings. As illustrated by the derivation of Example (11c X  X ) in Figur es 8 and 9, in the FB-
TAG approach, such additional constraints are unnecessary : They simply fall out of the feature constraints encoded in the grammar.
 dent adjunction, the word ordering constraints used by Scha bes and Shieber would fail to account for cases such as Example (12), where auxiliary ve rbs are interleaved with adverbs.
Schabes and Shieber X  X  constraint that predicative trees ad join above modifier trees would preclude the derivation of Example (12) and incorrect ly predict the derived sentence to be John has been often selected for nomination . 4.4.2 Ordering Constraints among Predicative Trees. As discussed by Schabes and Shieber (1994), auxiliary predicative trees may impose different c onstraints on the type of sen-tential complement they accept. Thus Example (13a) is corre ct but not Example (13b) because want expects an infinitival complement (previously shown in Exam ple (5)). (13) a. X John wanted to assume that Peter slept. used to license Example (13a) and rule out Example (13b), in t he FB-TAG approach, this can be achieved using feature constraints. 4.4.3 Ordering Constraints between Predicative and Modifie r Auxiliary Trees. In sentences such as Example (14a) where both modifier and predicative aux iliary trees adjoin to the same address, the predicative trees should generally adjoi n above any modifier trees so that the predicative verb precedes the modifier in the derive d string. (14) a. X John promised that Peter will leave tomorrow. duces the outermost-predication rule , which stipulates that predicative trees adjoin above modifier auxiliary trees. In contrast, the FB-TAG appr oach allows both orders and lets feature constraints rule out ungrammatical senten ces such as Example (14b).
This allows the approach to directly extend to a counter-exa mple discussed by Schabes and Shieber (1994), where a modifier (here, At what time ) must in fact adjoin above a predicative tree. (15) At what time did Brockway say Harrison arrived? interpretation where it is the time of arriving (rather than the time of saying) which is questioned. These derivation trees show the two possible relative orderings of the (predicative) auxiliary tree for say and the (modifier) auxiliary tree at what time .
Because the Outermost-Predication rule requires that pred icative trees adjoin above modifier trees (and thus occur outermost in the derivation tr ee), in Schabes and
Shieber X  X  approach, only the right-hand side derivation is possible, thus failing to derive sentence (15). In contrast, because our approach doe s not explicitly constrain the relative ordering of predicative and modifier auxiliary tre es adjoining to the same node, both derivations are possible, thereby licensing both Exam ple (15) and the sentence
Did Brockway say at what time Harrison arrived? 4.4.4 Mixed Dependent and Independent Multiple Adjunction s. In Schabes and Shieber X  X  approach, all modifier auxiliary trees undergo independent derivation. As shown in
Section 2.2, however, non-intersective modifiers arguably license a dependent deriva-tion while some cases of multiple adjunction may involve bot h a dependent and an independent derivation. As we shall see in Section 5, our FB-TAG approach accounts for such cases by allowing both for independent and dependen t derivations, by ruling out dependent derivations for intersective modifiers and by using feature constraints to regulate the interactions between multiply adjoining auxi liary trees. 5. Extending Schabes and Shieber X  X  LIG Framework for FB-TAG s
We now propose a compilation of FB-TAG-to-LIG that makes bot h dependent and independent derivations in FB-TAG explicit. We use this res ulting LIG to specify an 54
Earley algorithm for recovering multiple adjunctions in FB -TAG. This compilation differs in two main ways from that proposed by Schabes and Shi eber (1994). First, tree nodes are associated with reference variables pointing to f eature structures. Second, the
LIG rules are modified and extended with unification operatio ns. 5.1 Feature Structures and Reference Variables
To account for FB-TAG unifications while allowing for indepe ndent derivations, we re-place the feature structures of FB-TAG with reference varia bles pointing to those feature structures. Each node in the elementary trees is decorated w ith two reference variables:
The top reference variable P T contains the reference to the top feature structure T and the bottom reference variable P B contains the reference to the bottom feature structure B . The top and the bottom feature structures of a node  X  can be traced by val (  X . P decorating the node  X  , and the function val ( P ) returns the feature structures referred to by the reference variable P .
 appropriate unifications, as follows. In an independent der ivation where the node  X  is adjoined to, first by  X  1 and second by  X  2 , the bottom feature structure  X  unifies with the bottom feature structure  X  f 1 . B of the foot of  X  to the bottom reference variable  X  r 1 . P B of the root of  X  node will therefore correctly be unified, not with the bottom feature structure of  X  with that of  X  r 1 . 5.2 LIG Rules with Unification Operations
To support both dependent and independent derivations whil e enforcing the correct unifications, we modify the TAG-to-LIG compilation in such a way that the resulting
LIG rules capture the tree traversal depicted in Figure 13. I ndependent derivations are accounted for by the fact that adjunction starts and ends at t he bottom component of the node being adjoined to (Type 4 and 5 rules). Our LIG compil ation automatically supports dependent derivations by allowing sequential adj unctions at the roots of auxiliary trees.
Type 4: Start root of adjunction. For each elementary tree node  X  that allows the adjunc-
Type 5: Start foot of adjunction. For each elementary tree node  X  that allows the adjunc-
Type 6: Start substitution. For each elementary tree node  X  that allows the substitution (as depicted in Figure 11), we split Type 3 rules into two subt ypes. Type 3(a) rules apply to the root of auxiliary trees and perform no unificatio n. By no unification, they ensure that feature structures are not blocked for the possi bility of the adjunction of the following auxiliary tree and allow for the correct unific ations to be carried out for independent derivations. Type 3(b) rules function as termi nation of multiple adjunction by unifying the top and bottom feature structures of the node . It is applicable to all tree nodes except roots of auxiliary trees.

Type 3(a): Terminating adjunction at the root of the auxiliary tree. For each root node  X  of
Type 3(b): Terminating adjunction at any other node. For each node  X  that is not a root
For example, given two auxiliary trees  X  1 and  X  2 adjoining at the node  X  in an ele-mentary tree  X  , a dependent derivation will occur whenever the Type 4 rule a pplies to predict the adjunction of, for example,  X  2 at the root of  X  rule applies at the root of  X  1 , recognition will move from the top of the root of  X  its bottom, allowing for Type 5 rule to complete the adjuncti on of  X  the Type 4 rule applies to predict the adjunction of  X  2 at the node  X  of  X  , registering an independent derivation. 56 5.3 Parsing Algorithm
In this section, we present our parsing algorithm for FB-TAG s with dependent and in-dependent derivations. We start with an informal descripti on of how the algorithm han-dles the interactions between unification and independent d erivations. We then go on to specify the inference rules making up the algorithm. We do this in two steps. First, we present a basic set of rules allowing for both dependent and i ndependent derivations.
Second, we show how to constrain this algorithm to minimize s purious ambiguity. 5.3.1 Independent Derivations and Feature-Structure Unifi cation. Before specifying the pars-ing algorithm, we illustrate by means of an example the inter play between multiple independent adjunction and feature structure unifications .
 recognition process of a multiple independent adjunction. The linear ordering of the equations reflects the order of the parsing completion opera tions.
 ing the bottom feature structure of the foot node of  X  1 with the bottom feature structure assigned to the bottom feature structure of the root of  X 
Also, the reassignment ensures that the follow-up adjuncti on of  X  has access to the bottom feature of the root of the previous au xiliary tree  X  that the top and the bottom features of the root of the last aux iliary tree (here,  X  adjoined are unified (  X  r 2 . T  X   X  r 2 . B ). signment follows from the proposed Earley algorithm. Type 4 completor rules complete the prediction triggered at the root of an auxiliary tree ( X  X  tart root of adjunction X ) and
Type 5 completor rules complete the prediction triggered at the foot node of an auxiliary tree ( X  X tart foot of adjunction X ). Because completion oper ates bottom X  X p, it follows that
Type 5 rules apply before Type 4 rules. Thus, when adjoining a n auxiliary tree  X  node  X  o , the Type 5 completor rules, unifying the bottom feature str ucture of the foot node of  X  1 with the bottom feature structure of the node  X  completor rules, which reassign the bottom reference varia ble of  X  structure of the root of  X  1 . 5.3.2 Inference Rules. The parsing algorithm for FB-TAG is a modification of the algo rithm presented by Schabes and Shieber (1994). It is a chart-based parsing method based on the Earley type deduction system. Each item in the chart is of the format h N [ .. X  ]  X  and l are markers in the input string, showing the recognized port ion: item starts in position i , ends in position l , and if  X  dominates a foot node, the tree dominated by the foot node starts in j and ends in k . If the foot node is not dominated by the recognized nonterminal sequence  X  , the values for j and k are taken to be the dummy value  X   X   X . As in Earley algorithms, the  X  separates the nonterminal sequence  X  which was parsed from the nonterminal sequence  X  yet to be parsed.
 identical to those introduced by Schabes and Shieber (1994) and do not involve any unification operations.
 are not the root of an auxiliary tree, and the Type 3(a) comple tor rule prevents top and bottom unification at the root of auxiliary trees.
 on completion of an adjunction at node  X  , the bottom feature structure of  X  is reassigned to the bottom feature structure labeling the root of the auxi liary tree. In this way, the unifications occurring in an independent derivation will mi rror those occurring in a dependent one in that any following adjunction will induce u nifications as if it were happening at the root node  X  r of the preceding auxiliary tree (not at  X  ). auxiliary tree has been recognized), the Type 5 completor ru le unifies the bottom feature structure of the foot of the auxiliary tree with the bottom fe ature structure of the adjunction site.
 with the top feature structure of the root of the tree being su bstituted. 58 whose span extends to l +1. variables taking the value t or b .  X  ,  X  , and  X  are the sequences of LIG nonterminals associated with stacks of node indices.  X  is a sequence of node indices. between i and l (i.e., w i + 1 . . . w l ). Therefore, t [  X  with the substring recognized by the foot subtree. The opera tion  X  is defined as follows: tree rooted in  X  . Once the auxiliary tree dominated by b [ .. X  ] has been recognized, the auxiliary tree itself is completely recognized. As explain ed earlier, there is in this case no feature unification between the top and the bottom of the ro ot of the auxiliary tree. structures for all nodes that are not the root node of an auxil iary tree.  X  and the subtree dominated by the node  X  (below b [ .. X  ]) are completed, hence b [ .. X  ] can be completely recognized with this adjunction. The asso ciated feature unification unifies the content of the top reference variable of the adjoi ning node site  X  with the content of the top reference variable of the root node  X  r
After the successful adjunction of this adjoining tree, the bottom reference variable of the adjoining node site  X  is reassigned to the content of the bottom reference variabl e of the root node  X  r of the adjoined auxiliary tree. and the bottom part of the adjoining node site  X  has been recognized. The associated feature unification unifies the content of the bottom referen ce variable of the adjoining node site  X  with the content of the bottom reference variable of the foot node  X  auxiliary tree being adjoined. feature unification unifies the content of the top reference v ariable of the node  X  with the content of the top reference variable of the root node  X  form h t [  X  s ]  X   X   X  , 0,  X  ,  X  , 0 i for each rule t [  X  tree labeled with the start symbol. Given an input string w the goal items in the chart are of the form h S  X  t [  X  s item is found in the chart, the recognition process succeeds and the string is successfully accepted by the grammar; otherwise it is rejected. We refer t he reader to Appendix A (cf. Figure A.2) for a detailed example of the recognition of the sentence all the meerkats using the proposed inference system.
 rules (i.e., generated grammar rules maintaining the full i nformation of nonterminals and the associated index stacks), it is possible to define a mo re efficient algorithm by having reduced LIG rules and chart items listing only the sin gle top stack element for each constituent (Vijay-Shanker and Weir 1991, 1993). T he resulting recognition 60 algorithm is still complete because the proposed TAG-to-LI G compilation maintains a one-to-one correspondence between the generated rules an d their reduced forms (Schabes and Shieber 1994).
 turned into a parsing algorithm by associating a set of opera tions with each chart item to build up associated derived trees.
 the (dependent and/or independent) derivation trees of an F B-LTAG and are therefore context-free. 5.3.3 Handling Spurious Parses. As explained at the end of Section 5.2, the parsing algorithm presented in the previous section systematicall y allows for dependent and independent adjunction. For example, the recognition of th e sentence all the meerkats (Figure A.2) produces both dependent and independent deriv ations that are not re-jected by the unification constraints. In Section 2.2, howev er, we argued that different types of auxiliary trees license different types of derivat ions. To capture these distinc-tions, we modify the recognition algorithm so that it associ ates scopal auxiliary trees (Example (16a X  X )) with dependent derivations only and mult iple intersective modifier auxiliary trees (Example (16c)) with only an independent de rivation. (16) a. John thinks that Peter said that the meerkat left.
TAG-to-LIG transformation so that, given two intersective modifier trees  X  no Type 4 or Type 5 rule is produced.

Type 4: Start root of adjunction. For each elementary tree node  X  in tree  X 
Type 5: Start foot of adjunction. For each elementary tree node  X  that allows the adjunc-
Figure A.2, the following rules will not be produced, thereb y blocking the production of the dependent derivation. a flag scopal? to states in the parsing algorithm. The Type 4 Completor rule s associated with scopal modifiers are modified to mark the progress of a sco pal adjunction and to block the independent adjunction of another scopal modifier at the same node.
Type 4 Completor: at some node  X  , the bottom component of the node  X  is marked with True , recording that a scopal adjunction has occurred at node  X  and that it therefore should not accept any further scopal adjunction.
 manner as the derivation of all the meerkats depicted in Appendix Figure A.2, but it will fail to produce the chart items (40, 42, ... , 52)associated with the independent adjunction. Therefore, only the dependent derivation will be produced.
 adjunction. Therefore, it successfully recognizes the sen tence At what time did Brockway say Harrison arrived? , shown in Example (15), where a wh -modifier needs to be adjoined above a predicative adjunction. Figure 15 shows the complet e recognition algorithm modified to rule out spurious parses in the case of multiple sc opal auxiliary trees and intersective modifier auxiliary trees. 5.3.4 Weak Generative Equivalence. The weak-generative equivalence refers to the set of strings characterized by the formal system. In contrast, th e strong-generative equiva-lence relates to the set of structural descriptions (such as derivation trees, dags, proof trees, etc.) assigned by a formal system to the strings that i t specifies (Vijay-Shankar and Joshi 1985; Joshi 2000).
 we can prove the weak-generative equivalence of TAGs under t he dependent and our independent derivations. We call the set of languages gener ated by the standard deriva-tion in TAG, TAL std ; the set of languages generated by Schabes and Shieber X  X  ext ended derivation in TAG, TAL ext
FB-TAG, TAL ext ; and the set of languages generated by the LIG, LIL . Our derivation allows both dependent and independent derivations; theref ore, our derivation will recognize all the strings recognized by the standard (depen dent) derivation. More precisely, our derivation can mimic the standard derivatio n by not allowing more than one adjunction on a tree node by treating all auxiliary trees as scopal auxiliary trees (cf. Section 5.3.3), henceforth, TAL std  X  TAL ext . The proposed compilation from TAGs to LIGs for the independent derivation concluded TAL ext  X  LIL . Finally, LIL  X  TAL has been proven by Vijay-Shanker (1987). Combining these th ree inclusions, we can conclude that TAL std = TAL ext . In addition, Schabes and Shieber (1994) have shown three derivations in TAGs, TAL std = TAL ext descriptive ability without affecting their generative ca pacity (Vijay-Shanker and Joshi 1988). The proposed algorithm simulates the established un ification mechanism in FB-
TAG without affecting the representation and the stipulati ons (e.g., null adjunction at 62 the foot node and the bounded feature structures) of the gram mar itself. Therefore, the association with feature structures will not affect thi s equivalence. 6. Conclusion
Although independent derivations have been shown by Schabe s and Shieber (1994) to be essential for correctly supporting syntactic analysi s, semantic interpretation, and statistical language modeling, the parsing algorithm they propose is restricted to TAG and is therefore not directly applicable to large scale impl emented Feature-Based TAGs.
We have provided a recognition algorithm for FB-TAGs that su pports both dependent and independent derivations under certain restrictions en forced jointly by feature con-straints and by side conditions in the parsing algorithm. Th e resulting algorithm com-bines the benefits of independent derivations with those of F eature-Based Grammars.
In particular, we showed that it accounts for a range of inter actions between dependent vs. independent derivation on the one hand, and syntactic co nstraints, linear ordering, and scopal vs. nonscopal semantic dependencies on the other hand.
 Appendix A: Recognition of the String all the meerkats
We show the recognition of the string all the meerkats as per the inference rules described in Section 5.3.2.
 tion in FB-TAG, it implements two main modifications. First, to facilitate the TAG to
LIG compilation, each tree node in the grammar is marked with a unique identifier. For example, in Figure A.1, NP mk , NP the r , Det the , NP the node identifiers in the grammar. Second, to implement the rea ssignment mechanism in
NP 64 the parsing algorithm, the top ( T ) and the bottom ( B ) feature structures of each node are assigned reference variables P T and P B , respectively.
 tion 5.3.2: The LIG rules shown in Figure A.1 does not deal wit h spurious parses and produces all valid derivations, dependent or independent, that are not blocked by fea-pendent (Step 52) and dependent (Step 53) derivations. As ex plained in Figures A.3 and
A.4, both derivations undergo the identical set of feature u nifications. In both figures, prediction rules are abbreviated because they do not enforc e any feature unification. 66 68 Acknowledgments References
