 SUKHDEEP SINGH, ANUJ SHARMA, and INDU CHHABRA , Department of Computer One of the challenging areas of research in pattern recognition is handwriting recog-nition. A lot of work has been done for online and offline handwriting [Plamondon and Srihari 2000]. The work done in handwriting recognition, in context of Indic scripts, is praiseworthy and motivates researchers to develop systems applicable in real-life use [Deepu et al. 2004; Swethalakshmi et al. 2006; Roy et al. 2007; Parui et al. 2008; Prasad et al. 2012; Kunwar et al. 2014]. One of the more popular and known Indic scripts is Gurmukhi (the script of yhe Punjabi language). The Gurmukhi is not an isolated script; it is the script that falls into the family of ancient Indian scripts called Brahmi scripts [Ghosh et al. 2010]. The Gurmukhi script is similar to Devanagari, Bangla, and other Indic scripts in a variety of ways like the presence of shirorekha, left-to-right writ-ing order, characters with similar shapes, symbol order variations and stroke order variations, and so on. The work for online Gurmukhi handwriting recognition, par-ticularly for larger units, needs more attention. When it comes to online handwritten word recognition for Indic scripts, in 2011, Sundaram and Ramakrishnan [2011] con-sidered the importance of segmentation for handwriting recognition and proposed a script-independent lexicon-free segmentation technique for online handwritten words, where they tested their results with Tamil script words collected from a large number of writers. In 2012, Bharath and Madhvanath [2012] worked on a Hidden Markov Model-(HMM) based data-driven and script-independent technique for online handwritten word recognition of Indic scripts, where they observed their results for Devanagari and Tamil words using a lexicon-driven and lexicon-free approach. In 2013, Sundaram and Ramakrishnan [2013] proposed a two-moduled, script-independent, and lexicon-free technique for segmentation of online handwritten isolated Tamil words into its element symbols, where one module segment the online handwritten word into stroke groups and the other handles the stroke groups having over-segmentation and under-segmentation. Recently, in 2014, Samanta et al. [2014] worked on unconstrained online handwritten Bangla word recognition and recognized mixed cursive Bangla words us-ing an HMM, where they split the input handwritten Bangla word into smaller units or sub-strokes and, rather than recognizing the smaller units, they recognized whole word sample. In their recognition procedure, they used both circular and linear features. The recent work for Indic script X  X  isolated character recognition has been done for Gujrati and Bangla scripts, where Sazal et al. [2014] discussed a novel machine-learning ap-proach based on the Deep Belief Network (DBN) for reconition of handwritten Bangla characters, and Prasad and Kulkarni [2014] used the Neuro Fuzzy classifier (ANFC) [6] to recognize isolated handwritten Gujrati language characters.

Considering the applicability of online Gurmukhi handwriting recognition, the re-lated research work has been discussed here. In 2008, Sharma et al. [2008] recognized online handwritten Gurmukhi characters using the elastic matching method, where characters are recognized in two stages. In the first stage, strokes are recognized, and then, in the second stage, recognized strokes are used to form characters and they reported the recognition rate as 90.08% for a writer-independent system. In 2009, Sharma et al. [2009a] introduced preprocessing algorithms for size normalization and centering, interpolating missing points, smoothing, slant correction, and resampling of online handwritten Gurmukhi strokes, and they also proposed recognition algo-rithms for four high-level features (loop, headline, straight line, and dot). In the same year, Sharma et al. [2009b] presented work for online handwritten Gurmukhi words recognition, where they focused on exact recognition of words, and they proposed a new step as rearrangement of strokes after the post-processing stage and recognized online handwritten Gurmukhi words with a recognition rate of 81.02% for 2,576 Gur-mukhi words. In 2010, Sharma [2009] discussed a method for the development of an HMM database to recognize online handwritten isolated Gurmukhi characters and they achieved recognition accuracy as 91.95% for HMM-based online handwritten Gur-mukhi character recognition. Recently, in 2013, Kumar and Sharma [2013] solved the problem of stroke sequencing and overwritten strokes in online handwritten Gurmukhi characters. They proposed an algorithm for online handwritten Gurmukhi character recognition on the basis of set theory, where they achieved a recognition rate as above 95% for single-character stroke sequencing. The latest work for online Gurmukhi handwriting recognition has been done by Kumar et al. [2014] in 2014, where they proposed a Support Vector Machine-(SVM) based algorithm to recognize multi-stroke-based online handwritten Gurmukhi characters.

One of the obstacles for carrying out research work in online handwriting recog-nition in Gurmukhi script is the absence of freely available benchmark dataset for online handwritten Gurmukhi characters or words as it is available for offline hand-written Bangla text and Bangla text mixed with English words [Sarkar et al. 2012] and online handwritten isolated characters for Bangla, Devanagari, Tamil, and Telugu scripts. Nethravathi et al. [2010] created a database of online handwritten words for Kannada and Tamil, where handwriting samples of different writing styles were col-lected. In their work for HMM-based Indic script handwriting recognition [Bharath and Madhvanath 2012], collected data for Devanagari and Tamil at the word level, where they used two different devices for online handwriting data collection. Recently, in 2014, Samanta et al. [2014] designed a lexicon of Bangla words and developed a database of online handwritten samples on the basis of a lexicon. The Pen-based Applications and Handwriting Recognition Group at HP Labs India developed annotated datasets for handwriting in Tamil, Telugu, and Devanagari scripts [HPL; Madhvanath et al. 2006]. The Computer Vision and Pattern Recognition Unit at Indian Statistical Institute, Kolkata tried to foster the research for handwriting recognition in Indic scripts, where they developed handwriting datasets for Bangla, Devanagari, and Oriya scripts [ISI].
As a result of the lack of a benchmarked Gurmukhi dataset availability to date, the present work cannot be compared with previous work carried out for online Gurmukhi handwriting recognition. In this study, we have proposed to develop a dataset for online handwritten Gurmukhi strokes based on a minimal set of words, as the nature of Gur-mukhi script words are group of strokes that share common trajectory characteristics that exist in other words X  strokes. As strokes do have participation in multiple words, so we collected strokes for words. The primary objective of this work is to provide a description about an online handwriting data collection at the word level in Gurmukhi and a classification of the collected data so the present work and collected data can be used for further development of benchmark datasets for carrying out research on online handwriting recognition in Gurmukhi. The present work includes the collection of data from common places in the Punjab region. The data have been collected and classified into different classes for use in real-life applications, such as GPRS and maps navigation, where a writer may input a handwritten place name. The Punjabi language is among the most popular languages of India and also the world X  X  14th [Kumar and Sharma 2013] most widely spoken language. The writing script of this popular language is called Gurmukhi. The word  X  X urmukhi X  is derived from the word  X  X uramukhi, X  which means  X  X rom the mouth of Gurus (teachers). X  Any word written in Gurmukhi is divided into three zones called the upper zone, the mid-dle zone, and the lower zone. The busiest zone is the middle zone, which consists of consonants, vowels, and subparts of vowels.

The upper zone consists of vowels, subparts of two vowels, and a subpart of one consonant, udda . The lower zone consists of vowels and half characters of Gurmukhi. The shirorekha, or headline, is the horizontal line which lies between upper zone and middle zone and it connects different characters of the word. Gurmukhi script consists of 35 consonants (including three vowel bearers), six additional consonants (which are made from six basic consonants using a dot symbol in the feet), 12 vowel modifiers (including three auxiliary signs) and two half characters. In order to recognise any word in any script, one of the primary requirement is to ascertain the primary units of writing in any script. These primary units are called symbols. The symbols used for Gurmukhi are shown in Figure 1. These symbols cover all consonants, vowel modifiers, and half characters of the Gurmukhi script.

The present work mainly includes the development of a dataset to cover the use of all characters or symbols of Gurmukhi, including vowels. This article includes six sections, including the Introduction. Section 2 includes system overview and data selection information. Section 3 presents the data collection process and Section 4 explains the clustering procedure, including manual verification to form classes. Section 5 consists of experimental results, and the last section concludes this article with concluding remarks. The work for online handwritten Gurmukhi strokes dataset development starts with identification of minimal set of words that cover all Gurmukhi symbols and ends with validation of data collection and classification work using a recognition technique. After identification of minimal set of words W j ,1 &lt; = j &lt; = V , where V is the number of words, the writers for collecting different writing samples are identified. Online Gurmukhi handwriting samples are collected using two different devices. We have collected online handwritten strokes for Gurmukhi words listed in Table I from hundred writers. These unique words together include all characters, vowels, and other half characters listed in Figure 1. Therefore a Gurmukhi word is represented as a group of strokes X j ,1 &lt; = j &lt; = T , where T is the number of strokes in a handwritten word. This The strokes from collected data at the word level are extracted. All strokes are re-sampled to fix the number of points in the input handwritten stroke and then k-means clustering is used for classification of data. After clustering, R is the set of all classes L as R j ,1 &lt; = j &lt; = L . Here each class includes different number of strokes ( Q )as D j 1 &lt; = j &lt; = L ,and1 &lt; = k &lt; = Q . Then manual verification of k-means clustered data is used for classification of data. After manual verification, C is the set of all classes M as C j ,1 &lt; = j &lt; = M . Here each class includes a different number of strokes ( P )as D j 1 the validation of data collection and classification work is done using recognition on the basis of HMM. Algorithm 1 presents the flow of the present data collection study. A description about all phases of Gurmukhi dataset creation is as follows:
Phase I. Instead of selecting a large number of dictionary words, the selection of a minimal set of words in data collection work is used, so all possible types of strokes and characters data in Gurmukhi can be collected with these V words only and a smaller database can be used efficiently for training the recognition system for GPRS, maps recognition, and other domains.

Phase II. Instead of selecting a large number of writers, the selection of 100 writers in data collection work is used, so the Gurmukhi data for all possible styles, left-and right-handed writers, male and female writers, and different level Gurmukhi writers can be collected from these 100 writers only.

Phase III. In order to collect real (natural) handwriting data, the writer X  X  familiarity with writing on a digital surface is necessary. Therefore, before accepting an online handwriting sample of any writer, we first trained those writers who had experienced digital writing for the first time.
 Phase IV. We have collected online handwritten strokes for Gurmukhi words listed in Table I from h100 writers. These unique words together include all characters, vowels, and other half characters listed in Figure 1. Therefore, a Gurmukhi word is represented as a group of strokes X j ,1 &lt; = j &lt; = T , where T is the number of strokes in a handwritten word. This way, we have collected all strokes ( N ) from all writers for all words as X i , 1 &lt; = i &lt; = N .

Phase V. As selected V words listed in Table I are for names of places, so we have also stored the collected data of Y writers as names of places format and it is used for extracting information for manual verification of stroke classes. Then all strokes ( N ) are extracted from data collected at the word level and resampled to fix the number of points in the input handwritten stroke. The resampled strokes retain the original shape of the stroke. The resampled strokes are represented as D j ,1 &lt; = j &lt; = N .
Phase VI. We have used k-means clustering for classification of data. The number of classes L for k-means clustering are decided on the basis of analysis of collected data of
Phase VII. The R set of L classes can have many strokes of some classes mixed with strokes of other classes, as shown in phase 2 of Figure 3. So, it will not be appropriate to use these stroke classes directly to train the online handwritten Gurmukhi word recog-nizer and manual verification for strokes of R set of L classes is used for classification M is the sum of L and F (the number of new classes identified after manual verifica-tion). Here each class includes a different number of strokes ( P )as D jk ,1 &lt; = j &lt; = M , and 1 &lt; = k &lt; = P . The final C set of M classes is organized into three categories.
Phase VIII. In order to understand the effectiveness of our data collection and classi-fication work, we have used a statistical recognition technique, where we trained three different HMMs for different zone classes shown in Figure 5 and obtained promising results, as shown in Tables III, IV, V, and VI. As we have observed no available dataset for names of places in the Punjab region to date, the primary task includes the formation of a dataset. The development of a dataset for online handwritten Gurmukhi word recognition includes the first step, which we performed, and the identification of a minimal set of words that covers all the symbols of Gurmukhi script and exists in selected places names as required in present work. After the identification of a minimal set of words, the second step that we performed was the identification of writers who contributed to our data collection work.

The identification of a minimal set of words is necessary to collect data at the word level and this type of data collection is very important for online handwritten word recognition in Gurmukhi. As it includes strokes combination to form characters or words, word-level data collection in Gurmukhi takes into consideration the degree of cursiveness, symbol order variation, theh difference between writing a character in a word and writing the same character as an individual character, stroke order variation at the word level, and writing more than one stroke or symbol in a single stroke, which is not possible with isolated characters in data collection. This minimal set of words leads to a structural model, where we classify the unique strokes that further help in the formation and identification of unknown words that are not part of data collection. To treat it as a minimal set of words, we tried to find out the names of common places of Punjab that use every character or symbol of Gurmukhi at least once. We found the names of 33 places, as shown in Table I, but because of the rare use of the ungga (symbol 10 in Figure 1) and yanza (symbol 15 in Figure 1) characters in the names of places of Punjab, these two characters were absent in these 33 names of places. Thus, we finalised our minimal set words with names of 33 common places of Punjab and two isolated characters ungga (symbol 10 in Figure 1) and yanza (symbol 15 in Figure 1). As the Gurmukhi writers write the city name Jagraon in two different ways, so the city name Jagraon is included 2 times in names of 33 common places of Punjab.

Efficient and valid data collection in online handwritten Gurmukhi word recognition includes the identification of writers as important as the identification of minimal set of words. For this work, we identified those 100 writers of Gurmukhi who will contribute to our data collection of Gurmukhi. These 100 writers are categorised into three types of expertise, namely beginner, moderate, and expert writer, and there is a balance in the number of writers of each category. We have taken into consideration these three different categories of writers because of the different writing speeds of writers and the different writing styles of writers, like using single or multiple strokes for writing the same character and writing a character with or without a headline. The expert Gurmukhi writers are those people who have studied in the Punjabi medium, and they have either passed or are currently doing their post-graduation or doctorate degree in the Punjabi language, or they are daily Punjabi users like linguistic professionals and state government employees. Moderate Gurmukhi writers are those writers who have acquired their education up to high school in the Punjabi medium and they can write in Gurmukhi very well but now they write in Gurmukhi infrequently. Beginner Gurmukhi writers are those writers who have either studied Punjabi as one of the subject in their education or learned Punjabi by themselves or in their families, and these users use Gurmukhi less frequently for writing, but they can write in Gurmukhi. In identifying writers in three levels, importance was given to male, female, left-handed, and right-handed writers at every level in a balanced proportion.

Overall, while identifying writers for data collection, we have taken into considera-tion the level, gender, and handedness of writers and Table II gives information about the division of writers on the basis of these characteristics. To carry out our data collection work, we have used two types of hardware devices: One is a pen tablet of size 8  X  6 inches that we used to collect handwriting samples of 77 writers, and the other is a digital writing board to collect samples of 23 writers. We have used these two different devices to try our best to collect, as much as possible, natural handwriting samples in Gurmukhi. We used common software [Sharma 2009] as shown in Figure 2 to collect data through the pen tablet and digital writing board. In Figure 2, we also present the data collection work in progress. The software used includes a data collection module, where targeted characters are collected with useful information such as date, time, number of strokes, and correcting strokes as happen in natural handwriting. As shown in Figure 2, while we used this software for data collection, the 36 Gurmukhi words (including two isolated characters) to be used for data collection are added to the word list shown in the small dialog box figure, opened on the right-hand side, where every word is selected one by one before writing that word. After selecting a word, the selected word is written with a digital pen in the writing area, and, after writing every selected word, the add button is clicked to add the current word X  X  online handwritten data into the current writer X  X  data collection file.
In this way, we collected the handwriting samples of 100 writers, and every writer gave handwriting samples of 36 words, including two isolated characters. In this way, we collected the words X  data. We stored every writer X  X  data in a separate file, and every file stores the information about data at the point level, stroke level, and word level. Along with this, every file also stores the date and time information of every handwrit-ten word. Further, we converted the collected data of 100 writers in the names-of-places format, so we have 36 different files (including two isolated characters), and every file contains 100 writers X  data of the same word. There are 39,411 strokes contributed by 100 writers, where the number of strokes having fewer than 30 points, the number of strokes having 30 to 50 points, the number of strokes having 50 to 70 points, and the number of strokes having more than 70 points are 14,324, 8,129, 6,673, and 10,285, respectively. This variation indicates the writing variation in terms of slow and fast handwriting. In digital devices, slow handwriting captures more points as compared to fast handwriting. In these 39,411 strokes, 251 strokes have a single point only noticed for a dot as a stroke. The average length of a stroke in these 39,411 strokes is close to 50 points.

In our data collection process, one of the difficulties that we faced is the unfamiliarity of writing on a digital writing board or on a tablet surface. Therefore, before accepting an online handwriting sample of any writer, we first trained that writer to write with a digital pen on a digital surface. While collecting the writing samples of 100 writers, we came to know some important facts about the writing behaviors of writers, like using a single stroke to write more than one symbol together, using more than one small stroke to write a single symbol that can be written with a single stroke very easily, writing strokes in the right-to-left direction where it seems that these are always written in left-to-right direction or vice versa, writing the same stroke in either the top-down or bottom-up approach, the hesitation or unfamiliarity of to write the ungga (symbol 10) and yanza (symbol 15) characters (a few expert writers), writers making a closed udda character an opened udda character (a few expert writers), failing to write the dot symbol with words (a few writers), and the difference in holding an ordinary pen and digital pen by Gurmukhi writers for writing and delaying strokes while writing a word in Gurmukhi. Once the data were collected, the very next step was to arrange the collected data in different classes on the basis of the shapes of all respective strokes, so these different classes can be used to train (also can be used for testing) the recognizer for online handwriting recognition in future use. After data collection work, we prepared our data for classification, where we arranged all the strokes of the collected data as a single repository, as shown in phase 1 of Figure 3.

In order to perform data clustering of collected data in the present study, we used a k-means [Hartigan and Wong 1979] clustering algorithm that uses Euclidean distance to cluster the data. As k-means clustering requires an initial k value, we selected different values of k ranging from 60 to 70 after acquiring Gurmukhi experts X  feedback. We observed that k as 66 gives reasonably better results. All strokes are re-sampled to a size of 51 points, and the values of the x and y coordinates of each point of every re-sampled stroke lies between 0 and 50. Then, these re-sampled data of the strokes are passed to a k-means clustering algorithm having following basic steps: 1. Decide the number of clusters or value for k ( k = 66, finalised in this work) 2. Randomly select k strokes as cluster centers. 3. Calculate the distance (Euclidean distance) between every stroke and those strokes 4. Assign the strokes to those clusters whose distance from the cluster center is the 5. Recalculate the new cluster centers or those strokes that represent the k clusters. 6. Recalculate the distance (Euclidean distance) between every stroke and new ob-7. If there is no change in the cluster of all strokes, then stop; otherwise repeat from
After the formation of stroke classes that we got after k-means clustering, it was found that it is not appropriate to use these stroke classes directly to train the online handwritten Gurmukhi word recognizer, because there were many strokes of some classes that were mixed with strokes of other classes, as shown in phase 2 of Figure 3. Also, k-means or other clustering techniques do have shortcomings and cannot do clustering to the accuracy level of humans [Jain 2010]. Therefore, manual verification next to machine clustering is done and, in such a way, manual verification is less time-consuming. In order to perform manual verification, a verification module as shown in Figure 4 is developed. This module manually verifies each stroke of every cluster for having final stroke classes as shown in phase 3 of Figure 3. The manual verification includes the expert and moderate writers X  feedback. When we execute this application, it shows the shape of the current stroke, the word information in which a current stroke is used, the name of the writer who wrote the current stroke, and the level of the writer who wrote the current stroke, with one button corresponding to every stroke class for a total number of 72 classes. For example, in Figure 4, the word name is  X  X jitgarh, X  the writer id is 103, and b signifies a beginner-level writer.

So, during the manual verification phase of 39,411 strokes, every stroke that was in a wrong cluster was moved to a right cluster, and some new classes also emerged. In this way, we were able to shuffle 4,384 strokes. This resulted in 72 classes with 6 new classes after k-means clustering. After following two steps of clustering (machine-based clustering with the k-means algorithm and manual verification of clustered data), the 39,411 strokes of collected data were divided into 72 classes named C1 to C72. The final 72 classes are organised into three categories, as shown in Figure 5, on the basis of their zones (middle, upper, and lower zones). Because, in written Gurmukhi, some classes are used in more than one zone, these classes are included in more than one zone. The upper zone consists of the C23, C32 X  X 37, C39 X  X 42, C48, C51 X  X 52, and C56 X  C57 classes. We have included the classes C23, C32, and C52 in the upper-zone classes because some writers write more parts of these strokes in the upper zone than in the middle zone. The middle zone consists of the C1 X  X 32, C36, C39 X  X 47, C50, C52 X  X 62, C64 X  X 70 and C72 classes. The lower zone consists of the C38, C41, C48 X  X 49, C63, and C71 classes. We have evaluated the effectiveness of digitally handwritten collected data and classi-fication of collected data, using a statistical recognition technique as an HMM [Rabiner 1989; Samanta et al. 2014]. The computed classes in previous section are trained with HMMs. The HMMs are suitable for handwriting recognition to a great extent. The HMMs are characterised by five parameters: N , M , A , B ,and  X  . N is the number of states, which is 21 in our case, and the individual states in an HMM are denoted by S = { S which is 34 in our case, and individual symbols are denoted as V = { v 1 ,v 2 ,...,v m }. A is the transition probability matrix that consists of probabilities of moving from one state j &lt; = N . B is the emission probability matrix that consists of probabilities of emitting 1 &lt; = k &lt; = M .  X  is the initial state probability vector, where  X  = {  X  1 &lt; = i &lt; = N . On the basis of these parameters, the notation for an HMM is  X  = ( A , B ,  X  ). In the present work, the number of states to be 21 are decided on the basis of dividing the writing trajectory of re-sampled stroke into 21 zones. As the value of M for the Hidden Markov model used for testing the efficiency of our data collection and classification work is 34, the number of output symbols to be 34 are decided on the basis of eight directional chain codes as shown in Figure 6, where  X  is the angle subtended by line joining two points for chain code of the stroke. As discussed in Sec-tion 4, where every input handwritten stroke is re-sampled to the size of 51 points, so, while training HMM, these 51 points represent 25 small line segments or chain codes as shown in Figure 7, where first point is joined to third point, third point is joined to fifth point and this process continues till the last chain code, where third last point is joined to last point of the stroke. Thus, the length of the feature vector for every stroke to train the HMM is 33, where the first 25 elements of a feature vector represent the chain code directions of the stroke, and next 8 elements represent the number of times every direction occurs in the stroke. A feature vector of length 33 can have any natural number ranging 1 to 34. The first 25 elements in a feature vector can have 1 to 8 values only, as these 25 elements are for 8 directional chain codes only. The last 8 elements of a feature vector can have values 9 to 34 only, and the values for the last 8 elements of an f feature vector are obtained as follows: i occurs in a stroke.

So, any element of a feature vector from 26 to 33 that has a value of 9 indicates zero occurrence of a direction. Figure 8 explains the feature vector for the stroke shown in Figure 7, where the first 25 elements are for chain code directions and the 26th element X  X  value of 13 indicates that direction 1 has four occurrences in the stroke, and, similarly, 27 to 33 elements of a feature vector indicate the number of occurrences of directions 2 to 8, respectively. After deciding the value of M and N and the feature vector for HMM in the present work, the initial A and B for HMM training and HMM decoding are prepared.

The final 72 classes are organised into three categories, as shown in Figure 5, on the basis of their zones (upper, middle, and lower zones). So we have trained three different HMMs using the Baum-Welch algorithm for each zone class. We have noted that the recognition rate for all zones is above 80% when 66%, 50%, 80% and 34%, 50%, 20% of the total data of each class in every zone is used for training and testing, respectively. Table III demonstrates the overall recognition rate of the upper-zone, middle-zone, and lower-zone classes, where the recognition rate achieved for the upper-zone, middle-zone, and lower-zone classes is around 85%, 85%, and 95%, respectively. While evaluating the recognition rate of individual classes with 66% training data and 34% test data of all zone classes, it has been noted that the above 85% recognition accuracy is achieved for 9, 26, and 2 classes in the upper zone, middle zone, and lower zone, respectively. Tables IV, V, and VI show the recognition results of all classes where there are more than 10 strokes in a class. Table VII provides the information about the frequency of Gurmukhi characters in the developed dataset. Throughout this article, we have focused on a very essential part of handwriting recog-nition: data collection for real-life applications. The present work is intended to work for town name recognition, keeping in mind the future recognition of unknown names. Therefore, we selected an initial training set subject to the involvement of a set of all Gurmukhi characters. In this way, we will be in a position to present our dataset globally, and an effort could be made to recognize in writer-independent and data-independent systems. The collection of data includes a free handwriting feature to acquire cursive handwriting for the writers of three skill levels (beginner, moderate, and expert). In the study of handwriting, the liturature does not differentiate much between gender and handedness of writers, although we have taken care of these two factors in our system. The collected words are groups of strokes, and the established k-means clustering did output in different sets of classes. To see the limitations of k-means clustering and writers X  feedback, a thorough manual verification was performed, using the feedback of moderate and expert writers. The final set of classes cannot justify the optimum classification, as it is a difficult problem in the area of pattern recognition for large variations of data. The present sets of classes do give some interesting results in the initial experiments. The problem of writer adaptability to digitally handwritten text has been observed and special training sessions were conducted for some writers. Therefore, future studies could have a better idea of different levels of writing adapt-ability. In our future work, we will verify the unknown text acceptability and look for a solution to today X  X  problem of large data size, where we can look for a sufficient amount of data in the training of recognition stages.

