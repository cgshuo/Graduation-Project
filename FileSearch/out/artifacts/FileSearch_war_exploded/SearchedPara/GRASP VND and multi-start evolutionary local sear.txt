 1. Introduction
This paper presents the single truck and trailer routing problem with satellite depots (STTRPSD), a generalization of the vehicle routing problem (VRP). The VRP is a well known combinatorial optimization problem that aims to find a set of routes of minimum total length to serve the demand of a set of customers using a homogeneous fleet of capacitated vehicles based at a main depot ( Laporte, 2007 ).

In the STTRPSD a single vehicle (a truck with a detachable trailer) based at a main depot serves the demand of a set of customers, reachable only by the truck without the trailer. transfer products between the truck and the trailer. In feasible solutions of the STTRPSD, each client is assigned to one trailer point. Consequently, trailer points with assigned customers are open trailer points. Each customer must be served by exactly one second-level trip (performed by the truck alone), starting and ending at the allocated trailer point. Thus, the total load in a the STTRPSD is to minimize the total length of the trips. The and the multi-depot VRP (null cost between any two depots) as particular cases. The STTRPSD is a relevant problem that appears served by a single tanker with a removable tank trailer. Trailer are located on narrow roads inaccessible with the trailer. In reality, there can be several vehicles but usually farms are clustered based on their geographical location ( Claassen and depicts a feasible solution of the STTRPSD.

Another suitable application for the arc routing counterpart of the STTRPSD appears in the design of park-and-loop routes for sack, and delivers mail by walking the streets forming a loop. end of the day the postman returns to the postal facility.
The CARPIF is a variant of the capacitated arc routing problem (CARP) with a single vehicle but multiple trips, in which the vehicle is unloaded at intermediate facilities between two consecutive trips. Applications of the CARPIF appear in waste collection where intermediate facilities are dump sites or incinerators.
 2007), the preferred solution methods are mainly heuristics (Laporte and Semet, 2002 ) or metaheuristics ( Gendreau et al., 2008). VRP variants appear by incorporating new constraints (e.g., time windows, Cordeau et al., 2002 ) or by integrating the design of the routes with higher level decisions (e.g. location-routing problems, Nagy and Salhi, 2007 ). The books by Toth and
Vigo (2002) and Golden et al. (2008) provide a wide overview of the VRP, its extensions, solution methods, and practical applications.
 trailer routing problem (TTRP), another extension of the VRP in which a heterogeneous fleet comprised of m trucks and b trailers ( b o m ) is used to satisfy the demand of a set of customers partitioned in vehicle and truck customers , where the latter are only accessible by truck. The TTRP has been tackled using tabu search ( Chao, 2002; Scheuerer, 2006 ), simulated annealing (Lin et al., 2009 ) and a mathematical-programming based heuristic ( Caramia and Guerriero, 2009 ). The STTRPSD differs trailer points independent from customer locations. Also, when the STTRPSD is extended to include several vehicles and capacitated satellite depots it transforms into the seldomly studied two-echelon capacitated vehicle routing problem (2E-CVRP) introduced by Gonzalez-Feliu et al. (2007) . the depots. Recently, Baldacci and Mingozzi (2009) proposed a unified exact method capable of solving different variants of the
VRP, including the MDVRP. Tabu search ( Cordeau et al., 1997) and adaptive large scale neighborhood search (ALNS) ( Pisinger and
Ropke, 2007 ) provide the best results among the metaheuristics developed for the MDVRP. Crevier et al. (2007) extended the
MDVRP allowing routes that may depart and end at different depots, giving rise to the multi-depot vehicle routing problem with inter-depot routes (MDVRPI).
 of vehicle routing for milk collection in Norway in which the routes have the structure of a STTRPSD. For their particular problem they use tabu search to design the routes to collect the the best of our knowledge, the STTRPSD has not been formally described in the literature, and no solution algorithm has been designed for it.

The remainder of this paper is organized as follows. Section 2 presents an integer programming formulation of the STTRPSD. Section 3 describes two metaheuristics based on greedy rando-mized adaptive search procedures and evolutionary local search. Section 4 presents a computational evaluation of the proposed methods. Finally, we conclude and outline future work in Section 5. Appendix A summarizes the notation used through the paper. 2. Integer programming formulation The STTRPSD is defined on a graph G =( V , A ), where V  X f 0 g[ V [ V C is the node set with the main depot at node 0, V V ={ p +1, p +2, y , p + n } is the set of customers with known demands q i ( i A V C ). A is the arc set, with costs c ij satisfying the triangle inequality. The parameters Q V and Q feasibility with one vehicle, the sum of demands does not exceed Q + Q T .
 To formulate the STTRPSD we define the following subsets of second-level trips; and (iii) V j  X  V C [f j g ( 8 j A V D integer programming formulation of the STTRPSD uses binary programming formulation of the STTRPSD follows: min subject to X X X X X X x r X X X X y ij A f 0 ; 1 g ; 8 i ; j A V 1 ; i a j  X  13  X  x A f 0 ; 1 g ; 8 j A V D ; l ; m A V j ; l a m  X  14  X 
The objective function (1) comprises two terms, the first one total distance traveled by the truck in the second-level trips. once in the first-level trip. Constraints (4) are connectivity that the first-level trip departs and ends at the main depot. (9) state that each customer must be visited exactly once. Constraints (11) state that all the second-level trips departing in second-level trips, where g  X  R  X  is the minimum number of second-level trips needed to serve the demand of the customers in respectively. 3. Metaheuristics for the STTRPSD
Since the STTRPSD generalizes the VRP and the MDVRP, it is clear that only small instances of the STTRPSD could be solved efficiently using the formulation defined by (1) X (14). Therefore, we decided to develop metaheuristics based on greedy rando-mized adaptive search procedures (GRASP) and evolutionary local search (ELS) to solve it. 3.1. GRASP/VND
GRASP ( Feo and Resende, 1995 ) is a memory-less multi-start method in which local search is applied to ns initial solutions constructed with a greedy randomized heuristic. Recently, Festa and Resende (2009) surveyed the application of GRASP to solve combinatorial optimization problems in various domains. GRASP local search with another metaheuristic such as tabu search, simulated annealing, variable neighborhood search, iterated local the STTRPSD is a hybrid GRASP/VND in which the local search of GRASP is replaced by variable neighborhood descent (VND) (Hansen and Mladenovic, 2001 ). 3.1.1. Greedy randomized construction
Route-first, cluster-second based metaheuristics have shown to be effective solving capacitated node routing problems ranging from the classical VRP ( Prins, 2004 ) to some of its extensions, including the VRP with time windows ( Labadi et al., 2008 ), heterogeneous fleet ( Prins, 2009 b) and pick-up and delivery greedy randomized construction of the hybrid GRASP/VND is done by means of a tour splitting procedure (hereafter labeled sents the customer in the j -th position and t 0 the main depot.
Giant tours are constructed with a randomized nearest neighbor method with a restricted candidate list (RCL) of size r that ignores capacity constraints and trailer-point selection.
Algorithm 1 presents the pseudocode of the randomized nearest nearest neighbor heuristic when r =1, and random permutations of the customers when r = n .
 Algorithm 1. Randomized nearest neighbor.
 Parameters: V c , r
Output : T 1: Create an empty giant tour T 2: t 0 :  X  0 3: count :  X  0 4: i :  X  0 5: repeat 6: RCL :  X  | 7: sl :  X  min  X  r ; n count  X  8: for k=1 to sl do 9: l :  X  argmin 10: RCL :  X  RCL [f l g 11: end for 12: Select at random l A RCL 13: count :  X  count  X  1 14: t count :  X  l 15: V c :  X  V c f l g 16: i :  X  l 17: until count = n 18: return T It is worth mentioning that the splitting procedure for the
STTRPSD is much more complicated than that of the VRP ( Prins, important decisions. For the STTRPSD, Split derives a solution of the STTRPSD from T by optimally splitting it into second-level the corresponding first-level trip are also included in the tour splitting procedure.

Split uses a dynamic programming method, in which state [ l , j ] for the last trip, and [0,0] denotes the initial state. Let F ( t , t i +1 , y , t j ) from trailer point k . We have the following Fig. 2 for a graphical example): main depot, the cost of an optimal splitting is z  X  min l f F ln  X  c l 0 g .

Fig. 3 . The node set X contains np + 2 nodes: two copies of the the state graph, and U 3 the incoming arcs of b . W is a mapping defining the cost of each arc. Formally, each subset of U and its cost is defined in Eqs. (16) X (21) U 1  X  X  a ;  X  k ; i  X  : k A V D ; 1 r i o n ; w  X  a ;  X  k ; i  X  X  c  X  a ; k  X  X  c  X  k ; t 1  X  X  U 2  X  X  X  k ; i ;  X  l ; j  X  : k ; l A V D ; 1 r i o j o n ; w  X  X  X  k ; i ;  X  l ; j  X  X  c  X  k ; l  X  X  c  X  l ; t i  X  1  X  X 
U 3  X f X  X  l ; n ; b  X  : l A V D g X  20  X  w  X  X  X  l ; n ; b  X  X  X  c  X  l ; b  X  X  21  X 
Bellman X  X  algorithm for directed acyclic graphs ( Cormen et al., 2001), whose complexity is proportional to the number of arcs. H subsequent layers. Adding the np outgoing arcs from the source node in the worst case and the p incoming arcs of the sink node, we have j U j X  np  X  p  X 
Even though the number of arcs j U j can be huge, a more precise evaluation shows significant savings. Note that each capacity-feasible subsequence ( t i +1 , t i +2 , y , t j the trip serving customer t i and p depots for the trip serving b , the average number of feasible trips is O ( nb ) and then the number of arcs in U is O ( nbp 2 ). When the average number of clients per trip is small compared to n or, equivalently, if the average customer demand is relatively large compared to vehicle capacity, then O ( nbp 2 ) is significantly smaller than O ( n Split has a worst case complexity of O ( nbp 2 ).

Moreover, it is possible to implement the dynamic program-ming method without generating explicitly the auxiliary graph, columns indexed from 0 to n . The implementation of Split , detailed in Algorithm 2, uses two procedures Develop and its successors. Simultaneously the record of the predecessor of each state is stored in two matrices of the same size of F , PD (previous depot) and PC (previous customer). For instance, if the After having solved the shortest path problem, the procedure tracking from state [ LD , n ] using the information of the last satellite depot visited ( LD ) and the matrices of predecessors.
In general, each trailer point may have several trips. Consider a demand exceeding Q V . After splitting, S will contain two trailer point has consecutive trips is called strong splitting . Consider now two capacity-feasible sequences of customers close dynamic programming method follows the order of T , after split S will contain two non-consecutive trips departing from trailer the length of the first-level trip can be reduced by making adjacent in T non-consecutive trips with common trailer points the creation of a solution with TourToSol , the procedure EliminateWeakSplitting scans the first-level trip to eliminate point whose elimination produces the greatest reduction in the copies is repeated until the elimination of the weak splitting. Algorithm 2. Split.
 Input: T
Output : S , solution of the STTRPSD 1: F  X  0 ; 0 :  X  0 2: for k :  X  1to p do 3: for i :  X  0to n do 4: F  X  k ; i :  X 1 5: end for 6: end for 7: Develop  X  0 ; 0  X  8: for i :  X  1t o n 1 do 9: for k :  X  1to p do 10: Develop(k,i) 11: end for 12: end for 13: z :  X 1 14: for k :  X  1to p do 15: if F  X  k ; n  X  c k 0 o z then 16: z :  X  F  X  k ; n  X  c k 0 17: LD :  X  k 18: end if 19: end for 20: S :  X  TourToSol  X  PD ; PC ; LD  X  21: S :  X  EliminateWeakSplitting  X  S  X  22: return S
Fig. 4 (a) illustrates Split on a simple instance of the STTRPSD square side in the grid is equal to 1 and the distance between nodes is Euclidean. Fig. 4 (b) shows the results of splitting the graph, where the arcs of the optimal split are in bold. Table 1 3.1.2. Variable neighborhood descent
Solutions obtained from the GRASP construction phase are improved by a VND. VND is a deterministic version of variable neighborhood search ( Hansen and Mladenovic, 2001 ) in which k neighborhoods are explored sequentially ( k max Z 2). Given the incumbent solution S 0 , a subset of the solution space N composed of the solutions reachable from S 0 when neighborhood k is applied to it. Algorithm 3, outlines VND with a best-improvement selection strategy in which the best solution of
N  X  S 0  X  replaces S 0 if it has a smaller cost (line 4). When the incumbent solution is improved the search is reinitialized from the first neighborhood. On the contrary, if the best solution in
VND stops when all the neighborhoods have been explored without improving the incumbent solution (line 11). If a first-improvement selection strategy is used, the search of line 4 is stopped as soon as an improving solution is found (i.e., ( S A N k  X  S 0  X  : f  X  S  X  o f  X  S 0  X  ).
 Algorithm 3. VND with best-improvement selection.

N 1 , N 2 and N 3 are intended to improve routing within the solution; and (ii) neighborhoods N 4 and N 5 modify the set of open trailer points. Moreover, when applied to second-level trips neighborhoods 1 X 3 only explore feasible solutions satisfying the capacity constraint. A brief description of the neighborhoods follows:
N 1 : Each customer and each trailer point is removed from its
N 2 : Two customers or trailer points are exchanged. The two
N 3 : A modified 2-opt in which two edges are exchanged. If the 3.1.3. Hybrid GRASP/VND for the STTRPSD with a randomized nearest neighbor heuristic with restricted Split to T , and finally S is improved with VND.
 Algorithm 4. GRASP/VND for the STTRPSD.
 Parameters : ns , r
Output : S * 1: f :  X 1 2: for i :  X  1to ns do 3: T :  X  RandomizedNearestNeighbor  X  V C ; r  X  4: S :  X  Split  X  T  X  5: S :  X  VND  X  S  X  6: if f  X  S  X  o f then 7: f *= f ( S ) 8: S :  X  S 9: end if 10: end for 11: return S * 3.2. Multi-start evolutionary local search
Evolutionary local search (ELS) ( Wolf and Merz, 2007 ) can be seen as an evolutionary extension of iterated local search (ILS) obtain nc children that are further improved using local search. Following a (1+ nc ) selection paradigm, the solution of the next et al., 1991). The main loop of mutation and local search is repeated during ni generations.

Although ELS was originally introduced for the solution of optimization problems in telecommunications ( Wolf and Merz, 2007), metaheuristics based on ELS have achieved very good results in different routing problems such as the VRP ( Prins, 2009a) and the split delivery CARP ( Belenguer et al., 2009 ). We implemented a multi-start variant of ELS, introduced by solutions obtained by strongly perturbing the current best solution S * . By reusing the Split and VND procedures described where the new elements are the Mutate and Concat operators.
Note that, within the ELS inner loop (lines 12 X 30 of Algorithm 5), the method alternates between STTRPSD solutions and giant it with the procedure ( Concat ) illustrated in Fig. 5 .
Concat generates a giant tour by creating chains of customers and concatenating them using the order of the trailer points operator ( Mutate ), exchanges b pairs of customers in T . The parameter b is dynamically controlled and varies from 1 to b on the contrary if the parent is not changed the value of b is increased (with a maximum limit b max ). We decided to perform the mutation operator in the giant tour because the resulting solution is always feasible and a simple exchange of a pair of customers in T is sometimes enough to perturb the solution structure.

In the proposed multi-start evolutionary local search, the first deterministic nearest neighbor algorithm ( r =1, in Algorithm 1), this case the same mutation operator, but with the exchange of b pert pairs of customers ( b pert b b max ).
 Algorithm 5. Multi-start evolutionary local search for the STTRPSD.
 Parameters : nr , ni , nc , b max , b pert
Output : S * 1: f :  X 1 2: b :  X  1 3: for i :  X  1to nr do 4: if i =1 then 5: T :  X  NearestNeighbor  X  V C  X  6: else 7: T :  X  Mutate  X  T ; b pert  X  8: end if 9: S :  X  Split  X  T  X  10: S :  X  VND  X  S  X  11: T :  X  Concat  X  S  X  12: for j :  X  1to ni do 13: ^ f :  X  f  X  S  X  14: for k :  X  1to nc do 15: T 0 :  X  Mutate  X  T ; b  X  16: S 0 :  X  Split  X  T 0  X  17: S 0 :  X  VND  X  S 0  X  18: if f  X  S 0  X  o ^ f then 19: ^ f :  X  f  X  S 0  X  20: ^ S :  X  S 0 21: end if 22: end for 23: if ^ f o f  X  S  X  then 24: S :  X  ^ S 25: T :  X  Concat  X  S  X  26: b :  X  1 27: else 28: b :  X  min  X  b  X  1 ; b max  X  29: end if 30: end for 31: if f  X  S  X  o f then 32: f * = f ( S ) 33: S :  X  S 34: T :  X  Concat  X  S  X  35: end if 36: end for 37: return S * 4. Computational study 4.1. Implementation and test problems
The proposed methods were tested on a set of 32 randomly generated Euclidean instances with the following characteristics: n
A f 25 ; 50 ; 100 ; 200 g , p A f 5 ; 10 ; 20 g , and Q V A coordinates for trailer points and customers are randomly generated in a square grid of size 100 100. There are two problem types based on the distribution of customers and trailer demands are drawn from a discrete uniform distribution in the 1992/1125 and Table 2 describes each instance in the testbed. All the metaheuristics were implemented in Java and compiled using
Eclipse JDT version 3.3.2. The experiments described in this section were performed on a computer with an Intel Pentium D 945 processor running at 3.4GHz with 1024MB of RAM on a
Windows XP Professional environment. 4.2. Preliminary experiments
We conducted two experiments to analyze the building blocks of the metaheuristics. The first experiment explores the greedy randomized construction procedures. Initial giant tours for the
GRASP/VND are obtained using the randomized nearest neighbor (RNN) method using a RCL of size r =2 or 3. Alternatively, giant tours can be generated through random permutations of custo-mers when r = n (RAND). While generating a solution we can call (or not) the transformation of weak splittings into strong ones (line 21 of Algorithm 2). Combining these options we have a total of six randomized heuristics with the characteristics summarized in Table 3 .
 randomized heuristic (RH) and computed the average cost and its standard deviation. In Table 3 the column avg. dev. presents for each method the average deviation with respect to the average by the average cost of the solutions over all methods. While the former column measures the quality of the solutions, the latter measures their diversity.
 randomized construction block of GRASP/VND. With r =2 it is loss in diversity, compared to RH3 and RH4 ( r =3). On the other hand, RH5 and RH6 (i.e., random permutations) provide a higher diversity, but at the expense of affecting the quality of the solutions. Finally, this experiment shows that the elimination of affecting much the diversity.

A second experiment, analyzes the contribution of neighbor-hoods 4 and 5 to the performance of VND. For each instance, we applied two versions of VND to 100 solutions generated with RH2. The first version uses only the routing neighborhoods ( k while the second version includes also neighborhoods 4 and 5 ( k max =5). Both options were tested with first-improvement and best-improvement selection criteria. Table 4 reports the average improvement over the initial solution (in %) and the average computation time (in ms) for each method. The use of k max with best-improvement (VND4) produces the best solutions overall. A comparison between the selection criteria shows a marginal (quality) gain between 3% and 4.6% by using the best over the first-improvement strategy; in addition, the best-improvement strategy also proves to be faster than the first-improvement strategy. This experiment also highlights the importance of the selection of trailer points for the quality of the solutions. A comparison of VND2 against VND4 shows that the marginal effect of exploring neighborhoods 4 and 5 is 2.4%. Based on these results we selected VND4 as the local search component of the metaheuristics, even if it takes 20% longer than VND2. 4.3. Parameter fine-tuning
To have a fair comparison we allocated a fixed  X  X  X udget X  X  of 2500 calls of the VND to each metaheuristic to see which one makes the best use of the VND.

For GRASP/VND the selection of the parameters is very simple: contrary, for the multi-start evolutionary local search it is the 2500 calls of the VND such that nr ni nc  X  2500. By setting start evolutionary local search method: (1) a multi-start ELS (henceforth labeled MS-ILS) with nc =1.

To select the parameters we used a simple (yet effective) fine-tuning procedure: beginning from a promising configuration, one or two parameters were modified, then the current and new configuration were compared using the sign test Conover (1998) on a subset of 12 problems. If the new configuration was better we updated the parameters, but if there was no evidence that one configuration was better, the one with the smaller running time was declared the winner and its parameters kept. We stopped the procedure after testing a maximum of 10 configura-option. 4.4. Results
We used three heuristics as benchmarks to compare the performance of the metaheuristics. The first one is a simple cluster-first, route-second (henceforth labeled CFRS) approach in trailer points is derived from the same insertion heuristic. The second heuristic enhances the solutions constructed with cluster-first, route-second by using VND4 (CFRS+VND). The third and last heuristic, called iterated route-first, cluster-second (henceforth labeled IRFCS) repeats RH2 2500 times.

Tables 5 and 6 presents the results of the three benchmark heuristics and the proposed metaheuristics on the set of 32 randomly generated instances, respectively. Additionally, Table 6 includes the results of a hybrid GRASP ELS proposed in Villegas results over 10 runs for all the randomized methods; the last two rows report the number of times each method found the best-known solution (NBKS) and the average deviation (in %) above the best-known solution for each problem, and every BKS is highlighted in bold type when found by a given method. Table 7 shows the average running times (in minutes) for each method over all instances. We do not report exact running times for CFRS and CFRS+VND since they take on average less than 1s.
Even though the CFRS heuristic is extremely fast, its average deviation above the best solutions is large (26.17%) compared to the average deviation of CFRS+VND (4.70%) which also runs in less than 1s. IRFCS produces, on average, solutions of better quality (21.98%) than CFRS and still with short running times. However, CFRS frequently outperforms IRFCS in the clustered gap of 4.53% between its best and worst results.

The metaheuristics proposed in this article outperform the previous hybrid GRASP ELS reported in Villegas et al. (2009) .
Among the proposed metaheuristics, multi-start evolutionary local search is both faster and more accurate than GRASP/VND.
The MS-ILS version found 29 out of 32 best known solutions and was 2.8 times faster than GRASP/VND; while the MS-ELS version search reports very small average gaps with respect to best known solutions. While MS-ILS and MS-ELS achieved average gaps as small as 0.25% and 0.31%, respectively; the GRASP/VND and GRASP ELS report larger average gaps of 0.52% and 0.91%, respectively. Despite of the slight differences, remarkably these experiments highlight the robustness of the proposed metaheur-istics: none of them has deviations to BKS greater than 1.0% even under their worst performance.

The comparison of GRASP/VND against IRFCS shows the effect of the VND on the quality of the solutions at the expense of computational effort. For instance, VND represents more than 98% of the running time of GRASP/VND. On the contrary, MS-ELS and
MS-ILS exploit better the local search. First and foremost, they scale much better than GRASP/VND as the number of customers
Fig. 8 was constructed by applying each metaheuristic 200 times to a fixed instance and recording the time needed to find a value. By analyzing the time-to-target distributions, GRASP/VND needs approximately 150s to have a probability of 90% to find a solution as good as the given target value; on the other hand, MS-ILS needs just 50s and MS-ELS only 60s to reach the same quality. 4.5. Multi-depot VRP
Since the STTRPSD is a new problem, no published solution method is available for comparison. Because the MDVRP is a proposed methods on the MDVRP, and compare them against the best published metaheuristics designed to solve it.
 Without changing their parameters GRASP/VND, MS-ELS and MS-ILS were applied 10 times for each instance in the set of test problems commonly used for the MDVRP ( Cordeau et al., 1997 ) (available at http://neumann.hec.ca/chairedistributique/data/ mdvrp/ ). Given that the STTRPSD does not have route-length constraints, we only solve the 11 MDVRP instances without The best known solutions taken from Pisinger and Ropke (2007) were used to calculate the average deviations given in are in bold. As a reference, the results of Pisinger and Ropke (2007) ALNS and Cordeau et al. (1997) tabu search are included in Table 8 .

Although the methods presented in this work are not tailored to solve the MDVRP, the proposed multi-start evolutionary local search performs well and stands as a competitive alternative. Overall, ALNS is the best method, with the smallest deviation (0.40%) and the best average performance on 6 out of the 11 average performance in 4 out of 11 instances. Remarkably, MS-ILS achieved an average deviation of 0.49% against 0.50% of tabu search. Not far along is MS-ELS which is also effective inthesolutionoftheMDVRPwithanaveragedeviationof 0.61%. Finally, GRASP/VND does not perform as well in the MDVRP: 4.96%, its average deviation reaches 9.98%. In terms of computing times, the methods presented in this paper are slower than ALNS and tabu search, specially on problems P18 and P21 with over 200 paper is the STTRPSD and not the MDVRP, we decided not to change our code to tailor it to the MDVRP. 5. Conclusion and future work
In this paper, we introduced the STTRPSD, a generalization of and postal services. To solve the STTRPSD we proposed two metaheuristics: a hybrid GRASP/VND and a multi-start evolu-tionary local search. Both of them perform very well when compared against cluster-first route-second, iterated route-first cluster-second and VND heuristics. The results of the computa-tional experiments on a set of 32 randomly generated instances also unveil the robustness of the proposed metaheuristics, all of them achieving gaps to best known solutions of less than 1% even in the worst case. Among the proposed methods, the multi-start evolutionary local search is more accurate, faster, and scales better (as the number of customers increases) than the GRASP/ VND. Finally, when tested on the MDVRP, a special case of the STTRPSD, the proposed multi-start evolutionary local search obtains results that are competitive to those achieved by the (Cordeau et al., 1997 ). Future research directions include the derivation of a lower bound to evaluate the quality of solutions found with heuristics and metaheuristics, the development of population metaheuristics, and the extension of the methods to the case with multiple vehicles.
 Acknowledgments This research was partially supported by the Champagne-Ardenne Regional Council (France) and by Colciencias (Colombia). Appendix A. Nomenclature A.1. Notation for the integer programming formulation G Graph for the formulation of the STTRPSD, G =( V , A ). V Set of nodes of G .
 V C Subset of V representing the customers.
 V D Subset of V representing the satellite depots.

V 1 Subset of V representing the nodes that can be visited in
V 2 Subset of V representing the nodes that can be visited in
V j Subset of V representing the nodes that can be visited in
A Set of arcs of G . c ij Cost (length) of the arc between nodes i and j ( i ; j n Number of customers. p Number of satellite depots. q i Demand of customer i  X  i A V C ).
 Q V Capacity of the truck.
 Q T Capacity of the trailer.  X  V
 X  Minimum number of second-level trips needed to serve x y A.2. Notation used in the metaheuristics A.2.1. General notation
S A solution of the STTRPSD.
S * Best solution found during the execution of a method. f * Cost of the best solution.

A.2.2. GRASP ns Number of iterations. r Cardinality of the restricted candidate list.
 A.2.3. Split
T Giant tour visiting all the customers in V C , T =( t 0 t j Customer in position j of giant tour T .

F lj Cost of state [ l , j ] in the dynamic programming method. y A.2.4. VND
A.2.5. Multi-Start evolutionary local search Appendix B. Procedures used in Split Algorithm 6. Develop [ k , i ] Algorithm 7. TourToSol ( LD , PD , PC ) Input: LD , PD , PC
Output : S , solution of the STTRPSD 1: Create an empty solution of the STTRPSD S 2: Create flt an empty first-level trip departing from the main 3: L :  X  LD 4: lisd :  X  L 5: Insert L at the beginning of flt 6: j :  X  n 7: repeat 8: k :  X  PD  X  L ; j 9: i :  X  PC  X  L ; j 10: if lisd a L then 11: Insert L at the beginning of flt 12: lisd :  X  L 13: end if 14: Create a second-level trip slt :  X  X  L ; t i  X  1 ; ... ; t 15: add slt to S 16: L :  X  k 17: j :  X  i 18: until j :  X  0 19: add flt to S 20: return S References
