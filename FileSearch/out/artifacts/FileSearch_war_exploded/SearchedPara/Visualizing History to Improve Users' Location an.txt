 Many applications place users into collaborations with unknown and distant partners. Collaboration between participants in such environments is more efficient if individuals can identify and understand the contributions of ot hers. A traditional approach to supporting such understanding within the CSCW community is to record user activity for later access. Issues with this approach include difficulties in locating activity of interest in large tasks and that history is often re corded at a system -activity level instead of at a human -activity level. To address these issues, this paper introduces CoActIVE, a history mechanism that clusters records of user activity and extracts keywords from manipulated content in an attempt to prov ide a human -level representation of history. Multiple visualization techniques' based on this processing were compared in their ability to improve users' location and comprehension of the activity of others. The results show the combination of clustering l ow level history events into activity segments and new visualizations summarizing activity within a segment result in a significant improvement over prior interfaces. H.5.3 [ Information Interfaces and Presentation (e.g. , HCI) ]: Group and Organization Interfaces  X  Asynchronous interaction, Computer -supported cooperative work Design, Experimentation, Human Factors.
 User history, history clustering, history visualization , hi story navigation, long -term indirect collaboration . With the increase in server -based and cloud-based computing, there has been a corresponding increase in applications supporting remote collaborative work. This is resulting in a growth in what Fischer and colleagues call long -term indirect collaboration [4] . In long -term indirect collaboration, people working on the same project or activity collaborate without ever communicating or knowing each other. For example, engineers on a multi -year project in industry may work on the same design but not ever work for the engineering firm simultaneously. Wikis and other web -based shared authoring or design environments create similar situations often supporting particular communities of practice [13] [14] . This form of collaboration cannot rely on real -time communication or coordination support that assume s collaborators know one another . Instead, these collaborations are characterized by collabor ators with potentially little shared understanding. However, without sufficient understanding between collaborators, such remote collaboration will be less efficient and productive. For example, individuals may make duplicate work already done by others or may unknowingly delete others X  work while instantiating their work.
 A traditional approach to improving understanding between Through access to history of activiti es, the participant can not only understand the intentions of their collaborators, but also increase the value of their contribution based on an improved understanding of the past work history [20] [21]. Despite the benefits of preserving records of user activity [11] [20] , there are challenges for its presentation and use in a system. First, locating activity of interest in large tasks becomes a potentially time -consuming activity. Second, users can have problems comprehending automatically -recorded history, which is represented at a system -activity level instead of at a human -activity level.
 This paper introduces CoActIVE, a history mechanism designed to improve users X  ability to locate and comprehend activity within large recorded histories . The mechanism clusters history records and extracts keywords in an attempt to provide a more human-level representation of history. Based on this processi ng, it provides multiple visualizations of collaboration history. CoActIVE is developed as a Java library, which can be integrated in Java applications.
 Evaluation of CoActIVE occurred by integrating it in the Visual Knowledge Builder (VKB), a publicly -ava ilable Java application tha t includes history recording [24] . The evaluation compared the traditional history interface of VKB with three new interfaces provided via CoActIVE. Those interfaces were compared in their ability to improve users X  ability to locate and comprehend the activity of others. The next section discusses issues in the presentation and use of activity history. This is followed by related work, an overview of our approach, a description of CoActIVE, its integr ation with VKB, and the evaluation of CoActIVE. We conclude with a results and directions for future work. A variety of systems collect records of user activity as history. Such systems often enable users to navigate through the history to see previous work by going back and forth between the current and prior state [21] . For a single -person task, this acts as a reminder of prior activity and decisions, while in collaborative applications it provides a source of awareness and understanding of the work of others. For group projects with changing group membership, navigating the efforts of collaborators can give a new participant hints to understand group work more quickly and provide insight into the decisions of those no longer participating in the project [20] . The typical method for representing user history is to record edit events to the underlying data structures involved in an application as user activity occurs in the interface. The resulting record includes low -level properties such as event type and timestamp. However, the fine-grained representation of events can create problems for user interaction with history due to the pote ntial for a mismatch with the user X  X  understanding of their activity. For example, in a document editing application, an operation of inserting a figure in the middle of a page would be recognized as single activity to human users. But, at the low -level of the application, this activity is accomplished by applying a series of system -level events such as  X  X mport a figure X ,  X  X ove a figure X ,  X  X esize a figure X , and so on. The history interface needs to assist in the mapping between a potentially long series of edits recorded by the system to the user X  X  mental model of their activity. This need becomes more severe in collaborative settings since users are often left to interpret collaborators X  intention by recognizing coherent activities from recorded history. As collaborative work continues, the recorded history can quickly become very large increasing orientation and navigation difficulties. Most history interfaces, e.g. controls for playing forward and backward, lists an d even scrubbing sliders, increase the time and effort required for locating a particular activity in the history as the history increases in size. Once found, users can be disoriented when they navigate between different points in a history without an indication of how far in time and effort they have traveled. In general, there is often a trade-off between the effort required to locate an activity and the orientation provided by the interface (e.g. through animation). Interfaces that provide more direct access to prior activities often provide less feedback on the intermediate activities being skipped. Consequently, techniques are necessary to facilitate users X  understanding of where they are in a recorded history and where particular sub-activities occur within that history. History information has been employed for various purposes such as reuse, navigation, reminding, error recovery, user modeling, user interface adaptation, and inter -referential I/O [11] . Whil e some of these uses are for single-user systems, history information has great potential to facilitate collaborative work by increasing awareness and understanding between users.
 Reeves X  collaborative design system, INDY, enabled users to replay and trace collaboration history as well as return to specific events in history. Through the improved support of history, the users could resolve ambiguities in understanding the progress and meaning of collaborative work [20] . The spat ial hypertext system VKB includes a history mechanism similar to that in INDY, including a variety of methods for navigating the history. VKB includes an interface where users can group system -level history events into higher -level activities manually [24] . Automatically grouping events was explored in SmartBack, which identified important states in a history of web navigation to provide more direct access to the most valuable pages in a history [15] . For grouping edit events, applications have included a simple time gap approach to define sessions or noted application start times to generate checkpoints in the history of an artifact. Shirai and colleagues [25] developed a time -slicing method to group events for history summarization.
 Numerous studies visualize aggregated history information to enhance user comprehension of collaborative work. Hill and Hollan X  X  edit wear and read wear visualize the history of author and reader interaction with documents onto document scrollbars [8] . Plaisant et al. propose LifeLines that visualizes summaries of personal history. It provides an overview of a personal history with visual cues, such as line color a nd thickness. Users can also filter the history to focus on part of the record in detail [18] . This technique was also employed in education [19] . Similarly, Begole et al. visualize the history of u ser activity when using a computer and accessing e-mails to extract meaningful patterns of common activity between individuals and within individuals [1] . Vi X gas et al. introduces a history flow tool that visualizes relationships between multiple document versions in the Wikipedia corpus. From the visualization it revealed the patterns of cooperation and conflict among those versions [28] . These systems aid in understanding general trends in activity rather than supporting the location and comprehension of specific portions of an activity. Closest to our work, Nakamura et al. employs a comic strip metaphor to visualize user activity which occurred in Java GUI applications. To summarize the history vis ually, they provide visual cues, such as word balloons for keyboard operations as annotations on each snapshot [16] . Visualization and awareness techniques are employed in asynchronous collaborative work settings as well. Based on Gutwin X  X  workspace awareness in real -time groupware [7] , Tam and Greenberg develop a framework that categorizes question types (e.g. where, who, what, how, when, and why) for tracking change awareness during asynchronous collaboration. The framework provides those changes via an artifact -based view, a person-based view, and a workspace-based view to meet the needs of users [27] . To help developers in distributed development teams analyze code and relevant activities around it, Froehlich and Dourish introduce a visualization tool, Augur. This tool extends SeeSoft [3] by visualizing the combined information of artifacts and activities [5] . Ne uwirth et al. claims that basically participants forget what is going on in asynchronous collaboration so that they depend more on external representation than in synchronous collaboration. Through an observational study, they found that a hypertextual tas k-tailored representation can significantly improve performance [17] . Long -term indirect collaboration [4] involves the addition of new collaborations, or latecomers. Manohar and Prakash suggest a replay mechanism for latecomers in asynchronous collaboration. They propose a session object which consists of multiple stream objects (e.g. audio stream and window events), and users annotate, modify, and exchange it during collaboration. This object is us ed to replay collaborative activity by dispatching the stream objects to an application [12] . On the other hand, Gutwin et al. treat latecomers as a user who has been disconnected from the beginning of a session. Their Disco fr amework identifies disconnection, determines what to do during the disconnection, and handles accumulated data after re-connection [6] . In general, our approach to event aggregation and feature extraction significantly expands on prior work. Also, to our knowledge, the comparison of visualizations for locating and comprehending the work of others is unique. To address the issues previously described, our approach is to develop a history mechanism that aggregates the sy stem -level record of history into higher -level and hopefully more meaningful activities and visualizes salient characteristics of these activities to increase users X  ability to locate and comprehend prior work. Human activities are often described, whether retrospectively explaining ones actions or in planning for future action, via a vocabulary of tasks and sub-tasks [26] . The goal of aggregating the system -level activity is to f orm a hierarchic representation of the recorded system -level events that roughly corresponds to the tasks and sub -tasks people would use to describe the activity. Such an aggregation would help users more quickly comprehend memory/understanding of the activity. A multi-level representation would benefit larger tasks if the levels correspond to the participants X  mental model of the tasks and sub-tasks of their activity.
 To generate such a representation, CoActIV E employs Hierarchical Agglomerative Clustering (HAC). This algorithm repeatedly clusters history events until a list of low -level events is organized as a tree representing a hierarchic structure of human activity. HAC relies on a distance function in or der to determine which low -level events and previously -generated groupings to merge next. While others have explored purely time-based clustering [25] , i.e. merge the next pair of subclusters with the smallest gap, such a funct ion will not work in a synchronous CSCW environment where there are expected to be activities corresponding to separate simultaneous sequences of edits. While simply using time -based clustering for each individual user solves most of such problems, it will misrepresent the rapid transition between activities. As a result, CoActIVE enables an application -specific distance model that can be used to include numerous features of the system -level record of activity (e.g. time, user, content, location, etc.). In our work, the recorded history X  X  value lies in its ability to provide insight to users. Such insight requires that users are able to locate and comprehend periods of activity relevant to their current work. Thus, na vigation interfaces and visualizations are central to such a process.
 History interfaces need to facilitate users X  understanding of specific states of the history. The history states are characterized by their point in time and by the representation of the domain-specific artifact at that time. By displaying lists of times and an indication of the associated artifact states, users get a sense for the flow of activity. Expanding from a list to a tree visualization facilitates a hierarchical structure that indicates the relation between states via sequence of tree nodes, levels of the tree, etc. but requires user interaction to open/close branches of the tree to show/hide details.
 Another goal of these interfaces is to help users understand the process of work that led to particular states. Processes are composed of series of actions. While static visualizations, especially filmstrip visualizations of artifacts, provide some sense of process, animations that play back user activity provide a natural view of process.
 When history becomes large, visualizations that represent the whole structure of the history in detail are not possible. Instead, the visualization and interface must select specific points in the history to present or they must determine abstract characteristics of the history states or event sequences which provide adequate information to the user. Our approach is to provide navigation interfaces that visualize the aggregated history. Through the interfaces users will be aware of their current location in the history and be able to navigate to other locations in the history. We employ techniques to generate visual/textual hints to better represent the history segments resulting from aggregation. Simultaneously, the visualizations provide opportuniti es for users to access event -level information when needed. Many applications would benefit from support for activity location and comprehension and already include basic undo/redo capabilities. By relying on such existing features of applications, CoActIVE can be incorporated in a number of existing JAVA applications. CoActIVE only requires temporal and action information but allows developers to include application-specific features (e.g. an application -specific d istance function for clustering events) as desired. CoActIVE, the Collaborative Activity Interpretation and Visualization Engine, is a Java library that can be integrated into Java applications that already have an undo/redo capability. Here, we d escribe its integration use in VKB. The Visual Knowledge Builder (VKB) is a spatial hypertext system developed to support collaborative knowledge building [24] . The system provides two-dimensional w orkspace where users author and collect information, and share this workspace with their collaborators. In the workspace, information is represented as information objects which can contain text, attributes and values, links to files or URLs, and images. U sers can assign visual characteristics (e.g. border/background color and border width) to objects and place objects in a hierarchy of two-dimensional spaces called collections. Through the placement of the objects with visual attributes, users can categori ze the objects and interpret collaborators X  representation of information [22] . VKB was chosen as the first application to be modified to use CoActIVE because it already contained a history mechanism [21] and an interface that could be compared to CoActIVE. Figure 1 shows the CoActIVE architecture, consisting of five main parts: a history manager, a history interpretation module, visualization components, I/O int erfaces, and a database. The history manager is the central component of CoActIVE. It creates a history event when a user activity occurs, manages it in an underlying data structure, and provides history information to the other parts.
 User activity in an application is represented as a system -level event or a series of events by the history manager. When those events occur, the manager stores them in a database through I/O interfaces. The record ed history is provided to the history interpretation module and visualization components for additional processing.
 System -level event structures include the information required by the history mechanism. The information stored for each event includes an e vent id, an event type, a task description, a username, and a timestamp. The event id is unique and assigned by the history manager.
 Each application will have its own set of event types  X  these generally correspond to the alternative actions found in the application X  X  existing undo/redo software. Information specific to the event type can be attached to the event. For VKB events, this includes information about the content, visual properties and locations of objects being manipulated. CoActIVE X  X  History Interpretation Module generates a higher level representation of the history in order to aid the user. It clusters the individual history events into (hopefully) meaningful groups and generates summaries for these clusters. Conceptually, the goal of history clustering is for the tree to represent a form of hierarchic task decomposition of the effort that is recorded in the history. The interpretation module uses Hierarchical Agglomerative Clustering (HAC) to group similar events together into an initially unknown number of higher -level activities in a two -step process. First, the interpretation module computes the distances between each pair of consecutive events. In the module, each history event is initially regarded as a single leaf node, and similar nodes will be grouped until the remaining nodes are too far apart to be viewed as part of the same activity. Therefore, it is important to define a distance function that determines what it means for events to b e similar. The distance function can take into account both application-independent (e.g. a timestamp) and application--dependent characteristics of events. By default, the time gap between events is used as the distance function. However, the distance fu nction can be redefined based on the characteristics of a target application. CoActIVE X  X  integration in VKB provides an example of an application -specific distance function. Here, a spatio -temporal distance metric is used that defines the distance as a wei ghted sum of the spatial distance and the temporal distance between consecutive events. The temporal distance is simply the time between events. Determining the spatial distance between events is complicated as the hierarchy of collections does not provide a single Euclidean space and events may have two areas of effect that can span collections (e.g. moving muliptle objects from one collection to another has an area of effect that includes portions of each collection.) The spatial distance is computed to be the minimum distance between the areas of effect of subsequent events. When two areas of effect do not share a collection in common, a large constant is added for each collection traversal between the two areas of effect. The second step in clustering e vents is to select the distance thresholds used to group events. The more thresholds selected, the deeper the resulting tree of events. CoActIVE dynamically selects the thresholds based on an analysis of the distribution of pairwise distances between consecutive history events. The pairwise distances are sorted in ascending order and the dramatically increasing values in the distance curve are selected as thresholds. Once the thresholds are selected the events are grouped into the final event tree that will be used to generate visualizations. Once a history is clustered, CoActIVE generates a textual summary to represent each cluster. When no other information is available, the time period for the history acts as the summary. CoActIVE includes an optional textual content field for each event that can be populated by an application-dependent function added during integration. For VKB, this is filled in by aggregating the text in the objects affected by an event.
 When CoActIVE has content field data, the interpretation module extracts keywords for each cluster by employing the Java WordNet Library (JWNL) [9] . Only nouns are considered after removing stop words from the content. With the selected nouns, their TF -IDF (Term Frequency  X  Inverse Document Frequency) weights are calculated to suggest significant keywords for groups at each level of the cluster tree. The keywords are then added to the time period to be the summary of an event cluster. CoActIVE employs multiple visualization techniques to assist users in locating particular activity and understanding the history of collaborative work. By providing both high-level and low -level navigation components, users can nav igate history via overview and detailed views simultaneously. These views are tightly -coupled to help the users orient themselves during history navigation. The focus of this paper is on novel detailed visualizations enabled by the History Interpretation Module. We now describe the four visualizations compared in the evaluation: the History Session Viewer, the History Interpretation Viewer, and Filmstrips with textual and visual summaries. The first, and most basic, detailed visualiz ation is the history session viewer. It is almost same as the history interface found in VKB 2. The viewer shows a list of recorded events via a history tree component (see Figure 2). The history tree presents those events via a two -level tree where leaf nodes represent system -level events and their parent node is a grouping of those events into sessions based on a predefined time gap. Each tree node displays an event type (e.g.  X  X oveSymbol X ), operation details (e.g.  X  X ove from L1[17, 72] to L2[19,166] X ), a nd content from which the event was applied. In the tree, recent events are shown at the top, while earlier ones are at the bottom. The History Interpretation Viewer presents the results of History Interpretation Module in an augmented version of the History Session Viewer X  X  tree view. As shown in Figure 3, top-level nodes of the history tree represent the highest level clusters identified. Instead of the two -level tree of the session viewer, users investigate more detailed act ivity by unfolding the nodes and their descendants. Also, keywords are provided for each group of events in the tree. To the left of the tree view is information about the time/date of the activity and the user(s) involved in the activity.
 Color coding of terms provides cues for the role of keywords in the activity represented by a cluster. Red indicates the term comes from the title of a collection created during the activity. Blue indicates a term from a collection title that was modified. Similarly, gree n and black indicate terms from information objects that were either created or modified. Filmstrip visualizations of history are a natural way to present change to a visual artifact over time. The cluster tree from the History Int erpretation Module is used to decide which images to include in the filmstrip. In order to limit the amount of scrolling required of users, the visualization includes a maximum on the number of segments presented (current default is 16). Figure 4 shows the filmstrip with thumbnails of a VKB workspace for each history segment along with associated time, keyword, and user information. Visual cues are also provided to indicate the user X  X  current location in the history. In Figure 4, the yellow background of t he time range field shows that the user is currently viewing a state within the sixth group, and the red vertical line with an event id indicates that particular location is right after the 202nd event was performed.
 When a user places a mouse pointer over the thumbnail of the selected group, a small window pops up on it and shows a list of collection titles. The window employs a blue -colored  X  X pdated X  label to specify an updated title and a red -colored  X  X ew X  label for a new one. The title with no label means that the user was active in the collection.
 Under each image is a  X  X etails X  button for accessing more information about a particular history segment. In the following study, we compared two alternative details views: a textual summary and a visual summary. The textual summary aggregates and presents the textual content of objects and collections modified during a history segment. This provides detail beyond that found in the filmstrip to determine if particular content was involved in a segment and to identify themes involved in the segment. Figure 5 shows an example of a textual summary. As with the mouseover in the thumbnail image in the filmstrip, a label indicates if a piece of text was created or deleted is provided. Where the filmstrip component provides an overview of the users X  work process, the visual summary provides more detailed visual cues regarding specific user activities via a series of thumbnails that can be thought of as a more detailed filmstrip.
 The ma in advantage of the visual summary is that each user action will be visible in an element in the visual summary. When multiple subsequent actions take place in the same region, a single thumbnail is included (e.g. the middle of Figure 6). When a user actio n cannot be part of the same thumbnail as the previous user action, a new thumbnail is created.
 Each thumbnail includes visual cues indicating user activities that happened during the period. In the figure, the thumbnail representing the group from the 696th event to the 727th includes a dot on the left -top side of each three objects and one popup window on the middle object. The dot is yellow when the object or collection was updated and red when it was created. Next to the dot, a brief text field provide s a snippet of the object X  X  or collection X  X  textual content. Placing the mouse pointer over the text results in popup window showing more of the text. A smaller thumbnail without dots is provided for individual events. At the core of the CoActI VE design is the goal to improve users X  ability to locate and comprehend the work of others. A study was performed to determine the effect of the alternate visualizations towards achieving these goals. The study used the recorded history from previous coll aborative activities in VKB where the study participants would have no prior knowledge of the activity or the people involved in the activity. This is the same situation as someone just beginning to participate in an existing on-line collaboration, such as suggesting edits to a wiki page. 24 graduate students were recruited via email and in -person contact. 75% of the participants had an engineering background and the others were from diverse areas (architecture, natural science, social science, and education).
 All participants reported using a computer daily and have used computers for more than four years. All participants also answered that they had experience with history tools, and have used undo/redo in document or picture editing applicat ions. Other uses of history reported by participants included revisiting web pages, version control, and history support in an Integrated Development Environment. Overall, most participants felt they needed history tools for undo/redo and tended to be sati sfied with the existing tools (25% were neutral and 67% were satisfied). 15 of the 24 participants (62.5%) had experience working with other people via collaboration applications. Only two participants reported using history information to find particular activity or to understand work progress in such a collaboration. Most participants mentioned that they had a hard time recognizing the work of collaborators, and some reported not trying to understand the work of others due to such difficulties. Some parti cipants reported browsing the modified parts of a work (e.g. document, design) relying on their memory of previous work to locate changes. Participants were placed in the role of a teaching assistant examining collaboratively authored VKB documents to determine which students did what. Each participant was asked to answer an equivalent series of questions about four different recorded collaboratively authored by two students spread acr oss two classes at different universities. The four documents used were selected based on having relatively similar work practices and approximately the same amount of recorded activity. Table 1 lists the topics of the four VKB spaces and the number of use r events recorded for each activity.
 As a teaching assistant, participants were asked to understand how the given VKB documents had been developed and in what wa y each project member had contributed to the documents. Four visualizations were provided to answer the questions; they were the history session viewer, the history interpretation viewer, the filmstrip visualization with textual summaries, and the filmstrip visualization with visual summaries. Each participant used a different visualization to answer the questions for each recorded activity. The assignment of recorded activity to visualization type was balanced (6 for each pair). Due to the potential for le arning effects, the order of the visualizations was balanced across subjects; each of the 24 participants had a unique visualization order. Participants could also use the VKB X  X  embedded history playback capabilities in all conditions.
 A tutorial session w as given before beginning the first task. The session covered the use of both VKB and the history mechanism. After the task, participants answered a short questionnaire that asked about their satisfaction with history support and visualization settings. A brief interview followed after the survey. Each task included five questions, one of each type shown in Table 2. Questions of type one though four were assessed base d on both the time required to answer the question and the correctness of the answer. The last question was measured based on the number of correct and incorrect answers provided in the time provided (3 minutes).
 The five types of questions represent five different history location and comprehension activities. The first question is to examine the effect of the visualization on locating a specific activity by a certain user. The second question determines the visualization X  X  effect on recovering the prior s tate of a specified element in the document. The third question examines the visualization X  X  effect on comprehending the order of specific visualization on locating a particular state of the documen t. The last question tests the visualization X  X  effect on identifying all the activity of a particular user regarding specific information. While we expected the clustering and summarization would aid the location and comprehension tasks, we were not sure which of the augmented views would be of most aid to participants and which would be preferred. In particular, the History Interpretation Viewer provided a simple interface that is easy to use but does not provide as much information. The filmstrip with the textual summary provides more detail concerning the content modified and requires less interaction than the visual summary but the visual summary provides more context of the interactions. Here we present results indicating the effect of the visu alization on time required for tasks, error rate for tasks, and user satisfaction. The mean time which 24 participants spent on the four tasks was 58.52 minutes. The total time for the evaluation was around two hours including demographic and domain surveys, tutorial session, questionnaire, and interview. Table 3 shows the mean and standard deviation of total time the participants spent on the first four questions with each visualization. Participants took the most time when using the history session viewer (VS1: Visual Setting #1) and the least time when using the filmstrip visualization+visual summary (VS4). The differ ence between VS4 and VS1 is significant (Kruskal -Wallis, p&lt;.001). A post -hoc Tukey X  X  test showed significant differences between all permutations of the pair VS3 and VS4 with the pair VS1 and VS2 with p&lt;.001, The difference between VS3 and VS4 was not significant (p=.62) nor was the difference between VS1 and VS2 (p=.13). Table 4 shows the mean and the standard deviation of time taken to perform each of the first four types of questions under four visualization settings. The results found in the overall time continue for each of the four question types. VS4 has the shortest mean time to complete each type of question, with VS3 taking slightly longer and VS2 being somewhat faster than VS1. The notable exception was that fo r Type 2 questions, VS2 was only slightly slower than VS3 and took less than half the time of VS1. The Kruskal -Wallis test shows that, for each question type, VS4 and VS1 results are significantly different (p&lt;.001). Tukey X  X  test shows a similar pattern as the overall results  X  that VS1 is significantly different from VS3 and VS4 for all question types (p&lt;.003 for closest) and that VS3 and VS4 are not significantly different from each other for any question type.
 Answers provided by participants were not always correct. Table 5 shows the number of incorrect answers for each visualization setting for each of the first four question types. Among the settings, 11 error s (55% of the total errors across all conditions) were during use of the history session viewer. From this result, it seems that working with low -level history yields a higher error rate. Particularly, participants seemed to have difficulty in understanding the order of specific activities (type 3) and locating a particular state of the document in the history (type 4). The History Interpretation Viewer also resulted in a number of errors when locating a particular state of the document. The fifth question in each task was designed to assess the efficiency of each interface for finding all the activity of a particular type. Table 6 presents the average number of correct answers and their standard deviation in the three minutes provided. Here again the filmstrip with visual summaries performed the best. This time the difference between this interface and all other interfaces is significant. After the completi on of the task, participants responded to a set of questions regarding their satisfaction. The questions employed a Likert scale where a value of 1 indicated strong disagreement, and 7 indicated strong agreement.
 Overall, participants X  reported preference matched the performance results: VS4, VS3, VS2, and VS1. VS4 was the most preferred (21 strongly agrees, 2 agrees) while VS1, which is similar to the history interface found in VKB 2, was least preferred (18 strongly disagrees, 3 disagrees).
 While being pr eferred overall, a few participants reported being confused when navigating the filmstrip visualization. One issue was that the thumbnail for a segment showed the final state of that segment so when users go the segment and move forward in time they immedi ately see work that is part of the next segment.
 When asked about the value of particular features, participants responded positively to the automatically -generated hierarchic interpretation of history, and the presentation of keywords and author informati on associated with the segments of activity. The increase in server -based and cloud-based applications has brought a corresponding increase in long -term collaborations among people who may never know one another. Records of user activity suppor t can be used to provide an understanding of prior effort in such situations but locating and comprehending particular activity within large history records can be difficult for users.
 CoActIVE is a history mechanism that clusters system -level activity into higher -level episodes, generates textual and visual summaries of these episodes, and provides a variety of history visualizations based on the inferred episodes. CoActIVE can be adapted for use with most Java applications that already support undo/redo. An evaluation compared performance and satisfaction for participants answering questions that required them to locate particular events or states in a recorded history and to comprehend who performed different activities and the order of activity. Two list/tree views of the history record and two filmstrip views of the history record were compared. The list views included a traditional event-list view as found in current applications and an augmented tree view of the hierarchically -clustered activity. The two filmstrip views differed in that one provided textual summaries of changes and one provided visual summaries. The results of the study showed improvements for all three new interfaces over the traditional event view but the two filmstrip views significantly outperformed the two list/tree views. Participants were able to perform the tasks most efficiently with the fewest errors with the film strip view with visual summaries. This view was also their favored view in post -task surveys and interviews.
 Futu re work can build on these results. The evaluation performed did not specifically examine the quality of the clustering results. Comparing alternative event -clustering algorithms has the potential to improve the overall support of such interfaces. Similarly, the four visualizations compared are examples from a large design space for history visualization. The results show visual presentations of history and state were the most valuable but that may differ depending on the application being supported. Finally, while we have integrated CoActIVE in a second Java application, it is future work to determine if the results seen here will transfer to that application. This material is based upon work supported in part by the National Science Foundat ion under grants DUE -0938074 and IIS -1049217. [1] Begole, J., Tang, J.C., Smith, R.B., and Yankelovich, N. [2] Derthick, M. and Roth, S.F. Data exploration across [3] Eick, S., Steffen, J., and Sumner, E. Seesoft -a tool for [4] Fischer, G., Grudin, J., McCall, R., Ostwald, J., Redmiles, [5] Froehlich, J. and Dourish, P. Unifying artifacts and activities [6] Gutwin, C., Graham, N., Wolfe, C., Wong, N., and Alwis, B. [7] Gutwin, C. and Greenberg, S. The effects of workspace [8] Hill, W.C., Hollan, J.D., Wroblewski, D., and McCandless, [9] Java WordNet Library, http://jwordnet.sourceforge.net. [10] Klemmer, S.R., Thomsen, M., Phelps -Goodman, E., Lee, R. [11] Lee, A. Investigations into History Tools for User Support . [12] Manohar, N. and Prakash, A. The session capture and replay [13] Marshall, C.C., Shipman, F.M., and McCall, R.J.  X  X utting [14] Marshall, C.C., Shipman, F.M., and McCall, R.J.  X  X aking [15] Milic -Frayling, N., Jones, R., Rodden, K., Smyth, G., [16] Nakamura, T., Igarashi, T. An application -independent [17] Neuwirth, C., James H. Morris, J., Regli, S., Chandhok, R., [18] Plaisant, C., Milash, B., Rose, A., Widoff, S., and [19] Plaisant, C., Rose, A., Rubloff, G., Salter, R., and [20] Reeves, B. Supporting Collaborative Design by Embedded [21] Reeves, B.N., and Shipman, F.M.  X  X upporti ng [22] Shipman, F., Airhart, R., Hsieh, H., Maloor, P., Moore, J.M., [23] Shipman, F. and Hsieh, H. Navigable History: A Reader's [24] Shipman, F.M., Hsieh, H., Maloor, P., and Moore, J. M. The [25] Shirai, Y., Yamamoto, Y., and Nakakoji, K. Time -Based [26] Suchman, L.A., Plans and situated actions: The problem of [27] Tam, J. and Greenberg, S. A framewo rk for asynchronous [28] V i X gas, F.B., Wattenberg, M., and Dave, K. Studying 
