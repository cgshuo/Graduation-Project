 1. Introduction
Rail transportation planning enco mpasses several steps: analyz-ing the passenger X  X  demand, line planning, train schedule planning, rolling stock planning, and crew management ( Ghoseiri et al., 2004 ).
Train scheduling is considered as the most challenging problems in railway planning that affects the interests of customers and the cost the planed arrival and departure times of trains to/from stations.
The classical objective function is to minimize the delays of trains to their destinations. The idea can also be extended when other kinds of objectives, such as minimization of the deviation from the working hours of crews and the fuel consumptions, are considered.
The main purpose of this paper is t o present a mathematical model to solve periodic train scheduling and a hybrid meta-heuristic algorithm that helps us detect some near optimum solutions for large-scale problems in a reason able amount of time. During the past decade, a train scheduling problem has become one of the most interesting research topics in railway optimization problems. Cor-deau et al. surveyed a number of mathematical models for train routing and scheduling ( Cordeau et al., 1998 ). Furthermore, Table 1 shows a brief summary of the recent published literature in this field. In this table, the railway type is divided into network, single track, and double track categories. It is worth noting that a railway network is defined as a number of tracks, which may cross each other, so that trains may have different routing options.
The signaling system is defined as a tool to make a safe condition for train movements on block segments. We categorize the system in three different levels: the moving block, the fixed block and the simple mode, in which the distance between two adjacent stations consists of only one block section. By the station capacity, it is meant that the limitation of the number of tracks inside the stations is considered in the problem. The periodic railway timetabling problem is the issue of scheduling arrival and departure events of trains to/from stations given a line-plan, such that each event is recurring with some interval T , and all necessary safety conditions hold.

Serfani and Ukovich introduced a new formulation for periodic scheduling, named the periodic event scheduling problem (PESP) ( Serfani and Ukovich, 1989 ). Since then, there have been tremen-dous efforts to apply this formulation for train scheduling problems periodic robust railway scheduling was investigated by ( Kroon et al., model to modify the time supplements and the buffer times in the generated timetables to improve the robustness. To provide a periodic timetable, the PESP method is employed in this paper. It is worth nothing that the periodic scheduling considered in this paper differs from so-called cyclic scheduling (CS), in which some set of activities is to be repeated to an indefinite number of times and it is desired that the sequence to be repeated. The difference between the CS and PESP is that for the CS, one intends to minimize the periodic length; however, the PESP deals with a scheduling problem in which the periodic length is fixed and the main objective is to minimize the total weighted delays.
The paper is organized as follows. First, we give a brief explanation of the PESP in Section 2 . The problem statement of the periodic single-track train scheduling is presented in Section 3 .
Section 4 presents the proposed sim ulated annealing (SA) and particle swarm optimization (PSO) algorithms as well as the hybri-dization of these algorithms. Thereafter in Section 5 ,thecomputa-tional results are shown and the effectiveness of the proposed algorithm is investiga ted. Furthermore, we present the Tehran X  Isfahan railway line as a case study of our proposed algorithm.
Finally, the conclusion remarks are given at the end to summarize the contribution of this paper. 2. Periodic event scheduling problem (PESP)
Serafini and Ukovich introduced the periodic event scheduling problem (PESP), which is defined as the problem of scheduling a number of recurring events, such that each pair of events fulfills certain constraints. Given a time period of T , a set of V events and a set of constraints A , every constraint a  X  ( i, j ) defines a lower periodic interval constraints imposed on the schedule can be encoded in an event-activity graph D  X  ( V, A ) with node set V and arc set A which represent events and activities, respectively, see Fig. 1 .

A solution of a PESP instance is the one that satisfies following inequality:  X  p i l a  X  mod T r u a l a , 8 a  X  X  i , j  X  A A ,  X  1  X  where p i is the occurrence time of event i . To apply integer programming techniques, the following reformulation of Eq. (1) can also be utilized. l r p where z a A Z .
 The reader is referred to a comprehensive study given by
Kinder for more details ( Kinder, 2008 ). There are some studies showing that the PESP is NP-complete for fixed T Z 3( Liebchen and Peeters, 2002 ; Nachtigall, 1996 ; Serafini and Ukovich, 1989 ).
In a single-track periodic train scheduling (SPTS) problem, events are defined as arrivals and departures. Therefore to reach the formulation of the SPTS problem, the constraints involved with the scheduling of arrivals and departures need to be modified based on the PESP approach. The SPTS formulation is presented in the next section. 3. SPTS model
The single-track periodic train scheduling (SPTS) problem is defined as follows. Consider a railway line consists of n stations connected by n  X 1 block sections. There are m trains passing the stations and block sections one after another. In general, in contrast with double track railway lines, the signaling system in single-track ones does not allow more than one train to pass between adjacent stations at the same time. Fig. 1 shows a part of graph representing a safe transit of two opposite-direction trains.
Given the traveling time of trains, the origin and the destination, the idle time of trains in stations for passenger mounting and dismounting, and the importance weight of trains, we need to find the arrival and departure times of trains to/from stations, in such a way that the objective functions are optimized and all the operational and safety requirements are satisfied. The arrival and the departure times have to be in a recurring mode so that all events are repeated after a period length of time. We assume there are lower and upper bounds for the departure time of trains from the origin. In other words, a fixed time is not allocated for departures of the trains from the origins.

To formulate the SPTS, the following notations are used in the mathematical model.
 B set of block sections S set of stations
R set of trains t ib required time for train i to pass block section b s ib idle time of train i at the beginning of block section b for wi importance weight of train i o i first block section that should be passed by train i d i last block section that should be passed by train i l i lower bound for departure time of train i from o i u i upper bound for departure time of train i from o i
T time period arr ib arrival time of train i to the end of block section b
To achieve the SPTS model, a job shop scheduling (JSP)-based model is used ( Baker, 1974 ). It is worth noting that the single-track scheduling problem can be mathematically modeled based on the JSP, in which trains and block-sections have the same role as jobs and machines in the given problem.

Following is the proposed mathematical model of the SPTS problem, called Model P1 by
Model P1: min s.t. t  X  s ib 0 r arr ib 0 arr ib r T 1 , 8 i A R , 8 b , b 0 A  X  o t r arr ib arr jb z ijb T r T t jb , 8 i , j A R , 8 b A  X  o l r arr io where z ijb are integer variables  X 8 i , j A R ; 8 b A B  X  .
The objective function of the model (P1) is to minimize the total weighted traveling time of trains. Constraint 4 provides the condition that trains pass block sections one after another. Note that b 0 is the block section which needs to be met by train i after block section b . Constraint 5 represents the precedence of trains and assures that, at most, only one train can move a particular block section, concurrently. Constraint 6 indicates that the depar-ture time of train i from the origin needs to be in the interval [ l , u i ].

As stated before, the presented model is based on the JSP, which is classified as one of the most challenging NP-complete problems ( Garey et al., 1976 ). Exact algorithms such as branch and bound algorithm are only able to solve small size instance of good solution for real instances in a reasonable amount of time, heuristic algorithms should be applied. 4. Hybrid heuristic algorithm
In this section, a hybrid algorithm consisting of particle swarm optimization (PSO) and simulated annealing (SA) algorithms is proposed to solve the SPTS. We first present an encoding scheme in order to generate schedules. Then, the application of SA and PSO algorithms in SPTS is explained. Finally, the hybrid algorithm is presented. 4.1. Encoding scheme
An appropriate representation of the schedules affects the effectiveness of any algorithm. Each schedule can be achieved by a specific order of trains that shows the priorities of trains in passing block sections. Using random keys (RKs) as the encoding scheme is well experienced and is easy to adjust to the PSO and SA algorithms ( Chang et al., 2009 ; Tavakkoli-Moghaddam et al., 2009 ). The random keys method is used to present the order of trains in passing block sections.

In this paper, the act of passing a block section by a train is called transit. The priority of trains to pass the block sections is shown through random keys. For this purpose a random number between 0 and 1 is assigned to each transit, and these random keys show the relative order of the trains in passing block sections. As an example consider a problem with three trains and two block sections. Suppose that each train should pass block Section 1 and then 2, and thereby for this problem there are six transits on hand {1 1 2 2 3 3}. For each transit, a random number is randomly generated from a uniform distribution between 0 and 1 as shown in Table 2 . These RKs are then sorted to find the relative order of transits as illustrated in Table 3 .Thistable states that the order of trains for passing block Sections 1 and 2 is equal to {2 -3 -1} and {3 -1 -2}, respectively. 4.2. Simulated annealing (SA)
Simulated annealing (SA) is an intelligent approach designed to give a good optimal or near-optimal solution within a reason-able computational time providing a means to escape local optima by considering moves which worsen the objective func-tion value. The motivation for this algorithm comes from an analogy between the physical annealing of solid materials and optimization problems. In annealing, a metal is first heated to a high temperature and then cooled down with a very slow rate to the room temperature. In SA, it can be said that: the slower the cooling, the higher the chance of finding the optimum solution, but the longer the run time. For more details one can refer to ( Kirkpatrick et al., 1983 ).

The notations used in the proposed SA are as follows. k iteration counter T k temperature in the k -th iteration s k k -th schedule
T 0 initial temperature s best best found solution f ( s ) objective function value for schedule s a cooling factor
P accept  X  s , s 0 , T  X  probability function to accept non-improving
The main steps of the proposed SA algorithm for the SPTS problem are as follows.
 Outer loop:
Step (1) Set the SA parameters, based on Section 4.2.4 , (Parameter tuning): T 0 and a . Let k  X  0
Step (2) Select an initial solution s , based on Section 4.2.2 , (Initial solution generation).

Step (3) If s is infeasible go to Step 2; otherwise, let s go to Step 4.
 Step (4) Generate a neighborhood solution, s 0 , based on
Method 1 specified in Section 4.2.3 , (Neighborhood solution generation).
 Step (5) If s 0 is infeasible go to Step 4; otherwise, go to Step 6.
The infeasibility is checked based on Section 4.2.1 , (Feasible solution).

Step (6) If f ( s 0 ) r f ( s ) or random[0, 1] o P accept f ( s 0 ) r f(s best ) , then s best  X  s .
 Inner loop: Step (7) If the termination criterion is not satisfied then
T  X  a T k X 1 ,k  X  k  X  1 and go to Step 4; else, stop and return s
P 4.2.1. Feasible solution
Schedules are generated based on the orders, which are given to the transits. This method always leads to a feasible solution in classical but not in periodic scheduling.

Remark 1. The period length affects the solution. One can say that as the period length for a specific problem increases, the optimum solution never worsens. On the other hand, if the period length decreases the optimum solution never improves. There is always a limit for the period length, in which less than this limit there exist no feasible solution. Moreover, the lower bound for travel times of all trains in passing a specific block section should be always more than the period length.
 solution for the given problem.

Remark 3. For each block section, all assigned transits need to be performed in a time interval less than the period length. Fig. 2 depicts an infeasible SPTS in order to clarify the issue. It is intended to schedule five transits in the period length of T in a block section. In this figure, the first time allocation is infeasible because there is no interval to assign train 5 in the period length, while the second one is feasible. 4.2.2. Initial solution generation
A solution is the one that determines the departure times of trains from the beginning of the block-sections, and arrival times of trains to the end of block sections, such that Constraints (4) to (6) are satisfied. In this paper, to obtain a good initial solution, each of the following approaches can be used.

Based on the first leave first served (FLFS) rule. In this method, the earliest possible times are assigned to trains. In the case that two or more trains compete for the same block section, the precedence is given to the one that leaves the block section first.
Based on first in first out (FIFO) rule. In this method, the earliest possible times are assigned to trains. In the case that two or more trains compete for the same block section, the precedence is given to the one which has waited more.

Based on random keys. In this method as explained in Section 4.1 , for each train passing a block section a random number is assigned. The priorities of trains in passing block sections are based on these random keys.

The idea behind defining three approaches is to the fact that there exists no assurance to find a feasible solution using the FLFS and FIFO rules. 4.2.3. Neighborhood solution generation
Two methods are used in order to generate a neighborhood candidate.

Method 1 : This one is based on the single point operator method. In this method, the RK of one randomly selected train from schedule s is regenerated at random.
 Method 2 : In this method, train i is first selected at random.
Then, the departure time from the origin of train i, arr io randomly regenerated such that the new assigned time is still in the interval [ l i , u i ]. Note that in this method the random keys and subsequently the priorities of trains in passing block sections remain fixed. 4.2.4. Parameter tuning
Assigning appropriate values to the algorithm parameters significantly affects the quality of algorithms. To tune the SA parameters (i.e., T 0 and a ), a full factorial design in the design of experiment (DOE) method is applied. Table 4 shows three levels for the parameters. Therefore, a 3 2 design is applied. Moreover, 15 instances are randomly generated and solved by the proposed
SA algorithm, assuming each of 3 2 combinations of ( T 0 , a ). The algorithm is terminated after performing 3000 iterations.
To compare the instances, the relative deviation index (RDI) obtained by the following formula is used.

RDI k  X  F k Min Max Min 100  X  8  X  where F k is the objective function value of the k -th combination.
Min and Max are the best and worst achieved objective function value amongst the 3 2 combinations, respectively.

All the (15 3 2  X  ) 135 instances are solved, and the results are analyzed by the means of the analysis of variance (ANOVA) method. The normality, homogeneity of variance and indepen-dence of residuals are analyzed. The results demonstrate that there is no particular pattern in experiments. Fig. 3 depicts the interaction plot for parameters T 0 and a . The results show that the combination of T 0  X  50 and a  X  0.99 are statistically better than other evaluated combinations. 4.3. Particle swarm optimization (PSO)
Particle swarm optimization (PSO) is an evolutionary compu-tation technique proposed by ( Kennedy and Eberhart, 1995 ). PSO is based on observations of the social behavior of animals such as birds in flock. It is initialized with a population of random candidate solutions known as particles. Similar to a bird that flies to the food, one particle moves its position to a better solution with a velocity that is dynamically adjusted according to its own flying experience and its companions X  flying experience. The velocity and position of each particle is iteratively calculated by v  X  wv r  X  c 1 Random  X  0 , 1  X  P r l x r  X  X  c 2 Random  X  0 , 1  X  P x  X  x r  X  v r  X  10  X  achieved. P g is the best global solution which represents the best position among all particles in the swarm. w , c 1 and c 2 positive constants that represent the weight of previous velocity, the weight of the stochastic acceleration terms that pull each particle toward P r l and P g , respectively. The following PSO algo-rithm is proposed for SPTS.

Step (1) Let k  X  1. Generate pop initial schedules: x r r  X  1, y , pop , based on Section 4.2.2 (i.e., initial solution gen-eration). Considering Section 4.2.1 (i.e., feasible solution), if each of the generated schedules is infeasible re-generate it until all pop schedules are feasible. Find the objective value for each particle. Update P r l and P g .

Step (2) Let k  X  k  X  1. Update the position and velocity of the particles according to Eqs. (9) and (10).

Step (3) If each of the updated schedules is infeasible, set
Step (4) Find the objective value for each particle. If f  X  x r f  X  P r l  X  then P r l  X  x r k .If f  X  x r k  X  r f  X  P g  X  then P criterion is not met, then go to Step 5; otherwise, return P
Step (5) For each particle, x r k , generate a neighborhood solu-tion, x 0 r k , using Method 2 specified in Section 4.2.3 (i.e., neighborhood solution generation).

Step (6) If the neighborhood solution, x 0 r k , is infeasible then until finding a feasible solution regenerate the schedule using
Method 2, specified in Section 4.2.3 (i.e., neighborhood solu-tion generation).

Step (7) If f ( x 0 r k ) r f ( x r k ), then x r k  X  x 0 r then P g  X  x 0 r k . Go to Step 2. the neighborhood particle position of x r k . pop is the population number. 4.3.1. Parameter tuning
In this section, four parameters related to the PSO algorithm design in the DOE method is applied. Table 5 shows two levels for each of the parameters, and therefore a 2 4 design is performed. 15 different instances are randomly generated and solved by assum-ing each of 2 4 combinations of four parameters ( pop , w , c termination criterion is to perform 10000 = pop iterations.
Similar to the SA algorithm, to compare the instances, the relative deviation index (RDI) is applied for the objective function value. As illustrated in Fig. 4 , the interaction plot for the PSO parameters does not demonstrate any significant interactions between parameters. The main effects of the investigated para-meters are depicted in Fig. 5 . The results show that the combina-tion of w  X  0.65, c 1  X  0.65, c 2  X  0.35 and pop  X  20 are statistically better than other evaluated combinations.
 4.4. Hybrid PSO-SA algorithm
Use of hybrid algorithms are well experienced in the studies related to the field of scheduling ( Nearchou, 2004 ; Laha and
Chakraborty, 2007 ). The hybridization of PSO and SA algorithms for scheduling problems has been widely experienced in recent years ( Zhang et al., 2009 ; Lin et al., 2009 ). PSO may be trapped in local optimum in cases when the problem to be solved is too complicated and complex. On the other hand, this algorithm possesses high search efficiency by combining local search by self experience and global search by neighboring experience. Mean-while, SA employs certain probability to avoid becoming trapped in a local optimum, where the sear ch process is controlled by the cooling schedule. Therefore, th e PSO and SA algorithms are com-bined which can omit the concrete velocity X  X isplacement property of traditional PSO for the SPTS problem. The proposed hybrid algorithm contains two phases: ( 1) the initial solutions are ran-domly generated and (2) the PSO algorithm combined with the SA algorithm is run. The general outline of the hybrid algorithm is summarized as follows.
 Outer loop:
Step (1) k  X  0. Consider the achieved solution of SA algorithm as an initial solution, Generate r  X  1, y , pop  X 1 initial random solutions based on Section 4.2.2 (i.e., initial solution generation).
Step (2) Based on Section 4.2.1 (i.e., feasible solution) check if any of the generated schedules is infeasible. Reconstruct the infeasible solutions using Section 4.2.2 (i.e., initial solution generation) until all the initial solutions are feasible. Set P and update P g .
 Step (3) Let k  X  k  X  1, h k  X  1, T h k  X  0 and r  X  1.
 Inner loop:
Step (4) Update the position and velocity of the particles according to Eqs. (9) and (10).

Step (5) If each of the updated schedules is infeasible set Step (6) Find the objective value for each particle. Update P r l and P g . If the termination criterion is not met, then go to
Step 3; otherwise, return P g . where H is the termination criterion for the inner loop, and h is the inner loop iteration counter. 4.4.1. Parameter tuning
There are two parameters, related to the proposed PSO-SA algorithm that should be tuned, i.e. pop and H . The latter one refers to the number of times that the SA algorithm should be run in the each step of running the inner loop of PSO-SA algorithm. To tune the
PSO-SA parameters, a full factorial design in the DOE method is used. Table 6 shows the three levels of the parameters, and there-fore, a 3 2 design is performed. The number of generated instances is s similar to previous algorithms. The stopping criterion is to perform 30000 = popH iterations. For the levels of parameter H , the initial temperature is fixed to 150. Moreover the cooling factor is con-sidered 0.73, 0.85 and 0.90 for levels 20, 40 and 60, respectively. The interaction plot is shown in Fig. 6 .

It is concluded that the combination of pop  X  20 and H  X  20 results in statistically better output than other evaluated combinations. 5. Experimental results
To illustrate the effectiveness and performance of the pro-posed hybrid PSO-SA algorithm, the results achieved by PSO-SA algorithm is compared with those obtained by the SA algorithm and exact algorithm. All the algorithms are implemented in VB on a Laptop with Pentium IV Core 2 Duo 2.53 GHz CPU. Some instances are randomly generated. The instances are character-ized by the parameters, such as number of trains, number of block sections, departure time of trains from their origins tolerances, traveling times, and period length. All the generated instances are based on the following assumptions: All trains meet all block sections.
 Trains move in two opposite directions.

The departure time of trains from their origins are considered zero.

The traveling times are all integer numbers between the interval [10, 20] generated randomly.

The objective is to minimize the arrival times of all trains to their destinations.

The results of Table 7 show that the hybrid PSO-SA can yield better solutions than using SA alone. The improvement is equal to 3% in average. The introduced mathematical model is coded in
Lingo. Using this software package, the optimum answers of the instances smaller than eight trains and eight block sections can be found in less than one hour. On the other hand, all instances are solved by the proposed PSO-SA algorithm in less than 6.5 min.
Comparing the results of the PSO-SA algorithm with the found optimum solutions, it is concluded that the PSO-SA algorithm is able to achieve the optimum solutions of eight instances among 18 solved ones. Finally, the results demonstrate that the PSO-SA algorithm can effectively find a good solution in a rational amount of time.
 In this paper, we consider a real case study, in which the
Tehran X  X sfahan Railway line connects two of the most populated cities of Iran. This route consists of 19 stations. It is also supposed that the period length is 360 min and one low-speed, one high speed and two medium-speeds trains should travel in each direction of the route. Therefore each period consists of schedul-ing eight different trains along 18 block sections. The character-istics of departure times of trains from the origins are shown in
Table 8 . The best found timetable for four periods, including (4 8  X  ) 32 trains, is shown in Fig. 7 . The actual departure times are reported in the last row of Table 7 . The case study is solved by the assumption of considering tolerances for origin departure times. The final results are reported in Fig. 8 . 6. Conclusion
This paper has addressed the periodic single-track train scheduling problem based on the periodic event scheduling problem. The periodic aspect of schedules has special application in generating superlative train timetables. The aim is to generate primary timetables. Therefore, it is assumed that the origin departure times of trains are allowed to be varied in a specific tolerance. As the problem is known to be NP-complete, an effective hybrid particle swarm optimization (PSO) algorithm embedded with simulated annealing (SA) has been proposed to solve the problem. The performance of the presented approach has been evaluated in comparison with the results obtained from using the SA algorithm alone and the optimum results achieved by the branch-and-bound algorithm. The results have demon-strated the effectiveness of the proposed hybrid PSO-SA algo-rithm. We have also extended the outcomes to a case study carried out an Iranian railway. The future research directions can be as follows: (1) solving the periodic train timetabling problem under an uncertain environment, (2) testing other well-known meta-heuristics, and (3) considering other objective functions. References
