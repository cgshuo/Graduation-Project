 Sotetsu Koyamada 1 , 2( Machine learning is a powerful methodology to construct efficient and robust pre-dictors and classifiers. Literature suggests its ability in the supervised context not only to reproduce  X  X ntuition and experience X  based on human supervision [ 1 ], but also to successfully classify the objects that humans cannot sufficiently clas-sify with inspection alone [ 2 , 3 ].
 the human decisions. We may say that this is the case in which the classifier holds more knowledge about the classes than us, because our incompetence in the classification problems can be attributed solely to our lack of understanding about the class properties and/or the similarity metrics. The superiority of non-linear machine learning techniques strongly suggests that the trained classifiers capture the  X  X nvisible X  properties of the subject classes. Geoff Hinton solidified this into the philosophy of  X  X ark knowledge X  captured within the trained classi-fiers [ 4 ]. One might therefore be motivated to enhance understanding of subject classes by studying the way the trained machine acquires the information. interpretation. Although some efforts have been made to  X  X isualize X  the classi-fiers [ 5 , 6 ], there is still much room left for improvement. The machine learning techniques in neuroimaging, for example, prefer linear kernels to nonlinear ker-nels because of the lack of visualization techniques [ 7 ]. For the visualization of high-dimensional feature space of machine learners, Zurada et al. [ 8 , 9 ]and Kjems et al. [ 10 ] presented seminal works. Zurada et al. developed  X  X ensitiv-ity analysis X  in order to  X  X elete unimportant data components for feedforward neural networks. X  Kjems et al. visualized Zurada X  X  idea as  X  X ensitivity map X  in the context of neuroimaging. In this study, we attempt to generalize the idea of sensitivity analysis, and develop a new framework that aids us in extract-ing the knowledge from classifiers that are trained in a supervised manner. Our framework is superior to the predecessors in that it can: 1. be used to identify a pair of discriminative input features that act oppositely in characterizing a class, 2. identify combinations of discriminative features that strongly characterize the subject classes, 3. provide platform for developing sparse, visually intuitive sensitivity maps. The new framework gives rise to the algorithm that we refer to as  X  X rincipal Sensitivity Analysis (PSA), X  which is analogous to the well-established Principal Component Analysis (PCA). 2.1 Conventional Sensitivity Analysis Before introducing the PSA, we describe the original sensitivity map introduced in [ 10 ]. Let d be the dimension of the input space, and let f : classifier function obtained from supervised training. In the case of SVM, f may be the discriminant function. In the case of nonlinear neural networks, f may represent the function (or log of the function) that maps the input to the output of a unit in the final layer. We are interested in the expected sensitivity of f with respect to the i -th input feature. This can be written as where q is the distribution over the input space. In actual implementation, the integral ( 1 ) is computed with the empirical distribution q of the test dataset. Now, the vector of these values will give us an intuitive measure for the degree of importance that the classifier attaches to each input. Kjems et al. [ 10 ] defined map over the set of input features.
 2.2 Sensitivity in Arbitrary Direction Here, we generalize the definition ( 1 ). We define s ( v arbitrary direction v := d i v i e i , where e i denotes the i -th standard basis in Recall that the directional derivative is defined by Note that when we define the sensitivity inner product we can rewrite s ( v ) with the corresponding sensitivity norm , as follows: This inner product defines the kernel metric corresponding to the positive definite matrix K with ij -th entry given by K ij := e i , e j s . This allows us to write 2.3 Principal Sensitivity Map and PSA The classical setting ( 2 ) was developed in order to quantify the sensitivity of f with respect to each individual input feature. We attempt to generalize this idea and seek the combination of the input features for which f is most sensitive, or the combination of the input features that is  X  X rincipal X  in the evaluation of the sensitivity of f . We can quantify such combination by the vector following optimization problem about v : The solution to this problem is simply the maximal eigenvector that v i represents the contribution of the i -th input feature to this principal combination, and this gives rise to the map over the set of all input features. As such, we can say that v is the principal sensitivity map (PSM) over the set of input features. From now on, we call s in the classical definition ( 2 )as the standard sensitivity map and make the distinction. The magnitude of v represents the extent to which f is sensitive to the i -th input feature, and the sign of v i will tell us the relative direction to which the input feature influences f . The new map is thus richer in information than the standard sensitivity map. In Section 3.1 we will demonstrate the benefit of this extra information. Principal Sensitivity Analysis (PSA). We can naturally extend our con-struction above and also consider other eigenvectors of K vectors by solving the following optimization problem about where V is a d  X  d matrix. As is well known, such V is given by the invertible matrix with each column corresponding to K  X  X  eigenvector. We may define k -th dominant eigenvector v k as the k -th principal sensitivity map. These sub-principal sensitivity maps grant us access to even richer information that underlies the dataset. We will show the benefits of these additional maps in Fig. 3 . From now on, we will refer to the first PSM by just PSM, unless noted otherwise.
 Recall that, in the ordinary PCA, K in ( 8 ) is given by the covariance E xx T , where x is the centered random variable. Note that in our particu-lar case, if we put then we may write K = r ( x ) r ( x ) T q ( x ) d x = E r our algorithm can thus be seen as the PCA applied to the covariance of without centering.
 Sparse PSA. One may use the new definition ( 8 ) as a starting point to develop sparse, visually intuitive sensitivity maps. For example, we may introduce the existing techniques in sparse PCA and sparse coding into our framework. We may do so [ 11 ] by replacing the covariance matrix in its derivation with our ticular, we can define an alternative optimization problem about where p is the number of sensitivity maps and N is the number of samples. For the implementation, we used scikit-learn [ 12 ].
 2.4 Experiments In order to demonstrate the effectiveness of the PSA, we applied the analysis to the classifiers that we trained with artificial data and MNIST data. Our artificial data is a simplified version of the MNIST data in which the object X  X  orientation and positioning are registered from the beginning. All samples in the artificial data are constructed by adding noises to the common set of templates representing the numerics from 0 through 9 (Fig. 1 ). We then fabricated the artificial noise in three steps: we (1) flipped the bit of each pixel in the template picture with probability p =0 . 2, (2) added Gaussian noise intensity, and (3) truncated the negative intensities. The sample size was set to be equal to that of MNIST. Our training data, validation data, and test data consisted respectively of 50,000, 10,000, and 10,000 sample patterns. Using the artificial dataset above and the standard MNIST, we trained a feed forward neural network for the classification of ten numerics. In Table 1, we provide the structure of the neural network and its performance over each dataset. For either dataset, the training was conducted via stochastic gradient descent with constant learning rate. We also adopted a dropout method [ 13 ] only for the training on the MNIST dataset. The output from each unit in the final layer is given by the posterior probability of each class c . For computational purpose, we transform this output by log: where Y is, in the model governing the neural network, a random variable repre-senting the class that the classifier assigns to the input the PSM and the standard sensitivity map for the f c given above.
 3.1 PSA of Classifier Trained on Artificial Dataset We will describe three ways in which the PSA can be superior to the analysis based on standard sensitivity map.
 Fig. 2 compares the PSM and standard sensitivity map, which were both obtained from the common neural networks trained for the same 10-class clas-sification problem. The color intensity of i -th pixel represents the magnitude of v . Both maps capture the characters that the  X  X olorless X  rims and likewise  X  X olorless X  regions enclosed by edges are insignificant in the classification. Note that the (1st) PSM distinguishes the types of sensitivities by their sign. For each numeral, the PSM assigns opposite signs to  X  X he edges whose presence is crucial in the characterization of the very numeral X  and  X  X he edges whose absence is crucial in the numeral X  X  characterization. X  This information is not featured in the standard sensitivity map. For instance, in the sensitivity map for the numeral 1, the two edges on the right and the rest of the edges have the opposite sensitivity. As a result, we can verify the red figure of 1 in its PSM. We are able to clearly identify the unbroken figures of 2 , 4 , 5 and 9 in their corresponding PSM as well. We see that, with the extra information regarding the sign of the sensitivity over each pixel, PSM can provide us with much richer information than the standard counterpart.
 Next, we will show the benefits of sub-principal sensitivity maps computed from PSA. Fig. 3(a) shows the 1st PSM through the 3rd PSM for the numerals 0 and 9. 1 In order to show how this extra information benefits us in visualization of the classification problem, we consider the following  X  X ocal X  sensitivity map integrated over the samples from a particular pair of classes: where q c,c is the empirical distribution over the set of samples generated from the classes c and c . To get the intuition about this map, note that this value for ( c, c )=(9 , 4) can also be pictorially written as lim where v can be the 3rd PSM of class 9, , for example. If v to the binary classification problem of  X  c vs c  X  with respect to the perturbation of the input in the direction of v k . By looking at this value for each k ,we may visualize the ways that the classifier deals with the binary classification problem. Such visualization may aid us in learning from the classifiers the way to distinguish one class from another. Fig. 3(b) shows the values of s c  X  X  0 , 9 } and k  X  X  1 ,..., 10 } . We could see in the figure that, for the case of ( c, c )=(9 , 4), s c,c ( v 3 ) was larger than s c,c ( PSM is more helpful than the 1st PSM for distinguishing 4 from 9. We can actually verify this fact by observing that the 3rd PSM is especially intense at the top most edge, which can alone differentiate 4 from 9. We are able to confirm many other cases in which the sub-principal sensitivity maps were more helpful in capturing the characters in binary classification problems than the 1st PSM. Thus, PSA can provide us with the knowledge of the classifiers that was inaccessible with the previous method based on the standard sensitivity map. tion of sparse and intuitive sensitivity map. Fig. 4 depicts the sensitivity maps obtained from the application of our sparse PSA in ( 10 ) to the data above. Note that the sparse PSA not only washes away rather irrelevant pixels from the canvas, but it also assigns very high intensity to essential pixels. With these  X  X ocalized X  maps, we can better understand the discriminative features utilized by the trained classifiers. 3.2 PSA of Classifier Trained on MNIST Dataset We trained a nonlinear neural network-based classifier on the MNIST dataset, which consists of hand-written digits from 0 through 9. We then analyzed the trained classifier with our PSA. This dataset illuminates a particular challenge to be confronted in the application of the PSA. By default, hand-written objects do not share common displacement and orientation. Without an appropriate reg-istration of input space, the meaning of each pixel can vary across the samples, making the visualization unintuitive. This is typical in some of the real-world classification problems. In the fields of applied science, standard registration pro-cedure is often applied to the dataset before the construction of the classifiers. For example, in neuroimaing, one partitions the image data into anatomical regions after registration based on the standard brain, and represents each one of them by a group of voxels. In other areas of science, one does not necessarily have to face such problems. In genetics, data can be naturally partitioned into genes [ 14 ]. Likewise, in meteorology, 3D dataset is often translated into voxel structures, and a group of voxels may represent geographical region of specific terrain [ 15 ]. In this light, the digit recognition in unregistered MNIST data may not be an appropriate example for showing the effectiveness of our visualization method. For the reason that we will explain later, registration of multiclass dataset like MNIST can be difficult. We chose MNIST dataset here because it is familiar in the community of machine learning. Fig. 5 summarizes the results. Both the standard sensitivity map and the PSM were able to capture the character that outer rims are rather useless in the classification.
 are complementing each other in their contributions to the binary classifications. We see that the sparse PSA highlights the essential pixels much more clearly than the normal PSA.
 samples in this dataset, input dimensions hold different meanings in different samples. To perform more effective visualization, we would need registration to adjust each numeral pattern to a common standard template. This problem might not be straightforward, since one must prepare different templates for different numeral patterns. An elegant standardization suitable for our PSA-based visualization remains as a future study. We proposed a method to decompose the input space based on the sensitivity of classifiers. We assessed its performance on classifiers trained with artificial data and MNIST data. The visualization achieved with our PSA reveals at least two general aspects of the classifiers trained in this experiment. First, note in Fig. 3(b) and Fig. 6 that the first few (  X  10) PSMs of the trained classifier dom-inate the sensitivity for the binary classification problem. Second, we see that the classifier use these few PSMs out of 784 dimensions to solve different binary classification problems. We are thus able to see that the nonlinear classifiers of the neural network solve vast number of specific classification problems (such as binary classification problems) simultaneously and efficiently by tuning its sensi-tivity to the input in a data-driven manner. One cannot attain this information with the standard sensitivity map [ 8  X  10 ] alone. With PSA, one can visualize the decomposition of the knowledge about the input space learnt by the classifier. From the PSA of efficient classifier, one may obtain a meaningful decomposition of the input space that can possibly aid us in solving wide variety of problems. In medical science, for example, PSA might identify a combination of the bio-logical regions that are helpful in diagnosis. PSA might also prove beneficial in sciences using voxel based approaches, such as geology, atmospheric science, and oceanography.
 We may incorporate the principle of the PSA into existing standard statis-tical methods. A group Lasso analogue of the PSA, which is currently under our development, may enhance the interpretability of the visualization even fur-ther by identifying sets of voxels with biological organs, geographical location, etc. By improving its interpretability, PSA and the PSA-like techniques might significantly increase the applicability of machine learning techniques to various high-dimensional problems.
 In this section we list the figures that we omitted in the main text.
