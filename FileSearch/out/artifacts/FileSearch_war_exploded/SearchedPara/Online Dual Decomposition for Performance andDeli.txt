 Online optimization is central to display advertising, where we must sequentially allocate ad impressions to maximize the total welfare among advertisers, while respecting various advertiser-specified long-term constraints (e.g., total amount of the ad X  X  budget that is consumed at the end of the cam-paign). In this paper, we present the online dual decompo-sition (ODD) framework for large-scale, online, distributed ad allocation, which combines dual decomposition and on-line convex optimization. ODD allows us to account for the distributed and the online nature of the ad allocation prob-lem and is extensible to a variety of ad allocation problems arising in real-world display advertising systems. Moreover, ODD does not require assumptions about auction dynamics, stochastic or adversarial feedback, or any other characteris-tics of the ad marketplace. We further provide guarantees for the online solution as measured by bounds on cumula-tive regret. The regret analysis accounts for the impact of having to estimate constraints in an online setting before they are observed and for the dependence on the smooth-ness with which constraints and constraint violations are generated. We provide an extensive set of results from a large-scale production advertising system at Amazon to val-idate the framework and compare its behavior to various ad allocation algorithms.
 distributed optimization; display advertising; campaign op-timization; ad allocation; budget pacing; long-term con-straints; demand-side platform
The past few years have seen significant interest and re-search in ad allocation in online display advertising, where the problem consists of serving ad impressions to users from many competing ads across a large number of websites and mobile apps, subject to a variety of advertiser objectives and constraints. For example, advertisers typically expect that an advertising platform will maximize ad performance (i.e., the ad X  X  effectiveness at driving user behavior), subject to constraints on user targeting and constraints on ad delivery, such that the advertising platform is expected to spend as close to 100% of an ad X  X  budget as possible by the end of the ad X  X  flight time under a cost-per-mille, or CPM, billing model. In the literature on display advertising [3, 6, 17], online ad allocation is typically formulated as an online op-timal assignment problem over a bi-partite graph in which nodes correspond to both ads and bid requests (i.e., user visits to a web page). Bid requests are processed sequen-tially, with edges corresponding to possible assignments of an ad to a bid request with weight equal to the advertiser X  X  welfare for the given ad/bid request pair. In practice, the ad allocation problem is characterized by being 1) online, and 2) distributed (i.e., variable updates must be executed in parallel across large fleets of machines), with 3) poten-tially multiple long-term constraints that require estimation of quantities at bid request time (e.g., estimating the cost of an ad impression before winning it on external exchanges).
Various algorithms have been proposed for the ad allo-cation problem in the online display advertising literature [3, 6, 9, 10], but these have largely been derived as either approximation algorithms or heuristics, increasing the diffi-culty and complexity in extending these methods to a variety of constraints [17]. The distributed aspect of online display advertising has not been explicitly addressed either, espe-cially in the presence of long-term constraints, which leads to further approximations in a production setting. Moreover, algorithms proposed have not accounted for highly variable, dynamic constraint violations (e.g., spend amounts) per ad that are often encountered in practical online ad serving systems. This is one reason why ad allocation solved as an offline problem can often be sub-optimal in practice [6]. Finally, the impact of having to estimate constraints in or-der to allocate ad impressions (e.g., in real-time bidding, or RTB, exchanges, the clearing price of an ad auction is only revealed to us after we X  X e decided on which ad to show).
To the best of our knowledge, a comprehensive and holis-tic framework that satisfactorily addresses the above chal-lenges faced in practical web-scale algorithms is still missing. In this paper, we present a general framework for deriving online and distributed ad allocation algorithms for dealing with a variety of online ad allocation problems in display ad-vertising. Our contributions can be summarized as follows: We call our framework online dual decomposition (ODD), which allows us to efficiently solve general large-scale opti-mization problems in a distributed and online fashion.
In online advertising, each user visit to a web page triggers a bid request i to be sent in real-time (through possibly com-plex channels) to a host, or machine, in an ad serving fleet. Each incoming bid request has a set of candidate ads that can be served: the set of candidates that are eligible to be shown for a bid request are determined by several advertiser-specified constraints such as behavioral or demographic tar-geting (i.e., an ad is to be/not to be shown only to users satisfying targeting criteria), or frequency capping (i.e., an ad is not to be shown more than some number of times to a given unique user over some time period), to name a few. Indexing bid requests by i , we denote by C i  X  { 1 ,  X  X  X  ,M } the subset of M ads that are eligible to be shown for bid request i as a result of such constraints. Indexing ads by j = 1 ,  X  X  X  ,M , the welfare of serving an impression for ad j (i.e., the value of showing the ad once to a user) for bid request i is given by v ij  X  0. The welfare v ij can be set to the expected value of serving one ad impression for ad j for bid request i , but other expressions for welfare may be used as well.

For bid request i , let assignment variable x ij = 1 corre-spond to our decision to allocate ad j an impression, with x ij = 0 otherwise. Let w i be the clearing price associated with allocating an impression for bid request i (e.g., the result of a second-price auction on external ad exchanges). Similarly, let a ij be the some advertising quantity (e.g., bud-get consumed) incurred a result of allocating an impression for bid request i for ad j , where we generally assume that advertisers are charged per impression (as opposed to, say, a cost-per-click or cost-per-action model). We note at this juncture that a ij and the clearing price w i can be distinct in practice. In particular, the method by which a ij is com-puted can vary from ad to ad and from one bid request to the next, depending on contracts that advertisers may hold with the ad serving system.

Given the welfare v ij of serving an impression of ad j for bid request i , we wish to derive an online and distributed algorithm for selecting ads j such that in aggregate, we max-imize total welfare across all advertisers subject to long-term constraints specified by the advertisers as a function of all variables x ij . We will also have the constraints that for any bid request i , P j  X  C at most one ad per bid request (we can also elect to show none). As we assume a distributed and online setting, bid requests are divided across time and among several hosts. Thus, there are two ways to partition bid requests: the first is by time, whereby we can divide the continuous time axis into rounds of T approximately even-sized intervals indexed by t = 1 ,  X  X  X  ,T . For a given interval t , let I set of bid requests processed across the entire fleet in that interval, such that the sets I t form a partition of all bid re-quests. Given the above, let x t , u t denote assignment and utility 1 vectors whose elements correspond to x ij ,v ij spectively, and define matrices A t similarly. For illustration, Figure 1 shows a toy example of an assignment problem with scalar quantities and corresponding matrices and vectors as defined above.
 t i j Figure 1: A toy assignment problem consisting of 4 ads and 5 bid requests divided into 2 rounds, with corresponding matrix and vector quantities A , x t , u t . Here, elements a ij correspond to some ad-vertising output of interest (e.g., budget consumed) for bid request i and ad j , with x ij  X  { 0 , 1 } . Dark edges in the bipartite graph on the right correspond to a possible feasible assignment. Figure best seen in color.

As has been commonly done in online display advertising [3, 6, 9], we formulate the canonical problem of allocating ad impressions as an optimal assignment problem, where the goal is to match ads to bid requests such that we maxi-mize the total difference between welfare and clearing price (profit) across all ads and all bid requests for the ad serv-ing platform. The standard optimal assignment problem can be written as a linear program (LP) relaxation of the corresponding combinatorial optimization problem with as-signment variables X = { x ij } : maximize
We now introduce the online aspect of the problem (we postpone discussion of the distributed aspects for later) by partitioning bid requests into sets I t for t  X  { 1 ,  X  X  X  ,T } .
Utility measures the advertiser X  X  preference between bid requests. Using matrix-vector notation and introducing the quantity N  X  max t M | I t | , we can compactly re-write the optimal as-signment problem as maximize have defined X and x t is a row in the matrix X  X  X  0 , 1 } T  X  N . In the online assignment problem, for round t the external world generates the vector u t , after which we must make allocation decisions x t and obtain reward u &gt; t x t . Thus, each element of vector x  X  X t is an assignment variable x ij , with the elements of vector u t similarly ordered to be equal to v ij  X  w i .
It has been shown [6] that we can solve the optimal assign-ment problem iteratively for each bid request i by sorting ads j  X  C i by v ij , picking the top-ranking ad and assigning an impression to that ad [6] if max j v ij  X  w i . For complete-ness and due to its central role in what follows, we formalize this result as a Lemma and reproduce the proof (which can also be found in [6]) in the Appendix.

Lemma 1. Denote by x t to be the set of all x ij  X  X  that are processed in round t . Let j ? = argmax j  X  C i v ij , and let  X  a dual variable for enforcing the constraint P j  X  C Then for each i  X  I t , we must have Thus, for a given round t , the above online algorithm se-quentially allocates impressions such that the optimum  X  x argmax x t  X  X  t u &gt; t x t is attained. In particular, the quantity  X  i plays the role of the bid submitted to an auction for a given ad impression opportunity within a larger advertising marketplace. Consistent with the practical reality of ad al-location, if  X  ? i &lt; w i , we do not allocate any ad impression (i.e., we lost the auction) and otherwise we get to allocate an ad impression to the winning ad j ?  X  C i . Thus, the cal-culation of  X  x t is wholly determined by computing bids  X  and finding whether we win an ad impression or not via the clearing price w i for bid requests i  X  I t .

In the sequel, we take advantage of the above result to introduce concave functions of X for modelling long-term constraints and solve the resulting non-linear maximization problems via an online primal-dual method (with guarantees on the resulting solution as compared to the optimal offline solution), whilst preserving the computationally-efficient pri-mal steps with some simple modifications. Under our pro-posed framework, we will modify each bid as a function of long-term constraints to  X  ? i = max j { v ij  X   X  j,t a ij  X  x ables  X  (formally defined in the sequel) that allow us to penalize violations of constraints. Our framework has the property that no knowledge of auction dynamics, assump-tions about stochastic or adversarial feedback, or knowledge of other characteristics of the ad marketplace are needed to provide regret guarantees for online ad allocation. Moreover, as we will show, the resulting algorithm can be naturally ex-tended to a distributed setting in which we must allocate ad impressions across a large number of ad serving hosts oper-ating independently, which is key for practical large-scale ad serving systems.
As we will show, many online optimization problems of in-terest in online display advertising will consist of an optimal assignment problem with additional equality and inequality constraints on the primal variables x t , which introduces non-trivial challenges. We assume that these constraints are 1) measured over T rounds, and 2) are linear in the assignment variables X , such that we can account for such constraints by penalizing some measure of 1 T P T t =1 A t x t  X  b A t  X  X  X  R K  X  N , b t  X  R K . Building on the work from [12], the optimal assignment problem can be modified to: where E is a convex function measuring the residuals of the constraints. In this paper, we will assume that E is smooth in the sense that it has Lipschitz continuous gradients over the domain R K . We note that although the above optimiza-tion problem is not linear in all variables in the strict sense of the optimal assignment problem, the corresponding La-grangian (and primal-dual algorithm that we will derive) re-mains linear with respect to assignment variables X , which implies that the computationally efficient ranking scheme derived for the optimal assignment problem can be modi-fied to solve for the primal variables in the above problem. Moreover, we note that unlike [2], we are not interested in the (unweighted) average of x t vectors insofar as objectives and constraints are concerned, and we are explicitly inter-ested in maximizing functions of x t that are time-varying and highly dynamic. Before we continue, we illustrate two common problem classes that arise frequently in online dis-play advertising that can be naturally formulated as opti-mization problems of the above form.

Example 1. (Max-performance, target delivery ad allo-cation) In this problem formulation, we wish to maximize ad performance (as measured by welfare v ij for each bid request and eligible ad candidate) subject to the need to consume as close to 100% of each ad X  X  total budget for T rounds. De-noting 1) a ij to be the revenue charged to the advertiser for ad j upon serving an impression for ad j and bid request i and 2) b j to be ad j  X  X  total budget to be delivered over T rounds, we have K = M (one constraint per ad for M ads), A t  X  R M  X  N is a matrix whose ( j,i ) th element is a and b t  X  R M is a vector whose j th element is b j , so that
P T t =1 A t x t  X  b t is the average error between the amount of budget consumed and the target amount of budget to be consumed over T rounds, which we wish to penalize via a suitable choice of E .

Example 2. (Max-delivery, max cost-per-action ad allo-cation) Here, we aim to maximize welfare subject to a con-straint on the cost-per-action (CPA) for each ad, specified as c j &gt; 0 . With K = M , let p ij be the probability of user conversion, and let r ij be the amount of revenue charged to the advertiser upon serving an ad impression for bid request i and ad j . Given the quantities defined in Example 1, we can formulate the CPA constraint for ad j as This can be formulated equivalently as 1 T P T t =1 A where A t is a matrix whose ( j,i ) th element is ( r and b t = 0 so that penalizing values of 1 T P T t =1 above 0 is equivalent to a penalty for violating the CPA con-straint for each ad.
 A list of possible instantiations for E for the above prob-lems can be found in [12]. We highlight that in the general case, we allow K 6 = M , which allows us to account for mul-tiple constraints per ad, and/or diverse sets of constraints for different ads.

Consider now the Lagrangian, or saddle-point function, for the problem in (1), given by L ( X ,  X  ) = 1 where  X   X   X  are dual variables that belong to the domain Fenchel conjugate [4] of E for which we assume the domain is compact so that there exists R  X   X  max  X   X   X  k  X  k 2 &lt; +  X  . Moreover, we remark that E ? is strongly convex by virtue of E having Lipschitz continuous gradients [14]. We recall that a function E ? is strongly convex with modulus  X  &gt; 0 if E ( u )  X E ? ( v ) +  X  X  ? ( u ) &gt; ( u  X  v )  X   X  2 k u  X  v k R
K . We can rewrite the Lagrangian function described in (2) as L ( X ,  X  ) = 1 T P T t =1 L t ( x t ,  X  ), where
L t ( x t ,  X  ) = forward to show that the result of Lemma 1 can be mod-ified to accomplish this by ranking ads for each bid re-quest, but using a modified bid of v ij  X   X  j,t a ij the sequel we will appeal to Lemma 1 for a computation-ally efficient method for solving the problem of computing  X  x
In an offline setting where we would have the ability to iteratively update both primal variables x t ,t = 1 ,  X  X  X  ,T and dual variables  X  , the following canonical 2 primal-dual algo-rithm would allow us to solve for optimal variables x ? t by repeating the two steps below until some convergence criterion is met: The above algorithm is an offline algorithm that iteratively updates primal and dual variables until convergence. How-ever, in practice, ad allocation requires us to make deci-sions in online, or sequential, fashion, such that the pri-mal and dual steps above must be interleaved over rounds t = 1 ,  X  X  X  ,T . We now turn to formulating the ad allocation problem as an online convex optimization problem in which we sequentially update primal and dual variables  X  x t and at each round.
To move to an online convex optimization formulation, we must also account for the fact that in an online setting, not only must we update primal and dual variables sequentially, but also the constraint matrices A t are only observed after we allocate ad impressions for round t (a practical example of this is that we often only find out how much to charge the advertiser once we have won an external RTB auction for a given winning ad). This requires us to estimate such matrices via  X  A t in order to produce primal variable updates. To this end, we introduce as the Lagrangian function for round t using the estimate  X  A t such that  X  L t ( x t ,  X  ) = L t ( x t ,  X  )  X   X  &gt; ( an online version of the primal-dual method for each round t = 1 ,  X  X  X  ,T can be described as: In the above online optimization problem, we require esti-mating constraint matrices for each round via  X  A t before we provide primal variable estimates  X  x t . This implies that  X  x is obtained from a perturbation of L t ( x t ,  X   X  t ) via with A t observed only after we have made the ad assignment  X  x .

Estimating A t : To estimate constraint matrices A t on-line, we assume that in addition to the dual variables being bounded in ` 2 norm with radius R  X  , we also have k x t k for all t, x t  X  X  t . Similarly, let R A be such that k A k for all A  X  A and A is convex. We further assume that we perform an online projected subgradient method on matri-ces  X  A t to estimate the sequence A 1 ,..., A T where  X  A  X 
A [  X  A t  X   X  t G t ], with G t a subgradient of A 7 X  X  A t at  X 
A t . With the step size  X  t = R A / that for any sequence { A t } T t =1 , the overall cumulative regret bound for the estimation of x t  X  X  is additively impacted by the term where k X k F stands for the Frobenius norm. This contribu-tion captures the variations in the constraints A t themselves from one round t to the next, plus a function of the largest constraint matrix (as measured by R A ) observed over the course of the algorithm. With the above result and having described our online algorithm, we are now ready to present cumulative regret bounds for the above algorithm as mea-sured by the difference in the primal objectives for the or-acle solution and the online solution obtain from the above online algorithm, where both solutions account for adver-tiser objectives and long-term constraints. That is, we will compare the performance of the online algorithm to that of an oracle algorithm which has complete knowledge of past and future, plus the ability to modify optimization variables in the past, so as to provide primal variables of the form x t  X  argmax x  X  X  t L t ( x ,  X  ? ) for each round t given the of-fline dual optimal variables  X  ? . We expect at the outset that the above algorithm should achieve performance which is a function of the oracle algorithm X  X  performance plus fac-tors that depend on the number of rounds T , as well as variability of constraints as measured by the oracle X  X  ability to satisfy constraints. We present the bound in Theorem 1, and direct the details of the proof (as well as key technical Lemmas) to [12]. We note that the version of the theorem which we state is for instance valid for the choice of E we make in the experimental section.

Theorem 1. Let { x ? t } T t =1 be the offline primal optimal assignment variables, and consider the sequence {  X  x t } erated by our online algorithm. Let e ? t = A t x ? t corresponding optimal constraint residuals. We denote by f ?  X  f ( x ? 1 ,  X  X  X  , x ? T )  X  1 the optimal primal objective value obtained for the assign-ments { x ? t } T t =1 , and define  X  f  X  f (  X  x 1 ,  X  X  X  ,  X  x G &gt; 0 , the projected online gradient descent/subgradients updates for  X   X  t and  X  A t with step sizes  X  t = L/t, X  t imply f  X   X  f  X  GL where E has Lipschitz gradients with modulus L .
 Theorem 1 establishes that the projected online gradient descent updates for dual variables  X   X  t , along with projected online subgradient updates for constraint matrices  X  A t , yield an overall cumulative regret bound that decomposes into three terms. The first term measures the smoothness, or regularity, of the sequences { e ? t } T t =1 (as measured by the or-acle X  X  ability to minimize constraint violations) as well as { u t } T t =1 (which have a direct influence on x ? t ). We can ob-serve that if the residual vectors are constant e ? t = e all t , the first term vanishes. 3 The second term captures the contribution of having to perform online updates, which is is sub-linear in the number of rounds T given previous results in the online convex optimization literature [11, 19]). The third and last term captures the contribution to the regret due to the variation in constraint matrices A t as measured
We note that Theorem 1 does not require any assump-tions about the arrival order of bid requests, stationarity, or about the precise mechanisms under which feedback is gen-erated (e.g., specific auction dynamics, marketplace charac-teristics, etc). Thus, Theorem 1 holds for any sequences of versary, with the consequence that if the adversary is suf-ficiently powerful such that { A t x ? t  X  b t } T t =1 wildly (i.e., even the oracle algorithm is unable to obtain a smooth sequence { A t x ? t  X  b t } T t =1 ), then the worst-case bound on regret for our proposed online primal-dual method can be large. Conversely, if the oracle algorithm is able to achieve a regular-enough sequence { A t x ? t  X  b t } T t =1 proposed online primal-dual method is able to achieve the same performance plus a factor that is sublinear in the num-ber of rounds.
Having presented regret bounds for our proposed online algorithm, we now address the distributed aspects of ad al-location, which are a fundamental to the display advertising setting in practice. We note that for the allocation problem, computing  X  x t  X  argmax x t  X  X  t L t ( x t ,  X   X  t ) can be decomposed across multiple hosts, each processing disjoint subsets of bid requests for round t by ranking candidate ads for each bid request to be processed on that host. We first present an offline distributed algorithm that leverages this decompos-ability, which we will quickly incorporate into an online and distributed algorithm.
If we temporarily ignore the online aspect of the ad allo-cation problem, a technique that would allow us to perform distributed optimization is to decompose the ad allocation problem across hosts for a given set of dual variables, collect primal solutions and then update the dual variables. We note that for any round t , we can partition the primal vari-ables x t across hosts into disjoint sub-vectors of variables such that x t = [ x 1 t ,  X  X  X  , x Ht ], where x ht is the vector of pri-mal variables associated with host h = 1 ,  X  X  X  ,H . Further-more, by defining partitions I h of bid requests across hosts h = 1 ,  X  X  X  ,H , we can perform similar partitions for u t X t (so that x ht  X  X ht ). With these partitions defined, the Lagrangian L t ( x ,  X  ) can then be decomposed as
We refer the reader to [12] for an in-depth discussion. which is a sum over functions of x ht with no overlap in primal variable arguments, plus a function of  X  that is oth-erwise independent of variables x ht . This implies that we can parallelize the primal step of estimating the allocation  X  x t  X  arg max x t  X  X  t L t ( x t ,  X  ) across a number of hosts for a given  X  , collect the solutions  X  x ht and then update  X  . The resulting distributed primal-dual algorithm is then The proposed algorithm consists of iteratively 1) perform-ing a distributed Lagrangian maximization across all hosts to obtain max x L ( x ,  X  ), followed by 2) a gradient descent method. This technique for solving large-scale convex opti-mization problems in a distributed setting consists of dual decomposition [7, 8, 13], which yields primal and dual-optimal x ,  X  ? for a large enough number of iterations. However, in the online advertising setting, we do not have the ability to revise past ad allocations, nor can we realistically anticipate (and hence make allocation decisions for) future bid request opportunities. To address this whilst retaining the ability to decompose the problem across a large number of ad serving hosts, we next present online dual decomposition (ODD), an extension of the dual decomposition technique to the online optimization setting.
Consider now the following distributed and online algo-rithm for each round t = 1 ,  X  X  X  ,T :
The above distributed primal step, combined with the on-line projected gradient descent for  X   X  t and subgradients for  X  A t together form online dual decomposition (ODD), which extends classical dual decomposition to an online setting in which we must make ad allocations and update dual vari-ables in an online fashion whilst having to use estimates of constraint matrices  X  A t . In ODD, in each round t we 1) solve for allocations  X  x ht that maximize  X  F ht ( x ht ,  X   X  t Lagrangian maximization with estimates of constraints  X  A followed by 2) updates of the dual variables  X   X  t via an online dual gradient descent method on L t (  X  x t ,  X   X  t ) and 3) online up-dates on  X  A t +1 . We note that the above algorithm naturally leverages the embarassingly parallel and computationally-efficient ranking algorithm resulting from Lemma 1 for the primal step, and otherwise enjoys the same regret bound as presented in Theorem 1. The only additional assump-tion we X  X e made for ODD is that there exists a centralized system for aggregating ad allocations, i.e., budget spend per round and per host given by P i  X  I matrices A ht across hosts at the end of each round. From those pieces of information, global constraint violations can be computed for each ad (given centralized knowledge of b t for each round) and updates for dual variables can be computed and then propagated back to each host in the ad serving fleet. Such systems are generally used in the online display advertising platforms to track budget spend: we do not discuss details on systems architectures that could be used for this purpose.
To validate our proposed online distributed ad allocation algorithm, we conducted three series of experiments with the aim to empirically compare the performance and deliv-ery characteristics of ODD with those of other online algo-rithms. We focus on the application of max-performance, target delivery ad allocation described in Example 1, for which we consider two key metrics: 1) performance as mea-sured by return on ad spend (ROAS), or the ratio of ad-attributed sales to ad spend, and 2) delivery , as measured by the fraction of an ad X  X  budget that was successfully con-sumed relative to the fraction of the ad X  X  flight time that has elapsed. More specifically, the goal in this class of problems is to maximize the ad X  X  performance whilst consuming as close as 100% of the ad X  X  budget by the end of its run time. We chose E ( z ) to be the Huber function (see the detailed discussion in [12]) for some non-negative parameters R,L : This choice yields the strongly convex dual function E ? (  X  ) = I
R (  X  ) + such that k  X   X  t k 2  X  R for all rounds.
In this experiment, we simulated ad allocation for a sam-ple of 36 ads configured with a variety of budgets, delivery profiles (i.e., the fraction of budget to be delivered in a given time period) and targeting constraints encountered in our ad serving system, where ad impressions were allocated over a period of 24 hours with over 100MM bid request opportu-nities. To compare the performance and delivery charac-teristics of ODD, we examined 1) the proportional control heuristic of [6, 15] and 2) the pdAvg approximation algo-rithm from [10]. The proportional control heuristic consists of modifying the welfare term w ij for each ad by subtract-ing a term that is proportional to the error in delivery in a given round (the difference between expected budget to be consumed in a round and actual amount delivered). The pdAvg approximation algorithm consists of modifying the welfare in similar fashion, but as a function of average wel-fare gained from allocating impressions for a given ad so far. All algorithmic parameters for the above algorithms were chosen from a discrete set in order to minimize total under-and over-delivery. Figures 2 and 3. Figure best seen in color.
Figure 2 shows the performance (ROAS) metrics at the end of the flight time for each of the three algorithms. Fig-ure 3 shows delivery profiles for each one of them as a func-tion of the expected delivery. As can be seen, pdAvg is able to achieve improved performance over ODD (for 16/36 ads), but at the cost of under-delivery in such cases (e.g., see ads 2, 5 and 30). This is undesirable from the advertiser X  X  perspective, as under-delivery limits the overall impact of an ad and does not fully utilize the ad X  X  budget to achieve the advertiser X  X  performance goals. Conversely, for cases where pdAvg over-delivered (i.e., spent more budget ahead of schedule), such as for ads 25 and 31, the performance ob-tained was lower than that achieved by ODD. In aggregate, the performance metrics obtained for the ODD and pdAvg algorithms were very similar (within 3% of one another), but pdAvg demonstrated the highest variability in delivery (consistent with observations in [3]) in the form of over-or under-delivery (standard deviation in percent budget con-sumed across the 36 ads was 0.16% for ODD, 11.11% for proportional control, 34.2% for pdAvg ) By comparison, the proportional control heuristic was only able to outperform the ODD technique for 4/36 ads (in all four cases, it under-delivered relative to the expected delivery profile), whilst yielding larger violations of delivery goals across the 36 ads as compared to ODD, but less variability in delivery as com-pared to pdAvg . Overall, ODD yielded a smoother delivery profile for all 36 ads with significantly less over-or under-delivery as compared to the other algorithms, and with per-formance (reward) equal to that achieved by the best of the algorithms studied.
The next two experiments were conducted within the dis-tributed ad serving system at Amazon, where we compare the performance and delivery characteristics of ODD relative to a variant of the pdAvg algorithm. For the second experiment, we ran online tests of the ODD framework in a live production environment at Ama-zon where we compare our distributed optimization algo-rithm (treatment) to an ad allocation algorithm derived from pdAvg (control). Figure 4 shows results from an on-line test consisting of 7 pairs of control and treatment ads with a variety of slot positions, slot sizes and use/non-use of targeting, with the ad line items in treatment and control set to be otherwise identical. For this test, the exposure to external and non-stationary ad marketplace dynamics over the duration of the experiment (14 days) can lead to under-and over-delivery (where in practice, advertisers are less sen-sitive to over-delivery than under-delivery). As can be seen, the use of ODD achieves positive performance lifts, with delivery close to the target of 100% delivery for each ad.
Figures 5 and 6 show the results for the last experiment, where we compare our distributed optimization algorithm (treatment) to an ad allocation algorithm derived from pdAvg (control). It is conducted with a larger-scale test ( &gt; 25X the number of ads from Experiment B) than the previous exper-iment (leveraging a variety of slot positions, slot sizes and use/non-use of targeting) for a larger set of ads across 8 ad-vertiser pools over a period of 21 days: we see a consistent and significant reduction in both over-and under-delivery for all ads in the treatment set. We also note an overall significant decrease (i.e., 39%) in the number of ads in the treatment group that under-delivered as compared to the control group, and a 22% decrease in the number of ads in the treatment group that over-delivered as compared to the control group, where under-and over-delivery were defined by each advertiser. We also observe an overall 9% decrease in the number of ads that under-perform and a 19% increase in the number of ads that achieve advertiser-specified per-formance targets (also defined by the advertiser). Last but not least, we observed overall performance lifts in the range of 10% to 193%: these results, taken cumulatively, demon-strate that our algorithm is able to achieve higher advertiser performance whilst being able to better enforce ad delivery constraints as compared to the control treatment.
In this paper we have presented online dual decomposi-tions as a technique for deriving practical online and dis-tributed ad allocation algorithms for a variety of problems in online display advertising. In addition to having pro-vided several empirical results derived from online adver-tising data, we have provided a theoretical analysis of the dynamic regret incurred by ODD, which includes a depen-dence on 1) the ability of an oracle algorithm to smoothly de-liver ad impressions and 2) the smoothness with which con-straints and constraint violations occur. While our analysis provides a regret bound that otherwise scales sub-linearly with the number of rounds T , there remain several factors that arise in practice that can impact performance and de-livery in a production setting outside of the allocation al-gorithm: examples of these include 1) changes in auction dynamics, 2) changes, misallocations of ad budgets and 3) mis-specification of other campaign-specific parameters, to name a few. The impact of such changes on delivery and performance in practice is not to be discounted (and such impacts captured by our analysis in impacting the ability of an oracle algorithm to achieve smooth delivery) and should be studied as part of future work.

In this paper we have provided regret analysis that does not require making any assumptions about how feedback is generated by the external ad marketplace (e.g., auction dynamics, stochastic versus adversarial pricing). While this provides a robust baseline for performance and delivery char-acteristics that can be expected from ODD in a practical set-ting, this does not preclude the use of stable domain knowl-edge and/or assumptions about the ad marketplace (e.g., forecasting data) that could be useful in practice in improv-ing performance and delivery properties for ODD. We also did not analyze the impact of delays and delayed feedback on the algorithm: we conjecture that adaptive gradient meth-ods [1, 16] for dealing with delays may be appropriate for this setting, which we leave for future work. In terms of dealing with incomplete feedback, we leave as future work an investigation into extensions of ODD into the bandits setting [5]. Last but not least, we did not examine different distributed systems architectures and their impact on both empirical performance and delivery of our framework, which would be fruitful directions for future investigation. for each ad. Figure best seen in color. treatment set. Figure best seen in color. [1] A. Agarwal and J. C. Duchi. Distributed delayed [2] S. Agrawal and N. R. Devanur. Fast algorithms for [3] A. Bhalgat, J. Feldman, and V. Mirrokni. Online [4] S. P. Boyd and L. Vandenberghe. Convex [5] O. Chapelle, E. Manavoglu, and R. Rosales. Simple [6] Y. Chen, P. Berkhin, B. Anderson, and N. Devanur. [7] G. Dantzig and P. Wolfe. Decomposition principle for [8] H. Everett. Generalized Lagrange multiplier method [9] J. Feldman, M. Henzinger, N. Korula, V. Mirrokni, [10] J. Feldman, N. Korula, V. Mirrokni, [11] E. Hazan, A. Agarwal, and S. Kale. Logarithmic [12] R. Jenatton, J. Huang, C. Archambeau, and D. Csiba. [13] L. Lasdon. Optimization theory for Large Systems . [14] C. Lemarechal and J.-B. Hiriart-Urruty. Convex [15] M. McEachran. Using Proportional Control For Better [16] B. McMahan and M. Streeter. Delay-tolerant [17] A. Mehta. Online matching and ad allocation.
 [18] A. Schrijver. Combinatorial Optimization: Polyhedra [19] M. Zinkevich. Online convex programming and
Proof (Lemma 1). Note that maximizing u &gt; t x t with re-spect to x t  X  X  t is itself an LP, which can be written as: The dual of the above LP is given by with dual optimum  X  ? . Trivially, for a given i , if  X  ? must have  X  ? i = max the constraint  X  ? i  X  v ij  X  j  X  C i , which contradicts dual op-timality). Now, since a feasible solution to the above primal LP exists (trivially set all variables x ij = 0) and the objec-tive function is bounded, there exists at least one solution  X  x that maximizes u &gt; t x t . Suppose that for a given i , we have  X  i &gt; 0 and we were to assign x ij 0 = 1 ,x ij = 0  X  j 6 = j some j 0 6 = j ? : call this vector of primal variables x the primal objective here would be u &gt; t x 0 t &lt; u v ij ? &gt; v ij 0 (assuming no ties), which contradicts. Therefore x  X  x  X  X  are integral 0/1 variables (i.e.: we cannot have frac-tional x ij  X  X  that maximize u &gt; t x t : to see this, we note that the optimal allocation problem is equivalent to matching bid requests i  X  U to a single ad j  X  V in a bi-partite graph G = ( U,V,E ) where U is the set of bid requests, V is the set of ads and E is the set of edges connecting nodes in U to nodes in V . In particular, for a given bid request i  X  U , the set of edges incident on i is C i . Now, the constraint in the primal LP can be written as Gx  X  1 with G being the inci-dence matrix of G . Since G is (by construction) bi-partite, G is totally unimodular [18] and so the primal LP only has integral 0/1 solutions.
