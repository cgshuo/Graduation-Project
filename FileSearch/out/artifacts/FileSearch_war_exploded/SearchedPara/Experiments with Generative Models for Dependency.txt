 We explore generative models for producing lin-earizations of unordered labeled syntactic depen-dency trees. This specific task has attracted at-tention in recent years (Filippova and Strube, 2009; He et al., 2009; Belz et al., 2011; Bohnet et al., 2012; Zhang, 2013) because it forms a useful part of a natural language generation pipeline, especially in machine translation (Chang and Toutanova, 2007) and summarization (Barzi-lay and McKeown, 2005). Closely related tasks are generation of sentences given CCG parses (White and Rajkumar, 2012), bags of words (Liu et al., 2015), and semantic graphs (Braune et al., 2014).

Here we focus narrowly on testing probabilistic generative models for dependency tree lineariza-tion. In contrast, the approach in most previ-ous work is to apply a variety of scoring func-tions to trees and linearizations and search for an optimally-scoring tree among some set. The prob-abilistic linearization models we investigate are derived from generative models for dependency trees (Eisner, 1996), as most commonly used in unsupervised grammar induction (Klein and Man-ning, 2004; Gelling et al., 2012). Generative de-pendency models have typically been evaluated in a parsing task (Eisner, 1997). Here, we are interested in the inverse task: inferring a distri-bution over linear orders given unordered depen-dency trees.

This is the first work to consider generative de-pendency models from the perspective of word ordering. The results can potentially shed light on how ordering constraints are best represented in such models. In addition, the use of proba-bilistic models means that we can easily define well-motivated normalized probability distribu-tions over orders of dependency trees. These dis-tributions are useful for answering scientific ques-tions about crosslinguistic word order in quan-titative linguistics, where obtaining robust esti-mates has proven challenging due to data sparsity (Futrell et al., 2015).

The remainder of the work is organized as fol-lows. In Section 2 we present a set of generative linearization models. In Section 3 we compare the performance of the different models as mea-sured by test-set probability and human accept-ability ratings. We also compare our performance with other systems from the literature. Section 4 concludes. We investigate head-outward projective generative dependency models. In these models, an ordered dependency tree is generated by the following kind Figure 1: Example unordered dependency tree. Possible linearizations include (1) This story comes from the AP and (2) From the AP comes this story . Order 2 is the original order in the corpus, but order 1 is much more likely under our models. of procedure. Given a head node, we use some generative process G to generate a depth-1 sub-tree rooted in that head node. Then we apply the procedure recursively to each of the depen-dent nodes. By applying the procedure starting at a ROOT node, we generate a dependency tree. For example, to generate the dependency tree in Fig-ure 1 from the node comes down, we take the head comes and generate the subtree then we take the head story and generate and so on. In this work, we experiment with differ-ent specific generative processes G which generate a local subtree conditioned on a head. 2.1 Model Types Here we describe some possible generative pro-cesses G which generate subtrees conditioned on a head. These models contain progressively more information about ordering relations among sister dependents.
 A common starting point for G is Eisner Model C (Eisner, 1996). In this model, dependents on one side of the head are generated by repeatedly sampling from a categorical distri-bution until a special stop-symbol is generated. The model only captures the propensity of depen-dents to appear on the left or right of the head, and does not capture any order constraints between sister dependents on one side of the head.

We consider a generalization of Eisner Model C which we call Dependent N-gram models. In a Dependent N-gram model, we generate depen-dents on each side the head by sampling a se-quence of dependents from an N-gram model. Each dependent is generated conditional on the N  X  1 previously generated dependents from the head outwards. We have two separate N-gram sequence distributions for left and right dependents. Eisner Model C can be seen as a Dependent N-gram model with N = 1 .

We also consider a model which can capture many more ordering relations among sister depen-dents: given a head h , sample a subtree whose head is h from a Categorical distribution over sub-trees. We call this the Observed Orders model because in practice we are simply sampling one of the observed orders from the training data. This generative process has the capacity to capture the most ordering relations between sister dependents. 2.1.1 Distributions over Permutations of We have discussed generative models for ordered dependency trees. Here we discuss how to use them to make generative models for word orders conditional on unordered dependency trees.

Suppose we have a generative process G for de-pendency trees which takes a head h and gener-ates a sequence of dependents w l to the left of h and a sequence of dependents w r to the right of h . Let w denote the pair ( w l , w r ) , which we call the configuration of dependents. To get the probabil-ity of some w given an unordered subtree u , we want to calculate the probability of w given that G has generated the particular multiset W of depen-dents corresponding to u . To do this, we calculate: where and W is the set of all possible configurations ( w l , w r ) compatible with multiset W . That is, W is the set of pairs of permutations of multisets W l and W r for all possible partitions of W into W l and W r . The generative dependency model gives us the probability p ( w ) .
 It remains to calculate the normalizing constant Z , the sum of probabilities of possible configura-tions. For the Observed Orders model, Z is the sum of probabilities of subtrees with the same de-pendents as subtree u . For the Dependent N-gram models of order N , we calculate Z using a dy-namic programming algorithm, presented in Al-gorithm 1 as memoized recursive functions. When N = 1 (Eisner Model C), Z is more simply: where PARTS ( W ) is the set of all partitions of multiset W into two multisets W l and W r , p L is the probability mass function for a dependent to the left of the head, p R is the function for a depen-dent to the right, and stop is a special symbol in the support of p L and p R which indicates that gen-eration of dependents should halt. The probability mass functions may be conditional on the head h . These methods for calculating Z make it possible to transform a generative dependency model into a model of dependency tree ordering conditional on local subtree structure.
 Algorithm 1 Compute the sum of probabilities of all configurations of dependents W under a Dependent N-gram model with two component N-gram models of order N : p R for sequences to the right of the head and p L for sequences to the left. 2.2 Labelling The previous section discussed the question of the structure of the generative process for depen-dency trees. Here we discuss an orthogonal mod-eling question, which we call labelling : what in-formation about the labels on dependency tree nodes and edges should be included in our mod-els. Dependency tree nodes are labeled with word-forms, lemmas, and parts-of-speech (POS) tags; and dependency tree edges are labeled with rela-tion types. A model might generate orders of de-pendents conditioned on all of these labels, or a subset of them. For example, a generative depend-necy model might generate (relation type, depen-dent POS tag) tuples conditioned on the POS tag of the head of the phrase. When we use such a model for dependency linearization, we would say the model X  X  labelling is relation type, dependent POS, and head POS. In this study, we avoid in-cluding wordforms or lemmas in the labelling, to avoid data sparsity issues. 2.3 Model Estimation and Smoothing In order to alleviate data sparsity in fitting our models, we adopt two smoothing methods from the language modelling literature.

All categorical distributions are estimated us-ing add-k smoothing where k = 0 . 01 . For the Dependent N-gram models, this means adding k pseudocounts for each possible dependent in each context. For the Observed Orders model, this means adding k pseudocounts for each possible permutation of the head and its dependents.

We also experiment with combining our mod-els into mixture distributions. This can be viewed as a kind of back-off smoothing (Katz, 1987), where the Observed Orders model is the model with the most context, and Dependent N-grams and Eisner Model C are backoff distributions with successively less context. Similarly, models with less information in the labelling can serve as back-off distributions for models with more information in the labelling. For example, a model which is conditioned on the POS of the head can be backed off to a model which does not condition on the head at all. We find optimal mixture weights us-ing the Baum-Welch algorithm tuned on a held-out development set. Here we empirically evaluate some options for model type and model labelling as described above. We are interested in how many of the pos-sible orders of a sentence our model can generate (recall), and in how many of our generated orders really are acceptable (precision). As a recall-like measure, we quantify the probability of the word orders of held-out test sentences. Low probabil-model y ; n123 means n1+n2+n3. ities assigned to held-out sentences indicate that there are possible orders which our model is miss-ing. As a precision-like measure, we get human acceptability ratings for sentence reorderings gen-erated by our model.

We carry out our evaluations using the de-pendency corpora of the Universal Dependen-cies project (v1.1) (Agi  X  c et al., 2015), with the train/dev/test splits provided in that dataset. We remove nodes and edges dealing with punctuation. Due to space constraints, we only present results from 11 languages here. 3.1 Test-Set Probability Here we calculate average probabilities of word orders per sentence in the test set. This number can be interpreted as the (negative) average amount of information contained in the word order of a sen-tence beyond information about dependency rela-tions.

The results for selected languages are shown in Table 1. The biggest gains come from us-ing Dependent N-gram models with N &gt; 1 , and from backing off the model labelling. The Observed Orders model does poorly on its own, likely due to data sparsity; its performance is much improved when backing off from condition-ing on the head. Eisner Model C (n1) also per-forms poorly, likely because it cannot represent any ordering constraints among sister dependents. The fact it helps to back off to distributions not conditioned on the head suggests that there are commonalities among distributions of dependents of different heads, which could be exploited in fur-ther generative dependency models. 3.2 Human Evaluation We collected human ratings for sentence reorder-ings sampled from the English models from 54 na-tive American English speakers on Amazon Me-chanical Turk. We randomly selected a set of 90 sentences from the test set of the English Universal Dependencies corpus. We generated a reordering of each sentence according to each of 12 model configurations in Table 1. Each participant saw an original sentence and a reordering of it, and was asked to rate how natural each version of the sentence sounded, on a scale of 1 to 5. The or-der of presentation of the original and reordered forms was randomized, so that participants were not aware of which form was the original and which was a reordering. Each participant rated 56 sentence pairs. Participants were also asked whether the two sentences in a pair meant the same thing, with  X  X an X  X  tell X  as a possible answer.
Table 2 shows average human acceptability rat-ings for reorderings, and the proportion of sen-tence pairs judged to mean the same thing. The original sentences have an average acceptability rating of 4.48/5. The very best performing models are those which do not back off to a distribution not conditioned on the head. However, in the case of the Observed Orders and other sparse models, we see consistent improvement from this backoff.
Figure 2 shows the acceptability ratings (out of 5) plotted against test set probability. We see that Table 2: Mean acceptability rating out of 5, and proportion of reordered sentences with the same meaning as the original, for English models. La-bels as in Table 1. Figure 2: Comparison of test set probability (Ta-ble 1) and acceptability ratings (Table 2) for En-glish across models. A least-squares linear regres-sion line is shown. Labels as in Table 1. the models which yield poor test set probability also have poor acceptability ratings. 3.3 Comparison with other systems Previous work has focused on the ability to cor-rectly reconstruct the word order of an observed dependency tree. Our goal is to explicitly model a distribution over possible orders, rather than to re-cover a single correct order, because many orders are often possible, and the particulator order that a dependency tree originally appeared in might not be the most natural. For example, our models typ-ically reorder the sentence  X  X rom the AP comes this story X  (in Figure 1) as  X  X his story comes from the AP X ; the second order is arguably more natu-ral, though the first is idiomatic for this particular phrase. So we do not believe that BLEU scores and other metrics of similarity to a  X  X orrect X  or-dering are particularly relevant for our task.
Previous work uses BLEU scores (Papineni et al., 2002) and human ratings to evaluate genera-tion of word orders. To provide some comparabil-ity with previous work, we report BLEU scores on the 2011 Shared Task data here. The systems re-ported in Belz et al. (2011) achieve BLEU scores ranging from 23 to 89 for English; subsequent work achieves BLEU scores of 91.6 on the same data (Bohnet et al., 2012). Drawing the highest-probability orderings from our models, we achieve a top BLEU score of 57.7 using the model config-uration hdr/oo. Curiously, hdr/oo is typically the worst model configuration in the test set probabil-ity evaluation (Section 3.1). The BLEU perfor-mance is in the middle range of the Shared Task systems. The human evaluation of our models is more optimistic: the best score for Meaning Sim-ilarity in the Shared Task was 84/100 (Bohnet et al., 2011), while sentences ordered according to our models were judged to have the same meaning as the original in 85% of cases (Table 2), though these figures are based on different data. These comparisons suggest that these generative models do not provide state-of-the-art performance, but do capture some of the same information as previous models. 3.4 Discussion Overall, the most effective models are the Dependent N-gram models. The naive approach to modeling order relations among sister depen-dents, as embodied in the Observed Orders model, does not generalize well. The result suggests that models like the Dependent N-gram model might be effective as generative dependency models. We have discussed generative models for depen-dency tree linearization, exploring a path less trav-eled by in the dependency linearization literature. We believe this approach has value for answering scientific questions in quantitative linguistics and for better understanding the linguistic adequacy of generative dependency models.
 We thank William P. Li, Kyle Mahowald, and Tim O X  X onnell for helpful discussions, and Michael White for help accessing data.
