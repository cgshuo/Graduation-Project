 Here we study a varian t of maximal clique enumeration problem by incorp orating a minim um size criterion. We describ e prepro cessing techniques to reduce the graph size. This is of practical interest since enumerating maximal cliques is a computationally hard problem and the execution time increases rapidly with the input size. We discuss basics of an algorithm for enumerating large maximal cliques whic h exploits the constrain t on minim um size of the desired max-imal cliques. Social net works are prime examples of large sparse graphs where enumerating large maximal cliques is of interest. We presen t exp erimen tal results on the social net-work formed by the call detail records of one of the world's largest telecom service pro viders. Our results sho w that the prepro cessing metho ds achiev e signi can t reduction in the graph size. We also characterize the execution beha viour of our large maximal clique enumeration algorithm.
 G.2.2 [ Discrete Mathematics ]: Graph Theory| Graph Algorithms Algorithms, Performance Maximal Clique, Filtering
Enumerating maximal cliques is a well-studied problem [2, 4, 6, 1, 3]. One imp ortan t engineering application of maxi-mal clique enumeration is comm unit y nding in social net-works. Typically the graphs in suc h applications are very large and sparse and the num ber of maximal cliques of a given size increases exp onen tially as the clique size decreases. The information con ten t of a smaller clique is obviously less
Also observ e that for an edge e = ( u; v ) to participate in a clique of size L , the nodes on the two sides of the edge ( u; v ) must share at least L neigh bours in their neigh bour-hood, i.e., j ( u ) \ ( v ) j L . Furthermore, if a node v is to participate in a clique of size L , it must have at least L 1 neigh bours u (besides itself ), suc h that j ( v ) \ ( u ) j L . We use these criteria to rst eliminate edges and then to eliminate the nodes whic h cannot participate in a clique of size at least L . We apply this pro cedure recursiv ely and refer to it as Shar ed Neighb ourho od Filtering ( SNNFiltering for brevit y). This is a far stricter criterion than the de-gree based ltering and results in signi can t reduction in the graph size. Note that while the degree based ltering results in a induced subgraph of the remaining nodes, in shared neigh bourho od ltering, some of the edges between the surviving nodes may also be dropp ed if they cannot par-ticipate in the same maximal clique.
Now, we describ e some basics of our algorithm to nd all maximal cliques of size at least L . The guiding though t be-hind the algorithm is that we exp ect poten tially a very large but fairly sparse graph and do not exp ect a huge num ber of large maximal cliques. This fact allo ws us to use a breadth-rst searc h tactic as against the depth-rst technique used in [2, 4].

We de ne a candidate as a set of nodes that may con tain a maximal clique. To discard candidates whic h may not give rise to a maximal clique, we mak e the follo wing observ ation. Exactly one of the two conditions will be satis ed by any given maximal clique K and any node v : v 2 K XOR 9 u : u 2 K and u = 2 ( v ) It is easy to see that if both are true, then K will not be a clique. On the other hand if both are false, K will not be maximal since K [ v will also be a clique.

Since a maximal clique is a subset of the neigh bourho ods of all the participating nodes, we start with the neigh bour-hood of a node as a candidate. When we pro cess a node that app ears in a candidate, we split the candidate in two parts, one whic h con tains the node and the other whic h does not. For the second candidate, we attac h a condition as a list of nodes that are not neigh bours of v amongst the nodes in the candidate. If at least one of these nodes is not part of the candidate at any given point, the candidate cannot lead to a maximal clique as noted above. These conditions allo w us to reuse the computations as they are percolated to the child candidates. We stop pro cessing a candidate when its size goes below L . When we nish pro cessing all the nodes, the surviving candidates are maximal cliques.
We rep ort our exp erimen tal results on a data set whic h consisted of a graph with 5 ; 806 ; 784 nodes and 28 ; 951 ; 874 edges that was deriv ed from 195 ; 871 ; 787 Call Detail Records of a large telecom service pro vider. Figure 1 sho ws the num-ber of nodes and num ber of edges as a function of ltering level. Note that the graph size resulting from SNN ltering for L = 13 itself is much smaller than the size of the graph resulting from degree based ltering for L = 19, the size of the maximal clique. Also, note that the ltering pro cess is not too time consuming.

Figure 2 characterizes the execution beha viour of our al-
