 We present a demonstration of an interactive wrapper in-duction system, called Pictor , which is able to minimize labeling cost, yet extract data with high accuracy from a website. Our demonstration will introduce two proposed technologies: record-level wrappers and a wrapper-assisted labeling strategy. These approaches allow Pictor to exploit previously generated wrappers, in order to predict similar labels in a partially labeled webpage or a completely new webpage. Our experiment results show the effectiveness of the Pictor system.
 H.3.m [ Information Storage and Retrieval ]: Miscella-neous X  Data Extraction, Wrapper Generation, Web Algorithms, Design, Experimentation, Performance Pictor, Information Extraction, Wrapper, Labeling Cost, Wrapper Assisted Labeling
Many online services such as Vertical Search Engines [6] require extracting web records from websites. These web records can exist in different formats. Typically, in a list page, multiple records with similar structure and appearan ce are listed in a distinct layout. While in a detail page only a single record is typically shown.

Wrapper induction is an effective method for such web record extraction tasks [2, 3, 4, 9]. A wrapper can be defined as a software or program that is used to extract desired in-formation from a source and transform it into a structured format. Manually writing wrappers for Web sources is a tedious, time-consuming, and error-prone job, thus lots of work has been done on how to generate wrappers automat-ically.

Automatic wrapper induction methods can be divided into two groups by considering whether a manually labeling  X  Work was done when the author was visiting Microsoft Research Asia.
 process is required. Some systems [7, 5, 1, 8] attempt to gen-erate wrappers without pre-labeled training samples. The advantage of such methods is clear: they eliminate the need of manually labeling. In practice, however, these methods are difficult to be applied in real commercial systems that de-mand high extraction performance. In contrast, some other systems require manually labeled examples such as training data. This category of methods can achieve excellent ex-traction performance, but are criticized because labeling is costly and error-prone. Therefore, fully automatic method s are popular in academia and attract the most interest.
However, by observing some real applications, we find that manually assigned labels are important for high extraction performance: 1) Labels provide more information to distin-guish nodes with the same tags. 2) A wrapper with labels explicitly organizes the extracted data into a certain sche ma. 3) Labeled training data could improve training efficiency by allowing wrapper induction algorithms to focus on the labeled parts on a page and ignore the irrelevant parts.
If high extraction accuracy is a requirement, how can the labeling cost be reduced? Our answer is an interactive wrap-per labeling and training system called Pictor , which can be used to visually label sample web pages and generate wrap-pers simultaneously. In this system, our goal is to minimize labeling costs while being able to extract data with high accuracy. We propose record-level wrappers and a labeling strategy called wrapper-assisted labeling to utilize previously generated wrappers to help label more records of a partially labeled webpage, or a completely new webpage.

Experiments were conducted on three kinds of websites, namely online shops, restaurant reviews and a digital li-brary. The results indicate that our proposed approaches can achieve as high as 99% F1-value while saving 90% label-ing efforts. In this section, we describe two key techniques used in our Pictor system.
Record-level wrappers make it possible to avoid repetitive record labeling on the same page with identical structures. Like many wrapper induction systems, we use a Document Object Model ( X  X OM X ) tree to model a web page. The approach we use to represent and generate wrappers can be considered as a variation of work in [9].

The major difference is that we train wrappers at a record level while the system in [9] generates page-level wrappers . More specifically, when a user finishes labeling one record, the system will extract the sub-DOM tree corresponding to the record, and feed it to an incremental wrapper updating process.

When a generated wrapper is used to extract data, it does so at the record level, instead of the whole page. In our system, a wrapper is able to match a sub-DOM tree corre-sponding to a record of a page, then extract data from the matched sub-tree. When multiple wrappers match the same sub-tree, our system will automatically select a wrapper wi th the best match (minimal distance to matched sub-tree) to perform the extraction.
Applying previously generated wrappers to predict labels of similar records is the key point of our wrapper-assisted labeling strategy. This is accomplished by performing data extraction using existing wrappers. The main advantage of using wrapper-assisted labeling strategy is that it can avo id repeatedly labeling records with the same internal structu re, and thus reduce the overall labeling effort. The amount of labeling effort it can save can be formalized as follows:
Suppose we need to label a group of pages from the same template. The total number of records is N r . According to the records X  internal structures, all N r records can be virtually partitioned into N s subsets. Records in each sub-set have exactly the same internal structure. Then, with a wrapper-assisted labeling strategy, we only need to label one representative record for each subset, and use the gen-erated wrapper to automatically assign labels for the rest o f the records. As a result, the maximal number of records we need to label is N s . In general, N s &lt; N r . For example, we have done a statistical analysis of seven well-known online shopping websites. The results show that N s : N r ' 1 : 9 . 58. That is why our system can significantly save labeling costs above traditional labeling methods.
We plan to use several well-known websites to demon-strate the entire process of labeling and training for wrap-per generation. First, we will explain how to define and load a schema for each wrapper generation task. Then, we will walk through each step and explain what kinds of techniques are used. Finally, we will perform a batch extraction using generated wrappers and present the results in an easy to read format. During live demonstrations, the audience will be invited to try our system for different websites.
A user-friendly interface plays an important role in achiev -ing the goal of reducing labeling costs. As shown in Figure 1, the main part of the Pictor interface is an embedded web browser. This browser can be used in two different modes: browsing mode and labeling mode (a.k.a.  X  X ictor Mode X ). In browsing mode, online or offline webpages can be opened for labeling. When an opened page is completely loaded, we can switch to labeling mode by clicking the switch button. Figure 1 shows the main interface of our Pictor system when it is under labeling mode.
 The webpage being labeled is displayed in the main panel. While moving the mouse cursor on the webpage, a red rect-angular graphic will follow the cursor indicating which web page element is being selected. Right-clicking a selected e le-ment will pop-up a context menu providing labeling options.
Note that there is a schema selection panel at the top-right corner. Users need to select a schema before labeling. A schema, in this application, specifies the structure of ex-tracted data and provides candidate labels for the purpose of labeling. In the Pictor system, we provide an editor that enables creation and modification of a schema. Users can specify what kind of attributes an extracted record should contain (Figure 2).

The ID controller in the right panel allows users to specify a record ID for each attribute they would label. The system uses this ID to group attributes into a record. As shown in Figure 1, the record ID selected by the user will appear as a prefix in each menu item. This helps the user to clearly identify which record they are assigning labels to.
The bottom-left panel is a data view which displays the extracted labeled data in a tabular format. Because users can see what data is being extracted through this table as they work, labeling errors are reduced.
Given a set of sample pages, a typical workflow of page labeling and wrapper generation is shown in Figure 3.
During the entire labeling process, each individual sample page is labeled separately. Here, we use an example from www.costco.com to explain several important steps. In this Figure 3: Labeling and Wrapper Generation Work Flow example, the extraction schema is designed as follows: each record contains three fields, namely Image , Title , and Price .
Given a new page, the labeling process does not always need to start from scratch. If one or more wrappers gener-ated from other similar pages exist, they could be applied to the current page in order to predict other labels followin g similar patterns. Note that the detection of existing ap-plicable wrappers is automatically performed by the Pictor system when it enters labeling mode.
Suppose no applicable wrappers exist for a given page; such a condition indicates we must start from scratch. The first thing to be done is to assign labels to a complete record. In the labeling mode of our system, assigning labels to a record can be easily done with a few mouse clicks as illus-trated in Figure 1.
After a single record is labeled, it can be used to generate or update the underlying wrappers. This process is auto-matically done by the system when a user clicks  X  X pdate Wrappers X .
One of the most notable parts of this work is the wrapper-assisted labeling strategy. The basic premise of this label ing strategy is to use previously generated wrappers to predict labels of similar records within a webpage. In Figure 4, a wrapper generated from the first record is used to predict labels for the other three similar records.

In most cases, records in the same page are very simi-lar, even to the point of being identical in terms of internal DOM tree structure. Therefore, labeling a small number of records can generate wrappers, which can in turn automat-ically label the remaining records without further manual labor.
In the early stages of labeling, the underlying wrappers may not be able to correctly predict all labels. For some records, they might have wrongly assigned labels, or their attributes might be not be completely labeled. For example, in Figure 4, the third record has an unlabeled attribute.
Our Pictor system allows the modification of labels as-signed by the underlying wrappers. In fact, the process of modifying labels of a record is nearly the same as assigning new labels. Figure 4 illustrates how to append a label to a partially labeled record.

As we can see from Figure 3, the labeling task for one page can be finished by repeating the process of labeling a new record, updating wrappers, applying wrappers, and revisin g labels.
We tested the performance of our Pictor system through various experiments.

Our dataset is derived from 13 widely used, diverse, large-scale websites as shown in Table 1. The first eight websites are online shopping websites. The following four are restau -rant review websites. The last website is the ACM digi-tal library portal. Among eight shopping websites, pages from the first seven sites are all list pages and pages from Yahoo.com are all detail pages. The pages from the four restaurant review websites and ACM portal are all detail pages.

Different extraction schemas are defined for the three do-mains. For online shopping websites, a product record con-tains three attributes, namely product name, product image , and product price. For restaurant review websites, the ex-traction schema contains review author, review time, price range, and review content. For ACM portal, we are inter-ested in extracting document title, source (where it is pub-lished), authors and their affiliations.

In our experiments, we use precision, recall, and F1 as measures in evaluation of data extraction results. These measures are calculated based on whether a labeled node is correctly extracted.
 This experiment is designed to show the extraction accuracy of generated wrappers. As Table 1 shows, the average F1 is 99% on 13 websites.

Website Page # Pre. Rec. F1-Value amazon.com 23 0.9700 0.9300 0.9496 ashford.com 12 1.0000 1.0000 1.0000 circuitcity.com 19 1.0000 1.0000 1.0000 diamond.com 12 0.9875 0.9975 0.9925 ebags.com 19 0.9976 1.0000 0.9988 officedepot.com 19 0.9850 1.0000 0.9924 sears.com 27 0.9960 1.0000 0.9980 yahoo.com 14 1.0000 1.0000 1.0000 dine.com 8 1.0000 1.0000 1.0000 menupages.com 5 1.0000 1.0000 1.0000 restaurant.com 10 1.0000 1.0000 1.0000 wcities.com 5 1.0000 1.0000 1.0000 portal.acm.org 4 1.0000 1.0000 1.0000 Average 13.6154 0.9951 0.9944 0.9947 This experiment is designed to show how much labeling ef-fort can be saved by using Pictor. We use the number of records that are labeled by humans in training sets as a measure of labeling efforts. Comparison results of seven on-line shopping websites are listed in Figure 5. It shows that the average number of labeled records without using Pictor is 16.1, whereas the average number of labeled records us-ing Pictor is 1.68. Consequently, our system roughly saves 89.61% labeling cost compared to traditional labeling meth -ods which have to label all records in training pages.
In this demonstration, we present an interactive wrapper induction system, called Pictor , designed to minimize label-ing cost, yet import data with high accuracy from a website. In our Pictor system, labeling efforts are reduced mainly in two aspects. 1) Our system is able to reduce the labeling cost within one page, because not all data records need to be labeled manually. 2) When an unlabeled page undergoes labeling, there is a high likelihood that most of the label-ing can be done automatically. Experimental results on 13 widely used and diverse websites indicate that Pictor can achieve as high extraction performance as 99% in terms of F1-value while saving about 90% of labeling efforts. [1] A. Arasu and H. Garcia-Molina. Extracting structured [2] S. Flesca, G. Manco, E. Masciari, E. Rende, and [3] A. H. F. Laender, B. A. Ribeiro-Neto, A. S. da Silva, [4] B. Liu. Web content mining (tutorial). In WWW , [5] B. Liu, R. Grossman, and Y. Zhai. Mining data [6] Z. Nie, J.-R. Wen, and W.-Y. Ma. Object-level [7] J. Wang and F. H. Lochovsky. Data extraction and [8] H. Zhao, W. Meng, Z. Wu, V. Raghavan, and C. Yu. [9] S. Zheng, R. Song, D. Wu, and J.-R. Wen. Joint
