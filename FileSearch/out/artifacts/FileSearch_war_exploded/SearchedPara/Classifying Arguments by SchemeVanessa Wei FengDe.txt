 We investigate a new task in the computational anal-ysis of arguments: the classification of arguments by the argumentation schemes that they use. An ar-gumentation scheme, informally, is a framework or structure for a (possibly defeasible) argument; we will give a more-formal definition and examples in Section 3. Our work is motivated by the need to de-termine the unstated (or implicitly stated) premises that arguments written in natural language normally draw on. Such premises are called enthymemes .
For instance, the argument in Example 1 consists of one explicit premise (the first sentence) and a con-clusion (the second sentence): Example 1 [ Premise :] The survival of the entire world is at stake. [ Conclusion :] The treaties and covenants aiming for a world free of nuclear arsenals and other con-ventional and biological weapons of mass destruc-tion should be adhered to scrupulously by all na-tions.
 Another premise is left implicit  X   X  Adhering to those treaties and covenants is a means of realizing survival of the entire world  X . This proposition is an enthymeme of this argument.

Our ultimate goal is to reconstruct the en-thymemes in an argument, because determining these unstated assumptions is an integral part of un-derstanding, supporting, or attacking an entire argu-ment. Hence reconstructing enthymemes is an im-portant problem in argument understanding. We be-lieve that first identifying the particular argumenta-tion scheme that an argument is using will help to bridge the gap between stated and unstated proposi-tions in the argument, because each argumentation scheme is a relatively fixed  X  X emplate X  for arguing. That is, given an argument, we first classify its ar-gumentation scheme; then we fit the stated proposi-tions into the corresponding template; and from this we infer the enthymemes.

In this paper, we present an argument scheme classification system as a stage following argument detection and proposition classification. First in Sec-tion 2 and Section 3, we introduce the background to our work, including related work in this field, the two core concepts of argumentation schemes and scheme-sets, and the Araucaria dataset. In Section 4 and Section 5 we present our classification system, including the overall framework, data preprocessing, feature selection, and the experimental setups. In the remaining section, we present the essential ap-proaches to solve the leftover problems of this paper which we will study in our future work, and discuss the experimental results, and potential directions for future work. Argumentation has not received a great deal of at-tention in computational linguistics, although it has been a topic of interest for many years. Cohen (1987) presented a computational model of argu-mentative discourse. Dick (1987; 1991a; 1991b) de-veloped a representation for retrieval of judicial de-cisions by the structure of their legal argument  X  a necessity for finding legal precedents independent of their domain. However, at that time no corpus of ar-guments was available, so Dick X  X  system was purely theoretical. Recently, the Araucaria project at Uni-versity of Dundee has developed a software tool for manual argument analysis, with a point-and-click in-terface for users to reconstruct and diagram an ar-gument (Reed and Rowe, 2004; Rowe and Reed, 2008). The project also maintains an online repos-itory, called AraucariaDB, of marked-up naturally occurring arguments collected by annotators world-wide, which can be used as an experimental corpus for automatic argumentation analysis (for details see Section 3.2).

Recent work on argument interpretation includes that of George, Zukerman, and Nieman (2007), who interpret constructed-example arguments (not natu-rally occurring text) as Bayesian networks. Other contemporary research has looked at the automatic detection of arguments in text and the classification of premises and conclusions. The work closest to ours is perhaps that of Mochales and Moens (2007; 2008; 2009a; 2009b). In their early work, they fo-cused on automatic detection of arguments in legal texts. With each sentence represented as a vector of shallow features, they trained a multinomial na  X   X ve Bayes classifier and a maximum entropy model on the Araucaria corpus, and obtained a best average accuracy of 73.75%. In their follow-up work, they trained a support vector machine to further classify each argumentative clause into a premise or a con-clusion, with an F 1 measure of 68.12% and 74.07% respectively. In addition, their context-free grammar for argumentation structure parsing obtained around 60% accuracy.

Our work is  X  X ownstream X  from that of Mochales and Moens. Assuming the eventual success of their, or others X , research program on detecting and clas-sifying the components of an argument, we seek to determine how the pieces fit together as an instance of an argumentation scheme. 3.1 Definition and examples Argumentation schemes are structures or templates for forms of arguments. The arguments need not be deductive or inductive; on the contrary, most argu-mentation schemes are for presumptive or defeasible arguments (Walton and Reed, 2002). For example, argument from cause to e ff ect is a commonly used scheme in everyday arguments. A list of such argu-mentation schemes is called a scheme-set .

It has been shown that argumentation schemes are useful in evaluating common arguments as falla-cious or not (van Eemeren and Grootendorst, 1992). In order to judge the weakness of an argument, a set of critical questions are asked according to the par-ticular scheme that the argument is using, and the argument is regarded as valid if it matches all the requirements imposed by the scheme.

Walton X  X  set of 65 argumentation schemes (Wal-ton et al., 2008) is one of the best-developed scheme-sets in argumentation theory. The five schemes de-fined in Table 1 are the most commonly used ones, and they are the focus of the scheme classification system that we will describe in this paper. 3.2 Araucaria dataset One of the challenges for automatic argumentation analysis is that suitable annotated corpora are still very rare, in spite of work by many researchers. In the work described here, we use the Araucaria database 1 , an online repository of arguments, as our experimental dataset. Araucaria includes approxi-mately 660 manually annotated arguments from var-ious sources, such as newspapers and court cases, and keeps growing. Although Araucaria has sev-eral limitations, such as rather small size and low agreement among annotators 2 , it is nonetheless one of the best argumentative corpora available to date. Argument from example
Premise : In this particular case, the individual a
Conclusion: Therefore, generally, if x has prop-Argument from cause to e ff ect
Major premise : Generally, if A occurs, then B will
Minor premise : In this case, A occurs (might oc-
Conclusion : Therefore, in this case, B will Practical reasoning Major premise : I have a goal G .

Minor premise : Carrying out action A is a means
Conclusion : Therefore, I ought (practically Argument from consequences
Premise : If A is (is not) brought about, good (bad)
Conclusion : Therefore, A should (should not) be Argument from verbal classification Individual premise : a has a particular property F . Classification premise : For all x , if x has property Conclusion : Therefore, a has property G .
 Arguments in Araucaria are annotated in a XML-based format called  X  X ML X  (Argument Markup Language). A typical argument (see Example 2) consists of several AU nodes. Each AU node is a complete argument unit, composed of a conclusion proposition followed by optional premise proposi-tion(s) in a linked or convergent structure. Each of these propositions can be further defined as a hier-archical collection of smaller AUs. INSCHEME is the particular scheme (e.g.,  X  X rgument from Con-sequences X  ) of which the current proposition is a member; enthymemes that have been made explicit are annotated as  X  X issing = yes X .
 Example 2 Example of argument markup from Araucaria
There are three scheme-sets used in the anno-tations in Araucaria: Walton X  X  scheme-set, Katzav and Reed X  X  (2004) scheme-set, and Pollock X  X  (1995) scheme-set. Each of these has a di ff erent set of schemes; and most arguments in Araucaria are marked up according to only one of them. Our experimental dataset is composed of only those arguments annotated in accordance with Walton X  X  scheme-set, within which the five schemes shown in Table 1 constitute 61% of the total occurrences. 4.1 Overall framework As we noted above, our ultimate goal is to recon-struct enthymemes, the unstated premises, in an ar-gument by taking advantage of the stated proposi-tions; and in order to achieve this goal we need to first determine the particular argumentation scheme that the argument is using. This problem is de-picted in Figure 1. Our scheme classifier is the dashed round-cornered rectangle portion of this overall framework: its input is the extracted con-clusion and premise(s) determined by an argument detector, followed by a premise / conclusion classi-fier, given an unknown text as the input to the entire system. And the portion below the dashed round-rectangle represents our long-term goal  X  to recon-struct the implicit premise(s) in an argument, given its argumentation scheme and its explicit conclusion and premise(s) as input. Since argument detection and classification are not the topic of this paper, we assume here that the input conclusion and premise(s) have already been retrieved, segmented, and classi-fied, as for example by the methods of Mochales and Moens (see Section 2 above). And the scheme tem-plate fitter is the topic of our on-going work. 4.2 Data preprocessing From all arguments in Araucaria, we first ex-tract those annotated in accordance with Walton X  X  scheme-set. Then we break each complex AU node into several simple AUs where no conclusion or premise proposition nodes have embedded AU nodes. From these generated simple arguments, we extract those whose scheme falls into one of the five most frequent schemes as described in Table 1. Fur-thermore, we remove all enthymemes that have been inserted by the annotator and ignore any argument with a missing conclusion, since the input to our pro-posed classifier, as depicted in Figure 1, cannot have any access to unstated argumentative propositions.
The resulting preprocessed dataset is composed of 393 arguments, of which 149, 106, 53, 44, and 41 respectively belong to the five schemes in the order shown in Table 1. 4.3 Feature selection The features used in our work fall into two cat-egories: general features and scheme-specific fea-tures. 4.3.1 General features General features are applicable to arguments belong-ing to any of the five schemes (shown in Table 2).
For the features conLoc , premLoc , gap , and lenRat , we have two versions, di ff ering in terms of their basic measurement unit: sentence -based and token -based. The final feature, type , indicates whether the premises contribute to the conclusion in a linked or convergent order. A linked argument (LA) is one that has two or more inter-dependent premise propositions, all of which are necessary to make the conclusion valid, whereas in a conver-gent argument (CA) exactly one premise proposi-tion is su ffi cient to do so. Since it is observed that there exists a strong correlation between type and the particular scheme employed while arguing, we believe type can be a good indicator of argumenta-tion scheme. However, although this feature is avail-able to us because it is included in the Araucaria an-notations, its value cannot be obtained from raw text as easily as other features mentioned above; but it is possible that we will in the future be able to deter-mine it automatically by taking advantage of some scheme-independent cues such as the discourse re-lation between the conclusion and the premises. 4.3.2 Scheme-specific features Scheme-specific features are di ff erent for each scheme, since each scheme has its own cue phrases or patterns. The features for each scheme are shown in Table 3 (for complete lists of features see Feng (2010)). In our experiments in Section 5 below, all these features are computed for all arguments; but conLoc : the location (in token or sentence) of the premLoc : the location (in token or sentence) of conFirst : whether the conclusion appears before gap : the interval (in token or sentence) between lenRat : the ratio of the length (in token or sen-numPrem : the number of explicit premise propo-type : type of argumentation structure, i.e., linked the features for any particular scheme are used only when it is the subject of a particular task. For ex-ample, when we classify argument from example in a one-against-others setup, we use the scheme-specific features of that scheme for all arguments; when we classify argument from example against argument from cause to e ff ect , we use the scheme-specific features of those two schemes.

For the first three schemes ( argument from ex-ample , argument from cause to e ff ect , and practi-cal reasoning ), the scheme-specific features are se-lected cue phrases or patterns that are believed to be indicative of each scheme. Since these cue phrases and patterns have di ff ering qualities in terms of their precision and recall, we do not treat them all equally. For each cue phrase or pattern, we compute  X  X onfi-dence X , the degree of belief that the argument of in-terest belongs to a particular scheme, using the dis-tribution characteristics of the cue phrase or pattern in the corpus, as described below.

For each argument A , a vector CV = { c 1 , c 2 , c 3 } is added to its feature set, where each c i indicates the  X  X onfidence X  of the existence of the specific fea-tures associated with each of the first three schemes, scheme i . This is defined in Equation 1:
Argument from example 8 keywords and phrases including for example , such as , for instance , etc.; 3 punctuation cues:  X : X ,  X ; X , and  X  X  X .

Argument from cause to e ff ect 22 keywords and simple cue phrases including re-sult , related to , lead to , etc.; 10 causal and non-causal relation patterns extracted from WordNet (Girju, 2003).

Practical reasoning 28 keywords and phrases including want , aim , ob-jective , etc.; 4 modal verbs: should , could , must , and need ; 4 patterns including imperatives and in-finitives indicating the goal of the speaker. Argument from consequences
The counts of positive and negative propositions in the conclusion and premises, calculated from the General Inquirer 2 .
 Argument from verbal classification
The maximal similarity between the central word pairs extracted from the conclusion and the premise; the counts of copula , expletive , and neg-ative modifier dependency relations returned by the Stanford parser 3 in the conclusion and the premise. Here m i is the number of scheme-specific cue phrases designed for scheme i ; P ( scheme i | c p k ) is the prior probability that the argument A actually be-longs to scheme i , given that some particular cue phrase c p k is found in A ; d ik is a value indicat-ing whether c p k is found in A ; and the normaliza-tion factor N is the number of scheme-specific cue phrase patterns designed for scheme i with at least one support (at least one of the arguments belonging to scheme i contains that cue phrase). There are two ways to calculate d ik , Boolean and count : in Boolean mode, d ik is treated as 1 if A matches c p k ; in count mode, d ik equals to the number of times A matches c p k ; and in both modes, d ik is treated as 0 if c p k is not found in A .
For argument from consequences , since the arguer has an obvious preference for some particular con-sequence, sentiment orientation can be a good in-dicator for this scheme, which is quantified by the counts of positive and negative propositions in the conclusion and premise.

For argument from verbal classification , there ex-ists a hypernymy-like relation between some pair of propositions (entities, concepts, or actions) located in the conclusion and the premise respectively. The existence of such a relation is quantified by the max-imal Jiang-Conrath Similarity (Jiang and Conrath, 1997) between the  X  X entral word X  pairs extracted from the conclusion and the premise. We parse each sentence of the argument with the Stanford depen-dency parser, and a word or phrase is considered to be a central word if it is the dependent or governor of several particular dependency relations, which basi-cally represents the attribute or the action of an en-tity in a sentence, or the entity itself. For example, if a word or phrase is the dependent of the depen-dency relation agent , it is therefore considered as a  X  X entral word X . In addition, an arguer tends to use several particular syntactic structures ( copula , exple-tive , and negative modifier ) when using this scheme, which can be quantified by the counts of those spe-cial relations in the conclusion and the premise(s). 5.1 Training We experiment with two kinds of classification: one-against-others and pairwise . We build a pruned C4.5 decision tree (Quinlan, 1993) for each di ff erent classification setup, implemented by Weka Toolkit 3.6 5 (Hall et al., 2009).
 One-against-others classification A one-against-others classifier is constructed for each of the five most frequent schemes, using the general features and the scheme-specific features for the scheme of interest. For each classifier, there are two possi-ble outcomes: target scheme and other; 50% of the training dataset is arguments associated with tar-get scheme , while the rest is arguments of all the other schemes, which are treated as other. One-against-other classification thus tests the e ff ective-ness of each scheme X  X  specific features.
 Pairwise classification A pairwise classifier is constructed for each of the ten possible pairings of the five schemes, using the general features and the scheme-specific features of the two schemes in the pair. For each of the ten classifiers, the train-ing dataset is divided equally into arguments be-longing to scheme 1 and arguments belonging to scheme 2 , where scheme 1 and scheme 2 are two dif-ferent schemes among the five. Only features asso-ciated with scheme 1 and scheme 2 are used. 5.2 Evaluation We experiment with di ff erent combinations of gen-eral features and scheme-specific features (discussed in Section 4.3). To evaluate each experiment, we use the average accuracy over 10 pools of randomly sampled data (each with baseline at 50% 6 ) with 10-fold cross-validation. We first present the best average accuracy (BAA) of each classification setup. Then we demonstrate the impact of the feature type (convergent or linked ar-gument) on BAAs for di ff erent classification setups, since we believe type is strongly correlated with the particular argumentation scheme and its value is the only one directly retrieved from the annotations of the training corpus. For more details, see Feng (2010). 6.1 BAAs of each classification setup target scheme BAA d i k base type example 90.6 count token yes cause 70.4 Boolean reasoning 90.8 count sentence yes consequences 62.9  X  sentence yes classification 63.2  X  token yes cause 80.6 reasoning 93.1 94.2 consequences 86.9 86.7 97.9 classification 86.0 85.6 98.3 64.2
Table 4 presents the best average accuracies of one-against-others classification for each of the five schemes. The subsequent three columns list the particular strategies of features incorporation under which those BAAs are achieved (the complete set of possible choices is given in Section 4.3.):  X  d ik : Boolean or count  X  the strategy of com- X  base : sentence or token  X  the basic unit of ap- X  type : yes or no  X  whether type (convergent or
As Table 4 shows, one-against-others classifica-tion achieves high accuracy for argument from ex-ample and practical reasoning : 90.6% and 90.8%. The BAA of argument from cause to e ff ect is only just over 70%. However, with the last two schemes ( argument from consequences and argument from verbal classification ), accuracy is only in the low 60s; there is little improvement of our system over the majority baseline of 50%. This is probably due at least partly to the fact that these schemes do not have such obvious cue phrases or patterns as the other three schemes which therefore may require more world knowledge encoded, and also because the available training data for each is relatively small (44 and 41 instances, respectively). The BAA for each scheme is achieved with inconsistent choices of base and d ik , but the accuracies that resulted from di ff erent choices vary only by very little.

Table 5 shows that our system is able to correctly di ff erentiate between most of the di ff erent scheme pairs, with accuracies as high as 98%. It has poor performance (64.0%) only for the pair argument from consequences and argument from verbal clas-sification ; perhaps not coincidentally, these are the two schemes for which performance was poorest in the one-against-others task. 6.2 Impact of type on classification accuracy As we can see from Table 6, for one-against-others classifications, incorporating type into the feature vectors improves classification accuracy in most cases: the only exception is that the best average ac-curacy of one-against-others classification between argument from cause to e ff ect and others is obtained without involving type into the feature vector  X  but the di ff erence is negligible, i.e., 0.5 percent-age points with respect to the average di ff erence. Type also has a relatively small impact on argument from verbal classification (2.6 points), compared to its impact on argument from example (22.3 points), practical reasoning (8.1 points), and argument from consequences (7.5 points), in terms of the maximal di ff erences.

Similarly, for pairwise classifications, as shown in Table 7, type has significant impact on BAAs, es-pecially on the pairs of practical reasoning versus argument from cause to e ff ect (17.4 points), prac-tical reasoning versus argument from example (22.6 points), and argument from verbal classification ver-sus argument from example (20.2 points), in terms of the maximal di ff erences; but it has a relatively small impact on argument from consequences ver-sus argument from cause to e ff ect (0.8 point), and argument from verbal classification versus argument from consequences (1.1 points), in terms of average di ff erences. In future work, we will look at automatically clas-sifying type (i.e., whether an argument is linked or convergent), as type is the only feature directly re-trieved from annotations in the training corpus that has a strong impact on improving classification ac-curacies.

Automatically classifying type will not be easy, because sometimes it is subjective to say whether a premise is su ffi cient by itself to support the conclu-sion or not, especially when the argument is about personal opinions or judgments. So for this task, we will initially focus on arguments that are (or at least seem to be) empirical or objective rather than value-based. It will also be non-trivial to deter-mine whether an argument is convergent or linked  X  whether the premises are independent of one an-other or not. Cue words and discourse relations be-tween the premises and the conclusion will be one helpful factor; for example, besides generally flags an independent premise. And one premise may be regarded as linked to another if either would become an enthymeme if deleted; but determining this in the general case, without circularity, will be di ffi cult.
We will also work on the argument template fitter, which is the final component in our overall frame-work. The task of the argument template fitter is to map each explicitly stated conclusion and premise into the corresponding position in its scheme tem-plate and to extract the information necessary for en-thymeme reconstruction. Here we propose a syntax-based approach for this stage, which is similar to tasks in information retrieval. This can be best ex-plained by the argument in Example 1, which uses the particular argumentation scheme practical rea-soning .

We want to fit the Premise and the Conclusion of this argument into the Major premise and the Con-clusion slots of the definition of practical reasoning (see Table 1), and construct the following conceptual mapping relations: 1. Survival of the entire world  X  X  X  a goal G 2. Adhering to the treaties and covenants aiming Thereby we will be able to reconstruct the missing Minor premise  X  the enthymeme in this argument:
Carrying out adhering to the treaties and covenants aiming for a world free of nuclear arsenals and other conventional and biological weapons of mass destruction is a means of real-izing survival of the entire world . The argumentation scheme classification system that we have presented in this paper introduces a new task in research on argumentation. To the best of our knowledge, this is the first attempt to classify argumentation schemes.

In our experiments, we have focused on the five most frequently used schemes in Walton X  X  scheme-set, and conducted two kinds of classification: in one-against-others classification, we achieved over 90% best average accuracies for two schemes, with other three schemes in the 60s to 70s; and in pair-wise classification, we obtained 80% to 90% best average accuracies for most scheme pairs. The poor performance of our classification system on other experimental setups is partly due to the lack of train-ing examples or to insu ffi cient world knowledge.
Completion of our scheme classification system will be a step towards our ultimate goal of recon-structing the enthymemes in an argument by the pro-cedure depicted in Figure 1. Because of the signifi-cance of enthymemes in reasoning and arguing, this is crucial to the goal of understanding arguments. But given the still-premature state of research of ar-gumentation in computational linguistics, there are many practical issues to deal with first, such as the construction of richer training corpora and improve-ment of the performance of each step in the proce-dure.
 This work was financially supported by the Natu-ral Sciences and Engineering Research Council of Canada and by the University of Toronto. We are grateful to Suzanne Stevenson for helpful comments and suggestions.

