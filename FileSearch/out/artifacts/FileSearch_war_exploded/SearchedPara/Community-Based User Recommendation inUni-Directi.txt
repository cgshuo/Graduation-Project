 Advances in Web 2.0 technology has led to the rising pop-ularity of many social network services, e.g., there are over 500 million active users in Twitter. Given the huge num-ber of users, user recommendation has gained importance where the goal is to find a set of users whom a target user is likely to follow. Content-based approaches that rely on tweet content for user recommendation have low precision as tweet contents are typically short and noisy, while col-laborative filtering approaches that utilize follower-followee relationships lead to higher precision but data sparsity re-mains a challenge. In this work, we propose a community-based approach to user recommendation in Twitter-style so-cial networks. Forming communities enables us to reduce data sparsity and focus on discovering the latent charac-teristics of communities instead of individuals. We employ an LDA-based method on the follower-followee relationships to discover communities before applying the state-of-the-art matrix factorization method on each of the communities. This approach proves effective in improving the conversion rate (by as much as 20%) as demonstrated by the results of extensive experiments on two real world data sets Twitter and Weibo. In addition, the community-based approach is scalable as the individual community can be analyzed sepa-rately.
 H.3.3 [ Information Storage and Retrieval ]: [Informa-tion filtering] Algorithms, Experimentation, Performance Recommender System, User Recommendation, Personaliza-tion, Uni-direction Social Network, LDA, Matrix Factori-azation
The development of Web 2.0 technology has offered new opportunities and challenges for both service providers and academic researchers. One of the most successful Web 2.0 products is the social network platform, e.g. Facebook and Twitter, which facilitates and enhances relationships among users. The continued success of these social networks re-lies heavily on their abilities to recommend appropriate and relevant users to drive relationship creation. Figure 1 shows the screen shots of followee recommendations in Twitter and Weibo. If the user actually chooses one of the users from the list of recommended top-K users to follow, then we say that the recommendation is successful. Figure 1: Screen shots of followee recommender fea-ture in Twitter and Weibo
Existing user recommendation approaches assume that user preference information such as ratings and purchase temporal histories are available to depict their interests [23]. However, this is a challenge in Twitter because of its lim-ited user information. Inferring user preferences from their tweets is also difficult as tweets are inherently noisy (short and peppered with acronyms and abbreviations).
The work in [9] examines using combinations of tweet con-tent and follower-followee relationships to recommend users to follow in Twitter. They found that follower-followee rela-tionships are dominant features that capture the interest of users since users actively choose people they are interested in to follow.

Figure 2(a) shows a sample Twitter-style social network where the relationships are directional and not necessarily reciprocal. The directed edge e ( u, v ) indicates that user u is following user v. Each user u has a set of followers F and a set of followees G u . For example, we have F u 1 = { u 2 ,u 4 ,u 5 } and G u 1 = { u 2 ,u 3 ,u 4 ,u 6 } . Note that we do not have the edge e ( u, v )where u = v since a user does not follow him/herself.

Although the follow relationship among users seems disor-ganized and chaotic, communities exist in these social net-works as a user follows another user based on his/her in-terests. Figure 2(b) gives the matrix representation of the follow relationships in Figure 2(a). The rows and columns denote user ids. An element at row i and column j with a value of 1 indicates that user u i is a follower of user u other words, row i is the followee list G u i for user u i column j is the follower list F u j for user u j .
By clustering or re-arranging the rows and columns in the matrix, we can obtain 2 communities as indicated by the red and blue submatrice. We observe that: 1. A user may be a follower in more than one commu-2. A user may be a followee in multiple communities, 3. A user may play different roles in different commu-
The above observations motivate us to utilize a probabilis-tic approach that leverages both the follower and followee information of users to discover communities. The goal is to form communities of users with similar influence as well as interests. Then, applying state-of-the-art matrix factoriza-tion methods and its variants IF -MF [13] and BPR -MF [18] to each community will lead to better personalized rec-ommendations.
 Suppose we want to recommend users to u 10 to follow. We observe that u 10 is in the red community. If we apply matrix factorization on the red sub-matrix, we will recom-mend u 7 to u 10 . However, if we apply matrix factorization on the entire matrix in Figure 2(b), we will recommend u 3 because u 10 follows u 6 and u 9 , and the majority of the u followers also follow u 3 . Our experiments demonstrate that by discovering communities in Twitter-style social network and recommending users to follow within these communities leads to significant improvement in conversion rate, preci-sion and recall over performing matrix factorization on the original dataset (see Section 4.4).

Further, forming communities for user recommendation in a uni-directional social network reduces the sparsity in the matrix which is one of the most serious limitations of contemporay matrix factorization approaches. For example, the densities of the 2 sub-matrix in Figure 2(b) which cor-respond to the red and blue communities are increased to 48%, 58% respectively compared to the original density of 32%. The proposed approach is also scalable as the matrix factorization of each community (a subset of the original data set) can be performed in parallel (see Section 4.5).
In this work, we utilize the follower-followee relationships in Twitter-style social network and propose a two-step ap-proach to recommend users to follow. We first employ an LDA-based method to discover communities before applying matrix factorization on each of the discovered communities. Based on the results obtained after matrix factorization, we devise two ways to recommend the top-k followees for a target user. Extensive experiments on two real world data sets Twitter and Weibo demonstrate that the proposed ap-proach is scalable and improves the conversion rate by 20% compared to the state-of-the-art matrix factorization based recommendation algorithms [13, 17].

The rest of the paper is organized as follows. Section 2 discusses related work. Section 3 describes our proposed framework. Section 4 gives the results of our experimental study and we conclude in section 5.
There has been much research on using recommender sys-tems to help users connect with people online [12, 8, 6, 4]. These works are focused on more structured data and re-stricted domains such as co-authorship links [8], community membership in enterprise social network [4].

The work in [8] profiled users by aggregating information from multiple sources in an enterprise and highlighted users who have contributed in similar ways, e.g., patent author-ship, co-author papers or wikis. [4] designed algorithms that utilize content similarity and social network structure in user recommendation. The former is based on the intuition that if two users both post content on similar topics, then they might be interested in getting to know each other , while the latter is based on the Friend-of-Friend hypothesis that if many of my friends consider someone a friend, then I might be interest to know that person too .

Recent work has examined methods for recommending users to follow in noisy unstructured micro-blogging data such as Twitter [9, 1]. The authors in [9] investigated both content-based approach (users X  own tweets, their followers X  tweets and followees X  tweets) and collaborative filtering ap-proach (users X  ID, followers X  ID and followees X  ID) to pro-file users. User profiles are indexed and the information retrieval TF-IDF approach is used to rank and recommend users based on a target user profile. They find that the col-laborative filtering approach are better at finding relevant followees for a user as users X  relationships are more struc-tured than the tweets contents.

Matrix factorization and its variants [15, 13, 17] have be-come the state-of-the-art collaborative filtering approaches for recommender systems. The work in [13] proposed a matrix factorization method ( IF -MF ) for implicit feedback data sets. Each user-item (or user-user) pair is associated a confidence variable in the cost function, and each decision is assigned a weight in the learning process. The authors in [17] proposed a probabilistic matrix factorization method ( BPR -MF ) for implicit feedback data sets. Unlike other matrix factorization approaches that take the unseen items as missing samples, BPR -MF divides the unseen items into negative samples and missing samples. This work also has been applied in KDD Cup 2012 [20] for user recommenda-tion.

The work in [1] designed an algorithm based on the neigh-borhood of follower/followee relationships to search for can-didate users to recommend. This algorithm is based on the hypothesis that, for a target user u , the users followed by the followers of u  X  X  followees are candidates to recommend to u . This approach is a variant of the neighborhood item recommendation method [19] where a followee is equivalent to an item. [15] showed that neighborhood approaches per-form worse than matrix factorization approach, and this is also confirmed in our experiments.

Several works have utilized LDA to discover groups/ com-munities in large graphs [5, 22, 3]. The work in [5] explored how to find community structures in large scale undirected social network such as Facebook. [22] proposed a model called Simple Social Network-LDA (SSN-LDA) to model large undirected graphs. The authors map social interac-tions such as co-authorship and adviser/advisee to words, and people such as authors to documents. The work in [3] designed an LDA-based model to handle popular users and discover communities for followees in directed social network such as Twitter. These works aim to find communities of users which are highly correlated or like-minded, e.g., people who are doing information retrieval research. In contrast, our work considers both follower and followee relationships to discover more coherent communities in order to improve both the effectiveness and efficiency of matrix factorization for user recommendation.

The work in [21] explored how user-item subgroups can improve the performance of recommender systems. They design a multi-class co-clustering approach that utilizes the explicit ratings to group the users and items. This idea can be extended to find follower-followee subgroups and we eval-uate this approach with the proposed LDA-based method. Our experiment results show that the LDA-based method outperforms the co-clustering approach.
Our proposed framework comprises two main phases. The first phase utilizes an LDA-based method to determine the topic distribution of the users. Communities are formed by grouping users whose probability of a given topic is above some threshold. The second phase applies matrix factor-ization on each community to generate a list of candidate followees. We then combine these candidate lists to obtain the top-k users for a target user to follow. Before we de-scribe the details of each phase, we summarize the symbols used in Table 1.

Latent Dirichlet Allocation ( LDA ) [2] has been proposed for modeling the topic distribution of a set of documents D . Similar to Probabilistic Latent Semantic Indexing ( PLSI ) [11], each document in the LDA model is represented as a mixture of a fixed numbers of topics Z , with topic z having a probability Pr ( z | d )indocument d . Each topic is a proba-bility distribution over a finite vocabulary of words W ,with word w having probability Pr ( w | z )intopic z .
Given the parameters  X  and  X  where  X  is a vector of dimension | Z | and  X  is a vector of dimension | W | , the doc-ument generation process is as follows: 1. Choose the number of topics. 2. Choose  X   X  Dir (  X  ) 3. For each word w n
LDA has been shown to be effective in document classi-fication and recently, it has been applied to uni-directional social network such as Twitter to group users based on their follower relationship [3]. In this work, we propose to incor-porate both the follower and followee relationships into the LDA model to discover communities. We map both followees and followers into the same space so that the communities obtained will link users based on their interests (followees) and influence (followers).

Let U be the set of users and E be the set of directed edges connecting the users in a social network. An edge e ( f,g )  X  E implies that user f follows user g .Let F  X  be the set of followers and G  X  U be the set of followees defined as:
Just as one has a topic in mind when choosing a word for a document, likewise a user has an interest in mind when following another user in Twitter. Hence, each follower f can be regarded as a document consisting of a list of followees g .Wedenote Pr ( z | f ) as the multinomial probability of topic z given a follower f ,and Pr ( g | z ) as the multinomial probability of a followee g giv en z .

Since a user u can be both a follower f and a followee g , s/he is associated with two documents d f and d g .The content of d f is the list of followees of u , while the content of d g is the list of followers of u , denoted as follows: Therefore our document corpus D is given by
We apply LDA on D to generate a pre-defined number of topics Z . Figure 3 depicts the graph model for this repre-sentation.
For each topic z  X  Z , we form a community c such that the followers and followees in c , denoted as c.F and c.G respectively, are given by where  X  is some threshold.

The edges in c , denoted as c.E , represent the follower-followee relationships in c and is given by
The output for this phase is a set of communities C where |
C | = | Z | .
After discovering the communities, the next phase is to generate candidate followees from these communities for rec-ommendation. Matrix factorization is first proposed in [15] for recommender systems and has been applied to predict user ratings for items. This approach has been adapted to handle binarized user preference for items in implicit feed-back data sets ( IF -MF ) [13].

Here, we apply the IF -MF method by considering f  X  F as users and g  X  G as items and construct the matrix M in the model as follows. For each community c  X  C ,the matrix M has dimensions | c.F | X | c.G | . Each entry M [ f,g ] has a value of 1 if there is an edge e ( f,g )  X  c.E , otherwise M [ f,g ]=0.
 After matrix factorization, we obtain two matrices, namely P pings of followers in the reduced latent space of L dimen-sions and Q L  X | c.G | denotes the mappings of followees to the same reduced latent space. In other words, each follower f is associated with a vector p f  X  P | c.F | X  L , while each followee g is associated with a vector q g  X  Q L  X | c.G | .
Then for a follower f , we obtain the score that s/he will follow g in community c . This is given by the inner product of p f and q g as follows: A target user f may belong to more than one community. Thus we will have a different candidate followee recommen-dation list from each community. Here, we propose two ways to compute the final score that a target user f  X  F will fol-low g  X  G from these lists.

We can take the maximum score among the scores in the communities that both f and g belong to.
Alternatively, we can sum up the scores in all the commu-nities that f and g appear in as follows: where Pr ( c | f ) is the probability that f belongs to the com-munity c .

Note that Pr ( c | f )is Pr ( z | d f ) in the LDA model where z is the latent topic corresponding to community c .
Finally, we sort these scores for each follower f and output the top-K followees to recommend to f .
Algorithm 1 summarizes our proposed approach. We call our method Community-Based Matrix Factorization ( CB -MF ). We first obtain the set of followers and followees from the follower-followee relationships (lines 1-3). Then we ob-tain the document corpus and apply LDA to generate a pre-determined number of topics (lines 4-11). Lines 12 to 18 shows how to construct each community with its followers, followees and associated edges. Then we perform matrix fac-torization on each community (lines 19 to 24). Lines 25-28 aggregates the scores from each community and we obtain a ranked list of recommended followees for each follower.
Algorithm 1 : CB -MF Algorithm input : 1. Set of follower-followee relationships output : Ranked recommendation list F  X  X  f | X  e ( f,g )  X  E } ; 1 G  X  X  g | X  e ( f,g )  X  E } ; 2 U  X  F  X  G ; 3
D =  X  ; 4 foreach f  X  F do 5 foreach g  X  G do 8 Z  X  LDA ( D,N ); 11
C =  X  ; 12 foreach z  X  Z do 13
R =  X  ; 19 foreach c  X  C do 20
Result =  X  ; 25 foreach pair ( f,g ) do 26
In this section, we report the results of the extensive ex-periments we have carried out to evaluate both of the effec-tiveness and efficiency of our proposed CB -MF method. We compare the performance of our method with the following methods: 1. TopPop . This is a baseline algorithm which ranks 2. FoF . This is based on the Friend-of-Friend hypothe-3. NB -based [1]. This is an implementation of the neigh-4. LDA -based [3]. This is an implementation of the 5. IF -MF [13]. This is the state-of-the-art matrix fac-6. BPR -MF [17]. This is a probabilistic matrix factor-We implement the methods using Python. We code the LDA model according to [10], and use the C# implementa-tion provided in [7] for the methods BPR -MF and IF -MF . All the experiments are carried out on an Intel(R) Core(TM) i7-2600 with 3.4 GHz, 8 GB RAM, 64 bit Microsoft Windows 7 operating system.
We use two real world Twitter-style data sets for our ex-periments. The first data set is the social network data used in [16] which is obtained from Twitter 1 . The second data set is the social network data which we crawled from Weibo the biggest Chinese micro-blog system in China.

We pre-process these data sets to anonymize the user ids and improve the data set density by removing users who have less 10 followers/followees. Table 2 gives the statistics of the two data sets after pre-processing.
 Table 2: Statistics of Twitter and Weibo data sets Figures 4 and 5 show the characteristics of the Twitter and Weibo data sets respectively. The figures depict the num-ber of users who have same number of followers or followees. http://www.twitter.com http://www.weibo.com As expected, both data sets have long tails, indicating that a small number of users have large number of followers or followees. For the Weibo data set, we see that more users have around 100 followees instead of 10 primarily because Weibo provide features such as batch following to encourage a user to have more followees. The difference in the num-ber of followees in the two data sets is due to the different policies in Twitter and Weibo. Twitter allows users to have more followees as long as their number of followers increase. On the other hand, Weibo places a limit on the number of followees that a user can have ( &lt; 3000).
Our goal is to recommend top-k users for a target user to follow. For each follower, we randomly choose 10% fol-lowees s/he has followed as testing data, and keep the rest as training data. Our evaluation metrics include conversion rate, NDCG [14], precision, recall and F1 score.

Conversion rate is a commonly used metric in recom-mender systems to determine if a user has obtained at least one good recommendation. If L is the list of recommended k followees and L is the list of k followees actually followed by the user, then the conversion rate is given by:
We compare the conversion rates of the various algorithms by taking the average of values computed for each test user.
Normalized Discounted Cumulative Gain (NDCG) is a widely used metric for a ranked list. NDCG k is defined as: where b i is a binary value, 1 if the item at position i is hit item and 0 otherwise, IDCG k is the maximum NDCG k that corresponds to the optimal ranking list so that perfect NDCG can be 1.
 The standard definitions for precision and recall are:
We also report the F1 score, which is the harmonic mean of precision and recall, defined as:
We first examine how the various parameters affect the performance of our proposed CB -MF method. We fix the number of latent factors L = 16, and vary the threshold  X  and number of communities N .

We measure the F 1scorefor k =3 using the two ways of combining the lists of candidate followees from each com-munity (Equations 7 and 8). Tables 3 and 4 show the re-sults for the Twitter and Weibo data sets respectively. We see that the F 1 scores obtained by summing the weighted scores from the candidate lists ( F 1 sum )ishighercompared to taking the maximum scores ( F 1 max ). Further, a larger value for N improves the performance of CB -MF on the larger Weibo data set.

Based on the results in Tables 3 and 4, we obtain the optimal parameter settings for the rest of the experiments. We use  X  =0 . 02, N = 10 for the Twitter data set, and  X  =0 . 01, N = 15 for the Weibo data set.
Next, we compare the performance of the various user rec-ommendation methods. We set the number of latent factors L = 16 for the matrix factorization based methods ( BPR -MF , IF -MF ). Our CB -MF calls IF -MF for each com-munity with the same L setting.

Figures 6 and 7 show the Conversion Rate, NDCG, Pre-cision and Recall for the Twitter and Weibo data sets re-spectively. From the results in both data sets, it is clear that the matrix factorization based methods ( BPR -MF , IF -MF and CB -MF ) outperform the methods that do not utilize matrix factorization ( TopPop , FoF , LDA -based and NB -based ).

Among the 3 matrix factorization based methods, the pro-posed CB -MF gives the best performance. All the methods perform better of Weibo compared to Twitter in terms of conversion rate. This is mainly because that the density of Weibo data set is higher then Twitter data set. For state-of-the-art matrix factorization approaches IF -MF and BPR -MF , IF -MF performs better than BPR -MF on both data sets. This is because IF -MF can better handle the data set sparsity.

We also observe that FoF outperforms the NB -based al-gorithm. This is because the recommendations given by NB -based for a target user who follows popular users will be similar to the baseline TopPop .The LDA -based method is better than TopPop , Fo F and NB -based mainly because it is able to discover and utilize the hidden characteristics of followees and followers for recommendation.

Overall, our proposed community-based approach improves the conversion rate in Weibo by about 15%, and leads to a significant 30% increase in the conversion rate for Twitter. This is because our approach applies matrix factorization on communities which have lower sparsity compared to the original data set. Figure 8 compares the sparsity of the original data sets and the communities obtained, clearly in-dicating that reducing data sparsity can help improve the effectiveness of user recommendation.
 Comparison of Community Discovery Methods. We also examine the impact of using different community dis-covery methods on the conversion rate. We compare our approach to find communities with the following two meth-ods: 1. LDA -Followee [3]. This is an LDA-based model which 2. MCoC [21]. This is a multi-class co-clustering method
The MCoC code provided by the authors could not scale on the large Weibo data set. For the Twitter data set, we had to further improve the density by filtering out users who have less than 100 followers or followees. The resulting data set has 19305 followers and 16782 followees, and the data set sparsity is improved to 98.62%.

We apply the same matrix factorization approach IF -MF with L = 16 on the communities obtained by the different methods. Figure 9 shows the results on both Twitter and Weibo data sets. We observe that our LDA-based model which utilizes both follower and followee relationship out-performs both LDA -Followee and MCoC , indicating that the communities obtained by our model are able to capture the user influence and interests.
In this last set of experiments, we examine the scalability of the proposed approach. Matrix factorization is computa-tionally expensive, especially when the number of latent fac-tors increases. We advocate that CB -MF canbeanalter-native form of parallelization for matrix factorization. The run time of CB -MF is given by the time needed to discover communities and the maximum time obtained from running IF -MF on each of the community in parallel.
We compare the performance of CB -MF and IF -MF on the larger Weibo data set. Figure 10 shows the run time and the F1 scores as we vary the number of latent factors L from 16 to 128. The results clearly demonstrate the ef-fectiveness of the proposed community-based matrix factor-ization approach and its ability to scale. Although the F1 scores of both methods increase with L , the running time for CB -MF remains reasonably stable while the run time for IF -MF grows significantly.
In this paper, we have investigated using both follower and followee relationships to discover communities to improve user recommendation in uni-directional social networks. We have introduced a two-phase approach where we first utilize the LDA model to discover communities, and then applied matrix factorization on each community found. We carried out extensive experiments to evaluate the performance of our approach on two real world uni-directional social network data sets, Twitter and Weibo. The results indicate that the proposed CB -MF method significantly outperforms state-of-the-art recommender algorithms. We have further shown that the community-based approach is a good alternative form of parallelization for matrix factorization. Future re-search direction includes developing our approach on Map-Reduce framework. [1] M.G. Armentano, D.L. Godoy, and A.A. Amandi. A [2] David M. Blei, Andrew Y. Ng, and Michael I. Jordan. [3] Youngchul Cha and Junghoo Cho. Social-network [4] Jilin Chen, Werner Geyer, Casey Dugan, Michael [5] E. Ferrara. Community structure discovery in [6] J. Freyne, M. Jacovi, I. Guy, and W. Geyer. Increasing [7] Zeno Gantner, Steffen Rendle, Christoph [8] I. Guy, I. Ronen, and E. Wilcox. Do you know?: [9] John Hannon, Mike Bennett, and Barry Smyth.
 [10] M.D. Hoffman, D.M. Blei, and F. Bach. Online [11] Thomas Hofmann. Probabilistic latent semantic [12] W.H. Hsu, A. King, M. Paradesi, T. Pydimarri, and [13] Yifan Hu, Yehuda Koren, and Chris Volinsky.
 [14] K. J  X  arvelin and J. Kek  X  al  X  ainen. Cumulated gain-based [15] Yehuda Koren, Robert Bell, and Chris Volinsky. [16] Haewoon Kwak, Changhyun Lee, Hosung Park, and [17] Steffen Rendle, Christoph Freudenthaler, Zeno [18] Ruslan Salakhutdinov and Andriy Mnih. Bayesian [19] Badrul Sarwar, George Karypis, Joseph Konstan, and [20] KDD Cup X 12 Workshop. [21] B. Xu, J. Bu, C. Chen, and D. Cai. An exploration of [22] Haizheng Zhang, Baojun Qiu, C. Lee Giles, Henry C. [23] Gang Zhao, Mong Li Lee, Wynne Hsu, and Wei Chen.
