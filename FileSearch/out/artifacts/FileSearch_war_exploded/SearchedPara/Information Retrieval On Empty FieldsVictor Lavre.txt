 This study investigates information retrieval on semi-structured information, where documents con-sist of several textual fields that can be queried in-dependently. If documents contained subject and author fields, for example, we would expect to see queries looking for documents about theory of rela-tivity by the author Einstein .

This setting suggests exploring the issue of inex-act match X  X s special theory of relativity relevant? X  that has been explored elsewhere (Cohen, 2000). Our interest is in an extreme case of that problem, where the content of a field is not corrupted or in-correct, but is actually absent. We wish to find rele-vant information in response to a query such as the one above even if a relevant document is completely missing the subject and author fields.

Our research is motivated by the challenges we encountered in working with the National Science the collection is a scientific resource, such as a re-search paper, an educational video, or perhaps an entire website. In addition to its main content, each resource is annotated with metadata , which provides information such as the author or creator of the re-source, its subject area, format (text/image/video) and intended audience  X  in all over 90 distinct fields (though some are very related). Making use of such extensive metadata in a digital library paves the way for constructing highly-focused models of the user X  X  information need. These models have the potential to dramatically improve the user experience in tar-geted applications, such as the NSDL portals. To illustrate this point, suppose that we are running an educational portal targeted at elementary school teachers, and some user requests teaching aids for an introductory class on gravity. An intelligent search system would be able to translate the request into a structured query that might look something like: subject= X  X ravity X  AND audience= X  X rades 1-4 X  AND format= X  X mage,video X  AND rights= X  X ree-for-academic-use X  . Such a query can be efficiently an-swered by a relational database system.

Unfortunately, using a relational engine to query a semi-structured collection similar to NSDL will run into a number of obstacles. The simplest problem is that natural language fields are filled inconsistently: e.g., the audience field contains values such as K-4 , K-6 , second grade , and learner , all of which are clearly semantically related.

A larger problem, and the one we focus on in this study, is that of missing fields. For example 24% of the items in the NSDL collection have no sub-ject field, 30% are missing the author information, and over 96% mention no target audience (reading level). This means that a relational query for ele-mentary school material will consider at most 4% of all potentially relevant resources in the NSDL col-
The goal of our work is to introduce a retrieval model that will be capable of answering complex structured queries over a semi-structured collection with corrupt and missing field values. This study focuses on the latter problem, an extreme version of the former. Our approach is to use a generative model to compute how plausible a word would ap-pear in a record X  X  empty field given the context pro-vided by the other fields in the record.

The remainder of this paper is organized as fol-lows. We survey previous attempts at handling semi-structured data in section 2. Section 3 will provide the details of our approach, starting with a high-level view, then providing a mathematical framework, and concluding with implementation details. Section 4 will present an extensive evaluation of our model on the large set of queries over the NSDL collection. We will summarize our results and suggest direc-tions for future research in Section 5. The issue of missing field values is addressed in a number of recent publications straddling the areas of relational databases and machine learning. In most cases, researchers introduce a statistical model for predicting the value of a missing attribute or relation, based on observed values. Friedman et al (1999) in-troduce a technique called Probabilistic Relational Models (PRM) for automatically learning the struc-ture of dependencies in a relational database. Taskar et al (2001) demonstrate how PRM can be used to predict the category of a given research paper and show that categorization accuracy can be substan-tially improved by leveraging the relational structure of the data. Heckerman et al (2004) introduce the Probabilistic Entity Relationship (PER) model as an extension of PRM that treats relations between enti-ties as objects. Neville at al (2003) discuss predict-ing binary labels in relational data using Relational Probabilistic Trees (RPT). Using this method they successfully predict whether a movie was a box of-fice hit based on other movies that share some of the properties (actors, directors, producers) with the movie in question.

Our work differs from most of these approaches in that we work with free-text fields, whereas database researchers typically deal with closed-vocabulary values, which exhibit neither the synonymy nor the polysemy inherent in natural language expressions. In addition, the goal of our work is different: we aim for accurate ranking of records by their relevance to the user X  X  query, whereas database research has typ-ically focused on predicting the missing value.
Our work is related to a number of existing ap-proaches to semi-structured text search. Desai et al (1987) followed by Macleod (1991) proposed us-ing the standard relational approach to searching unstructured texts. The lack of an explicit rank-ing function in their approaches was partially ad-dressed by Blair (1988). Fuhr (1993) proposed the use of Probabilistic Relational Algebra (PRA) over the weights of individual term matches. Vasan-thukumar et al (1996) developed a relational imple-mentation of the inference network retrieval model. A similar approach was taken by de Vries and Wilschut (1999), who managed to improve the ef-ficiency of the approach. De Fazio et al (1995) in-tegrated IR and RDBMS technology using an ap-proached called cooperative indexing. Cohen (2000) describes WHIRL  X  a language that allows efficient inexact matching of textual fields within SQL state-ments. A number of relevant works are also pub-lished in the proceedings of the INEX workshop. 3
The main difference between these endeavors and our work is that we are explicitly focusing on the cases where parts of the structured data are missing or mis-labeled. In this section we will provide a detailed description of our approach to searching semi-structured data. Before diving into the details of our model, we want to clearly state the challenge we intend to address with our system. 3.1 Task: finding relevant records The aim of our system is to identify a set of records relevant to a structured query provided by the user. We assume the query specifies a set of keywords for each field of interest to the user, for example Q: subject= X  X hysics,gravity X  AND audi-a set of natural-language descriptions for each field. A record is considered relevant if it could plausibly be annotated with the query fields. For example, a record clearly aimed at elementary school students would be considered relevant to Q even if it does not contain  X  X rades 1-4 X  in its description of the target audience. In fact, our experiments will specifically focus on finding relevant records that contain no di-rect match to the specified query fields, explicitly targeting the problem of missing data and inconsis-tent schemata.

This task is not a typical IR task because the fielded structure of the query is a critical aspect of the processing, not one that is largely ignored in fa-vor of pure content based retrieval. On the other hand, the approach used is different from most DB work because cross-field dependencies are a key component of the technique. In addition, the task is unusual for both communities because it consid-ers an unusual case where the fields in the query do not occur at all in the documents being searched. 3.2 Overview of the approach Our approach is based on the idea that plausible val-ues for a given field could be inferred from the con-text provided by the other fields in the record. For instance, a resource titled  X  X ransductive SVMs X  and containing highly technical language in its descrip-tion is unlikely to be aimed at elementary-school stu-dents. In the following section we will describe a statistical model that will allow us to guess the val-ues of un-observed fields. At the intuitive level, the model takes advantage of the fact that records sim-ilar in one respect will often be similar in others. For example, if two resources share the same author and have similar titles, they are likely to be aimed at the same audience. Formally, our model is based on the generative paradigm. We will describe a proba-bilistic process that could be viewed, hypothetically, as the source of every record in our collection. We will assume that the query provided by our user is also a sample from this generative process, albeit a very short one. We will use the observed query fields (e.g. audience and subject ) to estimate the likely val-ues for other fields, which would be plausible in the context of the observed subject and audience. The distributions over plausible values will be called rel-evance models , since they are intended to mimic the kind of record that might be relevant to the observed query. Finally, all records in the database will be ranked by their information-theoretic similarity to these relevance models. 3.3 Definitions We start with a set of definitions that will be used through the remainder of this paper. Let C be a collection of semi-structured records. Each record w consists of a set of fields w 1 . . . w m . Each field w i is a sequence of discrete variables (words) w i, 1 . . . w i,n i , taking values in the field vocabulary V i  X  X h field, we assume n i =0 for that record. A user X  X  query q takes the same representation as a record in the database: q = { q i,j  X  X  i : i =1 ..m, j = 1 ..n i We will use p i to denote a language model over V i , i.e. a set of probabilities p i ( v )  X  [0 , 1] , one for each word v , obeying the constraint  X  v p i ( v ) = 1 . The set of all possible language models over V i will be denoted as the probability simplex IP i . We define  X  : IP 1  X  X  X  X  X  IP m  X  [0 , 1] to be a discrete measure function that assigns a probability mass  X  ( p 1 . . . p m to a set of m language models, one for each of the m fields present in our collection. 3.4 Generative Model We will now present a generative process that will be viewed as a hypothetical source that produced ev-ery record in the collection C . We stress that this process is purely hypothetical; its only purpose is to model the kinds of dependencies that are necessary to achieve effective ranking of records in response to the user X  X  query. We assume that each record w in the database is generated in the following manner: 1. Pick m distributions p 1 . . . p m according to  X  2. For each field i = 1 . . .m : Under this process, the probability of observing a record { w i,j : i =1 ..m, j =1 ..n i } is given by the fol-lowing expression: 3.4.1 A generative measure function
The generative measure function  X  plays a critical part in equation (1): it specifies the likelihood of us-ing different combinations of language models in the process of generating w . We use a non-parametric estimate for  X  , which relies directly on the combi-nations of language models that are observed in the training part of the collection. Each training record w 1 . . . w m corresponds to a unique combination of language models p w equation: Here #( v, w i ) represents the number of times the word v was observed in the i  X  X h field of w , n i is the length of the i  X  X h field, and c v is the rela-tive frequency of v in the entire collection. Meta-parameters  X  i allow us to control the amount of smoothing applied to language models of different fields; their values are set empirically on a held-out portion of the data.
 We define  X  ( p 1 . . . p m ) to have mass 1 its argument p 1 . . . p m corresponds to one of the N records w in the training part C t of our collection, and zero otherwise: Here p w training record w (equation 2), and 1 x is the Boolean indicator function that returns 1 when its predicate x is true and zero when it is false. 3.4.2 Assumptions and limitations of the model
The generative model described in the previous section treats each field in the record as a bag of words with no particular order. This representation is often associated with the assumption of word in-dependence . We would like to stress that our model does not assume word independence, on the con-trary, it allows for strong un-ordered dependencies among the words  X  both within a field, and across different fields within a record. To illustrate this point, suppose we let  X  i  X  0 in equation (2) to re-duce the effects of smoothing. Now consider the probability of observing the word  X  X lementary X  in the audience field together with the word  X  X ifferen-tial X  in the title (equation 1). It is easy to verify that the probability will be non-zero only if some train-ing record w actually contained these words in their respective fields  X  an unlikely event. On the other hand, the probability of  X  X lementary X  and  X  X ifferen-tial X  co-occurring in the same title might be consid-erably higher.

While our model does not assume word indepen-dence, it does ignore the relative ordering of the words in each field. Consequently, the model will fail whenever the order of words, or their proximity within a field carries a semantic meaning. Finally, our generative model does not capture dependencies across different records in the collection, each record is drawn independently according to equation (1). 3.5 Using the model for retrieval In this section we will describe how the generative model described above can be used to find database records relevant to the structured query provided by the user. We are given a structured query q , and a collection of records, partitioned into the training portion C t and the testing portion C e . We will use the training records to estimate a set of relevance Table 1: Summary statistics for the five NSDL fields used in our retrieval experiments. models R 1 . . .R m , intended to reflect the user X  X  in-formation need. We will then rank testing records by their divergence from these relevance models. A rel-evance R i ( v ) specifies how plausible it is that word v would occur in the i  X  X h field of a record, given that the record contains a perfect match to the query fields q 1 . . . q m : We use v  X  q i to denote appending word v to the string q i . Both the numerator and the denomina-tor are computed using equation (1). Once we have computed relevance models R i for each of the m fields, we can rank testing records w 0 by their sim-ilarity to these relevance models. As a similarity measure we use weighted cross-entropy, which is an extension of the ranking formula originally proposed by (Lafferty and Zhai, 2001): The outer summation goes over every field of inter-est, while the inner extends over all the words in the vocabulary of the i  X  X h field. R i are computed accord-ing to equation (4), while p w equation (2). Meta-parameters  X  i allow us to vary the importance of different fields in the final rank-ing; the values are selected on a held-out portion of the data. 4.1 Dataset and queries We tested the performance of our model on a Jan-uary 2005 snapshot of the National Science Digi-tal Library repository. The snapshot contains a to-tal of 656,992 records, spanning 92 distinct (though are present in every record, and half the fields are present in less than 1% of the records. An average record contains only 17 of the 92 fields. Our experi-ments focus on a subset of 5 fields ( title, description, subject, content and audience ). These fields were selected for two reasons: (i) they occur frequently enough to allow a meaningful evaluation and (ii) they seem plausible to be included in a potential query. 7 Of these fields, title represents the title of the resource, description is a very brief abstract, content is a more detailed description (but not the full con-tent) of the resource, subject is a library-like clas-sification of the topic covered by the resource, and audience reflects the target reading level (e.g. ele-mentary school or post-graduate ). Summary statis-tics for these fields are provided in Table 1.
The dataset was randomly split into three sub-sets: the training set, which comprised 50% of the records and was used for estimating the relevance models as described in section 3.5; the held-out set, which comprised 25% of the data and was used to tune the smoothing parameters  X  i and the bandwidth parameters  X  i ; and the evaluation set, which con-tained 25% of the records and was used to evaluate
Our experiments are based on a set of 127 auto-matically generated queries. We randomly split the queries into two groups, 64 for training and 63 for evaluation. The queries were constructed by com-bining two randomly picked subject words with two audience words, and then discarding any combi-nation that had less than 10 exact matches in any of the three subsets of our collection. This proce-dure yields queries such as Q 91 = { subject: X  X rtificial intelligence X  AND audience= X  X esearchers X  } , or Q 101 = { subject: X  X hilosophy X  AND audience= X  X igh school X  } . 4.2 Evaluation paradigm We evaluate our model by its ability to find  X  X ele-vant X  records in the face of missing values. We de-fine a record w to be relevant to the user X  X  query q if every keyword in q is found in the corresponding field of w . For example, in order to be relevant to Q 101 a record must contain the word  X  X hilosophy X  in the subject field and words  X  X igh X  and  X  X chool X  in the audience field. If either of the keywords is missing,
When the testing records are fully observable, achieving perfect retrieval accuracy is trivial: we simply return all records that match all query key-words in the subject and audience fields. As we stated earlier, our main interest concerns the sce-nario when parts of the testing data are missing. We are going to simulate this scenario in a rather ex-treme manner by completely removing the subject and audience fields from all testing records. This means that a straightforward approach  X  matching query fields against record fields  X  will yield no rel-evant results. Our approach will rank testing records by comparing their title, description and content fields against the query-based relevance models, as discussed in section 3.5.

We will use the standard rank-based evaluation metrics: precision and recall . Let N R be the total number of records relevant to a given query, sup-pose that the first K records in our ranking contain N
K relevant ones. Precision at rank K is defined sion is defined as the mean precision over all ranks where relevant items occur. R -precision is defined as precision at rank K = N R . 4.3 Baseline systems Our experiments will compare the ranking perfor-mance of the following retrieval systems: cLM is a cheating version of un-structured text search using a state-of-the-art language-modeling approach (Ponte and Croft, 1998). We disregard the structure, take all query keywords and run them against a concatenation of all fields in the testing records. This is a  X  X heating X  baseline, since the con-catenation includes the audience and subject fields, which are supposed to be missing from the testing records. We use Dirichlet smoothing (Lafferty and Zhai, 2001), with parameters optimized on the train-ing data. This baseline mimics the core search capa-bility currently available on the NSDL website. bLM is a combination of SQL-like structured matching and unstructured search with query ex-pansion. We take all training records that contain an exact match to our query and select 10 highly-weighted words from the title , description , and con-tent fields of these records. We run the resulting 30 words as a language modeling query against the con-catenation of title , description , and content fields in the testing records. This is a non-cheating baseline. bMatch is a structured extension of bLM. As in bLM, we pick training records that contain an ex-act match to the query fields. Then we match 10 highly-weighted title words, against the title field of testing records, do the same for the description and content fields, and merge the three resulting ranked lists. This is a non-cheating baseline that is similar to our model (SRM). The main difference is that this approach uses exact matching to select the training records, whereas SRM leverages a best-match lan-guage modeling algorithm.

SRM is the Structured Relevance Model, as de-scribed in section 3.5. For reasons of both effec-tiveness and efficiency, we firstly run the original query to retrieve top-500 records, then use these records to build SRMs. When calculating the cross entropy(equ. 5), for each field we only include the top-100 words which will appear in that field with the largest probabilities.
 Note that our baselines do not include a standard SQL approach directly on testing records. Such an approach would have perfect performance in a  X  X heating X  scenario with observable subject and au-dience fields, but would not match any records when the fields are removed. 4.4 Experimental results Table 2 shows the performance of our model (SRM) against the three baselines. The model parameters were tuned using the 64 training queries on the train-ing and held-out sets. The results are for the 63 test queries run against the evaluation corpus. (Similar results occur if the 64 training queries are run against the evalution corpus.)
The upper half of Table 2 shows precision at fixed recall levels; the lower half shows precision at different ranks. The %change column shows rel-ative difference between our model and the base-line bLM. The improved column shows the num-ber of queries where SRM exceeded bLM vs. the number of queries where performance was different. For example, 33 / 49 means that SRM out-performed bLM on 33 queries out of 63 , underperformed on 49  X  33=16 queries, and had exactly the same per-formance on 63  X  49=14 queries. Bold figures in-dicate statistically significant differences (according to the sign test with p &lt; 0 . 05 ).

The results show that SRM outperforms three baselines in the high-precision region, beating bLM X  X  mean average precision by 29%. User-oriented metrics, such as R-precision and precision at 10 documents, are improved by 39.4% and 44.3% respectively. The absolute performance figures are also very encouraging. Precision of 28% at rank 10 means that on average almost 3 out of the top 10 records in the ranked list are relevant, despite the re-quested fields not being available to the model.
We note that SRM continues to outperform bLM until very high recall and until the 100-document cutoff. After that, SRM degrades rapidly with re-spect to bLM. We feel the drop in effectiveness is of marginal interest because precision is already well below 10% and few users will be continuing to that depth in the list.

It is encouraging to see that SRM outperforms both cLM, the cheating baseline that takes advantage of the field values that are supposed to be  X  X iss-ing X , and bMatch, suggesting that best-match re-trieval provides a superior strategy for selecting a set of appropriate training records. We have developed and empirically validated a new retrieval model for semi-structured text. The model is based on the idea that missing or corrupted val-ues for one field can be inferred from values in other fields of the record. The cross-field inference makes it possible to find documents in response to a struc-tured query when those query fields do not exist in the relevant documents at all.

We validated the SRM approach on a large archive of the NSDL repository. We developed a large set of structured Boolean queries that had rel-evant documents in the test portion of collection. We then indexed the documents without the fields used in the queries. As a result, using standard field matching approaches, not a single document would be returned in response to the queries X  X n particular, no relevant documents would be found.

We showed that standard information retrieval techniques and structured field matching could be combined to address this problem, but that the SRM approach outperforms them. We note that SRM brought two relevant documents into the top five X  again, querying on missing fields X  X nd achieved an average precision of 23%, a more than 35% im-provement over a state-of-the-art relevance model approach combining the standard field matching.
Our work is continuing by exploring methods for handling fields with incorrect or corrupted val-ues. The challenge becomes more than just inferring what values might be there; it requires combining likely missing values with confidence in the values already present: if an audience field contains  X  X nder-graduate X , it should be unlikely that  X  X -6 X  would be a plausible value, too.

In addition to using SRMs for retrieval, we are currently extending the ideas to provide field valida-tion and suggestions for data entry and validation: the same ideas used to find documents with miss-ing field values can also be used to suggest potential values for a field and to identify values that seem inappropriate. We have also begun explorations to-ward using inferred values to help a user browse when starting from some structured information X  e.g., given values for two fields, what values are probable for other fields.
 Acknowledgments This work was supported in part by the Center for Intelligent Information Retrieval and in part by the Defense Advanced Research Projects Agency (DARPA) under contract number HR0011-06-C-0023. Any opinions, findings and conclusions or recommendations expressed in this material are the authors X  and do not necessarily reflect those of the sponsor.

