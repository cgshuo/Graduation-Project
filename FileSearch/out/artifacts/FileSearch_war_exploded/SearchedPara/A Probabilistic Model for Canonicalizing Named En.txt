 Proper handling of mentions in text of real-world entities X  X dentifying and resolving them X  X s a cen-tral part of many NLP applications. We seek an al-gorithm that infers a set of real-world entities from mentions in a text, mapping each entity mention to-ken to an entity, and discovers general categories of words used in names (e.g., titles and last names). Here, we use a probabilistic model to infer a struc-tured representation of canonical forms of entity at-tributes through transductive learning from named entity mentions with a small number of seeds (see Table 1). The input is a collection of mentions found by a named entity recognizer, along with their con-texts, and, following Eisenstein et al. (2011), the output is a table in which entities are rows (the num-ber of which is not pre-specified) and attribute words are organized into columns.

This paper contributes a model that builds on the approach of Eisenstein et al. (2011), but also:  X  incorporates context of the mention to help with disambiguation and to allow mentions that do not share words to be merged liberally;  X  conditions against shape features, which improve the assignment of words to columns;  X  is designed to explicitly handle some noise; and  X  is learned using elements of Bayesian inference with conditional estimation (see  X  2).

We experiment with variations of our model, comparing it to a baseline clustering method and the model of Eisenstein et al. (2011), on two datasets, demonstrating improved performance over both at recovering a gold standard table. In a political blogs dataset, the mentions refer to political fig-ures in the United States (e.g., Mrs. Obama and Michelle Obama ). As a result, the model discov-ers parts of names X   X  Mrs. , Michelle , Obama  X   X  while simultaneously performing coreference res-olution for named entity mentions. In the sports news dataset, the model is provided with named en-tity mentions of heterogenous types, and success here consists of identifying the correct team for ev-ery player (e.g., Kobe Bryant and Los Angeles Lak-ers ). In this scenario, given a few seed examples, the model begins to identify simple relations among named entities (in addition to discovering attribute structures), since attributes are expressed as named entities across multiple mentions. We believe this adaptability is important, as the salience of different kinds of names and their usages vary considerably across domains.
 We begin by assuming as input a set of mention to-kens, each one or more words. In our experiments these are obtained by running a named entity recog-nizer. The output is a table in which rows are un-derstood to correspond to entities (types, not men-tion tokens) and columns are fields, each associated with an attribute or a part of it. Our approach is based on a probabilistic graphical model that gener-ates the mentions, which are observed, and the table, which is mostly unobserved, similar to Eisenstein et al. (2011). Our learning procedure is a hybrid of Bayesian inference and conditional estimation. The generative story, depicted in Figure 1, is:  X 
For each column j  X  X  1 ,...,C } :  X  Draw a multinomial distribution  X   X  Generate table entries. For each row i (of which  X  Draw weights  X   X 
Generate the distribution over entities to be men-tioned in general text:  X   X  GEM(  X  ) ( X  X tick-breaking X  distribution).  X 
Generate context distributions. For each row r :  X  Draw a multinomial over the context vocabu- X 
For each mention token m :  X  Draw an entity/row r  X   X  .  X  For each word in the mention w , given some of  X  Generate mention context. For each of the T =
Our choices of prior distributions reflect our be-liefs about the shapes of the various distributions. We expect field lexicons  X  j and the distributions over mentioned entities  X  to be  X  X ipfian X  and so use tools from nonparametric statistics to model them. We expect column-feature weights  X  to be mostly zero, so a sparsity-inducing Laplace prior is used (Tibshirani, 1996).

Our goal is to maximize the conditional likeli-hood of most of the evidence (mentions, contexts, and seeds), p ( w,s,  X  x |  X  ,  X  , X , X , X ,, f ) = with respect to  X  and  X  . We fix  X  (see  X  3.3 for the values of  X  for each dataset),  X  = 2 (equivalent to add-one smoothing),  X  = 2  X  10  X  8 , = 10  X  10 , and each mention word X  X  f . Fixing  X  ,  X  , and  X  is essentially just  X  X eing Bayesian, X  or fixing a hyper-parameter based on prior beliefs. Fixing f is quite different; it is conditioning our model on some ob-servable features of the data, in this case word shape features. We do this to avoid integrating over fea-ture vector values. These choices highlight that the design of a probabilistic model can draw from both Bayesian and discriminative tools. Observing some of x as seeds (  X  x ) renders this approach transductive.
Exact inference in this model is intractable, so we resort to an approximate inference technique based on Markov Chain Monte Carlo simulation. The opti-mization of  X  can be described as  X  X ontrastive X  esti-mation (Smith and Eisner, 2005), in which some as-pects of the data are conditioned against for compu-tational convenience. The optimization of  X  can be described as  X  X mpirical Bayesian X  estimation (Mor-ris, 1983) in which the parameters of a prior are fit to data. Our overall learning procedure is a Monte Carlo Expectation Maximization algorithm (Wei and Tanner, 1990). Our learning procedure is an iterative algorithm con-sisting of two steps. In the E-step, we perform col-lapsed Gibbs sampling to obtain distributions over row and column indices for every mention, given the current value of the hyperparamaters. In the M-step, we obtain estimates for the hyperparameters, given the current posterior distributions. 3.1 E-step For the m th mention, we sample row index r , then for each word w m` , we sample column index c . 3.1.1 Sampling Rows
Similar to Eisenstein et al. (2011), when we sam-ple the row for a mention, we use Bayes X  rule and marginalize the columns. We further incorporate context information and a notion of noise. p ( r We consider each quantity in turn.
 Prior. The probability of drawing a row index fol-lows a stick breaking distribution. This allows us to have an unbounded number of rows and let the model infer the optimal value from data. A standard marginalization of  X  gives us: p ( r where N is the number of mentions, N r is the num-ber of mentions assigned to row r , and N  X  m r is the number of mentions assigned to row r , excluding m . Mention likelihood. In order to compute the likeli-hood of observing mentions in the dataset, we have to consider a few cases. If a cell in a table has al-ready generated a word, it can only generate that word. This hard constraint was a key factor in the inference algorithm of Eisenstein et al. (2011); we speculate that softening it may reduce MCMC mix-ing time, so introduce a notion of noise. With proba-bility = 10  X  10 , the cell can generate any word. If a cell has not generated any word, its probability still depends on other elements of the table. With base distribution G 0 , 1 and marginalizing  X  , we have: p ( w where N  X  m` c is the number of cells in column c that are not empty and N  X  m` cw is the number of cells in column c that are set to the word w m` ; both counts excluding the current word under consideration. Context likelihood. It is important to be able to use context information to determine which row a mention should go into. As a novel extension, our model also uses surrounding words of a men-tion as its  X  X ontext X  X  X imilar context words can en-courage two mentions that do not share any words to be merged. We choose a Dirichlet-multinomial distribution for our context distribution. For every row in the table, we have a multinomial distribution over context vocabulary  X  r from a Dirichlet prior  X  . Therefore, the probability of observing the t th con-text word for mention m is p ( s mt | r m = r, X  ) where N  X  mt r is the number of context words of men-tions assigned to row r , N  X  mt rs is the number of con-text words of mentions assigned to row r that are s mt , both excluding the current context word, and ranges over the context vocabulary of size V . 3.1.2 Sampling Columns
Our column sampling procedure is novel to this work and substantially differs from that of Eisen-stein et al. (2011). First, we note that when we sam-ple column indices for each word in a mention, the row index for the mention r has already been sam-pled. Also, our model has interdependencies among column indices of a mention. 2 Standard Gibbs sam-pling procedure breaks down these dependencies. For faster mixing, we experiment with first-order dependencies between columns when sampling col-umn indices. This idea was suggested by Eisenstein et al. (2011, footnote 1) as a way to learn structure in name conventions. We suppressed this aspect of the model in Figure 1 for clarity.

We sample the column index c 1 for the first word in the mention, marginalizing out probabilities of other words in the mention. After we sample the column index for the first word, we sample the col-umn index c 2 for the second word, fixing the pre-vious word to be in column c 1 , and marginalizing out probabilities of c 3 ,...,c L as before. We repeat the above procedure until we reach the last word in the mention. In practice, this can be done effi-ciently using backward probabilities computed via dynamic programming. This kind of blocked Gibbs sampling was proposed by Jensen et al. (1995) and used in NLP by Mochihashi et al. (2009). We have: p ( c where `  X  is the preceding word and c  X  is its sam-pled index, ` + is the following word and c + is its possible index, and p b (  X  ) are backward probabilities. Alternatively, we can perform standard Gibbs sam-pling and drop the dependencies between columns, which makes the model rely more heavily on the fea-tures. For completeness, we detail the computations. Featurized log linear distribution. Our model can use arbitrary features to choose a column index. These features are incorporated as a log-linear dis-The list of features used in our experiments is: 1 { w is the first word in the mention } ; 1 { w ends with a period } ; 1 { w is the last word in the men-tion } ; 1 { w is a Roman numeral } ; 1 { w starts with an upper-case letter } ; 1 { w is an Arabic number } 1 { w  X  { mr , mrs , ms , miss , dr , mdm } } ; 1 { w con-tains  X  1 punctuation symbol } ; 1 { w  X  { jr , sr }} ; 1 { w  X  { is , in , of , for }} ; 1 { w is a person entity 1 { w is an organization entity } .
 Forward and backward probabilities. Since we introduce first-order dependencies between columns, we have forward and backward probabili-ties, as in HMMs. However, we always sample from left to right, so we do not need to marginalize ran-dom variables to the left of the current variable be-cause their values are already sampled. Our transi-tion probabilities are as follows: sitions from column c  X  to c , excluding mention m . The forward and backward equations are simple (we omit them for space).
 Mention likelihood. Mention likelihood p ( w m` | x,r sample the row index (Eq. 1). 3.2 M-step In the M-step, we use gradient-based optimization routines, L-BFGS (Liu and Nocedal, 1989) and OWL-QN (Andrew and Gao, 2007) respectively, to maximize with respect to  X  and  X  . 3.3 Implementation Details We ran Gibbs sampling for 500 iterations, 3 discard-ing the first 200 for burn-in and averaging counts over every 10th sample to reduce autocorrelation.
For each word in a mention w , we introduced 12 binary features f for our featurized log-linear distri-bution (  X  3.1.2).

We then downcased all words in mentions for the purpose of defining the table and the mention words w . Ten context words (5 each to the left and right) define s for each mention token.

For non-convex optimization problems like ours, initialization is important. To guide the model to reach a good local optimum without many restarts, we manually initialized feature weights and put a prior on transition probabilities to reflect phenom-ena observed in the initial seeds. The initializer was constructed once and not tuned across experiments. 4 The M-step was performed every 50 Gibbs sampling iterations. After inference, we filled each cell with the word that occurred at least 80% of the time in the averaged counts for the cell, if such a word existed. We compare several variations of our model to Eisenstein et al. (2011) (the authors provided their implementation to us) and a clustering baseline. 4.1 Datasets We collected named entity mentions from two cor-pora: political blogs and sports news. The political blogs corpus is a collection of blog posts about poli-tics in the United States (Eisenstein and Xing, 2010), and the sports news corpus contains news summaries of major league sports games (National Basketball Association, National Football League, and Major League Baseball) in 2009. Due to the large size of the corpora, we uniformly sampled a subset of doc-uments for each corpus and ran the Stanford NER tagger (Finkel et al., 2005), which tagged named en-tities mentions as person , location , and organization . We used named entity of type person from the po-litical blogs corpus, while we are interested in per-son and organization entities for the sports news cor-pus. Mentions that appear less than five times are discarded. Table 2 summarizes statistics for both datasets of named entity mentions.
 Reference tables. We use Eisenstein et al. X  X  man-ually built 125-entity (282 vocabulary items) refer-ence table for the politics dataset. Each entity in the table is represented by the set of all tokens that app-pear in its references, and the tokens are placed in its correct column. For the sports data, we obtained a roster of all NBA, NFL, and MLB players in 2009. We built our sports reference table using the play-ers X  names, teams and locations, to get 3,642 play-ers and 15,932 vocabulary items. The gold standard table for the politics dataset is incomplete, whereas it is complete for the sports dataset.
 Seeds. Table 1 shows the seeds for both datasets. 4.2 Evaluation Scores We propose both a row evaluation to determine how well a model disambiguates entities and merges mentions of the same entity and a column evaluation to measure how well the model relates words used in different mentions. Both scores are new for this task.
The first step in evaluation is to find a maximum score bipartite matching between rows in the re-sponse and reference table. 5 Given the response and reference tables, x res and x ref , we can compute:
S
S where i and j denote rows, Match ( i,j ) is one if i and j are matched to each other in the optimal matching or zero otherwise. S res is a precision-like score, and S ref is a recall-like score. 6 Column evaluation is the same, but compares columns instead. 4.3 Baselines Our simple baseline is an agglomerative clustering algorithm that clusters mentions into entities using the single-linkage criterion. Initially, each unique mention forms its own cluster that we incremen-tally merge together to form rows in the table. This method requires a similarity score between two clus-ters. For the politics dataset, we follow Eisenstein et al. (2011) and use the string edit distance between mention strings in each cluster to define the score. For the sports dataset, since mentions contain per-son and organization named entity types, our score for clustering uses the Jaccard distance between con-text words of the mentions. However, such cluster-ings do not produce columns. Therefore, we first match words in mentions of type person against a regular expression to recognize entity attributes from a fixed set of titles and suffixes, and the first, middle and last names. We treat words in mentions of type organization as a single attribute. 7 As we merge clusters together, we arrange words such that all words within a column belong to the same at-tribute, creating columns as necessary to accomo-date multiple similar attributes as a result of merg-ing. We can evaluate the tables produced by each step of the clustering to obtain the entire sequence of response-reference scores.

As a strong baseline, we also compare our ap-proach with the original implementation of the model of Eisenstein et al. (2011), denoted by EEA. 4.4 Results For both the politics and sports dataset, we run the procedure in  X  3.3 three times and report the results. Politics. The results for the politics dataset are shown in Figure 2. Our model consistently outper-formed both baselines. We also analyze how much each of our four main extensions (shape features, context information, noise, and first-order column dependencies) to EEA contributes to overall per-formance by ablating each in turn (also shown in Fig. 2). The best-performing complete model has 415 rows, of which 113 were matched to the ref-erence table. Shape features are useful: remov-ing them was detrimental, and they work even bet-ter without column dependencies. Indeed, the best model did not have column dependencies. Remov-ing context features had a strong negative effect, though perhaps this could be overcome with a more carefully tuned initializer.

In row evaluation, the baseline system can achieve a high reference score by creating one entity row per unique string, but as it merges strings, the clusters encompass more word tokens, improving response score at the expense of reference score. With fewer clusters, there are fewer entities in the response ta-ble for matching and the response score suffers. Al-though we use the same seed table in both exper-iments, the results from EEA are below the base-line curve because it has the additional complexity of inferring the number of columns from data. Our model is simpler in this regard since it assumes that the number of columns is known ( C = 6 ). In col-umn evaluation, our method without column depen-dencies was best.
 Sports. The results for the sports dataset are shown in Figure 3. Our best-performing complete model X  X  response table contains 599 rows, of which 561 were matched to the reference table. In row eval-response score response score 0 0.05 0.1 0.15 0.2 0.25 uation, our model lies above the baseline response-reference score curve, demonstrating its ability to correctly identify and combine player mentions with their team names. Similar to the previous dataset, our model is also substantially better in column eval-uation, indicating that it mapped mention words into a coherent set of five columns. 4.5 Discussion The two datasets illustrate that our model adapts to somewhat different tasks, depending on its input. Furthermore, fixing C (unlike EEA) does appear to have benefits.

In the politics dataset, most of the mentions con-tain information about people. Therefore, besides canonicalizing named entities, the model also re-solves within-document and cross-document coref-erence, since it assigned a row index for every men-tion. For example, our model learned that most men-tions of John McCain , Sen. John McCain , Sen. Mc-Cain , and Mr. McCain refer to the same entity. Ta-ble 3 shows a few noteworthy entities from our com-plete model X  X  output table.

The first entity is an easy example since it only had to complete information provided in the seed ta-ble. The model found the correct gender-specific ti-tle for Barack Obama , Mr. . The rest of the examples were fully inferred from the data. The model was es-sentially correct for the second, third, and fourth en-tities. The last row illustrates a partially erroneous example, in which the model confused the middle name of John McCain , possibly because of a com-bination of a strong prior to reuse this row and the introduction of a notion of noise.

In the sports dataset, persons and organizations are mentioned. Recall that success here consists of identifying the correct team for every player. The EEA model is not designed for this and performed poorly. Our model can do better, since it makes use of context information and features, and it can put a person and an organization in one row even though they do not share common words. Table 4 shows a few noteworthy entities from our complete model X  X  output.
 Surprisingly, the model failed to infer that Derek Jeter plays for New York Yankees , although men-tions of the organization New York Yankees can be found in our dataset. This is because the model did not see enough evidence to put them in the same row. However, it successfully inferred the missing infor-mation for Ben Roethlisberger . The next two rows show cases where our model successfully matched players with their teams and put each word token to its respective column. The most frequent error, by far, is illustrated in the fifth row, where a player is matched with a wrong team. Kevin Garnett plays for the Boston Celtics , not the Los Angeles Lakers . It shows that in some cases context information is not adequate, and a possible improvement might be ob-tained by providing more context to the model. The sixth row is interesting because Dave Toub is indeed affiliated with the Chicago Bears . However, when the model saw a mention token The Bears , it did not have any other columns to put the word token The , and decided to put it in the fourth column although it is not a location. If we added more columns, deter-miners could become another attribute of the entities that might go into one of these new columns. There has been work that attempts to fill predefined templates using Bayesian nonparametrics (Haghighi and Klein, 2010) and automatically learns template structures using agglomerative clustering (Cham-bers and Jurafsky, 2011). Charniak (2001) and El-sner et al. (2009) focused specifically on names and discovering their structure, which is a part of the problem we consider here. More similar to our work, Eisenstein et al. (2011) introduced a non-parametric Bayesian approach to extract structured databases of entities. A fundamental difference of our approach from any of the previous work is it maximizes conditional likelihood and thus allows beneficial incorporation of arbitrary features.
Our model is focused on the problem of canoni-calizing mention strings into their parts, though its r variables (which map mentions to rows) could be in-terpreted as (within-document and cross-document) coreference resolution, which has been tackled us-ing a range of probabilistic models (Li et al., 2004; Haghighi and Klein, 2007; Poon and Domingos, 2008; Singh et al., 2011). We have not evaluated it as such, believing that further work should be done to integrate appropriate linguistic cues before such an application. We presented an improved probabilistic model for canonicalizing named entities into a table. We showed that the model adapts to different tasks de-pending on its input and seeds, and that it improves over state-of-the-art performance on two corpora.
