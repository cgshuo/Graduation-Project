 A commonly used method of computing shortest distances is landmark embed-ding technique which is first proposed by [1] based on the triangle inequality. Furthermore, [2] presents a scalable sketch-based index structure by a sketch-based framework [3] deriving from approximate distance oracles [4], which not only supports estimation of shortest distances, but also computes corresponding SP s. However, this method can X  X  be applied to weighted graphs.

Besides, when considering a weighted graph, one could repeatedly apply a static algorithm which takes almost hours to compute all SPs in an entire dy-namic graph. Therefore, some researchers have studied dynamic algorithms to minimize re-computation time of SP s. [5] proposes algorithms to solve the single-source SP problem when only one edge changes. The noted contributions are [6] and [7], which processes multiple changes once. They shorten the computation time and improve accuracy in weighted gr aph, however, they answer queries of arbitrary node pairs with low efficiency.
 We introduce two improvements based on landmark estimation methods. Firstly, we designed a new landmark embedding technology, that is, constructing weighted SPTs(Shortest Path Tree) an d RSPTs(Reversed Shortest Path Tree) by rooting at each graph node and ending at all reachable landmarks, so SPT and RSPT can be updated in smaller range concurrently. The other improvement relates to extending existing dynamic SP algorithm MBallString and DynDijk-stra for graph partitions, so that we can compute the SP of arbitrary pair of nodes by connecting common landmarks.

In this paper, we call the series of operations pre-computation, including land-marks selection, the construction of SPT and RSPT for each non-landmark node, as they can be calculated beforeha nd. Steps of updating SPT and RSPT and concatenating trees are referred as real-time computation. The rest of this paper is organized as follows. Section 2 presents our improved algorithms for handling 4 modifications. Meanwhile, SP s would be obtained by concatenating common landmarks. Section 3 displays experimental results. Finally, we draw a conclusion in Section 5. The structure of a graph changes in four ways, edge insertion and deletion, weight increase and decrease. Gen erally, edge insertion can be processed as weight de-crease by reducing it from  X  to the given value. Likewise, edge deletion is han-dled as weight increase by assigning it to  X  . As a result, the modifications on a graph can be simplified to weight update. In Section 2.1, we introduce some fundamental instructions and concepts used in DASP . In Section 2.2 and 2.3, algorithms DASPInc and DASPDec are presented. Finally, section 2.4 depicts the overall algorithm of approximating SP in a dynamic graph. 2.1 Basic Operations Q is a priority queue. Q supports 3 operations. ENQUEUE ( Q, ver,data,key ) adds an item of ver to Q in ascending order of key . EXTRACTMIN ( Q )ex-tracted an item with the minimum key and removes it from Q . REMOV E ( Q, ver ) removes the item labeled ver from Q .Wedenote v in T s as a locally -affected node if sp ( v ) changes. A locally-affected and unfinished node is said to be boundary if it has either at least one locally-affected but finished parent or one not-locally-affected parent. 2.2 DASP Incremental Updates Algorithm DASPInc obtains T s (updated trees) by processing locally-affected nodes in T s (original trees). Stage 1: Apply the set of edge weight changes to G , remove modified tree edges from T s , and locate all locally-affected nodes. Stage 2: Enqueue boundary nodes with candidate distances. Stage 3: Consolidate and relax locally-affected nodes one by one. 2.3 DASP Decremental Updates As the set of locally-affected node s can X  X  be predicted, algorithm DASPDec starts from the first affected-node, then traverse all reachable nodes of them until no shorter distances are examined. Stage 1: Apply weight changes to G , and enqueue first affected-nodes. Stage 2: Dequeue and update current node X  X  descendants. Stage 3: Consolidate and relax locally-affected nodes one by one. 2.4 Tree Concatenations At last, we can estimate the shortest distance from s to t by connecting s  X  X  SPT and t  X  X  RSPT with common landmarks. The overall algorithm is presented in Algorithm 1.
 3.1 Experimental Setup The experiments are conducted on a server with Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz processors, 264G of RAM. Algorithms are implemented in C. 3.2 Datasets Pokec Social Network is the most popular on-line social network in Slovakia. A fraction named Pokec SN is used as a dataset, which has 6,998 nodes and 83,403 edges. Following Gaussian distribution, we add weights to graph edges to indicate users X  intimacy.
 California Road Network is road network of California. We randomly select a subset named as RN-Subset which has 10,000 nodes and 30,703 edges, and weigh each connected node pair in the subnet according to Poisson distribution. So the weights represent traffic conditions.
 3.3 Results In this section, we compare the efficiency of Dijkstra , BallString , DynDijkstra , MFP and DASP , between all pairs of nodes from the aspects of pie and pde , which are short for percentage of weight increased edges, percentage of weight decreased edges. We select 2% of graph n odes as landmarks to strike a better balance between high accuracy and high e fficiency. All of the experimental re-sults prove that DASP is the optimal algorithm to handle dynamic networks with directed and weighted edges, besides, DASP performs steady regardless of the various values of pie and pde .
 In this paper, we present a dynamic al gorithm with high efficiency to answer approximate SP s between arbitrary node pairs on a directed and weighted graph. Although the graph size is not large enough in our experiment, our algorithm can a prototype for further researches.

