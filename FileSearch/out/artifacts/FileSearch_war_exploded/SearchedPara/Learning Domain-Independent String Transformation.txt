
The task of object identification occurs when integrating in-formation from multiple websites. The same data objects can exist in inconsistent text formats across sites, making it difficult to identify matching objects using exact text match. Previous methods of object identification have re-quired manual construction of domain-specific string trans-formations or manual setting of general transformation pa-rameter weights for recognizing format inconsistencies. This manual process can be time consuming and error-prone. We have developed an object identification system called Active 
Atlas [18], which applies a set of domain-independent string transformations to compare the objects' shared attributes in order to identify matching objects. In this paper, we dis-cuss extensions to the Active Atlas system, which allow it to learn to tailor the weights of a set of general transformations to a specific application domain through limited user input. 
The experimental results demonstrate that this approach achieves higher accuracy and requires less user involvement than previous methods across various application domains. 
Information mediators [19], such as SIMS [2] and Ari-adne [11], integrate information from multiple information sources on the web. One problem that can arise when in-tegrating information is that data objects can exist in in-consistent text formats across several sources. An example application of information integration involves integrating all the reviews of restaurants from the Zagat's Restaurants website with the current restaurant health ratings from the 
Department of Health's website. To integrate these sources requires comparing the objects from both sources and iden-tifying which restaurants are the same. 
Examples of the object identification problem are shown in Figure 1. In the first example the restaurant referred to permission and/or a fee. SIGKDD '02 July 23-26, 2002, Edmonton, Alberta, Canada 
Copyright 2002 ACM 1-58113-567-X/02/0007 ...$5.00. both the Name and the Street attributes ("Art's Deli") or on both the Name and Phone attributes ( "Les Celebrites" ). 
This type of critical attribute information is captured in the form of object identification rules (mapping rules), then used to determine the mappings between the objects. We have developed an object identification system called 
Active Atlas [18], which applies a set of general string trans-formations in order to propose possible mappings between the objects and then employs an active learning technique that learns the necessary mapping rules to classify the map-pings with high accuracy. Previously, Active Atlas, as many other object identification systems [15~ 20, 14], required that the transformation weights be set manually before the map-ping process began. 
The focus of this paper is to describe work extending Ac-tive Atlas to learn to weight transformations for a specific application domain. In order to increase mapping accuracy, it is important to accurately weight transformations, be-cause some transformations can be more appropriate for a specific application domain than others. The transformation weights measure the likelihood that a given transformation, like "Equality" or "Acronym," participates in a correct map-ping between two objects. 
It is expensive, in terms of the user's time, to manually encode this type of knowledge for an object identification system. Also, due to errors that can occur in the data, a user may not be able to provide comprehensive information to classify the data with high accuracy without thoroughly reviewing all data. Yet, in our view the user must play a limited but important role in object mapping because the mapping assignment may depend on the specific application. 
If the application is altered then the mapping assignment may change as well, even though the sets of data are the same. 
Since the data itself may not be enough to decide the mappings between the sets of objects, the user's knowledge about object similarity is needed to increase the accuracy of the total mapping assignment. We have adopted a general domain-independent approach for incorporating the user's knowledge. Active Atlas achieves high accuracy object iden-tification by simultaneously learning to tailor both the trans-formation weights and mapping rules to a specific applica-tion domain through limited user input. The main goal of this research is to achieve the highest possible accuracy in object identification with minimal user interaction. 
In this paper we provide descriptions of all stages and components of Active Atlas in order to show how transfor-mation weight learning has been integrated into the object identification process. Learning the transformation weights and mapping rules for a specific domain is a circular prob-lem, where the accuracy of the mapping rules depends on the accuracy of the transformation weights and vice-versa. 
This process has two stages as shown in Figure 2, applying the transformations to calculate initial similarity scores and then learning the mapping rules and transformation weights to properly map the objects between the sources. 
In the first stage the candidate generator is used to pro-pose the set of possible mappings between the two sets of objects by applying the transformations to compare the at-tribute values. Initially, it is unknown which transforma-tions are more appropriate for a specific domain, so all trans-how both learning the transformation weights and mapping rules are integrated together in the mapping learner. Section 4 presents the experimental results of the system. Section 5 discusses related work, and section 6 concludes with a dis-cussion and future work. 
The candidate generator uses a set of domain-independent transformations to judge the similarity between two objects, so that only the most similar candidate mappings between the sources are generated. The main function of the can-didate generator is to produce an initial set of quality can-didate mappings. The candidate generator keeps a record of the set of transformations that were applied for each mapping, which is essential for learning the transformation weights, and also calculates a set of similarity scores, neces-sary for learning the mapping rules. 
When comparing objects, the alignment of the attributes is determined by the user. The values for each attribute are compared individually (e.g. Name with Name, Street with Street, and Phone with Phone). Comparing the attributes individually is important in reducing the confu-sion that can arise when comparing the objects as a whole. 
Words can overlap between the attribute values. Comparing the attributes individually saves computation and also de-creases mapping error by reducing the number of candidate mappings considered. 
Given the two sets of objects, the candidate generator is responsible for generating the set of candidate mappings by comparing the attribute values of the objects. The output of this component is a set of attribute similarity scores for each candidate mapping. A candidate mapping has a com-puted similarity score for each attribute pair (Figure 3). The process for computing these scores is described later in this section. [ Zagat's I~Deli 12224 Ventnta Boulevard i 818~756-4124 I IDept of Healthl] Art's Delicatessen 12224 Ventura Blvd. 818/755-41(~ Figure 3: Set of Computed Similarity Scores 
Figure 3 displays example attribute similarity scores for the candidate mapping of the objects "Art's Deli" and "Art's Delicatessen." The similarity scores for the Name and 
Street attribute values are relatively high. This is because the text values are similar and the text formatting differ-ences between them can be resolved. The Phone attribute score is low because the two phone numbers only have the same area code in common, and since the dataset contains many restaurants in the same city as "Art's Deli," the area code occurs frequently. 
There are two basic types of the transformations. Unary transformations require only a single token as input in order to compute its transformation. N-sty transformations com-pare tokens from two objects. Included in this framework is a set of general domain independent transformations to re-solve the different text formats used by the objects. These the number of user-labeled examples required for learning high accuracy mapping rules. 
The mapping-rule learner consists of a committee of de-cision tree learners. Each decision tree learner creates its own set of mapping rules from training examples labeled by the user. The mapping rules classify an example as mapped or not mapped. These classifications are used by the trans-formation weight learner for increasing the accuracy of the transformation weights, and are also needed for deciding which training examples should be labeled. 
Mapping rules contain information about which combina-tion of attributes are important for determining the map-ping between two objects, as well as, the thresholds on the similarity scores for each attribute. Several mapping rules may be necessary to properly classify the objects for a spe-cific domain application. Examples of mapping rules for the restaurant domain are: 
To efficiently learn the mapping rules for a particular task or domain, we use a supervised learning technique, which uses a combination of several decision tree learners based on an active learning algorithm called query by bagging [1]. 
This technique generates a committee of decision tree learn-ers that vote on the most informative example or candidate mapping for the user to classify next. A single decision tree learner on its own can learn the necessary mapping rules to properly classify the data with high accuracy, but may require a large number of user-labeled examples. 
With a committee of decision tree learners, the classifi-cation of an example or candidate mapping by one decision each example collected by the candidate generator. With this input the transformation weight learner first calculates the transformation weights for each transformation and then uses these new probability scores to recalculate the attribute similarity scores for each example. Once all of the attribute similarity scores are calculated for every attribute, the ex-amples are then ranked according to their total object sim-ilarity scores. takes into consideration classifications of both user-labeled and unlabeled examples. The transformation weights mea-sure the likelihood that a given transformation, like "Equal-ity" or "Acronym," participates in a correct mapping be-tween two objects. are appropriate for the application domain, the initial at-tribute similarity scores determined by the candidate gener-ator do not accurately represent the true similarity between all of the objects. Therefore, due to the inaccuracy of the initial attribute similarity scores, there is some error in the mapping rules and the classifications of the examples by the mapping-rule learner. While there are some misclassifica-tions of the unlabeled data, they still help to increase the accuracy of the transformation weights. Using an active learning approach reduces the number of user-labeled data, so there are sparse number of labeled examples to learn the correct transformation weights from. formations known from the labeled examples. Yet, because there are misclassifications on the unlabeled examples they should not have the same impact on the computation of the transformation weights as the labeled examples, as discussed in previous work on combining labeled and unlabeled exam-pies [16]. In order for the labeled examples to have greater importance than the unlabeled ones, the population of the labeled examples is increased by adding o~ duplicates of each of the labeled examples to the set of training data. tion weights can be tailored to the application domain. The likelihood that if the transformation tf is applied between two objects that those objects will be classified as mapped r6 can be estimated using the following formula: mations detailed in section 2, i.e. Equality, Acronym, etc. 
Therefore, the instantiated transformations, like (Equality "Art" "Art") and (Equality "s" "s"), of the general transfor-mation Equality will have the same transformation weight, and the classifications of mappings which use these instan-tiated transformations will contribute to the calculation of the transformation weight of the general transformation, i.e. 
Equality. Once all of the transformation weights have been calculated then the attributes similarity scores are com-puted. didate mapping, first the product of the probabilities of the which did not perform transformation weight learning and required the transformation weights be set manually prior to the mapping process. 
For the restaurant domain, the shared object attributes are Name, Street, and Phone. Many of the data objects in this domain match almost exactly on all attributes, but there are types of examples that do not, as shown in Fig-ure 1. Because of these four types of examples, the system learns two mapping rules: if the restaurants match highly on the Name &amp; Street or on the Name &amp; Phone attributes then the objects should be mapped together. These two mapping rules are used to classify all of the candidate map-pings. Any candidate mapping that fulfills the conditions of these rules, will be mapped. Because in our application we are looking for the correct health rating of a specific restau-rant, examples matching only on the Name attribute, like the "Teresa's" example, or only on the Street or Phone at-tribute, like "Steakhonse The" are not considered mapped. 
In this domain the Zagat's website has 331 objects and the Dept of Health has 533 objects. There are 112 cor-rect mappings between the two sites. When running the 
IR system experiment, the system returns a ranked set of all the candidate mappings. The user must scan the map.-pings and decide on the mapping threshold or cutoff point in the returned ranked list. Every candidate mapping above the threshold is classified as mapped and every candidate mapping below the threshold is not mapped. The optimal mapping threshold has the highest accuracy. Accuracy is measured as the total number of correct classifications of the candidate mappings divided by the sum of the total num-ber of candidate mappings and the number of true object mappings not proposed. This method is comparable to the Whirl system [5]. 
For the IR system experiment the optimal mapping thresh-old is at rank 111 in the list, and therefore, the top 111 ex-amples in the list are considered mapped together. At this optimal threshold, only 109 examples of the 111 are correct mappings, 3 true examples have been missed and 2 false examples have been included; therefore, 5 examples in to-tal are incorrectly classified. In this domain application, a threshold can not be chosen to achieve perfect accuracy. In general, selecting the optimal threshold to obtain the highest possible accuracy is an unsolved problem. Also, even though this approach computationally less intensive, it can poten-tially require more user involvement because a user must view a positive mapping for it to be considered mapped. 
The accuracy results from the four types of experiments are shown in relation to the number of examples that were labeled. For the two learning systems the results have been averaged over 10 runs, and the learners classified 3310 can-didate mappings proposed by the candidate generator. Fig-is a substring of the weather code for the Code attribute. 
It, therefore, only uses the Location attribute to match ob-jects, so it makes mistakes, like mapping the "KIGC" and "CHS" objects. There are 18 object mappings that were not proposed by the candidate generator because it did not have the necessary transformations. 
Like the other domains, Figure 11 shows that learning the mapping rules increases the accuracy of the mapping assignment. Active Atlas with transformation weight learn-ing achieves 100% accuracy at 294 examples, and Passive 
Atlas achieves higher accuracy than the IR system results after only 80 examples. These results are also a significant .! Figure 11: Airport/Weather Domain Experimental 
Results 
Previous work on object identification has either employed manual methods to customize rules or transformations for gether. These systems generally require heavy user interac-tion in order to achieve high accuracy mapping. None of the previous work apply general domain-independent transfor-matious that are then adjusted to fit the specific application 
In the database community the problem of object identi-
There are also approaches [15, 17] that use a single very 
