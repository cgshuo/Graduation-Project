 languages are expressivity, clarity and parsimony [ 1 ]. The represent; the second to how easy it is for the language users to unambiguously for a problem at hand. There is now a long tradition in conceptual modeling of using Reference Theories to evaluate and (re) design conceptual modeling languages constructs that have been analyzed and re-designed following this strategy include level classi fi cation .
 In several subject domains, the categorization scheme itself is part of the subject accounts. For instance, to describe the conceptualization underlying the software development domain, one needs to represent entities of different (but nonetheless related) classi fi cation levels, such as tasks (i.e., speci fi cation levels come from domains such as biological taxonomy [ 4 ] and product types classi fi cation levels has given rise to what has been referred to as multi-level modeling between those types. The interest in multi-level modeling has led to a number of research initiatives in this subject (e.g. [ 5  X  9 ]).
 In this paper, we address an early and important approach for multi-level modeling which the instances of a type (the so-called  X  powertype  X  want to express that the instances of the powertype Bird Species are types that spe-Emperor Penguin . The powertype pattern is extensively used in many important relevance of this pattern has led to its adoption in the current version of the Uni Modeling Language (UML) [ 12 ], which allows modelers to specify a powertype in the context of a  X  generalization set  X  .
 Despite its intuitive characterization, there are many important and subtle aspects of the relation between the  X  powertype  X  and  X  base type Do we mean that only subtypes of Bird are instances of Bird Species? Both? Moreover, that mean, for example, that all instances of Bird must be instances of at least one of more than one instance of Bird Species? Both? In order to explore the semantic issues involving the powertype pattern, we employ here a multi-level modeling theory called MLT, which we have proposed originally in [ 13 ]. MLT is a formal axiomatic theory founded on the notion of (ontological) instantiation and is able to: (i) clarify and position con de fi ning new structural relations for variants of the powertype pattern. So far, we have MLT to analyze the UML support for modeling the powertype pattern. engineering. Moreover, it is the basis for ontology-driven conceptual modeling lan-we believe that providing precise and unambiguous semantics and advancing the UML support for modeling powertypes amounts to an important contribution for conceptual modeling, in general, and for ontology-driven conceptual modeling and ontology engineering, in particular.
 employing the results of this analysis, we propose a UML pro exposed limitations. We use the distinctions put forth by MLT to devise this pro we use the formal rules inherent to MLT to guide the development of the pro syntactic constraints.
 MLT multi-level theory; Sect. 3 discusses UML  X  s current support for powertypes, revealing its limitations in light of MLT; Sect. 4 presents our proposal to extend a fragment of UML re fl ecting the rules of MLT; Sect. 5 discusses related work and Sect. 6 presents concluding remarks. (individuals and types). According to MLT, types are predicative entities that can In order to accommodate these varieties of types, the notion of type order is used. Types having individuals as instances are called fi rst -order types , types whose instances are fi rst-order types are second -order types and so on. considered individuals: an entity is an instance of  X  Individual possible instance (Axiom A1 in Table 1 ). The constant  X  First-Order Type  X  1stOT  X  ) characterizes the type that applies to all entities whose instances are extension contains exclusively instances of  X  1stOT  X  is an instance of Type  X  (or shortly  X  2ndOT  X  ) (A3 in Table 1 ).
 It follows from axioms A1, A2 and A3 that  X  Individual  X  is instance of which, in turn, is instance of  X  2ndOT  X  . We call  X  Individual the basic types of MLT. According to MLT, every possible entity must be instance of exactly one of its basic types (except the topmost type) (A4 in Table 1 ). For our can be extended to consider as many orders as necessary [ 13 ]. Some structural relations to support conceptual modeling are de instances of t  X  (see de fi nition D1 in Table 1 ). Since the re relation may be undesired in some contexts, we de fi ne in MLT the proper special-ization relation as follows : t proper specializes t  X  iff t specializes t from t  X  (see D2 in Table 1 ). The de fi nitions presented thus far guarantee that both specializations and proper specializations may only hold between types of the same order.
 From the axioms and de fi nitions presented so far one can conclude that every type cializes the basic type at the immediately lower level (respectively,  X  Since  X  Person  X  applies to individuals, it is an instance of  X  cializes  X  Individual  X  . Further, consider a type named  X  instances are specializations of  X  Person  X  (thus, instances of persons according to their age (e.g.  X  Child  X  and  X  Adult instance of  X  2ndOT  X  and proper specializes  X  1stOT  X  .
 MLT also de fi nes relations that occur between types of adjacent orders, the notions of powertype in the literature.
 One prominent notion of powertype was proposed by Cardelli [ 9 ]. According to elements are all the subtypes of A (including A)  X  [ 9 ]. Based on this notion, MLT de fi nes a powertype relation between a higher-order type and a base type at a lower order as follows: a type t is powertype of a base type t  X  a type called  X  Person Type  X  such that all possible specializations of instances of it and, conversely, all its instances specialize  X 
Person Type  X  is the powertype of  X  Person  X  . Since  X  Person  X 
Person Type  X  is instance of  X  2ndOT  X  and specializes  X  1stOT from the de fi nition of powertype that  X  1stOT  X  is powertype of notion of powertype to the basic types of MLT. de fi ned powertype simply as a type whose instances are subtypes of another type (the between types of adjacent levels: a type t characterizes a type t (Cardelli  X  s) is powertype of , there may be specializations of the base type t instances of t. For example, we may de fi ne a type named  X 
Employee  X  and  X  Client  X  ) that characterizes  X  Person  X   X 
Person  X  since there are specializations of  X  Person  X  that are not instances of Role  X  (e.g.  X  Child  X  and  X  Adult  X  ).
 zation, which are useful to capture further constraints in multi-level models. We consider that a type t completely characterizes t  X  iff t characterizes t terizes a fi rst-order type. To capture this notion MLT de Thus, t partitions t  X  iff each instance of the base type t instance of t (D7). For example, we may consider a second-order type Phase  X  (with instances  X  Child  X  ,  X  Adult  X  and  X  Elderly A complete formalization of MLT in fi rst-order logic can be found in [ 13 ]. According to the UML 2.4.1 speci fi cation [ 12 ] each generalization set contains a particular set of generalizations that collectively describe the way a speci includes in its  X  powertypes  X  package a meta-association that relates a classi relation between the powertype and the generalization set is represented in the UML a colon. For example, in Fig. 1 three specializations of  X   X 
Elm  X  ,  X  Apricot  X  and  X  Saguaro  X  . The text  X  :Tree Species  X  subtypes enumerated in the generalization set are instances of  X 
Tree Species  X  is the  X  powertype  X  of the generalization set. Note that the term  X  powertype  X  as used in UML does not correspond to the notion of proposed by Cardelli. (This issue is discussed in Sect. 4 .) The means that the subtypes have no instances in common while the straint means that there are instances of  X  Tree  X  that are not instances of  X 
Apricot  X  and  X  Saguaro  X  . The relation between the powertype (e.g. special syntax and semantics.
 A key observation is that for a classi fi er to be considered a would be no generalization set). We consider this undesirable as it rules out simple models such as one de fi ning  X  Tree Species  X  as a  X  powertype forcing the modeler to de fi ne speci fi c instances for  X  Furthermore, the only syntactic constraint de fi ned in UML concerning powertypes is that  X  the classi fi er that maps to a generalization set may neither be a speci general classi fi er in any of the generalization relationships de by generalization with types of any other levels.
 The application of MLT to revise the powertype support in UML leads to the for-mulation of modeling recommendations to ensure: (i) a precise interpretation for the UML constructs used to express the powertype pattern, (ii) a comprehensive support syntactic rules to prevent the construction of inconsistent models. basetype are the instances of the  X  powertype  X  (excluding the basetype itself). other domain relations that do not have an instantiation semantics. An association Fig. 2 an association stereotyped  X  instantiation  X  having Species  X  as target type is used to represent that instances of instances of  X  Tree Species  X  and, conversely, that instances of instances of  X  Tree  X  as instances. Therefore, in MLT terms, it denotes that would have been required in the case of plain UML.
 characterization.
 Table 2 summarizes the suggested interpretation in terms of MLT, considering tion end. The combinations of multiplicities of the  X  instantiation values of the related generalization set attributes create additional challenges for following subsections, in which we expose some semantic issues. Lower and upper bound multiplicities set to one. When both the lower and the the base type. For example, according to Fig. 2  X  Tree Species each instance of  X  Tree  X  is instance of exactly one instance of represents that: (i) every instance of  X  Person  X  must be either an instance of instance of  X  Woman  X  and that (ii)  X  Man  X  and  X  Woman  X  instances of  X  Person Gender  X  .
 At a fi rst super fi cial inspection, one could consider that the case because the  X  complete  X  constraint represents whether all instances of the Thus, a combination of an  X  instantiation  X  association having both lower and upper and would mean that there are instances of the higher-order type that are not enu-merated in the generalization set. For example, Fig. 3 (b) represents that: (i) each instance of  X  Tree  X  is instance of exactly one instance of the  X  instantiation  X  association), (ii)  X  Elm  X  ,  X  Apricot  X 
Tree Species  X  (see the generalization set name), (iii) there are instances of are not instances of  X  Elm  X  ,  X  Apricot  X  nor  X  Saguaro  X  constraint). Given the semantics of the  X  instantiation  X  of  X  Tree Species  X  that are not represented in the diagram.
 means that each instance of the base type is instance of at most one instance of the set is inconsistent, and thus, deemed syntactically invalid.
 Lower bound multiplicity set to zero and upper bound set to one. does not completely characterize (in MLT sense) the source type. For example, sup-pose that an organization de fi nes a type of roles called showing  X  Organization President  X  and  X  Department Dean  X   X 
Management Role  X  . The interpretation of the combination of an association having zero as the lower bound and one as the upper bound multiplicity so far. In order to analyze this combination, we should fi instances of  X  Employee  X  which are not instances of any instance of Role  X  (as a consequence of the semantics of the  X  instantiation (ii) there are instances of  X  Employee  X  which are neither  X 
Department Dean  X  (as a consequence of the semantics of incomplete generalization sets). The model is still silent with respect to whether all instances of agement roles not mentioned in the model (e.g.  X  Division Head an an overlapping generalization set is also deemed syntactically invalid. Lower bound multiplicity set to one and upper bound set to many. tiation  X  association having the lower multiplicity set to one and the upper bound that the rules of an organization de fi ne a type of roles called instances as  X  Programmer  X  ,  X  DB Designer  X  and  X  Sw Designer employee must play one or more roles of such type.
 Associations stereotyped  X  instantiation  X  with  X  one  X  as lower bound multiplicity and  X  many  X  as upper bound multiplicity can be combined with any generalization sets despite they are complete or incomplete, disjoint or overlapping . However, the gen-Fig. 4 (b) the generalization set is complete and disjoint meaning each instance of  X 
Employee  X  plays exactly one of the represented instances of Therefore, since the multiplicities of the  X  instantiation Role  X  and  X  Employee  X  denotes that the instances of the former are overlapping, we conclude that there are non-represented instances of  X  Business Role represented ones. If the generalization set of Fig. 4 (b) were de could infer that there were non-represented instances of  X  whole set of instances of  X  Business Role  X  classi fi es all instances of Fig. 4 (b) were de fi ned complete and overlapping we would have two possible inter-are non-represented instances of  X  Business Role  X  but the represented ones already classify all instances of  X  Employee  X  having overlaps between them. Lower bound multiplicity set to zero and upper bound set to many. tiation  X  association having the lower multiplicity set to zero and the upper bound the source type, however it is neither a complete characterization nor a disjoint of more than one instance of the higher-order type and there may be instances of the Fig. 5 (a) consider a second-order type named  X  Social Role roles that instances of  X  Person  X  may play in social relations, such as  X 
Employee  X  and  X  Husband  X  . Some instances of  X  Person  X   X  Social Role  X  and some other instances may play no social role. that there were non-represented instances of  X  Social Role the whole set of instances of  X  Social Role  X  does not classify all instances of  X  enumerated or not; or (iv) invalid if the combination is syntactically invalid. The  X  powerType  X  stereotype. Our second recommendation is to use the  X  specialize  X  Person  X  are instances of  X  Person Type  X  .
 higher-order type. Thus, in these cases, the lower bound multiplicity of the ation  X  association must be set to one and the upper bound to many (*). Moreover, models in which the  X  powerType  X  stereotype is applied to types (classi not target of any  X  instantiation  X  association are deemed syntactically invalid.  X  powerType  X  (i.e. powertype relations do not give rise to generalization sets). For  X  :Person Type  X  is not admissible. However, all subtypes of generalization sets in which they are involved, are instances of all instances of  X  Person Gender  X  and  X  Social Role  X  are instances of Syntactic constraints motivated by MLT rules. An important aspect of the proposed interpretation is that it allows us to leverage the axioms and theorems of the MLT than one powertype and a higher order type may be a powertype of at most one other type. This suggests a clear syntactic constraint: a class stereotyped typed  X  powerType  X  . Further, the MLT theorem stating that if a type t specializes a type t  X  then the powertype of t specializes the powertype of t  X  may be used to check the syntax of powertype hierarchies, and to generate the powertypes hierarchy corre-facts that: (i)  X  Employee  X  specializes  X  Person  X  , (ii)  X 
Person  X  and (iii)  X  Employee Type  X  is powertype of  X  Employee  X  Employee Type  X  must specialize  X  Person Type  X  .
 Considering the MLT de fi nitions of powertype , characterization and proper spe-cialization we conclude that if a type t  X  is powertype of a type t and a type t acterizes the same base type t then all instances of t  X  X  t  X  X  in Fig. 6 (a)  X  Management Role  X  characterizes  X  Employee Type  X  , whereas  X  Person Gender  X  characterizes  X  Person  X  and specializes Type  X  higher-order types, it would be possible to infer them automatically. Another MLT theorem states that if two types t  X  and t  X  X  constraint. For example, in Fig. 6 (b),  X  Person Age Phase instances.  X  Person Gender  X  , in turn, partitions  X  Person may not include a specialization between  X  Person Age Phase Recall that the MLT cross-level relations ( characterization and is powertype of ) hold between a higher-order type and another type at one order lower. Thus, if two ation end is at an order lower than the one in the target (e.g. in Fig. 6 (b) order lower than  X  Person Age Phase  X  ). Hence, cycles of associations stereotyped  X  instantiation  X  are not allowed. For example, suppose A is the target in an ation  X  association in which B is the source while B is the target in another  X  instantiation  X  association in which A is the source. This scenario is absurd since than A.
 cross-level relations with other types. Thus, we can determine the order of a type that are not targets of any  X  instantiation  X  association are  X  types (e.g.  X  Person Gender  X  and  X  Person Age Phase  X  in Fig. 6 (b)), and so on. The MLT axiom that states that each domain type must be instance of exactly one MLT basic type (being thus at only one order) can be syntactically veri Further, the MLT theorem that specialization relations may only hold between two types at the same order may also be syntactically veri fi there may not be specialization relations between a fi rst-order type (i.e.,  X 
Man  X  ,  X  Woman  X  ,  X  Adult  X  or  X  Child  X  ) and a second-order type (i.e. or  X  Person Age Phase  X  ). Otherwise, the model would be considered syntactically github.com/nemo-ufes/MLT-VP-plugin . An early attempt to address multi-level modeling by Odell [ 8 ]de powertype informally using regular associations between the powertype and a base type. This differs from our approach because we use constructs having specialized semantics to denote the cross-level relations between types de the axioms in the formal theory.
 tion labeled  X  partitions  X  between a powertype and a base type (called a which  X  partitions  X  is modeled as a many-to-one association between  X 
TaskKind  X  , meaning that every instance of the partitioned type (  X  partitions association possesses instantiation semantics  X   X 
Task  X  is a special instance of  X  TaskKind  X  (the most generic kind of task). However, if  X 
Task  X  itself is an instance of  X  TaskKind  X  , then the lower bound multiplicity of the  X  partitions  X  association in the  X  TaskKind  X  end cannot be one . This is because all instances of subtypes of  X  Task  X  are also instances of  X  which could be avoided with a richer language support for the powertype pattern and its variants, as we propose here.
 The concept of powertype is founded on the notion that  X  instances of types can also be types  X  [ 8 ]. Motivated by a similar observation, Atkinson and K notion of clabject , which is valuable to our approach. They discuss that every our approach, instances of higher-order types may be considered clabjects . For instance, considering the previous example all instances of instances of  X  TaskPowertype  X  have their own instances being, thus, clabjects . Atkinson and K  X  hne have also proposed a deep instantiation based approach [ 6 ], [ 18 ] as a means to provide for multiple levels of classi some level can describe features of elements at each level beneath that level. The de fi ne mobile phone models, such as  X  IPhone6  X  and  X  GalaxyS6 of  X  Mobile Phone  X  from the domain model. Important consequences of omitting base types are that the modeler become unable to express whether the instances of a higher-order type (mobile phone model in this example) are disjoint and/or covering of the base type (mobile phone in this case). It is worth noticing that the deep instantiation approach allows the modeler to represent the base type if it is deemed desirable. However, if the modeler decides to represent the base type, the approach tions. As a consequence, the approach does not provide mechanisms to check if the higher-order type (  X  Mobile Phone Model  X  ) specialize the base type ( Telos [ 19 ] is a knowledge representation language that supports the representation of types having other types as instances (i.e. clabjects ). Roughly 30 axioms are de to formalize Telos  X  principles for instantiation, specialization, object naming and its features of user-de fi ned constraints and rules to formally de structural relations proposed in MLT. In this paper, we have addressed multi-level modeling from the perspective of the powertype pattern . We have used a well-founded reference theory to support the propose a UML extension to address the exposed limitations. We use the formal rules of MLT to systematically incorporate syntactic constraints in the pro the modeler to produce sound multi-level models. Our approach is able to distinguish in UML and that are required to represent multi-level classi dational Ontology (UFO). Based on this analysis, a UML extension for the purposes of conceptual modeling (dubbed OntoUML) has been proposed. The ontology was used UFO axioms. In this paper, we have applied a similar approach to extend UML class diagrams using MLT as a theory to incorporate distinctions and constraints for multi-level modeling. In [ 15 ], we have already combined MLT and UFO in order to leverage both bene fi ts of the foundational ontology and the multi-level modeling powertype pattern as discussed here. Finally, we aim at applying MLT to analyze and enrich the semantics of the so-called deep modeling approaches [ 5 , 18 ].
