 Automatic discovery of patterns in unaligned biological sequences is an important problem in molecular biology. For a set of proteins that share a common function or structure, it is often that only a few of common residues are conserved among them significant [4]. Functional motifs are not necessarily found in only one region of the protein sequence. Instead, the conserved residues usually appear as clusters (it is called a motif block in this paper), and multiple clusters may simultaneously contribute to an important substructure [13]. Limited insertions and deletions are admitted within a motif block, and large insertions and deletions may happen between motif blocks during evolution. 
Protein families can often be characterized by one or more such patterns, which each consist of one or more motif blocks [12, 18, 21, 22]. Many computational approaches have been introduced for the problem of motif identification [1, 2, 3, 6, 8, 11, 16, 17]. These approaches can be categorized based on the type of the motifs they discover, statistical or deterministic. In this paper, we focus on the problem of discovering deterministic patterns like some other web services, Pratt [6] and Teiresias [17]. A deterministic pattern can be matched or not matched by a sequence. In the mining process, a pattern is found if it matches more than a user-specified percentage of the input sequence set. This is the so-called minimum support constraint. 
A sequential pattern is called sparse if a large number of wildcards exist between pattern components, and is treated as flexible , contrary to fixed, if different sequences match the same pattern with different sizes of gaps, where a gap is defined as a set of one or more successive wildcards. Discovering sparse and flexible patterns is a time-consuming task due to the large search space of solutions. So many related studies employ constraints to expedite the mining process [6, 14, 17, 20], among which the gap constraint is widely used to restrict the length of a fixed gap within some maximum and minimum values specified by the users. Jonassen et al . in 1995 first introduced the constraint of gap flexibility in Pratt program that allows limited variable spacing between pattern components [7]. Gaps of irregular lengths are important in biological patterns because va riable sizes of loops can occur even in well-conserved regions. Setting flexibility as 2 satisfies most short patterns existing in protein sequences [7]. 
However, longer patterns consisting of several sequential blocks can be discovered only when a larger flexibility is allowed. According to our performance analysis on Pratt program, version 2.1 [6], we observed that the program consumes unreasonably result is because the branching factor of Pr att used in constructing the pattern tree is exponentially in proportion to the flexibility constraint. Pratt uses some other constraints, such as flexibility product, to narrow down the search space and to decrease the number of potential patterns generated. However, this largely reduces the solution space, and consequently longer patterns cannot be discovered. 
Another common problem of current mining algorithms is a huge amount of memory is required for constructing a pattern tree and the associated data structures during mining process. Table 1 also shows the memory usage of Pratt v2.1 versus the flexibility constraint. This situation is getting even worse when lower support constraint is requested. Nevertheless, low supports are desired during mining process because some highly specific signatures are usually conserved in few members of a protein family. 
This work presents the algorithm MAGIIC that aims to discover flexible long patterns from a set of unaligned biological sequences. We propose using combination of intra-and inter-block gap constraints to find patterns with large irregular gaps, provided that the derived patterns are still compact in local regions. The idea is motivated by the observation that highly conserved regions of biological sequences are usually separated by a set of large gaps with irregular lengths. The smaller flexible intra-block gap constraint is used to relax the local motif blocks but still keep them compact, and the larger inter-block gap constraint is proposed to allow longer gaps to exist between compact motif blocks. Using two types of gap constraints for different purposes largely improves the efficiency of the mining process. In this section, the problem of mining conserved sequential blocks with flexible intra-and inter-block gaps is defined. We first give the definition of a sequence. Definition 1 (Sequence). A sequence over an alphabet  X  is a finite sequence of components from sequence  X  . We use  X  [ i .. j ] to denote the substring (contiguous subsequence) of  X  , which starts at position i and ends at position j of  X  , for 1  X  i  X  j  X  the suffix of sequence  X  that begins at position i . The number of components in  X  is If we segment a sequence into one or more blocks, it can be expressed as a blocked sequence. Blocks belonging to the same sequence are called sequential blocks. Definition 2 (Blocked sequence). A sequence  X  =  X   X  1 ...  X  m  X  can be segmented into We next define what intra-and inter-block gaps are.  X  =  X  B sequence  X  as a pattern, then  X  serves as an instance of  X  . The interval between any interval between any two adjacent components within a block of  X  on the instance  X  MAGIIC employs different constraints for intra-and inter-block gaps respectively. called gap constraints, which stand for the low and up bounds of an intra-block gap and the low and up bounds of an inter-bl ock gap, respectively. Given a blocked MAGIIC also employs some other basic constraints associated with pattern mining, including the support and size constraints. The parameter names are given in Table 2. Definition 5 (Support and size constraints). The support of a blocked sequence  X  in a sequence database D under the gap constraints  X  and the size constraints (  X  min ,  X  max , n min , n max ) is defined as the number of distinct input sequences 1  X  i  X  r . The pattern  X  is frequent (conserved) in sequence database D if its support is Finally we give the problem statement as follows. Problem Statement. Given a sequence database D and the parameter set  X  listed in Table 2, the algorithm will find the complete set of conserved blocked sequences (patterns) existing in the sequence database D under the constraints in  X  . The derived patterns are expressed in the PROSITE language [5]. The notation x( a , b ), a &lt; b , is used for a size-bounded gap with minimum length of a and maximum length of b , and x( a ) stands for a gap with a fixed length of a . The wildcard x( a ) is omitted if a = 0, and is written as x if a = 1, i.e. x = x(1). This paper proposes a novel algorithm called MAGIIC, which is designed based on the PrefixSpan algorithm proposed by Pei et. al. in 2004 [15]. The contribution of MAGIIC comes from two parts. First, MAGIIC develops a new procedure called bounded -prefix -growth based on the prefix -growth procedure of the PrefixSpan algorithm. In order to identify patterns with large flexible gaps in biological data, the bounded -prefix -growth procedure incorporates intra-and inter-block gap constraints to speed up the mining process. Second, MAGIIC employs a newly designed projected database, called complete projected database, to guarantee that all the patterns satisfying the user-specified gap constraints will be found. In this section, we first briefly describe the PrefixSpan algorithm. After that, the concept of a complete projected database will be defined and how the intra-and inter-block gap constraints affect the scanning process of bounded -prefix -growth will be introduced. 
PrefixSpan algorithm presents as a promising and efficient approach for many applications of sequential pattern discovery by avoiding generating a large amount of pattern candidates, and it consumes a relatively stable and small amount of memory space by using the pseudo projecting technique that records only the sequence identifiers and the associated event identifiers instead of constructing a physical projected database. The prefix -growth procedure of PrefixSpan employs a divided-and-conquer mechanism for pattern growing, which recursively reduces the size of the sequence database by generating the projected database of the current sequential pattern and then grows the sequential pattern in one particular projected database by exploring the local frequent components. Fig.1 provides an example of a projected database with respect to a pattern  X  CG  X  . Fig.1(a) shows the original database D . The projected database addressed by the PrefixSpan algorithm does not record complete information regarding gaps between sequence components, because PrefixSpan doe s not consider gap constraints in its mining process. As the example shown in Fig.1(b), the  X  CG  X   X  X  projected database only keeps the longest substring of each sequence in D whose prefix matches the pattern  X  CG  X  . This information is not sufficient when gaps are considered in the pattern mining process. Thus as shown in Fig.1(c), a complete projected database collects all the substrings in database D with a prefix of pattern  X  CG  X  that satisfies the gap constraints. We next give the definition of a complete projected database. Definition 6 (Complete projected database). Let  X  be a blocked sequence, and  X  be a set of gap constraints. The  X   X  X  complete projected database constructed from collection of sequences, each of which is the suffix of a sequence  X   X  D and has a We next describe how the bounded -prefix -growth procedure scans a complete projected database. The proposed procedure is called bounded -prefix -growth because its scanning range in the projected database is restricted by the gap constraints. In Fig.2, the dotted arrows represent the original scanning range of a projected database in PrefixSpan algorithm and the solid arrows show the scanning range of the bounded-prefix-growth procedure under the intra-block gap constraints (  X  min = 1,  X  max = 2). The scanning range of a complete projected database under gap constraints  X  is much smaller. Most of the times, only the ranges under the intra-block gap constraints are considered when looking for the next frequent component. Only when the size of the currently growing block (the right most block) of the pattern satisfies the minimum block size constraint, larger scanning range with respect to the inter-block constraints will also be considered during the mining process. 
The arguments of bounded -prefix -growth include a pattern as a blocked sequence  X  and its complete projected database D |(  X  )  X  . This procedure takes the blocked pattern  X  as input and tries to extend it und er the user-specified constraints  X  . In each component is bounded by the intra-and inter-block gap constraints. A component is conserved (frequent) if its occurrences in the projected database D |(  X  )  X  satisfy the minimum support threshold. Each frequent component is appended to the current blocked sequence one at a time, and the resulted new blocked sequence (  X  X  ) is used as the argument for the next call of bounded -prefix -growth , accompanied with a smaller projected database D |(  X  X  )  X  . Adding one more component to the current blocked pattern thus reduces the size of the complete projected database. The performance of MAGIIC is compared with two well known packages on this problem, Teiresias [17] and Pratt v2.1 [6]. All the experiments provided here were conducted on a machine with a 3GHz Intel Pentium CPU and memory of 2GBs, running Linux Server. Regarding the parameter setting of MAGIIC, the users can set the following three constraints as a large number as long as the consuming time is acceptable on their machines. In this paper, we set both the maximum size of a motif block (  X  max ) and the maximum size of a pattern ( n max ) as 100, and change the up bound of an inter-block gap (  X  max ) incrementally during mining process because this parameter affects the performance of MAGIIC significantly. Furthermore, in order to reduce the confusion of setting the other parameters, we set the low bound of an inter-block gap (  X  min ) just one larger than the up bound of an intra-block gap (  X  max ). Since only limited insertions and deletions within motif blocks are allowed during evolution, we set the low/up bound of an intra-block gap (  X  min /  X  max ) as 0/2. This paper employs two well annotated data sets to demonstrate the capability of MAGIIC algorithm in identifying conserved structural motifs. The first input set collects 50 proteins of the InterPro family IPR006660, Arsenate reductase and related, (one fragment has been removed) from Swiss-Prot (http://www.expasy.org/sprot/) (version 48.1). With the support constraint set as 70%, the minimum size of a motif block as 4, and the up bound of an inter-block gap constraint as 100, MAGIIC found one pattern with 38 supporting sequences, as shown in Table 3(a), denoted as pattern (1). In fact, this pattern can be found as l ong as the user-specified constraints are more relaxed than the above settings. It can be observed in Fig. 4(a) that the two motif blocks of pattern (1) are clustered together when the protein is folded, and they are really closed to the ligands bound together with this protein. This shows that the derived motif reveals its structural and functional meanings. It has been reported in [9] that the cysteine in the first block is important in binding one of the sulfate anion (SO4). We will show in the following that it is not found by other mining programs. 
Table 3(a) also provides the best pattern found by Teiresias and Pratt v2.1, labeled as pattern (i)-(iii), which are derived by using reasonable parameter settings regarding capture the signature of the substructure with respect to the ligands bound with this protein. The main problem of Teiresias is only fixed gaps are considered. Even Pratt considers the flexibility of gaps, allowing large flexibility on every gap enlarges the search space and increases the executing time rapidly, which forces the users to give up searching for a pattern with a large gap like x(72,75). On the other hand, both Teiresias and Pratt v2.1 can handle equivalence to extend the length of the patterns, identify the structural motif associated wi th the functional site. Table 3(b) provides the executing time and memory usage of each algorithm. It is always the case that lowering support constraint enlarges the search space and thus consumes more computing time and space. Incorporating two gap constraints also makes MAGIIC more efficient than the other two packages in finding some highly specific signatures which are conserved in few members of a protein family. 
The second training data was retrieved from Swiss-Prot database (release 48.1) by querying the keywords IPR001305, PF00684, and PS00637, which are associated with the CXXCXGXG domain signature of DnaJ proteins. The keywords are the entry IDs of InterPro (release 11.0), Pfam (version 18.0) and PROSITE (release 19.11) databases, respectively. We randomly select 100 proteins from the retrieved 272 sequences (totally we have 275 sequences, but three short fragments have been excluded.) And later we will show that the other 172 proteins can be completely found by using the pattern derived by MAGIIC. 
With the support constraint set as 70%, the minimum size of a motif block as 4, and the up bound of an inter-block gap constraint as 20, MAGIIC found a pattern with 72 supporting sequences, denoted as pattern (1) in Table 4(a). This pattern contains four repeats of the motif block {C-x(2)-C-x-G-x-G}, which is recognized as the DnaJ central cysteine-rich (CR) domain. The DnaJ CR domain consists of two zinc centers, each of which is composed of four conserved cysteines [10]. We can see in Fig. 5(a) that each pair of the blocks in pattern (1) forms a zinc binding site, where the first and fourth blocks contribute to the first one and the second and third blocks contribute to the second one. It has been studied in [19] that the second binding site is more important than the first one. By increasing the support constraint as 100% and relaxing the minimum size of a motif block as 3, MAGIIC found another pattern, listed in Table 4(a) as pattern (2), which contains only three motif blocks. We observed that some DnaJ proteins lost the first block of the CR domain during evolution and some other third blocks are more important to the function of DnaJ proteins. 
The pattern of the entry PS00637 in PROSITE is provided in Table 4(a), denoted isolated cysteine-rich domain, same as the best patterns found by Pratt v2.1 and Teiresias, also provided in Table 4(a). The selectivity of the derived patterns is evaluated by employing the ScanProsite (http://www.expasy.org/tools/scanprosite/) web service to scan protein sequences in Swiss-Prot database (release 48.1). The results are shown in Table 4(b). The precision rate is defined as TP / (TP + FP) and the recall rate as TP/ (TP + FN), where TP is short for true positives, FP for false positives, and FN for false negatives. It can be observed that the patterns found by Teiresias are not as good as MAGIIC or Pratt, and the pattern (ii) found by Pratt is specific enough to recognize the DnaJ proteins. However, pattern (2) still does not correctly capture the structural motif of the cysteine-rich domain. Also, Pratt v2.1 consumes much more resources than MAGIIC and Teiresias, as shown in Table 4(c). Functional motifs composed of several sequential blocks are difficult to find. Current mining technologies might individually find each motif block but fail to connect them with large irregular gaps. On the other hand, allowing large flexible gaps might derive patterns with the conserved residues largely scattered. MAGIIC employs intra-and inter-block gap constraints to discover clusters of conserved residues present in protein sequences. The efficiency of MAGI IC remains even when the constraints are relaxed. This is important because setting lower support constrains or larger gap flexibilities helps to identify the signature of protein functional sites. The spatial information of the sequential motifs also helps to detect critical substructures of proteins that share similar functions. Thus , how to incorporate MAGIIC in the study of protein binding or protein-protein interaction deserves further study. 
