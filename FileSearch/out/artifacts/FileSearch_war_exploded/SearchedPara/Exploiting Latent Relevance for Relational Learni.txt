 With recent advances in radio-freque ncy identification (RFID), wire-less sensor networks, and Web services, physical things are becom-ing an integral part of the emerging ubiquitous Web. While this in-tegration offers many exciting opportunities such as efficient sup-ply chains and improved environmental monitoring, it also presents many significant challenges. One such challenge lies in how to classify, discover, and manage ubiquitous things, which is criti-cal for efficient and effective object search, recommendation, and composition. In this paper, we focus on automatically classifying ubiquitous things into manageable semantic category labels by ex-ploiting the information hidden in interactions between users and ubiquitous things. We develop a novel approach to extract latent relevances by building a relational network of ubiquitous things (RNUbiT) where similar things are linked via virtual edges accord-ing to their latent relevances. A discriminative learning algorithm is also developed to automatically determine category labels for ubiq-uitous things. We conducted experiments using real-world data and the experimental results demonstrate the feasibility and validity of our proposed approach.
 H.3.5 [ Information Storage and Retrieval ]: Online Information Services; H.4.0 [ Information Systems ]: General Ubiquitous things discovery, Web of Things, multi-label classifica-tion, relational learning, modularity
About two decades after Mark Weiser wrote his seminal arti-cle [ 3], we are one step closer to his vision of  X  X biquitous comput-ing X  where computing power becomes invisibly integrated into the world around us and accessed through intelligent interfaces. The main driver lies in recent advances in identification technologies such as radio frequency identification (RFID), wireless sensors, and nanotechnology, which make processing power available in smaller and smaller packages that can interact and connect. Indeed, our world is slowly evolving into an environment where everyday ob-jects such as buildings, sidewalks, and commodities are readable, recognizable, addressable, and even controllable [ 10].
While it is well understood that such a ubiquitous environment offers the capability of integrating the information from both the physical world and the virtual one, which creates tremendous busi-ness opportunities such as efficient supply chains, independent liv-ing of elderly persons, and improved environmental monitoring, it also presents significant challenges [ 3]. With many things con-nected and interacted over the Web, there is an urgent need to effi-ciently index, organize, and manage these things for object search, recommendation, and effectively reveal interesting patterns from the things. Classifying ubiquitous things into manipulable seman-tic categories is an essential task to realize these applications.
Although classification of Web objects has been actively investi-gated in the last few years, especially Web page classification [ 9], these studies mostly focus on homogeneous objects and their clas-sification algorithms are designed for some specific types of data. Classification of ubiquitous things is a much more challenging task due to the specific characteristics of things on the Web. Firstly, things cannot be easily represented in a meaningful feature space. They usually only have very short textual descriptions [ 5], which cannot provide enough semantic features. Secondly, ubiquitous things are normally diverse and noisy (e.g., some things have mean-ingful descriptions while many others do not) [ 3]. As a result, it becomes quite challenging to discover explicitly the relationships between heterogeneous things. Finally, correlations among things are not obvious and difficult to discover. This is due to the fact that things often exist in isolate settings and interconnections between them are usually limited.

The problem targeted in this paper can be formulated as predict-ing appropriate categories for a given thing on the Web. In gen-eral, there are two types of things: labeled things and unlabeled things. The goal of our work is to predict category label for un-labeled things by mining the latent relevance between things. The relevance between things are implicit and can be captured by ex-ploring regularities of users X  interactions with similar things. This task can be conducted by using a two-stage approach. Firstly, we propose to derive the latent relevances of things based on the log history records from three dimensions: i) user-thing interactions that record who has used the things; ii) time-thing interactions that record when the things are used; and iii) location-thing interactions that record where the things are used. Secondly, we adopt the re-lational learning technique to predict category labels for unlabeled things. We summarize our main contributions as the following:
The remainder of the paper is organized as follows. Section 2 in-troduces the concept and construction of the relational network of things. Section 3 proposes a modularity-based method that applies to the relational network of things to predict category of unlabeled things, which eventually classifies things into the corresponding categories. Section 4 reports the experimental results and Section 5 discusses the related work and gives some concluding remarks.
In this section, we introduce the three graphs, and the relational network of ubiquitous things.
To extract features from latent relevance among similar things, we develop a novel algorithm that constructs a relational network of ubiquitous things (RNUbiT), which captures the relevance between things by considering three aspects: user (i.e., who uses the thing), time (i.e., when the thing is used), and location (i.e., where the thing is used). Three graphs, namely user-thing graph, time-thing graph, and location-thing graph are developed accordingly.
 User-Thing Graph. A user-thing graph consists of users and things connected in accordance with the log history. Let h ( u i H denote a history record indicating that user u i used thing (re-source) t j at time stamp ts k in location l m ,where H is the set of history records. Formally, a user-thing graph (see Figure 1 (a)), de-noted by G u =( U , T , I u , F ) , is an augmented bipartite graph. and T are the sets of users and things respectively. I u = ( u, t )  X  X  X T} denotes the things accessed by user u , F = ( u, u )  X  X  X U} denote the users X  friendships. In this graph, each edge between users and things is associated with a weight w ferring to the frequency that thing t j is used by user u
To obtain the relevance r u t i ,t j between a pair of things from the user-thing graph, we adopt the biased random walk on this aug-ment bipartite graph. Given a node on this graph, random walk is performed by randomly following one of its links to another node on the augment graph based on the transition probabilities of these links. After convergence, the stationary states probabilities for each pair of nodes on this graph can be obtained by recursively imple-menting the random walk. Four transition probabilities matrices in the graph are: i) user-user transition P ( u | u ) , ii) thing-thing tran-transpose P ( u | t ) . P ( t | u ) and its transpose matrix should be pro-portional to the times of a thing being used.

It should be noted that our user-thing graph also considers in-teractions between users (i.e., social links). We treat relationships between users as augmenting the bipartite graph with social links (i.e., F in the user-thing graph) among users. The user-user social links F reflect the homophily meaning that similar users may have similar interests. Therefore, instead of selecting the link uniformly at random, we set the selection as biased by the similarity of users. In our work, the user-user transition probability is calculated using: where cos ( b ( u ) ,b ( u )) = u  X  X  friends (i.e., u  X   X ( u ) ), b ( u ) is the binary vector of things used by user u ,and  X  is a parameter that reflects the preference for transitioning to a user who used the same things [ 11]. Time-Thing Graph. A time-thing graph (see Figure 1 (b)), denoted by G t =( TS , T , I t ) , is a bipartite graph where T and the sets of things and times respectively. I t = { ( t, ts ):( t, ts ) T X TS} denotes the things accessed at different times. In this graph, each edge is associated with a weight w j,k , referring the frequency thing t j is accessed at time ts k .

Similarly, there are four transition matrices: i) time-time tran-sition P ( ts | ts ) , ii) thing-thing transition P ( t | transition P ( ts | t ) , and iv) time-thing X  X  transpose P same process is implemented on the time-thing graph to derive the relevance between pair of things, r t t i ,t j from temporal dimension. Location-Thing Graph. A location-thing graph (see Figure 1 (c)) reflects the spatial information of the usage of things. We argue in this paper that geographical influence to user activities cannot be ignored, i.e., a user tends to interact with things nearby rather than the ones distant [ 1]. For example, if a user is at her office, she has higher probability of using offi ce facilities such as telephone, printer, and seminar rooms. Formally, a location-thing graph, de-noted by G l =( L , T , I l ) , is a bipartite graph where the sets of things and locations respectively. I l = { ( t, l ):( t, l ) T X L} denotes that the things are accessed at different user loca-tions. In this graph, each edge is associated with a weight w indicating how often thing t j is accessed at location l m
There are four transition matrices including: i) location-location transition P ( l | l ) , ii) thing-thing transition P ( t thing transition P ( l | t ) , and iv) location-thing X  X  transpose Similarly, the relevance r l t i ,t j between pair of things from spatial dimension can be derived after applying the same process on the location-thing graph.

As we mentioned before, our model also considers the geograph-ical influence to users X  interactions with things. Inspired by the re-cent work on social networks (e.g., [ 1]) and location-based services (e.g., [ 16]), we propose to use power law distribution to model a thing X  X  usage probability to the physical distance between the thing and the user, as the following: where b and d are parameters of a power law distribution, x 1 and x 2 denotes the distance between user u i and thing t j and the fre-quency of this usage, respectively.  X  is the weight for distance and frequency. z is the thing X  X  usage probability.

Equation 2 can be transformed in log-log scale to fit a linear model, into the following equation: Let z = log z , x 1 = log x 1 , x 2 = log x 2 , log (  X  ) as w (1- X  )as w 2 and d as w 3 , we can have: where w 0 , w 1 , w 2 ,and w 3 are the linear coefficients, which are collectively denoted by w ,and x = { x 1 ; x 2 } .Inordertoavoid over-fitting, we approach the weight coefficients (i.e., w square error method and add a penalty term to discourage the coef-ficients from reaching large values, as the following: where E ( w ) denotes the loss function, n represents the cardinality of input dataset, z  X  i is the ground truth corresponding to z  X  is the regularization term. The optimal values of power law pa-rameters (i.e., b , d in Equation 2) form the setting that minimizes the loss function E ( w ) . In our work, we use stochastic gradient descent to solve this optimization problem. Interested readers are referred to [ 2] for more details.
A relational network of ubiquitous things (RNUbiT) is constructed in a way that each thing is connected to things with top-k relevance values. The relevance between pair of things t i and t j in RNUbiT, denoted by r t i ,t j , is calculated as: where  X  + +  X  =1 ,  X   X ,, X   X  [0 , 1] .  X  , and  X  are parameters that can be used to control preferences over three different aspects (i.e., user, time, and location). An RNUbiT is denoted by (
T , E , W ) . For each thing t i  X  X  ,let T i denote the set of related from t x to t i . Each edge is associated with a weight w with the relevance value.
Things usually hold multiple relations. For instance, a thing might be shared among its owner, owner X  X  friends, co-workers, or family members. It might be connected to other things based on functionality or non-functionality attributes. Detecting such rela-tions is related to the task of community detection [7].
There are multiple methodologies to learn the communities from a graph such as collective classification and latent space model [ 4, 12]. In our work, we adopt the modularity-based methods to unveil the implicit structures of the things network. Briefly, modularity is a metric proposed by Newman et al. [ 7] to evaluate the goodness of a partition of undirected graphs. The reason that we choose this method is that modularity has been shown to be an effective quan-tity to measure community structure in many complex networks.
Modularity Q is like a statistical test that the null model is a uniform random graph model, where one vertex connects to others with uniform probability. It is a measure of how far the interac-tion deviates from a uniform random graph with the same degree distribution. Modularity is defined as:
Where A ij is the adjacent matrix on the graph, m is the number of edges of the matrix, d i and d j denote the degree of vertex i and out-degree of vertex j ,and  X  ( s t i ,s t j ) are the Kronecker delta function that takes the value 1 if node t i and t j belong to the same community, 0 otherwise. A larger modularity Q indicates denser within-group interaction. The modularity-based algorithm aims to find a community structure such that Q is maximized. Newman [ 7] proposes an efficient solution by reformulating Q as: where S is the binary matrix indicating which community each node belongs to. B is the modularity function with entries are as follows:
However, since RNUbiT is weighted and directed graph, we need to make some modification on Q to solve it. This involves two steps. In the first step, we extend B to directed graph. Based on [ 6], we rewrite the modularity matrix B as the following: where d in i d out j are the in-degrees and out-degrees of all the nodes on the RNUbiT graph. Figure 2: (a) An implemented ubiquitous things: RFID tagged lights; (b) RFID tags and readers used in the implementation
In the second step, we extend B to weighted graphs. To do so, we do the further modification based on Equation 10. According to [ 7], it can be rewritten further as below: where W ij is the sum of weights of all edges in RNUbiT graph replacing the adjacency matrix A , w in i and w out j are the sum of the weights of incoming edges adjacent to vertex t i and the outgoing edges adjacent to vertex t j on the RNUbiT graph respectively.
After these two steps, it should be noted that different from undi-rected situation, B is not symmetric. To use the spectral optimiza-tion method proposed by Newman in [ 7], we restore symmetry by adding B  X  to its own transpose, thereby the new Q new is:
We then is able to calculate all the eigenvectors corresponding to the top-n positive eigenvalue of B + B T and assign communities based on the elements of the eigenvector.

After obtaining the latent features of things based on the modu-larity technique, we feed them into Support Vector Machine (SVM) [12] to do the supervised learning. It is noted that these latent fea-tures can be easily combined with other features of things (e.g., textual features and contextual features) to enhance the classifica-tion performance.
We set up a testing environment that consists of several different physical places including one author X  X  home (e.g., kitchen, living room). Things (e.g., desktop computers, backpacks, TV, coffee ma-chine) are tagged using radio-frequency identification (RFID) tech-nology. RFID tags are captured by two fixed RFID readers and ten portable RFID readers (worn by volunteers when interacting with things). Figure 2 (a) shows one application that we implemented to detect and control lights and Figure 2 (b) shows the RFID devices that we used in the implementation.

When users interact with things, RFID events and data are cap-tured by RFID readers. These raw data have to be preprocessed (e.g., cleaning, transformation, integration) before storing at the repository. This task greatly benefits from our four years exten-sive experience in a large RFID research project [14]. In our im-plementation, things are exposed on the Web using RESTful Web services, which can be discovered and accessed from a Web-based interface. To determine user locations, we also develop a module that implements an RFID-based localization algorithm [ 8].
In this section, we report two experiments. The first experiment studies the impact of different training sets on the performance of our approach. The second experiment studies the impacts on cou-pling additional information with the derived latent features.
In our experiments, we tagged 127 different things in six cat-egories This dataset serves as the ground-truth dataset in our ex-periments. Ten volunteers participated in the data collection phase by interacting with RFID tagged things for a period of four months, generating 20,179 records on the interactions of the ubiquitous things tagged in the experiments. We adopt the widely used performance metrics to evaluate the performance of our proposed approach: ham-ming loss , one-error , coverage ,and average precision [16]. Impact of Training Ratio. This experiment studies the impact of different training ratio on the performance of our approach. We randomly removed the category tags of a certain percentage, rang-ing over 10% to 90%, of things from each category of the ground-truth dataset, which were used to test our approach while the rest were used as the training set. This process was repeated 10 times and the average results were recorded. Figure 3 shows the results of the home category. The other categories have the similar results.
From the figure we can see that better performance is achieved with higher training sets. Interestingly, there are no significant per-formance improvement when the training sets are larger than 50%. Coupling with Other Features. Our approach is feature-based in the sense that we consider the category probability of ubiquitous things that are derived from our algorithm. If other explicit information is available about the things (e.g., textual description), it would be useful to couple this information with the derived latent features. We expect that this combination will lead to a more accurate clas-sification performance.

In our experiment, we consider the textual description of things as another explicit feature. It is worth reminding that we expose things as RESTful Web services and each thing has a brief webpage describing its basic information. By analyzing the textual descrip-tion, it is possible to extract the most common terms that repre-sent the corresponding thing. We exploit Term Frequency/Inverse Document Frequency (TF/IDF) X  X  common method in IR for gen-erating a robust set of representative keywords from a corpus of documents X  X o analyze things X  descriptions. Figure 4 depicts the performances of three scenarios: i) latent features only, ii) content only, and iii) the combination of the both. As we mentioned earlier, description of things are normally short and noisy, it is therefore not surprising that the performance based on content only is even worse than the latent feature-based approach. On the other hand, by com-bining the two together, the performance is increased, as shown in Figure 4. It should be noted that for the metrics of hamming-loss, one-error, and coverage, higher value means worse performance.
The emerging  X  X eb of Things X  will bridge the physical and dig-ital worlds together, and ubiquitous things will become an integral part of our daily lives. This paper focuses on efficient manage-ment of large number of things on the Web. In particular, we pro-pose classifying ubiquitous things using relational learning meth-ods based on a two-stage approach: i) deriving the latent relevances of things by exploiting the information of log-in records in terms of user dimension, temporal dimension, and spatial dimension, which are used to build a relational network of things, and ii) applying the modularity-optimization technique to classify things based on the generated relational network of things.

Relational learning refers to the classification when objects or entities present multiple relations [ 12]. One main technique on relational learning is based on Markov assumption, where the la-bels of a node in a relational network are determined by the labels of nodes in its neighborhood. Collective inference [ 16]andsemi-supervised learning on graphs [ 17] work on this assumption, which is constructed based on the relational features of labeled data, fol-lowed by an iterative process (e.g., relaxation labeling method) to determine the class labels for the unlabeled data. In [ 16], Ye et al. apply this methodology in Location-based Social Network for deriving the label probability for places. The authors use the col-lective classification method that learns the labels from the neigh-borhood, which only includes the nodes which hold the top-k rel-evance with the prediction node. In [ 15], Xu et al. propose a non-parametric infinite hidden relational model to capture the autocor-relation. However, both approaches, unfortunately, are not suitable for networks where the number of ubiquitous things might be large due to their complexity and high computational cost for inference. Moreover, data collected from ubiquitous things are expected to be noisy. In this paper, we extend this model to the relational network of things where a log-in record not only indicates user and tempo-ral information, but also location information. As a result, a better performance in deriving latent features from the relational network of things can be achieved.

We view the work presented in this paper as a first step towards efficient management of ubiquitous things. Our ongoing work in-cludes further evaluating the approach in a large-scale environment. Another challenge lies on handling the dynamic nature of ubiqui-tous things. How to efficiently update the relational model in large scale environments remains a challenge. [1] L. Backstrom et al. Find Me if You Can: Improving [2] C. M. Bishop. Pattern Recognition and Machine Learning . [3] A. Ferscha. 20 Years Past Weiser: What X  X  Next? IEEE [4] D. Jensen et al. Why Collective Inference Improves [5] T. Kindberg and et al. People, Places, Things: Web Presence [6] E. Leicht and M. Newman. Community structure in directed [7] M. Newman. Finding community structure in networks using [8] L. Ni, Y. Liu, Y. Lau, and A. Patil. LANDMARC: Indoor [9] X. Qi and B. Davison. Web Page Classification: Features and [10] Q. Sheng et al. Ubiquitous RFID: Where are we? [11] A. P. Singh and et al. Recommendations Using Absorbing [12] L. Tang and H. Liu. Relational Learning via Latent Social [13] H. Tong, C. Faloutsos, and J. Pan. Random walk with restart: [14] Y. Wu, Q. Z. Sheng, and D. C. Ranasinghe. Facilitating [15] Z. Xu et al. Nonparametric Relational Learning for Social [16] M. Ye et al. On the Semantic Annotation of Places in [17] X. Zhu, Z. Ghahramani, and J. Lafferty. Semi-Supervised
