 Recommender systems are becoming tools of choice to select the online information relevant to a given user. Collaborative filtering is the most popular approach to building recommender systems and has been successfully employed in many applications. With the ad-vent of online social networks, the social network based approach to recommendation has emerged. This approach assumes a social network among users and makes recommendations for a user based on the ratings of the users that have direct or indirect social relations with the given user. As one of their major benefits, social network based approaches have been shown to reduce the problems with cold start users. In this paper, we explore a model-based approach for recommendation in social networks, employing matrix factor-ization techniques. Advancing previous work, we incorporate the mechanism of trust propagation into the model. Trust propagation has been shown to be a crucial phenomenon in the social sciences, in social network analysis and in trust-based recommendation. We have conducted experiments on two real life data sets, the public domain Epinions.com dataset and a much larger dataset that we have recently crawled from Flixster.com. Our experiments demon-strate that modeling trust propagation leads to a substantial increase in recommendation accuracy, in particular for cold start users. H.2.8.d [ Information Technology and Systems ]: Database Appli-cations -Data Mining Algorithms, Design, Measurement, Experimentation Recommendation, Social Network, Trust, Graphical Model, Matrix Factorization With the rapidly growing amount of information available on the WWW, it becomes necessary to have tools to help users to select the relevant part of online information. To satisfy this need, rec-ommender systems have emerged, e.g. there are popular recom-menders for movies 1 , books 2 , music 3 , etc.

Typically in a recommender system, we have a set of users and a set of items . Each user u rates a set of items by some values. The recommender has the task to predict the rating for user u on a non-rated item i or to generally recommend some items for the given user u based on the ratings that already exist.

Generally two type of recommender systems have been investi-gated: Memory-based and Model-based recommenders. Memory based algorithms (collaborative filtering) [4] explore the user-item rating matrix and make recommendations based on the ratings of item i by a set of users whose rating profiles are most similar to that of user u . Model-based approaches learn the parameters of a model and store only those parameters. Hence they do not need to explore the rating matrix and only store the model parameters. Model-based approaches are very fast after the parameters of the model are learnt. The bottleneck for model-based approaches is the training phase, while in memory-based approaches there is no training, but the prediction (test) phase is slower.

With the advent of online social networks, the social network based approach to recommendation has emerged. This approach assumes a social network among users and makes recommenda-tions for a user based on the ratings of the users that have direct or indirect social relations with the given user.

Collaborative filtering is most effective when users have expressed enough ratings to have common ratings with other users, but it performs poorly for so-called cold start user. Cold start users are new users who have expressed only a few ratings. Using similarity based approaches, it is unlikely to find similar users since the cold start users only have a few ratings. Social network based recom-menders, however, can make recommendations as long as a new user is connected to a large enough component of the social net-work.

Exploiting social networks in recommendation works because of the effects of selection and social influence that have been postu-lated by sociologists for a long time. Selection means that people tend to relate to people with similar attributes, and due to social influence related people in a social network influence each other to become more similar[15]. The increasing availability of online social network data has finally allowed a verification of these soci-ological models. The results of experiments in [1] and of similar http://www.netflix.com http://www.amazon.com http://www.last.fm work confirm that a social network provides an independent source of information which can be exploited to improve the quality of recommendations.

A social rating network is a social network in which each user expresses ratings on some items besides creating social relations to other users. A sample social rating network is illustrated in figure 1. Note that the terms "trust network" and "social network" are used as synonyms throughout this paper.

Some memory based approaches have been proposed for recom-mendation in social rating networks [11][3][5][16]. These meth-ods typically explore the social network and find a neighborhood of users trusted (directly or indirectly) by a user and perform the recommendation by aggregating their ratings. These methods use the transitivity of trust and propagate trust to indirect neighbors in the social network. Since they have to explore the social network, memory based methods are slower in the test phase compared to model based approaches.

Recently, the model based approach for recommendation in so-cial rating networks has been investigated [9][10]. These methods exploit the matrix factorization technique to learn latent features for users and items from the observed ratings. Experimental re-sults show better performance compared to state of the art memory-based approaches. However, these methods do not consider the propagation of trust. In this paper, we also propose a matrix factor-ization based model for recommendation in social rating networks, called SocialMF. We incorporate the propagation of trust in our model to improve the quality of recommendation. To inject social influence in our model, we make the features of every user depen-dent on the feature vectors of the his direct neighbors in the social network. Using this idea, latent features of users indirectly con-nected in the social network will be dependent and hence the trust gets propagated.

Cold start users are one of the most important challenges in rec-ommender systems. Since cold start users are more dependent on the social network compared to users with more ratings, the effect of using trust propagation gets more important for cold start users. Moreover, in many real life social rating networks a very large por-tion of users do not express any ratings, and they only participate in the social network. Hence, using only the observed ratings does not allow to learn the user features. The SocialMF model forces the user feature vectors to be close to those of their neighbors to be able to learn the latent user features for users with no or very few ratings.

Due to the sensitive nature of social network data, there are only very few public social rating network datasets. We present a new large scale dataset that we crawled from Flixster.com. Flixster is a social networking service in which users can rate movies and create a social network. All experiments were performed on this dataset as well as on the existing Epinions dataset.

The list of contributions of this paper are as follows:
The rest of this paper is organized as follows: The problem def-inition is presented in section 2. Some related work is discussed in section 3. We introduce our proposed model in section 4. We describe the real life data sets used in our experiments in section 5. Our experiments are reported in section 6. Finally, we conclude the paper and present some directions for future work. In recommender systems we have a set of users U = { u 1 , ... u and a set of items I = { i 1 , ... i M } . The ratings expressed by users on items are given in a rating matrix R = [ R u,i ] N  X  M trix R u,i denotes the rating of user u on item i . R u,i real number, but often ratings are integers in the range [1 , 5] . In this paper, without loss of generality, we map the ratings 1, ..., 5 to the interval [0,1] by normalizing the ratings. In a social rating network, each user u has a set N u of direct neighbors and t u,v denotes the value of social trust u has on v as a real number in [0 , 1] . Zero means no trust and one means full trust. Binary trust networks are the most common trust networks (Amazon 4 , eBay 5 , ...). The trust values are given in a matrix T = [ T u,v ] N  X  N . Non-zero cells T in T denote the existence of a social relation from u to v . Note that T is asymmetric in general.

The social rating network can also be defined as a graph in which there is a node corresponding to each user, an edge corresponding to each social trust relation, and item ratings associated with nodes. An example of a graph representation of social rating network is demonstrated in figure 1.

The task of a recommender is as follows: Given a user u  X  U and an item i  X  I for which R u,i is unknown, predict the rating for u on item i using R and T .

In this paper, we employ matrix factorization techniques to learn the latent characteristics of users and items and predict the un-known ratings using these latent characteristics. Let U  X  R and V  X  R K  X  M be latent user and item feature matrices, with col-umn vectors U u and V i representing K -dimensional user-specific and item-specific latent feature vectors of users u and item i , re-spectively. The goal of matrix factorization is to learn these latent variables and exploit them for recommendation.

Traditional recommender systems, like collaborative filtering ap-proaches [14][7][4], only utilize the information of the user-item rating matrix for recommendations but ignore the social relations among users. With the exponential growth of online social net-works, incorporating social networks into recommender systems is becoming more and more important. In this section, we first review www.amazon.com www.ebay.com the basic matrix factorization (MF) approach for recommendation using only user-item rating matrix . In section 4, we introduce our proposed model to employ matrix factorization (MF) for recom-mendation in social rating networks.

In order to learn the latent features of users and items, [14] em-ploys matrix factorization to factorize the user-item matrix. The conditional probability of the observed ratings is defined as: where N ( x |  X ,  X  2 ) is the normal distribution with mean  X  and variance  X  2 , and I R u,i is the indicator function that is equal to 1 if u has rated i and equal to 0 otherwise. The function g ( x ) is the logistic function g ( x ) = 1 / (1 + e  X  x ) , which bounds the range of U u V i within [0,1]. Also, zero mean Gaussian priors are assumed for user and item feature vectors:
Now, through a Bayesian inference, the posterior probability of the latent variables U and V can be obtained as follows: p ( U, V | R, T,  X  2 R ,  X  2 U ,  X  2 V )  X  p ( R | U, V,  X 
The corresponding graphical model is presented in figure 2. Us-ing equation 3, we can learn the latent feature vectors of users and items purely based on the user-item rating matrix.
 Figure 2: Graphical Model of the baseline factorization of user-item rating matrix.
In this section we review some related work on recommendation in social networks. Trust propagation in recommendation has been widely investigated in the memory based approaches. Hence, we first review some of the memory based methods for recommenda-tion in social networks. Matrix factorization has been widely used in the model based recommendation [6][7][14]. However these models do not take into account the social network among users. Recently, some model-based approaches have been proposed which use matrix factorization for recommendation in social networks [9][10], however, these works do not consider the propagation of trust. In this section, after reviewing memory based approaches we discuss some model based approaches for recommendation in social networks.

TidalTrust[3] performs a modified breadth first search in the trust network to compute a prediction. Basically, it finds all raters with the shortest path distance from the source user and aggregates their ratings weighted by the trust between the source user and these raters. To compute the trust value between user u and v who are not directly connected, TidalTrust aggregates the trust value between u  X  X  direct neighbors and v weighted by the direct trust values of u and its direct neighbors. [11] introduces MoleTrust. The ideas used in MoleTrust and TidalTrust are similar. But MoleTrust considers all raters up to a maximum-depth given as an input. maximum-depth is independent of any specific user and item. Also, to compute the trust value be-tween u and v in MoleTrust, we perform a backward exploration. It means that the trust value from u to v is the aggregation of trust val-ues between u and users directly trusting v weighted by the direct trust values.

The Advogato[8] maximum flow trust metric has been proposed in order to discover which users are trusted by members of an on-line community. The input for Advogato is given by an integer number n , the number of members to trust. To assign capacities to the edges of the network, they need to transform the network, so it needs to know the whole structure of the network. Moreover, it only computes the nodes to trust and does not compute different degrees of trust. Since the number of users to trust is independent of users and items and there is no distinction between the trusted users, this approach is not appropriate for trust-based recommendation.
In order to consider enough ratings without suffering from noisy data, [5] proposes a random walk method (TrustWalker) which combines trust-based and item-based recommendation. TrustWalker considers not only ratings of the target item, but also those of sim-ilar items. The probability of using the rating of a similar item instead of a rating for the target item increases with increasing length of the walk. Their framework contains both trust-based and item-based collaborative filtering recommendations as special cases. Their experiments show that their method outperforms other existing memory based approaches. The random walk model al-lows them to compute the confidence in the predictions.

The authors of [9] proposed a matrix factorization approach for social network based recommendation, called STE. Their method is a linear combination of basic matrix factorization approach [14] and a social network based approach. The graphical model for their proposed model is illustrated in figure 3 6 . The predicted rating of user u on item i is as follows: where parameter  X  controls the effects of neighbors on the esti-mated rating.
It should be noted that model in figure 3 is different from the graphical model presented in [9], but it correctly represents the joint probability distribution actually computed for the STE model.
Experiments show that their model outperforms the basic ma-trix factorization based approach and existing trust based based ap-proaches. However, in their model, the feature vectors of direct neighbors of u affect the ratings of u instead of affecting the feature vector of u . This model does not handle trust propagation. We use this method as our main comparison partners in our experiments and call it as STE model.

The same authors have also proposed another approach for trust based recommendation in their previous work [10]. In this paper, they developed a factor analysis method based on the probabilis-tic matrix factorization. In this model, they consider three sets of latent features: U for users, V for items, and F for factors. They factorize the rating matrix R using latent item features V and latent user features U . On the other hand, they factorize the trust matrix T using latent user features U and latent factor features F . They assume a factor latent vector for each user. The graphical model for this model is presented in figure 4.

As stated in [9], although the users X  social network is integrated into the recommender systems by factorizing the social trust graph, the real world recommendation processes are not reflected in the model. Two sets of different feature vectors are assumed for users which makes the interpretability of the model very hard. Moreover, experiments in [9] show that the more recent STE model outper-forms this model in terms of the RMSE values.

Figure 4: The graphical model of the model presented in [10].
In this section, we present our approach to incorporate trust prop-agation into a matrix factorization model for recommendation in social networks.

Due to social influence [2], the behavior of a user u is affected by his direct neighbors N u . In other words, the latent feature vec-tor of u is dependent on the latent feature vectors of all his direct neighbors v  X  N u . We formulate this influence as follows: where b U u is the estimated latent feature vector of u given the feature vectors of his direct neighbors. Since the social networks we are working with are all binary social networks, all none-zero values of T u,v are 1. We normalize each row of the trust matrix so that
The above equation indicates that the estimate of the latent fea-ture vector of a user is the weighted average of the latent feature vectors of his direct neighbors. The estimated feature vector of user u can be inferred as:
Note that taking the social network into account does not change the equation for the conditional distribution of the observed ratings. It only affects the user latent feature vectors. So the conditional probability of observed rating is the same as the conditional proba-bility in equation 1: For the user latent features, we have two factors: The zero-mean Gaussian prior to avoid over-fitting, and the conditional distribu-neighbors. Therefore, p ( U | T,  X  2 U ,  X  2 T )  X  p ( U |  X  2 U )  X  p ( U | T,  X  =
The above distribution is a normal distribution which is a product of two different normal distributions to keep the user feature vectors both small and close to the features of their direct neighbors.
Similar to equation 3, through a Bayesian inference, we have the following equation for the posterior probability of latent feature vectors given the rating and social trust matrices: p ( U, V | R, T,  X  2 R ,  X  2 T ,  X  2 U ,  X  2 V )  X 
The graphical model corresponding to equation 9 is shown in figure 5. Note that the trust matrix in the above equation is not explicitly shown in the figure. However, the edges among the la-tent feature vectors of users are representatives of the trust network among users and the degree of trust of user u on user v is T Figure 5: Proposed Graphical Model to consider the social net-work in the factorization of user-item rating matrix.

The log of the posterior probability can be computed as follows: lnp ( U, V | R, T,  X  2 R ,  X  2 T ,  X  2 U ,  X  2 V ) =  X  1
Keeping the parameters(observation noise variance and prior vari-ance) fixed, maximizing the log-posterior over latent features of users and items is equivalent to minimizing the following objective function, which is a sum of squared errors with quadratic regular-ization terms:
L ( R, T, U, V ) = 1 +  X  T
In the above equation,  X  U =  X  2 R / X  2 U ,  X  V =  X  2 R / X   X 
We can find a local minimum of the objective function in equa-tion 4 by performing gradient descent on U u and V i for all users u and all items i . +  X  T ( U u  X  where g 0 ( x ) is the derivative of logistic function and is equal to g ( x ) = e  X  x / (1 + e  X  x ) 2 . To reduce the model complexity, we set  X 
U =  X  V in all our experiments. The initial values of U and V are samples from normal noises with zero mean. In each iteration, U and V are updated based on the latent variables from the previous iteration.
In this section, we discuss some desirable properties of SocialMF and compare it against the closely related STE model [9].
The SocialMF model addresses the transitivity of trust in social networks. In other words, our model takes the trust propagation into account. According to the graphical model, the feature vec-tor of any user is dependent on the feature vectors of his direct neighbors. Recursively, the feature vector of each direct neighbor is dependent on the feature vector of his direct neighbors. This effect is shown in the conditional distributions by considering the feature vector of a user being a normal distribution around the av-erage of the feature vectors of his neighbors. On the other hand, the STE model [9] does not support trust propagation and they list trust propagation as future work.

In the baseline MF approach [14] and the STE model [9], the fea-tures are being learnt based only on the observed ratings. However, in real life social rating networks, a huge portion of users have ex-pressed no ratings and they participate only in the social network. So their features can not be learnt based on their observed ratings. However, our model can handle these users very well. The So-cialMF model learns to tune the latent features of these users close to their neighbors. So, despite not having any expressed ratings, the feature vectors of these users will be learnt to be close to their neighbors. Basically, the social trust relations among users is an observed dependency among the feature vectors of users. It should be noted that since evaluating the learnt features is typically based on the withheld observed ratings, we are currently not able to eval-uate the features learnt for users with no expressed ratings.
The main cost in learning the parameters is computing L and its gradients against feature vectors of users and items. Assuming the average number of ratings per user is r , and the average number of direct neighbors per user is t , the complexity of evaluation of L is O ( N rK + N tK ) . Since both the rating matrix R and trust matrix T are very sparse, t and r are relatively small. So the computa-tion of the objective function L is very fast and linear with respect to the number of users in the social rating network. The computa-tional complexity of computing the gradients is O ( N rK + N t which is linear with respect to the number of users in the social rat-ing network. Note that the cost of computing the gradient in STE [9] is O ( N r t 2 K ) . So SocialMF is r t 2 computing the gradient in each iteration of parameter learning pro-cess.

For each rating estimation, the model proposed in [9] needs to take the average of estimated ratings for direct neighbors which makes it slower in prediction compared to SocialMF proposed in this paper.
One of the bottlenecks to research in social network analysis in general, and in social rating networks in particular, has been the lack of publicly available datasets. To the best of our knowledge, so far the Epinions.com dataset is the only publicly available social rating network dataset. In this section we briefly introduce the data sets we use in our experiments: the Flixster dataset, we crawled and prepared for this research, and the public domain Epinions dataset.
For this research, we crawled a large scale social rating network dataset from the Flixster website 7 . Flixster is a social networking service in which users can rate movies. Users can also add some users to their friend list and create a social network. Note that social relations in Flixster are undirected.

Flixster has many ways to gather ratings from users. First, users can go online, log into Flixster.com and rate some movies or make friendship connections to other users. In addition, Flixster uses some applications to gather ratings from users. There are two Flixster applications which are very famous in Facebook 8 and Myspace When users of facebook or myspace install these applications on their profile, they will be asked to rate different movies. Initially, they are presented with a fixed set of 50 movies to rate. Many users of Flixster rate only these movies. As a results the rating counts for these 50 movies are extraordinarily high. Hence, we remove the ratings for these movies to reduce the bias of the dataset. Although this information could be useful in a real recommender system, we ignore it to have a less biased dataset in our research.
Possible rating values in Flixster are 10 discrete numbers in the range [0.5,5] with step size 0.5. Users are also allowed to rate the items with two other nominal values: "Want To See" and "Not In-terested". These two types of rating also include some information and may be useful for some research purposes. However, nominal ratings are not considered in the rest of this paper since we can not easily convert them to numerical rating values. Almost half of the ratings are numerical values. The following statistics are only for the numerical ratings. www.flixster.com http://apps.facebook.com/flixster/ http://www.myspace.com/flixstermovies General statistics of the Flixster dataset are shown in table 1. According to this table, on average each user has 27 friends and each user has rated 8.2 movies. However, if we ignore the many users who have not rated any movies and only consider users with at least one rating, each user has rated 55 movies on average.
The Flixster dataset contains ratings expressed by users during the period from November 2005 to November 2009. The data set is now publicly available at www.sfu.ca/  X  sja25/datasets/ .
To the best of our knowledge, the Epinions 10 dataset is the only social rating network dataset publicly available.

We used the version of the Epinions dataset 11 published by the authors of [13]. Table 1 also shows the statistics of the Epinions dataset. Each user has on average 8.1 expressed ratings and 7.2 direct neighbors. Unlike Flixster, the social relations in Epinions are directed. The distribution of the number of ratings per user follows a power law. It should also be noted that unlike Flixster, the items in Epinions are from different categories such as cameras, dvd players, music, etc, while all the items in the Flixster dataset are movies.

Based on the statistics presented in table 1, the crawled Flixster dataset is denser than the Epinions dataset. The number of ratings and friends per user is larger in Flixster dataset. A large portion of users in Flixster dataset have no expressed ratings, but most of them have social relations. Users without any ratings are also im-portant. They may not be useful to compute the prediction for other users based on their own ratings, but they may allow us to connect indirectly to other users who have rated items.
We performed experiments on the Epinions and the Flixster data sets described in section 5. In this section, we report our experi-mental results and compare the results with existing methods. Also we present the results for different settings of model parameters.
We perform 5-fold cross validation in our experiments. In each fold we have 80% of data as the training set and the remaining 20% as the test data.

The evaluation metric we use in our experiments is RMSE which is defined as follows: where R test is the set of all pairs ( u, i ) in the test data.
To evaluate the performance of our method we consider three comparison partners: www.epinions.com http://alchemy.cs.washington.edu/data/epinions/ In our experiments, we refer to our proposed model as SocialMF . In all our experiments, we set  X  U =  X  V = 0 . 1 .
Table 2 reports the RMSE values of all comparison partners on the Epinions data set. The parameter  X  T is set to 5 for experiments on Epinions. Table 2 shows that SocialMF outperforms existing methods. Note that since collaborative filtering has no latent fea-tures, there is no dimensionality K associated with it and hence the result for different values of K are the same.

SocialMF improves the RMSE of the state-of-the-art method STE by 6.2%. for K=5 and by 5.7% for K=10. To show how significant our gain is, note that the gain of STE over the baseline MF method is 2.5% and the gain of SocialMF over STE is more than 2 times that gain. As another evidence for the significance of these RMSE reductions, note that in the Netflix prize competition 12 $1 Million reward for a reduction of the RMSE by 10%.
 Table 2: RMSE values for comparison partners on Epinions with different settings of dimensionality K .

RMSE values for Flixster are presented in table 3. Again, So-cialMF clearly outperforms existing methods. In Flixster, the im-provement of the RMSE for SocialMF over STE is 5% which more than 3 times of the gain of STE over baseline MF (1.5%).
It should be noted that the results for Flixster are generally better than the results for Epinions for all methods, possibly because of the fact that the items in Epinions are from multiple categories such as DVD players, cameras, printers, laptops, ...., while the items in Flixster are all movies, which makes the recommendation easier in general. Another explanation for the better results on Flixster could relations and ratings per user in Flixster compared to Epinions. Table 3: RMSE values for comparison partners on Flixster with different settings of dimensionality K . http://www.netflixprize.com
Intuitively, increasing K should add more flexibility to the model and hence should improve the results. However, comparing results of tables 2 and 3 for different values of K shows that increasing K in Epinions did not improve the results, while increasing K in Flixster improved the results. We believe that these counter-intuitive results for Epinions are due to the fact that the Epinions data set is smaller than Flixster and increasing K leads to more pa-rameters in the model which leads to overfitting. Flixster, on the other hand, is a huge data set, and increasing K to 10 does not lead to overfitting.
Parameter  X  T controls the influence of the social network on the behavior of users. Larger values of  X  T in the objective function of equation 12 indicate more impact of the social network on the be-havior of users. Very small values of  X  T makes our model close to the baseline MF approach. However, very large values of  X  to a model in which having feature vectors close to those of direct neighbors dominating having lower squared error in the training phase.

Figures 6 and 7 compare the RMSE of our model for different ranges of values for  X  T in both data sets. As shown in these figures, SocialMF has its best results on Epinions for  X  T = 5 , and  X  for Flixster.
 Figure 6: Impact of different values of  X  T on the performance of prediction in Epinions.
 Figure 7: Impact of different values of  X  T on the performance of prediction in Flixster.
Some users in a social rating network express a lot of ratings, but most users express a few ratings. We consider users who have expressed less than 5 ratings as cold start users [12][5]. In both Flixster and Epinions more than 50% of users are cold start users Hence efficiency of any recommendation algorithm for cold start users becomes very important.

Table 4 shows that for cold start user, proposed SocialMF out-performs other methods. The improvement of the RMSE for cold
In Flixster, we do not take into account the users with no ratings in this statistics. start users compared to STE is 11.5% for Epinions and 8.5% for all users which we discussed in previous subsection. This implies that SocialMF handles cold start users better than STE. We believe this is mainly due to the consideration of trust propagation in our model.
In section 4, we analyzed the runtime complexity and compared the complexity of computing the gradients of the objective function L in SocialMF and STE. In this section we compare the actual run-times, conducting experiments on a Core2 Duo 2.16 GHz machine with Windows XP and 2 GB of memory.

Table 5 compares the actual runtime of a single iteration of the training phase for both models.

Note that according to our discussion in section 3.2, SocialMF data set is denser than the Epinions data set, the improvement of runtime efficiency for Flixster is stronger than for Epinions. Table 5: Runtime comparison of a single iteration in training. It should also be noted that the average number of iterations for SocialMF to converge is around 700, while the number of iterations for STE is around 550. Table 6 shows the total time required to learn the parameters for each model. As shown in this table, the STE model is much slower than SocialMF. The training phase of SocialMF is 40 times faster than that of the STE model for Flixster and more than 7 times faster for Epinions.
 Table 6: Total time required to learn the parameters of models.
Recommender systems are emerging as tools of choice to select the online information relevant to a given user. Collaborative filter-ing is the most popular approach to building recommender systems and has been successfully employed in many applications. With the advent of online social networks, exploiting the information hidden in the social network to predict the behavior of users has become very important.

In this paper we proposed a novel model based approach for rec-ommendation in social networks. Our model is a matrix factoriza-tion based approach. Similar to the STE model presented in [9], SocialMF learns the latent feature vectors of users and items. Dif-ferent from STE, the feature vector of each user is dependent on the feature vectors of his direct neighbors in the social network.
This allows SocialMF to handle the transitivity of trust and trust propagation, which is not captured by the STE model. Trust prop-agation has been shown to be a crucial phenomenon in the social sciences, in social network analysis and in trust-based recommen-dation. Also if a user has not expressed any ratings, his feature vectors can be learnt as long as he is connected to the social net-work via a social relation. Thus SocialMF deals better with cold start users than existing methods. Note that if a cold start user is not connected to the social network, then social network based ap-proaches have no additional information to improve the quality of recommendation for that user.

Experiments on two real life data sets from Epinions and Flixster demonstrate that SocialMF outperforms existing methods for social network based recommendation. This work suggests several inter-esting directions for future work. We want to extend the model to handle negative trust relations, since some social networks allow users to express distrust towards other users. In this paper, we per-formed experiments on different ranges of  X  T . As future work, we investigate the possibility of tuning  X  T automatically. Finally, cold start items have not been addressed in this paper, and it should be explored how the model can be extended so that the feature vectors of cold start items are also learnt efficiently. [1] D. Crandall, D. Cosley, D. Huttenlocher, J. Kleinberg, and [2] N. E. Friedkin. A Structural Theory of Social Influence . [3] J. Golbeck. Computing and Applying Trust in Web-based [4] D. Goldberg, D. Nichols, B. M. Oki, and D. Terry. Using [5] M. Jamali and M. Ester. Trustwalker: A random walk model [6] Y. Koren. Factorization meets the neighborhood a [7] Y. Koren, R. Bell, and C. Volinsky. Matrix factorization [8] Levien and Aiken. Advogato X  X  trust metric. online at [9] H. Ma, I. King, and M. R. Lyu. Learning to recommend with [10] H. Ma, H. Yang, M. R. Lyu, and I. King. Sorec: social [11] P. Massa and P. Avesani. Trust-aware recommender systems. [12] P. Massa and P. Avesani. Trust metrics on controversial [13] M. Richardson and P. Domingos. Mining knowledge-sharing [14] R. Salakhutdinov and A. Mnih. Probabilistic matrix [15] S. Wasserman and K. Faust. Social Network Analysis . [16] C. N. Ziegler. Towards Decentralized Recommender Systems .
