 A month-long quasi-expe riment was conducted using a distributed team responsible for modeling, simulation, and analy sis. Six experiments of three different tim e durations (short, medium, and long) were performed. The primary goal was to discover if synchronous collaboration capability through a particular application im proved the ability of the team to form a com mon mental m odel of the analy sis problem(s) and solution(s). The results indicated that such collaboration capability did im prove the formation of common mental mode ls, both in terms of time and quality ( i.e ., depth of understanding), and that the improvement did not vary by time duration. In addition, common mental models were generally formed by interaction around a shared graphical image, the progress of collaboration was not linear but episodic, and tasks that required drawing and conversing at the same time were difficult to do. H.5.3 [ Information Interfaces an d Pres entation ]: Group and Organizational Interfaces  X  collaborative computing, computer-supported cooperative work Measurement, Design, Experi mentation, Human Factors. Benefits of collaboration, sy nchronous collaboration, collaboration frameworks, collaboration experi ments, common mental models. That com puter-m ediated collaboration capability does indeed benefit group work has been the operating hy pothesis of the field of Computer Supported Cooperative Work since its inception. However, not only is demonstrati ng the truth of this hy pothesis still surprisingly tricky to do in practice, but sim ply answering the basic journalism questions about the benefits of collaboration is NISAC and related programs are frequently called upon for fast turnaround analy ses (FTAs) of th e impact of a potential event on critical infrastructures. The prim ary m etrics for this high-pressure, tim e-cons trained collaboration (which can be characterized as  X  X ollaboration in a crisis X ) are tim e to solution and quality of solution. A prim ary tim e consum er is the inform ation exchange required to establish a common mental model (also called a  X  X ommon analy sis picture X ) of the problem(s) and solutions(s) among all members of the analy sis team. Num erous observations of FTA team s have distilled four stages in form ing a com mon analy sis picture (s ee F igure 1 below). The firs t stage is aw aren ess , and consists of two le vels: The identification of other members of the analy sis team, and the knowledge of the specific tasks that they are currently working on. The second stage is specializ ation , in which subgroups form to carry out the overall fast analy sis task. These subgroups are formed recursively , and reflect the hierarchical s tructure of the particular fas t analy sis problem . The third s tage is synchroniz ation , which also consists of two levels: Ensuring that each m ember of the subgroup is looking at the same thing (comm on data), and in the same way (common view of the common data ). In practice, achieving this synchronization between members of a geographically distributed collaboration community can require a significant amount of time. The final s tage, collaborative interaction proper, is only possible once sy nchronization has been established. Thus a common mental model (a  X  X om mon analy sis picture X ) is formed by a flexible process of iteration through the four stages enumerated above. The number of iterations required to form a com mon m ental m odel is not determ inistic, and is itself an interesting research question. To support such FTA teams, a software framework for synchronous collaboration has been developed. This framework, the Secure Sy nchronous Collaboration Framework (SSCF), 
Figure 1: Stages of Forming a Common Analy sis Picture Internet Inter-ORB Protocol) as the distributed communication mechanism . The use of Java provides cross-platform portability  X  SSCF currently runs on Windows, Macintosh, and Linux com puters . The fram ework is deploy ed as a s et of J ava packages in a s ingle J AR (J ava ARchive) file. The Java drag-and-drop AP I is used to drag a simulation graph or OpenGL (Open Graphics Language) image onto the screenboard panel. Each collaborator is both a client of and a server to all the other collaborators in the session, so the network topology is truly peer-to-peer. The com munication functions are m ultithreaded, so reader-writer locks are us ed to protect s hared data s tructures . An ins tance of the CORBA (Common Object Request Broker Architecture) Naming Service is us ed to keep track of all the participants in the collaborative session as well as their current subgroup structure. Subgroups can be nested to an arbitrary depth. This CORBA-based, m ultithreaded, peer-to-p eer, subgroup-aware collaboration architecture is sim ilar to the one pioneered in [21] . A lim itation of this architecture is that all com puters m ust be on the same network or security domain; collaborati on transactions cannot currently travers e a firewall. Two optimizations are performed to reduce network traffic. Shared screen im ages are com pres sed in J PEG (J oint P hotographic Experts Group) format prior to transmission and uncompressed at the receiving end. And annotations are handled by collecting the coordinates of all mouse-button-down events in a serializable Java object which is sent as soon as the mouse button is released; the annotations are then redrawn from the coordinates by the receiver. Figure 3: N-ABLE X  snapshot sh ow ing group chat and shared Two fundamental design decisions presented themselves immediately when collaborati on support for FTA teams was considered. The first was whether the collaboration would be synchronous or asy nchronous. Much, if not most, collaboration software in the scientific domain is asy nchronous in nature; see [4] for a recent exam ple. IBM Lotus Team Works pace (a.k.a. QuickPlace) [13] is a com mercial asy nchronous collaboration application with which several FT A team s were fam iliar. The now discontinued Habanero project [3] is a notable exception; Habanero supports sy nchronous collaboration. Of all the Terry Disz in [5]. The stages in the Disz model are Awareness, Interaction, Cooperation, Collaboration, and Virtual Organization. The model applies to the domain of research collaboration. In contrast, the stages of the model in Figure 1 were influenced by previous work as well as by obs ervation of FTA teams. The first stage of the model in Figure 1, Awareness, has triggered a large body of research. In particular, the work by Saul Greenberg and Carl Gutwin at the University of Calgary, as embodied in their GroupKit toolkit, is relevant to this stage; see [12] for a representative example. The second stage, Specialization, is thoroughly discussed in [21], as is the support for fluid creation and dissolution of collaborative subgroups to reflect the hierarchical structure of the task. The third stage, Synchronization, draws on the concept of WYSIWIS ( X  X hat You See Is What I See X ), which can be found in [11] and [34]. These three stages are prerequisites for the fourth stage, collaborative interaction. Although fast turnaround analyses generally involve groups of simulation applications, this in itial quasi-experiment was designed to measure the benefits of co llaboration capability for a specific application-centered analysis t eam, one that formed around the N-ABLE X  agent-based economic simulation tool. Since FTA problems can vary in time durati on from several hours to several days (based on the time-to-answer specified by the customer), the factor level that was varied in the experiments was the time duration of the analysis probl em. Three time durations were investigated: short (four hours within a single day), medium (eight hours, spread over two calendar days) and long (twenty-four hours, spread over five calendar da ys). Two replications of each factor level were conducted. The six analysis problems that were investigated consisted of r eal N-ABLE X  economic analysis questions, not hypothetical probl ems for the purposes of the experiment. Stated another way, the experiment problems were not just similar to the type of work that would be performed for a real customer, they were in fact instances of real work being performed for a real customer. Each problem was reasonably independent of the others, a nd ranged from  X  X s the simulated supply chain in balance? If not, why not? X  to  X  X nalyze the causes of the bullwhip effect in a multi-level commodity supply chain. X  The flow of an experiment was identical to the canonical N-ABLE X  problem analysis cycle. First, a simulation model was created on one of the client desktop machines in XML (eXtensible Markup Language) format. Next, this model was sent to a central server or cluster of servers running in parallel for execution. Finally, the results were streamed out to each of the client desktop computers for analysis by the distributed team. This process was often repeated many times during the course of each experiment. The N-ABLE X  application was used not only to perform the analysis but also, through the use of the collaboration framework described above, to perform the co llaboration between the analysis team members. A four-hour pilot experiment using an artificial analysis problem was conducted in order to exercise the data gathering capabilities and equalize the training effect. Then the six real economic simulation problems were analyzed , one at a time, in a randomly chosen order. (However, the order of one pair of experiments was swapped for analyst availability reasons; the final experiment a particular way relative to their experience on the Chlorine project. ( X  X he basis of comparison is your experience on the Chlorine project, which did not use the collaboration capabilities of the new version of N-ABLE X . X ) In effect, the Chlorine project served as the implied control group. Most of the analysis team was co-located in the same hall. However, one of the participants was located downstairs in the same building, and half of the time another member of the analysis team was located in a satellite office almost three hundred miles away (but connected to the same network). The desktop computers used in this cross-pl atform experiment were almost evenly split between Macint osh and Windows machines. The principal investigator was an on-line observer of each of the experiments, and sat in on th e pre-experiment coordination meetings as well. The investigat or also conducted a post-mortem review of the results of the experiments in order to get feedback and gain insight into the causes of the results. Ideally, multiple analysis teams would have participated in multiple replications of each of the time durations of the experiment, using independent, artificially-constructed analysis problems. This experimental de sign would ensure the widest generality of the results. However, the reality of research on a complex customer-funded project mitigates against the ideal in several ways. First is the exper tise required to use the N-ABLE X  software tool itself. Not only is an academic background in economic analysis necessary, but also many hours (even days) of training and familiarity with the tool. Second, the funding requirement of the customer is that all analysis efforts be directed towards real economic questions of direct value to the project. In other words, investing a month of team analysis effort on artificial problems for the purpose of an experiment would not have been approved by the customer. In practical terms, only the existing N-ABLE X  team had the expertise to work on real problems using N-ABLE X . Quasi-experimental designs (see [2] and [33]) are ideally suited for the conditions described a bove X  X nvestigations in a field setting of complex, long-durati on tasks requiring specialized expertise performed by members of a single group. In situations where multiple randomized experimental groups are not possible, well-constructed quasi-e xperiments can control internal validity such that inadequate hypotheses are properly rejected [2]. The tradeoff, of course, is a lower level of external validity than a randomized multi-group experiment. Thus the design of the experiment described in this paper can best be characterized as an exploratory case study that consists of a quasi-experiment. As a quasi-experiment it is an instance of  X  X nstrumented real work X  using a single group performing complex tasks in an industrial setting, instead of a randomized experiment using multiple groups performing simple tasks in an academic setting. As an exploratory case study, we believe that it lays the foundation for future studies in addition to providing results that will guide future software development of benefit to the funding customer. We also believe the results will be generalizable at least to other distributed simulation analysis teams in the NISAC program, and quite possibly to similar analysis teams in other situations.  X  X doption X  or  X  X ntegration X  effect as the team wove the collaboration capabilities of the software into their group problem solving practice. Sim ilar positive results were obtai ned from questions that probed how well the sy nchronous collaboration capability supported the stages of form ing a com mon analy sis picture pres ented in F igure 1. The average response to each question was between  X  Agree X  and  X  X trongly Agree. X  Table 2 be low summarizes the relevant responses to the questionnaire. Table 2. Re sults fr om Que stionnair e about Suppor t for Stage s of Forming a Common Analy sis Pi ctu re (S cale is 1 [S tron gly Awareness of Team 4.65 0.48 Awareness of Task 4.23 0.76 Sy nchronization of Data 4.4 0.76 Sy nchronization of View of Data 4.32 0.69 However, the secondary operating hy pothesis X  X hat the benefits of collaboration would vary by time duration of the analy sis task X  was not supported by the ANOVA results. The p-values of all but one of the response variables were above the significance threshold of 0.05. However, one response variable X  X greement or dis agreem ent that the com mon m ental model of the problem improved overall with collaboration X  X ad a p-value of just under 0.05 ( F 2,27 = 3.38, p = 0.0491). Further analy sis led to the conclusion that this response vari able was probably not significant either. Examination of the data using a box-and-whisker plot revealed the presence of outliers, which m ay have influenced the ANOVA. Running a Kruskal-Wallis test against the data instead, which utilizes the m edian instead of the m ean and is thus less sensitive to outliers, y ielded a p-valu e of 0.053. This value is just outs ide the range of s tatis tical s ignificance at the 95% confidence level. So why might duration not have been a significant factor? One reason might have been due to the small number of replications of each tim e duration. But another m ight have been due to the  X  X doption X  effect mentioned earlier, coupled with the fact that the long duration experiment s were conducted last. One of the goals of the experiment was to explore the boundary line between sy nchronous and asy nchronous collaboration, and to capture the mechanis ms of collaboration that were us ed outs ide of the collaboration features provided by the software framework. Toward that end, the post-expe riment questionnaire asked four questions: The percentage of collaboration on the analy sis task done sy nchronously as opposed to asy nchronously ; the percentage of synchronous collaboration done in (or through) the N-ABLE X  application as opposed to outside (or around) N-ABLE X ; the asy nchronous collaboration mech anisms used; and the non-N-ABLE X  sy nchronous collaboration mechanisms used. Based on the responses there was reas on to believe that the two percentage-of-collaboration questions were variously interpreted, so the validity of the responses is questionable. Nonetheless, the mean percentage of sy nchronous collaboration for each of the experiments was 97%. Contrary to expectations , that percentage Sue: OK so what is on the screenboard is the outstanding order amount for the first s upermarket in the list Verne: That's Natrona Sue: this to me indicates a stable ordering pattern...so he is not frantic Andy: I'm sorry to draw the conversation back to an earlier comment, did you all figure out why the supermarkets were not happy very early in the sim? Looks like day 8? Sue: I haven't checked yet Andy Andy: On screenboard now makes sense Andy: You get 1 pallet in transit for 3 days Andy: every time you order Sue: right Andy: which is infrequently, since you consume much less than order size Andy: looks right Sue: yes Sue: would I confuse everyone if I put up a new graph now Andy: go ahead Deb: so intransit is part of max storable amt and amt in inventory? Deb: no Deb: go ahead Sue: this graph is the frequency of calls he makes to find butter Verne: I would say he's frantic in the first 10 days or so Andy: Deb: intransit does not count against amount in inventory until received at location of firm Sue: right Sue: Verne: agreed Andy: wow Andy: does market structure change at day 11 somehow? Verne: That's why the supermarke ts weren't happy in the first 12 days. Sue: Verne: correct Andy: So lets see if this hypothesis works for you guys Deb: so you are cross checking call against utility? Sue: Andy: I think this is an artifact of the initial inventories not all being the same at each butter producer Andy: although aggregate demand is balanced, order chunks are very large multiples of individual demand Sue: Deb: remember you did that earlier with your graph of 4? Andy: therefore, first supermarkets to place orders suck large quantities out of market Deb: yes Andy: causing starvation for other supermarkets until they can get 1 order in Sue: Andy: agreed Several qualitative results also came out of the quasi-experiment. Perhaps the most important is that group insight ( i.e., formation of a common mental model of problems and solutions) often occurred while the group was discussing a nd annotating a shared screen image. These screen images generally contained a graphical presentation of the output of the simulation. The critical importance transmission of a shared screen image, around which subsequent collaboration coalesced. Sometimes several screen images, transferred files, and chat transcripts formed a  X  X onversation package, X  a collection of related collaborative interactions. And sometimes the series of collaborati on chapters or episodes exhibited a hierarchical structure, such that the chapters were really subchapters of a larger chapter, which often constituted one of the tasks in the implied task list or age nda that drove the analysis for the experiment. The implications of th ese observations for the design of synchronous collaboration software w ill be explored in a subsequent paper. An illustration of the observations above is provided in Figure 5, which consists of two contiguous ch apters from the chat transcript from one of the experiments. E ach chapter begins with the transmission of a screen image, a nd subsequent interaction is based on that shared screen image. Th e second chapter is annotated by bracketed tags that delineate the points at which collaboration around a shared screen image triggered the recognition of a problem by a particular individual, then the creation of a common mental model within the group of the problem, followed by a common mental model of a solution, and fina lly a refinement of the solution. However, not all chapters were bounded by the transmission of a shared screen image. Some floated free of the analysis context, and were often triggered by other stim uli in the environment.  X  X umor X  chapters occasionally occurred, especially toward the end of the experiments as the use of the collaboration capabilities became second nature and functioned as ju st another mode of expression. But almost all of the collaborative interaction was work-related, consistent with the re sults reported in [17]. Another qualitative result relates to the type of work that was appropriate for the collaborative environment. There were two types of complex collaboration tasks for which the synchronous collaboration capabilities provided by the framework proved inadequate X  X he characterization of the problem space of the analysis, and the design of the simulation software itself. This inadequacy was recognized during the pilot experiment, and all subsequent experiments began with a face-to-face meeting (geographically expanded via teleconference when necessary) in a room with a whiteboard, in order to characterize the problem space of the upcoming experiment and to perform an initial division of labor. The need to perform these kinds of complex tasks was one of the main causes of switching from the computer-based collaboration tools to other forms of sync hronous collaboration, which is consistent with the results reported in [26] but not with the results of the follow-on study in [17]. The primary reason expressed for why the software framework was inadequate for these types of tasks was that it serialized textual and graphical communication instead of allowing both to be done simultane ously by the same person. For example, it was physically impossible for the same person to type a chat message and to annotate a shared screen image at the same time. During the face-to-face meetings the use of a whiteboard allowed simultaneous conversation and annotation, which was crucial for the rich interaction required for problem space characterization and softwa re design. Conducting a phone teleconference by speakerphone while using the collaboration tool, or supporting voice-over-IP (Internet Protocol) through the collaboration framework itself, may resolve this inadequacy. Like other studies (see [24] for a summary), participants reported a more egalitarian consideration of individual contributions. The task list, move the team to the next item on the agenda, and close the chapters or episodes in the collaboration ( i.e.,  X  X rap a scene X ). A fifth request was the ability to vote ( X  la Habanero), which could be used during problem and solution determination, and in moving from one agenda item to another. Sixth was the ability to display multiple shared graphical images side-by-side, at the same time, for comparison purposes. A seventh was to make the file transfer capability more robust, improve its performance with large files, and add a progress bar. Eighth wa s to provide a rich set of awareness glyphs on the peer awareness panel, which could indicate the status of a particular team member ( i.e., away from keyboard, on the phone, etc.) and perhaps even the particular task they are working on. This feature is similar to what the Eclipse  X  X azz Bar X  [16] provides in a team software development environment. And a final request was to timestamp and add threading capability to chat conversations. The perception of the N-ABLE X  modeling, simulation, and analysis team was that the use of the built-in synchronous collaboration framework improved the ability of their team to form common mental models of bot h problem(s) and solution(s), compared to a previous project in which synchronous collaboration capability was not available. The collaboration capabilities improved not only the time it took to form a common mental model, but also the quality ( i.e., depth of understanding) of the common mental model. The team also agreed that the collaboration framework supported key stages in a model of collaboration appropriate to the domain of rapid simulation and analysis of critical infrastructure threats (depicted in Figure 1). This model was based on the empirical observation of several fast turnaround analysis exercises. However, the operating hypothesis that the benefits of synchronous collaboration capability would decline X  X r even vary X  X y the time duration of the analysis was not supported by the data from this quasi-experiment. In addition, three qualitative observations were made: group insight ( i.e., formation of a common mental model) often occurred wh ile the group was discussing and annotating a shared screen image; the collaboration generally did not proceed linearly but episodically, in chunks or chapters, with the transmission of a shared screen image forming the line of demarcation between episodes; and two types of collaboration X  characterization of the analysis problem space and the design of the simulation software itself X  X ighlighted an inadequacy of the collaboration framework because of the inability to gesture and converse at the same time. Sandia National Laboratories is a multiprogram laboratory operated by Sandia Corporation, a Lockheed Martin Company, for the United States Department of Energy X  X  National Nuclear Security Administration under cont ract DE-AC04-94AL85000. [1] Buszko, D., W. Lee, &amp; A. Helal. (2001)  X  X ecentralized Ad-[15] http://www.microsoft.co m/windows/netmeeting/ [16] Hupfer, Suzanne, Li-Te Cheng, Steven Ross, &amp; John Patterson. [17] Isaacs, Ellen, Alan Walendowski, Steve Whittaker, Diane J. [18] Klimoski, Richard, &amp; Susa n Mohammed. (1994).  X  X eam [19] Langan-Fox, Janice, Sharon Code, &amp; Kim Langfield-Smith. [20] Levesque, Laurie L., &amp; Jeanne M. Wilson. (2001).  X  X ognitive [21] Linebarger, John M., Christopher D. Janneck, &amp; G. Drew [22] Mathieu, John E., Gerald F. Goodwin, Tonia S. Heffner, [23] McGrath, Joseph E., &amp; Andrea B. Hollingshead. (1994). [24] McLeod, Poppy Lauretta. (1992).  X  X n Assessment of the [25] Montgomery, Douglas C. (2001). Design and Analysis of [26] Nardi, Bonnie A., Steve Whittaker, &amp; Erin Bradner. (2000). 
