 1. Introduction
Improving the relationship between Government and Businesses (G2B) is a major challenge for eGovern-ment programs. Current trends in Information and Communication Technology (ICT) aim to exploit the development of platforms for supporting G2B interactions by means of knowledge exchange and service provision [49,59,58] . Moreover, information technology has a relevant effect on competitive advantage [50] , due to the strategic role of information as a fundamental resource in business interactions. According to
Normann and Ram X  ` rez [44] a key issue in providing a service/product offering valuable for a customer consists in providing access to the knowledge enabling customers in  X  X  X reating value in a better way, whatever better means for the customer  X  .

Since ICT has been considered the critical enabler to support service-based interactions, a great attention is nowadays on Service Oriented Computing (SOC). Although in the next future SOC promises to provide the technological and computational framework on which service centric applications are based, a large number of services are currently provided with partial or without any use of ICT technologies. This depends on different factors such as the high costs of the implementation of services, and the costs and risks of change management initiatives at the organizational level. Besides other domains of interest, such as e.g. healthcare, education, and transport, one paradigmatic case concerns eGovernment, where only few services are available via Web at the transaction level, and most of them are available via Web only at the informa-tive or at the bilateral interaction levels [32,13] . In this paper we adopt a general perspective on services, considered as a series of activities of more or less intangible nature, which have place in an exchange between a supplier and a customer, where the object of the transaction is an intangible good [27] . This general per-spective encompasses (i) traditional not web-based business services, (ii) e-Services, defined as services pro-vided over electronic networks [55] , and (iii) Web services, that are the software systems designed to support interoperable machine-to-machine interactions over a network [10] . ICT can enhance service-based interac-tions by focusing on the role of knowledge also when services are not delivered as Web services and SOC is still at an early stage of implementation. In order to enhance service provision in such contexts, a first goal is to support the access to the information about offered services exploiting advanced Web technologies; a sec-ond goal consists in enabling the customer to understand which of the offered services are more valuable from its perspective.

In this scenario, Government to Business is a challenging domain, due to the administrative bureaucratic traditions that, on one hand, bind the action of public administrations in the dynamics of co-production of the value system, on the other hand, make the discovery, selection, and access to value added services com-plex for businesses. Taking this into account, our research focus is on how to enhance a value-based access to the knowledge [44] involved in the G2B services according to the broad notion of service provided here above. In order to understand the relevance of the case, we provide some figures related to Italy from Censis-
Confcommercio [16] . Opening a new business in Italy requires nine different administrative and fiscal fulfill-ments, for an amount of 13 person/days and a total cost of approximately 3600 euros, compared with approximately 200 euros in England and 300 euros in France. The administrative fulfillments during the life of the business are even more costly. For example, all variations in relevant information on businesses, such as address and type of activity, have to be communicated to Chamber of Commerce, Social Security, Social
Insurance, Ministry of Finance and several other ministries and local public administrations. The estimated total yearly expenditure for administrative fulfillments is about 13.7 billion euros, where the cost for each single business is 11,600 euros. If we consider that 95% of businesses in Italy have less than 10 employees, we may understand how critical the burden is. On the public administration side, costs are of the same order of magnitude; the main reasons for these costs are the complexity of legislation, the fragmented nature of
Public Administration, and the heterogeneity and redundancy of business registries among administrations [4] .

In this paper we present an approach based on a semantic repository to support the interactions between service providers and customers in the G2B context. The approach exploits an explicit representation of the knowledge involved in such interactions to support (i) providers in the effective delivery of information about services, and (ii) customers (businesses) in the value-based selection of the services. To achieve this, the repos-itory enables semantic navigation and provides metrics and an algorithm to support businesses in selecting the most valuable services from their perspective.
 The paper is organized as follows. Section 2 presents a cooperative architecture solution based on a registry.
A major difference in the registry-based solution with respect to other business registries is the association of services to business processes through the value chain perspective. Limitations of the registry-based solution are discussed. With the goal of exploiting the knowledge involved in G2B interactions, these registries are enhanced in Section 3 with an ontological representation, resulting in a semantic repository. The ontological representation partly extends OWL-S, an existent ontological framework for the semantic description of Web services. In Section 4 the value-driven selection of services is discussed by presenting how the services can be browsed in the repository, the formulas for value attribution to services and the algorithm exploited to support service selection. Section 5 provides two examples that show the effectiveness of our approach in the navigation from business processes to related services and in the value-driven service selection. Related work (Section 6 ) and future perspectives (Section 7 ) conclude the paper. 2. The approach based on cooperative architectures and repositories of services
The approach followed in the design of technological architectures to reduce the costs and burden of service provision is based typically on a cooperative architecture that with some variants follows the general structure shown in Fig. 1 , where on the left hand side the traditional stovepipe approach is represented: three agencies are considered, namely Social Security, Social Insurance, and Chamber of Commerce. The main interventions concern the introduction of two layers, namely (i) the common front office layer , that has the goal of filtering the differences among the administrative procedures and virtually showing the users a unique seamless set of agencies, and (ii) the common back office layer , that allows public administrations to interact in order to exchange data and knowledge already available.

A central role in the architecture is traditionally played by a registry , that represents several descriptive properties of services, allowing the user to perform service selection using query languages or browsable ser-vice maps [42] . Examples of properties in available registries are (i) the interaction level , that is the online sophistication of public administrations X  services, where the levels are: (1) information, (2) one-way interac-tion, (3) two-way interaction, (4) full online transaction, including delivery and payment [12] , and (ii) the life event , classifying eGovernment services around relevant stages in the life of a business.

Descriptive properties in the available registries are not sufficient to provide businesses with the knowledge necessary to access the most valuable services for their activities. In a value creation perspective, businesses and public administrations are to be seen as the actors involved in the co-production of the value system; as such, they need to be supported by rich information. Businesses need to know the full capabilities of public administration services in order to obtain the most valuable ones for their business processes; public admin-istrations take advantage of an integrated representation of their global offering of services.
In Barone et al. [4] we have proposed a repository of services basically consisting of a registry; the repos-itory adds new properties to allow effective use (i) in the front office layer, to enable businesses to select useful services and (ii) in the back office layer, to allow public administrations to develop/reengineer services through reuse. The conceptual schema of the repository is shown in Fig. 2 , where services are related to (i) their pro-vider, both private and/or public (in this last case, the administrative processes involved in service provision are represented), (ii) the business processes invoking them, and (iii) the activity sectors of businesses they are relevant to. Finally, activity sectors are associated to business processes. In Fig. 3 a view from the repository shows, besides interaction level and life events , new properties of services, namely business process and relevance . The association between services and business processes allows businesses to identify needed ser-vices and public administrations to analyze the impact on business processes of the services they own. Rele-vance provides a qualitative measure of service value as established by domain experts on the basis of an overall evaluation of the impact of a service in different business contexts. This weak and coarse-grained approach to the definition of relevance is improved in the semantic repository (see Section 4.2 ). Further prop-erties, such as, e.g. number of potential users and service frequency , may be added to allow public administra-tion achieving awareness of the effective use of services from businesses.

In order to populate the repository with the different types of information, we have analyzed the available documentation in the Web sites of the Italian Department for innovation and technologies, that centrally coordinates eGovernment projects, and in a sample of the many eGovernment projects developed by local public administrations. The outcome of this activity is a repository of about 450 services.

Notwithstanding the rich representation of features useful for businesses, the repository as described above is not enough. In fact, in the repository we can retrieve information about services through targeted queries, while it is difficult to support users in discovering the whole available knowledge. Adding semantics to the repository through an ontology enhances both the access to knowledge about services and its management, by making explicit and understandable the conceptual model according to which the knowledge is organized.
Developing the repository as an OWL-based knowledge base makes it easier to support the navigation of the knowledge, exploiting the ontological linkages between different entities, e.g. between services and processes.
Moreover, different criteria for classification of services can be easily integrated to provide users with different browsing paths. Finally, automatic reasoning techniques can be adopted to infer implicit information pro-vided by the repository and to support users both in enriching the repository and in discovering the knowledge contained. 3. The semantic repository of services
The high-level organization of the semantic repository of services is shown in Fig. 4 . This section describes the formalism used for the repository and its content. 3.1. Which semantics for the repository?
Research on ontologies has developed a number of formalisms and tools which support the representation, design and maintenance of ontologies and the development of applications based on them. Given the well known mapping between the XML-based OWL dialects and their logical counterparts in the family of Description Logics (e.g. see Ref. [63] and references therein), the ontology has been formalized in SHOIN D , a Description Logic (DL) that corresponds to OWL-DL. OWL-DL is also the language in which
OWL-S is represented; OWL-S is an ontology developed for the representation of Web services that the ontol-ogy presented here partly extends. For the DL syntax and semantics we refer to Baader et al. [2] .
With respect to the DL-specific terminology, we just recall that: (i) a DL knowledge base consists of a ter-minological part (TBox), containing the set of axioms referring to concepts and relations of the ontology, and an assertional part (ABox), containing assertions about individuals; (ii) binary relations connecting concepts and individuals are called roles (in OWL they are referred to as object and datatype properties ); (iii) the ele-ments on the right hand side of a role are called fillers of the role. Moreover, we adopt the usual notation with uppercase first letters for concepts and lowercase first letters for roles and individuals. The ontology is built from requirements concerning the eGovernment domain, and is aimed at supporting three types of users:
Businesses, that are supposed to navigate the repository through a Web interface, browsing for services, and being supported in the selection of services according to value/quality parameters.

PA service providers that update the knowledge in the repository, by exploiting the ontology when they need to introduce and describe new services. While PA users cannot be assumed to be skilled in ontology management, they should be made able at the same time to autonomously update the knowledge about services, after a light training.

Maintainers of the repository, providing them an ontological framework to possibly enrich the knowledge with concepts and axioms for enhancing the organization of the content and its retrieval. Only ontology maintainers are supposed to have strong skills in Semantic Web technologies.

The above discussion on the roles and skills of the different users of the repository leads to the following assumptions: PA service providers should be able to update the ABox of the ontology, by inserting new instances and statements; ontology maintainers should be able to modify the Tbox by introducing new con-cepts and new axioms according to the model discussed in the following. According to the above guidelines, the ontological representation provided for services is based on a reasonable balance between the expressive-ness of the representation, to support the retrieval of information about services, and the understandability for PA users to perform semantic annotation.

In order to further make easier the access to and the update of the repository, we make use of NavEditOW [9] , a tool for the development of semantic applications, where non-skilled users are supported in updating via
Web a knowledge base through ABox editing (see Section 4.4 for further details). The tool and the above dis-cussed access and update policy, have been successfully applied in several contexts such as the archaeological domain [8] . 3.2. Abstract and concrete services, OWL-S web service descriptions and top-level ontological concepts
In the G2B context, issues concerning the institutional context of service production and delivery need to be considered. Public Administration (PA) is organized in many countries at two levels, corresponding to central about 8000 municipalities). Administrative services for businesses are established by law, and a public entity (in the following, the owner of the service) is chosen as responsible for service supply; a central PA or, collec-tively, a type of local PA can be chosen as owner of a service, e.g., in Italy municipalities are owners of the service  X  X  X hange of address from a Municipality A to a Municipality B  X  . The service may be supplied by one or more public or private providers.

As a consequence, an important ontological problem related to service granularity arises. Services can be represented at two levels: abstract services , established by law and having an owner (e.g. the service  X  X  X pdate business address  X  at the Chamber of Commerce), and concrete services , provided by a specific provider, e.g. the previous service provided by a Chamber of Commerce itself or by a private provider. Due to the above distinction, the ontology includes the two fundamental disjoint classes  X  AbstractService and Con-creteService  X  and the two DL roles hasConcreteService and hasAbstractService (one is the inverse of the other one); an axiom specifies that a concrete service has one and only one abstract service associated to it. Abstract and concrete services are therefore represented as individuals; abstract services are further organized in a set of relevant classes according to the classification given in Fig. 5 . This classification has been produced as the result of a clustering activity carried out by a panel of domain experts. According to the assumptions discussed at the beginning of this section, considering the two distinct classes of abstract and concrete services, rather than representing a concrete service as a further specified abstract service, has a sig-nificant advantage: if also abstract services are inserted as individuals, the description of the abstract service can be performed by PA service providers instantiating a definite set of relations of the ontology, instead of writing down TBox-level axioms.
As discussed in the introduction, we address a broader concept of service than Web services, which is inde-pendent from its implementation. Nevertheless, an important issue to discuss concerns the opportunity to use existing frameworks developed for the semantic description of Web services in order to represent one of the two classes of services introduced above or both. With respect to this issue, we observe that abstract services are not actually provided, but represent a kind of fine grain classification of services. Conversely, a concrete service can be implemented as a Web service.

Frameworks for Semantic Web services representation such as OWL-S [40] and WSMO [54] although still under active development provide two models supported by a community, a rich expressive power and a num-ber of tools and techniques to support developers in annotating Web services at design time. In particular, those two frameworks provide two ontologies for the description of services whose mutual relationships have been clearly discussed in the literature [37] and that can be related to an abstract model described by Keller et al. [34] . Although we refer to the model of Keller, with respect to our assumptions both WSMO X  X  and
OWL-S X  X  levels of detail result in time-consuming activities for service annotation; moreover, such activities would be feasible only for people with a strong background in knowledge representation. In OWL-S, in fact, different aspects of Web services are taken into account by describing the ServiceProfile (the description presented by the service to support mainly discovery and composition), the ServiceGrounding (to refer the description to the actual operations of the service with the handled parameters), and the ServiceModel (the description of a service as a process).

Our solution is to loosely integrate our ontology, mainly targeted at supporting the discovery of knowledge on services and their selection, with the OWL-S ontology. This is done by considering ConcreteService as an extension of the OWL-S class service:SeriviceProfile . advantages: (1) if a concrete service is implemented as a Web service, an instance of the class ConcreteService (2) the attachment in our ontology of G2B domain dependent information to the class ConcreteService (3) the approach proposed here to support the navigation and selection of services, which is strongly based
We can therefore consider two main levels of detail for the semantic descriptions associated to services; a first coarse-grained part of the descriptions concern (i) some aspects of concrete services particularly relevant to foster navigation and selection, and (ii) the high-level specifications related to abstract services; a second fine-grained part of description can be associated to concrete services exploiting the OWL-S model. The first level consists of the minimal part that PA users need to fill in order to support businesses in discovering the knowledge of the semantic repository and in selecting the best services. The second level can be used to refine the descriptions of concrete services, in particular when such services are implemented by Web services.
Fig. 6 shows the top-level concepts of the ontology and some of their subclasses (arcs represent is-a rela-tions). A set of top-level concepts in the ontology which directly refers to service descriptions (in the figure, on a darker background) is Service , AbstractPreconditions , AbstractEffects , ServiceType ,
ServiceAggregation and Actor ; Process concerns both administrative processes and business pro-cesses, respectively grouped under the disjoint classes AdministrativeProcess , on the service side, and BusinessProcessUnit (this aspect will be detailed in Section 3.4 ). The top-level concepts related to business-related information (in the figure, on a clearer background) are BusinessValueType , Activ-itySectorOfBusiness , and LifeEvent . Two further top-level concepts on the borders of the two areas are Territory  X  representing the areas ruled by local PAs where businesses are located and where services are provided  X  and Resource  X  representing resources involved in service provision, such as financial resources, channels and non physical objects such as capabilities. Exploring exhaustively the whole ontology and the axioms defining it is out of the scope of the paper. We will focus on the more relevant aspects, that is the representation of services, of business-related information and of business-process associations. 3.3. Information about abstract and concrete services
Fig. 7 sketches the main aspects of the ontology related to services. Straight lines represent is-a relations, while dashed lines represent other object properties, whose range is defined by the pointed concepts. Other properties are represented as slots as well. We represent properties in the OWL-DL notation, inserting classes of range restrictions into brackets. The knowledge associated to each abstract service consists in: one and only one object of class AbstractPreconditions ; this class provides a coarse-grained repre-sentation of what is required to obtain a concrete service associated to the target abstract service; it is spec-ified by the roles hasDescription  X  String  X  , and hasRequest  X  Request  X  , where Request Resource ; one and only one set of effects, grouped into the class AbstractEffects , specifying in a coarse-grained perspective the outcomes of the service; service effects are specified by a text description ( hasDescrip-tion ) and by two properties: hasContent  X  Document  X  and [ Capability [ Registry  X  ; an axiom states that at least one of these two properties must hold; the classes
Document , FinancialResources , Capability and Registry are specified by a number of prop-erties each; a set of non-functional properties further describing the abstract service, i.e. hasOwner , hasDescrip-tion , isAccessibleTo , hasBeneficiary (identifying the type of users), isAssociatedTo ( Busi-nessProcess ), and hasServiceType . This last property specifies if the service has administrative or value added value type. Administrative services accomplish prescriptive public administration obligations, strictly related to laws to be enforced (e.g. the provision of an authorization); value added services have the primary objective of enhancing business performance and producing effective outcomes (e.g. provision of territorial information useful for marketing). A number of other service types could be added in the future. As discussed in the above section, ConcreteService is subclass of the OWL-S class ServiceProfile .
In this paper we exploit mainly our extension and we refer to [39,40] for details on the descriptions of Ser-viceProfile . ServiceProfile mainly specifies some properties concerning contact information (which are fully exploited in our model), the connection to standard classification taxonomies, and the functional description of the services. The core of functional descriptions consists of inputs, outputs, preconditions and effects of a service, which are specified by axioms expressed in some logical language. The relationship between the resulting extended ontology and the OWL-S model are further discussed in Section 6.2 .
With respect to our extension for the G2B context, concrete services add a piece of information to the abstract services they are associated to. Characteristic properties of concrete services that extends the
OWL-S model are the provider (with the role hasProvider existentially restricted on Provider ), the channels through which the service is provided ( isProvidedViaChannel ), and a number of qualities.
The qualities of the concrete services have been selected according to their concrete measurability, they are: (i) the interaction level ( hasInteractionLevel ), (ii) the price of the service ( hasPrice ), (ii) the average time spent to request the service ( hasAverageRequestTime ), and (iv) the average delivery time ( hasAverage-
DeliveryTime ). The interaction level and the cost are acquired from the Web, while request time and deliv-ery time can be evaluated with a quantitative measurement through the process workflow engine if available [69,21] , or with a qualitative evaluation through surveys on customer feedbacks.

Each class of the taxonomy of services in Fig. 5 inherits the basic schema for the class AbstractService and may specify it with additional information related to non-functional properties and range restrictions on
AbstractEffects (and possibly AbstractPreconditions ) with proper subclasses; e.g. the class Cer-tification is defined through the class CertificationEffects , whose role hasContent has at least a filler of class Certificate .

To enhance the business perspective, a number of subclasses of services have been axiomatically defined allowing automatic reasoning techniques to infer the repository implicit knowledge. These classes are Aggre-gateService , E-Service , Web-Service , PrimaryService , SupportService , Administra-tiveService , and ValueAddedService . AggregateService is defined by the following axiom:
ServiceAggregation is a sibling class of Service which reifies an n -ary relation pattern ; this relation pattern establishes a logical relation among an aggregate abstract service s and a set of abstract services t ; ... ; t n whose composition has equivalent effects. This equivalence relation can be defined as follows: assume that AbstractEffects are represented in a DL knowledge base K , and consider a set of ABox statements
A and A t associated respectively to the AbstractEffects of two abstract services s and t . An abstract ser-vice s is said to be equivalent to an abstract service t up to Kiff A service aggregation, this relation can be generalized to the equivalence between the effects of an aggregate ser-vice s and the effects of the set of services t 0 ; ... ; t
A discussed in Section 5.2 .

E-Service is defined as the class of all the concrete services provided via Web, together with the abstract services that have at least one concrete service provided via Web. For the definition of WebService we exploit the OWL-S ontology inherited through the concept ServiceProfile ; a Web service is a concrete service related to at least one service:Service through the OWL-S relation service:presentedBy ; the OWL-
Sclass service:Service is then linked to the WSDL of a Web service. Therefore, with respect to the distinc-tion among services, e-Services and Web services discussed in the introduction, in our ontology E-Service is a broader concept than WebService ; in particular, since Web services are always provided via Web, the WebSer-vice class is subclass of those concrete services that are also E-services (the converse does not hold).
An AdministrativeService (value added, respectively) is a service that has an administrative (value added) service type; if new service types are added, other classes of services can be axiomatically defined in a similar way. This means that PA service providers can add the available service types through ABox updates, and, consequently, the membership of services to the corresponding classes can be automatically inferred. For-mally the above definitions are established by the following Tbox axioms:
The meaning of PrimaryService and SupportService is based on the service-process association; where a primary (support) service is a service that is associated to a primary (support) business process (see
Section 3.4 ). 3.4. The business process representation
Business-related knowledge is represented through a set of concepts in the ontology. As mentioned above, abstract services may have as targets ( hasTarget in the ontology) some ActivitySectorOfBusiness which are associated to categories of businesses (as defined, e.g., in business classifications of national statis-tical bureaus). Furthermore, the most relevant aspect of the information related to the business perspective is the association between services and business processes. Businesses perceive processes, made of atomic activ-ities. They do not perceive services needed, and the impact of services on processes. Business process represen-tation is based in our ontology on the value chain model of Porter [51] , which is considered a tool for diagnosing and enhancing the competitive advantage of a business, by disaggregation of its most relevant activities. Porter X  X  value chain is one of the most influent and recognized models for defining relevant value activities within a business in a productive system [44] . The Porter X  X  approach conveys a classification model of business processes that reveals useful to map the impact of a given service on business value. Processes at a high level are classified in two types: the primary activities , that are involved in production, sales and assis-tance, and the support activities , that support the former.

The ontology provides a hierarchical model of business processes based on Porter X  X  value chain (see Fig. 8 : dashed arrows represent composition relations; the associatedTo arrow entering Activity represents the existence of at least one association of services to activities). The top-level concept is BusinessProcess-
Unit , whose subclasses are process units at different granularity levels, namely, MegaProcess (the macro level), MajorProcess , Process , SubProcess and Activity (the lower level). Process units of upper-level classes are composed of units (through the role composedBy ) of straight lower-level classes (e.g. mega processes are composed of major processes). An exception is made for objects of the class Subprocess that can be composed of subprocesses as well. Moreover, according to the Porter X  X  distinction between primary activities and support activities, one BusinessValueType (that is, primary or support ) is associated to pro-cess units through the role hasPorterType ; this association is exploited to define the two concepts of Pri-maryProcess and SupportProcess (see the previous section). The classification of business process units based on these concepts is inherited from upper to lower classes of process units, e.g. all the processes that are parts of a primary major process are primary as well and cannot have support sub-process composing them.
Formally, this is assessed by the axioms (6) and (7) given here, together with other axioms that will be exploited in the examples discussed in Section 5 .

The inheritance principle conveyed by axioms (6 and 7) may appear too strong, since it may be argued that primary process units can be composed also by process units which are not primary for a business. However, the strong interpretation given here is based on Porter [51] , where activities composing primary activities are still considered primary activities. A further classification (not included in our model) is then introduced to weight the relevance of sub-activities for the activity they compose. 3.5. Inferences supported by the semantic repository
One of the core aspects of the approach based on semantic repositories concerns the exploitation of infer-ences enabled by the ontology to support the repository maintainers and, especially, to increase the knowledge explicitly provided to users. Four kinds of state of the art inferences are enabled by the semantic representa-tion of the repository. We shortly discuss them to show their usefulness in this context.

Consistency check enables sound update of the service/process top-level ontology and provides better con-trol when changes on the TBox are performed by maintainers.

A second class of inferences is based on inheritance . An example of inheritance is shown in Fig. 9 , that refers to services providing the update of the Social Security (SS) and Chamber of Commerce (CC) registries. Thick straight lines represent is-a relations, tiny straight lines represent membership of classes and dashed lines represent other kinds of relations.

Inferences based on semantics of relations enable to exploit the properties of transitiveness, symmetry, functionality and inverse, in order to enrich the information extensionally contained in the repository.
As an example, the two roles hasConcreteService and hasAbstractService are defined as one the inverse of the other: when a relation is filled in the other is automatically inferred.

Finally, we consider classifications based on definitions and type inference . In order to infer that an instance is a member of a class or that a concept is subsumed by a second one, it is possible to exploit definitions of equivalent concepts and relations; this reasoning activity offers some useful inferential power. We present two examples. First, the value of processes according to Porter value chain can be automatically inherited from higher level processes to all the component sub-units. This is not a pure inheritance, since it is based on the semantics of a mereological, and therefore non-is-a , relation (the inference is based on Axiom (7) ).
Moreover, by exploiting an analogous inferential mechanism, it is possible to associate a Porter value (primary or support) to services, according to the value of the processes they are associated to. A second example, sketched in Fig. 9 , concerns the classification of services as members of the AggregateService class: the individuals in the gray area are inferred to be aggregate services. It is possible to automatically infer that updateAddressSS-CC , which updates both the SS and CC registry, is an aggregate service on the basis of (i) Axiom (1) of Section 3.3 , (ii) the inference of aggregate being the inverse role of aggregate , and (iii) the existence of an instance of ServiceAggregation with updateAddressSS-CC as filler of aggre-gate , and both updateAddressSS and updateAddressCC fillers of aggregated . Moreover, according to Axiom (1) , updateAddress#3 is an aggregate service as well (its abstract service is an aggregate service).
The above inference is applied in the next sections. 4. Value-driven semantic selection of services In this section we discuss how businesses can exploit knowledge in the semantic repository for enhancing
G2B interactions. The inferences discussed in Section 3.5 support both providers and businesses. Providers are supported in the maintenance and enrichment of the repository, mainly with respect to consistency check and inheritance. On the business side inferences enhance semantic navigation, retrieval and value-based selection of services. 4.1. Navigation, retrieval and selection of services
In the G2B context, the repository can be navigated from two main perspectives: (i) the service/process association and (ii) the activity sector of business. The service/process association leads to an integration of the knowledge about business processes and services through the Porter value model. The ontological repre-sentation of business processes provides direct access to the associated services; businesses have therefore an ontological map they can use to improve process efficiency, enhancing awareness by showing services needed in a certain activity, and the impact on value of services on the overall value conveyed by processes. This rep-resentation also supports businesses in the value-based design and/or re-engineering of a given process.
Indeed, the repository offers a business model where the activities composing a process are shown together with the resources used and the services required to produce the expected output.

Moreover, the repository can be navigated exploiting the linkages between abstract services and the activ-ity sector of businesses. As an example, a business operating in the furniture activity sector may be inter-ested in retrieving all related value added services. Moreover, it may be interested in discovering which services are provided in its area of operation. The ontology supports the discovery of abstract services related to a given activity sector, e.g. Customs Duty Information , Suggestions on Foreign Business Opportu-nities , Country Risk Analysis . From these abstract services it is possible to reach all the related concrete ser-vices, e.g., Foreign Business Opportunities is provided by the Lombardy region and by Chamber of
Commerce. It is also possible to navigate properties associated to concrete services, such as cost, average request time, and so on.

Navigation enhances user awareness of the knowledge contained in the repository, enabling the retrieval of more specific information by means of semantic queries. Complex path queries can be used to constrain the focus of the request (for an overview of semantic query languages see e.g. [3] ). As an example, consider the retrieval of all the services associated to business activities composing a macro process. As pointed out in Sec-is therefore possible to have an evaluation of the service value, retrieving services that have been inferred to be, e.g., support services.

In order to support businesses in selecting services according to their quality parameters (see Section 3.3 ), numeric values of such attributes  X  represented in the ontology as datatype properties  X  and of other non-func-tional properties, e.g. levelOfAutomation , can be exploited in semantic query languages (e.g. in SPAR-
QL) to order the results of a selection query. However, sorting the services according to qualities explicitly represented in the repository is not sufficient to support the choice of the best available service. Metrics for quality composition need to be integrated with the ontological representation to provide a richer account of service value. This issue is discussed in the next sections. 4.2. Value attribution to concrete services
In order to support value-based service selection, we need to provide a method to calculate the service value on the basis of service properties. A combination of metrics for quality composition, ontology based reason-ing, and algebraic tree composition can be exploited here. In this section we develop a function for the value of atomic services. In Section 4.3 we extend the function to aggregate services, enabling the formulation of a gen-eralized algorithm for value-driven semantic selection.

To calculate an atomic service value, we first consider administrative services, where the main concern is getting the service with the minimum amount of resources (money and time). For administrative services, the service value can be defined as a function of (i) the service price (Price), (ii) the time spent by the business for requesting the service (RTime), and (iii) the time spent by the provider to deliver the service (DTime).
These qualities are represented in the ontology respectively as hasPrice , hasAverageRequestTime , and hasAverageDeliveryTime . Since the domains of the quality parameters are heterogeneous, suitable normalization criteria need to be defined; we adopt percentage values as normalized costs, where the normal-ization adopted can be defined for classes of services, represented in the ontology, and retrieved when needed.
Moreover, in order to bring in the subjective user perspective on the evaluation of service value, quality parameters are weighted. The total cost of a service is therefore given by the sum of three costs that businesses need to bear in terms of money and time, namely Price, RTime, and DTime, each weighted according to the tive weights, the total cost c s for a service s is c s  X  f function f w c is a weighted average defined as follows:
In order to avoid f w c  X  s  X  X  0, we add as further constraints c
We now consider value added services. In this case, in order to attribute a value, we define more formally the relevance property, roughly introduced in Section 2 . Within the knowledge represented in the ontology, the relevance is based on two relationships between the service and: (1) the Activity Sector of Business , which concerns the influence of the service on the competitive (2) the Business Process that requests the service; this relationship concerns the impact the service has on the business and p is a business process. By parametrization, the relevance of a service s may be expressed by a n  X  5. The function g can be defined for significant aggregations of triples by domain experts, or can be eval-uated, for specific triples, from feedback based evaluation systems.

An example of the first case is the evaluation of a service providing information for territorial marketing for the process openNewSalesPoint . Domain experts may associate a high relevance to this combination for all the activity sectors of business. As a second example, a business that provides in its profile an activity sector a may experience a low relevance in a specific interaction related to a service s for a process p : this leads to a  X  X  X ow  X  rating for this combination from the business.

In order to assess the overall value of a value added service both the relevance and the total cost need to be service is), and positively related to its relevance (the higher is the relevance the best the service is). More for-mally, the overall value v s for a value added service s can be evaluated by composing the two functions r s and c s , where c s is the total cost of the service as calculated for administrative services with formula (10) and is the relevance of s for the business process p and the activity sector of business a . In order to compose the two functions, parameters of each function need to be taken as inputs, that is, an activity sector of business a and a business process p for relevance, and the weights w for total cost. Then, the value v s for a service s can be defined as v s  X  h w ;  X  a ; p  X   X  s  X  , where the function h : h s ; w ;  X  a ; p  X i ! R is calculated as follows:
According to the above formula, the greatest is the ratio between relevance and total cost for a service, the no relevance associated, formula (11) can be exploited to attribute a value to all services. The value for a ser-vice s is therefore given by the function v s , with r s  X  1 as the default value. 4.3. Value-based selection involving aggregate services
In this section we take into account service aggregations; when a service s aggregates a number of services, the value of s must be compared with a composition of the values of services aggregating s . Aggregation can be nested recursively, that is services aggregated in a service may be aggregate services as well.
Service aggregations concern abstract services, while the value is associated to concrete services. Assuming that service aggregations are stratified, it is possible to build composition trees for abstract services and then exploit these trees to generate composition trees for concrete services, for which a value can be calculated.
With the support of these composition trees, it is possible to (i) compare the values of concrete services and their compositions, (ii) generate a comparison table to support users in their selection, and (iii) sort the services according to their qualities. A formal description of the algorithm follows.
 ogy O , (ii) a set of selected services D 2 AbstractService , with AbstractService being a concept of O , of business a and a business process p as optional parameter. The algorithm returns (i) an evaluation of the concrete services related to D and of all their possible compositions, (ii) a rank for these compositions, and (iii) a comparison table Tab D for the concrete services involved. The algorithm is composed of five steps defined as follows: (1) Build the Local Composition Trees (LCT). We start from a set D of previously discovered services. This (2) Build the Global Composition Trees (GCT) . In order to represent the composition structure of ser-(3) Build the Concrete Composition Trees (CCT) . Concrete composition trees are built by substitution of (4) Assign total costs and order composition lists. Let r s and c s be, respectively the relevance and the total cost (5) Show the global comparison table . Results must be presented to users in a suitable way. A local compar-4.4. The prototype
A prototype of the semantic repository has been realized with the support of the software tool for Web-based navigation, query and update of ontologies presented in Ref. [9] . The tool can explore the class and role dependencies as well as the instances of an ontology by means of hyper-links. Reasoning is performed off-line with the reasoner FACT++, while queries are executed on-line with SPARQL, exploiting the ORDER func-tion to sort the results of a query according to a ranking function, in our case sorting services according to quality parameters. Fig. 12 shows the navigation of service properties for the example introduced in Section 3.5 . Fig. 13 shows the answer to a query that finds all the aggregate services of type update business address ; each service in the result is associated to a hyper-link pointing to its description in terms of RDF triples. The repository has been populated with the instances related to the abstract services belonging to the
Income , Certification and Qualification classes of Fig. 5 , and the concrete services associated to them. With respect to reasoning, in spite of the high worst case complexity for satisfiability checking and classification for SHOIN  X  D  X  (ExpTime and NexpTime, respectively), highly optimized reasoners show an acceptable behavior in many realistic cases [63] . Behind worst case complexity analysis, different ontologies behave quite differently with respect to specific tasks. Negation and cardinality restrictions (with cardinality n different from 0 and 1) have not been used in our ontology. Since performance is affected in particular by the exploitation of nominals in TBox, we chose to keep the number of axioms containing nominals small in size. Moreover, for our purposes related to automatic classification, axioms containing nominals can be approximated by nominal-free axioms, scaling down in such a way to a more tractable DL dialect. 5. Case studies
In this section we discuss two examples that show the effectiveness of our approach in the navigation from business processes to related services, and in value-driven service selection. 5.1. Navigation from processes to services
We consider the case of a business operating in the furniture industry. The business needs to open new sales points in a city area, looking for the most competitive locations in the area. We refer to this process as the openingNewSalesPoint process, considered as a subprocess of the territorial development business pro-cess; openingNewSalesPoint is composed by three subprocesses: locationResearchAndChoice , newSalesPointSetUp , and newSalesPointStartUp . The goal of locationResearchAndChoice is to find a location that satisfies the requirements of the business plan and the guidelines of the franchisor.
The business plan broadly identifies the territory where the new sales points must be located. To be effec-tive, location search must be supported by social knowledge about the territory (e.g. number of inhabitants, number of resident households), and about competitors (e.g. number of hypermarkets, number of sales points in the same territory, number of competitors X  sales points, commercial data about their selling, etc.). Collec-tion of useful information from existing databases represents a major issue for the effectiveness of the process.
Moreover, the repository allows businesses to navigate through the different activities of locationRese-archAndChoice , providing views on the abstract services exploited by the process, and on the activities that compose the process. Focusing on the locationResearchAndChoice process, we now consider one of its activities, namely dataCollect , whose goal is to collect information about the territory and the competi-tors. Three abstract value added services member of SupportingKnowledge are associated to this activity in the repository; these services provide access to the databases of the Chamber of Commerce and the Land
Registry Office, and to the geographical databases of the related municipality. In conclusion, the repository provides businesses with the knowledge required for exploiting a process (in our example, Opening a new sales point), and with services to access such knowledge. 5.2. Selection of the best address updating service
Consider the following scenario for the value-driven selection of services: a business has moved its head-quarters and is obliged by law to communicate the change of address to several central/local PAs. PAs involved are Social Security (SS), Chamber of Commerce (CC) and Social Insurance (SI). A number of abstract services of the repository respond to this need: services uA _ SS , uA _ CC , and uA _ SI , respectively update the business address in the SS registry, in the CC registry and in the SI registry ( uA is used here as short form for updateAddress ); service uA _ SS-CC updates the business address in both the SS and CC registries; service uA _ SS-CC-SI updates the business address in all the three registries. These abstract services are members of the superclass UpdateBusinessAddress and have a set of concrete services associated each: uA#1 (with Price = 9  X  ) for uA _ SS , uA#2 (81  X  ) for uA _ CC , uA#5 (40  X  ) and uA#6 (36  X  ) for uA _ SI , uA#3 (105  X  ) and uA#4 (115  X  ) for uA _ SS-CC , and uA#7 (155  X  ) for uA _ SS-CC-SI .In Table 1 the set of the concrete services considered is represented in the first seven rows, the registries they update are put into brackets; the price of services is represented in the second column of the table; columns with headers c P , c
Three instances of ServiceAggregation have been introduced in the repository: the first one has uA _ SS-CC as aggregate service, and uA _ SS and uA _ CC as aggregated; the second one has uA _ SS-CC-SI as aggregate, and uA _ SS , uA _ CC and uA _ SI as aggregated; the third one has uA _ SS-CC-SI as aggregate, and uA _ SS-CC and uA _ SI as aggregated.

In order to choose the most valuable concrete service, we use the evaluation method described in Section 4.2 . Relevance for these services is derived from Fig. 3 and is set as r s  X  1. Applying classification inference mechanisms described in Section 3.5 , uA _ SS-CC and uA _ SS-CC-SI are inferred to be member of
AggregateService . As a consequence, the algorithm of Section 4.3 builds the LCTs for all the abstract services (the LCT of uA _ SS-CC-SI has two atomic composition lists, namely h uA SS ; uA CC ; uA SI i and h uA SS-CC ; uA SI i ). Since uA _ SS-CC-SI aggregates all the other services, only one GCT with this service as root is built; then, the computed CCT presents all the possible composition lists of the concrete services involved, up to the equivalence class uA _ SS-CC-SI .In Table 1 concrete services have been grouped accord-ing to the equivalence classes; all the concrete service composition lists whose effects are equivalent to uA _ SS-CC-SI are provided in the last seven rows with the respective costs.

According to the approach described in Section 4.2 , users play a major role weighting their preferences for assumes w 1  X  60 %  X  C P  X  , w 2  X  20 %  X  C RT  X  and w 3  X  20 %  X  C class of abstract services is enphasised in bold. As far as the service compositions equivalent to uA _ SS-
CC-SI are concerned (see the last seven rows of Table 1 ), the algorithm Compare suggests, on the basis of formula (12) , the combination of the aggregate service uA#3 and the atomic service uA#6 as the best choice, that is, the choice that minimizes the total cost according to user preferences. Notwithstanding the good values for the service request time, service uA#7 , providing a joint update of all the registries, is not evaluated as the best choice because the delivery time is long and the price is highly weighted.

If saving up the service request time is weighted much more than saving up the delivery time, e.g. weights are w 1  X  60 % , w 2  X  30 % and w 3  X  10 % , then service to 2.20, where the second best is 2.02). Conversely, if saving up money is the main concern, e.g. weights are w  X  90 % , w 2  X  5 % and w 3  X  5 % , the more valuable solution results in getting all the services separately, and in particular preferring uA#6 to uA#5 . 6. Related work
In this paper we investigate several research areas related to the concept of service, namely value chain, service oriented computing, repositories and ontologies. 6.1. Service science, value chain, and service oriented computing
Service science is an emerging effort to build a scientific discipline based on the concept of service. Recent research in service science investigates the relationships among the concepts of service (mainly related to the marketing and organizational science research area), eService (related to the eBusiness domain), and Web ser-vice (related to the software engineering area). Despite the fact that the service sector has widely grown over the last 50 years in most advanced industrial economies, however scientific understanding of modern services is rudimentary [17] , and different definitions of service are provided in different domains [68,29] . A service involves an exchange between a provider (a supplier) and a customer (a client) for the provision of intangible assets, where (i) the provider takes advantage of knowledge about the customer X  X  business model, and (ii) the customer needs knowledge of the available services, their qualities and the provider X  X  capabilities [17,57] .
The role of knowledge in co-production of services has been investigated in different disciplines. Research on service marketing [28] analyzes the role of knowledge in service interaction, to enhance the value of services both for the provider and for the customer. In computer science, a critical issue is to provide semantics to rep-resent knowledge in service interactions [57] . Our contribution in the paper is related to Service Science and is at the crossroads of these research topics.

At the state of the art, value-based approaches to services deal with the issue of modeling services that have a grounding in the real world, beyond their Web elements and references alone. ICT business value is defined as the organizational performance impact of ICT at both the intermediate process level and the organization wide level, and it includes both efficiency and competitive impacts [41] . Proposed measurements for ICT busi-ness value include productivity enhancement, profit improvement, and cost reduction [41,20,31] . Approaches with a value-based perspective to exploit eBusiness are also addressed in the area of requirements engineering [25] . Our research effort has different goals with respect to requirements engineering, while we are closer to the decision support systems area [52,1] , in the context of G2B service selection.

ICT is considered the critical enabler in service interactions, in particular within the Service Oriented Com-puting (SOC) paradigm [49] . The idea at the basis of SOC is that the concept of service as Web service can be exploited to enhance the interaction among applications and systems in order to achieve interoperability, inte-gration and collaboration between different actors and platforms. In the research area of SOC [49] , the focus on architectures for Web services raises the issue of integrating functional knowledge about services with knowledge about assets, resources, and business models involved in service-based interactions. Although we do not deal with Web services from an architectural point of view, integrating knowledge about services with business-related knowledge is at the basis of our work.

A major issue in SOC consists in the Quality of Service (QoS) based selection [14,47] . In particular, when the customers are businesses, quality parameters are strongly related to the value the services actually provide to them [49] .

Another critical issue in which our work is related to SOC is the representation and organization of knowledge about services and their value. Indeed, a major area investigated in SOC is the organization and specification of repositories of services to support the retrieval, discovery and provision of Web services. 6.2. Repositories, ontologies, and semantic web service frameworks
A proposal for the definition of a repository technology appears in [43,6] . Repositories of services in the area of distributed computing are proposed in Cai et al. [11] . The role of a service repository in platforms for one-stop-shop eGovernment is discussed, e.g., in [66] . With respect to our repository, the above mentioned solutions are focused on eServices and Web services, and lack knowledge about the business processes, and the environment related to the requested service.

In the area of Service Oriented Architectures (SOA), UDDI registries of services [64] are proposed as repos-itories to support discovery, selection and composition of Web services. For this reason, UDDI specifications bring a lot of information that are irrelevant when Web services are not considered (e.g. information about
SOAP APIs, the SOAP message formats, and WSDL definitions of the SOAP APIs). The purpose of the reg-istry our repository is based on is to enable query and analysis to support decision making for business and PA service providers [4] . The use of UDDI registries outside SOA as decision support systems is seldom investi-gated in the literature. For these reasons, in our case we found it convenient to build a new registry model targeted to general service descriptions; in the next future, the registry will be made compliant with some of the useful UDDI specifications (i.e. white and yellow pages), e.g. in the vein of the approach proposed by Graupmann et al. [26] for Web services.

On the other hand, with respect to the conceptual model for service description, it is frequently recognized in the literature that UDDI registries are poor in semantics [48] and do not provide a description of the ser-vices based on their contents, capabilities, and qualities. Indeed, with respect to UDDI specifications, a num-ber of semantic representations have been proposed on the top of them. For Spaccapietra et al. [60] , ontologies [65,30] are a form of semantic repository, due to their logic components while affording similarity to database conceptual schemas in handling the conceptualization of the represented domain. The role of semantics for service design, publishing, discovery and selection has been largely recognized by the SOC community in the area of Web services [15] , and is addressed through several solutions for service description [48] , and for service discovery/selection [40,53] . This is witnessed also by the recent efforts in developing semantic Web ser-vice frameworks such as OWL-S [40] and WSMO [54] . OWL-S is represented in OWL-DL, while WSMO has developed the WSML language based on Logic Programming, built on top of Frame Logic. Since our ontol-ogy is represented in OWL-DL, here we focus on the relationship between our work and OWL-S; we refer to Ref. [37] for the mapping between OWL-S and WSMO.

As discussed in Section 3.1 we developed a framework aimed at achieving a good balance between expres-siveness of the representation and feasibility of the repository update. Our ontology partly extends OWL-S by interpreting ConcreteService as an extension of the OWL-S class service:ServiceProfile . OWL-S primitives are therefore available to enrich the descriptions of concrete services if needed; this makes our approach modular, in the sense that when Web services are developed they can be linked to the repository, fostering a future integration with SOA-based applications; moreover a rich expressive power can be exploited on demand. However, a substantial part of the knowledge contained in the repository can be maintained and updated by PA service providers, while businesses can focus on high-level information instead of being over-whelmed by complex descriptions.

Abstract services provide a concise functional representation of service functionalities targeted at specifying some properties of interest for the G2B context. This representation is still coherent with the service abstract model of Keller et al. [34] . However the relationship between the two new descriptive classes AbstractEf-fects and AbstractPreconditions introduced for abstract services and the OWL-S functional descrip-tions of services through inputs, output, preconditions and effects needs some discussion. We observe that these OWL-S primitives are very detailed and mainly aimed at supporting different tasks related to Web ser-vice-based applications. Our functional descriptions of abstract services simplify the OWL-S functional descriptions in two aspects. First, inputs and outputs are not considered for abstract services because they tightly refer to the information processed by a Web service, while abstract services are not Web services really processing information. Second, in our model the effects on the world of an abstract service are described through an ontological entity of the class AbstractEffects aggregating a number of properties related to the G2B context; similarly, the preconditions for the service being provided are represented by a domain targeted entity of class AbstractPreconditions . In OWL-S preconditions and effects, have to be repre-sented as logical formulas (they are considered subclasses of the concept Expression in [39] ). This choice of not using OWL-S preconditions and effects to describe abstract services has a number of reasons: (i) the rep-resentation of preconditions and effects as ontological objects allows to provide PA service providers with a uniform schema to synthetically describe effects and preconditions referring to the ontology; (ii) NavEditOW X  X  functionalities related to Web-based ABox editing are difficult to extend for supporting users in editing logical formulas X  syntax (i.e. expression bodies in Ref. [39] are represented as general XML Literals); (iii) the repre-sentation of these aspects of functional descriptions is still under ongoing work (e.g. in OWL-S-1.1 effects have been replaced by results).

Although we do not address service composition in our repository, the issue of discovery equivalences between services is related to the challenging problem of Web service composition and substitutability dis-cussed in SOC. Different approaches have been proposed: Berardi et al. study automatic composition of eSer-vices focusing on their behavior [5] ; Traverso and Pistore apply planning techniques for the automated composition of Web services described in OWL-S process models [62] . Both the above approaches are based on low-level representation of effects, specifying their behavior at the operational level. This level of represen-tation is not relevant in the repository, since we are interested in the final effect of services, independently from their level of automation. De Antonellis et al. study the compatibility among eServices to support the dynamic substitution of failed or modified eServices and provides a framework where equivalences between services are explicitly represented [18] . Our model is quite different, since the abstract effects (the effects of abstract ser-vices) are represented as ABox statements, instead of TBox statements; however, also their approach needs a manual intervention for setting equivalences.

Our ontology of business processes is inspired by Osterwalder et al. [46] and Johannesson [33] , where a busi-ness model is defined as a conceptual tool containing a set of objects, concepts and their relationships with the objective to express the business logic of a specific business. Our approach is close to business modeling approaches, whose goals are recognized as different from business process modeling [24] ; in our case, business modeling is based on Porter X  X  value chain [51] , in order to encompass also strategic issues [7] . As argued by
Gordijn et al. [24] , a business model does not state in details how value-creating activities are carried out: this is an important goal of workflow-oriented business process modeling. However, business process models proposed in the Workflow Management Systems area are framed within very rich models including many low-level aspects related to workflows control, e.g. data flows, role of people involved in the process, and so on [70,67] ; instead, our model focuses on the high-level structure of processes. In this context, business pro-cess models are also considered in the management of collaborative business processes [45] . With respect to collaborative business processes, Decker et al. present a framework for eParticipative process learning, where consensus about a process is created through moderated and web-based discussions [19] ; the process related ontology exploited here is targeted to support collaborative learning of processes and is domain-specific. In
Ghenniwa et al. [23] an integrated environment providing an agent-oriented trading mechanism and a sup-ply-chain integration for the eMarketplace is discussed; a domain ontology is used, but the ontology does not encompass the process semantics which is given by OAG (Open Applications Group) standard business documents and UML interaction diagrams. Other relevant aspects to process modeling and management con-cern business interaction; such aspects, which are addressed e.g. in Ref. [35] from a protocol level perspective, and in Ref. [56] from a knowledge-based negotiation support system perspective, are not addressed in our model. Another problem that is not addressed in our mereological process ontology concerns the representa-tion and verification of business-related constraints over composite processes; a language to express such con-straints in order to enable formal verification is given in Ref. [38] .

Complexity analysis issues for DL reasoning, and in particular for the FACT++ system, are discussed in [63] and in [22] . With respect to this last reference, we observe that nominals have been only recently supported by reasoners, and optimization techniques still need to be refined. 7. Conclusions In this paper we have presented a semantic repository solution to support value-based service selection in
G2B interactions, exploiting a semantic representation of services and their relationships with business activ-ities. For this scope, we provide computational methods to assign value to services on the basis of the knowl-edge represented. We have also developed a prototype that implements some of the reasoning capabilities of the underlying ontology.

The value chain model offers a business perspective that supports the selection of services on the basis of their competitive advantage. Furthermore, a business value chain is part of a larger system that includes sup-pliers and channels to customers. We are presently experimenting the effectiveness of this model in the logistics domain. Besides the value chain, other models have been proposed for modeling value configuration in net-worked interactions [61] ; such interactions, in fact, have a higher degree of dynamics in the configuration of actor roles, service resources, and customer needs. In the future we aim to investigate the adoption of these value configuration models for business processes.

Concerning aggregate services, we have shown that the concept is relevant for reasoning tasks. At present, membership of a service A to the AggregateService class depends on the specification of a relation pat-tern of the class ServiceAggregation in which A is a filler of the aggregate relation. In order to dis-cover service aggregations on the basis of the representation of their effects ( AbstractEffects ), it would be useful to develop a computational method for the inference of the equivalences defined in Section 3.3 . Nev-ertheless, problems concerning the possible heterogeneity of effect representations and the complexity issues related to ABox reasoning need to be faced. The issue of service equivalence is also discussed in SOC, never-theless more efforts are needed to reach satisfactory computable solutions.

The prototype we have developed is currently being enhanced in the user friendly interface, to support non-expert users in exploiting semantic queries. Other features to be implemented in the near future are query forms for default queries and an extension of the tool to highlight the linkages between services and processes.
The algorithm for supporting service selection when aggregate services are considered has been partially devel-oped; it is being tested and its integration into the prototype is under development.

Finally, we acknowledge the problem of scalability according to the growing number of services populating the repository. As long as the number of such services increases, reasoning with SHOIQ single OWL file it could become inefficient, also in the case it is performed off-line. Efficient RDF repositories such as OWLIM [36] do not support so far automatic classification based on axioms containing nominals (they do not support OWL-DL), which is a relevant reasoning feature for supporting interactions with the repository. We will investigate scaling down to a less expressive language, exploiting some of the strategies discussed in Section 4.1 . Other strategies that will be investigated concern the execution of automatic classi-fication on sub-parts of the repository (e.g. on business processes and abstract services) or, eventually, the design of ad-hoc efficient algorithms.
 Acknowledgements The work presented in this paper has been partially supported by the two Italian Ministry of Research
FIRB projects NeP4B  X  Networked Peers for Business  X  and eG4M  X  eGovernment for Mediterranean coun-tries  X , and by the European IST project no. 27347 SEEMP  X  Single European Employment Market-Place.
References
