 Online product reviews have become an increasingly valuable and influential source of information for consumers. Different reviewers may choose to com-ment on different properties or aspects of a product; therefore their reviews focus on different qualities of the product. Even when they discuss the same prop-erties, their experiences and, subsequently, evalua-tions of the product can differ dramatically. Thus, information in any single review may not provide a complete and balanced view representative of the product as a whole. To address this need, online re-tailers often use simple aggregation mechanisms to represent the spectrum of user sentiment. For in-stance, product pages on Amazon prominently dis-play the distribution of numerical scores across re-views, providing access to reviews at different levels of satisfaction.

The goal of our work is to provide a mechanism for review content aggregation that goes beyond nu-merical scores. Specifically, we are interested in identifying fine-grained product properties across reviews (e.g., battery life for electronics or pizza for restaurants) as well as capturing attributes of these properties, namely aggregate user sentiment.
For this task, we assume as input a set of prod-uct review snippets (i.e., standalone phrases such as  X  X attery life is the best I X  X e found X ) rather than com-plete reviews. There are many techniques for ex-tracting this type of snippet in existing work; we use the Sauper et al. (2010) system.
At first glance, this task can be solved using ex-isting methods for review analysis. These methods can effectively extract product properties from indi-vidual snippets along with their corresponding sen-timent. While the resulting property-attribute pairs form a useful abstraction for cross-review analysis, in practice direct comparison of these pairs is chal-lenging.

Consider, for instance, the two clusters of restau-rant review snippets shown in Figure 1. While both clusters have many words in common among their members, only the first describes a coherent prop-erty cluster, namely the cocktail property. The snip-pets of the latter cluster do not discuss a single prod-uct property, but instead share similar expressions of sentiment. To solve this issue, we need a method which can correctly identify both property and sen-timent words.

In this work, we propose an approach that jointly analyzes the whole collection of product review snippets, induces a set of learned properties, and models the aggregate user sentiment towards these properties. We capture this idea using a Bayesian topic model where a set of properties and corre-sponding attribute tendencies are represented as hid-den variables. The model takes product review snip-pets as input and explains how the observed text arises from the latent variables, thereby connecting text fragments with corresponding properties and at-tributes.
 The advantages of this formulation are twofold. First, this encoding provides a common ground for comparing and aggregating review content in the presence of varied lexical realizations. For instance, this representation allows us to directly compare how many reviewers liked a given property of a product. Second, our model yields an efficient mean-field variational inference procedure which can be parallelized and run on a large number of re-view snippets.

We evaluate our approach in the domain of snip-pets taken from restaurant reviews on Yelp. In this collection, each restaurant has on average 29.8 snip-pets representing a wide spectrum of opinions about a restaurant. The evaluation we present demon-strates that the model can accurately retrieve clusters of review fragments that describe the same property, yielding 20% error reduction over a standalone clus-tering baseline. We also show that the model can ef-fectively identify binary snippet attributes with 9.2% error reduction over applicable baselines, demon-strating that learning to identify attributes in the con-text of other product reviews yields significant gains. Finally, we evaluate our model on its ability to iden-tify product properties for which there is significant sentiment disagreement amongst user snippets. This tests our model X  X  capacity to jointly identify proper-ties and assess attributes. Our work on review aggregation has connections to three lines of work in text analysis.

First, our work relates to research on extraction of product properties with associated sentiment from review text (Hu and Liu, 2004; Liu et al., 2005a; Popescu et al., 2005). These methods identify rele-vant information in a document using a wide range of methods such as association mining (Hu and Liu, 2004), relaxation labeling (Popescu et al., 2005) and supervised learning (Kim and Hovy, 2006). While our method also extracts product properties and sen-timent, our focus is on multi-review aggregation. This task introduces new challenges which were not addressed in prior research that focused on per-document analysis.

A second related line of research is multi-document review summarization. Some of these methods directly apply existing domain-independent summarization methods (Seki et al., 2006), while others propose new methods targeted for opinion text (Liu et al., 2005b; Carenini et al., 2006; Hu and Liu, 2006; Kim and Zhai, 2009). For instance, these summaries may present contrastive view points (Kim and Zhai, 2009) or relay average sentiment (Carenini et al., 2006). The focus of this line of work is on how to select suitable sentences, assuming that relevant review features (such as nu-merical scores) are given. Since our emphasis is on multi-review analysis, we believe that the informa-tion we extract can benefit existing summarization systems.

Finally, a number of approaches analyze review documents using probabilistic topic models (Lu and Zhai, 2008; Titov and McDonald, 2008; Mei et al., 2007). While some of these methods focus primar-ily on modeling ratable aspects (Titov and McDon-ald, 2008), others explicitly capture the mixture of topics and sentiments (Mei et al., 2007). These ap-proaches are capable of identifying latent topics in the collection in opinion text (e.g., weblogs) as well as associated sentiment. While our model captures similar high-level intuition, it analyzes fine-grained properties expressed at the snippet level, rather than document-level sentiment. Delivering analysis at such a fine granularity requires a new technique. In this section, we discuss the core random variables and abstractions of our model. We describe the gen-erative models over these elements in Section 4.
Product : A product represents a reviewable ob-ject. For the experiments in this paper, we use restaurants as products.

Snippets : A snippet is a user-generated short se-quence of tokens describing a product. Input snip-pets are deterministically taken from the output of the Sauper et al. (2010) system.

Property : A property corresponds to some fine-grained aspect of a product. For instance, the snippet  X  X he pad thai was great X  describes the pad thai prop-erty. We assume that each snippet has a single prop-erty associated with it. We assume a fixed number of possible properties K for each product.

For the corpus of restaurant reviews, we assume that the set of properties are specific to a given prod-uct, in order to capture fine-grained, relevant proper-ties for each restaurant. For example, reviews from a sandwich shop may contrast the club sandwich with the turkey wrap, while for a more general restau-rant, the snippets refer to sandwiches in general. For other domains where the properties are more consis-tent, it is straightforward to alter our model so that properties are shared across products.

Attribute : An attribute is a description of a prop-erty. There are multiple attribute types , which may correspond to semantic differences. We assume a fixed, pre-specified number of attributes N . For example, in the case of product reviews, we select N = 2 attributes corresponding to positive and neg-ative sentiment. In the case of information extrac-tion, it may be beneficial to use numeric and alpha-betic types.

One of the goals of this work in the review do-main is to improve sentiment prediction by exploit-ing correlations within a single property cluster. For example, if there are already many snippets with the attribute representing positive sentiment in a given property cluster, additional snippets are biased to-wards positive sentiment as well; however, data can always override this bias.

Snippets themselves are always observed; the goal of this work is to induce the latent property and attribute underlying each snippet. Our model generates the words of all snippets for each product in a collection of products. We use s i,j,w to represent the w th word of the j th snippet of the i th product. We use s to denote the collec-tion of all snippet words. We also assume a fixed vocabulary of words V .

We present an overview of our generative model in Figure 1 and describe each component in turn:
Global Distributions : At the global level, we draw several unigram distributions: a global back-ground distribution  X  B and attribute distributions  X 
A for each attribute. The background distribution is meant to encode stop-words and domain white-noise, e.g., food in the restaurants domain. In this domain, the positive and negative attribute distribu-tions encode words with positive and negative senti-ments (e.g., delicious or terrible ).

Each of these distributions are drawn from Dirich-let priors. The background distribution is drawn from a symmetric Dirichlet with concentration  X 
B = 0 tributions are initialized using seed words ( V seed in Figure 1). These seeds are incorporated into the attribute priors: a non-seed word gets hyper-parameter and a seed word gets +  X  A , where = 0 . 25 and  X  A = 1 . 0 .

Product Level : For the i th product, we draw property unigram distributions  X  i, 1 P ,..., X  i,K P for each of the possible K product properties. The prop-erty distribution represents product-specific content distributions over properties discussed in reviews of the product; for instance in the restaurant domains, properties may correspond to distinct menu items. Each  X  i,k P is drawn from a symmetric Dirichlet prior with hyper-parameter  X  P = 0 . 2 .

For each property k = 1 ,...,K .  X  i,k , we draw a binomial distribution  X  i,k . This represents the dis-tribution over positive and negative attributes for that property; it is drawn from a beta prior using hyper-parameters  X  A = 2 and  X  A = 2 . We also draw a multinomial  X  i over K possible properties from a symmetric Dirichlet distribution with hyper-parameter  X  M = 1 , 000 . This distribution is used to draw snippet properties.

Snippet Level : For the j th snippet of the i th prod-uct, a property random variable Z i,j P is drawn ac-cording to the multinomial  X  i . Conditioned on this choice, we draw an attribute Z i,j A (positive or nega-tive) from the property attribute distribution  X  i,Z j,j P
Once the property Z i,j P and attribute Z i,j A have been selected, the tokens of the snippet are gener-ated using a simple HMM. The latent state underly-ing a token, Z i,j,w W , indicates whether the w th word comes from the property distribution, attribute dis-tribution, or background distribution; we use P , A , or B to denote these respective values of Z i,j,w
The sequence Z i,j, 1 W ,...,Z i,j,m W is generated us-ing a first-order Markov model. The full transition parameter matrix  X  parametrizes these decisions. Conditioned on the underlying Z i,j,w W , a word, s i,j,w is drawn from  X  i,j P ,  X  i,Z or
B respectively. The goal of inference is to predict the snippet prop-erty and attribute distributions over each snippet given all the observed snippets P ( Z i,j P ,Z i,j A | s ) for all products i and snippets j . Ideally, we would like to marginalize out nuisance random variables and distributions. Specifically, we approximate the full model posterior using variational inference: 1 P (  X  ,  X  where  X  ,  X  P ,  X  denote the collection of latent distri-butions in our model. Here, we assume a full mean-field factorization of the variational distribution; see Figure 2 for the decomposition. Each variational factor q (  X  ) represents an approximation of that vari-able X  X  posterior given observed random variables. The variational distribution Q (  X  ) makes the (incor-rect) assumption that the posteriors amongst factors are independent. The goal of variational inference is to set factors q (  X  ) so that it minimizes the KL diver-gence to the true model posterior: We optimize this objective using coordinate descent on the q (  X  ) factors. Concretely, we update each fac-tor by optimizing the above criterion with all other factors fixed to current values. For instance, the up-date for the factor q ( Z i,j,w W ) takes the form:
The full factorization of Q (  X  ) and updates for all random variable factors are given in Figure 2. Updates of parameter factors are omitted; however these are derived through simple counts of the Z A , Z P , and see Blei et al. (2003). In this section, we describe in detail our data set and present three experiments and their results. Data Set Our data set consists of snippets from Yelp reviews generated by the system described in Sauper et al. (2010). This system is trained to ex-tract snippets containing short descriptions of user sentiment towards some aspect of a restaurant. 2 We select only the snippets labeled by that system as ref-erencing food , and we ignore restaurants with fewer than 20 snippets. There are 13,879 snippets in to-tal, taken from 328 restaurants in and around the Boston/Cambridge area. The average snippet length is 7.8 words, and there are an average of 42.1 snip-pets per restaurant, although there is high variance in number of snippets for each restaurant. Figure 3 shows some example snippets.

For sentiment attribute seed words, we use 42 and 33 words for the positive and negative distributions respectively. These are hand-selected based on the restaurant review domain; therefore, they include domain-specific words such as delicious and gross . Tasks We perform three experiments to evaluate our model X  X  effectiveness. First, a cluster predic-tion task is designed to test the quality of the learned property clusters. Second, an attribute analysis task will evaluate the sentiment analysis portion of the model. Third, we present a task designed to test whether the system can correctly identify properties which have conflicting attributes, which tests both clustering and sentiment analysis. 6.1 Cluster prediction The goal of this task is to evaluate the quality of property clusters; specifically the Z i,j P variable in Section 4. In an ideal clustering, the predicted clus-ters will be cohesive (i.e., all snippets predicted for a given property are related to each other) and com-prehensive (i.e., all snippets which are related to a property are predicted for it). For example, a snip-pet will be assigned the property pad thai if and only if that snippet mentions some aspect of the pad thai. Annotation For this task, we use a set of gold clusters over 3,250 snippets across 75 restaurants collected through Mechanical Turk. In each task, a worker was given a set of 25 snippets from a single restaurant and asked to cluster them into as many clusters as they desired, with the option of leaving any number unclustered. This yields a set of gold clusters and a set of unclustered snippets. For verifi-cation purposes, each task was provided to two dif-ferent workers. The intersection of both workers X  judgments was accepted as the gold standard, so the model is not evaluated on judgments which disagree. In total, there were 130 unique tasks, each of which were provided to two workers, for a total output of 210 generated clusters.
 Baseline The baseline for this task is a cluster-ing algorithm weighted by TF*IDF over the data set as implemented by the publicly available CLUTO package. 3 This baseline will put a strong connec-tion between things which are lexically similar. Be-cause our model only uses property words to tie together clusters, it may miss correlations between words which are not correctly identified as property words. The baseline is allowed 10 property clusters per restaurant.

We use the MUC cluster evaluation metric for this task (Vilain et al., 1995). This metric measures the number of cluster merges and splits required to recreate the gold clusters given the model X  X  output. Therefore, it can concisely show how accurate our clusters are as a whole. While it would be possible to artificially inflate the score by putting everything into a single cluster, the parameters on our model and the likelihood objective are such that the model prefers to use all available clusters, the same number as the baseline system.
 Results Results for our cluster prediction task are in Table 2. While our system does suffer on preci-sion in comparison to the baseline system, the recall gains far outweigh this loss, for a total error reduc-tion of 20% on the MUC measure.

The most common cause of poor cluster choices in the baseline system is its inability to distinguish property words from attribute words. For example, if many snippets in a given restaurant use the word delicious , there may end up being a cluster based on that alone. Because our system is capable of dis-tinguishing which words are property words (i.e., words relevant to clustering), it can choose clusters which make more sense overall. We show an exam-ple of this in Table 3. 6.2 Attribute analysis We also evaluate the system X  X  predictions of snip-pet attribute using the predicted posterior over the attribute distribution for the snippet (i.e., Z i,j A ). For this task, we consider the binary judgment to be sim-ply the one with higher value in q ( Z i,j A ) (see Sec-tion 5). The goal of this task is to evaluate whether our model correctly distinguishes attribute words. Annotation For this task, we use a set of 260 to-tal snippets from the Yelp reviews for 30 restaurants, evenly split into a training and test sets of 130 snip-pets each. These snippets are manually labeled POS -The martini selection looked delicious The s X  X ores martini sounded excellent The martinis were good The martinis are very good The mozzarella was very fresh The fish and various meets were very well made The best carrot cake I X  X e ever eaten Carrot cake was deliciously moist The carrot cake was delicious.
 It was rich, creamy and delicious.
 The pasta Bolognese was rich and robust.
 ITIVE or NEGATIVE . Neutral snippets are ignored for the purpose of this experiment.
 Baseline We use two baselines for this task, one based on a standard discriminative classifier and one based on the seed words from our model.

The DISCRIMINATIVE baseline for this task is a standard maximum entropy discriminative bi-nary classifier over unigrams. Given enough snip-pets from enough unrelated properties, the classifier should be able to identify that words like great in-dicate positive sentiment and those like bad indi-cate negative sentiment, while words like chicken are neutral and have no effect.

The SEED baseline simply counts the number of words from the positive and negative seed lists used by the model, V seed words from V seed and if there are more words from V seed  X  , the snip-pet is labeled negative. If there is a tie or there are no seed words, we split the prediction. Because the seed word lists are specifically slanted toward restaurant reviews (i.e., they contain words such as delicious ), this baseline should perform well. Results For this experiment, we measure the over-all classification accuracy of each system (see Table 4). Our system outperforms both supervised base-lines.

As in the cluster prediction case, the main flaw with the DISCRIMINATIVE baseline system is its in-ability to recognize which words are relevant for the task at hand, in this case the attribute words. By learning to separate attribute words from the other words in the snippets, our full system is able to more accurately judge their sentiment. Examples of these cases are found in Table 5.

The obvious flaw in the SEED baseline is the in-ability to pre-specify every possible sentiment word; our model X  X  performance indicates that it is learning something beyond just these basic words. 6.3 Conflict identification Our final task requires both correct cluster prediction and correct sentiment judgments. In many domains, it is interesting to know not only whether a product is rated highly, but also whether there is conflicting sentiment or debate. In the case of restaurant re-views, it is relevant to know whether the dishes are consistently good or whether there is some variation in quality.

To evaluate this, we examine the output clusters which contain predictions of both positive and neg-ative snippets. The goal is to identify whether these are true conflicts of sentiment or there was a failure in either property clustering or attribute classifica-tion.

For this task, the output clusters are manually an-notated for correctness of both property and attribute judgments, as in Table 6. As there is no obvious baseline for this experiment, we treat it simply as an analysis of errors.
 Results For this task, we examine the accuracy of conflict prediction, both with and without the cor-rectly identified properties. The results by property-attribute correctness are shown in Table 7. From these numbers, we can see that 50% of the clusters are correct in both property (cohesiveness) and at-tribute (difference in sentiment) dimensions.
Overall, the properties are correctly identified (subject of NEG matches the subject of POS ) 68% of the time and a correct difference in attribute is identified 67% of the time. Of the clusters which are correct in property, 74% show a correctly labeled difference in attribute. We have presented a probabilistic topic model for identifying properties and attitudes of product re-view snippets. The model is relatively simple and admits an efficient variational mean-field inference procedure which is parallelized and can be run on a large number of snippets. We have demonstrated on multiple evaluation tasks that our model outper-forms applicable baselines by a considerable mar-gin.
 The authors acknowledge the support of the NSF (CAREER grant IIS-0448168), NIH (grant 5-R01-LM009723-02), Nokia, and the DARPA Ma-chine Reading Program (AFRL prime contract no. FA8750-09-C-0172). Thanks to Peter Szolovits and the MIT NLP group for their helpful comments. Any opinions, findings, conclusions, or recommen-dations expressed in this paper are those of the au-thors, and do not necessarily reflect the views of the funding organizations.

