 This paper examines how software developers discuss users and how such discussions are intrinsic to the negotiation and settling of technical decisions in the development and testing of a software product. Using ethnogr aphic data, we show how the user features in conversations, not as a  X  X opic X  but as  X  X ontext X  to technical work. By understanding the user as a contextual feature in developers X  group work we are able to draw attention to issues in the use of Extreme Programming for software product development. Extreme Progra mming is a participatory design method, but software product de velopment involves envisioning and designing for future customers. D.2.1 [ SOFTWARE ENGINEERING ]: Requirements/ Specification  X  elicitation methods, methodologies. Management, Documentation, Design, Human Factors, Languages. Extreme Programming, Software Product, Ethnography. This paper discusses the role of users and customers in the implementation and testing of a so ftware product. This is not a paper about participatory design; users and customers hardly participated in the work we observed and when they did they were kept at a certain distance. However, who the customers and users were or might be, and what they might want were prevalent concerns. Accordingly, in addressing the longstanding interest in user involvement and representati on in the design process, we are interested in how the cooperativ e, group work between software product developers involves calling for, structuring and applying expertise and knowledge about users and customers. We find that users are a contextual concern insomuch as, in accordance with Garfinkel &amp; Sacks X  [12][26] re-specification of context, users are continually relevant to technical work but are spoken of as and where it becomes necessary to do so. We focus on the use of the me thod XP (Extreme Programming) for the development of a software product. We do not criticize XP, but address: how XP for soft ware product development, as a form of cooperative work with and for current and future customers and users is handled; how customers and users feature in on-going design and development decisions; and how risks are encountered and minimized in this form of development. We begin this paper with a background discussion of two significant studies of the representation of users during product development. We then describe our fieldwork at a software product company, and present and analyse three examples. Woolgar [33][34][13] studied the development of a desktop computer, taking particular interest in the testing phase. He noticed that discussions of users were common amongst developers and that these users we re not actual  X  X eople X  as such but categories for and stories a bout people that came to make sense through an organizational frame. This came about partly through difficulties of getting to know actual users from within the company, but also through conflicting demands in providing for various users and  X  X sers in general X . Furthermore there were issues of competing understa ndings and of knowledge and expertise being distributed within the company, and of there being a need for the company to  X  X reate the future X . Woolgar claims  X  X he whole history of a system project can be construed as a struggle to configure (that is define, enable and constrain) the user X  (Woolgar [34], p207). Wool gar X  X  line of argument rests on the idea of the computer as an artefact that crosses an organizational boundary. This artefact is produced in an organizational setting which fixe s certain normative modes and methods for its use, that if adhere d to will facilitate and sustain its  X  X orking X . In other words, developers try to  X  X igure out X  what their users require, and then design their system to fit that. However,  X  X iguring out X  is necessarily shaped by the way the organization works, technological and development constraints and opportunities, and partial and differential access to a heterogeneous user group. Whils t Woolgar discu sses developers X  talk about users, he does so in order to move onto ideas about the social relations between users and designers that sustain a technology. It is upon this point that the many subsequent takes on  X  X onfiguring the user X  depart. Lindsay [19] notes  X  X oolgar X  X  configured user is inextricably intertwined with the development, especially the testing phase of the technology X  (p31) and expands on ways in which users of desktop computers are otherwise configured, for example in adver tising or how user groups sustain older technologies. Bowers reapplies the concept in looking at the ways bank staff get customers to follow preferable courses of action (Bowers &amp; Martin [4]), and at how users talk back to designers (Bowers &amp; Pycock [5]). Mackay et al [23] look at the rapid prototyping of bespoke soft ware. Both Bowers and Mackay appropriate the concept  X  X onfiguring the user X  to discuss  X  X omething done to someone X . Sharrock &amp; Anderson X  X  [29] work on users as a  X  X cenic feature of design space X  is reasonably contemporary to Woolgar X  X  but less well known. It follows a similar interest in the ways designers discuss users during technology development, in this case the development of a photocopier. They point out that  X  X sers were not participants in the design activities which we observed [but] what users would want, what they might do, what they would be willing to accept were treated as significant and sometimes even decisive X  (p11). Significantly, they also point out  X  X he issue of what users would or would not do arose in the context of some ethnomethodological studies of law, as Lynch [21] discusses of the preparation of a court case:  X  X rojections of courtroom pro cedure ... are tied to the judge X  X , or a judge X  X , possible reciprocal actions. In different instances, the judge X  X  preferences and tendencies are assigned to a particular individual, treated as a local preference for specific protocols, or ascribed to a disposition to act in a particular way in  X  X ases like th is X . The attorneys invoke the judge as an organizational principle that locally governs the presentation of the case at hand. Whether or not the attributions about the judge made by the attorneys are accurate, they incorporate the judge into the practical organization of the projected cases, and by so doing they realize the judge in their pro cedures for presenting cases at hand. X  (Lynch [21], p103) As Lynch observes, although a judge is not physically present, he or she is still invoked and oriented-to in differing degrees of generality by participants. The design of a software product is oriented towards potential users in a similar way. In discussing product development Sharrock &amp; Anderson notice how knowledge and expertise about users appears as  X  X ypifications X . These typifications appear fo r practical purposes in getting technical work done and accordingly user typifications are defined not for what users are, but for how they are significant to the work at hand. Woolgar and Sharrock &amp; Anderson are looking at similar aspects of similar situations and de vise similar accounts of how developers realize the user. This paper builds upon their work not only by applying a similar ethnographic approach to a different software engineering method, but also by using more detailed ethnographic data enabling us to stress the user as a  X  X eneral X  typification, and to highlight the role of argumentation. Also, by examining a small software company rather than a global corporation, and in particular by examining a complaint, we are able to address occasions where users are seen to have definite histories and abilities. Complementing previous ethnographi es of XP in Practice (eg. Mackenzie &amp; Monk [22], Sharp et al [30], Hunt et al [16], Chong &amp; Hurlbutt [8]) this paper presents an ethnography of software developers in a small software company developing a software product for business customers. The study employed observational methods and in-situ in terviews to view, capture and understand work as it happene d via note taking, video, photographic and audio recordings. A total of 30 days fieldwork was undertaken in a period between July 2005 and April 2006. Over the same period we have al so been involved with an agile methods interest group, convened for discussion and peer learning amongst developers, and one of the authors has prior experience of using XP in development. The company  X  X DEco X  (a pseudonym) produces an IDE (integrated development environm ent) for end-users to develop applications, using an XML ba sed language and a graphical screen designer. The applications are to run on various mobile phones and other mobile devices. During the study, the company had seven full-time employees, four of whom were programmers (Paul, Tom, Dale and Mick  X  a ll names have been changed). There was also a technical director and trainer (Shaun), a customer relationship manager -CRM (Gordon), and a financial administrator (Brian). The programmers at the study site use practices from XP including an on-site customer (although this role is filled by Gordon the CRM), frequent releases, and what is known as  X  X he planning game X . They do not do test driven development or practice pair pr ogramming, preferring (as seems very common for small programming teams) to work sitting around a large shared table. Extreme Programming, or XP, cannot be outlined in entirety in this paper, but it is necessary to give some flavour before discussing the role of the customer . XP is arguably not  X  X ust X  a method but also a set of skills. For example, along with the  X  X ore practices X  of XP are four  X  X ore values X : communication, simplicity, feedback and courage. These values are intrinsic to both justifications for the practices and advice for their effective use; therefore XP has recognizab ly human centric concerns. Jeffries [17] presently lists the core practices of XP as Whole Team, Planning Game, Small Releases, Customer Tests, Simple Design, Pair Programming, Test Driven Development, Design Improvement, Continuous Integration, Collective Code Ownership, Coding Standard, Meta phor and Sustainable Pace. The customer has a role in many of these practices, for example the  X  X hole team X  includes an onsite customer, and this customer is to take a decisive role in the development and prioritization of requirements and the specificati on and running of acceptance tests (see Beck [1], Jefferies [17]). Lippert et al [20] highlight that XP was originally developed with relevance to bespoke, in-house so ftware development in large, North American organizations. As the method has been popularized it has been somewhat modified by its founders, and extensively appropriated by its users. Lippert et al call attention to the following appropriations: the development of application frameworks, the development of eB usiness applications, software product development, and outsourcing. With each of these, Lippert et al associate a number of problems and common to each are problems to do with the custom er relationship, particularly that:  X  X n essence, XP combines the spons or and user into the role of the customer. This can lead to problems if the user interests and the business interests of th e customers are not reconciled X  (Lippert et al [20], p21) Concerning the development of software products, Lippert et al X  X  main point is:  X  X ometimes the developers do not have access to users due to the project type, for example a standard product is being developed. In this case, we w ould have to think how the user can be substituted, perhaps by assigning the role of the customer to someone from the development organization. X  (Lippert et al [20], p20) Lippert et al X  X  recommendation is to use a product manager as the customer. In many software product companies a product manager or (as with the case study in this paper) a CRM (customer relationship manager) acts as such. This creates a situation in which the  X  X P-cust omer X  is producing requirements for something they are able to sell. This situation might lead to some ambiguities in what is required, but more-so creates the situation where much feedback and acceptance cannot take place immediately. It is not until the software has been bought and put to use that problems or new requi rements related to a feature can emerge. As the product gains a us er base, the XP-customer also begins to find herself as a mediator for requirements or issues that arise from customers. The person in this position clearly has an important role to play as the connection between the development team, current customers and future markets. Their work involves sorting through requests, opinions a nd so forth from all sides, as well as judgments over future ma rket directions to come to decisions about how best to proceed with the design. In product development then, it is necessary to handle multiple customers and  X  X deas of and for customers X  in a variety of ways. Software products must be sold, and thus the sale-ability is clearly an important development concern. However, the software is also a product to be used. These tw in and sometimes conflicting concerns feature prominently in our material. To question what the relationship is between the programmers and the XP-customer would be accepting that in this model the CRM is ultimately responsible for decisions. However we have noticed that there are multiple and dynamic ways in which user and customer talk occurs amongst the  X  X  hole team X  in work. Our experience has been that the developers are far from shielded from figuring out customer requirements and test s but take central stage.  X  X  X echnical work X  viewed from the point of getting it done involves the determination of such matters as how much work there is to be done, how long it will take, how many must be involved, how much time is ava ilable, how those involved are to combine their activities to carry the work through, and how they are to ensure that their activities will remain coordinated and synchronised over its course, wh at is to be done in various eventualities, who will make the judgement as to whether the work has been done satisfactorily and what it will take to satisfy them. X  (Sharro ck &amp; Anderson [28], p161) XP, as much as any other development work (or  X  X echnical X  work, or the work of survey researchers as discussed by Garfinkel [11] and eluded to in the quote above), involves socially organized activity. That said, the XP literature places a much greater emphasis on interpersonal skills than do most other methods. Face-to-face interaction in particular is encouraged in place of and in spite of documentation. At the heart of the XP ethos is a notion that programming works best as an intensely cooperative enterprise, and that this coopera tion results in better design and better code. On-going talk should enable code that is more of a group production and therefore bette r written, better tested, better integrated, and less likely to contain errors.  X  X ll members of the project team should communicate intensively. Special impor tance is given to personal conversation, since information is exchanged more effectively this way. In particular, misunderstandings and ambiguities can be ironed out immediately. If intensive communication between members of the project is guaranteed, a good part of the otherwise normal documentati on can be done away with. X  (Lippert et al [20] p3). The developers X  office at the fieldsite has been purposefully chosen and set up to allow face-to-face talk and interaction. This is true of most  X  X gile X  office spaces but by no means all (e.g. see Hunt et al [16]). Whereas the XP literature promotes office space with quiet zones where programmi ng pairs cannot be interrupted (e.g. see Sharp et al [30]), the programmers at the fieldsite, as seems very common, share an open office space and sit around a single, large table. Their talk w ill generally be of differing levels of intensity during different stag es of the development iteration, for example planning is predomin antly talk based whereas writing the user manual is regularly done in silence. During development and testing there will sometimes be much talking, and sometimes hours of near silence. That the talk we report on, and the work it achieves, is routine and mundane is attested to by the fact that in our later interviews with staff it was often difficult to get them to recall the specific events of what were apparently slightly heated discussions. Ambiguities about how to proceed, conflicting ideas, different evidence for different solutions and disagreements are a routine part and parcel of the work. While we focus on the everyday, here, we do not discount the special and atypical circumstances that may also arise and be informative (cf. Nardi [24]), it is just that during our fieldwork we never encountered situations that stood out in this way. Problems, and indeed certain  X  X asty surprises X  (cf. Garfinkel [ 11]), were encountered, but not as remarkable events. That problem s will arise routinely and that programming and development throws up nasty surprises is very much oriented to as the  X  X ature of the business X . Of course not all customer talk is in the thick of work around the table; customers might potentially be discussed at lunch, or over the phone. Development work is an intensively cooperative endeavour (DeSouza et al [10]). The developers X  awareness of each other X  X  work is embedded and embodied within the particular configurations (Heath et al [15]) of the office space, the artefacts and the thoroughly normalised occasi ons to talk, things to talk about, methods to get someone X  X  attention, and means of argumentation. Amongst developers at the fieldsite, premising a discussion is often a case of just saying something. We often saw developers just say something out loud, for example exclamations such as  X  X uild failed! X  or  X  X  can X  X , I just can X  X ! X  Such exclamations can be responded to by a question or simply ignored. Sometimes more direct st atements are made or questions are asked, for example  X  X om X  X  not worked on the manual for ages! X  or  X  X ou got the VM? X  There are also more coordinative remarks, for example  X  X lag X  X  up X  . Body language also seems important in initiating or 'premisi ng' discussions. One developer often appears to invite a conversation by sitting back in his chair (often accompanied by a large huff). The same developer will regularly sit back in his chair when holding discussions. Another developer often seems to move his head to the right hand side of the monitor when he wishes to initiate or engage in discussions. Such issues are not limited to initiating a conversation but also to enter a conversation that is ongoi ng between other developers. Despite such intricacies in appropriate behaviour, it does seem that the developers expect a right to talk and a right to question. This is in line with what Jeffries [17] promotes as  X  X ollective code ownership X . We will discuss three example c onversations about customers and users. Firstly talk about the usability of a downloadable demo version of the product for people who might be thinking of purchasing it. Secondly of resolving whether a problem in using the product within a  X  X irtual mach ine X  matters. And thirdly an example of the developers discussing complaints and requests emailed to the Customer Rela tionship Manager by existing customers. In this first example we discuss the design of a menu for the selection of mobile-device emulators. It is quicker to test code using an emulator than to use one of the actual devices, and hence most users first run code on an emulator and on the actual device only when the code is complete (there are many exceptions to this rule, particularly amongst experi enced developers and testers aware of the bugs in emulators). There are a finite number of emulators relevant to the software product and these are listed in a menu. The problem is that no emulator is installed automatically with the product but each must be installed separately by the user. Selecting menu items pointing to em ulators that are not installed gives an error message informing the user of this. The developers discuss this: 
S  X  X sers don X  X  bother reading the error message ... they 
Shaun suggests that emulators not installed should be  X  X reyed out X  in the menu. Tom disagrees and suggests writing a better error message, which at the moment is fairly cryptic. Dale seems annoyed and agrees with Tom. 
S  X  X ook, I know its stupid but there you go ... the most G  X  X s it hard to make it work out the box? X  S  X  X o it X  X  trivial. We want it to work out the box. X  D  X  X ll you X  X e doing is postponing the issues. X  S  X  X ood. Until after they X  X e bought it. X  
The conversation goes on about how the users will know how to install additional emulators if the menu item is greyed out. The conversation includes the sequence: 
P  X  X f you X  X e going to install an emulator, you have to read D  X  X ell people don X  X  read the manual. X  S  X  X ell people don X  X  read error messages either. X  Other possibilities are now explored, including having a tick or a cross by each emulator or having hover help. Dale is adamant these are bad ideas and will make the IDE harder to use. The conversation is soon brought to a close: 
S Refers to an email from someone who couldn X  X  get the 
D  X  X ou just make it easier for people to evaluate but harder 
P  X  X  thought we decided on the tick and cross. Because with D Continues to defend use of an error message. G  X  X o a tick and a cross and move on. X  
M  X  X  X  X l do it. X  said humorously, implying they must not let D Resistance from two of the devel opers (Tom, but particularly Dale) leads to Gordon the CRM making an order about what to do and for the conversation to move on. Up until this point a number of options have been explored , as seems typical with many decisions about the software. Things are often talked through, and different possibilities are raised. Therefore it is significant that Gordon not only tells them how the menu will be designed but also that the conversation will move on: it is ordinarily acceptable for any decision to be questioned. Mick, with humour, takes on the responsibility for this task, acknowledging that they must do what Gordon says, and that Dale is not going to agree. We see many interesting aspects to this example, not least the seemingly different orientations to the software as either an easy to use or an easy to sell system, and the accounts of what it is for the software to be working. We will introduce two more examples before a discussion of such issues. In this example we describe the discovery of a problem with the software. This problem is even tually categorized as a  X  X nown problem X  rather than solved. 
P Working with D at D X  X  machine  X  X our machine X  X  just 
M Entering conversation from across the table  X  X hat you 
D  X  X  X  X e dragged a control ... X  ... P  X  X ou know what it is, you got a massive drag threshold. X  D  X  X o, I got it set to one. X  
M Goes round the table to stand beside D.  X  X t X  X  like the 
Paul and Mick go on to compare the software running on Paul X  X  and Dale X  X  machines. Dale is running the software using a virtual machine (VM) and they find that it is much slower in this virtual machine. They all agree that  X  X t X  X  weird X , three of them repeating this same phrase (but not in any  X  X ramatic X  sense). After some further di scussion they query whether the problem is in running a JVM (Java Virt ual Machine) in the VM: M  X  X t might not necessarily be Java though. X  D  X  X eah I think its Java. X  M  X  X he JVMs running inside the VM? X  D  X  X eah X  
M  X  X  suppose its something we can document as a known P  X  X eah X  
M  X  X f you X  X e running your JVM on a VM, or we could 
M  X  X t could be where [unnecessary events keep firing] but D  X  X  X  X l Google it, see if anyone else has noticed. X  
A short while later Paul fini shes installing a VM on his machine. He confirms that the same problem occurs. Mick speculates that it is an issue with Swing (the Java graphical user interface utilities package). This would probably imply that the issue is out of their hands. Later they further evaluate the issue. 
They talk about  X  X oes off the street X  and whether such people would use VMs. The consensus is that ordinary people wouldn X  X  have a VM. They then talk about what they themselves do with a VM: 
P  X  X ut you would never devel op in a VM. Our stuff doesn X  X  D  X  X ell supposedly. X  P (laughing)  X  X ot really from what we X  X e seen... X  D  X  X oo harsh! X  ... 
M  X  X ts good that you X  X e using that and that we X  X e found it. If 
They decide to categorise this as a  X  X nown problem X , and it will be listed in the user manual as such. In this example we see how errors arise and the strategies the developers have in dealing with them. A problem is  X  X iscovered X  and, when attempts to solve it get complex the relevancy of solving it gets discussed. In this instance the initial  X  X ncorrect X  proffered diagnoses and investigations are not simply a product of impatience and inexperience. These  X  X ecipes X  (Schutz [27]) are functional and often lead to quick results. They begin with appeals to organisational knowledge ( X  X as this happened before? X   X  X hat does this remind you of? X ) and on this failing they switch to first principles, particularly a comparison of two machines running side by side. They never identify the cause of problem but are satisfied it is out of their hands and go on to consider whether this problem is a problem for them to worry about. By categorizing it as a  X  X nown problem X , the problem fits into the bureaucratic system and can be put off or dealt with within orderly and normal work (i.e. it could become a requirement for solution in a later iteration). Our final example is of the devel opers figuring out the meaning of a customer X  X  complaints and requests. These were sent by email to the customer relationship mana ger, who in turn has forwarded them to Paul. The email is difficult to read and parts of it seem strange: 
P  X  X o you want to hear the second of [this customer X  X ] M  X  X hich toolbar? We don X  X  have a toolbar! X  D  X  X  think it X  X  the buttons. X  
A discussion ensues about just what the customer is talking about.  X  X he buttons X  is one idea of several that come up and they eventually decide that the topic is probably  X  X he button bar X . However the developers do not think there is any problem with the button bar. Mick requests a copy of the email. 
M  X  X  X  X l see if I can decipher [the email] because [the button 
P  X  X t could be anything. Through what I X  X e seen it could be D  X  X ts not that it doesn X  X  work, its what he X  X  trying to do. X  ... 
M  X  X f you don X  X  put an image in, it just puts in a coloured 
So it seems to be working. Th ey discuss candidate  X  X istaken use X  or alternative senses to what the customer might be saying. 
M  X  X nless he X  X  using a stupid GIF like, that it can X  X  load. A 
This marks the end of the discussion of the toolbar. This issue will be noted down on a card and discussed later. However there are more suggestions in the email from this customer. M (laughs)  X  X  X  X  just reading in his email about the keypad. 
They then talk about another customer who got excited about the system and was making a lot of suggestions. 
M  X  X e just couldn X  X  understand that a mobile device just All three examples show the devel opers to have near-contact with customers, often but not exclusively mediated by the CRM (example one mentioned a cust omer email and example two mentioned support calls). Clearly , customer contact is a very important feature of developmen t and while the developers may casually state a desire to be somewhat protected from too much direct contact they do regularly speak of and sometimes to users. The customer being discussed in th is example is particularly vocal and despite not being someone paying a great deal of money, was valued for his enthusiasm for giving feedback. This example demonstrates that the developers take requests from customers seriously and that there is potential for customers to inspire requirements, but it seems the developers are under no illusion that  X  X hat this customer wants X  is necessarily what he or she should be given. The developers sometimes laugh about their customers, especially their ability to make sensible well written suggestions, but the time spent in translating and working out the issues does seem valuable. We can see the developers deciphering a poorly written email, but assuming there is not just a presentation but also a translation issue here. They come up with likely translations, but thes e do not fit with the developers X  knowledge of what is and is not working in the system. It is suggested that it is an error of us e rather than an error with the system, but this conclusion is also stalled as  X  X he user isn X  X  that stupid X . Here we see combin ations of knowledge about who specific users are, what they do, and how they might term things differently. In effect we see that if users are 'scenic features' of the development process, then they are scenic features that can move from the background to the foreground, from backstage to front-stage, from just 'users' (who don X  X  read manuals) to users with specific skills, experiences and known aptitudes ("he's not daft"). However, the topicality of a specific user, the problems they have and the kinds of things they worry about are fleeting and feed into developer X  X  discu ssions of what is and is not working in the software rather than what this user does or does not require.  X  X hrough the timing, placing, pacing, and patterning of verbal interaction, organisational members actually constitute the organisation as a real and practical place. Furthermore, through a turn-by-turn analysis of organisational talk, it is possible to gain insight not only into how everyday business gets done at the level of talk, but also the interactional and organisational business that is accomplished through that talk. X  (Boden [2], p15) Our examples demonstrate some of the ways in which concerns can be raised or settled through various realisations of  X  X he user X . As Boden would recognise, not only is the user spoken of in everyday business but is spoken of in talk that accomplishes that business. Advocates of the method XP clearly state the importance of talk, and therefor e analyses which Boden suggest are important here. The exampl es show how, as Boden argues, problem solving is located in fine-grained, sequential organisational activities. Of particular relevance is the notion of 'local logics': "As they sift through locally relevant possibilities ... social actors use their own agendas and understandings to produce  X  X nswers X  that are then fitted to  X  X uestions X ." (Boden [2]) In the examples we document the contingencies of product development, the 'normal, natura l' troubles whose 'usual' solution is, of a sort,  X  X eadily available X . Particularly visible in example two, usual solutions invoke horizons of tractability, containing candidate answers (seen before) and solutions (used-before-and-seen-to-work). Problems demand quick solutions, taking into consideration the present situation, the resources available, as well as any consequences: "Caught in the pressing necess ity of choice, organisational actors move through a fluid mix of problem identification, goal negotiation, solution s eeking and decision-making." (Boden [2]) Such situated problem-solving results in fixes that may eventually become part of the repertoire of candidate solutions. And, as the extracts suggest, the boundaries betw een the types of problem are permeable and resolvable -for example through 'Google-ing'. Similarly, and unsurprisingly, different members view problems differently and this may lead to the resolution of the problem in, and through, the ability to improvise or recognise similarities with previous problems. The focus of this paper is on how the  X  X ser X  appears for and within such work. In the examples, we have seen that the user can on occasion be such-and-such a person (eg.  X  X so -and-so] said in an email X ), sometimes a more-or-less specific group of people (e.g.  X  X ur guys X ), sometimes a more general category (e.g.  X  X eveloper X ), or sometimes a course-of-action category ( X  X valuator X ) -i.e. their role as 'scenic features' can change. However, more often than not the user is  X  X ypified X  in the abstract (e.g.  X  X hey X  or  X  X eople X ). Whereas the developers studied by Sharrock &amp; Anderson [29] had their contact with users mediated through report forms, the developers at our fieldsite have more direct links with (and no doubt far fewer and more readily av ailable) users. While users may not be physically present or called upon in decision making at our study site, they do make themselves known and feature in discussions, even as  X  X eal X  people. However, different customers (and by extension users) are more valuable than others, likewise the future market is very valuable, and so certain users and their opinions and ideas are given more credence. Sharrock &amp; Anderson cite economic and other practical factors as reasons for the diminished user role (diminishe d to  X  X ypifications X ). We see it to be more inevitably so for product development; even when developers take greater interest in their customers and in figuring out and addressing their needs, those needs are inevitably cast against a general backdrop of other more or less important users. Sharrock &amp; Anderson [29] contrast the  X  X ser as a scenic feature X  with notions of user needs, re quirements and evaluations being empirically assessed. At our fieldsite where users are more readily available, there is still no sure fire way of deciding that certain user feedback or that certain user requests are the ones that should be taken into account. As stated, the vast majority of references to use of the system are made using abstract or bland (as opposed to colourful, or specifically drawn) types such as  X  X  X  or  X  X eople X , and particularly  X  X ou X . The generic  X  X ou X  is overridingly common in talk about functionality (for example  X  X ou can still click on it X  or  X  X ou X  X  rather expect it X ). This makes much of the functionality appear as common-sense for users and developers alike. In the final sequence of example one, we firstly see  X  X ou X  as referring to those developers present in the room, a nd then in the following line as a generic for users of the software . The second usage is the kind we are interested in and reflects, as Sacks describes, that  X  X ou X  is rarely said to refer to a single person but more-so in the plural as  X  X  way of talking about everybody, and indeed, incidentally of me X  (Sacks [26], p166); so here  X  X ou X  is a plural for  X  X very user and incidentally me X . In this case Paul is discussing normal work for programmers:  X  X ou can still click on it X . This is one of many cases of references to the user-in-general where no obvious distinction is made between th e developers of the software product and its users. We see our third sequence of example one to contain an interesting switch from a general category  X  X ou X  to a third-person category  X  X eople X . There is a generic imperative  X  X ou X  X e got to read the manual X , followed by a generic statement of fact in the third person  X  X eople don X  X  read the manual X . This switch to the third person can be regularly s een in conversations where the developers talk about what might be seen as bad practice. The switch to the third person is done when the developers wish to distance users X  ways of working from their own, but note that this is no more a claim about their users being  X  X ummies X  as it is an artful means for forming an argum ent (of the form  X  X es, but you don X  X  understand the users X ). The repost  X  X ell people don X  X  read error messages either X  maintains the third person category  X  X eople X  and in so doing beats the previous statement at its own game; perhaps this could have been achieved in no other way. The final sequence of example tw o demonstrates the negotiability of categories for users. Paul pos es that  X  X ou wouldn X  X  develop in a VM, and our guys are developers X . This utterance seems to set up a certain equivalence or affinity between the developers and their users. Unlike in our previous case, the switch between categories is done here by the same person in the same utterance. However, as the talk progresses, we see Dale evaluating the categories given by Paul initially as  X  X ell supposedly X , which leads to Paul changing his stance to agreement with Dale before Dale himself reformulates to  X  X oo harsh! X . This is an example of both the fluidity of typifications and the developers X  abilities and compulsions to negotiate, restat e and evaluate them between themselves; jokiness aside, users are  X  X ike us but just not too much X . We note the use of  X  X uys X  here is the kind of  X  X endered language X  discussed by Cockburn &amp; Ormrod [9], but to follow their arguments through would be to assume that  X  X uys X  mapped to some sort of list of users the developers  X  X ave in mind X , a position we reject (which is not to reject inequalities in development). Thus far our discussion has c overed some general sets of common-sense actions for software use, but we can also point to instances where work practice or  X  X ourses-of-action categories X  (Sacks [26]) become a more substantiated feature of conversation. The developers discuss and tie in their decisions to the work practices of users in multiple and interesting ways. Firstly, we can see an account of  X  X orking X  related to what users do. The first sequence of example one cont ains  X  X  would want it working for the initial play X . This not only demonstrates knowledge about what people do on first encountering the software (they  X  X lay X  with it), but also gives an interesting account of  X  X orking X . Working is used here to relate to something that does not have the user stop and think, read error messages or get the wrong impression. Working here then is strongly tied in with user practice, rather than into a technological sense of reliability. A concern for work practice is also apparent in example three where the developers question the work pr actices of a user in terms of whether the system, or the use of the system is faulty. Even more specific examples can be found although these tend to be where the customer is some special case, the following concerns a large organization they are hopeful to get as a customer: 
P  X  X ith VehicleRepairCo, if you have to drive 30mins to The above example is about a pa rticular customer but draws upon general knowledge of what employees of that customer do, further informed by the knowledge of how that company would deploy applications built with IDEco X  X  system  X  X n the field X . This knowledge may turn out to be wr ong or not relevant but is good enough for their work at the time (figuring out worst acceptable cases for performance testing a high-load server). As we have been arguing, users are contextual concern, brought into discussion  X  X s X  and  X  X hen X  required. In this section we discuss  X  X hen X  they are required. Regarding example two, it is in one sense fortunate and another convenient that in finding that they can X  X   X  X olve X  an issue the developers satisfy themselves that it is acceptable not to. For the evaluative question of whether a problem matters, the user (to borrow from Sacks [26])  X  X ppears on cue X . This is not to say the developers are lazy and invoke the user to dodge the difficult work; we have been noticing the opposite whereby the developers seem to have a spirited curios ity towards technologies. This curiosity is useful, as it means that they are often concerned with understanding their application bette r, its limits, its problems and the possibilities for future development, all of which seems to be important in developing a good quality product. This however does not entail an  X  X esthetic or objective X  rather than  X  X ragmatic X  orientation: we see the user often appears as a pragmatic justification for work being of aesthetic or objective quality. We too see the user in justifications fo r decisions that could be said to be un-aesthetic (although these are perhaps more controversial decisions). In example one the repost  X  X ntil after they X  X e purchased it X  to  X  X ou are just postponing the issues X  is clever as, through agreeing with and then diminishing the issue, Shaun is able to stifle further argument fo r an aesthetic design. Shaun does not imply that everyone will purchase the product but draws from the idea that the customer will ma ke their decision early. This idea is not contested. It also implies that problems post purchase have some acceptability and can be dealt with in a different way. If you do not sell the system you do not get anywhere. Hand in hand with issues of justification are methods of measurement; of how the developers trade off the work to be done with the value of that work to the user and to the company (what Garfinkel [11] calls  X  X he administrator's problem'). In example two the growing complexity of a bug overshadowed the low possibility it would be noticed. Elsewhere we often see the amount of work to be done on something measured against what the users  X  X orry X  about: 
M  X  X e might do a lot of work that no one would worry  X  X e might do a lot of work X  refers to the likelihood that this is difficult rather than the knowledge and again  X  X o one would worry X  seems different to  X  X o one wants X  or  X  X hey don X  X  X . We see a kind of openness here about the possibilities of work and use, a guess that is good enough for now and means that we don X  X  have to spend time on this and can do something else. What we come to is views of the  X  X ustomer X  and  X  X ser X  that are produced for specific (and varied) occasions, conversationally amongst the group as an aid in understanding problems and reasoning about development consider ations. There is fluidity in the use of these types, which are enrolled, negotiated and dispatched according to the problems the programmers are facing then and there. No user type trumps another automatically but has value with respect to the work at hand. Development tasks are defined and scheduled taking into account customers, users, internally ge nerated ideas, market judgments and so forth. However smaller requirements and mundane design decisions are made routinely dur ing development, coding being a praxiological and satisficing concern (Kristofferson [18], Button &amp; Sharrock [6,7]). Sometimes these small design decisions occasion discussion, and a numbe r of these invoke customers, users and user practices. However, we also need to acknowledge that in the constraints of development many  X  X ecisions X  are simply not discussed, or discussed in relation to the user, or even understood as being a  X  X ecision X . It became clear in our interactions with the programme rs that, the fact that the development could have progressed differently is not a matter that they spend much time talking about. So what is the difference between user and customer? Most differentiating between customer and user seems to arise in discussions and disputes between the developers and the CRM and technical director. It is clear that the developers most readily identify with and care for the end users, whilst the customer relationship manager deals with bot h users and customers, and as such has an orientation to the sa le-ability as well as the use-ability of the product. The first exam ple showed the  X  X otential buyer X  being invoked as more immediately important than users as a way of settling an argument. Distinguishing between the two during development seemed rarely nece ssary for developers (probably because much of their orientation is directed un-problematically towards users). In one case a  X  X igh paying X  customer who had lodged a feature request was given special care, and in another a non-paying user was ignored. Both of these actions were at the instruction of the CRM however. Care was also taken, again at the CRM X  X  request, over getting the software into a shape that would be suitable for demo-ing to large corporations (such as the company  X  X ehicleRepairCo X  briefly mentioned earlier). We have focused upon how ideas about the user (who they are, what they need and what they will get) feature in the creative process of software product development and testing. We have focused on talk between developers and found that in such talk:  X  The  X  X ser X  and  X  X ustomer X  are regularly brought into discussions between programmers when the design is problematic  X  The  X  X ser X  and  X  X ustomer X  are not simply relevant to the interface and ways of working with the product. They are relevant in economic terms.  X  Users and customers are often ta lked about in general terms such as  X  X e X  or  X  X eople X , but specific users or kinds of users can be foregrounded when problems and disputes arise.  X  Categories for users are fluid, they are negotiable and may change or be refined over the c ourse of a conversation. The significance of any category is relative to the work at hand, and can be contestable.  X  Any users and customers brought into discussion are cast against a background of other users. For the most part, single users are only interesting in terms of how they relate to a general set of users.  X  There is an interest in what users do, but only to the extent of what they do  X  X n general X . The general  X  X ou X  user appears to justify aesthetic decisions, the more specific categories appear to justify more pragmatic decisions.  X  User requirements are often traded off against the amount of work it is thought it will take to satisfy that requirement. The value of a requirement is in terms of its generality and how it will expand the market.  X  Customers may know their requireme nts and what is technically feasible but they are unlikely to understand the market in which their requirements will be framed.  X  The customer and user get differentiated where financial concerns are relevant. These findings arise from a study of the group work of software product development using XP. XP is a method that encourages and relies upon conversation a nd close cooperation within development. Given these findings we suggest, in the case in using XP for product development, that users are a contextual concern to development work. Th at is, knowledge about users is formulated and brought forward in ways that shape and enable development work to be done. This paper has contributed to the longstanding concern in Software Engineering with 'users' by drawing on hitherto overlooked or perhaps misinterpreted work by Sharrock &amp; Anderson [29], Woolgar [33,34], and others. Although ours is a study of developers using an agile rather than plan driven method we have covered many simila rities between Woolgar X  X  and Sharrock &amp; Anderson X  X  findings and our own. Although the (mis)use of XP for product design does enable new ways of organizing practices, it seems many of these practices remain similar or the same. As we disc ussed earlier, the kinds of user involvement asked for in XP are not possible for product design. We also note that Button &amp; Sharrock [6] claim that software engineering methods do not under lie and generate particular practices, but following and implem enting a method is a part of practice. There are, of course, several key differences between Woolgar X  X  and Sharrock &amp; Anders on X  X  work and our own: Firstly, we note the dynamic and important relationship between notions of  X  X ser X  and notions of  X  customer X  in XP. Furthermore, for this small enterprise the way the  X  X ser X  serves as context for discussion and decision maki ng seems more complex and dynamic than described by Wool gar and by Sharrock &amp; Anderson in their studies of multinational organizations. For them the contextual user was largely an imagined future user in another place and time, of a  X  me X  or  X  X veryman X  construction. In our case, while these constructions are still apparent, the  X  X sers X  and  X  X ustomers X  are more proximal and  X  X eal X ; Developers do know some of these people, either directly, through email, or through the CRM, and they know something about their businesses and so forth. That they have more direct knowledge of users and customers is possible because they have a limited customer base. This is a small company but one that is trying to expand its market. As reported by Pollock et al [25], as a product develops the company may have to develop a more  X  X rganised X  set of procedures for dealing with customers and users, holding some in positions of greater  X  X rivilege X  or  X  X sefulness X , and it is worth noting that some previously  X  X evered X  users or  X  X riends of the company X  may have to be cast aside as the product moves in different directions. So how might procedures for dealing with customers and users become more organized? This, it seems to us, is a key challenge for CSCW and related areas. Much CSCW literature concentrates on design for singular situations or for a reasonably generic or consensual user base where it is theoretically possible to identify a clearer set of requirements that mesh with local, situated work practices. When producing a generic product, such work is not always relevant. Product develope rs seek requirements that apply across a number of user sites. Some site-specific requirements will be addressed for a number of reasons (ease of implementation, importance of cu stomer, etc.) but ones deemed  X  X diosyncratic X  will not. Furthermore, software products are often designed and sold as instruments of change. In the work of Woolgar [33,34] we can see that product design involves achieving a balance between meeting multifarious needs and desires while also restricting the flexibility of the product, pushing the users down a certain set of agreed upon paths of interaction and use. In product design, as Pollock et al [25] discuss: in order for the product to remain viable for a wide market it cannot be tailored to the specificities of all its consumers; product developers try to get customers to tailor their requirements and processes to thei r product (at least as much as they tailor the product to their c onsumers); and certain customers and their requirements inevitably gain preference because they suit the developers and their vision, and  X  X it X  with the product. The business of good product development is getting the right balance in designing (specifically) for (some of) your (particular) users while reaching out to an ever more diverse customer base. We therefore strongly suggest that product development should be treated as having separate concerns to those of bespoke design. Grudin and Pruitt [14] outline the problems of participatory design and scenario based desi gn for product development and suggest instead persona based desi gn. Whilst techniques such as persona based design may be us eful for products designed (in multinational companies) to suit, as Grudin and Pruitt term it,  X  X illions of users X , we find that participatory, persona and scenario based design approaches all fail to properly appreciate the practical and economic con tingencies that impinge upon and shape the construction and evolution of a software product for application development such as the one discussed here. The issues we have identified are associated with XP for product development. The developers we have studied do not attempt to do  X  X ure X  or  X  X extbook X  XP and therefore our descriptions of their practices cannot readily serve as criticisms of the method itself. We have not found evidence for St ephens and Rosenberg X  X  [31] claim that a problem with impl ementing one aspect of XP will cause the whole method to collapse. We do not discount XP as a viable approach for product development. When we look at the kind of risks involved for this company we would argue that these are not simply caused by either the use (or misuse) of XP or the approach to involving users a nd customers in development. Indeed, in the end this company may prosper or fail like many other small software houses with a good idea and a malleable market. We must be careful not to, as Suchman criticizes of Woolgar, produce an  X  X verestimation of the ways and extents to which definitions of users and use are inscribed into an artifact X  ([32, p192]) and understand that unlike Woolgar we are looking at iterative development that can to some extent improve, correct and change designs over time. Despite the problems of user participation, for many reasons XP and other agile methods seem a reasonable approach to development. As Boehm and Turner [3] discuss, the choice of method cannot be made because one is simply better than the other. Boehm and Turner argue that the suitability of a method should be seen in terms of the particular risks faced in the development in which that method is to be used. The company is small, the project is manageable without the need for a lot of documentation, XP a llows them to be responsive to changing requirements, and they are developers, developing a product to be used by other de velopers. The market does not expect (although it might like) a polished final product, instead it has an evolving system. Give n that many smaller product companies like the one discussed in this paper will continue to want to use agile methods, further work in this area can be useful in articulating the particular contingencies of  X  X eneric X  product development and to aid in minimi sing the risks associated with bad decisions concerning product dir ections, users and customers. In the use of XP (Extreme Programming) for software product development customers and users ca nnot participate as they might in other uses of XP, but are tr eated generically. This generic treatment features in development work as typifications of users and typifications of use. Such typifications are produced, negotiated, refined and occasioned with respect to the work at hand; that is, typifications are  X  X ontextual X . [1] Beck, K. 2000. Extreme Programming Explained, Embrace [2] Boden, D. 1994. The Business of Talk: Organisations in [3] Boehm, B., and Turner, R. 2004. Balancing Agility and [4] Bowers, J., and Martin, D. 2003.  X  X aking the Organisation [5] Bowers, J., and Pycock, J. 1993.  X  X ou and Whose Army? Or [6] Button, G., and Sharrock, W. 1992.  X  X ccasioned Practices in [7] Button, G., and Sharrock, W. 1998.  X  X he Organisational [8] Chong, J., and Hurlbutt, T. 2007. The Social Dynamics of [9] Cockburn, C., and Ormrod, S. 1993. Gendered Technology [10] DeSouza, C., Redmiles, D ., and Dourish, P. 2003. [11] Garfinkel, H. 1967. Studies in Ethnomethodology Prentice-[12] Garfinkel, H., Sacks, H. 1970.  X  X n Formal Structures of [13] Grint, K., &amp; Woolgar, S. 1997. The Machine at Work. [14] Grudin, J., &amp; Pruitt, J. 2002. Pe rsonas, participatory. design, [15] Heath, C., Sanchez Svensson, M., Hindmarsh, J., Luff, P., &amp; [16] Hunt, J., Romero, P., &amp; Good, J. 2006.  X  X tories from the [17] Jefferies, R. 2007. www.xpr ogramming.com (accessed [18] Kristoffersen, S. 2006.  X  X esigning a Program Programming [19] Lindsay, C. 2003.  X  X rom the Shadows: Users as Designers, [20] Lippert, M., Roock, S., and Wolf, H. 2002. Extreme [21] Lynch, M. 1995.  X  X reliminary Notes on Judges X  Work: The [22] Mackenzie, A., Monk, S. 2004.  X  X rom Cards to Code: How [23] Mackay, H., Carne, C., Bey non-Davies, P., &amp; Tudhope, D. [24] Nardi, B. 1993. A Small Matter of Programming. [25] Pollock, N., Williams, R., and D X  X dderio, L. 2007. Global [26] Sacks, H. 1995. Lectures on Conversation (Volumes 1 and [27] Schutz, A. 1964. Collected Papers (Volume 2) Studies in [28] Sharrock, W. and Anderson, B. 1993.  X  X orking Towards [29] Sharrock, W., and Anderson, B. 1994.  X  X he User as a Scenic [30] Sharp, H., and Robinson, H. 2004.  X  X n Ethnographic Study [31] Stephens, M., and Rosenberg, D. 2003. Extreme [32] Suchman, L. 2007. Human-Machine Reconfigurations: [33] Woolgar, S. 1991.  X  X onfiguring the User, The Case of [34] Woolgar, S. 1994.  X  X ethinki ng Requirements Analysis: 
