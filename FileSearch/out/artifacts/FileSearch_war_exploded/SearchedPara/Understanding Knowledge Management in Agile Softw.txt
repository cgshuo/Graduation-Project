 Agile Software Development (ASD) methods such as Scrum and Extreme Program-ming (XP) ushered in an era of lightweight software development [1] . Unlike traditional software methods such as waterfall, which was driven by detailed specifications and design upfront and involved rigorous documentation [2] as a process of managing knowledge , agile methods emphasize social interactions and collaboration among team members in applying and sharing knowledge . 
Prior reviews and investigations of knowledge management in ASD have typically treated it as a broad topic resulting in major classifications of its schools, concepts [3] , strengths, weaknesses, opportunities and threats [4] . However, what inherent knowledge is involved in everyday agile practic e and how agile teams manage this knowledge is not well understood. To address this gap, we performed a Systematic Literature Review (SLR) involving 48 relevant empirical studies [5] filtered from an initial pool of 2317 articles selected from t he reputed academic databases o f Springer, Scopus, and IEEE X plore. In this paper, we report a systematic literature review of knowledge management in ASD. This SLR aims to provide an overview of the studies on this particular topic by answering the following research questions (RQ ): RQ1: Which specific agile pra ctices support knowledge management? RQ2: What is the inherent knowledge involved in these agile practices and how do agile The relevant ASD and knowledge management concept definitions and summarie s of prior reviews are presented in this section to aid in the understanding of the findings described later. 2.1 Knowledge Classifications Knowledge is defined as:  X  X  fluid mix of framed experience, values, contextual infor-mation, and expert insight that provides a framework for evaluating and incorporating new experiences and information X  [6] . Knowledge is described in two basic forms: tacit knowledge or the knowledge that is implicit and not clarif ied in an accessible form; and explicit knowledge or the knowledge that is visualised or clarified in accessible forms such as writing on sticky notes, drawing pictures to describe the processes or feelings, drawing progress charts, etc. [7] .

A classification of knowledge in software engineering describes three types of knowledge: project, product and process knowledge [8] . P roject knowledge is defined as  X  X he kno wledge about resources, functional and attributes requirements, work prod-ucts, budget, timing, milestones, deliverables, increments, quality targ ets and perfor-mance parameters X  [8] . Documentation and resources include contracts and project plans based o n requirement designs; and the parameters are analysed through compar-isons between the planned and actual cost, effort and time [9] . 
P roduct knowledge is defined as  X  X he knowledge about [the] product features and how they relate to other products, standards, protocols and the like X  [8 ] . Specifically, product knowledge is related to the product features, its interface and its dependency on technology (e.g. specific programming language or platform), network configura-tions, standards (related to components of the product) and protocol s. 
Process knowledge is defined as  X  X he knowledge about business processes, work-flows, responsibilities, supporting technologies and interfaces between processes X  [8] . In other words, process knowledge comprises of work targets and task information re-tr ieved from the business model; the workflow and responsibilities referring to how the various artifacts are produced and who is responsible for specific tasks and how they accomplish them based on the milestones [8] . 2.2 Prior Reviews on Knowledge Management in ASD Knowledge management in organizations is defined as:  X  X  method that simplifies the process of sharing, distributing, creating, capturing and understanding the company knowledge X  [6] . Knowledge management in traditional software development involved the use of various documents to capture and repr esent the knowledge related to the various stages of software development life cycles [3] . In contrast to traditional meth-ods, agile methods emphasize tacit knowledge over explicit knowledge, relying on in-dividual, team and customer communications and inter actions [4] .

Prior reviews and investigations on knowledge man agement in software engineering in general and ASD , in particular , have classified knowledge schools [10] and concepts [3] . Bj X rnson &amp; Dings X yr [10] classified two types of knowledge management schools in software engineering. The first category is the technocratic school, which refers to knowledge management strategies that focus on explicating knowledge and i ts flows. The second category is the behavioural school, which focuses on collaboration and communication as knowledge management strategies. 
Yanzer et al. [3] presented several concept maps about knowledge management in agile projects. The first map cover s ways of communication that focus on techniques and tools to manage the conversation. The second is about human and social factors, which discusses knowledge management adoption in agile projects and knowledge ar-tifact usage in the projects. Other concep ts include tools for knowledge management and knowledge representation forms related to managing tacit knowledge, and empha-size the managing of tacit knowledge by using tools to clarify the knowledge.
Analysing the prior reviews on knowledge management in ASD, we could see that there was a need for a specific explanation of knowledge management in ASD from the viewpoint of daily agile practice. A Systematic Literature Review (SLR) aims to collect evidence from the prior literature based on research questions to provide guidelines for practitioners [11] . We followed the specific steps of performing a SLR as recommended by Kitchenham [11] , such as planning, study selection, data extraction and synthesis, and reporting the review. 3.1 Planning the Review and Identifying Relevant Literature We constructed a search strategy to identify relevant literature by deriving major terms from the research questions, listing the keywords and developing search strings from these major terms and their synonyms using AND/OR operators. The search string that we u sed was: ("knowled ge manag*" OR "learning manag*" ) AND ("agile" OR "scrum" OR "XP" OR "Lean") AND ("software" AND "team")
The search string was used to filter articles from three reputed academic databases:  X  Springer, http://www.springer.com  X  Scopus, www.scopus.com  X  IEEE Xplore, http://www.ieeexplore.ieee.org A total of 2317 papers were obtained initially, of which 19 5 papers were from Scopus based on title and abstracts whil e Springer Link resulted in 209 7 papers and 25 results were from IEEE Xplore. 3.2 P ublication Selection Inclusion and exclusion criteria (described in [5] ) were designed to help select from the generated 2317 paper s, which were screened in the next stage (see Fig. 1) . T he s econd stage g enerated 2 2 9 7 papers , which screened the papers based on how the abstract and keywords related to the RQs and the inclusion and exclusion criteria [5] . Stage 3 in-volved reading the introduction section of the 2297 papers checked against the inclu-sion and exclusion criteria and resulted in 116 papers being filtered. All 116 p apers based on the inclusion and exclusion criteria . Most papers were excluded because they only provided theoretical explanations and no empirical evidence. 3.3 Data Extrac tion and Synthesis Data extraction involved extracting detailed information from the 48 primary studies, such as the paper citation details, answers to the review questions and the main s tufy findings i nto an excel sheet. T he e mphasis was placed on extracting eviden ce to support the review questions. The first author was responsible for data extraction overseen by the co -authors who provided guidance throughout the process and helped reach con-sensus in certain cases.

Data was analysed by determining themes from the selected papers using thematic analysis [12] . Initial codes summarizing key ideas were selected after reading the pri-mary studies thoroughly. For example, the specific artifacts used in ASD, such as prod-tained useful knowledge about the software re quirements. Similarly, UML mode ling, burn down charts etc. were classified as visualisation s . Stage 1: Search String (n=2317) Themes were derived as the next level of abstraction, gathering similar codes together [12] . For example, the codes artifacts , visualisation and discussion collectively formed the theme knowledge management strategies since each of them is a type of knowledge management strategy. Fig. 2 and 3 depict the emergence of the themes  X  X nowledge management strategies X  (KMS) and  X  X nowled ge types X  (KT) from the underlying codes. Another theme that emerged naturally from the codes was  X  X gile practices X  (AP) which included the specific agile practices reported in the primary studies. 4.1 Agile Practices Supporting Knowledge Management In response to RQ1  X  X hich specific agile practices support knowledge management? X  we identified the following agile practices to support kno wledge management [5] :  X  Scrum Practices : Sprint/Release Planning [S11,S13,S14,S20,S24,S 38 -S 40] , Daily 
Scrum [S6,S7,S 10 -S12,S23,S24,S 41 -S 43] , and Sprint Retrospective [S11,S13,S16,S 24, S 44 -S 46] .  X  XP Practices: Pair Programming [S3 -S5,S7,S17,S19,S22,S 48] , Refactoring [S15,S17,S19,S 25] , and Planning Game [S16,S17,S19,S 27] .

The agile practices above support knowledge management practices through activi-ties such as discussions, artifacts and visualisations [5] . The most commonly referred to agile practice w as daily scrum across ten primary studies, followed by sprint/release planning meeting and pair programming across eight primary studies each and sprint retrospective across seven primary studies . R efactoring a nd the planning game were referred to b y four studies each.

Some agile practices were not covered, such as sprint review, product backlog re-finement, testing and small releases. One possible explanation is that the product back-log refinement is a relative ly new, optional and lesser known Scrum practice [13] . The knowledge involved in other practices such as the sprint review, testing, and small re-leases, focuses more on the product knowledge which is presented as a deli verable product or a product increment in a  X  X emo X  meeting [13] , and released in small units of functionality to cust omers [1] . 
Although the sprint review, product backlog refinement, small releases , and testing were not covered in the primary studies, it does not imply that they do not involve any knowledge management. Knowledge based on product refinement, re -prioritisation, customer feedback, team reviews, are all valuable knowledge that need s to b e managed by agile teams. Thus, further investigation is required to understand how agile teams use, manage and refer to the knowledge involved in these practices. 4.2 Knowledge Involved in Agile Practices In response to RQ2 :  X  X hat is the inherent knowledge in volved in these agile practices and how do agile teams manage that knowledge? X  we discovered that the three types of software engineering knowledge  X  product, project, and process knowledge [8] were captured in everyday agile practices. tices. These knowledge types are managed in six agile practices. For example, p roduct knowledge found to be involved in the release and sprint planning meetings included domain context [S6] an d product features (systems requirements) [S12], which facili-tates agile teams to gain knowledge about the product to be developed. In daily stand -up, a wall or Scrum board [S12] is used to stick up story cards that contain several tasks, which are broken -dow n from the product backlog.
Project knowledge is managed in several agile practices, such as sprint/release plan-ning, daily stand -up, sprint retrospective, and planning game. For example, in a daily stand -up meeting agile teams clarify their cumulative work done by the team in a burn -down chart [S10]. In a sprint retrospective project knowledge is shared when agile teams share issues about lack of time to accomplish some tasks and uncompleted tasks in the last sprint w hich can lead to some changes in the timeline [S6,S11].

Process knowledge is managed in several agile practices, such as sprint/release plan-ning, daily stand -up, sprint retrospective, pair programming and refactoring [S6, S 11, S 19, S 24]. Process knowledge in these practices includes the knowledge about the system flows that are visualised in UML mode ling or other visualisations that rep-resent coding flow, features and business processes [S11]. 
With regards to knowledge management strategies applied, agile teams were seen to use: discussions (e.g. sharing requirements), artifacts (e.g. user stories) and visualisa-tions (e.g. burn -down charts), to manage the project, product and process knowledge [5] . See summarized description in Table 2 .

Discussion was the most commonly used knowledge management strategy across all agile practices (e.g. release/sprint planning, daily stand -up and retrospective). This strategy facilitates agile teams to share knowledge, in particular process and project knowledge [S11, S 13, S 20, S 24, S 47] . Process knowledge was shared during discussions where agile teams share issues, ideas, solutions, new techniques in solving problems [S13] (e.g. coding, testing) and feedback, and negotia te with team members in making plans or decisions [S24] . Project knowledge was also included in the discussions where the content of the discussion related to the project, such as bloc kers in the last sprint which can affect the project timeline and other team members X  progress [S11] . 
Artifacts in agile practices were commonly used to share product knowledge which included product requirements (e.g. in the form product backlog) and wer e further bro-ken down into user stories. The product backlog also helped capture product knowledge through task cards for coding [S46] , design and user interface development [S20] .
Visualisation is the technique used to manage knowledge in a visible and ac cessible form. This strategy helped agile teams to support tacit knowledge sharing among team members. For example, the Scrum board was used to show progress based on the story cards; the whiteboard for information such as feedback, feelings and action poi nts in the retrospective meetings [S46] ; the burn -down chart for showing team progress, achievements and performance [S25] and software code on display screens for showing working code in pair programming [S48] . The most commonly used visualisation strat-eg y in agile practices was the Scrum board, which contained all user stories and pre-sented teamwork progress through the work status of team members [S11] . In this section, we discuss a theoretical model of knowledge management in ASD which emerged from analyzing the knowledge types (KT), knowledge management strategies (KMS) and agile practices (AP) as described in the previous section.
Table 3 presents a summarized view of the agile practices, knowledge types, and knowledge management strategies identified in this review. The first column lists the (KT) Supported X  column lists the knowledge types as related to agile practices ( section 4.2 and Table 1 ) ;  X  X nowledge Management Strategies (KMS) X  column lists the knowledge management strategies inherent in the agile prac tices ( section 4.2 and Table found that all three types of knowledge were addressed in all the Scrum practices in varying degrees.

Furthermore, in synchronising teamwork through practices such as th e daily stand -up and inspecting the process through retrospectives, agile teams combine product, pro-ject and process knowledge and build a framework to solve the problems or find ways to improve. Dings X yr [14] explained that agi le teams gather and link the knowledge through several processes referring to Nonaka and Takeuchi X  X  knowledge creation the-ory. We expand o n this work by highlighting the knowledge types and management strategies involved in these processes: Socialization, a process of sharing tacit knowledge (e.g. sharing mental models and technical skills) is achieved through dis-cussion (identified as a KM strategy in our study). Externalization occurs when agile teams gain the shape of metaphors, concepts and models in wr itten form, such as doc-umentation, diagrams or artifacts (i.e. types of product and project knowledge). Agile teams gain and process the externalized knowledge to understand about  X  X now -how X  (i.e. a type of process knowledge) as part of the internalization process. The final pro-cess is a combination, where agile teams compile the knowledge from different sources (e.g. artifacts, meetings, board) in order to transform it into action.

Despite the inclusion of product, process and project knowledge in daily agile prac-tices , some knowledge management relat ed challenges were also identified in other reviews . Ringstad et.al. [15] and Stray et.al. [16] mention some challenges including: lack of focus on what was working well; no specific discussion about improving team-work; and difficult y in transforming lessons learned into action [17] . 
The results of this review indicate that there is a discrepancy between Scrum theory and real practice, which could be attributed to the effectiveness of using knowledge in each practice. In Scrum practice s (e.g. sprint/release planning meeting, daily stand -up and retrospective meeting) where product, process and project knowledge were in-volved, agile teams do not fully pay attention to the knowledge at the same degree , which means that they do not use the knowledge effectively. Another interesting find-ing from Scru m practice was that agile teams also tend to discuss product and project knowledge in the retrospective, which is theoretically meant to focus on the process alone. 
In XP practices, product and process knowledge are discussed in pair programming theoretical aims of these practices. Pair programming aims to enhance agile team skills by working in pairs [1] . In practice, agile teams discuss coding issues, integrate with design and learn from other team member X  X  skills. Similarly, refactoring focuses on maintaining coding and design, which involves product knowledge and process knowledge. In addition, Table 3 shows that the planning game in XP refers to product and project knowledge, being consistent with the theory [1] as this practice aims to capture and analyse overall product requirements and build plans to accomplish the tasks.

The list of agile practices in Table 3 shows that most primary studies pay more at-tention to practices such as pair programming, daily Scrum and release/sprint planning meetings. Becaus e meetings embody interaction and communication, these practices emphasize tacit knowledge sharing rather than explicit knowledge; however, there is evidence about some ways to transform tacit knowledge into explicit knowledge, such as storing it on sticky notes, paper or online documentation. Thus, important infor-mation or knowledge -related artifacts could be managed and used as a reference for team members.

Based on the findings of this SLR , a theoretical model of knowledge management in ASD was developed. The theory consists of Knowledge Types (KT), Knowledge M anagement Strategies (KMS) and Agile Practices (AP) . Fig. 4 depicts the theoretical model that illustrates two layers involved in kn owledge management in ASD: a knowledge layer and a practice layer. The knowledge layer includes the three knowledge types and is a fundamental layer on which the practice layer functions. The practice layer includes agile practices and knowledge management strategies (or prac-tices). The knowledge types from the knowledge layer are required and used in the agile practices and knowledge management strat egies in the practice layer. 
Our hypothesis is that the three knowledge types are managed by performing agile practices and knowledge management strategies, and the practices work using the knowledge types involved. For example, in daily stand -up (an agile practice), discus-sion, ar tifact s and visualisations ( knowledge management strategies) are implemented to manage product, project and process knowledge ( knowledge type s ). It can be seen knowledge to be managed. Without using artifacts on the scrum board and discussing the stories, the knowledge in daily stand -up cannot be managed effectively. 5.1 Implications For practitioners, this SLR shows that there are three specific types of knowledge in-volved in everyday agile practice, which suggests that knowledge is necessary to be embedded and referred to by agile teams. It also seems important for agile teams to identify the three types of knowledge included in each knowledge management strategy (e.g. discuss ions, artifacts and visualisations), which must be applied by agile teams in everyday practice. Thus, in order to gain benefits of knowledge management, we sug-gest that practitioners nee d to pay more attention to the types of knowledge described in this re view, focus on how to manage that knowledge using the strategies discussed and implement the knowledge management concepts consciously in agile practices. In terms of research, the SLR results suggest that instead of managing knowledge in ASD by classifyin g it as tacit and explicit knowledge, the specific explanation of knowledge management in ASD based on software engineering would be more relevant for agile teams, such as product, project and process knowledge involved in each agile practice. It also seem s there is a need for further study into the knowledge types and management strategies involved in agile practices. 5.2 Limitations We now discuss some of the limitations of this SLR. First is related to completeness. Despite our best efforts, and as common with most SLRs, there is a possibility that some articles published in some journals and conferences, which can address the re-sear ch questions, were missed in this SLR. Thus, our results must be classified as ap-plying to the papers selected from the three m ajor digi tal libraries .

Furthermore, we are aware that some questions might arise about the selected arti-cles. Thus, we defined inclusion and exclusion criteria ( listed in [5] due to space con-straints ) as a protocol in selecti ng primary studies guided by the research questions. As well as some papers that described knowledge management theories in ASD, the im-plementation of knowledge management theories was reported but not discussed in de-tail in the primary studies, and are therefore not included in this SLR. We also assumed that selecting primary studies based on industrial empirical results would be more val-uable for agile practitioners than summarizing findings fr om educational settings. This systematic literature review set out to analyse and summarize the empirical re-search on knowledge management in agile software d evelopment (ASD). We analysed 48 primary studies filtered from an initial pool of 2317 papers using inclusion and ex-clusion criteria, presenting agile practices that support knowledge management in ASD. strategies in everyday agile practices. The most important co ntribution of this SLR is providing a new understanding of knowledge management in ASD that involves man-aging three different types of knowledge  X  process, project and product  X  by imple-menting three knowledge management strategies  X  discussions, artifacts and visualisa-tions  X  during every day agile practices. Understanding these specific dimensions of knowledge and specific knowledge management strategies will help agile practitioners become aware of, and enable them to manage, the knowledge in everyday ag ile prac-tices effectively .
 Acknowledgement This research is supported by the Indonesia Endowment Fund for Education (LPDP) S -669/LPDP/2013 as scholarship provider from the Ministry of Finance, Indonesia. 
