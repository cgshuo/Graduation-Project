 Giulia Bruno, Paolo Garza * 1. Introduction
The analysis of collected data with the aim of detecting implicit information is clearly a fascinating task, which can be complex due to the size of datasets. There are two kinds of interesting knowledge to discover from data sources: frequent trends and outliers with respect to such frequent trends. Both of them can augment the knowledge about a data source. liers is a challenging task either to clean errors or discover the meaning of exceptions through a further investigation.
A functional dependency [4] is a relationship between database attributes. It states that in each record the value of an base schema and describe a priori knowledge that is known at design time. Nevertheless, collected data can hide interesting and previously unknown information on unstated constraints. For example, it happens when data are the result of an inte-gration process of several sources or when they represent dynamic aspects. When functional dependencies are unknown, inferential algorithms can be used to discover potential functional dependencies from the current instance of the database ferently from functional dependencies, approximate and quasi-functional dependencies [5,7] are dependencies which hold deviate from the normal behavior. Hence, they can be labeled as outliers.

The construction of temporal databases has enjoyed substantial interest from several years [8]. Temporal data mining has interesting exceptions.

In this paper, we address the outlier detection problem as being a part of the data mining process and we introduce a proposal for discovering outliers from temporal databases. Our technique allows mining temporal association rules (TARs) and merging them to derive temporal quasi-functional dependencies. A temporal quasi-functional dependency (TQFD) is an approximate functional dependency derived from data, and represents an implication among attributes over time, which holds frequently in the analyzed dataset. We argue that those data that do not satisfy the TQFD implication represent out-functional dependencies analysis to mine interesting temporal outliers from temporal datasets. The proposed approach (i) such inferred dependencies.

We make the following contributions: (1) we give a rigorous definition of temporal association rules (TARs) and temporal quasi-functional dependencies (2) we propose an algorithm to mine temporal association rules from data and an approach to infer temporal quasi-func-(3) we propose a temporal outlier detection algorithm (called TOD) based on analysis of temporal quasi-functional depen-(4) we perform an extensive set of experiments to show the effectiveness and efficiency of our approach. The rest of the paper is organized as follows: In Section 2 we survey related works and place our contribution in context.
In Section 3 we provide background knowledge and give formal definitions of temporal association rules and temporal quasi-functional dependencies. In Section 4 we describe how temporal association rules and temporal quasi-functional dependen-in Section 6. Finally, Section 7 draws conclusions and presents directions for future works. 2. Related works
Statistical approaches were the first methods exploited to extract outliers. The basic component is a probabilistic model model are considered as outliers [13 X 16] . Once a probabilistic model is given or constructed, statistical methods are very efficient. However, they have several disadvantages which make their use in data mining systems inconvenient. Firstly, they strictly require the usage of a data model. If the model is parametrized, complex procedures for finding values they assume are necessary. Furthermore, it is not guaranteed that the data of the observed population match the assumed distribution law if there is no estimate of the distribution density based on the empirical data.

Nowadays, the most popular approaches for outlier detection are distance-based methods [1,17] . Outliers are quantita-tively characterized by means of a distance function between objects of the database. Although the distance-based methods have the main advantage of not requiring a probabilistic model, the majority of them have a quadratic complexity. Further-more, when they are applied to real information systems, which contain heterogeneous data with a complex structure, the definition of a distance function between objects is a non-trivial problem. In literature, many examples of distance-based of temporal outlier is not considered. A more recent and complete overview of outlier detecting techniques is proposed in we focus our analysis on temporal data and present the motivation of introducing our algorithm in the context of temporal outlier detection. ent two examples of detected outliers in road load of vehicles. The problem of outlier detection in moving object datasets ments. In [22] the problem of finding time sequences discords (i.e., subsequences of longer time series that are maximally numerical attribute values to define temporal trends. Instead, our method can be exploited for both categorical and numer-outliers with respect to them.

The problem of analyzing co-evolving time sequences is addressed in [24], where the authors highlight the issue of detecting correlations among sequences which evolve over time (e.g., network management data or sales data). The authors concentrate on discovering correlation patterns among sequences and predicting missing values, but spend less attention to stead, we concentrate on the problem of detecting outliers among correlations between attribute values.
In some domains online outlier detection algorithms are needed to identify outliers immediately (i.e., real time outlier real time outlier detection.

In literature, different types of data relations similar to functional dependencies have been proposed. Even if the formal names of such relations are different, they have almost the same meaning. In [6] approximate functional dependencies are defined as functional dependencies that almost hold, i.e., with an error lower than a threshold. Hence, approximate depen-not consider temporal dependencies. In [26] the authors introduce the notion of pseudo-constraints, which are predicates having significantly few violations. The authors use this pattern to identify rare events in databases. The aim of the work is similar to our main purpose: they define this data mining pattern to detect interesting anomalies. However, our approach notion of pseudo-constraint on the Entity-Relationship model, whereas we use association rules to define a quasi-functional constraint.

In [27] authors define the conditional functional dependencies. They are a sort of functional dependencies which are example, in a citizen database, if two tuples have the same Address value, they must have also the same Zip code, but only ples which have other City values do not respect it. Thus, there is not a functional dependency between Address and Zip code, but it is conditioned by the value of City. Authors define a method to detect violations of conditional functional dependencies to perform data cleaning. They do not consider the problem of outliers, but they are mainly interested in the detection of inconsistencies in data. The use of quasi-functional dependency in order to detect anomalies was first introduced in [28]. The authors present results on protein structure databases, without formalizing the concepts of qua-si-functional dependency and without defining a general method to retrieve the anomalies. A further step is presented in [7] where the notion of quasi-functional dependency and the method to retrieve anomalies and to discover their pos-sible nature are presented.

As explained, functional dependency (or attribute correlation [29]) discovery from non-temporal databases are well-known problems. However, the previous described methods succeeded in discovering correlations between attributes and can suggest a causality among conditions. In [30] authors define a uniform notation for temporal functional dependencies through an algebraic framework, and review some previous representations. In our paper, we focus on the definition of a method to directly infer temporal quasi-functional dependencies from data and use them to extract outliers.
On the other hand, a vast literature is present on detecting temporal association rules from data. The problem of discov-ering associations from data was introduced in [31], followed by successive refinements, generalizations and improvements, among which there is the extension to temporal associations. A review of some methods to detect temporal association rules and each object has a unique identifier and a set of numerical attributes. The database is viewed as a set of sequences of snapshots and each snapshot has objects consisting of attributes with their numerical values. They provide an algorithm to detect temporal association rules which achieves specific support, density, and strength thresholds. They proposed to algorithm. We propose a similar method to extract temporal association rules and then we use them to detect temporal qua-si-functional dependencies and outliers.

The previously discussed temporal association rule mining algorithms focus on temporal datasets containing point-based approach for temporal outlier identification from temporal databases composed of point-based events. market basket analysis, it can be found that a product is bought with another product only in the month of January. This extension has been introduced to overcome the problem that rules can have a low support on the entire database, but work to be done in the determination of the frequent itemsets. With the concept of time, they consider the rules that have
Analogously, we do not consider asynchronous period patterns [36] since they are not useful to identify temporal (quasi-)functional dependencies.

In order to allow interoperability between different data mining systems, ad-hoc standard models and languages have been proposed for storing data mining patterns and models. The Predictive Model Markup Language (PMML) [37] is an
XML-based markup language and it is usually considered the standard language for storing data mining models and associ-ation rules. Even if we do not consider the problem of model representation, many approaches can be used to store, query, and share data mining models and patterns (e.g., [38]). 3. Temporal association rules and temporal quasi-functional dependencies
In this section, some background knowledge is introduced, including the definitions of relational database, association rules, and functional dependencies. Furthermore, temporal association rules and temporal quasi-functional dependencies are defined. 3.1. Background
In a relational database, a relation corresponds to a table. A table is characterized by a fixed number of attributes (col-umns) and it is composed by a set of tuples (rows). In each tuple it is assigned at most one value to each attribute.
Definition 1. Let D ={ d 1 , d 2 , ... , d n } be a set of attributes and Dom ( d assume that the empty set is included in the attribute domain.

Definition 2. Let R ={( d 1 , v 1 ),( d 2 , v 2 ), ... ,( d and v i 2 Dom ( d i ). A relational table R is a table containing tuples (or records) t where t # R such that $ ( d
Association rule discovery [31] is an important data mining technique, which is commonly used for local pattern detec-are useful for finding correlations among sets of data. Association rules are defined as follows.
Definition 3. An association rule is a rule in the form X ? Y [ s , c ], where (1) X # R , Y # R , (2) X \ Y = ; , where N r is the number of tuples in the relational database, N and N x is the number of tuples that contain X . s and c are respectively called support and confidence of the rule.
A functional dependency states that if in a relation two rows agree on the value of a set of attributes A # D , then they tional dependency, because for each row the value of the attribute IdBuyer implies the value of the attribute Name . Key constraints are among the most important of these kinds of dependencies.
 dependency A ) B if the following holds for every pair of tuples t (1) If t 1 . A = t 2 . A , then t 1 . B = t 2 . B .
 butes A and B , and a directed dependency A ) B , the dependency degree value represents the strength of the dependency between A and B (i.e., how B if functional dependent with respect to A ). The dependency degree value represents how frequently the dependency holds. In [39], p is computed combining support and confidence of association rules involving A and B .

Definition 5. Let A # D and B # D be two sets of attributes. The dependency degree p of a dependency A ) B is defined as follows. where AR is the set of all association rules which involve the set of attributes A and B , s and confidence values of each rule.

The dependency degree index p assumes values in the range (0,1]. As demonstrated in [39], the dependency degree index sum of all association rule supports is 1 [39].

Definition 6. A quasi-functional dependency is an implication in the form A (1) A # D , B # D , (2) A \ B = ; , (3) p &lt;1, where p is the dependency degree. 3.2. Temporal association rules
Since transaction data are often temporal, the problem of discovering temporal relations becomes relevant. For example, when gathering data about products purchased in a supermarket, the time of the purchase is registered in the transaction.
Temporal association rules are extension of previously defined association rules and consider also the time delay between the antecedent and the consequent. Also the concepts of database and itemset are extended as follows. transactions or tuples in the form of ( t , E ), where t 2 T and E # R .

The temporal attribute domain is ordinal and can be divided into equal length intervals, which can be represented by a certain number of intervals. To avoid spending unnecessary resources a mining parameter called sliding window size, de-the transaction database is defined as follows.
 interval t 0 such that K contains a transaction or a tuple at interval t distinguish the items in a megatuple from the items in a tuple, they are called extended-items.

Definition 9. Given R and w , the set of extended-items is R
Definition 10. A temporal association rule is an implication in the form X (4) $ ( d i = v i )(0) such that ( d i = v i )(0) 2 ( X time where T xy is the number of megatuples that contain the set of extended-items X [ Y and T contain X .

The fourth condition in Definition 10 is necessary to exclude redundant rules which are temporal shifts of other rules. For example the rule ( d 1 = a )(1) ? ( d 2 = b )(2) is a temporal shift of the rule ( d useless.
 3.3. Temporal quasi-functional dependencies
Also the temporal quasi-functional dependencies can be defined by extending the previously described quasi-functional dependencies.
 Definition 11. Given D and w , the set of extended attributes is where d i ( t ) represents the d i attribute at time t .

Definition 12. A temporal quasi-functional dependency is an implication in the form A (4) $ d i (0) such that d i (0) 2 ( A time [ B time ), 1 6 (5) p &lt;1, where p is the dependency degree.

Analogously to Definition 10 , the fourth condition in Definition 12 is necessary to exclude redundant and useless depen-dencies, which are temporal shifts of other dependencies. 4. Mining temporal association rules and quasi-functional dependencies
Our algorithm extracts the temporal association rules from the database. Then, they are combined to detect temporal quasi-functional dependencies.
 time-delay matrix is a matrix with ( k w + 1) rows and ( n w ) columns. Each row is a sliding window and each column con-mining approach (e.g., Apriori [31], FP-growth [41]) to the time-delay relation.
 Once temporal association rules have been mined, they are combined to extract temporal quasi-functional dependencies.
In particular, for each possible quasi-functional dependency A ing the formula reported in Definition 12 .If p is lower than 1 a temporal quasi-functional dependency has been found. 4.1. Temporal association rule mining: managing numerical values
Algorithms for discovering association rules work well for datasets drawn from a domain of values with no relative a discretization process is needed. Discretization is the process of mapping the range of possible values associated with a continuous attribute into a number of intervals each denoted by a unique integer label and converting all the values asso-ciated with this attribute to the corresponding integer labels [42].

The first proposed algorithm [43] is based on the notion of quantitative association rules. Each quantitative attribute do-main is partitioned into small intervals and adjacent intervals are combined into larger ones such that the combined inter-uniform representation.

There exist several ways to partition continuous data into discrete values, and the best way strongly depends on the do-support to be considered. To investigate how the discretization affect the results, we perform experiments by varying the discretization technique and the number of bins, thus showing how the results change by varying these parameters. Among the most popular discretization methods there are (i) the equal interval width methods, in which the range of values is di-containing equal number of values, and (iii) more sophisticated clustering techniques, which identify partitions that maxi-mize inter cluster distance and minimize intra cluster distance [44]. For our purpose, we considered the equi-width binning imental results are reported in Section 6.1.3.

Recently, some works consider a fuzzy discretization [42,45 X 48] . However, the quality of the produced results relies quite od is proposed for autonomous mining fuzzy sets by means of a clustering algorithm, namely CURE. Then, for each fuzzy set a corresponding membership function is generated. A similar approach has been presented in [42], where author exploit the fuzzy C-means for determining the cluster centroids, and then define the membership functions according to the centroids.
In both approaches, the shape of membership functions is a priori given. In [47] they are triangular-shaped, while in [42] they are trapezoidal. In literature several other membership function shapes exist: Gaussian, sigmoidal, polynomial,
J-Shaped, etc. Combinations of them are also possible. For example, in [49] two types of membership functions are used: a Gaussian membership function which achieve smoothness for the degree of membership of normal level, and two sigmoidal membership functions which are able to specify asymmetric membership functions for the low and high levels.
Since the definition of the appropriate membership functions is a non-trivial problem, we do not exploit it in the current paper. However, we believe that our method can be adapted to handle fuzziness by following the same process presented quasi-functional (fuzzy) dependencies. 5. The TOD algorithm
The proposed temporal outlier detection algorithm, called TOD, is based on temporal association rule and temporal quasi-functional dependency discovery. The idea is that a temporal quasi-functional dependency t with an high dependency degree dependency t will be a potential functional dependency. We argue that this set of data is composed by outliers. Hence, we propose a temporal outlier detection algorithm based on the following steps: (1) Extraction of temporal quasi-functional dependencies with a dependency degree value higher than or equal to a user-(2) For each temporal quasi-functional dependency, selection of the minimal set of data that should be removed in order from the temporal database K with a sliding window size equal to w and a maximum length of l (Algorithm 1, line 2). Then, for each possible set of attributes A and B , the temporal association rules are used to compute the dependency degree p of
A time [ B time . Only the temporal quasi-functional dependencies with a p greater than or equal to the minimum dependency and the data matching one of the selected rules are included in the outlier set (Algorithm 1, line 7).
Algorithm 2 shows in more details how, for each temporal quasi-functional dependency, the set of temporal association dependency A time [ B time , the set of rules related to it, i.e., which contain A groups the rules by body value (Algorithm 2, line 3) and for each group it computes the maximum confidence value (Algo-add them to the output set of low confidence rules (Algorithm 2, lines 6 X 8).
 Algorihtm 1. TOD: temporal outlier detection algorithm
Input : temporal dataset K , sliding window size w , length of extracted quasi-functional dependency l , minimum
Output : set of outliers O 1: /* Extract temporal association rules of length l and discover l-length temporal quasi-functional dependencies analyzing 2: TARs = mine_temporal_association_rules( K , w , l ) 3: TQFDs = mine_temporal_quasi-functional_dependencies( TARs , Pthreshold , l ) 4: /* Highlight outliers by considering mined temporal quasi-functional dependencies */ 5: for all t in TQFDs do 6: LowConfAssRules = select_low_confidence_rules( t ) 7: O = O S matching_data( K , LowConfAssRules ) 8: end for 9: return O Algorithm 2. select_low_confidence_rules Input : temporal quasi-functional dependency t
Output : low confidence association rules AR low _ conf 2: /* Create one group of rules for each antecedent */ 3: rule _ groups =group by antecedent the rules in t . AssociationRules . Create one group for each possible antecedent. 4: for all group g in rule _ groups do 5: max _ confidence = Max " r 2 g ( r . confidence ) 6: for all rule r 2 g do 7: if r . confidence &lt; max _ confidence then 9: end if 10: end for 11: end for 12: return AR low 5.1. Example
As an illustrative example, we can consider the data in Table 3 , which represents the amount of packets sent (PkS), pack-the corresponding time-delay matrix (with a sliding window of length 2) is shown. By analyzing this matrix, the TOD algo-rithm detects the temporal association rules. Examples of temporal association rules with PkL(0) in the body and PkR(1) in the head are reported in Table 5 .

The TOD algorithm analyzes the temporal association rules and extracts the temporal quasi-functional dependencies. For example, we can consider the PkL (0) [ PkR (1) temporal quasi-functional dependency, which has a dependency degree high-after a time unit is known. Once the temporal quasi-functional dependencies have been detected, the low confidence asso-ciation rules are found. To this aim, first the rules are grouped by body values and the maximum confidence value for each group is computed, as shown in Table 6 . Then, for each group, the rules with confidence less than the maximum confidence are labeled as outliers. 5.2. Complexity of the TOD algorithm
The most computationally intensive steps of TOD are the temporal rule mining step (Algorithm 1, line 2) and the temporal quasi-functional dependency mining step (Algorithm 1, line 3). Also the outlier detection step (Algorithm 2, lines 5 X 8) is potentially an intensive step if the number of TQFDs with a dependency degree value higher than Pthreshold is high. How-N R .
 As demonstrated in [51], the total number of rules ( R ) in the worst case is: pairs, the number of items N I is: where N A is the number of attributes of the original dataset. If the domains ( Dom ( d same size (i.e., D ), then N I can be approximated as: the worst case, the rule mining phase is exponential with respect to the number of attributes ( N size ( w ).

However, it has been empirically showed on real datasets [31,41] that on average the number of generated rules is sig-nificantly lower than the upper bound on the number of rules obtained by applying the formula reported above. Further-more, a threshold can be enforced to limit the maximum size of the mined rules. In fact, rules too long are often not useful because not interpretable or redundant. By mining rules of length lower than or equal to L ( R of mined rules is:
By applying this threshold, the maximum number of mined rules significantly decreases. For example, for L = 2 the num-ber of mined rules is R 2 N 2 I , and for L =3 R 3 N 3 I . Since N respect to the rule length.

A similar argument hold for the temporal quasi-functional dependency mining step (Algorithm 1, line 3). In the worst case, the maximum number of mined temporal quasi-functional dependencies is the total number of possible combinations of the extended attributes of the time-delay matrix (i.e., N polynomial with respect to the number of attributes and the sliding window size and it is exponential with respect to the rule length.

We can also notice that the proposed approach supposes that no a priori knowledge is available. Thus, it analyzes all the possible pairs of extended attributes and computes the dependency degree value for each pair. However, if some a priori act functional dependencies. Since we are interested in quasi-functional dependencies, primary keys can be removed from the initial dataset without affecting the set of detected outliers, thus reducing complexity and execution time of TOD.
An empirical measurement which confirm the theoretical evaluation of the complexity of TOD is reported in Section 6.2. 6. Experiments
We performed a wide set of experiments to determine the effectiveness and the efficiency of the TOD method. The exper-iments were performed by using two different data generators.

The financial time series benchmark FinTime data generator [52] is used to generate the first set of synthetic datasets. We effect of different discretization methods and number of bins on the extracted quasi-functional dependency. The results on the financial datasets are reported in Section 6.1.

A second data generator, implemented by ourselves, was used to perform a set of scalability experiments to measure the dow, and (iv) the maximum length of the extracted temporal quasi-functional dependencies. These results are reported in
Section 6.2. The data generator implemented by ourselves is publicly available at http://dbdmg.polito.it/~garza/TemporalDa-taGenerator/ .
All the experiments were performed on a 3.0 GHz Intel Xeon system with 16GB RAM, running ubuntu 6.10. For the item-6.1. FinTime datasets
FinTime is a synthetic dataset, composed of four tables and it is usually used to analyze performance of query engines and financial tools on stock market data. The FinTime datasets were generated by using the publicly available FinTime data gen-erator [52]. In our experiments, we considered the Market Data table which stores daily historical market data about stock volume of shares traded (Volume). Different datasets can be generated by setting the number of days and of stocks required.
We performed the experiments on a set of datasets generated by varying the number of days and by setting the number of stocks to one (hence, the id attribute of the Market Data table always assumes the same value in our datasets).
Before extracting association rules, all the continuous attributes of the FinTime dataset have been discretized. We re-tion 6.1.3). In this Section we report experiments obtained by mining 2-length quasi-functional dependencies (i.e., one extended attribute in the antecedent and one in the consequent) and by setting the sliding window parameter w to 2 in Sections 6.2.3 and 6.2.4 . 6.1.1. Extracted temporal quasi-functional dependencies and outliers
We performed an initial set of experiments by generating a FinTime dataset with 1000 tuples (i.e., 1000 consecutive daily discretization technique and the number of bins on the extracted outliers will be discussed in Section 6.1.3.
As described in Section 5, the TOD algorithm exclusively analyzes the temporal quasi-functional dependencies with a to 0.99, since we are interested only in  X  X  X trong X  dependencies which describe the normal behavior of the analyzed data. By tion 6.1.2).

Only two of the mined temporal quasi-functional dependencies have a dependency degree value higher than 0.99. In par-ticular, the following temporal quasi-functional dependencies with a p value higher than 0.99 have been extracted: (1) ClosePrice (0) [ OpenPrice (1), p = 0.998; (2) OpenPrice (1) [ ClosePrice (0), p = 0.998.

The first one states that for each stock the open price of one day is almost always functionally dependent on the close the previous day. This temporal quasi-functional dependency is given by the fact that the open price of stocks is usually tional dependency automatically extracted by our approach represents an actual behavior of the analyzed data. The second related to stock splits.

After retrieving the temporal quasi-functional dependencies with a dependency degree value higher than 0.99, the TOD algorithm selects, for each temporal quasi-functional dependency, the set of rules related to the extracted temporal quasi-temporal quasi-functional dependency, TOD examines the temporal association rules which involve the attribute ClosePrice Table 9 . The attributes assume values in the range [1,10], because values are discretized in 10 bins. majority of cases (i.e., 86.36%) the opening price of the following day is 10, but in few cases it is another value.
When we apply the TOD algorithm to detect outliers, as described in Section 5, it first finds the rules with a confidence value lower than the maximum confidence of the rules with the same body (Algorithm 2, lines 6 X 8). Then, outlier are ex-our approach labeled as outliers the situations in which the open price is different from the close price of the previous day, because they are rare events which happen only in particular situations (i.e., they are  X  X  X ifferent X  from the majority set. In particular, TOD finds three outliers on the used FinTime dataset.

The temporal quasi-functional dependency OpenPrice (1) [ ClosePrice (0) is given by the same outliers of the first temporal quasi-functional dependency discussed previously and we do not analyze it in details. However, we point out that two quasi-functional dependencies X ( t i ) [ Y ( t j ) and Y ( t j 6.1.2. Effect of minimum dependency degree value on the extracted temporal quasi-functional dependencies
We performed a set of experiments by varying the minimum dependency degree value ( Pthreshold ) passed as parameter to TOD. Fig. 1 (a) reports the cumulative number of extracted quasi-functional dependencies at increasing dependency degree value. If any minimum dependency degree threshold is enforced (i.e., Pthreshold = 0), 70 temporal quasi-functional dependencies are extracted from the FinTime dataset. If Pthreshold = 0.99, the only extracted temporal quasi-functional dependencies are the two discussed in the previous subsection. Fig. 1 (a) shows that few mined temporal quasi-functional dependencies are characterized by a high dependency degree value.

We also analyzed the effects of the Pthreshold parameter on the extracted outliers. In particular we measured the preci-precision and the recall formulas are reported in the following where O dataset is the complete set of actual outliers which are present in the dataset, while O by TOD. Both measures take values in the range [0%,100%].
 value, while the recall value is always 100% for each dependency degree value. As expected the precision of TOD increases when the dependency degree threshold increases and it is equal to 100% when the threshold is greater or equal to 0.93. 6.1.3. Effect of discretization on extracted temporal quasi-functional dependencies
We performed experiments by varying both the discretization method and the bin cardinality, to show how discretization influences the extracted temporal quasi-functional dependencies. We varied the number of bins ( N exploited the following discretization methods.
 Hierarchical clustering. For each attribute, a hierarchical clustering algorithm is used to group the attribute values in N K-means clustering. For each attribute, the K -means clustering algorithm computes N Equi-width binning. For each attribute, the interval range is divided into N
Figs. 2 (a) X (h), 3(a) X (h), and 4(a) X (h) report results obtained by applying respectively the hierarchical clustering algo-rithm, the K -means clustering algorithm, and the equi-width binning to discretize data. As expected, on average the depen-dency degree value of the mined dependencies is higher when few bins are used (for example, see Fig. 2 (a)) while decreases
Differently, when the number of bins increases (and hence also the number of items) lower support and confidence rules are ered methods.

Since we are interested in TQFDs with p higher than 0.99, we analyze in more details these results. To compare the three considered discretization approaches, we report in Fig. 5 (a) X (c), for each technique, the number of extracted TQFDs with a dependency degree greater or equal to 0.99 by varying the number of bins from 2 to 100. The obtained results show that archical clustering the number of extracted TQFDs with a dependency degree higher than 0.99 is equal to 2 for a significant 12). Differently, the equi-width binning method allows mining TQFDs with a p value higher or equal to 0.99 only if the num-
Instead, the two clustering techniques detect both the TQFDs which correspond to outliers caused by the rough discretization in only two bins. When three or more bins are exploited, the equi-width method does This behavior continue until 10 bins. After 10 bins, only the hierarchical clustering detects TQFD with p &gt; 0.99.
From these results we can conclude that the two clustering based approaches allow obtaining better results than the equi-width technique and, in particular, the hierarchical clustering is less affected by the bin cardinality. 6.2. Scalability of TOD
In order to analyze in details the scalability of TOD we performed experiments by varying both the dataset characteristics (i.e., number of records and number of attributes) and the values of the TOD parameters (i.e., sliding window size and rule length). The experiments were performed by exploiting a set of synthetic datasets from a data generator implemented by ourselves, which allows specifying (i) the number of attributes of the generated dataset, (ii) the number of records, and eters independently of the discretization technique. 6.2.1. Execution time when varying the number of records in the range from 10,000 to 100,000. The number of attributes is set to 15. window size (from 2 to 5) are reported. The execution time of TOD increases almost linearly with respect to the number of early with respect to the number of records (as explained in Section 5.2), also TOD is characterized by the same trend. By increasing the sliding window size, also the number of mined rules and thus the execution time increases, because there are more extended attributes in the time-delay matrix (see Section 4).

A similar trend was obtained by extracting 3-length temporal quasi-functional dependencies (see Fig. 6 (b)). However, since the maximum length of the mined TQFDs influences the maximum length of the mined association rules this param-6.2.2. Execution time when varying the number of attributes
Another parameter of interest is the number of attributes of the dataset. By increasing the number of attributes both the number of temporal association rules and the potential number of temporal quasi-functional dependencies increase. We per-formed experiments by generating a set of datasets with a number of attributes varying from 5 to 15 attributes. The number number of generated association rules and the number of potential dependencies are almost polynomial with respect to the number of attributes (as explained in Section 5.2), also the execution time of TOD is almost polynomial with respect to the number of attributes. 6.2.3. Execution time when varying the sliding window size
Fig. 8 (a) and (b) reports the execution time of TOD when varying the sliding window size from 2 to 5, by extracting 2-
TOD mines the set of association rules by exploiting a time-delay matrix. The number of extended attributes of the time-de-cution time of TOD is almost polynomial with respect to the number of extended attributes of the time-delay matrix (as explained in Section 5.2), and the number of extended attributes depends on the sliding window size, the execution time of TOD is almost polynomial with respect to the sliding window size. 6.2.4. Execution time when varying the dependency length
Finally, we performed a set of experiments to analyze the effect of varying the maximum length of the mined temporal quasi-functional dependencies. Fig. 9 (a) and (b) reports the execution time of TOD when varying the maximum length from each figure. The length of the extracted temporal quasi-functional dependencies impacts significantly on the execution time of TOD. The number of potential dependencies to be mined, and also the number of rules, increases exponential with respect increases significantly when dependencies with a length equal to 4 are mined. However, we can notice that long dependen-cies are usually useless. In fact, long dependencies in many real cases highlight outliers already discovered by means of shorter dependencies. 7. Conclusion
In this paper, we have (i) formally defined the temporal quasi-functional dependencies and (ii) presented the TOD algo-rithm to show how they can be used to detect temporal outliers. We showed the effectiveness and the efficiency of the TOD method by means of a wide set of experiments. In particular, the performance of TOD when varying the dependency degree dataset and the algorithm parameters is performed.

As an ongoing work, we are planning to develop a schema matching tool in order to be able to apply temporal quasi-func-tional dependencies extracted from one database to another one containing semantically similar data. Hence, we are exploit-ing a schema matching algorithm that maps the attributes of two databases depending on their semantic.
References
