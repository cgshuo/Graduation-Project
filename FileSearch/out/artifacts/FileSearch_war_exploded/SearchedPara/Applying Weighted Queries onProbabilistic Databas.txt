 Relational queries applied on probabilistic databases have been established as a powerful tool for accessing huge data sets of uncertain data. Often various parts of such queries have different significances for a specific user. Thus, a query language should allow us to give subqueries different weights to quantify the individual user preferences. In this work we introduce a theoretical foundation for weighted algebra operators on probabilistic databases within a SQL-like query language.
 H.2.3 [ Information systems ]: Database management X  Languages Probabilistic database, Weighting, Weighted query, ProQua
Nowadays, many real-world scenarios depend on manag-ing and querying huge volumes of uncertain data. Such  X  X n-complete X  databases emerge, for example, when (i) we inte-grate data from various sources, (ii) we analyse social, bio-logical, and chemical networks or (iii) we co nduct privacy-preserving data mining. These real-world applications show the rising importance of uncertain data and the potential benefits of probabilistic databases [12].

Considering a given query a user has often individual pref-erences for different query components expressing her/his personal information needs. A successful approach for for-mulating preferences is the quantitative weighting of sub-queries or subconditions [1, 14]. In this work we will apply this concept on algebra operators. To the best of our knowl-edge, our concepts and techniques are the first ones which enable a multi-level weighting of relational subqueries on Figure 1: Running scenario tables Arte , ArteExp and ArteMat (the underlined attributes indicate the event keys (see Sec. (2))) probabilistic databases. The main contributions of this pa-per is a theoretical foundation for processing weighted al-gebra operators on probabilistic databases by extending the well-known possible-world-semantics.

Please note that this paper is a short version of [4]. In [4] the interested reader can additionally find (i) an evalua-tion approach for weighted operators and (ii) an experimen-tal valuation of our evaluation techniques on a probabilistic TPC-H database. Furthermore, we integrated all presented weighted operators into our probabilistic database system ProQua 1 .

Running scenario: In the following sections we will use a running scenario to demonstrate our ideas and tech-niques. This scenario is motivated by the redevelopment of the CISAR project 2 which is a web-based Geo Information System for archaeology and building history. Technologies of ProQua will be widely used in its successor system Open-InfRA.

Our simplified example scenario is based on the deter-ministic table Arte facts ( Arte ) and the two probabilistic ta-bles Arte facts classified by Exp erts 3 ( ArteExp )and Arte facts to the actual data tables. classified by Mat erial 3 ( ArteMat ), see Fig. (1). In table Arte we manage information about several artefacts which were found during an archaeological excavation. Thereby, the sondage number (attribute sond ) of an artefact describes its geographical area of finding.

Moreover, several experts gave an expertise about the originating culture (attribute culture ) for each artefact, see table ArteExp . Those estimations are annotated by a confi-dence value (attribute conf ) expressing the probability that the considered artefact is created by the specified culture. Besides these subjective expert valuations we also take more objective methods into account. These archaeometrical meth-ods (e.g. XRF 4 and ICS-MS 4 ) rely on material analysis.
Based on the introduced tables we want to run follow-ing query: Determine all artefacts with their possible cul-tural origins and their respective types whereby their finding sondages should be near sondage 10 or their ages should be around 300 years .

To answer this query we use ProQua in conjunction with its query language QSQL2 [7, 8], see Fig. (2). A user ad-ditionally individualises this query by weighting the impor-tance of different subqueries. Concretely, the user quantifies the significances of (i) the culture estimated by an expert vs. (ii) the culture classified by a material analysis (see key word union[0.9, 0.4] and operator  X   X  1 , X  2 in Fig. (2)). In this example we presume that the user determines the weighting variables as  X  1 =0 . 9and  X  2 =0 . 4. That means, the user prioritises the expert valuation over the material analysis, because we assume that a large weight taken from the interval [0 , 1] corresponds to a high priority.
By abstracting the QSQL2 query of Fig. (2) we obtain following weighted algebra query:
This weighted algebra query is grounded in a novel seman-tical model. Precisely, we extend the well-known possible-world-semantics for processing a weighted algebra query on probabilistic data (see Sec. (3)). For evaluating such an extended query we employ an event pattern approach for weighted operators [4] and a probability computation algo-rithm exploiting the well-known Shannon expansion. By applying the ranking semantics of expected scores (see [10]) we finally generate a combined query plan which produces the desired query result.

After giving a brief introduction of the possible-worlds-semantics in Sec. (2) we will present our main contribution the inductively coupled plasma mass spectrometry method . in form of an extended data and query model in Sec. (3). Finally, we will finish our work by a discussion about related approaches in Sec. (4) and by our conclusions in Sec. (5).
In this section we briefly introduce the possible-world-semantics as the underlying model for probabilistic databases . In a probabilistic database several possible database instances, also called possible worlds , are managed and queried simul-taneously. Thereby, the  X  X eal world X  is assumed to be un-known. To cope this uncertainty we define a probability measure over the set of all possible worlds. Concretely, we adapt the definition from Suciu et al. [12] for our purposes.
Definition 1. Let R 1 ,...,R n be a relational database sche-ma with n relation names. An incomplete database is a finite set of structures W = { W 1 ,W 2 ,...,W k } whereby each W i A probabilistic database is a probability space D =( W , P ) over an incomplete database W .Thus, P : W  X  [0 , 1] is an additive probability measure with assume  X  W  X  W : P ( W ) &gt; 0.

To process an algebra query on a probabilistic database we use the possible answers query semantics [12].

Definition 2. Let Q be an algebra query and D =( W , P ) be a probabilistic database. The possible answers of the query Q isthetupleset Q poss( W ) = { t | X  W  X  W : t  X  Q ( W ) } . Additionally, the occurrence probabilities of all possible answers are calculated by the function Pr Q : Q
In the following section, we extend the possible-world-semantics and its corresponding query semantics in order to process weighted algebra queries.

We already presented the classical possible-world-semantics as a proper concept to express the uncertainty of an underly-ing data basis in the previous section. By allowing weighted operators within an algebra query we additionally introduce uncertainty on query side.

For demonstrating the basic ideas of our semantical ex-tension we relate the characteristics of a weighted query to the meaning of an unweighted query of the same structure. In detail, we firstly investigate an unweighted version of a subquery extracted from wQ e (see Sec. (1)): combines, (c) evaluates and (d) characterises It will be subsequently compared with the original weight-ed subquery:
Unweighted query Q s : So far, an unweighted algebra query has a deterministic structure and is evaluated against each data instance of a probabilistic database (see Def. (2)). As an example we consider the unweighted subquery Q s ap-plied on a simplified probabilistic database represented by the probabilistic tables ArteExp and ArteM at .Thereby,we presume that the queried probabilistic database only con-sists of the following two worlds 7 : W 1 : ArteExp 1 = { (Peter , art1 , roman) } ,ArteMat 1 = W 2 : ArteExp 2 = {} ,ArteMat 2 = { (ICS-MS , art2 , punic) i.e. W := { W 1 ,W 2 } . Furthermore, we set the occurrence probabilities of the introduced worlds to P ( W 1 ):=0 . 4and P ( W 2 ):=0 . 6.

If we run Q s against our simplified probabilistic database, then we evaluate Q s on each data instance and obtain the two result sets Q s ( W 1 )= { (art1, roman) } and Q s ( W 2 { (art2 , punic) } . Obviously, it is not easy to display a query output embodied by several resulting sets. Instead, we use thepossibleanswerset Q poss ( W ) and the resulting prob-determine Q poss( W ) = { (art1 , roman), (art2 , punic) Pr Q (art1 , roman) = P ( W 1 )=0 . 4andPr Q (art2 , punic) = P ( W 2 )=0 . 6 as result of the unweighted query Q s .
Weighted query wQ s : By using weighted operations within an algebra query the user introduces uncertainty on query side. That means, instead of applying just one deter-ministic query Q ,wenowconsidera set of possible query variants which is defined by a weighted query wQ .InFig. (3) we illustrate this idea by our example subquery wQ s . In contrast to Q s , the standard union in wQ s is replaced ArteM at of Sec. (1) actual encode more than two worlds. For the sake of simplicity, we restrict the set of all worlds in this section. by a weighted union  X   X  1 , X  2 using the weighting variables  X  1 =0 . 9and  X  2 =0 . 4.

For starters, we clarify the meanings of the applied weight-ing variables  X  1 and  X  2 . Roughly speaking, weighting vari-ables control the impact of the corresponding operands. For example, the weighting variable  X  1 =0 . 9 reflects the belief of the user that the data of the first operand  X  aid,culture Exp ) affects the operation result in worlds which occur with a combined probability of 90%. In other words, we state that  X  1 =0 . 9 represents the total combined occurrence probabil-ity of all worlds where the data of the first operand affects the operation result. Since the data of the second operand  X  aid,culture ( ArteM at ) influences the result just in worlds oc-curring with a combined probability of 40% (see  X  2 =0 . 4), we obtain a weighting where the data of the first operand has a higher influence/significance than the second operand, re-spectively. We will formally verify this interpretation later.
In order to achieve the described weighting effect we must extend our set of all possible worlds from W to W ext .So far, a single world of W just consists of one specific data instance W i , see Def. (1). Now we combine a data instance W i with a specific query variant Q var world ( W i ,Q var j ), see Fig. (3). So, we additionally need to build the set of all possible query variants denoted as Q . For our example query wQ s we generate the following four variants: To build these variants we firstly substitute the weighted union by its unweighted counterpart. Secondly, we adapt both operands to our semantics that an operand either in-fluences the operation result or does not influence it. Since we have two operands with the two modes d ata or n od ata we achieve four different combinations per former weighted operation. Thereby, the relation R  X  stands for an input re-lation without any tuples.

Similar to our data instances W 1 , W 2 with P ( W 1 )=0 . P (
W 2 )=0 . 6 (see above), we assign an occurrence proba-bility to each query variant by considering their respective weighting variables. More concrete, if an operand is pre-served in the considered query variant, then we use the value of the corresponding weighting variable. Contrarily, when the operand is set to R  X  , the negated weighting variable is taken. That leads to
So far, we created a set of possible data instances W = { W 1 ,W 2 } and a set of query variants Q = { Q var 1 ,...,Q associated with their respective occurrence probabilities P ( W ext we relate each data instance to each query instance and set the combined occurrence probability to the product be-tween their occurrence probabilities. Formally, we combine W with Q by a product probability space as W ext := W  X  Q we set up the eight extended worlds as listed in Fig. (4) and illustrated in Fig. (3).

Besides the data model we also extend the query seman-tics of Def. (2). The main idea for evaluating an extended world ( W i ,Q var j ) is to apply the query variant Q var ( instance, we compute the eight result sets as given in Fig. (4) for wQ s . Analogously to the unweighted version, we build the final query outcome by collecting all resulting tuples in Q poss( W ext ) and by summing up the occurrence probabili-ties of all relevant worlds to obtain the respective resulting probabilities. Thus, we get the following output for wQ s When we compare the weighted resulting probabilities of wQ s with their unweighted counterparts of Q s ,wecancon-firm a weighting effect induced by our extended model. So, the probability ranking for the two resulting tuples (art1 man ), (art2 , punic) has turned around, i.e. from (Pr wQ (art1 , roman) = 0 . 36) &gt; Pr wQ (art2 , punic) = 0 In fact, the worse occurrence probability for (Peter , art1 man) determined by P ( W 1 )isnowcompensatedbythe higher user priority for the first operand  X  aid,culture ( Please be aware that the first operand exclusively contributes thetuple(art1 , roman) to the result of wQ s (see also the construction of W 1 and W 2 ). Before we formalise our intro-duced concepts we verify the intuitive meaning of  X  1 =0 . explained above. For this purpose, we compute the probabil-ity of all extended worlds ( W i ,Q var j ) where the first operand  X  aid,culture ( ArteExp ) impacts the query result: Next we precise the structure of a weighted algebra query.
Definition 3. A weighted algebra query wQ is constructed from the standard relational algebra operators  X  ,  X  , ,  X  and the weighted algebra operators  X  1 , X  2 ,  X   X  1 , X  2 ,
Thereby, a weighted algebra query wQ represents a set of query variants Q = { Q var 1 ,...,Q var l } where Q var always a standard relational query (i.e. no weighted oper-ations). The query variants Q var j  X  Q are generated (i) by substituting each weighted operation by its unweighted counterpart and (ii) by building four variants per former weighted operation, whereby E 1  X   X  1 , X  2 E 2 represents the four query variants: E 1  X E 2 , E 1  X R  X  , R  X   X E 2 and R  X   X R { ,  X  , \} . The set of all possible combinations of all variants generated by all weighted operations defines Q .

Before we can define an extended probabilistic database we have to set up a probability space over all query vari-ants which can be subsequently combined with the prob-ability space over all data instances. Thereby, as already mentioned, the occurrence probabilities for a specific query variant Q var j  X  Q is taken from the corresponding weight-ing variables. We formally integrate the weighting vari-ables by introducing an independent random variable Y  X  i { d ata , n od ata } for each  X  i . Then, each query variant is uniquely related to a specific realisation/assignment of all random variables Y  X  i . For an example see columns Y  X  1 Y 2 in Fig. (4).
 Definition 4. Let wQ be a weighted algebra query and Q be the set of all query variants derived from wQ .Then we introduce an independent random variable Y  X  i with the domain { d ata , n od ata } and the occurrence probabilities P( weighting variable  X  i used in wQ . To define a probability measure P wQ over Q we utilise the joint distribution over all random variables Y  X  i , i.e. P wQ ( Q var j ):=
Finally, we can define an extended probabilistic database and its corresponding extended query semantics as already characterised above.

Definition 5. Let D =( W , P ) be a probabilistic data-base and wQ be a weighted algebra query applied on D .If ( Q , P wQ ) is the probability space defined by wQ ,thenan ) query result of Q var j ( W i ) Y  X  1 Y  X  2 )  X  { (art1 , roman) } d d ) )  X  R  X  { (art1 , roman) } d nd )  X  { (art2 , punic) } d d ) )  X  R  X  {} d nd extended probabilistic database D ext is defined as the prod-uct probability space ( W ext , P ext )with W ext := W  X  Q and P Definition 6. Let wQ be a weighted algebra query and D ext =( W ext , P ext ) be its corresponding extended prob-abilistic database. Then, we define the set of all possible answers Q poss( W ext ) and the resulting probability function Pr
Q
A comprehensive monograph addressing probabilistic data-bases has been recently published by Suciu et al. [12]. Fur-thermore, several probabilistic database systems have been successfully developed over the last years (e.g. [11, 3, 13]). In previous works [9, 5, 6] we proposed a probabilistic data and query model which combines information retrieval con-cepts with database technologies for a novel probabilistic database system called ProQua . To the best of our knowl-edge, our probabilistic database system ProQua is the only probabilistic database system which offers weighted algebra operators by its SQL-like query language QSQL2 [7, 8].
Nevertheless, you can also find weighting in the context of probabilistic ranking (for a fairly overview see [2]). In contrast to our weighted operators the weighting functions  X  ( t, i ) of [10] are used, for example, to express certain rank-ing semantics instead of quantifying the influence of sub-queries.

On the other hand, weighting within a logical formula is not new. Fagin and Wimmers [1] proposed, for instance, a special arithmetic weighting formula to be applied on a score rule. In [14] a weighting approach for logical subconditions is presented which is completely embedded in a logic.
In this paper we developed theoretical foundations for weighted algebra queries on probabilistic databases. These concepts are implemented in the probabilistic database sys-tem ProQua and its SQL-like query language QSQL2.

In future works we plan to develop optimisation rules ex-tend ProQua by further ranking semantics.
 Acknowledgment: Sebastian Lehrack was supported by the DFG grants SCHM 1208/11-1 and SCHM 1208/11-2. [1] R. Fagin and E. L. Wimmers. A formula for [2] I. F. Ilyas and M. A. Soliman. Probabilistic Ranking [3] C. Koch. MayBMS: A System for Managing Large [4] S. Lehrack. Applying Weighted Queries on [5] S. Lehrack and S. Saretz. A Top-k Filter for [6] S. Lehrack and S. Saretz. Evaluating Logic-Based [7] S.Lehrack,S.Saretz,andI.Schmitt.QSQL2: Query [8] S. Lehrack and I. Schmitt. QSQL: Incorporating [9] S. Lehrack and I. Schmitt. A Probabilistic [10] J. Li, B. Saha, and A. Deshpande. A unified approach [11] C. Re and D. Suciu. Managing Probabilistic Data with [12] D. Suciu, D. Olteanu, C. R  X  e, and C. Koch. [13] J. Widom. Trio: A system for data, uncertainty, and [14] D. Zellh  X  ofer and I. Schmitt. A preference-based
