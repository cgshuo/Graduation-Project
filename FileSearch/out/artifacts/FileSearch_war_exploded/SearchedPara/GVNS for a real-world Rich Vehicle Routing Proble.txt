 1. Introduction
Many practical applications related to logistics in intelligent freight transportation systems lead to vehicle routing problems with varying degrees of dif fi culty regarding the problem con-straints. The basic vehicle routing problem (VRP) is composed of a set of customers requiring a speci fi ed volume of goods to be delivered. A fl eet of homogeneous vehicles dispatched from a single depot is used to deliver the goods, returning to the same depot once the routes have been completed. The constraints associated to the problem are that vehicles can carry a maximum capacity and each customer has to be visited once by a single vehicle. The VRP has been the subject of intensive research since the 1960s. A wide range of exact methods, heuristics and meta-heuristics has been proposed in the specialized literature. We refer the interested reader to the following surveys by Schmid et al. (2013) , Vidal et al. (2013) , Eksioglu et al. (2009) , Potvin (2009) ,
Laporte (2009) , Gendreau et al. (2008) , Baldacci et al. (2007) , and books by Toth and Vigo (2002) and Goldenet al. (2008) .
The aim of this work is to solve a real-world VRP that has been posed to the authors by a company in the Canary Islands, Spain. The resulting software has been embedded into a fl eet management system. The requirements provided by the company lead to the consideration of several constraints, which have to be integrated into the standard VRP. In the literature, there is a tremendous number of research papers related to VRP with additional constraints, which range from the need of time windows to regulations related to long-distance transportation. With the purpose of collecting all these possible constraints, Vidal et al. (2013) have given the notion of attributes of VRPs. Attributes refer to additional constraints that aim
These attributes complement the tr aditional VRP formulations and lead to a variety of Multi-Attribute Vehicle Routing Problems ( MAVRPs ).
These MAVRPs are supported by a well developed literature that includes a wide range of heuristics and metaheuristics ( Glover, 1986 ).
Furthermore, some MAVRPs combine multiple attributes together, obtaining the so-called Rich VRPs ( RVRPs )( Schmid et al., 2013;
Tarantilis et al., 2009 ). The problem tackled in this work corresponds to this last class of RVRPs. We refer the interested reader to the taxonomy and de fi nition of Rich VRP proposed by Lahyani et al. (2015) . metaheuristics constitute an increasingly active research area in the literature. In our work, a General Variable Neighbourhood Search (VNS) algorithm ( Hansen et al., 2010b ) is proposed for solving a Rich Vehicle Routing Problem with Time Windows (RVRPTW).

Rich VRPTW including several real-world constraints required by some companies has been tackled. First of all, a fi xed heterogeneous fl eet of vehicles is considered. Moreover, since the fl eet is might be customers which cannot be served during the planning horizon and the so-obtained infeasibility has to be managed. Two alternative solutions are given in this work; allowing the drivers work after their working shift or maximizing the number of customers served postponing the remainder. The problem combines constraints which have not been managed all together in the literature as far as we know. Computational experiments on instances based on the real data and standard benchmark instances have been carried out in this paper.

It is worth mentioning that the solution method proposed in this work, implemented as a metaheuristic, has already been integrated into the optimization tool of the fl eet management system used by some companies. The fl eet of a company which wants to use this optimization tool must have the necessary devices to communicate with the management system, and then the system will be able to use the optimization tool and provide an optimized route plan. The optimization tool has been implemented using C # and the current solution method has been implemented using C  X  X  . Therefore, in order to integrate the metaheuristic method in the optimization tool, a DLL has been developed. The data-interchange format used to communicate the optimization tool with the DLL has been JSON, that is a text-based open standard designed for human-readable data interchange. Furthermore, it is worth noting that through the system interface, the company can activate or deactivate the consideration of the different attributes.
Since the main goal of our work has been to embed the developed software into a commercial fl eet management tool, it is desirable to develop an algorithm that not only performs well over the standard VRPTW instances, but also over constrained real-world problems. Therefore, this paper is not aimed at overcoming the best standard VRPTW results, but rather at proposing an algorithm that works effectively for solving real-world instances.
The rest of the paper is organized as follows. Section 2 is devoted to describe the Rich Vehicle Routing Problem with Time
Windows ( RVRPTW ) tackled in this work. Section 3 thoroughly describes the General Variable Neighbourhood Search (GVNS) algorithm developed to solve the problem at hand. Section 4 summarizes the computational results carried out over both instances from the literature and real-world data. Finally, the conclusions and future work are reported in Section 5 . 2. Rich Vehicle Routing Problem with Time Windows
Vidal et al. (2013) distinguish three main classes of attributes that appear frequently in the literature. These classes are the assignment of customers and routes to resources, the sequence choices, and the evaluation of fi xed sequences. The attributes that are taken into consideration in this work are summarized in the following items.

Heterogeneous fl eet : In the particular application of VRP tackled in this paper, it is considered a heterogeneous fl eet of vehicles. When the number of available vehicles is not limited, the problem is usually referred to as Vehicle Fleet Mix Problem (VFMP). In the case in which the fl eet of vehicles is limited, a different version of the problem, called Heterogeneous Fleet VRP ( HFVRP ), is revealed.
This last problem corresponds to the real-world application solved in this work. Precisely, it is available a fi xed set of heterogeneous vehicles. Exact and heuristic methods have been proposed for solving HFVRPs ( Baldacci, 2008; Baldacci and Mingozzi, 2009;
Brandao, 2011; Li et al., 2007; Paraskevopoulos et al., 2008; Penna et al., 2011; Prins, 2009; Subramanian et al., 2012; Taillard, 1999 ).
Most literature papers assume an unlimited number of available vehicles, so that the objective is generally to obtain a solution that either minimizes the number of vehicles and/or total travel cost.
However, the real-world problems arising in companies face several resource constraints such as a fi xed fl eet of vehicles.
Therefore, it might not be possible to obtain a feasible solution for a certain instance. In that case, it is required to provide a valid solution for the company by adding more vehicles, letting the drivers work after their working shift, postponing customers and maximizing the number of served customers, etc.

Time windows : Additional constraints arise if time windows are associated to the depot and customers, obtaining the Vehicle
Routing Problem with Time Windows ( VRPTW ). VRPTW and a vast set of its variants have been widely studied in the literature. For recent reviews, see Braysy and Gendreau (2005) and
Gendreau et al. (2010) . Furthermore, in the practical application reported in this paper, working shifts of vehicles are considered as time windows associated with each vehicle.

Soft and multiple time windows : In the implementation carried out in this paper, additional time attributes, which are the existence of multiple time windows for customers and multiple time intervals in the working shifts for vehicles, are taken into consideration ( Ibaraki et al., 2005, 2008 ). Note that time windows may differ among customers, and working shifts may differ among vehicles. In any case, the customers have to be visited at maximum once during the day. Moreover, soft time windows and soft working shifts are considered, since some of them can be violated, incurring in additional costs. Particularly, if working shifts of vehicles can be extended, extra hours are allowed for the drivers. This leads to additional salary costs, since the extra time is more expensive. A work related to VRP with soft time windows is by Taillard et al. (1997) .

Customer priority : In addition to the previous attributes, which are thoroughly analysed in the paper by Vidal et al. (2013) , the company under consideration in this work assigns priorities to some customers. Depending on these priorities, some custo-mers can be postponed until the next day and their service is not required during the current planning horizon. Together with extending the working shifts of the vehicles, postponing customers allow the system to obtain valid solutions for the company. Therefore, in the case in which the fi xed fl eet of vehicles is not suf fi cient for serving all customers, allowing extra time and/or postponing customers are possible alterna-tives if they are permitted by the company.

Vehicle  X  customer restrictions : There are also vehicle  X  limitations, which indicate that some customers cannot be served by some vehicles. Therefore, there will be a set of vehicle  X  customer constraints that can be due to several reasons such as road restrictions.

In addition to these attributes, several objective functions are required by the company to solve the problem at hand. Although the optimality criterion of minimizing the total travelled distance is the most commonly used in the VRP literature, more recent approaches recognize the VRP as a multi-objective optimization problem. Jozefowiez et al. (2008) provide an overview of the research into routing problems with several objectives. Important objectives, besides the minimization of the total travelled distance, are the minimization of the number of vehicles in use, the minimization of the total required time, the maximization of the collected pro fi t and some other objectives related to reaching a balance between the routes. In order to establish a balancing objective, the workload for a route has to be de fi ned. It can be expressed, for example, by the number of visited customers, the cargo, the quantity of delivered goods, the route length or the required time ( Borgulya, 2008; Jozefowiez et al., 2008; Kritikos and Ioannou, 2010 ). Among the researchers who have worked on VRPs considering several objectives and time windows we can mention, for instance, Hong and Park (1999) , who consider the minimization of total vehicle travel time and the minimization of total customer waiting time. Rahoual et al. (2001) consider objectives related to the minimization of the number of used vehicles and the mini-mization of the total covered distance. More recently, Calvete et al. (2007) minimize the total operational cost, the under-utilization of labour and the vehicle capacity. Jozefowiez et al. (2007) discuss the motivations for applying multi-objective optimization on vehicle routing problems and the potential bene fi ts of doing it. Ghoseiri and Ghannadpour (2010) present a model and a solution method based on genetic algorithms to solve the multi-objective problem considering as objectives both the total required fl eet size and total travelling distance. Meli X n-Batista et al. (2014) consider the objec-tive of balancing routes regarding time in conjunction with time windows in a multi-objective context.

In this work, given the fact that the fl eet of vehicles is company might require either minimizing the total distance or balancing time or distance if the use of all the available vehicles is mandatory. Therefore, the company has to indicate which principal objective function will be required. If having idle available vehicles is not allowed, then the time/distance balance objective function will be selected as principal one. Time balance is measured as the difference between the longest and shortest routes regarding time.
Distance balance is also measured as the difference between the longest and shortest routes regarding distance. Otherwise, mini-mizing the total distance will be the principal objective function.
Furthermore, a set of other objective functions are considered together with the principal one, as explained in the next section; particularly, minimizing the number of vehicles, extra hours, postponed customers and cost. All these functions will be used following a different lexicographic ordering of them, depending on the particular goal in each case.

Finally, infeasible solutions are taken into consideration. Particu-larly, infeasibilities due to the use of more vehicles than available, the extension of the time windows of the customers and the working shifts of the vehicles, or the postponing of customers are tackled.
With the purpose of solving the real-world RVRPTW tackled in thiswork,wehavedesignedaGeneralVariableNeighbourhood
Search algorithm. A tremendous amount of work in the fi eld of vehicle routing problem using VNS has been published. Br X ysy (2003) gives the internal design of the Variable Neighbourhood Descent (VND) and Reduced Variable Neighbourhood Search (RVNS) algo-rithms in detail, analyses the VRPTW problem, and indicates the VND algorithm as one of the most effective ways to solve VRPTW problems. Polacek et al. (2004) design a VNS to solve the multidepot vehicle routing problem with time windows (MDVRPTW). Kyt X joki et al. (2007) design a guided VNS algorithm to handle the 32 existing large-scale VRP problems and compare it with a tabu search (TS) algorithm. Goel and Gruhn (2008) introduce a RVNS to solve the general VRP including time windows, vehicle constraints, path constraints, travel departure time c onstraints, capacity constraints, order models compatibility constraints, multisupplier point of the orders, and transport and service position constraints. Hemmelmayr et al. (2009) propose a VNS algorithm for periodical VRP. Fleszar et al. (2008) adopt a VNS algorithm to solve the open-loop VRP and test 16 benchmark problems. In summary, several literature papers have proved the effectiveness of developing VNS algorithms to solve a wide variety of VRPs. 3. General Variable Neighbourhood Search for the RVRPTW
Exact algorithmic methodologies are not applicable when solving real-life large vehicle routing problem instances. Therefore, our interest is focused on metaheuristic methodologies that are capable of producing applicable high quality solutions within reasonable computing times. With the purpose of obtaining high quality solu-tions for the real-world problem at hand, this work proposes an algorithm based on General Variable Neighbourhood Search (GVNS) ( Hansen et al., 2010b ). Variable Neighbourhood Search (VNS) is a metaheuristic for solving combinatorial and global optimization problems based on a simple principle; systematic changes of neigh-bourhoods within the search. Many extensions have been made, mainly to be able to solve large problem instances ( Hansen et al., 2010a, 2008; Hoeller et al., 2008; Melian, 2006; Moreno-Vega and Melian, 2008 ).
 and N k  X  s  X  the set of solutions in the k th neighbourhood of a solution s . Usually, a series of nested neighbourhoods is obtained from a single neighbourhood by taking N 1  X  s  X  X  N  X  s  X  and N k  X  1  X  s every solution s . This means that a move to the k -th neighbourhood is performed by repeating k times a move into the original neighbour-hood. A solution s 0 A S is a local minimum with respect to is no solution s A N k  X  s 0  X  D S better than s 0 (i.e., such that f where f is the objective function of the problem). In the implementa-tion performed in this work, the neighbourhoods selected for the shaking process of the VNS are not nested, and different kinds of movements are implemented following the ideas described by
Repoussis et al. (2008) . The proposed sequence of movements and swapInter . This sequential selection is applied based on cardin-ality, which implies moving from relatively poor to richer neighbour-hood structures. The GENI operator ( Gendreau et al., 1992 )choosesa customer from a route and inserts it into other route between the two closest customers to the previous one. The Or -opt operator ( Or, 1976 ) relocates a chain of consecutive customers of a route. The
CROSS operator ( Taillard et al., 1997 ) selects a sequence of customers from a route, other sequence of customers from other route, and interchanges both sequences. The 2-opt operator ( Croes, 1958 ) choosestwocustomersofarouteandinvertsthesequenceof customer visited between them. The relocate operator ( Cassani and
Righini, 2004 )deletes a customer from a route and inserts it into another route. The swapInter operator selects a customer from a route, other customer from other route, and swaps them. hood structures that will be used in the local search conducted by a
Variable Neighbourhood Descent (VND). The Variable Neighbour-hood Descent (VND) method is obtained if the change of neigh-bourhoods is performed in a deterministic way. Its steps are presented in Algorithm 1 . The sequence of movements considered in this work ( l max  X  3) is the following: relocate , swapIntra and swapInter .Ina VND algorithm, if solution s 0 is worst than s , then l  X  X  ; otherwise, l  X  1.

Algorithm 1. Variable Neighbourhood Descent (VND). istic, whose pseudocode is shown in Algorithm 2 . Once de neighbourhood structures N k and N l in line 1, the best solution is initialized at the empty set and the stopping condition is chosen in lines 2 and 3, respectively. The stopping condition consists of a number of iterations that corresponds to a parameter N that is set in the computational experience. Then, for each iteration, an initial solution is generated in line 5. With this purpose, an ordering of the available vehicles is obtained according to which the vehicles are selected to create the routes. This ordering is given taking into account the capacity of each vehicle, in such a way that vehicles with larger capacity are selected earlier. If there are multiple vehicles with the same capacity, then they will be sorted according to the number of consecutive hours that the vehicle is available, so that vehicles having larger working shifts are selected earlier. Once having the order of selection of vehicles, the routes are created one after the other. To create a route, a vehicle and a seed customer, which will be selected among the two customers that are the farthest from the depot, have to be chosen. Each customer is then attempted to be inserted, but if it is not compatible with the vehicle due to restrictions, the next vehicle in the sorted list is chosen. After inserting the seed customer, the proposed procedure follows the Solomon (1987) algorithm, establishing the route locations where to insert each unplanned customer and selecting the best customer to be inserted. When no more customers can be inserted into the current route, a new one is created.
 Algorithm 2. General Variable Neighbourhood Search (GVNS).
The process of creating a new initial solution takes into account several aspects. In the fi rst place, it is worth mentioning the fact that some customers cannot be assigned to certain vehicles due to restrictions. Moreover, if the implemented Solomon heuristic requires more vehicles than available, fi ctitious vehicles are generated. These vehicles are used to create the other necessary routes and their working shifts are set at the least restrictive values of all initial vehicles. Fictitious vehicles are also included when the working shifts oftheremainingvehiclesaretoorestrictivetoservethecustomersor when the customers are not compatible with the remaining vehicles.
Before introducing fi ctitious vehicles in the case in which compatible working shifts obtaining extra working hours. If this is permitted, some customers can then be assigned to the current expanded route.
Before continuing the explanatio n of the procedure proposed in this work, it is worth mentioning that even though several objective functions are considered, the company has to indicate which is the principal objective in each case. Therefore, the total distance, time balanceordistancebalancecanbeconsideredasprincipalobjective. In the last two cases, if the solution obtained with the procedure in line 5 uses less vehicles than available, then an empty route for each unused vehicle will be included in the solution. The rationale behind this is that the company does not want to have any idle available vehicle.

The loop corresponding to lines 6  X  15 is performed for a number of iterations, M , set by the computational experience. As indicated above, the sequence of neighbourhoods used to carry out the shaking process in GVNS is the following: GENI, Or-Opt, Cross, 2-Opt, Relocate and swapInter. Therefore, line 7 indicates that the fi rst considered neighbourhood is GENI.

The particular implementation performed in this work of these neighbourhoods is summarized in the following items:
GENI : In order to make this movement, the next steps are repeated a certain number of times. Firstly, a source route must be selected among the fi ctitious routes, but if there is not any fi ctitious route, a non-empty source route is randomly selected.
Then, a destination route must be selected among the empty routes, but if there is not any, th edestinationrouteisrandomly selected among the three routes which have the closest centroid to the source route. This destination route cannot be fi ctitious and must have more than one customer. Then, a customer that can be deleted from the source route is selected among the three customers closest to the destination route (sum of distances from this customer to all destination route customers), and the two customers from the destination route closest to the previous one are chosen. If some of these customers cannot be found, the process is tried again. Otherwise, the customer from the source route is inserted between the two customers in the destination route. If the resulting route is infeasible, the movement is undone and the process is tried again. If not, we eliminate the source route from the planning if it is left empty and the main objective in optimization is to minimize the distance or the route is fi
Or-opt : First of all, in order to perform this movement, it is necessary to check if all routes have only two customers. In this case, this movement cannot be carried out. Otherwise, the next steps are repeated a certain number of times. Initially, a route
Initialization . 1 Select the set of structures N k , for k  X  1 ; ... ; k 2 Initialize BestSol  X   X  . 3 Choose a stopping condition. 4 While ( the stopping condition is not met ( N is not reached )) do 5 6 7 8 9 10 11 12 13 14 15 16 of s 0 in N l  X  s 0  X  ; ; set l  X  l  X  1 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 4 with more than two customers is randomly selected. Then, two different customers are randomly chosen from this route and a position inside the route is selected to move this sequence of customers. At this point, the movement is done. If the resulting route is infeasible, the movement is undone and the process is tried again.

CROSS : In order to perform this movement, the next steps are repeated a certain number of times. Firstly, a source route with more than one customer is randomly selected. Secondly, a destination route with more than one customer is randomly selected among the three ones which have the closest centroid to the source route. Then, two customers from the source route and two customers from the destination route are randomly selected and the interchange is done. If any of the routes is not feasible, the movement is undone and the process is tried again. 2-opt : First of all, in order to perform this movement, it is necessary to check if all routes have only one customer. In this case, this movement cannot be carried out. Otherwise, the next steps are repeated a certain number of times. Initially, a route with more than one customer is randomly selected. Then, two different customers are randomly chosen from this route and the sequence is reversed. If the resulting route is infeasible, the movement is undone and the process is tried again.

Relocate : In order to perform this movement, the next steps are repeated a certain number of times. Firstly, a source route must be selected among the fi ctitious ones, but if there is not any fi ctitious route, a non-empty source route is randomly selected.
Then, a destination route must be selected among the empty ones, but if there is not any empty route, the destination route is randomly selected among the three ones which have the closest centroid to the source route. This destination route cannot be fi ctitious. Later, a customer which can be deleted from the source route is selected among the three customers closest to the destination route (sum of distances from this customer to all destination route customers), and a customer from the destina-tion route after which the previous one can be feasibly introduced is chosen. If some of these customers cannot be found, the process is tried again. Otherwise, the relocation is done, and we eliminate the source route from the planning if it is left empty and the main objective in optimization is to minimize the distance or the route is fi ctitious.

SwapInter : In order to perform this movement, the next steps are repeated a certain number of times. Initially, a non-empty route is selected. Then, a second route must be selected among the three ones that have the closest centroid to the fi rst route.
This second route cannot be empty. Then, a customer that can be deleted from the fi rst route is selected among the three closest customers to the destination route (sum of distances from this customer to all second route customers), and a customer that can be deleted from the second route is selected among the three closest customers to the fi rst route (sum of distances from this customer to all fi rst route customers). If some of these customers cannot be found, the process is tried again. Otherwise, the swap is doneanditsfeasibilityischecked.Ifanyoftheroutesisinfeasible, the movement is undone and the process is tried again.

SwapIntra : First of all, in order to perform this movement, it is necessary to check if all routes have only one customer. In this case, this movement cannot be carried out. Otherwise, the next steps are repeated a certain number of times. Initially, a route with more than one customer is randomly selected. Then, two different customers are randomly chosen from this route and they are swapped. If the resulting route is infeasible, the movement is undone and the process is tried again.

The processes of shaking, local search and move decision in lines 9, 10 and 15, respectively, are iteratively performed until k .

First of all, the shaking step in GVNS generates a solution s from the k th neighbourhood of s ( s 0 A N k  X  s  X  ). Then, a local search based on VND is performed from s 0 to obtain a solution s procedure uses the N l neighbourhoods, which in the implementa-tion proposed for solving the RVRPTW consists of the next sequence of random movements: Relocate, swapIntra and swapInter. the principal objective function will be among minimizing the total distance, time balance or distance balance. In the last two cases, it is considered the difference between the largest and shortest time/ distance required by the used vehicles. Additionally, the developed
GVNS takes into consideration additional objective functions that have to be minimized using a hierarchical approach. Hierarchic evaluation means that the objective functions are considered in a certain lexicographic order, so that if two selected solutions have equal objective function values for a function, then the next one in the order is considered to break ties. This approach, considered within VNS, has been referred as Variable Formulation Search in the paper by Pardo et al. (2013) . In the case in which the total distance is the principal objective, the lexicographic order of the objectives to be minimized is the following.
 or distance balance, the objective functions order is the following. The objective functions have to be minimized.
 be used as indicated by the company. Therefore, minimizing the number of routes is not an objective to be considered.
 as the fi rst objective function to be minimized is the fact that they can lead to undesirable infeasible solutions. If the customer services assigned to fi ctitious routes cannot be relocated in other routes and the company does not allow postponing them to the next day, then an infeasible solution is obtained. This result can also be valid for the company since, in this case, it can rent additional vehicles for a single day. In any case, a feasible solution is always preferred.
 feasible or infeasible, is obtained. Since several iterations are carried out to fi nally select the best alternative solution for the company, in line 16, the best solution is updated. Two different goals that substitute the minimization of the number of fi routes are taken into account. The obtained lexicographic order corresponding to the travelled distance as principal objective is the following.

Salary costs incurred for expanding the working shifts of the vehicles (extra hours are more expensive).

The obtained lexicographic order corresponding to the time/ distance balance as principal objective is the following. Number of postponed services.
 Number of extra hours.
 Time/distance balance.
 Total travelled distance.

Salary costs incurred for expanding the working shifts of the vehicles (extra hours are more expensive).

In other words, after one of the N iterations, a solution to the problem s is obtained. It is then compared with the best solution reached by the algorithm so far stored in BestSol .Ifin BestSol there are unserved customers or extra hours for the vehicles, but in the new solution s there are not, s is the new BestSol .Ifneither BestSol nor s has unserved customers or extra hours, the new BestSol is the solution with the least total travelled distance. If BestSol does not have unserved customers, but s does, we keep BestSol .Otherwise,
BestSol is updated by s .If BestSol does not require extra hours, but s does, we keep BestSol .Otherwise, BestSol is updated by s .
Therefore, in order to update the best solution in line 16, it is given higher priority to those solutions that include all the services and adjust to the working shifts of the drivers. These two aspects are not considered while running the GVNS, since the extra hours remain unchanged, on one hand, and determining the services belonging to fi ctitious routes that can be postponed requires high computational costs, on the other hand.

To summarize the description of the proposed algorithm, it is noteworthy that in order to carry out the optimization process, the function (distance, time balance or d istance balance), if extra hours are permitted and what service priorities allow postponing services. 4. Computational experiments
This section is devoted to thoroughly describe the computa-tional experiments carried out in this work to assess the quality of the solutions provided by the algorithm developed to solve the
RVRPTW. Our algorithm has been coded in C  X  X  and runs on a machine with Intel(R) Core(TM) i5-2320 CPU, 3 GHz, 6 GB of RAM. The platform used has been Ubuntu 12.04.

First of all, the parameters of the algorithm are adjusted. Secondly, fi ve different experiments are executed to analyse the effect of adding to the standard VRPTW, the real-world constraints suggested by the company. Furthermore, a comparative analysis with the best results from the literature corresponding to the standard VRPTW Solomon benchmark instances 1 is performed. Finally, results corresponding to real instances are also analysed. 4.1. Parameter setting
This section reports the values selected for the parameters that appear in the GVNS implemented in this work. The parameter setting for the algorithms has been done using the Friedman test ( Daniel, 1990 ), which provides the best con fi guration of parameters and detects differences or equalities among con fi gurations. The test instances used to do this parameter setting have been chosen among the Solomon instances with 100 customers. Two instances of each category have been randomly selected: C 105, C 107, R 104, R 109, RC 102, RC 106, C 202, C 203, R 208, R 210, RC 203 and RC 204. This nonparametric statistical test has also been useful to know the best combination of operators to be used in the local search phase of the GVNS algorithm.

Solomon heuristic provides a different solution for each execu-tion because we have used a parameter  X   X  2 in order to select the seed for each route. The movement operators used by the GVNS algorithm also need some parameters, which have been set. These parameters are used by movement operators that involve two routes. Regarding the fi rst parameter, when it is necessary to select the second route to make the movement, this is selected among the  X   X  3 closest routes to the previous one. The second parameter is used to select a customer to be deleted from a route. This customer is selected among the  X   X  3 closest feasible customers to the route where it will be inserted. The third parameter is used to select a customer from a route after which a previous chosen one could be inserted. This customer is selected among the  X   X  closest feasible customers. Moreover, the number of iterations, M , that the shaking, local search and move decision processes are carried out in each iteration of the GVNS has been fi xed to M Finally, as mentioned above, the general algorithm consists of repeating the Solomon and GVNS algorithms for N  X  10 iterations. 4.2. Constraint effects
Since the problem tackled in this paper takes into account several constraints and the instances in the literature are not prepared to consider all of them together, a set of experiments has been carried out using 16 test problem instances based on the real data provided by a company in the Canary Islands. These instances, which consist of 100 customers, have been used to show the different behaviours obtained by the algorithm depending on the constraints that are taken into consideration. They are available in https://sites.google.com/site/gciports/vrptw/hfvrptw .
The fi rst experiment reported in this section corresponds to the selection of the principal objective function to be minimized: Total_Distance, Time_Balance or Distance_Balance. In order to carry out this experiment, 4 instances have been used, which do not include any additional constraint to the standard VRPTW. On one hand, if the objective function Total_Distance is chosen, the total travelled distance will be optimized, but the balanced time obtained will be worse than the one obtained using Time_Balance as objective function, and the balanced distance will be worse than the one obtained using Distance_Balance as objective function. On the other hand, if either the objective function Time_Balance or Distance_Balance is chosen, all vehicles will be used, such as required by the company. In case of Time_Balance, the balancing of time among vehicles will be optimized, and in case of Dis-tance_Balance, the balancing of travelled distance will be opti-mized. For the next experiments, the Total_Distance objective function is used, since it is usually the most common and demanded one.

Table 1 summarizes the results obtained from the analysis of the principal objective function. The fi rst two columns indicate the instance under consideration (N1_1  X  N1_4) and the principal objective function that is selected by the companies; Total_Dis-tance, Time_Balance and Distance_Balance. Columns 3  X  9 report the number of postponed services ( PS ), extra time ( ET ) required by distance ( D ) and number of routes ( NR ) in the obtained solutions. Time is expressed in seconds and distance in meters. As shown in Table 1 , in general, when an objective function is selected as principal one, the best value of this objective is achieved in each case. Moreover, the best cost is always obtained using the Total_-Distance objective function, since the total time spent doing less
The second experiment summarized in Table 2 corresponds to the use of a heterogeneous fl eet of vehicles regarding capacity. This means that the capacities of the used vehicles are different. First and second columns indicate the instance and the vehicle capacity, respectively. Columns 3  X  8 report the number of postponed ser-vices ( PS ), extra time ( ET ) required by the vehicles, time balance obtained solutions. If we use vehicles with a high capacity (i.e. 500), we will need a small number of vehicles, but when the capacity is lower (i.e. 200), it is clear that we will need more vehicles, and therefore, more routes to serve all customers. How-ever, when there is a mix of vehicles with different capacities (i.e. a half of 500 and a half of 200, which corresponds to the case of
Mixed 1 in the table), the results will involve the vehicles with a higher capacity and there will be a smaller number of routes. If the number of vehicles with high capacity is reduced, i.e. three vehicles of 500 and the rest of vehicles of 200, which corresponds to the case of Mixed 2 in the table, the vehicles with higher capacity will be used fi rst and then the rest of vehicles, and the number of routes will be intermediate. In any case, using vehicles with high capacity is associated with a shorter travelled distance.
The third experiment, which is reported in Table 3 , corresponds to the use of a heterogeneous fl eet with regard to the working shifts. Columns 1 and 2 show the instance and the characteristics of the working shift selected for the vehicles, respectively. Columns 3  X  8 report the number of postponed services ( PS ), extra time ( ET ) required by the vehicles, time balance ( TB ), cost ( C ), total distance ( D ) and number of routes ( NR ) in the obtained solutions. If the vehicles have restricted working shifts (narrow and multiple time intervals within working shifts) and extra hours are permitted (case Restricted windows , extra time ), the results will contain extra hours and more routes than necessary in the case of homogeneous fl eet. Nevertheless, if extra hours are not allowed, but the priorities do allow postponing customers for the next day (case Restricted windows , postponing ), the routes will not include the postponed customers. If we compare these fi rst two cases with restricted windows, we observe that postponing customers when it is possible involves lower travelled distance and cost. However, the number of postponed customers is very small in relation to the total number of customers, so that this last option could be appropriate for some companies which can afford this delay in service. Other tested case with regard to vehicles working shifts consists of having three vehicles with short working shifts, with medium working shifts, and fi ve with large working shifts (case Mixed windows ). This way, the routes will be done by the vehicles with larger working shifts, involving the lowest number of routes and distance.
 of narrow time windows for most of the customers. First and second columns indicate the instance and the features of the time windows selected for the customers, respectively. Columns 3  X  8reportthe number of postponed services ( PS ), extra time ( ET )requiredbythe vehicles, time balance ( TB ), cost ( C ), total distance ( D )andnumberof routes ( NR ). In case of using restricted customer windows (case
Restricted customer windows ) when priorities allow postponing customers, the number of postponed services increases, although the total travelled distance also increases with regard to the case without restricted customer windows (case Non-restricted customer windows ) due to dif fi culties in compliance with customers time windows when trying to visit them in the same route. 4.3. Comparative with the literature mon instances of 100 customers. Note that the algorithm proposed in this work is designed to solve the RVRPTW with the inclusion of all the real-world constraints explained in previous sections. Therefore, the method is not supposed to be the most competitive over these instances, particularly due to the fact that real instances have different features that have to be tested in computational time. Table 5 summarizes the comparative regarding the best known solutions ( BKS ) until 2009, 2 the results from Hong (2012) , and the results from Gong et al. (2012) . These two later works have been chosen as references because they provide better results than the best known until 2009 for some particular instances. The fi rst column of the table shows the
Solomon instance category. Then, the average values of number of vehicles ( NV ), traveled distance ( TD ) and computational time ( t reported for each approach. Comp utational times have been scaled using the computer speed measured in millions of fl oating-point operations per second (M fl op/s) in order to make a fair comparison.
Finally, Gap 1 , Gap 2 and Gap 3 correspond to the gap (%) between BKS and our proposal, between Hong (2012) results and our proposal, and between Gong et al. (2012) results and our proposal, respectively. As canbeseen,theaveragegapregarding BKS is about 4% and lower regarding the other later approaches.

Notice that this paper is not aimed at overcoming the best results for the standard Vehicle Routing Problem with Time Windows, but rather at proposing an intelligent algorithm that works effectively when real-world instances with real-world constraints are solved. However, the GVNS algorithm provides solutions that overcome the best known literature results for some particular instances, and, in average, its solutions are very close to these best known. A total average of 12 min are needed to obtain the result of a Solomon instance,withanaveragedeviationof3min.

Although this has been the solution proposed to the real company, other approaches can be developed in order to improve the average deviation for the standard instances which do not include all the real-world constraints. Until the moment, the used VND process has made movements in or between routes choosing routes and customers randomly. However, it is possible to explore the search space more deeply in order to choose the movement of customers which involves the shortest distance. This process would take much more time, and for this reason it would not be suitable for the real company. Nevertheless, a combination of both processes can be carried out trying to keep similar times. Further-more, we can stop the search with the fi rst best solution found.
Taking into account all these aspects, three more approaches have been developed. Parameters M and N have been adjusted using Friedman test, among the values that keep similar times to the original process. For the fi rst tested approach, the relocation movement has been applied in its best fi rst solution version, instead of the original VND. Parameters N and M have been set to 5 and 7, respectively. Results are shown in Table 6 . The average gap regarding the best known solutions decreases from 4.12 to 1.70 using this approach, and even results from Gong et al. (2012) are improved, demonstrating that it is possible to get better behaviour with the standard instances in the literature which do not include all the real-world constraints.

The second tested approach applies the relocation movement in its greedy version and the original VND half and half. Parameters N and M have been set to 2 and 9 respectively. This way, results in
Table 7 are obtained, where the average gap regarding the best known solutions is reduced to 0.64 for the standard instances.
These results are better than the ones obtained if the relocation movement, in its greedy version, is applied only at some steps of the GVNS, for example, when k  X  3or k  X  6 in the shaking process.
In this case, parameters N and M have been set to 3 and 9 respec-tively. Table 8 depicts these results, where the average gap regarding the best known solutions is 2.69.
 in the literature is the one that combines the original VND proposed in this paper and the greedy version of the relocation movement, half and half.
 is not important for the real company referenced in this paper, since it has a fi xed fl eet of vehicles with a fi xed number of drivers.
However, if the number of vehicles had to be reduced, a number of routes reduction algorithm would have to be applied before the
GVNS algorithm. This process usually involves a high increase of computational time, and for this reason it is not suitable for the real company, whose main requirement is to obtain a fast solution with a high quality. Nevertheless, the reduction of routes process proposed by Nagata and Brysy (2009) has been implemented in order to check this option. For this purpose, the parameter setting has been made taking into account that both together, reduction of routes algorithm and the original algorithm proposed in this paper, do not overpass the times of the original approach. Results for the standard static Solomon instances are shown in Table 9 . Distance deviations are not good enough due to the short computational time which can be used. The time needed for both the reduction of routes algorithm and the original GVNS algorithm to obtain high quality solutions need to be increased, but, as said before, the real company requires a quick algorithm and has a fi xed fl eet of vehicles. Therefore, this reduction of routes has not been included in the fi nal algorithm. 4.4. Results for real instances
This section is devoted to show results corresponding to real data. In the fi rst place, the solutions provided by the proposed
GVNS are compared with the solution implemented by a company for a real instance, which consists of 109 customers. Table 10 summarizes the best solutions obtained by GVNS when consider-ing the total distance objective function, and the best solution implemented by the company. Moreover, the time/distance bal-ance associated to the solutions are also reported. The fi the table corresponds to the best solution obtained by GVNS if the total distance is considered as objective function. The second row shows the solution obtained by GVNS consisting of 6 routes, which is the number of vehicles of the company solution. The third row shows the company solution.

From these results, we may conclude that the solution imple-mented by the company is worst than the solutions obtained by
GVNS if the total distance objective and the number of routes are taken into consideration. Note that our second obtained solution is better in total distance, time and distance balance than the one that had been implemented by the company, and our fi rst obtained solution provides the lowest total distance although it presents the worst time balance.

Additionally, the company plans to change its fl eet of vehicles, so that it pretends to have eight vehicles with capacity 100, four vehicles with capacity 200 and four vehicles with capacity 300.
First kind of vehicles will be available all day, second kind will be available in two working shifts and the third kind of vehicles will only be available in the morning. This last kind of vehicle will not be able to serve some customers due to road size restrictions. With this plan in mind, the company wants to know how this would affect the vehicles' routes. Taking all these aspects into account, the new instance has been solved using the GVNS and results indicate that the distance and number of routes will increase regarding the initial solution with initial fl eet, as shown Table 11 . Therefore, getting this algorithm is also useful to predict future situations and help decision maker.

Finally, since the image corresponding to the solution N 1is confusing due to the large number of routes, the solution to an instance based on N 1 consisting of 50 customers is shown in Fig. 1 , in which its 5 routes are depicted over the map of the island of Tenerife. 5. Conclusions
This work tackles a real-world Rich Vehicle Routing Problem ( RVRPTW ) proposed by a company in Spain that combines multiple attributes together, which aim to better consider the speci real applications. Particularly, it has developed an ef fi method to solve the RVRPTW . The attributes considered by the company consist of a fi xed heterogeneous fl eet of vehicles, soft and multiple time windows for customers, soft and multiple time intervals in the working shifts for vehicles, customers' priorities and vehicle  X  customer constraints, which to the best of our knowl-edge have not been taken into account all together in the literature. Given the fact that the company might require to either consider or not all these attributes, the fl eet management system allows deactivating any of the mentioned attributes. Since exact algo-rithms are not applicable when solving real-life large vehicle routing problem instances, the focus of this work is put on the use of metaheuristic procedures. Particularly, this paper proposes a General Variable Neighbourhood Search ( GVNS ) metaheuristic, which is able to obtain high quality solutions that are valid for the company. The computational experience carried out in this work, which includes the analysis of the effect of the different attributes taken into consideration, the comparative with the literature for the standard vehicle routing problem with time windows, and the study of the solutions provided by the algorithm when compared with the solutions implemented by the company, corroborate the effectiveness of the developed software. It is worth to mention that the algorithm has been integrated into a fl management system and several tests with real companies have been conducted. Finally, the next phase of this work is to dynami-cally route new customers which appear over the planning horizon. It means that, once the initial routes have been speci and vehicles start to make their work, new customers can ask for service. At this point real time communication between vehicles and the fl eet management system is required.
 Acknowledgements This work has been partially funded by the Spanish Ministry of Economy and Competitiveness (Project TIN2012-32608) and the
Spanish Ministry of Industry, Tourism and Trade (Project TSI-020100-2011-298).
 References
