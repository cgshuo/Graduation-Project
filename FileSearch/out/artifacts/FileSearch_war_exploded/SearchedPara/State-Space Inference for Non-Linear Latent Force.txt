 Jouni Hartikainen jouni.hartikainen@aalto.fi Mari Sepp  X anen mari.j.seppanen@tut.fi Simo S  X arkk  X a simo.sarkka@aalto.fi Gaussian processes (GPs) are stochastic processes, which are commonly used for representing uncertain-ties of dynamic systems in many applications such as tracking, navigation and automatic control systems (Jazwinski, 1970; Bar-Shalom et al., 2001; Grewal &amp; Andrews, 2001; Maybeck, 1982). In these applica-tions, the Gaussian processes are typically white, and the processes are used as stochastic inputs in physical models such as driving forces of mechanical systems described in terms of ordinary differential equations (ODEs).
 In a machine learning context, Gaussian processes (Rasmussen &amp; Williams, 2006) are used as non-parametric models for unknown functions. Prior in-formation on the smoothness and other properties of the model functions is encoded into the covariance function of the Gaussian process. Recently,  X  Alvarez et al. (2009) introduced the idea of using Gaussian processes as non-parametric models for unknown in-put functions in physical models, which are formulated as differential equations (e.g. ODEs). As opposed to the classical models used in tracking, navigation and control applications, in this latent force model (LFM) approach, the input functions are not modeled as white noise processes, but instead their covariance structure is selected according to the machine learning approach, where the covariance structure is written in terms of unknown parameters that are estimated from data. In this paper we show how non-linear latent force models can be represented as non-linear white noise driven state-space models, that is, partially ob-served non-linear stochastic differential equations (SDEs Jazwinski, 1970; Grewal &amp; Andrews, 2001;  X ksendal, 2003) and show how recently developed efficient non-linear Kalman filtering and smoothing based methods (S  X arkk  X a, 2007; Singer, 2008; S  X arkk  X a, 2010; Arasaratnam et al., 2010; Singer, 2011; S  X arkk  X a &amp; Sarmavuori, 2012) can be used for inferring the state and parameters of these models. We com-pare the performance of the method to previously proposed Laplace-approximation and Markov chain Monte Carlo (MCMC) solutions (Lawrence et al., 2006; Titsias et al., 2009). The key advantages of the proposed approach over the previous ones is that i) its computational scaling is linear in the number of time steps and ii) it naturally handles stochasticity and non-linearity of the physical model.
 Our main motivation for the proposed approach stems from an important real-world problem of long-term prediction of GPS satellite orbits (Sepp  X anen et al., 2012). We show how the accuracy of orbit predic-tion can be improved by nonparametrically modelling forces unexplained by a deterministic non-linear phys-ical orbit model. Latent force models (LFMs) (  X  Alvarez et al., 2009) are a relatively new modeling approach, combining mech-anistic modeling principles (i.e., physical models) with non-parametric data-driven components. They have been successfully employed, for example, in ranked prediction of transcription factors (Honkela et al.). For instance, Lawrence et al. (2006) modelled the time-dependent expression levels { x j ( t ) } N j =1 of N genes with a system of first order ODEs dx j ( t ) dt where the driving processes { u r ( t ) } R r =1 (represent-ing the transcription factors, TFs) were given in-dependent Gaussian process (GP) priors u r ( t )  X  GP ( m ( t ) ,k u k r ( t,t functions.
 If the functions g j (  X  ) are linear, the model (1) is an instance of a linear latent force model . In such cases (see paper by  X  Alvarez et al., 2009, for examples) the posterior inference on x j ( t ) and u r ( t ) is based on closed form computation of the covariance functions of x ( t ), dx j ( t ) /dt and all the required cross covariances by solving the differential equation and then utilizing standard GP regression techniques.
 However, in the case of non-linear g j (  X  ) (such as g ( u ( t )) = e u ( t ) , ensuring the positivity of the forces effect) the ODE becomes non-linear. The standard GP techniques cannot anymore be applied since the needed covariance terms are analytically intractable. Infer-ence in these models has been previously performed mainly by the Laplace method (Lawrence et al., 2006) and Markov chain Monte Carlo (MCMC) (Titsias et al., 2009). A severe limitation of these approaches is that they are based on the assumption that the like-lihood of data can be written as an explicit function of the latent force process u ( t ) which can be evaluated (either approximately or exactly) in a computationally feasible manner. As discussed by Hartikainen &amp; S  X arkk  X a (2010), GPs with certain stationary covariance functions (includ-ing the Mat  X ern class) can be represented as solu-tions to linear time-invariant (LTI) SDEs ( X ksendal, 2003). That is, we can formulate the GP priors on the r = 1 ,...,R components of u ( t ) = ( u 1 ( t ) ...u R ( t )) as multivariate LTI SDEs of form F This dynamic model on u r ( t ) corresponds to a GP prior with a certain stationary covariance function when the coefficients a 0 r ,...,a p r  X  1 r , the diffusion con-stant q r and the dimensionality p r of z r ( t ) are chosen appropriately.
 Using this view on GP priors, the conversion of lin-ear latent force models into linear-Gaussian state-space models was recently considered by Hartikainen &amp; S  X arkk  X a (2011). In this paper, we consider conversion of non-linear latent force models into non-linear state-space models. Analogously to the linear case, a general non-linear latent force model can be formulated as a continuous-discrete system of form where x ( t )  X  &lt; M is the state ( M being the number of state components needed in representing the out-put processes { x j ( t ) } N j =1 in a vector form), u ( t )  X &lt; the latent force processes and f (  X  ) the dynamic model function of output process x ( t ).
 We can further simplify the notation by construct-ing an augmented system with state x a ( t ) compris-ing of the output process and latent forces as x a ( t ) = ( x ( t ) , z 1 ( t ) ,..., z R ( t )) T with dynamics In the context of stochastic processes and filtering the-ory, the dynamic model function f a is called the drift function and L a the dispersion matrix weighting the R -dimensional Brownian motion  X  a ( t ) with diffusion matrix Q . Note that within this framework the model for x ( t ) does not need to be deterministic given u ( t ). To complete the model specification we assume that observations at discrete time instants t 1 ,...,t T can be modeled as where h (  X  ) is the measurement model function, y k  X  &lt; D is the measurement at time t k and r k  X  N( 0 , R k is the measurement noise. Given continuous-discrete system of the form our aim is now to infer the filtering and smoothing distributions of the state x ( t ) at a time instant t : and where y 1: i is a shorthand notation for { y ,..., y i In general, this is a difficult task that has been well studied in the field of stochastics and filtering theory (Jazwinski, 1970). The formal Bayesian continuous-discrete filter consists of separate prediction and up-date steps (Jazwinski, 1970), which are recursively it-erated forward in time. On the prediction step we solve the probability density p ( x ( t k ) | y 1: k  X  1 ) of the state at time t k , and on the update step, we use the Bayes X  rule to update the density with latest observation as p ( x ( t k ) | y 1: k )  X  p ( y k | x ( t k )) p ( x ( t diction density p ( x ( t k ) | y 1: k  X  1 ) must be solved from the Fokker X  X lanck X  X olmogorov (FPK) partial differential equation , which is analytically intractable in general. Thus, to perform filtering and smoothing in practice approximate solutions must be sought. In this article, we consider Gaussian approximations for the filtering and smoothing distributions.
 In the following we review the main steps of the Gaus-sian filtering and smoothing framework 1 which we con-sider appropriate for the type of models considered in this article. The general Gaussian filtering and smoothing framework is classical (see, e.g., Jazwin-ski, 1970; Maybeck, 1982), but here we utilize the re-cently developed sigma-point methods (S  X arkk  X a, 2007; Singer, 2008; S  X arkk  X a, 2010; Arasaratnam et al., 2010; S  X arkk  X a &amp; Sarmavuori, 2012) for numerically solving the general continuous-discrete Gaussian filtering and smoothing equations. As shown by Singer (2011), the Gaussian filtering framework can also used for efficient evaluation of the likelihoods needed in parameter esti-mation methods.
 The filter works by recursively solving the following set of equations for time steps k = 1 ,...,T :  X  Solve mean and covariance of the predicted distri- X  Compute the approximate filtering distribution The approximate smoothing distributions p ( x ( t k ) | y 1: T )  X  N( x ( t k ) | m s ( t k ) , P obtained by recursively solving the following Kalman smoothing like equations for k = T  X  1 ,..., 1: m s ( t k ) = m ( t k ) + G k +1 [ m s ( t k +1 )  X  m ( t
P s ( t k ) = P ( t k ) + G k +1 [ P s ( t k +1 )  X  P ( t where the cross covariance term C k can be shown (S  X arkk  X a &amp; Sarmavuori, 2012) to follow the differential equation This can be integrated alongside m ( t ) and P ( t ) dur-ing the filtering with negligible computation cost. An important thing to note here is that the time steps t k are not restricted to be the measurement time steps, that is, we can calculate the smoothed estimates at any time point inside the interval t  X  [ t 0 ,t T ]. On such steps the update equations of the filter are simply skipped. The expectations in the equations above are taken over the approximating Gaussian distribution, and can be numerically computed with sigma-point and cuba-ture integration methods (see, S  X arkk  X a, 2007; Singer, 2008; S  X arkk  X a, 2010; Arasaratnam et al., 2010; S  X arkk  X a &amp; Sarmavuori, 2012). As was discussed by Singer (2011), the Gaussian filter also computes approxi-mations to the conditional measurement likelihoods marginal likelihood based parameter learning via the  X  denotes a vector of unknown parameters.
 The weakness of the outlined inference scheme is that it assumes that the state distributions are approxi-mately Gaussian. An alternative way of performing state inference would be to use a particle filter (Doucet et al., 2001), which approximates the posterior with sequential importance sampling. We could then use particle MCMC methods (Andrieu et al., 2010) for es-timating the unknown parameters. The difficulty in using particle filters with SDEs is that when the state transition density cannot be evaluated in closed form, one is restricted to usage of the dynamic model as the importance distribution (Andrieu et al., 2010), which leads to inefficient sampling. Moreover, in the particle filter we need to solve the SDE numerically between the measurements for each sample separately, which is computationally very demanding. This section illustrates the performance of the pro-posed framework with two simulated examples. 5.1. Estimation of Transcription Factors First we consider the TF model (1) with three differ-ent non-linear functions: (i) g ( u ( t )) = e u ( t ) g ( u ( t )) = e u ( t ) (exponential). The drift model in this case is linear and can thereby be solved approximately as a function of u ( t ) (Lawrence et al., 2006), and thus it is possible to implement Laplace and MCMC for it. For each non-linear function we generated 100 state trajectories for the time interval t  X  [0 , 15] by the TF model (1) ( N = 3, R = 1) with the latent force having a Mat  X ern GP prior (  X  = 3 / 2). The model parame-ters were randomly generated for each state trajectory as B j  X  U (0 , 0 . 1), D j  X  U (0 , 2), A j  X  U (  X  0 . 1 , 0 . 1), S j  X  U (0 , 1), and were treated as fixed and known during the inference. For the saturation and repression functions we used the parameters  X   X  X  0 . 1 , 0 . 5 , 1 } . For the GP prior we used the magnitude and length scale parameters  X  2 m = 1 and l = 2. Given the state trajec-tories we generated T = 13 equally placed observations for each of the N outputs with additive Gaussian noise with variance  X  2 n = 0 . 1 2 .
 Our aim is to estimate the trajectory of the latent force given the generated observations. The estima-tion results are listed in Table 1 for Laplace approx-imation (LA), elliptical slice sampling (ESLS) (Mur-ray et al., 2010) and a Gaussian continuous-discrete filter/smoother (GFS) with moment matching per-formed with the spherical cubature rule (Arasarat-nam et al., 2010; S  X arkk  X a &amp; Sarmavuori, 2012). With Laplace and ESLS we approximated the integral in the solution of the ODE by a Riemann sum with 363 grid points, and with GFS we used the 4 th order Runge X  Kutta method with 10 steps in integrating the moment equations. With ESLS we drew 100000 samples for u ( t ), of which first 5000 were discarded as burn-in. With Laplace approximation we used Newton X  X  method with a simple step size adjustment procedure to find the mode. We excluded from the results all the cases where the Newton X  X  method didn X  X  stop af-ter pre-specified number of iterations (300), as well as ones having RMSE (calculated over the 363 grid points) greater than 3  X  m with any method, as this was taken to indicate that the method had diverged. The typical computation times for the data sets considered here were about 3 seconds with LA, 10 minutes with ESLS and 8 seconds with GFS.
 From the results we can see that ESLS provides con-sistently good performance with all non-linear func-tions. GFS performs equally well with saturation and repression functions with all tested parameter config-urations, but is slightly worse with the exponential function compared to Laplace and ESLS. However, Laplace had trouble in mode finding in several cases with the exponential function. With saturation and repression functions such problems were also present when  X   X  X  0 . 1 , 0 . 5 } , but with  X  = 1 Laplace performed equally well with ESLS and GFS. 5.2. Tracking a Ballistic Target on Reentry Next we consider tracking a ballistic target reenter-ing the atmosphere with a sensor measuring the dis-
Saturation
Repression
Exponential tance to the target. In this example the drift and mea-surement models are non-linear, rendering Laplace and MCMC inapplicable for state inference. For simplic-ity we consider only a one dimensional case (that is, the target falls directly towards the ground), but the approach works similarly in a general 3D setting. The motion of the target is assumed to follow the equa-tion (Li &amp; Jilkov, 2001) where r is the altitude and v the velocity of the target. We assume that the acceleration is caused by the drag force a ( r,v,t ) =  X   X  exp(  X   X  r ) v 2 , where the exponen-tially decaying term models the air density, gravita-tional force g = 9 . 8m / s 2 and an unknown force u ( t ), which we assume to have a Mat  X ern GP prior model (  X  = 5 / 2 , X  m = 50m / s 2 ,l = 5s). The drag force pa-rameter was set  X  = 4 . 49  X  10  X  4 , and the air density scale to  X  = 1 . 49  X  10  X  4 . The noise parameters were set to q r = 50m / tance measurements were modeled as where ( s x ,s y ) = (30km , 30m) is the position of the sen-sor, and measurement noise has variance  X  2 n = (30m) 2 . Starting from state ( r 0 ,v 0 ) = (65km , 3km / s), we simu-lated the target trajectory on time interval t  X  [0 , 30s] and generated 120 equally spaced measurements with the model above. Inference was performed with the Gaussian filtering and smoothing framework. We treated the drag force parameter  X  and the GP pa-rameters  X  m and l as unknowns, which were deter-mined by optimizing the marginal likelihood of data. Example results of estimating r ( t ), v ( t ) and u ( t ) with optimized parameters are shown in panels (a), (b) and (c) of Figure 1. We also ran a MCMC inference for the unknown parameters using the negative log marginal likelihood provided by the filter as the energy func-tion. Panel (d) shows the samples obtained for log(  X  ), peaking around the true value (  X  7 . 7).
 For comparison, we implemented also a particle filter for this model. We used a stochastic Runge X  X utta (strong order 1.5) to draw samples from the SDE. In practice, it required about 50000 particles to reach similar level of accuracy as with the Gaussing filter-ing scheme. In CPU time this took about 15 minutes, whereas Gaussian filtering takes only a few seconds. As a real-world case study we consider the problem of predicting the orbit of a GPS satellite. Accurate mod-eling of the forces acting on a GPS satellite is needed in a number of applications and real-time applications require prediction of the orbit (Sepp  X anen et al., 2012). The equation of motion for the satellite can be written as a (vector) Markov model where a ( r ,t ) is a deterministic model for the acceler-ation of the satellite, and u ( r , v ,t ) represents acceler-ation terms caused by unknown forces acting on the satellite. Here, r and v represent the 3D position and velocity vectors of the satellite in an inertial coordinate system fixed to an arbitrary reference frame.
 The deterministic acceleration of the motion model is where a g , a moon , a sun and a srp are the accelerations due to Earth X  X  gravitation, lunar gravitation, solar gravitation and solar radiation pressure, respectively. When the asymmetrical mass distribution of the Earth is taken into account, its gravity potential U can be written in the form of the spherical harmonics expan-sion (Montenbruck &amp; Gill, 2005) U ( r, X , X  ) = Here the potential U is not only a function of satellite X  X  radius r , but also the longitude  X  and latitude  X  . The constant R E in this formula is the Earth X  X  radius and the terms P nm are the associated Legendre polynomi-als of degree n and order m . The coefficients S nm and C nm are experimentally determined constants, whose magnitude decreases very fast with increasing n and m . Therefore, the potential can be approximated by taking into account only the first few terms. We used terms up to the degree and order 8. The acceleration due to Earth gravitation can be computed as gradient of the gravity potential U : where R is a suitable coordinate transformation ma-trix. For more details, see Montenbruck &amp; Gill (2005) and Sepp  X anen et al. (2012).
 After Earth X  X  gravitation the next biggest acceleration components in the satellite X  X  equation of motion are caused by the gravitational forces of the Moon and the Sun. When dealing with Earth centered refer-ence frame one has to compute the acceleration of the satellite in relation to the acceleration of the Earth. To compute this relative acceleration of the satellite caused by any celestial body, one can use the form where M is the mass of the celestial body, r cb is its position in the Earth centered inertial reference frame and r is the position of the satellite in the same refer-ence frame. Applying this formula to Moon and Sun gives the accelarations a moon and a sun in Equation (8). The last acceleration component in Equation (8), the solar radiation pressure, is a non-gravitational force whose exact form is not very well known. The main component of this force is pointing to the opposite di-rection from Sun. Furthermore, the amplitude of this force is almost constant, or the variations in the am-plitude are rather small compared to its magnitude. Based on this information we can add a rough model for solar radiation pressure and later estimate the re-maining parts of the force. The rough model is where e sun is a unit vector from satellite to Sun, AU is the astronomical unit and r sun is the distance from satellite to Sun. The satellite-specific constant ampli-tude  X  was batch estimated using half a year of posi-tion data of the satellite. 6.1. Modeling the Unknown Forces As the first step in the modeling we would like to get a glimpse of what the unknown forces look like. To do this we assume separate GP smoothness priors for each component of u ( r , v ,t ). Instead of placing the GP priors directly on the inertial coordinate system used in the integration, we place them on the radial, tangential and normal components of a RTN coordi-nate system with unit vectors Thus, the model for the unknown forces is where R ( r , v ) is a matrix transforming RTN coordi-nates to the inertial coordinate system used in integra-tion, and each of the latent forces u R , u T and u N have Mat  X ern GP priors. Overall, the model can be writ-ten in form (3), and thus be inferred with framework presented in Section 4.
 Examples of smoothed force trajectories for ten days are shown as red lines in Figure 2. It is apparent that the force trajectories exhibit almost periodic, or quasi-periodic behavior, which can be utilized to improve predictions when modelled appropriately.
 6.2. Quasi-Periodic Model for Latent Forces To model the quasi-periodicities in the latent forces we use a stochastic resonator model, which previously has been used for modeling periodic phenomena in the brain (S  X arkk  X a et al., 2012). We model the periodic component as a superposition of resonators of the form where the additive white noise components w n ( t ) have spectral densities q n . As shown by S  X arkk  X a et al. (2012), this model can be written in state space form which is compatible with the framework presented in this article. In Equation (14) we have also included a bias term b (which could also be time-varying) as the resonator model assumes the process to be zero-mean, and a white noise component ( t ) with spectral density q to account for possible modeling errors. 6.3. Example Online Prediction Results We now apply the constructed quasi-periodic latent force model to predict the satellite orbit, and compare the results to ones obtained with only the determinis-tic model. We consider an online prediction scenario, in which we observe the position and velocity of the satellite on certain time intervals, and between these intervals the models are used to provide predictions. We use 30 days of position data (collected every 15 minutes) of satellite 31 from the beginning of January 2010. The regions of observed data are illustrated with gray shades in Figure 3.
 In the quasi-periodic latent force model we used 7 har-monic components to model u R ( t ), u T ( t ) and 10 in u
N ( t ). As the period we used a little less than one day, which we observed to be a clear period in the esti-mated latent forces. The rest of the model parameters were optimized with respect to marginal likelihood, in which the smoothed mean estimate given by a Mat  X ern GP model on a short time segment on the same satel-lite were treated as observed data. For inference in the actual GPS prediction with the latent force model we used the Gaussian continuous-discrete filter with the spherical cubature rule and moment integration by 4 th order Runge X  X utta method with 80 steps be-tween each observation. With the deterministic model the predictions were calculated by integrating the dy-namics starting from the latest observation.
 The errors in position estimates for both models are shown in Figure 3. It is evident that the modeling of periodicity reduces the position errors significantly. For example, in this particular case the position er-ror of LFM after 15 days was less than 10% of that of the deterministic model. In fact, the amplitude of error even decreases during some time intervals, which might indicate the presence of some unexplained pe-riodic forces acting on a longer time period. While we have here reported the predictions only with one satellite on a one-month time frame, the results are promising and certainly warrant further research. In this article we have shown how non-linear latent force models can be represented as non-linear white noise driven state-space models. The resulting repre-sentation allows to apply efficient filtering and smooth-ing algorithms for state and parameter inference. The potential weakness of the approach is the underlying Gaussian approximation to the state posterior, but as we have shown there are many applications where the approach works well. The advantage of the approach is that it is computationally light compared to, for example, pure particle filtering and MCMC based ap-proximations, whose computational requirements can be infeasible for practical use.
 Acknowledgements The authors would like to thank Arno Solin, Janne Ojanen and anonymous reviewers for feedback that significantly improved the paper. The authors ac-knowledge financial support from Finnish Doctoral Programme in Computational Sciences, Finnish Foun-dation for Technology Promotion, Emil Aaltonen Foundation and Tampere Doctoral Programme in In-formation Science and Engineering.

