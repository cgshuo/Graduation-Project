 With more and more people freely express opinions as well as ac-tively interact with each other in discussion threads, online forums are becoming a gold mine with rich information about people X  X  opinions and social behaviors. In this paper, we study an inter-esting new problem of automatically discovering opposing opin-ion networks of users from forum discussions, which are subset of users who are strongly against each other on some topic. Toward this goal, we propose to use signals from both textual content (e.g., who says what) and social interactions (e.g., who talks to whom) which are both abundant in online forums. We also design an opti-mization formulation to combine all the signals in an unsupervised way. We created a data set by manually annotating forum data on five controversial topics and our experimental results show that the proposed optimization method outperforms several baselines and existing approaches, demonstrating the power of combining both text analysis and social network analysis in analyzing and generat-ing the opposing opinion networks.
 H.3.m [ Information Storage and Retrieval ]: Miscellaneous; I.2.6 [ Artificial Intelligence ]: Learning Algorithms, Experimentation opinion analysis, social network analysis, optimization, online fo-rums, linear programming
Online forum is one of the early applications managing and pro-moting user generated content. Although being simple in its de-sign  X  users carry out discussion in the form of message threads, forums remain prevalent and popular even during the recent rise of many sophisticated Web 2.0 applications. As users actively ex-press their opinions and exchange their knowledge on all kinds of topics/issues, e.g., technology, sports, religion, and politics, forums are becoming a great source for opinion mining. However, the sim-ple design of forums combined with rapidly accumulated data make it challenging to make sense out of the forum discussions. optimization formulation which can be formulated and solved as a linear programming problem.

There is no existing public data set to evaluate opposing opin-ion networks, because we need both the textual content and the social iterations among users. So, we created a new data set of five controversial topics in forum discussion, and showed that the proposed optimization method outperforms several baselines and existing approaches, including a SentiWordNet based method, a clustering based method and a Max-Cut method .
More formally, a forum F can be considered as a set of dis-cussion threads, i.e. F = { TH 1 ,TH 2 ,  X  X  X } , where each thread TH = ( T,P,M,R ) is a tuple of (1) a topic or issue T ; (2) a se-quence of posts P = { d 1 ,d 2 ,  X  X  X  ,d n } , where each d i is a post with textual content; (3) a authorship matrix M , where M ji = 1 if post d i was written by u j ; and (4) a partial reply-to relation be-tween posts R  X  P  X  P , where R ij = 1 if d i replies to d j .
Assuming that the issue T is given for each thread, which can be obtained from the forum (e.g.  X  X ay Rights X  sub-forum) or can be retrieved using IR methods (e.g. using  X  X ay Rights X  as keywords to retrieve all relevant threads), we aim at automatically discovery of opposing opinion network for each issue: Definition (Opposing Opinion Network) : is a multi-graph ( U,E ) among forum users U = { u 1 ,u 2 ,  X  X  X  ,u m } and each edge ( u i ,u j ,t,a t ij )  X  E carries an agreement weight a t ij  X  [  X  1 , 1] conditioned on an issue t  X  T . And U = U +  X  U  X   X  U 0 where we are only interested in the supporting/against group U + and U  X  .
It is not trivial to identify each user X  X  opinion for any given issue directly, especially in an unsupervised way, because: (1) treating each user as a single document would lose the rich information at the local post-level (e.g. single post content, reply-to relation); (2) forum users sometimes explicitly express their opinions toward an issue using sentiment words, sometimes not; (3) sometimes users interact and argue with each other, so that expressing their attitudes in an implicit way. Thus, to be most effective in understanding user X  X  opinions, we need to consider the rich information around posts, including users direct opinions toward the issue and indirect attitudes toward other users.

To this end, we propose to decompose the problem: to iden-tify each user u j  X  X  opinion o j in a given thread by aggregating her opinions at the post level, v ( d i )  X  [  X  1 , 1] (or v i for short), can get a supporting user group and an against user group U + = { u the problem is reduced to identifying opinions in each post, i.e., as-signing an opinion score in [  X  1 , 1] to each post d i as the degree of support or against toward the given issue. This reduction allows us to naturally incorporate a richer set of information when inferring user opinion in each post.
We will briefly introduce what a forum post (illustrated in Figure2) is consist of and follow up with more details in the next section. The Statement Part : A mandatory part of the post, where forum users express their opinions in their own words. Most of previous opinion analysis work only focuses on this part. For example, a we know one post from u i show strong support for a given issue; then all the other posts written by u i in this thread would be likely to follow this support opinion. Following this assumption, we can encode it as a matrix A  X  P  X  P from a given thread, indicating agreement relation among posts written by the same author, where A i,j = 1 iff d i and d j are posts from the same user, i.e., Using  X  X raming X : It has been found that users with different senti-ments/positions would focus on different aspects of the topic, which is called  X  X raming X  [18]. For example, on the abortion issue, pro-choice people would emphasize women X  X  rights and freedom while pro-life people would focus on the crude process of abortion. Ap-parently, these two opposing user groups tend to share similar men-tions of aspects within the group and different mentions between groups. To capture this, we first employ a topic modeling method [8] to extract the hidden aspects of discussion, so that we get a number of K aspect models p ( w |  X  ) for each thread and an aspect distribution p (  X  | d ) for each post in this thread. Then, given any two posts from the same thread, if the two corresponding aspect distri-butions have high positive correlation, their opinions tend to agree; otherwise, their opinions tend to disagree. Denoting corr ( d i ,d j ) = cients, we can have another measure of post-post relations as agree-ment T agr  X  P  X  P or disagreement T dis  X  P  X  P , using the following equations:
We have introduced and analyzed different signals that can in-dicate the opinions in forum posts, but it is still not clear how we can combine multiple signals. One way to combine these signals is to use the agree/disagree information as distance measures be-tween posts and then apply clustering-like methods, e.g. MaxCut as in [11]. However, (1) the clustering or partition results cannot tell which group is supporting and which is against; (2) a hard parti-tion does not distinguish users with strong support/against opinions from those with a balanced view. Instead, we propose an optimiza-tion formulation that tries to find opinion assignment to each post v to capture the different signals introduced before.
 Capturing Sentiment Priors: Using the following term, we en-sure that our opinion assignment does not deviate too much from the sentiment tagging especially when the sentiment score is high. Capturing Agreement: With three constructed matrices A , R agr and T agr to encode the signals indicating agreement relation be-tween posts, we are giving a linear penalty if the two opinion scores differ a lot, if we believe the two corresponding posts should agree with each other: Capturing Disagreement: We have constructed matrices R dis and T dis to encode the signals indicating disagreement relation be-tween posts. To capture such disagreement, we first separate the representation of  X  X ign X  and  X  X bsolute value X  in each opinion score v by introducing two non-negative variables v + i , v  X  i and a con-straint v i = v + i  X  v  X  i . In order to ensure that no more than one of v + i , v  X  i is positive (the other being zero), we also need to min-imize ( v + i + v  X  i ) . In this way: v i being positive is equivalent to CrowdFlower 3 to get labels on all 1584 posts. For better quality control, we further required each post to be labeled by at least three annotators. The annotation results basically followed the statis-tics of the first round of annotation: 30% as  X  X upport X , 43% as  X  X gainst X  and 26% as  X  X ot Sure X . Also, according to Crowd-Flower X  X  statistic, the agreement among the annotators is 0 . 7584 . We will use the CrowdFlower annotation 4 as our ground truth. LP: Our proposed method, solved using PyGLPK toolkit 5 . All ex-periments are performed when setting K the number of topics to be 5, and the threshold  X  and  X  to 2.
 UserClustering: We build similarity graph among users from co-sine similarity of their bag-of-words representation and apply graph partition based clustering of two groups of users (using CLUTO 6 ). SentiWordNet: We tag each post by taking the average the Sen-tiWordNet opinion score of words, then each user X  X  opinion is the averaged opinion score of all her posts. It represents an unsuper-vised sentiment analysis method which only relies on the text. MaxCut: The method proposed in [11] is solving a similar prob-lem. They first classify each reply-to relation as agree/disagree/neutral using a pattern dictionary; then user-user relation is defined as a lin-ear combination of their post-post relations (positive if disagree and negative if agree); finally, a MaxCut algorithm is performed on this user-user graph to generate the user groups partition. Since we do not have their algorithm implementation or their pattern dictionary, we use SentiWordNet and the same set of patterns from our method as the first step classifier. Then we use a semi-definite non-convex programming solver 7 to sovle the MaxCut problem.
We first evaluate the accuracy of the local classification of rela-tions between posts. We derive the ground truth of post-post rela-tions from post level judgment, and ignore the cases when either post is annotated as  X  X ot Sure X . Note that, instead of aiming at inferring the relations between every pair of posts, we only need a subset of high-confidence pair-wise relations, because we will only use them to better predict the point-wise labels.

In Table 2, we compare the results 8 from the first step of MaxCut and our methods of extracting matrices R (derived from reply-to), T (derived from topic modeling), and A (derived from user con-sistency assumption). Top part of the table shows that our method outperform the MaxCut method in all metrics. In particular, the rule-based classifier in MaxCut cannot handle different vocabulary and possibly slangs in the forums, resulting in very low recall. Our classifier is learned by exploiting the forum data itself, including both textual analysis and social network analysis.

To further understand each signal in our method, we evaluate them individually in the bottom part of the table. (1) The A matrix www.crowdflower.com data and annotation available at http://sifaka.cs.uiuc. edu/~yuelu2/forumdata/ http://tfinley.net/software/pyglpk/ http://glaros.dtc.umn.edu/gkhome/cluto/ cluto/overview http://www.stanford.edu/~yyye/Col.html
Note that the absolute numbers of recall (thus also F1 measure) are generally very low, but this does not mean the algorithms are performing poorly. Since we created some synthetic agree/disagree pairs to test the classification results, N point-wise labels result in N  X  N pair-wise ground truth of agree/disagree samples, which is a large number for the denominator of recall calculation (most of them we will not encounter in real data).
 original paper. However, since we introduce many agreement heuristics which get translated into negative edge weights, Max-
Cut will produce even more unbalanced output, so as to maximize the weight sum of cut edges. It is clear that MaxCut+ (with full heuristics) shows large difference between the accuracy in two groups. It suggests that the improvement gain of our LP method comes from not only the useful heuristics but also the effective optimization formulation.  X  LP* and SentiWordNet*: In order to account for the possible bias of unbalanced partition in MaxCut, we further evaluate Sen-tiWordNet and LP using the same partition size as MaxCut. More specifically, we first rank the users by the opinion scores output by SentiWordNet or LP, and then partition into user groups is done so that the ratio of supporting users v.s. against users is the same as that from MaxCut output. As can be seen in the table, both methods still outperform MaxCut, showing that the output opinion scores are not only more flexible than a hard partition but also more accurate.

In addition, we tried varying the weights in the objective func-tion, and improved prediction accuracy over other methods is con-sistent as long as we leave sufficient weight on sentiment scores  X  senti (i.e., at least twice as much as  X  agr and  X  dis ) while main-taining a small  X  , e.g., 0 . 01 . We will leave automatic weight learn-ing as future work.
Discovering opposing user networks is a new problem different from existing work, but there are also important connections. First, opinion analysis in text data has received extensive attention these years [10, 4, 13, 9, 5, 12, 7], but these methods focus on predicting a sentiment class/rating of the text individually , so we cannot take the rich social interaction context into consideration. In the exper-iments, we included a baseline using SentiWordNet that represents an unsupervised document level sentiment analysis work.

Related work (e.g. [17, 2, 16, 19, 3]) on identifying user opin-ions (or stands, views) is usually defined as a classification problem of the users into predefined groups. Instead, we are only interested in a subset of users who are strongly against each other. Neverthe-less, this line of related work is highly relevant. However, these previous work either use the textual content without much consid-eration of social interactions among users (e.g. [6, 15, 14]) or use the social link information without using much of the content in-formation (e.g. [1, 11]). Instead, our work has shown that the com-bination of content analysis and social network analysis is most powerful for inferring user opinions.

Some of the work (e.g., [16, 2]) have also explored the relations among users. In comparison to those supervised methods, we study the user opinions in the more difficult unsupervised setting, and we propose an effective optimization formulation to combine signals from unsupervised content analysis and social network analysis. Moreover, our unsupervised approach can be easily incorporated into any supervised learning as a way to provide intelligent features.
