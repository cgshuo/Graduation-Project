 1. Introduction
The technological advances in sensors and wireless communications have made possible the offering of high accuracy in ing tasks such as urban planning, routing or environmental pollution. The new computing paradigm is changing the way devised.

Many algorithms have been proposed for the offering of privacy in LBSs (e.g. [4,6 X 10] ). Although some of the proposed also supported in the current work and can be stated as follows: We consider a population of mobile users who are sup-ported by some telecommunication infrastructure, owned by a telecom operator. Every user periodically transmits through his/her mobile device a location update to some traffic monitoring system residing in a trusted server of the telecom filter the incoming user requests and produce anonymous equivalents that can be safely forwarded to the service providers the system to prevent the attacker from locating the requester among the users in this area.
The transformation of the exact user location at the time of request to a spatiotemporal area is achieved through the use are anonymized in the same manner no matter what the location of the user is when requesting the service and his/her fu-provide numerous advantages over ad hoc/ X  X  X rom scratch X  implementations. Our work improves current state-of-the-art el we assume an attacker who has knowledge of (i) the frequent movement behavior of all the users in the system, computed privacy of the users, even in the case that all this diverse knowledge is at the disposal of the attacker.
Our proposed privacy model is implemented as a framework that consists of four phases. In the first phase it uses the collected location updates at the trusted server, along with the underlying network of user movement, to reconstruct the history of user movement for each user in the system. In the second phase, the trusted server uses the reconstructed user movement to identify the frequent movement behavior of each user. We argue that this knowledge can be used to breach where this user works. Furthermore, a possible matching of a series of location updates with a frequently traveled route fails again, the requester is protected by blocking the servicing of the request.

The proposed privacy framework relies on a user privacy profile that stores the necessary information related to his/her routes of the user and (iii) the minimum spatial area A min area that must replace the real location of the user, in the anonymized request. Apart from A The contributions of this work can be summarized as follows:
We propose a privacy model that utilizes an underlying network that confines user movement to deliver, in an interactive implement a framework that uses the Oracle DBMS to offer privacy in LBSs. Building a framework on top of a popular
DBMS provides certain advantages against ad hoc/ X  X  X rom scratch X  implementations: data independence and efficient access; reduced application development time and maintenance; querying support for a vast amount of data; data integ-
By using the movement history of each user in the system, we automatically identify and extract patterns depicting the for trajectory K -anonymity (Section 5.3).

We propose an indexing solution that is based on the widely adopted R -tree index [15], currently supported by the major-ity of the DBMS vendors including Oracle (Section 2), that can be directly applied on modern spatial DBMSs to enable the efficient indexing and manipulation of trajectory data (Section 8).

The remainder of this paper is structured as follows. For completeness purposes in Section 2 we review the spatial fea-tures of modern DBMSs and detail over the internal workings of Oracle, since we make use of this material in our proposed algorithms. Section 3 introduces the proposed system framework where our approach fits, while Section 4 presents the ter-minology used throughout the rest of the paper. Section 5 presents the algorithmic techniques that support the proposed to the implementation of the system framework, while Section 7 contains the experimental evaluation of the proposed approach and Section 10 concludes this work. 2. Spatial features of modern DBMSs
Many modern DBMSs provide native geometry types to handle spatial operations. Namely, IBM DB2 supports spatial extenders, open source DBMS packages such as PostgreSQL now include spatial capabilities, while Microsoft SQL Server al-lows third parties to extend the DBMS product to provide a native geometry type and spatial operators additionally to  X  X  X ative X  Microsoft-engineered geometry types and supporting spatial capabilities. Among them, Oracle was the first DBMS vendor which offered spatial processing capabilities.

Due to resultant needs in efficiently storing and manipulating spatial, or more generally, multidimensional data, commer-cial database vendors like IBM and Oracle, incorporated indexing methods for supporting low/medium dimensionality data [16]. Specifically, both DB2 [17] and Oracle [18] provide support for quadtrees and R -trees [19,20] , two prominent and widely acceptable indexing data structures as they have been the subject of extensive research in the database community choice for the presentation of the proposed privacy framework. 2.1. Spatial supporting in Oracle
Oracle spatial [21] supports three geometric primitive types and geometries composed of collections of these types. The point is an element composed of two ordinates, x and y . Line strings are composed of an ordered sequence of two or more based on how p and q are related with respect to their interior, boundary and exterior. Fig. 2 exemplifies the so-called involved to draw conclusions about topological relationships.
 2.1.1. Spatial indexing in Oracle intersection model: (a) window queries with different interaction criteria : sect a specified query geometry; inside : identify data geometries that are completely inside the query geometry; eredby : identify data geometries that touch on at least one border and are inside the query geometry otherwise; contains : reverse of inside ; covers : reverse of coveredby etry but disjoint otherwise; equal : identify geometries that are exactly the same as the query geometry; tersect : identify geometries that overlap each other and boundaries intersect; geometries that overlap with the query geometry but the boundaries are disjoint; overlapbdyintersect or overlapbdydisjoint , (b) within-distance queries ( tries that are within a specified distance from the query geometry, and (c) nearest-neighbor queries ( k nearest neighbors to a given query geometry [23].
 angles, bounding 2-dimensional geometries.

Starting from the root node, we descend the tree towards the leaves as long as the intermediate minimum bounding rect-tance and see if it needs to be included in the k -NN final result set.
 approximations for data geometries  X  MBRs  X  are used to query the respective spatial index, so that pertinent geometries one-by-one with the query geometry and the exact answer set is determined and returned to the user. As explained in [26], order to spare some of the expensive computational geometry comparisons the secondary filtering procedure employs. In are reclaimed during a separate tree reorganization operation that locks the entire tree. 2.1.2. Spatial network support in Oracle
Oracle spatial also provides network support modeling [27]. A network is a type of a mathematical graph (c.f. [28]) that captures relationships between objects using connectivity which may or may not be based on spatial proximity. A network link geometries.

Oracle Spatial provides a Java API for performing network analysis operations such as: (a) shortest path finding for both constraints can guide the search for an answer to the desired targets by excluding unwanted solutions. 3. System framework
This section lays out the framework in which our proposed methodology is applicable. The considered system framework aware manner. Fig. 5 depicts our system framework that has two main components: the trusted server , which is assigned safe and unsafe routes for each user, and some performance-related data.
 A user of the system can be any individual who is equipped with a mobile device and is registered to the trusted server.
Upon his/her registration, the user is assigned a unique profile in the system and his/her movement is subsequently mon-profile for a user o consists of a set of tuples &lt; sid , K ; A vice, and (ii) the minimum area of generalization A min , where A sponding links of the network that belong to this route and are frequently followed by the user, and an associated unan-chored time interval that denotes when this route is followed by the user. The time interval is unanchored to account for storage of the infrequent routes of each user is unnecessary; when a user requests an LBS from one of his/her infrequent routes, the system makes its best effort to provide him/her with K -present anonymity.

Apart from the users, the trusted server allows the available service providers in each supported region to dynamically has a maximum extent of spatial generalization A max that defines the maximum spatial area (around the requester) within server to ensure that the spatial area of the anonymized request lies between A
The purpose of the sequence number is to serve as a reference that will prohibit the service providers from identifying are pending to be serviced. Then, the trusted server examines the point of request and determines the appropriate anonym-cludes the privacy-aware provision of the service. 4. Terminology etry. However, this information cannot be directly used to draw any significant conclusions regarding the movement habits the movement history of this object (equiv. part of the 3-D line string geometry of user movement) that consists of a sequence of location updates, beginning at some instance  X  x the traffic lights) and may cause unwanted segmentation. The decomposition of the user history of movement into trajec-tories is application-specific, meaning that different applications may require a different value of t of segments, where a segment is the (compound) 3-D line string geometry that connects two consecutive location updates point, is called a route (Fig. 6 d).
 The trajectories allow us to expose some interesting knowledge for the user by tracking regularities in his/her movement. frequent routes and are defined as follows: number of times that is larger than a minimum frequency threshold freq .
 and an unsafe route.
 K 1 other moving objects in the system.

Similarly, a route of a moving object o is considered as unsafe if it is frequent for o and also frequent for at most K 2 other moving objects in the system. A request of a moving object o for an LBS, is defined as follows:
Definition 3 ( Request for an LBS ). A request R c for an LBS is a tuple in the form R necessary service-specific data.

Depending on the user location and time when requesting an LBS and the consecutive locations and times until the pro-anonymity set and the two types of offered anonymity.

Definition 4 ( Anonymity set ). Given a moving object o sending a request R the objects that are close to o at the given point in time (and could have initiated the request R requester and within a time period that is close to the time of request.
 the K 1 participants of its anonymity set share the same frequent route with o and they pass by near the location of the requester at a time period that is close to the time of request. 5. Network aware privacy model This section introduces the network aware privacy model for the offering of trajectory K -anonymity to the requesters of
LBSs. The privacy model has been implemented as a framework that consists of four phases. Phase I is responsible for the represents the existence of a road part that connects nodes n and n 0 .
 5.1. Phase I: reconstruction of user movement
Under the network aware model, movement is restricted to a series of routes that are consistent to the network. The exis-movement behavior of the users, make the process of movement history reconstruction complicated. Specifically, given any of an exact location of an object at a certain time.

Research works, such as [31,32] among others, study the reconstruction of movement in a network aware environ-ment. Our approach (a simplified version of [31]) offers good computational speed and requires less data housekeeping.
It is shown to perform well, by providing accurate reconstruction at a degree that is sufficient for the workings of the proposed anonymization technique. As part of our model, the links of the underlying network (e.g., corresponding to a the link and depends on its topology in the underlying network. The advantage of this representation is that it abstracts away possible recording and measurement errors and identifies when two trajectories are the same, even if they do not the network.

To better understand the distinct nature of network-based modeling, consider the movement of a user in the road net-that point 4 was unknown to the trusted server. Then, to reconstruct the user movement, the system would have to identify essential to consider the existence of some network constraints that allow us to choose the most probable among the pos-work. On the other hand, we assume the existence of background knowledge regarding the current temporal constraints im-verse constraints and choose the most probable itinerary to construct the movement of the user. Algorithm 1. Reconstruction of user movement.
 Input : Two consecutive location updates A ; B .

Output : Reconstructed movement from location A to location B . 1: function RECONSTRUCT A  X  x A ; y A ; t A  X  , B  X  x B ; y 3: Cand_routes P GET _ m _ SHORTEST _ ROUTES ( A , B , m ) 4: foreach P i 2 P do 6: endforeach 8: return route having argmin i  X j t AB ; i  X  t A t B j X  9: end function 10: procedure INSERTTONET p  X  x p ; y p ; t p  X  11: if 9 = buffered geometry G with p 2 G then 13: end if 14: p PROJECT ( p ,unbuffered G ) 15: Let u ; v be the end points of G 16: set G as inactive 17: add edges up and pv 18: update mean_travel_time( up , pv , G ) . approx. time to traverse up and pv 19: set edges up and pv as active 20: end procedure 22: identify the edges Q ; R where p 2 Q , p 2 R 23: get the other end points u ; v of the edges Q ; R 24: remove edges Q ; R and vertex p 25: reset edge uv to active 26: end procedure
The reconstruction algorithm applies an incremental, edge-by-edge strategy that iteratively constructs the (compound) 3-D line string geometry of the user history of movement. To achieve that, it compares the actual time that was needed by the moving object to cover the distance between two consecutive location updates to the mean travel time as attained computations, as if it did not exist in the graph that models the network topology.

After the reconstruction of the user movement history, the next step is its decomposition into trajectories. This is an application-specific process and thus knowledge is required regarding the appropriate value of t sidered application. Assuming that we have this kind of knowledge, the decomposition of the user movement history is a straight-forward process that is undertaken by the trusted server.
 5.2. Phase II: identification of frequent routes
The knowledge of the trajectories of the users in the system allows us to compute their frequent routes and to classify belong to the same moving object o and the frequency threshold (see Definition 1 ) is 3, areas R frequently traveled routes for this object.
 Algorithm 2. Derivation of frequent routes.
 freq .

Output : The frequent routes FR of object o in time interval w . 1: procedure FREQUENTROUTES ( o , tr , N , w , freq ) 2: tr w f tr j t 2 w g . parts of the trajectories that are in w 3: declare Hash Count{ }  X  4: foreach trajectory T 2 tr w 5: L GET _ OVERLAPS (geom ( T ), link_geom ( N )) 6: foreaach l 2 L . for each link of L 7: Count{l .linkid}++ . keep track of the traversal 8: end foreach 9: end foreach 10: declare List F  X  . list of frequently visited links 11: foreach f key (Count) do 12: if Count{ f } P freq then 13: INSERT  X  F ; f  X  . f is frequent 14: end if 15: end foreach 16: FR  X  F ; w  X  . frequent routes of o in w 17: end procedure andkeepsacounteronthetraversals.Then,it usesthecollectedcounterstoretrievethelinksofthenetworkthatarefrequently
This task is accomplished by capturing the overlap that exists between the geometry of the trajectory (3-D line string) tories and the links of the network, this computation can be accomplished in a time efficient manner. 5.3. Phase III: trajectory K-anonymity
The next phase in the process of privacy preservation is the provision of the trajectory K -anonymity. If K -anonymity is lookup table that maintains this information.
 steps: Thefirststepexaminesthelocationoftherequestandidentifiesifitliesinsideanyofthefrequentroutesoftheuser.Ifthis his/herfrequentroutes,thenthesystemoffers K -present anonymityandcontinuestocheckthesubsequentlocationsoftheuser to detect whether the user entered a frequent route. This process continues until the service is provided to the user. system from a lot of subsequent unnecessary work.
 achieved through the generalization of the spatiotemporal coordinates of the request. The anonymized request, which is bors to the requester in the time-period w , plus the location of request. Depending on the value of A is adjusted if necessary to adhere to this constraint. Furthermore, if the computed area exceeds the A etry replaces the actual coordinates of the original request and thus provides its K -anonymized equivalent.
Algorithm 4 presents the way that trajectory K -anonymity is delivered to a user that sent a request R
A min . The goal of the algorithm is to identify the K 1 trajectories of the users, for the time interval w  X  X  t the appropriate anonymity requirements and to return the spatiotemporal region that covers all the K users (including the region at some time in w , the corresponding user is counted in the anonymity set. Another important issue relates to the the distance between the requester and a trajectory is captured as the minimum distance between the point of request and the nearest point of the trajectory to the requester. This means that distances are not computed based on the underlying network of movement, a choice that is justified in Fig. 12 .

Algorithm 4 identifies the K 1 routes that are nearest to the requester in w and stores them in a list AS . The a param-the anonymity set, the algorithm computes the centroid of their routes (with respect to w )in AS . This point C the center of the anonymity region of requester r . Following that, the algorithm computes the distance of C tant route in AS . The final step of Algorithm 4 is to compute the circle C centered at C corresponds to the anonymity region for user r . To ensure that the anonymity region satisfies the A the computed radius of the circle is tested against the minimum acceptable radius senders of request r , since the centroid of the routes in AS is uniquely defined.
 Algorithm 3. Match of requests to frequent routes.
 user request for this service and (if not the first request) the matched route of the last user request FR  X .
Output : Boolean value denoting whether the match was successful or unsuccessful. 1: function MATCH REQUEST  X  R c ; FR , frun ,&lt; in-out &gt; FR  X ) 2: if frun =true then . this is the first request 3: FR f X  F ; w  X 2 FR j t 2 w g . frequent routes of the user in w 5: if M  X  null then 6: return false . request made from infrequent route 7: else 8: declare List FR 0  X  10: return true . request made from a frequent route 11: end if 12: else . not the first run 14: if M  X  null then 15: frun true . initialize for the next run 16: return false . user left the frequent route 17: else 18: return true . user is still in a frequent route 19: end if 20: end if 21: end function Algorithm 4. Offering of trajectory K -anonymity.

Input : User request R c , value of K in K -anonymity, minimum generalization area A
Output : The computed circular anonymity region C that satisfies A 2: declare List_of_Geom AS  X  . initialize the anonymity set 3: declare Geometry C  X  4: AS GET _K_NN(R c , K 1, a  X  . find the nearest neighbors of the requester 5: C K GET _ CENTROID  X  AS , w ) . centroid of the routes in w 6: R K GET _ DISTANCE ( C K ; K th NN) . compute the distance from the center to the furthest neighbor 7: if R K &lt; 8: R K 9: end if 10: C CREATE _ CIRCLE  X  C K ; R K  X  . create the anonymity region C 11: return C 12: end function
In a service that can be completed within one location update, Algorithm 4 produces the anonymity region that replaces ized to satisfy K -anonymity. The K 1 subjects of the computed anonymity set are maintained by the trusted server for as long as the current service withstands completion. At each subsequent location update that needs to be transmitted to the over. 5.4. Phase IV: service delaying or denial
There are circumstances when the proposed approach for the offering of trajectory K -anonymity to the requesters of LBSs requester or tight spatiotemporal generalization constraints ( A of his/her request. 5.5. Achieving real-time operation
Offline operations. The most important offline task of the proposed system regards the derivation of the frequent routes DBMS allows this process to be conducted in an efficient manner.

Online operations. During online operation the purpose of the system is to receive user requests for LBSs and to service functionality of the employed DBMS to efficiently identify the neighbors of the requester. 6. System implementation along with references to their profiles and histories of movement. The profile of a user corresponds to a set of triples table stores the values of K for which this route is safe or unsafe for the user. The user history of movement is kept in
Besides the user-related data, the spatial DBMS also stores the underlying network topology N of user movement through a trees and the metadata of the network are updated to include the appropriate costs for the various calculations. The implementation of the proposed framework is based on the Oracle DBMS and Java, and makes use of the Oracle Java works, a support that is currently missing from other DBMSs. On the other hand, Java allows for the maximum open-endness of our framework. As a first step in our implementation, we use a network aware trajectory data generator that generates nymity. Although our implementation was based on the spatial engine of Oracle, the proposed framework can be easily functions that were used in the provided algorithms and presents their equivalents for two major spatial DBMSs, namely spatial functions SDO_BUFFER, SDO_LENGTH and SDO_WITHIN_DISTANCE. We should point out that although Oracle is a commercial DBMS, the functionality that we used from Oracle is freely available through the Oracle X  X  website ( http:// download.oracle.com ). 7. Experimental evaluation The proposed algorithms were implemented by using Java and Oracle 10g [36] on Windows XP on a 3.2 Ghz Intel Pentium experimentally evaluate the algorithms, we used Brinkhoff X  X  network aware generator of moving objects [38] and generated three datasets of trajectories based on the road network of the Oldenburg city. Brinkhoff X  X  generator is the most popular among the trajectory data generators, widely used in papers related to spatiotemporal and movement data, as it models movement in real world networks with synthetic data. The generated datasets experience different characteristics in terms of the number of moving objects and their classes, the maximum time of movement, and the probability of an object to re-unique class that defines its maximum allowable speed in the network. Moreover, the time of generation, the duration of size and the irregular reporting of location updates. On the other hand, as the experiments demonstrate, the time that is to Brinkhoff X  X  generator, we use an integer type as the unit time instance un and set the whole time period from 0 to the lying framework for the offering of online trajectory anonymity, no comparisons have been made with other approaches. sets were used in the experiments that follow.

We conducted three sets of experiments. The first set, presented in Fig. 14 , tests the scalability of the proposed algo-rithms. Specifically, Fig. 14 a shows the time that was needed to update the last segment of a user X  X  history of movement has to be executed more often. Moreover, since we have no knowledge regarding the time needed for the traversal of each imated through the graph by considering more that neighbors than K have to be found near the requester. For this experi-ment, a hundred requests were randomly generated, each by selecting a location update from the history of movement of a averages over 100 runs.
 proaches, when applied on continuous queries where the servicing of the request requires three location updates. Each vicing of the request. The reported ratios are an average over 100 runs coming from randomly selected users and lower when compared to snapshot queries, since K -anonymity has to be offered to the requester from the time of request by the participants that comprise the region of anonymity. 8. Trajectory indexing using Oracle X  X  R -tree implementation In this section, we discuss how user queries can be better served using the R -tree index  X  X  X achinery X  Oracle provides.
Please note that: (i) a geometry g constitutes a polygonal chain, or, equivalently, a sequence of 2-D points  X  p 1 fined into an MBR m g ; and (ii) every geometry g is also associated with a time period  X  t 1
Frequent route searching. In this query, we are given a user u , who is located in p m , one can represent geometries in a 3-D spatiotemporal space  X  x ; y ; t  X  as 3-dimensional rectangles r  X  x ; y l ; t l  X  is the first point  X  x l ; y l  X  of g recorded at time t t , while a frequent route query q is transformed into a 3-D point p pertinent geometry, in this approximation scheme, should contain the query point.
 from time to time, a total rebuilding of his/her frequent routes.
 as a number of 3-D line segments  X  X  x i ; y i ; t i  X  ;  X  x approximated by a collection of minimum containing boxes, namely, MBR  X  X  x  X  x q is characterized by a space location  X  x u ; y u  X  and a time interval  X  t time t n . So, in this context, we need the ( K 1) 4-D geometries closest to the 3-D line segment s having distinct values in the fourth (i.e., user id) dimension and containing user time interval  X  t where, for illustration reasons, the user id dimension is suppressed.
 fore, t 1 g 6 t n 1 6 t n 6 t 2 g and so every qualifying geometry g must belong to a strip area, defined by segments  X  X  0 ; 1 X  ;  X  0 ; t n  X [ X  X  0 ; t n  X  ;  X  t n 1 ; t n  X [ X  X  t on time dimensions. The list of qualifying geometries, returned by this index, should then be sorted by increasing to the user X  X  space location distance and the first K 1 distinct values with respect to the user id will be the final answer.  X  x straints, until ( K 1) distinct neighbors are discovered.

Closing, we must note that the choice of one out of the above alternatives depends on the underlying data. Namely, index-ing should be based on the most discriminating attribute (time or space). 9. Related work
Several approaches have been recently proposed for the sanitization of trajectory data [39 X 44] . All these approaches aim of-the-art work in the area of location privacy in LBSs, contrasting it to our methodology.
Gruteser and Grunwald [7] anonymize location data through the use of a spatial and a temporal cloaking strategy. For the and delays the servicing of the request until the anonymity requirements are met.
 old is surpassed and the request has not yet been anonymized, the system drops it as unserviceable. The anonymization picts the requests whose MBRs overlap and thus can be anonymized together, and the identification of those cliques in the own privacy requirements, such as the degree of anonymity K as well as upper bounds on the spatiotemporal inaccuracy to be introduced by the cloaking algorithm.
 while the sequence of the patterns is accompanied by a recurrence formula defining the minimum number of observations (i) enabling each user to have numerous sequences of spatiotemporal patterns, (ii) adapting the generalization algorithm when the generalization algorithm fails, which protects users by unlinking their future requests from previous ones. The experiments conducted in this paper demonstrate the effectiveness of the proposed approach to protect the privacy of the requesters of LBSs.

Mokbel et al. [10] present a privacy-aware query processing system that offers location K -anonymity. A partitioning ap-the aggregate cells that capture the requester along with his/her neighbors and satisfy both K -anonymity and the minimum covered area.

GruteserandLiu [8]attacktheanonymityprobleminthecontextofdisclosure-controlbyproposingauser-drivenpartition-regions, the system defers from providing location updates to the service providers. Furthermore, the proposed anonymity
Cheng et al. [6] study the tradeoff between location privacy and quality of service in LBSs. The authors suggest a frame-service provider, who in turn produces a result set that contains answers augmented with probability to indicate the con-fidence of their presence.

Kalnis et al. [9] present the nearest neighbor cloak algorithm that generates anonymity sets where the requester is ex-of the requester and then randomly selects one of them to formulate a new region that contains its K 1 nearest neighbors.
The region of anonymity is computed as the minimum bounding rectangle of the second region, expanded if necessary to include the requester.
 that utilizes the computed unsafe routes of the users, in order to provide them with K -anonymity when requesting LBSs. reducing the center of the area.
 typical transition times to move from one element to another. An example of a T -pattern is Home !
Ourpaper followsthecommonlyacceptedparadigmof anintermediatetrustedserverthat handlesallthe sensitivelocation data,providinginthiswaytheserviceproviderswithanonymousdata(e.g., [7,10] ).Thetrustedservermodelisthemostwidely user can define his/her privacy requirements in terms of K and the minimum area A hand, we assume that each LBS has some tolerance constraints that define the coarsest spatial resolution A ofofferedservice.Following [4],ourmodelkeepstrackofthemovementhistoryofeachuserinthesystem.However,wecapture searching for more neighbors than the minimum required. Moreover, compared to [9], the size of the computed anonymity re-knowledge, this is also the first work to build a privacy framework for LBSs on top of a modern spatial DBMS. 10. Conclusions lying network of user movement. The privacy model has been implemented as a framework that undergoes through a series able among two variants of personalized trajectory K -anonymity, namely K -present (weak) and K -frequent (strong) proposed methodology when applied on continuous user queries, we demonstrated the effectiveness of our privacy model towards protecting any portion of the user trajectory that is under threat. As future work, we intend to propose an open-ended toolbox that will integrate centralized location privacy methodologies, as well as provide the means for the easy implementation and evaluation of privacy-enhancing algorithms for LBSs.

References
