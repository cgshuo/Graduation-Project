 In the recent years the Internet has b ecome a popular busin ess hub. Lately, efforts have been put to bring machine level communication through the use of Semantic Web technology [1]. Initiatives such as [2], [3], [4] are aiming at enabling seamless integration of business processes through the combination of Semantic Web and Web services thus supporting automation of service discovery, mediation and invocation [2]. The synchronous communication technology used in Semantic Web services (SWS) requires both parties to be  X  X ive X  at the time of their interaction reducing scalability [5]. In a distributed scenario, such com-munication can be costly because of netwo rk congestion, low processing power, third party invocation, etc. Timing in communication is also important as most business transactions are time bounded i n the business world. The time differ-ence problems can be resolved through a priori agreement but in automated business process reaching such an agreement beforehand is unpractical.
In the past, tuple-based computing was largely investigated for introducing communication asynchrony between processes in parallel computing. Linda [6], TSpace [7] approaches were intended to facilitate communication between ap-plications that require distribution of data. Messaging techniques like publish-subscribe, emails, etc., were introduced to support communication asynchrony [8]. These techniques, however, do not provide semantic support for commu-nication. In this paper, we identify some of the roles of a new communication approach called Triple Space Computing [9] in the context of Semantic Web Ser-vices focusing on the communication as pects. Other aspects of Semantic Web Services such as mediation, discovery, etc are out of the scope of this paper.
This paper is structured as follows. In Section 2, similar approaches are dis-cussed. Section 3 describes SWS, discusse s its missing features and other require-ments. The Triple Space Computing (TSC) architecture is presented in Section 4. Section 5 discusses the role of TSC in SWS paradigm. The paper is concluded in Section 6 presenting intended future works. The shared space communication paradigm had already taken the attention of both industry and academia of which some relevant ones are described below.
Message Queuing technology is designed to support communication asyn-chrony in distributed environment [10]. In this scheme, sending application puts (enqueue) messages on to the queue where as the receiving app lication extracts (dequeue) them from that queue [11]. The flexibility and scalability of this tech-nique is limited by queue size and their location [12].

The Publish-Subscribe interaction mechanism is aimed at supporting com-munication asynchrony through publication of an event and a subscription to that event [8]. The events registered by the publishers are propagated asyn-chronously to the subscribers of that event. Though, it has been largely recog-nized as a promising communication infrastructure in distributed environment [13], the importance of semantics in distributed communication is largely ig-nored.

The Tuple-Based Communication concept introduced for Linda by Gel-ernter [6] allow inter processes communi cation by writing and reading informa-tion (i.e. tuple) to and from a shared space called Tuple Space. The tuple space is persistent and the communication is blocking and transient. Thus the reading process waits until the matching tuples are available [14]. The tuple matching is content based, nesting is not supported by the used data model, and physical representation of tuple space is difficult. Tuples having the same number and order of fields but with different semantics can not be matched [15] thus they do not scale [16].

Semantic Tuple Spaces is introduced in sTuple [16]. It envisions to cross-fertilize the Semantic Web and Tuple Space technologies. The tuples in sTuple are similar to that of JavaSpace[17] where one of the fields must contain a data item semantically defined using DAML+OIL [18]. The Semantic Tuple Spaces enables semantic matching on top of object based polymorphic matching. The underlying data model of sTuple consists of both Semantic and and non-Semantic technologies thus inherits all the problems of tuple-based communication. Semantic Web services aim to realize seamles s integration of applications, seman-tically enhanced information processing and distributed computing on the Web through the combination of Semantic Web and Web services. Ontologies are vital for semantic interoperability and advanced information processing, Web services enable computation over the Web. Web service technology is built around Sim-ple Object Access Protocol (SOAP), Web S ervice Description Language (WSDL) and Universal Description, Discovery and Integration (UDDI). SOAP facilitates message exchanging between Web services [19]. WSDL [20] is used for describ-ing access interfaces of a Web service. UDDI registries [21] are used to advertise service descriptions. These technologi es work at a syntactic level thus do not support dynamic inspection and integration of Web services. In this context, Se-mantic Web services (SWS) exploits Ontol ogies to automate Web service discov-ery, composition and invocation, thus ena bling seamless interoperation between them with minimum human intervention.

The use of SOAP as communication protocol is one of the problems of (Se-mantic) Web services. Supporting asynchronous communication, it requires both the service owner and the invoker be available at the same time. The current (Semantic) Web services are moving apa rt from the Web paradigm that allow independent information publishing and retrieval [9]. In addition, information can not be reused and read multiple times.

In addition to the existing ones, the basic requirements of the (Semantic) Web service technologies are: Persistent Publication -the reuse of information is possible only if the information is published persistently. Communication Asynchrony -the information should be made accessible asynchronously in order to allow SWS to work in Web scale. Reuse and Provenance -inorder to avoid conflict of communication, logging is needed. For example, in case of Web service discovery and co mposition, if similar request were processed before the previous result can be reused. The fundamental concept of TSC (Triple Space Computing) is to provide a se-mantic communication infrastructure such that machine-to-machine interaction can be achieved at Web scale. It was first envisioned in [9] and ideally, it extends traditional tuple-based computing in the direction of RDF. It aims at providing a persistent shared semantic space calle d triple space where application write and read information to asynchronously communicate with each other. Provid-ing communication asynchrony, TSC provides autonomy to applications in terms of time , reference , location [22], [9].

The visible advantage of using TSC in Web service paradigm are three-fold. Firstly, the Web service paradigm is brought onto the Web paradigm, i.e., the persistent publication of information. Secondly, the communication is asyn-chronous [9]. Thirdly, TSC provides middleware support hiding from internal application complexities. 4.1 TSC Architecture and Interaction Building on proven technologies and their combination, TSC has (Figure 1) a simple but powerful architecture.

It consists of loosely coupled compon ents and is based on SOA design princi-ples. It uses RDF as an underlying data model. The architecture presented here is the extension of a minimal triple space architecture defined in [22]. Triple Space Interfaces are defined to enable applications to interact with TSC. It allows applications to create and destroy triple spaces, to write to and read from a triple space, to retrieve history of communication. The read, write, and history operations are relative to the triple space, i.e., these operations can be performed on a triple space that already exists. Applications can invoke these operations through HTTP. The semantics of these operations are defined as follows: create (TSID) returns SUCCESS | TSID ALREADY EXISTS destroy (TSID) returns SUCCESS | TSID DOES NOT EXIST TSID.write (Triple*) returns SUCCESS | TSID DOES NOT EXIST TSID.read (Triples) returns Triple  X  X  TSID DOES NOT EXIST TSID.history (Triples) returns Triple  X  X  TSID DOES NOT EXIST Where TSID and Triple  X  represent the triple space ID and zero or more RDF Triples respectively. The triple space ID is unique with respect to the URL [23] where TSC infrastructure is hosted. The parameters to the write and history operations are the queries expressed in RDF triples. The parameter to read operation is the Triple(s) to be stored in the triple space identified by TSID. The Triple Space Manager receives a request from the applications and informs one of the necessary components to carry out their operation. If the operation invoked is create then the Triple Space Factory is informed to create a new triple space. Triple Space Factory creates a new triple space having id TSID, if it is not already created. The Triple Processor component implements the functionality of the write , read and the history operations. The storage space can be anything from a simple file system to an advanced RDF stores but YARS (Yet Another RDF Store [24]) is used in the current implementation. The History Archiver component records every flow of triples to and from triple space. The information in the Web-like open environment should be kept securely. At present only primitive security functi onalities such as access policy and infor-mation provenance have been implemen ted. We acknowledge the need of more secure strategy and is left for future work. TSC brings machine-to-machine (Semantic) Web service communication to the Web scale. TSC has many roles to play in (S emantic) Web service technologies, the most notable being: a Communication Asynchrony -Current (Semantic) Web service technolo-b Persistent Publication -Current SWS technologies are difficult to man-c Scalability -Enabling asynchronous communication and using semantically d Complexity Management -The communication complexity is managed e Communication Archiving -TSC allows the storing of a history of all f Provenance -TSC provides a mechanism to ensure that the information g Middleware Support -Due to the fact of the above mentioned support, The traditional Web services are synchronous and destroying. The information exchanged between applications can n ot be reused and read multiple times. TSC provides a semantic communication infrastructure where information can be published persistently. All communication are asynchronous and information exchanged are described using RDF Triples. Each triples are identified through URIs. In this paper, we presented what role TSC can play in Semantic Web ser-vices. By providing persistent shared sp ace, TSC brings Semantic Web services to Web scale. It plays the role of middleware that hides internal complexity from applications allowing them to communicate without changing their internal stor-age structure. Though it provides support for resolving communication disputes much more security needs have to be supp orted. Advanced support for security will be incorporated in future architecture.

