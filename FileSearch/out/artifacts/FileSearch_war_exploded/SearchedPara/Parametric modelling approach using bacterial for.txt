 1. Introduction
The most common construction of a flexible manipulator consists of light (flexible) beam attached to rigid actuator such as a motor. Compared to rigid manipulators, a flexible manip-ulator has several advantages such as lower energy consumption, smaller actuator required, safer operation due to reduced inertia, compliant structure, possible elimination of gearing, less bulky design, and low mounting strength and rigidity requirements ( Azad, 1994 ; Book and Majette, 1983 ). These advantages allow flexible manipulators to be used in various applications such as in sophisticated robotic assistants for the disabled ( Gharooni et al., 2001 ), to reduce the space-launch cost in space exploration ( Yamano et al., 2000 ), and to handle waste material in hazardous plants where access to underground storage is limited ( Jamshidi et al., 1998 ). In the industry, robot manipulators have been used widely in general tasks such as pick and place purposes to more complex tasks such as in manufacturing high precision products ( Shaheed et al., 2004 ).

Besides its advantages, the oscillatory behaviour of a flexible manipulator system, due to its flexible nature, during its operation needs special consideration. The flexible nature and distributed characteristic of a flexible manipulator system leads to complex and highly non-linear system dynamics. The coupling between the rigid dynamics and the flexible dynamics of the link may also cause stability problems ( Talebi et al., 2002 ). An accurate model is needed to design accurate control systems. Because of the nature of flexible manipulator systems, to find an accurate model for such a system is very complex and challenging.

Mathematical models have been used to characterise the motion of a flexible beam attached to a rigid hub ( Fenili and Balthazar, 2005 ; Fenili et al., 2003 ). Moreover, a payload has been applied at the end of the light beam ( Warminski and Balthazar, 2005 ). Further enhancements have also been made to develop mathematical model of flexible robotic manipulator ( Fenili and Balthazar, 2011 ).

Flexible manipulators can also be modelled by solving the partial differential equation (PDE) representation characterising the dynamic behaviour of a flexible manipulator system ( Azad, 1994 ). Another method is by using numerical analysis techniques based on finite difference (FD) and finite element (FE) methods to solve the PDE ( Azad, 1994 ; Martins et al., 2003 ; Menq and Chen, 1988 ; Tokhi and Azad, 1995 ; Tokhi and Mohamed, 1999 ; Tokhi et al., 1995 , 1997 , 2001 ; Usoro et al., 1986 ). Moreover, flexible manipulator systems may also be modelled by using certain methods that avoid solving dynamics/kinematics of the system. These include parametric and non-parametric identification tech-niques ( Shaheed and Tokhi, 2002 ). More details of previous works on modelling of flexible manipulators can be found in ( Tokhi and Azad, 2008 ).

Parametric modelling is a linear system identification techni-que which formulates the model of the plant as a linear mathe-matical function that relates the input to output usually in the form of partial differential/difference equation or transfer func-tion. With parametric approach, model of the system is derived based on input X  X utput data pairs collected at input X  X utput terminals of the system. As a consequence, the accuracy of the model is highly dependent on the accuracy of the collected data from the experimentation steps ( Ljung, 1999 ). The whole model-ling process consists of two steps. First, qualitative operations which define the structure of the model such as type and order of the differential/difference equation that relate the input to the output have to be performed. This step is called characterisation.
Then, the numerical values of the structural parameters are determined, which minimise the residual/error between actual system and the model. This step is known as identification. an optimisation task where the objective is to find a model and a set of parameters that minimise the prediction error between the system X  X  actual output (the measured data) and the predicted output (model X  X  output). Various estimation methods have been used for modelling flexible manipulators by researchers for example least mean square (LMS) and recursive least squares (RLS) ( Md Zain et al., 2009a ; Poerwanto, 1998 ; Shaheed and Tokhi, 2002 ), genetic algorithm (GA) ( Md Zain et al., 2009a ;
Shaheed et al., 2001 ) and particle swarm optimisation (PSO) ( Alam and Tokhi, 2007 ; Md Zain et al., 2009b ).
 developed based on foraging strategies of E. coli bacteria. In general, E. coli bacteria always try to find a place which has high level of nutrition and avoid a place which has noxious substance.
The process is generally called foraging. From the optimisation point of view of BFA, the optimum value is the place which has highest nutrient level. In the optimisation problem, suppose that it is desired to find the minimum of J ( y ), y A R p where there is no measurement or there is no analytical description of the gradient r J ( y ), a non-gradient optimisation technique based on foraging mechanism of bacteria can be used to solve this problem. First, suppose that y is the position of a bacterium and J ( y ) represents indicating that the bacterium at location y is in nutrient-rich, neutral, and noxious environments, respectively. Then, bacteria will try to climb up the nutrient concentration (find lower and lower values of J ( y )), avoid noxious substances (where J ( y ) 4 0), and search for ways out of neutral media (where J ( y )  X  0) optimally by implementing a type of biased random walk. This process is called chemotaxis.

With original BFA ( Passino, 2002 ), throughout this work referred to as standard BFA (SBFA), to find places with high nutrient level, bacteria use random walk with certain constant step size through the whole computational process regardless of the nutrient value. The bigger step size the faster the bacterium will move down the hill. However, a mathematical analysis of the chemotactic step in SBFA based on classical gradient descent search approach in Dasgupta et al. (2009) suggests that chemo-taxis employed by SBFA usually results in sustained oscillation when close to the global minimum especially on flat-landscape nutrient media. In order to damp the oscillation, very small chemotactic step size is needed around the global optimum. Thus large step size will lead to the bacterium oscillating around the optimum point and probably miss the minimum value. Small step size will ensure the bacterium to find the minimum value but will require large number of iterations to find the minimum point.
A strategy to overcome this problem is to apply large step size when the cost function value is large so that the bacterium moves down the hill faster and then apply very small step size when the bacterium is near the optimum point to ensure the bacterium is able to find the optimum point. Thus the chemotactic step size can be made adaptive, i.e., the value of chemotactic step size changed based on the nutrient value; if the nutrient value is high then the step size is large and if the nutrient value is low then the step size is small. By applying this mechanism, the adaptive BFA (ABFA) will be faster in convergence and will also be able to find the global optimum ( Supriyono and Tokhi, 2010 ).

Because of its potential in finding global optimum and avoiding the trap of local optima, since its development BFA has attracted significant attention of researchers in broad areas for example optimising active power filter for load compensation ( Mishra and Bhende, 2007 ), estimating harmonic in power systems ( Mishra, 2005 ) and optimising membership function parameter of fuzzy model for handwritten Hindi numerals recognition ( Hanmandlu et al., 2007 ). Thus, the application of BFA for model-ling of complex systems such as flexible manipulators is worth considering. This paper presents approaches for modelling of a single-link flexible manipulator using ABFA using data collected from an experimental rig. The single-link flexible manipulator system considered in this work is a single-input multiple-output (SIMO) system, with one input, the torque of the motor, and three outputs, namely hub-angle, hub velocity and end-point accelera-tion. Three single-input single-output (SISO) models are developed representing the system behaviour from input torque to hub-angle, hub velocity and end-point acceleration outputs. the experimental flexible manipulator rig used in this work.
Section 3 describes the proposed ABFAs. Section 4 describes modelling of flexible manipulator systems using BFAs from input torque to hub-angle, hub velocity and end-point acceleration outputs. Section 5 presents the modelling results and their validation. Concluding remarks are presented in Section 6 . 2. The experimental rig laboratory-scale facility depicted in Fig. 1 .
 rial. An outline of the mechanical model of the flexible manip-ulator and its schematic representation are depicted in Fig. 2 . length l  X  960 mm, width w  X  19.008 mm, thickness h  X  3.2004 mm, mass density per unit volume r  X  2710 kg m 3 , the second moment of inertia I  X  5.1924 10 11 m 4 , the Young modulus E  X  71 10 9 Nm 2 ,momentofinertia I b  X  0.04862 kg m 2 , and hub inertia I h  X  5.86 10 4 kg m 2 with the impact of gravity is neglected. circuit motor driving the flexible manipulator with a bi-direc-tional drive amplifier, as the motor needs to be driven in both directions. Three measuring devices employed to record the various responses of the manipulator are shaft encoder, tach-ometer and accelerometer along the arm. A shaft encoder with a resolution of 2048 pulses/revolution is used for measuring the hub-angle of the manipulator. The tachometer is used for mea-surement of the hub angular velocity of the manipulator. The accelerometer is located at the end-point of the flexible arm measuring the end-point acceleration. A precision interface cir-cuit PCL 818G is used to interface the flexible manipulator system with a personal computer (PC) with Pentium Celeron-500 MHz processor ( Azad, 1994 ; Tokhi and Azad, 1997 ). A MATLAB/SIMU-
LINK environment is used so that the output data of the flexible manipulator can be collected and control strategies can be designed and applied.
 3. Adaptation mechanism for chemotaxis
The position and its corresponding nutrient value (usually called as cost function value in optimisation) of i th bacterium at the j th chemotactic step, k th reproduction step, and l th elimina-respectively with i  X  1,2,..., S and y ( i , j , k , l ) A position, bacteria will walk heading to the position that has lower direction f ( j )on[ 1,1] is generated to define the direction of movement after tumble. Thus the movement of bacteria from one position to another position can be formulated as: y  X  i , j  X  1 , k , l  X  X  y  X  i , j , k , l  X  X  C  X  i  X  f  X  j  X  X  1  X 
In this work, investigations are carried out to make the chemotactic step size adaptable by incorporating nutrient value of every bacterium into three mechanisms: using three functions namely linear, quadratic, and exponential. The three approaches are adopted because of their simplicity so that the computational complexity of the algorithm is not increased. The basic assump-tion used in the ABFA development in this work is that the global minimum solution of the nutrient media has to be non-negative. By using this assumption, when the nutrient value is high it means the bacteria are still far away from the global minimum position so that large step size is needed to approach the global minimum faster and when the nutrient value is low it means the bacteria are close to the global minimum value thus small step size is needed so that bacteria will not miss the global minimum point. 3.1. Linearly adaptive bacterial foraging algorithm
The first adaptation mechanism proposed in this work is referred to as linearly ABFA (LABFA), where a linear function of nutrient value of every bacterium is used for updating the chemotactic step size. The use of simple linear function for updating chemotactic step size of BFA has been previously reported ( Dasgupta et al., 2009 ; Majhi et al., 2009 ; Pandi et al., 2010 ). The disadvantage of the adaptation is that the maximum chemotactic step size of unity is likely to be too big for some optimisation tasks with global minimum point equal to zero.
In order to make the maximum chemotactic step size more flexible according to the nature of optimisation task, in this work tuneable maximum step size is introduced instead of unity. Moreover, in order to control changes in the chemotactic step size, tuneable scaling factor for absolute nutrient value is intro-duced here. Thus changes in the chemotactic step size depend on the two tuneable factors. By using this strategy, changes in the chemotactic step size can be made steeper so that to lead to faster convergence. This results in a modified linear adaptation scheme with flexibility in the optimisation task according to the nature of the problem. The modified linear adaptive chemotactic step size is, thus, formulated as: C al  X  i  X  X  c max 1  X  X  b = d 9 J  X  i  X  9 where, C al ( i ) is linearly adaptive chemotactic step size for every bacterium, c max is tuneable maximum chemotactic step size, b is tuneable positive factor and d is tuneable positive scaling factor.
Larger 9 J ( i ) 9 will result in smaller b / d 9 J ( i ) determined c max , will produce larger C al ( i ) and vice versa. The scaling factor d is used to scale 9 J ( i ) 9 so that C al
This strategy is very useful in applications where the maximum nutrient value is very big. Using such a formulation, the chemo-tactic step size will change in the range [0, c max ] linearly depending on the nutrient (cost function) value as: 3.2. Quadratic adaptive bacterial foraging algorithm accelerated by introducing a mechanism that boosts 9 J ( i ) with a quadratic function. The quadratic ABFA (QABFA) uses quadratic function of nutrient value of every bacterium for updating the chemotactic step size. The chemotactic step size is thus formulated as: where C aq ( i ) is quadratic adaptive step size for every bacterium, g is tuneable scaling factor, and J ( i ) is the nutrient value for every bacterium. The quadratic function of 9 J ( i ) 9 will result in large this function approach zero and thus C aq ( i ) to approach c thisformula,QABFAwillbeabletoconvergetotheoptimumpoint faster than LABFA because it has bigger chemotactic step size for the factors d and g are introduced. These factors will helpful to maintain the chemotactic step size very large when the nutrient value is large but very small when the nutrient val ue is small so that bacteria will be able to head to the global optim um without oscillation. In this case,thechemotacticstepsizewillchangeinaquadraticmannerin the range [0, c max ], depending on the nutrient value. 3.3. Exponentially adaptive bacterial foraging algorithm accelerated by applying exponential function of the nutrient media.
The use of exponential function of nutrient media will result in larger chemotactic step size for the same nutrient media than LABFA and QABFA. The exponentially ABFA (EABFA) uses an exponential function for updating the chemotactic step size, as follows: C  X  i  X  X  where C ae ( i ) is exponentially adaptive step size for every bacterium. Similar to LABFA and QABFA, large 9 J ( i ) 9 will make the value of de ( g 9 J ( i ) 9 ) ) become very large and as a result the value of b / de will become very small or approach zero, and this in turn will make C ( i ) to approach c max . On the contrary, if 9 J ( i ) 9 become very small or approach ze ro. The positive scaling factor g will ensure the value e ( g 9 J ( i ) 9 ) not to be too large when large. Here, since the value of 9 J ( i ) 9 is between zero and one the zero to ensure bacteria achieve nearest positions to the global optimum point and do not oscillate. As a result, the chemotactic step size will change exponentially according to the nutrient value in the range [0, c max ].

With those adaptable formulated in Eqs. (2) X (4), the move-ment of bacteria from one position to another position can be formulated in Eq. (1) can now be formulated as: y  X  i , j  X  1 , k , l  X  X  y  X  i , j , k , l  X  X  C a  X  i  X  f  X  j  X  X  5  X  respectively. 4. Model construction and computation 4.1. General concept
In general, system modelling, here also referred to as system identification, is the process of developing a model that repre-sents the dynamics of system under study. Construction of a model based on input X  X utput data pairs involves three main components ( Ljung, 1999 ): the input X  X utput data available gath-ered from experiment, a set of candidate models and an assess-ment mechanism to determine the best model. The model is fitted to the real system using the procedure described in Fig. 3 . 4.2. Preliminary experimentation
In collecting the experimental input X  X utput data pairs, a random torque signal of 7 0.3 Nm maximum amplitude was applied as input to excite the flexible manipulator system. The three outputs measured from the three sensors of the flexible manipulator are hub-angle, hub velocity and end-point accelera-tion. There are 6400 pairs of input X -output data in total. From the power spectral density of end-point acceleration, it can be noted that the first three resonance frequencies were at 11.67 Hz, 36.96 Hz and 64.22 Hz, corresponding to the 1st, 2nd and 3rd modes of vibration of the system, respectively. 4.3. Model structure formulation model structure that can potentially be used in a system identi-fication process. These include autoregressive (AR), autoregres-sive with exogenous input (ARX), autoregressive moving average (ARMA), autoregressive moving average with exogenous input (ARMAX) and nonlinear ARMAX (NARMAX) ( Ljung, 1999 ). Among them, two model structures have been reported in the modelling of flexible manipulator systems using parametric approach, i.e.,
ARMAX ( Shaheed and Tokhi, 2002 ) and ARMA ( Alam and Tokhi, 2007 ; Md Zain et al., 2009(a),(b) ). Considering the simplicity, performance and computation costs, here the ARX structure is chosen to model the flexible manipulator system. The general
ARX model structure can be formulated as ( Ljung, 1999 ): ^ y  X  k  X  X  coefficients, N Z M represents the order of the model and Z ( k )is noise. If the model is strong enough and thus output of the model only depends on the actual input and actual previous output, the noise term in Eq. (6) can be neglected ( Alam and Tokhi, 2007 ). Thus, the modelling process is to determine the numerical values of coefficients a i and b j which result in minimum error between measured and estimated outputs, y ( k ) and ^ y  X  k  X  . The general ARX structure above can be expressed as a discrete transfer function as: H  X  z  X  X  Y  X  z  X  U  X  z  X   X  b 0 z M  X  b 1 z M 1  X  X  b M 1 z 1  X  b
Thus, the stability of the resulted model can be evaluated from the poles that can be calculated from the denominator of the discrete transfer function. 4.4. Computation steps of BFAs-ARX
In this work, the coefficient values of ARX model, a i and b determined using ABFAs. A block diagram of the optimisation mechanism is depicted in Fig. 4 . Where u ( k ) is the actual input, the error between the actual and predicted outputs; e  X  k  X  X  y  X  k  X  ^ y  X  k  X  X  8  X 
The model prediction error is used to set up the cost function to be optimised by ABFA. In this manner, the mean squared error (MSE) is used as the cost function J ; J  X  1 n where n represents the number of data points, and e ( k ) is the model prediction error.

In the computation of BFA, there are several parameters that should be predefined, i.e., p is dimension of the search space (number of parameters to optimise), S is the number of bacteria in the population (for simplicity, S as chosen for even number), N the number of chemotactic steps per bacterium lifetime between reproduction steps, N s is maximum number of swim of bacteria in the same direction, N re is the number of reproduction steps, N the number of elimination and dispersal events and p ed is the probability that each bacteria will be eliminated/dispersed. With the adaptive chemotactic step size mechanisms formulated in Eqs. (2) X (4), the major computation steps of ABFA are exactly the same as computation of SBFA ( Passino, 2002 ). The difference in the ABFA is that the chemotactic step sizes C ( i ) of SBFA is replaced that model bacterial population chemotaxis, swarming, reproduc-tion, elimination, and dispersal (initially, j  X  k  X  l  X  0) in finding the optimum value of nutrient media can be seen in the algorithm below (note that updates to the y i automatically result in updates to P )( Passino, 2002 ): 1. Elimination-dispersal loop: for l  X  1,2, y , N ed ,do l  X  l  X  1 2. Reproduction loop: for k  X  1,2, y , N re ,do k  X  k  X  1 3. Chemotaxis loop: for j  X  1,2, y , N c ,do j  X  j  X  1 4. If j o N c , go to step 3. 5. Reproduction: 6. If k o N re , go to step 2. 7. Elimination-dispersal: for i  X  1,2,..., S , with probability p of bacteria in the population constant).

For m  X  1: S 8. If l o N ed , then go to step 1; otherwise end. 4.5. Model validation
Following the modelling phase, the validation phase is carried out. First the resulted model must be stable. Second, the model shall predict the system response to given excitation. To validate predictive capability of the model the experimental data is split into two sets: modelling set and validation set. In this work, the 6400 input X -output experimental data pairs are split into two sets: the first 3400 data pairs are used in the modelling phase and the remaining 3000 data pairs are used in the validation phase. Finally, if the developed model is adequate, information about the past residuals or dynamics of the system should not be contained into the errors (residuals). This can be verified by showing that the residuals are uncorrelated with all linear and nonlinear combinations of past inputs and outputs using the correlation functions given as ( Billings and Voon, 1986 ): f  X  t  X  X  E  X  e  X  t t  X  e  X  t  X  X  d  X  t  X  f u e  X  t  X  X  E  X  u  X  t t  X  e  X  t  X  X  0 , 8 t f u 2 e  X  t  X  X  E  X  X  u 2  X  t t  X  u 2  X  t  X  X  e  X  t  X  X  0 , 8 t f u 2 e 2  X  t  X  X  E  X  X  u 2  X  t t  X  u 2  X  t  X  X  e 2  X  t  X  X  0 , 8 f ee u  X  X   X  t  X  X  E  X  e  X  t  X  e  X  t 1 t  X  u  X  t 1 t  X  X  0 , t where e ( t ) is the prediction error (residual), u ( t )istheinput, f represents the cross-corre lation function between u ( t )and e ( t ), for all delays, the correlations will never be exactly zero. In practice, for all delays, the correlations will never be exactly zero. Thus the 95% confidence bands are used to indicate if the estimated correla-tions are significant or not. Since parametric model using ARX structure is a linear time-invariant model, the first two correlation tests of Eq. (10) are applicable ( Billings and Voon, 1986 ). 5. Results and discussion 5.1. Hub-angle model 5.1.1. Hub-angle model in modelling phase
For hub-angle modelling, a 6th order ( N  X  M  X  6) ARX model which consists of 13 coefficients ( a 1 , y , a 6 and b 0 selected, following investigations with various model orders for best results. However, if the model is only depending on the previous input then the coefficient b 0  X  0 so that the total coefficients now become 12 ( a 1 , y , a 6 and b 1 , y , b are 12 parameters to optimise which means the nutrient media or cost function is a 12-dimension search space. The general para-meters of BFAs were selected as: p  X  12, S  X  6, N c  X  30, N
N re  X  5, S r  X  S /2, N ed  X  3, p ed  X  0.25and the initial positions of bacteria were selected randomly across the search space and
MSE was used as the cost function. For SBFA, various chemotactic step sizes were apllied in the optimisation process and the best optimum J of 14.323 10 7 was achieved when the chemotactic step size C ( i ) was equal to 0.0035. For LABFA, QABFA and EABFA, allowing the chemotactic step size to change adaptively in the range [0, 0.02].
 proposed algorithms were able to achieve better step size with EABFA achieving the best optimum J , 1.1807 10 7 .Alsoallthethree proposed algorithms had faster convergence speed (able to converge in 178 steps) compared to SBFA, which converged in 327 steps. are depicted in Fig. 5 . It is noted that the hub-angle responses of the models resulted by BFAs were ab le to mimic the actual output. However, SBFA-based model had the largest error range among them. parameters that resulted with the algorithms with a sampling time of 0.001 seconds are given as: 5.1.2. Validation phase of hub-angle model
The hub-angle models were validated using the remaining 3000 pairs of input X -output data. It is noticed that the cost function values achieved in the hub-angle validation phase were 8.2637 10 5 , 1.2273 10 5 , 1.1292 10 5 and 1.1836 10 5 for SBFA-ARX, LABFA-ARX, QABFA-ARX and EABFA-ARX models, respectively. These cost function values suggest that ABFA-based models achieved better validating results than SBFA-based model with QABFA achieving the best optimum J value. The time-domain hub-angle responses for the validating phase depicted in Fig. 6 show that all the models were able to mimic the measured output well but SBFA-based model had the largest prediction error range among them. The pole-zero diagram and correlation test functions are depicted in Figs. 7 X 10 for SBFA, LABFA, QABFA and EABFA-based models, respectively. It is noticed that all the models were stable, as all poles of the transfer function were inside the unit circle, and the correlation functions were within the 95% con-fidence interval. One or more zeros were outside the unit circle indicating non-minimum phase model behaviour. 5.2. Hub-velocity modelling 5.2.1. Hub-velocity model in modelling phase
Hub-velocity is the first differential of the hub-angle. Because in this work hub-angle was modelled using 6th order model, here for hub-velocity modelling, a 5th order ( N  X  M  X  5) ARX model was used. With coefficient b 0  X  0, thus, there are ten parameters to optimise using BFAs: five parameters for previous actual output samples ( a 1 , y , a 5 ) and five parameters for current and previous input samples ( b 1 , y , b 5 ). The general parameters of BFAs were selected as: p  X  10, S  X  6, N c  X  20, N S  X  3, N re  X  3, S p ed  X  0.25 and the initial positions of bacteria were selected randomly across the search space and MSE was used as the cost function. Various chemotactic step size values were used in the simulations for SBFA. However, the best cost function value J of 0.04191 was achieved when the chemotactic step size was equal to 0.011. For LABFA, QABFA and EABFA, the parameters and settings for c max , b , d and g were chosen by trial and error.
The numerical results presented in Table 2 show that optimum cost function values achieved for the hub-velocity modelling achieved were 0.04191, 0.0105, 0.0152, and 0.0099 for SBFA X  X RX,
LABFA X  X RX, QABFA X  X RX, and EABFA X  X RX, respectively. It can be noticed that all the proposed algorithms were able to achieve better cost function values with EABFA achieving the best J value. were able to converge to optimum value faster than SBFA. The experimental and predicted hub velocity responses are depicted in Fig. 12 . It can be seen that the experimental output of hub-velocity is oscillating in very small value around zero but the prediction output is oscillating in considerably large value. This results may caused by the linear model structure could not represents the nonlinearity of the real system.

The transfer functions of the hub-velocity models formulated with a sampling period of 0.001 seconds are as follows: 5.2.2. Hub-velocity model in validation phase
The cost function values achieved for hub-velocity model in the validating phase were 0.0485, 0.0311, 0.0340, and 0.0291 for SBFA-ARX, LABFA-ARX, QABFA-ARX, and EABFA-ARX models, respectively. It is noticed that all models developed based on the proposed ABFAs were able to achieve better optimum J values than SBFA-based with EABFA-ARX achieving the best optimum J value. Both experimental and predicted time-domain responses achieved in the validation phase are depicted in Fig. 13 . The same as in the modelling phase, the prediction output is considerably large compared to the experimental output. Pole-zero plots and correlation test results for SBFA-ARX, LABFA-ARX, QABFA-ARX and EABFA-ARX are depicted in Figs. 14 X 17 , respectively. These figures show that all the models were stable because all poles were inside the unit circle and the models exhibited non-mini-mum phase behaviour since one or more zeros are outside the unit circle. 5.3. End-point acceleration 5.3.1. End-point acceleration model in modelling phase will occur when the manipulator is moved. Each frequency resonance mode of vibration is represented by a pair of complex conjugate poles. In the current work, the first three resonance modes are investigated, thus three pairs of complex conjugate poles are needed. Hence, a 6th order structure model is needed to cover three pairs of complex conjugate poles. Moreover, the system contains rigid body dynamics. Accordingly, an 8th order ( N  X  M  X  8) ARX model was used to represent the end-point acceleration model. With coefficient b 0  X  0, thus there are 16 parameters to optimise: eight parameters for previous actual output samples ( a 1 , y , a 8 ) and eight parameters for previous input samples ( b 1 ,..., b 8 ). The general parameters of BFAs were selected as: p  X  16, S  X  6, N c  X  30, N S  X  3, N re  X  3, S r  X  S /2, N and the initial positions of bacteria were selected randomly across the search space and MSE was used as the cost function. After testing various chemotactic step sizes for SBFA, the best cost function value J was achieved when the chemotactic step size was equal to 0.03. For LABFA, QABFA and EABFA, the parameters c b , d and g were chosen by trial and error.
 values of the cost function achieved in the modelling phase were 0.00744, 0.0025, 0.0025, and 0.0032 for SBFA-ARX, LABFA-ARX,
QABFA-ARX and EABFA-ARX, respectively. These cost function values indicate that ABFA-ARX models were able to result in better optimum J than SBFA-ARX with the best optimum J achieved by LABFA-ARX and QABFA-ARX.
 ABFAs were able to converge to the optimum value faster than
SBFA. The experimental and predicted time-domain end-point acceleration responses depicted in Fig. 19 show that in general all models were able to mimic the experimental output but SBFA-
ARX resulted the largest prediction error range among them. The corresponding power spectral density (PSD) depicted in
Fig. 18 (b) show that the first three resonance frequencies of the system were at 11.67 Hz, 36.96 Hz and 64.22 Hz for the 1st mode, 2nd mode and 3rd mode, respectively. The transfer functions of the models formulated with a sampling period of 0.001 s are as follows: 5.3.2. End-point acceleration model in validation phase
The cost function values achieved for end-point acceleration models in the validation phase were 0.0091, 0.0047, 0.0046, and 0.0058 for SBFA-ARX, LABFA-ARX, QABFA-ARX, and EABFA-ARX models, respectively. These results show that end-point accelera-tion models based on ABFA achieved better optimum J values in the validation phase with QABFA as the best among them. The experimental and predicted time-domain responses in validation phase are depicted in Fig. 20 . It is noticed from the PSD depicted in Fig. 21 that the first three resonance frequencies for all the models matched one another; these were at 11.67 Hz, 36.96 Hz and 64.22 Hz for the 1st, 2nd and 3rd modes, respectively. The pole-zero diagrams and correlation test functions for SBFA-ARX, LABFA-ARX, QABFA-ARX, and EABFA-ARX are depicted in Figs. 22 X 25 , respectively, indicating that all models were stable with non-minimum phase behaviour. The correlation test func-tions confirm that all models were acceptable. 6. Conclusion
In this work, BFAs with adaptable chemotactic step size have been developed and adopted for modelling a single-link flexible manipulator system. Input X  X utput data pairs have been collected from an experimental single-link flexible manipulator rig and used in developing linear models of the system from input torque to hub-angle, hub-velocity and end-point acceleration. The performances of ABFAs have been assessed in comparison to SBFA based on the optimum cost function achieved, convergence speed, time-domain and frequency-domain responses. It has been demonstrated that the ABFAs converge faster and achieve better optimum value, and thus provide better model than SBFA. Since in the tests presented, SBFA and all proposed ABFAs used the same general parameters and the initial positions of bacteria were selected randomly in the search space, the superior performance of ABFA demonstrated can be attributed to the adaptable chemo-tactic step size.

Further work on modelling will consider combination of BFAs and other intelligent methods such as neural networks and fuzzy logic modelling of flexible manipulator systems. Also, BFAs will be used in the controller design for hub-angular movement control and vibration reduction of the flexible manipulator. Moreover, comparison and hybridisation of BFA with other intelligent optimisation techniques such as genetic algorithm, particle swarm optimisation, ant colony optimisation, artificial immune system and so on will be studied and will be considered for single-link flexible manipulator application.
 Acknowledgement Heru Supriyono acknowledges the financial support of Directorate General of Higher Education (Ditjen Dikti) National Education Department of Republic of Indonesia, and Muhammadiyah University of Surakart a (UMS), Indonesia.
 References
