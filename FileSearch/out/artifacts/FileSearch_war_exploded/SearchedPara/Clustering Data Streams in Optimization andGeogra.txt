 With the growing of sensor networks, a huge amount of sensor data are avail-able. Without loss of generality, sensor data points usually have attributes in two domains (i.e., optimization domain and geography domain). Attributes in the optimization domain (respectively, the geography domain) are referred to as nongeometric (res pectively, geometric) attribut es. Sensing measurements are nongeometric attributes and the corresponding locations of sensors are geometric attributes. As such, a dual clustering problem is formulated as clustering objects over the optimization and geography domains. Explicitly, the goal of a dual clus-tering over the optimization domain and geography domains is that data points with similar nongeometric attributes are clustered and the corresponding geo-metric attributes are satisfied a spatial constraint. Some related works have been elaborated on the dual clustering problem and the problem of clustering sensor data [1,2,3,4,5,6,7].

We mention in passing that the authors in [1,6,7] proposed a dual clustering problem over the optimization and geography domains. A dual clustering prob-lem over the geography and optimization domains is that given a set of objects whose attributes are in both domains, objects would be partitioned into disjoint clusters such that objects in the same group are connective in the geography do-main as the clustering cost in the optimization domain is minimized. Moreover, the authors in [1,6] proposed more efficient algorithms for a dual clustering prob-lem. Explicitly, a compact region, in which data points have similar attributes in the optimization domain and their locations are connected, is developed. How-ever, the constraint in the geography domain is not clearly specified. Thus, in [7], a dual clustering problem with a gener alized connected cons traint for spatial databases is proposed. The problem is that given the number of clusters and a distance threshold, objects whose distance in the geography domain is within a given threshold are grouped into a clust er and the average cost of clustering re-sults in the optimization domain is minimized. In [2], given a set of data streams, the goal is to cluster objects with higher similarity in each non-overlapping win-dow. However, the work in [2] does not consider the spatial constraint among objects. Without a specified number of clusters, the authors in [3] partition ob-jects into a set of clusters in which objects have similar phenomena. Although considering both domains, the authors in [3] focus on the communication cost for clustering sensors in a distributed manner, let alone considering the dual clustering problem in a data stream environment.

Consider an example of traffic databases in Figure 1, where each object S i represents a sensor and detects a series of speeds over time and some examples of cluster results at each time window are derived. Generally speaking, nongeomet-ric attributes (i.e., the speeds) of sensor data consist of a series of readings. Such data generated from a set of sensors could be viewed as spatial data streams. Given a set of sensor data with their nongeometric attributes and geometric at-tributes, for each time window, we aim at clustering sensors into groups, where sensors in the same group have similar nongeometric readings and their locations satisfy the spatial constraint.

In data streams, data points are usually evolved with time. The general dual clustering problem in [7] is not feasible in that the number of clusters is usually varied with time and is hard to be pre-specified. Furthermore, minimizing the average cost of clusters at each slidin g time is not necessary due to that the dy-namic features of data streams. Thus, in this paper, the dual clustering problem in spatial data streams is formulated. Specifically, we intend to partition these objects into disjoint clusters such that at each time window (1) objects in the same cluster satisfy the transitively r-connected relation in the optimization and geography domains, and (2) the number of clusters is as minimal as possible. In this paper, objects are represented as a graph structure, called RGraph, where each node represents an object and edges i ndicate their similarity relationships. In light of RGraph, we first propose a Hierarchical-Based Clustering algorithm (HBC) to cluster data objects at each time window.

The rest of the paper is organized as follows. In Section 2, we formally de-fine the dual clustering problem in a data stream environment. We propose an algorithm in Section 3. The performance of our proposed algorithm is shown in Section 4. Section 5 conc ludes with this paper. A set of spatial data streams is denoted as STD = { S 1 ,S 2 , ..., S n } ,where each object S i has attributes in the optimization domain and the geography Clearly, the attribute in the geography domain is the location of S i , denoted as L i , and the attribute in the optimization domain is represented as a vector V t  X  t
In this paper, given a set of data streams, a spatial constraint r (usedinthe geography domain), an error  X  (for the optimization domain), a window size w , for each time window with its size as w , we aim at partitioning the input data streams into several groups such that (1) objects in the same cluster satisfy the transitively r-connected relation in the optimization and geography domains, and (2) the number of clusters is as minimal as possible.

In the following, we will clearly define the dissimilarity in the optimization domain and the spatial constraint in the geography domain. Among a variety of distance functions, we adopt the average Euclidean distance, which is the most common employed, as the dissimilarity measurement in the optimization domain. As such, we have the following definition: Definition 1. (Dissimilarity) Gi ven a time interval [ t p ,t q ] and two objects S i dissimilarity between S i and S j in this time interval is defined as atimeinterval[ t p ,t q ]. Then, the r-connected relation between objects is thus defined as follows: Definition 2. (r-connected relation between two objects) Given a spatial con-straint r and an error  X  ,twosensors S i and S j are said to be r-connected in a time interval [ t p ,t q ] if S i and S j are similar and ED ( S i ,S j )  X  r ,where ED ( S i ,S j ) is the Euclidean distance between objects S i and S j in the geography domain.
 Notice that r-connected rela tion indicates that two objects satisfy both the spatial constraint in the geography domain and the error threshold in the optimization domain. Now, given a set of objects with t heir r-connected relations, we could further define the transitively r-connect ed relation between two objects as follows: Definition 3. (Transitively r-connected relation between two objects) Given a spatial constraint r and an error  X  ,twoobjects S i and S j are said to be transtively of objects S i ,S k 1 ,S k 2 ,...S k l ,S j such that (1) S i and S j are similar for any two objects, S i and S j , in this chain, (2) S k h and S k h +1 are r-connected for k As pointed out early, the goal of our dual clustering problem is to partition objects into several clusters at each time window. Clearly, clustering results of the dual clustering problem in a data stream environment should comply with r-connected relations or trans itively r-connected relati ons. Hereafter, the cluster results are referred to as transitively r-connected clusters. In this section, a graph re presentation for data objects is described. Then, we propose an algorithm to derive transitively r-connected clusters at each time window. 3.1 Graph Representation: RGraph For each time window (e.g., w i ), data objects and their relationships are rep-resented as G w i =( V, E ), where each node is referred to one data object and there exist edges if these data objects are similar for capturin g the r-connected or transitively r-connected relations. Hen ce, we have the following two definitions: Definition 4. (Trivial edge) If two nodes S i and S j are r-connected, there exists a trivial edge between S i and S j , denoted as e t ( S i ,S j ) .
 Definition 5. (Hidden edge) If two nodes S i and S j are similar and ED ( S i ,S j ) &gt;r , there exists a hidden edge between S i and S j , denoted as e ( S i ,S j ) .
 Such a graph is called RGraph. For example, given the r =10 km,  X  =5km/hr, w =10, and the set of data streams in Table 1, at the first time window (i.e.,
Algorithm 1. Hierarchical-Based Clustering (HBC) Algorithm w ), RGraph in Figure 2(a) is built according to their nongeometric and geo-metric attributes. The solid line (respectively, the dotted line) is a trivial edge (respectively, a hidden edge). For instance, S 1 and S 2 are r-connected since diss ( S 1 ,S 2 ) | [1 , 10] =1 . 6  X  5and ED ( S 1 ,S 2 )=2  X  10. Then, a trivial edge e ( S 1 ,S 2 ) exists between S 1 and S 2 . S 1 and S 9 are similar but far because hidden edge e h ( S 1 ,S 9 ) between S 1 and S 9 .

Once we have the graph at each time window, the transitively r-connected clusters are subgraphs in which nodes are c onnected via trivial edges and these subgraphs are complete graph via both trivial edges and hidden edges. For exam-ple, in Figure 2(b), there are four clusters at the time window w 1 . The subgraphs refer the cluster results and agree with our above claim. 3.2 Hierarchical-Based Clustering Algorithm We propose a Hierarchical-Based Clustering algorithm (abbreviated as HBC) in this section. For each time window, we will build RGraph in which both the trivial edges and hidden edges are determined according to their attribute values over the optimization and the geography domains. In light of the RGraph, clustering results are generated by iteratively merging other clusers. Explicitly, in the beginning, each node is regarded as a single cluster. For each cluster, those clusters that are reached vi a trivial edges are candidate clusters for merging. To determine which trivial edge should be selected, the weight of a trivial edge is assigned by the dissimilarity of two nod es. Among trivial e dges, we select the one with the minimal dissimilarity for possible merging operations. Note that these two clusters will be merged if these two clusters form a complete graph. Otherwise, we will continue to select the next trivial edge. Following the same process, cluster results are generated. T he process of merging will stop if there is no more trivial edges. The detail of clustering processes is shown in algorithm HBC.

Given an example of data streams in Table 1, the RGraph is shown in Figure 2(a). Then, the weights of trivial edges are obtained as shown in Figure 3. Let M = { e t | each e t is an unused trivial edge } . Initially, M is the set of all trivial edges. In the beginning, e t ( S 3 ,S 5 ), whose weight is the minimal in M , is selected and removed from M ,and S 3 and S 5 are merged into a new cluster, i.e., { S 3 ,S 5 } . In Figure 3(b), e t ( S 5 ,S 6 ), whose weight is the minimal in M , is selected and re-moved from M . S 6 could be merged into { S 3 ,S 5 } , because { S 3 ,S 5 ,S 6 } forms a connected subgraph via trivial edges and there exists a hidden edge e h ( S 3 ,S 6 ) such that { S 3 ,S 5 ,S 6 } forms a complete subgraph. While e t ( S 4 ,S 6 )isconsid-ered, we would check whether S 4 could be merged into { S 3 ,S 5 ,S 6 } . Although {
S since there is no edge between S 4 and S 5 . Therefore, S 4 could not be merged shown in Figure 3(f).
 4.1 Dataset and Settings In this section, we utilize the real dataset to evaluate the performance of our proposed algorithm with respect to different parameters. These parameters are: anumberofsensors N , a number of time slots L , a size of each time window W , a number of time windows D , a spatial constraint (in km) r , and a similarity threshold (in km/hr)  X  . The freeway traffic database was obtained from Taiwan Area National Freeway Bureau. We evaluate the performance on the real dataset related to the traffic monitor along with No.1 Freeway in Taiwan. There are 158 sensors on No.1 Freeway including both directions and the length of No.1 Freeway is 372.7 kilometers. We accessed speeds per 10 minutes from each sensor. In our experiments, the default setting is that N =79, L =434, r =10, W =10, and  X  =5. Experiments were conducted on a computer with 2.80GHz Intel CPU and 2GB of memory, running Microsoft Windows Server 2003. 4.2 Experimental Results Figure 4 shows the performance of algorithm HBC. In Figure 4(a), as the number of sensors increases, the runtime of algorithm HBC tends to increase. Further-more, we implemented a brute-force algorithm for the optimal solution, called Opt, and the efficiency and quality of clustering results of algorithms HBC and Opt are compared in Figure 4(b). As can be seen in Figure 4(b), the number of clustering results of algorithm HBC is quite similar to that of algorithm Opt, but the runtime of algorithm HBC is less than that of algorithm Opt. The impact of varying both the spatial constraint and the error is investigated in Figure 5. In Figure 5(a), with a larger setting in r , the runtime of algorithm HBC increases. The reason is that with a larger number of r , more sensors are considered for clustering, thereby increasing the runtime of algorithm HBC. Figure 5(b) illus-trates the performance of algorithm HBC with the similarity constraint  X  varied. The effect of  X  of algorithm HBC is not obvious with varying  X  from5to35since the runtime of each time window increases a little as  X  increases.

Figure 6(a) shows the performance of algorithm HBC with W varied. The runtime of algorithm HBC decreases when W increases. The reason is the num-ber of time windows decrease while W increases, and thus algorithm HBC has smaller runtimes. Finally, we vary the length of data streams and Figure 6(b) shows the performance of algorithm HBC, where the size of time window is fixed (i.e., W =10). As the length of data streams increases, more number of time win-dows is involved. Thus, the runtime of HBC drastically increases. In this paper, we formulated a dual clustering problem in spatial data streams, in which objects are partitioned into disjoint clusters such that at each time window (1) objects in the same cluster satis fy the transitively r-connected rela-tion in the optimization and geography domains, and (2) the number of clusters is as minimal as possible. We propose algorithm HBC to deal with the dual clustering problem. Specifically, objects are represented as a graph structure, called RGraph, where each node represe nts an object and edges indicate their similarity relationships. In light of RGraph, algorithm HBC iteratively merges clusters. Experimental results show the p erformance of our proposed algorithm.
