 Browsing a collection can start with a keyword search. A user visits a library, performs a keyword search to find a few books of interest; finding their location in the library. Then the y go to these locations; the corresponding bookshelves , where they do not just retrieve the found books, but rather they start browsing the nearby books; the books which have a similar Dewey classification. This paper extends this approach to curated corpo ra that contain items or documents that have been classified in multiple dimensions (facets), where each dimension classification may be a hierarchy . In particular ( i) a technique for determining near items based on OLAP datacube cells and (ii) user interf aces that support browsing of near items are presented . H.3.3 [Information Search and Retrieval]: Selection Process. H.5.2 [User Interfaces]: GUI .
 Algorithms, Design, Experimentation.
 Faceted search, user interface, OLAP, similarity. With the advent of large online collections such as the Amazon shop, the various music, video and app stores that can contain millions of items, customer discovery of items can be a challenge. Two major approaches are: keyword se arch over items descriptions that return ranked lists of items, and top -down directory based search where users make successive category choices that filter the collection down to an item list for browsing . The latter approach include s faceted search over an item collection [3][10 ]. Faceted search relies on item meta -data that classifies each item into multiple dimensions (the facets) where each dimension is a category tree. An example is a real-estate rental website, where users can in a top -down manner filter on location, number of rooms and price interval to see a list of matching properties that can then be browsed. Keyword and faceted search approaches can be combined , so that keyword search acts as an additional dynamic facet filter that is combined wi th the other facet filters to produce the list of matching items for browsing.
 P roviding top level categories for one or more dimensions , then listing items within these categories , ranked in an order such as popularity , is a nother top -down approach to item discovery . Another bottom -up approach is to use keyword search to find a few initial items of interest, then continue the browsing by providing lists of similar items based on heuristics such as common shopping baskets or similar content [ 9]. A major difficulty for top -down directory based approaches such as faceted search is the creation of manually defined hierarchies , particular ly topic hierarchies . A large effort was made by Ya hoo to create such a hierarchy manually, with its d irectory for the web, but this has closed recently . An ongoing alternative is the O pen Directory Project [5 ]. One of the most import parts of such a classification is the category titles; they must be meaning ful to users. Heuristics have a poor record here . There are many heuristics to cluster documents but algorithmically labeling the clusters remains difficult. Solutions include integrating the use of an external resource such as Wikipedia [1 ], or combining an initial top -level of manually created categorie s with content based clustering to provide better category labeling [2 ]. This paper proposes a new approach to search ing and browsing a collection that has been classified with predefined hierarchies : bottom -up faceted search. It starts with a keyword search to find a few initial items of interest, but then browsing continues by successively adding nearby items to a browsing list. However, unlike similarity measures which are based on website navigation or content, nearby is determined by an item  X  X  position in the space defined by the dimension hierarchies . In the case of one dimension this equates to tree distance. In the multidimensional case, items that have the same category value in each dimension are near. Our approach is based on an applicat ion of OnL ine Analyti cal Processing (OLAP) [6 ], a technique that is normally used for data analysis. Our approach utilis es OLAP aggregation (datacube cells) and aggregation control (rollups) . Near items share a dat acube cell which can be successively expan ded through dimension rollups. This will be explained further in section two. Our t hree use cases are: ( i) a user wishes to find books in a narrow topic. Using keyword search they locat e a few books that seems to fit and go to the shelf to find these b ooks. Then they browse nearby books in the same and adjacent topics to see if any of them are also of interest, (ii) a user has previously browsed the shelf and remember there was something of interest and wish es to return to find it and (iii) a user has previously browsed the shelf and wish to con tinue the browsing from where they ended browsing last tim e. The latter two cases require a  X  X table X  shelf, where items retain their order and organisation. The contributions of this paper are: a description of a bottom -up search method that induces a ranking based on nearness in a predefined dimension hierarchy space, and two user interfaces that support bottom -up faceted search: compact and full . In t his section the OLAP origins of our approach are described . OLAP is a standard database technique for data analytics. It assumes a table of facts where each fact has a value in multiple dimensions. For example a sale record that includes location -city, product type, date -day and price range. When facts are aggregat ed with a group -by on all dimensions the resulting table forms a datacube where each row is a non -empty cell in the datacube. A user can then view cross -sections of the datacube as cross -tabulations with pivot tables or charts, where the table or chart axis are a dimension X  X  categories or intervals. This alone is not sufficient , as such axes would be too detailed. Further aggregation is required to support higher levels views such as sales by quarter rather than by individual days.
 Dimensions are typic ally not flat set s of categories , that partition the data, but rather a hierarchy of categories or intervals. In such cases each dimension column in the fact table will contain leaf dimension cat egory values, w hile the dimension hierarchy itself is stored in separate table that can be joined with the fact table. This organisation of fact and dimension table s is referred to as a star schema.
 Further aggregation is supported by summary datacube views, that were created with higher levels of the dimension hierarchies. For each dimension, a user selects the level they wish for the table or chart view. For example they could select date -quarter (rather than date -day), location -state (rather than location -city) only, a two dimension cube. In OLAP te rminology we say that date has been rolled -up from day to quarter , and location from city to state, while product type and price interval have been rolled -up to their respective root categories (i.e. all).
 OLAP data expl oration also includes filtering that restricts data to some slice, by applying constraints to one or more dimensions; such as product type is electrical goods. Filtering is combined with aggregation control ; rollup and their inverse drill -down operations to respectively restrict and cha nge the granularity of views. Together these are the two basic operations of OLAP data explorations; slice &amp; dice (filtering) and rollup &amp; drilldown (aggregation). Faceted search like OLAP relies on pre -defined hierarchies that facilitate top -down fil tering. Faceted search interfaces typically provide a view that presents a filtered list of items together with the interactive filter widgets . These widgets can include radio button s or check -boxes for each facet, where facet categories are decorated with item counts to guide user browsing. Facet ed search browsing is a top -down process of iterative filter refinement. Aggregation control or rollups are simply not part of this. This work provides a deeper integration of OLAP and faceted search, in which OLAP aggregation control is also utilised . In this section item nearness, that is, item neighbourhoods and how they can be successively expanded through OLAP aggregation control (rollups) is defined.
 Our collection is a set of items denoted Items . Let there be n dimensions denoted as D 1 , .. D n . Denote the location of an item x , as location ( x ) = ( v 1 , v 2 , .. v an ) where v i D is a set of categories equipped with a partial order that is a tree . Denote a set of selected search results as R , where R initial set of near items for R is simply those items that hav e the same location as some r  X  R . To expand the near -set rollup operations are used. A rollup merges cells into summary cells . The function Rollup ( R , k , j ) return s a set of locations; summary cells S , where the k  X  X h dimension  X  X  categories have been lifted to level j . Denote each cell c  X  Location ( R ) as ( v Then each corresponding cell c '  X  Rollup ( R , k , j ) is given by c ' = ( v , v 2 , .. ancestor ( v k , j ) , .. v n ) where ancestor ( v ancestor of v k in D k at tree level j . The items located in a summary cell s = ( s 1 , s item s x such that location ( x ) = ( v 1 , v 2 , .. v D ordering . The items that are in S but are not in initial Location ( R ) are the additional near items added by the rollup.
 Figure 1 shows an example rollup of a small collection ; of 7 items that are classified by two dimension trees A and P. Both dimensions have two levels. There is one selected result located in cell (d,s): item {1}. The initial near set {(d,s)} contains two items: {1,2}. There are two possible r ollups: A or P. A rollup of dimension A, Rollup (R, A, 1) = {(b,s) } which contains 3 items: {1,2,6}, while a rollup of dimension P, Rollup (R, P, 1) = {(d, q)} which contains 4 items: {1,2,3,4}. When there are n dimensions there can be n alternative rollups to choose from. Our system provides three methods for this. Firstly, a default rollup where the dimension that adds the least number of items is chosen. Secondly, a manual rollup, where a user makes a choice from a list of dimensions that are decorated with count s of the additional items that would be added if the dimension was selected for rollup. Thirdly, a manu al rollup, where a user can set any dimension directly to an arbitrary level. In most cases the first and second rollup methods lift a dimension by one tree level. However, sometimes such a rollup add s no additional items, so a further rollup to a hig her tree level is applied. Sometimes lifting a dimension to the root level still does not add any additional items, so a further rollup may applied to another dimension . The next section will show the three rollup methods in action. In this section compact and full -size user interfaces for bottom -up faceted search via rollups are described and demonstrated. But first , we provide an overview of our system. Figure 4 shows a complete screenshot of our user interface. The RHS panel is the compact interface, while the LHS and RHS panels together form the full interface. The collection shown is a portion of a local file system. The items in this collection are the individual files and the dimensions are their : directory path, file type, modify date and size . The top of the compact interface contains a keyword search field which uses the open source Lucene keyword search library [4]. A scan of the file system created the initial fact table of files 
P Figure 1. A collection of 7 items distributed over dimensions A and P with the two alternatives rollups of item 1 shown . and their meta -data, while a separate scan by Lucene populated the indexes needed for content based search. The hierarchies for file type and size were manually created, while the hierarchies for file path and modify date were induced. Bottom-up faceted search starts with a keyword search. Figure 2 (left -most screenshot) shows our compact interface after datacube was entered . Twenty five matching results were returned, of these two were selected. They are shown as the two highlighted rows. The second screenshot shows the two selected results with their initial near items; that is the other items that are in the same datacube cell. To add more near items a default rollup is done. This is shown in the third screenshot. Only one extra item was added. This extra item is highlighted with a darker gray LHS box. The rollup dimensi on choices were: directory Path (+ 3 items), extension (+ 1 item), modified (+ 0 items) and size (+ 2 items). The default rollup chose the dimension that added the least non-zero number if items, so the extension dimension was roll ed-up adding that one ite m. To reverse a rollup the inverted triangle beside the rollup button is clicked . T he last screenshot shows the effect of several more default rollups . The list of the two initially selected results and their near items has grown to 19 items. The last of these rollup s added 10 items, those with a gray LHS boxes. Note that as each rollup is done, additional items are added to the end of a list that starts with a selected result, creating a ranking. If sufficient rollups are done the se two selected resul ts would end up in the same cell, at that time, they and their list of near items would be merged in a manner that preserves their rollup step order.
 A user can manually chose which dimension to rollup. If they apply a right click to the rollup button , a context menu that shows the choice of dimensions decorated with item counts , is shown . For example, if a rollup of dimension size was selected in the last screenshot 65 additional items would be added. Our full interface supports arbitrary rollups. That is, the user can select the rollup level of each dimension directly. For example, a user may decide that there should be no constraint on document size , so it can be rolled -up to the root level at the beginning of the search, creati ng larger cells hence larger neighbourhoods that will contain more near items. Figure 3 shows an overview of the visualisa tion used in the full interface that places each dimension hierarchy over an appropriately sorted data cube vector . T his visualisation extend s [7][8 ]. However, while the earlier system default rol lups. It also shows the manual -rollup context -menu for the next rollup.
Figure 3. Parallel dimension hierarchies over a cube vector. offered top-down faceted search support, it included no support for OLAP rollup or near item browsing . Returning to figure 3 , the dot in cell 6 represents one item. The overall location of such an item is shown b y the path it traces across the dimensions. Figure 4 shows a local file system. A key difference with figure 3 is: dimension hierarchies are shown with a proportional layout, where the width of each cell depends on the number of items contained. However, a fixed scale layout that allocates a fixed width to each leaf category is also supported.
 Figure 4 shows the same rollup-step as the third screenshot in figure 2 ; the one that contained two selected results with three near items. Selecting a row in the compact view makes those items  X  paths visible in the full view. In figure 4 a ll rows have been selected to make all five pat hs appear. A distortion slider at the bottom of the compact view make the cells and leaf categories that contain the five points wider and more visible. Colouring can also be applied to one of more categories to make subsets of paths more visible. The firs t selected result appear s as a gray path that joins magenta bars in each dimension. The second selected result and its three near items appear as four green paths ; join ing the green bars located in cell 3827 in each dimension.
 A close look at the ext ension hierarchy in figure 4 shows it is missing a level. The initial rollup in figure 2 was a rollup of extension that added one item and removed its lowest level, that had included the document sub -categories: doc, html, pdf and txt. The rollup level con trol for extension is circled. Each dimension has a similar rollup level control. A user simply clicks the desired level for one of more dimensions to change their rollup level. The list of items in the compact view then changes to reflect these new rollup levels. The discussion so far has assumed the initial search is done over the entire collection. However, the full view also supports top -down faceted searc h. For example, in filter mode (shown on the LHS) a user can restrict the collection, by selec ting one or more categories in several dimensions. For example, research AND (2005 or 2006) could be selected, this would restrict both results and near items to that slice of the collection. This paper has presented a new technique for corpus browsing that is directory based rather than content based; one that relies on predefined classification s of corpus items . The technique is an appl ication of OLAP aggregation control ; via rollups that create expandable neighbourhoods for search results. It integrates with top -down faceted search filtering; that is with OLAP slice &amp; dice. In summary, a deep integration of OLAP with search that supports the browsing of near items has been provided. [1] Carmel D., Roitman H. and Zwerdling N. Enhancing c luster [2] Cooper, E . System and method for divisive textual clustering [3] Hearst , M . Clustering versus faceted cat egories for [4] Lucerne . http://lucene.apache.org/. [5] Open Directory Project. http://www.dmoz.org/. [6] Pedersen , T. and Jensen , C . Multidimensional Database [7] Sifer , M. and Lin , J. Refining search results with facet [8] Sifer, M., Lin, J., Watanobe , Y. and Bhalla , S . Integrating [9] Singhal , A . Modern informati on retrieval: A brief overview. [10] Tunkelang , D . Faceted search. Synthesis lectures on inform -
