 Hongyu Zhang * 1. Introduction
Over the years, scientists have discovered surprising statistical laws behind many complex natural and social phenome-nons. For example, it has been discovered that in Internet, World Wide Web and protein interaction networks, a small num-ber of nodes are highly connected while most nodes have only a few connections. Further analysis shows that these complex &amp; Bonabeau, 2003; Newman, 2003, 2005 ). The research on power-law has become an important subject of complex system study.
 In the area of information and computer science, researchers have also discovered many similar power-law regularities.
As early as in 1926, Lotka found a statistical regularity about the frequency of publication by authors. In Lotka (1926) ,it states that  X  X  ... the number (of authors) making n contributions is about 1/ n natural language study, Zipf X  X  law is also widely observed in many other disciplines including physics and economics ( Ada-mic &amp; Huberman, 2000; Alex, 2001 ). The Nobel Prize winner Herbert Simon (1955) also studied the distribution of words in texts and proposed to use the Yule distribution to explain the generation mechanism of Zipf X  X  law. Heaps (1978) discovered huge amount of research over the past decades. Researchers have been trying to unify these laws, explain their generation mechanisms, and discover their new forms of occurrences. Some recent examples include Jansen, Spink, and Saracevic (2000) , Baroni (2005) , and Egghe (2005, 2006).

Lotka X  X  law, Bradford X  X  law, Zipf X  X  law, and Heaps X  law are all power laws in general. In the area of information and com-puter science, most of the above-mentioned power-law instances were found in the context of infometrics and natural lan-software systems.

We study computer programs written in Java, C++ and C programming languages as these three languages are the most popular languages in recent years. We collect a number of real-world Java, C++ and C software systems and analyze their cisely, the Zipf X  X andelbrot law) and the growth of the distinct tokens follows Heaps X  law. We believe our study reveals the statistical regularities that are behind computer programming. Our work can be seen as an effort to measure software from the viewpoint of complex system. It provides a new way of measuring and understanding today X  X  large and complex soft-ware systems. 2. Zipf X  X  law and Heaps X  law in natural language text 2.1. Zipf X  X  law
Zipf X  X  law is an empirical law named after the Harvard linguist George Kingsley Zipf. During his study of natural lan-words occur rarely, and the frequency of occurrences of a word is roughly inversely proportional to its rank. If we sort the words by their frequency of occurrences (the most frequent gets rank 1 and the least frequent gets last rank), we have the following Zipf X  X  law: the most common word (e.g.,  X  X  X he X ) occurs just twice as often as the second most common word (e.g.,  X  X  X f X ), and the 30th most common word should occur with five times the frequency of the 150th most common word. Zipf explained his discov-ery using the principles of least human effort.

Taking the logarithm on both sides of the Eq. (1), we get: law is quite accurate except for very high and very low rank. Mandelbrot (1953) proposed a more general form of the law (also called Zipf X  X andelbrot law): where a new constant b is added to the denominator. A reasonably small value of b will lower the frequencies of the first few
Mandelbrot parameters are C =10 5.4 , b = 100 and a = 1.15 (Manning &amp; Schutze, 1999 ). 2.2. Heaps X  law
Heaps X  law (Heaps, 1978 ) is an empirical law that describes the growth of the vocabulary in natural language text. It can be represented as parameters determined empirically. It is also shown that Heaps X  law can be formally derived from the Zipf X  X andelbrot law ( Leijenhorst &amp; Weide, 2005 ).

Heaps X  law indicates that the number of different words grows sublinearly with the text size. For large text collection such
Web data collected from several thousands of web pages, the value of b is reported to be 0.76 (Baldi, Frasconi, &amp; Smyth, 2003).
 Some authors believe the vocabulary size should stabilize for huge enough texts because the number of different words in
English is finite (Baeza-Yates &amp; Ribeiro-Neto, 1999 ). After inspecting 45 gigabytes of WWW documents, Williams and Zobel (2005) found that new words continue to occur due to spelling errors or emerging terms. The value of b is 0.59 for the first ten million word occurrences in the WWW documents. 3. Observing Zipf X  X  law and Heaps X  law in computer programs 3.1. Data collection and lexical analysis
In this study, we explore if Zipf X  X  law and Heaps X  law exist in modern computer programs. We focus on programs written in Java, C++ and C as they are the most popular programming languages in recent years. According to the specifications of these languages ( ISO, 1995, 1998,Sun, 2005 ), a typical program consists of white spaces, comments and tokens. The tokens constants; (b) keywords that are reserved words with pre-defined meanings; (c) literals that represent constant values of a primitive data type; (d) operators that denote arithmetic/relational/logical operations; and (e) separators that separate two tokens. All these lexical tokens can be parsed by the language compilers.

The data used in our analysis is collected from 24 well-known Java, C++ and C systems of different sizes ( Table 1 ). These code is available for public, which makes the validation of results possible. For each software system, we collect the tokens appeared in source code and sort them according to their occurrence frequencies. Tokens that have the same frequency are assigned with different ranks. We have also developed a lexical analyzer tool for Java, C++ and C programs to aid the data collection process.

We find that different tokens may have different frequencies of occurrences. For example, in the Jakarta Tomcat system, occurs 88,919 times, accounts for 10.03% of the program size. The most frequently-occurring keyword is  X  X  public  X , which
These tokens can be treated as  X  X  X topwords X  in programming languages. In general, we find that the most common keyword systems, showing that the concept of pointer is widely adopted in C++/C programming practices.

In this study, we treat each lexical token as a  X  X  X ord X . We also experimented with different definitions of  X  X  X ord X  and ob-tained similar results. For example, if we only consider  X  X  X ords X  as identifiers, or as identifiers, keywords and operators treat  X  X  X  string X  as a composition of two tokens  X  X  X  X  and  X  X  X tring X ), we still get similar results.
 3.2. Zipf X  X  law in computer programs
For each software system, having collected tokens we then plot the occurrence frequencies of tokens against their ranks on a log X  X og diagram. The results for some systems are shown in Fig. 1 . We can see that the distribution curves are close to straight lines, exhibiting Zipf X  X  behavior (except for very high ranks).
 Further analysis shows that the data can be better described by the Mandelbrot X  X  modification of Zipf X  X  law. To obtain the
Zipf X  X andelbrot law Eq. (3) parameters, we adopt the method proposed in Baroni (2005) . Firstly, we assume the distribution system, with Zipf and Zipf X  X andelbrot regression curves. The regression parameters are shown in Table 3 . We use R two distributions. Higher R 2 and lower S e values are preferred. The Zipf law results in R while the Zipf X  X andelbrot law results in R 2 value 0.959 and S better, especially for the very high ranks.

We repeat the experiments for all studied systems and observe the same regularity. The obtained Zipf X  X andelbrot law parameters are summarized in Table 4 . The power-law exponent a ranges from 1.11 to 1.32. The R to 0.993, indicating good fitness of the Zipf X  X andelbrot law.
 3.4. Observing Zipf X  X  and Heaps X  laws in software evolution
The experiments shown in the previous sections focus on one version of the system. However, we should note that the observed Zipf X  X  and Heaps X  laws do not pertain to one single version only, instead they are consistent properties of software that is experiencing long-term evolution. To show this, we collect ten versions of the Tomcat system (from v3.32 to v6.0.14) released from March 2004 to August 2007, and replicate the experiments described in previous sections. The results confirm that Zipf X  X  law and Heaps X  law hold for all versions of the system (Table 5 ). The Zipf X  X andelbrot law exponent a ranges from 1.25 to 1.34, the Heaps X  law exponent b ranges from 0.729 to 0.821. 4. Related work
Our work generally falls into the category of software metrics. In software engineering discipline, software metrics ( Fen-ton &amp; Pfleeger, 1998 ) are designed to quantify the complexity of software products and processes. Based on the measure-ment data we can better understand the status of the software and thus better control its development process and quality. Research on software metrics has been active for more than 30 years. Many metrics have been proposed based on different software characteristics. For example, Lines of Code (LOC) and Halstead X  X  software science ( Halstead, 1977 )is based on the measurement of software size. McCabe X  X  Cyclomatic Complexity (McCabe, 1976 ) is based on the measurement of software structure. In this paper, we treat a software system as a complex system and measure the distribution and growth of tokens using the power-law functions.

The research on the distribution of tokens in programs can be dated back to 1970s. Robinson and Torsun (1976) analyzed the distribution of keywords and operators in a set of FORTRAN programs written and run in a university environment. They found that some FORTRAN statements (e.g., ASSIGNMENT) occurred more frequently than the others (e.g., STOP) and sug-gested that this finding could be useful for code optimization. There are also some models for the frequency distribution of operators in PL/I programs, such as the Zweben model (Zweben, 1977 ) and the two variations of the Zipf model (Zipf-A and Zipf-B). However, as the development of software metrics and power-law theories were not matured at that time, the ern, real-world software systems we show that the distribution of tokens follows the Zipf X  X andelbrot law. In recent years, some researchers also started to understand software from a complex system point of view. Concas, Locci,
Marchesi, Pinna, and Turnu (2006) viewed a software system as a large connected class graph and found these graphs are self-similar. Concas, Marchesi, Pinna, and Serra (2007) also studied 10 static code attributes (such as in-degree and out-de-analyzed the structural attributes of Java programs (such as the number of methods and fields, etc). They discovered that the distribution of some attributes follow power-law while others do not. In our prior work, we also discovered that class sizes try to discover the underlying power-law patterns behind software artifacts. 5. Conclusions
Power laws are observed in many natural and social phenomenons. They are also found in many areas of information and computer science. We observe that the power-law regularities, especially the Zipf X  X  and Heaps X  laws, also exist in computer programs. Our study shows that like in natural language text, the distribution of tokens in large-scale software follows the
Zipf X  X andelbrot law, and the growth of vocabulary follows Heaps X  law. We have performed this study through the analysis of 24 real-world open source Java, C++ and C systems. We have also analyzed 10 versions of the Tomcat systems. All empir-ical results confirm the strong exhibitions of the Zipf X  X  and Heap X  X  laws across all systems and versions.
We believe our study reveals the statistical regularities that are behind program construction, and hope our results could contribute to a deep understanding of the nature of computer programming. We hope our results could be applied to areas such as the retrieval of information from software, code optimization, software compression, and software complexity mea-plore the underlying generation mechanisms of the discovered Zipf X  X  and Heaps X  laws in computer programs. Acknowledgement
The author is supported by the Chinese NSF grants 60703060 and 90718022, and the state 863 project 2007AA01Z480 and 2007AA01Z122.
 References
