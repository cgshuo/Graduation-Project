 One of the biggest challenges for software developers to build real-world predictive applications with machine learning is the steep learning curve of data processing frameworks, learn-ing algorithms and scalable system infrastructure. We present PredictionIO, an open source machine learning server that comes with a step-by-step graphical user interface for devel-opers to (i) evaluate, compare and deploy scalable learning algorithms, (ii) tune hyperparameters of algorithms manu-ally or automatically and (iii) evaluate model training sta-tus. The system also comes with an Application Program-ming Interface (API) to communicate with software applica-tions for data collection and prediction retrieval. The whole infrastructure of PredictionIO is horizontally scalable with a distributed computing component based on Hadoop. The demonstration shows a live example and workflows of build-ing real-world predictive applications with the graphical user interface of PredictionIO, from data collection, algorithm tuning and selection, model training and re-training to real-time prediction querying.
 H.2.4 [ Systems ]: Machine Learning Servers; H.5.2 [ User Interfaces ]; H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval  X  Information filtering Machine Learning Server; Algorithm Selection
Machine learning increasingly plays an important role in real-world software applications. More and more data is avaliable everyday from multiple sources, such as mobile and web applications. Some well known examples include digital assistants (Siri, Google Now); spam detection (Gmail); and product recommendation (Amazon). However, whilst indus-try giants such as Google, Apple and Amazon are investing heaviliy in machine learning development, the application of machine learning remains challenging for most software developers. Applying machine learning into software appli-cations for implementing predictive features is not straight-forward. It involves multiple, often quite complex, steps.
Several challenges lead to the steep learning curve asso-ciated with machine learning in practical software develop-ment. Fistly, there are a large number of data processing frameworks to evaluate, including: Hadoop [7], GraphLab [5] and Spark [8]. Secondly, many algorithms exist for each type of prediction task. For example, collaborative filter-ing for product recommendation alone has over a few dozen different algorithms. Selecting the right algorithm, also, set-ting and tuning their parameters provides a challenge. Fi-nally, having a scalable system that supports real-world soft-ware applications is very important. Development teams must put a tremendous effort into building scalable machine learning infrastructure to support predictive features. Such a system much support data storage, analysis, distributed processing (such as MapReduce), prediction result storage, caching and retrieval. Building a system to handle such a heavy-load often takes a lot of time, effort and resources.
PredictionIO is an integrated one-stop solution for soft-ware developers. It is a distributed and horizontally scal-able system for applying machine learning to real-world ap-plications, as described in the next section. Furthermore, it has been open sourced and is built upon existing open-source technologies such as the Apache Hadoop and Mahout projects.

The contribution of PredictionIO is twofold. Firstly, Pre-dictionIO presents a novel architecture integrating multi-ple machine learning processes into one scalable system. Secondly, PredictionIO provides a graphical user interface (GUI) for developers to evaluate, select, tune and deploy the appropriate learning algorithm for their software appli-cations.

The remainder of this paper is structured as follows: Sec-tion 2 outlines the system concept while Section 3 describes the system architecture. We present the demonstration sce-narios in Section 4 and conclude in Section 5.
A machine learning server works like a database server, the difference is that a database server performs search from data while a machine learning server performs prediction. PredictionIO serves as a single integrated system to provide a series of functionalities for building predictive applications: The system communicates with external software through an Application Programming Interface (API). It collects data and stores them in distributed databases. The system comes with several readily usable scalable learning algorithms al-ready built-in. Users of the system can tune hyperparame-ters either manually or automatically. The performance of these algorithms can be compared through offline evalua-tion using existing data based on pre-selected metrics. A GUI is provided to adjust and control these specific tasks. The processing tasks are scheduled and managed by a work-flow scheduler. The system also takes prediction queries and return results in real-time.
Figure 1 shows the conceptual architecture of our sys-tem. The system consists of an REST API Server layer which adopts the Representational State Transfer (REST) style standard [3]. This API layer serves as the communication bridge between software applications and the system. The main purposes of the API are to collect input data, receive queries and output prediction results. Software Development Kits (SDKs) of various programming languages are provided to ease the development effort of connecting software ap-plications to our API. These SDKs support asynchronous communication model [6] to make high performance con-nections. Through the API, input data such as user in-formation, item information and user behaviors are stored to distributed application databases. Whenever MapRe-duce processing is needed for certain functions, such as al-gorithm evaluation, hyperparameter tuning and predictive model training, the corresponding data will be transferred from application databases to the Hadoop Distributed File System (HDFS). The time and frequency of such data trans-fer action is controlled by the Workflow Scheduler . Predictive models are generated, or updated, by the selected learn-ing algorithm and stored in the Prediction Model Storage databases, which is a separate datastore designed for real-time querying. Software applications sent prediction query to the system through SDKs, which will then reach the API layer. API layer will perform real-time querying, filtering and sorting of data on the prediction model databases. The results will be returned to the software through the SDKs. The Admin Server manages engines and algorithms. Each engine represents one specific prediction task, such as item recommendation or classification. Each software applica-tion can make use of multiple engines. Under each engine, a number of algorithms are available to be evaluated and deployed. One algorithm has to be deployed for an engine to become functional. The Admin Server also controls the settings of the system. These settings determine how the system operates, for instance, what is the goal of an engine to be optimized, which algorithms should be evaluated and how, what are the constraints of automatic hyperparameter tuning and which algorithm is deployed for training the fi-nal predictive model. Users of the system interact with an secure Admin Web UI to customize these settings.
The performance of a learning algorithm is evaluated, and thus compared, by offline evaluation using a user-selected metric based on existing collected data. Each engine comes with some built-in metrics. For instance, the item recom-mendation engine in the system provides Mean Average Pre-cision (MAP@K) and Root Mean Squared Error (RMSE) metrics [4]. For MAP@K, the goal is to evaluate the aver-age precision of the predicted recommendation list for each consumer. Suppose a consumer has purchased n products in the test dataset and the system can recommend up to K products to this consumer. The average precision score at K (ap@K) is: ap @ K = P K k =1 P ( k ) /min ( n,K ) where P ( k ) = 0 if the consumer has not purchased the k-th prod-uct of the recommended list in the test dataset and P ( k ) = k if otherwise. The mean average precision for M con-sumers at K (MAP@K), is the average of the average pre-cision of each consumer, which is defined as: MAP @ K = P m =1 ap @ K/M . The higher the MAP@K score, the better the recommender system performs. For RMSE, it aims to measure the prediction error of preference scores directly. Recommender systems predict consumer preferences based on predictive models that are built for predicting preference scores of unseen consumer-product pairs. A higher prefer-ence score suggests that the consumer is more likely to pur-chase the product. The predicted scores will be evaluated against test sets that contain the actual preference given by consumers previously. RMSE can be used as the predic-tion error metric: RMSE = q 1 n P n i =1 ( r i  X   X  r i ) 2 , where n is the total number of pairs in a test set, r i is the true score which is always 1 in this case and  X  r i is the predicted score. The lower the RMSE score, the more accurate the predictive model is. Both RMSE and MAP@K are computed in the distributed Hadoop environment.
Most machine learning algorithms come with some tun-able hyperparameters such as learning rate and regulariza-tion. Selecting appropriate settings for these hyperparam-eters is crucial for the accuracy of prediction. Hyperpa-rameter tuning can be defined formally as an optimization problem itself, which can be written as: and the performance of a set of hyperparameter settings can be evaluated by a cost function: where C is the cost function, M is the modeling function,  X  is a hyperparameter set, x tr is the feature vectors of the training dataset, x v is the feature vectors of the validation dataset, x test is the feature vectors of the test dataset and y tr , y v and y test are the vectors of labels of training, valida-tion and test datasets respectively. Whilst users can set hy-perparameters manually through the GUI, the system pro-vides automatic tuning methods such as Random Search [1], which are computed in the distributed Hadoop environment.
The prediction results computed by MapReduce processes in batch mode are stored in the Predictive Model Storage , which is a non-relational database with non-unique index-ing on the user ID and prediction score fields and geospatial indexing on the location information of items. These indexes enable the REST API Server to perform real-time search-ing and ranking based on inputing queries. With the im-plementation of geospatial indexes, real-time location-aware predictive features can be built with the system.
Our system eases the challenges of building predictive soft-ware applications with machine learning. We demonstrate our system in two parts: 1) The GUI of the system; 2) Source code and live usage in software development.

The first part is a step-by-step navigation of our GUI to (i) create an engine, (ii) select multiple available learning algorithms within the engine, (iii) tune the hyperparameters of the these algorithms, some with manual tuning, some with automatic tuning and (iv) view an evaluation report in order to compare the performance of the selected algorithms, and finally (v) deploy the best performing algorithm. Figure 2 illustrates some of the graphical user interfaces. For this part of the demo, the small MovieLens dataset [2] which consists 1682 movies, 943 users and 100,000 ratings is imported into the system in advance. A small dataset is chosen purely to avoid lengthy processing time for demonstration purpose.
The second part is a showcase of using PredictionIO to build a location-aware restaurant recommendation applica-tion. We provide sample source code which illustrates core functionality including: importing new users; importing new restaurants; tracking user behaviors (such as ratings); and location-based prediction retrieval. The data input and out-put format will also be shown.
This paper has outlined the concept, system architecture and demonstration scenarios for PredictionIO, a distributed machine learning server for practical software development.
The contribution of PredictionIO is twofold. Firstly, Pre-dictionIO presents a novel architecture integrating multiple machine learning processes into one scalable system. Sec-ondly, PredictionIO provides a GUI for developers to eval-uate, select, tune and deploy the appropriate learning algo-rithm for their own software applications.

In the future, we hope to explore the possibility of pro-viding additional functionality, such as feature selection, and online evaluation, both important steps in the machine learn-ing process. Furthermore, support for (including non-parallel) extended or custom algorithms. We look forward to feed-back and contributions from academia and wider industry. [1] J. Bergstra and Y. Bengio. Random search for [2] DataSet. MovieLens: http://www.grouplens.org/. [3] R. T. Fielding. Architectural styles and the design of [4] J. L. Herlocker, J. A. Konstan, L. G. Terveen, and J. T. [5] Y. Low, J. Gonzalez, A. Kyrola, D. Bickson, [6] L. D. Paulson. Building rich web applications with [7] K. Shvachko, H. Kuang, S. Radia, and R. Chansler. [8] M. Zaharia, M. Chowdhury, M. J. Franklin, S. Shenker,
