 Online communities are valuable information sources where knowledge is accumulated by interactions between people. Search services provided by online community sites such as forums are often, however, quite poor. To address this, we investigate retrieval techniques that exploit the hierarchical thread structures in community sites. Since these struc-tures are sometimes not explicit or accurately annotated, we use structure discovery techniques. We then make use of thread structures in retrie val experiments. Our results show that using thread structures that have been accurately annotated can lead to significant improvements in retrieval performance compared to strong baselines.
 H.3.3 [ Information Search and Retrieval ]: Retrieval Models Algorithms, Measurement, Experimentation Online Community, forum search, thread structure
Online communities (e.g., newsgroups, BBS, and forums) are good information sources since knowledge shared by com-munities has accumulated for years. Search engines, how-ever, have generally overlooked these online community re-sources. Online community page search results returned from major search engines are often low quality. Internal search services that are provided by the forums are some-times even worse. One reason for this is that online forum pages are not the same as general web pages. Our goal is to design effective retrieval models that incorporate online forum properties so that the eff ectiveness of forum search can be improved.  X  A full version of this paper is available in [11].
Online community pages have many unique textual or structural features that distinguish them from general web pages. Generally, a forum has several sub-forums cover-ing high-level topic categories. Each sub-forum has many threads. A thread is a more focused topic-centric discus-sion unit and is composed of posts created by community members. This is an advantageous feature that encourages in-depth discussion, compared to general web pages.
In this paper, we first annotate thread structures which are based on interactions between community members, us-ing a learning to rank technique. Then, we exploit the thread structure to improve retrieva l performance for online com-munity search. Finally, we investigate the effects of threads on retrieval performance.

This paper is unique in combining two strands of work, namely thread structure disco very and retrieval models us-ing the structure. Each subtask has been explored sepa-rately in different research areas. The discovery of thread structures in online communities has been addressed by sev-eral researchers [6, 13, 2], but their work are limited to spe-cific domains or tasks, e.g., finding question-answer pairs. Retrieval models using multiple contexts or structures are frequently discussed in information retrieval literature [8, 9]. In the literature of social media search, various retrieval models are introduced for each different domain, e.g., blog [4, 10], newsgroup [14], email [12] and forum [5] search. Our work extends these results by exploiting more fine-grained thread structure.
A thread is started on some subject by an initiator. If they are interested in the subject of the thread, people post their opinions in reply posts. Because reply posts can reply to any preceding post, many branches (sub-threads) of discussion appear in a thread, and a thread ends up with a tree-shaped structure. We refer to thi sasathreadstructure.

Not all online communities, however, handle threads in the same manner. There are generally two ways that on-line communities maintain or display threads: flat-view and threaded-view. Flat-view systems, as their name implies, flatten structures of threads and show users all posts in a thread in chronological order. On the other hand, threaded-view systems allow a user to choose a preceding post to reply to, and display posts in structured views.

Currently, flat-view online community pages are still much more prevalent although some online communities emerge that use the threaded view, such as Slashdot 1 . One reason for this is that many online forums use popular publishing http://slashdot.org/ software such as phpBB 2 and vBulletin 3 that do not provide a threaded view as a default. Considering the small num-ber of online communities which support threaded views, we believe that techniques for converting flat-view threads to threaded-view threads are needed for online community search. We refer to this conversion as discovery of thread structures.

For simplicity and clarity, we assume that a thread struc-ture is shaped like a rooted tree in which the first post is a root, each child post has only one parent post, and no node is isolated. Under this assumption, when we are given a child post, we can find a reply relation by picking a most likely parent post from among all preceding posts. Constructing a thread structure with reply relations is trivial; thus, finally, our problem is reduced to finding reply relations.
A straightforward method that we can use to determine a reply relation between two posts is to directly look at the contents of the posts. If two posts address a similar topic, then the posts are likely to have a reply relation. As a simi-larity measure, we use a variation of the idf -weighted cosine similarity, the lnc.ltc term formula [1]. Now we consider which part of a post the similarity measure is applied to. Quotation vs. Original Content : Many online com-munity systems support an option to quote text from the preceding post when a post is uploaded. Such systems pro-vide split views of the quotation and the original content. Once we obtain the quotation and the original content sep-arately, we can consider various combinations for similarity measurements: i) similarity between the original contents of posts, ii) similarity between the original content of a parent candidate and a quotation of a child post, and iii) similarity between the full text of posts without separating the quota-tion from the original content.
A post is an utterance in an informal dialogue. In many cases, a post tends to be short and  X  X nstant X . Therefore, similarity features are not often enough to capture relations between posts. Thus, we need to use features which can describe context as well as content. Here we introduce sev-eral of these extrinsic features. See [11] for more detailed descriptions about the features.
 Location Prior : We assume that a relation between posts can be inferred from the locations of the posts in the chrono-logical time frame. Formally, we want to estimate P ( i 1 that is, the likelihood that a post with location index i parent post of a child post with location index i 2 .Weesti-mate this likelihood as a Gaussian Mixture by Expectation-Maximization [11]. We use this likelihood as a feature. Time Gap : A difference between posting times of two posts can be evidence of a relation between the posts. As a feature, we use a normalized time gap given by ( t 2  X  t 1 t ), where t 0 , t 1 ,and t 2 are the posting times of the first post, a parent candidate post, and a child post.
 Same Author : Assuming that turn-taking between speak-ers happens in a thread, the fact that two posts are written by the same author usually can be used as negative evidence http://www.phpbb.com/ http://www.vbulletin.com/ of a relation. We use an indicator of the same author rela-tionship as a feature.
 Author Reference : Users often refer to the author of the specific post to express an intention to reply to a specific post. Existence of an author reference between two posts can be used as a feature.
 Inferred Turn-taking :Letpost A , B and C be posted in this order in a thread. If post A and B have an author ref-erence and post A and C have a same author relation, then we can infer that post C replies to post B when assuming turn-taking with A  X  B  X  C . We use the relation between post B and C as a feature.
We consider the thread structure discovery task as a rank-ing task. If each child post is considered as a query, parent candidate posts are considered as documents to be retrieved. Since a post has only one parent post, we have only one rel-evant document for each query. We use the ranking SVM algorithm [7] to learn the relations.
We use three online community collections in order to evaluate techniques for thread structure discovery. See [11] for more detailed descriptions about the collections. World of Warcraft (WOW) forum :Wecrawledadis-cussion forum 4 of the World of Warcraft (WOW), an online game. This collection contains 16,274 threads. We manually annotated structures of randomly chosen 60 threads. Cancun forum : WecrawledtheCancunforum 5 of tripad-visor.com, a travel guide site. This collection contains 58,150 threads. The Cancun forum does not systemically support quotation in contrast to the WOW forum. We also manually annotated structures of randomly chosen 60 threads. W3C email archive : We used the  X  X ists X  sub-collection of the W3C collection from the TREC enterprise track [12]. To build an annotation set for thread structure discovery, we refined the thread structures by picking threads only com-posed of emails whose  X  X nreply-to X  tag matches a  X  X sg-id X  tag of any other post in the same thread. Finally, in this set, we obtained 1,635 threads which contain at least 3 emails.
We conducted experiments for thread structure discovery on each collection. For the WOW and Cancun collections, because the annotated data is small, we performed 10-fold cross validation. Since the W3C collection has enough data for training, i.e. 1,635 threads, we used 1,535 threads as training data and 100 threads as test data. We performed the paired randomization test with p&lt; 0 . 05 to test the statistical significance of improvements.

Table 1 shows the experimental results for the three col-lections. The techniques which use all features mentioned in the previous sections significantly outperform the base-lines which use a single intrinsic feature based on full text. Further, in all collections except the Cancun forum which doesn X  X  have features based on quotations, the achieved ac-curacy is very high, i.e. about 90%. Therefore, our approach shows good performance for thre ad structure discovery when informative features which we introduced are available. http://forums.worldofwarcraft.com/board.html http://www.tripadvisor.in/ShowForum-g150807-i8 Table 1: Thread structure discovery results. A num-ber is a recall score, i.e. how many reply relations are correctly detected.  X  X aseline X  uses only content similarity based on full text.  X  X ull features X  uses all intrinsic and extrinsic features. All improvements on the baseline are statistically significant.
In this section, we introduce approaches to improve re-trieval performance using thread structures discovered by the algorithms introduced in Section 2. A thread contains different self-contained sub-structures. We call a sub-structure a context. Figure 1 presents four contexts. The first context is the coarsest-grained context, i.e. the thread itself. The second context is the finest-grained context, i.e. a post. While we can use thread con-texts to get a general picture about the topic addressed by a thread, we can use post contexts to get detailed information. The third context is a pair defined by a reply relation. This context is directly extracted from a relation discovered by thread structure discovery algorithms. A pair context con-tains an interaction between two users such as a question-answer pair. The fourth context contains all posts in a path fromtherootnodetoaleafnode. Werefertothiscontextas a dialogue because by looking at the context we can follow a conversation flow, e.g., how the discussion was started, what issue was discussed, and what the conclusion was. Note that while thread and post contexts are given, pair and dialogue contexts must be extracte d from a thread structure.
We address two retrieval tasks using multiple contexts: thread search and post search. Since posts in casual online forums such as WOW or Cancun are usually too short to provide information on their own, people are likely to want to find relevant threads rather than posts. On the other hand, emails (posts) in a technical email archive like the W3C archive are often long enough to deliver information. In that case, a more suitable task is to find relevant posts.
For these two tasks, we introduce retrieval techniques based on a language modeling approach to retrieval [3]. In our work, the query likelihood P ( Q | D ) is estimated by the Dirich-let smoothed unigram language model.
 Thread Search
The simplest approach to thread search is to consider a thread as a document [4, 10]. We refer to this as global representation (GR) and estimate  X  GR ( Q, T i )= P ( Q | where  X  is a ranking function and P ( Q | T i ) is a query likeli-hood score of query Q for thread T i .

A drawback of GR is that relevant local contexts can be dominated by non-relevant contexts. To tackle this draw-back, we consider the pseudo-cluster selection (PCS) [10]. Pseudo-cluster selection retrieves the top N local contexts and aggregates local contexts in the ranked list according to which thread the local context comes from. We call the lo-cal context group a pseudo-cluster. Finally, relevant threads are located according to a geometric mean of scores of the top K local contexts in a pseudo-cluster as follows: where P ( Q | L ij ) is a query likelihood score based on the language model of local context L ij in thread T i .PCShas proved effective for thread search based on post contexts [5].
PCS reflects how much relevant information exists locally in a thread whereas GR reflects the cohesiveness of the thread. Therefore, we consi der a combination of GR and where  X  is a weight parameter.
 Post Search
If we have post contexts only, a post language model is estimated by smoothing with the collection. If we know that post D belongs to a thread T , then we can do two-stage smoothing as done in cluster-based retrieval [8].
Further, if we have another context X z , i.e. a pair context or a dialogue context, then we can add one more smoothing stage. However, in contrast to thread contexts, a post can belong to multiple pair contexts or dialogue contexts. We compute a geometric mean to combine language models of the contexts as follows: P z ( w | D )=(1  X   X  1 ) P ML ( w | D )+  X  1 ((1  X   X  2 ) P where P ML (  X  ) is a maximum likelihood estimator and Z is the number of local contexts which contain D .
Since the W3C collection has been used for the email dis-cussion search task of the TREC enterprise track, there is a relevance judgment set provided by TREC [12]. On the other hand, we had to make our own relevance judgments for the other two collections. For each collection, we manu-ally created queries from randomly chosen 30 popular thread titles. We created relevance judgment pools using retrieval techniques in Section 3.2 and judged them using a ternary scale. In total, we obtained 2,591 judgments and 2,401 judg-ments for the WOW and the Cancun collection, respectively.
To extract contexts, we discovered structures for all threads in each collection using the SVM classifier trained with all features in Section 2.

To evaluate performance, we performed 10-fold cross vali-dation. The parameters were exhaustively searched to maxi-mize NDCG@10 for thread search and MAP for post search. We performed the paired randomization test with p&lt; 0 . 05 to test the statistical significance of improvements.
Table 2 shows results of thread search on the WOW and the Cancun collection.  X  X hread X  means GR based on a thread context.  X  X ost X ,  X  X air X  and  X  X ialogue X  mean PCS based on each context.  X + Thread X  means a combination of GR and PCS. The top three rows which do not need thread struc-tures are considered as baselines.

In the WOW collection, techniques based on dialogue con-texts show better or at least comparable performance to Post+Thread 0.4519 0.3875 0.4942 0.2896 Pair+Thread 0.4447  X  X  0.3885  X  X  0.4897  X  0.2857  X  Dialogue+Thread 0.4823  X  X  X  0.4073  X  X  X  0.5141  X  X  0.2973  X  Table 2: Retrieval Performance on the WOW and the Cancun collection (Thread Search). The super-scripts  X  ,  X  and  X  indicate statistically significant improvements on  X  X hread X ,  X  X ost X ,  X  X ost + Thread X , respectively.
 Table 3: Retrieval performance on the W3C collec-tion (Post Search). The superscripts  X  and  X  indi-cate statistically significant improvements on  X  X ost X  and  X  X ost + Thread X , respectively. techniques based on the other contexts. Particularly, when using dialogue and thread contexts together, the best perfor-mance is achieved, and the improvements over all baselines are statistically significant. This demonstrates that a perfor-mance improvement in thread search can be achieved using thread structures, particularly, dialogue contexts.
In the Cancun collection, similar trends are shown, that is, dialogue context-based search and the combination of GR and PCS consistently present better performance than the others. However, the improvements are not always statisti-cally significant. This is presumed to be due to the relative inaccuracy of thread structure discovery in the Cancun col-lection. To justify this assumption, we investigated retrieval performance based on inaccurate thread structures in the WOW collection. To simulate inaccurate discovery, we used  X  X aseline X  in Table 1 and applied the best retrieval tech-nique, i.e.  X  X ialogue+Thread X . Then, NDCG@10 and MAP are 0.4651 and 0.3869, respectively. This performance is not only worse than the performance based on accurate struc-ture discovery but also fails to show significant differences over the baseline  X  X ost+Thread X . This shows that the ac-curacy of thread structure discovery can be critical in our retrieval framework.

Table 3 shows the results of post search on the W3C col-lection. Each row represents which contexts are used for smoothing. The one-stage and two-stage smoothing at the top two rows, which use post contexts and threads contexts only, do not require thread structures. Therefore, we con-sider them as baselines. For both the pair context and the di-alogue context, addition of the thread context for smoothing achieved statistically significant improvements. This shows that contexts based on thread structure are also helpful for post search.
In this paper, we investigated whether search for commu-nity sites such as forums could be improved using thread structure. Our results show that threads can often be ac-curately identified using our approach. Further, we showed that combinations of multiple thread contexts can achieve significant retrieval effectiveness improvements over strong baselines.
 Acknowledgments This work was supported in part by the Center for Intelligent Information Retrieval (CIIR) and in part by NSF grant #IIS-0711348. Any opini ons, findings and conclusions or recommendations expressed in this ma-terial are the authors X  and do not necessarily reflect those of the sponsor.
