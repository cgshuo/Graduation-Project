 Tree adjoining grammars [TAG] (Joshi et al., 1969; Joshi et al., 1975) are a mildly context-sensitive grammar formalism that can handle certain non-local dependencies (Kuhlmann and Mohl, 2006), which occur in several natural languages. A good overview on TAG, their formal properties, their lin-guistic motivation, and their applications is pre-sented by Joshi and Schabes (1992) and Joshi and Schabes (1997), in which also strong lexicalization is discussed. In general, lexicalization is the process of transforming a grammar into an equivalent one (potentially expressed in another formalism) such that each production contains a lexical item (or an-chor). Each production can then be viewed as lex-ical information on its anchor. It demonstrates a syntactical construction in which the anchor can oc-cur. Since a lexical item is a letter of the string alphabet, each production of a lexicalized gram-mar produces at least one letter of the generated string. Consequently, lexicalized grammars offer significant parsing benefits (Schabes et al., 1988) as the number of applications of productions (i.e., derivation steps) is clearly bounded by the length of the input string. In addition, the lexical items in the productions guide the production selection in a derivation, which works especially well in sce-narios with large alphabets. 1 The G REIBACH nor-mal form (Hopcroft et al., 2001; Blum and Koch, 1999) offers those benefits for context-free gram-mars [CFG], but it changes the parse trees. Thus, we distinguish between two notions of equivalence: Weak equivalence (Bar-Hillel et al., 1960) only re-quires that the generated string languages coincide, whereas strong equivalence (Chomsky, 1963) re-quires that even the generated tree languages coin-cide. Correspondingly, we obtain weak and strong lexicalization based on the required equivalence.
The G REIBACH normal form shows that CFG can weakly lexicalize themselves, but they cannot strongly lexicalize themselves (Schabes, 1990). It is a prominent feature of tree adjoining grammars that they can strongly lexicalize CFG (Schabes, 1990), 2 and it was claimed and widely believed that they can strongly lexicalize themselves. Recently, Kuhlmann and Satta (2012) proved that TAG actually can-not strongly lexicalize themselves. In fact, they prove that TAG cannot even strongly lexicalize the weaker tree insertion grammars (Schabes and Wa-ters, 1995). However, TAG can weakly lexicalize themselves (Fujiyoshi, 2005).
Simple (i.e., linear and nondeleting) context-free tree grammars [CFTG] (Rounds, 1969; Rounds, 1970) are a more powerful grammar formalism than TAG (M  X  onnich, 1997). However, the monadic vari-ant is strongly equivalent to a slightly extended ver-sion of TAG, which is called non-strict TAG (Kepser and Rogers, 2011). A G REIBACH normal form for a superclass of CFTG (viz., second-order abstract cat-egorial grammars) was discussed by Kanazawa and Yoshinaka (2005) and Yoshinaka (2006). In particu-lar, they also demonstrate that monadic CFTG can strongly lexicalize regular tree grammars (G  X  ecseg and Steinby, 1984; G  X  ecseg and Steinby, 1997).
CFTG are weakly equivalent to the simple macro grammars of Fischer (1968), which are a notational variant of the well-nested linear context-free rewrit-ing systems (LCFRS) of Vijay-Shanker et al. (1987) and the well-nested multiple context-free grammars (MCFG) of Seki et al. (1991). 3 Thus, CFTG are mildly context-sensitive since their generated string languages are semi-linear and can be parsed in poly-nomial time (G  X  omez-Rodr  X   X guez et al., 2010).
In this contribution, we show that CFTG can strongly lexicalize TAG and also themselves, thus answering the second question in the conclusion of Kuhlmann and Satta (2012). This is achieved by a series of normalization steps (see Section 4) and a final lexicalization step (see Section 5), in which a lexical item is guessed for each produc-tion that does not already contain one. This item is then transported in an additional argument until it is exchanged for the same item in a terminal pro-duction. The lexicalization is effective and increases the maximal rank (number of arguments) of the non-terminals by at most 1 . In contrast to a transforma-tion into G REIBACH normal form, our lexicalization does not radically change the structure of the deriva-tions. Overall, our result shows that if we consider only lexicalization, then CFTG are a more natural generalization of CFG than TAG. We write [ k ] for the set { i  X  N | 1  X  i  X  k } , where N denotes the set of nonnegative integers. We use a fixed countably infinite set X = { x 1 ,x 2 ,... } of (mutually distinguishable) variables, and we let X k = { x i | i  X  [ k ] } be the first k variables from X for every k  X  N . As usual, an alphabet  X  is a finite set of symbols, and a ranked alphabet ( X  , rk) adds a ranking rk :  X   X  N . We let  X  k = {  X  | rk(  X  ) = k } be the set of k -ary symbols. Moreover, we just write  X  for the ranked alphabet ( X  , rk) . 4 We build trees over the ranked alphabet  X  such that the nodes are labeled by elements of  X  and the rank of the node label determines the number of its children. In addi-tion, elements of X can label leaves. Formally, the set T  X  ( X ) of  X  -trees indexed by X is the smallest set T such that X  X  T and  X  ( t 1 ,...,t k )  X  T for all k  X  N ,  X   X   X  k , and t 1 ,...,t k  X  T . 5
We use positions to address the nodes of a tree. A position is a sequence of nonnegative integers indi-cating successively in which subtree the addressed node is. More precisely, the root is at position  X  and the position ip with i  X  N and p  X  N  X  refers to the position p in the i th direct subtree. Formally, the set pos( t )  X  N  X  of positions of a tree t  X  T  X  ( X ) is defined by pos( x ) = {  X  } for x  X  X and for all symbols  X   X   X  k and t 1 ,...,t k  X  T  X  ( X ) . The positions are indicated as superscripts of the la-bels in the tree of Figure 1. The subtree of t at posi-tion p  X  pos( t ) is denoted by t | p , and the label of t at position p by t ( p ) . Moreover, t [ u ] p denotes the tree obtained from t by replacing the subtree at p by the tree u  X  T  X  ( X ) . For every label set S  X   X  , we let pos S ( t ) = { p  X  pos( t ) | t ( p )  X  S } be the S -labeled positions of t . For every  X   X   X  , we let pos  X  ( t ) = pos {  X  } ( t ) . The set C  X  ( X k tains all trees t of T  X  ( X ) , in which every x  X  X k occurs exactly once and pos X \ X u ,...,u k  X  T  X  ( X ) , the first-order substitution t [ u 1 ,...,u k ] is inductively defined by for every i  X  N and t =  X  ( t 1 ,...,t k ) with  X   X   X  k and t 1 ,...,t k  X  T  X  ( X ) . First-order substitution is illustrated in Figure 1.
In first-order substitution we replace leaves (ele-ments of X ), whereas in second-order substitution we replace an internal node (labeled by a symbol of  X  ). Let p  X  pos( t ) be such that t ( p )  X   X  k , and let u  X  C  X  ( X k ) be a tree in which the vari-ables X k occur exactly once. The second-order sub-stitution t [ p  X  u ] replaces the subtree at position p by the tree u into which the children of p are (first-order) substituted. In essence, u is  X  X olded X  into t at position p . Formally, t [ p  X  u ] = t u [ t | 1 ,...,t | Given P  X  pos  X  ( t ) with  X   X   X  k , we let t [ P  X  u ] be t [ p 1  X  u ]  X  X  X  [ p n  X  u ] , where P = { p 1 ,...,p and p 1 &gt;  X  X  X  &gt; p n in the lexicographic order. Second-order substitution is illustrated in Figure 2. G  X  ecseg and Steinby (1997) present a detailed intro-duction to trees and tree languages. In this section, we recall linear and nondeleting context-free tree grammars [CFTG] (Rounds, 1969; Rounds, 1970). The property  X  X inear and nondelet-ing X  is often called  X  X imple X . The nonterminals of regular tree grammars only occur at the leaves and are replaced using first-order substitution. In con-trast, the nonterminals of a CFTG are ranked sym-bols, can occur anywhere in a tree, and are replaced using second-order substitution. 6 Consequently, the nonterminals N of a CFTG form a ranked alpha-bet. In the left-hand sides of productions we write A ( x 1 ,...,x k ) for a nonterminal A  X  N k to indi-cate the variables that hold the direct subtrees of a particular occurrence of A .
 Definition 1. A (simple) context-free tree gram-mar [CFTG] is a system ( N,  X  ,S,P ) such that  X  N is a ranked alphabet of nonterminal symbols ,  X   X  is a ranked alphabet of terminal symbols , 7  X  S  X  N 0 is the start nonterminal of rank 0 , and  X  P is a finite set of productions of the form
The components ` and r are called left-and right-hand side of the production `  X  r in P . We say that it is an A -production if ` = A ( x 1 ,...,x k ) . The right-hand side is simply a tree using terminal and nonterminal symbols according to their rank. More-over, it contains all the variables of X k exactly once. Let us illustrate the syntax on an example CFTG. We use an abstract language for simplicity and clarity. We use lower-case Greek letters for terminal sym-bols and upper-case Latin letters for nonterminals. Example 2. As a running example, we consider the CFTG G ex = ( { S (0) ,A (2) } ,  X  ,S,P ) where  X  P contains the productions (see Figure 3): 8
We recall the (term) rewrite semantics (Baader and Nipkow, 1998) of the CFTG G = ( N,  X  ,S,P ) . Since G is simple, the actual rewriting strategy is irrelevant. The sentential forms of G are sim-ply SF( G ) = T N  X   X  ( X ) . This is slightly more gen-eral than necessary (for the semantics of G ), but the presence of variables in sentential forms will be use-ful in the next section because it allows us to treat right-hand sides as sentential forms. In essence in a rewrite step we just select a nonterminal A  X  N and an A -production  X   X  P . Then we replace an occur-rence of A in the sentential form by the right-hand side of  X  using second-order substitution.
 Definition 3. Let  X , X   X  SF( G ) be sentential forms. Given an A -production  X  = `  X  r in P and an A -labeled position p  X  pos A (  X  ) in  X  , we write  X   X   X ,p G  X  [ p  X  r ] . If there exist  X   X  P and p  X  pos(  X  ) such that  X   X   X ,p G  X  , then  X   X  G  X  . 9 The semantics  X  G is the reflexive, transitive closure of  X  G . Two CFTG G 1 and G 2 are (strongly) equivalent if J cerned with strong equivalence (Chomsky, 1963). Although we recall the string corresponding to a tree later on (via its yield), we will not investigate weak equivalence (Bar-Hillel et al., 1960).
 Example 4. Reconsider the CFTG G ex of Exam-ple 2. A derivation to a tree of T  X  is illustrated in Figure 4. It demonstrates that the final tree in that derivation is in the language
Finally, let us recall the relation between CFTG and tree adjoining grammars [TAG] (Joshi et al., 1969; Joshi et al., 1975). Joshi et al. (1975) show that TAG are special footed CFTG (Kepser and Rogers, 2011), which are weakly equivalent to monadic CFTG, i.e., CFTG whose nonterminals have rank at most 1 (M  X  onnich, 1997; Fujiyoshi and Kasai, 2000). Kepser and Rogers (2011) show the strong equivalence of those CFTG to non-strict TAG, which are slightly more powerful than tradi-tional TAG. In general, TAG are a natural formalism to describe the syntax of natural language. 10 In this section, we first recall an existing normal form for CFTG. Then we introduce the property of finite ambiguity in the spirit of (Schabes, 1990; Joshi and Schabes, 1992; Kuhlmann and Satta, 2012), which allows us to normalize our CFTG even fur-ther. A major tool is a simple production elimination scheme, which we present in detail. From now on, let G = ( N,  X  ,S,P ) be the considered CFTG.
The CFTG G is start-separated if pos S ( r ) =  X  for every production `  X  r  X  P . In other words, the start nonterminal S is not allowed in the right-hand sides of the productions. It is clear that each CFTG can be transformed into an equivalent start-separated CFTG. In such a CFTG we call each production of the form S  X  r initial . From now on, we assume, without loss of generality, that G is start-separated. Example 5. Let G ex = ( N,  X  ,S,P ) be the CFTG of Example 2. An equivalent start-separated CFTG is G 0 ex = ( { S 0 (0) } X  N,  X  ,S 0 ,P  X  X  S 0  X  S } ) .
We start with the growing normal form of Stamer and Otto (2007) and Stamer (2009). It requires that the right-hand side of each non-initial production contains at least two terminal or nonterminal sym-bols. In particular, it eliminates projection produc-tions A ( x 1 )  X  x 1 and unit productions, in which the right-hand side has the same shape as the left-hand side (potentially with a different root symbol and a different order of the variables).
 Definition 6. A production `  X  r is growing if | pos N  X   X  ( r ) |  X  2 . The CFTG G is growing if all of its non-initial productions are growing.
 The next theorem is Proposition 2 of (Stamer and Otto, 2007). Stamer (2009) provides a full proof. Theorem 7. For every start-separated CFTG there exists an equivalent start-separated, growing CFTG. Example 8. Let us transform the CFTG G 0 ex of Ex-ample 5 into growing normal form. We obtain the P 00 contains S 0  X  S and for each  X   X  X   X , X  }
From now on, we assume that G is growing. Next, we recall the notion of finite ambiguity from (Sch-abes, 1990; Joshi and Schabes, 1992; Kuhlmann and Satta, 2012). 11 We distinguish a subset  X   X   X  0 of lexical symbols, which are the symbols that are pre-served by the yield mapping. The yield of a tree is  X   X 
S a string of lexical symbols. All other symbols are simply dropped (in a pre-order traversal). Formally, yd  X  : T  X   X   X  with  X   X   X  k and t 1 ,...,t k  X  T  X  yd  X  ( t ) = Definition 9. The tree language L  X  T  X  has finite  X  -ambiguity if { t  X  L | yd  X  ( t ) = w } is finite for every w  X   X   X  .

Roughly speaking, we can say that the set L has finite  X  -ambiguity if each w  X   X   X  has finitely many parses in L (where t is a parse of w if yd  X  ( t ) = w ). Our example CFTG G ex is such that {  X , X  } -ambiguity (because  X  1 =  X  ).

In this contribution, we want to (strongly) lexical-ize CFTG, which means that for each CFTG G such that struct an equivalent CFTG such that each non-initial production contains at least one lexical symbol. This is typically called strong lexicalization (Sch-abes, 1990; Joshi and Schabes, 1992; Kuhlmann and Satta, 2012) because we require strong equiva-lence. 12 Let us formalize our lexicalization property. Definition 10. The production `  X  r is  X  -lexical-ized if pos  X  ( r ) 6 =  X  . The CFTG G is  X  -lexicalized if all its non-initial productions are  X  -lexicalized.
Note that the CFTG G 00 ex of Example 8 is not yet {  X , X  } -lexicalized. We will lexicalize it in the next section. To do this in general, we need some auxil-iary normal forms. First, we define our simple pro-duction elimination scheme, which we will use in the following. Roughly speaking, a non-initial A -production such that A does not occur in its right-hand side can be eliminated from G by applying it in all possible ways to occurrences in right-hand sides of the remaining productions.
 Definition 11. Let  X  = A ( x 1 ,...,x k )  X  r in P be a non-initial production such that pos A ( r ) =  X  . For every other production  X  0 = ` 0  X  r 0 in P and J  X  pos A ( r 0 ) , let  X  0 J = ` 0  X  r 0 [ J  X  r ] . The CFTG Elim( G, X  ) = ( N,  X  ,S,P 0 ) is such that
In particular,  X  0  X  =  X  0 for every production  X  0 , so every production besides the eliminated produc-tion  X  is preserved. We obtained the CFTG G 00 ex of Example 8 as Elim( G 0 ex ,A ( x 1 ,x 2 )  X   X  ( x 1 ,x 2 from G 0 ex of Example 5.
 Lemma 12. The CFTG G and G 0  X  = Elim( G, X  ) are equivalent for every non-initial A -production  X  = `  X  r in P such that pos A ( r ) =  X  .
 Proof. Clearly, every single derivation step of G 0  X  can be simulated by a derivation of G using poten-tially several steps. Conversely, a derivation of G can be simulated directly by G 0  X  except for deriva-tion steps  X   X ,p G using the eliminated production  X  . Since S 6 = A , we know that the nonterminal at po-sition p was generated by another production  X  0 . In the given derivation of G we examine which non-terminals in the right-hand side of the instance of  X  0 were replaced using  X  . Let J be the set of positions corresponding to those nonterminals (thus p  X  J ). Then instead of applying  X  0 and potentially several times  X  , we equivalently apply  X  0 J of G 0  X  .
In the next normalization step we use our pro-duction elimination scheme. The goal is to make sure that non-initial monic productions (i.e., produc-tions of which the right-hand side contains at most one nonterminal) contain at least one lexical sym-bol. We define the relevant property and then present the construction. A sentential form  X   X  SF( G ) is monic if | pos N (  X  ) |  X  1 . The set of all monic sentential forms is denoted by SF  X  1 ( G ) . A pro-duction `  X  r is monic if r is monic. The next construction is similar to the simultaneous removal of epsilon-productions A  X   X  and unit productions A  X  B for context-free grammars (Hopcroft et al., 2001). Instead of computing the closure under those productions, we compute a closure under non- X  -lexicalized productions.
 Theorem 13. If there exists an equivalent CFTG such that all its non-initial monic productions are  X  -lexicalized. Proof. Without loss of generality, we assume that G is start-separated and growing by Theorem 7. Moreover, we assume that each nonterminal is use-ful. For every A  X  N with A 6 = S , we compute all monic sentential forms without a lexical sym-bol that are reachable from A ( x 1 ,...,x k ) , where k = rk( A ) . Formally, let
 X  A = {  X   X  SF  X  1 ( G ) | A ( x 1 ,...,x k )  X  + G 0  X  } , where  X  + G 0 is the transitive closure of  X  G 0 and the CFTG G 0 = ( N,  X  ,S,P 0 ) is such that P 0 contains exactly the non- X  -lexicalized productions of P . The set  X  A is finite since only finitely many non- X  -lexicalized productions can be used due to the finite  X  -ambiguity of tial form in  X  A contains A for the same reason and the fact that G is growing. We construct the CFTG G 1 = ( N,  X  ,S,P  X  P 1 ) such that P 1 = { A ( x 1 ,...,x k )  X   X  | A  X  N k , X   X   X  A } . Clearly, G and G 1 are equivalent. Next, we elimi-nate all productions of P 1 from G 1 using Lemma 12 to obtain an equivalent CFTG G 2 with the produc-tions P 2 . In the final step, we drop all non- X  -lexicalized monic productions of P 2 to obtain the CFTG G , in which all monic productions are  X  -lexicalized. It is easy to see that G is growing, start-separated, and equivalent to G 2 .

The CFTG G 00 ex only has {  X , X  } -lexicalized non-initial monic productions, so we use a new example. Example 14. Let ( { S (0) ,A (1) ,B (1) } ,  X  ,S,P ) be the CFTG such that  X  = {  X  (2) , X  (0) , X  (0) } and A x P contains the productions This CFTG G ex2 is start-separated and growing. Moreover, all its productions are monic, and is finitely  X  -ambiguous for the set  X  = {  X  } of lexical symbols. Then the productions (3) are non-initial and not  X  -lexicalized. So we can run the construction in the proof of Theorem 13. The rel-evant derivations using only non- X  -lexicalized pro-ductions are shown in Figure 5. We observe that |  X 
A | = 2 and |  X  B | = 1 , so we obtain the CFTG ( { S (0) ,B (1) } ,  X  ,S,P 0 ) , where P 0 contains 13
We now do one more normalization step before we present our lexicalization. We call a production `  X  r terminal if r  X  T  X  ( X ) ; i.e., it does not con-tain nonterminal symbols. Next, we show that for each CFTG G such that we can require that each non-initial terminal produc-tion contains at least two occurrences of  X  -symbols. Theorem 15. If there exists an equivalent CFTG ( N,  X  ,S,P 0 ) such that | pos  X  ( r ) |  X  2 for all its non-initial terminal productions `  X  r  X  P 0 .
 Proof. Without loss of generality, we assume that G is start-separated and growing by Theorem 7. Moreover, we assume that each nonterminal is use-ful and that each of its non-initial monic produc-tions is  X  -lexicalized by Theorem 13. We obtain the desired CFTG by simply eliminating each non-initial terminal production `  X  r  X  P such that | pos  X  ( r ) | = 1 . By Lemma 12 the obtained CFTG is equivalent to G . The elimination process termi-nates because a new terminal production can only be constructed from a monic production and a terminal production or several terminal productions, but those combinations already contain two occurrences of  X  -symbols since non-initial monic productions are al-ready  X  -lexicalized.
 Example 16. Reconsider the CFTG obtained in Ex-ample 14. Recall that  X  = {  X  } . Production (4) is the only non-initial terminal production that violates the requirement of Theorem 15. We eliminate it and obtain the CFTG with the productions In this section, we present the main lexicalization step, which lexicalizes non-monic productions. We assume that malized according to the results of Section 4: no useless nonterminals, start-separated, growing (see Theorem 7), non-initial monic productions are  X  -lexicalized (see Theorem 13), and non-initial termi-nal productions contain at least two occurrences of  X  -symbols (see Theorem 15).

The basic idea of the construction is that we guess a lexical symbol for each non- X  -lexicalized produc-tion. The guessed symbol is put into a new param-eter of a nonterminal. It will be kept in the pa-rameter until we reach a terminal production, where we exchange the same lexical symbol by the pa-rameter. This is the reason why we made sure that we have two occurrences of lexical symbols in the terminal productions. After we exchanged one for a parameter, the resulting terminal production is still  X  -lexicalized. Lexical items that are guessed for distinct (occurrences of) productions are trans-ported to distinct (occurrences of) terminal produc-tions [cf. Section 3 of (Potthoff and Thomas, 1993) and page 346 of (Hoogeboom and ten Pas, 1997)]. Theorem 17. For every CFTG G such that has finite  X  -ambiguity there exists an equivalent  X  -lexicalized CFTG.
 Proof. We can assume that G = ( N,  X  ,S,P ) has the properties mentioned before the theorem without loss of generality. We let N 0 = N  X   X  be a new set of nonterminals such that rk(  X  A, X   X  ) = rk( A ) + 1 for every A  X  N and  X   X   X  . Intuitively,  X  A, X   X  represents the nonterminal A , which has the lexical symbol  X  in its last (new) parameter. This parameter is handed to the (lexicographically) first nonterminal in the right-hand side until it is resolved in a termi-nal production. Formally, for each right-hand side r  X  T N  X  N 0  X   X  ( X ) such that pos N ( r ) 6 =  X  (i.e., it contains an original nonterminal), each k  X  N , and each  X   X   X  , let r  X ,k and r  X  be such that where p is the lexicographically smallest element of pos N ( r ) and r | p = B ( r 1 ,...,r n ) with B  X  N and r 1 ,...,r n  X  T N  X  N 0  X   X  ( X ) . For each non-terminal A -production  X  = `  X  r in P let where k = rk( A ) . This construction is illustrated in Figure 6. Roughly speaking, we select the lexi-cographically smallest occurrence of a nonterminal in the right-hand side and pass the lexical symbol  X  in the extra parameter to it. The extra parameter is used in terminal productions, so let  X  = `  X  r in P be a terminal A -production. Then we define where p is the lexicographically smallest element of pos  X  ( r ) and k = rk( A ) . This construction is illustrated in Figure 7. With these productions we obtain the CFTG G 0 = ( N  X  N 0 ,  X  ,S, P ) , where P = P  X  P 0  X  P 00 and P It is easy to prove that those new productions man-age the desired transport of the extra parameter if it holds the value indicated in the nonterminal.
Finally, we replace each non-initial non- X  -lexi-calized production in G 0 by new productions that guess a lexical symbol and add it to the new parame-ter of the (lexicographically) first nonterminal of N in the right-hand side. Formally, we let of which P 000 is added to the productions. Note that each production `  X  r  X  P nil contains at least one occurrence of a nonterminal of N (because all monic productions of G are  X  -lexicalized). Now all non-initial non- X  -lexicalized productions from P can be removed, so we obtain the CFTG G 00 , which is given by ( N  X  N 0 ,  X  ,S,R ) with R = ( P  X  P 000 ) \ P nil . It can be verified that G 00 is  X  -lexicalized and equiva-lent to G (using the provided argumentation).
Instead of taking the lexicographically smallest element of pos N ( r ) or pos  X  ( r ) in the previous proof, we can take any fixed element of that set. In the definition of P 0 we can change pos N ( r ) 6 =  X  to | pos  X  ( r ) |  X  1 , and simultaneously in the defini-tion of P 00 change pos N ( r ) =  X  to | pos  X  ( r ) |  X  2 . With the latter changes the guessed lexical item is only transported until it is resolved in a production with at least two lexical items.
 Example 18. For the last time, we consider the CFTG G 00 ex of Example 8. We already illustrated the parts of the construction of Theorem 17 in Figures 6 and 7. The obtained {  X , X  } -lexicalized CFTG has the following 25 productions for all  X , X  0  X  X   X , X  } : where A  X  =  X  A, X   X  and S  X  =  X  S, X   X  .

If we change the lexicalization construction as indicated before this example, then all the produc-tions S  X  ( x 1 )  X  A  X  (  X  0 , X  0 ,x 1 ) are replaced by the productions S  X  ( x 1 )  X  A ( x 1 , X  ) . Moreover, the productions (5) can be replaced by the productions the nonterminals A  X  and their productions can be re-moved, which leaves only 15 productions.
 For k  X  N , let CFTG ( k ) be the set of those CFTG whose nonterminals have rank at most k . Since the normal form constructions preserve the nonterminal rank, the proof of Theorem 17 shows that CFTG ( k ) are strongly lexicalized by CFTG ( k +1) . Kepser and Rogers (2011) show that non-strict TAG are strongly equivalent to CFTG (1) . Hence, non-strict TAG are strongly lexicalized by CFTG (2) .

It follows from Section 6 of Engelfriet et al. (1980) that the classes CFTG ( k ) with k  X  N in-duce an infinite hierarchy of string languages, but it remains an open problem whether the rank increase in our lexicalization construction is necessary.
G  X  omez-Rodr  X   X guez et al. (2010) show that well-nested LCFRS of maximal fan-out k can be parsed in time O ( n 2 k +2 ) , where n is the length of the in-put string w  X   X   X  . From this result we conclude that CFTG ( k ) can be parsed in time O ( n 2 k +4 ) , in the sense that we can produce a parse tree t that is generated by the CFTG with yd  X  ( t ) = w . It is not clear yet whether lexicalized CFTG ( k ) can be parsed more efficiently in practice.
