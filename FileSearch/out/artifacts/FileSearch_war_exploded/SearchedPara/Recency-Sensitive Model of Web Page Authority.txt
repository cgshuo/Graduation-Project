 Traditional link-based web ranking algorithms run on a sin-gle web snapshot without concern of the dynamics of web pages and links. In particular, the correlation of web pages freshness and their classic PageRank is negative (see [11]). For this reason, in recent years a number of authors intro-duce some algorithms of PageRank actualization. We in-troduce our new algorithm called Actual PageRank, which generalizes some previous approaches and therefore provides better capability for capturing the dynamics of the Web. To the best of our knowledge we are the first to conduct rank-ing evaluations of a fresh-aware variation of PageRank on a large data set. The results demonstrate that our method achieves more relevant and fresh results than both classic PageRank and its  X  X resh X  modifications.
 Categories and Subject Descriptions: H.3.3 [Informa-tion Storage and Retrieval]: Information Search and Re-trieval  X  Retrieval models General Terms: Algorithms, Experimentation, Performance Keywords: PageRank, freshness, link-based ranking, web search
Traditional link analysis algorithms such as PageRank [7] deal with the static link structure, thereby missing the tem-poral aspect of the Web. Besides, newer pages are probably more relevant to recency sensitive queries than the older ones and therefore the temporal aspect of document relevance re-lates to the quality of a ranking algorithm. With regard to web pages devoted to periodical events such as news, gov-ernment law issues, sport reviews or conference homepages, a surfer looks for content likely related to newer facts and events. However, classical methods such as PageRank of-ten assign higher score to older pages since older pages have more time to attract in-links than newer ones. By this rea-son the problem of constructing  X  X resh X  PageRank should be of great interest for commercial web search engines.
A  X  X resh X  PageRank score w ( p ) for any page p should sat-isfy the following natural properties. 1) Dependence on in-degree of a page . The score w ( p ) grows if the number of incoming links to the page p grows. 2) Dependence on the page X  X  freshness . The score w ( p ) decreases while the page p becomes outdated. 3) Dependence on the link X  X  freshness . All other things being equal, a page with older incoming and outgoing links should gain a lower score. 4) Dependence on the neighbor X  X  freshness . All other things being equal, a page with older surrounding neighbor pages should gain a lower score.

In this work we present the algorithm called Actual PageR-ank . To show the effectiveness of Actual PageRank we com-pare it with PageRank and T-Fresh (see [4]) on a large sam-ple of the Web. We define Actual PageRank (APR) in two steps. At the 1st step we define a freshness measure of a page according to the properties of  X  X resh X  PageRank. At the 2nd step we get APR. A system of linear equations for APR is exactly the system of linear equations for PageRank with probability of outgoing link proportional to freshness measure of its destination.

To sum up, the contributions of this paper are the follow-ing.
The remainder of the paper is organized as follows. Sec-tion 2 is a short review on related link-based ranking mod-els. We introduce a general scheme of recency-sensitive link analysis algorithms organization in the beginning of Section 3. In Section 3.1 we define T-Fresh and then in Section 3.2 we describe the shortcomings of T-Fresh. We present our algorithm in Section 3.3. We compare the algorithms in Sec-tion 3.4. The experimental part is described in Section 4. In Section 5 we discuss potential applications and future work.
Yu et al. in [10] were among the first to study algorithms of link analysis sensitive to the temporal aspects of the Web. The authors modified PageRank by weighting each citation according to its age. Amitay et al. in [1] give a bonus to each link according to freshness of pages. However, in both works only one type of activity is taken into account: link X  X  freshness in the first work and page X  X  freshness in the second. Algorithms based on both types of activity are studied in [2], [3], [9]. These algorithms do not follow all the properties of  X  X resh X  PageRank. For example, Berberich et al. in [3] con-sider both web pages X  and links X  freshness. Unfortunately the measure of page X  X  freshness that the authors introduce does not depend on the page neighbor X  X  freshness. Dai and Davison [4] generalize ideas from the above-mentioned pa-pers in a natural way. Their algorithm T-Fresh follows all the necessary properties described in Section 1 and turns to be the most powerful and advanced recency-sensitive link analysis algorithm. However, T-Fresh has a number of short-comings which are explained in details in Section 3.2.
We generalize and modify T-Fresh and obtain APR. The main differences between these two algorithms are in defini-tions of freshness measures and in the  X  X andom surfer mod-els X  utilized for calculating the score. The freshness measure of APR is a combination of pages X  freshness measure and links X  freshness measure in contrast to the freshness mea-sures of T-Fresh. Dai and Davison consider two different measures that characterize pages X  and links X  activities sepa-rately. Such approach makes it impossible to control influ-ence of both types of activities on the score assigned by the algorithm. Calculating the final value of the score Dai and Davison use the model with a surfer jumping as from one page to another as to the future and to the past. Due to insufficient motivation of such model we prohibit a surfer to jump from one time period to another.
Let us consider moments of time  X ,T . We assume that web pages and links were created in the period [  X ,T ]. Denote by K a number of snapshots. We divide the interval [  X ,T ] into K parts: [ t i  X  1 ,t i ], i  X  { 1 ,...,K } , t 0 =  X  , t
K . Let us define  X  X eighted X  PageRank. Let W ( p ) be any real-valued nonnegative function of a page p called weight of p . We denote  X  X eighted X  PageRank of a page p by PR W ( p ). Let N be the number of all pages in the Web. Set PR W ( p ) = 0 . 15 The parameter  X  is such that P PageRank [7] is  X  X eighted X  PageRank with the weight W  X  1. We denote PageRank of a page p by PR( p ). Clearly for classic PageRank the parameter  X  equals P
Both algorithms T-Fresh and Actual PageRank are de-fined in 2 steps. At the 1st step freshness measures are de-fined (one measure for APR and two measures for T-Fresh). Let us describe a general scheme of constructing such mea-sures. Let i  X  { 1 ,...,K } . Let p be a page created before the moment t i . Denote by F i ( p ) a freshness measure of the page p in the i -th period of time. Any such measure F i is defined in the following way. 1) Let F 0 i ( p ) be an arbitrary initial value. This value is a measure of freshness of a page and its links. Initial measure F ( p ) is spreading over pages by incoming and outcoming links: where W i ( p ) is a weight of a page p in the i -th period de-fined in a specific way for each algorithm;  X  0 , X  parameters such that  X  0 +  X  1 6 1. The system described in Equation 2 illustrates the influence of neighbors on the quality score of a document (see [8]). 2) The freshness measure F i ( p ) is defined by Equation 3.
The measure decreases exponentially as time goes if there are no activities concerned with the page p (the parameter  X  is from (0 , 1)).

In Equation 2 all considered pages and links are supposed to be created before the time moment t i .

At the 2nd step a  X  X resh X  PageRank is defined. The idea is the following.  X  X resh X  PageRank is a solution of a system of linear equations similar to the system described in Equation 1. Weights of the pages are equal to their freshness measures.
T-Fresh is defined in 2 steps. At the 1st step the authors define two freshness measures: the page freshness (PF) and the in-link freshness (LnF). At the 2nd step the authors define values  X  i ( p ) and  X  i ( p ). T-Fresh of the page p equals  X  K ( p )  X  K ( p ).

The following information is necessary to define the fresh-ness measures PF and LnF: dates of creation of a link or a page, dates of updates on a link or on a page, dates of re-moval of a link or a page. Link-based algorithms used in web search depend on data obtained by a robot of a web search engine constantly crawling the Web, collecting and updating web pages and links between them. Typically information of web pages and links crawled by search engines does not include some of dates utilized by T-Fresh. Therefore testing the algorithm on a large data set is an extremely compli-cated problem. That is why we consider modified freshness measures depending on less temporal information. 1) Let  X  LnF , X  LnF , X  PF , X  PF be some numbers from (0 , 1). The freshness measure LnF i ( p ) is defined from Equations 2 and 3 where  X  =  X  LnF ,  X  0 =  X  LnF ,  X  1 = 1  X   X  0 . Weights W ( p ) are equal for all pages p existed in the i -th period. of incoming links to the page p created in the period [ t and b is the nonnegative integer parameter.

The freshness measure PF i ( p ) is defined from Equations 2 and 3 where  X  =  X  PF ,  X  0 =  X  PF ,  X  1 = 0. Weights W are equal for all pages p existed in the i -th period. Initial value PF 0 i ( p ) equals the nonnegative integer parameter a if the page p is created at time t i , otherwise PF 0 i ( p ) = 0. 2)  X  i ( p ) and  X  i ( p ) are defined in the following way: where t ( p ) is a number of a period of creating the page p ,  X  p | j is a page  X  p created before the moment t j , N j is a number of pages that were created before the moment t j .

The authors test T-Fresh for the following values of pa-rameters:  X  LnF =  X  PF = e  X  1 ,  X  LnF =  X  PF = 0 . 6 , a = b = 3.
In fact  X  i ( p ) is the  X  X eighted X  PageRank calculated on the graph G with vertices defined by pairs ( p,i ), where i  X  { 1 ,...,K } is a number of the time period, p is a page created in a moment before t i . There is an edge from ( p,i ) to ( p if and only if i 6 i 0 and there is a link from q to p 0 at the time t . In other words  X  i ( p ) = PR PF (( p,i )), where PR PF is calculated on the graph G .
In this section we describe the main shortcomings and mistakes of T-Fresh.

Mistake in Equation 4 (Equation 18 in [4]). Note that in Equation 4 there is no number  X  that makes the sum solutions of considered system of linear equations. Actually the system is homogeneous and all equations are linearly independent if and only if there are no vertices with out-degree 0 in the graph.
 No need to utilize the dynamic model in the uniform case. It seems that there is no need in applying Equation 4 instead of a  X  X eighted X  PageRank when time jumps are uniformly distributed. In the article [4] the authors consider different distributions, but obtain the best results for the uniform one. Actually the system described in Equation 4 without the mistake and the following system have the same solution:  X 
K ( p ) =  X  + +0 . 85 X Here t (  X  p  X  p 0 ) is the moment of creating a link  X  p  X  p It means that for calculating  X  K ( p ) we should not consider such a large graph with vertices ( p,t ). From the other side, one can notice that for a solution of Equations 6 and 7 the following property holds. If a page has a lot of incoming links in the past then its PageRank is larger than the PageRank of a page with the same number of incoming links created in present period of time. It means that by applying such method we allow some pages with outdated incoming links to have a high rank.

Computing two different measures of freshness is not well motivated. The authors introduce  X  X n-link freshness X  LnF and  X  X age freshness PF X  because it prevents one type of web freshness from being dominated by another freshness score. In fact, if all parameters are trained in such a way that the ranking performance in terms of relevance and freshness on a chosen metric is maximized then there is no need to sep-arate these measures. T-Fresh is a product of  X  K  X 
K ( p ). Note that pages with high Page Freshness get high  X 
K and pages with high Link Freshness get high  X  K . As some pages with outdated incoming links have high value of  X  K the authors are forced to multiply  X  K ( p ) by  X  K This simple operation does not give us a chance to control influence of both freshness measures on the result of the ranking method. Therefore, by generalizing freshness mea-sures and by avoiding  X  X ynamic algorithm X   X  we can use only one freshness measure and do not multiply the result of PageRank algorithm by something else.

One way of spreading a freshness measure. Note that LnF spreads exclusively via outcoming links and PF spreads via incoming links. It seems quite natural to generalize such approach. In a real situation freshness of a page should be higher if it has a lot of neighbors of any kind with high freshness.
According to the observations from the previous section we introduce the new algorithm of calculating  X  X resh X  PageR-ank that is called Actual PageRank . APR overcomes short-comings described in the previous section. We explain it in the next section. Let us first define our algorithm. In what follows we denote actual PageRank of a page p by APR( p ). We denote by GF i ( p ) freshness measure of a page p at the i -th period, i  X  X  1 ,...,K } , and call it General Fresh-ness . Let  X  GF  X  (0 , 1) ,  X  GF 0 , X  GF 1  X  [0 , 1] ,  X  The freshness measure GF i ( p ) is defined from Equations 2 and 3 where  X  =  X  GF ,  X  0 =  X  GF 0 ,  X  1 =  X  GF 1 . The weight W ( p ) := GF 1 i ( p ) and initial value F 0 i ( p ) := GF fined in the following way: parameters (values of the parameters are chosen in Section before the i -th period, otherwise n i ( p ) = 0; n 1 number of links  X  p  X  p created in the i -th period such that at least one of pages p,  X  p is created in the i -th period; n is the number of links  X  p  X  p created in the i -th period such that pages p,  X  p are created before the i -th period; n the number of links p  X   X  p created in the i -th period such that at least one of pages p,  X  p is created in the i -th period; n ( p ) is the number of links p  X   X  p created in the i -th period such that pages p,  X  p are created before the i -th period. Finally for any page p we set APR( p ) := PR GF ( p ) .
Let us explain the reasons for introducing the parame-a ,a 1 we can control an influence of page X  X  creation time on its initial freshness. Parameters b 0 1 ,b 0 2 and b 0 3 ,b trol the influence of incoming and outcoming link X  X  activity
Creation of a link  X  p  X  p , t (  X  p  X  p ) = i
Creation of a link p  X   X  p , t (  X  p  X  p ) = i Table 1: Influence of page X  X  and link X  X  activities on GF. correspondingly on the page X  X  initial freshness. Parameters b , j  X  { 1 , 2 , 3 , 4 } , play the same role for link X  X  weight for spreading freshness by links. Note that we give the gain 1 to GF 1 i ( p ) if t ( p ) &lt; i with a view to spread freshness by all links including pages going to (or from) old pages.
In this section we prove that APR avoids shortcomings of T-Fresh (see Section 3.2) and it is a generalization of a natural modification of T-Fresh without the shortcomings.
Let us first introduce a natural modification of T-Fresh obtained after removing the first two shortcomings described in Section 3.2. Clearly PR PF (see Equation 1) satisfies all properties of such modification. It is easy to see that APR is a generalization of PR PF . Indeed let K, X , X  PF 1 , X  PF , X  be a set of trained parameters of algorithm PR PF for any page p the equality PR PF ( p ) = PR GF ( p ) holds if K, X  are the same,  X  GF =  X  PF ,  X  0 =  X  PF ,  X  1 = 0, a 1 b = b 1 j = 0, j  X  { 1 , 2 , 3 , 4 } , a 0 = a . In the same way one can prove that GF is the generalization of LnF.

Let us show that APR does not have the last two short-comings described in Section 3.2. General Freshness depends on both link freshness and page freshness. By Equation 2 General Freshness spreads both by incoming and outcoming links. Furthermore there is no need to multiply APR by LnF as the algorithm PR GF in contrast to  X  K does not increase scores of pages with large number of old incoming links.
All experiments are performed with pages and links crawled in May 2012 by Yandex. We utilize a corpus of web pages in the domain .kz. The sample of this corpus contains  X  1B pages and  X  6B links. For ranking evaluation 8135 queries are selected from a set of queries. For each query URLs were judged by professional assessors hired by the search engine. When an assessor judges a pair &lt; query, URL &gt; he assigns a label based on both the relevance of the page to the query and the freshness of the page in respect to the query time. The relevance score is selected from among the editorial labels: perfect, excellent, good, fair, bad . We divide our data into two parts. On the first part (0.5% of the sam-ple and 1000 queries) we train the parameters and on the second part we test the algorithms. The data we use to test the algorithms contains 30570 pairs &lt; query,URL &gt; and 2405 queries (we exploit a query if and only if there are at least 5 URLs judged by assessors for this query). We compare APR with T-Fresh and PageRank in the following way used also by Dai and Davison [4]. These algorithms are combined lin-early by ranks with BM25. Then parameters for APR and T-Fresh including the parameter of linear combination with BM25 are chosen by maximizing the Normalized Discounted Cumulative Gain (NDCG) metric. We obtain the following sets of parameters (for both algorithms K = 10).

T-Fresh:  X  PF =  X  LnF = e  X  1 ,  X  PF = 0 . 6,  X  LnF = 0 . 9, a = 1, b = 1.

APR:  X  = e  X  0 . 1 ,  X  0 = 0 . 6 ,  X  1 = 0 . 1, a 0 = 3, b b = 0, b 0 4 = 1, a 1 = 5 , b 1 1 = b 1 2 = 0, b 1 3 = 7, b Table 2 demonstrates the ranking performance on metrics NDCG@5 and NDCG@10 over the algorithms.
 We obtain the p-value of the t-test for differences between APR and T-Fresh. The value is less than 0.0005. Thus we conclude that APR outperforms T-Fresh significantly.
In this paper we introduce the new recency-sensitive link analysis algorithm APR. We compare it with T-Fresh and PageRank. We test our algorithm on a large data set and demonstrate that our algorithm is better than both T-Fresh and PageRank. Besides our results being interesting on their own, they may be used by commercial web search engines for improving a search quality.

It would be interesting to continue to study APR and other recency-sensitive link analysis algorithms in terms of a rate of convergence in the iterative method to the solution of equations defining APR( p ) for a page p . Numbers of iterations for these algorithms are several times larger than the number of iterations for PageRank.
