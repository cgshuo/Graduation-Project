 to introduce new value-added services (composite services) by composing some pre-existing web services (component services). Such a composite service is often long-running, loosely coupled, and cross application and administrative boundaries, thus requiring transactional support. Recently, much work has been proposed to address the requirements of different kinds of transactions, such as Business Transaction Pro-tocol (BTP) [1], Web Services Transactions specifications [2], and Web Services Transaction Management (WS-TXM) [3]. These efforts focus on how to relax some ACID properties to ensure a reliable composition. However, improper transaction usage in the web service composition may degrade the quality of service (QoS), due to the inherent loss of concurrency of the two-phase commit protocol (2PC) which is used to guarantee the ACID property [4]. Therefore, how the transaction will influ-ence the QoS of a composite web service has been largely overlooked, which never-theless is a relevant and challenging problem. 
On the other hand, QoS management in service composition has also received in-creasing attention recently. It is not sufficient to only consider the functional require-ments and interface signatures of service. The nonfunctional characteristics, particu-larly, quality of service, should also be taken into account. Most of the relevant work focused on the dynamic runtime selection of component services and execution paths of a composite service in design-time. We argue that the consideration of QoS in service composition with QoS management. 
In this paper we propose a model for the composition of web services with various transactional requirements. Based on this model, we can easily evaluate the QoS of the composite service using a recursive approach. The kernel of the proposed model is transactional composition operator, which extends the workflow patterns [5] intro-duced in the workflow community. QoS management in web services and transactional web service composition. Section paper. Our transactional composition operator is presented in section 4. Section 5 explains how to determine the QoS of a composite service based on the transactional composition operator. Section 6 concludes the paper. QoS issues in web service have been widely investigated in the web service research community. We only mention here some representative proposals or ones most rele-vant to our work. D.A. Menasce described QoS from the perspective of service pro-vider and service consumer, and discussed calculation of throughput, one of the QoS criteria of a service. He also mentioned that the transaction might degrade the QoS of a service, however, none further analysis was given [4]. In another paper, he dis-cussed the QoS based on the composite web services flow and pointed out that not influence the QoS [6]. The composite flow is actually a kind of workflow patterns [5], which have been compiled from an analysis of various workflow languages. 
One of the challenging problems in QoS Management in service composition is the runtime selection of component service. Zeng et al. considered it as a global optimiza-tion problem and solved it using linear programming methods [7]. However, this kind of work does not consider the influence caused by the abstract process at design time, which, according to [6], is an equally important issue of concern. 
The most relevant work to ours is the one proposed by Jaeger et al. in [8]. The authors first defined a set of composition patterns which are derived from workflow patterns, and then analyzed these patterns from five QoS dimensions. However, as we will see in sec-which can change the QoS of composite servi ces. Another related work by Cardoso et al. focused on QoS for workflows [9]. In that work, a predictive QoS model is proposed to compute the QoS for workflows automatically based on elementary task QoS attributes. Like [8], no consideration is given on the influence caused by transactions. 
Recently, some work has been proposed to model the transactional properties in web service composition. Vidyasankar and Vossen presented a multi-level service composition model which could specify transactional properties at all levels [10]. Four kinds termination were used to define atomicity for basic activities. Termination of composite activity was built on the combination of its component activities X  termi-nations. Based on these terminations, some theorems were used to induce the transac-tional properties of composite services. Similar work has been done by Fauvet et al. in [11]. They divided services into three groups, each with a different transactional prop-could specify atomicity constraints. However, the composition operator only sup-ported parallel execution of services. Obviously, it is insufficient to express complex composite service with various transactional requirements. As a motivating example, consider an international conference scenario, where re-participate in some additional entertainment during the meeting. The conference or-ganizers provide a web service to help attendants arrange the whole tour. The service (S) performs two primary tasks. One is accommodation arrangement, the other is entertainment arrangement. The former contains three sub-tasks. First, some flight tickets should be purchased. We assume that two flight booking service (FB1 and FB2) are used, each of them is provided by certain airways. Then a hotel booking service (HB) is used to reserve a hotel room and, finally, to book a taxi is through a taxi booking service (TB). The function of entertainment arrangement is realized by two alternative services named sightseeing service (SI) and shopping service (SH), which help to purchase some entrance tickets and arrange a bus to send attendants to a here is abstract, that is, it only describes functionality, and no binding information for execution is given. For the sake of concise description, we shall use  X  X ervice X  to refer kind can be easily determined according to its context. 
This scenario is carried out by a composite service as illustrated in Figure 1. Rec-tangles represent web services, and ovals represent workflow patterns in which AND-s, XOR-s, AND-j, XOR-j, and Disc are abbreviations for AND-split, XOR-split, AND-join, XOR-join, and Discriminator, respectively. 
While the composite service in Figure 1 seems to be fine, consider such a case where some attendants want to purchase ten tickets at certain particular time. Unfor-tunately, there are only six tickets available through service FB1 and two tickets available through service FB2. Although both of FB1 and FB2 may be completed and TB, and the service SH or SI may be cancelled. Similarly, some attendants may require that a taxi is necessary if the reserved hotel is far from the conference hall, and if no taxi available, they would rather book another hotel by themselves through other web services. Therefore, if service TB fails, service HB needs to be cancelled or com-vices SH and SI. 
To guarantee the correctness and reliability of the composite service under differ-ent requirements, it is insufficient to use workflow patterns only; instead, transac-operator is introduced to solve this problem. This section presents a composition model for web services with various transactional requirements. In section 4.1, we extend the workflow patterns to composition pat-terns. In section 4.2, we introduce dependency to solve the different transactional requirements. Based on these, we propose a transactional composition operator and show how it works in the last subsection. 4.1 Pattern Evolution Web service composition requires interactions between component services, which are driven by explicit process models. Currently, lots of process modeling languages including BPEL [12] have been proposed to capture the logic of a composite service, and some of them are still evolving. Rather than choosing a particular modeling lan-guage, we think it is better to adopt an abstract model to describe the composition, so adapted to the changes more easily [8]. 
Although Van der Aalst X  X  workflow patterns have excellent expressive power, they are not suitable for recursive analysis of a composite service. Instead, we need to first different from theirs, especially in parallel cases. We will still use the term  X  X omposi-tion pattern X  here to reflect its accurate meaning. 
The comprehensive list of our composition patterns is given in Table 1, where CP1 denotes a sequence case, and CP2 to CP8 are all parallel cases. 
Let us first consider the sequence case. There are two workflow patterns aiming at linear sequence: sequence (WP1) and interleaved parallel routing (WP17). The former sequence to be active at the same time. CP1 is the same as WP1. WP17 can be im-plemented by WP1 and dependencies between activities (services). The dependency is sub-section. 
The parallel cases are more complex. The common structure of our composition patterns consists of one split workflow pattern and one join workflow pattern. There can be implemented by multiple parallel WP1 [5], so we do not consider it in pattern combination. It is a fact that some split patterns and some join patterns are incompati-ble, such as WP4+WP3. We also note that some combinations could be implied by other combinations, for example, WP2+WP7 is implied by WP2+WP3. Taking this into consideration, we have seven valid composition patterns for the parallel cases. 
There are still ten workflow patterns that are not involved in our composition pat-tern. These workflow patterns either are not relevant to composition or could be im-plemented by above patterns and dependencies. Note that, arbitrary cycles (WP10) are BPEL only supports structured cycles); secondly, the number of loops can not be future work when these modeling languages are standardized. 4.2 Dependency Between Services As described in the above scenario and last sub-section, workflow patterns and com-position patterns can not express complex transactional requirements. Generally, these transactional requirements can be mapped into a set of dependencies between these activities (services). The concept  X  X ependency X  has been widely investigated in data-base and workflow research communities [13-15]. It describes various relationships We use here some simplified dependency instances discussed in [13] to revisit the scenario. compensated. Thus we have an abort-dependency [13] from HB to TB. 
Secondly, assume the conference organizers have such a plan: concerning the en-tertainment part of the conference, attendants can either go sightseeing or go shop-ping, but not both. Thus there is an exclusion-dependency [13] from service SI to SH, and vice versa. Note that, this dependency is implied by WP4. 
Generally, transactional requirements in a composite service can always be de-scribed by dependencies between services. However, it is difficult and inconvenient to use these complicated dependencies directly. On the other hand, patterns provide a gether. In principle, we should use composition patterns to cover as many the required dependencies as possible, even though there are some dependencies that can not be covered by patterns. 4.3 Transactional Composition Model Let us continue our conference scenario. Suppose the attendants want to purchase ten tickets, but there are only eight tickets available, then the service fails. Unfortunately, this kind of requirements still can not be captured by the combination of composition requirements. For example, we may have: {avl(FB1)+avl(FB2)  X  10}, where function avl(S) returns the number of tickets service S can provide. 
Summarizing above discussions, we give below the definition of a transactional composition operator. Definition 1 -Transactional composition operator (TCO) . A TCO is defined as a 3-tuple (CP, DL, GCE), where:  X  CP is a kind of composition patterns.  X  DL is a list of dependencies.  X  GCE is a global constraint expression.
 When we use a composition pattern to combine a set of component services, we get a new high-level abstract service, which encapsulates the control flow, and transac-tional requirements existing in these services. 
To illustrate how to use the transactional composition operator (TCO) to recur-sively aggregate services, let us consider the conference trip scenario further, by mak-tickets, and next he only takes the flight tickets and ignores hotel room booking if no taxi is made available. He has no special preferences on the entertainment arrange-ment. The recursive aggregation process is as illustrated in Figure 2. 
As shown in Figure 2, we use TCO one at a time. After using five TCOs, we get a top-level service named ConfA which provides all expected functions. The specific each column stands for one value of the TCO. abort-dependency from S1 to S2.  X  means there is no dependency or global con-straint. Based on this stepwise approach, every service has been associated with a TCO. For example, service ConfA has associated with TCO5. For uniformity, let an ele-mentary service have also a TCO, namely, TCO  X  which has as value (  X  ,  X  ,  X  ). We can now easily evaluate the QoS of a composite service. In section 5, both the transac-tional properties and the QoS of services ar e to be discussed, as we aim at QoS under different transactional requirements. TCO. In section 5.1, we discuss transactional properties of services. In section 5.2, we present two algorithms to evaluate the QoS of a composite service. 
Various quality criteria have been proposed to evaluate the QoS of composite ser-response time. The execution cost is the cost to execute a service. The response time is the time a service needs to process a request. 5.1 Transactional Properties of Composite Services There are many classifications concerning the transactional properties, such as com-adopt and adapt here the terms atomic, quasi-atomic, and non-atomic to label transac-tional properties of a web service. A service is said to be atomic if it has no effect at undo its effect when it aborts. A service is said to be non-atomic if its effect cannot be eliminated once completed. In terms of QoS, atomic services have no execution cost additional cost, namely, penalty. 
The transactional property of a composite service is determined by its component there is at least one quasi-atomic component service and no non-atomic ones, the composite service is quasi-atomic. Only if there is a non-atomic component service, the composite service is non-atomic. 
Consider such a case where a composite service needs to abort. If it is atomic, there is no additional execution cost since all its component services are atomic, and if it is quasi-atomic, the additional execution cost comes from the quasi-atomic component operation should do first and which operation should do next is strictly defined, usu-ally the operation sequence is determined by logs. However, in web services envi-ronments, this restriction is much more relaxed because of the inherent autonomy of web services. Therefore, we assume that there are no strict requirements on operation sequence when an abortion is needed. 5.2 QoS of Composite Services should be considered individually. We first discuss the case where no abortion or compensation is needed. 
The QoS of each composition pattern is given in Table 3. Assume each pattern 2 -1 kinds of choices. Once a choice is made, CP6, CP7 and CP8 could be sim-plified into CP3, CP2, and CP4, respectively. We use function Time CP (s 1 , ,s n ) involving n services that will be executed, respectively. Assume that the choice we have corresponding expressions for CP6 to CP8 (see Table 3). 
Based on above analysis, let us consider TCO from the QoS point of view. GCE only describes some transactional constraints on TCO. It is the DL (list of dependen-tions may bring additional execution cost and response time. Therefore, the QoS value of a TCO consists of two parts: one is from CP, and the other is from DL. 
Now, consider what will happen on QoS if a dependency in DL requires a service to abort. The detailed abortion process is as discussed in section 5.1. From the discus-them to abort. Therefore, the total response time equals to the maximal component service X  X  response time, and the total execution cost is the sum of every quasi-atomic component service X  X  penalty. 
Summarizing the above discussions, we present two algorithms for QoS evaluation immediately below. 
Algorithms 1 and 2 both use a depth-first approach. Lines 07-08 and 09-16 of algo-rithm 1 evaluate QoS value caused by CP and DL, respectively. Lines 02-06 of algo-transactional properties. Lines 07-13 of algorithm 2 deal with the composite service. Note that, these algorithms only give the upper bound on the QoS values of a compos-component service will be invoked or cancelled at most once. Therefore, the time complexity of these two algorithms are both O(n). 
Consider here a numeric example based on above scenario. Table 4 shows the response time, execution cost, and penalty.cost for each component service. Assume that the penalty.time equals to (normal) response time and every branch of CP5 is selected with equal probability. Table 5 shows the QoS values for composite services at different levels (See Figure 2). Transaction is generally used to ensure correct and reliable execution; however, it composition model which captures both control flow and transactional requirements. The model aims at easily evaluating the QoS of a composite service with various transactional requirements. Based on the transactional composition operator (TCO), two algorithms are designed for the purpose of evaluating the QoS of composite ser-vices. Our model builds on TCO, which extends the classic workflow patterns, and thus is quite flexible. 
One relevant issue is dynamic service selection in web service composition. This kind of work focuses on improving QoS of a composite service at runtime. Our work is complementary to such work since we focus on QoS improvement at design-time. Currently, our work of this paper only analyzed the transactional effects on QoS. How mains a challenging problem, which is to be addressed in our subsequent research. The research described here is supported by the National Basic Research Fund of China ( X 973 X  Program) under Grant No.2003CB317006, and has been benefited from various discussions among the group members of the Joint Research Lab between CityU and USTC in their advanced research institute in Suzhou (China), particularly Mr. Zhe Shan, Lin Baoping, and Liu Hai. 
