 Tianyi Jiang  X  Alexander Tuzhilin Abstract It is crucial to segment customers intelligently in order to offer more targeted and personalized products and services. Traditionally, customer segmentation is achieved using statistics-based methods that compute a set of statistics from the customer data and group customers into segments by applying clustering algorithms. Recent research proposed a direct grouping-based approach that combines customers into segments by optimally combining transactional data of several customers and building a data mining model of customer behavior for each group. This paper proposes a new micro-targeting method that builds predictive models of customer behavior not on the segments of customers but rather on the customer-product groups. This micro-targeting method is more general than the previously considered direct grouping method. We empirically show that it outperforms the direct grouping and statistics-based segmentation methods across multiple experimental conditions and that it generates predominately small-sized segments, thus providing additional support for the micro-targeting approach to personalization.
 Keywords Customer segmentation  X  Marketing application  X  Personalization  X  Micro-targeting  X  Customer profiles 1 Introduction Customer segmentation, such as customer grouping by the level of family income, education, or any other demographic variable, is considered as one of the standard techniques used by marketers for a long time [ 33 ]. Its popularity comes from the fact that segmented models usually outperform aggregated models of customer behavior [ 34 ]. More recently, there has been much interest in the marketing and data mining communities in learning individual models of customer behavior within the context of 1-to-1 marketing [ 28 ] and personalization [ 8 ], when models of customer behavior are learned from the data pertaining only to a particular customer. These learned individualized models of customer behavior are stored as parts of customer profiles and are subsequently used for recommending and delivering personalized products and services to the customers [ 2 ].

As was shown in [ 16 ], it is a non-trivial problem to compare segmented and individual customer models because of the tradeoff between the sparsity of data for individual customer models and customer heterogeneity in aggregate models: individual models may suffer from sparse data, while aggregate models suffer from high levels of customer heterogeneity.
A typical approach to customer segmentation is based on the statistics-based approach that computes the set of statistics from customer X  X  demographic and transactional data [ 7 , 16 , 36 ], such as the maximal and minimal times taken to buy an online product, RFM (recency, frequency, and monetary values) statistics [ 26 ], etc. After such statistics are computed for each customer, the customer base is partitioned into segments by using various clustering methods on the space of the computed statistics [ 16 ]. It was shown in [ 16 ] that while the best statistics-based approaches can be effective and even outperform the 1-to-1 case under certain conditions, the approach can also be very ineffective as different customer statistics calculations result in different n -dimensional spaces and various distance metrics or clustering algorithms would yield very different clusters.

Recent research [ 17 ] proposes the direct grouping segmentation approach that partitions the customers not based on computed statistics and particular clustering algorithms, but in terms of directly combining transactional data of several customers, such as Web browsing and purchasing activities, and building a single model of customer behavior on this combi-ned data. This approach avoids the pitfalls of the statistics based-approach in that it does not require selection of arbitrary statistics and grouping customers based on these statistics. Ins-tead, it provides a more direct approach to customer segmentation by combining customers X  data and identifying the groups of customers generating the best models on this data. It was shown in [ 17 ] that the direct grouping segmentation approach dominates the statistics-based segmentation and the 1-to-1 approaches.

In this paper we aim to improve the performance of previous customer segmentation approaches [ 16  X  18 ] via the method of micro-targeting , where predictive models of customer behavior are built not on the segments of customers but rather on the customer-product groups. Table 1 shows a Product Type  X  Customer matrix describing which of the L possible products N of the customers have purchased. Given this purchasing information, we could build predictive models of customer purchase behavior over specific regions within this Product Type  X  Customer space. For example, we can build a regression model predicting the purchase volume of jazz CDs that a group of freshman students from University of XYZ majoring in computer science would buy on a monthly basis. Then the research problem is to identify optimal regions in the Product Type  X  Customer space on which the best predictive models of customer purchasing behavior are built .
 Previous research [ 17 , 18 ] has considered only vertical partitioning of the Product Type  X  Customer matrix that grouped customers into segments by combining all their purchasing transactions. In this paper, we present a micro-targeting approach that identifies the most suitable regions in the Product Type  X  Customer space for building the best local predictive models of customer behavior rather than grouping all the customer X  X  transactions into seg-ments. For example, we may want to build a model predicting whether a customer is going to purchase a particular product during a visit to a website, and we may want to build this model for a certain segment of customers (e.g. freshman NYU students) and a certain category of products (e.g., jazz CDs).

The proposed micro-targeting approach is based on the observation that a customer may possess different underlying utility functions across different types of products, and therefore should be modeled separately for different product types. The advantage of this approach is that the micro-targeting region is a smaller and more flexible unit of analysis than a customer segment. Therefore, identification of the best micro-targeting regions is a more general problem than identification of the best customer segments, and thus should produce superior performance. The problem with the micro-targeting approach is that the identified regions can be too small and not have sufficient data to build any meaningful models of customer behavior, and we address this problem in the paper.

In this paper, we compare predictive performance of the micro-targeting approach with the previously studied methods, including direct grouping, and demonstrate that the micro-targeting approach significantly outperforms these other methods. We also show that com-putational performance of our method is comparable to previously studied direct grouping approach, thus achieving significant predictive performance improvements without excessive increases in computational costs. 2 Problem formulation The problem of optimal segmentation of a customer base by customer and product type can be formulated as follows. Assume that C ={ C 1 ,..., C N } , is the customer base consisting of N customers, and that there are L product types P ={ P 1 ,..., P L } . Each customer C i is defined by the set of m demographic attributes A ={ A 1 , A 2 ,..., A m } , and for each product type P r , transaction TR ir j is defined by its schema T ={ T 1 , T 2 ,... T p } and the set of transaction Finally, we combine the demographic data { A i 1 , A i 2 ,..., A im , } of customer C i and his/her set of transactions for product P r , Trans ( C i , P r ), into the complete set of customers X  product a unit of data analysis in our work. For example, a customer C i can be defined by attributes A = {Name, Age, and other demographic attributes} and by the set of purchasing transactions Trans ( C i , P r ) she made at a Web site for a product type  X  X ook X , each transaction defined by such transactional attributes T as book title, when it was purchased, and the price of the book. Note that some customers purchase only subsets of products L . Thus Trans ( C i , P r ) ={} if customer C i purchased no products of type P r .
Given the set of purchasing transactions s i ={ TA 1 , TA 2 ,..., TA u } performed by cus-tomers C 1 ,..., C n , over product categories P 1 ,..., P r from the Product Type  X  Customer space, we want to build a predictive model M i on this set s i and measure its performance using some fitness function f mapping transactions s i into reals, i.e., f ( s i )  X  . For example, model M i can be a decision tree built on transactional data s i of freshmen student customers from University XYZ who bought product categories jazz and hip-hop CDs, and the fitness function f measures predictive accuracy of decision tree model M i built on s i using 10-fold cross-validation.

Furthermore, we partition the Product Type  X  Customer space into a mutually exclusive collectively exhaustive set of regions S ={ s 1 ,..., s k } , build models M i for each region s i , as described above, and compute their fitness scores f ( s i ) using any of the standard methods (e.g. area under ROC curve or predictive accuracy using tenfold cross-validation). We weight each region s i , according to its importance  X  i and compute the overall fitness score for the partition S as
Finally, we want to find the best partition of the overall set of customer transactions into regions S ={ s 1 ,..., s k } that optimizes the overall fitness score  X  over all possible partitions. This optimal partitioning problem is easily reducible to the problem of partitioning C into a set of customers, which was proven in [ 17 ] to be NP-hard and, thus, is intractable. Therefore, in this paper, we propose a suboptimal polynomial-time micro-targeting method that has better predictive performance when compared to the previous segmentation methods. 3 Related and background work Our proposed micro-targeting method is related to the reduction-based method for providing multi-dimensional recommendations [ 1 ], where certain segments of ratings are selected from the multi-dimensional cube of ratings and recommendation algorithms build local recommen-dation models using these and only these segments of ratings. However, unlike [ 1 ], we focus on building general local models of customers in this paper, rather than building particular types of local models for solving the multidimensional recommendation problem.

Our work is also related to the work on segmentation by context [ 13 ], where product type can be thought of as a type of context which can be used to build different predictive models of purchase behavior for individual customers. However, rather than using product types as an explicit context constraint, our approach starts with a customer and a single product type segment representing purchasing context. Then it works with multiple customer/product type combinations and builds local models maximizing predictive performance, thus removing contextual constraints.

Moreover, our work is also related to the work on clustering that partitions the cus-tomer base and their transactional histories into homogeneous clusters for the purpose of These clustering methods use distance-measure based metrics to compute  X  X istances X  bet-ween individual customers and group customers into clusters based on these distances. These distances between customers can be defined in various ways. For example, [ 14 ] describes a hierarchical clustering approach, ROCK, which clusters customers based on the distance between them, where the distance between two customers is defined in terms of how  X  X imilar X  the two sets of their transactions are. Thus, [ 14 ] reduces the customer segmentation problem to finding clusters in weighted graphs and uses a hierarchical clustering method for finding the segments. [ 3 , 32 ] address the problem of segmenting customers having multiple shop-ping basket transactions. This segmentation is achieved by, first, creating K shopping basket prototypes from the set of all shopping transactions from all customers using a variant of the K-means clustering method. Then individual customers are assigned to the closest basket prototype based on a certain distance measure between the set of customer X  X  transactions and the prototype. This method is highly scalable but assumes a certain fixed number of prototype baskets in defining potential customer segments. [ 24 ] introduces the concept of sub-segmentation, where customers from the same market segment are further partitioned into sub-segments using such criteria as recency, frequency and monetary values. Then custo-mers in the same sub-segment are targeted with customized offerings. Furthermore, [ 22 , 23 ] present certain clustering approaches based on a variant of a Semi-Discrete Decomposi-tion (SDD) and on the k-centroid method respectively, that are particularly well-suited for clustering high-dimensional data sets, and can also be used for segmenting customer bases.
Among various segmentation methods studied in the marketing literature, the ones that are most closely related to our work are various clustering techniques, mixture models, (generalized) mixture regression models and continuous mixture distributions [ 34 ]. Our work differs from this previous research in marketing in that we use the direct grouping approach [ 17 ] to segment customers without deploying statistics-based clustering methods. Our micro-targeting approach builds on previous work on direct grouping method [ 17 , 18 ]. Since we compare performance of these two and the statistics-based approach in the paper, we describe the direct grouping and the statistics-based segmentation methods in more detail below. 3.1 Statistics-based segmentation method The statistics-based approach to customer segmentation first computes the set of summary statistics from customer X  X  demographic and transactional data [ 7 , 16 , 36 ], such as the maxi-mal and minimal times taken to buy an online product, RFM statistics [ 26 ], etc. After such summary statistics are computed for each customer, the customer base is partitioned into customer segments by using various clustering methods on the space of the computed sta-tistics [ 16 ]. In particular, in this paper, we use hierarchical clustering method to segment the customers and build predictive models of their behavior on these segments. More specifi-cally, we consider a variant of the hierarchical approach below that is described in [ 10 , 15 ] and deployed in [ 16 , 27 ], entropy based regression trees (RT) [ 30 , 31 ], as well as a variant of the previously proposed affinity propagation (AP) clustering algorithm [ 12 ] that is presented in [ 18 ].
 Hierarchical clustering (HC) Using the same hierarchical clustering techniques as in [ 16 ], we can learn predictive models of customer behavior of the form where X 1 , X 2 ,..., X p are some of the demographic attributes from A and some of the transactional attributes from T (see Sect. 2 ), and function  X  f is a model that predicts certain characteristics of customer behavior, such as prediction of the product category or the time spent on a Web site purchasing the product. The correctness measure of this prediction is our fitness function f (defined in Sect. 2 ). These models  X  f , defined by expression ( 2 ), are built for the groups of customers that are obtained as follows.
We start with a single aggregated grouping of all customers C and compute a set of summary statistics { Z 1 ,..., Z h } described earlier in this section. Then we use hierarchi-cal clustering methods [ 10 , 15 ] on the set of these summary statistics to partition the set of N customers (which are viewed as the set of N points in the h -dimensional summary statistics space) by iteratively applying Euclidean distance-based clustering algorithms in the h -dimensional customer summary statistics space. The Hierarchical Clustering (HC) method generates new levels of segment hierarchy via progressively smaller groupings of customers until the 1-to-1 level is reached and each segment contains a single customer and his/her transactions. The decision to group certain customers together based on customer demographics attributes and summary statistics { A 1 , A 2 ..., A m , Z 1 , Z 2 ,..., Z h } is done using FarthestFirst clustering method [ 15 ] that is found to perform well in [ 16 ]. We compute progressively smaller customer segments for each level of the clustering hierarchy and build predictive models for these segments at each level. Finally, we compute the overall fitness score ( 1 ), where the weights are proportional to the sizes of customer segment, and select the segmentation level with the highest overall fitness score as the best possible segmentation of the customer base.
 Affinity propagation (AP) Starting with n unique customers, AP [ 12 ] identifies a set of training points, exemplars , as cluster centers by recursively propagating  X  X ffinity messages X  among training points. Similar to greedy K-medoids algorithms [ 21 ], AP picks exemplars as cluster centers during every iteration, where each exemplar in our study is a single customer represented by his/her summary statistics vector. Then AP forms clusters by assigning an individual exemplar X  X  group membership based on  X  X ffinities X  that exemplar has with any possible cluster centers. We assume in this paper that affinity is defined as pair-wise Euclidean distance measures an exemplar has with any possible cluster centers. AP runs in O ( N 2 ) .It is a good method for segmenting customers because cluster centers are associated with real customers rather than computed  X  X irtual X  customers as in the case of standard clustering algorithms.
 Regression Tree (RT) Decision trees [ 30 , 31 ] are often adopted in segmentation research where customers are clustered based on the  X  X urity X , or  X  X inimum entropy X  of their decision choices. Regression tree [ 5 ], RT , is similar to a decision tree, but is designed to approximate real valued functions instead of just handling classification tasks. As applied to our customer segmentation problem, RT recursively splits the customer base into segments by choosing the best customer summary statistics and demographics { A 1 , A 2 ,..., A m , S 1 , S 2 ,..., S h } attribute such that the regression models build on the resultant separate groupings have the minimal sum of squared deviations from the mean in the separate groups. Specifically, in terms of expression ( 2 ), this is equivalent to minimizing the sum of squared deviations in the predictions,  X  Y , of certain characteristics of customer behavior, Y , such as prediction of the product category or the time spent on a Web site purchasing the product:
Similar to hierarchical clustering techniques, RT continues to partition customers until the deviation from the mean is zero or the segment contains a certain minimal size that is still useful for predictive modeling. Unlike the traditional hierarchical clustering approaches, the decision tree approach is a supervised clustering algorithm, where  X  X imilar X  customers are grouped in terms of summary statistics and demographics to reduce the entropy of the class label.

Intuitively, this should be a better approach to clustering customers than traditional unsu-pervised hierarchical clustering approaches because by making grouping decisions based on class label purity, we are in effect measuring similarity in the output space, which reduces the variance of the dependent variable Y classified by the predictive models. In addition, there is no fixed splitting factor as in the case of traditional unsupervised hierarchical clustering approaches, as each tree split is based on the number of different values an independent attribute may have. Thus, each split could result in a different number of sub-clusters, which could provide extra flexibility for building more homogeneous and better performing custo-mer segments. However, the formation of customer groups is still based on customer summary statistics which, depending on the types of statistics used, can yield very different decision trees.

To avoid overfitting, we use tree pruning techniques to control the tree size. To overcome the well known problem with decision trees pertaining to the issue of high variability, where bagging [ 6 ] techniques to form an ensemble of classifiers to perform predictive tasks via majority voting. 3.2 Direct grouping method The direct grouping approach, presented in [ 17 ], makes decisions on how to group customers into segments by directly combining different customers and their transactions into groups, building models on the customer data for the group, and measuring the overall fitness score as a linear combination of scores of individual groups. [ 12 ] describes the Iterative Merge (IM) algorithm that works as follows.

Starting from single-customer segments (of size 1), (IM) iteratively seeks to merge existing customer segments by combining data from two segments SegA and SegB when (a) the predictive model based on the combined data for segments SegA and SegB performs better than respective models on SegA and SegB and (b) combining SegA with any other existing segments would have resulted in worse performance than the combination of both SegA and SegB. IM deploys a greedy search strategy since it determines the best pair of customer segments at each iteration and merges them together resulting in the best local solution. The algorithm terminates when there are no more improvements to be made from combining customer segments.

IM runs in O ( N 3 ) time in the worst case, where N is the number of customers, because a single merge of two segments takes O ( N 2 ) time in the worst case, and there can be up to N of such merges. However, in practice, the search space of IM is not very large because it merges groups, not individual customers, at a time, and the empirical results reported in [ 17 ] confirm this observation.

It was shown in [ 17 , 18 ] that the direct grouping method IM outperforms the statistics-based approaches, including HC, AP and some other  X  X raditional X  segmentation methods. However, one limitatio n of the IM method lies in that it vertically partitions the Product Type  X 
Customer matrix presented in Table 1 , whereas customer purchasing behavior can vary very significantly across different product categories, such as buying CDs versus diapers. Therefore, we propose the micro-targeting approach in this paper that identifies local regions in the Product Type  X  Customer space that exhibit homogeneous behavior and builds local predictive models on these regions. In the next section, we present this approach. 4 Building predictive models using micro-targeting Similar to direct grouping methods, such as IM , micro-targeting method makes locally optimal merging decisions on customer data to improve the overall performance fitness score. Unlike IM , however, this approach goes beyond grouping similar customers. Rather, it tries to identify local regions in the Product Type  X  Customer space exhibiting truly homogeneous behavior and then builds local predictive models on these regions maximizing predictive performance.

In this paper, we present a specific micro-targeting method, called Iterative Merge Products ( IM_Prod ) that differs from IM in that the unit of analysis is not a single customer but a product category for a customer. The specifics of the IM_Prod algorithm are presented in Fig. 1 .

Starting from a single customer and a product type segment, IM_Prod iteratively seeks to merge existing customer segments by combining data from two segments SegA and SegB similarly to IM . However, for the initial product type and customer specific segments that have very few transactions, where the number of sample points would not be sufficient to build meaningful predictive models, we proceed as follows. We use clustering techniques to group customers X  product-specific transactions based on the Euclidian distances between customer X  X  product type and demographic summary statistics vectors so that each cluster results in a set of at least ten purchase transactions for different customers and product types. Having this minimal threshold number of transactions helps to produce more meaningful initial predictive models.

Also note that after IM_Prod started to merge existing segments, it does not constrain products of different types from grouping into the same segment, nor does it constrain the same customer from having membership in multiple segments. Therefore, IM_Prod constitutes a generalization of IM in the sense that the unit of analysis is more  X  X ranular X  for IM_Prod than for IM .Thus,weexpect IM_Prod to perform at least as well as IM if both methods examine all possible regions in the Product Type  X  Customer space. However, IM_Prod does not necessarily outperform IM in practice since there are possible locally optimal customer combinations that IM examines and forms which IM_Prod does not consider due to its greedy nature. For example, IM may group customers C 1 , C 2 , and C 3 together, whereas IM_Prod may not produce such group if IM_Prod had grouped C 1  X  X  product P 1 with C 5  X  X  product P 1 and C 7  X  X  product P 3 into one segment during a previous iteration. Thus, while IM_Prod searches over a bigger solution space, it still may not perform better than IM due to this reason.

As IM , IM_Prod runs in O ( N 3 ) time in the worst case assuming that the number of for the case of IM , the search space of IM_Prod is not very large in practice because it merges segments, not individual customers, at a time. Thus the computational performance of IM_Prod really depends on the number of segments being processed for possible grouping rather than the number of customers N . Our empirical results reported in Sect. 6 also confirm this observation. 5 Experimental setup To compare the relative performance of statistics-based, direct grouping, and micro-targeting approaches, we conduct pair-wise performance comparisons using a variant of the non-parametric Mann-Whitney rank test [ 25 ] to test whether the fitness score distributions of two different methods are statistically different from each other. To ensure robustness of our findings, we set up the pair-wise comparisons across the following four dimensions: 1. Types of datasets. We used the following datasets: 2. Types of predictive models. We build predictive models using two types of classifiers in 3. Dependent variables. We built various models to make predictions of transactional 4. Performance measures. We use the following performance measures: percentage of cor-
For models  X  and  X ,  X  is considered  X  X etter X  than  X  when it provides better classification results and fewer errors: when CC I  X  &gt; CC I  X   X  RME  X  &lt; RME  X   X  RAE  X  &lt; RAE  X  . This is the fitness function which we use in IM_Prod and IM to select the best possible merge during every iteration. For example, if we add a new customer to a segment in the IM approach, we check if the expanded segment is better than the initial segment, where  X  X etter X  is defined in terms of the conjunctive expression specified above.

To determine the best segment level in HC , the CCI, RME, and RAE distributions of dif-ferent segment levels are compared separately in choosing the best performing segment level that has the most right-skewed CCI distribution and left skewed RME and RAE distributions.
To compare performance of different segmentation methods, such as HC , IM , etc., we take distributions of identical performance measures (e.g., CCI) across all the segments generated by these methods and statistically test the null hypothesis that the two distributions are not equal. The specifics of this comparison process are discussed further in Sect. 6 .
In terms of data pre-processing, we discretized our datasets to improve classification speed and performance [ 9 ]. Nominal transaction attributes, such as product categories, were discreti-zed to roughly equal representation in sample data to avoid overly optimistic classification due to highly skewed class priors. We also discretized continuous valued attributes such as price via our implementation of Fayyad X  X  [ 11 ] recursive minimal entropy partitioning algorithm.
We compared statistical, direct grouping, and micro-targeting-based methods across all three dependent variables, six data sets, two classifiers and three performance measures to determine the best method. The results of these comparisons are reported in the next section. Since we have compared performance of IM with other statistical and direct grouping methods in [ 17 , 18 ] already, and since IM_Prod dominates the  X  X est-of-breed X  statistical and direct grouping methods, as shown in Sect. 6 , it means that IM_Prod should dominate these other methods considered in [ 17 , 18 ], and, therefore, we did not perform these additional comparisons in this work. 6 Empirical results In this section, we present our empirical findings. As mentioned in Sect. 5 ,wecomparethe distribution of performance measures generated by the aforementioned predictive models for individual segments across various experimental conditions. Since we make no assumptions about the shape of the generated performance measure distributions, and the number of sample points differ across distributions as a result of different partition schemes, we use a variant of the non-parametric Mann X  X hitney rank test [ 25 ] to test whether the distribution of performance measures of the one method is statistically different from another method. For example, to compare IM against the IM_Prod method for the CCI measure, assume IM_Prod generated 150 customer segments and IM generated 50 customer segments for the purpose of grouping customers in a locally optimal way to predict a customer X  X  purchase on a given website. We want to test the null hypothesis that the two distributions of CCI measure generated from the predictive models built on the segments generated by the IM_Prod and IM methods are not different. As mentioned before, we apply the Mann X  X hitney rank test to statistically compare distributions of the data points generated by IM_Prod versus the data points generated by IM to determine which method produces a better set of customer segments for predicting customers X  next purchase.

More generally, the null hypothesis for comparing distributions generated by methods A and B for a performance measure is: (I) H 0 : The distribution of a performance measure generated by method A is not different 6.1 Comparing statistics-based, direct grouping, and micro-targeting segmentation To test these null hypotheses across distributions of performance measures generated by HC, AP, RT, IM , IM_Prod methods described in Sects. 3 and 4 , we proceeded as follows. We ran HC,AP,IM,RT ,and IM_Prod on the ComScore, Nielsen, and synthetic data and generated sets of customer segments for each of these methods and various predictive models and fitness functions. Furthermore, we generated sets of CCI, RME, and RAE scores from 36 predictive models (the combination of six datasets for the two types of customers, two classifiers, C4.5 and Na X ve Bayes, and 3 dependent variables) for the total of 108 performance distributions. We then compared the sets of CCI, RME, and RAE scores generated from predictive models of the IM_Prod generated segments vs. that of HC, AP, RT ,and IM generated segments to see if better performance is achieved with IM_Prod than with other methods. Table 3 lists the number of Mann-Whitney tests rejecting the null hypothesis (I) at 95% significance level for all the pairwise comparisons of HC, AP, RT ,and IM methods across 108 statistical distribution comparisons (methods listed in the leftmost column are compared against the method listed across the top row).

As Table 3 shows, the IM_Prod method dominates the other four methods in all of the 108 tests. Similarly, IM also dominates HC, AP ,and RT in all the 108 tests. We would like to emphasize that these results hold for the tenfold cross validation performance measu-rement described in Sect. 5 . From the results reported in Table 3 , we conclude the follo-wing performance relationship among all the segmentation methods studied in this paper: HC&lt;RT&lt;AP&lt;IM&lt;IM_Prod . 6.2 Detailed comparison of direct grouping and micro-targeting segmentation approaches Ta b l e 3 demonstrates that performance differences between IM_Prod and IM are significant but does not provide quantitative measures of these differences. To show the extent of these differences, we plot some sample CCI distributions of the  X  X ay of the week X  predictions from the segments generated by IM_Prod versus that of IM on the data from both high and low volume ComScore datasets. These are only representative examples, and predictive models for other variables exhibit similar trends that we cannot present here because of the space limitation. Figures 2 and 3 show CCI distributions generated by segmentation models for the  X  X ay of the week X  variable for the high-and Figs. 4 and 5 for the low-volume ComScore customers. As Figs. 2 , 3 , 4 , 5 demonstrate, these distributions are significantly skewed to the right for IM_Prod in comparison to IM , which demonstrates the extent to which IM_Prod outperforms IM for the CCI measure across both high-and low-volume customers.

Besides the clear performance dominance of IM_Prod versus that of IM, Figs. 2 , 3 , 4 , 5 also demonstrate that IM_Prod generates significantly more segments than IM ,whichis not surprising since IM_Prod focuses on micro-targeting and partitions the data based not only on populations of customers but also based on product categories. Figures 2 and 4 also demonstrate that the CCI segment distribution among low volume customers generated by IM_Prod is more positively skewed than for the high volume customers.

To gain further insight into the nature of the low volume CCI distributions, we present the segment size (i.e., number of customers in a segment) distributions in Figs. 6 and 7 across the six customer type data sets. We note that, unlike IM generated segment size distributions (Figs. 8 , 9 ), IM_Prod generated segments are predominately segments of size 4 and smaller. We also note that unlike what we observed with IM [ 17 ] where high volume customers have proportionally smaller segment sizes (Figs. 8 , 9 ), it is the low volume customers that have proportionally smaller segment sizes in segments generated by IM_Prod . This formation of smaller and thus more homogeneous segments amongst low volume customer datasets help explain why CCI distribution for the low-volume customer segments in Fig. 4 is more right skewed than for the high-volume customer segments in Fig. 2 .

We noted in Sect. 1 that IM_Prod could assign individual customers to multiple custo-mer and product type segments, where the maximum number of segment membership is limited to the total number of product types (in our case, there are eight product types in each of the six panel datasets). Therefore, we also studied to how many different segments the customers belong in various datasets, including high-vs. low-volume customers. From frequency distributions of customer segment memberships (Figures 10 , 11 ), we observe that high volume customers tend to get assigned to more segments than low volume customers. This makes sense because high volume customers have higher probability to purchase more product types and therefore get assigned to more product type specific segments.
Besides CCI distributions, we also plot sample RME and RAE distributions generated from IM and IM_Prod (Figs. 12 , 13 , 14 , 15 ) to demonstrate clear dominance of IM_Prod over IM as is evident from Figs. 12 versus 13 and 14 versus 15 .
IM_Prod  X  X  dominance over IM is the consequence of our focus on finding more homoge-neous regions in the Product Type  X  Customer space. To get a better sense of the performance impact in that space, we plot average CCI performance scores across segments of the same size in terms of purchases (as IM and IM_Prod generated segments have different meaning in terms of segment size, customers segmented by IM_Prod do not have the constraint of one customer can only belong to one segment, we cannot compare the segments based on the number of customers assigned to the segments; instead, for the visual analysis of average CCI performance in the Customer  X  Product space, we group segments together based on the number of purchases within segments) along with the distributions of segment sizes in a three-dimensional space (Figs. 16 , 17 , 18 , 19 ).
 We observe from Figs. 16 , 17 , 18 , 19 that IM_Prod generated far more segments than IM , the segments tend to be smaller in terms of purchase size, and the predictive models build on these smaller segments perform better in terms of average CCI distributions. This supports our claim that individual customers exhibit different kinds of purchasing behavior across different product types and that it is better to build predictive models for customers purchasing certain product types rather than for the customers across all the product types.
Since we build predictive models for Customer  X  Product combinations with IM_Prod , this raises an important issue of computational performance of the IM_Prod method because the search space increases significantly in this case in comparison to IM . For example, the search space for IM_Prod has increased eightfold in our experiments given the eight product categories. Although the performance of both IM and IM_Prod is O ( N 3 ) , as shown in Sects. 3 and 4 , we compared them experimentally to see how much they differ in practice. The results of this comparison are presented in Fig. 20 where the distribution of ratios of run times of IM_Prod over that of IM are plotted for all 36 pair-wise comparisons (across six datasets, two classifiers, and three predictive variables per dataset). As Fig. 20 demonstrates, the ratio of computational performance of IM_Prod over IM is never more than 5.5, and this particular ratio is reached quite infrequently according to Fig. 20 .Inmostofthecases,thisratiois3 or less. These lower than expected ratios indicate that, while the combinatorial explosion in the search space alludes to the significantly higher performance ratios, as was shown above and demonstrated in Figs. 6 , 7 , 8 , 9 , IM_Prod tends to generate segments of smaller sizes and converge to the final solution faster than IM . This observation explains why IM_Prod does not incur significantly more computational expenses than IM , as is empirically shown in Fig. 20 and argued in Sect. 4 . 6.3 Out of sample testing of customer segments formed by direct grouping In the previous sections we considered the 10-fold cross validation approach to test perfor-mance of predictive models on the out-of-sample data, as described in Sect. 5 . In this section we use the alternative out-of-sample method in which we create a training set by randomly drawing out 90% of our data to build the segments and then evaluate the final quality of the segments generated by the direct grouping methods on the remaining 10% of our data as the separate holdout set. We have already applied this method in [ 19 ], where we have shown that IM continues to outperform the statistics-based methods on the out-of-sample testing data. In this section we present additional experiments to study the performance of IM_Prod and IM generated segments on the out-of-sample holdout data (as opposed to the ten-fold cross validation performance testing results reported in the previous sections). In particular, for every transactional variable for which we want to make predictions using the direct grouping approach, we generate a new set of segments with IM_Prod and IM segmentation methods using only the training data, build models on the final segments, and collect the performance measures produced by those predictive models evaluated on the 10% holdout data.
Ta b l e 4 shows our results for high-and low-volume customers. We note that the quality of segmentation on high-volume customers evaluated on the out-of-sample data shows that IM_Prod continues to dominate IM . However, on the low-volume customers, IM tends to perform as well as IM_Prod . Closer examination of the actual segments formed shows that this is the result of a sparse data problem, which disappears once we have high density data with high-volume customers, as is shown in Table 4 . Specifically, low-volume customers tend to purchase fewer products in each product category and cover less product categories as high-volume customers (as evident from Figs. 10 , 11 ). Therefore, given that we randomly draw out data for testing, the likelihood of evaluating a purchase transaction on a product category not contained in the training data is much higher amongst the low-volume customers than for the high-volume customers. Nevertheless, this out-of-sample testing shows that IM_Prod does not overfit the data since it performs at least as well as IM on the low-volume data and still dominates IM on the high-volume data. 6.4 Generalization performance of models Thus far we have demonstrated that in terms of performance relationship amongst the various segmentation methods we have covered in this paper, HC&lt;RT&lt;AP&lt;IM&lt;IM_Prod .However, in order to demonstrate that our findings hold across datasets representing different problem difficulties (ranging from the inherently difficult to the easy problems to solve), we need to generalize the performance evaluation of our generated predictive models. Specifically, to evaluate the overall generalization of our empirical approach, we study the difficulty of the classification problem examined across our empirical settings by plotting out the area under receiver operating curve (AUC) [ 4 ] distributions for all the 115,210 generated models across HC,AP,IM,RT ,and IM_Prod methods. AUC numbers has been shown to be a good  X  X ingle number X  evaluation of classifier performance [ 4 ], as it does not depend on the decision thresholds chosen, is invariant to prior class distributions, and gives an indication on quality of classifiers. Low AUC scores are given to random or  X  X ne class X  only classifiers, while high AUC scores are given to classifiers that shown good performance across different decision thresholds.

As is evident from Fig. 21 , our empirical settings do cover a wide range of AUC num-bers, indicating a full range of classifier performance. Given that we use the same types of classifiers, C4.5 decision tree and Na X ve Bayes, in building predictive models of customer behavior across different empirical settings, the broad range of AUC distributions show that our empirical tests do examine a range of difficult (close to 0.5 in AUC numbers) to easy (close to one in AUC numbers) problems. This wide range of AUC number distributions from our generated predictive models of customer purchase behavior shows that our findings with micro-targeting algorithm, IM_Prod, is generalizable across a wide range of classification problems. We note that the below 0.5 AUC numbers are generated under extreme sparse data conditions where there X  X  simply not enough transactions per product type to build meaningful models. 7 Conclusions In this paper, we proposed a micro-targeting approach to address the problem of optimal partitioning of customer bases into homogeneous segments for building better predictive models of customer behavior. This approach extends previously proposed direct grouping method by directly combining product-specific transactional data of one or several custo-mers and building a single local model of customer behavior on this combined data. We presented a polynomial-time direct grouping method, IM_Prod that identifies segments of customers and product types and builds predictive models on these local regions in the Product-Type  X  Customer space. We compared performance of IM_Prod against the tradi-tional statistics-based hierarchical, regression tree, affinity propagation clustering, and the direct grouping method IM . We showed that IM_Prod dominated all other methods, i.e., HC&lt;RT&lt;AP&lt;IM&lt;IM_Prod , across all the experimental conditions for both the 10-fold and the out-of-sample performance measures. We have also shown that, while IM_Prod domi-nates IM , this is achieved without additional substantial computational expenses for IM_Prod in comparison to IM . Finally, we have examined the segments generated by IM_Prod and observed that there were many small size segments, and that customers were often assigned to multiple segments. Since most of the generated segments are small, this provides strong support for the micro-targeting approach to personalization.

By identifying local regions in the Product Type  X  Customer space that exhibit truly homogeneous behavior and building local predictive models on these regions, the micro-targeting approach increases flexibility of the predictive models describing customer beha-vior, improves the overall predictive performance, and keeps computational costs at the same level as other direct grouping methods.

As a future research, we would like to test the effectiveness of our segmentation strategies not only in terms of predictive performance but also in terms of the standard marketing-oriented performance measures such as customer value, profitability and other economics-based performance measures. References Author X  X  biography
