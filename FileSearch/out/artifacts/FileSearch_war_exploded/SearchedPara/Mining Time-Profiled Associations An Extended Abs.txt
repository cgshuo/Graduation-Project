 A time-profiled association is an association pattern [2] consistent with a query sequence over time. One example is the frequent co-occurrences of climate fea-tures with the El Nino phenomenon over the last 50 years [10]. El Nino, an abnormal warming in the eastern tropical Pacific Ocean[1], has been linked to climate phenomena such as droughts and wild fires in Australia and heavy rain-fall along the eastern coast of South America in the past 50 years. Transaction data are implicitly associated with time, i.e., any transaction is associated with a certain time slot. Thus the association patterns might change over time. For example, a sales association between diaper and beer is high only in the evening but not in other time slots. Association patterns found might have different popularity levels over time. These variations in time are not captured under tra-ditional association rule mining[2]. Hence time-profiled association mining can be used to discover interacting relationships consistent with a query prevalence sequence over time. Mining time-profiled associations is crucial to many applica-tions which analyze temporal trends of interactions among variables, including Earth science, climatology, public health, and commerce.
 sizes of itemset space and temporal space are extremely large in practice. In the example of the El Nino investigation, there are millions of spatial units with climate features (e.g., temperature and precipitation), each having 50 years worth of daily observations, i.e.,50*12*365=21,900 time points. An observation at one time point in a specific location can be treated as one transaction, so there are more than millions of transactions globally at one time snapshot. Therefore, exploring a pair of climate features will involve about a trillion itemset space and long time series, and exploring all relationships among features would be even more exorbitant.
 mining time-profiled associations. Some relevant work has attempted to capture the temporal dynamics of association patterns, including active data mining [4], cyclic association rule mining [8], and calendar-based association rule mining [7]. However, these approaches do not appear to be directly applicable for identifying consistent associations over time with a query sequence.
 using a two-phase paradigm. The first phase updates the history of the statis-tical parameters (e.g., support) for rules at different time points using a tradi-tional Apriori [2] approach, and generates a sequence of statistical parameters. The second phase matches the sequences of statistical parameters to find time-profiled associations with the query sequence. However, exponentially increasing computational costs of generating all combinatorial candidate itemsets become prohibitively expensive. We propose a novel one-step algorithm to unify the generation of statistical parameter sequences and sequence searching. The pro-posed algorithm prunes the candidate itemsets by using the monotone property of the lower bounding measure of the sequence of statistical parameters. It sub-stantially reduces the search space of itemsets, and is efficient in terms of the number of candidate itemset generations. Experimental results show that our algorithm outperforms the naive approach. A time-profile association is an association pattern consistent with a specific time sequence over time. The problem of mining time-profiled association patterns is to find all itemsets whose time sequences of prevalence measures are similar to a user specified query sequence under a given similarity threshold. The detailed problem definition is described as follows. We assume that a query time sequence Q is in the same scale as the prevalence measures or can be transformed to the same scale Given: 1) A set of items E = { e 1 ,...,e m } . 2) A time-stamped transaction database D . Each transaction d  X  D is a tuple 3) A time unit t .The i th time slot t i ,0  X  i&lt;n , corresponds to the time 4) A query time sequence Q = &lt;q 0 ,...,q n  X  1 &gt; over time slots t 0 ,...,t n  X  1 . 5) A threshold of similarity value  X  .
 Find: A complete and correct set of itemsets I  X  E where f similar ( P I , Q )  X  between two sequences P I and Q .
 Objective: Minimize computational cost. 3.1 Basic Concepts Support Time Sequence : We use support as the prevalence measure of an itemset since it represents how statistically significant a pattern is, and it has an anti-monotone property [2].
 Definition 1. Given a time-stamped transaction database D = D 0  X  ...  X  D n  X  1 , the support time sequence P I of an itemset I is the sequence of support values of an itemset I over D 0 ,...,D n  X  1 such that where support D i ( I )= |{ d  X  D i | I  X  d }| / | D i | .
 Choice of Similarity Measure: Several similarity measures have been pro-posed in the time series literature [6]. We propose using Euclidean distance as the similarity measure between two sequences since it is a typical similarity measure and is useful in many applications [3, 5]. For two time sequences X = &lt; x ,...,x n  X  1 &gt; and Y = &lt;y 0 ,...,y n  X  1 &gt; , the Euclidean similarity measure is below a user-defined threshold  X  , we say that the two sequences are similar. 3.2 Upper Bound Time Sequence and Lower Bounding Measure Lemma 1. Let I k +1 be a size k +1 itemset  X  E and { I 1 k ,...,I k +1 k } be a set of all support time sequence of I k . The upper bound sequence of P I k +1 , U I k +1 = Definition 2. Given a query time sequence Q , the lower bounding measure be-tween Q and the support time sequence P I of an itemset I is defined as the upper bound time sequence of P I .
 Lemma 2. For the true similarity measure D ( Q , P I ) and the lower bounding measure D lb ( Q , P I ) of a query time sequence Q and the support time sequence P I of an itemset I , the following inequality holds: 3.3 Monotone Property of the Lower Bounding Measure Lemma 3. Let P I k be the support time sequence of a size k itemset I k and P I k +1 be the support time sequence of a size k+1 itemset I k +1 ,where I k +1 = I k  X  I 1 and I 1 /  X  I k . The following inequality holds: It is clear by Lemma 1 and Definition 2. The upper bound of the support time sequence of an itemset decreases with increasing itemset size. As a result, the lower bounding measure does not decrease with increasing size of itemset. For ensures that the lower bounding measure can be used to effectively prune the search space and efficiently find interesting itemsets. We propose a one-step algorithm to combine the generation of support time sequences and the time sequence search. Our algorithm prunes the candidate itemsets by using the monotone property of the lower bounding measure of sup-port time sequences without scanning the transaction database and even without computing their true similarity measure. The following is the simple description of the algorithm.
 Generation of Support Time Sequences of Single Items: In the first scan of a time-stamped database, the supports of all single items ( k = 1) are counted per each time slot and their support time sequences are generated. If the lower bounding measure between a query sequence and the support time sequence is greater than a given similarity threshold value, the single item is pruned from the candidate set. If the true similarity value between them satisfies the thresh-old, the item is added to a result set.
 Generation of Candidate Itemsets: All size k + 1 candidate itemsets are generated using size k candidate itemsets.
 Generation of Upper Bound Sequences: The upper bound time sequences of size k + 1 candidate itemsets are generated using the support sequences of their size k subsets.
 Pruning of Candidate Itemsets Using the Lower Bounding Measure: Calculate the lower bounding measure between the upper bound sequence of the candidate itemset and the query time sequence. If the lower bounding measure is greater than the similarity threshold, the candidate itemset is eliminated from the set of candidate itemsets.
 Scanning the Database and Finding Itemsets Showing Similar Sup-port Time Sequences: The supports of candidate itemsets after pruning are counted from the database and their support time sequences are calculated. If the similarity value between the support sequences and the query sequence is less than the threshold value, the itemset is included in the result set. The size of examined itemsets is increased to k = k + 1 and the above procedures are repeated until no candidate itemset remains in the previous pass. Our experiments were performed to examine the effect of different threshold values and the effect of itemset pruning by the lower bounding measure. The results were compared with the naive method. The dataset was generated us-ing the transaction generator designed by the IBM Quest project used in [2]. We added a time slot parameter for generating time-stamped transactions. All experiments were performed on a workstation with 4 processors, each an Intel Xeon 2.8 GHz with 3 Gbytes of memory running the Linux operating system. Effect of Similarity Threshold: The effect of similarity measure was ex-amined with different similarity thresholds using a synthetic dataset in which the total number of transactions was 100,000, the number of items was 20, the average size of transaction was 10 and the number of time slots was 10. The query sequence was chosen near the median spport value of single items at each time slot. In Fig. 1 (a), our method showed dramatically less execution time com-pared with the naive approach. With the increase in the similarity threshold, the execution time increased. Otherwise, the naive approach showed stable execu-tion time because the approach calculated all time sequences of all combination itemsets independent of the threshold value Effect of Lower Bounding Pruning: Fig. 1 (b) shows the number of gener-ated candidate itemsets per each pass in the experiment using the same dataset. Note that the y value is in log scale. Our method generated much fewer candidate itemsets compared with the naive method. We introduced the problem of mining time-profiled association patterns and proposed a one-phase algorithm to efficiently discover time-profiled associations. The proposed algorithm substantially reduced the search space by pruning can-didate itemsets based on the monotone property of the lower bounding measure of the sequence of statistical parameters. Experimental results showed that our algorithm outperformed the naive approach.

