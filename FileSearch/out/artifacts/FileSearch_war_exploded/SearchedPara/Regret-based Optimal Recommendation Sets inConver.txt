 Current conversational recommender systems are unable to o ffer guarantees on the quality of their recommendations due to a l ack of principled user utility models. We develop an approach to re com-mender systems that incorporates an explicit utility model into the recommendation process in a decision-theoretically sound fashion. The system maintains explicit constraints on user utility b ased on preferences revealed by the user X  X  actions. We investigate a new decision criterion, setwise minimax regret (SMR) , for constructing optimal recommendation sets: we develop algorithms for com put-ing SMR, and prove that SMR determines choice sets for querie s that are myopically optimal. This provides a natural basis f or gener-ating compound critiques in conversational recommender sy stems. Our simulation results suggest that this utility-theoreti cally sound approach to user modeling allows much more effective naviga tion of a product space than traditional approaches based on, for exam-ple, heuristic utility models and product similarity measu res. I.2 [ Artificial Intelligence ]: Miscellaneous; H.5.2 [ User Inter-faces ]: interaction styles Algorithms, Human Factors recommender systems, preference elicitation, critiquing , minimax regret
Recommender systems can help users navigate product spaces and make decisions involving very large sets of alternative s. Con-versational recommender systems rely on mixed-initiative interac-tions, with both the user and the system taking an active role in the navigation process. User feedback can be entered in many for ms, for instance, as direct answers to queries about preferred p roducts, or critique of the options displayed by the system (e.g., by choosing one of several options, or altering the features of an option ).
Many conversational systems use some notion of the top-k items based on an estimate of a user X  X  preferences: the k (estimated) high-est rated items are presented either as the current recommen dation, or offered to the user for critique [6, 22]. However, such sys tems often offer very little  X  X hoice X  to the user, since these pro ducts are likely to be similar, and potentially far from optimal if pre ference estimates are crude. To overcome this, some recommender sys tems employ some form of diversity to select a product set for presenta-tion [14, 17]. This has two advantages, due to its coverage of a more diverse range of preferences. First, it increases the odds o f offering a desirable option when a user is ready to terminate the navig ation process; and second, it admits greater value of information  X  X y distinguishing more diverse preference types X  X uring crit iquing.
While diversity-oriented recommender systems are general ly mo-tivated by trying to overcome imprecision in preference ass ess-ment, most such systems either fail to maintain an explicit u tility model, or do not incorporate this in their judgement of diver sity. In contrast, following [15, 24, 4] we argue that explicit consi deration of the system X  X  beliefs about user preferences is vital in de termin-ing the most appropriate (diverse) recommendations. Speci fically, in this work we develop recommendation techniques that expl oit preference-based diversity : the set of recommended products will be highly preferred choices for a wide range of user preferences (consistent with preferences revealed by the user so far). W hen a user must make a final choice from the set of presented prod-ucts, this ensures that a good choice is available, no matter what the user X  X  actual preferences are (again, consistent with w hat has been revealed). And when the options are presented in the for m of a query, such sets tend to carry very high value of informatio n.
In this paper, we adopt the minimax regret decision criterion [3, 20] for product recommendation under utility uncertainty a nd adapt it to the case of set recommendations . Minimax regret has proven to be an efficient, robust decision criterion and an effective m eans of preference elicitation. But, to date, it has only been appli ed to sin-gleton recommendations. We extend the criterion to set reco mmen-dations, and develop computational procedures for its impl ementa-tion. We also investigate its properties w.r.t. elicitatio n, proving that minimax optimal recommendation sets provide us with myopic ally optimal set-based comparison queries; i.e., if we view the u ser X  X  choice as the answer to the query  X  X hich of these products do y ou prefer? X  the minimax optimal recommendation set is the set-based comparison query that refines utility function uncertainty most (i.e., reduces minimax regret the most).

Our regret-based approach is particularly suited to critiquing sys-tems. User-controlled exploration in critiquing systems d oes not offer guarantees of either sufficient or efficient explorati on of the product space X  X  user may cycle through a set of similar produ cts or converge on a far-from-optimal product [12]. Our regret-based recommendation approach provides just such guarantees on d eci-sion quality. Furthermore, the fact that the same set of alte rnatives comprises the optimal (final) recommendation and the (myopi cally) optimal set-comparison query means that we can leave termin ation decisions in the hands of the user without changing the inter face, or relying distinct decision/querying phases. Our simulatio ns demon-strate that regret-based critiquing can lead to much more ef ficient exploration of the product space and better recommendation s com-pared to existing critiquing systems.
We begin by describing our basic model and briefly reviewing approaches to preference assessment based on critiquing an d ex-plicit preference elicitation.
We assume a recommendation system is charged with the task of recommending an option to a user in some multiattribute spac e, for instance, the space the possible product configurations fro m some domain (e.g., computers, cars, apartment rental, etc.). Pr oducts are characterized by a finite set of attributes X = { X 1 , ...X with finite domains Dom ( X i ) . Let X  X  Dom ( X ) denote the set of feasible configurations . For instance, attributes may correspond to the features of various apartments, such as size, neighbo rhood, distance from public transportation, etc., with X defined either by constraints on attribute combinations (e.g., constraints on computer components that can be put together), or by an explicit datab ase of feasible configurations (e.g., a rental database).

The user has a utility function u : Dom ( X )  X  R . In what follows we will assume either a linear or additive utility function depending on the nature of the attributes [10]. In both addit ive and linear models, u can be decomposed as follows: where each local utility function f i assigns a value to each element of Dom ( X i ) . In classical utility elicitation, these values can be de-termined by assessing local value functions v i over Dom ( X are normalized on the interval [0 , 1] , and importance weights  X  ( P i  X  i = 1 ) for each attribute [9, 10]. This sets f i and ensures that global utility is normalized on the interva l [0 , 1] . A simple additive model in the rental domain might be: When Dom ( X i ) is drawn from some real-valued set, we often as-sume that v i (hence f i ) is linear in X i . 1
Since a user X  X  utility function is not generally known, we wr ite u ( x ; w ) to emphasize the dependence of u on user-specific param-eters. In the additive case, the values f i ( x i ) over  X  serve as a sufficient parameterization of u (for linear attributes, a more succinct representation is possible). The optimal pro duct for the user with utility parameters w is that x  X  X that maximizes u ( x ; w ) . Our goal is to recommend, or help the user find, an opti-mal product, or one whose utility is near optimal.
Our presentation relies heavily on the additive assumption , though our approach is easily generalized to more general models su ch as GAI [9, 5]. The assumption of linearity is simply a convenien ce; nothing critical depends on it.
Example critiquing is a common and effective technique for p rod-uct recommendation [6, 16, 17, 24]. In critiquing systems, a user is presented with one or more product options and invited to critique the displayed options, suggesting ways in which they could b e im-proved. Interactions based on critiquing are especially he lpful for users who are not familiar with the items available or their c harac-teristics: the process of critiquing assists users in both e xploring the space of possible options, and understanding (or even const ructing [21]) their own preferences.

A great variety of critiquing methods have been proposed, va ry-ing in several important dimensions. In many systems the use r pro-ceeds by tweaking the current example product (e.g.,  X  X  like this product, but find me something cheaper; X  or  X  X his restaurant is OK, but find something with French cuisine X ) to make it confor m more accurately to her preferences. Such systems often work by moving to a product that is similar to the current product, but re-flects the new tweak (user preference). Examples of such syst ems include FindMe [6] and dynamic critiquing [16]; incrementa l cri-tiquing [17] extends this framework with a preference model con-sisting of the critiques picked earlier in the process.

Unlike the preference elicitation techniques discussed be low, most systems do not maintain an explicit user utility model. Amon g those systems that do (e.g., a linear utility model is used in [18]), the model is updated heuristically in response to critiques , without adopting an explicit semantics for the critique.

Other systems focus instead on user-generated critiques (t he user is free to suggest alterations of the current product) with a n explicit preference model [22, 24]. In FlatFinder [24] product sugge s-tions are produced based on an analysis of users X  current pre ference model and their potential hidden preferences (a form of pref erence-based diversity), stimulating the process of preference-a wareness.
In this paper we choose to focus on system-generated critiqu es, motivated by the fact that the existence of an explicit utili ty model with a sound semantics gives the system the opportunity to su ggest the most appropriate and informative critiques.
Much work in AI, decision analysis and operations research h as been devoted to effective elicitation of preferences [19, 3 , 7, 2, 23]. Adaptive preference elicitation generally differs from cl assical util-ity assessment in the recognition is that good, even optimal , deci-sions can often be recommended with very sparse knowledge of a user X  X  utility function [3]; and that the value of informati on associ-ated with specific elicitation actions (e.g., queries) X  X n t erms of its impact on decision quality X  X s often not worth the cost of obt aining it [7, 2]. This means we must often take decisions in the face o f an incompletely specified utility function.

In this work, we adopt the notion of minimax regret [20] as our decision criterion for robust decision making under utilit y function uncertainty. Minimax regret has been advocated as a means fo r robust optimization in the presence of data uncertainty [11 ], and has more recently been used for decision making with utility fun ction (or objective function) uncertainty in optimization [19, 3 ]. Assume that through some interaction with a user, and possibly usin g some prior knowledge, we determine that her utility function w lies in some set W . (The form of W will become clearer when we discuss elicitation below). Following [3] we define: Definition 1 Given a set of feasible utility functions W , define the pairwise max regret MR ( x , y ; W ) of x , y  X  X ; the max regret MR ( x ; W ) of x  X  X ; the minimax regret MMR ( W ) of W ; and the minimax optimal configuration x  X  W as follows: Intuitively, MR ( x ; W ) is the worst-case loss associated with rec-ommending configuration x ; i.e., by assuming an adversary will choose the user X  X  utility function w from W to maximize the dif-ference in utility between the optimal configuration (under w ) and x . The minimax optimal configuration x  X  W minimizes this poten-tial loss. MR ( x , W ) bounds the loss associated with x , and is zero iff x is optimal for all w  X  W . Any choice that is not minimax optimal has strictly greater loss than x  X  W for some w  X  W .
Minimax regret relies on relatively simple prior informati on in the form of bounds or constraints on user preferences (rathe r than probabilistic priors); and exact computation is much more t ractable (in contrast with probabilistic models of utility that gene rally re-quire reasoning with densities that have no closed form [2, 7 ]). In configuration problems, optimization over product space X is of-ten formulated as a CSP or mixed integer program (MIP). In suc h domains, minimax regret computation can be formulated as a M IP, and solved practically for large problems using techniques such as Bender X  X  decomposition and constraint generation [3, 5].
Minimax regret has proven to be an effective tool in utility e lici-tation in a variety of domains. A decision support or recomme nder system can query (or otherwise interact with) a user, determ in-ing additional constraints on the utility set W until minimax re-gret reaches some acceptable level (possibly optimality), elicitation costs become too high, or some other termination criterion i s met.
A natural meta-heuristic for elicitation is the current solution strategy (CSS) , first described in [3]. The idea is as follows: a solution to the problem MMR ( W ) generates a minimax-optimal product x  X  W , an adversarial product x a and utility function w that maximizes the regret of x  X  W . CSS generates a query (depending on the space of queries allowed) that involves utility param eters in either x  X  W or x a (or both). This is based on the insight that should a query provide information about no parameter that impacts the utility of either x  X  W or x a , minimax regret cannot change. As one example, consider comparison queries , in which a user is asked to compare one product x to another y . A response that x is preferred imposes a linear constraint on W : P i f i ( x i ) &gt; P systems in which comparison queries are used, the CSS propos es a comparison query between x  X  W and x a .
Apart from allowing a users to have some control over the nav-igation process, critiquing systems provide the user the ab ility to explore their preferences effectively by simultaneously c omparing multiple products at once. We want to blend this advantage wi th the benefits of explicit elicitation methodologies by const ructing optimal recommendation sets . Unlike standard comparison queries (where a user is asked whether one option is better than anoth er), our set queries will present a set of alternatives . In contrast to tradi-tional critiquing systems, we associate a precise semantic s with the user X  X  choice from such a set: it is assumed the chosen produc t has utility at least as great as the unselected elements of the se t. This is used to then refine our model of user utility.

We maintain a set W of feasible utility functions, and at each step, present a set of recommendations Z (these will be jointly op-timal in a sense defined below). The user selects a single prod uct as most preferred from Z , and W is refined to reflect this. The process repeats until the user is satisfied with her choice, or minima x regret reaches some target. This is appealing for several reasons. First, the current set recommendation Z is always optimal; i.e., it minimizes setwise max regret given our beliefs about user utility. Sec ond, max regret is a well-defined progress metric that lets the user kn ow the value of further exploration of product space. Finally, the user se-lection from Z is maximally informative (as defined below). This last point is critical: it means that the best  X  X uery X  set and the best  X  X ecommendation X  set are identical.

Set recommendations have been addressed previously: in wor k that maximizes the joint diversity of a set [14]; or that opti mizes set recommendations using expected maximum utility of the opti ons in the set w.r.t. a probabilistic prior [15, 4]. These latter models focus implicitly on preference-based diversity : the set of recom-mendations attempts to span the (probabilistic) range of po ssible user utility functions to the greatest extent possible. Our setwise regret model does the same thing without requiring a density over utility functions, and the concomitant data and computatio nal costs. Our approach can thus be viewed a generating dynamic, compou nd critiques using preference-based diversity. Set-based qu eries are studied extensively in conjoint analysis. Such queries are usually used to identify aggregate consumer preferences. But in som e work adaptive elicitation of individual preferences is conside red, using an explicit utility model, and volumetric methods for gener ating a query (or choice) set [23].
Suppose we have a slate of k options to present to the user and want to quantify the possible loss associated with restrict ing the user X  X  decision to options in that slate. Intuitively, the u ser may se-lect any of the k options as being  X  X ptimal. X  An adversary wanting to maximize regret should do so assuming the any such choice i s possible X  X nlike max regret, we allow the user to select any from a set of k options. Formally, we choose the set of k options first, but delay the specific choice from the slate until after the adversary has chosen a utility function w . The regret of a set is the difference between the utility of the best configuration under w and the utility of the best option w.r.t. w in the slate. (To keep notation to a min-imum, we assume Z is restricted to suitable subsets of X (e.g., of cardinality k ) without making this explicit.) Definition 2 Let W be a feasible utility set, Z  X  X . Define: The setwise max regret (SMR) of a set Z of k options reflects the intuitions above, and SMR -Adv ( Z , W ) is the adversarial alterna-tive that maximizes regret. Setwise minimax regret is SMR of the minimax optimal set Z  X  W , i.e., the set that minimizes SMR ( Z , W ) .
Setwise max regret has some intuitive properties. First, ad ding new items to a recommendation set cannot increase SMR: Observation 1 SMR ( A  X  B , W )  X  SMR ( A , W ) .
 Incorporating options that are known to be dominated given W does not change setwise max regret: Observation 2 If u ( a , w ) &gt; u ( b , w ) for some a  X  Z and all w  X  W , then SMR ( Z  X  X  b } , W ) = SMR ( Z , W ) .
 Observation 3 Setwise max regret can be rewritten: This last observation captures the intuition that, given an utility function w , the option (among those in Z ) that determines setwise max regret is that with highest utility with respect to w . In fact, it is useful to explicitly partition utility space w.r.t. option s in Z ; define: (i.e., the region of w where x i has greater utility than any other option in Z ). The regions W [ Z  X  x i ] , x i  X  Z , partition W (we ignore of ties over full-dimensional subsets of W , which are easily dealt with, but complicate the presentation). We cal l this the Z -partition of W . An important observation we use later is that SMR ( Z , W ) can be determined using the maximum of the (individual) max-regrets over the Z -partition: Observation 4 Let Z = { x 1 , . . . , x k } . Then
We illustrate this notion with a simple example, involving fi ve options o 1 , . . . , o 5 with two features x 1 and x 2 as follows:
We assume linear user utility u ( x ; w 1 ) = w 1 x 1 + (1  X  w with a single (unknown) parameter w 1 (we assume weight w 1  X  w 1 ). Utility of each option, as a function of w 1 is shown in Fig. 1; we see each option except o 5 is optimal for some value of w 1 . However, o 5 is minimax optimal: its max regret of 0 . 5  X  attained with adversarial choice o 4 at w 1 = 1  X  X s less than that of any other option. This can be seen using a geometric interpre tation of max regret: o 5  X  X  utility is a linear function of w 1 termining a hyperplane in w -space); and its max regret is its max-imum distance from the piecewise linear, convex function of w determined by the upper surface in Fig. 1 (i.e., max o i u ( o This distance is less than that of any other option (e.g., the max regret of o 2 is 0 . 55 , occurring at w 1 = 0 with adversarial choice o ).

Sets of options have a similar graphical interpretation: instead of considering a single hyperplane, we consider the upper surf ace dic-tated by the recommendation set (i.e., the piecewise-linea r, convex max) and its distance from the full upper surface. For instan ce, con-sider the recommendation of k = 2 options, { o 1 , o 4 } . By Obs. 4 we partition utility space where the two options have identi cal util-ity, w 1 = 0 . 51 , and use o 1 for w 1 &lt; 0 . 51 and o The setwise max regret is the max difference between the max o f these two functions/options and the upper surface (i.e., 0 . 07 at-tained at w 1 = 0 ). This set is in fact setwise minimax optimal among pairs, though other pairs, e.g., { o 1 , o 2 } have relatively low SMR. Note that any pair containing o 5 , the best singleton recom-mendation, will have high (poor) SMR.
In critiquing systems, set recommendations are used not jus t to make a recommendations to the user, but also to give the user t he chance to critique the proposed options and continue explor ation of the product space. Our setwise minimax regret criterion c an be used directly for this purpose, implementing a form of prefe rence-based diversity. This stands in contrast to  X  X roduct divers ity X  typ-ically considered in critiquing systems. And unlike recent work in polyhedral conjoint analysis [23], which emphasizes vol ume re-duction of the utility polytope W , our regret-based criterion is sen-sitive to the range of feasible products and does not reduce u tility uncertainty for its own sake.

Any set Z can be interpreted as a query (or system-generated dy-namic compound critique): we simply allow the user to state w hich of the k elements x i  X  Z she prefers. We refer to Z interchange-ably as a query or a choice set . The choice of some x i  X  Z refines the set of feasible utility functions W by imposing the k  X  1 linear constraints u ( x i ; w ) &gt; u ( x j ; w ) , j 6 = i .
When treating Z as a choice set (as opposed to a recommen-dation set), we are not interested in its max regret, but rath er in how much a query response will reduce minimax regret . In our distribution-free setting, the most appropriate measure i s myopic worst case regret (WR) , a measure of the value of information of a query. Generalizing the pairwise measure of [3], we define: Definition 3 The worst-case regret (WR) of Z = { x 1 , . . . , x
An optimal choice set OptQuery ( W ) is any Z that minimizes worst case regret MinWR ( W ) : Intuitively, each possible response x i to the query Z gives rise to updated beliefs about the user X  X  utility function. We use th e worst-case response to measure the quality of the query (i.e., the r esponse that leads to the updated W with greatest remaining minimax re-gret). The optimal query is that which minimizes this value.
It is not hard to show that the worst-case regret of choice set Z is never greater than its setwise max regret: Observation 5 WR ( Z , W )  X  SMR ( Z , W ) .
 In the following we make use of a transformation that modifies a given recommendation set Z in such a way that SMR cannot in-crease, and usually decreases. This transformation will be used in two ways: to prove the optimality of SMR for choice set genera -tion; and directly as a computationally viable heuristic st rategy for choice set generation. Define MMR-transformation T to be a map-ping that refines a recommendation set Z as follows: (a) we first construct the Z partition of W ; (b) we then compute the single rec-ommendation that has minimax regret in each element (region of utility space) in the partition; and (c) let T ( Z ) be the new recom-mendation set consisting of these new recommendations.
 Definition 4 Let Z = { x 1 , . . . , x k } . Define MMR-transformation
The optimality of minimax setwise recommendations, when us ed as queries, is based on the following lemma: Lemma 1 SMR ( T ( Z ) , W )  X  WR ( Z , W )
From Lemma 1 and Observation 5, it follows that T cannot in-crease setwise max regret: SMR ( T ( Z ) , W )  X  SMR ( Z , W ) . Theorem 1 Let Z  X  W be a minimax optimal recommendation set. Then Z  X  W is an optimal choice set: WR ( Z  X  W , W ) = MinWR ( W ) .
We now describe other set recommendation and query strategi es that exploit minimax regret. Unlike the minimax optimal set , these strategies are heuristic and do not generally produce optim al sets. However, they are computationally less demanding than comp uting the SMR-optimal option. (We discuss algorithms for computi ng SMR in the next section.) We use the following notion: define a n adversarial choice for W and x to be the witness product that maxi-mizes the regret of x : Adv ( x , W ) = arg max x  X   X  X MR ( x , x
One simple strategy is the current solution strategy (CSS) for pairwise comparisons [3]. CSS asks a user to compare two prod -ucts: the minimax optimal product x  X  W and its adversarial coun-terpart Adv ( x  X  W , W ) . A pairwise comparison can be viewed as a choice set of size two (thus CSS is restricted to generating sets of size two). User selection of one of these products directl y con-strains the utility parameters that impact minimax regret.
The chain of adversaries strategy (CAS) generalizes CSS to pro-duce a choice set with k options by repeatedly selecting an ad-versarial choice relative to the last option added to the set . More precisely, CAS produces choice set { x 1 , . . . , x k } , where: CAS requires one minimax optimization to find x 1 (which simulta-neously determines witness x 2 ). After that, only k  X  2 max regret computations are needed. If k = 2 , CAS reduces to CSS.

The setwise chain of adversaries strategy (SCAS) selects k op-tions by repeatedly maximizing setwise max regret given the cur-rent set. It can be viewed as a greedy, incremental approxima tion of the (setwise) minimax optimal set. As with setwise max regre t, it explicitly maximizes diversity from the perspective of uti lity space. Formally, SCAS determines a set { x 1 , . . . , x k } where:
Recall that SMR -Adv ( Z , W ) is the adversarial option w.r.t. set-wise max regret. SCAS can be seen as a generalization of CAS (and hence CSS) to sets of any size. Computing SMR -Adv ( Z , W ) , which determines a single product at a time, is typically muc h faster than the joint optimization required by full computation of setwise minimax regret (see next section).

Finally, the MMR-transformation T introduced above gives rise to a natural heuristic search strategy for construction of g ood rec-ommendation sets. Given an initial set Z , we repeatedly apply T until a fixed point (w.r.t. setwise max regret) is found: We initialize this algorithm HCT (hillclimbing T ) with the slate Z given by CAS. Empirically this seems to produce the most prom is-ing sets. 2 The HCT algorithm can be terminated early.
We now discuss how to compute regret-based recommendations , distinguishing configuration problems and database problems . Configuration problems In configuration problems, options are defined by a set of variables and configuration constraints (i .e., as solutions to a constraint satisfaction problem). In such do mains, minimax regret computation for a single recommendation can be formulated as a MIP, and solved practically for large proble ms us-ing techniques such as Bender X  X  decomposition and constrai nt gen-eration. We refer to [3, 5] for more details. Our MIP formulat ions for setwise minimax regret below draw heavily on these techn iques, but require important modifications.

Setwise minimax regret for configuration problems can be for -mulated as the following MIP:
Intuitively, this MIP chooses k products x j , j  X  k , designated by variables X j (where each X j is a variable vector over the n prod-uct attributes). The objective minimizes  X  subject to constraint (8),
In the case no query can guarantee regret reduction for each r e-sponse, i.e., W R ( Z  X  W ) = MMR ( W ) , T degenerates to a single-ton with only the minimax regret option. In such cases HCT ret urns the initial set produced by CAS. ensuring  X  is no less than the setwise regret of the selected options w.r.t. any w  X  W (i.e., no less than setwise max regret).
Constraint (8) need not be expressed for each (of the continu -ously many) w  X  W . Since setwise regret is maximized at some vertex of W , we can post constraints only for these vertices (i.e., w  X  Vert ( W ) ). (We also exploit the fact, in Constraint (9), that regret at any w is maximized by the adversary selecting the optimal product x  X  w .) However, this MIP still requires (potentially) expo-nentially many constraints, one for each element of Vert ( W ) . We can make computation much more effective by applying constr aint generation, observing that very few of these constraints wi ll be ac-tive. Our procedure works as follows: we solve a relaxed vers ion of the MIP above X  X he master problem  X  X sing only the constraints corresponding to a small subset Gen  X  Vert ( W ) of the con-straints in the MIP above. We then test whether any unexpress ed constraints are violated at the current solution. This invo lves com-puting the true SMR of the recommendation set generated by th e master problem. If SMR is of the set is greater than  X  , we know that a constraint has been violated. Computation of SMR produces the element w  X  Vert ( W ) and optimal product x  X  w that corresponds to the maximally violated constraint in the current master s olution. We add this maximally violated constraint to Gen , tightening the MIP relaxation, and repeat; if no violated constraint exist s, we are assured that the current solution minimizes SMR. 4
The setwise max regret subproblem used to generate constrai nts is itself easily encoded as a MIP (similar to [3]), which can b e solved directly. Given a set Z , it computes SMR ( Z , W ) as well as SMR -Adv ( Z , W ) . Note that this procedure is also used to con-struct recommendation/choice sets in the SCAS heuristic ab ove. Database problems Database problems, where options are enu-merated in a product database, do not lend themselves to a di-rect constraint optimization when forming (regret-based) set rec-ommendations since no explicit variable constraints can be encoded in a MIP, CSP or other formalism. Instead, we adopt a computa-tional model that repeatedly determines the pairwise regre t between a candidate recommendation set and an adversarial option in order to identify the option with minimax regret. This can be seen a s a game between the recommender and an adversary. The com-putation of single recommendations is greatly facilitated in prac-tice by formulating the optimization as a minimax search and using standard pruning techniques. However, computing optimal r ecom-mendation sets has complexity O ( n k ) (for a DB of size n ), thus becoming increasingly impractical the size of the desired s et in-creases. The hill-climbing method HCT, SCAS, and CSS are bes t suited to this case.
We evaluate the effectiveness of our regret-based approach es for generating recommendation sets in simulation. We also comp are them to several state of the art critiquing algorithms.
Here R j w is the actual regret of j th option X j w.r.t. w when the indicator I j w is activated (indicating that the j th option is the one with maximal utility in the set). For any w , exactly one I 1 . Hence minimization of  X  ensures I j w = 1 for the x j with least actual regret. Constraint (9) ensures R j w has its intended meaning; here M is any upper bound on max regret.
Note that the adding a new constraint requires the introduct ion of new variables to the master problem. Every time we add a new w to Gen , k new binary variables I and V are necessary.
We first review three state-of-the-art approaches to compou nd critiques. The dynamic critiquing (DC) model [16] uses a similarity metric to retrieve the current product and the APriori datam ining al-gorithm to propose alternatives. Each compound critique de scribes a set of products in terms of the features they have in common. For example, in the computer domain, one compound critique migh t be  X  X aster CPU and Larger Disk. X  When the current product is sho wn, such patterns are converted into a set of suggested compound cri-tiques, each corresponding to a product that is, among produ cts satisfying the pattern, most similar to the current one. In o ur ex-periments, we use Apriori [1] with a support threshold of 0.3 , and select compound critiques using the low-support strategy [16].
Incremental critiquing (IC-wsim) [17] incorporates a user pref-erence model . While the APriori algorithm (as above) is used to discover patterns, these patterns are converted to suggest ions us-ing a quality metric that values both the score given to the product by the preference model and its similarity to the current pro duct. Among all products that satisfy the pattern, the system sele cts the x that maximizes score ( x ) Similarity ( x , y ) , where y is the pre-vious suggestion, and score is measures the fraction of previously stated user critiques that are satisfied by the product. 5
Incremental Critiquing: MAUT (IC-maut) [18] is a version of incremental critiquing that uses a multiattribute utility (MAUT) model to make recommendations and generate suggestions. In this approach, a simple additive utility model u is generated, initially giving equal weight to all attributes; each time an attribut e is cri-tiqued, its weight is modified by a multiplicative constant  X  (we use  X  = 2 in our experiments, following [18]). The algorithm as-sumes value functions of fixed form, parameterized by the cur rent option. Suggestions are generated by optimizing products w .r.t. the estimated utility model, and the k best products are presented to the user. A limitation of this approach is its reliance on a singl e util-ity model (as opposed to reasoning with the space of possible user utilities); furthermore, these suggestions are unlikely t o be diverse or informative enough to generate useful distinctions.
We compare our regret-based strategies and the critiquing m eth-ods above by showing the reduction of max regret of the curren t recommendation as a function of the number of recommendatio n cycles (critiquing opportunities) presented to the user, S ince our emphasis on recommendations that are also informative for f urther elicitation X  X ince the interaction can be terminated by the user at any stage X  X e are interested in the  X  X nytime X  profile of sugge stion quality as well as its ultimate convergence. While our metho ds are tuned to reducing max regret, one might argue that true regret , i.e., the difference between the utility of the recommended produ ct and the optimal product under the user X  X  actual utility function, is the most critical measure. This is informative since minimax re gret provides only an upper bound on this loss. Of course, in pract ice, we do not have access to the true utility function, but we do in sim-ulation. So we present results for true regret as well.

In our experiments, we use two different datasets. The first i s a database of 187 rental accommodation options (drawn from a r eal student rental database). Each option is characterized by 1 0 at-tributes, such as price, size, distance to university, etc. Attribute domains are either numeric or discrete with domains of size 2  X 6. The second, larger dataset is a synthetic dataset of 5000 ren tal units generated by sampling a generative model (Bayesian network ) over
When a a suggestion is selected, the system implicitly assum es that the user is critiquing the attributes that differ betwe en the sug-gestion and the current product.
Figure 2: Max regret reduction ( k = 2 , db = 187, 50 runs).
Figure 3: Max regret reduction ( k = 3 , db = 187, 50 runs). the same 10 attributes. 6 The latter was used since it is much larger and has initial regret that is much higher.

We simulate the interaction of a single user by generating a r an-dom user utility function, and making user choices based on i t. assume that the user initially orders the domain values of ea ch at-tribute from best to worst (a simple and natural task). Compu tation time for SCAS and HCT in the 187 product domain averages 0.9s and 2.7s, respectively, and 7-15s in the 5000 product datase t. We are examining several techniques to speed computation, but even at these levels, they support real-time response.

We first compare our regret-based strategies X  X xact SMMR com -putation, HCT, and CSS X  X n the small, 187-option dataset, wi th 2 options in each recommendation set (k=2). Fig. 2 shows the max regret of the recommended product after each interactio n (cri-tique). While SMMR is optimal, both CAS and HCT offer very good approximations, and are much more computationally effi cient (SMMR requires on average 285s per query). For this reason, w e focus on CAS (and SCAS, which is identical to CAS when k = 2 ) and HCT in the remaining experiments.

We next compare the three regret-based approaches, HCT, SCA S, and CAS, and the three critiquing methods above, DC, IC, and I C-MAUT, with set size k = 3 . Fig. 3 shows that traditional critiquing The model was generated from the smaller real database using the K2 Bayes net learning algorithm [8].
Each attribute has a fixed independent probability p of being rel-evant to the user ( p  X  U [0 . 5 , 1 . 0] ). Relevant attributes are ran-domly assigned an importance : hi (probability 0 . 2 ), med ( 0 . 3 ), or lo ( 0 . 5 ). Each importance has utility parameters drawn uniformly from [0 , 1] ( lo ), [0 , 5] ( med ), or [0 , 10] ( hi ). Numeric domains are characterized by a single weight, discrete domains, by a vec tor of local utilities where the least preferred value has zero mar ginal util-ity. The utility is then scaled with respect to the price rang e, so that the utility of an option is obtained by subtracting the price . Figure 4: Regret reduction, alternating unit critiques and set suggestions ( k = 3 , db = 5000, 50 runs). Figure 5: True regret (percentage of optimal value), altern ate unit critiques/set suggestions ( k = 3 , db = 5000, 50 runs). methods stall after only few cycles. We conjecture that the r eliance of these approaches on a single ranking or utility model (rat her than a space of possible user utilities) renders their suggestio ns insuffi-ciently diverse to generate useful feedback. Regret-based recom-mendation sets, in contrast, reduce max regret very quickly , reach-ing zero regret in about 20 queries. HCT and SCAS are almost indistinguishable (the difference is not statistically si gnificant) but both dominate CAS (with significant differences; we do not sh ow error bars for legibility). This clearly demonstrates bene fit of rea-soning directly about the joint value of an option set .
We consider a third setting using the larger, 5000-apartmen t dataset, and allowing unit critiques in addition to our compound critiques (or set choices). In other words, apart from selecting an opt ion from a set recommendation, the user can also critique a single att ribute, asking for an improvement in its value. Unit critiques are mo deled according to what we call the ideal semantics : the user is asked to choose the unit critique whose improvement for the current p rod-uct x is best when the attribute is moved to its greatest level. We alternate between unit critiques and compound critiques (s et sug-gestions) at each cycle. (More flexible user-controlled int eractions are possible.) Fig. 4 shows the max regret of the recommended product at each cycle. Again, our regret-based recommendat ions provide better suggestions than the other methods by a signi ficant margin. This is true when considering both the  X  X nytime X  pro file of the method and its final convergence: our techniques not on ly discover the optimal product, but are able to  X  X rove X  its opt imal-ity (reach max regret is 0), in roughly 20 cycles. In contrast , the critiquing methods settle at relative max regret of about 40 %. We notice that, compared to the first experiment, unit critique s seem to help regret reduction.
Regret-based critiquing is designed to attack bounds on regret (i.e., worst-case loss); generally, the recommended produ ct will be closer to optimal than its max regret measure. Indeed, we may discover the optimal product long before being able to prove its op-timality for the user. Since the other methods do not optimiz e regret bounds, perhaps they recommend good products despite being un-able to  X  X rove X  they are good. Fig. 5 shows this not to be the ca se. It illustrates the true regret or the recommended product, that is, the difference between its true value to the user (given her util ity func-tion) and the value of the optimal recommendation. We expres s it as a percentage difference from the true optimal value. Regret -based critiquing offers better actual recommendations , as measured by the true regret of the recommended product. The other critiq uing techniques recommend products that are better than their re gret-bounds suggest; but regret-based critiquing consistently finds the optimal product (and finds a near-optimal product in as few as 5 X 6 interactions). By contrast, the other three methods are una ble to identify the optimal option at convergence: incremental cr itiquing stabilizes at products that are nearly 20% worse than optima l; and dynamic critiquing never reaches products that are within 3 0% of optimal. The difference of true regret between our methods a nd dynamic/incremental critiquing is statistically signific ant.
We have developed a novel, minimax-regret based formaliza-tion for recommending sets of alternatives in conversation al rec-ommender systems. Our setwise max regret criterion is a natu ral extension of max regret for single recommendations, not onl y pro-viding robust recommendation sets, but also serving as a mea ns of generating myopically optimal queries or suggestions for c ritique. We developed computational MIP methods for optimal recomme n-dation sets, as well as tractable approximations. Even when ap-proximations are used, our reliance on explicit utility mod eling and minimax regret provides a powerful new means of generating g ood critiques and making good product recommendations. Our reg ret-based recommender often leads to optimal recommendations u sing very few compound critiquing interactions, and outperform s other dynamic critiquing techniques both in speed of convergence and the quality of the final recommendations.

Further verification of our regret-based approach requires user studies to determine the intuitive acceptability of regret -based rec-ommendations; 9 we also plan a comparison with diversity-enhanced incremental critiquing [13]. Largely unaddressed in our cr itiquing model is the need for users to explore the product space (one o f the main advantages of critiquing). We are developing hybri d mod-els that distinguishes exploratory actions from improving actions. Finally, the development of models of cognitive costs using tech-niques from behavioral economics and decision theory remai ns an important avenue of future research. This work was partially supported by the Natural Sciences an d Engineering Research Council (NSERC). The first author was p ar-tially supported by the Swiss National Science Foundation ( grant PBEL2-120935).
The standard deviation for both HCT and SCAS quickly decreas es as recommendations converge to the optimal product; e.g., f or HCT, deviation is less than 0 . 05 after the 10th cycle. All 50 runs recommend the optimal product at or before the 16th cycle wit h HCT, and at or before the 21st cycle for SCAS.
These studies are planned; ongoing preliminary studies of r egret-based elicitation in single item (not set-based) domains su ggest that max regret works very well in practice.

The authors would like to thank Darius Braziunas for valuabl e discussion on minimax regret computation for database prob lems and the anonymous reviewers for their valuable suggestions .
