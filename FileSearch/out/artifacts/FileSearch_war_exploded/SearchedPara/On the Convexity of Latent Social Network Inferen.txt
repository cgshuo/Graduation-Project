 Social network analysis has traditionally relied on self-r eported data collected via interviews and questionnaires [27]. As collecting such data is tedious and expensive, traditional social network studies typically involved a very limited number of people ( usually less than 100). The emergence of large scale social computing applications has made massi ve social network data [16] available, but there are important settings where network data is hard t o obtain and thus the whole network must thus be inferred from the data. For example, population s, like drug injection users or men who have sex with men, are  X  X idden X  or  X  X ard-to-reach X . Collect ing social networks of such populations is near impossible, and thus whole networks have to be inferr ed from the observational data. Even though inferring social networks has been attempted in the past, it usually assumes that the derlying network. For example, inferring networks from pai rwise interactions of cell-phone call [5] or email [4, 13] records simply reduces down to selecting the right threshold  X  such that an edge threshold [9, 20].
 We address the problem of inferring the structure of unobser ved social networks in a much more ambitious setting. We consider a diffusion process where a c ontagion (e.g., disease, information, product adoption) spreads over the edges of the network, and all that we observe are the infection times of nodes, but not who infected whom i.e. we do not observ e the edges over which the contagion spread. The goal then is to reconstruct the underlying socia l network along the edges of which the contagion diffused. We think of a diffusion on a network as a process where neighbo ring nodes switch states from in-active to active. The network over which activations propag ate is usually unknown and unobserved . Commonly, we only observe the times when particular nodes ge t  X  X nfected X  but we do not observe who infected them. In case of information propagation, as blogg ers discover new information, they ple getting sick without usually knowing who infected them [ 26]. And, in a viral marketing setting, we observe people purchasing products or adopting particul ar behaviors without explicitly knowing over which diffusions took place? What is the structure of su ch a network? We develop convex programming based approach for inferring the latent social networks from dif-network, contagions spread through the network. We then wri te down the likelihood of observed diffusion data under a given network and diffusion model par ameters. Through a series of steps we show how to obtain a convex program with a l ate our approach on synthetic as well as real-world email and viral marketing datasets. Experiments of the propagation model. Moreover, our approach scales wel l since we can infer optimal networks of a thousand nodes in a matter of minutes.
 the network structure learning for estimating the dependen cy structure of directed graphical mod-els [7] and probabilistic relational models [7]. However, t hese formulations are often intractable proposed with lots of success. Our work here is similar in a se nse that we  X  X egress X  the infection part of the network is already visible to us.
 are homogeneous, i.e. all connected nodes in the network inf ect/influence their neighbors with the same probability. When this assumption holds, the algorith m is very accurate and is computationally feasible, but here we remove this assumption in order to addr ess a more general problem. Further-more, where [10] is an approximation algorithm, our approac h guarantees optimality while easily handling networks with thousands of nodes. We now define the problem of inferring a latent social network s based on network diffusion data, during which the node was infected, whereas the source of eac h node X  X  infection is unknown. We assume only that an infected node was previously infected by some other previously infected node to which it is connected in the latent social network (which w e are trying to infer). Our method-ology can handle a wide class of information diffusion and ep idemic models, like the independent contagion model, the Susceptible X  X nfected (SI), Suscepti ble X  X nfected X  X usceptible (SIS) or even the Susceptible X  X nfected X  X ecovered (SIR) model [2]. We show t hat calculating the maximum likeli-hood estimator (MLE) of the latent network (under any of the a bove diffusion models) is equivalent to a convex problem that can be efficiently solved.
 Problem formulation: The cascade model . We start by first introducing the model of the diffusion process. As the contagion spreads through the network, it le aves a trace that we call a cascade . Assume a population of N nodes, and let A be the N  X  N weighted adjacency matrix of the network of infection transmission: The temporal properties of most types of cascades, especial ly disease spread, are governed by a of how long a node is infected before it recovers. Thus, whene ver some node i , which was infected at time  X  infection time of node j is  X  strictly nonnegative support.
 A cascade c is initiated by randomly selecting a node to become infected at time t = 0 . Let  X  independently in the network, with probabilities governed by A . Specifically, if i becomes infected and j is susceptible, then j will become infected with probability A be the sum of  X  infection is sampled independently from w ( t ) .
 Once a node becomes infected, depending on the model, differ ent scenarios happen. In the SIS model, node i will become susceptible to infection again at time  X  the SIR model, node i will recover and can never be infected again. Our work here ma inly considers the SI model, where nodes remain infected forever, i.e., it w ill never recover, r to note, however, that our approach can handle all of these mo dels with almost no modification to the algorithm.
 For each cascade c , we then observe the node infection times  X  c but the source of each node X  X  infection remains hidden. The g oal then is to, based on observed set of cascade infection times D , infer the weighted adjacency matrix A , where A transmission probability.
 Maximum Likelihood Formulation . Let D be the set of observed cascades. For each cascade c , let  X  c then  X  c cascade c . We know the infection of each node was the result of an unknow n, previously infected is L ( A ; D ) = Y The likelihood function is composed of two terms. Consider s ome cascade c . First, for every node i that got infected at time  X  c node could have infected it. For every non-infected node, we compute probability that no other node ever infected it. Note that we assume that both the casca des and infections are conditionally independent. Moreover, in the case of the SIS model each node can be infected multiple times during a single cascade, so there will be multiple observed v alues for each  X  c function would have to include each infection time in the pro duct sum. We omit this detail for the sake of clarity.
 Then the maximum likelihood estimate of A is a solution to min constraints 0  X  A with N ( N  X  1) variables. This makes scaling to large networks problemati c. We can, however, break this problem into N independent subproblems, each with only N  X  1 variables by observing that the incoming edges to a node can be inferred independent ly of the incoming edges of any other node. Note that there is no restriction on the structure of A (for example, it is not in general a stochastic matrix), so the columns of A can be inferred independently. Then the MLE of the i th column of A (designated A edges, is the solution to min j , and where
L ( A : ,i ; D ) = Y in the same cascade as node i , then the MLE of A of variables. This dramatically reduces the number of varia bles as in practice the true A does not Towards the convex problem . The Hessian of the log-likelihood/likelihood functions a re indefinite in general, and this could make finding the globally optimal M LE for A difficult. Here, we derive a convex optimization problem that is equivalent to the above MLE problem. This not only guarantees programming methods.
 We begin with the problem max the change of variables B then becomes where we use shorthand notation w c constraint on  X  increase when either increasing  X  turns the constraint into an upper bound on a posynomial (ass uming w ( t )  X  1  X  t ). Furthermore, requirements for a geometric program. Now in order to convex ify the geometric program, we apply the change of variables  X   X  = log(  X  ) and  X  B function as well as the constraints, and we are left with the f ollowing convex optimization problem courage a sparse MLE solution, an l log-likelihood function, making the objective function dramatically increases the performance of the method; howe ver, if we apply the same convexification process to this new augmented objective function the result ing function is which is concave and makes the whole problem non-convex. Ins tead, we propose the use of the penalty function  X  P N though we no longer have a geometric program, we can convexif y the objective function and so the global convexity is preserved: Implementation . We use the SNOPT7 library to solve the likelihood optimizat ion. We break the network inference down into a series of subproblems corresp onding to the inference of the inbound edges of each node. Special concern is needed for the sparsit y penalty function. The presence of the l correct for this, the inference problem is first solved with t he l mission probability predictions. Moreover, with the imple mentation described above, most 1000 non-scalable) MATLAB implementation can be found at http:/ /snap.stanford.edu/connie. ( Con vex N etwork I nferenc e ) on a range of datasets and network topologies. This include s both synthetically generated networks as well as real social net works, and both simulated and real dif-fusion data. In our experiments we focus on the SI model as it b est applies to the real data we use. 3.1 Synthetic data Each of the synthetic data experiments begins with the const ruction of the network. We ran our algorithm on a directed scale-free network constructed usi ng the preferential attachment model [3], and also on a Erd  X os-R  X enyi random graph. Both networks have 512 nodes and 1024 edges. In each uniformly random transmission probability A Transmission time model . In all of our experiments, we assume that the model w ( t ) of trans-bution w ( t ) = k k = 2 . 3 best describes the propagation model of the SARS outbreak in Hong Kong [26]. Notice that our model does not make any assumption about the structure of w ( t ) . For example, our approach can handle the exponential and power-law that both have a mod e at 0 and monotonically decrease in t , as well as the Weibull distribution which can have a mode at a ny value.
 We generate cascades by first selecting a random starting nod e of the infection. From there, the infection is propagated to other nodes until no new infectio ns occur: an infected node i transmits the infection to uninfected j with probability A on a synthetical scale-free graph with synthetically gener ated cascades. Transmission time models used are power law (PL), exponential (Exp), and Weibull (WB) . All networks contain 512 nodes, and the weight of each edge was sampled from a uniform random d istribution between 0 and 1. For the MLE method, the PR curves were generated by varying the sp arsity parameter  X  between 0 and 1000. (d)-(f): Mean square error of the edge transmission pr obability of the two algorithms. The dotted green line indicates the number of edges in the true ne twork. the form of a series of timestamps corresponding to when each node was infected. Not to make the problem too easy we generate enough cascades so that 99% of all edges of the network transmitted at least one infection. The number of cascades needed for thi s depends on the underlying network. Overall, we generate on the same order of cascades as there ar e nodes in the network. Quantifying performance . To assess the performance of ConNIe, we consider both the ac curacy of on different numbers of edges and then for each such inferred network we compute precision (the number of correctly inferred edges divided by the total numb er of inferred edges), and recall (the number of correctly inferred edges divided by the total numb er of edges in the unobserved network). the precision will be poor but the recall will be high.
 To assess the accuracy of the estimated edge transmission pr obabilities A square error (MSE). The MSE is taken over the union of potenti al edge positions (node pairs) where there is an edge in the latent network, and the edge positions in which the algorithm has predicted the presence of an edge. For potential edge locations with no edge present, the weight is set to 0. Comparison to other methods . We compare our approach to NetInf which is an iterative algo rithm network. The algorithm assumes that the weights of all edges have the same constant value (i.e., all nonzero A probabilities A along the edge ( i, j ) .
 restrictions, but they were very similar. Notice our approa ch achieves the break even point (point not to generate too many cascades, since more cascades mean m ore evidence that makes the problem easier. Also in Figure 1 we plot the Mean Squared Error of the e stimates of the edge transmission Figure 2: (a)-(b): Precision-Recall break-even point for t he two methods as a function of the num-ber of observed cascades, with a power law (PL) and exponenti al (EXP) transmission distribution. (c)-(d): Mean Square Error at the PR-Break-even point as a fu nction of the number of observed cascades. (e) PR Break-even point versus the perturbation s ize applied to the infection times. probability A line indicates the point where the inferred network contain s the same number of edges as the real network. Notice that ConNIe estimates the edge weights with error less than 0.05, which is more NetInf assumes the network edge weights are homogeneous, wh ich is not the case.
 We also tested the robustness of our algorithm. Figure 2 show s the accuracy (Precision-Recall break-even point as well as edge MSE) as a function of the numb er of observed diffusions, as well as the effect of noise in the infection times. Noise was added to the cascades by adding indepen-dent normally distribution perturbations to each of the obs erved infection times, and the noise to network with noise to signal ratios as high as 0.4. 3.2 Experiments on Real data Real social networks . We also experiment with three real-world networks. First, we consider a small collaboration network between 379 scientists doing r esearch on networks. Second, we ex-periment on a real email social network of 593 nodes and 2824 e dges that is based on the email communication in a small European research institute.
 For the edges in the collaboration network we simply randoml y assigned their edge transmission indicates the connection strength. Let there be a rumor casc ading through a network, and assume m parameter  X  simply enforces a minimum edge weight between the pairs who h ave exchanged least one email. We set  X  = . 001 and  X  = . 05 .
 For the email network we generated cascades using the power-law transmission time model, while for the collaboration network we used the Weibull distribut ion for sampling transmission times. We then ran the network inference on cascades, and Figure 3 give s the results. Similarly as with syn-thetic networks our approach achieves break even points of a round 0.95 on both datasets. Moreover, of contagions diffused. Figure 3: The precision-recall curve of the network estimat ion and the mean-square error (left) of predicted transmission probabilities as a function of numb er edges being predicted (middle). Top row shows the results for the email network, and the bottom ro w for the collaboration network. (Right) Precision-recall curve on inferring a real recomme ndation network based on real product recommendation data.
 Real social networks and real cascades . Last, we investigate a large person-to-person recommen-dation network, consisting of four million people who made s ixteen million recommendations on half a million products [14]. People generate cascades as fo llows: a node (person) v buys product p at time t , and then recommends it to nodes { w data. We consider a recommendation network of 275 users and 1 522 edges and a set of 5,767 rec-ommendations on 625 different products between a set of thes e users. Since the edge transmission model is unknown we model it with a power-law distribution wi th parameter  X  = 2 .
 social network surprisingly accurately. The break even poi nt of our approach is 0.74 while NetInf scores 0.55. Moreover, we also note that our approach took le ss than 20 seconds to infer this net-work. Since there are no ground truth edge transmission prob abilities for us to compare against, we can not compute the error of edge weight estimation. We have presented a general solution to the problem of inferr ing latent social networks from the network diffusion data. We formulated a maximum likelihood problem and by solving an equivalent convex problem, we can guarantee the optimality of the solut ion. Furthermore, the l can be used to enforce a sparse solution while still preservi ng convexity. We evaluated our algo-rithm on a wide set of synthetic and real-world networks with several different cascade propagation models. We found our method to be more general and robust than the competing approaches. Ex-the parameters of the edge transmission model. Moreover, ou r approach scales well as it can infer optimal networks on thousand nodes in a matter of minutes.
 of a news story breaking across the blogosphere, a SARS outbr eak, or a new marketing campaign modeling the structure of such latent social networks, we ca n gain insight into positions and roles Acknowledgements . This research was supported in part by NSF grants CNS-10109 21, IIS-1016909, LLNL grant B590105, the Albert Yu and Mary Bechmann Foundation, IBM, Lightspeed, Microsoft and Yahoo. [1] A. Ahmed and E. Xing. Recovering time-varying networks o f dependencies in social and [2] N. T. J. Bailey. The Mathematical Theory of Infectious Diseases and its Appl ications . Hafner [3] A.-L. Barab  X asi and R. Albert. Emergence of scaling in ra ndom networks. Science , 1999. [4] M. Choudhury, W. A. Mason, J. M. Hofman, and D. J. Watts. In ferring relevant social networks [5] N. Eagle, A. S. Pentland, and D. Lazer. Inferring friends hip network structure by using mobile [7] L. Getoor, N. Friedman, D. Koller, and B. Taskar. Learnin g probabilistic models of link struc-[8] Z. Ghahramani. Learning dynamic Bayesian networks. Adaptive Processing of Sequences and [9] L. Giot, J. Bader, C. Brouwer, A. Chaudhuri, B. Kuang, Y. L i, Y. Hao, C. Ooi, B. Godwin, [10] M. Gomez-Rodriguez, J. Leskovec, and A. Krause. Inferr ing networks of diffusion and influ-[12] R. Jansen, H. Yu, D. Greenbaum, et al. A bayesian network s approach for predicting protein-[14] J. Leskovec, L. A. Adamic, and B. A. Huberman. The dynami cs of viral marketing. ACM [15] J. Leskovec, L. Backstrom, and J. Kleinberg. Meme-trac king and the dynamics of the news [16] J. Leskovec and E. Horvitz. Planetary-scale views on a l arge instant-messaging network. In [18] D. Liben-Nowell and J. Kleinberg. The link prediction p roblem for social networks. In CIKM [19] N. Meinshausen and P. Buehlmann. High-dimensional gra phs and variable selection with the [21] M. Schmidt, A. Niculescu-Mizil, and K. Murphy. Learnin g graphical model structure using [22] L. Song, M. Kolar, and E. Xing. Time-varying dynamic bay esian networks. In NIPS  X 09 . [24] J. Vert and Y. Yamanishi. Supervised graph inference. NIPS  X 05 . [25] M. J. Wainwright, P. Ravikumar, and J. D. Lafferty. High -dimensional graphical model selec-[26] J. Wallinga and P. Teunis. Different epidemic curves fo r severe acute respiratory syndrome [27] S. Wasserman and K. Faust. Social Network Analysis : Methods and Applications . Cambridge
