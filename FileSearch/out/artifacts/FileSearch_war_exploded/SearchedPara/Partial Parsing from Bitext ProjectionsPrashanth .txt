 Parallel corpora have been used to transfer in-formation from source to target languages for Part-Of-Speech (POS) tagging, word sense disam-biguation (Yarowsky et al., 2001), syntactic pars-ing (Hwa et al., 2005; Ganchev et al., 2009; Jiang and Liu, 2010) and machine translation (Koehn, 2005; Tiedemann, 2002). Analysis on the source sentences was induced onto the target sentence via projections across word aligned parallel corpora.
Equipped with a source language parser and a word alignment tool, parallel data can be used to build an automatic treebank for a target language. The parse trees given by the parser on the source sentences in the parallel data are projected onto the target sentence using the word alignments from the alignment tool. Due to the usage of automatic source parses, automatic word alignments and dif-ferences in the annotation schemes of source and target languages, the projected parses are not al-ways fully connected and can have edges missing (Hwa et al., 2005; Ganchev et al., 2009). Non-literal translations and divergences in the syntax of the two languages also lead to incomplete pro-jected parse trees.

Figure 1 shows an English-Hindi parallel sen-tence with correct source parse, alignments and target dependency parse. For the same sentence, Figure 2 is a sample partial dependency parse pro-jected using an automatic source parser on aligned text. This parse is not fully connected with the words banaa , kottaige and dikhataa left without any parents. Figure 1: Word alignment with dependency parses for an English-Hindi parallel sentence
To train the traditional dependency parsers (Ya-mada and Matsumoto, 2003; Eisner, 1996; Nivre, 2003), the dependency parse has to satisfy four constraints: connectedness , single-headedness , acyclicity and projectivity (Kuhlmann and Nivre, 2006). Projectivity can be relaxed in some parsers (McDonald et al., 2005; Nivre, 2009). But these parsers can not directly be used to learn from par-tially connected parses (Hwa et al., 2005; Ganchev et al., 2009).

In the projected Hindi treebank (section 4) that was extracted from English-Hindi parallel text, only 5.9% of the sentences had full trees. In Spanish and Bulgarian projected data extracted by Ganchev et al. (2009), the figures are 3.2% and 12.9% respectively. Learning from data with such high proportions of partially connected depen-dency parses requires special parsing algorithms which are not bound by connectedness . Its only during learning that the constraint doesn X  X  satisfy. For a new sentence (i.e. during inference), the parser should output fully connected dependency tree. Figure 2: A sample dependency parse with partial parses
In this paper, we present a dependency pars-ing algorithm which can train on partial projected parses and can take rich syntactic information as features for learning. The parsing algorithm con-structs the partial parses in a bottom-up manner by performing a greedy search over all possible rela-tions and choosing the best one at each step with-out following either left-to-right or right-to-left traversal. The algorithm is inspired by earlier non-directional parsing works of Shen and Joshi (2008) and Goldberg and Elhadad (2010). We also pro-pose an extended partial parsing algorithm that can learn from partial parses whose yields are partially contiguous.

Apart from bitext projections, this work can be extended to other cases where learning from par-tial structures is required. For example, while bootstrapping parsers high confidence parses are extracted and trained upon (Steedman et al., 2003; Reichart and Rappoport, 2007). In cases where these parses are few, learning from partial parses might be beneficial.

We train our parser on projected Hindi, Bulgar-ian and Spanish treebanks and show statistically significant improvements in accuracies between training on fully connected trees and learning from partial parses. Learning from partial parses has been dealt in dif-ferent ways in the literature. Hwa et al. (2005) used post-projection completion/transformation rules to get full parse trees from the projections and train Collin X  X  parser (Collins, 1999) on them. Ganchev et al. (2009) handle partial projected parses by avoiding committing to entire projected tree during training. The posterior regularization based framework constrains the projected syntac-tic relations to hold approximately and only in ex-pectation. Jiang and Liu (2010) refer to align-ment matrix and a dynamic programming search algorithm to obtain better projected dependency trees. They deal with partial projections by break-ing down the projected parse into a set of edges and training on the set of projected relations rather than on trees.

While Hwa et al. (2005) requires full projected parses to train their parser, Ganchev et al. (2009) and Jiang and Liu (2010) can learn from partially projected trees. However, the discriminative train-ing in (Ganchev et al., 2009) doesn X  X  allow for richer syntactic context and it doesn X  X  learn from all the relations in the partial dependency parse. By treating each relation in the projected depen-dency data independently as a classification in-stance for parsing, Jiang and Liu (2010) sacrifice the context of the relations such as global struc-tural context, neighboring relations that are crucial for dependency analysis. Due to this, they report that the parser suffers from local optimization dur-ing training.

The parser proposed in this work (section 3) learns from partial trees by using the available structural information in it and also in neighbor-ing partial parses. We evaluated our system (sec-tion 5) on Bulgarian and Spanish projected depen-dency data used in (Ganchev et al., 2009) for com-parison. The same could not be carried out for Chinese (which was the language (Jiang and Liu, 2010) worked on) due to the unavailability of pro-jected data used in their work. Comparison with the traditional dependency parsers (McDonald et al., 2005; Yamada and Matsumoto, 2003; Nivre, 2003; Goldberg and Elhadad, 2010) which train on complete dependency parsers is out of the scope of this work. A standard dependency graph satisfies four graph constraints: connectedness , single-headedness , acyclicity and projectivity (Kuhlmann and Nivre, 2006). In our work, we assume the dependency graph for a sentence only satisfies the single-a) b) c) d) e) f) g) h) are stored in builtPPs headedness, acyclicity and projectivity constraints while not necessarily being connected i.e. all the words need not have parents.

Given a sentence W = w 0  X  X  X  w n with a set of directed arcs A on the words in W , w i  X  w j de-notes a dependency arc from w i to w j , ( w i , w j ) A . w i is the parent in the arc and w j is the child in the arc.  X   X  X  X  denotes the reflexive and transitive clo-sure of the arc. w i  X   X  X  X  w j says that w i dominates w , i.e. there is (possibly empty) path from w i to w .

A node w i is unconnected if it does not have an incoming arc. R is the set of all such uncon-nected nodes in the dependency graph. For the example in Figure 2, R = { banaa , kottaige , dikhataa } . A partial parse rooted at node w i denoted by  X  ( w i ) is the set of arcs that can be tra-versed from node w i . The yield of a partial parse  X  ( w i ) is the set of nodes dominated by it. We use  X  ( w i ) to refer to the yield of  X  ( w i ) arranged in the linear order of their occurrence in the sen-tence. The span of the partial tree is the first and last words in its yield.

The dependency graph D can now be rep-resented in terms of partial parses by D = ( W,R,% ( R )) where W = { w 0  X  X  X  w n } is the sen-tence, R = { r 1  X  X  X  r m } is the set of unconnected nodes and % ( R ) = {  X  ( r 1 )  X  X  X   X  ( r m ) } is the set of partial parses rooted at these unconnected nodes. w 0 is a dummy word added at the beginning of W to behave as a root of a fully connected parse. A fully connected dependency graph would have only one element w 0 in R and the dependency graph rooted at w 0 as the only (fully connected) parse in % ( R ) .

We assume the combined yield of % ( R ) spans the entire sentence and each of the partial parses in % ( R ) to be contiguous and non-overlapping with one another. A partial parse is contiguous if its yield is contiguous i.e. if a node w j  X  ( w i ) , then all the words between w i and w j also belong to  X  ( w i ) . A partial parse  X  ( w i ) is non-overlapping if the intersection of its yield  X  ( w i ) with yields of all other partial parses is empty. 3.1 Greedy Non-directional Partial Parsing Given the sentence W and the set of unconnected nodes R , the parser follows a non-directional greedy approach to establish relations in a bottom up manner. The parser does a greedy search over all the possible relations and picks the one with the highest score at each stage. This process is re-peated until parents for all the nodes that do not belong to R are chosen.

Algorithm 1 lists the outline of the greedy non-directional partial parsing algorithm (GNPPA). builtPPs maintains a list of all the partial parses that have been built. It is initialized in line 1 by considering each word as a sep-arate partial parse with just one node. can-didateArcs stores all the arcs that are possi-ble at each stage of the parsing process in a bottom up strategy. It is initialized in line 2 using the method initCandidateArcs( w 0  X  X  X  w n ) . initCandidateArcs( w 0  X  X  X  w n ) adds two candidate arcs for each pair of consecutive words with each other as parent (see Figure 3b). If an arc has one of the nodes in R as the child, it isn X  X  included in candidateArcs .
 Algorithm 1 Partial Parsing Algorithm
Once initialized, the candidate arc with the highest score (line 4) is chosen and accepted into builtPPs . This involves replacing the best arc X  X  child partial parse  X  ( arc .child) and parent partial parse  X  ( arc .parent) over which the arc has been formed with the arc  X  ( arc .parent)  X   X  ( arc .child) itself in builtPPs (lines 5-7). In Figure 3f, to accept the best candidate arc  X  ( banaa )  X   X  ( pahaada ), the parser would remove the nodes  X  ( banaa ) and  X  ( pahaada ) in builtPPs and add  X  ( banaa )  X   X  ( pahaada ) to builtPPs (see Fig-ure 3g).

After the best arc is accepted, the candidateArcs has to be updated (line 8) to remove the arcs that are no longer valid and add new arcs in the con-text of the updated builtPPs . Algorithm 2 shows the update procedure. First, all the arcs that end on the child are removed (lines 3-7) along with the arc from child to parent. Then, the immedi-ately previous and next partial parses of the best arc in builtPPs are retrieved (lines 8-9) to add pos-sible candidate arcs between them and the partial parse representing the best arc (lines 10-23). In the example, between Figures 3b and 3c, the arcs  X  ( kottaige )  X   X  ( bahuta ) and  X  ( bahuta )  X   X  ( sundara ) are first removed and the arc  X  ( kottaige )  X   X  ( sundara ) is added to can-didateArcs . Care is taken to avoid adding arcs that end on unconnected nodes listed in R .

The entire GNPPA parsing process for the ex-ample sentence in Figure 2 is shown in Figure 3. Algorithm 2 updateCandidateArcs( bestArc , can-didateArcs , builtPPs , unConn ) 3.2 Learning The algorithm described in the previous section uses a weight vector  X  X  X  w to compute the best arc from the list of candidate arcs. This weight vec-tor is learned using a simple Perceptron like algo-rithm similar to the one used in (Shen and Joshi, 2008). Algorithm 3 lists the learning framework for GNPPA.

For a training sample with sentence w 0  X  X  X  w n , projected partial parses projectedPPs = {  X  ( r i )  X  X  X   X  ( r m ) } , unconnected words unConn and weight vector  X  X  X  w , the builtPPs and candidateArcs are ini-tiated as in algorithm 1. Then the arc with the highest score is selected. If this arc belongs to the parses in projectedPPs , builtPPs and candi-dateArcs are updated similar to the operations in a) b) c) d) arcs that are added to candidateArcs algorithm 1. If it doesn X  X , it is treated as a neg-ative sample and a corresponding positive candi-date arc which is present both projectedPPs and candidateArcs is selected (lines 11-12).

The weights of the positive candidate arc are in-creased while that of the negative sample (best arc) are decreased. To reduce over fitting, we use aver-aged weights (Collins, 2002) in algorithm 1. Algorithm 3 Learning for Non-directional Greedy Partial Parsing Algorithm 3.3 Extended GNPPA (E-GNPPA) The GNPPA described in section 3.1 assumes that the partial parses are contiguous. The exam-ple in Figure 5 has a partial tree  X  ( dikhataa ) which isn X  X  contiguous. Its yield doesn X  X  con-tain bahuta and sundara . We call such non-contiguous partial parses whose yields encompass the yield of an other partial parse as partially con-tiguous . Partially contiguous parses are common in the projected data and would not be parsable by the algorithm 1 (  X  ( dikhataa )  X   X  ( kottaige ) would not be identified). Figure 5: Dependency parse with a partially con-tiguous partial parse
In order to identify and learn from relations which are part of partially contiguous partial parses, we propose an extension to GNPPA. The extended GNPAA (E-GNPPA) broadens its scope while searching for possible candidate arcs given R and builtPPs . If the immediate previous or the next partial parses over which arcs are to be formed are designated unconnected nodes, the parser looks further for a partial parse over which it can form arcs. For example, in Figure 4b, the arc  X  ( para )  X   X  ( banaa ) can not be added to the candidateArcs since banaa is a designated unconnected node in unConn . The E-GNPPA looks over the unconnected node and adds the arc  X  ( para )  X   X  ( huaa ) to the candidate arcs list candidateArcs .

E-GNPPA differs from algorithm 1 in lines 2 and 8. The E-GNPPA uses an extended initializa-tion method initCandidateArcsExtended( w 0 ) for rightSibling( chd ).pos i the state. candidateArcs in line 2 and an extended proce-dure updateCandidateArcsExtended to update the candidateArcs after each step in line 8. Algorithm 4 shows the changes w.r.t algorithm 2. Figure 4 presents the steps taken by the E-GNPPA parser for the example parse in Figure 5.
 Algorithm 4 updateCandidateArcsExtended ( bestArc , candidateArcs , builtPPs , unConn ) 3.4 Features Features for a relation (candidate arc) are defined on the POS tags and lexical items of the nodes in the relation and those in its context. Two kinds of context are used a) context from the input sen-tence ( sentence context ) b) context in builtPPs i.e. nearby partial parses ( partial parse context ). In-formation from the partial parses ( structural info ) such as left and right most children of the par-ent node in the relation, left and right siblings of the child node in the relation are also used. Ta-ble 1 lists the information on which features are defined in the various configurations of the three language parsers. The actual features are combi-nations of the information present in the table. The set varies depending on the language and whether its GNPPA or E-GNPPA approach.

While training, no features are defined on whether a node is unconnected (present in un-Conn ) or not as this information isn X  X  available during testing. We conducted experiments on English-Hindi par-allel data by transferring syntactic information from English to Hindi to build a projected depen-dency treebank for Hindi.

The TIDES English-Hindi parallel data con-taining 45,000 sentences was used for this pur-pose 1 (Venkatapathy, 2008). Word alignments for these sentences were obtained using the widely used GIZA++ toolkit in grow-diag-final-and mode (Och and Ney, 2003). Since Hindi is a morpho-logically rich language, root words were used in-stead of the word forms. A bidirectional English POS tagger (Shen et al., 2007) was used to POS tag the source sentences and the parses were ob-tained using the first order MST parser (McDon-ald et al., 2005) trained on dependencies extracted from Penn treebank using the head rules of Ya-mada and Matsumoto (2003). A CRF based Hindi POS tagger (PVS. and Gali, 2007) was used to POS tag the target sentences.

English and Hindi being morphologically and syntactically divergent makes the word alignment and dependency projection a challenging task. The source dependencies are projected using an approach similar to (Hwa et al., 2005). While they use post-projection transformations on the projected parse to account for annotation differ-ences, we use pre-projection transformations on the source parse. The projection algorithm pro-duces acyclic parses which could be unconnected and non-projective. 4.1 Annotation Differences in Hindi and Before projecting the source parses onto the tar-get sentence, the parses are transformed to reflect the annotation scheme differences in English and Hindi. While English dependency parses reflect the PTB annotation style (Marcus et al., 1994), we project them to Hindi to reflect the annotation scheme described in (Begum et al., 2008). The differences in the annotation schemes are with re-spect to three phenomena: a) head of a verb group containing auxiliary and main verbs, b) preposi-tions in a prepositional phrase (PP) and c) coordi-nation structures.

In the English parses, the auxiliary verb is the head of the main verb while in Hindi, the main verb is the head of the auxiliary in the verb group. For example, in the Hindi parse in Figure 1, dikhataa is the head of the auxiliary verb hai . The prepositions in English are realized as post-positions in Hindi. While prepositions are the heads in a preposition phrase, post-positions are the modifiers of the preceding nouns in Hindi. In pahaada para ( on the hill ), hill is the head of para . In coordination structures, while En-glish differentiates between how NP coordination and VP coordination structures behave, Hindi an-notation scheme is consistent in its handling. Left-most verb is the head of a VP coordination struc-ture in English whereas the rightmost noun is the head in case of NP coordination. In Hindi, the con-junct is the head of the two verbs/nouns in the co-ordination structure.

These three cases are identified in the source tree and appropriate transformations are made to the source parse itself before projecting the rela-tions using word alignments. We carried out all our experiments on paral-lel corpora belonging to English-Hindi, English-Bulgarian and English-Spanish language pairs. While the Hindi projected treebank was obtained using the method described in section 4, Bulgar-ian and Spanish projected datasets were obtained using the approach in (Ganchev et al., 2009). The datasets of Bulgarian and Spanish that contributed to the best accuracies for Ganchev et al. (2009) N(Parent==-1) 44607 30268 54815 P(Parent==-1) 19.7 42.0 41.1 N(GNPPA) 30063 10850 19622 N(E-GNPPA) 35389 12281 24577 P(E-GNPPA) 19.3 29.4 30.0 were used in our work (7 rules dataset for Bulgar-ian and 3 rules dataset for Spanish). The Hindi, Bulgarian and Spanish projected dependency tree-banks have 44760, 39516 and 76958 sentences re-spectively. Since we don X  X  have confidence scores for the projections on the sentences, we picked 10,000 sentences randomly in each of the three datasets for training the parsers 2 . Other methods of choosing the 10K sentences such as those with the max. no. of relations, those with least no. of unconnected words, those with max. no. of con-tiguous partial trees that can be learned by GNPPA parser etc. were tried out. Among all these, ran-dom selection was consistent and yielded the best results. The errors introduced in the projected parses by errors in word alignment, source parser and projection are not consistent enough to be ex-ploited to select the better parses from the entire projected data.

Table 2 gives an account of the randomly cho-sen 10k sentences in terms of the number of words, words without parents etc. Around 40% of the words spread over 88% of sentences in Bulgarian and 97% of sentences in Spanish have no parents. Traditional dependency parsers which only train from fully connected trees would not be able to learn from these sentences. P(GNPPA) is the per-centage of relations in the data that are learned by the GNPPA parser satisfying the contiguous par-tial tree constraint and P(E-GNPPA) is the per-improvement over the baseline.  X  denotes significance over GNPPA centage that satisfies the partially contiguous con-straint. E-GNPPA parser learns around 2-5% more no. of relations than GNPPA due to the relaxation in the constraints.

The Hindi test data that was released as part of the ICON-2010 Shared Task (Husain et al., 2010) was used for evaluation. For Bulgarian and Span-ish, we used the same test data that was used in the work of Ganchev et al. (2009). These test datasets had sentences from the training section of the CoNLL Shared Task (Nivre et al., 2007) that had lengths less than or equal to 10. All the test datasets have gold POS tags.

A baseline parser was built to compare learning from partial parses with learning from fully con-nected parses. Full parses are constructed from partial parses in the projected data by randomly assigning parents to unconnected parents, similar to the work in (Hwa et al., 2005). The uncon-nected words in the parse are selected randomly one by one and are assigned parents randomly to complete the parse. This process is repeated for all the sentences in the three language datasets. The parser is then trained with the GNPPA algorithm on these fully connected parses to be used as the baseline.
 Table 3 lists the accuracies of the baseline, GNPPA and E-GNPPA parsers. The accuracies are unlabeled attachment scores (UAS): the per-centage of words with the correct head. Table 4 compares our accuracies with those reported in (Ganchev et al., 2009) for Bulgarian and Spanish. 5.1 Discussion The baseline reported in (Ganchev et al., 2009) significantly outperforms our baseline (see Table 4) due to the different baselines used in both the works. In our work, while creating the data for the baseline by assigning random parents to un-connected words, acyclicity and projectivity con-Ganchev-Discriminative 78.3 72.3 Table 4: Comparison of baseline, GNPPA and E-GNPPA with baseline and discriminative model from (Ganchev et al., 2009) for Bulgarian and Spanish. Evaluation didn X  X  include punctuation. straints are not enforced. Ganchev et al. (2009) X  X  baseline is similar to the first iteration of their dis-criminative model and hence performs better than ours. Our Bulgarian E-GNPPA parser achieved a 1.8% gain over theirs while the Spanish results are lower. Though their training data size is also 10K, the training data is different in both our works due to the difference in the method of choosing 10K sentences from the large projected treebanks.
The GNPPA accuracies (see table 3) for all the three languages are significant improvements over the baseline accuracies. This shows that learning from partial parses is effective when compared to imposing the connected constraint on the partially projected dependency parse. Even while project-ing source dependencies during data creation, it is better to project high confidence relations than look to project more relations and thereby intro-duce noise.

The E-GNPPA which also learns from partially contiguous partial parses achieved statistically sig-nificant gains for all the three languages. The gains across languages is due to the fact that in the 10K data that was used for training, E-GNPPA parser could learn 2  X  5 % more relations over GNPPA (see Table 2).

Figure 6 shows the accuracies of baseline and E-Figure 6: Accuracies (without punctuation) w.r.t varying training data sizes for baseline and E-GNPPA parsers.
 GNPPA parser for the three languages when train-ing data size is varied. The parsers peak early with less than 1000 sentences and make small gains with the addition of more data. We presented a non-directional parsing algorithm that can learn from partial parses using syntac-tic and contextual information as features. A Hindi projected dependency treebank was devel-oped from English-Hindi bilingual data and ex-periments were conducted for three languages Hindi, Bulgarian and Spanish. Statistically sig-nificant improvements were achieved by our par-tial parsers over the baseline system. The partial parsing algorithms presented in this paper are not specific to bitext projections and can be used for learning from partial parses in any setting. R. Begum, S. Husain, A. Dhwaj, D. Sharma, L. Bai, and R. Sangal. 2008. Dependency annotation scheme for indian languages. In In Proceedings of The Third International Joint Conference on Natural Language Processing (IJCNLP) , Hyderabad, India. Michael John Collins. 1999. Head-driven statistical models for natural language parsing . Ph.D. thesis, University of Pennsylvania, Philadelphia, PA, USA. AAI9926110.
 Michael Collins. 2002. Discriminative training meth-ods for hidden markov models: theory and experi-ments with perceptron algorithms. In Proceedings of the ACL-02 conference on Empirical methods in natural language processing -Volume 10 , EMNLP  X 02, pages 1 X 8, Morristown, NJ, USA. Association for Computational Linguistics.
 Jason M. Eisner. 1996. Three new probabilistic mod-els for dependency parsing: an exploration. In Pro-ceedings of the 16th conference on Computational linguistics -Volume 1 , pages 340 X 345, Morristown,
NJ, USA. Association for Computational Linguis-tics.
 Kuzman Ganchev, Jennifer Gillenwater, and Ben
Taskar. 2009. Dependency grammar induction via bitext projection constraints. In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on
Natural Language Processing of the AFNLP: Vol-ume 1 -Volume 1 , ACL-IJCNLP  X 09, pages 369 X  377, Morristown, NJ, USA. Association for Compu-tational Linguistics.
 Yoav Goldberg and Michael Elhadad. 2010. An effi-cient algorithm for easy-first non-directional depen-dency parsing. In Human Language Technologies: The 2010 Annual Conference of the North American
Chapter of the Association for Computational Lin-guistics , HLT  X 10, pages 742 X 750, Morristown, NJ, USA. Association for Computational Linguistics. Samar Husain, Prashanth Mannem, Bharath Ambati, and Phani Gadde. 2010. Icon 2010 tools contest on indian language dependency parsing. In Proceed-ings of ICON 2010 NLP Tools Contest .
 Rebecca Hwa, Philip Resnik, Amy Weinberg, Clara
Cabezas, and Okan Kolak. 2005. Bootstrapping parsers via syntactic projection across parallel texts. Nat. Lang. Eng. , 11:311 X 325, September.
 Wenbin Jiang and Qun Liu. 2010. Dependency parsing and projection based on word-pair classification. In
Proceedings of the 48th Annual Meeting of the As-sociation for Computational Linguistics , ACL  X 10, pages 12 X 20, Morristown, NJ, USA. Association for Computational Linguistics.
 P. Koehn. 2005. Europarl: A parallel corpus for statis-tical machine translation. In MT summit , volume 5. Citeseer.
 Marco Kuhlmann and Joakim Nivre. 2006. Mildly non-projective dependency structures. In Proceed-ings of the COLING/ACL on Main conference poster sessions , pages 507 X 514, Morristown, NJ, USA. As-sociation for Computational Linguistics.
 Mitchell P. Marcus, Beatrice Santorini, and Mary A.
Marcinkiewicz. 1994. Building a large annotated corpus of english: The penn treebank. Computa-tional Linguistics , 19(2):313 X 330.
 R. McDonald, K. Crammer, and F. Pereira. 2005. On-line large-margin training of dependency parsers. In
Proceedings of the Annual Meeting of the Associa-tion for Computational Linguistics (ACL) . Jens Nilsson and Joakim Nivre. 2008. Malteval: an evaluation and visualization tool for dependency parsing. In Proceedings of the Sixth International Language Resources and Evaluation (LREC X 08) , Marrakech, Morocco, may. European Language
Resources Association (ELRA). http://www.lrec-conf.org/proceedings/lrec2008/.
 Joakim Nivre, Johan Hall, Sandra K  X  ubler, Ryan Mc-donald, Jens Nilsson, Sebastian Riedel, and Deniz
Yuret. 2007. The CoNLL 2007 shared task on de-pendency parsing. In Proceedings of the CoNLL
Shared Task Session of EMNLP-CoNLL 2007 , pages 915 X 932, Prague, Czech Republic. Association for Computational Linguistics.
 Joakim Nivre. 2003. An Efficient Algorithm for Pro-jective Dependency Parsing. In Eighth International Workshop on Parsing Technologies , Nancy, France. Joakim Nivre. 2009. Non-projective dependency pars-ing in expected linear time. In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on
Natural Language Processing of the AFNLP , pages 351 X 359, Suntec, Singapore, August. Association for Computational Linguistics.
 Franz Josef Och and Hermann Ney. 2003. A sys-tematic comparison of various statistical alignment models. Computational Linguistics , 29(1):19 X 51. Avinesh PVS. and Karthik Gali. 2007. Part-Of-Speech Tagging and Chunking using Conditional Random
Fields and Transformation-Based Learning. In Pro-ceedings of the IJCAI and the Workshop On Shallow
Parsing for South Asian Languages (SPSAL) , pages 21 X 24.
 Roi Reichart and Ari Rappoport. 2007. Self-training for enhancement and domain adaptation of statisti-cal parsers trained on small datasets. In Proceed-ings of the 45th Annual Meeting of the Associa-tion of Computational Linguistics , pages 616 X 623,
Prague, Czech Republic, June. Association for Com-putational Linguistics.
 Libin Shen and Aravind Joshi. 2008. LTAG depen-dency parsing with bidirectional incremental con-struction. In Proceedings of the 2008 Conference on
Empirical Methods in Natural Language Process-ing , pages 495 X 504, Honolulu, Hawaii, October. As-sociation for Computational Linguistics.
 L. Shen, G. Satta, and A. Joshi. 2007. Guided learn-ing for bidirectional sequence classification. In Pro-ceedings of the 45th Annual Meeting of the Associa-tion for Computational Linguistics (ACL) .
 Mark Steedman, Miles Osborne, Anoop Sarkar, Stephen Clark, Rebecca Hwa, Julia Hockenmaier,
Paul Ruhlen, Steven Baker, and Jeremiah Crim. 2003. Bootstrapping statistical parsers from small datasets. In Proceedings of the tenth conference on
European chapter of the Association for Computa-tional Linguistics -Volume 1 , EACL  X 03, pages 331 X  338, Morristown, NJ, USA. Association for Compu-tational Linguistics.
 Jrg Tiedemann. 2002. MatsLex -a multilingual lex-ical database for machine translation. In Proceed-ings of the 3rd International Conference on Lan-guage Resources and Evaluation (LREC X 2002) , vol-ume VI, pages 1909 X 1912, Las Palmas de Gran Ca-naria, Spain, 29-31 May.
 Sriram Venkatapathy. 2008. Nlp tools contest -2008: Summary. In Proceedings of ICON 2008 NLP Tools Contest .
 Hiroyasu Yamada and Yuji Matsumoto. 2003. Statis-tical Dependency Analysis with Support Vector Ma-chines. In In Proceedings of IWPT , pages 195 X 206. David Yarowsky, Grace Ngai, and Richard Wicen-towski. 2001. Inducing multilingual text analysis tools via robust projection across aligned corpora.
In Proceedings of the first international conference on Human language technology research , HLT  X 01, pages 1 X 8, Morristown, NJ, USA. Association for
Computational Linguistics.
