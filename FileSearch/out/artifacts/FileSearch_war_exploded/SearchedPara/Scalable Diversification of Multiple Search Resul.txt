 The explosion of big data emphasizes the need for scalable data diversification, especially for applications based on web, scientific, and business databases. However, achieving effec-tive diversification in a multi-user environment is a rather challenging task due to the inherent high processing costs of current data diversification techniques. In this paper, we ad-dress the concurrent diversification of multiple search results using various approximation techniques that provide orders of magnitude reductions in processing cost, while maintain-ing comparable quality of diversification as compared to se-quential methods. Our extensive experimental evaluation shows the scalability exhibited by our proposed methods un-der various workload settings.
 H.2.4 [ Database Management ]: Systems X  Query Pro-cessing Algorithms, Design, Experimentation, Performance.
The explosion of data in many web, scientific and busi-ness domains dictates the need for effective methods to assist users in quickly locating results of high interest. One such method is search result diversification , in which the goal is to select and present to end users a representative and interest-ing subset of the available results [3]. Realizing an effective diversification system , however, is a rather challenging task. This is mainly due to the inherent high processing costs of current diversification schemes. This challenge is further ac-centuated in a multi-user environment, in which multiple queries are executed and diversified concurrently.  X  This work was partially supported by Australian Research Council grant DP110102777.  X 
Work done while author was visiting the School of ITEE at the University of Queensland.
 Figure 1: Multiple Search Result Diversification Model.
Since their early stages, data management platforms have been designed to support the concurrent execution of queries and transactions. Concurrency is an indispensable feature for any database system as it allows for maximizing the uti-lization of limited resources as well as exploiting the over-laps that naturally occur between different data processing tasks. For instance, data warehousing systems typically em-ploy multiple query optimization techniques that leverage partial aggregation [6] and data subsumption [11] to mini-mize the overall costs for processing multiple queries. Sim-ilar to data warehouses, today data exploration platforms host multiple users running multiple data analysis sessions (e.g., [7, 2]). Such platforms highlight the need for a scal-able diversification system that is able to effectively facilitate data exploration tasks.

In our previous work, we have introduced the DoS scheme, which leverages the natural overlap in search results in con-junction with concurrent diversification [8]. DoS provides the same quality of diversification as that of the sequential methods, while reducing the processing costs. In this pa-per, we further generalize and extend the DoS scheme to ex-ploit various approximation techniques that provide orders of magnitude reductions in processing cost, while maintain-ing a quality of diversification comparable to that of near optimal schemes. Our extensive experimental evaluation on both real and synthetic data sets shows the scalability ex-hibited by our proposed scheme under various workload set-tings, and the significant benefits it provides compared to existing methods.

The remainder of this paper is organized as follows. We define the multiple result diversification problem in Section 2. Our proposed solutions are presented in Section 3. The experimental evaluation is reported in Section 4.
In this work, we consider queries submitted to a data ex-ploration platform (e.g., [7, 2]). Such queries retrieve a num-ber of results, or items, from the database, which can be gen-erally viewed as a set of attribute values represented as data points in a multi-dimensional data space. In such systems, a query is first processed against the stored database, and the generated results are then further processed in-memory through a diversification system (Figure 1).
Let X = { x 1 ,...,x m } be a set of results for some user query. In general, the goal of result diversification is to select a subset S  X  of X with | S  X  | = k , k  X  m , such that the diversity of the results in S  X  is maximized.

In this work, we focus on the content-based definition of diversity, whose objective is to maximize the overall dissim-ilarity within a set of selected objects [3, 12]. In particular, given a metric d that measures the distance between two results, the diversity of a set S is measured by a diversity function f ( S,d ) that captures the dissimilarity between the results in S . So, the diversification problem is defined as:
Definition 1. Let X be the set of results that satisfy a user query and k be a positive integer such that k  X  | X | . Let also d be a distance metric and f a diversity function. Then, Search Result Diversification is defined as selecting a subset S  X  of X , such that:
In this paper, diversity is measured based on the average of the pairwise distances between results [3, 12]. Hence, f ( S,d ) is defined as:
Result diversification is typically performed in-memory and involves no additional I/O costs. However, diversifica-tion remains computationally intensive and has been shown to be NP-hard (e.g., [4]), which essentially renders the loca-tion of an optimally diverse set S  X  impractical. Meanwhile, the need for low-cost (i.e., efficient) and high-accuracy (i.e., effective) solutions to the diversification problem has moti-vated a large body of research and led to developing different practical heuristics for locating a near-optimal solution S to approximate S  X  (e.g., [3, 12, 1]). Among those heuristics, a commonly used simple Greedy approach has been proven to provide a 1 / 2 -approximation of the optimal solution ([10]).
The Greedy heuristic initializes the diversified set S by the most distant pair of results in X . Then it proceeds with number of iterations, until k results are selected. In each iteration, a result x i with the maximum set distance from S is included in S . Where set distance between x i and S is defined as: d s ( x i ,S ) = P
Clearly, the complexity of this Greedy heuristic in terms of computed pairwise distances is O ( k 2 | X | ), which makes it a very reasonable choice in interactive online search.
In environments, in which multiple queries are submitted by a number of different users, we define the diversification of multiple search results as follows:
Definition 2. Let Q = { Q 1 ,Q 2 ,...,Q n } be a set of n user queries. Let X i be the set of results that satisfy Q and k i be a positive integer with k i  X  | X i | , 1  X  i  X  n . Let also d be a distance metric and f a diversity function. Then, Multiple Search Result Diversification is defined as selecting a set S  X  of n subsets { S  X  1 ,S  X  2 ,...,S  X  n } , such that: According to Definition 2, a diversification system should ideally locate an optimal set of diverse subsets S input queries. However, due to the inherit NP-hardness of the diversification problem, this is not feasible. To measure the efficiency and the effectiveness of a diversification sys-tem, let C ( S ) be the total data processing cost incurred to create the set of diversified subsets S . Similarly, let D ( a measure that captures the overall diversification, such as the the total value of diversity across the set of diversified subsets S . Hence, the success of any diversification system can be easily measured in terms of those two parameters: D (
S ) and C ( S ). In particular, our goal in this work is to develop diversification scheme that is able to strike a fine balance between the efficiency of diversification (i.e., mini-mize C ( S )) and its effectiveness (i.e., maximize D ( S next section, we present our scheme and discuss its impact on both the efficiency and effectiveness of diversification.
To keep this paper self-contained, in Section 3.1 we present baseline solutions to the multiple results diversification prob-lem based on our previous work on the DoS scheme [8]. In Section 3.2, we further generalize and extend the DoS scheme to exploit various approximation techniques.
A na  X   X ve solution to simultaneously diversifying multiple search results would be to retrieve the search result X i each query Q i  X  Q and then apply the Greedy heuristic on each X i separately to detect its respective diverse subset S . We refer to that method as  X  X a  X   X ve Greedy X . Under Na  X   X ve Greedy, each search result is diversified independently. Hence, its total processing cost is:
Na  X   X ve Greedy treats each query independently, hence its complexity increases linearly with the increase in the num-ber of result sets to be diversified. However, it is often the case for simultaneous queries to have overlapping result sets. This observation motivated the proposal of our DoS-Overlap scheme [8]. Instead of processing the overlapping portions of the results multiple times, DoS-Overlap processes those portions only once leading to an overall amortized process-ing cost. In that sense, DoS-Overlap can be perceived as an instance of the partial aggregation technique for multiple query optimization (e.g., [6], [5]).

DoS-Overlap is based on the Na  X   X ve Greedy algorithm pre-sented above. In DoS-Overlap, however, all the search re-sults are processed concurrently and in each iteration, one item (i.e., result) of X i is selected for inclusion in S n . Towards exploiting the overlap in search results for con-current processing, DoS-Overlap utilizes the following prop-erties: (1) the distance function d between any item x j  X  X Figure 2: Result and diverse sets for two queries. Diverse items (i.e., results) are shown in bold. and the items in S i is computed independently of any other items in X i , and (2) the set distance d s between any item x  X  X i and S i can be assembled from its partial values.
To illustrate the second observation above, consider two queries Q 1 and Q 2 and their respective result sets X 1 and X . Further, assume that in any arbitrary iteration of DoS-Overlap, S 1 and S 2 are the current diverse sets of X 1 and X , respectively. In such iteration, S 1 and S 2 might have few overlapping results (as shown in Figure 2). In that case, S can be clearly expressed as the difference between S 1 and S union their intersection. That is, S 1 = (( S 1 \ S 2 )  X  ( S S 2 can be expressed similarly.

Hence, for an item x j  X  X 1 , the distance d s ( x j computed as: d s ( x j ,S 1 ) = d s ( x j ,S 1 \ S 2 ) + d Similarly, if item x j  X  X 2 , the distance d s ( x j ,S puted as: d s ( x j ,S 2 ) = d s ( x j ,S 2 \ S 1 )+ d s ( x the term d s ( x j ,S 1  X  S 2 ) is evaluated only once for every item x  X  X 1  X  X 2 when computing d s ( x j ,S 1 ) and d s ( x j
The combination of the first and second observation listed above allows DoS-Overlap to exploit the data overlap exhib-ited by the queries Q 1 and Q 2 along two orthogonal dimen-sions: (1) overlap in result sets (i.e., process the sets X X \ X 1 and X 1  X  X 2 separately at each iteration of the algo-rithm), and (2) overlap in diverse sets (i.e., process the set S  X  S 2 only once at each iteration of the algorithm). Hence, the processing cost C ( S 1 ,S 2 ) incurred by DoS-Overlap in detecting the diverse set for X 1 and X 2 can be expressed as:
Compared to Na  X   X ve Greedy, DoS-Overlap produces ex-actly the same set of diverse sets. During each iteration, however, DoS-Overlap clearly requires less operations for the computation and comparison of distance functions.
Clearly the amount of reduction in processing cost pro-vided by DoS-Overlap depends on two orthogonal factors: (i) the amount of overlap among the diverse sets, and (ii) the amount of overlap among the result sets. For instance, con-sider again Eq. 1. For a sufficiently large | X 1  X  X 2 | , DoS-Overlap will provide significant gains over Na  X   X ve Greedy only if | S 1  X  S 2 | is also large enough. This amount of gain, how-ever, is expected to decrease with the decrease in | S 1  X  S until it eventually disappears as | S 1  X  S 2 | approaches zero, despite of a large | X 1  X  X 2 | . Hence, an overlap in the re-sult sets X i cannot necessarily guarantee any performance gains in its own and is dependent on the amount of overlap in the diverse sets S i . Next, we describe our new scheme DoS-Grid, which overcomes that limitation.

DoS-Grid exploits a more relaxed notion of overlap to re-duce the computational costs of diversification by orders of magnitude while achieving high levels of quality in diversi-fication. Towards detecting and leveraging overlaps in both the result sets and diverse sets, DoS-Grid incorporates a Figure 3: Mapping objects to the grid.The shaded cells de-note the overlapping region for the two queries. preprocessing phase in which the following operations take place: 1. Grid Construction: DoS-Grid imposes a multi di-2. Data Mapping: DoS-Grid scans the set of multiple
At this point, it is important to classify the types of over-lap detected by DoS-Grid into the following: 1. Point-based overlap: Under point-based overlap, 2. Cell-based overlap: Under cell-based overlap, two
Clearly, point-based overlap detects the exact natural over-lap among search results, in which different search results might contain identical items (i.e., points). Meanwhile, cell-based overlap introduces approximate overlaps, in which dif-ferent items from the same search result or different search results are considered identical. If only point-based overlap is considered, DoS-Grid introduces no approximations and is equivalent to DoS-Overlap as presented in Section 3.1.
To illustrate the notion of cell-based overlap, consider again two user queries Q 1 , and Q 2 and their respective re-sult sets X 1 , and X 2 and diverse sets S 1 , and S 2 . Hence, it is possible to have two subsets S 0 1 and S 0 2 that are selected for inclusion in S 1 and S 2 , respectively, such that each item in S 0 1 is close to some item in S 0 2 , but not identical. In that case, there will be no natural overlap between S 1 for DoS-Overlap to exploit (i.e., | S 1  X  S 2 | = 0). However, if the individual results (i.e., items) in S 0 1 and S 0 2 very similar to each other were considered the same, then this overlap between the diverse subsets would increase lead-ing to a reduction in the total computational cost. That is Algorithm 1 DoS-Grid.
 Input: Result sets X 1 ,...,X n , an integer k , a resolution  X  . Output: Diverse sets S 1 ,...,S n with the k most diverse 1: G  X  Construct grid with resolution  X  2: map X 1  X  ...  X  X n to G 3: select a representative Rep ( c ) for each cell c in G 4: for i = 1 to n do 5: X R i = { Rep ( c j ) : x j  X  X i with x j mapped to c 6: end for 7: S 1 ,...,S n  X  DoS-Overlap(( X R 1 ,...,X R n ), k ) 8: refine S 1 ,...,S n 9: return S 1 ,...,S n precisely the intuition underlying DoS-Grid algorithm (Al-gorithm 1), which involves the following steps: 1. Selecting grid representatives. DoS-Grid exploits 2. Approximating result sets. Given the grid repre-3. Locating diverse sets. In DoS-Grid, the diverse
In comparison to DoS-Overlap, DoS-Grid provides the fol-lowing advantages:
Figure 4: Alternative replacement options for DoS-Grid
In order to understand and control the approximation in-troduced by DoS-Grid, notice that the value of the grid res-olution  X  acts as a  X  X nob X  for tuning the amount of achieved approximation. Moreover, due to approximation, a result s in the approximate diverse set S R i is basically a representa-tive of some result that should be included in the actual diverse set S i but not the exact one. In fact, S also contain results that belong to other sets X j , such that j 6 = i . For those reasons, DoS-Grid employs an additional refinement step to replace those representatives with more accurate results in order to transform S R i into S i . In the fol-lowing, we discuss several alternatives for performing such refinement in terms of: (i) method of refinement (i.e., how to refine), and (ii) timing of refinement (i.e., when to refine). Regarding the method of refinement, DoS-Grid first maps s to its corresponding cell c l . This is a straightforward step since s R i = Rep ( c l ). Then, the goal is to replace s a point s i in c l that is as close as possible to the one that would have been generated without introducing any approx-imation. Towards this, we have considered the following two alternatives: 1. Nearest Neighbor Replacement . s R i is replaced with 2. Greedy Replacement . s R i is replaced with s i , such that:
In terms of efficiency, Nearest Neighbor Replacement re-quires less number of distance computations and compar-isons than a Greedy Replacement. For example if there are m points that belong to X i in c l , Nearest Neighbor replace-ment will perform only m distance computations to find a point closest to Rep ( c l ), whereas Greedy replacement will perform m | S R i | distance computations. On the other hand, the overall diversity provided by Greedy replacement is ex-pected to be higher than or equal to that provided by the alternative Nearest Neighbor replacement. This is because Greedy replacement tries to select the best possible point in c l to replace Rep ( c l ) as it employs the same logic of the Greedy algorithm for diversification but at the local-level of a cell. For instance, as shown in Figure 4, x 2 selected by Greedy replacement has bigger distance from set S than x 1 selected by Nearest Neighbor replacement.

In terms of the timing of refinement, we have also consid-ered the following two alternatives: 1. Eager Refinement . The refinement step is applied at 2. Lazy Refinement . The refinement step is applied once
Clearly, eager refinement leverages approximation to only introduce overlaps between the result sets, but not the di-verse sets, for which it relies only on natural overlaps for cost reductions. Meanwhile, lazy refinement allows virtual over-lap in both diverse sets and result sets, which is expected to result in significant cost reductions.

Although DoS-Grid uses only representatives of search re-sults to evaluate diverse subsets, the diversity of S R i by DoS-Grid is comparable to S i computed by DoS-Overlap. This is because DoS-Overlap controls the trade-off between approximation and efficiency via tuning the grid resolution as well as configuring the refinement step described above. In the next section, we evaluate the impact of those parame-ters and others on the performance provided by DoS-Grid.
We perform several experiments to evaluate the efficiency and the effectiveness of the schemes presented in this paper. Our experimental testbed is summarized as follows: Performance Measures: The performance of each algo-rithm is measured based on the following metrics: Data and Queries: We use both synthetic and real data sets. Our synthetic data sets consist of points in the D -dimensional Euclidean space, where D is a simulation pa-rameter. Points are either uniformly distributed ( X  X niform X ) or form clusters around a random number of points ( X  X lus-tered X ). Our real data set  X  X ities X  1 contains 2-dimensional points representing the locations of 5922 towns. For all the data sets, dimensions are normalized in [0 X 1]. In each of the following experiments, we generate a random set of range queries such that the number of queries n is in the range [2 X 1000] and the default is 20 queries.
In the following experimental results, we report average values over ten runs with different sets of range queries. Impact of Diverse Set Size: Figure 5(a) shows the aver-age number of operations performed by Greedy and DoS for different values of k for our uniform data set. As the value of k increases, the number of performed operations increases for all schemes. However, DoS-Overlap is performing up to 20% less operations when compared to Greedy. Moreover, the cost savings by DoS-Grid are more than 94% on average for all values of k .

Figure 5(b) shows that the overall diversity decreases with k for all schemes. The diversity achieved by DoS-Overlap is equal to that achieved by Greedy as no approximation tech-niques are used. On the contrary, our proposed DoS-Grid operates on the representatives of the data, which essentially introduces virtual overlap among search results. Naturally, this leads to DoS-Grid achieving less diverse solutions than DoS-Overlap. This loss in diversity, however, is marginal when compared to the gains achieved in efficiency. For in-stance, while the loss in diversity offered by DoS-Grid varies between 2% to 10%, the benefits it provides in terms of cost savings is more than 95%. Figure 5(c) illustrates the diver-sity under the l 2 norm metric, which captures the fairness achieved by each scheme. The figure shows that the fairness of DoS-Grid is also comparable to DoS-Overlap.

We note that all DoS-Grid variants perform orders of mag-nitude less operations than both Greedy and DoS-Overlap (as shown in Figure 5(a)). Among those variants, DoS-Grid(Greedy, Eager) provides better diversity (as shown in Figure 5(b)) at the expense of a slightly higher cost. For briefty, in the rest of this section, we only present the re-sults of DoS(Greedy, Eager), unless otherwise mentioned.
Figure 6 reports on the performance on clustered and cities data sets. Figure 6(a) shows that DoS-Overlap per-forms up to 20% less operations as compared to Greedy. Meanwhile, DoS-Grid achieves up to 94% reductions in num-ber of operations. Figure 6(b) shows that for clustered data http://www.chorochronos.com set, DoS-Grid achieves diversity within 6% of that of DoS-Overlap. Figures 6(c) and 6(d) show similar performance for the cities data set. Impact of Number of Queries: Figure 7 shows that the number of performed operations increases for all the algo-rithms with increasing number of queries. The cost savings achieved by DoS-Overlap increase gradually as n approaches 1000, and reaches upto 50%. Meanwhile, DoS-Grid performs consistently and achieves significant cost savings. For in-stance, as Figure 7 shows, the cost reductions provided by DoS-Grid are up to 99% with only 7% loss in diversity (as shown in Figure 7(b)). Impact of Grid Resolution: Figure 8(a) shows the num-ber of performed operations vs. the employed grid resolu-tion  X  . In the two extreme cases, where  X  ' 0 (i.e., each cell contains a single result or many identical results) or  X  = 1 (i.e., there is only one cell in the grid), DoS-Grid is reduced to DoS-Overlap and Greedy, respectively. In-between these two extremes, as the resolution increases, the number of operations decreases until a local minimum is reached and later increases again. This pattern is because when increasing  X  , the number of cells decreases, which leads DoS-Grid to evaluate fewer representatives. However when the number of representatives become very small (i.e., less than k ), DoS-Grid selects multiple items from the same grid cell. The cost of this process depends on the density of the cell. With higher values of  X  we have highly populated grid cells, therefore the number of operations performed by DoS-Grid starts increasing. Among the DoS-Grid variants, DoS-Grid(Eager, Greedy) is the most expensive since its re-finement process is more involved, especially for higher res-olutions where each cell contains more results. However, DoS-Grid(Eager, Greedy) is the most effective variant in terms of diversity (Figure 8(b)).
In this paper, we focus on the concurrent diversification of multiple search results, and propose an efficient scheme that not only leverages the natural overlap in the search re-sults, but also increases this overlap by mapping the data space to a multi-dimensional grid. Our scheme provides so-lutions of quality comparable to that of sequential methods, while significantly reducing processing costs as shown by our experimental evaluation.
