 Recent years have witnessed rapid developments in statistical machine translation (SMT), with con-siderable improvements in translation quality. For certain language pairs and applications, automated translations are now beginning to be considered acceptable, especially in domains where abundant parallel corpora exist.

However, these advances are being adopted only slowly and somewhat reluctantly in profes-sional localization and post-editing environments. Post-editors have long relied on translation memo-ries (TMs) as the main technology assisting trans-lation, and are understandably reluctant to give them up. There are several simple reasons for this: 1) TMs are useful; 2) TMs represent con-siderable effort and investment by a company or (even more so) an individual translator; 3) the fuzzy match score used in TMs offers a good ap-proximation of post-editing effort, which is useful both for translators and translation cost estimation and, 4) current SMT translation confidence esti-mation measures are not as robust as TM fuzzy match scores and professional translators are thus not ready to replace fuzzy match scores with SMT internal quality measures.

There has been some research to address this is-sue, see e.g. (Specia et al., 2009a) and (Specia et al., 2009b). However, to date most of the research has focused on better confidence measures for MT, e.g. based on training regression models to per-form confidence estimation on scores assigned by post-editors (cf. Section 2).

In this paper, we try to address the problem from a different perspective. Given that most post-editing work is (still) based on TM output, we pro-pose to recommend MT outputs which are better than TM hits to post-editors. In this framework, post-editors still work with the TM while benefit-ing from (better) SMT outputs; the assets in TMs are not wasted and TM fuzzy match scores can still be used to estimate (the upper bound of) post-editing labor.

There are three specific goals we need to achieve within this framework. Firstly, the rec-ommendation should have high precision, other-wise it would be confusing for post-editors and may negatively affect the lower bound of the post-editing effort. Secondly, although we have full access to the SMT system used in this paper, our method should be able to generalize to cases where SMT is treated as a black-box, which is of-ten the case in the translation industry. Finally, post-editors should be able to easily adjust the rec-ommendation threshold to particular requirements without having to retrain the model.

In our framework, we recast translation recom-mendation as a binary classification (rather than regression) problem using SVMs, perform RBF kernel parameter optimization, employ posterior probability-based confidence estimation to sup-port user-based tuning for precision and recall, ex-periment with feature sets involving MT-, TM-and system-independent features, and use automatic MT evaluation metrics to simulate post-editing ef-fort.

The rest of the paper is organized as follows: we first briefly introduce related research in Section 2, and review the classification SVMs in Section 3. We formulate the classification model in Section 4 and present experiments in Section 5. In Section 6, we analyze the post-editing effort approximated by the TER metric (Snover et al., 2006). Section 7 concludes the paper and points out avenues for future research. Previous research relating to this work mainly fo-cuses on predicting the MT quality.

The first strand is confidence estimation for MT, initiated by (Ueffing et al., 2003), in which pos-terior probabilities on the word graph or N-best list are used to estimate the quality of MT out-puts. The idea is explored more comprehensively in (Blatz et al., 2004). These estimations are often used to rerank the MT output and to optimize it directly. Extensions of this strand are presented in (Quirk, 2004) and (Ueffing and Ney, 2005). The former experimented with confidence esti-mation with several different learning algorithms; the latter uses word-level confidence measures to determine whether a particular translation choice should be accepted or rejected in an interactive translation system.

The second strand of research focuses on com-bining TM information with an SMT system, so that the SMT system can produce better target lan-guage output when there is an exact or close match in the TM (Simard and Isabelle, 2009). This line of research is shown to help the performance of MT, but is less relevant to our task in this paper.
A third strand of research tries to incorporate confidence measures into a post-editing environ-ment. To the best of our knowledge, the first paper in this area is (Specia et al., 2009a). Instead of modeling on translation quality (often measured by automatic evaluation scores), this research uses regression on both the automatic scores and scores assigned by post-editors. The method is improved in (Specia et al., 2009b), which applies Inductive Confidence Machines and a larger set of features to model post-editors X  judgement of the translation quality between  X  X ood X  and  X  X ad X , or among three levels of post-editing effort.

Our research is more similar in spirit to the third strand. However, we use outputs and features from the TM explicitly; therefore instead of having to solve a regression problem, we only have to solve a much easier binary prediction problem which can be integrated into TMs in a straightforward manner. Because of this, the precision and recall scores reported in this paper are not directly com-parable to those in (Specia et al., 2009b) as the lat-ter are computed on a pure SMT system without a TM in the background. SVMs (Cortes and Vapnik, 1995) are binary clas-sifiers that classify an input instance based on de-cision rules which minimize the regularized error function in (1): where ( x i ,y i )  X  R n  X { +1 ,  X  1 } are l training instances that are mapped by the function  X  to a higher dimensional space. w is the weight vec-tor,  X  is the relaxation variable and C&gt; 0 is the penalty parameter.

Solving SVMs is viable using the  X  X ernel trick X : finding a kernel function K in (1) with K ( x i , x j ) =  X ( x i ) T  X ( x j ) . We perform our ex-periments with the Radial Basis Function (RBF) kernel, as in (2):
When using SVMs with the RBF kernel, we have two free parameters to tune on: the cost pa-rameter C in (1) and the radius parameter  X  in (2).
In each of our experimental settings, the param-eters C and  X  are optimized by a brute-force grid search. The classification result of each set of pa-rameters is evaluated by cross validation on the training set. We use an SVM binary classifier to predict the rel-ative quality of the SMT output to make a recom-mendation. The SVM classifier uses features from the SMT system, the TM and additional linguis-tic features to estimate whether the SMT output is better than the hit from the TM. 4.1 Problem Formulation As we treat translation recommendation as a bi-nary classification problem, we have a pair of out-puts from TM and MT for each sentence. Ideally the classifier will recommend the output that needs less post-editing effort. As large-scale annotated data is not yet available for this task, we use auto-matic TER scores (Snover et al., 2006) as the mea-sure for the required post-editing effort. In the fu-ture, we hope to train our system on HTER (TER with human targeted references) scores (Snover et al., 2006) once the necessary human annotations are in place. In the meantime we use TER, as TER is shown to have high correlation with HTER.
We label the training examples as in (3):
Each instance is associated with a set of features from both the MT and TM outputs, which are dis-cussed in more detail in Section 4.3. 4.2 Recommendation Confidence Estimation In classical settings involving SVMs, confidence levels are represented as margins of binary predic-tions. However, these margins provide little in-sight for our application because the numbers are only meaningful when compared to each other. What is more preferable is a probabilistic confi-dence score (e.g. 90% confidence) which is better understood by post-editors and translators.
We use the techniques proposed by (Platt, 1999) and improved by (Lin et al., 2007) to obtain the posterior probability of a classification, which is used as the confidence score in our system.
Platt X  X  method estimates the posterior probabil-ity with a sigmod function, as in (4): where f = f ( x ) is the decision function of the estimated SVM. A and B are parameters that min-imize the cross-entropy error function F on the training data, as in Eq. (5): where z = ( A,B ) is a parameter setting, and N + and N  X  are the numbers of observed positive and negative examples, respectively, for the label y . These numbers are obtained using an internal cross-validation on the training set. 4.3 The Feature Set We use three types of features in classification: the MT system features, the TM feature and system-independent features. 4.3.1 The MT System Features These features include those typically used in SMT, namely the phrase-translation model scores, the language model probability, the distance-based reordering score, the lexicalized reordering model scores, and the word penalty. 4.3.2 The TM Feature The TM feature is the fuzzy match (Sikes, 2007) cost of the TM hit. The calculation of fuzzy match score itself is one of the core technologies in TM systems and varies among different vendors. We compute fuzzy match cost as the minimum Edit Distance (Levenshtein, 1966) between the source and TM entry, normalized by the length of the source as in (6), as most of the current implemen-tations are based on edit distance while allowing some additional flexible matching. where s is the source side of t , the sentence to translate, and e is the source side of an entry in the TM. For fuzzy match scores F , this fuzzy match cost h f m roughly corresponds to 1  X  F . The differ-ence in calculation does not influence classifica-tion, and allows direct comparison between a pure TM system and a translation recommendation sys-tem in Section 5.4.2. 4.3.3 System-Independent Features We use several features that are independent of the translation system, which are useful when a third-party translation service is used or the MT system is simply treated as a black-box. These features are source and target side LM scores, pseudo source fuzzy match scores and IBM model 1 scores.
 Source-Side Language Model Score and Per-plexity. We compute the language model (LM) score and perplexity of the input source sentence on a LM trained on the source-side training data of the SMT system. The inputs that have lower per-plexity or higher LM score are more similar to the dataset on which the SMT system is built.
 Target-Side Language Model Perplexity. We compute the LM probability and perplexity of the target side as a measure of fluency. Language model perplexity of the MT outputs are calculated, and LM probability is already part of the MT sys-tems scores. LM scores on TM outputs are also computed, though they are not as informative as scores on the MT side, since TM outputs should be grammatically perfect.
 The Pseudo-Source Fuzzy Match Score. We translate the output back to obtain a pseudo source sentence. We compute the fuzzy match score between the original source sentence and this pseudo-source. If the MT/TM system performs well enough, these two sentences should be the same or very similar. Therefore, the fuzzy match score here gives an estimation of the confidence level of the output. We compute this score for both the MT output and the TM hit.
 The IBM Model 1 Score. The fuzzy match score does not measure whether the hit could be a correct translation, i.e. it does not take into ac-count the correspondence between the source and target, but rather only the source-side information. For the TM hit, the IBM Model 1 score (Brown et al., 1993) serves as a rough estimation of how good a translation it is on the word level; for the MT output, on the other hand, it is a black-box feature to estimate translation quality when the in-formation from the translation model is not avail-able. We compute bidirectional (source-to-target and target-to-source) model 1 scores on both TM and MT outputs. 5.1 Experimental Settings Our raw data set is an English X  X rench translation memory with technical translation from Syman-tec, consisting of 51K sentence pairs. We ran-domly selected 43K to train an SMT system and translated the English side of the remaining 8K sentence pairs. The average sentence length of the training set is 13.5 words and the size of the training set is comparable to the (larger) TMs used in the industry. Note that we remove the exact matches in the TM from our dataset, because ex-act matches will be reused and not presented to the post-editor in a typical TM setting.

As for the SMT system, we use a stan-dard log-linear PB-SMT model (Och and Ney, 2002): G IZA ++ implementation of IBM word alignment model 4, 1 the refinement and phrase-extraction heuristics described in (Koehn et al., 2003), minimum-error-rate training (Och, 2003), a 5 -gram language model with Kneser-Ney smoothing (Kneser and Ney, 1995) trained with SRILM (Stolcke, 2002) on the English side of the training data, and Moses (Koehn et al., 2007) to decode. We train a system in the opposite direc-tion using the same data to produce the pseudo-source sentences.
 We train the SVM classifier using the lib-SVM (Chang and Lin, 2001) toolkit. The SVM-training and testing is performed on the remaining 8K sentences with 4 -fold cross validation. We also report 95% confidence intervals.

The SVM hyper-parameters are tuned using the training data of the first fold in the 4 -fold cross val-idation via a brute force grid search. More specifi-cally, for parameter C in (1) we search in the range [2  X  5 , 2 15 ] , and for parameter  X  (2) we search in the range [2  X  15 , 2 3 ] . The step size is 2 on the expo-nent. 5.2 The Evaluation Metrics We measure the quality of the classification by precision and recall. Let A be the set of recom-mended MT outputs, and B be the set of MT out-puts that have lower TER than TM hits. We stan-dardly define precision P , recall R and F-value as in (7): 5.3 Recommendation Results In Table 1, we report recommendation perfor-mance using MT and TM system features (S YS ), system features plus system-independent features (A LL :S YS +S I ), and system-independent features only (S I ).
 S YS 82.53  X  1.17 96.44  X  0.68 88.95  X  .56 S I 82.56  X  1.46 95.83  X  0.52 88.70  X  .65 A LL 83.45  X  1.33 95.56  X  1.33 89.09  X  .24
From Table 1, we observe that MT and TM system-internal features are very useful for pro-ducing a stable (as indicated by the smaller con-fidence interval) recommendation system (S YS ). Interestingly, only using some simple system-external features as described in Section 4.3.3 can also yield a system with reasonably good per-formance (S I ). We expect that the performance can be further boosted by adding more syntactic and semantic features. Combining all the system-internal and -external features leads to limited gains in Precision and F-score compared to using only system-internal features (S YS ) only. This in-dicates that at the default confidence level, current system-external (resp. system-internal) features can only play a limited role in informing the sys-tem when current system-internal (resp. system-external) features are available. We show in Sec-tion 5.4.2 that combing both system-internal and -external features can yield higher, more stable pre-cision when adjusting the confidence levels of the classifier. Additionally, the performance of system S
I is promising given the fact that we are using only a limited number of simple features, which demonstrates a good prospect of applying our rec-ommendation system to MT systems where we do not have access to their internal features. 5.4 Further Improving Recommendation Table 1 shows that classification recall is very high, which suggests that precision can still be im-proved, even though the F-score is not low. Con-sidering that TM is the dominant technology used by post-editors, a recommendation to replace the hit from the TM would require more confidence, i.e. higher precision. Ideally our aim is to obtain a level of 0.9 precision at the cost of some recall, if necessary. We propose two methods to achieve this goal. 5.4.1 Classifier Margins We experiment with different margins on the train-ing data to tune precision and recall in order to obtain a desired balance. In the basic case, the training example would be marked as in (3). If we label both the training and test sets with this rule, the accuracy of the prediction will be maximized.
We try to achieve higher precision by enforc-ing a larger bias towards negative examples in the training set so that some borderline positive in-stances would actually be labeled as negative, and the classifier would have higher precision in the prediction stage as in (8).
We experiment with b in [0, 0.25] using MT sys-tem features and TM features. Results are reported in Table 2.

The highest accuracy and F-value is achieved by TER + 0 , as all other settings are trained on biased margins. Except for a small drop in TER +0 . 05 , other configurations all obtain higher precision than TER + 0 . We note that we can ob-tain 0.85 precision without a big sacrifice in recall with b =0.15, but for larger improvements on pre-cision, recall will drop more rapidly.

When we use b beyond 0.25, the margin be-comes less reliable, as the number of positive examples becomes too small. In particular, this causes the SVM parameters we tune on in the first fold to become less applicable to the other folds. This is one limitation of using biased margins to obtain high precision. The method presented in Section 5.4.2 is less influenced by this limitation. 5.4.2 Adjusting Confidence Levels An alternative to using a biased margin is to output a confidence score during prediction and to thresh-old on the confidence score. It is also possible to add this method to the SVM model trained with a biased margin.

We use the SVM confidence estimation tech-niques in Section 4.2 to obtain the confidence level of the recommendation, and change the con-fidence threshold for recommendation when nec-essary. This also allows us to compare directly against a simple baseline inspired by TM users. In a TM environment, some users simply ignore TM hits below a certain fuzzy match score F (usually from 0.7 to 0.8). This fuzzy match score reflects the confidence of recommending the TM hits. To obtain the confidence of recommending an SMT output, our baseline (F M ) uses fuzzy match costs h the level of confidence. In other words, the higher the fuzzy match cost of the TM hit is (lower fuzzy match score), the higher the confidence of recom-mending the SMT output. We compare this base-line with the three settings in Section 5. Figure 1: Precision Changes with Confidence Level
Figure 1 shows that the precision curve of F M is low and flat when the fuzzy match costs are low (from 0 to 0.6), indicating that it is unwise to recommend an SMT output when the TM hit has a low fuzzy match cost (corresponding to higher fuzzy match score, from 0.4 to 1). We also observe that the precision of the recommendation receives a boost when the fuzzy match costs for the TM hits are above 0.7 (fuzzy match score lower than 0.3), indicating that SMT output should be recom-mended when the TM hit has a high fuzzy match cost (low fuzzy match score). With this boost, the precision of the baseline system can reach 0.85, demonstrating that a proper thresholding of fuzzy match scores can be used effectively to discrimi-nate the recommendation of the TM hit from the recommendation of the SMT output.

However, using the TM information only does not always find the easiest-to-edit translation. For example, an excellent SMT output should be rec-ommended even if there exists a good TM hit (e.g. fuzzy match score is 0.7 or more). On the other hand, a misleading SMT output should not be rec-ommended if there exists a poor but useful TM match (e.g. fuzzy match score is 0.2).

Our system is able to tackle these complica-tions as it incorporates features from the MT and the TM systems simultaneously. Figure 1 shows that both the S YS and the A LL setting consistently outperform F M , indicating that our classification scheme can better integrate the MT output into the TM system than this naive baseline.

The S I feature set does not perform well when the confidence level is set above 0.85 (cf. the de-scending tail of the S I curve in Figure 1). This might indicate that this feature set is not reliable enough to extract the best translations. How-ever, when the requirement on precision is not that high, and the MT-internal features are not avail-able, it would still be desirable to obtain transla-tion recommendations with these black-box fea-tures. The difference between S YS and A LL is generally small, but A LL performs steadily better in [0.5, 0,8].
 5.5 Precision Constraints In Table 3 we also present the recall scores at 0.85 and 0.9 precision for S YS , S I and A LL models to demonstrate our system X  X  performance when there is a hard constraint on precision. Note that our system will return the TM entry when there is an exact match, so the overall precision of the system is above the precision score we set here in a ma-ture TM environment, as a significant portion of the material to be translated will have a complete match in the TM system.

In Table 3 for M ODEL @K, the recall scores are achieved when the prediction precision is better than K with 0.95 confidence. For each model, pre-cision at 0.85 can be obtained without a very big loss on recall. However, if we want to demand further recommendation precision (more conser-vative in recommending SMT output), the recall level will begin to drop more quickly. If we use only system-independent features (S I ), we cannot achieve as high precision as with other models even if we sacrifice more recall.

Based on these results, the users of the TM sys-tem can choose between precision and recall ac-cording to their own needs. As the threshold does not involve training of the SMT system or the SVM classifier, the user is able to determine this trade-off at runtime.

S YS 82.53  X  1.17 96.44  X  0.68 88.95  X  .56 +M1 82.87  X  1.26 96.23  X  0.53 89.05  X  .52 +LM 82.82  X  1.16 96.20  X  1.14 89.01  X  .23 +PS 83.21  X  1.33 96.61  X  0.44 89.41  X  .84 5.6 Contribution of Features In Section 4.3.3 we suggested three sets of system-independent features: features based on the source-and target-side language model (LM), the IBM Model 1 (M1) and the fuzzy match scores on pseudo-source (PS). We compare the contribu-tion of these features in Table 4.

In sum, all the three sets of system-independent features improve the precision and F-scores of the MT and TM system features. The improvement is not significant, but improvement on every set of system-independent features gives some credit to the capability of S I features, as does the fact that S
I features perform close to S YS features in Table 1. A natural question on the integration models is whether the classification reduces the effort of the translators and post-editors: after reading these recommendations, will they translate/edit less than they would otherwise have to? Ideally this ques-tion would be answered by human post-editors in a large-scale experimental setting. As we have not yet conducted a manual post-editing experi-ment, we conduct two sets of analyses, trying to show which type of edits will be required for dif-ferent recommendation confidence levels. We also present possible methods for human evaluation at the end of this section. 6.1 Edit Statistics We provide the statistics of the number of edits for each sentence with 0.95 confidence intervals, sorted by TER edit types. Statistics of positive in-stances in classification (i.e. the instances in which MT output is recommended over the TM hit) are given in Table 5.

When an MT output is recommended, its TM counterpart will require a larger average number of total edits than the MT output, as we expect. If we drill down, however, we also observe that many of the saved edits come from the Substitution cat-egory, which is the most costly operation from the post-editing perspective. In this case, the recom-mended MT output actually saves more effort for the editors than what is shown by the TER score. It reflects the fact that TM outputs are not actual translations, and might need heavier editing.
Table 6 shows the statistics of negative instances in classification (i.e. the instances in which MT output is not recommended over the TM hit). In this case, the MT output requires considerably more edits than the TM hits in terms of all four TER edit types, i.e. insertion, substitution, dele-tion and shift. This reflects the fact that some high quality TM matches can be very useful as a trans-lation. 6.2 Edit Statistics on Recommendations of We present the edit statistics of recommendations with higher confidence in Table 7. Comparing Ta-bles 5 and 7, we see that if recommended with higher confidence, the MT output will need sub-stantially less edits than the TM output: e.g. 3.28 fewer substitutions on average.

From the characteristics of the high confidence recommendations, we suspect that these mainly comprise harder to translate (i.e. different from the SMT training set/TM database) sentences, as indicated by the slightly increased edit operations on the MT side. TM produces much worse edit-candidates for such sentences, as indicated by the numbers in Table 7, since TM does not have the ability to automatically reconstruct an output through the combination of several segments. 6.3 Plan for Human Evaluation Evaluation with human post-editors is crucial to validate and improve translation recommendation. There are two possible avenues to pursue: In this paper we present a classification model to integrate SMT into a TM system, in order to facili-tate the work of post-editors. Insodoing we handle the problem of MT quality estimation as binary prediction instead of regression. From the post-editors X  perspective, they can continue to work in their familiar TM environment, use the same cost-estimation methods, and at the same time bene-fit from the power of state-of-the-art MT. We use SVMs to make these predictions, and use grid search to find better RBF kernel parameters.
We explore features from inside the MT sys-tem, from the TM, as well as features that make no assumption on the translation model for the bi-nary classification. With these features we make glass-box and black-box predictions. Experiments show that the models can achieve 0.85 precision at a level of 0.89 recall, and even higher precision if we sacrifice more recall. With this guarantee on precision, our method can be used in a TM envi-ronment without changing the upper-bound of the related cost estimation.

Finally, we analyze the characteristics of the in-tegrated outputs. We present results to show that, if measured by number, type and content of ed-its in TER, the recommended sentences produced by the classification model would bring about less post-editing effort than the TM outputs.

This work can be extended in the following ways. Most importantly, it is useful to test the model in user studies, as proposed in Section 6.3. A user study can serve two purposes: 1) it can validate the effectiveness of the method by mea-suring the amount of edit effort it saves; and 2) the byproduct of the user study  X  post-edited sen-tences  X  can be used to generate HTER scores to train a better recommendation model. Further-more, we want to experiment and improve on the adaptability of this method, as the current experi-ment is on a specific domain and language pair.
