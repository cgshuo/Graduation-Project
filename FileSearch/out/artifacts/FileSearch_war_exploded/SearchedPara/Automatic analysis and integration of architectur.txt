 ORIGINAL PAPER Tong Lu  X  Huafei Yang  X  Ruoyu Yang  X  Shijie Cai Abstract Recognition and integration of 2D architec-tural drawings provide a sound basis for automatically evaluating building designs, simulating safety, estimating construction cost or planning construction sequences. To accomplish these targets, difficulties come from (1) an architectural project is usually composed of a series of related drawings, (2) 3D information of structural objects may be expressed in 2D drawings, annotations, tables, or the composites of above expressions, and (3) a large number of disturbing graphical primitives in archi-tectural drawings complicate the recognition processes. In this paper, we propose new methods to recognize typ-ical structural objects and architectural symbols. Then the recognized results on the same floor and drawings of different floors will be integrated automatically for accurate 3D reconstruction.
 Keywords 3D reconstruction  X  Architectural drawings  X  Integration  X  Recognition 1 Introduction Three-dimensional reconstructionfrom 2D architectural drawings has been an interesting research field. Recon-structed 3D building models are useful across the entire spectrum of architecture, engineering and construction, which provide data for evaluating building designs, sim-ulating safety, estimating construction cost or planning construction sequences [1].

There has been some work on this problem. Tombre [2 X 4] firstly discussed the challenges of automatic rec-ognition of architectural drawings. He considered archi-tectural drawings had not been given as much attention as other types of drawings, which were more difficult to make precise analysis and reconstruction. In Tombre X  X  opinion, architectural design was more or less at the crossroads between engineering and art, and few teams had been dealing with architectural drawings. However, architectural drawings represented another very inter-esting and special area of graphic recognition. Ah-Soon and Tombre [5] analyzed the specificities of architec-tural drawings and recognized objects from the scanned drawings. They proposed a network-based recognition method [6,7] to identify symbols, following an idea pro-posed by Messmer and Bunke [8]. Park and Kwon [9] recognized main walls of apartments in plane architec-tural drawings using dimension extension lines. Dosch et al. [10,11] proposed a complete system for analysis of architectural drawings. They successively reconstructed 3D buildings with windows, doors, walls, staircases and pipes. However, above methods are limited by low-level processes, i.e., segmentation, vectorization and detec-tion of arcs from scanned drawings. Architectural enti-ties in such drawings are usually simply identified by connected thin lines in search areas.
 Recently reconstruction directly from original Auto-CAD drawings becomes morepopular. Lewis andS X quin [1] presented a robust and semi-automatic way to create 3D building models from computer-drawn floor plans, which could be used for computer rendering, visualiza-tion, and simulation or analysis programs. Zhi et al. [12] proposed an automatic unit generator, AUG, to trans-form computer-drawn architectural plans into a build-ing fire evacuation simulator model SGEM. The AUG approach assumed that the whole architectural plan was a combination of units and a unit was a combination of loops. On such basis, the AUG transformed plans into a graph to determine the solutions. Their work is very helpful for automatic recognition of architectural drawings, but still has some limitations. Real-life archi-tectural drafts are usually composed of complicated and severely interfered graphical primitives. The mentioned algorithms will face difficulties when recognize objects from such architectural drawings. Moreover, an archi-tectural project is usually composed of a series of related 2D drawings, i.e., plane drawings, section drawings and tables. Therefore, to reconstruct an accurate building, 3D reconstruction information distributed in different types of 2D drawings needs to be extracted and inte-grated automatically.

Inour previous research, wegavealgorithms tosearch lines, arcs and dimensions from engineering drawings [13 X 15]. We also proposed a hierarchical SINEHIR model to recognize structural objects from construction structural drawings (CSDs) [16,17]. CSDs are usually designed to describe the details of structural objects under the mechanic constrains of construction. In this paper, we introduce new methods to analyze architec-tural working drawings (AWDs), which are usually used to describe design intents of architects, i.e., location of the whole building, orientation of doors and windows, or layout of rooms which are surrounded by walls and beams.

The AWDs are composed of three types of archi-tectural entities: structural, functional and decorative entities. Structural objects are usually used to bear the weight of the whole building by their internal steel and concrete structures. Typical structural objects include shear walls, embedded columns, bearing beams, slabs and various types of foundations. Functional entities provide conveniences for users, like doors, windows, staircases, eaves, lift wells, etc. Typical decorative enti-ties include partition walls, hung ceilings, parapet walls, etc. Sometimes there are no distinct differences between functional entities anddecorativeentities. Figure1shows thedifferences betweenarchitectural andstructural enti-ties. Structural, functional and decorative entities are usually drawn in AWDs simultaneously.

Automatic analysis of AWDs is necessary for the tar-get of reconstruction of the whole building. However, direct analysis of AWDs seems to be difficult because there are multiple types of architectural entities exist. We separate it into three steps in this paper: (1) recog-nize structural entities using a parallel-pair-shape-based method, (2) remove those graphical primitives of the recognized structural objects, and (3) recognize other architectural entities from the simplified drawings using a feature-based symbol recognition method. Since tables are frequently used to explain the semantics of architec-tural entities, we also discuss the integration of archi-tectural tables and drawings for the target of accurate recognition.

The rest of this paper is organized as follows. Section 2 briefly discusses the characteristics of real-life architec-tural projects. Then Sect. 3 describes the shape-based method to recognize structural objects in floor plans. Section 4 introduces the feature-based recognition method. Based on these, Sects. 5 and 6 discuss the inte-gration method of architectural tables and different 2D plan drawings, respectively. Section 7 gives the experi-ment results and Sect. 8 gives our conclusions. 2 Characteristics of drawings from real-life architectural projects There are two main tasks to automatically analyze and reconstruct an architectural project. One is to recognize various types of architectural entities from each real-life complex 2D architectural drawing. The other is to inte-grate the recognized entities from different architectural drawings into a uniform target digital building. Recognition of architectural entities is the first step. However, various types of architectural entities and multitude graphical primitives may complicate the rec-ognition process. For instance, when recognize walls, the leading lines and dimension lines are all disturbing graphical primitives. When the number of such prim-itives increases, the recognition process will become easily disturbed.

Integration of architectural entities usually includes the following three tasks. First, drawings of different floors need to be integrated. A building is usually composed of different floors. On each floor the layout of architectural entities may vary to each other. Designers usually use a series of related CAD drawings to describe architectural entities on different floors.

Second, different architectural entities on the same floor need to be integrated. Usually the objects on the same floor still need to be described in different draw-ings. For example, not all the details of beams, walls, rooms, windows and doors on the same floor are drawn simultaneously in the same floor plan. Instead, design-ers use a series of drawings, i.e., a beam drawing, a room drawing and a wall drawing, to describe the same floor. That means in the wall drawing, all the details of the rooms are omitted; while in the corresponding room drawing, the details of the walls are omitted except their contours. Similarly, drawings of columns, beams, doors or windows have their own emphasis, respectively.
Third, different representations of architectural enti-ties need to be integrated. Designers have the freedom to draw objects in the forms of 2D drawings, section drawings, tables, or the combination of above expres-sions. Those drawings may be easily understood by per-sons, but for automatic recognition and interpretation, extra analysis is necessary.

In a word, architectural drawings have a series of characteristics different from other types of engineer-ing drawings. To simplify the analysis process of such architectural drawings, we assume that a typical plane architectural drawing has the following characteristics: 1. Typical weight-bearing structural objects are rep-2. Functional entities are usually accessorial or derived 3. Graphical primitives of decorative entities are not
Figure 2 shows an example of an architectural floor plan. Automatic analysis and integration of such draw-ings include the following steps (Fig. 3 refers): 1. Finding out parallel pairs (PPs) of structural entities 2. Identifying the semantics of PPs and create struc-3. Removing the recognized PPs. 4. Recognizing functional and decorative entities using 5. Analyzing architectural tables and integrating with 6. Integrating recognized entities on the same floor. 7. Integrating drawings of different floors. 3 Recognition of structural objects in floor plans Considering shear walls and bearing beams are abso-lutely necessary on each floor drawing and each wall or beam is represented by a series of parallel lines, we take the analysis of PPs as the first task to recognize a typical floor plan. Figure 4 is a subpart extracted from Fig. 2. In Fig. 4, the PPs of structural entities build up the weight-bearing net of the building. Once those PPs of structural entities are recognized, we may find other architectural entities more easily in the rest simplified drawing.
However, there are some difficulties in automatically finding correct PPs of structural entities. First, an archi-tectural drawing is usually composed of a large number of graphical primitives. Not all the parallel line pairs represent structural entities. Second, a PP may be com-posed of two parallel but partly overlapped lines with different lengths. Finally, disturbing lines, like grid lines and leading lines of annotations, make the analysis of PPs complicated.

The shapes of connected parallel line pairs are useful in dealing with accurate identification of PPs. In this sec-tion, we will first introduce the method of analyzing ele-mental shapes from the complex environment, and then describe the method of identification of PPs that repre-sent structural entities based on the recognized shapes. 3.1 Identification of PPs of structural objects 3.1.1 Identification entrance In Sect. 2, we suppose a typical structural object is rep-resented by a series of PP segments. Figure 5 shows an example of a bearing wall, which is extracted from Fig. 4. In Fig. 5, the text  X  FC1  X  means that there exists a struc-tural object named  X  FC1  X ; while the graphical primitives neighboring to  X  FC1  X  imply this object is composed by three PP segments ( segment 1 , segment 2 and segment 3 ). The three PP segments are separated by other PP seg-ments; moreover, the second PP segment varies in width. Only after each PP segment of a structural object is iden-tified, can the semantics of the structural object be finally analyzed.

However, disturbing graphic primitives, i.e., leading lines, dimension lines or grid lines, usually make the identification of PP segments complicated. Figure 6 shows some typical beams extracted from a real-life complex drawing. In Fig. 6, the beam  X  beam-a  X  is com-posed of the graphical primitives of parallel lines l 1 , l and l 1 , l 3 , which implies that (1)  X  beam-a  X  is cut off by the other two beams named  X  beam-b  X  (composed of parallel lines l 7 , l 8 and l 7 , l 9 ) and  X  beam-c  X  (com-posed of l 10 , l 12 ), (2) the width of the beam varies because the distance of the two parallel lines l 1 and l 6 is obviously less than that of l 1 and l 3 ,(3)thetwoPP segments of the beam may share the same long line l 1 . Except for these lines, the leading lines l 14 , l 5 are used to lead out the beam name text  X  beam-a  X , l 13 , l 4 areusedto lead out another name  X  beam-d  X , while grid lines l 2 and l 11 are used to locate the beams. These graphical primi-tives make the recognition processes of beams easily dis-turbed, i.e., l 12 , l 13 , l 10 , l 11 , l 11 , l 12 , l l , l 1 may also be recognized as PP segments of beams.
Semantics of disturbing graphical primitives are diffi-cult to be identified before the identification of structural PPs because there is not enough definite information can be used. For example, from the name text  X  beam-d  X , we can not judge whether l 3 or l 4 is a leading line, or whether there is no such lead lines at all, likes  X  beam-c  X .
From the generation processes of PP segments, we can find some hints. As mentioned above, the graphics of a beam or a wall are usually cut off by those of other beams or walls in a 2D drawing. The shapes of such crossing regions can be used as the entrances for the recognition of plane architectural drawings. Once the two end shapes are identified, the segment composed of two parallel lines can be identified, too. 3.1.2 Classification of T , X and L shapes Based on the study of about 200 real-life plane architec-tural drawings, we classify the most frequently occurring shapes into three types: shape T , shape X and shape L . We first take a look at the T shapes shown in Fig. 7. Figure 7 (a) shows a T shape composed of three parallel lines l 1 , l 2 , l 5 , l 2 , l 3 , l 4 and two intersections A and B . Denoting the shape by S Ta , two parallel lines l i and l with suitable width by l i , l j , two intersected lines by ( l i , l j ) , S Ta is defined by the following filters set: S
We define the two separated parallel line pairs, i.e., l , l 2 and l 5 , l 2 in Fig. 7a as the extension subpart of shape T (represented by E ( S ) ), while the rest pair, i.e., l , l 4 ,asthe crossing subpart (represented by C ( S ) ). The intersections of the shape are defined as the feature points (represented by F ( S ) ). Thus, a T shape can also be described as S
As shown in Fig. 7, variations of S T should also be considered. Fig. 7b shows a variation S Tb where l 1 = l 5 S Fig. 7c shows another variation S Tc , which is also a standard shape T appears in 2D drawings. Denoting a line l i simultaneously on the extension of another line l by | ( l i , l j ) , S Tc is defined as S Similarly, Fig. 7d defines a variation with three intersec-tions, and Fig. 7e to Fig. 7f defines variations with four intersections: S S S Figures 7g and h can be considered as the particular cases of Fig. 7e, which are seldom met in plane architectural drawings.

In some instances, two recognized overlapped T shapes, S Ti and S Tj , need to be merged if the follow-ing conditions are met: 1. E ( S Ti ) = E ( S Tj ) ,or E ( S Ti ) and E ( S Tj ) share the 2. C ( S Ti ) is parallel to and overlapped with C ( S Tj 3. C ( S Ti ) and C ( S Tj ) areonthedifferent sides of E
Figure 8 shows some examples. In Fig. 8a, there are two overlapped T shapes, S Ti and S Tj , will be found according to definition (3). Then S Ti and S Tj will be merged into a new X shape according the mentioned conditions. Similarly, Figs. 8b X  X  show other three X shapes merged from corresponding T shapes. Figure 8e is another type of merged X shape because E ( S Ti ) and E (
S Tj ) share the same line and conditions 2 and 3 are met simultaneously.

In other cases, one of the two recognized T shapes need to be deleted if the following conditions are met: 1. E ( S Ti ) = E ( S Tj ) . 2. C ( S Ti ) and C ( S Tj ) are on the same side of E ( S 3. C ( S Ti ) is parallel to C ( S Tj ) . 4. C ( S Ti ) and C ( S Tj ) share the same line. Figure 9 shows an example of removing overlapped T shapes. Figure. 9a is the original graph from the 2D drawing, where altogether 10 T shapes will be recog-nized sequentially. According to the mentioned condi-tions, we reorganize the candidate T shapes and remove those overlapped shapes, i.e., if S T 1 is reserved, S T 2 be removed. Finally, there are six recognized T shapes, as shown in Fig. 9b.

Shape L is defined as two intersected parallel line pairs. Figure. 10 shows some examples. Most other com-plex shapes are usually composed of the three types of elemental shapes. 3.1.3 Identification of PPs of structural entities There are a large number of parallel line pairs in each architectural drawing, but not all of them represent structural entities. The application of above rules provides an efficient method to recognize the PPs of target structural entities. We first find the candidate re-lated line sets of each line in the drawing, and then visit each line and their related line sets to match the definitions of each possible shape in sequence. Once a new candidate shape is recognized, we check whether it can be merged with any other existing shape. When all the candidate shapes are recognized, we match the corresponding shapes to identify the final target PPs of structural objects.

Suppose  X  T is the average height of texts in the draw-ing, G is the given drawing, PP is the target candidate parallel line pair set of structural entities, the algorithm proceeds as follows. 1. Find all the candidate related line sets of each line 2. Find T shapes according to the definitions of shape 3. Find L shapes in the rest lines according to L shape 4. For each two shapes s i , s j in TS , XS and LS , if there
Figure 11 shows the results of recognition of T , X or L shapes and parallel line pairs. Figure 11a shows the rec-ognition results from Fig. 6, where the two T shapes, S T 1 and S T 2 are finally recognized. Notice that the recogni-tion of L shapes is subsequent to that of T or X shapes, so { l because of the existence of S T 2 . After candidate shapes are identified, the PPs will be recognized by connecting two end shapes, i.e., l 1 , l 3 , l 1 , l 6 , l 7 , l 8 and l Fig. 11b will be recognized as candidate PP segments.
Notice that different identification sequence of T , X or L shapes usually generates completely results. When identifying these shapes, we first recognize candidate T shapes, then merge those T shapes into new X shapes, or remove the false T shapes, and finally recognize L shapes from the rest graphical primitives. L shapes are finally recognized because an L shape will not be disturbed by a T or X shape, while a T or X shape is easily disturbed by an L shape. Figure 12 shows the results of recognized shapes and PPs from Fig. 2. 3.2 Semantic analysis of recognized PP segments Semantic analysis is necessary to identify target struc-tural objects after candidatePPsegments arerecognized. Actually, not all the recognized PP segments repre-sent structural entities; instead, only those PP segments that can be interpreted by semantic analysis are useful for 3D reconstruction. Semantic analysis helps extract exact attributes of each recognized PP segment and simultaneously evaluate the confidence of PP segments to minimize false detections.

The known difficulty of semantic analysis is how to extract the real lapping relations (cf. Fig. 13b,c), which show two possible 3D models reconstructed from the same four crossing PP segments shown in Fig. 13a. n k is an X shape). Failures in distinguishing the semantics of PP segments will lead to false 3D reconstruction of buildings.
The first step of semantic analysis processes is to search the related annotations. By the leading lines or the distance of the name texts to a PP segment, we can combine the name of a structural object with its cor-responding candidate PP segment. In Fig. 14, segment 1 will be found as a part of the beam named  X  KL1 ( 3 ) X . Similarly, other attribute annotations, for instance, the text  X 200  X  450 X  which implies the width and the height of the segment, will be found.

The second step is to extend the matched segment to find related segments. Usually a beam (or a wall) has the following semantic characteristics: 1. A beam is composed of a series of related spans, 2. The PP segments of the same span have the same
For instance, in Fig. 14, the name text  X  KL1(3)  X  implies that the beam  X  KL1  X  has altogether three spans. PP segment1 has been identified as the first PP segment of the first span. Other spans will be identified by extend-ing the matched segment 1 by following rules: 1. If width ( segment j + 1 ) = width ( segment j ) , then add 2. If the left or right line of segment j + 1 deviates that of 3. If the end of segment j is a column, add segment j to 4. If segment j is the last PP segment, the extension is
Figure 15 shows the results. The T shape n 1 con-nects PP segment 1 and segment 2 . According to rule 1 X 4, n 1 is not a span shape, therefore both segment 1 and segment 2 belong to the first span. n 2 , n 3 and n 4 are all span shapes, which connect two segments belong to different spans. Therefore the three spans can be represented as { segment 1 , segment 2 } , { segment 3 } { segment 4 } , respectively.
 After the relations of the spans and the recognized PP segments are verified, the semantics of each segment can be extracted. In Fig. 15, segment 1 and segment 2 share the text  X 350  X  400 X , which implies the width of these two segments is 350 mm, while the height is 400 mm. segment 3 and segment 4 share the text  X 200  X  450 X , which implies they have the same width 200 mm and height 450 mm. Table 1 shows the final results of each PP seg-ment for 3D reconstruction from Fig. 14.

In Table 1, the text  X  A8-100/200 ( 2 ) X  of segment 1 segment 2 and segment 3 implies a series of 8 mm hooped reinforcement steels distribute along segment 1 , segment and segment 3 with the interval 200 mm in the interme-diate part and 100 mm at the head or tail. The text  X  A10-200 ( 2 ) X  implies segment 4 has 10 mm hoped rein-forcement steels with the distribute interval 200 mm. The text  X  2B18  X  implies that all the four segments have two straight steels with the diameter 18 mm, while only segment 2 has the extra two 16 mm straight steels accord-ing to its text  X  2B16  X . 4 Recognition of architectural symbols After structural entities are recognized, we remove their graphical primitives from the drawing to simplify the analysis of functional entities and decorative entities. In this paper, we define such entities as architectural symbols. According to the suppositions in Sect. 2, these architectural symbols can be searched under the guide of recognized structural entities. For instance, we only search the connected graphical primitives of walls to find possible doors or windows in a 2D drawing.

Symbol recognition is one of the significant appli-cations in the area of document analysis and pattern recognition. It plays an important role in automatic interpretation of documents like maps, musical scores, cartography, electronics and engineering drawings. Re-cently, a number of symbol recognition methods and contests have been proposed [18 X 20].

The interpretation of symbols in architectural plans is one of the most recent activities [21]. Unlike other types of drawings, two difficulties make the recognition of architectural symbols difficult. First, there is no stan-dardized notation and a general framework for the inter-pretation of various architectural symbols is not a solved issue. Second, variations of architectural symbols usu-ally make the recognition an expensive process, espe-cially when the graphical primitives are difficult to be separated from those of other structural objects.
Generally speaking, architectural symbols have more changeable characteristics, which make the recognition of architectural symbols depends more on synthetical analysis than that of engineering symbols. For example, all the two lights in Fig. 16b and c and the elevation sym-bol in Fig. 16d have the similar circle, two intersected lines and the filling attribute. But they have different semantic meanings: Fig. 16b shows a waterproof indi-cator light, Fig. 16c implies a general indicator light, while Fig. 16d describes the elevation of some structural objects. Architectural symbols also have more uncertain characteristics. For example, in Fig. 16e, several concen-tric circles represent a spray symbol, but the number of the concentric circles is not the crucial proof for the recognition of the symbol. Figure 16f shows two fire hydrant symbols with different directions. That means sometimes the recognition cannot start from the direc-tions of graphic primitives, too.

Therefore, anarchitectural symbol shouldnot bemod-eled only by predefined graphical primitives. Instead, the necessary or excusive constraints between the symbol and its environment need to be integrated. Furthermore, considering the performance of analysis of multitude graphical primitives in the whole drawing, there should be some prior or leading conditions to decrease the anal-ysis time in each predefined architectural symbol.
We classify the above characteristics or conditions into a group of features as follows: 1. Geometrical features (GF): the relatively invariant 2. Leading features (LF): the most distinguishable fea-3. Attribute features (AF): attributes of a symbol, like 4. Relational features (RF): relational constraints on 5. Transformational features (TF): rotation, distortion 6. Exclusive features (EF): the primitives that cannot
A target architectural symbol is modeled as a related features set. Such symbol is described as follows: symbol :: = rule
When recognizing such symbol, its corresponding fea-tures will be scanned in a given sequence. Once all the features are identified, a new architectural symbol is recognized and its graphical primitives will be removed from the drawing to decrease the sequent analysis space. Otherwise, there is no such symbol in the plan drawing.
The features set will be scanned prioritized in the following sequence: 1. LF serves as an entrance to the recognition to 2. Next, GF is matched. For example, to recognize the 3. Next try to match the TF . For example, the orienta-4. Then use RF to affirm whether a target symbol 5. Finally, use the EF to decide on the symbol type. For Figure17shows someexamples recognizedfrom Fig. 2. We search lift wells (Fig. 17a) in the whole drawing by the following steps:  X  Given a free line l  X  Search the connected rectangle of the leading fea- X  Search a nearby smaller rectangle.  X  Search nearby recognized walls.

Similarly, the arrow in Fig. 17b can be used as the lead-ing feature of a staircase. A group of parallel lines are geometrical features of staircases and connected walls are their relational features. Figure 17c shows a door connected with two wall segments. From its geomet-rical and relational features, such doors can be easily extracted.

Three methods provide the robustness when the number of target symbol increases: (1) Recognition of symbols is guided by previous structural entities recog-nition results and architectural domain knowledge. For instance, we will only search staircases and doors nearby recognized walls, or only search a spray symbol in a rec-ognized room with a name text like  X  X athroom X ; (2) The leading features, attribute features and relational features greatly speed up the recognition process; while exclusive features help reduce the meaningless search cost; (3) All the symbol models are organized in a hierar-chic structure with the principle from simple to complex. Similar symbol models are distinguished by their corre-sponding features set distinctly, which greatly decreases the time identifying such symbols.

To summarize, we first find graphic primitives that constitute the leading features, then match the neigh-boring primitives using geometrical features, transfor-mation features and attribute features, and lastly match relational features and exclusive features. 5 Integration of tables and plan drawings Tables are efficient methods for presenting relational information and table recognition applications include information retrieval, document classification, etc. [22 X 24].

The details of structural objects, except their name texts, usually do not appear in plane architectural draw-ings because of the large number of graphical primi-tives. Instead, the details (i.e., the internal structure of an object in the 2D drawing and its section size) are drawn in an architectural table. Therefore, once the structural objects are recognized from floor 2D drawings, architec-tural tables need to be analyzed and the results need to be integrated with the recognized structural objects to reconstruct the building.

Figure 18 shows a part of a typical column table. In this table, the details of the section attributes, internal structure, level and steels of each column are listed. For instance, the first row implies that this is a table com-posed by details of columns. The second row is com-posed of internal section structure of three columns, and the third row shows the corresponding column names. The fourth to sixth row describe the steels of the col-umns, and from the seventh row, the details of another three columns are listed.

The targets of analysis of such architectural tables include: 1. Recognize the table structure. 2. Extract the contents in the table.
 3. Integrate the results with corresponding structural
Despite the semantics of the contents, a table is usu-ally composed of a group of intersected horizontal and vertical line segments. Such perpendicular line segments generate a series of squares, in which the details are described, i.e., attribute texts or complex graphical prim-itives. We define those squares separated by perpendic-ular lines in the table as cells . Letting c i and c j denote two cells from the same table T , l denotes a line seg-ment, | ( l i , l j ) denotes a line l i is simultaneously on the extension of another line l j , table cells have the follow-ing characteristics: 1. c i  X  c j = null or { l } ; 2.  X  c i ( l i 1 , l i 2 , l i 3 , l i 4 )  X  T ,  X  c j ( l
Table cells can be found by two steps. First recog-nize candidate cells only contain texts, which are sur-rounded by long horizontal and vertical line segments. Then visit each side of a candidate cell and search its nearing graphical primitives to find candidate neighbor-ing squares recursively.

After candidate cells are recognized, semantic mean-ings need to be analyzed to extract the table structure. Candidate table cells can be divided into two types (1) name cells that describe the semantic names of the rows or columns, and (2) value cells that give the structural details. For example, the  X  X levation X  cell in Fig. 18 will be identified as a name cell based on the domain knowl-edge, while its right neighboring  X   X  0.030 X 30.270 X  cell is identified as a value cell. Starting from each name cell, we will gradually find its corresponding value cell group by searching left, right, top or bottom neighbors recursively. After this step, the table structure is repre-sented by T ={ c
Next the recognized name and value cells need to be further dealt with by (1) remove those value cells with-out corresponding name cells, and (2) merge the name cells, denoted by c namei and c namej , if the following con-ditions are met:  X  Size of ( c  X  One side line of c
For instance, inFig. 18, thetopsidenamecell  X  X ection X  will be merged with another name cell  X  X olumn table X , which makes the other successive name cells be merged, too. Finally, there is only one column of name cells is reserved, i.e., { X  X olumn table-section X ,  X  X olumn table-elevation X , ...}. Thus the table in Fig. 18 is transformed into a traditional two-dimensional relation table.
The details in each value cell need to be interpreted based on the domain knowledge, i.e., the section text  X   X  0.030 X 30.270 X  implies the length of the column is 30.3 m. All the interpretation results from tables are then integrated with corresponding 2D drawings which describe the location and orientation of each column. 6 Integration of recognized objects and different architectural drawings Related objects in different drawings need to be inte-grated for 3D reconstruction. For instance, the columns that appear in the column drawing of the 1 X 2 floors in Fig. 19a also appear in the beam drawing of the 2 X 3 floors in Fig. 19b, while the beams of the 2 X 3 floors also appear in the slab drawing of 2 X 3 floors in Fig. 19c. Therefore the recognition results of the column drawing will be trans-formed to the beam drawing to calculate the accurate contours of beams. Furthermore, after beams in Fig. 19b are recognized, they will do help for the analysis of the slab drawing by eliminating the tedious, time-consuming and error-prone blind search.

As shown in Fig. 19a X  X , the scales of different draw-ings may be varied, which makes the drawing coordi-nates of graphical primitives from different drawings can not be compared. The only way to integrate different 2D drawings depends on the analysis of their logical coor-dinates calculated from dimensions and grid lines [16].
Suppose a structural object t is recognized from an architectural drawing AD a , to convert it to another cor-responding architectural drawing AD b , the following steps are needed: 1. Find the coordinate system where the object t is lo-2. Calculate the annotated coordinate system of AD a , 3. Transform C t to C Ada . Suppose the origin of AD a is 4. Transform C Ada to C Adb . To do this, we need first
Finally, thedrawingcoordinates of thegraphical prim-itives of t in A Da will be transformed into AD b by the matrix M = M 1  X  M 2 . Successive analysis can be per-formed after the objects are transformed to correspond-ing drawings, i.e., calculation of the accurate shapes of beams after subtracting the transformed column shapes in the beam drawing.

Recognized results from tables also need to be inte-grated with other drawings. For instance, a column draw-ing only describes the locations, orientations and their name texts, while the details of each column, including the name, internal steel structure, section and height, are listed in a table. By the name texts, we can integrate those structural objects distributed in different drawings.
After all the necessary 3D information has been integrated, the building can be reconstructed. Figure 20 shows an example of reconstructed 3D model after the recognition and integration of a series of 2D architec-tural drawings. 7 Performance evaluation Our testing data set has 257 plane architectural/struc-tural drawings. Among them, 40 drawings are synthetic data for system test, and another 217 drawings are real data of business projects from different architects.
We first give the definitions of correct, false, missing and suspicious detections. A correct detection shows that the graphics of a target object are properly ex-tracted. For instance, in Fig. 21, the T shape parallel line pairs are correctly recognized as two crossing beams. A false detection is usually caused by three reasons: (1) using the wrong graphics that do not belong to the final target object, (2) wrongly analyzing the semantics of a recognized object, or (3) wrongly recognizing an object that doesn X  X  exist. In Fig. 21, the left T shape is a false detection under an acceptable threshold. This false detection will cause the final reconstructed beam a little wider. False detections may also be brought by errors of semantic analysis. For instance, an elevation symbol will be easily recognized as a light symbol if the annotation is too far. Sometimes a sharing space in a building is also easily recognized as a room, because they are both en-closed regions surrounded by walls and beams in a 2D drawing and there are not enough hints to distinguish them.

A missing detection means an actually existing target object which is not recognized because of recognition thresholds, manual errors in drawings, or some disturb-ing graphical primitives. In Fig. 21, the right T shape is not recognized because the distance of the two line pairs is larger than the maximal acceptable distance thresh-old. Figure 22 shows an example where the left part of a staircase is not recognized because of the disturb-ing of other graphical primitives. A suspicious detection implies an object which is finally recognized but with a degree of certainty less than 100%. The difference between a missing detection and a suspicious detection comes from whether the thresholds, errors or disturbing degrees are acceptable: if acceptable, we create a target object and tag it  X  X uspicious X , otherwise we pass it over.
The numbers and percentages of correct, false, miss and suspicious detections of T, X, L shapes and PP seg-ments on ten typical synthetic drawings are shown in Table 2. In this table, correct shapes represent real struc-tural objects, while false shapes may be generated by overlapped and parallel lines, which do not represent any structural object. The miss shapes are drawn by par-allel pairs without any real intersections intentionally to test the robustness of shape-based recognition method. Suspicious shapes are drawn with irregularly intersected parallel pairs.

In Table 2, there are altogether 4,140 T, X and L shapes exist in the selected drawings, while only 2,116 shapes are correct. There are 1,924 false shapes which do not represent any final structural objects. Fifty miss-ing shapes and 50 suspicious shapes are drawn to test the robustness of recognition algorithm. As shown in Table 2, the average recognition rate of T, X and L shapes is 85.58%; while the recognition rate of PP seg-ments of structural entities is 85.79%.
 Recognition errors of T, X, L shapes and structural PPs are mainly caused by thresholds. In Sect. 3.1.3, we use 0.4 as the minimal empirical scale to check whether twoparallel lines areoverlapped. However, Fig. 23shows some different results according to that threshold. In Fig. 23, there are two parallel lines line a (with length a ) and line b (with length b , c is the overlapped length). If min ( c / a , c / b ) 0.4, we say line a and line b are two overlapped lines, as shown in Fig. 23a. In Fig. 23b, line changes to be a long line (may be a grid line simulta-neously). Although line a and line b are overlapped, they are ignored to be a candidate parallel line pair because c / a &lt; 0.4. In other cases, for example in Fig. 23c, the two lines are short and the overlap scale is larger than 0.4, but such lines are not suitable for candidate parallel line pairs of structural entities.
 Angle threshold may also cause recognition errors. The same angle threshold to check whether two lines are parallel may generate different results. Given an angle threshold 0.1  X  , line a is considered parallel to line because their angle  X &lt; 0.1, as shown in Fig. 24a. How-ever, when the two lines are long enough, line a and line with the same angle  X  should not be considered parallel obviously, as shown in Fig. 24b.

Table 3 shows the recognition results of walls and beams from Fig. 2. The recognition of such structural ob-jects starts from the correctly recognized X, T, L shapes and PP segments. Then after the semantic analysis, walls and beams can be finally identified. In Fig. 2, there are altogether 186 walls and 74 beams. 170 walls are rec-ognized correctly. However, there are still four miss-ing walls and 12 false walls. The four missing walls are caused by the unrecognized PP segments during the pre-vious steps. Thus, we can not match any recognized PP segments from the wall name texts and the semantic analysis of such walls fails. Similarly, just because there are PP segment recognition errors, the 12 walls are wronglyrecognized. That means, becausewalls andbeams are represented by such PP segments in a 2D draw-ing, the recognition rate of T, X, L shapes and PP seg-ments affects the recognition results of structural enti-ties. For instance, in Fig. 21, the left false PP segment will make the final recognized wall a litter wider after 3D reconstruction. The average recognition rate of walls and beams of Fig. 2 is 90.30%.

Table 4 shows the recognition results of some func-tional and decorative entities in Fig. 2. The lift wells and staircases are searched from the enclosures of connected recognized walls and beams; while doors are found by searching the connected graphical primitives of recog-nized walls. A room is defined as an enclosure area sur-rounded by walls and beams, and at least one door is found on one of its sides. In our experiment, the rec-ognition rate of rooms is 76.79%. There are 13 false rooms because some balconies are recognized as rooms, as shown in Fig. 25. Moreover, 15 windowsills are rec-ognized as suspicious rooms because their areas are too small.

Table 5 shows the recognition results of structural objects and architectural symbols on the whole synthetic and real data set. Those final high-level structural enti-ties are created after semantic analysis of the recognized PP segments. For instance, only one beam is finally rec-ognized in Fig. 15, which is made up of three spans and four PP segments. Since there are a great number of such objects based on 257 drawings and projects are varied to each other, we give the average results in Table 5. According to our experiments, there are altogether 184 high-level objects (structural entities and other archi-tectural symbols) need to be recognized in an architec-tural drawing; while the average recognition rate of such objects is about 86.41%.

Some useful hints in a plane architectural drawing will help improving the recognition rate of structural objects and decreasing the false or missing rate simulta-neously. First, a correct PP segment is usually located by a grid line or a dimension. Thus there are usually aux-iliary lines related with PP segments [9] and recognized PP segments can be validated by searching such auxil-iary lines. Second, correct shapes can be pre-recognized and the missing or suspicious shapes will be validated by those correct shapes which are more reliable dur-ing the succeeding recognition processes. Finally, some disturbing lines, like too short steel lines, single leading lines and too long grid lines may be removed before the recognition.

Architectural symbols recognition is a time-consum-ing process. Two methods will help improving the effi-ciency. First, most of the architectural symbols (except windows and doors) are located in the areas surrounded by walls and beams; therefore, all such areas will be firstly analyzed. For each symbol model, only the graphical primitives in candidate areas will be analyzed. Second, the semantics of recognized structural objects will guide the recognition of architectural symbols. For instance, a door is usually used to connecting walls but not beams. 8 Conclusions Recognition and integration of 3D information provide a sound basis for automatic reconstruction from 2D architectural drawings. In this paper, we give a shape-based recognition method for beams and walls from the complex graphical environments, and discuss the recog-nition of widely used architectural symbols. 3D build-ings will be reconstructed based on the integration of the recognition results.

Because of the complexity of architectural drawings, there are still a lot of interesting challenges of the rec-ognition of architectural drawings: (1) More complex drawings, i.e., roofs and basements drawings, need to be automatically analyzed. (2) Other types of represen-tations, i.e., side views or section views of columns and walls, are to be automatically recognized. (3) More types of structural objects and architectural symbols need be recognized.
 References
