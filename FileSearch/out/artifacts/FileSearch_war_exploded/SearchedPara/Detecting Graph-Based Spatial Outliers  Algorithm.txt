 Identification of outliers can lead to the discovery of unex-pected, interesting, and useful knowledge. Existing methods are designed for detecting spatial outliers in multidimen-sional geometric data sets, where a distance metric is avail-able. In this paper, we focus on detecting spatial outliers in graph structured data sets. We define statistical tests, analyze the statistical foundation underlying our approach, design several fast algorithms to detect spatial outliers, and provide a cost model for outlier detection procedures. In ad-dition, we provide experimental results from the application of our algorithms on a Minneapolis-St.Paul(Twin Cities) traffic dataset to show their effectiveness and usefulness. Outlier Detection, Spatial Data Mining, Spatial Graphs 
Outliers have been informally defined as observations which appear to be inconsistent with the remainder of that set of data [2], or which deviate so much from other observations so as to arouse suspicions that they were generated by a dif-ferent mechanism [5]. The identification of outliers can lead to the discovery of unexpected knowledge and has a number of practical applications in areas such as credit card fraud, the performance analysis of athletes, voting irregularities, *This work is supported in part by the Army High Perfor-mance Computing Research Center under the auspices of the Department of the Army, Army Research Laboratory Co-operative agreement number DAAH04-95-2-0003/contract number DAAH04-95-C-0008, and by the National Science Foundation under grant 9631539 tA full version paper is available at http ://www. cs. umn. edu/-pusheng/pub/kdd2001 / requires prior specific permission and/or a fee. KDD 01 San Francisco CA USA 
Copyright ACM 2001 1-58113-391-x/01/08...$5.00 bankruptcy, and weather prediction. 
Outliers in a spatial data set can be classified into three categories: set-based outliers, multi-dimensional space-based outliers, and graph-based outliers. A set-based outlier is a data object whose attributes are inconsistent with attribute values of other objects in a given data set regardless of spa-tial relationships. Both multi-dimensional space-based out-liers and graph-based outliers are spatial outliers, that is, data objects that are significantly different in attribute val-ues from the collection of data objects among spatial neigh-borhoods. However, multi-dimensional space-based outliers and graph-based outliers are based on different spatial neigh-borhood definitions. In multi-dimensional space-based out-lier detection, the definition of spatial neighborhood is based on Euclidean distance, while in graph-based spatial outlier detections, the definition is based on graph connectivity. 
Many spatial outlier detection algorithms have been re-cently proposed; however, spatial outlier detection remains challenging for various reasons. First, the choice of a neigh-borhood is nontrivial. Second,the design of statistical tests for spatial outliers needs to account for the distribution of the attribute values at various locations as well as the aggre-gate distribution of attribute values over the neighborhoods. In addition, the computation cost of determining parame-ters for a neighborhood-based test can be high due to the possibility of join computations. 
In this paper, we formulate a general framework for de-tecting outliers in spatial graph data sets, and propose an ef-ficient graph-based outlier detection algorithm. We provide cost models for outlier detection queries, and compare un-derlying data storage and clustering methods that facilitate outlier query processing. We also use our basic algorithm to detect spatial outliers in a Minneapolis-St.Panl(Twin Cities) traffic data set, and show the correctness and effectiveness of our approach. 
In 1995, the University of Minnesota and the Traffic Man-agement Center(TMC) Freeway Operations group started the development of a database to archive sensor network measurements from the freeway system in the Twin Cities. The sensor network includes about nine hundred stations, each of which contains one to four loop detectors, depending on the number of lanes. Sensors embedded in the freeways monitor the occupancy and volume of traffic on the road. At regular intervals, this information is sent to the Traffic Man-agement Center for operational purposes, e.g., ramp meter control, and research on traffic modeling and experiments. 
In this application, each station exhibits both graph and attribute properties. The topological space is the map, where each station represents a node and the connection between each station and its surrounding stations can be represented as an edge. The attribute space for each station is the traf-fic flow information (e.g., volume, occupancy) stored in the value table. We are interested in discovering the location of stations whose measurements are inconsistent with those of their graph-based spatial neighbors and the time periods when those abnormalities arise. This outlier detection task is to:  X  Build a statistical model for a spatial data set  X  Check whether a specific station is an outlier  X  Check whether stations on a route are outliers 
We use three neighborhood definitions in this applica-tion as shown in Figure 1. First, we define a neighbor-hood based on spatial graph connectivity as a spatial graph neighborhood. In Figure 1, (sl, t2) and (s3, t2) are the spa-tial neighbors of (s2,t2) if sl and s3 are connected to s2 in a spatial graph. Second, we define a neighborhood based on time series as a temporal neighborhood. In Figure 1, (s2, tl) and (s2, t3) are the temporal neighbors of (s2, t2) if tl, t2, and ta are consecutive time slots. In addition, we define a neighborhood based on both space and time series as a spatial-temporal neighborhood. In Figure 1, (sl,tl), are the spatial-temporal neighbors of (s2, t2) if sl and s3 are connected to s2 in a spatial graph, and tl, t2, and t3 are consecutive time slots. Time ~ Spa~-~ 
Figure 1: Spatial and Temporal outlier in traffic data 
In this section, we formally define the spatial outlier de-tection problem. Given a spatial framework S for the un-derlying spatial graph G, an attribute f over S, and neigh-borhood relationship R, we can build a model and construct statistical tests for spatial outliers based on a spatial graph according to the given confidence level threshold. The prob-lem is formally defined as follows. Spatial Outlier Detection Problem 
Given:  X  A spatial graph G = {S, E}, where S is a spatial frame-* A neighborhood relationship R consistent with E  X  An attribute function f: S --r a set of real numbers  X  An aggregate function faggr : R N --~ a set of real numbers  X  Confidence level threshold 0 
Find:  X  A set of spatial outliers  X  Correctness: outliers identified are significantly differ- X  Efficiency: to minimize the computation time 
Constraints:  X  Attribute values have a normal distribution  X  Size of the data set &gt;&gt; main memory size  X  The range of attribute function f is the set of real 
The formulation shows two subtasks in this spatial outlier detection problem: (a) the design of a statistical model M and a test for spatial outliers (b) the design of an efficient computation method to estimate parameters of the test, test whether a specific spatial location is an outlier, and test whether spatial locations on a given path are outliers. 
Many outlier detection algorithms [1, 2, 3, 7, 8, 10, 12, 14] have been recently proposed. These methods can be broadly classified into two categories, namely set-based outlier detec-tion methods and spatial-set-based outlier detection meth-ods. The set-based outlier detection algorithms [2, 6] con-sider the statistical distribution of attribute values, ignoring the spatial relationships among items. Numerous outlier de-tection tests, known as discordancy tests [2, 6], have been developed for different circumstances, depending on the data distribution, the number of expected outliers, and the types of expected outliers. The main idea is to fit the data set to a known standard distribution, and develop a test based on distribution properties. 
Spatial-set-based outlier detection methods consider both attribute values and spatial relationships. They can be fur-ther grouped into two categories, namely multi-dimensional metric space-based methods and graph-based methods. The multi-dimensional metric space-based methods model data sets as a collection of points in a multidimensional space, and provide tests based on concepts such as distance, den-sity, and convex-hull depth. We discuss different example tests now. Knorr and Ng presented the notion of distance-based outliers [7, 8]. For a k dimensional data set T with N objects, an object O in T is a DB(p, D)-outlier if at least a fraction p of the objects in T lies greater than distance 
D from O. Ramaswamy et al. [11] proposed a formulation for distance-based outliers based on the distance of a point from its k *n nearest neighbor. After ranking points by the distance to its k *h nearest neighbor, the top n points axe declared as outliers. Breunig et al. [3] introduced the notion of a "local" outlier where the outlier-degree of an object is determined by taking into account the clustering structure in a bounded neighborhood of the object, e.g., k nearest neighbors. In computational geometry, some depth-based approaches [12, 10] organize data objects in convex hull lay-ers in data space according to their peeling depth [10], and outliers are expected to be found from data objects with a shallow depth value. Yu et al. [14] introduced an outlier de-tection approach, called FindOut, which identifies outliers by removing clusters from the original data. 
Methods for detecting outliers in multi-dimensional Eu-clidean space have several limitations. First, multi-dimensional approaches assume that the data items are embedded in a isometric metric space and do not capture the spatial graph structure. Secondly, they do not exploit apriori information about the statistical distribution of attribute data. Last, they seldom provide a confidence measure of the discovered outliers. 
In this paper, we formulate a general framework for de-tecting spatial outliers in a spatial data set with an underly-ing graph structure. We define neighborhood-based statis-tics and validate the statistical distribution. We then design a statistically correct test for discovering spatial outliers, and develop a fast algorithm to estimate model parameters, as well as to determine the results of a spatial outlier test on a given item. In addition, we evaluate our method in a Twin Cities traffic data set and show the effectiveness and usefulness of our approach. 
In this section, we list the key design decisions and propose an I/O efficient algorithm for spatial graph-based outliers. 
For spatial statistics, several parameters should be pre-determined before running the spatial outlier test. First, the neighborhood can be selected based on a fixed cardinal-ity or a fixed graph distance or a fixed Euclidean distance. Second, the choice of neighborhood aggregate function can be mean, variance, or auto-correlation. Third, the choice for comparing a location with its neighbors can be either just a number or a vector of attribute values. Finally, the statis-tic for the base distribution can be selected from various choices. 
The statistic we used is S(x) = [f(x) -E~eN(~)(f(y))], where f(x) is the attribute value for a data record x, N(x) is the fixed cardinality set of neighbors of x, and E~eN(= ) (f(y)) is the average attribute value for neighbors of x. Statistic 
S(x) denotes the difference of the attribute value of each data object x and the average attribute value of x's neigh-bors. 
LEMMA 1. Spatial Statistic S(x) = [f(x)-EyeN(=)(f(y) )] is normally distributed if attribute value f(x) is normally distributed. Proof: 
Given the definition of neighborhood, for each data record x, the average attribute values E~eN(=)(f(y)) of x's k neigh-bors can be calculated. Since attribute values f(x) are normally distributed and an average of normal variables is also normally distributed, the average attribute values 
E~N(=)(f(y)) over neighbors is also a normal distribution for a fixed cardinality neighborhood. 
Since the attribute value and the average attribute value over neighbors are two normal variable, the distribution of the difference of S(x) of each data object x and the average attribute value of x% neighbors is also normally distributed. 
The test for detecting an outlier can be described as value f(x), the S(x) is the difference of the attribute value of data object x and the average attribute value of its neigh-bors; #s is the mean value of all S(x), and as is the standard deviation of all S(x). The choice of 0 depends on the spec-ified confidence interval. For example, a confidence interval of 95 percent will lead to 0 ~ 2. 
We now propose an I/O efficient algorithm to calculate the test parameters, e.g., mean and standard deviation for the statistics, as shown in Algorithm 1. The computed mean and standard deviation can then be used to detect the outlier in the incoming data set. Given an attribute data set V and the connectivity graph G, the Test Parameters Computation(TPC) algorithm first retrieves the neighbor nodes from G for each data object x. It then computes the difference of the attribute value of x and the average of the attribute values of x's neighbor nodes. These different values are then stored as a set in the AvgDist_Set. Finally, the AvgDist_Set is used to get the distribution value ps and as. Note that the data objects are processed on a page basis to reduce redundant I/O. Test Parameters Computation(TPC) Algorithm for(i=l;i &lt; IDI 5++){ /* Find neighbor nodes of O~ from G */ } Algorithm 1: Pseudo-code for test parameters computation 
The neighborhood aggregate statistics value, e.g., mean and standard deviation, computed in the TPC algorithm can be used to verify the outliers in an incoming data set. The two verification procedures are Route Outlier Detec-tion(ROD) and Random Node Verification(RNV). The ROD procedure detects the spatial outliers from a user specified route, as shown in Algorithm 2. The RNV procedure checks the outliers from a set of randomly generated nodes. Given route RN in the data set D with graph structure G, the ROD algorithm first retrieves the neighboring nodes from G for each data object x in the route RN, then it com-putes the difference S(x) between the attribute value of x and the average of attribute values of x's neighboring nodes. Each S(x) can then be tested using the spatial outlier de-tection test [~l &gt; 0. The 0 is predetermined by the given confidence interval. The steps to detect outliers in both ROD and RNV axe similar, except that the RNV has no shared data access needs across tests for different nodes. 
The I/O operations for Find__Neighbor..Nodes.Set0 in dif-ferent iterations are independent of each other in RNV. We note that the operation Find_Neighbor--Nodes-Set 0 is exe-cuted once in each iteration and dominates the I/O cost of the entire algorithm. The storage of the data set should support the I/O efficient computation of this operation. We discuss the choice for storage structure and provide an ex-perimental comparison in Sections 5 and 6. Route Outlier Detection(ROD) Algorithm for(i=l;i &lt; IRNI ;i++){ for(j=l;i_&lt; INSSl;j++){ } AvgOist = Accum_Dist/[NNS[; 
Tvatue= AvsDiat-Pa if( Check_Normal_Table(T~l~,CI)== True){ return Outlier_Set. Algorithm 2: Pseudo-code for route outlier detection 
The I/O cost of ROD and RNV are also dominated by the I/O cost of Find-Neighbor_Nodes_Set 0 operation. 
In this section, we provide simple algebraic cost models for the I/O cost of outlier detection operations, using the 
Connectivity Residue Ratio(CRR) measure of physical page clustering methods. The CRR value is determined by the page clustering method, the data record size, and the page size. The CRI~ value is defined as follows. [ Symbol Meaning I 
Table 1 lists the symbols used to develop our cost formu-las. c~ is the CRR value. /3 denotes the blocking factor, which is the number of data records that can be stored in one memory page. A is the average number of nodes in the neighbor list of a node. N is the total number of nodes in the data set, L is the number of nodes along a route, and 
R is the number of nodes randomly generated by users for spatial outlier verification. 
The TPC algorithm is a nest loop index join. Suppose that we use two memory buffers. If one memory buffer stores the data object x used in the outer loop and the other mem-ory buffer is reserved for processing the neighbors of x, we get the following cost function to estimate the number num-ber of page accesses. CTPO = ff +N.h. (1 -a) 
The outer loop retrieves all the data records on a page basis, and has an aggregated cost of ft. For each node x, on average, a * A neighbors are in the same page as x, and can be processed without redundant I/O. Additional data page accesses are needed to retrieve the other (1-a).A neighbors, and it takes at most (1 -a) * A data page accesses. Thus 
In a similar way, a cost model for ROD algorithms can be 
L * (1 -a) * (1 + A); and a cost model for RNV algorithms can be derived as follows: CRNv = R + R  X  A  X  (1 -a) 
In this section, we describe the layout of our experiments and then illustrate the candidate clustering methods. 
The design of our experiments is shown in Figure 2. Us-ing the Twin Cities Highway Connectivity Graph(TCHCG), we took data from the TCHCG and physically stored the data set into data pages using different clustering strate-gies and page sizes. These data pages were then processed to generate the global distribution or sampling distribution, depending on the size of the data sets. 
We compared different data page clustering schemesi CCAM [13], Z-ordering [9], and Cell-tree [4]. Other parameters of interest were the size of the memory buffer, the buffering strategies, the memory block size(page size), and the num-ber of neighbors. The measures of our experiments were the 
CRR values and I/O cost for each outlier detection proce-dure. 
The experiments were conducted on many graphs. We present the results on a representative graph, which is a spatial network with 990 nodes that represents the traffic detector stations for a 20-square-mile section of the Twin Cities area. This data set is provided by the Minnesota Dept. of Transportation(MnDot). 
We used a common record type for all the clustering meth-ods. Each record contains a node and its neighbor-list, i.e., a successor-list and a predecessor-list. We also conducted per-formance comparisons of the I/O cost for outlier-detection query processing. 
In this section we describe the candidate clustering meth-ods used in the experiments. Connectivity-Clustered Access Method(CCAM)" CCAM [13] clusters the nodes of the graph via graph parti-tioning, e.g., Metis. Other graph-partitioning methods can also be used as the basis of our scheme. In addition, an auxiliary secondary index is used to support query opera-tions. The choice of a secondary index can be tailored to the application. We used the B + tree with Z-order in our experiments, since the benchmark graph was embedded in graphical space. Other access methods such as the R-tree and Grid File can alternatively be created on top of the data file, as secondary indices in CCAM to suit the application. 
Linear Clustering by Z-order: Z-order [9] utilizes spa-tial information while imposing a total order on the points. The Z-order of a coordinate (x,y) is computed by interweav-ing the bits in the binary representation of the two values. Alternatively, Hilbert ordering may be used. A conventional one-dimensional primary index (e.g. B+-tree) can be used to facilitate the search. 
Cell "lYee: A cell tree [4] is a height-balanced tree. Each cell tree node corresponds, not necessarily to a rectangular box, but to a convex polyhedron. A cell tree restricts poly-hedra to partitions of a BSP(Binary Space Partitioning), to avoid overlaps among sibling polyhedra. Each cell tree node corresponds to one disk space, and the leaf nodes contain all the information required to answer a giwn search query. The cell tree can be viewed as a combination of a BSP-and R+-tree, or as a BSP-tree mapped on paged secondary memory. 
In this section, we illustrate the outlier examples detected in the traffic data set, present the results of our experiments, and test the effectiveness of the different page clustering methods. To simplify the comparison, the I/O cost repre-sents the number of data pages accessed. This represents the relative performance of the various methods for very large databases. For smaller databases, the I/O cost associated with the indices should be measured. Here we present the evaluation of I/O cost for the TPC algorithm. The eval-uations of I/O cost for the I~NV and ROD algorithms are available in the full version paper. 6.1 We tested the effectiveness of our algorithm on the Twin Cities traffic data set and detected numerous outliers, as described in the following examples. 
Figure 3 shows one example of traffic flow outliers. Fig-ures 3(a) and (b) are the traffic volume maps for 1-35W North Bound and South Bound, respectively, on 1/21/1997. The X-axis is a 5-minute time slot for the whole day and the Y-axis is the label of the stations installed on the highway, starting from 1 on the north end to 61 on the south end. The abnormal white line at 2:45pm and the white rectangle from 8:20am to 10:00am on the X-axis and between stations 29 to 34 on the Y-axis can be easily observed from both (a) and (b). The white line at 2:45pm is an instance of tempo-ral outliers, where the white rectangle is a spatial-temporal outlier. Moreover, station 9 in Figure 3(a) exhibits incon-sistent traffic flow compared with its neighboring stations, and was detected as a spatial outlier. 6.2 
In this section, we present the results of our evaluation of the I/O cost and CRI~ value for alternative clustering meth-ods while computing the test parameters. The parameters of interest are buffer size, page size, number of neighbors, and neighborhood depth. 
Figures 4 (a) and (b) show the number of data pages ac-cessed and the CRR values respectively, for different page clustering methods as the page sizes change. The buffer size is fixed at 32 Kbytes. As can be seen, a higher CRR value implies a lower number of data page accesses, as predicted in the cost model. CCAM outperforms the other competitors for all four page sizes, and CELL has better performance than Z-order clustering. 
We evaluated the effect of varying the number of neigh-bors and the depth of neighbors for different page clustering methods. We fixed the page size at 1K, and the buffer size at 4K, and used the LRU buffering strategy. Figure 5 shows the number of page accesses as the number of neighbors for each node increases from 2 to 10. CCAM has better perfor-mance than Z-order and CELL. The performance ranking for each page clustering method remains the same for dif-ferent numbers of neighbors. Figure 5 shows the number of page accesses as the neighborhood depth increases from 1 to 5. CCAM has better performance than Z-order and CELL for all the neighborhood depths. Figure 4: Effect of page size on data page accesses and CRR (buffer size -----32K) Figure 5: Effect of neighborhood cardinality on data page accesses (Page size ----1K, Buffer size ----4K) 
In this paper, we focused on detecting outliers in spatial graph data sets. We proposed the notion of a neighbor out-lier in graph structured data sets, designed a fast algorithm to detect outliers, analyzed the statistical foundation un-derlying our approach, provided the cost models for different outlier detection procedures, and compared the performance of our approach using different data clustering approaches. In addition, we provided experimental results from the ap-plication of our algorithm on Twin Cities traffic archival to show its effectiveness and usefulness. 
We have evaluated alternative clustering methods for neigh-bor outlier query processing, including model construction, random node verification, an/( route outlier detection. Our experimental results show that the CCAM, which achieves the highest CRR, provides thexbest overall performance. 
We are particularly grateful to Professor Vipin Kumar, and our Spatial Database Group members, Weili Wu, Yan Huang, Xiaobin Ma,and Hui Xiong for their helpful com-ments and valuable discussions. We would also like to ex-press our thanks to Kim Koffolt for improving the readabil-ity and technical accuracy of this paper. ] M. Ankerst, M. Breunig, H. Kriegel, and J. Sander. [2] V. Barnett and T. Lewis. Outliers in Statistical Data. [3] M. Breunig, H. Kriegel, R. T. Ng, and J. Sander. [4] O. Gunther. The Design of the Cell Tree: An [5] D. Hawkins. Identification of Outliers. Chapman and [6] R. Johnson. Applied Multivariate Statistical Analysis. [7] E. Knorr and R. Ng. A unified notion of outliers: [8] E. Knorr and R. Ng. Algorithms for mining [9] A. Orenstein and T. Merrett. A Class of Data [10] F. Preparata and M. Shamos. Computatinal [11] S. Ramaswamy, R. Rastongi, and K. Shim. Efficient [12] I. Ruts and P. Rousseeuw. Computing depth contours [13] S. Shekhar and D.-R. Liu. CCAM: A [14] D. Yu, G. Sheikholeslami, and A. Zhang. Findout: 
