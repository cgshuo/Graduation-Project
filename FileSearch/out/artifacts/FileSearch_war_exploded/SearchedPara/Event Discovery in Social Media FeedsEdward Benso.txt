 We propose a method for discovering event records from social media feeds such as Twitter. The task of extracting event properties has been well studied in the context of formal media (e.g., newswire), but data sources such as Twitter pose new challenges. Social media messages are often short, make heavy use of colloquial language, and require situational context for interpretation (see examples in Figure 1). Not all properties of an event may be expressed in a single message, and the mapping between mes-sages and canonical event records is not obvious. Figure 1: Examples of Twitter messages, along with automatically extracted records.
 These properties of social media streams make exist-ing extraction techniques significantly less effective. Despite these challenges, this data exhibits an im-portant property that makes learning amenable: the multitude of messages referencing the same event.
Our goal is to induce a comprehensive set of event records given a seed set of example records, such as a city event calendar table. While such resources are widely available online, they are typically high precision, but low recall. Social media is a natural place to discover new events missed by curation, but mentioned online by someone planning to attend.
We formulate our approach as a structured graphi-cal model which simultaneously analyzes individual messages, clusters them according to event, and in-duces a canonical value for each event property. At the message level, the model relies on a conditional random field component to extract field values such as location of the event and artist name. We bias lo-cal decisions made by the CRF to be consistent with canonical record values, thereby facilitating consis-tency within an event cluster. We employ a factor-graph model to capture the interaction between each of these decisions. Variational inference techniques allow us to effectively and efficiently make predic-tions on a large body of messages.

A seed set of example records constitutes our only source of supervision; we do not observe alignment between these seed records and individual messages, nor any message-level field annotation. The output of our model consists of an event-based clustering of messages, where each cluster is represented by a sin-gle multi-field record with a canonical value chosen for each field.

We apply our technique to construct entertain-ment event records for the city calendar section of NYC.com using a stream of Twitter messages. Our method yields up to a 63% recall against the city table and up to 85% precision evaluated manually, significantly outperforming several baselines. A large number of information extraction ap-proaches exploit redundancy in text collections to improve their accuracy and reduce the need for man-ually annotated data (Agichtein and Gravano, 2000; Yangarber et al., 2000; Zhu et al., 2009; Mintz et al., 2009a; Yao et al., 2010b; Hasegawa et al., 2004; Shinyama and Sekine, 2006). Our work most closely relates to methods for multi-document infor-mation extraction which utilize redundancy in in-put data to increase the accuracy of the extraction process. For instance, Mann and Yarowsky (2005) explore methods for fusing extracted information across multiple documents by performing extraction on each document independently and then merg-ing extracted relations by majority vote. This idea of consensus-based extraction is also central to our method. However, we incorporate this idea into our model by simultaneously clustering output and la-beling documents rather than performing the two tasks in serial fashion. Another important difference is inherent in the input data we are processing: it is not clear a priori which extraction decisions should agree with each other. Identifying messages that re-fer to the same event is a large part of our challenge.
Our work also relates to recent approaches for re-lation extraction with distant supervision (Mintz et al., 2009b; Bunescu and Mooney, 2007; Yao et al., 2010a). These approaches assume a database and a collection of documents that verbalize some of the database relations. In contrast to traditional super-vised IE approaches, these methods do not assume that relation instantiations are annotated in the input documents. For instance, the method of Mintz et al. (2009b) induces the mapping automatically by boot-strapping from sentences that directly match record entries. These mappings are used to learn a classi-fier for relation extraction. Yao et al. (2010a) further refine this approach by constraining predicted rela-tions to be consistent with entity types assignment. To capture the complex dependencies among assign-ments, Yao et al. (2010a) use a factor graph repre-sentation. Despite the apparent similarity in model structure, the two approaches deal with various types of uncertainties. The key challenge for our method is modeling message to record alignment which is not an issue in the previous set up.

Finally, our work fits into a broader area of text processing methods designed for social-media streams. Examples of such approaches include methods for conversation structure analysis (Ritter et al., 2010) and exploration of geographic language variation (Eisenstein et al., 2010) from Twitter mes-sages. To our knowledge no work has yet addressed record extraction from this growing corpus. Here we describe the key latent and observed ran-dom variables of our problem. A depiction of all random variables is given in Figure 2.
 Message ( x ) : Each message x is a single posting to Twitter. We use x j to represent the j th token of x , and we use x to denote the entire collection of mes-sages. Messages are always observed during train-ing and testing.
 Record ( R ) : A record is a representation of the canonical properties of an event. We use R i to de-note the i th record and R ` i to denote the value of the ` th property of that record. In our experiments, each record R i is a tuple  X  R 1 i ,R 2 i  X  which represents that record X  X  values for the schema  X  A RTIST , V ENUE  X  . Throughout, we assume a known fixed number K of records R 1 ,...,R K , and we use R to denote this collection of records. For tractability, we consider a finite number of possibilities for each R ` k which are computed from the input x (see Section 5.1 for details). Records are observed during training and latent during testing.
 Message Labels ( y ) : We assume that each message has a sequence labeling, where the labels consist of the record fields (e.g., A RTIST and V ENUE ) as well as a N ONE label denoting the token does not corre-spond to any domain field. Each token x j in a mes-sage has an associated label y j . Message labels are always latent during training and testing.
 Message to Record Alignment ( A ) : We assume that each message is aligned to some record such that the event described in the message is the one represented by that record. Each message x i is as-sociated with an alignment variable A i that takes a value in { 1 ,...,K } . We use A to denote the set of alignments across all x i . Multiple messages can and do align to the same record. As discussed in Sec-tion 4, our model will encourage tokens associated with message labels to be  X  X imilar X  to corresponding aligned record values. Alignments are always latent during training and testing. Our model can be represented as a factor graph which takes the form,  X   X  where R ` denotes the sequence R ` 1 ,...,R ` K of record values for a particular domain field ` . Each of the potentials takes a standard log-linear form: where  X  are potential-specific parameters and f (  X  ) is a potential-specific feature function. We describe each potential separately below. 4.1 Sequence Labeling Factor The sequence labeling factor is similar to a standard sequence CRF (Lafferty et al., 2001), where the po-tential over a message label sequence decomposes  X  over pairwise cliques:  X 
This factor is meant to encode the typical message contexts in which fields are evoked (e.g. going to see X tonight ). Many of the features characterize how likely a given token label, such as A RTIST , is for a given position in the message sequence conditioning arbitrarily on message text context.

The feature function f SEQ ( x,y ) for this compo-nent encodes each token X  X  identity; word shape 2 ; whether that token matches a set of regular expres-sions encoding common emoticons, time references, and venue types; and whether the token matches a bag of words observed in artist names (scraped from Wikipedia; 21,475 distinct tokens from 22,833 dis-tinct names) or a bag of words observed in New York City venue names (scraped from NYC.com ; 304 distinct tokens from 169 distinct names). 3 The only edge feature is label-to-label. 4.2 Record Uniqueness Factor One challenge with Twitter is the so-called echo chamber effect: when a topic becomes popular, or  X  X rends, X  it quickly dominates the conversation on-line. As a result some events may have only a few referent messages while other more popular events may have thousands or more. In such a circum-stance, the messages for a popular event may collect to form multiple identical record clusters. Since we fix the number of records learned, such behavior in-hibits the discovery of less talked-about events. In-stead, we would rather have just two records: one with two aligned messages and another with thou-sands. To encourage this outcome, we introduce a potential that rewards fields for being unique across records.

The uniqueness potential  X  UNQ ( R ` ) encodes the preference that each of the values R ` ,...,R ` K for each field ` do not overlap textually. This factor fac-torizes over pairs of records: where R ` k and R ` k 0 are the values of field ` for two records R k and R k 0 . The potential over this pair of values is given by: where f SIM is computes the likeness of the two val-ues at the token level:
This uniqueness potential does not encode any preference for record values; it simply encourages each field ` to be distinct across records. 4.3 Term Popularity Factor The term popularity factor  X  P OP is the first of two factors that guide the clustering of messages. Be-cause speech on Twitter is colloquial, we would like these clusters to be amenable to many variations of the canonical record properties that are ultimately learned. The  X  P OP factor accomplishes this by rep-resenting a lenient compatibility score between a message x , its labels y , and some candidate value v for a record field (e.g., Dave Matthews Band ).
This factor decomposes over tokens, and we align each token x j with the best matching token v k in v (e.g., Dave ). The token level sum is scaled by the length of the record value being matched to avoid a preference for long field values.
This token-level component may be thought of as a compatibility score between the labeled token x j and the record field assignment R ` A = v . Given that token x j aligns with the token v k , the token-level component returns the sum of three parts, subject to the constraint that y j = ` :  X  IDF ( x j ) I [ x j = v k ] , an equality indicator be-,  X  I [ x j = v k and x contains v ] / | v | , a bonus for a 4.4 Record Consistency Factor While the uniqueness factor discourages a flood of messages for a single event from clustering into mul-tiple event records, we also wish to discourage mes-sages from multiple events from clustering into the same record. When such a situation occurs, the model may either resolve it by changing inconsis-tent token labelings to the N ONE label or by reas-signing some of the messages to a new cluster. We encourage the latter solution with a record consis-tency factor  X  CON .

The record consistency factor is an indicator func-tion on the field values of a record being present and labeled correctly in a message. While the popular-ity factor encourages agreement on a per-label basis, this factor influences the joint behavior of message labels to agree with the aligned record. For a given record, message, and labeling,  X  CON ( x,y,R A ) = 1 if  X  P OP ( x,y,R ` A ) &gt; 0 for all ` , and 0 otherwise. 4.5 Parameter Learning The weights of the CRF component of our model,  X 
SEQ , are the only weights learned at training time, using a distant supervision process described in Sec-tion 6. The weights of the remaining three factors were hand-tuned 4 using our training data set. Our goal is to predict a set of records R . Ideally we would like to compute P ( R | x ) , marginalizing out the nuisance variables A and y . We approximate this posterior using variational inference. 5 Con-cretely, we approximate the full posterior over latent variables using a mean-field factorization: where each variational factor q (  X  ) represents an ap-proximation of that variable X  X  posterior given ob-served random variables. The variational distribu-tion Q (  X  ) makes the (incorrect) assumption that the posteriors amongst factors are independent. The goal of variational inference is to set factors q (  X  ) to optimize the variational objective: We optimize this objective using coordinate descent on the q (  X  ) factors. For instance, for the case of q ( the update takes the form: where Q/q ( y i ) denotes the expectation under all variables except y i . When computing a mean field update, we only need to consider the potentials in-volving that variable. The complete updates for each of the kinds of variables ( y , A , and R ` ) can be found in Figure 4. We briefly describe the computations involved with each update. q ( y ) update : The q ( y ) update for a single mes-sage yields an implicit expression in terms of pair-wise cliques in y . We can compute arbitrary ln ) )  X  (
R = v ) ln h  X  h )  X  x,y,R ` z = v )  X  CON ( x,y,R ` z = v ) io h  X  ) + X h  X  marginals for this distribution by using the forwards-backwards algorithm on the potentials defined in the update. Therefore computing the q ( y ) update amounts to re-running forward backwards on the message where there is an expected potential term which involves the belief over other variables. Note that the popularity and consensus potentials (  X  P OP and  X  CON ) decompose over individual message to-kens so this can be tractably computed. q ( A ) update: The update for individual record alignment reduces to being log-proportional to the expected popularity and consensus potentials. q ( R ` k ) update: The update for the record field distribution is the most complex factor of the three. It requires computing expected similarity with other record field values (the  X  UNQ potential) and looping over all messages to accumulate a contribution from each, weighted by the probability that it is aligned to the target record. 5.1 Initializing Factors Since a uniform initialization of all factors is a saddle-point of the objective, we opt to initialize the q ( y ) factors with the marginals obtained using just the CRF parameters, accomplished by running forwards-backwards on all messages using only the  X 
SEQ potentials. The q randomly and then biased with the output of our baseline model. The q ( A ) factor is initialized to uni-form plus a small amount of noise.

To simplify inference, we pre-compute a finite set of values that each R ` k is allowed to take, condi-tioned on the corpus. To do so, we run the CRF component of our model (  X  SEQ ) over the corpus and extract, for each ` , all spans that have a token-level probability of being labeled ` greater than  X  = 0 . 1 . We further filter this set down to only values that oc-cur at least twice in the corpus.

This simplification introduces sparsity that we take advantage of during inference to speed perfor-mance. Because each term in  X  P OP and  X  CON in-cludes an indicator function based on a token match between a field-value and a message, knowing the possible values v of each R ` k enables us to precom-pute the combinations of ( x,`,v ) for which nonzero factor values are possible. For each such tuple, we can also precompute the best alignment position k for each token x j . Data We apply our approach to construct a database of concerts in New York City. We used Twitter X  X  public API to collect roughly 4.7 Million tweets across three weekends that we subsequently filter down to 5,800 messages. The messages have an av-erage length of 18 tokens, and the corpus vocabu-lary comprises 468,000 unique words 6 . We obtain labeled gold records using data scraped from the NYC.com music event guide; totaling 110 extracted records. Each gold record had two fields of interest: A
The first weekend of data (messages and events) was used for training and the second two weekends were used for testing.
 Preprocessing Only a small fraction of Twitter mes-sages are relevant to the target extraction task. Di-rectly processing the raw unfiltered stream would prohibitively increase computational costs and make learning more difficult due to the noise inherent in the data. To focus our efforts on the promising por-tion of the stream, we perform two types of filter-ing. First, we only retain tweets whose authors list some variant of New York as their location in their profile. Second, we employ a MIRA-based binary classifier (Ritter et al., 2010) to predict whether a message mentions a concert event. After training on 2,000 hand-annotated tweets, this classifier achieves an F 1 of 46.9 (precision of 35.0 and recall of 71.0) when tested on 300 messages. While the two-stage filtering does not fully eliminate noise in the input stream, it greatly reduces the presence of irrelevant messages to a manageable 5,800 messages without filtering too many  X  X ignal X  tweets.

We also filter our gold record set to include only records in which each field value occurs at least once somewhere in the corpus, as these are the records which are possible to learn given the input. This yields 11 training and 31 testing records.
 Training The first weekend of data (2,184 messages and 11 records after preprocessing) is used for train-ing. As mentioned in Section 4, the only learned pa-rameters in our model are those associated with the sequence labeling factor  X  SEQ . While it is possi-ble to train these parameters via direct annotation of messages with label sequences, we opted instead to use a simple approach where message tokens from the training weekend are labeled via their intersec-tion with gold records, often called  X  X istant super-vision X  (Mintz et al., 2009b). Concretely, we auto-matically label message tokens in the training cor-pus with either the A RTIST or V ENUE label if they belonged to a sequence that matched a gold record field, and with N ONE otherwise. This is the only use that is made of the gold records throughout training.  X 
SEQ parameters are trained using this labeling with a standard conditional likelihood objective. Testing The two weekends of data used for test-ing totaled 3,662 tweets after preprocessing and 31 gold records for evaluation. The two weekends were tested separately and their results were aggregated across weekends.
 Our model assumes a fixed number of records K = 130 . 7 We rank these records according to a heuristic ranking function that favors the unique-ness of a record X  X  field values across the set and the number of messages in the testing corpus that have Figure 5: Recall against the gold records. The horizontal token overlap with these values. This ranking func-tion is intended to push garbage collection records to the bottom of the list. Finally, we retain the top k records, throwing away the rest. Results in Section 7 are reported as a function of this k .
 Baseline We compare our system against three base-lines that employ a voting methodology similar to Mann and Yarowsky (2005). The baselines label each message and then extract one record for each combination of labeled phrases. Each extraction is considered a vote for that record X  X  existence, and these votes are aggregated across all messages.
Our List Baseline labels messages by finding string overlaps against a list of musical artists and venues scraped from web data (the same lists used as features in our CRF component). The CRF Baseline is most similar to Mann and Yarowsky (2005) X  X  CRF Voting method and uses the maximum likelihood CRF labeling of each message. The Low Thresh-old Baseline generates all possible records from la-belings with a token-level likelihood greater than  X  = 0 . 1 . The output of these baselines is a set of records ranked by the number of votes cast for each, and we perform our evaluation against the top k of these records. The evaluation of record construction is challeng-ing because many induced music events discussed in Twitter messages are not in our gold data set; our gold records are precise but incomplete. Because of this, we evaluate recall and precision separately. Both evaluations are performed using hard zero-one loss at record level. This is a harsh evaluation crite-rion, but it is realistic for real-world use. Recall We evaluate recall, shown in Figure 5, against the gold event records for each weekend. This shows how well our model could do at replac-ing the a city event guide, providing Twitter users chat about events taking place.

We perform our evaluation by taking the top k records induced, performing a stable marriage matching against the gold records, and then evalu-ating the resulting matched pairs. Stable marriage matching is a widely used approach that finds a bi-partite matching between two groups such that no pairing exists in which both participants would pre-fer some other pairing (Irving et al., 1987). With our hard loss function and no duplicate gold records, this amounts to the standard recall calculation. We choose this bipartite matching technique because it generalizes nicely to allow for other forms of loss calculation (such as token-level loss).
 Precision To evaluate precision we assembled a list of the distinct records produced by all models and then manually determined if each record was cor-rect. This determination was made blind to which model produced the record. We then used this ag-gregate list of correct records to measure precision for each individual model, shown in Figure 6.
By construction, our baselines incorporate a hard constraint that each relation learned must be ex-pressed in entirety in at least one message. Our model only incorporates a soft version of this con-straint via the  X  CON factor, but this constraint clearly has the ability to boost precision. To show it X  X  effect, we additionally evaluate our model, la-beled Our Work + Con , with this constraint applied in hard form as an output filter.

The downward trend in precision that can be seen in Figure 6 is the effect of our ranking algorithm, which attempts to push garbage collection records towards the bottom of the record list. As we incor-porate these records, precision drops. These lines trend up for two of the baselines because the rank-Figure 6: Precision, evaluated manually by cross-ing heuristic is not as effective for them.

These graphs confirm our hypothesis that we gain significant benefit by intertwining constraints on ex-traction consistency in the learning process, rather than only using this constraint to filter output. 7.1 Analysis One persistent problem is a popular phrase appear-ing in many records, such as the value  X  X ew York X  filling many A RTIST slots. The uniqueness factor  X 
UNQ helps control this behavior, but it is a rela-tively blunt instrument. Ideally, our model would learn, for each field ` , the degree to which dupli-cate values are permitted. It is also possible that by learning, rather than hand-tuning, the  X  CON ,  X  P OP , and  X  UNQ parameters, our model could find a bal-ance that permits the proper level of duplication for a particular domain.

Other errors can be explained by the lack of con-stituent features in our model, such as the selection of V ENUE values that do not correspond to noun phrases. Further, semantic features could help avoid learning syntactically plausible artists like  X  X crew the Rain X  because of the message:
Our model X  X  soft string comparison-based clus-tering can be seen at work when our model uncov-ers records that would have been impossible without this approach. One such example is correcting the misspelling of venue names (e.g. Terminal Five  X  Terminal 5 ) even when no message about the event spells the venue correctly.

Still, the clustering can introduce errors by com-bining messages that provide orthogonal field con-tributions yet have overlapping tokens (thus escap-ing the penalty of the consistency factor). An exam-ple of two messages participating in this scenario is shown below; the shared term  X  X oliday X  in the sec-ond message gets relabeled as A RTIST :
While our experiments utilized binary relations, we believe our general approach should be useful for n -ary relation recovery in the social media domain. Because short messages are unlikely to express high arity relations completely, tying extraction and clus-tering seems an intuitive solution. In such a sce-nario, the record consistency constraints imposed by our model would have to be relaxed, perhaps exam-ining pairwise argument consistency instead. We presented a novel model for record extraction from social media streams such as Twitter. Our model operates on a noisy feed of data and extracts canonical records of events by aggregating informa-tion across multiple messages. Despite the noise of irrelevant messages and the relatively colloquial nature of message language, we are able to extract records with relatively high accuracy. There is still much room for improvement using a broader array of features on factors. The authors gratefully acknowledge the support of the DARPA Machine Reading Program under AFRL prime contract no. FA8750-09-C-0172. Any opin-ions, findings, and conclusions expressed in this ma-terial are those of the author(s) and do not necessar-ily reflect the views of DARPA, AFRL, or the US government. Thanks also to Tal Wagner for his de-velopment assistance and the MIT NLP group for their helpful comments.
