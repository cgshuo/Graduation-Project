 A new paradigm of recommendation is emerging in intelli-gent personal assistants such as Apple X  X  Siri, Google Now, and Microsoft Cortana, which recommends  X  X he right infor-mation at the right time X  and proactively helps you  X  X et things done X . This type of recommendation requires pre-cisely tracking users X  contemporaneous intent, i.e., what type of information (e.g., weather, stock prices) users currently intend to know, and what tasks (e.g., playing music, get-ting taxis) they intend to do. Users X  intent is closely related to context, which includes both external environments such as time and location, and users X  internal activities that can be sensed by personal assistants. The relationship between context and intent exhibits complicated co-occurring and sequential correlation, and contextual signals are also het-erogeneous and sparse, which makes modeling the context-intent relationship a challenging task. To solve the intent tracking problem, we propose the Kalman filter regularized PARAFAC2 (KP2) nowcasting model, which compactly rep-resents the structure and co-movement of context and intent. The KP2 model utilizes collaborative capabilities among users, and learns for each user a personalized dynamic sys-tem that enables efficient nowcasting of users X  intent. Exten-sive experiments using real-world data sets from a commer-cial personal assistant show that the KP2 model significantly outperforms various methods, and provides inspiring impli-cations for deploying large-scale proactive recommendation systems in personal assistants.
 Recommendation; nowcasting; multi-task learning Intelligent personal assistants such as Apple X  X  Siri, Google Now, and Microsoft Cortana are widely deployed on mobile devices (Cortana is also on Windows desktops). They offer proactive experiences that aim to recommend  X  X he right in-formation at just the right time X  X 1], and help you X  X et things d one X  [2] even  X  X efore you ask X  [3]. Figure 1 shows examples of such proactive experiences (left to right) from Microsoft Cortana (on desktops), Apple X  X  Siri, and Google Now, re-spectively. We can see that personal assistants proactively recommend various types of information such as weather, traffic conditions, stock prices, nearby places, and news. They also suggest apps that users probably need to complete certain tasks such as Uber for getting a taxi and Skype for sending a message. Due to limited display sizes (no matter whether on desktops or mobile devices), personal assistants can only effectively present one or two types of information. When they remind users (e.g., of contacting someone), or ask for confirmation to help users proactively complete certain tasks (e.g., playing music), they also only present one re-minder or push one notification at the right time. Therefore, to effectively provide such proactive experiences, we need to closely track users X  contemporaneous intent, i.e., what users currently intend to know , and what they intend to do .
Users X  contemporaneous intent is closely related to con-text, which includes not only external environments such as time and location, but users X  internal activities that can be effectively sensed by mobile devices such as the apps users use and venues users visit. The relationship between context and intent is complicated, which exhibits complex co-occurring and sequential correlation. For example, users may intend to listen to music while driving or using browsers, or intend to take a taxi when going to or leaving a restaurant. Context itself (e.g., using browsers, driving, and leaving a restaurant) also consists of numerous heterogeneous signals collected from various sources (e.g., the duration of focusing on browsers, distance to home, and time spent at a restau-rant), and these signals often contain very sparse records. Therefore, it is challenging to model the context-intent re-lationship. Moreover, to track users X  intent in real-time, we need efficient and robust-to-noise tracking systems, as mo-bile devices have limited computation capacity and signals collected by mobile devices are prone to be noisy.
Traditional recommendation models that recommend mu-s ic tracks [8], movies [6], etc., cannot apply to intent track-ing. These models only address one specific type of intent (e.g., to find movies), and for the specific type of intent, they aim at recommending new items, and focus on the content of recommended items. While for intent tracking, the focus is the recurrence of various types of intent, i.e., type of infor-mation (e.g., weather, news) users intend to know and tasks (e.g., playing music) they intend to do. Following the line of traditional recommendation, time-aware recommendation models consider the evolving [15] or seasonal variance [24] of user preferences and item attributes. They cannot ap-ply to intent tracking, either. Apart from the above dif-ferences, users X  intent often changes swiftly in a very short time, rather than varying on a daily or monthly basis. Mod-els [12, 20] that utilize item similarity or item co-occurring and sequential patterns (e.g., next-basket) also cannot apply because they overlook users X  context.

We propose solving the intent tracking problem with a nowcasting approach. Nowcasting approaches [5] were orig-inally developed in meteorology and successfully adopted in macroeconomics. Different from forecasting, nowcasting predicts the contemporaneous value of a variable of inter-est (intent) with more frequently available signals (context). In particular, we propose the KP2 ( K alman filter regular-ized P ARAFAC 2 ) nowcasting model to solve intent track-ing. The KP2 model compactly represents the shared struc-ture and co-movement of intent and contextual signals. It utilizes collaborative capabilities among users, and learns, for each user, a personalized dynamic system that effectively models the sequential correlation among contextual signals and intent. The dynamic system is also robust to noise and enables efficient nowcasting of users X  real time intent on mo-bile devices. The contributions are summarized as follows. The rest of the paper is organized as follows. Section 2 de-fines the problem. Section 3 analyzes the context and intent. Section 4 discusses the KP2 model. Section 5 presents ex-periments. Section 6 reviews related work and Section 7 concludes this paper.
We study the problem of closely tracking users X  contempo-raneous intent [10, 21, 22]. The intent can be any tasks users intend to do or any information users intend to know, e.g., t o order food, to book a meeting room, to know the head-line news or weather conditions. Intent is closely related to context, which includes not only external physical environ-ments, e.g., location and time, but internal states of users indicated by the activities users have recently engaged in, e.g., apps users recently used. Context is also personalized and frequently changed. Using the discrete time model, we denote by  X  a specific type of intent (e.g., listening to music), x t the context of user u at time step t , and  X  (  X , x u t whether user u has intent  X  at time t given context x u t  X  (  X , x u t ) = 1 means positive and 0 means negative. We for-mally define the intent tracking problem as follows. Definition 1 (Intent Tracking). Given a set of M users, a starting time t 0 , a tracking granularity  X  , a type of intent  X  , and context x u t of user u , the intent tracking problem is to determine the value of  X  (  X , x u t ) for every time step t of length  X  starting from t 0 .
The intent tracking problem has several challenging char-acteristics, which requires special attention and careful model design to address simultaneously. i) Real-time tracking . In the current time step, not all contextual signals (e.g., focus time of various apps) are avail-able simultaneously, which requires handling the continuous arrival of contextual signals. ii) Complex context-intent correlation . The rela-tionship between context and intent exhibits complex co-occurring and sequential correlation, e.g., users may intend to check calendar after arriving at offices. iii) Efficient and robust computation . Personal assis-tants are widely deployed on mobile devices, which have lim-ited computing capabilities, and hence require light-weight computation to response smoothly. Moreover, the data col-lected by mobile devices are also prone to be noisy. iv) Personalized service . Personal assistants are highly personalized and should be a private friend of users X . We need to pay attention to the contextual signals that are spe-cific to each individual user, e.g., the venues only frequently visited by that user. v) Data sparsity . As with traditional recommendation problems, the contextual data for a single user can be quite sparse and hence have limited predicting power.
Following existing nowcasting work [5, 9], we model each contextual signal as a random process which produces a time series. The contextual signals we consider include: activities that users engage in such as the apps users use
F igure 2: Contextual signals v.s. number of users and venues users visit, real-time spatial measurements w.r.t. users X  home and work locations (e.g., distance to home), temporal dimensions w.r.t. calendars (e.g., day of week), etc. Values in the time series of these contextual signals represent quantities relevant to the intent, e.g., the duration that users focus on an app or visit a venue. We let all the contextual signals for a user u form a panel , which is denoted by X Table 1 shows an example of a panel, where there are two app signals Chrome and Lync, two venue signals Starbucks and Fitness First, one spatial signal Dist-to-Home, and one temporal signal Day-of-Week, and the tracking intent is the need for a taxi. Note that to effectively provide personalized services, we use for each user the contextual signals specific to herself, which results in panels of various sizes.
Next, to get insight into the data to assist model design, we analyze the size of contextual signals. In particular, we investigate the number of distinct apps used and venues vis-ited by all users. Figures 2(a) and 2(b) plot the number and increase rate of distinct contextual signals against the number of users, respectively (here we use relative number of users to protect the usage statistics of the commercial personal assistant where we obtain the data). From Figure 2(a), we can see that the number of distinct contextual sig-nals, including apps and venues, increases almost linearly with the increase of users. We can also see from Figure 2(b) that venue signals have the highest increase rate. This demonstrates that on average each user visits (resp. uses) a number of venues (resp. apps) different from others. With the fast growth of users, the size of contextual signals will also grow explosively. For example, in a sampled data set of a commercial personal assistant, if we put the contex-tual signals of all users together, there will be more than 6 , 000 , 000 distinct venues and nearly 700 , 000 distinct apps. Therefore, deploying a uniform contextual dimension is not feasible and will cause significant computation problems.
Correlation between Context and Intent . Next, we investigate the sequential correlation between intent and contextual signals with the cross-correlation coefficient (CCF). CCF, which is also known as sliding inner-product, measures the similarity of two series at different lags, and is widely used to estimate the degree of sequential correlation. Specif-ically, the CCF between two series x = X u [ i ] and y = X from a panel X u (here X u [ k ] denotes the k th row of X lag  X  is computed by w here z ( t ) indicates the t th element in series z and  X  (a) V isit an educational place
Figure 3: Correlation between contextual signals mean of z . Figure 4 shows the CCF at various lags between randomly selected contextual signals and intent. Here each lag is one hour. From Figure 4(a) we can see that while using browsers (context), some users often intend to listen to mu-sic (intent) because the two series have a significantly larger CCF at lag zero. We can also see from Figure 4(b) that users often intend to take taxis before and after dining at a restau-rant (because at lags around zero the CCFs are significant). Similarly, from Figure 4(c) we know that users often intend to send messages after playing video games. We measure the context  X  X rrive at office X  by the distance to office, and we can see from Figure 4(d) that at lag zero the CCF be-tween  X  X rrive at office X  and  X  X heck calendar X  is significantly small. This means that users often intend to check their cal-endar when their distance to office is small, i.e., arriving at office. From these case studies, we can conclude that users X  intent has strong sequential correlation with contextual sig-nals. Note that this does not mean intent is determined by only a single signal. Intent in general has a complicated cor-relation with many signals. Different user groups also have very different patterns.

Correlation between Contextual Signals . We next investigate the correlation between contextual signals. Fig-ure 5 shows the covariance (using heatmap) between con-textual signals of a randomly selected panel. We can see that some signals exhibit strong covariance because there are many high heat (bright) points besides the main diagonal (which shows the covariance of a signal with itself, and has the highest heat). This indicates that there is redundancy in contextual signals, and hence we can compactly represent the structure and dynamics of a panel with low-dimensional factors. As with context and intent, we also investigate the sequential correlation between contextual signals. Figure 3 shows the CCF at various lags between randomly selected signals. We can see from Figure 3(a) that users often use document editor apps after they visit an educational place such as a university (as the CCFs from lags  X  4 to 0 are significant). We can also see from Figure 3(b) that users often visit a shopping mall several hours after using social media apps (e.g., Facebook). From these analyses, we can conclude that contextual signals are also closely correlated.
The fundamental idea of the KP2 model is to represent the structure and dynamics of panels with low-dimensional latent factors, and utilize the evolution of these latent factors for intent tracking. The structure representation is achieved by techniques inspired by PARAFAC2 tensor decomposi-tion, and the dynamics and sequential correlation in latent factors are enforced by the proposed Kalman filter regular-ization. To the best of our knowledge, this is the first time Kalman filter is used as a regularizer for tensor decompo-sition. It needs careful model design to seamlessly join the two components and make them collaborate optimally.
From the above analyses, we have seen that intent and contextual signals exhibit close co-occurring and sequential correlation. To obtain a compact model and hence retain effective prediction power, we assume that the bulk of dy-namic interactions among contextual signals and intent can be represented by a few low-dimensional latent factors, i.e., where X u  X  R N u  X  T is the panel of user u with N u con-textual signals, F u  X  R R  X  T contains the latent factors with R &lt; N u , and  X  u  X  R N u  X  R is called the factor loading ma-trix. Since the series in a single panel often contain very sparse records, we propose to utilize the collaborative capa-bilities among users to address the data sparsity problem. Specifically, we propose to represent the common structure of all users X  panels with the same set of latent factors, i.e. (note the removal of superscript u from F u ), Such latent factors F are shared by all users. They effec-tively summarize the dynamic interactions among all panels, and represent the universal co-movement of various series.
We can obtain such latent factors with the PARAFAC2 tensor decomposition [11, 14] by organizing all panels into a tensor and aligning them by the time dimension. Figure 6 il-lustrates the formed tensor and PARAFAC2 decomposition. In particular, PARAFAC2 decomposition can be formulated as the following optimization problem where F stands for the Frobenius norm. An advantage of the above formulation is that it effectively handles the context explosion problem (cf. Section 3.2). The reason is that un-like Tucker or CANDECOMP/PARAFAC (CP) tensor de-composition (cf. [14]), which requires the tensor to be of uniform size in every dimension, this formulation allows the contextual dimension to be of various sizes, and hence avoids deploying a uniform contextual dimension for all users. An-other advantage is that, without modifying (e.g., truncating) the panels to form a tensor, it well keeps all the personalized signals of each user, which enables us to provide high-quality personalized services.

Utilizing only the PARAFAC2 decomposition cannot ef-fectively model the sequential correlation within panels. It also cannot support real-time nowcasting because the de-composition is computationally expensive. To enforce se-quential correlation, and enable efficient and robust-to-noise intent computation on mobile devices, we propose using Kalman filter to regularize the latent factors, and use the obtained dynamic system for real-time intent nowcasting. Specifically, we consider the linear dynamic system to which Kalman filter applies as follows: where x u t (resp. f t ) is the t th column of matrix X u F ),  X  u  X  R N u  X  R is the loading (observation) matrix, A R
R  X  R is the transition (system) matrix, and  X  u t and  X  u are mutually independent Gaussian random variables with known positive definite covariance matrices  X  u and Q u , re-spectively. To further simplify the dynamic system, we as-sume that the covariance matrix  X  u is diagonal.

Let the vectorization of matrix U  X  R N  X  T be vec( U ) = be the matrix with T input matrices V at the main diago-nal. Using Kalman filter as a regularizer, we formulate the following optimization problem for intent tracking: where H u = diag(  X  u , T ), f = vec( F ), x u = vec( X u  X  u = diag(  X  u , T ), Q u = diag( Q u , T ), f 0 are initial factors (usually f 0 = 0 ), and the matrix norm of a vector k a k denotes a  X  Ya . Latent factors obtained from the above op-timization problem not only compactly represent the panel structure shared by all users, but model the common tem-poral dynamics and sequential correlation within all panels.
After obtaining the latent factors F (cf. Section 4.2 for algorithms that solve the optimization problem), transition matrix A u , loading matrix  X  u , and noise covariance ma-trices  X  u and Q u , we can build up a personalized dynamic system for each user, and hence implement efficient real-time intent nowcasting. Specifically, we first estimate a priori la-tent factors  X  f t for the current time step t with system tran-sition A u f t  X  1 . When contextual signals x u t are continuously available within t , we compute a posteriori latent factors f with Kalman filter (details on computing a posteriori latent factors with Kalman filter are presented in Appendix A.1), and then use the a posteriori latent factors in the following regression for intent nowcasting.
With the learned latent factors F , we obtain the relation-ship between intent and latent factors with regression. In particular, assuming that intent and contextual signals are jointly normal (which is common in the real world), we ob-tain that the likelihood  X (  X  (  X , x u t ) = 1) of user u has the intent  X  is a linear function of the latent factors f t [5], i.e., where  X  u and  X  u are coefficients of the function which can be estimated by regression on historical intent and latent factors. We apply this function to the a posteriori latent factors and obtain the intent likelihood. When the likelihood is above a chosen threshold, we make the prediction that user u has the intent, i.e.,  X  (  X , x u t ) = 1. The threshold we use is the median of fitted likelihood.
We propose solving the optimization problem of Eq. 1 by first estimating noise covariance matrices  X  u and Q u with principal component analysis, and then estimating parame-ters F , A u , and  X  u with stochastic gradient descent.
We estimate the observation noise covariance  X  u by resid-uals of approximating the sample covariance matrix of a panel with its largest R principal components. Specifically, we first standardize signals in a panel so that they have zero sample mean and unitary sample variance, i.e., where  X  x u it means the original data of X u ,  X   X  u i = matrix S u of panel X u be A ssuming that noises for different signals are independent, the covariance  X  u is estimated by where  X  u  X  R R  X  R is diagonal and contains the largest R eigenvalues of S u , W u  X  R N u  X  R consists of the corre-sponding eigenvectors subject to W u  X  W u = I , and X  X iag(  X  ) X  means keeping only the elements on main diagonal.
The transition noise covariance Q u is estimated in a sim-ilar way, except that we need to first obtain an initial es-timate of latent factors  X  F u and transition matrix  X  A particular, we obtain approximated latent factors by pro-jecting the signals to the largest R principle components of S u (the space spanned by the largest R eigenvectors), i.e., and apply vector auto-regression (VAR) on these approxi-mated latent factors to estimate the transition matrix, i.e., The covariance matrix Q u is then estimated by the residuals of VAR
Next, we estimate parameters F , A u , and  X  u with stochas-tic gradient descent (SGD), where a key task is to obtain the gradient. We mainly use the following theorem [18] to obtain gradients w.r.t. F ,  X  u , and A u in matrix forms. Theorem 1. For a scalar function g of matrix Y , the fol-lowing identify holds
P roof. By the definition of scalar differential, the left hand side equals Applying the trace operator, the right hand side equals By the definitions of derivative of scalar functions of matrices and matrix differential, we have respectively, which completes the proof.

Applying the above theorem (cf. Appendix A.2 for more d etails), we obtain the gradients w.r.t. each parameter as follows, here J d enotes the loss function of Eq. 1.  X  X   X  J  X  X   X  f T  X  X   X  f t We then apply SGD to estimate these parameters.
Data Sets . From a commercial personal assistant, we sample two real-world data sets for the two types of intent: task-completion intent and information intent, respectively. The sampled data sets consist of 8 , 857 anonymous users in total. The data set for task-completion intent contains app-launch log recorded by the personal assistant from Novem-ber 2nd to November 30th 2015. The app launch log effec-tively indicates users X  task-completion intent because when a user asks the personal assistant to do some job, the per-sonal assistant may open relevant apps to complete the task. In the experiments, we randomly select four types of task-completion intent: sending a message ( Message ), listen-ing to music ( Music ), making a reservation ( Reservation ) and getting a taxi ( Taxi ). The data set for information intent contains proactive-card log of the personal assistant from August 15th to September 10th 2015. The log keeps records of the proactively triggered cards (which present var-ious types of information such as events, sports, food and drinks, and stock prices) that are viewed by users for a cer-tain amount of time or clicked for further information. In the experiments, we randomly pick out four types of cards: news ( News ), weather ( Weather ), stock prices ( Finance ), and calendar ( Calendar ). The details of these data sets are summarized in Table 2.

Contextual Signals . We use contextual signals that can be effectively sensed by mobile devices. In particular, we use the used apps, visited venues, distances to home and work places, time of day, and day of week (a panel example containing such signals is presented in Table 1).
Evaluation Metrics . The metrics we use to evaluate the model include the F-measure and Hit-ratio. The F-measure evaluates the precision and recall of model predicted intent, and hit-ratio measures the model X  X  user coverage. In par-ticular, for a given type of intent  X  , let  X  be the num-ber of time steps used for testing, s u = ( s u 1 , . . . , s s intent  X  at time step t and s u t = 0 means the opposite. Let s and recall are computed by r espectively, and the F-measure equals T he Hit-ratio is computed by w here the numerator is the cardinality of the set of users having at least one accurate intent prediction and the de-nominator is the number of all users. The hit-ratio measures the coverage of users who will have at least one pleasant ex-perience with the personal assistant, which is an important factor for real-world product.
 Compared Methods . The methods we compare with KP2 include the following
Experiment Setting . For each data set, we use the first three quarters (  X  three weeks) to train the model, and the last quarter (  X  one week) for testing. We use one hour as the tracking granularity. We use mini-batch SGD with a batch size of 30 and an initial learning rate of 10  X  4 with bold driver adaption. We use default parameters for all compared methods, and set  X  = 0 . 5 and R = 2 for KP2 by default. We will study the effect of parameters in Section 5.3.
In the first set of experiments, we evaluate the perfor-mance of KP2 by comparing it with various methods w.r.t. F-measure. Figures 7(a) and 7(b) show the performance of each method (relative to LM) on the four types of task-completion intent and four types of information intent, re-spectively (the absolute F-measure of LM is shown at the bottom of corresponding intent). From the two figures, we can see that KP2 significantly outperforms all other methods on all types of intent in terms of F-measure.
 KP2 v.s. LM . We can see that KP2 largely outperforms LM on every type of intent. Its performance advantage to LM is up to 3 . 5 times (on Taxi intent) and is greater than 1 . 5 times on almost all types of information intent. LM is an assemble of decision trees. Although it has best perfor-mance in many ranking problems, the poor performance of LM indicates that it fails at building up the complex re-lationship between context and intent from raw contextual signals. The strong performance of KP2 indicates that it is an effective method to summarize the structure and dy-namics of panels with a few latent factors, as it results in a compact model and retains stronger prediction power.
KP2 v.s. FM . We can also see that KP2 performs sig-nificantly better than FM on all types of intent, and its per-formance advantage to FM is up to two times (on Message intent). FM factorizes the panel, takes into account the se-quential correlation, and learns an optimal pair-wise ranking model. We can see from Figures 7(a) and 7(b) that except for Message and Music intent, FM has better performance than LM on all other types of intent, which indicates the importance of modeling sequential correlation. The worse performance of FM than KP2, however, indicates that con-sidering only pair-wise correlation is insufficient for intent tracking, which needs to consider longer sequential correla-tion in the temporal dimension.

KP2 v.s. K . On every type of intent, KP2 also performs considerably better than the K method. Like KP2, the K method also summarizes panels with a few latent factors and considers sequential correlation in the temporal dimension. The drawback of K is that it fails to leverage collabora-tive capabilities among users because it can only apply to panels of each individual user. By factorizing panels of all users simultaneously with PARAFAC2, KP2 effectively ex-ploits collaborative power among users, captures common temporal recurring patterns, and proficiently handles the data sparsity problem.

KP2 v.s. P2 + K . From Figures 7(a) and 7(b), we can also see that KP2 has much better performance than P2+K on all types of intent. Similar to KP2, P2+K is a com-pact model, considers the sequential correlation and uti-lizes collaborative capabilities among users. However, using PARAFAC2 and Kalman filter separately, P2+K is unable to control the relative importance of each component, and fails to make them collaborate optimally. On the contrary, KP2 seamlessly joins the two components and is able to fully control their cooperation.
Next, we evaluate KP2 with hit-ratio. The hit-ratio re-veals the percentage of users who have (at least one) sat-isfying proactive experiences with the personal assistant. Such experiences will motivate more interactions and pro-duce a virtuous circle (as more user habits are learned), which is very important for real-world product. Tables 3 and 4 present the hit-ratio of each method on the four types of task-completion intent and four types of information in-tent, respectively. We can see that KP2 has the highest hit-ratio on all types of intent and significantly outperforms LM and FM. The hit-ratio of KP2 is up to 98 . 6% (on News intent) and is higher than 50% on almost all types of in-tent. This indicates that KP2 is able to provide satisfying proactive experiences for a large portion of users and is more suitable than other methods for real-world applications.
We can also see that although the hit-ratios of LM are the lowest among all methods, its hit-ratios on Message, Music, and News intent are higher than other types of intent. This is because these three types of intent correlate with a rela-tively simpler context, making it relatively less difficult to predict. For example, for the Message intent, some users tend to send messages in regular time windows (e.g., after 9 p.m. or Sunday), which makes the intent closely related to the time of day and day of week. For the Music intent, some users tend to listen to music while driving or using (a) Task-completion intent browsers, which relates the intent to the spatial distances and a few widely used apps. Other types of intent such as Reservation and Taxi, however, occur in much more diverse context and are related to much more complex contextual signals. The two tables also show that nowcasting related methods including K, P2+K, and KP2 have a much higher hit-ratio than other methods. This demonstrates that now-casting methods are more suitable for intent tracking.
From the above experiments, we can see that on all types of intent, KP2 has the strongest performance among all methods in terms of both F-measure and hit-ratio metrics. This demonstrates that KP2 is able to track users intent more accurately and has a very large user coverage for sat-isfying proactive experiences, which makes KP2 a more ap-propriate method for real-world applications.
Next, we study the performance of KP2 under various set-tings. We first study the effect of  X  by changing  X  from 0 to 10. Figures 8(a) and 8(b) plot the F-measure of KP2 (relative to  X  = 0) against  X  on task-completion intent and information intent, respectively. The performance measured by hit-ratio is consistent with F-measure, and hence is omit-ted. Parameter  X  controls the degree of Kalman filter reg-ularization, which enforces the sequential correlation of la-tent factors. From the figures, we can see that with the increase of  X  , the performance of KP2 first increases and then decreases on all types of intent (except News). When  X  = 0, there is no enforced sequential correlation for the latent factors, which leads to decreased performance. When  X  is greater than 5, the overemphasis on sequential corre-lation interrupts the utilization of collaborative capabilities and extraction of latent factors. This again demonstrates the significance of modeling sequential correlation and the importance of the ability to fully control the cooperation of PARAFAC2 and Kalman filtering. We can also see that for Taxi, Calendar and Finance intent, the effect of  X  is more significant (up to 10%). This shows that these types of in-tent have a stronger sequential correlation with contextual signals (e.g., such intent often occur when users leave or ar-rive certain venues). The flexibility of KP2 on modeling such correlation enables us to properly and effectively handle the tracking of such intent. (a) Task-completion intent
Next, we study the effect of R by varying R from 2 to 10. Figures 9(a) and 9(b) depict the performance of KP2 with the change of R on task-completion intent and in-formation intent, respectively (relative to R = 2). From Figure 9(a), we can see that the performance of KP2 de-creases with the increase of R on almost all types of task-completion intent (except Reservation). This is because two-dimensional latent factors are already able to capture the bulk of structure and co-movement of contextual signals re-lated to task-completion intent (which is consistent with the findings in [9]). When R becomes larger, it needs more data to train an effective model because more parameters need to be estimated and the model also tends to overfit to the training data. From Figure 9(b), we can see that the infor-mation intent has more complex relationships with R . The performance of KP2 (on average) first increases and then decreases with the increase of R . This indicates that in-formation intent is relevant to a higher dimensional latent space, which has a more complicated structure and the tran-sition of latent factors is more flexible. We can also see that on information intent, the performance variance of KP2 is in most cases within five percent, which means KP2 has the ability to address the different requirements of various information intent.
Next, we experiment on generating if-do triggers from contextual signals. If-do triggers are conditions on which users want certain tasks (resp. information) to be proac-tively completed (resp. recommended). For instance, in the statement  X  X how me today X  X  headlines every 8:00 a.m. when I am at home X ,  X  X oday X  X  headlines X  are the recommended information and  X  X very 8:00 a.m. when I am at home X  is the trigger. Automatically generating such triggers (and let users decide which to deploy) will significantly enhance inter-actions between users and personal assistants. The triggers can also be easily deployed in large-scale applications.
The general methodology of generating triggers is to use decision trees to model the contextual signals in time steps where the intent probability predicted by KP2 is above a certain threshold. The reason we use the predicted prob-ability is because: i) having no record of intent in the log does not imply users do not have such intent, which may Intent Triggers
News Between 6:00 a.m. and 10:00 a.m., Friday,
Message Between 5:30 p.m. and 7:30 p.m., weekday, M usic Later than 6:30 p.m., using browsers
R ide Later than 8:30 p.m., weekday, distance to
Reserva-Earlier than 6:30 p.m., Sunday, playing t ion computer games for a long time be simply because users do not interact with the personal a ssistant; and ii) the KP2 model effectively generalizes the training instances with common recurring patters and latent characteristics. We follow the paths of decision trees to pos-itive instances to generate the triggers. Table 5 shows one randomly selected trigger for each of the four types of task-completion intent and News intent. We omit certain con-textual signals to protect the privacy of anonymous users. We can see that these triggers are quite intuitive for the corresponding intent and can apply to many users with sim-ilar habits. This experiment (to some extent) reveals the latent characteristics used by KP2 to predict users intent, and demonstrates the ability of KP2 to automatically gen-erate effective if-do triggers.
Traditional recommendation models focus on a specific in-tent, e.g., to find movies [6], books [19] or music tracks [8], and aim at recommending new items for the intent, which are content-centered. The intent tracking problem, however, focuses on the recurrence of users X  intent so as to perform tasks or present information closely related to the intent, which is user-centered. For instance, users may not be in-terested in watching repeated movies (where content mat-ters), however, they may want to get a taxi every time after shopping (and which taxi does not matter). Following the line of content-centered recommendation, context-aware rec-ommendation [4, 17] further considers users X  context, such as time, locations, devices, etc., as users X  preferences over new items may be different in different context. Besides the aforementioned difference, the context in context-ware rec-ommendation usually contains only signals about physical environments, and their combinations can be enumerated, e.g., 24 hours  X  7 days  X  location types such as home and office [13, 25]. However, in intent tracking, there are nu-merous contextual signals even for a single user, and the combinations of context cannot be easily enumerated (as il-lustrated in Table 5). There are also time-aware models that consider the evolving [15] or seasonal variance [24] of user preferences. These methods cannot apply to intent tracking, because instead of evolving on a weekly or a monthly basis, the intent changes swiftly in very short time.
Similar to KP2, there are methods that use correlated time series to predict the target series. The nowcasting model in [5, 9] utilizes monthly macroeconomic indicators such as industrial production and consumer prices to now-cast the contemporaneous GDP, which is only released quar-terly. The model obtains a parsimonious approximation of the available information set by a few common factors and applies Kalman filter for prediction, which is the K method used in our experiments and we have seen that it is outper-formed by KP2 because it does not consider collaborative ca-pabilities among users. Similarly, the model in [16] uses the number of tweets containing certain automatically selected tokens to nowcast levels of rainfall; the model in [23] con-ducts forecast on case counts of influenza-like-illness with dy-namic Poisson auto-regression using various indicator data sources such as national case counts and Google Flu Trends; and the model in [7] uses Markov process with additional constraints, e.g., network connections, to model co-evolving of multiple time series of signals from a sensor network. One common difference between these methods and KP2 is that they are well designed for one target variable, but not for use cases that provide personalized services for a large num-ber of users, and hence these methods also do not utilize the collaborative capabilities among users.
Using search engine query log, the method in [10] identifies sequences of search queries with coherent intent, e.g., a se-quence of queries on tasks of planning a wedding, interests of a sports team, or habits of regularly reading a news site. Dif-ferent from tracking the recurrence of intent, this method is used to obtain coherent search queries, which can be further mined to discover new intent and obtain content relevant to users X  long-term interests. Therefore, the method cannot apply to intent tracking. The model in [21] addresses proac-tive experiences in search engines and personal assistants. It uses users X  cross platform behavior patterns to re-rank the proactively triggered information cards, and hence cannot apply to intent tracking, either.
It is important and beneficial for personal assistants to offer high-quality proactive experiences. Closely tracking users X  intent helps personal assistants achieve this goal by presenting (resp. completing) the right information (resp. tasks) users intend to know (resp. do) at the right time. Users X  intent has complicated correlation with various het-erogeneous contextual signals. By modeling the contextual signals and intent as panel data, the proposed KP2 now-casting model compactly represents the structure and co-movement of context and intent by a few latent factors. By applying such representation to all users, the KP2 model ef-fectively utilizes the collaborative capabilities among users. It avoids the context explosion problem with a tensor decom-position technique inspired by PARAFAC2. By regularizing the decomposition with Kalman filter, it enforces sequential correlation into the latent factors, and learns for each user a personalized dynamic system, which is robust to noise and can efficiently nowcast users X  intent. Extensive experiments using real-world data sets from a commercial personal assis-tant have shown that the KP2 model outperforms various methods for both task-completion and information intent, and is able to generate if-do triggers that enable large-scale deployment of effective proactive experiences.
Let the a priori and a posteriori latent factors and error covariance matrices at time step t be  X  f t ,  X  f t ,  X  respectively. In the time update (prediction) step, the a priori factors for the next time step are computed by and the a priori error covariance by In the measurement update (correction) step, the Kalman gain K u t equals With the Kalman gain, the a priori factors are corrected by available contextual signals (missing signals are assigned a very large variance), and the a posteriori factors equals The a posteriori error covariance for next time step equals
We obtain the differential of the loss function J as follows To obtain the gradient w.r.t. A u , we have Applying Theorem 1, we obtain T he gradient w.r.t. other variables is computed similarly.
