 1. Introduction
In the last few years, with the large amount of digital information, the demand for efficient approaches to better infor-mation access has increased. On the other hand, with the advances in distributed technologies and computer hardware, the remotely teamwork is becoming more frequently used. Consequently, some researchers have realized that collaboration is an important feature which should be analyzed in detail in order to be integrated with professional information retrieval (IR) systems, upgrading these to CIR systems.
 taken by members of a work-team  X . Hansen and J X rvelin (2005) , other two researchers who considered collaboration as an setting or in a more open community or environment  X . Foley (2008) defines synchronous CIR systems as  X  X  a field concerned with collaboration can take place either with the users working remotely, or, in a co-located setting  X .
More recently, the community has adopted CIR as an emerging research field, which includes the research areas that tra-ditionally have been part of IR, with a special emphasis on synchronous or asynchronous but explicit collaboration among people with shared information need in a co-located or distributed environment. A good starting point to develop CIR is the mixture of IR with other disciplines such as Human X  X omputer Interaction (HCI) and Computer-Supported Cooperative Work (CSCW) ( Hansen &amp; J X rvelin, 2005, Foley, Smeaton, &amp; Lee, 2006, 2008 ) as shown in Fig. 1 .

HCI and IR disciplines have both developed innovative techniques to address the challenge of navigating the complex information spaces, but so far their insights often failed to cross disciplinary borders. Human X  X omputer Interaction Infor-mation Retrieval (HCIR) has emerged in academic research and industry practice as the study of IR techniques that bring new kinds of searching systems that depend on continuous human control of the searching process ( Marchionini, 2006 ). In addition, CSCW can blend with IR and HCI in order to show CIR as a new interesting research area. CSCW is defined in Gale-gher and Kraut (1990, 1996) as an activity carried out by a group of persons, but coordinated and assisted by computers.
Most of the CIR systems developed recently include some common features: session persistence, division of labor, knowl-edge sharing and awareness inherited from the different disciplines involved in CIR. For more evidence on the community X  X  interest to improve these new modern IR approaches, please read CIR,
There are a good number of CIR prototypes and systems (see Section 3 where some examples and their features are de-scribed), but the CIR community does not have ad-hoc toolkits, application program interfaces (APIs) or class libraries with public access that can be extended or reused. Therefore, the development of CIR applications or the experimentation with new research ideas requires great programming efforts. This motivates us to design CIRLab (Collaborative Information Re-trieval Laboratory), as a groupware framework applying design patterns and an object-oriented middleware platform. CIRLab also wraps some open-source third party APIs (e.g. search engines). These features let us maximize the CIRLab X  X  reusability and adaptability in new CIR contexts.

In the CSCW context, the term groupware refers to an application that helps people work together collectively while lo-cated remotely (different place) or co-located (same place) from each other, and interacting synchronously (same time) or asynchronously (different time) ( Ellis, Gibbs, &amp; Rein, 1991 ). One of the most general definitions was coined by Wells and
Kurien (1996)  X  X  X roupware is the software and hardware for shared interactive environments  X . A CIR system can support collab-orative activities according to this two dimensions (place and time), but it necessarily has to support explicit collaboration.
Finally, a CIR system can be defined as a groupware that supports explicit collaboration among group members in order to help them to satisfy their shared information need.

Our approach takes advantage of the synergistic relationship among design patterns, frameworks and middleware. De-sign patterns codify reusable design expertise that provides time-proven solutions to commonly occurring software prob-lems that arise in particular contexts and domains. Frameworks provide both a reusable architecture, guided by patterns, and an integrated set of collaborating components that implement concrete realizations of the architecture. Middleware is reusable software that leverages patterns and frameworks to bridge the gap between the functional requirements of appli-cations and the underlying operating systems, network protocol stacks, and data persistence ( Schmidt &amp; Buschmann, 2003 ).
The objective of this paper is to present the CIRLab design principles and characteristics, as well as to present a case study about how this can be instantiated with the collaborative search-driven development (CSDD) as a particular context, com-paring and evaluating then different search scenarios. Search-driven development (SDD) is a new research area motivated by the observation that software developers spend most of their times in searching pertinent information that they need to
CIR features could be greatly exploited. For this reason we use the phrase CSDD to refer us to apply different CIR techniques in the SDD process.

CIRLab can be used both by developers unfamiliar with groupware development and IR techniques through its instanti-ation, as well as by experts in IR, HCI and CSCW fields interested in CIR research and experimentation.

We have organized this paper as follows. In the next Section 2 , we shall present an overview of patterns, frameworks, and middleware, describing how these technologies complement each other as CIRLab foundations. Then, in Section 3 , we shall imental evaluation as well. Section 7 concludes this paper exposing conclusions and the improvements foreseen for CIRLab. 2. Middleware, frameworks and patterns: CIRLab foundations
The development of CIR prototypes and systems is a complex task, which involves software technologies in different areas such as distributed programming, information search and retrieval, collaboration among people, task coordination and many others. This situation is not ideal because it requires great programming efforts. Fortunately, design patterns, frameworks, and middleware are increasing their popularity since they have a high reusability impact and suitable relationships ( Schmidt &amp; Buschmann, 2003 ). To address this CIR implementation problem, we have designed CIRLab as a groupware framework.
Methodologies for the development of a framework have been suggested that use domain analysis (see Section 3 for a brief analysis of a CIR domain), software evolution, and design patterns. This section presents an overview of patterns, frame-works, and middleware and describes how these technologies complement each other to enhance their reuse and productivity. 2.1. Middleware
As mentioned before, a groupware supports collaboration among group members that can be in different places at the same time. This capability requires a distributed architecture, usually Web applications with a client/server architecture.
This model is very useful when collaboration is asynchronous (e.g. in collaborative filtering or social networks), but in syn-chronous interactive situations as well as CIR systems it is not very efficient. For that reason we consider the use of a mid-dleware-based architecture as mechanisms of communication among user clients, instead of a Web-based architecture. We wish to emphasize than with the middleware-based architecture it is also possible to surf the Web.

Over the past decade, a number of object-oriented middleware standards have emerged and matured, such as the Com-mon Object Request Broker Architecture (CORBA) and Distributed Component Object Model (DCOM). Currently, the devel-opers who are looking for an object-oriented middleware platform are offered some alternatives. Therefore, it is important to make careful selections. For example, .NET/WCF has the drawback that it supports only a limited number of languages and platforms. Java Remote Method Invocation (RMI) is a Java-only solution. CORBA has got the high degree of complexity of an aging platform, coupled with ongoing vendor attrition. Web Services have severe inefficiencies and the need of using pro-prietary development platforms, as well as security issues ( Henning &amp; Spruiell, 2008 ).

For our purposes, we have selected the Internet Communications Engine suitable for use in heterogeneous environments: client and server can be written in different programming languages, run on different operating systems and machine architectures, and they communicate using a variety of networking technologies ( Hen-ning &amp; Spruiell, 2008 ). 2.2. Frameworks
A framework is a collection of classes that provides a set of services for a particular domain; a framework thus exports a number of individual classes and mechanisms that developers can reuse or adapt ( Fayad, Schmidt, &amp; Johnson, 1999 ). It is characterized by three important features ( Johnson &amp; Foote, 1988 ).

First, a framework exhibits inversion of control (IoC) at runtime via callbacks to component hook methods after the occur-rence of an event such as a mouse click or data arriving on a network connection. When an event occurs, the framework calls back to a virtual hook method in a pre-registered component which then performs application-defined processing in re-sponse to the event. The virtual hook method in the components decouples the application software from the reusable framework software, which makes it easier to extend and customize the applications as long as the interaction protocols and quality properties are not violated.
Second, a framework provides an integrated set of domain-specific structures and functionalities. Reuse of software depends largely on how well frameworks model the commonalities and variability in application domains. By leveraging the domain knowledge and prior efforts of experienced developers, frameworks embody common solutions to recurring application requirements and software design challenges that need not be recreated and re-validated for each new application.

Finally, a framework is a semi-complete application that programmers can customize to form complete applications by extending reusable components in the framework. In particular, frameworks help abstract the canonical control flow of applications in a domain into architectures and families of related components. At runtime, these components can collabo-rate to integrate customizable application-independent reusable code with customized application-defined code. 2.3. Design patterns
The design of a groupware framework can be greatly improved by using design patterns. A design pattern is a description of communicating objects and classes which is customized to solve a general design problem in a specific context. Each pat-tern represents a common and recurring design solution which can be applied over and over again in different problem-spe-cific contexts ( Gamma, Helm, Johnson, &amp; Vlissides, 1995, 2000 ).

Patterns provide the designer with: (a) abstract templates on how to make specific parts of a framework more flexible towards changes, (b) a mechanism to document the architecture of a framework using a high abstraction level vocabulary, and (c) a mechanism to impose rules about how to reuse or extend the framework, i.e., outline a specific interface on how to incorporate extensions. On the other hand, they provide the developer with (a) a higher level of documentation for a complex framework consisting of numerous heavily interconnected classes and objects and (b) a guidance on how to extend the framework with new variations and whether or not extensions can be made ( Ventura, Romero, Zafra, Delgado, &amp; Herv X s, 2007 ). 2.4. Model view controller architecture
One of many important architectural pattern concepts that assists in the development of applications that have to display an interface to a user of a system is the Model View Controller architecture (or MVC). MVC structure offers significant ben-some of which use or have borrowed ideas from MVC.

MVC is a design concept that attempts to separate an application into three distinct parts. One part is concerned with the actual work the application performs, another part is concerned with displaying the data or information of an application, and another part coordinates the former two parts in order to display the correct interface or execute some work that the application needs to complete. These parts are respectively:
The logical separation of the application into these parts ensures that the Model layer knows nothing about how it is dis-played; it is restricted to just representing the component parts of the problem being solved by the application. Likewise, the
View layer is concerned only with displaying data and not with implementing business logic, which is handled by the Model layer. The Controller, much like a traffic officer, directs the views to be displayed and fires off data changes and retrievals from the Model layer. 3. CIR in perspectives
CIR research could be subdivided in many ways, although it seems that there are five main areas of research that make up a considerable portion of the subject. They are: division of labor, sharing of knowledge, group awareness, session persistence, and evaluation. In the next items we shall briefly describe each one.

Recently, some researchers have identified different search scenarios where it is necessary to extend the IR systems with ables remote users to synchronously or asynchronously collaborate when searching the Web. It supports collaboration with improve the experience of co-located collaborative Web search by leveraging readily available devices such as mobile phones and extra peripherals. In the interactive multimedia context, F X schl X r-DiamondTouch ( Smeaton, Lee, Foley, McGiv-ney, &amp; Gurrin, 2006 ) uses a conventional back-end search engine for text and image searching and a novel multi-user col-laborative tabletop interface to support collaborative group searching. MediaMagic ( Pickens et al., 2008 ) is an interactive video search system. It allows the searcher to quickly assess query results and easily pivot those results off to form new que-ries. Using MediaMagic, two or more users with common information needs search together, simultaneously. The collabo-rative system provides tools, user interfaces and, most importantly, algorithmically-mediated retrieval to focus, enhance and tual digital library system targeted at strategic support of users during the information search and retrieval process, which provides basic collaborative services and recommendations. In Table 1 , we present a list of CIR examples that have been pro-posed in the last few years, pointing out their application domain. 4. Design considerations of CIRLab This section describes the design of CIRLab. It is composed of three main modules ( Fig. 2 ):
With CIRLab it is easy to build front-end applications using the CIRLab Client Core. It permits the remote use of some ser-vice deployed on the server, such as instant messaging, sharing results, recommends relevant results, user X  X  query histories and other state-of-the-art CIR techniques. With Facades Mediator, it is possible to integrate the front-end client applications with the CIRLab Server Core by an efficient distributed notification mechanism, guaranteeing synchronous and asynchronous be used by researchers to configure parameters, index test collections and design experiments or simply to manage a real CIR system. To complement both, it makes persistent important information for users X  help and user X  X  behavior for researchers. CIRLab includes the Actions Tracker module which implements some persistence mechanisms.
 4.1. CIRLab Core
In this section we present the CIRLab basics. Note than when we say CIRLab Core we refer to the basic elements of both  X  server and client. In order to differentiate between these two part, when needed, we shall use the terms Server Core and
Client Core, respectively. 4.1.1. Distributed platform
The distribution and communication facilities of CIRLab are ICE conforming. Its middleware platform provides tools, APIs, and library support for object-oriented client/server applications development. In addition, we consider that the MVC pat-almost entirely user-driven and has to present some sort of interface for that to occur.

In Fig. 3 , we present the MVC pattern applied in CIRLab X  X  architecture. The flow of events can be as follows. First, a group member can request the Collaborative Search Session Controller (MVC Controller) at the server side, through the Facades
Mediator (see Section 4.2 ), as well as some indication of the work required wrapped in different parameters of the Request object. For example, action = divisionOfLabor, principle = metasearchAndSplit , where action represents the work that the con-troller should undertake and principle how it must be done. Second, the controller receives the request and determines the work to be completed based on the request. The Controller executes calls on the CIR Model to undertake the required logic. Third, the Model component is instructed to provide a list of objects needed by the Controller. It may access some sort wrapped in the Response object to be displayed in the Collaborative Virtual Environment View (MVC View) through the Fa-cades Mediator. The Controller also determines the appropriate View to provide for the end-user. Using the request dis-patcher, the Controller can provide the list of objects to the View selected. Fifth, the View now has a reference to the data provided and renders the display of the list in accordance with its display logic. Finally, the results of this process is provided back to the group members in the response. 4.1.2. Collaborative search session manager A collaborative search session (CSS) is a group of end-users working together to satisfy their shared information needs. Group manager is a common problem that has been explained in many groupware. In CIRLab we adapted the proposal by
Gonzaga and Shin-Ting (2000) . CIRLab Core provides the appropriate mechanism for managing the group members and their roles in a CSS according to the following classification of users: (a) Potential Member, whose elements are equivalent to those from the end-user of a traditional IR system (e.g. Google, Yahoo! or Windows Live Search in the World Wide Web context) and may manipulate the instant messaging with other potential members through the Collaborative Portal; (b) Member is a subclass of Potential Member, whose elements have right access to the CIR techniques and may interact with other members inside their CSS; and (c) Chairman is a subclass of Member, whose elements coordinate the search session (each session has one chairman at the same time).

Because of potential conflicts that may arise from simultaneous access in a CSS by multiple end-users, concurrency con-trol to avoid/solve resources contention is required.
 For each collaborative search session, CIRLab allow the chairman to establish: 4.1.3. IR engines manager
Another important component in CIRLab Server Core is the IR Engine Manager in charge of communicating and managing all search engines available to index and search the collections. It will distribute the query to each search engine, obtaining the results. This piece of software allows developers to use different search engines, such as Apache Lucene, Lemur/Indri and ber of IR engines available using the template method design pattern. 4.2. Facades Mediator Facades Mediator is an event-driven notification service that has been developed in order to complement the CIRLab
MVC-based architecture. MVC approach is largely based on an event-driven environment in which the end-user drives interface (GUI) developments. Facades Mediator permits an agile development of the interactive collaborative virtual envi-ronment in a particular context. It supports notification mechanisms for instant messaging, different variants of division of labor, group awareness techniques, explicit recommendations and users X  manager. Each collaborative activity related to GUIs needs to use the Facades Mediator API. In addition, it is possible to extends the Facades Mediator with synchronous or asyn-chronous collaborative tasks using the template method design pattern. 4.3. Action Tracker This module allows to make persistent all data that result significant for CIR techniques and researchers experimentation. User profiles can be used and may include demographic information, e.g. name, age, country, education level, etc., and may also represent the interests or preferences of either a group of users or a single person. In order to construct an individual user profile, information may be collected explicitly through direct user intervention, or implicitly, through agents that mon-itor user activity. 5. An approach to CIRLab instantiation: collaborative search-driven development
In this section we shall illustrate the CIRLab instantiation through a case study of CSDD with the purpose of describing how this framework can be used.

CIR systems can be applied in several domains, such as travel planning, organizing social events, working on a homework assignment, medical environments or multimedia contexts. With the aim of beginning the pragmatic CIRLab validation, we identified software development as a possible applicability field where much evidence of programmers collaboration on a development process can be found. For example, concurrent edition of models and processes requires synchronous collab-oration between architects and developers who cannot be physically present at a common location ( Jim X nez, Piattini, &amp; Viz-ca X no, 2009 ).

In the last few years, some IR systems have become a critical tools for software developers. Currently, there are some spe-cialized IR systems for source-code search. Examples include Google Code Search, Krugle, CodeFetch, Koders, and Codase.
Some of them, such as Koders, can be integrated with IDEs such as Eclipse and Visual Studio.NET, but all those interfaces are one-person oriented. More recently, there have been some significant efforts both from academia and the industry to fix Search-Driven Development (SDD) as a new research area. Remark in Krugler and Mitchell (2007) , that  X  X  about 25% of a and with high-quality results  X .

The origin of this case study was the result of a brief survey that we offered to 50 students and professors engaged in work on software development projects in higher education in the domain of information technologies. Our survey results indicate that the collaborative SDD is a common task, but, unfortunately, there are no tools that adequately support it. Other surveys have been used to substantiate with evidence that the collaboration is a common activity in different search scenarios such as Morris (2008) .

In the survey referenced above, when we asked: Have you ever collaborated with other programmers to search source-code? ; 78.0% responded yes. In addition, we asked: Which are the activities that have motivated you to collaborate during the source-code search? ; the most common answers were: (a) meetings of the team members to clarify programming doubts while someone umenting the search results of each one for sharing them , and (d) consulting or answering doubts via chat or email .
With this setting in mind, we have instantiated CIRLab to perform source-code searches. Fig. 4 shows the prototype client interface. The search box (a) wraps the search control panel (SCP); it permits to specify the developers queries, programming language or project on which the search will be accomplished. Moreover, it can specify a searching field: comments, source-the whole problem. We need all of the technical information around and about the source-code to be able to really fly. For instance, the best examples of how to use some piece of source-code is often embedded as a small source-code snippet inside you can select documents or the Web as collections, too. The SCP also offers the possibility to specify the division of labor principle. It determines which principle to use to divide the search results among team developers. The options box (b) wraps the principal options of the prototype that permits dynamic management of the GUI. For example, a developer can show: (i) a collaborative portal where the developers can negotiate the creation of a collaborative search session and then show the embedded instant messaging box (c), (ii) a recommendations panel box (d) to carry out explicit recommendations among developers, and (iii) to add and show comments on the current and historical search results. In the search result box (e) the individual results and the recommendations made by others developers are shown. The previewer panel box (f) allow to review the results. The information box (g) permits to obtain specific information from the document selected in the re-sults panel and determine its relevance. 6. Experimental evaluation
One of the objectives of this paper is to compare different search scenarios ( SS criteria to evaluate them. Each scenario could be obtained by considering a different division of labor techniques, search en-gines results, traditional tools that support collaboration, such as chat and email, and user views for IR and CIR systems. The different hypotheses around each scenario will be formulated by viewing these components isolately or even mixed. Our main hypothesis is that the collaborative work should help to improve the retrieval performance. The aim is to find the sce-the framework of the experimentation and the evaluation methodology that we have put into practice.

Search scenarios . In this experimentation we are going to use six different search scenarios based on CIRLab (see Table 2 ) depending on the client tools used and the search principles considered. Thus, focussing on the client tools we can distin-guish between Distributed View for Source-code Search (DV4SS) and the Individual View for Source-code Search (IV4SS).
In the case of the Individual View, the members of the groups collaborate using instant messages and/or email (Simple Mes-senger for Explicit Collaboration (SM4EC) and Simple Email for Explicit Collaboration (SE4EC), respectively).
In this experimentation we have considered two different search engines: Terrier and Apache Lucene. Three different search strategies, Simple Search (SSE), MEta-SEarch (MESE) and MUlti-SEarch (MUSE), has been implemented upon these search engines. Two different alternatives have been considered to distribute the search results (in a distributed environ-ment): SPlit Algorithms (SPA) and SWitch Algorithms (SWA). In the first case, the results are automatically distributed among group members and in the the second a given member can review only the results of a specific search engine.
In order to configure these scenarios we have installed one server application and multiple clients applications. The cli-ents applications are configured with a specific search scenario.

Framework . We shall considered each search scenario when a common task is proposed to a group of users: Solve the fol-lowing problem of basic geometry using the Java programming language.

Problem: Calculate the perimeter of each of the polygons of a set of convex polygons. The input data are the coordinates of the vertexes and are found in a text file. The results should be stored in another text file.

The users are students belonging to a technical institute of information science which are familiar with the C++ program-ming language, without Java background. They have to find classes and methods needed to solve the proposed problem with
Java. Particularly, as target groups, we formed 6 teams of 3 students each one. Each group could use only clients applications with the same configuration. For example, the group 1 use clients applications configured with the search scenario SS1, group 2 use clients applications configured with the search scenario SS2 and so on.

The performance of each search scenario will be analyzed in order to evaluate our proposal. As mentioned in Section 4 , the evaluation is a current challenge in CIR. In order to measure the effectiveness of the described prototype we shall con-sider as a base the metrics proposed by Pickens, Golovchinsky, Shah, Qvarfordt, and Back (2008) , i.e. viewed precision ( P fraction of documents  X  seen by the user  X  that were relevant) and selected precision ( P relevant by the user  X  that were marked relevant in the ground truth), and selected recall/viewed recall  X  Rs = R dependent measures. We extend this metric with the effort of interaction (EoI): i.e. the fraction of explicit interaction of each user ( E and users count ( U ) multiplied by the CSS time duration ( T ). Then, a good CIR system should have high P low EoI .

Data set and Relevance Judgements . In this framework, we have used as test collection a portion of the Java API, specifically the context of the experiment.

In order to compute the recall and precision measures, and therefore, to measure the retrieval effectiveness, we have to assess the relevance judgements over the set of documents in the collection. This process have been done in the following way: 1. Generate a predefined set of queries strongly related to the objective of the experimentation: We use two techniques, 2. Determine a set of relevance judgments for each predefined query: from the set of queries predefined in the step 1, a Evaluation . Once the target geometry exercise have been explained to the students, each group had to solve it (in terms of
Java algorithms). The maximum time given for searching is 30 min. All the search logs (used queries and the explicit inter-actions between users) are processed automatically by the evaluation module embedded in the prototype server manage-ment. In order to compare the performance between the different groups we have selected the 15 different queries that were used by all groups, i.e.
With respect to the used metrics, in the paper we only present the values of P easily allow to appreciate the advantages of search scenario based on techniques CIR versus the search scenarios based on IR techniques. It was surprising that the values of view recall and precision P tween the different search scenarios so we have decided not to include them in this paper.

Table 3 shows for each query q i its performance in terms of selected precision and selected recall for each scenario. The rows entitled with AVG P and AVG R contain the average selected precision and average selected recall for each scenario. Last row in Table 3 presents the global Effort of Interaction (in the deadline time).

The results of our experiments are quite conclusive: The best results have been obtained with SS distributed view for source-code search with MEta-SEarch plus a SPlit Algorithm as search principle. We obtain the best of search  X  SS 1 vs : SS 2 ; SS 3 vs : SS 4 and SS 5 vs : SS metrics) have been obtained using the distributed interaction mechanism. From our point of view these results represent a strong support for the use of collaborative strategies in the field of code search.

On the other hand, focusing on the Individual View for code search  X  SS simple search engine  X  SS 2  X  . We believe that by using a simple search engine the user might fit the proposed queries to the retrieval strategies. On the contrary, when using a distributed view the use of different search engines seems to be pref-erable (both SS 5 and SS 3 get better performance than SS
Focusing on the EoI (see Fig. 5 ) it seems that there is a different performance between individual and distributed views of searching. Thus, individuals models seems to need less interaction in the beginning, but greater efforts are needed in the subsequent stages. On the other hand, distributed models require greater coordination efforts at the beginning, which are compensated at later stages by obtaining more relevant information.

Finally, and as a conclusion, by this experimentation we show how CIR techniques are useful in the field of SDD, as they help to improve the retrieval effectiveness.
 7. Conclusions and future work
The CIR community has been developing some groupware in the last few years, but many of these developments address only specific problems or do not adequately support collaborative interaction. Therefore, it is convenient to have an exper-imental platform that allows to test new algorithms which use inputs from multiple users and compare their searching re-sults with a single user activity. In that sense, we have described CIRLab  X  a groupware framework for CIR research and experimentation. We have shown its main features and its modular architecture which is easy to extend and reuse in dif-ferent search contexts. The principal beneficiaries of this work will be researchers in the CIR field who are considering the development of multi-user search applications.

There are many contexts where expanding IR horizons towards CIR would be an advantage. Some CIR systems and pro-totypes on Web search, medical environment and multimedia have been proposed. This paper proposes the software devel-opment as another study area for CIR systems to deploy. Software development is a collaborative process where teams of developers work together to design, solve problems and, particularly, share their source-code search results. We have ana-lyzed the development of a CSDD prototype using CIRLab components. In addition, and in order to exemplify the instanti-ation of the platform in the SDD field, a user study has been conducted under this context with the aim of testing the viability of CIR versus the classic IR, as well as the different elements implemented in CIRLab. The main conclusion is the use of collaborative features improves the effectiveness of the search process.
 In this sense, we shall focus on transforming our CSDD prototype in a plug-in to add it at some open-source IDE as such Eclipse or NetBeans. We have also shown a proposal for the evaluation of this prototype and other CIR applications.
Our proposal contemplates some recent ideas on CIR research. Session persistence, division of labor, knowledge sharing and group awareness show up within CIR as important elements to be considered because of their notable benefits to group members with shared information needs.

Some of these CIR elements can be mixed up with personalization techniques in order to improve the group search inter-action. At the moment, we are working to mix CIR algorithms with personalization techniques, such as Groupization, Smart
Splitting and Group Hit-Highlighting, proposed by Morris, Teevan, and Bush (2008) , in order to allow a better integration between the different stages of the CIR process. To deliver recommendations, we identify Taste sideration our survey results, when 92.9% of our respondents use their workstation as an important dynamic collection of rel-evant information, we shall add to CIRLab the capability of indexing local collections, which can by used by the teamwork. This new feature of CIRLab may enhance the efficiency of CIR systems with respect to specific problems.
 Acknowledgements This work has been jointly supported by the Spanish Ministerio de Ciencia e Innovaci X n, under Project TIN2008-06566-C04-01, and the research programme Consolider Ingenio 2010: MIPRCV (CSD2007-00018).
 References
