 The Semantic Grid [3] is an Internet decoupling interconnection environment that can effectively organize, share, clus ter, fuse, and manage globally distributed versatile resources based on the interconnection semantics. Semantic Grid ser-vices will allow the semi-automatic or automatic annotation, discovery, selection, composition, and execution of inter-organization service logic. It can make the Internet become a global common platform when semantic web re-organizations and individuals communicate among each other to carry out various activities and to provide value-added services. In order to fully harness the power of web services, their functionality must be re-combined to create process workflow on Grid. Semantics can play an important role in all stages of process lifecycle.
Service composition not only enables the reuse of existing services, but pro-vides an attractive way for dynamic production and customized delivery of ser-vice contents on Semantic Grid. One promising challenge for developing such services is dynamic composition. Instead of statically integrating components [4] while the service is developed, dynamic services dynamically combine available components and resources into optimized service configurations at the invoca-tion time, when a user request is received. This allows the service composition process to take the semantic requirement and the system characteristics into consideration.

How can one describe the service composition on semantic Grid? Ontology [5] is a formal, explicit specification of a shared conceptualization. We can de-scribe the ontology of a program by defining a set of representational terms and knowledge about a domain. Definitions associate the names of entities in the universe of classes, relations, functions or other objects with human-readable text describing what the names mean and formal axioms that constrain the in-terpretation and well-formed use of these terms. A set of grid services that share the same ontology will be able to communicate about a domain of knowledge. In this paper we address the problem of automatic composition description and synthesis of web services sharing knowledge based on Semantic Grid.

The rest of the paper is organized as follows. Section 2 describes an overview of dynamic composition model. Section 3 presents the design, configurations and operation of synthesizer. Section 4 presents key technology of physical mapping. Section 5 presents simulation and evaluation. Section 6 discusses related work. Finally, the paper concludes with future work in Section 7. Dynamic service composition [6], generally, consists of two main steps [7]. The first one, sometimes called composition synthesis, describes the process of au-tomatically computing a specification of how to coordinate the components to answer a service request. The second step, often referred to as orchestration, defines the actual run-time coordination of service executions, considering also data and control flow among services. 2.1 Model of Service Composition We propose GSC (Grid service composition) architecture for dynamic configu-ration of services to achieve flexibility of sharing knowledge on semantic Grid. The service specification defines the components required by a service and de-scribes how components are interrelated after user requesting. Resource dis-covery identifies the location and capabilities of processing resources to build a resource graph describing the physical topology. Service mapping translates the service specification onto the physical resource graph while taking into ac-count all service-specific constraints. The service allocation task reserves and configures appropriate physical resources as determined by the service mapping process. Once the service has been deployed, service deployment is the final task that executes all required components to provide an operational service composi-tion for users. Our main contribution is to formally describe dynamic processing of composition and mapping process on Semantic Grid, to validate the feasibility and adaptability of such an approach.

The GSC architecture is implemented as a distributed middleware infrastruc-ture deployed in wide-area networks, which can automatically map the user X  X  composite service requests into an instantiated distributed application service in semantic web. The GSC architecture includes a semantic interpreter and a resource synthesizer, which consistent of interpreter module and facility module. A semantic interpreter realizes operational description of the domain knowledge and executes a template submitted by a developer to compose a service config-uration for each user request. A resource synthesizer is across different services and contains discovery, mapping, allocation, and deployment modules (Fig. 1). The synthesizer provides the basic building components to build new services through composition and provides common, reusable service composition func-tionalities, component selection algorithms and mechanisms for accessing the support infrastructure.

In dynamic composition model, the synthesizer identifies relevant services, explicitly states their interactions and creates a composition plan. Composi-tion plans are created at runtime based on dynamically defined composition objectives, their semantic descriptions, constraints, and available services and resources. This model can support self-configuring behaviors, changeful inter-action patterns and can be synthesized on-demand at design time. A key con-tribution is an dynamic composition model based on service-specific knowledge and automata model in which service providers express their service-specific knowledge.

From the view of the point, service specification is the foundation of service composition which can describe semantic explanation of user requisition and create requiting goal. It is the key problem that consists automatically of new process work-flow of Grid service by using available web services. This paper focuses on the service specification and composition plan part. 2.2 Overview of the Approach Service composition is a process of binding execution of two or more services. Dynamic composition is defined the integration of generating services automat-ically. That means that a new web service achieves a given goal by interacting with some of the available web services. More specifically, we take a declar-ative description of the program that realizes the service. Given the process description of n available services (S1,  X  X  X  , Sn), we encode each of them in a state automata (  X  S1,  X  X  X  ,  X  Sn), State automata provide a sort of operational semantics to process models. Each of them describes the corresponding web ser-vice as state-based dynamic automata, that can evolve changing state, and that can be partially controlled and tested.

From the view of Fig.2, the new composed service  X  S that is the process of state transition has to be generated by the state automata (  X  S1,  X  X  X  ,  X  Sn). Each of  X  Si constitutes the environment to operate by receiving and sending service requests (S1,  X  X  X  , Sn). They constitute the planner in a planning [8] domain where the planner has to plan for a goal. In our case, the planning domain is a state automata  X  that combines (  X  S1,  X  X  X  ,  X  Sn) and Goal G (G1,  X  X  X  ,Gn). The Composition Goal G imposes some re quirements on the desired behavior of the planning domain. The planner generates a plan  X  by given  X  and G to satisfy the goal G and interacts with the external services S1,  X  X  X  , Sn. The plan encodes the new service S that has to be generated, which dynamically receives and sends invocations from/to the external services (S1,  X  X  X  , Sn), tests their behaviors, and behaves depending on responses received from the external services. G is encoded as an automaton that, depending on the testing and on its internal state, executes different actions.

Formally, this combination is a synchronous product, which allows the n ser-vices to evolve independently and in parallel. They can be described as Fig 3. In the rest of the paper, we will describe step by step the automated composition task introduced above through the following example. In this section, we present how a real-world application benefit from placing processing functions into the physical resources using the state automata. We demonstrate how the application can conveniently express their processing re-quirements using state transition, how our service composition software maps these requirements onto available resources, and how processing modules and forwarding state interior to the physical resources are finally configured. 3.1 Model of Service Composition There is an example for the travel industry. Consumers can now acquire service compositions from a diversity of Web sites including online agencies and airlines. With the spread of service online of travel industry, a new technology of ontology has surfaced for the leisure travel industry. For the development of dynamic integrating solutions it is necessary to look in detailed at the service components needed to enhance the online vacation planning experience.

By transitioning service in most applications, dynamic service synthesizer can better select composition offerings, pricing and merchandizing to consumer demand. The cumulative effort of various companies and international organi-zations, including air, car, cruise, rail, hotel, travel agencies, tour operators and technology providers, has produced a fairly complete set of available services for the travel industry. 3.2 Formal Specification The development of such service Grid can be used to bring together autonomous and heterogeneous Grid services, processes, applications, data, and components residing in distributed environments. Semantics allow rich descriptions of Grid services and processes that can be used by computers for automatic processing in various tourism related applications. The deployment of ontology help under-stand a well-defined set of common data elements or vocabulary that can support communication across multiple channels, accelerate the flow of information, and meet travel industry and customer needs.

The problem is to automatically generate the plan corresponding to the travel industry service, when the travel industry service should interact with available services: S1, S2,  X  X  X  , Sn. We interpret process models as state automata, which describe dynamic systems that can be in one of their possible states and can evolve to new states as a result of performing some actions. A transition function describes how the execution of an action leads from one state to possibly many different states. System X  X  evolutions can be tested through QoS [9] describing the visible part of the system state.
 Definition 1. Service composition is modeled using nondeterministic state au-tomaton  X  =(S,A,Q,I,F,  X  ,  X  ), where (1) S is a finite set of states. I  X  S is the set of initial states; F  X  Sisthe set of final states; we require I =  X  and F =  X  . (2) A is the set of actions. (3) Q is the set of Quality of Service. (4)  X  :S  X  A  X  2 S is the transition function; it associates to each current state s  X  S and to each action a  X  Atheset  X  (s, a)  X  S of next states. (5)  X  :S  X  Q is the testing function of Quality of Service.
 Each action may result in several differen t outcomes and the transition function returns sets of states, so state automata are nondeterministic. Non-deterministic state automata are needed since the system cannot often know a priori-level which outcome will actually take place, whether it will receive a confirmation or a cance-lation from an available service. Moreover, our state automata are partially testing QoS of user requirement to transfer to next states. 3.3 QoS-Driven Composition Goals QoS-driven composition goals express re quirements for the service to be auto-matically generated according to user providing and character of system. They should represent conditions on the tempor ary evolution of services, and require-ments of different strengths and preference conditions, by addressing the QoS-driven composition of Semantic Grid services.

When we create a composite service and subsequently execute it following a user request, the number of component services involved in this composite service may be large, and the number of Grid services from which these component services are selected is likely to be even larger. On the other hand, the QoS of the resulting composite service executions is a determinant factor to ensure customer satisfaction, service goal. Different users may have different requirements and preferences regarding QoS. For example, a user may require minimizing the execution duration while satisfying certain constraints in terms of price and reputation, while another user may give more importance to the price than to the execution duration. A QoS-driven approach to service composition is therefore needed, which maximizes the QoS of composite service executions by taking into account the constraints a nd preferences of the users.

A multi-dimensional QoS model [10] is a broad concept that includes a num-ber of non-functional properties such as price, duration, availability, succeed-rate, and reputation. These properties apply both to alone Grid services and to new composite Grid services. In order to reason about QoS properties in Grid ser-vices, the QoS model is needed to captures the descriptions of these from a user requirement. It can be formally defined as follow: QoS = (Q1,  X  X  X  , Qn), for example: Q1 = Q.price, Q2 = Q.duration, Q3 = Q.availability, Q4 = Q.succeed-rate, Q5 = Q.reputation; QoS = (Q1,  X  X  X  ,Qn)  X  Goal G = (G1, G2,  X  X  X  , Gn), Where:  X   X   X  expresses create composition goal. 3.4 Automated Composition The composition goal and the planning domain  X  decide the planner (see Fig 2). The planning domain  X  represents all the ways in which the services represented by (  X  S1,  X  X  X  ,  X  Sn) can evolve. Formally, this combination is a synchronous product,  X  =  X  S1  X  X  X  X  X   X  Sn. The dynamic service composition is created by finding a domain plan that satisfies the composition goal G on Semantic Grid. We are interested in complex plans that may encode sequential, conditional and iterative behaviors. The plan can represent the flow of interactions of the synthesized composed service and the required QoS over the other services. We therefore model a plan as an automaton.
 Definition 2. A plan for planning domain  X  =(S,A,Q,I,F,  X  ,  X  ), is a tuple  X  = (P, p0,  X  ,  X  ), where (1) P is the set of plan contexts. p0  X  P is the initial context. (2)  X  :P  X  Q  X  A is the action function; it associates to a plan context p  X  P and an quality of service q  X  Q, an action a  X  A, a =  X  (p, q) to be executed . (3)  X  :P  X  Q  X  P is the context evolutions function, it associates to a plan context p  X  P and an quality of service q  X  Q, a new plan context p X   X  P, p X  =  X  (p, q).
 The contexts of the plan have been chosen from a composition goal by taking into account the semantic knowledge during the previous execution steps. Actions defined by action function  X  to be executed by the testing quality of service and on the context. Once an action is executed, the context evolutions function  X  updates the plan context. Functions  X  and  X  are partial deterministic since a plan may be obtained from a composition goal and the contexts correspond to the sub-formulas of the goal. 3.5 Dynamic Configuration Composition Dynamic configuration composition describes the state of the domain and the plan and can be executed by abstract described and physical mapping. The exe-cution of a plan over a domain can be described in terms of transitions between configurations on semantic grid.
 Definition 3. A configuration for domain  X  =(S,A,Q,I,F,  X  ,  X  ) and plan  X  = (P, p0,  X  ,  X  ), is a pair (s; p) such that s  X  Sandp  X  P. Configuration (s; p) may evolve into configuration (s X , p X ), written (s, p)  X  (s X ,p X ),ifs X   X   X  (s;  X  (p,  X  (s))) and p X  =  X  (p,  X  (s)). Configuration (s; p) is initial if s  X  Iand p=p X .
 As we know, a dynamic configuration is a snapshot of the domain controlled by the plan. A  X  X on-deterministic X  finite automation has the power to be in several states at once. This ability is often expressed as an ability to  X  X uess X  something about its input. We may have an infinite number of different execu-tions of a plan due to the non-determinism in the domain. But we can convert  X  X on-deterministic X  finite automation to  X  X eterministic X  finite automation. So we can provide a finite presentation of these executions with execution workflow configurations as states.
 Definition 4. The execution structure corresponding to domain  X  and plan  X  is the execution structure  X   X  =(W, W 0 ,R)where: (1) W is the set of configurations, W = S  X  P; (2) W 0  X  W is the initial configurations; (3) R  X  S  X  P  X  W is the transitions between configurations.
 The execution workflow  X   X  represents the evolutions of the domain  X  controlled by the plan  X  and must satisfy the composition goal G (see Fig. 2).
 If ((S)  X  (  X  S))  X  (G)  X  (W), we say that  X  is a valid plan for G on  X  . 3.6 Mapping Procession Dynamic composition techniques automate the entire composition process by using AI planning or similar technology. The synthesizer addresses the auto-mated composition problem by GSC framework which uses generic procedures and semantically marked up services to guide composition. The synthesizer acts as a gateway to Grid services and is respon sible for selecting and invoking the services. We assume the existence of a ma pping procedure. In the absence of one, mapping cannot proceed. Additionally, if the synthesizer cannot match a service, execution will fail. An important component of automated composition is the discovery of the services required.

An abstract configuration is a graph consisting of nodes representing the ab-stract components and links representing the connections between the compo-nents. While the synthesizer needs to use the knowledge in the template to decide what components and connections to use, the structures for the graph can be reused across services to handle abstract configurations.

For instance, a search for travel service is done in parallel with a flight, a car and an accommodation booking. After the searching and booking operations complete, the distance from the hotel to the accommodation is computed, and either a car or a hotel rental service is invoked, in Fig.2.

As an example, the travel industry service should interact with three avail-able services: s0, s1, s2, and s3; s0=flight, s1=car, s2=hotel, s3=cruise, which are described as OWL-S process models and translated to state transition sys-tems. Where: a1=s0  X  s1, a2=s1  X  s2, a3=s2  X  s3; q0: QoS of flight-service, q1: QoS of car-service, q2: QoS of hotel-service, q3: QoS of cruise-service. The problem is to automatically generate the plan p0= { providing flight-service } , p1 = { providing car-service } ,p2= { providing hotel-service } ,p3= { providing cruise-service } corresponding to the travel industry service. Finally,  X   X  creates configuration workflow: (s0, p0)  X  (s1, p1)  X  (s2, p2)  X  (s3, p3). We express process models as state automata, which describe dynamic systems that can be in one of their possible states (some of which are marked as initial states) and can evolve to new states as a result of performing some actions. A transition function describes how (the execution of) an action leads from one state to pos-sibly many different states. System X  X  ev olutions can be tested through Quality of Service (QoS) describing the visible part of the system state. A Quality of Service (QoS) defines the user associated to each state of the domain. Specifically, we introduce the mapping of service composition. Mapping of service composition includes four parts.
 Firstly, state automaton  X  =(S,A,Q,I,F,  X  ,  X  ), where, user X  X  require services S= { s0, s1, s2, s3 } ; state transfer action A = { a0, a1, a2, a3, a4 } ; QoS Q=q1 and q2 and q3, provide resources for S; Start State I = { S0 } , Final State F = {
S3 } ; Mapping of transition function: s1=  X  (s0, a1), s2=  X  (s0, a0), s2=  X  (s1, a2), s3=  X  (s2, a3), s3=  X  (s1, a4), a  X  A, s  X  S, Mapping of testing QoS q0=  X  (s0), q1=  X  (s1), q2=  X  (s2), q3=  X  (s3), s i  X  S, q i  X  Q.
 Secondly, plan is a four-tuple  X  =(P,p0,  X  ,  X  ) for planning domain  X  =(S, A, Q, I, F,  X  ,  X  ); where (1) P = { p0, p1, p2, p3 } is the set of plan contexts. p0  X 
P is the initial context. (2) Mapping of providing resources and testing QoS: a1 =  X  (p0, q0), a2 =  X  (p1, q1), a3 =  X  (p2, q2) are the action function to be executed; it associates to a plan context p and an quality of service q i . Mapping of the context evolutions function: p1 =  X  (p0, q0), p2 =  X  (p1, q1), p3 =  X  (p2, q2), it associates to a plan context p  X  P and an quality of service q i  X  Q, a new plan context P= { p0, p1, p2, p3 } .

Thirdly, a configuration for domain  X  =(S,A,Q,I,F,  X  ,  X  ) and plan  X  = (P, p0,  X  ,  X  ), is a pair (s, p) such that s  X  Sandp  X  P. Configuration (s, p) may evolve into configuration (s X , p X ), written (s, p)  X  (s X , p X ), if s X   X   X  (s,  X  (p,  X  (s)))=  X  (s,  X  (p, q))=  X  (s, a) and p X  =  X  (p,  X  (s))=  X  (p, q). Configuration (s0, p0) is initial if s0  X  I and p X  = p0.

Finally, the execution structure is  X   X  =(W,W 0 , R), where W is the set of configurations; w=(s, p), W 0  X  W=S  X  P are the initial configurations, R  X  S  X 
P  X  W are the transitions between configurations. Thus, configuration work-flow: W = { w0, w1, w2, w3 } = { (s0, p0), (s1, p1), (s2, p2), (s3, p3) } ;s i  X =R(s), p  X =R(p). (s i  X , p i  X ),i=1,2,3,  X  X  X  , n, consists the sets of configuration from (s, p). To enable flexible services on semantic grid, there is a need for synthesizer on top of physical processing capabilities that facilitates the deployment and configuration of available services. The synthesizer can be seen as a distributed system com-ponent that automates the configuratio n of Grid resources to form services that applications use. The system accepts processing demands from applications of template, discovers available processing resources, maps those processing require-ments onto Grid resources, and configures the appropriate state on Grid nodes.
Given an abstract configuration, the synthesizer generates a physical configu-ration specifying which physical component should be selected for each abstract component such that a Goal is optimized. The GSC uses a dynamic adaptable algorithm to match each service in the abstract mapping with an instance of an executable service available on the network. Let us first describe formally the problem and discuss the algorithms for solving them.
 To state the mapping problems more formally, we use the following notation. We are given a directed graph, M = (S, A), with a transmission cost co(a), for each link a  X  A, and a service cost unit co(s), for each node s  X  S. Let the source be defined by  X  and the destination by  X  , In graphs, we denote transmission costs on the links and the unit for processing costs within the node. For now we assume that all services require a cost of 1, that is, the cost for processing a service corresponds to co(s). This convenience will allow us to express the mapping problem as a shortest-path problem. In this section, we illustrate our approach by using a scenario from the travel domain and provide some preliminary results of performance evaluation exper-iments. All the main components are implemented as Grid services. We use existing Semantic Web tools and reasoning mechanisms to provide the basic representation and reasoning technology. Services are described using OWL-S.
To analyze data of templates are correlated with the signal using fast correla-tion by a technique known as matching. This simulation uses approximately 50 separate services connected together to form a process workflow. The GSC gen-erates a process model referring to the services by their logical mapping. These are then matched to actual simulations available on the network by physical mapping. The purpose of our experiments is two-fold: to assess plan generation times and success rates. We ran our experiments on a Windows machine with a 1.4GHz Intel processor and 512Kb RAM.

We first evaluate the time for generating process workflows (see Fig. 4). There is an exponential relationship between the number of services in a plan and the time required to match and compose an executable graph. We also looked at the workflow generation success rates (see Fig. 5). We compared our framework with a simple automated back-tracking composition algorithm. We used the same process ontology and composition requests for both of these techniques. Based on 50 requests, the results show that our framework had a success rate of 80% while the back-tracking algorithm had a success rate of about 60%. This confirms our expectation that our adaptive framework has a higher probability of successfully generating workflows. In the research area of e-service, there are service composition methods and tools of using automata. Finite state automata [2] are proposed as conceptual model for e-services, taking time constraints into account, and using a new web service transition language that integrates well with standard languages in order to completely specify e-Services. The work in [11] illustrates that e-services are modeled by automata whose alphabet represents a set of activities or tasks to be performed (namely, activity automata), automated design is the problem of  X  X elegating X  activities of the composi te e-service to existing e-services so that each word accepted by the composite e-service can be accepted by those e-services collectively with each accepting a subsequence. Their approach focus on description, our approach, however, focus on understanding semantic to formally describe dynamic processing of compositio n, to take QoS-driven composition goal into account to find best quality composition on Semantic Grid. In this work, we have shown how to use semantic descriptions to aid in the composition of Grid services. We have developed a simulated system and shown that it can compose the Grid services deployed on the internet as well as provid-ing processing capabilities where a number of similar services may be available. Our system can directly combine the user X  X  semantic service descriptions with sharing knowledge allowing us to execute the composed services on the Grid.
As a future work, we are working on the incorporation of planning technology in the inference automata that would result in further automation of the system. We are also investigating the possibility of machine learning from past user activ-ity. Generating richer ontology with more specific descriptions will also improve the performance of the machine. The key idea is the incorporation of multiple types of knowledge and multiple machine learning techniques into all stages of the mapping process, with the goal of maximizing mapping accuracy. Finally, we are going to implement the design of the synthesizer to select an appropri-ate optimization algorithm according t o a developer X  X  service-specific between optimality of component selection and optimization cost in our prototype. This work is supported by National Natural Science Foundation of China under Grant No. 60473069, and the project of China Grid (No. CNGI-04-15-7A).
