 In today X  X  wide interconnected world, malicious network attacks have a long incubation period, and as a result, existing state-of-the-art information secu-rity/data analysis mechanisms find it very challenging to compete against those attacks in a timely manner. Information security monitoring enterprises have limited information and, hence, fail to see the big picture of the attacks that are being orchestrated. However, due to it X  X  immense scale, the Internet provides us with a large variety of data, both structured (e.g. logs), as well as unstructured, that can be used in aid of information security analysis. Thus, today X  X  Internet X  X  scale calls for big data analysis techniques. The main focus of the present work is to investigate large-scale and stealthy malware behaviour. Our analysis is based on considerable number of logs from real security information event management systems.

Detection of stealthy attacks is particularly challenging, since, statistically, they are hard to distinguish from normal connections. Furthermore, obtaining attack data (e.g. through a network sniffer or a honeynet) poses challenges in its own right. Dainotti et al.[1] employ a hor izontal scan of the entire IPv4 address space, in order to detect attacks created by the Sality botnet. Chen et al.[8] pro-pose a scalable network forensic mechanism for stealthy, self-propagating attack detection; However, both these state-of-the-art methods are specialized in terms of the attacks they target. Therefore, there is still need for a tool that is able to identify attacks without specific assumptions of their characteristics or their behaviour/propagation pattern.

Key to the discovery of malicious patterns is the summarization of the network behaviour, characteristics, and propagation of a connection. Therefore, we need a systematic and scalable approach which is able to effectively summarize large heterogeneous pieces of data that repr esent different aspects of the network. Such tools can be drawn from time evolving graph mining and tensor analy-sis literature. In particular tensors or multi-dimensional arrays have appeared in numerous interesting application including clustering, trend &amp; anomaly de-tection [6], and network forensics [3]. In [13] the authors propose GigaTensor, a scalable, distributed algorithm for large scale tensor decomposition. In this work, we leverage GigaTensor to the end of stealthy malware detection, without assuming prior knowledge on the malware X  X  behaviour.
 A more formal definition of the problem at hand is as follows Problem 1. Attack Patterns Discovery in MalSpot  X  X iven : (1) intrusion detection syste m (IDS) event logs, recording  X  X ind : (1) the suspicious and common patterns in all three modes/aspects
Guided by the format of the data at hand, we propose MalSpot which choses to formulate the problem as multi-linear solution as well as tensor analysis. Ad-ditionally, we propose to experiment with the granularity of the time window in our data; hence, we propose a multi-resolution approach, which will be able to identify different types of anomalies, in uncorrelated levels of temporal granular-ity.
 Definition 1 (Uncorrelated Levels). Two different levels of temporal gran-ularity are called uncorrelated , if the network behavior in those levels, for a particular node, or set of nodes, is significantly different. For instance, a set of nodes may experience different patterns in network traffic in an hourly scale, as opposed to a daily scale.

By leveraging multi-level, multi-linear analysis of the aforementioned data, we are able to conduct scalable and efficient anomaly detection. Our main con-tributions are the following:  X  X esign of the MalSpot system: leveraging hadoop , our proposed system  X  X iscoveries: we report that attacks come in different flavours: there are, for The benefit from using MalSpot as opposed to standard techniques is the fact that by doing so, we are able to detect correlations of entities participating in a heterogeneous network for a very long term, and additionally detect multi-aspect correlations of entities (e.g. us ing the port number as a dimension), the comparison is as shown in Table 1.
 The rest of this paper is organized as follows: related work is outlined in Section 2. We first elaborate on MalSpot , in Section 3, we then provide ex-perimental studies in Section 4. Finally, Section 5 concludes the discussion and highlights future directions. For handling huge collections of time-evolving events, [9] proposes a multi-resolution clustering scheme for time series data using k-means clustering and progressively renes the clusters. In order to discover the streaming pattern in multiple time-series, [11] propose SPIRIT (Streaming Pattern dIscoveRy in mul-tIple Time-series) which can incrementally find correlations and hidden variables by means of using principal components analysis (PCA) and singular value de-composition (SVD) to summarize the key tr ends in the entire stream collection. In [10] the authors propose TriMine which consider multiple features to provide hidden topics modeling and forecast future events. In [4] the authors apply SVD to compress sensor data sequences by decomposing them into local patterns and weight variables.

Tensors and tensor decompositions have been extensively used in a variety of fields, including but not limited to Data Mining, Chemometrics, Signal Pro-cessing and Psychology. A concise review of tensor decompositions in the lit-erature can be found in [5]. In this particular work, we focus on the so called CP/PARAFAC decomposition, however, [5] provides an overview of the entire variety of decompositions that have been introduced.

In the immediate field of interest, anom aly detection, there has been a fair amount of tensor applications. In particular, [2] develop a decomposition model that is suitable for stream data mining and anomaly detection. The authors of [6] introduce a scalable anomaly detection framework using tensors. In [12] the authors perform anomaly detection in a (source IP, destination IP, port number) dataset, and in [7] the authors operate on (source IP, destination IP, port number, timestamp) dataset. Finally, in [3] the authors propose a framework for anomaly detection in multi-aspect data that is based in tensor decompositions.
In terms of scalable tensor decompositions, [12] proposes a fast, sparse and approximate method that s cales very well mostly in multicore environments. In [13], the authors propose a MapReduce, scalable and distributed algorithm for CP/PARAFAC; this suits better our purpose, since our data resides in a distributed file system. In this section, we describe the MalSpot , an approach for finding the pat-tern in huge data from scalable design. The MalSpot has two modes, i.e., single-resolution mode and multi-resolution mode based on multi-linear analysis process. The notations are shown in Table 2.

Initially, given the data description, provided a few lines above, we are able to form three mode tensors, whose non-zero e ntries correspond to the non-zero entries of the network logs. Since the logs record counts of events, and due to high data skew, it is often the case that a few set of connections will outnumber the rest of the connections, in terms of counts. To that end, we have two choices, in order to alleviate this issue: We may, either, make our data binary, where the tensor, we may take the logarithm of the counts, so that we compress very big values. Tensor Formulation of Our Problem In order to form a tensor out of the data that we posses, we create a tensor entry for each ( i, j, k ) triple of, say (source IP, target IP, timestamp) that exists in our data log. The choice for the value for each ( i, j, k ) varies: we can have the raw counts of connections, we can compress that value (by taking its logarithm), or we can simply indicate that such a triplet exists in our log, by setting that value to 1.
Tensor decomposition leverages multi-linear algebra in order to analyze such high-order data. The canonical polyadic (CP) or PARAFAC decomposition we employ can be seen as a generalization o f the Singular Value Decomposition (SVD) for matrices. CP/PARAFAC deco mposes a tensor to the weighted sum of outer products of mode-specific vectors for a 3-order tensor. Formally, for an M-mode tensor X of size { I 1  X  I 2  X  X  X  X  X  I M } , its CP/PARAFAC decomposition of the outer product, and is in the sense of vector outer product multiplication (and not in the traditional multiplication operation).
 3.1 Network Malicious Behavior Decomposition Given the data description, provided a few lines above, we are able to form three mode tensors, whose non-zero entries co rrespond to the non-zero entries of the network logs. Since the logs record counts of events, and due to high data skew, it is often the case that a few set of connections will outnumber the rest of the connections, in terms of counts. To that end, we have two choices, in order to alleviate this issue: We may, either, make our data binary, where the tensor, instead of counts, stores 1 or 0, dependi ng on whether a specific triplet exists in the logs, or, we may take the logarithm of the counts, so that we compress very big values.
 Introduction to Tensors Westartbyintroducing a fewdefinitions.Atensor isessentiallyamulti-dimensional extension of a matrix; more precisely, a n -mode tensor is a structure that is indexed by n indices. For instance, a 1-mode tensor is a vector, a 2-mode tensor is a matrix, and a 3-mode tensor is a cubic structure. In this work, we focus on three-mode ten-sors, however, given the appropriate dat a, we can readily extend our techniques to higher modes.
 Tensor Formulation of Our Problem In order to form a tensor out of the data that we posses, we create a tensor entry for each ( i, j, k ) triple of, say (source IP, target IP, timestamp) that exists in our data log. The choice for the value for each ( i, j, k ) varies: we can have the raw counts of connections, we can compress that value (by taking its logarithm), or we can simply indicate that such a triplet exists in our log, by setting that value to 1.
The X is no longer approximate if R is equal to rank( X ), however, we often want to decompose X to R rank( X ), so that we force similar patterns to map to the same low rank basis. Forcing R to be small is key to our application, because in this way, we force connections behaving similarly to map to the same low rank subspace. 3.2 Single Resolution Mode in MalSpot We obtain suspicious patterns via scalable tensor decomposition, as mentioned in previously. In order to find out the groups of similar patterns, we use a scalable k-means implementation, in MapReduce, so that we cluster different malicious patterns, produced by the tensor decomposition. For the cluster, we choose to use the cosine similarity (or rather its inverse) as a distance measure. The cosine distance we used in this study is shown as similarity ( p , q )= cos (  X  )= p  X  q p q where p and q are pairs of columns of the factor matrices A , B or C , produced by the decomposition.
 Algorithm 1 : MalSpot algorithm (single-resolution mode)
After clustering, we obtain different groups of connections, as summarized by decomposing X . Prioritization of each group is helpful for recommending groups of anomalous connections to domain experts, for further inspection. The covariance distance between two clusters G + and G  X  as Cov ( G + ,G  X  )= ters ; we then rank the groups according to k i =1 C (: ,i )andchoosethetop-k  X  to show to a domain expert, for further inspection. 3.3 Multi Resolution Mode in Malspot As opposed to the single-resolution mode MalSpot , the multi-resolution version takes significant changes among different t emporal granulariti es into account, in order to identify pieces of the data that bear the uncorrelated levels characteristic. In order to introduce the multi-resolution mode of MalSpot ,let T 1 ,T 2 ,...,T n be the different time granularities (i.e., hourly, daily, weekly and so on). For each T i ,thereare k clusters denoted by G j i ( j =1to k ). In order to identify uncorrelated levels among these differen t temporal levels of resolution, we use the adjacency matreix of G i , which we denote by A i . A detailed outline of the procedure we follow is shown in Algorithm 2.
 Algorithm 2 : MalSpot algorithm -(multi-resolution mode)
In Algorithm 2, we have a set of k clusters G i = { G j i | j =1to k } where tions. In the first step, we use the adjacency matrices A i = { a mn } in order to record whether a member of a cluster changes its cluster assignment between different resolutions, as shown in Eq. 1
In order to reduce the computational complexity, we summarize the the re-duced adjacency matrices as A reduce i = { a mn } , by employing the characteristics of transitivity among clusters as shown in Eq. 2.
Let F i be a function that maps the data in time scale T i to its cluster. That F F ( a ) \ N i,i +1 = F i ( a )  X  O i  X  i +1 ( a )( R denotes that the assignment remain the same), R i  X  i +1 ( a )= F i +1 ( a ) \ N i,i +1 , the conditions considering change or no change are shown in Eq. 3.
 I i,i +1 ( a ) is the degree of similarity between F i ( a )and F i +1 ( a )isasshownin Equation (4).
 where the p i,i +1 ( a ) is given as in Eq. 5. In this section we show the effectiveness of MalSpot in detecting anomalous behavior in diverse settings of information security logs, i.e., Security Opera-tions Center (SOC) event logs and Honeynet firewall logs. We design all the experiments in order to answer the following questions:  X  Q1: Malicious pattern discovery: how can MalSpot effectively identify  X  Q2: Providing insights to domain experts: what is an intuitive and 4.1 Dataset and Environment As we mention in the problem definition, we analyze data coming from three different sources. We use three differen t types and sources of datasets in our experiments to demonstrate MalSpot performances. These two datasets are 1) a Honeynet dataset, 2) an intrusion de tection system (IDS) events dataset from Taiwan government; we summarize the datasets in Table 3. The Honeynet dataset was collected especially for the purposes of this work, using the Honeynet project system from 10 distributed sites in Taiwan 1 . The IDS events dataset is collected from the Security Operation Center of the Taiwanese government, for the entire year of 2012. This dataset includes the IDS triggered alerts from 61 government institutes with 4,081 types o f events. These types of events can be categorized into 39 classes, Of which 33 classes of attack is defined by Snort IDS, the other 6 classes are custom by us (including: blacklist, high threat malware behavior and so on). In total, the SOC dataset contains 828,069,066 events, the dataset details could be shown as Table 3. .

We leveraged the scalability of GigaTensor[13] in 16 nodes of a Hadoop cluster where each machine has 2 quad-core Intel 2.83 GHz CPU, 8 GB RAM, and 2 Terabytes disk. The Apache Mahout(Scalable Machine Learning and Data Mining) 2 version 0.7 is used for supporting clustering algorithms. 4.2 Analysis of the Honeynet Data For this dataset, we set R = 5 as the low rank of the tensor decomposition; after decomposing the tensor, we obtain three factor matrices each representing one of the three modes of our data: source IP, target IP and timestamp respectively. Each column of those factor matrices corresponds to one out of the R latent groups, in our low rank representation of the data. Based on this low rank embedding of the data, we compare pairs of columns for each factor matrix, in order to detect outliers. For example, given the factor matrix A that corresponds to the source IP, if we plot, say, columns 1 and 2 against each other, we will see a scatterplot that contains one point for each source IP; given this scatterplot, we are able to detect the outliers. We hen ceforth refer to the  X  X core X  for each source IP (or any other entity associated to a particular mode of a tensor), as expressed by the values of the columns of the corresponding factor matrix, as TensorScore . We show our most outstanding results in Figure 1.

According to the scatterplots obtained from tensor analysis, in Figure 1(a)-(c), we may observe the relative attackers X  re lations according to d ifferent directions of the TensorScore . In Figure 1(a), we found two outliers (denoted as A and C) out of three clusters. After further inspection of the participating of the attacks, we found out that the attackers in group A are focused on port port 110 and perform POP3 probing. The attackers in group C attempted to use ports 50 79 aiming to perform a large scale port scan. Both attack groups (A and C) appear only on a single day (January 10th and January 25th respectively). In Figure 1(b) and (c), we are able to discover a new set of anomalies, as we choose a different couple of latent factor vectors to obtain the TensorScore from. In attack group D, we were able to identify an attacker who attempted to trigger 14,652 connections to 236 target Honeynet system IP addresses, with a duration of 8 days. We present the attacks that belong to group E; those attacks focus on a particular Microsoft Network security vulnerability that is associated with ports 139 and 445. 4.3 IDS Event Result The IDS events consist of an entire year X  s worth of data, collected by the G-SOC of Taiwan in 2012. The single resolution mode of MalSpot use the day scale granularity to analyze these logs. In Fig. 2(a), we illustrate the two groups that MalSpot was able to spot in the IDS event logs. The first group is associated with the Web and native IDS event rules , whereas the second group is related to the blacklist-based event rules.

We proceed to the second step of our analysis, by setting k =5andcluster the tensor decomposition latent groups as shown in Fig. 2(b). This post-analysis, forces hosts with similar characteristi cstoendupinthesamecluster.Forin-stance, cluster 1 contains a vast number of hosts that are related to a large scale government institute. In clusters 4 and 5, we mostly observe service-oriented information systems tend.

In order to evaluate the multi-resolution nature of MalSpot , we select 4 different time resolutions, i.e., hour, day, week and month, and seek to identify the uncorrelated levels. The result is shown as Fig. 4. In fact, hosts A, B and C are grouped as the same cluster in both hourly and daily levels. MalSpot is able to select the uncorrelated levels for B and C in weekly and monthly granularities, respectively.

In Fig. 3, we use event classes with 4 different temporal resolutions to identify uncorrelated levels of activity, for various institutes. We identify that institute A has an uncorrelated level of activity between weekly and daily granularity, as opposed to institutes B and C. From further investigation, institute A has suffered from a  X  X ystem-call detect X  event class during the uncorrelated time period (e.g., B and C have a uniform distribution of activity during the entire year, but A is skewed towards early 2012). Additionally, MalSpot offers huge savings in computational time in order to detect the aforementioned attacks, when compared to competing methods.
Based on the Fig. 4 (a), we plot the scatter-plots from the hour and week (X-axis) versus the triggered event types (Y-axis). We observed a critical difference betweeninstituteAandinstitutesB,Cwithrespectto attackperiodicity.Institutes B and C suffered so-called  X  X EB-MISC TOP10.dll access X  attacks 3 while A did not. Fig. 5 shows detail time-event scatter plots. Therefore, MalSpot identifies potential malicious behavior between hosts A and B, C employing the notion of uncorrelated levels. Host A suffered periodic attacks targeted on the Windows OS (Windows ANI File Parsing Buffer Overflow (MS05-002)), whereas the periodic attacks of host B and C were concentrated on a malicious relay station.
In this work, we develop a big data analytics system in order to discover mali-cious patterns in a variety of network/malware propagation settings, so that we can further use them for attack detection and prevention, when attacks are con-current with legitimate traffic. By conducting large-scale information security data analysis, our proposed method, MalSpot , can easily identify the patterns in massive IDS logs, spamming delivery logs, and Honeynet firewall logs, per-taining to long-term and stealthy attack behavior.

The contributions of this work are the following:  X  X esign of the MalSpot system: based on hadoop , it can scale up to  X  X iscoveries: We report very interesting attack patterns, and positively  X  Scalability: regardless of data scale or data source variety, MalSpot is Acknowledgement. This material is based upon work supported by the National Science Foundation under Grants No. IIS-1247489 and CNS-1314632 Research was sponsored by the Defense Threat Reduction Agency and was accomplished under contract No. HDTRA1-10-1-0120. Also, sponsored by the Army Research Laboratory and was accomplished under Cooperative Agree-ment Number W911NF-09-2-0053. This work is also partially supported by a Google Focused Research Award. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the funding parties.

