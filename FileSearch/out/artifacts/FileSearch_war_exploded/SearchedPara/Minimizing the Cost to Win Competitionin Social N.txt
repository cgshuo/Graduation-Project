 With the recent popularity of online social network such as Facebook, Twit-ter, Sina microblog, wechat, etc, many researchers have studied the influence diffusion problem in social network, including the diffusion of ideas, news, new products, and so on. We collectively refer to these diffusions as influence propa-gation. In this field, much research are related to influence maximization problem which is the problem of finding at most k nodes (seed nodes) in social network that could maximize the spread of influence.

Influence maximization problem was first formulated as a discrete optimiza-tion problem in [1]. Independence cascade model (IC) and liner threshold model (LT) are two most popular influence diffusion models. Most research do not con-sider the competition problem. However , competition exists extensively in the real world. For example, two candidates want to win the election campaign, two competing companies expand mark et share at the same time, etc.

Some recent studies have co nsidered competitive i nfluence propagation. Most of them study the competitive influence maximizing problem which is the prob-lem of finding at most k seeds in competitive social network that could maximize the spread of influence [7], while some of them study the influence blocking prob-lem which is the problem of finding at most k seeds in competitive social network that could minimizing the spread of  X  X ad X  influence[6,10]. But sometimes, we not only need to expand our influence, but also need block competitors X  influ-ence simultaneous. Only our influence is lager than competitors, we can achieve the victory in competition. Different s eed node often need different cost, so with the minimum seed set to win the competition not means the total cost is mini-mum. The problem of how to select a seed set with minimum cost to beat the competitor is needed to solved.

In this paper, we formulate the problem as Minimizing Cost to Win Com-petition problem (MCW). We prove that MCW problem under the competitive independence model(CIC) is NP-hard. Firstly, We propose cost-effective Greedy algorithm to approximately solve this problem. Because this algorithm requires Monte Carlo simulation to compute nodes X  influence, which is inefficient. Then we improve the Cost-Effective Greedy a lgorithm X  X  efficiency base on the sub-modularity. The improved cost-effective greedy algorithm runs obviously faster than original algorithm. Furthermore, to meet the need of solving the problem efficiently in large social network, we propose an efficient heuristic algorithm called Degree Adjust. It is similar to Deg ree heuristic but the effectiveness is much better. Our main contributions are as follows:  X  We propose a new problem called minimizing cost to win competition (MCW)  X  We propose a considering cost performance Greedy algorithm to approxi- X  We propose a new Degree Adjust heuristics. Its running time is much less The rest of paper is organized as follows : in section 2, we review related work. We formulate this problems and prove it is NP-hard in section 3. In section 4, we present the Cost-Effective Greedy a lgorithm and Improved Cost-Effective Greedy algorithm. In section 5, we propo se the Degree Adjust heuristic. In section 6, we experimenta lly compare the effectiveness and efficiency of those algorithms. Finally, we conclude the paper in section 7. Influence maximization is the problem of finding at most k nodes in social net-work that could maximize the spread of influence. This problem is first modeled as discrete optimization problem in [1] and they summarize two basic influence propagation models, independent cascade model (IC) and linear threshold model (LT). Based on the two models, [1] proposes a greedy algorithm to solve the problem. A number of studies have tried to solve this problem more efficiently [2,4,5,7,9]. But those research do not consider the competition problem.
The competitive influence propagation has been captured by a number of re-search in recent years [9,10,11]. Dube y, et al. studied the problem as a games in which firms compete for customers located in the social network[7], and they study the existence of Nash Equlibrium, showing that it is exist and is unique. Bharathi, S extends the IC model to competitive influence propagation and gives approximation algorithm for computing the best response to an opponent X  X  strat-egy [3]. Influence blocking maximizing problem has been studied in [6,10]. They did not consider that we need to expand our influence and block competitors X  in-fluence simultaneous. Goyal, Amit consider minimizing budget problem in social network but he does not address the competition problem [8,12]. Sometimes we need maximizing our influence and blocking competitors influence simultaneous for win a competition. Further for the budget limit, we often want to win the competition with minimum cost. So we propose MCW problem. In this section, we define the CIC model and MCW problem. Then, we prove MCW problem is NP-Hard. 3.1 CIC Model Independence cascade model is a basic diffusion model proposed in [1], which has been used in many works [2,4,5]. In IC model, a social network is considered as a directed graph G (V,E). Wher e V is the set of vertices representing users in social network and E is the set of directed edges representing relationship between users. Each edge is associated with an influence probability which means once a vertex is influenced at this step, it can influences its out-neighbors with the probability through the edge at next step. Each vertex has two states, activated or inactive, once a vertex is activated, it cannot change to inactive. At step 0 a seed set is activated while all other ve rtices are inactiv e. At any later step t&gt; 0, if vertex v is activated in step t-1, it has once chance to activate each inactive out-neighbor u with probability p vu . If v succeeds, then u becomes activated in step t. The process runs until no more vertices can be activated.

We now define the competitive independence model (CIC), in which every vertex has three states. Influenced by S(it means it is influenced by our selected seed Set S), influenced by C (it means it is influenced by competitor X  X  selected seed Set C), or not be influenced. At step 0, all nodes in seed set S were influenced by S, all nodes in seed set C were influenced by C. At any step t&gt; 0, if vertex v is influenced by S or C in step t-1, at step t, it has once chance to influence each current inactive out-neighbor u with probability p vu . If v succeeds, then u becomes the same state with v. If there are two or more nodes trying to influence u at the same step, their attempts are sequenced in arbitrary order. Once a node is influenced by S or C, it can X  X  change its state. 3.2 Minimum Cost to Win Competition Problem In our problem, we use a directed graph G =(V,E) to represent the social net-work the same as influence maximizing problem. We use the CIC model as the propagation model in our problem. Given a target set U  X  V , we suppose com-petitor has selected seed set C and never change, We try to find seed set S to win the competition. let InfS U ( S ) represents the number of users influenced by Sinthetargetset U and InfC U ( S ) represents the number of users influenced by C in the target set U . When the con-text is clear, we usually omit the U and let InfS ( S ) represents the number of users influenced by S in the target set U and use InfC ( S ) represents the number of users influenced by C in the target set U .Weuse  X  ( S ) represent the number of users influenced by S minus the number of uses influenced by C in the target set U . The optimization problem we want to solve is to find the set S with minimum cost such that the influence of S is bigger than that of C. The formal problem is defined bellow.
 Definition 1 (Minimizing Cost to Win Competition Problem). The in-put of the problem includes the directed graph G(V,E), the competitor selected node v  X  V , the target set U, We use cost(S) represent the total cost of seed set S. The target is to find a seed set S  X  that can win the competition with the minimum total cost. that is Theorem 1. The MCW problem is NP-hard under the CIC model.
 Proof. Considering an instance of Set Cover Problem, U = { u 1 ,u 2 ,...,u n } is the universal set. S = { S 1 ,S 2 ,...,S m } represents sets union equals U. The covering optimization problem is to find a set of subsets whose union is equal to U and uses the fewest sets. We can encode the Set Cover instance as an special instance of MCW problem.

Given an arbitrary cover set problem instance. We define a corresponding directed bipartite graph with 2n+m-1 nodes represent a special MCW problem. We partition the nodes into three parts, the first part has n nodes and node i corresponding u i in U, the second part has m nodes and node j corresponding to the S j in S, the third part has n-1 nodes. The target set U is the union of part one and part three. If u i  X  S j , there is a directed edge from node j to node Algorithm 1. Cost-Effective Greedy Algorithm i with a propagation probability p ji = 1. We assume all nodes X  cost is 1 and the competitor has selected the nodes in th e third part as his seed set C. As he has influenced n-1 node in target set U, so if we want to win the competition with minimum cost, we must find the minimum seed set S to influence all the n nodes in the first part. Suppose we find a solution S. if S  X  U =  X  , we can replace each u  X  S  X  U with his neighborhood v and get a new seed set S  X  which is also the solution to MCW problem. The solution is also a solution to set cover problem. Conversely, any solution to the Set Cover instance is also a solution to the special MCW problem. Since the set cover is NP-hard, MCW problem is NP-hard too. In this section, we try to use greedy algorithm to approximately solve the MCW problem. We have discussed the hardness of the problem in the above section. The most extensively studied algorithm for influence maximizing problem is greedy algorithm and always has a better effect than other algorithms. So we firstly try to use greedy algorithm to approximately solve the problem. For tra-ditional influence maximizing problem is different to MCW, so traditional algo-rithms studied for influence maximizing problem must be altered to adapt to the MCW problem.

Algorithm 1 gives the details of Co st-Effective Gr eedy algorithm.  X  ( S )repre-sent the number of users influenced by S minus the number of uses influenced by C.  X  ( S ) &gt; 0 this shows that the influence of S has surpassed that of C, namely, we have won the competition. In Algorithm 1, we use Monte Carlo simulation to approximately calculate the influence of C and S under the CIC model. We select the node u with the highest cost performance until  X  ( S ) &gt; 0. curate estimate, the running time is very long especially in large social net-work. We improve the efficiency of cost-effective greedy algorithm based on the submodularity . A fuction f(.) is submodular if it has the following property : f ( S  X  v )  X  f ( S )  X  f ( T  X  v )  X  f ( T ), for all S  X  T and v/  X  S . This means the margin gain of adding v to a set S is at least as high as that of adding the v to asupersetofS.
 Theorem 2.  X  (  X  ) is submodular under the CIC model.
 Proof. Since influence spreading in G(N,E) is a stochastic process under the CIC model. Considering a newly influenced node v attempts to influence his neighborhood w with probability p vw . We can view that this stochastic outcome has been determined by flipping a coin with bias P vw . It dose not matter whether the coin is flipped at the beginning of the whole process or at the moment of v trying influence w. So we assume that at the beginning of this process, we pre-flip all the coin to determine which edges are live (this means that the influence propagation probability in this edge is 1 ) and store the result. We also pre-flip all the coin to determine if C and S try to influence v at the same time, which will success.

Let G ( N ,E ,NC,NS ) represents the pre-flip result. The E represents the set of live edges in E, and N represents the node in N, NC(NS) represents the node will be influenced by C(S) if C and S try to influence it at the same time. We now prove that to every pre-flip G ( N ,E ,NC,NS ), the  X  G (  X  ) is submodular.
Let S1 and S2 be two set of nodes and S 1  X  S 2,  X  G ( S 1  X  v )  X   X  G ( S 1) =( infS G ( S 1  X  v )  X  infC G ( S 1  X  v ))  X  ( infS G ( S 1)  X  infC G ( S 1)) =( infS G ( S 1  X  v )  X  infS G ( S 1)) + ( infC G ( S 1)  X  infC G ( S 1  X  v ))
Let s(v,w) represents the shortest graph distance from v to w in G and g(T,w) represents the shortest graph distance from any node in T to w in G . S, v will successfully influence w, and w becomes the same state with v. Let then infS ( S 1) = | X  u  X  S 1 S ( u ) | .
 ( infS G ( S 2  X  v )  X  infS G ( S 1))
Let M represents all nodes that can be reached from any node in competitor seed set C, if S =  X  , infC G ( S )= | M | .
 Then infC G ( S 1) = N  X  X  X  u  X  S 1 C ( u ) number in C(v) not in  X  u  X  S 2 { C ( u ) } ,itmeans infC G ( S 1)  X  infC G ( S 1  X  v )  X  infC G ( S 2)  X  infC G ( S 2  X  v ).
 It follows that  X  G ( S 1  X  v )  X   X  G ( S 1)  X   X  G ( S 2  X  v )  X   X  G ( S 2). It means  X  G (  X  ) is submodular.  X  ( s )= all G Prob [ G ]  X   X  G . since all  X  G ( S ) are submodular, so  X  ( S ) is submodular too.

We use p i v to represent the cost performance of v and use S i to represent seed set has been selected in previous i rounds. We use p j v to represent the cost performance of v and S j to represent seed set has been selected in previous j Algorithm 2. Improved Cost-Effect ive Greedy Algorithm  X  ( S j  X  v )  X   X  ( S j ) p and in the j round we no need to recompute p j u ,becausenodeumustnotbe added to the seed S in this round.
 Algorithm 2 gives the details of improv ed cost-effective g reedy algorithm. Which is similarly to the origin algorithm, in the first round, it also need to compute the cost performance of all nodes. In the next round, if the cost perfor-mance of a node in the last round is not better than the best cost performance having been computed in this round, there is no need to compute it again. Our experiments show when competitor random selects a seed set with 100 nodes, the Improved Cost-Effective Greedy could achieve more than six times speedup in selecting the seed set S. Although we have improved the cost-effective greedy algorithm, the running time is still fairly long. We may need to find some heuristics to solve this problem more efficiently. Degree is a simple heuristic which in every round selecting the node with the largest degree. Degree is frequently used to select seed set in influence maximizing problem, but it does not consider the neighbors state. If a node v X  X  out-neighbor u is influenced, node v can X  X  influence u anymore and if u is an influenced in-neighbor of v, u may influence v in the next round.

We propose a new heuristic called Degre e Adjust, which achieves better effec-tiveness than other heuristic and running time is much shorter than Greedy. We use O ( v ) to represent the out-neighbors of v and I ( v ) represent the in-neighbors of v. E ( v ) represents the edges connected to v. Let N ( v )= { v } X  O ( v )  X  I ( v ), G ( v ) represents the subgraph of G(V,E) with N(v) as the vertices and E ( v ) as the edges. We use the v X  X  influence in this subgraph to forecast the overall influence and adjust the degree amount. Let O v represents the out-neighbors number of v and I v represent the in-neighbors number. Let I C v ( I S v )represents the node number influenced by C(S) in I(v). let O C v ( O S v ) represents the node number influenced by C(S) in O ( v ). If we do not select v as the seed set of S, then expect number of C influenced in G ( v )is ( O The expected number of S influenced in G ( v )is ( O If we have selected v as the seed set of S, then expect number of C influenced in G ( v )is c 2= I C v + O C v , The expected number of S influenced in G ( v )is s 2=1+ I S v + O S v + P  X  ( O v  X  O C v  X  O S v ).
 The expected profit of v in G ( v )is The Degree heuristic thin ks expected profit is 1+ P  X  O v so we use d v to represent the new degree and use profit v to represent the expected profit of v. In the Degree Adjust algorithm in every round we find the node v with max d . And in the cost-effective Degree Adjust we find the node v with best cost
Algorithm 3 gives the details of cost-e ffective Degree Adjust algorithm. At each round we find the node v with the biggest profit v and recompute nodes X  profit v . To test the efficiency and effectiveness of our algorithms for solving MCW prob-lem, we use three real datasets to compare the total cost and running time of different algorithms. Algorithm 3. Cost-Effective Degree Adjust Algorithm 6.1 Experimental Setup The real datasets used in experiments are got from Stanford Large Network Dataset Collection 1 . The details of the three datasets are listed in Table 1.
The code is written in C++ and run on a Linux server with 2.00GHz In-tel Xeon E5-2620 and 32G memory. In the experiment we set cost v = 100 + v.outdegree , in which v.outdegree represents the v X  X  out-neighbor number. We set the influence propagation pro bability P = 0.01 and target set U = V .We run the simulation under the CIC model on the network for 10000 times and take the average value as the influence S and C. We compared the algorithms are as follows:  X  Degree Adjust: in every round computing the d v for each node in V and  X  Cost-Effective Degree Adjust: (Algorithm 3) computing the profit v for each  X  Degree : a simple heuristic that eve ry round selecting a seed with largest  X  Random : randomly selecting node and adding to S until  X  ( S ) &gt; 0.  X  Improved Greedy :in every round adding the node with the biggest margin  X  Improved Cost-Effective Greedy: (Al gorithm 2)in every round adding the 6.2 Experimental Results In the experiment, we mainly test the running time and total cost of different algorithms. We run all algorithms 10 times on every datasets and use the mean values to represent the running time and total cost.

Fig. 1 shows the total cost of different algorithms on the Epinions dataset under the CIC model. The vertical axis represents the total cost of S when S can win the competition. The horizontal axis represents the size of seed set C which has been selected by competit or randomly. From the figure we can see that the effectiveness of Random algorithm is worst. Our Degree Adjust algorithm X  X  effectiveness is similar to the Degree algorithm. Our cost-effective Degree Adjust algorithm X  X  effectiveness i s better than Degree and Degree adjust. The effectiveness of improved Greedy is b etter than other heuristic but not as good as the improved cost-effective Greedy.

Fig. 2 shows the running time of different algorithms on the Epinions dataset under the CIC model. The vertical axis represents the running time and The horizontal axis represents the size of C. From the figure we can see that the run-ning time of Degree Adjust, Cost-Effective Degree Adjust and Degree are similar, while Random often takes longer time than other heuristic algorithms because Random often needs more seeds to win th e competition. Improved Greedy and improved cost-effective Greedy algorit hms run very slowly comparing to other heuristic even we have used multi process to accelerate computation.
Fig. 3 and Fig. 4 show the experiment results in Slashdot. From Fig. 3 we can see that the effectiveness of differen t algorithms are similar to that in fig1. The improved cost-effective algorithm gets a much better effectiveness in this dataset while the improved cost-effect ive Degree Adjust does not get desired effect. Fig. 4 shows the running time of different algorithms on the Slashdot dataset . The results are similar to the results in Epinions dataset.
Fig. 5 and Fig. 6 show the experiment results in Cit-HepPh. From Fig. 5 we can see that the improved cost-effective al gorithm achieves the best effectiveness and effectiveness of Random is the wors t as other dataset, while the gap between different algorithms is not significant. Fig. 6 shows the running time of different algorithms on the Cit-HepPh dataset. The results are similar to the results in Epinions and Slashdot datasets. Minimizing the cost to win competition is a very useful problem in the real word application. However this problem is negative by former works. In this paper, we define this problem and give some algorithms to solve this problem. Experiments in real datasets show that our cost-effective greedy algorithm achieves better effectiveness and cost-effective Degree A djust heuristic algorithm achieves high efficiency and get better effectiveness tha n Degree and Random heuristics. Future work will focus on the problem of wining competition from multiple competitors in social network.
 Acknowledgments. This work was supported by the National Natural Sci-ence Foundation of China (Grant N o.61303005, No.61100167), the Natural Sci-ence Foundation of Shandong Provin ce of China (Grant No.ZR2013FQ009), the Science and Technology Development Plan Project of Shandong Provience (Grant No.2014GGX101047, No.2014GGX101019), and the Fundamental Re-search Funds of Shandong University (2014JC025).

