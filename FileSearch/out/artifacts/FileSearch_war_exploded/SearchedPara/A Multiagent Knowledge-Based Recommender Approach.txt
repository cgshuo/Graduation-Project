 This thesis investigates a way of using knowledge in dy-namic and distributed domains for supporting recommen-dation, keeping the consistence of the decision knowledge that change over time. We propose the use of a multiagent knowledge-based recommender approach capable of dealing with distributed expert knowledge in order to support travel agents in recommending tourism packages. Agents work as experts cooperating and communicating to each other in the recommendation process. Each agent has a truth mainte-nance system (TMS) component that helps the agents to keep the integrity of their knowledge bases.
 Categories and Subject Descriptors: I.2.11 Distributed Artificial Intelligence[Coherence and coordination; Multia-gent systems] General Terms: Algorithms, Management. Keywords: Coordination among agents, Truth Mainte-nance System, multiagent systems, recommender systems.
The Internet is a rich source of information where the user can find information about products according to his interests. As the readily available data has increased, the information overload problem has appeared in the Internet. The information is unorganized and usually distributed in geographically disperse server sites all over the world. In order to deal with these issues, Recommender Systems have been proposed in the 90 X  X  [14]. These systems learn about user preferences over time, based on data mining algorithms, and automatically suggest products that fit the user needs. Recommender systems are being applied in several domains [16] [1] [15] and different approaches are being used in their development, such as collaborative filtering, content-based filtering or knowledge-based approach [2].

This work is concerned with knowledge-based approach, where knowledge about customers, products and the ap-plication domain are used to reason about what products  X  better answer the customer X  X  preferences. As shown in [9], knowledge can be expressed as a detailed user model, a model of the selection process or a description of the items that will be suggested. These systems know how a specific product meets a specific user need [4] and they can rea-son about the relationship between a need and a possible recommendation. Good examples of knowledge-based rec-ommender systems can be found in the literature. In [3] for instance, the author present Entree, a restaurant rec-ommender system that provides recommendations by find-ing restaurants in a new city similar to restaurants the user knows and likes. The approach allows the system to answer the question To which restaurant should I go that is similar to X? and it allows the user to criticize the recommendations presented by the system, aggregating those critiques.
Another approach is presented in [17], where the authors focuses on allowing the system to answer the question What can I buy that I might like or need? . They proposed having an explicit model of each customer and explicit models of each product in the marketplace. Depending on the nature of the market and the requirements for accurate sales, the customer model may be derived from active querying of the customer, or from historical data of previous customer inter-actions. One of the challenges in knowledge-based approach is the process needed for extracting the required knowledge and building the needed models, i.e., the knowledge acqui-sition and representation.

However, in some domains it is possible that a single in-formation source does not contain the complete information needed for the recommendation. The data available in a single moment may be fragmentary, overspecialized or over-generalized, or even unrelated to the recommendation at hand. The problem of locating information sources, access-ing, filtering, and integrating information to solve a problem has become a very critical task and multiagent recommender systems has been developed to deal with these issues. An example of multiagent recommender system is CA-SIS [10]. In this multiagent case-based recommender system the authors proposed a metaphor from swarm intelligence to help the negotiation process among agents. The honey bees X  dancing metaphor is applied with case-based reasoning ap-proach to recommend the best travel to the user. The disad-vantage of this system is that the knowledge base is central-ized. Every agent searches for cases in the same knowledge base and it is not possible to search information distributed in other sources.

In [11], a distributed multiagent recommender system is presented. This system arranges meetings for several partic-ipants taking into account constraints for personal agendas. Different agents were proposed in this approach: the per-sonal assistant agent that is the interface between the user and the MAS; the flight travel agent that is connected to a database of flights; the accommodation hotel agent that is responsible for finding an accommodation in the city where the meeting will happen; and the Planner Agent that is con-sidered the main agent, who is responsible for getting the in-volved variables, the associated domains and the needed con-straints in order to plan the meeting. This agent composes the whole problem as a Constraint Satisfaction Problem. A disadvantage found in this approach is that the problem is not solved dynamically because the recommender system has to collect information from different information gath-ering agents to model the problem-solving.

Several works on Distributed Problem-Solving (DPS) has shown the needed of an information gathering agent [13] [6]. In DPS, for any given query, rather than performing an exhaustive search, one agent must try to locate the best an-swer possible considering the time and resource constraints. Although agents X  domain models may describe properties of classes of the objects in the domain, they usually not contain information about specific individuals in the domain.
In the system presented in [8], each information gather-ing agent contains a detailed domain model, along with the models of the information sources available to it and the re-lationships between domain models and the contents of in-formation sources. When it receives an information request, the agent identifies the appropriate information sources, re-formulates the query, generates an access plan to retrieve the data and sends requests for retrieval to other agents. However, there is no notion of exploiting the dependencies between agents working on different aspects of an informa-tion acquisition task.

Another example is presented in [6], where the user queries are delegated to specialized task agents that develops the communication with the information gathering agents as a part of their task execution. An information gathering agent has a planner engine that instantiates task structures, a scheduler and an execution monitor. Each of these agents can retrieve information from a number of remote databases and compose it to form or update a local database that is more appropriate for answering queries by the task agents. The task agents interact with the information agent by send-ing one-shot queries or registering themselves to receive the results of periodic queries and change monitoring queries. An information agent may at any time be responsible for several active queries from each of several agents.
In a distributed knowledge-based multiagent recommender system, the agents are nonmonotonic reasoners that commu-nicate among themselves in order to exchange information and make inferences based on the information exchanged. The data stored in the knowledge base of the agent is called Private and the exchanged information among the agents is called Shared data. During the communication, conflicts can appear among the agents and these conflicts can lead to inconsistencies in the agents knowledge bases.

This thesis supports the hypothesis that the use of agents with a truth maintenance system in knowledge-based recom-mender systems brings more efficiency to them as well good recommendations. Different from the recommender systems previously presented, we propose a multiagent knowledge-based recommender approach to deal with the fact that the knowledge is not centralized or not located in an unique place. The knowledge sources can be distributed in sev-eral agents and each agent assumes the role of a recom-mender. The recommendation is based on the collaboration of multiple agents exchanging information stored in their lo-cal knowledge bases. A recommendation request is divided into sub-tasks handled by different agents, each one main-taining its own knowledge base and working as an expert helping to compose the final recommendation. The knowl-edge is stored in the agent knowledge base as a case and the agent tends to specialize in the tasks that it deals more frequently. The case recommendation has the query (that represents the problem description) and the recommenda-tion done by the agent (that represents the solution descrip-tion). Some differences of this approach from the existing multiagent recommender systems are:
When agents work in a cooperative way to get a recom-mendation, the multiagent recommender approach should present two important features: 1) The agents must be able to assess and maintain the integrity of the exchanged infor-mation among them. Conflicts about contradictory knowl-edge may arise during the communication; and 2) Agents have to attend their tasks in an asynchronous way. When some agent depends on information from another agent, it must be able to start the process making some assumption even if the information does not arrive from the other agent. In order to cope with these features, we propose the utiliza-tion of TMS (Truth Maintenance System). A TMS compo-nent to revise the shared data is fundamental to guarantee the integrity of these data, as well as of the agents knowledge bases.

In more detail, we want to contribute for the progress of the state of the art in multiagent recommender systems. First, the architecture designed in this work deals with do-mains where specific knowledge is needed to compose a rec-ommendation. Second, we propose a method for keeping the integrity of the agents knowledge bases involved in the rec-ommendation process. No other multiagent recommender system has attempted to incorporate the TMS component to guarantee the integrity of the knowledge bases. The TMS has also the function of assuming some hypothesis when it lacks the information for composing a recommendation. This section presents the progress of the thesis so far. We are using the tourism domain as example to validate the multiagent knowledge-based recommender system. A travel package recommendation is supported by several in-formation components such as transportation, accommoda-tion and attractions and it is necessary specific knowledge to assemble all the components. This information cannot be found in a unique database. It can be distributed in different travel agency databases or stored as travel agent X  X  experiences. In order to recommend a travel package, the human travel agent constructs a model that represents the elements of this recommendation, including the relationships among these elements. This model can be implicitly defined in his/her mind, or explicitly documented in a formal plan in the travel agency. These elements would include resources (that could be information, products or services), customers and their requirements, external influences on the recom-mendation (such as the season), immediate strategies for finding the best flights to the user, and so on. However, plan-ning a travel package is not performed in isolation. Collabo-ration among travel agents is required to integrate individual experience into a coherent full recommendation that satis-fies users X  preferences. In a Multiagent Knowledge-based Recommender System, this cooperation happens among the agents. The first step was modeling the agents.
We have created a multiagent scenario with a group of agents (called Searcher -Src ) in the community with a com-mon global goal (the recommendation) and different indi-vidual goals (the component that each one needs to search). A community C consists of n agents a 1 , a 2 , ..., a n . In the moment that the user asks for a recommendation, a list of tasks (flights, hotels and attractions) is created and sent to the Src agents. They are responsible for choosing a task from the list and each Src agent performs only one task at a time.

The Src agent is represented by Src = ( P, LocalKB, tms ) where P is the agent X  X  profile. This profile is defined as P = ( id, active, tcurrent, tsolved, tfreq, confind ) . Id is the identification of the agent, active indicates if the agent is in-side or outside the community, tcurrent is the current chosen task, tsolved is a list of the 10 recently solved tasks, tfreq is a list with the 10 most frequently solved tasks and confind is the confidence index of the agent in that type of task that is being performed at the current moment. LocalKB is the agent knowledge base (KB) and it is described by the at-tributes: idt , typet , timecommit , requirements , solution . Idt is the task identification, typet is the task type (initially limited to flight, hotel or attractions), timecommit is the time the agent took to perform the task, requirements rep-resent the user X  X  preferences, i.e., the user X  X  query. Solution represents the information the agent knows to solve that task. TMS is the reason maintenance system component, responsible for maintaining the integrity of the transferred information among the agents and their knowledge bases.
Equation 1, shows the confind (confidence index) calcula-tion, where F ( typet, a ) represents the frequency of the type of task typet performed by the agent a . The frequency is measured by the number of times the agent has performed that type of task. F ( typet i , a ) represents the sum of all tasks performed by the agent a that are stored in its knowledge base.

The agent calculates the confidence index every time it has to choose a task to perform and it checks which task available is better to be chosen. After performing the task, the agent checks if that task has increased or not its con-fidence index and it decides to keep or not the task in its knowledge base. This behavior helps the agent to special-ize in some type of task and to help the maintenance of the agent X  X  knowledge base. The specialization of the agent in a type of task improves the system X  X  performance because the agent is more efficient in finding the information. The agent X  X  KB is increased according to the number of tasks it decides to store. As bigger the KB becomes, worst is the search performance. In the other hand, a small KB forces the agent to search in the community or into the web, which spends more time, causing to decrease the performance.
This scenario was implemented and some experiments were done to validate the specialization of the agents. First, a knowledge acquisition step was done in a travel agency and the agents knowledge bases were populated randomly with real cases from the travel agency. After that, 30 new users queries were inserted into the list of tasks. Some of these queries consider more than one city which means that the total number of tasks is bigger than the number of users queries multiplied by the number of possible tasks (flight, accommodation and attractions). The agents were started and paused in each 10 tasks performed, called a round , until one of the agents reach 50 tasks. In each round we have an-alyzed the behavior of the agents according to the number of tasks that it has performed so far.
 Figure 1: Agent1 getting expertise in the attraction task
Figure 1 shows agent 1 after 50 tasks performed. We can see that this agent became an expert in the task of attrac-tions. It has performed 25 tasks of attractions, 15 tasks of flights and 10 tasks of hotel. It is important to notice that the agent becomes an expert in attractions but it still per-forms all types of tasks available when needed (when the experts in that task is busy or outside of the community, for example).
Once we already have modeled the agents and the first recommendation scenario, the next stage is the development of the approach. The main important step is the definition of the TMS component and its functionalities.
The TMS component proposed in this work merges fea-tures of two different TMS approaches: ATMS [5] and DTMS [7]. From the former, it has the Local and Shared Consis-tency property, where each agent has to be individually con-sistent and groups of agents should be mutually consistent about any data they share. The shared data can be In in all agents that share it or it can be Out in all these agents. This property is important to guarantee the integrity of the KBs, because shared data affect the problem-solving process of another agent. Another DTMS feature is the ability of providing explanations for their beliefs and, for this reason, their knowledge must be represented explicitly.

From the ATMS, the approach has the ability of manip-ulating assumption sets. This ability is important in the recommendation scenario, specially in the tourism domain. For instance, the agent needs information about the flight (day and time of arrival) to choose the better hotel for a user. Two different situations that happen in the real travel scenario need to be mapped into the recommender system: 1) when the travel agent needs to wait information from an-other one (this causes a delay in the process), and 2) when the travel agents has to guess information about the user during the recommendation process (lack of preferences of the user, for instance).

However, as shown in [12], the quality of the recommenda-tion is very important and a wrong assumption can lead to a bad recommendation. In order to cope with this problem, we adopted the ATMS [5] approach, creating a premise set -I that are the preferences of the user and an assumption set -A , that contains the assumptions of the agents, and assum-ing that the common knowledge will be stored in the agents. Based on these model components, the agents derive propo-sitions that represent parts of the final recommendation that will be presented to the user. [1] D. Billsus and M. Pazzani. A hybrid user model for [2] R. Burke. A case-based approach to collaborative [3] R. Burke. Knowledge-based recommender systems. In [4] R. Burke. Hybrid recommender systems: Survey and [5] J. de Kleer. An assumption-based tms, extending the [6] K. Decker and K. Sycara. Intelligent adaptive [7] M. N. Huhns and D. M. Bridgeland. Multiagent truth [8] C. Knoblock and A. Levy. An architecture for [9] F. Lorenzi and F. Ricci. Case-based recommender [10] F. Lorenzi, D. S. Santos, and A. L. C. Bazzan. [11] S. Macho, M. Torrens, and B. Faltings. A multi-agent [12] S. M. McNee, J. Riedl, and J. Konstan. Accurate is [13] T. Oates, M. V. N. Prasad, and V. Lesser.
 [14] P. Resnick, N. Iacovou, M. Suchak, P. Bergstrom, and [15] F. Ricci, A. Venturini, D. Cavada, N. Mirzadeh, [16] Sarwar, G. Karypis, J. Konstan, and J. Riedl. [17] B. Towle and C. Quinn. Knowledge based
