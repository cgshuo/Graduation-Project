 Time is an important dimension of any information space and can be very useful in information retrieval and in particular clustering and exploration of search results. Search result clustering is a fea-ture integrated in some of today X  X  search engines, allowing users to further explore search results. However, only little work has been done on exploiting temporal information embedded in documents for the presentation, clustering, and exploration of search results along well-defined timelines.

In this paper, we present an add-on to traditional information re-trieval applications in which we exploit various temporal informa-tion associated with documents to present and cluster documents along timelines. Temporal information expressed in the form of, e.g., date and time tokens or temporal references, appear in docu-ments as part of the textual context or metadata. Using temporal en-tity extraction techniques, we show how temporal expressions are made explicit and used in the construction of multiple-granularity timelines. We discuss how hit-list based search results can be clus-tered according to temporal aspects, anchored in the constructed timelines, and how time-based document clusters can be used to ex-plore search results that include temporal snippets. We also outline a prototypical implementation and evaluation that demonstrates the feasibility and functionality of our framework.
 H.3.1 [ Content Analysis and Indexing ]: Linguistic processing; H.5.2 [ Information Interfaces ]: User Interfaces Design, Experimentation Temporal information, hit list clustering, exploratory search
As the amount of generated information increases so rapidly in the digital world, the concept of time as dimension along which in-formation can be organized and explored becomes more and more important. Time plays a central role in any information space, and it has been studied in other areas like information extraction, question-answering, and summarization [21]. Time and time mea-surements can help in recreating a particular historical period or de-scribing the context of a document or document collection, which can be helpful for relevance purposes. As an extension to exist-ing ranking techniques, which are primarily based on popularity or reputation, time can be valuable for placing search results along a well-defined timeline to support exploration tasks at multiple time granularities.

A look at any of the current search engines shows that tempo-ral aspects of documents are exclusively used to sort the hit list by date, which is primarily the date a Web page has been created or last modified. In some cases, this approach can be misleading, be-cause the timestamp is provided by a Web server and may not be accurate. Other search applications provide a range date search as part of the advanced search options. Still, the search results are filtered based on the above specific types of date attributes. Thus, for search purposes, the time dimension is mainly restricted to the metadata associated with documents and does not exploit the tem-poral information embedded in the documents.

Hit list clustering has emerged as an alternative mechanism to present similar documents without requiring the user to go through hundreds of items (see, e.g., [32, 33]). Clustering of result docu-ments can lead to better user interfaces and, therefore, to an im-proved user experience, in particular in the context of information exploration. A study on user search experience shows, users do prefer to use clustering when they are trying to get an overview or explore a topic [8].

There are several scenarios that illustrate how valuable tempo-ral information can be for information retrieval and/or exploration tasks on a collection of documents. Assume, for example, one would like to get an idea of a particular computer science topic by retrieving relevant papers on that topic (e.g., through Google Scholar or ACM Digital Library). If one would like to know the earliest or most recent paper(s) on that topic or even the period of time when the topic was  X  X opular X , organizing relevant docu-ments along some kind of a timeline would be very helpful. Sim-ilar scenarios can be envisioned for exploring a news repository. For example, how would one search for news about acquisitions a company has made before a particular date or in a particular time period? The timestamp of news alone is not sufficient, as recent news documents might also talk about  X  X ld X  events.

Even simple queries against Web search engines show that of-tentimes organizing the documents in a hit list along some time-line can be helpful. For example, a query for [soccer world cup] against search engines now returns mostly pointers to documents that cover the last event in Germany. But every soccer fan knows that this event happens every four years. Another example is [Iraq war]; here, results are primarily related to the latest events with lit-tle from the 90 X  X  war. Wouldn X  X  it be useful if a tool on top of a traditional retrieval system is more aware of the temporal informa-tion embedded in the documents and allows the user to have the results presented and clustered according to temporal information embedded in the documents?
As documents are the main objects that any information retrieval and exploration application has to deal with, for the above scenar-ios, it is important to identify diverse types of temporal information associated with documents. Words or combinations of words in a document can form temporal expressions that refer to some point or event in time. A temporal expression can be explicit, such as  X  X ay 20, 2007 X  or  X  X ecember 5th, 2005 X , implicit, such as  X  X ew Years Eve 2006 X  or  X  X abor Day 2001 X , or relative to a point of narration, such as  X  X esterday X  or  X  X n two weeks X . Every text-rich document typically contains several such types of temporal expres-sions. Extracting temporal expressions from the document content and anchoring a document along a well-defined timeline is a crucial step for any time-related document exploration task.

In this paper, we present the concepts and techniques underly-ing a novel document exploration framework in which we utilize temporal information extracted from the documents, and arrang-ing documents in the form of clusters along a timeline supporting multiple time granularities. The proposed approach relies on ex-tracting diverse types of temporal information from documents and making this information explicit in the form of temporal document profiles . Such profiles, obtained in a document annotation process, are used to construct timelines at different levels of time granular-ity. These timelines build the basis for anchoring and clustering the documents, and provide a means for exploring temporal features of document collections, such as hit list based search results.
Our approach is applicable as an add-on to any traditional in-formation retrieval application. For example, the documents in a hit list returned by a search engine can be clustered based on the temporal information extracted from the documents. The approach is applicable to any domain specific corpora or vertical search en-gine where the document collection is to be organized and clustered based on the temporal information embedded in the documents.
In summary, the paper makes the following contributions.
The remainder of the paper is organized as follows. Section 2 discusses related work on exploratory search, hit list clustering, and temporal retrieval. A user survey on timelines is presented in 3. In Section 4, we detail the concepts of time, temporal expressions, and the time annotated document model. Section 5 presents the components of the TCluster algorithm and temporal snippets. The system architecture and prototypical implementation are outlined in Section 6. Section 7 describes the evaluation guidelines and re-sults. Section 8 summarizes the main contributions of the paper and outlines future work.
There is some research on using time for a different search appli-cations but only little work has been done on exploiting temporal information associated with documents for clustering and exploring search results [5]. The time frames project is one approach to aug-ment news articles by extracting time information [17]. Extensions to document operations like comparing the temporal similarity of two documents in the context of news articles is presented in [20] (see also [18]). Temporal mining of blogs is presented in [27]. Re-cently, new research has also emerged for future retrieval [9] where temporal information can be used for searching the future. Using tags to visualize photos taken over a period of time is a good exam-ple of how useful time can be for arranging objects [13].
There is exciting research on adding a time dimension to certain applications like news summaries [3], temporal patterns [30], re-trieval [7], and temporal Web search [24]. The special issue on tem-poral information processing gives a clear map of current directions [22]. Also recently, Google has added the view:timeline 2 ture to display search results along a timeline, allowing a limited exploration of a hit list.
 Another technique related to our approach is hit list clustering. In general, hit list clustering groups search results into categories that are derived from the actual search [36]. Instead of process-ing the entire document set, hit list clustering uses a small doc-ument set that fits several well-known substring searching algo-rithms. Current hit list clustering engines like Vivisimo rely on a separate search engine that provides some information like Web page title, URL, and document snippets for the construction of the clusters. Rarely a temporal expression appears as part of the clus-ter labels. Using the Vivisimo search engine as baseline, there has been a number of approaches to improve hit list clustering, such as named entities for labeling clusters [32] or grouping by specific en-tities and citations [2]. A popular hit list clustering construction technique is based on suffix trees; alternatives to this technique are described by Ferragina and Gulli [14]. The recent survey by Carpineto el al. [10], covers all the latest research on Web cluster-ing. A survey on data clustering is given by Jain et al. [16].
Very recently, crowdsourcing has emerged as a viable alternative to conduct large scale evaluation of different types of experiments for a wide range of applications like relevance evaluation [6] and user studies [19]. This recent research has shown that AMT results are reliable and very useful for gathering extra feedback, as we will discuss in our evaluations.

Research activities in exploratory search systems have gained a lot of attention lately as they add a significant user interface com-ponent that helps users search, navigate and discover new facts and http://www.mturk.com/ http://www.google.com/experimental/ relationships [34, 35]. An example of placing search results in a timeline for desktop search is presented in [28]. Research on tem-poral annotations is very recent, and it is well covered in the book by Mani et al. [21]. Identification of time depends heavily on the language and the corpora, so traditional information extraction sys-tems tend to fall short in terms of temporal extraction. Based on the latest advances, new research is emerging for automatic as-signment of document event-time periods and automatic tagging of news messages using entity extraction [29].

We base our temporal document analysis, clustering, and explo-ration techniques on the latter approach. In particular, in contrast to most of the approaches mentioned above, we establish a solid foun-dation to combine the aspects of (1) extracting various types of tem-poral information from documents, (2) clustering and organizing document based on temporal data, and (3) visualizing such infor-mation in an exploratory search interface that helps users to study, explore and compare search results and individual documents in a temporal context.
We start our research by conducting a series of user surveys about timelines. In the first user study, we performed a survey among 30 persons (graduate students and faculty) regarding tem-poral information to discover alternative exploration scenarios that can be used in future developments. The same user survey was con-ducted using AMT, using a crowdsourcing paradigm [6]. In total, 50 people responded to the survey.

The survey consisted of a short description of timelines and the following questions: 1. Do you think current timelines for organizing or clustering 2. Do you use (or would use) timelines to explore search re-3. Please indicate some search scenarios where you use time-4. Please give some examples of search scenarios where cur-5. What other features would you like to see in the context of
Of all the respondents, 76% answered  X  X es X  for question 1 and 71% answered  X  X es X  for question 2.

For question 3, most of the search scenarios proposed by users can be classified into three main categories, given the information need as presented in table 1. Not surprising, the same categories are used to identify the lack of support in current search engines, as presented in table 2.

For the last question, we can identify presentation and explo-ration as the main categories where users see the value in using timelines for search. Table 3 summarizes the user feedback.
In summary, users are interested in using timelines for different information seeking tasks. They have identified limitations of cur-rent search engines to satisfy such search scenarios. In the rest of the paper, we introduce our temporal information retrieval frame-work that addresses some of those issues, with an emphasis on ex-ploration of search results using timelines.
 Category User comment
History Biographical info historical data (lists of kings,
Research When I am searching for reference articles about
Events Any time where there is a list of winner of Category User comment
History Scientific development histories, i.e., develop-
Research I frequently explore and research many variety
Events When you ask for the winners of an award per Category User comment
Presentation Shading and color -pop up details with mouse
Exploration The ability to narrow fields down by date of
As motivated in the introduction, there is a lot of temporal in-formation in any corpus of documents, be it ranked documents in a hit list or a corpus of topic specific documents. To take advan-tage of such time related information for information retrieval and in particular exploration purposes, in a document processing step, it is important to extract this information, anchor it in time, and make it explicit to subsequent document clustering and exploration tasks. In the following, we introduce the time annotated document model as basis for such tasks. We first describe the concept of time underlying our approach, and then discuss in Section 4.2 how tem-poral expressions are represented in documents and how they are anchored in time. In Section 4.3, we then introduce the concept of temporal document profiles, which make the temporal information extracted from documents explicit for time-based document clus-tering and exploration techniques.
As the basis for anchoring documents in time, we assume a dis-crete representation of time based on the Gregorian Calendar, with a single day being an atomic time interval called chronon . Our base timeline , denoted T d , is an interval of consecutive day chronons. For example, the sequence  X  X arch 12, 2002; March 13, 2002; March 14, 2002 X  is a contiguous subsequence of chronons in T Contiguous sequences of chronons can be grouped into larger units called granules , such as weeks, months, years, or decades. A group-ing based on a granule provides us with a more coarse-grained timeline, such as T w based on weeks or T y based on years. An example of a week chronon in T w is  X 3rd week of 2005 X .
In the following, we assume the four timelines T = { T d , T T m , T y } for days, weeks, months, and years, respectively. The composition of granules naturally induces a lattice structure in T . That is, we have the relationship T j T i if timeline T j sitively) composed of granules of timeline T i . In particular, we have T y T d , T y T m , T m T d , and T w T d , but not T m T w as months are composed of days and not weeks.

Associated with each timeline T  X  X  is a precedence rela-tionship  X  T that allows to compare chronons. For two chronons t , t j  X  T, t i 6 = t j , we then have either t i  X  T t j or t For example, for the two day chronons t i =  X  X arch 12, 2004 X  and t =  X  X anuary 5, 2004 X , t j  X  T d t i holds. This precedence relation-ship can easily be generalized to chronons from different timelines, e.g.,  X  X arch 31, 2001 X  is after  X  X pril, 1999 X .

Note that a base timeline can be defined on any other atomic time interval, such as an hour (of a day) or a week. The particular choice depends on the characteristics of the document collection to be time annotated and information exploration tasks and do not have any particular impact on the generality of the proposed approach.
We now focus on the representation and extraction of temporal information from documents. As indicated in the introduction, a key aspect of our approach is to take a set of documents D , extract all types of temporal information associated with documents in D , and make this information available to our document clustering and exploration techniques.

The first type of such information is the document metadata , which appears as the date a document d  X  X  has been created or last modified. We denote such time related metadata of a document d  X  X  as document timestamp d.ts . Document timestamps typi-cally can be obtained at document collection (crawling) or indexing time and can be anchored in the timeline T d .

The second type of temporal information is a little bit more in-volved as it relates to the linguistic analysis of the textual content of documents. A suitable approach to identify time in text data is named-entity extraction, with temporal entities being time-related concepts. Such concepts are represented in the document text as (not necessarily contiguous) sequences of tokens or words. In par-ticular, temporal entities can be made explicit in the form of a tem-poral expression that correspond to a chronon in some timeline. The expressions are recognized by an entity extraction approach using a time-based linguistic analysis. In the following, we con-centrate on the more conceptual aspects of the types of temporal entities and their representation as temporal expressions. A real-ization of this approach in a prototype using some advanced tech-niques is presented in Section 6.

Contrary to other entities such as names and places, temporal en-tities can be represented as temporal expressions that are sequences of not necessarily contiguous tokens.Expressions can be mapped to temporal entities and terms defined in some temporal ontology. Similar to the approach by Schilder and Habel [29], we distinguish between explicit, implicit, and relative temporal expressions.
Explicit temporal expressions describe chronons in some time-line, such as an exact date or year. For example,  X  X ecember 2004 X  is an explicit expression that is anchored in the timeline T larly, the expression  X  X eptember 12, 2005 X  is anchored in T pending on the capabilities of the entity extraction approach and in particular its underlying time ontology, implicit temporal expres-sion , such as names of holidays or events can be anchored in a timeline as well. For example, the token sequence  X  X olumbus Day 2006 X  in the text of a document can be mapped to the expression  X  X ctober 12, 2006 X , which is anchored in T d . Is is also conceiv-able that a single temporal entity can be mapped to more than just one temporal expression, i.e., several chronons at once. For exam-ple, the token sequence  X  X inter season 2005 X  can be mapped to a combination of month, week, and day chronons in three different timelines. In general, implicit temporal expressions require that at least a year chronon appears in the context of a named event.
Relative temporal expressions represent temporal entities that can only be anchored in a timeline in reference to another explicit or implicit, already anchored temporal expression. That is, their an-choring depends on a chosen point of time reference or narration. For example, the expression  X  X oday X  alone cannot be anchored in any timeline. However, it can be anchored if the document is known to have a creation date as a reference. Then it is likely that the ex-pression can be mapped to that date. There are many instances of implicit temporal expressions, such as the names of weekdays (e.g.,  X  X n Thursday X ) or months (e.g.,  X  X n July X ) or references to such points in time like  X  X ext week X  or  X  X ast Friday X . Relative tem-poral expressions may even include more vague temporal informa-tion. Instances of these include phrases such as  X  X n a few weeks X  or  X  X ome years ago X . In general, there is less confidence in de-termining relative temporal expressions than in explicit or implicit expressions, an aspect that becomes important when all temporal expressions discovered in a document are represented in a tempo-ral document profile, as illustrated in the next section.
Although it might seem almost infeasible to detect and in partic-ular anchor relative temporal expressions, there have recently been significant advances in detecting and mapping instances of various types of relative temporal information. Again, we will discuss re-spective techniques and tools in Section 6. Here we are more con-cerned with the representation of the different types of anchored temporal expressions in documents, as detailed next.
In the following, we describe how explicit, implicit, and rel-ative temporal expressions determined by a named-entity extrac-tion approach are made explicit for our timeline construction and document clustering approach. In our time annotated document model, this process of entity extraction is a function denoted tdp , for t emporal d ocument p rofile. It associates with each document d of a document collection D a list of 3-tuples. It has the signature where the set E = E e  X  E i  X  E r denotes the set of explicit, implicit, and relative temporal expressions E e , E i , and E r respectively. C denotes the set of chronons from timelines in T = { T d , T The set P denotes the set of positions of temporal expressions in a document. A position is a composite of the number of the sentence in which the expression occurs, the position in that sentence, and the absolute position of the expression in the document. More pre-cisely, for a particular mapping d  X  [( e 1 , c 1 , p 1 ) , . . . , ( e k e , c k e , p k e where tdp is applied to a document d  X  X  , resulting in a list of 3-tuples, the meaning of the components of the triples is as follows: 1. The first k e tuples describe the explicit temporal expressions 2. The next k e + 1 to k i tuples describe implicit temporal ex-3. The k i + 1 tuple corresponds to the timestamp d.ts of the 4. Finally, the remaining k i + 2 to k r tuples describe relative
In the following, for a document d  X  D , we denote the list of 3-tuples of the temporal document profile of d as tdp ( d ) .
There are some important properties of a temporal document profile that need to be recognized. First, all chronons c are normalized . That is, all chronons that are elements of the same timeline T  X  X  have the same format. For example, all day chronons that have been associated with temporal expressions are represented in the day/month/year format, such as  X 15/04/1966 X . Similar formats are assumed for months, years etc. This normal-ization step has some problems of its own like normalizing time zones, which we do not address in this paper as they are not essen-tial to our approach. As we will see in Section 5, respective nor-malized chronons will serve as labels for document clusters when documents are assigned to clusters along a timeline.

Second, a chronon c  X  T for some T  X  X  can be associated with many explicit, implicit, and relative temporal expressions. In fact, the same chronon can even occur several times in a single profile tdp ( d ) but then at different positions in the document d .
In summary, a temporal document profile makes explicit all tem-poral expressions in a document, specified as chronons of well-defined timelines in T . These chronons are then used to construct a timeline for the documents at different levels of time granularity and to cluster documents along these timelines.
In the following, we detail how a given collection of documents with temporal document profiles is organized along a multiple-granularity timeline in the form of document clusters. This ap-proach can be applied to either an unranked collection of docu-ments or documents in a hit list. However, in the following, we will focus on documents in a hit list to further exploit the ranking of the documents in the hit list.

The time-based clustering algorithm, called TCluster , described below is realized as add-on to any standard document retrieval tech-nique. It can be invoked automatically by the retrieval technique or by the user, if she desires a time-based exploration of retrieval results. We assume that for a query term q against a document collection D , the retrieval algorithm determines a hit list L [ d , d 2 , . . . , d k ] of k documents. We also assume that all docu-ments in D have a unique id and that there is an inverted index file that allows to return a set of documents for a given query term or temporal expression. Given such a hit list, the temporal docu-ment profiles are used to construct a time outline for the documents first. The documents are then clustered along this timeline, again based on their document profiles. A single cluster can be thought of as a bin that contains only documents with temporal expressions matching the cluster label, which corresponds to some chronon. The organization of clusters along a timeline as well as the lattice structure imposed among timelines (cf. Section 4.1) then allows for the exploration of document clusters and a hit list, respectively, at different levels of time granularity. The following four sections elaborate on the individual steps of the TCluster algorithm.
The first step in organizing documents along a multiple-granularity timeline is to construct a time outline for the documents in the hit list L q . For this, all chronons are extracted from the temporal doc-ument profiles of the documents in L q . We denote this multi-set of chronons ch ( L q ) , defined as follows:
Note that the elements in ch ( L q ) may come from different time-lines. More importantly, among the elements in ch ( L q ) there are (not necessarily unique) minimum and maximum chronons, which describe the lower and upper bound of the time outline for the doc-uments in L q . Based on the range between lower and upper bound, a time granularity for the time outline is chosen. Assume, for exam-ple, L q contains a document with a temporal expression mapped to the year 1974 (as lower bound) and another document with a tem-poral expression mapped to the year 2007 (as upper bound). Then the temporal range of L q is several years, and T y is chosen as time outline for L q . On the other hand, if L q contains documents, say some news articles, whose temporal range is only a few weeks, then T w would be more appropriate as time outline. In general, a time outline is a timeline representation that describes the temporal range of documents in L q , independent of the  X  X emporal distribu-tion X  of documents along this timeline. We will elaborate more on the distribution aspect below. Without loss of generality, in the following, we assume a time outline based on the timeline T
In the next step of the TCluster algorithm, the timeline chosen as time outline for L q is used to normalize the chronons in ch ( L here according to T y . That is, if a chronon c in ch ( L ule finer than year, only the year component of c is used. In gen-eral, we denote such a type of normalization of a chronon c based on a time granule g  X  X  y, m, w, d } as norm g ( c ) . For example, norm y ( X 15 / 4 / 1966 X ) =  X 1966 X  , and norm m ( X 15 / 4 / 1996 X ) =  X 4 / 1996 X ) . The labels for the initial (most coarse-grained) docu-ment clusters for L q and time granule g are then determined by the following set.
Intuitively, for the timeline T y , ch y ( L q ) simply contains a set of years such that there is at least one document d  X  L q this year (as part of) its chronons. Assume there are l cluster la-dence relationship holds. The documents in a cluster y j , denoted cluster ( y j ) , are then determined as follows:
Obviously, if a document d  X  L q has several components in its temporal document profile tdp ( d ) , it can be in several docu-ment clusters. This is intuitive, as in the text of d , there can be many explicit, implicit, and relative references to different points in time. The question then, however, is whether there is a main cluster for each document in L q . Such a cluster can easily be de-termined based on the distribution of the chronons in tdp ( d ) with respect to the temporal range of the hit list L q . For example, if the chronons associated with d refer to n different years, the main cluster for d , denoted c _ main ( d ) , would be the year for which d has the most chronons.

Finally, there can be a wide variation among the number of doc-uments in each cluster. Some clusters might only have a very few documents whereas others have many documents, perhaps repre-senting some kind of hot spots . For some years in T y there might also be no documents at all that refer to these years. In general, from a user interface and document exploration point of view, if the time outline for L q is represented to the user, each cluster is not only labeled by a year chronon but also shows information about the number of documents in that cluster. Referring back to the ex-ample of a topic search in a corpus of technical documents men-tioned in the introduction, the cluster(s) with the most documents would then present the years in which the topic was  X  X ot X . In Sec-tion 6, we will elaborate on how properties of such document clus-ters as well as main clusters for documents are represented in a respective user interface.
Thus far, the TCluster algorithm only determined the sets of doc-uments belonging to each cluster along a timeline, here T documents in a cluster should be ranked to reflect the relevance of documents in cluster ( y j ) with respect to both the cluster label y and query terms q . While the ranking of documents in a hit list L is solely based on q , the ranking of documents in cluster ( y also takes the cluster label y j and thus time into account. Key to such a ranking is the distance of the query terms q to the temporal expressions in the documents in cluster ( y j ) .

Assume a document d  X  cluster ( y j ) with temporal document profile tdp ( d ) . Let match e ( d, y j ) denote the number of times the query term q occurs together with an explicit temporal expression e , ( e, c, p )  X  tdp ( d ) , in a sentence in d such that norm Analogously, let denote match i ( d, y j ) and match r ( d, y the number of matches with respect to implicit and relative tempo-ral expressions in tdp ( d ) , respectively.

It is clear from the description of the match functions that the more often q occurs together with explicit temporal expressions matching y j in d  X  X  sentences, the more relevant document d is in that cluster. Furthermore, there are several reasonable choices for a ranking that combines match e , match i , and match r . For the TCluster algorithm, we choose the following function: rank ( d, y j ) := match e ( d, y j ) +  X  i  X  match i ( d, y
That is, the sentence level co-occurrence of q with an implicit or relative temporal expression matching y i can be weighted less than a respective co-occurrence with an explicit temporal expression. In order to deal with scenarios in which no single temporal expression in d matches y j , we simply assume that rank ( d, y j ) =  X  every document has at least a document timestamp as temporal ex-pression (although this does not occur with q ).

The above ranking function obviously leaves much room for fur-ther investigations. For example, the match functions could be extended to not only look at sentences in which the query term q occurs but also close-by sentences. Also, as implicit temporal ex-pressions typically contain at least a year expression (plus the name of some event), even without a time ontology to match the exact day or period of that event, the year can be determined with high con-fidence; therefore,  X  i is typically close to 1. The choice of the  X  heavily depends on the capabilities of the temporal entity extraction approach, in particular its ability to determine and correctly anchor relative temporal expressions.

Based on the above discussion, we use the following ranking approach in our TCluster algorithm. Given two document d, d cluster ( y j ) . d is ranked higher than d 0 in cluster ( y d &gt; y j d 0 , if either of the following two conditions holds: 1. rank ( d, y j ) &gt; rank ( d 0 , y j ) 2. rank ( d, y j ) = rank ( d 0 , y j ) and d is ranked higher in L
It should be noted that due to such a  X  X ime-based X  ranking in cluster ( y j ) , a document d can be ranked higher than a document d in cluster ( y j ) although d 0 is ranked higher than d in the origi-nal hit list L q . There are several obvious scenarios that make this point more clear. For example, if in document d 0 the query q oc-curs more frequently than in d , then d 0 is ranked higher in L d . But if only in d the query q occurs together with the chronon y , then there is a closer relationship between q and y j in d than in d . This  X  X e-ranking X  is an important property of the TCluster algo-rithms and reflects the algorithm X  X  focus on temporal information extracted from documents and represented in temporal document profiles.
The construction of a time outline and the time-based clustering of hit list documents can be invoked by the user after a standard document retrieval and ranking approach in an exploratory search interface (see Section 6.2). For example, it can be applied to the hit list provided by a search engine. The document clusters organized along a timeline representing the temporal range of the documents and the ranked documents within each cluster now serve as the ba-sis for a user-driven, time-based cluster exploration.

As discussed in Section 4.1, the composition of time granules leads to a lattice structure among timelines. This lattice structure is employed when the user wants to explore a given document cluster. The exploration typically starts with the timeline constructed in the first step of the TCluster Algorithm (cf. Section 5.1), here clusters with year chronon labels cluster ( y j ) , and occurs in a  X  X rill-down X  fashion.

Assume a cluster cluster ( y j ) with ranked documents [ d . . . , d l ]  X  L q . The cluster can be refined based on a timeline T with T y T , i.e., T can be T m or T d . That is, the chronon is expanded to its constituent granules, providing the user with a drill-down operation. Assume the user chooses the timeline T refine a particular cluster ( y j ) . The TCluster algorithm then first constructs a (now more fine-grained) time outline for this particular cluster and its documents, based on months. Then, the documents in cluster ( y j ) are partitioned into clusters labeled by month/year chronons, and ranked in respective clusters. These two tasks follow the same procedures as described in Sections 5.1 and 5.2. The only difference now is that in the clustering step, the chronons associ-ated with documents in cluster ( y j ) are normalized by the granule month and not year anymore, thus leading to a different set of clus-ter labels, namely months in the given year y j . The ranking of the documents in the resulting month-based clusters m k ( 1  X  k  X  12 ) is done in the same fashion as described in Section 5.3. Choosing finer and finer timelines clearly leads to an effective way to explore and compare document clusters and the ranking of documents in clusters, all functions that can effectively supported by a simple user interface, as described later.
Having available the information about temporal expressions in documents, our aim now is to utilize this information and provide users with relevance cues about documents in a hit list and clusters, respectively, and subsequent exploratory search tasks. For this, we introduce the concept of temporal snippets, which are aimed at leveraging this temporal information.

Similar to traditional snippets, a temporal snippet can be consid-ered as a document preview but one that outlines the main events in a document, which are described using temporal expressions. Such time-centered document preview can be used in many search and exploration contexts, such as exploring a hit list or just browsing a collection of temporally rich documents. For the construction of temporal snippets, the most relevant sentences from a document that contain temporal expressions need to be determined and suit-ably  X  X ssembled X . The utility of this feature is that we want to present snippets that show why a document is in a cluster. This means that the snippet (in the ideal case) should contain the query term and the cluster label.

The TSnippet algorithm consists of candidate sentence selection and sentence ranking for producing adequate snippets. A descrip-tion of temporal snippets and a user evaluation is presented in [4].
We now present the realization of our timeline construction and time-based document clustering approach. In our prototype, we use a combination of existing technologies to demonstrate the feasibil-ity of our approach. The prototype realizes two main components: (1) a back-end that supports corpora processing and storage as well as index creation, and (2) a processing unit that realizes query pro-cessing and timeline construction and also implements the user in-terface to the system.

Corpora processing involves taking a document collection (or hit list from a search application) and processing the documents us-ing the Alembic [1] part of speech tagger (POS tagger). Next, the GUTime [15] temporal tagger recognizes the extents and normal-ized values of temporal expressions, producing an XML document. We use an Oracle10 g database for storing the documents that have been annotated using XML. That is, temporal document profiles are embedded within the original documents as XML markup and are not managed outside the documents.

For query processing, the system takes some user query terms as input, executes the query, i.e., it performs some document ranking, and runs the TCluster algorithm on the search result hit list. The search results are then presented along a time outline in a Web-based user interface. The presented timeline is composed of clus-ters (labeled by year chronons) and provides the user with means for a more fine-grained cluster exploration. In the next section, we provide more details about the actual document annotation process realized in our prototype.
We explore the identification of temporal expressions in more detail by providing a document-processing pipeline that includes a number of operations as follows. Given a set of documents, the first step is to extract time-related metadata from the documents. This is either the creation or last modified date for a document file or the timestamp provided by the Web server for Web pages. The second step is to run a POS tagger on every document. The tagger deter-mines the parts of speech assigned to each word/token like noun, verb etc. in a document. The tagger also tags sentence delimiters, which are needed for temporal document annotation. The third step is to run a temporal expression tagger on the POS-tagged version of the document. This step makes the temporal expressions, which are based on the TimeML standard [25], in a document explicit by producing an XML-like document. That is, resulting documents contain temporal document profile information as XML markup.
In a parallel step, a traditional entity extraction component ex-tracts named-entities that later augment the document index. An index is created for the documents to allow to efficiently search for text as well as temporal expressions and other named entities. The user interface to our prototypical system is realized as a Web-based user interface (see Figure 1). In the interface, a user can enter query terms and explore the resulting document clusters returned for a query.

In the prototype, the year timeline is used as initial time out-line for the result documents and clusters, respectively. Using the match functions, the implementation of TCluster also determines a ranking of the documents in each cluster (cf. Section 5.3). For this, the sentence level distance between the query and temporal expressions is used.
 Figure 1: Timeline cluster for the query [football world cup]
Information about the document cluster is sent back to the user interface client and displayed along a timeline in descending year order. As can be seen in Figure 1, for each cluster (labeled with a year chronon), the number of documents in the cluster is shown. A cluster can be expanded, allowing the user to explore the documents in a cluster based on more fine-grained timelines, according to the clustering exploration step described in Section 5.4.

Compared to similar exploratory search interfaces like the one presented by Ringel et al. [28], our system differs in a number of ways. Instead of using an  X  X bject X  timestamp (e.g., a document, email message, or presentation), we leverage both temporal expres-sions and document metadata, because document timestamps alone can often be misleading. We also do not restrict the search space to a personal desktop environment, because we believe that timelines should be an integral part of information exploration applications as add-ons to standard retrieval and search applications.
For exploratory search systems, taking advantage of temporal expressions embedded within a document leads to a much richer framework for exploration. We believe this is an important ingre-dient for the information forager who is trying to see the profit in terms of the interaction cost required to gain useful information for an information source [23]. Users tend to prefer sources (in this case search engines) that are richer in good results. These good re-sults involve adding important nuggets, such as time information.
We also constructed another interface that leverages Twitter search results. Instead of listing all twitts sorted by recency, we can cluster twitts according to the timestamp. In this particular case, there is no need to use any of the processing pipeline due to the short text content (only 140 characters) so we use the timestamps of every post to cluster the hit list. Still, we can map the stream of twitts to a more meaningful user interface, as shown in Figure 2.
The primary objective of our evaluation here is to show the clear advantage our temporal clustering approach has over existing docu-ment clustering approaches that only perform document clustering based on document timestamps. We also aim to show that cluster-ing results determined by our approach are indeed more meaning-ful than such standard clusters and also allow for flexible document and cluster exploration based on different timelines and time gran-ules, respectively.
There has only been little work published on evaluation for auto-matically generated timelines. We adopt some of the evaluation guidelines for automated testing that are outlined on Cronopath [11]. There are two important features of a timeline that we are interested in: precision and presentation .

Precision is defined as the fraction of the retrieved documents that are relevant. The main point here is that all relevant documents must be included in the timeline. The timeline should also contain appropriate labels for each time granule. Presentation involves dis-playing the timeline in a graphical form. The most intuitive way is to draw a line and mark the main time granules from left to right in ascending order, thus forming a time outline.

We conducted a number of experiments with our time-based doc-ument clustering approach and prototype. The first set of experi-ments uses part of the well-known Internet directory DMOZ [12]. The second set of experiments uses a document collection in which temporal expression have been manually annotated using TimeML. The last set of experiments include relevance assessment for queries using a graded relevance scale.
DMOZ is a multilingual open content directory, which is con-structed and maintained by a community of volunteers. For the ex-periment, we took the DMOZ category  X  X orld Cup X  in the larger category soccer/football. The  X  X orld Cup X  category contains a col-lection of articles that have been put into context by users, mean-ing that each document corresponds to either of the World Cups in 2010, 2006, 2002, 1998 and 1994, leading to a user-specified col-lection of five document clusters. We used a crawler to obtain all documents in this category and applied the document processing pipeline presented in Section 6.1 and TCluster algorithm to com-pare the number of clusters obtained through TCluster with the 5 pre-defined clusters in this category. In terms of precision of the timeline, the number of pre-defined categories in the World Cup category (5) is lower than the number of clusters determined by TCluster (21)
While this DMOZ entry has only 5 categories that represent the past four tournaments and the forthcoming one, TCluster deter-mined 16 more clusters. Why this discrepancy? It is clear that each World Cup document has a single event as the main theme. Thus, documents are well classified by users in terms of the actual event. On the other hand, the same document usually refers to past events and winners. Therefore, it is also possible to view the same document content along the time line of the history of the World Cup, meaning that a single document can be relevant to more than just one single event and thus cluster and year.
The second set of experiments uses the TimeBank 1.2 corpus, which contains news articles that have been annotated using TimeML with temporal expressions related to events, times and temporal links between events and times [26]. The objective of the exper-iments was to show that temporal expressions, if correctly identi-fied and made readily accessible to TCluster , can significantly im-prove the precision and granularity of timelines along which doc-uments are clustered. For comparison purposes, we run a set of search queries against this annotated TimeBank document collec-tion and the corresponding collection that had no such annotations and marked-up temporal expressions, respectively. For the latter  X  X lain text document collection X , only the document timestamps have been used for the TCluster algorithm.

Intuitively, for the plain text collection, documents in the search result are clustered based on their document timestamp. Apply-ing TCluster to the plain text documents should at least result in the same number of clusters, as TCluster considers the document timestamp as part of a temporal document profile. However, if there are more temporal expressions accessible to TCluster in a temporal document profile, the resulting timeline along which documents are clustered should be more precise by providing: a) more clusters in a timeline, and b) more documents in a cluster, as a document then can belong to more than one cluster.

We selected 20 random queries and compared the results. Over-all, the usage of temporal expressions shows a 50% increase in the number of clusters discovered by TCluster . The more temporal ex-pressions are explicit (besides just the document timestamp), the better the precision of the document clustering.
We conducted a second experiment on AMT where the goal was to evaluate the quality of search results using TCluster in combina-tion with temporal snippets. In this experiment, we selected 10 ran-dom informational queries for Wikipedia featured articles query was evaluated by 11 different workers and presented as a task in AMT that consisted of search results and hit list clustering for the query. We asked workers to evaluate if the search results were relevant using the following scale (excellent = 5, I don X  X  know = 1): http://en.wikipedia.org/wiki/Featured_ Article
The average response was 4.04% (with an 80% agreement level), which indicates that workers found results to be good most of the time. We also performed the same evaluation but using the top-10 most active topics on Twitter where the average response was 4.33% (with an 80% agreement level).
A very useful feature of the experiments in AMT is the ability to ask for feedback. For both data sets (Wikipedia and Twitter), users provided useful comments. Table 4 gives a summary of some of the answers.

Experiment type
Wikipedia I do a lot of research and time lines of cases and
Twitter The results are great. I have looked for such Table 4: Summary of user feedback for AMT experiments
The results are encouraging and user feedback has been very valuable in terms of alternative scenarios and overall suggestions for improvements.
Temporal information embedded in documents in the form of temporal expressions provide an import means to further improve current search engines and thus user experience by simply applying an additional step to traditional document ranking approaches.
In this paper, we have presented a framework that can be used to make a search application time-aware by providing more fea-tures that leverage time. We have shown how such a time-based document clustering can be achieved when temporal expressions in documents are readily available. Our novel approach leverages re-cent developments in temporal entity extraction and temporal doc-ument annotations, techniques that are readily available to support our approach.

Our TCluster algorithm provides great flexibility and allows users to explore clusters of search result documents that are organized along well-defined timelines, supporting different levels of time granularity. The prototypical implementation shows that the pro-posed technique can effectively be realized using existing tools and systems. Our evaluation demonstrate the utility of the time-based clustering over existing approaches that cluster documents only based on document timestamps.

Furthermore, our approach significantly leverages the work done in the context of temporal entity extraction and the development of respective tools. Our well-founded timeline construction and document clustering approaches put these tools and techniques to an important new use. In particular, our framework can serve as an offspring of several refined, topic specific methods for temporal information retrieval.

An important aspect of our work is that we believe that when a user is engaged in tasks that require time-related investigations and sensemaking, traditional information retrieval and search engines fall short. The use of time and timelines for clustering and brows-ing nicely fits exploratory search systems that go beyond simply returning some documents or answer in response to a query.
Our future work primarily concerns investigating alternative doc-ument ranking techniques in TCluster using more (annotated) doc-ument collections. In particular, using machine learning techniques, we want to study the weighting of relative temporal expressions as well as different sentence distance functions for determining the rank of documents in a cluster.

AMT is a viable tool for conducting relevance evaluations exper-iments using crowds. As shown in previous research, it is possible to recruit hundreds of users at very small cost within a short time-frame. We plan to continue working on using this type of method-ology with more interactive experiments to continue studying time-base search and exploration. [1] Alembic: http: [2] R. Al-Kamha and D. Embley: Grouping Search-Engine [3] J. Allan, R. Gupta and V. Khandelwal: Temporal Summaries [4] O. Alonso, R. Baeza-Yates, and M. Gertz: Effectiveness of [5] O. Alonso, M. Gertz, and R. Baeza-Yates: On the Value of [6] O. Alonso, D. E. Rose, and B. Stewart: Crowdsourcing for [7] I. Arikan, S. Bedathur, and K. Berberich: Time Will Tell: [8] A. Aula, N. Jhaveri, and M. Kaki: Information Search [9] R. Baeza-Yates: Searching the Future. In SIGIR Workshop [10] C. Carpineto, S. Osinski, G. Romano, and D. Weiss: A [11] R. Catizone, A. Dalli, and Y. Wilks: Evaluating [12] DMOZ http://www.dmoz.org/ . [13] M. Dubinko et al.: Visualizing Tags over Time. In Proc. of [14] P. Ferragina and A. Gulli: A Personalized Search Engine [15] GUTime, http: [16] A. Jain, M. Murthy, and P. Flynn: Data Clustering: A Survey. [17] D. Koen and W. Bender: Time Frames: Temporal [18] P.J. Kalczynski and A. Chou: Temporal Document Retrieval [19] A. Kittur, E. H. Chi, and B. Suh: Crowdsourcing User [20] J. Makkonen and H. Ahonen-Myka: Utilizing Temporal [21] I. Mani, J. Pustejovsky, and R. Gaizauskas (Eds.): The [22] I. Mani, J. Pustejovsky, and B. Sundheim: Introduction to the [23] P. Pirolli: Information Foraging Theory. Oxford University [24] M. Pasca: Towards Temporal Web Search. ACM Symposium [25] J. Pustejovsky et al.: TimeML: Robust Specification of Event [26] J. Pustejovsky et al.: TimeBank 1.2 Documentation [27] A. Qamra, B. Tseng, and E. Chang: Mining Blog Stories [28] M. Ringel, E. Cutrell, S. Dumais, and E. Horvitz: Milestones [29] F. Schilder and C. Habel: From Temporal Expressions to [30] B. Shaparenko et al.: Identifying Temporal Patterns and Key [31] TimeML 1.2.1 Specification: http://www.timeml.org [32] H. Toda and R. Kataoka: A Search Result Clustering Method [33] Vivisimo, http://www.vivisimo.com . [34] R. White, K. Kules, S. Drucker, and M. Schraefel (Eds). [35] R. White, G. Marchionini and G. Muresan: Evaluating [36] O. Zamir and O. Etzioni: Web Document Clustering: A
