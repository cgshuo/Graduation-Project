 denotes that u can influence v in the network. For every edge ( u, v )  X  E , there is a number 0  X  p ( u, v )  X  1 which means the intrinsic strength of the link. real numbers  X  1 ,  X  2 and  X  3 which represent the cascade decay ratios of step 1, step 2 and step 3 respectively. Let S t  X  V be the set of nodes that are activated at step t with 0  X  t  X  3and S 0 = S .Atstep t +1, every node u  X  S t can activate  X  step S t =  X  or t = 3. Each node stays as an activated node after it is activated and each activated node only has one chance to activate its out-neighbors at the step right after itself is activated.
 strength of the link and the step of propagation. We set  X  4 = 0 to guarantee the length of influence path within three degrees which is consistent with TDI theory. Given a seed set S ,let  X  TSCM ( S ) denote the expected number of activated nodes when the diffusion process ends under TSCM. Given a social network graph G =( V, E ) and a number k , the influence maxi-mization problem under the TSCM model is to find a subset S  X   X  V such that |
S method from set cover problem in [ 2 ] is sufficient to show that this optimization problem is NP-hard. 3.1 Our Three Layers Approximation Approach denotes the shortest graph distance from node w to v . If there is no path from v  X  D ( S, i ), then v belongs to layer i . The basic idea of TLAA is that we only consider the influence from layer i to layer i + 1. The initial set S = D ( S, 0). Given a seed set S ,foreach v  X  V , we define the final activated probability of v as: Let  X  TL ( S ) denote the final influence spread of S in our TLAA, then we have Breadth-first search (BFS [ 3 ]) from S is used to compute  X  TL ( S ). the heuristic algorithms. Figure 1 and Figure 2 show the experimental results on influence spread using algorithms above. The seed set size k ranges from 1 to 50. We set  X  1 =1,  X  2 =0 . 5,  X  3 =0 . 1and p ( e )=0 . 1 for all e  X  E . spread where the CELFGreedy algorithm is feasible to run. TLLFGreedy pro-vides the largest influence spread except CELFGreedy. In Figure 2 , the graph is too large to run CELFGreedy, so it is out of the picture. TLLFGreedy out-performs all other algorithms. Figure 3 shows the running time of different algo-rithms to get 50 seeds in Figure 1 and Figure 2 . The TLLFGreedy is more than three orders magnitude faster than CELFGreedy over HEP-PH. When graph becomes larger, TLLFGreedy is faster than TSLFGreedy.
 it can guarantee accuracy.
 ber increases or when rival objects on road network are sparsely located, it takes overlong processing time. In this paper, a fast BR k NN query algorithm is intro-duced to overcome the deficiency in traditional methods. 2.1 Basic Concepts of BRNN Query Yiu et al. [ 2 ] proposed the Eager algorithm which is a sequential search for monochromatic reverse nearest neighbor (MR k NN). This algorithm is also appli-cable to BR k NN query. The Eager algorithm is an efficient algorithm to find BR k NN on a large network like a road network, however, when the rival objects are distributed sparsely on the road network or the value of k is large, it takes long processing time. Therefore, this paper proposes an efficient query algorithm that works fast in the difficult conditions mentioned above.
 ods; (1) to apply incremental Euclidean restriction (IER) [ 3 ] strategy when to decide to expand the region, (2) to suppress the times of checking a road network node whether it is included in the BR k NN region or not by applying the simple materialized path view (SMPV) [ 1 ] data. 2.2 BRNN Query on a Road Network When a set of rival objects S and a set of interest objects P are given and a q is included as k NN is first generated. And then interest objects in P ,which lie in the range A , are retrieved. Accordingly, when BR k NN query is in the road network distance, the query retrieves interest objects in P which lie in the range A in road network distances.
 network. This lemma also stands for BR k NN query in the road network distance to prune nodes that are not included in BR k NN of the query object q . Lemma 1. Let q be a query point, n be a road network node, and p be a data point to SMPV structure. In this figure, black circles are border nodes. If the condition d on all paths which pass through b i . Therefore, all paths which pass through the ( the search for all paths which pass through b i can be pruned.
 varying data points density for S when the density of P is set to 0.002, and (b) shows the processing time varying the density of P when the density of S is set to 0.002. In the experiment, the probability density of S or P means the probable existence of objects in S or P at a road network link. For instance, the density 0.01 indicates that a data point exists once every 100 links. in large range, and in such case, Eager algorithm takes very long processing time. Conversely, if the density is dense, the searching area becomes narrow and processing time is faster as a result. Our proposed method showed the stable result that is independent of the density. Consequently, Fig. 3 (b) shows that the proposed method outperformed the Eager algorithm in which the processing time is significantly degraded. However, if the density increases, the processing time is also slightly increased in the proposed method. Because when candidates of BR k NN are found from P , it is required to verify whether each candidate in P P within candidate subgraphs might be increased and several verification steps leads the increase of processing time. In this paper, we proposed a fast BR k NN query algorithm in the road network distance by using the simple materialized path view (SMPV). With extensive experiments, we showed that the performance of the proposed method comparing to the existing method, Eager algorithm. Especially, the proposed method is 10 to 100 times faster in processing time significantly when the density distribution of S is sparse on a road network. On the other hand, the higher the density distribution of S is, the lesser the searching range is necessary in the real road network. Therefore, Eager algorithm is also efficient for such case. To advance an efficient and adaptive query which is not depending on the density distribution of S is for our future work.

