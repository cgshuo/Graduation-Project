 In large companies the gap between business and IT is usually bridged by design-ing and maintaining an enterprise architecture (EA). An enterprise architecture is a high-level representation of the enterprise, used for managing the relation between business and IT.

Large organizations must model their enterprise architectures in order to co-ordinate IT projects and the manageme nt of IT costs. In addition, in recent years EA is used to increase the flexibility of the organization and to justify the contribution of IT to business goals. This means that EAs need to be used not only to coordinate IT projects, but also for the following kinds of analysis:  X  to determine the impact of changes in the business environment on the or- X  to determine the value of a certa in architectural element and  X  to assess which projects that implement the architecture have the most busi-This requires an extension of EA modelling languages with concepts such as business goal and business value, and support for tracing business goals to EA components. In this paper, we empirically investigate such an extension on un-derstandability.

The context of our work is the ArchiMate language for enterprise architecture modelling [27]. In previous work [9,23] we defined a set of goal-oriented concepts based on the concepts found in goal-oriented requirements engineering (GORE) and extended ArchiMate with these concepts. These goal-oriented extensions have been adopted in the Open Group standard for enterprise architecture mod-elling [27]. In subsequent work we provided initial empirical validation of the usability of this extension [10]. This validation showed that some users of the language experienced difficulty in understanding the extension to ArchiMate, and we proposed a simplification of the goal-oriented extension. In this paper, we present and analyze further data ab out understandability of goal-oriented concepts by enterprise architects, and we present explanations of the understand-ability issues. We present tentative gener alizations about goal-oriented concepts in the context of enterprise architecture. We believe that the population of enter-prise achitects have no difficulty in using the stakeholder, goal and requirement concept. Regarding the relations, the influence relation is the best understood relation. These findings should also be true for the languages we based the mo-tivation extension of ArchiMate on, namely i*, Tropos, KAOS and GBRAM.
We start with listing the research questions in the next section. Next we describe our research methodology in s ection 3. We detail our conceptual frame-work in section 4. Section 5 presents ou r data and analyzes the implications of these data for goal-oriented requirements concepts. In section 6 we provide an-swers to our research questions. Sectio n 7 discusses related work and in section 8 we discuss some implications for practice and for further research. We want to know how understandable the goal-oriented requirements extension to an enterprise architecture language is fo r practicing enterprise architects. So our population of interest is the population of enterprise architects, and in our research we investigate a small sample of them, and we investigate the under-standability of the goal-oriented extensi on of the ArchiMate language. At the end of the paper we discuss the generalizability of our results to the larger population of interest. Here we state our research questions: Q1: How understandable is the motivation extension of ArchiMate by enterprise Q2: Which concepts are understood correctly? Why? Q3: Which concepts are not understood? Why? Q4: What kind of mistakes are made? Why? Wewilldefinetheconceptofunderstandability,usedinQ1,asthepercentageoflan-guage users who understand the concept correctly. Q2 and Q3 ask which concepts are understood by all users or misunderstood by at least some users, respectively. For the concepts that are misunderstood, Q4 asks what kinds of mistakes are made. In all cases, we want to know not only an answer to the journalistic question what is the case, but also the research question why it is the case. In terms of design research methodology , our empirical study is an evaluation of a technology implemented in practice, namely ArchiMate [29]. However, Archi-Mate (version 2.0) has only recently been implemented and although it is used, it has not been used long enough on a large scale to make an evaluation by survey possible. Moreover, although surve ys may reveal large-scale trends, they are inadequate at providing the detailed data about understandability that we need.
 Our data comes from two groups of practitioners who followed a course on ArchiMate. Their homework provided the material we needed to assess under-standability of goal-oriented concepts to enterprise architects, and to answer our research question above. The first group had 7 participants, and the second group had 12 participants. Their homework was an excercise based on an actual problem within the organization. These were real requirements engineering or EA design problems and therefore a fair representation of the difficulty level.
The participants of the two groups self-selected into the course, and so they may be more motivated or more talented than the  X  X verage X  enterprise architect. They were also highly motivated to pass the course, since they were sent by their employer. They had to pass their homewor k exercises in order to get a certificate. Not passing the exam would have relfected badly on the subject and weakened their position in the organization.This would make understandability problems all the more telling.

All participants had at least 5 years of experience as an enterprise architect (or a similar role) and all had at least a bachelors degree (not necessarily in computer science or software engineerin g). The median experience is based on the linkedin profiles of the subjects. They have had some modelling experience, since this is common in their role of architect or business analyst. Since we did not do random sampling, and the groups are too small for statistical inference anyway, we cannot draw any statistical inferences from our results. We can only give descriptive statistics of our sample, but not draw statistical conclusions about the population of enterprise architects.

A controlled experiment would have given us more flexibility, but this is be-yond our budget to do such an experiment with practitioners (i.e. we would have to pay them commercial fees).

However, because we have detailed data from the homework done by the par-ticipants, we will analyze possible cau ses for (mis)understanding goal-oriented concepts in ArchiMate, and then conside r whether these explanations provide a reason for expecting (mis)understandi ng of goal-oriented concepts to occur outside our sample in a similar way that it happened in our sample. We will also compare our results with those in the published literature to see if results similar to ours have been found in other studies too, which would strengthen the plausibility of generalizations.
The first author (Engelsman) has been a teacher in the first but not in the sec-ond course. On both courses, he did the correcting of student assignments. The assignments were relatively small compar ed to real-world enterprise architecture concepts. That reduces the generalizability of our results, but in a useful direction: We expect that in larger, real-world projects, understandability problems would increase, not decrease comp ared to what we have observed in our courses. This is useful because our findings provide suggestions for improvement of teaching and using goal-oriented concepts in enterprise architecture in practice. The first author was involved in the definition of GORE concepts in Archi-Mate. Correction was done twice, and we a ssume that few mistakes in correcting the assignments have been made. A sample of the corrections of the student exer-cises have been discussed between the two authors of this paper, and no mistakes were found. However, later we will see that even if we would increase or decrease the percentages (in)correct in the gradings with as much as 10 points, this would not change our explanations and qualitative generalizations. Many authors operationalize understandability in terms of the time needed to understand a model [8,12] or the number of mistakes made in answers to ques-tions about a model [16,21,22,25]. Houy et al. [14] surveyed these definitions of model understandability and classified them in five types:  X  Recalling model content. Subjects are given a model, and are given time to  X  Correctly answering question about model content. Subjects are given a  X  Problem solving based on the model content. Subjects are given a model to  X  Verification of model content. Subjects are given a model and a textual  X  Time needed to understand the model. Subjects are given a model to study. Another interesting approach to measuring understandability, not mentioned by Houy et al., is that of Caire et al. [5], who measured the ability of subjects to guess the definition of an i* construct by looking at the icons.

All of these measures indicate a passive form of understanding because they concern the understanding of a given model. We are however interested in a more active kind of understanding of a modeling language, this is needed when an analyst uses the language to build models. Such an active concept of un-derstanding is used by, for example, Carvallo &amp; Franch [6] and by Matulevi X  cius &amp; Heymans [17], who measured the number of mistakes made in constructing i* models, and by Abrahao et al., who measured the time needed to build a model [1].

We define the understandability of a concept for a set of language users in this paper as the percentage of language users who, whenever they use the concept when building a model, use it correctly. Understandability is thus relative to a set of language users. In this paper we measure the understandability of goal-oriented concepts in ArchiMate 2.0 in a sample of 19 language users. From our observations, we draw conclusions about understandability of ArchiMate in general, and of goal-oriented concepts in general, for enterprise architects. Table 1 summarizes the scores that the 19 enterprise architects received on their homework. The numbers are the percent age of correctly used concepts by each subject. When a subject did not use a co ncept at all, the corresponding cell contains  X  X a X . Subject 1-7 are the subjects from 2011 and subject 8 -19 are the subjects from 2012. The avg column shows the percentage of users that always uses the concept correctly. Looking at th is column we see that only four concepts were used correctly by at least half of the subjects: the concep ts of stakeholder, goal, requirement and influence. We now discuss our findings in detail. 5.1 Description of Model Complexity In total the 19 subjects constructed 246 diagrams and on average the models contained 9 concepts. However, complex ity of the models varied. Some diagrams contained as little as 2 concepts, and others contained 35 concepts. Not ev-ery diagram contained every concept. Th is is because ArchiMate uses views to reduce model complexity. There are roughly three kind of views. The first is a stakeholder view, showing the stakeholders, drivers, assessment and initial goals. The second is a goal refinement view showing the modeling of goals, goal influ-ence, goal decomposition and goal realization through requirements. The third view shows the realization of requirements by architecture components. Figure 1 shows the frequency with which different concepts were used. The most fre-quently used concepts are those of goal, stakeholder and assessment. We have included an median sized model in the appendix A. This is an actual (translated) model constructed by one of the subjects. It contains more than nine concepts, but that is just an average. The example illustrates the size of the models. 5.2 Analysis of GORE Concepts and Relations in ArchiMate Stakeholder. The first concept under analysis is the stakeholder concept. This concept is based on definitions from TOGAF, i* and Tropos. TOGAF defines a stakeholder as an individual, team, or organization (or classes thereof) with interests in, or concerns relative to, the outcome of the architecture [26]. This seems more general than the definition of actor in i* and Tropos as entities with intentional properties such as goals, beliefs, abilities, and commitments [30]. The motivation extension of ArchiMate adopted the more general definition of TOGAF [9,27].

In our experiments the stakeholder concept was perfectly understood by every student. There was not a single mistake made in all instances of use. This can be explained by the fact that the TOGAF stakeholder concept is a well known concept by the subjects. Its definition is very clear, and it is substantially dif-ferent than the other concepts used in th e motivation extension, so that it is not easy to confuse the stakeholder co ncept with any other concept. For these reasons we think this finding will generalize to other ArchiMate users too. To the extent that the concept of actor in i* and Tropos coincides with that of TOGAF stakeholder, we expect that users of i * and Tropos will find the actor concept unproblematic too, and to be able to use it without mistakes.
 Driver. The driver concept is not found in the GORE literature, but used in the EA literature. TOGAF defines driver a s the key interests that are crucially important to the stakeholders in the system, and determines the acceptability of the system [26]. The motivation extension of ArchiMate adopted this defini-tion [9,27]. In our experiments only nine subjects (47%) understood the driver concept correctly. The mo st common mistake made with driver was that it was used as a goal. For example, subjects modeled the goal  X  X o improve Financial Information X  as a driver. But the driver corresponding to this goal is the key interest  X  X inancial Information X . Apparently the definition of driver is not very clear, and it is so close to the concept of a goal that it generates more confusion than clarity. We see no reason why this wo uld not confuse other practicing enter-prise architects, so we think that this finding will generalize to other ArchiMate 2.0 users as well.
 Assessment. The concept of an assessment too is based on definitions found in the EA literature. The Business Motiv ation Model (BMM) defines an assessment as a judgment about some influencer that affects the organization X  X  ability to employ its means or achieve its end [4]. The motivation extension of ArchiMate attempted to make this more concrete by defining an assessment as the outcome of the analysis of some stakeholder concern [9, 27]. In our experiments nine subjects used the concept perfectly . The most common mistake was that the assessment concept was used as a goal. For example, correct use of an assessment would be  X  X he financial information is incorrect X . This is a possible outcome of an analysis of the key stakeholder interest  X  X inancial information X . However the subjects used the concept often to denote a goal like  X  X mprove financial information X , just as we saw with the driver concept above. The distinctions between a key interest, an analysis of a ke y interest, the outcome of the analysis, and the goal motivated by this outcome, were lost on most of our subjects. Moreover, the outcome of an analysis of a key interest can indeed be to  X  X mprove something X . For these reasons we think t his confusion will be present in other enterprise architects who use ArchiMate, as well as in users of the assessment concept in BMM.
 Goal. The ArchiMate definition of goal is based on a combination of the EA literature and the GORE literature. KAOS defines goals as desired system prop-erties that have been expressed by some s takeholder(s) [28]. This seems more technical and solution oriented than the i* and Tropos concepts of a goal as the intentions of a stakeholder i* [30]. BMM defines goal as a state or condi-tion of the enterprise to be brought about or sustained through appropriate means BMM [4]. ArchiMate defines goal as some end that a stakeholder wants to achieve [9, 27]. In our experiments 13 subjects understood the goal concept perfectly. The most common mistakes made were that a goal was either used as a driver or as a requirement. For example, the subjects would write down  X  X inancial information X  as a goal, but it should actually be something like  X  X m-prove financial information X . When it was used as a requirement, it was written down as  X  X he system should have 100% availability X . We can reuse our explana-tion that the distinction between driver, goal and requirement were lost by the subject in that instance. The concept o f goal can therefore be understood and used by practicing enterprise architect s, but mistakes are made too. Since the ArchiMate concept of a goal is similar to that in KAOS, i* Tropos and the BMM we expect that this will happen in users of those languages too. This calls for clearer guidelines in the application of the goal concept.
 Requirement. We based our definition of the requirements concept on the GORE literature. In KAOS a requirement is a goal assigned to an agent of the software being studied [28]. In GBRAM a requirement specifies how a goal should be accomplished by a proposed system [2]. The ArchiMate motivation extension defines requirement as some end that must be realized by a single component of the architecture [9,27]. In our experiments in t otal 11 subjects (57%) perfectly understood the concept. In general the requirement concept was reasonably well understood. This can be explained by the fact that it is a well known concept already known in practice by the subjects.

However, there were quite a large number of mistakes. Many subjects specified requirements that were goals not yet allocated to a system. For example, instead of the  X  X he system should have a financial reports function X , they specified the goal  X  X mprove financial reports X . We see again that semantically close concepts are confused by practitioners, even though the definitions of the concepts are clear. We expect this confusion to be present in other users of ArchiMate as well.
 The decomposition relation. ArchiMate 2.0 based this relation on a combination of concepts from the EA and GORE liter ature. i* defines a decomposition as an element that is linked to its component nodes. [30]. BMM uses a similar definition, but it is more aimed at goals. BMM defines decomposition as an end that includes an other end BMM [4]. In Tropos, a parent goal is satisficed if all of its chlidren goals are satisficed [3]. In KAOS the conjunction of all the subgoals must be a sufficient condition entailing the goal KAOS [28].

The motivation extension of ArchiMate defines decomposition as a some in-tention that is divided into multiple intention . [9,27]. This was understood cor-rectly by only five subjects (26%). When the decomposition relation was used incorrectly, it was used as a influence relation, which in ArchiMate is defined as a contribution relation. For example, correct decomposition of the goal  X  X m-prove correctness financial information X  should be  X  X mprove correctness financial information regarding outstanding debt AND improve correctness financial in-formation sales X . This decomposes a goal into more detailed goals. However, many subjects decomposed the goal  X  X mprove correctness financial information X  into the component goal  X  X cquire a financial reports system that records sales information X . But this is an influencer, i.e. a new goal that contributes to the original goal. The confusion is probably caused by the fact that satisfaction of an influencer increases the satisfaction of the influenced goal, just as satisfaction of the components increases the satisfaction of the composite goal. Based on this analysis we expect other users of ArchiMate to have similar problems. The influence relation. In i* a contribution is a link of elements to a soft goal to analyze its contribution [30]. Tropos defines contribution analysis as goals that can contribute positively or negatively in the fulfillment of the goal to be analyzed [3]. ArchiMate defines this as a goal G1 contributes to another goal G2 if satisfaction of G1 influences the satisfaction of G2 positively or nega-tively [9, 27]. The influence relation was understood correctly by 15 subjects (79%). In the cases were the relation was not used correctly, the subjects linked requirements with goals on a 1 on 1 basis, which amounted to stated the same goal twice. Others used a standard ArchiMate association relation where they should have used an influence relation. To further reduce the misunderstandings of the influence relation, better guidelines must be found.
 The realization relation. This relation is based on relations found in the GORE literature. i* defines a means-end relatio n, which is a relation between an end and a means [30]. KAOS defines a relation for linking requirements to operations [28]. The ArchiMate motivation extension defines the realization relation as a relation that some end that is realized by some means [9, 27]. All subjects used the realization relation correctly. This can be easily explained by the fact that the support tool only allows connecting a requirement to a goal and an architecture element to a requirement so that the relation cannot be used incorrectly. 100% correct use therefore has no implication for (mis)understanding of the concept by tool users. Q1: How understandable is the motivation extension of ArchiMate by enterprise architects? As shown by the last column of table 1, not all of the motivation extension is understood very clearly.

Q2: Which concepts are understood correctly? Why? Only the stakeholder, goal, requirement concepts and the influence relation were understood by the majority (scoring more than 55%). However the requirement concept was a bor-derline case where a lot of mistakes were made. Our explanation of this level of understanding is that they are well known concepts already used in practice, and that they have a semantic distance that prevents confusion. However, the distance between requirement and goal is smaller than the other concepts and immediately we saw an a drop in understandability.

Q3: Which concepts are not understood? Why? The concepts of driver, as-sessment and decomposition were not very well understood. They were often confused with other concepts, such as that of a goal. Our explanation is that drivers, assessments and goals are very closely related and may even overlap, and that the definition of the decomposition relation overlaps with the definition of the influence relation.

Q4: What kind of mistakes are made? Why? Thesubjectsmadetwotypesof mistakes. Drivers and assessments were modelled as goals. A driver is related to a stakeholder and an interest area of the stakeholder. A goal is a statement of desire about this interest area. This makes goals and drivers conceptually very close and created confusion in our subjects.
Thesameistruefortheassessmentcon cept. An assessment is the outcome of some analysis. It is not defined what this outcome should be. It can very well be a goal or something else, which is confusing again. The use of the requirement concept to model a goal is similar. Because both concepts are closely related, the difference between desired functionality from the viewpoint of a stakeholder is very much similar to the stated function al need of a system. The only difference is the perspective.

The second type of mistake is that an influence relation was expressed by means of a decomposition relation. Again, the definitions turn out to be too close to each other for many of our subjects. The Business Rules Group has published a model that relates business goals and elements found in EA, called the business motivation model [4], which is now an OMG standard. The difference with ArchiMate is that the BMM provides no concrete modelling notations. It provides plans and guidelines for developing and managening business plans in an organized manner, all related to enterprise architecture.

Clements &amp; Bass extend software architecture modelling with GORE, but remove all notational conventions of GORE techniques and return to a clas-sic bulleted list of possible goals and stakeholders [7]. This makes goal-oriented modelling usable for requirements and architecture engineering workshops with practitioners, but does not help to support the kinds of analysis that we men-tioned earlier in the introduction.

Stirna et al. describe an approach to enterprise modelling that includes linking goals to enterprise models [24]. However th ey do not describe concrete modelling notations that are needed to extend existing EA modelling techniques. Jureta and Faulkner [15] sketch a goal-oriented language that links goals and a number of other intentional structures to actors, but not to EA models. Horkhoff and Yu present a method to evaluate the achievement of goals by enterprise models, all represented in i* [13].

An important obstacle to applying GORE to real-world problems is the complexity of the notation. Moody et al. [20] identified improvements for i* and validated the constructs of i* in practice , based on Moody X  X  theory of nottions [18].

Caire et al. [5] also investigated the understandability of i*. They focussed on the ease of understanding of a concept by infering its definition by its visual representation. They had novices design a new icon set for i* and validated these icons in a new case study. This contrasts with our work because they focus on notations and we focus on concepts.

Carvallo &amp; Franch [6] provided an experience report about the use of i* in architecting hybrid systems. They concluded that i* could be used for this pur-pose for stakeholders and modellers, provided that i* was simplied. Our work extends on these findings. We also found out that related concepts are hard to distinguish (i.e the distinction between driver,assessment,goal, the distinction between requirement and goal and the distinction between decomposition and influence).

Matulevi X  cius &amp; Heymans [17] compared i* and KAOS to determine which language was more understandable. The relevant conclusions for this work were that the GORE languages had ill defined constructs and were there hard to use, GORE languages also lacked methodological guidelines to assist users in using the languages. These conclusions were also found in our work.

Another contrast is that most of the empirical studies of the usability of GORE languages have been done with students, while we do our empirical studies with practitioners. 8.1 Generalizability To which extent are our results generalizable beyond our sample of practitioners? In our experiments every subject had at l east five years experience, the minimal of a bachelors degree. Enterprise architects usually have the same educational background as our subjects. Our subjects were responsible for translating busi-ness strategy and business goals into requirements models and they had to de-sign an enterprise architecture based on these requirements. This is similar to the tasks enterprise architects have to perform in general.

Moreover, the results from this study match with our previous research. In our previous work [10] we reported about a real-world project in which practic-ing enterprise architects used ArchiMate to redefine an enterprise architecture and link it to changed business objectives. They used the stakeholder and goal concepts as intended. They had some trouble understanding the requirement concept and often formulated requirements as if they were business goals. We also saw that the subjects had a difficult time to see the difference between goals and drivers. The driver concept was to o general to use for the subjects. The same was true for the distinction between driver, goal and assessment. Those finding and their explanations agree with the ones reported about in this paper.
All of this justifies the claim that other enterprise architects may understand and misunderstand goal-oriented Archi Mate concepts in the same way as our subjects did. This is a weak generalization, as it says  X  X his can happen more often X  without giving any quantification how often it could happen [11]. But such a quantification is not needed to draw some implications for practice, as we do below.

Because the goal-oriented concepts that we used have been taken from other existing goal-oriented languages, we hypothesize that our conclusions may be generalized to those languages too. Again, we cannot quantify this beyond the weak claim that this may happen in those languages too. But we do claim that our findings are sufficiently generalizable to motivate similar research for those languages. 8.2 Validity Construct validity is the extent to which theoreti cal constructs are applied and measured correctly in our study. The only theoretical construct that we use is that of understandability, and we defined it in section 4. Our definition agrees with that used by other authors [6, 17] but with that of all other authors. Our definition refers to the number of mistakes made when building models, and not the the amount of time (indicator of effort) required to build the models. Other definitions refer to the number of mistakes or the amount of time needed to answer questions about the models. Comparison of our results with that of studies that use another definition of understandability should be done with caution.

Internal validity is the support for our causal explanations of the phenom-ena. Could subjects have misunderstood some concepts for other reasons than the ones we hypothesize? For example because they lack competence or because they were explained badly in the trainin g? We cannot exclude these other expla-nations, but find them less plausible because all subjects had similar background and experience, and because the teachers similarly have several years of experi-ence teaching these concepts. And even if these explanations were true for some subjects, this would not invalidate our expl anation in terms of semantic closeness of concepts.
 External validity is the support for generalization from our quasi-experiment. Because our explanations do not refer to particular properties of our sample but are stated in terms of the language itself, and because other practitioners are relevantly similar in background and experience to those in our sample, we think our conclusions are generalizable. But we do not claim that they are generalizable to the entire population of practicing enterprise architects, nor to all other goal-oriented languages. 8.3 Implications for Practice ArchiMate 2.0 is now an Open Group standard, and the concepts we investi-gated in this paper will remain present in the language. However, one practical implication of this paper is that in future training programs we will not teach all concepts anymore. We will make a dis tinction between the recommended mini-mal concepts and less important concep ts. We will recommend that future users of the language at least should use the stakeholder concept, the goal concept and the requirement concepts.

A second implication is that we need more practically usable guidelines for the use of the concepts that we do recommend, because other than the goal and realization concepts, we expect that many practitioners will misunderstand and incorrectly apply the basic concepts of goal and requirement and the relations of influence and decomposition. This is a topic for future research. 8.4 Future Research In addition to work on the guidelines mentioned above, we intend to combine our work with the results of usability and understandability of notations done by Moody [18,19], Caire [5] and Heymans [17]. The focus of Moody and Caire was on the understandability of the notation. Heymans focussed more on the conceptual use of GORE concepts. If w e combine their work with ours we will improve understandability the conceptual and notational level. This could lead to more clearly defined and usable GORE languages.

We also intend to investigate the utility of goal-oriented concepts in ArchiMate as well. They have been added in order to facilitate traceability between business goals and enterprise architecture. Are they actually used this way in practice? We plan to do additional surveys and experiments with practicing enterprise architects to investigate this.

