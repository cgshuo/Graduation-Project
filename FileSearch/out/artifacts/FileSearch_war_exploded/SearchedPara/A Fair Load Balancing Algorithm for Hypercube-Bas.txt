 In recent years, a number of DHT-based P2P systems [6], [8], [12], [13] have been proposed to support a large variety of applications including file sharing, object storage, and name service. One important issue in the DHT design is how to balance the load across the nodes in the system. To achieve load balance, existing DHT-based P2P systems simply resort to the hash function to map objects to nodes randomly. However, this could result in an (log ) N  X  imbalance factor in the number of objects these systems assume that nodes are homogeneous and the workload is uniform. Recent measurement studies [10], [11] have shown that the capabilities of nodes can skewed. These facts further aggravate the problem of load imbalance in the DHT-based P2P systems. 
Many algorithms [1], [2], [5], [7], [9], [ 14] have been proposed to address the load balancing problem in the DHT systems. However, these algorithms have some limitations in our opinion. They either make some unrealistic assumptions about the systems or have costly maintenance or communication overhead. In this paper, we propose a fairly layered load balancing algorithm (FLLB) to cope with load balancing problem in the hypercube-based DHT systems. FLLB is designed based on the load is distributed to the nodes. It splits the total load of a node into several sublayers. Each node measures the fairness index of each layer periodically, then dynamically lightly loaded nodes. 
In this paper we make the following contributions: 1. We design a distributed load balancing algorithm based on the fairness. Relying on the measurement of fairness index and dynamic indegree adaptation, it achieves fair load distribution, that is, has higher capacity nodes carry more loads. and the load balancing algorithm is scheduled at each layer. Relying on this mechanism, our load balancing algorithm is fine-grained. 3. We study the proposed algorithm by using extensive experiments. Experiment results show that the algorithm achieves fairer load distribution and has lower overhead in comparison with some existing load balancing algorithms. Section 3 , we present the FLLB algorithm in de tail. Experiment results are presented 2.1 Hypercube-Based DHT hypercube routing. Given a query, the hypercube-based DHT system routes the 1 12 123 1234 xxx xx x  X  X  X  X  , where x represents a wildcard). To do this, each node in the system maintains a routing table which is organized into nodes whose IDs share the first n digits with the present node X  X  ID, but whose node satisfying this condition could be added into the entries at row n of present node X  X  routing table. This provides the routing redundancy. Representative hypercube-based DHT systems include Pastry [12] and Tapestry [6]. 2.2 Representative Load Balancing Algorithms To achieve load balance, existing DHT-based P2P systems resort to the hash function to generate object IDs uniformly. Such a random choice of object IDs, however, heterogeneous nature of the P2P networks. 
Many load balancing algorithms have been proposed to cope with the load imbalance problem in the DHT-based P2P systems. Chord [8] was the first to propose the concept of virtual server to achieve load balance by having each physical node constant factor. However, it assumes that nodes are homogeneous and query load is uniform. 
CFS [14] accounts for node heterogeneity by allocating to each node, some virtual servers proportional to the node X  X  capacity. The underloaded node creates new vir-tual servers to gain more query load and the overloaded node destroys some of its virtual servers to shed the load. It focuses on heterogeneity primarily, not load skew. 
The load balancing algorithms proposed by Shen et al. [2], Zhu et al. [5], Godfrey et al. server migration. In these algorithms, each node periodically reports the load information of its virtual servers to some nodes that are in charge of aggregating load information. The information. These algorithms achieve good load balance. However, periodic load information aggregation and virtual server migration bring heavy burden to the system. 
Shen et al. [1] proposed an novel load balancing algorithm based on irregular routing table to cope with node heterogeneity, skew workload and churn in DHT network. Its basic idea of dynamically adjusting node X  X  indegree to achieve load balance is similar to our FLLB algorithm. Their algorithm adjusts the node X  X  indegree according to its experienced load. In contra st, FLLB algorithm adjusts the indegree of current load distribution is. In this section, we introduce our load balancing algorithm FLLB. FLLB is based on the system. FLLB uses the fairness index to measure how equally the load is distributed. If the fairness index is low, this indicates that there exists load imbalance proportional to their capacities. In this case, to achieve a fairer load distribution, each node dynamically adjusts its indegree. 3.1 Layered Load, Fairness Index and Indegree of Node We consider a hypercube-based DHT network with n nodes. Each node i (1 in  X  X  X  ) number of the queries that it receives from other nodes over T. For a node i , overload impose work beyond its capacity. The total utilization of node i , i u , is defined as the whose (1) th k + digits are different from the ( 1) th k + digit in node i  X  X  ID. 
According to the routing algorithm of the hypercube-based DHT network, node i routing table neighbor and be added into the entries at row m of their routing tables. node i , its load i l can be split into several sublayers: 1 load for all nodes in ( , ) i nk  X  , (,) (,) i nk
 X  receive from the nodes in ( , 1) say the nodes in ( , ) i nk  X  share the global layer-k load (,)
The purpose of FLLB algorithm is to distribute the query load (,) is, we use the fairness index [5], [16] as the fairness metric: value of the fairness index ranges between 0 and 1. A totally fair load distribution has layer-k utilization, i.e., (,) this distribution of (,)
In [1], Shen et al. showed that the node with a number of inlinks would likely experience high query load. We define the indegree of node i , i d , as the number of decrease its load. In practice, the P2P networ k is a dynamic system: the query load is time-varying, nodes join and depart at high rate. For this reason, a fair load distribution at present may become unfair la ter. To react to changes quickly, every node should actively monitor the fairness index of the load distribution. If a node distribution. 3.2 Computing the Fairness Index distribution of (,) u and be aware of the layer-k utilization of other nodes in ( , ) i nk  X  . 
In order to know the nodes which forward queries to it, node i with ID aaa a a a  X  X  X   X  KK maintains a backward link for each of its inlink and the nodes their IDs: nodes with IDs address information is later used by the indegree adaptation algorithm. Sending these messages to the nodes in its neighborhood, that is, the nodes referred by the entries at these nodes are also in the set ( , ) i nk  X  . neighborhood. It estimates the fairness index of current distribution of (,) these messages: their layer-k utilization to node i in T. 3.3 Indegree Adaptation and Query Forwarding After computing the fairness index and the average utilization for each layer, each node i begins to adjust its indegree according to these two metrics. than sets the increment of its layer-k utilization, k i u  X  , to previously without being overloaded. Otherw ise, to avoid overload, each increment is increase its utilization. 
If node i needs to increase its layer-k utilization, to achieve fair load distribution, the nodes whose layer-k utilization is higher than node i creates a set which contains the nodes whose address information is included in the messages that node i receives from the heavier nodes. Then it randomly chooses k k ii i uc P  X   X  nodes from this set and sends requests to these nodes, where k i P adaptation coefficient. On receiving such requests, these nodes add node i into the entries at the row 1 k  X  of their routing tables and send back replies to node i . Once node i receives a reply from a node, it builds a backward link to this node and inserts this node into its backward set (, 1) i Bn k  X  . node i decreases its indegree by requesting () ii avg lcP  X   X  nodes in its backward sets inlinks of node i . To choose nodes for deletion, node i first chooses the nodes in its nodes in ( ,1) i Bn , and so on. 
As a result of dynamic indegree adaptation, each node X  X  routing table is irregular According to the routing algorithm of the hypercube-base DHT network, once node i receives a query, it has to lookup one of its routing table entries to find the next hop node it should forward the query to. Obviously, if node i always forwards the query to the least lightly loaded node, the query load is fairly distributed among these nodes. However, this requires that node i has to communicate with all candidates to find the least lightly loaded node. This process causes high communication overhead. Instead, we propose a query forwarding mechanism based on the randomized probing mechanism adopted by Shen et al. [3]. Shen et al. suggested that node i should only probe two nodes chosen randomly from the candidates, and the query should be forward to the one with lower utilization. They found that this simple query forwarding mechanism could achieve good load distribution. We modified their mechanism to take into cons ideration the layer utilization of the node. When receiving a query, node i only communicates with two nodes chosen randomly from the candidates and learns about their total utilization and the corresponding layer utilization, say layer-k utilization. If these two nodes are both underloaded, the query is forward to the one with lower layer-k utilization. Otherwise, the query is forward to the one with lower total utilization. 4.1 Experiment Setup In this section, we evaluate the performance of FLLB algorithm on top of a Pastry simulator (64-bit identifier space). We assu med a bounded Pareto distribution for the capacities of nodes. This distribution reflects the practical situations where nodes X  capacities vary by different orders of magnitude. Queries of a node are generated based on Poisson process and their destinations are chosen from either uniform or Zipf distribution, depending on the experiment. Each node uses the appropriate table adds one unit load to the node. If the next hop of the query is to an overloaded node, the query fails. Queries succeed when they reach their destinations finally. We list the parameters of the experiment in Table 1. 
For comparison, we implemented a virtual server load balancing algorithm [14] (VS) and the ERT-based load balancing algorithm [1] (ERT) on top of the Pastry simulator. We also evaluated the performance of the base Pastry network without load balancing (No LB) in our experiments to show the improvement that these load balancing algorithms can make. In order to examine how these algorithms respond to different degrees of query load, we measured their performance as functions of the average number of queries that node initiates in T. We varied the number of queries per node from 1 to 50 to increase the total query load in the network. 4.2 Experiment Results 4.2.1 Success Rate encountering no overloaded nodes on its ro uting path. We recorded the percentage of queries that reached their destination successfully and present the results in Fig. 1. 
When queries are uniform and the load is light, all of the load balancing algorithms VS decreases drastically. This is mainly b ecause the overloaded node in VS deletes some of its virtual servers to shed the surplus load and this may result in cascades of overload. In contrast, FLLB and ERT enab le each node match its indegree to its This helps distribute load among node s proportional to their capacities and avoid overloaded nodes in query routings. When queries are skewed, the query load co ncentrates on some ID space intervals. Fig. 1 shows that FLLB and ERT sustain much higher success rates than VS in this intervals may cause the cascades of overload with high probability in VS. 4.2.2 The Fairness Index As the number of nodes in our experiments is 2048, the expected number of forwarding hops is about 2.75. Therefore, the load of a node, say node i , mainly layer-1 load and layer-2 load are distributed among the nodes in these algorithms. Fig. 2 and Fig. 3 plot the results. 
When queries are uniform, FLLB and ERT can achieve high fairness index and this indicates the load is distributed fairly among nodes. The fairness index of VS is not as balance by creating or deleting virtual servers in VS. This is less fine-grained than the dynamic indegree adaptation mechanism of FLLB and ERT. 
When queries are skewed, all of these algorithms can achieve high fairness index of the layer-1 load distribution. However, the fairness indexes of layer-2 load distribution of FLLB and ERT degrade when the query load is heavy. As mentioned above, the skewed load make the nodes in some ID space intervals are easily overloaded. If the load is too heavy, most of nodes in these intervals are overloaded at indegree regardless of the fairness index. To our surprise, VS performs better than FLLB and ERT when the query load is h eavy. The reason is that the underloaded nodes in VS may create new virtual servers in these heavily loaded intervals and share the load. 
We found that FLLB always performed better than ERT in either case. Each node in ERT dynamically adjusts its indegree only based on its experienced load. They have no knowledge about other nodes in the network. In contrast, the node in FLLB is load, but also based on the load information of other nodes. Therefore, nodes in FLLB have more accurate knowledge about the load distribution. Furthermore, the load splitting mechanism makes FLLB more fine-grained than ERT. 4.2.3 Maintenance Overhead In the hypercube-based DHT network, to build the routing table, each node needs to maintain a number of neighboring relationships. In this experiment, we measure the average indegree and outdegree of nodes for the evaluation of the maintenance overhead of all algorithms. As the average indegree is equal to the average outdegree, Fig. 4 only shows the results of indegree. The indegree of VS is much higher than others. The reason is that a node in VS may have many virtual servers and it needs to maintain a routing table for each virtual server. The indegree of ERT is also high. The underloaded nodes always increase their in degree to receive more query load. In contrast, nodes in FLLB increase their indegree only when the fairness index of the load distribution is low. Thus, to achieve load balance, FLLB needs much lower overhead for maintenance. In this paper, we present a fully distributed load balancing algorithm for the hypercube-based DHT network. It is based on the fairness of the load distribution and its purpose is to distribute the load fairly among the nodes. To achieve this goal, each node periodically monitors the fairness index of current load distribution and adjusts its indegree if necessary. Experiment results show the superiority of our algorithm compared with other algorithms under conditions of node heterogeneity, skewed query. It achieves fairer load distribution with much lower maintenance overhead. Furthermore, it sustains high success rate of the query. 
