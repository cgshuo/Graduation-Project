 The Hierarchical A  X  (HA  X  ) algorithm of Felzen-szwalb and McAllester (2007) allows the use of a hierarchy of coarse grammars to speed up pars-ing without sacrificing optimality. Pauls and Klein (2009) showed that a hierarchy of coarse grammars outperforms standard A  X  parsing for a range of grammars. HA  X  operates by computing Viterbi inside and outside scores in an agenda-based way, using outside scores computed under coarse grammars as heuristics which guide the search in finer grammars. The outside scores com-puted by HA  X  are auxiliary quantities, useful only because they form admissible heuristics for search in finer grammars.

We show that a modification of the HA  X  algo-rithm can compute modified bridge outside scores which are tighter bounds on the true outside costs in finer grammars. These bridge outside scores mix inside and outside costs from finer grammars with inside costs from coarser grammars. Because the bridge costs represent tighter estimates of the true outside costs, we expect them to reduce the work of computing inside costs in finer grammars. At the same time, because bridge costs mix com-putation from coarser and finer levels of the hier-archy, they are more expensive to compute than purely coarse outside costs. Whether the work saved by using tighter estimates outweighs the ex-tra computation needed to compute them is an em-pirical question.

In this paper, we show that the use of bridge out-side costs substantially outperforms the HA  X  al-gorithm when the coarsest levels of the hierarchy are very loose approximations of the target gram-mar. For hierarchies with tighter estimates, we show that BHA  X  obtains comparable performance to HA  X  . In other words, BHA  X  is more robust to poorly constructed hierarchies. In this section, we introduce notation and review HA  X  . Our presentation closely follows Pauls and Klein (2009), and we refer the reader to that work for a more detailed presentation. 2.1 Notation Assume we have input sentence s 0 ...s n  X  1 of length n , and a hierarchy of m weighted context-free grammars G 1 ... G m . We call the most refined grammar G m the target grammar, and all other (coarser) grammars auxiliary grammars. Each grammar G t has a set of symbols denoted with cap-ital letters and a subscript indicating the level in the hierarchy, including a distinguished goal (root) symbol G t . Without loss of generality, we assume Chomsky normal form, so each non-terminal rule r in G t has the form r = A t  X  B t C t with weight w
Edges are labeled spans e = ( A t ,i,j ) . The weight of a derivation is the sum of rule weights in the derivation. The weight of the best (mini-mum) inside derivation for an edge e is called the Viterbi inside score  X  ( e ) , and the weight of the best derivation of G  X  s 0 ...s i  X  1 A t s j ...s n  X  1 is called the Viterbi outside score  X  ( e ) . The goal of a 1-best parsing algorithm is to compute the Viterbi inside score of the edge ( G m , 0 ,n ) ; the actual best parse can be reconstructed from back-pointers in the standard way.

We assume that each auxiliary grammar G t  X  1 forms a relaxed projection of G t . A grammar G t  X  1 is a projection of G t if there exists some many-to-one onto function  X  t which maps each symbol in G t to a symbol in G t  X  1 ; hereafter, we will use A t to represent  X  t ( A t ) . A projection is relaxed if, for every rule r = A t  X  B t C t with weight w r the projection r w 0  X  w r in G t  X  1 . In other words, the weight of r 0 is a lower bound on the weight of all rules r in G t which project to r 0 . 2.2 Deduction Rules HA  X  and our modification BHA  X  can be formu-lated in terms of prioritized weighted deduction rules (Shieber et al., 1995; Felzenszwalb and McAllester, 2007). A prioritized weighted deduc-tion rule has the form where  X  1 ,..., X  n are the antecedent items of the deduction rule and  X  0 is the conclusion item . A deduction rule states that, given the antecedents  X  ,..., X  n with weights w 1 ,...,w n , the conclu-sion  X  0 can be formed with weight g ( w 1 ,...,w n ) and priority p ( w 1 ,...,w n ) .

These deduction rules are  X  X xecuted X  within a generic agenda-driven algorithm, which con-structs items in a prioritized fashion. The algo-rithm maintains an agenda (a priority queue of items), as well as a chart of items already pro-cessed. The fundamental operation of the algo-rithm is to pop the highest priority item  X  from the agenda, put it into the chart with its current weight, and form using deduction rules any items which can be built by combining  X  with items al-ready in the chart. If new or improved, resulting items are put on the agenda with priority given by p (  X  ) . Because all antecedents must be constructed before a deduction rule is executed, we sometimes refer to particular conclusion item as  X  X aiting X  on an other item(s) before it can be built. 2.3 HA  X  HA  X  can be formulated in terms of two types of items. Inside items I ( A t ,i,j ) represent possible derivations of the edge ( A t ,i,j ) , while outside items O ( A t ,i,j ) represent derivations of G  X  s ...s i  X  1 A t s j ...s n rooted at ( G t , 0 ,n ) . See Figure 1(a) for a graphical depiction of these edges. Inside items are used to compute Viterbi in-side scores under grammar G t , while outside items are used to compute Viterbi outside scores.

The deduction rules which construct inside and outside items are given in Table 1. The IN deduc-tion rule combines two inside items over smaller spans with a grammar rule to form an inside item over larger spans. The weight of the resulting item is the sum of the weights of the smaller inside items and the grammar rule. However, the IN rule also requires that an outside score in the coarse grammar 1 be computed before an inside item is built. Once constructed, this coarse outside score is added to the weight of the conclusion item to form the priority of the resulting item. In other words, the coarse outside score computed by the algorithm plays the same role as a heuristic in stan-dard A  X  parsing (Klein and Manning, 2003).
 Outside scores are computed by the OUT-L and OUT-R deduction rules. These rules combine an outside item over a large span and inside items over smaller spans to form outside items over smaller spans. Unlike the IN deduction, the OUT deductions only involve items from the same level of the hierarchy. That is, whereas inside scores wait on coarse outside scores to be constructed, outside scores wait on inside scores at the same level in the hierarchy.

Conceptually, these deduction rules operate by first computing inside scores bottom-up in the coarsest grammar, then outside scores top-down in the same grammar, then inside scores in the next finest grammar, and so on. However, the cru-cial aspect of HA  X  is that items from all levels of the hierarchy compete on the same queue, in-terleaving the computation of inside and outside scores at all levels. The HA  X  deduction rules come with three important guarantees. The first is a monotonicity guarantee: each item is popped off the agenda in order of its intrinsic priority  X  p (  X  ) . For inside items I ( e ) over edge e , this priority  X  p ( I ( e )) =  X  ( e ) +  X  ( e 0 ) where e 0 is the projec-tion of e . For outside items O (  X  ) over edge e , this priority is  X  p ( O ( e )) =  X  ( e ) +  X  ( e ) .
The second is a correctness guarantee: when an inside/outside item is popped of the agenda, its weight is its true Viterbi inside/outside cost. Taken together, these two imply an efficiency guarantee, which states that only items x whose intrinsic pri-ority  X  p ( x ) is less than or equal to the Viterbi inside score of the goal are removed from the agenda. 2.4 HA  X  with Bridge Costs The outside scores computed by HA  X  are use-ful for prioritizing computation in more refined grammars. The key property of these scores is that they form consistent and admissible heuristic costs for more refined grammars, but coarse out-side costs are not the only quantity which satisfy this requirement. As an alternative, we propose a novel  X  X ridge X  outside cost  X   X  ( e ) . Intuitively, this cost represents the cost of the best deriva-tion where rules  X  X bove X  and  X  X eft X  of an edge e come from G t , and rules  X  X elow X  and  X  X ight X  of the e come from G t  X  1 ; see Figure 2 for a graph-ical depiction. More formally, let the spine of an edge e = ( A t ,i,j ) for some derivation d be the sequence of rules between e and the root edge ( G t , 0 ,n ) . A bridge outside derivation of e is a derivation d of G  X  s 1 ...s i A t s j +1 ...s n such that every rule on or left of the spine comes from G , and all other rules come from G t  X  1 . The score of the best such derivation for e is the bridge out-side cost  X   X  ( e ) .

Like ordinary outside costs, bridge outside costs form consistent and admissible estimates of the true Viterbi outside score  X  ( e ) of an edge e . Be-cause bridge costs mix rules from the finer and coarser grammar, bridge costs are at least as good an estimate of the true outside score as entirely coarse outside costs, and will in general be much tighter. That is, we have In particular, note that the bridge costs become better approximations farther right in the sentence, and the bridge cost of the last word in the sentence is equal to the Viterbi outside cost of that word.
To compute bridge outside costs, we introduce bridge outside items  X  O ( A t ,i,j ) , shown graphi-cally in Figure 1(b). The deduction rules which build both inside items and bridge outside items are shown in Table 2. The rules are very simi-lar to those which define HA  X  , but there are two important differences. First, inside items wait for bridge outside items at the same level , while out-side items wait for inside items from the previous level. Second, the left and right outside deductions are no longer symmetric  X  bridge outside items can extended to the left given two coarse inside items, but can only be extended to the right given an exact inside item on the left and coarse inside item on the right. 2.5 Guarantees These deduction rules come with guarantees anal-ogous to those of HA  X  . The monotonicity guaran-tee ensures that inside and (bridge) outside items are processed in order of:
The correctness guarantee ensures that when an item is removed from the agenda, its weight will be equal to  X  ( e ) for inside items and  X   X  ( e ) for bridge items. The efficiency guarantee remains the same, though because the intrinsic priorities are different, the set of items processed will be differ-ent from those processed by HA  X  .

A proof of these guarantees is not possible due to space restrictions. The proof for BHA  X  follows the proof for HA  X  in Felzenszwalb and McAllester (2007) with minor modifications. The key property of HA  X  needed for these proofs is that coarse outside costs form consistent and ad-missible heuristics for inside items, and exact in-side costs form consistent and admissible heuris-tics for outside items. BHA  X  also has this prop-erty, with bridge outside costs forming admissi-ble and consistent heuristics for inside items, and coarse inside costs forming admissible and consis-tent heuristics for outside items. The performance of BHA  X  is determined by the efficiency guarantee given in the previous sec-tion. However, we cannot determine in advance whether BHA  X  will be faster than HA  X  . In fact, BHA  X  has the potential to be slower  X  BHA  X  builds both inside and bridge outside items under the target grammar, where HA  X  only builds inside items. It is an empirical, grammar-and hierarchy-dependent question whether the increased tight-ness of the outside estimates outweighs the addi-tional cost needed to compute them. We demon-strate empirically in this section that for hier-archies with very loosely approximating coarse grammars, BHA  X  can outperform HA  X  , while for hierarchies with good approximations, perfor-mance of the two algorithms is comparable.

We performed experiments with the grammars of Petrov et al. (2006). The training procedure for these grammars produces a hierarchy of increas-ingly refined grammars through state-splitting, so a natural projection function  X  t is given. We used the Berkeley Parser 2 to learn such grammars from Sections 2-21 of the Penn Treebank (Marcus et al., 1993). We trained with 6 split-merge cycles, pro-ducing 7 grammars. We tested these grammars on 300 sentences of length  X  25 of Section 23 of the Treebank. Our  X  X arget grammar X  was in all cases the most split grammar.
In our first experiment, we construct 2-level hi-erarchies consisting of one coarse grammar and the target grammar. By varying the coarse gram-mar from the 0-split (X-bar) through 5-split gram-mars, we can investigate the performance of each algorithm as a function of the coarseness of the coarse grammar. We follow Pauls and Klein (2009) in using the number of items pushed as a machine-and implementation-independent mea-sure of speed. In Figure 3, we show the perfor-mance of HA  X  and BHA  X  as a function of the total number of items pushed onto the agenda. We see that for very coarse approximating gram-mars, BHA  X  substantially outperforms HA  X  , but for more refined approximating grammars the per-formance is comparable, with HA  X  slightly out-performing BHA  X  on the 3-split grammar.

Finally, we verify that BHA  X  can benefit from multi-level hierarchies as HA  X  can. We con-structed two multi-level hierarchies: a 4-level hier-archy consisting of the 3-,4-,5-, and 6-split gram-mars, and 7-level hierarchy consisting of all gram-mars. In Figure 4, we show the performance of BHA  X  on these multi-level hierarchies, as well as the best 2-level hierarchy from the previous exper-iment. Our results echo the results of Pauls and Klein (2009): although the addition of the rea-sonably refined 4-and 5-split grammars produces modest performance gains, the addition of coarser grammars can actually hurt overall performance. This project is funded in part by the NSF under grant 0643742 and an NSERC Postgraduate Fel-lowship.

