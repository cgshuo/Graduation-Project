 Content Distribution Network (CDN) replicates the content from the place of origin to the replica servers scattered over the Internet and serves a request from a replica be configured in real-time due to the static deployment of replica servers. 
A number of previous works have studied how to efficiently and dynamically place web server replicas on CDN. RaDaR architecture [1] proposes a mechanism enable among them to distribute their load and to move replicas closer to the requesting cli-ents. Glen MacLarty et al. propose content delivery architecture [2] that allows indi-vidual users to define behavior by specifying content delivery or transcoding proxy-lets through user-defined policies. Much of traditional work in dynamic replication has concentrated on protocol aspects, wi thout considering the architecture. RaDaR proposes architecture for dynamic web replica tion, but to deploy replicas dynamically namic ability, but it X  X  designed for dynamic content delivery not for dynamic replicas deployment. 
In this paper, we propose a novel active CDN architecture  X  ACDN that allows rep-licas to be deployed dynamically according to server load or user defined policies. ACDN is designed and implemented based on active network to provide dynamic object replication and migration. While th e idea of dynamic replication is by no means new, the programmable character of active network makes the deployment and replication process more flexible and easy. To construct a capable CDN, we also s e r v e r . o v er t h e n e t w o r k accordi ng to t h e f o ll o w i n g r u l e s :  X  eac h area h a s at le a s t o n e act i v e n ode,  X  all acti v e n ode s i n t h e s a m e area are cl u s tered i n to a replica g r o u p,
What active node acts for a certain web server depends on the workload of web server and user defined polices. Normally, an active node works as a shared cache proxy serves clients in the same area. It ca n upgrade itself to be a replica server of a certain origin server passively or actively: Passive method: An active node installs and executes active code which causing the active node become a replica server. Active method: Each replica group keeps the load estimate of origin server. When the gathered message shows that the load of a certain origin server exceeding a threshold, stall relevant active code to let itself become a replica server. 3.1 GA-Based Replica Placement Algorithm Assume our concerned web server is S , S has k replicas, which are lo cated in different regions and provide services to the clients of their local regions. The objective of this problem is to optimize the performance of S by deploy k replicas in right place. The network is modeled by a connected and directed graph G(V,E) , where nodes). P = {P 1 ,P 2 ......P k } is the set of replica servers, which is subset of R . For each link E v u l  X  ) , ( , ) , ( v u d indicates the distance of the link. closer replica server of u, the access cost of client u to access S is defined as: Definition 2. The overall (anticipated) cost of all clients to access S is: 
The objective of replica placement problem is to minimize the overall cost of S , that is min(CS) . We design a simple but efficient code strategy which use bit strings to represent solution of the problem (chromosome) t  X  (t=1,2,...,T). t  X  ={R 1 , R then R i = 1, otherwise R i =0. 
Suppose Csmax is the maximize value of objective function among the chromo-some population, then we define the fitness function as follows: 
For replica placement problem, typical tw o parents crossover and mutation opera-tion may cause invalidated solution. For example, the total number of  X 1 X  in chromo-mutation operators to improve speed and efficiency. 
Single parent crossover and mutation operator selects and transforms a chromo-some into a new one. Once a chromosome is selected, the crossover operator simply picks crossover length and two crossover points randomly then exchanges the por-tions of the chromosome around the crossover points. For example, the origin chro-mosome is: 1 1 0 1 0 1 1 0,the crossover points are 2 and 6, the crossover length is 2. Then the crossover result is: 1 1 1 1 0 1 0 0. 
Compare with single parent crossover operator, single parent mutation operator cre-ates offspring quicker by randomly reverses portion of parent chromosome around mutation point. For example, the origin chromosome is: 1 1 0 1 0 1 1 0, the mutation points are 2 and 6, the mutation length is 4. Then the result is: 1 0 1 0 1 1 1 0. 3.2 Content Distribution Policy The primary difference between active network and tradition network is dynamic programmability. In ACDN, we introduce a policy-based content distribution method, which allows individual users to define behavior by specifying content distribution through user-defined policies. As we have mentioned in section 3.1, all replica servers chosen as replica server, an active node should download and execute relevant active code first to maintain content consistency with web server. We have implemented the following typical content distribution active codes in ACDN: 1. Periodic-polling: active node polls the origin server periodically and pull changes to contents it caches. Such mechanis m is often used by origin servers whose contents changing frequently. 2. Time-to-refresh (TTR) method [3]: The idea here is to provide user-desired fidel-they cache. 3.3 Request Routing and Server Selection Algorithm In ACDN, we propose an active anycast-like mechanism to achieve above operations. Miki Yamamoto et al. proposed a network paradigm for server load balancing using nowadays. Thus we propose a new active anycast mechanism, which use IPv4 unicast address instead of IPv6 anycast address. In this case, our approach can only be called as active anycast-like. 
After deploying replicas throughout Internet, a web server will send IP address of all replicas to active nodes. Active nodes keep the address mapping of web servers and their replicas, as well as measure and r ecord the workload of each replica. When a request to web server comes, the request and response process is depicted in Fig. 2. Step 1. Web server distributes active code to its replica servers. Step 2. Replicas execute active code to maintain consistency with origin server. Step 3. Client sends a name resolution query to Domain Name Server (DNS) and gets Step 4. Client sends a SYN packet whose de stination address field indicates web server Step 5. When the SYN packet arrives at an active node, it chooses an adequate server Step 6. When the selected replica server receives this SYN packet, it negotiates with The performance evaluation of proposed ACDN is realized on top of an active net-working environment ANTS [5]. In our simulation, we ignore the download time and the processing time of active code, and pay more attention to access latency of client which is affect by network delay and server delay. Furthermore, we make the following assumptions.  X  in the network, there are four replica servers (in cluding the web server) which  X  the server is modeled as M/M/1 queueing model with capacity of 1.0  X  access to servers are generated as Poisson process. 
Fig. 3 shows the result of performance simulation. Fig. 3(a) shows that with the increasing of the number of active nodes in network, the latency can be reduced to be routed to  X  X earer X  replica server by active node. When the number of active mainly depends on processing time of server than network delay. Fig. 3(b) shows the relation between resourse comsumption of web server and number of active nodes. Where resourse comsumption implys the combination of the comsumption of CPU and memory. The result is similar to Fig. 3(a), when the number of active nodes reachs 6, the resourse comsumption is stable, due to the fact that most requests have been routed to replica servers. From thes e results we can see that ACDN can reduce client latency, consumption of network bandwidth and web server by deploying active node reasonably. The ACDN project is in its early development stages. So far, we have implemented prototypes of ACDN. The programmable char acter of active node enable configure replica server on demand as well as deploy new algorithm and policy dynamically in ACDN. It expects that ACDN is more flexible and scalable than tradition CDN. And the algorithms designed for ACDN can also be used in traditional CDN.

