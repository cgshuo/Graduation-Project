 En tit y resolution, also kno wn as data mat hing or re ord link age, is the task of iden tifying and mat hing re ords from sev eral databases that refer to the same en tities. T radition-ally , en tit y resolution has b een applied in bat h-mo de and on stati databases. Ho w ev er, man y organisations are in-reasingly fa ed with the hallenge of ha ving large databases on taining en tities that need to b e mat hed in real-time with a stream of query re ords also on taining en tities, su h that the b est mat hing re ords are retriev ed. Example appli-ations in lude online la w enfor emen t and national se u-rit y databases, publi health surv eillan e and emergen y re-sp onse systems, nan ial v eri ation systems, online retail stores, eGo v ernmen t servi es, and digital libraries.
A no v el in v erted index based approa h for real-time en tit y resolution is presen ted in this pap er. A t build time, simi-larities b et w een attribute v alues are omputed and stored to supp ort the fast mat hing of re ords at query time. The presen ted approa h di ers from other approa hes to appro xi-mate query mat hing in that it allo ws an y similarit y ompar-ison fun tion, and an y `blo king' (en o ding) fun tion, b oth p ossibly domain sp e i , to b e in orp orated.

Exp erimen tal results on a real-w orld database indi ate that the total size of all data stru tures of this no v el index approa h gro ws sub-linearly with the size of the database, and that it allo ws mat hing of query re ords in sub-se ond time, more than t w o orders of magnitude faster than a tra-ditional en tit y resolution index approa h. The in terested reader is referred to the longer v ersion of this pap er [5 X . Categories and Sub je t Des riptors: H.3.3 [ Informa-tion Systems  X : Information Storage and Retriev al| Infor-mation Se ar h and R etrieval ; H.3.1 [ Information Systems  X : Information Storage and Retriev al| Content A nalysis and Indexing .
 General T erms: Algorithms, exp erimen tation, p erforman e. Keyw ords: Data mat hing, re ord link age, s alabilit y , sim-ilarit y query , appro ximate string mat hing, in v erted index-ing, phoneti en o ding.

In reasingly , man y appli ations that deal with data man-agemen t and analysis require data from di eren t sour es to b e mat hed and aggregated b efore they an b e used for fur-ther pro essing. The aim of en tit y resolution is to iden tify and mat h all re ords that refer to the same en tities. T e h-niques for mat hing re ords that orresp ond to the same en tities ha v e traditionally b een applied in the health se -tor and within the ensus [8 X . In reasingly , ho w ev er, en tit y resolution is no w b eing used within and b et w een man y or-ganisations in b oth the publi and priv ate se tors.
Be ause real-w orld data rarely on tain unique en tit y iden-ti ers a ross all the databases to b e mat hed, most en tit y resolution approa hes ompare re ords using the informa-tion a v ailable in the databases that an partially iden tify en tities, su h as their names, address details, or dates of birth. A similarit y is al ulated for ea h of the attributes ompared b et w een t w o re ords. These similarities are then used to lassify the ompared pairs of re ords in to mat hes, non-mat hes, or p ossible mat hes [8 X . The mat hing pro ess is often hallenging b e ause real w orld data is dirty [7 X .
Indexing is an imp ortan t asp e t of en tit y resolution, b e-ause p oten tially ev ery pair of re ords needs to b e ompared, resulting in a pro ess that is of quadrati omplexit y . Index te hniques, also kno wn as `blo king' [2 X , are ommonly used to redu e the n um b er of omparisons b et w een re ords.
The on tribution of this pap er is a no v el index approa h suitable for real-time en tit y resolution. The basi idea is to om bine similarit y al ulations used for appro ximate mat h-ing with in v erted index te hniques as ommonly used for large W eb sear h engines [3, 9 X . This approa h is onsis-ten tly o v er t w o orders of magnitude faster than the standard index approa h used in traditional en tit y resolution. An im-p ortan t asp e t of the approa h is that it allo ws an y simi-larit y omparison fun tion, and an y en o ding fun tion for blo king, b oth p ossibly domain sp e i , to b e in orp orated. Most other appro ximate mat hing approa hes dev elop ed in re en t times are limited to sp e i similarit y fun tions (su h as edit distan e, or Ja ard or osine similarit y), and there-fore ma y not b e suitable for en tit y resolution in appli ations that require sp e i en o ding and omparison fun tions.
The ob je tiv e of real-time en tit y resolution is to mat h a stream of query re ords on taining en tities as qui kly as p os-sible to one or sev eral (large) databases that on tain re ords ab out existing en tities. The resp onse time for mat hing a Figure 1: Example re ords with surname v alues and their Soundex en o dings, used to illustrate the t w o index approa hes in Figures 2 and 3. single query re ord has to b e as short as p ossible. The ap-proa h m ust fa ilitate appro ximate mat hing and e X  ien tly s ale-up to v ery large databases that on tain man y millions of re ords. The mat hing should generate a mat h s ore that indi ates the lik eliho o d that a mat hed re ord in the database refers to the same en tit y as the query re ord.
Real-time en tit y resolution has m u h in ommon with the fun tionalit y of large-s ale W eb sear h engines. Ho w ev er, the databases up on whi h en tit y resolution is ommonly ap-plied do not on tain W eb or text do umen ts that in lude a large n um b er of terms and th us pro vide a ri h v ariet y of features. Rather, these databases are made of stru tured re ords with w ell de ned attributes that often only on tain short strings or n um b ers, su h as the p ersonal details of p eo-ple (lik e name, address, or date of birth v alues).
In Se tion 2.1, the traditional standard blo king [2 X  ap-proa h to indexing for en tit y resolution is presen ted rst to illustrate the basi idea of using an in v erted index for en-tit y resolution. Based on this approa h, a similarit y a w are in v erted index approa h that is suitable for real-time en tit y resolution is then dis ussed in Se tion 2.2.

Both index approa hes presen ted here are based on a stan-dard in v erted index [9 X . The k eys of the index are (p ossi-bly en o ded) attribute v alues, and the orresp onding lists on tain the re ord iden ti ers of all re ords that ha v e this (en o ded) v alue. Tw o t yp es of fun tion are required for b oth index approa hes. The rst are (phoneti ) en o ding fun tions that group, or blo k [2 X , similar attribute v alues together. F or string attributes, su h as p ersonal names or street and suburb names, phoneti en o dings lik e Soundex , NYSIIS or Double-Metaphone are ommonly used [4 X .

The se ond t yp e of fun tions onsists of similarit y om-parisons that al ulate the similarit y b et w een t w o attribute v alues, normally su h that 1 : 0 orresp onds to an exa t mat h and 0 : 0 to a total non-mat h [4 X . Note that for di eren t at-tribute t yp es (strings, dates, n um b ers, et .) di eren t en o d-ing and omparison fun tions are usually emplo y ed. Often domain sp e i fun tions are used, for example in a date of birth omparison a mismat h in the mon th or da y of birth v alues is ommonly onsidered to b e less sev ere than a mis-mat h on the y ear of birth v alue.

The real-time en tit y resolution pro ess as dis ussed here onsists of t w o phases. First, in the build phase, the index is generated using a database that on tains a p ossibly large n um b er of leaned re ords that are assumed to refer to re-solv ed en tities. On e built, the index is querie d in the se ond phase with a stream of query re ords. These re ords an ei-ther refer to an en tit y stored in the index, or to a new and unkno wn en tit y . It is assumed, ho w ev er, that query re ords Figure 2: Standard blo king index resulting from the example re ords giv en in Figure 1. an on tain v ariations and errors, or wrong, out-of-date or missing v alues. Missing v alues an b e handled b y repla ing them with a sp e ial tok en (that is outside of the used hara -ter set) in b oth database and query re ords. F or ea h query re ord, the mat hing pro ess returns a rank ed list of p oten-tial mat hes and their similarities with the query re ord. A mat h is su essful if one of the top rank ed re ords refers to the same en tit y as the query re ord.
Standard blo king is the traditional approa h used for bat h-orien ted en tit y resolution. The basi idea of this ap-proa h is to insert re ords in a database in to blo ks a ord-ing to the v alues of sele ted attributes [2 X , as sho wn in Fig-ure 2. Ea h in v erted index list orresp onds to a blo k, with the k ey b eing the (en o ded) attribute v alue, while the orre-sp onding list on tains the re ord iden ti ers of all re ords in this blo k. Man y re en tly dev elop ed indexing approa hes for en tit y resolution an b e built on top of an in v erted index, in luding anop y lustering [6 X , the sorted neigh b ourho o d approa h [7 X , and su X x-arra y blo king [1 X .

In the build phase of standard blo king the in v erted index data stru ture is generated. A separate index will b e built for ea h re ord attribute that is used in the en tit y resolution pro ess. Ea h re ord will b e inserted in to one list in ea h in v erted index a ording to its re ord attribute v alues. In order to redu e omputational e ort, rep eated omputation of the same en o ding an b e prev en ted b y a hing attribute v alues and their en o dings [5 X .

The query phase onsists of t w o steps. First, the en o ded attribute v alues (p ossibly a v ailable in the en o dings a he) of the query re ord are used to retriev e the re ord iden ti er lists from the orresp onding blo ks in the in v erted index. The union of these lists on tains the iden ti ers of all andi-date re ords. In the se ond step, attribute v alues from an-didate re ords are ompared with the orresp onding v alues of the query re ord. The o v erall similarit y is al ulated from all ompared attributes for ea h andidate re ord and added to the list of mat hes. Finally , this list is sorted so that the largest similarities and orresp onding andidate re ords are at the b eginning, and the sorted list is returned.
The basi idea of this index is to pre-al ulate the similar-ities b et w een all unique attribute v alue om binations within ea h blo k on e during the build phase, so they don't need to b e al ulated for ev ery query re ord.

As sho wn in Figure 3, three in v erted index data stru -tures are required for this approa h. The re ord iden ti er index, RI , is similar to the in v erted index used in standard blo king, but the k eys in this index are the a tual attribute v alues and not their en o dings. The blo k index, BI , rep-resen ts the blo ks. It has en o ded attribute v alues as k eys and the a tual attribute v alues in the orresp onding in v erted Figure 3: Similarit y-a w are index resulting from the example re ords from Figure 1. The similarit y index is sho wn in the top left, the blo k index in the middle righ t, and the re ord iden ti er index at the b ottom. index list. Ea h list in BI therefore on tains all attribute v alues that are in the same blo k. The similarit y index, SI , stores the al ulated similarities of pairs of attribute v alues that are in the same blo k. Sp e i ally , for ea h attribute v alue, it on tains a list of other attribute v alues in the same blo k and the similarities b et w een these t w o v alues.
Algorithms 1 and 2 des rib e the similarit y-a w are index approa h. Re ord attributes are denoted b y r :i , with r : 0 b eing an iden ti er that allo ws unique iden ti ation of ea h re ord. A list with k ey k in an in v erted index X is denoted with X [ k  X , an empt y index b y fg , and an empt y list b y ().
An imp ortan t asp e t of Algorithm 1 is that the steps in lines 6 to 17 only need to b e done on e for ea h attribute v alue r :i . The pro essing of ea h r :i requires the al ula-tion of its en o ding and adding r :i in to BI , the al ulation of similarities s with all other attribute v alues so far stored in the same blo k (line 12), and storing them in the orre-sp onding similarit y index lists (lines 16 and 17).
During the query pro ess, sho wn in Algorithm 2, an a u-m ulator M , a data stru ture that on tains re ord iden ti ers and their (partial) similarities with the query re ord, is gen-erated [9 X . Tw o p ossible ases an o ur for ea h attribute of the query re ord q . The rst ase is when an attribute v alue is a v ailable in the index and its similarities with other attribute v alues ha v e b een al ulated in the build phase. In this ase re ord iden ti ers and pre-al ulated similarities are retriev ed from RI and SI , resp e tiv ely , and inserted in to the a um ulator M . The se ond ase o urs when an attribute v alue in the query re ord q is not a v ailable in the index. This will require that the similarities need to b e al ulated (lines 13 to 19), whi h is similar to the query phase of the standard blo king index. The nal step in the query phase is to sort the a um ulator M su h that the largest similarities are at the b eginning.

The e X  ien y of the similarit y-a w are index approa h de-p ends up on ho w man y attribute v alues of a query re ord q are already stored in the index (in whi h ase no similari-ties need to b e al ulated) ompared to ho w man y are new. With in reasing size of a data set D , and esp e ially as D is o v ering a larger p ortion of a p opulation, one w ould assume that a larger p ortion of v alues w ould b e stored in the index, thereb y impro ving the e X  ien y of this index approa h.
The prop osed similarit y-a w are index approa h has b een ompared exp erimen tally with the standard blo king index. The exp erimen ts w ere ondu ted on an otherwise idle Lin ux serv er on taining t w o In tel Xeon quad-ore 2.33 GHz 64-bit CPUs and 8 Gigab ytes of main memory .

A data set on taining 6,917,514 re ords w as used for the exp erimen ts. It on tains surnames, p ost o des and suburb (to wn) names sour ed from an Australian telephone dire -tory , orresp onding to all en tries in Australian telephone b o oks in late 2002. 1 A giv en name attribute w as added to this data set based on a list on taining 80,584 unique giv en names and their frequen ies, as supplied to the authors b y an Australian go v ernmen t agen y .
 Both index approa hes w ere implemen ted in Python 2.5.2. As en o ding fun tions the Double-Metaphone [4 X  algorithm w as applied on the three name attributes, while for the p ost-o de attribute all re ords with the same last three digits w ere inserted in to the same blo k. The Winkler [4 X  appro ximate string omparison fun tion w as used for the three name at-tributes, while for p ost o des the similarit y w as al ulated as the ratio of mat hing digits.

T o ev aluate the s alabilit y of the t w o index approa hes, test data sets of four di eren t sizes w ere reated, on taining 10%, 40%, 70% and 100% of the re ords in the full data set. The full data set w as split in to ten sets of equal size, and from ea h of these ten sets ten query re ords w ere randomly sele ted, giving one h undred base query re ords in total. T o assess the mat hing qualit y , four additional query sets of one h undred re ords ea h w ere reated b y mo difying one, t w o, three or four attribute v alues p er re ord, resp e tiv ely . The mo di ations, while done man ually , w ere based on the authors' exp erien e with real-w orld name data.

F or ea h of the data sets, the amoun t of main memory used b y its index w as re o ded. During the query phase, the time for mat hing ea h query re ord w as measured, as w ell as whether the top rank ed returned re ord w as a true mat h. A ura y w as al ulated as the p er en tage of true mat hes in ea h of the query sets. Exp erimen ts w ere rep eated ten times ea h and a v erage results are rep orted.
As the left graph in Figure 4 sho ws, the amoun t of memory required b y b oth index approa hes gro ws sub-linearly with the size of the data sets, b e ause as the data sets get larger, few er new attribute v alues will o ur that need to b e stored. The rate of gro wth for memory required dep ends up on the distribution of attribute v alues in the data set to b e indexed. F or the data sets used in the exp erimen ts, the similarit y-a w are index requires less than t w o times as m u h memory on a v erage as the standard blo king index.

An imp ortan t asp e t of the similarit y-a w are index is its fast query mat hing time. As an b e seen in the middle graph in Figure 4, this no v el index approa h a hiev es a v er-age query times b elo w 0 : 1 se onds ev en for the index based on the full data set on taining nearly 7 million re ords. 1 http://www.australiaondis . om Ov er the data sets of di eren t sizes, the query time for the similarit y-a w are index is b et w een 140 and 150 times faster than the standard blo king index. Ho w ev er, for b oth index approa hes, the query time urren tly in reases linearly with the size of the indexed data sets.

The righ t graph in Figure 4 sho ws the mat hing a ura y results for the full test data set with v arying n um b er of mo d-i ations p er re ord. As an b e seen, the mat hing a ura y is redu ed for b oth index approa hes with an in reased n um-b er of mo di ations. This is to b e exp e ted, as with more mo di ations in a re ord the lik eliho o d that another re ord (with similar attribute v alues) b e omes the b est mat hing re ord is in reased. A more detailed dis ussion of this topi an b e found in the longer v ersion of this pap er [5 X .
A no v el index approa h for real-time en tit y resolution has b een presen ted and ev aluated exp erimen tally on a real-w orld data set. The exp erimen ts sho w ed that this approa h an mat h query re ords more than t w o orders of magnitude faster than a basi index approa h traditionally used for en tit y resolution. F uture w ork will in lude impro ving the a ura y of the prop osed approa h, a prop er analysis of its time and spa e omplexit y , impro ving s alabilit y and query mat hing time, and ondu ting exp erimen ts on a v ariet y of other large databases. [1 X  A. Aiza w a and K. Oy ama. A fast link age dete tion s heme for [2 X  R. Baxter, P . Christen, and T. Ch ur hes. A omparison of fast [3 X  R. Ba y ardo, Y. Ma, and R. Srik an t. S aling up all pairs [4 X  P . Christen. A omparison of p ersonal name mat hing: [5 X  P . Christen, R. Ga yler, and D. Ha wking. Similarit y-a w are [6 X  W. Cohen and J. Ri hman. Learning to mat h and luster large [7 X  M. A. Hernandez and S. J. Stolfo. The merge/purge problem for [8 X  W. E. Winkler. Metho ds for ev aluating and reating data [9 X  J. Zob el and A. Mo at. In v erted les for text sear h engines.
