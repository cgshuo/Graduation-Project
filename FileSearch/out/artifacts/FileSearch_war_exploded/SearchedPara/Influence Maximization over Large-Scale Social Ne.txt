 Information di ff usion in social networks is emerging as a promising solution to successful viral marketing, which relies on the e and e ffi cient identification of a set of nodes with the maximal social influence. While there are tremendous e ff orts on the development of social influence models and algorithms for social influence max-imization, limited progress has been made in terms of designing both e ffi cient and e ff ective algorithms for finding a set of nodes with the maximal social influence. To this end, in this paper, we provide a bounded linear approach for influence computation and influence maximization. Specifically, we first adopt a linear and tractable approach to describe the influence propagation. Then, we develop a quantitative metric, named Group-PageRank, to quickly estimate the upper bound of the social influence based on this lin-ear approach. More importantly, we provide two algorithms Linear and Bound , which exploit the linear approach and Group-PageRank for social influence maximization. Finally, extensive experimental results demonstrate that (a) the adopted linear approach has a close relationship with traditional models and Group-PageRank provides a good estimation of social influence; (b) Linear and Bound can quickly find a set of the most influential nodes and both of them are scalable for large-scale social networks.
 F.2.2 [ Analysis of Algorithms and Problem Complexity ]: Non-numerical Algorithms and Problems; H.2.8 [ Database Manage-ment ]: Database Application X  Data Mining Algorithms, Experimentation Social Influence; Linear Approach; Bound; Viral Marketing  X  Contact Author.

The di ff usion of influence in social networks has provided oppor-tunities for viral marketing, which aims at finding a set of individ-uals in the network to maximize the word-of-mouth propagation of a brand [24]. In general, there are two challenges for the successful viral marketing in social networks. First, how to model the influ-ence di ff usion process in the network? Second, how to design an e ffi cient algorithm to identify which set of nodes to target in the network based on the learned di ff usion models [7]?
In the literature, many e ff orts have been made on the develop-ment of influence propagation models for social influence maxi-mization. For instance, both the Independent Cascade (IC) model [14] and the Linear Threshold (LT) model [20] were developed to model the influence propagation. While there are high expectations on e ffi cient and scalable influence computing, limited progress has been made in terms of designing both e ffi cient and tractable algo-rithms for finding a set of nodes with the maximal social influence. One of the main reasons is that the existing influence models, such as the IC and LT models, usually require to run Monte-Carlo simu-lation for a significant number of times before the nodes X  influence can be computed. This is very time-consuming [10] and is not s-calable for large-scale social networks. As a result, some compu-tationally e ffi cient heuristic algorithms based on existing influence models, such as DegreeDiscountIC [10] and PMIA [9], have been proposed to solve the social influence maximization problem for viral marketing. However, as a tradeo ff , these heuristic approaches usually sacrifice the e ff ectiveness.

To this end, we provide a bounded linear approach for e ff tive and e ffi cient influence computation and influence maximiza-tion. Specifically, our method is based on a linear approach which was preliminarily proposed in [41] for describing the social influ-ence propagation. The unique perspective is that this linear ap-proach assumes the influence flowing into each node is a linear combination of the influence from its neighbors. Therefore, the influence of an arbitrary node set can be linearly computed in a closed form. For leveraging this linear influence approach to the task of social influence maximization, in this paper we first define a quantitative metric, called Group-PageRank. Unlike traditional PageRank algorithm which can only be used to compute the in-fluence of an individual node, Group-PageRank could estimate the influence strength between any node sets in nearly constant time. We show that Group-PageRank is essentially an upper bound of the influence spread under the linear approach. Then, based on linear approach and Group-PageRank, we design two greedy algorithms for viral marketing campaign, Linear (based on the original lin-ear approach) and Bound (based on Group-PageRank), which can e ffi ciently find the node set with maximal social influence. Final-ly, we perform extensive experiments on real-world social network datasets. The experimental results show that: (a) The adopted lin-ear approach could be used to approximate two traditional influ-ence models, i.e., the IC model [14] and the Stochastic model [2], and Group-PageRank is a good estimation of social influence under the linear approach; (b) For social influence maximization, Linear and Bound can find influential nodes in an e ffi cient way. Actually, Linear is more e ff ective while Bound is more e ffi cient.
In summary, the main contributions of this paper are as follows. 1. We discover an upper bound, named Group-PageRank (which 2. We design two greedy algorithms, Linear and Bound ,byex-3. We experimentally show that the linear influence modeling
We discuss the related works on social influence analysis models and the existing strategies for social influence maximization. Social Influence Models. Social influence modeling has been wide-ly studied in the literature. Some work focuses on inferring the in-fluence probabilities between nodes [17, 36]. For instance, Anag-nostopoulos et al. [4] proved the existence of social influence by statistical tests. Gomez-Rodriguez et al. [15] tried to reconstruc-t the network over which the influence propagates. In addition, there are several models to describe the entire propagation process. For instance, Granovetter et al. [20] proposed the Linear Threshold (LT) model, while Goldenberg et al. [14] proposed the Independent Cascade (IC) model. Let X  X  use IC model for explanation. Under IC model, in each iteration, the activated / influenced nodes have a single chance to influence their neighbors independently with a certain probability. This iterative propagation process will not stop until there is no newly influenced node in an iteration. The IC mod-el with each link sharing the same propagation probability is called the Uniform IC Model, and the one with non-uniform edge weights is called the Weighted Cascade (WC) Model [24].

Both IC model and LT model are descriptive models, and we usu-ally have to run the Monte-Carlo simulation for su ffi ciently many (e.g., 20,000) times to estimate the nodes X  influence. This is very time-consuming and not applicable to large-scale social network-s. Thus, Aggarwal et al. [2] proposed a stochastic model to ad-dress this scalability issue. Meanwhile, Kimura et al. [25] proposed Shortest-Path model (SPM), Zhang et al. [46] designed probabilis-tic solutions and Yang et al. [43] designed Gauss-Seidel (GS) algo-rithm to approximate the influence spread under the IC model with some specific constraints, e.g., the propagation probabilities should be very small. In another direction, PageRank [34] and random walk related algorithms [30, 41], which are quite e ffi cient, have al-so been proposed for modeling influence propagation and ranking nodes [38]. For instance, by connecting PageRank based methods with the existing social influence analysis, Xiang et al. [41] pro-posed a linear social influence modeling approach, which could be viewed as PageRank with priors by fixing a prior probability describe with how much probability the node i spreads influence to its neighbors. Here, the prior  X  i functions like a supervised label [5] for label propagation and node classifications [48] in the graph. Ac-tually, the defined influence propagation process is similar to that of the Credit Distribution model [18]. However, the further relation-ship between linear approach and the traditional influence models (e.g., the IC model) is still not carefully studied. Meanwhile, how to use this linear approach for the social influence maximization problem is also underexplored.

Recently, Easley et al. [13], Aggarwal et al. [1] and Chen et al. [7] summarized and generalized many research aspects of social networks. More importantly, they demonstrated that social influ-ence can be further leveraged to deal with some of the real-world application problems (those from online marketing or social secu-rity). For instance, exploiting social influence to make better node ranking [30] and more accurate link recommendation [42]. Social Influence Maximization. Among these applications, viral marketing campaign is an important research branch. This appli-cation is usually formalized as the social influence maximization problem [7], targeting at finding a small set of influential individu-als (called seed nodes) from the network. By triggering a cascade of information propagation that people recommend the product to their friends and the friends X  friends, we hope that the product will be adopted by the maximum number of individuals.

With the help of existing social influence models, there are many works which aim at solving this problem, and to the best of our knowledge, social influence maximization could be traced back to Domingoes and Richardson [12, 35]. Kempe et al. formulated it as a discrete optimization problem and they proved that the opti-mization problem is NP-hard, and presented a greedy approxima-tion algorithm which guarantees that the influence spread result is within (1  X  1 / e )  X  0 . 63 of the optimal result [24]. To address the ine ffi ciency issue, Leskovec et al. [27] presented a  X  X azy Forward X  scheme (called CELF optimization) which takes advantage of the submodular property of the influence maximization objective to re-duce the number of evaluations on the influence spread of individ-uals. Recently, this scheme is further improved by the CELF optimization (exploiting the submodularity to avoid unnecessary re-computation of the marginal gains) [19] and the StaticGreedy algorithm (using snapshots to avoid huge number of Monte-Carlo simulations) [11]. To address the scalability issue, Chen et al. pro-posed several heuristic methods, including DegreeDiscountIC [10] and PMIA [9], to approximate the social influence propagation using local arborescence structures of each individual. Wang et al. [40] presented a community-based greedy algorithm to find the top-K influential nodes from the selected potential communities. Jung et al. [23] proposed the IRIE algorithm which integrates the advantages of influence ranking (IR) and influence estimation (IE) methods for influence maximization. Similar to our work, Zhou et al. found an upper bound for the influence spread function under IC model [47]. However, their method still requires a number of Monte-Carlo simulations for choosing seed sets.

In summary, a common theme behind the above heuristics is that they avoid Monte-Carlo simulations by exploiting specific aspects of the graph structure and the social influence model to significant-ly speed up the influence computations [7]. In addition, many re-searchers also consider some constraints in practice. For instance, Lee et al. [26], Chen et al. [8], and Goyal et al. [16] all included time constraints into their approximation algorithms. Guo et al. s-tudied the problem of finding the top-K most influential nodes to the target user [21] and Tang et al. [37, 32] modeled social influ-ence at the topic level. Bharathi et al. [6], Wang et al. [39] and Li et al. [31] focused on the influence di ff usion or maximization on the competitive, heterogeneous and signed networks, respectively. One step further, Yu et al. [44] studied the way of parallelizing the so-cial influence maximization computation and Liu et al. [33] tried to figure out the  X  X ndependent influence X  of each selected seed. Some of the general techniques and issues with respect to social influence maximization problem were discussed by Chen, Lakshmanan, and Castillo in Chapter 3 of Ref. [7].

We first present the preliminaries of the linear approach for mod-eling influence propagations [41]. Since the influence computation is still not e ffi cient enough for the task of social influence max-imization, we find an upper bound, called Group-PageRank, to quickly estimate the social influence between any node sets. For better illustration, Table 1 lists some mathematical notations.
As already mentioned, traditional influence propagation models are usually descriptive and we have to run Monte-Carlo simulation for a significant number of times before the nodes X  influence can be computed. This is very time-consuming, especially for the task of social influence maximization, as we have to compute the so-cial influence for many di ff erent candidate sets. Thus, we refer to a linear approach for e ffi cient social influence computation [41]. In-deed, to show the rationality of adopting the linear approach, the evidence of the close relationship between this approach and two of the existing models is included in the following experiments. We could model a social network as a graph G = ( V , A , T ). Here, V = { 1 , 2 ,..., n } is the set of nodes, A is the set of edges, and T = [ t ij ] is the influence transition probability from node i to node j , where t ij is a non-zero value, 0 &lt; t ij  X  1if( j and 0 otherwise. An example G = ( V , A , T ) is given in Fig. 1, where V = { 1 , 2 , 3 , 4 } , A = { (1 , 4) , (3 , 1) , (3 [[0 , 0 , 0 . 1 , 0] , [0 , 0 , 0 . 1 , 0] , [0 , 0 , 0 , 0 . representation. The transition probabilities could be pre-learned [17]. Thus, we assume matrix T is known and n
Given a social network G , let X  X  consider a non-empty set of n-odes, S (  X  X  ), and call it the influencer-set. Then we show how to compute the expected social influence of S by the linear influence modeling approach. Actually, it follows two assumptions given in the literature [1, 14, 18, 20]: (1) A node in the influencer-set the 100% probability to be influenced by S itself, 1 i.e., each node the prior probability  X  i = 1, since it is easy to be accepted and the linear approach performs well under this setting. is on the same line with others in S ; (2) The probability that a node not in S gets influenced depends on its neighbors X  influence. Based on the two assumptions, we denote f S X  j as the final value that a node j  X  X  is influenced by the influencer-set S .

D efinition 1. The influence of the influencer-set S on a specific node j in G, denoted by f S X  j , is defined below. Here, d j is the damping factor of j for influence propagation, in the range of (0 , 1) .

The unique feature of this approach is that the influence to a node j is a linear combination of the influence coming from j  X  X  neighbors if j S (Eq. (2)). It leads to linear e ffi cient iterative algorithms in computing influence propagation. For the damping factor d smaller d j is, the more influence will be blocked by node j .For simplicity, the same d j is chosen for each node [34].

Meanwhile, the influencer-set S can influence a specific subset of nodes T (  X  G ). We denote the influence from S to T as f and it is computed as follows. By Eq. (3), the influence from S to T is the total influence from S to each node in T . Here, S can be a single node in G , and can be the entire node set of G , i.e., V . In the following, we use f = [ f S X  computation of f S X  i can be finished e ffi ciently as shown in [41]. Specifically, for node j  X  X  , f S X  j = 1. Then, for node j influence f S X  j can be computed iteratively, e.g., f S X  j final solution f S X  j quickly under the following condition.
It is worth noting that Eq. (4) is the Gauss-Seidel convergence condition for Eq. (2). Since n As a result, the influence of S can be solved in O ( |A| ) time.
From Definition 1, we can see that linear approach is a random-walk-like model and this is similar to PageRank [34] (their di ences will be shown later). Actually, Ref. [41] has connected these two types of models together and demonstrated that PageRank val-ue could be used to form upper bounds for the influence of a single node under linear influence approach. However, that upper bound is not good enough for influence maximization. One step further, in this paper, we find another upper bound, called Group-PageRank, which can be viewed as the PageRank value of a set of nodes.
First, we explain why linear influence approach needs an upper bound. By Definition 1, when given S , the influence computation for both f S X  X  and f S X  j could be done in linear time (in O ( and thus significantly outperforms the traditional models. However, this linear approach still can not meet the demand when computing f
S X  X  for any possible influencer-set S and influencee-set T a large-scale social network, e.g., with billions of nodes. As we have to spend O ( |A| ) time for each S and T , and there may be too many S and T candidates (i.e., 2 |V| for S ). Thus, to reduce the time complexity, we propose Group-PageRank.
Then, we introduce Group-PageRank via PageRank. Follow-ing [22, 34], PageRank (topic-sensitive PageRank) is computed by otherwise. In terms of PageRank, to compute influence propagation in G = ( V , A , T ), we need to replace the w ji by t ij probability on each edge ( j , i )is t ij , that is fPR i indicates the node i  X  X  importance with respect to social in-fluence and we call it the influence-PageRank of node i to distin-guish it from other applications. Clearly, fPR i for node i can be solved in O ( |A| ) time. Let fPR = [ fPR 1 , fPR 2 ,..., for i = 1 , 2 ,..., n , becomes Eq. (6). where e T = [ e 1 , e 2 ,..., e n ] , and e i is 1 if i  X  X  Similar to PageRank [34], fPR could be solved in O ( |A| ) time.
Next, let X  X  go back to the linear influence approach, and the Def-inition 1 can be represented by one single equation as below. h S , j is equal to 0 if j S , and is a number to ensure f otherwise. By summarizing Eq. (7), for i = 1 , 2 ,..., n ,wehave
Now, considering Eq. (6) for influence-PageRank and Eq. (8) for linear influence approach, we could find that there are two matrices ( I sides this, the significant di ff erence is that no entry of fPR is given before running Eq. (6) (i.e., PageRank), while in linear approach (Eq. (8)) some of the values (for those nodes belonging to are fixed as the priors (i.e., 1 in this paper). In summary, with a giv-en matrix ( I  X  d T )  X  1 and a given vector e T , influence-PageRank will output the value in each entry of fPR . In contrast, with a given matrix ( I  X  d T )  X  1 and some priors in f S , linear approach tries to figure out other values in f S . Then, a question arises: how to quantitatively measure the connection between linear influence and influence-PageRank? To address this question and to introduce Group-PageRank, we first rewrite Eq. (3) as f S X  X  = f S e combining it with Eq. (8) and Eq. (6), we have which shows that the influence from S to T by Definition 1 is pro-portional to a linear combination of the influence-PageRank. Fur-thermore, we have P roof S ketch : Let  X = ( I  X  d T ) and P = ( I  X  d T )  X  1 . Then, f = ( I  X  d T )  X  1 h S = Ph S . Recall that for each node i We have P SS h SS = e and h SS = P  X  1 SS e . P SS is the matrix reduced from P by removing its rows and columns that do not correspond to the members in S , and h SS is reduced from h S by removing the entries that do not correspond to the members in S . By rearranging the rows and columns in  X  , Based on the linear algebra theory, we have h negative matrix, 2 we have h SS  X   X  SS e .
 Thus, when i  X  X  , h S , i  X  1  X  d  X  k  X  X  t ki , and Lemma 1 holds. D efinition 2. We define our Group-PageRank from S to T as And we have the following theorem.

T heorem 1. For the influence from S to T ,f S X  X   X  GPR ( S , T P roof S ketch : Based on Eq. (9) and Lemma 1, Actually, GPR is a generalization of the influence-PageRank. When |S| = 1, GPR ( S , T ) is proportional to fPR i ; When GPR ( S , T ) is essentially the collection of each single influence-PageRank (for the nodes in S ) with a  X  X iscount X  by which we mean that the mutual influences between the nodes in S are removed when estimating the influence spread of S . Therefore, GPR can es-timate the importance of any non-empty set of nodes which can be either a single node or a set of nodes. From Eq. (10), we can see that GPR is a combination of the basic elements of fPR . This implies the following: to get GPR ( S , T ) for any S , we can compute the fPR in advance (in O ( |A| ) time) and maintain it in a look-up table with the size of |V| , and then we only need to take O ( |S| of GPR ( S , T ) can be done in near constant time with limited space consumption (as S are usually small, e.g., |S| = 100).

Thus, if we use GPR ( S , T ) as the estimation for f S X  X  fluence computation will then meet the e ffi ciency demand of large-scale online social networks. Group-PageRank has two properties.  X 
S S is an M-matrix, and its inverse (denoted as N = [ n ij is nonnegative. Let K = X  S S N  X  SS = [ k ij ], there is k n In this section, we show how the linear approach and Group-PageRank can be used to support viral marketing by addressing the influence maximization problem. This aims at finding a set of in-fluencer nodes (e.g., S ) to maximize the product X  X  word-of-mouth propagation in the entire or a part of the network. Formally, the influence maximization problem, which is NP-hard [24], is defined as follows.
 where K is the desired seed set size (e.g., 50). In the following, we use T and V interchangeably, because usually we have T = V
We adopt the greedy framework proposed by Kempe et al. [24], and the entire process is shown in Algorithm 1. Initially, each iteration, it adds a new node s into S if s maximizes the in-crement on influence, s = arg max s  X  X \S  X  s ( S , T ), e.g., f
S X  X  s } X  X   X  f S X  X  . This iterative process will continue until the seed set size is up to K .

Algorithm 1: GreedyFramework 1. S =  X  ; 2. s = arg max s  X  X \S  X  s ( S , T ); 3. S = S X  X  s } ; 4. If |S| &lt; K , then go back to step2; else terminate.
For Algorithm 1, we propose two ways to compute  X  s ( S , T Linear or by Bound .
By Linear , the time cost of  X  I s ( S , T )is O ( |A| ) due to the compu-tation of f S X  X  s } X  X  .By Bound , i.e., Group-PageRank, with the help of Eq. (10), we have
Since fPR s for each s is a basic element that can be computed in advance for any S and s , the computation of  X  s ( S , T ) in Eq. (11) only takes O ( |S| ) time. Moreover, the marginal influence incre-ment  X  s ( S , T ) satisfies the submodular property (proof is shown in the following two corollaries), and combining with the monotonic-ity property (e.g., f S X  X  s } X  X   X  f S X  X  ) we could guarantee that the greedy framework is lazy-forward [27]. Actually, the monotonic-ity property strictly holds for the linear approach, and we can on-ly prove that the monotonicity property of Group-PageRank holds when d  X  0 . 5 (Ref. [38] has presented a similar proof strategy). However, the real-world influence transition probabilities (e.g., t are quite small [43, 47] (especially for those between the seed n-odes, as the seeds are usually far away from each other), and the monotonicity property generally holds even when 0 . 5 &lt; Meanwhile, considering the positive experimental results, in this paper we simply treat Group-PageRank as monotone and leave the detailed discussion for future work. In the following, let X  X  denote the influencer-set S in iteration k as S k .
 C orollary 1.
 . P roof S ketch 3 :
First, we show Eq. (8) is a linear function. Detailed proof is omitted due to the limited space.
 Second, based on the linear function, we show f S  X  j  X  f where S = S X  X  t } and t can be an arbitrary node.
 Finally, because we have (
S
Thus,  X  I s ( S 0 , T )  X   X  I s ( S 1 , T )  X  ...  X   X  I s C orollary 2.
 .
 P roof : First, we prove GPR ( S X  X  v } , T )  X  GPR ( S , T ) { v } , T )  X  GPR ( S , T ), where S X  X  , arbitrary node v S .
GPR ( S X  X  v } , T )  X  GPR ( S , T ) Then, because we have
Thus,  X  II s ( S 0 , T )  X   X  II s ( S 1 , T )  X  ...  X   X  II
Based on Corollary 1 and Corollary 2, we propose a lazy-forward greedy framework for social influence maximization, as shown in Algorithm 2. Specifically, we use  X  s for both the upper bound and the real value of the marginal influence increment  X  s ( S , T meanwhile, we use  X  max and s max for the maximal  X  s ( S , T its corresponding node s , respectively. This algorithm starts with S =  X  (initial  X  s with the maximal  X  s ( S , T ) into S until the size of to K . We use a priority queue such that  X  s  X   X  s + 1 in the queue. For each node s , we compare its upper bound  X  s with  X  max are two cases. First, if  X  s &gt;  X  max , we compute its real influence increment for s (either by Linear or by Bound ). If its real increment is still larger than  X  max , the node s is truly a better one, and then we use this as s max and store the real increment into  X  max  X  the current s max for  X  max  X   X  s  X   X  s + 1 , and thus we find the s and break the loop. We only need to add s into S , and add the real increment by s max into f S X  X  . Finally, we reset  X  s max remove node s max from the candidate list.
 In the lazy-forward greedy framework, an influencer-seed set with the maximum influence propagation will be found e ffi ly. We call Algorithm 2 the Linear algorithm if it computes the real increment  X  s by Linear (see Function GetDeltaI), and call Al-gorithm 2 the Bound algorithm if it computes  X  s by Bound (see Function GetDeltaII).
Algorithm 2: LinearFramework( G , K ,  X  ) input : G ( V , A , T ) , K , X , output : S S =  X  ;
Compute influence-PageRank vector fPR = [ fPR 1 ,..., fPR (see Section 3.2); for each node s in G do while |S| &lt; K do return S ;
In our empirical studies, we focus on validating the following performance: (1) The e ff ectiveness and e ffi ciency of the adopt-ed linear social influence modeling approach compared with two of the existing influence models, and the e ff ectiveness of Group-PageRank (Section 5.1); (2) The social influence maximization re-sults of our two algorithms ( Linear and Bound ) compared with some of the state-of-the-art solutions (Section 5.2).

The four real-world social network datasets we used are: Face-book [29] which is sampled from Facebook.com 4 , ca-HepPh [28] which is a collaboration network from the e-print arXiv covering collaborations between authors whose papers are submitted to High Energy Physics -Phenomenology category 5 , web-NotreDame [3] which is a webpage link network where nodes represent pages from University of Notre Dame and directed edges represent hyperlinks between them 6 , and LiveJournal [45] which is a friendship net-and two undirected) used cover a variety of networks with sizes ranging from 88K edges to 14M edges. Some basic data statistics about these networks are given in Table 2.

We implemented the approaches in C ++ and conducted the fol-lowing experiments on a server with 2.0GHz Quad-Core Intel Xeon E5410 and 16G memory.
In this subsection, we show that the linear influence modeling ap-proach adopted in this paper has similar capability as the traditional models for describing the influence propagation in social networks. Meanwhile, Group-PageRank provides a good estimation of social influence under the linear approach. Furthermore, both linear ap-proach and Group-PageRank are e ffi cient. 4 http: // snap.stanford.edu / data / egonets-Facebook.html 5 http: // snap.stanford.edu / data / ca-HepPh.html 6 http: // snap.stanford.edu / data / web-NotreDame.html http: // socialcomputing.asu.edu / datasets / LiveJournal
Function GetDeltaI( S , s , f S X  X  ) input : S , s , f S X  X  output :  X  s  X  = 0; S = S X  X  s } ; for each node i of G do while  X &lt; MAX_IT ERAT IONS do for each j  X  X  do
Function GetDeltaII( S , s , fPR ) input : S , s , fPR output :  X  s
 X  for each j  X  X  do Similarity of Influence Vectors. We empirically verify whether the output of linear approach (LA) is similar to two traditional in-fluence models, Independent Cascade (IC) model [14] and Stochas-tic (ST) model [2]. Specifically, the comparison in this experiment is focused on the similarity of the influence vectors. Suppose f f are the influence vectors of influencer-set S under model A and model B , respectively, where A , B are the model indicators, e.g., LA, IC, or ST. If model A is similar to model B , then f A close to f B S for any S , and vice versa.

We use the cosine similarity to measure the similarity between f use to measure the similarity between these models is as follows.
Thus, if Sim ( A , B ) is close to 1, then model A and B is simi-lar. Because Eq. (12) is very expensive to compute (as there are 2 |V| choices for S ), we randomly select a certain number of sets as representation to approximate Sim ( A , B ). Also, since the Monte-Carlo simulation for the IC model is time consuming, we use two small datasets, Facebook and ca-HepPh, to evaluate the similarity between models. The computation is done under the following set-tings: We randomly select a certain number of influencer-sets (i.e., 30 and 30,000, respectively) with the size ranging in [1,100] as the representation of all influencer-sets. Parameter d ranges in (0 tarting from 0.01 and stepping by 0.01. Transition matrix T is set as the transpose of PageRank matrix W (same as the transition matrix of WC model [24]), i.e., t ij on edge ( j , i ) is equal to
As shown in Fig. 2, Sim 30000( A , B ) and Sim 30( A , B ) are the similarity curves computed using 30,000 sets and 30 sets, respec-tively. The purple horizontal line shows the similarity between IC and ST on 30,000 sets (i.e., Sim 30000( IC , ST )). The black vertical dashed line is used to mark the peak point in the Sim 30000 curve. In the figure, we have three observations: First, LA can approach the other two models with a high similarity (larger than 0.99 and 0.96 respectively), while IC model and ST model are less similar to each other (with similarity value 0.96 and 0.89 respectively); Sec-ond, the curves of Sim 30000( LA , X ) and Sim 30( LA , X ) are very close, where X is either IC or ST. This means the similarities are irrelevant to the number of the sampled sets; Finally, the similari-ty curves between LA and the other two models all increase firstly and then decrease. The peaks are reached at a value when d is near to the value of 0.85.

These experimental observations show that the linear approach is a similar influence modeling method compared to traditional IC and ST models. Actually, in real applications, we could even replace the IC or ST model (e.g., by simply setting d = 0 . 85) with LA, as these two models are very expensive to compute.
 The Influence Computing. In the following, we compare the rela-tions among the exact value of f LA S X  X  , the upper bound GPR ( cations, since LA is much more e ffi cient, which we will illustrate later. We show our experimental results using the four datasets in Table 2. For testing, we randomly select 100 influencer-sets with their sizes ranging in [1,100]. For each selected S , we compute its
S X  X  , GPR ( S , V ), and f IC S X  X  . The final results are shown in Fig. 3, where  X  X nfluence_LA X  indicates f LA S X  X  ,  X  X PR X  means GPR ( and  X  X nfluence_IC X  indicates f IC S X  X  . Note the x axis is the index of S . We have two observations: 1) Influence_LA and Influence_IC almost overlap each other; 2) On each dataset, GPR is consistent-ly compact to Influence_LA. To further test their quantitative re-lations, we compute 1,000 groups of results and plot them as pair (Influence_LA vs. Influence_IC) and (GPR vs. Influence_LA) in the coordinates of Fig. 4. The similar results on web-NotreDame and LiveJournal are omitted due to limitations of space. These plots could be well fitted by linear function; and the slopes of these fit-ting lines are 1.041 and 1.017 for (Influence_LA vs. Influence_IC), 1.220 and 1.220 for (GPR vs. Influence_LA), on Facebook and ca-HepPh, respectively. These results imply that: 1) the influence computation results by LA and IC are almost the same. In other words, LA can be used to substitute for IC if e ffi ciency is the main concern; 2) Group-PageRank is a good estimation of the social in-fluence under LA as a consistently compact upper bound. E ffi ciency. The total computing time for f LA f
S X  X  on the 100 randomly selected node sets are listed in Ta-ence vectors are similar. Figure 4: The fitting curves for (Influence_LA vs. Influ-ence_IC) and (GPR vs. Influence_LA).
 ble 3. LA is almost 100 times faster than IC. With the help of Group-PageRank, the influence estimation GPR ( S , V ) can be fin-ished much quicker, e.g., no more than 1 second for small networks.
In the following, we show that Linear and Bound are both ef-fective and e ffi cient for solving the social influence maximization problem. To this end, we compare them with several (i.e., 6) state-of-the art algorithms.
Among these algorithms, Deg , DIC and PR are widely used for baselines, and CELF , IRIE and PMIA are three of the outstanding algorithms in terms of both e ff ectiveness and e ffi ciency.
For computing influence maximization, one algorithm will re-turn a set S with K nodes, and the e ff ectiveness of the algorithm is justified by the influence spread (i.e., f S X  X  , the expected number of nodes that will be influenced) of the chosen S ; that is, the bigger the f
S X  X  the better the algorithm. Since IC model is the most widely accepted influence computation model, we run Monte-Carlo simu-lation under IC model to estimate and compare each f S X  X  . Specif-ically, the simulation is done as follows (called Weighted Cascade (WC) model [24]): The nodes in S are viewed as the ones activat-ed at time t = 0; Each activated node can influence its neighbors independently; If node i is activated at time t , then it will influ-ence its not-yet-activated neighbor node j at time t + 1 (and only time t + 1) with transition probability t ij on arc ( j , Section 5.1, we set the transition probability t ij equal to which is widely adopted in the literature. The size K of S tests ranges from 5 to 50. We report the best performance of each algorithm listed by tuning its parameters. Meanwhile, for consis-tency, we set the parameter d in PR , Linear and Bound (  X  equals to 0 . 85, which is a widely used value in PR .
 E ff ectiveness. Fig. 5 shows the influence spread, where we can see that both Linear and Bound are e ff ective, as the selected n-ode sets are very influential. Since linear approach is similar to IC model, the performance of Linear and CELF is also quite sim-ilar (almost overlap each other on Facebook). For better illustra-tion, some algorithms are plotted together if they output similar influence spread values, e.g., Linear and CELF on ca-HepPh. Fur-thermore, we summarize these results on 4 datasets into Table 4, which means how many times an algorithm A (row) outperforms (with a larger f S X  X  ) an algorithm B (column) when K = 50. The max value is 4 since we tested 4 datasets, and we do not count the dataset if there is no obvious di ff erence between two algorithms X  performance, e.g., Bound and IRIE on the ca-HepPh and LiveJour-nal datasets. Thus, the sum of the values in two symmetric entries of Table 4 is less than or equal to 4. In Table 4 the last column shows the summarized number for an algorithm that outperforms the others. Based on Fig. 5 and the numbers in the last column of Table 4: Linear &gt; Bound  X  IRIE &gt; PMIA &gt; PR &gt; DIC and thus Linear is the best. We do not show the results of CELF in Table 4, because it only handles two of the small networks and fails when testing web-NotreDame and LiveJournal (Fig. 5). E ffi ciency. Fig. 6 shows the computing time, where we do not present the computing time of DIC and Deg because they are al-most 0. In terms of e ffi ciency, the relative performance of the al-gorithms is given by DIC  X  Deg &gt; PR  X  Bound Linear &gt; IRIE &gt; PMIA CELF . The computing time in Fig. 6 are shown in log scale for better illustration. Unfortunately, this also makes the di ff erence among some algorithms, e.g., Linear , IRIE and PMI-A , become less obvious (Actually, Linear is faster than IRIE , and IRIE is faster than PMIA ). Another observation is that the comput-ing time of Bound is almost equal to PR which means that Bound is a linear time algorithm for viral marketing, i.e., with O ( for computing vector fPR . Bound is as scalable as PR for large s-cale networks, and it is more e ff ective (refer to Fig. 5 and Table 4): PR may find the top-K most influential individuals. However, it does not consider the  X  X nfluence overlapping X  among selected indi-viduals. Therefore, the top-K most influential individuals selected by PR may not lead to the maximization of influence spread. In contrast, Bound tackles this issue by including a  X  X iscount X  (i.e., Group-PageRank) for the mutual influences of the selected seed n-odes. Thus, Bound outperforms PR for handling influence.
In summary, for solving the social influence maximization prob-lem in viral marketing, Linear and Bound perform consistently well on each network. Specifically, the seed nodes returned by Linear could exert the most influence spread, and in contrast, if the com-pany wants to select a fast and also e ff ective algorithm for a large scale social network, then Bound will be a better choice. Note that, implementing the algorithms on distributed architectures may fur-ther help the companies in viral marketing.
 Damping Factor d . Previously, we set d simply equals to 0.85, and Fig. 2 also demonstrates that the output of linear approach is the most similar to that of traditional IC and ST models when d is near to 0.85. More specifically, in the following, we investigate more details on the e ff ect of tuning d in terms of both the running time and the influence spread of the selected seeds (i.e., for social influence maximization) of Linear and Bound . To this end, we set (c) web-NotreDame. d ranging from 0.05 to 1, with step 0.05, and compute the corre-sponding running time and influence spread with K = 50.
The upper row of Fig. 7 shows the e ff ectiveness of both Linear and Bound with di ff erent d on four social networks respectively. Here, the x axis is the d value, and the red dashed line is the re-sult of CELF (As already mentioned, CELF is too expensive to run on web-NotreDame and LiveJournal). From these figures, we ob-tain the following observations: 1) The performances of Linear and Bound increase at first and then decrease, following the same trend in Fig. 2. For instance, the best results on Facebook and ca-HepPh are reached when d is near to 0 . 9 and 0 . 8, respectively, which is also close to the optimal d in Fig. 2; 2) When d locates in range [0.6,0.9], the performance stays at a high level (almost better than 95% of CELF results for both Linear and Bound ).

In Fig. 7, the bottom figures show the computing time of Linear and Bound . The time cost of Linear increases while d increas-es, and when d  X  0 . 9, the computing time increases significantly. This is because the larger d the less information will be blocked by each node, and therefore, the more nodes social influence will be spread over. Thus, the linear approach converges slowly. However, with the help of Group-PageRank heuristic, the computing time of Bound keeps very little.

In summary, as is well known, it is hard to find a specific d which performs the best for all the datasets [23]. However, in terms of both e ff ectiveness and e ffi ciency, we suggest randomly choose a used in the research literature of ranking.
In this paper, we provided a bounded linear approach for e tive and e ffi cient influence computation and influence maximiza-tion. Specifically, we first adopted a tractable linear approach for describing the influence propagation in social networks. Then, to further address the scalability issues of social influence comput-ing for the social influence maximization problem, we proposed a quantitative metric, named Group-PageRank. It is a tight upper bound of the influence of any node set, and it can be computed in near constant time. Next, we applied both the linear approach and Group-PageRank for solving the social influence maximization problem in viral marketing. Along this line, we proposed two lazy-forward greedy algorithms, Linear and Bound , based on the linear approach and Group-PageRank, respectively. Finally, the exten-sive experimental results demonstrated that 1) the linear approach is both flexible and e ffi cient for social influence computing, and Group-PageRank provides a good estimation of social influence under the linear approach; 2) Both Linear and Bound algorithms could quickly find a set of the influential nodes for viral marketing campaign. For these two algorithms, Linear is more e ff ective while Bound is more e ffi cient.
 This research was partially supported by grants from the Nation-al Science Foundation for Distinguished Young Scholars of China (Grant No. 61325010), the National High Technology Research and Development Program of China (Grant No. 2014AA015203), the Natural Science Foundation of China (Grant No. 71329201), the Fundamental Research Funds for the Central Universities of China (Grant No. WK0110000042) and the Anhui Provincial Nat-ural Science Foundation (Grant No. 1408085QF110). Also, it was supported in part by National Science Foundation (NSF) via grant number CCF-1018151. Qi Liu gratefully acknowledges the support of the Youth Innovation Promotion Association, CAS. (c) web-NotreDame. (g) web-NotreDame.
