 Hao Wang 1 , Nana Pan 2 , U Leong Hou 2( Finding those people who are the most influential in a social network is impor-tant in viral marketing as it helps companies to identify proper users for pro-moting their products and services. Motivated by this, the problem of top-k influence maximization (IM) has been studied and developed extensively (see, pose an algorithm, CELF , to solve this problem via Monte Carlo simulations improve the performance of CELF ; their method, MixedGreedy to be one order of magnitude faster.
 ing the evolution of the top-k influential users in dynamic networks. Applying to study an incremental processing framework which maintains the top-k result subject to the network changes.
 p  X  [0 , 1]. With a seed of one or several vertices, the independent cascade (IC) activation. The influence of S in G is defined as I ( S | usually estimated by Monte Carlo simulations. Let  X  i be the top-i set of influential users. Algorithm takes k iterations to construct a chain of  X  1  X   X  2 the i -th iteration, it adds into  X  i  X  1 the vertex v C (  X  ) = I (  X  i  X  1  X  X  )  X  I (  X  i  X  1 ). Specifically, to compute  X  counting the reachability (Line 3). Then, Lines 6-9 are based on the following lemma on C i (  X  ), which directly follows the submodularity of I ( Lemma 1. For any j&lt;i and v  X   X  i  X  1 , C i ( v )  X  C j Dynamic top-k Influence Maximization. In this paper we target top-k IM with network dynamics. Formally, assume that over a certain time period a social network G =( V, E ) evolves to G =( V, E ); then given a chain of top-k sets of G ,  X  1  X   X  2  X   X  X  X   X   X  k , we seek an efficient solution to finding  X  top-k sets of G . gressively verify whether  X  i =  X  i . Once  X  i =  X  i , then  X  recomputed. For verification, we distinguish the strengthened edges ,  X E { e u,v |  X p u,v &gt; 0 } , and the weakened edges ,  X E  X  = { fying each  X  i , we perform two consecutive phases: (i) Apply  X E ing in G + =( V, E + ); verify  X  i in G + ; (ii) Apply  X E G =( V, E ); verify  X  i in G .
 Phase 1 of Verifying  X  1 = { v  X  1 } . We estimate how  X E of v  X  V , i.e., we estimate  X I ( v ) def = I ( v | G + ) of  X E + on those random subgraphs G S generated by MixedGreedy serves this purpose by generating delta random subgraphs G where E  X  is a random sample of  X E + . Starting from the endpoints of E perform two probabilistic traversals in G + :a backward one finding V 3-4), and a forward one finding V f  X  V (Line 5). Let G S G 3-5, e  X  G S if and only if e  X  G  X  .Let  X r ( v | X  ) def = r ( v the following lemma. to  X r ( w | G S ) of any vertex w  X  V . Therefore,  X  v  X  V ,  X r ( v delta random subgraph G  X  . Given the interrelationship between influence and within G  X  . Eventually we check whether I ( v  X  1 | G + ) is the largest. Phase 2 of Verifying  X  1 = { v  X  1 } . Recall Lines 6-9 of essentially rely on upper-bounding the contribution C i ( vertices. In this phase, since from G + to G there are only weakened edges, the results of Phase 1 (i.e., I ( v | G + ) values) are natural upper bounds of C of MixedGreedy to verify whether I ( v  X  1 | G )  X  I ( v | for any v = v  X  1 . If yes, then we safely conclude that  X  we recompute  X  1 , X  2 ,  X  X  X  , X  k .
 Verifying  X  i =  X  i  X  1  X  X  v  X  i } . As before, the verification of  X  phases. We check the validity of  X  i by comparing the exact value of C with some upper bound of C i ( v | X  ) for any other v ,in G In addition to the submodular upper bounds C i ( v | X  )  X  develop the following incremental upper bounds.
 Lemma 3.  X  v  X   X  i  X  1 , C i ( v | G + )  X  C i ( v | G )+  X I ( v ) ,and C C ( v | G + )+  X I (  X  i  X  1 ) ,where  X I (  X  ) def = I (  X | G + )  X  I (  X | G + )  X  I (  X | G ) .
 Incremental upper bounds are closely related to network changes. If the network changes are minor, for example if there are few strengthened edges ( G weakened edges ( G  X  G + ), the incremental upper bounds could be much more tighter than the submodular ones, thus a pruning procedure similar to Lines 6-9 of MixedGreedy could be more efficient. In practice, we use whichever the better of submodular and incremental upper bounds. In this section we experimentally evaluate our method, DynaG of MixedGreedy [ 1 ], where for the dynamic influence maximization problem MixedGreedy is executed at every time step. We implemented and reused the source of MixedGreedy (in C). All experiments were run on a Linux server equipped with an Intel Core i7 3.2GHz CPU. Dataset. We use the Brightkite dataset [ 2 ] for the experiments. The dataset records in a period of 942 days. We take 2 temporal samples from Brightkite, each consisting of 50 consecutive days, and use a recommendation model (RM) to transform each sample into an evolving network. RM assumes that, when a user u visits a location for the first time, she will recommend to all of her recommended N u,v ; t locations to v in total, and among these recommendations n of the sample. The left vertical axes represent daily update ratio (gray bars), represent running time of MixedGreedy and DynaG , with values shown on the right vertical axes. As we can see, in all cases DynaG Greedy .

