 1. Introduction
Nowadays, there exists a growing interest in aligning information systems in a process-oriented way [9,55] . In the current dynamic business world the economic success of an enterprize increasingly depends on its ability to react to changes in its specific service or product required by a particular customer) to changes in the environment [45]. The specification of process properties in a declarative way is an important step towards the flexible management of PAISs [47]. The advantages of using absence of over-specification [30], and provision of more maneuvering room for end users [30], are discussed in several studies (e.g., [39,11,12] ).

Due to their flexible nature, frequently several ways to execute declarative process models exist. Typically, given a certain overall completion time) should be considered, and users often do not have an understanding of the overall process. Moreover, optimization of performance goals requires that resource capacities are considered. Therefore, recommendation support is needed during BP execution, especially for inexperienced users [49] .

In order to support users of flexible PAISs during process execution in optimizing performance goals like minimizing the considering both the control-flow and resource constraints (scheduling problem [6] ) order to optimize certain objectives of the BP enactment.
 proposed since constraint programming (CP) [35] supplies a suitable framework for modeling and solving problems involving plans (e.g., because estimates turned out to be inaccurate).
 and run-time evaluations, the results which are obtained by each algorithm are compared to obtain information about which algorithm is better under which circumstances and whether one algorithm is better in general. The results indicate that the good in other cases.

Initial aspects related to the proposed constraint-based approach and how to use this approach as basis for creating user recommendations have been previously presented in [ 2] and [ 5] respectively. However, this paper significantly extends and improves this previous work by: (1) providing background on related areas (cf. Section 2 ), (2) giving more details about the method for generating recommendations, e.g., by including an algorithm for providing recommendations (cf. Section 3 ), This paper is organized as follows: Section 2 introduces the related areas, Section 3 includes an overview of our proposal,
Section 4 details the method for generating the optimized enactment plans, Section 5 shows the application of the proposed
Section 8 summarizes related work, and finally, Section 9 includes conclusions and future work. 2. Background Our work combines aspects of scheduling, planning, and CP to support users during the execution of flexible declarative BPs.
Section 2.1 provides backgrounds regarding declarative processes. Section 2.2 gives an overview of planning, scheduling and CP. 2.1. Declarative BP models
Recently, constraint-based approaches have received increased interest [51,29] , since they suggest a fundamentally different the chosen approach, requirements imposed by the BPs need to be reflected by the process model. This means that desired behavior must be supported by the process model, while forbidden behavior must be prohibited [30,47,26] . While imperative process models specify exactly how things have to be done, declarative process models focus on what should be done. In the i.e., including information about (1) activities that can be performed as well as (2) constraints prohibiting undesired process behavior.

De undesired execution behavior.
 description of the complete set of constraints, cf. [46]). ConDec constraints can be divided into 3 groups: specifies that A must be executed exactly N times. specifies that to execute activity B , activity A needs to be executed before. if B is executed, then A cannot be executed, and vice versa. (Precedence(A,B)), C 3 (Precedence(A,C)), and C 4 (NotCoexistence(B,C)).

As the execution of a constraint-based model proceeds, information regarding the executed activities is recorded in an execution trace (cf. Definition 2 ).

De fi nition 2. Let S =( A , C ) be a constraint-based process model with activity set A and constraint set C . Then: A trace composed by a sequence of starting and completing events  X  1. start ( a i , Rj k , T ), i.e., the i -th execution of activity a using k -th resource with role j is started at time T . 2. comp ( a i , T ), i.e., the i -th execution of activity a is completed at time T .

A process instance (cf. Definition 3 ) represents a concrete execution of a constraint-based model and its execution state is reflected by the execution trace.

De fi
I =( S ,  X  )on S is defined by S and a corresponding trace
A running process instance I is in state satisfied if its current partial trace them. Fig. 1 includes examples of traces of satisfied and violated instances next (cf. Definition 4 ).

De fi nition 4. Let S =( A , C ) be a constraint-based process model with activity set A and constraint set C , and I =( S , corresponding process instance with partial trace  X  . Then: An activity a instance state of I is not violated afterwards; i.e., for instance ( S ,  X   X  ) is not in state violated.
 decision. The situation is further complicated by the fact that typically multiple instances get concurrently executed within a within a particular timeframe. Therefore, recommendation support is usually needed during the execution of constraint-based models [49] .

In order to suggest suitable next activities to the user, we propose the generation of optimized enactment plans for the constraint-based model by applying CP for P&amp;S the BP activities (cf. Section 4 ). 2.2. Planning, scheduling and constraint programming
For generating optimized BP enactment plans optimizing the performance goals of constraint-based process models, activities to approach is proposed since, as stated, CP [35] is suitable for modeling and solving P&amp;S problems [40] .
The area of scheduling [6] includes problems in which it is necessary to determine an enactment plan for a set of activities of every activity requires the use of resources, hence they may compete for limited resources. In general, the objective in considered to be optimized, in most cases related to temporal measures (e.g., minimization of completion time), or considering the optimal use of resources.
 (actions) which can be applied to one state in order to reach another state. Furthermore, in planning problems, usually the optimization of certain objective functions is considered.
 through CP, it needs to be modeled as a constraint satisfaction problem (CSP) (cf. Definition 5 ).
De fi nition 5. A CSP P =( V , D , R ) is composed by a set of variables V , a domain of values D for each variable var allowed combinations of values for these variables. A solution (cf. Definition 6 ) consists of assigning values to CSP variables.

De fi nition 6. A solution S =  X  ( var 1 , val 1 ), ( var 2 , val when the variable-value assignments satisfy all the constraints.

In a similar way, a CSP is feasible if there exists at least one feasible solution for this CSP. From now on, S assigned to variable var in the (partial) solution S .
 Similar to CSPs, constraint optimization problems (COPs) require solutions that optimize objective functions.
De fi nition 7. A COP P O =( V , D , R , O ) is a CSP which also includes an objective function O to be optimized. ( var O ).

Constraint programming allows the separation of the models from the algorithms, so that once a problem is modeled in a declarative way as a CSP, a generic or specialized constraint-based solver can be used to obtain the required solution.
Furthermore, constraint-based models can be extended in a natural way, maintaining the solving methods. Several mechanisms exploration of a search space which is based on all possible combinations of assignments of values to the CSP variables), and incomplete search algorithms (i.e., performing an incomplete exploration of the search space by repairing infeasible complete problems. One of the most promising of such techniques is th e greedy randomized adaptiv e search procedure (GRASP) [13,14] . search (LNS) [31] is a powerful hybrid technique which has recently shown outstanding results in optimizing various scheduling problems [31] .
 3. Method for generating recommendations
As stated, constraint-based processes offer much flexibility. Typically, given a constraint-based process model and a certain most cases. In order to address this challenge we propose an approach to assist users during process execution in optimizing performance goals like minimizing the overall completion time (OCT). Specifically, users of flexible PAISs are supported during process execution by a recommendation service which provides recommendations on how to proceed best with the execution. together with their resource allocations since both control-flow and resource perspectives are considered.
De fi nition 8. A recommendation Rec is composed by a set of pairs ( a resource Rj k . 3
For example, the recommendation  X  ( A 1 , R 0 1 ),( B 2 , R 1 the second execution of activity B using resource R 1 2 .
 global optimization. 3.1. Build-time: generation of optimized execution plans
The generation of optimized execution plans comprises 3 steps (cf. Fig. 3 ): (2) Extend declarative specification (including estimates and resource perspective) . In order to plan and schedule the process
De instances NInst .

In Fig. 5 (1) and (2), an example of an extended constraint-based (ConDec-R) speci
Section 5 . (3) Generate Optimized Enactment Plans . Based on the extended constraint-based specification (cf. Definition 9 ) optimized
De completion times for each activity execution, and (iii) the resource which is used for each activity execution. is fully detailed in Section 5 .

Since the generation of optimal plans presents NP-complexity [17], it is not possible to ensure the optimality of the generated an efficient way, i.e., plans of high quality (cf. Definition 11 ) are generated, as demonstrated in Section 6 .
De defined by EP  X  OCT / EP OCT , where EP OCT is the value of OCT in the plan EP , and EP 3.2. Run-time: generating recommendations on possible next execution steps
This section describes how the optimized plans are then used for assisting users during process execution. At run-time, process execute next, i.e., proposes the recommendation with the highest quality (cf. Definition 12 ). Note that the quality of the recommendations which are generated is determined by the quality of the BP enactment plans (cf. Definition 11 ) which are used.
De fi nition 12. The quality of a recommendation Rec (cf. Definition 8 ) related to a ConDec-R process model CR (cf. Definition 9 )is equal to the quality of the BP enactment plan (cf. Definition 11 ) which was used for generating Rec .
Algorithm 1 shows how the recommendations are generated. As input data some information is required: (i) the ConDec-R Algorithm 1. Provide recommendations
Algorithm 1 continuously generates recommendations (line 11) on how to proceed with process execution considering (1) the process instances (c in Fig. 3 ), and (2) the current information about resource availabilities (c in Fig. 3 ), e.g., (! Rj recommendation system sends it to the user (line 13).
 resource availabilities, and user deviations).
 made) or whether updates of the execution plans are needed (j in Fig. 3 ). In general, updates of the execution plan can become become unavailable). Note that not every deviation requires replanning (some examples are given in Section 5 ).
Moreover, the replanning module is continuously searching for a better plan by considering the event log during BP execution, provided that the current plan is not optimal. In this way, plan updates are conducted whenever the replanning module finds a
Despite the NP-complexity of the considered problems, replanning is usually less time consuming than initial planning, since most of the information about previous generated plans can usually be reused, and CSP variable values become known as execution proceeds (cf. Section 6 ).

A running example illustrating the complete process is detailed in Section 5 . 4. Method for generating optimized BP enactment plans
As stated during build-time optimized execution plans are generated. solver can be used to obtain the required solution.
 language (i.e., ConDec specification, resource requirements and estimates) optimizing process performance goals. To improve the proposal includes for each ConDec template a filtering rule (responsible for removing values which do not belong to any solution) (cf. Section 4.2 ). Moreover, efficient search algorithms for solving the CSP are described in Section 4.3 . Fig. 4 shows the complete process which is proposed to generate BP enactment plans from a ConDec-R specification through resource requirements and the estimates. This ConDec-R specification is then translated into a CSP (cf. Step 2) based on which 4.1. Representing the constraint-based model as CSP model
As stated, BP activities and constraints are specified in a ConDec-R model so that frequently several feasible ways to execute model, we propose a constraint-based approach for P&amp;S the BP activities.

The first step for solving a problem through CP consists of modeling the problem as a CSP. Regarding the CSP model of the enactment plan, i.e., stating values for its start and end times.

De fi can exist for one process instance.

De fi nition 14. A scheduling activity (or each repeated enactment of an activity) a activity a , i.e., a specific BP activity instance.
 and (2) a type representing each execution of the BP activity, named SchedulingActivity . The properties of RepeatedActivity (cf. Definition 9 )are:(i) duration : represents the estimated duration of the BP activity (the same estimated duration is variable var ,respectively).The RepeatedActivity type is composed of nt SchedulingActivities .Each SchedulingActivity includes: through the sel variable, i.e., sel is equal to 0 if it is not executed, 1 otherwise.

Henceforth, st ( a i ) and et ( a i ) represent the start and the end times of activity a
In our approach, considering the minimization of the overall completion time of the process enactment, a CSP variable for this function, named OCT , is also included in the CSP model: OCT =max
De fi nition 15. A CSP-ConDec problem related to a ConDec-R process model CR =( Acts , C , Res , NInst )(cf. Definition 9 ) is a COP P =( V , D , R , O )(cf. Definition 7 )where: the overall completion time ( OCT ), i.e., V ={ nt ( a ), constraints included in C together with the constraints from the proposed CSP model, i.e.,  X  i :1  X  i  X  nt ( a ): sel ( a i )=1 and  X  i &gt; nt ( a ): sel ( a 3. The set of domains D is composed by the domains for each variable included in V . 4. The objective function O is minimizing the OCT variable.

In the proposed constraint-based approach resources are implicitly constrained since most constraint-based systems provide a high-level constraint modeling specific to scheduling which includes an efficient management of shared resources. Note that, resource constraints [38].
 which includes the execution of each BP activity the maximum number of times (at least nt for one activity must be established, otherwise any activity will be included in the plan), and without considering parallelism in the execution of any activity. 4.2. Filtering rules 4.3. Search algorithms
The proposed approach is used for the generation of optimized enactment plans during both build-time (cf. Section 3.1 ) and run-time (cf. Section 3.2).

Once a CSP is modeled, several constraint-based mechanisms can be used to obtain the required solution. In this section, some search algorithms which efficiently deal with CSP-ConDec problems are introduced.
 recommendations (cf. Section 6 ).
 objective value for this solution ( S OCT ) is a valuable information which can be added to the constraint model through the constraint OCT b S OCT . Thus, some non optimal candidates, i.e., candidates whose OCT value cannot be less than S discarded during the search, and hence increases the efficiency in the search for solutions.

Moreover, in our proposal, during the search process, some of the values which only lead to non-feasible solutions, arc consistency (cf. Definition 16 ).

De fi nition 16. A CSP =( V , D , R ) presents arc consistency if for all pairs of CSP variables ( var var 1 in the domain of var 1 there is some value in the domain of var var 2 , and vice versa.

In the proposed approach, the developed filtering rules (cf. Section 4.2) and CSP modeling (cf. Section 4.1 ) are implemented such that they maintain the arc consistency for all pairs of CSP variables during all the search process. problem P by considering certain fixed values for all nt variables nt
S  X  be the best complete solution which can be obtained for P by considering certain fixed values for all nt variables nt of high-level constraints stated in C :  X  by a precedence graph which extends the previous graph by including the precedence constraints in which the new scheduling activity is involved. Taking into account that OCT =max( et ( Act is executed does not make improving the optimal solution possible.  X  in adding a new scheduling activity to the precedence graph (together with the precedence constraints in which this activity is new relationships between activities implies that each graph which belongs to the new set of precedence graphs PGs corresponds to a reinforcement of some of the original graphs which belonged to PGs , and hence any graph belonging to PGs can lead to a solution with less OCT value.
 increased step by step. In this way, the optimal solution is searched by considering the CSP which is obtained as a result of feasible due to the arc consistency which is maintained. However, this may not be true for some combinations of Alternate or Chain relationships, and hence, greater values for nt variables need to be considered.
 remaining CSP variables. 4.3.1. Complete search
As stated, complete search consists of exploring a search tree for the CSP problem which is based on all possible combinations solutions which are obtained.
 some shared discrete resources and which must be scheduled in order to minimize some objectives, our extension includes further later), we use an efficient method for solving the CJSSPs, named setTimes [22] , based on [5 0] (cf. [10] ). 4.3.2. Iterative bounded greedy
Due to the NP-complexity of the considered problem, in addition to the complete search, an incomplete search approach, named iterative bounded greedy (IBG), is implemented including randomized components to achieve diversified results (cf. Algorithm 2. Iterative bounded greedy
With the proposed incomplete search, all the solutions can be reached and the search procedure efficiently explores a wide range of solutions from diversified areas of the search space. 4.3.3. GRASP-LNS
In addition to complete and incomplete search, a hybrid approach is considered. GRASP [13,14] (cf. Algorithm 4 ) consists on an Algorithm 3. GRASP-LNS In the current approach, LNS [31] is used for exploring the neighborhood of current solutions in the GRASP algorithm (line 4 of allowing the search to explore a variety of neighborhoods.

Algorithm 4. LocalSearch 4.3.4. Greedy generation of a feasible solution
Algorithm 5. ConstructGreedyRandomizedSolution and the set of activities previously instantiated are created and initialized. Furthermore, a map which relates each repeated allowedActs is filled with the P&amp;S activities which are allowed to be instantiated next (lines 5 any execution of A which remains to be executed (line 8), then the method Allow checks if this activity instance can be included in the set actAlreadyInstantiated (line 14), and its related information is updated (line 15). The lines 5 until a solution is completely constructed (line 16). The generated solution is returned as the result (line 17).
A feasible good solution can be swiftly generated through Algorithm 5 by considering different heuristics for the implementation of the Select method (line 11 of Algorithm 5 ). In this proposal, for the IBG (cf. Algorithm 2 ) and GRASP-LNS (heuristic) so that the activities are selected by considering the probability where r ( A ) denotes the rank of A when all the candidates are ranked according to their earliest start time. most cases, this initial solution will be improved as the complete search proceeds.
 maintained during all the process by the developed filtering rules. 5. A running example
In this section, the proposed approach is used for managing recommendations during a hypothetical execution of a running transport, accommodation, and guided excursions. After the client request is carried out, the agency must write a report which contains the information in answer to the request, which will then be sent to the client. Besides managing the client requests, people who work in the agency must perform further activities related to management, and accounting tasks. The number of client requests (P), management tasks (M) and accounting tasks (A) which must be dealt with during a working day is known at the beginning of the day, hence it is necessary to organize the work considering the estimated work load. The objective to be considered by the agency is to minimize the overall completion time of the daily processes. However, this example can easily be extended in order to consider the optimization of further objective functions, such as cost. In the travel agency, optimized BP enactment plans must be created every day to generate recommendations about the activities to be executed and the correct Table 1 .

For activities which are executed more than once, each execution must finish before the next execution can start. Moreover, in with the same duration. 7 5.1. Build-time phase
To solve this problem through the proposed approach, the first step is the creation of the related ConDec specification. The constraint-based specification includes seven activities, G, AS, GE, TS, WR, MT and AT, and several relationships (ConDec
AS), and guided excursion elaboration (GE), must be processed, and before the execution of these services (AS, TS and GE), the written before a client request (Relationship (9) in Fig. 5 (1)).

In a next step, the constraint-based specification is extended with resource requirements, estimates for the number of is applied to generate optimized enactment plans for the specified problem (cf. Fig. 5 (3)). 5.2. Run-time phase Based on the execution plans generated during build-time, recommendations are then generated during run-time as explained in enforcing any behavior and users can decide to deviate at any time. Therefore, users are allowed to do everything which is not changes in resource availabilities or inaccurate estimations. All deviations which take place during the process enactment are
Fig. 6 shows the behavior of the proposed recommendation service (cf. Section 3.2 ) when hypothetical process instances with (M=3) and four accounting tasks (A=4). To demonstrate how the recommendation system behaves when deviations take place, the traces of the hypothetical process instances include different types of deviations. At the beginning of the execution, plan P 1 (which has already been generated during build-time considering the estimates for client requests (i.e., I 1 , I 2 and I 3 ), G is enabled (reflected by the white bars in columns G instances I 1 , I 2 and I 3 are not yet enabled (reflected by the black bars in columns AS execution of WR requires a previous execution of G . At time 0, starting execution of G is suggested. The user follows the recommendation. Due to hence AS 1 , TS 1 and WR 1 becomes enabled, and the partial trace of I of GE 1 requires a previous execution of both AS 1 and TS
The user follows the recommendation. Due to Exactly_1(G) , G hence AS 2 , TS 2 and WR 2 become enabled. Furthermore, at time 4, starting execution of G
The user follows the recommendation. Due to Exactly_1(G) , G
TS 3 and WR 3 becomes enabled. Furthermore, at time 6, starting execution of AS recommendation. At time 10, AT 1 is completed five time units later than expected. Since there was no slack time between AT
AT 2 , P 1 becomes outdated, and the replanning module generates P
At time 10, based on P 2 starting execution of AT 2 using R 1 is completed. Furthermore, at time 11, starting execution of TS time 12, AS 1 is completed, hence GE 1 becomes enabled. Furthermore, at time 12, starting execution of AS
R 1 0 is suggested. The user decides to partially follow the recommendation, so that, instead of executing AS
MT 2 . After this unexpected decision, P 2 becomes invalid, and the replanning module generates P
At time 15, AT 2 is completed. Furthermore, at time 15, based on P follows the recommendation. At time 16, MT 2 is completed. Furthermore, at time 16, an unexpected event occurs (i.e., resource
R 0 0 became unavailable), hence P 3 is no longer valid, and the replanning module generates P
At time 17, GE 1 is completed. Furthermore, at time 17, based on P follows the recommendation. At time 18, TS 2 is completed. Furthermore, at time 18, starting execution of AS suggested. The user follows the recommendation. At time 20, AT using R 1 1 is suggested. The user follows the recommendation. At time 24, WR
Even with the occurrence of this unexpected event, P 4 is still valid due to the slack time between WR 24, AS 2 is completed, hence GE 2 becomes enabled. Furthermore, at time 24, starting execution of AS is suggested. The user follows the recommendation. The remaining activities are executed as expected by considering P
In this way, the recommendation service supports users of flexible PAISs during process execution to optimize the overall process performance goals, by considering optimized enactment plans which are updated when necessary. 6. Empirical evaluation In order to evaluate the effectiveness of the proposed constraint-based approach, a controlled experiment has been conducted. 6.1. Experimental design test the suitability of our proposal for giving recommendations, in terms of performance and quality of recommendations. In greedy (IBG), and hybrid search (GRASP-LNS). Since the underlying strategies of the considered search techniques are completely different, we aim to investigate under which circumstances each one is the most suitable for obtaining the solution of certain problems. Moreover, we would like to find out whether these techniques are complementary, and hence can be used in a combined way for obtaining a good solution.

The suitability of our approach is tested regarding both (1) build-time, i.e., generation of complete optimized plans before constraint-based approach in cases that the generation of new optimized enactment plans is required due to user deviations or incorrect estimations which make the plans which have been previously generated useless. In this way, for performing these experiments, the constraint-based search algorithms (cf. Section 4.3 ) do not use any information about plans which have been proposed search algorithms are used to state values for the remaining variables which are unknown (i.e., those related to the remaining trace). As explained in Section 3.2 , the proposed recommendation system could consider the plans which have been previously generated when doing replanning in order to improve the efficiency. However, for the run-time experiments we did not be swiftly generated and any plan which has been previously generated cannot be used since, for example, the user completely disregards all recommendations.

Objects : The empirical evaluation considers different ConDec models taking some important characteristics into account in the we require the test models to be of medium-size (i.e., including 10 10 C ,20 A ,20 B ,and20 C .

During the experiments these generic ConDec models are specified by instantiating the generic relationships with concrete constraints leading to different ConDec problems. Since the filtering rules (cf. [3]) for the different ConDec constraints
ConDec models which are generated cover all complexity groups, i.e., all the possible combinations of type and complexity. For ( N  X  {10,20,30,40,50} is considered). Regarding the number of available resources, in turn, for all the generated test models, two available resources of two kinds of roles (i.e., R 1and R 2) are considered. In addition, different durations and required resources for each BP activity are considered (game, G ), since these aspects have a great influence on the complexity of the search of optimal solutions due to the fact that the considered problems are an extension of typical scheduling problems.
Specifically, in order to average the results over a collection of randomly generated ConDec models, 30 instances are randomly and R 2.

Independent variables : Considering the generated test models and search algorithms (cf. Section 4.3), Table 4 depicts the independent variables which are considered for the empirical evaluation.
 different response variables. generated plans is considered as a relevant aspect for giving good recommendations. Furthermore, the time spent for obtaining the optimal plans is a rather relevant response variable to be analyzed. The performance measures depicted in Table 5 are studied. plan, replanning has to be conducted and new optimized execution plans have to be obtained for the partial trace executed so cf. Definition 11 ) that can be found for given partial traces when replanning is needed due to deviations.
Since at run-time the user is probably expecting for a recommendation the search algorithms for generating optimized plans 50%, and 75% of the overall process enactment) are considered.

For generating the partial traces for the experiments, several strategies can be used. We generated the partial traces by absolute overall completion times, but we rather wanted to show that the constraint-based approach is able to find (optimized) execution plans for given partial traces even within 5 s when any plan which has been previously generated is useless. As by managing the partial traces in the same way as if they were completely new. Therefore, for performing these experiments the any plan which has been previously generated is useless.
 The performance measures depicted in Table 6 are studied.

For both build-time and run-time evaluation, the results which are obtained by each search technique are compared in order to obtain information about which technique is better in general, or to solve some specific kinds of problems.
Experimental design : For each of the 6 generic models, 150 problem instances are generated considering different values for variable N (5 values) and G (30 values which represent the 30 games which are randomly generated by varying activity durations and role of required resources) using each of the search algorithms. The response variables are then calculated by considering average values for all 150 problem instances. 8 Experimental execution : The machine for all experiments is an Intel Core2, 2.13 GHz, 1.97 GB memory, running on Windows
XP. In order to solve the constraint-based problems (cf. Section 4 ), the system COMET [10] is used, which is able to generate high-quality solutions for highly constrained problems in an efficient way. 6.2. Experimental results and data analysis 6.2.1. Build-time
For the experiments of the build-time phase, the constraint-based search algorithm is run until a 5-minute CPU time limit is reached.

Fig. 8 shows for each search algorithm: (a) the average percentage of optimal solutions which are found, (b) the average time considered problems are grouped according to the generic model, i.e., M10A, M10B, M10C, M20A, M20B, M20C, and the response model as stated in Table 7 , i.e., 6 specific problems ({1,
Fig. 8 (a) shows that CP search reaches the optimum solution for a greater number of problems than IBG and GRASP-LNS when the complexity of the problems is low, i.e., for models M10A, M10B and M10C. As the complexity of the problem increases, IBG and GRASP-LNS reach the optimal solutions for a greater number of problems than CP, i.e., M20A, M20B and M20C, presenting the solutions for problems which present a low complexity, since for small problems almost the entire search space can be explored. time. Thus, incomplete techniques are better in general. Furthermore, the evaluation shows that in most cases, IBG outperforms
GRASP-LNS. This result can be explained by the fact that the considered IBG is implemented in an efficient way due to the considered heuristic, and GRASP techniques require greater parameter tuning [13,14] , and hence more tests need to be done to get the best setting for this technique.

On the other hand, regarding the results which can be obtained by combining all the search algorithms, Table 8 shows the average number of optimal solutions which are found by any of the techniques (response variable % Opt be solved. It can be seen that for models M10A and M10C, the percentage of optimal solutions which are found is rather high (more than 77% in all cases), regardless of the relationships which are given between the activities. However, for models M20A,
M20B, and M20C, this measure highly depends on the relationships which are given between the BP activities, finding the fewest values when alternate response (relationships 4  X  6) is given. On the other hand, for relationships 1 and 3, the percentage of optimal solutions which are found is rather high (more than 78% in all cases), regardless of the specific model. However, for these results into account, in general, the specific Relation and the number of activities of the BP model seem to be much more and the maximum value is 100%, which can be considered rather good results.
 considered a rather good result.

Fig. 8 (c) shows that for all search algorithms, for the same model the response variable increases as the complexity of the response variable greatly increases as the complexity of the models increases, i.e., all techniques present a similar behavior regarding getting optimums for low-complex models and this behavior highly differs as the complexity of the models increases.
Therefore, the use of the considered techniques in a coordinated way is highly recommendable for complex problems, since their behavior is highly different and their result can be combined for obtaining solutions of high quality.
In brief, various conclusions can be drawn after analyzing the results:  X 
CP search obtains better results than IBG and GRASP-LNS for simple problems (cf. Fig. 8 (a)).  X  IBG and GRASP-LNS searches obtain better results than CP for complex problems (cf. Fig. 8 (a)).  X 
The percentage of optimum solutions is very high for almost all cases when considering all techniques ( Table 8 ).  X 
The average time for getting optimums is quite low (cf. Fig. 8 (b)).  X 
The use of a combination of all techniques in a coordinated way highly increases the quality of the solutions, especially for complex problems. 6.2.2. Run-time
For the experiments of the run-time phase, the constraint-based search algorithm is run until a 5-second CPU time limit is reached.

Figs. 9 and 10 show the average quality of solutions which is found when compared with the best known solution for each problem, after 0%, 25%, 50%, and 75% of the BP optimized enactment plan is executed because users, for example, deviated (response variables % Q 0 ,% Q 25 ,% Q 50 ,% Q 75 ,% Q ANY the complexity of the models increases, obtaining the lowest values for models M20B and M20C. It should be emphasized that, as stated, in general replanning is less time consuming than initial planning, since CSP variable values become known as execution proceeds. Therefore, the quality of the solutions increases as BP execution proceeds (cf. Fig. 10 ).
In general, the quality of the solutions which is obtained applying each technique individually is quite good (greater than 86% 92% for all cases), especially for complex problems (cf. Fig. 10 ). 7. Discussion
One advantage of our proposal is that the recommendation service is based on optimized enactment plans which are scheduling problem is NP complete [17].

On the other hand, the proposed approach presents some drawbacks. First, the business analysts must deal with a non-standard Moreover, additional evaluations of our proposal in the context of real process executions are planned as future work. further objectives, such as cost or other temporal measures. 8. Related work
Several research groups have integrated AI P&amp;S techniques with BPM systems. Most of the related work integrates scheduling process execution when considering performance optimization. Other authors use AI for exception handling during run-time [37,15] ; we, in turn, use a constraint-based modeling approach and make suggestions to users. Furthermore, unlike our work, techniques for giving user recommendations is a new application area.

Related to decision support systems, [28] develops a knowledge-based decision support system (KBDSS) for short-term machining cells by using a knowledge-based expert system to support the decision making process. Moreover, [7] manages multiple executions, our approach is based on a constraint-based approach for the generation of optimized plans by considering estimated values. Furthermore, [28,7,43,36,24] do not consider declarative process specifications.
 Related to user recommendations, [51] generates recommendations to select the next step to optimize some objective functions.
While [51] is based on a product data model for generating the recommendations, our approach is based on optimized enactment through a constraint-based approach. Moreover, while our approach allows for a global optimization of the performance goal, the recommendations described in [41,20] bear the risk of creating local optimums. Furthermore, [51,41,20] only consider the several instances.

Additionally, there exist some proposals which could be used to generate optimized enactment plans for BPs from declarative not consider neither optimality nor resource perspective. 9. Conclusion and future work
We propose a recommendation system for giving users assistance during process execution in flexible PAISs to optimize the partial trace of the process execution, the constraint-based process model and resource availabilities. The recommendation proposed approach, both control-flow and resources are considered. Furthermore, the optimized enactment plans are updated by replanning techniques when necessary. Different constraint-based algorithms are applied to a range of test models of varying optimal in most cases and quite good in other cases.

As for future work, it is intended to integrate the proposed recommendation system with a framework for evaluating algorithms plans to assist users through recommendations. Furthermore, some extensions of ConDec templates are intended to be considered, further resource patterns.
 Acronyms AI artificial intelligence BP business process BPM business process management CJSSP cumulative job shop scheduling problem COP constraint optimization problem CP constraint programming CSP constraint satisfaction problem GRASP greedy randomized adaptive search procedure IBG iterative bounded greedy LNS large neighborhood search OCT overall completion time PAISs process-aware information systems P&amp;S planning and scheduling Acknowledgements This work has been partially funded by the Spanish Ministerio de Ciencia e Innovaci X n (TIN2009-13714) and the European
Regional Development Fund (ERDF/FEDER).
References
