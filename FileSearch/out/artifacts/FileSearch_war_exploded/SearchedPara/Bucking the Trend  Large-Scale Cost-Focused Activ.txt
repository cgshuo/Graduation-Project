 Figure 1 shows the learning curves for two state of the art statistical machine translation (SMT) sys-tems for Urdu-English translation. Observe how the learning curves rise rapidly at first but then a trend of diminishing returns occurs: put simply, the curves flatten.

This paper investigates whether we can buck the trend of diminishing returns, and if so, how we can do it effectively. Active learning (AL) has been ap-plied to SMT recently (Haffari et al., 2009; Haffari and Sarkar, 2009) but they were interested in start-ing with a tiny seed set of data, and they stopped their investigations after only adding a relatively tiny amount of data as depicted in Figure 1.
In contrast, we are interested in applying AL when a large amount of data already exists as is the case for many important lanuage pairs. We de-velop an AL algorithm that focuses on keeping an-notation costs (measured by time in seconds) low. It succeeds in doing this by only soliciting trans-lations for parts of sentences. We show that this gets a savings in human annotation time above and beyond what the reduction in # words annotated would have indicated by a factor of about three and speculate as to why. Figure 1: Syntax-based and Hierarchical Phrase-Based MT systems X  learning curves on the LDC Urdu-English language pack. The x-axis measures the number of sentence pairs in the training data. The y-axis measures BLEU score. Note the di-minishing returns as more data is added. Also note how relatively early on in the process pre-vious studies were terminated. In contrast, the focus of our main experiments doesn X  X  even be-gin until much higher performance has already been achieved with a period of diminishing returns firmly established.

We conduct experiments for Urdu-English translation, gathering annotations via Amazon Mechanical Turk (MTurk) and show that we can indeed buck the trend of diminishing returns, achieving an order of magnitude increase in the rate of improvement in performance.

Section 2 discusses related work; Section 3 discusses preliminary experiments that show the guiding principles behind the algorithm we use; Section 4 explains our method for soliciting new translation data; Section 5 presents our main re-sults; and Section 6 concludes. Active learning has been shown to be effective for improving NLP systems and reducing anno-tation burdens for a number of NLP tasks (see, e.g., (Hwa, 2000; Sassano, 2002; Bloodgood and Vijay-Shanker, 2008; Bloodgood and Vijay-Shanker, 2009b; Mairesse et al., 2010; Vickrey et al., 2010)). The current paper is most highly re-lated to previous work falling into three main ar-eas: use of AL when large corpora already exist; cost-focused AL; and AL for SMT.

In a sense, the work of Banko and Brill (2001) is closely related to ours. Though their focus is mainly on investigating the performance of learn-ing methods on giant corpora many orders of mag-nitude larger than previously used, they do lay out how AL might be useful to apply to acquire data to augment a large set cheaply because they rec-ognize the problem of diminishing returns that we discussed in Section 1.

The second area of work that is related to ours is previous work on AL that is cost-conscious. The vast majority of AL research has not focused on accurate cost accounting and a typical assumption is that each annotatable has equal annotation cost. An early exception in the AL for NLP field was the work of Hwa (2000), which makes a point of using # of brackets to measure cost for a syntac-tic analysis task instead of using # of sentences. Another relatively early work in our field along these lines was the work of Ngai and Yarowsky (2000), which measured actual times of annota-tion to compare the efficacy of rule writing ver-sus annotation with AL for the task of BaseNP chunking. Osborne and Baldridge (2004) argued for the use of discriminant cost over unit cost for the task of Head Phrase Structure Grammar parse selection. King et al. (2004) design a robot that tests gene functions. The robot chooses which experiments to conduct by using AL and takes monetary costs (in pounds sterling) into account during AL selection and evaluation. Unlike our situation for SMT, their costs are all known be-forehand because they are simply the cost of ma-terials to conduct the experiments, which are al-ready known to the robot. Hachey et al. (2005) showed that selectively sampled examples for an NER task took longer to annotate and had lower inter-annotator agreement. This work is related to ours because it shows that how examples are se-lected can impact the cost of annotation, an idea we turn around to use for our advantage when de-veloping our data selection algorithm. Haertel et al. (2008) emphasize measuring costs carefully for AL for POS tagging. They develop a model based on a user study that can estimate the time required for POS annotating. Kapoor et al. (2007) assign costs for AL based on message length for a voice-mail classification task. In contrast, we show for SMT that annotation times do not scale according to length in words and we show our method can achieve a speedup in annotation time above and beyond what the reduction in words would indi-cate. Tomanek and Hahn (2009) measure cost by # of tokens for an NER task. Their AL method only solicits labels for parts of sentences in the interest of reducing annotation effort. Along these lines, our method is similar in the respect that we also will only solicit annotation for parts of sentences, though we prefer to measure cost with time and we show that time doesn X  X  track with token length for SMT.

Haffari et al. (2009), Haffari and Sarkar (2009), and Ambati et al. (2010) investigate AL for SMT. There are two major differences between our work and this previous work. One is that our intended use cases are very different. They deal with the more traditional AL setting of starting from an ex-tremely small set of seed data. Also, by SMT stan-dards, they only add a very tiny amount of data during AL. All their simulations top out at 10,000 sentences of labeled data and the models learned have relatively low translation quality compared to the state of the art.

On the other hand, in the current paper, we demonstrate how to apply AL in situations where we already have large corpora. Our goal is to buck the trend of diminishing returns and use AL to add data to build some of the highest-performing MT systems in the world while keeping annota-tion costs low. See Figure 1 from Section 1, which contrasts where (Haffari et al., 2009; Haffari and Sarkar, 2009) stop their investigations with where we begin our studies.

The other major difference is that (Haffari et al., 2009; Haffari and Sarkar, 2009) measure annota-tion cost by # of sentences. In contrast, we bring to light some potential drawbacks of this practice, showing it can lead to different conclusions than if other annotation cost metrics are used, such as time and money, which are the metrics that we use. Here we report on results of simulation experi-ments that help to illustrate and motivate the de-sign decisions of the algorithm we present in Sec-tion 4. We use the Urdu-English language pack 1 from the Linguistic Data Consortium (LDC), which contains  X  88000 Urdu-English sentence translation pairs, amounting to  X  1.7 million Urdu words translated into English. All experiments in this paper evaluate on a genre-balanced split of the NIST2008 Urdu-English test set. In addition, the language pack contains an Urdu-English dictio-nary consisting of  X  114000 entries. In all the ex-periments, we use the dictionary at every iteration of training. This will make it harder for us to show our methods providing substantial gains since the dictionary will provide a higher base performance to begin with. However, it would be artificial to ignore dictionary resources when they exist.
We experiment with two translation models: hi-erarchical phrase-based translation (Chiang, 2007) and syntax augmented translation (Zollmann and Venugopal, 2006), both of which are implemented in the Joshua decoder (Li et al., 2009). We here-after refer to these systems as jHier and jSyntax, respectively.

We will now present results of experiments with different methods for growing MT training data. The results are organized into three areas of inves-tigations: 1. annotation costs; 2. managing uncertainty; and 3. how to automatically detect when to stop so-3.1 Annotation Costs We begin our cost investigations with four sim-ple methods for growing MT training data: ran-dom, shortest, longest, and VocabGrowth sen-tence selection. The first three methods are self-explanatory. VocabGrowth (hereafter VG ) selec-tion is modeled after the best methods from previ-ous work (Haffari et al., 2009; Haffari and Sarkar, 2009), which are based on preferring sentences that contain phrases that occur frequently in un-labeled data and infrequently in the so-far labeled data. Our VG method selects sentences for transla-tion that contain n-grams (for n in { 1,2,3,4 } ) that Init: Loop until stopping criterion (see Section 3.3) is met End Loop
Figure 2: The VG sentence selection algorithm do not occur at all in our so-far labeled data. We call an n-gram  X  X overed X  if it occurs at least once in our so-far labeled data. VG has a preference for covering frequent n-grams before covering in-frequent n-grams. The VG method is depicted in Figure 2.

Figure 3 shows the learning curves for both jHier and jSyntax for VG selection and random selection. The y-axis measures BLEU score (Pap-ineni et al., 2002),which is a fast automatic way of measuring translation quality that has been shown to correlate with human judgments and is perhaps the most widely used metric in the MT commu-nity. The x-axis measures the number of sen-tence translation pairs in the training data. The VG curves are cut off at the point at which the stopping criterion in Section 3.3 is met. From Figure 3 it might appear that VG selection is better than ran-dom selection, achieving higher-performing sys-tems with fewer translations in the labeled data.
However, it is important to take care when mea-suring annotation costs (especially for relatively complicated tasks such as translation). Figure 4 shows the learning curves for the same systems and selection methods as in Figure 3 but now the x-axis measures the number of foreign words in the training data. The difference between VG and random selection now appears smaller.

For an extreme case, to illustrate the ramifica-Figure 3: Random vs VG selection. The x-axis measures the number of sentence pairs in the train-ing data. The y-axis measures BLEU score. tions of measuring translation annotation cost by # of sentences versus # of words, consider Figures 5 and 6. They both show the same three selection methods but Figure 5 measures the x-axis by # of sentences and Figure 6 measures by # of words. In Figure 5, one would conclude that shortest is a far inferior selection method to longest but in Figure 6 one would conclude the opposite.

Measuring annotation time and cost in dol-lars are probably the most important measures of annotation cost. We can X  X  measure these for the simulated experiments but we will use time (in seconds) and money (in US dollars) as cost measures in Section 5, which discusses our non-simulated AL experiments. If # sentences or # words track these other more relevant costs in pre-dictable known relationships, then it would suffice to measure # sentences or # words instead. But it X  X  clear that different sentences can have very differ-ent annotation time requirements according to how long and complicated they are so we will not use # sentences as an annotation cost any more. It is not as clear how # words tracks with annotation time. In Section 5 we will present evidence show-ing that time per word can vary considerably and also show a method for soliciting annotations that reduces time per word by nearly a factor of three.
As it is prudent to evaluate using accurate cost accounting, so it is also prudent to develop new AL algorithms that take costs carefully into ac-count. Hence, reducing annotation time burdens Figure 4: Random vs VG selection. The x-axis measures the number of foreign words in the train-ing data. The y-axis measures BLEU score. instead of the # of sentences translated (which might be quite a different thing) will be a corner-stone of the algorithm we describe in Section 4. 3.2 Managing Uncertainty One of the most successful of all AL methods de-veloped to date is uncertainty sampling and it has been applied successfully many times (e.g.,(Lewis and Gale, 1994; Tong and Koller, 2002)). The intuition is clear: much can be learned (poten-tially) if there is great uncertainty. However, with MT being a relatively complicated task (compared with binary classification, for example), it might be the case that the uncertainty approach has to be re-considered. If words have never occurred in the training data, then uncertainty can be ex-pected to be high. But we are concerned that if a sentence is translated for which (almost) no words have been seen in training yet, though uncertainty will be high (which is usually considered good for AL), the word alignments may be incorrect and then subsequent learning from that translation pair will be severely hampered.

We tested this hypothesis and Figure 7 shows empirical evidence that it is true. Along with VG , two other selection methods X  learning curves are charted in Figure 7: mostNew, which prefers to select those sentences which have the largest # of unseen words in them; and moderateNew, which aims to prefer sentences that have a moderate # of unseen words, preferring sentences with  X  ten Figure 5: Random vs Shortest vs Longest selec-tion. The x-axis measures the number of sentence pairs in the training data. The y-axis measures BLEU score. unknown words in them. One can see that most-New underperforms VG . This could have been due to VG  X  X  frequency component, which mostNew doesn X  X  have. But moderateNew also doesn X  X  have a frequency preference so it is likely that mostNew winds up overwhelming the MT training system, word alignments are incorrect, and less is learned as a result. In light of this, the algorithm we de-velop in Section 4 will be designed to avoid this word alignment danger. 3.3 Automatic Stopping The problem of automatically detecting when to stop AL is a substantial one, discussed at length in the literature (e.g., (Bloodgood and Vijay-Shanker, 2009a; Schohn and Cohn, 2000; Vla-chos, 2008)). In our simulation, we stop VG once all n-grams (n in { 1,2,3,4 } ) have been covered. Though simple, this stopping criterion seems to work well as can be seen by where the curve for VG is cut off in Figures 3 and 4. It stops af-ter 1,293,093 words have been translated, with jHier X  X  BLEU=21.92 and jSyntax X  X  BLEU=26.10 at the stopping point. The ending BLEU scores (with the full corpus annotated) are 21.87 and 26.01 for jHier and jSyntax, respectively. So our stopping criterion saves 22.3% of the anno-tation (in terms of words) and actually achieves slightly higher BLEU scores than if all the data were used. Note: this  X  X ess is more X  phenomenon Figure 6: Random vs Shortest vs Longest selec-tion. The x-axis measures the number of foreign words in the training data. The y-axis measures BLEU score. has been commonly observed in AL settings (e.g., (Bloodgood and Vijay-Shanker, 2009a; Schohn and Cohn, 2000)). In this section we describe a method for solicit-ing human translations that we have applied suc-cessfully to improving translation quality in real (not simulated) conditions. We call the method the Highlighted N-Gram method, or HNG , for short. HNG solicits translations only for trigger n-grams and not for entire sentences. We provide senten-tial context, highlight the trigger n-gram that we want translated, and ask for a translation of just the highlighted trigger n-gram. HNG asks for transla-tions for triggers in the same order that the triggers are encountered by the algorithm in Figure 2. A screenshot of our interface is depicted in Figure 8. The same stopping criterion is used as was used in the last section. When the stopping criterion be-comes true, it is time to tap a new unlabeled pool of foreign text, if available.

Our motivations for soliciting translations for only parts of sentences are twofold, corresponding to two possible cases. Case one is that a translation model learned from the so-far labeled data will be able to translate most of the non-trigger words in the sentence correctly. Thus, by asking a human to translate only the trigger words, we avoid wast-ing human translation effort. (We will show in Figure 7: VG vs MostNew vs ModerateNew se-lection. The x-axis measures the number of sen-tence pairs in the training data. The y-axis mea-sures BLEU score. Figure 8: Screenshot of the interface we used for soliciting translations for triggers. the next section that we even get a much larger speedup above and beyond what the reduction in number of translated words would give us.) Case two is that a translation model learned from the so-far labeled data will (in addition to not being able to translate the trigger words correctly) also not be able to translate most of the non-trigger words cor-rectly. One might think then that this would be a great sentence to have translated because the ma-chine can potentially learn a lot from the transla-tion. Indeed, one of the overarching themes of AL research is to query examples where uncertainty is greatest. But, as we showed evidence for in the last section, for the case of SMT, too much un-certainty could in a sense overwhelm the machine and it might be better to provide new training data in a more gradual manner. A sentence with large #s of unseen words is likely to get word-aligned incorrectly and then learning from that translation could be hampered. By asking for a translation of only the trigger words, we expect to be able to circumvent this problem in large part.

The next section presents the results of experi-ments that show that the HNG algorithm is indeed practically effective. Also, the next section ana-lyzes results regarding various aspects of HNG  X  X  behavior in more depth. 5.1 General Setup We set out to see whether we could use the HNG method to achieve translation quality improve-ments by gathering additional translations to add to the training data of the entire LDC language pack, including its dictionary. In particular, we wanted to see if we could achieve translation im-provements on top of already state-of-the-art per-forming systems trained already on the entire LDC corpus. Note that at the outset this is an ambitious endeavor (recall the flattening of the curves in Fig-ure 1 from Section 1).

Snow et al. (2008) explored the use of the Ama-zon Mechanical Turk (MTurk) web service for gathering annotations for a variety of natural lan-guage processing tasks and recently MTurk has been shown to be a quick, cost-effective way to gather Urdu-English translations (Bloodgood and Callison-Burch, 2010). We used the MTurk web service to gather our annotations. Specifically, we first crawled a large set of BBC articles on the in-ternet in Urdu and used this as our unlabeled pool from which to gather annotations. We applied the HNG method from Section 4 to determine what to post on MTurk for workers to translate. 2 We gath-ered 20,580 n-gram translations for which we paid $0.01 USD per translation, giving us a total cost of $205.80 USD. We also gathered 1632 randomly chosen Urdu sentence translations as a control set, for which we paid $0.10 USD per sentence trans-lation. 3 5.2 Accounting for Translation Time MTurk returns with each assignment the  X  X ork-TimeInSeconds. X  This is the amount of time be-tween when a worker accepts an assignment and when the worker submits the completed assign-ment. We use this value to estimate annotation times. 4
Figure 9 shows HNG collection versus random collection from MTurk. The x-axis measures the number of seconds of annotation time. Note that HNG is more effective. A result that may be par-ticularly interesting is that HNG results in a time speedup by more than just the reduction in trans-lated words would indicate. The average time to translate a word of Urdu with the sentence post-ings to MTurk was 32.92 seconds. The average time to translate a word with the HNG postings to MTurk was 11.98 seconds. This is nearly three times faster. Figure 10 shows the distribution of speeds (in seconds per word) for HNG postings versus complete sentence postings. Note that the HNG postings consistently result in faster transla-tion speeds than the sentence postings 5 .
We hypothesize that this speedup comes about because when translating a full sentence, there X  X  the time required to examine each word and trans-late them in some sense (even if not one-to-one) and then there is an extra significant overhead time to put it all together and synthesize into a larger sentence translation. The factor of three speedup is evidence that this overhead is significant effort compared to just quickly translating short n-grams from a sentence. This speedup is an additional benefit of the HNG approach. 5.3 Bucking the Trend We gathered translations for  X  54,500 Urdu words via the use of HNG on MTurk. This is a rela-tively small amount,  X  3% of the LDC corpus. Figure 11 shows the performance when we add this training data to the LDC corpus. The rect-Figure 9: HNG vs Random collection of new data via MTurk. y-axis measures BLEU. x-axis mea-sures annotation time in seconds. angle around the last 700,000 words of the LDC data is wide and short (it has a height of 0.9 BLEU points and a width of 700,000 words) but the rect-angle around the newly added translations is nar-row and tall (a height of 1 BLEU point and a width of 54,500 words). Visually, it appears we are succeeding in bucking the trend of diminish-ing returns. We further confirmed this by running a least-squares linear regression on the points of the last 700,000 words annotated in the LDC data and also for the points in the new data that we ac-quired via MTurk for $205.80 USD. We find that the slope fit to our new data is 6.6245E-06 BLEU points per Urdu word, or 6.6245 BLEU points for a million Urdu words. The slope fit to the LDC data is only 7.4957E-07 BLEU points per word, or only 0.74957 BLEU points for a million words. This is already an order of magnitude difference that would make the difference between it being worth adding more data and not being worth it; and this is leaving aside the added time speedup that our method enjoys.

Still, we wondered why we could not have raised BLEU scores even faster. The main hur-dle seems to be one of coverage. Of the 20,580 n-grams we collected, only 571 (i.e., 2.77%) of them ever even occur in the test set. 5.4 Beyond BLEU Scores BLEU is an imperfect metric (Callison-Burch et al., 2006). One reason is that it rates all ngram Figure 10: Distribution of translation speeds (in seconds per word) for HNG postings versus com-plete sentence postings. The y-axis measures rel-ative frequency. The x-axis measures translation speed in seconds per word (so farther to the left is faster). mismatches equally although some are much more important than others. Another reason is it X  X  not intuitive what a gain of x BLEU points means in practice. Here we show some concrete example translations to show the types of improvements we X  X e achieving and also some examples which suggest improvements we can make to our AL se-lection algorithm in the future. Figure 12 shows a prototypical example of our system working.
Figure 13 shows an example where the strategy is working partially but not as well as it might. The Urdu phrase was translated by turkers as  X  X owned veil X . However, since the word aligner just aligns the word to  X  X owned X , we only see  X  X owned X  in our output. This prompts a number of discussion points. First, the  X  X fter system X  has better transla-tions but they X  X e not rewarded by BLEU scores be-cause the references use the words  X  X urqah X  or just  X  X eil X  without  X  X owned X . Second, we hypothesize that we may be able to see improvements by over-riding the automatic alignment software when-ever we obtain a many-to-one or one-to-many (in terms of words) translation for one of our trigger phrases. In such cases, we X  X  like to make sure that every word on the  X  X any X  side is aligned to the Figure 11: Bucking the trend: performance of HNG -selected additional data from BBC web crawl data annotated via Amazon Mechanical Turk. y-axis measures BLEU. x-axis measures number of words annotated.
 single word on the  X  X ne X  side. For example, we would force both  X  X owned X  and  X  X eil X  to be aligned to the single Urdu word instead of allowing the au-tomatic aligner to only align  X  X owned X .

Figure 14 shows an example where our  X  X efore X  system already got the translation correct without the need for the additional phrase translation. This is because though the  X  X efore X  system had never seen the Urdu expression for  X 12 May X , it had seen the Urdu words for  X 12 X  and  X  X ay X  in isolation and was able to successfully compose them. An area of future work is to use the  X  X efore X  system to determine such cases automatically and avoid ask-ing humans to provide translations in such cases. Figure 13: Example showing where we can im-prove our selection strategy.
 Figure 14: Example showing where we can im-prove our selection strategy. We succeeded in bucking the trend of diminishing returns and improving translation quality while keeping annotation costs low. In future work we would like to apply these ideas to domain adap-tation (say, general-purpose MT system to work for scientific domain such as chemistry). Also, we would like to test with more languages, increase the amount of data we can gather, and investigate stopping criteria further. Also, we would like to investigate increasing the efficiency of the selec-tion algorithm by addressing issues such as the one raised by the 12 May example presented earlier. This work was supported by the Johns Hopkins University Human Language Technology Center of Excellence. Any opinions, findings, conclu-sions, or recommendations expressed in this mate-rial are those of the authors and do not necessarily reflect the views of the sponsor.

