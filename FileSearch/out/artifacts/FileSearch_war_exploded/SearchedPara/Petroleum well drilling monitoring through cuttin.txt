 1. Introduction
Offshore petroleum well drilling is an expensive, complex and time-consuming operation and it demands a high qualification level from the drilling executors.

One of the trends of the oil industry is the application of real time measurements and optimization of production operations with the purpose of guaranteeing a safe and effective/low cost drilling execution. Nowadays, there exists several data acquisition systems for petroleum well drilling monitoring, in which a large amount of data is generated at each time. One of these systems is the Mud-Logging, which is responsible for measuring a set of mechanical and geological parameters.

The data generated by Mud-Logging, together with the cutting analysis produced during the drilling operation, allows the drilled deep ranges defined by geology. The generated cutting samples available at the vibrating shale shakers are examined by some expert technician in order to evaluate whether a problem is occurring during the drilling process. Generally, these cuttings have similar shape and sizes in typical situations, and distortions beyond the known normal patterns can indicate the presence of some anomaly, such that the collapse of the well borehole walls ( Tavares, 2006 ).

Some works have been dedicated for monitoring the petro-leum well drilling process ( Frantiek et al., 2000; Hayajneh, 2007; Mcleod and Minarovic, 1994; de Serapi ~ ao et al., 2007; Grigorescu et al., 2008; ao Serapi and Mendes, 2009 ), but none of them were guided by the cutting image analysis. Frantiek et al. (2000) proposed to monitor the rock disintegration process at drilling with the application of acoustic signal. A fourier transform of the generated signal was performed for further statistical analysis. de Serapi ~ ao et al. (2007) used artificial immune systems for classification of several stages in petroleum drilling. Coelho et al. (2005) , Fonseca et al. (2006) and Yilmaz et al. (2002) used neural networks for monitoring drilling activities, and Serapiao et al. (2006) applied support vector machines for classification of petroleum well drilling operations.

However, its is known that an artificial neural network with multi-layer perceptrons (ANN-MLP), for example, can address linearly, piecewise linearly, and nonlinearly separable problems, but not non-separable situations ( Haykin, 1994 ). As an unstable classifier, collections of ANN-MLP ( Kuncheva, 2004 ) can improve its performance up to some unknown limit of classifiers ( Reyzin and Schapire, 2006 ). Support vector machines (SVM) have been proposed to overcome the nonlinearly separable problem, by assuming linearly separable classes in a higher-dimensional feature space ( Boser et al., 1992 ). Its computational cost rapidly increases with the training set size and the number of support multi-class problem ( Duan and Keerthi, 2005 ). Tang and Mazzoni (2006) proposed a method to reduce the number of support vectors in the multi-class problem. Their approach suffers from slow convergence and high computational cost, because they first minimize the number of support vectors in several binary SVMs, and then share these vectors among the machines. Panda et al. (2006) presented a method to reduce the training set size before computing the SVM algorithm. Their approach aims to identify and remove samples likely related to non-support vectors.
However, in all SVM approaches, the assumption of separability may also not be valid in any space of finite dimension ( Collobert and Bengio, 2004 ).

Recently, a novel graph-based cl assifier that reduce the pattern recognition problem to an optimum-path forest (OPF) computation in the feature space induced by a graph was presented ( Papa et al., a hyperplanes optimization problem, but as a combinatorial optimum-path computation from some key samples (prototypes) to the remaining nodes. Each prototype becomes a root from its optimum-path tree and each node is classified according to its (influence region) of the feature space.

The OPF classifier has some advantages with respect to the aforementioned classifiers: (i) is free of parameters, (ii) do not assume any shape/separability of the feature space and (iii) run training phase faster. The OPF classifier have been demonstrated to be superior than ANN-MLP and similar to SVM, but much faster ( Papa et al., 2009b ).

As aforementioned, the previous works use only the informa-tion provided by sensors to monitor and assess the petroleum well drilling process. Some important information, such as the cutting volume at the vibrating shale shakers, is also an important data about the drilling conditions, and can be measured using the cutting image analysis. In such a way, the main objective of this paper is to propose an intelligent system for the petroleum well drilling monitoring through cutting image analysis. The main contributions of this paper concerns with: (i) to present a computer vision-based intelligent system to monitor the drilling process, (ii) to introduce the OPF classifier in the petroleum engineering research field, (iii) to apply SVM, ANN-MLP and a
Bayesian classifier (FC) for drilling monitoring using cutting image analysis and, finally, (iv) to be the pioneer into applying also support vector regression (SVR) and fitting functions (FF) for the aforementioned purpose. As far we know, we are the first to develop a computer vision system to analyze the cutting generated by drilling and also the first ones to propose the use has improved the seminal work by Marana et al. (2009) by introducing SVR and FF for estimating the cutting volume through its image analysis, and by providing a more detailed background section about some of the artificial intelligence techniques used in this work.

The remainder of this paper is organized as follows. Section 2 presents the proposed system architecture. Sections 3 and 4 present, respectively, some review about the artificial intelligence techniques used and the experimental results. Finally, Section 5 discusses the conclusions. 2. Proposed system
This section presents the intelligent system proposed for drilling monitoring using cutting image analysis. This system is composed by two modules: (i) image acquisition and (ii) data analysis (Fig. 1 ). During the petroleum well drilling process, the generated cutting is transported through the vibrating shale shaker until a final repository. The image acquisition capture images and send them to the data analysis module, which is responsible for classifying the images obtained. If these images operator.

Nowadays, to the best of our knowledge, there not exists an image-based system like the proposed one. Based on the assumption that the cutting information is extremely important for petroleum well drilling monitoring, the proposed intelligent system has two main advantages: (i) it allows identifying anomalies in real time during the drilling operation, and (ii) it is a low cost and non-invasive system, due to the fact that it only needs a smart camera with the software installed.

Basically, the system operates by classifying each received frame from digital camera as belonging to one predefined class (Section 4). If this frame represents some kind of drilling anomaly, a technician is requested to monitor the drilling step and even so to intervine in the whole process. Depending on the cutting X  X  size and shape, a well collapse can be identified in time to avoid further damages. The main idea here, in the future, is to use the information provided by our system into Mud-Logging, aiming its better performance. 3. Artificial intelligence background
In this section we will briefly discuss some of the artificial intelligence techniques used in our work. Sections 3.1 and 3.2 present, respectively, support vector machines and support vector regression. Sections 3.3 and 3.4 address the optimum-path forest classifiers and fitting functions. 3.1. Support vector machines
One of the fundamental problems of learning theory is stated as: given two classes of known objects, assign one of them to a new unknown object. Thus, the objective in a two-class pattern recognition is to infer a function f : X -f 7 1 g X  1  X  regarding the input X  X utput of the training data ( Schlkopf and Smola, 2002 ).

Based on the principle of structural risk minimization ( Vapnik, 1999 ), the SVM optimization process is aimed at establishing a separating function while accomplishing with the trade-off that exists between generalization and overfitting.

In his former time, Vapnik (1999) considered the class of hyperplanes in some dot product space H , / w , x S  X  b  X  0  X  2  X  vibrating shale shaker where w , x A H , b A R , corresponding to decision functions f  X  x  X  X  sgn  X  / w , x S  X  b  X  X  3  X  and, based on two arguments, he proposed the generalized portrait learning algorithm for problems which are separable by hyper-planes: 1. Among all hyperplanes separating the data, there exists a unique optimal hyperplane distinguished by the maximum margin of separation between any training point and the hyperplane. 2. The overfitting of the separating hyperplanes decreases with increasing margin.

So, to construct the optimal hyperplane, it is necessary to solve minimize subject to y  X  / w , x i S  X  b  X  Z 1 for all i  X  1 , ... , m  X  5  X  with the constraint (5) ensuring that f ( x i ) will be +1 for y and 1 for y i  X  1, and also fixing the scale of w . A wide exposition of these arguments is provided by Schlkopf and Smola (2002) .

The function t in (4) is called the objective function , while (5) are the inequality constraints . Together, they form a so-called constrained optimization problem . The separating function is then a weighted combination of elements of the training set. These elements are called support vectors and characterize the boundary between the two classes.
 The replacement referred to as the kernel trick ( Schlkopf and
Smola, 2002 ) is used to extend the concept of hyperplane classifiers to nonlinear support vector machines. However, even with the advantage of  X  X  X ernelizing X  X  the problem, the separating hyperplane may still not exist. To allow that some examples may violate Eq. (5), the slack variables x Z 0 are introduced ( Schlkopf and Smola, 2002 ), which leads to the constraints y  X  / w , x i S  X  b  X  Z 1 x i for all i  X  1 , ... , m  X  6  X 
A classifier that generalizes well is then found by controlling both the margin (through J w J ) and the sum of the slacks variables
P x i . In this context, a possible accomplishment of such a soft margin classifier is obtained by minimizing the objective function  X  w , x  X  X  subject to the constraint (6), where the constant C 4 0 determines the balance between overfitting and generalization. Due to the tunning variable C , this kind of SVM is normally referred to as
C-SVC and represents SVM classification on its original form ( Cortes and Vapnik, 1995 ). 3.2. Support vector regression
The SVM framework was firstly proposed for classification purposes. Nevertheless, its intuition can be slightly modified to accomplish with more general problems called regression estima-tion . Rather than dealing with outputs y A f 7 1}, the regression case is concerned with estimating real-valued functions.
To cope with regression, a different soft margin is considered during the optimization. Such a margin is constructed by using Vapnik X  X  e -insensitive loss function ( Schlkopf and Smola, 2002 ), which quantifies the loss incurred by predicting f ( x ) instead of y as
Thus, to estimate the linear regression f  X  x  X  X  / w , x S following equation has to be minimized: 1 2
J w J 2  X  C
As in the classification case, it is possible to transform this into a constrained optimization problem by introducing slack vari-ables. Due to the nature of the constraints, here is necessary two types of slack variables for the cases f  X  x i  X  y i 4 e and y which are, respectively, denoted as x i and x i and collectively represented as x  X  X  i .

The optimization problem is then given by minimize subject to f  X  x i  X  y i r e  X  x i  X  11  X  y i f  X  x i  X  r e  X  x i  X  12  X  x , x i Z 0 for all i  X  1 , ... , m  X  13  X 
As it can be observed in (11) and (12), any error smaller than e does not infer penalties in the objective function (10). This way, a tube with radius e is fitted to the data and the trade-off between generalization and overfitting is determined by minimizing (10) ( Schlkopf and Smola, 2002 ). This sort of regression SVMs is commonly referred to as e -SVR. 3.3. Optimum-path forest classifier
Let Z 1 and Z 2 be the training and test sets with j Z 1 j and j Z samples such as points or image elements (e.g., pixels, voxels, shapes and texture information). Let l  X  s  X  be the function that s A unseen during the project.

Let S Z 1 be a set of prototypes of all classes (i.e., key samples that best represent the classes). Let v be an algorithm which extracts n attributes (color, shape or texture properties) from any sample s A Z 1 [ Z 2 and returns a vector ~ v  X  s  X  A R n d ( s , t ) between two samples, s and t , is the one between (e.g., Euclidean) or a more elaborated distance algorithm.
Our problem consists of using S ,( v , d ) and Z 1 to project an sample s A Z 2 . The OPF classifier creates a discrete optimal partition of the feature space such that any sample s A Z classified according to this partition. This partition is an optimum path forest (OPF) computed in R n by the image foresting transform (IFT) algorithm ( Falc ~ ao et al., 2004 ). 3.3.1. Training
Let ( Z 1 , A ) be a complete graph whose nodes are the training samples and any pair of samples defines an arc in A  X  Z 1 arcs do not need to be stored and so the graph does not need to be explicitly represented. A path is a sequence of distinct samples trivial if p t  X  / t S . We assign to each path p t a cost f  X  p connectivity function f . A path p t is said optimum if f  X  p for any other path t t . We also denote by p s / s , t S the concatenation of a path p s and an arc ( s , t ).

We will address the connectivity function f max : f  X  / s S  X  X  0if s A S f  X  p s / s , t S  X  X  max f f max  X  p s  X  , d  X  s , t  X g  X  14  X  such that f max  X  p s / s , t S  X  computes the maximum distance between adjacent samples along the path p s / s , t S . The mini-mization of f max assigns to every sample t A Z 1 an optimum path is
C  X  t  X  X  min The minimization of f max is computed by Algorithm 1, called
OPF algorithm ( Papa et al., 2009b ), which is an extension of the 2004 ) from the image domain to the feature space, here specialized for f max . This process assigns one optimum path from
S to each training sample t in a non-decreasing order of minimum cost, such that the graph is partitioned into an optimum-path forest P (a function with no cycles which assigns to each t its predecessor P ( t )in P n ( t ) or a marker nil when t R  X  t  X  A
S of P n ( t ) can be obtained from P ( t ) by following the predecessors backwards along the path, but its label is propagated described below, as well its explanation.
 Algorithm 1. OPF A LGORITHM I
NPUT : A training set Z 1 , l -labeled prototypes S Z 1 and the O UTPUT : Optimum-path forest P , cost map C and label map L . A
UXILIARY : Priority queue Q and cost variable cst . 1. For each s A Z 1 \ S , set C  X  s  X   X   X 1 . 2. For each s A S , do 4. While Q is not empty , do 5 : 6 : 7 : 8 : 9 : 10 : 11 :
Lines 1 X 3 initialize maps and insert prototypes in Q . The main loop computes an optimum path from S to every sample s in a non-decreasing order of minimum cost (Lines 4 X 11). At each iteration, a path of minimum cost C ( s ) is obtained in P when we remove its last node s from Q (Line 5). Ties are broken in Q using first-in-first-out policy. That is, when two optimum paths reach an ambiguous sample s with the same minimum cost, s is Line 6 is false when t has been removed from Q and, therefore,
C  X  t  X  a  X 1 in Line 9 is true only when t A Q . Lines 8 X 11 evaluate if the path that reaches an adjacent node t through s is cheaper than the current path with terminus t and update the position of t in Q , C ( t ), L ( t ) and P ( t ) accordingly.
 We say that S n is an optimum set of prototypes when
Algorithm 1 minimizes the classification errors in Z 1 . S n can be found by exploiting the theoretical relation between minimum-spanning tree (MST) ( Cormen et al., 1990 ) and optimum-path tree for f max ( All ene et al., 2007; Rocha et al., 2008 ). By computing a
MST in the complete graph ( Z 1 , A ), we obtain a connected acyclic graph whose nodes are all samples of Z 1 and the arcs are undirected and weighted by the distances d between adjacent samples). The spanning tree is optimum in the sense that the sum of its arc weights is minimum as compared to any other spanning tree in the complete graph. In the MST, every pair of samples is connected by a single path which is optimum according to f
That is, the minimum-spanning tree contains one optimum-path tree for any selected root node.

The optimum prototypes are the closest elements of the MST classes, their adjacent samples become prototypes in S n and
Algorithm 1 can compute an optimum-path forest in Z 1 . Note that, a given class may be represented by multiple prototypes (i.e., optimum-path trees) and there must exist at least one prototype per class. It is not difficult to see that the optimum paths between classes tend to pass through the same removed arcs of the minimum-spanning tree. The choice of prototypes as described above aims to block these passages, reducing the chances of samples in any given class be reached by optimum paths from prototypes of other classes. 3.3.2. Classification
For any sample t A Z 2 , we consider all arcs connecting t with samples s A Z 1 , as though t were part of the training graph.
Considering all possible paths from S n to t , we find the optimum incrementally, by evaluating the optimum cost C ( t )as C  X  t  X  X  min f max f C  X  s  X  , d  X  s , t  X gg 8 s A Z 1 :  X  16  X 
Let the node s A Z 1 be the one that satisfies Eq. (16) (i.e., the predecessor P ( t ) in the optimum path P n ( t )). Given that of t . An error occurs when L  X  s  X  a l  X  t  X  . 3.4. Fitting functions
As we know, the problem of pattern recognition rely onto labeling an unknown pattern in a predetermined class. However, there exists some applications in which we cannot deal with predefined classes, and the main objective is to estimate, for each pattern, a measure in a valued interval.

Given a set of patterns in which we know the desired measures (training set), it is possible to use this set to estimate the coefficients of a fitting function. In such a way, this function can be further used to estimate the unknown pattern measures.
Polynomial functions can be used as fitting functions. Although high order polynomials can obtain better approximation results, they require bigger training sets, and also generate oscillations in the fitted function. For instance, the polynomial of degree three for bidimensional patterns can be defined as p  X  x  X  X  p  X  X  x 1 x 2  X  X  c 1 x 3 1 x 3 2  X  c 2 x 3 1 x 2 2
As we can see, the polynomials of degree three of two variables have 16 coefficients, i.e. c i , i  X  1, 2, y ,16, which need to be estimated from the training set. 3.4.1. Cubic polynomial coefficient estimation
Let the polynomial given by Eq. (17). Suppose that we know the values of this polynomial for a set of N bidimensional patterns x  X  ( x i 1 , x i 2 ), i.e, we know the values of p ( x i ), i  X  1, the follow equation: p  X  x ^ p  X  x
The above system has 16 variables (the cubic polynomial coefficients) and N equations. Such system can be represented in the matrix formulation: p  X  x 1  X  p  X  x 2  X  p  X  x N  X  2 6 6 6 6 4 |fflfflfflfflfflffl{zfflfflfflfflfflffl}
The polynomial coefficient matrix C can be determined from the Eq. (19) as follows: P  X  XC  X  ) X T P  X  X T XC  X ) X  X T X 1 X T P  X  X  X T X 1 X T
After determining the coefficients that define the polynomial we have to do is just to apply it in the unknown patterns. 4. Experimental results
We present here the experiments for the automatic cutting image analysis, which were divided in two different rounds. In the former (Section 4.1), we classified the amount of cutting volume using supervised classification and texture information extracted from the images acquired at the vibrating shale shakers. For this purpose, we compared optimum-path forest against support vector machines, artificial neural networks with multi-layer perceptrons and Bayesian classifier. In the latter (Section 4.2), we estimated the cutting volume at real time using support vector regression and fitting functions. 4.1. Cutting volume classification
In this first experiment, we evaluate the amount of cutting volume at the vibrating shale shaker by labeling the images according to three predefined volume classes: E (none concentra-tion of cuttings at the shale  X  empty), L (low concentration of cuttings) and finally, the class H, which means high concentration of cuttings at the shale. Fig. 2 show an example from each class of cutting volume. We performed a texture analysis to create the feature vector of each image, which is composed by four Haralick (1979) texture features: energy, entropy, homogeneity and contrast. These features are simply and fast computed based on the co-occurrence matrix of each image and have been demonstrated to be very discriminative in our problem.
As aforementioned, we used for classification purposes a collection of supervised classifiers: OPF, ANN-MLP, SVM and BC, which require a labeled set of samples for training that will be used to calibrate the system. The training images were obtained by manually selecting some frames from a video (20 frames/ samples from each class) and a technician was requested to classify each frame as belonging to class E, L or H. This same technician was requested again to label the remaining images (20 samples from each class) to compose the test set, in order to allow a quantitative evaluation of the accuracy of each classifier. Essentially, we have a dataset with 120 samples equally distributed among the classes: a training set Z 1 with 50% of the samples and a test set Z 2 with 50% of the samples. These samples were randomly selected and each experiment was repeated 10 times with different sets Z 1 and Z 2 to compute the mean accuracy values. The average computational time of each classifier in minutes for training and classification is also reported.
For SVM implementation, we use the LibSVM package ( Chang and Lin, 2001 ) with radial basis function (RBF) kernel, parameter optimization and the one-versus-one strategy for the multi-class problem. We use the Fast Artificial Neural Network Library (FANN) ( Nissen, 2003 ) to implement the ANN-MLP. The network and z  X  c (number of classes) are the number of neurons in the input, hidden and output layers, respectively. For OPF we used the LibOPF package ( Papa et al., 2009a ) and for BC we used our own implementation.

Table 1 shows the mean accuracy and execution time in seconds for each classifier for recognizing the cutting density at the vibrating shale shaker for petroleum well drilling monitoring purposes.

One can see that OPF classifier outperformed all remaining classifiers, despite the fact of all of them achieved very good and similar results, which emphasize the robustness of the texture features in our problem. The OPF classifier was about 665 times faster than SVM in this case. Note that the SVM algorithm had a slow performance due to the fact of the optimization procedure implemented in the LibSVM ( Chang and Lin, 2001 ). However, by removing the optimization procedures, this processing time could be decreased. On the other hand, this could produce lower classification rates.
 4.2. Cutting volume estimation
In this section, we validate SVR and FF with a cubic polynomial function for estimating cutting X  X  volume generated during the well drilling process. We used a labeled set of frames extracted from a video sequence for training SVR and FF, and also to evaluate them. Fig. 3 shows some of these frames, as well their annotated values. Again, we used the same set of Haralick features extracted from images as aforementioned in Section 4.1 for training SVR and FF.

After training SVR and FF with 50% of the labeled set, we tested them on the remaining set. Fig. 5 displays the results.
Fig. 4 displays the volume estimation by SVR incorporated at our developed system (at the bottom-right side). Given a video of the cutting at the vibrating shale shaker, our software can estimate in real time the cutting volume by applying support vector regression. Notice that we choose SVR instead of FF due to the best results obtained by the former approach ( Fig. 5 ).
We can see that both techniques, i.e., SVR and FF with cubic polynomial function, obtained good results if we compared them with the ground truth (annotated curve). Note that SVR achieved the best results, with 0.007609 of mean squared error. The FF methodology achieved 0.008356 of mean squared error. 5. Conclusions
Well drilling monitoring is an important and crucial task to detect and prevent problems in the drilling process. Several studies have been developed for drilling inspection, but none of them take care about analyzing the generated cutting at the vibrating shale shakers during the drilling process. The cuttings shape and size, and even so its volume (density) are important features that allow us to identify possible problems during the drilling operation. Unexpected changes in the cuttings volume, for instance, can indicate a possible collapse of the well borehole walls.

Based on this assumption, we propose here an image-based well drilling monitoring intelligent system composed by two modules: data acquisition system and data analysis. The cutting images at the vibrating shale shaker were acquired and sent to the data analysis module, which was previously trained with calibrated images (labeled by a technician). The system can detect in real time anomalies with respect to changes in the cutting volume in real time using support vector regression, which can indicate a possible problem during the drilling process, and further sending warning alerts. As far we know we are the first to develop an image-based system for monitoring well drilling operations based on the cuttings analysis.

In order to asses the robustness of our systems, we conducted two series of experiments. In the former, we applied a collection of four supervised classifiers for cutting volume supervised classification: OPF, ANN-MLP, SVM and BC. The first one out-performed all the remaining classifiers, both in terms of accuracy and efficiency. The images were mapped into the feature space domain by representing each one of them with a 4-D feature vector, composed by four texture Haralick features: energy, homogeneity, contrast and entropy. This features have been demonstrated to be very robust in to discriminate each frame with respect to one of the aforementioned class: E (empty shale), L (low volume at the shale) or H (high volume at the shale).
Another contribution of our work is that we are the first to apply the OPF classifier in this field of knowledge.

In the latter experiment, we applied support vector regression and fitting function with cubic polynomial function for estimating the cutting volume at real time, in which SVR achieved the best results. Again, as far we know, we are the first into applying SVR and FF for cutting volume estimation using images obtained at the vibrating shale shakers. As future work, we intend into join our system with other commonly used well drilling monitoring system: Mud-Logging. We are nowadays working to establish a quantitative measure for cuttings volume.
 References
