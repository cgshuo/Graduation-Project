 We propose frameworks and algorithms for identifying com-munities in social networks that change over time. Com-munities are intuitively characterized as  X  X nusually dens ely knit X  subsets of a social network. This notion becomes more problematic if the social interactions change over time. Ag -gregating social networks over time can radically misrepre -sent the existing and changing community structure. In-stead, we propose an optimization-based approach for mod-eling dynamic community structure. We prove that find-ing the most explanatory community structure is NP-hard and APX-hard, and propose algorithms based on dynamic programming, exhaustive search, maximum matching, and greedy heuristics. We demonstrate empirically that the heu ris-tics trace developments of community structure accurately for several synthetic and real-world examples.
 Categories and Subject Descriptors: I.6.5 [Simulation and Modeling]: Model Development General Terms: Algorithms.
 Keywords: Dynamic Social Networks, Community Identi-fication.
Social networks are the graphs of interactions between in-dividuals, and play an important role in the dissemination o f information, innovations, or diseases. Edges can represen t social interactions, organizational structures, physica l prox-imity, or even more abstract interactions such as hyperlink s or similarity. Social networks have attracted a large amoun t of attention from epidemiologists [21, 25, 28], sociologis ts [5, 29, 38], biologists (animal interactions) [7, 6, 10, 30, 36] , the intelligence community (terrorism networks) [3, 23, 24], a nd more recently also from computer scientists [1, 11, 14, 17,
Work supported in part by the Microsoft award 14936 Work supported in part by NSF CAREER Award 0545855 18, 20, 22]. One of the most important questions in social networks is the identification of  X  X ommunities X , which are loosely defined as collections of individuals who interact u n-usually frequently [12, 13, 16, 18, 27, 38]. The identificati on of communities often reveals interesting properties share d by the members, such as common hobbies, social functions, occupations, etc. In a more general setting, including hy-perlinked documents such as the WWW, these properties include related topics or common viewpoints, which has led to a large amount of research on identifying communities in the web graph or similar settings [15, 22].

In analyzing social networks, one property has until re-cently been largely ignored: the fact that they tend to chang e dynamically. When faced with dynamic social networks, most studies would either analyze a snapshot of a single point in time, or an aggregation of all interactions over a possibly large time window. Both approaches may miss im-portant tendencies of these dynamic networks; indeed, the ongoing change of a network and its possible causes may be among the most interesting properties to observe. Consider the following simplistic scenario: individuals 1 and 2 are observed to interact at every point in time, whereas individ -ual 3 interacts with both of them about half of the time. If we may decide whether or not we consider individual 3 a full member of the community. On the other hand, if the plausible explanation is that individual 3 joined the group during the observation period.

The necessity to delve into the dynamic aspects of net-work behavior may be clear, yet it would not be feasible without the data to support such explicitly dynamic anal-ysis. Rapidly growing electronic networks, such as emails, web, blogs, and friendship sites, as well as mobile sensor networks on cars and animals, provide an abundance of dy-namic social network data that for the first time allow the temporal component to be explicitly addressed in network analysis.

Recently, Berger-Wolf and Saia [4] proposed a framework for identifying communities in dynamic social networks, ma k-ing explicit use of temporal changes. Most communities tend to evolve gradually over time (see, e.g., [2]), as opposed to assembling or disbanding spontaneously. Thus, whenever information about events in the social network is available , it is desirable to use this temporal information not only to identify communities with high intra-community similarit y, but also to observe their persistence and development.
In this paper, we propose a new framework for community identification. We assume that time is discrete, and in each time step, we observe social interactions in the form of sev-eral complete subgraphs of individuals (not every individu al needs to be observed in each time step), or affiliations [34, 35]. Based on these observed groupings, we want to identify  X  X rue X  underlying communities and their developments over time, so that most of the observed interactions can be ex-plained by the inferred community structure. We pose this question as a combinatorial optimization problem, based on the observation that individuals tend to (1) not change thei r  X  X ome community X  too frequently [2], and (2) tend to inter-act with the home community most of the time [38, p. 320](a mathematically precise definition is given in Section 2).
After formulating the problem as an optimization problem in this way, we show that it is NP-complete and even APX-hard and present algorithms to (approximately) optimize the community structure discovered. The algorithms are based on the observation that we can separate out two sub-problems: identifying which groups at time t will  X  X ecome X  which other groups at time t +1, and subsequently assigning individuals to groups. The latter part can be solved opti-mally using Dynamic Programming. The former part has a smaller search space, and is thus amenable to exhaustive search in small data sets. For larger data sets, we propose a set of greedy heuristics. These approaches are discussed in more detail in Sections 3 and 4.

In order to evaluate our proposed algorithms and heuris-tics, we consider synthetic data sets with known embedded communities, as well as two social network data sets: the well-known Southern Women data set [9, 13], capturing in-teractions of a small group of women in 1933 in Natchez, TN at multiple social gatherings, and the Grevy X  X  zebra data se t [36], capturing physical proximity within a zebra herd over a period of time. Our evaluation consists of two parts: (1) the framework, and (2) the algorithms. To evaluate the former, we use (inefficient) exponential-time algorithms to find the optimum solutions, which in turn necessitates a restrictio n to small networks. Once we establish that our framework leads to the identification of meaningful community struc-ture, we evaluate more efficient approximate heuristics on larger real-world networks. The very encouraging experi-mental results are described in Section 5.
We model social networks as (undirected) graphs G = ( V, E ). Following the motivation from social networks, the vertices V will also be called individuals, and the edges E interactions. To model dynamic interactions, we follow and slightly extend the approach of Berger-Wolf and Saia [4] and that of affiliation networks [38, Section 8]. There is a set X = { i 1 , . . . , i n } of individuals , and a sequence H = h P 1 , P 2 , . . . , P T i of observations . Each P t tion of non-empty and pairwise disjoint sets g j,t  X  X , called groups of individuals at time step t . The interpretation is that, for a time step t , the individuals of a group g j,t observed interacting with each other, but not with the indi-viduals of any other group g j  X  ,t for j  X  6 = j . Such a group may correspond to a physical or virtual gathering of its members . Notice that we do not require the P t  X  X  to be partitions; some individuals may not be observed at all at certain times.
We stress that, in the terminology we are using, groups and communities are not necessarily the same: groups cap-ture only a snapshot of interaction at one point in time, while communities are latent concepts which should explain many of the actual observed interactions, though not neces-sarily all of them.

Our framework is somewhat restrictive in the types of ob-servations it can accommodate: only transitive interactio ns are allowed. While there will certainly be scenarios in whic h non-transitive interactions between group members happen concurrently, such scenarios would make it much more dif-ficult to give meaningful graph-theoretic interpretations of  X  X ommunity X , and our definition will still capture many nat-ural real-world scenarios. Extending the allowed observa-tions to arbitrary graphs poses an interesting direction fo r future research.
 Figure 1: An example data set of 5 individuals and 6 time steps. Circles are individuals and are labeled with their IDs, rectangles are groups. Communities are identified by matching colors, and the affiliation of an individual is shown by its color.

Figure 1 shows a sample data set of 5 individuals in 6 time steps. In this data set, individuals 0 and 1 are always together in a group whenever both are present, while the other individuals take turns joining the group of the first two individuals.
Standard definitions of communities in social networks rely on various measures of cohesiveness [26; 38, Section 7. 6]. Notice, however, that identifying dense subsets staticall y is trivial in our setting; after all, we assumed that each obser -vation was a set of disjoint cliques. The interesting aspect of our formulation, and the one that requires novel approaches , is the temporal change in group membership.

In deriving an optimization formulation of community identification, we make the following explicit assumptions about the behavior of individuals: 1. In each time step, every group is a representative of a 2. An individual is a member of exactly one community at 3. An individual tends not to change its community affil-4. If an individual does change its community affiliation 5. An individual is frequently present in the group repre-
We will use these properties to define an optimization problem, in which we assign costs to deviation from the be-haviors posited above. These costs can be intuitively mod-eled as a graph coloring problem (albeit with a different objective function from traditional graph coloring).
Our graph G has one individual vertex v i,t for every indi-vidual i  X  X and each time t . In addition, there is one group vertex v g,t for every group g  X  P t 1 . For each individual i and time t  X  T  X  1, there is an edge from v i,t to v i,t +1 . Finally, we have an edge between v i,t and v g,t whenever i  X  g at time t . Figure 2 shows the graph model of the example described in Figure 1. Here, the circles are individual vertices and th e squares are group vertices.
 Figure 2: A sample graph model. Circles are in-dividual vertices, and squares are group vertices. Black circles are individuals unobserved at that time.

We define a community interpretation of a graph G as a vertex coloring f : V  X  N of G . The color of an individual vertex v i,t at time step t represents the individual i  X  X  com-munity affiliation at time t . Similarly, the color of a group vertex v g,t gives the community that g represents at time t . Notice that this definition automatically ensures that each individual belongs to exactly one community in each time step, and each group represents exactly one community. We call a community interpretation valid if and only if, for each time step t , no two groups g and g  X  share the same color. This ensures Postulate 1, namely that only one group rep-resents each community in each time step.
The group vertices can also be viewed as hyperedges and the entire structure as a hypergraph.

To measure the quality of a community interpretation, we use costs to penalize violations of Postulates 3 X 5. There ar e three different types of costs, individual , group , and color , abbreviated as i-cost , g-cost , and c-cost . To allow for differ-ent relative importance of these properties, we parametriz e the problem by non-negative parameters  X ,  X  1 ,  X  2 , and  X  . i-cost: An individual cost of  X  is incurred whenever an in-g-cost: The group cost can be incurred for two reasons: c-cost: Finally, we assign a cost of  X  for each color an
The optimization problem is then to find the valid commu-nity interpretation minimizing the total cost resulting fr om the individual edges, group edges, and color usage. Once such a coloring f has been found, we identify each commu-nity C i with the set of groups g = g j,t of color f ( v g,t The community structure is then the collection C of all com-munities. Notice that we explicitly allow a community to change or evolve over time. Once we have a community structure, we can derive from it an affiliation sequence for every individual i , the sequence A i = h f ( v i, 1 ) , . . . , f ( v of communities that i was a member of during the observa-tion period.

Notice that by altering the parameters  X ,  X  1 ,  X  2 ,  X  , we can alter the dynamic expressiveness of the model. If  X  and  X  are large, then individuals will virtually never change group membership, and we will recover the static commu-nity structure as a special case. As  X  gets smaller, more frequent changes are possible, and oscillating behavior be -tween groups can be inferred as an explanation of the obser-vations. Finally, once  X  is small as well, we will find solutions in which individuals change frequently among many groups, essentially allowing the model to accommodate frequent and complete changes of community structure. Having all pa-rameters of the same order (in our case, all equal) turns out to provide a good tradeoff to infer  X  X eaningful X  real-world dynamic behavior in most cases.
Unfortunately, solving the community interpretation prob -lem optimally is NP-complete, and cannot even be approxi-mated arbitrarily well. We formally define the decision prob -lem Community Interpretation as follows: Given cost
Note that we could of course omit the constant  X  1 term, but assigning no penalty for the first color makes a manual interpretation of results more intuitive.
 parameters  X ,  X  1 ,  X  2 , and  X  , a set X of n individuals and a sequence H = h P 1 , P 2 , . . . , P T i of observations, as well as an upper bound B on the total cost, is there a community interpretation for ( X, H ) of total cost at most B ?
Theorem 1. The Community Interpretation problem is NP-complete and APX-hard. That is, there is a constant  X  such that unless P=NP, no polynomial time algorithm can achieve an approximation guarantee better than (1 +  X  ) for Community Interpretation .

Proof. For membership in NP, simply observe that given a certificate in the form of a coloring (community interpre-tation), the total cost can be computed in polynomial time by summing up all i-costs, g-costs, and c-costs, and then compared to B .

To prove NP-hardness and APX-hardness, we give an ap-proximation preserving reduction from the Minimum Mul-tiway Cut problem, which is known to be APX-hard [8]. We reduce from the following APX-hard special case k = 3: Given an undirected graph G = ( V, E ) with unit edge costs, and three distinct terminal vertices s 1 , s 2 , s 3  X  V as well as a bound c on the total number of edges cut, is there a set C of at most c edges such that all of s 1 , s 2 , s 3 are disconnected from each other in the graph ( V, E \ C )?
Let n = | V | , m = | E | . The Community Interpretation instance has an individual for each vertex v of G . During each of the first m +1 time steps, each of the singleton groups { s 1 } , { s 2 } , { s 3 } is observed (none of the other individuals are observed during those times). Let e 1 = { u 1 , v 1 } , . . . , e { u m , v m } be an arbitrary ordering of the edges. During time step m +1+ t , exactly one group { u t , v t } is observed. That is, for each edge of G , the two endpoints are observed together exactly once. To complete the reduction, we set B = c , and  X  =  X  = m + 1,  X  1 = 0, and  X  2 = 1.

To prove that this is an approximation preserving reduc-tion, we give a cost-preserving mapping from multiway cuts to valid colorings and vice versa. First, given a cut C , let S , S 2 , S 3 be the connected components containing s 1 , s respectively. Give all vertices in S i the same color in the coloring instance. For all vertices not in any of the three components (if any), arbitrarily color them with the same color as s 1 . Finally, color each group of size 1 with the color of its unique member, and each group of size 2 with the color of one of its members. First, notice that this is a valid coloring, as in the first m + 1 time steps, all singleton groups have distinct colors, and in the remaining m time steps, there is only one group in each time step. Because individuals never change color, no i-costs or c-costs are in -curred. Thus, the only cost is  X  2 whenever an individual is present, but does not have the color of its group. This never happens for groups of one individual, and happens for groups of two individuals if and only if the corresponding edge e t is cut. Thus, the total cost is exactly the same as the number of edges cut.

Conversely, if we have a valid coloring of the observation sequence, we notice that without loss of generality, it does not incur any i-costs or c-costs, since a cheaper solution (o f cost m ) could always be obtained by simply assigning a fixed and distinct color to each individual. Second, we notice tha t each of s 1 , s 2 , s 3 must have distinct colors. Otherwise, they would incur a total g-cost of at least m + 1 during the first m +1 steps, and again, a cheaper solution could be obtained trivially by assigning all vertices a fixed distinct color. D e-fine S 1 , S 2 , S 3 to be the sets of vertices with the same color as s 1 , s 2 , s 3 , respectively. Let S 4 be the set of all remaining vertices (if any). Notice that we can assume w.l.o.g. that al l remaining vertices have the same color; otherwise, a cheape r valid coloring could be obtained by coloring all of S 4 with the same color. Let C be the set of edges cut by the partition ( S 1 , S 2 , S 3 , S 4 ). C by definition is a multiway cut separat-ing s 1 , s 2 , s 3 . Furthermore, the groups incurring a cost of  X  2 = 1 in the coloring are exactly those corresponding to edges in C , as they are the ones with two distinct vertex colors, meaning that one of the vertices must have a color different from the group. (If any group of two vertices did not have the color of either of its individuals, we could ob-tain a cheaper solution by recoloring that group.) Thus, we have proved that the size of C is exactly equal to the cost of the group coloring we started with, completing the approximation preserving reduction.

The reduction trivially implies that the problem is NP-hard: in the decision version, we make the cost bound B equal to the bound c on the number of edges cut. 2
We showed that the problem of inferring community struc-ture in dynamic networks is NP-hard. Thus, for larger in-stances, we will use heuristics or approximation algorithm s. However, before moving to fast heuristics, it is important to evaluate the conceptual power of the proposed approach. In other words, does the objective function defined above truly capture meaningful community structure, at least if the optimum solution is found? Certainly, if the objective function itself already misrepresented the desired intuit ive notion, finding fast heuristics would be a worthless endeavo r. Hence, we first present an optimal algorithm based on ex-haustive search and dynamic programming. Once we have evaluated the optimal algorithm, and shown that its results are meaningful, a secondary question will be whether the solutions discovered are less informative in the real world when heuristics are used instead of an optimal algorithm.
The key observation to making an exact algorithm some-what tractable is that once a coloring for the group vertices has been fixed, an optimum coloring for the individual ver-tices can be computed using Dynamic Programming. While the running time of the dynamic program is not polyno-mial, its only exponential dependence is 2 C , where C is the number of communities. This tends to be significantly more tractable than searching over arbitrary colorings of indiv idu-als. Since there tend to be significantly fewer group vertice s than individual vertices, an exhaustive search over all gro up vertex colorings can be feasible for smaller instances.
At the heart of the dynamic programming approach is the observation that, given a fixed group coloring, all incurred costs can be associated with one individual at a time. That is, the cost incurred by an individual does not depend on the colors chosen for other individuals, once the group colors a re fixed.

Lemma 2. Given a coloring of the group vertices, the min-imum cost coloring of the individual vertices consists of mi n-imum cost colorings of the vertices of each individual i , in-dependent of other individuals.

Proof. The total cost is the sum of all i-costs, g-costs, and c-costs, over all relevant edges. i-costs occur only for edges ( v i,t , v i,t +1 ), and thus only depend on the colors of the corresponding individual i . Similarly, g-costs arise from present or absent edges ( v i,t , v g,t ), and thus only depend on the color of individual i , for a fixed group coloring. Finally, the c-cost for an individual i clearly depends only on the colors for that individual. The total cost is the sum over all individuals and all of their edges of the corresponding i -costs, g-costs, and c-costs, and is thus minimized if the sum is minimized for all individuals i independently. 2
We will use this observation to derive an optimal algo-rithm for coloring individual vertices, given a group color -ing. For now, assume that we have such an algorithm A , which, given a group coloring f g , finds the optimum indi-vidual coloring A ( f g ) for this particular group coloring f By exhaustively trying all group colorings f g , and invoking A ( f g ) for each of them, we ensure that we will find the op-timum solution, since the optimum solution must use some group coloring, f  X  g , which the exhaustive search also tries. We will describe a dynamic programming based algorithm A first. Next, we will give heuristics to be used in place of the exhaustive search. These heuristics will not guarantee that the best group coloring f  X  g is indeed considered, but so long as a group coloring f g  X  X lose enough X  to f  X  g is tried, they will find a good solution.
By Lemma 2, it is enough to describe an algorithm for optimally coloring any one individual over the T time steps. By running this algorithm for each individual i , we obtain a complete optimal coloring. So we fix one individual i .
Let  X  denote the blank color. Let f g ( t ) be the color of the group in which i participates at time step t , f g ( t ) =  X  if and only if i was unobserved. By this convention, an individual with color  X  at time step t is said to be unaffiliated with any communities at that time step. Let C = {  X  }  X  { f g ( t ) : t = 1 , . . . , T } be the set of all group colors of i , including the blank color  X  . An optimal coloring for i can only use colors in C ; any other color would incur a c-cost and g-cost without any compensating benefit.

Let  X ( t ) = { S  X  C : 1  X  | S |  X  t } denote the collection of all possible subsets of colors used between time step 1 and t (notice that it is possible to use a color c  X  C that was not assigned to a group g during time steps 1 , . . . , t ). Let G ( t, x ) be the g-cost of coloring i at time step t with color x , I ( t, x, y ) the i-cost of coloring i at time steps t and t  X  1 with colors x and y , and C ( x, R ) the c-cost of using color x when R is the set of colors used in prior steps. Notice that G ( t, x ) , I ( t, x, y ) and C ( x, R ) can all be easily computed given the group coloring and the parameters  X ,  X  1 ,  X  2 , and  X  .

The recurrence for the minimum cost of coloring i in time step t with color x  X  S , having used all the colors in the set S  X   X ( t ), is
 X ( t, S, x ) = G ( t, x )+ (1)  X (1 , { x } , x ) = G (1 , x ) . (2)
Note that if a set R  X  C satisfies R  X  { x } = S , then R must be either S or S \ { x } . Hence, the search is only over two candidate subsets. In the initial condition (2), there i s no cost term C ( x,  X  ), as we defined the first color to be free. Because the dynamic program explicitly optimizes over all relevant choices for time steps t and t  X  1, we obtain the following Lemma by induction:
Lemma 3. Given a group coloring, the optimal cost of coloring an individual i at time step t with a color x  X  S , having used all the colors in S  X   X ( t ) , is given by the Equa-tions (1) and (2).

Applying this lemma to the end of the time horizon T , we derive the following main theorem:
Theorem 4. Given a group coloring, the minimum cost of coloring the individual i is
In analyzing the time and space requirements of the dy-namic programming approach, we first observe that we only need to retain the optimal solutions for the immediately preceding time step. Thus, the table in step t needs to plicitly still generate a table with an entry for each triple ( t, S, x ). Finding the optimum value for a triple ( t, S, x ) involves trying two different candidate sets R , each contain-ing at most | C | colors. Thus, each of the O ( T | C | 2 tries is computed in time O ( C ), for a total running time of O ( T | C | 2 2 | C | ). Finally, the Dynamic Program is run inde-pendently for each of the individuals i , giving a total run-ning time of O ( nT | C | 2 2 | C | ), with a space requirement of O ( | C | 2 | C | ).
In order to verify that the objective function captures ac-tual community structure, we first optimize it exactly, by using exhaustive search over all group colorings. As before , we consider a group coloring as a mapping f from groups g to colors N . We assume that the groups are indexed so that all groups at time step t precede all groups at time step t + 1. Then, we can simply search exhaustively over all valid assignments of color to these indexed groups. We speed up the exhaustive search by using Branch-and-Bound techniques and restricting the search space by providing a limit on the total number of colors in an optimal solution.
To avoid the exponential time required for exploring all valid colorings, we next investigate group coloring heuris tics. Once the heuristic has found a group coloring, we still apply dynamic programming to color the individuals.
Intuitively, a group coloring is good if most of the individ-uals can retain their color from one step to the next. This avoids incurring either i-costs or g-costs for those indivi du-als. We can use this intuition to derive a matching-based heuristic. For each pair g, g  X  at time steps t, t + 1, we add an edge between v g,t and v g  X  ,t +1 , with weight | g  X  g standard flow techniques, we then find a maximum weight bipartite matching among the group vertices for those two time steps. The matching then defines which group g  X   X  X n-herits X  the color of g (if any). This maximizes the number of individuals whose color of the affiliated group stays the same from t to t + 1. Since in particular with sparse group struc-tures (most individuals are absent), the maximum weight matching can be far from an optimal group coloring, we can augment the heuristic by enumerating all or many maximal matchings, and choosing from among them based on the ac-tual coloring cost. The enumeration can be done efficiently, in time O ( n ) per matching [37].

The bipartite matching heuristic intuitively aims to mini-mize i-costs, but does not take g-costs into account as much. Thus, it tends to perform well with fairly stable community membership. However, it tends not to pick out oscillations, as it only looks at consecutive time steps, and does not ob-serve trends across two or more steps. Also, while maximum flow computations tend to be fairly efficient, they may not be efficient enough for large instances, in which many such computations must be performed. We therefore consider even more efficient greedy heuristics.
The matching algorithm tries to maximize the amount of  X  X imilarity X  preserved from one time step to the next. More generally, we can define a notion of similarity for all pairs of groups g, g  X  occurring at different time steps. For concreteness, assume that the similarity is normalized to the interval [0 , 1], where 0 denotes disjoint groups, and 1 identical groups. Then, a good approach is to find a coloring maximizing the pairwise similarity over all pairs with the same color. While this problem is still NP-complete, we can use it as a point of departure for a class of greedy heuristics .
First, we need a notion of similarity between sets. Many measures have been proposed; a standard one in the liter-ature is Jaccard X  X  index [19] Jac( g, g  X  ) = | g  X  g  X  | the overlap of g, g  X  relative to the total number of elements in the sets. If we want to give more weight to similar groups in close temporal proximity, we can scale the Jaccard in-dex by the difference in time steps. Formally, we define which g and g  X  occur, respectively. There are several other natural similarity measures that can be combined with our approach. Due to space constraints, we defer a more detailed discussion to the full version of this paper.

With appropriate notions of similarity in place, we can define a class of greedy algorithms, iteratively assigning t wo groups the same color. Our algorithms are based on the idea of neighbor-joining clustering [31], and differ merely in th e order in which candidate pairs of groups are considered.
In the most basic version of the greedy algorithm, we repeatedly select the pair ( g, g  X  ) with the highest similar-ity, and decide that g, g  X  should have the same color. We thus grow  X  X ni-colored components X , much in the style of Kruskal X  X  MST algorithm. Initially, each group is its own component. We then consider the edges of non-zero simi-larity by decreasing similarity measures. If an edge e un-der consideration connects two components C, C  X  , we merge them into one component, unless they already contain groups g  X  C, g  X   X  C  X  such that both g, g  X  occur in the same time step t . In the latter case, the edge e is discarded. After all edges have been considered in this way, the algorithm terminates, and assigns each component of groups its own distinct color.

We can obtain a different greedy algorithm by proceeding in increasing order of time steps. Initially, each group at time step 1 obtains its own unique color. In iteration t , we consider all groups at time step t . We repeatedly find the edge ( g  X  , g ) connecting a group g at time step t with a group g  X  at time step t  X  &lt; t of largest similarity, and color g with the same color as g  X  , provided that no other group at time t has this color already. If g has no edge of non-zero similarity to earlier time steps, or all such colors are alre ady taken, then g obtains its own color. Once all groups at time step t are assigned colors, we move to the next iteration. We call this algorithm the Backward Greedy algorithm, because it only searches backward in its color assignments
Finally, we can obtain a somewhat more restrictive version of Backward Greedy, by requiring that the edge e point no further into the past than  X  X ecessary X . Specifically, when considering group g at time t , we find the latest time t such that g has a non-zero edge to some group g  X  at time t . Then, the highest-similarity edge is selected among all edges between g and groups at time t  X  , and g is colored accordingly, as in Backward Greedy. We call this modified algorithm Least Delay Greedy .

Obviously, since the problem is NP-complete, it is easy to derive examples where none of these heuristics will find the optimum solution. Furthermore, they are incomparable, in that for any pair, one can provide examples where one heuristic performs better than the other, and vice versa.
The main goal of our paper is to present a formal frame-work of community identification in dynamic networks and to show that it captures the concept of community. Thus, we first show that the optimization problem of community identification produces valid communities. We then show that the proposed heuristics result in communities similar to the optimum and thus perform well in practice. Since the problem is NP-hard, we can only find the optimal solution in small data sets. Thus, we first validate the dynamic com-munity framework on small synthetic data sets, and also use those small data sets to compare the heuristics to the opti-mal algorithm. Once both the definitions and the heuristics are validated, we proceed to apply them to larger practical data sets.

We begin by inferring communities in two synthetic data sets with known embedded communities. Next, we study two real-world data sets in which communities are identified by human domain experts.
We consider two data sets in which all individuals are al-ways present. As a result, we can safely set  X  1 = 0. We consider two cost settings (  X ,  X  2 ,  X  ) = (1 , 1 , 1) (high i-cost) and (  X ,  X  2 ,  X  ) = (1 , 3 , 1) (high g-cost). Intuitively, these set-tings tend to use different explanations for switches by an individual: the former tends to posit  X  X emporary aberra-tions X , while the latter assumes frequent actual affiliation changes.
 The Assembly Line example models communities in which small changes happen in each time step, aggregating to com-plete membership changes over longer periods of time. Real-world examples include companies, PhD students in a de-partment, casts of TV shows, or cells in the human body [33] (as well as contents of an assembly line). The philosophical question of what  X  X dentity X  of an organism means in light of replacement of all individual parts was already studied i n ancient Greece, and is known as Theseus X  Ship paradox [32]. An assembly line has n = km individuals and m groups. In time step t , the i th group consists of individuals ( ki + t ) mod n, . . . , ( ki + t + k  X  1) mod n . That is, in each time step, the lowest-numbered member of each group moves to the next lower group (wrapping around at n ). Figure 3 shows an example of an Assembly Line with n = 6 individuals and m = 2 groups. Figure 3: Optimal colorings of Assembly Line with costs (  X ,  X  1 ,  X  2 ,  X  ) = (1 , 0 , 1 , 1) and (  X ,  X  (1 , 0 , 3 , 1) .

Figure 3(a) shows the optimal coloring under the cost set-ting (  X ,  X  2 ,  X  ) = (1 , 1 , 1) in which i-cost is relatively high. Thus, individuals do not change colors, and the commu-nity a group represents is determined by a simple major-ity vote. In particular, the result is similar to what would be obtained by aggregating groups over time, and applying static analysis. On the other hand, with the cost setting (  X ,  X  2 ,  X  ) = (1 , 3 , 1), the g-cost is high. Figure 3(b) shows that the resulting coloring has individuals change their co m-munity membership to match their group. Thus, the iden-tity of groups stays the same even as the individual members change. We also note here that in this particular instance, the greedy heuristic leads to the optimal coloring for pa-rameters (  X ,  X  2 ,  X  ) = (1 , 1 , 1) using the Jaccard similarity measure, and for (  X ,  X  2 ,  X  ) = (1 , 3 , 1) using the JacD mea-sure.
 Another common dynamic scenario is a population with sev-eral mostly stable communities, and a few  X  X oaming X  indi-viduals, such as parents visiting their children in turn. In our example (Figure 4), we have three children (individuals 2,3,4), visited in turn by their parents (individuals 0,1), at times 1,4 (child 2), 2,5 (child 3), and 3,6 (child 4), respec-tively. The importance of this data set is that it shows a situation where the smallest number of colors needed to op-timally color the graph is strictly greater than P max , the size of the largest partition in a time step. In Figure 4, notice that with the setting (  X ,  X  2 ,  X  ) = (1 , 1 , 1), the solution ac-tually recovers the  X  X nderlying X  structure of a roaming pai r joining three communities of individuals. For this example , we observe that the greedy algorithm with either similarity measure finds the optimum solution for both cost settings. Figure 4: Optimal colorings of Dutiful Children with costs (  X ,  X  1 ,  X  2 ,  X  ) = (1 , 0 , 1 , 1) and (  X ,  X  (1 , 0 , 3 , 1) .
 Table 1: Cost comparisons on synthetic data sets.

We summarize the cost of the heuristics compared to the optimal cost in Table 1. Southern Women [9] is a data set collected in 1933 in Natchez, TN, by a group of anthropologists conducting interviews and observations over a period of 9 months. It tracks 18 women and their participation in 14 informal social events such as garden parties and card games. The event partici-pation table is shown in Figure 5, taken verbatim from [9]. The columns, each representing an event, are not ordered chronologically, but are manually arranged by the table au-thors to illustrate two communities at the upper-left and lower-right corners.
 The data set has been extensively studied, and used as Table 2: An optimal coloring on the Southern Women data set under cost setting (  X ,  X  1 ,  X  2 ,  X  ) = (1 , 1 , 1 , 1) . Cost=41 a benchmark for community identification methods [13]. A summary of the community identification results of 21 meth-ods was given by Freeman [13], and is shown as Figure 6. Figure 6: Communities in Southern Women accord-ing to the 21 methods in Freeman X  X  review.

Since there is only one group present in each time step of the data set, it is essential that we use  X  1 6 = 0; otherwise, the optimal solution would trivially be obtained by color-ing all individuals with the same color. We considered two cost settings: (  X ,  X  1 ,  X  2 ,  X  ) = (1 , 1 , 1 , 1), and (  X ,  X  (1 , 1 , 3 , 1). In the former case, temporarily switching group membership is more expensive, in the latter, being absent from a group meeting is expensive.

Tables 2 and 3 show the optimal colorings under these cost settings. The major difference between the colorings is the group color in time steps 4 and 5. Notice that our approach with both parameters correctly identifies the ex-istence of two communities, even though only one group is present in each time step. The results of most of the 21 methods proposed in the past and our results agree that the first group consists of individuals 1 X 7, and the other group consists of individuals 10 X 13. The disagreement of the 21 re -sults is also shown in the affiliation of individuals 8, 9, and Table 3: An optimal coloring on the Southern Women data set under cost setting (  X ,  X  1 ,  X  2 ,  X  ) = (1 , 1 , 3 , 1) . Cost=70. 16. It should be noted that most of the results of previously proposed approaches can be obtained using our algorithms with appropriate parameter settings. We will elaborate on this aspect in more detail in the full version of this paper.
The coloring in Table 3 may explain why the 21 methods do not agree on the affiliation of individuals 8, 10, and 16. These individuals are affiliated with both communities for almost equal amounts of time. Furthermore, individuals 17 and 18 belong to a separate community, which explains why some of the 21 methods cannot identify their community membership.

While the greedy heuristics do not obtain optimal results on this data set, they are very close to optimal. As a rep-resentative, we show the results of the greedy algorithm using the Jaccard similarity function with the cost setting (1 , 1 , 1 , 1) in Table 4. A summary of the performance of different heuristics is given in Table 5. Due to space con-straints, we defer a more in-depth discussion of the effects of heuristics to the full version of this paper.
 The Grevy X  X  zebra ( Equus grevyi ) data set was obtained by observing spatial proximity of members of a zebra herd. Populations of Grevy X  X  zebras were observed by biologists [36] over three months in 2002 in Kenya. Predetermined census loops were driven approximately twice per week. In-dividuals were identified by unique stripe patterns, and the ir locations taken by GPS. In the resulting data set, individ-uals are in the same group if their GPS locations are very close. The data set contains 28 individuals interacting ove r a period of 44 time steps. Many of the individuals are missing in many time steps.

The aggregate social network of the zebra population is shown in Figure 7. Notice that the aggregate network is very dense, and would not let us infer much interesting commu-nity structure and change by itself. Figure 8 shows the resul t of the greedy heuristic applied to the data set. While there is no agreed-upon  X  X orrect X  community structure for this relatively new data set yet, the inferred communities agree Table 4: A heuristic coloring using Jaccard simi-larity on the Southern Women data set under cost setting (  X ,  X  1 ,  X  2 ,  X  ) = (1 , 1 , 1 , 1) . Cost=44
Table 5: Cost comparison for Southern Women with those identified manually by biologists. Notice that th e dynamic interpretation lets us observe interesting phenom -ena, such as individual 3 switching its affiliation during the observation period. Such changes are obscured in the static graph. Due to space constraints, a more detailed discussion of results on this data set and the performance of different heuristics is deferred to the full version.
We have presented a framework for identifying communi-ties and their dynamics in social networks, and shown that the results are meaningful by comparing them with tradi-tional methods. For the Southern Women data set, our methods can identify the same communities as the tradi-tional methods (the 21 methods in [13]). In fact, several traditional methods for community identification are spe-cial cases of the proposed framework. Moreover, our method also gives more insight into the dynamics of communities, Figure 8: Coloring obtained with greedy heuristic and costs (  X ,  X  1 ,  X  2 ,  X  ) = (1 , 0 , 1 , 1) . answering questions such as who changes from which com-munity to which, and when.

Although our approach can find good communities, we showed that finding optimal colorings is NP-hard. We have presented heuristic algorithms which find near optimal solu -tions in practice. The next step is to devise approximation algorithms with provable guarantees in place of the heuris-tics used for our evaluations.

Finally, we have not investigated in full the scalability of the proposed heuristics to large networks observed over long time periods. This is an important property of all al-gorithms applied to current network datasets and needs to be addressed in the future.
 We would like to thank Dan Rubenstein, Ilya Fischhoff, and Siva Sundaresan of the Department of Ecology and Evo-lutionary Biology at Princeton University for sharing the Grevy X  X  zebra and the onager data. Their work was sup-ported by the NSF grants CNS-025214 and IOB-9874523. We are grateful to Jared Saia for useful discussions. [1] J. Aizen, D. Huttenlocher, J. Kleinberg, and [2] L. Backstrom, D. Huttenlocher, J. Kleinberg, and [3] J. Baumes, M. Goldberg, M. Magdon-Ismail, , and [4] T. Y. Berger-Wolf and J. Saia. A framework for [5] K. Carley, M. Prietula, and editors. Computational [6] D. P. Croft, R. James, P. Thomas, C. Hathaway, [7] P. C. Cross, J. O. Lloyd-Smith, , and W. M. Getz. [8] E. Dahlhaus, D. Johnson, C. Papadimitriou, [9] A. Davis, B. B. Gardner, and M. R. Gardner. Deep [10] I. R. Fischhoff, S. R. Sundaresan, J. Cordingley, H. M. [11] G. Flake, S. Lawrence, C. L. Giles, and F. Coetzee. [12] L. Freeman. On the sociological concept of  X  X roup X : a [13] L. Freeman. Finding social groups: A meta-analysis of [14] L. Getoor and C. P. Diehl. Link mining: a survey. [15] D. Gibson, J. M. Kleinberg, and P. Raghavan.
 [16] M. Girvan and M. E. J. Newman. Community [17] D. Gruhl, R. Guha, D. Liben-Nowell, and A. Tomkins. [18] J. Hopcroft, O. Khan, B. Kulis, and B. Selman. [19] P. Jaccard. Distribution de la flore alpine dans le [20] D. Kempe, J. Kleinberg, and E. Tardos. Maximizing [21] M. Kretzschmar and M. Morris. Measures of [22] R. Kumar, P. Raghavan, S. Rajagopalan, and [23] M. Magdon-Ismail, M. Goldberg, W. Wallace, and [24] B. Malin. Data and collocation surveillance through [25] L. A. Meyers, M. Newman, and B. Pourbohloul.
 [26] M. Newman and M. Girvan. Finding and evaluating [27] M. Newman, A.-L. Barab  X asi, and D. J. Watts, editors. [28] J. M. Read and M. J. Keeling. Disease evolution on [29] E. M. Rogers. Diffusion of Innovations . Simon &amp; [30] D. I. Rubenstein, S. Sundaresan, I. Fischhoff, and [31] N. Saitou and M. Nei. The neighbor-joining method: a [32] D. Sedley. The stoic criterion of identity. Phronesis , [33] K. L. Spalding, R. D. Bhardwaj, B. A. Buchholz, [34] G. Simmel. The Sociology of Georg Simmel . ed. by [35] G. Simmel. Conflict and the Web of Group [36] S. R. Sundaresan, I. R. Fischhoff, J. Dushoff, and D. I. [37] T. Uno. Algorithms for enumerating all perfect, [38] S. Wasserman and K. Faust. Social Network Analysis .
