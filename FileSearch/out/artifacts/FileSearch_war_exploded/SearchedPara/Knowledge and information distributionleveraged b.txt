 REGULAR PAPER Ram  X  on F. Brena  X  Jos  X  eL.Aguirre  X  Carlos Ches  X  nevar  X  Eduardo H. Ram  X   X rez  X  Leonardo Garrido Abstract Knowledge and Information distribution is indeed one of the main pro-cesses in Knowledge Management. Today, most Information Technology tools for supporting this distribution are based on repositories accessed through Web-based systems. This approach has, however, many practical limitations, mainly due to the strain they put on the user, who is responsible of accessing the right Knowl-edge and Information at the right moments. As a solution for this problem, we have proposed an alternative approach which is based on the notion of delegation of distribution tasks to synthetic agents, which become responsible of taking care of the organization X  X  as well as the individuals X  interests. In this way, many Knowl-edge and Information distribution tasks can be performed on the background, and the agents can recognize relevant events as triggers for distributing the right infor-mation to the right users at the right time.
 formation distribution, giving a high-level account of the research made around this project, emphasizing two particular aspects: a sophisticated argument-based mechanism for deciding among conflicting distribution policies, and the em-bedding of JITIK agents in enterprises using the service-oriented architecture paradigm. It must be remarked that a JITIK-based application is currently being implemented for one of the leading industries in Mexico.
 Keywords Knowledge management  X  Multiagent systems  X  Defeasible argumentation 1 Introduction Information and Knowledge (IK) are each day more valuable assets in modern organizations [ 3 , 13 , 32 ]. Indeed, a central concern in Knowledge Management from/to other relevant actors. IK distribution systems could be visualized as a kind of information switch , which finds adequate routing paths for IK from sources to consumers X  X he latter being normally humans and members of the given organi-zation (employees, partners, etc.).
 they can be classified in  X  X ush X  and  X  X ull X  modalities [ 18 ]. Push modality means that a system delivers information to a user without the user initiative (like the email delivery) whereas pull modality means that a user actively gets information from an electronic resource, typically the Web. The so-called  X  X ush technologies X  (also called  X  X ebcasting X ,  X  X etcasting X  and other names) were proposed in the 90s as an alternative way to distribute IK to users [ 18 ]. In this type of systems, the user selects information  X  X hannels, X  and/or fills a  X  X ser profile X  and gets updated information from these selected channels. Push systems sounded promising, be-cause the user could be relieved from getting information updated, which is for sure a boring and repetitive task. Advocators of push systems claimed that users would be poured with a wealth of useful information by just staying  X  X lugged X  to their information sources. Though push systems have made their way since the 90 X  X  [ 22 ], their application as a general information distribution paradigm is nowadays fairly restricted [ 8 ], mainly due to problems related to the bandwidth efficiency, and the flooding of information to users.
 been proposed by Nicholas Negroponte [ 36 ]. His proposal consists of a delegation paradigm for user interaction with the computer, aiming to gradually replace the dominating  X  X oint-and-click X  interaction paradigm. In the latter, the user asks di-rectly for an action to be executed on the computer (for example, double-clicking an item), and an immediate answer is expected from the computer. In contrast, in the delegation paradigm, the user delegates some more or less permanent tasks to the computer, which is expected to execute the  X  X ppropriate X  actions at the  X  X ight X  times, instead of immediately.
 cal terms through a number of the emerging agent technologies [ 7 , 48 ]. Agent technologies are by no means monolithic pieces of knowledge, but rather encom-pass many aspects which promote the delegation paradigm (such as communica-tion, coordination techniques, cooperation, autonomy, competition, distribution, mobility, among other issues). Agents are long-life autonomous computational processes which thrive to achieve their goals (eventually goals delegated by a user or another agent), and which interact with the external world or with other agents [ 48 ]. Intelligent Agents offer the promise of much more modularity, flex-ibility, and adaptability when building complex systems, particularly multiagent systems [ 48 ]. This requires the development of specialized methodologies and al-gorithms which allow agents to communicate and interact by coordinating, coop-erating, competing with other agents, etc.
 14 , 15 ], a knowledge and information distribution approach based on the idea of of delegation of distribution tasks to synthetic agents, which became responsible for taking care of the organization X  X  as well as the individuals X  interests. In this way, many Knowledge and Information distribution tasks are performed on the back-ground, and the agents can recognize relevant events as triggers for distributing the right information to the right users at the right time. In our approach, users are represented by personal agents , and a community of specialized agents takes care of different aspects of information distribution. Currently, we are implementing a particular version of our framework for one of the leading industries in Mexico. 1 tion distribution among the members of a large or distributed organization, giving a high-level account of the research made around this project. Our presentation will emphasize two particular aspects: the definition of a sophisticated argument-based mechanism for deciding among conflicting distribution policies, and the embedding of JITIK agents in enterprises using the service-oriented architecture paradigm. The rest of this paper is organized as follows: Sect. 2 summarizes the main aspects of the JITIK framework. We will describe how ontologies are han-dled within JITIK, and which kind of services are available. In particular, we will describe a formalization of information distribution which will be useful for mod-eling the argument-based mechanism for dealing with conflicts among distribution policies. Next, in Sect. 3 , we present a case study, similar to an application we are currently implementing in an enterprise, which will serve as an example for specific technologies presented in later sections of the paper. Section 4 presents an argument-based formalization which allows to cope with such conflicts. We provide a detailed example, based on the case study, along with a description of the underlying argument-based formalism. Section 5 analyzes how JITIK can be embedded in enterprise systems by means of Web Services under the Service-Oriented Architecture paradigm. Section 6 discusses the main contributions of the proposed approach as well as some related work in the area. Finally, Sect. 7 summarizes the most important conclusions that have been obtained. 2 The JITIK approach JITIK [ 1 , 9 , 10 ] is a multiagent-based system for disseminating pieces of IK among the members of a large or distributed organization, thus supporting a Knowledge-management function. It is aimed to deliver the right IK to the ad-equate people just-in-time.
 the members of the organization. They filter and deliver useful content according to user preferences. The Site Agent provides IK to the Personal Agents, acting as a broker between them and Service agents. Service agents collect and detect IK pieces that are supposed to be relevant for someone in the organization. Examples of service agents are the Web Service agents, which receive and process external requests, as well as monitor agents which are continuously monitoring sources of IK (Web pages, databases, etc.). Other Service agents monitor at time intervals the state of an IK resource, like a Web page, data in an enterprise X  X  database, etc. bers of the organization and about its structure [ 12 ]. That knowledge is hierarchi-cally described in the form of taxonomies, usually one for interest areas and one describing the structure of the organization. For example, in an academic insti-tution, the interest areas could be the science domains in which the institution is specialized, and the organizational chart of the institution gives the structure of the organization. This is going to be further described in the following sections. eral personal agents served by the former. In an organization, clusters would be associated to departments, divisions, etc., depending on their size. Networks can be made up connecting several site agents. Distributed organizations like multina-tional companies would have a web of many connected site agents. 2.1 Ontology handling in JITIK In JITIK, we declared users and information attributes through the use of the so-called ontologies [ 5 ]. Ontologies are structured representation of concepts, classes, individuals, properties, and other categories. We used open standards like DAML-OIL [ 24 ], which allow to publish in the Internet ontological knowledge in a way understandable both by humans and machines.
 and distributed ontology storage. We call this method  X  X ybrid X  local-global This allows to fine-tune the percentage of ontologies that is stored locally at each per-sonal agent, and the remaining ontologies are going to be stored in a central-ized, Internet-accessible ontology agent (OA). Personal agents are endowed with a  X  X lient ontology component X  (COC) which gives it basic ontology handling ca-pabilities. This arrangement works in the following way:  X  Standard agents start with a subset of a common ontology, which is loaded at  X  When further knowledge is required X  X or instance, an unrecognized term ar-edge in the COC. If necessary, the COC makes a query to the OA, and interprets and uses the answer, and eventually incorporates it into the local knowledge. In [ 16 ], we provide empirical evidence that shows that our hybrid local-global ap-proach can be more efficient than both a completely centralized and a completely distributed approach. 2.2 JITIK services Among the services provided by JITIK, we have the following.
 Recommendation services : A user X  X  profile is represented by a set of points in the Subscription services : JITIK allows users to subscribe to changes in specific ar-Content distribution services : Enterprise applications can deliver content to the 2.3 Formalizing IK distribution in JITIK As explained earlier, JITIK aims at disseminating pieces of IK among the mem-bers of a large or distributed organization, thus supporting a Knowledge-manage-ment function. The Site Agent is in charge of providing IK to the Personal Agents, acting as a broker between them and Service agents. Clearly, in large or distributed organizations, there are usually complex decision-making situations regarding IK distribution, specially in the presence of potentially incomplete information con-cerning metadata and user profiles, as well as competing policies ,whichmaybe complicated and could include several exceptions. Therefore, it is important that Site agents are provided with appropriate knowledge representation and inference capabilities to solve such problems.
 Agent has to solve, namely distributing items among users according to possibly conflicting policies. Consider a set I ={ i 1 , i 2 ,..., i k } of information items, which has to be distributed among a set U ={ u 1 ,..., u s } of users. Every item i  X  I should be delivered to only a distinguished subset User  X  U . To accomplish this task, the Site Agent will apply a distribution policy p that can be formally defined as a mapping p : I  X   X ( U ) . Distributing an item i to a user u is compliant with a policy p when ( i , { ..., u ,... } )  X  p .
 this way, but instead they are specified by a number of constraints enforced by the organization (e.g., access rights). If P is a set of possible policies in the or-ganization, given two policies p 1 , p 2  X  P , we say they are in conflict whenever ( i , { ..., u ,... } )  X  p that an information item i cannot be compliant with two policies p 1 and p 2 at the same time. We can define a dominance partial order  X  among possible policies in P , writing p 1  X  p 2 to indicate that a policy p 2 is preferred over policy p 1 in case they are in conflict. In this setting, the  X  X nformation distribution problem X  to be solved by a JITIK Site Agent could then be recast as follows: Send every informa-tion item i  X  Itoauseru  X  U following a distribution p iff p is compliant with every nondominated policy p  X  P. 2 the following particular feature: a policy p i can be dominated by another policy p ,making p i not valid. However, p j can on its turn be dominated by another pol-icy p k . If that is the case, the policy p i may be perhaps valid again (as the policy p j was  X  X efeated X  by policy p k ). Such a situation can be recast in an argument-based system for defeasible reasoning [ 17 ], in which defeasible rules (i.e., rules supporting conclusions that may be no longer valid when new information is avail-able) are allowed. By chaining defeasible rules to reach a conclusion, we have arguments instead of proofs. Arguments may compete, rebutting each other, so a process of argumentation is a natural result of the search for arguments. Adjudi-cation of competing arguments must be performed, comparing arguments in order to determine what beliefs are ultimately accepted as warranted or justified . Pref-erence among conflicting arguments is defined in terms of a preference criterion which establishes a relation  X   X  among possible arguments. 3 A case study In this section, we will illustrate how JITIK Agents work in the context of a real-world problem. To do so, we will describe a generic application similar to the one we are currently implementing for one of the leading industries in Mexico. 3 Con-sider a  X  X ews center X  in a big enterprise, where a flow of news is originated, both from internal and external news. News are  X  X agged X  both by human employees and by automated text classifiers. Once the information is tagged, the problem is to deliver those news to the right persons in the company by considering their in-formation needs as well as their preferences and roles in the company. Information flow of this case study is depicted in Fig. 2 .
 means of news classification into a set of categories which are organized in a tree. In this tree, a broad area like  X  X arketing X  has subareas like  X  X V advertis-ing, X  which, in turn, may have subareas. Users select a collection of nodes in this tree in order to describe their information interests. Some of the information needs of users are determined  X  X  priori X  by the company without user intervention, as, for instance, when an information area matches an employee X  X  department or role (for example, anybody in the marketing department is likely to receive useful in-formation on marketing). Whether the individual policies prevail over corporate case that some information items may correspond to sensitive information, so that they are not delivered to anybody (so that a level of authorization or permission is required).
 provided earlier for information distribution. For example, consider the problem of distributing information according to the hierarchical classification tree of topics. Suppose a user u  X  U has selected as his/her interests the set of topics T = { t ,..., t represent the  X  X opic tag X  of an information i by  X ( i ) and the  X  X ubarea X  relation by  X  . Then, we are defining a policy where u is going to receive any information i such that ( X  ( i ), t k )  X   X   X  ,where t k  X  T and  X   X  is the transitive closure of  X  , meaning that if a user selects a topic t k he/she is automatically interested in any subtopic of t k .
 JITIK Site Agents in terms of Defeasible Logic Programming [ 21 ], an argument-based logic programming formalism. As a basis for our discussion, we will con-sider a particular case study related to a news center. 4 Modeling reasoning in JITIK site agents via argumentation As explained in Sect. 2.3 , Site agents will be in charge of applying such distribu-tion policies, and consequently they should be provided with appropriate knowl-edge representation and inference capabilities to solve such problems. In order to provide a rationally justified procedure for deciding which IK item goes to which user, we will rely on an argument-based logic programming language called De-feasible Logic Programming (DeLP).
 decade as a successful approach to formalize defeasible, commonsense reason-ing. Recent research has shown that argumentation can be integrated in a growing number of real-world applications in a broad scope of areas such as legal reason-ing, natural language processing, clustering, analysis of news reports [ 25 ], and others. 4.1 Defeasible logic programming: formalizing argumentation in JITIK In what follows, we will summarize the fundamentals of Defeasible logic pro-gramming (DeLP) [ 21 ] in a particular general-purpose defeasible argumentation formalism based on logic programming. 4 and stand for sets of strict and defeasible knowledge, respectively. The set of strict knowledge involves strict rules of the form p  X  q 1 ,..., q k and facts (strict rules with empty body), and it is assumed to be noncontradictory (i.e., an atom P and its negation cannot be derived from ). The set of defeasible knowledge involves defeasible rules of the form p q 1 ,..., q k , which stands for  X  q 1 ,... q k provide a tentative reason to believe p . X  The underlying logical language is that of extended logic programming, enriched with a special symbol  X   X  to denote defeasible rules. Both default and classical negation are allowed (denoted not and  X  , resp.). Syntactically, the symbol  X   X  is all that distinguishes a defeasible rule p q 1 ,... q k from a strict (nondefeasible) rule p  X  q 1 ,..., q k . DeLP rules are thus Horn-like clauses to be thought of as inference rules rather than implications in the object language. Deriving literals in DeLP results in the construction of arguments .
 Definition 4.1 (Argument) Given a DeLP program P ,an argument A for a query q , denoted A , q , is a subset of ground instances of defeasible rules in P and a (possibly empty) set of default ground literals  X  not L , X  such that: 1) there exists a defeasible derivation for q from  X  A ;2)  X  A is noncontradictory (i.e,  X  A does not entail two complementary literals p and  X  p (or p and not p)), and 3) A is minimal with respect to set inclusion.
 A arguments that can be derived from P .
 derivation used in logic programming, performed by backward chaining on both strict and defeasible rules; in this context a negated literal  X  p is treated just as a new predicate name no p . Minimality imposes a kind of  X  X ccam X  X  razor prin-ciple X  [ 42 ] on arguments. The noncontradiction requirement forbids the use of (ground instances of) defeasible rules in an argument A whenever  X  A entails two complementary literals.
 Definition 4.2 (Counterargument X  X efeat) An argument A 1 , q 1 is a counter-argument for an argument A 2 , q 2 iff 1. There is an subargument A , q of A 2 , q 2 such that the set  X  X  q 1 , q } is 2. A literal not q 1 is present in some rule in A 1 .
 terion among conflicting arguments. An argument A 1 , q 1 is a defeater for an argument A 2 , q 2 if A 1 , q 1 counterargues A 2 , q 2 , and A 1 , q 1 is preferred over A 2 , q 2 wrt . For cases (1) and (2) earlier, we distinguish between proper and blocking defeaters as follows:  X  In case 1 , the argument A 1 , q 1 will be called a proper defeater for A 2 , q 2  X  In case 1 ,if A 1 , q 1 and A , q are unrelated to each other, or in case 2 , arguments, preferring those arguments which are more informed or more direct [ 42 , 43 ]. However, other alternative partial orders could also be used. ments. This leads to a recursive analysis, in which many alternative argumentation lines can be computed. An argumentation line startinginanargument A 0 , Q 0 ...] that can be t hought of as an exchange of arguments between two parties, a proponent (evenly-indexed arguments) and an opponent (oddly-indexed argu-ments). Each A i , Q i is a defeater for the previous argument A i  X  1 , Q i  X  1 in the sequence, i &gt; 0. In the same way as in an exchange of arguments between hu-man contenders, an argumentation line  X  A 0 , q 0 is won by the proponent if he/she presents the last argument (i.e.,  X  A 0 , q 0 has odd length k = 2 p + 1, p &gt; = 0); otherwise, the line is lost . An argument A 0 , q 0 is warranted iff all argumenta-tion lines rooted in A 0 , q 0 are won. In order to avoid fallacious reasoning, there are additional constraints (viz., disallowing circular argumentation, enforcing the use of proper defeaters to defeat blocking defeaters, etc. 5 ) on such an argument exchange to be considered rationally valid. On the basis of such constraints, ar-gumentation lines can be proven to be finite. Given a DeLP program P , solving a query q 0 wrt P can result in three different answers: a) YES (there is some war-ranted argument A 0 , q 0 ); b) NO (there is some warranted argument A 0 ,  X  q 0 ); c)
UNDECIDED (neither a) nor b) hold). An efficient inference engine based on an extension of Warren X  X  Abstract machine for P ROLOG is available to solve queries in DeLP. 6 4.2 Reasoning in JITIK under DeLP: proposed approach The JITIK framework, as it stands, can take into consideration hierarchies for users and content classification for determining how distribution rules are to be applied. In the case of policies with exceptions, or competing policies, special-ized criteria have to be explicitly encoded in both Site and Personal agents. In many respects, such an approach is undesirable. On the one hand, such changes involve modifying the underlying decision algorithm. The correctness of such changes may be difficult to test, as unexpected side-effects might arise for new future cases. On the other hand, the knowledge engineer should be able to encode knowledge as declaratively as possible, including the possibility of representing competing policies. Such knowledge should be independent of the rational pro-cedure for determining which is the winning policy when conflicting situations arise.
 porating distribution policies for Site Agents explicitly in terms of defeasible logic programs. As explained in Sect. 2 , a JITIK Site Agent Ag S is responsible for distributing IK among different Personal Agents Ag 1 ,..., Ag n . We will use DeLP programs to represent the knowledge of these agents. Thus, preferences of different Personal Agents Ag 1 ,..., Ag n will be represented as DeLP programs P be represented by another DeLP program P S . In contrast with the programs asso-ciated with Personal Agents, this program P S will contain corporate rules defining hierarchies and (possibly conflicting) policies for IK distribution among personal agents.
 Site Agent Ag S among different Personal Agents Ag 1 ,..., Ag n , a distinguished predicate distribute ( I , User ) will be used to determine whether a particular IK item I  X  L is intended to be delivered to a specific user User . This query will be solved by the DeLP inference engine on the basis of a program P which will take into account the Site Agent X  X  knowledge, the metadata corresponding to the incoming items to be distributed and the personal preferences of the dif-ferent users involved. This is made explicit in an algorithm shown in Fig. 3 . Solving queries based on the distribute predicate wrt the DeLP inference engine will automate the decision making process for Site Agents, providing a ratio-nally justified decision even for very complex cases, as we will see in the next section. 4.3 An example: distributing items at the news center In this section, we take the case study of Sect. 3 as an example of how DeLP is integrated into the JITIK system to distribute IK items to users using the described argumentation framework. So, we are assuming a  X  X ews Center X  that distributes news to users according to their interests as well as the corporate policies. In such a corporate environment, there would be people with different rights and respon-sibilities (CEO, managers, supervisors, etc.). These people (users) will belong to different areas of the organization (production, marketing, etc.), and will have different personal interests and preferences which are characterized by their cor-responding Personal Agents. In our example, IK items will correspond to memos, which have to be delivered by a Site Agent to different users according to the orga-nization policies. Personal interests and preferences of the different users involved should also be taken into account.
 chies . Thus, for example, a hierarchy of topics for news could be  X  X omputers X  hardware X  X rocessors. X  The Site Agent is required to take this into account, per-forming inheritance reasoning to infer consequences related to subareas: if a user is not interested in news related to hardware, he will not be interested in news related to processors either. Note that other organization policies could add excep-tions to such hierarchies, e.g. by stipulating that a certain news item is mandatory, and should be delivered without consulting the user preferences.
 Agent will correspond to different news, which will be encoded with a predicate inf o ( Id , A , L , M , T , S ) , meaning that the news item with unique identifier Id is about area A and it can be accessed by users of at least level L . Other attributes associated with the news item are whether it is mandatory ( M = 1) or optional ( M = 0), top secret ( T = 1) or not ( T = 0), and is originated at source S . Thus, the fact indicates that the news item id 3 is about computer s , it is intended at least for man-agers, it is not mandatory nor secret, and it has been produced by the department of marketing. 4.4 Characterizing organization knowledge in site and personal agents Figure 4 shows a sample DeLP code associated with a Site and a Personal agent in our organization. 7 Strict rules s 1  X  s 9 characterize permissions and extract informa-tion from news. Rule s 1 defines that a user P is allowed access to item I if he/she has the required permissions . Granted permissions are given as facts ( f 1 , f 2 and f ). Permissions are also propagated using the strict rules s 4 , s 5 and s 6 ,where the binary predicate depends establishes the organization hierarchy, stating that the first argument person is (transitively) subordinated to the second one. This predicate is calculated as the transitive closure of a basic predicate subordinate (defined by facts f 4 and f 5 ), which establishes subordinate relationships pairwise. Thus, having, e.g., granted permissions as CEO allows the CEO to have access to every memo corresponding to lower level permissions. Note that the predicate subordinate uses generic roles as arguments, not specific person identifiers. among subfields. The basic case corresponds to a subfield for which specific in-formation is available (rule s 2 ). Note that in our particular example facts f 6 and f 7 define the basic relationships in this hierarchy. Finally, rules s 7  X  s 9 define auxil-iary predicates source , mandatory (yes/no) and topsecret (yes/no) which allow to extract these particular attributes from the news to be distributed that just extract information from info , facts, simplifying the subsequent analysis.
 when an item I is usually of interest for a specific user U , on the basis of the user X  X  personal preferences. Rule d 2 and d 4 define a policy for news distribution in our organization: a) an item (memo) I should be delivered to a user U if he is allowed to read this news item, and it is mandatory for him to read it; b) an item I should be delivered to a user U if he is allowed to read it, and it is interesting for him. Rule d 3 provides an exception for mandatory news: users which have at least permission as managers are not forced to read news they are not interested in, unless they are top secret ones. 8 Agent (e.g., Joe). A number of facts represent Joe X  X  preferences: which are his interest fields, and his personal belief about other parts of the organization (e.g., reliability with respect to the source of incoming memo). 9 Joe can provide also a number of defeasible rules associated with his preferences. Rule d 1 establishes that Joe is not interested in a news item coming from an unreliable source. Rule d 2 defines how to handle  X  X egative inheritance X  within the hierarchy of interests: Joe is not interested in any area A which is a subarea of another area Super A ,such that Super A is not interesting for him (e.g., if he is interested in computers but not interested in hardware, he will not be interested in a news item about processors, as processors are a subarea of hardware). 4.5 Solving conflicts for information distribution as DeLP queries Let us assume that there is a list of information items [ Ne w s 1 , Ne w s 2 , Ne w s 5 ] corresponding to news items to be distributed by our Site Agent, which encodes organization policies as a DeLP program P S . By applying the algorithm given in Fig. 3 , these items will be encoded temporarily as a set P items = { inf o ( Ne w s 1 ) , inf o ( Ne w s 2 ) , inf o ( Ne w s 5 ) } (see Fig. 4 ).
 sonal Agent involved, associated with a specific user joe , whose role is manager . Joe X  X  Personal Agent mirrors his preferences in terms of a DeLP program P joe = { d edge necessary to decide which IK items should be delivered to this specific the DeLP program P S  X  P items  X  P joe . We will show next how every one of these queries is solved in different examples that show how DeLP deals with conflicts among organization policies and user preferences.
 Example 4.1 Consider the query distribute ( id 1 , joe ) . In this case the DeLP in-ference engine will find the argument A 1 , distribute ( id 1 , joe ) , with 10 A 1 = However, in this case, a defeater A 2 ,  X  interest ( id 1 , joe ) for the argument
A
Note that in this case, id 1 comes from an external source, and according to joe  X  X  preference criteria, external sources are unreliable. Hence, the Site Agent will not deliver this information item to him. There is a single argumentation line with two There are no other arguments to consider, and A 1 , distribute ( id 1 , joe ) is not warranted.
 Example 4.2 Consider now the query distribute ( id 2 , joe ) . There is an argument
B This argument has no defeaters, and hence only one associated argumentation line [ B Example 4.3 Finally consider the query distribute ( id 5 , joe ) . There is an argu-ment C 1 , distribute ( id 1 , joe ) , with C 1 = However, in this case, a defeater C 2 ,  X  interest ( id 5 , joe ) for the argument
C As in Example 4.1 , the argument C 1 , distribute ( id 1 , joe ) is not war-ranted. The DeLP inference engine searches then for alternative arguments for distribute ( id 5 , joe ) . There is another one, namely D 1 , distribute ( id 5 , joe ) , with D 1 = which in this case is defeated by another argument D 2 ,  X  mandatory ( id 5 , joe ) , with D 2 = which is on its turn defeated by a third, empty argument D 3 , topsecret ( id 5 ) , with D 3 =  X  (note that topsecret ( id 5 ) is logically entailed by the strict knowl-edge of the Site Agent, and hence no defeasible information is needed). Argu-ment D 3 , topsecret ( id 5 ) defeats D 2 ,  X  mandatory ( id 5 , joe ) , reinstating the argument D 1 , distribute ( id 5 , joe ) . Thus an argumentation line of three argu-ments is associated with C 1 , distribute ( id 1 , joe ) , so that in this particular case the argument D 1 , distribute ( id 5 , joe ) is warranted.
 Agent will proceed to deliver only news items id 2 and id 5 to joe  X  X  Personal Agent, but not news item id 1 . 5 Embedding JITIK agents in an enterprise system using Web Services As stated in Sect. 2 , the JITIK framework goals demand a seamless integration of its agent components with other technologies like Web servers, databases, etc. Indeed, such lack of integration in other agent-based systems has been one of the main factors hindering their widespread use [ 48 ]. Thus, we have proposed an alternative approach to integrating agents with conventional Internet-based software. Our proposal is by no means a radical departure from other ones, but we have shown [ 40 ] that in many contexts it is much simpler, cleaner, and efficient than competing ones. called  X  X ervice-Oriented approaches X  (SOA) [ 2 ], which could be described as:  X  X he architectural style that supports loosely coupled services to enable business flexibility in an interoperable, technology-agnostic manner. SOA consists of a composite set of business-aligned services that support a flexible and dynam-ically reconfigurable end-to-end business processes realization using interface-based service descriptions X  [ 6 ].
 and flexibility on which information systems may be designed and integrated when compared to code-centric previous approaches. There exists three roles or actors in a SOA: a service consumer , first locates a service provider in a service registry or broker, then binds the service description, and finally performs an in-vocation to the provider. The loose coupling principle suggests that the operations between actors should be carried out interchanging as little information as possi-ble, usually through message passing.
 plementation technology, the Web Services standards are becoming a natural and common choice for implementing it. For the purposes of this work, we understand a Web Service as  X  X  software system designed to support interoperable machine-to-machine interaction over a network. It has an interface described in a machine-processable format (specifically WSDL [ 51 ]). Other systems interact with the Web Service in a manner prescribed by its description using SOAP-messages [ 52 ], typ-ically conveyed using HTTP with an XML [ 50 ] serialization in conjunction with other Web-related standards [ 53 ]. X  still far from becoming mainstream in enterprise applications [ 49 ], delivering their promise of robust and flexible new-generation information systems. Some reasons for this can be traced back to methodological or cultural issues [ 47 ], but we think integrating agents and composing their function and services rely on low-level communication mechanisms [ 31 ], which have very little to do with enterprise-wide integration issues.
 the technical limitations required to integrate a MultiAgent System into an enter-prise service-oriented environment. In a similar way, the SOA ideas can be trans-lated to the application internals to allow agents to provide a stable framework for building robust Agent-based applications. A number of recent works report how the SOA approach has been applied in several AI and multiagent systems and components (e.g., [ 41 , 54 ]).
 tegrating a MultiAgent system into an enterprise environment consists of decou-pling applications through the exposure of  X  X oarse-grained X  service interfaces. As shown in Fig. 5 , the underlying metaphor used to determine the design strategy was the aim to create a  X  X lack-box X  in which agents can live and perform com-plex knowledge-intensive tasks. Neither enterprise applications nor its developers should be aware that a service is provided by agents if the system offers a standard SOAP endpoint as interface. Several integration architectures for agent-based ap-plication exist (e.g., ref. [ 46 ]). However, a particular approach called  X  X mbedded Web Service Architecture (EWSA) X  has proven to be enough simple and effec-tive for this purpose, with a clear focus on agent-to-application communication. The proposal X  X  main idea suggests embedding a Web Server into an agent-based application and defining an interaction model upon which software agents and Web-components [ 44 ] may communicate in order to provide services. Details on the approach can be found in ref. [ 40 ].
 mentum for intra-application component communication. The SOA paradigm has been reinforced by a new generation of noninvasive lightweight frameworks (e.g. [ 28 , 29 ]) that leverage contemporary software design principles and allow ap-plication developers to produce enterprise-level, yet simple applications. The use of a lightweight framework like Spring [ 26 ] helps agent project teams to decom-pose an application in to simple components that access and reuse a collection of platform services, thus simplifying programming and allowing a greater abstrac-tion to the specific agent development.
 ture (shown in Fig. 6 ) where some general-purpose services may be provided by robust third-party tools. Each of the boxes in Fig. 6 represents a platform service that is configured and instantiated by the lightweight container; the container also fulfills the  X  X ervice registry X  role described earlier. Each platform service is com-posed of a particular kind of application component concerning a specific techni-cal domain. The layer metaphor gives an insight about the abstraction level of each application tier, where high-level service components (i.e., Web-components and agents) consume the services of low-level components (i.e., data-access objects). study causes the flow of events between services and agents as described in Fig. 7 . The flow of events goes as follows:  X  Once the user of the content management system (CMS) publishes a new ar- X  After that, the classification service will attempt to match a set of topics for  X  When the content is classified, the request is passed into the agent-layer where  X  Finally, relevant information will be delivered to users through the internal tom services (shaded) like the Scheduling and Notification services. For this spe-cific case, services were defined and implemented as follows: Embedded Web Server : Implemented using the Tomcat Web Server [ 27 ], it pro-Agent platform : The execution environment for the agents provided by the agent Scheduling service : Allows the agents and users of the applications to schedule Notification service : Allows the agents and Web-components to access the enter-Semantic processing service : Provides access to a set of classification and infer-Persistence service : Implemented using the JDBC API and the components in and implemented on the Agent platform, enabling agents with the capability of invoking any of the underlying platform services. We believe that the use of such a framework becomes critical in agent projects where the agent developers do not share the same set of skills and concerns enterprise application developers have. In such cases, the use of service-oriented principles helps such heterogeneous de-velopment teams to achieve a clear division of work. 6 Discussion: related work We contend that an agent-based approach to IK distribution could overcome the limitations of older systems based on older delegation-based systems, like push technologies. Indeed, according to ref. [ 18 ], the reasons why push technologies were not as successful as they were supposed to be were mainly (a) excessive network load ;(b) Excessive intrusion ; and (c) Information overload . with information they actually do not consult, this implies a bandwidth waste. Of course, the critical aspect here is that the amount of received information out-weighs by several orders of magnitude the actual information users need. The resulting information overload is indeed a major concern. The whole idea of push systems is to increase individual efficiency, and not hindering it with masses of useless information to consult. In that respect, we think that the usefulness of in-formation is the one critical issue for the usability of push systems. So, the next question to solve is how to be more selective about the pushed information. Sect. 4 , the enterprise representatives made clear to us that avoiding information overflow was a major concern. Reaching that goal in JITIK was possible mainly due to two aspects:  X  In JITIK we  X  X ailor X  information to users using metadata of both of them in a  X  At the site-agent level, the use of sophisticated inference mechanism, like for distributing knowledge and information on the basis of an argument-based ap-proach. In ref. [ 35 ] the authors present a defeasible reasoning method for dealing with workflow processes, and it shares some goals with our work, as they also are able to deal with exceptions and imprecise information, but the application domain is quite different. A somehow related research is reported in ref. [ 34 ] about meth-ods for helping in decision-making processes using argumentation. Besides the differences in the intended application of this system, there is also an important difference in the approach as they use static predefined argumentation schemas, whereas here we propose a general method for constructing arguments that is not restricted to a finite number of argument structures. Other works related to ours involve decision making and negotiation using argumentation among agents [37 X  39] In contrast, in our system, the argumentation process itself is not distributed, and it always takes place in the DeLP inference engine called by the Site Agent. Other argumentation-based decision-support proposals focus on the planning pro-cess for workgroup support, like the  X  X ialectical planning X  of Karacapilidis [ 30 ]. In none of the earlier-mentioned references, the problem of IK distribution is con-sidered as is done in this paper.
 7Conclusion In this paper we have presented the JITIK approach to model knowledge and infor-mation distribution, giving a high-level account of the research made around this project. We presented its basic architecture, as well as some additional technolo-gies that gave it more flexibility, like the use of argumentation-based reasoning procedures and integration technologies for agents making use of Web Services. tive architectures and technologies, supporting thus the claim that it is possible to build intelligent delegation-based systems to distribute knowledge and infor-mation in a flexible and efficient way. In particular, we have presented a novel argument-based approach for supporting IK distribution processes in large orga-nizations by providing an integration of the JITIK multiagent platform with a de-feasible argumentation formalism. The main advantage obtained through the use of an argumentation engine in JITIK is an increased flexibility, as it is not neces-sary to explicitly encode actions for every possible situation. This is particularly important in corporate environments with potentially conflicting IK distribution criteria.
 an implementation project of an information distribution center in one of the lead-ing industries in Mexico. Although such project has involved integrating a large agent-based platform in a complex enterprise software environment, the results obtained so far have been successful and very promising. In the near future, we also intend to extend our approach for a distributed version of DeLP that could al-low several JITIK Site Agents to perform collaborative decision making. Research in this direction is currently being pursued.
 References Author biographies
