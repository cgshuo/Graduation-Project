 Web forum is a special kind of online portal for the internet users to discuss on specific topics. Nowadays, web forum is quite popular. Everyday thousands of hundreds of postings are created by millions of users in web forums. These postings cover very broad topics and they are also great knowledge sources for people. For example, someone who is planning to buy a car will deliver a posting to ask for recommendation in an auto forum. Other users of this forum, who are familiar with this area, probably give a reply. This kind of information from web forums is more comprehensive and objective than that from company website. Commercial search engines, such as Google [1]and Yahoo! [2], have indexed some part of webpages in web forums. We find that if the submitted queries have the keywords  X  X ow to X , the search results returned always contains many webpages from web forums. There is no doubt that the huge volume of information hidden in the forum website should not be neglected, and how to effectively utilize these information has become a valuable issue.

Link analysis is one of the most common methods to rank webpages. The fa-mous PageRank, a hyperlink based link analysis algorithm, has been proved very effective by Google and other commercial search engine for ranking webpages. In link analysis algorithm, there are two basic assumptions [3]:(1) A link from page A to page B is a recommendation of page B by the author of page A.(2) If page A and page B are connected by a link, the probability that they belong to the same topic is higher than not connected. However, these assumptions are not so reliable. The navigational and ad links don X  X  mean any recommendation. The webpages connected by those kinds of links are often irrelevant [4]. Therefore, they are noisy hyperlinks and should not be used for link analysis to rank. In web forums, the situation is worse. Ther e are few links created by users or edi-tors. Most postings are generated automatically by forum system. The purpose of this kind of links is to provide the function of navigation or other operations like creating posting or replying posting. Therefore, the link analysis algorithm based on these noisy links is not reasonable.

In this paper, a novel posting rank algorithm named PostingRank is pro-posed. The repliers, who reply postings, are taken into consideration in posting importance calculation. Because most hyperlinks in the web forum are noisy, those hyperlinks can X  X  be used for postings importance score calculation. We utilize the relationship of postings X  repliers to build an implicit link graph. The behavior of users X  reply shows their inter ests or concerns about postings, which can be regarded as recommendation. One posting may be replied by many dif-ferent users and the users may reply many postings. The Postings replied by the same repliers have correlation. The more common repliers, the more related the two posting are. That the postings have common users means they are rec-ommended by same users, which can be considered as mutual recommendation through those co-repliers. We exploit this relation between the repliers, build implicit links between postings which have common repliers, and the weight of link is proportioned to the ratio of the common repliers among all repliers. After that, a link graph can be obtained. Then we can use iterative algorithm like traditional hyperlink based link analysis algorithm to rank postings.
The rest of this paper is organized as follows. In Section 2, we review the recent works on link analysis and forum search. In Section 3, we present our Postin-gRank algorithm, including implicit link building and link graph construction. Our experimental results are given in Section 4. Finally, we summarize our main contributions in Section 5. 2.1 Previous Work on Link Analysis The link analysis technology has been widely used to analyze the web pages importance, such as HITS [5] and PageRank [6, 7].

In HITS, a two level weight propagation is proposed. Every page is thought to have two important properties, called hub and authority. The good hub pages have links pointing to many good authority pages, and good authority pages have links from many good hub pages. Thus the score of a hub (authority) is the sum of the score of conn ected authorities (hubs):
PageRank models the users X  browsing behaviors as a random surfing model, which assumes that a user either follows a link from current page or jumps to a random page in the graph. The PageRank of a page p i is computed by the following equation: where  X  is a damping factor, which is always set as 0.15; n is the number of nodes in whole web graph; and outdegree ( p j ) is the number of hyperlinks in page p j . Both of above algorithm could be computed in an iterative way. 2.2 Previous Work on Forum Search Xu [8] noticed the problem that the traditional link-based ranking algorithm is ineffective for forum search and proposed a ranking algorithm named FGRank , which introduces the content similarities into the link graph to build a topic hier-archy, and calculates the postings score based on the topic hierarchy. To generate the topic hierarchy, a method named hierar chical co-clustering is used. However, the result of clustering may be not satisfying on large scale. Moreover, the quality of postings content is not reliable. Many postings only have a few words and it X  X  difficult to cluster these kind of postings simply based on their content. Our work is different in introducing the reply information into algorithm framework. Formally, in our framework, a set of web forum users u i , i =1 , ..., n and a set of postings p j , j =1 , ..., m are dealed with. The goal of PostingRank is to compute the postings importance. In this sect ion, we present how to form a data model and how to rank postings based on that model. 3.1 Data Model: Reply Graph To use PostingRank, the implicit link graph should be constructed first. The link between posting p i and posting p j is built if p i and p j have common users and the weight can be calculated as follows: where U i denotes the set of repliers of p i and | X | denotes the cardinality of a set. A link graph can be obtained after building all links between posting pairs, which we name Reply Graph . Now we compute the ( | P | X | P | )matrix R ( P denotes the set of postings). R contains the weight of link( p i ,p j ), . Noticing that w ij equals to w ji ,and  X  i, R ii =0,so R is a symmetrical matrix. Then We normalize the matrix R as follows and D is the diagonal matrix with D ii equal to the sum of the i th row of R . 3.2 PostingRank Algorithm The idea underlying PostingRank is spreading the repliers recommendation through the reply graph. The spreading scores should decay as propagation, because after many times spreading, t he recommendation eff ect is decreased. So the algorithm we apply should have two key properties: propagation and atten-uation. These properties reflect two key assumptions. First, the good postings are always related to other good postings. Through the Reply Graph we can find probably a good postings. Second, the postings replied by many user should rank highly. The postings with more repliers are more likely to share larger number of repliers with other postings. SALSA [9] has both propagation and attenuation properties we need. Consi dering the generic graph G =( V, E ), the authorities of all nodes n  X  V can be calculated by iterating following equation: where a is the authority vector and W r denote the matrix derived from affinity matrix W for graph G by normalizing the entries such that, for each row, the sum of the entries is 1, and let W c denote the matrix derived from affinity matrix W for graph G by normalizing the entries such that, for each column, the sum of the entries is 1. Then the stationary distribution of the SALSA algorithm is the principal left eig envector of matrix W T c W r [9]. We replace W T c W r with normal-ized matrix  X  R to calculate the a . Finally, we combine the postings importance score obtained in the iterate procedure with the forum sites importance score given by Google. p i  X  X  postingRank score a i = a i  X   X  i ,where  X  i is the importance coefficient of the forum site where p i is from.

We define PostingRank procedure as follows: 1. Calculate the link weight w ij for each pair of ( p i ,p j ) 2. Form a matrix R ,theentry R ij equals to w ij . Symmetrically normalize R 3. Initialize all elements in a (0) to 1. 4. Iterate the following equation until a converge: 5. Combine a with forum sites importance to generate a 3.3 Convergence Issue We now prove that the iterate procedure converges as n increases arbitrarily. It result from linear algebra [10] states that if M is a symmetrical n  X  n matrix, and v is a vector not orthogonal to the principal eigenvector w i ( M ), then the vector v in the direction of M k v converges to w i ( M )as k increases without bound. If
M has only nonnegative entries, the the principal eigenvector of M has only nonnegative entries. The matrix  X  R is a symmetrical matrix, so a will converges to the principal eigenvector of  X  R [5]. 3.4 Improved PostingRank Algorithm According to our observation, we find that it is likely that the replies at the end of reply list are not relevant to the first posting in the group when there are too many replies. For instance, some user, who wonder which is better between Chevy and Ford, would post his question in an auto related board in web fo-rum. Other users reply this posting and discuss on this topic. After some replies, someone proposes that GM is better. Then the discussion shifts to the topic of which is the best among GM, Chevy and Ford. The later replier may not reply to the topic starter, but to other former repliers. We name this phenomenon  X  X opic drift X . This kind of replies may not mean that the repliers are interested in original topic. As the number of replies increases, the probability of the topics drift become larger. We should punish this kind of replies. To model the phe-nomenon above, we improve our method to calculate the link weight. To handle the irrelevant replies problem, we set a threshold t . We also take the replies order into consideration. We prune the common repliers if they reply the posting after t replies. We introduce a decaying factor to decrease the influence of topic drift. The formula to calculate the weight w ij can be re-written as follows: c ( k ) = 1 when the k th replier of p start from 2, because k = 1 is the topic starter. log b k is the decaying factor, and t is for tuning. Based on the new weight, a new Reply Graph can be obtained. Other procedure is the same as original PostingRank. To evaluate our proposed algorithm, we compare the retrieval performance of well-known ranking algorithms versus the proposed algorithms. 4.1 Experiments Setting The data for experiment are crawled from web forums, which covered 8 top-ics,including auto,computer,and etc. More than 2 million webpages are crawled. In this data set, postings are divided into groups according to their reply re-lation, which means that the postings regarding the same detailed topic, like  X  X hich is better CHEVY or FORD X , will be grouped together. After prepro-cess, we get about 538,691 groups. Among all groups, 192,727 groups have not any replies and 5,288 groups have replies but not common replies with other groups. In this data set, there are 319,991 unique usernames and no anonymous user among them, so each username will be considered as a unique user. On average, each posting has about 9.29 repliers.The largest number of repliers in a group is 21,131.

To evaluate the algorithms, we need to co llect the queries. There are two query sources. Some queries are collected by re fining the frequently asked questions fromtheforumsitesintoquerytermsas[8].Otherqueriesarelongqueriesabout the very 8 topics manually selected from a commercial search engine query log. Finally, we obtain 25 representative queries (e.g.  X  X ORD X ). we manually judge the relevance of returned search result s. Each returned posting is labeled as relevant or irrelevant result.

We compare our proposed algorithm with BM2500 score [11] and PageRank [6, 7]. Here we don X  X  use FGRank [8] as comparison candidate since the features used for link analysis are quite different. FGRank introduces content to link building but we don X  X . The replier information are utilized in our algorithm. We use the content of postings to calculate BM2500 score. We linearly combine BM2500 score with the link-based importance score ,namely PageRank and PostingRank, as follows: where s i is the overall score of p i and  X  is the combination parameter
To evaluate the algorithms, the parameters are tuned to achieve the best performance. For PageRank, the damping factor is set as 0.15. For improved PostingRank, t is set as 50 and b is set as 2 according to tuning. 4.2 Evaluation and Results Here we use P@10 and Means Average Precision (MAP) as the evaluation metrics for they are widely used in TREC and the details can be found in [12].
After about 40 times iteration, the algorithm converges. The PostingRank scores of the postings without replies are zero. It is reasonable that if nobody is interested in that posting or nobody can answer the question in the posting, the posting is useless.
 Fig. 1 shows the performance comparison between three algorithms. Improved PostingRank get the best performance, outperforms PageRank and BM2500 by 5.4% and 11.2% on P@10 and by 4.1% and 8.6% on MAP,respectively. It also outperforms original PostingRank by 2.4% on P@10 and 1.9% on MAP. As the postings in web forums are topics-orien ted, the performance is higher than the general web search task. To understand whether these improvements are statisti-cally significant, we performed t-tests. It shows that our algorithm significantly improve the search result based on MAP measure. But our improvements on P@10 failed to pass t-test.

Fig. 2 shows the performance of improved PostingRank changes with param-eter t .Atfirst,as t increases, the performance is improving. The reason is that more useful replies are included. But when t is larger than 50, the performance is deteriorated, since too many noisy replies are included. Because of the noisy link environment in web forums, the traditional linked-base algorithm like PageRank is not suitable for ranking postings. In this paper, we introduce the replier information to rank postings. We exploit the relation of co-repliers between each pair of postings, build implicit link between postings and generate a reply graph for our PostingRank. As the experiments demonstrated, PostingRank and improved PostingRank algorithm proposed in this paper, out-perform other ranking methods.

In this work, we conduct the experiments on the dataset we crawled. In future, we hope to make a standard dataset for forum search. We will try to extract more features from web forum to improve the performance of ranking method for postings.

