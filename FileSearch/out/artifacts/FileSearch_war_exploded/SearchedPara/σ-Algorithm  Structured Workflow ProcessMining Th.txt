 A Workflow Management System (WfMS) is defined as a system that (partially) automates the definition, creation, execution, and management of work processes through the use of software that is able to interpret the process definition, inter-act with workflow participants, and invoke the use of IT tools and applications. Steps of a work process are called activit ies, and jobs or transactions that flow through the system are called workcases or workflow instances. Such a WfMS and its related technologies have been constantly deployed and so gradually hot-issued in the IT arena. This atmosphere booming workflows modeling and reengineering is becoming a c atalyst for triggering emergence of the concept of workflow mining that rediscovers severa l perspectives X  X ontrol flow, data flow, social, and organizational perspectives X  X f workflows from workflow execution histories collected at runtime.

In this paper, we especially focus on the control flow perspective of the work-flow mining functionality. A workflow model is described by several entities, such as activity, role, actor, invoked applications, and relevant data. The control flow perspective specifies the transition pr ecedences X  X equential, conjunctive(AND) and disjunctive(OR) execution sequences  X  X mong the activities, and it is repre-sented by the concept of workflow process model defined in this paper by using the graphical and formal notations of the information control net (ICN)[10]. Also, we assume that the workflow proces s model keeps the proper nesting and the matched pairing properties in modeling the conjunctive and the disjunctive transitions X  X ND-split, AND-join nodes and OR-split, OR-join nodes X  X n or-der to compose a structured workflow model[16]. Based upon the concept of the structured workflow process model, we p ropose a workflow process mining algo-rithmthatisameansofrediscoveringas tructured workflow process model from log of activity execution events. A workflow event log is typically an interleaved list of events from numerous workcases X  X orkflow instances.

In the remainder of this paper, we are going to show that our mining algorithm is able to handle all of the possible activity execution cases through the concepts of temporal workcase. At first, the next section presents the meta-model of the structured workflow process model with gr aphical and formal notations. In the main sections of this pape r, we present a workflow process mining framework and the detailed description of the workflow process mining algorithm with respect to its basic principles and constructs with some examples. Finally, we discuss the constraints of the workflow process mining algorithm and its related work. In this paper, we use the information control net methodology[10] to represent wokflow models. The information control net (ICN) was originally developed in order to describe and analyze information flow by capturing several entities within office procedures, such as activit ies, roles, actors, precedence, applica-tions, and repositories. It has been used within actual as well as hypothetical automated offices to yield a co mprehensive description of activities, to test the underlying office description for certain flaws and inconsistencies, to quantify certain aspects of office information flow, and to suggest possible office restruc-turing permutations. In this section, especially, we focus on the activities and their related information flows by de fining structured workflow process model through its graphical and formal representations. 2.1 Graphical Representation As shown in Fig. 1, a workflow process model consists of a set of activities connected by temporal orderings called activity transitions. In other word, it is a predefined set of work steps, called activities, and a partial ordering (or control flow) of these activities. Activ ities can be related to each other by com-bining sequential transition types, disjunctive transition types (after activity  X  A , do activity  X  B or  X  C , alternatively) with predicates attached, and conjunctive transition types (after activity  X  A , do activities  X  B and  X  C concurrently). An activity is either a compound activity containing another subprocess, or a ba-sic unit of work called an elementary act ivity. An elementary activity can be executed in one of three modes: m anual, automatic, or hybrid.
 2.2 Formal Representation The structured workflow process model needs to be represented by a formal no-tation that provides a means to eventually specify the model in textual language or in database, and both. The following definition is the formal representation of the structured workflow process model: Definition 1. Structured Workflow Process Model(SWPM). Abasicstruc-tured workflow process model is formally defined through 4-tuple  X  =(  X ,  X , I , O ) over an activity set A , and a transition-condition set T ,where  X  I is a finite set of initial input repositories, assumed to be loaded with infor- X  O is a finite set of final output repositories, which is containing information  X   X  =  X  i  X   X  o ,  X   X  =  X  i  X   X  o , Summarily, the structured workflow process model will be constructed by Struc-tured Modeling Methodology[16] preserving the proper nesting and the matched pairing properties, and its formal definition implies that the structured ordering of a workflow process model can be inter preted as the ordered combination of the following basic transition types graphically depicted in Fig. 1. (1) Sequential Transition (2) OR Transition (3) AND Transition In this section, we propose a workflow mining framework that eventually redis-covers a structured workflow process model from the workflow execution events log. The framework is made up of a series of concepts and algorithms. How-ever, we particularly focus on the mining algorithm and its directly related con-cept X  X emporal workcase. Finally, in ord er to prove the correctness of the algo-rithm, we show how it works for a typical structured workflow process model, as example, comprising the three types of control flow transition. 3.1 Framework The workflow process mining framework is illustrated in Fig. 2. The framework starts from the event logs written in XWELL (XML-based Workflow Event Log Language)[7], by which the workflow event logging mechanism of a workflow en-actment engine stores all workflow process e xecution event histories triggered by the engine components. The XWELL needs to be standardized so that hetero-geneous workflow mining systems are able to collect the event logs without any additional data transformations. In general, the event logs might be produced by the workflow engine X  X  components, like event triggering components , event formatting components and event logging components . Once, a log agent receives event logs and then transforms them into XML-based log messages, and store the transformed messages onto the Log File Storage.

Based on the XML-based event logs on the log file storage, we can build a workflow process mining warehouse that shapes into a cube with three dimen-sions, such as workflow process models, te mporal workcases, and activities. From the cube we extract a set of temporal workcases (traces) that is instantiated from a structured workflow process model. A temporal workcase is a temporal order of activity executions within an instance of the corresponding workflow process model, and it will be formally represented a workcase model. The details of the temporal workcase and its related models are precisely defined in the next sec-tion. Finally, the workflow process mining algorithm rediscovers a structured workflow process model by incrementa lly amalgamating a series of workcase models,  X  1  X   X  n , one-by-one. The details of the algorithm and its operational example are described in the next sections, too. 3.2  X  -Algorithm This section gives a full detail of the workflow process mining algorithm and demonstrates the algorithm X  X  correctness though an example of structured work-flow process model. In order to mine a workflow process model if we use one of the existing algorithms[9], we have to assume that there might be many and pos-sibly infinite workflow process models (if fake activities are allowed) that could be mined from a set of traces, even though some of these models are very easy to compute, the others are not, and that we must pick one reasonable model out of the infinitely many models as a final output of the algorithm. However, we take a fundamentally different approach to conceive an algorithm. More specifically, our algorithm will build up one reasonable model by amalgamating one trace after another, each of which is embodied in a workcase model. In summary, the central idea of our approach is as follows:  X  The algorithm repeatedly modifies a temporarily rediscovered workflow pro-3.2.1 Workflow Traces: Temporal Workcases As a workflow process instance executes, a temporal executi on sequence of its activities is produced and logged into a database or a file; this temporal execution sequence is called workflow trace or temporal workcase , which is formally defined in Definition 3. The temporal workcase is made up of a set of workflow event logs as defined in the following Definition 2. Also, we would define the concept of workflow process log in Definition 4, which is produced from a set of temporal workcases spawned from a single structured workflow process model.
 Definition 2. Workflow Event Log. Let we =(  X , pc , wf , c , ac , X , p  X  , t , s ) be a workflow event, where  X  is a workitem (activity instance) number, pc is a pack-age number, wf is a workflow process number, c is a workflow instance (case) number, ac is an activity number,  X  is an event type, which is one of { Scheduled, Started, Changed, Completed } , p is a participant or performer, t is a timestamp, and s is an activity state, which is one of { Inactive, Active, Suspended, Com-pleted, Terminated, Aborted } . Note that * indicates multiplicity.
 In general, we consider a workflow event log to be stored in an XML format. An XML based workflow event log language has been studied and proposed in [7] for the purpose of workflow mining. Because of the page length limitation, we now assume to simply use the language to describe the XML schema of a workflow event logs in this paper.
 Definition 3. Workflow Trace (Temporal Workcase). Let WT( c )bethework-flow trace of process instance c ,whereWT ( c )=( we 1 ,..., we n ) .Especially,the workflow trace is called temporal workcase, TW( c ), if all activities of its under-lined process instance are successfully completed. There are three types of tem-poral workcases according to the events type X  X cheduled, Started, Completed:  X  ScheduledTime Temporal Workcase  X  StartedTime Temporal Workcase  X  CompletedTime Temporal Workcase As shown in the definition of temporal workcase, there are three types of tem-poral workcases differentiated from the temporal information (the event X  X  times-tamp) logged when the corresponding activity X  X  workitem event was happened. Originally, in the workflow event log sch ema[7], the events that are associated with the workitem are related to Scheduled , Started and Completed in order to form the types of temporal workcases to be used in the workflow mining algorithm.
 Definition 4. Workflow Process Log and Warehouse . Let I i = { c i 1 , ..., c i m } be a set of completed process instances ( m is the number of the process instances) that have been instantiated from a workflow process model, I i .Aworkflowpro-where WL ( I i )=  X  WT ( c i  X  I i ) ,and n is the number of workflow process models managed in a system.
 Based on these defined concepts, we are able to prepare the temporal work-cases that become the input data of the workflow mining algorithm proposed in this paper. Additionally, according to the types of temporal workcases, we can build three different types of workflow process logs and their warehouses as defined in Definition 4. Conclusively speaking, the workflow mining algorithm may consider taking the temporal workcases, as input data, coming from one of three workflow process warehouse types X  X cheduledTime-based Warehouse, StartedTime-based Warehouse, and CompletedTime-based Warehouse. Also, the algorithm may simultaneously take two types of temporal information such as ScheduledTime/CompletedTime or StartedTime/CompletedTime to rediscover structured workflow process models. In this case, the algorithm needs to take two types of the temporal workcases, each of which is belonged to its warehouse type, respectively. The algorithm pres ented in this paper will be taking care of the StartedTime-based workflow process warehouse as the source of the tempo-ral workcases. Nevertheless, it is sure for the algorithm to be able to be extended so as to handle two types of the temporal workcases as its input data. 3.2.2 Workcase Model Each of the temporal workcases, as the input data of the algorithm, is represented into a workcase model through a series of converting operations of the algorithm. In the following Definition 5, we formally define the workcase model, and also it can be graphically represented, too, as shown in Fig. 3. The primary reason we use the formal workcase model is that because it is surely convenient in composing the workflow mining algorithm.
 Definition 5. Workcase Model (WCM). A workcase model is formally defined through 3-tuple W =(  X , P , S ) over an activity set A ,where  X  P is a predecessor activity of some external workcase model, which is con- X  S is a successor activity of some external workcase model, which is connected  X   X  =  X  i  X   X  o , 3.2.3 The Basic Amalgamating Principles As described in the previous section, a structured workflow process model is designed through the three types of control transitions X  X equential, disjunctive and conjunctive transition X  X ith keeping the matched pair and proper nesting properties. Therefore, the workflow mining algorithm must be obligated to redis-cover these transitions by amalgamating the temporal workcases of a workflow process log. The basic idea of the amalgamation procedure conducted by the algorithm is to incrementally amalgamate one workcase model after another. Also, during the amalgamation procedure works, the most important thing is to observe and seek those three types of transitions.

Precisely, the basic amalgamating principles seeking each of the transition types are as follows: if a certain activity is positioned at the same temporal order in all workcase models, then the activity is to be involved in a sequential transition; else if the activity is at the d ifferent temporal order in some workcase models, then we can infer that the activity is to be involved in a conjunctive transition; otherwise if the activity is either presented in some workcase models or not presented in the other workcase models, then it has got to be involved in a disjunctive transition.

As simple examples of the amalgamating principles, we algorithmically illus-trate the amalgamation procedures rediscovering a conjunctive transition and a disjunctive transition through simple examples. As an example of the conjunc-tive transition, suppose we examine the workflow process log of a structured workflow process model that has three activities, a 1 , a 3 and a 4 ,andtrytoamal-gamate two specific workcase models; the temporal order of a 3 and a 4 in one workcase model, is reversed on the oth er workcase model. Therefore, we can infer that the activities, a 3 and a 4 , are involved in a conjunctive transition of the structured workflow process.

As an example of the disjunctive transition, we also assume that we examine the workflow process log of a structured workflow process model that has four the temporal order of a 1 and a 5 in one workcase model is same on the other workcase model; also, the positions of a 3 and a 4 on the temporal order are same in these two workcase models respectively, and, while on the other, the activities, a 3 and a 4 , are not presented in these two workcase models at the same time. transition of the structured workflow process. 3.2.4 SWPM Rediscovering Algorithm Based upon the basic amalgamating principles, we conceive a workflow mining algorithm in order to rediscover a reasonable structured workflow process model from a workflow process log. We name it  X  -Algorithm , because its basic idea is to incrementally amalgamate the temporal workcases, which is just reflecting the conceptual idea of the summation operator( ) in mathematics. Because of the page limitation we would not make a full description of the algorithm in here. However, we just introduce the detailed algorithm as follows, which is pseudo-coded as detail as possible with some explanations in comments, so that one is able to easily grasp the algorithm without the full description.
 Finally, the algorithm X  X  operational example is algorithmically illustrated in Fig. 3. The right-hand side of the figure is the rediscovered structured workflow process model that the algorithm mines from the temporal workcases, which are the typical four temporal workcases possibly produced from the original structured workflow process model. As mig ht be expected, the algorithm doesn X  X  care the original model; nevertheless, we need it to generate a set of temporal workcases and verify the algorithm. Fortunately, we are able to imagine that the original model produces the following four StartedTime temporal workcases : a  X  a 3.3 Constraints of the Algorithm As emphasized in the previous sections, this algorithm is operable on the con-cept of structured workflow process model that retains the proper nesting and matched pair properties[16]. Keeping t hese properties caus es to constrain the algorithm as well as the modeling work; nevertheless, it might be worthy to preserve the constraints b ecause they can play a very i mportant role in increas-ing the integrity of the workflow model. Additionally, not only the improperly nested workflow model makes its analysis complicated, but also the workflow model with unmatched pairs may be stuck and run into a deadlock situation during its runtime execution.

Another important issue in designing workflow mining algorithms is about how to handle loop transitions in a workflow process model, because they may produce not only a lot of workflow event logs but also much more complicated patterns of temporal workcases. Precisely, accord ing to the number of repetitions and the inside structure of a loop transition, t he model X  X  execution may generate very di-verse and complicated patterns of temporal workcases. Therefore, the algorithm proposed in this paper has got to be extended in order to properly handle the loop transitions. We would leave this i ssue to our future research work. So far, there have been several workflow mining related researches and develop-ments in the workflow literature. Some of them have proposed the algorithms [1,3,4,5,8,9,11,13,15] for workflow mining functionality, and others have devel-oped the workflow mining systems and tools[2,6]. Particularly, as the first in-dustrial application of the workflow mining, J. Herbsta and D. Karagiannisb in [2] presented the most important results of their experimental evaluation and experiences of the InWoLvE workflow mining system. However, almost all of the contribution are still focusing on the development of the basic functional-ity of workflow mining techniques. Especially, W.M.P. van der Aalst X  X  research group, through the papers of [1,9,14], proposed the fundamental definition and the use of workflow mining to support the design of workflows, and described the most challenging problems and some of the workflow mining approaches and algorithms. Also, Clarence Ellis X  X  research group newly defined the scope of workflow mining concept from the vi ew point of that workflow systems are  X  X eople systems X  that must be designed, deployed, and understood within their social and organizational contexts. Thus, they argue in [11,12] that there is a need to expand the concept of workflow di scovery beyond the process dimension to encompass multidimensional perspective such as social, organizational, and informational perspectives; as well as oth er perspectives. This paper is the partial result of the collaborative research on mining the workflow X  X  multidimensional perspectives. In this paper, we proposed a mining algorithm rediscovering a structured work-flow process from the temporal workcases out of a workflow process log. The algorithm is based on the structured workflow process model designed by the information control net workflow modeling methodology, and we showed that it is able to properly handle the three different types of control transitions X  sequential, conjunctive and disjunctive transitions X  X hrough an operational ex-ample. Also, we need to extend the algorithm to cope with the loop transition in the near future. In a consequence, work flow mining methodologies and systems are rapidly growing and coping with a wide diversity of domains in terms of their applications and working environments. So, the literature needs various, advanced, and specialized workflow min ing techniques and a rchitectures that are used for finally giving feed-backs to th e redesign and reengineering phase of the existing workflow models. We strongly believe that this work might be one of those impeccable attempts and pioneer ing contributions for improving and advancing the workflow mining technology.

