 1. Introduction
Nowadays, machines have changed from purely mechanical systems to complex mechatronic systems which integrate mechanical and electrical components, electronic devices, control systems and software tools. This is the reason why it is necessary to use new design methodologies that consider integral aspects of a system as a whole.

In order to fulfill these requirements, a multidisciplinary analysis approach must be used in the design process of mechatronic systems. This approach deals with the mechanical behavior and the dynamic performance of the system. In this way, a concurrent design concept must be used in o rder to jointly consider the mechanical and control performances as well. Therefore, a real challenge in the design of mechatronic systems is to find a set of parameters which achieves the best performance, or at least improves it. These parameters mu st provide the mechanical design and the control of the whole system.
 2001 ). However, these concurrent approaches are based on an iterative process, i.e., the parameters obtained to build the mechanical structure are obtained in a first step and the para-must be repeated all over again.
 mechatronic system design problem is to consider it as a dynamic this, the parametric optimal design of the mechatronic system needs to be stated as a constrained multi-objective dynamic optimization problem (MDOP). In this approach, both the kinematic and the dynamic models of the mechanical structure and the dynamic model of the controller are considered at the same time, together with system performance criteria. This approach aims to obtain the set of optimal mechanical and controller parameters in a single step. a MDOP, the final solution will consist of a set of trade-off solutions. Therefore, depending of the degree of conflict between the kinematic and the dynamic models, this final set may be biased to some type of solutions from where the structure and control parameters could complicate the parametric reconfigura-tion of the system. In this work, parametric reconfiguration is defined as the diversity of sub-optimal solutions in the objective diversity is reflected in different sub-optimal designs from where the designer may choose one according to suitable objective values. An adequate parametric reconfiguration allows the mod-ification of the mechanical structure (e.g., the mass, length, mass center length, etc.) and the parameters of the control system (e.g., the gains of the controller) without losing sub-optimal conditions desirable.
 A MDOP can be solved by its conversion into a Nonlinear
Dynamic Optimization Problem (NLDOP). There are several math-ematical programming methods to solve multi-objective optimi-zation problems ( Miettinen, 1999 ). However, for complex real-world problems such as those from the non-iterative approach used in this work, they present different shortcomings e.g., (1) these methods have the possibility of getting trapped at local minimum in the neighborhood of the starting search point, upon the degree of non-linearity and initial conditions, (2) they require a transformation of the original problem ( Alvarez-Gallegos et al., 2005a ), (3) they are sensitive to the initial conditions and they involve the computation of the gradient and the Hessian of the objective function and constraints, which implies that continuity of the second order must be ensured ( Portilla-Flores et al., 2007 ) and, (4) they usually provide a single solution per run. In order to avoid this problem, various points are needed to initialize the solution search; nevertheless, a considerable sensitivity to its initial search point is observed on the algorithm X  X  convergence ( Cruz-Villar et al., 2009 ). These disadvantages indicate that a mathematical programming method is not convenient to promote the parametric reconfiguration of the system.

In the recent past, non-traditional optimization techniques based on stochastic methods such as evolutionary algorithm (EAs), genetic algorithms (GAs) or particle swarm optimization (PSO) have been developed to overcome these drawbacks. Among the advantages of these approaches are: (1) these are population-based methods, therefore they are not sensitive to their starting point, and a global minimum solution can be reached (although not for every problem), (2) they do not require additional information search points, etc.; (3) with these methods, complex problems can be solved, meaning that the optimization problem can include discontinuous physical models; i.e., they do not require the objec-tive functions and constraints to be continuous and/or differenti-able (4) finally, these methods are independent of the problem characteristics; that is, these methods can be used and/or adapted to a large set of problems, because they do not require special mathematical formulation (problem transformation) in order to obtain a set of solutions.

Therefore, the use of heuristic-based approaches working with a set of solutions such as evolutionary algorithms (EAs) has become very useful ( Eiben and Smith, 2003 ). In Mezura-Montes et al. (2008b) , it was found that the performance of an evolutionary algorithm was clearly superior with respect to that provided by a
Mathematical Programming appro ach in non-iterative concurrent design for a pinion-rack CVT mechanism. However, it was observed that getting the proper distribut ion of trade-off solutions is a difficult task in this type of designs.

These disadvantages lead, as mentioned before, to a deficient reconfigurability property of the mechatronic system design. This is the motivation of the current research, which aims to provide a competitive albeit simple method to generate feasible sub-opti-mal designs by promoting diversity in the final set of solutions obtained. The goal is to provide the designer with a wider set of sub-optimal solutions which facilitate the reconfiguration of the whole mechatronic system. The mechanism must have a low computational cost because the evaluation of a single solution of this type of systems requires a significant processing time.
The rest of the paper is organized as follows: Section 2 contains the formal definition of the non-iterative concurrent design. After that, Section 3 summarizes different approaches reported in the specialized literature on concurrent design. Our proposed evolutionary-based approach to improve the reconfi-gurability feature in non-iterative concurrent design is detailed in Section 4. Section 5 presents the two mechatronic system design problems to be solved, while the experimental design and the results obtained in each problem, besides their corresponding discussions, are shown in Section 6. The paper finishes with some conclusions and possible paths for future work in Section 7. 2. Statement of the problem
As it has been previously mentioned, the mechatronic design problem should be established in a non-iterative concurrent way. Therefore, the system to be designed can be mathematically expressed as a MDOP as follows: min F  X  x , p , t  X  X  X  F 1 , F 2 , ... , F n T  X  1  X  F  X  under p and subject to _ x  X  f  X  x , p , t  X  X  2  X  g  X  x , p , t  X  r 0  X  3  X  h  X  x , p , t  X  X  0  X  4  X  x  X  0  X  X  x 0
In the problem stated by Eqs. (1) X (4): p is a vector of the design variables which belong to the mechanical and control structure, x is the vector of the state variables and t is the time variable. Specifically, given a set of initial values x 0 variables, called the initial conditions, the dynamic model defined by f  X  X  must be solved in order to obtain the state vector x at time t . This dynamic model is represented mathematically by a set of nonlinear differential equations. Additionally, some perfor-mance criteria F i  X  X  must be selected for the mechatronic system. On the other hand, practical engineering problems are ever constrained by a set of conditions which belong to mechanical and control conditions. As a result, constraints g  X  X  and h  X  X  generally are nonlinear real-valued functions of the vector that contains the design variables p , the vector of the state x and the time variable t . Therefore, the parameter vector p , which is a solution of the previous problem, will be an optimal set of structure and controller parameters which minimizes the perfor-mance criteria selected for the mechatronic system (1) and it will be subject to the constraints imposed by the dynamic model of the system (2) and the design. If criteria are not in conflict among them and all of them are equally important, then only one possible solution can be found. However, if there are indeed conflicts among the performance criteria, a set of trade-off solutions will be possible and desirable. The full set of trade-off solutions may be very large and even impossible to find. Never-theless, obtaining a good set of well-distributed trade-off solu-tions is highly desirable, so that an engineer can consider a wider range of options before reaching a decision. This is precisely one of the main aims of this paper, in which a simple approach is introduced in order to improve the distribution of trade-off solutions obtained by a multi-objective evolutionary algorithm. 3. Previous related work
Usually, the design of mechanical elements involves kinematic and static behaviors while the design of the control system uses mainly the dynamic behavior. Therefore, from a dynamic point of view, this approach cannot produce an optimal system behavior ( Norton, 1996 ; Van Brussel et al., 2001 ). Several works on mecha-tronic systems design propose a c oncurrent design methodology which simultaneously considers th e mechanical and control perfor-mances. In Pil and Asada (1996) , a concurrent design concept was proposed using an integrated str ucture/control design method, based on an iterative algorithm for robotic system development.
In this design method, the mech anical structure was modified iteratively and the control parameters were adjusted according to the mechanical structure update. Another concurrent design meth-odology was proposed in Zhang et al. (1999) where the main objective was to improve the motion tracking performance for an existing four-bar closed loop lin kage. An appropriate mechanical design produces a simple dynamic model. With the simplified dynamic model, a simple controller design was obtained. In
Li et al. (2001) a concurrent method for mechatronic systems design was proposed. A general model was required to mathematically describe the mechatronic system. The design method allowed to obtain a simple mechanical structure and its dynamic model. The dynamic model favored an easier controller design which improved the dynamic performance. The above methods proposed a concur-rent design concept based on an iterative process.

On the other hand, some works have presented non-iterative concurrent design approaches. In Ravichandran et al. (2006) , a methodology based on numerical optimization techniques for simultaneously optimizing design parameters of a two-link planar rigid manipulator and a nonlinear gain PD controller designed for performing multiple tasks was shown. In that work, a simultaneous plant-controller design optimization problem and the description of solution techniques based on an evolutionary algorithm for solving the optimization problem were considered.
In Portilla-Flores et al. (2007) , a concurrent design methodology to formulate the mechatronic design problem was proposed.
The methodology states the mechatronic design problem as a dynamic optimization problem. A concurrent design of a pinion-rack continuously variable transmission was carried out by using both mathematical programming and evolutionary algorithms. From this literature review it is clear that:
Most of the existing work is still focused on iterative concurrent design.

From the still scarce set of non -iterative concurrent design approaches, none of them has pr omoted the parametric reconfi-guration, which is very important within this methodology. 4. Our proposed approach
In this section, the proposed approach to promote a better reconfigurability property in the obtained solutions of a non-iterative concurrent design method is explained. The search algorithm utilized was differential evolution and was adapted to solve constrained multi-objective problems. This adaptation and the reconfigurability promotion mechanism are presented below. 4.1. Evolutionary algorithm of designs solved by the non-iterative concurrent design is usually high, (2) an easy-to-implement method is highly desirable and (3) a competitive performance for differential evolution (DE) ( Price et al., 2005 ) had been observed in previous works ( Alvarez-Gallegos et al., 2005b ), this approach was chosen as our search engine.
 designed to solve global numerical optimization problems. DE does not require the objective func tion of the problem and/or the constraintstobelinear,differentiableorcontinuousi.e.,itworksas a black-box without requiring specific features of the problem being solved. DE simulates natural evolution combined with a mechanism to generate multiple search directions based on the distribution of solutions, called vectors (a design solution in this paper), in the n decision variables, in the cur rent population at generation g , scaled difference vector is then added to a third vector ( r calledbasevector.Asaresult,anewvectorisobtained,knownasthe a user-defined parameter, called crossover probability 0 r CR r 1, with the target vector (also called parent vector) by using discrete vector will be with respect to the mutant vector.
 the specialized literature, and it is the utilized version in this work. The first term in the variant X  X  name means differential evolution, the second term indicates how the base vector is chosen (at random in this case), the number in the third term indicates how many vector differences (i.e., vector pairs) will contribute in the differential mutation (one pair in this case).
Finally, the fourth term shows the type of crossover utilized (binomial, in this case). The detailed pseudocode of DE/rand/1/bin to solve unconstrained single-objective optimization problems is presented in Fig. 1 and a graphical example is explained in Fig. 2 . explained in Section 2, DE was adapted to deal with two objective functions and several constraints. Therefore, the selection criter-ion was modified and an external archive was utilized to store the optimal solutions found during the search.
 objective optimization problems ( Mezura-Montes et al., 2008a ) and some of them have been applied to mechatronic design problems ( Alvarez-Gallegos et al., 2005b ; Saravanan and
Ramabalan, 2008 ). However, they usually solve unconstrained multi-objective problems or they use additional mechanisms which modify the simplicity of DE by considerably increasing its processing time. In contrast, here, we propose a DE-based approach that retains the simplicity of the original algorithm and which adds computationally inexpensive mechanisms to solve constrained multi-objective optimization problems. The modifications introduced are the following: to select the fitter solution between the target and trial vectors, Pareto Dominance was utilized as a criterion to select between them.
The aim is to keep the non-dominat ed solutions from the current population, because they represent a better trade-off among the objectives ( Coello Coello et al., 2007 ). A vector of objectives
F  X  X  F 1 , ... , F k is said to Pareto dominate F 0  X  X  F 0 8 i
A f 1 , ... , k g , F i r F 0 i 4( i A f 1 , ... , k g : F eto non-dominated solutions (i.e., those that are not dominated by any other solution) is called the Pareto optimal set . The objective function values corresponding to the solutions contained in the Pareto optimal set constitute the so-called Pareto front of the problem. In our case, the mechat ronic design problems have two objectives, one related to the mechanical design and another related to the controller of the mechanism. Therefore, k  X  2 in this paper.
The following expression formally defines the set of solutions to be obtained as a result in a multi-objective problem:
If we denote the feasible region of the search space as F , the multi-objective evolutionary algorithm will look for the Pareto optimal set  X  P  X  defined as P :  X f ~ v A F j: ( ~ s A F F  X  ~ s  X  $ F  X  ~ v  X g  X  5  X  As in real-world problems P is unknown, a sub-optimal Pareto set including sub-optimal trade-off solutions for the non-iterative concurrent design is the solution sought.

Since DE was conceived as an unconstrained optimization technique, a constraint-handling technique had to be added to the proposed approach. A review of the specialized literature showed that the technique proposed by Deb (2000) has provided very competitive results when combined with DE ( Kukkonen and Lampinen, 2006 ; Zielinski and Laur, 2008 ; Mezura-Montes et al., 2006 ; Huang et al., 2006 ). Furthermore, these comparison criteria do not add extra parameters to be fine-tuned by the user, as traditional penalty functions. The comparison criteria from Deb (2000) has to be modified, in order to incorporate Pareto Dom-inance. The new comparison criteria are the following ( Oyama et al., 2007 ):
Between 2 feasible design solutions, the one which dominates the other is preferred.

If one design solution is feasible and the other one is infeasible, the feasible design solution is preferred.

If both design solutions are infeasible, the one with the lowest sum of constraint violation is preferred.

As a result, the selection criterion detailed in rows 16 X 20 in Fig. 1 is replaced with the criteria shown in Fig. 3 .
Because of the importance of adding elitism to a multi-objective evolutionary algorithm ( Coello Coello et al., 2007 ) and more specifically, to DE ( Mezura-Montes et al., 2008a ), the proposed approach adopts an external archive which stores the set of non-dominated vectors found during the optimization process. This archive is updated at each generation in such a way that all non-dominated solutions from the population will be included in the archive. After that, a non-dominance checking is performed with respect to all the solutions (the newcomers and also the solutions in the archive). The solutions that are non-dominated with respect to every other solution will remain in the archive. When the search ends, the set of non-dominated solu-tions in the archive will be reported as the final set of solutions obtained by the approach.
 4.2. Reconfigurability promotion by a crowding mechanism
Based on the need to improve the reconfigurability in the solutions obtained in the optimization process, a more diverse set of solutions is required in the Pareto optimal set. Different techniques have been proposed to promote and preserve diversity in the objective space of a multi-objective problem solved by an evolutionary algorithm, such as niches ( Fonseca and Fleming, 1996 ), e -dominance ( Laumanns et al., 2002 ), crowding distance ( Deb et al., 2002 ), among others.

From these options, the crowdi ng distance was chosen based on knowledge of the problem and that require to be fine-tuned (e.g., both of which are problem depende nt). Furthermore, its perfor-mance has been found to be highly competitive when used within multi-objective evolutionary algorithms ( Deb et al., 2002 ).
The crowding distance operates on the space defined by the vectors of functions, usually named function space (2-objective space in this paper), and it estimates the perimeter of the cuboid for each solution, which is formed by using the nearest neighbors as the vertices. See Fig. 5 .

As it can be noted, the crowding distance gives an idea of how crowded are the closest neighbors of a given vector of functions in the objective function space. Therefore, a higher value is pre-which objective function values are more different from the rest of them, i.e., the parametric reconfiguration among non-domi-nated solutions can be improved.

The implementation of the crowding distance is as follows ( Deb et al., 2002 ): The set of non-dominated solutions, which are each objective function value, i.e., k sorted lists will be obtained ( k  X  2 in our case). For each sorted list, the non-dominated solutions located at the beginning and at the end of the list are assigned an 1 crowding distance value, i.e., they are good candidate solutions because they can extend the length of the
Pareto front and the parametric reconfiguration might be improved. After that, for the remaining solutions, the normalized difference between the two adjacent values is calculated. The details are presented in Fig. 4 .

The crowding distance value added to the DE/rand/1/bin algorithm considers the following:
The external archive must contain at least three non-domi-nated solutions. This is the minimum number of solutions required in the reproduction step within DE.
 population (row 7 in Fig. 1 ), they are selected from the external parameter value  X  0 r NS r 1  X  . That is, while the generation num-ber g is smaller than the product of the normal selection value
NS and the maximum number of generations MAX _ GEN , the three vectors are selected from the current DE population at random (row 7 in Fig. 1 ), i.e., the search focuses on finding feasible non-dominated solutions (promising designs). Otherwise, the individuals are selected from the external archive by using the crowding distance value as a criterion, i.e., the search, based on the non-dominated solutions previously found, looks to improve the shape of the Pareto front (the parametric reconfiguration is improved). Larger values of the crowding distance are preferred. controlled by the NS parameter, promotes two behaviors: order to promote reconfigurability in optimal designs is shown in Fig. 6 .
 5. Mechatronic design problems
Two real-world mechatronic design problems with different features were used to test the proposed approach explained in Section 4. A detailed description of each one is presented next. 5.1. Continuously variable transmission system 5.1.1. Mechatronic system In De Silva et al. (1994) , a transmission mechanism is presented.
The mechanism belongs to the class of continuously variable transmission (CVT). A CVT is a mech anism whose transmission ratio can be continuously changed in an established range, producing a smooth behavior at its output. This pinion-rack CVT is built-in with conventional mechanical elements as a gear pinion, one circular cam, two pairs of racks and two sliders. An advantage of this mechanism is the relative simple mechanical design of its elements such as the racks, gear pinion an d sliders. However, a special cam is a mechanical device which is fundamental in the perfor-manceofthewholesystem.

The pinion-rack CVT changes its transmission ratio when the distance between the input and output rotation axes is changed. the CVT an offset mechanism is integrated. This mechanism is built with a lead screw attached by a nut to the vertical transport cam. Fig. 7 shows the built CVT prototype. A detailed explanation about the kinematic and dynamic model of the pinion-rack CVT can be obtained in Alvarez-Gallegos et al. (2005a) . 5.1.2. Optimization problem
As it has been previously discussed, in order to obtain the mechanical CVT parameter optimal values, a multi-objective dynamic optimization problem described by Eqs. (6) X (14) is proposed. The dynamic model of the pinion-rack CVT with the u ( t ) is given by Eq. (8). Also, the vector of design variables is stated as p  X  X  p 1 , p 2 , p 3 , p 4 , p 5 , p 6 T  X  X  N , m , h , e explanation to obtain the performance criteria and objective functions, constraints functions and design variables is available in Alvarez-Gallegos et al. (2005b) . The optimization problem is the following: min
F  X  x , p , t  X  X  X  F 1 , F 2 T  X  6  X  where F F subject to _ x  X  _ x  X  _ x  X  x 4 _ x  X  with PI controller u  X  t  X  X  p 5  X  x ref x 1  X  p 6 and constraints J  X  J  X  A  X  1  X  2 x 3 p d  X  r p tan l s  X  12  X  y  X  g  X  0 : 01 p 2  X  p 1 2 : 5  X  r 0 g  X  6 g  X  g  X  p 1 p 2 p 4 r 0 g  X  p 4 g  X  12 p 1 r 0 g  X  0 : 020 p 3 r 0 g  X  0 : 020  X  r c g  X  0 : 0254 p 1 p 2 r 0  X  14  X  5.2. Five-bar parallel robot 5.2.1. Mechatronic system
Many robots have their links sequentially connected starting from a fixed base. The last link in the chain is connected from one an open link chain or open kinematic chain . It is common that each joint of the links is connected by actuators (actuated joints) in order to provide the motion of the robot. Those robots are generally known as open-chain robots or serial robots . Other robot kinematic configurations have their links connected in serial as well as in parallel combinations forming one or more closed-link loops. In that configuration, not all joints are actuated. Those robots are called closed-chain robots or parallel robots .
Parallel robots have the advan tages of high stiffness, speed, acceleration, good dynamic charact eristics and precise positioning their parallel configurations include limited workspace and singular configurations 1 as well as the lack of well-developed tools for the known fact that the parallel robot design while optimizing perfor-mance is a huge challenge due to the highly nonlinear system dynamics and the presence of many singularities. Consequently, it in such a way that they simultaneously optimize the system performance of the mechanical syst em and the control system. Here, a multi-objective dynamic optimization problem is stated to design both the mechanical and control system of a five-bar parallel robot.
The five-bar parallel robot is the parallel robot with the minimal degrees of freedom (DoFs) in the field, which can be used for on a region of a plane that is known as the workspace. The five-bar parallel robot consists of five links connected end to end by five revolute joints, two of which are actuated and are connected to the base of the robot. Fig. 8 shows the five-bar parallel robot built at
Cinvestav-IPN. A detailed explanation about the kinematic and dynamic model of the five-bar parallel robot can be obtained from Liu et al. (2006) and Ghorbel et al. (2000) , respectively. 5.2.2. Optimization problem
The multi-objective dynamic optimization problem consists of finding the optimal design variable vector p A R 51 which involves the optimal geometries of the parallel robot X  X  links (structure design) and the optimal PID controller gains (control design), that simultaneously minimize a performance function vector (16), subject to constraints at the parallel robot dynamic model (18), the limits of the motor torque (19), the Grashof criterion (20), the geometric limits of the links (21), the Cartesian position be executed by the end effector (22). The performance function vector includes the manipulability measure F 1 and the position error F 2 . The position error of the robot is required in order to follow a desired trajectory in the workspace of the parallel robot and the manipulability measure is included in order to move away from singularity configurations. When F 1 is minimized, the parallel robot moves away from singularity configurations. When
F 2 is minimized, the position error of the end-effector to follow the desired trajectory is minimized.

When the geometric parameters are modified, the link shape can be changed. The thickness of the i -th link is represented by e are simultaneously considered in order to get an appropriate system performance. Hence, the geometric parameters p s A p  X  X  p 1 , p 2 , ... , p 50 , p 51 T  X  X  p s , p c T A R 51 where can be formulated as follows: min where
F  X 
F  X 
J  X  2 6 6 6 4 subject to 1. The system dynamics ( Ghorbel et al., 2000 ) and the PID controller: _ x  X  u u x  X  0  X  X  X  1 : 7453 , 0 , 0 , 0 , 0 , 0 T  X  18  X  2. The maximum applied torque for the motor: g 1 : j u 1  X  t  X j r 50 r t r 5 g 2 : j u 2  X  t  X j r 50 r t r 5  X  19  X  3. The Grashof criterion: g g 4 : p 1  X  p 2 p 3 o 0 g 5 : p 1  X  p 2 p 4 o 0 g 6 : p 4 p 5 o 0 g 7 : p 3 p 5 o 0 g 8 : p 5 0 : 5 r 0 g 9 : p 1  X  0 : 035 o 0 g 10 : p 2  X  0 : 035 o 0  X  20  X  4. The geometric limits of the links: g 10  X  i : 0 : 01905 r p 5  X  i r 0 : 3 g 14  X  i : 0 : 0381 r p 9  X  i r 0 : 10 g g 22  X  i : 0 : 00635 r p 17  X  i r 0 : 03 g 26  X  i : 0 r p 21  X  i r 0 : 1 for i  X  1 , ... , 4 g g g 5. The desired trajectory c  X  X  x p , y p T and velocity _ h 1 : x p  X  0 : 15  X  0 : 1cos  X  1 : 2566 t  X  h 2 : y p  X  0 : 3  X  0 : 1sin  X  1 : 2566 t  X  h 3 : _ x p  X  0 : 1256sin  X  1 : 2566 t  X  h 4 : _ y p  X  0 : 1256cos  X  1 : 2566 t  X  X  22  X 
Therefore q 1 , q 2 and q 3 , q 4 are the actuated and unactuated angles of the parallel robot, respectively, x  X  X  q 1 , q 2 R e 2 dt T  X  X  x 1 , ... , x 6 T A R 6 and x  X  X  x 1 , x 2 , x the current and desired state variable vectors, u  X  X  u 1 , u input torque vector, e  X  X  e 1 , e 2 T  X  X  x 1 x 1 , x 2 x 2  X  x the actuated angles, respectively, t is the time, t 0 , t
The Cartesian position c  X  X  x p , y p T and velocity _ c  X  X  the desired trajectory must be transformed into the joint position and velocity of the parallel robot because the PID controller u Eq. (18) requires the desired trajectory and velocity in the joint space  X  x  X  . This transformation is expressed in Eq. (23). x  X  tan 1  X  _ x , _ x 4 T  X  J _ c  X  23  X  where A i  X  p 2 i  X  2  X  p 2 i  X  J ~ a p J 2 = 2 p i J ~ a J ~ a p J  X  J c O i J , O 1  X  X  0 , 0 T , O 2  X  X  p 5 , 0 T and s
In the optimization problem (16) X (22) there are 51 design variables (15), 45 design variables corresponding to the structure design p s and the other six design variables corresponding to the constraints (20) and (21), two inequality smooth dynamic non-linear constraints (19) and four equality smooth dynamic non-linear constraints (22) (the dynamic constraints depend on the time). There is another highly nonlinear dynamic constraint due to the dynamic behavior of the parallel robot (18). This constraint is represented by smooth nonlinear differential equations which are solved by numerical methods such as the Runge X  X utta method. The Runge X  X utta method requires an integration step D t to solve the nonlinear differential equations. In this problem, an integration step of D t  X  0 : 005 is used. So, the time interval [ t 0 , t f ]  X  [0,5] is divided into n D t  X  n D t tion that in this problem there are dynamic constraints which must be evaluated at n D t different times. So, each dynamic constraint must be evaluated n D t times for each individual in the population.

A detailed explanation to obtain the performance criteria and objective functions, constraints functions and design variables is available in Villarreal-Cervantes et al. (2010) . 5.3. Summary of features of the concurrent design problems
For the CVT problem there are four design variables for the structure and two design variables corresponding to the control-ler. Moreover, the whole set of inequality constraints are static: eight nonlinear constraints and one linear constraint. Finally, there is one equality constraint.

For the five-bar parallel robot there are 45 design variables for the structure and six design variables corresponding to the controller. In addition, there are four equality dynamic nonlinear constraints, 40 inequality static linear constraints and two inequality dynamic nonlinear constraints.

On the other hand, the singularity configurations of the robot comprise a problem when the design of a parallel robot is formulated as an optimization problem. Thes e configurations are particular positions of the end-effector, for which parallel robots lose their inherent infinite rigidity and in which the end-effector will have uncontrollable degrees of freedom ( Merlet, 2001 ). Singularity con-in the unfeasible and the feasible regions of the design space (NLDEs) nor the Jacobian matrix can be computed. Hence, the problems of using NLPTs arise when the initial condition is inside the sensitivity can be compute d in order to get the next search configuration. Nevertheless, the main problem of using barrier function is that the initial solution must not be in the singularity goes to another solution (see Fig. 10 c). Therefore, the NLPTs, which are single shooting approaches, cannot guarantee convergence conditions where the system dynam icsiswelldefinedandwithout singularities.

It is important to remark that in both optimization problems the dynamic model of the system is included. The dynamic model of the system is represented by nonlinear differential equations.
In order to solve this dynamic model, a numerical method is utilized. In this numerical method an integration step  X  D t  X  is the dynamic constraints must be evaluated at each time interval, constraint of each individual in the population. The dynamic constraints are only included into the dynamic optimization problem stated for the five-bar parallel robot. Moreover, the dynamics of the five-bar parallel robot is more complex than that of the CVT. Taking everything into account, an evaluation of the dynamic model of the five-bar parallel robot requires more time than the CVT, which is reflected in the results obtained in the numerical experiments presented in the next Section. 6. Numerical results 6.1. Experimental design which aims to favor reconfigurability in concurrent optimal mecha-tronic design by the int roductionofanevoluti onary-based method, the two problems described in Section 5 are solved by the adapted
DE algorithm detailed in Section 4. Based on the fact that the evaluation of one single solution takes several minutes, five inde-pendent runs were performed for each experiment and the time in hours per run is reported. All ind ependent runs were performed on the same computer platform: a PC with a 2.8 GHz Pentium IV processor with 1 GB of memory using Matlab s 7.6.0 Release 2008a.
Five experiments were carried ou t for each mechatronic design. In each one of them, the same parameter values were used with the exception of the NS parameter, which was varied aiming to analyze the influence of the crowding distance factor in the parametric reconfiguration improvement of the two real-world mechatronic concurrent designs under study.
 design: NP  X  200, MAX _ GEN  X  100, F was generated at random at each generation within the following range [0.3,0.9] and CR was also generated at random at each generation within the range [0.8,1.0]. The aim to generate the F and CR values at random at each generation was to promote the generation of diverse search directions and also diverse combinations between the target and mutant vectors. The parameters for the five-bar parallel robot system were equal for F and CR , just NP and MAX _ GEN were modified adopting values of 100 and 6000, respectively. It is clear from the parameter definition that the second problem required more time to be solved due to its complexity. As a consequence, each single run required more time to finish as it will be detailed later in the paper.
 ment 1, which implies a intensive use of the selection from the archive based on the crowding distance factor value, i.e., low exploration of promising solutions and a very high reconfigurability promotion, NS  X  0.3 in Experiment 2, which means a more frequent use of the selection based on the crowding factor, i.e., moderate exploration of promising solutions and a high reconfigurability promotion, NS  X  0.5 in Experiment 3, which means a similar use of the normal selection from the current population and the selection from the archive based on the crowding distance, i.e., equal exploration of promising solutions and reconfigurability promotion and, finally, NS  X  0.8inExperiment4,whichmeansalowuseofthe solutions and a low reconfigurability promotion.

A fifth experiment consisted on comparing the results of the previous experiments with a version without the crowding mechanism, i.e., no reconfigurability promotion. In order to allow a fair comparison, the same exact evolutionary algorithm with the same parameter values was utilized.

The results obtained for each mechatronic concurrent design are presented in the next subsections. 6.2. CVT system
Table 1 contains the numerical results obtained in the first four experiments where the NS parameter value was varied. The number of non-dominated solutions per single run and the time required are also included. Finally, the average number of non-dominated solutions and the average time per run per experiment are calculated.

Regarding Experiment 5, where the DE algorithm without the reconfigurability promotion mechanism is tested, the obtained results are presented in Table 2 .

For a better visualization of the Pareto fronts obtained in each experiment, in Fig. 11 the five fronts obtained in each single run per experiment are filtered into a single one and the number of non-dominated solutions in each filtered front is given in Table 3 .
A first observation of the overall results is that all the final solutions obtained in the five experiments for the CVT design problem were feasible.

From the summary of results in Table 1 , the first four fronts observed: 1. The average number of non-dominated solutions per single run increased (almost twice) from Experiment 4 ( NS  X  0.8) to
Experiment 1 ( NS  X  0.1), while the average time required was almost the same (see Table 1 ). 2. In the same regard, the number of solutions in the filtered
Pareto front in Experiment 1 was more than twice the number of solutions in the filtered front in Experiment 4 (see Table 3 and Fig. 11 ). 3. There was an increase in the average number of non-domi-nated solutions in Experiments 2 ( NS  X  0.3) and 3 ( NS  X  0.5) with respect to Experiment 4 ( NS  X  0.8). On the other hand, the average time in Experiment 2 was the highest (15.68 h) of the four experiments, whereas the corresponding average time in
Experiment 3 was the lowest (12.69 h). 4. Experiment 1 showed the convenience of the massive usage of the reconfigurability mechanism b ased on crowding distance. As a result of the higher number of non-dominated solutions (see Table 3 )in Fig. 11 , for Experiment 1, a wider range of values for objective F 2 A  X  600 , 1800 was obtained. In contrast, none of the remaining experiments (2, 3 and 4) was able to generate solutions in the upper left part of the Pareto front of this design problem.

The results obtained with the DE algorithm without the reconfigurability promotion mechanism (Experiment 5) pre-sented in Table 2 , in the last filtered Pareto front in Fig. 11 and in Table 3 suggest that the performance of this version was surpassed by that of the previous four experiments, except for the average time, which is slightly higher in Experiment 2 ( NS  X  0.3). Furthermore, the filtered Pareto fronts in Fig. 11 showed that the lack of the reconfigurability mechanism affects the capability of the algorithm to generate solutions with a lower value for objective function F 1 .

It is worth noticing that the filtered Pareto front from Experi-ment 1 in Fig. 11 provides the design engineer a very rich set of possible solutions because, for a similar mechanical design (e.g., objective F 1 0 : 5) there is a rich set of solutions with different that mechanical elements are more expensive (i.e., a gear pinion must be built by a CNC machine) than controller implementation, it is better to have a large set of controller gains, maintaining a constant size of mechanical elements. Therefore, from the design engineer X  X  point of view, solutions in the mentioned area represent a smaller investment on the final prototype.
As a final conclusion for this mechatronic design, the massive use of a selection based on the crowding distance value allowed the DE algorithm to generate solutions which favor the reconfigurability of the design without increasing th e computational time required by the approach. 6.3. Five-bar parallel robot system in Table 4 , where each one of them considered a different NS value.
As in the case of the CVT design, the number of non-dominated solutions per single run and the time required are included.
However,forthisproblemthenumberoffeasiblesolutions in the final Pareto front obtained is also included because not all of them satisfied the constraints of the design problem. The average numbers for these three measures are calculated in the same Table 4 .
 promotion mechanism for this second design problem are presented in Table 5 .
 presented in Fig. 12 and the number of non-dominated solutions
 X 
 X  Experiment 5 in each one of them are given in Table 6 . Based on the fact that Fig. 12 does not completely reflect the differences in behaviors of each experiment, in Fig. 13 a zoom view of the five filtered fronts is plotted.

Interesting performances were found in the results of the first four experiments: 1. The highest average number of non-dominated solutions was obtained in Experiment 2 ( NS  X  0.3), and it was almost twice the average value reported in Experiment 4 ( NS  X  0.8). In these two experiments, the time required by the DE algorithm is very similar (46.66 h in Experiment 2 and 46.27 h in Experiment 4) and the percentage of feasible solutions is slightly worst in
Experiment 2 because one run was unable to converge to the feasible region of the search space (see Table 4 ). 2. The lowest NS value in Experiment 1 ( NS  X  0.1) caused the generation of a lower number of non-dominated solutions and the number of feasible solutions was also decreased. Although the average time spent was slightly less than the reported in the rest of the experiments (see Table 4 ). 3. The number of non-dominated solutions in the filtered Pareto front of Experiment 2 ( NS  X  0.3) was the highest among all the remaining experiments (see Table 6 and Fig. 12 ). 4. Even though Experiment 4 ( NS  X  0.8) in Fig. 12 seems to provide more diverse solutions in the upper left part of the
Pareto front generated with respect to Experiment 2 ( NS  X  0.3), Fig. 13 shows that the non-dominated solutions from Experiment 2 dominate those of Experiment 4. 5. The intensive use of the reconfigurability promotion mechan-ism in Experiment 2 provides a considerable number of different values for objective F 1 A  X  0 : 95 , 0 : 88 , whereas the other three experiments were less competitive in this regard.
Experiment 5 showed that the use of the reconfigurability promotion mechanism is highly important to provide diverse solutions to the designer (see the very low number of non-dominated solutions reported in Tables 5 and 6 and the poorly important to remark that the approximation to the feasible region is affected by the use of the selection based on crowding distance criteria. However, with a correct value for the NS parameter as in Experiment 2, this shortcoming can be controlled.

An interesting finding in this non-iterative concurrent design of the five-bar parallel robot was that the DE algorithm was able to designer point of view, a design methodology where a variety of designs fulfills different trade-offs between the position error and the manipulability measure, is recommended i.e., solutions near to design specification tends to rai se the cost of the final product, whereas a design that is below of the required design specification tends to fail for the entrusted task.

The control performance  X  F 2  X  indicates the accuracy of the trajectory tracking. Then, a value near to zero means that the position error is almost zero. On the other hand, the mechanical performance  X  F 1  X  indicates a distance measure from singularity configurations of the parallel robot. Then, a value near to minus one ( 1) means that the parallel robot configuration is away from singularities.

The overall results of the proposed DE algorithm in this five-bar parallel robot non-iterative concurrent design, which was more difficult to solve compared to the CVT design problem previously discussed, suggest that the intensive use of the reconfigurability mechanism allows the algorithm to generate more non-dominated solutions. However, its use must be cali-brated in order to keep the original capability of the approach to generate feasible designs. 7. Conclusions and future work
In this work the reconfigurability feature of the non-iterative concurrent mechatronic design methodology was improved by using an evolutionary-based approach. The use of the crowding distance, Pareto dominance concepts coupled with a simple but effective constraint-handling technique and an external archive were added to a differential evolution variant called DE/rand/ 1/bin. The selection of the vectors to generate the trial vector was done in two different ways based on the value of a user-defined parameter called normal selection ( NS ) which determined the percentage of generations where selections were made as in traditional DE/rand/1/bin (three randomly chosen vectors from the current population). The remaining percentage (1 NS ) selec-tions were made from the archive where the non-dominated solutions are stored by using the crowding distance as a criterion.
In other words, the NS parameter controlled the time dedicated within the search process to look for feasible and high-quality solutions before switching to improving the parametric reconfi-guration of the design, i.e., an extended and well-distributed Pareto front.
 search of a good approximation to a sub-optimal Pareto front and a good distribution of solutions within it. This combination of effects precisely improved the parametric reconfiguration prop-erty of the design in order to provide the designer with an adequate set of possibilities.

The proposed algorithm was used to optimize the design of two complex mechatronic systems: A CVT and a Five-bar parallel robot. In both designs the mechanical and also the controller design were considered in a bi-objective optimization problem.
The performance observed by the proposed algorithm showed that the reconfigurability mechanism (controlled by the NS para-order to promote the generation of more non-dominated solutions in the final Pareto front obtained without affecting the computa-tional time required. However, if the problem to be solved is highly constrained, the use of the reconfigurability mechanism must be used with a lower frequency (i.e., slightly higher NS values are required) in order to allow the traditional DE selection mechanism to generate feasible mechatronic designs.

The future paths of research consider the definition of an improved set of criteria which considers feasibility in the recon-figurability promotion mechanism. Moreover, we will test our approach in other types of mechatronic systems in which more than two objectives (besides mechanical and controller designs) are considered.
 Acknowledgements
The first author acknowledges support from COFAA and SIP from IPN. The second author acknowledges support from the
Mexican Consejo Nacional de Ciencia y Tecnolog X   X  a (CONACyT) through project no. 79809. The third and fifth authors acknowl-edge support from CONACyT, project 084060. The fourth author acknowledges support from CONACyT project no. 103570. The last author acknowledges support from CONACyT through a scholarship to pursue a Ph.D. degree at CINVESTAV-IPN X  X  Elec-trical Engineering Department.
 References 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
 X 
