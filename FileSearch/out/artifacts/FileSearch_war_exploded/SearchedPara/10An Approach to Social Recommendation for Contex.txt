 CLAUDIO BIANCALANA, FABIO GASPARETTI, ALESSANDRO MICARELLI, Mobile technologies have become part of the everyday life of most people around the world. According to the International Telecommunication Union (ITU), the number of cell phone subscribers has reached five billion during 2010, while mobile broadband subscriptions have exceeded one billion globally. 1 Recent mobile phones provide users with a number of features such as Wi-Fi connectivity, bluetooth and GPS localiza-tion, camera and video capture devices and, most interestingly, the capacity for users to program the mobile devices with additional applications. Among the most popular applications there are location-based services (LBSs), in which knowledge of the end user X  X  location is used to deliver relevant, timely, and engaging content and informa-tion [Rao and Minakakis 2003]. It has been estimated that 486 million of users will take advantage of LBSs by 2012. 2 Smart mobile devices and wireless technologies al-low the fast growing number of mobile subscribers to query traditional search tools or mapping service applications in order to obtain business listings, events or further information related to a specific location. Several large-scale studies show how location-based queries are a relevant part of all the queries submitted through mobile search interfaces [Asadi et al. 2005; Spink and Jansen 2004; Sanderson and Kohler 2004; Kamvar and Baluja 2006]. At the present time, information about the user X  X  location is the most analyzed contextual element for suggesting points of interest (POIs) in current mobile applications, and it turns to be the only one used in popular LBSs such as Google Maps, 3 Yahoo! Maps, 4 and Bing Maps, 5 besides submitted queries. Let us consider the following two scenarios wherein two different users, in two different times but in the same location, query a LBS, such as Google Maps, to get suggestions about where to eat. In the first scenario, it is a weekday, it is raining, there is heavy traffic, the user is on lunch break, and he likes to eat vegetarian food in expensive restaurants. In the second scenario, it is Saturday evening, the weather is good, traffic is regular, the user is driving, and he appreciates Indian cuisine and does not want to spend much. In both of those scenarios the system will provide the user with the suggestions reported in Figure 1(a), where it can be noted how users are not allowed to know if one business is currently open and has a private parking lot in the event they are traveling by car. Besides, the service suggests several different alternatives close to the user X  X  position, but actually the results spread from fast-foods to very expensive restaurants and sev-eral different cuisines, such as Italian, Chinese, Japanese or French. The high density of businesses makes it difficult to pick out that restaurant among all the alternatives. As local databases and search engines get richer of geocoded information with the contribution of Internet users and commercial data providers, this problem becomes prominent. Restricted text input capabilities and small size displays discourage search activities for the acquisition of additional informative elements in order to filter out less interesting businesses [Church and Smyth 2007; Nielsen 2009]. The system herein presented, which we called Polar , addresses all these issues by proposing:  X  X he modeling of user preferences in order to adapt recommendations to meet his specific needs;  X  X he definition of a richer representation of the context with a view to giving the user only results actually consistent with his current needs;  X  X he enhancement of potentialities of LBSs by providing them with the opportunity to exploit the vast amount of information from social networking, user reviews and local search Web sites.
 The modeling of user preferences has long been recognized as an important tool for improving the performance of recommendation systems [Jannach et al. 2011]. In some cases, user preferences are even predominant in comparison with the current context. For example, often users are willing to take longer journeys and choose far restaurants if they are on holiday and want to taste the local cuisine, or if they prefer to trust suggestions or reviews from friends and online services.
As for the second point, considering the context wherein the user issues the query, allows the system to recommend only those POIs that are actually useful to him. Context encompasses more than just the user X  X  location because further elements in the current situation relevant to an application are also mobile and changing [Schilit et al. 1994]. Of course, it is impossible to exhaustively enumerate all the aspects of the potential situations which are relevant or not, while several of these aspects are even not easy to measure or represent [Kaasinen 2003]. A well-known interpretation of context is stated in terms of information that can be used to characterize the situation of an entity, which is represented by people, places, or in general objects considered relevant to the interaction between one user and the current application [Dey 2001]. In the architecture of our system we take into account most of the contextual elements a mobile device is able to automatically determine.

With respect to the last point, in current Web social networks users explicitly provide personal information or implicitly express preferences through their interactions with other people and the system. Rating or posting comments associated with items of inter-est and friending with people are important sources of data that can be analyzed and exploited to improve recommendation techniques and develop new recommendation strategies.

Based on the described features, Polar is able to provide the user with selected and ranked suggestions, thus saving him the trouble of analyzing useless information, as shown in Figure 1(b). Specifically, the marked restaurants have been chosen by the system based on:  X  X he preferences of the logged in user;  X  X he current context wherein he acts;  X  X he information extracted from social networking, user reviews, and local search sites.

The rest of the article is organized as follows. In Section 2 we describe the pro-posed approach. The results of our experimental evaluation are provided in Section 3. Section 4 describes some related works and their differences with our approach. In Section 5 we present our conclusions and plans for future work.
 The proposed application is built upon the Google Android 6 platform and extends the traditional features of Google Maps. Figure 2 illustrates the various phases that consti-tute a sample session with the mobile application. First, the application requires user authentication through username and password to access his profile (see Figure 2(a)). Then, the mobile device determines the user X  X  current location via positioning system and displays a map of the area surrounding the user X  X  location with a visual element (or pin) on that (see Figure 2(b)). The screen also displays a text box in which the user can submit a query. Once the user has entered this information, the system searches for POIs near the user X  X  current location. Basically, queries restrict the category of POIs to focus on during the search. For example, if the query is  X  X izzeria X  or  X  X ast food X  this information matches the name of the POI category related to places where people eat meals. In case of mismatches between queries and categories, for instance,  X  X paghetti X  or  X  X rench cuisine, X  the system retrieves the POIs associated with metadata similar to the submitted query. Data extraction algorithms are able to assign this kind of data to each POI. Each of the retrieved POIs is assigned a first score based on user preferences and current context. The most relevant POIs are displayed on the UI of the mobile device through Google Maps mashup extension (see Figure 2(c)). Figure 2(d) shows how the application provides the user with a selection of POIs based on his information needs and context. In this example, the user has set preferences so that the top five POIs of the returned list are displayed on the screen. The numbers associated with the map pin of each POI refer to their ranking in the result list. By clicking on the map pin of a POI, the user can read its description (as it appears in Web sources from where data are extracted) and give it a rating from 1 to 5 (see Figure 2(e)). Polar allows the user to assign one or more tags to a given POI. These tags may be, either selected among those provided by the system, or freely chosen and inserted in the input field shown in Figure 2(f). This operation is needed to update the user profile. The application also enables the user to scroll through reviews and know the average rating other users gave that POI (see Figure 2(g)). As far as user information is concerned, our applica-tion tracks only his location, while context is defined at query time. More precisely, the system determines user activity and means of transport. Weather is derived through context-augmenters (e.g., query weather services). A way of improving the mobile users satisfaction during the interaction with LBSs is to adapt the contents and presentation of the service to each individual user and their current context of use. In this way, the user interaction is minimized and users have quick access to the information or service of interest. In this work, we focus on LBSs able to interact with the users through some kind of application installed on their mobile devices, that is, a software developed with one of the software development kits provided by the popular brands of mobile devices such as Apple iOS, 7 Android or the open-source Symbian OS. 8 This is required to collect additional information for building user contexts (e.g., current location or location history) that traditional mobile browsers are not able to communicate to remote services. An application on the mobile device monitors, discovers, and keeps track of this data and transmits it to the remote services along with the submitted query. Among the categories of location service ap-plications, we choose the Information category (see taxonomy shown in Steiniger et al. [2006], Table 2a) related to infotainment services, travel and tourist guides, travel planner, mobile Yellow Pages 9 and shopping guides. While queries submitted to mobile search engines are to be carefully analyzed to determine the cost/benefit of performing a context-aware personalization, with the chance to become too much invasive in some circumstances [Sohn et al. 2008], the interactions with LBSs most of the time benefit by adaptivity. Looking for POIs for a given macro category (i.e., classes of POIs that share some characteristics, for example, restaurants, bars, and cultural events) is an activity in strong mutual relation with the user current needs and preferences. As shown in Figure 3, the user interacts with the application on a mobile phone that encodes the current information related to the context, such as location, time and speed, and sends it to the LBS along with the query. The social recommender engine follows different steps. In the first place, a local database is populated with information from different Web data sources. For example, business listings, phone numbers and addresses are extracted from Yellow Pages and traditional LBSs such as Google Maps, Yelp 10 and Zagat. 11 Data extraction algorithms are able to associate metadata with each entry in the form of weighted keywords from a predefined dictionary built during the train-ing. The extraction basically covers the review posted in social Web sources, such as the aforementioned LBSs, and extends to forums, blogs and popular social network-ing sites, for example, Facebook. 12 The data extraction is also able to automatically extract structured data on Web pages that are related to particular POI features. For example, Yelp shows additional restaurant business information such as price range or wheelchair accessibility. This kind of data is stored in the local database (or local db), so preserving the related semantic subcategory. People sharing their reviews with others are evaluated according to several factors in order to weight the reliability of the retrieved review data. The adaptation process enables a system to alter its behavior instead of providing the same results for all the situations. The recommender system monitors the current situation and the user environment (i.e., the contextual factors), computes adaptation decisions, and provides mobile users with personalized sugges-tions. Personalized recommendation is performed in two steps. Users are associated with profiles, each one representing their interest in one of the possible macro cate-gories. At first, the POIs that match the current context are retrieved by the local db. Depending on the user X  X  current location, additional information is retrieved by public services, such as weather and traffic report, so increasing contextual data. Activity recognition algorithms recognize further elements that are associated with the con-text. Afterwards, the POIs are ranked according to the user preferences highlighting the most relevant ones on the UI, for example, Chinese or Italian restaurants within 10 minutes walk from the user X  X  location. The next sections describe the aforementioned functionalities in more detail. Data extraction of POIs plays an important role in populating the local db. In Polar, there are several steps involved in order to extract information from Web sites. Figure 4 summarizes the whole process of extraction. First of all, the administrator submits a list of sources as seeds of a Web crawler, which retrieves a set of pages related to a macro category. In the restaurant scenario, we collect pages from various sources (e.g., Yelp, TripAdvisor, 13 Foodspotting 14 ). Traditional preprocessing steps are performed on col-lected documents. In particular, text is normalized (i.e., tokenized, stopwords removed and abbreviations expanded) and segmented [Hearst 1997] obtaining chunks of text data, each related to a particular POI. After these steps, Named Entity Recognition (NER) is performed in order to extract the primary elements associated with a POI, such as name, city, address and phone number. The NER software is based on the linear chain Conditional Random Field sequence models [Finkel et al. 2005] implemented in the Stanford Named Entity Recognizer. 15 A geocoding service is required to find the ge-ographic coordinates from other geographic data, such as street addresses, or zip codes. The data extractor exploits the Google Maps service 16 for this task. A fundamental step in the data extraction process is covered by KEA-based extractor. Keyphrase extrac-tion is widely used in large collections of documents. The task of assigning semantic metadata to documents in the form of sets of keywords is useful for a wide variety of purposes, for example, summarization and clustering, tag recommendation and tag prediction [Heymann et al. 2008; Yin et al. 2010; Lu et al. 2009]. While this task is commonly performed by humans for indexing documents (e.g., general terms and key-words assigned to a journal paper), large corpora of mostly unstructured documents cannot be manually indexed. KEA automatic keyphrase extractor [Jones and Paynter 2002] is an open-source Java project that is able to retrieve candidate keyphrases using lexical methods, vector space models and Na  X   X ve Bayes algorithms for learning. KEA is based on bag-of-words representation. It sets two attributes to classify a phrase p as a keyphrase or a non-keyphrase: its TFxIDF weight [Salton and McGill 1983] within the set of retrieved documents and the index of the first occurrence in the document. According to these attributes, KEA returns a list of phrases for each document, or-dered by decreasing relevance, among which the top N k are selected as keyphrases. Each keyphrase is associated with the corresponding relevance kc i , where i  X  [1 , N k ]. The learning phase is performed for any macro category of the recommender system. Traditional tag-based bookmarking services, such as Delicious 17 and Digg, 18 are exam-ined to collect resources starting from queries that identify the categories of interest. A system administrator selects a subset of 30-100 potentially relevant resources for training. Afterwards, KEA-based extractor is able to process the collection of pages crawled from popular LBSs, so locating relevant keyphrases associated with the POI that will be stored in the local db. Keyphrases are weighted according to their rela-tive importance for representing the given POI. The learning phase takes place at the startup and is never repeated unless the macro categories are subjected to variations. The average accuracy of KEA reaches 80% (see Jones and Paynter [2002] for details). The following diagram reports examples of KEA-based extraction.
 The last step of the data extraction process regards the source-specific extraction. It performs two tasks: it evaluates an authority measure over the data extracted by KEA and collects further data from Web sites. Several LBS services provide API interfaces that allows external applications to collect POIs according to a given location or to obtain meta-data associated with a POI (e.g., subcategories, addresses, number of re-views, review excerpts). For a given set of location-based services, the source-specific extractor can perform information extraction to collect relevant data that both KEA and API interfaces are not able to retrieve. For example, each restaurant on Yelp is associated with business information as shown in Figure 5. The system administrator selects the subset of most relevant data that could affect the recommendation. The Mal-let language toolkit, 19 which includes linear chain conditional random fields to perform tagging and, hence, labeling unstructured information, is employed for this task. A set of semantic tags T st (e.g.,  X  X ake out: yes X ,  X  X ireless available X ) and subcategory tags T sc (e.g.,  X 5-star-hotel X ,  X  X ast-food X ) is the output of this step. The following diagram reports semantic and subcategory tags for the POI in Figure 5.

The source-specific extractor follows a basic methodology for evaluating the authority of user reviews in LBS social networks. Besides submitting reviews, each registered user is able to comment other users X  reviews (e.g., usually with  X  X  agree X  and  X  X  disagree X  feedbacks), or make connections with other people (e.g.,  X  X  am a friend of X, X   X  X  follow the user Y X ). Because of the high heterogeneity in the social paradigms chosen in LBS Web sites with regard to features available to the user, it is not always easy to perform social analysis on data originated from various sources. For this reason, we focus on the authority of users in terms of numbers of reviews and comments associated with them (e.g.,  X  X  agree X ,  X  X  disagree X ). There are several works whose goal is to define metrics for inferring trust and reputation in social networks (e.g., Golbeck and Hendler [2006], Kazai and Milic-Frayling [2008], Golbeck and Hendler [2004]).
Our approach has been conceived trying to abstract the basic features provided by the most popular online LBSs and, therefore, modeling the social networks through the simplest model that can be easily applied to the data extracted. Given N u users u i and N r reviews r j , the reliability factors uc i user u i and review r j , respectively. The original weight kc i of a keyphrase assigned by KEA is linearly combined with uc i and rc i as follows:
The  X  constant allows the final value to be normalized to [0, 1], while the values of the other constants have been empirically set based on the scenario considered in the experimental evaluations. The keyphrases with weights above a given thresh-old will be actually stored in the local db as weighted tags t  X  T t associated with a POI.

The factor uc i is related to the activity on LBS Web sites of a given user u i . The following data can be automatically extracted by the source-specific extractor:  X  X umber of friends: a 1  X  N ;  X  X umber of published reviews: a 2  X  N ;  X  X he user is selected based on the quality of his reviews by the LBS administrators or by other users: a 3  X  X  0 , 1 } ;  X  X umber of fans or followers: a 4  X  N .

A linear combination of the factors yields:
As for reviews, we employ a 3-scale feedback to abstract the ratings from the different sources:  X  X umber of times the review has been judged very useful or very reliable: b 1  X  N ,  X  X umber of times the review has been judged useful or reliable: b 2  X  N ,  X  X umber of times the review has been judged not useless or unreliable: b 3  X  N . so obtaining the factor rc i defined as follows: Adaptations of the aforementioned methodology to particular sources are feasible. For example, Yelp allows us to include these further factors: the times the author submitted the first review to a POI, or if the user has been classified as elite by Yelp.
At the end of the data extraction step the local db is populated with tuples. They include three different sets of tags that form the tag-based representation poi k of a POI: and further information obtained by NER, geocoding and source-specific extractors. A typical tuple of the local db is shown in Figure 4. The data extraction process is so able to populate the local db also with basic information about the address, name of the business, location, and partially structured information on Web pages, such as the wheelchair accessibility, dress codes, average price of a restaurant, open hours, etc. In other words, the system integrates information coming from different sources. This might rise issues related to inconsistency in combined data. In fact, due to vocabulary problem [Furnas et al. 1987], the same concept can be described with different termi-nologies. In the current prototype, the system administrator has the chance to group semantically coherent and relevant keywords and keyphrases for a specific domain. The system is also able to periodically suggest POIs with similar names and addresses, in order to tackle potential misspells or slight variations of the same POI. Context-awareness makes LBS applications very special compared to other informa-tion technologies. Context is any information that can be used to characterize the current situation of the user environment. In our recommender system we enhance the traditional location-based service with additional contextual factors that potentially affect the interaction with the location-based service and the ranking of search results. Each contextual factor represents a different part of the design space within which mobile devices are placed. The system, domain, and environment all suggest trade-offs that developers must address in realizing mobile interactive systems. Ideally, context-aware systems should know as much as the user about those aspects of the environment which are relevant to their application. A deep investigation of the contextual factors interested in the recommendation and their relation with the changing environment is to be performed for each different domain. For example, factors like weather and temperature might be relevant if the user is looking for a cultural event to attend while they might not be very interesting if the user is looking for shops of art deco furniture or bookshops. This kind of investigation is typically time-consuming because it requires the following steps:  X  X odeling the contextual factors in the real world and their possible interactions, set-ting out the types and properties of all entities which are relevant to the application;  X  X valuating the contextual factors and interpreting the extent, quality, value, or effect of each of them; approximating analog values by signal discretization and abstrac-tion, for instance, by converting temperature in high, mid, low values;  X  X nalyzing possible correlations among factors and abstracting them in semantically coherent clusters, hierarchies, ontologies, predicates or any formal specification (see, for example, Katsiri et al. [2007], Wang et al. [2004], Yuan and Wu [2008]);  X  X roviding rules that define which actions the recommender system should or must take when a situation happens, by means of rule-based systems, fuzzy logic, stereo-types, context-oriented programming, etc.

In developing social recommender engines for suggesting geo-coded references to mobile devices, the last step turns to be a key element. There are several kinds of mobile devices in commerce with different features that are possible to employ for context-aware applications, but only few of these features are in common on the majority of devices. For this reason, there is a limited set of factors that is possible to explicitly sense by a mobile device or implicitly collect analyzing other factors. Nevertheless, assessing any possible correlation between one or more factors in a context with the POIs to recommend is an activity that requires the support of domain experts and large collections of usage data.

Several authors propose to employ machine learning mostly for context recognition, that is, sensing the user X  X  physical environment by using various detection and measurement systems and combine these information sources extracting useful information needed to determine the context of use (e.g., Flanagan et al. [2002], Clarkson et al. [2000], Van Laerhoven and Cakmakci [2000], Schmidt et al. [1999]). Our goal is to provide recommendations according to the current context and user preferences or, in other words, filtering a local database of entities according to the current situation.

Our social recommender system includes a context-aware recommendation engine based on artificial neural networks. Its purpose is to match the potential POIs to suggest (e.g., restaurants, hotels in the surroundings of the user X  X  location) with the current context. Context-aware recommendation gives high weights to POIs which are the most relevant to the given context. Depending on the approach chosen for the result visualization, the highly ranked results are highlighted on a map or on top of the lists. The advantage of this approach is to employ standard learning algorithms to auto-mate the process of determining the connections between the contextual factors and representations of the POIs and related affinities. Domain experts do not have to write long hand-coded rules and triggers used to specify how context-aware systems should adapt [Yang et al. 2008; Dix et al. 2000]. As already pointed out, the relationship be-tween contextual factors and POIs depends on the category of the recommended POIs. Algorithms for automating this correlation analysis simplify the adoption of the same recommender engine in different domains. Almost any information available at the time of an interaction can be seen as contextual information. There are several factors feasi-ble to be included in the representation of the user context. Physical and environmental contextual factors are probably the most interesting ones because they are easily mea-surable by sensors embedded in most of the current smart phones and PDAs [Dix et al. 2000]. Examples are spatial and temporal information, such as location, orientation, and current time. Further similar factors can be inferred by querying public informa-tion services, such as weather and traffic report and forecast services, or by analyzing the obtained information, for example, speed, day of the week or temperature. Contex-tual factors related to resources such as what is nearby and open hours of POIs, can be retrieved by querying the local database of information collected during the data extrac-tion process. As the user activity is crucial for many applications, context-awareness has been focused more deeply in the research fields of activity recognition [Bettini et al. 2010]. Along with the location and time, the activity is accounted to be one of the most important contextual factors in understanding mobile information needs [Sohn et al. 2008]. An activity is a sequence of actions conducted by human beings aimed at achieving a certain objective [Nardi 1995]. In our recommender system, we employ a richer contextual description that besides traditional physical and environmental fac-tors, also focuses on the classification of basic human activities or scenarios. In spite of the obvious relevance of this information for providing tailored results, location-based services for mobile devices based on activity recognition approaches are not so popular in the literature [Choujaa and Dulay 2010; Partridge and Price 2009]. For our purpose, we limited our activity representation to coarse locations and user situations, namely:  X  working : the user is engaged in work or he is in the neighborhood of the office;  X  traveling : the user is moving between two places;  X  other : unknown or known activities with likelihoods under a given threshold. We used the approach proposed by Liao et al. [2005], that is, Relational Markov Network (RMN) and raw location data collected by internal GPS units of the mobile devices to build personal maps and associate one of the aforementioned activities with contexts. According to authors, this approach is able to reach an error rate of 20% in a scenario consisting of six activities. While it is possible to conceive more activities in our prototype, thus enriching the context representation used for recommendation, in this first version the number of relevant activities is limited to two (working and traveling) while a default activity other includes the remaining situations.
The rest of factors correspond to information about weather and time of the day. Pre-processing of the raw data having the characteristic of consecutive data, for instance, time and speed, is done in order to abstract them into a set of concepts, for example, bad weather or traveling by car. This preprocessing is required to make data more easily accessible by machine learning algorithms.

In order to match the current context with the POIs stored in the local db, we first use the location as query to retrieve the list of POIs in the user neighborhood. For each category of POIs there is a set of features that characterize some of the relevant information that has the chance to alter the recommendation ranking. For the sake of argument, in the example of restaurant recommendation, we collected ten features (see Figure 6) from the semantic tags T st stored in the local db. Examples are restaurants with private parking, waiter service or outdoor seats. Two more features, namely, the distance and time before closing , are drawn evaluating the two contextual features user X  X  location and the current time of the day, with the user X  X  location and the opening hours of the POIs. For example, current time is combined with the opening hours of the POI obtaining an item in the set { 30, 60, 120 } . These values represent the estimated time left to the closing hour.

The contextual features and the aforementioned features of the POIs in the local db are given in input to the neural network. The output is one of five classes y c representing how close a given restaurant is to the user current context (i.e., 0 = not interesting, 4 = very interesting). The class associated with the POI is the output node with the higher value.

A feed-forward multi-layer perceptron neural network with one hidden layer maps the input vector to the output classes y c . As for the training data set, we collected user feedbacks for a short period of time from three users that tested our prototype for four weeks in the city of Rome, Italy. Moreover, we extended the coverage of the analyzed contexts asking the same users to rate particular combinations of contexts for a limited set of restaurants. For example, we asked users to submit a rating in the [0,4] scale to a POI in the following scenario:
A number of 1612 entries have been collected. In order to determine the optimal parameters, namely, the weights of the network, we applied a supervised learning algorithm based on gradient descent and 10-fold cross-validation to adjust the weights toward convergence. We obtained an overall high classification accuracy 94 . 97% (i.e., a statistical measure assessing how well a binary classification correctly identifies or excludes objects), with the Kappa coefficient K = 0 . 89. The coefficient is used to assess the agreement between humans and the neural network output. A detail of other relevant measures are summarized as follows:
According to Landis and Koch [1977], the obtained Kappa coefficient represents an almost perfect agreement, while RRSE shows an acceptable increment of precision in comparison with a simple predictor that averages the actual values. An extended evaluation of the context-aware recommending based on the trained neural network is presented in Section 3. Current LBSs do not employ any explicit representation of the user preferences. For this reason, results provided by the service might include redundant or unwanted information. In mobile scenarios, where communication is often expensive, slow and not unreliable, and the devices limit the human interaction with remote services, this phenomenon compromises the benefits obtained by this form of ubiquitous computing.
In our approach, therefore, we have associated a profile with each user in order to represent his interests. Specifically, we have adopted a tag-based profile.
Indeed, more often users are able to assign tags (i.e., metadata in the form to key-words) to resources on the Web. These tags may also be shared with others, thus building a model known as collaborative tagging. Tags have turned out to be useful for organizing and classifying personal and shared information.

Firan et al. [2007] point out that tag distributions stabilize over time, so they may be exploited to improve search on the Web. However, Firan et al. go further: tag dis-tributions characterize users, therefore they may be employed to propose personalized recommendations. The authors describe a method leveraging tag-based user profiles to recommends music tracks possibly relevant to users. Experimental tests carried out on 15 users showed substantial improvements in terms of Normalized Discounted Cumu-lated Gain (nDCG) [J  X  arvelin and Kek  X  al  X  ainen 2000] compared to different collaborative filtering algorithms.

As a matter of fact, a few systems in the literature have explored the potential benefits of using tags to build or enhance user models. Van Setten et al. [2006] point out that if a user takes the trouble to make his own annotations, those may reasonably be included in his user profile as indicative of his point of view on the content collection and interest in the annotated POI.

Recent efforts in the research field of tag-based user models focus on hybrid models, which try to take the best of both tag-based and traditional content-based modeling. In Bateman et al. [2006] a framework for integrating social tagging in lexical database Wordnet 20 is proposed. This approach is remarkable because it offers a solution to the problem of the lack of meaning in tag collections [Carmagnola et al. 2008].
Research on hybrid user models, namely tag and content-based, relies on a simple as founded observation: a single tag-cloud is often inadequate to represent the various interests that users have in different domains. Other approaches try to consider such multiple interests by exploiting folksonomies, in order to extract information a user might be interested in [Yeung et al. 2008; Szomszor et al. 2008].

Godoy and Amandi [2008] propose an approach based on the integration of content-based profiles with tag-based profiles. The former profile describes long-term user interests and can be inferred by recommender systems through browsing activity mon-itoring; the latter can be acquired by means of observation of tagging activities. This way, tag-based profiles may be extended with user interests that personal agents and recommender systems might have gathered over time. This approach avoids, there-fore, the overhead of running heavy knowledge extraction processes on folksonomies, thus simplifying the overall system architecture. In the system described in Godoy and Amandi [2008], the categories representing long-term user interests are populated with tags that users more often assign to resources belonging to such categories. The hybrid profiles resulting from the integration of content-based models with tag-based models may be exploited to help users in finding resources, people or tags in social tagging systems. Experiments on data collected from del.icio.us, 21 a social bookmarking sys-tem, showed better performance in comparison with other common recommendations methods based on tag popularity.

The tag-based user profile we propose is based on a tag set, each of which is associated with a value that represents how much the tag is relevant to the user. Formally, we can write belonging to one of the following dictionaries: subcategories T sc , tags T t and semantic tags T st . Those dictionaries are built during data extraction, as described in Section 2.3. The weight w ij of the tag t j for the user u i is in the range [0,1] .

Tags are also grouped according to their macro categories, for example, restaurants, hotels (see Figure 7). The user query selects one of the available categories and, in turn, the related subset of tags in up i .

To provide a specific user with the recommendation for a POI, the system estimates his interest for each object entity of the local db, which is located nearby the user. This value is determined by calculating the similarity between the descriptive tags assigned to objects during data extraction and those of the user profile, so giving a value in the range [0,1], where 1 means exact match. The similarity is considered separately for each class of tag and then combined. In particular, a vector representation of the set of tags in the users profile is built as follows: where each dimension corresponds to a separate tag. For example, given a user profile up i , the generic tag t l and the related weight up i , sc only if the tag appears both in the profile up i and in the subcategory collection of tags T sc . Each tag is assumed conditionally independent of every other tag. Similarly, we can obtain three vectors for each POI in the local db: According to our formalism, the similarity between the user u i characterized by the user profile up ( u i )andaPOI poi j is given by the following linear combination: where  X  sc ,  X  t and  X  st are three empirically determined constants. During the evalua-tion, they have been set in such a way to give higher relevance to subcategories ,which represent an important factor in the user interest in a POI. The function cos corre-sponds to the cosine similarity measure, basically a normalized dot product between two vectors. Formally, given two vectors x and y , the cosine similarity is defined as:
This metric is often used for text matching, where vectors represent term frequencies in a collection of documents. In our system, vectors consist of weighted tags associated with the POI and the user profile. The weights of a POI express how much that tag is really descriptive of it, the weights of user profile are a measure of user interest in the feature represented by that tag.

In a previous version of the current work [Di Napoli et al. 2010], tags associated with user profiles and POIs are not weighted, so we used the Jaccard coefficient ,which defines the similarity between the two sets up i and poi k as:
Basically, the Jaccard coefficient measures the similarity between two sets. In the current version of the system, tags of POI and user model are weighted, and this information would be ignored by the Jaccard coefficient. The proposed system requires the users profile to be constantly updated according to alterations of their preferences. Basically, the profile starts with an empty set of tags. During the interaction, users are able to save a POI to their favorite list. In this step, the user has the chance to alter the tags assigned to a POI and score it with a natural value in the range [1,5]. This interaction corresponds to a feedback that users submit to the recommender engine, thus revealing their current interests to a particular POI.

The assignment of a rating by the user results in altering his user model. In partic-ular, each time a user u i gives a rating rt toaPOI k , the weights w ij in up i are altered according to poi k . An approach similar to Rocchio classification [Salton and McGill 1983] has been devised: where  X  is a normalization factor and  X  is the renting factor. Basically, the renting technique helps alter or remove information from user models that are no longer judged interesting. There are two reasons that justify its presence. As time goes by, users could change their tastes for a particular class of POIs. For example, one user could discover Asian cuisine or get fed up with pizza. The recommender engines monitors these alterations and adapts the profile accordingly. One more reason is the chance to include wrong information in the user profile, so decreasing the accuracy of the recommendation process. By renting the profile, tags that are no longer subjected by user feedback are slowly wiped out. Context-aware and user profile recommendations are combined to obtain a single rank. The top ranked POIs are shown in the UI of the mobile device. Context-aware recommendation has priority over user profiling because of its ability to filter out POIs that are not feasible to be suggested to the user. For example, even though a restaurant has a perfect match with the tastes of a user, it would not be useful suggesting it if he is not able to reach the POI before its closing time (e.g., because he is too far). For this reason, the POIs that receive the highest rank from the neural networks are subjected to user profile recommendation.

Asking users for active participation in submitting relevance feedback to alter their profiles is useful, but needs effort and skill to accomplish, and sometimes even coun-terproductive [Anick 2003; Spink et al. 2000]. For this reason, we analyzed further mechanisms aimed at learning user interests without requiring additional effort be-sides monitoring the user interaction with the system. More precisely, we found the following.  X  Selection . It is relevant, though it may actually be less important than other action: often what drives the user to tap on a POI is the simple curiosity to see its details.
As a result of the action, the user might discover that the POI is completely out of his interests. In our system, given the space constraints imposed by the small screen of a mobile device, the only information that a user can access without expanding a
POI is its name. This could lead the user to select it in order to find out its categories and details, without being really interested in it.  X  Bookmarking . saving to the favorites shows a strong interest by the user to a given
POI.  X  Visualizing the map at the segment level. It cannot be considered as an expression of user interest, if not with regard to the particular area shown in the map. This criterion, however, is not relevant during the recommendation process, since it would make the user model linked to the geographic location rather than the interests in
POIs.  X  Suggesting a POI to a friend. This action could not give specific evidence of the user interest in that POI. In fact, the user could recommend the POI to a friend with preferences different from his own, thus expressing a feedback regarding his friend interests, not his own interests.

An interesting implicit feedback approach that we are planning to include in our prototype is tracking the user X  X  position over time. Basically, a long pause in a given location that does not correspond to well-known spots (e.g., home or work) is assumed to be related to a potential interest in some POI located in the surrounding area (e.g., shop of clothing, a movie in a theater). The recommender engine periodically checks for this information and includes it in the current user profile.

In spite of the noise in the derived information, it is reasonable to assume that the analysis of a great amount of such information, shared among different users, may be useful in terms of representation of interests. Several social network services (e.g., Facebook, 22 Foursquare 23 ) already allow users to check in at local businesses through their mobile devices. Currently, this feature has not been included in the evaluation because we lack adequate usage data and diary studies to exhaustively assess the real benefits. An important issue in evaluating personalized LBSs is the unavoidable subjectivity of the test. The relevance of a POI for a user is a factor impossible to objectively quantify, thus it is necessary to rely on human testers for assessing the real effectiveness of the system. While it is possible to ask some users to employ the personalized LBS over a long period and document each instance of the mobile search activity, it is difficult to collect enough data to make a traditional comparison between two or more different personalized services. Users show different tastes and preferences. Moreover, the same POI is unlikely to be evaluated by two or more users unless they live or visit the same neighborhood. Two evaluations cannot exactly share the same context, therefore it is impossible to reproduce the same scenario for two or more users. Whenever a within-subjects experiment is chosen for evaluating the performance, it is possible for participants to learn or remember the results from a previously assigned search task, so introducing bias effects. For this reason, it is not possible to ask users to perform the same task on two different platforms.

In the system evaluation, we chose to restrict the domain of POIs to restaurants in order to focus the analysis on a category of business most users are familiar with. We assume that everybody visits a restaurant every so often and that people do not have bias towards restaurants in general. Furthermore, this domain is rich and diversified, thus enabling us to evaluate the full potential of the system. The goal we pursued was to evaluate the real benefits in terms of user satisfaction that people obtain because of the personalization of search interaction compared with traditional approaches in various contexts of use. The contextual factors included in the evaluation were location, time, weather, user activity, and means of transport. In particular, we employed the same Google Maps mashup for all the approaches where the 10 top-ranked POIs are represented by map pins. The name and address of the POI entry is shown when a map pin is clicked. Users were free to acquire additional information (e.g., reviews and pictures) by querying the Web through a traditional desktop PC. The laboratory study allowed us to focus our investigation on testing well-defined hypotheses under controlled conditions, which can be repeated for further comparisons. A total of 50 people were recruited to participate in the user evaluation, mostly students of computer science courses. The majority of them were below 30 years old (98%). This choice allowed us to have a group of people deemed comfortable with using technology in their daily activities and the most likely to use mobile devices. All participants held a bachelor X  X  degree, 14% a postgraduate degree too. There were a majority of males (44) over females (6). Almost all participants (98%) traveled at least once a year, between 3 to 7 days per trip. While all of them knew LBSs and owned a last generation smart phone, when traveling participants usually obtained information beforehand, mainly from Web sites or by interacting with friends. The reason was due to the high roaming costs to overseas networks, when data is routed via those hosts instead of home operator. Long browsing and search sessions or data required to build maps and for navigation can get expensive very quickly. Providing adaptation to the interaction in terms of number of iterative steps to reach the subset of POIs of interest has the chance to relieve this important drawback. The laboratory study took place in three different steps. To begin with, we collected information about the users preferences and we asked them to express a rating for some restaurants retrieved by a popular LBSs near given locations in three different U.S. cities. Afterwards, we made a comparison of the obtained ratings with the order determined by the LBS based on the proposed approach. This technique can allow statistical comparisons to be made between the orders expressed by participants and the order provided by the recommender engine [Nowicki 2003]. Moreover, it is possible to involve a larger set of people in comparison with evaluations where people were asked to use the recommender prototype in real scenarios [Church et al. 2010; Amin et al. 2009; Sohn et al. 2008]. Further recommender approaches based on popular algorithms have been included in the evaluation in order to estimate the gain obtained in comparison with state-of-the-art technology. The proposed approach includes a user modeling component to represent user prefer-ences and exploits this information to rank available POIs in the users neighborhood. To that end, each user was presented with a selection of 30 restaurants in New York, randomly chosen from the data extraction engine. Along with names and addresses of restaurants, users were presented with additional information extracted from the Web, namely, category (i.e., fast-food or restaurant), food (e.g., Mediterranean, Ethiopian, Italian), average price, private lot and/or valet availability, take-away, outdoor seats, reservation, waiter service, kind of meal served (i.e., breakfast, dinner, lunch), distance, time before closing, credit card accepted, good for groups, good for children, wheelchair accessibility. Users had the chance to autonomously search additional infor-mation (e.g., photos and reviews) before assigning a rating in the range: 1 ( X  X  do not like it at all X ) to 5 ( X  X  like it very much X ). This rating corresponds to the preferences that the user submits when the POI is saved in his favorite list (see Figure 2(e)). As stated before, traditional advanced activities, such as product comparisons, strive to be achieved be-cause multiple window navigation or other interface solutions are not possible [Nielsen 2009]. For this reason, the ordering of top ranked results becomes the crucial factor to be evaluated in personalized mobile recommender systems. Users were presented with three sets, each consisting of 30 restaurants located in three different cities of the United States, namely, Washington, Minneapolis and Las Vegas. The three sets of cities were populated by querying a traditional local search Web site with randomly chosen street addresses. Users were asked to express a judgment for each restaurant with a three-point Likert-type scale of values (i.e., 0 = nonsignificant ,1 = significant and 2 = very significant ) according to four different contexts of use, namely:  X  X ontext #0: unknown context;  X  X ontext #1: You are going by car in the evening, you want to have dinner, weather is good, restaurants will be open for at least 2 hours;  X  X ontext #2: You are going on foot in the evening, you want to have dinner and weather is good, restaurants will be open for at least two hours;  X  X ontext #3: You are going on foot, you want to have lunch, weather is good, you are just out of your place of work/study, restaurants will be closed in 30/60 minutes.
To mitigate the positional bias of the items on top of the list, the order of the POIs was randomized for each user. At the end of this step, we collected an amount of 240 ratings for each of the 50 users involved in the experiments. The average time to complete the evaluation was 31 minutes per user. In the second step, we assessed the effectiveness of the system in recommending restaurants located in different cities based on the tester X  X  preferences in various con-texts of use. As for baseline prediction methods, we selected four algorithms. We made use of the traditional location-based metric, where the top-ranked POIs are the ones closer to the user X  X  current location. The results were obtained from the online social networking local search Web site Yelp, which is likely to balance proximity of POIs and numbers of positive user reviews. Moreover, two collaborative filtering (CF) algorithms have been included in the experiment: the popular user-based nearest neighbor-hood [Schafer et al. 2007] and a context-aware CF-based recommendation [Chen 2005]. This latter approach predicts preferences in different context situations by weighting the ratings according to a similarity measure between the current and past contexts. As for the evaluation of the proposed approach, we built three variants. The first fully implements the user profiling and the context-aware functionalities. The other two are obtained by discarding the context-aware and the user profiling feature, respectively. In such a way, it is possible to evaluate the individual performance of the personalization processes of the proposed recommender. The system is trained with information from Yelp, Zagat, 24 and Google Local. 25 It is important to note that CF-based recommender systems compute correlations between pairs of users to identify a user  X  X eighborhood X  in taste space. For this reason, there must be a strong overlap between users ratings. For each user in the community, there are other users with common needs or tastes. Rarely rated entities or users that provide few feedbacks affect negatively recommendations because the data distribution does not allow similarity measures to be determined. The requirements of the proposed approach are less restrictive. The training data used in the users profiling consists of a subset of POIs that are subject to feedback. It is possible to collect this data during the usual interaction with the system. If two users live in different cities, or one user is temporar-ily visiting a city for the first time, CF-based approaches usually fail to provide any useful recommendation. On the contrary, the proposed approach is able to evaluate the current context and match it with the available POIs even if the current user does not share any POI with others. For these reasons, K-fold cross-validation has been chosen for the training phase of the CF-based algorithms. We made a subsampling by splitting users into ten bins and randomly selected five users from each bin. After that, we iteratively selected all the ratings belonging to one bin as training data. The K results from the folds are averaged to produce a single estimation. It is worth noting that, unlikely the CF-based training, none of the sets of user ratings has been investigated for the learning phase of the proposed algorithms. In other words, our recommender system is not able to make any statistical analysis of the expected ratings submitted by similar users, that is, in real scenarios, the strong overlap of rated items between users that we are able to obtain by asking each user to rate all the available POIs is not conceivable. This condition puts CF-based recommenders in a favorable position in our evaluation; indeed, it allows us to compare different approaches with the same dataset. In order to measure the effectiveness of the recommendation process when more data becomes available, while at the same time keeping the number of POIs invariant, the algorithms are applied to two datasets of ratings. The former consisted of a subset of 15 users from the overall 50-user set, the latter corresponded to the whole dataset. We expect that the relative performance of CF-based recommendation varies depending on the size of the group being considered, while the algorithms built on pre-defined values are not significantly affected. The performance of the recommendation process was assessed by evaluating the normalized version of Discounted Cumulative Gain (nDCG) [J  X  arvelin and Kek  X  al  X  ainen 2000, 2002]. nDCG is usually truncated at a particular rank level to emphasize the importance of the first retrieved documents. To focus on the top-ranked items, we considered the DCG@n by analyzing the ranking of the top n items in the recommended list with n  X  X  1 , 5 , 10 } . The measure is defined as follows: and the Discounted Cumulative Gain (DCG) is defined as: where rel i is the graded relevance of the i  X  th result (i.e., 0 = non-significant , 1 = significant and 2 = very significant ), and the Ideal DCG ( IDCG ) for a query corre-sponds with the DC G measure where scores are resorted monotonically decreasing, that is, the maximum possible DCG value over that query. nDCG is often used to evaluate search engine algorithms and other techniques whose goal is to order a subset of items in such a way that highly relevant documents are placed on top of the list, while less important ones are moved lower. Basically, higher values of nDCG mean that the system output gets closer to the ideal ranked output. After empirical analysis on part of the dataset, the values of the constants were set as shown in Table I.
In order to evaluate the reliability of such comparisons, all results were tested for statistical significance using t-test. In each case, we obtained a p-value &lt; 0 . 001. There-fore, the null hypothesis that values are drawn from the same population (i.e., the output of two recommendation approaches are virtually equivalent) can be rejected.
Table II summarizes the evaluation results. In terms of best performance, Polar gains on the ideal ranking of users. More precisely, the recommender with both user profiling and context-aware recommendation obtains higher results when the task is to build 5-item and 10-item ordered list. If we look at the top-ranked result, the context-aware recommendation does not provide any benefit in the final ranking (nDCG@1 = 0.32). Several POIs in the evaluation share the same features; therefore, the neural network is not able to effectively recognize the best POI to recommend. On the contrary, user preferences play an important role to choose the better POI (nDCG@1 = 0.42). Other approaches do not behave very well in this task. The context-aware version of the CF-based recommender achieves a nDCG@1 of 0.15 meaning that collaborative approaches do not succeed in this particular task. Better performance is reached if we collect more search results. Context-aware recommendation and UM-based filtering combined are able to outperform other approaches with a nDCG@10 of 0.73 (see also Figure 8). The relative gap between Polar and context-aware CF is still tangible. Location-based met-ric has results comparable to context-aware CF, especially for nDCG at 1 and 5, while the latter approach behaves in a better way if the task it to retrieve ten results, that is, when the area of interest gets larger and several POIs become available. The evalua-tion of the CF-based recommender was limited to the Context #0 because the algorithm is not able to take into consideration any contextual factor. In spite of that, the rec-ommender does not gain any benefit showing the worst performance. Even though the training dataset allows the recommender to make relevant similarities between users, the ranking of the available POIs is significantly dissimilar to the ideal ordering. The popular Yelp LBS obtains average scores, comparable to location-based and context-aware CF-based recommendations. Some criticisms have been raised against the LBS because of the influence of paying advertisers in the ranking process. Moreover, it is not clear how much positive and negative reviews affect the ranking. By comparing the 15-users and 50-users datasets of ratings, it is possible to note how the performance of the recommenders are not significantly altered. This was to be expected for approaches that do not make any prediction based on the ratings submitted among similar users. On the contrary, it is an unusual observation for CF-based recommenders that suffer from the sparsity problem, that is, situations where training data is lacking or in-sufficient. Giving more chances to find correlations between users by increasing their number and their ratings in the dataset does not provide any relevant benefit. In other words, there are not evident correlations between the relatively scarce performance of CF-based recommenders and the number of users involved in our test bed.

Tables III and IV report the behavior of Polar and context-aware CF in the three analyzed contexts. The major evidence that is possible to point out is the higher devi-ation of the CF-based recommender. For example, CF-based recommender nDCG@10 measure shows a standard deviation  X  = 0 . 22 compared with  X  = 0 . 02 of Polar. The former approach is more sensitive to particular configurations of contextual factors that could negatively alter the average performance.
 Research topics related to our system include recommender systems, mobile informa-tion access, location-based services, and context-aware mobile recommendation. Since the publication of the first papers on collaborative filtering [Hill et al. 1995; Resnick et al. 1994; Shardanand and Maes 1995], recommender systems have become a burgeoning research field. Adomavicius and Tuzhilin [2005] present a comprehen-sive overview, and describe some limitations of the current generation of recommender systems. Moreover, they advance some possible extensions that could improve the user experience. Among others, these extensions include an enhanced understanding of users and items, and the inclusion of information about user context into the recom-mendation process. As regards the latter point, in Adomavicius et al. [2005] the same authors, along with R. Sankaranarayanan and S. Sen, put forward an interesting mul-tidimensional recommendation model that extends the conventional two-dimensional (Users x Item) paradigm. This approach enables additional information about the user context to be incorporated in recommender systems. Since traditional collaborative filtering systems assume a uniform context, they typically employ all collected data to determine appropriate recommendations. Conversely, the system proposed in Ado-mavicius et al. [2005] relies on a reduction-based approach that takes into account only the ratings related to the context of the user-specified criteria in which a recommen-dation is suggested. Furthermore, in order to predict unknown ratings, the proposed method combines some multistrategy and machine learning methods [Atkeson et al. 1997; Hand et al. 2001] with the On-Line Analytical Processing [Kimball 1996; Chaud-huri and Dayal 1997] and marketing segmentation models [Kotler 2009]. With a view to assessing performance of their system, the authors describe a movie recommenda-tion application that includes multidimensional contextual information, such as when, with whom, and where the movie was seen. The differences with our contextualiza-tion module are significant, first of all, the recommendation approach. Moreover, the considered contextual information is obviously different in the two approaches, since our application is specially designed for mobile users. Conversely, the employment of machine learning techniques is an aspect common to both approaches. Another distinctive feature of our approach is that it concerns mobile information access. There exist several notable studies of user behavior of mobile devices. For instance, Church et al. [2007] illustrate a study of over 600,000 European users mobile Internet habits, with particular emphasis on mobile search. Among the main findings of this study, the authors report that, when their paper was published, mobile information access was much more aimed at browsing than searching activities. According to the authors, the reasons for this are related to the peculiar challenges that the mobile field is faced with, above all screen real-estate and text input limitations. As main solution, the authors propose the recognition of mobile user information needs in order to enable the next mobile search engines to fit individual preferences of searchers.
Church et al. [2008] present the results of an in-depth analysis of mobile search behavior of over 2.6 million European mobile subscribers, of which 260,000 (about 11%) submitted at least one search query. This study outperforms the previous ones [Baeza-Yates et al. 2007; Church et al. 2007; Kamvar and Baluja 2006, 2007] in terms of analyzed number of mobile searchers, queries, and search engines. Moreover, it was the first study to examine the click-through behavior of mobile searchers. This enabled the authors to draw some interesting conclusions, including that mobile search engines have widely adopted a traditional Web-based approach to search, which is not yet able to fulfill user expectations. Almost 90% of searches are not followed by the selection of returned results, which shows that users do not find relevant information in them. To solve this problem, the authors suggest exploiting the personal nature of mobile devices that supports the search personalization. Furthermore, location-sensing technologies enable the introduction of new contextual information into the search process. Obviously, all these considerations have inspired our approach.
Yi et al. [2008] investigate the patterns of 20 million mobile queries issued by users in US, Canada, Europe, and Asia, over a period of two months at the end of 2007. Users submitted their search queries from mobile devices through Yahoo! oneSearch 26 application. The aim of this analytical study was to collect quantitative statistics on several aspects of mobile search, in order to better understand if mobile search is able to meet users information needs. Among the most relevant results of this study there is the evidence of high variability of mobile query patterns. According to the authors, the usage patterns are dynamic since users are still puzzling out how to take advantage of new mobile devices and services. Moreover, statistics show significant variations in the regional query patterns among US and other users. As in the previous studies, Yi et al. highlight the need to better understand the user intent behind mobile search query with a view to improving the user experience.

Amin et al. [2009] describe the results of a Web-based diary study about location-based behavior search through a mobile search engine. This analysis encompasses the spatial, social, and temporal contexts of search. To this aim, the authors examined search engine log data, location data tracking, and diary entries. The results of this study show that location-based searches are usually relied on just-in-time information needs that are closely related to social activity. In fact, most location-based searches on mobile devices are performed when users are along with other people, such as relatives, friends, and colleagues. In addition, people usually move along regular routes in their environment and go regularly to the same places of interest, such as work and home. Hence, this study further confirms the importance of taking into account user information needs and context in search and recommendation processes.

Kamvar et al. [2009] report on an interesting comparison based on Google search logs through three different devices: computer, iPhone, and conventional mobile phone. For each of these interfaces, the authors extracted about 100,000 queries submitted by more than 10,000 people over a period of 35 days in 2008. The aim of this study was to understand the differences in search patterns across different platforms, espe-cially among mobile and computer-based users. More precisely, the authors analyzed the variability and distribution of tasks accomplished by users from each platform. As for our purposes, the most interesting result is that the return rate is much higher for frequent computer-based searchers than for frequent iPhone or conventional mobile phone searchers. This result led the authors to conclude that search on any mobile de-vice is still deemed to be a secondary mode of searching. It follows that new techniques for identifying user information needs and context are needed in order to provide users with personalized results, thus improving their satisfaction with the overall search experience. The advanced system is a SRS able to identify user preferences and needs in order to provide useful recommendations concerning possible POIs in the surroundings of the user X  X  current location. As far we know, there is no report in literature that proposes similar approaches. However, some systems exhibit a few similarities with the one herein described.

O X  X rien et al. [2009] point out that much research has been conducted on the per-sonalization of Web and desktop search, but less work has been devoted to the local search. According to the authors, a single user profile is not effective in local search, so they propose a model to customize the results from local search engines. This model relies on a combination of profile-based modeling and click-through data modeling. The former represents user profiles as vectors of users interests, the latter exploits implicit feedback from users to model their interests and needs. User profiles are em-ployed to compare the results from local search with the categories of user interest and businesses for which they have shown attention by clicking on the related search result. Experimental tests carried out on a group of 12 users using the business In-ternet Yellow Page 27 directories as search results have shown better performance of the proposed system in terms of mean average precision compared to a baseline (not personalized) ranking system. The approach described in O X  X rien et al. [2009] shares some aspects with our system, but is not able to exploit the wealth of information from social networking and user reviews.

In Pannevis and Marx [2008], the implementation of a LBS on a normal mobile phone with minimal requirements is described, which enables users to exploit public sources from the Internet that can be associated with geographic locations. According to the authors, similar systems have already been developed, but they can rely on specific hardware and software, ad-hoc built devices, and can work only in limited areas. More-over, they only use their own data. On the contrary, the system proposed in Pannevis and Marx [2008], named Nulaz, can collect time and location-based information from seven different Web sources, each one with its own data format. Nulaz works through a light J2ME program on a mobile phone that connects via Bluetooth to a GPS device in order to retrieve current location coordinates. Unfortunately, the authors do not provide any experimental evidence to evaluate the effectiveness and efficiency of the developed system. Although there are some similarities with our approach, the differ-ences are substantial. As in O X  X rien et al. [2009], this approach does not take advantage of the information from users willing to collaborate and to share their opinions and experiences online. Furthermore, the system is not able to adapt its output to the user.
Carmagnola et al. [2008] propose a framework for integrating the Web 2.0 paradigm, above all social annotation, with user modeling and adaptation. The authors X  objective is to extend the capabilities of content-based recommendation systems by means of the users tagging activity. In Carmagnola et al. [2008], a prototype implementation in the cultural heritage field is described. Tags, and folksonomies derived from tags, are employed to suggest personalized navigation paths through contents. The user model is exploited to assist users in tagging, creating contents, and navigation activities. The developed system has been evaluated by means of two sets of empirical tests especially designed to verify the usability of the user interface with respect to the adaptive behavior of the system. Further tests have been performed to analyze the role of tags in the definition of the user model and their impact on the accuracy of recommendations. A limitation of this approach is related to the source of tags. During the system normal operation, tags are assigned to resources mostly by domain experts, which are in charge of this operation. The  X  X ne-time users, X  who are the main beneficiaries of this service, seldom assign tags to resources. As we have seen, our system allows users to assign tags, but, unlike the proposed framework in Carmagnola et al. [2008], also provides procedures to extract information as tags from social networking, user reviews, and local search Web sites.
Another system that shares some similarities with our approach is presented in Park et al. [2007]. The authors propose a map-based recommendation system able to take user preferences into account through a model based on Bayesian networks. The system collects user request and information about the context of use (e.g., location, time, and weather) from the mobile device. Then, it leverages the user profile to display the most relevant POIs on the map. The major difference with our system is that it does not extract information from Web sources, nor social networking. Specifically, the system described in Park et al. [2007] selects the most relevant POIs for the user from among a limited number of POIs. The experimental tests reported in the paper have been performed on a dataset of 50 restaurants located in the same geographic area and data collected by four registered users within a week. Dragoi and Black [2004] envisioned scenarios where users would have looked for rele-vant POIs by querying services through mobile phones and standard Internet protocols. In 1994, Schilit et al. [1994] pioneered the term context-aware pervasive systems . Their work detailed a model of computing in which several diverse mobile and stationary systems interact with the user in order to determine, according to the user X  X  location, POIs and people that are near, as well as changes in those objects over time. Several different approaches and architectures have been proposed in literature. Some of them are aimed at contextualizing the human-computer interaction in mobile devices. For example, tourist guide applications may use context, such as the user X  X  current location, to adapt the presentation of hypermedia and support the information needs of city visitors [Cheverst et al. 2002]. Basically, the adaptation is performed according to visitors profiles updated with information such as age, dietary preferences, and current location, or with implicitly collected data, such as frequently visited pages.
Kjeldskov [2002] focuses on the development of context sensitive GUI for less complex and easier interactions, giving an example on booking movies from mobile devices. The same author, along with Paay [2005], studies the complexity of social interactions in public places and how the physical and social affordances of a place influence the situated interactions that occur there. According to the supposition that people like to return to places they have already known, have been to before with friends or that have been suggested by a friend, they provide a social recommender system that keeps track of all this data and ranks the places consequently. Of course, the recommender has to be aware of the social network surrounding the user and the related activity that interests the POIs (i.e., positive feedback).

AmbieSense [G  X  oker et al. 2004; G  X  oker and Myrhaug 2008] is a network of wireless context tags mounted inside furniture, beside art works, in a meeting room, shop window or open area. These tags allow one to receive content relevant to the specific situation on mobile phones when people are in close proximity of some relevant POIs.
The GUIDE system uses environmental context to select resources to be presented to the visitors, for example, removing all closed businesses from the presented list [Cheverst et al. 2001]. Riboni and Bettini [2009] perform statistical and ontology-based activity recognition in the e-Health domain in order to develop systems for rehabilitation, chronic disease management, and monitoring of the elderly.
To the best of our knowledge, there are very few attempts to investigate the integra-tion of context-awareness technologies into location-based services for mobile environ-ments. One of the most relevant is SmartCon, a context-aware application based on neural networks [Al-Masri and Mahmoud 2006, 2009]. SmartCon shares some ideas with the proposed approach, namely, the feature-based representations of POIs and the use of neural networks to match them with the user current context. However, the authors do not take into consideration a traditional scenario where mobile phones interact with Web LBSs but they consider customized mobile services and sensors in health monitoring context.

The social pervasive recommender named SPETA [Garc  X   X a-Crespo et al. 2009] uses vector representations to draw distances between POIs and user preferences. It collects features of frequently visited POIs and exploits them for user profiling. Collaborative filtering affects the matching by also considering opinions from other users. The com-bination of different measures can improve the accuracy of recommendations but the authors still have to provide an empirical evaluation of the system. Moreover, long-term profiles of user preferences might affect negatively the recommendations. If a user goes frequently to a Chinese restaurant and decides to go on holiday in Italy, maybe he could like to taste local cuisine instead of his favorite food.

Console et al. [2003] have devised an architecture for providing personalized ser-vices on-board vehicles. The recommendation is performed according to stereotypes of users that represent their interests. Context related to physical environment is analyzed basically to filter out points too far from the current location or assess high-traffic conditions. An interesting aspect of this architecture is the chance to express implicit feedback by monitoring the user interaction and behavior. CareDB [Mokbel and Levandoski 2009] follows a similar approach, where a so-called query rewriting module translates preferences and context into db query operators. Unfortunately, both of the approaches do not include any evaluation in real scenarios.

Van Laerhoven et al. [2001] study Kohonen self-organizing map implemented on wearable handheld computers to analyze data coming from different sensors to learn different simple activities (e.g., sitting, standing, and walking) and automatically start processes or tasks depending on the current context. In this article, we have presented a social recommender system for context-aware mobile services. The system infers user preferences and exploits this information along with the current context in order to provide users with personalized recommendations about points of interest in the surroundings of the user X  X  current position.
The key features of the proposed approach are: (i) unlike the current location-based services, it supplies a methodology for identifying user interests and needs to be used in the information filtering; (ii) it exploits the wealth of information from local search Web sites, social networking, and user reviews; (iii) it establishes procedures for defining the context of use to be employed in the recommendation of POIs.

The results of an evaluation performed on real users show that the proposed ap-proach provides significant benefits in terms of effectiveness in comparison with non-personalized recommendation algorithms. Statistical significance tests have confirmed the reliability of the experimental results.

There are interesting avenues for further investigation. Firstly, we plan to inves-tigate a Web mining approach that combines social network analysis with automatic sentiment classification for weighting the forum posts of the contributors according to their network position in order to predict trends and real world events. In addition, we intend to explore other methods to identify personalized recommendations, such as applying Latent Semantic Analysis on tag extraction phase for extracting concepts from folksonomies.

