 Spatio-temporal databases deal with geometries changing over time. In general, geometries do not only change discretely but continuously; hence we are dealing with moving objects. In the past, a few moving object data models and query languages have been proposed. Each of them supports either historical movements or future movements but not both together. Consequently, queries that start in the past and extend into the future cannot be supported. To model both historical and future movements of an object, two separate concepts with different properties are required, and extra attention is necessary to avoid their conflicts. Furthermore, cur-rent definitions of moving objects are too general and vague. It is unclear how a moving object is allowed to move through space and time. For instance, the continuity or discontinuity of motion is not specified. In this paper, we propose a new moving object data model called Balloon model which provides integrated support for both historical and future movements of moving objects. As part of the model, we provide formal definitions of moving objects with respect to their past and future movements. All kinds of queries including past queries, future queries, and queries that start in the past and end in the future are supported in our model.
 H.2.8 [ Information Systems ]: Spatial databases and GIS Design Spatio-temporal data model, moving objects databases, GIS, histor-ical movements, predictive movements, Balloon model, continuity of evolutions.  X 
This work was partially supported by the National Science Foun-dation under grant numbe r NSF-CAR EER-IIS-0347574.

In recent years, with the advances in storage, sensor, and database technologies, considerable progress has been made to manage tem-porally dependent spatial data. Across many diverse disciplines including robotics, mobile computing, and geographical science, the growing demand for handling changing geometric objects has fueled research in spatial and temporal databases and led to their fusion into spatio-temporal databases. We are especially interested in the design of data models for continuously changing geometric objects over time that are typically known as moving objects .
Although there have been some developments with respect to modeling and managing moving objects, we have identified three main problems. The first problem concerns the modeling of his-torical movements of moving objects. Existing approaches define a moving object data type as a function from time to space. This con-cept is very useful since it can be applied to construct a moving data type from any non-moving type. However, the lack of well defined properties of the mapping function makes it very general and vague. It is unclear how a moving object can move or evolve in space and time, and whether the function representing the movements is a total or partial function. In fact, the concept of movement and evo-lution including their properties such as continuity, splitting, and disappearing, as they are applied to moving objects, have not been investigated. The second problem concerns the modeling of future movements of moving objects. Existing models tend to support the near future movements of moving objects in specific environments, e.g., a constrained network environment, by providing a specific method for predicting and querying the movements. Recently, a new research development has taken a different approach by fo-cusing on defining a generic data model and handling the inherent uncertainty aspect of future movements of moving objects instead of predicting it. In any case, the time to space function is implied such that giving a time instant in the future, the potential positions of the moving object are provided. Again, the lack of a precise specification of the properties of future movements and evolutions makes it unclear how a moving object can move or evolve in the future. Finally, the third problem is the lack of an integrated and unified model which can support both historical and future move-ments of moving objects. So far, existing models support either historical movements or future movements but not both together. Modeling the past and future movements of an object requires two separate concepts. This requires extra attention to synchronize both concepts in a single model such that they can be applied to the same object without conflicting each other. Another drawback is the difficulty or lack of support for past-future spanning queries, i.e., queries that evaluate moving data that start from the past and extend into the future.

The goal of this paper is to solve these problems by introducing a new model called Balloon model to support both historical and future movements of moving objects. We use the metaphor of a balloon to model a moving object: the string and the body of the balloon object represent the past and the future movement respec-tively. For example, the projected past movement and future pre-diction of the eye of a hurricane are usually illustrated using a shape that resembles a balloon. The past movement of the eye (a moving point) can be seen over time as a movement along a line or a curve which resembles the string of a balloon. On the other hand, the position of the eye at a time instant in the future can be anywhere within an area of uncertainty. Thus, the future movement of the eye can be seen as a moving region of uncertainty. This moving re-gion of uncertainty resembles the body of a balloon. Furthermore, the connection point between the string and the body of a balloon object represents the present state of the moving object. With this model, we define a new set of data types for representing different kinds of balloon objects. We solve the first two problems by pro-viding a precise and formal definition of moving objects (balloon objects) along with specifications of the properties of their move-ments. We solve the third problem by modeling both historical movements and future predictions of moving objects in our model and providing support for new operations and queries.
 The paper is presented according to the following structure. In Section 2, we discuss spatial objects as well as existing models for past and future movements of moving objects. In Section 3, we explore how a moving object can move or evolve and define a model for historical development of moving objects. Then, we de-scribe how future movements of moving objects can be represented in Section 4. Based on these definitions, we propose our Balloon model including data type definitions and operations in Section 5. Then, we present different types of queries that can be supported by this model in Section 6. Finally, in Section 7, we draw conclusions and discuss future work.
Within the past decade, there have been several major develop-ments of spatio-temporal data models [12]. Among these develop-ments, moving object models have been of significant interest in both application and research directions [9]. Each moving object model concerns about the movement of spatial objects. In Section 2.1, we briefly discuss the different types of spatial objects. Then in Section 2.2, we discuss an existing moving object model that supports the past evolution of moving objects. We take a look at a number of models that support specific types of near future devel-opments of moving objects in Section 2.3.
The development of data models for spatial data can be distin-guished into two generations of models. The first generation offers simple structure objects like single points, continuous lines, and simple regions (Figure 1). Since these simple geometric structures are not able to represent a variety of complex geographic reality, the second generation of data models solves this problem by providing more complex representations of spatial objects that allow support for multi-component objects as w ell as objects with holes. This development offers complex spatial data types including complex points , complex lines ,and complex regions (Figure 2). The formal definition of these data types is d efined based on poi nt-set topol-ogy and is provided in [14]. Here, we only provide a rough and informal description of these complex spatial types. A complex point object is a finite set of single points. Each of these points is a component of the complex point. A complex line is defined as the union of the images of a finite number of continuous mappings. Each connected set of these images is called a block representing a component of the complex line. A complex region is defined as asetwhichis regular closed , bounded , and may contain a finite number of connected sets. Each of these connected sets is called a face, and each face may contain one or more holes. Note that these complex spatial data types allow a special object which is an empty object denoted by  X  to represent the undefined value that may be a result of spatial operations. Figure 1: Examples of a simple point object (a), a simple line object (b), a simple region object (c). Figure 2: Examples of a complex point object (a), a complex line object (b), and a complex region object (c).

To study the movements and evolutions of these objects, it is es-sential to have a clear understanding of their definition. It is beyond the scope of this paper to provide details on this aspect. Thus, we assume that this concept of spatial objects is well understood. In this paper, we define movements and evolutions of both simple and complex spatial objects. Thus, our Balloon model supports both generations of spatial objects. Since simple spatial types are just special cases of complex spatial types, throughout this paper, we will address these spatial data types by point , line ,and region .
Some approaches have been taken to represent the (past) move-ment of moving objects [8, 16]. The past development is a histori-cal fact that is modeled as a function from time to space [1, 6]. For an arbitrary data type  X  , the corresponding moving data type of  X  is a function  X  (  X  ) that provides the mapping from the temporal domain to  X  , i.e., By applying the type constructor  X  to spatial data types such as point , line ,and region , the definition o f the corresponding moving data types such as moving point ( m point ), moving line ( mline ), and moving region ( mregion ) can be obtained respectively [2]. Since only the domain and range of the function is specified, this function can take any shape and form making these data type def-initions vague. For example, the definition allows a moving point to move continuously (Figure 3(a)), disappear for periods of time (Figure 3(b)), jump in space at specific time instants (Figure 3(c)), or even appear instantly (Figure 3(d)). Some of these configura-tions of a moving point are against our intuitive understanding of movement. Furthermore, these definitions tend to assume that we have precise and complete knowledge about the evolution of spa-tial objects. Hence, only the past evolution can be modeled, and the temporal domain should not exceed the present into the future. In our Balloon model, we employ a similar approach of using a type constructor to construct moving types for representing histori-cal movements of balloon objects. However, we take the extra step of specifying the properties of objects X  movements as well as evo-lutions and describe how an object can move or evolve in the past.
With regard to the future movements of moving objects, cur-rently existing models are restricted to specific types of motion. The MOST model [15], which is based on the concept of motion vector, is able to represent near future developments of moving ob-jects through an assumption on the objects X  inertia that the current motion direction does not change in the near future. Although, this model is able to represent the near future movement of a moving object, the predictive movement is rather limited to a single motion function. The aspect of uncertainty such as the probability of oc-currence is not part of the model. Other models are able to capture the uncertainty aspect of the future movements through the use of a trajectory or motion plan with a constant [7] or variable uncertainty threshold [11]. Another approach presented in [10] models and pre-dicts future movements of moving objects in a constrained network environment. However, an aspect which all of these models have in common is that they are designed to handle a specific type of motion only; they offer or assume a specific prediction technique and provide querying capabilities on the predicted data.

A recent approach called the FuMMO model [13] focuses on modeling how the future movements of moving objects may look like in general instead of providing a specific prediction model for a specific kind of movements. The model emphasizes the separation between the prediction, which should be a task of domain experts, and the generic data modeling of future movements, which a mov-ing object database management system should support. Although this is a considerable step in the right direction, the model uses a similar type construction method as in the case of the historical model and lacks precise definitions of function properties. Further-more, this model uses spatial data types as the basis for constructing future moving object data types. As a result, the construction pro-cedure is complex due to the number of steps required to specify future moving data types. In our Balloon model, we take a different approach by specifying the future moving data types for balloon ob-jects based on our historical moving types. In doing so, we reduce the complexity of the type constructions as well as offer a precise definition of the future movements of moving objects.
Before we can define a model for moving objects, we must have a clear understanding of the concepts of movement. In this sec-tion, we focus on defining how an object can move and/or evolve in space and time. We are especially interested in the movement and evolution of both simple and complex spatial objects. To specify how these objects move or evolve, we first define the properties of movement and evolution including the aspects of continuity, grow-ing, and shrinking for simple spatial objects in Section 3.1. Having defined how a simple object moves or evolves, we can then use these concepts to specify how a complex object moves or evolves and discuss additional problems such as appearing, disappearing, splitting, an d merging of object components in Section 3.2. These concepts are then used in Section 3.3 to define moving data types for historical movements of moving objects.
To define the movement or evolution of objects, we first need to define a concept for time and space. Since we are interested in continuously changing information, we define a type time In regard to space, we use the two-dimensional Euclidean space. Here, we concern about the developments of two-dimensional spa-tial objects over time.

Recall that spatial data types are defined to include also the empty object (  X  ) which is used to represent the nonexistence or undefined value of spatial objects [14]. To model movements for these ob-jects, existing approaches have been to define a moving object as a function of spatial objects over time. For an object of a spa-tial type  X  ,a spatio-temporal mapping is defined as a function  X  (  X  )= time  X   X  . Without any constraint or limitation, this func-tion is too general for specifying moving objects since it allows un-desirable movements such as instantaneous jumps (Figure 3(c)) and instantaneous appearances (Figure 3(d)). The latter case is obvious, so we only need to define the former case. An instantaneous jump of a spatio-temporal mapping f at a time instant t is defined such that lim  X   X  0 f ( t  X   X  ) = f ( t ) . In Figure 3(c), we indicate an instan-taneous jump by a hollow circle and a dashed line connecting the movement before and after the jump. Although these discontinuous movements are impractical in nature, certain types of discontinuity such as periods of unknown movements should be allowed (Fig-ure 3(b)). To accommodate this, we need to specify constraints on the spatio-temporal mapping  X  (  X  ) such that undesired scenarios are excluded. Thus, we define an interval-based spatio-temporal mapping of a type  X  as follows: Definition 1 A spatio-temporal mapping f :  X  (  X  ) for a spatial data type  X  is an interval-based spatio-temporal mapping if there exists a union of intervals D  X  time , D =[ t 1 , t 2 ]  X  [ t 3 ,  X  1  X  i &lt; n , t i &lt; t i + 1 such that  X  t  X  D : f ( t  X  .

While this definition excludes the case with instantaneous ap-pearances as in Figure 3(d), it still allows instantaneous jumps within a defined time interval as in Figure 3(c). To exclude this case, it is necessary to define a concept of continuity for movement or evolu-tion within each defined interval (an interval of D ) of the domain. More precisely, we regard only interval continuous spatio-temporal mappings as valid movements or evolutions. Since our spatial ob-jects are defined based on point-set topology [14], each object is a point-set consisting of point elements . To formally define continu-ity, we employ a concept of distance between point elements of spa-tial objects. We define a distance operation  X  : point  X  point to compute the distance between two point elements of spatial ob-jects. Using this operation, we can define the notion of interval continuity for each defined interval of the interval-based spatio-temporal mapping.
 Definition 2 Let f :  X  (  X  ) be an interval-based spatio-temporal mapping and t be an element of the union of its defined intervals D  X  p  X  f ( t )  X  q  X  f ( t +  X  ) : lim  X   X  0  X  ( p , q )= 0. Similarly, f is lower semicontinuous at t if  X  p  X  f ( t )  X  q  X  f ( t  X   X  ) : lim  X   X  We say t hat f is interval continuous if it is upper semicontinuous at every t except when t  X  X  t 2 , t 4 ,..., t n } and lower semicontinuous at every t except when t  X  X  t 1 , t 3 ,..., t n  X  1 } . Figure 3: Examples of valid movements: a single continuous interval (a) and multiple continuous intervals (b). Examples of invalid movements: instantaneous jumps within an interval (c) and instantaneous appearances (d).

Since upper semicontinuity at t requires that f ( t +  X  ) this concept does not apply to the right endpoints of the defined in-tervals. Similarly, lower semicontinuity does not apply to the left endpoints of the defined intervals. Therefore, we consider these facts in the definition of interval continuity above. If we require that the interval-based spatio-temporal mapping be interval contin-uous, we can now exclude instantaneous jumps (Figure 3(c)) since in such cases, the spatio-temporal mapping function is not interval continuous.

With respect to the evolution of spatial objects, we can also use the concept of interval continuity to define continuous evolution . Since we employ the concept of distance between point-set ele-ments to define interval continuity, the continuous evolution of spa-tial objects can be thought of as continuous movements of their point-set elements inward (shrinking) or outward (growing). There-fore, interval continuity also accounts for continuous evolutions. It also excludes cases such as instantaneous shrinking and instanta-neous growing. Examples of valid and invalid evolutions are illus-trated in Figure 4.
Although the concept of interval continuity of movement and evolution is reasonably clear with respect to simple, single-component spatial objects, it is not obvious how this concept can be applied to complex, multi-compone nt spatial objects. The central issue here is to determine how a complex object moves or evolves. In this section, we provide an answer to this question using the con-cept of interval continuity established earlier. We define a concept of complex continuity on an interval-based spatio-temporal map-ping to describe the movement and evolution of complex objects. Figure 4: Examples of valid evolutions: a single continuous in-terval (a) and multiple continuous intervals (b). Examples of invalid evolutions: instantaneous shrinking within an interval (c) and instantaneous appearances (d).
 Definition 3 A spatio-temporal mapping  X  (  X  )= time  X   X  where  X  describes a complex spatial data type is called complex contin-uous if for each component of an object of  X  , its spatio-temporal mapping is interval-based and also interval continuous.

It is important to note that the continuity of a moving complex object requires the continuity of all of its components. Thus, the continuity of a complex point depends on the continuity of each of its single point components. Similarly, the continuity of a complex line relies on the continuity of each of its block components which in turn relies on the continuity of each simple line component of the block. For a complex region, its complex continuity depends on the continuity of each of its faces. As a result, complex continuity allows a complex object to move or evolve based on the movement or evolution of its components. Fi gure 5 illustrates valid and invalid movements for complex points.

Besides continuity, it is also interesting to investigate the inter-actions such as splitting a nd merging of components of a moving complex object. We define the life time of a component of a mov-ing complex object as the smallest time interval that includes all defined intervals of the component, that is the interval [ the life time of a component may be different from the life time of other components. In fact, the life time of the entire complex object is the union of the life time of all of its components. With this concept of life time, we can now define splitting and merging of components of moving compl ex objects. For the case of split-ting (merging), we define a splitting instant ( merging instant )as a time instant which marks the end of the life time of the prede-cessor component (components) and the beginning of the life time of the successor components (component). With this specification, we allow splitting and merging o f components of a complex object Figure 5: Examples of valid complex object movements and evolutions: a single continuous interval (a), multiple continu-ous intervals (b), splitting of a component (c), and merging of components (d). Examples of invalid movements: an instanta-neous jump of a component (e) and instantaneous appearances of a component (f). without violating the complex continuity concept of the movement. Splitting and merging are depicted in Figure 5(c)-(d).
By imposing the complex continuity concept as a requirement for a spatio-temporal mapping  X  (  X  ) , we can now use it to model historical movements of moving objects. By applying  X  (  X  ) plex spatial data types point , line ,and region , we obtain a precise definition of the co rresponding moving data types hpoint , hline ,and hregion for representing historical movements of moving objects.
We use hpoint , hline ,and hregion to describe historical move-ments of moving points, moving lines, and moving regions respec-tively. Due to the complex continuity constraint, these moving data types are more appropriate for representing past movements of moving objects than the existing moving data types mpoint , mline , and mregion shown in Section 2. Thus, we will use our new moving data types defined above as (the string ) part of our Balloon model described in Section 5.
In this section, we present our approach for modeling future movements and evolutions of moving objects. Taking into account the inherent uncertainty of the future, we explore how the future positions and extent of a moving object can be represented in Sec-tion 4.1. We present our data types for future movements of moving objects in Section 4.2.
Unlike movements in the past for which we (assume to) have pre-cise knowledge, future movements involve predictions with regard to the future positions or extent of moving objects. We distinguish two different tasks in this aspect: the task of how to predict the fu-ture movements and the task of how to model the prediction data. The former deals with the development of prediction methods on how future movements are predicted. The latter deals with generic data modeling for future data. In general, prediction methods are domain and application specific. However, what we want here is a general purpose model and tool. Any determination of a prediction model would be highly restrictive and unfavorable due to its lim-ited applicability. In fact, the development of a prediction method is typically a whole discipline by itself, and this task should be-long to the domain experts. For instance, meteorologists should be responsible for developing prediction models and algorithms for weather forecasting while a database management system (DBMS) is responsible for providing storage support and querying capabil-ity for the forcasted data. We strongly believe that it is not the task of a DBMS to predict the future; however, it is imperative that a DBMS provides data modeling and persistence support for storing and querying prediction data. Based on this idea, we are only inter-ested in the data modeling aspect of the future movements of mov-ing objects and how this type of movements can be represented.
To take into account the uncertainty of future movements, we consider modeling the set of potential future positions or extent of a moving object. For example, the position of the eye of a hur-ricane at 12 hours in the future may possibly be anywhere within a predicted region (Figure 6(a)). This region represents the set of potential future positions of the hurricane X  X  eye at 12 hours in the future. Likewise, if we are interested in the future positions for a certain period in the future, say from the present time to 12 hours in the future, then it can be anywhere within a predicted volume (Figure 6(b)). This volume can be thought of as a development of a predicted region over a period of time. Hence, it is a moving region which can be represented by using our moving data type hregion . Similarly, we can also use a line to represent the segments of road potentially containing the future position of a vehicle at 15 minutes in the future (Figure 6(c)). For a period between the present and 15 minutes in the future, we can use a moving line ( hline )torepresent the vehicle X  X  potential movements (Figure 6(d)). If the vehicle al-ways maintains a constant speed, we can also use a point object to represent its potential positions at 15 minutes in the future (Figure 6(e)). Consequently, a moving point ( hpoint ) can be used to rep-resent its potential movements for the 15 minutes period (Figure Figure 6: The set of potential future positions: for a hurricane X  X  eye at 12 hours (a) and within the 12-hour period (b), for a vehicle at 15 minutes (c) and within the 15-minute period (d), for a vehicle with constant speed at 15 minutes (e) and within the 15-minute period (f). 6(f)). Based on the same idea, if we consider an object with extent, for example a line object, its potential movement (extent) can be described by either a moving line or a moving region depending on the environment and the nature of its movement. For a region object, its future movement can be represented by a moving region.
In summary, the set of potential future positions or the extent of a moving object can be modeled using a spatial object for an instant of time or a moving object for a period of time in the future. How-ever, this concept does not specify the relative chance or degree of confidence with which a potential future position will eventually be the position of the moving object. To do this, we require a con-cept of confidence distribution (C) such that each potential future position is associated with a degree of confidence. At a future time instant, we can now model the set of potential positions or the ex-tent of an object by imposing a confidence distribution on a spatial object representing the future positions. We define C in Definition 4below.
 Definition 4 The confidence distribution C (  X  ) of a spatial object of type  X  representing the set of future positions or extent of a moving object is defined as C (  X  )=  X   X  [ 0 , 1 ] such that the degree of confidence of every point in  X  is between 0 and 1.

The above definition allows any type of distribution for C In fact, C (  X  ) can also be a fuzzy set describing the level of mem-bership for each point in  X  . To apply this concept of confidence distribution to a moving object for representing future movements over time, we can use the concept of spatio-temporal mapping to temporally lift C over time to define a moving confidence distribu-tion (MC) as shown in Definition 5.
 Definition 5 The moving confidence distribution MC (  X  ) of a spa-tial object of type  X  representing the set of future positions or extent of a moving object is defined as MC (  X  )= time  X  C (  X  )= (  X   X  [ 0 , 1 ]) .
 Here, we do not restrict how MC (  X  ) develops over time since the confidence distribution information is domain specific, thus it may take any shape or form according to  X  depending on a given pre-diction model. To adequately describe the future movement of a spatial object, we need two objects. The first object is a moving object representing the temporal evolution of a spatial object in the future. The second object is a moving confidence distribution ex-pressing the uncertainty of the movement.

To illustrate the concepts presented, consider the example of a hurricane. We can model the set of potential positions of the eye of this hurricane using an hregion object (Figure 6(b)). By applying a moving confidence distribution on the hregion object, we obtain a new kind of object which represents the set of potential future positions, each with a degree of confidence, of the hurricane X  X  eye (Figure 7). This means that the future movement trajectory of the hurricane X  X  eye is predicted to be a part of this object. We define the data types for this kind of object in the next section.
Provided that a combination of a moving object and a moving confidence distribution can be used to represent the set of potential future movements of a moving object, we can use this concept to define our future movement data types. Thus, a future movement data type can be constructed using the type constructor  X  below.
 Definition 6 Let  X  be a spatial data type and MC (  X  ) be a moving confidence distribution on  X  . The future movement data type is defined as  X  (  X  )=  X  (  X  )  X  MC (  X  ) such that for each f  X  (  X  ) , m is defined whenever p is defined.

Applying this definition to the spatial data types point , line ,and region , we obtain three future movement data types future point ( fpoint ), future line ( fline ), and future region ( fregion ): Figure 7: Representing the future movement of a hurricane X  X  eye using a moving region with a moving confidence distribu-tion. The gradient indicates varied degree of confidence.
Since each future data type is defined partially using our mov-ing data type  X  (  X  ) , its validity also depends on the validity of the moving object represented by  X  (  X  ) . Examples of valid and invalid future movements are depicted in Figure 8.
 Figure 8: Examples of valid future movements: an fpoint object (a) and an fregion object (b). Examples of invalid future move-ments: a discontinuous fregion object (c) and a dimensional collapsed fregion object (d).

It is important to understand that these future data types are de-fined only for future movements of moving objects. They do not make any reference or assumption on the historical moving data types of the moving objects. For example, an object of type fregion can be used to represent the future movement of either a moving point, a moving line, or a moving region. To model the nature of movement of a moving object properly, we require both the past model and the future model. We will see in the next section that not all combinations of the past and future data types represent valid movements.
In this section, we present our Balloon model which is the inte-gration of our historical and future movement models. Generally speaking, to build a balloon, we first need to prepare the string and the body of the balloon. We do this for our historical model and future model in Section 5.1 and 5.2 respectively. Once all the parts are ready, they can then be connected to form a balloon. We per-form this step by integrating both of our past and future models to construct the Balloon model and define the data types in Section 5.3. Due to space limitations, we can only provide the signature of a subset of the operations that are available as part of this model in Section 5.4.
In Section 3, we have defined our model for historical move-ments resulting in a type constructor  X  (  X  ) : time  X   X  such that the spatio-temporal mapping is complex continuous. Since we use this type constructor to construct data types for historical movements, all time intervals specified as the domain of these data types must be intervals in the past. The latest known state of a moving ob-ject is assumed to be the present state of the object. This means that the present state of the object changes for every update of the object X  X  position. Each update can either signify a continual move-ment of the last interval of knowledge or a period of no knowledge followed by a new period of knowledge. In any case, the present state of the object is always defined as the state of the object at the ending instant of the last interval of knowledge. We denote the present state of an object by t p . It is possible that t than the absolute present (the current clock time), denoted by t This situation can happen when we do not have information about the state of the object at the absolute present (Figure 9). On the other hand, it is impossible for t p to be younger than the absolute present. This would mean that the object has already moved in the future which is impossible. Hence, it is required that t for all moving objects. We now define a temporal domain time for the historical movement of a moving object as a half-infinite time domain that starts from  X   X  and ends at t p inclusively. Thus, time h =(  X   X  , t p ] . We choose to end time h at t p instead of t cause if t p &lt; t a , we may want to predict the movement between t and t a which is outside of time h . Otherwise, this prediction would beapartof time h which contradicts our definition above. The tem-poral domain time h is applied to all data types representing the past movement of a moving object. It will also be used in Section 5.3 as part of a temporal composition to compose the entire temporal domain of a balloon object. Figure 9 illustrates an example of a historical temporal domain time h for a moving object. Figure 9: An example of a historical temporal domain time that starts from  X   X  and ends at t p inclusively.
For future movements of moving objects, we have defined a type constructor  X  (  X  ) :  X  (  X  )  X  MC (  X  ) which accepts as a parameter a spatial type representing the set of future positions or the extent of a moving object. Here, we would like to restrict the temporal domain of the future data types produced by  X  such that these data types describe only the future movements of moving objects. Figure 10: An example of a future temporal domain time f that starts exclusively from t p and extends indefinitely towards
We define a temporal domain time f for future movements of a moving object as a half-infinite open interval of time which starts exclusively from t p and extends indefinitely towards +  X  time f =( t p , +  X  ) . We choose to begin time f from t would allow a prediction to be made as close to the latest known state of the object as desired irrespective to the value of the absolute present. This temporal domain is applicable to all objects of both  X  (  X  ) and MC (  X  ) . Figure 10 depicts an example of time moving object.
Having defined time h and time f to restrict the temporal domains of historical and future movements of a moving object, we are now ready to define our Balloon model. We integrate the past ( future (  X  ) type constructors to form a new type constructor balloon objects which is defined on the entire time domain. This time domain is a result of a temporal composition of time time f . Since the spatial type as the argument of  X  refers to a dif-ferent spatial object than that of the spatial type as the argument of  X  , we denote the former by  X  and the latter by  X  . Thus, the type constructor  X  (  X  ,  X  ) is equal to  X  (  X  )  X   X  (  X  ) balloon object b =( h , f ) , h  X   X  (  X  ) represents the past movement of a spatial object of type  X  and f  X   X  (  X  ) represents the future movement of b given that the set of its potential future positions at a future time instant is described by a spatial object of type indicated earlier, not all combinations of  X  and  X  constitute valid movements. For example, it is not possible to use fpoint to repre-sent the future extent of a moving region. If this were to be possi-ble, this means that, at a future time instant, the region object would have evolved into a point object. This is not possible since our def-inition of complex continuity does not allow movements involving dimensional collapse. Therefore, the combination for which the region type and  X  is the point type has been proved to be an invalid combination. The general idea here is that the set of poten-tial future positions or extent of a moving object at a future time instant must be a spatial object of dimension greater than or equal to the dimension of the object being moved. This means that an object can move or evolve such that at a future time instant, it fits in or equal to its prediction without collapsing its dimension. Let dim be a function that returns the dimension of a spatial type. It is required that dim (  X  )  X  dim (  X  ) holds for all valid combinations of  X  and  X  . We now define our type constructor  X  for balloon data types in Definition 7.
 Definition 7 The type constructor  X  (  X  ,  X  ) for a balloon data type describing a balloon object whose past movement and future pre-diction are based on the spatial type  X  and  X  respectively, is defined as
 X  (  X  ,  X  )=  X  (  X  )  X   X  (  X  ) such that all of the following conditions hold: (i) dim (  X  )  X  dim (  X  ) ; (ii)  X  (  X  ) represents the past movement and is defined on time h ; (iii)  X  (  X  ) represents the future movement and is defined on time f .
 In orther words,  X  (  X  ,  X  ) is a total function defined on the complete time domain such that it evaluates  X  (  X  ) for an instant t in time  X  (  X  ) for t in time f . By specifying  X  and  X  , we obtain six data types for balloon objects: Each of these balloon data types consists of a data type for past movements (the strings) and a data type for future movements (the bodies). Here, we use our data types defined in earlier sections for this purpose. Now we can use these balloon data types to model balloon objects. A balloon object has the advantage of being able to capture both the past movement and the future movement of a moving object while maintaining the consistency of the object at all time. Examples of a balloon_pp ,a balloon_pl ,anda balloon_pr object are shown in Figure 8(a), 6(d), and 8(b) respectively.
Since all balloon objects are defined on the complete time do-main as opposed to only the past or the future, many new operations are now available in addition to all existing operations on moving objects. In the followings, we list some of these new operations introduced by the Balloon model. Let  X  be a spatial data type. The operation construct builds a balloon object given three parts: the past movement, the future movement, and the corresponding moving confidence distribution. A balloon object can be updated by expanding it by a new interval of movement and optionally the corresponding new prediction. If the new interval of movement starts at the present state of the object, this interval signifies a con-tinual movement from the last interval of the object. Otherwise, an interval of unknown movement occurs preceeding the new interval of knowledge. When a balloon object is updated, the present state is updated and checked against the existing prediction. If the present state is younger than the start of the prediction, this prediction is no longer applied. Thus the update operation always maintains the temporal consistency of the balloon object. The past and future operations retrieve the past and future movements respectively. To retrieve an object whose life time starts at a specified instant in the past and ends at a specified instant in the future, the tempo-ral_selection operation can be used. The present time of an object is given by the present operation. The life time of a balloon object is defined starting from the beginning of its past movement to the end of its prediction and is given by the operation balloon_life .The past_period and future_period operations return the duration of the past movement and future prediction respectively. Similarly, the known_period and unknown_period operations determine the sum of all intervals of knowledge and the sum of all intervals of lack of knowledge within the balloon life time respectively.

In regard to the position or shape of an object, the state of a bal-loon object at any time instant in the past is given by the state_at operation. For the future, the prediction_at operation retrieves a spatial object representing the set of potential positions or extent of a balloon object at the specified time instant in the future. With an additional point parameter, the confidence_at operation can deter-mine the degree of confidence for this point at a time instant in the future. This operation first determines the confidence distribution at the specified time instant and then applies the coordinates of the point to the distribution to obtain the result. The past_projection and future_projection operations provide a spatial projection of the past movement and the future prediction respectively. A spatial projection of a moving object describes only the movement in space and ignore the movement in time. Hence, the result of a spatial pro-jection operation is a spatial object.

One of the main benefits for using the Balloon model is that we can have operations that operate on the entire time domain of a moving object. Since the Balloon model maintains the consistency of the object, each operation can be easily implemented using bal-loon objects as arguments without having to concern about consis-tency issues.
For the purpose of using balloon objects in queries, the presented balloon data types can be embedded into any extensible DBMS data model as attribute data types. The operations can be registered in the DBMS such that they are available for use in queries. For example, we can integrate these data types into the relational model and construct relations for hurricanes and cities. We model the movement of a hurricane X  X  eye by a balloon_pr object. For the extent of the hurricane force wind, we model its movement using a balloon_rr object. For cities, we represent their position by a point object. Hence, we have the following relations: hurricanes(name:string, eye:balloon_pr, cities(name:string, position:point) Figure 11: The movement of the eye of hurricane Katrina.

Assuming that these relations have been previously populated with all necessary data. For the purpose of our example, assume also that hurricane Katrina is currently making its way across the Gulf of Mexico (Figure 11). Before we get into some complex queries, it may be interesting to determine how much information we currently have on Katrina. We can post a query to retrieve the life span of Katrina X  X  eye  X  X ive me the life span including the cur-rent prediction of the eye of hurricane Katrina X : SELECT balloon_life(eye) FROM hurricanes WHERE name="Katrina" We can also determine the ratio between the prediction period and the life time of the eye X  X  past movement. This information may be important to evaluate the maturity of the prediction. We use the operations future_period and past_period for this purpose. SELECT future_period(eye) / past_period(eye) FROM hurricanes WHERE name="Katrina" In a similar way, the ratio between all periods of no knowledge and all periods of knowledge can be determined by using the un-known_period and known_period operations. This ratio can help indicate the level of knowledge we have about the movement. Other interesting queries involve the state of the hurricane or its predic-tions. For instance, we can ask  X  X hat area will potentially be af-fected by the eye of hurricane Katrina at 12 hours from now? X  SELECT prediction_at(eye,now()+12h) FROM hurricanes WHERE name="Katrina" Following the same trend, the total area that may be affected by the hurricane force wind at any time in the future can be determined by using the future_projection operation on the extent attribute of the hurricane. Beyond these queries, we can also ask questions relating to degree of confidence such as  X  X hat is the chance that Katrina X  X  eye will be on the city of New Orleans 24 hours from now? X  SELECT confidence_at(eye,position,now()+24h) FROM hurricanes, cities
WHERE hurricanes.name="Katrina" AND With the use of spatial predicates on : point  X  line and in : point region which determine whether a point is on a line and whether a point is in a region respectively, we can list all hurricanes that either hit New Orleans in the past or may hit it in the future.
 SELECT hurricanes.name FROM hurricanes, cities
WHERE cities.name="New Orleans" AND These queries illustrate the use of our operations with the move-ment of a balloon object. Other than these operations, we can also use spatio-temporal predicates between balloon objects, which are to be defined in the future. A number of approaches have been proposed for specifying and using spatio-temporal predicates in queries. One solution is to use the spatio-temporal query language (STQL) [3] to support textual specifications of spatio-temporal pred-icates. STQL allows us to textually formulate spatio-temporal queries that involve the use of spatio-temporal predicates. To illustrate how spatio-temporal predicates between balloon objects can be used, consider the scenario of airplanes and ships which can be modeled as balloon_pp objects due to their well defined routes. We can cre-ate the corresponding relations for these balloon objects as follows: airplanes(flightNo:string, flight:balloon_pp) ships(shipID:string, route:balloon_pp) We may want to divert all airplanes whose flight will potentially cross the projected extent of hurricane Katrina. This query requires the use of a spatio-temporal predicate potentially_cross between balloon objects. For the purpose of this example, we assume that this predicate exists between balloon objects of type balloon_pp and balloon_rr . Hence, we can pose the following query: SELECT flightNo FROM airplanes, hurricanes
WHERE hurricanes.name="Katrina" AND Unlike airplanes, ships may have a higher tolerance against storms. Thus, we may only want to identify all ships that have a high prob-ability of being affected by the eye of the hurricane, so that ap-propriate actions can be taken to help or warn these ships. This requires a spatio-temporal predicate with a specific probability of occurrence, e.g., most_likely_cross , which can be predefined with a specific level on confidence.
 SELECT shipID FROM ships, hurricanes
WHERE hurricanes.name="Katrina" AND Another approach for using spatio-temporal predicates between bal-loon objects in queries is to employ the visual query language [5, 4]. This visual language allows a convenient and intuitive graphical specification of spatio-temporal predicates as well as supports the formulation of spatio-temporal queries with these predicates.
To properly model the past and future movements of moving objects, it is required that we have a clear understanding of how objects move or evolve. Further, modeling the future movements of moving objects requires that we take into account the inherent uncertainty aspect of the future. Modeling both the past and the future movements of moving objects requires that we additionally maintain the consistency of the movements. The Balloon model presented in this paper ensures this. Our contributions include the design of precise and flexible historical and future movement mod-els for moving objects as well as the Balloon model which sup-ports both types of movement while ensuring their consistency. As a result, we present new sets of spatio-temporal data types for all types of movements. With these data types, a new set of operations becomes available. In the future, we plan to investigate spatio-temporal operations and predicates between balloon objects. We also plan to implement the Balloon model as part of our Spatio-Temporal Algebra (STAL) software package. [1] M. Erwig, R.H. G X ting, M. Schneider, and M. Vazirgiannis. [2] M. Erwig, R.H. G X ting, M. Schneider, and M. Vazirgiannis. [3] M. Erwig and M. Schneider. Developments in [4] M. Erwig and M. Schneider. Visual Specifications of [5] Martin Erwig, Martin Erwig, and Markus Schneider.
 [6] L. Forlizzi, R.H. G X ting, E. Nardelli, and M. Schneider. A [7] K. Hinrichs G. Trajcevski, O. Wolfson and S. Chamberlain. [8] R.H. G X ting, M.H. B X hlen, M. Erwig, C.S. Jensen, N.A. [9] R.H. G X ting and M. Schneider. Moving Objects Databases . [10] Y. Guo S. Grumbach J. Chen, X. Meng and H. Sun.
 [11] H. Mokhtar and J. Su. Universal Trajectory Queries for [12] N. Pelekis, B. Theodoulidis, I. Kopanakis, and [13] R. Praing and M. Schneider. A Universal Abstract Model for [14] M. Schneider and T. Behr. Topological Relationships [15] A.P. Sistla, O. Wolfson, S. Chamberlain, and S. Dao. [16] E. Tossebro and R.H. G X ting. Creating Representations for
