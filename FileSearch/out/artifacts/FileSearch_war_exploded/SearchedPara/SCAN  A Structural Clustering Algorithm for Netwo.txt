 Network clustering (or graph partitioning) is an important task for the discovery of underlying structures in networks. Many algorithms find clusters by maximizing the number of intra-cluster edges. While such algorithms find useful and interesting vertices that play special roles  X  vertices that bridge clusters (hubs) and vertices that are marg inally connected to clusters (outliers). Identifying hubs is usef ul for applications such as viral marketing and epidemiology si nce hubs are responsible for we proposed a novel algorithm called SCAN (Structural Clustering Algorithm for Networks ), which detects clusters, hubs similarity measure. The algorithm is fast and efficient, visiting each vertex only once. An empirical evaluation of the method using both synthetic and real da tasets demonstrates superior performance over other methods such as the modularity-based algorithms. I.5.3 [ PATTERN RECOGNITION ]: Clustering  X  Algorithms, Similarity measures. Algorithms, Performance Network clustering, Graph part itioning, Community Structure, Hubs, Outliers Much data of current interest to the scientific community can be modeled as networks (or graphs). A network is sets of vertices, representing objects, connected t ogether by edges, representing the relationship between objects. For example, a social network can be viewed as a graph where individuals are represented by vertices; and the friendship between individuals are edges [1]. Similarly, the world-wide web ca n be modeled as a graph, where web pages are represented as vertices that are connected by an edge when one pages contains a hyperlink to another [2] [3]. Network clustering (or graph partitioning) is a fundamental approach for detecting hidden structures in networks that, because of many interesting applications, is drawing increased attention in computer science [4][5], physics [11], and bioinformatics [6]. Various methods have been deve loped. These methods tend to cluster networks such that there are a dense set of edges within every cluster and few edges betw een clusters. Modularity-based algorithms [6][11][12] and normalized cut [4][5] are successful examples. However, they do not distinguish the roles of the vertices in the networks. Some vertices are members of clusters; some vertices are hubs that bridge many clusters but don X  X  belong to any, and some vertices are outliers that have only a weak association with a particular cluster. The situation is illustrated in Figure 1. Figure 1. A Network with 2 Cl usters, a Hub and an Outlier. The existing methods such as m odularity-based algorithm [12] will partition this example into two clusters: one consisting of vertices 0 to 6 and the other consisting of vertices 7 to 13. They do not isolate vertex 6, a hub whos e membership in either cluster is disputable, or vertex 13, whic h has only a single connection to the network. The identification and isolation of hubs is essential for many applications. As an example, th e identification of hubs in the WWW improves the search for rele vant authoritative web pages marketing [8] and epidemiology [9]. In this paper, we propose a new method for network clustering called SCAN (Structural Clusteri ng Algorithm for Networks). The networks. To achieve this goal, we use the neighborhood of the vertices as clustering criteria instead of only their direct connections. Vertices are grouped into the clusters by how they share neighbors. Doing so makes sense when you consider the detection of communities in large social networks. Two people who share many friends should be clustered in the same community. Refer again to the example in figure 1. Consider vertices 0 and 5, which are connected by an edge. Their neighborhoods are the vertex sets {0, 1, 4, 5, 6} and {0, 1, 2, 3, 4, 5}, respectively. They share many neighbors and thus are reasonably grouped together in the same cluster. In contrast, consider the neighborhoods of vertex 13 and vertex 9. These two vertices ar e connected, but share only two common neighbors, i. e. {9, 13}. Therefore, it is doubtful that they should be grouped into the same cluster. The but they are sparsely interconnected. Our method, SCAN, identifies two cl usters, {0, 1, 2, 3, 4, 5} and {7, 8, 9, 10, 11, 12}, and isolates vertex 13 as an outlier and vertex 6 as a hub. SCAN has the following features: The paper is organized as follows. We review the related work for network clustering algorithms in section 2. We formulize the notion of structure-conne cted clusters in sec tion 3. We describe the algorithm SCAN in section 4. We give a computation complexity analysis of SCAN in section 5. We compare SCAN to the fast modularity-based network clustering algorithm in section 6. Finally, we present our conclusions and suggest future work in section 7. Network clustering (or graph par titioning) is the division of a graph into a set of sub-graphs, ca lled clusters. More specifically, given a graph G = { V , E }, where V is a set of vertices and E is a divide G into k disjoint sub-graphs G i = { V i , E =  X  for any i  X  j , and  X  may or may not be known a priori. In this paper, we focus on simple, undirected, and un-weighted graphs. The problem of finding good clustering of networks has been studied for some decades in many fields, particularly computer science and physics. Here we review some of the more common methods. The min-max cut method [4] seeks to partition a graph G={ V , E } into two clusters A and B . The principle of min-max clustering is minimizing the number of connections between A and B and maximizing the number of connections within each. A cut is defined the number of edges that would have to be removed to isolate the vertices in cluster A from those in cluster B . The min-max cut algorithm searches for the clustering that creates two clusters whose cut is minimized and while maximizing the number of remaining edges. A pitfall of this method is that, if one cuts out a single vertex from the graph, one will probably achieve the optimum. Therefore, in practice, the optimization must be accompanied with some example, in social networks some communities are much larger than the others. To amend the issue, a normalized cut was proposed [5], which normalizes the cut by the total nu mber connections between each or some small part of the graph will no longer always yield an optimum. Both min-max cut and normalized cut methods partition a graph adopt a top-down approach, splitting the graph into two clusters, and then further splitting these clusters, and so on, until k clusters have been detected. There is no guarantee of the optimality of recursive clustering. There is no measure of the number of clusters that should be produced when k is unknown. There is no indicator to stop the bisection procedure. Recently, modularity was proposed as a quality measure of network clustering [11]. For a clustering of graph with k clusters, the modularity is defined as: between vertices within cluster s , and d s is the sum of the degrees graph is the fraction of all edges th at lie within each cluster minus the fraction that would lie within each cluster if the graph X  X  vertices were randomly connected . Optimal clustering is achieved when the modularity is maximi zed. Modularity is defined such that it is 0 for two extreme cases: wh en all vertices partitioned into a single cluster, and when the ve rtices are clustered at random. Note that the modularity measur es the quality of any network clustering. Normalized and min-max cut measures only the quality of a clustering of two clusters. Finding the maximum Q is NP-complete. Instead of performing an exhaustive search, various optimization approaches are proposed. For example, a greedy method based on a hierarchical agglomeration clustering algorithm is proposed in [12], which is faster than many competing algorithms: its running time on a depth of the dendrogram descri bing the hierarchical cluster structure. Also, Guimera and Amaral [6] optim ize modularity using simulated annealing. To summarize, the network cluste ring methods discussed in this section aim to find clusters such that there are many connections between vertices within the same clusters and few without. While all these network clustering met hods successfully find clusters, they are generally unable to dete ct hubs and outliers like those in the example in Figure 1. Such vertices invariably are included in one cluster or another. Our goal is both to cluster networ ks optimally and to identify and isolate hubs and outliers. Therefore, both connectivity and local structure is used in our definiti on of optimal clustering. In this section, we formulize the notion of a structure-connected cluster, which extends that of a density-based cluster [10] and can distinguish good clusters, hubs, and outliers in networks. In section 4, we present, SCAN, an efficient algorithm to find the optimal clustering of networks. The existing network clustering met hods reviewed in section 2 are designed to find optimal cluste ring of networks based on the number of edges between vertices or between clusters. Direct connections are important, but they represent only one aspect of the network structure. We think the neighborhood around two connected vertices is also important. The neighborhood of a vertex includes all the vertices connected to it by an edge. When you consider a pair of connected vertices, their combined neighborhood reveals neighbors common to both vertices. Our method is based on common neighbors. Two vertices are assigned to a cluster according to how they share neighbors. This makes sense when you consider social communities. People who share many friends create a community, and the more friends they have in common, the more intimate the community. But in social networks there are different kinds of actors. There are also people who are outsiders (like hermits), and there are people who are friendly with many communities but belong to none (like politicians). The latter play a special role in small-world networks as hubs [13]. Such a hub is illustrated by vertex 6 in Figure 1. In this paper, we focus on si mple, undirected and un-weighted graph. Let G = { V , E } be a graph, where V is a set of vertices; and E is set of pairs (unordered) of di stinct vert ices, called edges. The structure of a vertex can be described by its neighborhood. A formal definition of vertex structure is given as follows. DEFINITION 1 (VERTEX STRUCTURE) Let v  X  V , the structure of v is defined by its neighborhood, denoted by  X  ( v )  X  ( v ) = { w  X  V | ( v , w )  X  E }  X  { v } In Figure 1 vertex 6 is a hub sharing neighbors with two clusters. If we only use the number of shared neighbors, vertex 6 will be merge. Therefore, we normalize the number of common neighbors by the geometric mean of the two neighborhoods X  size. DEFINITION 2 (STRUCTURAL SIMILARITY) When a member of a cluster shares a similar structure with one of its neighbors, their computed struct ural similarity will be large. We apply a threshold  X  to the computed structural similarity when assigning cluster membership, formulized in the following neighborhood definition. DEFINITION 3 (  X  -NEIGHBORHOOD) When a vertex shares structural similarity with enough neighbors, it becomes a nucleus or seed for a cluster. Such a vertex is called a core vertex. Core vertices are a special class of vertices that have exceeds the threshold  X  . From core vertices we grow the clusters. In this way the parameters  X  and  X  determine the clustering of determined by  X  . DEFINITION 4 (CORE) Let  X   X   X  and  X   X   X  . A vertex v  X  V is called a core w.r.t.  X  , if its  X  -neighborhood contains at least  X  vertices, formally:  X  -neighborhood of a core, it should be also in the same cluster. They share a similar structure and are connected. This idea is formulized in the following definition of direct structure reachability. DEFINITION 5 (DIRECT STRUCTURE REACHABILITY) Direct structure reachablility is symmetric for any pair of cores. However, it is asymmetric if one of the vertices is not a core. The following definition is a canonical extension of direct structure reachability. DEFINITION 6 (STRUCTURE REACHABILITY) Let  X   X   X  and  X   X   X  . A vertex w  X  V is structure reachable from v  X  V w.r.t  X  and  X  , if there is a chain of vertices v formally: only symmetric for a pair of cores. More specifically, the structure-reachability is a trans itive closure of direct structure-reachablility. Two non-core vertices in the same cluster may not be structure-reachable because the core condition may not hold for them. But they still belong to the same cluster because they both are structure reachable from the same core. This idea is formulized in the following definition of structure connectivity. DEFINITION 7 (STRUCTURE CONNECTIVITY) Let  X   X   X  and  X   X   X  . A vertex v  X  V is structure-connected to a both v and w are structure reachable from u , formally: The structure connectivity is a symmetric relation. For the structure reachable vertices, it is also reflective. Now we are ready to define a cluster as structure-connected vertices, which is maximal w.r.t. structure reachability. DEFINITION 8 (STRUCTURE-CONNECTED CLUSTER) Let  X   X   X  and  X   X   X  . A non-empty subset C  X  V is called a structure-connected and C is maximal w.r.t stru cture reachability, formally: (1) Connectivity: (2) Maximality: Now we can define a clustering of a network G w.r.t. the given parameters  X  and  X  as all structure-connected clusters in G . DEFINITION 9 (CLUSTERING) and  X  in G , formally: A vertex is either a member of a structure-connected cluster, or it is isolated, i.e. it does not belong to any of the structure-connected cluster. If a vertex is not a member of any structure-connected neighborhood. DEFINITION 10 (HUB) Let  X   X   X  and  X   X   X  . For a given clustering P , i.e. CLUSTERING  X  ,  X  ( P ), if an isolated vertex v  X  V has neighbors belonging to two or more different clusters w.r.t. hub (it bridges different clusters) w.r.t.  X  and  X  , formally, (2) v bridges different clusters: DEFINITION 11 (OUTLIER) Let  X   X   X  and  X   X   X  . For a given clustering P , i.e. only if all its neighbors either be long to only one cluster or do not belong to any cluster, formally, OUTLIER  X  ,  X  ( v )  X  (2) v does not bridge different clusters: may be more useful to regard hubs as a special kind of outlier, since both are isolated vertices. The more clusters in which an outlier has neighbors, the more strongly that vertex acts as a hub between those clusters. This point will be discussed further when we consider actual networks. The following lemmas are important for validating the correctness of our proposed algorithm. Intuitively, the lemmas mean the following. Given a graph G =&lt; V , E &gt; and two parameters we can find structure-connected cl usters in a two-step approach. First, choose an arbitrary vertex from V satisfying the core condition as a seed. Second, retrie ve all the vertices that are structure reachable from the seed to obtain the cluster grown from the seed. LEMMA 1. Let v  X  V . If v is a core, then the set of vertices, which are structure reachable from v is a structure connected cluster, formally: PROOF: (1) C  X  0: By assumption, CORE  X  ,  X  ( v ) and thus, REACH  X  ,  X  ( v , v )  X  v  X  C . (2) Maximality: Let p  X  C and q  X  V and REACH  X  ,  X  ( p , q ).  X  REACH  X  ,  X  ( v , p )  X  REACH  X  ,  X  ( p , q )  X  REACH  X  ,  X  ( v , q ), since structure reachability is transitive.  X  q  X  C. (3) Connectivity:  X  p , q  X  C : REACH  X  ,  X  ( v , p )  X  REACH  X  ,  X  ( v , q )  X  CONNECT  X  ,  X  ( p , q ), via v . Furthermore, a structure-connected cluster C with respect to is uniquely determined by any of its cores, i.e., each vertex in C is structure reachable from any of the cores of C and, therefore, a structure-connected cluster C contains exactly the vertices which are structure reachable from an arbitrary core of C . LEMMA 2. Let C  X  V be a structure-connected cluster. Let p  X  C be a core. Then, C equals the set of vertices, which are structure reachable from p , formally:  X  C = { v  X  V | REACH  X  ,  X  ( p , v )} PROOF: Let  X  = { v  X  V | REACH  X  ,  X  ( p , v )}. We have to show that C =  X  : (1)  X   X  C : it is obvious from the definition of  X  . (2) C  X   X  : Let q  X  C . By assumption, p  X  C  X  In this section, we describe the algorithm SCAN which mentioned in section 3.1, the sear ch begins by first visiting each vertex once to find structure-connected clusters, and then visiting the isolated vertices to identify them as either a hub or an outlier. The pseudo code of the algorithm SCAN is presented in Figure 2. SCAN performs one pass of a network and finds all structure-connected clusters for a given pa rameter setting. At the beginning all vertices are labeled as unclassified. The SCAN algorithm classifies each vertex either a member of a cluster or a non-member. For each vertex that is not yet classified, SCAN checks whether this vertex is a core (STEP 1 in Figure 2). If the vertex is a core, a new cluster is expanded from this vertex (STEP 2.1 in Figure 2). Otherwise, the vertex is labeled as a non-member (STEP 2.2 in Figure 2). To find a new cluster, SCAN starts with reachable from v in STEP 2.1. This is sufficient to find the complete cluster containing vertex v , due to lemma 2. In STEP 2.1, a new cluster ID is generate d which will be assigned to all vertices found in STEP 2.1. SCAN be gins by inserti ng all vertices in  X  -neighborhood of vertex v into a queue. For each vertex in the queue it computes all directly reachable vertices and inserts those repeated until the queue is empty. The non-member vertices can be further classified as hubs or outliers in STEP 3. If an isolated vertex has edges to two or more clusters, it is may be cla ssified as a hub. Otherwise, it is an outlier. This final classification is done according to what is appropriate for the network. As mentioned earl ier, the more clusters in which an outlier has neighbors, the more strongly that vertex acts as a hub between those clusters. Likewise, a vertex might bridge only two clusters, but how strongly it is viewed as a hub may depend on how aggressively it bridges them. As discussed in Section 3, the results of SCAN do not depend on the order of processed vertices, i.e. the obtained clustering of network (number of clusters and a ssociation of cores to clusters) is determinate. In this section, we present an analysis of the computation complexity of the algorithm SCAN. Given a graph with m edges and n vertices, SCAN first finds all structure-connected clusters w.r.t. a given parameter setting by checking each vertex of the graph (STEP 1 in Figure 2). This entails retrieval of all the vertex X  X  neighbors. Using an adjacen cy list, a data structure where each vertex has a list of which vertices it is adjacent to, the cost of a neighborhood query is proportional to the number of neighbors, that is, the degree of the query vertex. Therefore, the total cost is O (deg( v 1 )+deg( v 2 )+...deg( v n )), where deg( v i count each edge exactly twice: once from each end. Thus the running time is O ( m ). We also derive the running time in terms of the number of vertices, should the number of e dges be unknown. In the worst case, each vertex connects to all the other vertices for a complete graph. The worst case total cost , in terms of the number of vertices, is O ( n ( n -1)), or O ( n 2 ). However, real networks generally have sparser degree distributions. In the following we derive the complexity for an average case, for which we know the probability distribution of the degrees. One type of network is the random graph, studied by Erd X s and R X nyi [20]. Random graphs are generated by placing edge s randomly between vertices. Random graphs have been employed extensively as m odels of real world networks of various types, particularly in epidemiology. The degree of a random graph has a Poisson distribution: which indicates that most nodes have approximately the same of random graphs the complexity of SCAN is O ( n ). Many real networks, such as soci al networks, biological networks and the WWW follow a power-law degree distribution. The probability that a node has k edges, P ( k ), is on the order k  X  is the degree exponent. A value between 2 and 3 was observed for the degree exponent for most biological and non-biological networks studied by the Faloutsos brothers [21] and Barab X si and Oltvai [22]. The expected value of degree is E ( k )=  X  /( case the average cost of SCAN is again O ( n ). Therefore, the complexity in terms of the number of edges in the graph for SCAN algorithm is in general linear. The complexity in terms of the number of vertices is quadratic in the worst case of a complete graph. For real networks like social networks, biological networks and computer networks, SCAN expects linear complexity with respect to the number of vertices. This is confirmed by our empirical study described in the next section. In this section we evaluate the algorithm SCAN using both synthetic and real datasets . The performance of SCAN is compared with FastModularity, a fast modularity-based network clustering algorithm proposed by Clauset et al in [12], which is faster than many competing algorithms: its running time on a depth of the dendrogram descri bing the hierarchical cluster structure. We implemented SCAN in C++. We used the original source code of FastModularity by Clauset et al [17]. All the experiments were conducted on a PC with a 2.0 GHz Pentium 4 processor and 1 GB of RAM. To evaluate the computationa l efficiency of the proposed algorithm we generate ten graphs with the number of vertices ranging from 1,000 to 1,000,000 and the number of edges ranging from 2,182 to 2,000,190. We adapte d the construction as used in [11] as follows: first we generate clusters such that each vertex connects to vertices within the same cluster with a probability P and connects to vertices outside its cluster with a probability P &lt; P i . Next we add a number of hubs and outliers. An example of a generated graph is presented in Figure 3. The running time for FastModularity and SCAN on the synthetic graphs are plotted in Figure 4 and 5, respectively. Running time is plotted in both as a function of the number of nodes and the number of edges. Figure 5 shows that SCAN X  X  performance is in fact linear w.r.t. to the number of vertices and the number of edges, while FastModularity X  X  pe rformance is basi cally quadratic and scales poorly for large graphs. Note the difference in scale for the y-axis between the two figures. To evaluate the effectiveness of network clustering, we use real datasets whose clusters are known a priori. These real datasets include American College Football and Books about US politics. We also apply the clustering algorithm to customer segmentation. We use adjusted Rand index (ARI) [15] as a measure of effectiveness of network cluste ring algorithms in addition to visually comparing the genera ted clusters to the actual. A measure of agreement is needed when comparing the results of a network clustering algorithm to the expected clustering. Rand Index [14] serves this purpose. One problem with the Rand Index is that the expected value when comparing two random clustering is not constant. An Adjusted Rand Index was proposed by Hubert and Arabie [15] to fix this problem. The Adjusted Rand Index (ARI) is defined as follows: where n i,j is the number of ver tices in both cluster x and n  X  ,j is the number of vertices in cluster x i and y Milligan and Cooper [16] evaluated many different indices for measuring agreement between two network clustering with different numbers of clusters and recommend the Adjusted Rand Index as the measure of choice. We adopt the Adjusted Rand Index as our measure of ag reement betwee n the network clustering result and the true clustering of the network. The first real dataset we ex amine is the 2006 NCAA Football Bowl Subdivision (formerly Divisi on 1-A) football schedule. This example is inspired by the set studied by Newman and Girvan [11], who consider contes ts between Div. 1-A teams in 2000. Our set is more complex, considering all contests of the Bowl Subdivision schools includi ng those against schools in lower divisions. The challenge is to discover the underlying structure of this network  X  the college conference system. The National Collegiate Athletic Association (NCAA) di vides 115 schools into eleven conferences. In addition there are four independent schools at this top level: Army, Navy, Temple , and Notre Dame. Each Bowl Subdivision school plays agains t schools within their own conference, against schools in other conferences, and against lower division schools. The netw ork contains 180 vertices (119 Bowl Subdivision schools and 61 lower division schools) interconnected by 787 edges. Fi gure 6 shows this network with schools in the same conference identified by color. Figure 6. NCAA Football Bowl Subdivision schedule as a network, showing the 12 conferences in color, independent This example illustrates kinds of structures that our method seeks to address. Schools in the same conference are clusters. The four independent schools play teams in many conferences but belong to none; they are hubs. The lower division schools are only weakly connected to the clusters in the network; they are outliers. First we cluster this networ k by using the FastModularity algorithm. The results, for wh ich the modularity is 0.599 is shown in Figure 7. Maximizing Newman X  X  modularity gives a satisfying network clustering, id entifying nine clusters. All schools in the same conference are clustered together. However, two of the conferences are merged (the Western Athletic and Mountain West conferences and the Mid-American and Big Ten conferences), the four independent schools are classified into various conferences despite their hub-like properties. All lower division teams are assigned to clusters. Next we cluster the network using our SCAN algorithm, using the all the features of the graph. Eleven clusters are identified, corresponding exactly to the eleven conferences. All schools in the same conference are clustered together. The independent schools and the lower division sc hools are unclassified  X  they stand apart from the clusters. The four independent schools show strong properties as hubs; they ha ve inactive edges that connect them to a large number of clusters  X  at minimum five. In contrast the lower division schools have only week connections to clusters This partition matches perfectly the underlying structure shown in Figure 6. The second example is the cla ssification of books about US politics. We use the dataset of Books about US politics compiled by Valdis Krebs [18]. The ver tices represent books about US politics sold by the online bookseller Amazon.com. The edges represent frequent co-purchasing of books by the same buyers, as indicated by the "customers who bought this book also bought these other books" feature on Amaz on. The vertices have been given values "l", "n", or "c" to i ndicate whether they are "liberal", "neutral", or "conservative". These alignments were assigned separately by Mark Newman [ 19] based on a reading of the descriptions and reviews of the books posted on Amazon. The  X  X onservative X ,  X  X eutral X  and  X  X ib eral X  books are represented by red, gray and blue respectively. First we apply the SCAN algorithm to the political books graph, using the parameters (  X  = 0.35,  X  = 2). Our goal is to find clusters that represent the different politi cal orientations of the books. The result is presented in Figure 9. SCAN successfully finds three clusters representing  X  X onservative X ,  X  X eutr al X  and  X  X iberal X  books respectively. The SCAN clusters are illustrated using three different shapes: squares for  X  X  onservative X  books and triangles for  X  X eutral X  books and circles fo r  X  X iberal X  books. Additionally, each vertex is labeled with the book title. The result for the FastModularity algorithm is presented in Figure 10. FastModularity found 4 cluste rs, presented us ing circles, triangles, squares, and hexagons. Although two dominant clusters,  X  X onservative X  and  X  X iberal X  classes, the  X  X eutral X  class is mostly misclassified. This demonstrat es again that FastModularity handles poorly vertices that bridge clusters. Figure 10. The Result of Fast Modularity on Political Book Finally we apply network clus tering algorithms to detecting groups of records for the same individual, a problem called Customer Data Integration (CD I). Records consisting of names and addresses are matched against each other using techniques that record with similar information despite variations in the names and addresses. If two record s match we connect them with an edge. From a large file we extract sets of interconnected records for study. We test two graphs, CG1 and CG2, (shown in Figure 11). Graph CG1 represents data for two individuals and two poor-quality records that represent no true individual. Graph CG2 represents four individuals, one of whom is represented by a single instance. CG1 CG2 The clustering results of SCAN, using the parameters (  X  = 0.7, 2), are presented in Figure 12. The results demonstrate that SCAN successfully found all th e clusters and outliers. The results of FastModularity are presented in Figure 13. It is clear that FastModularity failed to identify any outliers. CG1 CG2 
Figure 13. The Result of Fa stModularity on CG1 and CG2. As mentioned in Section 6.2.1, the Adjust Rand Index is an effective measure of the similarity of a clustering result to the true clustering. The results for College Football, Poli tical Books, CG1 and CG2 are presented in Table 1. The ARI results clearly demonstrate that SCAN outperforms FastModularity at producing cluste ring that resemble the true clustering of the real world networks in our study. College football 1 0.24 Political books 0.71 0.64 CG1 1 0.85 
CG2 1 0.68 SCAN algorithm uses two parameters:  X  and  X  . To choose them we adapted the heuristic suggested for DBSCAN in [10]. This involves making a k -nearest neighbor query for a sample of vertices and noting the nearest stru ctural similarity as defined in Section 3.1. The query vertices ar e then sorted in ascending order is shown in Figure 14. The knee i ndicated by a vertical line shows that an appropriate  X  value for this graph is 0.7. This knee represents a separation of verti ces belonging to clusters to the right from hubs and outliers to the left. Usually a sample of 10% such an analysis, an  X  value between 0.5 and 0.8 is normally sufficient to achieve a good clustering result. We recommend a value for  X  , of 2. Network clustering is a fundamental task in many fields of science and engineering. Many algorithms have been proposed from practitioners in different disciplines including computer science and physics. Successful examples are Min-Max Cut [4] and Normalized Cut [5], as well as Modularity-based algorithms [6][11][12]. While such algorithms can successfully detect kinds of vertices that play special roles  X  vertices that bridge clusters (hubs) and ve rtices that are marg inally connected to clusters (outliers). Identifying hubs is essential for applications such as viral marketing and epidem iology. As vertices that bridge clusters, hubs are responsible for sp reading ideas or disease. In as noise in the data. In this paper, we proposed a method called SCAN (Structural Clustering Algorithm for Networks ) to detect clusters, hubs and outliers in networks. SCAN clusters vertices based on their common neighbors. Two vertices are assigned to a cluster according to how they share neighbors. This makes sense when you consider social communities. People who share many friends create a community, and the more friends they have in common, the more intimate the community. But in social networks there are different kinds of actors. There are also people who are outsider (like hermits), and there are people who are friendly with many communities but belong to none (like politicians). The latter play a special role in small-world networks as hubs [13]. We applied SCAN to some real wo rld networks including finding conferences using only the NCCA College Football schedule, grouping political books based on co -purchasing information, and customer data integration. In ad dition, we compared SCAN with the fast modularity-based algorithm in terms of both efficiency and effectiveness. The theoretical analysis and empirical evaluation demonstrate superior performance over the modularity-based network clustering algorithms. In the future we plan to apply SCAN to analyze biological networks such as metabolic ne tworks and gene co-expression networks. [1] S. Wasserman and K. Faust,  X  X ocial Network Analysis. X  [2] R. Albert, H. Jeong, and A.-L . Barab X si,  X  X iameter of the [3] J. M. Kleinberg, S. R. Kumar, P. Raghavan, S. Rajagopalan, [4] C. Ding, X. He, H. Zha, M. Gu, and H. Simon,  X  X  min-max [5] J. Shi and J. Malik,  X  X ormalized cuts and image [6] R. Guimera and L. A. N. Amar al,  X  X unctional cartography of [7] J. Kleinberg.  X  X uthoritative sources in a hyperlinked [8] P. Domingos and M. Richardson,  X  X ining the Network [9] Y. Wang, D. Chakrabarti, C. Wang and C. Faloutsos, [10] M. Ester, H.-P. Kriegel, J. Sander, and X. Xu. "A Density-[11] M. E. J. Newman and M. Girvan,  X  X inding and evaluating [12] A. Clauset, M. E. J. Newm an, and C. Moore,  X  X inding [13] D. J. Watts and S. H. Str ogatz,  X  X ollective dynamics of [14] W. M. Rand,  X  Objective criteria for the evaluation of [15] L. Hubert and P. Arabie ,  X  X omparing Partitions X . Journal of [16] G. W. Milligan and M. C. Cooper,  X  X  study of the [17] http://cs.unm.edu/~aaron/res earch/fastmodularity.htm. [18] http://www.orgnet.com/. [19] http://www-personal.umic h.edu/~mejn/netdata/. [20] P. Erd X s and A. R X nyi, Publ. Math. (Debrecen) 6, 290 [21] M. Faloutsos, P. Faloutsos an d C. Faloutsos, On Power-Law [22] A.-L. Barab X si and Z. N. Oltvai , Nature Reviews Genetics 5, 
