 The proliferation of malware has presented a serious threat to the security of computer systems. Traditional signature-based anti-virus systems fail to detect polymorphic and new, previously un-seen malicious executables. In this paper, resting on the analysis of Windows API execution sequences called by PE les, we develop the Intelligent Malware Detection System (IMDS) using Objective-Oriented Association (OOA) mining based classication. IMDS is an integrated system consisting of three major modules: PE parser, OOA rule generator, and rule based classier. An OOA Fast FP-Growth algorithm is adapted to efciently generate OOA rules for classication. A comprehensive experimental study on a large col-lection of PE les obtained from the anti-virus laboratory of King-Soft Corporation is performed to compare various malware de-tection approaches. Promising experimental results demonstrate that the accuracy and efciency of our IMDS system outperform popular anti-virus software such as Norton AntiVirus and McAfee VirusScan, as well as previous data mining based detection systems which employed Naive Bayes, Support Vector Machine (SVM) and Decision Tree techniques.
 I.2 [ Artificial Intelligence ]: Learning Algorithms, Experimentation, Security Malware, PE le, Windows API sequence, OOA mining
Malicious executables are programs designed to inltrate or dam-age a computer system without the owner's consent, which have become a serious threat to the security of computer systems. New,
The work was done while the author was working in the Anti-virus laboratory at KingSoft Corporation.
 Copyright 2007 ACM 978-1-59593-609-7/07/0008 ... $ 5.00. previously unseen viruses and polymorphic viruses which adopt obfuscation techniques are more complex and difcult to detect. Currently, most widely-used malware detection software uses signature-based and heuristic-based algorithms to recognize threats. Signatures are short strings of bytes which are unique to the pro-grams. They can be used to identify particular viruses in executable les, boot records, or memory with small error rate [8]. However, signature based method is expensive and slow. In addition, they are not effectively against modied and unknown malicious exe-cutables. Heuristic-based recognition tends to provide protection against new and unknown threats. However, this kind of virus de-tection is usually inefcient and inaccurate.

Our efforts for detecting polymorphic and new, previously un-seen malicious executables lead to the Intelligent Malware Detec-tion System (IMDS), which applies Objective-Oriented Associa-tion (OOA) mining based classication [10, 14]. The IMDS rests on the analysis of Windows Application Programming Interface (API) execution sequences which reect the behavior of program code pieces. The associations among the APIs capture the underly-ing semantics for the data are essential to malware detection. Our malware detection is carried out directly on Windows Portable Ex-ecutable (PE) code with three major steps: (1) rst constructing the API execution sequences by developing a PE parser; (2) followed by extracting OOA rules using OOA Fast FP-Growth algorithm; (3) and nally conducting classication based on the association rules generated in the second step. So far, we have gathered 29580 executables, of which 12214 are referred to as benign executables and 17366 are malicious ones. These executables called 12964 APIs in total. The collected data in our work is signicantly larger than those used in previous studies on data mining for malware de-tection [13, 9, 18]. The experimental results illustrate that the ac-curacy and efciency of our IMDS outperform popular anti-virus software such as Norton AntiVirus and McAfee VirusScan, as well as previous systems using data mining approaches such as Naive Bayes, SVM and Decision Tree. Our approach for malware de-tection has been incorporated into the scanning tool of KingSoft's AntiVirus software.
Besides the traditional signature-based malware detection meth-ods, there is some work to improve the signature-based detection [15, 3, 12] and also a few attempts to apply data mining and ma-chine learning techniques to detect new malicious executables.
Sung et al. [15] developed a signature based malware detec-tion system called SAVE (Static Analyzer of Vicious Executables) which emphasized on detecting polymorphic malware. The basic idea of this approach is to extract the signatures from the original malware with the hypothesis that all versions of the same malware share a common core signature. Schultz et al. [13] applied Nai ve Bayes method to detect pre viously unkno wn malicious code. De-cision Tree was studied in [18, 9]. Kolter et al. [9] gathered 1971 benign executables and 1651 malicious executables in Windo ws PE format, and examined the performance of dif ferent classiers such as Nai ve Bayes, support vector machine (SVM) and Decision Tree using 10-fold cross validation and plotting ROC curv es [16]. Their results also sho wed that the ROC curv e of the Decision Tree method dominated all others.

Dif ferent from earlier studies, our work is based on a lar ge col-lection of malicious executables collected at KingSoft Anti-V irus Laboratory . In addition, we apply OO A mining technique to ex-tract the characterizing frequent patterns to achie ve accurate mal-ware detection since frequent patterns found by association mining carry the underlying semantics of the data. Our IMDS system is performed directly on Windo ws PE code. PE is designed as a common le format for all avors of Windo ws operating system, and PE viruses are in the majority of the viruses rising in recent years. Some famous viruses such as CIH, CodeRed, CodeBlue, Nimda, Sircam, Killonce, Sobig, and Lo veGate all aim at PE les. The system consists of three major components: PE parser , OO A rule generator , and mal ware detection module, as il-lustrated in Figure 1.
 The functionality of the PE parser is to generate the Windo ws API execution sequence for each benign/malicious executable. Since a virus scanner is usually a speed sensiti ve application, in order to impro ve the system performance, we developed a PE parser to con-struct the API execution sequences of PE les instead of using a third party disassembler . If a PE le is pre viously compressed by a third party binary compress toll, it needs to be decompressed before being passed to the PE parser . Through the API query database, the API execution sequence generated by the PE parser can be con-verted to a group of 32-bit global IDs which represents the static execution sequence of the corresponding API functions. Then we use the API calls as the signatures of the PE les and store them in the signature database, which contains 6 elds: record ID, PE le name, le type ( X 0 X  represents benign le while  X 1 X  is for mali-cious le), called API sequence name, called API ID, and the total number of called API functions, as sho wn in Figure 2. After that, an OO A mining algorithm is applied to generate class association rules which are recorded in the rule database. To nally determine whether a PE le is malicious or not, we pass the selected API calls together with the rules generated to the mal ware detection module to perform the association rule based classication.

Both classication and association mining play important roles in data mining techniques. Classication is  X the task of learning a tar get function that maps each feature set to one of the predened class labels X  [17]. For association rule mining, there is no pre-determined tar get. Given a set of transactions in the database, all the rules that satised the support and condence thresholds will be disco vered [1]. As a matter of fact, classication and associa-tion rule mining can be inte grated to association rule based classi-cation [10, 2]. This technique utilizes the properties of frequent patterns to solv e the scalability and overtting issues in classica-tion and achie ves excellent accurac y [2]. In our IMDS system, we adapted OO A mining techniques [14] to generate the rules.
In our IMDS system, the goal is to nd out how a set of API calls supports the specic objecti ves: Obj and Obj
Although Apriori algorithm can be extended to OO A mining, it requires man y iterations to generate all of the frequent itemsets before generating the association rules. An alternati ve OO A mining algorithm called OO A FP-Gro wth is designed based on FP-Gro wth algorithm [6, 5]. In general, OO A FP-Gro wth algorithm is much faster than OO A Apriori for mining frequent itemsets. Ho we ver, when the minimum support is small, OO A FP-Gro wth generates a huge number of conditional FP-trees recursi vely , which is time and space consuming. Our mal ware detection relies on nding frequent patterns from lar ge collections of data, therefore, the efcienc y is an essential issue to our system. In our IMDS system, we extend a modied FP-Gro wth algorithm proposed in [4] to conduct the OO A mining. This algorithm greatly reduces the costs of processing time and memory space, and we call it OO A Fast FP-Gro wth algorithm. Similar to OO A FP-Gro wth algorithm, there are also two steps in OO A Fast FP-Gro wth algorithm: constructing an OO A Fast FP-tree and generating frequent patterns from the tree. But the struc-ture of an OO A Fast FP-tree is dif ferent from that of an OO A FP-tree in the follo wing way: (1) The paths of an OO A Fast FP-tree are directed, and there is no path from the root to lea ves. Thus, fewer pointers are needed and less memory space is required. (2) In an OO A FP-tree, each node is the name of an item, but in an OO A Fast FP-tree, each node is the sequence number of an item, which is determined by the support count of the item. The detailed description can be referenced in [4].
At the beginning of this section, we state that frequent patterns are essential to accurate classication. To demonstrate the effec-tiveness of the frequent patterns, we sho w an example rule gener -ated by OO A Fast FP-Gro wth algorithm. We sample 5611 records from our signature database, of which 3394 records are malicious executables and 2217 records are benign executables. One of the rules we generated is: (2230 ; 398 ; 145 ; 138 ; 115 ; 77) ! Obj 1 = ( Group = M alicious ) ( os = 0 : 296739 ; oc = 0 : 993437) , where os and oc represent the support and condence, respecti vely . After con verting the API IDs to API names via our API query database, this rule becomes: ( KERN EL 32 :DLL; OpenP rocess ; Copy F ileA ; CloseH andl e ; GetV ersionE xA ; GetM odul eF ileN ameA ; W riteF ile ; ) ! Obj 1 = ( Group = M alicious ) ( os = 0 : 296739 ; oc = 0 : 993437) After analyzing the API sequence in this rule, we kno w that the pro-gram actually executes the follo wing functions: (i) returns a handle to an existing process object; (ii) copies an existing le to a new le; (iii) closes the handle of the open object; (iv) obtains extended information about the version of the currently running operating system; (v) retrie ves the complete path of the le that contains the specied module of current process; and (vi) writes data to the le. with the os and oc values, we kno w that this sequence of API ap-pears in 1665 mal ware, while only in 11 benign les. Ob viously , it is one of the essential rules for determining whether an executable is malicious or not. In the experiments section, we perform a com-prehensi ve experimental study to evaluate the efcienc y of dif ferent OO A mining algorithms.
For OO A rule generation, we use the OO A Fast FP-Gro wth al-gorithm to obtain all the association rules with certain support and condence thresholds, and two objecti ves: Obj = ( Group = M alicious ) , Obj 2 = ( Group = Benig n ) . Then we apply the technique of classication based on association rules (CB A) to build a CB A classier [10] as our mal ware detection mod-ule. The CB A classier is built on rules with high support and condence and uses the association between frequent patterns and the type of les for prediction. So, our mal ware detection module tak es the input of generated OO A rules and outputs the prediction of whether an executable is malicious or not.
As stated pre viously , we obtained 29580 Windo ws PE les of which 12214 were recognized as benign executables while 17366 were malicious executables. The malicious executables mainly con-sisted of backdoors, worms, and Trojan horses and all of them were pro vided by the Anti-virus laboratory of KingSoft Corpora-tion. The benign executables were gathered from the system les of Windo ws 2000/NT and XP operating system. We conduct three sets of experiments using our collected data. In the rst set of experiments, we evaluate the efcienc y of dif fer -ent OO A mining algorithms. The second set of experiments is to compare the abilities to detect polymorphic and unkno wn mal ware of our IMDS system with current widely-used anti-virus softw are. The efcienc y and false positi ves by using dif ferent scanners have also been examined. Finally , we compare our IMDS system with other classication based methods. All the experiments are con-ducted under the environment of Windo ws 2000 operating system plus Intel P4 1Ghz CPU and 1Gb of RAM. In the rst set of experiments, we implement OO A Apriori, OO A FP-Gro wth, and OO A Fast FP-Gro wth algorithms under Mi-crosoft Visual C++ environment. We sample 5611 records from our signature database, which includes 3394 records of malicious exe-cutables and 2217 records of benign executables. By using dif fer -ent support and condence thresholds, we compare the efcienc y of the three algorithms. The results are sho wn in Table 3 and Fig-ure 3. From Table 3, we observ e that the time comple xity increases exponentially as the minimum support threshold decreases. Ho w-ever, it sho ws obviously that the OO A Fast FP-Gro wth algorithm is much more efcient than the other two algorithms, and it even doubles the speed of performing OO A FP-Gro wth algorithm. Fig-ure 3 presents a clearer graphical vie w of the results.
In this section, we examine the abilities of detecting polymor -phic mal ware and unkno wn mal ware of our system in comparison with some of the popular softw are tools such as Norton AntiV irus 2006, Dr .W eb, McAfee VirusScan and Kaspersk y Anti-V irus. The efcienc y and the number of false positi ves are also evaluated. Table 1: Running time of differ ent OO A mining algorithms (min). mos and moc repr esent the minimum support and mini-mum confidence for each experiment.
 Figur e 3: Comparison on the efficiency of differ ent OO A min-ing algorithms
In this experiment, we sample 3000 malicious les and 2000 be-nign les in the training data set, then we use 1500 mal ware and 500 benign executables as the test data set. Several recent Win32 PE viruses are included in the test data set for analysis such as Lo vedoor , My doom, Blaster , and Beagle. For each virus, we ap-ply the obfuscation techniques described in [15] to create a set of polymorphic versions. Then we compare our system with current most widely-used anti-virus softw are. The results sho wn in Table 4 demonstrate that our IMDS system achie ves better accurac y than other softw are in polymorphic mal ware detection.
In order to examine the ability of identifying new and pre viously unkno wn mal ware of our IMDS system, in the test data set, we use 1000 mal ware analyzed by the experts in KingSoft Anti-virus labo-ratory , while the signatures of the mal ware have not been recorded into the virus signature database. Comparing with other anti-virus softw are, our IMDS system performs most accurate detection. The results are listed in Table 5.
In mal ware detection, a false positi ve occurs when the scanner marks a benign le as a malicious one by error . False positi ves can be costly nuisances due to the waste of time and resources to deal with those falsely reported les. In this set of experiments, in order to examine the system efcienc y and the number of false positi ves of the IMDS system, we sample 2000 executables in the test data set, which contains 500 malicious executables and 1500 benign ones.

First, we compare the efcienc y of our system with dif ferent scanners including the scanner named  X SA VE X  [15, 20] described in related work and some widely-used anti-virus softw are.
The results in Figure 4 illustrate that our IMDS system achie ves much higher efcienc y than other scanners when being executed Table 2: Polymor phic malwar e detection. Remark: N -Norton AntiV irus, M -MacAfee, D -Dr .W eb, K -Kaspersk y. In the table,  X  p  X  indicates successful detection,  X   X  indicates failur e to detect, and  X ? X  repr esents only an  X  X lert X ; all the scanners used are of most curr ent and updated version.
 in the same environment. The number of false positi ves by using dif ferent scanners are also examined. By scanning 1500 benign ex-ecutables whose signatures have not been recorded in the signature database, we obtain the results sho wn in Figure 5. Figure 5 clearly sho ws that the false positi ves by using our IMDS system are much fewer than other scanners. In this set of experiments, we compare our system with Nai ve Bayes, Support Vector Machine (SVM) and Decision Tree meth-ods.W e randomly select 2843 executables from our data collection, in which 1207 les are benign and 1636 executables are malicious. Then we con vert the transactional sample data in our signature database into a relational table, in which each column corresponds to an API and each row is an executable. This transformation mak es it easy to apply feature selection methods and other classication approaches.
 First, we rank each API using Max-Rele vance algorithm [11], and then choose top 500 API calls as the features for later clas-sication. In the experiments, we use the Nai ve Bayes classier and J4.8 version of Decision Tree implemented in WEKA [19], and also the SVM implemented in LIBSVM package [7]. For the OO A Fast FP-Gro wth mining, we select thresholds based on two criteria: setting moc as close to 1 as possible; and selecting a big mos without exceeding the maximum support in the data set. Then, in the experiment, we set mos to 0.294 and moc to 0.98. Ten-fold cross validation is used to evaluate the accurac y of each classier . Results sho wn in Table 6 indicate our IMDS system achie ve most accurate mal ware detection.
 Algorithms TP TN FP FN DR ACY Nai ve Bayes 1340 1044 163 296 81.91% 83.86% SVM 1585 989 218 51 96.88% 90.54% J4.8 1574 1027 609 62 96.21% 91.49% IMDS 1590 1056 151 46 97.19% 93.07% Table 4: Results by using differ ent classifiers. TP , TN, FP , FN, DR, and ACY refer to True Positi ve, True Negati ve, False Positi ve, False Negati ve, Detection Rate, and Accuracy , respec-tively .

From the comparison, we observ e that our IMDS outperforms other classication methods in both detection rate and accurac y. This is because  X frequent patterns are of statistical signicance and a classier with frequent pattern analysis is generally effecti ve to test datasets X  [2].
In this paper , we describe our research effort on mal ware detec-tion based on windo w API sequence. In summary , our main contri-butions are: (1) We develop an inte grated IMDS system based on analysis of Windo ws API execution sequences. The system con-sists of three components: PE parser , rule generator and classier; (2) We adapt existing association based classication techniques to impro ve the system effecti veness and efcienc y; (3) We evaluate our system on a lar ge collection of executables including 12214 be-nign samples and 17366 malicious ones; (4) We pro vide a compre-hensi ve experimental study on various anti-virus softw are as well as various data mining techniques for mal ware detection using our data collection; (5) Our system has been already incorporated into the scanning tool of KingSoft' s AntiV irus softw are.
 The work of Tao Li is partially supported by NSF IIS-0546280. The authors would also lik e to thank the members in the Anti-virus lab-oratory at KingSoft Corporation for their helpful discussions and suggestions.
