 We consider pairwise Markov Random Field (MRF) over n binary variables x = x 1 ,...,x n ex-pressed as a graph G = ( V , E ) and an energy function E ( x |  X  ) whose parameters  X  decompose over its vertices and edges as: graphical models and for general graphs and arbitrary parameters is NP complete. Consequently, there is an extensive literature of approximation schemes for the problem and new algorithms con-tinue to be explored [2, 3, 4, 5, 6, 7, 8]. The most popular of these are based on the following linear programming relaxation of the MAP problem. Broadly two main techniques are used to solve this relaxation: message-passing algorithms [9, 10, 11, 7, 12] such as TRW-S and Max-sum diffusion on the dual and, combinatorial algorithms based on graph cuts and network flows [13, 14]. Both these methods find the exact MAP when the edge parameters are submodular. For non-submodular parameters, these methods provide partial optimal-ity guarantees for variables that get integral values. This observation is exploited in [14] to design this scheme is useful only for the case when the graphical model has a few non-submodular edges. More principled methods to improve the solution output by the relaxed LP are based on progres-sively tightening the relaxation with violated constraints. Cycle constraints [15, 16, 17, 18, 1, 19] and higher order marginal constraints [17, 1, 20] are two such types of constraints. However, these are not backed by efficient algorithms and thus most of these tightenings come at a considerable computational cost.
 In this paper we propose a new relaxation of the MAP estimation problem via reduction to a recently proposed Bipartite Multi-cut problem in undirected graphs [21]. We exploit this to show that after adding a polynomial number of constraints, we get a O (log k ) approximation guarantee on the MAP objective where k is the number of variables adjacent to non-submodular edges in the graphical model, and this can be tightened to O ( p log( k ) log(log( k ))) using a semi-definite programming relaxation 1 . In this paper we explore only LP-based relaxation since our goal is to design practical algorithms.
 We propose a combinatorial algorithm to efficiently solve this LP by casting it as a Multi-cut prob-lem on a specially constructed graph, the dual of which is a multi-commodity flow problem. The algorithm, adapted from [22, 23], simultaneously updates the primal and dual solutions, and thus at any point provides both a candidate solution and a lower bound to the energy function. It is guaran-terminates much faster. No such guarantees exist for any of the existing algorithms for tightening the MAP LP based on cycle or higher order marginals constraints. Empirically, this algorithm is an order of magnitude faster than the state of the art message passing algorithm[1] while yielding the same or better MAP values and bounds. We show that our LP is a relaxation of the LP with cycle constraints, but we still yield better and faster bounds because our combinatorial algorithm solves the LP within a guaranteed approximation. We assume a reparameterization of the energy function so that the parameters of E ( x |  X  ) (Equation 1) are It is easy to see that any energy function over binary variables can be reparameterized in this form 2 . Our starting point is the LP relaxation proposed in [13] for approximating MAP x  X  = this construction for completeness. 2.1 Graph cut-based relaxation of [13] For ease of notation, first augment the n variables with a special  X 0 X  variable that always takes a variables are further constrained to take integral values (with D ( i 0 )  X  x i ). relaxation in Equation 2 for which many alternative algorithms have been proposed [3, 6, 7, 9, 11]. On graphs with many cycles containing an odd number of non-submodular edges, this method yields poor MAP assignments.
 We next show how to tighten this LP based on a connection to a recently proposed Bipartite Multi-cut problem [21]. 2.2 Bipartite Multi-cut based LP relaxation The Bipartite Multi-cut (BMC) problem is a generalization of the standard s-t Min-cut problem. Given an undirected graph J = ( N , A ) with non-negative edge weights, the s-t Min-cut problem finds the subset of edges with minimum total weight, whose deletion disconnects s and t. In BMC, vertices M  X  N such that | { s i , t i }  X  M | = 1 and the total weight of edges from M to the remaining vertices N X  M is minimized. The BMC problem was recently proposed in [21] where it was shown to be NP-hard and O (log k ) approximable using a linear programming relaxation. The BMC problem is also related to the more popular Multi-cut problem where the goal is to identify the smallest weight set of edges such that every s i and t i are separated. Any feasible BMC solution is a solution to Multi-cut but not the other way round. To see this, consider a graph over six vertices ( s all pairs in ST are separated and optimal Multi-cut solution has cost 0. But, for BMC one of the three edges has to be cut. The LP relaxations for Multi-cut provide only a  X ( k ) approximation to the BMC problem.
 We reduce the MAP estimation problem to the Bipartite Multi-cut problem on an optimized version of graph H constructed so that the set of variables R adjacent to non-submodular edges is minimized. Later in Section 2.3 we will show how to create such an optimized graph. Without loss of generality, we assume that the variables in R are 0 , 1 ,...,k . The remaining variables j  X  V  X  R do not need the j 1 copy of j in H since there have no edges adjacent to j 1 . We create an instance of a Bipartite Multi-cut problem on H with the source-sink pairs ST = { ( i 0 ,i 1 ) : 0  X  i  X  k } . Let M be the subset of vertices output by BMC on this graph, and without loss of generality assume that M contains 0 0 . The MAP labeling x  X  is obtained from M by setting x i = s if i s  X  M and x i =  X  s if i  X  V H  X  M . This gives a valid MAP labeling because for each variable j that appears in the set R , BMC ensures that M contains exactly one of ( j 0 ,j 1 ) .
 Using this connection, we tighten the Min-cut LP as follows. For each u  X  X  0 0 , 0 1 ,...,k 0 ,k 1 } and j  X  V H we define new variables D u ( j s ) and use these to augment the Min-cut LP with additional constraints as follows: A useful interpretation of the above LP is provided by viewing variables d e as the distance between i first two constraints ensure that these distance variables satisfy triangle inequality. These, along terminal pair. Later, in Section 5 we will establish a connection between these constraints and cycle constraints [15, 16, 17, 18, 19]. When the LP returns integral solutions, we obtain an optimal MAP growing approach for rounding them so as to get a O (log k ) approximation of the optimal objective. In practice, we found that ICM starting with fractional node assignments x i = D 0 0 ( i 0 ) gave better results. 2.3 Reducing the size of ST set In the LP above, for every edge that is non-submodular we add a terminal pair to ST corresponding to any of its two endpoints. The problem of minimizing the size of the ST set is equivalent to the problem of finding the minimum set R of variables of G such that all cycles with an odd number of non-submodular edges are covered. It is easy that see that in any such cycle, it is always possible to flip the variables such that any one selected edge is non-submodular and the rest are submodular. Since finding the optimal R is NP-hard, we used the following heuristics.
 First, we pick the set of variables to flip so as to minimize the number of non-submodular edges, Interestingly, this problem can be cast as a MAP inference problem on G defined as follows: For each variable, label 0 denotes that the variable is not flipped and 1 denotes that the node is flipped. Thus, if an edge is submodular and both variables attached to it are flipped (i.e labeled 1) then the edge remains submodular. We need to minimize the number of non-submodular edges. Therefore, energy function for this new graphical model will be When G is planar, for example a grid, the special structure of these potentials (Ising energy function) enables us to get an optimal solution using the matching algorithm of [24, 8].
 With the above LP formulation, we were able to obtain exact solutions for most 20x20 grids and 25 node clique graphs. However, the LP does not scale beyond 30x30 grid and 50 node clique graphs. We therefore provide a combinatorial algorithm for solving the LP. We will adapt the primal-dual algorithm that was proposed in [22, 23] for solving the closely related Multi-cut problem. We review this algorithm in Section 3.1 and in Section 3.2 show how we adapt it to solve the BMC LP. 3.1 Garg X  X  algorithm for the Multi-cut problem Recall that in the Multi-cut problem, the goal is to remove the minimum weight set of edges so as to separate each ( s i ,t i ) pair in ST. This problem is formulated as the followed primal dual LP pair in [22].
 where P denotes all paths between a pair of vertices in ST and P e denotes the set of paths in P which contain edge e . Garg X  X  algorithm [22, 23] simultaneously solves the primal and dual so that they are within an factor of each other for any user-provided &gt; 0 . The algorithm starts by setting all dual L is the maximum number of edges for any path in P . It then iteratively updates the variables by first finding the shortest path P  X  X  which violates the P e  X  P d e  X  1 constraint and then, modifying variables as f P = min e  X  P w e i.e f = f + f P and d e = d e (1+ f P w solution can be obtained by rescaling all the primal and dual variables. Termination is reached when the rescaled primal objective is within (1 + ) of the rescaled dual objective for error parameter . This process is shown to terminate in O ( mlog 1+ 1+  X  ) steps where m = |E H | . 3.2 Solving the BMC LP We first modify the edge weights on graph H constructed for the BMC LP so that for all edges easily ensured by setting w e = w  X  e = average of previous edge weights of e and e in H . This change adds all (2 n + 2) possible vertices to H i.e all nodes 0  X  i  X  n contain terminal pairs ( i 0 ,i 1 ) in the ST set. For any path P in H we define its complementary path  X  P to be the path obtained by reversing the order of edges and complementing all edges in P . For example, the complement BMC-Sym LP for BMC on symmetric graphs, that is, graphs where w e = w  X  e Lemma 1 When H is symmetric, the BMC-Sym LP, BMC LP, and Multi-cut LP are equivalent.
 P
ROOF Any feasible solution of BMC-Sym LP can be used to obtain a solution to BMC LP with the as the length of the shortest path between u and i s that is, D u ( i s ) = min P  X  paths ( u,i between i 0 and i 1 have a distance  X  1 in BMC-Sym LP. The constraints D i 0 ( j 0 ) = D i 1 ( j 1 ) and D 0 ( j 1 ) = D i 1 ( j 0 ) are satisfied because the distances are symmetric d e = d e . We next show that any feasible solution of BMC LP gives a feasible solution to Multi-cut LP with p and p 1 .
 feasible solution { d 0 e } to BMC-Sym LP without changing the value of the objective function using d e = d straints P e  X  P d 0 e  X  1 hold  X  P  X  P because both path P and its complementary path P are in P We modify Garg X  X  algorithm [22, 23] to exploit the fact that the graph is symmetric so that at each iteration we push twice the flow while keeping the approximation guarantees intact. The key change we make is that when augmenting flow f in some path P , we augment the same flow f to the complementary path P as outlined in our final algorithm in Figure 1. This change ensures that we always obtain symmetric distance values as we prove below.
 Lemma 2 Suppose H is a symmetric graph then d e = d e  X  e  X  E H at the end of each iteration of the while loop in algorithm in Figure 1.
 P
ROOF We prove by induction. The claim holds initially, since d e =  X   X  e  X  E H and H is sym-metric. Let P i denote the path selected in the i th iteration of the algorithm. Now, suppose that the hypothesis is true for the n th iteration. In the ( n + 1) th iteration, we augment flow f in both paths P n +1 and P n +1 . These paths P n +1 and P n +1 do not share any edge because this would imply that there is another pair ( j 0 ,j 1 ) of shorter length, and we would choose P n +1 to be this path instead. We then do the following update d e = d e (1 + f P w and P n +1 . Since w e = w e for all e  X  E and d e = d e  X  e  X  E H before this iteration, d e = d e  X  e  X  X  H after ( n + 1) th step.
 Theorem 3 The modified algorithm also provides an -approximation algorithm to the BMC LP. P ROOF Suppose, we do not augment the flow in the complementary path P while augmenting P . In the next iteration the original algorithm of [22, 23] picks P or any path with the same path length since the path length of P and P is equal before the iteration and they do not share any common edges. Therefore, by forcing P we are not modifying the course of the original algorithm and the analysis in [22, 23] holds here as well.
 Input: Graphical model G with reparameterized energy function E , approximation guarantee Create symmetric graph H from G and E
Initialize d e =  X  (  X  derived from as shown in Section 3.1), and f = 0 ,f e = 0 , x =arbitrary initial labeling of graphical model G .
 Define: Primal objective P ( { d e } ) = P e w e d e / min P  X  P P e  X  P d e
Define: Dual objective D ( f, { f e } ) = f/ (max e f e /w e ) while min ( E ( x )  X   X  const ,P ( { d e } )) &gt; (1 + ) D ( f, { f e } ) do end while Return bound = D ( f, { f e } ) +  X  const , MAP = x .
 Our algorithm in addition to updating the primal and dual solutions at each iteration, also keeps track of the primal objective obtained with the current best rounding ( x in Figure 1). Often, the rounded variables yielded lower primal objective values and led to early termination. The complexity of the algorithm can be shown to be O (  X  2 km 2 ) ignoring the polylog( m ) factors. Fleischer [25] subse-quently improved the above algorithm by reducing the complexity to O (  X  2 m 2 ) . It is interesting to note that running time is independent of k . Though we have presented modification to algorithm in [22, 23], we can fit our algorithm in Fleischer X  X  framework as well. In fact, we use Fleischer X  X  modification for practical implementation of our algorithm. Figure 2: Clique size scaled values of MAP, Upper bound, and running time with increasing clique size on three methods: BMC, MPLP, and TRW-S. We compare our proposed algorithm (called BMC here) with MPLP, a state-of-art message passing algorithm [1] that tightens the standard MAP LP with third order marginal constraints, which are equivalent to cycle constraints for binary MRFs. As reference we also present results for the TRW-S algorithm [9]. BMC is implemented in Java whereas for MPLP we ran the C++ code provided by the authors. We run BMC with = 0 . 02 . MPLP was run with edge clusters until convergence (up to a precision of 2  X  10  X  4 ) or for at most 1000 iterations, whichever comes first. Our experiments were performed on two kinds of datasets: (1) Clique graph based binary MRFs of various sizes generated as per the method of [17] where edge potentials are Potts sampled from U [  X   X , X  ] (our default setting densities from the BiqMac library 3 . Since the second task is formulated as a maximization problem, for the sake of consistency we report all our results as maximizing the MAP score. We compare the algorithms on the quality of the final solution, the upper bound to MAP score, and running time. It should be noted that multiplicative bounds do not hold here since the reparameterizations give rise to negative constants.
 In the graphs in Figure 2 we compare BMC, MPLP, and TRW-S with increasing clique size aver-aged over five seeds. We observe that BMC provides much higher MAP scores and slightly tighter bounds than MPLP. In terms of running time, BMC is more than an order of magnitude faster than MPLP for large graphs. The baseline LP (TRW-S) while much faster than both BMC and MPLP provides really poor MAP scores and bounds. We also compare BMC and MPLP on their speed of convergence. In Figures 3(a), (b), and (c) we show the MAP and Upper bounds for different times in the execution of the algorithm on cliques of size 50 and different edge strengths. BMC, whose bounds and MAP appear as the two short arcs in-between the MAP scores and bounds of MPLP, converges significantly faster and terminates well before MPLP while providing same or better MAP scores and bounds for all edge strengths.
 In Table 1 we compare the three algorithms on the various graphs from the BiqMac library. The graphs are sorted by increasing density and are all of size 100. We observe that the MAP values for BMC are significantly higher than those for TRW-S. For MPLP, the MAP values are always zero because it decodes marginals purely based on node marginals which for these graphs are tied. The upper bounds achieved by MPLP are significantly tighter than TRW-S, showing that with proper rounding MPLP is likely to produce good MAP scores, but BMC provides even tighter bounds in most cases. The running time for BMC is significantly lower than MPLP for dense graphs but for sparse graphs (10% edges) it requires the same time as MPLP.
 Thus, overall we find that BMC achieves tighter bounds and better MAP solutions at a significantly faster rate than the state-of-the-art method for tightening LPs. The gain over MPLP is highest for the case of dense graphs. For sparse graphs many algorithms work, for example recently [8, 26] reported excellent results on planar, or nearly planar graphs and [27] show that even local search works when the graph is sparse. We put our tightening of the basic MAP LP (Marginal LP in Equation 2 or the Min-cut LP) in perspective with other proposed tightenings based on cycle constraints [17, 18, 1, 19] and higher order marginal constraints [17, 1, 20]. For binary MRFs cycle constraints are equivalent to adding marginal consistency constraints among triples of variables [28]. We show the relationship between cycle constraints and our constraints. Let S = ( V S , E S ) denote the minimum cut graph created from G as shown in Section 2.1 but without the i 1 vertices for ( 1  X  i  X  n ) so that weights of non-submodular edges in S will be negative. The LP relaxation of MAP based on cycle constraints is defined as:
P where C denotes the set of all cycles in S . Suppose we construct our symmetric minimum cut graph instead of two that we currently get due to zero-normalized edge potentials. Then, BMC-Sym LP along with the constraints d i s j t + d i s j skip the proof due to lack of space.
 Our main contribution is that by relaxing the cycle LP to the Bipartite Multi-cut LP we have been able to design a combinatorial algorithm which is guaranteed to provide an approximation to the LP in polynomial time. Since we solve the LP and its dual better than any of the earlier methods of enforcing cycle constraints, we are able to obtain tighter bounds and MAP scores at a considerable faster speed.
 Future work in this area includes developing combinatorial algorithm for solving the semi-definite program in [21] and extending our approach to multi label graphical models.
 Acknowledgement We thank Naveen Garg for helpful discussion in relating the multi-commodity flow problem with the Bipartite multi-cut problem. The second author acknowledges the generous support of Microsoft Research and IBM X  X  Faculty award.
