 With the proliferation of Web services [1]-[3], constructing a s ervice process by integrating available Web services on th e Internet has become a common activity. Manytoolstodesignandrunsuchservi ce processes have been developed and announced. However, there is still plenty of room to improve functions in such tools. Among the improvements, facilities supporting efficient design of a service process are essential for the success of t he tools. For instance, if a system or a tool can identify Web services that can be connected to a Web service and the system is equipped with a mechanism assi gning priorities to the connectable Web services, semi-automatic composition of Web services would be possible. The burdens of service designers, who have to integrate or composite Web services, will be drastically alleviated, if the semi-automatic composition of Web services is properly applied and used.

In semi-automatic composition of Web services, a part of a service process design is supported either by a system or by a tool. In the design of a service process, appropriate Web services should be located and invoked at the right place in the service process for the successful design of the service process. Semi-automatic composition of Web services supports activities of searching and list-ing pre or post Web services that can be c onnected to a high lighted Web service in a service process. If a service proces s designer chooses a Web service, the Web service becomes a highlighted Web servi ce and then the pre or post connectable Web services to the chosen Web service are searched and listed. If a Web service is what the process designer is seeking for , the Web service is selected and con-nected to the highlighted Web service. If there is no connectable Web service, a service should be either developed n ewly or searched through UDDI [3]. This procedure is repeated until the who le service process is constructed.
Several works have been done for the support of semi-automatic composition of Web services [5]-[7]. Attaching semanti c description to a Web service descrip-tion is one approach, where the semantic description is used to identify the pre and post Web services to the Web service. In other researches, service and data ontology is predefined and the couplin g of Web services is evaluated based on the distance of the services in the ontology. Theoretically the two approaches are quite appealing. However they have some drawbacks to be applied in real fields. The semantic description base d approach will be successful only when the semantics of most Web services are properly specified and understood correctly. Standards of Web service semantic des criptions should be agreed and accepted by the community. The ontology based approach assumes that the service and data ontology is properly defined beforehand. But this assumption does not al-ways holds and the usefulness of the method is not apparent yet.

The two previous approaches share a common feature in that they have uni-directional information flows from the tools to process designers. No informa-tion flows from the defined service process back to the systems or tools that support semi-automatic composition of Web services. However, the service pro-cesses defined in the past or under construction could be an invaluable coupling information source of Web services.

In this paper, we propose a feedback based framework for semi-automatic composition of Web services. In the fram ework, whenever a service process is constructed by composing Web services, t he connection patterns of Web services in the service process are analyzed and r egistered in terms of data and control flows. We also develop a method of measuring the degree of coupling between Web services within the framework. Semi-automatic composition of Web services is possible in the framework because t he framework can recommend which Web services are more tightly coupled with ea ch other using the method. When service process designer chooses a Web service in a service domain, the previous or next connectable Web services are listed a ccording to the degree of couplings.
Several benefits we can expect from th e feedback based framework for semi-automatic composition of Web services. First of all, by using feedback informa-tion additionally, we can support semi-automatic composition of Web services more completely. Secondly, the semantic description based approach or ontology based approach can be easily combined t ogether with the method in our frame-work that will be developed in this paper. That is, the advantages of using the semantic description based approach or ontology based approach are still valid in our framework. Lastly, we found that our method is fairly easy to implement because the feedback mechanism is quite comprehensive and our coupling degree evaluation method for Web services is clear.
The next section introduces several rel ated work on semi-automatic compo-sition of Web services. Section 3 descri bes our feedback based framework for the composition of Web services. This s ection contains the architecture of the framework and the coupling degree evalu ation method for Web services. Section 4 illustrates the ontology incorporation in the framework. Section 5 illustrates user interfaces and we briefly explain the usage of the user interfaces in this section. Conclusion and future work are in Section 6. Semi-automatic composition of services or applications is not a new idea. Ko et al. [5] tried to integrate publicly available services and applications on the Internet in GeoWorld project. They used service ontology and data ontology to support the integration of services and applications. In the Geoword project, they developed a system that recommends se rvices to users with priorities when users select a service templa te defined in the service ontology. For the connection of services, they viewed data as an essential element to connect services. That is, services are indirect ly connected via data.

Sirin et al. [6] proposed a method for semi-automatic composition of Web services. They tried to add some semantic descriptions in WSDL [2] to help the semi-automatic composition of Web services. Their proposal is certainly one of the approaches to take, but some standardization efforts are required for the adoption of their proposal.

Liang et al. [7] also proposed a semi-automatic method for composing Web services by supporting the methods for dis covery, description and invocation of Web services. For the discovery of a composi te service template, they constructed a service dependence graph and developed an algorithm that finds a service for the given input and output parameters. The service dependence graph contains operation nodes and data entity nodes. In some sense, they share the same idea with Ko et al. in which services are c onnected with each other via data.
The framework proposed in this paper, shares many ideas with the previ-ous approaches. For instance, the ontology technology developed by Ko et al. is also used in our framework with slight modifications. But none of the previ-ous approaches take into account using the composition patterns buried in the past Web services. Our work is distinguished from these approaches because we actively utilize the connection information in the composition or integration of Web services built in the past. That is, co nnection patterns of Web services used in the past is the major source for the support or semi-automatic composition of Web services in our framework. 3.1 Architecture of Framework Fig. 1 shows the architecture and the components of our feedback based frame-work for semi-automatic composition of Web services. We assume service and data ontology is defined and stored already so that it can be searched by the service recommendation module. When th e service recommendation module re-ceives a highlighted Web service from a process modeling tool, it searches the service and data ontology and returns a list of connectable Web services to the highlighted Web service. Process designe rs browse the returned list of Web ser-vices and select a Web service. Then th e selected Web service is connected to the highlighted Web service in the process modeling tool. In selecting a Web service, process designers may not be able to find an appropriate connectable Web service in the list. In that case, t he services should be newly created or located from public UDDI [3] and the new ly created or located Web services are registered in the service/data on tology for later references.

Up to now, there is no big difference between our method and conventional frameworks. The uniqueness of our framework originates from its usage of Web services connectivity information in service processes defined in the past. When a process design is over, the connection p atterns of Web services in the defined process are analyzed and stored in the process repository. Once enough Web services connectivity information in th e defined service processes are accumu-lated, the service recommendation modul e refers to the process repository as well as service/data ontology for the recommendation of connectable Web ser-vices. Since the process repository conta ins more practical information on the connectivity of Web services, the capability of the recommendation module will be improved further by using the information in the process repository.
Meanwhile, when the recommendation module shows a list of Web services, the module has to decide the order of Web services in the list. As the order of a Web service in the list means a rank for the recommendation, some reasonable mechanism to decide the order is necessary. In this paper, coupling of Web services is used as a means for deciding such orders. That is, more tightly coupled Web service is recommende d with higher priority. In the next subsection, we explain the details on the coupling of Web services. 3.2 Coupling of Web Services The coupling of Web services is one of m eans in computing the connection pos-sibility among Web services. The more tightly coupled Web services in a service process can be considered to have higher possibility to be connected each other in other processes. This assumption may not always hold in every situation. Nev-ertheless, when we take in to account the fact that some parts of a service are repeatedly used in other services, the a ssumption is acceptable to some extent.
In order to apply the coupling of Web services in the computing of the connec-tion possibility among Web services, we devise equations to measure the degree of couplings of Web services. For the explanation of the equations, we introduce some notations and examples.
 Fig. 2 shows four different data a ccess patterns when two Web services S i and S j are directly connected an d refer to a common data d k . For example, when web service S i writes to data d k , and Web service S i reads the data, we use the notation S W i { d k } X  S R j { d k } .

We also devise notations to represent the service connection patterns of ar-bitrary Web services S i and S j in processes. We use the following notations to represent the service c onnection patterns:  X  S  X  S  X  S  X  S
When we combine the data a ccess patterns and servic e connection patterns of Web services S i and S j , sixteen different combin ations of data access and service connection patterns are possibly formed. We assign an integer value to each combination to represent the coup ling degree of Web services. The value assignment is done by observing the following guidelines:  X  If S  X  If S  X  If S  X  If S Fig. 3 illustrates the rational of the guidelines. The correlation of coupling of Web services and the data access and service connection patterns is illustrated in the graph.

The result of value assignment for six teen combinations is represented by a coupling matrix. We use notation CM ( d k ) to represent the matrix. Although coupling matrix is dependent on data d k , many data can share the same coupling matrix. 3.3 Coupling Degree Computation of Web Services with Single Once C M matrices are prepared for all the data exchanged among Web services, we can compute the coupling degree of Web services under some conditions. If the connection pattern of Web services S i and S j are known and registered in the process repository, and if only one data d k is included in the connection, the computation of the coup ling degree of Web services S i and S j is simple and straightforward. All we need to do is to retrieve the corresponding element from CM ( d k ) matrix. Coupling Degree(CD) of Web services S i and S j is computed by Eq. (1). We assume that Web services S i is an immediate predecessor of S j , and S i and S j exchange data { d 1 } by S i writes to data { d 1 } and S j reads from data { d 1 } . Equations for other cases can be defined similarly.
 3.4 Coupling Degree Computation of Web Services with Multiple When multiple data are involved in the exchange of data between Web services, the computation of coupling degree is more difficult. Consider four cases in Fig. 4. Web services S m and S n in case (b) should be considered being more tightly coupled with each other than Web services S i and S j in case (a), because in case (b), three data are exchanged, whereas one data is exchanged in case (a). On the other hand, Web services S i and S j in case (a) should be considered being more tightly coupled with each other than Web services S m and S n in case (c), because in case (c) only one data is exchanged among three output data of Web service S m . Similarly, Web services in case (c ) should be considered being more tightly coupled with each other than those of case (d).

Since we cannot use the coupling degree computation equation in Eq. (1) for this case, we develop a more sophisticated coupling degree computation equa-tion to cover all the cases. In order to cover all the cases, the number of input and output data of Web services and the number of data exchanged should be reflected in the equation. The final form of coupling degree computation equa-tion is in Eq. (2). In Eq. (2), we assume that Web services S i is an immediate predecessor of S j ,and S i and S j exchange data { d 1 ,d 2 ,...,d k } by S i writes to data { d 1 ,d 2 ,...,dk } and S j reads from data { d 1 ,d 2 ,...,dk } .Equationsfor other cases can be defined in similar manner.

Here, m represents the number of outputs of Web service S i , n represents the number of inputs of Web services S j , C k represents coefficients for each data d .Thevalueof C k should be decided carefully so that it can make effective of using the value of m , n in the equation. But we do not delve into the details. In composing a service process, we may confront with a situation where no can-didate service can be recommended based solely on the past connection patterns. It is likely to happen when no enough connection pattern data has been accumu-lated for the candidate services or because that the service process is composed in a totally new context that requires different connection patterns from the previous services.

To compensate this situation, our framework incorporates an ontology-based service brokering mechanism. The ser vice broker primar ily compares the se-mantics (represented by a set of ontologies) of input data of services to search candidate services that can be connect ed to the target services in a process. The service broker matches services which input semantics is general enough to accept output-data semanti cs of the target service. It also ranks the candidate services based on the semantic distance between the ontologies that constitute the output-data semantics of the target service, and the ontologies that consti-tute the input-data semantics of a candidate service.

Usually, input/output data of a service are composed of one or more data items. Therefore, it is im portant to consider the composite semantics of multiple data items in representing and evaluating the semantics of input/output data of a service. We adopt our previous effor t to represent and measure semantics of data collections [5]. In this approach, the semantics of a data item is repre-sented by two types of ontology, one for representing the content and another for representing the structure of the data (see Fig. 5 (a)). The semantics of a data collection is an aggregation of content and structure ontologies of the data items. As illustrated at Fig. 5 (b) and (c), semantic interoperability and compat-ibility between services can be measured by comparing the composite semantics of their input and output data.

In our framework, there are four cases when the ontology-based service broker is activated for matching candidate serv ices to be combined in a service process:  X  When the service process requires services that have been newly added to  X  When the service process needs to be com posed in a context in which required  X  When the contract of required services in the service process have been  X  When the usage history of required ser vices in the service process have been Fig. 6 shows a prototype of a semi-automatic Web service composition tool. The tool is implemented in Java on Eclipse Foundation X  X  Eclipse platform 1 .Cus-tomized user interfaces can be easily integrated using the plug-in-based software integration feature in the Eclipse platform. The tool is developed as a part of WebVine business process management system [4], but it can be used as an independent tool.

Part (a) of Fig. 6 shows the canvas of the tool. The result of Web services composition is viewed on the canvas. S ervice process designers can design a service process either by manually defining each service of the process on the canvas, or by semi-automa tically selecting one of recommended Web services in part (b). In semi-automatic Web service co mposition, the servi ce process designer chooses one of Web services on the canvas and marks it a highlighted Web service, then the system searches Web services th at can be connected to the highlighted Web service and lists the candidate Web s ervices in part (b). When the designer selects a Web service in the list, the tool a utomatically attaches the selected Web service to the highlighted Web service. Now the attached We b service becomes the highlighted Web services. If necessary , the process designer can change the highlighted Web service by marking a nother Web service on the canvas.
Part (c) of Fig. 6 shows the service and data ontology hierarchy. At the beginning stage of a process design, one o f services in the service ontology may be selected. Then the system lists Web ser vices implementing the service in part (b). Similarly, the process designer sel ects a Web service and the process design starts. An ontology editor is connected to part (c). So when we change the ontology on the editor, the change of the ontology can be immediately reflected to part (c). In this paper, we have proposed a feedback based framework for semi-automatic composition of Web services. The notion of coupling of Web services is introduced and a method of computing the coupling d egree of Web service is developed. We expect that when enough number of service processes that integrate Web services are accumulated in the framework, our feedback based framework will be a great help in designing a new service pro cess. In some sense, our feedback based framework enables the usage of previous knowledge of Web services integration.
We also have confirmed that semantic and ontology technologies are incorpo-rated well with the recommendation method described in this paper. That is, our method and conventional semantic based approach can be easily combined within our framework. A prototype system is developed and an advanced process modeling tool is designed. General domain experts, who are not familiar with designing a service process, will be able to design their own service process more easily by using the advanced process modeling tool.

In this paper, we have mostly focused on utilizing connection patterns in composing Web services at design time . We are currently extending our feedback based framework to support runtime coordination of Web services to effectively handle dynamic situations of Web services and to enable service processes to be more stable. In future, we are considering incorporating adaptive software technologies such as software probing, gauging and dynamic reconfiguration for the runtime support.

