 Although the Web is initially designed as a convenient way for information shar-ing and browsing, current technologies have evolved to turn the Web as an active arena of social activities. A number of interactive Web applications have been created for social communications, such as Web forums supporting white board, instant chat, and online game, besides traditional ways of reading and posting.
But, currently the Web is concentrating o n presenting content-centric infor-mation, but lacks cues and browsing mechanisms for the online social information [1]. For example, Web forums usually list all posters, but do not show who the participants are, what the purpose, tenor, and norms of the forum are; which sorts of newcomers are welcomed; how the most active participants contribute. However, in many cases it is exactly the social information that is most valu-able. The participants, especially newcomers, always want to have an overview communities flourishing.

We try to overcome the problem is by extracting social information from content-centric information and then publishing both of them through the Web. This strategy is practical because for most interactive Web applications the ma-jority of the content-centric information is stored centrally on the server side and well-structured in relational databases, which can be directly inputted to sociological analysis algorithms, such as social network analysis [2]. After ex-traction, we consider presentation with interactive 3D techniques for its better presentation based on text and images. Fu rthermore, interactive graphics oper-ations like zooming, panning and fish-eye provide a smooth and natural way of drilling the information space without losing.

Neither social analysis nor social information visualization is new. Many anal-ysis and visualization algorithms have been proposed during the past years ([1], any single analysis method or visual metaphor that is general for all kinds of social relationships embedded in all kinds of Web interactions. To address this problem, we proposed a framework (c.f. Figure 1) that support encapsulating var-ious analysis and visualization algorithms as software modules that are callable by new light-weight programming language VisMap , which turns complex Web application development into organizing an information processing pipeline of social information extraction, presentation, and browsing with dozens of code lines. We believe this framework features several innovative aspects:  X  VisMap avoids the situation in Web world where different part of a system are created with different tools by incorporating the abilities of database access, social informat ion extraction, analysis, and presentation.  X  A platform-independent tool for Web application development. VisMap is de-signed to be an interpretative language to avoid architectural dependencies.  X  Flexible choosing of analysis methods and visual metaphors. Analysis and visualization algorithms are encapsulated as external software modules called by VisMap programs. So the developers are free to choose components that matches characteristics of their application, but be shielded from details.  X  User interaction. VisMap supports an automatic GUI generation mechanism by mapping GUI variables defined in VisMap programs to GUI widgets.  X  Extensibility. The ability of VisMap to invoke external modules (with Vis-Module as a typical example), it is convenient to incorporate new analysis algorithms and visualization methods into the framework.  X  Performance. Because VisMap program interpreter runs on client side, the computation is naturally distributed. And with external modules imple-mented with compiled languages, performance of analysis and browsing can be guaranteed comparable to normal visual analysis applications. The work-load of database access is in the same le vel as traditional content-centric Web applications. The language of VisMap is designed for Web developers and maintainers to organize their choice of methods of mining and presenting social information. Except for its functionality, we try to design VisMap a simple language with learning curve as short as HTML and Javascript . In this section, we discuss the features of VisMap that makes it suitable and complete for the work.  X  Data type system. As a data manipulating language, elementary types of VisMap are compatible with SQL (ISO 9075-1987). And a special first-order elementary type, function handler ( fhandle ), is to support cal lback from external modules. Compound types of VisMap include tuple , enumeration and gui . tuple organizes fixed number of variables in different types as struct in C. An enumeration organizes arbitrary number (can be infinity) of variables as a dynamic array. An enumeration of tuples is usually used to represent a SQL query result. gui is a specialization of tuple with certain structure to describe nece ssary information (e.g., the possible choices of its value represented as an enumeration )tomapaGUIwidget.
  X  Embedded SQL. To drill database to extract social information, VisMap sup-ports embedded SQL, which can include VisMap variables directly as param-eters. Syntactically, embedded SQL programs are enclosed within double braces, and treated as a remote procedure call (RPC) to database server.  X  Automatic GUI generation. VisMap developers do not need a GUI designer, a GUI panel will be created at runtime, and all the defined gui -typed variables are mapped to automatically generate GUI widgets. An example is shown in Figure 2.  X  Function extension. TheVisMapisextensibletoi nteract with external mod-ules through synchronous function calling or asynchronous callback notifi-cation. A callback function defined in VisMap program can have its handle retrieved by an operator &amp; and then passed to an external module. Given the handle, external modules can call VisMap functions to notify certain kinds of events. and support certain behaviors. So, in order to make VisModules for VisMap, we have to abstract parameters defining the appearance and behavior of selected we discuss the commonality of various visual metaphors suitable for presentation of social information, and summarize the principles of parameter abstraction as visual scheme .

The key elements that makes up a society include: (1) Individuals, as the fundamental elements of any society, carrying both static features recorded in database and dynamic information retrieved by statistics; (2) Groups, as a thumbnail of a number of individuals with certain commonality; and (3) Re-primarily on three typical types of social relationship. (We use screen shots in following discussion from a real VisMap project that creates social information browsing interface for a real large scale Web forum[6].)  X  Relations between individuals. As the fundamental solid entities of societies, individuals and their relations can be intuitively visualized as a graph  X  with vertices corresponding to individuals and edges representing the relations. Figure 3(a) shows a VisMap program utilizing a VisModule that encapsulates the Path-finder network[7] to represent the co-threading relation between some users in the Web forum.  X  Relations between groups of individual. For Web forums, a discussion boards represent the group of users once posted on. Most Web forums categorize their discussion board and forms a parent -child relations between the groups. Figure 3(b) use TreeMap [8] VisModule to show such relationship.  X  Relations between individuals and groups. A typical relationship between individuals and groups is the contribution relation of users to discussion boards. As shown in Figure 3(c), a Cluster-Map[9] VisModule shows users (as balls) that once posted on one of the three discussion boards ( X  X NIX,  X  X inux X , and  X  X olaris X  as blue balls). Users are clustered as blobs by the posting relationship with boards.
Based on the three summarized key concep ts of social information  X  individ-ual, group, and relation, we define visual schemes for each VisModule as a set of three variables IndividualList , GroupList ,and RelationList in type of and then visualized as graphical elements by VisModules. For the three Vis-Modules demonstrated above, the placeholders TypeList are listed in Table 1. Based on analyzing and summarizing various Web interactions and visualization methods, we proposed and implemented an ease-to-use tool for Web application developers, maintainers, and even experienced users to develop social interface as interactive visual analysis programs. As a system aimed work, there are still some aspects worthy of more considerations,  X  Interact with Web browser. Currently, the VisModules are implemented as stand along C++ programs to ensure performance of graphics rendering and language interpretation. This makes it hard to interact with the Web browser. A possible solution is to re-implement VisModules as plugins of Web browsers, and to allocate a MIME type for the VisMap language.  X  X ecurity. To ensure security of the frame work, besides to incorporate VisMap interpreter into the security system of Web browser, we also need an authentication mechanism to ensure the harmlessness of VisMap extensions. A possible solution is digital signature that has been used for Java Applets and Microsoft ActiveX controls. The s ecurity requirement on the server side can be satisfied by relative mechanisms of database systems, e.g., open a publish account for real-only operations, as the port 80 opened for real-only WWW service.

