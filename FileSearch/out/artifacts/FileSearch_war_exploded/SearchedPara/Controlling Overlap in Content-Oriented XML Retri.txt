 The direct application of standard ranking techniques to retrieve individual elements from a collection of XML docu-ments often produces a result set in which the top ranks are dominated by a large number of elements taken from a small number of highly relevant documents. This paper presents and evaluates an algorithm that re-ranks this result set, with the aim of minimizing redundant content while preserving the benefits of element retrieval, including the benefit of identifying topic-focused components contained within rele-vant documents. The test collection developed by the INi-tiative for the Evaluation of XML Retrieval (INEX) forms the basis for the evaluation.
 H.3.3 [ Information Systems ]: Information Storage and Retrieval X  Information Search and Retrieval Algorithms, Measurement, Performance, Experimentation XML, Ranking, Information Retrieval
The representation of documents in XML provides an op-portunity for information retrieval systems to take advan-tage of document structure, returning individual document components when appropriate, rather than complete docu-ments in all circumstances. In response to a user query, an XML information retrieval system might return a mixture of paragraphs, sections, articles, bibliographic entries and other components. This facility is of particular benefit when a collection contains very long documents, such as product manuals or books, where the user should be directed to the most relevant portions of these documents.
 &lt;article&gt; &lt;/article&gt;
Figure 1 provides an example of a journal article encoded in XML, illustrating many of the important characteristics of XML documents. Tags indicate the beginning and end of each element, with elements varying widely in size, from one word to thousands of words. Some elements, such as para-graphs and sections, may be reasonably presented to the user as retrieval results, but others are not appropriate. Elements overlap each other  X  articles contain sections, sections con-tain subsections, and subsections contain paragraphs. Each of these characteristics affects the design of an XML IR sys-tem, and each leads to fundamental problems that must be solved in an successful system. Most of these fundamental problems can be solved through the careful adaptation of standard IR techniques, but the problems caused by overlap are unique to this area [4,11] and form the primary focus of this paper.

The article of figure 1 may be viewed as an XML tree, as illustrated in figure 2. Formally, a collection of XML documents may be represented as a forest of ordered, rooted trees, consisting of a set of nodes N and a set of directed edges E connecting these nodes. For each node x  X  X  ,the notation x. parent refers to the parent node of x ,ifoneexists, and the notation x. children refers to the set of child nodes of x . Since an element may be represented by the node at its root, the output of an XML IR system may be viewed as a ranked list of the top-m nodes.

The direct application of a standard relevance ranking technique to a set of XML elements can produce a result in which the top ranks are dominated by many structurally related elements. A high scoring section is likely to contain several high scoring paragraphs and to be contained in an high scoring article. For example, many of the elements in figure 2 would receive a high score on the keyword query  X  text index compression algorithms  X . If each of these elements are presented to a user as an individual and sepa-rate result, she may waste considerable time reviewing and rejecting redundant content.

One possible solution is to report only the highest scor-ing element along a given path in the tree, and to remove from the lower ranks any element containing it, or contained within it. Unfortunately, this approach destroys some of the possible benefits of XML IR. For example, an outer element may contain a substantial amount of information that does not appear in an inner element, but the inner element may be heavily focused on the query topic and provide a short overview of the key concepts. In such cases, it is reasonable to report elements which contain, or are contained in, higher ranking elements. Even when an entire book is relevant, a user may still wish to have the most important paragraphs highlighted, to guide her reading and to save time [6].
This paper presents a method for controlling overlap .Start-ing with an initial element ranking, a re-ranking algorithm adjusts the scores of lower ranking elements that contain, or are contained within, higher ranking elements, reflecting the fact that this information may now be redundant. For ex-ample, once an element representing a section appears in the ranking, the scores for the paragraphs it contains and the article that contains it are reduced. The inspiration for this strategy comes partially from recent work on structured doc-uments retrieval, where terms appearing in different fields, such as the title and body, are given different weights [20]. Extending that approach, the re-ranking algorithm varies weights dynamically as elements are processed.

The remainder of the paper is organized as follows: After a discussion of background work and evaluation methodol-ogy, a baseline retrieval method is presented in section 4. This baseline method represents a reasonable adaptation of standard IR technology to XML. Section 5 then outlines a strategy for controlling overlap, using the baseline method as a starting point. A re-ranking algorithm implementing this strategy is presented in section 6 and evaluated in section 7. Section 8 discusses an extended version of the algorithm.
This section provides a general overview of XML informa-tion retrieval and discusses related work, with an emphasis on the fundamental problems mentioned in the introduction. Much research in the area of XML retrieval views it from a traditional database perspective, being concerned with such problems as the implementation of structured query lan-guages [5] and the processing of joins [1]. Here, we take a  X  X ontent oriented X  IR perceptive, focusing on XML doc-uments that primarily contain natural language data and queries that are primarily expressed in natural language. We assume that these queries indicate only the nature of desired content, not its structure, and that the role of the IR system is to determine which elements best satisfy the underlying information need. Other IR research has con-sidered mixed queries, in which both content and structural requirements are specified [2,6,14,17,23].
In traditional information retrieval applications the stan-dard unit of retrieval is taken to be the  X  X ocument X . De-pending on the application, this term might be interpreted to encompass many different objects, including web pages, newspaper articles and email messages.

When applying standard relevance ranking techniques in the context of XML IR, a natural approach is to treat each element as a separate  X  X ocument X , with term statistics avail-able for each [16]. In addition, most ranking techniques require global statistics (e.g. inverse document frequency) computed over the collection as a whole. If we consider this collection to include all elements that might be returned by the system, a specific occurrence of a term may appear in several different  X  X ocuments X , perhaps in elements repre-senting a paragraph, a subsection, a section and an article. It is not appropriate to compute inverse document frequency under the assumption that the term is contained in all of these elements, since the number of elements that contain a term depends entirely on the structural arrangement of the documents [13,23].
While an XML IR system might potentially retrieve any element, many elements may not be appropriate as retrieval results. This is usually the case when elements contain very little text [10]. For example, a section title containing only the query terms may receive a high score from a ranking al-gorithm, but alone it would be of limited value to a user, who might prefer the actual section itself. Other elements may reflect the document X  X  physical, rather than logical, struc-ture, which may have little or no meaning to a user. An effective XML IR system must return only those elements that have sufficient content to be usable and are able to stand alone as independent objects [15,18]. Standard docu-ment components such as paragraphs, sections, subsections, and abstracts usually meet these requirements; titles, itali-cized phrases, and individual metadata fields often do not.
Over the past three years, the INitiative for the Evalua-tion of XML Retrieval (INEX) has encouraged research into XML information retrieval technology [7,8]. INEX is an ex-perimental conference series, similar to TREC, with groups from different institutions completing one or more experi-mental tasks using their own tools and systems, and com-paring their results at the conference itself. Over 50 groups participated in INEX 2004, and the conference has become as influential in the area of XML IR as TREC is in other IR areas. The research described in this paper, as well as much of the related work it cites, depends on the test collections developed by INEX.

Overlap causes considerable problems with retrieval evalu-ation, and the INEX organizers and participants have wres-tled with these problems since the beginning. While sub-stantial progress has been made, these problem are still not completely solved. Kazai et al. [11] provide a detailed ex-position of the overlap problem in the context of INEX re-trieval evaluation and discuss both current and proposed evaluation metrics. Many of these metrics are applied to evaluate the experiments reported in this paper, and they are briefly outlined in the next section.
Space limitations prevent the inclusion of more than a brief summary of INEX 2004 tasks and evaluation method-ology. For detailed information, the proceedings of the con-ference itself should be consulted [8].
For the main experimental tasks, INEX 2004 participants were provided with a collection of 12,107 articles taken from the IEEE Computer Societies magazines and journals be-tween 1995 and 2002. Each document is encoded in XML using a common DTD, with the document of figures 1 and 2 providing one example.

At INEX 2004, the two main experimental tasks were both adhoc retrieval tasks, investigating the performance of sys-tems searching a static collection using previously unseen topics. The two tasks differed in the types of topics they used. For one task, the  X  X ontent-only X  or CO task, the topics consist of short natural language statements with no direct reference to the structure of the documents in the col-lection. For this task, the IR system is required to select the elements to be returned. For the other task, the  X  X ontent-and-structure X  or CAS task, the topics are written in an XML query language [22] and contain explicit references to document structure, which the IR system must attempt to satisfy. Since the work described in this paper is directed at the content-only task, where the IR system receives no guidance regarding the elements to return, the CAS task is ignored in the remainder of our description.

In 2004, 40 new CO topics were selected by the conference organizers from contributions provided by the conference participants. Each topic includes a short keyword query, which is executed over the collection by each participating group on their own XML IR system. Each group could submit up to three experimental runs consisting of the top m = 1500 elements for each topic.
Since XML IR is concerned with locating those elements that provide complete coverage of a topic while containing as little extraneous information as possible, simple  X  X elevant X  vs.  X  X ot relevant X  judgments are not sufficient. Instead, the INEX organizers adopted two dimensions for relevance as-sessment: The exhaustivity dimension reflects the degree to which an element covers the topic, and the specificity dimen-sion reflects the degree to which an element is focused on the topic. A four-point scale is used in both dimensions. Thus, a (3,3) element is highly exhaustive and highly specific, a (1,3) element is marginally exhaustive and highly specific, and a (0,0) element is not relevant. Additional information on the assessment methodology may be found in Piwowarski and Lalmas [19], who provide a detailed rationale.
The principle evaluation metric used at INEX 2004 is a version of mean average precision (MAP), adjusted by vari-ous quantization functions to give different weights to differ-ent elements, depending on their exhaustivity and specificity values. One variant, the strict quantization function gives a weight of 1 to (3,3) elements and a weight of 0 to all others. This variant is essentially the familiar MAP value, with (3,3) elements treated as  X  X elevant X  and all other elements treated as  X  X ot relevant X . Other quantization functions are designed to give partial credit to elements which are  X  X ear misses X , due to a lack or exhaustivity and/or specificity. Both the generalized quantization function and the specificity-oriented generalization (sog) function credit elements  X  X ccording to their degree of relevance X  [11], with the second function plac-ing greater emphasis on specificity. This paper reports re-sults of this metric using all three of these quantization func-tions. Since this metric was first introduced at INEX 2002, it is generally referred as the  X  X nex-2002 X  metric.
The inex-2002 metric does not penalize overlap. In par-ticular, both the generalized and sog quantization functions give partial credit to a  X  X ear miss X  even when a (3,3) ele-ment overlapping it is reported at a higher rank. To address this problem, Kazai et al. [11] propose an XML cumulated gain metric, which compares the cumulated gain [9] of a ranked list to an ideal gain vector. This ideal gain vector is constructed from the relevance judgments by eliminat-ing overlap and retaining only best element along a given path. Thus, the XCG metric rewards retrieval runs that avoid overlap. While XCG was not used officially at INEX 2004, a version of it is likely to be used in the future.
At INEX 2003, yet another metric was introduced to ame-liorate the perceived limitations of the inex-2002 metric. This  X  X nex-2003 X  metric extends the definitions of precision and recall to consider both the size of reported components and the overlap between them. Two versions were created, one that considered only component size and another that considered both size and overlap. While the inex-2003 met-ric exhibits undesirable anomalies [11], and was not used in 2004, values are reported in the evaluation section to provide an additional instrument for investigating overlap.
This section provides an overview of baseline XML in-formation retrieval method currently used in the MultiText IR system, developed by the Information Retrieval Group at the University of Waterloo [3]. This retrieval method results from the adaptation and tuning of the Okapi BM25 mea-sure [21] to the XML information retrieval task. The Mul-tiText system performed respectably at INEX 2004, placing in the top ten under all of the quantization functions, and placing first when the quantization function emphasized ex-haustivity.

To support retrieval from XML and other structured doc-ument types, the system provides generalized queries of the form: where X is a sub-query specifying a set of document elements to be ranked and Y is a vector of sub-queries specifying individual retrieval terms.

For our INEX 2004 runs, the sub-query X specified a list of retrievable elements as those with tag names as follows: This list includes bibliographic entries ( bb ) and figure cap-tions ( fig ) as well as paragraphs, sections and subsections. Prior to INEX 2004, the INEX collection and the INEX 2003 relevance judgments were manually analyzed to select these tag names. Tag names were selected on the basis of their frequency in the collection, the average size of their associ-ated elements, and the relative number of positive relevance judgments they received. Automating this selection process is planned as future work.

For INEX 2004, the term vector Y was derived from the topic by splitting phrases into individual words, eliminating stopwords and negative terms (those starting with  X - X ), and applying a stemmer. For example, keyword field of topic 166 became the four-term query where the  X  $  X  operator within a quoted string stems the term that follows it.

Our implementation of Okapi BM25 is derived from the formula of Robertson et al. [21] by setting parameters k 2 and k 3 =  X  . Given a term set Q ,anelement x is assigned the score X where Figure 3: Impact of k 1 on inex-2002 mean average precision with b =0 . 75 (INEX 2003 CO topics).
 Prior to INEX 2004, the INEX 2003 topics and judgments were used to tune the b and k 1 parameters, and the impact of this tuning is discussed later in this section.
For the purposes of computing document-level statistics ( D , D t and l avg ) a document is defined to be an article . These statistics are used for ranking all element types. Fol-lowing the suggestion of Kamps et al. [10], the retrieval re-sults are filtered to eliminate very short elements, those less than 25 words in length.

The use of article statistics for all element types might be questioned. This approach may be justified by view-ing the collection as a set of articles to be searched using standard document-oriented techniques, where only articles may be returned. The score computed for an element is es-sentially the score it would receive if it were added to the collection as a new document, ignoring the minor adjust-ments needed to the document-level statistics. Nonetheless, we plan to examine this issue again in the future.
In our experience, the performance of BM25 typically ben-efits from tuning the b and k 1 parameters to the collec-tion, whenever training queries are available for this pur-pose. Prior to INEX 2004, we trained the MultiText system using the INEX 2003 queries. As a starting point we used the values b =0 . 75 and k 1 =1 . 2, which perform well on TREC adhoc collections and are used as default values in our system. The results were surprising. Figure 3 shows the result of varying k 1 with b =0 . 75 on the MAP values under three quantization functions. In our experience, optimal val-ues for k 1 are typically in the range 0.0 to 2.0. In this case, large values are required for good performance. Between k 1 =1 . 0and k 1 =6 . 0 MAP increases by over 15% under the strict quantization. Similar improvements are seen un-der the generalized and sog quantizations. In contrast, our default value of b =0 . 75 works well under all quantization functions (figure 4). After tuning over a wide range of val-ues under several quantization functions, we selected values of k =10 . 0and b =0 . 80 for our INEX 2004 experiments, and these values are used for the experiments reported in section 7. Figure 4: Impact of b on inex-2002 mean average precision with k 1 =10 (INEX 2003 CO topics).
Starting with an element ranking generated by the base-line method described in the previous section, elements are re-ranked to control overlap by iteratively adjusting the scores of those elements containing or contained in higher ranking elements. At a conceptual level, re-ranking proceeds as fol-lows: 1. Report the highest ranking element. 2. Adjust the scores of the unreported elements. 3. Repeat steps 1 and 2 until m elements are reported. One approach to adjusting the scores of unreported elements in step 2 might be based on the Okapi BM25 scores of the involved elements. For example, assume a paragraph with score p is reported in step 1. In step 2, the section con-taining the paragraph might then have its score s lowered by an amount  X   X  p to reflect the reduced contribution the paragraph should make to the section X  X  score.

In a related context, Robertson et al. [20] argue strongly against the linear combination of Okapi scores in this fash-ion. That work considers the problem of assigning different weights to different document fields, such as the title and body associated with Web pages. A common approach to this problem scores the title and body separately and gener-ates a final score as a linear combination of the two. Robert-son et al. discuss the theoretical flaws in this approach and demonstrate experimentally that it can actually harm re-trieval effectiveness. Instead, they apply the weights at the term frequency level, with an occurrence of a query term t in the title making a greater contribution to the score than an occurrence in the body. In equation 1, x t becomes  X  0  X  y t +  X  1  X  z t ,where y t is the number of times t occurs in the title and z t is the number of times t occurs in the body.
Translating this approach to our context, the contribu-tion of terms appearing in elements is dynamically reduced as they are reported. The next section presents and analy-sis a simple re-ranking algorithm that follows this strategy. The algorithm is evaluated experimentally in section 7. One limitation of the algorithm is that the contribution of terms appearing in reported elements is reduced by the same fac-tor regardless of the number of reported elements in which it appears. In section 8 the algorithm is extended to apply increasing weights, lowering the score, when a term appears in more than one reported element.
The re-ranking algorithm operates over XML trees, such as the one appearing in figure 2. Input to the algorithm is a list of n elements ranked according to their initial BM25 scores. During the initial ranking the XML tree is dynam-ically re-constructed to include only those nodes with non-zero BM25 scores, so n may be considerably less than |N| . Output from the algorithm is a list of the top m elements, ranked according to their adjusted scores.
 An element is represented by the node x  X  X  at its root. Associated with this node are fields storing the length of element, term frequencies, and other information required by the re-ranking algorithm, as follows: These fields are populated during the initial ranking process, and updated as the algorithm progresses. The vector x. f contains term frequency information corresponding to each term in the query. The vector x. g is initially zero and is updated by the algorithm as elements are reported.
The score field contains the current BM25 score for the element, which will change as the values in x. g change. The score is computed using equation 1, with the x t value for each term determined by a combination of the values in x. f and x. g . Given a term t  X  Q ,let f t be the component of x. f corresponding to t ,andlet g t be the component of x. g corresponding to t , then:
For processing by the re-ranking algorithm, nodes are stored in priority queues, ordered by decreasing score. Each priority queue PQ supports three operations: PQ. remove(x)  X  removes node x from the queue When implemented using standard data structures, the front operation requires O (1) time, and the other operations re-quire O (log n ) time, where n is the size of the queue.
The core of the re-ranking algorithm is presented in fig-ure 5. The algorithm takes as input the priority queue S containing the initial ranking, and produces the top-m re-ranked nodes in the priority queue F . After initializing F to be empty on line 1, the algorithm loops m times over lines 2-15, transferring at least one node from S to F during each iteration. At the start of each iteration, the unreported node at the front of S has the greatest adjusted score, and it is removed and added to F . The algorithm then traverses the Figure 5: Re-Ranking Algorithm  X  As input, the al-gorithm takes a priority queue S , containing XML nodes ranked by their initial scores, and returns its results in priority queue F , ranked by adjusted scores. Figure 6: Tree traversal routines called by the re-ranking algorithm. Figure 7: Impact of  X  on XCG and inex-2002 MAP (INEX 2004 CO topics; assessment set I). node X  X  ancestors (lines 8-10) and descendants (lines 12-14) adjusting the scores of these nodes.

The tree traversal routines, Up and Down are given in fig-ure 6. The Up routine removes each ancestor node from S , adjusts its term frequency values, recomputes its score, and adds it back into S . The adjustment of the term frequency values (line 3) adds to y. g only the previously unreported term occurrences in x . Re-computation of the score on line 4 uses equations 1 and 2. The Down routine performs a similar operation on each descendant. However, since the contents of each descendant are entirely contained in a reported el-ement its final score may be computed, and it is removed from S and added to F .

In order to determine the time complexity of the algo-rithm, first note that a node may be an argument to Down at most once. Thereafter, the reported flag of its parent is true . During each call to Down anodemaybemovedfrom S to F , requiring O (log n ) time. Thus, the total time for all calls to Down is O ( n log n ), and we may temporarily ignore lines 8-10 of figure 5 when considering the time complexity of the loop over lines 2-15. During each iteration of this loop, a node and each of its ancestors are removed from a priority queue and then added back into a priority queue. Since a node may have at most h ancestors, where h is the maximum height of any tree in the collection, each of the m iterations requires O ( h log n ) time. Combining these observations pro-duces an overall time complexity of O (( n + mh )log n ).
In practice, re-ranking an INEX result set requires less than 200ms on a three-year-old desktop PC.
None of the metrics described in section 3.3 is a close fit with the view of overlap advocated by this paper. Nonethe-less, when taken together they provide insight into the be-haviour of the re-ranking algorithm. The INEX evaluation packages ( inex_eval and inex_eval_ng )wereusedtocom-pute values for the inex-2002 and inex-2003 metrics. Values for the XCG metrics were computed using software supplied by its inventors [11].

Figure 7 plots the three variants of inex-2002 MAP metric together with the XCG metric. Values for these metrics Figure 8: Impact of  X  on inex-2003 MAP (INEX 2004 CO topics; assessment set I). are plotted for values of  X  between 0.0 and 1.0. Recalling that the XCG metric is designed to penalize overlap, while the inex-2002 metric ignores overlap, the conflict between the metrics is obvious. The MAP values at one extreme (  X  =0 . 0) and the XCG value at the other extreme (  X  = 1 . 0) represent retrieval performance comparable to the best systems at INEX 2004 [8,12].

Figure 8 plots values of the inex-2003 MAP metric for two quantizations, with and without consideration of overlap. Once again, conflict is apparent, with the influence of  X  substantially lessened when overlap is considered.
One limitation of the re-ranking algorithm is that a single weight  X  is used to adjust the scores of both the ancestors and descendants of reported elements. An obvious extension is to use different weights in these two cases. Furthermore, the same weight is used regardless of the number of times an element is contained in a reported element. For example, a paragraph may form part of a reported section and then form part of a reported article. Since the user may now have seen this paragraph twice, its score should be further lowered by increasing the value of the weight.

Motivated by these observations, the re-ranking algorithm may be extended with a series of weights where  X  j is the weight applied to a node that has been a descendant of a reported node j times. Note that an upper bound on M is h ,themaximumheightofanyXMLtree in the collection. However, in practice M is likely to be relatively small (perhaps 3 or 4).

Figure 9 presents replacements for the Up and Down rou-tines of figure 6, incorporating this series of weights. One extra field is required in each node, as follows: The value of x.j is initially set to zero in all nodes and is incremented each time Down is called with x as its argument. When computing the score of node, the value of x.j selects the weight to be applied to the node by adjusting the value of x t in equation 1, as follows: where f t and g t are the components of x. f and x. g corre-sponding to term t .
 A few additional changes are required to extend Up and Down .The Up routine returns immediately (line 2) if its argument has already been reported, since term frequencies have already been adjusted in its ancestors. The Down rou-tine does not report its argument, but instead recomputes its score and adds it back into S .

A node cannot be an argument to Down more than M +1 times, which in turn implies an overall time complexity of O (( nM + mh )log n ). Since M  X  h and m  X  n ,thetime complexity is also O ( nh log n ).
When generating retrieval results over an XML collection, some overlap in the results should be tolerated, and may be beneficial. For example, when a highly exhaustive and fairly specific (3,2) element contains a much smaller (2,3) element, both should be reported to the user, and retrieval algorithms and evaluation metrics should respect this relationship. The algorithm presented in this paper controls overlap by weight-ing the terms occurring in reported elements to reflect their reduced importance.

Other approaches may also help to control overlap. For example, when XML retrieval results are presented to users it may be desirable to cluster structurally related elements together, visually illustrating the relationships between them. While this style of user interface may help a user cope with overlap, the strategy presented in this paper continues to be applicable, by determining the best elements to include in each cluster.
At Waterloo, we continue to develop and test our ideas for INEX 2005. In particular, we are investigating methods for learning the  X  and  X  j weights. We are also re-evaluating our approach to document statistics and examining appro-priate adjustments to the k 1 parameter as term weights change [20].
Thanks to Gabriella Kazai and Arjen de Vries for provid-ing an early version of their software for computing the XCG metric, and thanks to Phil Tilker and Stefan B  X  uttcher for their help with the experimental evaluation. In part, fund-ing for this project was provided by IBM Canada through the National Institute for Software Research. [1] N. Bruno, N. Koudas, and D. Srivastava. Holistic twig [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Mass, [3] C. L. A. Clarke and P. L. Tilker. MultiText [4] A. P. de Vries, G. Kazai, and M. Lalmas. Tolerance to [5] D. DeHaan, D. Toman, M. P. Consens, and M. T. [6] N. Fuhr and K. Gro X johann. XIRQL: A query [7] N. Fuhr, M. Lalmas, and S. Malik, editors. Initiative [8] N. Fuhr, M. Lalmas, S. Malik, and Zolt  X  an Szl  X  avik, [9] K. J  X  avelin and J. Kek  X  al  X  ainen. Cumulated gain-based [10] J. Kamps, M. de Rijke, and B. Sigurbj  X  ornsson. Length [11] G. Kazai, M. Lalmas, and A. P. de Vries. The overlap [12] G. Kazai, M. Lalmas, and A. P. de Vries. Reliability [13] J. Kek  X  al  X  ainen, M. Junkkari, P. Arvola, and T. Aalto. [14] S. Liu, Q. Zou, and W. W. Chu. Configurable [15] Y. Mass and M. Mandelbrod. Retrieving the most [16] Y. Mass and M. Mandelbrod. Component ranking and [17] P. Ogilvie and J. Callan. Hierarchical language models [18] J. Pehcevski, J. A. Thom, and A. Vercoustre. Hybrid [19] B. Piwowarski and M. Lalmas. Providing consistent [20] S. Robertson, H. Zaragoza, and M. Taylor. Simple [21] S. E. Robertson, S. Walker, and M. Beaulieu. Okapi at [22] A. Trotman and B. Sigurbj  X  ornsson. NEXI, now and [23] J. Vittaut, B. Piwowarski, and P. Gallinari. An
