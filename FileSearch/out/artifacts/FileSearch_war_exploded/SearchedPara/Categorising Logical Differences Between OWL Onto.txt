 The analysis of changes between OWL ontologies (in the form of a diff ) is an important service for ontology engineering. A purely syntactic analysis of changes is insufficient to distinguish between changes that have logical impact and those that do not. The cur-rent state of the art in semantic diffing ignores logically ineffectual changes and lacks any further characterisation of even significant changes. We present a diff method based on an exhaustive cate-gorisation of effectual and ineffectual changes between ontologies. In order to verify the applicability of our approach we apply it to 88 versions of the National Cancer Institute (NCI) Thesaurus (NCIt), and demonstrate that all categories are realized throughout the cor-pus. Based on the outcome of the NCIt study we argue that the devised categorisation of changes is helpful for ontology engineers and their understanding of changes carried out between ontologies. I.2 [ Artificial Intelligence ]: Knowledge Representation Formalisms and Methods Theory, Experimentation
The comparison of ontologies is a valuable service whether used as a subroutine in a version control system or to support users in understanding changes. Different diff methods vary in their sensi-tivity to changes: e.g., a diff method based on character differences will find that two notationally distinct serializations of the same ontology are radically different. If a diff method is too sensitive to irrelevant changes then the user will be faced with determining which reported changes are actually significant. On the other hand, a hard requirement is that the diff method does not miss any change of significance.

The OWL 2 specification [8] defines a high level notion of syn-tactic equivalence, so-called  X  X tructural equivalence X  (and thus the associated notion of structural difference ), which abstracts from certain neglectable changes such as the order of axioms or concrete syntax. A different syntactic approach is that of an edit-based diff, wherein change records are produced within the ontology editor being used, thereby capturing the history and intent of change, as implemented in Swoop [6]. The diffs mentioned so far, as well as PROMPTDIFF [9], do not perform any further characterisa-tion of reported changes (e.g., whether these have logical impact). This forces the user to analyse each change in the diff, and de-termine whether it affects the set of entailments of an ontology; thus whether the change is logically effectual . When analysing a set of changes it would be useful to not only distinguish between those logically effectual and ineffectual ones, but also to charac-terise reported changes according to their impact. Certain classes of ineffectual changes are neglectable, e.g., order of conjuncts in an axiom. However other ineffectual changes provide useful insights, such as the introduction of redudant or rewritten axioms. Semantic diffs, such as CEX [7] or ContentCVS [4], regard all ineffectual changes as neglectable, though in general knowing the relative pro-portions of effectual and meaningful ineffectual changes gives us a better understanding of what has changed between ontologies. For example, if most changes are meaningfully ineffectual it might be a sign of wasted effort, and therefore it would be useful to know if and why this happens. Contrariwise, while those changes might be logically ineffectual, other tools might be sensitive to the variant syntactic forms. So on the one hand, syntactic diffs report without distinction both effectual and ineffectual changes, and on the other hand semantic diffs do not present ineffectual changes.

A major problem with the output of change sets is that the user is given a (possibly large) set of axioms (or terms) to analyse, with no indication as to what kind of change each of them represents. A reasonable presentation of changes will cluster changes accord-ing to relevant properties. In this paper we propose a diff method, which we refer to as intentional difference , incorporating a cate-gorisation of changes. Our categorisation attempts to capture the impact of each change (e.g., whether it is a rewrite of another ax-iom). Aside from the intuitive appeal of categorised changes, these rectify a problem with existing diffs: the lack of source axioms. Thus users can see what was changed as well as the actual change.
For the purpose of verifying the suitability of our approach, we collected 88 versions of the National Cancer Institute (NCI) The-saurus (NCIt) available in OWL, and conducted a diachronic study of the corpus. This study aimed at showing the computational fea-sibility of our approach and confirming that the devised categories are realized throughout the corpus. Additionally we investigate whether the proposed method helps us understand the evolution of the NCIt. Moreover we demonstrate how the devised categorisation can support change analysis by users.
We assume the reader to be reasonably familiar with ontologies and OWL, as well as the underlying description logics (DLs) [3], though detailed knowledge is not required. We do use the notion of entailment [2], which is identical to the standard first order logic entailment (an axiom  X  entailed by an ontology O is denoted O | =  X  ). A justification J of a consequence  X  is a minimal subset of an ontology O that is sufficient for  X  to hold [5]. The signatures of an axiom  X  and an ontology O are denoted e  X  and e O , respectively. We also use the notion of a locality-based module [1], and denote a  X  -module extracted from an ontology O for a set of terms (signature)  X  as  X  -mod ( X  , O ) .
The problem of computing the difference between pairs of on-tologies has been approached both syntactically and semantically. We distinguish two major aspects of ontology diffing: (i) the detec-tion of changes, and (ii) the presentation of changes to the user. We note that most effort has been largely dedicated to (i) . It is often the case that the output (ii) of diff operations is the set of axioms or terms in the diff. While this may reflect the desired detection of change, it does not necessarily convey sufficient information to the user w.r.t. the impact of changes.
Within the detection of changes (i) , one would expect a prelim-inary distinction of axioms in the diff according to their logical effectuality. As such, a purely syntactic change analysis does not suffice to achieve this. Standard semantic diff tools treat all inef-fectual changes as neglectable. This goes too far, for example: con-sider the case where two ontologies differ in a substantial number of axioms, but the axioms in the diff are only equivalences rewrit-ten into subsumptions. Semantic diffs would point out that there are no differences, which may seem counter-intuitive to the user since a shallow inspection of the ontologies would reveal a discrepancy in number of axioms. In this case the ineffectual changes point to possibly unnecessary work. Though if these were intentional, then other developers should be aware of it rather than rewriting the ax-ioms once again. So for this kind of change we would expect a more granular analysis to be helpful.

The second fundamental aspect of any diff is the presentation of changes to the user (ii) . Currently ontology diffs return as the output an unstructured, uncharacterised set of changes. As a con-sequence the task of change analysis is not particularly appeal-ing. Consider the fact that the average diff size across the NCIt corpus is over 6,000 changes; relying on current diff methods for change analysis would be frightening, to say the least. At this point it would be useful to determine further properties of individual changes which might help the user understand changes. A change could relate to, e.g, a newly introduced term, or an adjustment to the class hierarchy. Whatever it may be, the current state-of-the-art in ontology diffing does not carry out such a characterisation of changes.

In terms of computability, one would expect an ontology diff to be efficiently computable for OWL 2 ontologies. 2 CEX [7], e.g., computes differences efficiently only for a fragment of OWL.
In Table 1 we summarise such useful features of an ontology diff, and whether existing approaches exhibit such desiderata. These http://krizik.felk.cvut.cz/km/owldiff/
Based on DLs up to SROIQ [3].
Specifically acyclic EL -terminologies [7]. properties motivate the diff method proposed in this paper, and our categorisation of changes according to their impact.
Given the limitations of diff approaches described in Table 1, we address in this paper the problem of categorising changes between ontologies. We start with structural difference as it abstracts from some obviously pointless changes, and is part of the OWL W3C standard. The notion of structural difference is based on OWL X  X  notion of structural equivalence (denoted  X  [8], and rules out differences that an otherwise syntactic equality based diff would detect, such as the concrete syntax of ontologies, the order of axioms or the order of disjuncts and conjuncts in an axiom. Furthermore we would like to distinguish between (a) axioms that do not alter the set of entailments between ontologies (ineffectual), and (b) those axioms that do (effectual). Structural difference does not realize this, and so we build on this notion with an effectuality test. The latter involves checking if changes in the first ontology are entailed by the second (and vice-versa). Finally, we devise a categorisation mechanism of these changes, in order to characterise their purported impact. Let us begin by defining how the change sets are obtained: structural difference between O 1 and O 2 are the following sets:
So if there is an axiom  X  s.t.  X   X  Adds( O 1 , O 2 ) , this implies that  X   X  O 2 \ O 1 , and analogously for Rems( O 1 , O itively Adds( O 1 , O 2 ) represent additions from O 1 to O Rems( O 1 , O 2 ) the removals. Based on these two sets, next, we distinguish between axioms in Adds( O 1 , O 2 ) (or Rems( O that affect the set of entailments of O 1 (or O 2 ). In other words, we distinguish between those axioms in the structural difference which are entailed by O 1 (or O 2 ), as follows: D EFINITION 2. The effectual and ineffectual changes between O 1 and O 2 are the following sets:
The resulting sets of ineffectual additions IneffAdds( O 1 and removals IneffRems( O 1 , O 2 ) are composed of those axioms which do not change the set of entailments of O 1 were added or deleted, respectively. The effectual additions and re-movals, EffAdds( O 1 , O 2 ) and EffRems( O 1 , O 2 ) , represent those axioms that have logical impact from O 1 to O 2 (and vice-versa).
While semantics diffs would consider all ineffectual changes as irrelevant, we here attempt to characterise meaningful ineffectual changes in order to get a sense of how relevant these are. For that purpose, we devise a categorisation of such axioms based on the reasons for the lack of impact, i.e. justifications. Note that this categorisation is not a partitioning of the set of ineffectual changes. An axiom  X   X  IneffRems( O 1 , O 2 ) is: For axioms  X   X  IneffAdds( O 1 , O 2 ) , replace  X  , Adds( O EffAdds( O 1 , O 2 ) and IneffAdds( O 1 , O 2 ) with  X  , Rems( O 1 , O 2 ) , EffRems( O 1 , O 2 ) and IneffRems( O respectively. In IneffAdds( O 1 , O 2 ) the label for the criteria of Strengthened axioms changes to Weakened axioms.

The term  X  X voided redundancy X  is used in the sense that, given a removed avoided redundancy  X   X  O 1 , it would have been a re-dundancy in O 2 if not removed. The ineffectual axiom categorisa-tion returns possibly overlapping sets of axioms, as demonstrated in Section 3.3. Also we note that these categories are exhaustive, in such a way that for any axiom we have that it implies at least one of the defined categories. Consider an axiom  X  and ontologies O and O 2 , with  X   X  O 1 but  X  /  X  O 2 , and O 2 | =  X  . Then there must be a justification J  X  O 2 for  X  . If we have that J  X  ( O  X  IneffAdds( O 1 , O 2 ) , then  X  is redundant, otherwise if we have that J  X  EffAdds( O 1 , O 2 ) 6 =  X  , then  X  is strengthened.
The effectual changes are categorised according to the following definition: An axiom  X   X  EffAdds( O 1 , O 2 ) is categorised as follows:
Strgth( O 1 , O 2 ) represents strengthenings from O 1 to O PAdd( O 1 , O 2 ) pure additions, and NewDesc( O 1 , O descriptions. Categories ending in  X  NT  X  represent axioms that use new terms. For axioms  X   X  EffRems( O 1 , O 2 ) replace  X  , O and Rems( O 1 , O 2 ) with  X  , O 2 , and Adds( O 1 , O 2 ) , accordingly. We denote effectual removals as Weakng( O 1 , O 2 ) for weakenings and RetDesc( O 1 , O 2 ) for retired descriptions, while categories involving axioms with retired terms are followed by RT (e.g., PRemRT( O 1 , O 2 ) represents pure removals with retired terms).
Observe that the categories encompass two dimensions of changes; those changes involving new (or retired) terms, and changes involving shared terms between both ontologies (i.e. terms in e O 1  X  e O 2 ). This duality of categories depending on the signature of axioms is illustrated in Table 2. We can see that there cannot be a strengthening which involves retired terms, or analogously a weakening involving new terms. Similarly new or retired descriptions are based on new or retired terms, accordingly. Axiom terms Shared terms New terms Retired terms Strengthening X X N/A Weakening X N/A X Pure change X X X New Description N/A X N/A
Retired Description N/A N/A X
In order to demonstrate the usefulness of the devised categories, let us compare ontologies O 1 and O 2 , defined in Table 3.  X  1 : A v C  X  1 : A v B t C  X  9 : F v G u I  X  2 : B v C  X  2 : A v B  X  10 : K v X  r.F  X  3 : E  X  D  X  3 : B v C  X  11 : D v F u X  s.A  X  4 : D v F  X  4 : E v D  X  12 : D v F u X  p. &gt;  X  5 : F v G  X  5 : D v E  X  13 : B v K  X  6 : G v H u X  s.H  X  6 : E v B t X  r.C  X  7 : F v I  X  7 : D v E t G  X  8 : F v G u I u J  X  8 : G v X  s.H u H From O 1 and O 2 we have the following structural differences:
Note that  X  6 is not syntactically equal to  X  8 (  X  6 6 =  X  they are structurally equivalent (  X  6  X  s  X  8 ). Therefore these axioms are not reported as changes. Given the sets of structural additions and removals from O 1 to O 2 we have that:
There are several ineffectual changes in the change set, while ef-fectual changes are mostly additions (and a single removal). The changes are categorised as shown in Table 4, where ineffectual cat-egories are labeled with (I).

Let us consider two ineffectual additions;  X  9 is a rewrite of {  X  7 , X  5 } , as well as an avoided redundancy (i.e., had it been added to O 1 it would be redundant). The axiom is also weakened, due to  X  . This may seem like an unintentional change, since now we face a loss of information regarding J , which is no longer mentioned in O . Such a change may be worth revising. The axiom  X  1 is redun-dant, since we have from O 1 that A v C , which is also entailed from O 2 . Therefore the user can dispose of this axiom.
Bear in mind that the existence of a rewritten axiom from O O 2 does not imply that the same holds in the opposite direction. This is applicable to all categories. Also we can have that an axiom is in more than one category. Consider axiom  X  1 ; a justification J for  X  1 is J 1 = {  X  2 , X  3 } , which indicates a strengthening (since we have that  X  2  X  EffAdds( O 1 , O 2 ) ), as well as a redundancy (  X  3  X  X  1  X  X  2 ). Another justification J 2 = {  X  1 , X  3 } indicates a redundancy;  X  1  X  IneffAdds( O 1 , O 2 ) .

In terms of effectual changes there is only one removal, and six additions. The effectual removal (  X  8 ) represents a weakening of  X  with retired terms ( J is not mentioned in O 2 ). In the analysis of the ineffectual changes it was already noted that axiom  X  be revised. The pure additions appear to be adjustments to the class hierarchy, some associated with new terms in O 2 . Both axioms  X  and  X  12 are strengthenings of  X  4 , which suggests that they could be merged, especially since there is intra-axiom redundancy. Finally there is a new term K in O 2 being described via axiom  X  10
Generally speaking, with such a categorisation it becomes con-ceivably more intuitive to navigate and understand sets of changes. In addition to this, we gathered from the analysis of ineffectual changes useful information about the changes between O 1 and O e.g., that axiom  X  4 is strenthened in two distinct, yet partially su-perfluous axioms (  X  11 and  X  12 ). Similarly we discover that axiom  X  is weakened, from  X  8 , which should be reconsidered as we now have that O 2 2 F v J ( J becoming a retired term).
In order to evaluate our approach to ontology diffing, we carried out a study of the NCIt corpus. We extracted all pairwise, consec-utive diffs between NCIt versions, and show that all categories are instantiated throughout the corpus.

The NCIt archive 4 contains 88 versions of the ontology in OWL format, freely downloadable from the web. Two of these ver-sions were unparsable (releases 05.03F and 05.04d) with the OWL API, 5 and consequently Prot X g X . 6 The experiment machine is an Intel Xeon Quad-Core 3.20GHz, with 12Gb DDR3 RAM dedi-cated to the Java Virtual Machine (JVM v1.5). The system runs Mac OS X 10.6.7, and all tests were run using the OWL API (v3.1). All gathered test data is available from http://owl. cs.manchester.ac.uk/ncit , a part of it is published on Google Public Data Explorer, 7 and can be visualised at http: //bit.ly/leZ6fM . http://evs.nci.nih.gov/ftp1/NCI_Thesaurus http://owlapi.sourceforge.net/ http://protege.stanford.edu/ http://www.google.com/publicdata/home , O i +1 ), for 1  X  i  X  86 .

The logical difference throughout the NCIt time-line consists of an average of 87% effectual changes, while the remaining are inef-fectual (see Figures 1 and 2 and Table 5). There are, however, cases where the number of effectual and ineffectual changes is more bal-anced, such as O 24 with 48% effectual changes, or O 29 and O with 52% effectual changes out of all changes. Note that in O and O 16 the number of effectual changes is (unusually) well above the number of ineffectual changes. In these two NCIt versions there is an annotation property and a data property both named  X  X ode X , which in the version of the OWL API used results in the parsing of only data property assertions. 8
Throughout the NCIt study we have excluded a class of ineffec-tual changes: changes to annotations. Since there are ontologies whose major focus is the annotations, as the NCIt, these represent a topic of study in themselves. E.g., in the NCIt the average pro-portion of axiomatic changes throughout the corpus is 15%, while the remaining are annotation changes. But for the purposes of this paper we focus on axiom changes only.
Throughout the corpus there is a high number of ineffectual re-movals, reaching values of 93% in O 29 or 97% in O 16 , and with an average of 35% of all removals (see Figure 1). Out of these inef-fectual removals 92% turned out to be strengthened axioms, which indicates a continuous refining of information throughout the cor-pus. E.g. O 27 has 3,104 strengthened axioms out of 3,843 re-movals. There is a high number of removed redundancies as well, constituting 49% of ineffectual removals. This tells us that there is some pruning of redundant information going on in the corpus. Taking into account that only 23% of these removed redundancies are avoided redundancies, we see that there is some redundancy removal throughout. On average 5% of additions are ineffectual (see Figure 2), yet there are some high values such as 61% in O In turn, this lead to a mass-generation of individuals.
 Among these, 73% are added redundancies, and 82% are weakened axioms. The latter occur typically due to adjustments in the class hierarchy. Despite being a high percentage, the number of ineffec-tual additions is generally low (see Table 5).

We also identified a number of rewrites in the corpus. Partic-ularly in O 33 , there are 227 rewritten axioms. Upon inspecting the rewritten axioms, we noticed that these changes are not only syntactic but also trivial and easily detected. While ideally the un-derlying structural diff would not include these, at least with our categorisation and alignment with source axioms, it is easy to spot and recognize the triviality. In this version we also see a number of redundancies above average, with 202 removed redundancies and 157 added. Clearly certain ineffectual changes are in fact  X  X efactor-ings X , albeit in the case of strengthened and weakened axioms the refactoring would have to be of a set of axioms rather than a sin-gle axiom. Thus a strengthened axiom does not necessarily mean strengthening of the ontology since the change might either intro-duce a redundancy or redistribute information from other axioms. Consider an ontology O 1 = {  X  1 : A v B, X  2 : A v C } , and a change of  X  1 into A v B u C . The axiom  X  1 was strengthened, but the resulting ontology O 2 = {  X  1 : A v B u C, X  2 : A v C } was not. However, if we change  X  2  X  X  2 into A v C u D , then we can say both the axiom  X  2 and the ontology O 2 are strengthened.
We noted a somewhat high number of added redundancies in the corpus, with more incidence up until O 8 (average of 166 added re-dundancies per comparison). However there are some outliars in the rest of the corpus, such as O 35 with 174 added redundant ax-ioms. The highest value found is in O 17 , where 482 redundant ax-ioms were added. Upon investigating these axioms, we found that such added redundancies are, in many cases, entailments from pre-vious versions. These entailments are those derived from the tran-sitivity of the subclass relationship, but are not atomic subsump-tions e.g. O 1 = {  X  1 : A v  X  r.B, X  2 : C v A } , O 2 = {  X   X  , X  3 : C v  X  r.B } . From the example we see that  X  3 is redun-dant; C v A suffices for C v X  r.B to hold, yet entailments of this form constitute the majority of added redundancies.
In cases where the number of ineffectual changes is quite high (e.g., O 24 where 52% of changes are ineffectual, O 27 , O O 30 with 48% each) note that semantic diffs would significantly understate the amount of activity performed. While structural diff captures this, it does not analyse the logical impact of such changes.
We see in Figures 1 and 2 that the number of effectual changes is typically higher than the number of ineffectual changes. There are more additions than removals throughout the corpus, with an average of 60% additions versus 40% removals, which is hardly surprising for a constantly evolving ontology. Among the cate-gories of effectual changes we discovered that the majority of these are new and retired descriptions. In terms of effectual additions the average of new descriptions is 60%, while retired descriptions average 51% of effectual removals. The highest values of new de-scriptions are in O 14 (40,417), O 16 (43,522) and O 6 (18,912). This high number of new descriptions is unsurprising, as the terminol-ogy keeps increasing. We see in O 15 and O 6 high values of retired descriptions, with 39,584 in O 15 and 11,835 in O 6 . This does not prove that such concepts were deleted, it could instead suggest a high number of concept renamings. Bear in mind that the number of changes in O 14 , O 16 , and adjacent versions is distorted by the parsing anomaly discussed in Section 4.1.

Strengthenings average around 4% of all additions, indicating refinements of concepts with additional constraints. There are cases where the number of strengthenings is high, such as O 27 which has 142 with new terms and 1065 without. Also in O 29 there are 102 strengthenings with new terms, and 891 without. It is natural that upon introducing new terms, others need to be re-described, thus explaining the strenghtenings with new terms.

Pure additions account for 37% of all additions, divided between 24% of additions with new terms and 13% without. The highest number of pure additions with new terms is in O 25 , with 11,746 axioms. This version also contains the most pure removals with retired terms, amounting to 10,645 axioms. With respect to pure additions with shared terms O 80 contains the most, amounting to 4,489 axioms. Coincidently this same same version also has the highest number of pure removals with shared terms, with a total of 4,583 such axioms. Typically pure changes with shared terms sug-gest adjustments to the class hierarchy, while pure additions involv-ing new terms point to the insertion of said terms and subsequent re-adjustment of the hierarchy accordingly.

The average of pure removals throughout the corpus is 47%, split between 23% with retired terms and 24% without. There are not as many weakenings in the corpus as there are strengthenings. This tells us that typically there is not much reduction of information from version to version. The average of weakenings (with or with-out retired terms) throughout is below 2% of all removals, with the highest value being 69% (739) in O 24 . The next version, O tains the highest number of weakenings with retired terms (508).
Table 5 demonstrates that all effectual categories are instantiated in the NCIt corpus. For instance the diff between versions O O 33 contains axioms in nearly all categories, with the exception of weakenings with retired terms.
The diachronic study of the NCIt revealed that all the categories of changes occur throughout the corpus, providing indications as to the impact of changes. We showed that such categorisation of change sets is useful for change analysis, with particular benefits for division of labour by ontology engineers. By means of this categorisation we can group changes according to their impact, al-lowing users to shift their attention to specific types of changes, rather than going through a change set while inspecting both on-tologies. With our correspondence of changes between ontologies we can show the changed axioms and what they are a change of. Consequently, by analysing changes in this way there is no need for constantly having to inspect ontologies manually. As such, we can support users in understanding the impact of their changes (or lack thereof), and refine these before publishing newer versions.
We found that ineffectual changes account for a significant amount of changes throughout the NCIt. Despite the fact that se-mantic diffs ignore these changes in their output, we show that they provide helpful modelling insights, and thus are worth examining. For instance we discovered a high number of redundant axioms in the NCIt, some of which could be disposed of. Also we found a number of structurally distinct ineffectual changes that are clearly neglectable: the rewrites in the NCIt. These indicate the need for improvement of the underlying diff. In general the inspection of ineffectual changes is helpful to prevent, e.g., re-doing work or introducing redundancy. Relying on semantic diffs one would be missing out on these meaningful ineffectual changes, which in turn could help users recognize the impact of certain types of change. The next step in our study is to evaluate the diff tool with users. In particular we expect to confirm that the categorisation helps users in understanding changes between ontologies. In terms of further analysis of the NCIt corpus we intend to inspect the history of axioms, as in checking the progress of each axiom throughout the corpus since it was introduced (e.g., changes in constructors or strengthenings that the axiom went through). Another future sur-vey involves checking for patterns of change throughout the corpus, e.g., if all strengthenings exhibit a common form. [1] B. Cuenca Grau, I. Horrocks, Y. Kazakov, and U. Sattler. [2] B. Cuenca Grau, I. Horrocks, B. Motik, B. Parsia, [3] I. Horrocks, O. Kutz, and U. Sattler. The even more [4] E. Jim X nez-Ruiz, B. Cuenca Grau, I. Horrocks, and [5] A. Kalyanpur, B. Parsia, M. Horridge, and E. Sirin. Finding [6] A. Kalyanpur, B. Parsia, E. Sirin, B. Cuenca Grau, and [7] B. Konev, D. Walther, and F. Wolter. The logical difference [8] B. Motik, P. Patel-Schneider, and B. Parsia. OWL 2 Web [9] N. F. Noy and M. A. Musen. PROMPTDIFF: A fixed-point
