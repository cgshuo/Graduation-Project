 Prepositions and conjunctions are two large remain-ing bottlenecks in parsing. Across various exist-ing parsers, these two categories have the lowest accuracies, and mistakes made on these have con-sequences for downstream applications. Machine translation is sensitive to parsing errors involving prepositions and conjunctions, because in some lan-guages different attachment decisions in the parse of the source language sentence produce differ-ent translations. Preposition attachment mistakes are particularly bad when translating into Japanese (Schwartz et al., 2003) which uses a different post-position for different attachments; conjunction mis-takes can cause word ordering mistakes when trans-lating into Chinese (Huang, 1983).

Prepositions and conjunctions are often assumed to depend on lexical dependencies for correct resolu-tion (Jurafsky and Martin, 2008). However, lexical statistics based on the training set only are typically sparse and have only a small effect on overall pars-ing performance (Gildea, 2001). Unlabeled data can help ameliorate this sparsity problem. Backing off to cluster membership features (Koo et al., 2008) or by using association statistics from a larger corpus, such as the web (Bansal and Klein, 2011; Zhou et al., 2011), have both improved parsing.

Unlabeled data has been shown to improve the ac-curacy of conjunctions within complex noun phrases (Pitler et al., 2010; Bergsma et al., 2011). How-ever, it has so far been less effective within full parsing  X  while first-order web-scale counts notice-ably improved overall parsing in Bansal and Klein (2011), the accuracy on conjunctions actually de-creased when the web-scale features were added (Table 4 in that paper).

In this paper we show that unlabeled data can help prepositions and conjunctions, provided that the de-pendency representation is compatible with how the parsing problem is decomposed for learning and in-ference . By incorporating unlabeled data into factor-izations which capture the relevant dependencies for prepositions and conjunctions, we produce a parser for English which has an unlabeled attachment ac-curacy of 93.5%, over an 18% reduction in error over the best previously published parser (Bansal and Klein, 2011) on the current standard for depen-dency parsing. The best model for conjunctions at-taches them with 90.8% accuracy (42.5% reduction in error over MSTParser), and the best model for prepositions with 87.4% accuracy (18.2% reduction in error over MSTParser).

We describe the dependency representations of prepositions and conjunctions in Section 2. We dis-cuss the implications of these representations for how learning and inference for parsing are decom-posed (Section 3) and how unlabeled data may be used (Section 4). We then present experiments ex-ploring the connection between representation, fac-torization, and unlabeled data in Sections 5 and 6. A dependency tree is a rooted, directed tree (or ar-borescence), in which the vertices are the words in the sentence plus an artificial root node, and each edge ( h, m ) represents a directed dependency rela-tion from the head h to the modifier m . Through-out this section, we will use Y to denote a particular parse tree, and ( h, m )  X  Y to denote a particular edge in Y .

The Wall Street Journal Penn Treebank (PTB) (Marcus et al., 1993) contains parsed constituency trees (where each sentence is represented as a context-free-grammar derivation). Dependency parsing requires a conversion from these con-stituency trees to dependency trees. The Tree-bank constituency trees left noun phrases (NPs) flat, although there have been subsequent projects which annotate the internal structure of noun phrases (Vadas and Curran, 2007; Weischedel et al., 2011). The presence or absence of these noun phrase in-ternal annotations interacts with constituency-to-dependency conversion program in ways which have effects on conjunctions and prepositions.

We consider two such mapping regimes here: 1. PTB trees  X  Penn2Malt 1  X  Dependencies 2. PTB trees patched with NP-internal annota-
Regime (1) is very commonly done in papers which report dependency parsing experiments (e.g., (McDonald and Pereira, 2006; Nivre et al., 2007; Zhang and Clark, 2008; Huang and Sagae, 2010; Koo and Collins, 2010)). Penn2Malt uses the head finding table from Yamada and Matsumoto (2003).
Regime (2) is based on the recommendations of the two converter tools; as of the date of this writing, the Penn2Malt website says:  X  X enn2Malt has been superseded by the more sophisticated pennconverter, which we strongly recommend X . The pennconverter website  X  X trongly recommends X  patching the Tree-bank with the NP annotations of Vadas and Curran (2007). A version of pennconverter was used to pre-pare the data for the CoNLL Shared Tasks of 2007-2009, so the trees produced by Regime 2 are similar (but not identical) 3 to these shared tasks. As far as we are aware, Bansal and Klein (2011) is the only published work which uses both steps in Regime (2). The dependency representations produced by Regime 2 are designed to be more useful for ex-tracting semantics (Johansson and Nugues, 2007). The parsing attachment accuracy of MALTPARSER (Nivre et al., 2007) was lower using pennconverter than Penn2Malt , but using the output of MALT-PARSER under the new format parses produces a much better semantic role labeler than using its out-put with Penn2Malt (Johansson and Nugues, 2007).
Figures 1 and 2 show how conjunctions and prepositions, respectively, are represented after the two different conversion processes. These differ-ences are not rare  X 70.7% of conjunctions and 5.2% of prepositions in the development set have a differ-ent parent under the two conversion types. These representational differences have serious implica-tions for how well various factorizations will be able to capture these two phenomena. Parsing requires a) learning to score potential parse trees, and b) given a particular scoring function, finding the highest scoring tree according to that function. The number of potential trees for a sen-tence is exponential, so parsing is made tractable by decomposing the problem into a set of local sub-structures which can be combined using dynamic programming. Four possible factorizations are: sin-gle edges (edge-based), pairs of edges which share a parent (siblings), pairs of edges where the child of one is the parent of the other (grandparents), and triples of edges where the child of one is the parent of two others (grandparent+sibling). In this section, we discuss these factorizations and their relevance to conjunction and preposition representations. 3.1 Edge-based Scoring One possible factorization corresponds to first-order parsing, in which the score of a parse tree Y decom-poses completely across the edges in the tree:
Conjunctions : Under Conversion 1, we can see three different representations of conjunctions in Figures 1(a), 1(c), and 1(e). Under edge-based scor-ing, the conjunction would be scored along with nei-ther of its conjuncts in 1(a). In Figure 1(c), the con-junction is scored along with its right conjunct only; in figure 1(e) along with its left conjunct only. The inconsistency here is likely to make learning more difficult, as what is learned is split across these three cases. Furthermore, the conjunction is connected with an edge to either zero or one of its two argu-ments; at least one of the arguments is completely ignored in terms of scoring the conjunction.
In Figures 1(c) and 1(e), the words being con-joined are connected to each other by an edge. This overloads the meaning of an edge; an edge indicates both a head-modifier relationship and a conjunction relationship. For example, compare the two natural phrases dogs and cats and really nice . dogs and cats are a good pair to conjoin, but cats is not a good modifier for dogs , so there is a tension when scoring an edge like ( dogs, cats ) : it should get a high score when actually indicating a conjunction and low oth-erwise. ( nice, really ) shows the opposite pattern X  really is a good modifier for nice , but nice and re-ally are not two words which should be conjoined. This may be partially compensated for by including features about the surrounding words (McDonald et al., 2005), but any feature templates which would be identical across the two contexts will be in tension.
In Figures 1(b), 1(d) and 1(f), the conjunction par-ticipates in a directed edge with each of the con-juncts. Thus, in edge-based scoring, at least under Conversion 2 neither of the conjuncts is being ig-nored; however, the factorization scores each edge independently, so how compatible these two con-juncts are with each other cannot be included in the scoring of a tree.
 Prepositions : For all of the examples in Figure 2, there is a directed edge from the head of the phrase that the preposition modifies to the preposition. Dif-ferences in head finding rules account for the dif-ferences in preposition representations. In the sec-ond example, the first conversion scheme chooses yesterday as the head of the overall NP, resulting in the edge yesterday  X  of , while the second conver-sion scheme ignores temporal phrases when finding the head, resulting in the more semantically mean-ingful opening  X  of . Similarly, in the third example, the preposition for attaches to the pronoun whose in the first conversion scheme, while it attaches to the noun plans in the second.

With edge-based scoring, the object is not acces-sible when scoring where the preposition should at-tach, and PP-attachment is known to depend on the object of the preposition (Hindle and Rooth, 1993). 3.2 Sibling Scoring Another alternative factorization is to score sib-lings as well as parent-child edges (McDonald and Pereira, 2006). Scores decompose as: where Sib ( Y ) is the set containing ordered and ad-jacent sibling pairs in Y : if ( m, s )  X  Sib ( Y ) , there must exist a shared parent h such that ( h, m )  X  Y and ( h, s )  X  Y , m and s must be on the same side of h , m must be closer to h than s in the linear order of the sentence, and there must not exist any other children of h in between m and s .

Under this factorization, two of the three ex-amples in Conversion 1 (and none of the exam-ples in Conversion 2) in Figure 1 now include the conjunction and both conjuncts in the same score (Figures 1(c) and 1(e)). The scoring for head-modifier dependencies and conjunction dependen-cies are again being overloaded: ( debt, notes, and ) and ( debt, and, other ) are both sibling parts in Fig-ure 1(c), yet only one of them represents a conjunc-tion. The position of the conjunction in the sibling is not enough to determine whether one is scoring a true conjunction relation or just the conjunction and a different sibling; in 1(c) the conjunction is on the right of its sibling argument, while in 1(e) the con-junction is on the left.

For none of the other preposition or conjunc-tion examples does a sibling factorization bring more of the arguments into the scope of what is scored along with the preposition/conjunction. Sib-ling scoring may have some benefit in that preposi-tions/conjunctions should have only one argument, so for prepositions (under both conversions) and conjunctions (under Conversion 2), the model can learn to disprefer the existence of any siblings and thus enforce choosing a single child. 3.3 Grandparent Scoring Another alternative over pairs of edges scores grand-parents instead of siblings, with factorization:
Under Conversion 2, we would expect this fac-torization to perform much better on conjunctions and prepositions than edge-based or sibling-based factorizations. Both conjunctions and prepositions are consistently represented by exactly one grand-parent relation (with one relevant argument as the grandparent, the preposition/conjunction as the par-ent, and the other argument as the child), so this is the first factorization that has allowed the compati-bility of the two arguments to affect the attachment of the preposition/conjunction.

Under Conversion 1, this factorization is particu-larly appropriate for prepositions, but would be un-likely to help conjunctions, which have no children. 3.4 Grandparent-Sibling Scoring A further widening of the factorization takes grand-parents and siblings simultaneously:
For projective parsing, dynamic programming for this factorization was derived in Koo and Collins (2010) (Model 1 in that paper), and for non-projective parsing, dual decomposition was used for this factorization in Koo et al. (2010).

This factorization should combine all the ben-efits of the sibling and grandparent factorizations described above X  X or Conversion 1, sibling scoring may help conjunctions and grandparent scoring may help prepositions, and for Conversion 2, grandparent scoring should help both, while sibling scoring may or may not add some additional gains. Associations from unlabeled data have the poten-tial to improve both conjunctions and prepositions. We predict that web counts which include both con-juncts (for conjunctions), or which include both the attachment site and the object of a preposition (for prepositions) will lead to the largest improvements.
For the phrase dogs and cats , edge-based counts would measure the associations between dogs and and , and and and cats , but never any web counts that include both dogs and cats . For the phrase ate spaghetti with a fork , edge-based scoring would not use any web counts involving both ate and fork .
We use associations rather than raw counts. The phrases trading and transacting versus trading and what provide an example of the difference between associations and counts. The phrase trading and what has a higher count than the phrase trading and transacting , but trading and transacting are more highly associated. In this paper, we use point-wise mutual information (PMI) to measure the strength of associations of words participating in potential con-junctions or prepositions. 4 For three words h , m , c , this is calculated with:
The probabilities are estimated using web-scale n-gram counts, which are looked up using the tools and web-scale n-grams described in Lin et al. (2010). Defining the joint probability using wild-cards (rather than the exact sequence h m c ) is crucially important, as determiners, adjectives, and other words may naturally intervene between the words of interest.

Approaches which cluster words (i.e., Koo et al. (2008)) are also designed to identify words which are semantically related. As manually labeled parsed data is sparse, this may help generalize across similar words. However, if edges are not connected to the semantic head, cluster-based methods may be less effective. For example, the choice of yesterday as the head of opening of trading here yesterday in Figure 2(c) or whose in 2(e) may make cluster-based features less useful than if the semantic heads were chosen ( opening and plans , respectively). The previous section motivated the use of unlabeled data for attaching prepositions and conjunctions. We have also hypothesized that these features will be most effective when the data representation and the learning representation both capture relevant prop-erties of prepositions and conjunctions. We predict that Conversion 2 and a factorization which includes grand-parent scoring will achieve the highest perfor-mance. In this section, we investigate the impact of unlabeled data on parsing accuracy using the two conversions and using each of the factorizations de-scribed in Section 3.1-3.4. 5.1 Unlabeled Data Feature Set Clusters : We replicate the cluster-based features from Koo et al. (2008), which includes features over all edges ( h, m ) , grand-parent triples ( h, m, c ) , and parent sibling triples ( h, m, s ) . The features were all derived from the publicly available clusters pro-duced by running the Brown clustering algorithm (Brown et al., 1992) over the BLLIP corpus with the Penn Treebank sentences excluded. 5
Preposition and conjunction-inspired features (motivated by Section 4) are described below: Web Counts : For each set of words of interest, we compute the PMI between the words, and then in-clude binary features for whether the mutual infor-mation is undefined, if it is negative, and whether it is greater than each positive integer.

For conjunctions, we only do this for triples of both conjunct and the conjunction (and if the con-junction is and or or and the two potential conjuncts are the same coarse grained part-of-speech). For prepositions, we consider only cases in which the parent is a noun or a verb and the child is a noun (this corresponds to the cases considered by Hindle and Rooth (1993) and others). Prepositions use as-sociation features to score both the triple (parent, preposition, child) and all pairs within that triple. The counts features are not used if all the words in-volved are stopwords. For the scope of this paper we use only the above counts related to prepositions and conjunctions. 5.2 Parser We use the Model 1 version of dpo 3 , a state-of-the-art third-order dependency parser (Koo and Collins, 2010)) 6 . We augment the feature set used with the web-counts-based features relevant to prepositions and conjunctions and the cluster-based features. The only other change to the parser X  X  existing feature set was the addition of binary features for the part-of-speech tag of the child of the root node, alone and conjoined with the tags of its children. For further details about the parser, see Koo and Collins (2010). 5.3 Experimental Set-up Training was done on Section 2-21 of the Penn Treebank. Section 22 was used for development, and Section 23 for test. We use automatic part-of-speech tags for both training and testing (Rat-naparkhi, 1996). The set of potential edges was pruned using the marginals produced by a first-order parser trained using exponentiated gradient descent (Collins et al., 2008) as in Koo and Collins (2010). We train the full parser for 15 iterations of averaged perceptron training (Collins, 2002), choose the itera-tion with the best unlabeled attachment score (UAS) on the development set, and apply the model after that iteration to the test set.
We also ran MSTParser (McDonald and Pereira, 2006), the Berkeley constituency parser (Petrov and Klein, 2007), and the unmodified dpo3 Model 1 (Koo and Collins, 2010) using Conversion 2 (the current recommendations) for comparison. Since the converted Penn Treebank now contains a few non-projective sentences, we ran both the projective and non-projective versions of the second order (sib-ling) MSTParser. The Berkeley parser was trained on the constituency trees of the PTB patched with Vadas and Curran (2007), and then the predicted parses were converted using pennconverter. Table 1 shows the unlabeled attachment scores, complete sentence exact match accuracies, and the accuracies of conjunctions and prepositions under Conversion 2. 7 The incorporation of the unlabeled data features (clusters and web counts) into the dpo3 parser yields a significantly better parser than dpo3 alone (93.54 UAS versus 93.21) 8 , and is more than a 1.5% improvement over MSTParser. 6.1 Impact of Factorization In all four metrics (attachment of all non-punctuation tokens, sentence accuracy, prepositions, and conjunctions), there is no significant difference between the version of the parser which uses the grandparent and sibling factorization (Grand+Sib) and the version which uses just the grandparent fac-torization (Grand). A parser which uses only grand-parents (referred to as Model 0 in Koo and Collins (2010)) may therefore be preferable, as it contains far fewer parameters than a third-order parser.
While the grandparent factorization and the sib-ling factorization (Sib) are both  X  X econd-order X  parsers, scoring up to two edges (involving three words) simultaneously, their results are quite dif-ferent, with the sibling factorization scoring much worse. This is particularly notable in the conjunc-tion case, where the sibling model is over 5% abso-lute worse in accuracy than the grandparent model. 6.2 Impact of Unlabeled Data The unlabeled data features improved the already state-of-the-art dpo3 parser in UAS, complete sen-tence accuracy, conjunctions, and prepositions. However, because the sample sizes are much smaller for the latter three cases, only the UAS improvement is statistically significant. 9 Overall, the results in Ta-ble 1 show that while the inclusion of unlabeled data improves parser performance, increasing the size of factorization matters even more. Ablation experi-ments showed that cluster features have a larger im-pact on overall UAS, while count features have a larger impact on prepositions and conjunctions. 6.3 Comparison with Other Parsers The resulting dpo3 +Unlabeled parser is significantly better than both versions of MSTParser and the Berkeley parser converted to dependencies across all four evaluations. dpo3 +Unlabeled has an UAS 1.5% higher than MSTParser, which has an UAS 1.0% higher than the converted constituency parser. The MSTParser uses sibling scoring, so it is unsurpris-ing that it performs less well on the new conversion.
While the converted constituency parser is not as good on dependencies as MSTParser overall, note that it is over a percent and a half better than MSTParser on attaching conjunctions (85.6% versus 84.0%). Conjunction scope may benefit from paral-lelism and higher-level structure, which is easily ac-cessible when joining two matching non-terminals in a context-free grammar, but much harder to determine in the local views of graph-based de-pendency parsers. The dependencies arising from the Berkeley constituency trees have higher con-junction accuracies than either the edge-based or sibling-based dpo3+Unlabeled parser. However, once grandparents are included in the factorization, the dpo3+Unlabeled is significantly better at attach-ing conjunctions than the constituency parser, at-taching conjunctions with an accuracy over 90%. Therefore, some of the disadvantages of dependency parsing compared with constituency parsing can be compensated for with larger factorizations.
 6.4 Impact of Data Representation Tables 2 and 3 show the results of the dpo3 +Unlabeled parser for conjunctions and prepositions, respectively, under the two different conversions. The data representation has an impact on which factorizations perform best. Under Conversion 1, conjunctions are more accurate under a sibling parser than a grandparent parser, while the pattern is reversed for Conversion 2.

Conjunctions show a much stronger need for higher order factorizations than prepositions do. This is not too surprising, as prepositions have more of a selectional preference than conjunctions, and so the preposition itself is more informative about where it should attach. While prepositions do im-prove with larger factorizations, the improvement beyond edge-based is not significant for Conversion 2. One hypothesis for why Conversion 1 shows more of an improvement is that the wider scope leads to the semantic head being included; in Conversion 2, the semantic head is chosen as the parent of the preposition, so the wider scope is less necessary. 6.5 Preposition Error Analysis Prepositions are still the largest source of errors in the dpo3+Unlabeled parser. We therefore analyze the errors made on the development set to determine whether the difficult remaining cases for parsers cor-respond to the Hindle and Rooth (1993) style PP-attachment classification task. In the PP-attachment classification task, the two choices for where the preposition attaches are the previous verb or the pre-vious noun, and the preposition itself has a noun ob-ject. The ones that do attach to the preceeding noun or verb (not necessarily the preceeding word) and have a noun object (2323 prepositions) are attached by the dpo3+Unlabeled grandparent-scoring parser with 92.4% accuracy, while those that do not fit that categorization (1703 prepositions) have the correct parent only 82.7% of the time.

Local attachments are more accurate  X  preposi-tions are attached with 94.8% accuracy if the correct parent is the immediately preceeding word (2364 cases) and only 79.1% accuracy if it is not (1662 cases). The preference is not necessarily for low attachments though: the prepositions whose parent is not the preceeding word are attached more accu-rately if the parent is the root word (usually corre-sponding to the main verb) of the sentence (90.8%, 587 cases) than if the parent is lower in the tree (72.7%, 1075 cases). Features derived from unlabeled data (clusters and web counts) significantly improve a state-of-the-art dependency parser for English. We showed how well various factorizations are able to take advantage of these unlabeled data features, focusing our anal-ysis on conjunctions and prepositions. Including grandparents in the factorization increases the accu-racy of conjunctions over 5% absolute over edge-based or sibling-based scoring. The representation of the data is extremely important for how the prob-lem should be factored X  X nder the old Penn2Malt de-pendency representation, a sibling parser was more accurate than a grandparent parser. As some impor-tant relationships were represented as siblings and some as grandparents, there was a need to develop third-order parsers which could exploit both simul-taneously (Koo and Collins, 2010). Under the new pennconverter standard, a grandparent parser is sig-nificantly better than a sibling parser, and there is no significant improvement when including both. I would like to thank Terry Koo for making the dpo3 parser publically available and for his help with us-ing the parser. I would also like to thank Mitch Mar-cus and Kenneth Church for useful discussions. This material is based upon work supported under a Na-tional Science Foundation Graduate Research Fel-lowship.

