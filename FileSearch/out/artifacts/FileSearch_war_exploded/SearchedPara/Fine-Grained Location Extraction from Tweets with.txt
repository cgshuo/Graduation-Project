 Twitter is a popular platform for sharing activities, plans, and opin-ions. Through tweets, users often reveal their location information and short term visiting plans. In this paper, we are interested in extracting fine-grained locations mentioned in tweets with tempo-ral awareness. More specifically, we like to extract each point-of-interest (POI) mention in a tweet and predict whether the user has visited, is currently at, or will soon visit this POI. Our proposed solution, named P etar , consists of two main components: a POI inventory and a time-aware POI tagger . The POI inventory is built by exploiting the crowd wisdom of Foursquare community. It con-tains not only the formal names of POIs but also the informal ab-breviations. The POI tagger, based on Conditional Random Field (CRF) model, is designed to simultaneously identify the POIs and resolve their associated temporal awareness. In our experiments, we investigated four types of features ( i.e., lexical, grammatical, geographical, and BILOU schema features) for time-aware POI ex-traction. With the four types of features, P etar achieves promising extraction accuracy and outperforms all baseline methods. H.3.1 [ Information Storage and Retrieval ]: Content Analysis and Indexing X  Linguistic processing Twitter, Tweet, Location extraction, Temporal awareness, POI, CRF
As a real-time communication platform, Twitter has attracted more than 200 million active users around the world every month. Users share about their mood, activities, and opinions through short messages limited to 140 characters. Users also use Twitter as a communication channel to coordinate meetings or other activities.
Through tweets, users often casually or implicitly reveal their current locations and short term plans where to visit next, at fine-grained granularity. Such information enables tremendous oppor-tunities for personalization and location-based services / marketing. For example, a user from New York city posts a tweet:  X  heading off to watch G.I.Joe at sunshine  X . From this tweet, we can infer that the user is soon to visit Landmark X  X  Sunshine Cinema. 1 In this context, promotions related to the cinema and recommendations of nearby restaurants become much relevant to the user. Another example, a user may like to view advertisement about The Smile (but not L X  X rtusi ) after her tweet:  X  just back from L X  X rtusi, wonderful dinner :&gt; like to try the smile tmr for lunch  X . 2 Both examples highlight the importance of recognizing fine-grained locations ( e.g., cinema and restaurant) and their associated temporal awareness (visited or to visit) to support more e ff ective location-based services / marketing.
Recently, geo-locating tweets and inferring users X  locations have become a hot research topic for location-based services, advertise-ment, personalization and others [4, 7, 9, 15, 19]. However, most existing studies largely rely on GPS / human-annotated tweets to in-fer the location of a user or a tweet at coarse level of granularity, ranging from country, state, to city levels. Some studies further in-vestigate the interplay between the geographic locations and user interests [5,6]. However, these techniques are far from su ffi ciency for precise location-based services / marketing. Either the granular-ity is not fine enough to identify potential customers, or the ex-tracted information / topic is too coarse for targeted marketing.
In this paper, we are interested in extracting fine-grained loca-tions mentioned in tweets with temporal awareness. More specifi-cally, if a user mentions a point-of-interest (POI) ( e.g., restaurant, shopping mall, bookstore or any other fine-grained locations) in her tweet, we are interested in extracting the name of the POI , and at the same time, predicting whether the user has visited, is cur-rently at, or will soon visit this POI ( i.e., the temporal awareness of the POI in this tweet). 3 We believe such information greatly facilitates fine-grained location-based services / marketing and per-sonalization. However, both subtasks of extracting POI names and predicting the associated temporal awareness are challenging.  X  First, tweets are written in free writing styles and are limited to 140 characters, leading to the predominant usage of colloquial language, misspellings and grammatical errors. Users often use short names or informal abbreviations to mention POIs. Existing studies have demonstrated significant performance degradation in Named Entity Recognition (NER) from tweets, where  X  X oca-tion X  is commonly considered an important type of named en-tity [18,23]. For the same reason, capturing temporal awareness of POIs based on either existing work [27] or temporal expres-sion extraction tools ( e.g., SUTIME [2] TARSQI [28]) becomes less practical.  X  Second, many POI names are ambiguous and may refer to dif-ferent concepts in di ff erent contexts ( i.e., location name ambi-guity). The aforementioned restaurant The Smile is one example where the word smile is a commonly used English word and does not refer to location names in most cases. The word mac may refer to Apple X  X  products and McDonald X  X  chain restaurant or product. In this sense, simply matching a tweet against a pre-built gazetteer leads to an ine ff ective solution. The situation becomes even more complicated by considering the noisy and informal nature of tweets.

To slightly simplify the problem, in this study, we only focus on the tweets posted by users from a predefined geographical region ( e.g., a city). This simplification enables us to utilize rich back-ground information about the region. In our data analysis and ex-periments, we used tweets published by Singaporean users. A user is considered Singapore-based if she specifies Singapore in the lo-cation field of her Twitter profile.
 Our proposed solution to the above problem, named P etar ( P OI E xtractor with T emporal A wa r eness), consists of two main com-ponents: a POI inventory and a time-aware POI tagger . The POI inventory is a collection of words and phrases, each of which is either a POI name or a part of a POI name. To ensure that our POI inventory contains not only formal names of POIs but also in-formal abbreviations, we construct the inventory by exploiting the Foursquare check-ins, collaboratively contributed by users from the same geographical region. 4 Each entry in the POI inventory is a candidate POI name which may be used to refer a POI. Note that these candidate POI names are very likely to be ambiguous and many of them are incomplete names. The aforementioned mac and smile are both candidate POI names. Another example is popular which is a commonly used word in English but may refer to the Popular Bookstore in Singapore. To disambiguate a candidate POI name mentioned in a tweet and at the same time to resolve its tem-poral awareness, we develop a time-aware POI tagger . The time-aware POI tagger is based on Conditional Random Field (CRF), a widely used model for sequence labeling. The tagger takes POI in-ventory as a knowledge base and utilizes four types of features ( i.e., lexical, grammatical, geographical, and BILOU schema features) to label POI names and their temporal awareness. In this sense, the POI inventory can be considered as a noisy version of a gazetteer to the CRF classifier. However, we demonstrate in our experiments that the POI inventory is critical for our task because the linguistic features in tweets are much less reliable compared with formal text. To summarize, the main contributions of this paper are: 1. We propose and formalize the problem of fine-grained location extraction from tweets with temporal awareness. We conduct data analysis and make four observations on Twitter user sharing fine-grained locations and short-term visiting plans. 2. We propose a mechanism to build a POI inventory without hu-man e ff orts by exploiting the crowd wisdom of Foursquare com-munity. The POI inventory includes not only the formal names of POIs but also their informal short forms and abbreviations. 3. We propose and investigate four types of features, lexical, gram-matical, geographical, and BILOU schema features, for learning the time-aware POI tagger. This CRF-based classifier is able to simultaneously extract POI names in tweets and resolve tempo-ral awareness. All the four types of features are easy to derive, enabling real-time tweet processing. 4. We conducted extensive experiments to evaluate P etar and com-pare it with baseline methods. P etar achieves promising accu-
Figure 1: Length distribution of the candidate POI mentions racy and outperforms all baseline methods. We also evaluated the e ff ectiveness of the proposed features.

The rest of this paper is organized as follows. We start with a data analysis in Section 2 to illustrate that many users reveal their locations and short-term plans in tweets. In Section 3, we define our problem and give an overview of P etar . The POI inventory and time-aware POI tagger are detailed in Sections 4 and 5 respectively. Section 6 presents the experiments. After related work in Section 7, we conclude this paper in Section 8.
Our data analysis is conducted on 4 , 331 , 937 tweets published by 19 , 256 unique Singaporean users during June 2010. A Singa-porean user means that the user specifies Singapore in the location field of her Twitter profile. To be detailed in Section 4, the POI inventory used in this analysis consists of 36 , 201 candidate POI names extracted from 239 , 499 Foursquare check-in tweets made by Singaporean users.

All tweets are cleaned by removing HTML special characters ( e.g.,  X &amp; g t ; X  is replaced with  X  &gt;  X ). Each tweet is then matched against the candidate POI names in the POI inventory. If a span of words in a tweet matches more than one candidate POI name, then the longest match is preferred. For example, the phrase  X  X opular bookstore X  in a tweet has three matches  X  X opular X ,  X  X ookstore X , and  X  X opular bookstore X , then the last match is taken. In some rare cases, if there is more than one longest match, then the first match is taken based on the word sequence. For example, if three words w 1 w 2 w 3 in a tweet match two candidate POI names and w 2 w 3 , then the first match w 1 w 2 is taken. Each candidate POI name matched in a tweet is also known as a candidate POI mention in the tweet.

O bservation 1. Many users reveal their fine-grained locations in their tweets.
 After the matching process, there are 222 , 201 tweets (or 5 . 1% of the 4.3 million tweets in our dataset) that each contains at least one candidate POI mention. Although 5 . 1% is not a very high per-centage, these 222 , 201 tweets were published by 13 , 758 unique users, or 71 . 4% of all users in our dataset. This percentage rises to 91 . 3% if we only consider the users who had published at least 20 tweets. The high percentage suggests that many users casually or implicitly reveal their locations (in the form of fine-grained POIs like restaurant or shopping mall names) in tweets. Based on our manual annotation, to be reported shortly, about half of the candi-date POI mentions indeed refer to fine-grained locations.
O bservation 2. The candidate POI mentions are mostly very short with one or two words. Many of the mentions are partial location names. Table 1: Example POI labels in tweets. The location names are in boldface, followed by their labels in brackets. t 1 Soccer fever at mac [ POI z ] now.! t t 3 We X  X e all for Asian delights! Thai express [ POI z ] today,
Figure 1 plots the length distribution of the candidate POI men-tions in the 222 , 201 tweets. Observe that nearly half or 46 . 7% of the candidate POI mentions are unigrams ( i.e., a single word), lead-ing to very high chance of ambiguity. The most frequent candidate POI mention is mac which is often used to refer both Apple prod-ucts and McDonald X  X , the chain of fast food restaurants. Longer candidate POI mentions with 3 or more words are very rare, about 2 . 5%. Moreover, about 41 . 6% of the candidate POI mentions are partial POI names. Note that the POI inventory captures both full and partial names of POIs ( e.g.,  X  X opular X  is a partial name of  X  X op-ular bookstore X ). The short, ambiguous, and partial names make the problem of POI name extraction extremely challenging. On the other hand, our observation is consistent with the nature of the tweet language.

O bservation 3. About half of the candidate POI mentions in-deed refer to locations and their associated temporal awareness can be determined.

To investigate whether a candidate POI mention truly refers to a location and to determine its possible temporal awareness, we randomly sampled 4 , 000 tweets for manual annotation, from the 222 , 201 tweets. Plotted in Figure 1, the length distribution of the candidate POI mentions in the sampled 4000 tweets is the same as the 222 , 201 tweets. For each candidate POI mention in the sampled tweets, a human annotator is asked to assign one of the 5 labels: POI p , POI z , POI f , NPOI , Unkno w n .

The first three labels indicate that a candidate POI mention in-deed refers to a location. The three subscripts p (past), z (present), and f (future) indicate the temporal awareness of the POI, i.e., the user has visited ( POI p ), is currently at ( POI z ) or will be visiting ( POI f ) the POI. The label NPOI means that the mention does not refer to a location, and the last label Unkno w n is assigned if the an-notator cannot determine whether the mention is a location or the annotator cannot resolve the temporal awareness.
 Table 1 lists three example tweets with their assigned labels. 5 The POI names are in boldface followed by their labels in brackets. In the first tweet t 1 , mac is assigned POI z , where the user is report-ing an ongoing event (watching soccer games) at a McDonald X  X  chain restaurant. Note that some of the labels may not be purely determined based on the single tweet alone. For example, it seems also reasonable to label  X  X hai express X  in t 3 with POI p based on this single tweet. To facilitate the annotation process, for each tweet to be labeled, we provide the previous and the following two tweets published by the same user. These five tweets and their timestamps together provide the context for the annotation. More-over, all our human annotators have stayed in Singapore for more than 10 years with good knowledge about the city. They are also encouraged to use search engines to refine their annotations.
From the 4 , 000 sampled tweets, 320 tweets are filtered away for containing mostly words in other languages than English. 6 In
Table 2: Distribution of the candidate POI mention labels # POI p # POI z # POI f # NPOI # Unkno w n Total
Total # POI s: 2 , 056 --the remaining 3 , 680 tweets, there are 110 tweets within which all candidate POI mentions are labeled Unkno w n . In the following, we report the annotation results of the remaining 3 , 570 tweets.
In these 3 , 570 tweets, there are 3 , 977 candidate POI mentions which involve 906 distinct candidate POI names. Table 2 reports the distribution of the labels assigned to the 3 , 977 candidate POI mentions. Observe that 51.7% of the candidate POI mentions are truly locations. Among them, the numbers of POI p , POI z POI f are 14 . 9%, 58 . 5%, and 26 . 6% respectively. That is, slightly more than half of POI mentions are indications of users being at the current locations ( i.e., POI z ). This observation is consistent with the earlier finding that Twitter is an individual news media [10,25, 29]. There are 26 . 6% of POI mentions are for future visit plans ( i.e., POI f ). The high percentage of current and future location mentions makes Twitter an ideal source for POI-targeted advertise-ment and marketing.

O bservation 4. Among all POIs that were visited (labeled POI or to be visited (labeled POI f ), about 90% of the visits to these POIs happen within a day.

To better understand the temporal awareness expressed by users, if a POI mention is labeled either POI p or POI f , the human as-sessor is asked to further determine the time-window of the visit using the 5 tweets as context, i.e., the time-window within which the user has visited or will be visiting the POI. We use 6 time-windows: 2 Hrs , 6 Hrs , 1 Da y , 2 Da y s , 1 Week , 1 Week + , and NT . For example, from tweet:  X  @username heading to gucci at paragon now!  X , we infer that the user is going to visit  X  X aragon X  within 2 hours (2 Hrs ) because traveling from one point to another within Singapore usually takes shorter than 2 hours. NT is used if the time-window cannot be determined from the context. For example, we cannot determine the time-window in tweet:  X  I wanna go Sen-tosa, VivoCity, Clarke Quay, and Overseas!! :(  X  by considering this tweet with the other four temporally related tweets.

Out of the 854 POIs with labels POI p and POI f , 144 are labeled as NT . The distribution of the time-windows for the remaining 710 POIs is plotted in Figure 2. It shows that both POI p and POI demonstrate very similar patterns. About 50% of the visits happen within 2Hrs and more than 90% of the visits happen within a day. That is, Twitter users reveal very short-term visiting history or plan, mostly within a day. This observation suggests that e ffi ciency is also an important factor to support targeted fine-grained location-based services / marketing given the large number of tweets.
We first define the problem of POI extraction with temporal aware-ness and then give an overview of P etar , the proposed solution.
Given a tweet t published by a user from a predefined geographi-cal region, the task of POI extraction with temporal awareness is to identify all locations or POIs mentioned in t and to associate each POI mention with a temporal awareness label c i  X  { c 1 , c In other words, let  X  be a POI mentioned in tweet t , we aim to extract all POI and temporal awareness label pairs, {h  X , c i} from t . Following [17,21], we define a POI as a focused geographic entity such as district, area, street, road, or a specific point location such as hotels, landmarks, schools, shopping centers and restaurants etc. The temporal awareness labels can be defined in a task-dependent manner, for example { last-six-hours , present , next-six-hours }.
From Observation 4, more than 90% of the visits to POIs happen within a day. In this study, we therefore simply use three temporal awareness labels { past , present , f uture } and do not use more fine-grained time-windows. That is, we use POI p , POI z , and POI indicate the temporal awareness of the extracted POIs.
Given the problem definition, at first glance, it may seem that the problem can be easily addressed by using an existing o ff -the-shelf NER package to extract locations and then to label these locations using temporal awareness classifier. However, as discussed in Sec-tion 1, given the short and noisy nature of tweets, named entity extraction (including locations) from tweets remains challenging. Moreover, a gazetteer with formal names of POIs does not nec-essarily help much because most Twitter users use short forms or abbreviations to mention POIs in tweets (see Observation 2).
In this paper, we propose to use a POI inventory and a time-aware POI tagger to extract POIs and assign temporal awareness labels. The solution is named P etar and Figure 3 gives an overview. The construction of the POI inventory exploits the crowdsourc-ing knowledge embedded in the tweets associated with Foursquare check-ins. Therefore, the POI inventory contains words or phrases that are commonly used by Twitter users to mention POIs. With such a  X  X oisy version of a gazetteer X , the candidate POI mentions in a tweet are pre-labeled ( i.e., the BILOU features in Figure 3) and are then passed to a time-aware POI tagger for prediction. The POI tagger, based on the widely used linear-chain CRF model, also takes in three other types of features: lexical, grammatical, and ge-ographical features derived from the tweet and also the POI inven-tory. Next, we detail the construction of POI inventory in Section 4 and the time-aware POI tagger in Section 5.
The POI inventory is constructed by extracting the POI names mentioned in tweets that are associated with Foursquare check-ins. Foursquare is a popular location-based social networking (LBSN) Figure 4: POIs covered by 1K sample Foursquare check-ins Table 3: Example tweets associated with Foursquare check-ins platform. It has attracted more than 45 M people worldwide with billions of check-ins. A check-in may be associated with a  X  check-in tweet  X  which contains formal or informal POI names. Because of the large user base and large number of check-ins, it is expected that the POI coverage for a given geographical region is broad or even exhaustive in a fine-grained scale. For illustration purpose, Figure 4 plots the locations covered by 1 , 000 randomly sampled Foursquare check-ins in Singapore. The region with the highest density of check-ins, i.e., the central part of the map, is the down-town area, which attracts a large number of visits everyday.
Next, we report the details of POI inventory construction. Note that, the technique presented here is not restricted to Foursquare. Check-in data from other LBSN services like Facebook Places, Gowalla can be easily adopted.
We collected 259 , 204 check-ins from Foursquare, which were made by Twitter users in Singapore between August 2010 and July 2011. Each check-in in this collection is associated with a tweet (called check-in tweet) and a latitude / longitude coordinate. After removing the check-in tweets with non-Latin characters, we have 239 , 499 tweets left. Table 3 demonstrates the two kinds of check-in tweets observed in the collection. The first two tweets t t simply report the users X  current locations, while the other two tweets t 3 and t 4 report users X  activities at the locations. The loca-tions like  X  (@ Golden Village Cinema 9 @ Plaza Singapura)  X  are specified by users, and automatically formatted by Foursquare. The location names may also appear in its abbreviated form like JP in t , which refers to Jurong Point , a shopping mall in the western part of Singapore. 7 Note that, the check-in tweets are solely used for constructing the POI inventory and not used for evaluating P
Because check-in tweets are relatively well formatted, the POI names can be reliably extracted by applying handcrafted rules with regular expressions. For example, from tweet t 1 in Table 3, we ob-tain two POI names: mac and bukit panjang plaza ; from t 4 tain golden village cinema 9 and plaza singapura . From all check-in tweets, we extracted 37 , 160 POI names. The average length of Figure 5: Length distribution of location names from check-ins the POI names is 3 . 9 words. Plotted in Figure 5, most POI names are in the range of 2 to 5 words.

In Twitter, people often mention POIs with abbreviations or par-tial names, assuming the audience X  X  context-awareness [16]. For example, popular is used in tweets for Popular Bookstore . To en-sure our POI inventory captures POI names mentioned in tweets, we further augment the POI inventory with partial names. More specifically, for each of the extracted 37 , 160 POI names, if a name consists of 2 or more words, we extract its partial names by tak-ing all the sub-sequences of the name (up to 5 words). The length of a partial name is limited to 5 words because longer names are less likely to appear in tweets (see Observation 2). The stopwords ( e.g., the, at, of ) are ignored and employed as separators in this process. For example, partial names frolick, bukit, batok, bukit ba-tok are extracted from the POI name frolick at bukit batok where  X  X t X  is a stopword and a separator. The major issue of this process, however, is generating many invalid location names. For example, partial name east bus extracted from jurong east bus interchange is invalid. To partially address this issue, entries that appear in fewer than 5 check-in tweets are removed from the POI inventory. This filtering process removes not only most invalid partial names but also some noisy single-word POI names like o ffi ce and somewhere . After filtering, we have 36 , 201 entries in the POI inventory includ-ing POI names directly extracted from Foursquare check-in tweets and their partial names. Each entry is known as a candidate POI name.

Unfortunately, although the check-in tweets are well formatted by Foursquare, being a crowdsourcing knowledge base, many can-didate POI names are directly contributed by users and are noisy. For example, we get my home as a candidate POI name from check-in tweet:  X  I X  X  at My Home @ Serangoon Ave 3 (Serangoon Avenue 3)  X ; similarly, we get my room , my work place , and my bed as can-didate names. Very unlikely such names are POIs. Moreover, many candidate names are ambiguous, such as mac and popular . Even a tweet mentions a candidate POI name, the mention may not be a true POI. Reported in Observation 3, about half of the mentions truly refer to POIs with determinable temporal awareness labels. In the following, we develop a time-aware POI tagger that simul-taneously disambiguates the candidate POI mentions and resolves the temporal awareness.
Prediction of whether a candidate POI mention is truly a POI and its temporal awareness largely relies on the context expressed in the tweet. For example, given a tweet  X  Off to jp now! Hope it DOESNT rain  X , the contextual cues like  X  o ff to  X  and  X  now!  X  are important information for the prediction of candidate POI mention jp . Conditional Random Fields (CRF) therefore becomes a natural choice for our task. CRF takes context into account by allowing arbitrary complex dependencies among class variables [11]. Also, it makes independence assumption for observation variables ( i.e., features), enabling it for fast learning and inference.
The proposed time-aware POI tagger is based on the widely ap-plied linear-chain CRF model, which models the output classes as a sequence. To encode the contextual knowledge for candidate POI mention disambiguation and temporal awareness classifica-tion, we investigate four classes of features: lexical , grammatical , geographic features, and BILOU schema features. In the follow-ing, we use w i to denote the i -th word in tweet t , x i lowercased form, and  X  to denote a candidate POI name or mention.
Lexical features are widely used in NER tasks and proven to be e ff ective [22, 24, 31]. In our implementation, we utilize 4 basic lexical features for a word w i , and 3 contextual features derived from the surrounding words of w i .
 Basic lexical features of a word . The 4 lexical features of a word w i are: 1) the word w i itself and its lowercased form x word shape of w i : all-capitalized, is-capitalized, all-numerics, al-phanumeric; 3) the prefixes and su ffi xes of x i , from 1 to 3 char-acters; 4) the prior probabilities of x i being in capitalization and in all-capitalization forms respectively. The first three features are computed based on the surface form of the word in the given tweet. The 4th feature, i.e., the prior probabilities, are estimated from the tweet collection. In our implementation, a continuous value feature is discretized by applying a greater-than threshold test at each equal interval in its range. The prior probability in the range of [0 , 1] is discretized into 5 binary features using 0.2 as the interval. Contextual features of a word . Context window feature is often used in NER to identify the boundaries of named entities [22, 31]. We exploit three contextual features for a word: 5) bag-of-words of the context window up to 5 words: x i  X  2 , x i  X  1 , x i of-words of the preceding two words x i  X  2 , x i  X  1 ; 7) bag-of-words of the following two words x i + 1 , x i + 2 . Note that, the last two features are proposed to distinguish the contextual cues from the left-hand side window and the right-hand side window of a word. In tweets, we observe that the left-hand side words are likely used to convey the activity associated with a POI ( e.g., o ff to , eating at ), while the right-hand side words often reflect the temporal aware-ness ( e.g., now, today, soon ). However, in some cases, either the left-hand or the right-hand side words are informative, while the counterpart is misleading. The POI  X  X uki sushi X  in t 3 in Table 1 is an example. The right-hand side word tomorrow is informative for temporal awareness resolution, while its left-hand side word today is misleading. Part-of-speech (POS) tag . We use TwitterNLP, a tweet-specific NLP tool to tag each tweet. 8 TwitterNLP incorporates tweet-specific features and outperforms conventional POS taggers in tweet do-main [23]. Based on the Penn TreeBank tagset [20], TwitterNLP provides di ff erent tag for each verb tense, providing us with gram-matical cues to infer the temporal awareness of the POIs. We con-sider the POS tags of the current word w i and its surrounding two words w i  X  1 and w i + 1 .
 Word group by Brown clustering . To tackle the issue of Out of Vocabulary (OOV) words such as informal abbreviations and misspellings, we apply Brown clustering to capture the distribu-tional similarity of words. For example, lexical variations like shd, ishould, shudd, shuld, shoud, shud, shld, sould, shouldd are clus-tered together with the modal verb should . Brown clustering is an algorithm that groups words that appear in similar contexts in a hi-erarchy [1]. Each word is uniquely represented by a bit string based on its path from the root of the hierarchy. The depths of a path o ff er di ff erent levels of word group abstraction. For a given word, we use the 4th, 8th and 12th bits of its path to abstract its lexical variations, resulting in three features.
 Time-trend score of tweet . To capture the temporal awareness of POIs, we manually constructed a dictionary of time-trend words as reference. The dictionary, denoted by D , contains 36 commonly used words in English with manually assigned time-trend scores: 1, 0, and -1 for future-, present-, and past-trend respectively. 9 Ex-ample time-trend words in D include modal verbs like will, would , auxiliary verbs like was, be, is, am , and adjectives or adverbs like tomorrow, future , yesterday etc.

Next, we compute a time-trend score for a tweet t by assigning time-trend scores to some of t  X  X  words and then take the average of the scores assigned. The time-trend score of word w  X  t is assigned through three steps. 1. If a word w  X  t matches an entry in D , then its time-trend score is assigned accordingly with reference to D . 2. If w does not match any entry in D , then we get all the words that appear in the same cluster as w based on the Brown clustering results using the path of 12 bits ( i.e., the finest-granular level).
Let B w be the word cluster where w  X  B w . If all the words in the intersection B w  X  D have the same time-trend score, then is assigned with the score. Otherwise, if B w  X  D is an empty set, or the words in B w  X  D have di ff erent time-trend scores, we consider the word cluster less reliable, and w will not be as-signed a time-trend score. We use D T to denote the set of words that have been assigned time-trend scores in t in the first two steps ( D T  X  t ), because the assignment involves either direct or indirect match with D , . 3. Next, we exploit POS tags to assign time-trend scores to all the verbs that are in tweet t but not in D T . Verbs tagged with VBN and VBD are assigned score -1; VBZ, VBP, VBG and VB as-signed with score 0. 10 The overall time-trend score T ( t ) of tweet t is computed as the av-erage of the time-trend scores that have been assigned to its words. If no word in t has been assigned a score, then T ( t ) = 0. The closest verb . While T ( t ) implies the overall temporal aware-ness of tweet t , the tweet may mention multiple POIs which are associated with di ff erent temporal awareness ( e.g., tweet t ble 1). In this sense, for each candidate POI mention in a tweet, we further consider the closest verb to the POI mention, the tense of the verb, and the distance between the verb and the POI mention. More specifically, a tense label is assigned to the closest verb based on its POS tag. Verb with POS tags VBN or VBD is assigned the label  X  pst  X ; VBZ, VBP or VB the label  X  pre  X ; and VBG the label  X  pre-p  X . Here we distinguish VBG from other verbs in present tense because present participle could indicate futurity in some context ( e.g., tweet  X  heading to jp for dinner!  X ). The distance between the closest verb to a POI mention is encoded in 11 binary features. The first 10 binary features indicate the number of words in between and the last binary feature indicates the distance is more than 10 words. An additional binary feature is used to indicate whether the closest verb is on the left-hand or right-hand side of the POI men-tion. If a tweet contains no verb, the aforementioned 12 features are set to  X  X ULL X . The closest time-trend word . Besides the closest verb to a can-didate POI mention, we also consider the closest word that appear in D T ( i.e., time-trend words by time-trend dictionary matching) to the POI mention. Similarly, the word itself, its time-trend score, its distance to the POI mention and the indicator of being on the left-hand or right-hand side of the POI mention are used as features. If no such word exist, then the features are set to  X  X ULL X . Spatial randomness . Because the POI inventory is built from the check-in tweets from Foursquare. Each candidate POI name  X  is mentioned by at least one check-in tweet. Recall that check-in tweets are associated with latitude / longitude coordinates. We com-pute the spatial randomness of a candidate POI name  X  , denoted by R (  X  ), using spatial distribution of the check-in tweets which men-tion  X  . Specifically, we divide the map of Singapore into lattices with a size of 1KM  X  1KM. There are 608 lattices (denoted as S ), each contains at least one check-in tweet. Let k  X  be the total num-ber of check-in tweets mentioning  X  , and k  X , s be the number of check-in tweets that mention  X  and fall in lattice s , then the proba-bility of  X  being associated with s is P (  X , s ) = k  X , s randomness R (  X  ) of  X  is the normalized entropy: In Equation 1, Z = log( | S | ) is the maximum entropy value assum-ing uniform distribution. R (  X  ) ranges from 0 to 1. The location names that appear in a single lattice have R (  X  ) = 0. Chain restau-rants like McDonald X  X  and Starbucks have much larger R (  X  ) values. Location name confidence . The spatial randomness measure alone can not fully describe a POI name. For example, if a POI name is mentioned by very few check-in tweets, then R (  X  ) is small. On the other hand, POI names mentioned by many check-in tweets in many lattices may not necessarily names of chain restaurant / store, but common words like home , room , bus , center . We therefore pro-pose location name confidence measure.

Because longer names are more likely true POIs, we measure the confidence of a candidate POI name with respect to the length of its name in number of words. Let  X  i and  X  i be the average and the standard deviation of all k  X   X  X  of length i , the confidence of POI name  X  of length i , denoted by F (  X  ), is defined in Equation 2, where 5 is a scaling constant.
 M ultiple candidate POI mention . We observe that when multiple candidate POI names are mentioned in one tweet, all the mentions are more likely true POIs. For example, both tweets t 2 and t ble 1 mention two POIs. Thus, a binary feature is added to indicate whether a given tweet mentions multiple candidate POI names.
We adopt the linear-chain CRF model with BILOU schema in our implementation [18]. BILOU schema identifies B eginning, I nside and L ast word of a multi-word POI name, and U nit-length POI name. The words that do not appear in any POI names are identified by the O utside label. For example, tweet t 3 in Table 1 is labeled below for training the model where subscripts z and f indicate the temporal awareness present and future respectively.
We X  X e \ O all \ O for \ O Asian \ O delights \ O ! \ O Thai \ B express \ L z today \ O , \ O suki \ B f sushi \ L f tomorrow \ O subset of features are applicable to words that do not ( w i
Lexical Features w i &lt;  X  w i  X   X  1. The word w i itself and its lowercased form x i ; The word shape of w i and the prefixes and su ffi xes of x i ; The prior
Grammatical Features 1. POS tags of the preceding word w i  X  1 , the current word
Geographical Features 1. Spatial randomness of the location name  X  , R (  X  ) -X 2. Location name confidence F (  X  ) -X 3. Indicator of multiple candidate POI mentions -X
Because of the POI inventory, the candidate POI mentions in a tweet can be pre-labeled with BILOU schema. Note that, the pre-labels do not contain the temporal awareness information ( e.g., subscripts z and f in the above example) because such information cannot be determined from the name match with POI inventory. The pre-labels are passed to the CRF classifier as BILOU schema features in both training and testing phases, shown in Figure 3. Pre-labels are expected to enhance the model by explicitly encoding the label dependencies. A similar strategy was used for NER in [8]. More specifically, the BILOU schema feature for a word w i the pre-label of w i itself and the pre-labels of its surrounding words In the CRF model, each word is represented as a feature vector. If a feature is computed for the word ( e.g., POS tag of the word), then the corresponding value is assigned in the feature vector. If a feature is computed for the whole tweet ( e.g., tweet time-trend score), then all the words in the tweet are assigned the same value. If a feature is computed for a candidate POI mention ( e.g., location name confidence), the same value is assigned to all the words con-tained in the candidate POI name. The corresponding feature is set to  X  X A X  if a word does not appear in a candidate POI name. Table 4 summarizes all the features used in P etar and indicates which fea-tures are applicable for words appearing in candidate POI names. Given a tweet, there are three steps in P etar as shown in Figure 3. The first step involves identifying all candidate POI mentions from the tweet. Here, we adopt a prefix tree algorithm to identify all can-didate POI mentions with preference of longer matches with entries in POI inventory [12]. The algorithm has a linear complexity O ( n ) of tweet length in number of words n , regardless of the size of the POI inventory. The second step is feature extraction. Most of the features presented in the earlier sections are simple to derive. Specifically, the prior probabilities of x i being in capitalization and in all-capitalization forms, Brown clustering, and geographical fea-tures ( R (  X  ) and F (  X  )) are pre-computed. The most costly part of the feature extraction is POS tagging by using TwitterNLP. TwitterNLP is implemented using linear-chain CRF which is fast in inference. The last step is the inference by the CRF-based tagger. On a work-station with a 1 . 86GHz Xeon quad-core CPU and 12GB of RAM, P etar processes about 400 raw tweets in a second ( i.e., 1 . 44 M / Hr) by using a single CPU core. That is, P etar can be easily applied in large-scale real-time setting with parallel computing technique.
We conduct extensive experiments to evaluate the proposed P method against baselines. We then investigate the usefulness of the features in detail.
Recall that in Section 2, we have manually annotated 4 , 000 tweets and obtained 2 , 056 true POIs and 1 , 801 NPOIs. Among the 2 , 056 POIs, the number of POIs belonging to POI p , POI z , and POI 307, 1 , 202, and 547 respectively (see Table 2). In our experiments, we use this manually annotated data as groundtruth and evaluate the methods with 5-fold cross validation. That is, the annotated tweets are randomly split into 5 subsets: 4 subsets are used to train the classifier and the remaining subset is used as test set. The final results are averaged over 5 runs so that each subset is used as test set once. We use 4 category labels in training and testing: POI POI z , POI f , and NPOI . In our evaluation, we also treat POI as a special category label. Instances of POI p , POI z , and POI egories all belong to POI . That is, if an extracted location name is indeed a POI name, then it is a positive instance of POI category, regardless of its temporal awareness label.
 The proposed P etar method is implemented with the linear-chain CRF model by CRF ++ toolkit with default settings for the system parameters. 11 We compare P etar with the following three methods. Random Annotation (RA) : This is a weak baseline. Each candi-date POI mention is randomly assigned one of four labels: POI POI z , POI f , and NPOI . The reported results are averaged over 10 runs. The purpose of including this weak baseline is to show the accuracy of simple dictionary match, as a reference.
 K-Nearest Neighbor . KNN is non-parametric method that has achieved good accuracy in many classification tasks. Here, each candidate POI mention  X  is represented by its surrounding 4 words ( i.e., the context words), denoted by W . The similarity between two POI names  X  a and  X  b is calculated by Jaccard coe ffi cient. Note that, we do not weigh the words using TFIDF because many high-frequent words ( e.g., o ff , to, at) are important words in our task. The number of nearest neighbors was set to 10 in our experiments ( i.e., k = 10). StanfordNER : Also known as CRFClassifier, it is a state-of-the-art sequence labeling system which achieves robust performance across di ff erent domains. 12 We provide the labeled tweets as train-ing data to build the classifier with default parameter settings. For a fair comparison, the POI inventory is provided to StandfordNER as an external gazetteer. 13
In the evaluation, we adopt three widely used metrics: Precision ( Pr ), Recall ( Re ), and F 1 . Pr of a category is the ratio of the cor-rectly classified instances in that category. Re is the ratio of the instances that should be classified in the category. F 1 is the har-monic mean of Pr and Re .
Table 5 reports the experimental results of the four methods. The results of Petar are achieved by using the lexical, grammatical, and BILOU schema features (See Section 6.3 for detailed feature analysis). We make the following observations: 1. P etar achieves the best performance for POI extraction with temporal awareness labels ( POI f , POI z , and POI p ), followed by StanfordNER. In terms of F 1 , P etar consistently outperforms
StanfordNER by 21 . 4%, 24 . 6% and 111 . 9% for POI f , POI and POI p respectively. This result suggests that the conven-tional lexical features alone are not discriminative enough for this task. The much poorer performance by KNN and RA shows that exploiting the sequence dependencies among the class vari-ables and feature observations greatly benefits candidate POI name disambiguation and temporal awareness resolution in tweets. 2. All the four methods deliver poorer performance for POI pared with POI f and POI z . One possible reason is the smaller number of training instances in POI p compared with the other two categories. Another reason is that it is relatively harder to detect past -trend from a single tweet, particularly when the tweet is not composed in proper English. On the other hand, we argue that detection of POI f and POI z is more meaningful for the downstream applications. 3. If we ignore the temporal awareness and simply evaluate the methods on extracting POI names ( i.e., category POI in Ta-ble 5), P etar achieves the highest F 1 of 0.8753 with slightly poorer precision (0.9094 vs 0.9390) but much better recall (0.8436 vs 0.6931) than StandfordNER. We believe the higher recall attributes to the BILOU pre-label of candidate POI mentions.
However, the pre-labels may bring noise, resulting in the slight degradation of precision. Regarding NPOI , StanfordNER ob-tains slightly better recall than P etar but much poorer precision. In summary, our experimental results show that the proposed P method achieves best results in disambiguating candidate POI names and resolving temporal awareness from tweets. Next, we investi-gate the impact of the three types of features in P etar .
Other than the BILOU schema features used for encoding can-didate POI mention in tweets, we present three types of features Table 7: Impact of individual feature within Lex + Gra for POI in Section 3: Lex ical, Gra mmatical, and Geo graphical features. In this section, we conduct experiments and evaluate their e ff ective-ness on time-aware POI extraction. The results are reported in Ta-ble 6. Note that BILOU schema features are used in this set of evaluation, unless stated otherwise.
 E ff ectiveness of Gra , Lex , and Geo features . If each of the three types of features is used alone, then Gra achieves best performance for POI f , POI z , and POI p followed by Lex . Geo performs the worst for the temporal awareness resolution. However, if the tem-poral awareness is ignored, then Lex becomes the winner in clas-sifying POI and NPOI . This result is expected as grammatical features are designed to capture the temporal awareness while lex-ical features are more for capturing the context for location name disambiguation. Geographical feature, on the other hand, provides extra information about a candidate POI name but does not help in capturing additional contextual information for POI name extrac-tion or temporal awareness resolution.

With two or three types of features, Lex + Gra outperforms other feature combinations for POI , POI f , POI z and NPOI in terms of F 1 . In terms of precision and recall, Lex + Gra either achieves the best results or is slightly worse than the best results. Inclusion of geographical feature, i.e., Lex + Gra + Geo improves the recall of POI and precision of NPOI with a small margin. That is, the additional information about each candidate POI name does help in distinguishing true POIs from all candidate POI mentions, but hurt temporal awareness resolution.

In summary, our feature analysis shows lexical and grammatical features together achieve the best results for candidate POI name disambiguation and temporal awareness resolution. Geographic features contribute to better recognition of location names but de-grades the accuracy of temporal awareness resolution.
 E ff ectiveness of individual features in Gra + Lex . Next, we eval-uate the individual feature(s) within the Lex + Gra combination that we have specifically proposed in P etar . Specifically, in each evalu-ation, one of the following feature(s) is removed from the Lex + Gra combination:  X  ContextWindow: The bag-of-words of the 5-word context win-dow, the preceding two words, and the following two words, respectively.  X  LRContextWindow: The bag-of-words of the preceding and the following two words, respectively.  X  TimeTrend: The overall time-trend score of the whole tweet
T ( t ).  X  ClosestVerb: The closest verb, its time-trend score, the distance, and the left / right-hand side indicator.  X  ClosestTrend: The closest time-trend word w  X  D t , its time-trend score, the distance and the left / right-hand side indicator.
Table 7 reports the performance for POI f after removing each aforementioned feature(s) from the Lex + Gra combination. Simi-lar observations hold for POI z , POI p , NPOI , and POI . The re-sults are not shown due to the page limit. Observe from Table 7, removing each individual feature(s) leads to degradation in preci-sion, recall, and F 1 . That is, all these features contribute positively to P etar . Relatively, based on the di ff erence of F 1 values, larger performance degradation is observed for removal of ContextWin-dow, ClosestVerb and ClosestTrend, than the removal of LRCon-textWindow and TimeTrend. A possible reason is that TimeTrend is partially covered by the knowledge derived from ClosestVerb and ClosestTrend. The features in LRContextWindow are included in ContextWindow. However, the performance degradation by the ex-clusion of LRContextWindow indicates that explicitly discriminat-ing left-/ right-hand side windows is beneficial. Similarly, Time-Trend feature complements other features and improves the accu-racy of P etar .
 E ff ectiveness of BILOU schema features . So far, BILOU schema features have been used in all the analysis. In the last row of Ta-ble 7, we report the result of using Lex + Gra feature combination but excluding the BILOU schema features. Observe that, exclusion of BILOU schema features from the Lex + Gra combination results in big drop in precision, recall, and F 1 . This shows the impor-tance of providing the boundary and constituents of each candidate POI mention in tweet. Furthermore, the BILOU schema features complement the ClosestVerb and ClosestTrend grammatical fea-tures because these features are computed based on candidate POI mentions.
To the best of our knowledge, this work is the first to address the task of fine-grained location extraction from tweets with temporal awareness. Accordingly, this section review related work on POI extraction, NER and Geolocalization for tweets respectively. POI Extraction. The most relevant work to ours are the approaches presented in [17, 21]. Rae et al. proposed an approach to iden-tify POI mentions in formal text [21]. Given the expensive manual annotation procedure, they proposed to build a training set by tak-ing the abstract of the Wikipedia articles that are related to a POI, and the snippets returned by querying these Wikipedia article ti-tles. However, POIs covered in Wikipedia are mainly landmarks and government buildings. To support fine-grained POI extraction, they obtained POIs from Foursquare and Gowalla and then used the POIs as queries to get web snippets as training samples. A linear-chain CRF model is trained for POI recognition using conventional linguistic features ( e.g., capitalization, POS tag). Our work is sig-nificantly di ff erent from theirs in twofold: 1) While their approach was developed for formal text like news articles and web pages, we aim to recognize POI mentions in tweets. The brevity prop-erty and noise-prone nature of tweets introduce new challenges; 2) The temporal awareness of the POIs in tweets is a key considera-tion in our task. Lingad et al. tried to extract POI mentions from disaster-related tweets by retraining existing NER tools [17]. Sev-eral state-of-the-art NER tools, including StanfordNER, OpenNLP and TwitterNLP, were investigated. They took locations and orga-nizations recognized by these tools as POIs. StanfordNER outper-forms other alternatives in their experiments. Their experiments also show that the performance of extracting POIs of fine granu-larity remains inferior. In comparison, our work exploits check-in data from Foursquare for fine-grained POI extraction, leading to promising performance of POI recognition in tweets.
 Geolocalization for Tweets. Recently, there have been many stud-ies on estimating location of Twitter users or tweets. Cheng et al. proposed a probability framework to estimate city-level location of a Twitter user based on tweet content [4]. The spatial usage of each word is considered and a language model is built for each location. They reported that about half of the Twitter users can be placed within 100 miles of their true locations. Following this line, re-searchers propose to model the spatial usage of a word as a gaussian mixture model [3], or estimate location by using Kullback-Leiber divergence with Dirichlet smoothing [9]. Li et al. further consid-ered the time dimension for location estimation in [15]. Mahmud et al. applied statistical learning approaches with an ensemble model to infer Twitter user X  X  home location [19]. A gazetteer containing references to US cities and states was used to build the training set. In summary, the estimation of user location is at coarse level of granularity, ranging from country, state, to city levels.
Schulz et al. proposed to use several geo-indicators together for more accurate location estimation [26]. Many external resources and tools were used to derive the indicators, including timezone mapping, Geonames, DBPedia Spotlight as well the links embed-ded in the tweets to Foursquare, etc.. 14 Ikawa et al. exploited check-in tweets in Foursquare, and estimated location based on keyword match. These studies do not consider location name ambiguity or the temporal awareness of the locations.

The interplay between geographic locations, topics and Twitter user X  X  interests are mostly studied by using latent variable model. Eisentein et al. showed that each region has a specific topic dis-tribution [5]. Hong et al. considered the user X  X  interest to model users X  geographic behavior [6]. Recently, Yuan et al. further inves-tigated spatial, temporal, and topical aspects to model users X  geo-graphic activities [30]. While these studies partially enable fine-grained location estimation, the specific POI information may be lost due to ambiguity, and the temporal awareness is still unknown. NER for Tweet. NER has been extensively studied and reached promising performance on formal text corpus where linguistic fea-tures such as capitalization, POS tags are reliable and e ff ective. However, significant performance degradation has been reported for NER from tweets [18,23]. Liu et al. proposed a two-stage NER system for tweets [18]. In the first stage, a KNN classifier was used to pre-label each word based on the surrounding context. Then, the pre-label and the conventional linguistical features are incorporated into a CRF model for further refinement. Ritter et al. developed a pipelined NLP tool for tweets called TwitterNLP [23]. It consists of POS tagger, shallow parsing, capitalization classifier and named entity recognition. They reported superior performance compared to the retrained existing state-of-the-art systems. In our implemen-tation, we applied TwitterNLP for POS tagging the tweets. Note that, the TwitterNLP works in supervised manner, which requires expensive human e ff ort. Li et al. proposed an unsupervised NER solution by splitting tweet into non-overlapping segments [13,14]. Then, they tried to identify named entities from these segments by using POS tagger or random walk algorithm. However, the pro-posed technique does not discriminate the type of the extracted en-tities, which make their solution less useful for POI extraction.
Market campaigning in Twitter is becoming very important in business world. In this paper, we attempt to facilitate the fine-grained location-based services / marketing and personalization by extracting POIs mentioned in tweets and predicting the temporal awareness of the POIs. The proposed solution, named P etar ploits the crowd wisdom of Foursquare community to enable fine-grained location extraction. The inclusion of partial location names largely tackles the problem of predominant usage of colloquial lan-guage in tweets. Then, a time-aware POI tagger is developed by using linear-chain CRF model, which conducts the location extrac-tion and temporal awareness resolution in an e ff ective and e ffi cient way. Four types of features are extensively investigated. The com-prehensive experiments show that P etar achieves promising per-formance and is e ffi cient for real-time applications. While many corporations just shout out their message in Twitter, P etar posed in this work, could make the marketing in a way that is both enjoyable and profitable. As a part of our future work to further im-prove P etar , we will investigate the context derived from historical tweets from a user as well as the social aspect of the users.
