
In order to generate synthetic basket datasets for bet-ter benchmark testing, it is important to integrate char-acteristics from real-life databases into the synthetic bas-ket datasets. The characteristics that could be used for this purpose include the frequent itemsets and association rules. The problem of generating synthetic basket datasets from frequent itemsets is generally referred to as inverse fre-quent itemset mining. In this paper, we show that the prob-lem of approximate inverse frequent itemset mining is NP -complete. Then we propose and analyze an approximate algorithm for approximate inverse frequent itemset mining, and discuss privacy issues related to the synthetic basket dataset. In particular, we propose an approximate algo-rithm to determine the privacy leakage in a synthetic basket dataset.

Keywords: data mining, privacy, complexity, inverse fre-quent itemset mining
Since the seminal paper [1], association rule and fre-quent itemset mining received a lot of attention. By compar-ing five well-known association rule algorithms using three real-world data sets and the artificial data set from IBM Al-maden, Zheng et al. [12] found out that the algorithm per-formance on the artificial data sets are very different from their performance on real-world data sets. Thus there is a great need to use real-world data sets as benchmarks.
However, organizations hesita te to provide their real-world data sets as benchmarks due to the potential disclo-sure of private information. One potential approach to ad-dress this problem is to generate synthetic basket datasets for benchmarking purpose by integrating characteristics from real-world basket datasets that may have influence on the software performance. The frequent sets and their sup-ports (defined as the number of transactions in the basket dataset that contain the items) can be considered to be a rea-sonable summary of the real-world data set. As observed by Calders [3], association rules for basket dataset can be described by frequent itemsets. Thus it is sufficient to con-sider frequent itemsets only. Ramesh et al. [9] recently investigated the relation between the distribution of discov-ered frequent set and the performance of association rule mining. It suggests that the performance of association rule mining method using the original data set should be very similar to that using the synthetic one compatible with the same frequent set mining results.

Informally speaking, in this approach, one first mines frequent itemsets and their corresponding supports from the real-world basket datasets. These frequent itemset sup-port constraints are used to generate the synthetic (mock) dataset which could be used for benchmarking. For this approach, private information should be deleted from the frequent itemset support constraints or from the mock data-base. The authors of [7, 3] investigate the problem whether there exists a data set that is consistent with the given fre-quent itemsets and frequencies and show that this problem is NP -complete. The frequency of each frequent itemset can be taken as a constraint over the original data set. The prob-lem of inverse frequent set mining then can be translated to a linear constraint problem. Linear programming prob-lems can be commonly solved today in hundreds or thou-sands of variables and constraints. However, the number of variables and constraints in this scenario is far beyond hun-dreds or thousands (e.g., 2 t ,where t is the number of items). Hence it is impractical to apply linear programming tech-niques directly. Recently, the authors of [11] investigated a heuristic method to generate synthetic basket data set using the frequent sets and their supports mined from the origi-nal basket data set. Instead of applying linear programming directly on all the items, it applies graph-theoretical results to decompose items into independent components and then apply linear programming on each component. One poten-tial problem here is the number of items contained in some components may be still too large (especially when items are highly correlated each other), which makes the applica-tion of linear programming infeasible.

The authors of [9] proposed a method to generate basket data set for benchmarking when the length distributions of frequent and maximal frequent itemset collections are avail-able. Though the generated synthetic data set preserves the length distributions of frequent patterns, one serious limi-tation is that the size of transaction databases generated is much larger than that of origi nal database while the number of items generated is much smaller. We believe the sizes of items and transactions are two important parameters as they may significantly affect the performance of association rule mining algorithms.

Instead of using the exact inverse frequent itemset min-ing approach, we propose an approach to construct trans-action databases which have the same size as the original transaction database and which are approximately consis-tent with the given frequent itemset constraints. These ap-proximate transaction databases are sufficient for bench-marking purpose. In this paper, we consider the complexity problem, the approximation problem, and privacy issues for this approach.

We first introduce some terminologies. I is the finite set of items. A transaction over I is defined as a pair ( tid, I where I is a subset of I and tid is a natural number, called the transaction identifier. A transaction database D over is a finite set of transactions over I . For an item set I I and a transaction ( tid, J ) , we say that ( tid, J ) contains I if I  X  J . The support of an itemset I in a transaction database D over I is defined as the number of transactions T in D that contains I , and is denoted support ( I, D ) .The frequency of an itemset I in a transaction database D over I is defined as Calders [2, 3] defined the following problems that are re-lated to the inverse frequent itemset mining.
 FREQSAT Instance : An item set I and a sequence ( I 1 ,f 1 ) , (  X  X  X  , ( I m ,f m ) ,where I i  X  X  are itemsets and 0  X  f i  X  1 are nonnegative rational numbers, for all 0  X  i  X  m . Question : Does there exist a transaction database D over such that freq ( I i , D )= f i for all 0  X  i  X  m ? FFREQSAT (Fixed size FREQSAT) Instance :Aninteger n , an item set I , and a sequence (
I ,f 1 ) , ( I 2 ,f 2 ) ,  X  X  X  , ( I m ,f m ) ,where I i  X  X  are item-sets and 0  X  f i  X  1 are nonnegative rational numbers, for all 0  X  i  X  m .
 Question : Does there exist a transaction database D over such that D contains n transactions and freq ( I i , D )= for all 0  X  i  X  m ? FSUPPSAT Instance :Aninteger n , an item set I , and a sequence (
I and s i  X  0 are nonnegative integers, for all 0  X  i  X  m . Question : Does there exist a transaction database D over such that D contains n transactions and support ( I i , D )= s for all 0  X  i  X  m ?
Obviously, the problem FSUPPSAT is equivalent to the problem FFREQSAT. Calders [2] showed that FREQSAT is NP -complete and the problem FSUPPSAT is equivalent to the Intersection Pattern problem IP : given an n  X  n matrix C with integer entries, do there exist sets S 1 ,...,S n such that | S i  X  S j | = C [ i, j ] ? Though it is known that IP is NP -hard, it is an open problem whether IP belongs to NP .
In this paper, we will consider the problem of generating transaction databases that approximately satisfy the given frequent itemset support constraints. Section 2 discusses the computational complexity of approximating transaction databases. Section 3 proposes an algorithm to approxi-mately generate a approximate transaction database. Sec-tion 4 discusses privacy issues. Finally, Section 5 draws conclusions.
Though it is an interesting problem to study whether there exists a size n transaction database that satisfies a set of given frequency constraints, it is sufficient for bench-marking purpose to construct a transaction database that is approximately at the size of n and that approximately satis-fies the set of given frequency constraints. Thus we define the following problem.
 ApproSUPPSAT Instance :Aninteger n , an item set I , and a sequence (
I and s i  X  0 are nonnegative integers, for all 0  X  i  X  m . Question : Does there exist a transaction database n transactions over I such that | n  X  n | = O ( m ) and | support ( I i , D )  X  s i | = O ( m ) for all 0  X  i  X  m ?
Note that in the above definition, the approximation er-rors are based on the parameter m instead of n since for most applications, m is small and n is bigger. Indeed, n could be at the exponential order of m . For performance testing purpose, it is not meaningful to use n as the parame-ter in these situations. It also straightforward to show that the problem ApproSUPPSAT is equivalent to the following problem: given an integer n , an item set I , and a sequence (
I a transaction database D over I with n transactions and 0  X  support ( I i , D )  X  s i = O ( m ) for all 0  X  i  X  m .
In the following we show that ApproSUPPSAT is NP -complete. Note that for the non-approximate version FSUP-PSAT of this problem, we do not know whether it is in NP . Lemma 2.1 ApproSUPPSAT  X  NP .
 Proof . Since the size of the transaction database is n which might be exponential in the size of the instance input de-scription, it is not possible to guess a transaction data-base in polynomial time and check whether it satisfies the constraints. In the following, we use other techniques to show that the problem is in NP .Let I be the collection of item sets and ( I 1 ,s 1 ) , ( I 2 ,s 2 ) ,  X  X  X  , ( I m quence of support constraints. Assume that |I| = t .Let J ,J 1 ,  X  X  X  ,J 2 t  X  1 be an enumeration of the 2 t subsets of (in particular, let J 0 =  X  and J 2 t  X  1 = I ), and X 0 ,X X 2 t  X  1 be 2 t variables corresponding to these itemsets. Assume that a transaction database D with n = n + O ( m ) transactions contains X i itemset J i for each 0  X  i  X  2 t and D approximately satisfies the support constraints (
I k such that the following equations (1) hold for some integer integer k and an integer solution to the equations (1), then there is a transaction database D with n = n + O ( m ) trans-actions that approximately satisfies the support constraints (
I ,s 1 ) , ... , ( I m ,s m ) .
 where k is a large enough integer. In another word, if the given instance of the ApproSUPPSAT problem is satisfi-able, then the equations (1) have an integer solution. That is, the solution space for the equation (1) is a non-empty con-vex polyhedron. A simple argument 1 could then be used to show that there is an extreme point ( X 0 1 ,...,X 0 2 t necessarily an integer point) on this convex polyhedron that satisfies the following property:  X  There are at most m +1 non-zero values among the Let Y i =[ X 0 i ] be the closest integer to X 0 i for 1  X  and D Y be the transaction database that contains Y i copies of the itemset J i for each 0  X  i  X  2 t .Then D Y contains n + O ( m ) transactions and | support ( I i , D )  X  s i | = for all 0  X  i  X  m . In another word, the given instance of the ApproSUPP-SAT problem is satisfiable if and only if there exist item-sets J 1 ,...,J m +1 and an integer sequence x 1 ,...,x m such that the transaction database D consisting of x i copies of itemset J i for each i  X  m witnesses the satisfiability. Thus ApproSUPPSAT  X  NP which completes the proof of Lemma. Q.E.D.
 Lemma 2.2 ApproSUPPSAT is NP -hard.
 Proof. The proof is based on an amplification of the reduc-tion in the NP -hardness proof for FREQSAT in [2] which is alike the one given for 2SAT in [5]. In the following, we reduce the NP -complete problem 3-colorability to Appro-SUPPSAT. Given a graph G =( V, E ) , G is 3-colorable if there exists a 3-coloring function c : V  X  X  R, G, B } such that for each edge ( u, v ) in E we have c ( u ) = c ( v ) For the graph G =( V, E ) , we construct an instance A (
G ) of ApproSUPPSAT as follows. Let m =6 | V | +3 | E | , and n = k 0 m 2 for some large k 0 (note that we need k 0 for the constant k we will discuss later). Let the itemset I = { R v ,G v ,B v : v  X  B } and the m support constraints are defined as follows. For each vertex v  X  V : For each edge ( u, v )  X  E : In the following, we show that there is a transaction data-base D satisfying this ApproSUPPSAT problem if and only if G is 3-colorable.

Suppose that c is a 3-coloring of G .Let T be a transac-tion defined by letting T 1 = { C v : v  X  V } where Let transactions T 2 and T 3 be defined by colorings c and c resulting from cyclically rearranging the colors R, G, B in the coloring c . Let the transaction database D consist of ] copies of each of the transaction T 1 ,T 2 ,and T 3 (we may need to add one or two additional copies of T 1 if 3[ n 3 Then D satisfies the ApproSUPPSAT problem A ( G ) .
Suppose D is a transaction database satisfying the Ap-proSUPPSAT problem A ( G ) . We will show that there is a transaction T in D from which a 3-coloring of G could be constructed. Let I 1 be the collection of itemsets defined as
I 1 = {{ R v ,G v } , { R v ,B v } , { G v ,B v } : v  X  V } X  That is, I 1 is the collection of itemset that should have support according to the support constraints. Since D satis-fies A ( G ) , for each I  X  X  1 , support ( I , D )=0 is approxi-mately satisfied. Thus there is a constant k 1 &gt; 0 such that at most k 1 m  X |I 1 | =3 k 1 m ( | V | + | E | ) transactions in tain an itemset in I 1 .Let D 1 be the transaction database ob-tained from D by deleting all transactions that contain item-sets from I 1 .Then D 1 contains at least n  X  3 k 1 m ( | transactions.

For each vertex v  X  V , we say that a transaction ( tid, J in
D does not contain v if J does not contain any items from {
R v ,G v ,B v } .Since D satisfies A ( G ) , for each v  X  V , approximately one third of the transactions contain R v ( G B , respectively). Thus there is a constant k 2 &gt; 0 such that at most 3 k 2 m  X | V | transactions in D do not contain some vertex v  X  V . In another word, there are at least n  X  3 k 2 m  X | V | transactions J in D such that J contains v for all v  X  V .

Let D 2 be the transaction database obtained from D 1 by deleting all transactions J such that J does not contain some vertex v  X  V . The above analysis shows that D 2 contains k =max { k 1 ,k 2 } .Thenwehave By the assumption of k 0 at the beginning of this proof, we have |D 2 | X  1 . For any transaction J in D 2 , we can define a coloring c for G by letting By the definition of D 2 , the coloring c is defined unambigu-ously. That is, G is 3-colorable.
 This completes the proof for NP -hardness of ApproSUP-PSAT. Q.E.D.
 Theorem 2.3 ApproSUPPSAT is NP -complete.
 Proof. This follows from Lemma 2.1 and Lemma 2.2. Q.E.D.

We showed that the problem ApproSUPPSAT is NP -hard. In the proof of Lemma 2.2, we use the fact that the number n of transactions of the target basket database is larger than the multiplication of the number m of support constraints and the approximate error O ( m ) (that is, n is in the order of O ( m 2 ) ). In practice, the number n may not be larger than km 2 . Then one may wonder whether the prob-lem is still NP -complete. If n is very small, for example, at the order of O ( m ) , then obviously, the problem ApproSUP-PSAT becomes trivial since one can just construct the trans-action database as the collection of n copies of the itemset I (that is, the entire set of items). This is not a very in-teresting case since if n is at the order of m , one certainly does not want the approximate error to be at the order of n also. A reasonable problem could be that one defines a constant number  X  to replace the approximate error O ( m ) Then the proof in Lemma 2.2 shows that the problem Ap-proSUPPSAT with approximate error  X  (instead of O ( m ) ) is still NP -complete if n&gt; X m . Tighter bounds could be achieved if weighted approximate errors for different sup-port constraints are given.
In this section, we design and analyze a linear program based algorithm to approximate the NP -complete problem ApproSUPPSAT. Let I = { e 1 ,...,e t } be the collection of items, n be the number of transactions in the desired database D ,and ( I 1 ,s 1 ) , ( I 2 ,s 2 ) ,  X  X  X  , ( I m quence of support constraints. According to the proof of Lemma 2.1, if this instance of ApproSUPPSAT is solv-able, then there is a transaction database D , consisting of at most m +1 itemsets J 1 ,...,J m +1 , that satisfies these constraints. Let X 1 ,...,X m +1 be variables representing the numbers of duplicated copies of these itemsets in D re-spectively. That is, D contains X i copies of J i for each i . For all i  X  m and j  X  m +1 ,let x i,j and y i,j be variables with the property that x i,j = X j  X  y i,j and Then we have support ( I i , D )= x i, 1 +  X  X  X  + x i,m +1 above given ApproSUPPSAT instance could be formulated as the following question. subject to for i  X  m and j  X  m +1 .

The condition set (4) contains the nonlinear equation x i,j = X j  X  y i,j and the nonlinear condition specified in (2). Thus in order to approximate the given ApproSUPP-SAT instance using linear program techniques, we need to convert these conditions to linear conditions.

We first use characteristic arrays of variables to denote the unknown itemsets J 1 ,...,J m +1 . For any itemset I I ,letthe t -ary array  X  ( I )  X  X  0 , 1 } t be the characteris-tic array of I .Thatis,the i -th component  X  ( I )[ i ]=1 if and only if e i  X  I .Let  X  ( J 1 )=( u 1 , 1 ,...,u ... ,  X  ( J m +1 )=( u m +1 , 1 ,...,u m +1 ,t ) be a collection of ( m +1) t variables taking values from { 0 , 1 } , representing the characteristic arrays of J 1 ,...,J m +1 respectively.
In order to convert the condition specified in (2) to lin-ear conditions. we first use inner product constraints to represent the condition I i  X  J j . For two characteris-tic arrays  X  1 and  X  2 , their inner product is defined as  X  1  X   X  2 =  X  1 [1]  X   X  2 [1] +  X  X  X  +  X  1 [ t ]  X   X  2 [ t ] forward to show that for two itemsets I,J  X  X  ,wehave  X  ( I )  X   X  ( J )  X  min {| I | , | J |} and  X  ( I )  X   X  ( J )= | only if I  X  J .

Now the following conditions in (5) will guarantee that the condition in (2) is satisfied. for all i  X  m , j  X  m +1 ,and k  X  t . The geometric in-terpretation of this condition is as follows. If we consider (  X  ( J j )  X   X  ( I i ) ,y i,j ) as a point in the 2-dimensional space ( x, y ) shown in Figure 1, then | I i | y  X  x defines points below the line passing the points (0 , 0) and ( | I i | x  X  y + | I i | X  1 defines the points above the line passing through the points ( | I i | X  1 , 0) and ( | I i | , 1) . Thus y if and only if  X  ( J j )  X   X  ( I i )= | I i | .Thatis, y i,j only if I i  X  J j .
The nonlinear equations x i,j = X j  X  y i,j can be con-verted to the following conditions consisting of inequali-ties.  X  for all i  X  m and j  X  m +1 . The constant n is used in the inequalities due to the fact that X j  X  n for all j  X  m +1 The geometric interpretation for the above inequalities is described in the following. If we consider ( x i,j ,y i,j a point in a 3-dimensional space ( x, y, X ) shown in Figure 2, then 1. x  X  ny =0 defines the plane passing through points 2. X  X  x defines the points above the plane passing 3. ny + X  X  x  X  n defines the points below the Note : For the reason of convenience, we introduced the in-termediate variables y i,j . In order to improve the linear pro-gram performance, we may combine the conditions (5) and (6) to cancel the variables y i,j .
 Thus the integer programming formulation for the given ApproSUPPSAT instance is as follows. subject to conditions (5), (6), and for i  X  m and j  X  m +1 . We first solve the linear relax-ation of this integer program. That is, replace the second equation in the condition (5) by 0  X  y i,j ,u j,k  X  1 for all i  X  m, j  X  m +1 , and k  X  t and replace the third equation in the condition (8) by t } denote an optimal solution to this relaxed linear pro-gram. There are several ways to construct an integer so-lution  X  o from o  X  .Let OP T ( z ; I ) denote the optimal value of z 1 +  X  X  X  + z m for a given ApproSUPPSAT instance I and OP T ( z ; I ) be the corresponding value for the computed in-teger solution. For an approximation algorithm, one may prefer to compute a number  X  such that Theorem2.3showsthatitis NP -hard to approximate the ApproSUPPSAT by an additive polynomial factor. Thus OP T ( z ; I ) is not in the order of O ( m ) in the worst case for any polynomial time approximation algorithms, and it is not very interesting to analyze the worst case for our al-gorithm.

In the full version of this paper, we will describe several simple rounding methods to get an integer solution  X  o from o . We will also discuss improved randomized and deran-domized rounding methods in the full version of the paper.
In the integer linear program formulation of our prob-lem, we have t ( m +1) variables u j,k , m +1 variables X m ( m +1) variables x i,j , m ( m +1) variables y i,j ,and m variables z i .Intotal,wehave t ( m +1)+2 m 2 +4 m +1 variables.

There are ( m + 1)(2 m + t ) constraints in the condition (5), 4 m ( m +1) constraints in the condition (5), and 3 m constraints in the condition (8). Thus we have 6 m 2 +9 m mt + t +2 constraints in total.

Generally, the rounding, randomized, and derandomized rounding algorithms (the reader is referred to the full ver-sion of this paper) could be finished in O ( tm 3 ) steps. Thus the major challenge is to solve the relaxed continuous vari-ables linear program. According to [6], hundreds of thou-sands of continuous variables are regularly solved. Thus our approximation algorithm are efficient when m and t takes reasonable values.
Wang, Wu, and Zheng [10] considered general informa-tion disclosure in the process of mock database generation. In this section, we discuss privacy disclosures in synthetic transaction databases. Confidential information in transac-tion databases may be specified as a collection of itemsets and their corresponding support (frequency) intervals. Let P be a set defined as follows.
 We say that a (synthetic) transaction database D does not disclose confidential information specified in P if one can-not infer that confidential information specified in P if for each element (
I ,s i ,S i )  X  X  , there is a transaction database D i that sat-isfies all support constraints in S and
For the synthetic transaction database generation, there are two scenarios for potential private information disclo-sure. In the first scenario, the database owner uses the fol-lowing procedure to generate the synthetic transaction data-base: 1. use a software package to mine the real-world transac-2. use a software package based on our linear program 3. release the synthetic transaction database D to the pub-In this scenario, the mined support (frequency) constraints are not released to the public and only the synthetic transac-tion database is released. In this case, it is straightforward to protect the confidential information specified in P .The database owner proceeds according to the above steps until step 3 . Before releasing the synthetic transaction database D , he can delete the confidential information as follows.  X  For each ( I i ,s i ,S i )  X  X  , chooses a random number After the above process, the resulting transaction database contains no confidential information specified in P and the database owner is ready to release it.

In the second scenario, the database owner uses the fol-lowing procedure to generate the synthetic transaction data-base: 1. use a software package to mine the real-world transac-2. release the support (frequency) constraints to the pub-3. a customer who has interest in a synthetic transaction In this scenario, the mined support (frequency) constraints are released to the public directly. Thus the database owner wants to make sure that no confidential information spec-ified in P is contained in these support (frequency) con-straints. Without loss of generality, we assume that there is a single element ( I,s,S ) in P and the mined support constraints are S = { ( I i ,s i ): i  X  m } . S contains the confidential information ( I,s,S ) if and only if for each transaction database D which is consistent with S ,wehave support ( I ; D )  X  [ s, S ] . In another word, S does not con-tain the confidential information ( I,s,S ) if and only if there exists an integer s with s &lt;s or S&lt;s &lt;n such that S X  X  ( I,s ) } is consistent. That is, there is a trans-action database D that satisfies all support constraints in S X  X  ( I,s ) } . In the following, we show that there is even no efficient way to approximat ely decide whether a given support constraint set contains confidential information. We first define the problem formally.
 ApproPrivacy Instance :Aninteger n , an item set I , a support con-straint set S = { ( I 1 ,s 1 ) ,  X  X  X  , ( I m ,s m ) } ,andaset { ( I i ,s i ,S i ): I i  X  X  ,i  X  l } .
 Question : For all transaction database D of n transactions over I with | support ( I i , D )  X  s i | = O ( m ) for all m ,dowehave support ( I i , D )  X  [ s i ,S i ] for all i  X  the answer is yes, we write S| = a P .
 By Theorem 2.3, we have the following result. Similar NP -hardness results for exact frequency constraints infer-ence have been obtained in [2, 3, 7].
 Theorem 4.1 ApproPrivacy is co NP -complete.

Proof. S | = a P if and only if there is a transac-tion database D andanindex j  X  l such that D satis-fies S X  X  ( I j , support ( I j , D ) &lt;s i ) } or D satisfies { (
I j , support ( I j , D ) &gt;S i ) } approximately. Thus the the-orem follows from Theorem 2.3. Q.E.D.

Thus there is no efficient way for the database owner to decide whether a support constraint set S leaks confidential information specified in P . In practice, however, we can use the linear program based approximation algorithms that we have discussed in Section 3 to compute the confidence level about private information leakage as follows. 1. Convert the condition S X  X  ( I,s ): s &lt;s or S&lt; 2. Let the confidence level be c = m i =1 z i . The smaller If the database owner thinks that the confidence value c = i =1 z i obtained in the above procedure is too larger (thus confidence level is too low). He may use the following pro-cedure to delete potential confidential information from the support constraint set. 1. Let i be the number that maximizes max ( I i ,s i )  X  X  2. Modify the value s i to be a random value. 3. Approximately revise support constraint values in S It should be noted that after the above process, the resulting support constraint set may become inconsistent. Thus in the next round, the value c = m i =1 z i may be larger. If that happens, the larger value c does not interpret as the privacy confidence level. Instead, it should be interpreted as an indicator for inconsistency of the support constraint set. Thus the above privacy deletion procedure should only be carried out one time.

We should note that even if the confidence level is higher, (that is, c = m i =1 z i is small), there is still possibility that the confidential information specified by ( I,s,S ) is leaked in theory. That is, for each transaction database D that sat-isfies the constraints S ,wehave support ( I, D )  X  [ s, S However, no one may be able to recover this information since it is NP -hard to infer this fact. Support constraint in-ference has been extensively studied by Calders in [2, 3].
It would be interesting to consider conditional privacy-preserving synthetic transaction database generations. That is, we say that no private information is leaked unless some hardness problems are solved efficiently. This is similar to the methodologies that are used in public key cryptography. For example, we believe that RSA encryption scheme is se-cure unless one can factorize large integers.

In our case, we may assume that it is hard on average to efficiently solve integer linear programs. Based on this assumption, we can say that unless integer linear programs could be solved efficiently on average, no privacy specified in
P is leaked by S if the computed confidence level c =
In this paper, we discussed the general problems regard-ing privacy preserving synthetic transaction database gen-eration for benchmark testing purpose. In particular, we showed that this problem is generally NP -hard. Approx-imation algorithms for both synthetic transaction database generation and privacy leakage confidence level approxima-tion have been proposed. These approximation algorithms include solving a continuous variable linear program. Ac-cording to [6], linear problems having hundreds of thou-sands of continuous variables are regularly solved. Thus if the support constraint set size is in the order of hundreds of thousands, then these approximation algorithms are ef-ficient on regular Pentium-based computers. If more con-straints are necessary, then more powerful computers are needed to generate synthetic transaction databases. [1] R. Agrawal, T. Imilienski, and A. Swami. Mining as-[2] T. Calders. Axiomatization and Deduction Rules for [3] T. Calders. Computational complexity of itemset fre-[4] R. Fagin, J. Halpern, and N. Megiddo. A logic for rea-[5] G. Georgakopoulos, D. Kavvadias, and C. Papadim-[6] Linear Programming Frequently Asked Questions. [7] T. Mielik  X  ainen. On inverse frequent set mining. In: [8] C. Potts. Analysis of a linear programming heuristic [9] G. Ramesh, W. Maniatty, and M. Zaki. Feasible item-[10] Y. Wang, X. Wu, and Y. Zheng. Privacy preserving [11] X. Wu, Y. Wu, Y. Wang, and Y. Li. Privacy aware mar-[12] Z. Zheng, R. Kohavi, and L. Mason. Real world
