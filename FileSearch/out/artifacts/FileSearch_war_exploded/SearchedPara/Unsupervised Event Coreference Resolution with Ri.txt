 The event coreference task consists of finding clusters of event mentions that refer to the same event. Although it has not been extensively stud-ied in comparison with the related problem of en-tity coreference resolution, solving event coref-erence has already proved its usefulness in vari-ous applications such as topic detection and track-ing (Allan et al., 1998), information extraction (Humphreys et al., 1997), question answering (Narayanan and Harabagiu, 2004), textual entail-ment (Haghighi et al., 2005), and contradiction de-tection (de Marneffe et al., 2008).

Previous approaches for solving event corefer-ence relied on supervised learning methods that explore various linguistic properties in order to de-cide if a pair of event mentions is coreferential or not (Humphreys et al., 1997; Bagga and Bald-win, 1999; Ahn, 2006; Chen and Ji, 2009). In spite of being successful for a particular labeled corpus, these pairwise models are dependent on the domain or language that they are trained on. Moreover, since event coreference resolution is a complex task that involves exploring a rich set of linguistic features, annotating a large corpus with event coreference information for a new language or domain of interest requires a substantial amount of manual effort. Also, since these models are de-pendent on local pairwise decisions, they are un-able to capture a global event distribution at topic or document collection level.

To address these limitations and to provide a more flexible representation for modeling observ-able data with rich properties, we present two novel, fully generative, nonparametric Bayesian models for unsupervised within-and cross-document event coreference resolution. The first model extends the hierarchical Dirichlet process (Teh et al., 2006) to take into account additional properties associated with observable objects (i.e., event mentions). The second model overcomes some of the limitations of the first model. It uses the infinite factorial hidden Markov model (Van Gael et al., 2008b) coupled to the infinite hidden Markov model (Beal et al., 2002) in or-der to (1) consider a potentially infinite number of features associated with observable objects, (2) perform an automatic selection of the most salient features, and (3) capture the structural dependen-cies of observable objects at the discourse level. Furthermore, both models are designed to account for a potentially infinite number of categorical out-comes (i.e., events). These models provide addi-tional details and experimental results to our pre-liminary work on unsupervised event coreference resolution (Bejan et al., 2009). The problem of determining if two events are iden-tical was originally studied in philosophy. One relevant theory on event identity was proposed by Davidson (1969) who argued that two events are identical if they have the same causes and effects. Later on, a different theory was proposed by Quine (1985) who considered that each event refers to a physical object (which is well defined in space and time), and therefore, two events are identical if they have the same spatiotemporal location. In (Davidson, 1985), Davidson abandoned his sug-gestion to embrace the Quinean theory on event identity (Malpas, 2009). 2.1 An Example In accordance with the Quinean theory, we con-sider that two event mentions are coreferential if they have the same event properties and share the same event participants . For instance, the sen-tences from Example 1 encode event mentions that refer to several individuated events. These sen-tences are extracted from a newly annotated cor-pus with event coreference information (see Sec-tion 4). In this corpus, we organize documents that describe the same seminal event into topics. In particular, the topics shown in this example de-scribe the seminal event of buying ATI by AMD (topic 43) and the seminal event of buying EDS by HP (topic 44).

Although all the event mentions of interest em-phasized in boldface in Example 1 evoke the same generic event buy , they refer to three individu-ated events: e 1 = { em 1 , em 2 } , e 2 = { em 3  X  6 , em 8 } , and e 3 = { em 7 } . For example, em 1 ( buy ) and em 3 ( buy ) correspond to different individuated events since they have a different A GENT ([B U -YER ( em 1 ) = AMD ] 6 = [B UYER ( em 3 ) = HP ]). This organization of event mentions leads to the idea of creating an event hierarchy which has on the first level, event mentions , on the second level, individ-uated events , and on the third level, generic events . In particular, the event hierarchy corresponding to the event mentions annotated in our example is il-lustrated in Figure 1.

Solving the event coreference problem poses many interesting challenges. For instance, in or-der to solve the coreference chain of event men-tions that refer to the event e 2 , we need to take into account the following issues: (i) a coreference chain can encode both within-and cross-document coreference information; (ii) two mentions from the same chain can have different word classes (e.g., em 3 ( buy ) X  X erb, em 4 ( purchase ) X  X oun); (iii) not all the mentions from the same chain are syn-onymous (e.g., em 3 ( buy ) and em 8 ( acquire )), al-though a semantic relation might exist between them (e.g., in WordNet (Fellbaum, 1998), the genus of buy is acquire ); (iv) partial (or all) prop-erties and participants of an event mention can be omitted in text (e.g., em 4 ( purchase )). In Section 5, we discuss additional aspects of the event coref-erence problem that are not revealed in Example 1. 2.2 Linguistic Features The events representing coreference clusters of event mentions are characterized by a large set of linguistic features. To compute an accurate event distribution for event coreference resolution, we associate the following categories of linguistic fea-tures with each annotated event mention.
 Lexical Features (LF) We capture the lexical con-text of an event mention by extracting the follow-ing features: the head word ( HW ), the lemmatized head word ( HL ), the lemmatized left and right words surrounding the mention ( LHL , RHL ), and the HL features corresponding to the left and right mentions ( LHE , RHE ). For instance, the lexical fea-tures extracted for the event mention em 7 ( bought ) from our example are HW : bought , HL : buy , LHL : it , RHL : Compaq , LHE : acquisition , and RHE : acquire . Class Features (CF) These features aim to group mentions into several types of classes: the part-of-speech of the HW feature ( POS ), the word class of the HW feature ( HWC ), and the event class of the mention ( EC ). The HWC feature can take one of the following values: VERB , NOUN , ADJEC -TIVE , and OTHER . As values for the EC feature, we consider the seven event classes defined in the TimeML specification language (Pustejovsky I STATE . In order to extract the event classes cor-responding to the event mentions from a given dataset, we employed the event extractor described in (Bejan, 2007). This extractor is trained on the TimeBank corpus (Pustejovsky et al., 2003b), which is a TimeML resource encoding temporal elements such as events, time expressions, and temporal relations.
 WordNet Features (WF) In our efforts to create clusters of event mention attributes as close as pos-sible to the true attribute clusters of the individu-ated events, we build two sets of word clusters us-ing the entire lexical information from the Word-Net database. After creating these sets of clusters, we then associate each event mention with only one cluster from each set. The first set uses the transitive closure of the WordNet SYNONYMOUS relation to form clusters with all the words from WordNet ( WNS ). For instance, the verbs buy and purchase correspond to the same cluster ID be-cause there exist a chain of SYNONYMOUS rela-tions between them in WordNet. The second set considers as grouping criteria the categorization of words from the WordNet lexicographer X  X  files (
WNL ). In addition, for each word that is not cov-ered in WordNet, we create a new cluster ID in each set of clusters.
 Semantic Features (SF) To extract features that characterize participants and properties of event mentions, we use the semantic parser described in (Bejan and Hathaway, 2007). One category of semantic features that we identify for event men-tions is the predicate argument structures encoded in PropBank annotations (Palmer et al., 2005). In PropBank, the predicate argument structures are represented by events expressed as verbs in text and by the semantic roles, or predicate argu-ments , associated with these events. For example, ARG 0 annotates a specific type of semantic role which represents the AGENT , DOER , or ACTOR of a specific event. Another argument is ARG 1 , which plays the role of the PATIENT , THEME , or EXPERIENCER of an event. In particular, the predicate arguments associated to the event men-tion em 8 ( bought ) from Example 1 are ARG 0 :[ it ], ARG 1 :[ Compaq Computer Corp. ], ARG 3 :[ for $ 19 billion ], and ARG -TMP :[ in 2002 ].

Event mentions are not only expressed as verbs in text, but also as nouns and adjectives. There-fore, for a better coverage of semantic features, we also employ the semantic annotations encoded in the FrameNet corpus (Baker et al., 1998). FrameNet annotates word expressions capable of evoking conceptual structures, or semantic frames , which describe specific situations, objects, or events (Fillmore, 1982). The semantic roles as-sociated with a word in FrameNet, or frame ele-ments , are locally defined for the semantic frame evoked by the word. In general, the words anno-tated in FrameNet are expressed as verbs, nouns, and adjectives.

To preserve the consistency of semantic role features, we align frame elements to predicate ar-guments by running the PropBank semantic parser on the manual annotations from FrameNet; con-versely, we also run the FrameNet parser on the manual annotations from PropBank. Moreover, to obtain a better alignment of semantic roles, we run both parsers on a large amount of unlabeled text. The result of this process is a map with all frame elements statistically aligned to all predi-cate arguments. For instance, in 99.7% of the cases the frame element BUYER of the semantic frame C OMMERCE B UY is mapped to ARG 0 , and in the remaining 0.3% of the cases to ARG 1 . Ad-ditionally, we use this map to create a more gen-eral semantic feature which assigns to each predi-cate argument a frame element label. In particular, the features for em 8 ( acquire ) are FEA 0 : BUYER ,
Two additional semantic features used in our ex-periments are: (1) the semantic frame ( FR ) evoked by every mention; 1 and (2) the WNS feature ap-plied to the head word of every semantic role (e.g., Feature Combinations (FC) We also explore var-ious combinations of the features presented above. Examples include HW + HWC , HL + FR , FR + ARG 1 ,
It is worth noting that there exist event mentions for which not all the features can be extracted. For example, the LHE and RHE features are missing for the first and last event mentions in a document, respectively. Also, many semantic roles can be ab-sent for an event mention in a given context. As input for our models, we consider a collection of I documents, where each document i has J i event mentions. For features, we make the dis-tinction between feature types and feature values (e.g., POS is a feature type and has values such as NN and VB ). Each event mention is charac-terized by L feature types, FT , and each feature type is represented by a finite vocabulary of fea-ture values, f v . Thus, we can represent the ob-servable properties of an event mention as a vec-tor of L feature type  X  feature value pairs h ( FT 1 : f v 1 i ) , . . . , ( FT L : f v Li ) i , where each feature value index i ranges in the feature value space associated with a feature type. 3.1 A Finite Feature Model We present an extension of the hierarchical Dirich-let process (HDP) model which is able to represent each observable object (i.e., event mention) by a finite number of feature types L . Our HDP ex-tension is also inspired from the Bayesian model proposed by Haghighi and Klein (2007). How-ever, their model is strictly customized for entity coreference resolution, and therefore, extending it to include additional features for each observable object is a challenging task (Ng, 2008; Poon and Domingos, 2008).

In the HDP model, a Dirichlet process (DP) (Ferguson, 1973) is associated with each docu-ment, and each mixture component (i.e., event) is shared across documents. To describe its exten-sion, we consider Z the set of indicator random variables for indices of events,  X  z the set of param-eters associated with an event z ,  X  a notation for all model parameters, and X a notation for all ran-dom variables that represent observable features. 2 Given a document collection annotated with event mentions, the goal is to find the best assignment of event indices Z  X  , which maximize the poste-rior probability P ( Z | X ) . In a Bayesian approach, this probability is computed by integrating out all model parameters: Our HDP extension is depicted graphically in Figure 2(a). Similar to the HDP model, the dis-tribution over events associated with each docu-ment,  X  , is generated by a Dirichlet process with a concentration parameter  X  &gt; 0 . Since this setting enables a clustering of event mentions at the doc-ument level, it is desirable that events be shared across documents and the number of events K be inferred from data. To ensure this flexibility, a global nonparametric DP prior with a hyperparam-eter  X  and a global base measure H can be consid-ered for  X  (Teh et al., 2006). The global distri-bution drawn from this DP prior, denoted as  X  0 in Figure 2(a), encodes the event mixing weights. Thus, same global events are used for each docu-ment, but each event has a document specific dis-tribution  X  i that is drawn from a DP prior centered on the global weights  X  0 .
 To infer the true posterior probability of P ( Z | X ) , we follow (Teh et al., 2006) and use the Gibbs sampling algorithm (Geman and Ge-man, 1984) based on the direct assignment sam-pling scheme. In this sampling scheme, the pa-rameters  X  and  X  are integrated out analytically. Moreover, to reduce the complexity of comput-ing P ( Z | X ) , we make the na  X  X ve Bayes assump-tion that the feature variables X are conditionally independent given Z . This allows us to factorize the joint distribution of feature variables X condi-tioned on Z into product of marginals. Thus, by Bayes rule, the formula for sampling an event in-dex for mention j from document i , Z i,j , is: 3 where X i,j represents the feature value of a feature type corresponding to the event mention j from the document i .

In the process of generating an event mention, an event index z is first sampled by using a mech-anism that facilitates sampling from a prior for in-finite mixture models called the Chinese restau-rant franchise (CRF) representation, as reported in (Teh et al., 2006): Here, n z is the number of event mentions with event index z , z new is a new event index not used already in Z  X  i,j ,  X  z 0 are the global mixing propor-tions associated with the K events, and  X  u 0 is the weight for the unknown mixture component.

Next, to generate a feature value x (with the fea-ture type X ) of the event mention, the event z is associated with a multinomial emission distribu-tion over the feature values of X having the pa-rameters  X  = h  X  x Z i . We assume that this emission distribution is drawn from a symmetric Dirichlet distribution with concentration  X  X : where X i,j is the feature type of the mention j from the document i , and n x,z is the number of times the feature value x has been associated with the event index z in ( Z , X  X  i,j ). We also apply the Lidstone X  X  smoothing method to this distribution. In cases when only a feature type is considered (e.g., X = h HL i ), the HDP flat model is identical with the original HDP model. We denote this one feature model by HDP 1 f .

When dependencies between feature variables exist (e.g., in our case, frame elements are de-pendent on the semantic frames that define them, and frames are dependent on the words that evoke them), various global distributions are involved for computing P ( Z | X ) . For the model depicted in Figure 2(b), for instance, the posterior probability is given by: P ( Z i,j ) P ( F R i,j | HL i,j ,  X  ) Y In this formula, P ( F R i,j | HL i,j ,  X  ) is a global dis-tribution parameterized by  X  , and X is a feature variable from the set X = h HL, P OS, F R i . For the sake of clarity, we omit the conditioning com-ponents of Z , HL , FR , and POS . 3.2 An Infinite Feature Model To relax some of the restrictions of the first model, we devise an approach that combines the infinite factorial hidden Markov model (iFHMM) with the infinite hidden Markov model (iHMM) to form the iFHMM-iHMM model.

The iFHMM framework uses the Markov In-dian buffet process (mIBP) (Van Gael et al., 2008b) in order to represent each object as a sparse subset of a potentially unbounded set of latent fea-tures (Griffiths and Ghahramani, 2006; Ghahra-mani et al., 2007; Van Gael et al., 2008a). 4 Specif-ically, the mIBP defines a distribution over an un-bounded set of binary Markov chains, where each chain can be associated with a binary latent fea-ture that evolves over time according to Markov dynamics. Therefore, if we denote by M the to-tal number of feature chains and by T the num-ber of observable components, the mIBP defines a probability distribution over a binary matrix F with T rows, which correspond to observations, and an unbounded number of columns M , which correspond to features. An observation y t con-tains a subset from the unbounded set of features { f 1 , f 2 , . . . , f M } that is represented in the matrix F t = 1 indicates that f other words, F decomposes the observations and represents them as feature factors, which can then be associated with hidden variables in an iFHMM model as depicted in Figure 2(c).
Although the iFHMM allows a more flexible representation of the latent structure by letting the number of parallel Markov chains M be learned from data, it cannot be used as a framework where the number of clustering components K is infi-nite. On the other hand, the iHMM represents a nonparametric extension of the hidden Markov model (HMM) (Rabiner, 1989) that allows per-forming inference on an infinite number of states K . To further increase the representational power for modeling discrete time series data, we propose a nonparametric extension that combines the best of the two models, and lets the parameters M and K be learned from data.

As shown in Figure 2(c), each step in the new iHMM-iFHMM generative process is performed in two phases: (i) the latent feature variables from the iFHMM framework are sampled using the mIBP mechanism; and (ii) the features sampled so far, which become observable during this second phase, are used in an adapted version of the beam sampling algorithm (Van Gael et al., 2008a) to in-fer the clustering components (i.e., latent events).
In the first phase, the stochastic process for sam-pling features in F is defined as follows. The first component samples a number of Poisson (  X   X  ) fea-tures. In general, depending on the value that was sampled in the previous step ( t  X  1 ), a feature f m is sampled for the t th component according to the probabilities. 5 After all features are sampled for the t th component, a number of Poisson (  X   X  /t ) new features are assigned for this component, and M gets incremented accordingly.

To describe the adapted beam sampler, which is employed in the second phase of the generative process, we introduce additional notations. We de-note by ( s 1 , . . . , s T ) the sequence of hidden states corresponding to the sequence of event mentions ( y 1 , . . . , y T ) , where each state s t belongs to one of the K events, s t  X  X  1 , . . . , K } , and each men-tion y t is represented by a sequence of latent fea-sition probability  X  is defined as  X  ij = P ( s t = j | s t  X  1 = i ) , and a mention y t is generated according to a likelihood model F that is parameterized by a state-dependent parameter  X  s The observation parameters  X  are drawn indepen-dently from an identical prior base distribution H .
The beam sampling algorithm combines the ideas of slice sampling and dynamic program-ming for an efficient sampling of state trajectories. Since in time series models the transition probabil-ities have independent priors (Beal et al., 2002), Van Gael and colleagues (2008a) also used the HDP mechanism to allow couplings across transi-tions. For sampling the whole hidden state trajec-tory s , this algorithm employs a forward filtering-backward sampling technique.

In the forward step of our adapted beam sam-pler, for each mention y t , we sample features us-ing the mIBP mechanism and the auxiliary vari-able u t  X  Uniform (0 ,  X  s (Van Gael et al., 2008a), the auxiliary variables u are used to filter only those trajectories s for which  X  pute the probabilities P ( s t | y 1: t , u 1: t ) for all t : Here, the dependencies involving parameters  X  and  X  are omitted for clarity.

In the backward step, we first sample the event for the last state s T directly from P ( s T | y 1: T , u 1: T ) and then, for all t : T  X  1 . . . 1 , we sam-ple each state s t given s t +1 by using the formula s , u t +1 ) . To sample the emission distribution  X  efficiently, and to ensure that each mention is characterized by a finite set of representative fea-tures, we set the base distribution H to be con-jugate with the data distribution F in a Dirichlet-multinomial model with the multinomial parame-ters ( o 1 , . . . , o K ) defined as: In this formula, n mk counts how many times the feature f m was sampled for the event k , and B t stores a finite set of features for y t .

The mechanism for building a finite set of rep-resentative features for the mention y t is based on slice sampling (Neal, 2003). Letting q m be the number of times the feature f m was sampled in the mIBP, and v t an auxiliary variable for y t such that v  X  Uniform (1 , max { q m : F m t = 1 } ) , we define the finite feature set B t for the observation y t as B t = { f m : F m t = 1  X  q m  X  v t } . The finiteness of this feature set is based on the observation that, in the generative process of the mIBP, only a finite set of features are sampled for a component. We de-note this model as iFHMM-iHMM uniform . Also, it is worth mentioning that, by using this type of sampling, only the most representative features of y get selected in B t .

Furthermore, we explore the mechanism for selecting a finite set of features associated with an observation by: (1) considering all the ob-servation X  X  features whose corresponding feature counter q m  X  1 ( unf iltered ); (2) selecting only the higher half of the feature distribution consist-ing of the observation X  X  features that were sampled at least once in the mIBP model ( median ); and (3) sampling v t from a discrete distribution of the observation X  X  features that were sampled at least once in the mIBP ( discrete ). Datasets One dataset we employed is the au-tomatic content extraction (ACE) (ACE-Event, 2005). However, the utilization of the ACE corpus for the task of solving event coreference is lim-ited because this resource provides only within-document event coreference annotations using a restricted set of event types such as LIFE , BUSI -second dataset, we created the EventCorefBank (ECB) corpus 6 to increase the diversity of event types and to be able to evaluate our models for both within-and cross-document event corefer-ence resolution. One important step in the cre-ation process of this corpus consists in finding sets of related documents that describe the same semi-nal event such that the annotation of coreferential event mentions across documents is possible. For this purpose, we selected from the GoogleNews archive 7 various topics whose description contains keywords such as commercial transaction , attack , death , sports , terrorist act , election , arrest , natu-ral disaster , etc. The entire annotation process for creating the ECB resource is described in (Bejan and Harabagiu, 2008). Table 1 lists several basic statistics extracted from these two corpora. Evaluation For a more realistic approach, we not only trained the models on the manually annotated event mentions (i.e., true mentions), but also on all the possible mentions encoded in the two datasets. To extract all event mentions, we ran the event identifier described in (Bejan, 2007). The men-tions extracted by this system (i.e., system men-tions) were able to cover all the true mentions from both datasets. As shown in Table 1, we extracted from ACE and ECB corpora 45289 and 21175 sys-tem mentions, respectively.

We report results in terms of recall (R), preci-sion (P), and F-score (F) by employing the men-tion -based B 3 metric (Bagga and Baldwin, 1998), the entity -based CEAF metric (Luo, 2005), and the pairwise F1 ( PW ) metric. All the results are av-eraged over 5 runs of the generative models. In the evaluation process, we considered only the true mentions of the ACE test dataset, and the event mentions of the test sets derived from a 5-fold cross validation scheme on the ECB dataset. For evaluating the cross-document coreference an-notations, we adopted the same approach as de-scribed in (Bagga and Baldwin, 1999) by merg-ing all the documents from the same topic into a meta-document and then scoring this document as performed for within-document evaluation. For both corpora, we considered a set of 132 feature types, where each feature type consists on average of 3900 distinct feature values.
 Baselines We consider two baselines for event coreference resolution (rows 1&amp;2 in Tables 2&amp;3). One baseline groups each event mention by its event class (BL eclass ). Therefore, for this baseline, we cluster mentions according to their correspond-ing EC feature value. Similarly, the second base-line uses as grouping criteria for event mentions their corresponding WNS feature value (BL syn ). HDP Extensions Due to memory limitations, we evaluated the HDP models on a restricted set of manually selected feature types. In general, the HDP 1 f model with the feature type HL , which plays the role of a baseline for the HDP flat and HDP struct models, outperforms both baselines on the ACE and ECB datasets. For the HDP flat mod-els (rows 4 X 7 in Tables 2&amp;3), we classified the ex-periments according to the set of feature types de-scribed in Section 2. Our experiments reveal that the best configuration of features for this model consists of a combination of feature types from all the categories of features (row 7). For the HDP struct experiments, we considered the set of features of the best HDP flat experiment as well as the dependencies between HL , FR , and FEA . Over-all, we can assert that HDP flat achieved the best performance results on the ACE test dataset (Ta-ble 3), whereas HDP struct proved to be more ef-fective on the ECB dataset (Table 2). Moreover, the results of the HDP flat and HDP struct models show an F-score increase by 4-10% over HDP 1 f , and therefore, the results prove that the HDP ex-tension provides a more flexible representation for clustering objects with rich properties.

We also plot the evolution of our generative processes. For instance, Figure 3(a) shows that the HDP flat model corresponding to row 7 in Ta-ble 3 converges in 350 iteration steps to a posterior distribution over event mentions from ACE with around 2000 latent events. Additionally, our ex-periments with different values of the  X  parame-ter for the Lidstone X  X  smoothing method indicate that this smoothing method is useful for improv-ing the performance of the HDP models. How-ever, we could not find a  X  value in our experi-ments that brings a major improvement over the non-smoothed HDP models. Figure3(b) shows the performances of HDP struct on ECB with various  X  values. 8 The HDP results from Tables 2&amp;3 corre-spond to a  X  value of 10  X  4 and 10  X  2 for HDP flat and HDP struct , respectively. iFHMM-iHMM In spite of the fact that the iFHMM-iHMM model employs automatic feature selection, its results remain competitive against the results of the HDP models, where the fea-ture types were manually tuned. When compar-ing the strategies for filtering feature values in this framework, we could not find a distinct separation between the results obtained by the unf iltered , discrete , median , and unif orm models. As ob-served from Tables 2&amp;3, most of the iFHMM-iHMM results fall in between the HDP flat and HDP struct results. The results were obtained by automatically selecting only up to 1.5% of distinct feature values. Figure 3(c) shows the percents of features employed by this model for various val-ues of the parameter  X   X  that controls the number of sampled features. The best results (also listed in Tables 2&amp;3) were obtained for  X   X  = 10 (0.05%) on ACE and  X   X  = 150 (0.91%) on ECB.

To show the usefulness of the sampling schemes considered for this model, we also compare in Table 4 the results obtained by an iFHMM-iHMM model that considers all the feature values associated with an observable object (iFHMM-iHMM all ) against the iFHMM-iHMM models that employ the mIBP sampling scheme together with the unf iltered , discrete , median , and unif orm filtering schemes. Because of the memory limi-tation constraints, we performed the experiments listed in Table 4 by selecting only a subset from the feature types which proved to be salient in the HDP experiments. As listed in Table 4, all the iFHMM-iHMM models that used a fea-ture sampling scheme significantly outperform the iFHMM-iHMM all model; this proves that all the sampling schemes considered in the iFHMM-iHMM framework are able to successfully filter out noisy and redundant feature values.

The closest comparison to prior work is the supervised approach described in (Chen and Ji, 2009) that achieved a 92.2% B 3 F-measure on the ACE corpus. However, for this result, ground truth event mentions as well as a manually tuned coref-erence threshold were employed. One frequent error occurs when a more complex form of semantic inference is needed to find a cor-respondence between two event mentions of the same individuated event. For instance, since all properties and participants of em 3 ( deal ) are omit-ted in our example and no common features ex-ist between em 3 ( buy ) and em 1 ( buy ) to indicate a similarity between these mentions, they will most probably be assigned to different clusters. This ex-ample also suggests the need for a better modeling of the discourse salience for event mentions.
Another common error is made when match-ing the semantic roles corresponding to coref-erential event mentions. Although we simu-lated entity coreference by using various seman-tic features, the task of matching participants of coreferential event mentions is not completely solved. This is because, in many coreferen-tial cases, partonomic relations between seman-tic roles need to be inferred. 9 Examples of such relations extracted from ECB are Israeli Indian navy , his cell PART OF  X  X  X  X  X  X  X  Sicilian jail . Simi-larly for event properties, many coreferential ex-amples do not specify a clear location and time interval (e.g., Jabaliya refugee camp PART OF  X  X  X  X  X  X  X  Gaza , Tuesday PART OF  X  X  X  X  X  X  X  this week ). In future work, we plan to build relevant clusters using partonomies and taxonomies such as the WordNet hierarchies NYMY / HYPONYMY relations, respectively. 10 We have presented two novel, nonparametric Bayesian models that are designed to solve com-plex problems that require clustering objects char-acterized by a rich set of properties. Our experi-ments for event coreference resolution proved that these models are able to solve real data applica-tions in which the feature and cluster numbers are treated as free parameters, and the selection of fea-ture values is performed automatically.
