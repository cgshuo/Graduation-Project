 In wireless sensor networks, various schemes have been pro-posed to efficiently store and process sensed data. Among them, the Data-Centric Storage (DCS) scheme is one of the most well-known. The DCS scheme distributes data regions and stores the data in the sensor that is responsible for the region. In this paper, we propose a new DCS based scheme, called Time-Parameterized Data-Centric Storage (TPDCS), that avoids the problems of storage hot-spots and query hot-spots. To decentralize the skewed data and queries, the data regions are assigned by a time dimension as well as data di-mensions in our proposed scheme. Therefore, TPDCS ex-tends the lifetime of sensor networks. It is shown through various experiments that our scheme outperforms the exist-ing schemes.
 H.2.4 [ Database Management ]: Systems X  X istributed databases, Query processing Algorithms, Design, Experimentation, Performance Sensor Network, DCS, Storage Hot-Spot, Query Hot-Spot  X 
He is the corresponding author. (Tel:+82-43-261-3230, Fax:+82-43-276-9961)
The appropriate method to store sensed data depends on the applications. The data storage methods are classified into three cases: the external storage method, the local sto r-age method, and the data-centric storage method. First, in the external storage method, sensors send data to specific external storages either periodically or whenever it sense s data. The data are not stored in the sensors, so they do not need the internal storage. This method does not affect the network communication cost in processing queries because the queries are executed at the external storages. However, a bottleneck in the network can appear in sensors close to the external storage because these sensors transmit data to -wards external storages more often than others. Second, in the local storage method, the data are stored the sensors X  in -ternal storages, also periodically or when the sensors sens e data. This method is appropriate for environments where there is a large amount of sensed data because there is no cost of data transmission to any external storage. However, to process a query, the query has to be sent to every sensor in the entire network, and the cost soon increases with net-work size. Third, in the data-centric storage (DCS) method, sensed data are stored in certain sensors in the network like the local storage method. However, the difference from the local storage method is that the sensed data are stored only in sensors that are responsible for the sensed data in the as-signed region. The DCS method increases network commu-nication cost in order to send sensed data to the appropriate sensors. Nevertheless, it is efficient in processing queries be-cause the queries are sent to only a few sensors that are related to the queries X  data region instead of sending them to every sensor in the entire network [5].
 In this paper, we propose a new DCS based method, called Time-Parameterized Data-Centric Storage (TPDCS) that overcomes the problems derived from both storage hot-spots and the query hot-spots. It is the first method that deals with both the query hot-spot and storage hot-spot. Unlike existing methods that consider only data dimensions to di-vide and assign data to sensors, TPDCS not only considers data dimensions but also a time dimension and thus assigns a time-data region to the sensors. In other words, when sen-sors generate data, both the generated data and the time that the data is generated in are considered in order to decid e which sensors store the data. Since the sensors periodicall y exchange data regions in a rotating manner, consumption of both storage and energy is distributed equally through-out the entire sensor network. In addition, TPDCS adopts z-ordering [4] to decide the rotational order of data region s. The z-ordering localizes data regions and reduces the cost for processing range queries. As a result, TPDCS improves the QoD (Quality of Data) for a longer time and extends the lifetime of the sensor networks.

The rest of this paper is organized as follows. Section 2 describes the previous DCS based methods. Section 3 pro-poses a new DCS based method TPDCS and shows the per-formance evaluation as compared with DIM and KDDCS. Finally, section 4 presents the conclusions.
Data-Centric Storage (DCS) based scheme assigns dis-tributed data regions to sensors and stores the sensed data in the sensor which is responsible for the data region [5]. Various methods based on DCS have been proposed to ef-ficiently store and query sensed data in wireless sensor net-works. Distributed Index for Multi-dimensional data (DIM) [3] and K-D tree based Data-Centric Storage (KDDCS) [1] are the most popular methods. In DIM , the entire data space is divided, based on a K-D tree [2] where all the nodes of the tree are divided into equal-sized data regions. Each sensor is responsible for a data region of a leaf node in the K-D tree. DIM is efficient in processing range queries because it localizes the data regions. In other words, the neighbor-ing data regions in a data space are assigned to neighboring sensors. However, the efficiency of DIM depends on the lo-cal densities of the sensors due to the difference of the size of the data regions and empty zones, which have no zone code assigned to any sensor. The data from empty zones are transmitted to certain sensors around the zone. Sensed data could be skewed to sensors around the empty zone, whose code is shorter than others. Therefore, if the local densities of sensors are not uniform, some of the sensors can suffer from storage hot-spots.

KDDCS (K-D tree based Data-Centric Storage) is pro-posed to solve the problems of storage hot-spots by removing the empty zone and dynamically readjusting the data region assigned to sensors. KDDCS has a split strategy similar to DIM X  X . In KDDCS, since every partitioned data region is individually assigned to a sensor, empty zones do not ap-pear. In addition, the split line of the K-D tree is adjusted dynamically according to the amount of data so it balances the storage load among all sensors. KDDCS solves the prob-lems of storage hot-spots in order to improve the QoD of the sensor networks. However, it requires additional com-munication cost by transmitting data according to adjusted split lines between sensors when the balance in data amount shared by the sensors is broken.

There are no DCS based methods considering query hot-spots. Because of this, the sensors related to the data regio ns uses up its energy more quickly than others.
We propose a new DCS based scheme, called TPDCS, to overcome the problems derived from query hot-spots as well as storage hot-spots. TPDCS adopts a new logical address mapping strategy that considers not only data dimensions but also a time dimension, so it assigns time-data regions to sensors. In other words, when sensors generate data, both the generated data and the generation time of that data are considered when deciding to which sensor it must deliver and store the data.
 Figure 1 shows where to route a sensed data in DIM, KD-DCS and TPDCS. Suppose there are two sensors in the sensor network and the sensors generate one dimensional data(temperature). N i denotes a sensor node and D i de-notes a sensed data at a time t i . Figure 1 (a) shows that sensors N 1 and N 2 are responsible for the data region (40, 80] and (0, 40] respectively. If 20% of all sensed data falls i n the data range (0, 40] and the rest falls in (40, 80], a storage hot-spot occurs at N 1 . It means that sensor N 1 stores much more data than N 2 . The storage hot-spot in DIM causes a loss of the sensed data. KDDCS solves the data loss by adjusting the split lines of the K-D tree but it costs much communication between sensors. To solve these problems, TPDCS reassigns the data regions of all sensors to every cer-tain time period T in a rotating manner, as shown in Figure 1 (b). In TPDCS, the sensor N 1 stores the data in data region (40, 80] and N 2 stores the data in (0, 40] at t 0 t while N 1 stores the data in range (0, 40] and N 2 stores the data in range (40, 80] at t 1 and t 3 . As a result, by shar-ing the storage hot-spot with all sensors, the sensed data is uniformly distributed among all the sensors. In the same manner, even if the data regions of queries are the same, the queries are transmitted to different sensors according t o the time regions of the queries. Therefore, TPDCS avoids the unbalanced energy consumption caused by the query-hot spot. For example, a query Q in Figure 1 (a) is transmitted to and executed in the sensor N 1 . If some queries have the same data region as Q but have a different time region, they are always conducted in the sensor N 1 in DIM and KDDCS. However, the query Q in Figure 1 (b) is conducted in dif-ferent sensors according to the time region of Q . The query Q with t 3 is conducted in N 2 and Q with t 4 is conducted in N .
In DIM and KDDCS, since the data regions assigned to sensors are closely related to the physical location of the sensors, the size of data regions depends on the distribu-tion types (i.e., uniform, skewed, gaussian) of the sensors . In TPDCS, split processes are separated into a data space split and a physical space split for each sensor in the K-D tree manner in order to assign data regions of the same size to sensors regardless of the distribution type. Then, a spli t data region and a split physical region are mapped as a pair, and the data region is assigned to the sensor on the physi-cal region. The assignment process is summarized as follows .
Step 1 Splitting the physical space based on the locations of sensors.

Initially, the base station gathers the physical locations of every sensor and then splits the physical space by the bal-anced K-D tree like KDDCS so that each sensor is located in a split region. Split positions are chosen so that the num-bers of sensors on each side of the split position are the same as shown in Figure 2 (a). Thus, the number of split regions RN and the number of sensors SN are the same. Empty zones also do not appear unlike DIM.
 Step 2 Splitting the data space based on ST.
 Data space is split into the same structure of ST . The K-D tree created by Step 2 is denoted by DT . However, the splits in DT do not consider the physical location of the sensors. Its split positions are only chosen so that the size of the data region remains same on each side of the split lines. The size of a data region is decided based on height in DT . Figure 2 (b) shows the split regions after Step 2. The shape is similar to a grid structure but the division sequence is th e same as ST so that ST and DT are the same in a structural point of view.
 Step 3 Mapping ST to DT.

Zone numbers are assigned to the sensors according to a sequential order sorted by z-ordering method in ST . The z-ordering method represents a multidimensional data to one dimensional data [4]. In the same way, the zone numbers are assigned to the data regions in DT . Finally, each data region in DT is mapped to a sensor in ST which has zone numbers corresponding to the zone numbers of a sensor. Figure 2 shows an example of mapping data regions to sensors.
As described in section 3.1, TPDCS reassigns data regions periodically to overcome the problems derived from storage hot-spots and query hot-spots. When a time period T is passed, the sensors change their assigned data regions to the data regions that have the next zone number of the as-signed data region while keeping the new data regions during T . The order of the region numbers are described in section 3.2. Figure 3 shows the example of this method. Figure 3 (a) presents the sensors initially mapped to the data region s shown in the Figure 3 (b). The sensor N 0 whose zone num-ber is  X 0 X  is responsible for the data region (0, 20] on the X axis and (0, 20] on the Y axis during time ( T 0 , T 1 ]. Figure 3 (b) presents each sensor that is responsible for the data regions respectively during the time period ( T n , T n +1 shown in Figure 3, the location of sensors is not changed but the data regions of the sensors are changed according to the time period. For example, although the sensor N 0 does not move physically, the zone number is automatically changed from  X 0 X  to  X 14 X , so the sensor is responsible for the data region (60, 80] on the X axis and (60, 80] on the Y axis during time ( T 1 , T 2 ]. In addition, TPDCS adopts z-ordering to assign numbers to divided data regions. Using z-ordering prevents delocalization among data regions. It means that the neighboring data in a data space are stored to the neigh-boring sensors. It reduces the communication cost because queries do not need to be transmitted to all the sensors in a network. Z-ordering is one of the space-filling curves and is the best method to keep locality among them.
We compared TPDCS with DIM and KDDCS. The simu-lation environment is based on KDDCS, and the parameters are shown in Table 1. A single hop area of a sensor includes at least 4 sensors. The sensors manage the stored data in a FIFO (First Input First Output) manner because of limited internal storage. Therefore, the sensors keep the new data and drop the old data when their internal storages become full. The sensors generate 2-dimensional data in [0, 100]. T o evaluate the effects of storage hot-spots and query hot-spot s, we generate data and queries that are skewed in certain data regions in each round. We distribute sensors uniformly to thoroughly evaluate the effects only according to the sensed data, since the initially divided data regions based on dist ri-bution environments affect only DIM and KDDCS. We do not consider the cost of the initial data region division sin ce it is only executed when a system is first constructed.
We conducted the queries over a certain time interval for the data stored in the sensors to evaluate the QoD in the environment where the storage hot-spot occurred. Figure 4 illustrates how long the sensors maintain the data for histo r-ical queries. We measured the number of returned data for each query with a unit of every 32 rounds from the 1st round to the 256 th round; the measurement is conducted after the 256 th round. DIM returns only the recent data. KDDCS has better QoD than DIM, but it is still weak in queries for past data. TPDCS has the best QoD in queries for past data. It is because TPDCS distributes storage hot-spots to all sensors by its periodical reassignment of data regions. The result of simulation shows that TPDCS utilizes storage resources for the entire sensor network very well. Figure 4: Number of returned data units as query results when the storage hot-spots occur
Figure 5 represents the life time of a network according to query hot-spots. For each round, all sensors generate data and 100 queries are generated in the sensor network. The generated queries are concentrated to 20% of data space, the size of queries is from 10% to 20% of the data space, and the time interval of the queries is 10 rounds. We simulated for 1024 rounds. TPDCS changes the data regions among the sensors every three rounds. In DIM and KDDCS, some dead sensors appear due to inadequate energy after about 200 rounds. It is because of unbalanced energy consumption between sensors. In contrast, the first dead sensor appears after around 479 th round in TPDCS. The number of living sensors of TPDCS is less than those of the existing meth-ods from around 700 th round. In TPDCS and the existing methods, the number of dead sensors is about 60(25%) at the moment. To keep the reliability of the system for a long time, TPDCS distributes the energy consumption of sensors more equally and significantly increases the life time of the sensor network. As a result, the life time of the sensor net-work of TPDCS is almost twice than those of the existing methods.

The simulation shows that the life time of TPDCS is about two times longer than that of other methods given that the life of a network lasts until one of the sensors has consumed all the energy available in the sensor network. DIM and KDDCS are very weak when there are query hot-spots be-cause they do not implement any policy to handle query hot-spots. Therefore, when the query hot-spot occurs, the sensors that are responsible for the data related to the quer y die out much faster than other sensors. However, TPDCS distributes the overall load of the network X  X  query hot-spo ts to all its sensors through a periodical reassignment of data regions among the sensors. Even though the query hot-spot occurs, the sensors consume energy more equally than the methods. The number of living sensors of TPDCS is less than those of the existing methods from specific rounds as shown in Figure 5. The reason is that the sensors in TPDCS consume energy more equally than the existing methods. Another reason is the difference of the size of query results. If sensors are dead, the sensors do not generate data any more and the size of the query result is decreased. There-fore, DIM and KDDCS spend less cost of transmitting the query results than TPDCS.
 Figure 5: Lifetime of the sensor networks with 20% query hot-spot
In this paper, we proposed a new DCS method, TPDCS, to solve the problems of query hot-spots as well as storage hot-spots. TPDCS considers a time dimension as well as data dimensions to distribute data regions to sensors while other DCS-based methods consider only data dimensions. TPDCS periodically reassigns data regions based on a z-ordering method to avoid storage hot-spots and query hot-spots. TPDCS should improve storage utilization and en-ergy efficiency in a sensor network. Finally, we showed the superiority of TPDCS through a simulation comparison with DIM and KDDCS. This work was supported by the Ministry of Education, Science and Technology Grant funded by the Korea Govern-ment(The Regional Research Universities Program/Chungbu k BIT Research-Oriented University Consortium) and Basic Science Research Program through the National Research Foundation of Korea(NRF) grant funded by the Korea gov-ernment(MEST)(No. 2009-0089128) [1] M. Aly, K. Pruhs, P. K. Chrysanthis, KDDCS: A [2] J. Bentley, Multidimensional Binary Search Trees used [3] X. Li, Y. Kim, Ramesh Govindan, Wei Hong, [4] B. Moon, H. V. Jagadish, C. Faloutsos, J. H. Saltz, [5] S. Shenker, S. Ratnasamy, B. Karp, R. Govidan, and
