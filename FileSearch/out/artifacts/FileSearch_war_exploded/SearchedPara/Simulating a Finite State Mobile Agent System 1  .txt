 A mobile agent is a program that can move through a network under its own control, capable of navigating through the underlying network and performing various tasks at each node independently [10] . Mobile agents are an effective paradigm for distributed applications, and are particularly attr active in a dynamic network environment involving partially connected computing elements [11] . They locate for the appropriate computation resources, information resources and network resources, combining these resources in a certain host , to achieve the computing tasks. So the mobile agent is the desirable technology for the next generation network applications. While mobile agents have generated considerable excitement in the research community, and also have many prototype systems [8], [9], they have not translated into a significant number of real-world applications. One of the main reasons for this is the lack of work that quantitatively evaluates. The works on the mobile agents performance evaluation have attracted many researchers [2], [3], [4], [1] . Strasser and Schwehm [2] develop a general model for comparing the performance of Remote Procedure Calls (RPC) with the performance of migrating agents. Johansen [4] shows that MAs perform better as the size of the data increase, and as the number of clients increase. More recently, Puliafito et al. [3] used Petri nets to compare the mobile-agent, remote-evaluation and client X  X erver paradigms. David Kotz etc [1] develop an analytical model in wireless network. These papers propose a number of performance benefits that can be gained through the use of MAs. 
The Grid technology [5] and the VO (virtual organization) technology [6] provide a new approach for the self-organization and self-management among the network nodes, and also provide a powerful platform for the mobile agent. The virtual organization can help the mobile agent to ignore the different OS problem and communication problem, decrease the complexity of the mobile agent greatly. Although the performance analysis on mobile agents has been studied for several years, to our best knowledge, not much work has yet been done to the mobile agents X  performance evaluation on VO platforms. evaluation experiment in the VO platforms, in our work, we focus on quantitative performance evaluation of FS-MA on VO platforms, and propose a framework for investigating the performance characteristics of FS-MA platforms and applications. Experimental results provide us with initial conclusions that lead to further refinement and extension of FS-MA and benchmarks. 2.1 VO Based Finite State Mobile Agents In our Finite state mobile Agent model, there is fabric architecture, named virtual organization (VO or group), to support the computation. The basic elements of virtual organization are nodes, which can be PC, PDA, laptop, and other devices that connect via network .The nodes group in virtual, and they can join and leave the group dynamically. The groups are virtually hierarchical, which means the groups can be classified into root-layer, middle-layers and leaf virtual layers. The virtual group the mobile agent can discovery and move more effective and it also can greatly decrease the mobile agent size when migration. 
Finite-state mobile agent is a resource driven mobile agent system. In fact, the mobile agent can be seen as a finite-state machine auto motioning and driven by the resource and data. The FS-MA is a finite state machine driven by the resource and service time. And the migration state between the block state and the serve state will insure that the agent can find and move to another node that takes on enough resource when there is not enough executing resource in the local node. 2.2 Mobile Agent Computation Model (MACM) network are consumed and regenerated continually. So the executing routes of the mobile agents are different. We use service computing finite state machine to describe the real executing process of the service under the VO [6] . Because the service computing is the executing process of the mobile agent, the service computing finite state machine is also called MACM, mobile agent computing model finite state. 
The definition of the MACM-FS establishes upon the virtual origination [6] and the definition is presented as follows: Mobile agent computation model MACM is an eighttuple 
MACM =(R, S, M,  X  , v, E,  X  ,  X  ), where R is the node set, S is the finite state set of the mobile agent, it refers the service process of the agents. S does not include means that the mobile agent starts moving to another node to execute new state; null migration), M is the set of all the message operation states for mobile agent. M = {M s , M a } , M s is the state of sending message, M a is the state of receive message, v  X  R firstly comes from the node v , and then cycles driven by the finite states, R E  X  is the set of final node for the mobile agent, only in the final node the mobile agent can be destroyed and the service ends,  X  , The transition relation, is a finite subset of (R 
In this computation model the migration state  X  is established by the communication of the nodes in VO. Using the communication algorithm, mobile agent can move from the original node to the destination node efficiently. The state transition and message communication are both implemented by this algorithm. To study MA system performance, one should take into account issues such as: control and state information; the complicate architecture of MA platforms; the variety of distributed computing (software) models applicable to mobile-agent applications; the continuously changing resource configuration of Internet-based systems. 
VO [6] is a virtual and dynamic hierarchical architecture in which Grid nodes are grouped virtually. Nodes can join the group and leave the group dynamically. The groups are virtually hierarchical, with one root-layer, several middle-layers, and many of leaf virtual groups. Among each leaf group, one (just one) node (called as manger or gateway node) is chosen to form upper-layer groups in the same way, and this way is repeated until to form one root layer group. Gateway nodes will forward the low-layer group X  X  status information to all the nodes in the up-layer group, and distribute the upper-layer group X  X  status information to all the nodes in the lower-layer group. 
We simulate the VO architecture on PC systems and make it self-grouping dynamically according to Grid size, the number of nodes in Grid and the resources on nodes. Every node can search resources in Grid, deploy FS-MA, and communicate with other node through VO. In fact, the communications are implemented by the group X  X  gateway node, which is similar to the gateway in TCP/IP protocol. There are two important factors must be considered carefully when grouping the Grid nodes. One is the distance between the nodes and group manager; the other is the resource distribution among the nodes. In our evaluation model, we use a new concept named Resource Homologies to describe the resource distribution among nodes. Normally, the resource can be viewed as a multiple-dimension vector R dimension in the vector represents one kind of resource. So the Resource Homologies of the nodes A and B can be defined as || AB R R  X  In this section, we present and obtain the simulation results of the previous evaluation models for the FS-MA. 
The single agent experiments focus on the agent performance on the measurement of service availability.The agent in the experiments (except Figure 5) is a five-state mobile agent, that means the agent includes five service-executing states and will request resource in the VO platforms at most five times. In the figure 2, the diagram presents the results for 1000 times of the same agent executing in different resources distributions conditions. Here, although the resources are re-distributed and the topology of the VO platform is re-generated each time, the total VO grid size and the nodes number on the VO platform are the same. The results in figure 2 show that the service availability of the agent will grow up with the average state executing time rising, and the resources and nodes distribution cannot make visible influence on the service availability. Figure 3 presents the relation between the average service availability and the average state executing time with different agent size. The results show the agent size has obvious affection on the service availability. The service availability will decrease with the agent size increasing. 
As we can see from Figure 4 and Figure 5 the agent total executing time mounts up with the increasing of the average state executing time and the migration times, and also with the augment of agent size. In this paper, we introduce an evaluation model of the finite state mobile agent, which model is constructed on the virtual organization based platform and the corresponding search algorithm on that platform is also presented. The evaluable experiments for the single agent and multiple agents are also introduced. The experiments results indicate the finite state mobile agent can achieve stable performance in varied environments. 
Future works will consider the agent system performance with more influence The system workloads, such as the CPU workload, memory workload, and I/O workload, are also included in our future works. This paper is sponsored by National Science Foundation of China (No.60402010) and Zhejiang Province Science Foundation (No.M603169), Advanced Research Project of China Defense Ministry (No.413150804), and partially supported by the Aerospace Research Foundation (No. 2003-HT-ZJDX-13). 
