 In a disastrous event, much information is posted on microblogging services. For example, when the Great East Japan Earthquake occurred on March 11, 2011, numerous messages were posted on Twitter by the crowd of people. These postings, called tweets , naturally related to the event and sometimes contain critical information concerning safety and support for afflicted people. Due to the overwhelming volume of information, however, finding useful information for a specific region and/or a particular need is difficult for the current microblog search system.

Given the background, this paper proposes a disaster information search sys-tem on Twitter. The system searches for useful information for disaster victims and their supporters by focusing on the following aspects: (1) Our system uses Maximal Marginal Relevance (MMR) [3], a standard technique often used in multi-document summarization, to organ ize search results in terms of the con-tents of tweets, (2) our system displays the groups in the chronological order to organize search results in terms of when the tweets were posted, and (3) our system automatically extends the initial query by leveraging the tweet clicked by the users in the initial search results t o retrieve a new set of tweets supposedly more relevant to the users X  particular information need. In order to investigate the effectiveness of the proposed interfaces, a user study is conducted on the Twitter Corpus collected during the event of the Great East Japan Earthquake.
The remainder of the paper is organized as follows: Section 2 details the framework and its components of our proposed disaster information search sys-tem. Section 3 describes the design of the user study. Section 4 reports on the results and discusses the implications. Section 5 summarizes the related work in comparison with the present study. Lastly, Section 6 concludes with a brief summary and possible future directions. 2.1 Interface Figure 1 shows a screenshot of our proposed system. First, the users type a query that represents their information needs into the search box on the top of the screen ( 1 in Figure 1). Then, the search results are grouped by sub-topics and is displayed in the left-most column ( 2 in Figure 1). We set the number of tweets displayed in each group to log 3 N ,where N is the total number of tweets contained in the group. As the number of tweets presented in each group increases logarithmically with the total number of tweets in the group, the users can visually have a rough estimate of how actively the sub-topic is mentioned. When any tweet in a sub-topic group is clicked, the frame of the group is extended vertically and all tweets in the group are displayed.

Further, when any tweet is double-clicked, the system performs a search again but with a new, reformulated query by taking advantage of the contents of the clicked tweet, and displays new results in a new column ( 3 in Figure 1) on the right of the column containing the clicke d tweet. Search results can be displayed up to three columns on a screen. When more columns are needed, the oldest, left-most column is pushed out to the left. Note that the old results are still kept by the system. When the users click the  X  X rev X  or  X  X ext X  button at 4 in Figure 1, system slides all columns to the right or the left of the screen and shows hidden results. 2.2 Grouping Search Results Due to the many active users, Twitter has a characteristic that when an excep-tional event occurs, numerous tweets abo ut the event are posted. Those tweets naturally contain topic-related terms, and thus it is possible to group them by sub-topics based on terms. By organizing search results into such groups, users would be able to find the relevant tweets more quickly by reading a few tweets in each group. This way, it is also possible to find minor sub-topics, which may be otherwise overlooked due to the small number of tweets despite its poten-tial importance (e.g., information sent for/from isolated areas). In addition, the users could have a rough estimate of how actively each sub-topic is mentioned by looking at the size of the group as it reflects the total number of tweets in the group.

Our approach uses MMR for grouping related tweets. MMR is one of the extraction-based multi-documents summarization algorithms. It scores each doc-ument in terms of two aspects, that is, (a) relevance between a document and a query, and (b) dissimilarity between a doc ument and already selected documents, and selects a document that has the highest score defined as: where Sim 1 is the similarity between a candidate document d i and a query q . In this study, a normalized search score returned by a search engine is used as Sim 1 . S is a set of already selected documents (tweets). Sim 2 is the similarity between d i and d j and is estimated by the cosine similarity based on the inverted document frequency (IDF) of terms in the documents. The parameter  X  (0  X   X   X  1) controls the emphasis on relevance between the query and the document. High  X  means little diversity among each group. In this paper, we set  X  =0 . 8based on our preliminary experiment using developing data not used for evaluation. MMR iteratively selects a tweet based o n Equation (1) for specified times. The selected tweet is a representative m essage of each group. The number of selected tweets here corresponds to th e number of groups to be generated by the system. Our system allows the users to specify the number of groups. Then, each remaining tweet that has not been selected by MMR is assigned to the most similar group based on Sim 2 . Finally, the groups are sorted based on the average posting time of the tweets in each group in the chronological order. In order to reduce redundancy in the search results, our system displays only one tweet for multiple, duplicated tweets.
 2.3 Query Reformulation by a Clicked Tweet In disastrous events, there will be urge nt needs for information related to, for example, damage or restoration in a specific region. However, users X  queries tend to be short and ambiguous, resulting in a large amount of irrelevant information. For instance, when a user who would like to know the situation of damage in the Ishinomaki area may issue a query  X  X shinomaki situation. X  Then, unrelated information such as a situation of medical supports or a situation of rations in Ishinomakimaybealsopresented.Weproposethereformulationofaqueryto tackle this problem. In searching for relevant information, the users naturally select a tweet satisfying or related to t heir information needs. Then, our system takes it as a feedback and generates a n ew query using the selected tweet and searches for tweets similar to the select ed tweet. Although the particulars of the query reformulation is different, this functionality is based on the report that search performance was significantly improved by taking advantage of a user-selected relevant tweet [8].

In reformulating a query, it is importan t to extract topical terms reflecting users X  interest. A simple approach to identifying such on-topic vocabulary is to extract infrequent terms in a corpus based on IDF [2]. In addition, it is often the case that nouns are suited as topical term s. Based on these criteria, our system first performs morphological analysis with Kuromoji 3 , an open-source Japanese morphological analyzer, t o the selected tweet and ext racts proper nouns, com-mon nouns, and verbal nouns as query terms. Next, we eliminate stop words and morphemes composed of only two or less alphanumeric characters, and se-lect the terms with M highest IDF values as a set of query terms Q t .Let Q o be a set of initial query terms given by the users at the beginning. Based on the two term sets, Q t and Q o , our system searches for tweets containing at least one query term from Q t and one query term from Q o . Using this functionality, the users can dig in potentially relevant information by simply clicking a tweet most pertinent to their interest without manually modifying the initial query. 3.1 Research Questions In order to investigate the effectiveness of the proposed interfaces, we conducted a user study on the Twitter Corpus collected for the Great East Japan Earthquake occurred in 2011. Specifically, this study focused on the following questions:  X  The effect of grouping : Can users find relevant tweets more efficiently by  X  The effect of query reformulation : Can users find more relevant tweets  X  The effect of combination : Is it effective to combine grouping and query 3.2 Experimental Settings Dataset. In this experiment, we used the Twitter Corpus provided by Twitter Japan Co., Ltd. for the Great East Japan Big Data Workshop 4 . This corpus consists of approximately 180 million tweets written in only Japanese for one week after the Great East Japan Earthquake occurred (i.e., from March 11 to 18, 2011). Figure 2 shows an example tweet in the corpus, which consists of four fields: (i) Tweet ID, (ii) User ID, (iii) Posting time, and (iv) Text (the English translation was inserted by the authors). Microblog Search. We indexed the corpus with the Lucene 5 full-text search engine, where the language model with Bayesian smoothing using Dirichlet priors was employed. Here, we set the smoothing parameter  X  to 2,500 based on our pilot experiment. Kuromoji was used for morphological analysis.
 Baselines. The proposed system was compared with two interfaces, namely, Flat and Group, illustrated in Figure 3. The Flat (FL), which is similar to the official search interface of Twitter, displays a flat list of search results in the de-scending order of the relevance score. We used search scores returned by Lucene as the relevance score. The Group (GR) di splays the search results grouped by sub-topics. Both FL and GR retrieve 100 tweets per page and present only one tweet for duplicated tweets having the sa me contents. More results can be re-trieved by clicking a button labeled as  X  X ead More X  or  X  X earch More. X  Our proposed system, illustrated in Figure 1, is hereafter referred to as  X  X roup + Query Reformulation (GQR). X  GQR displays grouped search results and pro-vides a query reformulation leveraging the tweet selected by users. GQR also retrieves 100 tweets at once. We set M , the number of terms to be extracted from the selected tweet, to five based on our pilot experiment. The number of groups was experimentally fixed at five during throughout this experiment. The appropriateness of the number of groups is discussed based on a questionnaire.
We evaluated the effect of grouping by comparing FL and GR, the effect of query reformulation by comparing G R and GQR, and the effect of combining grouping and query reformulation by comparing GR and GQR.
 Tasks. We designed a task as a pair of an initial query and its information need. To evaluate the effectiveness of the proposed interfaces during disastrous events, it is important that the tasks reflect the real information needs. To this end, we focused on  X  X nquiry tweets. X  We defined inquiry tweets as those asking for certain information and thus contai n the phrase,  X  X lease tell me X  which is expressed in Japanese as  X   X ,  X  X ,  X  X , or  X . X  Inquiry tweets in the corpus can be seen as users X  information needs and, es pecially in the time of disaster, they would reflect the most critical ones. Ther e are of course many tweets containing the phrase but not related to the event of interest. To identify relevant questions, we took advantage of the  X  X etweet X  function of Twitter. A retweet is a tweet copying another tweet posted by others to disseminate the information. The fact that a tweet was retweeted many ti mes means that many users found the tweet important and we used it as an indicator of the importance of a question. A total of 114,315 inquiry tweets were found in the corpus and were sorted in descending order of the retweet rate r t of tweet t defined in Equation (2) each day.
Based on the ranking of tweets for each day, we selected inquiry tweets by manually examining them in the following steps. 1. Selected tweets relat ed to the earthquake. 2. Removed redundant tweets, which ask the same questions as the already 3. Retained only tweets whose an swers were found in the corpus.
 A total of 36 inquiry tweets were select ed. In this study, tweets containing RT at the beginning were simply regarded as retweets. This is partly because it is difficult to obtain tweet-retweet relations from only this corpus, and the precise relations are not very important to generate search topics. Then, search intentions were manually interpreted based on the selected inquiry tweets by the authors. The initial queries used for user study were also prepared from the intentions. Two examples of the con structed tasks are shown in Table 1.
Time-stamp identifies when the inquiry t weet was retweeted most actively. We defined the time range for each task to be between the beginning of the corpus and 24 hours after its time-stamp. For example, in retrieving tweets for task#5 (cf. Table 1), the time range was specified from March 11 at 9:00 to March 12 at 20:00.
 Procedure. We gathered 18 participants for the user study. Among them, 13 are male and five are female; 17 are students in computer science and one is an office worker; all in their 20 X  X . Each participant performed a total of six tasks (two tasks for each system). The order of using the systems and performing the tasks were allocated equally based on Latin square. All pairs of a system and a task were carried out once. In each task session, the participant conducted a search using the initial query (see Table 1) and was asked to find five relevant tweets within five minutes. When they found five tweets, the session was closed. The following gives a precise procedure. 1. The participant received a gene ral instruction of the study. 2. He performed the assigned tasks in the allocated order. 3. In the end, he filled in the questionnaire about the experiment. 4.1 Task Completion Time Table 2 shows the average time taken to complete a task to evaluate the efficiency of the systems. Task completion time T is computed as T t  X  T s ,where T t is the time between the beginning and the end of a task by a participant; T s is a processing time of a system to search the Twitter Corpus.
 We observe that the task completion time for GR is shorter than those for FL and GQR, while there is little difference between FL and GQR. When looking at individual tasks, GR recorded the shortest task completion time for 64% of the tasks (not shown in Table 2). These results suggest that the grouping functionality implemented in GR has helped users gather relevant tweets more quickly. There X  X  no time to lose in a critical situation, so that our system is helpful for volunteers to quickly find useful information and provide it to suffering people in the disaster area. We conducted a multiple comparison with Bonferroni corrected Wilcoxon sign ed-rank test where the significance level  X  was set to 0.05. However, we found no significant difference among the three systems and the advantage of grouping is inconclusive.

Comparing GR and GQR (the proposed system), the task completion time of GQR, was found longer than that of GR despite the fact that GQR is also equipped with grouping. A possible explanation is the difficulty of the interface to use. The interface for query reformulation implemented in GQR is not familiar to most users and is supposedly harder to learn than FL or GR. To investigate the interpretation, Table 3 shows the average task completion time of GR and GQR for different orders of system usage. The first row of Table 3 represents the order the two systems were used. For Example, GR  X  GQR means that the user first used GR and then GQR. A dagger (  X  ) indicates a significant difference from GQR based on a Bonferroni corrected permutation test with 1000 times random sampling where the significance level  X  was set to 0.05.

We can see from Table 3 that the task completion time of GR is significantly shorter than GQR when the users used GR after GQR. In contrast, when users used GR before GQR, there was no significant difference. In other words, using GQR helped users to learn how to use GR but not the other way around. These results implicate that GQR is more difficult to learn than GR, which may explain the longer task completion time for GQR in Table 2. Moreover, in an additional questionnaire, some participants pointed out that the GQR interface is hard to use. 4.2 Relevance of Search Results Relevance Judgement. Through 108 task sessions (18 participants  X  6tasks from a total of 36 tasks), 462 tweets were marked as relevant by the participants. These results were assessed by two assessors per a pair of a task and a tweet. In total, three assessors participated in the assessment. They were students major-ing in computer science. This section det ails the two types of relevance judge-ments we conducted.

First, we defined relevant tweets. Annotators assessed each tweet using a rel-evance grade ( X  X elevant, X   X  X rrelevant X , or  X  X either X ). We regarded the tweets that were judged as  X  X elevant X  by two annotators as relevant and the others as irrelevant. As a result, 281 relevant tweets (61% of the all tweets found by the participants) were identified. Additionally, we defined an alternative rele-vance score of a tweet as the sum of the judgements by two annotators, where  X  X elevant X  was treated as two points and  X  X either X  as one point.

Second, we identified relevant tweets sim ilar to each other in order to evaluate the diversity of the information gathered by the participants. Annotators gave a particular label to a group of tweets w ith the same contents. As a result, 131 relevant tweets were labeled by 36 differe nt labels, which correspond to 36 groups of tweets with the same contents for each.
 Search Performance. We evaluated the effectiveness of the systems with pre-cision at 5 (P@5) and the relevance score defined in Section 4.2. In this experi-ment, P@5 is defined in Equation (3). When the participants gathered less than five tweets during a task session, the remaining slots were treated as irrelevant tweets.
 Table 4 shows the average P@5 and the sum of relevance scores by each system. The right two columns X  X @5 without duplicates X  and  X # relevant tweets found only by a particular system X  will be discussed later. It can be seen that the participants found more relevant tweets by GR and GQR than FL on average, which is presumably attributed to the fact that both GR and GQR group similar tweets. However, using Bonferroni co rrected Wilcoxon si gned-rank test (  X  = 0.05), there was no significant difference among three systems.
 We then evaluated search performance when duplicate tweets were removed. Intuitively, multiple tweets in the same group were regarded as one tweet in computing precision. We call this mea sure precision without duplicates. The result is found in Table 4. GQR scored slightly higher than the other systems but the difference is not significant.

For a more detailed analysis on individual systems, we then looked at the number of relevant tweets found only by a particular system, which indicates the novelty of search results. Comparing the results of three systems presented in Table 4, it is found that participants using GQR were able to find the largest number of tweets that were not found by FL or GR. For a concrete exam-ple, let us take the task #3 (see Table 1 ). While tweets (e.g.,  X  X helters near Tokyo Disneyland. Maihama Elementary School and Tokai University Urayasu High School are close X ) describing the places of shelters were found by all the systems, the participants using GQR found more detailed information, such as  X  X aihama Elementary School is small, so you should go to Horie Elementary School or Miakegawa Elementary / Junior High School. X  This result exemplifies the advantage of query reformulation using a clicked tweet for finding relevant tweets that are overlooked by the other systems. 4.3 User Satisfaction Finally, we discuss the results of the questionnaire. Table 5 is a list of the ques-tions asked upon the completion of the assigned tasks. The participants answered each question on a five-point scale.

Table 6 shows the results, where GR and GQR had higher scores than FL in Q1 X  X 3, which means that grouping and query reformulation were on average favorably accepted by the participan ts. In Q2 and Q3, there is a significant difference between FL and GR, but there is no significant difference between FL and GQR. The main reason would be the unfamiliarity of the query reformulation interface and the longer task completion time as discussed earlier. In Q4, we asked the appropriateness of the number of groups. As more than a half of the participants selected  X  X ust right X , the number (five) used in this experiment seems appropriate. However, since the optimum number would depend on a type of a task and the number of tweets to search, it would be ideal to dynamically set the number for a given query and the size of the data. Lastly, Q5 and Q6 indicate the satisfaction in grouping and query reformulation, respectively. Both questions had relatively positive resp onses, supporting their usefulness. Microblog has become popular since Twitter launched its service in 2007. Espe-cially, in the last few years, the use of microblog in disastrous events has been drawing much attention. Vieweg et al. [ 13] analyzed messages posted on Twitter during disasters and reported the behavior of disaster information in microblog. Sakaki et al. [10] proposed earthquake detection by treating Twitter users as a sensor. In addition, an application for searching disaster information was also proposed. Abel et al. [1] presented Twitc ident, a Web-based system for filtering and faceted searching for disaster info rmation. The present study focused on the improvement of microblog search interfaces for disaster information.
With the popularization of microblog, microblog search has also been actively studied [12] , where traditional web search approaches were often adapted [6,7]. In addition, Efron et al. [4,5] proposed relevance feedback by using temporal properties of relevant tweets. Miyanishi e t al. [8] proposed tweet selection-based relevance feedback, which uses a tweet selected by the users to refine search results and exploits temporal properties of refined search results. The purpose of this paper is not the improvement of search algorithm but the evaluation of the effectiveness of search interfa ces including the grouping and the query reformulation particularly for disastrous events.

Microblog summarization is another res earch area related especially to group-ing search results. O X  X onnor et al. [9] proposed the microblog search system by grouping search results similarly to our approach. Their approach identified groups of tweets by classifying search res ults based on the presence or absence of a high frequency phrase in a corpus, whereas our approach identified them based on textual contents of each tweet . Another summarization approach not using groups was proposed by Sharifi et al. [11]. In this study, we proposed and implemented the microblog search system, which provides two key features for efficiently find critical disaster information. One is to group search results and the other is query reformulation using a clicked tweet.Inaddition,weproposedastrategy to construct search topics reflecting real information needs during disastrous events by taking advantage of retweets. Through evaluation, our user study indicated that, on average, the users were able to find useful information more quickly by grouping, although the difference was not statistically significant. For query reformulation, there was no advantage as to the task completion time. Our analysis on the order of system use suggested that it was in part due to the unfamiliarity of the query reformulation interface. However, another analysis on the novelty of search results indicated that query reformulation was effective to find more detailed information than those found by the other systems.

For future work, we plan to improve the user interface for query reformulation and to perform a larger user study to va lidate the effectiveness of the proposed interfaces. Also, we would like to consider the credibility of information on Twit-ter since some information may be false whether deliberately or not. There is much existing work in this area and could be incorporated in our system.
