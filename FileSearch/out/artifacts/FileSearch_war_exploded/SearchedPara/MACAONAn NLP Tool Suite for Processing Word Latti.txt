 The automatic processing of textual data generated by NLP software, resulting from Machine Transla-tion, Automatic Speech Recognition or Automatic Text Summarization, raises new challenges for lan-guage processing tools. Unlike native texts (texts produced by humans), this new kind of texts is the result of imperfect processors and they are made of several hypotheses, usually weighted with con-fidence measures. Automatic text production sys-tems can produce these weighted hypotheses as n -best lists, word lattices, or confusion networks. It is crucial for this space of ambiguous solutions to be kept for later processing since the ambiguities of the lower levels can sometimes be resolved during high-level processing stages. It is therefore important to be able to represent this ambiguity.
MACAON is a suite of tools developped to pro-cess ambiguous input and extend inference of in-put modules within a global scope. It con-sists in several modules that perform classical NLP tasks (tokenization, word recognition, part-of-speech tagging, lemmatization, morphological anal-ysis, partial or full parsing) on either native text or word lattices. MACAON is distributed under GNU public licence and can be downloaded from http://www.macaon.lif.univ-mrs.fr/ .

From a general point of view, a MACAON module can be seen as an annotation device 1 which adds a new level of annotation to its input that generally de-pends on annotations from preceding modules. The modules communicate through XML files that allow the representation different layers of annotation as well as ambiguities at each layer. Moreover, the ini-tial XML structuring of the processed files (logical structuring of a document, information from the Au-tomatic Speech Recognition module . . . ) remains untouched by the processing stages.

As already mentioned, one of the main charac-teristics of MACAON is the ability for each module to accept ambiguous inputs and produce ambiguous outputs, in such a way that ambiguities can be re-solved at a later stage of processing. The compact representation of ambiguous structures is at the heart of the MACAON exchange format, described in sec-tion 2. Furthermore every module can weight the solutions it produces. such weights can be used to rank solutions or limit their number for later stages of processing.
 Several processing tools suites alread exist for French among which SXPIPE (Sagot and Boullier, 2008), OUTILEX (Blanc et al., 2006), NOOJ 2 or UNI -TEX 3 . A general comparison of MACAON with these tools is beyond the scope of this paper. Let us just mention that MACAON shares with most of them the use of finite state machines as core data represen-tation. Some modules are implemented as standard operations on finite state machines.

MACAON can also be compared to the numerous development frameworks for developping process-or L INGPIPE 7 that are usually limited to the process-ing of native texts.

The MACAON exchange format shares a cer-tain number of features with linguistic annotation scheme standards such as the Text Encoding Initia-tive 8 , XCES 9 , or EAGLES 10 . They all aim at defining standards for various types of corpus annotations. The main difference between MACAON and these approaches is that MACAON defines an exchange for-mat between NLP modules and not an annotation format. More precisely, this format is dedicated to the compact representation of ambiguity: some in-formation represented in the exchange format are to be interpreted by MACAON modules and would not be part of an annotation format. Moreover, the MACAON exchange format was defined from the bottom up, originating from the authors X  need to use several existing tools and adapt their input/output formats in order for them to be compatible. This is in contrast with a top down approach which is usually chosen when specifying a standard. Still, MACAON shares several characteristics with the LAF (Ide and Romary, 2004) which aims at defining high level standards for exchanging linguistic data. The MACAON exchange format is based on four con-cepts: segment , attribute , annotation level and seg-mentation .

A segment refers to a segment of the text or speech signal that is to be processed, as a sentence, a clause, a syntactic constituent, a lexical unit, a named entity . . . A segment can be equipped with at-tributes that describe some of its aspects. A syntac-tic constituent, for example, will define the attribute type which specifies its syntactic type (Noun Phrase, Verb Phrase . . . ). A segment is made of one or more smaller segments.

A sequence of segments covering a whole sen-tence for written text, or a spoken utterance for oral data, is called a segmentation . Such a sequence can be weighted.

An annotation level groups together segments of a same type, as well as segmentations defined on these segments. Four levels are currently defined: pre-lexical, lexical, morpho-syntactic and syntactic.
Two relations are defined on segments: the prece-dence relation that organises linearly segments of a given level into segmentations and the dominance relation that describes how a segment is decomposed in smaller segments either of the same level or of a lower level.

We have represented in figure 2, a schematic rep-resentation of the analysis of the reconstructed out-put a speech recognizer would produce on the in-put time flies like an arrow 11 . Three annotation lev-els have been represented, lexical, morpho-syntactic and syntactic. Each level is represented by a finite-state automaton which models the precedence rela-tion defined over the segments of this level. Seg-ment time , for example, precedes segment flies . The segments are implicitly represented by the labels of the automaton X  X  arcs. This label should be seen as a reference to a more complex objet, the actual seg-ment. The dominance relations are represented with dashed lines that link segments of different levels. Segment time , for example, is dominated by seg-ment NN of the morpho-syntactic level.

This example illustrates the different ambiguity cases and the way they are represented.
The most immediate ambiguity phenomenon is the segmentation ambiguity: several segmentations are possible at every level. This ambiguity is rep-resented in a compact way through the factoring of segments that participate in different segmentations, by way of a finite state automaton.

The second ambiguity phenomenon is the dom-inance ambiguity, where a segment can be decom-posed in several ways into lower level segments. Such a case appears in the preceding example, where the NN segment appearing in one of the outgoing transition of the initial state of the morpho-syntactic level dominates both thyme and time segments of the lexical level. The triangle with the tip down is an  X  X r X  node, modeling the fact that NN corresponds to time or thyme .

Triangles with the tip up are  X  X nd X  nodes. They model the fact that the PP segment of the syntac-tic level dominates segments IN , DT and NN of the morpho-syntactic level. 2.1 XML representation The MACAON exchange format is implemented in XML . A segment is represented with the XML tag &lt;segment&gt; which has four mandatory attributes:  X  type indicates the type of the segment, four dif- X  id associates to a segment a unique identifier in  X  start and end define the span of the segment.
A segment can define other attributes that can be useful for a given description level. We often find the stype attribute that defines subtypes of a given type.

The dominance relation is represented through the use of the &lt;sequence&gt; tag. The domination of the three segments IN , DT and NN by a PP segment, mentionned above is represented below, where p1 , p2 and p3 are respectively the id s of segments IN , DT and NN .
The ambiguous case, described above where seg-ment NN dominates segments time or thyme is rep-resented below as a disjunction of sequences inside a segment. The disjunction itself is not represented as an XML tag. l1 and l2 are respectively the id s of segments time and thyme .
The dominance relation can be weighted, by way of the attribute w . Such a weight represents in the preceding example the conditional log-probability of a lexical unit given a part of speech, as in a hidden Markov model.

The precedence relation (i.e. the organization of segments in segmentations), is represented as a weighted finite state automaton. Automata are rep-resented as a start state, accept states and a list of transitions between states, as in the following exam-ple that corresponds to the lexical level of our exam-ple.
The &lt;trans/&gt; tag represents a transition, its o,d,i and w features are respectively the origin, and destination states, its label (the id of a segment) and a weight.

An annotation level is represented by the &lt;section&gt; tag which regroups two tags, the &lt;segments&gt; tag that contains the different segment tags defined at this annotation level and the &lt;fsm&gt; tag that represents all the segmentations of this level. Three aspects have guided the architecture of MACAON : openness, modularity, and speed. Open-ness has been achieved by the definition of an ex-change format which has been made as general as possible, in such a way that mapping can be de-fined from and to third party modules as ASR, MT systems or parsers. Modularity has been achieved by the definition of independent modules that com-municate with each other through XML files using standard UNIX pipes. A module can therefore be re-placed easily. Speed has been obtained using effi-cient algorithms and a representation especially de-signed to load linguistic data and models in a fast way.

MACAON is composed of libraries and compo-nents. Libraries contain either linguistic data, mod-els or API functions. Two kinds of components are presented, the MACAON core components and third party components for which mappings to and from the MACAON exchange format have been defined. 3.1 Libraries The main MACAON library is macaon common . It defines a simple interface to the MACAON ex-change format and functions to load XML MACAON files into memory using efficient data structures. Other libraries macaon lex , macaon code and macaon tagger lib represent the lexicon, the morphological data base and the tagger models in memory.

MACAON only relies on two third-party libraries, which are gfsm 12 , a finite state machine library and libxml , an XML library 13 . 3.2 The MACAON core components A brief description of several standard components developed in the MACAON framework is given be-low. They all comply with the exchange format de-scribed above and add a &lt;macaon stamp&gt; to the XML file that indicates the name of the component, the date and the component version number, and rec-ognizes a set of standard options. maca select is a pre-processing component: it adds maca segmenter segments a text into sentences by maca tokenizer tokenizes a sentence into pre-maca lexer allows to regroup pre-lexical units into maca tagger associates to every lexical unit one or maca anamorph produces the morphological anal-maca chunker gathers sequences of part-of-speech maca conv is a set of converters from and to the maca view is a graphical interface that allows to in-3.3 Third party components MACAON is an open architecture and provides a rich exchange format which makes possible the repre-sentation of many NLP tools input and output in the MACAON format. MACAON has been interfaced with the SPEERAL Automatic Speech Recognition Sys-tem (Nocera et al., 2006). The word lattices pro-duced by SPEERAL can be converted to pre-lexical MACAON automata.

MACAON does not provide any native module for parsing yet but it can be interfaced with any already existing parser. For the purpose of this demonstra-tion we have chosen the LORG parser developed at NCLT, Dublin 14 . This parser is based on PCFGs with latent annotations (Petrov et al., 2006), a for-malism that showed state-of-the-art parsing accu-racy for a wide range of languages. In addition it of-fers a sophisticated handling of unknown words re-lying on automatically learned morphological clues, especially for French (Attia et al., 2010). Moreover, this parser accepts input that can be tokenized, pos-tagged or pre-bracketed. This possibility allows for different settings when interfacing it with MACAON . MACAON has been used in several projects, two of which are briefly described here, the D EFINIENS project and the L UNA project.

D EFINIENS (Barque et al., 2010) is a project that aims at structuring the definitions of a large coverage French lexicon, the Tr  X  esor de la langue franc  X aise . The lexicographic definitions have been processed by MACAON in order to decompose the definitions into complex semantico-syntactic units. The data processed is therefore native text that possesses a rich XML structure that has to be preserved during processing.

L UNA 15 is a European project that aims at extract-ing information from oral data about hotel booking. The word lattices produced by an ASR system have been processed by MACAON up to a partial syntactic level from which frames are built. More details can be found in (B  X  echet and Nasr, 2009). The key aspect of the use of MACAON for the L UNA project is the ability to perform the linguistic analyses on the mul-tiple hypotheses produced by the ASR system. It is therefore possible, for a given syntactic analysis, to find all the word sequences that are compatible with this analysis.

Figure 2 shows the interface that can be used to see the output of the pipeline. In this paper we have presented MACAON , an NLP tool suite which allows to process native text as well as several hypotheses automatically produced by an ASR or an MT system. Several evolutions are cur-rently under development, such as a named entity recognizer component and an interface with a de-pendency parser.

