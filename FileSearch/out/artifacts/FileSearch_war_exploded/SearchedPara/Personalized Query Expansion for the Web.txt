 The inherent ambiguity of short keyword queries demands for en-hanced methods for Web retrieval. In this paper we propose to improve such Web queries by expanding them with terms collected from each user X  X  Personal Information Repository, thus implicitly personalizing the search output. We introduce five broad tech-niques for generating the additional query keywords by analyzing user data at increasing granularity levels, ranging from term and compound level analysis up to global co-occurrence statistics, as well as to using external thesauri. Our extensive empirical analy-sis under four different scenarios shows some of these approaches to perform very well, especially on ambiguous queries, producing a very strong increase in the quality of the output rankings. Sub-sequently, we move this personalized search framework one step further and propose to make the expansion process adaptive to var-ious features of each query. A separate set of experiments indicates the adaptive algorithms to bring an additional statistically signifi-cant improvement over the best static expansion approach. H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval; H.3.5 [ Information Storage and Retrieval ]: On-line Information Services X  Web-based services Algorithms, Experimentation, Measurement Personalized Web Search, Query Expansion, Desktop Profile, Key-word Extraction, Keyword Co-occurrences
The booming popularity of search engines has determined sim-ple keyword search to become the only widely accepted user inter-face for seeking information over the Web. Yet keyword queries are Part of this work was performed while the author was visiting Yahoo! Research, Barcelona, Spain.
 Copyright 2007 ACM 978-1-59593-597-7/07/0007 ... $ 5.00. inherently ambiguous. The query  X  X anon book X  for example covers several different areas of interest: religion, photography, literature, and music. Clearly, one would prefer search output to be aligned with user X  X  topic(s) of interest, rather than displaying a selection of popular URLs from each category. Studies have shown that more than 80% of the users would prefer to receive such personalized search results [33] instead of the currently generic ones.
Query expansion assists the user in formulating a better query, by appending additional keywords to the initial search request in order to encapsulate her interests therein, as well as to focus the Web search output accordingly. It has been shown to perform very well over large data sets, especially with short input queries (see for example [19, 3]). This is exactly the Web search scenario!
In this paper we propose to enhance Web query reformulation by exploiting the user X  X  Personal Information Repository (PIR), i.e., the personal collection of text documents, emails, cached Web pages, etc. Several advantages arise when moving Web search per-sonalization down to the Desktop level (note that by  X  X esktop X  we refer to PIR, and we use the two terms interchangeably). First is of course the quality of personalization: The local Desktop is a rich repository of information, accurately describing most, if not all in-terests of the user. Second, as all  X  X rofile X  information is stored and exploited locally, on the personal machine, another very important benefit is privacy. Search engines should not be able to know about a person X  X  interests, i.e., they should not be able to connect a spe-cific person with the queries she issued, or worse, with the output URLs she clicked within the search interface 1 (see Volokh [35] for a discussion on privacy issues related to personalized Web search).
Our algorithms expand Web queries with keywords extracted from user X  X  PIR, thus implicitly personalizing the search output. After a discussion of previous works in Section 2, we first investi-gate the analysis of local Desktop query context in Section 3.1.1. We propose several keyword, expression, and summary based tech-niques for determining expansion terms from those personal docu-ments matching the Web query best. In Section 3.1.2 we move our analysis to the global Desktop collection and investigate expansions based on co-occurrence metrics and external thesauri. The exper-iments presented in Section 3.2 show many of these approaches to perform very well, especially on ambiguous queries, producing NDCG [15] improvements of up to 51.28%. In Section 4 we move this algorithmic framework further and propose to make the expan-sion process adaptive to the clarity level of the query. This yields an additional improvement of 8.47% over the previously identified best algorithm. We conclude and discuss further work in Section 5.
This paper brings together two IR areas: Search Personalization and Automatic Query Expansion. There exists a vast amount of algorithms for both domains. However, not much has been done specifically aimed at combining them. In this section we thus present a separate analysis, first introducing some approaches to personalize search, as this represents the main goal of our research, and then discussing several query expansion techniques and their relationship to our algorithms.
Personalized search comprises two major components: (1) User profiles, and (2) The actual search algorithm. This section splits the relevant background according to the focus of each article into either one of these elements.

Approaches focused on the User Profile. Sugiyama et al. [32] analyzed surfing behavior and generated user profiles as features (terms) of the visited pages. Upon issuing a new query, the search results were ranked based on the similarity between each URL and the user profile. Qiu and Cho [26] used Machine Learning on the past click history of the user in order to determine topic preference vectors and then apply Topic-Sensitive PageRank [13]. User pro-filing based on browsing history has the advantage of being rather easy to obtain and process. This is probably why it is also employed by several industrial search engines (e.g., Yahoo! MyWeb 2 ever, it is definitely not sufficient for gathering a thorough insight into user X  X  interests. More, it requires to store all personal informa-tion at the server side, which raises significant privacy concerns.
Only two other approaches enhanced Web search using Desktop data, yet both used different core ideas: (1) Teevan et al. [34] mod-ified the query term weights from the BM25 weighting scheme to incorporate user interests as captured by their Desktop indexes; (2) In Chirita et al. [6], we focused on re-ranking the Web search out-put according to the cosine distance between each URL and a set of Desktop terms describing user X  X  interests. Moreover, none of these investigated the adaptive application of personalization.
Approaches focused on the Personalization Algorithm. Ef-fectively building the personalization aspect directly into Page-Rank [25] (i.e., by biasing it on a target set of pages) has re-ceived much attention recently. Haveliwala [13] computed a topic-oriented PageRank, in which 16 PageRank vectors biased on each of the main topics of the Open Directory were initially calculated off-line, and then combined at run-time based on the similarity be-tween the user query and each of the 16 topics. More recently, Nie et al. [24] modified the idea by distributing the PageRank of a page across the topics it contains in order to generate topic ori-ented rankings. Jeh and Widom [16] proposed an algorithm that avoids the massive resources needed for storing one Personalized PageRank Vector (PPV) per user by precomputing PPVs only for a small set of pages and then applying linear combination. As the computation of PPVs for larger sets of pages was still quite expen-sive, several solutions have been investigated, the most important ones being those of Fogaras and Racz [12], and Sarlos et al. [30], the latter using rounding and count-min sketching in order to fastly obtain accurate enough approximations of the personalized scores.
Automatic query expansion aims at deriving a better formulation of the user query in order to enhance retrieval. It is based on ex-ploiting various social or collection specific characteristics in order to generate additional terms, which are appended to the original in-put keywords before identifying the matching documents returned as output. In this section we survey some of the representative query expansion works grouped according to the source employed to generate additional terms: (1) Relevance feedback, (2) Collec-tion based co-occurrence statistics, and (3) Thesaurus information. Some other approaches are also addressed in the end of the section. Relevance Feedback Techniques. The main idea of Relevance Feedback (RF) is that useful information can be extracted from the relevant documents returned for the initial query. First approaches were manual [28] in the sense that the user was the one choosing the relevant results, and then various methods were applied to ex-tract new terms, related to the query and the selected documents. Efthimiadis [11] presented a comprehensive literature review and proposed several simple methods to extract such new keywords based on term frequency, document frequency, etc. We used some of these as inspiration for our Desktop specific techniques. Chang and Hsu [5] asked users to choose relevant clusters, instead of doc-uments, thus reducing the amount of interaction necessary. RF has also been shown to be effectively automatized by considering the top ranked documents as relevant [37] (this is known as Pseudo RF). Lam and Jones [21] used summarization to extract informa-tive sentences from the top-ranked documents, and appended them to the user query. Carpineto et al. [4] maximized the divergence be-tween the language model defined by the top retrieved documents and that defined by the entire collection. Finally, Yu et al. [38] selected the expansion terms from vision-based segments of Web pages in order to cope with the multiple topics residing therein.
Co-occurrence Based Techniques. Terms highly co-occurring with the issued keywords have been shown to increase precision when appended to the query [17]. Many statistical measures have been developed to best assess  X  X erm relationship X  levels, either ana-lyzing entire documents [27], lexical affinity relationships [3] (i.e., pairs of closely related words which contain exactly one of the ini-tial query terms), etc. We have also investigated three such ap-proaches in order to identify query relevant keywords from the rich, yet rather complex Personal Information Repository.

Thesaurus Based Techniques. A broadly explored method is to expand the user query with new terms, whose meaning is closely related to the input keywords. Such relationships are usually ex-tracted from large scale thesauri, as WordNet [23], in which vari-ous sets of synonyms, hypernyms, etc. are predefined. Just as for the co-occurrence methods, initial experiments with this approach were controversial, either reporting improvements, or even reduc-tions in output quality [36]. Recently, as the experimental collec-tions grew larger, and as the employed algorithms became more complex, better results have been obtained [31, 18, 22]. We also use WordNet based expansion terms. However, we base this pro-cess on analyzing the Desktop level relationship between the orig-inal query and the proposed new keywords.

Other Techniques. There are many other attempts to extract expansion terms. Though orthogonal to our approach, two works are very relevant for the Web environment: Cui et al. [8] gener-ated word correlations utilizing the probability for query terms to appear in each document, as computed over the search engine logs. Kraft and Zien [19] showed that anchor text is very similar to user queries, and thus exploited it to acquire additional keywords.
Desktop data represents a very rich repository of profiling in-formation. However, this information comes in a very unstruc-tured way, covering documents which are highly diverse in for-mat, content, and even language characteristics. In this section we first tackle this problem by proposing several lexical analysis algo-rithms which exploit user X  X  PIR to extract keyword expansion terms at various granularities, ranging from term frequency within Desk-top documents up to utilizing global co-occurrence statistics over the personal information repository. Then, in the second part of the section we empirically analyze the performance of each approach.
This section presents the five generic approaches for analyz-ing user X  X  Desktop data in order to provide expansion terms for Web search. In the proposed algorithms we gradually increase the amount of personal information utilized. Thus, in the first part we investigate three local analysis techniques focused only on those Desktop documents matching user X  X  query best. We append to the Web query the most relevant terms, compounds, and sentence sum-maries from these documents. In the second part of the section we move towards a global Desktop analysis, proposing to investigate term co-occurrences, as well as thesauri, in the expansion process.
Local Desktop Analysis is related to enhancing Pseudo Rele-vance Feedback to generate query expansion keywords from the PIR best hits for user X  X  Web query, rather than from the top ranked Web search results. We distinguish three granularity levels for this process and we investigate each of them separately.

Term and Document Frequency. As the simplest possible mea-sures, TF and DF have the advantage of being very fast to compute. Previous experiments with small data sets have showed them to yield very good results [11]. We thus independently associate a score with each term, based on each of the two statistics. The TF based one is obtained by multiplying the actual frequency of a term with a position score descending as the term first appears closer to the end of the document. This is necessary especially for longer documents, because more informative terms tend to appear towards their beginning [10]. The complete TF based keyword extraction formula is as follows:
T ermScore = 1 where nrW ords is the total number of terms in the document and pos is the position of the first appearance of the term; T F repre-sents the frequency of each term in the Desktop document matching user X  X  Web query.

The identification of suitable expansion terms is even simpler when using DF: Given the set of Top-K relevant Desktop docu-ments, generate their snippets as focused on the original search request. This query orientation is necessary, since the DF scores are computed at the level of the entire PIR and would produce too noisy suggestions otherwise. Once the set of candidate terms has been identified, the selection proceeds by ordering them according to the DF scores they are associated with. Ties are resolved using the corresponding TF scores.

Note that a hybrid TFxIDF approach is not necessarily efficient, since one Desktop term might have a high DF on the Desktop, while being quite rare in the Web. For example, the term  X  X age-Rank X  would be quite frequent on the Desktop of an IR scientist, thus achieving a low score with TFxIDF. However, as it is rather rare in the Web, it would make a good resolution of the query to-wards the correct topic.

Lexical Compounds. Anick and Tipirneni [2] defined the lexi-cal dispersion hypothesis , according to which an expression X  X  lexi-cal dispersion (i.e., the number of different compounds it appears in within a document or group of documents) can be used to automat-ically identify key concepts over the input document set. Although several possible compound expressions are available, it has been shown that simple approaches based on noun analysis are almost as good as highly complex part-of-speech pattern identification al-gorithms [1]. We thus inspect the matching Desktop documents for all their lexical compounds of the following form: All such compounds could be easily generated off-line, at indexing time, for all the documents in the local repository. Moreover, once identified, they can be further sorted depending on their dispersion within each document in order to facilitate fast retrieval of the most frequent compounds at run-time.

Sentence Selection. This technique builds upon sentence ori-ented document summarization: First, the set of relevant Desktop documents is identified; then, a summary containing their most important sentences is generated as output. Sentence selection is the most comprehensive local analysis approach, as it produces the most detailed expansions (i.e., sentences). Its downside is that, un-like with the first two algorithms, its output cannot be stored effi-ciently, and consequently it cannot be computed off-line. We gen-erate sentence based summaries by ranking the document sentences according to their salience score, as follows [21]: The first term is the ratio between the square amount of significant words within the sentence and the total number of words therein. A word is significant in a document if its frequency is above a thresh-old as follows:
T F &gt; ms = with N S being the total number of sentences in the document (see [21] for details). The second term is a position score set to ( Avg ( N S )  X  SentenceIndex ) /Avg 2 ( N S ) for the first ten sen-tences, and to 0 otherwise, Avg ( N S ) being the average number of sentences over all Desktop items. This way, short documents such as emails are not affected, which is correct, since they usually do not contain a summary in the very beginning. However, as longer documents usually do include overall descriptive sentences in the beginning [10], these sentences are more likely to be relevant. The final term biases the summary towards the query. It is the ratio be-tween the square number of query terms present in the sentence and the total number of terms from the query. It is based on the belief that the more query terms contained in a sentence, the more likely will that sentence convey information highly related to the query.
In contrast to the previously presented approach, global analysis relies on information from across the entire personal Desktop to infer the new relevant query terms. In this section we propose two such techniques, namely term co-occurrence statistics, and filtering the output of an external thesaurus.

Term Co-occurrence Statistics. For each term, we can easily compute off-line those terms co-occurring with it most frequently in a given collection (i.e., PIR in our case), and then exploit this information at run-time in order to infer keywords highly corre-lated with the user query. Our generic co-occurrence based query expansion algorithm is as follows:
The off-line computation needs an initial trimming phase (step 1) for optimization purposes. In addition, we also restricted the al-gorithm to computing co-occurrence levels across nouns only, as they contain by far the largest amount of conceptual information, and as this approach reduces the size of the co-occurrence matrix considerably. During the run-time phase, having the terms most correlated with each particular query keyword already identified, one more operation is necessary, namely calculating the correlation of every output term with the entire query. Two approaches are possible: (1) using a product of the correlation between the term and all keywords in the original expression (step 5a), or (2) sim-ply counting the number of documents in which the proposed term co-occurs with the entire user query (step 5b). We considered the following formulas for Similarity Coefficients [17]: DF x is the Document Frequency of term x , and DF x,y is the num-ber of documents containing both x and y . To further increase the quality of the generated scores we limited the latter indicator to co-occurrences within a window of W terms. We set W to be the same as the maximum amount of expansion keywords desired.

Dunning X  X  Likelihood Ratio  X  [9] is a co-occurrence based met-ric similar to  X  2 . It starts by attempting to reject the null hy-pothesis, according to which two terms A and B would appear in text independently from each other. This means that P ( A B ) = P ( A  X  B ) = P ( A ) , where P ( A  X  B ) is the probability that term A is not followed by term B . Consequently, the test for independence of A and B can be performed by looking if the distribution of A given that B is present is the same as the distribution of A given that B is not present. Of course, in reality we know these terms are not independent in text, and we only use the statistical metrics to highlight terms which are frequently appearing together. We com-pare the two binomial processes by using likelihood ratios of their associated hypotheses. First, let us define the likelihood ratio for one hypothesis: where  X  is a point in the parameter space  X  ,  X  0 is the particular hypothesis being tested, and k is a point in the space of observations K . If we assume that two binomial distributions have the same underlying parameter, i.e., { ( p 1 , p 2 ) | p 1 = p 2 } , we can write: where H ( p 1 , p 2 ; k 1 , k 2 , n 1 , n 2 ) = p k 1 1  X  (1  X  p p 2  X  (1  X  p 2 ) p where L ( p, k, n ) = p k  X  (1  X  p ) n  X  k . Taking the logarithm of the likelihood, we obtain: where log L ( p, k, n ) = k  X  log p + ( n  X  k )  X  log (1  X  p ) . Finally, if we write O 11 = P ( A B ) , O 12 = P (  X  A B ) , O 21 = P ( A  X  B ) , and O 22 = P (  X  A  X  B ) , then the co-occurrence likelihood of terms A and B becomes:
Thesaurus Based Expansion. Large scale thesauri encapsulate global knowledge about term relationships. Thus, we first identify the set of terms closely related to each query keyword, and then we calculate the Desktop co-occurrence level of each of these pos-sible expansion terms with the entire initial search request. In the end, those suggestions with the highest frequencies are kept. The algorithm is as follows:
We observe three types of term relationships (steps 2a-2c): (1) synonyms, (2) sub-concepts, namely hyponyms (i.e., sub-classes) and meronyms (i.e., sub-parts), and (3) super-concepts, namely hypernyms (i.e., super-classes) and holonyms (i.e., super-parts). As they represent quite different types of association, we inves-tigated them separately. We limited the output expansion set (step 7) to contain only terms appearing at least T times on the Desktop, in order to avoid noisy suggestions, with T = min( N DocsPerTopic , MinDocs ) . We set DocsP erT opic = 2 , 500 , and M inDocs = 5 , the latter one coping with the case of small PIRs. We evaluated our algorithms with 18 subjects (Ph.D. and Post-Doc. students in different areas of computer science and educa-tion). First, they installed our Lucene based search engine
Clearly, if one had already installed a Desktop search application, then this overhead would not be present.
 indexed all their locally stored content: Files within user selected paths, Emails, and Web Cache. Without loss of generality, we fo-cused the experiments on single-user machines. Then, they chose 4 queries related to their everyday activities, as follows:
The average query lengths were 2.0 and 2.3 terms for the log queries, as well as 2.9 and 1.8 for the self-selected ones. Even though our algorithms are mainly intended to enhance search when using ambiguous query keywords, we chose to investigate their per-formance on a wide span of query types, in order to see how they perform in all situations. The log queries evaluate real life requests, in contrast to the self-selected ones, which target rather the identi-fication of top and bottom performances. Note that the former ones were somewhat farther away from each subject X  X  interest, thus be-ing also more difficult to personalize on. To gain an insight into the relationship between each query type and user interests, we asked each person to rate the query itself with a score of 1 to 5, having the following interpretations: (1) never heard of it, (2) do not know it, but heard of it, (3) know it partially, (4) know it well, (5) major in-terest. The obtained grades were 3.11 for the top log queries, 3.72 for the randomly selected ones, 4.45 for the self-selected specific ones, and 4.39 for the self-selected ambiguous ones.

For each query, we collected the Top-5 URLs generated by 20 versions of the algorithms 4 presented in Section 3.1. These results were then shuffled into one set containing usually between 70 and 90 URLs. Thus, each subject had to assess about 325 documents for all four queries, being neither aware of the algorithm, nor of the ranking of each assessed URL. Overall, 72 queries were issued and over 6,000 URLs were evaluated during the experiment. For each of these URLs, the testers had to give a rating ranging from 0 to 2, dividing the relevant results in two categories, (1) relevant and (2) highly relevant. Finally, the quality of each ranking was assessed using the normalized version of Discounted Cumulative Gain (DCG) [15]. DCG is a rich measure, as it gives more weight to highly ranked documents, while also incorporating different rel-evance levels by giving them different gain values: DCG ( i ) = G (1) , if i = 1 DCG ( i  X  1) + G ( i ) /log ( i ) , otherwise. We used G(i) = 1 for relevant results, and G(i) = 2 for highly rele-vant ones. As queries having more relevant output documents will have a higher DCG, we also normalized its value to a score between 0 (the worst possible DCG given the ratings) and 1 (the best possi-ble DCG given the ratings) to facilitate averaging over queries. All results were tested for statistical significance using T-tests.
Algorithmic specific aspects. The main parameter of our algo-rithms is the number of generated expansion keywords. For this experiment we set it to 4 terms for all techniques, leaving an analy-sis at this level for a subsequent investigation. In order to optimize the run-time computation speed, we chose to limit the number of output keywords per Desktop document to the number of expan-sion keywords desired (i.e., four). For all algorithms we also in-vestigated bigger limitations. This allowed us to observe that the Lexical Compounds method would perform better if only at most one compound per document were selected. We therefore chose to experiment with this new approach as well. For all other tech-niques, considering less than four terms per document did not seem to consistently yield any additional qualitative gain. We labeled the algorithms we evaluated as follows: 0. Google : The actual Google query output, as returned by the 1. TF, DF : Term and Document Frequency; 2. LC, LC[O] : Regular and Optimized (by considering only 3. SS : Sentence Selection; 4. TC[CS], TC[MI], TC[LR] : Term Co-occurrence Statistics 5. WN[SYN], WN[SUB], WN[SUP] : WordNet based expan-Except for the thesaurus based expansion, in all cases we also inves-tigated the performance of our algorithms when exploiting only the Web browser cache to represent user X  X  personal information. This is motivated by the fact that other personal documents such as for example emails are known to have a somewhat different language than that residing on the world wide Web [34]. However, as this approach performed visibly poorer than using the entire Desktop data, we omitted it from the subsequent analysis. Log Queries. We evaluated all variants of our algorithms using NDCG. For log queries, the best performance was achieved with TF, LC[O], and TC[LR]. The improvements they brought were up to 5.2% for top queries ( p = 0 . 14 ) and 13.8% for randomly se-lected queries ( p = 0 . 01 , statistically significant), both obtained with LC[O]. A summary of all results is depicted in Table 1.
Both TF and LC[O] yielded very good results, indicating that simple keyword and expression oriented approaches might be suffi-cient for the Desktop based query expansion task. LC[O] was much better than LC, ameliorating its quality with up to 25.8% in the case of randomly selected log queries, improvement which was also sig-nificant with p = 0 . 04 . Thus, a selection of compounds spanning over several Desktop documents is more informative about user X  X  interests than the general approach, in which there is no restriction on the number of compounds produced from every personal item.
The more complex Desktop oriented approaches, namely sen-tence selection and all term co-occurrence based algorithms, showed a rather average performance, with no visible improve-ments, except for TC[LR]. Also, the thesaurus based expansion usually produced very few suggestions, possibly because of the many technical queries employed by our subjects. We observed however that expanding with sub-concepts is very good for every-day life terms (e.g.,  X  X ar X ), whereas the use of super-concepts is valuable for compounds having at least one term with low tech-nicality (e.g.,  X  X ocument clustering X ). As expected, the synonym based expansion performed generally well, though in some very Table 1: Normalized Discounted Cumulative Gain at the first 5 results when searching for top (left) and random (right) log queries.
 Table 2: Normalized Discounted Cumulative Gain at the first 5 results when searching for user selected clear (left) and am-biguous (right) queries. technical cases it yielded rather general suggestions. Finally, we noticed Google to be very optimized for some top frequent queries. However, even within this harder scenario, some of our personal-ization algorithms produced statistically significant improvements over regular search (i.e., TF and LC[O]).

Self-selected Queries. The NDCG values obtained with self-selected queries are depicted in Table 2. While our algorithms did not enhance Google for the clear search tasks, they did produce strong improvements of up to 52.9% (which were of course also highly significant with p 0 . 01 ) when utilized with ambiguous queries. In fact, almost all our algorithms resulted in statistically significant improvements over Google for this query type.
In general, the relative differences between our algorithms were similar to those observed for the log based queries. As in the previ-ous analysis, the simple Desktop based Term Frequency and Lexi-cal Compounds metrics performed best. Nevertheless, a very good outcome was also obtained for Desktop based sentence selection and all term co-occurrence metrics. There were no visible differ-ences between the behavior of the three different approaches to co-occurrence calculation. Finally, for the case of clear queries, we noticed that fewer expansion terms than 4 might be less noisy and thus helpful in bringing further improvements. We thus pursued this idea with the adaptive algorithms presented in the next section.
In the previous section we have investigated the behavior of each technique when adding a fixed number of keywords to the user query. However, an optimal personalized query expansion algo-rithm should automatically adapt itself to various aspects of each query, as well as to the particularities of the person using it. In this section we discuss the factors influencing the behavior of our ex-pansion algorithms, which might be used as input for the adaptivity process. Then, in the second part we present some initial experi-ments with one of them, namely query clarity.
Several indicators could assist the algorithm to automatically tune the number of expansion terms. We start by discussing adapta-tion by analyzing the query clarity level. Then, we briefly introduce an approach to model the generic query formulation process in or-der to tailor the search algorithm automatically, and discuss some other possible factors that might be of use for this task.
Query Clarity. The interest for analyzing query difficulty has increased only recently, and there are not many papers addressing this topic. Yet it has been long known that query disambiguation has a high potential of improving retrieval effectiveness for low recall searches with very short queries [20], which is exactly our targeted scenario. Also, the success of IR systems clearly varies across different topics. We thus propose to use an estimate number expressing the calculated level of query clarity in order to automat-ically tweak the amount of personalization fed into the algorithm. The following metrics are available:
Other solutions exist, but we think they are too computationally expensive for the huge amount of data that needs to be processed within Web applications. We thus decided to investigate only C and C 2 . First, we analyzed their performance over a large set of queries and split their clarity predictions in three categories:
In order to limit the amount of experiments, we analyzed only the results produced when employing C 1 for the PIR and C Web. As algorithmic basis we used LC[O], i.e., optimized lexical compounds, which was clearly the winning method in the previous analysis. As manual investigation showed it to slightly overfit the expansion terms for clear queries, we utilized a substitute for this particular case. Two candidates were considered: (1) TF, i.e., the second best approach, and (2) WN[SYN], as we observed that its first and second expansion terms were often very good.

Given the algorithms and clarity measures, we implemented the adaptivity procedure by tailoring the amount of expansion terms added to the original query, as a function of its ambiguity in the Web, as well as within user X  X  PIR. Note that the ambiguity level is related to the number of documents covering a certain query. Thus, to some extent, it has different meanings on the Web and within PIRs. While a query deemed ambiguous on a large collection such as the Web will very likely indeed have a large number of meanings, this may not be the case for the Desktop. Take for example the query  X  X ageRank X . If the user is a link analysis expert, many of her documents might match this term, and thus the query would be classified as ambiguous. However, when analyzed against the Web, this is definitely a clear query. Consequently, we employed more additional terms, when the query was more ambiguous in the Web, but also on the Desktop. Put another way, queries deemed clear on the Desktop were inherently not well covered within user X  X  PIR, and thus had fewer keywords appended to them. The number of expansion terms we utilized for each combination of scope and clarity levels is depicted in Table 3.

Query Formulation Process. Interactive query expansion has a high potential for enhancing search [29]. We believe that modeling its underlying process would be very helpful in producing qualita-tive adaptive Web search algorithms. For example, when the user is adding a new term to her previously issued query, she is basically reformulating her original request. Thus, the newly added terms are more likely to convey information about her search goals. For a general, non personalized retrieval engine, this could correspond to giving more weight to these new keywords. Within our person-alized scenario, the generated expansions can similarly be biased towards these terms. Nevertheless, more investigations are neces-sary in order to solve the challenges posed by this approach.
Other Features. The idea of adapting the retrieval process to various aspects of the query, of the user itself, and even of the em-ployed algorithm has received only little attention in the literature. Only some approaches have been investigated, usually indirectly. There exist studies of query behaviors at different times of day, or of the topics spanned by the queries of various classes of users, etc. However, they generally do not discuss how these features can be actually incorporated in the search process itself and they have almost never been related to the task of Web personalization.
We used exactly the same experimental setup as for our previ-ous analysis, with two log-based queries and two self-selected ones (all different from before, in order to make sure there is no bias on the new approaches), evaluated with NDCG over the Top-5 re-sults output by each algorithm. The newly proposed adaptive per-sonalized query expansion algorithms are denoted as A[LCO/TF] for the approach using TF with the clear Desktop queries, and as A[LCO/WN] when WN[SYN] was utilized instead of TF.

The overall results were at least similar, or better than Google for all kinds of log queries (see Table 4). For top frequent queries, Table 4: Normalized Discounted Cumulative Gain at the first 5 results when using our adaptive personalized search algorithms on top (left) and random (right) log queries.
 Table 5: Normalized Discounted Cumulative Gain at the first 5 results when using our adaptive personalized search algorithms on user selected clear (left) and ambiguous (right) queries. both adaptive algorithms, A[LCO/TF] and A[LCO/WN], improve with 10.8% and 7.9% respectively, both differences being also sta-tistically significant with p  X  0 . 01 . They also achieve an im-provement of up to 6.62% over the best performing static algo-rithm, LC[O] ( p = 0 . 07 ). For randomly selected queries, even though A[LCO/TF] yields significantly better results than Google ( p = 0 . 04 ), both adaptive approaches fall behind the static al-gorithms. The major reason seems to be the imperfect selection of the number of expansion terms, as a function of query clarity. Thus, more experiments are needed in order to determine the opti-mal number of generated expansion keywords, as a function of the query ambiguity level.

The analysis of the self-selected queries shows that adaptivity can bring even further improvements into Web search personal-ization (see Table 5). For ambiguous queries, the scores given to Google search are enhanced by 40.6% through A[LCO/TF] and by 35.2% through A[LCO/WN], both strongly significant with p 0 . 01 . Adaptivity also brings another 8.9% improvement over the static personalization of LC[O] ( p = 0 . 05 ). Even for clear queries, the newly proposed flexible algorithms perform slightly better, improving with 0.4% and 1.0% respectively.
 All results are depicted graphically in Figure 1. We notice that A[LCO/TF] is the overall best algorithm, performing better than Google for all types of queries, either extracted from the search en-gine log, or self-selected. The experiments presented in this section confirm clearly that adaptivity is a necessary further step to take in Web search personalization.
In this paper we proposed to expand Web search queries by ex-ploiting the user X  X  Personal Information Repository in order to au-tomatically extract additional keywords related both to the query itself and to user X  X  interests, personalizing the search output. In this context, the paper includes the following contributions: Figure 1: Relative NDCG gain (in %) for each algorithm over-all, as well as separated per query category.
We are currently performing investigations on the dependency between various query features and the optimal number of expan-sion terms. We are also analyzing other types of approaches to identify query expansion suggestions, such as applying Latent Se-mantic Analysis on the Desktop data. Finally, we are designing a set of more complex combinations of these metrics in order to provide enhanced adaptivity to our algorithms. We thank Ricardo Baeza-Yates, Vassilis Plachouras, Carlos Castillo and Vanessa Murdock from Yahoo! for the interesting discussions about the experimental setup and the algorithms we presented. We are grateful to Fabrizio Silvestri from CNR and to Ronny Lempel from IBM for providing us the AltaVista query log. Finally, we thank our colleagues from L3S for participating in the time consuming experiments we performed, as well as to the Eu-ropean Commission for the funding support (project Nepomuk, 6th Framework Programme, IST contract no. 027705).
