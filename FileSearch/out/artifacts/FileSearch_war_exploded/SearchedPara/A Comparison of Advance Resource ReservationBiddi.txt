 Grid Computing is a newly emerging technology that enables users to share a large number of computing resources distributed over a network. Compu-tational grid applications use high-performance, distributed resources such as computers, networks, databases and instruments. The Grid is a highly dynamic environment with servers coming on-line, going off-line, and with continuously varying demands from the clients. Since grid resources are not storable, thus that capacity not used today can be put aside for future use. So the advance reservation of these resources are needed for users to request resources from multiple scheduling systems at a specific time and thus gain simultaneous ac-cess to enough resources for their application. As be defined in [2], an Ad-vance Reservation is a possibly limited or restricted delegation of a particu-lar resource capability over a demand time interval, obtained by the requestor from the resource owner through a negotiation process [8]. Example resource capabilities: number of processors, amount of memory, disk space, software li-cences, network bandwidth, etc. Moreover, the works of advance reservations, started within the GGF (Global Grid Forum) to support advance reservations, are currently being added in some test-bed of grid toolkit, such as the Nimrod-G [3], Portable Batch System (PBS) and the Maui scheduler, however the study of the dynamic of the advance reservations through software agents partici-pating in multiple overly auction-based scheduling systems has seldom been made.
 reservation through software agent participating multiple overlapping English auctions. Auction-based method fill three important needs. First, they respect the natural autonomy and private information within a distributed system. Sec-ondly, they can provide incentives for agents to reveal truthful information (in-directly, via bids) about their values for different schedules. Thirdly, an eco-nomic basis for resource sharing can provide flexibility, efficiency, scalability and feedback for budget and investment decisions [1]. We also introduce and evalu-ate the performance two novel heuristic bidding strategies, compared with sev-eral other different bidding strategies for computational resource reservation in scheduling systems . Although, in this paper, only CPU resources are considered here this approach may be generalized to other resources such as network and storage.
 brief review of the related works about our research. In Section 3, the definition and the states of advance reservation used in this paper are given, and the model of advance reservation by multiple English is discussed. In Section 4, we demonstrate the empirical evaluation of our heuristic algorithm against a number of strategies that have been proposed in the literature. Finally, in Section 5 we present the conclusions and future work. As online auctions are increasingly being used to trade goods and services [6], in order to make effective decisions, users need to monitor many different auc-tions. And the researcher begin to pay more attention to how to use agent to participate in multiple overlapping auctions. Anthony [4] developed a heuris-tic decision-making framework that an autonomous agent can exploit to tackle the problem of bidding across multiple auctions with varying start and end times and with vary protocols (including English, Dutch and Vickrey). Byde [11][12] studied simulations of populations of agents for purchasing similar goods by participating in sequences of overlapping English auctions, using three dif-ferent bidding algorithms. Minghua He [5] introduced a bidding strategy for obtaining goods in multiple overlapping English auctions. The strategy uses fuzzy sets to express trade-offs between multi-attributes goods and exploits neuro-fuzzy techniques to predict the expected closing prices of the auctions and to adapt the agent X  X  bidding strategy it reflects the type of environment in which it is situated. The works about bidding multiple auctions as men-tioned above are not consider the deliver time of the service and how to bid the reservations. scheduling problem, in which agents compete for periods of time on shared ma-chine. However, in this study the service units are restricted to be discrete and the service is provided by the signal owner. It X  X  quite different from the reality of grid environment.
 vation. In this section, we specifically consider the case of bidding in multiple overlapping English auctions and the state of advance reservation is simplified. 3.1 The State of Advance Reservation As be noted in GRAAP-WG [2], the state of advance reservation has nine dif-ferent states. For simplicity, in this paper we only consider the following three most important states:  X  Requested: A user has requested a set of resources for a reservation. If the  X  Declined: The reservation is not successfully allocated for some reason.  X  Booked: A reservation has been made, and will be honored by the scheduler. 3.2 Multiple Ascending Auction Now, we present a new variant of ascending auction protocol which is differ-ent from the standard ascending auction [9] for the general continuous resource reservation protocol. In detail, we consider a multiple English auction market, where each auction is given a start and an active bidding lasting time that may overlap with other auctions. We assume that English auctions work according to the following principles: the service. We don X  X  assume that the different auctions X  rounds are synchro-nized, that is, all auctions move from one round to the next simultaneously. provider will select the highest bidding agent as the active one, and then it will update its current price. If there are more than one highest bidding, the service provider randomly selects one as the active agent. If the request of the user agent is declined, the agent is inactive . If the agent i  X  X  bidding to the service provider j and is active in the last l j round, the agent i will win this auction and the request of resource reservation is booked. The service provider will reset the service price to its X  reserve price, and update the start time of the next service, and then a new auction turn will begin. holding an active bid in an auction or it has not already obtained the service. If user agent i is inactive, the user agent will choose the service provider which it will request to and then decide whether or not to propose the next bid in this server. As we note below, each service provider has its reserve price, and the valid bids to the service provider j must be increased by  X  j .
 ments of bidder identities, the task size of the active agent will be announced by the auctioneer, and the number of user agents remaining in the system can be known by everyone. 3.3 Service Provider Suppose there are R service providers willing to provide computation service, the services of the providers are homogenous. The services are reserved through auctions, and each service provider runs one auction independently.
 and computation service can be started at time s j . Each service provider has its lowest price r j for providing service (also call reserve price) and the minimal increase of the price  X  j in the auction. If one agent X  X  bid to the service provider j is the highest bid in the last l j rounds, the agent i will win this auction and the request of resource reservation is booked. As we have mentioned before, the agent X  X  task size and the service X  X  new start time are announced by provider and can be known by all the user agents. We also call the service provider server later on.
 auctions. One is the price for executing a job, and the other is the price of one computation unit. In this paper, we adopt the latter. 3.4 User Agent Next we are to describe the user agent. Suppose there are N user agents, each agent with one task to fulfill before the deadline. Furthermore, we assume that agent i has a budget m i , the size of the task of agent i is t i and the deadline of the task d i . The information of agents X  task size , deadline and budget are private information, and the distributions of these information are all unknown to the agents.
 the task is end time. In this paper, we use a constant elasticity of substitution (CES) func-tion to present user agent X  X  utility u ij .If d i  X  e ij and m i  X  b ij , otherwise, u ij = 0. So the agents must make trade-offs between the task finish time and the cost of the execution.
 resource advance reservation. 3.5 Heuristic Bidding Strategy An English auction is one in which a single good is on offer and the auction-eer starts with his reserve price (minimum acceptable) and solicits successively higher (public) bids from the bidders and the last bidder remaining in the auc-tions will be the winner. In contrast to the stand-alone English auction, there is no dominant strategy that can be exploited in the multiple auction context [12]. Moreover, our analysis is from the standard noncooperative perspective, which assumes that agents do not directly coordinate their bidding.
 the likely closing prices of the various auctions, so that the agent can deter-mine whether is should place a bid at current moment or whether is should be delay because better deals may subsequently become available. So before we pro-pose our heuristic algorithm, we firstly make a distinction between the bidding strategies. If the agent X  X  strategy can predict the prices of the next k turns of the auctions, we call the strategy level k strategy. And more specifically, if the agent takes into consideration all the future turns of the auctions, we call this strategy level  X  strategy.
 turn in the same server. of agent who are participating in the auctions at the current time t . Moreover, p ( t k ) is the predication of the price on server j and n ( t k ) is the number of agents remaining in the system at the time of t k , n ( t k )  X  [1 ,n ( t )  X  1]. As is shown in Figure 2, we can see that if there is only one user agent in the system, the price of the service on server j will fall down to the server X  X  reserve price. But as the number of agents increases, the competition of the service becomes severe, and the price of the service will increase.
 Greedy(1) strategy: unless the agent is active in some auction, based on Equa-tion 4, the agent decides to bid in whichever auction currently has the highest evaluation, or decides not to bid if there exists a higher expected evaluation in the next turn than the current highest evaluation.
 the current auction will be closed soon. If we want to predict the likely closing price p j of the service j in the next turn, conservatively, we say the number of 1) /lg ( n ). Through comparing the utilities of the current turn and the utilities of the next turn using Equation 3 and Equation 4, the agents can make decisions on when and which auction they will bid to.
Greedy(  X  ) strategy: If the agent knows the average size of agents X  tasks, it can use the following equation to predicate its task end time. For n ( t k )  X  [1 ,n ( t )  X  1], based on Equation 3 and Equation 4, the agent can predicate the maximum utility by comparing different utilities. Unless the agent is active in some auction, the agent decides to bid in whichever auction currently with the highest evaluation, or decides not to bid if there exists a higher expected evaluation in future turns than the current highest evaluation. It indicates in the complex scenarios that the highest level of the strategy is not certainly with the best performance. This section evaluates our heuristic agent by comparing it in a variety of envi-ronments, with other agents using bidding strategies proposed in the literature. 4.1 Evaluation Criterion Since most of the extant multi-auction bidding strategies are concerned solely with price, we have to extend them to dealing with bidding for resource reserva-tion that is characterized by multiple attributes. In all cases, the agents use the CES utility function specified in Section 3 in order to make trade-offs between price and service time. The satisfaction of the user agent is defined as follows: N i is the number of type i agents. 4.2 Experimental Setup If we only consider the current turn of each auction, there were three most significant strategies has been proposed in this literature [11][12]. The specific benchmark strategies we used are:  X  Fix Auction strategy: randomly select at the beginning of a game the auc- X  Greedy strategy: unless the agent is active in some auction, bid in whichever  X  Fix Threshold strategy: randomly assign an evaluation threshold  X   X  [0 , 1] if we consider not only the current turn of each auction, but also the future turns of each auction, we can use the following level 1 strategy and level  X  strategy. In the following section, we compare the performance of difference strategies. 4.3 Results In this section we present the results of simulations of our model while consid-ering a variety of parameters. We compare the performance of the strategies in single and multi Service Provide environments and evaluate the bidding strate-gies in both homogeneous and heterogenous environments. In each case, at least 100 simulations of advance resource reservation are played among agents. Note that in following tables (i) indicating the level of the strategy.
 Case 1: Single Service Provider and the homogenous Agents In this case, all the agents are of the same type, that is, in each simulation each agent use the same bidding strategies. We assume that  X  i 1 =  X  i 2 =1, A i =1,  X  i =2, l j = 10,  X  j =1,  X  =0 . 5, the agent X  X  task size is normally distributed between [100 , 200]. Agents X  deadline, cost, and the capacity of server are independent and normally distributed in [100 , 200]. The average satisfactions of the agents are demonstrated in Table 1 when the total number of agents N is 10, 20, or 30.
 Case 2: Single Service Provider and Agents are heterogenous In this case, heterogenous agents are competed the resource in the games. The parameters of simulation keep the same as those of case 1 when the agents are homogenous, except that the agent adopt different bidding strategy, and each type of agents accounts for 25 percent. The results of the experiments are demonstrated in Table 2 when the total number of agents is 10, 20, or 30. Case 3: Multiple Service Providers and the Agents are homogenous.
 In this case, the agents can bid to multiple service providers and all the agents use the same bidding strategies. we assume also that  X  i 1 =  X  i 2 =1, A i =1,  X  =2, l i = 10,  X  j = 1. The agent X  X  task size is normally distributed between [100 , 200]. Agents X  deadline, cost, and the capacity of servers are independent and normally distributed in [100 , 200]. However, we assume that the number of service providers is 3, 5 or 7 in simulations. The experimental results are showed in Table 3 when the total number of agents is 20.
 Case 4: Multiple Service Providers and the Agents are heterogenous.
 In this case, we assume also that  X  i 1 =  X  i 2 =1, A i =1,  X  i =2, l i = 10,  X  j =1. The agent X  X  task size is normally distributed between [100 , 200]. Agents X  deadline, cost, and the capacity of servers are independent and normally distributed in [100 , 200], In Table 4 shows the result of experiments when the number of service providers is 3, 5 or 7 and the total number of agents is 20 with each type of agents accounting for 25 percent.
 other three strategies in these four cases. One interesting result of our simulations is that the Greedy(  X  ) strategy performs much better than other methods in single service provider cases, however it gains slightly lower scores than the Greedy(1) strategy in multiple service providers ones. In this paper, we develop a novel resource reservation framework based on mul-tiple overlaying and sequential ascending auctions. We also introduce a novel heuristic strategy to guide agents on which auction they should bid to, when to bid, and how much they should bid in multiple overlapping Ascending English auctions. Through comparing our bidding strategies with several other different bidding strategies for the computational resource reservations in single provider and multiple service providers scenarios when agents are homogenous or when agents are heterogenous, we show that our heuristic bidding strategies outper-forms other methods in all those cases.
 the system, and since the auctions don X  X  close simultaneously, it is difficult to predict the remaining active agents in the system except the next turn, so their bidding strategies are quite myopic. We believe that a more effective decision mechanism needs to use the explicit probability distribution over possible agent X  X  task size, agent X  X  budget, and the predication of each auction X  X  closing time. And the different price predication functions and bidding strategies also need to be investigated.

