 Virtual human characters constitute a promising contribution to many fields, including simulation, training and interactive games (Kenny et al., 2007; Jan et al., 2009). The ability to communicate using natural language is important for believable and ef-fective virtual humans. Such ability has to be good enough to engage the trainee or the gamer in the ac-tivity. Nowadays, most conversational systems oper-ate on a dialogue-act level and require extensive an-notation efforts in order to be fit for their task (Rieser and Lemon, 2010). Semantic annotation and rule authoring have long been known as bottlenecks for developing conversational systems for new domains.
In this paper, we present novel a algorithm for generating virtual instructors from automatically an-notated human-human corpora. Our algorithm, when given a task-based corpus situated in a virtual world, generates an instructor that robustly helps a user achieve a given task in the virtual world of the corpus. There are two main approaches toward au-tomatically producing dialogue utterances. One is the selection approach, in which the task is to pick the appropriate output from a corpus of possible out-puts. The other is the generation approach, in which the output is dynamically assembled using some composition procedure, e.g. grammar rules. The se-lection approach to generation has only been used in conversational systems that are not task-oriented such as negotiating agents (Gandhe and Traum, 2007), question answering characters (Kenny et al., 2007), and virtual patients (Leuski et al., 2006). Our algorithm can be seen as a novel way of doing robust generation by selection and interaction management for task-oriented systems.

In the next section we introduce the corpora used in this paper. Section 3 presents the two phases of our algorithm, namely automatic annotation and di-alogue management through selection. In Section 4 we present a fragment of an interaction with a vir-tual instructor generated using the corpus and the algorithm introduced in the previous sections. We evaluate the virtual instructor in interactions with human subjects using objective as well as subjec-tive metrics. We present the results of the evaluation in Section 5. We compare our results with both hu-man and rule-based virtual instructors hand-coded for the same task. Finally, Section 6 concludes the paper proposing an improved virtual instructor de-signed as a result of our error analysis. The Challenge on Generating Instructions in Vir-tual Environments (GIVE; Koller et al. (2010)) is a shared task in which Natural Language Gener-ation systems must generate real-time instructions that guide a user in a virtual world. In this paper, we use the GIVE-2 Corpus (Gargett et al., 2010), a cor-pus of human instruction giving in virtual environ-ments. We use the English part of the corpus which consists of 63 American English written discourses in which one subject guided another in a treasure hunting task in 3 different 3D worlds.

The task setup involved pairs of human partners, each of whom played one of two different roles. The  X  X irection follower X  (DF) moved about in the vir-tual world with the goal of completing a treasure hunting task, but had no knowledge of the map of the world or the specific behavior of objects within that world (such as, which buttons to press to open doors). The other partner acted as the  X  X irection giver X  (DG), who was given complete knowledge of the world and had to give instructions to the DF to guide him/her to accomplish the task.

The GIVE-2 corpus is a multimodal corpus which consists of all the instructions uttered by the DG, and all the object manipulations done by the DF with the corresponding timestamp. Furthermore, the DF X  X  position and orientation is logged every 200 mil-liseconds, making it possible to extract information about his/her movements. Our algorithm consists of two phases: an annotation phase and a selection phase. The annotation phase is performed only once and consists of automatically associating the DG instruction to the DF reaction. The selection phase is performed every time the vir-tual instructor generates an instruction and consists of picking out from the annotated corpus the most appropriate instruction at a given point. 3.1 The automatic annotation The basic idea of the annotation is straightforward: associate each utterance with its corresponding re-action . We assume that a reaction captures the se-mantics of its associated instruction. Defining re-action involves two subtle issues, namely boundary determination and discretization . We discuss these issues in turn and then give a formal definition of reaction.
 We define the boundaries of a reaction as follows. A reaction r k to an instruction u k begins right af-ter the instruction u k is uttered and ends right before the next instruction u k +1 is uttered. In the follow-ing example, instruction 1 corresponds to the reac-tion  X  2 , 3 , 4  X  , instruction 5 corresponds to  X  6  X  , and instruction 7 to  X  8  X  .
 DG(1): hit the red you see in the far room DF(2): [enters the far room] DF(3): [pushes the red button] DF(4): [turns right] DG(5): hit far side green DF(6): [moves next to the wrong green] DG(7): no DF(8): [moves to the right green and pushes it]
As the example shows, our definition of bound-aries is not always semantically correct. For in-stance, it can be argued that it includes too much because 4 is not strictly part of the semantics of 1 . Furthermore, misinterpreted instructions (as 5 ) and corrections (e.g., 7 ) result in clearly inappropriate instruction-reaction associations. Since we want to avoid any manual annotation, we decided to use this naive definition of boundaries anyway. We discuss in Section 5 the impact that inappropriate associa-tions have on the performance of a virtual instructor.
The second issue that we address here is dis-cretization of the reaction. It is well known that there is not a unique way to discretize an action into sub-actions. For example, we could decompose action 2 into  X  X nter the room X  or into  X  X et close to the door and pass the door X . Our algorithm is not dependent on a particular discretization. However, the same discretization mechanism used for annotation has to be used during selection, for the dialogue manager to work properly. For selection (i.e., in order to de-cide what to say next) any virtual instructor needs to have a planner and a planning domain represen-tation , i.e., a specification of how the virtual world works and a way to represent the state of the virtual world. Therefore, we decided to use them in order to discretize the reaction.
 Now we are ready to define reaction formally. Let S k be the state of the virtual world when uttering in-struction u k , S k +1 be the state of the world when uttering the next utterance u k +1 and D be the plan-ning domain representation. The reaction to u k is defined as the sequence of actions returned by the planner with S k as initial state, S k +1 as goal state and D as planning domain.

The annotation of the corpus then consists of au-tomatically associating each utterance to its (dis-cretized) reaction. 3.2 Selecting what to say next In this section we describe how the selection phase is performed every time the virtual instructor generates an instruction.

The instruction selection algorithm consists in finding in the corpus the set of candidate utterances C for the current task plan P ; P being the se-quence of actions returned by the same planner and planning domain used for discretization. We define C = { U  X  Corpus | U. Reaction is a prefix of P } . In other words, an utterance U belongs to C if the first actions of the current plan P exactly match the reaction associated to the utterance. All the utter-ances that pass this test are considered paraphrases and hence suitable in the current context.

While P does not change, the virtual instructor iterates through the set C , verbalizing a different ut-terance at fixed time intervals (e.g., every 3 seconds). In other words, the virtual instructor offers alterna-tive paraphrases of the intended instruction. When P changes as a result of the actions of the DF, C is recalculated.

It is important to notice that the discretization used for annotation and selection directly impacts the behavior of the virtual instructor. It is crucial then to find an appropriate granularity of the dis-cretization. If the granularity is too coarse, many instructions in the corpus will have an empty asso-ciated reaction. For instance, in the absence of the representation of the user orientation in the planning domain (as is the case for the virtual instructor we evaluate in Section 5), instructions like  X  X urn left X  and  X  X urn right X  will have empty reactions making them indistinguishable during selection. However, if the granularity is too fine the user may get into sit-uations that do not occur in the corpus, causing the selection algorithm to return an empty set of candi-date utterances. It is the responsibility of the virtual instructor developer to find a granularity sufficient to capture the diversity of the instructions he wants to distinguish during selection. We implemented an English virtual instructor for one of the worlds used in the corpus collection we presented in Section 2. The English fragment of the corpus that we used has 21 interactions and a total of 1136 instructions. Games consisted on average of 54.2 instructions from the human DG, and took about 543 seconds on average for the human DF to complete the task.

On Figures 1 to 4 we show an excerpt of an in-teraction between the system and a real user that we collected during the evaluation. The figures show a 2D map from top view and the 3D in-game view. In Figure 1, the user, represented by a blue character, has just entered the upper left room. He has to push the button close to the chair. The first candidate ut-terance selected is  X  X ed closest to the chair in front of you X . Notice that the referring expression uniquely identifies the target object using the spatial proxim-ity of the target to the chair. This referring expres-sion is generated without any reasoning on the tar-get distractors, just by considering the current state of the task plan and the user position.

After receiving the instruction the user gets closer to the button as shown in Figure 2. As a result of the new user position, a new task plan exists, the set of candidate utterances is recalculated and the system selects a new utterance, namely  X  X he closet one X .
The generation of the ellipsis of the button or the chair is a direct consequence of the utterances nor-mally said in the corpus at this stage of the task plan (that is, when the user is about to manipulate this ob-ject). From the point of view of referring expression algorithms, the referring expression may not be op-timal because it is over-specified (a pronoun would be preferred as in  X  X lick it X ), Furthermore, the in-struction contains a spelling error ( X  X loset X  instead of  X  X losest X ). In spite of this non optimality, the in-struction led our user to execute the intended reac-tion, namely pushing the button.

Right after the user clicks on the button (Figure 3), the system selects an utterance corresponding to the new task plan. The player position stayed the same so the only change in the plan is that the button no longer needs to be pushed. In this task state, DGs usually give acknowledgements and this then what our selection algorithm selects:  X  X ood X .

After receiving the acknowledgement, the user turns around and walks forward, and the next action in the plan is to leave the room (Figure 4). The sys-tem selects the utterance  X  X xit the way you entered X  which refers to the previous interaction. Again, the system keeps no representation of the past actions of the user, but such utterances are the ones that are found at this stage of the task plan. In this section we present the results of the evalu-ation we carried out on the virtual instructor pre-sented in Section 4 which was generated using the dialogue model algorithm introduced in Section 3.
We collected data from 13 subjects. The partici-pants were mostly graduate students; 7 female and 6 male. They were not English native speakers but rated their English skills as near-native or very good.
The evaluation contains both objective measures which we discuss in Section 5.1 and subjective mea-sures which we discuss in Section 5.2. 5.1 Objective metrics The objective metrics we extracted from the logs of interaction are summarized in Table 1. The table compares our results with both human instructors and the three rule-based virtual instructors that were top rated in the GIVE-2 Challenge. Their results cor-respond to those published in (Koller et al., 2010) which were collected not in a laboratory but con-necting the systems to users over the Internet. These hand-coded systems are called NA, NM and Saar. We refer to our system as OUR.
In the table we show the percentage of games that users completed successfully with the different in-structors. Unsuccessful games can be either can-celed or lost. To ensure comparability, time until task completion, number of instructions received by users, and mouse actions are only counted on suc-cessfully completed games.

In terms of task success, our system performs bet-ter than all hand-coded systems. We duly notice that, for the GIVE Challenge in particular (and proba-bly for human evaluations in general) the success rates in the laboratory tend to be higher than the suc-cess rate online (this is also the case for completion times) (Koller et al., 2009).

In any case, our results are preliminary given the amount of subjects that we tested (13 versus around 290 for GIVE-2), but they are indeed encouraging. In particular, our system helped users to identify bet-ter the objects that they needed to manipulate in the virtual world, as shown by the low number of mouse actions required to complete the task (a high number indicates that the user must have manipulated wrong objects). This correlates with the subjective evalu-ation of referring expression quality (see next sec-tion).

We performed a detailed analysis of the instruc-tions uttered by our system that were unsuccessful, that is, all the instructions that did not cause the in-tended reaction as annotated in the corpus. From the 2081 instructions uttered in the 13 interactions, 1304 (63%) of them were successful and 777 (37%) were unsuccessful.

Given the limitations of the annotation discussed in Section 3.1 (wrong annotation of correction ut-terances and no representation of user orientation) we classified the unsuccessful utterances using lexi-cal cues into 1) correction ( X  X o X , X  X on X  X  X , X  X eep X , etc.), 2) orientation instruction ( X  X eft X ,  X  X traight X ,  X  X ehind X , etc.) and 3) other. We found that 25% of the unsuc-cessful utterances are of type 1, 40% are type 2, 34% are type 3 (1% corresponds to the default utterance  X  X o X  that our system utters when the set of candidate utterances is empty). Frequently, these errors led to contradictions confusing the player and significantly affecting the completion time of the task as shown in Table 1. In Section 6 we propose an improved virtual instructor designed as a result of this error analysis. 5.2 Subjective metrics The subjective measures were obtained from re-sponses to the GIVE-2 questionnaire that was pre-sented to users after each game. It asked users to rate different statements about the system using a contin-uous slider. The slider position was translated to a number between -100 and 100. As done in GIVE-2, for negative statements, we report the reversed scores, so that in Tables 2 and 3 greater numbers are always better. In this section we compare our re-sults with the systems NA, Saar and NM as we did in Section 5.1, we cannot compare against human in-structors because these subjective metrics were not collected in (Gargett et al., 2010).

The GIVE-2 Challenge questionnaire includes twenty-two subjective metrics. Metrics Q1 to Q13 and Q22 assess the effectiveness and reliability of instructions. For almost all of these metrics we got similar or slightly lower results than those obtained by the three hand-coded systems, except for three metrics which we show in Table 2. We suspect that the low results obtained for Q5 and Q22 relate to the unsuccessful utterances identified and discussed in Section 5.1. The high unexpected result in Q6 is probably correlated with the low number of mouse actions mentioned in Section 5.1.

Metrics Q14 to Q20 are intended to assess the nat-uralness of the instructions, as well as the immer-sion and engagement of the interaction. As Table 3 shows, in spite of the unsuccessful utterances, our system is rated as more natural and more engaging (in general) than the best systems that competed in the GIVE-2 Challenge.
 In this paper we presented a novel algorithm for rapidly prototyping virtual instructors from human-human corpora without manual annotation. Using our algorithm and the GIVE corpus we have gener-ated a virtual instructor 1 for a game-like virtual en-vironment. We obtained encouraging results in the evaluation with human users that we did on the vir-tual instructor. Our system outperforms rule-based virtual instructors hand-coded for the same task both in terms of objective and subjective metrics. It is important to mention that the GIVE-2 hand-coded systems do not need a corpus but are tightly linked to the GIVE task. Our algorithm requires human-human corpora collected on the target task and en-vironment, but it is independent of the particular in-struction giving task. For instance, it could be used for implementing game tutorials, real world naviga-tion systems or task-based language teaching.
In the near future we plan to build a new version of the system that improves based on the error anal-ysis that we did. For instance, we plan to change our discretization mechanism in order to take orien-tation into account. This is supported by our algo-rithm although we may need to enlarge the corpus we used so as not to increase the number of situa-tions in which the system does not find anything to say. Finally, if we could identify corrections auto-matically, as suggested in (Raux and Nakano, 2010), we could get another increase in performance, be-cause we would be able to treat them as corrections and not as instructions as we do now.

In sum, this paper presents a novel way of au-tomatically prototyping task-oriented virtual agents from corpora who are able to effectively and natu-rally help a user complete a task in a virtual world.
