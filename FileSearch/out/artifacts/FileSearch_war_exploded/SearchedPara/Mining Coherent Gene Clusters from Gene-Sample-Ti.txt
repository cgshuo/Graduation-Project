 Extensive studies have shown that mining microarray data sets is important in bioinformatics research and biomedical applications. In this paper, we explore a novel type of gene-sample-time microarray data sets, which records the expres-sion levels of various genes under a set of samples during a series of time points. In particular, we propose the mining of coherent gene clusters from such data sets. Each clus-ter contains a subset of genes and a subset of samples such that the genes are coherent on the samples along the time series. The coherent gene clusters may identify the samples corresponding to some phenotypes (e.g., diseases), and sug-gest the candidate genes correlated to the phenotypes. We present two efficient algorithms, namely the Sample-Gene Search and the Gene-Sample Search , to mine the complete set of coherent gene clusters. We empirically evaluate the performance of our approaches on both a real microarray data set and synthetic data sets. The test results have shown that our approaches are both efficient and effective to find meaningful coherent gene clusters.
 H.2.8 [ Database Management ]: Database Applications X  Data Mining Algorithms, Experimentation Bioinformatics, clustering, microarray data
This research is partly supported by NSF grants DBI-0234895, IIS-0308001 and NIH grant 1 P20 GM067650-01A1. All opinions, findings, conclusions and recommen-dations in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.
The recent microarray technology can measure the ex-pression levels of thousands of genes simultaneously. It is an important research problem in bioinformatics and clini-cal research to explore the patterns in microarray data sets. For example, in drug development, gene expression patterns may reflect gene-level responses to different drug treatments and provide deep insights into the nature of the diseases.
Most microarray data sets can be divided into two cate-gories. On the one hand, the gene-time data sets record the expression levels of various genes during important biologi-cal processes over a series of time points. The gene-sample data sets account the expression levels of various genes across related samples. Both gene-time data sets and gene-sample data sets can be represented by a n  X  l gene expression matrix of n genes and l samples/time points. In the gene expression matrix, the rows are the genes and the columns are either samples (in gene-sample data sets) or ordered time points (in gene-time data sets), while each cell represents the ex-pression level of a certain gene on a certain sample or at a certain time point.

With the latest advances in the microarray technology, the expression levels of a set of genes under a set of sam-ples can be monitored synchronically during a series of time points [20]. Different from the previous gene-time or gene-sample microarray data sets, these new data sets have three types of variables: genes , samples and time .Wecallsuch data gene-sample-time microarray data ,or GST data for short. Figure 1(a) elaborates the structure of a GST mi-croarray data set. Figure 1: The structure of GST microarray data
In general, each cell m k i,j in a GST data set represents the expression level of gene g i under sample s j at time point t Interestingly, a GST data set can also be viewed as a n  X  matrix, such that each cell m i,j contains the time series with respect to gene g i under sample s j , as shown in Figure 1(b).
The previous studies on gene-sample microarray data (e.g., [7, 2, 15, 1]) indicate that high correlations may exist be-tween the gene expression patterns and some diseases. It is natural to extend the similar analysis to GST microarray data. That is, it is interesting to identify a subset of genes G and a subset of samples S in a GST microarray data set such that each gene g  X  G has coherent patterns across the samples in S during the time series. For example, in Fig-ure 1, gene g i 1 , g i 2 and g i 3 show coherent patterns across samples s j 1 , s j 2 and s j 3 , respectively. We call such subsets of genes and samples a coherent gene cluster .

What is the biological meaning of the coherent gene clus-ters? The coherent gene clusters provide valuable hypothesis for biologists. The samples in a cluster may correspond to a phenotype, such as the patients having a disease, while the corresponding set of genes may suggest the candidate genes correlated to the disease.

The functions of genes in an organism are highly com-plicated. There are typically multiple coherent clusters in a data set. Different clusters may correlate to different pheno-types, such as age and gender. Therefore, to avoid missing any valuable hypothesis, it is necessary to mine all the co-herent clusters in the data set.

Many previous studies investigate the mining of interest-ing patterns from microarray matrices. For example, vari-ous clustering algorithms can identify the co-expressed genes showing coherent patterns during the time-series (e.g., [17, 12, 15, 8]). Moreover, both supervised or unsupervised ap-proaches are proposed to partition the samples into homo-geneous groups (e.g., [4, 14, 9, 16]). Additionally, statistical approaches have been proposed to validate the significance of the mining results (e.g., [3, 18, 5]). However, all previ-ous studies target at conventional gene-time or gene-sample microarray data sets. The models of clusters in those pre-vious studies are different from our coherent gene clusters which disclose the correlation among genes, samples and time points. Therefore, those algorithms cannot be extended directly to solve our problem.

Recently, the pattern-based clustering approaches (e.g., [19]) have been developed to discover subsets of objects following similar patterns on subsets of attributes. Conceptually, a pattern-based cluster is a coherent gene cluster. If we treat the GST microarray data sets as a n  X  l matrix of time se-ries, as shown in Figure 1(b), then pattern-based clusters and coherent gene clusters may have some similarity at the first look. However, in some pattern-based approaches, a cluster requires that each pair of objects in the cluster must be coherent on each pair of attributes. Such a requirement is often too strong in practice. Our coherent gene clustering relaxes the constraints among the objects. Therefore, each traditional pattern-based cluster is a coherent gene cluster, but not necessarily true vice versa.

In this paper, we tackle the problem of mining coherent patterns from gene-sample-time microarray data sets and make the following contributions.
 First, we propose a model of coherent gene clusters in GST microarray data sets. We justify that the model is meaningful for biomedical research.

Second, we identify the computational challenges and con-duct a systematic research on mining coherent gene clus-ters from GST microarray data sets. We develop two ap-proaches, namely the Gene-Sample Search and the Sample-Gene Search , to mine the complete set of coherent gene clus-ters. We illustrate and compare the efficiency and scalability of both approaches.

Last, we conduct an extensive empirical evaluation on both real data sets and synthetic data sets. Our results show that our proposed methods can find coherent gene clusters interesting to biomedical research from real data sets. The results on synthetic data sets also show that our algorithms are both efficient and scalable.

The rest of the paper is organized as follows. Section 2 defines the problem. Section 3describes the preprocessing step of computing the maximal coherent samples sets for each individual gene. Section 4 presents two algorithms to mine coherent gene clusters. In Section 5, our methods are evaluated using real and synthetic data sets. Related work is discussed in Section 6. Section 7 concludes the paper.
Given a set of n genes G -Set = { g 1 ,...,g n } and a set of l samples S -Set = { s 1 ,...,s l } , we can measure the expression levels of the genes on the samples. The results form a con-ventional n  X  l microarray matrix M = { m i,j } ,where m i,j is the expression level of gene g i (1  X  i  X  n )onsample s (1  X  j  X  l ). If such microarray experiments are conducted synchronically on all genes and all samples at time instants t ,...,t T ,theresultsforma n  X  l  X  T GST microarray matrix M = { m t i,j } ,where(1  X  t  X  T ).

A GST microarray matrix M = { m t i,j } can also be viewed as a n  X  l matrix M = { m i,j } such that m i,j is a vector of m 1 i,j ,...,m T i,j . Hereafter, we do not strictly distinguish the two notations. Instead, whenever m i,j is written, the vector is referred to.

In this paper, we are interested in finding those genes that are coherent on a subset of samples during the whole time series. There are various methods to measure the correla-tion between two time series. However, for gene expression data, users are often interested in the overall trends of the expression levels instead of the absolute magnitudes. There-fore,wechoosethe Pearson X  X  correlation coefficient as the coherence measure, since it is robust to shifting and scaling patterns [22]. Specifically, given two vectors m i,j 1 and m of gene g i , the coherence  X  ( m i,j 1 ,m i,j 2 ) is defined as where m i,j = of gene g i on sample s j . The correlation coefficient ranges between  X  1 and 1. The larger the value, the more coherent are the two vectors.

Agene g i is coherent across a subset of samples S  X  S -Set , if given any pair of samples s j 1 ,s j 2  X  S, X  ( m i,j 1 where  X  is a minimum coherence threshold specified by the user. For a subset of genes G  X  G -Set and a subset of samples S  X  S -Set ,ifeverygene g i  X  G is coherent across samples in S ,wecall gene set G coherent on sample set S . ( G  X  S ) is called a coherent gene cluster . A coherent gene cluster having u genes and v samplesissaida( u,v )-coherent gene cluster.

Trivially, for any gene g i and any sample s j ,( { g i } X { a(1 , 1)-coherent gene cluster, and ( G -Set  X { s j } )and( S -Set ) are trivial ( | G -Set | , 1)-and (1 , | S -Set clusters, respectively. To avoid this triviality, we require that a coherent gene cluster should consist of at least two genes and two samples.
 Given a coherent gene cluster ( G  X  S ), for any subsets G  X  G and S  X  S ,( G  X  S ) is also a coherent gene cluster. To avoid such redundancy, a coherent gene cluster ( G  X  S ) is maximal if there exists no any other coherent gene clus-ter ( G  X  S ) such that G  X  G , S  X  S .Moreover,auser may not be interested in very small clusters, which are often formed by chance. Thus, a user can specify the minimum numbers of genes and samples in a cluster. Generally, given min g and min s as user defined minimum gene size and sam-ple size thresholds, a cluster ( G  X  S ) is called significant if |
G | X  min g and | S | X  min s .
 Problem definition Given a GST microarray matrix M , a minimum coherence threshold  X  ,aminimumgenesize threshold min g and a minimum sample size threshold min s the problem of mining coherent gene clusters is to find the complete set of significant maximal coherent gene clusters in M with respect to the parameters. Hereafter, a signifi-cant maximal coherent gene cluster is called a coherent gene cluster for short.
We propose two algorithms computing maximal coherent gene clusters. In both algorithms, to compute coherent gene clusters, we need to check whether a subset of genes are coherent on a subset of samples. To facilitate the tests, for each gene g k , we compute the sets of samples S such that (1) | S | X  min s ;(2) g k is coherent on S ; and (3) there exists no superset S  X  S such that g k is also coherent on S . S is called a maximal coherent sample set of g k . Please note that, in general, a gene may have more than one maximal coherent sample set.

For a gene g k , all of its maximal coherent sample sets can be computed efficiently using the following 2-step process.
In the first step, we test whether gene g k is coherent on each pair of samples ( s i ,s j ). A binary triangle matrix is populated, where 1  X  i&lt;j  X | S -Set | . c i,j =1ifgene g k is coherent on samples s i and s j , i.e.,  X  ( m k,i ,m otherwise, c i,j =0.

Once the matrix { c i,j } is populated, the problem of find-ing g k  X  X  maximal coherent sample sets can be reduced to the problem of finding all maximal cliques of size at least min in graph G k =( S -Set,E ), where ( s i ,s j ) is an edge in the graph if and only if c i,j = 1. A clique S is called maximal if there exists no any other clique S such that S  X  S .Please note that there may exist more than one maximal clique in a graph.

Unlike the conventional clique problem where the clique of the maximal size is found, here, we need to find the complete set of maximal cliques in the graph. It is well known that the conventional clique problem is NP-complete. So is the problem of finding the complete set of maximal cliques.
Fortunately, the real GST microarray data sets are often sparse and the number of samples is typically below one hun-dred. For each gene, the number of maximal cliques is quite small and the samples can often be partitioned into exclu-sive small subsets. Our experimental results show that, with efficient search and pruning techniques, it is still practical to find the complete set of maximal cliques. In the following, Figure 2: Enumeration of combinations of samples. we will show how to find the maximal cliques of a sample set by a depth-first search in a sample set enumeration tree.
Given a set of samples S = { s 1 ,...,s l } ,theset2 S (i.e., all combinations of samples) can be enumerated systematically. For example, consider a set of samples S = { a,b,c,d } .The complete set of non-empty combinations of samples can be divided into 4 exclusive subsets: (1) the ones having sample a ; (2) the ones having sample b but no a ; (3) the ones having sample c but no a or b ;and(4) { d } . They are shown as the immediate children of the root in Figure 2.

These subsets can be further partitioned. For example, the first subset can be further divided into three exclusive sub-subsets: (1) the ones having samples a and b ;(2)the ones having samples a and c but no b ;and(3) { a,d } .
ThetreeshowninFigure2iscalleda set enumeration tree [13] with respect to { a,b,c,d } . It provides a conceptual tool to enumerate the complete set of combinations system-atically.

We can conduct a recursive, depth-first search of the sam-ple set enumeration tree to detect the maximal cliques of the samples. Given a set of samples S ,thesetenumeration tree has 2 | S | nodes. However, we never need to materialize such a tree. Instead, we only need to keep a path from the root of the tree to the node we are searching as a working set, which contains at most ( | S | +1)nodes.

Clearly, in the set enumeration tree, each node contains a unique subset of samples. Thus we can use the subset of samples to refer to the node. At node { s i 1 ,...,s i k } i &lt;  X  X  X  &lt;i k  X  l ), we also keep a list Tail , which contains the samples that can be used to extend the node to larger subsets of samples in the subtree. We have the following result.

Lemma 3.1. At node v = { s i 1 ,...,s i k } of the sample set enumeration tree, where (1  X  i 1 &lt;  X  X  X  &lt;i k  X  l ) ,asample s  X  Tail if (1) j  X  i k ; or (2) there exists some 1  X  l  X  k such that c i l ,j =0 . Moreover, for v  X  X  parent node v = { s i 1 ,...,s i k  X  1 } , v  X  X  Tail is a subset of that of v .
We can prune any subtree that cannot lead to a coherent sample set of at least min s samples.

Pruning Rule 3.1 (Pruning small sample sets). At anode v = { s i 1 ,...,s i k } ,thesubtreeof v can be pruned if ( k + | Tail | ) &lt;min s .

For example, for a set of l samples, even the complete set of sample combinations can be divided into l exclusive subsets as shown before, we only need to search the first ( l  X  min s + 1) subsets, since each of the last ( min s  X  1) subsets contains less than min s samples.

Moreover, if the samples at the current node and its Tail are subsumed by some maximal coherent sample set found Figure 3: Computing maximal coherent sample sets. so far, then the recursive search can also be pruned, since it cannot lead to any new maximal coherent sample set.
Pruning Rule 3.2 (Pruning subsumed sets). At a some maximal coherent sample set, then the subtree of the node can be pruned.

Based on the above lemma and pruning rules, the prepro-cessing algorithm is presented in Figure 3. For the readers familiar with the techniques of depth-first mining of maxi-mal/closed frequent patterns, the ideas of pruning here share the similar spirit with the pruning in frequent closed itemset mining (e.g., [10]). However, one key difference is that the frequent pattern mining conducts counting on databases, and we do not need to scan the database for any counting once the triangle matrix { c i,j } is materialized. The correct-ness of the preprocessing algorithm can be shown. Limited by space, we omit the details here.
Ana  X   X ve method to find the maximal coherent gene clusters is to test every possible combination of genes and samples thoroughly. After all the coherent gene clusters are found, we can identify and report the maximal ones. The na  X   X ve method is very costly and thus infeasible for real data sets. Forexample,supposewehave1 , 000 genes and 20 samples. The na  X   X ve method may have to search up to (2 1000  X  1) (2 20  X  1  X  20)  X  1 . 12  X  10 307 combinations!
How can we search the huge space efficiently and prune unpromising subspaces sharply? When computing the maxi-mal coherent sample sets (Figure 3), we systematically enu-merate combinations of samples in a recursive depth-first search, and develop techniques to prune unpromising sub-spaces aggressively. Stimulated by the similar spirit, here Figure 4: The frameworks of the Sample-Gene Search and the Gene-SampleSearch . we can also systematically enumerate the combinations of genes and samples, and prune unfruitful combinations.
Basically, we have two alternatives. On the one hand, we can enumerate all combinations of samples systematically. For each subset of samples, we can find the maximal subsets of genes that form coherent gene clusters on the samples, and check whether the clusters are maximal. This method is called the Sample-Gene Search . On the other hand, we can let the gene enumeration go first. For each subset of genes, we find the maximal subsets of samples that form coherent gene clusters with the genes, and check whether the clusters are maximal. The method is called the Gene-Sample Search .
 The frameworks of the Sample-Gene Search and the Gene-Sample Search are shown in Figure 4. Proper pruning tech-niques should be developed to prune unpromising combina-tions and search branches as early as possible.

A first look at Figure 4 may suggest that the two methods are symmetric. However, since genes and samples are not symmetric in the problem, the technical details are in fact substantially different. We are mining coherent gene clusters on samples. As long as the genes respond coherently on the same subset of samples, they belong to the same cluster. However, the expression patterns of different genes in the sameclusterononesamplecanbeverydifferent!
In the Sample-Gene Search , we need to address the fol-lowing issues. First, as we enumerate the combinations of samples systematically, for each subset of samples, how can we find the maximal sets of genes such that the genes are coherent on the samples? Second, during the sample set enumeration, which sample sets can be pruned? Third, sim-ilar to the situation in Pruning rule 3.2, can we identify and prune the searches that cannot lead to any potential maximal coherent clusters? .Last, how can we determine whether a coherent gene cluster is subsumed by the others? We answer the above questions in this subsection.
For each combination of samples S , we need to compute the maximal coherent gene set G S such that the genes in G Figure 5: The maximal coherent sample sets and the inverted lists. are coherent on S and no proper superset G  X  G S also has this property.

Clearly, for a gene g , if there exists a maximal coherent sample set S g such that S  X  S g ,then g  X  G S .Inother words, G S can be derived by one scan of the maximal co-herent sample sets of all genes. If a maximal coherent sam-ple set is a superset of S , then the corresponding gene g is inserted into G S .

It is expensive to scan the complete list of maximal co-herent sample sets of all genes once for every combination of samples. An efficient solution is to use an inverted list .
Suppose we have 5 genes and 6 samples. The maximal coherent sample sets for each gene are listed in Figure 5(a).
We label each maximal coherent sample set by the gene g , and the set-id, b j , in the gene. For example, gene g 2 two maximal coherent sample sets, g 2 .b 1 = { s 1 ,s 2 ,s g .b 2 = { s 1 ,s 5 } .

For each sample s ,wemakeupthe inverted list L s as the list of all maximal coherent sample sets containing s ,as showninFigure5(b).

Now, when we want to compute the maximal coherent gene sets for a subset of samples, say { s 1 ,s 2 ,s 3 } ,wedonot need to search the complete list in Figure 5(a). Instead, we only need to get the intersection of the inverted lists of the samples s 1 , s 2 and s 3 ,whichis { g 1 .b 1 ,g 3 .b this intersection, we know that { g 1 ,g 3 ,g 4 } is the maximal coherent gene set.
For a combination of samples S = { s i 1 ,...,s i k } ,where i &lt;  X  X  X  &lt;i k ,let S tail be the set of samples that can be used to extend S to a larger set S  X  S  X  S tail such that there are at least min g genes coherent on S . Clearly, a sample s j  X  S tail if j  X  i k . Moreover, if the maximal coherent gene set of S  X  X  s j } contains less than min g genes, then s  X  S tail , either. This is in the similar spirit of Lemma 3.1. For example, in our running example (Figure 5), sample s 6 cannot be used to extend sample set S = { s 2 } ,sincethere is no gene coherent on both s 2 and s 6 .

Moreover, similar to Pruning rule 3.1, if | S | + | S tail min s ,then S cannot lead to any coherent gene cluster hav-ing min s or more samples, and thus can be pruned.
Similar to the situation in Pruning rule 3.2, we can prune the unpromising combinations that cannot lead to any new maximal coherent gene cluster. Here, two pruning tech-niques can be applied.

For example, in our running example (Figure 5), sup-pose we find the maximal coherent gene cluster ( { g 1 ,g { s 1 ,s 2 ,s 3 ,s 5 } )beforewesearchsampleset S = { s 1 ,s 3 is, both S  X  S tail and G S  X  S tail are subsumed by the maxi-mal coherent gene cluster. The recursive search of S cannot lead to any maximal coherent gene cluster and thus can be pruned.
 In general, suppose we are searching a sample combination S . If there exists a maximal coherent gene cluster ( G  X  found before such that S  X  S tail  X  S and G S  X  S tail  X  G , then any recursive search from S results in a coherent gene cluster subsumed by ( G  X  S ), and thus can be pruned.
Moreover, if there exists a maximal coherent gene cluster ( G  X  S ) found before such that S  X  S and every maximal coherent sample set containing S also contains S , then the recursive search of S cannot lead to any maximal coherent gene cluster either, and thus can be pruned. For example, suppose we search the sample set S = { s 2 } after we find the maximal coherent gene cluster ( { g 1 ,g 2 ,g 3 ,g 4 } X { s our running example (Figure 5). From Figure 5(a), we can see that every maximal coherent sample set containing s 2 also contains s 1 . In other words, there exists no maximal coherent gene cluster containing s 2 but no s 1 .Thus,the search of S can be pruned.
When we search a combination of samples S , we need to check whether G S  X  S is a maximal coherent gene cluster. We look at those maximal coherent gene clusters ( G  X  S ) such that S  X  S . Clearly, since we conduct depth-first search in the set enumeration tree, such maximal coherent gene clusters should be reported either before S is searched, orinthesubtreerootedat S .
 Basedontheabovediscussion,wehavethe Sample-Gene Search algorithm in Figure 6.
The framework of Gene-Sample Search is symmetric to that of Sample-Gene Search . That is, we enumerate the combinations of genes systematically. For each combination of genes, we compute the maximal sets of samples that the genes are coherent on. Many pruning techniques in Sample-Gene Search have the symmetric versions in Gene-Sample Search . Limited by space, we omit the details here. Instead, we only focus on the differences between the two approaches.
The concept of coherent sample sets for a gene can be generalized for a set of genes. Given a set of genes G ,a maximal coherent sample set with respect to G is a set of samples S G such that (1) genes in G are coherent on S G ; and (2) there exists no S  X  S G that samples in G are also coherent on S . Pleasenotethattherecanbemorethan one maximal coherent sample set for a given set of genes.
How can we compute the maximal coherent sample sets efficiently? Interestingly, S G can be computed by some sim-ple intersection operations. For example, suppose S { g 1 { ( s 1 ,s 2 ,s 3 ) } and S { g 2 } = { ( s 2 ,s 3 ,s 4 ) , ( s { s 2 ,s 3 } is the only maximal sample set that both g 1 and g are coherent on. That is, S { g 1 ,g 2 } = { ( s 2 ,s 3 ) words, we can derive S { g 1 ,g 2 } from { s 1 ,s 2 ,s 3 } X  X  and { s 1 ,s 2 ,s 3 } X  X  s 5 ,s 7 } .

In general, if gene set G = G 1  X  G 2 ,then S G can be de-rived from S G 1 and S G 2 by the function find-max-coherent-sample-sets in Figure 7.
Similar to the idea in Section 4.1.2, we can prune genes that cannot be used to extend the current combination of genes. Given a set of genes G = { g i 1 ,...,g i k } ,where1 i &lt;  X  X  X  &lt;i k ,agene g j cannotbeusedtoextend G to a larger set of genes if j  X  i k or none of the maximal coher-ent sample set with respect to G  X  X  g j } has at least min samples. Moreover, let G tail be the set of genes that can be used to extend G .If | G | + | G tail | &lt;min g ,then G should be pruned.

Based on the same idea in Section 4.1.3, we can use the maximal coherent gene clusters to prune the unpromising coherent gene clusters. Suppose we are searching a gene combination G 1 .Let S 1 be one maximal coherent sample set with respect to G 1 , i.e., S 1  X  S G 1 .Ifthereexistsamax-imal coherent gene cluster ( G  X  S ) such that S 1  X  S and G 1  X  G ,then S 1 should be removed from the list of the max-imal coherent sample sets S G 1 , since it cannot lead to any maximal coherent gene cluster. Moreover, if S G 1 becomes empty after the pruning, then G 1 should be pruned, since any recursive search from G 1 cannot lead to any maximal coherent gene cluster.
 Figure 7: Computing maximal coherent sample set for a set of genes.
In our running example, the maximal coherent sample sets with respect to gene g 1 and g 3 are identical. Then, for any coherent gene cluster ( G  X  S ) such that g 1  X  G ,( G  X  X  must also be a coherent gene cluster. Thus, we can search { g 1 ,g e } in a shoot.
 In general, we have the following result.

Lemma 4.1. When search a combination of genes G ,if there exist genes { g j 1 ,...,g j k } X  G tail such that they are coherent on every maximal coherent sample set of G ,then there exists no maximal coherent gene cluster containing G but no { g j 1 ,...,g j k } .

Based on Lemma 4.1, we can immediately merge genes { g j 1 ,...,g j k } to G at the current node, and thus shrink the number of recursions. The computation time is saved as well, since we only need to check the coherent gene clusters, prune the irrelevant genes or unpromising gene clusters for all these genes in one shoot.

In our experiments on real data sets, we observe many genes can be merged by Lemma 4.1. The real-world GST microarray data sets are typically sparse and genes are co-herent on a quite small number of sample sets. As a con-sequence, the performance of Gene-Sample Search can be improved substantially by this optimization.
 One may ask,  X  Do we have a symmetric pruning for Sample-Gene Search ?  X  We can apply the similar optimiza-tion technique for sample-gene. That is, a sample s j is merged into current combination of samples S as long as the inverted list of S is a subset of that of s j . However, such a situation is rare in practice, since it is rare that, for two different sample sets S 1 and S 2 , the maximal coherent gene sets with respect to S 1 and S 2 are identical.
 Basedontheabovediscussion,wehavethe Gene-Sample Search algorithm as shown in Figure 8.
We implemented and tested our approaches on both a real GST microarray data set and synthetic data sets. The system is implemented in Java. The tests are conducted on a Sun Ultra 10 work station with a 440MHz CPU and 256 MB main memory. The real data set. We use the real gene-sample-time mi-croarray data set reported in [20]. It consists of the mi-croarray measurements of 4 , 324 genes in 13 multiple sclero-sis (MS) patients before and at 1, 2, 4, 8, 24, 48, 120 and 168 hours after IFN- X  treatments. MS patients show hetero-geneous responses to IFN- X  treatments. For example, the patients with relapsing MS respond better to IFN- X  treat-ments than the patients with progressive disease do. How-ever, relapsing MS patients also exhibit considerable inter-individual heterogeneity in their clinical responses to IFN- X  therapies. So far, the effects of IFN- X  treatment at the ge-nomic level in humans are poorly understood. Researchers are interested in distinguishing the heterogeneous clinical re-sponse to IFN- X  therapy among the patients. On the other hand, characterized gene expression dynamics correlated to the heterogeneous responses potentially help in exploring the causing mechanisms at the molecular level.
 Synthetic data. We observe that the preprocessing, i.e., mining the maximal coherent sample sets for each individ-ual gene, is relatively fast. The major bottleneck in mining coherent gene clusters is in the latter part. Therefore, in-stead of generating synthetic GST data sets, we simulate the table of maximal coherent sample sets for genes such as in Figure 5(a). Initially, an empty table is created. Then, a certain number of coherent gene clusters ( G  X  S ) are ran-domly generated. For each g  X  G , S is inserted into the table as one maximal coherent sample set with respect to g . In addition to the size of the synthetic data set, i.e., the total number of genes in G-Set and the number of samples in S-Set , the synthetic data generator takes the following parameters: (1) k , the number of coherent gene clusters in the data set; (2) max gene and min gene , the maximal and minimal numbers of genes in a coherent gene cluster, re-spectively; and (3) max sample and min sample , the maximal and minimal numbers of samples in a cluster, respectively.
We generate the data sets by setting min gene =10and min sample =5. max sample is set to the same value of | S-Set | ,and max gene is set to 1000. In practice, only a small number of genes are correlated with a phenotype [7]. When the size of the data set grows, we expect to see more co-herent gene clusters. To simulate the situation, we set k to
We apply our algorithms on the MS microarray data with min g = 15, min s =3and  X  =0 . 8. In total, 21 coherent gene clusters are reported. To better understand the min-ing results, we feed the genes in each cluster to Onto-Express (http://vortex.cs.wayne.edu/Projects.html) and obtain a hi-erarchy of functional annotations in terms of Gene Ontology for each cluster. An example of gene ontology tree for clus-ter 17 is shown in Figure 9(a). Then, we further investigate the genes and samples in the clusters. Some interesting ob-servations are obtained as follows.

First, as expected, the majority genes in the clusters are involved in cellular processes and physiological processes, while genes involved in other biological processes (e.g., de-velopment, behavior and viral life cycle) are not highly rep-resented (Figure 9(b)). Moreover, among the genes involved in cellular process, those involved in cell communication and cell growth and/or maintenance are predominant (Fig-ure 9(c)). Since IFN- X  is known to have anti-proliferative activities, the high population of cellular process genes in-volved in cell growth and/or maintenance is biologically plausible.
 Second, a bunch of genes (e.g., in cluster 10, genes H 38522, AA 704613, N 92443, N 75595, etc.) that are well known for transcriptional signaling and cellular signaling can be identi-fied in the resulted clusters. Those genes, together with the other genes in the same cluster that are unknown or poorly understood, may serve as switches in the genetic network and hence play an essential role in the biological processes. Thus, studying the time-series of the genes in the coherent gene clusters may greatly help people understand the regu-latory mechanisms behind the response to IFN- X  treatment.
Last, coherent gene clusters also consist of different group-ings of samples, which provide promising hypothesis for dif-ferent phenotypes. For example, in the MS microarray data, the expression data from patients with different responses to IFN- X  treatment are collected. Among the 21 reported clus-ters, only 2 clusters (cluster 10 and 17) consist of 4 samples, while other clusters only consist of the min s number of sam-ples. Therefore, those two clusters may become good can-didates for target phenotype. Based on the clinical records of the patients, and combined with the gene information from the clusters, the interpretation of the sample groups is currently under investigation.
The maximal coherent gene cluster is defined with respect to three parameters, i.e., the minimum number of genes min g , the minimum number of samples min s and the co-herence threshold  X  . We test the effect of the parameters on the real GST data set. Figure 10(a) shows the number of coherent gene clusters when min g varies from 5 to 100, min s =3and  X  =0 . 8. Clearly, the number of coherent gene clusters in the data set decreases when min g increases. Theresultconcurstheintuition:withalower min g value, we can catch more clusters with more or less genes. As a matter of fact, with fixed min s and  X  ,let B i be the complete set of coherent blocks when min g = i . Then, we can show B 1  X  ... B i  X  ... B n .

Figure 10(b) shows the number of coherent gene clusters with respect to various min s when min g and  X  are fixed to 10 and 0 . 8, respectively. This result can be explained in a way similar to the situation of min g . Figure 10(c) shows the effect of  X  on the number of coherent gene clusters in the data set, with min g =10and min s =3. Whenwelower the coherence threshold, more combinations of samples are  X  X oherent X  by chance with respect to a minimum of min g genes.

Interestingly, the three curves in Figure 10 share similar trends. That is, when the value of the parameter (repre-sented by the X axis) increases, the number of coherent gene clusters (represented by the Y axis) goes down. The curve drops sharply until a  X  X not X  is met, then the curve goes stably to the right. For example, we can see the  X  X nots X  of min g = 20 in Figure 10(a), min s = 4 in Figure 10(b) and  X  =0 . 85 in Figure 10(c). These  X  X nots X  indicate that there exist stable and significant coherent gene clusters in the real data set. They are highly correlated, involving a statistically significant number of genes and samples. The  X  X nots X  also suggest the best settings of the parameters to avoid the coherent gene clusters formed just by chance.
We first test the efficiency of the preprocessing (algorithm in Figure 3) on various random subsets (by sampling) of the real microarray data set. The size of the subsets varies from 500 to 4324 genes, and all the samples are included. For each size, we sampled 30 subsets and calculate the average runtime. Figure 11(a) illustrates the scalability for the pre-processing step. As we discussed in Section 3, the real GST microarray data sets are often sparse. With the efficient pruning techniques, the preprocessing algorithm is linearly scalable to the size of the data sets.

We then test the scalability of both Gene-Sample Search and Sample-Gene Search on synthetic data sets. We set min s =5, min g = 10, and  X  =0 . 8. We first fix the num-ber of samples to 30, and report the runtime with respect to number of genes (Figure 11(b)). We can see both approaches show an approximately linear scalability with respect to the number of genes. Figure 11(c) shows the scalability for both approaches under different sizes of sample sets (from 30 to 100), when the number of genes is fixed to 3000. We can see both approaches scale well with respect to the number of samples. Since the number of genes for a microarray data is typically by far larger than that of the samples, the enumer-ation of genes is much more expensive than the enumeration of samples. This explains why the Sample-Gene Search is faster than the Gene-Sample Search .
Lemma 4.1 can identify the genes g i that can be merged into the current combination of genes, and thus can reduce the number of recursions in the mining. We use some sam-ples of the real microarray data set (each subset contains 100 to 1000 genes and 12 patients) to compare the performance of the Gene-Sample Search with and without the optimiza-tion. The comparison is conducted in three aspects: (1) the maximal number of recursion levels in the Gene-Sample Search ; (2) the number of gene combinations in the Gene-Sample Search ; and (3) the runtime. Figure 12 shows the results. We can clearly see that (1) the maximal number of recursion levels can be reduced substantially (Figure 12(a)); (2) with the optimization, the total number of gene com-binations needed to be checked goes down sharply (12(b)); and (3) the runtime is much shorter when the optimization is applied (12(c)). The results strongly confirm that the optimization is effective for Gene-Sample Search . We also apply the spirit of Lemma 4.1 on the Sample-Gene Search , and conduct similar tests. However, we can hardly see any significant improvement brought by the optimiza-tion. As we discussed in Section 4.2.3, due to the sparsity of the microarray data, many genes can be merged because they are coherent on the same sample set. However, few samples would be merged together since usually the maxi-mal coherent gene sets with respect to two different sample sets are not identical.
This research is related to previous work on clustering conventional gene-time / gene-sample microarray data and frequent itemset mining.

As we introduced in Section 1, there have been two cate-gories of conventional microarray data sets: gene-time data sets and gene-sample data sets. For gene-time microarray data, various algorithms (e.g. [17, 15, 8]) have focused on clustering the genes. That is, co-expressed genes are grouped based on their expression patterns during the time series. On the other hand, different approaches (e.g. [4, 21, 16]) have been proposed to partition the sample sets to find their macroscopic phenotypes as well as to detect informa-tive genes which manifest the sample partition. However, all the cluster models in those previous studies are substantially different from our coherent gene clusters. As a consequence, those algorithms cannot be extended directly to solve our problem.

In [6], Cheng and Church introduce the concept of biclus-ter to measure the coherence between genes and conditions (either time series or samples). Given a set of genes and a set of conditions, a bicluster is a subset of genes coher-ent with a subset of conditions. Yang et al. [22] propose a move-based algorithm to find biclusters more efficiently. Both algorithms in [6] and [22] adopt heuristic search ap-proaches, and thus cannot guarantee to find the complete set of biclusters in the data set.

In [19], Wang et al. propose the model of pattern-based cluster. Given a subset of objects O and a subset of at-tributes A ,pair( O,A ) forms a pattern-based cluster if for any pair of objects x , y  X  O , and any pair of attributes a , b  X  A , the difference of change of values on attributes a and b between objects x and y is smaller than a thresh-old  X  . In a recent study [11], Pei et al. has proposed an efficient algorithm, MaPle to mine the complete set of max-imal pattern-based clusters.

We borrow some important ideas from previous studies on frequent itemset mining. First, the framework of our approaches is similar in spirit to that of pattern-growth methods for frequent pattern mining. Second, the pruning techniques in our approaches share some interesting simi-larities with the methods of mining frequent closed item-sets (e.g., [10]). However, there are two essential differences between the frequent pattern mining methods and the ap-proaches developed in this paper. On the one hand, the coherent gene clusters are inherently different from frequent itemsets. Thus, the similarity between the two categories of methods is only at the level of spirit (e.g., set enumeration and pruning). The technical details are dramatically differ-ent. On the other hand, new techniques such as the inverted lists are adopted to tackle the particular microarray data.
In this paper, we have investigated a novel type of gene-sample-time microarray data sets and propose a new prob-lem of mining coherent gene clusters from such data sets. We have conducted a systematic study to develop two min-ing methods: the Sample-Gene Search and the Gene-Sample Search . Our extensive performance study on both a real mi-croarray data set and synthetic data sets shows that there exist interesting and significant coherent gene clusters in the real data set, and both the algorithms have good perfor-mance. Since the number of genes in the microarray data is typically by far larger than the number of samples, the Sample-Gene Search usually outperforms the Gene-Sample Search .
