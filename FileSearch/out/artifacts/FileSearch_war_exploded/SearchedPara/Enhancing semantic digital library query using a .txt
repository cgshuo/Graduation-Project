 1. Introduction
Rapid developments in information technology have accelerated worldwide access to information. A &amp; Marazakis, 1998). Digital libraries (DL) have received considerable attention in recent years. A DL represents an Internet-based architecture that can access various kinds of information from anywhere. One major DL activity is to find information; however, many DL use keyword-based searches, which rely on keyword matching and constitute non-semantic means of retrieving information. Keyword-based searches do not consider the multiple senses of a query term; for instance, the sense of the query term  X  X  X AVA X  X  is ambiguous because the query system cannot distinguish whether the user X  X  interest is in coffee, a pro-gramming language or an island in Indonesia. Therefore, digital libraries that employ typical keyword-based searches have begun to be adapted to allow information to be retrieved more semantically.
A response to a semantic query attempts to determine the precise meaning of a query term according to context. Substantial work has been conducted on automatically determining the correct sense of a polyse-mous word, including on referencing machine-readable dictionaries such as WordNet (Allan &amp; Raghavan, 2002;Milleretal.,2002).Anotherwayofsemanticallyretrievinginformationistoaddrelatedconcepts(Lee,
Kim,Kageura,&amp;Choi,2002)byreferringtoexternalauxiliaries,suchascomputingco-occurrencesofterms (Chen, Chung, Marshall, &amp; Yang, 1998); discovering implicit semantics using latent semantic analysis (Kolda &amp; O X  X eary, 1998), or analyzing corpuses (Gauch &amp; Wang, 1999). A semantic query can also be performedbycollaborativeinformation-filteringmethods,includingdataminingorclusteringusageprofiles of users with the same interest (Dai, 2001; Mostafa, Mukhopadhyay, Lan, &amp; Palakal, 1997; Wu, 2001). The senses of query terms obtained from external information (like metadata) support semantic queries.
VUCS determines which fields should be retrieved and integrated among heterogeneous data formats (such as for example, Dublin Core, MARC, or other canonical formats) to retrieve information from a virtual union catalog system (VUCS). A human being is normally required to judge which schemas contain the same structure and semantics. Data in different formats may include synonyms or homonyms in their comprehensive semantics by the structural relationship is essential to identify the heterogeneity of the schema and expand the semantics of metadata. Although some popular markup languages like XML have a namespace facility to elucidate structural information, a mechanism for identifying the semantics of the structure among different attributes is unavailable. MARIAN (Goncalves, France, &amp; Fox, 2001) DL searches in an object-oriented fashion. Data are modeled as classes and relationships as weighted links to represent structural relationships. In the MARIAN approach, the structural relationships among the content are derived from the class hierarchy. Heterogeneity is evaluated by computing the weights of corresponding links.

Sharing metadata architecture in distributed digital libraries drives the use of metadata to expand derive and federate services in distributed DL. The first step in conducting a semantic query in such dis-tributed DL is to determine which services must execute the query. An individual service may not along suffice to response completely to the entire query, so required information must be collected from various Accordingly, comprehensive relationships among services must be derived to execute semantic queries.
Considerable attention has been paid to DL architecture X  X  enabling: DL queries across distributed DL services using metadata (Paepcke et al., 1996), and managing interaction between the two most important elements of digital libraries X  X  X ontent and services (Lynch &amp; Garcia-Molina, 1995; Monch &amp; Drobnik, service is an application that interacts with users via an interface and can convert content into specific formats. Conventional keyword-based semantic queries cannot clarify two critical elements of DL X  X  X on-tent schemas and service capabilities. Content schemas determine whether two pieces of content have the same format. Service capabilities are distinguished by comparing the functions of services. Metadata support semantic queries on content schemas and service capabilities in many ways. First, metadata that describe content schema and service capabilities have comprehensive semantics regarding content and services. These semantics benefit the provision of accurate information in response to DL queries. Second, relationships between DL content and services can be derived from semantic information embedded in metadata; manipulating these relationships yields further semantics associated to the metadata. Third, metadata can be easily stored and indexed to support retrieval, since they have a formal structure.
Metadata that describe semantic information about DL content and services motivates the derivation of semantic relationships among metadata. Given content and services, several questions may be raised. Does one type of content have the same format as another? Can two services perform the same task? Is one type of content produced (or manipulated) by a service? A model that formalizes the relationships between content and services is required to answer these questions.

The work seeks to formulate the structural relationships among metadata concerning DL content and model (CSIM) to elucidate the interaction of metadata, in terms of the structural relationship. CSIM defines 15 relationships between DL content and services. Using CSIM, the result of a DL query is extended with the format  X  X  X ublin Core X  X , CSIM returns content with the format  X  X  X ublin Core X  X  and derives the content with other relationships, such as that which can be translated into  X  X  X ublin Core X  X  (the  X  X  X rans-latable X  X  relationship), and that which contains the same semantics but with different formats (the  X  X  X omonymous X  X  relationship). Section 4.1 presents an example of a DL developer who desires to develop a virtual union catalog system and requests the functionality of the intended service using CSIM. The re-The recommendation can be implemented using DL componentization technology (Suleman &amp; Fox, 2002).
Restated DL designers can develop a new service that involves existing service components and translation rules, to yield the derived service list. In this manner, CSIM reuses DL components and reduces the administrative load to maintain a DL. Applying CSIM to a digital library makes DL queries semantic and effective. Moreover, CSIM can be applied to DL query interfaces, virtual union catalog systems and library resource-planning systems. A series of experiments were conducted to demonstrate that CSIM outper-formed in both content and service queries because of the extended CSIM relationships.
The rest of this paper is organized as follows. Section 2 formally defines content and services in digital libraries, and analyzes the relationships between them. The algorithms that manipulate these relationships are also defined. Section 3 elaborates semantic queries that leverage CSIM to retrieve DL content and services. Section 4 presents the experiments that elucidate the feasibility of CSIM, and demonstrates a prototype system. Section 5 draws conclusions and highlights areas for future work on CSIM. 2. Content and service inference model (CSIM) holding records, and multimedia data (like texts, images, and videos). A service is a software application with users via input and output interfaces. In this paper, both services and content are represented via metadata to facilitate the interaction between them. This paper proposes a novel framework called the content and service inference model (CSIM). CSIM infers relationships between content and services from their metadata. CSIM can raise DL queries to a semantic level by using content semantics, service capa-bilities, and the relationships between content and services.

Typically, the metadata of content includes an identifier, data schema, presentation format, and a set of semantic description items. The metadata of a service includes the identifier and a statement about its between content and services are defined, as illustrated in Fig. 1. The relationships are proposed according to the structure of metadata defined in Section 2.1 with considering reasonable semantic into four types: if it contains more capabilities than the latter.
 ContenttoContent .Twopiecesofcontentrelatetoeachotherbasedontheirsemanticsandschemaelements. able . For example, two pieces of content are  X  X  Identical  X  X  if they have identical semantics and format. example, a WebPAC system may produce a data set in the Dublin Core format.
 Content to Service . Content can be produced by a service. One relationship of this type is defined X  X 
ManipulatedBy . For example, various data sets can be manipulated by a virtual union catalog system to produce an integrated data set.

The total 15 relationships in CSIM are proposed after thoroughly examining all possible relationships between content and services under the CSIM data model and hypothesis. Section 2.1 formally defines content, services and their ingredients, and Section 2.2 formally defines these relationships. 2.1. Basic definition In the following, the metadata of content and services 2 is formally defined.
 (McCray, Gallagher, &amp; Flannick, 1999) where, 1. Id is the identifier of C . 2. Schema is the schema of C . Schema is a quadruple { Ent , Incs , Attributes , Associations }, where 2.1. Ent  X  Names is the name of a content schema. 2.2. Incs  X  (Names, Names). Each pair  X  e 1 ; e 2  X 2 Incs indicates that e 2.3. Attributes  X  Names is the set of attribute names. 2.4. Associations  X  (Association_name, Entity_name1, Entity_name2, Cardinality1, Cardinality2) is the 3. Presentations  X  Names is the set of the presentation interfaces of content C . 4. Semantics  X  CST is the set of semantics of content C . CST is defined below.

Definition 2 (Service ). A Service, S , is a quadruple { Id , Capabilities , Outputs , Inputs }, where 1. Id is the identifier of S . 2. Capabilities  X  SCT is the set of service capabilities. SCT is defined below. 3. Outputs  X  Names are the output schemas of service S . 4. Inputs  X  Names are the input schemas accepted by S .

Additional data structures are required for the formal definition of CSIM. 1. Content Semantics Table (CST) . CST contains ontological terms to identify the semantics of content.
Dublin Core and MARC are two examples of ontological terms in CST. The ontology in CST is hier-archical; an ascendant term covers the semantics of a descendent term. ma in Definition 1). For example, the fact that schema A is a subtype of schema B can be represented as  X  A ; B  X  in CIT . 3. Service Capability Table (SCT) .SCTcontainsontologicaltermstodefinepossibleservicefunctionalities.
The ontology in SCT is hierarchical; an ascendant term has more general capability than a descendent term. For example, a service that uses CORBA to implement a virtual union catalog system will have twocapabilities X  X  CORBA _ Distributed _ System and Virtual _ Union _ Catalog _ System ,where CORBA _ Dis-
Catalog _ System respectively. R for translating between two pieces of content is expressed as a quadruple: { Id , FromSchema , To-
Schema , Rules }, where 1. Id is the identifier of R . 2. FromSchema  X  Names is the name of the source schema. 3. ToSchema  X  Names is the name of the target schema. 4. Rules  X  (FromAttributeName, ToAttributeName, TranslationRule) are the rules for translating be-5. Content and Service Repository (CSR) : CS Ris a repository that stores the metadata of content and services, including the access methods for the CSIM metadata framework to retrieve content and ser-vices.
 2.2. Relationships between content and services
As mentioned above, four types of 15 directional relationships between content and services exist X  X  content to content, service to service, content to service, and service to content. This section formally explicates each relationship.

Definition 3 (ContenttoContent ).Giventwopiecesofcontent C and C 2  X f Id 2 ; Schema 2 ; Presentations 2 ; Semantics 2 lows. 1. Identical  X  C 1 ; C 2  X  iff Schema 1  X  Schema 2 and Semantics 2. Homonymous  X  C 1 ; C 2  X  iff Schema 1  X  Schema 2 but Semantics 3. Synonymous  X  C 1 ; C 2  X  iff Schema 1 6  X  Schema 2 but Semantics 4. InheritFrom  X  C 1 ; C 2  X  iff  X  Schema 1 ; Schema 2  X 2 Incs
C 1 and C 2 have the InheritFrom relationship if and only if the schema pair  X  Schema
CIT. Namely, the schema of C 1 inherits from C 2 .Given a sequence of content C consecutive pieces of content have the InheritFrom relationship, these pieces of content exhibit the transitive property. 5. Translatable  X  C 1 ; C 2  X  . C 1 and C 2 have the Translatable relationship if C means of specific translation rules. In other words, C 1 and C a translation rule T 2 TRT such that T : FromSchema  X  Sch tionship, these pieces of content exhibit the transitive property.

Definition 4 (ServicetoService ). Given two services S 1  X f Id
S  X f Id 2 ; Capabilities 2 ; Outputs 2 ; Inputs 2 g , the possible relationships between S ing. 1. Identical  X  S 1 ; S 2  X  iff Capabilities 1  X  Capabilities 2. Inclusive  X  S 1 ; S 2  X  iff Capabilities 1 Capabilities 3. Homonymous  X  S 1 ; S 2  X  iff Outputs 1  X  Outputs 2 , Inputs 4. Synonymous  X  S 1 ; S 2  X  iff Outputs 1 6  X  Outputs 2 or Inputs 5. Replaceable  X  S 1 ; S 2  X  iff Inclusive  X  S 1 ; S 2  X  , Outputs 6. Translatable  X  S 1 ; S 2  X  iff Inclusive  X  S 1 ; S 2  X  , 9 T
Translate  X  Outputs 2 ; f T 2 g X  and Translate  X  Inputs 1 7. Combinable  X  S 1 ; S 2  X  iff Inputs 1  X  Outputs 2 . 8. Combine  X  S c ; f S i g X  combines a set of services f S
Inputs 2 , Outputs 2  X  Inputs 3 ; ... ; Outputs n 1  X  Inputs
Inputs c g , where 1. Id c is the identifier of S c . 2. Capabilities c  X  Capabilities 1 [ Capabilities 2 [[ Capabilities 3. Outputs c  X  Outputs n . 4. Inputs c  X  Inputs 1 .

Given a sequence of services S 1 to S n , a new service S
S i and S i 1 have the Combinable relationship. The new service has a new Id, and the capabilities include all the capabilities of S 1 to S n . The new service has the same input interface as the first service  X  S the same output interface as the final service  X  S n  X  .
Definition 5 (ServicetoContent ). Given a service S  X f Id
Schema c  X  Outputs s or Translatable  X  Outputs s ; Schema produce C .

Definition 6 (ContenttoService ). Given a content C  X f Id can be manipulated by S . 2.3. Manipulating operations
CSIM applies manipulating operations to the above four types of 15 relationships. Manipulating
FALSE. P operations return the corresponding content or services satisfying the specified relationship. p operations check if the given content and service have the relationship specified in the p operations .A total of five p operations are defined:  X  p Schemas : Given two pieces of content, A and B , A p Schemas have the InheritFrom  X  A ; B  X  relationship.  X  p r Schemas : Given two pieces of content, A and B , A p r have the Translatable  X  A ; B  X  relationship.  X  p Semantics : Given two pieces of content, A and B , A p have the Identical  X  A ; B  X  relationship.
Inclusive  X  A ; B  X  relationship.
Replaceable  X  A ; Bs  X  or Translatable  X  A ; Bs  X  . In other words, A p can be replaced by a series of services Bs according to one of the following four conditions.
The algorithms corresponding to the five p operations can be referenced in http://www.data-base.cis.nctu.edu.tw/ .

P operations return the content or services conforming to the specified relationship. Four categories of P
P c operations return the content that conforms to the specified relationship. transitive translations. sitive inheritance.
 ship with A . ship with A .

P s operations return the services that exhibit the specified relationship.
A .
A . ship with A . ship with A . with A . with A . with A .

One P sc operation, P sc Produce , is defined. Given a service S , P Produce relationship with S .

One P cs operation, P cs ManipulatedBy , is defined. Given content C , P satisfy the ManipulatedBy relationship with C .

The corresponding algorithms of P operations can be referenced in http://www.data-base.cis.nctu.edu.tw/ .

Fig. 2 depicts the architecture used to apply CSIM in DL queries. A query interface receives semantic queries and dispatches the queries to the CSIM Engine . The CSIM Engine parses the query predicates and The Registry Authority contains access methods for all content and service metadata to expedite the access to the metadata. Furthermore, the Registry Authority comprises a set of ontological tables. These onto-logical tables present a common vocabulary used for the ontological hierarchies that define content semantics and service capabilities. Index structures for CST , CIT , SCT and TRT are stored in the Content and Service Repository ( CSR ), to accelerate metadata retrieval. The ontology proposed herein consists of vocabulary with hierarchical structure, and an ascendant ontological concept implies all descendant con-cepts. 3. Semantic digital library query Applying CSIM to digital libraries supports powerful semantic queries in content and service retrieval.
In CSIM, content and service semantics can be elaborated more finely than conventional keyword-based approaches by adding relationships defined in the previous section. Using this abundant semantic infor-mation, CSIM accurately retrieves results and derives alternative answers that conventional approaches cannot do. For example, in response to a query for content with particular semantics, CSIM can retrieve the content not only in the same schema hierarchy and with identical semantics, but also in a different format, such as synonymous content. Content with various schemas, which are translatable into a single schema, can also be retrieved. Furthermore, in a semantic service query, CSIM can infer a list of recom-mendations to suggest that a user concatenates available services to create the desired service, using the combinable and translatable relationships. 3.1. Query language
The query language for CSIM is SQL-like. It consists of three main clauses. of attributes in a query can be set to EXACT or AMBIGUOUS .An EXACT query returns the attributes that exactly satisfy the given predicate without being translated or combined. For example, if one user to  X  X  Select EXACT C.Id From Content C where C.Schema  X   X  X  Dublin Core  X  X  X  X . An AMBIGUOUS query recommends answers that have the same semantics as those specified attributes. As in the preceding example, the query can be set to  X  X  Select AMBIGUOUS C.Id From Content C where C.Schema  X   X  X  Dublin Core  X  X  X  X . The query will return three types of answer: (1) The content with the data format  X  X  X ublin Core X  X . (2) The content which is not in data format  X  X  X ublin Core X  X  but can be translated into  X  X  X ublin
Core X  X  format. (3) The content which is not in data format  X  X  X ublin Core X  X  but in the same hierarchy of  X  X  X ublin Core X  X  in CIT. The absence of the attribute mode indicates the default query mode  X  X  X XACT X  X . 2. From Clause : This clause specifies the content or service from which a user seeks. For example, a user wants to retrieve information from one piece of content C and two services S the From Clause . In this clause, a set of Boolean operators (NOT, AND, OR), and a set of relationships defined in Section 2 are applied. For example, if a user wants to retrieve a service S duced by another service S 2 and whose output data schema is Dublin Core, then the Where Clause is expression in this clause is like that of traditional SQL-like language.
 3.2. Semantic query
Semantic queries are based on the relationships between content and services in CSIM. Semantic queries encompass two types X  X  EXACT query and AMBIGUOUS query (Fig. 3). An EXACT query inquires the
AMBIGUOUS query returns the service or content that can be inferred from the translatable or com-
Notably, an AMBIGUOUS query yields more results but takes more time to respond. Both content and service queries are illustrated by  X  X  X asic X  X  and  X  X  X dvanced X  X  query.  X  X  X asic X  X  query are in standard SQL statement and can be used in conventional query interface.  X  X  X dvanced X  X  query contain CSIM manipulation functions in their query predicate, which are able to derive more sophisticated semantic relationships. 3.2.1. Content query
A content query inquires about the content meeting the requirement specified in the query. A user can specify an EXACT or AMBIGIOUS query. An EXACT query returns the content that entirely satisfies the query, which means no inference is employed to obtain the result. An AMBIGIOUS query returns all the content that can have the same semantics specified in the query. Here, the term  X  X  X an X  X  means that the content may be translated into, or inherited from the target content.
 Basic content query Example. Determine the content with the schema of  X  X  X ublin Core X  X .
 Query Statement : Select C.Id From Content C where C : Schema  X  \ Dublin Core " .

Algorithm : ContentQuery(Attributes A , Content C ){ 1. Locate content c . Let c 2 CSR , and c : Id  X  C : Id , c : Schema p
C : Presentations , and c : Semantics p Semantics C : Semantics ; value X  X .) 3. For each k 2 c , return k : A .
 Advanced content query Example. Determine the content inherited from the  X  X  X ublin Core X  X  schema.

Query Statement : Select C 1 : Id From Content C 1 , C 2 InheritFrom  X  C 1 ; C 2  X  .

Algorithm : AdvancedContentQuery(Attributes A , Contents C , Relationship R ){ 1. Locate content c . Let c 2 CSR , and c : Id  X  C : Id , c : Schema p
C : Presentations and c : Semantics p Semantics C : Semantics ; 2. If A 2 AMBIGIOUS , for each r 2 P c Translatable  X  r ; C  X  ; c c [ r ; 3. For each i 2 P  X  R  X  c c [ ContentQuery  X  Id ; i  X  ; 4. For each k 2 c , return k : A . 3.2.2. Service query
A service query inquires about the services meeting the requirement specified in the query. A user can specify the query to be EXACT or AMBIGIOUS .An EXACT query returns the services that entirely satisfy the query. An AMBIGIOUS query determines all the services that can have the same capabilities specified target service.
 Basic service query Example. Determine the services with the service capability  X  X  X atalog_System X  X .
 Query Statement : Select S.Id From Service S where S : Capabilities  X  \ Catalog System " .
Algorithm : ServiceQuery(Attributes A , Services S ){ 1. Locate service s . Let s 2 CSR , s : Id  X  S : Id , and s : Capabilities p 2. If A 2 AMBIGIOUS , for each r 2 P s Translatable  X  r ; C : Schema  X  , c c [ r ; 3. For each k 2 c , return k : A .
 Advanced service query Example. Determine the services that have the same capabilities with  X  X  X atalog_System X  X .
Query Statement : Select S 1 : Id From Service S 1 , S 2 Inclusive  X  S 1 ; S 2  X  .

Algorithm : AdvancedServiceQuery(Attributes A , Services S , Relationship R ){ 1. Locate service s . Let s 2 CSR , s : Id  X  S : Id , and s : Capabilities p 2. If A 2 AMBIGIOUS , c c [ rs ; 3. For each i 2 R c c [ ServiceQuery  X  id ; i  X  ; 4. For each k 2 c , return k : A .
 3.3. Ranking function
A result of a CSIM semantic query can be classified into one of the following types: combination. 2. Ambiguous match . The result is a recommendation that may not completely satisfy all query predi-cates, but can satisfy the predicates by translating, inheriting, or combining available services or con-tent.

Because the results of a query may not totally fulfill the user X  X  requirements, a ranking function is proposed to evaluate the fitness of the results of a query. The ranking function W is separated into W and W Service , and defines as follows; where W W
T : Overhead of the translation rules to produce Results;
Ranking functions W Content and W Service are proposed to rank content and services, respectively. The ranking follows the number of semantic concepts or capabilities that meet the query predicates, and the amount of content and services that are combined to yield the result.

Example. Assume a service A with five capabilities; we apply CSIM in the semantic query and obtain that A can be concatenated by three services S 1 , S 2 , and S 3 capabilities of A . If all of these services have W S  X  1 and the two translation rules have a 10% and 20% overhead respectively, what is the rank of this concatenation?
Applying Eq. (2) yields the rank of this concatenation as  X  0 : 6 1  X  0 : 6 1  X  0 : 6 1  X  X  X  1 0 : 1  X   X  1 0 : 2  X  X  =  X  5 2  X  X  0 : 432. 4. Experiments 4.1. Experimental set-up and approach
A series of experiments were performed in the digital library of National Chiao Tung University (NCTUDL, http://www.lib.nctu.edu.tw/ ) to demonstrate the feasibility of CSIM. These experiments in-volved service and content queries, which explored the structural relationship of the metadata of services and content.

The subjects of service queries were the 81 services in NCTUDL. The services were divided into six categories X  X  X utorial(TU),Query(QU),Service(SE),Database(DB),Journal(JO),andHolding(HO).The metadata of each service was given by experts and contained keywords that delineated their service capa-bilities. Experiments on service queries were conducted to compare the conventional keyword-based ap-proach, the CSIM approach, and the CSIM approach with service inference. The keyword-based approach returned the services the description of whose capabilities exactly matched the specified keywords. The
CSIM approach involved the AMBIGUOUS semantic query without enabling the P returnedanswersthat wouldbe inherited ortranslatedinto the desired services.CSIM with serviceinference involved the AMBIGUOUS semantic query with enabling the P proach returned the answer of the CSIM approach; in addition, a recommend list that could compose the into reusable components, CSIM with inference advised the system developer to construct new services by combining the existing components. In this manner, a lot of development effort could be saved.
To evaluate content queries, a virtual union catalog system called VUCS@NCTUDL was developed, which harvested over 20 WebPAC systems of Taiwanese Libraries and integrated the results (Huang et al., 2000). The issue of various data schemas in the WebPAC systems complicated the mapping of schema attributes in response to a content query. To handle this issue, conventional VUCS systems involved user a much less flexible system and required user intervention in the system design. CSIM referred to the ontology stored in the Content Inheritance Table (CIT) to extend the hierarchical relationships between attributes of schemas. Furthermore, CSIM used the ontology of semantics stored in the Content Semantics Table (CST) to solve the problems of attribute semantics (such as those involving Synonymous and of the content satisfying the query. The keyword-based approach returned the content contained the specified keywords within these fields (not all WebPAC systems contains all of these fields). The CSIM approach employed the ontological tables (both CST and CIT) to map various attributes of schemas into the same attribute if they were at the same level of the ontological hierarchy (in Fig. 8, ontology area).
Additionally, the CSIM approach also exploited the ontological tables and TRT to convert heterogeneous randomly generated by VUCS@NCTUDL. The top-k answers were calculated to average the performance in the four attributes. 4.2. Experimental metrics
Two metrics, Accuracy and Coverage , were used to evaluate both the service and content query and to be correct. Coverage represents the effectiveness of the returned correct answers to be included in the entire correct answers. For the service query, the Accuracy ( A where m indicates the method to be examined, which can be keyword-based, CSIM and CSIM with inference. s represents the examined service category. In these formulas, F s , and the services returned by CSIM with inference whose ranks exceed the threshold T tween the input and output interfaces. The aim of T service the content query, the Accuracy ( A m  X  c  X  ) and Coverage ( C where k indicates the method to be examined, which can be keyword-based, CSIM or CSIM with inference. c represents the top-k content returned by VUCS@NCTUDL. In these formulas, F to a content query. F c ideal represents all the content returned by the keyword-based approach, and the content returned by CSIM whose ranks exceed the threshold T tween two content. The aim of T content is to control the efficiency of the content query.
The percentage of the improvement of CSIM over the keyword-based approach was used to demonstrate the performance of CSIM in content query. The Improvement is defined as: 4.3. Experiment results
Figs. 4 and 5 present the Accuracy and Coverage of the service query. Only one translation is allowed in their input/output schemas between two services. Both figures indicate that the CSIM approach outper-forms the keyword-based approach. In all service categories, the keyword-based approach has poor
Accuracy and Coverage because these services do not explicitly contain the searched keywords in their capabilities. The CSIM approach dramatically improves the performance with regard to both Accuracy and
Coverage . This finding shows that exploiting concept approaches (like CSIM) is useful for semantic DL queries. Notably, the CSIM approach with inference outperforms pure CSIM in the  X  X  X O X  X  category be-cause the former approach can recommend users to combine existing services to generate additional ones such as the union of WebPAC system and the electronic Journal databases. This result may encourage libraries to spend less effort by integrating available ones on developing add-on services.
For content query, Figs. 6 and 7 plot the improvement of the average Accuracy and Coverage with respect to the queries in the four attributes (title, subject, author and publisher). The Top-K in X -axis means that the top-k books returned by VUCS are selected as the result. To avoid too many translations between two pieces of content, only one translation is allowed. In Fig. 6, CSIM increase 1.2 times per-formance in average than the keyword-based approach in Accuracy because CSIM refers to CIT and TRT to obtain more conceptually related attributes of schemas. For example, the  X  X  X uthor X  X  field in NCTUDL may appear in other WebPAC systems with different name such as creator; in this case, keyword-based approach cannot retrieve the correct results. In Fig. 7, the improvement of Coverage indicates that CSIM outperforms 8 X 10% to the keyword-based approach. The curve of Coverage improvement increases when the returned answers increase because CSIM refers to CST to return those attributes with the same semantics but different format (like Synonyms).

In summary, the performance of semantic DL queries with CSIM is highly promising. The CSIM model represents a significant improvement in both service and content queries. The CSIM model not only en-hances the Accuracy and Coverage of a DL query but also suggests how librarians can integrate available components into a desired service. 4.4. Prototype system
A prototype system called CSIM@NCTUDL has been implemented. Fig. 8 illustrates the user inter-face of this system. This system supports advanced semantic DL queries for users to retrieve content and services in NCTUDL. Moreover, librarians can consult this system to determine reusable components in
NCTUDL before they start establishing new services. CSIM@NCTUDL includes four main areas. service query, content query, and compound query. A compound query allows the user to retrieve con-tent or services with both content and service manipulation functions. semantics of content, and service capabilities. They are selected from the ontology area. oped by domain experts. pressed as a recommendation list with one or more items. A list with one item indicates that the item exactly matches the specified predicates; on the other hand, a list with more than one item indicates that the users can combine these items together to obtain a new content/service combination that satisfies the specified predicates. The ranking of each result is also given. A numeral in front of each service of the sibility of the recommendation list to the user.

The example illustrates in Fig. 8 conducts a query to retrieve VUCS services. The input and output ontology, means that the service to be returned should contain any kind of library holdings. The capa-
Consequently, the answer area shows not only the VUCS@NCTU service (Index 1 of the result area in Fig. service that translates native data schemas into a canonical schema (Ke, Huang, &amp; Yang, 2001), and an integration service to combine distributed extractors. 5. Conclusions and future research
This work presents a novel content and service inference model (CSIM), which defines 15 relationships between content and services to handle semantic DL queries. It enumerates these relationships and presents manipulating functions, p and P operations , to realize them. p operations return TRUE or FALSE for a specific relationship and P operations determine all the content or services that exhibit a specific rela-tionship. The proposed semantic DL query applies CSIM and comprises two queries. An exact query re-turns the answers that exactly match the predicate, and an ambiguous query returns recommendations that exact query.

CSIM was applied to the digital library of National Chiao Tung University (NCTUDL). A virtual union catalog system (VUCS@NCTUDL) and CSIM@NCTUDL was constructed (Huang et al., 2000).

Experimental findings indicate that CSIM outperforms the conventional keyword-based approach in handling DL queries. An ambiguous DL query with CSIM recommends additional results beyond those of the conventional keyword-based approach, improving the Accuracy and Coverage of both content and duced when new services and content are to be developed. Digital library designers can generate new content and services from those available, by considering the recommendations in response to an ambig-uous query. Metadata and translation rules are applied to translate and reuse content and services to support the design of an object-oriented or component-based digital library.

CSIM can be used in DL applications. With respect to a DL resource-planning system, the inference capability of CSIM indicates that librarians should reuse available components to construct new DL transformation between them, facilitating the combination of various data fields. Such a combination frequently arises when union systems are created. The experiments presented herein have demonstrated that CSIM outperform the conventional keyword-based approach in a virtual union catalog system.
CSIM support semantic DL queries. In most digital libraries, services are distributed on the Web, making the mapping between systems sloppy and large. Users may want to find for the services that meet their needs. Metadata can be used to describe services and CSIM applied in semantic searches to facilitate
Web pages) and capabilities (such as search systems). This semantic assignment and search bridges the gap between the aims of the user and the service capabilities. However, CSIM has an efficient problem when it generates all possible responses to an ambiguous query, especially when cascaded translations occur be-tween different content. A properly chosen threshold T content
Future research will focus on accommodating broader semantics and developing new schemes to yield more knowledge from metadata with abundant semantics. In this manner, digital library queries can be further improved. As well as examining the optimization of operations of CSIM, our future work will develop more efficient indexing mechanisms for accessing related data structures.
 Acknowledgements
The authors would like to thank the National Science Council of the Republic of China, Taiwan, for financially supporting this research under contract no. NSC90-2213-E-009-082.
 References
