 The success of a product/service in e-commerce largely depends on the user reviews. A product/service that has a higher average review or rating usually gets picked against a similar product/service with less favorable reviews. Reviews usually have an overall rating, but most of the times there are sub-texts in the review body that describe certain features/aspects of the product. This demonstration presents a system that extracts aspect-specific ratings from reviews and also r ecommends reviews to users based on their and other users X  rating patterns. H.3.5 [ Information Storage and Retrieval ]: Online information Services Recommendation Engine; feature ranking; sentiment analysis With more and more busine sses selling their products or advertising their services online, customers rely on word of mouth in the form of customer reviews to make their decisions. Most of the current websites that feature product/service reviews list these reviews in reverse chronological or der, or by employing heuristic metrics (e.g. ranking higher review s of  X  X uper users X , i.e. users with many reviews). However, such a generic ranking requires from users to read or at least scan the tens or hundreds of reviews for one product/service. Moreover, different people value different qualities of the same product/service. For example, when searching for a good Italian restaurant, one user might value the wine list of a place, while another might prefer restaurants that are family-friendly. Ideally, users would like to be presente d with only these reviews that highlight the qualities of a product/service that they value. In this work, we propose a system that automatically generates personalized review recommendations using two different approaches. Firstly, drawing inspiration from traditional collaborative filtering systems, th e system generates user rating profiles and tailors the list of reviews to the preferences of each user. Secondly, we employ as pect-based opinion mining to identify the important features highlighted in each review. As from opinion lexicon [1] we created a list of negation words (not, no, nothing etc.) which inverse the se ntiment, and positive words (too, very, so, etc.), which increase the intensity of the sentiment. Each review is POS tagged using the default tagger from NLTK 2 python package, which uses the Treebank corpus for training the model. These three inputs are subsequently fed to our algorithm that generates as output an opinion score for each feature identified in a review [2]. In this work we assume that the product aspects are predetermined. The front-end of the application act s as a REST client and sends request to the RESTful server written using Jersey 3 to recommend reviews. We employ a user-based collaborative filtering technique where user profiles consist of all th eir star ratings in past reviews. The RESTful service uses M ongoDBDataModel API from Mahout to build a model based on the ratings of all the users. User similarity is calculated using the Pearson correlation coefficient. This step is used to rank and recommend reviews. The client is a Django-based Python Web appli cation that consumes the recommendations in the form of a RESTful response from the engine. When a given user searches for a specific restaurant, the recommendation engine computes the similarity of the current user with all the reviewers of the particular business and ranks and presents the related reviews in descending order of similarity. As a result, each user will be presented w ith a different set of reviews for the same business. The interface allows the end user to get the gist of the reviews without the need to r ead the entire review text. For each review, the overall star rating as well as the most important aspects of each review, are prominently show n. The aspects are intuitively marked as strong/weak positive/negativ e, by using colors and thumbs up/down images 4 . A sample result set is shown in Figure 2. For 
