 Receiver Operating Characteristic (ROC ) analysis [1] [2] [3] is a widely used technique for evaluating classifiers. The technique considers the confusion ma-trix in order to generate a plot and compare the performance of the classifiers. While evaluating the classifier, the ROC plot considers all possible operating (decision) points in the classifier X  X  prediction as a means of identifying the oper-ating point at which the best performance is achieved. A confusion matrix forms at the operating point that consists of  X  X rue positive X ,  X  X rue Negative X ,  X  X alse positive X  and  X  X alse negative X  values. The ROC plot is obtained for a classifier by plotting the true-positive rate (TPR) over the y-axis and the false-positive rate (FPR) over the x-axis. The points obtained on the plot are connected to the points where the values of both TPR and FPR are extreme: i.e. the points will be (0,0) and (1,1). This is done to form a complete curve. The area under the curve (AUC) is a scalar measurement used to evaluate the classifier, while the plot provides the visual representation that is used to compare the classifiers X  performances.
 Challenges: The ROC plot and AUC have been a popular technique for eval-uating classifiers, however their application is limited to binary class problems. Although the ROC and AUC have been developed in theory to deal with multi-dimensional problems, their inherent computational complexity and representa-tional comprehensibility hinders their use in practice. For instance, a confusion matrix obtained from a problem of  X  X  X  classes is an M  X  M matrix, and d = ( M. ( M  X  1)) dimensions: i.e. to evaluate a classifier, all the possible misclassifica-tion combinations are needed [4]. The ROC plot for a binary classifier facilitates a visual comparison of binary classifiers, however, the ROC method is a tedious task if a plot is to be drawn for a multi-class classifier, as the dimensionality of the plot increases dramatically with just a small increase in the number of classes. For example, if we were to generate a plot for a three-class classifier the number of dimensions we have to deal is six while that of binary class classifier is two. The problem is not only limited to the representation or visualization, but also to the computational complexity. This cost is O ( n d ) for a convex hull of n points for d dimensions.
 Contributions: Our main contributions in this paper are as follows: -Developing a new method for visualizing the performance of multi-class clas--Developing a new method for represen ting the performance of multi-class -Experimental investigation of the developed methodologies that demonstrates Organization: The remainder of the paper is organized as follows. Section 2 lists the studies that developed cost function for multi-class problem using AUC. In Section 3 we briefly describe the receiver o perating characteristics curves. Sec-tion 4 describes the proposed methodology in details. Section 5 details about the experimental setup and generation of dataset. In Section 6 we analyze the results obtained using our method and compare with one of the existing techniques. Fi-nally, in Section 7 we conclude the paper. In recent years, a few approaches have b een developed that have extended the AUC measure for multi-class problems. Srinivasan [5] developed a 6-dimensional ROC surface for a three-class problem. T hese six dimensions represent six mis-classification cells. However, the challenge was to compute the volume of the convex hull in multi-dimensional space. There are computational approaches for calculating the volume of the convex hull however, there is the possibility of missing some points in the construction of the convex hull due to the high di-mensional surfaces [6] [2]. Amongst the existing approximations for the AUC measure for more than two classes are: Hand and Till [2], Mossman [7] and Ferri et al. [4]. Hand and Till [2] extended the AUC for two classes to multiple classes by averaging the AUCs of all the possible combinations of pairs of classes. Mossman [7] prioritized one class over the others and demonstrated his approx-imation for only three classes. Ferri et al. [4] used the Monte Carlo method for their approximation for the AUC. They also introduced the method called the Hyperpolyhedron Search Algorithm (HSA). These existing approximations have the nature of intuitive extensions however, they lack a solid theoretical justifica-tion. Other limitations of these approaches include the theoretical limitation of computing the maximum volumes in the high-dimensional problem, and the fact that at least d ( d  X  1) dimensional variable for d classes is needed for obtaining their volumes. The fundamental issue for rating a classifier X  X  performance is the confusion ma-trix where the numbers represent the total number of actual classes and predicted classes. However, the usual applications of the confusion matrix are limited to two-class classifiers because the classifie r X  X  performance can be easily represented using a two-dimensional matrix. In this matrix the numbers along the rows are the actual class and the numbers along the columns are the predicted class. The classes are predicted considering an operating point that divides the data into the respective classes. Usually, the numbers in the confusion matrix are known as the  X  X rue positive (TP) X ,  X  X alse positive (FP) X ,  X  X rue negative (TN) X  and  X  X alse negative (FN) X . The definitions of these terms are as follows:  X  True Positive (TP)= the number of classified positive data that are positive  X  True Negative (TN)= the number of classified negative data that are negative  X  False Positive (FP)= the number of classified positive data that are negative  X  False Negative (FN)= the number of classified negative data that are positive The Receiver Operating Characteristic s (ROC) plot is obtained for a binary class classifier by plotting the true-positive rate (Sensitivity) over the y-axis and false-positive rate (1-Specificity) over the x-axis. The true-positive and false positive rates are calculated using the following equations:
Figure 1 shows one such ROC plot where they sweep through all the possi-ble operating points, and plot the corresponding false-positive and true-positive rates. There is also a simple three-poin t ROC curve (for discrete classifiers), where there are three points considered in order to obtain the plot. These three points are: (0,1), (FP, TP) and (1,0).The point (0,1) refers to a classifier where every instance has been classified as corr ect: i.e. a perfect classifier is represented by the point (0,1). The point (1,0) refers to a classifier where every instance is classified as wrong: i.e. this point refers to the worst classifier. The point (FP, TP) represents the classifier where the values of FP and TP are obtained from the confusion matrix. The Area Under the Curve (AUC) is a scalar value that can be used to order which ROC curves are better than others. To extend the existing ROC plot and AUC for multi-class classifiers, we use the properties of the ROC plot for binary classifiers. In this extension we calculate all the possible pairwise (pair of classes) AUCs of the multiple classes.
Let us consider three classes -1, 2 and 3 -and assume that for an operating point P 1 (i.e. if the predicted output is Y P 1 classify the instance as class 1, and if the predicted output is Y&gt;P 1 classify the instance as class 2), between the two classes 1 and 2, the values of TP and FP are 0.9 and 0.2 respectively. For these TP and FP we obtain the AUC of 0.85. Similarly, we obtain the values of TP and FP for an operating point P 2 , while classifying classes 2 and 3, as 0.8 and 0.2. The AUC value for classes 2 and 3 is 0.8. In a similar way we obtain the AUC value for classes 3 and 1 as 0.75 (for the operating point considered as P ). For this three-class problem we obtain pair-wise classes.

To visualize this performance using the usual ROC plot we should consider a surface/curve plotted on a six-dimensio nal surface, as there are six features (i.e. three pairs of true positive and false positive rates) that need to be consid-ered to plot the curve. Even though there are a few studies that have provided methodologies for generating the surface for multi-class problems, these plots are not helpful in comparing the classifiers X  performances through visualization. An alternative solution is to represent the pairwise AUCs onto a multidimensional surface. However, the problem still remains as to how to analyze the surface for multiple classes. In our method we consider representing the AUCs using polar co-ordinates. This representation is somewhat similar to the cobweb plot, although there is some notable dissimilarity.

Initially, we consider that the range of angle is 0  X  2  X  . Because there are three AUC values, we divide the maximum angle (2  X  ) by three. For a three-class problem after the division the angle becomes 2 3  X  (i.e., 120  X  ). There will be three lines that form a 120  X  angle with each other. We consider that the maximum length of each of the lines is 1 because the maximum achievable value of an AUC for a binary class problem is 1. In our method we consider the binary AUC values for each of the pair of classes and draw the plot using these AUC values on an equiangular line drawn on a polar co-ordinate. The equiangular lines for a three-class problem are shown in Fig. 2. In this figure the length of each line is 1, assuming that the AUC values for each of the pair of classes are maximum.
Each radius (r) on the plot represents the AUC value for a different pair of classes. If there are m classes, there will be q = m 2 AUC values for q number of pairs of classes; hence, to visu alize the performance of a classifier for an m-class problem we must have q number of equiangular lines. Let us assume that these AUC values are: r 1 ,r 2 ,r 3 ,  X  X  X  ,r q . The corresponding angles are:  X  1 , X  2 , X  3 ,  X  X  X  , X  q ,where,  X  1 =  X  2 =  X  3 =  X  X  X  =  X  q =2  X /q .Ifweconsiderall the AUC values are equal, i.e.,  X  i r i = r where 1 i q , the area covered by the AUC values is: If the values of pairwise AUCs are not equal to each other as shown in Fig. 3 (i.e., r 1 = r 2 = r 3 =  X  X  X  = r q ), the area covered by the AUC values is: In Eq. 2, AUC values r 1 ,r 2 ,  X  X  X  ,r q areplottedsuchthat r 1 is neighbor to r 2 , r 2 is neighbor to r 3 ,  X  X  X  , r q is neighbor to r 1 .

Before using the area formed through connecting the neighboring points on the plot as a classifier performance meas urement, we must address the following issues: 1. What is the range of the minimum-maximum area obtained for a different 2. How the calculated area is affected by the ordering of the AUC values plotted The range of minimum-maximum area for multiple classes: The maxi-mum area for a given number of classes is obtained, if we consider all the AUC for each pairwise classes are 1 (because the maximum AUC for a binary class problem is 1). Thus, for an m-class problem and q = m 2 AUC values, the maximum area is: Similarly, the minimum area is obtained, if we consider all the AUC for each pairwise classes are 0.5 (because the minimum AUC for a binary class problem is 0.5). We obtain the minimum area for an m-class problem from the following equation: Table 1 lists the minimum and maximum values of areas for a different number of classes.
 The ordering of the AUCs: The maximum and minimum area is calculated considering the maximum (r = 1) AUC of each pair of classes and minimum (r = 0.5) AUC of each pair of classes. As a result the radius value remains the same and the value of total area is not affected by the ordering of the AUC values when plotting them onto the equiangular graph. However, in the real world we obtain varying AUC values for different pairs of classes.
 where r 1 r 2 r 3  X  X  X  r q and j = i +1. The area  X  for these values is: Let us interchange the positions of AUC values r i with r j in the above ordering. Now, the area  X  is: By subtracting  X  from  X  we find that  X  =  X  .

This example shows that the ordering of the AUC values affects the calculated area that we use to compare the performances of the classifiers. We propose to use the maximum area, achieved through re-ordering the AUC values, to compare the performances of the classifiers. The maximum area is found if we arrange the AUC values following lemma.
 Lemma 1. The maximum area is found if the AUC values are ordered on the plot in a way such that the neighboring value of a given point (or AUC value) is the next available large value. That is, while calculating the area, the large values will be multiplied to each other.
 Here, r 1 r 2 r 3  X  X  X  r i r j r j +1  X  X  X  r m  X  1 r m and j&gt;i . According to the lemma, a maximum area will be found if the values are arranged as in Fig. 4. In this figure, the neighboring points of r 1 are the next available large values r 2 and r 3 , while the neighboring point of r 2 (the largest of r 2 and r 3 )is r 4 ,whichis the next available large value to r 2 . As there is no other neighboring space of r 2 on which to put any other values we move forward to r 3 and put the next large value r 5 as its neighboring point. The process is continued until all AUC values are allocated.

If the AUC values are arranged as descri bed according to this lemma, the area covered by the AUC values is obtained using the following equation: Here, k = q 2  X  1.
There are the following two scenarios that can affect the area:  X  Replace any pair of neighboring points with each other in the above list  X  Replace any pair of points with each other, where the points are not neighbor Let us replace any pair of neighboring points r i with r j in the above list (where, j&gt;i ). The area  X  is calculated using Eq. 2 for this list. The area difference between  X  and  X  is: Let us replace any pair of points (other than the neighboring points) r i with r j in the above list (where, j&gt;i ). The area  X  is calculated using Eq. 2 for this list. The area difference between  X  and  X  is:
Therefore, it is proved that the maximum area is found if the AUC values are ordered on the plot in a way such that the neighboring value of a given point (or AUC value) is the next available large value.
 It should be noted that the AUC values needed to be arranged while computing the area to represent the performance using a scalar value. To compare the performances of different classifiers visually, there is no need to rearrange the AUC values. Advantages of Our Method Compared with the Generalized AUC In generalized AUC, the AUC that signifies a classifier X  X  performance is obtained through a linear combination of individual AUC values for each pair of classes. Our method, on the other hand, considers a nonlinear combination among the individual AUC values. As a result, our method can find the differences in the performances of two classifiers if, the change in one pairwise AUC value is equal to the change of another pairwise AUC value for these two classifiers.
Letusassumewehaven( n = m 2 for m-class problem) AUC values of r ,r 2 , ..., r n (here the values are ord ered randomly). The area  X  obtained using our method is:  X   X  r 1  X  r 2 + r 2  X  r 3 +  X  X  X  + r n  X  1  X  r n + r n  X  r 1 .Thearea Let us take a small change  X  in r 1 that is compensated by r 2 The area The area  X  in this case is We see that the generalized AUC has not been affected through the changes in AUC values as mentioned above. However, in our method these changes have the effect of changing the area (since,  X  =  X  )whichis  X  X   X   X  ( r 1  X  r 2 )+  X  2 +  X   X  r differences in the performance of two cla ssifiers unlike the generalized AUC[3]. Complexity of the Proposed Method The overall complexity of computing the scalar measurement for a multi-class ROC consists of the complexity of computing AUC for all pairs of classes. For a dataset D of n examples (points) the algorithm would need an O ( nlogn )com-putation to compute AUC for a pair of classes. For M classes there will be a total M C 2 pairs of classes. Therefore, M C 2 pairwise AUC values will require O (
M C 2 log ( M C 2 )) computation to arrange the AUCs for the calculation of a maximum area. Thus the total complexity is O ( M C 2 nlogn + M C 2 log ( M C 2 )). Initially we have generated a synthetic dataset by randomly generating numbers. These numbers are generated following normal distribution where the mean and standard deviations were varied to generate a three class dataset. This dataset consists of three classes where each of the classes has 100 data instances. We classified the dataset using four classifiers: Random Forest, Support Vector Ma-chine (SVM), Random Tree and Decision Tree (C4.5). We have also classified the Segment dataset [8] using above classifiers. There are 2310 data instances and 7 classes in this dataset. Results: Figure 5 shows the area covered by the maximum AUC values obtained for each of the pairs of classes. For this dataset, we obtained the performance using a generalized AUC as 0.92833, while our method produces a scalar value of 1.1188. Table 3 lists the pairwise AUC values for Segment dataset for each of the classifiers and provides the gen eralized AUC and AUC calculated using our method. Fig. 7 compares the performances of four classifiers (SVM, Random Forest, Random Tree and C4.5) for the segment dataset.
 Discussion: The experimental results show that our method can measure the per-formance of a classifier while classifying more than two classes. As shown in Tab. 2, for the synthetically generated dataset, the performance measurement using a gen-eralized AUC cannot differ entiate the performances between SVM and Random Forest. It is interesting that our metho d can rank these classifiers according to their performances. Fig. 6 also represen ts the performance variation visually.
Table. 3 presents the pair-wise AUC values for the four classifiers: SVM, Ran-dom Forest, Random Tree and C4.5 when classifying the segment dataset. The overall performance using our method fo r these classifiers is: SVM: 3.00, C4.5: 3.04, Random Tree: 2.95 and Random Forest: 3.06. The performances using gen-eralized AUC are: SVM: 0.98, C4.5: 0.99, Random Tree: 0.98 and Random Forest: 0.99. We see that the generalized AUC [2] cannot differentiate the performances of SVM and Random Tree, while our metho d can distinguish between the per-formances of these two classifiers. As indi cated by the area, C4.5 performs better than does SVM for the dataset. Similarly, we find that amongst the four clas-sifiers, Random Forest performs the best . According to the area obtained using our method the rank of the classifiers is (from the best to the worst): Random Forest, C4.5, SVM and Random Tree.

Fig. 7 represents the visual comparison of the performances of four classifiers (SVM, Random Forest, Random Tree and C4.5) for the segment dataset that has seven classes. The plot shows that the SVM performs worse than other classifiers when classifying between class 3 and cla ss 4. The classification performances for both Random Tree and SVM are the same for most of the pairs of classes except at a few points (e.g. for the pair class 1 versus class 7, where Random Tree is worse than SVM; and for the pair class 3 versus class 4, where Random Tree performs better than SVM). This plot reveals that the performance of Random Forest is the best among the all classifiers.
 In this paper, we have proposed a new method to represent performance of a classifier both visually and numerically when there are more than two classes in dataset. Using the proposed method, classifiers can be compared and ranked according to their cost performance. The method considers optimal configuration of pairwise AUC values of a classifier providing more accurate performance of the classifier. Furthermore, the computational cost of the method is O ( M C 2 nlogn + M C log ( M C 2 )) that is far less than O ( n d ); d = M. ( M  X  1) (if we consider d -dimensions to plot and compute the volume under ROC surface) for a dataset of M classes and n datapoints. This method is a milestone to fill up the limitation of the existing AUC and ROC plot for binary class problem.
