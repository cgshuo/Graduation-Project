
My PhD research has been on the algorithmic and formal aspects of computational linguistics, esp. in the areas of parsing and machine translation. I am interested in developing efficient algorithms for for -malisms with rich expressi ve power , so that we can have a better modeling of human languages without sacrificing efficienc y. In doing so, I hope to help in-tegrating more linguistic and structural kno wledge with modern statistical techniques, and in particular , for syntax-based machine translation (MT) systems.
Among other projects, I have been working on k -best parsing, synchronous binarization, and syntax-directed translation. NLP systems are often cascades of several modules, e.g., part-of-speech tagging, then syntactic parsing, and finally semantic interpretation. It is often the case that the 1-best output from one module is not always optimal for the next module. So one might want to postpone some disambiguation by propa-gating k -best lists (instead of 1-best solutions) to subsequent phases, as in joint parsing and seman-tic role-labeling (Gildea and Jurafsk y, 2002). This is also true for reranking and discriminative train-ing , where the k -best list of candidates serv es as an approximation of the full set (Collins, 2000; Och, 2003; McDonald et al., 2005). In this way we can optimize some complicated objecti ve function on the k -best set, rather than on the full search space which is usually exponentially lar ge.

Pre vious algorithms for k -best parsing (Collins, 2000; Charniak and Johnson, 2005) are either sub-optimal or slo w and rely significantly on prun-ing techniques to mak e them tractable. So I co-developed several fast and exact algorithms for k -best parsing in the general frame work of directed monotonic hyper graphs (Huang and Chiang, 2005). This formulation extends and refines Klein and Manning X  s work (2001) by introducing monotonic and Jonathan May for ISI X  s tree automata package Tiburon. All of these experiments confirmed the findings in our work. Machine Translation has made very good progress in recent times, especially , the so-called  X  X hrase-based X  statistical systems (Och and Ne y, 2004). In order to tak e a substantial next-step it will be neces-sary to incorporate several aspects of syntax. Man y researchers have explored syntax-based methods, for instance, Wu (1996) and Chiang (2005) both uses binary-branching synchronous conte xt-free gram-mars (SCFGs). Ho we ver, to be more expressi ve and flexible, it is often easier to start with a gen-eral SCFG or tree-transducer (Galle y et al., 2004). In this case, binarization of the input grammar is required for the use of the CKY algorithm (in or-der to get cubic-time comple xity), just as we con vert a CFG into the Chomsk y Normal Form (CNF) for monolingual parsing. For synchronous grammars, howe ver, dif ferent binarization schemes may result in very dif ferent-looking chart items that greatly af-fect decoding efficienc y. For example, consider the follo wing SCFG rule: We can binarize it either left-to-right or right-to-left: The intermediate symbols (e.g. V tual nonterminals . We would certainly prefer the right-to-left binarization because the virtual nonter -minal has consecuti ve span (see Fig. 2). The left-to-right binarization causes discontinuities on the tar get side, which results in an exponential time comple x-ity when decoding with an inte grated n -gram model.
We develop this intuition into a technique called sync hronous binarization (Zhang et al., 2006) which binarizes a synchronous production or tree-tranduction rule on both source and tar get sides si-multaneously . It essentially con verts an SCFG into an equi valent ITG (the synchronous extension of CNF) if possible. We reduce this problem to the binarization of the permutation of nonterminal sym-bols between the source and tar get sides of a syn-chronous rule and devise a linear -time algorithm SCFGs. For example, the S(V O) structure in En-glish is translated into a VSO order in Arabic, an instance of comple x re-or dering (Fig. 4).

To alle viate this problem, grammars with richer expressi ve power have been proposed which can grab lar ger fragments of the tree. Follo wing Galle y et al. (2004), we use an extended tree-to-string trans-ducer ( xRs ) with multi-le vel left-hand-side (LHS) trees. 1 Since the right-hand-side (RHS) string can be vie wed as a flat one-le vel tree with the same non-terminal root from LHS (Fig. 4), this frame work is closely related to STSGs in having extended domain of locality on the source-side except for remain-ing a CFG on the tar get-side. These rules can be learned from a parallel corpus using English parse-trees, Chinese strings, and word alignment (Galle y et al., 2004). 3.2 A Running Example Consider the follo wing English sentence and its Chi-nese translation (note the reordering in the passi ve construction): (2) the gunman was killed by the police .
Figure 3 sho ws how the translator works. The En-glish sentence (a) is first parsed into the tree in (b), which is then recursi vely con verted into the Chinese string in (e) through five steps. First, at the root node, we apply the rule r level word-order and translates the English period into its Chinese counterpart: ( r Then, the rule r gunman X  and translates it as a phrase: ( r No w we get a  X  X artial Chinese, partial English X  sen-tence  X  qiangshou VP recursion goes on to translate the VP sub-tree. Here we use the rule r ( r which captures the fact that the agent (NP-C,  X  X he police X ) and the verb (VBN,  X  X illed X ) are always inverted between English and Chinese in a passi ve voice. Finally , we apply rules r form phrasal translations for the two remaining sub-trees in (d), respecti vely , and get the completed Chi-nese string in (e). 3.3 Translation Algorithm Given a fix ed parse-tree  X   X  , the search for the best deri vation (as a sequence of con version steps) can be done by a simple top-do wn tra versal (or depth-first search) from the root of the tree. With memo-izationm, we get a dynamic programming algorithm that is guaranteed to run in O ( n ) time where n is the length of the input string, since the size of the parse-tree is proportional to n . Similar algorithms have also been proposed for dependenc y-based transla-tion (Lin, 2004; Ding and Palmer , 2005).

I am currently performing lar ge-scale experi-ments on English-to-Chinese translation using the xRs rules. We are not doing the usual direction of Chinese-to-English partly due to the lack of a suf-ficiently good Chinese parser . Initial results sho w promising translation quality (in terms of BLEU scores) and fast translation speed.

