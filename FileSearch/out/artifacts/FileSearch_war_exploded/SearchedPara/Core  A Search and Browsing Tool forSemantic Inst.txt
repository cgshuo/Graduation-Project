 The goal of recent research on Semantic Web is to enhance the accessibility of the current Web by providing semantics information about Web pages so that applications and users can easily process the Web page content [7]. To achieve this goal, one of the important tasks is to derive knowledge about the web pages and the relationship between the web pages. Once such kind of knowledge is derived, search engines and browsers are able to access web pages of different categories and their semantic relationships so as to support more complex user queries. In order to meet the above requirement, web pages from web sites need to be classified into categories.
 Web pages can be associated with concepts while pairs of web pages can be associated with relationships between concepts. For example, web pages from a movie web site can be associated with concepts such as Movie , Actor , Di-rector , Producer , etc.. These web pages are therefore instances of different con-cepts. Relationships between concepts such as Actor-of(Movie,Actor) and Di-rectedBy(Movie,Director) can have instances relating pairs of web pages. When concepts and relationships are associated with web pages, new semantic ap-proaches to access web sites can be supported [7]. For example, web pages can be queried by their concept labels, or can be navigated using the relationship labels as some guidances.
 tensively [6, 4]. On the other hand, automatic assignment of relationship labels is relatively new problem. In our research, we investigated the learning of link chain pattern for pairs of web pages [3]. For example, at the Yahoo! Movies Web Site 1 , determining the relationships between the instances of the Actor-of(Movie, Actor) relationship can be found by traversing from movie web pages to the actor web pages following the links with some specific anchor text. known as the ontology approach) to access a web site. For example, instead of plain keyword queries, web page queries can be augmented with concept labels. Web pages can also be browsed via their relationships instead of physical links. The main objective of this research is to develop a tool known as CORE ( Core ) to allow users to access a web site using the ontology approach. An integrated search and browsing interface is provided. Core treats web pages as concept instances and its search module can support not only keyword queries on web pages of user specified concepts, but also complex queries involving web pages connected by some relationships. Core  X  X  browser module allows web pages of user specified concepts to be browsed and virtual links are provided to traverse to other related web pages.
 related works. The system architecture of searching and browsing tool Core is presented in Section 3. Section 4 gives the definition of link chain and brief description of link chain extraction method that was used to find the relation-ship instances. A few use case scenarios of using Core are given in Section 5. We finally conclude the paper and highlight the future research directions in Section 6. This section reviews three research projects closely related to Core . and relationship instances embedded in the Web pages of a Web site. Each con-cept instance is represented by a name and a set of attribute values, and each relationship instance is represented by a pair of concept instances. Magpie as-sumes that the concept and relationship instances are pre-defined in a database. These concept and relationship instances will be highlighted in those Web pages containing their names. No search capability is provided in Magpie.
 pages. It adopts a knowledge base definition that consists of classes (similar to concepts in Core ) and each class has one or more attribute slots. Relation-ships between Web pages however are not captured. MnM can learn extraction patterns from annotated attribute slots from a Web page and apply them to annotate other Web pages. Both the manually and automatically annotated at-tribute slots can be viewed in the MnM browser. Since MnM deals with mainly text based Web pages, the extraction patterns involves text matching only. There is no search module provided by MnM.
 PhD student) as concept instances, text fragments (e.g., name, postal address, email address) in these pages as concept attributes, and pairs of Web pages as relationship instances, in order to facilitate navigation and queries on the Web pages. When browsing Web pages, the attribute instances and anchor text of links to related concept instances will be highlighted.
 search facilities, and allows users to browse any search results. The concept instances in Core are Web pages, and relationship instances are pairs of Web pages such that the pages representing source concept instances are connected to the pages representing target concept instances. The target concept instances of currently browsed Web pages can be reached by mouse hovering the highlighted anchor texts. The system architecture of Core is shown in Figure 1. It mainly consists of a search and a browsing server application, web page classification module, link chain extraction module and a knowledge repository.
 Server Application. There are two main application components, namely:  X  Search Component. The search component accepts user queries and com- X  Browsing Component Web Page Classification Module. The web page classification module as-signs concept labels to web pages from a given web site. It assumes that each web site can be associated with some semantic domain and the concepts relevant to the domain will be used to label the web pages. For example, in the movies domain, the relevant concepts are Actor , Movie , Director , etc.. It is not necessary for Core to classify every web page as some of them could not be assigned any concept labels and others will be labelled during the link chain extraction process as they are identified as target concept instances of some relationship instances. The current version of Core uses URL features to classify web pages as the web sites are well structured. Web pages from two web sites, Yahoo! Movies web site 3 and DBLP web site 4 , have been categorized under seven concepts. They are Movie , Actor , Director , Producer and Writer for the Yahoo! movie web site and Journal and Author for the DBLP web site.
 Link Chain Extraction Module. Link chain extraction module extracts link chains from some given web pages that constitute the source concept instances. A link chain is a series of links from a source web page to a target web page such that a relationship exists between the two web pages. The link chain ex-traction module is designed to learn the extraction patterns of link chains from some training examples and apply them to other source web pages. The formal definition of link chain and extraction of link chain information will be described in Section 4.
 Knowledge Repository. The knowledge repository maintains information about the ontology concepts and relationships, their instances, the link chain information of relationships, and Web pages. The ER diagram describing the content of knowledge repository is shown in Figure 2. At the top of Figure 2, the ontology concepts and relationships are modelled. The lower portion of the figure depicts the instance-level knowledge about the Web site. We apply one-to-one association between link chains and relationship instances.
 server. It uses Microsoft Access as its underlying database system. The graphical user interface is implemented using Java Server Page(JSP) in J2EE platform. In this section, we give the definition of link chain and describe briefly our link chain extraction method. 4.1 Link Chain Suppose ( w s ,w t ) is an instance of a relationship R ( C s ,C t ). We define the link chain of ( w s ,w t ) as follows: Definition 3. (Link Chain) The link chain of ( w s ,w t ) with respect to R ( C s ,C t ) is a list of chain elements anchor element in w i ; (iii) l n .target = w t .url ;and(iv)  X  1  X  i&lt;n,l i .target = w +1 .url .
 its href attribute.
 tor) that involves an intermediate page ( w 2 )(that contains the list of cast and credits). The link chain of the relationship instance, ( w 1 ,w 3 ), with respect to Actor-of(Movie, Actor) is (( w 1 ,l 1 ) , ( w 2 ,l 2 )).
 home page( w 1 ) to actor X  X  home page( w 3 ) represents an essential piece of infor-mation about the Actor-of(Movie, Actor) relationship instance. It allows us to know which anchor elements in the chain of web pages leads us from the source web page to the target web page of a Actor-of relationship instance. database, the link chains of instances of the same relationship can share very similar pattern in the way their anchors elements are embedded in the source and intermediate web pages. By learning this pattern, one can extract all in-stances of the relationship from the web site automatically. This is extremely useful in applications where only selected web pages are to downloaded from a structured web site and they can only be located by traversing from source web pages which are instances of some given concept. 4.2 Learning of Link Chain Extraction Patterns In our research, we define a link chain extraction pattern to be a set of rules on the page paths leading to the chain elements of the link chains. Within a web page containing a chain element, a page path consists of a series of HTML segments (also known as page segments) one nested within another with the chain element being the innermost page segment. The extraction pattern therefore includes a hierarchy of extraction rules to identify these segments and extract the relevant chain element.
 Definition 4. (Link Chain Extraction Pattern) The link chain pattern of R ( C s ,C t ) is a series of page path patterns de-noted by ( pp 1 ,pp 2 , ..., pp n ) such that each pp i represents the page path of web page containing the i -th chain elements. Each page path pp i is a list of page segment nodes where each node is assigned one or more extraction rule. Definition 5. (Extraction Rule) Each extraction rule of a page segment node is set of text predicates to determine the page segment from a given web page corresponding to the node.
 types, and regular expressions.
 fied by expert users. To learn extraction rules associated with the page segment nodes, a sequential covering [2] based method has been developed. The learn-ing method requires some link chains to be given as training examples. Detailed description of these algorithms will be reported in an extended version of [3]. Yahoo! movie, our link chain extraction method was able to extract link chains of a few pre-defined relationships with high precision and good recall using less than 15 training examples. In this section, we describe some usage scenarios of Core and highlight its unique features. 5.1 Searching Scenarios We describe the usage scenarios for querying concept and relationship instances as follows.
 Concept Query Consider a movie enthusiast gathering information about movies and related in-formation such as actors, directors, etc.. Suppose he/she wants to search his/her favourite actor at Yahoo! Movie web site. He/she however does not recall the full name of the actor except the first name  X  X arry X . When Google 5 search engine is given the query string  X  X arry site:.movies.yahoo.com X  which specifies  X  X arry X  as the search term and  X  X ovies.yahoo.com X  as the web site to be searched, the results returned consist of mainly the home pages of movies containing  X  X arry X  in their titles, e.g.,  X  X arry Potter and the Prisoner of Azkaban X ,  X  X arry Pot-ter and the Chamber of Secrets X , etc.. In this example, Google actually fails to return any actor page in the top 10.
 select Actor as the concept to be queried. The search term  X  X arry X  can now be specified against the web pages that are instances of the Actor concept. As expected, the results returned will consists of actor pages only as shown in Fig-ure 4(a). Relationship Query Suppose now the user wants to find a specific movie which involves his/her favourite actor. Unfortunately, he/she only remembers that the movie title in-cludes the word  X  X ig X  and the actor X  X  name includes  X  X arry X .
 site:.movies.yahoo.com X  where the search terms  X  X ig X  and  X  X arry X  are included, the results fail to match the user requirement. The query results will even be more unexpected when the query string  X  X ovie + give + actor + harry site:.movies.yahoo.com X  is used.
 of(Movie, Actor) relationship. Appropriate search terms can be specified against the source and target concepts. In this example scenario, the user can input  X  X ig X  as the search term for the Movie concept and  X  X arry X  as the search term for the Actor concept. Core will return pairs of instances (web pages) of the Actor-of relationship that satisfy the relationship query. The query results are shown in Figure 4(b).
 the right column displays the related Actor concept instances. Note that when the same source web page have multiple related target web pages that satisfy the relationship query, the results have the same source page will be merged together showing the source page only once. 5.2 Browsing Scenario The traditional Web browsers are not aware of the semantics of web pages. They are not equipped with the ability to display semantic information and to support browsing based on the concept and relationship labels. Users therefore have to decide which web pages to visit by examining the anchor elements linking to the pages. Due to the limited information provided by the anchor text and intermediate web pages to be traversed before reaching the wanted web pages, the users are likely to commit errors in the choice of web pages to be browsed next and waste some of their time and efforts.
 to its actor home page. The user can directly reach the actor home pages only if there are some anchor elements (i.e, with the names of the actors as anchor text) available within the movie home page. If there is no direct link from the movie page to the actor page, the user will not know which anchor element should be traversed in order to reach the desired actor page.
 pages for browsing, and the navigation of relationship instances.
 from the relationship query result as shown in Figure 5. In the figure, the URL, concept label and relevant relationships of the selected movie web page are au-tomatically displayed in the page information frame while the page is displayed in another browser window.
  X  X he Big Bounce(2004) X , he/she can select the Actor-of relationship in the page information frame. Upon selection, the anchor element (i.e.,  X  X ast and Credits X ) that leads to actor web pages will immediately be highlighted. Moreover, as the user moves the mouse over the highlighted anchor text, virtual links that lead to actors X  web pages will appear in the browser window. These virtual links display the names of actors in the movie as shown in Figure 5(a). The user can now choose any of the actor web pages to browse without going astrayed.
 ton X  as shown in Figure 5(b). The web page is loaded into the browser window and the page information panel is updated accordingly including a new set of relationships relevant to actors. In this way, user can minimise errors in the web site navigation. Knowledge about the concept labels of web pages from a web site and the relationships among the pages is crucial in realizing the goal of the Seman-tic Web. In this paper, we introduce an integrated search and browsing tool Core for searching and browsing web pages that are concept instances and their relationships.
 labels to web pages, learning link chain extraction patterns and using them to determine the relationships among web pages. A new web search model has been introduced to support both concept and relationship queries. We also highlight a few example scenarios where Core can be used to enhance web site searching and browsing.

