 We can obtain the correspondence between parts of given documents which are in different forms for t he same topic or in differen t versions. For example, a paragraph from one document corresponds to a paragraph or paragraphs in another document. Such documents include pairs of a conference paper presented at an international conference and a journal paper, which was an improved version of the conference paper, or two dis tinct versions of Wikipedia articles.
The information on corresponding relationships is very useful to understand documents. For example, if one feels that part of a document is hard to un-derstand, the corresponding parts in another document can help one to better understand the given part. In addition, if one wants to find differences between a new document and a document which one has read in the past, corresponding information can provide them. Furthe rmore, they can be used to complement parts which have poor content by using corresponding parts which have more content. Other important applications include detection of plagiarism.
However, it is difficult to associate parts which have been heavily modified only using information from their content. Therefore, we considered using not only information from content but also the structural information in documents such as sections or paragraphs. We can align and associate parts appropriately by using structural information.
 Much important content on the Web can b e modeled as structured documents. Our motivation is to associate corresponding parts in structured documents, and we propose a method of using the content and structural information of documents for fine-grained document alignments.
 Using document structures would be esp ecially effective for cross-lingual cases. It is a way to use machine translation such as Google Translate 1 in advance in order to take alignments of cross-lingual documents. However, machine trans-lation does not have sufficiently good quality to obtain appropriate alignments by only using information from content. In contrast, as structural information is not changed by machine translation, it would be effective for cross-lingual alignments.

We carried out experiments to confirm t he effectiveness of using document structures for alignments, where we us ed pairs of papers such as a conference paper and its modified version which had been published as a journal paper. The results revealed that we could obtain more appropriate alignments by using document structures and there were esp ecially effective for cross-lingual cases.
This paper is organized as follows. Sect ion 2 discusses related work and its differences from our work. Section 3 expl ains the method of alignment. Section 4 presents results obtained from experimen ts and discusses the results. Conclusions and future work are presented in Section 5. 2.1 Document Alignment Document alignment has been widely studied. Daum  X  e III and Marcu [1] consid-ered alignments at the phrase level betw een one document and its abstract, and proposed a method using a hidden Markov model (HMM). Jeong and Titov [2] used a Bayesian model for alignments.

Our motivation was to associate corresponding parts of documents, i.e., to obtain alignments, which was similar to the previous work. However, they con-sidered alignments based on information from the content of documents. In contrast, we introduced structur al information into alignments.

Romary et al. [3] proposed a multilevel a lignment method for structured docu-ments. However, their target structure is balanced tree and they do not consider swapping. 2.2 Similarity of Documents The idea of using document structures has been presented in studies on calcu-lating similarities in documents. Zhang and Chow [4] regarded a document as having a two-level tree structure which had a root node representing the entire document and child nodes representing paragraphs, and they calculated simi-larities by using the Earth Mover X  X  Distance (EMD). They also applied their method to detect plagiarism [5]. Wan [6] regarded a document as a sequence of its subtopics and he calculated similarities with EMD. Tekli and Chbeir [7] used the Tree Edit Distance to calculate similarities in XML documents.

They considered document structures in their work, but their motivation was to calculate similarities of documents, which was different from our motivation to find alignments. 2.3 Cross-Lingual Alignment Yahyaei et al. [8] proposed a method using Divergence from Randomness. Yeung et al. [9] regarded document alignment to be a matter where Wikipedia pages had various quantities of descriptions for various languages. They used align-ment technique to complete their content by using the same pages written in different languages. Smith et al. [10] used alignment to gather parallel sentences for training of statistical machine translation (SMT). Vu et al. [11] proposed a method to obtain similar news texts written in different languages.
Our method can be applied to cross-lingual alignments by using machine translation. Their work focused on content information of documents. On the other hand, our work introduce the structural information into alignments. We regard structured documents as tree st ructures and call them document trees (Figure 1). The input for our method is two document trees and the output is the result from alignment. The granularity of alignment is paragraphs.
If corresponding parts are heavily modified, it is hard to associate them by only using similarities in their content. Therefore, our method takes into consid-erations the order of paragraphs and the structures of documents.
Our method consists of three steps, wh ere we use the Levenshtein distance algorithm to consider the order of paragraphs in the first step. We not only consider the similarities in paragraphs but also those in sections to associate two paragraphs. We consider merging paragraphs in the second step to associate multiple paragraphs. We consider swapping paragraphs in the third step to deal with changing paragraph locations. Each step is described in subsections 3 . 1, 3 . 2, and 3 . 3. 3.1 Baseline Alignment We use the algorithm of the Levenshtein distance [12] for the baseline alignment. The Levenshtein distance is calculated as s is the substring of string s which has i characters from the begining of s ,and
We regard documents as paragraph sequences and obtain alignment by apply-ing this algorithm to them. When the bottom expression in Eq. (1) is minimum, i.e., when a rename operation is applied, we associate s [ i ]and t [ j ]. Thus, we can obtain alignment which takes into account the order of paragraphs.

We set the rename cost of similar paragraphs to a lower value to associate similar paragraphs. The cost functions are defined as where p and q are paragraphs. As delete and insert operations are symmetric, we set their costs to be equal. The similarity calculates the similarities between p and q in 0 to 1.

In order to associate two paragraphs which are hard to associate only using their similarity, we use sim global which is the similarity between the sections which contain the paragraphs to be associated and sim local which is the similar-ity between the paragraphs. sim global and sim local are calculated as the cosine similarity between the term vectors by tf-idf. The similarity is defined as follows, where C is a parameter which is in 0 to 1. Thus, the similarity between sections will help in associating paragraphs.
This is the association using the Levenshtein distance algorithm. Figure 2 outlines an example of alignment in step 1, where associated paragraphs are linked in the lines. Paragraphs which are not associated are regarded as deleted or inserted in this step. The alignmen t process is finished when all paragraphs or no paragraphs are associated in this step. 3.2 Merging Paragraphs can be split into multiple parts, but the alignments in the previous step are in 1-to-1. We then n eed to consider alignments in m to n .wecando this by merging paragraphs.

The merging targets are paragraphs which have not been associated yet in the previous step (Section 3.1). We try to merge each paragraph into adjoining paragraphs which have been already associated. That means, we assume that parts of paragraphs which are split are associated in the previous step.
We determine whether paragraphs should be merged by checking for the sim-ilarities, i.e., if similarities increased by merging, the paragraphs are merged. If similarity decreased, the par agraphs remain not associated.

We considered using docum ent structures for merging. The merge process was used to deal with split paragraphs, and paragraphs would not split into different sections. Therefore, as we assumed that merging between paragraphs which were in different sections will no t occur, we prevented such merging by decreasing similarities. W e introduced a parameter, penalty ,inourmethod, which was multiplied to the similarity of merged paragraphs of different sections. We can determine whether the merging is d one over different sections by checking whether the parents of the paragraphs to be merged are the same. We could reduce false merging by doing this.

We applied the merging process des cribed in this step to the results of the previous step. Figure 3 has an example of alignments in this step, where paragraphs which are associated with the same paragraph have been merged. There are also paragraphs which have not been associated yet in this step. They were not merged since similarities decr eased if they merged. If all paragraphs are associated in this step, the alignment process is finished. 3.3 Swapping Alignments which took into consideration associations in multiple paragraphs were achieved in the previous steps. Howev er, there are cases where the locations of paragraphs have changed where we need to consider cross associations. We took cross associations into account in this step, i.e., where paragraphs were swapped.

Like the merging process, the targets for the swapping process are paragraphs which have not been associated yet in the merging step (Section 3.2). Swapped paragraphs can remain not being associated in the previous steps. The targets in the swapping process are paragraphs in a document which are not associated and we try to find corresponding paragraphs in another document which are also not associated.
 We need to check for similarities to find swapped corresponding paragraphs. For example, if similarities are greater than a threshold, then paragraphs be-come associated. However, it is hard to find corresponding paragraphs which are heavily modified only using the information from content as in the previous steps. Furthermore, as the swapping process does not take into consideration the order of paragraphs unlike in the previous steps, false associations can be increased. We need to set the threshold for associations in the swapping process to a greater value. Therefore, there n eed to be greater similarity of swapped paragraphs to be associated appropriately.
 We then introduce the use of document structures into the swapping process. Before finding corresponding paragraphs, we enumerate subtrees which are com-posed only of the paragraphs that are not associated. We then try to swap the subtrees. Figure 4 shows an example of targets of swapping, where the subtrees enclosed by the dotted lines are the targ ets. We check for similarities for each subtree in one document with subtrees in another document and if the similari-ties are greater than the threshold, then we regard the subtree as corresponding. Thus, we can find corresponding paragraphs by using the structural information in subtrees even when it is hard to swap pa ragraphs by content information only.
We use the Tree Edit Distance (TED) [13 ] to calculate the similarities between subtrees. We can find appropriate corresponding subtrees by using the structural information in subtrees even if there are few similarities by using the content of paragraphs. We choose a subtree which has the largest similarity value greater than the threshold as the corresponding subtree.

We focus on the two subtrees and apply our method from step 1 again if a corresponding subtree is found. The alignment process is recursively performed and stops when any of the following three states is achieved 1. All paragraphs are associated, or no paragraphs are associated in step 1. 2. All paragraphs are associated in step 2. 3. No paragraphs are associated in step 3. Figure 5 shows an example of alignments in this step, where the crossed associ-ations are swapped paragraphs. Paragraphs which are not associated could not find corresponding subtrees or paragraphs. 4.1 Experimental Setup We evaluated the proposed method using 8 pairs of papers which had been presented or published in different for ms. The papers used in the experiment were stored in our laboratory as PDF files. We transformed the PDF files to XML files, which represented document trees as shown in Figure 1. Among the 8 pairs, 5 pairs are cross-lingual (papers in Japanese and English) and Japanese papers were translated into English by Google Translate as the preprocessing.
We manually judged proper alignments as the ground truth and calculated the precision and recall of the associations. We preliminarily examined optimal values for the parameters and set  X  in Eq. (2) to 0 . 425, C in Eq. (4) to 0 . 2, and penalty to 0 . 8.

We used two other approaches to evaluate our method.  X  simple matching method  X  non-structural method 4.2 Results Table 1 lists the results of alignments for the methods. Precision and recall are calculated as follows.  X  Number of correct associations in result / Number of associations in result  X  Number of correct associations in result / Number of correct associations Figure 6 shows the F-measures for the methods. The proposed method performed the best for each pair a ccording to Figure 6.

There were many false alignments in the results for the simple matching method, which ignored the order of paragraphs. In contrast, the proposed method and non-structural method, which took into consideration the order of para-graphs, obtained natural alignments. These results confirm that taking into consideration the order of paragraphs is effective for alignments.

In contrast to the results of the non-structural method, the effectiveness of using document structures can be seen in the results of the proposed method. The proposed approach associated paragraphs which had not been associated by the non-structural method by using structural information. These results confirmed that taking document structures into cons ideration is effective for alignments.
Furthermore, the proposed method outperformed the other methods especially in the cross-lingual cases (p1, p2, p3, p4, and p5) on the left part of Figure 6. They were translated by machine translation in preprocessing. This means that using structures is especially effective for finding cross-lingual alignments. We proposed a method of document alignment, in which we applied the algo-rithm of the Levenshtein distance and took into consideration document structures. The method also took into account the merging and swapping of paragraphs. We confirmed its effectiveness of using the structures of documents for alignments in our experiments. We will apply our method to more documents and improve it in future work.

