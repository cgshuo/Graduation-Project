 Sequential pattern mining methods[1, 2] extract frequent sequences with their transaction occurrence order, but with out time intervals between their occur-rence time. Thus, it is impossible to identify the time intervals between any two transactions extracted as frequent sequential patterns. It is useful to be able to understand what events will occur, and moreover when these events will oc-cur. To distinguish time intervals from extracted sequences using conventional sequential pattern mining methods, it is necessary to add constraints of time in-fomation to extracted sequences[3, 4]. Ho wever, in order to distinguish sequences which consist of the same items with different time intervals, constraint approach algorithms need to be re-executed with changing their constraints.
To solve this problem, we propose a new sequential pattern mining with time intervals. The proposed method enables sequential patterns to be distinguished with any time interval that are multiples of a user-defined base interval. Modified PrefixSpan[5], which is an alternative sequential pattern mining, defines sequences with the same items and different item gaps as different sequences. Item Gaps are defined as the number of items between any two items. Modified PrefixSpan works well when applied to datasets whose item intervals are defined as the number of items, such as DNA sequences. However, it does not work well when applied to datasets whose it ems have their own occurrence time. 3.1 Problem Definition alphabetically. A transaction t has a time-stamp infomation, denoted as t.time . The time interval extended sequence, denoted as ts , is a list of transactions with time intervals, and is defined as follows: Here, D ( t  X  ,t  X  ) is the time interval between t  X  and t  X  , and is defined by the following expression: Note that  X  X  is a user-defined parameter, and determines the unit of time interval partition. For example, when  X  X  is set to 1 day, D ( t  X  ,t  X  )isdefinedasfollows: and to represent as &lt;t 1 ,  X  X  X  &gt; .

The time interval extended sequential database, TSDB , which is a target of pattern extraction, is a set of time i ntervals for the extended sequence ts ,and is defined as TSDB = { ts 1 ,ts 2 ,  X  X  X  ,ts t } . When two time interval extended se-t for all { k | 1  X  k  X  m } . The support of time interval extended sequence ts in TSDB , denoted as sup TSDB ( ts ), is the percentage of time interval extended se-quences that include ts . A frequent time interval ex tended sequence is defined as the time interval extended sequence whose support is higher than min sup (0  X  min sup  X  1). Given TSDB and min sup , sequential pattern mining with time intervals extracts all the frequent t ime interval extended sequences. 3.2 Proposed Method To extract frequent time interval extended sequences, we extended the sequen-tial database projection operation in the PrefixSpan algorithm[2]. Similar to PrefixSpan, our algorithm extracts freq uent time interval extended sequences with a depth-first search by executing th e projection operation recursively. In this section, we describe our projection operation in detail.
 Definition1. Projection Level Projection level is the number of items included in a projection sequence. For example, let ts 1 be a time interval extended sequence with l items. Generating TSDB | ts 1 is level l projection.
 Definition2. Prefix and Postfix of Time Interval Extended Sequences sequence, and t  X  be any transaction. When there exists an integer j (1  X  j  X  m ) subset of t j from which items also including in t  X  are excluded. When t j =  X  , and postf ix ( ts, t  X  ,D ( t 1 ,t  X  )) are defined as  X  .
 Our projection operation performs di fferently between Level 1 projection and Level 2 or later projection.
 Level 1 Projection. In the case of Level 1 Projection, as it is impossible to define time intervals with a single transaction, our algorithm scans TSDB and checks all items X  supports, similar to PrefixSpan. For every item i  X  whose support is higher than the minimum support, generate TSDB | i  X  then execute the level 2 projection operation. Note that when item i  X  appears more than once in the same ts , our algorithm generates multiple prefixes and postfixes at each item i  X  , and then treats them as different sequences. For example, let projection transaction is &lt;a&gt; becomes 3 time interval extended sequences, &lt;  X  d Level 2 or later Projection. In the case of Level 2 or later projection, our algorithm scans projected TSDB and counts pairs of items included in projected sequences and their time interv als. Our algorithm projects TSDB in the follow-ts as TSDB | ts  X  ,isdefinedasfollows: ts  X  -projected database is a c ollection of projected time interval extended se-quences, which are postfixes of time interval extended sequences included in ts projection time interval extended sequence of TSDB | ts  X  . In this evaluation, a Japanese earthquake dataset was used. The dataset is dis-tributed via K-net[6] provided by the National Research Institute of Earth Sci-ence and Disaster Prevention and includes data from 3,296 earthquakes that occurred from May 1995 to December 2003.

A sequence of this dataset is defined as a list of earthquakes in the same grid. A grid is defined as 1-degree latitude and 1-degree longitude square. And all earthquake data are itemized to the same item referring to depth of the epicenter and magnitude on the Richter scale.
 Extracted sequence quality. Table 1 shows a part of the frequent time inter-val extended sequential patterns e xtracted by proposed method with min sup = 0 . 05 and  X  X  =1 day . Calculating the confidence based on the support of pat-terns shown in Table 1 yielded the following knowledge. Once item-A occurred, item-A will occur again:  X  within 1 day with probability of 0 . 222 0 . 723  X  100 = 30%.  X  within 1 to 2 days with probability of 0 . 101 0 . 723  X  100 = 13%.  X  within 2 to 3 days with probability of 0 . 081 0 . 723  X  100 = 11%.
On the other hand, there is no time interval information in extracted patterns using conventional sequential pattern mining. Thus, users are not able to predict how long after item-A the event will occur again. These results indicate that the patterns extracted by the proposed method are more useful than those extracted by the conventional sequential pattern mining algorithm.
 Performance evaluation. In the next section, the running times of both Pre-fixSpan and the proposed Algorithm are compared. Figure 1 shows the relation between the number of extracted frequent sequential patterns and min sup .Fig-ure 2 shows the relation between execution time and min sup .

Figure 1 and Figure 2 shows the following. Using PrefixSpan, as the number of extracted sequences increased exponentially as min sup decreased, thus ex-ecution time increase exponentially as min sup decreased. On the other hand, since the proposed method distinguishe s between sequences consisting of the same transactions with different time intervals, proposed method can prevent the huge increase in both the number of extracted sequences and running time. These results indicate that users can analyze more sensitive patterns in a short time using the proposed method. Here, we propose a new type of sequential pattern mining method based on time intervals. Evaluations confirmed that the sequential pattern mining based on time intervals is able to extract more useful patterns for feedback to the real world than conventional sequential pattern mining, and that users can also analyze more sensitive patterns in a shorter time in comparison with using con-ventional sequential pattern mining.
 Acknowledgments. This research was funded in part by both  X  X -Society X  and  X 21-century COE Programs: ICT Productive Academia X  of MEXT in Japan.
