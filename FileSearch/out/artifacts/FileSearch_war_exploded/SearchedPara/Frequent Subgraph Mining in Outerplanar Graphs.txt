 In recent years there has been an increased interest in fre-quent pattern discovery in large databases of graph struc-tured objects. While the frequent connected subgraph min-ing problem for tree datasets can be solved in incremental polynomial time, it becomes intractable for arbitrary graph databases. Existing approaches have therefore resorted to various heuristic strategies and restrictions of the search space, but have not identified a practically relevant tractable graph class beyond trees. In this paper, we define the class of so called tenuous outerplanar graphs , a strict generaliza-tion of trees, develop a frequent subgraph mining algorithm for tenuous outerplanar graphs that works in incremental polynomial time, and evaluate the algorithm empirically on the NCI molecular graph dataset.
 F.2.2 [ Nonnumerical Algorithms and Problems ]: Pat-tern matching; H.2.8 [ Database Applications ]: Data Min-ing; J.2 [ Physical Sciences and Engineering ]: Chem-istry Algorithms, Experimentation graph mining, frequent pattern discovery, computational chem-istry
The discovery of frequent patterns in a database, i.e., pat-terns that occur in at least a certain specified number of elements of the database, is one of the central tasks consid-ered in data mining. In addition to be interesting in their own right, frequent patterns can also be used as building blocks or features for predictive data mining tasks (see, e.g., Copyright 2006 ACM 1-59593-339-5/06/0008 ... $ 5.00. [5]). For a long time, work on frequent pattern discovery has concentrated on relatively simple notions of patterns and el-ements in the database as they are typically used for the discovery of association rules (simple sets of atomic items). In recent years, however, due to the significance of appli-cation areas such as the analysis of chemical molecules or graph structures in the World Wide Web, there has been an increased interest in algorithms that can perform frequent pattern discovery in databases of structured objects such as trees or arbitrary graphs .

While the frequent pattern mining problem for trees can be solved in incremental polynomial time (see [2] for an overview on frequent subtree mining), i.e., in time polyno-mial in the combined size of the input and the set of frequent tree patterns so far computed, the frequent pattern mining problem for graph structured databases in the general case cannot be solved in output polynomial time [10], i.e., in time polynomial in the combined size of the input and the set of all frequent patterns. Existing approaches to frequent pattern discovery for graphs have therefore resorted to var-ious heuristic strategies and restrictions of the search space (see, e.g., [4, 5, 11, 20]), but have not identified a practically relevant tractable graph class beyond trees.

In this paper, we define the class of so called tenuous outerplanar graphs , which is the class of graphs that can be embedded in the plane in such a way that all of its vertices lie on the outer boundary, i.e. can be reached from the outside without crossing any edges, and which have a fixed limit on the number of inside diagonal edges. This class of graphs is a strict generalization of trees, and is motivated by the kinds of graphs actually found in practical applications. In fact, in one of the popular graph mining data sets, the NCI data set 1 , 94.3% of all elements are tenuous outerplanar graphs. We develop an algorithm for enumerating frequent tenuous outerplanar graph patterns, and prove that this algorithm is guaranteed to work in incremental polynomial time.
Our approach is based on a canonical string representation of outerplanar graphs which may be of interest in itself, and further algorithmic components for mining frequent bicon-nected outerplanar graphs and candidate generation in an Apriori style algorithm. To map a pattern to graphs in the database, we define a special notion of block and bridge pre-serving (BBP) subgraph isomorphism, which is motivated by application and complexity considerations, and show that it is decidable in polynomial time for outerplanar graphs. We note that for trees, which form a special class of outerplanar http://cactus.nci.nih.gov/ graphs, BBP subgraph isomorphism is equivalent to subtree isomorphism. Thus, BBP subgraph isomorphism generalizes subtree isomorphism to graphs, but is at the same time more specific than subgraph isomorphism. Since in many appli-cations, subgraph isomorphism is a non-adequate matching operator (e.g., when pattern matching is required to preserve certain type of fragments in molecules), by considering BBP subgraph isomorphism we take a first step towards study-ing the frequent graph mining problem w.r.t. non-standard matching operators as well. Beside complexity results, we also present empirical results which show that the favorable theoretical properties of the algorithm and pattern class also translate into efficient practical performance.

The paper is organized as follows. In Section 2, we first introduce the necessary definitions as the basis for our pa-per. In Section 3, we define the class of tenuous outerplanar graphs and the notion of subgraph isomorphism used in this paper, arriving at a definition of our frequent pattern mining problem. Section 4 is the main part of the paper, and de-scribes in detail our algorithm for mining tenuous outerpla-nar graphs. Section 5 contains our experimental evaluation on the standard benchmark data set from NCI. Section 6 concludes and discusses some open problems. Due to space limitations, proofs are only sketched or even omitted in this short version.
In this section we recall the most important definitions and notions related to graphs (see, e.g., [8] for more details).
Graphs An undirected graph is a pair ( V, E ), where V =  X  is a finite set of vertices and E  X  X  e  X  V : | e | =2 } is a set of edges . If, in addition, parallel edges (i.e., multiple edges connecting the same pair of vertices) and loops (i.e., edges joining a vertex to itself) are also allowed, we speak of undirected multigraphs .A labeled undirected graph is a quadruple ( V, E,  X  , X  ), where ( V, E ) is an undirected graph,  X  =  X  is a finite set of labels associated with some total order, and  X  : V  X  E  X   X  is a function assigning a label to each element of V  X  E . Unless otherwise stated, in this paper by graphs we always mean labeled undirected graphs and denote the set of vertices, the set of edges, and the labeling function of a graph G by V ( G ), E ( G ), and  X  respectively. Let G and G be graphs. G is a subgraph of G ,if V ( G )  X  V ( G ), E ( G )  X  E ( G ), and  X  G ( x )=  X  for every x  X  V ( G )  X  E ( G ). For a vertex v  X  V ( G ), N ( v ) denotes the set of vertices of G connected by an edge with v ,and N [ v ]istheset N ( v )  X  X  v } .

Trees In this paper, unless otherwise stated, by trees we mean labeled free trees (i.e., unrooted and unordered labeled trees). For a tree T and vertices r, v  X  V ( T ), T r denotes the rooted tree obtained from T by choosing r to be its root, C r ( v ) denotes the set of children of v in T r ,and f denotes the parent of v in T r if v = r ;otherwise f r ( v ) is undefined. We denote by T r v, 0 the largest subtree of T rooted at v ,and T r v, 1 denotes the tree obtained from T by removing T r v , 0 for every v  X  C r ( f r ( v )) \{ v T 1 is defined iff f r ( v ) is defined.

Blocks and Bridges Agraph G is connected if there is a path between any pair of its vertices; it is biconnected if for any two vertices u and v of G , there is a simple cycle containing u and v .A block (or biconnected component )ofa graph is a maximal subgraph that is biconnected. Edges not belonging to blocks are called bridges . The definitions imply that the blocks of a graph are pairwise edge disjoint and that the set of bridges forms a forest. For the set of blocks and the set of trees of the forest formed by the bridges of a graph G it holds that their cardinalities are bounded by | V ( G ) they can be enumerated in time O ( | V ( G ) | + | E ( G )
Isomorphism and Subgraph Isomorphism Let G 1 and G 2 be graphs. G 1 and G 2 are isomorphic , denoted G 1 G 2 ,ifthereisa bijection  X  : V ( G 1 )  X  V ( G 2 ) such that (i) { u, v } X  E ( G 1 )iff {  X  ( u ) , X  ( v ) } X  E ( G 2 ), (ii)  X   X 
G 2 (  X  ( u )), (iii) and if { u, v } X  E ( G 1 )then  X  G 1  X 
G 2 ( {  X  ( u ) , X  ( v ) } ) hold for every u, v  X  V ( G 1 per, two graphs are considered to be the same if they are isomorphic. G 1 is subgraph isomorphic to G 2 if G 1 is iso-morphic to a subgraph of G 2 . Deciding whether a graph is subgraph isomorphic to another graph is NP-complete, as it generalizes e.g. the Hamiltonian path problem.

Analogously to the list homomorphism problem defined in [6], we introduce the list subgraph isomorphism problem defined as follows: Given graphs G and H ,andsets L u  X  V ( G ) for every u  X  V ( H ), decide whether there exists a subgraph isomorphism  X  from H to G such that  X  ( u )  X  L u for every u  X  V ( H ). We denote by that there is a list subgraph isomorphism  X  from H to G satisfying  X  ( u )  X  L u for every u  X  V ( H ). Notice that the list subgraph isomorphism problem is a generalization of the ordinary subgraph isomorphism where L u = V ( G ) for every u  X  V ( H ). If L u = V ( G ) for some particular vertex u ,we will sometimes remove the pair u, L u from the set below the arrow in the above notation.

Planar Graphs Informally, a graph is planar if it can be drawn in the plane in such a way that no two edges inter-sect except at a vertex in common. To give a topologically rigorous definition of planar graphs, we need some auxiliary notions. A simple curve is the image of an injective con-tinuous function  X  :[0 , 1]  X  2 ; its endpoints are  X  (0) and  X  (1). Notice that by definition, simple curves are non self-intersecting. Let G be a graph. An embedding of G in the plane is a function s mapping each vertex of G toadistinct point of the plane and each edge { u, v } of G to a simple curve of the plane connecting s ( u )and s ( v ). If, in addition, it holds that any two distinct curves representing edges do not intersect except possibly at their endpoints then s is a planar embedding of G . A graph is planar iff it has a planar embedding.

Let G be a planar graph and s be some planar embedding of G . Removing from the plane all points and curves cor-responding to the vertices and edges of G , respectively, we obtain a set of connected pieces of the plane, called faces . Since the number of vertices of G is finite, exactly one of the faces, called the outer face , is unbounded. For G and s ,one can construct an undirected multigraph G  X  , called the dual graph of G , as follows: G  X  has a distinct vertex for each face, and for every edge e of G we connect the two vertices rep-resenting the faces having the boundary simple curve s ( e ) in common. The weak dual graph of G is the multigraph obtained from G  X  by removing the vertex representing the outer face and each edge containing this vertex.

Outerplanar Graphs An outerplanar graph is a planar graph which can be embedded in the plane in such a way that all of its vertices lie on the boundary of the outer face. Throughout this work we consider connected outerplanar graphs and denote the set of connected outerplanar graphs over an alphabet  X  by O  X  . Clearly, trees are outerplanar and hence, a graph is outerplanar iff each of its blocks is outerplanar [8]. Furthermore, as the blocks of a graph can be computed in linear time [19] and outerplanarity of a block can be decided also in linear time [13, 15] 2 ,onecandecide in linear time whether a graph is outerplanar.

A biconnected outerplanar graph G with n vertices con-tainsatmost2 n  X  3 edges and has a unique Hamiltonian cycle which bounds the outer face of a planar embedding of G [8]. This unique Hamiltonian cycle can be computed efficiently (see, e.g., [13]). Thus, G can be considered as an n -polygon with at most n  X  3 non-crossing diagonals. It also holds that the weak dual graph of G is always a tree with at most n  X  2 vertices corresponding to the interior faces of G  X  X  planar embedding. This property implies the following bound for the number of cycles of G .Duetospace limitation, we omit the proof of the next proposition.
Proposition 1. Let G be a biconnected outerplanar graph with d diagonals. Then G has at most 2 d +1 cycles.
Given outerplanar graphs G and H , deciding whether H is subgraph isomorphic to G is an NP-complete problem. This follows from the fact that outerplanar graphs general-ize forests and deciding whether a forest is subgraph isomor-phic to a tree is an NP-complete problem [7]. The following stronger negative result is shown in [18].

Theorem 2. Deciding whether a connected outerplanar graph H is subgraph isomorphic to a biconnected outerplanar graph G is NP-complete.
 If, however, H is also biconnected, the following positive result holds [13]. 3
Theorem 3. The problem whether a biconnected outer-planar graph H is subgraph isomorphic to a biconnected out-erplanar graph G can be decided in time Finally we cite another positive result from [14] on subgraph isomorphism for the special case of trees.

Theorem 4. The problem whether a tree H is subgraph isomorphic to a tree G can be decided in time The subtree isomorphism problem can be solved in fact in time O of simplicity, in Section 4.4 we will generalize the algorithm in [14] to outerplanar graphs by noting that the complexity of our algorithm can also be improved using the idea given in [17] for trees.
In this section we define the frequent subgraph mining problem for a practically relevant class of outerplanar graphs
We note that both outerplanarity testing algorithms in [13, 15] must be extended by an additional step checking condi-tion (iii) of Theorem 2 in [15], as otherwise a class of non-outerplanar graphs will be misclassified by both algorithms.
Although this positive result has been shown for unlabeled graphs, the algorithm in [18] can be generalized to labeled graphs as well. with respect to a matching operator that preserves the pat-tern graph X  X  bridge and block structure. We start the prob-lem description with the definition of the graph class to be mined.

Tenuous Outerplanar Graphs Let d  X  0besomein-teger. A d -tenuous outerplanar graph G is an outerplanar graph such that each block of G has at most d diagonals. Foranalphabet X andinteger d  X  0, O d  X  denotes the set of connected d -tenuous outerplanar graphs labeled by the elements of  X .

The main contribution of this work is an algorithm min-ing d -tenuous outerplanar graphs. This problem is moti-vated by the observation that d -tenuous outerplanar graphs form a practically relevant graph class e.g. in computational chemistry. Consider for example the NCI dataset which is one of the largest chemical graph databases used as a benchmark domain by the data mining community. Out of the 250251 pharmacological molecules in this dataset, 236180 (i.e., 94.3%) com pounds have an outerplanar molecu-lar graph. Furthermore, among the outerplanar compounds, there is no molecular graph having a block with more than 11 diagonals. In fact, there is only one compound containing a block with 11 diagonals; 236083 (i.e., 99. 99%) compounds among the outerplanar graphs have at most 5 diagonals per block.

BBP Subgraph Isomorphism We continue our prob-lem definition by introducing a matching operator between outerplanar graphs. Let G, H  X  X  d  X  for some d  X  0. A bridge and block preserving (BBP) subgraph isomorphism from H to G , denoted H BBP G , is a subgraph isomor-phism from H to G mapping (i) the set of bridges of H to the set of bridges of G and (ii) different blocks of H to different blocks of G . Notice that for trees, which are special outer-planar graphs (i.e., block-free), BBP subgraph isomorphism is equivalent to the ordinary subtree isomorphism. Thus, BBP subgraph isomorphism can be considered as a general-ization of subtree isomorphism to outerplanar graphs which is more specific than ordinary subgraph isomorphism.
Besides complexity reasons raised by Theorem 2, the use of BBP subgraph isomorphism as matching operator is mo-tivated by recent results in chemoinformatics which indicate that more powerful predictors can be obtained by consider-ing matching operators that map certain fragments of the pattern molecule to certain fragments of the target molecule. One natural step towards this direction is to require that only ring structures (i.e., blocks) can be mapped to ring structures and that edge disjoint ring structures are mapped to edge disjoint ring structures.

The FTOSM Problem Using the above notions, we define the frequent d -tenuous outerplanar subgraph mining problem (FTOSM) as follows: Given (i) an alphabet  X , (ii) a finite set D X  X  d  X  of transactions for some integer d  X  and (iii) an integer threshold t&gt; 0, enumerate the set of all connected d -tenuous outerplanar graphs in O d  X  that match at least t graphs in D w.r.t. BBP subgraph isomorphism, i.e., the set where  X  t ( D ,H )isthe frequency property defined by By definition, F t  X  ,d ( D ) does not contain isomorphic graphs. Furthermore, it is closed downwards w.r.t. BBP subgraph isomorphism, i.e., G 1  X  X  t  X  ,d ( D ) whenever G 2  X  X  t  X  and G 1 BBP G 2 .Given D and t , we call a graph H satis-fying (2) t -frequent .

The parameters of the FTOSM problem are the cardinal-ity of the transaction dataset (i.e., |D| ) and the size of the largest graph in D (i.e., max {| V ( G ) | : G  X  X } ). Since d is usually small, it is assumed to be a constant .Notethat the cardinality of F t  X  ,d ( D ) can be exponential in the above parameters of D . Clearly, in such cases it is impossible to enumerate F t  X  ,d ( D ) in time polynomial in the parameters of D . We therefore ask whether the FTOSM problem can be solved in incremental polynomial time (see, e.g., [12]), that is, whether there exists an enumeration algorithm listing the first k elements of F t  X  ,d ( D ) in time polynomial in the com-bined size of D and the set of these k elements for every k =1 ,..., |F t  X  ,d ( D ) | . Notice that the FTOSM problem gen-eralizes the frequent itemset mining problem solved by the Apriori algorithm [1] in incremental polynomial time.
We note that in the literature (see, e.g., [12]) one usually considers also the notion of output polynomial time (or poly-nomial total time ) complexity for enumeration algorithms. Algorithms belonging to this more liberal class are required to enumerate a set S in the combined size of the input and the entire set S . This implies that, in contrast to incremen-tal polynomial time, an output polynomial time algorithm may have in worst-case a delay time exponential in the size of the input before printing the k th element for some k  X  Although several algorithms mining frequent connected sub-graphs from datasets of arbitrary graphs w.r.t. subgraph isomorphism have demonstrated their performance empiri-cally, we note that this general problem cannot be solved in output polynomial time, unless P = NP [10].

On the other hand, the frequent graph mining problem is solvable in incremental polynomial time when the graphs in the dataset are restricted to forests and the patterns to trees. This follows e.g. from the results given in [2]. Since tenuous outerplanar graphs form a practically relevant graph class that naturally generalizes trees, by considering the FTOSM problem we take a first step towards going beyond trees in frequent graph mining.
In this section we present an Apriori-like [1] algorithm, that solves the FTOSM problem in incremental polynomial time. The main steps of the algorithm are sketched in Al-gorithm 1. It takes as input a set D X  X  d  X  of d -tenuous outerplanar graphs and a frequency threshold t  X  0, and computes iteratively the set of t -frequent k -patterns from the set of t -frequent ( k  X  1)-patterns, where a k -pattern is a graph G  X  X  d  X  such that the sum of the number of blocks of G and the number of vertices of G not belonging to any block is k .

In step 1 of the algorithm, we first compute the set of t -frequent 1-patterns, that is, the set of t -frequent graphs consisting of either a single vertex or a single block. The first set, denoted by F v in step 1, can be computed in linear time. The second set, denoted F b , can be computed in time polynomial in the parameters of D ; an efficient Apriori-based algorithm for this problem is presented in Section 4.2.
In step 2 of the algorithm, we compute the set of t -frequent 2-patterns, i.e., the set of graphs in O d  X  consisting of either (1) a single edge or (2) two blocks having a common vertex or (3) a block and a bridge edge having a common vertex. Algorithm 1 FrequentOuterplanarGraphs Require: D X  X  d  X  for some alphabet  X  and integer d  X  0, Ensure: F t  X  ,d ( D ) defined in Eq. (1) 1: L 1 = F v  X  X  b ,where 2: L 2 = F e  X  X  bb  X  X  be ,where 3: k =2 4: while L k =  X  do 5: k = k +1 6: C k = GenerateCandidates ( L k  X  1 ) 7: L k = { H  X  X  k : X  t ( D ,H ) } 8: endwhile We denote the corresponding three sets in step 2 by F e , F bb ,and F be , respectively. In the definitions of F bb and G 1 G 2 denotes the set of graphs that can be obtained from the union of G 1 and G 2 by contracting 4 avertexfrom G 1 with a vertex from G 2 that have the same label. Clearly, G 1 G 2  X  X  d  X  for every G 1 ,G 2  X  X  d  X  .Theset F e of t -frequent edges can be computed in linear time. Since the cardinalities of both F bb and F be are polynomial in the pa-rameters of D , and BBP subgraph isomorphism between outerplanar graphs can be decided in polynomial time by the result of Section 4.4 below, it follows that both F bb F be and hence, the set L 2 of t -frequent 2-patterns can be computed in time polynomial in the parameters of D .
In the loop 4 X 8, we compute the set of t -frequent k -patterns for k  X  3 in a way similar to the Apriori algorithm [1]. The crucial steps of the loop are the generation of candidate k -patterns from the set of t -frequent ( k  X  1)-patterns (step 6) and the decision of t -frequency of the candidate patterns (step 7). In Sections 4.3 and 4.4 below we describe these steps in detail.

Putting together the results given in Theorems 8  X  10 stated in Sections 4.2  X  4.4, respectively, we can formulate the main result of this paper:
Theorem 5. Algorithm 1 is correct and solves the FTOSM problem in incremental polynomial time.

Before going into the technical details in Sections 4.2  X  4.4, in the next section we first describe a transformation and a canonical string representation of outerplanar graphs that will be used in different steps of the mining algorithm.
One time consuming step of mining frequent d -tenuous outerplanar graphs is to test whether a particular graph
The contraction of the vertices u and v of a graph G is the graph obtained from G by introducing a new vertex w , connecting w with every vertex in N ( u )  X  N ( v ), and removing u and v ,aswellastheedgesadjacenttothem. H  X  X  d  X  belongs to some subset S of O d  X  . To apply some ad-vanced data structure (e.g., hash tables, B-trees, etc.) that allows fast search in large subsets of O d  X  , we need to de-fine a total order on O d  X  . Similarly to many other frequent graph mining algorithms, we solve this problem by assigning a canonical string to each element of O  X  such that (i) two graphs have the same canonical string iff they are isomor-phic and (ii) for every G  X  X   X  , the canonical string of G can be computed in time polynomial in | V ( G ) | . Using some canonical string representation satisfying the above proper-ties, a total order on O  X  and thus, on O d  X  as well, can be defined by some total order (e.g. lexicographic) on the set of strings assigned to the elements of O  X  . Furthermore, prop-erty (i) allows one to decide isomorphism between two out-erplanar graphs by comparing their canonical strings. Al-though isomorphism can be decided efficiently even for pla-nar graphs [9], the canonical string representation for out-erplanar graphs described in this section may be of some interest in itself.

We first define a transformation on outerplanar graphs by means of contraction of blocks into new vertices. More pre-cisely, for a graph G  X  X   X  ,let e G denote the graph over the alphabet  X   X  X  # } derived from G by the following transfor-mation: For each block B in G , (i) introduce a new vertex v
B and label it by #, (ii) remove each edge belonging to B , and (iii) for every vertex v of B , connect v with v B by an edge labeled by #, if v isadjacenttoabridgeortoanother block of G ;otherwiseremove v . In the following proposition we state some basic properties of e G .

Proposition 6. Let G  X  X   X  .Then (i) | V ( e G ) | =1 iff | V ( G ) | =1 or G is biconnected, (ii) for every e  X  E ( e G ) , at most one vertex of e is labeled (iii) e G is a free tree.

Proof sketch. The proof of (i) and (ii) is trivial. To see (iii), suppose that e G has a cycle C .Then C must contain avertex v labeled by #. But this implies that the bicon-nected subgraph of G corresponding to v is not maximal contradicting the definition of e G .
 Since e G is a tree, we call it the block and bridge tree (BB-tree) of G .

For a graph G  X  X   X  and v  X  V ( e G ), let  X  ( v )denotethe subgraph of G corresponding to v , i.e., it denotes the block of G represented by v if  X  G ( v ) = #; otherwise it is the subgraph of G consisting of the single vertex corresponding to v .

Using the above notions and notations, we define the canonical representation of G by means of e G . By (iii) of Proposition 6, e G is a free tree. We utilize this property and generalize the depth-first canonical representation for free trees to outerplanar graphs (see [2] for an overview on canonical string representations for trees). Given some dis-tinguished vertex r  X  V ( e G ), we assign recursively a string  X  ( v )  X  ( X   X  N  X  X  $ , # , @ } )  X  to every vertex v of e G define a string encoding of G w.r.t. r by the string  X  r ( r ) associated with r . To define  X  r ( v )foravertex v  X  V ( we distinguish two cases: (i) Suppose  X  e G ( v ) = #. Then we define  X  r ( v )by (ii) Suppose  X  e G ( v )=#. Then  X  ( v )mustbeablockof Given G and r  X  V ( e G ), the strings assigned to the vertices of e G r can be computed efficiently by traversing e G in postorder.
Using the above definition of  X  r , the canonical string rep-resentation of an outerplanar graph can be defined by the center-based canonical string representation of free trees (see, e.g., [2]). A center of a free tree is a vertex minimizing the maximum distance to any other vertex in the tree. Clearly, a tree has at most two centers. Consider first the case when e G has one center, say r . Then we define the canonical string representation of G by Otherwise, when e G has two centers, say r 1 and r 2 ,wecon-sider the trees e G 1 and e G 2 obtained from e G by removing the edge connecting r 1 and r 2 , and define  X  ( G )by where l is the label of the edge connecting r 1 and r 2 ,and G and G 2 are the subgraphs of G corresponding to e G 1 and respectively. For  X  ( G ), the following result can be shown:
We assume some total order on the set of symbols and define the total order  X  on strings by the lexicographic order. Algorithm 2 FrequentBiconnectedGraphs Require: D X  X  d  X  for some alphabet  X  and integer d  X  0, Ensure: F b defined in step 1 of Algorithm 1 1: let L 0  X  X  0  X  be the set of t -frequent cycles in D 2: for k =1 to d do 3: let C k  X  X  k  X  \O k  X  1  X  be the set of biconnected graphs 4: L k = { H  X  X  k : X  t ( D ,H ) } 5: endfor 6: return
Theorem 7. Let G  X  X   X  with n vertices. Then  X  ( G ) is a canonical string representation of G and it can be computed in time O
In this section we present Algorithm 2 that computes the set F b of t -frequent d -tenuous biconnected graphs used in step 1 of Algorithm 1. Since d is assumed to be constant, Algorithm 2 runs in time polynomial in the parameters of D .

In step 1 of Algorithm 2, we first compute the set L 0 of t -frequent cycles as follows: We list the cycles of G for every G  X  X  and count their frequencies. Proposition 1 in Sec-tion 2 implies that the number of cycles of a d -tenuous out-erplanar graph G is bounded by O ( | V ( G ) | )if d is assumed to be constant. Furthermore, from [16, 19] it follows that the cycles of a graph can be listed with linear delay. Since isomorphism between cycles can be decided efficiently, these results together imply that L 0 can be computed in time polynomial in the parameters of D . As a cycle may be com-pared to many other cycles, to decide isomorphism, we use the canonical string representation described in Section 4.1.
In loop 2 X 5 of Algorithm 2, we compute the sets of t -frequent biconnected graphs containing k diagonals for every k =1 ,...,d . In particular, in step 3 we compute the set C k of candidate biconnected graphs H  X  X  k  X  satisfying the following conditions: H has exactly k diagonals and the removal of any diagonal from H , denoted by in step 3, results in a t -frequent biconnected graph.
 For k = 1 in particular, C 1 can be computed as follows:
For k&gt; 1, we compute C k by the following algorithm: For Algorithm 3 GenerateCandidates Require: set L k  X  1 of frequent k  X  1-patterns for some k&gt; 2 Ensure: set C k of candidate k -patterns 1: C k =  X  2: forall G 1 ,G 2  X  X  k  X  1 do 3: forall g 1  X  Leaf( G 1 )and g 2  X  Leaf( G 2 ) do 4: if G 1 g 1 G 2 g 2 then 5: forall g 1  X  Leaf( G 1 g 1 ) do 6: if g 2 is attachable to g 1 consistently with G 2 then 7: attach g 2 in G 1 to g 1 consistently with G 2 and 8: if g 1 ,g 2 have the top two string encodings in C , 9: then add C to C k 10: endfor 11: endfor 12: endfor 13: return C k One can show that the method described above is complete, i.e., for every k =1 ,...,d , C k contains the set of t -frequent biconnected graphs in O k  X  \O k  X  1  X  .

Finally, in order to compute the set of t -frequent bicon-nected graphs from the C k  X  X  (step 4), we have to decide the existence of BBP subgraph isomorphisms from bicon-nected outerplanar graphs to outerplanar graphs. For this case, BBP subgraph isomorphism is equivalent to subgraph isomorphism because the pattern graph consists of a single block (and no bridge), and blocks are mapped to blocks by any subgraph isomorphism. Since the blocks of a graph can be computed in linear time [19], it is therefore sufficient to consider the efficiency of subgraph isomorphism between bi-connected outerplanar graphs. Theorem 11 in Section 4.4 below deals with a more general case implying that this problem can be solved in cubic time.

Putting the above results together, one can show the fol-lowing theorem. (We omit the proof in this short version.)
Theorem 8. Algorithm 2 is correct and computes the set of t -frequent d -tenuous biconnected outerplanar graphs in time polynomial in the parameters of D .
In step 6 of Algorithm 1, we generate the set of candidate k -patterns. In this section we give Algorithm 3, a generaliza-tion of the candidate generation algorithm for free trees de-scribed in [3], that computes the set of candidate k -patterns from the set of frequent ( k  X  1)-patterns. (Recall that a k -pattern is a graph such that the sum of the number of its blocks and the number of its vertices not belonging to any block is k .) Applying the candidate generation principle of the Apriori algorithm [1], each candidate is obtained by join-ing two frequent ( k  X  1)-patterns that have an isomorphic ( k  X  2)-pattern core.

In the outer loop 2 X 12 of the algorithm, we consider each possible pair G 1 ,G 2 of frequent ( k  X  1)-patterns. For com-pleteness, we have to allow G 1 and G 2 to be the same. In loop 3 X 11, we consider each pair g 1 and g 2 of leaf subgraphs of G 1 and G 2 , respectively. By a leaf subgraph of a k -pattern H for k  X  2 we mean the graph  X  ( v ) for some leaf v of the BB-tree e H , i.e., a leaf subgraph is either a vertex of H not belonging to a block and adjacent to exactly one other ver-tex or it is a block which has exactly one common vertex with a bridge or with another block. If G 1 and G 2 are the same graphs then, for completeness, we consider also the case when g 1 and g 2 are isomorphic leaf subgraphs. From G 1 and G 2 ,weremove g 1 and g 2 , respectively, denoted this operation by in the algorithm, and check whether the obtained graphs G 1 and G 2 are isomorphic (step 4). The removal of a biconnected component means the deletion of each of its edges and vertices except the distinguished vertex which is adjacent to a bridge or to another block.
If G 1 and G 2 are isomorphic then we consider every leaf subgraph g 1 of G 1 (loop 5 X 10) and check whether g 2 can be attached to g 1 in G 1 consistently with G 2 (step 6). More precisely, let g 2 be a block or a vertex not belonging to a block in G 2 such that g 2 is hanging from g 2 , i.e., the only edge adjacent to g 2 is adjacent also to g 2 .Wesaythat g can be attached to g 1 in G 1 consistently with G 2 if g 1 isomorphic to g 2 . Thus, if the condition in step 6 holds then we attach g 2 to g 1 consistently with G 2 and denote the obtained graph by C (step 7).

Notice that C can be generated in many different ways, depending on the particular choice of g 1 and g 2 . To reduce the amount of unnecessary computation, we consider only those pairs which are among the top leaf subgraphs of C , i.e., which have the top two string encodings w.r.t. a center of  X  C . By definition, a vertex representing a leaf subgraph of C is always a leaf in  X  C . If this condition holds then we add C to the set of candidates in step 9 if for every leaf subgraph g of C ,the( k  X  1)-pattern obtained from C by removing g is frequent (see step 8).
 We omit the proof of the following statement.

Theorem 9. Let C k be the output of Algorithm 3 and L k the set of frequent k -patterns for any k&gt; 2 .Then L k the cardinality of C k is polynomial in the cardinality of and C k can be computed in time polynomial in the size of L
Algorithms 1 and 2 contain the steps of deciding whether a candidate pattern H  X  X  d  X  is t -frequent, i.e., whether it is BBP subgraph isomorphic to at least t graphs in D . While subgraph isomorphism between outerplanar graphs is NP-complete even for very restricted cases (see Theorem 2), Theorem 10, the main result of this section, shows that this constrained subgraph isomorphism can be decided ef-ficiently between outerplanar graphs if the pattern graph H is connected. This result holds for arbitrary outerplanar graphs, i.e., we do not assume any bound on the number of diagonals in a block. The connectivity is necessary, as otherwise the problem would generalize the NP-complete subforest isomorphism problem [7]. We note that the re-sult of Theorem 10 generalizes the positive result on subtree isomorphism given in Theorem 4 and may thus be of some interest in itself. For the rest of this section, we fix an alpha-bet  X  and a distinguished symbol, say #, satisfying #  X   X . Theorem 10. For every G  X  X   X  and connected graph H  X  X   X  , H BBP G can be decided in polynomial time.
To sketch the proof of Theorem 10, we need some further notations and assertions. We start with a theorem general-izing Theorem 3, the positive result from [13] on ordinary subgraph isomorphism between unlabeled biconnected out-erplanar graphs to list subgraph isomorphism between la-beled biconnected outerplanar graphs. Due to space limita-tion, we only sketch the proof.

Theorem 11. Let G, H  X  X   X  be biconnected outerplanar graphs and L u  X  V ( G ) for every u  X  V ( H ) .Thenonecan decide whether there exists a list subgraph isomorphism in time O
Proof sketch. The proof is similar to that of Theo-rem 3 (see [13] for the proof). It is based on constructing first a directed graph D with a distinguished source and target vertex s and t , respectively, and then determining whether there is a directed path from s to t .Theedgesin D represent whether there is a subgraph isomorphism from a certain subgraph of the pattern graph containing an edge { u i ,u i +1 } to a certain subgraph of the text graph containing an edge { v i ,v i +1 } such that u i and u i +1 are mapped to v and v i +1 , respectively. This constraint can be generalized to list subgraph isomorphism between labeled biconnected outerplanar graphs without changing the asymptotic time complexity of the special case considered in Theorem 3.
We need some further notations. Let G  X  X   X  and T v e G be a subtree of e G rooted at v .Then G [ T v e G ] denotes the subgraph of G induced by more, for a graph H  X  X   X  and subtree T u e H of e H rooted to V (  X  ( v )). The proof of the following proposition is imme-diate from the definitions.

Proposition 12. Let G, H  X  X   X  and r  X  V ( H BBP G iff there are u  X  V ( e H ) and v  X  V ( e G ) such that Applying the above proposition, H BBP G can be decided as follows: Select an arbitrary vertex r  X  V ( e G ) and compute for every u  X  V ( e H )andforevery v  X  V ( e G ), whether (3) holds. Below we show that for given u and v ,(3)canbe computed by deciding first for every w  X  N [ u ], whether holds, where  X  is the complement of Kronecker delta (i.e.,  X  u,w =0if u = w ; otherwise it is 1). For v  X  V ( u  X  V ( e H ), we define the set
S ( v, u )= { w  X  N [ u ]: H [ e H w u,  X  u,w ]  X  BBP G [ Notice that by definition, e H u = e H u u, 0 and hence, by Propo-sition 12 and Eq. (3) we have that Depending on the label of u , we distinguish two cases and characterize (4) accordingly by one of the following two lem-mas.

Lemma 13. Let G, H  X  X   X  .Let r, v  X  V ( and w  X  N [ u ] .If  X  e H ( u )=# then Proof sketch. Since  X  e H ( u )=#,  X  ( u ) is biconnected. By (ii) of Proposition 6, for every u  X  N ( u )wehavethat  X 
H ( u ) =#andhence,  X  ( u )mustbeavertexbelongingto the block  X  ( u ). The proof can be shown by considering the cases u = w and u = w separately.

Lemma 14. Let the graphs G, H and vertices r, v, u ,and w be defined as in Lemma 13. If  X  e H ( u ) =# then
Proof sketch. Theproofcanbeshownbyconsidering the following cases separately: (1) u = w ,(2) u = w and  X  H ( w ) = #, and (3) u = w and  X  e H ( w ) =#.

Proof sketch of Theorem 10. Using the above notions and statements, we are now ready to sketch a bottom-up algorithm deciding H BBP G for some G, H  X  X   X  in poly-nomial time. Due to space limitation, we do not provide the pseudo code of the algorithm. Notice that it is sufficient to consider the case when G and H satisfy Indeed, if | V ( e H ) | = 1 then, by (i) of Proposition 6, H con-sists of either a single vertex or a block. Deciding BBP subgraph isomorphism is obvious for the first case; for the second case the problem can be considered as a special in-stance of the list subgraph isomorphism problem between biconnected outerplanar graphs and thus, Theorem 11 can be applied. Furthermore, if | V ( e H ) | &gt; | V ( e G ) no BBP subgraph isomorphism from H to G .

Given G, H  X  X   X  satisfying (5), we select an arbitrary vertex r  X  V ( e G ), traverse e G r in postorder, and, for each visited vertex v  X  V ( e G r ), compute the set S ( v, u ) for every u  X  V ( e H ) in the following way:
Suppose v is a leaf of e G r . Then (5) implies that r = v and Suppose v is an internal vertex of e G r . Then let N ( u )and Thus, S ( v, u ) can be computed in polynomial time for every u  X  V ( e H )and v  X  V ( e G r ) completing the proof sketch of Theorem 10.
In our experiments, we used the NCI dataset consist-ing of 250251 chemical compo unds. For our w ork, it was important to recognize that 236180 (i.e., 94.3%) of these compounds have outerplanar molecular graph. Thus, out-erplanar graphs form a practically relevant class of graphs. Among the outerplanar molecular graphs, there are 21963 trees (i.e., 8.8% of the outerplanar subset). In the exper-iments, we have removed the non-outerplanar graphs from the dataset. Altogether, the outerplanar molecules contain 423378 blocks, with up to 11 diagonals per block. However, 236083 (i.e., 99.99%) of the outerplanar molecular graphs have at most 5 diagonals per block. This empirical observa-tion validates our approach to assume the number of diago-nals to be constant.

The database contains a wide variety of structures, and a low relative frequency threshold is needed to mine a sig-nificant number of patterns. E.g. though there are 15426 pairwise non-isomorphic cycles in the database, only a few of them are really frequent; the only one above 10% is the benzene ring with frequency 66%.

Matching blocks is more expensive than matching bridges, but the number of bridges is much larger. In all our exper-iments, roughly half of the time is used for each of the two types of matching.
Our results are given in Table 1. It shows the number of candidate (#C) and frequent (#FP) k -patterns discovered for k =1 ,..., 25, as well as the runtime (T) in seconds for the computation and evaluation of the candidates using the frequency thresholds 10%, 5%, 2% and 1%. As expected, the number and the size of the discovered patterns is much larger when the frequency threshold is lower. Even though the embeddings of ( k  X  1) patterns are computed (again) in level k , the time needed to complete one level does not nec-essarily increase with k . It is interesting to note that after the number of frequent k -patterns drops a bit when k gets larger then 8, this number again increases when k exceeds 12, and the number of frequent patterns gets close to the number of candidate patterns. This is because this partic-ular dataset contains large subsets with molecules sharing large biconnected structures (such as the HIV active sub-stance dataset). The time needed for candidate generation is always smaller than 1% of the total time. The time needed for coverage testing per pattern depends on how much struc-ture these patterns share. If the number of patterns is large, the time needed per pattern is usually lower.

One can make several conclusions. First, our algorithm can mine an expressive class of molecular patterns from a rel-atively large database. Although the presented experiments
We note that it is sufficient to compute a maximum bipar-tite matching M in B 0 because we can compute the size of a maximum matching in B 1 ,...,B s from M in time O ( st ) (see [17] for the details). happened entirely in memory (taking about 600Mb), our approach does not depend on storing intermediate results in memory between the different passes over the database. This means that we could also perform this algorithm with a database on disk. In our application e.g., this would bring an overhead of about 15 seconds per pass over the database.
Second, we can conclude that the complexity of the cover-age testing scales well as the pattern size grows, as predicted by theory. In this application, due to the implementation exploiting shared structure among patterns, the time needed for evaluation per pattern does not even depend in a clear systematic way on the pattern size.
We have presented an incremental-polynomial time algo-rithm for the enumeration of the frequent patterns from a set of d -tenuous outerplanar graphs w.r.t. BBP subgraph isomorphism. To the best of our knowledge, no fragment of the frequent subgraph mining problem beyond trees has so far been identified, for which the problem can be solved in incremental polynomial time. Our result is not only theo-retical, but also practical; most of the graphs in the NCI dataset consisting of mor e than 250000 comp ounds are 5-tenuous outerplanar graphs.

Our algorithm is based on a canonical string represen-tation of outerplanar graphs which may be of interest in itself, and further algorithmic components for mining fre-quent biconnected outerplanar graphs and candidate genera-tion in an Apriori style algorithm. Motivated by application and complexity considerations, we introduced a special kind of subgraph isomorphism which generalizes subtree isomor-phism but is at the same time more specific than ordinary subgraph isomorphism, and gave a proof sketch that it is de-cidable in polynomial time for outerplanar graphs. We pre-sented also empirical results with a large dataset indicating the effective practical performance of our algorithm. We be-lieve that the identification of tractable practical fragments of the frequent subgraph mining problem is an important challenge for the data mining community.

It is natural to ask whether the positive result of this paper can be generalized to arbitrary outerplanar graphs. Notice that our algorithm exploits the constant bound on the number of diagonals only in the computation of the set F b of frequent biconnected graphs in step 1 of Algorithm 1. Therefore, to generalize the re sult of this paper to arbitrary outerplanar graphs, we first consider the following special problem: Given a finite set D X  X   X  of biconnected out-erplanar graphs and a non-negative integer t , compute the set of t -frequent patterns in D w.r.t. BBP subgraph iso-morphism. Notice that this problem definition implicitly requires t -frequent patterns to be biconnected because by definition, there is no BBP subgraph isomorphism from a non-biconnected graph to a biconnected outerplanar graph. We do not know whether this special problem can be solved in incremental or at least in output polynomial time. Tam  X  as Horv  X  ath and Stefan Wrobel were partially supported by the DFG project (WR 40/2-2) Hybride Methoden und Systemarchitekturen f  X  ur heterogene Informationsr  X  aume .Jan Ramon is a post-doctoral fellow of the Fund for Scientific Research (FWO) of Flanders.
 [1] R. Agrawal, H. Mannila, R. Srikant, H. Toivonen, and [2] Y.Chi,R.R.Muntz,S.Nijssen,andJ.N.Kok.
 [3] Y. Chi, Y. Yang, and R. R. Muntz. Canonical forms [4] D. J. Cook and L. B. Holder. Substructure discovery [5] M. Deshpande, M. Kuramochi, N. Wale, and [6] T. Feder and P. Hell. List homomorphisms to reflexive [7] M. R. Garey and D. S. Johnson. Computers and [8] F. Harary. Graph Theory . Addison X  X esley, Reading, [9] J. E. Hopcroft and J. K. Wong. Linear time algorithm [10] T. Horv  X  ath, B. Bringmann, and L. D. Raedt. Frequent [11] A. Inokuchi, T. Washio, and H. Motoda. Complete [12] D. S. Johnson, M. Yannakakis, and C. H.
 [13] A. Lingas. Subgraph isomorphism for biconnected [14] D. W. Matula. Subtree isomorphism in O ( n 5 2 ). Annals [15] S. L. Mitchell. Linear algorithms to recognize [16] R. C. Read and R. E. Tarjan. Bounds on backtrack [17] R. Shamir and D. Tsur. Faster subtree isomorphism. [18] M. M. Sys lo. The subgraph isomorphism problem for [19] R. E. Tarjan. Depth first search and linear graph [20] X. Yan and J. Han. gspan: Graph-based substructure
