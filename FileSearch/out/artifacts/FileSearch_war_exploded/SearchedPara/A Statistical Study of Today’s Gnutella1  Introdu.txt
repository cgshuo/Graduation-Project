 The prosperity of P2P applications such as Napster[1], Gnutella[2], KaZaA[3][4] and BitTorrent[5][6] has created a flurry of recent research activity into this field. Today, there are data packets of various P2P applications transmitted in the Internet. However, compared with other popular systems, Gnutella has a public protocol specification and attracts much attentions from P2P researchers. Furthermore, Gnutella upgraded its protocol to improve performance. Many new phenomena could emerge during this change. Unfortunately, few previous work has performed a full-scale study on today X  X  Gnutella. In addition, the reliability of some wildly used assumptions are not carefully studied or proved yet. Previous research[7] stated that P2P traffic does not obey power laws, although power law distribution is widely used for simulating. This result could also lead people to doubt whether other assumptions like Poisson arrival of queries[8] would fit the real P2P environment.

In this paper, we try to address these questions by performing a detailed measurement study on today X  X  Gnutella. By word  X  X oday X , we mean our work is different from others which focus on previous version of Gnutella -Gnutella 0.4. With the data collected by our measureme nts, we seek to present a statistical study on some significant aspects of Gnutella, including queries, shared files, peer roles, etc. By applying some innovative crawling approaches, we gain a re-markable performance improvement. For example, our crawler can theoretically collect all the submitted queues in the entire Gnutella network, which has never been accomplished before. To ensure the a ccuracy of our statistical data, a large populiation of peers are studied.
 Several novel findings could be learnt from our measurement results. First, Gnutella query arrival doesn X  X  obey Poisson distribution. Although Two Pois-son distribution has a better fitness, it still implies that new models should be proposed to fit the actual distribution of Gnutella query arrival. Secondly, the types of shared files of a single peer are very limited. More than one third of peers only share files of one type, and it is also true when MP3 files are left out. Thirdly, peer role selection in Gnutella doesn X  X  perform well, which tremendously affects the performance of the entire system. Our statistical data could also be a foundation for future research on P2P modeling and simulation.

The remainder of this paper is organi zed as follows: Section 2 summarizes the related work. In section 3, we describe t he design of crawler and measurement methodology. Section 4 provides data analysis, which contains the discussion of several phenomena. Conclusions and future work are given in Section 5. Previous measurements and analysis work could be divided into two types ac-cording to their approaches to collect statistical information.
 One is crawling the P2P network by on e or several P2P crawlers. Adar and Hubermann[9] measured the Gnutella system and found a significant fraction of  X  X ree riders X , which download files from other peers but don X  X  share any files. Sariou and et al. [10] measured Napster and Gnutella peers in order to charac-terize peers by network topology, bottl eneck bandwidth, network latency and shared files, etc. Markatos X  X  work[11] also belongs to this kind. Different from the above work, he utilized crawlers located at different continents and showed that traffic patterns are very dynamic eve n over several time scales. However, all the above measurements were performed before 2003 and focused on Gnutella protocol 0.4 which has been replaced by protocol 0.6 now. Some of their results might not provide up-to-date information of Gnutella network.

There are also some measurements performed under Gnutella 0.6. Klemm X  X  work[12] characterized the query behavior in Gnutella 0.6. Another similar work introduced by Sai and Christopher[13] also presented a study on Gnutella 0.6. They studied the duplication, length and content of Gnutella queries. Unfor-tunately, although their work gave an investigation on Gnutella queries, many important characteristics of the new Gnutella such as file distribution and peer roles were not studied in their papers.

The other kind of measurement research[ 7] focuses on analyzing NetFlow[14] information provided by ISP X  X  routers. The representative work of this kind was presented by Sen and Wang[7], which studied several P2P systems based on NetFlow data analysis. Their work provided a global view of P2P traffic, which may be hard to achieve by the first approach. However, this kind of measurements only observed flow level statistic and might not well exhibit other characteristics such as peer behavior and peer shared files.

Our measurements is based on the first approach. Unlike previous ones, our measurements are large-s cale, because we use multiple crawlers with different roles and trace millions of peers. Since our crawlers are designed for Gnutella 0.6, they are able to provide most up-to-date data. Thus we can avoid most of the problems mentioned above. Neverthe less, all these related work provides us experience and fundamental data. 3.1 Gnutella Protocol As [10] introduced, without centralized servers which areusedinNapster[1][15] and OpenNap[16][17], Gnutella peers construct an overlay network by maintain-ing point-to-point connections with a set of neighbors. Gnutella protocol specifies four message types, ping , pong , query and queryhit messages. Ping and pong messages are used to maintain overlay connectivity as well as discovering other peers. To locate a file, a peer initiates a controlled flooding by sending a query message to all of its neighbors(i.e. direct ly connected peers), which then forward the message to their neighbors. If a peer has one or more files that match the query, it responds with a queryhit message.

In order to improve the scalability of Gnutella network, Gnutella upgraded its protocol from 0.4 to 0.6, which is the predominant protocol in Gnutella now. In the new protocol, peers are divided int o ultrapeers and leafpeers[12]. Peers with a high bandwidth Internet connection and high processing power run in ultrapeer mode. On the contrary, less p owerful peers run in leaf mode. Leafpeer keeps only a small number of connectio ns open to ultrapeers. Only ultrapeer could connect with each other. Ultrapeer handles all the routing and forwarding work for leafpeers. This has an effect of making the Gnutella network scale, by reducing the number of peers on the network involved in message handling and routing, as well as reducing the actual traffic among them. Query message is forwarded to all connected ultrapeers, but is only forwarded to the leafpeers that have a high probability of responding. This is achieved by sending Query Routing T able (QRT)[2] from leafpeer to its connected ultrapeer. This QRT contains the hashed value of the names of files shared by the leafpeer and it plays a part as  X  X loom Filter X  X 18]. When an ultrapeer has to decide whether it should forward the query to a certain leafpeer, it would look the query words through this QRT of the leafpeer. Thus u ltrapeer could filter queries and only forward those to the leafpeer s most likely to have a match. 3.2 Crawling Gnutella 0.6 Crawler Design. Faced with the fact that Gnutella has a large population of concurrent users, we find acquiring information of the entire Gnutella network, even a large part of it, is very difficult with limited resources. To better the crawling performance, we divide the craw ling task into several aspects. For each one, a group of specialized crawlers are built to fulfill the task. We will introduce the design of these crawlers in the rest of this section.
 Peer Discovery. In order to obtain data from a large set of Gnutella peers, crawler has to discover as many peers a s possible. Our crawler find peers in three ways. The first is through Gnutella hand shaking protocol which could be used to exchange a few IP addresses of p eers. However, this discovery method seems to be relatively slow compared with some vendors X  hand shaking protocols like LimeWire X  X  hand shaking. The other two are sending HTTP request to GWebCache[2] for a list of ultrapeer a ddresses and using Crawler Ping[2]. By comparing these approaches, we find vendor X  X  hand shaking performs the best. Peer status probing. Peer status data is essentia l for the characterizing of peers. After discovery crawler records t he address of a newly found peer, probing crawler will handle the status probing work. In our measurements, peer status includes latency, bandwidth, shared file number, shared file size, and daily online time etc. All these parameters are obtained through Gnutella defined messages, except for the first two, which are gathered by TCP/IP layer measurements. Previous work[10] provided a detaile d introduction to these measurements. Query logging. Compared with peer status probing, query logging collects data in a passive way. To perform a large-scale query collecting, we also designed a special approach by utilizing the new Gnutella protocol. Early work introduced by Markatos[11] performed some studies on a relatively small set of queries in Gnutella 0.4 where efficiently collecting queries with little duplications is difficult. In Gnutella 0.6, only ultrapeer would forward a query with the help of Query Routing Table which contains information of files shared by its leaf peer. At first glance, this fact would limit the received queries of leafpeer crawler to those relevant with its shared files. Recent work such as Klemm[12] presented try to avoid this limitation by setting up ultrapeer crawlers and collecting queries submitted by its leafpeers for a relatively long period. However, this approach can only record a very limited sub set of the o verall queries. In our measurements we run a number of leafpeer crawlers acting as query listeners. To break the limitation brought by QRT, crawler sends a query routing table to make its connected ultrapeers believe that the c rawler has any file that others may ask for. This is done by sending a fake query routing table contains all the possible compositions of letters and figures with a length of three. Once ultrapeer receives such query routing tables, it will forwar d any query it received to our crawlers. Thus, our crawler could theoretically r ecord all the query messages of the entire Gnutella network, which has never been achieved before.

Fig. 1 shows the topology of our crawling system. Peer Filter in this figure takes charge of checking whether a newly found peer has already been discovered, as well as other filtering tasks. Seed selector provides most valuable peers for crawlers. E.g. if peer A is found to have lo ts of connected leafpeers, it will prefer to send A X  X  address to the query logging crawler than the address of other peers. All crawlers are implemented with J ava based on the open source client -LimeWire client, except for a script used for measuring latency and bandwidth of peers. We use 8 IBM PCs for the purpose of crawling and 2 servers installed with SQL Server for data storage. Our crawlers totally captured nine days of peer activities in three different periods and each period lasts about three days, all from Tuesday to Thursday in the first three weeks of April, 2005. During the experiment, we discovered 3,595,203 Gnutella peers. About 19% of the overall population, more precisely, 683,334 p eers are running under ultrapeer mode. 4.1 Gnutella Query Arrival Our statistical data contains 70,876,100 query messages collected from 218,842 ultrapeers in about 40 hours. In the following discussion, we try to characterize the distribution of query arrival in Gnutella network with the above data. Pre-vious work introduced by Pandurangan[19] studied the problem of maintaining N-node P2P network as nodes join and depart according to a Poisson process. In another study[8], poisson distribution is used to generate queries for simulating purpose. However, it is interesting to explore what kind of distribution Gnutella query arrival really follows. To avoid the impact of incidental phenomenon, our measurements collect query messages for warded by a large number of ultrapeers. The query arrival information we gathered actually records the query arrival of a great many leafpeers that c onnect to these ultrapeers. Thus we believe our data is capable of describing the real situation of query arrival in Gnutella network. We start at estimating how precisely Poisson model could fit the actual dis-tribution of query arrival. Using maximum likelihood estimation, we construct many instances of query arrival model with different time units in Poisson dis-tribution. We first divide the queries in time units and calculate the number of queries in each time unit. Then we can g et the frequencies of different query number appearance in time unit. Based on these frequencies, we can obtain a Poisson fitting using maximum likelihood estimation. From Fig. 2(a) and 2(b) where circles denote the observed frequency of certain received query number in different time units(15 minutes and 3 minutes) and the curve is the probabil-ity estimated by Poisson distribution, we can see poisson model doesn X  X  fit the actual distribution well.

Since there are two obvious crests of the frequency in the figures, we alter-nately use Two Poisson distribution to model query arrival. The Two Poisson model is a simple example of a Poisson mixture.
 As equation (1) shows, we use the method of moments[20] to fit the three pa-rameters of the Two Poisson model,  X  1 ,  X  2 and  X  . When time unit is set to 3 minutes, we find  X  =0 . 4037,  X  1 = 136 . 4097 and  X  2 =41 . 2252 can yield a much better fitness compared with Poisson distribution. Fig. 3(a) and 3(b) illustrate that Two Poisson distribution outperforms the Poisson distribution. We also use RMS(root mean square) errors calculated by equation (2) to make a comparison between these two models. As Table 1 shows, TU and ON are abbreviations for time unit and observation number respectively, Err is the calculated RMS errors and DR is the dropping rate on Err of Two Poisson against that of One Poisson. From this table, we can see Two Poisson model obviously has a b etter fitness than One Poisson model.
Why Two Poisson? One possible reason is that peer population is different in different regions, e.g. Asia has much less users than America. Users of these two regions usually don X  X  connect to the Gnutella network at the same time because they live in different time zones which could have a time difference of 14 hours. Thus peer population in different time periods, say 12 hours, could either roughly equal to peer population of Asia or that of America. This fact could further cause two mo st common frequencies of qu ery submitting, because query submitting rate is obviously proportional to peer population. To prove this hypothesis, we alternatively use keywords in queries to trace the change happens to Gnutella peer population. Fig. 4 shows the change of Gnutella query number in 24 hours of April 6th, 2005, where the dashed line stands for the number of Non-English queries such as Chinese and Japanese queries, the solid line denotes the number of English queries and the dash-dot line shows the the number of overall queries. The number of overall queries dropped significantly at around 19:00 CST, which indicates that lots of English speaking users get offline at this time. Right after that, the number of Non-English queries starts to grow and reaches its peak value at 21:00 CST. However, since Non-English speaking users are not the predominate population in Gnutella, the overall query number still keeps at a relatively low, but stable level. Thus Fig. 4 clearly shows different peer population between regions could ca use Two Poisson distribution of query arrival, because there are roughly two most common frequencies of query arrival.
However, Two Poisson still does not have a satisfying fitness against the actual query arrival distribution. Thus, more in-depth study of the query arrival model will be part of our future work. In addition, Poisson model may work well when query arrival is observed in a relatively short time (  X  6 h ) because the size of population is not likely to change significantly during this period. 4.2 Shared Files During the measurements we found lots of peers choose to refuse to respond with their shared file information. As a result, we totally gathered shared file information for 30,044,693 files from 514,562 Gnutella peers which is about 15% of the total discovered population. However, since these peers are randomly distributed among the population, our statistical data still can reflect the real distribution of shared files in Gnutella. Distinguished by file extensions, there are altogether 307 different file types in the data set. For the files that we collected, the total file size is about 122 TB and the size of files shared by Gnutella peers could be as large as 813 TB by a conservative estimation.

As few previous work has given the overall distribution of Gnutella shared files a thorough examination, we provide this distribution as a starting point. Fig. 5(a) is the distribution of Gnutella files with respect to the number of each type. It shows that audio files, or MP3 files more precisely, dominate the proportion of all the files. Fig. 5(b) is another distribution of Gnutella files, which considers the total file size of each type. We can see audio files and video files are about the same size, both occupied around 45% of the overall shared contents.
As far as we know, the distribution of shared files on a single peer hasn X  X  been carefully studied. However, information about this distribution is quite important for the study of peer behavior and search optimization. For the rest of this section, we try to answer the questions:  X  X oes peer tend to share files of various types, or just few types? X  by examining the distribution of file types on single peer. To perform this analysis, we use the entropy of shared file types on these individual peers as a tool to explore the purity of their shared files. This entropy is defined as follows: where n i is the numbers of file with type i and N is the overall file numbers on the observed peer. The benefit of using entropy is that we can examine shared file types and the number of files for each type at the same time. Moreover, entropy quantified the purity of peers X  sh ared files in a reaso nable way. E.g. if a peer shares various types of files while mo st of the files belong to one type, this peer can still be considered to have high purity of its shared files. As Fig. 6(a) shows, 142,019 peers out of the total 514,562 peers have a zero entropy regarding file types. This suggests that a large number of peers(41.3%) only share files of one type. Furthermore, it is obvious that most peers have small entropies(78.3% peers have entropies less than 1). However , since most files shared in Gnutella are MP3 files and many peers could only share MP3 files, the above results could be affected by this phenomenon. Thus we exclude MP3 files and analyze the entropy of file types again. As Fig. 6(b) shows, we can still find lots of peers(37.3%) share files of one type and the entropies of 62.6% peers are less than 1, although the corresponding proportions drop a little bit. According to this result, we believe peers are intended to share files with very limited types. Most peers have few dedicated interests and peers which randomly share files are rare. 4.3 Peer Role Selection One of the great changes from Gnutella 0.4 to 0.6 is that 0.6 protocol defines two different peer roles, ultrapeer and l eafpeer. Autonomou s selected ultrapeer devotes some of its bandwidth to forward query messages and plays an impor-tant part for the performance of the system. Although a sophisticated peer role selection algorithm should at least base on peer X  X  bandwidth and latency, we find that the result of clustering based on th ese two parameters does not match the actual peer role quite well. We randomly pick 1,000 peers, 176 ultrapeers and 824 leafpeers, from our measurements data since too many peers would make the figures unreadable and these peers are adequate to state our point. Note that the ultrapeer to leafpeer ratio is about 1:4, which is same as the ratio in the Gnutella network. As Fig. 7(a) illustrates, peers are clustered by K-Means algorithm into two classes. Circles represent peers have high bandwidth and low latency. dot points stand for peers that have poor Internet connections. Fig 7(b) shows the real role of these peers, where circles and dot points respectively de-note for ultrapeers and leafpeers. However, compared with Fig. 7(a), there are quite a few ultrapeers distribute in the low bandwidth and high latency region. Obviously, such peers are not suitable to be ultrapeers. To be precise, we find 20.45% ultrapeers in Fig. 7(b) are represented by dot points in Fig. 7(a), which means that they are not selected properly. In addition, we also find that only 55.70% ultrapeers have daily online time above the average. Notice that the performance of the Gnutella network largely depends on the performance of its  X  X ore X , a network constit uted by connected ultrapeer s, because this core is in charge of almost all the message routing and forwarding work. Thus the selection of the ultrapeer becomes ver y important for the prosperity of Gnutella. To bring an intuitive understanding of how bad poor role selection could influence system performance, we will examine the difference of system throughput between ideal and real role selection in the form of ov erall traffic volume of peers. We first find the poorly selected peers according to the clustering result. Then we estimate the total improvement on traffic volume wh en giving these peers the right roles. In particular, we calculate the traffic volume based on the following equation, where peer i belongs to the set of poorly selected peers we mentioned above. B i and D i are the corresponding bandwidth and daily online time of peer i .We find that even for 31 miss-selected ultrap eers in Fig. 7(b), the total daily traffic volume can have a boost of 3.23 GB if these peers are assigned to the right role. Notice that this is only a conservative e stimation, because w ell selected ultra-peers can also accommodate more leafpeers. It is actually part of our ongoing work to model the performance of Gnutella system.

There could be many reasons for the inaccu rate peer role select ion. Local infor-mation used for the selection could be misleading. The selection algorithm could be poorly implemented. However, we did find some popular Gnutella clients im-plement a relatively simple ultrapeer selection mechanism, e.g. LimeWire would permit a peer to run in ultra mode if it has a public IP address. In this paper we presented a measurement study performed on Gnutella 0.6. We collected parameters of different asp ects from TCP/IP layer to P2P overlay. Based on the results, we studied query and file distribution in Gnutella 0.6 and looked into the result of Gnutella peer role selection.

Several conclusions emerged from the results of our measurements. First, the as-sumption that query arrival follows Poisson distribution may not be true in Gnutella. Although more accurate models should be proposed, we found that Two Poisson could fit the query arrival much better than One poisson which is widely used in models and simulation. Second, the most files shared in Gnutella are MP3 files and more than one third of peers only share files of one type, it is also true when MP3 files are left out. Third, many ultrapeers in Gnutella are not well selected. We showed that this phenomenon could se riously lower system performance.
The statistical data provided by this paper is also useful for P2P modeling and simulating real and up to date P2P environment. As part of ongoing work, we are carrying out more detailed research on peer behavior and Gnutella query distribu-tion. We are also in the process of building file spreading models for Gnutella.
