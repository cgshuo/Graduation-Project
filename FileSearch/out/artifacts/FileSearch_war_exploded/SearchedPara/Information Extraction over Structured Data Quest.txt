 Question answering (QA) from a knowledge base (KB) has a long history within natural language processing, going back to the 1960s and 1970s, with systems such as Baseball (Green Jr et al., 1961) and Lunar (Woods, 1977). These systems were limited to closed-domains due to a lack of knowledge resources, computing power, and abil-ity to robustly understand natural language. With the recent growth in KBs such as DBPedia (Auer et al., 2007), Freebase (Bollacker et al., 2008) and Yago2 (Hoffart et al., 2011), it has be-come more practical to consider answering ques-tions across wider domains, with commercial sys-tems including Google Now , based on Google X  X  Knowledge Graph , and Facebook Graph Search , based on social network connections.
The AI community has tended to approach this problem with a focus on first understanding the in-tent of the question, via shallow or deep forms of semantic parsing (c.f.  X  3 for a discussion). Typ-ically questions are converted into some mean-ing representation (e.g., the lambda calculus), then mapped to database queries. Performance is thus bounded by the accuracy of the original seman-tic parsing, and the well-formedness of resultant
The Information Extraction (IE) community ap-proaches QA differently: first performing rela-tively coarse information retrieval as a way to triage the set of possible answer candidates, and only then attempting to perform deeper analysis.
Researchers in semantic parsing have recently explored QA over Freebase as a way of moving beyond closed domains such as GeoQuery (Tang and Mooney, 2001). While making semantic pars-ing more robust is a laudable goal, here we provide a more rigorous IE baseline against which those efforts should be compared: we show that  X  X radi-tional X  IE methodology can significantly outper-form prior state-of-the-art as reported in the se-mantic parsing literature, with a relative gain of 34% F 1 as compared to Berant et al. (2013). We will view a KB as an interlinked collection of  X  X opics X . When given a question about one or sev-eral topics, we can select a  X  X iew X  of the KB con-cerning only involved topics, then inspect every related node within a few hops of relations to the topic node in order to extract the answer. We call such a view a topic graph and assume answers can be found within the graph. We aim to maximally automate the answer extraction process, by mas-sively combining discriminative features for both the question and the topic graph. With a high per-formance learner we have found that a system with millions of features can be trained within hours, leading to intuitive, human interpretable features. For example, we learn that given a question con-cerning money , such as: what money is used in ukraine , the expected answer type is likely cur-rency . We formalize this approach in  X  4.

One challenge for natural language querying against a KB is the relative informality of queries as compared to the grammar of a KB. For exam-ple, for the question: who cheated on celebrity A , answers can be retrieved via the Freebase rela-tion celebrity.infidelity.participant , but the con-nection between the phrase cheated on and the formal KB relation is not explicit. To allevi-ate this problem, the best attempt so far is to map from ReVerb (Fader et al., 2011) predicate-argument triples to Freebase relation triples (Cai and Yates, 2013; Berant et al., 2013). Note that to boost precision, ReVerb has already pruned down less frequent or credible triples, yielding not as much coverage as its text source, ClueWeb . Here we instead directly mine relation mappings from ClueWeb and show that both direct relation mapping precision and indirect QA F 1 improve by a large margin. Details in  X  5.

Finally, we tested our system, jacana-freebase , 2 on a realistic dataset generously contributed by Berant et al. (2013), who collected thousands of commonly asked questions by crawling the Google Suggest service. Our method achieves state-of-the-art performance with F 1 at 42 . 0% , a 34% relative increase from the previous F 1 of 31 . 4% . QA from a KB faces two prominent challenges: model and data. The model challenge involves finding the best meaning representation for the question, converting it into a query and exe-cuting the query on the KB. Most work ap-proaches this via the bridge of various interme-diate representations, including combinatory cat-egorial grammar (Zettlemoyer and Collins, 2005, 2007, 2009; Kwiatkowski et al., 2010, 2011, 2013), synchronous context-free grammars (Wong and Mooney, 2007), dependency trees (Liang et al., 2011; Berant et al., 2013), string kernels (Kate and Mooney, 2006; Chen and Mooney, 2011), and tree transducers (Jones et al., 2012). These works successfully showed their effectiveness in QA, despite the fact that most of them require hand-labeled logic annotations. More recent re-search started to minimize this direct supervision by using latent meaning representations (Berant et al., 2013; Kwiatkowski et al., 2013) or distant su-pervision (Krishnamurthy and Mitchell, 2012).
We instead attack the problem of QA from a KB from an IE perspective: we learn directly the pat-tern of QA pairs, represented by the dependency parse of questions and the Freebase structure of answer candidates, without the use of intermedi-ate, general purpose meaning representations.
The data challenge is more formally framed as ontology or (textual) schema matching (Hobbs, 1985; Rahm and Bernstein, 2001; Euzenat and Shvaiko, 2007): matching structure of two on-tologies/databases or (in extension) mapping be-tween KB relations and NL text. In terms of the latter, Cai and Yates (2013) and Berant et al. (2013) applied pattern matching and relation inter-section between Freebase relations and predicate-argument triples from the ReVerb OpenIE sys-tem (Fader et al., 2011). Kwiatkowski et al. (2013) expanded their CCG lexicon with Wik-tionary word tags towards more domain indepen-dence. Fader et al. (2013) learned question para-phrases from aligning multiple questions with the same answers generated by WikiAnswers . The key factor to their success is to have a huge text source. Our work pushes the data challenge to the limit by mining directly from ClueWeb , a 5TB collection of web data.

Finally, the KB community has developed other means for QA without semantic parsing (Lopez et al., 2005; Frank et al., 2007; Unger et al., 2012; Yahya et al., 2012; Shekarpour et al., 2013). Most of these work executed SPARQL queries on in-terlinked data represented by RDF (Resource De-scription Framework) triples, or simply performed triple matching. Heuristics and manual templates were also commonly used (Chu-Carroll et al., 2012). We propose instead to learn discriminative features from the data with shallow question anal-ysis. The final system captures intuitive patterns of QA pairs automatically. Our model is inspired by an intuition on how ev-eryday people search for answers. If you asked someone: what is the name of justin bieber brother , 3 and gave them access to Freebase, that person might first determine that the question is about Justin Bieber (or his brother), go to Justin Bieber X  X  Freebase page, and search for his brother X  X  name. Unfortunately Freebase does not contain an exact relation called brother , but in-stead sibling . Thus further inference (i.e., brother  X  male sibling) has to be made. In the following we describe how we represent this process. 4.1 Question Graph In answering our example query a person might take into consideration multiple constraints. With regards to the question, we know we are looking for the name of a person based on the following:  X  the dependency relation nsubj(what, name) and prep of(name, brother) indicates that the  X  the dependency relation prep of(name, brother) indicates that the name is about a brother (but we do not know whether it is a person name yet);  X  the dependency relation nn(brother, bieber) and the facts that, (i) Bieber is a person and (ii) a person X  X  brother should also be a person, indi-cate that the name is about a person.
 This motivates the design of dependency-based features. We show one example in Figure 1(a), left side. The following linguistic information is of interest:  X  question word ( qword ), such as what/who/how  X  question focus ( qfocus ), a cue of expected an-swer types, such as name/money/time . We keep our analysis simple and do not use a ques-tion classifier, but simply extract the noun de-pendent of qword as qfocus.  X  question verb ( qverb ), such as is/play/take , ex-tracted from the main verb of the question.
Question verbs are also good hints of answer types. For instance, play is likely to be followed by an instrument, a movie or a sports team.  X  question topic ( qtopic ). The topic of the ques-tion helps us find relevant Freebase pages. We simply apply a named entity recognizer to find the question topic. Note that there can be more than one topic in the question.
 Then we convert the dependency parse into a more generic question graph, in the following steps: 1. if a node was tagged with a question feature, 2. (special case) if a qtopic node was tagged as 3. drop any leaf node that is a determiner, prepo-The converted graph is shown in Figure 1(a), right side. We call this a question feature graph , with every node and relation a potential feature for this question. Then features are extracted in the following form: with s the source and t the target node, for every edge e ( s, t ) in the graph, extract s , t , s | t and s | e | t as features. For the edge, prep of(qfocus=name, brother) , this would mean the following features: qfocus=name , brother , qfocus=name | brother , and qfocus=name | prep of | brother .

We show with examples why these features make sense later in  X  6 Table 6. Furthermore, the reason that we have kept some lexical features, such as brother , is that we hope to learn from training a high correlation between brother and some Freebase relations and properties (such as sibling and male ) if we do not possess an exter-nal resource to help us identify such a correlation. 4.2 Freebase Topic Graph Given a topic, we selectively roll out the Free-base graph by choosing those nodes within a few hops of relationship to the topic node , and form a topic graph . Besides incoming and/or outgo-ing relationships, nodes also have properties : a string that describes the attribute of a node, for instance, node type, gender or height (for a per-son). One major difference between relations and properties is that both arguments of a relation are nodes, while only one argument of a property is a node, the other a string. Arguments of relations are usually interconnected, e.g., London can be the place of birth for Justin Bieber , or capital of the UK . Arguments of properties are attributes that are only  X  X ttached X  to certain nodes and have no outgoing edges. Figure 1(b) shows an example.
Both relationship and property of a node are important to identifying the answer. They con-nect the nodes with the question and describe some unique characteristics. For instance, with-out the properties type:person and gender:male , cop justin bieber brother . we would not have known the node Jaxon Bieber represents a male person. These properties, along with the sibling relationship to the topic node, are important cues for answering the question. Thus for the Freebase graph, we use relations (with di-rections) and properties as features for each node.
Additionally, we have analyzed how Freebase relations map back to the question. Some of the mapping can be simply detected as paraphras-ing or lexical overlap. For example, the per-son.parents relationship helps answering ques-tions about parenthood. However, most Freebase relations are framed in a way that is not com-monly addressed in natural language questions. For instance, for common celebrity gossip ques-tions like who cheated on celebrity A , it is hard for a system to find the Freebase relation celebrity.infidelity.participant as the target rela-tion if it had not observed this pattern in training.
Thus assuming there is an alignment model that is able to tell how likely one relation maps to the original question, we add extra alignment-based features for the incoming and outgoing relation of each node. Specifically, for each relation rel in a topic graph, we compute P ( rel | question ) to rank the relations. Finally the ranking (e.g., top 1/2/5/10/100 and beyond) of each relation is used as features instead of a pure probability. We de-scribe such an alignment model in  X  5. 4.3 Feature Production We combine question features and Freebase fea-tures (per node) by doing a pairwise concatena-tion. In this way we hope to capture the associa-tion between question patterns and answer nodes. For instance, in a loglinear model setting, we ex-pect to learn a high feature weight for features like: qfocus=money | node type=currency and a very low weight for: qfocus=money | node type=person .

This combination greatly enlarges the total number of features, but owing to progress in large-scale machine learning such feature spaces are less of a concern than they once were (concrete num-bers in  X  6 Model Tuning). In this section we describe a  X  X ranslation X  table be-tween Freebase relations and NL words was built. 5.1 Formula The objective is to find the most likely rela-tion a question prompts. For instance, for the question who is the father of King George VI , the most likely relation we look for is peo-ple.person.parents . To put it more formally, given a question Q of a word vector w , we want to find out the relation R that maximizes the prob-ability P ( R | Q ) .

More interestingly, for the question who is the father of the Periodic Table , the ac-tual relation that encodes its original mean-ing is law.invention.inventor , rather than peo-ple.person.parents . This simple example points out that every part of the question could change what the question inquires eventually. Thus we need to count for each word w in Q . Due to the bias and incompleteness of any data source, we approximate the true probability of P with  X  P un-der our specific model. For the simplicity of com-putation, we assume conditional independence be-tween words and apply Naive Bayes: where  X  P ( R ) is the prior probability of a relation R and  X  P ( w | R ) is the conditional probability of word w given R .

It is possible that we do not observe a certain relation R when computing the above equation. In this case we back off to the  X  X ub-relations X : a relation R is a concatenation of a series of sub-relations R = r = r 1 .r 2 .r 3 . . . . . For instance, the sub-relations of people.person.parents are peo-ple , person , and parents . Again, we assume con-ditional independence between sub-relations and apply Naive Bayes:
One other reason that we estimated  X  P ( w | r ) and  X  P ( r ) for sub-relations is that Freebase relations share some com-mon structures in between them. For in-stance, both people.person.parents and fictional universe.fictional character.parents indicate the parent relationship but the latter is much less commonly annotated. We hope that the shared sub-relation, parents , can help better esti-mate for the less annotated. Note that the backoff model would have a much smaller value than the original, due to double multiplication practice we normalize it by the sub-relations size to keep it at the same scale with  X  P ( R | Q ) .
Finally, to estimate the prior and conditional probability, we need a massive data collection. 5.2 Steps webpages (5TB compressed in raw HTML ) in 10 languages by Carnegie Mellon University in 2009. FACC1, the Freebase Annotation of the ClueWeb Corpus version 1 (Gabrilovich et al., 2013), con-tains index and offset of Freebase entities within the English portion of ClueWeb. Out of all 500 million English documents, 340 million were au-tomatically annotated with at least one entity, with an average of 15 entity mentions per document. The precision and recall of annotation were esti-mated at 80  X  85% and 70  X  85% (Orr et al., 2013).
Given these two resources, for each binary Free-base relation, we can find a collection of sentences each of which contains both of its arguments, then simply learn how words in these sentences are as-sociated with this relation, i.e.,  X  P ( w | R ) and  X  P ( w | r ) . By counting how many times each rela-tion R was annotated, we can estimate  X  P ( R ) and  X  P ( r ) . The learning task can be framed in the fol-lowing short steps: 1. We split each HTML document by sentences 2. The extraction formed two parallel corpora, 3. The tricky part was to align these 1.2 billion 7.0% 0.7% 1.2% 0.4% 1.3% 89.5% Table 1: Percentage of answer relations (the in-coming relation connected to the answer node) with respect to how many sentences we learned this relation from in CluewebMapping. For in-stance, the first column says there are 7% of an-swer relations for which we cannot find a mapping (so we had to use the backoff probability estima-tion); the last column says there are 89.5% of an-swer relations that we were able to learn the map-ping between this relation and text based on more than 10 thousand relation-sentence pairs. The total number of answer relations is 7886. 4. Treating the aligned pairs as observation , the 5. From the co-occurrence matrix we computed
Hand-checking the learned probabilities shows both success, failure and some bias. For in-stance, for the film.actor.film relation (mapping from film names to actor names), the top words given by  X  P ( w | R ) are won , star , among , show . For the film.film.directed by relation, some im-portant stop words that could indicate this re-lation, such as by and with , rank directly after director and direct . However, due to signifi-cant popular interest in certain news categories, and the resultant catering by websites to those information desires, then for example we also learned a heavily correlated connection between Jennifer Aniston and celebrity.infidelity.victim , and between some other you-know-who names and celebrity.infidelity.participant .

We next formally evaluate how the learned map-ping help predict relations from words. 5.3 Evaluation Both ClueWeb and its Freebase annotation has a bias. Thus we were firstly interested in the cov-erage of mined relation mappings. As a com-parison, we used a dataset of relation mapping contributed by Berant et al. (2013) and Lin et al. (2012). The idea is very similar: they intersected Freebase relations with predicates in (arg1, predi-cate, arg2) triples extracted from ReVerb to learn the mapping between Freebase relations and triple predicates. Note the scale difference: although ReVerb was also extracted from ClueWeb09, there were only 15 million triples to intersect with the relations, while we had 1.2 billion alignment pairs. We call this dataset ReverbMapping and ours CluewebMapping .

The evaluation dataset, W EB Q UESTIONS , was also contributed by Berant et al. (2013). It con-tains 3778 training and 2032 test questions col-lected from the Google Suggest service. All ques-tions were annotated with answers from Freebase. Some questions have more than one answer, such as what to see near sedona arizona? .

We evaluated on the training set in two aspects: coverage and prediction performance. We define answer node as the node that is the answer and answer relation as the relation from the answer node to its direct parent. Then we computed how much and how well the answer relation was trig-gered by ReverbMapping and CluewebMapping.
 Thus for the question, who is the father of King George VI , we ask two questions: does the map-ping, 1. (coverage) contain the answer relation people.person.parents ? 2. (precision) predict the answer relation from the question?
Table 1 shows the coverage of CluewebMap-ping, which covers 93 . 0% of all answer rela-tions. Among them, we were able to learn the rule mapping using more than 10 thousand relation-sentence pairs for each of the 89 . 5% of all an-swer relations. In contrast, ReverbMapping covers 89 . 7% of the answer relations.

Next we evaluated the prediction performance, using the evaluation metrics of information re-trieval. For each question, we extracted all rela-tions in its corresponding topic graph, and ranked each relation with whether it is the answer re-lation. For instance, for the previous exam-ple question, we want to rank the relation peo-ple.person.parents as number 1. We com-puted standard MAP (Mean Average Precision) and MRR (Mean Reciprocal Rank), shown in Ta-ble 2(a). As a simple baseline,  X  X ord overlap X  counts the overlap between relations and the ques-tion. CluewebMapping ranks each relation by  X  P ( R | Q ) . ReverbMapping does the same, ex-cept that we took a uniform distribution on  X  P ( w | R ) and  X  P ( R ) since the contributed dataset did not include co-occurrence counts to estimate these CluewebMapping is only 12, indicating that half of all answer relations are ranked in the top 12.
Table 2(b) further shows the percentage of answer relations with respect to their rank-ing. CluewebMapping successfully ranked 19% of answer relations as top 1. A sample of these includes person.place of birth , loca-tion.containedby , country.currency used , reg-ular tv appearance.actor , etc. These percentage numbers are good clue for feature design: for in-stance, we may be confident in a relation if it is ranked top 5 or 10 by CluewebMapping.

To conclude, we found that CluewebMapping provides satisfying coverage on the 3778 training questions: only 7% were missing, despite the bi-ased nature of web data. Also, CluewebMapping gives reasonably good precision on its prediction, despite the noisy nature of web data. We move on to fully evaluate the final QA F 1 . We evaluate the final F 1 in this section. The sys-tem of comparison is that of Berant et al. (2013). Data We re-used W EB Q UESTIONS , a dataset collected by Berant et al. (2013). It contains 5810 questions crawled from the Google Suggest ser-vice, with answers annotated on Amazon Mechan-ical Turk. All questions contain at least one an-swer from Freebase. This dataset has been split by 65% / 35% into TRAIN -ALL and TEST . We further randomly divided TRAIN -ALL by 80% / 20% to a smaller TRAIN and development set DEV . Note that our DEV set is different from that of Berant et al. (2013), but the final result on TEST is di-rectly comparable. Results are reported in terms of macro F 1 with partial credit (following Berant et al. (2013)) if a predicted answer list does not have a perfect match with all gold answers, as a Table 2: Evaluation on answer relation ranking prediction on 3778 training questions. lot of questions in W EB Q UESTIONS contain more than one answer.
 Search With an Information Retrieval (IR) front-end, we need to locate the exact Freebase topic node a question is about. For this pur-pose we used the Freebase Search API (Freebase, to this API, which returned a ranked list of rele-vant topics. We also evaluated how well the search API served the IR purpose. W EB Q UESTIONS not only has answers annotated, but also which Free-base topic nodes the answers come from. Thus we evaluated the ranking of retrieval with the gold standard annotation on TRAIN -ALL , shown in Ta-ble 3. The top 2 results of the Search API con-tain gold standard topics for more than 90% of the questions and the top 10 results contain more than 95% . We took this as a  X  X ood enough X  IR front-end and used it on TEST .
 Once a topic is obtained we query the Freebase Topic API (Freebase, 2013b) to retrieve all rele-vant information, resulting in a topic graph. The API returns almost identical information as dis-played via a web browser to a user viewing this topic. Given that turkers annotated answers based on the topic page via a browser, this supports the assumption that the same answer would be located in the topic graph, which is then passed to the QA engine for feature extraction and classification. Table 3: Evaluation on the Freebase Search API: how many questions X  top n retrieved results con-tain the gold standard topic. Total number of ques-tions is 3778 (size of TRAIN -ALL ). There were only 5 questions with no retrieved results. Table 4: F 1 on DEV with different feature settings. Model Tuning We treat QA on Freebase as a binary classification task: for each node in the topic graph, we extract features and judge whether it is the answer node. Every question was pro-cessed by the Stanford CoreNLP suite with the caseless model. Then the question features (  X  4.1) and node features (  X  4.2) were combined (  X  4.3) for each node. The learning problem is chal-lenging: for about 3000 questions in TRAIN , there are 3 million nodes ( 1000 nodes per topic graph), and 7 million feature types. We em-ployed a high-performance machine learning tool, Classias (Okazaki, 2009). Training usually took around 4 hours. We experimented with vari-ous discriminative learners on DEV , including lo-gistic regression, perceptron and SVM, and found L1 regularized logistic regression to give the best result. The L1 regularization encourages sparse features by driving feature weights towards zero, which was ideal for the over-generated feature space. After training, we had around 30 thousand features with non-zero weights, a 200 fold reduc-tion from the original features.

Also, we did an ablation test on DEV about how additional features on the mapping between Freebase relations and the original questions help, with three feature settings: 1)  X  X asic X  features in-clude feature productions read off from the fea-ture graph (Figure 1); 2)  X + word overlap X  adds additional features on whether sub-relations have overlap with the question; and 3)  X + CluewebMap-ping X  adds the ranking of relation prediction given the question according to CluewebMapping. Ta-ble 4 shows that the additional CluewebMapping Table 5: F 1 on TEST with Gold Retrieval and Freebase Search API as the IR front end. Berant et al. (2013) actually reported accuracy on this dataset. However, since their system predicted an-swers for almost every question (p.c.), it is roughly that precision=recall= F 1 =accuracy for them. features improved overall F 1 by 5% , a 13% rel-ative improvement: a remarkable gain given that the model already learned a strong correlation be-tween question types and answer types (explained more in discussion and Table 6 later).

Finally, the ratio of positive vs. negative exam-ples affect final F 1 : the more positive examples, the lower the precision and the higher the recall. Under the original setting, this ratio was about 1 : 275 . This produced precision around 60% and recall around 35% (c.f. Table 4). To optimize for F 1 , we down-sampled the negative examples to 20% , i.e., a new ratio of 1 : 55 . This boosted the final F 1 on DEV to 48% . We report the final TEST result under this down-sampled training. In prac-tice the precision/recall balance can be adjusted by the positive/negative ratio.
 Test Results Table 5 gives the final F 1 on TEST .  X  X old Retrieval X  always ranked the correct topic node top 1, a perfect IR front-end assumption. In a more realistic scenario, we had already evaluated that the Freebase Search API returned the correct topic node 95% of the time in its top 10 results (c.f. Table 3), thus we also tested on the top 10 results returned by the Search API. To keep things sim-ple, we did not perform answer voting, but sim-ply extracted answers from the first (ranked by the Search API) topic node with predicted answer(s) found. The final F 1 of 42 . 0% gives a relative im-provement over previous best result (Berant et al., 2013) of 31 . 4% by one third.

One question of interest is whether our system, aided by the massive web data, can be fairly com-pared to the semantic parsing approaches (note that Berant et al. (2013) also used ClueWeb in-directly through ReVerb ). Thus we took out the word overlapping and CluewebMapping based features, and the new F 1 on TEST was 36 . 9% .
The other question of interest is that whether our system has acquired some level of  X  X achine wgt. feature Table 6: A sample of the top 50 most positive/neg-ative features. Features are production between question and node features (c.f. Figure 1). intelligence X : how much does it know what the question inquires? We discuss it below through feature and error analysis.
 Discussion The combination between questions and Freebase nodes captures some real gist of QA pattern typing, shown in Table 6 with sampled fea-tures and weights. Our system learned, for in-stance, when the question asks for geographic ad-jacency information ( qverb=border ), the correct answer relation to look for is location.adjoins . Detailed comparison with the output from Berant et al. (2013) is a work in progress and will be pre-sented in a follow-up report. We proposed an automatic method for Question Answering from structured data source (Free-base). Our approach associates question features with answer patterns described by Freebase and has achieved state-of-the-art results on a balanced and realistic QA corpus. To compensate for the problem of domain mismatch or overfitting, we exploited ClueWeb, mined mappings between KB relations and natural language text, and showed that it helped both relation prediction and an-swer extraction. Our method employs relatively lightweight machinery but has good performance. We hope that this result establishes a new baseline against which semantic parsing researchers can measure their progress towards deeper language understanding and answering of human questions. Acknowledgments We thank the Allen Institute for Artificial Intelligence for funding this work. We are also grateful to Jonathan Berant, Tom Kwiatkowski, Qingqing Cai, Adam Lopez, Chris Callison-Burch and Peter Clark for helpful discus-sion and to the reviewers for insightful comments.
