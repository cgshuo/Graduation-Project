 Hierarchical phrase-based statistical machine translation (HPBSMT) (Chiang, 2007) is a popu-lar alternative to phrase-based SMT (PBSMT), in which synchronous context free grammar (SCFG) is used as the basis of the machine translation model. With HPBSMT, a restricted form of an SCFG, i.e., Hiero grammar, is usually used and is especially suited for linguistically divergent lan-guage pairs, such as Japanese and English. How-ever, a rule table, i.e., a synchronous grammar, may be composed of spuriously many rules with potential errors especially when it was automati-cally acquired from a parallel corpus. As a result, the increase in the rule table incurs a large amount of time for decoding and may result in lower trans-lation quality.

Pruning a rule table either on the basis of signif-icance test (Johnson et al., 2007) or entropy (Ling et al., 2012; Zens et al., 2012) used in PBSMT can be easily applied for HPBSMT. However, these methods still rely on a heuristically determined threshold parameter. Bayesian SCFG methods (Blunsom et al., 2009) solve the spurious rule extraction problem by directly inducing a com-pact rule table from a parallel corpus on the basis of a non-parametric Bayesian model without any heuristics. Training for Bayesian SCFG models infers a derivation tree for each training instance, which demands the time complexity of O ( j f j 3 j e j 3 ) when we use dynamic programming SCFG bi-parsing (Wu, 1997). Gibbs sampling without bi-parsing (Levenberg et al., 2012) can avoid this problem, though the induced derivation trees may strongly depend on initial derivation trees. Even though we may learn a statistically sound model on the basis of non-parametric Bayesian methods, current approaches for an SCFG still rely on ex-haustive heuristic rule extraction from the word-alignment decided by derivation trees since the learned models cannot handle rules and phrases of various granularities.

We propose a model on the basis of the previ-ous work on the non-parametric Inversion Trans-duction Grammar (ITG) model (Neubig et al., 2011) wherein phrases of various granularities are learned in a hierarchical back-off process. We extend it by incorporating arbitrary Hiero rules when backing off to smaller spans. For efficient inference, we use a fast two-step bi-parsing ap-proach (Xiao et al., 2012) which basically runs in a time complexity of O ( j f j 3 ) . Slice sampling for an SCFG (Blunsom and Cohn, 2010) is used for effi-ciently sampling a derivation tree from a reduced space of possible derivations.

Our model achieved higher or at least com-parable BLEU scores against the previous Bayesian SCFG model on language pairs; German/French/Spanish-English in the News-Commentary corpus, and Japanese-English in the NTCIR10 corpus. When compared against heuristically extracted model through the GIZA++ pipeline, our model achieved comparable score on a full size Germany-English language pair in Eu-roparl v7 corpus with significantly less grammar size. Various criteria have been proposed to prune a phrase table without decreasing translation qual-ity, e.g., Fisher X  X  exact test (Johnson et al., 2007) or relative entropy (Ling et al., 2012; Zens et al., 2012). Although those methods are easily ap-plied for pruning a rule table, they heavily rely on the heuristically determined threshold parame-ter to trade off the translation quality and decoding speed of an MT system.

Previously, EM-algorithm based generative models were exploited for generating compact phrase and rule tables. Joint phrase alignment model (Marcu and Wong, 2002) can directly express many-to-many word aligments without heuristic phrase extraction. DeNero et al. (2006) proposed IBM Model 3 based many-to-many alignment model. Rule arithmetic method (Cme-jrek and Zhou, 2010) can generate SCFG rules by combining other rule pairs through an inside-outside algorithm. However, those previous at-tempts were restricted in that the rules and phrases were induced by heuristic combination.

Bayesian SCFG models can induce a com-pact model by incorporating sophisticated non-parametric Bayesian models for an SCFG, such as a dirichlet process (DeNero et al., 2008; Blunsom et al., 2009; Chung et al., 2014) or Pitman-Yor process (Levenberg et al., 2012; Peng and Gildea, 2014). A model is learned by sampling derivation trees in a parallel corpus and by accumulating the rules in the sampled trees into the model. Due to the O ( j f j 3 j e j 3 ) time complexity for bi-parsing a bilingual sentence, previous studies relied on bi-parsing at the initialization step, and conducted Gibbs sampling by local operators (Blunsom et al., 2009; Levenberg et al., 2012) or sampling on fixed word alignments (Chung et al., 2014; Peng and Gildea, 2014). As a result, the inference can easily result in local optimum, wherein induced deriva-tion trees may strongly depend on the initial trees.
Xiao et al. (2012) proposed a two-step approach for bi-parsing a bilingual sentence in O ( j f j 3 ) in the context of inducing SCFG rules discriminatively; however, their approach violates the detailed bal-ance due to its heuristic k-best pruning. Blun-som and Cohn (2010) proposed a slice sampling for an SCFG, in the same manner as that for Infi-nite Hiden Markov Model (iHMM) (Van Gael et al., 2008), which can efficiently prune a space of possible derivations on the basis of dynamic pro-gramming. Although slice sampling can prune spans without violating the detailed balance, its time complexity of O ( j f j 3 j e j 3 ) is still impractical for a large-scale experiment. We efficiently car-ried out large-scale experiments on the basis of the two-step bi-parsing of Xiao et al. combined with slice sampling of Blunsom and Cohn.

After learning a Bayesian model, it is not di-rectly used in a decoder since it is composed of only minimum rules without considering phrases of various granularities. As a consequence, it is a standard practice to obtain word alignment from derivation trees and to extract SCFG rules heuris-tically from the word-aligned data (Cohn and Haf-fari, 2013). The work by Neubig et al. (2011) was the first attempt to directly use the learned model on the basis of a Bayesian ITG in which phrases of many granularities were encoded in the model by employing a hierarchical back-off procedure. Our work is strongly motivated by their work, but greatly differs in that our model can incorporate many arbitrary Hiero rules, not limited to ITG-style binary branching rules. We use Hiero grammar (Chiang, 2007), an in-stance of an SCFG, which is defined as a context-free grammar for two languages. Let denote a set of terminal symbols in the source language,  X  a set of terminal symbols in the target language, Figure 1: Derivation tree generated from Bayesian SCFG model V a set of non-terminal symbols, S a start symbol and R a set of rewrite rules. An SCFG is denoted as a tuple of  X  ;  X  ; V; S; R  X  . Each rewrite rule in R is represented as X !  X  =  X  in which is a string of non-terminals and source side termi-nals ( V [ ) and is a string of non-terminals and target side terminals ( V [  X ) . An example derivation in an SCFG for the sentence pair  X  ni-hongo wo eigo ni honyaku suru koto wa muzukasii  X  / Japanese is difficult to translate into English . X  is represented as follows: S  X  X 1 eigo X 2 muzukasii  X  / X 1 difficult X 2 English .
 X 1  X  X 3 wo / X 3 is X 2  X  X 4 honyaku suru X 5 wa / X 4 translate X 5 X 3  X  nihongo / Japanese X 4  X  ni / into X 5  X  koto / to .

A Hiero grammar has additional constraints over a general SCFG; the number of terminal sym-bols in each rule for both source and target sides is limited to 5. Each rule may contain at most two non-terminal symbols; adjacent non-terminal symbols in the source side are prohibited. For de-tails, refer to (Chiang, 2007). 3.1 Bayesian SCFG Models Previous Bayesian SCFG Models, for instance a model proposed by Levenberg et al. (2012), are based on the Pitman-Yor process (Pitman and Yor, 1997) and learn SCFG rules by sampling a deriva-tion tree for each bilingual sentence. Figure 1 shows an example derivation tree for our running example sentence pair under the model. The gen-erative process is represented as follows: where G X is a derivation tree and P rule ( d r ; r ; G r 0 ) is a Pitman-Yor process (Pitman and Yor, 1997), which is a generalization of a Dirichlet process parametrized by a discount parameter d r , a strength parameter r and a base measure G r Yor process obeys the power-law distribution with the discount parameter, which is very common in standard NLP tasks.

The probability that a rule r k is drawn from a nese restaurant process which is decomposed into two probability distributions. If r k already exists in a table, we draw r k with probability where c k is the number of customers of r k , n r is the number of all customers and  X  r of r k  X  X  tables. On the other hand, if r k is a new rule, we draw r k with probability where j  X  r j is the number of tables in the model. 3.2 Hierarchical Back-off Model In the previous models, the generative process is represented as a rewrite process starting from the symbol S , which can incorporate only minimal rules. Following Neubig et al. (2011), our model reverses the process by recursively backing off to smaller phrase pairs as shown in Figure 2. First, our model attempts to generate a phrase pair, i.e., a sentence pair, as a derivation tree. If the model successfully generates the phrase pair, we will fin-ish the generation process. Otherwise, a Hiero rule is generated to fallback to smaller spans rep-resented in each non-terminal symbol X in the rule. Then, each phrase pair corresponding to each smaller span is recursively generated through our model. In Figure 2, a phrase pair with  X  X il X  indi-cates those not in our model; therefore the phrase pair is forced to back-off either by generating a new phrase pair from a base measure (base) or by falling back to smaller phrases using a Hiero rule (back-off). The recursive procedure is done until Figure 2: Derivation tree generated from the hier-archical back-off model we reach phrase pairs which are generated without any back-offs. Let a discount parameter be d p , a strength parameter be p , and a base measure be G p 0 . More formally, the generative process is rep-resented as follows: where s is source side terminals and t is target side terminals in phrase pair  X  s = t  X  . P phrase is com-posed of three states, i.e., model , back-off , and base , and follows a hierarchical Pitman-Yor pro-cess (Teh, 2006). model: We draw a phrase pair  X  s = t  X  with the probability similar to Equation (2): where c k is the numbers of customers of a phrase pair p k and n p is the number of all customers Note that this state is reachable when the phrase pair  X  s = t  X  exists in the model in the same manner as Equation (2). back-off: We will back off to smaller phrases using a rule generated by P rule as follows: where c back and c base are the number of customers sampled from the back-off and base phrases, re-spectively, with a base measure G b and hyper-parameter b . We use a uniform distribution for G b = 0 : 5 since we consider only two states, back-off and base . Unlike the model state, P phrase may reach this state even when a phrase pair is not in the model. The phrase pair is backed-off to smaller phrase pairs using P phrase through the non-terminals in the generated rule X 2 X  =  X  . base: As an alternative to the back-off state, we may reach the base state which follows the proba-bility distribution on the basis of the base measure G In summary, P phrase ( d p ; p ; G X ) is defined as a joint probability of Equations (5) through (7). 3.3 Base Measure Similar to Levenberg et al. (2012), the base mea-sure for rule probability G r four generative processes. First, a number of symbols in a source side of a rule j j is gen-erated from a Poisson distribution, i.e., j j P oisson (0 : 1) . Let t ( x ) denote a function that re-turns terminals from a string x . The number of target side terminal symbols j t ( ) j is also gener-ated from a Poisson distribution and represented as j t ( ) j P oisson ( + 0 ) 1 . The type of symbol i in the source side, type i , either ter-minal or non-terminal symbol, is determined by type i Bernoulli (  X  j j ) where  X  is a hyper-parameter taking 0 &lt;  X  &lt; 1 .  X  j j is based on an intuition that shorter rules should be rela-tively more likely to contain terminal symbols than longer rules. Source and target terminal symbol pair  X  t ( ) ; t ( )  X  are generated from the geomet-ric means of two directional IBM Model 1 word alignment probabilities and monolingual unigram probabilities for two languages, and represented as:  X  t ( ) ; t ( )  X  ( P uni ( t ( )) P  X  X  X  X  When the t ( ) or t ( ) is empty, we use the con-stant 0 : 01 instead of the Model1 probabilities.
The base measure for phrases G p of three generative processes, in a similar man-ner as Levenberg et al. (2012), the number of terminal symbols in a phrase pair in the source side, j s j , is generated from a Poisson distribution j s j P oisson (0 : 1) . The length for the target side j t j is generated in the same manner as the source side of the phrase pair. The alignments between s and t are also generated in the same manner as those for the base measure in a rule. In inference, we use a sentence-wise block sam-pling of Blunsom and Cohn (2010), which has a better convergence property when compared with a step-wise Gibbs sampling. We repeat the follow-ing steps given a sentence pair. 1. Decrement customers of the rules and phrase 2. Bi-parse the sentence pair in a bottom up 3. Sample a new derivation tree in a top-down 4. Increment customers of the rules and phrase The most time-consuming step during the infer-ence procedure is bi-parsing of a sentence pair which essentially takes O ( j f j 3 j e j 3 ) time using a bottom up dynamic programming algorithm (Wu, 1997). When a span is very large, it can easily suf-fer combinatorial explosion. To avoid this prob-lem, we use a two-step slice sampling by perform-ing the two-step bi-parsing of Xiao et al. (2012) and by pruning possible derivation space (Blun-som and Cohn, 2010) in each step (Algorithm 1). From lines 1 to 7, a set of word alignment is enu-merated and put into cube a . In addition to the ar-bitrary word alignment of source i to target j , null word alignment is also merged into cube a (line 5). Note that word alignment considered in the algorithm is restricted to one-to-many. The set of word alignments in cube a is pruned and added to the chart a by SliceSampling. From lines 8 to 15, all possible phrases and rules for each span con-strained by the pruned word alignment are enu-merated and temporally stored into cube . The phrases and rules in cube are pruned by SliceSam-pling and the remainders are added to chart . The Algorithm 1 Two-step slice sampling 1: for i 1 ; ; j source j do 2: for j 1 ; ; j target j do 3: cube a f souce i ; target j g 4: end for 5: cube a f souce i ; null g 6: chart a SliceSampling ( cube a ) 7: clear cube a 8: end for 9: for h 1 ; ; j source j do 10: for all the i; j s:t j i = h do 11: for inferable rule; phrase from the sub-12: cube rule; phrase 13: end for 14: chart SliceSampling ( cube ) 15: clear cube 16: end for 17: end for time complexity for the word alignment enumera-tion from lines 1 to 7 is O ( j f jj e j ) and that for the phrase and rule enumeration from lines 8 to 15 is O ( j f j 3 ) .
 The key difference to the slice sampling of Blunsom and Cohn (2010) lies in lines 6 and 3 of Algorithm 1. Let d denote a set of derivation trees d and u be a set of slice variables u . In slice sam-pling, we prune the rules r sp in each source span sp based on a slice variable u sp corresponding to that sp . After pruning, we sample trees from the pruned space of r . The above process is formally represented as: where P ( d j u ) is computed through sampling in a top-down manner after parsing in a bottom-up manner with Algorithm 1, and is equal to  X   X  rule in the span sp and P ( u sp j d ) be defined using a pruning score Score ( r sp ) as follows: Score ( r sp where Inside ( r sp ) and F uture ( r sp ) are inside and outside probabilities for sp , respectively. Let s a set of target side words in r sp , s sp a set of words in a source sentence without s r words in a target sentence without t r ing IBM Model 1 probabilities in two directions, Inside ( r sp ) is calculated by We use IBM Model1 outside probability for future score F uture ( r sp ) . Similarly, the future score F uture ( r sp ) is computed using the two direc-tional models: When sp is used in the current derivation d , slice variable u sp is sampled from a uniform distribu-otherwise, u sp is sampled from a beta distribution if sp is not in the current derivation d : where a &lt; 1 is a parameter for the beta distribu-tion. If the Score ( r sp the r sp (2010), if the span sp is not in the current deriva-tion, the rules with low probability are pruned ac-cording to Equation (14). Let r d sp denotes a rule in d with span sp , P ( d j u ) is calculated by:  X  In our experiments discussed in Section 6, slice sampling parameter a was set to 0.02 when in-corporating the future score of Equation (12). In contrast, we used a = 0 : 1 when performing slice sampling without the future score. We empirically found that setting a lower value for a led to slower progress in learning due to a combinatorial explo-sion when inferencing a derivation for each sen-tence pair.

In the beginning of training, we do not have any derivation trees for given training data, al-though the derivation trees are required for esti-mating parameters for Bayesian models. We use the two-step parsing for generating initial deriva-tion trees from only base measures. The k-best pruning is conducted against the score denoted by the equation 10 , which is very similar to Xiao et
For faster bi-parsing, we run sampling in paral-lel in the same way as Zhao and Huang (2013), in which bi-parsing is performed in parallel among the bilingual sentences in a mini-batch. The up-dates to the model are synchronized by increment-ing and decrementing customers for the bilingual sentences in the mini-batch. Note that the bi-parsing for each mini-batch is conducted on the fixed model parameters after the synchronised pa-rameter updates.

In addition to the model parameters, hyperpa-rameters are re-sampled after each training itera-tion following the discount and strength hyperpa-rameter resampling in a hierarchical Pitman-Yor process (Teh, 2006). In particular, we resample  X  d p ; p  X  , the pair of discount and strength parame-ters for phrases from a distribution: where [ ] denotes a generalized Pochhammer sym-bol, and c  X  s ; t  X  the number of customers of phrase pair  X  s ; t  X  . We resample the pair  X  d r ; r  X  in the same way as  X  d p ; p  X  . The hyperparameter b is resampled from distribution: where  X  , used in the generative process for ei-ther terminal or non-terminal symbol type i Bernoulli (  X  ) , is resampled from a distribution: where c  X  =  X  denotes the number of customers of rule  X  =  X  , and Base denotes a set of rules gener-ated from the base measure. All the hyperparame-ters are inferred by slice sampling (Neal, 2003). In the previous work on Bayesian approaches (Blunsom and Cohn, 2010; Levenberg et al., 2012), it is a standard practice to heuristically ex-tract rules and phrase pairs from the word align-ment derived from the derivation trees sampled from the Bayesian models. Instead of the heuris-tic method, we directly extract rules and phrase pairs from the learned models which are repre-sented as Chinese restaurant tables. To limit gram-mar size, we include only phrase pairs that are se-lected at least once in the sample. During this ex-traction process, we limit the source or target ter-minal symbol size of phrase pairs to 5.

For each extracted rule or phase pair, we com-pute a set of feature scores used for a HPBSMT decoder; a weighted combination of multiple fea-tures is necessary in SMT since the model learned from training data may not fit well to translate an unseen test data (Och, 2003). We use the follow-ing six features; the joint model probability P model is calculated by Equation (2) for rules and by Equation (5) for phrase pairs. The joint posterior probability P posterior ( f; e ) is estimated from the posterior probabilities for every rule and phrase pair in derivation trees through relative count es-The joint posterior probability is considered as an approximation for those back-off scores. The conditional model probabilities in two directions, P model ( f j e ) and P model ( e j f ) , are estimated by marginalizing the joint probability P model ( f; e ) : The inverse direction P model ( e j f ) is estimated, similarly. The lexical probabilities in two direc-Model probabilities between the source and target terminal symbols in rules and phrase pairs. In ad-dition to the above features, we use Word penalty for each rule and phrase pair used in the cdec de-coder (Dyer et al., 2010).

As indicated in previous studies (Koehn et al., 2003; DeNero et al., 2006), the translation quality of generative models is lower than that of mod-els with heuristically extracted rules and phrase pairs. DeNero et al. (2006) reported that con-sidering multiple phrase boundaries is important for improving translation quality. The generative models, in particular Bayesian models, are strict in determining phrase boundaries since their models are usually estimated from sampled derivations. As a result, translation quality is poorer when compared with a model estimated using a heuristic method. The Hiero grammar severely suffers from the phrase granularity problem and can overfit to the training data due to the flexibility of the rules.
To alleviate this problem, Neubig et al. (2011) combined the derivation trees across training it-erations by averaging the features for each rule and phrase pair. During the sampling process, each training iteration draws a different deriva-tion tree for each sentence pair, and the combi-nation of those different derivation trees can pro-vide multiple possible phrase boundaries to the model. Inspired by the averaging over the mod-els from different iterations, we combine them as a part of a sampling process; we treat the derivation trees acquired from different iterations as addi-tional training data, and increment the correspond-ing customers into our model. Hyperparameters are resampled after the merging process. The new features are directly computed from the merged model. 6.1 Comparison with Previous Bayesian First, we compared the previous Bayesian model (Gen) with our hierarchical back-off model (Back). We used the first 100K sentence pairs of the WMT10 News-Commentary cor-pus for German/Spanish/French-to-English pairs (Callison-Burch et al., 2010) and NTCIR10 cor-pus for Japanese-English (Goto et al., 2013) for the translation model. All sentences are lower-cased and filtered to preserve at most 40 words on both source and target sides. We sampled 20 it-erations for Gen and Back and combined the last The batch size was set to 64. The language mod-els were estimated from the all-English side of the WMT News-Commentary and europarl-v7. In NTCIR10, we simply used the all-English side of the training data. All the 5-gram language mod-els were estimated using SRILM (Stolcke and oth-ers, 2002) with interpolated Kneser-Ney smooth-ing. The details of the corpus are presented in Ta-ble 2. For detailed analysis, we also evaluate Hiero grammars extracted from GIZA++ (Och and Ney, 2003) grow-diag-final bidirectional alignments us-ing Moses (Koehn et al., 2007) with Hiero options. Table 2: The number of words in training data Table 3: The number of words in training data We use GIZA++ and Moses default parameters for training. Decoding was carried out using the cdec decoder ( ? ). Feature weights were tuned on the de-velopment data by running MIRA (Chiang, 2012) for 20 iterations with 16 parallel. For other param-eters, we used cdec X  X  default values. The numbers reported here are the average of three tuning runs (Hopkins and May, 2011).

Table 1 lists the results measured using BLEU (Papineni et al., 2002).The term Sample denotes the combination size for each model. The term SIZE in the table denotes the number of the ex-tracted grammar types composed of Hiero rules and phrase pairs. The numbers in italic denotes the score of Back, significantly improved from the score of 1 sampled combinated Gen. The numbers in bold denotes the score of Back + future, significantly improved from the score of 1 sampled combinated Back. All significance test are performed using Clark et al. (2011) un-der p-value of 0 : 05 . Back performed better than Gen on Spanish-English and French-English lan-guage pairs. Note that the gains were achieved with the comparable grammar size. When com-paring German-English and Japanese-English lan-guage pairs, there are no significant differences between Back and Gen. The combination of our Back with future score during slice sampling (+fu-ture) achieved further gains over the slice sam-pling without future scores, and slightly decrese the grammar size, compared to Back. However, there are still no significant difference between Back+future and Gen on German-English and Japanese-English language pairs. Sample combi-nation has no or slight gain on BLEU score, in spite of the increase in grammar size. From the results, using last one sample as a grammar is suf-ficient for translation quality. The performance of the Bayesian model did not match with that for the GIZA++ pipeline heuristic approach. In general, complex model, such as Gen and Back, demands larger corpus size for training, and the evaluation on such smaller corpus may not be a fair com-parison, since the sampling approach can rely on only sampled derivations. Thus, we evaluate these methods on large size corpus in the next section. 6.2 Comparison with Heuristic Extraction As reported in (Koehn et al., 2003; DeNero et al., 2006), the comparison against heuristic ex-traction is a challenging task. We compare the Back+future and a baseline extracted from grow-diag-final alignments of GIZA++ using Moses with Hiero options. We use GIZA++ and Moses default parameters for training. In addition, we present heuristic extraction from the last 1 sample of Back+future in +Exhaustive.

We used the full europarl-v7 German-English corpus as presented in Table 3. The experimen-tal set up was similar to that in Section 6.1 with the following exceptions; Slice sampling parame-ter a was set to 0.05. Mini-batch size was set to The translation model was extracted by last 1 iter-ations.
 Table 4: Results of translation evaluation in de-en full size corpus.
 decrease the grammar size against GIZA++ with comparable BLEU score. Surprisingly, exhaustive extraction had no gains, probably because of the word alignment in each Hiero rules relied on the IBM Model 1. Intuitively, the use of the hierarchical back-off in-creases the Hiero grammar size, since the phrases of all the granularities in the derivation trees are incorporated in the grammar. In contrast, our hier-archical back-off model achieved gains in transla-tion quality without increasing the size of the ex-tracted grammar when compared to the previous generative model. The major differences were the use of the minimal phrase pairs used in the previ-ous work in which only minimal phrase pairs in the leaves of derivation trees were included in the model. As a result, larger phrase pairs were forced to be constructed from those minimal rules. On the other hand, our back-off model could directly ex-press phrase pairs of multiple granularities. In par-ticular, a complex noun may be composed of sev-eral Hiero rules in the previous model, but it can be directly expressed by a single phrase pair in our model. Table 5 gives an example of a Japanese-English phrase pair which is represented by two Hiero rules in the previous model; it is directly ex-pressed by a single phrase pair in our model.
The BLEU score of Back+future was higher than the generative baseline with comparable grammar size. We observed that a very different word alignment was sampled in every training it-eration; the tendency was very frequent for func-tion words. Our future score for inferring the slice variables may take into account the context in a sentence better than those without the future score. As a result, Back+future infers better models by avoiding over pruning spans.

The BLEU score of our back-off model did not achieve gains over the heuristic baselines. The de-tail analysis of the learned Hiero grammar X  X  CRP tables reveals that the grammar is very sparse and may have little generalization capacity. The ex-pansion of back-off process and the use of word classes will solve the sparsity and increase the translation quality. We proposed a hierarchical back-off model for Hiero grammar. Our back-off model achieved higher or equal translation quality against a previ-ous Bayesian model under BLEU score on various language pairs;German/French/Spanish/Japanese-English. In addition to the hierarchical back-off model, we also proposed a two-step slice sampling approach. We showed that the two-step slice sam-pling approach can avoid over-pruning by incor-porating a future score for estimating slice vari-ables, which led to increase in translation quality through the experiments. The joint use of hierar-chical back-off model and two step slice sampling approach achieved comparable translation quality on a full size Germany-English language pair in Europarl v7 corpus with with significantly smaller grammar size; 10% less than that for he heuristic baseline.

For future work, we plan to embed a back-off feature to decoder which is computed for all the phrase pairs constructed in a derivation during the decoding process. We will reflect the change of a probability as a statefull feature for decoding step.
