 In open and dynamic environments, Sit uation-Aware Access Control (SAAC) applications need to capture and manipulate context information [1] to identify relevant situations and need to adapt their behaviors as the situation changes. In such environments, users demand a ccess to appropriate software services in an anytime and anywhere fashion, as described by Weiser [2], with more flexi-bility and richer resources, and yet not to compromise the relevant privacy and security requirements of the stakeholder s. A security policy (situation-aware ac-cess control policy) normally states that the particular services can be invoked based on (i) the states of the relevant entities and (ii) the specific purpose ;which describes the reason for which organizational resources are used [3]. For exam-ple, an emergency doctor X  X  request to in voke a healthcare service (access to the emergency patient X  X  records when the pa tient is in a critical health condition) may be possible from the inside of the hospital but may not from the public bus. Also, such service access request can b e granted for the emergency treatment purpose. In the medical domain the American Health Information Management Association (AHIMA) identifies 18 heal th care scenarios across 11 purposes (treatment, payment, research, etc.) for h ealth information exchange [4]. There-fore, in order to specify situations for SAAC applications, on the one hand, it is required to capture the states of the relev ant situation-specific context entities (e.g., user, resource, resource owner) an d the states of the relevant relationships between different entities (e.g., the inter personal relationships between the user and the resource owner). On the other hand, it is required to identify the purpose or user X  X  intention in accessing the software services.

The basic components to achieve situation-awareness have already been de-fined by Endsley [5],  X  X he perception of the elements in the environment within a volume of time and space, the comprehension of their meaning, and the projec-tion of their status in the near future X  . Some other research describe situation as the states of the specific kind of entities (e.g., [6],[7],[8]). However, other than the entity states, the states of the relevant relationships between entities are not considered in this situat ion-awareness research.

Some situation-aware access control approaches have been proposed in the access control literature (e.g., [9], [10]) , each of them having different origins, pursuing different goals and often, by nature, being highly domain-specific. They consider the specific types of context info rmation (e.g., the user X  X  state) as policy constraints to control access to softwar e services or resources. However, other than the relevant states, the purpose or user X  X  intention in accessing the services is not considered in these works. In this paper, we consider the basic elements of the situation-aware access control are: the combination of the relevant entity states and the relationship states ,andthe purpose or user X  X  intention . The Contributions. In order to address the above-identified research issues and challenges, we present a novel framework PO-SAAC ( Purpose-Oriented Situation-Aware Access Control , to provide situation-specific access to software services. The novel features of this framework are as follows: (C1) Purpose-OrientedSituation Model. Our framework uses the purpose-oriented (C2) Situation-Aware Access Control Policy Model. Our framework presents a (C3) Ontology-Based Framework Implementation. Basedonthesituationand (C4) Prototype Implementation and Evaluation. In order to demonstrate the Paper Outline. The rest of the paper is organi zed as follows. Section 2 presents a healthcare application scenario to motivate our work. In Section 3, we present the design of our PO-SAAC framework, a situation model to specify different situations and a policy model for specifyin g situation-specific access control poli-cies. Section 4 presents an ontology-bas ed development platform for our frame-work. Section 5 describes the prototype implementation along with the viability of the framework. Section 6 discusses rel ated work. Finally, Section 7 concludes the paper and outlines future work. As an example of the type of situations th at a situation-specific access control framework has to consider, in this sectio n we outline a motivating scenario that illustrates the need for the incorporation of purpose-oriented situation infor-mation in access control policies. We then distil the general requirements for managing the access to software ser vices in a situation-aware manner. Motivating Scenario. To exemplify the complexity of achieving situation-awareness in access control systems, we reflect on the area of patient medical records management in the healthcare domain as a motivating scenario. Scene #1 : The scenario begins with patient Bob who is in the emergency room due to a heart attack. While not being Bob X  X  usual treating doctor, Jane, a general practitioner at the hospital, is required to treat Bob and needs to ac-cess Bob X  X  emergency medical records fro m the emergency room of the hospital. Concerning this scene, one of the releva nt situation-aware access control policy is shown in Table 1 (see Policy #1 ).
 Scene #2 : After getting emergency treatment, Bob is shifted from the emergency department to the general ward of the hos pital and has been assigned a registered nurse Mary, who has regular follow-up visits to monitor his health condition. Mary needs to access Bob X  X  daily medica l records from the general ward with certain conditions (see the corresponding Policy #2 in Table 1).

Concerning the above scenario and their related policies, we can see that a set of constraints include: the user role (e.g., emergency doctor, registered nurse), the relevant environmental information (e.g., the emergency room, the interpersonal relationship between doctor and patien t), the service (e.g., emergency medical records, daily medical records), and the pur pose/user X  X  intention in accessing the services (e.g., emergency treatment, daily operation); and these policies refer to need to be evaluated in conjunction with these relevant information.
 General Requirements. To support the situation-aware access control in a computer application like the patients  X  medical record management system, we need to consider the 3Ws: who (the appropriate users by playing the appropriate roles) wants to access what (the appropriate services), and when (the relevant states and the purpose or user X  X  intention in accessing the services). In particular, a general purpose-oriented situation-awa re access control framework is required to manage the access to services in such a pplications by taki ng into account the different types of relevant situations. As different types of elementary information are integrated into the access control pr ocesses, some important issues arise. These issues and their related requirements are as follows: (R1) Representation of purpose-oriented situations: What access control-specific (R2) Specification of situation-aware access control policies: How to define the (R3) Implementation framework: How to realize the relevant situations and the In this section, we present our Purpose-Oriented Situation-Aware Access Control (PO-SAAC) framework for software services. 3.1 Purpose-Oriented Situation Model A situation consists of the set of elementary information (the combination of the relevant states and the user X  X  intention or purpose-oriented information). In our purpose-oriented situation model, we define the simple situation ( atomic situa-tion ) and the complex situation ( composite situation ) that are used in specifying situation-specific access control policies. 3.1.1 Representation of Situation Different atomic situations can be defined based on the data/information from the organization (domain-specific).
 Definition 1 (Atomic Situation, S a ). A Situation used in an access control decision is defined as the states of the relevant entities and the states of the relevant relationships between different relevant entities at a particular time that are relevant to a certain goal or purpose of a resource access request. A Purpose is the user X  X  intention in accessing software services. The Situation and Purpose are domain-dependent concepts, and their values can be obtained based on the access request (i.e., from the sense d contexts, inferred contexts, etc.). An atomic situation  X  S a  X  is the logical conjunction of  X  P  X  X nd X  St  X . where  X  P  X  denotes the purpose or user X  X  inte ntion in accessing the service, e.g., considering our application scenario ( Scene #1 ), purpose =  X  X mergencyTreat-ment X  ;and X  St  X  denotes the state of the relevant entity, e.g., location ( Jane ) =  X  X ospital X  , or the state of the relevant relationships between entities, e.g., interpersonalRelationship ( Jane,Bob )=  X  X onTreatingDoctor X  .

A purpose  X  P  X  can be identified based on the currently available contexts (i.e., the states of the relevant entity and the relationships between entities). Example 1. Consider Policy #1 related to our application scenario: a user, who is a general practitioner, by playing an emergency doctor (ED) role can access a patient X  X  emergency medical record s (EMR) in the hospital for emergency treatment (ET) purpose, when the patient is in a critical condition. The following rule (2) is used to identify that the purpose is  X  X T X  (i.e., a user by playing the  X  X D X  role can access a patient X  X  medic al records for  X  X T X  purpose, when the patient X  X  health condition is critical), Example 2. Consider the policy mentioned in Example 1 , in which the relevant elementary information is represented as an atomic situation ( s a 1  X  S a ), s a 1 = User ( u )  X  Purpose ( p )  X  intendedPurpose ( u, p )  X  equal ( p,  X  ET  X ) 3.1.2 Reasoning about Situation The process of inferring a new composite s ituation (complex situation) from the one or more already defined/existing atomic situations is refereed to reasoning about situation . One of the main advantages of our framework to situation-awareness is its reasoning capability; that is, once facts about the world is stated, other facts can be inferred using an inference engine through the reasoning rules. Definition 2 (Composite Situation, S c ). Given a collection of atomic situa-tions, the composite situations can be defined by performing logical composition (AND, OR or NOT) on the same purpose-oriented atomic situations.
 Example 3. Consider Policy #2 related to our application scenario. The daily operation (DO) purpose can be identified using the following rule (4). Two atomic situations regarding the mentioned policy are represented as, s a 2 = User ( u ) s a 3 = User ( u )
A policy associated with the situation  X  s a 2  X  can be read as, a user by playing a registered nurse (RN) role, who is located with a patient in the general ward (GW) of the hospital, can a ccess the patient X  X  daily me dical records (DMR) for daily operation (DO) purpose, when the patient X  X  health condition is normal.
An example policy associated with the situation  X  s a 3  X  can be read as, a user by playing the  X  RN  X  role can access the patient X  X   X  DMR  X  during her ward duty time (DT) for  X  DO  X  purpose, when the patient X  X  health condition is normal.
A composite situation  X  s c 1  X ( s c 1  X  S c ) with these two atomic situations ( s a 2 3.2 Software Services A service is a self-contained software entity and may be composed of other services (service composition). We consi der the resource (e.g., patient medical record) in a service oriented manner, in order to provide fine-grained access control and grant the right access to the appropriate parts of a resource by the appropriate users. A service can be seen as a pair &lt; res, op &gt; with  X  res  X  X eing a requested resource and  X  op  X  being the action/operat ion on the resource. For example, the write operation on the em ergency medical records is defined as &lt; EMR , write &gt; or writeEMR() . In this way, the fine-grained access control to resources can be realized by managing the access to the service operations. 3.3 The SAAC Policy Model for Software Service Based on the formalization of the RBAC model in [11], we present a formal definition of our policy model. Our policy model for SAAC applications that extends RBAC with relevant situations, w hich is defined in the previous section. Our goal in this research is to provide a way in which the role-permission assign-ment policies can be specified by incorporating dynamic attributes (i.e., relevant situations) as policy constraints.
 Definition 3 (SAAC Policy Model). Our policy model for access control can be formally described as a tuple, where R , S , Ser ,and SAACPolicy represents Roles, Situations, Services, and Policies, respectively (Formula (7)): 1. Roles (R): A set of roles R = { r 1 , ..., r m } . A role reflects user X  X  job function 2. Situation (S): A set of situations S = { s 1 , ..., s n } = S a  X  S c specified 3. Services (Ser): A set of services Ser = { ser 1 , ..., ser o } = { ( res,op ) 4. Policies (SAACPolicy): A set of policies SAACPolicy = { sp 1 , ..., sp r } X 
Our policy model extends the concept of common role-permission assignments ( RPA )inRBAC( RPA  X  R  X  P ) [11], by introducing the concept of purpose-oriented situation, called situation-aware role-service assignments . Example 4: Based on our policy model ( Role(r)  X  Situation(s)  X  Service(ser)  X  (r,s,ser)  X  SAACPolicy ), the following rule (shown in Table 2) expresses the policy mentioned in Example 1, i.e., a User  X  u  X  X yplayingtheRole X  r  X  (emer-gency doctor (ED) role) can invoke the Service  X  ser  X ( writeEMR () service), if a Situation  X  s  X ( s denotes s a 1 mentioned in Example 2) is satisfied.
The identification of the relevant information to represent the purpose-oriented situations and specify the corresponding SAAC policies satisfies requirements R(1) and R(2), which is discussed earlier. To meet requirement R(3), we in the next section propose an ontology-based development platform . We have introduced an ontology-based PO-SAAC framework to model relevant purpose-oriented situations and situat ion-specific access control policies. The principal goal of our framework is to formalize the situation-aware access control concepts using a logic-based language. To achieve this goal, we have already identified relevant concepts in the previous section.

In the literature, there are many la nguages that have been developed for specifying computer-proce ssable semantics. In the present age, ontology-based modeling technique has been proven as a suitable logical language for modeling dynamic contexts/situations (e.g., [12], [13]). The ontology-based modeling ap-proach to achieve situation-awareness (e.g., [7], [8]) is not only beneficial from the representational viewpoint but also beneficial from the reasoning viewpoint; that is, once facts about the world is stated in terms of the ontology, other facts can be inferred using the inference engine through the inference rules.
To model the PO-SAAC ontology, in this paper, we adopt the OWL lan-guage as an ontology language to represent the situations, which has been the most practical choice for most ontologica l applications becaus e of its considered trade-off between computational complexity of reasoning and expressiveness [13]. In order to support the process of inferring new composite situations , we need to define a set of reasoning rules that are associated with the existing or already de-fined situations. In addition, several of the reasoning rules require mathematical computation, which is not supported by the OWL language. Towards this end, the expressivity of OWL can be extended by adding SWRL rules to an ontology. We express the user-defined reasoning rules using the SWRL which provide the ability to identify the purposes and to reason about new composite situations. Core Concepts. A graphical representation of the PO-SAAC ontology is shown in Figure 1. We model our ontology based on the 3Ws: who (user/role) wants to access what (service) and when (relevant states and purpose). The ontology facilitates software engineers to analyze and specify purpose-oriented situation information of service invocation for a ccess control in a situation-aware manner. The ontology is divided into three layers. The top layer ( Layer 3 )showsthecore concepts/elements for specifying the SAAC policies. The middle layer ( Layer 2 ) shows the situation modeling concepts. The bottom layer ( Layer 1 )showsthe basic concepts for defining the context info rmation and services (resources). The ontology models the following core concepts.
 The top layer has the following core concepts, which are organized into SAACPolicy hierarchy, namely Role , Situation , Service ,and AccessDecision classes. A policy captures the who/what/when dimensions which can be read as follows: a SAACPolicy specifies that a user (who is playing a Role )has Ac-cessDecision ( X  X ranted X  or  X  X enied X ) to Service if a Situation is satisfied.
The middle layer has the situation modeling concepts. A Situation consists of the relevant States and the Purpose of user X  X  access request. A Purpose is a user X  X  intention in accessing the services; and it canbeidentifiedbasedonthecurrently available context information. A State can be composed of the relevant context information. A Situation can be either an AtomicSituation binding a simple situation or a CompositeSituation composed by one or more atomic situations using logical operators. (How a new composite situation is specified/reasoned based on the atomic situations by using the ontology-based reasoning rule, is discussed in  X  X easoning About Situations X  Subsection.) A Service consumes a set of software Resources to perform certain Operations .A Role is linked to the User class by an object property isPlayedBy for representing the fact that a role is played by a user. The Purpose class has an object property hasSubPurpose to model the purpose hierarchy, so as to achi eve the users X  service access request at different granularity levels (detail in  X  X omain-Specific Concepts X  Subsection).
The bottom layer has the following core concepts of the context entities and context information. The different relevant entities ( User , Resource , Owner )are organized into ContextEntity hierarchy. The relationship between a Resource and its Owner is represented by an object property named isOwnedBy . A context characterizes the ContextEntity (e.g., the location of user) or the Relationship between different entities (e.g., the interpersonal relationship between user and owner). The contexts are represented by a number of context information types ( ContextInfo ), namely RelationshipInfo , StatusInfo , TemporalInfo ,and Spatial-Info . To specify the different relationships between different entities, an object property hasRelationship is used which links ContextEntity and Relationship classes. A general and exten sible context model specific to access control is pro-posed in our earlier paper [14].
 Domain-Specific Concepts. The PO-SAAC core ontology (shown in Figure 1) serves as an entry-point for the domain ontologies. The domain-specific concepts extend the core ontology X  X  corresponding base concepts. It is important for the application developers, providing a way to include domain-specific concepts into the core ontology. Figure 2 shows an excerpt of the representation of the Purpose ontology for the healthcare domain (e.g. treatment purpose, research purpose) to exchange patients X  medical records. A pur pose is identified based on the currently available context information. To identify the purpose, we specify a set of user-defined SWRL rules. An example rule shown in Table 3 identifies the Purpose is DailyOperation ( DO ), based on the current contexts.

The different purposes at various granularity levels of a user X  X  service access request are individually iden-tifiable, so as to achieve fine-grained control over access to services. As such, the Purpose class contains an important data type property ( xsd:int type) named granLevel , which indi-cates the granularity level. By doing so, we can provide different levels of purpose granularity. For example, an Emergency Doctor can access a patient X  s emergency medical records for the Treatment purpose, at granLevel 0 (highest level), which means she also can access for all the other sub-purposes (at the lower granularity levels). A Gen-eral Practitioner can access a patient X  X  som e medical records (e.g., daily medical records) for the NormalTreatment purpose. However, she can not access a pa-tient X  X  emergency medical records for EmergencyTreatment purpose.

We also consider the granularity levels of the healthcare Role and Resource (patient X  X  medical records) hierarchies, in order to facilitate different fine-grained control for different types (roles) of user s, so as to achieve fine-grained control over access to resource components at various granularity levels [14]. Reasoning about Situations. Various types of ontology-based inferences can be performed for the situation identification and reasoning, service composition and policy evaluation, including implicit knowledge reasoning as well as con-sistency checking. A set of reasoning rules are specified for implicit knowledge reasoning, which reasons about the implicit knowledge conveyed by the specifica-tion. For example, the rule specified in Example 3 is written in OWL/XML that is used to reason about a new composite situation ( s c 1 = s a 2  X  s a 3 ,s c 1  X  S c ). The specification of these two atomic situations ( s a 2 and s a 3 ) are discussed in Example 3 . An example policy associated with this composite situation s c 1 spec-ifies a registered nurse (RN) can access a pa tient X  X  daily medical records from the general ward (GW) during her ward duty time (DT) for daily operation (DO) purpose. The specification of this composite situation is shown in Table 4. We have developed our prototype in Java2 SE using widely supported tools and it has been deployed on a Intel(R) Core(TM) Duo T2450 @ 2.00 GHz processor computer with 1GB of memory running Windows XP Professional OS. We have used the Prot  X  eg  X  e-OWL API to implement the core and healthcare ontologies. During the SAAC policy evaluation pha se, an access query is used to process the user X  X  service access request. We h ave used the SWRL rules to evaluate the policies. We have used the Jess Rule Engine for executing the SWRL rules. In particular, the query language SQWRL, which is based on OWL and SWRL, is adopted to process service access requests. 5.1 Prototype Architecture A high-level architecture of our prototype framework is shown in Figure 3. We have implemented a set of Software Components , which can support the software engineers to develop Situation-Aware A ccess Control (SAAC) applications using this framework.

Currently a simple Java class SAACDecisionEngine is used to check the user X  X  request to access the services an d makes situation-specific access con-trol decisions. We have implemented PolicyEnforcementPoint as part of the SAACDecisionEngine . Once the SAACDecisionEngine receives the request in accessing software services, it queries the PolicyManager class for the rele-vant policies. The PolicyDecisionPoint ,and PolicyAdministrationPoint are im-plemented as parts of the class PolicyManager that are used to allow the engineers to add, edit, and delete ac-cess control policies. We have devel-oped a number of ContextProviders (which capture low-level context in-formation) and the ContextReasoner (which infers high-level information) as parts of the SituationManager .
 The SituationManager is used to identify relevant purposes and sit-uations. The ontology knowledge bases are stored in the form of the OWL concepts, SWRL rules and SQWRL queries (PO-SAAC Ontology). 5.2 Developing a SAAC Application for Healthcare A situation-aware application in the healthcare domain is built to illustrate the operation of our situa tion-aware access control. The environment of our application is the patients X  medical records management (PMRM). The main goal that we aim with this application is to access different medical records of patients based on the relevant situations. We simulate the Java programs and the relational databases as different context sources. For example, our prototype application has context sources: SystemTime (which provides cur-rent time), Location (which provides location address), User Pass relational ta-ble (containing usr id and password), User Role table (containing usr id and usr role id), Patient Pofile table (containing patient id, patient name and con-nected people id), patient Health Profile (which provides patient id, heart rate and body temperature), etc.
 Policy Specification. Table 5 shows the Policy #1 written in OWL that is related to our application scenario . In this policy, the access decision ( X  Granted  X  decision) is based on the following policy constraints: who the user is (user X  X  role , e.g.,  X  ED  X ), what service being requested ( service , e.g.,  X  writeEMR () X ), and when the user sends the request ( purpose-oriented situation ). The  X  purpose  X  and  X  situation  X  regarding this policy are specified in Examples 1 and 2. Case Study. To demonstrate the effectivenes s of our framework, we present a case study. Consider our application scenario ( Scene #1 ), where Jane, by playing an emergency doctor role, wants to access the requested service writeEMR () (i.e., the write access to the emergency m edical records of patient Bob). The bot-tom layer of our PO-SAAC ontology captures the relevant context information (interpersonal relationship, location, health status, etc.). The middle layer of the ontology captures the relevant situation based on the captured information and situation specification rules. For the PMRM application we have specified different situations. Some of these  X  X ituations X  and their associated  X  X ontext in-formation X  and  X  X urpose X  using situation reasoning rules are shown in Table 6.
Our ontology (top layer) also captures the relevant SAAC policy. Based on this information, the ontology returns the SAAC decision, i.e., Jane X  X  service access request is Granted (see an access query in Table 7 and result in Table 8), because the ontology captures relevant situation, and satisfies a SAAC policy which is stored in the policy base (ontology knowledge base).
 5.3 Performance Evaluation We evaluate the runtime system performance using our prototype system, where we adopt our PO-SAAC approach to identify and reason about the relevant purpose-oriented situation.
 Experimental Setting. With the goal of evaluating the runtime performance of the various stages of our prototype framework, we have conducted two sets of experiments on a Windows XP Professional operating system running on Intel(R) Core(TM) Duo T2450 @ 2.00 GHz processor with 1GB of memory.
 Measurement. The main purpose of this experimental investigation is to quan-tify the performance overhead of our approach. Our main measures included situation identification time and policy evaluation time . The first measure indi-cates how long it took to identify/infer a relevant situation (by capturing the currently available context information and identifying the purpose using this information). The second measure indicates how long it took to determine a user X  X  access permission on a requested se rvice (by incorporating the identified situation into the access control proces s and making situation-aware access con-trol decision). We calculate the average end-to-end response time ( T RT ), time from the arrival of the user X  X  service access request (query) to the end of its execution, which equals to the time for id entifying relevant situation and time for evaluating relevant policy.
 Results and Analysis. We have examined the performance of PO-SAAC. The main finding was that the time for making situation-aware access control deci-sion (based on the situation identification time and policy evaluation time )is acceptable, as they impose just a small, acceptable overhead.

The first test focuses on measuring the response time of our prototype in the light of increasing number of policies. First, we have selected 20 policy rules in which 5 situation types (ST) act as the policy constraints (e.g., the situation-aware policy rule for emergency doctor for emergency treatment purpose is shown in Table 5). We have varied the number of policies up to 100 with 15 different types of situation variations. Each of these variations is executed 10 times for each of following cases: 5 ST (situation types), 10 ST, and 15 ST. For each setting, the average value of the 10 execution runs is used for the analysis (see test results in Figure 4(a)). The test results show that the average response time increases when the number of situation typ es and policies increases. For example, it varies between 4.1 and 5.2 seconds for 15 types of situation information and for the variation of 20 to 100 policy rules. We can see that the average response time seems to be linear. Overall, the performance is acceptable.

In the second test , we have again evaluated the total response time (situation identification and policy evaluation time) over various size of the knowledge base. We have varied the number of policies up to 500 with respect to 138 different types of health professionals [15] (i.e., 138 roles). To build the ontology KB of increasing sizes, we have specified 2000 policies. In order to measure the response time, we have run each experiment 10 times and the average value of the 10 execution runs is used for the analysis (see test results in Figure 4(b)). As the size of the ontology KB increases beyond 1618 kilobyte, the computational overhead increases dramatically. T his is due to the large number of policy rules (larger KB size), fully utilizing the memory capacity of the computer. At the point of the KB being 1618 kilobyte (500 policy rules for the 138 health professional roles), it takes approximately 10 seconds to process the request. We can see that changes to the number of access control policies do not have much impact on the response time, when the ontology knowledge base (KB) size is small. Overall, the runtime performance is accepta ble for a reasonable sized KB. In [9], Kim and Lim propose the Situati on-Aware Role-Based Access Control (SA-RBAC) model, which extends the basic RBAC model [11] and dynamically grants roles (or permissions) to users based on the situation information of the user. The SA-RBAC model is used to deal with the situation information by considering the combination of the requ ired credentials of users, and the con-text information such as location, time, and system resources relevant to the user X  X  access request. In [16], Yau and ot hers have defined the situation as a set of context attributes of users, systems a nd environments over a period of time affecting future system behavior. Later, Yau and Liu have presented a Situation-Aware Access Control (SA-AC) based priv acy-preserving service matchmaking approach [10]. SA-AC model incorporates situation-aware constraints into RBAC model, such that the states of service providers, requesters and environments, which can affect the access control decisi ons. These approaches only consider the states of the relevant entities as the policy constraints. In open and dynamic environments, however, the states of the r elevant relationships between different entities are also important consideration in access con trol decision making. In our PO-SAAC approach, a situation not only involves the states of the specific types of context entities but also the states of the relevant relationships between different relevant entities. Moreover, in our approach, the purpose or user X  X  in-tention in accessing the services is also considered for modeling situation.
Previous works on ontology-based contex t/situation-awareness also provide valuable insights for modeling a fine-grained ontology-based SAAC framework. The CONtext ONtology (CONON) [6], situation theory ontology (STO) [7] and situation-awareness (SAW) ontology [8] research describe  X  X ituation X  as the states of the specific kind of entities (e.g., attributes of users or other relevant entities). However, this research are highly domain-specific and they do not consider sev-eral important concepts which are important consideration for situation mod-eling in today X  X  dynamic environments: the states of the relevant relationships between entities, and the purpose or user  X  X  intention in accessing the services.
Byun and Li [3] have proposed a privacy preserving access control model for relational databases where purpose information associated with a given data el-ement specifies the intended use of the data element. Their access control policy normally states that the particular res ources can be accessed only for the specific purpose; and a purpose describes the re ason for data access and data collection. In [17], the authors presented a purpose -based access control model (usage access control and purpose extension) for medical information system, where  X  X sage X  means usage of rights on digital object s, and  X  X urpose X  dictates how access to data items should be controlled. A major difference of our approach with respect to these purpose-based access control a pproaches is that, we not only consider the purpose information but also consider the different granularity levels of pur-pose information. In addition, different from these approaches, our approach can dynamically identify the appropriate purpose or user X  X  intention in accessing the requested services based on the current ly available context information. In this paper, we have presented a new Pur pose-Oriented Situa tion-Aware Access Control framework for software services. One of the main contributions of this paper is the PO-SAAC model for specifying the purpose-oriented situations and the corresponding situation-specific a ccess control policies. Another contribu-tion of this paper is an ontology-based development platform , in order to formal-ize PO-SAAC model using OWL and SWRL. The practical applicability of our framework is demonstrated through the implementation of a software prototype. In addition, we have developed a SAAC application in the healthcare domain and presented a case study. The case study shows that our framework captures relevant situations at runtime and invokes software services in a situation-aware manner. The experimental results have shown that our framework has satisfac-tory performance. Future work focus on the scalability of our framework in the mobile platform will be an important issue to be addressed.
 Acknowledgment. Jun Han is partly supported by the Qatar National Re-search Fund (QNRF) under Grant No. NPRP 09-069-1-009. The statements made herein are solely the responsibility of the authors.
