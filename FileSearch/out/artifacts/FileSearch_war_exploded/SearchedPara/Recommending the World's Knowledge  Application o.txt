 At Quora, our mission is to share and grow the world's knowl edge. Recommender systems are at the core of this mission: we need to recommend the most important questions to people most likely to write great answers, and recommend the best answers to people interested in reading them. Driven by the above mission sta tement , we have a variety of interesting and challenging recommendation problems and a large, rich data set that we can work with to build novel solutions for them. In this talk , we will describe several of these recommendation problems and present our appr oaches solving them. Recommender systems; ranking; collaborative filtering ; machine learning; personalization The Quora feed is the homepage that a user sees when logged into the product. On that page, we select and recomm end the most  X  X nteresting X  stories for a given user at a given time. This problem is challenging because we need to meet a number of requirements: (1) we need to recommend stories that are topically relevant to the user, (2) we need to recommend stories th at are socially relevant to the user because there are explicit connections between users on Quora, (3) we need to recommend stories that are  X  X imely X  and sometimes relate to ongoing trending events, (4) we need to both engage users to read interesting con tent and present questions to users who can write good content for, and (5) we need to make our recommendations responsive to real -time user actions and impressions. To meet the above requirements, we use a personalized learning -to-rank approach and build a multi -stage system where different candidates are selected and ranked in advance before the final recommendation is actually performed. The popular Quora digest email includes a collection of personalized answers that are selected and recommended for users. Our recommender system first tries to identify a set of candidate answers that pass certain quality bar an d other requirements, and then uses a learning -to-rank model that is optimized for a different objective function than the home feed recommendation problem. Specifically, the model tries to predict the likelihood that the user will click on the answer show n in the digest email. It's worth noting that we also train separate collaborative filtering models to add as features in the above model and expand the candidate pool by introducing answers from topics that the user doesn X  X  explicitly follow. Ask To Answer (A2A) is a feature on Quora that recommends experts best qualified to answer questions and enables users to route their questions to such experts. In addition to generating great answers, A2A also adds a unique social eleme nt to Quora by allowing users to interact and engage with others through these requests. The recommendations of expert users are generated by a supervised machine learning model. Using the set of historical A2A data from recommendations shown in the past t o generate features and labels, the model predicts the label on new incoming data and the top scoring candidates are recommended. Some of the important features are the answers that a user has written on a given topic and the upvotes, downvotes, or views t he user has received on those answers, as well as the  X  X ndorsements X  the user has on the topic, which is an explicit acknowledgement on someone's expertise coming from other users. Another type of recommendations is presenting users questions that are somewhat related to the current one. Related question is particularly effective in creating engagement of logged -out users when they visit the question page from an exte rnal search engine, and that is one of the reasons why currently this recommendation model is un -personalized. Note that what makes a good recommendation is decided not only by how similar the target item is to the source , but also the  X  X nterestingness X  of the target. At Quora, related questions are determined by using an machine learned model that takes into account different features such as textual similarity, user co -visit data, topics of the question, or popularity or quality of the question. We will also share our experiences building a flexible and efficient platform to quickly experiment with different machine learning models for recommender systems. Specifically, we have built a framework to simplify machine learning workflows on Quora's infrastructure, suppo rting collaborative filtering algorithms commonly used in recommender systems such as weighted average least squares (WALS) and Bayesian personalized ranking (BPR). It provides efficient C++ implementations for the algorithms to allow seamless integration with our infrastructure, th rough a simple Python API that is intuitive and easy to use for developers.

