 1. Introduction
Preliminary works ( Alonso and Santos, 2008, 2010a , 2011 ) have shown the efficiency of intelligent computational techniques when dealing with complex systems such as astrodynamic applications. The results proved the value of genetic algorithms (GA) for the optimisation of ascent trajectories, given a set of constrains. These evolutionary strategies have been also applied to interplanetary trajectories ( Alonso and Santos, 2010b , 2010c , 2010d ; Petropoulos et al., 2000 ).

In this article, as an extension of Alonso and Santos (2010d) where GAs were used, we apply two particle swarm algorithms to the optimisation of two interplanetary trajectories of a spacecraft, aimed to reach Jupiter and Saturn from Earth, and performing a gravitational assistance in other planets while minimising the fuel budget and duration of the mission. The missions considered are
EMJ and EVVEJS. The acronyms EMJ stands for an interplanetary mission that begins at the Earth and ends in Jupiter, performing a fly-by in Mars. Analogously, the acronyms EVVEJS refers to any trajectory from the Earth to Saturn, performing fly-bys in Venus, Venus again, Earth, Jupiter and Saturn.
 analytical solutions of the model suggest the utilisation of evolu-tionary strategies to deal with it. Two approaches have been followed: single output optimisation (SOO) and multiple output optimisation (MOO). The first is analysed with PSO (Particle
Swarm Optimisation) techniques to optimise the fuel consump-tion, while the latter is studied with MOPSO (Multi-Objective
Particle Swarm Optimisation) in order to generate a Pareto-front that optimises both propellant and total mission duration simul-taneously. The results are presented and discussed.
 of trajectories of launchers, usually RLV re-entry ( Coverstone et al., 2000 ; Calise and Brandt, 2004 ; Gang et al., 2005 ). Multi-objective GA optimisations of low-thrust interplanetary spacecraft missions are presented in Becerra et al. (2005) , Izzo (2006) , Izzo et al. (2006) , Pamadi (1995) , Rauwolf and Coverstone-C (1996) , Vasile et al. (2005) , Vasile and DePascale (2006) and Vasile et al. (2006) .Ahybrid multiobjective optimisation algorithm is presented in Vasile and
Zuiani (2010) . In most of these implementations the objective is to minimise the propellant required for the ascent trajectory from the surface of the Moon, between Ear th and Mars, and for developing comet sample return missions.
 There is an extensive collection of single objective Particle Swarm Optimisation (PSO) algorithms ( Eberhart and Shi, 2001 ;
Engelbrecht, 2005 ; Kennedy and Eberhart, 1995 ). A study and comparison between several optimisation algorithms is presented in Vasile et al. (2010) and Di Lizia and Radice (2004) . The usage of
Multi-Objective Particle Swarm Optimisation (MOPSO) algorithms ( Alvarez-Benitez et al., 2005 ; Fieldsend and Singh, 2002 ; Li, 2004 ;
Parsopoulos and Vrahatis, 2002 ; Reyes-Sierra and Coello, 2006 )is quite promising; however the optimisation of interplanetary tra-jectories using MOPSO is quite scarce to date. There are some papers related to interplanetary missions and low thrust, non-keplerian orbits, reflecting an increasing interest during the last decade in evolutionary techniques, as an efficient optimisation tool and Alonso, 2005 ). Evolutionary neurocontrol is analysed in
Dachwald (2005) , while in Gaylor (2000) there is an interesting development of formulae to handle low thrust orbits using the Lagrange planetary equations. A Pareto GA is applied in Alonso and
Santos (2010b) and Hartmann et al. (1998) to the optimisation of interplanetary trajectories. Gravity assists and low-thrust trajec-tories are combined in McConaghy et al. (2003) and Vasile and
DePascale (2006) . Particularly interesting is the exponential sinu-soid approach to optimise low-thrust trajectories as explained in
Izzo (2006) and Vasile et al. (2005) , which is valid as an initial nearly-analytical guess for further refined solutions, saving time for otherwise time-consuming numerical simulations based on artifi-cial intelligence (AI) optimisation algorithms. Following this approach, a shape-based algorithm is presented in Petropoulos and Longuski (2004) . More information on global optimisation for Mission Analysis can be found in Myatt et al. (2004) .
This work presents the optimisation using a PSO algorithm of the total delta-V of two interplanetary missions: from Earth to
Jupiter (EMJ) and from Earth to Saturn (EVVEJS). The gravity field of intermediate bodies is used to accelerate the spacecraft, low-ering the propellant cost of the mission and reducing weight at launching. The same two trajectories are analysed with a MOPSO algorithm as well, finding a trade-off between fuel consumption and mission duration, and providing a Pareto-front.

A realistic model of the Solar System has been implemented using the data from the Jet Propulsion Laboratory JPL ( Standish, 2010 ). For the EVJ mission, a first delta-V is applied when the spacecraft is in a
Low Earth Orbit (LEO) around the Ear th (departure orbit), in order to reach planet Mars after a given ti me of flight. The gravity field of
Mars is used to modify the direction and speed of the probe, with the support of an additional delta-V provided by the engines of the spacecraft. Finally, after leaving Mars, the spacecraft follows a trajectory to Jupiter. Once arrived at this final destiny, the probe may continue its journey leaving the Solar System in case of a hyperbolical trajectory, or turning around the Sun in case of an elliptical orbit. A third delta-V manoeuvre may be applied to reduce the speed and to achieve an orbit around Jupiter. Analogously, for the EVVEJS mission, a first delta-V is applied to leave the LEO around the
Earth, in order to reach Venus. Two fly-bys are performed in Venus, then one in the Earth and finally in Jupiter, before arriving to Saturn.
The paper is organised as follows. Section 2 describes the models of the system. Section 3 shows the application of the PSO algorithm to the optimisation of the interplanetary trajectory, while the application of the MOPSO algorithm is presented in
Section 4 . Results are compared and discussed in Section 5 . The paper ends with the conclusions. 2. Description of the model The model of the whole system has been implemented in Matlab &amp; . It includes the Solar System and the spacecraft. The main parameters of the model such as the ephemeris of the planets, the Keplerian elements and their rates, etc., are calculated from tables and formulae provided by Standish (2010) .

With the purpose of modelling the departure, arrival and fly-by manoeuvres of the probe at each planet, these planets are mod-elled as dimensionless points of mass. In fact, the longest planetary radius in the Solar System corresponds to Jupiter (66,850 X  71,500 km), and this is much shorter than any of the major semi-axes of the patched conic orbits involved in the analysed interplanetary mission (for example, the perihelion of the Earth X  X  orbit is around 147 10 6 km). As a result of the comparison of these dimensions, it is possible to conclude that, for a mission analysis optimisation, the dimensions of the planets are irrelevant.
The departure from the Earth at epoch t E , to reach a planet P1 (Mars or Venus) after a certain time t EP1 , requires an arc of an orbit around the Sun, that is defined by the heliocentric velocities at departure from Earth v 1, EP 1 and arrival to Mars or Venus v required thrust at the Earth D v E must achieve v 1, EP 1 account the velocity v Earth of planet Earth. In order to calculate v and v 2, EP 1 , the Gauss X  problem must be solved ( Bate et al., 1971 ). In this case we have applied a robust algorithm based on Battin (1999) . Considering that the probe departs from a given LEO around the Earth, the initial speed of the probe respect to the Earth, v around 8 km/s. It is assumed that thi s velocity has the right direction so the initial delta-V is reduced. Eq. (1) can be used to calculate the required delta-V D v E to achieve v 1, EM and to leave the Earth D v
The gravitational assistance manoeuvre consists of using the gravity field of a planet  X  Venus, Earth, Mars and Jupiter, in this article  X  to accelerate the probe. The final value and direction of the velocity depends on the approaching and leaving directions respect to the planet. For example, considering the size of the trajectories from Earth to Mars and from Mars to Jupiter, planet Mars may be considered in our models as a dimensionless point of mass at which the spacecraft changes its velocity instantly due to this gravitational assistance. Same conclusions are reached when comparing the size of any other planets to that of the interplanetary trajectories. Knowing the arrival velocity v planet Px, it is possible to calculate the absolute value of the departing speed respect to Px after performing a gravitational assistance, v 1, PxPy . This is the initial velocity at the beginning of the arc from planet Px to next planet Py. This reasoning can be repeated for each of the planets visited during the mission. The thrust D v Py for leaving Py at the proper velocity v 1, PyPz obtained from (2) v where v 2, PxPy is the velocity of the probe with respect to the heliocentric reference system, when approaching Py after leaving Px. The thrust for D v Py is produced at the perigee of the hyperbo-lical trajectory around the planet, so its effects are maximised. Solving the Gauss X  problem for the trajectory from Mars to Jupiter (given a time of flight t MJ ) leads to the calculation of velocities at the beginning and at the end of this trajectory, v and v 2, MJ , respectively. Analogously, the Gauss X  problem can be solved for trajectories from Earth to Venus, from Venus to Venus after some number of orbits around the Sun (less than one, in our case), from Venus to Earth, from Earth to Jupiter and finally from Jupiter to Saturn. The solution of the Gauss X  problem may involve, if desired, several orbits around the Sun, however such analysis has not been considered in this article.

A final delta-V D v J (3) is necessary if an orbit around Jupiter is required. This is not necessary if the probe visits Jupiter and then goes away. An analogous formula to (3) can be applied for Saturn D v
Regarding the EVJ mission, the decision variables for the swarm algorithms are the date of departure, t E , the Earth-to-Mars time of flight (TOF), t EM , and the Mars-to-Jupiter time of flight t .

Analogously, the decision variables for the EVVEJS mission are the date of departure, and the times of flight between planets: Earth-to-Venus, Venus-to-Venus, Venus-to-Earth, Earth-to-Jupiter and
Jupiter-to-Saturn. The purpose of the PSO is to minimise the total delta-V D v Total (4) spent in the whole interplanetary mission D v
In the case of the MOPSO, both the total fuel budget D v Total and the total time of flight of the mission, t Total (5), are considered when building a Pareto-front of possible solutions t
Also note that, due to the extremely slow variation of all the planetary orbital elements (except obviously the mean longitude), the effect of the variations in the velocity of the planet can be ignored ( Elices, 1991 ; Standish 2010 ).
 For a complete description of the models, see Alonso and
Santos (2010c) . 3. Application of the particle swarm algorithm (PSO)
A major difficulty when optimising parameters in a launch mission is to provide algorithms that converge towards an optimum. Exhaustive search of all possible solutions is highly time-consuming, no realistic and unaffordable, except for very simple cases. In general, using an algorithm based on an intelli-gent exploration of solutions such as GA ( Goldberg, 1989 )or
Particle Swarm Optimisation is necessary. PSO is a population-based, swarm intelligent, search algorithm based on the simula-tion of the social behaviour of birds within a flock or any other swarm organism ( Kennedy and Eberhart, 1995 ), using physical movements of the individuals within the swarm. Many different techniques can be applied to implement PSO, so the evolutionary mechanism of the swarm algorithm adapts to the global and local exploration of the search space. Whereas other evolutionary algorithms are based on parent representation and selection of individuals, PSO and Multi-Objective PSO (MOPSO) rely on leaders to guide the whole population. PSO refers to single-output analysis, while MOPSO refers to PSO when more than one output is available ( Alvarez-Benitez et al., 2005 ). One of the first works on swarm algorithms is reported in Kennedy and Eberhart (1995) .
A survey of the state-of-the-art of particle swarm optimisation is summarised in Reyes-Sierra and Coello (2006) . A comparison of multiobjective evolutionary algorithms is presented in Zitzler et al. (2000) , while in Li (2004) some suggestions are explained for improving both spread and convergence in swarm algorithms and Pareto-fronts. Data structure and turbulence concepts are applied to swarm algorithms in Fieldsend and Singh (2002) .
The PSO implemented in this work has been applied to different scenarios (EMJ mission with 400 individuals; EVVEJS mission with 1000 and 10,000 individuals). The algorithm has been executed 250 times with different initial seeds for the random numbers generator, in order to obtain statistically significant results. This number of executions is above that suggested in Minisci and
Avanzini (2009) , however an agreement on a good number of executions is uncommon and require an exhaustive analysis of the problem, the type of implemented PSO, the tuning parameters of the algorithm, and experience. Analogously, there is not a single criterion to agree in a certain number of iterations, however a criteria of 100 iterations without further improvement have been accepted as in Alonso and Santos (2010a , 2010d ). Stagnation is not possible due to the turbulence term in Eq. (7).
 been considered (6), in order to minimise the total delta-V, D v z  X  1 = D v Total  X  6  X  variables (a vector containing date of departure and times of flights between each pair of planets along the considered inter-planetary mission). The updated position of every i -th individual after the k -th step can be described with the general formulae (7) and (8) where, v i , k is the velocity vector of the i -th individual in transition from step k 1 to step k , w is a damping factor, c i , j are random numbers, c 0 is a random number (sometimes called  X  X  X urbulence factor X  X ) that introduces a random component into the updated final position of each individual, similar to mutation in Gas, x the j -th leader for the i -th individual; in our case, there is one leader for the whole population, and one personal leader for each individual, based in its best historical achievement and x position (decision vector) of the i -th individual in k -th step. in the population, and the position of each individual is changed by weighting the current distance to each leader with some random numbers, and combining these weighted distances into a single vector that represents the change in the position of the individual in the space of input variables. A damping factor is applied to the velocity, so it does not take too high values. With the same purpose, a saturation for each component of the velocity has been implemented.
 according to upper and lower boundaries that change dynami-cally in every step, proportionally to the current distance from those limits to the components of the global leader of the population. With the right adjustment, these dynamic limits encourage a slow approach to the leader and a better scanning of the space of variables around it. As a result, at the beginning of the execution of the PSO algorithm, a broad area of the space of input variables is scanned; after a big number of steps, the PSO algorithm focuses on the region where the leader is, refining its values and finding new leaders. This approach assumes that after a number of steps the position of the optimum solution is no far from the leader and only works if there are not several nearly optimal solutions. As a matter of fact, the three solutions given in
ACT-Informatics (2011) for the Cassini mission are concentrated in the same region of input variables.
 obvious to define the leaders for each individual, and there are many different criteria in scientific articles, using local leaders, past history of each particle, etc. Nearly all PSO approaches use as one of the leaders the individual with the best global results in the population. There are other interesting considerations when designing a PSO algorithm, such as distribution of random weights, dynamic assignment of leaders, turbulence factors, etc.
Turbulence, as random decision components such as variable mutation rates in GAs ( Santos and Cantos, 2010 ) leads to inter-esting results. Two leaders have been considered in (7): the best global solution and the best historical solution for each individual (sometimes known as  X  X  X ersonal X  X  solution). These leaders are weighted according to random numbers, taken from a uniform distribution between 0 and 1. This approach yields to compute the change in position for each individual according to (9) v where, c 1 and c 2 are random numbers, selected from an uniform distribution between 0 and 1, x i , leader is the global leader of the population, which is the same for all the individuals and x the best historical  X  X  X ersonal X  X  solution of the i -th individual.
The steps of the algorithm are the following: (1) Randomly initialisation of vectors x i , 1 . (2) Find the best solution, which will be used as global leader for the whole population, according to the best value of
Eq. (6). (3) Calculate the limits of the decision variables, according to their current position and the position of the leader. (4) Calculate the velocity for each individual in the population, according to Eq. (7). (5) If any of the components of the velocity are beyond some limit, its value is set to the limit. (6) Update vectors x i , k according to Eq. (8). (7) If any of the components of x i , k are outside some limits, its value is set to that limit. (8) Repeat steps 2 X 7 until convergence is achieved. As explained above, we used a certain number of iterations without improvement to assume convergence is achieved.

Whereas this and other approaches lead to good results, there has been already some investigation in order to further improve the PSO algorithm, and in order to tailor the design of the swarm algorithm to the characteristics of the analysed problem and eventually leading to some general approach for interplanetary trajectory optimisation that up to date is missing in literature to the best of our knowledge.
 The initial limits of the decision variables are shown in the
Tables 1 and 2 ( Section 4 ), and they are changed dynamically. 4. Application of the multiple output particle swarm algorithm (MOPSO)
Multiobjective optimisation problems are quite common in every area of knowledge ( Fonseca and Fleming, 1998 ; Zitzler et al., 2003 ). In such problems, the objectives to be optimised are normally in conflict with respect to each other, hence there is not a single solution for these problems. Traditionally, multiobjective optimisation problems are solved with multi-input, single-output target functions, combining all the objectives into just one formula to be optimised. This approach has been proved to be useful in many problems, but it is not always easy to find the best fitness function, being a more interesting approach to obtain a global view of all the different dominant solutions, presented as Pareto-fronts.
Such global view may be particularly necessary when analysing the influence of the variations of some inputs in all the outputs.
Whereas this analysis can be made for single-output functions (applying gradient methods, for instance), some difficulties may arise when there are many variables, local solutions or disconti-nuities. Swarm algorithms avoid these drawbacks and support the multi-output, Pareto-front concept better than other AI algorithms ( Coello Coello and Lechuga, 2002 ; Coello et al., 2007 ).
The optimisation function in a general multiobjective mini-misation problem may be written as in (10) y  X  f  X  x  X  X  X  f 1  X  x  X  , f 2  X  x  X  , ::: , f k  X  x  X  X  10  X  where x  X  X  x 1 , x 2 , ::: , x n is the vector of decision variables and y  X  X  y 1 , y 2 , ::: , yn is the vector of outputs.

If (10) cannot be analytically evaluated (like in this article), it is mandatory to use some numerical calculations and iterative processes in order to find the optimum solution. Given two different potential solutions, represented as vectors y A dimension N , the first vector would be dominant with respect to the second one if (11) is verified. If the inequality is strictly fulfilled, then y B is called a dominated solution y
A , i r y B , i for i  X  1 , ::: , N  X  11  X  where y A , i and y B , i are the components of y A and y
Note that minimisation problems are considered here, without loss of generalisation, as (10) and (11) can be easily adapted to maximisation ones. Dominated solutions are not interesting in optimisation problems, as the interpretation of (11) is that solution y A is better than y B for all components. Therefore, y can be discarded. However, it may happen that y A surpassed y only some (but not all) outputs, and vice versa; in that case, y and y B are both non-dominated solutions to each other, and both may offer interesting properties and results.

The aim of the MOPSO is to find a set of non-dominated solutions (Pareto-front), which have to be saved in some data structure during the execution of the algorithm. The size of this structure may grow in size very quickly, as more non-dominated solutions are found in every step. After each step, the new position of the individuals in the population must be compared to every solution in the Pareto-front, to perform some substitu-tion if necessary. This increases the complexity and the computa-tional time in every step, as the Pareto-front becomes bigger. In order to ensure that solutions are varied and heterogeneous, some mechanism must be used so the distribution of the decision vectors in the Pareto-front is smooth and uniform. Dealing with these three issues (size of the Pareto-front, comparison of Pareto-front to individuals in the population, and mechanism to ensure a smooth distribution) lead to establish a limit of the number of solutions in the Pareto-front. Individuals with new positions in the space of input variables become candidates to join the Pareto-front, if they are non-dominated with respect to any other Pareto-front solution. Before they finally join the Pareto-front (discarding some other solution already in the Pareto-front), a comparison is performed between the candidate to join and the candidate to be dismissed, in terms of distances to other solutions in the Pareto-front. The substitution is performed by considering only the longest distance, so the density in the Pareto-front is kept as low as possible. In spite of this technique, that ensures some variety of the solutions, sometimes the Pareto-front is not as broad as expected, due to isolated solutions and strong disconti-nuities in global, single-output optima.

In this article, the aim is the intelligent optimisation of interplanetary trajectories from the Earth to Jupiter or Saturn, using a swarm-based Pareto-front technique, and applying fly-bys in other planets. The decision variables of the swarm algorithm are the date of departure, t E , and the time of flight between planets. The MOPSO algorithm provides a useful Pareto-front of non-dominated solutions, from which the user may decide, which solution or set of solutions are the most appropriate to design the Earth-to-Jupiter or Earth-to-Saturn mission. That decision is based on the obtained delta-V and total time of flight of the mission. In fact, the consideration of non-dominated solutions is useful for analysing the trade-off between these two output variables. For example, some optimum solution may require the lowest delta-V but at the expense of a higher total time of flight, while some other solution may reduce the time of flight but increasing the delta-V. Indeed, a Pareto-front ( Figs. 8 and 10 )isan excellent asset for this trade-off analysis.

Two leading vectors are considered for each individual: the  X  X  X est nearest solution X  X  and the  X  X  X est historical solution X  X  achieved by each individual (sometimes known as the best  X  X  X ersonal X  X  solution). The concept of  X  X  X est X  X  is not clearly defined in multi-objective problems as more than one output is computed. In our algorithm, given any individual, the nearest non-dominated solution (i.e., the nearest solution of the Pareto-front) will be considered in calculations and taken as one of the two leaders (best nearest solution). The best historical solution for an indivi-dual is taken as the latest decision variable vector achieving a historically non-dominated output for that individual. For each individual in the population, both leaders (which differ from one individual to another) are combined to define a certain  X  X  X elocity X  X  in the space of input variables (i.e. a change in the decision vector), according to (12). In the next iteration, the position of the individual in the space of input variables is updated by (13) v x where, v i , k is the velocity vector of the i -th individual in transition from step k 1 to step k , w is the damping factor, c 1 and c random numbers, selected from an uniform distribution between 0 and 1, x i , leader is the nearest Pareto-front solution respect to the i -th individual, x i , pbest is the latest, historically non-dominated solution of the i -th individual and x i , k is the position (decision vector) of the i -th individual in k -th step.

The steps of the algorithm are the following: (1) Randomly initialisation of vectors x i , 1 . (2) Fill the Pareto-front archive with non-dominated solutions, (3) For each individual, find the nearest individual in the Pareto-(4) For each individual, find if the current position dominates (5) Calculate the velocity for each individual in the population, (6) If any of the components of the velocity are beyond some (7) Update vectors x i , k according to Eq. (13). (8) If any of the components of x i , k are outside some limits, its (9) For each individual, find which Pareto-front individuals are (10) Repeat steps 2 X 9 until convergence is achieved. As explained
The MOPSO algorithm in the case of EMJ considers 1000 individuals (also known as particles) and 1000 steps, leading to quite interesting results. A more exhaustive analysis has been performed for the more complex EVVEJS mission, varying size of both population and Pareto-front archive. The limits of the decision variables are fixed ( Tables 1 and 2 ). Whereas this approach has been proved successful, there is some on-going researching in order to tailor the parameters of the MOPSO algorithm to the optimisation problem of interplanetary trajec-tories, and to improve the results provided by the Pareto-front.
The MOPSO algorithms have been executed 250 times in order to obtain statistically significant results. This number of executions is above that recommended in Minisci and Avanzini (2009) . to the smaller number of dimensions of that problem. The high number of dimensions in the EVVEJS mission optimisation problem forces us to restrict the limits, which were taken from
ACT-Informatics (2011) . 5. Comparison and discussion of the results obtained by GA,
PSO and MOPSO 5.1. Single output optimisation (SOO) 5.1.1. EMJ mission
Santos (2010d) is shown in Fig. 1 (dashed line), where the orbits of the planets Earth, Mars and Jupiter have also been represented for the possible range of times (solid line). The positions of Earth,
Mars and Jupiter are shown at departure, gravitational assistance and arrival, respectively. The total delta-V is 9.32 km/s. When arriving to Jupiter, an alternative to orbiting around this planet is to continue the journey without applying the last thrust, in which case the total delta-V is 4.97 km/s. Number of evaluations of the target function was 100,000.
 times in order to find statistically significant results. Fig. 2 shows the delta-V against the number of iterations, being the covariance 0.14 km/s, then suggesting a small correlation which is however not necessarily significant. The worst optimised value of delta-V is 10.04 km/s, and the best one 9.43 km/s. The mean value of these maximum and minimum optimised values is 9.74 km/s, while the mean value of all the optimised values is 9.72 km/s, and the standard deviation is merely 0.097 km/s. Number of execu-tions of the evaluation function has been 132,000.
 shown in Fig. 3 (dashed line), where the orbits of the planets Earth, Mars and Jupiter for the possible range of times (solid line) are also represented. Again, the positions of Earth, Mars and
Jupiter are shown at departure, gravitational assistance and arrival, respectively. The total delta-V is in this case 9.43 km/s.
When arriving to Jupiter, if the probe goes away, the last thrust is not necessary and then the total delta-V is reduced to 5.01 km/s. 5.1.2. EVVEJS mission
A more complex mission has been analysed, based in Cassini ( ACT-Informatics 2011 ). This mission leaves the Earth, performs two fly-bys in Venus, one in the Earth, one in Jupiter and finally reaches Saturn. The delta-V has been computed as if a final LEO were achieved in Saturn. The PSO has been run 250 times in order to achieve statistically significant results.

First, the PSO included 1000 individuals. Fig. 4 shows the optimised delta-V against the number of iterations. The worst optimised value of delta-V is 6.85 km/s, and the best one 6.42 km/s.
The mean value of these maximum and minimum optimised values is 6.66 km/s, while the mean value of all the optimised values is 6.58 km/s, and the standard deviation is merely 0.13 km/s. The best solution trajectory is represented in Fig. 5 , for which duration is 5501 days.
 A second batch of runs was performed with 10,000 individuals. Fig. 6 shows the optimised delta-V against the number of iterations. The worst optimised value of delta-V is 7.70 km/s, and the best one 5.43 km/s. The mean value of these maximum and minimum optimised values is 6.57 km/s, while the mean value of all the optimised values is 6.67 km/s, and the standard deviation is 0.43 km/s. Fig. 7 shows the best trajectory obtained with PSO, for which the duration is 6446 days. 5.2. Multiple output optimisation (MOO) 5.2.1. EMJ mission
The set of non-dominated solutions (Pareto-front) provided by the application of the MOPSO algorithm to the interplanetary trajectory defines the evolution and organisation of the indivi-duals (swarm particles), as clearly appreciated in Fig. 8 , where obtaining the actual Pareto-front is trivial. Many individuals are grouped around the coordinates of delta-V 10 km/s and mission duration 5000 days, quite in line with the results obtained by PSO and GA. However, in spite of the high number of individuals, no one has reached the optimum delta-V and mission duration solution provided by the single optimisation PSO and GA algo-rithms, due to the much larger area of the space of output variables covered by the multiobjective analysis (two output variables, rather than one), hence the less intensive exploration of possible solutions. Therefore, whereas the Pareto-front pro-vides a useful view of possible non-dominated solutions, some further optimisation may be required once the user has chosen one of those solutions. In particular, populating the edges of the
Pareto-front for SOO analysis is not trivial and lead normally to poor results ( Reyes-Sierra and Coello, 2006 ).

Fig. 8 is a quite useful plot for mission design and can be used as an initial step to further optimise the interplanetary trajec-tories with single or multiobjective algorithms. For instance, the mission design team may choose some adequate combination of delta-V and mission duration that fits some requirements, and then continue and develop their work from that area of the space of output variables using other optimisation techniques. Ideally, the Pareto-front should be a set of all the non-dominated solu-tions of the optimisation problem, so the MOPSO algorithm provides a Pareto-front further down and left in Fig. 8 , with a better and smoother distribution. While this is not always possible due to the strong discontinuities of the analysed inter-planetary problem, some future work is planned in order to improve the behaviour of the MOPSO and to tailor its design and adapt its parameters to interplanetary mission design. the range of delta-V around 10 km/s and mission duration 5000 days. This particular solution gives a total delta-V of 9.61 km/s.
When arriving to Jupiter, an alternative to orbiting around this planet is to continue the journey without applying the last thrust, in that case the total delta-V is 5.22 km/s. This interplanetary trajectory is only one of the many calculated by the MOPSO. 5.2.2. EVVEJS mission
An exhaustive analysis has been performed of the MOPSO algo-rithm applied to a EVVEJS mission, varying number of individuals of the whole population (20, 50, 75, 100, 200, 400) and the size of the Pareto-front archive (20, 50, 75). The results are shown in Fig. 10 .
Note that in some cases the Pareto-front archive became stable (over 100 iterations without changes). However not all of the solutions in that archive were part of a real Pareto-front, i.e., not all of them were non-dominated. Populations of 50, 75, 200 and 400 have obtained good results, especially if the Pareto-front archive had a size of 50 or 75 individuals. Poorer results were obtained with only 50 individuals in the Pareto-front. Unfortunately, as explained above, SOO solutions are normally not possible in MOO analysis, thus the SOO solutions obtained above (or similar) do not appear in Fig. 10 . If the Pareto-front is extended left and up, this SOO solutions would appear in the edge of such front. Obviously, if a SOO solution is desired, then a SOO technique should be used. The MOO techniques are appropriate to design a mission when there are concerns about the total time mission, and not only the total delta-V (for instance, human flight missions). While the criteria to define convergence may result arbitrary and should be study in its own, to the best of our knowledge there are not such a study and the situation has not changed with respect to that reported in Reyes-Sierra and Coello (2006) . For completeness, an arbitrary s olution has been chosen from the Pareto-front, near the lower-left  X  X  X orner X  X , obtained with 400 indi-viduals, and a Pareto-front archive of size 50. For this solution, the delta-V is 7.88 km/s and the mission duration is 1361 days ( Fig. 11 ). 5.3. Comparison of simulation results 5.3.1. EMJ mission
Table 3 summarises the results obtained by the application of the GA and PSO, also including the values computed with the Hohmann transfer ( Elices 1991 ). The Hohmann transfer is a two-impulse transfer between two different coplanar circular orbits, and it is an optimum impulsive transfer manoeuvre if the radius of the final orbit is less than 15.6 times the radius of the initial orbit (Jupiter and Saturn fulfil this condition). Although the orbits of the Earth, Jupiter and Saturn have different inclinations and are not perfectly circular, the calculation of the total delta-V of a Hohmann transfer provides a quite realistic idea of the delta-V required for such an interplanetary mission, in case an optimum direct transfer were applied. In Table 3 , the values of delta-V for the optimised EMJ mission, at departure from the Earth, after the gravitational assistance in Mars, and at arrival to Jupiter, are also presented. It is not possible to perform an appropriate compar-ison between single output and multioutput solutions for the same problem, as the purpose of SOO and MOO are conceptually different. In a previous section, an arbitrary trajectory was selected of the many contained in the Pareto-front, and the results are presented in Table 3 for completeness.

In all cases the gravitational assistance in Mars is useful to significantly reduce the fuel budget. Each of the delta-Vs at departure and arrival are lower in case of a fly-by in Mars, while the delta-V after the gravitational assistance is also relatively small.
This means that smaller engines will be required for the probe, which is an additional and important advantage respect to applying a Hohmann transfer, as pointed out in Alonso and Santos (2010d) .
Moreover, the multiobjective analysis and Pareto-front approach are very useful to provide a wider view of all the possible solutions, so the optimum can be chosen by the mission design team without any constrains such as past experience or single objective decision.
The total propellant shown in Table 3 (last column) refers to the case when the spacecraft remains orbiting around Jupiter. In case it continues the journey without applying the last thrust, the total delta-V would be smaller in all the cases, but the conclusions are the same.

Regarding the mission duration, Table 4 presents the results obtained by each optimisation technique for the interplanetary trajectory. The departing date is calculated as number of days after J2000 ( Aoki et al., 1983 ). Results of the arbitrary trajectory chosen from the Pareto-front obtained with MOPSO are also included in Table 4 for completeness; however, as explained above, comparisons between SOO and MOO are misleading.
The first conclusion that can be drawn from Table 4 is that the mission duration and launch epoch may strongly vary. Quite a different launch epoch is reasonable due to the periodical nature of this input parameter. This departing date is expected to be periodical as the relative positions of Earth, Mars and Jupiter are repeated over time. Therefore, even very different launch epochs are reasonable and expected.

The time of flight (TOF) for GA, PSO and MOPSO is quite big in comparison to the Hohmann transfer. This is reasonable and expected as the interplanetary trajectory involves a gravity assistance in Mars, thus the date is strongly constrained and the launch window is less flexible than in the case of a direct
Hohmann trajectory. Nevertheless, a lower TOF could be achieved at a higher consumption of fuel (higher delta-V) as appreciated in the Pareto-front in Fig. 8 .
 to the periodical movement of the planets) is better appreciated in a Pareto-front where all those solutions are shown, than if only one
SOO solution is provided. Whereas single optimisation problems can be useful under some circumstances, Pareto-front analysis provides a much wider view. Indeed, GA and PS O provide one possible solution, but the mission designer has no opportunity to analyse other possible solutions, i.e., at different launch epochs. This analysis could be performed by running GA, PSO or any other single optimisation algorithm several times with different constrains for launch epochs, based on the experience of the mission design team. However, a more structured and highly automatic approach is provided by
MOPSO, as the Pareto-front is useful to support decisions for such open problems with many differe nt possible solutions. The high potential of a powerful tool based on Pareto-fronts is quite interest-ing so the experience of the mission design team is not the limiting factor in interplanetary analysis and planning. The trajectory obtained by the MOPSO algorith m must be compared bearing in mind that this is just one of the many trajectories provided by the
Pareto-front, chosen for comparison purposes as it is in the same range of output values than the other solutions by GA and PSO. 5.3.2. EVVEJS mission tion of the PSO algorithm to the EVVEJS mission, with 1000 and 10,000 individuals. Table 5 also includes the values computed with a Hohmann transfer. For completeness, information on the arbitrary trajectory chosen from the Pareto-front generated by MOPSO is also presented in the table.
 useful to significantly reduce the fuel budget. Analogously to the EMJ mission, each of the delta-Vs at departure and arrival in Earth and
Saturn are lower in case of fly-by in Venus, Earth and Jupiter, while the delta-V after each gravitation al assistances are also relatively small, allowing smaller engines for the probe as an added value with respect to a Hohmann transfer. Once again, the multiobjective analysis using the Pareto-front approach is very useful to provide a wider view of all the possible solutions, but comparisons between SOO and MOO results are not strictly relevant beyond mere curiosity. spacecraft remains orbiting around Saturn. In case it continues the journey without applying the last thrust, the total delta-V would be smaller in all the cases, but the conclusions are the same. technique for the interplanetary trajectory. The departing date is calculated as number of days after J2000. Results from the arbitrary trajectory chosen from the Pareto-front obtained with MOPSO are also included in Table 6 for completeness; however, as explained above, comparisons between SOO and MOO are misleading.
Unlike the case of the EMJ mission, the higher number of involved planets strongly decreases the periodicity of the system, so in this case all the launch dates are quite similar. This similarity would disappear, if the launch date range scanned by the PSO and MOPSO algorithms were broader enough. Like in the
EMJ mission, the Hohmann transfer yields to shorter mission durations. Once again, the structured and highly automatic approach provided by MOPSO is an asset when analysing multiple constraints in mission design, providing a tool that facilitates the vision of several possible solutions at one glance. 6. Conclusions
Two swarm particle optimisation algorithms, one single objec-tive (PSO) and one multiobjective (MOPSO) are analysed and applied to optimise the manoeuvres involved in interplanetary trajectories. Two missions have been studied: EMJ, and EVVEJS.
Satisfactory results have been achieved in comparison to the optimum Hohmann transfer. The relatively low thrust at each stage (departure, gravitational assistance and arrival) is useful to reduce the size of the spacecraft X  X  engines.

The two swarm algorithms have provided interesting results in the case of an EMJ mission. While the PSO provides similar results than GA, the MOPSO algorithm in creases the searched area in the space of output variables and provides a better view that may be used for further optimisation with sing le or multiobjective algorithms.
The two swarm algorithms were also successful in the case of an EVVEJS mission. Variable limits were implemented in the SOO case for each of the decision variables, approaching the best solution while scanning its surroundings more accurately as the algorithms goes on. In the case of MOO, several Pareto-fronts have been obtained based on different sizes of population and Pareto archive.

The results for all the cases has been presented and discussed with plots and numerical data.

Future works are recommendable in order to improve the behaviour of the PSO and the MOPSO. Whereas the results of PSO were satisfactory, some tailoring of the algorithm to interplane-tary missions may be an interesting improvement both in computing time and results. Similarly, whereas the results of
MOPSO were also interesting when obtaining the Pareto-front of non-dominated solutions, some modifications and tailoring to interplanetary missions is worth in order to improve the compu-tation of the Pareto-front towards further optima non-dominated solutions, and to smooth the density of the Pareto-front. Indeed, the results presented in this article are quite promising and open branches to several lines of investigations for optimisation of interplanetary trajectories based on swarm algorithms. Acknowledgements
This work is partially supported by Spanish Project DPI2009-14552-C02-01.
 References
