 This paper studies web object classification problem with the novel exploration of social tags. Automatically classi-fying web objects into manageable semantic categories has long been a fundamental preprocess for indexing, browsing, searching, and mining these objects. The explosive growth of heterogeneous web objects, especially non-textual objects such as products, pictures, and videos, has made the prob-lem of web classification increasingly challenging. Such ob-jects often suffer from a lack of easy-extractable features with semantic information, interconnections between each other, as well as training examples with category labels.
In this paper, we explore the social tagging data to bridge this gap. We cast web object classification problem as an optimization problem on a graph of objects and tags. We then propose an efficient algorithm which not only utilizes social tags as enriched semantic features for the objects, but also infers the categories of unlabeled objects from both ho-mogeneous and heterogeneous labeled objects, through the implicit connection of social tags. Experiment results show that the exploration of social tags effectively boosts web ob-ject classification. Our algorithm significantly outperforms the state-of-the-art of general classification methods. H.2.8 [ Data Management ]: Database Applications X  Data mining ; H.4.0 [ Information Systems Applications ]: Gen-eral Algorithms, Experimentation The work was supported in part by the U.S. National Science Foundati on grants IIS-08-42769 and BDI-05-15813, IBM 2008 ESA Innovation Faculty Award, and the Air Force Office of Scientific Research MURI award FA9550-08-1-0265. Any opinions, findings, and conclusions expressed here are those of the authors and do not necessarily reflect the views of the funding agencies.
 Web classification, Social tagging, Optimization
Beyond textual web pages, various genres of web objects become increasingly popular, which makes the Web more vivid than ever before. Indeed, millions of products are be-ing sold on Amazon (www.amazon.com); millions of videos are being uploaded to YouTube (www.youtube.com) every month; millions of research papers are referenced on Ci-teULike (www.citeulike.com); and billions of photos are up-loaded to and collected by Flickr (www.flickr.com) and Face-book (www.facebook.com). There is an urgent need to ef-ficiently index and organize these web objects, to facilitate convenient browsing and search of the objects, and to ef-fectively reveal interesting patterns from the objects. For all these tasks, classifying the web objects into manipulable semantic categories is an essential preprocessing procedure. Imagine a user who visits Amazon and looks for a DVD of  X  X arry Potter X , then the fifth book of the  X  X arry Potter X  series, and then a  X  X arry Potter X  costume for a Halloween party, he is able to find the first item in the department (category) of  X  X ovies &amp; TV X , the second item in the de-partment of  X  X ooks X , and the third item in the department of  X  X pparel &amp; Accessories X .

The general problem of text classification is well studied in literature. Classification of web objects, however, is a much more challenging task due to the specific characteristics of the data. The reasons are listed as follows. 1. Lack of features . Unlike text documents, web objects can-not be easily represented in a meaningful feature space.
The limited text description (e.g., the name of a product on Amazon or the title of a picture on Flickr) is usually too sparse to provide enough semantic features. Content features of images or videos on the other hand, usually cannot be extracted in an accurate and efficient way. 2. Lack of interconnections . Web objects often exist in iso-late settings, where interconnections between each other are both limited and untrustful. It is quite obvious to a human user that a video of Michael Jordan playing bas-ketball should be put in the same category of a video of
Kobe Bryant. This is however not so obvious to an au-tomatic classifier which simply focuses on titles. Instead, it may mistakenly match the basketball video with the
Berkeley professor Michael Jordan teaching a class. 3. Lack of labels . Good classification performance relies on a reasonable amount of training examples. However, web Figure 1: Social tagging in heterogeneous domains.
It is therefore desirable to find a treatment of all these deficiencies, which could bridge the gap between the limited text description of web objects and the rich semantic feature space, between the isolated settings of web objects, and be-tween the unlabeled objects in one domain and the labeled examples in another. In this paper, we show that a new type of data called social tags serves as such an effective bridge, which alleviates all the three problems discussed above.
Along with the burgeoning of the Web 2.0 technology, so-cial tagging has become a common online activity of web users, and has been provided as a critical functionality in various web sites. As shown in Figure 1, heterogeneous ob-jects on the Web are tagged by users, with keywords freely chosen from their own vocabularies. In Flickr, in Ama-zon, and in Delicious(delicious.com), users have provided rich tags for pictures, products, and arbitrary web pages. These tags are effectively utilized for information sharing and retrieval. Moreover, news articles are tagged in Digg (digg.com); blogs are tagged in Technorati (technorati.com); and questions are tagged in Live search QnA (qna.live.com).
All these tags reflect the semantics of the web objects from users X  points of view, using a ubiquitous vocabulary for heterogeneous domains of objects. This property makes social tags an ideal type of data, which overcomes the above difficulties of web object classification. First, a web ob-ject is associated with tagged keywords selected by many users, which provide enriched semantic features for web ob-ject classification. Back to Figure 1, the tags  X  X rt X ,  X  X esign X , and  X  X rchitecture X  are good features to characterize the se-mantics of the book  X  X ncient Greek art and architecture X . Second, through the intermediate connection of tags, a new link structure of web objects (and tags) is established, which makes it feasible to explore the latent relationships between web objects. For example, in Figure 1, although web page P 1 and web page P 3 do not have any tags in common, there is an implicit path from P 1 to P 3 via two tags and P 2 .This provides a way to infer the category of P 3 basedonthecate-gory information of P 1 . Furthermore, since people are likely to tag different types of objects using the similar vocabular-ies, heterogeneous types of web objects are now connected through common tags. This enables us to leverage the la-beled examples from one domain to infer the category labels of objects in another domain. For example, in Figure 1, the book  X  X ncient Greek art and architecture X  and  X  X he art book X  are linked by the common tag  X  X rt X . The tag  X  X rt X  also connects to the web page  X  X ww.art.com X , and a picture in Flickr. If the web page has a category label Fine Arts ,the books and the pictures are likely to be labeled with the same category. We can clearly see that social tags act as a bridge, through which the category information can be transferred between different domains.

In this paper, we innovatively explore social tags for web object classification. We cast the problem of web object classification as an optimization problem on a heterogeneous graph of web objects and social tags. In such a graph, dif-ferent types of social objects are linked with their associ-ated tags. We then propose an iterative algorithm which solves the optimization problem efficiently. In order to eval-uate our proposed model, we per form comprehensive exper-iments on a novel data set which consists of 5536 products from Amazon, and 6123 web pages from ODP. All of them are associated with tags from either Amazon or Delicious. The experiments show that our classification model based on social tagging can solve the above problems in web ob-ject classification effectively, which significantly outperforms the state-of-the-art methods without using tags as bridges.
We summarize our contributions in this paper as follows: 1. Social tags are explored as a novel evidence to classify objects on the web. A new link structure between objects and tags is explored for classification. Tags also act as bridges to connect the heterogenous domains of objects. 2. Web object classification task is innovatively formalized as an optimization problem on the social tagging graph.
An efficient iterative algorithm is proposed to solve the optimization problem. 3. Extensive experiments are conducted to demonstrate the effectiveness of social tags in web object classification.
The paper is organized as follows. In section 2, we review the existing work related to this paper. In section 3, we formulate the web object classification problem. In section 4, we propose our classification algorithm, the effectiveness of which is demonstrated in section 5. We summarize our findings and highlight future directions in section 6.
To the best of our knowledge, this paper is the first work to explore social tag data for web object classification. Some research works have been done in related areas.

Web object classification has been investigated for a long time, especially web page classification [6, 12] and multi-media classification [9, 11]. However, these studies mainly focus on homogeneous objects, and classification algorithms are designed for specific types of data. For web page classi-fication, other than the classical textual feature based clas-sification model [8], hyperlink [3], html meta data [6], and query log [14] are explored to improve classification result. For multimedia objects, both text feature and contextual information extracted from images or videos are combined to boost the performance. Besides, Xue et al. propose an it-erative reinforce categorization algorithm (IRC) [17], which propagates the category information between web pages and their associated web queries based on a set of heuristic rules. Different from the above work, we explore a new resource X  social tag for all kinds of web object classification tasks. We propose a general theoretic framework for explicitly model-ing tagging behaviors and web object classification problem.
Social tag, a new type of user generated data, can bene-fit web search [1, 7], information retrieval [18, 13], semantic web [15], web page clustering [2] and user interest mining [10]. Bao et al. [1] propose an iterative algorithm to propa-gate the popularity within a socially linked graph for ranking web pages. Wu et al. [15] use a probabilistic model to ex-tract semantic concept by exploring the links between tags and pages. However, there is little work on exploring so-cial tagging for general web object classification. Tagging is a kind of  X  X ocial classification X , and is different from tradi-tional information organization mechanism that is referred as  X  X xpert classification X . In this paper, we try to provide a uniform model to bridge  X  X ocial classification X  and  X  X lassical classification X .

Classification is also an active research topic in machine learning. In order to handle the few labeling problem, semi-supervised learning [20, 19] and transfer learning [4, 5] are proposed. Given only a small portion of labeled data and a large amount of unlabeled data, unlabeled data can be com-bined with the labeled data together to improve the accu-racy of the classifier. Zhu et al. [20] formulated the learning problem as a Gaussian random field on a weighted graph of labeled and unlabeled objects. Zhou et al. [19] proposed a semi-supervised learning framework to achieve local and global consistency. Both methods model the classification problem on a graph with objects as vertices. We also use a graph to explicitly model the social tagging behavior and ex-tends the graph with heterogeneous objects. Transfer learn-ing is proposed to use the knowledge from other domains, Xue et al. [16] use topics as bridges to transfer information from the source domain to the target domain by extend-ing the traditional topic model. In this paper, with social tag acting as a bridge, our model can transfer the category information among any tagged heterogeneous non-textual objects effectively.
In this section, we formulate the problem of web object classification as an optimization problem based on a social tagging graph.
Let us start with the definition of the social tagging graph, an illustration of which is shown in Figure 2. There are vari-ous types of objects on the Web. To simplify the discussion, we assume there are two types of web objects: type T and type S .Objectsoftype T are the target objects which we want to assign category labels; whereas objects of type S are labeled objects from another domain. We assume that some objects of type T have initial category labels (e.g., T T ) and some do not (e.g., T 3 , T 4 , T 5 and T 6 ), for which we want to infer the labels. Objects of type S could either have initial labels or not. We simply assume that all of them are labeled. In Figure 2, S 1 , S 2 and T 1 belong to one category, and S 3 , S 4 and T 2 belong to another category. All the ob-Figure 2: Social tagging graph of heterogeneous web objects jects are associated with some social tags, denoted as Tag . The goal of web object classification is to assign class label to each unlabeled object of type T using the existing labeled objects of type T or type S , or both. Formally, we introduce the following definitions.  X 
C :a category set , { c 1 ,c 2 ,...,c k } .  X 
G = V, E :a social tagging graph .Every object , u ,and  X  V S :asetofobjectsoftype S .  X  V l  X 
V u T : a set of unlabeled objects of type T .  X  V tag : a set of tags.

The problem of web object classification can then be loosely defined as the problem of assigning weights of categories to each vertex in the graph. Formally, the problem is casted to assigning the weights of c 1 , ..., c k for every u  X  V u In the following sections, we will define it as an optimization problem.
Tags are used as bridges to connect the unlabeled objects, the labeled ones of the same type and the labeled heteroge-neous ones. This is based on the following intuitive assump-tion:
Web users are likely to select similar tags for the ob-jects of the same semantic category, independent of the domain/type of the objects.
 This indicates that the category assignments of two objects connected by the same tag are likely to be similar, both similar to the semantic category of the tag itself.
When a reasonable classifier assigns new labels to all the vertices, the assignments should achieve the consistency on the entire social tagging graph. This consistency can be captured by the following four properties: 1. Category assignment of a vertex in V S should not deviate 2. Category assignment of the vertex in V l T should remain 3. Category of the vertex in V u T should take the prior knowl-edge into consideration if there is any. 4. Category assignment of any vertex in graph G should be as consistent as possible to the categories of its neighbors. The category assignments of V u T is used as the classification results of the unlabeled objects of type T .
With the intuitions discussed in Section 3.2, we now define the classification problem within an optimization framework on the social tagging graph. Formally, let us introduce the following definitions.  X  f u :a k -dimension vector that represents the class distri-bution of vertex u  X  V ,where k is the number of cate-category i ,s.t. k i =1 f u [ i ] = 1. We denote { f u } u  X  f  X  u : the optimal solution of f u  X   X  f u :for u  X  V S  X  V l T ,  X  f u is the class distribution esti-mated from the original category labels of vertex u .For u  X  V u T ,  X  f u is the class distribution estimated from some  X  w uv : aweightoftheimportanceofedge( u, v ). Given an object u and its associated tag v , w uv is the frequency
We propose the following general optimization framework for web object classification. The objective function is de-fined as
The objective function O ( f ) has four components, corre-sponding to the four properties that we want to achieve (see Section 3.2). in V l T should keep close to its initial label(s).  X  ,  X  ,  X  are three parameters, which control the weights of each constraint. Different settings of these parameters can reflect different beliefs we have for the problem, and refer to different scenarios. We will discuss the parameter setting analytically in Section 4.3.1 and empirically in Section 5.2.
Our target is to find f = f  X  to minimize the cost function.
Based on the class distribution, we can assign an object o to the class c such that
Therefore, we can infer the class label of an unlabeled object u  X  V u T based on f  X  u ( u  X  V u T ) as follows:
Finding the close solution of equation (1) requires the computation of the inverse of a matrix with the size of all web objects and tags. In reality, this is usually not feasi-ble due to the complexity of computation. In this section, we alternatively propose an efficient iterative algorithm to solve the optimization problem. We then discuss the setting of parameters in our model w.r. t the different scenarios of web object classification.
We propose the following iterative algorithm for the op-timization problem. In order to find f that minimizes the cost function, at each iteration we differentiate O ( f )with regard to s  X  V S , l  X  V l T , u  X  V u T and v  X  V tag .Wethen find an update of the variables by setting the differentiated result to zero. Naturally, we have
It is easy to show that after each iteration, we still have  X  u  X  V , i f u [ i ]=1.

Basedontheaboveequations,wedesignaniterativeal-gorithm to get f  X  , which minimizes the cost function. At each iteration, the class distribution of a vertex is updated from its connected vertices. Therefore, the category infor-mation is propagated around the whole graph, not only from the homogeneous labeled objects to unlabeled ones, but also from and to those heterogeneous labeled objects. After the iterations converge, the class distributions of the unlabeled objects are used to generate class labels.
 Algorithm 1 : Iterative Algorithm
Input : category size k , class labels C ( x )for
Output : class labels  X  C ( x )for x  X  V u T // Initialization foreach x  X  V S  X  V l T  X  V u T do 1 foreach x  X  V do 3 // Iteration until converged ; 12 // Get Class Label foreach x  X  V u T do 13
The iterative algorithm is shown in Algorithm 1. At steps 1-4,  X  f x is initialized for all x belongs to V S  X  V l T labeling and the prior knowledge. The iterations start from step 5. At each iteration, the class distribution is updated from the neighbor vertices. At step 7, the class distributions of objects of type S are updated from the class distributions of the associated tags, which are based on equation (3). At step 8, the class distributions of the labeled objects of type T are updated from the class distributions of the associated tags, which are based on equation (4). At step 9, the class distributions of the unlabeled objects of type T are updated from the class distributions of the associated tags, which are based on equation (5). At step 10, the class distributions of the tags are updated from the class distributions of the connected objects, which are basedonequation(6). Here tag acts as a bridge of belief propagation. At steps 13-14, the class labels of unlabeled objects of type T are obtained from the class distributions based on equation (2).
Here we analyze the computational complexity for the it-erative algorithm. The initialization steps (i.e., steps 1-4) take O ( k | V | )timewhere k is the number of the categories. At each iteration (i.e., steps 5-12), all the vertices in the graph are enumerated. When each vertex is considered, the class distribution of the vertex is updated from all the neighbor vertices. Therefore, it costs O ( k v  X  V degree ( v )) at each iteration, which is equal to O (2 k | E | )where | the number of the edges in the graph. It takes O ( k | V time to get the class labels (i.e., steps 13-14). In total, the algorithm takes O ( k ( | V | + iter | E | )) time where iter is the iteration number.
The optimization framework we proposed is quite gen-eral. In this subsection, we show the connection between our framework and various scenarios of web object classifi-cation in reality. We then show that although the proposed optimization framework consists of complex components, it is closely related to an absorption random walk.
There are three parameters in the objective function:  X  ,  X  ,and  X  , which represent the weights of different consistency constraints on the graph. Different settings of these param-eters map the optimization problem to different scenarios of the classification problem in reality:  X   X  =0 , X  =0 , X  = 0. In this case, labeled examples ferred through both the labeled vertices ( V l T )andalso the unlabeled vertices ( V tag and V u T ). This reduces the  X   X  =0 , X  =0 , X  = 0. In this case, no labeled object is trust the initial label of s . The category information is
T , through the tags V tag as a transfer channel. This can  X   X  = 0. In this case, there is prior knowledge available for  X   X  =0 , X  =0 , X  = 0. In this case, we have labeled ex-of transfer learning, semi-supervised learning, as well as prior integration. The optimization framework has quite a few components. However, despite its complex appearance, it is interesting to show that the iterative algorithm we proposed is closely related to an absorption random walk process. To demon-strate this, we construct a graph G as follows. For every vertex x in V of G , we make a corresponding vertex x in G and denote the set of these vertices as V .Thenforev-ery vertex y in V S , V l T and V u T , we make an additional copy of vertex  X  y in G and denote the set of these new vertices as  X 
V . We then define the transition probabilities in G as follows.

For x  X  V and  X  y  X   X  V , p ( x ,  X  y )= For  X  y  X   X  V and x  X  V , p ( X  y ,x )=0
For x  X  V and y  X  V , p ( x ,y )=
We then label all the vertices in  X  V with the original la-bels of these objects in G . Let us imagine that there is a particle randomly walking through G starting from vertex x that belongs to V , w.r.t. the defined transition probabilities. These labeled vertices in G are considered as the absorbing boundary for this random walk. It is easy to show that f  X  in G is essentially the probability that the particle starts from x and hits (be absorbed by) the set of vertices with label i in G .

It is easy to show that with such a random walk, the ab-sorption probability of each vertex converges. This naturally proves the convergence of our proposed iterative algorithm.
In this section, we conduct extensive experiments based on classification of Amazon products to demonstrate the ef-fectiveness of our algorithm on real world data.
 Publications/Books 558 Books 937 Consumer Electronics 494 Electronics 945 Home and Garden 1976 HomeGarden 841 Table 1: Category of web pages in ODP and prod-ucts in Amazon Data Collection: In order to conduct web product classi-fication task, we collect 6123 products information in 8 dif-ferent categories from Amazon site by using Amazon API 1 . Their associated tags, category information, and product title are also collected. Further, we collect web pages as ex-ternal resource for helping classification of products, since there are a large number of labeled web pages and many classification methods with good performance. We collect web pages from the corresponding 8 categories under ODP Shopping category 2 . And tags of these web pages are col-lected from Delicious 3 and web pages whose tags are less than 5 are removed. This results in 5536 web pages after preprocessing. Table 1 shows our experimental data distri-bution.
 Evaluation Method: We use the standard F 1measurefor evaluating the effectiveness of classification results. To evaluate the average performance across multiple cate-gories, the micro-averaging F 1 and macro-averaging F 1are introduced. The micro-averaged scores tend to be domi-nated by the performance on common categories, and the macro-averaged scores are influenced by the performance in rare categories.
 Baseline Method: In order to demonstrate the effective-ness of our model, we compare our method with two state-of-the-art classification methods:
Support Vector Machine (SVM) is a well-known super-vised classification, which has been applied in many appli-cations. Here we use the libsvm toolkit 4 and linear kernel function.

Harmonic Gaussian field method (HG) is a widely-used semi-supervised learning technique [20]. In this approach, the semi-supervised learning is based on a Gaussian random field model from a weighted graph, where labeled and un-labeled data are represented as vertices and the similarity between instances as the edge weight.

In order to evaluate the effectiveness of tags, we also com-pare tags with other features. In our experiments, we use the product title as another feature space, so products can http://developer.amazonwebservices.com/connect/entry.jspa? externalID=880 http://www.dmoz.org/Shopping/ http://delicious.com/ http://www.csie.ntu.edu.tw/  X  cjlin/libsvm/ Label Ratio 1% 5% SVM+TITLE 0.4233 0.3812 0.5967 0.6091 SVM+TAG 0.4045 0.4059 0.6397 0.6435 HG+TITLE 0.6251 0.6038 0.6778 0.6689 Table 2: Overall comparison of different classifica-tion methods also be represented as bags of words in the titles. We com-pare our method with four different baseline methods, which are listed as follows:  X 
SVM+TITLE: SVM using product titles as feature.  X 
SVM+TAG: SVM using tags as feature.  X 
HG+TITLE: Harmonic Gaussian field method using ti-tles. We use cosine similarity of the titles of two products as the edge weight in the graph.  X  HG+TAG: Harmonic Gaussian field method using tags.
We use cosine similarity of the tags of two products as the edge weight in the graph.
 In the rest part of the paper, we use TM (Tag-based clas-sification Model) to refer to our method proposed in the Section 4.
In the experiments, we demonstrate that our classification model based on social tagging performs better than other classification methods significantly. Specially, our model can solve those problems that we encounter in web object classi-fication. We show the following. First, social tags provides an ideal feature space for web object classification compared with other features. Second, our model makes good use of the link structure of objects and tags, which effectively cap-ture the interconnections of objects through the social tags. Third, our method is effective when there is few or no la-bel available for web objects. Besides, prior knowledge of unlabeled objects can be incorporated, so our model can be combined with other classification methods seamlessly. Fur-thermore, we show that our algorithm is efficient and can converge after several rounds of iterations in different sce-narios.
In order to compare different classification methods, we label 1% and 5% of the products separately and consider as the training set. The results of each method are shown in Table 2. From the table, for each classification model, using tags as the feature space achieves much better result than using titles. When only 1% of products are labeled, SVM performs poorly both on title and on tag. The reason is that there lacks of labels, which is one of the problems that we want to solve in this paper. Among all the results, our method performs the best.
This experiment is conducted to verify our assumption that tags are good features to represent web objects. We  X  = 1000 , X  =  X  , X  =0 . 1 compare the results of the same classification method with different feature spaces. The experiment results are shown in Table 3. p represents the percentage of data used as train-ing data. For example, 5% means 5 percent of labeled data is used as training data, and 95% is used as testing data. In Table 3, we find that, for both supervised learning method (SVM) and semi-supervised learning method (HG), using tags as the feature space performs better than using titles as the features space for all the p  X  X  that we choose. It is no surprise that the i mprovement of tag over title in semi-supervised learning setting is even larger than in supervised learning setting, since HG+TAG makes use of labeled ob-jects as well as unlabeled objects in classification. Social tags are good features to capture the relationship between ob-jects. Therefore, from the experiment result, we can safely draw the conclusion that tags are meaningful features for web object classification task.
Without tags, the interconnections among the objects are difficult to model. We want to show that our model can ef-fectively explore the interconnections of objects and improve the classification results consequently. In order to evaluate the performance without the inference of objects of type S (i.e., web page), we set V S to be empty and  X  =0.  X  is set to be 0, since we do not consider the prior knowledge here. We fully trust the initial labeling and set  X  to be From the results in Table 3, we find that our model per-forms significantly better than HG+TITLE for all the p  X  X  that we choose. Compared with title, tags connect the ob-jects in the same category tightly. Therefore, with tag as a bridge, the interconnections of products are explored and the classification result is improved. Compared with HG+TAG, our model performs better as well. In HG+TAG, tags are only used as feature space to calculate the similarity between two objects, and then belief is propagated in the weighted graph of objects. In our model, tags appear explicitly as the vertices in the graph, which act as bridges to connect the labeled objects and unlabeled objects. In this way, our clas-sification method models the social tagging behavior more explicitly and explores the interconnections of objects better than HG+TAG.
For most web objects, such as products and images, there is few labeling data for training a reasonable good classi-fier. Furthermore, the labelin g process for classification is a time-consuming task, and it is too difficult to follow the expansion pace of the Web. To consider such a case, we conduct the following experiments to verify that tags enable us to leverage the labeled examples from one domain to the other.

In the experiment, we set p , the percentage of data used as training data, from 0 to 5, which means there is no or few labeled data available.  X  is set to  X  ,whichmeanswe fully trust the existing labels.  X  is set to 1000, which reflects the degree of trust of informat ion from another domain(web page). The results of different methods are shown in Table 4.

From Table 4, we find if there is no labeling ( p =0),other baseline methods cannot be applied. It is because there is no connection between different types of objects. However, our model can achieve an impressive classification result (i.e., p % MicroF1 MacroF1 MicroF1 MacroF1 MicroF1 MacroF1 0 NA NA NA NA 0.7594 0.7606 1% 0.6251 0.6038 0.7174 0.7127 0.7708 0.7719 2% 0.6499 0.6334 0.7510 0.7434 0.7771 0.7766 3% 0.6368 0.6368 0.7695 0.7666 0.7774 0.7769 4% 0.6503 0.6360 0.7566 0.7513 0.7885 0.7891 5% 0.6778 0.6689 0.7856 0.7859 0.7872 0.7866 Table 4: Comparison of classification results using both homogeneous and heterogeneous objects MicroF1 = 0.7594 and MacroF1 = 0.7606) by transfering the knowledge from web page to product via social tags. When there is a small portion of labeled products, our model using knowledge of heterogeneous objects (i.e., web page) performs better than HG+TITLE and HG+TAG methods for all the p  X  X  that we choose here. It illustrates the idea that category information from heterogeneous objects can also help classification through tags when there is not sufficient training data. When p increases to 5%, we find that the result of our model relying on external data is similar to the result of HG+TAG and the case when p is equal to 4%. The reason may be that the knowledge from heterogeneous objects are not reliable compared with the labeled objects of the same type. The results suggest that if there are no or few labels (let us say less than 5% in this specific case), the labeling of another type is a valuable source, and tag acts as a bridge to transform knowledge efficiently. When there are enough labels, we should rely on the labeling of the same type and use our model to explore the link structure among homogeneous labeled objects and unlabeled objects. If the two domains are similar, we could trust even more on the knowledge from the other domain.

In Figure 3, we find that the classification performance is not too much sensitive to the setting of  X  ,where  X  =0 and no labels of type T is provided. We can set  X  = 1000 empirically.
In our model we can take prior knowledge into consider-ation. If we use other classifiers to classify the unlabeled objects, we can take the classification result as the prior for our model.  X  represent how much we trust the prior knowl-edge. The larger  X  is, the more we trust the prior knowl-edge. We label p percent of products, and use SVM+TAG and HG+TAG to classify the remaining products. The clas-sification results are considered as the prior for our model. We set  X  to be 0 and  X  to be  X  .Wevary p from 5 to 25, and test  X  among { 0.001, 0.01, 0.1, 1 } separately. The result in Table 5 shows that the performance of our model using prior knowledge outperforms the one without prior (i.e.,  X  =0). Compared with SVM+TAG and HG+TAG, our model us-ing their classification results as prior performs better. The result with HG+TAG as prior is better than the one with SVM+TAG as prior as expected, since HG+TAG is bet-ter than SVM+TAG.  X  =0 . 1 performs the best in most of the cases. When p =5%,(  X  =0.01)+(SVM+TAG) performs better than (  X  =0.1)+(SVM+TAG). The reason is that the result of SVM+TAG is not good when p = 5% so it cannot be considered as a good prior, which leads to a smaller  X  setting.
Figure 4 shows the convergence rounds in three scenarios of classification. In scenario 1, no knowledge from web page is considered and we label 5% percent of products.  X  =0,  X  =  X  and  X  = 0. In scenario 2, we take the labels of web pages into consideration and label 5% percent of products.  X  = 1000,  X  =  X  and  X  = 0. In scenario 3, we consider prior knowledge for unlabeled products, where  X  =0,  X  =  X  and  X  = 0.1. From Figure 4, we find that our algorithm converges quickly at about 10 rounds of iterations.  X  =0 , X  =  X  , X  =0
Web object classification is an emerging task and becomes increasingly important as web objects, such as products, videos, and images, are bursting at a surprising speed. In this paper, we explore social tagging data to deal with this problem. We find that web object classification problem can take advantage from social tags in three aspects: (1) representing web objects in a meaningful feature space, (2) interconnecting web objects to indicate implicit relationship, and (3) bridging heterogeneous objects so that category in-formation can be propagated from one domain to another. To fully explore social tagging data for web object classifi-cation, we propose a general framework to model the prob-lem as an optimization problem on a heterogeneous graph of web objects and social tags. The model covers different scenarios of web object classification problem. We design an efficient algorithm to solve the problem. Furthermore, we conduct extensive experiments on real world data with different scenarios, and the results demonstrate that social tag is an effective feature in web object classification and our framework models social tagging structure appropriately and outperforms the state-of-the-art of general classification methods significantly.

The proposed classification model opens up some inter-esting directions for future research. For example, how to consider multi-types of objects together meaningfully in an uniform setting. In our model, we only consider the setting of two types of web objects. It is interesting to generalize our model to manage multi-types of objects. [1] S. Bao, G.-R. Xue, X. Wu, Y. Yu, B. Fei, and Z. Su. [2] C.H.BrooksandN.Montanez.Improvedannotation [3] S. Chakrabarti, B. Dom, and P. Indyk. Enhanced [4] W. Dai, G.-R. Xue, Q. Yang, and Y. Yu. Transferring [5] C. Do and A. Y. Ng. Transfer learning for text [6] R. Ghani, S. Slattery, and Y. Yang. Hypertext [7] P. Heymann, G. Koutrika, and H. Garcia-Molina. Can [8] T. Joachims. Text categorization with suport vector [9] P.R.Kalva,F.Enembreck,andA.L.Koerich.Web [10] X. Li, L. Guo, and Y. E. Zhao. Tag-based social [11] W.-H. Lin and A. G. Hauptmann. News video [12] X. Qi and B. D. Davison. Web page classification: [13] R. Schenkel, T. Crecelius, M. Kacimi, S. Michel, [14] D. Shen, J.-T. Sun, Q. Yang, and Z. Chen. A [15] X. Wu, L. Zhang, and Y. Yu. Exploring social [16] G.-R. Xue, W. Dai, Q. Yang, and Y. Yu.
 [17] G.-R. Xue, D. Shen, Q. Yang, H.-J. Zeng, Z. Chen, [18] D. Zhou, J. Bian, S. Zheng, H. Zha, and C. L. Giles. [19] D. Zhou, O. Bousquet, T. N. Lal, J. Weston, and [20] X. Zhu, Z. Ghahramani, and J. D. Lafferty.

