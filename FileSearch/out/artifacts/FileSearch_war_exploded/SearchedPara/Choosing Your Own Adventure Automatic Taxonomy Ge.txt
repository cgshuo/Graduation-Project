 A taxonomy organizes concepts or topics in a hierarchical struc-ture and can be created manually or via automated systems. A major drawback of taxonomies is that they require users to have the same view of the topics as the taxonomy creator. Users who do not share that mental taxonomy are likely to have difficulty in find-ing the desired topic. In this paper, we propose a new approach to taxonomy expansion which is able to provide more flexible views. Based on an existing taxonomy, our algorithm finds possible alter-native paths and generates a n expanded taxonom y with flexibility in user browsing choices. In experiments on the dmoz Open Direc-tory Project, the rebuilt taxonomies provide more alternative paths and shorter paths to information. User studies show that our ex-panded taxonomies are preferred compared to the original. Categories and Subject Descriptors: H.3.3 [Information Stor-age and Retrieval]: Information Search and Retrieval X  Information filtering ; I.5.2 [Pattern Recognition]: Design Methodology X  Classifier design and evaluation General Terms: Algorithms, Performance Keywords: Taxonomy Generation, Hierarchies
A taxonomy organizes concepts or topics in a hierarchical struc-ture. The dmoz Open Directory Project 1 and the Yahoo! Direc-tory 2 are two well-known examples which, with the help of many human editors, organize what are considered to be good quality web pages into topical taxonomies. Taxonomies can be created and maintained manually or automatically. Existing automatic taxonomy generation approaches can be divided into three cate-gories: approaches based on hierarchical clustering using textual content, approaches based on associated objects, and on term re-lationships. Examples of the first category include the TaxGen System [6] and the query result clustering approach proposed by Kummamuru et al. [4]. The second category focuses on generating http://www.dmoz.org/ http://dir.yahoo.com/ taxonomies from tagging systems [3], taking advantage of human assigned tags for objects. Approaches in the third category use term co-occurrence as the measure for term relatedness, assuming the asymmetric occurrence relationship between terms indicates their semantic subsumptions [8, 2]. Our full report [7] on this work con-tains a more comprehensive review of the broad data organization problem and taxonomy generation approaches.

A taxonomy (or hierarchy) is usually constructed based on supertopic-subtopic, or hypernym-hyponym relationships. When a user seeks information in a taxonomy, she usually starts from the root ( X  X verything X ), and narrows down the topic by choosing one child under the current topic until she finds what she needs. Unlike keyword search, seeking information in a taxonomy does not require the user to formulate her information need into search keywords. One major drawback of taxonomies is that they require users to have the same view of the topics as the taxonomy creator. That is, when a user follows a top-down path to find the specific topic of her interest, she has to make choices along the constrained sequence that is present in the hierarchy. As a result, users who do not share that mental taxonomy are likely to have additional diffi-culties in finding the desired topic.

In this paper, we propose a new approach to taxonomy expan-sion which is able to provide more flexible views. Based on an ex-isting taxonomy, our algorithm finds possible alternative paths and generates a new, expanded taxonomy with more flexibility in user browsing choices. In our experiments on the dmoz Open Direc-tory Project, the rebuilt taxonomies show favorable characteristics (more alternative paths and shorter paths to information). Our algo-rithm can be used to expand current web hierarchies such as those provided by Yahoo! and the dmoz ODP.

Our main contributions include:
Browsing through a taxonomy supports the user differently than keyword search. Search is effective when the user knows the name of the target information. When the desired information is a large set of instances (e.g., American sci-fi movies from the 1960s), or something that the user does not recall its name (e.g., the 1980 Steven Spielberg film about a space alien), browsing in taxonomies is usually more effective than search.

Typically supertopic-subtopic relationships connect a topic with its child topics in a taxonomy. As natural it may seem, this form often poses extra difficulty for both the creator and the user. One reason is that there are often many ways to split a topic. For ex-ample, movies can be classified by their genre, country of origin, director, etc. They are orthogonal characteristics in that none of them is logically a subtopic of another. A user may wish to nar-row his selection by choosing one property of any reasonably arbi-trary facet. Therefore, although there are many reasonable ways to split the movie category, none of them is able to satisfy all users X  needs. This problem can be addressed by adding symbolic links or introducing faceted browsing. However, both solutions come at a significant extra cost.

Another problem of existing taxonomies also originates from the strict supertopic-subtopic relationships. When users need to find a particular object, they have to go all the way along the path from the root to their topic of interest. In this paper, we will refer to this problem as the exhaustive path problem. For example, even if the Emacs topic can be reached by two alternative paths, Software/Editors/OpenSource/Emacs and Soft-ware/OpenSource/Editors/Emacs, what if a user who does not know whether the package is open source just wants to find a list of representative text editors? In this case, a link like Soft-ware/Editors/Popular/Emacs will come in handy. By presenting popular descendant topics closer to the root, we may reduce the choices a user needs to make and thus reduce the time to find de-sired information.

These problems could also be alleviated by building customized taxonomies on a per-user basis. However, the user profile is diffi-cult to acquire. Furthermore, a user X  X  interest and browsing pref-erence may change frequently. Therefore, instead of building per-sonalized taxonomies for each user, we propose a method to build an expanded taxonomy with more branches to help users find in-formation easier and faster in a given dataset.
We propose a method to solve the taxonomy expansion problem: break down the taxonomy hierarchy into a set of tag-object tuples and then rebuild a flexible taxonomy from these tuples.
First, we break down the input taxonomy into a set of tag-object tuples. We consider the original tree structure and treat each in-ternal node (topic) as a tag. We assume the same topic name al-ways has the same meaning. That is, the same topic name ap-pearing in different locations in the original taxonomy is consid-ered to be the same tag. Then each object in the taxonomy (i.e., URLs in the ODP case) is associated with all the tags from its ancestors in the tree. For example, in the original hierarchy in Figure 1, there are three objects c , e and f , and three topics, a , b ,and d . After we tag each object with its ancestors, we get tag ( e )= { a } , tag ( c )= { a, b } , tag ( f )= { a, d also define the tag set of multiple objects as the union of their tag sets, i.e., tag ( { e, c } )= tag ( e )  X  tag ( c )= { fine obj ( x ) as the set of objects that are associated with tag x .In this example, obj ( a )= { c, f, e } , obj ( b )= { c } , obj ( d )= Similar to the tag set of multiple objects, we define the object set of multiple tags as the union of their object sets. In this case, original taxonomy structure, with only the tags, objects, and their relationships left. Since there are no relationships between two tags or two objects, the problem left for consideration now is a bipartite graph, with tags and objects being two sets of nodes, and each edge connecting exactly one tag and one object. Therefore, we now have a set of tags T , a set of objects O , and a set of edges E that connect tags in T to objects in O .

Now we pose the taxonomy expansion problem as a problem to generate a taxonomy based on a bip artite graph of tags and objects. where V is a set of topics, E is a set of edges connecting topics in V to objects in O ,and R is a set of edges connecting topics to their subtopics.
A straightforward approach to taxonomy generation is a top-down method, in which the topic at each leaf node is split into a number of subtopics until no further split is necessary. Every time a topic needs to be split, if we consider the topics (tags) as the sets, and the associated objects as the objects to be covered, the split problem can be seen as a generalized set covering prob-lem. In a set covering problem, given a universe O consisting of n objects, and T a set of subsets of O ,wesayasubset C  X  T covers O iff O = be NP-complete. However, there are greedy approximation algo-rithms with polynomial time complexity (e.g., Algorithm 1 in [9]). Algorithm 1 Greedy Algorithm for Set Cover (Vazirani, 2001) 1: // Input T is a set of tags, and O is a set of objects. 2: Initialize C  X  X  X  . 3: // Loop while C does not cover all objects 4: while Obj ( C ) = O do 5: Choose t  X  T to maximize f ( t ) 6: Let C  X  C  X  X  t } 7: end while 8: Return C f ( t ) is the objective function which the algorithm aims to maxi-mize. In the original version of the set covering algorithm [9], it is defined as | Obj ( C  X  X  t } )  X  Obj ( C ) | . We choose to base our approach on this algorithm for two reasons. First, it is a natural requirement for the generated hierarchy to cover all the objects. Second, in order to generate our desired hierarchy, it is convenient just to extend its objective function to match our purpose, leaving the rest of the algorithm unchanged. In the rest of this section, we will show how we change this function to meet our needs in flexible taxonomy generation.

In our approach, every time a topic is split, we generate three types of subtopics. A group of basic subtopics to cover all the asso-ciated objects (in some sense, the most obvious split), one or more groups of orthogonal subtopics to provide alternative paths, and a group of popular subtopics to allow fast access to the most popular descendant topics. We discuss each in the following subsections.
Starting from a tree with a single node root , we iteratively split its leaf nodes to generate the taxonomy. Suppose we are at the point to split a node (tag) t cur ;let T a be the set of tags that have been used in t cur  X  X  ancestor nodes. The tag set T = T  X  corresponding object set O , and the relationship E between T and O make up a bipartite graph G ( T ,O ,E ) , a subgraph of the original bipartite graph G ( T, O,E ) .Let T c be the subtopics that have already been chosen and O c the set of objects that have been covered. For each t  X  T  X  T c , we define the objective function f ( t ) as follows and plug it into Algorithm 1. Here, w ( o ) , the weight of the object o , is always set to 1, although it can be generalized to any importance measure (e.g., the page X  X  PageRank). We denote the tags selected for the basic group as T
For the extension group, we exploit two types of information to discover orthogonal dimensions for alternative views.

Impurity Score. We employ entropy impurity to measure this property of tags. Entropy impurity has been used in decision trees [1]. The impurity of tags in our system is defined as follows. Let O t be the set of objects which are covered by t , O t = E and o  X  O } . Given the basic tag set T b generated by the method in Section 3.2, and a tag t ,wedefine P t ( t i ) as the fraction of objects for t i  X  T b which is P t ( t i )= Then, the impurity of a candidate subtopic t given T b is defined as I ( t )=  X  objects covered by t are uniformly covered by the topics in T will get the maximum value.

Sibling Score. The sibling score of a candidate topic t measures how likely t is a sibling topic with the already chosen tags. We define parent ( t ) as the the set of parent topics of t in the original taxonomy. The sibling function is defined as Sibling ( t 1 ,t 2 log 2 (1 + | parent ( t 1 )  X  parent ( t 2 ) | ) . Then, Sibling ( t normalized over all tag pairs so that they sum to 1. We note the normalized results as Sibling norm ( t 1 ,t 2 ) .

Based on the pairwise sibling likelihood, the sibling score of a candidate subtopic t given a set of already chosen subtopics T computed as follows.

SiblingScore ( t )=
We still use the greedy approximation algorithm for set cover-ing problem to generate the extension groups, only with a different objective function: f e ( t )=  X   X  CoverScore ( t )+  X   X  SiblingScore ( t )+  X   X  Weights  X ,  X , X  will be tuned in the experiments. After generat-ing one group of extension topics, another extension group can be generated by removing the selected topics from the candidates, and running the above process again.
The idea of the shortcut group is to increase the visibility of pop-ular/important topics by putting them closer to the root, and thus reduce the time for users to find them. Among a variety of possible metrics to assess the popularity of a topic, we choose to use the raw frequency of the topic name being used as a tag in delicious. The popularity score is defined as: where | bookmark ( t ) | is the number of distinct bookmarks which are associated with tag t in Delicious. We again use Algorithm 1 but with a different objective function to generate the shortcut group: f s ( t )= popularity ( t ) . We used two subsets of ODP to experiment with our approach. One is  X  X op/Computers/Computer_Science/ X  and all its subcate-gories and objects, containing 184 unique tags and 2061 URLs. The other contains  X  X op/Science/ X  and all its subcategories and ob-jects, with 9415 tags and 100,109 URLs. Here, we only report important results because of the length limit. For detailed results and analysis, please refer to our technical report [7].
We tune the parameters in our method before generating the final taxonomy. We changed the value of  X  ,  X  ,and  X  by 0.1 in each step while keeping them sum to one. We generated a taxonomy for each parameter setting, and asked users to conduct pairwise compari-son of the subtopics under one particular category at a time, and recorded their preferences. When a user considers the subtopics in one taxonomy better than another, we add one point to the for-mer taxonomy X  X  score, and subtract one from the latter. Nine users participated in the evaluation. Although there are significant differ-ences in user ratings among different parameter settings, the result did not show any clear pattern. The best score is achieved when  X  =0 . 8 ,  X  =0 . 1 ,and  X  =0 . 1 .
After parameter tuning, we applied our algorithm on the two subsets of ODP using the best parameter setting. Fig-ure 2 illustrates the hierarchy generated by our algorithm for  X  X op/Computers/Computer_Science X . Thus qualitatively we can see that the automatically generated hierarchies are reasonable. For comparison, we implemented the approach proposed by Heymann and Garcia-Molina [3], which will be referred to as  X  X ommunal Taxonomies X . The algorithm output depends on a tag similarity threshold. Even after tuning, the g enerated hierarchy appears to be unreasonable. It has 183 categories and 3 levels, with 25.9 subcat-egories per category on average.

We expect that the subtree consisting of only the basic sets gen-erated by our algorithm ( X  X asic subtree X ) should be similar to the original ODP hierarchy. Our observation of the resulting hierar-chies matches this hypothesis. In order to test it analytically, we implemented the taxonomy comparison metric called  X  X axonomy overlap X  proposed by Maedche et al. [5]. According to our imple-mentation, the overlap between ODP and our basic subtree is 0.98, meaning they are extremely similar. The overlap is 0.77 for ODP and  X  X ommunal Taxonomies X .
We conducted two types of user studies to evaluate user satisfac-tion of our hierarchy.

In the first user study, we compare three hierarchies: our hi-erarchy, the ODP hierarchy and the ODP hierarchy with random extensions. The random extensions are generated by randomly selecting descendant categories and promote them as the direct children of the current category. This random selection algo-rithm is a variation based on reservoir sampling. While a generic random sampling method gives each candidate equal probabil-ity to be selected, our method favors descendant categories that are closer to the current category (i.e., more generic topics have higher chances to be selected). This random extension is used Figure 2: Automatically generated subtree under Top/Computers/Computer_Science.
 as an alternative baseline than the original hierarchy to eliminate the possible effect that users may simply choose the hierarchy with more branches. In total, we randomly selected 27 categories from  X  X op/Computers/Computer_Science X  and 50 categories from  X  X op/Science X  to be evaluated by users. For each category, we ran-domly reordered the sequence of these three hierarchies before pre-senting them to the users. For each of the selected categories, we only show a local view of each hierarchy, i.e., the current category and its children. Evaluators are asked if the quality of the child concepts are good(3), fair(2), or bad(1).

Figure 3 shows the average score for each of the hierarchies, showing that our method outperforms the other two. In the  X  X op/Science X  dataset, the satisfaction score judged by users is im-proved by 23% compared with the original ODP. Similar results can be found on the  X  X op/Computers/Computer_Science X  dataset.
The second user study asks the users to perform specific infor-mation seeking tasks. We designed five tasks:
Three users participated in this experiment. Figures 4(a) and (b) show the number of clicks and the elapsed time of users for each task, respectively, indicating that our hierarchy can reduce users X  effort in finding information. Note that these tasks are designed to demonstrate the advantages of our generated taxonomy. We expect the difference to be less dramatic on more generic tasks. Figure 4: Average number of click counts and time for users to find designed items.
This paper described a new model to automatically expand an ex-isting taxonomy by providing more paths. Our experiments show that our approach is able to generate a more flexible and compre-hensive hierarchy from an existing hierarchy, leading to significant reductions in user effort and time for hierarchy-centric task com-pletion.
 We thank Liangjie Hong for helpful discussions, and those who participated in our user study for their valuable input. This material is based upon work supported by the National Science Foundation under Grant Number IIS-0545875. [1] L. Breiman, J. H. Friedman, R. A. Olshen, and C. J. Stone. [2] P. Clough, H. Joho, and M. Sanderson. Automatically [3] P. Heymann and H. Garcia-Molina. Collaborative creation of [4] K. Kummamuru, R. Lotlikar, S. Roy, K. Singal, and [5] A. Maedche and S. Staab. Comparing ontologies -similarity [6] A. M X ller, J. D X rre, P. Gerstl, and R. Seiffert. The TaxGen [7] X. Qi, D. Yin, Z. Xue, and B. D. Davison. Enhancing [8] M. Sanderson and B. Croft. Deriving concept hierarchies from [9] V. V. Vazirani. Approximation Algorithms . Springer, 2001.
