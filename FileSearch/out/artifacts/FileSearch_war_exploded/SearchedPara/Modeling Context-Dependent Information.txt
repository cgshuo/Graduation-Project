 Object properties are often based on their contexts, and contexts can be nested to form complex context-dependent information. Existing data models cannot naturally and directly represent such context-dependent information. In this paper, we propose a novel mechanism called context constructor in an object-oriented framework to solve this problem.
 D.2.10 [ Software Engineering ]: Design  X  Methodologies, Representation ; D.3.3 [ Programming Languages ]: Lan-guage Constructs and Features X  Data types and structures Design, Management Information modeling, context-dependent property, context constructor
Real world objects have various complex properties that need to be modeled and stored in the database. Currently, there are mainly two mechanisms that can be used to rep-resent complex properties: t uple constructor and set con-structor.

However, object properties are often based on their con-texts, and contexts can be nested to form complex context-dependent information. For example, a student may have studied at one or more universities as an undergraduate, master, or Ph.D student and thus may have several distinct properties with the same name (e.g. start year). Each uni-versity involved is the context. Undergraduate, master, and Ph.D are also nested contexts for the properties. Similarly, a faculty member may have worked at one or more univer-sities as an assistant professor, associate professor, or full where c  X  X  is a class name and  X  is a property declaration.
A subclass definition is an expression of the following form: where c, c 1 ,  X  X  X  ,c m  X  X  are class names with m  X  1.
It specifies that class c is a direct subclass of c 1 ,  X  X  X  ,c m and c 1 ,  X  X  X  ,c m are direct superclasses of c .
A class definition is an expression of the following form: where keyword abstract is optional, c isa c 1 ,  X  X  X  ,c m is a sub-with m, n  X  0.

It specifies that abstract class c (or concrete class when abstract is not used) is a direct subclass of c 1 ,  X  X  X  ,c m and has property declarations  X  1 ,  X  X  X  , X  n .

A schema K is a finite set of class definitions, which can be represented as a tuple K =( C, isa, S )where C is a finite set of classes partitioned into two kinds: abstract classes C a and concrete classes C c , isa is a finite set of subclass definitions, S is a finite set of class property definitions.
Example 1. The following is an example of schema: abstract class Person[ class Student isa Person[ class Faculty isa Person[ It specifies that class Person is an abstract class and has basic property gender .Class Student is a concrete subclass of Per-son and has context-dependent properties startYear , supervi-sor ,and takes with Univ as the outermost context type and underGrad , master ,or phd as nested context types. It also has deeply nested context-dependent property startYear with Varsityteams.athlete as the innermost context type. Class Faculty is a concrete subclass of Person and has context-dependent properties startYear , teaches ,and supervises with Univ as the outermost context type and assiProf , assoProf , or prof as nested context types.

Our mechanism supports multiple classification, every ob-ject can directly belong to multiple classes and thus subse-quently indirectly belongs to their superclasses.
An object classification assignment is an expression of the following form: where c 1 ,  X  X  X  ,c m  X  X  are class names with m  X  1, o  X  X  is an oid.
 It specifies that o is a direct instance of c 1 ,  X  X  X  ,c m . It specifies that Bob is a direct instance of classes Student and Faculty and has basic property gender and context-depe-ndent property expression startYear:1979 with WHU as the outermost context and underGrad as the nested context. He also has deeply nested context-dependent property expres-sions startYear:1980 and startYear:1981 respectively with Ma-n X  X Footballteam.athlete and Man X  X Basketballteam.athlete as the innermost contexts. Also, he has context-dependent prop-erty expressions startYear:1983 , supervisor:Ben , takes: { ADB,OS } with WHU as the outermost context and master as the nested context, startYear:1988 and supervisor:Bev with CLU as the outermost context and master as the nested context, star-tYear:1990 and supervisor:Bev with CLU as the outermost context and phd as the nested context. Moreover, he has context-dependent property expressions startYear:1992 and teaches: { AB } with PEU as the outermost context and as-siProf as the nested context, startYear:1997 and teaches: { DS, AL } with REU as the outermost context and assoProf as the nested context, startyear:2004 and teaches: { PL,Java } with REU as the outermost context and prof as the nested con-text.

From the above example, we can see that Bob has nine distinct properties with the same name startYear . Our rep-resentation can naturally distinguish them as they have dif-ferent contexts.

A database DB consists of two parts: DB =( K, I )where the schema K =( C, isa, S ) and the instance I =( O,  X ,  X  ). It can be represented together as a tuple DB =( C, isa, S, O,  X ,  X  ).
Let DB =( C, isa, S, O,  X ,  X  ) be a database. We note isa  X  as the reflexive transitive closure of isa to capture the gen-eral inheritance hierarchy. We note S  X  the resulting set of class property definitions taking inheritance with overriding into account [11].

Example 3. Considering inheritance with overriding, class definitions in Example 1 has the following forms: abstract class Person[ class Student isa Person[ class Faculty isa Person[
Let DB =( C, isa, S, O,  X ,  X  ) be a database, c  X  C aclass name, and o  X  O an object identifier. Then o is an instance
The following pairs are well-typed by (4):
The object specification in Example 2 is well-typed with respect to class definitions in Example 3 by (5).
In this paper, we have discussed the need to model context-dependent information and proposed a new mechanism called context constructor in an object-oriented framework to nat-urally and directly represent complex context-dependent prop-erties.

Basically, every object in the real world is uniquely iden-tified with its object identifier and is associated with ex-actly one instance that contains complete information about this object with various context-dependent properties. Such context-dependent information represents the semantics of the objects and relationships among objects in the database. With this mechanism, context-dependent access to object
