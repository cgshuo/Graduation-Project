 network, knowledge network, computer network, economic network, and so on. With Web can be regarded as the most popular graph. As the amount of information on the Web increases exponentially, it becomes increas ingly difficult for users to find infor-mation and increasingly easy for users to be overloaded with information. 
Because of the web's exponential growth, tools that help users browse and search this vast information space are now essential. Visualization is a powerful tool to help better way to present the information on the Web is by drawing a nice picture, i.e., a graph which represents the Web. Drawing su ch a graph enables people to deal with information by taking advantage of our innate visual perception capabilities. of the traditional graph visualization methods. Huge graphs pose several difficult problems. First, if the number of elements is large, it can compromise performance or place and display all the elements, the issue of readability or usability arises, because it will become impossible to discern between vertices and edges. Thus it is important to study the graph visualization methods for efficiently browsing and navigating huge graphs. 
However, most existing methods aim at getting a final and stable graph layout and visualize and navigate a huge graph such as Web. With this method, a user can have an overview of the graph and then view individual information on demand. The main feature of this method is that it applies LOD strategy to graph visualization and navi-knowledge about their interests. Over the past two decades, much effort has gone into the area of two dimensional graph drawing [ 1, 2, 12, 16]. The most commonly used methods are based on physical analogies [ 16]. The main idea of this kind of methods is that they treat the graph as a system of interacting physical objects and assume that energy-minimal states of suita-bly defined systems correspond to readable and informative layouts. Force-directed method is a well-known physical analogy technique for drawing general undirected graphs [ 4, 5, 12, 14, 22]. Many models and algorithms have been proposed for it. The spring embedder proposed by Eades [ 4] is one of the earliest examples. In this model, vertices are physical objects (s teel rings) and edges are springs connecting them. The vertices are given initial positions, usually random, and the system is released so that gradually been revisited and improved [ 3, 5, 7, 13, 14]. vertices in the graph and the quality of the layout depends on the number of full itera-huge graphs efficiently [ 8, 10, 18]. 
Although a lot of graph layout algorithms have been proposed to deal with large graphs, no layout algorithm alone can overcome the problems raised by the large size focus+context [ 6, 24] and zooming[ 9, 23, 25]. 
Based on the above techniques, many methods have been proposed to visualize and drawing such a vertex/edge graph that is initia lly distributed on a fl at horizontal plane. Then the user may select nodes and raise them vertically to de-occlude the structure. Narcissus [ 11] also produces a graph-like representation. Occlusion is automatically reduced through the metaphor of attractive and repulsive forces. An alternative ap-proach is to construct a hy perbolic space that supports  X  X ocus+context X  exploration of formation on the Web in one screen, which severely limited their usaget is therefore important to find a new way to navigate the Web. Here, a new approach is developed to construct an LOD model for browsing and navigating huge graphs. The LOD model organizes a complex graph into several following sub-sections, we describe the proposed graph visualization method in detail. 3.1 Construction of an LOD Tree The key of LOD construction lies in finding representative vertices for each level of the LOD tree and discovering clusters for each representative vertex. The representa-tive vertex of a cluster is the vertex which conceptually represents all the vertices in the cluster. We begin the construction process of the LOD model with selecting a graph according to their weights. Next, the gr aph is divided into several clusters (sub-graphs) according to the representative vertices. 3.1.1 Selection of Re presentative Vertices In this section, we propose a novel vertex ranking method to measure the importance web information retrieval. quality web pages are those pointed to by many other pages or those pointing to many high quality pages. Web pages that are pointed to by many other web pages are au-links to authorities. Hubs and authorities exhibit what could be called a mutually reinforcing relationship: a good hub is a page that points to many good authorities; a good authority is a page that is pointed to by many good hubs. Thus, with each page p , we associate a non-negative authority weight x &lt;p&gt; and a non-negative hub weight y respectively. 
Numerically, it is natural to express the mutually reinforcing relationship between hubs and authorities as follows [ 17]: if p points to many pages with large x -values, it updates the x -weights as follows. 
Here, we view the collection of hyperlinked pages as a directed graph G = ( V , E ): the vertex in the vertex set V correspond to the Web page, and the directed edge ( p , q ) in the edge set E indicates the presence of a link from p to q . 
The  X  operation updates the y -weights as follows. 
In calculating the weight of a vertex p , the HITS algorithm [ 17] only considers the or non-intuitive results. Based on this observation, they modified the Kleinberg X  X  HITS algorithm. The basic idea of the modified algorithm is as follows: when meas-uring the authority or hub importance of a vertex p , they extended the graph distance between vertices p and q from 1 to r ( r &gt;1). The graph distance between a pair of ver-tices is the length of the shortest path between them in the graph G . Our vertex rank-ing algorithm adopts the basic idea of the modified HITS algorithm proposed by Miller et al. [ 19]. 
We first introduce some preliminary definitions which are useful for subsequent discussions. Definition 1 (directed-graph-distance ( q , p )) . The shortest directed path from vertex q to vertex p in the graph is termed as the directed-graph-distance between q and p . than or equal to r are defined as the r-in-set of p . Definition 3 (r-out-set ( p )) . The vertices to which the directed-graph-distances from p are less than or equal to r are defined as the r-out-set of p . 
Based on these definitions, the traditional link analysis method is modified. We use the vertices in the r-in-set of p to measure its authority importance; similarly, we use (2) can be rewritten as where, r &lt;q,p&gt; is the directed-graph-distance( q, p ) between q and p . 
Compared with the traditional link analysis method, the modified equations accel-erate the convergence of iterations for calculating vertex weight. The comparison between these two methods is illustrated by the example in Fig. 1 (see Section 4). 
The modified link analysis algor ithm is used to calculate the x -weight and y -weight then select representative vertices for the LOD model according to these weights. Vertices with higher weights will be the representative vertices in the higher level of LOD model. tance to the Web. connected to the given vertex, including the edges which are from or to this vertex. In our program, w pd and 3.1.2 Clustering utilized to group vertices around each representative vertex. The principle of the wavefront algorithm can be viewed as exploring the graph in waves that expand out-ward from a given vertex n , much as waves expand from a pebble thrown into a pond. initial vertices by using breadth-first search. Based on this algorithm, the LOD model can be constructed by the following steps. First, we divide a set of vertices into a certain number of clusters based on the above clustering process and it can be navigated as a tree, with each cluster represented as a node in the tree. The cluster vertices under each non-leaf node of the LOD tree form a cluster graph. We will discuss the layout of such a graph in the next section. 3.2 Graph Layout 3.2.1 Initial Placement of the Whole Graph To provide an overview of the graph structure to the user, we present a structure-based method for quickly generating an initial placement of the whole graph. Our method is based on the intelligent placement method adopted by the GRIP system [ 7]. The idea behind the initial placement method in GRIP is that each vertex v is placed  X  X lose X  to its optimal position as determined by the graph distance from v to several already placed vertices. The intuition of this method is that if the vertices are placed close to their optimal positions from the very beginning, then the refinement stages need only a few iterations of a local force-directed method to reach a minimal en-ergy state. 
GRIP adopts two simple strategies for the initial placement. The first strategy, been placed. This is followed by a force-directed modification of the position vector 446 tion of this method is that some vertices may overlap after initial placement. 
In this section, we propose a structure-based method for quickly generating an ini-tial placement of the whole graph. We have successfully overcome the limitation in the above method by utilizing a subdivision strategy. Our method first divides the original placement region into a finite number of sub-regions. The number of the sub-regions is calculated by where C is a constant, it is the maximum number of vertices which a sub-region con-tains. In our program, C is set to 100. 
Next, three vertices with the highest weights are placed. Here, the vertex with the highest weight is placed on the center of th e placement region. The other two vertices are placed according to their graph distances to the first one. Then our method finds an unprocessed vertex t which has the maximum degree in the sub-graph formed by t and the vertices that are already placed. In a graph, the degree of a vertex is the num-force-directed method is applied to reach a minimal energy state. Here, instead of applying the local force-directed me thod at the three closest points to t , we apply it to the sub-region in which vertex t lies. This greatly reduces vertex overlap. 3.2.2 Layout of a Cluster Graph In this section, we describe a force-directed method for positioning the cluster vertices in each cluster graph. Our graph layout algorithm is based on Fruchterman-Reingold force vector by edge length, Adj( v ) is the set of vertices adjacent to v , and s is a small scaling factor which is set to 0.05 in our program, just as in GRIP system [ 7], V ( G L ) is the vertex set sum of attractive forces to v , and the second item is the sum of repulsive forces to v . 
Next, our method calculates vertex-edge repulsion force vector by equation (8) where e is an edge which does not incident to v and p is the projection of v onto e . 
Finally, the boundary repulsion force vector is calculated by the equation (9). Here, instead of using a step function to simulate the repulsion forces exerted by the such repulsion forces. The equation (9) indi cates that the boundary repulsion force of a vertex is proportional to the vector which starts from the center point of the place-ment region and end with this vertex. placement region. placement vector for vertex v . We adopt the same algorithm as in GRIP [ 7] for deter-mining the local temperature. 4.1 System Design Based on the proposed method, we developed a graph visualization system X  DynamicViewer. Its novelty is in the use of different views: global view, detail view and text view, together to help a user navigate the Web. The first view, global view, is responsible for giving an overview of the graph being displayed. In order to improve the one described in Section 3.2.1. The second view, detail view, focuses on display-ing the detail sub-graph. A force-directed method described in Section 3.2.2 is utilized textual information in response to mouse move in detail view or global view. 4.2 Experimental Results A number of examples have been tested to demonstrate various cases that could be handled by our method. 
First, to evaluate the performance of our representative vertex selection method, we compare it with the traditional link analysis method [ 17] using the example in Fig. 1. In this example, vertex A is actually the most important vertex since it is the root node most important one after performing 38 iterations. As a comparison, our method con-verged after iterating only 19 times. It recognized vertex A being the most important one. Tables 1-2 show some intermediate results of the two iteration processes. In these two tables, the weight value whose font is italic bold is the largest one at each improved method are more reasonable than the ones generated by the traditional method. This is because the improved method recognized vertices A, B, F, C, G, and H being the important ones; while the traditional method found vertices F, I, J, K, and L being the important ones. Furthermore, our comprehensive study on other 10 real examples shows similar improvement (see Table 3). 
Next, we demonstrate the distinction between our initial layout method (Section sult. Compared with the initial layout algorithm adopted in GRIP, our approach avoids the drawbacks of vertex overlap by utilizing a subdivision strategy. Moreover, our method distributes the vertices more evenly. 448 
Theoretically, information on the Web can be regarded as a graph. It is therefore feasible to apply graph visualization and navigation technology to the Web. In the following part of this section, we will illustrate the application of DynamicViewer in Web navigation. Here the Web also includes the Semantic Web since it is an exten-sion of the current Web. 
Fig. 3 illustrates the construction process of LOD model by an example of Seman-and museum (e.g., museum web sites, web pages with exhibited artifacts). This ex-ample is taken and adapted from [ 15]. Fig. 3(a) is the original graph with 46 vertices. Fig. 3(b) shows the graph corresponding to the first level of the LOD tree, the repre-sentative vertex of this cluster is  X  X xtResource X . After clicking  X  X ainting X  in the graph of the first level, we obtain a sub-grap h at the second level (see Fig. 3(c)). Then in the sub-graph shown in Fig. 3(c), we click the vertex  X  X braham.jpg X  and then ob-tain a sub-graph at the third level (see Fig. 3(d)). 
Fig. 4 shows an example of how DynamicViewer helps the Web user to find the in-formation he needs. This web graph was produced by submitting query words  X  X otus (http://www.ibm.com). With this query, 74,774 results were acquired. Next, the first Finally, an LOD model was constructed for this graph. In DynamicViewer, pages with higher connectivity will be in the higher level of the LOD tree, and thus will be right information to the user. Fig. 4(a) show s the graph corresponding to the first level of the LOD tree, the representative vertex of this cluster is  X  X BM Lotus Software-the search result only contains 6 Lotus products. After clicking  X  X BM Lotus Software-QuickPlace X  in the graph of the first level, we obtain a sub-graph at the second level (see Fig. 4(b)). This graph illustrates the relationship between  X  X uickPlace X  and other Lotus products. Compared with traditional browsing tools of search engines, Dy-namicViewer provides an overview of the search result to the user, which enhances his or her understanding of the knowledge structures, thus promotes further explora-model, and the user has to click the "Next" button to find new information. It does not While our method provide navigation cues before going to the next graph since each the right navigation path. Thus this can reduce the number of clicks. Fig. 1 Fig. 1 ( r =3) examples 450 
The final example is intended to demonstrate the distinction between our method Fig. 5. Comparatively, our method does not display all vertices in one cluster. Instead, method, more details are shown when clicking a particular vertex in the detail view or displaying all vertices by selecting a representative vertex for each cluster. (a) Roxborough X  X  method (b) Our method We propose a new method for visualizing and navigating huge graphs. The main feature of this method is that it applies LOD strategy to graph visualization and navi-gation, and allows the user to navigate a huge graph in real time. To provide a friendly interactive system in which the user can retain context while viewing individual information on demand, we apply link analysis and wavefront algorithms to graph visualization and navigation. 
The development of a prototype visualization system X  X ynamicViewer, is pre-view, are provided to facilitate the navigation and exploration of the huge graph. Moreover, we demonstrate its application in Web navigation. We regard the work presented as an initial step and there are improvements to be made as well as many directions to pursue. The future work will be focused on im-proving the usability and reliability of the LOD model. Semantic information embed-ded in the Web should be fully exploited to improve the clustering results. In addition, we should study user experience in navigating Web and provide a more friendly inter-action mechanism. We would like to thank our colleagues, Dr. Zhong Su, Dr. Li Zhang, Dr. Li Ma, and Dr. Zhaoming Qiu for their helpful discussions and thoughtful criticisms. My col-league, Dr. Chen Zhao, gave us valuable co mments to UI design. Special thanks go to Dr. Ivan Herman from W3C for many constructive suggestions. 3. Davidson R, Harel D. Drawing graph nicely using simulated annealing. ACM Transaction 4. Eades P. A heuristic for graph drawing. Congressus Numerantium. (1984) 149-160 5. Fruchterman TMJ, Reingold EM. Graph drawing by force-directed placement. Software  X  6. Furnas GW. Generalized fisheye views. Proceedings of the ACM SIGCHI X 86 Conference 7. Gajer P, Kobourov S. GRIP: Graph drawing with intelligent placement. Journal of Graph 10. Harel D, Koren Y. A fast multi-scale method fo r drawing large graphs . Proceed ings of 8th 11. Hendley RJ, Drew NS, Wood A, Beale R. Narcis sus: Visualizing Info rmation. in Proceed-15. Karvounarakis G, Christophides V, Plexousakis D, Alexaki S. Querying RDF descriptions 16. Kaufmann M, Wagner D. Drawing graphs: methods and models. New York: Springer-452 18. Koren Y, Carmel L, Harel D. ACE: A fast multiscale eigenvector computation for drawing 19. Miller JC, Rae G, Schaefer F. Modifications of Kleinberg X  X  HITS algorithm using matrix 20. Munzner T 21. Qadah GZ. The wavefront and  X  -wavefront algorithms: a comparative study. International 23. Risch JS, Rex DB, Dowson ST, Walters TB, May RA, Moon BD. The STARLIGHT in-26. Shiozawa H, Matsushita Y. WWW visualization giving meanings to interactive manipula-
