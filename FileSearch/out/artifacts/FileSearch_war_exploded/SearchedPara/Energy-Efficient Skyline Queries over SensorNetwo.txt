 A wireless sensor network (WSN), a netwo rk consists of several base stations and a large number of wireless sensors , has been widely used in many fields, such as military applications, environmental applications, health applications, traffic surveillance, etc [15, 21]. Each sensor node plays multiple roles as data originator, data router and data processor, which consume a lot of energy. The lifetime of batteries which supplies power for sensor nodes is limited, and it mainly determines the lifetime of senso r network, however battery replacement is impossible or at least very difficult in s ome circumstances. Thus, a method is needed to manage the tremendous data generated by sensors as well as minimize power consumption to prolong the lifetime of the sensor network.

Skyline query is proposed to retrieve data according to multiple criteria. It can be especially useful in the context of sensor network where multiple criteria query is essential, for example, the drier and hotter the forest is, the more possible to catch fire. In sensor networks, sensor nodes are generally cheap, wireless, multi-functional, resource-constrained and di stributed. Due to thes e characteristics, existing solutions which are mainly focus on traditional database are inapplicable to the sensor network environment directly.

In wireless sensor network, data are collected by sensing devices periodically, a wireless sensor network is more like a di stributed, multiple data stream sys-tem than a traditional database. While in a data stream system, sliding window computation is often co nsidered. Thus, in this paper, we explore sliding window skylines , which seek the skylines over the lat est data that are constrained by a sliding window. As mentioned above, energy is the most precious resource in sen-sor networks, and it is mainly consumed by wireless communication. Therefore, the main challenge in maintaining sliding window skyline is how to minimize the communication cost in the sensor network.

In this paper, we propose an energy-efficient algorithm (EES) to continuously maintain sliding window skylines over a sensor network. EES uses a mapping function to map the data to a smaller range of integer, and carries out the skyline of the mapped set as the mapped skyline filter (MSF). MSF within each node can filter the data that is strictly dominated by the elements in it. The benefit brought by MSF is much more than the cost, because only several bits are needed for small range of data. Consequently the amount of data transferred is reduced greatly, and as a consequence the energy consumption is saved. The contributions of this paper are summarized as follows:  X  We prove theoretically that the mapped skyline can be used as a filter to  X  We propose an energy-efficient approach which uses the mapped skyline  X  Last but not the least, our extensive simulation studies show that EES per-
The rest of the paper is arranged as follows. Section 2 briefly reviews the previous related work. The basic and our energy-efficient algorithm to maintain sliding window skyline is introduced in Section 3. The extensive simulation re-sults to show the effectiveness of the prop osed algorithm are reported in Section 4. Finally we conclude in Section 5. Borzonyi et al. [3] first investigate the skyline query and present several meth-ods, including SQL implement, divide-and-conquer (DC) and block-nested-loop (BNL), to compute skylines. A pre-sort me thod is presented in [5], which sorts the dataset according to a monotone preference function and then computes the skyline in another pass over the sorted lis t. Tan et al. [18] present two progressive methods, Bitmap and Index. Since the nearest neighbor (NN) is sure to belong to skyline, a progressive on-line metho d based on NN is presented in [9], which allows user to interact with the process. The performance of algorithm presented in [9] is further improved by the algorithm using R-tree in [17].
The methods mentioned above are just suitable for centralized scenarios. So far, we do not find any proposed approach addressing skyline queries over a sensor network. The most related works to ours are some studies about sky-lines in a distributed scenario. In [4], the skyline problem is extended to the world wide web in which the attributes of an object are distributed in different web-accessible servers, and a basic distributed skyline algorithm (BDS) and an improved distributed skyline algorithm (IDS) are presented, which compute the skyline in such a distributed environment. In BDS, a simple method is used to identify a subset of the objects that include the skyline, and then all the non-skyline objects in that subset are filter ed away. IDS uses a heuristic approach and finds the subset more quickly than BDS. Later, in [10], a progressive dis-tributed skyline algorithm (PDS) based on progressiveness and rank estimation is proposed to improve the performance of BDS and PDS. In [8], a hybrid storage model is proposed to reduce the execution time on each single mobile device, and a filtration policy is proposed to reduce communication cost among mobile devices, which is similar to our proposal. However, their approach mainly fo-cuses on answering skyline queries on on e timestamp, i.e. snapshot skylines, our approach focuses on continuously maintaining sliding window skyline queries.
There are some works proposed to answer sliding window skyline queries with the focus on handling the characteristics of stream data. A framework is proposed to continuously monitor skyline changes over stream data in [19]. Lin et al. [11] present a pruning technique to reduce the amount of data, an encoding scheme to reduce memory space, and a new trigger based technique to continuously process an n -of -N skyline query, which compute skyline against any most recent n elements in the set of the most recent N elements.
 In wireless sensor network literature, the aggregate functions, such as MAX, MIN, AVERAGE, SUM, and COUNT, have been widely studied in the past few years [12, 13, 14, 22], they often use in-network computation to reduce the com-munication cost. There are also works on implementing join operator in sensor network. For example, Bonfils et al. [2] present a dynamic adjustment algorithm for join operator in in-network query processing, and REED [1] studies efficiently evaluating join queries over static data tables. Moreover, the in-network imple-mentation of general join and range join in sensor network are conducted in [7] and [16], respectively. In this section, we first describe the sliding window skyline. Then, the Basic Sliding Window Skyline Monitoring Algorithm (BS) is presented in Section 3.2, and our Energy-Efficient Sliding Window Skyline Maintaining Algorithm (EES) is provided in Section 3.3. 3.1 Sliding Window Skyline over Wireless Sensor Network Skyline query plays an important role in many sensing applications that require retrieval with respect to user preferences . It has been well studied in the traditional database literature with the assumption that data are located in one central site. Skyline query is defined as following: Definition 1. Assume that we have a relational database, given a set of tuples T , a skyline query retrieves tuples in T that are not dominated by any other tuple. For two tuples t i and t j in T ,tuple t i dominates tuple t j if it is no worse than t j in all dimensions and better than t j in at least one.
 In wireless sensor network, data are collected by sensing devices periodically, and each tuple that has been co llected has a timestamp t.arr indicating its arrival time. Since energy is the precious resou rce in the sensor network and wireless communication is the main consumer, the data will not be transmitted unless necessary. Sensed data are dispersedly s tored in each sensor node, therefore, strictly speaking, a wireless sensor network is more like a distributed, multiple data streams system than a traditional database.

It is impossible to carry out skyline operation after all data have been col-lected, because the sensor stream is infinite, and the volume of the complete stream is theoretically boundless. Thus, sliding window skyline ,whichaimsto provide the most recent on-lin e information, is considered. If the size of sliding window is set to W , and the current time is t.curr , Sliding window skyline only considers the data which satisfy t.arr + W&gt;t.curr . 3.2 Basic Sliding Window Skyline Maintaining Algorithm The naive approach to maintain sliding window skyline is to transmit all sensed data to the base station, and then compute and maintain the sliding window skyline there. Since the skyline is only a little part of the entire tuple set, many tuples which have no contribution to the final result will be transmitted to the base station. Thus the number of messages and the power consumption are large. Therefore, this method is unpractical for wireless sensor network.

A better approach is to carry out the computation within each sensor node and then merge the result on the intermediate nodes. But this approach requires the operation to be decomposable. Fortunately, the sliding window skyline query over wireless sensor network has this attractive property.

Denotes the tuple set in the entire sensor network as T , the tuple set for each node as T i .Using skyline () to stand for skyline operator, we can easily get tation like TAG [13] is feasible.

Like TAG [13], a tree-based structure rooted at the base station is first es-tablished as the rooting tree. The base station broadcasts a message with its own id and level (in general case, zero) to construct the routing tree. Any node that hears this message will assign its own level to be the level in the message plus one, and choose the sender as its parent, then replace the id and level in message with its own id and level, finally rebroadcast the routing message to its neighbors. The routing tree is constructed step by step until all nodes have been assigned a level and a parent. The process above will be initiated periodically by the base station, thus the network topology will be constructed periodically. Therefore, this structure can easily ad apt to the moving, entering or removing of the sensor nodes.

Once the construction of rooting tree is finished, the skyline will be computed in-network whenever possible. Each le af node computes its own skyline and forwards the skyline to its parent. The intermediate nodes receive the skyline of their children and combine these results with their own using the merging function. Then, they submit the new partial results to parents of their own. Most transmission of the tuples that belong to local skyline but not global skyline is terminated on the intermediate nodes.

After the process of sliding window skyline computation, new tuples are col-lected by sensor nodes, while the old ones expire. A simple approach to maintain the global skyline is to recompute the skyline periodically using the method pre-sented above. Obviously it is unpractical, because there is a great intersection between the old skyline and the new one, same as the old window and the new one. The redundant data need not to be transmitted again, so an effective way should be  X  update-only  X , which means only the tuples that have not been trans-mitted are transmitted in maintenance. Therefore, the communication cost is further reduced. 3.3 Energy-Efficient Sliding Window Skyline Maintaining The in-network computation can reduce the amount of data transferred among sensor nodes, however, there are still a great number of tuples that do not belong to the final skyline having been transmitted.

Generally speaking, data collected by sensor nodes is float. If a good mapping function with careful design is used to map the float data to a range of integer, we can carry out the skyline of mapped set and use it to filter data that do not belong to skyline. Since only several bits are needed to present an arbitrary integer in this range, the cost of computation and broadcasting the filter is very low. The benefit brought by this process is much more than the cost, thus the transmission cost is reduced greatly.

With the following mapping function, x  X  [ l, u ] can be mapped to the integer range of [0 ,m ]. Note in the above function that it has a serial of properties, which can be used to reduce the amount of data transferred in sensor network, therefore the per-formance is greatly improved.
 Lemma 1. If f ( x i ) &lt;f ( x j ) ,then x i &lt;x j .
 Proof: According to properties of the function, we have Therefore, we can conclude that x i &lt;x j .
 We use to stand for the dominance relationship, t for a tuple in T, and t.x d for the d th attribute of tuple t . Assume that the dimensionality of tuple set is D .Wedenote where [ l k ,u k ] is range of the k th dimension, the total bits needed to present the element that a tuple mapped to is and u k are set according to the history data. Usually, u k is set to twice of the maximum value, and l k is set to half of the minimum value [20].
 Definition 2. For two tuples t i and t j in T ,tuple t i strictly dominates tuple t j if it is better than t j in all dimensions. Using to denote the strictly dominance relationship.
 We can easily conclude, Lemma 2. If t i t j ,then t i t j .
 Proof: Immediate deduct from the definition 1 and 2.
 Lemma 3. If tuple t i and t j are two tuples in T ,then f ( t i ) f ( t j )  X  t i t j . Proof: Since f ( t i ) f ( t j ), we have ( f 1 ( t i .x 1 ) ,f 2 ( t i .x 2 ) , That is  X  k  X  X  1 , 2 ,  X  X  X  ,D } ,f k ( t i .x k ) &lt;f k ( t j .x k ), From lemma 2,  X  k  X  X  1 , 2 ,  X  X  X  ,D } ,t i .x k &lt;t j .x k  X  t i t j , Therefore, we can conclude that t i t j .
 We denote T as tuple set that is obtained through mapping, and denote skyline ( T ) as the skyline of T . Theorem 1. For a tuple t j in T , if there exists one tuple t i such that f ( t i )  X  skyline ( T ) and f ( t i ) f ( t j ) ,then t j /  X  skyline ( T ) Proof: Immediate deduct from lemma 3.
 According to theorem 1, it will reduce the amount of data transferred in wireless sensor network if skyline ( T )isusedasafilter.
 Definition 3. We define skyline ( T ) as mapped skyline, and define mapped sky-line used in filter as mapped skyline filter (MSF).
 The process of sliding window skyline computation which integrates MSF as the filter is presented as follows: 1. Determine the parameter l , u and m , that is to determine the range [ l k ,u k ] 2. Each sensor node maps its own T i to T i using f ( t ), and carrys out skyline ( T i ). 3. Get skyline ( T ) using the method of in-network computation, and set it as 4. Broadcast MSF to the entire network. 5. Remove tuples that are filtered by the MSF in sensor nodes. 6. Use in-network computation to carry out skyline query.

How to maintain MSF incrementally beco mes a critical problem in the process of maintaining sliding window skyline in sensor network. The following lemma and theorem help us to maintain MSF dynamically in sliding window skyline maintaining process.
 Lemma 4. If t i t j ,then f ( t i ) f ( t j ) .
 Proof: Immediate deduct from the mapping function.
 Theorem 2. Let S = skyline ( T ) ,and S denotes the set mapped from set S , Then skyline ( T )= skyline ( S ) .
 Disproof: Assume there exists a tuple t , t = f ( t )  X  T  X  S ,and t  X  skyline ( T ). According to the definition of skyline, From lemma 4, we have f ( s ) f ( t ), So t /  X  skyline ( T ), conflicting with the assumption t  X  skyline ( T ). So, skyline ( T )= skyline ( S ).
 According to theorem 2, we know that the base station can get the correspond-ing MSF using the skyline result at each timestamp. Comparing the new MSF with the old one, when base station finds invalid or new elements in MSF, it broadcasts them to the entire sensor network. Sensor node updates its own MSF to guarantee the correctness of filtering co nstantly according t o certain strategy. In the broadcast package, only the invalid or new elements need to be transmit-ted, and the operation of addition or deletion will not be identified. Let MSF + denote the set of elements which need to be transmitted, then we have The revised approach is as follow.
 Therefore, the MSF are co rrectly maintained dynamically in the process of slid-ing window skyline maintenance.

In most cases, the data generated by sensor nodes is in [ l k ,u k ], however some special cases may take place. Once data is out of this range, original mapping function is out of use, because the data that is mapped to is also out of range. So we need to renew the parameters and broadcast them as well as the new MSF carried out according to the new parameters to entire wireless sensor network. Then each node recalculates mapping according to the new parameters and uses MSF to filter data. In this way, sliding window skyline can be maintained very well in all cases. In this section, we present our simulation results evaluating the performance of energy-efficient sliding window skyline maintaining algorithm (EES) against the basic sliding window skyline maintaining algorithm (BS) under two data dis-tributions, independent and anti-correlated, which are the common benchmarks for skyline query [3, 19].

We simulate sensor network by randomly placing n sensors nodes in an area of  X  2  X  sensor nodes n is in the range from 600 to 1000, the dimension of sensory data d ranges from 2 to 4, and the size of sliding window c varies from 100 to 500. Each sensor node generates a new tuple on each timestamp, thus there will be n new tuples generated in the whole sensor network.

All experiments are run on a PC with 2.8GHz CPU, 512M of memory and 80G harddisk. The default setting of experiment is n = 1000, c = 300 and d =3.
First,we study the effect of th e selection of integer range m in the process of skyline computation under independent and anti-correlated data distribution respectively. For simplicity, we let m =2 x  X  1. Figure 1 shows the total com-munication cost (the number of bytes of the messages transferred among sensor nodes) under different m .Thebest m for independent distribution is 1023 and the best m for anti-correlated distribution is 63. This is because the larger m means the larger broadcast cost of filter, while the smaller m means the lower filter ability. On the best choice of m , the cost and the benefit of the filter bal-ance well. Therefore, in the exp eriment of skyline computation, m is 1023 for independent data, and set to 63 for anti-correlated data.
Figure 2, 3 and 4 present the influence on performance by dimension, car-dinality and the number of nodes under independent and anti-correlated data distribution, respectively. They show that EES always performs better than BS under all circumstances. Communication cost increases with the increase of di-mensions, since the skyline result will increase with a high dimension which leads to the increment of communication cost. Change of cardinality and the number of nodes also affect the cost, and EES increases more slowly than BS with the increase of c and n respectively.
Next, we study the performance of EES and BS in the process of skyline maintenance. Before comparing the performance of BS and EES, the effect of the selection of integer range m in the process of skyline maintenance under independent and anti-correlated data distribution is studied respectively. The sliding length is 500 time-stamps. Figure 5 shows that the best m for independent distribution is 4095, and it is 511 for anti-correlated distribution. Both are larger than the ones in skyline computation, because each element in MSF has a long aging in the process of skyline maintenance, and thus the broadcast cost will be shared by each timestamp, as a result the optimum m changes. The same, m is set to 4095 for independent data, and 511 for anti-correlated data in process of skyline maintenance.
Figure 6, 7 and 8 demonstrate the influence on performance by dimension, cardinality and the number of nodes under independent and anti-correlated data distribution, respectively. they show the similar result as the process of skyline computation except cardinality. The comm unication cost slight ly decreases with the increase of cardinality in some cases, because the tuple has a longer lifespan, and the chance of a new tuple to join the skyline result may be smaller.
Finally, we study the time-varying regularity of communication cost in the process of skyline maintenance. Figure 9 shows that the communication cost increases smoothly with time. EES always performs better than BS. In this paper, we focus on continuously maintaining sliding window skyline over sensor network. In particular, we propose a mapped skyline filter (MSF) to reduce the communication cost in process of skyline computation. Moreover, the method to maintain MSF so as to maintain the sliding window skyline is discussed. Our experiment result proves that EES is an energy-efficient approach for computing and maintaining sliding window skyline on sensor streams. Acknowledgement. This work is partially supported by National Natural Sci-ence Foundation of China under gra nt No. 60573089 and 60473074 and supported by Natural Science Foundation of Li aoning Province under grant no. 20052031.
