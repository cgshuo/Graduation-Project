 Concept maps are often used as a tool for knowledge organization, representation, and sharing [Coffey et al. 2002; Novak and Ca  X  nas 2008; Tergan 2005]. In a concept map, important concepts are presented as text-based nodes and relationships among con-cepts are visualized as line-style links to connect relevant concepts. Concept maps could be used for education and cooperation in schools and corporations [Novak 1998; Novak and Gowin 1984]. In the process of text analysis, a concept map could be used to structure textual knowledge and achieve better recall of information [Halimi 2006]. Currently, people can use tools like MindManager, 1 Inspiration, 2 or FreeMind 3 to cre-ate concept maps with a keyboard and mouse. This keyboard-and-mouse approach suffers two problems. First, it usually requ ires users to follow specific task struc-tures (e.g., two concept nodes must be creat ed before their link can be generated), which could distract users from their primary tasks. Second, it becomes inefficient and ineffective to use keyboard and mouse on devices that support more direct inter-action, such as pen-based and touch-based computers, because such devices usually only provide a virtual keyboard and offer gesture-based interaction that is different from mouse behaviors.

Hand-drawn concept map tools can help to overcome these two challenges. They allow users to write and sketch directly with gestures. However, existing tools are still weak when processing hand-drawn concept m aps. It is difficult to create hand-drawn concept maps in a natural and fluent fashion. For example, MindManager can only handle concept nodes with pen gestures, not concept links; Inspiration requires users to follow specific drawing rules and orders to make nodes and links recognizable; sKEA [Forbus and Usher 2002] demands explicit information about where a symbol starts and ends in concept maps; and Dashboard 4 allows drawing of concept maps, while the meaning and structure of concept maps are not understood. Moreover, users also face challenges in other high-level tasks, such as manipulating and searching hand-drawn concept maps.

The problem is largely due to the lack of methods to recognize and structure node and link components of hand-drawn concept maps. This article proposes a recogni-tion algorithm to extracts nodes, links, and their relationships from a hand-drawn concept map that is created without any constraint on drawing order. Meanwhile, a retrieval algorithm is designed for hand-drawn concept maps. Figure 1 shows what our recognition algorithm can deliver. Figure 1(a) is a hand-drawn concept map about the Olympics. All handwritten concept nodes are in Chinese (English translation is provided by authors to indicate the meaning of each node). Figure 1(b) illustrates the extracted structure and the recognition result with our algorithm. In this figure, strokes belonging to the same node block are put a bounding box and the text below each bounding box is the recognition result of the node block; link strokes are also recognized and thick dashed lines are added to connect node blocks and link blocks. These dashed lines can help users evaluate whether the relationships between node blocks and link blocks are correctly understood by the algorithm.

The article is structured as the following. First, we review related research, and then outline a set of features commonly seen from hand-drawn concept maps based on our user interviews. Next, we describe the details of the recognition algorithm and the retrieval algorithm, and present a set of intelligent manipulation techniques for the management and modification of concept maps based on recognized structures. Furthermore, we introduce our research on evaluating the accuracy and usability of our approach. Finally we discuss the results of our research and conclude the article with future research directions. Because our interest is in hand-drawn concept maps, literature reviewed here concerns previous research on sketch understanding, sketch manipulation, and sketch retrieval. Sketch understanding has been studied by many researchers since the 1970 X  X . Re-search has been conducted on domain-specific sketch recognition, such as recognition of handwritten mathematical expressions [Chan and Yeung 2000], handwritten or-ganic chemical formulae [Ouyang and Davis 2007], hand-drawn UML [Hammond and Davis 2002], and handwriting notes [Li et al. 2002]. These methods address sketch un-derstanding problems in their specific domains, but this domain-specific optimization approach cannot be directly applied in the structure understanding of more general, out-of-domain hand-drawn diagrams, such as concept maps. Chik et al. [2007] tried to understand pen-based mind-maps by identifying the first node as the central node and then finding subnodes connected to it recursively.

Some researchers have investigated sketch understanding methods that can be used more broadly. Alvarado [2004] and Shilman et al. [2002] proposed grammar-based sketch recognition methods, but due to the difficulty in defining grammars for various types of concept maps, this approach is inappropriate to concept map structure recog-nition. The method by Kara and Stahovich [2004] achieved diagram recognition with a hierarchical approach to parse and recognize strokes, but it faces challenges when rec-ognizing concept maps because of the similarity between link strokes and some node strokes. While the joint probabilistic model [Szummer and Cowans 2004] can simul-taneously group and recognize inks based on dependencies among ink fragments and user feedback, different node styles and link styles in concept maps pose challenges in defining context dependency. The recognition-based segmentation method by Shilman et al. [2004] used dynamic programming to segment strokes. However, the increase of stroke number can dramatically decrease the time efficiency of this method. The recognition method by Gennari et al. [2005] is based on geometry and domain knowl-edge and is suitable for network-like diagrams that contain isolated, nonoverlapping symbols. It requires strokes in one symbol be successive and cannot handle concept maps, in which one node is not always drawn in one step.
 Research has shown that to manipulate a hand-drawn diagram, techniques based on an underlying structure of the diagram are effective and efficient [Ao et al. 2006; Jiang et al. 2009, 2010; Li et al. 2002]. For example, Ao et al. [2006] showed that structural-izing raw digital ink as multiple hierarchies can facilitate selection tasks and improve task performance, and Li et al. [2002] found that allowing user interaction with note semantics, rather than individual strokes, can better help notes manipulation.
Some sketch manipulation tools have been designed. Stretch-A-Sketch [Gross 1994] is a pen-based drawing program that combines recognition of hand-drawn glyphs with constraint-based maintenance of spatial relationships. However, its recognizer does not fit for hand-drawn concept maps that have different node and link styles, and the program can only handle local constraints, not global spatial constraints. The struc-tured editing tool by Moran et al. [1995] can detect implicit structures that humans see in drawing, but this technique only supports editing list, text, table, and outline structures over handwritten scribbles and typed text. Scanscribe [Saund et al. 2003] is a novel image editing program emphasizing easy selection and manipulation of ma-terial found in documents based on visual perceptual organization theories (e.g., the Gestalt laws). It is acted on offline sketch which is different from concept maps with strokes, however. The pen-based mind-mapping tool by Chik et al. [2007] can recognize hand-drawn hierarchical structures and allow the revision of the recognized structure. However, this tool can only handle hierarc hical structures and has a strict require-ment for the order of objects to be drawn (e.g., a parent node must be drawn before any child node). Researchers have studied methods for sketch and online document retrieval. Liang and Sun [2008] used biased SVM classification for sketch retrieval by matching query sketch with sketches in libraries based on their weighted spatial distance. Leung [2003] proposed a method to compare the features of sketches with global and lo-cal matching. However, these methods, w hich are primarily based on stroke corre-spondence, are inappropriate for hand-drawn concept map retrieval, because concept maps with similar concept structures may hav e different graphics appearances. As for online document retrieval tasks, InkSeine allows searching in formal texts by rec-ognizing users X  handwriting into text [Hinckley et al. 2007]; Jain and Namboodiri [2003] proposed a method to index and retrieve online handwritten documents; and Jawahar et al. [2009] tried to retrieve online handwriting documents by synthesizing and matching handwritten data. However, these methods can only support search based on sketched text, and cannot be used for searching concept maps, which have graph structures.

Graph matching is widely used in areas such as image analysis, document process-ing, biometric identification, image databases, and video analysis [Conte et al. 2004]. In Zhou et al. [2005], a graph-matching approach was used for intelligent multimedia retrieval. Cordella et al. [2001] presented a graph-matching algorithm to address the problems of graph and graph-subgraph isomorphism. As hand-drawn concept maps have graph structures, it is possible to retrieve concept maps using graph-matching methods. However, to the best of our knowledge, we have not found such graph-matching techniques used in hand-drawn concept map retrieval. To design tools that can handle the complexity of concept maps created by different people and with different styles, we first conducted an interview study to capture common structural features of hand-drawn concept maps. We interviewed 12 people who often use concept maps. Two of them have used computer-based concept maps be-fore. We asked them to draw concept maps with pen and paper. Figure 2 shows three concept maps from them.

Based on drawings collected from subjects, we identified the following features of hand-drawn concept maps.  X  Concept maps can have various spatial layout styles, such as top-down style shown in Figure 2(a), center-out style in Figure 2(b), or left-right style Figure 2(c). In addi-tion, they can have different structural styles: as a tree, or as a network. However, despite different layout and structural styles, all concept maps are diagrams with basic node and link elements.  X  Concept nodes and links can also have different styles. Nodes may have a bounding shape (e.g., box, oval) or not. A link can be a line with arrow or a simple line. Most links are not curved.  X  There are two kinds of relationships between nodes: a parent-child relationship, which is indicated by unidirectional arro ws connecting two nodes, or a brother-brother relationship indicated by a nondirectional line or a bidirectional arrow be-tween two nodes.  X  In addition to these representation features, we also observed people X  X  different drawing habits. Some people drew all concept nodes first and then added links be-tween them, while some drew links and nodes in random order. As for concept nodes with bounding shapes, some people drew node content first and then the bounding shape, while some did in the opposite way. Furthermore, people did not always fin-ish a node in one step. They may draw part of a node first and then finish it after other links or nodes. In addition, most links are drawn in one stroke. Although different users have different preferences for drawing styles, we did not find a cor-relation between users X  experience of computer-based concept maps and the concept map styles they drew.
 During the interview, some people mentioned that while it was easy to create concept maps on paper, it was often difficult to edit them. Moreover, it was inconvenient to retrieve concept maps in their notes. They would like to have a computer-based concept map tool that allows them to create a concept map easily and at the same time to edit, organize, and retrieve it conveniently. In addition, users who have used computer-based concept maps were glad and excited to use a hand-drawn concept map tool, largely because hand-drawn concept m aps are more intuitive and flexible.
To address these needs, we developed a hand-drawn concept map understanding al-gorithm to extract concept map structures and then designed intelligent manipulation techniques to manipulate concept maps through extracted structures. Moreover, we designed retrieval technique for hand-drawn concept maps. The key to understanding a concept map is to extract concept nodes and links. In a hand-drawn concept map, node blocks and link blocks are often close to or even con-nected to each other, and segmenting nodes and links only based on stroke clustering is infeasible. One way to separate node blocks from link blocks is to recognize link strokes first and then use these link strokes as delimiters to get individual node blocks [Kara and Stahovich 2004]. However, this approach has a problem in handling node strokes similar to link strokes, which would lead to an over-segmentation result. We address this over-segmentation issue by developing an algorithm that combines dy-namic programming [Cormen et al. 2001] and graph partition. Dynamic programming is used to extract optimal link blocks and node blocks and meanwhile to merge over-segmented node blocks. Graph partition is adopted to decompose a large graph into smaller subgraphs to improve the time efficiency.

Our algorithm has five steps to understand a concept map based on hand-drawn strokes. The first preprocessing step judges each stroke X  X  type, merges nonlink strokes, and represents the concept map as a graph. The nodes of the graph are stroke blocks and the edges are relationships between stroke blocks (e.g., their distance). The second step partitions the graph into several sub graphs by a graph partitioning algorithm. The third step extracts node blocks and link blocks from each subgraph by using dy-namic programming. The fourth step generates the concept map structure based on the blocks obtained from step 3. The final step recognizes concept nodes to get a se-mantic concept map. The following sections provide more details of each step of our algorithm. (The pseudocodes are given in Appendix.) 4.1.1. Preprocessing. The input of this step is a series of strokes { s 1 , s 2 ,...,s N } ,where s is the ith stroke and N is the total stroke number, and the output is a graph to store preprocessed blocks. Our algorithm first uses the $1 recognizer [Wobbrock et al. 2007] to identify whether a stroke is a link stroke. Here, we assume a link stroke resembles a straight line or a line with arrow. Neighboring nonlink strokes are merged to blocks, and a graph is created to hold these stroke blocks.

Whether two nonlink strokes should be merged is based on their distance. If the dis-tance between two stroke blocks is smaller than a threshold value and neither stroke block is a link stroke block, they are merged; otherwise, they are two separate blocks.
With all stroke blocks after merging, a weighted undirected graph G can be built: The nodes in G represent stroke blocks and the edges in G indicate the relationships between stroke blocks. w ij is the distance between blocks b i and b j . weightThres is set to be 1.5 times of the average diagonal length of the bounding boxes of all stroke blocks.
 Figure 3(a) shows a hand-drawn concept map about some provinces and cities in China. The nodes were written in Chinese. (English translation is provided by authors to show the meaning of each node. Here,  X  X uizhou X  and  X  X ichuan X  are two neighboring provinces in Southwest China, and  X  X hengdu X ,  X  X ujiangyan X , and  X  X olong X  are three cities in the Sichuan province.) Figure 3(b ) shows 13 stroke blocks after premerging. Some of them are over-segmented, such as (0 , 1), (3 , 4), (6 , 7), and (11 , 12). The vertical stroke in stroke block 1 is recognized as a line stroke, but it is actually a stroke that is part of the character in stroke block 0. S imilarly, stroke blocks 4 and 7 are not line strokes, and should be with stroke blocks 3 and 6, respectively. Stroke blocks 11 and 12 are recognized as two stroke blocks because of their distance, but they are actually two characters of one single concept context. Figure 3(c) is the graph G corresponding ( b b 10 in Figure 3(b). 4.1.2. Graph Decomposition with Graph Partitioning. The second step of our algorithm is to partition the graph G into several subgraphs with a graph partitioning algorithm. The time efficiency of block extraction with dynamic programming is greatly influenced by thenodenumberof G , so a divide-and-conquer strategy was adopted to first partition G into several smaller subgraphs and then dynamic programming was used to extract blocks in each subgraph. This graph partitioning technique has been widely used in such areas as VLSI design, transportation management, and data mining. Our algorithm is based on the graph partitioning method in hMETIS [Karypis and Kumar 1998]. Given a graph G =( V , E ), the time to partition G to two subgraphs is O( | V | + | E | ) [Karypis and Kumar 1998].

Figure 4 shows the flowchart of our graph partitioning. gpThres is the maximum node number that a subgraph could have and it equals to 8 in this research. When the node number of G is less than gpThres or equals to gpThres , dynamic programming is applied to find the optimal block segmentation. If the node number is larger than gpThres , the graph is further divided into two subgraphs. The process iterates until the node numbers of all subgraphs are not larger than gpThres. 4.1.3. Block Extraction by Dynamic Programming. Dynamic programming can extract opti-mal stroke blocks and merge preprocessed over-segmented blocks. Our algorithm first builds a candidate block set S . A stroke block after preprocessing is a candidate block and a stroke block together with its adjacent blocks constitutes a candidate block as well.

Then, our algorithm calculates the reliability of each candidate block. The reliability of a block is determined by three factors: densityFactor(V ), which is the ratio of stroke length to its bounding box X  X  diagonal length; distFactor(V ) , which is the inverse of the distance between constituent stroke blocks; and contextFactor(V ) , which is related to the relationships between constituent stroke blocks. If V is a candidate block in S ( V  X  S ), its reliability R ( V ) can be computed by the following formula.
R V = a  X  density Facto r V + b  X  dist F acto r V + ( 1  X  a  X  b )  X  contextFactor V where a , and b are coefficients.
 The task of block extraction is to find the optimal candidate block set { V 1 , V 2 , ... V blocks b i 1 , b i 2 , ... b iN . The following formula describes the approach to find optimal block segmentations by dynamic programming.

C ( V ) is the reliability corresponding to the optimal block segmentation of V .Itisthe maximum value of the valid segmentations. R ( V ) is the reliability of a candidate block V .  X  ( R ( V ) , C ( V  X  V )) defines the strategy to combine subproblem V and subproblem V  X  V , and is written as where | V | is the number of nodes in V .
 When | V | X  1 , there X  X  no subproblem. When | V | &gt; 1 and V is in the candidate set S , the optimal reliability of V is the maximum value of V , or the maximum value of all combinations of V and V  X  V ; otherwise, the optimal reliability is the maximum value of all combinations of V and V  X  V . A hash mechanism is used to store the optimal partition results of subproblems and their reliabilities. 4.1.4. Concept Map Structure Extraction. The final concept map structure is repre-sented in the form of an undirected graph G output ( V , E ) . Every edge ( v i ,v j )satisfies v .type!=v j .type , that is, node blocks and link blocks are adjacent in a concept map. In addition to the type attribute v i .type , v i has another attribute v i .text which indicates the recognition result of concept node v i .  X 
Because a link can connect at most two nod es, a concept map structure can be ex-tracted by identifying two node blocks for each link block. For complex concept maps, multiple node blocks may be found at one end of a link block. In this situation, only the block that is closest to the end of the link is considered. Following this approach, all node blocks can be tied to relevant link blocks. As a result, the structure of a concept map is extracted.

In addition, we extract parent-child relationships and brother relationships from the graph. These relationships can be determined by the types of link blocks people drew, as described in Section 3. 4.1.5. Concept Node Recognition. Concept maps with semantic meanings may be used for concept map searching. We recognize each concept node to get its corresponding text. For each node v i with node type ( v i . type=node ), our concept node recognition to empty string.

A concept node may have a bounding box or not. So the first step to recognize a concept node is to identify bounding strokes from handwritten texts in a node. The bounding strokes are those strokes by which text strokes are enclosed. In addition, the bounding strokes are often drawn at the beginning or at the end of the concept node. We distinguish bounding strokes from text strokes by utilizing the spatial and temporal relations between them. For handwritten texts, we used Microsoft Tablet PC Platform SDK 5 to recognize users X  handwriting.
 Figure 5 shows the effects of concept map structure extraction and node recognition. Figure 5(a) demonstrates stroke blocks extracted from two subproblems by dynamic programming. Figure 5(b) shows the relationships between nodes and links of the concept map with added thick dashed lines to connect nodes and links. Figure 5(c) illustrates the recognition results of concept nodes. We also designed an algorithm to support concept-map retrieval based on a hand-drawn query. Our algorithm focuses on the structure and semantics of a sketched query and searches concept maps by using the extracted concept map from the hand-drawn query. The process of our hand-drawn concept map retrieval algorithm is shown in Figure 6.

As shown, in our algorithm, an input query is first understood to get its correspond-ing semantic concept map. Then, the graph matching algorithm is applied to retrieve concept maps that match the query. 4.2.1. Similarity between Concept Map Nodes. As the graph matching algorithm is based on the semantic concept maps, we need to define the similarity between concept nodes.
Given concept nodes a and b , the following formula defines whether these two nodes are the same. When a and b havethesamenodetypeandthesimilaritybetween a.text and b.text is larger than simThres , they are considered to be the same.
 The similarity between a.text and b.text is calculated by considering Levenshtein Distance (LD) [Levenshtein et al. 1966] and the longest common substring between them. As the recognition of users X  handwri ting could not be perfect, LD allows finding concept nodes with some character recognition errors. For example, users X  handwriting of the word  X  X lash X  may be misrecognized as  X  X lush X . As the LD between  X  X lash X  and  X  X lush X  is small, we can still find  X  X lash X  with the misrecognized word. By adopting the longest common substring, searching based on a substring of a concept node is possible. For example,  X  X read X  could be used to search  X  X read and milk X . sim ( a . text , b . text ) =max 4.2.2. Graph Matching Algorithm. When a user provides a concept map sketch for search, our algorithm intends to find all the similar concept maps and subconcept maps. Thus, the retrieval of hand-drawn concept maps can be considered as a graph-subgraph iso-morphism problem. Moreover, as the hand-drawn concept map consists of nodes and links that contain attributes, it can be seen as an attributed relational graph. The graph-matching algorithm VF2 proposed by Cordella et al. [2001] could be used to solve the graph-subgraph isomorphism problem on attributed relational graphs and could work with very large graphs.

Our retrieval algorithm is based on the VF2 algorithm and our implementation is based on the graph-matching library VFLib 6 . Suppose G 1 is the graph corresponding to the input query and G 2 is a graph corresponding to a hand-drawn concept map in the storage, our graph-matching algorithm tries to find a mapping M between G 1and asubgraphof G 2.

Figure 7 illustrates how our retrieval algorithm works. Figure 7(a) is a hand-drawn query for concept maps. Figure 7(b) and Figure 7(c) are the search results and the highlighted strokes correspond to the query input. Based on the hand-drawn concept map understanding algorithm and retrieval algo-rithm, we design structure-based manipulation techniques and ink-based retrieval techniques for hand-drawn concept maps.

As concept maps are often used for creating and refining knowledge representations, people need to modify concept maps frequently. Therefore, natural and efficient ma-nipulation techniques are very important to a concept map drawing tool. To support natural and efficient manipulation of hand-drawn concept maps, we developed a set of pen gestures that allow users to handle conc ept maps by directly acting on extracted structures.

Selection is essential for editing concept maps. Operations like scaling and trans-lating are targeted for selected objects. With structures extracted from hand-drawn concept maps, structuralized selection becomes feasible. We designed three pen ges-tures to select stroke blocks at different levels. Figure 8 demonstrates these gestures. A user can select components in a concept map in three different ways: (1) tapping a stroke block to select the block, either a link or a node; (2) drawing a closed curve to select multiple blocks; and (3) drawing a straight line over a node block to select the block as well as all its child node blocks and relevant link blocks. The third selection method is a semantic-based technique that considers the relationships among node blocks.

This structure-based selection can simplify certain manipulation tasks. For exam-ple, a user can easily move part of a concept map part around while altering its struc-ture as shown in Figure 9.

In addition, other pen gestures were designed for manipulating concept maps (Figure 10). The user can exchange concept nodes (Figure 10(a) and 10(b)), scale a concept map (Figure 10(c) and 10(d)), delete part of a concept map (Figure 10(e) and 10(f)), correct errors (Figure 10(g) and 10(h)), and copy a concept map (Figure 10(i) and 10(j)). These gestures are similar to those designs in systems like MindManager.
We also implemented some simple gesture tools that allow users to correct draw-ing errors (e.g., erasing sketc hes, redrawing sketches). It should be noted that error correction techniques have been studied by many researchers [Ao et al. 2007; Wang et al. 2006] and are not the focus on this research. Our implementation of error cor-rection tools aims to improve the effectiveness of our system. Based on our concept map understanding algorithm and the proposed intelligent ma-nipulation and searching techniques, we designed a pen-based concept map drawing tool, called ConceptSketch (Figure 11), to support drawing, manipulating, and search-ing concept maps.

With the prototype, we conducted a study to evaluate the accuracy of concept map understanding, and the usability of our intelligent manipulation techniques. We also collected user feedback on the use of our prototype. Our evaluation on algorithm accuracy focu sed on the accuracy of understanding hand-drawn concept maps. We did not examine th e accuracy of concept map retrieval sepa-rately. This is because among three factors i nvolved in the retrieval accuracy, that is, structure extraction accuracy, concept node recognition accuracy, and graph-matching accuracy, the first factor is the accuracy of understanding the concept map and the other two are determined by the performances of the Microsoft Platform SDK and VFLib, respectively, which are beyond the scope of this research.

To evaluate structure understanding accuracy, we focused on the effectiveness and efficiency of the algorithm. Our test was on a machine equipped with a 2.4 GH CPU, 2G memory and a Wacom screen. Test data consisted of 45 hand-drawn concept maps from ten student subjects. As for layout styles, 15 concept maps had a top-down style, 15 had a left-right style, and 15 had a center-out style. Twenty five concept maps had tree structure while the others had network structure. About one-third of concept maps had different node and link styles. The numbers of links and nodes in a concept map ranged from 10 to 40 and the average was 21.1 ( SD =7.2).

Concept map structure understanding accuracy consists of two parts: stroke block extraction accuracy and structure extracti on accuracy. Figure 12 shows the block ex-traction results of 45 concept maps. The average error rate for block extraction is 4.82% ( SD = 0.07). The median of the error rate is 2.78%. Most of these errors are over-segmentation errors, that is, strokes that should belong to one block are segmented into several blocks. Under-segmentation errors, that is, strokes that should belong to different blocks are grouped into one block, were also observed. Two factors were found to contribute to over-segmentat ion errors: distant strokes, as shown in Figure 13(a), and misrecognized link strokes in Figure 13(b). Under-segmentation er-rors are largely due to the closeness of node blocks, shown in Figure 13(c) and, again, misrecognized link blocks in Figure 13(d) and 13(e).

When node blocks and link blocks are correct ly extracted, structure extraction ac-curacy is high under our algorithm at 99.5%. The errors are mainly caused by the incompleteness of concept maps themselves.

Figure 14 shows extracted structures from two hand-drawn concepts maps. As seen, our algorithm can correctly generate concept map structures despite variations on node style, link style, and concept map layout.

The average time to understand one concept map was about one second. Thus, our algorithm can be easily integrated into real-time systems. We also compared our intelligent manipulation techniques with stroke-based manip-ulation techniques. The participants were asked to change a given concept map to a targeted one. Two concept maps were used in the experiment. Six subjects were asked to modify the first concept map with our intelligent manipulation techniques and then to change the second concept map with a stroke-based manipulation technique. The other six users used the stroke-based method to transform the first concept map and intelligent manipulation techniques for the second one. We collected each subject X  X  task completion time.

Figure 15 shows the average task completion times with two manipulation tech-niques. Our structure-based intelligent manipulation is significantly shorter than the stroke-based manipulation technique ( p &lt;. 001). We also asked each subject to answer a post-test questionnaire to grade the accuracy, efficiency, comfort, and enjoyment of intelligent manipulation and retrieval techniques, all in a 7-level Likert scale (1-very bad, 7-very good). Subjects could also provide com-ments and suggestions in an open-ended question.

Figure 16 exhibits the results of subjective evaluation about the intelligent manipu-lation technique and retrieval technique. As shown, our techniques were well received by subjects.

Users also gave us some useful comments on our work. Some users suggested that the system support automatic layout of hand-drawn concept maps. Some pointed out that the system should handle more complex concept maps, such as concept maps with curved or multistroke links. Some mentioned that it would be useful if the system could support more functions for concept m aps, such as the comparison or the merging of concept maps. This article presented an approach to understand and retrieve hand-drawn concept maps. By combining dynamic programming and graph partitioning, our algorithm extracts node blocks and link blocks of hand-drawn concept maps and builds a concept-map structure by relating nodes and links. Meanwhile, our algorithm supports re-trieval of hand-drawn concept maps based on graph matching. We implemented a system prototype, ConceptSketch, and integrated a set of structure-based intelligent manipulation techniques and a concept map retrieval method based on sketch query. The manipulation techniques allow users to manipulate concept maps by directly han-dling object blocks, rather than fragmental strokes. Our evaluation results show that our algorithm is effective and our structure-based manipulation techniques and re-trieval technique are effective and welcomed by users.

The contributions of our research are twofold. First, our algorithm can greatly en-hance hand-drawn concept map tools and make such tools more intuitive and natural for users to create concept maps and diagr ams. Our algorithm allows the construc-tion of more advanced tools to manipulate concept maps. For example, by extracting structures of hand-drawn concept maps with our algorithm, such operations as reor-ganizing a concept map, sorting the concepts involved in a concept map, and exporting a concept to other formats become possible. Furthermore, with extracted meanings of nodes, additional metadata on the nodes can be added to the concept map to make the concept map more comprehens ive. For example, a search tool can be built so that users can take the extracted meaning of a node as a query to search through a database to identify other relevant concepts or to find related media (e.g., pictures or videos) to elaborate the node.

Second, our structure-oriented method can expand the scope of application of hand-drawn tools into other areas in which hand-drawn structures are important. Although our structure understanding algorithm is designed for concept maps, it can also be extended to recognize sketches in other domains, such as chemistry, math, physics, and engineering (computer-aided design), by using different reliability functions. Our method of combining dynamic programming an d graph partitioning offers an effective approach to solve complex sketch recognition problems in real time.

Our research has some limits. First, our algorithm still produces some errors (less than 5%) in understanding concept maps. These errors, although very small, are largely related to block extraction, that is, over-and under-segmentation of blocks due to far-and short-distant stroke blocks, as shown in Figure 13(a) and 13(c). Two kinds of strategies could be used to address these errors. On the one hand, more ro-bust algorithms should be explored to redu ce recognition errors. For example, our graph partitioning method may produce a structure that does not meet a user X  X  intent, although this rarely happens in our study. It would probably be solved by develop-ing a graph partitioning algorithm specialized for concept maps. On the other hand, we could let users help the system understand concept maps. By suggesting users to draw in-block strokes closely and between-block strokes distantly, we expect higher recognition accuracy could b e achieved. Second, our algorithm cannot handle more complicated link styles, such as curved links shown in Figure 13(d), links with labels, and crossed links in Figure 13(e). To address this problem, more advanced algorithms are needed to identify curve sketches, to distinguish labels from links and from other nodes, and to separate crossed links.

We will extend our research in several directions. First, we will enhance our algo-rithm by addressing the limitations discussed previously, in particular supporting di-verse link types and recognizing link labels. Second, we will integrate users X  drawing habits in our algorithm to improve the accuracy of concept map understanding. Fur-thermore, we will explore structure-based interaction techniques, such as automatic layout, to help people better organize and manage hand-drawn concept maps. In addi-tion, our concept map retrieval technique is effective to search a hand-drawn concept map by using a subconcept map, but the search may fail when the mapping between the input query and a hand-drawn concept map does not satisfy the edge-preserving constraint. We will try to use inexact graph-matching techniques in concept map re-trieval algorithm.
 Step 1. Preprocessing: merging strokes to get blocks and getting the graph Step 2. Graph decomposition with graph partitioning Step 3. Block extraction by dynamic programming
E XTRACT -R ECURSIVE ( candidates , optimalPath , V ) Step 4. Concept map structure extraction
E XTRACT -S TRUCTURE ( blocks , graph ) Step 5. Recognizing concept nodes
