 1. Introduction
In business organizations it is quite common to have multiple projects executed simultaneously at one location or at different locations. These projects need local (always available to the concerned project) and/or global (shared among the projects) resources, generally available in limited quantity, for their com-pletion. Typical examples are found in the automobile supply chains where a supplier carries out several engineering projects for different automobile manufacturers or original equipment manufacturers (OEMs) and in construction where one contractor is executing projects for more than one customer at different sites. The problem of scheduling of these multiple projects is called resource constrained multi-project scheduling problem (RCMPSP) in literature.

Traditionally the RCMPSPs were solved with the assumption of centralized decision making in which the resource allocation and scheduling decisions were made centrally in an integrated man-ner. In practice, however, the resource allocation and scheduling functions are generally performed in a decentralized manner.
Typically, a project manager competes with other project man-agers for the required global resources. In such cases the global resources are first allocated to the competing project managers and then the project managers schedule activities of their pro-jects. The allocation of the limited resources to the competing projects is a combinatorial problem challenging the OR commu-nity. The problem of resource allocation and scheduling assuming decentralized decision making environment is termed as distrib-uted resource constrained multi-project scheduling problem (DRCMPSP) in literature.
 mendous popularity in providing solution to the distributed decision making problems in different domains of industrial life.
Some of the examples are multi-plant production scheduling ( Alvarez, 2007 ); real-time distributed manufacturing and control ( Leitao, 2009 ; Jason et al., 2011 ); e-manufacturing ( Tiwari et al., 2010 ); dynamic supply chain ( Wang et al., 2009 ); bus mainte-nance scheduling ( Zhou et al., 2004 ), etc. The term agent in MAS refers to a software entity which is autonomous, proactive, social ( Sandholm, 2001 ; Wooldridge, 2009 ) and having its own execu-tion environment and decision powers. In MAS, each agent is independent and capable of making decisions according to his own beliefs, desires and intensions ( Jennings and Wooldridge, 1995 ).
 based system for distributed resource constrained multi-project scheduling problem that arise in companies running multiple parallel industrial projects. We propose a distributed multi-agent system auction-based negotiation approach denoted as DMAS/
ABN. The proposed multi-agent system is mapped on coarse grain structure of autonomous, self-interested competitive agents called as decision maker and assumes an asymmetric distribution of information. The blackboard agent architecture is used which consist of project agents (PA) as many as the active projects, a resource agent and an exchange agent. In order to resolve the resource conflicts and allocating multiple different types of global resources across multiple competing projects a new distributed multi-unit combinatorial auction-based coordination mechanism is developed. The auction problem for global resource assignment is formulated as an integer linear programming model but due to
NP hardness of the problem it is impractical to solve large multi-project instances in polynomial time. The DMAS/ABN uses a new heuristic procedure for solving auction problems. The bidding process requires project agents (PAs) to submit separate bids for the eligible activities requiring global resources. The utility of a time slot of the resources for an activity is calculated as the cost of not getting these resources. The local decision making algorithm (PALDM) run by project agents is developed to calculate bid price (utility of an activity) by virtually scheduling the project at current time. The exchange agent (EA) that runs the iterative bidding/auction mechanism determines the winners by iterative winner determination heuristic and notify the resource agent (RA) to transfer global resources from his pool to the winning PAs.
After receiving the shared resources, the scheduler encapsulated in each PA generates the schedules.
 art approaches is that our approach allows dealing with complex large-sized multi-project instances without any limiting assump-tions regarding the number of activities, shared resources or the number of projects. The existing other MAS approaches that use auctions (e.g. Lee et al., 2003 ; Confessor et al., 2007 ; Arauzo et al., 2010 ) for a DRCMPSP problem, however, suffer from the draw-back of considering single unit of only one type of shared resource while there is hardly any project that is completed with only one type of resource in single unit. Our approach further allows random project release-times for the projects that arrive at any time over the planning horizon which is exclusive and rarely considered in existing state-of-the-art algorithms.

Java on the JADE Agent Development platform. The proposed multi-agent system is tested on standard set of 140 problem instances from literature and compared with the similar existing systems for solving DRCMPSP. The results thus obtained are benchmarked against the three state-of-the-art decentralized algorithms and two existing centralizes methods for large
DRCMPSP instances. For 82 of 140 instances DMAS/ABN found new best solutions with respect to average project delay (APD).
It is observed that DMAS/ABN provides the minimum value (126.36) of average APD over the 140 problems. It also outper-forms in producing schedule with lower total makespan (TMS) with respect to a well-known centralized approach-shortest activity from shortest project (SASP) and decentralized method of MAS which uses a centrally imposed coordination (MAS/CI).
The results show that the decentralized DMAS/ABN can compete with the published MAS and centralized procedures.

The remainder of this paper is organized as follows: Section 2 summarizes existing related work on decentralized multi-project scheduling problems and MAS. Section 3 formally defines the problem. Section 4 describes the multi-agent system architecture and agents X  interaction protocols. Section 5 presents the proposed combinatorial auction based negotiation algorithm and describes its implementation mechanism. Section 6 presents an illustrative example. Computational experimentation and analysis of results are presented in Section 7 . Concluding remarks and some ideas for future research are put forth in Section 8 . 2. Related work
Scheduling of multiple projects with limited resource avail-ability has been an active area of research for more than the last four decades. In most of the existing research (e.g. Pritsker et al., 1969 ; Kurtulus and Davis, 1982 ; Mohanty and Siddiq, 1989 ; Lova and Tormos, 2001 ; Gonc -alves et al., 2008 ; Mittal and Kanda, 2009 ) a centralized decision making environment is assumed in which a central authority is responsible for all decisions regarding allocation of scares global resources to the projects and their scheduling. The assumption of centralized decision making is quite restrictive for their use in practice especially in complex dynamic setting. Multi-agent systems have been developed to facilitate distributed decision making in resource allocation and scheduling of multiple projects.

The work on application of MAS to DRCMPSP started during end of the 20th century. In one such early work Yan et al. (2000) use MAS as a technique to support project management for resource allocation in a distributed environment. The scheduling of projects is performed by message passing and negotiation among activity agents and resource agents. Following the same research line Knotts et al. (2000) develop eight agent-based algorithms for solving the multimode, resource-constrained pro-ject scheduling problem. Both study considered decentralized scheduling of large resource constrained single-project problem (RCPSP). Kim (2001) developed a new distributed coordination framework for project schedule changes (DCPSC) and a novel agent-based compensatory negotiation (ABCN) methodology for construction supply chains. The optimality of the final schedule is not guaranteed and their work does not consider capacity con-straints of resources.

Lee et al. (2003) make use of a  X  X ine grained X  agent architecture consisting of schedule agents, task agents and resource agents and propose a dynamic economy model and a market based control mechanism for resource allocation to multiple projects.
The authors consider only single unit of each of the four types of shared resources in the problems and report experimentation on small problems of up to nine projects of 15 activities. Confessore et al. (2002 , 2007 ) consider  X  X oarse-grained X  MAS structure con-sisting of several bidding agents representing project managers and an auctioneer agent and develop an iterative combinatorial auction for resolving resource conflicts among the projects. The authors report experimentation with small multi-project instances (with up to five projects and 18 activities) with resource availability to single unit of only one type of shared resource.
Lau et al. (2005a , b) propose a negotiation-based multi-agent system for DRCMPSP. During the negotiation process schedule flexibility information is shared among the schedule agents and resource agent to improve the solution quality. When the nego-tiation process is finished, the schedule agents select a final schedule among multiple solutions through a voting process. The system is tested on small instances with up to 8 projects of 12 activities per project. In Lau et al. (2006) the authors apply the proposed MAS to supply chain problem.

Homberger (2007) considers DRCMPSP with multiple global resources and develop a decentralized electronic iterative nego-tiation mechanism embedded in coarse-grained MAS. The MAS consists of schedule agents that negotiate with other schedule agents to allocate shared resource capacities to the active projects coordinated through a mediator agent. Large multi-project instances with up to 20 projects consisting of up to 120 activities each are solved. The author ( Homberger, 2009 ) further extends this model and integrate a generic coordination mechanism based on mediated negotiation of Klein et al. (2003) and a mediated single text negotiation of Fink (2004) in MAS. In both of these works it is assumed that the first project of multiple projects must arrive at zero, while others have some random arrival date greater than or equal to zero. This assumption limits these studies X  application in complex real world situation where projects may arrive at any time. Similar to the model proposed by Homberger (2007) , the MAS model introduced by Wauters et al. (2010) consists of two classes of agents  X  project agents and one mediator agent. Coordination is achieved by a sequence game theoretic approach. Considering a dynamic multi-project environment, Arauzo et al. (2010) propose a multi-agent system using a combinatorial auction mechanism for allocation of shared resources among the project tasks. Recently, Mao (2011) introduces a heterogeneous MAS solution framework for scheduling airport ground handling services as a decentralized multi-project scheduling problem. To coordi-nate the scheduling decisions a lease-based market mechanism is proposed. They experimented and evaluated the solution of their MAS on 80 problem instances consisting of only all types of global resources (with no local resource) available on MPSPLib.

The above review of literature reveals that till now very little has been done towards application of MAS to the DRCMPSP and the currently available approaches are not suitable for real world applications due to either the restrictive assumptions regarding the resource types and their availability or problem size they can handle or the solution quality. There is thus a need to develop a solution approach to DRCMPSP that is free from these restrictive assumptions. This research is concerned with developing a MAS for distributed multi-project scheduling that embodies the econ-omy-based approach which is flexible and capable of solving complex large sized multi-project instances without any limiting assumptions regarding the number of activities, shared resources or the number of projects. 3. Problem description
In this paper we consider the problem of scheduling of simultaneously running independent and autonomous multiple projects sharing a set of resources. This problem is termed as decentralized resource constrained multi-project scheduling pro-blem (DRCMPSP) in the literature.
 The DRCMPSP can be formally defined as follows: There is a set of M { i  X  1, y , M } projects that are to be scheduled. Project i has a release time t ri Z 0 at which it can be started.
Project i { i  X  1, y , M } consists of n i non-preemptable activities with activity a ij being the j th activity of project i. Two dummy the  X  X tart X  and the  X  X nd X  of the project i , respectively. Without loss of generality, it is assumed that the dummy activities do not require any resource and can be completed instantaneously.
E is a set of precedence relations defined for project i . For project i , pair ( a ij , a ik ) means a ij precedes a ik
There is a set of K ( k  X  1, y , K ) types of local renewable resources assigned to each project i . Resource k is available in constant amount R k t in each time slot t ( t  X  1 , y ,T ), where T is the planning horizon.

There is a set of G ( g  X  1, y , G ) type of global renewable resources shared by all the projects. Resource g is available in constant amount R g t in each time slot t ( t  X  1, y , T ).
Activity a ij requires r k ij units of local resource k and r global resource g during entire duration of the activity. Activity a ij takes p ij units of time for its completion.
The aim of the multi-project scheduling problem is to com-plete all the activities of the projects satisfying precedence and resource availability constraints and minimizing the delay of each project. 4. Agent-based mechanism for the distributed project scheduling
To solve DRCMPSP a MAS is proposed that is designed as a  X  X lackboard X  architecture ( Baker, 1998 ) for the distributed deci-sion making which has been most widely used in shop floor control and job shop scheduling ( Shen and Noorie, 1999 ). In order to allocate global resources to the projects at a decision point an iterative bidding and auction mechanism is used. The following describes the multi-agent system architecture, agents X  interaction protocols and modeling of the auction problem. 4.1. Multi-agent system architecture
The multi-agent system proposed in this paper uses autono-mous, self-interested and competitive agents. The agents are reactive which respond to environment changes or other agents X  messages. As shown in Fig. 1 , we designed three types of autonomous agents namely: project agent ( PA ), resource agent ( RA ) and exchange agent ( EA ). In addition, a director is used as an entity that has its own execution environment and possesses data files pertaining to the problem. The director creates project agents for each of the project at its arrival. Director is also responsible for initializing resource agent and exchange agent and controlling the system state by communicating with EA and RA . A directory facilitator ( DF ) (not shown in Fig. 1 ) is used to provide registration services for the other agents. The DF registers each agent and keeps up to date record of them.

The functionalities of the three types of agents are described as below: (1) Project agent (PA) is associated with a project and responsible for its scheduling. A PA schedules associated project indepen-dently with respect to the precedence constraints and avail-ability of the local and global resources. Each PA has its own scheduling functionality denoted as scheduler that encapsu-lates a local decision making algorithm. The PA s bid for the required global resources in the market. (2) Resource agent (RA) represents a resource manager who owns all the global resources during different time slots. It offers resources to the projects and keeps a record of utilization of (3) Exchange agent (EA) is a coordinating agent responsible for achieve its desired functionality. In the proposed multi-agent based system each PA communicates with the RA and EA and vice-versa. The communication protocol used in this study is based on contract net protocol originally proposed by Smith (1980) . Fig. 2 depicts the UML activity diagram of communication scenario among PAs , EA and RA concerning a slot reservation of global resources at a decision point. 4.2. Bidding and auction problem a  X  X ood X  that is to be sold in an auction ( Fig. 3 ) to the projects. The time slots are represented as integers, starting from 1. Each PA, acting as a  X  X idder X , participates in auctions and bids for the time slots t of global resources at the current time t . The number of bidders is equal to the numbers of active projects in the system.
The EA plays a role of auctioneer and completes auction by solving an auctioning problem defined below.
 for slots of global resources. Assume that R g t is the availability of global resource g A G during time slot t A T : A PA may submit multiple bids of project i corresponding to each eligible activity j requiring the time slots of the global resource/s to the auctioneer in current time slot t .
 be received from winning bidders. The problem of allocation of the global resources can be formulated as the following multi-item combinatorial auction problem: max s : t : x ij t A f 0 , 1 g where x ij t is a decisional binary variable which is equal to 1 if project agent i wins the bid for activity j during time slot t , 0 otherwise.

Objective function (1) maximizes the revenue of the auction-eer. Eq. (2) assures that the capacity constraints are not violated.
Eq. (3) imposes the condition that each bidder has to win only once during the entire planning horizon.

Since the combinatorial auction problem ( Kutanoglu and Wu, 1999 ; Wellman et al., 2001 ) is known to be NP-hard we develop a heuristic procedure to solve the winner determination problem in which bidders pay the value of their winning bids and the auctioneer selects bid with the maximum utility value (bid price) for combination of resource types required. This heuristic algo-rithm is not exponential in the number of resource types needed by the activities and capable to handle any number of resources of different types. An iterative ascending price English Auction is used ( Sandholm, 2002 ; Confessor et al., 2007 ) for selling time slots of combination of all types of the global resources needed by an activity. In contrast to Confessor et al. (2007) , we considered multiple resources for sale with resource agent without free disposal where auctioneer (exchange agent) is not willing to keep any units, and bidders are not willing to take extra units. As we are handling the large multi-projects problems with multiple resource types of high complexity, an exact (or approximation) solution to the winner determination problem have impractical running times in polynomial time. To get away with the complex-ity multi-unit combinatorial auction based agent negotiation is proposed and winner determination problem is solved by effi-cient new heuristic for solving these NP-hard problems. PA must tune the utility function on the preferred time slot of receiving the resources declaring the urgency to have it in particular time slot. The auction negotiation is carried out for each time slot of the planning horizon. 5. DMAS/ABN algorithm
DMAS/ABN algorithm is designed to handle the problem of any size encountered in real life situation without any restrictions with respect to the number of projects, number of activities in the projects and types of resources. To resolve resource conflict at a Inform unused resources Stop
Determine Winner by Auction Mechanism decision point we develop an iterative auction-based negotiation algorithm. An outline of the proposed iterative auction based heuristic is presented as below. 5.1. The auctioning process the following six steps with steps 2, 3 and 5 completed by PAs and steps 1, 4 and 6 executed by the EA . 5.1.1. Initialization: (step 1) by sending the message  X  X nitialize bidding X  to the PAs and RA . 5.1.2. Virtual schedule and utility calculations: (step 2) bids. A separate bid is submitted for each of the eligible activity requiring global resource/s during the current scheduling time slot. The bid price for an activity is based on the utility of the time slot of resource/s to the project. The utility of the time slot of the resource/s for an activity is the cost occurring due to non-availability of time slot of the resource/s at the current period but a period later causing delayed start of the activity. If the cost is higher the PA shall be willing to pay more (higher bid) for the time slot of global resource/s. Three elements considered for determining this cost are (i) cost of idleness of local resources, (ii) tardiness cost of the project activity and (iii) cost of global resources. To determine these three cost elements for an activity, the project is virtually scheduled assuming availability of the global resource/s during current start time ( s ij ( t) ) and during the next start time ( s ij ( t  X  1) ) as summarized below. fact that if a manager foresees higher idleness of local resources due to non-availability of global resources (an activity requiring local and global resources cannot start until all types of resources it needs are available and if global resources are not available the local resources would remain idle causing loss in terms of underutilization) he/she shall be willing to pay more for them.
Supposing that the costs of idleness of local resources are L
L t  X  1 ij when activity j of project i starts at times s , respectively. Then probably the L t  X  1 ij Z L t ij and L represents the cost of idleness of local resources for project i .
The cost of idleness of local resources for a schedule can be computed by P K k  X  1 I k n r k where I k are the units (in resource-time) of local resource k that remain idle in a schedule and r the per period usage cost of local resource k.
 when the activity starts at time s ij ( t  X  1) rather than at time s .

Tardiness cost TD i for project i can be calculated as  X  X  VC i  X  t  X  1  X  VC i  X  t n t ci where ( VC i ) t and ( VC times of project i when the activity under consideration starts during time t and t  X  1, respectively, in the virtual schedules and t is the penalty for unit delay of project i (taken directly from the RCPSP problem instances of Kolisch (1996) .

The cost of global resources in determining utility is important due to the fact that activities having higher global resource demands will have greater utility than the activities with lower resource demands. The cost of global resources for project i related to activity j can be computed as C gi  X  P G g  X  1 r g is the per unit resource price for global resource g . Initially, r g  X  p g where p g is the reserve price or minimum resource price for resource g . We assume here that one time slot of all the resources are uniformly priced one currency unit per unit of each global resource type. As per the demand of the PA for the global resources in a current time slot of virtual schedule of project, the cost it is supposed to pay will be in multiple of the resource requirement by that activity.

The utility value U ij ( t ) ascribed by bidder i for activity j for time slot ( t ) is the summation of loss due to cost of local idle resources V i ( S ), tardiness cost TD i and cost of global resources C mathematically expressed as
U  X  S  X  X  V i  X  S  X  X  TD i  X  C gi  X  4  X 
In order to improve understanding of the above an illustrative problem is considered below. Fig. 4 (a) and (b) shows the virtual schedules of a small project when activity 1 (for which bid is to be s case) of the project is indicated by thick arrow. It is assumed that only one type of local resource with total availability of 5 units and one type of global resource are required by project. It is also assumed that two units of global resource are required by activity 1. The duration and requirement for local resource of the various activities of the project are indicated in the diagram. The amount of idleness I k of local resources k for a schedule can be determined by finding the area of shaded portion in the schedule, which is 14 for schedule 4(a) and 19 for schedule 4(b).

Assuming r k  X  1 the cost of idle resources for schedule 4(a) is 14 and schedule (b) is 19. Hence V i ( S )  X  19 X 14  X  5 units. The completion times of schedule 4(a) and 4(b) are 9 and 8 units, respectively.
Assuming t ci  X  1thetardinesscost TD i  X  (9 X 8) n 1  X  1, and assuming r g  X  1 the cost of global resources C gi  X  1 n 2  X  2. Thus the utility of for other eligible activities during the current time slot can be determined considering them independently one by one. 5.1.3. Bid generation: (step 3)
Project agent PA i generates a bid b  X  { a ij , U ij ( t ), p activity j of project i that require global resource/s , where a identity of activity j of project i , U ij ( t ) is the bid price, p duration of activity, r g ij is the requirement of the global resource g by activity a ij . The bid is generated in combination of all the global resource types required by that activity and utility (bid price) is the price quoted by project i for all types of the resources required by activity j . In case there is more than one eligible activity requiring global resources at a time multiple bids are prepared. 5.1.4. Provisional winner determination: (step 4)
After receiving bids from all the PAs for time slot t of the resources, allocation is made by the EA through an iterative process shown in Fig. 5 .Let B ( b  X  1, y ,B ) are the number of bids received by EA and R g t is the total availability of resource g during time slot t . its corresponding resource requirement is higher than total resource availability. This feasibility check reduces the number of bids for further processing. The feasible bids are sorted in descending order of bid price. A tie in the bid price is broken by (i) minimum activity duration, (ii) minimum project start time, (iii) minimum project index and (iv) minimum activity number in the given order. The sorted list is scanned for possible resource allocations till no further allocations can be made. The bidders who get resources are declared  X  X rovisional winner X . The losers are given chance to modify their bids by sending message  X  X odify X  or  X  X elete X  along with the minimum bid price of the accepted bids and resource availability delay s period by which resources cannot be made available) (see Fig. 5 ). Here  X  y  X  is an earliest time from the current time at which the scheduled activities among the winner bids or previously scheduled activities will release resources. 5.1.5. Modify bid: (step 5)
EA updates the bid price as per the utility U ij ( t ) of provisional winners in current time slot t and communicates it to all the bidders. The loser bidders recalculate utility U ij ( t 0 ) (bid price of modified bid) by virtually rescheduling the activity to start at time s ij ( t  X  y ) . The modified bid is sent if the previously accepted auction further reducing the conflict for global resources. 5.1.6. Final resource allocation/winner determination: (step 6)
After receiving modified bids from the losers the EA again starts the auction as discussed above. The winners in previous round participate in this round without modifying earlier quoted bid price.
This iterative process at the current time slot continues round by round until none of project agents increases bid price or when the protocol reaches quiescence (inactive state) ( Wellman et al., 2001 ). At this stage all final winners are determined and EA allocates respective resources to the winners. The winner project then schedules the activities. The iterative winner determination algorithm can be summarized in three steps and explained procedurally as below:
Step 1: Bid Collection : t  X  current time slot, R g t  X  units of global resource g A G available in t . (a) Collect bids B ( b  X  1, y , B ) from PA s. (b) For each bid b in B do: ( _ r g b  X  requirement of global resource g in bid b ) i. For each g A G If r g b 4 R g t then do: (c) Set of provisional Winner B WP ( w  X  1, y , B WP )  X  f (d) Set TR g t  X  R g t (e) Sort B according to winner selection criteria (f) For each Bid b in B do: i. For each g A G if r g b r TR g t then do:
Step 2: Bid Modification: (a) For each b in ( B \ B WP ) i. Send  X  X  X odify Bid X  X  message to concern PA. (b) Receive Modified Bids MB ( m  X  1, y , MB ) from PAs. (c) If B \ B WP a MB (one or more bids modified or deleted) i. B  X  f ii. B  X  B WP [ MB . iii. MB  X  f iv. B WP  X  f v. Go to step 1(d) (repeat until bids are modified)
Step 3: Winner Determination: (a) For each b in B WP i. Send  X  X  X id Accepted X  X  message to concern PA of b . ii. Send  X  X  X id Accepted X  X  message to RA. (b) R (c) Send  X  X  X pdate Time X  X  message to all PAs. (d) t  X  t  X  1.

The combination of maximum numbers of activities which can be scheduled in available capacities of global resources at time slot t is ascertained and final transaction is made. Finally, EA notify RA to transfer global resources from his pool to the PAs. 5.2. Project agent local decision making algorithm
Project agents are responsible for generation of schedule for their projects which may be either virtual schedule for generating bids or final schedule. The problem at this level is treated as resource constrained project scheduling problem which is solved by a fast heuristic scheduling algorithm encapsulated in the scheduler. For generating schedule priority rule based heuristic is used. The priority rule based heuristic requires a priority rule and a schedule generation scheme. In this work MINLFT (mini-mum latest finish time) ( Kolisch, 1996 ) is used as the priority rule and the parallel schedule generation scheme with modifications as the schedule generation scheme. We suggest here a project agent local decision making algorithm ( PALDM ) to compute the available capacities of both local and global resources. Details of this algorithm are as follows.
 subsets of the activities: set U c of completed activities , set U currently active activities , set U D of eligible activities , and U bidding activities . Eligible activities are defined as unscheduled activities which are available for scheduling with respect to precedence and local resource constraints. Bidding activities are the eligible activities requiring global resources. One additional set
U aw is defined containing activities declared winners in auction by the EA. The heuristic scheduling algorithm is given below: (c) Check local resource availability, for each k if r k ij (d) If a ij = 2 U B Then .
Step 3: Bidding and auction process (a) Compute utility U ij ( t ) by virtual schedule (see Section 5.1.2 ) (b) If all Activities not selected from U D Go to step 2(b). (c) Collect Accepted Bids from Exchange Copy to U aw . (d) If U aw  X  | Then Go to Step 6.

Step 5: Scheduling: (a) Pick an activity a ij from U aw. (b) For Each k If r k i. Go to step (a).

Step 6: Update Time (a) Wait for Exchange Time Update Message i. t  X  t  X  1 ii. Go to Step 1(a)
The RA updates the global resource pool and PA updates the local resource pool. The time slot is updated. The Modify/Delete Bids algorithm terminates when all activities are in all the projects are scheduled. 6. An illustration
This section presents an illustrative example demonstrating the proposed multi-agent system DMAS/ABN. We consider a simple multi-project problem with three projects for clear demonstration of the interactions among projects. These three projects require two types of local resources ( r 1 and r type of global resource ( g 1 ) for their completion. Fig. 6 shows the activity-on-node networks of the three projects i  X  1, 2, and 3. Each node is labeled with the duration p ij and requirements of resources r 1 , r 2 , g 1 by the activities. Activities with 0 processing time and resource requirement are dummy activities.

Additional data, i.e. release time of project ( t ri ), due date ( D tardiness cost ( t ci ), and local resource capacity ( R k t projects is given in the boxes below the networks. Availability of the prices of local resources and initial reserve price of global resource are taken as r k  X  p g  X  1.
 Additional notation: R g t the number of units of global resource g available with ur ar D g t The aggregate demand of global resource g in time slot t ,
The whole decisional process goes step by step as follows.  X  Initialization : The EA send messages to all PAs and RA to initialize bidding and announces a reserve price p g  X  1. Set the time slot t  X  1 and instruct RA to update number of units of global resource in the pool using the following formulae.  X  Bidding process : All the PAs formulate bids for required shared resources. To do this they have to calculate utility for resource time slot t by virtually scheduling their respective projects.
The virtual schedule returns the value of loss due to cost of idle resources V i  X  S  X  and tardiness cost of project TD i .
In the following the first value in activity ID indicates project number and the second value the activity number (e.g. activity 1 X 2 indicates activity 2 of project 1). The projects i  X  1, 2 and 3 arrive at time 0, 5 and 10, respectively.
 During t  X  1 only project 1 is available for scheduling. U with no resource conflicts. Auction takes place in which project 1 submits bid for activity 1 X 2 and gets resources. The activity 1 X 2 is scheduled to start at time 0 and resource availability ( R pool is updated to  X  (20 X 5)  X  15.

During t  X  5, activity 1 X 2 releases resources thus R 15  X  (15  X  5)  X  20. U B  X  {1 X 3, 1 X 4}. Project 1 is to submit bids for activities 1 X 3 and 1 X 4. Unitary right-shift of activity 1 X 3 does not have any impact on the completion time of the project so the utility value of a 13 is calculated as U 13 ( t )  X  0  X  0  X  (1 8)  X  8.
Different costs for activity 1 X 4 can be determined as-cost of idle resources  X  L 4 14  X  15 1  X  15 and at t  X  1  X  L 5 14  X  34 1  X  34, hence total loss V i ( S )  X  34 X 15  X  19, tardiness cost TD i  X  1 10  X  10, and cost of global resource  X  C gi  X  1 2  X  2. So the utility of a  X  U 14 ( t )  X  19  X  10  X  2  X  31. Both the bids with utility 8, 31 are sent to the exchange. At the exchange bids are sorted as 31, 8. The exchange declares both the bidders as winner and since
R 4 D 15 project agent 1 receives resources for both the activities a and a 13 and schedules them to start at time 4, respectively. Update resource availability R 15  X  (20 X 10)  X  10  X  R 16 .
During t  X  6 project 2 arrives. U B  X  {2 X 2, 2 X 3} and D 16 14 4 R 16  X  10 indicating resource conflict. Auction process pro-ceeds in following rounds/iterations.

Round-1 : For determining bid for activity 2 X 2 compute L 5 (29  X  52) 1  X  81 and L 6 22  X  (81  X  23) 1  X  104, hence loss V 23; TD i  X  5; and C gi  X  6. The utility of a 22 is calculated as U 23  X  5  X  6  X  34. For determining bid for activity 2 X 3 compute
L  X  81 and L 6 23  X  104, hence loss V i ( S )  X  23; TD i  X  5; and C bids as {36, 34} and announce a 23 as provisional winner and a loser. Project 2 modifies bid for activity 2 X 2 for a given avail-ability delay of two time slots. Update R 16  X  10 X 8  X  2.
Round-2: To modify bid for a 22 , compute L 5 22  X  (29  X  52) 1  X  81 and L 22  X  (81  X  130) 1  X  211, hence loss V i ( S )  X  130; TD i
C  X  6. The utility of a 22 is calculated as U 22 ( t )  X  146. Iteratively, bids sorted as {146, 36}. Now a 22 declared as new winner and a as loser and hence project 2 is asked to modify bid for a
R  X  10 X 6  X  4.

Round-3 : Again project 2 modifies bids for loser activity a with availability delay of two time slots and minimum bid value  X  146. The new utility calculated with the same procedure is U ( t )  X  148. Sort bid as {148,146}. The activity a 23 with utility value 148 wins the bid. 4 5 [10.8;4] [0.0;0] 20 hence the activity a 22 is deleted and transferred to decision set of the scheduler of project agent 2 to schedule in the next time slot.
Transaction is done and recourses are allocated to winner bidder a 23 to schedule the project. The auctioneer X  X  revenue is equal to 148. Update R 16  X  10 X 8  X  2.
 resource conflict. Bid value of a 22 is computed as U 22 ( t )  X  34. Allocate resources and schedule a 22 to start at time 7.
No activity in any of the projects is eligible for scheduling hence no auction.
 hence R 113  X  6  X  8  X  14. U B  X  {3 X 2, 3 X 3}; D 113  X  11  X  3  X  14  X  R hence no resource conflict. Activities a 32 and a 33 are scheduled to start at time 11. Update pool for R 113  X  14 X 14  X  0. time 12.
 hence R 115  X  2  X  18  X  20. U B  X  {3 X 4}. No resource conflicts hence a 34 is scheduled to start at time 14.
 projects are scheduled. Fig. 7 shows the final capacity-feasible schedule of the projects. The start and end dummy activities are not shown in figure.
 9 indicating no delay; project 2 at 14 with 2 units of delay; and project 3 at time 15 indicating no delay. All the three projects start at their release time and indicate no start delay. For the generated schedule average project delay (APD)  X  0.66; total makespan (TMS)  X  15; and standard deviation of project delay (DPD)  X  1.154. 7. Computational experience evaluated on two measures, average project delay (APD) and total makespan (TMS). Average project delay (APD), used by Lova and Tormos (2001) and Confessor et al. (2007) , is defined as Average project delay  X  1 M where C i is the completion time of project i and D i is desired due date of project i which is considered to be the critical path duration of project i. Total makespan ( TMS )( Pritsker et al., 1969 ) is defined as the difference between the largest finish time and the earliest release time of all single projects and is computed as
TMS  X  max The DRCMPSP has been implemented on JADE (Java Agent
Development Framework Version 6.7 available at http://jade.tilab. com). JADE frameworkprovidespackagesandclassesfordeveloping agent based applications. It complies with FIPA standards, pro-vides FIPA interaction protocol library and supports the applica-tion-oriented ontology and expression language ( Bellifemine et al., 2007 ). All algorithms were executed on a single computer (Intel core i7 (2.9 GHz, 8 GB RAM operating under Fedora 15
Desktop Edition)). The design of test problems and results are provided below. 7.1. Design of test problems
The 140 DRCMPSP test problem generated by Homberger (2007) and Homberger (2009) are used to test our proposed
MAS. These problem instances are available on a public web portal http://www.mpsplib.com (last check of address: 28 Feb, 2011). The detailed procedure for generating the problem is given in Homberger (2009) ; however, for the sake of completeness we describe it briefly.

The multi-project test problems consist of 2, 5, 10 and 20 single project RCPSP instances generated by Kolisch and Sprecher (1996) . The number of activities in a project is 30, 90 and 120. To generate the multi-project instances the single project problems were randomly selected keeping in mind the number of activities, network complexity and resource factor. From these instances, project release time t ri , tardiness cost per unit time, activity duration, precedence relations and resource requirement data were used. These individual projects were then combined into groups as per the requirement about the number of projects in the multi-project instance. Then for each of the problem instances the local resource availability data were generated to have required average utilization factor (AUF) for each type of the resource. Resource factor indicates the average number of resource types used by an activity. AUF, also known as overload factor, was developed by Kurtulus and Davis (1982) and indicates the average tightness of the constraints on each required resource. The release date for the projects is chosen randomly as t ri A [0, 50]. Any project may arrive at any time in system.
In each RCPSP instance the same set K of four resources are given. The amount of capacity units per time slot for resource k given in instance ,i  X  1, y , M , is denoted as R k t in the following. A set G D K is randomly selected from K  X  1, y ,4 and treated as global resource/s for the multiproject problem to be generated as given in Table 1 . For each global resource g A G the amount R capacity units available per time slot is given. Activity durations are deterministic that are randomly distributed between 1 and 10 units of time. The resource requirement of each activity ranges from 0 to 10 for each of the four different resource types. We set the global resource reserve price p g and local resource price (fixed) r k to 1.

Table 1 shows the 140 multi-project instances divided into twenty problem subsets. In the following the set of 80 problem instances ( Homberger, 2007 ) with postfix AC (Agent Cop.) are denoted as MPAC instances and the newly generated 60 problem are referred to as MP that are developed by Homberger (2009) . 7.2. Results and analysis
The performance of the proposed DMAS/ABN is evaluated in two stages by comparing the results for APD and TMS. In stage one performance of three variants of the DMAS/ABN is compared and in stage two the best of the three is compared with existing MAS for DRCMPSP in literature. The three variants A, B and C are based on the cost criteria considered for calculating utility and finally generating bids.

Variant A: Consider summation of all the three costs, i.e. cost of idleness of local resources, tardiness cost and cost of global resources.

Variant B: Consider tardiness cost and cost of global resource neglecting cost of idleness of local resources.
 Variant C: Consider tardiness cost of the project only.
The preliminary experiments were conducted on a set of 20 instances each one randomly selected from each of 20 subsets of 140 problems. We have carried out three replications for each one of the 20 problems leading to 60 experiments. Figs. 8 and 9 summarize the behavior of three variants of the DBMAS/ABN algorithm by showing APD AV and TMS Av determined over all the 20 problems. The DBMAS/ABN with variant  X  X  X  found to be the best algorithm among the three.

As can be seen variant A considering summation of all the three costs, i.e. cost of idleness of local resources, tardiness cost and cost of global resources for utility calculations is found to be the best. It can be noted that the cost parameters (cost of global resources) affect the performance of the algorithm and thus in practice experiments may be conducted to know the best variant with actual parameter values.

To compare the performance of variant A with existing algo-rithms we have solved all the above 140 problem instances. The performance of our algorithm is compared with five well known 149.5 150.5 151.5 152.5 153.5 154.5 Average of APD 283.2 283.4 283.6 283.8 284.2 284.4 284.6 284.8 Averge of Total Makespan existing algorithm out of which first three are the decentralized methods and remaining two are the centralized methods as described below. (1) CMAS/ES: Multi-Agent System which uses a coordination (2) CMAS/SA: Multi-Agent System which uses the coordination (3) MAS/CI: Multi-Agent System which uses a central imposing (4) RES: Evolutionary metaheuristics ( Homberger, 2007 ). (5) SASP: Priority rule based heuristic of Kurtulus and Davis are provided below.
 other five methods for each of the 20 subset of problems. The APD AV is the average of APDs over the problems in the set while
TMS Av is the average of TMSs over the problems in the set. The underlined values ( APD AV and TMS AV ) in each row of Table 2 indicate the best value which has been outperformed in each subset against all methods. From Table 2 it is seen that out of 20 subsets, the DMAS/ABN obtained lowest APD for 7 problem subsets, the methods MAS/CI in 6, CMAS/ES in 3, MAS/SA in 03 and RES in 1 problem subset. SASP is not able to obtain the best in any problem subset.
 the 140 problems are also compared, which show that our method DMAS/ABN provides absolute minimum APD for 82 (58.57%) of 140 multi-project problems which could not be achieved by any other methods. Additionally our algorithm provides absolute best results for 35 problems out of the 80
MPAC problems (43.75%) and for 47 problems out of 60 MP newly generated problems (78.33%).
 problem size the analysis is also performed. The multi-project problems considered here consist of 5 X 20 projects with 30 X 120 activities in each project thus the smallest problem consists of 60 activities (MP30_2) and largest of 2400 activities (MP120_20AC in
Table 1 ). The algorithm successfully simulates all the 140 problem instances in 6 h on a single computer. It is observed that the
DMAS/ABN performs better in large multi-project instances of 10 and 20 projects consisting of 90 or 120 activities as compared to other methods.

The average of APDs over all the 140 problems obtained by the six algorithms is also plotted in Fig. 10 . It is observed that DMAS/
ABN provides the minimum value (126.36) of average APD over the 140 problems. The detailed comparison of the performance of DMAS/ABN with three state-of-the-art decentralized methods
CMAS/CI, CMAS/ES and CMAS/SA and two well-known centralized decision making methods SASP and RES with respect to both performance measures is provided below.

As shown in Table 2 , DMAS/ABN outperforms the three comparison algorithms in minimizing average project delay (APD). For 15 of the 20 problem subsets, DMAS/ABN produced lower APD AV values than could be obtained with CMAS/CI (with an average of 45.57%, minimum of 0.62% and maximum of 133.09%).
Similarly for 13 of 20 problem subsets the DMAS/ABN produced schedules with lower APD AV values than CMAS/ES (with an average of 13.03%, minimum of 1.68% and maximum of 35.36%).
The DMAS/ABN also outperforms the third decentralized method CMAS/SA. As seen from Table 2 , the DMAS/ABN provides schedules with lower APD AV value in 13 of 20 problem subsets than CMAS/SA (with an average of 19.87%, minimum of 7.68% and maximum of 37.11%). Additionally, for 71 of the 140 problems
DMAS/ABN produced schedules with lower APD values than could be reached with CMAS/SA.

Further we compare our algorithm with two of the well-known centralized methods SASP and RES. SASP (shortest activity from shortest project) is a priority rule proposed by Kurtulus and Davis (1982) that has been found to be one of the best priority rules for minimization of average project delay ( Lova and Tormos, 2001 ). RES (restart evolution strategy) has been recently devel-oped by Homberger (2007) and found to perform better than the best-known metaheuristics in literature. The results of the com-parison are as follows: For 17 of the 20 problem subsets DMAS/ABN found lower APD AV than SASP (on an average 31.39%, minimum of 0.07% and maximum of 116.36% lower value). The DMAS/ABN algorithm has also outperformed the second centralized method RES. For 15 the 20 problem subsets the DMAS/ABN produced schedules with lower APD AV than RES (on an average 12.13%, with minimum of 0.30% and maximum of 34.02%). DMAS/ABN have been found to perform better for the problems with higher resource overload. The proposed distributed MAS for decentralized system have many advantages over the traditional centralized algorithms such as it is more flexible, it replaces central databases and central control with a network of agents. The DMAS/ABN can achieve real time scheduling through the dynamic collaboration among agents.

Similar analysis, as done for average project delay, was performed for total makespan (TMS). The results are summarized in Table 2 . The underlined value in Table 2 indicates the best method which has been outperformed in each subset. The average of TMS over all the 140 problems obtained by the algorithm is plotted in Fig. 11 . It is observed that DMAS/ABN stands out to be fourth outperforming SASP and MAS/CI.

For 19 of the 20 problem subsets the DMAS/ABN produced schedules with lower TMS Av (with an average 7.69% with mini-mum 0.60% and maximum of 14.02%) than the SASP. However, DMAS/ABN have nearly the same TMS Av as compared to RES. 8. Conclusions
In this paper we have considered decentralized multi-project scheduling problem where each project utilizes local and global resources for their completion that are available in limited quantity. A multi-agent system termed as DMAS/ABN is devel-oped for solving the problem. DMAS/ABN utilizes a new auction based negotiation mechanism for allocation of global resource to the projects. A project agent local decision making algorithm with parallel schedule generation scheme is introduced to schedule the projects independently. This approach is successfully applied and simulated on an example problem to validate the proposed method.

The efficiency of the proposed MAS has been tested on 140 test problems and the results are compared with five existing solution methodologies. From this extensive comparative study it has been observed that the proposed algorithm offers reliably good results for the large multi-project instances. It was possible to calculate 82 of 140 new best solutions with respect to average project delay (APD) by this algorithm. The results show that the decentralized
DMAS/ABN can compete with the published MAS procedure with the added advantages that it can solve the RCMPSP instances up to any number of activities, resources and projects. It does away with the size limitations of the existing procedure. It is fast, flexible and also takes care of dynamic arrival of project with ease.

This research can be further extended to consider resource transfer times in a multi-project environment. The proposed MAS can also be extended to consider dynamic multi-project schedul-ing in which the projects arrive dynamically.
 Acknowledgments
The authors thank to the anonymous reviewers for their helpful comments and recommendations.
 References
