 Substitution ciphers have been used widely in the past to encrypt secrets behind messages. These ciphers replace (English) plaintext letters with ci-pher symbols in order to generate the ciphertext se-quence.

There exist many published works on automatic decipherment methods for solving simple letter-substitution ciphers. Many existing methods use dictionary-based attacks employing huge word dic-tionaries to find plaintext patterns within the ci-phertext (Peleg and Rosenfeld, 1979; Ganesan and Sherman, 1993; Jakobsen, 1995; Olson, 2007). Most of these methods are heuristic in nature and search for the best deterministic key during deci-pherment. Others follow a probabilistic decipher-ment approach. Knight et al. (2006) use the Expec-tation Maximization (EM) algorithm (Dempster et al., 1977) to search for the best probabilistic key us-ing letter n-gram models. Ravi and Knight (2008) formulate decipherment as an integer programming problem and provide an exact method to solve sim-ple substitution ciphers by using letter n-gram mod-els along with deterministic key constraints. Corlett and Penn (2010) work with large ciphertexts con-taining thousands of characters and provide another exact decipherment method using an A* search al-gorithm. Diaconis (2008) presents an analysis of Markov Chain Monte Carlo (MCMC) sampling al-gorithms and shows an example application for solv-ing simple substitution ciphers.

Most work in this area has focused on solving simple substitution ciphers. But there are variants of substitution ciphers, such as homophonic ciphers, which display increasing levels of difficulty and present significant challenges for decipherment. The famous Zodiac serial killer used one such cipher sys-tem for communication. In 1969, the killer sent a three-part cipher message to newspapers claiming credit for recent shootings and crimes committed near the San Francisco area. The 408-character mes-sage (Zodiac-408) was manually decoded by hand in the 1960 X  X . Oranchak (2008) presents a method for solving the Zodiac-408 cipher automatically with a dictionary-based attack using a genetic algorithm. However, his method relies on using plaintext words from the known solution to solve the cipher, which departs from a strict decipherment scenario.
In this paper, we introduce a novel method for solving substitution ciphers using Bayesian learn-ing. Our novel contributions are as follows:  X  We present a new probabilistic decipherment  X  Our new method combines information from  X  We evaluate the Bayesian decipherment output  X  Using the Bayesian decipherment, we show for We use natural language processing techniques to attack letter substitution ciphers. In a letter substi-tution cipher, every letter p in the natural language (plaintext) sequence is replaced by a cipher token c , according to some substitution key.

For example, an English plaintext may be enciphered as: according to the key: where,  X   X  represents the space character (word boundary) in the English and ciphertext messages.
If the recipients of the ciphertext message have the substitution key, they can use it (in reverse) to recover the original plaintext. The sender can en-crypt the message using one of many different ci-pher systems. The particular type of cipher system chosen determines the properties of the key. For ex-ample, the substitution key can be deterministic in both the encipherment and decipherment directions as shown in the above example X  X .e., there is a 1-to-1 correspondence between the plaintext letters and ciphertext symbols. Other types of keys exhibit non-determinism either in the encipherment (or decipher-ment) or both directions. 2.1 Simple Substitution Ciphers The key used in a simple substitution cipher is deter-ministic in both the encipherment and decipherment directions, i.e., there is a 1-to-1 mapping between plaintext letters and ciphertext symbols. The exam-ple shown earlier depicts how a simple substitution cipher works.

Data: In our experiments, we work with a 414-letter simple substitution cipher. We encrypt an original English plaintext message using a randomly generated simple substitution key to create the ci-phertext. During the encipherment process, we pre-serve spaces between words and use this information for decipherment X  X .e., plaintext character  X   X  maps to ciphertext character  X   X . Figure 1 (top) shows a portion of the ciphertext along with the original plaintext used to create the cipher. 2.2 Homophonic Ciphers A homophonic cipher uses a substitution key that maps a plaintext letter to more than one cipher sym-bol.

For example, the English plaintext: may be enciphered as: according to the key: Here,  X   X  represents the space character in both English and ciphertext. Notice the non-determinism involved in the enciphering direction X  X he English letter  X  X  X  is substituted using different symbols (51, 84) at different positions in the ciphertext.
These ciphers are more complex than simple sub-stitution ciphers. Homophonic ciphers are generated via a non-deterministic encipherment process X  X he key is 1-to-many in the enciphering direction. The number of potential cipher symbol substitutes for a particular plaintext letter is often proportional to the frequency of that letter in the plaintext language X  for example, the English letter  X  X  X  is assigned more cipher symbols than  X  X  X . The objective of this is to flatten out the frequency distribution of cipher-text symbols, making a frequency-based cryptanaly-sis attack difficult.

The substitution key is, however, deterministic in the decipherment direction X  X ach ciphertext symbol maps to a single plaintext letter. Since the ciphertext can contain more than 26 types, we need a larger alphabet system X  X e use a numeric substitution al-phabet in our experiments.

Data: For our decipherment experiments on homophonic ciphers, we use the same 414-letter English plaintext used in Sec-tion 2.1. We encrypt this message using a homophonic substitution key (available from http://www.simonsingh.net/The Black Chamber/ho mophoniccipher.htm ). As before, we preserve spaces between words in the ciphertext. Figure 1 (middle) displays a section of the homophonic cipher (with spaces) and the original plaintext message used in our experiments. 2.3 Homophonic Ciphers without spaces In the previous two cipher systems, the word-boundary information was preserved in the cipher. We now consider a more difficult homophonic ci-pher by removing space characters from the original plaintext.

The English plaintext from the previous example now looks like this: and the corresponding ciphertext is:
Without the word boundary information, typical dictionary-based decipherment attacks fail on such ciphers.

Zodiac-408 cipher: Homophonic ciphers with-out spaces have been used extensively in the past to encrypt secret messages. One of the most famous homophonic ciphers in history was used by the in-famous Zodiac serial killer in the 1960 X  X . The killer sent a series of encrypted messages to newspapers and claimed that solving the ciphers would reveal clues to his identity. The identity of the Zodiac killer remains unknown to date. However, the mystery surrounding this has sparked much interest among cryptanalysis experts and amateur enthusiasts.
The Zodiac messages include two interesting ci-phers: (1) a 408-symbol homophonic cipher without spaces (which was solved manually by hand), and (2) a similar looking 340-symbol cipher that has yet to be solved.

Here is a sample of the Zodiac-408 cipher mes-sage: and the corresponding section from the original English plaintext message:
Besides the difficulty with missing word bound-aries and non-determinism associated with the key, the Zodiac-408 cipher poses several additional chal-lenges which makes it harder to solve than any standard homophonic cipher. There are spelling mistakes in the original message (for example, the English word  X  X ARADISE X  is misspelt as  X  X ARADICE X ) which can divert a dictionary-based attack. Also, the last 18 characters of the plaintext message does not seem to make any sense ( X  X BE-ORIETEMETHHPITI X ).

Data: Figure 1 (bottom) displays the Zodiac-408 cipher (consisting of 408 tokens, 54 symbol types) along with the original plaintext message. We run the new decipherment method (described in Sec-tion 3.1) and show that our approach can success-fully solve the Zodiac-408 cipher. Given a ciphertext message c 1 ...c n , the goal of de-cipherment is to uncover the hidden plaintext mes-sage p 1 ...p n . The size of the keyspace (i.e., num-ber of possible key mappings) that we have to navi-gate during decipherment is huge X  X  simple substi-tution cipher has a keyspace size of 26! , whereas a homophonic cipher such as the Zodiac-408 cipher has 26 54 possible key mappings.

Next, we describe a new Bayesian decipherment approach for tackling substitution ciphers. 3.1 Bayesian Decipherment Bayesian inference methods have become popular in natural language processing (Goldwater and Grif-fiths, 2007; Finkel et al., 2005; Blunsom et al., 2009; Chiang et al., 2010). Snyder et al. (2010) proposed a Bayesian approach in an archaeological decipher-ment scenario. These methods are attractive for their ability to manage uncertainty about model parame-ters and allow one to incorporate prior knowledge during inference. A common phenomenon observed while modeling natural language problems is spar-sity . For simple letter substitution ciphers, the origi-nal substitution key exhibits a 1-to-1 correspondence between the plaintext letters and cipher types. It is not easy to model such information using conven-tional methods like EM. But we can easily spec-ify priors that favor sparse distributions within the Bayesian framework.

Here, we propose a novel approach for decipher-ing substitution ciphers using Bayesian inference. Rather than enumerating all possible keys (26! for a simple substitution cipher), our Bayesian frame-work requires us to sample only a small number of keys during the decipherment process.
 Probabilistic Decipherment: Our decipherment method follows a noisy-channel approach. We are faced with a ciphertext sequence c = c 1 ...c n and we want to find the (English) letter sequence p = p ...p n that maximizes the probability P ( p | c ) .
We first formulate a generative story to model the process by which the ciphertext sequence is gener-ated. 1. Generate an English plaintext sequence p = 2. Substitute each plaintext letter p i with a cipher-
We build a statistical English language model (LM) for the plaintext source model P ( p ) , which assigns a probability to any English letter sequence. Our goal is to estimate the channel model param-eters  X  in order to maximize the probability of the observed ciphertext c :
We estimate the parameters  X  using Bayesian learning. In our decipherment framework, a Chinese Restaurant Process formulation is used to model both the source and channel. The detailed genera-tive story using CRPs is shown below: 1. i  X  1 2. Generate the English plaintext letter p 1 , with 3. Substitute p 1 with cipher token c 1 , with proba-4. i  X  i + 1 5. Generate English plaintext letter p i , with prob-6. Substitute p i with cipher token c i , with proba-7. With probability P quit , quit; else go to Step 4.
This defines the probability of any given deriva-tion, i.e., any plaintext hypothesis corresponding to the given ciphertext sequence. The base distribu-tion P 0 represents prior knowledge about the model parameter distributions. For the plaintext source model, we use probabilities from an English lan-guage model and for the channel model, we spec-ify a uniform distribution (i.e., a plaintext letter can be substituted with any given cipher type with equal probability). C i  X  1 1 represents the count of events occurring before plaintext letter p i in the derivation (we call this the  X  X ache X ).  X  and  X  represent Dirich-let prior hyperparameters over the source and chan-nel models respectively. A large prior value implies that characters are generated from the base distribu-tion P 0 , whereas a smaller value biases characters to be generated with reference to previous decisions inside the cache (favoring sparser distributions). Efficient inference via type sampling: We use a Gibbs sampling (Geman and Geman, 1984) method for performing inference on our model. We could follow a point-wise sampling strategy, where we sample plaintext letter choices for every cipher to-ken, one at a time. But we already know that the substitution ciphers described here exhibit determin-ism in the deciphering direction, 1 i.e., although we have no idea about the key mappings themselves, we do know that there exists only a single plaintext letter mapping for every cipher symbol type in the true key. So sampling plaintext choices for every cipher token separately is not an efficient strategy X  our sampler may spend too much time exploring in-valid keys (which map the same cipher symbol to different plaintext letters).

Instead, we use a type sampling technique similar to the one proposed by Liang et al. (2010). Under this scheme, we sample plaintext letter choices for each cipher symbol type. In every step, we sample a new plaintext letter for a cipher type and update the entire plaintext hypothesis (i.e., plaintext letters at all corresponding positions) to reflect this change. For example, if we sample a new choice p new for a cipher symbol which occurs at positions 4 , 10 , 18 , then we update plaintext letters p 4 ,p 10 and p 18 with the new choice p new .

Using the property of exchangeability, we derive an incremental formula for re-scoring the probabil-ity of a new derivation based on the probability of the old derivation X  X hen sampling at position i , we pretend that the area affected (within a context win-dow around i ) in the current plaintext hypothesis oc-curs at the end of the corpus, so that both the old and new derivations share the same cache. 2 While we may make corpus-wide changes to a derivation in every sampling step, exchangeability allows us to perform scoring in an efficient manner.
 Combining letter n-gram language models with word dictionaries: Many existing probabilistic ap-proaches use statistical letter n-gram language mod-els of English to assign P ( p ) probabilities to plain-text hypotheses during decipherment. Other de-cryption techniques rely on word dictionaries (using words from an English dictionary) for attacking sub-stitution ciphers.

Unlike previous approaches, our decipherment method combines information from both sources X  letter n-grams and word dictionaries. We build an interpolated word+n-gram LM and use it to assign P ( p ) probabilities to any plaintext letter sequence p ...p n . 3 The advantage is that it helps direct the sampler towards plaintext hypotheses that resemble natural language X  X igh probability letter sequences which form valid words such as  X  H E L L O  X  in-stead of sequences like  X  X  T X H R T  X . But in ad-dition to this, using letter n-gram information makes our model robust against variations in the origi-nal plaintext (for example, unseen words or mis-spellings as in the case of Zodiac-408 cipher) which can easily throw off dictionary-based attacks. Also, it is hard for a point-wise (or type) sampler to  X  X ind words X  starting from a random initial sample, but easier to  X  X ind n-grams X .
 Sampling for ciphers without spaces: For ciphers without spaces, dictionaries are hard to use because we do not know where words start and end. We in-troduce a new sampling operator which counters this problem and allows us to perform inference using the same decipherment model described earlier. In a first sampling pass, we sample from 26 plaintext letter choices (e.g.,  X  X  X ,  X  X  X ,  X  X  X , ...) for every ci-pher symbol type as before. We then run a second pass using a new sampling operator that iterates over adjacent plaintext letter pairs p i  X  1 ,p i in the current hypothesis and samples from two choices X (1) add a word boundary (space character  X   X ) between p i  X  1 and p i , or (2) remove an existing space character be-
For example, given the English plaintext hypoth-esis  X  ... A B O Y ...  X , there are two sam-pling choices for the letter pair A,B in the second step. If we decide to add a word boundary, our new plaintext hypothesis becomes  X  ... A B O Y ...  X .

We compute the derivation probability of the new sample using the same efficient scoring procedure described earlier. The new strategy allows us to ap-ply Bayesian decipherment even to ciphers without spaces. As a result, we now have a new decipher-ment method that consistently works for a range of different types of substitution ciphers.
 Decoding the ciphertext: After the sampling run has finished, 4 we choose the final sample as our En-glish plaintext decipherment output. We run decipherment experiments on different types of letter substitution ciphers (described in Sec-tion 2). In particular, we work with the following three ciphers: (a) 414-letter Simple Substitution Cipher (b) 414-letter Homophonic Cipher (with spaces) (c) Zodiac-408 Cipher Methods: For each cipher, we run and compare the output from two different decipherment approaches: 1. EM Method using letter n-gram LMs follow-2. Bayesian Decipherment method using Evaluation: We evaluate the quality of a particular decipherment as the percentage of cipher tokens that are decoded correctly.
 Results: Figure 2 compares the decipherment per-formance for the EM method with Bayesian deci-pherment (using type sampling and sparse priors) on three different types of substitution ciphers. Re-sults show that our new approach (Bayesian) out-performs the EM method on all three ciphers, solv-ing them completely. Even with a 3-gram letter LM, our method yields a +63% improvement in decipher-ment accuracy over EM on the homophonic cipher with spaces. We observe that the word+3-gram LM proves highly effective when tackling more complex ciphers and cracks the Zodiac-408 cipher. Figure 1 shows samples from the Bayesian decipherment out-put for all three ciphers. For ciphers without spaces, our method automatically guesses the word bound-aries for the plaintext hypothesis.
For the Zodiac-408 cipher, we compare the per-formance achieved by Bayesian decipherment under different settings:  X  Letter n-gram versus Word+n-gram LMs X   X  Sparse versus Non-sparse priors X  X e find that  X  Type versus Point-wise sampling X  X nlike
We also perform experiments on shorter substitu-tion ciphers. On a 98-letter simple substitution ci-pher, EM using 3-gram LM achieves 41% accuracy, whereas the method from Ravi and Knight (2009) scores 84% accuracy. Our Bayesian method per-forms the best in this case, achieving 100% with word+3-gram LM. In this work, we presented a novel Bayesian deci-pherment approach that can effectively solve a va-riety of substitution ciphers. Unlike previous ap-proaches, our method combines information from letter n-gram language models and word dictionar-ies and provides a robust decipherment model. We empirically evaluated the method on different substi-tution ciphers and achieve perfect decipherments on all of them. Using Bayesian decipherment, we can successfully solve the Zodiac-408 cipher X  X he first time this is achieved by a fully automatic method in a strict decipherment scenario.

For future work, there are other interesting deci-pherment tasks where our method can be applied. One challenge is to crack the unsolved Zodiac-340 cipher, which presents a much harder problem than the solved version.
 The authors would like to thank the reviewers for their comments. This research was supported by NSF grant IIS-0904684.

