 The Internet and World Wide Web have ushered a business revolution, which made a fundamental shift in the way business is conducted. Although many enterprises have deployed best-of-breed Web-based enterprise applications, such as ERP (Enterprise Resource Plan), CRM (Customer Relationship Management) and SCM (Supply Chain Management), stiff competition is forcing enterprises to implement collaborative business solutions that integrate internal systems. Enterprise information portal tech-nologies [1] have emerged to integrate thos e applications into a cohesive whole. Un-fortunately, current security structures have lagged behind the pace of innovation. As from employees and customers to competitors and attackers, a simple patchwork of security for disparate applications when we bring them together. Enterprises require a comprehensive solution that provides centralized security management, from authen-tication, to authorization and to auditing. 
With the increasing number of applications in use, users are bogged down by mul-tiple logins and required to remember multiple IDs and passwords. To create an im-proved user experience and simplify administration, enterprises require a centralized mechanism to manage the authentication of users. The Single Sign-On (SSO) allows users access to all authorized applications on the basis of a single authentication that enterprises to provide stronger authenticatio n mechanisms such as tokens, biometrics, or X.509 certificates. 
Web-based applications greatly increase information availability and ease of ac-and enforcement of access controls, to ensure that information will be accessible only to authorized entities. However, enterprise applications come in many shapes and sizes. It is hard to implement access contro l properly across distri buted platforms. The current practice is to manage access control policy of each application independently, consistent access control polic y across all applications. 
Another key issue is secure auditing which provides a mechanism to track how in-formation is accessed, created and modified. Auditing can be enforced in many places independently, such as firewalls, operating systems, Web servers, applications and user across multiple platforms and applications. 
In this paper, we will present the design and implementation of the WebDaemon, an integrative security management solution for Web-based enterprise applications. This solution provides different types of authentication methods and the Single Sign-On to multiple Web applications. The WebDaemon centralizes access control man-agement of Web resources, and helps to lower administration costs through Role-Based Access Control (RBAC) [2, 3]. In RBAC, permissions are associated with roles, and users are made members of appropriate roles, thereby acquiring the appro-priate permissions. Also, the WebDaemon tracks all user activity in multiple applica-isting and future technical environments, the WebDaemon supports several standards such as: SAML [4], JAAS [5], LDAP and SSL. We have successfully deployed the WebDaemon in a large-scale enterprise 1 . The WebDaemon acts as a gatekeeper for dozens of Web servers and application servers. More than 8,000 users login various systems through the WebDaemon. The Web-Daemon has exhibited sound and stable performances. 
The rest of the paper is organized as follows. We introduce the architecture and components of the WebDaemon in section 2. In section 3, we show the details of our implementation. We evaluate the performance of our implementation in section 4. Finally, we summarize our work. In this section, we outline the WebDaemon architecture and explain the main components of the system. As shown in figure 1, the intended audiences can be employees, partners, customers, or suppliers. The WebDaemon Gateway works as a reverse proxy, enforc-ing security controls by analyzing the HTTP protocol. The WebDaemon Cen-tralServer provides core security services across the enterprise: authentication, au-thorization, and auditing. The WebDaemon Console is the service by which security administrators can configure the security policies. 
To provide Single Sign-On, it is primary to aggregate and synchronize user identity information which is stored in numerous data repositories. This task can be achieved by identity management products, such as Novell Nsure Identity Manager 2 . The result tions. The directory services are used as th e repository for the basic user identity in-formation. The application-specific database maintains the repository for the informa-tion that is required only by the applica tion. The modifications, creations and remov-als of identity information in master directory services are propagated to application X  X  repository. 
The WebDaemon Gateway is the unique point of Web access to disparate applica-the WebDaemon Gateway. When the WebDaemon Gateway receives a login request timestamp, or tokens), it transmits this information to the WebDaemon CentralServer. According to the response the WebDaemon CentralServer returns, the WebDaemon Gateway allows user to login or not. When an authenticated user requests a resource, the WebDaemon Gateway will send the user ID, the resource name and the request method to the WebDaemon CentralServer, which determines whether the user has the privilege to access the resource. Once the user X  X  request is permitted, the WebDae-mon Gateway will retrieve the resource from relevant backend server and send the content to the user X  X  Web browser. 
In some cases, applications require users to authenticate themselves via their own modules in the applications for some techni cal reasons. Users should provide applica-tion-specific authentication credentials to th e backend server, though users have au-thenticated themselves to the WebDaemon Gateway, which can be regarded as pri-mary authentication. In this situation, the WebDaemon Gateway can serve as an agent that handles the application-specific authen tications automatically. These application-specific authentication credentials are stored in directory services. This mode is somewhat similar to the authentication service described in [6]. 
The WebDaemon CentralServer provides the decision making of security policy. It verifies whether a user X  X  identity is authentic, whether a user can access resources and platforms and writes the data to a single repository. 
The WebDaemon supports several authentication methods: password authentica-tion, X.509 certificate authentication and authentication token. The WebDaemon also provides extensibility for enterprises to a dopt some other authentication methods. For example, Novell X  X  NDS 3 authentication service can be integrated with the WebDae-mon CentralServer. 
Furthermore, it is necessary to support different authentication strengths for differ-ent applications, depending on the value of the data being accessed, the location of the client or the risk profile of the user. For example, users can enter CRM system after password authentication inside the enterprise intranet, while they have to provide X.509 certificate outside the intranet. The WebDaemon provides th e ability to config-ure all these polices. 
Another key component is the WebDaemon Console. Security administrators can manage Web resources, identities, roles and privileges on it. To effectively manage the information in large enterprise, the WebDaemon Console enables security admin-administrators. The WebDaemon Gateway locates between users and numerous Web applications. WebDaemon Gateway may become the bottleneck of the system. The WebDaemon hardware load-balancing device or load-balancing software product, such as Cisco LocalDirector 4 , to provide comprehensive load balancing and failover support. Given the high level description of the WebDaemon architecture, we turn on describ-ing the related technologies used in our implementation. 
The WebDaemon Gateway is designed to build a highly scalable HTTP proxy the network, we use the non blocking I/O facilities available in JDK 1.4 5 to implement not possible in traditional blocking I/O based design. 
Since HTTP is a "stateless" protocol, it is difficult to differentiate between visits to a web site. Server can mark a visitor by sending a piece of state information (called a should include this state. Generally, SSO in a web based intranet environment can be achieved using HTTP cookies [8]. However, there are several types of security threats cure cookies which can provide authentication, integrity, and confidentiality. Secure either MAC (Message Authentication Code) or a signed message digest of the cook-ies. In our implementation, the WebDaemon Gateway issues a set of secure cookies to user X  X  Web browser after a successful user authentication. These cookies contain user X  X  profile. 
We define the WebDaemon protocol to enable the exchange of authentication and authorization information between the WebDaemon CentralServer and Gateway. The protocol is similar to SAML [4], but there are some differences between them. First, the WebDaemon protocol uses UDP as transport protocol instead of TCP, because the WebDaemon protocol is a stateless protocol as well as UDP. And UDP simplifies the server implementation. Second, the WebDaemon protocol is not based on XML, and its packet format references RADIUS protocol [10]. Thus, we need not spend time parsing XML document. Each attribute in a packet is composed of three fields "type-length-value". New attributes can be easily appended to the protocol. Third, transac-tions between the WebDaemon CentralServer and Gateway are authenticated through the use of a shared secret, and it is never sent over the network. In addition, all user passwords transmitted between the WebDaemon CentralServer and Gateway are encrypted. It eliminates the possibility that someone snooping on an unsecure network could determine user's password. We also provide the SAML extension for WebDaemon CentralServer to implement Single Sign-On to external Web sites. Users can access resources outside of the enter-prise without another authentication. We use caching technique to reduce the delay experienced by the end user. The WebDaemon Gateway caches Web resources frequently requested retrieved from backend servers and authorization results returned from the WebDaemon Cen-tralServer. The valid times of the cached objects can be configured. The WebDaemon Gateway can eliminate dirty records by least recently used (LRU) rule. To quantify the performance impact introduced by the WebDaemon, we modeled a small Intranet environment. A 10 Mbps Ethe rnet connected 4 PCs, each with 2.0 GHz Pentium IV and 512 MB RAM, running Windows 2000 Server. We measured our system in two approaches. 
First, we used Apache JMeter 6 to measure the performance of the WebDaemon with caching enabled and disabled in the WebDaemon Gateway respectively. Table 1 shows the times consumed to get a static web page from a backend HTTP server. The generated by JMeter per second. The second column shows the average times con-sumed to get the web page directly. The third column shows access to the web page through the WebDaemon Gateway with caching enabled, and the fourth column with caching disabled. We can see that there are obvious improvements brought by cach-ing. 
The other approach is using the Mercury LoadRunner 7 to emulate large numbers of concurrent users X  login and access to Web resources. By LoadRunner, we recorded the login time and the average execution time each user spent on completing 7 ran-concurrent users that login the WebDaemon system per second. The fourth column shows the numbers of the responses returned by the WebDaemon Gateway per sec-ond. The last column shows the CPU usage of the WebDaemon Gateway server. We can see that if there are 5 users login per second, the total number of the users logged in within five minutes will reach 1500. Each user can complete 7 hits in 17 seconds in large-scale enterprises environment. In our practical environment, the backend servers comprise a DRP (Distribution Resource Planning) system, a document management system, a supply chain man-agement system, a business reporting system, a custom service management system, and so on. Some of these systems are based on J2EE platform, some based on Micro-soft IIS, and the others based on IBM Lotus Domino. We analyzed some day X  X  log files. Figure 2 shows the numbers of the requests per hour handled by the WebDae-mon in work hours. In this paper, we present the design and implementation of the WebDaemon, an inte-grative security management solution for Web-based enterprise applications. With Web Single Sign-On, Role-Based Access Control, delegated administration and cen-tralized auditing, the WebDaemon can secure all Web resources with ease of deploy-ment and reduced maintenance requirements. The key characteristic of the WebDae-large-scale enterprises, this capability can greatly reduce policy management incon-sistencies and the cost of administration. We also show that the WebDaemon can provide sufficient performance in large-scale enterprises environment. We have suc-cessfully deployed the WebDaemon in a large-scale enterprise and continue to sup-port it since 2003. 
