 Semantic parsing maps a natural language sen-tence into a formal representation of its meaning. Due to the difficulty in deep semantic parsing, most previous work focuses on shallow semantic parsing, which assigns a simple structure (such as WHO did WHAT to WHOM, WHEN, WHERE, WHY, HOW) to each predicate in a sentence. In particular, the well-defined semantic role labeling (SRL) task has been drawing in-creasing attention in recent years due to its im-portance in natural language processing (NLP) applications, such as question answering (Nara-yanan and Harabagiu, 2004), information extrac-tion (Surdeanu et al., 2003), and co-reference resolution (Kong et al., 2009). Given a sentence and a predicate (either a verb or a noun) in the sentence, SRL recognizes and maps all the con-stituents in the senten ce into their corresponding semantic arguments (roles) of the predicate. In both English and Chinese PropBank (Palmer et al., 2005; Xue and Palmer, 2003), and English and Chinese NomBank (Meyers et al., 2004; Xue, 2006), these semantic arguments include core arguments (e.g., Arg0 for agent and Arg1 for recipient) and adjunct arguments (e.g., ArgM-LOC for locative argument and 
ArgM-TMP for temporal argument). According to predicate type, SRL can be divided into SRL for verbal predicates (verbal SRL, in short) and 
SRL for nominal predicates (nominal SRL, in short). 
With the availability of large annotated cor-pora such as FrameNet (Baker et al., 1998), 
PropBank, and NomBank in English, data-driven techniques, including both feature-based and kernel-based methods, have been extensively studied for SRL (Carreras and M X rquez, 2004; 
Carreras and M X rquez, 2005; Pradhan et al., 2005; Liu and Ng, 2007). Nevertheless, for both verbal and nominal SRL, state-of-the-art systems depend heavily on the top-best parse tree and there exists a large performance gap between 
SRL based on the gold parse tree and the top-best parse tree. For example, Pradhan et al. (2005) suffered a performance drop of 7.3 in 
F1-measure on English PropBank when using the top-best parse tree returned from Charniak X  X  parser (Charniak, 2001). Liu and Ng (2007) re-ported a performance drop of 4.21 in F1-measure on English NomBank. 
Compared with English SRL, Chinese SRL suffers more seriously from syntactic parsing. 
Xue (2008) evaluated on Chinese PropBank and showed that the performance of Chinese verbal 
SRL drops by about 25 in F1-measure when re-placing gold parse trees with automatic ones. 
Likewise, Xue (2008) and Li et al. (2009) re-ported a performance drop of about 12 in 
F1-measure in Chinese NomBank SRL. 
While it may be difficult to further improve syntactic parsing, a promising alternative is to perform both syntactic and semantic parsing in an integrated way. Given the close interaction between the two tasks, joint learning not only allows uncertainty about syntactic parsing to be carried forward to semantic parsing but also al-lows useful information from semantic parsing to be carried backward to syntactic parsing. 
This paper explores joint learning of syntactic and semantic parsing for Chinese texts from two levels. Firstly, an integrated parsing approach is proposed to benefit from the close interaction between syntactic and semantic parsing. This is done by integrating semantic parsing into the syntactic parsing process. Secondly, various se-mantic role-related features are directly incorpo-rated into the syntactic parsing model to better capture semantic role-related information in syn-tactic parsing. Evaluation on Chinese TreeBank, Chinese PropBank, and Chinese NomBank shows that our method significantly improves the performance of both syntactic and semantic parsing. This is promising and encouraging. To our best knowledge, this is the first research on exploring syntactic parsing and SRL for verbal and nominal predicates in an integrated way. The rest of this paper is organized as follows. Section 2 reviews related work. Section 3 pre-sents our baseline systems for syntactic and se-mantic parsing. Section 4 presents our proposed method of joint syntactic and semantic parsing for Chinese texts. Section 5 presents the experi-mental results. Finally, Section 6 concludes the paper. Compared to the large body of work on either syntactic parsing (Ratnaparkhi, 1999; Collins, 1999; Charniak, 2001; Petrov and Klein, 2007), or SRL (Carreras and M X rquez, 2004; Carreras and M X rquez, 2005; Jiang and Ng, 2006), there is relatively less work on their joint learning. 
Koomen et al. (2005) adopted the outputs of multiple SRL systems (each on a single parse tree) and combined them into a coherent predi-cate argument output by solving an optimization problem. Sutton and McCallum (2005) adopted a probabilistic SRL system to re-rank the N-best results of a probabilistic syntactic parser. How-ever, they reported negative results, which they blamed on the inaccurate probability estimates from their locally trained SRL model. 
As an alternative to the above pseudo-joint learning methods (strictly speaking, they are still pipeline methods), one can augment the syntactic label of a constituent with semantic information, like what function parsing does (Merlo and Mu-sillo, 2005). Yi and Palmer (2005) observed that the distributions of semantic labels could poten-tially interact with the distributions of syntactic labels and redefined th e boundaries of constitu-ents. Based on this observation, they incorpo-rated semantic role information into syntactic parse trees by extending syntactic constituent labels with their coarse-grained semantic roles (core argument or adjunct argument) in the sen-tence, and thus unified semantic parsing and syntactic parsing. The actual fine-grained seman-tic roles are assigned, as in other methods, by an ensemble classifier. However, the results ob-tained with this method were negative, and they concluded that semantic parsing on PropBank was too difficult due to the differences between chunk annotation and tree structure. Motivated by Yi and Palmer (2005), Merlo and Musillo (2008) first extended a statistical parser to pro-duce a richly annotated tree that identifies and labels nodes with semantic role labels as well as syntactic labels. Then, they explored both rule-based and machine learning techniques to extract predicate-argument structures from this enriched output. Their experiments showed that their method was biased against these roles in general, thus lowering recall for them (e.g., pre-cision of 87.6 and recall of 65.8). 
There have been other efforts in NLP on joint learning with various degrees of success. In par-ticular, the recent shared tasks of CoNLL 2008 and 2009 (Surdeanu et al., 2008; Hajic et al., 2009) tackled joint parsing of syntactic and se-mantic dependencies. However, all the top 5 re-ported systems decoupled the tasks, rather than building joint models. Compared with the disap-pointing results of joint learning on syntactic and semantic parsing, Miller et al. (2000) and Finkel and Manning (2009) showed the effectiveness of joint learning on syntactic parsing and some simple NLP tasks, such as information extraction and name entity recognition. In addition, at-tempts on joint Chinese word segmentation and part-of-speech (POS) tagging (Ng and Low, 2004; Zhang and Clark, 2008) also illustrate the benefits of joint learning. In this section, we briefly describe our approach to syntactic parsing and semantic role labeling, as well as the baseline system with pipeline parsing on the top-best parse tree. 3.1 Syntactic Parsing Our syntactic parser re-implements Ratnaparkhi (1999), which adopts the maximum entropy principle. The parser recasts a syntactic parse tree as a sequence of decisions similar to those of a standard shift-reduce parser and the parsing process is organized into three left-to-right passes via four procedures, called TAG, CHUNK, BUILD, and CHECK. First pass. The first pass takes a tokenized sen-tence as input, and uses TAG to assign each word a part-of-speech. Second pass. The second pass takes the output of the first pass as input, and uses CHUNK to recognize basic chunks in the sentence. Third pass. The third pass takes the output of the second pass as input, and always alternates between BUILD and CHECK in structural pars-ing in a recursive manner. Here, BUILD decides whether a subtree will start a new constituent or join the incomplete constituent immediately to its left. CHECK finds the most recently pro-posed constituent, and decides if it is complete. 3.2 Semantic Role Labeling Figure 1 demonstrates an annotation example of Chinese PropBank and NomBank. In the figure, the verbal predicate  X   X  X  X  /provide X  is annotated with three core arguments (i.e.,  X  X P (  X  X  /Chinese  X  X  X  /govt.) X  as Arg0,  X  X P (  X  /to  X   X  /N. Korean  X  X  X  /govt.) X  as Arg2, and  X  X P (  X  X  X  X  /RMB  X  X  /loan) X  as Arg1), while the nominal predicate  X   X  X  /loan X  is annotated with two core arguments (i.e.,  X  X P (  X  X  /Chinese  X   X  /govt.) X  as Arg1 and  X  X P (  X  /to  X  X  X  /N. Ko-rean  X  X  X  /govt.) X  as Arg0), and an adjunct ar-gument (i.e.,  X  X N (  X  X  X  X  /RMB) X  as ArgM-MNR, denoting the manner of loan). It is worth pointing out that there is a (Chinese) NomBank-specific label in Figure 1, Sup (sup-port verb) (Xue, 2006), to help introduce the arguments which occur outside the nominal pre-dicate-headed noun phrase. In (Chinese) Nom-Bank, a verb is considered to be a support verb only if it shares at least an argument with the nominal predicate. 3.2.1 Automatic Predicate Recognition Automatic predicate recognition is a prerequisite for the application of SRL systems. For verbal predicates, it is very easy. For example, 99% of verbs are annotated as predicates in Chinese PropBank. Therefore, we can simply select any word with a part-of-speech (POS) tag of VV, VA, VC, or VE as verbal predicate. 
Unlike verbal predicate recognition, nominal predicate recognition is quite complicated. For example, only 17.5% of nouns are annotated as predicates in Chinese NomBank. It is quite common that a noun is annotated as a predicate in some cases but not in others. Therefore, au-tomatic predicate recognition is vital to nominal SRL. In principle, automatic predicate recogni-tion can be cast as a binary classification (e.g., Predicate vs. Non-Predicate) problem. For no-minal predicates, a binary classifier is trained to predict whether a noun is a nominal predicate or not. In particular, any word POS-tagged as NN is considered as a predicate candidate in both training and testing processes. Let the nominal predicate candidate be w 0 , and its left and right neighboring words/POSs be w -1 /p -1 and w 1 /p 1 respectively. Table 1 lists the feature set used in our model. In Table 1, local features present the candidate X  X  contextual information while global features show its statistical information in the whole training set. 3.2.2 SRL for Chinese Predicates Our Chinese SRL models for both verbal and nominal predicates adopt the widely-used SRL framework, which divides the task into three sequential sub-tasks: argument pruning, argu-ment identification, and argument classification. In particular, we follow Xue (2008) and Li et al. (2009) to develop verbal and nominal SRL models, respectively. Moreover, we have further improved the performance of Chinese verbal SRL by exploring additional features, e.g., voice position that indicates the voice maker (BA, BEI) is before or after the constituent in focus, the rule that expands the parent of the constituent in focus, and the core arguments defined in the predicate X  X  frame file. For nominal SRL, we simply use the final feature set of Li et al. (2009). As a result, our Chinese verbal and nominal SRL systems achieve performance of 92.38 and 72.67 in F1-measure respectively (on golden parse trees and golden predicates), which are compa-rable to Xue (2008) and Li et al. (2009). For more details, please refer to Xue (2008) and Li et al. (2009). 3.3 Pipeline Parsing on Top-best Parse Similar to most of the state-of-the-art systems (Pradhan et al., 2005; Xue, 2008; Li et al., 2009), the top-best parse tree is first returned from our syntactic parser and then fed into the SRL sys-tem. Specifically, the verbal (nominal) SRL la-beler is in charge of verbal (nominal) predicates, respectively. For each sentence, since SRL is only performed on one parse tree, only con-stituents in it are candidates for semantic argu-ments. Therefore, if no constituent in the parse tree can map the same text span to an argument in the manual annotation, the system will not get a correct annotation. In this section, we first explore pipeline parsing on N-best parse trees, as a natural extension of pipeline parsing on the top-best parse tree. Then, joint syntactic and semantic parsing is explored for Chinese texts from two levels. Firstly, an integrated parsing approach to joint syntactic and semantic parsing is proposed. Secondly, various semantic role-related features are di-rectly incorporated into the syntactic parsing model for better interaction between the two tasks. 4.1 Pipeline Parsing on N-best Parse Trees The pipeline parsing approach employed in this paper is largely motivated by the general framework of re-ranking, as proposed in Sutton and McCallum (2005). The idea behind this ap-proach is that it allows uncertainty about syntac-tic parsing to be carried forward through an N-best list, and that a reliable SRL system, to a certain extent, can reflect qualities of syntactic parse trees. Given a sentence x, a joint parsing model is defined over a semantic frame F and a parse tree t in a log-linear way: where P(t|x) is returned by a probabilistic syn-tactic parsing model, e.g., our syntactic parser, and P(F|t, x) is returned by a probabilistic se-mantic parsing model, e.g. our verbal &amp; nominal SRL systems. In our pipeline parsing approach, P(t|x) is calculated as the product of all involved decisions X  probabilities in the syntactic parsing model, and P(F|t, x) is calculated as the product of all the semantic role labels X  probabilities in a sentence (including both verbal and nominal SRL). That is to say, we only consider those constituents that are supposed to be arguments. Here, the parameter  X  is a balance factor in-dicating the importance of the semantic parsing model. 
In particular, (F*, t*) with maximal Score(F, t|x) is selected as the final syntactic and seman-tic parsing results. Given a sentence, N-best parse trees are generated first using the syntactic parser, and then for each parse tree, we predict the best SRL frame using our verbal and nomi-nal SRL systems. 4.2 Integrated Parsing Although pipeline parsing on N-best parse trees could relieve severe dependence on the quality of the top-best parse tree, there is still a potential drawback: this method suffers from the limited scope covered by the N-best parse trees since the items in the parse tree list may be too similar, especially for long sentences. For example, 50-best parse trees can only represent a combi-nation of 5 to 6 binary ambiguities since 2^5 &lt; 50 &lt; 2^6. 
Ideally, we should perform SRL on as many parse trees as possible, so as to enlarge the search scope. However, pipeline parsing on all possible parse trees is time-consuming and thus unrealistic. As an alternative, we turn to inte-grated parsing, which aims to perform syntactic and semantic parsing synchronously. The key idea is to construct a parse tree in a bottom-up way so that it is feasible to perform SRL at suit-able moments, instead of only when the whole parse tree is built. Integrated parsing is practica-ble, mostly due to the following two observa-tions: (1) Given a predicate in a parse tree, its semantic arguments are usually siblings of the predicate, or siblings of its ancestor. Actually, this special observation has been widely em-ployed in SRL to prune non-arguments for a verbal or nominal predicate (Xue, 2008; Li et al., 2009). (2) SRL feature spaces (both in fea-ture-based method and kernel-based method) mostly focus on the predicate-argument structure of a given (predicate, argument) pair. That is to say, once a predicate-argument structure is formed (i.e., an argument candidate is connected with the given predicate), there is enough con-textual information to predict their SRL relation. 
As far as our syntactic pa rser is concerned, we invoke the SRL systems once a new constituent covering a predicate is complete with a  X  X ES X  decision from the CHECK procedure. Algorithm 1 illustrates the integration of syntactic and se-mantic parsing. For the example shown in Fig-ure 2, the CHECK procedure predicts a  X  X ES X  decision, indicating the immediately proposed constituent  X  X P (  X  X  X  /provide  X  X  X  X  /RMB  X  X  /loan) X  is complete. So, at this moment, the verbal SRL system is invoked to predict the se-mantic label of the constituent  X  X P (  X  X  X  X  /RMB  X  X  /loan) X , given the verbal predicate  X  X V (  X  X  X  /provide) X . Similarly,  X  X P (  X  /to  X   X  /N. Korean  X  X  X  /govt.) X  would also be se-mantically labeled as soon as  X  X P (  X  /to  X  X  X  /N. Korean  X  X  X  /govt.) X  and  X  X P (  X  X  X  /provide  X   X  X  X  /RMB  X  X  /loan) X  are merged into a big-ger VP. In this way, both syntactic and semantic parsing are accomplished when the root node TOP is formed. It is worth pointing out that all features (Xue, 2008; Li et al., 2009) used in our SRL model can be instantiated and their values are same as the ones when the whole tree is available. In particular, the probability computed from the SRL model is interpolated with that of the syntactic parsing model in a log-linear way (with equal weights in our experiments). This is due to our hypothesis that the probability re-turned from SRL model is helpful to joint syn-tactic and semantic pa rsing, considering the close interaction between the two tasks. 4.3 Integrating Semantic Role-related The integrated parsing approach as shown in Section 4.2 performs syntactic and semantic parsing synchronously. In contrast to traditional syntactic parsers where no semantic role-related information is used, it may be interesting to in-vestigate the contribution of such information in the syntactic parsing model, due to the availabil-ity of such information in the syntactic parsing process. In addition, it is found that 11% of pre-dicates in a sentence are speculatively attached with two or more core arguments with the same label due to semantic parsing errors (partly caused by syntactic parsing errors in automatic parse trees). This is abnormal since a predicate normally only allows at most one argument of each core argument role (i.e., Arg0-Arg4). Therefore, such syntactic errors should be avoidable by considering those arguments al-ready obtained in the bottom-up parsing process. On the other hand, taking those expected seman-tic roles into account would help the syntactic parser. In terms of our syntactic parsing model, this is done by directly incorporating various semantic role-related feat ures into the syntactic parsing model (i.e., the BUILD procedure) when the newly-formed constituent covers one or more predicates. 
For the example shown in Figure 2, once the constituent  X  X P (  X  X  X  /provide  X  X  X  X  /RMB  X  X  /loan) X , which covers a verbal predicate  X  X V (  X  X  X  /provide) X , is complete, the verbal SRL model would be triggered first to mark constituent  X  X P (  X  X  X  X  /RMB  X  X  /loan) X  as ARG1, given predicate  X  X V (  X  X  X  /provide) X . Then, the BUILD procedure is called to make the BUILD decision for the newly-formed con-stituent  X  X P (  X  X  X  /provide  X  X  X  X  /RMB  X  X  /loan) X . Table 2 lists various semantic role-related features explored in our syntactic parsing model and their instantiations with re-gard to the example shown in Figure 2. In Table 2, feature sf4 gives the possible core semantic roles that the focus pr edicate may take, accord-ing to its frame file; feature sf5 presents the se-mantic roles that the fo cus predicate has already occupied; feature sf6 indicates the semantic roles that the focus predicate is expecting; and SF1-SF8 are combined features. Specifically, if the current constituent covers n predicates, then 14 * n features would be instantiated. Moreover, we differentiate whether the focus predicate is verbal or nominal, and whether it is the head word of the current constituent. 
Feature Selection. Some features proposed above may not be effective in syntactic parsing. Here we adopt the greedy feature selection algo-rithm as described in Jiang and Ng (2006) to select useful features empirically and incremen-tally according to their contributions on the de-velopment data. The algorithm repeatedly se-lects one feature each time which contributes the most, and stops when adding any of the remain-ing features fails to improve the syntactic pars-ing performance. sf2 Predicate: the predicate itself. (  X  X  X  /provide) SF2 sf1 + sf2. (VP&gt;VV+  X  X  X  /provide) We have evaluated our integrated parsing ap-proach on Chinese TreeBank 5.1 and corre-sponding Chinese PropBank and NomBank. 5.1 Experimental Settings This version of Chinese PropBank and Chinese NomBank consists of st andoff annotations on the file (chtb 001 to 1151.fid) of Chinese Penn TreeBank 5.1. Following the experimental set-tings in Xue (2008) and Li et al. (2009), 648 files (chtb 081 to 899.fid) are selected as the training data, 72 files (chtb 001 to 040.fid and chtb 900 to 931.fid) are held out as the test data, and 40 files (chtb 041 to 080.fid) are selected as the development data. In particular, the training, test, and development data contain 31,361 (8,642), 3,599 (1,124), and 2,060 (731) verbal (nominal) propositions, respectively. 
For the evaluation measurement on syntactic parsing, we report labele d recall, labeled preci-sion, and their F1-measure. Also, we report re-call, precision, and their F1-measure for evalua-tion of SRL on automatic predicates, combining verbal SRL and nominal SRL. An argument is correctly labeled if there is an argument in man-ual annotation with the same semantic label that spans the same words. Moreover, we also report the performance of predicate recognition. To see whether an improvement in F1-measure is statis-tically significant, we also conduct significance tests using a type of stratified shuffling which in turn is a type of compute-intensive randomized p-values less than or equal to 0.01, in-between (0.01, 0.05], and bigger than 0.05, respectively. 
We are not aware of any SRL system comb-ing automatic predicate recognition, verbal SRL and nominal SRL on Chinese PropBank and NomBank. Xue (2008) experimented independ-ently with verbal and nominal SRL and assumed correct predicates. Li et al. (2009) combined nominal predicate recognition and nominal SRL on Chinese NomBank. The CoNLL-2009 shared task (Hajic et al., 2009) included both verbal and nominal SRL on dependency parsing, instead of constituent-based syntactic parsing. Thus the SRL performances of their systems are not di-rectly comparable to ours. 5.2 Results and Discussions Results of pipeline parsing on N-best parse trees. While performing pipeline parsing on N-best parse trees, 20-best (the same as the heap size in our syntactic parsing) parse trees are ob-tained for each sentence using our syntactic parser as described in Section 3.1. The balance factor  X  is set to 0.5 indicating that the two components in formula (1) are equally important. Table 3 compares the two pipeline parsing ap-proaches on the top-best parse tree and the N-best parse trees. It shows that the approach on N-best parse trees outperforms the one on the top-best parse tree by 0.42 (&gt;&gt;&gt;) in F1-measure on SRL. In addition, synt actic parsing also bene-fits from the N-best parse trees approach with improvement of 0.17 (&gt;&gt;&gt;) in F1-measure. This suggests that pipeline parsing on N-best parse trees can improve both syntactic and semantic parsing. 
It is worth noting that our experimental results in applying the re-ranking framework in Chinese pipeline parsing on N-best parse trees are very encouraging, considering the pessimistic results of Sutton and McCallum (2005), in which the re-ranking framework failed to improve the per-formance on English SRL. It may be because, unlike Sutton and McCallum (2005), P(F, t|x) defined in this paper only considers those con-stituents which are identified as arguments. This can effectively avoid the noises caused by the predominant non-argument constituents. More-over, the huge performance gap between Chi-nese semantic parsing on the gold parse tree and that on the top-best parse tree leaves much room for performance improvement. 
Results of integrated parsing. Table 3 also compares the integrated parsing approach with the two pipeline parsing approaches. It shows that the integrated parsing approach improves the performance of both syntactic and semantic in F1-measure over the pipeline parsing ap-proach on the top-best parse tree. It is also not surprising to find out that the integrated parsing approach outperforms the pipeline parsing ap-proach on 20-best parse trees by 0.67 (&gt;&gt;&gt;) in F1-measure on SRL, due to its exploring a larger search space, although the integrated parsing approach integrates the SRL probability and the syntactic parsing probability in the same manner as the pipeline parsing approach on 20-best parse trees. However, the syntactic parsing per-formance gap between the integrated parsing approach and the pipeline parsing approach on 20-best parse trees is negligible. 
Results of integrated parsing with semantic role-related features. After performing the greedy feature selection algorithm on the devel-opment data, features {SF3, SF2, sf5, sf6, SF4} as proposed in Section 4.3 are sequentially se-lected for syntactic parsing. As what we have assumed, knowledge about the detected seman-tic roles and expected semantic roles is helpful for syntactic parsing. Table 3 also lists the per-formance achieved with those selected features. It shows that the integration of semantic role-related features in integrated parsing sig-nificantly enhances both the performance of syn-tactic and semantic parsing by 0.44 (&gt;&gt;&gt;) and 0.49 (&gt;&gt;) respectively in F1-measure. In addi-tion, it shows that it outperforms the wide-ly-used pipeline parsing approach on top-best F1-measure on syntactic and semantic parsing, respectively. Finally, it shows that it outper-forms the widely-used pipeline parsing approach on 20-best parse trees by 0.46 (&gt;&gt;&gt;) and 1.16 (&gt;&gt;&gt;) in F1-measure on syntactic and semantic parsing, respectively. This is very encouraging, considering the notorious difficulty and complexity of both the syntactic and semantic parsing tasks. 
Table 3 also shows that our proposed method works well for both verbal SRL and nominal SRL. In addition, it shows that the performance of predicate recognition is very stable due to its high dependence on POS tagging results, rather than syntactic parsing results. Finally, it is not surprising to find out that the performance of predicate recognition when mixing verbal and nominal predicates is better than the perform-ance of either verbal predicates or nominal predicates. 5.3 Extending the Word-based Syntactic Parser to a Character-based Syntactic Parser The above experimental results on a word-based syntactic parser (assuming correct word seg-mentation) show that both syntactic and seman-tic parsing benefit from our integrated parsing approach. However, observing the great chal-lenge of word segmentation in Chinese informa-tion processing, it is still unclear whether and how much joint learning benefits charac-ter-based syntactic and semantic parsing. In this section, we extended the Ratnaparkhi parser (1999) to a character-bas ed parser (with auto-matic word segmentation), and then examined the effectiveness of joint learning. 
Given the three-pass process in the word-based syntactic parser, it is easy to extend it to a character-based parser for Chinese texts. This can be done by only replacing the TAG procedure in the first pass with a POSCHUNK procedure, which integrates Chinese word seg-mentation and POS tagging in one step, follow-ing the method described in (Ng and Low 2004). Here, each character is annotated with both a boundary tag and a POS tag. The 4 possible boundary tags include  X  X  X  for a character that begins a word and is followed by another char-acter,  X  X  X  for a character that occurs in the middle of a word,  X  X  X  for a character that ends a word, and  X  X  X  for a char acter that occurs as a single-character word. For example,  X   X  X  X  X  /Beijing city/NR X  would be decomposed into three units:  X   X  /north/B_NR X ,  X   X  /capital/M_NR X , and  X   X  /city/E_NR X . Also,  X   X  /is/VC X  would turn into  X   X  /is/S_VC X . Through POSCHUNK, all characters in a sentence are first assigned with POS chunk labels which must be compatible with previous ones, and then merged into words with their POS tags. For ex-ample,  X   X  /north/B_NR X ,  X   X  /capital/M_NR X , and  X   X  /city/E_NR X  will be merged as  X   X  X  X  X  /Beijing/NR X ,  X   X  /is/S_VC X  will become  X   X  /is/VC X . Finally the merged results of the PO-SCHUNK are fed into the CHUNK procedure of the second pass. 
Using the same data split as the previous ex-periments, word segmentation achieves perfor-mance of 96.3 in F1-measure on the test data. Table 4 lists the syntactic and semantic parsing performance by adopting the character-based parser. 
Table 4 shows that integrated parsing benefits syntactic and semantic parsing when automatic word segmentation is considered. However, the improvements are smaller due to the extra noise caused by automatic word segmentation. For example, our experiments show that the per-formance of predicate recognition drops from 93.2 to 90.3 in F1-measure when replacing cor-rect word segmentations with automatic ones. In this paper, we explore joint syntactic and se-mantic parsing to improve the performance of both syntactic and semantic parsing, in particular that of semantic parsing. Evaluation shows that our integrated parsing approach outperforms the pipeline parsing approach on N-best parse trees, a natural extension of the widely-used pipeline parsing approach on the top-best parse tree. It also shows that incorporating semantic informa-tion into syntactic parsing significantly improves the performance of both syntactic and semantic parsing. This is very pr omising and encouraging, considering the complexity of both syntactic and semantic parsing. 
To our best knowledge, this is the first suc-cessful research on exploring syntactic parsing and semantic role labeling for verbal and nomi-nal predicates in an integrated way. The first two authors were financially supported by Projects 60683150, 60970056, and 90920004 under the National Natural Science Foundation of China. This research was also partially sup-ported by a research grant R-252-000-225-112 from National University of Singapore Aca-demic Research Fund. We also want to thank the reviewers for insightful comments. 
