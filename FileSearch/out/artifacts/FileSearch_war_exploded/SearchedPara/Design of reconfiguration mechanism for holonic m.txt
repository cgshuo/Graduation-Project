 1. Introduction et al., 2001; Wyns, 1999; Christensen, 1994 ) have been recog-nized as a paradigm to accommodate changes and meet customers X  requirements flexibly based on the notion of holon ( Koestler, 1967 ) to provide a reconfigurable, flexible and decen-tralized manufacturing architecture. Koestler proposed the word  X  X  X olon X  X  to describe a basic unit of organization in biological and social systems. A holon is an autonomous, co-operative and intelligent entity able to collaborate with other holon to process the tasks. Autonomy and cooperation are two important char-acteristics of holons. Autonomy allows holons to decide the actions needed to be taken to accomplish the objectives without consulting any supervisory entity. Cooperation makes it possible for holons to agree on common plans and mutually execute them.
The distributed architecture of multi-agent systems (MAS) ( Nilsson, 1998; Ferber, 1999 ) and the agents X  characteristics of autonomy and cooperation make MAS a potential model for the analysis and implementation of HMS ( Ulieru et al., 2001 ).
However, the aggregation relation of holons allows a holon to be part of another holon in the holonic architecture ( Paolucci and
Sacile, 2005 ), which makes holonic systems different from MAS and reflects the difficulties to model and analyze HMS with an existing MAS theory. To lay a theoretical foundation for the design and analysis of HMS, a viable approach is to combine MAS architecture with suitable models.
 Van Brussel et al. (1998) proposed reference architecture
PROSA for HMS and paved the way for further study and design of HMS. In existing literature, surveys of multi-agent manufactur-ing systems can be found in Shen and Norrie (1999) , Monostori et al. (2006) , and Marik and Lazansky (2007) . Contract net protocol (CNP) ( Smith, 1980 ) is a well known protocol for distributing tasks in multiagent systems. Application of CNP in design of HMS can be found in Neligwa and Fletcher (2003) and Fisher (1999) . Works on how to formally specify the dynamic behaviour of holonic systems appear in Leit ~ ao et al. (2003) and Hsieh (2008a, 2009a, 2010) .
Existing results on how to achieve global optimization in HMS can be found in Hsieh (2008a) . In spite of the promising perspect and research developed by the holonic community ( Bussmann and
McFarlane, 1999; Brennan et al., 2002; Deen, 2003 ), HMS leave some important questions open ( Shen et al., 2008; Marik, 2004 ).
Key research topics of HMS include design methodologies and technologies for developing holonic control applications, optimi-zation in holonic system architecture, disturbance handling and reconfiguration in HMS ( Leit ~ ao, 2008; Hsieh, 2009b ).
The special issue on distributed control of production systems in Trentesaux (2009) focuses on the possible applications of distributed approaches for the design, evaluation and implemen-tation of new control architectures for production systems. In particular, reconfigurability is recognized as an important prop-erty that differentiates HMS from conventional manufacturing systems. Farid and McFarlane proposed an assessment tool based on  X  X  X esign Structure Matrix X  X  as a means of assessing the modularity of elements in a manufacturing system ( Farid and McFarlane, 2006 ). Moreover Covanich and McFarlane compared the ease of reconfiguration of Holonic and conventional manu-facturing systems ( Covanich and McFarlane, 2009 ). It is found that HMS with conventional hardware may have little advantage over conventional manufacturing systems, while HMS with an ideal hardware appears to have significant advantage over conven-tional manufacturing systems. A reconfiguration process model was also proposed by Chokshi and McFarlane ( Chokshi and McFarlane, 2008 ). To effectively deal with disturbances and accommodate changes, it relies on a proper reconfiguration mechanism. Leit ~ ao and Restivo studied how the production control structure should evolve to adapt to changes ( Leit ~ ao and Restivo, 2006 ). Leit ~ ao and Restivo presented an agile and adaptive manufacturing control architecture that addresses the need for the fast reaction to disturbances at the shop floor level, increasing the agility and flexibility. Barata et al. (2008) addressed the design and implementation of a multiagent based control architecture to support modular reconfigurable production systems. The goal of this paper is to propose a systematic methodology to develop and implement reconfiguration mechanism based on formal models to deal with resource failures in HMS. In addition, a simulation system is developed to verify the proposed reconfiguration mechanism.

Resources may fail at any point in time, take place in any holarchy and change its characteristics and reduce the set of available resources. The effects of resource failures may propagate from one holon to another. Development of an effective method to analyze the impact of resource failures on the operation of HMS and design reconfiguration mechanism based on the analysis is a significant issue. In HMS, a set of holons that autonomously cooperate to achieve a goal forms a holarchy. For some types of tolerable resource failures, the operation of a holarchy may still be maintained without reconfiguration. Hsieh quantitatively char-acterized the fault tolerant properties of HMS ( Hsieh, 2008b ). As long as the fault tolerant condition is satisfied, the operation of HMS can be maintained without reconfiguration. Hsieh also studied how to design and analyze reconfiguration mechanisms by taking advantage of the holonic system architecture ( Hsieh, 2009b ). To study the reconfiguration mechanism, Hsieh defined a holarchy reconfiguration problem (HRP) and an impact function to characterize the impact of resource failures on a holarchy and studied the condition for the existence of a solution to HRP. A solution methodology that combines CNP ( Smith, 1980 ) with Petri nets ( Murata, 1989 ) for HRP was proposed. However, implementation issue has not been addressed in Hsieh (2009b). The aforementioned results pave the way for the development of an effective reconfiguration mechanism.

Finding a solution from scratch at the point resource failures occur is not an appropriate approach as it may lead to chaos at the shop floor. An effective reconfiguration mechanism must be based on the nominal solution so that the impact on the operation of the existing activities can be significantly reduced. To achieve an effective reconfiguration in HMS, a viable reconfigura-tion mechanism based on the interactions and cooperation between holons is proposed. Although this paper focuses on the development of reconfiguration mechanism to deal with removal of holons, the algorithm can be tailored for addition of holons.

As the proposed implementation of reconfiguration mechan-ism is based on the theoretical results proposed in Hsieh (2009b) , the solution methodology combines CNP ( Smith, 1980 ) with Petri nets ( Murata, 1989 ). The first requirement for the implementation of our reconfiguration mechanism is the infrastructure for publishing and discovering services of holons and the support of
CNP. The holonic reconfiguration mechanism can be implemented using the agent technology ( Nilsson, 1998; Ferber, 1999 ), which is appropriate to implement modularity, decentralization, reuse and complex structures characteristics ( Mar X   X  k et al., 2002 ). The
Foundation for Intelligent Physical Agents ( FIPA )( http://www. fipa.org) is a standards organization that promotes agent-based technology and the interoperability of its standards with other technologies. Java Agent Development Framework (JADE), which is a FIPA-Compliant ( http://www.fipa.org) agent platform that supports services publication and discovery, is adopted in this paper. Another requirement in implementation is the representation of Petri nets of individual product holons and resource holons. Petri Net Markup Language (PNML) ( Weber and
Kindler, 2003 ) is a standard for representing Petri nets. PNML is adopted to represent the Petri nets of individual product holons and resource holons. The behaviours of holons in JADE is based on composition of the PNML files of individual product holons and resource holons and parsing it to the corresponding Petri net model.
 The remainder of this paper is organized as follows. In Section 2, the holarchy formation problem in HMS is introduced.
In Section 3, a problem solving architecture for the holarchy reconfiguration problem is proposed. Petri net models of holarchies are introduced in Section 4. In Section 5, holarchy reconfiguration problem is studied. In Section 6, a reconfiguration mechanism is proposed and a simulation system is developed to verify reconfiguration mechanism. Section 7 concludes this paper. 2. Holarchy formation
The dynamics and behaviours of HMS are determined by the interactions of resource holons, product holons, and order holons.
A resource holon consists of a production resource with relevant components to control the resource. A product holon contains the production process information to manufacture products. An order holon represents an order. In HMS, a holon can be part of another holon A holon that consists of a set of holons is called a composite holon. A system of composite holons that can autonomously cooperate to achieve a goal forms a holarchy.
Individual product holons or resource holons cannot process a complex task alone. To process an order, a set of resource holons and product holons form a holarchy.

Fig. 1 illustrates an example in which three order holons negotiate with the product holons and resource holons in a HMS.
The results of negotiation are represented by a number of holarchies.

Fig. 2 illustrates a holarchy formed by Order holon 1, Product holon 1, Product holon 3, Product holon 4, Product holon 6,
Product holon 9, Resource holon 1, Resource holon 2, Resource holon 3, Resource holon 6, Resource holon 8, Resource holon 9,
Resource holon 10 and Resource holon 11 to meet the order requirements.

Holarchy formation problem has been studied in ( Hsieh, 2008a ), where Hsieh proposed models and developed collabora-tive algorithms to guide the holons to form a holarchy that coherently move toward the desired goal state ultimately.
However, implementation of the collaborative algorithms pro-posed in ( Hsieh, 2008a ) require further study. The objective of this paper is to propose an architecture for the development of a problem solver for holarchy reconfiguration in HMS based on the theoretical study in Hsieh (2008a, 2009b) . A methodology to design a problem solving environment based on FIPA-compliant platforms is proposed in this paper.
 composite holons that provide parts to it and also a set of resource holons that are required to execute the operations.
Therefore, a composite holon formed for product holon h n denoted by c n ( U n , R n )( Hsieh, 2008a ), where U n denotes the set of composite holons on which c n depends and R n denotes the set of resource holons that constitutes c n . The structure of c determined by solving a set of holarchy optimization problems ( Hsieh, 2008a ) described below. Let U n denote the set of potential upstream composite holons of c n . Let R n denote the set of potential resources holons. Optimization of the cost of c done by finding the minimal cost resource holons and the composite holons that result in a feasible solution. Let h a resource holon, where r A R n . Let w r be the cost to perform the activities by h r . Let w n denote the cost function that specifies the cost of c n ( U n , R n ). The holarchy optimization problem is stated as follows:
Holarchy optimization problem (HOP): straints that c n ( U n , R n ) is feasible, R n D R n and U
A holarchy is formed by solving HOP. A solution of HOP based on CNP ( Smith, 1980 ) has been proposed in Hsieh (2008a) , where product holon h n acts as the manager whereas resource holon h r A
R n and composite holons c n 0 , n 0 A U n , acts as bidders. A resource holon h r , r A R n , may submit a proposal p r  X  X  r , p t product holon h n to indicate its ability to execute the required operations and the cost to execute them, where p t r  X  a  X  r  X  is the resource type of h r , a ( r ) is a function that maps r A corresponding resource type, p c r is the cost to perform the activity p a by h r and p q r is the number of resources to be allocated by h
A potential composite holon c n 0 , where n 0 A U n plays the role of a bidder and submits a proposal p n u  X  X  n u , p p n u , p c holon h n , p p n u is the type of parts provided by c n 0 perform the activities by c n 0 to provide parts to h n and p the resources that have been allocated to c n 0 . The world model of agents is described based on the state of the system as follows. Let
S denote the system state. Let P n denote the set of all proposals submitted to h n under state S . As direction interaction is adopted in this paper, the information available to the agents is P on P n , the agent constructs its world model in Petri net for the purpose of deliberation. Construction of the Petri net will be detailed in Section 4. A holarchy is formed by a solution of HOP based on P n under state S .

HOP only addresses the holarchy formation problem. An effective reconfiguration mechanism must be developed to deal with resource failures carefully. Otherwise, the operation of HMS may be crippled and the performance will degrade. The key design issues are to identify the holons in the holarchy affected by resource failures and replace the holons in the holarchy with alternative holons, while retaining the rest of the holarchy. We formulate a holarchy reconfiguration problem (HRP) in Section 5 based on HOP to cope with the changes in HMS. Given a nominal solution c n  X  U n , R n  X  to HOP under a given state S , HRP aims at finding a solution based on the proposals P n ( S 0 ) submitted under the state S 0 that reflects the changes due to resource failures. 3. An implementation architecture
Fig. 3 shows the architecture of the proposed design methodology in which a negotiation protocol based on Petri nets are used. Fig. 3 only illustrates the negotiation processes between order holons, product holons and resource holons. Actually, there is a connection between order holons and resource holons in the execution phase to make order holons request the resource holons to start execution. To develop a problem solver for HMS, each holon must be able to discover the services provided by other holons, publish its services and interact with other holons as needed so that other holons may discover and invoke the required services to find a solution. A requirement for the implementation of reconfiguration mechanism is the infrastructure for publishing and discovering services of holons and the support of CNP.
 JADE is a FIPA-compliant Agent Platform that supports CNP. JADE also includes the Directory Facilitator (DF) for services publication and discovery. DF is an agent which provides a  X  X  X ellow pages X  X  directory service for the agents. It stores descrip-tions of the agents and the services they offer. Agent Commu-nication Language (ACL) is a language with precisely defines syntax, semantics and pragmatics that is the basis of commu-nication between independently designed and developed soft-ware agents. Interactions between order holons, product holons and resource holons are via FIPA-ACL
To realize the proposed implementation architecture, JADE is adopted. Fig. 4 illustrates the proposed architecture to develop a problem solver for HMS based on JADE.

The design of order holon, product holon and resource holon is specified by class diagrams in UML as shown in Fig. 5 . An order holon must implement request() and award() methods to issue  X  X  X equest for tender X  X  and  X  X  X warding of contract X  X  messages to the potential product holons. Similarly, a product holon must implement request() and award() methods to issue  X  X  X equest for tender X  X  and  X  X  X warding of contract X  X  messages to the potential product holons or resource holons, respectively. In addition, a product holon must implement propose() and establish() methods to submit proposals and establish contracts with other holons, respectively. A resource holon always plays the role of a bidder, therefore only propose() and establish() methods need to be implemented.

To make a holon discover the services provided by other holons, the holon must interact with the DF Agent. DF is an agent that communicates with other agents using FIPA-ACL. An agent wishing to publish one or more services must register with DF.
When an agent registers with DF it must provide a description (implemented by the class DFAgentDescription) and call the Order Holon Product Holon Resource Holon +request() +award() -id : string(idl) -product_type : string(idl) -quantity : int -issued_date : Date register() static method of the DFService class. The description is basically composed of the agent AID, a collection of service descriptions implemented by the class ServiceDescription, in-cluding the service type, the service name, the languages, ontologies and interaction protocols that must be known to exploit the service and a collection of service-specific properties in the form of key-value pair.
 type of parts (the output type) to provide to the downstream product holons or order holons. In invoking the register() method, the service type is set to  X  X  X roduct X  X  whereas the service name is the output type provided by the product holon. A downstream product holon will invoke the search() method provided by DF
Agent to look for the potential upstream product holons that can provide the required input parts (the input types). The order holon will also will invoke the search() method provided by DF
Agent to find the potential product holons that can provide the required products.
 activity that can perform. In invoking the register() method, the service type is set to  X  X  X esource X  X  whereas the service name is the activity that can be performed by the product holon. A product holon may invoke the search() method provided by DF
Agent to look for the potential resource holons that can perform the required activity.
 negotiation between Order Holon 1 and the product holons is shown in Fig. 6 . Order Holon 1 issues a  X  X  X equest for tender X  X  message to Product Holon 1 and Product Holon 2. Product Holon 1 in turn sends a  X  X  X equest for tender X  X  message to the upstream holons: Product Holon 3 and Product Holon 4. Product Holon 3 and Product Holon 4 issue  X  X  X equest for tender X  X  messages to Product Holon 6 and Product Holon 9, respectively. Similarly, Product Holon 2 sends a  X  X  X equest for tender X  X  message to Product
Holon 5. After sending the  X  X  X equest for tender X  X  messages, the product holons wait for the  X  X  X ubmission of proposal X  X  messages from the bidders. For example, Product Holon 4 waits for the proposal submitted by Product Holon 9 and Product Holon 3 waits for the proposal submitted by Product Holon 6. Based on the proposals submitted by the upstream holon, a product holon submits its proposal to the downstream holon. For example,
Product Holon 3 submits its proposal to Product Holon 1 based on the proposal submitted by Product Holon 6. Also Product Holon 4 submits its proposal to Product Holon 1 based on the proposal submitted by Product Holon 9. Similarly, Product Holon 1 submits its proposal to Order Holon 1 based on the proposals submitted by Product Holon 3 and Product Holon 4.

Note that the interactions between product holons and resource holons are not shown in Fig. 6 . Fig. 7 shows the interactions between Product Holon 6 and Resource Holon 9 to acquire the required resources.

We develop algorithms for order holons and product holons to decide whether to accept or reject the proposals. To analyze the feasibility of the proposals and determine the best ones, we introduce Petri net models to capture the workflows of product holons and activities of resources holons. 4. Model based negotiation
To facilitate negotiation between order holons, product holons and resource holons, formal models for product holons and resource holons are proposed. To capture the synchronous/ asynchronous and concurrent activities in HMS, Petri nets are adopted as the modelling tool. To support the decisions of product holons, a workflow model for each product holon and resource activity models for each resource holon are constructed. A requirement in implementation is the representation of the Petri nets of individual product holons and resource holons. PNML ( Weber and Kindler, 2003 ) is a standard for the representation of Petri nets. Therefore, PNML is adopted to represent the Petri nets of individual product holons and resource holons. In implementa-tion, the workflow models for each product holon and resource activity models for each resource holon are represented in the PNML format. Therefore, any Petri net editor that supports PNML format can be used to construct the workflow models for each product holon and resource activity models for each resource holon. For example, WoPeD ( www.woped.org ) is a Petri net editor that supports PNML format.

A brief introduction to Petri net is given first. A Petri Net (PN) ( Murata, 1989 ) G is a five-tuple G  X  ( P , T , I , O , m finite set of places, T is a finite set of transitions, I transition input arcs, O D T P is a set of transition output arcs, and m 0 : P -Z 9 P 9 is the initial marking of the PN with Z as the set of nonnegative integers. A Petri net with initial marking m 0 denoted by G ( m 0 ). A marking of G is a vector m A Z 9 P 9 the number of tokens in each place under a state. t denotes the set of input places of transition t . A transition t is enabled and can be fired under m iff m  X  p  X  Z I  X  p , t  X 8 p A t . Firing a transition removes one token from each of its input places and adds one token to each of its output places. A marking m 0 is reachable from m if there exists a firing sequence s bringing m to m 0 . The reachability set R ( m 0 ) denotes all the markings reachable from m been reached from m 0 , it is possible to ultimately fire any transition of G by progressing through some further firing sequence.
 Definition 4.1. The workflow of product holon h n is an acyclic marked graph H n  X  ( P n , T n , I n , O n , m n 0 ). As each transition represents a distinct operation in a task, T j \ T k  X  F for j
A product holon h n may provide parts to other product holon via a set of terminal output places and may accept parts from other product holons via a set of terminal input places defined as follows.
 Definition 4.2. A place without input transition but with at least one output transition in product holon h n is called a terminal input place. A place without output transition but with at least one input transition in product holon h n is called a terminal output place. h n is used to denote the set of terminal input places of h n and h n is used to denote the set of terminal output places of h n .
 Fig. 8 (a) shows the workflow of product holon h 4 .

An activity is a sequence of operations to be performed by a certain type of resources. G n denotes the set of resource types required to perform the operations of h n . Let g denote the idle state place of type-g resources. The k th activity is described by either a circuit place that starts and ends with an idle state place g or a directed path that starts with an idle state and end with a non-idle state place in Petri net. A circuit indicates that the resource activity includes resource allocation and de-allocation.
A directed path indicates that the resource activity includes either resource allocation or de-allocation but not both. The Petri net model for the k th activity for type-g resources, where g described by a Petri net H k g as follows.

Definition 4.3. Petri net H k g  X  m k g  X  denotes the k th activity for a type-g resources, where g A G n . There is no common transition between H k g and H k u g for k a k 0 .

Let K g be the number of activities of type-g resources involved activity IDs in H n . The initial marking m k g is determined based on the set P n of proposals submitted to product holon h n . resource idle state place. Fig. 8 (b) shows three resource activities of product holon h 4 .

To capture the interactions between product holon h n and the resource holons, the workflow and resource activities Petri nets associated with h n are combined into a new Petri net C n by merging common places, transitions, or arcs. The Petri net model C n  X  m n , u n  X  X  : g , m k g  X  D H k g denotes the subnet of H k g denotes the subnet of H k consisting of all the common transitions between H k g and H the associated input/output places and arcs.

Fig. 8 (c) illustrates the Petri net C 4 associated with product holon 4 in Fig. 2 . Fig. 8 (d) shows the state reached from Fig. 8 (c).
Fig. 9 shows the flow chart to construct Petri net based on PNML models.

A cost function w r : [ k A O g resource holon h r , r A R n , to describe the cost to fire a transition, where R + denotes the set of positive real values. The cost to activities H k g , k A O g n , submitted by resource holon h
S perform all the activities specified in H k g , k A O g n
S c ( U
The holarchy optimization problem (HOP) is formulated based on the Petri net model C n ( m n , u n ) as follows. min
S s : t : c n  X  U n , R n  X  is feasible , R n D R n and U n D
Based on the Petri net models, the collaborative algorithms proposed in Hsieh (2008a) , which have been proven to find the minimal cost solution, are implemented in product holons and resource holons to form a holarchy. Fig.10 shows the flow chart of the collaboration algorithm for a product holon. Let P n denote the set of all proposals submitted by the potential composite holons and resource holons to the manager h n . The algorithm first finds the resources that can be acquired from the resource holons based on P n and the minimal resource requirements of a product holon based on C n to determine the feasibility of the problem (Property 5.2, Hsieh, 2008a ). If the minimal resource requirements are satisfied, the algorithm then finds the minimal cost solution, constructs a proposal and submits the proposal to the manager of the product holon. 5. Holarchy reconfiguration
To accommodate changes in holons, we formulate a holarchy reconfiguration problem. If no resource fails in the course of performing the operations in a holarchy, all the operations will be finalized and terminated normally. However, resource failures in
HMS may make it impossible for the resource holons to carry out all the operations. The effects of the change may propagate from one holon to another. An effective reconfiguration mechanism must be developed to deal with resource failures carefully.
Otherwise, the operation of HMS may be crippled and the performance of HMS will degrade. An effective reconfiguration strategy is to replace the parts of the holarchy related to c other alternative holons, while retaining the rest of the holarchy.
A holarchy reconfiguration problem (HRP) to cope with the changes in HMS is formulated. Given a nominal solution c n to HOP under a given state S , HRP aims at finding a solution based on the proposals P n ( S 0 ) submitted under the state S 0 that reflects the changes due to resource failures. 5.1. Holarchy reconfiguration problem (HRP) that c n ( U n 0 , R n 0 ) is feasible, R n 0 D R n 0 and U
R  X  { r 9 p r A P n ( S 0 ), h r is a resource holon} is the set of potential the set of upstream composite holons under S 0 .

Finding a solution from the scratch at the point resource failures occur, is not an appropriate approach as the solution may lead to chaos at the shop floor. An effective approach to HRP must be based on the nominal solution c n  X  U n , R n  X  of HOP so that the impact on the operation of the existing holons can be significantly reduced. To achieve effective reconfiguration, a viable solution to
HRP must be based on cooperation of holons in distributed computing architecture. Whenever an event causing a change in system state, the set of holons involved in a reconfiguration process can be classified into four types of holons: detector, initiator, standby and optimizer. A detector is a resource holon that detects resource failures. An initiator is a composite holon that consists of the detector and whose operation will be blocked eventually due to the resource failures. An initiator will forward standby requests to the upstream composite holons, which are called standby holons. Standby holons will in turn forward standby requests to the upstream composite holons, which are also called standby holons. A standby holon is a composite holon which stays in standby state and may attempt to submit a proposal and establish a contract with another downstream composite holon, again within a time period. If no new contract is established between a standby holon and another composite holon by the time period, standby holon will successively restore their resources back to the idle states. An optimizer is the downstream holon of the initiator. Its function is to find the optimal configuration based on the remaining resources.
Fig. 11 (a) shows a scenario in which resource holon 2 failed and makes c 4 unable to terminate the tasks. For the reconfiguration process in Fig. 11 (a) X (c), we observe that product holon 4 received an initiator identification request from resource holon 2, which detected resource failures. After identifying itself to be an initiator, product holon 4 requests product holon 9 to cancel the contract. On receiving the contract cancellation request, product holon 9 confirms to product holon 4 the cancellation and becomes a standby holon. Fig. 11 (b) shows the configuration after the contract has been cancelled. The reconfiguration mechanism then proceeds to Fig. 11 (c) to perform the optimization process. The initiator product holon 4 sends an There is atleast one feasible upstream optimization request to the primary optimizer product holon 1, which issues an optimization request to product holon 5 in turn to reconfigure the system. Fig. 11 (c) shows the reconfigured holarchy H 0 .

The aforementioned reconfiguration mechanism can be ap-plied to deal with addition of holons. Suppose the operation of product holon 4 is restored due to recovery of resource holon 2. It will request product holon 1 to act as the primary optimizer to perform the optimization process. Suppose the solution found by product holon 4 has lower cost than that found by product holon 5. The contracts with product holon 1 and product holon 5 and all the contracts established between the upstream holons are cancelled and are replaced by the contracts with product holon 4, product holon 9 and resource holon 2. As the reconfiguration mechanism to deal with removal and addition of holons is similar, this paper will concentrate on the reconfiguration mechanism for handling removal of holons only. 6. Implementation of reconfiguration mechanism
To realize our proposed scheme for reconfiguration, initiator and standby holons must be identified dynamically. An impact function is defined to facilitate identification of initiator and standby holons. To achieve this goal, a formal Petri net model is proposed to determine whether a holon is an initiator or standby Order
Holon Order
Holon 1 holon. Resource failures in composite holon c n can be represented by a perturbation d n in marking m n of C n . Depending on d impact on a holarchy C n varies. To characterize the impact of resource failures d n , the following definition is needed.
Definition 6.1. Let N A denote the set of composite holons that form a holarchy A by applying the collaborative algorithms. Suppose there exist control policies u n 8 n A N A such that C n can be kept live under u control policies u n 0 8 n A N A such that C n 0 canbekeptliveunder u marking m n 0 after removing d n from m n .
 the upstream of X are characterized first.
 based on C n as follows.

Definition 6.2. AC n is obtained by splitting each resource idle state place g in C n into a resource allocation place g k resource de-allocation place g k o for each resource activity k . The marking ~ m n of AC n satisfies: ~ m n  X  p  X  X  a p is the number of tokens representing the completed tasks that will be put in place p by the upstream holons of C n and
To compute the number of tokens that will return to an idle state place in AC n for each type of resources, we define a token flow path as follows.

Definition 6.3. A token flow path l consists of the sequence of places in a directed path of AC n . L n ( p ) denotes the set of token flow paths in AC n ending with place p . The total number of tokens in l of AC n under ~ m n is denoted as l  X  ~ m n  X  X  S p A l ~ m means that p is a place in l .

Property 6.1. PR n  X  g , ~ m n  X  X  S k A O g number of type-g resources potentially released from ~ m Example 1. For AC 4 in Fig. 12 , we have
PR 4  X  g , ~ m 1  X  X  S
Property 6.2. ( Hsieh, 2009b ): If PR n  X  g , ~ m n  X  Z K n A N A , there exists a control policy under which C n is feasible 8 n A N A .

Definition 6.4. X  X f n u 9 d n u 4 0 , n u A N A g \ f n u
Example 2. Consider Fig. 12 . Suppose d 4 , d 4 ( p 2 )  X  1 and d 0 8 p a p 2 . In this case, X  X  {4}.

Definition 6.5. I  X  d n , C n u  X  X  set of holons in the upstream of X .

I  X  d n , C n u  X  provides a way to determine whether a holarchy C an initiator with respect to a given failure d n .
 The reconfiguration algorithm is based on the impact function
I . The impact function I  X  d n , C n u  X  characterizes whether a composite holon C n 0 is influenced by d n .If I  X  d n , C n u  X  X  0, d the operation of composite holon C n 0 . In this case, it is not necessary to reconfigure C n 0 . Each composite holon C n 0
I  X  d n , C n u  X  X  1 must be reconfigured properly. Otherwise the com-posite holon may be blocked eventually.

Fig. 13 illustrates the flow chart to identify an initiator and notify standby based on the impact function I  X  d n , C n u  X  , which is in turn calculated based on the Petri net model of the composite holon.
Fig. 14 illustrates the flow chart to process a standby request and notify standbys. The flow chart to optimize process is illustrated in Fig. 15 .

A simulation environment based on JADE is developed to verify our results. JADE is a middleware that facilitates the development of multi-agent systems. The simulation environment consists of a Holonic System Editor and a Holonic System Simulator. The Holonic Editor is used to define holons, whereas the Holonic System Simulator is used to simulate the interactions between holons and display the reconfiguration processes and outcomes. Fig. 16 shows a snap shot of the system.
 Example 3. Fig. 16 shows the holons defined in the system, for the example in Fig. 11 (a). In Fig. 16 , 21 holons ( h 1 , h been created, where h 1 denotes an order holon, h 2 , y , h the product holons and h 11 , y , h 21 denotes the resource holons. The properties of order holon h 1 include product type, product quantity and due date. The characteristics of each product holon are specified by its workflow model, which is described by Petri net and is represented by the corresponding PNML file. The function of a resource holon is specified by the resource type and the corresponding resource activity model described by a PNML file. Fig. 16 shows a holarchy which consists of h 1 , h 2 h , h
To illustrate the proposed reconfiguration mechanism, suppose resource holon h 12 failed. In this case, h 5 will receive an initiator identification request. Holon h 5 computes the impact function according to Example 2 and identifies itself to be an initiator. Initiator h 5 requests h 10 to cancel the contract as shown in
Fig. 17 (a). Initiator h 5 then notifies h 2 to act as an optimizer to reconfigure the holarchy. In Figs. 17 (a) and 17 (b), h 12 and h 5 is an initiator, h 10 is a standby and h 2 is an optimizer.
Generally, Fig. 17 (a) shows the interactions between the initiator and standby. Fig. 17 (b) illustrates the interactions between the initiator, optimizer and standby. As a result, h 2 establishes a new contract with h 6 after the cancellation of the contract with h
Fig. 18 shows the new holarchy obtained by applying our reconfiguration mechanism. The new holarchy consists of holons h , h , h 4 , h 6 , h 7 , h 10 , h 11 , h 13 , h 14 , h 15 , h 16 been replaced by h 6 . Resource holons h 12 , h 18 and h 20 replaced by h 14 , h 15 and h 17 .

In case more than one holon are identified to be initiators, each initiator will follow a procedure similar to the case with only one initiator. The major difference is that there may exist resource contention among the holons. If there exists sufficient resources, the holons may share the resources. Otherwise, the resources will be assigned to the holons with higher priority. To illustrate how the reconfiguration mechanism deals with the cases of multiple initiators, the simulation for the following example is conducted.
Example 4. Fig. 19 (a) shows the 24 holons ( h 1 , h 2 , y for this example, where h 1 and h 2 are order holons, h 3 denote the product holons and h 13 , y , h 24 denote the resource holons. There are two holarchies formed in Fig. 19 (a). One holarchy consists of h 1 , h 3 , h 5 , h 6 , h 7 , h 8 , h
Another holarchy consists of h 2 , h 4 , h 10 , h 12 , h 19
Suppose h 17 and h 19 failed. In this case, h 8 and h 12 are the initiators. Holon h 8 requests h 17 to cancel the contract and h requests h 19 to cancel the contract. Holon h 8 then notifies h as an optimizer to reconfigure the holarchy. Similarly, holon h notifies h 10 to act as an optimizer to reconfigure the holarchy.
Holon h 6 and holon h 10 must find an alternative holon to replace h and h 12 , respectively. Suppose there is only one holon h 11 that can provide compatible parts to holon h 6 and holon h 10 . In this case, holon h 6 and holon h 10 will compete with each other for holon h product holon for each part type There is atleast one feasible upstream 7. Conclusion advantage of the flexible architecture of HMS to deal with uncertainties such as resource failures. Although HMS have been proposed and extensively studied for over a decade, only a few results address the development of effective reconfiguration mechanisms for HMS. The goal of this paper is to propose a systematic methodology to develop and implement reconfigura-tion mechanism to deal with resource failures in HMS. An effective approach to reconfiguration must be based on the nominal solution to avoid chaos at the shop floor. To study the reconfiguration mechanism, we define a holarchy reconfiguration problem (HRP). The theoretical study in ( Hsieh, 2009b ) paves way for the development of an effective reconfiguration mechanism with predictable performance for HMS.
 based on the distributed architecture of HMS and cooperation of holons to reconfigure the system to deal with major resource failures, while avoiding chaos at the shop floor. It relies on the interactions and cooperation between four types of holons: detector, initiator, standby and optimizer. A detector is a resource holon that detects resource failures. An initiator is a composite holon that consists of at least one detector, and its operation will be blocked eventually due to resource failures. An impact function is defined based on the Petri net models of a holon to facilitate identification of an initiator. An initiator will forward standby requests to the upstream composite holons, which are called standbys. Standby holons will in turn forward the standby requests to the upstream composite holons which are also called standbys. A standby is a composite holon that has just cancelled the contract with the initiator, stays in pending state and may attempt to submit a proposal and establish a contract with another downstream composite holon again. If no new contract is established between a standby and another composite holon within a time period, the standby will successively restore their resources back to the idle states. An optimizer is the downstream holon of the initiator. Its function is to optimize the configuration based on the resources available. If application of the collabora-tive reconfiguration mechanism leads to a solution, the resulting reconfigured system has minimal cost.

The implementation methodology proposed in this paper combines the theoretical results proposed in Hsieh (2009b) , CNP ( Smith, 1980 ), Petri nets ( Murata, 1989 ) and PNML ( Weber and
Kindler, 2003 ). A simulation environment based on JADE is developed to verify the results and illustrates it by an example.
This paper is differentiated from the works of Leit ~ ao et al. ( Leit ~ ao et al., 2003; Leit ~ ao and Restivo, 2006 ) in several aspects. Leit ~ ao et al. contributed to the development of a dynamic and adaptive control approach that improves the agility and reaction to unexpected disturbances by taking advantage of the flexibility offered by HMS without compromising the global optimization.
The self-organization adaptation mechanism proposed by Leit ~ ao et al. introduces the concept of autonomy factor and a pher-omonen-like spreading mechanism to propagate emergence and reorganize the system. The approach of this paper is different from the one adopted by Leit ~ ao et al., in that it checks whether resource failures are tolerable. If the resource failures are tolerable, no reconfiguration is required. Otherwise, only the holons influenced by the resource failures will be notified by a standby request. In addition, as the proposed strategy achieves reconfiguration cost effectively based on the nominal solution, it minimizes the impact on existing tasks and avoids chaos in the shop floor. This paper is also different from ( Hsieh, 2008a ), in that we focus on reconfiguration issue of HMS. It is also different from ( Hsieh, 2009b ) as it concentrates on implementation of reconfi-guration mechanism instead of theoretical development. This paper is different from Barata et al. (2008) as we concentrate on the development and analysis of collaborative reconfiguration mechanisms for HMS.

The effects of resource failures in a holarchy may propagate from one holon to another. Development of an effective method to analyze the impact of resource failures on the operation of a holarchy is a significant issue. For some type of resource failures, the operation of the holarchy can still be maintained without reconfiguration. For others, design of effective reconfiguration mechanism to identify the parts of the holarchy influenced by the failures and replace them with alternative holons is required. The approach proposed in this paper endows the holons in a holarchy to identify whether they are or will be influenced by the failures and trigger the reconfiguration process whenever necessary. The contribution and benefit of the proposed approach is that the reconfiguration procedure only replaces the holons influenced by the resource failures. Therefore, the impact on the operation of the holarchy can be minimized. Another contribution of this paper is that the influence of identification and reconfiguration processes are based on the holonic system architecture and collaboration of holons. Formal Petri net models are used in the influence of identification and reconfiguration processes to dynamically analyze the feasibility of the reconfigured holarchy. References
