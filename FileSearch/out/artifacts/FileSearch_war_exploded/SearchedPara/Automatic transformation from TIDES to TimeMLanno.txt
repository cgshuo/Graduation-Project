 Abstract Until recently, most systems performing temporal extraction and reasoning from text have focused on recognizing and normalizing temporal expressions alone, for which the TIDES annotation scheme has been adopted. Temporal awareness of a text, however, involves not only identifying the temporal expressions, but the events which these expressions anchor, as well as other events which must be ordered relative to them. Because of these broader concerns, TimeML has been developed as an annotation specification that encompasses not only temporal expressions, but all temporally relevant aspects of a text. The annotation schemes, however, are not interchangeable, resulting in incompatible corpora and accompanying extraction algorithms for each standard. In this paper, we describe an automatic migration process from the TIMEX2 tags of TIDES to the TIMEX3 tags of TimeML. This transformation procedure has been implemented and evaluated with two different corpora, obtaining 93.3 and 89.2% overall F-Measure respectively.
 Keywords TimeML Temporal information Event ordering Temporal expressions Temporal expression recognition Temporal expression normalization Natural Language Processing Annotation schemes Temporal reasoning 1 Introduction One of the most important components of fully understanding written text is the explicit and implicit temporal information associated with the propositional content of a narrative. Identifying and extracting linguistically-grounded temporal infor-mation has recently become an active area of research within the computational linguistics community (Allen 1983 , 1984 ), and is now playing a fundamental role in NLP applications such as question answering and summarization systems.

Different approaches can be taken to the problem of temporal information understanding. Some systems use rule-based approaches (Saquete et al. 2006 ), whereas others are using machine learning approaches (Saquete et al. 2008 ; TempEx 2008 ; Gerber et al. 2002 ). Choosing the appropriate approach depends on the available resources and the requirements of the systems being developed. However, whatever the approach, the output of these systems must be standardized and interchangeable, and this is why robust and usable annotation schemes have appeared (Mani et al. 2001 ; Pustejovsky et al. 2003 ).

One of the main objectives of an annotation scheme is to identify specific target elements in the text in order to capture aspects of their meaning, using a common framework for all the systems, thereby allowing them to be compared and interchanged.

This paper is structured as follows: Sect. 2 details the previous work regarding annotation standards and automatic annotation systems; Sect. 3 describes the transformation rules that permit the mapping between TIDES scheme and TimeML scheme; Sect. 4 presents the problems found in the current annotation scheme definitions; Sect. 5 shows two different evaluation scenarios for the system proposed and finally some conclusions and further work are presented in Sect. 6 . 2 Previous work Interest in annotation schemes related to temporal representation and reasoning has Message Understanding Conferences, MUC-6 ( 1995 ) (the first competition to cover temporal referring expressions) and subsequently MUC-7 ( 1998 ), which covered absolute and relative temporal expressions. These conferences defined the named entity category TIMEX in order to annotate temporal expressions.

Following this work, a new annotation scheme was developed within the TIDES program (Mani et al. 2001 ), defining the TIMEX2 tag, with the goal of interpreting temporal expression within a normalized representation of the times they denote, adopting the ISO 8601 standard ( 2004 ). In 2004, within the ACE program, the Time Expression Recognition and Normalization (TERN) evaluation workshop was held, requiring by the participation systems to detect and normalize the temporal expressions mentioned in the source data, according to the TIDES annotation standard. 1 This evaluation has been repeated since then as part of the Automatic Content Extraction (ACE) program. 2 The most important automatic annotation systems 3 using TIDES as output are: ATEL (Hacioglu et al. 2005 ), a system developed by Center for Computational Language and Education Research at the University of Colorado, implementing a machine learning approach for identifi-cation in English and Chinese; Chronos (Negri 2007 ), a knowledge-based system developed by Fondazione Bruno Kessler (FBK-irst), which is able to recognize and normalize temporal expressions in developed by the MITRE Corporation, which combines hand-coded patterns with machine learning rules to tag documents; DANTE (Mazur and Dale 2007 ), developed at the Center for Language Technology at Macquarie University, a system which performs recognition and normalization of temporal expressions in English, where the interface between various components is based on representing the local semantics of temporal expressions; TimexTag (Ahn et al. 2005 ; Ahn 2006 ), developed at the University of Amsterdam, a system applying data-driven methods for recognition and normalization tasks; and finally, TERSEO (Saquete et al. 2006 ), a system developed at the University of Alicante, which is a knowledge based system for Spanish that has been automatically extended to other languages, such as English, Italian and Catalan.

It is important to emphasize that TIDES annotation was designed to work with the broader ACE annotation scheme, which includes relationships between events and times, though only within a sentence. Therefore, in spite of the widespread use of the TIDES annotation scheme within the NLP temporal extraction community, it was necessary to capture not only the information within the sentence but also that found in the whole text, including other types of temporal information appearing in written texts that had not been captured by any annotation scheme applications, such as summarization and question answering (Pustejovsky et al. 2004 ; Saquete et al. 2004 ), where the identification and ordering of events is useful to improve the performance of such applications. Motivated by such consider-ations, the TimeML annotation scheme was developed, and has emerged as an ISO standard for annotation of events, temporal expressions and the anchoring and ordering relations between them (Pustejovsky et al. 2003 , 2005 ; Lee et al. 2007 ).
 One of the main resources using this annotation scheme is the TimeBank corpus. This corpus was manually annotated against the TimeML specification and it has already proven to be a rich resource for temporal expression and relation research (Pustejovsky et al. 2003 ; Boguraev et al. 2007 ; Mani et al. 2008 ).
 TimeML specifies four major data structures (elements) for annotation: EVENT , TIMEX3 , SIGNAL and LINK (Pustejovsky et al. 2005 ). The features distinguishing TimeML from most previous attempts at event and time annotation are summarized below: 1. Extends the expressiveness of TIMEX2 attributes; 2. Introduces Temporal Functions to allow contextually interpreted expressions: 3. Identifies signals determining interpretation of temporal expressions: 4. Identifies all classes of event expressions: 5. Identifies temporal dependencies between events and times:
TimeML adopts a surface-oriented approach to annotating temporal expressions, i.e., the TIMEX3 tag. This allows for both a flexible and highly compositional approach to interpreting temporal expressions relative to events and other temporal expressions. The syntax of a TIMEX3 span is based on the constituent structure of a particular language.

The types of relations holding among two different temporal expressions are:  X  Specification relation : Involving two temporal expressions, one of which  X  Anchoring relation : Involving two temporal expressions, one of which is  X  Conjunction relation : Involving two temporal expressions related by a
Because the TimeML annotation scheme is generally more expressive (by its scope and definition) than TIDES, there is considerable interest in the community in migrating TIDES annotation to TimeML in an automatic fashion. Similarly, there are systems adopting TimeML within an automatic temporal annotation environ-ment, that should also be able to handle the TIDES format for temporal expressions. These include: TARSQI (Verhagen et al. 2005 ) a modular system for automatic temporal annotation that adds time expressions, events and temporal relations to news texts; this system currently uses GUTime ( 2008 ) for temporal expression annotation, which extends the capabilities of the TempEx tagger while generating TIMEX3 annotations; and CU-TMP (Bethard and Martin 2007 ), which has been developed at the University of Colorado and uses machine learning for automatic annotation. To fill this gap, in the next section, we describe a migration algorithm mapping TIDES expressions into a TimeML compliant specification. 3 Transformation rules The automatic migration from TIMEX2 annotation to TIMEX3 annotation consists of two types of transformation rules. 1. Adaptation of the extent : the temporal expression extent is adapted from 2. Transformation of the attributes : TIMEX2 attributes are mapped to TIMEX3 3.1 Adaptation of the extent The extent of the temporal expression in the annotation determines where each temporal expression begins and ends. Most expressions which are considered as markable in TIDES are also considered as markable in TimeML. However, TimeML differs from TIDES with respect to the tag span in some cases. Therefore, in this section, following the outline of both TIDES 2005 guidelines 4 and TimeML 1.2.1 guidelines, 5 we map both annotation schemes for all possible types of expressions in order to properly adapt the TIMEX2 extent to the TIMEX3 extent. Besides, all the possible adaptations from one scheme to the other are clustered in a set of transformation rules. The rules are detailed below.

When annotating the span of a single temporal expression, both annotation schemes agree on the extension of the tag, which must correspond to one of the following categories:  X  Noun (including proper nouns) / Noun Phrase ( the afternoon, last summer,  X  Adjective Phrase ( half an hour long, half-hour as in a half-hour trip ).  X  Adverbial Phrase ( fairly recently ).

For these cases, the transformation rule ( Extent Under Identity ) is trivial and shown below: 1. Transforming the &lt;TIMEX2&gt; tag to &lt;TIMEX3 tid= X  X  X i X  X &gt; . 6 2. Transforming the &lt;/TIMEX2&gt; tag to &lt;/TIMEX3&gt;
Besides, there are another three types of time expressions which are dealt with in exactly the same way in both schemes, they are:  X  Appositives : An appositive to a temporal expression is considered a post- X  Range Expressions : A range expression has explicit begin and end points in its  X  Conjoined Expressions : This type of expressions specifies a Conjunction
In this type of relation, TimeML only differs from TIDES in that the longest time expression sequences may need to be split into shorter TIMEX3 expressions. For instance, in the expression: six months or a year from now . TIDES will produce two TIMEX2 tags, one for six months and another one for a year from now . However, TimeML will mark up now separated from a year , due to the fact that six months also refers to (from) now (see anchoring relation explained later for the transformation process applied here).

Nevertheless, one of the main differences between TIMEX2 and TIMEX3 is the extension of the expression when there is a syntactic embedding of one temporal and event expression within another. These complex expressions are divided into three groups according to TIDES 2005 guidelines: (a) When to Create One Tag, (b) When to Create Multiple Tags, with Embedding, and (c) When to Create Multiple Tags, without Embedding.

Next, the three groups are analyzed and mapped to TimeML.  X  When to Create One Tag in TIDES corresponds with expressions denoting a  X  When to Create Multiple Tags, with Embedding in TIDES usually  X  When to Create Multiple Tags, without Embedding in TIDES is applied
In both guidelines, temporal expressions containing postmodifiers, are also presented. In the case of adverbial postmodifiers, such as: ago , both schemes will tag them as part of the markable expression.

The difference arose in event-anchored temporal expressions, such as: the day after the meeting . Due to the fact that TimeML considers and annotates events as different temporal elements in the annotation scheme, the rule for transforming this type of expressions to TimeML will consist in reducing the extent of the tag to the temporal expression without the event and the preposition relating the temporal expression and the event (see example (7)). (7) a. The firefighters came home five days after the fire.
This transformation process is called Extent Pruning and consists of the following steps. 1. Transforming the 1st &lt;TIMEX2&gt; tag to &lt;TIMEX3 tid= X  X  X i X  X &gt; . 2. Determining the SIGNAL linking the temporal expression with the event. In
Following the analysis of all the possible temporal expressions that would appear in a TIMEX2 annotated text, the T2T3 transducer performs as follows: 1. Given each TIMEX2 annotated expression, the transducer determines the type of 2. Once the type is determined, the corresponding transformation rule is found 3.2 Transformation of the attributes The attributes of the temporal tags encode the specific semantics of markable temporal expression, including the temporal reference itself. Determining the value for these attributes is a process known as normalization. Regarding the transfor-mation rules for the attributes, in this work the rules for each attribute of TIMEX3 tag will be specified separately.
 Attribute tid This attribute is a unique ID number for each temporal expression. It has already been annotated in the transformation process of the extent of the expressions defined in Sect. 3.1 .

Attribute type The TIDES annotation scheme does not define a type attribute, but the value of this attribute can be inferred from the value of some of the attributes of the TIMEX2 tags. The Type Assignment rule defines the steps that must be followed to infer the type value of the expression. The steps must be performed in the order established in the rule and once one of the steps is applied, the process must complete. 1. If the &lt;TIMEX2&gt; tag has a SET attribute which value is  X  X  X ES X  X , then 2. If the VAL attribute of the &lt;TIMEX2&gt; tag starts with  X  X  X  X  X , then type= X  X  X URA-3. If the VAL attribute of the &lt;TIMEX2&gt; tag contains a  X  X  X  X  X , then type= X  X  X IME X  X  4. In any other case, type= X  X  X ATE X  X  must be added to the TIMEX3 tag.

Attribute value The attribute value is equivalent to the VAL attribute in TIMEX2 in most cases. Therefore, in general, it is only necessary to transform the name of the attribute, with the content of the attribute remaining the same.

However, there is an exception to this rule in the case of time-anchored expressions. Whereas in TimeML, the value of the head expression is always a period, according to TIDES 2005 guidelines, there are two different types of time-anchored expressions: (a) Anchored point expressions (see example (8)) and (b) Anchored duration expressions (see example (9)). (8) a. I am leaving on vacation two days from today. (9) a. The meeting has been three hours today.
For the case of anchored duration expressions, as it can be seen in example (9), the general rule for value is applicable. However, this is not the case for anchored point expressions (see example (8)). Therefore, when the T2T3 transducer detects one of these anchored point expressions, where the value from TIDES to TimeML differs, it will perform the following steps: 1. Using the VAL value of the head expression (example (8).b: two days from ) and 2. The period obtained will be assigned to the value attribute of the head 3. The value attribute of the second expression remains the same (example (8).c: 4. The original VAL attribute of the head expression is used to generate an empty 5. The TIMEX3 tag of the head expression is completed with a begin and end point.
Attribute mod As in the case of the value attribute, the attribute mod is equivalent to the MOD attribute in TIMEX2 . Therefore, no transformation rule is required.

Attribute temporalFunction This is a binary attribute which expresses whether the value of the temporal expression needs to be determined via evaluation of a temporal function. This attribute does not exist in TIDES but can be inferred from the type of the expression and the expression string. In order to obtain its value, one of the following steps of the temporalFunction Assignment rule must be applied: 1. If the type= X  X  X ATE X  X  , it is necessary to parse the temporal expression string, 2. If the type= X  X  X IME X  X  , it is necessary to parse the temporal expression string, and 3. If the type= X  X  X ATE X  X  or type= X  X  X IME X  X  and the value attribute contains 4. If the type= X  X  X URATION X  X  and the value attribute contains underspecified 5. In any other case, temporalFunction= X  X  X alse X  X  must be added to the
See (10) for examples of temporalFunction attribute true: (10) a. eleven in the morning , value from expression  X  X  X 11:00 X  X , missing the
See (11) for examples of temporalFunction attribute false: (11) a. twelve o X  X lock January 3, 1984 , value from expression  X  X 1984-01-
Attribute anchorTimeID This optional attribute introduces the tid value of the time expression to which the markable TIMEX3 is temporally anchored; that is, the time expression needed in order to compute its value attribute.

To begin with, it is necessary to determine when this attribute must be added to the TIMEX3 tag. The anchorTimeID attribute needs to be added to the tag if, and only if, the type of the expression is DATE or TIME and the temporalFunction attribute is true. Otherwise, the anchorTimeID attribute does not appear in the tag. It is obvious that if the temporalFunction attribute is false, the treatment of the temporal expression itself supplies all the information needed for a value and therefore, the anchorTimeID has an empty value. In the case of DURATION expressions, due to the fact that two anchored times are needed ( begin and end point), the anchorTimeID is replaced by the beginPoint and endPoint attributes, which are explained later. Regarding SET expressions, due to the fact that they are cyclic, they will
In order to obtain the anchorTimeID value for a specific expression, two elements are necessary: (a) the date or time provided by the TIDES VAL attribute; and (b) the temporalFunction (TF) applied to this expression. Using these elements, the process to find the anchorTimeID is a recursive one, applying the temporalFunction of the expression using different reference dates until a match with the real value of the expression is found. In this procedure, a match is found when the obtained date, after processing the expression, and the provided expression value are equal. The performance starts using the date/time of the  X  X  X 0 X  X  expression (Document Date), this being the most common anchor time in expressions. If  X  X  X 0 X  X  is not a match, then the date of the closest temporal expression is used. For instance, if we are analyzing the expression  X  X  X 4 X  X  and the  X  X  X 0 X  X  does not return a match with the temporalFunction, then  X  X  X 3 X  X  is attempted, being the previous expression to  X  X  X 4 X  X  (see Fig. 1 for the anchorTimeID Assignment definition).

For clarification, the pseudocode for anchorTimeID assignment is detailed next: 9
Attribute beginPoint and endPoint These attributes are used when a duration is anchored by one or two temporal expressions, indicating its begin and/or end points. If only one of these points is provided, the annotator can create an empty (non-consuming) TIMEX3 to represent the missing point. These attributes will appear only in DURATION expressions. Its value will be determined using the ANCHOR_DIR and ANCHOR_VAL TIDES attributes.

According to TIDES annotation scheme, the possible values of ANCHOR_DIR attribute are: STARTING, ENDING, WITHIN, BEFORE, AFTER, AS_OF. 10 The presented through illustrative examples: (12) a. for six months from March 1, 2009. (13) a. for six months until March 31, 2009. (14) a. three hours today. (15) a. I will be in Spain on vacation for three weeks. (16) a. I was in Spain on vacation for three weeks.
As shown in (14), (15) and (16), when dealing with expressions like: for three weeks, three hours today,.. ., no precise begin or end point is determined. Therefore, if the value of ANCHOR_DIR is  X  X  X ITHIN X  X ,  X  X  X S_OF X  X ,  X  X  X EFORE X  X  or  X  X  X FTER X  X , the annotation in TimeML differs from the others in its treatment. Whereas the other values of ANCHOR_DIR generate an empty TIMEX3 tag, in these cases, the beginPoint and endPoint cannot be specified, and they are substituted by a TLINK establishing a specific relation between the two TIMEX3 expressions. In the case of this type of expressions, TimeML does lose information compared to TIDES if only TIMEX3 annotation is taken into account. The capture of the real semantics of these expressions in TimeML implies the interpretation of the TLINKs also.

As a conclusion, depending on the value of the ANCHOR_DIR attribute of the expression being dealt with, there are four possible operations to be performed in order to obtain the value of the beginPoint and endPoint attributes ( begin-endPoint Assignment rule): 1. If the value of ANCHOR_DIR is  X  X  X TARTING X  X  then: 2. If the value of ANCHOR_DIR is  X  X  X NDING X  X  then: 3. If the value of ANCHOR_DIR is  X  X  X ITHIN X  X  or  X  X  X S_OF X  X , a link between the 4. If the value of ANCHOR_DIR is  X  X  X EFORE X  X  or  X  X  X FTER X  X , a link between the
Attribute quant and freq These two attributes are used in TimeML when a temporal expression is of type SET. quant is generally a literal from the text that quantifies over the expression. freq contains an integer value and a time granularity that represents the frequency at which the temporal expression regularly reoccurs. These attributes are only used if their values are supplied by the temporal expression (or by a temporal anchor).

When annotating SET expressions, the current TIDES annotation does not capture the semantics of the expressions. TIDES only gives the value that the expression refers to and the SET attribute with a true value. This type of annotation is appropriate with simple set expressions, such as every October or monthly . (17) a. every October. (18) a. annual.
As shown in examples (17) and (18), the value of the expressions for both annotations is the same, where the differences are as follows: (a) the SET attribute in TIDES is established in the type attribute in TimeML; and (b) TimeML captures the semantics of the expression with the quant attribute that denotes the type of recurrence of the expressions.

However, there are some set temporal expressions whose meaning is not captured by TIDES, due to the fact that the semantics of the expressions is ignored. One example of these expressions is the following: (19) a. twice a week.
As shown in (19), with the TIDES annotation, it is not possible to determine how frequently something is happening, which is the most important information represented in a SET expression.

In the case of a duration expression occurring within a set, TIDES annotates the expression in two separated TIMEX2 tags, but there is no annotation indicating that they are connected, again losing their semantics. TimeML, on the other hand, annotates the expression with a single TIMEX3 tag, and using the quant and freq example (20)). (20) a. three days each week.
Hence, for the transformation rule purposes, TIDES annotation does not provide any information that can be used to construct the values of the quant and expression and its syntactics and semantics must be applied. This process should be performed by TIMEX3 parsers. However, since these attributes are not reflected in TIDES and their value can not be inferred from other TIDES attributes either, in this paper, this task is beyond the scope of the T2T3 transducer and is proposed as further work. 4 Problems with the current annotation schemes definitions interoperability, some problems have been detected. These are detailed below with proposed solutions for each of them. 4.1 Culturally-determined expressions in possessive constructions The first problem with the TIDES specification appears in a possessive construction containing two temporal expressions, where the head is a Culturally-Determined Expression . As explained in the previous section, the annotation for possessive constructions involves two embedded tags. Such an annotation is shown in (21). (21) a. This year X  X  summer was unusually hot.
One TIMEX2 tag wraps the entire expression while the modifying information ( this year in the example), is specified by the second tag.

According to TIDES, however, Culturally-Determined Expressions require cultural or domain-specific knowledge for their value, and hence do not receive a VAL. An example is shown in (22b). (22) a. My cousins came to visit on Christmas.
The problem appears when both types of expressions are combined in the text, such as: next year X  X  Christmas . Following TIDES guidelines, the annotation resulting for this expression will be: (23) a. My cousins will come next year X  X  Christmas.
As shown in the example, since the value of the head of the expressions is not specified, the designation of the reference for next year is lost in the interpretation for the whole temporal expression.

In TimeML, possessive constructions are currently considered as a single temporal expression, which entails just one TIMEX3 tag in order to annotate the extension of the whole expression, as shown in example 11 (24). (24) a. My cousins will come next year X  X  Christmas.
However, this TimeML annotation is also problematic, due to the fact that the information about next year is not captured. One possible solution to this problem is to separate both expressions into two separate tags. For TimeML, the solution must also include the addition of a TLINK tag that relates both expressions with the relation IS_INCLUDED , where the  X  X  X  X  X  X  is the SIGNAL between the expressions. With this solution, there is no information missing in the annotation, and the specification relation between both expressions is also captured 12 (see (25) below). (25) a. My cousins will come next year X  X  Christmas. 4.2 Capturing the meaning of range expressions annotation schemes, each point is annotated separately, as presented in (26), since these expressions contain calendar information that cannot be fully represented in a single tag. (26) a. She served as Canada X  X  ambassador to the U.N. from 1992 through 1995.
In such range constructions, the TIDES annotation scheme cannot capture the period as a whole since the two annotated expressions cannot be related in any way. However, according to TimeML annotation, since these schemes also detect signal information, when the signals denote a range between two temporal expressions (such as from... to.. .), the annotation of this type of expressions must be completed with an empty TIMEX3 , which is used to link both expressions, capturing the meaning of duration between the begin and the end point of the range (see (27)). (27) a. She served as Canada X  X  ambassador to the U.N. from 1992 through 1995. 4.3 Two coordinated expressions anchored to a third expression Another problem is presented by the case of coordinated temporal expressions anchored to another time. For example, consider the expressions below: (28) a. six months or a year from now
In such constructions, the coordinate structure must be represented as well as the anchoring relation to the third temporal expression; e.g., both six months and a year must be evaluated relative to the anchoring expression, (from) now . TIDES cannot capture the actual relation between the expressions, as demonstrated below in (29). (29) a. six months or a year from now.
The TimeML annotation of this example does not present a problem, since both elements in the coordinate structure, six months , and a year are independently tagged, and each of them is linked to the third expression now with its own TLINK relation. 13 4.4 Missing anchoring information in TIDES When a temporal expression in TimeML does not contain sufficient information (without using context) to specify the value attribute, a temporal function is applied to determine the complete value of the expression. This means the expression needs to be anchored to another one in order to compute the final value, and this information is stored in TimeML as the anchorTimeID attribute.

When the same situation arises using a TIDES annotation, there is insufficient information to recover the value of the expression, and the semantics of the relative temporal expression is lost. The final value of an expression is very useful in applications making use of such information to improve their performance, such as question answering or summarization. However, in machine learning systems, the annotation (with or without values) is another feature on which to train the algorithm. Having a final value without any indication of how to obtain it is not of much use to such systems. This is where the anchorTimeID attribute is an advantage. In this respect, TimeML provides a more transparent annotation for applications using Machine Learning approaches. 4.5 Event-anchored temporal expressions In the classification of temporal expressions as defined by TIDES, Event-Anchored temporal expressions are those in which, in order to obtain a value, it is necessary to know the time of an event. The extent of this type of expressions involves both the temporal expression and the event within a single TIMEX2 tag; it receives a value if it can be determined based on the information available in the document, but not by using world knowledge.

The TERN training corpus contains 136 temporal expressions which are event expressions (including holidays). This amounts to 1.69% of the total number of temporal expressions in the corpus. 45 of these are holiday expressions, such as Christmas . The 90 temporal expressions left within this group (1.11% of the total) are Event-Anchored temporal expressions, such as the apartheid era or the days expressions, they received an underspecified value, using  X  X  X  placeholders or no value at all, resulting in a loss of any information relating to the event itself.
TimeML overcomes this problem because such expressions are not considered a single temporal expression, but rather are parsed as a temporal expression related to an event via a TLINK. In this annotation scheme, both elements are tagged separately and considered as distinct elements. Consider the example below. (30) a. some days after the disaster.
As shown in (30c), in a TimeML annotation, since the TIMEX3 and the EVENT are annotated separately and the relation betwe en them is also annotate d, more temporal and ordering information is provided, when comp ared to TIDES. In (30b), only the granularity of the temporal expression is provided, if it can be extracted from the expression, but no information about the event or the o rdering between them is ever given. 5 Evaluation experiments The transformation rules presented in this work were implemented in a module called T2T3 Transducer. This system is free available and can be accessed online at http://gplsi.dlsi.ua.es/demos/T2T3 . In this implementation, given an input text annotated with TIMEX2 tags, the module is able to return the same text annotated with TIMEX3 tags, following the TimeML annotation guidelines (Pustejovsky et al. 2003 ). 5.1 Evaluation corpora For a comprehensive evaluation of the T2T3 Transducer, parallel corpora with TIMEX2 annotation on one side and TIMEX3 annotation on the other would be required. However, since no such parallel corpus is available, we decided to evaluate the transducer in two different environments. 1. For the first environment, a set of 50 documents from the training corpus of
Following the simple steps explained above a first parallel TIMEX2 -TIMEX3 corpus for evaluation purposes was constructed. 2. In a second environment, a subset of TIMEBANK corpus, of similar size to that 5.2 Evaluation measures For the evaluation experiments of the T2T3 Transducer, TERN metrics 18 were used. The result of aligning one reference item with one system output item (or of leaving one reference item or system output item unaligned) yields four kinds of measures:  X  CORR (Correct): The two items under comparison are considered identical.  X  INCO (Incorrect): The two items under comparison are not identical.  X  MISS (Missing): A reference has no system output aligned with it.  X  SPUR (Spurious): A system output has no reference aligned with it.

Given these measures, the following values were calculated in the alignment and final scoring:  X  POS (Possible): The number of items in the reference that contribute to the final  X  ACT (Actual): The number of items in the system output:  X  REC (Recall): The quantity of reference items that is present in the system output:  X  PREC (Precision): The quantity of system output items that is actually in the  X  F -MEASURE : The weighted harmonic mean of precision and recall: where b = 1, meaning that precision and recall are weighted equally. 5.3 First environment: results and discussion For evaluation purposes, in the first environment, the T2T3 transducer output was compared with the corpus that combines the automatically generated GUTime output with its manual revision. In the manual revision of the corpus, all the missing correct temporal annotations were added and the mistaken attributes were corrected. Results are presented in Table 1 .

A detailed analysis of the results for each evaluation aspect resulted in the following points:  X  Errors in identification and extent of the expression : Main errors in the correct  X  Errors in transformation of the attributes : The type, value, mod and 5.4 Second environment: results and discussion In the first step of the second environment, the T2T3 transducer uses the GUTime TIMEX2 automatic annotation as input, and the resulted annotation is evaluated against a subset of the TIMEBANK goldstandard corpus. Results are presented in Table 2 . It is important to consider that GUTime was benchmarked on training data from the Time Expression Recognition and Normalization(timex2.mitre.org/ tern.html) task at an F-measure of .85, .78, and .82 for timex2, text, and val fields respectively.

After analyzing the results in this second environment, the following conclusions may be reached:  X  Errors in identification and extent of the expression : The main errors detected in  X  Errors in transformation of the attributes : As happened in the first environment
Something similar occurs in the case of the mod attribute. In some cases, the mod value was not obtained by GUTime (5 expressions) when it should have been, but it also happens that the value given by GUTime and annotated in TIMEBANK differs. For example, the expression  X  X  X early two years X  X  is annotated with EQUAL_OR_ LESS in TIMEBANK and with LESS by GUTime, or the expression  X  X  X arlier Sunday X  X  is annotated with START in TIMEBANK and with BEFORE by GUTime.
 Both tokens would be possible since their meaning is the same, implying ambiguity in the annotation process. These inconsistencies were not detected in the first evaluation since the number of modified expression was very small and all of them resulted correct. Therefore, with this comparative evaluation, these kinds of situations are detected. As in the case of the value errors, the transducer follows the guidelines specification in these two attributes and, therefore, errors are not provoked by the transducer but by the inconsistencies in annotation. These inconsistencies are reviewed next in depth, and apart from the automatic errors of GUTime, 40 errors were also found in TIMEBANK manual annotation in more complex expressions whose annotation is not perfectly defined in the annotation guidelines. The annotation of expressions like  X  X  X eeks or months X  X  is not clearly defined in the guidelines, provoking errors in the annotation of the expression or the value of the attributes. Finally, the beginPoint and endPoint attributes did not imply errors, but some of them were missed because the TIMEX2 annotation was incomplete and non-anchoring informa-tion was provided by GUTime; therefore, the transducer is not able to obtain the appropriate begin and end point of the expression.

As can be observed, no manual revision was done of the GUTime automatic output before processing it with the transducer since our aim in this first step was to determine whether, using this tool, the translation of automatic TIMEX2 taggers has a high performance as in the case of TIDES annotation. Comparing the results of the translation and the original GUTime TIMEX2 results, they are still very successful without manual intervention.

However, since the first environment performed a manual revision, and in order to have two similar evaluation scenarios, the second environment was reevaluated after a manual revision of the original automatic GUTime TIMEX2 output, consisting of:  X  Missed expressions : All the expressions that were missed by the automatic  X  Erroneous extensions of the expressions : The errors due to the fact of an  X  Wrong values of the attributes : GUTime annotator failed in some cases when  X  Ambiguity : In case of ambiguity due to more than one possible correct value,
Nevertheless, there is still some errors in TIMEBANK, as we explained previously in this subsection. These errors were not corrected since TIMEBANK was manually annotated and it is considered a goldstandard.
 The evaluation results obtained after the manual revision are shown in Table 3 .
As it can be observed in this evaluation, results are very close to the ones obtained in the first environment and the same problems regarding the performance of the T2T3 transducer were identified.

To conclude, this work demonstrates that these simple transformation rules are able to convert a text from a TIDES annotation to TimeML temporal expression annotation, with very successful results. 6 Conclusions This paper examined the two most widely used temporal annotation schemes (TIDES and TimeML), with the goal of providing a set of transformation rules allowing the interoperable translation of a text annotated with TIMEX2 tags (TIDES annotation) to a TIMEX3 (TimeML) annotation.

Most systems annotating temporal expressions currently use the TIDES annotation scheme as output. However, in spite of the widespread use of TIDES, this annotation scheme represents only temporal expressions, while TimeML has a larger coverage for temporal reasoning applications, covering other temporal aspects of the text, such as event expressions and the temporal relations between times and events. This motivated our examination of an automatic procedure to map from TIDES to TimeML, to be used by systems currently working with TIDES. We divided these transformation rules into two types: 1. Rules for the adaptation of the extent : the temporal expression extent is 2. Rules for the transformation of the attributes : TIMEX2 attributes are
Apart from the rules, after studying both annotation schemes, some important problems were identified and solutions to these were proposed.
 The transformation rules were implemented in a module, called T2T3 Transducer, 19 which is available online. Furthermore, this module was also evaluated, using: (1) a subset of the TERN2004 training corpus as input and as reference corpus, the same, annotated with the GUTime tool plus a manual revision; and (2) a subset of TIMEBANK corpus annotated with GUTime TIMEX2 as input and as reference corpus, a subset of TIMEBANK gold standard corpus. After a study of the evaluation results, we conclude that the performance of the T2T3 Transducer is very high, both in identification and normalization of the temporal expressions (F-Measure around 90%). Taking into account that most of the errors seems appropriate to translate a manual TIMEX2 gold standard corpus to TIMEX3 automatically.

We intend to extend this work along the following lines: (1) improving the detection of the exact extent of the expressions, especially in expressions that contain events; (2) improving the results of the begin and end points of the durations, and the assignment of the positive value for the temporal function when required; (3) developing a module, that considering syntatic and semantic information extracted from the expression, was able to determine the values of quant and freq attributes; and (4) determining the adaptations required to transform TIDES annotation to ISO-TimeML in other languages, such as Spanish or Italian. Since the attributes are mostly transformed using the TIDES attributes, this task seems very language-independent, and therefore, only small changes are expected. In terms of tools, only a multilingual POSTAGGER, a multilingual signal recognizer and a tool that normalizes temporal expressions at a multilingual level POSTAGGER (MACO in Carmona et al. 1998 ) and multilingual normalizer (TERSEO in Saquete et al. 2008 ) in order to migrate easily to other languages. However, the adaptation of the extent is a more language-dependent task, and although the main relations between expressions appear in the different languages (specification, anchoring, range and conjunction), there are some specific syntactic or semantic situations that should be treated in detail, for example, the possessive constructions, which have different structures in other languages.
 References
