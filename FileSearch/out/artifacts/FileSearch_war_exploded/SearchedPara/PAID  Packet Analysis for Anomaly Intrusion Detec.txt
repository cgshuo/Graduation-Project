 Intrusion detection (ID) techniques are fundamental components of a security infra-structure adopted to detect and stop intruders. ID techniques are conventionally cate-gorized as either misuse detection or anom aly detection. Misuse detection (also called signature-based detection) strives to detect well-known attacks by characterizing the rules. Misuse detection has a low false alarm rate but cannot identify any new attacks without pre-defined rules. In anomaly detection, each user has a profile within the system. Any deviation from the user profiles is regarded as an anomaly attack. Anom-aly detection can detect new attacks but suffer from more false alarms than misuse detections. 
Data mining methods extract rules from large datasets and use these rules to iden-examining packet headers but not their contents. An anomaly detection model that detection model is created by a data mining algorithm trained over a given set of training data. The proposed model does not examine application-layer protocols like HTTP or SMTP, and hence does not directly detect application-layer attacks, rather may detect attempts hidden in application layer connections. The proposed model can recognize not only well-known attacks but also new attacks. 
This investigation presents a novel anomaly detection model (PAID) using packet header analysis. We also propose a mechanism to transform and aggregate continuous features into buckets. The proposed mechanism is then applied with naive Bayes to perform intrusion detection. 
This investigation concentrates mainly on network based intrusion detection, which system is an independent platform that is able to not only identify intrusions by exam-ining network traffic but also monitor multiple hosts. The network-based system de-tects denial of service (DoS), probes, and remote-to-local (R2L) attacks. Host-based intrusion detection comprises an agent on a host that identifies intrusions by analyzing system calls, logs, file system modifications, and other host activities. The host-based system detects user-to-root (U2R) and R2L attacks. 
To evaluate the performance of PAID, this work presents a comprehensive evalua-tion based on a large set of intrusion training and test data provided by DARPA intru-Simulation results reveal that the proposed model is very effective, achieving over 99.2% accuracy with 0.03% false positive rate for DoS attacks. anomaly detection. Section 3 then presents an approach that adopts Bayesian methods sults. Conclusions are finally drawn in Section 5. Network intrusion detection is typically signature based (i.e., misuse detection). Rules to identify any connection addressed to a none xistent host or service are easy to write in SNORT [10]. However, this approach is vulnerable to novel attacks. In addition, it is also difficult to keep the rules or patterns up to date. An alternative approach is the anomaly detection, which classifies normal and suspicious traffics. 
Various techniques have been proposed for modeling anomalous detection. Anom-aly detection systems such as NIDES [6], SPADE [7], PHAD [11], ALAD [12] and SVM [15] model network traffic and generate an alarm when a deviation from the normal model is detected. These systems differ from one to another in the features extracted from available audit data and the particular algorithms they apply to derive the normal models. Most features are obtained from the packet headers. SPADE, ALAD and NIDES model the distribution of the source and destination IP addresses, port numbers, and the TCP connection state. PHAD adopts 34 attributes, which is much more than the other approaches. These attributes are obtained from the packet headers of the Ethernet, IP, TCP, UDP and ICMP packets. Lakhina et al. [2] proposed to use entropy as a measure of distributions of packet features to identify and classify anomaly network traffic volumes. Cardenas et al. [1] proposed a framework for IDS evaluation by viewing it as a multi-criteria optimization problem. PHAD (Packet Header Anomaly Detector) [11] monitors the headers of Ethernet, IP, and the transport layer without any preconceptions. PHAD constructs profiles for ters them. A new value that does not fit into any of the clusters is considered as a new cluster, and the closest two clusters are merged. 
Kruegel et al. describe a service specific intrusion detection system [3], which calculate an anomaly score. The 256 ASCII characters are grouped into six segments: 0, 1 X 3, 4 X 6, 7 X 11, 12 X 15 and 16 X 255. A uniform distribution model of these 6 seg-ments is then computed for all requests to each service. 
Bayes network is one of the most widely adopted graphical models for presenting events, and edges denote the relations between events. The numerical component probability of each node in the context of its parents. Bayes networks have been sented a behavior model using Bayes to obtain the model parameters. Goldman [13] proposed a model that simulates an intelligent attacker using Bayes networks to gen-erate a plan of goal-directed actions. 3.1 Packet Header Analysis Network packet headers are streams of bytes. Network packet data contain parameters choice of features. 
In this paper, we propose a data mining system PAID to detect the network intru-sions. Fig. 1 illustrates the process of analyzing network traffic using PAID. The data preprocessor in both training and testing pro cedures only filters packet headers infor-mation for further analysis. The following five attributes of packet header in PAID is monitored: duration, protocol, service, packet length, and connection flag. Duration is the elapsed time of the same connection. Protocol is network protocol, such as TCP, UDP, etc. Service is the port number on the destination, such as HTTP port number 80, telnet port number 23, etc. Packet length is total packet length. Connection flag is the flag of packets, such as normal or erro r. These attributes are obtained easily from real network traffic. 
In the training procedure, when data fields are extracted, the system inspects every type. For instance, the packet length is an integer with the range from 0 to 4294967295, where PAID treats it as continuous value. The protocol is also an integer vice is discrete, packet length is continuous, and connection flag is discrete. The transformation procedure is performed if the value is continuous. The system subse-quently attempts to place the transformed value into the pre-arranged bucket array that is managed dynamically. If no appropriate bucket is available for a new value, or the bucket array is full, then the system attempts to perform the bucket data aggrega-tion to release additional bucket for later application. The feature extraction procedure is performed repeatedly until all training data are inserted into buckets. Training pro-cedure will produce trained buckets after the entire training data are processed. 
In the testing procedure, the arriving data are filtered and transformed as described in the training procedure. The naive Bayes classifier is applied following the data transformation. 
Bucket array is an input as a naive Bayes parameter, and the system computes the probability of the incoming packet headers. The output of the classifier is the highest labeled test data can be inserted into trained buckets, and then the PAID can perform dynamic analysis of real-time network. 3.2 Data Transformation and Aggregation To identify network attacks, information need s to be collected and aggregated from a large number of network packets. Since the attributes in network packets vary, this operation must be more sensitive to received packets. PAID provides methods for such transformation and aggregation with the details described as follows. The fields in the packet header are integer values with lengths from one to four bytes. The values of some fields could range from 0 to 4294967295, and storing every value of every packet needs much memory. Moreover, holding each continuous value of the testing dataset may result in difficulties when receiving new values not observed in the train-ing dataset. To avoid the problems with continuous data, these continuous values have to be transformed into several data buckets. The number of data buckets is limited and predefined. buckets is not reached. If the limit is reach ed, we perform the aggregation procedure. First, the aggregation procedure separates a ll buckets into several groups according to the sign of volume of bucket. The volume of bucket is derived from subtract mali-cious from benign. Afterward, the procedure calculates the square measure of each group. We also derive the maximum square measure of bucket groups, max_group. Fig. 2(a) shows the first step of the aggreg ation procedure. After the first step is per-formed, the max_group will be the gray area in Fig. 2(a). 
In some cases, the group size may be small but the volume of the bucket is very high. The bucket increases if these buckets in the group are combined. The group will become one bucket, and the max_group will al ways point to that big bucket. Finally, the system will stop. To prevent this drawback, if the bucket number in sign group is one (less then two), aggregation procedure will try to find the maximum bucket num-ber in one group (longest group) and change max_group to this longest group. this group of buckets has very high volume. The second step will find out maximum size (longest group) of groups. For instance, in Fig. 2(b), the longest group is between point B and point C. 
After max_group from step one or step two is obtained, the aggregation procedure tries to find out two buckets and combine them. The final step of aggregation proce-dure finds the maximum volume of two joint buckets. These two joint buckets will be combined, and a new bucket with the arriving value is appended. Fig. 3(a) shows the final step of aggregation procedure. The gray area in Fig. 2(a) is selected in first step. In the gray area of Fig. 2(a), the maximum volume of two joint buckets is left peak of Fig. 3(a), and we append a new bucket with the coming value. 
For the discrete data, each value obtains a separate bucket, and transformation is thereby merely a mapping. When new value comes but does not match any existing bucket, PAID allocates a new bucket for the new value. If the number of discrete values exceeds the limit of buckets, we perform the above aggregation procedure. The larger than the limit of buckets. 
Although transforming data into buckets causes some loss of information for con-tinuous values, it increases the practicality of the model. This approach saves not only the memory but also the execution time. The training procedure with the whole DARPA dataset needs only 30 seconds with Intel Core 2 Duo 1.8GHz CPU in our implementation. 
The PAID system may also avoid problems from predicting new values not exist-ing in the testing dataset. When new values come in the data transformation of testing procedure, the data transformation finds the proper value according to the slope. Con-between point A and point B. The data tr ansformation finds proper value according to the slop around point A and B. The data set used in our experiment originates from MIT Lincoln Laboratory, and has been developed for IDS evaluations by DARPA [9]. The network was operated like a real environment, being blasted with multiple attacks. In each connection, various quantitative and qualitative features were extracted and form a new data set. The processed data are available known as KDD cup 1999 dataset [8]. 
This experiment focuses on Network and DoS datasets. Fig. 4 shows the ROC (Re-ceiver Operating Characteristic) curve of the relationship between the false positive and detection rates. In each of these ROC plots, the x-axis represents the false positive rate, derived as the percentage of normal connections classified as intrusions, and the y-axis denotes the detection rate, obtained as the percentage of intrusions detected. A data point in the upper left corner corresponds to the optimal performance, namely a low false positive rate with high detection rate. Fig. 4 plots the curves with the differ-ent bucket sizes as mentioned in Subsection 3.2. 
The first experiment involved the network dataset containing DoS and Probing at-tacks. Fig. 4(a) reveals that we achieve over 94.8% accuracy with 0.08% false posi-corresponding to bucket sizes 20, 30, 40, 50 and 60. The figure demonstrates that the idly with decreasing bucket size. If we in crease the buck size, the detection rate will also decrease. 
Fig. 4(b) shows that PAID performed well in the DoS attack dataset. We achieve over 99.2% accuracy with a 0.03% false positive rate for DoS attacks. Additionally, a 99.35% accuracy resulted in a 0.08% false positive rate. Again, bucket size 40 had the best performance. Reducing the bucket size causes the aggregation procedure to be invoked frequently. Aggregating very many buckets causes significant loss of information in the features trast, raising the bucket size cause continuous values to be divided into more buckets, thus possibly separating connections belonging to the same class into different buck-ets. Therefore, it decreases the accuracy with the same false positive rate. 
The experimental results are as expected because PAID is employs statistical de-frequent patterns, unlike most of the DoS and Probing attacks. This is because the DoS and Probing attacks involve many connections to same hosts in a very short time, whereas the R2L and Probing attacks are potentially enveloped in the data portions of the packets. Therefore, each attack generally involves only a single connection. In this paper, we present an anomaly detection model using packet header analysis. The proposed model, PAID, transforms and aggregates the continuous packet header fields, and applies them to a naive Bayes classifier. A series of evaluation tests is also performed on our approach using the KDD dataset, and the experimental results reveal that this model is effective at detecting network attacks. The KDD dataset achieves an 94.7% with 0.03% false positive rate for network attacks. Furthermore, PAID also achieves balanced performance for popular patterns and an averagely shorter detection tection. Compared with the conventional signature-based approach, the proposed statis-tical-based model of the naive Bayes classifier has a much higher accuracy and effectiveness than other tested schemes, particularly for DoS attacks. Since PAID only works. Our model is an efficient and reliable mechanism for intrusion detection. 
