 1. Introduction
The semantic web ( Berners-Lee, Hendler, &amp; Lassila, 2001 ) is an extension of the current web, based on the idea of exchanging information with explicit, formal and machine-accessible descriptions of meaning. As the scale of the web grows, search engines have played important roles in the web infrastructure. It is reasonable to say that the specialized search engines will be indispensable to find resources encoded in semantic web languages such as RDF(S) and OWL with the growth of the semantic web.

In the current web, web pages are connected with each other to form a so-called web graph. Traditional web search technologies such as PageRank ( Brin &amp; Page, 1998 ) and HITS ( Kleinberg, 1999 ) are typically based on hyperlink analysis in the web graph and query keywords processing. Ranking of search results is critical for these technologies since a web search usually returns too many results. The success of the Google search engine is mainly due to the very effective PageRank technique which calculates the importance of web pages on the base of the idea that a page is important if it is pointed to by other important pages.
In the semantic web, the information space is complex since it contains not only resources but also the rela-tionships among them. We can see the major differences between the semantic web and the current web from the following W3C description about the semantic web ( Herman, 2006 ): Some query languages have been proposed to access the semantic web data, e.g., RQL, RDQL, SeRQL, SPARQL, etc., and most of them use a SQL-like declarative syntax to retrieve query results as a set of
RDF triples. However, these SQL-like query languages may impose cognitive overload ( Nielsen, 1990 )on users since they usually are not familiar with domain ontologies or semantic web languages. Moreover, these techniques do not provide any ranking strategies about ordering the query results. As the number of ontolo-gies available in the semantic web increases rapidly, it is necessary to find specialized ranking mechanisms to properly order search results.

Unfortunately, it is not appropriate to directly transplant techniques successfully used in the web or infor-
Jessup, 1999 ), LSI ( Deerwester, Dumais, Furnas, Landauer, &amp; Harshman, 1990 ), to the semantic web search and ranking. First, all links between web pages are considered equally in standard PageRank. However, one unique characteristic of the semantic web is the heterogeneity of relationships between resources. Different types of relationships imply different importance for the connected resources. For example, in the scientific research domain a research paper may be written by several authors and cited by other papers. There are the number of citations is more important than the number of authors for a paper. However, the PageRank algorithm assumes that authors and citations have equal impacts on the evaluation of the paper. Therefore, the ranking mechanisms on the semantic web should depend on not only the number of relationships connect-ing resources but also the heterogeneity of relationships. Second, traditional search techniques usually focus on finding documents/pages with the query keywords, while the semantic features of relationships among resources are ignored. Anyanwu, Maduko, and Sheth (2005) propose that relationships should play an impor-tant role in the semantic web because a single object is intensely uninteresting. Therefore, it is necessary to provide users with results most semantically related to the query requests, even if the search results do not tain the term  X  X  X emantic X  X  when we query with the keyword  X  X  X emantic X  X  in the computer science domain. How- X  X  IEEE Transactions on Knowledge and Data Engineering  X  X , or entities typed  X  X  X onference X  X , e.g.,  X  X  WWW 2006  X  X ,  X  X  AAAI 2006  X  X , etc., since many publications on  X  X  X emantic X  X  appear in these journals or conferences though their names do not directly contain the term  X  X  X emantic X  X . Also, it is useful to retrieve entities typed
This paper provides RSS X  X  framework which enables ranked semantic search in the semantic web. In this framework, the search results can be greatly expanded with entities which are most semantically related to the query. Moreover, the heterogeneity of relationships is fully exploited to determine the importance of resources, thus supporting semantic search and providing users with properly ordered search results. An extended spreading activation algorithm ( Cohen &amp; Kjeldsen, 1987; Crestani, 1997; Rumelhart &amp; Norman, 1983; Salton &amp; Buckley, 1988 ) is proposed to retrieve resources most semantically related to the query, thus supporting inference while searching the semantic web. We evaluate the proposed algorithms over real-world data from CiteSeer metadata which covers literatures in the field of computer science and computer technol-ogy with about 800,000 publications ( http://citeseer.ist.psu.edu/oai.html ).

The rest of this paper is organized as follows. Section 2 discusses related works. We define the data model and describe the ranking formulation in Section 3 . In Section 4 , we present our ranked semantic search method. Section 5 describes experimental results. We conclude the paper and point out future directions in
Section 6 . 2. Related work
Technologies such as PageRank ( Brin &amp; Page, 1998 )and( Kleinberg, 1999 ) have been successfully applied to get good ranked search results in the web. The heuristic underlying these approaches is that pages with many inlinks are more likely to be of high quality than pages with few inlinks. The PageRank ( Brin &amp; Page, 1998 ) algorithm which has led to the popular Google search engine is based on the random surfer model which follows the hyperlinks of web pages by clicking on them or sometimes gets bored and jumps to another web page not hyperlinked by the current web page. Based on the random surfer model, the PageRank algorithm computes the rank (indicating popularity rather than relevance) of each web page by iteratively propagating the rank until convergence. The HITS algorithm proposed by Kleinberg (1999) invokes a traditional search engine to obtain a set of pages relevant to the query, expands this set with its inlinks and outlinks, and then attempts to find two types of pages, hubs (pages that point to many pages of high quality) and authorities (pages of high quality). The problem common to both PageRank and HITS is topic drift ( Langville &amp; Meyer, 2005 ) because they give the same weight to all edges.

The spreading activation model, originated from the field of psychology ( Rumelhart &amp; Norman, 1983 ) and widely used in the area of artificial intelligence as a processing framework for semantic or associative networks stani, 1997; Salton &amp; Buckley, 1988 ). The pure spreading activation model ( Crestani, 1997 ) is made up of a network data structure similar to the semantic network upon which simple processing techniques are applied.
The activation process starts by placing a specified activation weight at some starting nodes. The initial acti-vation weight spreads through the network along the links originating at the starting node. The activation weight of a node is a function of the weighted sum of the inputs to that node from directly connected nodes.
This activation process iterates until a termination condition is achieved. The results of the algorithm contain the nodes ordered by their activation values. The pure spreading activation model has some serious drawbacks ( Crestani, 1997 ) and many heuristics or inference rules are proposed to enhance the basic model, e.g., the con-methods have been proposed to support inference on the semantic web. Mayfield and Finin (2003) presents a framework for tightly integrating search and inference which supports both retrieval-driven and inference-driven processing on the semantic web. The inference and reasoning functionality of this framework is based on the use of DAMLJessKB ( Kopena &amp; Regli, 2003 ) which reads each DAML+OIL file as a collection of RDF triples and Jess as a forward chaining production system to apply rules to triples.

Link analysis and ranking technologies in the web graph have been generalized for analyzing structural dat-abases ( Balmin, Hristidis, &amp; Papakonstantinou, 2004; Cohen, Mamou, Kanza, &amp; Sagiv, 2003; Guo, Shao,
Botev, &amp; Shanmugasundaram, 2003 ). ObjectRank ( Balmin et al., 2004 ) applies authority-based ranking to keyword search in databases modeled as labeled graphs. In ObjectRank, authority originates at the objects containing the keywords and flows to objects according to their semantic connections. Each node is ranked according to its authority w.r.t. the particular keywords. However, ObjectRank creates ranking vectors for each keyword on each object, which imposes heavy computation and storage overhead. XSEarch ( Cohen et al., 2003 ) is a semantic search engine for XML which has a simple query language and returns semantically related document fragments that satisfy the query. Query answers are ranked using extended information retrieval techniques and are generated in an order similar to the ranking. XRANK ( Guo et al., 2003 ) proposes a method to rank XML elements using the link structure of the database. XRANK computes rankings at the granularity of an element because XML keyword search queries return elements. Also, XRANK considers element-to-element links in addition to document-to-document links.

Some ranking techniques ( Alani, Brewster, &amp; Shadbolt, 2006; Anyanwu et al., 2005; Ding et al., 2004; Sto-web have been proposed. AKTiveRank ( Alani et al., 2006 ) is an experimental system for ranking ontologies based on some measures that assess the ontology in terms of how well it represents the concepts of interest.
Anyanwu et al. (2005) propose an approach and framework for ranking complex relationships resulting from a relationship search. However, their ranking method mainly focuses on relationships other than entities. Val-let et al. (2007) presents a novel personalized content management system which is to improve the retrieval process by taking into account user preferences on the semantic context of ongoing user activities. In the context of the personalized retrieval, the personal relevance measure is combined with query-dependent and user-neutral search result rank values to produce the final rank score for a document. In addition, they apply a form of constrained spreading activation to explore semantic paths using a semantic expansion of both user preferences and the context. Swoogle ( Ding et al., 2004 ) is a crawler-based indexing and retrieval system for the semantic web documents, i.e., RDF or OWL documents. It analyzes the documents to compute useful metadata properties and relationships between them. However, the ranking in Swoogle is just at the document level. Stojanovic et al. (2003) present an ontology-based ranking scheme for ranking entities in the semantic web. This scheme determines the relevance of the entities based on their specificity. However, the importance of resources based on the global information space is not considered during the ranking.

Aragao, 2004 ) plays an important role in the vision of the semantic web. Guha et al. (2003) present the idea of semantic search aimed at improving searches of documents in the semantic web by augmenting the results of traditional searches with relevant data obtained from multiple sources in the semantic web. Rocha et al. (2004) seek to find important related entities to a given set of keywords using a spreading activation mechanism with the domain knowledge provided by experts. However, the initial values of starting nodes mainly depend on the relevance between the query and nodes, without the consideration of overall importance. In addition, all types of relationships are considered to have the same relative weight in the measures. Castells et al. (2007) presents an ontology-based retrieval approach which is based on an adaptation of the classic vector-space model, including an annotation weighting algorithm, and a ranking algorithm to overcome the limitations of purely boolean ontology-based retrieval models and many prior semantic search proposals. The approach shows clear improvements w.r.t. keyword-based search. The RSS model differs from this approach most in that
RSS considers the heterogeneity of relationships between resources for supporting ranked semantic search while this approach applies finer-grained domain ontologies to improve keyword-based full-text search. In addition, semantic annotation of the web content addressed by Castells et al. (2007) is not involved in this paper. KIM ( Kiryakov, Popov, Terziev, Manov, &amp; Ognyanoff, 2004; Popov, Kiryakov, Ognyanoff, Manov, &amp; Kirilov, 2004 ) gives a good work on automatic semantic annotation in the semantic web. Moreover, the
KIM platform implements IR-like indexing and retrieval which is further extended using the ontology and knowledge about the specific entities based on these annotations. 3. Ranking
In this section, we first formally define the data model that our work builds upon. Then, we discuss how to apply relationships analysis and edge weights to rank the global importance of resources in the data model.
Finally, the formulation of global ranking on resources is presented. 3.1. Data model Some formalisms have been proposed for representing semantic web data, e.g., RDF/RDFS, DAML+OIL,
OWL, etc. This paper focuses on the RDF/RDFS family, but it is possible to extend our work to other for-malisms as well ( Patel-Schneider &amp; Horrocks, 2006 ).

RDF represents statements about web resources with the form ( subject , property , object ) named an RDF triple which asserts that a resource, the subject , has a property whose value is the object . This model can be represented as a labeled directed graph ( Hayes, 2004 ). We extend the RDF semantics and model the semantic web data as a weighted directed graph G  X  X  V ; E ; f  X  , where V  X f v ing the resources or literals, E V V a set of edges representing properties, and f : E ! R function indicating the relationship strengths of properties. Therefore, an RDF triple is extended to a 4-tuple ( s , p , o , w ) where s , p and s are subject , property and object , respectively, and w  X  f  X  p  X 2 R p . RDF Schema defines classes and properties that describe groups of related resources and relationships between resources. Classes are sets of resources and elements of a class are instances of that class. The initial edge weight assignment depends on the schema graph, i.e., the types of properties, other than instances. For example, the properties has-author and cited-by have different edge weight functions, however, for the specific property has-author , the edge weight function is determined though there are many different instances of pub-lications and authors related to the property has-author .

In this model, each resource has a global ranking value which determines how important the resource is in the graph. The ranking mechanism to be detailed is based on a novel ranking algorithm which takes relation-ships analysis and the edge weight functions into account. 3.2. Edge weights In the data model, edges represent properties and the weights of edges indicate the strength of relationships.
An extended random surfer has different transition probabilities along different types of edges in this data model. Therefore, edge weights should rationally be determined to support the Markovian walk. Let us con-sider the data schema graph example of Fig. 1 in the scientific literature domain.

In Fig. 1 , there are three kinds of Class, i.e., Author, Publication and Conference. These Classes are inter-connected through heterogeneous relationships, e.g., a publication is written by a set of authors or cited by other papers or similar to many papers in contents or presented in conferences. These relationships have dif-ferent semantics, thus the transition probabilities may not be the same. Each type of relationship T in the schema graph is assigned a weight w ( T ). For example, the impact of a paper is affected much by papers citing 0.6, respectively. The assignment of edge weights is a continuous trial and may be complemented by domain
Diligenti, Gori, &amp; Maggini, 2005 ) to assign edge weights automatically, though still complex and time-con-suming. This work is out of the scope of this paper. Fortunately, we only need to manually assign edge weights on the schema level other than on the instance level where the assignment is accomplished automatically according to the schema.

For a Markovian walk, the edge weights given a source node v following probability distribution:
However, there is a problem with the transition probability distribution because the sum of a schema node may not be strictly equal to 1. For example in Fig. 1 , the schema node Author has only a transition probability 0.4 to the node Publication . Similar to the PageRank algorithm, we add a perturbation factor a which models a user X  X   X  X  X eleportation X  X  tendency to randomly select a new resource other than following connected relation-ships which is depicted in Section 3.3 .

A data instance graph should adhere to the data schema graph. The ranking focuses on the instances level other than the schema level. In the data instance graph, given the source node v the relationship type T , the edge weight w  X  e  X  is computed as follows:
In Eq. (2) , w  X  T  X  is the weight of the relationship typed T in the schema graph, and OutDegree  X  v number of outlinks typed T from v i .
Fig. 2 gives an example of the data instance graph. From Fig. 2 , it is clear that the edges connecting the in the schema graph by OutDegree  X  v i ; T  X  X  2 for Eq. (2) . For simplicity, some nodes and edges are omitted in the graph. Therefore, the edge weight of the relationship  X  X  contain  X  X  connecting the conference  X  X  WWW 2004  X  X  to the paper v 3 should be actually much less than 0.1 as in Fig. 2 since the conference contains many other papers which are not shown in Fig. 2 . The same holds for the author nodes because they may have written many other publications. 3.3. Global ranking on resources
To globally rank the importance of resources in the data instance graph, the relationships analysis and edge weights are both taken into account. This global ranking mechanism can be modeled as follows. In the data instance graph, a random surfer performs a Markovian walk which follows an edge e with the transition prob-ability w  X  e  X  other than uniform probability applied in standard PageRank, or gets bored and randomly jumps to a new node. The personalization vector r can bias the surfer, for example, preferring prestige conferences or favorite authors in the scientific literature domain. The dampening factor a , usually set to 0.85, is applied to perturb the matrix computation. Similar to the PageRank model where each web page has a global PageRank graph. The value g  X  v  X  is the stationary probability for this Markovian walk. The vector g  X  X  g  X  v g  X  v i  X  ; ... ; g  X  v n  X  T is computed as follows: Considering the edge weighs, the matrix P is calculated as follows:
In Eq. (4) , w  X  e  X  is the edge weight of e : v j ! v i which is computed through Eq. (2) . To converge the com-putation, the following measurement is used:
In Eq. (5) , is the convergence threshold and the smaller value slows down the convergence rate, thus taking more computation time. We give the following example to illustrate the global ranking mechanism: Example 1. Consider the example of Fig. 2 . First we create the matrix P as follows:
Let the initial global ranking values g be the vector g  X  0  X   X  X  a  X  0 : 85 and form
Thus, we get
Then we set  X  0 : 001 and iterate the computation. After 40 iterations, the final global ranking values g is computed:
We can see that v 7 has the highest value 2.2580 since it is connected by v nected by v 4 via has-written who is also one author of another paper v has the lowest value 0.200384 since it just contains one paper v of v 6 should be much more higher as the conference contains many other papers about the web which are not shown in Fig. 2 . 4. Search method In this section we present our search method for generating ordered search results w.r.t. a query request.
Section 4.1 defines the query and answer model. Section 4.2 describes the general semantic search process which extends the spreading activation algorithm. The generation of the final ordered semantic search results is also described. 4.1. Query and answer model
Generally, a query request R  X f Q ; C g comprises two parts where Q denotes the query requirement and C specifies the answer constraint. Q consists of n P 1 search items s which requires the keyword k i to be in the target resource connected by the property t the expected type of search results. If C is set to null , any type of search results can be returned. The query model can be extended to a complete Google-like keyword search interface if Q takes the form k ; ... ; k i ; ... ; k n and C is set to null . In this paper, we mainly focus on the former query model. Let us give examples to explain the above model. When we search publications written by the author  X  X  X ai
Jin X  X  and presented in the conference  X  X  WWW 2006  X  X , the query can be denoted by R ={ has-author : X  X  X ai Jin X  X , presentedin : X  X  WWW 2006  X  X ; Publication }. Consider the next example, finding most related resources about the author  X  X  X ai Jin X  X . In this example no particular type of results is specified, therefore, any resources most ond example is a typical semantic search. The answer model A  X  Results  X  R  X  V has been partly described in
R . The final answer results are a sequence of resources matching the query R .If C is set to null , any type of most semantically related resources could be returned. However, the results should be properly ordered according to a mechanism which can measure the importance and the relevance to R . The mechanism, named ranked semantic search, is the emphasis of this paper. 4.2. General search algorithm
Let the query R  X f Q ; C g and the data instance graph G  X  X  V ; E ; f  X  be given. The search algorithm attempts to find ordered semantic results A  X  Results  X  R  X  V . We first outline the key procedures of the gen-eral search algorithm:
We mainly extend the spreading activation to guide the semantic search in G . To determine starting nodes of the spreading process, we combine the nodes global importance and the relevance between R and nodes to compute the activation values. The process explores G from the starting nodes and edge weights are taken into account. This process is iterative.

According to whether C specifies the expected type of results, the spreading process can be categorized into concept constrained search ( CCS ) and none-concept constrained search ( NCCS ). Constraints, e.g., activa-tion threshold constraint, distance constraint, concept constraint, etc., are applied to prevent the spreading process propagating across the entire data instance graph.

After the finish of the spreading process, the nodes processed are ordered non-increasingly according to their activation values, thus generating the final ranked semantic search results.

Next, we illustrate the above procedures. The activation starts with an initial set of starting nodes from which the process explores G . This can be computed, e.g., as in the Google search engine ( Brin &amp; Page, 1998; Richardson &amp; Domingos, 2002 ) in which the final ranking score of a web page depends on not only the global PageRank value but also the relevance of the page to a query. We combine the global importance and the query-dependent relevance to determine the initial activation values. The resulting activation value a of node v i 2 V to the query R is as follows:
In Eq. (6) , g  X  v i  X  is the global ranking value of node v which is in the range [0,1]. The ranking value g  X  v i  X  is normalized in the range [0,1] divided by the maximum ranking values for all nodes in the graph. The parameter k (default 0.5) is a weight factor between g  X  v
Rel  X  R ; v i  X  . The choice of relevance measure Rel  X  R ; v
If the property t i is has-author or presentedin , the relevance measure could simply be Rel  X  R ; v in v i , and 0 otherwise. If t i is has-fulltext , more complex measurement could be used, e.g., TFIDF, cosine number limit, are placed into the set of starting nodes.

The starting nodes are inserted into a non-increasing priority queue according to the activation values. Dur-ing the propagation, the nodes in the queue are topped and other nodes are inferred along different types of edges. The activated nodes which are not in the priority queue are inserted and topped again. This process iterates until termination conditions are achieved, or the priority queue is empty. After this process, the nodes processed are ordered non-increasingly according to their activation values, and then search results are generated.

We discuss the output function of activation in the propagation process. During the activation, the activa-tion threshold and distance constraints are used to prevent propagating across the entire graph. The output function of node v i is formulated as follows:
In Eq. (7) , d is the propagation distance from the initial set of nodes, h is the decay factor which decreases the activation value during every level of propagation, I from nodes j to i , and Threshold is the defined input threshold below which the activation would not propagate from the node. The reason for setting the decay factor h (default 0.3) is that the strength of association between nodes decreases with increasing propagation distance. It is important to restrict the maximum prop-agation distance d in the spreading process. As Crestani (1997) indicates, setting the maximum value as three steps is usually enough, however this is application specific. In our model, we set the default maximum value as 2. To compute the input value I i , edge weights which reflect relationship strengths of connected nodes, are taken into account. Relationships with higher edge weights imply more importance to the activation process.
The assignment of edge weights is formulated by Eq. (2) . 4.2.1. Concept constrained search
For the query R  X f Q ; C g ,if C explicitly specifies the expected type of search results, only resources of the
SQL-like declarative languages which provide RDF-based precise answers. For example, the query, finding publications written by the author  X  X  X ai Jin X  X , is denoted by R ={ has-author : X  X  X ai Jin X  X ; Publication }. The results could be given by the following RDQL query: SELECT ?pub
WHERE (?pub &lt; rdf:type &gt;&lt; rss:Publication &gt; ) AND ?author =  X  X  X ai Jin"
USING rdf FOR &lt; http://www.w3.org/1999/02/22-rdf-syntax-ns# &gt;
However, the RDQL technique does not provide any ranking strategies to order the search results. In the general search process, the search strategy could be naturally extended to support concept constraint and resources ranking. For concept constraint, only nodes of the given concept type are allowed to be placed into the output priority queue during the activation. In addition, the global importance of resources and the relevance are taken into account, thus producing ranked results with the given concept type. 4.2.2. None-concept constrained search tic search ( Guha et al., 2003 ) since no particular concept types are specified. The semantic relationship between the query and returned resources may be explicit or implicit. For example, the query, finding most related resources about the author  X  X  X ai Jin X  X , is represented as R ={ has-author : X  X  X ai Jin X  X ; null }. The resources which are explicitly connected to the author, e.g., important publications he wrote, conferences he often presented in, are reasonable to be returned. It is also useful to return those resources which are implicitly semantically related to the author, e.g., authors he has co-authored with, authors who may have similar research interests to him since they usually presented in the same conferences, publications through type of search as we do.

However, this type of search imposes the problem that any two resources in the graph might be semanti-cally related since the small-world phenomenon ( Kleinberg, 2000 ). It is necessary to give metrics to measure the degree of semantic relationships among resources and determine the importance of returned resources. Those results with semantic relationships below a predefined threshold may be discarded.

Finally, we briefly discuss the generation of results since most of this work has been implied during the search process. The answer results A  X  Results  X  R  X  V are a sequence of resources which are ordered accord-ing to the semantic relationships with the query R . The results are generated after the search process. The resources processed in the search process are ordered non-increasingly according to their activation values.
For CCS , the results A would be a sequence of resources with the same type C .In NCCS , A could be a mixture of ordered resources with any kinds of concept types. In particular, the former can be taken as a special case of the latter. For example, to better support results display and browsing, we can categorize the mixed resources of A in the latter into several separate sequences according to different concept types they belong to. Hence, each sequence would consist of resources with the same concept type. 5. Experiments
In this section we experimentally evaluate the ranked semantic search framework. The goals of the exper-ing mechanism with that of the PageRank in the data graph; and (3) to demonstrate the effect of the ranked semantic search framework. 5.1. Datasets and experimental setup
The datasets are real-word data collected from CiteSeer metadata ( http://citeseer.ist.psu.edu/oai.html ), including the CiteSeer BibTex records and metadata archive oai_citeseer.tar.gz which is compliant with the and author addresses). The metadata covers literatures in the field of computer science and computer technol-ogy with about 800,000 publications and totals approximately 2 GB.

To verify the feasibility and efficiency of our ranked semantic search framework, we mainly choose those data in the database domain. We use keywords  X  X  X ata X  X ,  X  X  X atabase X  X ,  X  X  X IGMOD X  X ,  X  X  X LDB X  X ,  X  X  X CDE X  X ,  X  X  X CDT X  X ,  X  X  X KDE X  X ,  X  X  X ODS X  X  to match the title or the booktitle or the journal fields of BibTex entries.
Most publications within the database area are filtered and parts of publications on other research areas, such as artificial intelligence, data mining, information retrieval, are also included in the datasets. For the above filtering procedure, some BibTex entries are discarded for errors, e.g., url or authors missing.
Next we combine the filtered BibTex entries with the metadata archive and generate detail information on publications, including unique id, title, author, publishing location, abstract and citation relationship.
The information is then encoded into a RDF graph using the Sesame storage server. In this graph, there are totally 27,488 distinct instances and 199,517 relationships. These data instances belong to four different kinds of Class, i.e., Author, Publication, Conference and Journal. These instances are inter-connected through heterogeneous relationships, such as has-author and its inverse has-written , cited-by and cite , pres-entedin and contain , publishedin and published . In addition, there are relationships connecting instances to literals, e.g., has-title , conference-name , journal-name , etc. To simplify the problem, all authors of a paper are regarded as having the same importance to this paper in the experiments, which might not be always true. These schema relationships are assigned different weights as in Fig. 1 . For simplicity, we do not apply the relationship similar _ to which could be implemented through VSM or the document cosine similarity measurement. The weight assignment of the relationship publishedin / published is the same as that of present-edin / contain . 5.2. Results Before illustrating the experimental results, we should declare that our ranking results in this paper DO
NOT imply who are the most important researchers or which papers are the most valuable literatures or which journals/conferences should be No. 1 in the database research area at all. The experimental results just indicate the importance of resources and the relevance to the query in the data instance graph based on the CiteSeer metadata in which many database researchers and publications are absent because they could not be crawled on the web by the CiteSeer search engine.

The experiments are divided into two classes. Firstly, we verify the quality of the ranking mechanism. Since there are no standard metrics to measure the quality of ranking ontologies or instances in the semantic web at present, we mainly compare the quality of the mechanism with that of the PageRank through analyzing the global ranking results. Secondly, we present the ranked search results to demonstrate the effect of the ranked semantic search, especially the none-concept constrained search. Also, the results are compared to that of the
PageRank which takes global PageRanks values and the query-dependent relevance measure. 5.2.1. Quality of global ranking Table 1 illustrates the global ranking results using RSS ranking mechanism which is independent of queries.
We replace the URIs of instances with their readable comments in Table 1 . The Class field indicates concept types of instances and the Ranking Value field gives global ranking values of instances. From this table, we can see that the conference  X  X  X he SIGMOD Conference X  X  is ranked 1st with the ranking value 27.064753. This is due to the fact that the conference contains many publications and these publications are cited by others fre-quently. The journal  X  X  X EEE Transactions on Knowledge and Data Engineering X  X  is ranked 2nd. We notice that the 3rd position is  X  X  X enchmarking Database Systems: A Systematic Approach X  X  with the high ranking value 17.808655. This is because three famous database researchers:  X  X  X ina Bitton X  X ,  X  X  X avid J. Dewitt X  X , and  X  X  X arolyn Turbyfill X  X , wrote this publication. The author  X  X  X avid J. Dewitt X  X  is ranked 16th and is ranked three authors are of Top-10. In addition, this publication is cited by many other publications. From the Goo-gle Scholar ( http://scholar.google.com ), the publication is cited 247 times. The Top-1 ranked author among all authors in the datasets is  X  X  X akesh Agrawal X  X . From his homepage ( http://rakesh.agrawal-family.com/ ), we can find that  X  X  X e is the recipient of the ACM-SIGKDD First Innovation Award, ACM-SIGMOD Edgar F. Codd Innovations Award, ACM-SIGMOD Test of Time Award, VLDB 10-Yr Most Influential Paper
Award X  X . Moreover, he has written the 1st as well as 2nd highest cited of all papers in the fields of databases and data mining. As can be seen from Table 1 , the results of our ranking mechanism well reflect the global importance of instances.

Table 2 shows the ranking results of the PageRank model. The two top ranked instances are the same as those of Table 1 . However, we can find there are some important differences between Tables 1 and 2 . First, our ranking model pays more attention on publications since the edge weight of the relationship cite between pub-lications is a high value (0.6 in this experiment). There are 8 publications in Table 1 while there are only 4 publications in Table 2 . Second, the ranking results of Table 1 more concentrate on the database domain than those of Table 2 .In Table 2 , the conferences  X  X  X orkshop on Algorithms and Data Structures X  X  and  X  X  X torage and Retrieval for Image and Video X  X  are ranked 4th and 9th, respectively, since they contain many publications or authors on the keyword  X  X  X ata X  X . However, it might be more appropriate to place the two conferences into the algorithms and theory or the multimedia applications research area. Third, several conferences in Table 2 , e.g.,  X  X  X nowledge Representation Meets Databases X  X ,  X  X  X FIP Workshop on Database Security X  X , are highly ranked because these conferences contain many publications and authors in the datasets.

Table 3 gives the journals ranking results using RSS ranking model. These results are selected from the glo-bal ranking results with the concept type  X  X  X ournal X  X .

Table 4 gives ranking results of authors using RSS ranking model. We especially point out the ranked 5th author  X  X  X ina Bitton X  X . He has just a single publication in the datasets. However, the publication is  X  X  X ench-marking Database Systems: A Systematic Approach X  X  which is ranked 1st among all publications (see Table 1 ).
In addition, his co-authors of the publication are  X  X  X avid J. Dewitt X  X  and  X  X  X arolyn Turbyfill X  X  and they are highly ranked 2nd and 4th among all authors, respectively. However, he is just ranked 21st among all authors in the PageRank model.

From the above results, we can conclude that our global ranking model is feasible and performs well. The model better measures the global importance of resources than the PageRank model w.r.t. the selected data-base application domain. 5.2.2. Effect of changing the edge weights
The edge weights of relationships have influence on the global ranking results. We should evaluate the effect of changing edge weights to compare the distance between different ranking lists. One popular distance mea-sure between two full ranking lists is the Kendall X  X  s ( Dwork, Kumar, Naor, &amp; Sivakumar, 2001 ) which counts the number of pairwise disagreements between two lists. We use a variant of Kendall X  X  s as similarity measure-ment which measures the degree to which the relative orderings of the top k entries of two ranking lists are in agreement.

Given two top k lists s 1 and s 2 , let U be the union set of distinct elements in s follows:
In Eq. (8) , S  X  s 1 ; s 2  X  is in the range [0,1], and the larger value indicates s if s 1  X  u  X  &lt; s 0 1  X  v  X  , we say u is ahead of v in s 0 1 tionship cite ranging from 0.1 to 0.7, to compute the similarity measures between their ranking lists with that the PageRank is also computed. The length of ranking lists is limited to top k = 1000.
 Fig. 3 shows the similarity measure results. For comparison, we also place the similarity measure of the
PageRank model though in which the assignment of edge weights is not needed in Fig. 3 . From the figure, since the top k lists s 1 s 2 . The similarity value between the ranking list of the PageRank model and that of the PageRank. Fig. 3 indicates that the appropriate assignment of edge weights is important for the global ranking results and very high or low edge weights might cause the RSS ranking mechanism degenerate to the standard PageRank model.
 5.2.3. Effect of ranked semantic search
In this subsection, the query-dependent ranked semantic search results are presented, especially the none-of our method with that of the PageRank.
 Table 5 shows the top results for the query R = { X  X  has-title  X  X : X  X  X patial X  X ; null } using the RSS search method.
The query is to find resources which are most semantically related to the keyword  X  X  X patial X  X  via the property classes. The 3rd ranked instance is the publication  X  X  X he R-Tree: A Dynamic Index for Multi-Dimensional
Objects X  X  which title does not contains the keyword  X  X  X patial X  X . This paper, written by Christos Faloutsos (see Table 4 ) in 1987, is an important publication on spatial database and has been cited 754 times (according to Google Scholar). The most highly ranked author on spatial database is  X  X  X iawei Han X  X . He is fruitful on the database and data mining research area, especially data mining in spatial database.

Table 6 gives the search results of the PageRank for the same query. The results are publications which title contain the keyword  X  X  X patial X  X  and are ordered none-increasingly according to the PageRank values. From the results of Table 6 , we find some important publications on spatial database, however, we could not obtain much more useful information on this research area as our search method does.

Table 7 gives the top search results for the query R = { X  X  has-author  X  X : X  X  X .H. Gehani X  X ; null } using the RSS search method. The query is to find resources which are most semantically related to the author  X  X  X .H. Geh-
The 9th is ranked instance is the author  X  X  X .V. Jagadish X  X  who co-authored with him for many times. Table 8 gives the search results of the PageRank which have only seven entries. These results are all publications writ-ten by  X  X  X .H. Gehani X  X . Recall and Precision are usually used to evaluate the quality of retrieval systems. At present, there are no standard metrics to evaluate the quality of semantic search on the semantic web, there-fore, the metrics Recall and Precision in IR might not be appropriate for the evaluation. However, from Tables 7 and 8 , we can still find that the RSS model can retrieve more semantically related answers than the Page-
Rank search method, thus increasing the recall . There may be difficulties for comparing the precision . The main reason is that RSS retrieves entities most semantically related to queries while PageRank is based on lication  X  X  X he R-Tree: A Dynamic Index for Multi-Dimensional Objects X  X  and the author  X  X  X iawei Han X  X  are not retrieved by the PageRank model, though the two results are very relevant to this query. Therefore, we resorted to user participation.

We choose 10 test queries which were all on the database subject, and separately sent them to our RSS search model and the PageRank search model. The two models returned result lists (totally 20). Then we invited 10 students who are PhD or master candidates. Among them, 7 students are from our lab and the oth-ers who major in spatial databases are from Wuhan University. Each student rated the top-15 (occasionally, less than 15) results of each returned list using scores from 0 to 1. The scoring of relevance was regulated as relevant one. We averaged their scores and evaluated the effectiveness of two models using the scored preci-sion. The scored precision for the result list s i is defined: only the top k  X  k 6 15  X  entries were selected. For each result list s age score that 10 students marked the top k entries of s i
For RSS and PageRank, the average scored precisions over all 10 test queries are 0.90 and 0.71, respec-tively. The above user evaluation is simple and subjective, however, the results can still show our RSS search model outperforms the PageRank model approximately 0.19 w.r.t. the average scored precision.

From the experimental results, we can draw the conclusion that our ranked semantic search framework is effective and can produce favorable ordering quality of semantic search results.
 6. Conclusions and future work
The semantic web is not only about common formats for interchange of data but also about relationships among data which sharply distinguishes from the web. In addition, many current methods of accessing the semantic web data usually use a SQL-like syntax to retrieve exactly matching results in disorder. Therefore, specialized search mechanisms to support inference and properly order search results are important for the success of the semantic web. In this paper we introduce the framework RSS which implements ranked seman-tic search on the semantic web. In this framework, a novel ranking algorithm is proposed to measure the glo-bal importance of resources in the data graph which takes relationships analysis and the edge weights account.
In addition, the search results can be greatly expanded with entities which are most semantically related to the query through an extended spreading activation process, thus supporting semantic search and providing uses with properly ordered search results in terms of a combination of global ranking values and the relevance between the resources and the query. The experimental results show that the framework is feasible and leads to favorable semantic search results.

For our future work, we will try to automatically assign the edge weights in the schema graph using machine learning methods and the relevance feedback mechanism. In addition, the datasets in the experiments mainly focus on scientific research domain. We are currently trying to evaluate our model in other application areas though we believe the framework is applicable to broader domains.
 Acknowledgement
This paper is supported by the National 973 Key Basic Research Program under Grant No. 2003CB317003, and the Cultivation Fund of the Key Scientific and Technical Innovation Project, Ministry of Education of China under Grant No. 705034.

We are grateful to anonymous reviewers for their useful comments and suggestions which contribute to substantially improving this paper.
 References
