 Clustering graph data has gained much attention in recent years, as data represented as graphs is ubiquitous in today X  X  applications. For many applications, besides the mere graph data also further information about the vertices of a graph is available, which can be represented as attribute vectors. Recently, combined clustering approaches were introduced, which consider graph information and attribute vectors si-multaneously for clustering. The visualization of clustering results can help users to get a better understanding of the re-sults. In this paper, we introduce the GC-Viz system, which is implemented as a plugin for the Gephi platform. GC-Viz allows the user to test the combined clustering methods GAMer and DB-CSC on their data and to visualize and ex-plore the clustering results. Furthermore, GC-Viz enables the user to visually compare the results of different cluster-ing algorithms on the same dataset.
 H.2.8 [ Database management ]: Database applications X  Data mining Graph Clustering; Combined Clustering; Visualization
Large graphs are ubiquitous in today X  X  applications, and mining graph data has thus gained much attention in re-cent years. For example, graphs can represent data from social networks, citation networks, gene expression networks etc. An important task for the analysis of graphs is graph clustering, which aims at grouping the vertices of a graph into so-called clusters that are densely connected, i.e. many edges between vertices of the same cluster exist. However, besides the mere graph data, real-world data often contains additional information about the vertices of a graph, which can often be represented as attribute vectors. For example, Figure 1: Combined clustering of graph &amp; attribute data (figure from [5]) for a social network in which the edges represent a relation-ship between the users (e.g. a  X  X riendship X  relation), further information about the users could be given, such as e.g. age or hobbys (cf. Figure 1). For this reason, several combined clustering approaches have been developed which combine the clustering of graph and attribute data to detect clus-ters of vertices that are densely connected and at the same time show similar attribute values. The majority of those approaches determine the similarity of vertices by distance measures taking all of their attributes into account. How-ever, an important aspect which is also known from the clus-tering of vector data is that often not all dimensions of the attribute vectors are relevant for all clusters. For example, in Figure 1 the vertices { 1 , 2 , 5 , 6 } are densely connected and show similar values in the dimensions  X  X ge X  and  X  X C games X , however, they are not similar in the  X  X ports X  dimension. For the area of clustering vector data, this aspect is tackled by subspace clustering approaches. For this reason, recent ap-proaches [6, 5, 4] combine graph clustering with subspace clustering, i.e. they aim at detecting clusters of vertices that form dense subgraphs and at the same time show similar attribute values in a subset of their attributes ( subspace ). E.g., detecting highly connected groups of people in social networks (dense subgraphs) can be useful for target and vi-ral marketing based on their specific preferences (attribute subsets). In sensor networks, an aggregated transmission of specific sensor measurements (attribute subsets) of com-municating sensors (dense subgraphs) can lead to improved energy efficiency and thus longer lifetime of the network. [6, 5, 4] produce clusterings that are non-partitioning, i.e. the clustering results can contain overlapping clusters as well as outliers , i.e. vertices that do not belong to any cluster. With GC-Viz, we present a tool to easily use the algorithms GAMer [5] and DB-CSC [4] within the Gephi platform.
Overall, the development of combined clustering approaches for graph and attribute data is an active research area. How-ever, for real-world data sets the interpretation and evalua-tion of clustering results is a hard task, as no X  X round truth X , i.e. no information about the real clusters, is available. For a meaningful knowledge extraction, it is however crucial to be able to analyze and compare clustering results on these data. With GC-Viz we present a tool to visualize and in-teractively explore the clustering results based on graph and attribute data, which is an important step to obtain a better understanding of the hidden clustering structure of the data. GC-Viz is implemented as a plugin for the Gephi platform [1], which is an open-source visualization and exploration platform for graphs. This platform provides different kinds of graph layouts (however, none of the built-in layouts sup-ports the visualization of clustering results), a data labo-ratory to explore and edit vertex and edge attributes and several frameworks for graph analysis.

For the visualization of the clustering result, we use a layout algorithm based on the force-directed placement ap-proach [3], where a graph is layouted based on the simulation of a physical system with attractive and repulsive forces be-tween the vertices. Based on this approach, already some layout algorithms for visualizing clustered graphs (based on mere graph data) were developed [8, 7, 2]. However, to the best of our knowledge, for none of these algorithms an imple-mentation is publicly available. Furthermore, none of this algorithms considers vertex attributes for the visualization.
In the following, we introduce our GC-Viz system, which enables users to cluster attributed graphs and explore the clustering results: 1. The user can use the combined clustering algorithms 2. The user can get an overview of a clustering result in 3. The user can compare the results of different clustering
However, the usage of GC-Viz is not limited to graphs with vertex attributes. The visualization tool can as well be used for the analysis of clustering results in general graphs.
In the following, we introduce our GC-Viz system that is integrated into Gephi [1], which is an open source and free graph exploration platform 1 .
The GC-Viz system supports the execution of two com-bined clustering algorithms: GAMer [5] and DB-CSC [4]. GAMer detects clusters that form quasi-cliques in the graph and at the same time show a high similarity in the attributes of their specific subspace. DB-CSC is a more advanced com-bined clustering algorithm which exploits the density-based clustering principle to detect larger and more meaningful clusters. More details about the algorithms and their pa-rameters are provided in the corresponding papers.
To use the provided clustering algorithms on a given at-tributed graph, the graph file is first opened in the Gephi platform, which supports various graph formats like e.g. GraphML 2 . After opening the  X  X ombined Clustering X  tab, http://gephi.org/ http://graphml.graphdrawing.org/ Figure 2: Visualization of a clustering result in a graph with vertex attributes (the attribute values are shown in the table on the right). the user can select the clustering algorithm to apply to the graph and manipulate the parameters used by the corre-sponding algorithm. By default, the parameter values are set to standard values which proved to be suitable for many cases. Furthermore, the user can select a file in which the clustering result is stored permanently.
The user can use GC-Viz to visualize the result of a clus-tering algorithm on a graph. When a clustering is performed within the Gephi platform (cf. Section 2.1), the clustering results are directly visualized. Furthermore, the user can load a stored clustering result that was obtained before by some graph clustering algorithm. This clustering result is then used for the visualization of the attributed graph.
To get an overview of the clustering result, the graph is then layouted such that the clustering structure becomes visible. An example screenshot for such a layout is shown in Figure 2. The colors of the vertices show their cluster mem-bership: Vertices of the same cluster have the same color, except for those vertices that belong to several overlapping clusters, those vertices are drawn in black. The light grey vertices represent outliers that do not belong to any of the clusters. The placement of the vertices is computed by GC-Viz influenced by three objectives: 1. Vertices located in the same cluster are drawn closely 2. Vertices that are connected by an edge are drawn closer 3. For vertices located in the same cluster, the attribute
Besides the basic information  X  X hich vertex belongs to which cluster? X , this layout can also help the user to assess (c) Comparison C1  X  C2 (d) Comparison C2  X  C1 Figure 3: Comparing different clustering results (Screenshots from the GCViz system) the quality of a clustering. For graph clustering, a clustering result is intuitively a  X  X ood X  result if the vertices inside of a cluster are densely connected, while only few edges between different clusters exist. For combined clustering, a further criterion is that the vertices inside of a cluster should have similar attribute values in the relevant dimensions of a clus-ter. Using the GC-Viz layout, it is directly visible to the user how well these criteria are met by the given clustering.
In addition to the graph layout, the user can explore the attributes of the vertices using the built-in data table of Gephi. By selecting a vertex (or a whole cluster) in the layouted graph, the corresponding rows are selected in the data table.
In the previous section, we explained how GC-Viz can be used to explore a single combined clustering result. In many situations, however, a user might have gained several clus-tering results on the same graph, which can be the output of different clustering algorithms or obtained by testing several parameter settings for the same algorithm. For synthetic datasets, there also might be a  X  X round truth X  available, i.e. a clustering that is considered the optimal result for a cer-tain dataset. In these situations, it is beneficial to have a direct comparison between two different clustering results.
Although there exist various measures for evaluating the quality of clustering results, their usefulness is often highly application dependent. Therefore, an objective compari-son between two clustering results is hardly possible, as the outcome is always highly dependent on the chosen mea-sures. With GC-Viz, we aim at providing a simple, intuitive method for comparing clustering results visually.
GC-Viz provides the user with a tool to visually compare two clustering results on the same data set. We illustrate the usage of this feature using a synthetic example network in Figure 3. The Figures 3(a) and 3(b) show two different clustering results for a certain graph as drawn by GC-Viz. By looking at those two results, we can see that Cluster-ing C1 intuitively captures the structure of the input graph better than Clustering C2. While C1 contains quite ho-mogeneous clusters, in C2 we can see two problems: The red cluster consists of two parts that are hardly connected. Furthermore, the vertices of the dark green cluster are only connected by few edges; they have more connections to the vertices of the brown cluster. To get a better understanding of the differences between the two clustering solutions, we could ask  X  X hat changes occur if we use C2 instead of C1? X  To answer this question, starting with e.g. C1, the user can load a second clustering (C2) into the GC-Viz system, which is then integrated into the visualization of the first cluster-ing. This results in the visualization shown in Figure 3(c). In this figure, the placement of the vertices is the same as in the visualization of C1, however, the colors of the vertices correspond to the clusters of C2. Comparing this with Fig-ure 3(a), we can directly see that the red and dark green cluster from C1 have been merged in C2. For the two clus-ters on the top right, several vertices were moved between the clusters. Furthermore, some vertices from the turquoise cluster have been moved to the yellow cluster. Naturally, we can also start with C2 and load C1 for comparison, which is shown in Figure 3(d).
The research leading to these results has received funding from the X  X teerSCiVA: Steerable Subspace Clustering for Vi-sual Analytics X  DFG-664/11 project and from the B-IT Re-search School of the Bonn-Aachen International Center for Information Technology. [1] M. Bastian, S. Heymann, and M. Jacomy. Gephi: An [2] P. Eades and M. L. Huang. Navigating clustered graphs [3] T. M. J. Fruchterman and E. M. Reingold. Graph [4] S. G  X  unnemann, B. Boden, and T. Seidl. Db-csc: A [5] S. G  X  unnemann, I. F  X  arber, B. Boden, and T. Seidl. [6] F. Moser, R. Colak, A. Rafiey, and M. Ester. Mining [7] H. Omote and K. Sugiyama. Force-directed drawing [8] R. Santamar  X   X a and R. Ther  X  on. Overlapping clustered
