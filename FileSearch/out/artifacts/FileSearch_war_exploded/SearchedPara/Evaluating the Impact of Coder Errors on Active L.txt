 Supervised machine learning techniques are still the mainstay for many NLP tasks. There is, how-ever, a well-known bottleneck for these approaches: the amount of high-quality data needed for train-ing, mostly obtained by human annotation. Active Learning (AL) has been proposed as a promising ap-proach to reduce the amount of time and cost for hu-man annotation. The idea behind active learning is quite intuitive: instead of annotating a large number of randomly picked instances we carefully select a small number of instances that are maximally infor-mative for the machine learning classifier. Thus a smaller set of data points is able to boost classifier performance and to yield an accuracy comparable to the one obtained when training the same system on a larger set of randomly chosen data.

Active learning has been applied to several NLP tasks like part-of-speech tagging (Ringger et al., 2007), chunking (Ngai and Yarowsky, 2000), syn-tactic parsing (Osborne and Baldridge, 2004; Hwa, 2004), Named Entity Recognition (Shen et al., 2004; Laws and Sch  X utze, 2008; Tomanek and Hahn, 2009), Word Sense Disambiguation (Chen et al., 2006; Zhu and Hovy, 2007; Chan and Ng, 2007), text classification (Tong and Koller, 1998) or statis-tical machine translation (Haffari and Sarkar, 2009), and has been shown to reduce the amount of anno-tated data needed to achieve a certain classifier per-formance, sometimes by as much as half. Most of these studies, however, have only simulated the ac-tive learning process using goldstandard data. This setting is crucially different from a real world sce-nario where we have to deal with erroneous data and inconsistent annotation decisions made by the human annotators. While simulations are an indis-pensable instrument to test different parameters and settings, it has been shown that when applying AL to highly ambiguous tasks like e.g. Word Sense Disambiguation (WSD) with fine-grained sense dis-tinctions, AL can actually harm the learning process (Dang, 2004; Rehbein et al., 2010). Dang suggests that the lack of a positive effect of AL might be due to inconsistencies in the human annotations and that AL cannot efficiently be applied to tasks which need double blind annotation with adjudication to insure a sufficient data quality. Even if we take a more opti-mistic view and assume that AL might still be useful even for tasks featuring a high degree of ambiguity, it remains crucial to address the problem of annota-tion noise and its impact on AL.
In this paper we present a thorough evaluation of the impact of annotation noise on AL. We simulate different types of coder errors and assess the effect on the learning process. We propose a method to de-tect inconsistencies and remove them from the train-ing data, and show that our method does alleviate the problem of annotation noise in our experiments.
The paper is structured as follows. Section 2 re-ports on recent research on the impact of annota-tion noise in the context of supervised classification. Section 3 describes the experimental setup of our simulation study and presents results. In Section 4 we present our filtering approach and show its im-pact on AL performance. Section 5 concludes and outlines future work. We are interested in the question whether or not AL can be successfully applied to a supervised classifi-cation task where we have to deal with a consider-able amount of inconsistencies and noise in the data, which is the case for many NLP tasks (e.g. sen-timent analysis, the detection of metaphors, WSD with fine-grained word senses, to name but a few). Therefore we do not consider part-of-speech tag-ging or syntactic parsing, where coders are expected to agree on most annotation decisions. Instead, we focus on work on AL for WSD, where inter-coder agreement (at least for fine-grained annotation schemes) usually is much lower than for the former tasks. 2.1 Annotation Noise Studies on active learning for WSD have been lim-ited to running simulations of AL using gold stan-dard data and a coarse-grained annotation scheme (Chen et al., 2006; Chan and Ng, 2007; Zhu and Hovy, 2007). Two exceptions are Dang (2004) and Rehbein et al. (2010) who both were not able to replicate the positive findings obtained for AL for WSD on coarse-grained sense distinctions. A pos-sible reason for this failure is the amount of annota-tion noise in the training data which might mislead the classifier during the AL process. Recent work on the impact of annotation noise on a machine learning task (Reidsma and Carletta, 2008) has shown that random noise can be tolerated in supervised learn-ing, while systematic errors (as caused by biased an-notators) can seriously impair the performance of a supervised classifier even if the observed accuracy of the classifier on a test set coming from the same population as the training data is as high as 0.8. Related work (Beigman Klebanov et al., 2008; Beigman Klebanov and Beigman, 2009) has been studying annotation noise in a multi-annotator set-ting, distinguishing between hard cases (unreliably annotated due to genuine ambiguity) and easy cases (reliably annotated data). The authors argue that even for those data points where the annotators agreed on one particular class, a proportion of the agreement might be merely due to chance. Fol-lowing this assumption, the authors propose a mea-sure to estimate the amount of annotation noise in the data after removing all hard cases. Klebanov et al. (2008; 2009) show that, according to their model, high inter-annotator agreement (  X  ) achieved in an annotation scenario with two annotators is no guarantee for a high-quality data set. Their model, however, assumes that a) all instances where anno-tators disagreed are in fact hard cases, and b) that for the hard cases the annotators decisions are obtained by coin-flips. In our experience, some amount of disagreement can also be observed for easy cases, caused by attention slips or by a deviant interpre-tation of some class(es) by one of the annotators, and the annotation decision of an individual annota-tor cannot so much be described as random choice (coin-flip) but as systematically biased selection, causing the types of errors which have been shown to be problematic for supervised classification (Rei-dsma and Carletta, 2008).

Further problems arise in the AL scenario where the instances to be annotated are selected as a func-tion of the sampling method and the annotation judgements made before. Therefore, Beigman and Klebanov Beigman (2009) X  X  approach of identify-ing unreliably annotated instances by disagreement is not applicable to AL, as most instances are anno-tated only once. 2.2 Annotation Noise and Active Learning For AL to be succesful, we need to remove system-atic noise in the training data. The challenge we face is that we only have a small set of seed data and no information about the reliability of the annotations assigned by the human coders.

Zhu et al. (2008) present a method for detecting outliers in the pool of unannotated data to prevent these instances from becoming part of the training data. This approach is different from ours, where we focus on detecting annotation noise in the man-ually labelled training data produced by the human coders.

Schein and Ungar (2007) provide a systematic in-vestigation of 8 different sampling methods for AL and their ability to handle different types of noise in the data. The types of noise investigated are a) prediction residual error (the portion of squared er-ror that is independent of training set size), and b) different levels of confusion among the categories. Type a) models the presence of unknown features that influence the true probabilities of an outcome: a form of noise that will increase residual error. Type b) models categories in the data set which are intrin-sically hard to disambiguate, while others are not. Therefore, type b) errors are of greater interest to us, as it is safe to assume that intrinsically ambiguous categories will lead to biased coder decisions and result in the systematic annotation noise we are in-terested in.

Schein and Ungar observe that none of the 8 sampling methods investigated in their experiment achieved a significant improvement over the random sampling baseline on type b) errors. In fact, en-tropy sampling and margin sampling even showed a decrease in performance compared to random sam-pling. For AL to work well on noisy data, we need to identify and remove this type of annotation noise during the AL process. To the best of our knowl-edge, there is no work on detecting and removing annotation noise by human coders during AL. To make sure that the data we use in our simula-tion is as close to real-world data as possible, we do not create an artificial data set as done in (Schein and Ungar, 2007; Reidsma and Carletta, 2008) but use real data from a WSD task for the German verb drohen (threaten). 1 Drohen has three different word senses which can be disambiguated by humans with To control the amount of noise in the data, we need to be sure that the initial data set is noise-free.
For classification we use a maximum entropy pling (Lewis and Gale, 1994), a standard sampling heuristic for AL where new instances are selected based on the confidence of the classifier for predict-ing the appropriate label. As a measure of uncer-tainty we use Shannon entropy (1) (Zhang and Chen, 2002) and the margin metric (2) (Schein and Ungar, 2007). The first measure considers the model X  X  pre-dictions q for each class c and selects those instances from the pool where the Shannon entropy is highest.
The second measure looks at the difference be-tween the largest two values in the prediciton vector q , namely the two predicted classes c, c  X  which are, according to our model, the most likely ones for in-stance x ference ( margin ) between the two predicted proba-bilities is the smallest. We discuss some details of this metric in Section 4.

The features we use for WSD are a combination of context features (word token with window size 11 and POS context with window size 7), syntactic fea-and semantic features based on GermaNet hyper-onyms. These settings were tuned to the target verb by (Rehbein et al., 2009). All results reported below are averages over a 5-fold cross validation. 3.1 Simulating Coder Errors in AL Before starting the AL trials we automatically sepa-rate the 2,500 sentences into test set (498 sentences) distribution of word senses in the data set. We in-sert a varying amount of noise into the pool data, starting from 0% up to 30% of noise, increasing by 2% in each trial.

We assess the impact of annotation noise on ac-tive learning in three different settings. In the first setting, we randomly select new instances from the pool (random sampling; rand ). In the second setting, we randomly replace n percent of all labels (from 0 to 30) in the pool by another label before starting the active learning trial, but retain the distribution of the different labels in the pool data (active learning with random errors); (Table 1, ALrand , 30%). In the third setting we simulate biased decisions by a human annotator. For a certain fraction (0 to 30%) of instances of a particular non-majority class, we substitute the majority class label for the gold label, thereby producing a more skewed distribution than in the original pool (active learning with biased er-rors); (Table 1, ALbias , 30%).

For all three settings ( rand, ALrand, ALbias ) and each degree of noise (0-30%), we run active learning simulations on the already annotated data, simulat-ing the annotation process by selecting one new, pre-labelled instance per trial from the pool and, instead of handing them over to a human coder, assigning the known (possibly erroneous) label to the instance and adding it to the training set. We use the same split (test, pool) for all three settings and all degrees of noise, with identical test sets for all trials. 3.2 Results Figure 1 shows active learning curves for the differ-ent settings and varying degrees of noise. The hori-zontal black line slightly below 0.5 accuracy shows the majority baseline (the performance obtained when always assigning the majority class). For all degrees of randomly inserted noise, active learning ( ALrand ) outperforms random sampling ( rand ) at an early stage in the learning process. Looking at the biased errors ( ALbias ), we see a different picture. With a low degree of noise, the curves for ALrand and ALbias are very similar. When inserting more noise, performance for ALbias decreases, and with around 20% of biased errors in the pool AL performs worse than our random sampling baseline. In the random noise setting ( ALrand ), even after inserting 30% of errors AL clearly outperforms random sam-pling. Increasing the size of the seed data reduces the effect slightly, but does not prevent it (not shown here due to space limitations). This confirms the findings that under certain circumstances AL per-forms worse than random sampling (Dang, 2004; Schein and Ungar, 2007; Rehbein et al., 2010). We could also confirm Schein and Ungar (2007) X  X  obser-vation that margin sampling is less sensitive to cer-tain types of noise than entropy sampling (Table 2). Because of space limitations we only show curves for margin sampling. For entropy sampling, the gen-eral trend is the same, with results being slightly lower than for margin sampling. Uncertainty sampling using the margin metric se-lects instances for which the difference between classifier predictions for the two most probable classes c, c  X  is very small (Section 3, Equation 2). When selecting unlabelled instances from the pool, this metric picks examples which represent regions of uncertainty between classes which have yet to be learned by the classifier and thus will advance the learning process. Our human coder, however, is not the perfect oracle assumed in most AL simulations, and might also assign incorrect labels. The filter ap-proach has two objectives: a) to detect incorrect la-bels assigned by human coders, and b) to prevent the hard cases (following the terminology of Kle-banov et al. (2008)) from becoming part of the train-ing data.

We proceed as follows. Our approach makes use of the limited set of seed data S and uses heuris-tics to detect unreliably annotated instances. We assume that the instances in S have been validated thoroughly. We train an ensemble of classifiers E on subsets of S , and use E to decide whether or not a newly annotated instance should be added to the seed.
There are a number of problems with this ap-proach. First, there is the risk of overfitting S . Sec-ond, we know that classifier accuracy in the early phase of AL is low. Therefore, using classifier pre-dictions at this stage to accept or reject new in-stances could result in poor choices that might harm the learning proceess. To avoid this and to gener-alise over S to prevent overfitting, we do not directly train our ensemble on instances from S . Instead, we create new feature vectors F feature vectors F extract all attribute-value pairs from the feature vec-tors for this particular class. For each class, we ran-domly select features (with replacement) from F and combine them into a new feature vector F retaining the distribution of the different classes in the data. As a result, we obtain a more general set of feature vectors F ing distributed more evenly over the different feature vectors.

In the next step we train n = 5 maximum en-tropy classifiers on subsets of F instances last annotated by the oracle. Each subset is half the size of the current S . We use the ensemble to predict the labels for the new instances and, based on the predictions, accept or reject these, following the two heuristics below (also see Figure 2). 1. If all n ensemble classifiers agree on one label 2. If the sum of the margins predicted by the en-The threshold t qualitative data analysis.
 AL with Filtering:
Input: annotated seed data S , unannotated pool P
AL loop:
Repeat: after every c new instances annotated by the oracle Until done
In each iteration of the AL process, one new in-stance is selected using margin sampling. The in-stance is presented to the oracle who assigns a label. Then the instance is added to the seed data, thus in-fluencing the selection of the next data point to be annotated. After 10 new instances have been added, we apply the filter technique which finally decides whether the newly added instances will remain in the seed data or will be removed.

Figure 3 shows learning curves for the filter ap-proach. With increasing amount of errors in the pool, a clear pattern emerges. For both sampling methods (ALrand, ALbias), the filtering step clearly improves results. Even for the noisier data sets with up to 26% of errors, ALbias with filtering performs at least as well as random sampling. 4.1 Error Analysis Next we want to find out what kind of errors the system could detect. We want to know whether the approach is able to detect the errors previously in-serted into the data, and whether it manages to iden-tify hard cases representing true ambiguities.
To answer these questions we look at one fold of the ALbias data with 10% of noise. In 1,200 AL it-erations the system rejected 116 instances (Table 3). The major part of the rejections was due to the ma-jority vote of the ensemble classifiers (first heuris-tic, H1) which rejects all instances where the en-semble classifiers agree with each other but disagree with the human judgement. Out of the 105 instances rejected by H1, 41 were labelled incorrectly. This means that we were able to detect around half of the incorrect labels inserted in the pool. 11 instances were filtered out by the margin threshold (H2). None of these contained an incor-rect label. On first glance H2 seems to be more le-nient than H1, considering the number of rejected sentences. This, however, could also be an effect of the order in which we apply the filters.

The different word senses are evenly distributed over the rejected instances (H1: Commitment 30, drohen1-salsa 38, Run risk 36; H2: Commitment 3, drohen1-salsa 4, Run risk 4). This shows that there is less uncertainty about the majority word sense, Run risk.

It is hard to decide whether the correctly labelled instances rejected by the filtering method would have helped or hurt the learning process. Simply adding them to the seed data after the conclusion of AL would not answer this question, as it would merely tell us whether they improve classification accuracy further, but we still would not know what impact these instances would have had on the selec-tion of instances during the AL process. This paper shows that certain types of annotation noise cause serious problems for active learning ap-proaches. We showed how biased coder decisions can result in an accuracy for AL approaches which is below the one for random sampling. In this case, it is necessary to apply an additional filtering step to remove the noisy data from the training set. We presented an approach based on a resampling of the features in the seed data and guided by an ensemble of classifiers trained on the resampled feature vec-tors. We showed that our approach is able to detect a certain amount of noise in the data.

Future work should focus on finding optimal pa-rameter settings to make the filtering method more robust even for noisier data sets. We also plan to im-prove the filtering heuristics and to explore further ways of detecting human coder errors. Finally, we plan to test our method in a real-world annotation scenario. This work was funded by the German Research Foundation DFG (grant PI 154/9-3). We would like to thank the anonymous reviewers for their helpful comments and suggestions.
