 We present DeepWalk , a novel approach for learning latent representations of vertices in a network. These latent rep-resentations encode social relations in a continuous vector space, which is easily exploited by statistical models. Deep-Walk generalizes recent advancements in language modeling and unsupervised feature learning (or deep learning ) from sequences of words to graphs.

DeepWalk uses local information obtained from truncated random walks to learn latent representations by treating walks as the equivalent of sentences. We demonstrate Deep-Walk  X  X  latent representations on several multi-label network classification tasks for social networks such as BlogCatalog, Flickr, and YouTube. Our results show that DeepWalk outperforms challenging baselines which are allowed a global view of the network, especially in the presence of missing information. DeepWalk  X  X  representations can provide F 1 scores up to 10% higher than competing methods when la-beled data is sparse. In some experiments, DeepWalk  X  X  representations are able to outperform all baseline methods while using 60% less training data.

DeepWalk is also scalable. It is an online learning algo-rithm which builds useful incremental results, and is trivially parallelizable. These qualities make it suitable for a broad class of real world applications such as network classification, and anomaly detection.
 H.2.8 [ Database Management ]: Database Applications -Data Mining; I.2.6 [ Artificial Intelligence ]: Learning; I.5.1 [ Pattern Recognition ]: Model -Statistical social networks; deep learning; latent representations; learn-ing with partial labels; network classification; online learning Figure 1: Our proposed method learns a latent space repre-sentation of social interactions in R d . The learned represen-tation encodes community structure so it can be easily ex-ploited by standard classification methods. Here, our method is used on Zachary X  X  Karate network [44] to generate a la-tent representation in R 2 . Note the correspondence between community structure in the input graph and the embedding. Vertex colors represent a modularity-based clustering of the input graph.
The sparsity of a network representation is both a strength and a weakness. Sparsity enables the design of efficient dis-crete algorithms, but can make it harder to generalize in statistical learning. Machine learning applications in net-works (such as network classification [16, 37], content rec-ommendation [12], anomaly detection [6], and missing link prediction [23]) must be able to deal with this sparsity in order to survive.

In this paper we introduce deep learning (unsupervised feature learning) [3] techniques, which have proven successful in natural language processing, into network analysis for the first time. We develop an algorithm ( DeepWalk ) that learns social representations of a graph X  X  vertices, by modeling a stream of short random walks. Social representations are latent features of the vertices that capture neighborhood similarity and community membership. These latent rep-resentations encode social relations in a continuous vector space with a relatively small number of dimensions. Deep-Walk generalizes neural language models to process a special language composed of a set of randomly-generated walks. These neural language models have been used to capture the semantic and syntactic structure of human language [7], and even logical analogies [29].

DeepWalk takes a graph as input and produces a latent representation as an output. The result of applying our method to the well-studied Karate network is shown in Fig-ure 1. The graph, as typically presented by force-directed layouts, is shown in Figure 1a. Figure 1b shows the output of our method with 2 latent dimensions. Beyond the striking similarity, we note that linearly separable portions of (1b) cor-respond to clusters found through modularity maximization in the input graph (1a) (shown as vertex colors).

To demonstrate DeepWalk  X  X  potential in real world sce-narios, we evaluate its performance on challenging multi-label network classification problems in large heterogeneous graphs. In the relational classification problem, the links between feature vectors violate the traditional i.i.d. assumption. Tech-niques to address this problem typically use approximate inference techniques [32] to leverage the dependency informa-tion to improve classification results. We distance ourselves from these approaches by learning label-independent repre-sentations of the graph. Our representation quality is not influenced by the choice of labeled vertices, so they can be shared among tasks.

DeepWalk outperforms other latent representation meth-ods for creating social dimensions [39, 41], especially when labeled nodes are scarce. Strong performance with our repre-sentations is possible with very simple linear classifiers (e.g. logistic regression). Our representations are general, and can be combined with any classification method (including iterative inference methods). DeepWalk achieves all of that while being an online algorithm that is trivially parallelizable.
Our contributions are as follows:
The rest of the paper is arranged as follows. In Sections 2 and 3, we discuss the problem formulation of classification in data networks, and how it relates to our work. In Section 4 we present DeepWalk , our approach for Social Representation Learning. We outline ours experiments in Section 5, and present their results in Section 6. We close with a discussion of related work in Section 7, and our conclusions.
We consider the problem of classifying members of a social network into one or more categories. Let G = ( V,E ), where V represent the members of the network, E are their con-nections, E  X  ( V  X  V ), and G L = ( V,E,X,Y ) is a partially labeled social network, with attributes X  X  R | V | X  S where S is the size of the feature space for each attribute vector, and Y  X  R | V | X |Y| , Y is the set of labels.

In a traditional machine learning classification setting, we aim to learn a hypothesis H that maps elements of X to the labels set Y . In our case, we can utilize the significant information about the dependence of the examples embedded in the structure of G to achieve superior performance.
In the literature, this is known as the relational classifica-tion (or the collective classification problem [37]). Traditional approaches to relational classification pose the problem as an inference in an undirected Markov network, and then use iterative approximate inference algorithms (such as the iterative classification algorithm [32], Gibbs Sampling [15], or label relaxation [19]) to compute the posterior distribution of labels given the network structure.

We propose a different approach to capture the network topology information. Instead of mixing the label space as part of the feature space, we propose an unsupervised method which learns features that capture the graph structure inde-pendent of the labels X  distribution.

This separation between the structural representation and the labeling task avoids cascading errors, which can occur in iterative methods [34]. Moreover, the same representation can be used for multiple classification problems concerning that network.

Our goal is to learn X E  X  R | V | X  d , where d is small number of latent dimensions. These low-dimensional representations are distributed; meaning each social phenomena is expressed by a subset of the dimensions and each dimension contributes to a subset of the social concepts expressed by the space.
Using these structural features, we will augment the at-tributes space to help the classification decision. These features are general, and can be used with any classification algorithm (including iterative methods). However, we be-lieve that the greatest utility of these features is their easy integration with simple machine learning algorithms. They scale appropriately in real-world networks, as we will show in Section 6.
We seek to learn social representations with the following characteristics:
Our method satisfies these requirements by learning repre-sentation for vertices from a stream of short random walks, using optimization techniques originally designed for lan-guage modeling. Here, we review the basics of both random walks and language modeling, and describe how their combi-nation satisfies our requirements. Algorithm 1 DeepWalk ( G , w , d ,  X  , t ) Input: graph G ( V,E ) Output: matrix of vertex representations  X   X  R | V | X  d 1: Initialization: Sample  X  from U | V | X  d 2: Build a binary Tree T from V 3: for i = 0 to  X  do 4: O = Shuffle( V ) 5: for each v i  X  X  do 6: W v i = RandomWalk ( G,v i , t) 7: SkipGram( X , W v i , w ) 8: end for 9: end for outputs useful intermediate representations, it can adapt to changing network topology.
In this section we discuss the main components of our algorithm. We also present several variants of our approach and discuss their merits.
As in any language modeling algorithm, the only required input is a corpus and a vocabulary V . DeepWalk considers a set of short truncated random walks its own corpus, and the graph vertices as its own vocabulary ( V = V ). While it is beneficial to know V and the frequency distribution of vertices in the random walks ahead of the training, it is not necessary for the algorithm to work as we will show in 4.2.2.
The algorithm consists of two main components; first a random walk generator, and second, an update procedure. The random walk generator takes a graph G and samples uniformly a random vertex v i as the root of the random walk W v i . A walk samples uniformly from the neighbors of the last vertex visited until the maximum length ( t ) is reached. While we set the length of our random walks in the experiments to be fixed, there is no restriction for the random walks to be of the same length. These walks could have restarts (i.e. a teleport probability of returning back to their root), but our preliminary results did not show any advantage of using restarts. In practice, our implementation specifies a number of random walks  X  of length t to start at each vertex.
 Lines 3-9 in Algorithm 1 shows the core of our approach. The outer loop specifies the number of times,  X  , which we should start random walks at each vertex. We think of each iteration as making a  X  X ass X  over the data and sample one walk per node during this pass. At the start of each pass we generate a random ordering to traverse the vertices. This is not strictly required, but is well-known to speed up the convergence of stochastic gradient descent.

In the inner loop, we iterate over all the vertices of the graph. For each vertex v i we generate a random walk |W v i | = t , and then use it to update our representations (Line 7). We use the SkipGram algorithm [27] to update Algorithm 2 SkipGram( X , W v i , w ) 1: for each v j  X  X  v i do 2: for each u k  X  X  v i [ j  X  w : j + w ] do 3: J ( X ) =  X  log Pr( u k |  X ( v j )) 4:  X  =  X   X   X   X   X  X   X   X  5: end for 6: end for these representations in accordance with our objective func-tion in Eq. 3.
SkipGram is a language model that maximizes the co-occurrence probability among the words that appear within a window, w , in a sentence. It approximates the conditional probability in Equation 3 using an independence assumption as the following
Algorithm 2 iterates over all possible collocations in ran-dom walk that appear within the window w (lines 1-2). For each, we map each vertex v j to its current representation vector  X ( v j )  X  R d (See Figure 3b). Given the representa-tion of v j , we would like to maximize the probability of its neighbors in the walk (line 3). We can learn such a posterior distribution using several choices of classifiers. For exam-ple, modeling the previous problem using logistic regression would result in a huge number of labels (that is equal to | V | ) which could be in millions or billions. Such models require vast computational resources which could span a whole cluster of computers [4]. To avoid this necessity and speed up the training time, we instead use the Hierarchical Softmax [30, 31] to approximate the probability distribution.
Given that u k  X  V , calculating Pr ( u k |  X ( v j )) in line 3 is not feasible. Computing the partition function (normal-ization factor) is expensive, so instead we will factorize the conditional probability using Hierarchical softmax. We assign the vertices to the leaves of a binary tree, turning the pre-diction problem into maximizing the probability of a specific path in the hierarchy (See Figure 3c). If the path to vertex u is identified by a sequence of tree nodes ( b 0 ,b 1 , ... ,b ( b Now, Pr ( b l |  X ( v j )) could be modeled by a binary classifier that is assigned to the parent of the node b l as Equation 6 shows, where  X ( b l )  X  R d is the representation assigned to tree node b  X  X  parent. This reduces the computational complexity of calculating Pr( u k |  X ( v j )) from O ( | V | ) to O (log | V | ).
We can speed up the training process further, by assigning shorter paths to the frequent vertices in the random walks. Huffman coding is used to reduce the access time of frequent elements in the tree.
The model parameter set is  X  = {  X  ,  X  } where the size of each is O ( d | V | ). Stochastic gradient descent (SGD) [5] is used to optimize these parameters (Line 4, Algorithm 2). The derivatives are estimated using the back-propagation algorithm. The learning rate  X  for SGD is initially set to 2.5% at the beginning of the training and then decreased linearly with the number of vertices that are seen so far.
As shown in Figure 2 the frequency distribution of vertices in random walks of social network and words in a language both follow a power law. This results in a long tail of infre-quent vertices, therefore, the updates that affect  X  will be sparse in nature. This allows us to use asynchronous version of stochastic gradient descent (ASGD), in the multi-worker case. Given that our updates are sparse and we do not ac-quire a lock to access the model shared parameters, ASGD will achieve an optimal rate of convergence [36]. While we run experiments on one machine using multiple threads, it has been demonstrated that this technique is highly scalable, and can be used in very large scale machine learning [9]. Figure 4 presents the effects of parallelizing DeepWalk . It shows the speed up in processing BlogCatalog and Flickr networks is consistent as we increase the number of workers to 8 (Figure 4a). It also shows that there is no loss of predic-tive performance relative to the running DeepWalk serially (Figure 4b).
Here we discuss some variants of our proposed method, which we believe may be of interest.
One interesting variant of this method is a streaming ap-proach, which could be implemented without knowledge of the entire graph. In this variant small walks from the graph are passed directly to the representation learning code, and the model is updated directly. Some modifications to the learning process will also be necessary. First, using a decay-ing learning rate may no longer be desirable as it assumes the knowledge of the total corpus size. Instead, we can initialize the learning rate  X  to a small constant value. This will take longer to learn, but may be worth it in some applications. Second, we cannot necessarily build a tree of parameters any more. If the cardinality of V is known (or can be bounded), we can build the Hierarchical Softmax tree for that maximum value. Vertices can be assigned to one of the remaining leaves when they are first seen. If we have the ability to estimate the vertex frequency a priori, we can also still use Huffman coding to decrease frequent element access times.
Some graphs are created as a by-product of agents inter-acting with a sequence of elements (e.g. users X  navigation of pages on a website). When a graph is created by such a stream of non-random walks, we can use this process to feed the modeling phase directly. Graphs sampled in this way will not only capture information related to network structure, but also to the frequency at which paths are traversed.
In our view, this variant also encompasses language mod-eling. Sentences can be viewed as purposed walks through an appropriately designed language network, and language models like SkipGram are designed to capture this behavior.
This approach can be combined with the streaming variant (Section 4.4.1) to train features on a continually evolving network without ever explicitly constructing the entire graph. Maintaining representations with this technique could enable web-scale classification without the hassles of dealing with a web-scale graph.
In this section we provide an overview of the datasets and methods which we will use in our experiments. Code and data to reproduce our results will be available at the first author X  X  website. 1
An overview of the graphs we consider in our experiments is given in Figure 1.
To validate the performance of our approach we compare it against a number of baselines: http://bit.ly/deepwalk
In this section we present an experimental analysis of our method. We thoroughly evaluate it on a number of multi-label classification tasks, and analyze its sensitivity across several parameters.
To facilitate the comparison between our method and the relevant baselines, we use the exact same datasets and exper-imental procedure as in [39, 40]. Specifically, we randomly sample a portion ( T R ) of the labeled nodes, and use them as training data. The rest of the nodes are used as test. We repeat this process 10 times, and report the average per-formance in terms of both Macro-F 1 and Micro-F 1 . When possible we report the original results [39, 40] here directly.
For all models we use a one-vs-rest logistic regression im-plemented by LibLinear [11] extended to return the most probable labels as in [39]. We present results for Walk with (  X  = 80, w = 10, d = 128). The results for ( SpectralClustering , Modularity , EdgeCluster ) use Tang and Liu X  X  preferred dimensionality, d = 500.
In this experiment we increase the training ratio ( T R ) on the BlogCatalog network from 10% to 90%. Our results are presented in Table 2. Numbers in bold represent the highest performance in each column.
 DeepWalk performs consistently better than EdgeCluster , Modularity , and wvRN . In fact, when trained with only 20% of the nodes labeled, DeepWalk performs better than these approaches when they are given 90% of the data. The perfor-mance of SpectralClustering proves much more competitive, but DeepWalk still outperforms when labeled data is sparse on both Macro-F 1 ( T R  X  20%) and Micro-F 1 ( T R  X  60%).
This strong performance when only small fractions of the graph are labeled is a core strength of our approach. In the following experiments, we investigate the performance of our representations on even more sparsely labeled graphs. In this experiment we vary the training ratio ( T R ) on the Flickr network from 1% to 10%. This corresponds to having approximately 800 to 8,000 nodes labeled for classification in the entire network. Table 3 presents our results, which are consistent with the previous experiment. DeepWalk outperforms all baselines by at least 3% with respect to Micro-F . Additionally, its Micro-F 1 performance when only 3% of the graph is labeled beats all other methods even when they have been given 10% of the data. In other words, DeepWalk can outperform the baselines with 60% less training data. It also performs quite well in Macro-F 1 , initially performing close to SpectralClustering , but distancing itself to a 1% improvement.
The YouTube network is considerably larger than the previous ones we have experimented on, and its size pre-vents two of our baseline methods ( SpectralClustering and Modularity ) from running on it. It is much closer to a real world graph than those we have previously considered.
The results of varying the training ratio ( T R ) from 1% to 10% are presented in Table 4. They show that DeepWalk significantly outperforms the scalable baseline for creating graph representations, EdgeCluster . When 1% of the labeled nodes are used for test, the Micro-F 1 improves by 14%. The Macro-F 1 shows a corresponding 10% increase. This lead narrows as the training data increases, but DeepWalk ends with a 3% lead in Micro-F 1 , and an impressive 5% improvement in Macro-F 1 .

This experiment showcases the performance benefits that can occur from using social representation learning for multi-label classification. DeepWalk , can scale to large graphs, and performs exceedingly well in such a sparsely labeled environment.
In order to evaluate how changes to the parameteriza-tion of DeepWalk effect its performance on classification tasks, we conducted experiments on two multi-label classifi-cations tasks ( Flickr , and BlogCatalog ). In the interest of brevity, we have fixed the window size and the walk length to emphasize local structure ( w = 10, t = 40). We then vary the number of latent dimensions ( d ), the number of walks started per vertex (  X  ), and the amount of training data available ( T R ) to determine their impact on the network classification performance.
Figure 5a shows the effects of increasing the number of latent dimensions available to our model.

Figures 5a1 and 5a3 examine the effects of varying the dimensionality and training ratio. The performance is quite consistent between both Flickr and BlogCatalog and show that the optimal dimensionality for a model is depen-dent on the number of training examples. (Note that 1% of Flickr has approximately as many labeled examples as 10% of BlogCatalog ).

Figures 5a2 and 5a4 examine the effects of varying the dimensionality and number of walks per vertex. The relative performance between dimensions is relatively stable across different values of  X  . These charts have two interesting observations. The first is that there is most of the benefit is accomplished by starting  X  = 30 walks per node in both graphs. The second is that the relative difference between different values of  X  is quite consistent between the two graphs. Flickr has an order of magnitude more edges than BlogCatalog , and we find this behavior interesting.
These experiments show that our method can make useful models of various sizes. They also show that the performance of the model depends on the number of random walks it has seen, and the appropriate dimensionality of the model depends on the training examples available.
Figure 5b shows the effects of increasing  X  , the number of random walks that we start from each vertex.

The results are very consistent for different dimensions (Fig. 5b1, Fig. 5b3) and the amount of training data (Fig. 5b2, Fig. 5b4). Initially, increasing  X  has a big effect in the results, but this effect quickly slows (  X  &gt; 10). These results demonstrate that we are able to learn meaningful latent representations for vertices after only a small number of random walks.
The main differences between our proposed method and previous work can be summarized as follows: 1. We learn our latent social representations, instead of 2. We do not attempt to extend the classification proce-3. We propose a scalable online method which uses only 4. We apply unsupervised representation learning to graphs. In this section we discuss related work in network classifica-tion and unsupervised feature learning.
Relational classification (or collective classification ) meth-ods [15, 25, 32] use links between data items as part of the classification process. Exact inference in the collective classi-fication problem is NP-hard, and solutions have focused on the use of approximate inference algorithm which may not be guaranteed to converge [37].

The most relevant relational classification algorithms to our work incorporate community information by learning clusters [33], by adding edges between nearby nodes [14], by using PageRank [24], or by extending relational classification to take additional features into account [43]. Our work takes a substantially different approach. Instead of a new approxi-mation inference algorithm, we propose a procedure which learns representations of network structure which can then be used by existing inference procedure (including iterative ones).

A number of techniques for generating features from graphs have also been proposed [13, 17, 39  X  41]. In contrast to these methods, we frame the feature creation procedure as a repre-sentation learning problem.

Graph Kernels [42] have been proposed as a way to use relational data as part of the classification process, but are quite slow unless approximated [20]. Our approach is com-plementary; instead of encoding the structure as part of a kernel function, we learn a representation which allows them to be used directly as features for any classification method.
Distributed representations have been proposed to model structural relationship between concepts [18]. These repre-sentations are trained by the back-propagation and gradient descent. Computational costs and numerical instability led to these techniques to be abandoned for almost a decade. Recently, distributed computing allowed for larger models to be trained [4], and the growth of data for unsupervised learning algorithms to emerge [10]. Distributed represen-tations usually are trained through neural networks, these networks have made advancements in diverse fields such as computer vision [22], speech recognition [8], and natural language processing [1, 7].
We propose DeepWalk , a novel approach for learning latent social representations of vertices. Using local infor-mation from truncated random walks as input, our method learns a representation which encodes structural regulari-ties. Experiments on a variety of different graphs illustrate the effectiveness of our approach on challenging multi-label classification tasks.

As an online algorithm, DeepWalk is also scalable. Our results show that we can create meaningful representations for graphs which are too large for standard spectral methods. On such large graphs, our method significantly outperforms other methods designed to operate for sparsity. We also show that our approach is parallelizable, allowing workers to update different parts of the model concurrently.

In addition to being effective and scalable, our approach is also an appealing generalization of language modeling. This connection is mutually beneficial. Advances in lan-guage modeling may continue to generate improved latent representations for networks. In our view, language mod-eling is actually sampling from an unobservable language graph. We believe that insights obtained from modeling ob-servable graphs may in turn yield improvements to modeling unobservable ones.

Our future work in the area will focus on investigating this duality further, using our results to improve language modeling, and strengthening the theoretical justifications of the method.
 [1] R. Al-Rfou, B. Perozzi, and S. Skiena. Polyglot: [2] R. Andersen, F. Chung, and K. Lang. Local graph [3] Y. Bengio, A. Courville, and P. Vincent. Representation [4] Y. Bengio, R. Ducharme, and P. Vincent. A neural [5] L. Bottou. Stochastic gradient learning in neural [6] V. Chandola, A. Banerjee, and V. Kumar. Anomaly [7] R. Collobert and J. Weston. A unified architecture for [8] G. E. Dahl, D. Yu, L. Deng, and A. Acero.
 [9] J. Dean, G. Corrado, R. Monga, K. Chen, M. Devin, [10] D. Erhan, Y. Bengio, A. Courville, P.-A. Manzagol, [11] R.-E. Fan, K.-W. Chang, C.-J. Hsieh, X.-R. Wang, and [12] F. Fouss, A. Pirotte, J.-M. Renders, and M. Saerens. [13] B. Gallagher and T. Eliassi-Rad. Leveraging [14] B. Gallagher, H. Tong, T. Eliassi-Rad, and [15] S. Geman and D. Geman. Stochastic relaxation, gibbs [16] L. Getoor and B. Taskar. Introduction to statistical [17] K. Henderson, B. Gallagher, L. Li, L. Akoglu, [18] G. E. Hinton. Learning distributed representations of [19] R. A. Hummel and S. W. Zucker. On the foundations [20] U. Kang, H. Tong, and J. Sun. Fast random walk graph [21] R. I. Kondor and J. Lafferty. Diffusion kernels on [22] A. Krizhevsky, I. Sutskever, and G. E. Hinton. [23] D. Liben-Nowell and J. Kleinberg. The link-prediction [24] F. Lin and W. Cohen. Semi-supervised classification of [25] S. A. Macskassy and F. Provost. A simple relational [26] S. A. Macskassy and F. Provost. Classification in [27] T. Mikolov, K. Chen, G. Corrado, and J. Dean. [28] T. Mikolov, I. Sutskever, K. Chen, G. S. Corrado, and [29] T. Mikolov, W.-t. Yih, and G. Zweig. Linguistic [30] A. Mnih and G. E. Hinton. A scalable hierarchical [31] F. Morin and Y. Bengio. Hierarchical probabilistic [32] J. Neville and D. Jensen. Iterative classification in [33] J. Neville and D. Jensen. Leveraging relational [34] J. Neville and D. Jensen. A bias/variance [35] M. E. Newman. Modularity and community structure [36] B. Recht, C. Re, S. Wright, and F. Niu. Hogwild: A [37] P. Sen, G. Namata, M. Bilgic, L. Getoor, B. Galligher, [38] D. A. Spielman and S.-H. Teng. Nearly-linear time [39] L. Tang and H. Liu. Relational learning via latent [40] L. Tang and H. Liu. Scalable learning of collective [41] L. Tang and H. Liu. Leveraging social media networks [42] S. Vishwanathan, N. N. Schraudolph, R. Kondor, and [43] X. Wang and G. Sukthankar. Multi-label relational [44] W. Zachary. An information flow model for conflict and
