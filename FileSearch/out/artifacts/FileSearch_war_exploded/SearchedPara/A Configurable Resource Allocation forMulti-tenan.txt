 Emna Hachicha 1( Motivated by the need of adopting agile, flexible and cost-effective business solutions, enterprises are looking for available business processes outside of their organizations to quickly adapt to new business requirements and also reduce process development and maintenance costs. Cloud Computing is recently gaining momentum due to its capability of outsourcing service-based business processes based on a scalable pay-per-use model. According to the National Institute of Standards and Technology (NIST), Cloud Computing is a model that enables providers sharing their computing resources (e.g., networks, servers, storage, applications, and services) and users accessing them in an ubiquitous, convenient and on-demand way with a minimal management effort [ 1 ]. In such a multi-tenant environment, using configurable process models [ 2 ] allows a cloud business process provider to deliver a customizable process that can be config-ured by different tenants according to their specific needs [ 3 ].
 Different approaches for configurable process modeling have been proposed so far, mainly with a focus on configuring the control flow [ 4 ]. Even though the concept of configurable process models is highly complementary to cloud com-puting, there has been hardly any uptake in that area. The problem is apparently that specifics of cloud computing, specifically in how resources can be configured and integrated, are hardly considered in configurable process modeling. The few proposals on extending configuration to resources [ 5  X  7 ] do not cover required cloud concepts such as elasticity or multi-tenancy and focus on human resources and their dependencies [ 8  X  10 ].
 tion concepts for cloud computing. More specifically, we define a novel approach for modeling configurable processes with configurable cloud resource allocation operators that allow to explicitly model resource allocation alternatives in multi-tenant process models including elasticity and shareability. Our concepts have been prototypically implemented in the Signavio editor. We evaluate our app-roach using experiments, which demonstrate its effectiveness.
 real-world case of a Telco operator and identifies requirements. Section 3 defines our approach for configurable resource allocation. Section 4 describes our imple-mentation and the evaluation results. Finally, Sect. 6 concludes the paper and presents an outlook on future work. In this section, we describe the example from one of our industry partners. Then, we revisit essential concepts from configurable process modeling and cloud computing to identify requirements that are not yet addressed by prior research. 2.1 Motivation Our research is motivated by a real business of the Telco operator Orange, one of our industry partners. In order to consolidate its expertise in service supervision processes, Orange affiliates share the configurable process in Fig. 1 in a com-mon infrastructure 1 . According to its specific needs, each affiliate configures the process by taking into account the countries legislation and internal regulations. For instance, suppose that an affiliate A does not have access to the resource test management functionalities (the subprocess starting with the activity does not have the right to neither perform manual tasks (activity ticket escalation (activity a 14 ). Therefore, it configures the process in Fig. 1 to exclude these functionalities, resulting in a variant as illustrated in Fig. 2 . allocation in multi-tenant cloud environments, the affiliate defines the required resources for its derived variant in an ad-hoc manner . For example, for the derived variant in Fig. 2 , the activity a 1 needs a network resource to communi-cate with a virtual machine via virtual networking. The network type is manual with a bandwidth of 100 Mbit/s and which is accessible for a specific security group. These parameters are identified in the  X  X esource properties X  label in Fig. 2 . Furthermore, the activity needs an elastic network resource (vertical elas-ticity), that for security issues is not shared with other activities or instances. These parameters are specified in the  X  X esource behavior X  label.
 Suppose that another affiliates B configures the process as shown in Fig. 3 including its required resources. Activity a 1 needs an elastic network resource (horizontally, vertically or both according to the run-time requirements). The network is dynamic with a bandwidth of 100 Gbit/s in order to support the work-load from different variants X  instances. We notice that the allocated resources for the remaining activities are similar to those allocated in the variant 1 in Fig. 2 but with some variations.
 commonalities between their executed tasks, but also between their allocated resources. In fact, different tenants allocate similar resources that slightly differ according to the resource properties and behavior. Up until now, these allocation parameters are hard-coded in an ad-hoc manner which is certainly undesirable in such a multi-tenant environment. Therefore, there is a need for a process configuration support at the cloud resource allocation level and which shifts the cloud resource allocation parameters from the tenant side (at the process variant level) to the cloud process provider side (at the configurable process level). 2.2 Configurable Process Models The process in Fig. 1 has been modeled with the configurable Business Process Model and Notation (c-BPMN). A configurable process models such as in c-BPMN contain configurable elements whose configuration decision is made at design-time [ 2 ]. The configurable elements are graphically modeled with a thick line. In case of c-BPMN, activities and gateways can be configurable. A configurable activ-ity can be included (i.e. ON ) or excluded (i.e. OFF ) from the process model. For example, in Fig. 1 , the activity a 11 is configurable. It can be configured either to ON in order to keep it in the process or to OF F in order to exclude it from the process. A configurable gateway has a generic behavior which is restricted by con-figuration. It can be configured by (1) changing its type while preserving its behav-ior and/or (2) restricting its incoming (respectively outgoing) branches in case of a join (respectively split) [ 2 ]. For example, the configurable OR ( configured to any gateway type while a configurable AND ( configured to an AN D . We denote by c c c iff the behavior of that of c c . For instance, AN D OR c , Seq XOR c etc.
 Once the configuration choices are selected for all configurable elements, algorithms such as the one presented in [ 2 ] can be used to derive the specific variant by removing the nodes and edges that have been excluded. For example, the process variant in Fig. 2 is derived as a result of the following configurations:  X 
XOR a and a 3 ;  X 
XOR a and a 7 ;  X 
OR 4 is configured to an  X 
XOR Various configurable modeling languages with comparable capabilities as c-BPMN have been proposed [ 2 , 4 , 11  X  13 ]. These works have been focused on the control flow perspective. The general benefits of integrating cloud and BPM have been stressed by different authors [ 14 , 15 ]. If configurable process models have the potential to be an efficient solution for modeling multi-tenant business processes [ 3 ], they need to integrate the resource perspective. 2.3 Resource Perspective in Cloud-Based Business Processes Not only for cloud-based business processes, but also for BPM in general, the research on resources has been scarce. Specific topics of investigation in this area are human resource allocation [ 9 , 10 ] and scheduling [ 16  X  18 ]. The workflow resource patterns [ 19 , 20 ] are often used as a benchmark for corresponding mod-eling concepts such as [ 8 ]. Some works consider cloud characteristics explicitly: S. Schulte et al. in [ 21 , 22 ] develop a platform that allow Business Process Man-agement Systems (BPMS) to manage resource elasticity. L. Pufahl et al. in [ 23 ] handle batch activities and allow its flexible adjustments at run-time. Relevant for configurable processes in the cloud are the following character-istics. The cloud offers three main types of resources at the Infrastructure-as-a-Service (IaaS) model which can be spread into virtual machines (VMs). They consist of compute , network ,and storage resources. Compute resources are a col-lection of Physical Machines (PMs) where each contains one or more processors, memory, network interface and local I/O [ 24 ]. These PMs require interconnec-tion with a high bandwidth network using network resources. Last, the storage resources provide persistent storage services where each service have varying lev-els of data consistency and reliability. Two main properties are specified to the Cloud resources: elasticity ,and shareability . First, the Cloud infrastructure pro-vides two types of elasticity, vertical and horizontal, in order to account for the run-time workload. The vertical elasticity is the possibility to scale up and down by adding or removing resources to an existing activity in order to increase its capacity. The horizontal elasticity is the possibility of adding or removing instances of activities with their consumed resources. Second, the resource share-ability represents one of the important features in cloud environments. Accord-ing to security, availability and scalability issues in the process, an allocated resource may or may not be shareable between multiple activities, between mul-tiple instances of the same activity or both. A resource shared between multiple activities is referred to as shareable and can be consumed by more than one activity instance at the same time within the same process instance. A resource shared between multiple instances of the same activity is referred to as batch and can be utilized by multiple instances of the same activity within multi-ple process instances. An hybrid resource is shareable and batch. These cloud resources can be specified using the RDF-based Cloud business Process Ontology (CloudPrO) [ 25 ], which extends in turn the Business Process Modeling Ontol-ogy (BPMO) [ 26 ]. Its properties are grounded in the cloud computing API Open Cloud Computing Interface (OCCI) [ 27 ], allowing statements such as resources of type compute contain speed which corresponds to the frequency of CPU Clock in gigahertz.
 posed towards such a configuration of the resource perspective [ 5  X  7 ]. In [ 5 ], La Rosa et al. propose the configurable integrated EPC (C-iEPC) with features for capturing resource, data and physical objects. Configuration of these ele-ments is achieved using configurable connectors borrowed from the control flow perspective to model the variable allocation of resources. Their focus is, however, on human resources and there is no direct support for cloud resources including resource sharing and resource elasticity . Moreover, A. Kumar and W. Yao in [ 6 ] propose an approach for configurable business processes that integrates resource and data needs using process templates and business rules. Resources in cloud environment are not covered in their approach and flexible resources selection is not addressed. In [ 7 ], A. Hallerbach et al. extend the Pro cess v ariants by op tions (Provop) framework to adequately model and manage large collections of process variants. Concepts such as resource allocation and resource selection are not considered. Table 1 summarizes these approaches and relates them to properties that are important in a cloud setting. We observe that resource vari-ability, cloud features, and allocation are only partially covered or not at all. In the following, we aim to fill these gaps by the definition of our novel approach. In this section, we present our configurable cloud resource allocation approach for multi-tenant business processes development. As mentioned before, cloud resources X  allocation takes into account two main parameters: (1) the desired resources and their properties and (2) the desired resource behaviour (i.e. shareability and elasticity). Therefore, we identify three main operators related to the configuration of the resource properties and behavior: (i) configurable resource assignment operator denoted as A c (Sect. 3.1 ), (ii) configurable resource elasticity operator denoted as E c (Sect. 3.2 ) and (ii) configurable resource sharing/batching operator denoted as ( S/B ) c (Sect. 3.3 ). Then, an excerpt of a configurable process model with the configurable resource operators is depicted in Fig. 4 and explained in the following.
 3.1 Configurable Resource Assignment Operator The configurable resource assignment operator A c allows the modeling of a vari-able number of resources allocated to a specific activity . For instance, in our run-ning examples in Figs. 2 and 3 , the activity a 1 needs either (i) a network resource  X  X etwork1 X  and a compute resource  X  X ompute3 X  or (ii) a network resource  X  X et-work2 X  and a compute resource  X  X ompute3 X . Therefore, through a design-time choice in the configurable process that allows the tenants to select one of the available options. To do so, we define two main parameters for (i) a configurable type and (ii) a range (see A c in Fig. 4 ).
 The configurable type can be either a configurable OR ( OR c AND ( AN D c ) or a configurable XOR ( XOR c ). These connectors have the same behavior as the configurable control flow connectors. They are configured in the same way as the configurable connectors of the control-flow perspective (see Sect. 2.2 ). In our example in Fig. 4 , the activity a 1 is connected to the cloud resources  X  X etwork2 X ,  X  X etwork1 X  and  X  X ompute3 X  through an may configure the OR c to an XOR associated to  X  X etwork2 X  and  X  X etwork1 X  in order to specify that either  X  X etwork2 X  or  X  X etwork1 X  can be allocated to while  X  X ompute3 X  is not needed. The allocation decision between  X  X etwork1 X  and  X  X etwork2 X  is therefore left to the run-time depending on the environment requirements, availability of the resources, etc.
 on the configuration choice. It is specified by the cloud process provider as a configuration guideline for the tenants. A range specifies the minimal and max-imal number of the resources that are recommended to be allocated from each resource type ( range C for compute, range N for network and For instance, a cloud process provider recommends that at least one compute and one network resources are allocated to the activity a set the minimum of range C and range N to 1. By default, the range minimum is set to 0 and the range maximum is set to the total number of the resources from a specific type that are available for the activity. The configuration of the con-nectors in the configurable type should respect this constraints. For example, having the minimum min range C =1and min range N = 1, the aforementioned configuration of the OR c to an XOR associated to the resources  X  X etwork1 X  and  X  X etwork2 X  is not valid.
 their configuration constraints. The configurable type follows the configurable connectors from the control flow perspective. Its configuration constraints are the same as described in Sect. 2.2 . Each of the range parameters has a mini-mum min (set by default to 0) and a maximum max . We denote by and | R S | the number of compute, network and storage resources respectively provided for a specific activity.
 the process variant in Fig. 2 , the configurable resource assignment operator in the process in Fig. 4 is configured as following:  X  the configurable type OR c is configured to an AN D associated to the resources network 1 and compute 3 ;  X  This configuration does not violate the range that is assumed defined by the cloud process provider as follows: range C ( min range N ( min =1 ,max = 1); range S ( min =0 ,max = 0).
 The resource assignment operator is the main operator in the configurable resource allocation modeling. It allows to define the pool of resources that may be allocated to the process activities. Once it is specified, the configurable shar-ing/batching (see Sect. 3.3 ) and the configurable elasticity (see Sect. 3.2 )opera-tors can be used to model the behavior of the identified resources. 3.2 Configurable Resource Elasticity Operator During resource allocation, an organization may have different requirements regarding the anticipation of its activities workload, and thus may request differ-ent elasticity configurations. For instance, in a specific organization, an activity may require a network resource of at least 100 Mbit/s but may go to 600 Mbit/s during pick hours. At allocation time, a network resource of size 100 Mbit/s which can scale up to a 600 Mbit/s by vertical elasticity is selected. In a second organi-zation, the same activity requires a network resource of at least 100 Mbit/s but may go to a maximum of 150 Mbit/s. The organization requests an horizontal elasticity that adds multiple activities X  instances to acquire a 150 Mbit/s. In order to model such variability at the elasticity level, our proposed config-urable resource elasticity operator E c takes into account two parameters X  con-figurations: (i) the set of resources to be elastic and (ii) the way they scale up and down (i.e. elasticity type). Table 3 summarizes the configurable resource elasticity parameters and configuration constraints. Similarly to the configurable resource assignment operator, the first parameter (configurable type) can be either an OR c , XOR c or AN D c and is used to model the number of resources to be elastic. For instance in our example in Fig. 4 , either  X  X etwork1 X  or  X  X et-work2 X  can be elastic (they are connected through an XOR c may configure the XOR c to a  X  X equence X  associated to  X  X etwork2 X  in order to specify that only  X  X etwork2 X  can be elastic. The second parameter (configurable elasticity type) specifies the elasticity behavior. Four elasticity types: (i) horizontal), (ii) V (i.e. vertical), (iii) HV (i.e. hybrid) and (iv) figurable hybrid) are defined from which only HV c is configurable and can be configured to H , V or HV .
 Besides the configuration constraints in Table 3 , additional configuration guidelines can be specified by the cloud process provider regarding the con-figuration of the elasticity type. These guidelines assist the tenants for selecting the right configuration of the configurable HV c . They are derived according to the maximal capacity that is provided by the cloud provider during the scale up (vertical or horizontal elasticity) which is specified in the Service Level Agree-ment (SLA) [ 28 ]. In case a resource has a configurable resource elasticity type , two parameters C H and C V are specified in the SLA which correspond to the maximal capacities provided by the cloud provider if the configurations and V are selected respectively. We denote by C a the maximal capacity required by an activity  X  a  X  for a tenant specific process variant. The configuration guide-lines of the configurable HV c type are defined in Eq. ( 1 ).
 where min ( C H ,C V ) returns the minimal capacity. The configuration ommended to the tenant in case (1) the maximal capacity required by its activity is less than or equal to the maximal capacity provided by the cloud provider in the horizontal elasticity and (2) the capacity of the horizontal elasticity is less than that of the vertical elasticity. The configuration V the same aforementioned conditions are valid for C V . The configuration recommended in case C a is greater than C V and C H but is less than or equal to their sum. For example, suppose that a tenant specifies that the activity the process in Fig. 4 requires a maximal capacity of 100 uc of-capacity where unit-of-capacity can be a storage, compute or network related units). The cloud provider specifies that a maximal capacity of 200 provided for the vertical elasticity (i.e. C V = 200 uc ) and a maximal capacity of 150 uc can be provided for the horizontal elasticity (i.e.
 C a  X  C H and C a  X  C V then H and V are potential configurations. However, as C
H is the minimal ensured capacity, the configuration H is recommended. 3.3 Configurable Resource Sharing/Batching Operator As different tenants sharing the configurable process may have different require-ments, the shareability of a resource should account for variability. For instance, in our running examples in Figs. 2 and 3 , the resource  X  X ompute3 X  is shareable between multiple instances of two activities in the first process ( (i.e. it is shared and batch) while it is shared between three activities in the second process ( a 1 , a 13 and a 14 ). Therefore, we define the configurable resource sharing operator denoted as ( S/B ) c which allows to model the variability accord-ing to (i) the number of instances/activities that can share the corresponding resource and (ii) the way the activities share this resource (i.e. in a shareable, batch or hybrid manner) (see ( S/B ) c operator in Fig. 4 ).
 Table 4 summarizes the configurable resource sharing/batching parameters and their configuration constraints. The first parameter (configurable type) is similar to the configurable type in the configurable resource assignment and configurable elasticity operators. It can be either an OR c and allows to model the behaviour of the resource shareability. Referring to our example in Fig. 4 ,an AN D c is used to connect the resource  X  X ompute3 X  to the activities a 1 , a 13 and a 14 . Since an AN D c can be only configured to an AN D with possible restricted branches, one can configure the type by selecting only a subset of the activities to share the corresponding resource. For example, the
AN D c can be configured to an AN D associated to a to specify that only a 1 and a 13 may share  X  X ompute3 X . The second parameter (configurable shareability type) allows to define the way the activities share the resource. Four shareability types: (i) SB (i.e. hybrid), (ii) B (i.e. batch) and (iv) SB c (configurable hybrid) are defined from which only is configurable and can be configured to S , B or SB .
 For instance, in order to derive the shareability configuration of the resource  X  X ompute3 X  in the process variant in Fig. 2 , the configurable shareability oper-ator in Fig. 4 is configured as follows:  X 
AN D c is configured to an AN D associated to a  X  The configurable shareability type SB c is configured to a in Fig. 2 is hybrid, i.e. it is shared between multiple instances and activities) In this section, we first outline our extension of Signavio Process Editor of concept to validate our approach. Signavio is an open source web application for developing process models in BPMN. Thus, it can support our context of cloud-based processes. More details on our application can be found at http://www-inf. it-sudparis.eu/SIMBAD/tools/Configurable-RA-BPM . We have added two main functionalities to Signavio as follows: 1. Cloud resources X  modeling: We have extended BPMN 2.0 in order to allow 2. Configurable resource allocation operators: This functionality allows to allo-In order to evaluate the usefulness and effectiveness of our approach, we per-formed experiments using a real dataset of business processes from Orange, a french telecom industrial partner. Different variants of business processes for VoIP assurance in France are defined and used by Orange. These variants and their allocated resources are manually and separately described. In total, there are 28 variants of the same process using about 30 different resources. Some activities have the same allocated resources in multiple variants, while oth-ers have different allocated resources and different needs for shareability and elasticity. In order to consolidate their expertise in telecommunication domain, Orange experts were interested in constructing one consolidate configurable model that also depicts the different resource allocation strategies. To construct the configurable model, we proceeded in three different ways. First, using our approach, we designed a configurable process model that depicts the variability both at the control flow and resource flow levels. Second, we mod-elled a configurable process model with a basic approach that does not consider the variability at the resource level. Thus, whenever an activity has different resource allocation possibilities, it is duplicated in the model in a choice block to express that there exist different resource allocation possibilities and so one should be selected. Third, we designed the same configurable process model using the approach introduced by La Rosa et al. in [ 5 ] which is close to ours but does not consider the variability at the shareability and elasticity levels. Therefore, when such a variability occurs (e.g., an activity has the same allocated resources in different variants but with different needs for elasticity and shareability) the same strategy as in the second approach (i.e. duplication of activities) is used. Figure 6 shows three process fragments from Model 1, Model 2 and Model 3. An activity a 1 is assigned to a variable number of resources (network and compute). The compute resource can be shared between a variable number of the activ-ities (instances) a 1 and a 2 . According to our approach (represented by Model 1), a 1 is linked to the compute and network resources with a configurable via the configurable assignment operator. The compute resource is shared and therefore is linked to a 1 and a 2 with a configurable AN D Sharing/Batching operator. In the basic approach (represented by Model 2), there are two duplications. The first one is to model the configurable allocation. It is represented in the model by an activity a 1 assigned to the compute resource, and another activity a 1 assigned to the network resource which are connected by a configurable OR . The second one is to model the configurable shareability. It is represented in the model by the activities a 1 and a 2 resource and connected through a configurable AND that represents the con-figurable shareability choice. In the approach of La Rosa et al. (represented by Model 3), there is only one duplication to model the configurable shraeability. The configurable allocation is supported and can be modelled as in our approach. structural complexity. We computed the well known complexity metrics proposed in the literature: CFC (Control Flow Complexity), ACD (Average Connector Degree), CNC (Coefficient of Network Connectivity) and density. The CFC [ 29 ] metric evaluates the complexity of the process with respect to the presence of gateways OR, AND and XOR. The ACD [ 30 ] metric generates the number of nodes that a connector has as an average. The CNC [ 31 ] gives the ratio of edges to nodes. Whereas the density [ 32 ] metric relates the number of edges to the number of maximum edges that can exist among nodes.
 trol flow perspective in business processes. We also use these metrics to compute the complexity of the resource flow perspective since we are using control-flow like operators (i.e. XOR, OR and AND). The obtained values for the three configurable process models are summarized in Table 5 . Model 1 refers to the configurable process model constructed with our approach; Model 2 is the con-figurable process model constructed with a basic approach that does not take the variability at the resource level; and Model 3 is the configurable process model constructed using the approach in [ 5 ]. For Model 1 and Model 3, we separately compute the complexity metrics at the control flow (referred to as [metric] resource flow (referred to as [metric] r ) perspectives. This is a logical choice since the resource and control-flow perspectives are separately modeled.
 compared to values of Model 2. For instance, even by summing the and CFC r (25) of Model 1, the result remains smaller than the of Model 2. Hence, separately modelling the control-flow and resource-flow vari-ability decreases the complexity of the model. We also notice that the density density c (0.02), and density r (0.04) of Model 1 are greater than the density density c (0.01) of Model 2. However, as stated in [ 33 ], the density metric is negatively correlated with the complexity of the model.
 1 has better complexity values for the control-flow while Model 3 has better complexity values for the resource-flow. This can be explained by the fact that Model 1 fully supports the resource variability modelling (i.e. allocation, share-ability and elasticity). Therefore, we do not need to do duplications in the con-trol flow and hence we obtained better complexity values for the control flow. Whereas, Model 3 is less expressive and only supports the resource variability modelling (i.e. allocation). So, it has better complexity values for the resource flow. Since we did duplications in the control flow to model the variability in the shareability and elasticity, we obtained worst complexity values for the control flow. In this paper, we proposed an approach for configurable cloud resource alloca-tion in multi-tenant business processes. Our aim is to shift the cloud resource allocation from the tenant side to the cloud process provider side for a central-ized resource allocation management. Through configuration, different tenants can easily derive their allocated resources. The approach has been described through a real example from an industrial partner and implemented in Signavio process editor. Further, we conduct experiments that validate our proposal. Some potential threats to validity exist in our study. First, we have been interested in IaaS resources since they are the raw resources on which all others (i.e. PaaS and SaaS resources) are built. Our approach can be easily extended to consider the PaaS and SaaS resources. Second, we have shown the feasibility of our approach through real examples from an industrial partner. The work requests a larger dataset to further evaluate the effectiveness of our approach. Third, the proposed configurable resource operators as well as dependencies among cloud resources should formally be described, which are of a high impor-tance in a multi-tenant environment. We aim, in future work, at extending our previous work [ 25 ] so that we define these dependencies in a flexible way so that tenants can customize them depending on their needs. In fact, research on cloud resources X  management in BPM still at its beginning stage.

