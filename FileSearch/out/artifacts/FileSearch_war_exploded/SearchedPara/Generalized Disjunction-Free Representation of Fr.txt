 Discovering of frequent patterns in large databases is an important data mining problem. The problem was introduced in [1] for a sales transaction database. Frequent patterns were defined there as sets of items that are purchased together frequently. Frequent patterns are commonly used for building association rules. Patterns and association rules can be generalized by admitting negation. A sample rule with negation could state that 75% of customers who buy coke also buy chips and neither beer nor milk. Admitting negation usually results in abundance of mined patterns. It is thus preferable to discover and store a possibly small fraction of patterns from which one can derive all other significant patterns. In [2-3], a generalized disjunction-free literal set representation (GDFLR) was offered as a lossless representation of all frequent patterns, both with and without negation. GDFLR is by orders of magnitude more concise than all frequent patterns [2]. Nevertheless, GDFLR can still be numerous. In addition, the patterns with large number of negated items might not be of interest to a user at all. In this paper, we propose the k -GDFLR representation as an adaptation of GDFLR to represent all frequent patterns with at most k negated items. We introduce necessary modifications in algorithms discovering the GDFLR representation to adapt them to discover freq uent patterns with a restricted number of negated items. Finally, we present the results of the experiments testing the conciseness of the new representation w.r.t. the number of allowed negated items. 
A pattern consisting of items x 1 , ..., x m and negations of items x m +1 , ..., x n is denoted any negated item. Otherwise, X is called a pattern with negation ( s ). A pattern obtained from X by negating any number of items in X is called a variation of X . 
One can easily note that sup ( X  X  {( X  x )}) = sup ( X )  X  sup ( X  X  { x }) [6]. Multiple usage of this property enables calculation of the supports of patterns with any number of negated items from the supports of their positive variations and their subsets [6]: 
Nevertheless, the knowledge of the supports of only frequent positive patterns may be insufficient to derive the supports of all frequent patterns with negation [6]. { x m +1 , ..., x n } = { x 1 , ..., x m } and no item in { x m +1 , ..., x n }. The number of transactions violating rule r determinable from the supports of subsets of { x 1 , ..., x m , x m +1 , ..., x n }: 
The following equation follows immediately from Eq. 1 and Eq. 2: are based on a superset of { x 1 , ..., x n }, are also implications. Such implications can be used for calculating the supports of patterns on which they are based. E.g., ac  X  b  X  f implies that sup ({ ac }) = sup ({ abc }) + sup ({ acf })  X  sup ({ abcf }). Hence, the support of Let us analyze sample transactional database D presented in Table 1. Each row in D reports items that were bought by a customer during a single visit to a supermarket. there is an implication based on a positive pattern, then the support of this pattern is derivable from the supports of its proper subsets [5]. Each such pattern is called a generalized disjunctive set . Otherwise, it is called a generalized disjunction-free set . It can be noted that supersets of generalized disjunctive sets are generalized disjunctive and subsets of generalized disjunction-free sets are generalized disjunction-free [5]. In this section, we offer a generalized disjunction-free literal set representation of frequent patterns with at most k negations ( k -GDFLR) as consisting of the following components: 1. the main component ( k -Main ) containing each positive pattern (stored with its 2. the infrequent border ( k-IBd  X  ) containing each positive pattern all variations of 3. the generalized disjunctive border ( k-DBd  X  ) containing each positive pattern It can be observed that k-GDFLR equals GDFLR (please, see [2-3] for the definition of GDFLR) for k =  X  (unrestricted number of negated items allowed). Lemma 3.1. a) If P belongs to k-Main , then all subsets of P belong to k-Main . b) If P belongs to k-IBd  X  , then for each superset of P all its variations with at most k c) If P belongs to k-DBd  X  , then each superset of P is either generalized disjunctive Lemma 3.2. a) k-Main  X  k-DBd  X  is the set containing each positive pattern that has at least one b) k-Main  X  k-DBd  X   X  k-IBd  X  is the set containing each positive pattern all proper c) k-DBd  X   X  k-IBd  X  is the set containing each positive pattern not contained in d) 2 I \ ( k-Main  X  k-DBd  X   X  k-IBd  X  ) = { X  X  I |  X  Y  X  X Y  X  k-DBd  X   X  k-IBd  X  }. 
As follows from Lemma 3.2d, positive patterns that do not belong to k-GDFLR have at least one proper subset in the border k-DBd  X   X  k-IBd  X  . Lemma 3.3 (calculating supports of positive patterns based on k-GDFLR). The frequent, and if so, enables determining its support. In addition, k-GDFLR determines the support of each positive pattern X that does not have subsets in k-IBd  X  . Eventually, we conclude that k-GDFLR is a lossless representation of all frequent patterns with at most k negations. Theorem 3.1 (calculating supports of patterns with at most k negations based on k-GDFLR). The k-GDFLR representation determines for any pattern X with at most k negations whether it is frequent, and if so, enables determining its support. In addition, the k-GDFLR representation determines the support of each pattern X with at most k negations that does not have subsets in k-IBd  X  . Pos ( X ) and all its subsets do not have subsets in k-IBd  X  . Thus, by Lemma 3.3, k-GDFLR determines the supports of Pos ( X ) and all its proper subsets. In accordance with Eq. 1, this suffices to calculate sup ( X ).  X  Below we determine upper bounds on the length of elements in k-GDFLR. Theorem 3.2. a)  X  Z  X  k-Main , | Z |  X   X  log 2 (| D |  X  minSup )  X  . b)  X  Z  X  k-DBd  X   X  k-IBd  X  , | Z |  X   X  log 2 (| D |  X  minSup )  X  + 1. Proof: Analogous to the proof of Theorem 3.3.3 in [2].  X 
Here, we offer the k -GDFLR-Apriori algorithm to discover k-GDFLR as a modification of GDFLR-Apriori [2]. The differences between k-GDFLR-Apriori and GDFLR-Apriori are highlighted in the code. Similar modification of the GDFLR-SO-Apriori algorithm [4], which is an alternative to GDFLR-Apriori , would result in obtaining the k-GDFLR-SO-Apriori algorithm adapted to discovering k-GDFLR. Let us present the experimental results obtained for the benchmark data sets: mushroom (8124 transactions of length 23 items; 119 distinct items) and connect-4 (67557 transactions of length 43 items; 129 distinct items). Fig. 1 shows the cardinality of k-GDFLR for k = 0 (no negation allowed), 2, 3, and  X  . We have offered the lossless k -GDFLR representation of all frequent patterns with a restricted number of negated items. We have shown how to adapt the algorithms discovering GDFLR to discover k-GDFLR. The conducted experiments prove that k-GDFLR is more concise than GDFLR especially for low support values and low k . 
