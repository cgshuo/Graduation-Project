 Online social streams such as Twitter/Facebook timelines and forum discussions have emerged as prevalent channels for information dissemination. As these social streams surge quickly, information overload has become a huge problem. Existing keyword search engines on social streams like Twit-ter Search are not successful in overcoming the problem, because they merely return an overwhelming list of posts, with little aggregation or semantics. In this demo, we pro-vide a new solution called KeySee by grouping posts into events, and track the evolution patterns of events as new posts stream in and old posts fade out. Noise and redun-dancy problems are effectively addressed in our system. Our demo supports refined keyword query on evolving events by allowing users to specify the time span and designated evo-lution pattern. For each event result, we provide various an-alytic views such as frequency curves, word clouds and GPS distributions. We deploy KeySee on real Twitter streams and the results show that our demo outperforms existing keyword search engines on both quality and usability. H.2.8 [ Database Management ]: Database Applications X  Data Mining ;H.3.3[ Information Storage and Retrieval ]: Information Search and Retrieval X  Search process Measurement, Experimentation KeySee, Keyword Search, Event Evolution, Social Stream
Online social streams such as Twitter/Facebook timelines and forum discussions have emerged as prevalent channels for information dissemination. As these social streams surge quickly, information overload (a.k.a. infobesity) has become a spectacular problem, which leads to X  X nformation anxiety X , the gap between the information we are able to access and the information we are able to perceive [3]. Current social stream search engines like Twitter Search 1 merely return a huge list of posts to a given keyword query, with little aggre-gation or semantics, and leave it to the users to sift through the large collection of results to figure out the very small por-tion of useful information. The noisy and redundant nature of social streams degrades user X  X  experience further.
On the other hand, since a post like tweet only conveys a very small piece of information, it would be ideal if we can group the posts talking about the same event together. Here we define an  X  X vent X  as a transient group of posts sharing the same topic words within a short time span. For exam-ple, supposing the query is  X  X phone 6 X , instead of showing thousands of posts containing  X  X phone 6 X , users expect to see a small number of events, e.g.,  X  X phone 6 release rumor X . Users can click on each event to dig into details. Moreover, as time rolls on, new posts stream in and old posts fade out quickly, making the events evolve over time. Hence, user X  X  experience on searching social streams will be improved a lot if the keyword search on evolving events is supported.
Searching evolving events in social streams is a challenging problem. First, the effective organization of meaningful in-formation from noisy unstructured social streams is not easy. Second, the tracking of evolving events and their evolution patterns in a streaming environment is a challenging prob-lem from an effectiveness and efficiency standpoint. Third, supporting efficient keyword search on evolving events poses new challenges for query optimization.

In this demo, we propose a system called KeySee to sup-port Key word S earch on e volving e vents tracked from social streams. In related work, an efficient index structure for tweetsisproposedin[1]andanNLP-basedtweetsearch platform is introduced in [4]. Both [1] and [4] produce re-sults similar to Twitter Search, as shown in Figure 1(a). TweeQL [5] is a query language that allows tweets to be queried by exposing fields like location and text, and of-fering predicates on them. TwitInfo [6] detects peaks in tweets containing keywords specified by users. Note that a peak detected by TwitInfo is a group of tweets containing designated keywords, but not necessarily an event telling the same story. There are a handful of related works [6, 8, 7] that focus on detecting new emerging events from social streams. However, events may evolve in different ways, and various evolution patterns can be defined, e.g., https://twitter.com/search-home Figure 1: (a) Search  X  X oogle Nexus X  in Twitter Search. (b) Search  X (Google Nexus, 1/1/2013-4/1/2013,  X  ) X  in KeySee. For each event result, KeySee provides four analytic views: volume curves, word clouds, GPS distributions and timelines. emerge / disappear , grow / decay and merge / split . Users may be interested in monitoring the whole life cycle of events, which is not addressed by existing work on event detection from social streams.

In this demo, KeySee supports a complete set of event evo-lution patterns as shown in Figure 2(b), and emerge is just one pattern in the set. KeySee provides users the ability to search the events that are evolving with a designated pattern in a given time span. The form of query input KeySee sup-ports is ( K, T, P ), where K is a set of keywords, T is a time span and P is an event evolution pattern. Any member in a KeySee query can be empty but not all of them, i.e., (  X  ,  X  ,  X  is not allowed. If the keyword list is empty, the KeySee query means finding all events satisfying designated pattern in a specific time span. For example, (  X  , 3/1/2013-3/7/2013, disappear ) means finding the disappeared events in the first week of March 2013. The flexibility of KeySee query makes it more powerful than traditional keyword search systems.
The techniques we use in this demo are summarized as follows. We first extract entities (keywords) from a so-cial stream and transform it into an evolving post network by measuring pairwise post similarity. Then, density-based clustering is applied to identify events, defined as dense sub-graphs, from the post network. As the time window moves, evolution patterns of events are tracked incrementally. To support keyword query on evolving events, a event evolution graph is built by treating each event snapshot as a node, and the evolution trajectory between snapshots as paths. An event will be a chain in the evolution graph. Based on the observation that the distribution of events on keywords, moments and patterns are very skewed, an optimal query plan is chosen by heuristically selecting the dimension with the lowest probability (i.e., highest selectivity) first. Finally, event results will be ranked and presented to users.
Figure 1 shows the results of searching  X  X oogle Nexus X  inTwitterSearchand KeySee respectively. While Twitter Search returns an overwhelming list of tweets with noise and redundancy, KeySee returns a small number of aggregated events. Each event is annotated with a short text. Users can click buttons below each event to view the event from specific perspectives. KeySee provides four analytic views: volume curves, word clouds, GPS distributions and timelines. Figure 2: (a) The correlation between posts in a time window of social streams is captured by a post network, which is indexed by inverted keyword in-dex. (b) Each event snapshot is a dense subgraph in post network. The evolution patterns between event snapshots will be tracked and preserved for keywordsearchonevolvingevents.
Social posts such as tweets are usually written in an infor-mal way with lots of grammatical errors, and even worse, a correctly written post may have no significance and be just noise. Our target is to design a processing strategy that can quickly judge what a post talks about and is robust enough to the informal writing style. In particular, we treat the en-tity words in a post as keywords, since entities depict the topic. For example, given a tweet  X  X Pad 3 battery pointing to thinner, lighter tablet? X , the entities are  X  X Pad X ,  X  X attery X  and  X  X ablet X . Traditional Named Entity Recognition tools only support a narrow range of entities like locations or or-ganizations. We broaden the applicability by treating nouns as candidate entities. Finally, a post p is described as a triple ( p L ,p  X  ,p u ), where p L is the list of keywords, p  X  is the time stamp and p u is the author. The similarity between posts is measured by a combination of content similarity and tem-poral proximity, written as
We monitor social streams using a sliding time window with length Len , as illustrated in Figure 2(a). At moment all posts in the time window [max { t  X  Len, 0 } ,t ] constitute the snapshot of current social streams. A post network at moment t canbedefinedasagraph G t ( V t , E t ), where each node p  X  X  t is a post, and an edge ( p i ,p j )  X  X  t is constructed iff
S ( p i ,p j )  X   X  0 , where 0 &lt; X  0 &lt; 1. As the time window moves forward, new posts flow in and old posts fade out and G t ( V t , E t ) is dynamically updated at each moment, with new nodes/edges added and old nodes/edges removed. We illustrate this process in Figure 2(a). Len and  X  0 will be empirically set.
An event snapshot e can be defined as a dense subgraph in post network. The intuition is that, since post network is constructed by pairwise post similarity, a dense subgraph with high internal connectivity shares the same topical words. Various clustering approaches can be applied on a post net-work to extract dense subgraphs. In this demo, we choose density-based clustering [2] and distinguish nodes in G t into three types: core posts, border posts and noise posts, by tuning density parameters. The reason we opt for density-based clustering is that, compared with partitioning-based approaches (e.g., K-Means) and hierarchical approaches (e.g., BIRCH) [2], density-based clustering (e.g., DBSCAN) de-fines clusters as areas of higher density than the remainder of the data set, which is robust to noise in social streams.
We use E to denote an event and e is a snapshot of E at a specific moment. For simplicity, if we talk about event e , it actually means event E at moment t .Let S t denote the set of events at moment t .Weanalyzetheevolutionary process of events at each moment and abstract them into four primitive patterns and two composite patterns. The four primitive patterns are emerge , disappear , grow and de-cay . The two composite patterns are merge and split ,which canbedecomposedintoaseriesof emerge and disappear patterns. From moment t to t + 1, they are defined below.  X  emerge : add event e to the event set S t ;  X  disappear :removeevent e from the event set S t ;  X  grow : increase the size of e by adding new posts;  X  decay : decrease the size of e by removing old posts;  X  merge : remove a list of events { e 1 ,e 2 ,  X  X  X  ,e n }  X  split : remove an old event e from S t and add a list of
Compared with primitive patterns, merge and split are not very common in event evolution. To a specific event, emerge / disappear or merge / split can only happen once, but grow / decay mayhappenateachmoment.Thus,iftheevo-lution pattern P in the query ( K, T, P )is grow or decay ,it is natural to find events evolving with pattern P at every moment in T ; otherwise, it is natural to find events with pattern P at at least one moment in T .

In the following, we explain how to track event evolution incrementallyasthepostnetworkgetsupdated.Supposea post p is added into the post network. If p is a noise post, we simply ignore p .If p is a border post to the neighboring event e , grow e .If p is a core post without neighboring event, a new event emerges .If p is a core post that is a neighbor of exactly one event e , grow e .If p is a core post that is a neighbor of multiple events { e 1 ,e 2 ,  X  X  X  ,e n } , merge them into a new event. The analysis of event evolution patterns for removing a post p from post network is very similar. We show evolution patterns of various cases in Table 1.
We built a social stream by aggregating all the timelines of Twitter users in the Technology category of  X  X ho to fol-low X  2 and their followees. This dataset has 5,196,086 tweets, created by 224,242 users, with a time span from Jan. 1 to http://twitter.com/who to follow/interests Cases Add Remove If p is a noise post --
If p isaborderposttothe neighboring event e grow decay
If p is a core post without neighboring event emerge disappear
If p is a core post to exactly one neighboring event e grow decay
If p is a core post to multiple neighboring events { e 1 ,e 2 ,  X  X  X  ,e n } merge split Figure 3: (a) The evolution of events related to  X  X top Online Piracy Act (SOPA) X . We illustrate the snapshotsofeventsbywordcloudsinthisexample.
 Notice that an event can be described in various ways, e.g., frequency curves, Map view, timelines and word clouds.
 Feb. 1, 2012. We deploy KeySee ontopofthissocialstream, by setting Len =1 day and  X  0 =0 . 3.
Each event has its life cycle. An event can be born by emerging, merging or splitting. As an example, we show the evolution of events related to  X  X top Online Piracy Act (SOPA) X  in Figure 3, by illustrating each event snapshot by a word cloud. As we can see, the merging of  X  X opa pipa protest X  and  X  X pple products X  makes the birth of a new event called  X  X opa protest and Apple X  on Jan 19, which evolves on Jan 20 and splits into two events on Jan 21.
The evolution of events in a social stream can be captured by a directed graph, where each node e a is a snapshot of an event E a , which is basically a dense subgraph in the post network, and an edge between node e a and e b means  X  e a evolves into e b  X , which is annotated by an evolution pattern. We call this graph event evolution graph . Figure 4(b) shows the evolution graph regarding events illustrated in Figure 3. If an event spans several time moments, the snapshots of this event should be connected by grow or decay only. For example, the chain ( e 1 ,e 2 ,e 3 )isanevent. Merge is a composite pattern, which terminates multiple events and produces a new event in the same time. Split works in an opposite way. In a nutshell, event evolution graph preserves the whole history of event evolution patterns, and serves as basis for keyword search on evolving events. Given a query ( K, T, P ), KeySee will find the events with evolution pattern P inthetimespan T that hit keywords K .
The queries we support in this demo has three dimensions: keywords, time span and evolution pattern. We observe that the distributions of social streams on these three dimensions are very skewed. Figure 4(b) shows the frequency of tweets on each day of a week in 5 samples, and it indicates that the frequency of tweets on weekdays are obviously higher than the frequency on the weekend. Figure 4(c) shows the count of tweets for top 1000 keywords ranked in descending order. The power law distribution suggests that a very few keywords have very high occurrence. Empirical study also shows merge and split patterns occur much less frequently than other patterns. All this skewness in social streams indicates the scope for query optimization.

Theoretically, query optimization relies on the cost esti-mation of alternative query plans, which are in turn de-cided by the selectivities on each dimension. In practice, we maintain the probability mass functions (PMF) of keywords, moments and patterns and estimate the selectivity on each dimension. A heuristic rule is applied by always selecting the dimension with the lowest probability (i.e., highest se-lectivity), making it likely that the intermediate results fit in memory, facilitating pipeline processing. For example, if PMF T &lt;PMF K &lt;PMF P , the query plan chosen by our system will find all events in time span T first, retain the events with keywords K , and only keep those with evolu-tion pattern P . The percentage of events in the result set is estimated by
Event results will be ranked by the score function and presented to users. Given event E and a KeySee query Q = (
K, T, P ), we define the score function as a combination of normalized keyword frequency and event volume changing function, that is where f ( x, E ) is the frequency of keyword x in event E and E K is the set of all keywords in E . X  | E | is the volume change of the event at the beginning and end of the time span T , which is applicable only when P  X  X  grow,decay } .
The information overload problem in current social web age can be frustrating to the user. Existing keyword search engines on social streams are not successful in conquering the problem, because they merely return a huge list of posts, with little aggregation or semantics. To overcome the infor-mation overload problem and filter out the noise and redun-dancy in social streams, we propose KeySee ,whichtrans-forms a social stream into an evolving post network and uses density-based clustering to identify the events. As time rolls on, event evolution patterns are tracked and stored in an evolution graph. KeySee supports refined keyword query on evolving events by allowing users to specify the time span and the evolution pattern. Empirical study on real Twitter streams shows that KeySee outperforms existing keyword search engines on both quality and usability. In the fu-ture work, we look forward to running KeySee on very high throughput Twitter streams and performing advanced ana-lytics on events, such as sentiment analysis, link prediction, recommendation, etc. [1] C. Chen, F. Li, B. C. Ooi, and S. Wu. Ti: an efficient [2] J.Han,M.Kamber,andJ.Pei. Data Mining: Concepts [3] B. Kovach and T. Rosenstiel. Blur: How to Know [4] X.Liu,L.Jiang,F.Wei,andM.Zhou.Quickview: [5] A. Marcus, M. S. Bernstein, O. Badar, D. R. Karger, [6] A. Marcus, M. S. Bernstein, O. Badar, D. R. Karger, [7] A. Ritter, Mausam, O. Etzioni, and S. Clark. Open [8] J. Weng and B.-S. Lee. Event detection in twitter. In
