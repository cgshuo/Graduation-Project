 There has been a lot of research work being carried out on web caching methods and architectures [7]. There are also works focusing on the acceleration of web accesses through techniques like prefetching, pre-connection, and encoding/compression. However, little work is found on studying factors that affect the effectiveness of caching web objects. By "effectiveness", we refer to the longest time an object in cache is considered as "fresh" or "validation but without actual data transfer". To gain an in-depth understanding to this effectiveness measure, we not only need to understand all factors that actually cause an object to be cacheable or non-cacheable, but we also have to analyze the inter-relationship and dependency among them. Furthermore, we would also like to quantify the effectiveness of caching an object found then we know exactly how to fix or optimize the attribute setting (e.g. HTTP header fields) of web content and caching management (e.g. replacement) for better content reuse. 
This paper attempts to provide an in-depth analysis on how various network factors and content attributes contribute to the fi nal decision of web caching. While previous research work on web object cacheability often focuses on non-cacheable objects, we would like to study both cacheable and non-cacheable objects so that a more complete understanding can be obtained. To achieve this goal, a formal mathematical model, called the E-Cacheability Index , is proposed to express the effectiveness of caching an object using a numerical index. The basic idea behind this model is to provide precise description on the "availability", "freshness", and "validation" of web content web objects be quantified, but it also provides a mechanism to compare the relative cacheability effectiveness among web objects. As one of the earliest studies on web caching, Harvest system [2] faced the difficulty to identify non-cacheable objects. Its intermediate solution was to scan the URL name limit. Their implementation was popular at the early stage of web [6]. The impacts of caching-related HTTP headers on cacheability decision were investigated in several trace-base studies. [4] collected network traces for modem traffic at UCB in 1996 and analyzed the cacheability of requested web objects. In their study, many caching-related HTTP header fields were examined such as  X  Pragma: no-cache  X ,  X  Cache-control  X ,  X  Expires  X  and  X  Last-Modified  X . Ignoring cookies, their experiment results showed that non-cacheable responses were quite low, so did the CGI response. [1] noticed the bias in [4] and considered cookies in their experiments. Their results showed that non-cacheable requests due to cookies could be up to 30%. Later studies on different traces in [3] and [9] showed that the overall rate of non-cacheablility was monitoring [8]. More complete analysis on content non-cachability can be found in [11][5][10]. [11] concluded that the main reasons for non-cacheability included responses from server scripts, responses with cookies and responses without Last-Modified header. [5] proposed a complicated me thod to classify content cacheability using neural network. More recently, [10] analyzed the combinational effects of the causes in content non-cacheability and proposed quantity measure to characterize object cacheability. proxies. Apart from obeying the HTTP protocol directives, caching proxies also have their own preferences to determine whether they should cache the object according to their own architecture and policies. Thus, to better understand an object X  X  cacheability, we need to analyze the combinational effects of relevant content settings on the effectiveness of caching an object. For this purpose, our method employs an index, called the E-Cacheability Index (Effective Cacheability Index), which is a relative numerical value derived from our proposed formal model of object cacheability. 3.1 Basic Concepts Based on the basic working mechanism of a proxy, there are three attributes that determine an object X  X  E-Cacheability Index . They are object availability to be cached, data freshness and validation frequency. Their relationship is shown in the equation (Equation (1)) below. 
Unlike previous study on object cacheability, which just determines if an object can be cached, E-Cacheability Index goes one step further. It also measures the effectiveness of caching an object by studying the combinational effect of the three factors of caching availability, data freshness, and validation frequency. object is available for caching or not. If the object is not available, the E-Cacheability Index of the object will be zero. Thus, all non-cacheable objects have an E-Cacheability Index of zero, and under this case, the meaning of the other terms most dominant position in our measurement. After the indication of whether the Validation_Ind attributes are then important to measure how effective caching this object is. Freshness_Ind is a period that indicates the duration of data freshness of an object, and Validation_Ind is an index that indicates the probability of the staleness of an object, using the frequency of the need to revalidate the object. 
The E-Cacheability Index is defined by these two attributes once an object is determined to be available for caching. The longer the period of data freshness and the lower the frequency of re-validation result in a higher E-Cacheability Index. Thus, larger value of the E-Cacheability Index indicates higher potentials to cache this object. Furthermore, for objects with smaller E-Cacheability Index , detailed analysis can give hints on which content settings have larger influence on the effective object is non-cacheable. As will be seen in later sections, it will enforce the resulting regions  X  the region of negative values to indicate the need for revalidation each time quantitative measure on the caching effectiveness. 
In the next few sections, we will describe, based on the actual request methods, response codes, header fields, and proxy, the detailed composition of each term in the equation above. We will use I in the equations to indicate request information, and O to indicate response information. 3.2 Availability_Ind The term Availability_Ind in Equation (1) is defined as the overall composition of all value of this term is 0 (non-cacheable) or 1 (cacheable). Its Availability_Ind equation is shown below (in Equation (2)): preference in the response, and I HD(A) refers to the relevant header fields that influence availability in the request. The value of Availability_Ind is either zero (non-cacheable) that suggests the non-availability of the object in cache. 3.3 Freshness_Ind The term Freshness_Ind in Equation (1) is defined as the overall composition of all factors that will possibly affect the data freshness of an object. The possible value of this term is zero for non-cacheable object to value greater than zero for cacheable objects. Its equation is shown below (in Equation (3)): related to data freshness, and O HD(F) refers to the relevant header fields that influence the data freshness in the response. In Equation (3), the associative operator (*) ( I determined by the relevant header fields in the response ( O HD(F) ). 3.4 Validation_Ind The term Validation_Ind in Equation (1) is defined as the overall composition of all requirement. The possible values of this term is 0 (non-cacheable), -1 (if object must be revalidated each time even though it is cacheable), and greater than 1 (if object is cacheable). Its Validation_Ind equation is shown below (in Equation (4)): the relevant header fields in the response that influence validation, and I pp(V) refers to the proxy preferences in the request that influence validation. For function OR_val-op (a , ... a n ) , where a i  X  {-1, 0, 1}, its value is as follows: 
Equation (4) indicates that a non-cacheable response will result in the equation depending on the input parameters of the OR_val-op operator. 3.5 E-Cacheability Index Based on Equation (1) and substituting the terms of all factor equations in (2), (3) and Cacheability Index  X ): 
Since the request term in Availability_Ind , Freshness_Ind and Validation_Ind I
RM . Following the same argument, the status code of the response is the same O The value of I RM and O SC can be easily determined: Given the values of I RM and O SC above, Equation (5) can be simplified as: This equation is the final formula to compute the effectiveness of caching an object. Despite of the numerous ongoing research efforts in web caching, most of them concentrate on whether an object should be cached. There is no further analysis on the cacheability of a cached object. The proposed Effective Cacheability ( E-Cacheability determining whether an object can be cached, and (ii) further determining the effectiveness of caching such an object, if it is cached. This is done in the form of a relative numerical value, which can be used as a quantitative measurement for the effectiveness of caching the object. 
