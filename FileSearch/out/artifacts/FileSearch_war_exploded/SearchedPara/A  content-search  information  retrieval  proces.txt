
An information retrieval system (IRS) is usually defined as a software system that helps a user find some required information. However, long ago, it was noted that an IRS generally does not directly provide the required information but only docu-ments which should contain that information, and the user has to find the sought information within these documents. During a search task, an IRS generally can-not directly access the documents, it can only access them through metadata about documents (e.g. document content descriptions, data about the author, title of the document, etc.), and these metadata contai n references to the document base. There jective data, e.g. the author X  X  name, the document name, data about the publisher, the publication date, and the location of the document. The second type of meta-data is rather subjective because it aims at representing the content of the docu-ment. The relevance of a document is often solely determined by a match between a query and the representation of the document content, so the way the content used in many IRSs. Basically, an index consists of a set of weighted words (or represented by a boolean expression of terms. Such descriptions by a set of terms is commonly acknowledged that content repre sentation and content-based access are crucial for improving the precision (the ratio of the number of relevant documents the number of relevant documents retrieved to the total number of relevant docu-ments).
 ture composed of terms enriched by relati ons between these terms. More precisely, queries and contents are represented by expressions in a knowledge representation language based on the conceptual graphs introduced by Sowa (1984). Thus, con-tent representations and query formulations are more precise than those obtained by exclusively using terms. Furthermore, the visual aspect of graphs enables the construction of user-friendly graphical user interfaces. Our approach to the search process complies with the logical view of information retrieval, i.e. a document, can be inferred from d via some logic (van Rijsbergen 1986). Graph operations are used for computing answers. An operation, called projection, is used for computing exact answers. This operation is equivalent to deduction in first-order logic (FOL) (Sowa 1984; Chein and Mugnier 1992); thus, the exact answers are the same as those that could be obtained by any FOL theorem prover.
 to search documents imprecisely and incompletely represented in order to answer a vague query, graph transformations fo r computing and ranking approximate an-swers are used instead of probabilistic techniques (van Rijsbergen 1979; Fuhr 2000).
We consider that our approach X  X raph repr esentation of queries and contents and mate answers) using different kinds of graph-represented knowledge and based on graph operations X  X s original. Furthermore, this approach was implemented in two drawback of our approach is that it requires (at least partial) manual indexing. Nev-ertheless, in some cases, automatic indexing cannot be used, and manual indexing is required in situations as when  X  The documents are not in electronic form or not directly available through the  X  The documents are images, sounds, videos, etc., so extraction of high-level con-such as videos (cf. for example Fuhr (2000), Smeaton (2000), and the Opales application presented in Sect. 5).  X 
The documents are texts, but more precise representation than sets of keywords (i.e. those currently obtainable by natural language processing systems) of the content is required because the users are specialists with specific tasks.
Our experiments have shown that manual indexing with conceptual graphs is not more difficult than indexing with other manual indexing systems. In manual index-ing, analysis of the document is harder than using an indexing language. The major difference between conceptual graphs and other manual indexing techniques is that represented. Both the ontology and relations are taken into account by the search mechanism in order to obtain better results.

The remainder of this paper is organised as follows: In the second section, the conceptual graph model is presented, and we describe some approaches of informa-tion retrieval with graphs. Section 3 deals with the document and metadata bases. The results about two applications, one concer ning academic libraries and the other au-diovisual archives. The last section contains some concluding remarks and proposals for further development. is introduced. This knowledge representation model (cf. Mugnier (2000) for more details) is a variant of the conceptual graphs introduced by Sowa (1984).
The term set and relation set used for r epresenting contents of documents are formalized by the following notion of a support.

Definition 2.1 (Support). A support S is a 3-tuple S T is required to have a greatest element. T R is partitioned into subsets of relation types of arity 1 ... k . Two elements of distinct s ubsets are not comparable. I is a countable set of individual markers. T C , T R , I are pairwise disjoint. Each support also possesses the generic marker  X  , which does not belong to I .Theset I partially ordered in the following way:  X  is the greatest element and elements of I are pairwise incomparable.
 An example of a support is presented in Fig. 1.

Definition 2.2 (Conceptual graph). A conceptual graph (CG) q defined over a sup-port S is a finite bipartite multigraph q = ( N q = ( are the concept node set and the relation node set. E q is the multiset of edges. Edges incident to a relation node are totally ordered; they are numbered from 1 to the de-following examples, instead of numbering the edges, we use ingoing and outgoing arrows. Each node has a label given by the mapping label labelled by type ( r ) , an element of T R ,andthedegreeof r must be equal to the arity of type ( r ) . A concept node c is labelled by a pair type ( c ) is an element of T C and marker ( c ) is an element of I
Definition 2.3 (Projection). A projection p from a CG q d = ( N (i.e a total mapping) from N q to N d , such that:  X  p preserves the label of edges (i.e. if { r , c } is an edge of q ,then  X  p is nonincreasing with respect to the node labels (i.e. if x is a node of q ,then logic (Sowa 1984; Chein and Mugnier 1992). Let us consider the CGs of Fig. 2.
There is a projection from q to d (more precisely, from q to the grey subgraph of d ), the left node Researcher having the node Researcher for image, the right node
Pe rs o n having the node Researcher : A for image, the two Project nodes having for image the Project node, and it is straightforward to complete this with images of the relation nodes.
 definition of a partial projection from a CG q to a CG d is obtained from the definition of a projection p by replacing  X  p is a total mapping X  by  X  p is a (partial) mapping X  i.e. the domain of p is a part of N q , dom
Definition 2.4 (Projection modulo a mapping). Let d and d be two CGs (defined on a support S )and s a mapping from the set of CGs (defined on S ) onto itself such that s ( d ) = d .If p is a (partial) projection from q to d ,then projection from q to d modulo s .

There is no projection from q (Fig. 2) to e (Fig. 3), but there is a projection from q to e modulo a particular mapping from CGs to CGs, which consists of replacing the concept type Manager by Researcher . Different elementary operations have been defined on CGs, and their relationships with the projection notion have been studied.
The main elementary operation is that of a (internal) join between two nodes, and as this notion is later required (in Sect. 4.5), its definition is recalled.
Definition 2.5 (Join). Let g be a CG and x and x two concept nodes of g with the same label, then the result of the join of x and x is the CG obtained from g by identification of x and x (Fig. 4).

The CG model, and variants of this model, have been used in information re-trieval (IR) works. Dr-Link (Myaeng et al. 1994) analyzes texts and extracts simple graphs (two concept nodes and one relatio n node). A join operation is applied upon these graphs in order to obtain one graph p er sentence. The retrieval mechanism uses graph matching. In Cgkat (Martin 1997) and WebKB (Martin and Eklund 2000), document elements (chapters, paragraphs, etc.) may be indexed by CGs. The retrieval mechanism is based on the projection. Elen (Chevallet and Chiaramella 1995) is an
IRS dedicated to software reuse: the corpus is a software component database in which each component is represented by a CG and the query language is based on labelled graphs. The querying process is pr ecision-oriented because software com-ponents may be described completely and precisely. Relief (Ounis 1998) is an IRS in which images are indexed by CGs. The distinctive feature is that the querying operation uses properties of relations such as transitivity. These properties allow in-ference of new knowledge on indexes and can be considered as CG rules (Salvat and Mugnier 1996). SyDoM (Roussey et al. 2001) focuses on mu ltilingual corpus: the system may retrieve documents in various languages for a given query. These tured documents, automatic indexing or multilingual corpus. Most of these systems use projection or a slightly modified version of projection as the query mechan-ism. In this paper, we propose an extension of the CG model, and we focus on the query mechanism because we think that pro jection is not sufficient for IR because it only retrieves exact answers. We thus propose a search mechanism that computes and ranks approximate answers. This mechan ism is exclusively based on graph tech-niques. Here we present some general features concerning documents with which we deal.
Multimedia documents are considered. Specific data can be associated (e.g. time for sound, etc.). Nevertheless, whatever the type of document, the associated metadata make any distinction between text retr ieval and multimedia retrieval because we only search through metadata bases. This allows a user to search for all documents concerning a topic regardless of the types of documents (one of the applications documents). Documents are usually typed (e.g. text, picture, video, etc) and have vided into sections, etc.); this is especially the case when multimedia documents are considered.
 two bases: the bibliographic base ( BB )andthe topic base ( TB ). It is assumed that there is no overlapping between the bibliographic data and the topic data, thus sim-plifying the construction of queries and avoiding incoherences.
 ment type and the subdocument relation. The schema of BB contains a doc attribute, the values of which are references to DB ,anda topic attribute, the values of which are references to TB .Eachitemof TB is a couple ( v,g ), where when there is no risk of confusion. v is the viewpoint from which the graph has been constructed. Several topics can be associated with one document, but there is at most one topic with a given viewpoint. It is common to consider multiple indexes, for instance, public indexes and private indexes (Kowalski 1997), and the viewpoint notion can be seen as a generalization of multiple indexes. A query is the expression of a user X  X  information need. It is a SQL-like query to ( BB,TB ), which is composed of a usual SQL-query to BB , which can be augmented by a particular topic attribute, 10 nodes) and simple (generally a tree).
It is assumed that the bibliographic data are exact and that the bibliographic part of the query needs exact answ ers. However, a user generally does not know precisely what he/she is looking for, so one fundamental question is how to express a vague need for information. In this section, we explain how this intrinsic vagueness is taken into account in our model and how the engine provides references to documents when bibliographic data are given in the query and for which content corresponds, more given by decreasing relevance (for the system).
In response to a user X  X  query concerning a document base DB , the search engine returns an ordered set of r eferences to documents in DB .Ifthe topic attribute is not specified in the query, then the query is a pure relational query and is answered through a classical data base management system. If the topic attribute is specified, relational part of the query. We call B the result of this filtering process. B is then filtered by the following search by topic mechanism.
The search engine is run with B and (v, q ) , the value of the topic attribute given in the query. Our approach complies with what is usually called the logical model of IR (van Rijsbergen 1979), i.e. queries and topics can be interpreted as logical formulas and the search process corresponds to inference (in the case of exact search) or plausible inference (approximate search).

Exact search. In the case of an exact search, t he answers to a query consist of approximate search is compulsory to cope with the intrinsic difficulties of IR: vague queries, imprecise and incomplete representations of document contents.
Approximate search. Probabilistic or numerical approaches are commonly used to deal with approximate searches. Nevertheless, we do not use a probabilistic approach cess. To build a system in which a user and the search process communicate X  X .e. to take into account the computer-centered view and the human-centered view X  X he way the system is functioning must be understandable to the user. This is not really tivations for using conceptual graphs: graph transformations and computations are easily displayable and understandable by nonspecialist users (cf. for example Mug-nier (2000)).

More precisely, our search strategy can be considered as an implementation of the second form of van Rijsbergen X  X  Uncertainty Principle proposed by Nie:  X  X et d and q be two propositions, a measure of the uncertainty of d a knowledge base is determined by the minimal transformation from d to d such that d  X  q holds. X  (Nie and Lepage 1998). The transformations from a topic d to a topic d are based on graph operations, and these operations can also be used to transform the queries. Furthermore, it can be shown that d  X  q holds if and only if d holds, where q is obtained from q by a dual transformation of a transformation from d to d . Thus, in some ways, modifying d or q are equivalent, and our approach can also be considered as a dual technique of those used in query reformulation (partial query, term masking, expansion, etc.; see, for instance, (Efhimiadis 1996)) because the content descriptions are transformed in stead of transforming query statements.
One advantage of modifying topics rather than queries is that TB can be enriched in different ways by using the IRS. This can be seen as a technique for improving topic descriptions using a relevance feedback given by users, but we have not yet dexer can see the modifications that the system makes to his/her topic expressions when answering questions of a user, this could be an interesting form of indirect communication between users and indexers.
 preorder relation defined over the transformation set, and this order represents a rele-vance score. The structure of the document is taken into account only after the search process. With the ref erence to a document d obtained by the search process, refer-ences to the superdocument of d and to the subdocuments of d (if these documents exist) are also given. The topic-based search process use s the four following predicates.

Definition 4.1 (Basic predicates).  X  compatible-term ( x , y ) asserts that the term x can replace the term y (in some  X  compatible-relation ( x , y ) asserts that the relation x can replace the relation y  X  acceptable-sequence ( s ) asserts that a sequence s of transformations is accept- X  s  X  s is a total preorder between sequences of acceptable transfo rmations. This in such a way that, if a conceptual graph d is a sound topic for a document D , then a graph d obtained from d by an acceptable sequence of transformations is
This example is based on the Rameau thesaurus, a French adaptation of the Library of Congress X  thesaurus (Rameau 1995).
 Example. Rameau consists of a set, T , of about 400,000 terms with five relations.
These relations are the sta ndard thesaurus relations: UF (used for) and its inverse SA (see also) a quasi-synonymy relation, BT (broader topic) and its inverse NT (narrower topic) a spec/gen relation but that is not a partial order, RT (related topic), which is a symmetrical relation (a semantic proximity relation).

This set is used as a vocabulary for concept nodes of graphs. But a conceptual graph also contains relation nodes. We analyzed a set of documents about linguistics with a librarian, and we choose the following set of relation types T ate topic graphs for these documents: Object, Time, Geographical-location, Location, Agent, Component, Aspect, Circumstance, Consequence, Goal, Influence, Means .
In order to use the CG model, it is considered that all terms of the thesaurus are individual markers and that there is only one concept type  X  X erm X , and that the set of relation types is T R , i.e. the support is formally relations of the thesaurus are not in the set of relations of the support, they are used for defining the basic predicates as well as the ranking function, as explained later.
Definition 4.2 (Elementary substitution). An elementary substitution applied to agraph g leads to a graph obtained by replacing label v w if v is compatible with w .

Definition 4.3 (Substitution). Let L denote the set of elementary substitutions ;a sub-stitution is an element of L  X  (the set of sequences of elementary substitution).
Whenever there are relations within the term set, they can be used to define the compatibility relation. For example: v is compatible with a constrained path from w to v in the graph having the set term T of Rameau as A constrained path is one with a maximum number of occurrences of some relations.
Example. Compatible-term ( x , y ) iff there is a path from y to x , such that its length to 1, and the number of NT and the number of BT are less than or equal to 2, and the number of SA and the number of UF are less than or equal to 3, and any two relations are compatible.

In the logical view of IR, an exact answer to a query q is a document of which topic d is such that q is a logical consequence of d . Due to the logical semantics of the CG model, exact answers can be defined as follows:
Definition 4.4 (Exact answer). d is an exact answer to q iff there is a projection from q to d ,i.e. Proj ( q , d ) = X 
Definition 4.5 (Approximate answer). An answer is called approximate when only substitutions are permitted. More precisely, d is an approximate answer to q iff there is a substitution s such that: Proj ( q , s ( d )) = X  .

A total preorder  X  must be defined over L  X  in such a way that it can be used for ranking the answers, so this preorder must satisfy: if Proj
Proj ( q , s ( d )) = X  and s  X  s ,then d is at least as relevant as d to q .
Example. The definition of the preorder is based on the assumption that the number of terms is very large relative to the number of relations (400,000 versus 12). This implies that substituting relations indu ces, in comparison with the substitution of terms, dramatic changes in meaning.

C 0 is the set reduced to the empty sequence of transformations.

C 1 is the set of sequences of term substitutions using SA .

C 2 is the set of sequences of term substitutions using SA and UF .

C 3 is the set of sequences of term substitutions using SA , UF and BT .
C 4 is the set of sequences of term substitutions using SA , UF , BT and NT .
C 5 is the set of sequences of term substitutions using the five relations.
C 6 is the set of sequences of term or relation substitutions.

C  X  s  X  C i -C i  X  1 , i = 1 , ..., 6, and  X  s  X  C j and j &lt;  X  s , s  X  C
Definition 4.6 (Plausible answer). d is a plausible answer to q iff there is an ac-ceptable sequence s of substitutions and joins such that Proj only slightly modified). The ratio  X  can be chosen by the user. The previous total preorder  X  must be extended to the set of sequences of substitutions and joins. As a join can substantially change the structure of a CG, this transformation is usually considered more distancing than the substitutions.

Example. C 7 is the set of sequences of label substitutions and joins. C  X  s  X  C i -C i  X  1 , i = 1 , ..., 7, and  X  s  X  C j and j &lt;  X  s , s  X  C
Definition 4.7 (Node add). Adding a concept node with label to the graph g + c ,where c is a graph reduced to a concept node with label order to add a relation node between existing concept nodes, the label of the relation must be specified, along with their neighbors.

Definition 4.8 (Partial answer). d is a partial answer to q iff there is an acceptable sequence s of substitutions and joins and node adds, with at least one node added, such that: Proj ( q , s ( d )) = X  .
 these transformations. This algorithm does not try to apply every possible transform-ation, but only those that may be useful for a given query.
 if it is acceptable for the joins and if there are not too many node adjunctions. More precisely, we introduce two new parameters, i.e.  X  , concerning the ratio number of new concept nodes, and  X  , concerning the ratio of new relation nodes. The previous total preorder  X  must be extended to the set of sequences of label substitutions and joins and node adds.

Example. C 8 is the set of sequences of label substitutions and joins and adjunctions of relation nodes. C 7  X  C 8 . C 9 is the set of sequences of label substitutions and joins and adjunction of nodes. C 8  X  C 9 .  X  s  X  C  X  s ,
A query q is presented in Fig. 5. q corresponds to the request of a user looking for documents about  X  X xpressions of multilingualism appearing in dictionaries and belonging to the scientific language of computer scientists X . A topic d is presented in
Fig. 5. d is the representation of the topic of a book, the title of which is  X  X olinguism and lexicography X . There is no projection from q to d . But there exists an acceptable transformation of d into d , such that there is a projection from q to d : see Fig. 6; the grey nodes indicate the transformation results.
 In this section, we present the schema of the algorithm for approximate answers. and partial), see Genest (2000). Let p be a partial projection from q to d modulo s . The set of admissible couples for a node o 1 in d is computed by the procedure AdmCouplesInit and is defined as follows:
AdmCouplesInit ( o 1 , d ) ={ ( o 2 , s )  X  N d  X  L  X  / compatible and s is a minimal substitution from label ( o 2 ) to label such that s ( label ( o 2 )) = label ( o 1 ) s  X  s } .

If o 1 is a node of q without an image by p (i.e. o 1  X  dom an admissible couple for o 1 in d , then, if possible, the algorithm adds a new couple ( o , o 2 ) to p , and it replaces s by s . s . Then, the possible images of the neighbors of o 1 can be filtered because, if o 3 is the i th neighbor of o the i th neighbor of o 2 in d as image. The schema of the procedure that computes all projections from q to d modulo substitutions is ProjectionModSubst ( q , d ) Data: q and d are conceptual graphs.

Result: the set of projections from q to d modulo acceptable substitutions. foreach n  X  N q do return ProjModSubstBacktrack ( q , d ,  X  ,  X  , N q ,  X  ) ProjModSubstBacktrack is the backtracking procedure defined as follows: ProjModSubstBacktrack ( q , d , p , s , A , P )
Data: q , d are CGs, p is a partial projection from q to d modulo s , A is the set of nodes of q that are not in dom ( p ) ,and P is a set of partial projections from q to d modulo substitutions.

Result: P  X  X  ( p 1 , s 1 ) } ,where p 1 is an extension of p such that dom ( p 1 ) ,and s 1 = s . s A , is an acceptable substitution and s stitution from d to d 1 ,and p 1 is a partial projection from q to d modulo s if A = X  then return P  X  X  ( p , s ) } else o 1  X  Choice ( A ) ; foreach ( o 2 , s )  X  AdmCouples ( o 1 , d ) do return P ;
We used the model described in the preced ing sections in two document retrieval systems: The first one, Mogador , is a system designed for a public library. The the available documents. The document base consists of books the contents of which must be described in a general way. The second one, Opales , is dedicated to users who are specialists in the domains of the documents (in the first experiment of this system, they are researchers and teachers i n these domains). The b ase mainly contains audiovisual documents, and these documents must be more precisely described than in Mogador . In order to develop these applications, we designed and built a platform for the development of applications based on conceptual graphs. This platform, called
Cogitant , stems from a previous platform, called CoGITo , which has been used in different systems (Haemmerl X  1995). on conceptual graphs (and allowing easily defined new operations) and that is able to efficiently manage a large support (more than 400,000 types of concepts). The
Cogitant platform was thus developed (Genest 2000). It contains a library of C++ classes for processing conceptual graphs and a conceptual graph editor (Fig. 7). The classes of the library implement the various objects of the conceptual graph model, such as support, graphs and rules. Methods provide the basic operations of the model, such as the projection operation. These cla sses were designed to be easily extendable, q to d modulo s .
 can query a document base stored on a server. Thus, Cogitant contains a client/server architecture to allow the user to visualize and edit remote graphs and query a remote base of graphs. The editor we developed allows a user to draw conceptual graphs just like those produced by using a drawing application.
 dows ,and MacOS ). The source of Cogitant is freely available under the GNU GPL (general public li cense) license at http://cogitant.sourceforge.net .
The document base of this experiment contains books about linguistics. Our system was tested with five users who had never indexed documents before. They did not know Rameau and did not have any particular knowledge in informatics other than standard office software. More than 200 topic graphs were created, and the people who created these graphs did not have any difficulties, either in designing the graphs or using the graph editor.

This would lead to queries producing not enough answers, or even no answer at addressed by the documents in the base. Instead of asking randomly chosen users, we collected queries from people knowing the available document base. So this ex-from this experiment.

Results provided by the prototype are better than those generated by a system using Rameau but that does not use knowledge during the query phase and does not represent relations. The main contributions of our approach, compared with a tradi-tional one, are:  X 
First, the relations of the thesaurus ( UF, SA, BT, NT, SA ) are taken into account in order to provide a search for approximate answers, leading to a reduction of silence.  X 
Second, semantic relations used to build indexes and queries provide a more precise representation of information, leading to a reduction of noise.
Query execution times were reasonable. The base contains 200 graphs (9.6 nodes on average), and the tests were run on a Pentium II (350 MHz) PC under Linux . processing time of a request. Moreover, no particular optimisation was developed except for preprocessing of the compatible-term predicate. Even if that experiment does not constitute a precise evaluation of the performance of our system in real conditions (e.g. large base of graphs and many users), we believe that the reasonable processing time obtained indicates that graphs can be used in an operational system.
Opales is an ongoing project, initiated by the French Ministry of Economy, that is being developed for the French institute of audiovisual archives (INA) (Nanard and
Nanard 2001). Opales is a private portal, which enables its users to directly work on archive documents in private workspaces, to share elicited knowledge about studied documents and to collaborate both anonymously and within groups.

In Opales , there is not a staff of experts who create indexes of documents, but each user of the system can associate annota tions (i.e. semantic metadata) to docu-ments and share these metadata. Any piece of information, especially an annotation, always has a viewpoint stamp, which characterizes its concern. Opales is targeted for specific communities of use rs: teachers and scientists wh o are specialists in their domains; thus, Opales can use the knowledge of its users. Annotations provided by experts constitute an added value to the document for browsing (links between documents) or searching (one can search documents that are judged in a given way by a given expert). While authoring, viewpoints are used as a stamping mechanism.
While reading, viewpoints are used as a filte ring mechanism for searching or select-ing enhancements. Information pieces that belong to a given viewpoint are supposed to share the same concern. When a user is indexing or annotating a document, he/she can use the Cogitant graph editor. The support (ontology) depends on the community of the user and the chosen viewpoint (some viewpoints may have a specific or highly specialized vocabulary). Such an annotation can be associated to a video document, metadata with any piece of data of the system. For example, a user can annotate a video document as  X  X nteresting X , but also annotate an annotation of this document.
A query, in Opales , may contain both a graph part and a bibliographic part, and the search process is that described in this paper. A prototype is currently evaluated, especially by ethnologists on videos concerning childhood in Africa, and the first results were judged interesting enough to consider continuation of the project.
In this paper, we have presented an original content-search IR process in which con-tents are represented by a kind of labeled graphs and the search process is based on graph operations. The visual aspect of graphs allowed the construction of a graphical user interface, which was found to be user friendly. Due to the graph model, the way the intrinsic vagueness of IR is handled can be considered as a combinatorial implementation of van Rijsbergen X  X  Logical Uncertainty Principl e. Furthermore, as the conceptual graph model used is a knowledge representation language, different kinds of knowledge are used for defining graph operations involved in the search process.
 dexing, which presently has to be manually constructed. Nevertheless, our approach will be directly usable once automatic techniques are developed, and it can now be used for specific situations (such as those listed in the Introduction). The positive re-sults of the two applications that were built indicate that our approach is sufficiently efficient and generic to pursue further. A well-known drawback of manual indexing is that different people build different indexes for the same document. Techniques developed in this paper to compute answers could also be used for defining and computing similarities between index CGs.
 the TB base (e.g. Ellis (1995) and Levinson and Ellis (1992)); using specific algo-rithms taking the particular structure of query graphs into account (generally, a query graph is a tree with one-to-one labeling; se e Mugnier (1995)); using structured top-ics for structured documents. Note also that further experiments are needed to eval-important improvements will come about by using all possi bilities of a knowledge representation language combined with the uncertainty principle.
 proach with a more cognitive view of IR. It is gen erally considered that it is essential to implement a cyclical querying process. A user can currently ask a new question, but the system does not use answers to previous questions to improve the searching process, i.e. the system considers questions as independent. Our approach could be
A topic base TB can be enlarged by using a set of rules describing implicit and exact knowledge. This knowledge may be general (for instance, if a relation r is symmetri-cal, and if r occurs from x to y but not from y to x , then the missing relation can be added) or specific to a kind of user, with both being carried out by a rule-saturation mechanism (Salvat and Mugnier 1996), which is implemented in Cogitant and has been used in Mogador . As our approach uses transformations of representations of contents (and not transformations of queries), this allows a second kind of develop-ment of TB , which consists of a relevance fee dback; if a transformed topic has been considered as relevant for a sufficiently high number of queries and users, then this modified topic can replace the former one in TB . The system could propose such substitutions to the indexer who wrote the TB topic under consideration. It would also be possible to leave TB unchanged and consider that the transformations used have a null cost. Thus, the documents become somewhat active. Neither of these two ideas has been implemented to date.

The graphical interface with browsing f acilities through the term set can currently be used by indexers and end users. More sophisticated tools for helping different of the search process, integrating browsing and searching should also be considered,
Browsing is possible in Opales , but browsing and searching are independent and the into account. The different predicates used in the method can be tailored to the user X  X  needs when the documents that the user considered relevant are known. These are only a few examples.

After the first step of our work presented in this paper, and in light of the encour-aging experimental results, our goal is now to move onto a second step to develop sentation of some user aspects and building a two-agent system in order to progress toward the ideal of making the user interaction with the IRS more like the interaction he/she might have with a documentalist.

