 Spam is a key problem in electronic communication, includ-ing large-scale email systems and the growing number of blogs. Content-based filtering is one reliable method of com-bating this threat in its various forms, but some academic researchers and industrial practitioners disagree on how best to filter spam. The former have advocated the use of Sup-port Vector Machines (SVMs) for content-based filtering, as this machine learning methodology gives state-of-the-art performance for text classification. However, similar perfor-mance gains have yet to be demonstrated for online spam filtering. Additionally, practitioners cite the high cost of SVMs as reason to prefer faster (if less statistically robust) Bayesian methods. In this paper, we offer a resolution to this controversy. First, we show that online SVMs indeed give state-of-the-art classification performance on online spam filtering on large benchmark data sets. Second, we show that nearly equivalent performance may be achieved by a Relaxed Online SVM (ROSVM) at greatly reduced com-putational cost. Our results are experimentally verified on email spam, blog spam, and splog detection tasks. H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval  X  spam Measurement, Experimentation, Algorithms support vector machines, spam filtering, blogs, splogs
Electronic communication is increasingly plagued by un-wanted or harmful content known as spam .Themostwell knownformofspamis email spam , which remains a major Copyright 2007 ACM 978-1-59593-597-7/07/0007 ... $ 5.00. problem for large email systems. Other forms of spam are also becoming problematic, including blog spam ,inwhich spammers post unwanted comments in blogs [21], and splogs , which are fake blogs constructed to enable link spam with the hope of boosting the measured importance of a given webpage in the eyes of automated search engines [17]. There are a variety of methods for identifying these many forms of spam, including compiling blacklists of known spammers, and conducting link analysis.

The approach of content analysis has shown particular promise and generality for combating spam. In content anal-ysis, the actual message text (often including hyper-text and meta-text, such as HTML and headers) is analyzed using machine learning techniques for text classification to deter-mine if the given content is spam. Content analysis has been widely applied in detecting email spam [11], and has also been used for identifying blog spam [21] and splogs [17]. In this paper, we do not explore the related problem of link spam , which is currently best combated by link analysis [13].
The anti-spam community has been divided on the choice of the best machine learning method for content-based spam detection. Academic researchers have tended to favor the use of Support Vector Machines (SVMs), a statistically ro-bust machine learning method [7] which yields state-of-the-art performance on general text classification [14]. However, SVMs typically require training time that is quadratic in the number of training examples, and are impractical for large-scale email systems. Practitioners requiring content-based spam filtering have typically chosen to use the faster (if less statistically robust) machine learning method of Naive Bayes text classification [11, 12, 20]. This Bayesian method requires only linear training time, and is easily implemented in an online setting with incremental updates. This allows a deployed system to easily adapt to a changing environment over time. Other fast methods for spam filtering include compression models [1] and logistic regression [10]. It has not yet been empirically demonstrated that SVMs give im-proved performance over these methods in an online spam detection setting [4].
In this paper, we address the anti-spam controversy and offer a potential resolution. We first demonstrate that on-line SVMs do indeed provide state-of-the-art spam detection through empirical tests on several large benchmark data sets of email spam. We then analyze the effect of the tradeoff parameter in the SVM objective function, which shows that the expensive SVM methodology may, in fact, be overkill for spam detection. We reduce the computational cost of SVM learning by relaxing this requirement on the maximum mar-gin in online settings, and create a Relaxed Online SVM, ROSVM, appropriate for high performance content-based spam filtering in large-scale settings.
The controversy between academics and practitioners in spam filtering centers on the use of SVMs. The former ad-vocate their use, but have yet to demonstrate strong per-formance with SVMs on online spam filtering. Indeed, the results of [4] show that, when used with default parameters, SVMs actually perform worse than other methods. In this section, we review the basic workings of SVMs and describe a simple Online SVM algorithm. We then show that Online SVMs indeed achieve state-of-the-art performance on filter-ing email spam, blog comment spam, and splogs, so long as the tradeoff parameter C is set to a high value. However, the cost of Online SVMs turns out to be prohibitive for large-scale applications. These findings motivate our proposal of Relaxed Online SVMs in the following section.
SVMs are a robust machine learning methodology which has been shown to yield state-of-the-art performance on text classification [14]. by finding a hyperplane that separates twoclassesofdataindataspacewhilemaximizingthemar-gin between them.

We use the following notation to describe SVMs, which draws from [23]. A data set X contains n labeled example taining features describing example i ,andeach y i is the class label for that example. In spam detection, the classes spam and ham ( i.e. , not spam) are assigned the numerical class labels +1 and  X  1, respectively. The linear SVMs we employ in this paper use a hypothesis vector w and bias term b to classify a new example x , by generating a predicted class label f ( x ):
SVMs find the hypothesis w , which defines the separating hyperplane, by minimizing the following objective function over all n training examples: under the constraints that In this objective function, each slack variable  X  i shows the amount of error that the classifier makes on a given example x . Minimizing the sum of the slack variables corresponds to minimizing the loss function on the training data, while minimizing the term 1 2 || w || 2 corresponds to maximizing the margin between the two classes [23]. These two optimization goals are often in conflict; the tradeoff parameter C deter-mines how much importance to give each of these tasks.
Linear SVMs exploit data sparsity to classify a new in-stance in O ( s ) time, where s is the number of non-zero fea-tures. This is the same classification time as other linear
Given: data set X =( x 1 ,y 1 ) ,..., ( x n ,y n ) , C , m Initialize w := 0 , b := 0 , seenData := {} For Each x i  X  X do: done classifiers, and as Naive Bayesian classification. Training SVMs, however, typically takes O ( n 2 )time,for n training examples. A variant for linear SVMs was recently proposed which trains in O ( ns ) time [15], but because this method has a high constant, we do not explore it here.
In many traditional machine learning applications, SVMs are applied in batch mode . That is, an SVM is trained on an entire set of training data, and is then tested on a sep-arate set of testing data. Spam filtering is typically tested anddeployedinan online setting, which proceeds incremen-tally. Here, the learner classifies a new example, is told if its prediction is correct, updates its hypothesis accordingly, and then awaits a new example. Online learning allows a deployed system to adapt itself in a changing environment.
Re-training an SVM from scratch on the entire set of pre-viously seen data for each new example is cost prohibitive. However, using an old hypothesis as the starting point for re-training reduces this cost considerably. One method of in-cremental and decremental SVM learning was proposed in [2]. Because we are only concerned with incremental learn-ing, we apply a simpler algorithm for converting a batch SVM learner into an online SVM (see Figure 1 for pseudo-code), which is similar to the approach of [16].

Each time the Online SVM encounters an example that was poorly classified, it retrains using the old hypothesis as a starting point. Note that due to the Karush-Kuhn-Tucker (KKT) conditions, it is not necessary to re-train on well-classified examples that are outside the margins [23].
We used Platt X  X  SMO algorithm [22] as a core SVM solver, because it is an iterative method that is well suited to con-verge quickly from a good initial hypothesis. Because previ-ous work (and our own initial testing) indicates that binary feature values give the best results for spam filtering [20, 9], we optimized our implementation of the Online SMO to exploit fast inner-products with binary vectors. 1
Extracting machine learning features from text may be done in a variety of ways, especially when that text may include hyper-content and meta-content such as HTML and header information. However, previous research has shown that simple methods from text classification, such as bag of words vectors, and overlapping character-level n -grams, can achieve strong results [9]. Formally, a bag of words vec-tor is a vector x with a unique dimension for each possible
Oursourcecodeisfreelyavailableat www.cs.tufts.edu/  X  dsculley/onlineSMO .
 Figure 2: Tuning the Tradeoff Parameter C. Tests were conducted with Online SMO, using binary fea-ture vectors, on the spamassassin data set of 6034 examples. Graph plots C versus Area under the ROC curve. word, defined as a contiguous substring of non-whitespace characters. An n -gram vector is a vector x with a unique dimension for each possible substring of n total characters. Note that n -grams may include whitespace, and are overlap-ping. We use binary feature scoring, which has been shown to be most effective for a variety of spam detection meth-ods [20, 9]. We normalize the vectors with the Euclidean norm. Furthermore, with email data, we reduce the impact of long messages (for example, with attachments) by consid-ering only the first 3,000 characters of each string. For blog comments and splogs, we consider the whole text, includ-inganymeta-datasuchasHTMLtags,asgiven. Noother feature selection or domain knowledge was used.
The SVM tradeoff parameter C must be tuned to balance the (potentially conflicting) goals of maximizing the mar-gin and minimizing the train ing error. Early work on SVM based spam detection [9] showed that high values of C give best performance with binary features. Later work has not always followed this lead: a (low) default setting of C was used on splog detection [17], and also on email spam [4].
Following standard machine learning practice, we tuned C on separate tuning data not used for later testing. We used the publicly available spamassassin email spam data set, and created an online learning task by randomly interleaving all 6034 labeled messages to create a single ordered set.
For tuning, we performed a coarse parameter search for C using powers of ten from .0001 to 10000. We used the Online SVM described above, and tested both binary bag of words vectors and n -gram vectors with n = { 2 , 3 , 4 } .Weusedthe first 3000 characters of each message, which included header information, body of the email, and possibly attachments. Following the recommendation of [6], we use Area under the ROC curve as our evaluation measure. The results (see Figure 2) agree with [9]: there is a plateau of high perfor-mance achieved with all values of C  X  10, and performance degrades sharply with C&lt; 1. For the remainder of our ex-perimentswithSVMsinthispaper,weset C = 100. We will return to the observation that very high values of C do not degrade performance as support for the intuition that relaxed SVMs should perform well on spam.
 Table 1: Results for Email Spam filtering with On-line SVM on benchmark data sets. Score reported is (1-ROCA)%, where 0 is optimal. Table 2: Results for Blog Comment Spam Detection using SVMs and Leave One Out Cross Validation.
 We report the same performance measures as in the prior work for meaningful comparison.
With C tuned on a separate tuning set, we then tested the performance of Online SVMs in spam detection. We used two large benchmark data sets of email spam as our test corpora. These data sets are the 2005 TREC public data set trec05p-1 of 92,189 messages, an d the 2006 TREC public data sets, trec06p , containing 37,822 messages in English. (We do not report our strong results on the trec06c corpus of Chinese messages as there have been questions raised over the validity of this test set.) We used the canonical ordering provided with each of these data sets for fair comparison.
Results for these experiments, with bag of words vectors and and n -gram vectors appear in Table 1. To compare our results with previous scores on these data sets, we use the same (1-ROCA)% measure described in [6], which is one mi-nus the area under the ROC curve, expressed as a percent. This measure shows the percent chance of error made by a classifier asserting that one message is more likely to be spam than another. These results show that Online SVMs do give state of the art performance on email spam. The only known system that out-performs the Online SVMs on the trec05p-1 data set is a recent ensemble classifier which combines the results of 53 unique spam filters [19]. To our knowledge, the Online SVM has out-performed every other single filter on these data sets, including those using Bayesian methods [5, 3], compression models [5, 3], logistic regression [10], and perceptron variants [3], the TREC com-petition winners [5, 3], and open source email spam filters BogoFilter v1.1.5 and SpamProbe v1.4d .
Blog comment spam is similar to email spam in many re-gards, and content-based methods have been proposed for detecting these spam comments [21]. However, large bench-mark data sets of labeled blog comment spam do not yet ex-ist. Thus, we run experiments on the only publicly available data set we know of, which was used in content-based blog Table 3: Results for Splog vs. Blog Detection using SVMs and Leave One Out Cross Validation. We report the same evaluation measures as in the prior work for meaningful comparison. comment spam detection experiments by [21]. Because of the small size of the data set, and because prior researchers did not conduct their experiments in an on-line setting, we test the performance of linear SVMs using leave-one-out cross validation, with SVM-Light, a standard open-source SVM implementation [14]. We use the parameter setting C = 100, with the same feature space mappings as above. We report accuracy, precision, and recall to compare these to the results given on the same data set by [21]. These results (see Table 2) show that SVMs give superior performance on this data set to the prior methodology.
As with blog comment spam, there is not yet a large, pub-licly available benchmark corpus of labeled splog detection test data. However, the authors of [17] kindly provided us with the labeled data set of 1,389 blogs and splogs that they used to test content-based splog detection using SVMs. The only difference between our methodology and that of [17] is that they used default parameters for C , which SVM-Light sets to 1 avg || x || 2 . (For normalized vectors, this default value sets C = 1.) They also tested several domain-informed fea-ture mappings, such as giving special features to url tags.
For our experiments, we used the same feature mappings as above, and tested the effect of setting C = 100. As with the methodology of [17], we performed leave one out cross validation for apples-to-apples comparison on this data. The results (see Table 3) show that a high value of C produces higher performance for the same feature space mappings, and even enables the simple 4-gram mapping to out-perform the previous best mapping which incorporated domain knowl-edge by using words and urls.
The results presented in this section demonstrate that lin-Table 4: Execution time for Online SVMs with email spam detection, in CPU seconds. These times do not include the time spent mapping strings to fea-ture vectors. The number of examples in each data set is given in the last row as corpus size.
 Figure 3: Visualizing the effect of C .Hyper-plane A maximizes the margin while accepting a small amount of training error. This corresponds to setting C to a low value. Hyperplane B ac-cepts a smaller margin in order to reduce train-ing error. This corresponds to setting C to a high value. Content-based spam filtering appears to do best with high values of C . ear SVMs give state of the art performance on content-based spam filtering. However, this performance comes at a price. Although the blog comment spam and splog data sets are too small for the quadratic training time of SVMs to ap-pear problematic, the email data sets are large enough to illustrate the problems of quadratic training cost.
Table 4 shows computation time versus data set size for each of the online learning tasks (on same system). The training cost of SVMs are prohibitive for large-scale content based spam detection, or a large blog host. In the follow-ing section, we reduce this cost by relaxing the expensive requirements of SVMs.
One of the main benefits of SVMs is that they find a deci-sion hyperplane that maximizes the margin between classes in the data space. Maximizing the margin is expensive, typically requiring quadratic training time in the number of training examples. However, as we saw in the previous section, the task of content-based spam detection is best achieved by SVMs with a high value of C . Setting C to a high value for this domain implies that minimizing train-ing loss is more important than maximizing the margin (see Figure 3).

Thus, while SVMs do create high performance spam fil-ters, applying them in practice is overkill. The full margin maximization feature that they provide is unnecessary, and relaxing this requirement can reduce computational cost. We propose three ways to relax Online SVMs:
Figure 4: Pseudo-code for Relaxed Online SVM. As we describe in the remainder of this subsection, all of these methods trade statistical robustness for reduced com-putational cost. Experimental results reported in the fol-lowing section show that they equal or approach the perfor-mance of full Online SVMs on content-based spam detection.
In the full Online SVMs, we re-optimize over the full set of seen data on every update, which becomes expensive as the number of seen data points grows. We can bound this expense by only considering the p most recent examples for optimization (see Figure 4 for pseudo-code).

Note that this is not equivalent to training a new SVM classifier from scratch on the p most recent examples, be-cause each successive optimization problem is seeded with the previous hypothesis w [8]. This hypothesis may contain values for features that do not occur anywhere in the p most recent examples, and these will not be changed. This allows the hypothesis to remember rare (but informative) features that were learned further than p examples in the past.
Formally, the optimization problem is now defined most clearly in the dual form [23]. In this case, the original soft-margin SVM is computed by maximizing at example n : subject to the previous constraints [23]: To this, we add the additional lookback buffer constraint where c j is a constant, fixed as the last value found for  X  while j&gt; ( n  X  p ). Thus, the margin found by an optimiza-tion is not guaranteed to be one that maximizes the margin for the global data set of examples { x 1 ,..., x n ) } , but rather one that satisfies a relaxed requirement that the margin be maximized over the examples { x ( n  X  p +1) ,..., x n } ,subject to the fixed constraints on the hyperplane that were found in previous optimizations over examples { x 1 ,..., x ( n (For completeness, when p  X  n , define ( n  X  p )=1.) This set of constraints reduces the number of free variables in the optimization problem, reducing computational cost.
As noted before, the KKT conditions show that a well classified example will not change the hypothesis; thus it is not necessary to re-train when we encounter such an exam-ple. Under the KKT conditions, an example x i is considered well-classified when y i f ( x i ) &gt; 1. If we re-train on every example that is not well-classified, our hyperplane will be guaranteed to be optimal at every step.

The number of re-training updates can be reduced by re-laxing the definition of well classified .Anexample x i is now considered well classified when y i f ( x i ) &gt;M ,forsome 0  X  M  X  1. Here, each update still produces an optimal hy-perplane. The learner may encounter an example that lies within the margins, but farther from the margins than M . Such an example means the hypothesis is no longer globally optimal for the data set, but it is considered good enough for continued use without immediate retraining.

This update procedure is similar to that used by vari-ants of the Perceptron algorithm [18]. In the extreme case, we can set M = 0, which creates a mistake driven Online SVM. In the experimental section, we show that this ver-sion of Online SVMs, which updates only on actual errors, does not significantly degrade performance on content-based spam detection, but does significantly reduce cost.
As an iterative solver, SMO makes repeated passes over the data set to optimize the objective function. SMO has one main loop, which can alternate between passing over the entire data set, or the smaller active set of current sup-port vectors [22]. Successive iterations of this loop bring the hyperplane closer to an optimal value. However, it is possible that these iterations provide less benefit than their expense justifies. That is, a close first approximation may be good enough. We introduce a parameter T to control the maximum number of iterations we allow. As we will see in the experimental section, this parameter can be set as low as 1 with little impact on the quality of results, providing computational savings.
In Section 2, we argued that the strong performance on content-based spam detection with SVMs with a high value of C show that the maximum margin criteria is overkill, in-curring unnecessary computational cost. In Section 3, we proposed ROSVM to address this issue, as both of these methods trade away guarantees on the maximum margin hy-perplane in return for reduced computational cost. In this section, we test these methods on the same benchmark data sets to see if state of the art performance may be achieved by these less costly methods. We find that ROSVM is capable of achieving these high levels of performance with greatly reduced cost. Our main tests on content-based spam detec-tion are performed on large benchmark sets of email data. We then apply these methods on the smaller data sets of blog comment spam and blogs, with similar performance.
In Section 3, we proposed three approaches for reducing the computational cost of Online SMO: reducing the prob-lem size, reducing the number of optimization iterations, and reducing the number of training updates. Each of these approaches relax the maximum margin criteria on the global set of previously seen data. Here we test the effect that each of these methods has on both effectiveness and efficiency. In each of these tests, we use the large benchmark email data sets, trec05p-1 and trec06p .
For our first ROSVM test, we experiment on the effect of reducing the size of the optimization problem by only considering the p most recent examples, as described in the previous section. For this test, we use the same 4-gram map-pings as for the reference experiments in Section 2, with the same value C = 100. We test a range of values p in a coarse grid search. Figure 5 reports the effect of the buffer size p in relationship to the (1-ROCA)% performance measure (top), and the number of CPU seconds required (bottom).

The results show that values of p&lt; 100 do result in de-graded performance, although they evaluate very quickly. However, p values from 500 to 10,000 perform almost as well as the original Onlin e SMO (represented here as p = 100 , 000), at dramatically reduced computational cost.
These results are important for making state of the art performance on large-scale content-based spam detection practical with online SVMs. Ordinarily, the training time would grow quadratically with the number of seen examples. However, fixing a value of p ensures that the training time is independent of the size of the data set. Furthermore, a lookback buffer allows the filter to adjust to concept drift .
In the second ROSVM test, we experiment with reducing the number of iterations. Our initial tests showed that the maximum number of iterations used by Online SMO was rarely much larger than 10 on content-based spam detection; thus we tested values of T = { 1 , 2 , 5 ,  X  X  . Other parameters were identical to the original Online SVM tests.

The results on this test were surprisingly stable (see Fig-ure 6). Reducing the maximum number of SMO iterations per update had essentially no impact on classification perfor-mance, but did result in a moderate increase in speed. This suggests that any additional iterations are spent attempting to find improvements to a hyperplane that is already very close to optimal. These results show that for content-based spam detection, we can reduce computational cost by al-lowing only a single SMO iteration (that is, T =1)with effectively equivalent performance.
For our third ROSVM experiment, we evaluate the impact of adjusting the parameter M to reduce the total number of updates. As noted before, when M = 1, the hyperplane is globally optimal at every step. Reducing M allows a slightly inconsistent hyperplane to persist until it encounters an ex-ample for which it is too inconsistent. We tested values of M from 0 to 1, at increments of 0.1. (Note that we used p = 10000 to decrease the cost of evaluating these tests.)
The results for these tests are appear in Figure 7, and show that there is a slight degradation in performance with reduced values of M , and that this degradation in perfor-mance is accompanied by an increase in efficiency. Values of M&gt; 0 . 7 give effectively equivalent performance as M =1, and still reduce cost.
We now compare ROSVM against Online SVMs on the email spam, blog comment spam, and splog detection tasks. These experiments show comparable performance on these tasks, at radically different costs. In the previous section, the effect of the different relaxation methods was tested separately. Here, we tested these methods together to cre-ate a full implementation of ROSVM. We chose the values p = 10000, T =1, M =0 . 8 for the email spam detection tasks. Note that these parameter values were selected as those allowing ROSVM to achieve comparable performance results with Online SVMs, in order to test total difference in computational cost. The splog and blog data sets were much smaller, so we set p = 100 for these tasks to allow meaningful comparisons between the reduced size and full size optimization problems. Because these values were not hand-tuned, both generalization performance and runtime results are meaningful in these experiments.
We compared Online SVMs and ROSVM on email spam, blog comment spam, and splog detection. For the email spam, we used the two large benchmark corpora, trec05p-1 and trec06p , in the standard online ordering. We randomly ordered both the blog comment spam corpus and the splog corpus to create online learning tasks. Note that this is a different setting than the leave-one-out cross validation task presented on these corpora in Section 2  X  the results are not directly comparable. However, this experimental design Table 5: Email Spam Benchmark Data. These re-sults compare Online SVM and ROSVM on email spam detection, using binary 4-gram feature space. Score reported is (1-ROCA)%, where 0 is optimal. Table 6: Blog Comment Spam. These results com-paring Online SVM and ROSVM on blog comment spam detection using binary 4-gram feature space. does allow meaningful comparison between our two online methods on these content-based spam detection tasks.
We ran each method on each task, and report the results in Tables 5, 6, and 7. Note that the CPU time reported for each method was generated on the same computing system. This time reflects only the time needed to complete online learning on tokenized data. We do not report the time taken to tokenize the data into binary 4-grams, as this is the same additive constant for all methods on each task. In all cases, ROSVM was significantly less expensive computationally.
The comparison results shown in Tables 5, 6, and 7 are striking in two ways. First, they show that the performance of Online SVMs can be matched and even exceeded by re-laxed margin methods. Second, they show a dramatic dis-parity in computational cost. ROSVM is an order of magni-tude more efficient than the normal Online SVM, and gives comparable results. Furthermore, the fixed lookback buffer ensures that the cost of each update does not depend on the size of the data set already seen, unlike Online SVMs. Note the blog and splog data sets are relatively small, and results on these data sets must be considered preliminary. Overall, these results show that there is no need to pay the high cost of SVMs to achieve this level of performance on content-based detection of spam. ROSVMs offer a far cheaper alter-native with little or no performance loss.
In the past, academic researchers and industrial practi-tioners have disagreed on the best method for online content-based detection of spam on the web. We have presented one resolution to this debate. Online SVMs do, indeed, pro-Table 7: Splog Data Set. These results compare Online SVM and ROSVM on splog detection using binary 4-gram feature space.
 duce state-of-the-art performance on this task with proper adjustment of the tradeoff parameter C , but with cost that grows quadratically with the size of the data set. The high values of C required for best performance with SVMs show that the margin maximization of Online SVMs is overkill for this task. Thus, we have proposed a less expensive alterna-tive, ROSVM, that relaxes this maximum margin require-ment, and produces nearly equivalent results. These meth-ods are efficient enough for large-scale filtering of content-based spam in its many forms.

It is natural to ask why the task of content-based spam de-tection gets strong performance from ROSVM. After all, not all data allows the relaxation of SVM requirements. We con-jecture that email spam, blog comment spam, and splogs all share the characteristic that a subset of features are partic-ularly indicative of content being either spam or not spam. These indicative features may be sparsely represented in the data set, because of spam methods such as word obfuscation, in which common spam words are intentionally misspelled in an attempt to reduce the effectiveness of word-based spam detection. Maximizing the margin may cause these sparsely represented features to be ign ored, creating an overall re-duction in performance. It appears that spam data is highly separable, allowing ROSVM to be successful with high val-ues of C and little effort given to maximizing the margin. Future work will determine how applicable relaxed SVMs are to the general problem of text classification.
Finally, we note that the success of relaxed SVM methods for content-based spam detection is a result that depends on the nature of spam data, which is potentially subject to change. Although it is currently true that ham and spam are linearly separable given an appropriate feature space, this assumption may be subject to attack. While our current methods appear robust against primitive attacks along these lines, such as the good word attack [24], we must explore the feasibility of more sophisticated attacks. [1] A. Bratko and B. Filipic. Spam filtering using [2] G. Cauwenberghs and T. Poggio. Incremental and [3] G. V. Cormack. TREC 2006 spam track overview. In [4] G. V. Cormack and A. Bratko. Batch and on-line [5] G. V. Cormack and T. R. Lynam. TREC 2005 spam [6] G.V.CormackandT.R.Lynam.On-linesupervised [7] N. Cristianini and J. Shawe-Taylor. An introduction to [8] D. DeCoste and K. Wagstaff. Alpha seeding for [9] H. Drucker, V. Vapnik, and D. Wu. Support vector [10] J. Goodman and W. Yin. Online discriminative spam [11] P. Graham. A plan for spam. 2002. [12] P. Graham. Better bayesian filtering. 2003. [13] Z. Gyongi and H. Garcia-Molina. Spam: It X  X  not just [14] T. Joachims. Text categorization with suport vector [15] T. Joachims. Training linear svms in linear time. In [16] J. Kivinen, A. Smola, and R. Williamson. Online [17] P. Kolari, T. Finin, and A. Joshi. SVMs for the [18] W. Krauth and M. M  X  ezard. Learning algorithms with [19] T. Lynam, G. Cormack, and D. Cheriton. On-line [20] V. Metsis, I. Androutsopoulos, and G. Paliouras. [21] G. Mishne, D. Carmel, and R. Lempel. Blocking blog [22] J. Platt. Sequenital minimal optimization: A fast [23] B. Scholkopf and A. Smola. Learning with Kernels: [24] G. L. Wittel and S. F. Wu. On attacking statistical
