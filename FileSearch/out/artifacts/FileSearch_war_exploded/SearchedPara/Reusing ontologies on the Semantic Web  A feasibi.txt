 1. Introduction
The term  X  X  ontology  X  was introduced to computer science as a means of formalizing the kinds of things that can be talked existence  X  [12,42] , ontologies provide knowledge engineering and artificial intelligence support for modeling some domain of the world in terms of labeled concepts, attributes and relationships, usually classified in specialization/generalization hier-archies. 1 With applications in fields such as knowledge management, information retrieval, natural language processing, eCom-merce, information integration or the emerging Semantic Web, ontologies are part of a new approach to building intelligent information systems [31]: they are intended to provide knowledge engineers with reusable pieces of declarative knowledge, which can be  X  together with problem-solving methods and reasoning services  X  assembled into high-quality systems in an economical fashion [52]. According to this idea, ontologies are understood as means to share and reuse knowledge. They are at the core of a new strategy for the development of knowledge-based systems, in which application or domain knowledge is strictly separated from software implementations and can thus be efficiently reused across heterogeneous software platforms [39].
 The emergence of the Semantic Web has marked an important stage in the evolution of ontologies. Initially introduced by
Berners-Lee [5], the originator of the World Wide Web, the idea of providing the current Web with a computer-processable knowledge infrastructure in addition to its actual, semi-formal and human-understandable content foresees the usage of knowledge components which can be easily integrated into and exchanged among arbitrary software environments in an operationalized manner. In this context the knowledge components, that is, the ontologies, are formalized using Web-suit-able, semantically unambiguous representation languages; are pervasively accessible; and (at least theoretically) are shared and reused across the Web.

Paraphrasing the general understanding of reuse in related engineering disciplines (cf., for instance, [33]), ontology reuse efficiently and effectively perform reuse is commonly acknowledged to play a crucial role in the large-scale dissemination of ontologies and ontology-driven technologies, thus being a prerequisite for the mainstream uptake of the Semantic Web. The sharing and reuse of ontologies increases the quality of the applications using them, as these applications become interop-erable and are provided with a deeper, machine-processable and commonly agreed-upon understanding of the underlying domain of interest. Secondly, analogously to other engineering disciplines, reuse, if performed in an efficient way, reduces the costs related to ontology development because it avoids the reimplementation of ontological components, which are al-ready available on the Web and can be directly  X  or after some additional customization  X  integrated into a target ontology.
Furthermore, it potentially improves the quality of the reused ontologies, as these are continuously revised and evaluated by various parties through reuse.

This article surveys case studies in ontology reuse published in the knowledge-/ontology-engineering literature from the early nineties. This survey is complemented by two self-conducted case studies in the areas of eHealth and eRecruitment in which we developed Semantic Web ontologies for different scopes and purposes by resorting to existing ontological knowl-edge on the Web. Our goal is not to provide a state-of-the-art overview of the technologies and tools which have been devel-oped in the last decade to solve specific ontology-reuse issues, but rather to give an account, based on empirical evidence and real-world findings, of the way ontology-reuse processes are typically being carried out. Based on the analysis of the case studies, we are able to identify a series of research and development challenges which should be addressed to ensure that reuse becomes a feasible alternative to other ontology-engineering strategies such as development from scratch. In partic-ular, we emphasize the need for a context-and task-sensitive treatment of ontologies, both from an engineering and a usage perspective, and identify the typical phases of reuse processes which could considerably profit from such an approach. Fur-ther on, we argue for the need for ontology-reuse methodologies which optimally exploit human and computational intel-ligence to effectively operationalize reuse processes. 2. Ontology reuse to date Ontologies are expected to play a significant role in various application domains on the emerging Semantic Web [31,70] .
Confirming these expectations, to date we have recorded an increasing number of industrial project initiatives choosing to formalize application knowledge using ontologies and Semantic Web representation languages RDFS [8],OWL[57] , or WSML [9]. The emerging ontologies, however, seldom reflect a consensual or at least application-independent view of the modeled domain. Even when using Semantic Web representation languages, these ontologies are, in the sense of knowledge manage-ment, simple means of representing knowledge, without any claim of being formal , application-independent or the result of a common agreement within a community of practice. Paraphrasing the well-known definition from Gruber [38], they might by existing statistical studies on the size of the Semantic Web. For instance, according to the Semantic Web search engine
Swoogle, the number of ontologies publicly available is estimated at approximately 10,000. already used widely  X  a high percentage of the RDF data on the Web is FOAF data [23]. Others, particularly general ontologies such as DOLCE 3 or SUMO [58], are meanwhile used in different settings as the upper-level grounding of various domain ontol-ogies. The remaining, relatively large number of qualitatively heterogeneous ontologies, modeling the same or related domains a series of factors, some specific to the Semantic Web context, others related to more general knowledge-representation and management problems.

A common precondition for the reusability of an ontology is that it should be conceived of and developed independently from its usage context [39]. Consequently, reusable ontologies tend to be overgeneralized and to omit relevant domain knowledge, thus requiring considerable modifications before they can be reutilized for specific purposes. On the other hand, the more committed an ontology is to a specific domain and task, the less its terminological elements can be general-ized and reused beyond this scope [1,16,44] . A reusable ontology ideally achieves a balance between specification and overgeneralization without compromising its cross-application usability. Furthermore, the difficulties associated with the realization of a shared ontological commitment are inherently related to the fact that the domain experts involved in the conceptualization process possess, even when they belong to the same community of practice, different, personal or orga-nization-specific views about the domain to be modeled, or are not necessarily willing to exchange and communicate the domain knowledge across the engineering team [7]. A third factor contributing to the described state of affairs is related to the still young nature of the Semantic Web field. Even if knowledge-representation structures have been around in computer science for many decades, ontologies, and in particular Semantic Web ontologies , emerged so far prevalently in stand-alone systems  X  targeted at closed user communities  X  or in proof-of-concept applications. In addition, adequate methodological and technological support for ontology-reuse processes, as well as for ontology engineering in general, is still under development. A comprehensive analysis of current ontology-usage bottlenecks is given in [43].
 Ontology discovery is facilitated by the use of URIs and Web-accessible ontological sources, which are core principles of the
Semantic Web. Semantic Web search engines such as Swoogle, Watson [21] or OntoSearch [79] and ontology repositories such as the DAML ontology library, the Prot X g X  OWL library, the SchemaWeb directory, as previously mentioned, are based neither on application-independent nor on community-agreed conceptualizations. These is-such cases the evaluation cannot be performed completely manually due to the complexity and size of the modeled field. At the same time, the usage of existing sources in these domains is inevitable because of the high costs associated with a new imple-setting. Once ontology designers have determined the relevance of the candidate source ontologies with respect to a set of complete fragments from ontologies which are only partially relevant to the application setting. The former is one the most ma-ture areas of research in the Semantic Web community (cf. [27,29,35,49 X 51,53,63,72] and many more). Ontology modularization is a comparatively recent research topic, and preliminary results are presented, for instance, in [22,30,68] .
Reusing Semantic Web ontologies requires coping with many of the problems encountered for years in software or knowledge engineering and should hence make use of the impressive body of expertise already available in these disciplines.
Compared to these research fields, the reuse issue in the Semantic Web context does, however, present some particularities, which under certain circumstances might encourage or endanger its feasibility. The importance of reuse in relation to ontol-ogies is increased by the fact that ontologies are per default intended to be deployed and extended in a variety of contexts in order to mediate communication between humans and machines. Without being reused, ontologies are restricted to classical knowledge bases, and are thus not able to contribute to the realization of the Semantic Web which requires commonly agreed ontologies to mediate between services accessing semantically annotated information spaces. On the other hand, finding ontological resources  X  one of the core prerequisites for reuse  X  could be considerably enhanced in the Semantic
Web era: ontologies, as well as ontological entities such as concepts or properties, are globally identified by means of URIs and could be discovered by dedicated crawlers and accessed ubiquitously on the Web. Language incompatibilities are ex-pected to be coped with through the enforcement of Web-suitable knowledge-representation languages such as RDF(S) and OWL. Some elaborated methodologies covering major stages of the ontology life cycle complemented by a plethora of ontology-management tools (cf. for instance [70,74] for an overview) constitute a solid inventory for developing a Seman-tic Web-suitable ontology-reuse platform. Finally, in contrast to the software engineering field, the formal nature of ontol-ogies and their representation using standardized machine-understandable languages open up new vistas for the operationalization of the reuse process. Reuse-relevant activities such as those related to component classification systems, retrieval of reusable components, metadata generation, automatic pattern recognition or component integration are likely to be operated (semi)automatically using semantics-enabled technologies. Compared to classical knowledge bases, the impor-tance of the ontology-maintenance problem has been recognized in a timely manner in the ontology-engineering commu-nity, resulting in a series of methodologies and (automatized) methods and tools supporting the systematic and consistent evolution of ontological contents, at both schema and data levels [46,61,71] . Last but not least, the advent of Web 2.0 can be seen as a first step towards the realization of widely accepted ontologies. Enhancing simple tagging structures with formal semantics provides an efficient means for exploiting the impressive amount of user-generated content for the realization of community-driven ontologies Klamma et al. [45], Rattenbury [64], Damme [20].

These factors let us assume that the reuse of knowledge in the Semantic Web context can benefit from the open, ubiq-uitous nature of the Web, from the emergence of standards for machine-processable knowledge representation, and from the methodological and technological ontology-engineering infrastructure, thus helping to alleviate some of the major obsta-cles so far impeding reuse in related engineering disciplines. However, in order to tap the full potential of these favorable circumstances, we see a need to revise and refine current ontology-reuse solutions towards a new level of feasibility. This need is clearly evidenced in the case studies described in Sections 3 X 5. 3. Case studies in ontology reuse
In this section we provide an overview of the most prominent case studies on ontology reuse, which have been published in the knowledge-/ontology-engineering literature from the early nineties to the present. We analyze every case study from two perspectives: (1) In order to find out whether ontology-reuse processes are performed systematically and to detect which are the core (2) In order to identify methods and techniques which proved to be helpful for the accomplishment of particular reuse 3.1. Gom X z-P X rez and Rojas-Amaya X  X  case study
Gom X z-P X rez and Rojas-Amaya describe a case study in which an ontology for standard units and a chemical ontology are reused for the purpose of developing an ontology for environmental pollutants [37]. The reuse process focuses on a method for ontology reengineering which attempts to capture the conceptual model of the implemented source ontologies in order to transform them into a new, more correct and more complete ontology. The reengineering methodology proposed by the authors consists of three steps: (1) Reverse engineering : On the basis of the code of the source ontology, that is, its implementation in a particular repre-(2) Restructuring : The objective of this step is to evaluate the correctness of the extracted model, correct the detected (3) Forward engineering : The ontology is reimplemented on the basis of the revised conceptual model.

The reuse process was performed according to the following stages: (1) Select reuse candidates : Ontologies stored on the Ontolingua (2) Reengineering : Relevant ontologies were reengineered as described above. (3) Merging : The ontologies were merged into a final product.
 The focus of the work is to demonstrate the applicability of the reengineering approach with the help of a case study.
Therefore, the reported results do not provide evidence on the feasibility of current semantic technologies as regards ontol-ogy reuse, but rather concentrate on the validation of the self-developed methodology. Nevertheless, the authors admit the limitations of their approach with respect to the complexity of the ontological sources employed, and the need for automatic means. The experiment was restricted to taxonomical ontologies containing a manageable number of at most several hun-dred concepts. Nevertheless, the proposed reengineering workflow was executed manually, with considerable effort (18 months) in relation to the small size of the ontologies. 3.2. Uschold and Healy X  X  case study
Uschold and Healy report on an experiment in which an engineering mathematics ontology is reused to detail the specification of a simple software tool, and to enforce units conversion and dimensional consistency-checking capabili-ties to this application [77]. In this attempt they tackle some of the most important issues related to the question of reusability: (1) Understand ontology and find the reuse kernel : In this step the ontology is  X  X  X ead through X  by engineers and an initial (2) Translate the ontology : The ontology is converted from Ontolingua into a knowledge-level representation. (4) Verify refinement : Verify that the generated executable code corresponds to the original ontology-based specification. (5) Integrate into application : The reused ontology is embedded in the application environment. In the overall ontology-
The case study reported in [77] reveals several important limitations of present reuse technologies, although it does not investigate the complete reuse cycle at the same level of detail. While the authors declare that, in this experiment, reusing existing ontologies was subjectively profitable, they admit that further systematic investigations are required in order to resentation formats and the need for a context-oriented approach to performing this task:
Intrinsic problems ( ... ) arise when design decisions required to make a good translation depend on information not present in the original ontology. In particular, one must consider the tasks to which the ontology is intended to serve. [77]. 3.3. Russ et al. case study
Russ and colleagues describe a case study in which an ontology covering the air-campaign domain was built by reusing existing ontologies partially covering its context. The reuse process, which does not adhere to a specific methodology, con-sists of the following steps: (1) Select candidate ontologies : While this step is not elaborated in the case study, the authors identify a general time (2) Translation : The ontology of time is translated from Ontolingua to Loom. (3) Merge domain ontologies : Two ontologies modeling the aircraft domain are merged, and the results are evaluated and (4) Integrate time ontology : The final ontology is obtained by aligning the domain knowledge component with the time
The conclusions of this case study are comparable to those of Uschold and Healy. While the reuse of the three ontologies is perceived to be beneficial for the target application, the authors emphasize the limitations of the techniques available so far, particularly of those related to language translators and ontology merging. Again, the lessons learned from this empirical experiment focus on the necessity of a task-oriented approach to reuse, as a means to improve the usability of general-pur-pose methods and methodologies in real-world scenarios. With respect to automatic translation the authors argue that for a tool that incorporates a language to talk about ontologies, their relations and relations among their components.  X  [65]. 3.4. Peralta and Pinto X  X  case study
Peralta and Pinto describe the development of the ONTO-SD ontology for a natural language dialogue system for a ticket vending machine [59]. The ontology comprised several subontologies, capturing knowledge from different domains related to traveling and ticket vending, and ranging from commercial translation to location information and time. In particular, the timesubontologywasdevelopedbyreuse,andthepaperreportsontheexperiencesandlessonslearnedfromthereuseprocess.
This case study was performed according to the following steps: (1) Choice of ontologies to reuse : The authors looked for ontologies in ontology repositories popular at that time, notably (2) Reverse engineering : A conceptual model for the Simple-Time ontology was created manually by identifying classes, (3) Import from Ontolingua : This technical step mainly involved the use of the OKBC plug-in available within the ontology (4) Analysis and revision : The Simple-Time ontology was evaluated at the conceptual and the technical level against a
The main conclusions of this case study refer to the advantages of adequate tool support in several stages of the reuse process. The authors based their choice of the ontology to be reused on the availability of automated tools for extracting knowledge in a particular domain from a large, general-purpose ontology. Another particularity of the case study is the way in which the authors carried out the last step of the process. The analysis and revision were performed in an iterative fashion, alternately on the conceptual and the imported sources, in order to overcome the limitations of the individual views. 3.5. Capellades X  case study
Capellades aimed to build an application ontology by reusing ontologies available at the Ontolingua Server. The reuse pro-cess covered two main stages [14]: (1) Select candidate ontologies : The selection step did not have to cope with the issue of discovering potential reuse can-(2) Customize and integrate relevant ontologies : Due to the poor application relevance results obtained in the previous step,
The main conclusions of this experiment refer to the first process stage. The author accounts for the nontrivial nature of the ontology-selection task, which was additionally impeded by the lack of feasible methodologies and methods for compar-ing or evaluating ontologies. 3.6. Arp X rez at al. case study
Arp X rez and colleagues give an account of a case study in which the  X  KA  X  Reference ontology, a metaontology intended to capture information about ontologies and ontology-engineering projects [2].
The activities performed in the case study, covering three phases, are not representative for a complete reuse life cycle: (1) Choosing candidate ontologies : In this step the  X  KA  X  (2) Analysis of the candidate ontologies : The ontology was analyzed as regards the quality of its modeling decisions and its (3) Integration : The  X  KA  X  2 ontology was extended and revised in order to adapt it to the requirements of the new Reference
Reusing the  X  KA  X  2 ontology was perceived as beneficial by the case study authors, who mention cost and interoperability as two of the major advantages of this engineering strategy. However, they also identify the circumstances which contribute to the efficient operation of the reuse process: the availability of the reused ontology in an appropriate representation form, the availability of documentation, and the extensive knowledge of the ontology engineers with respect to the domain of the ontology. 3.7. Laresgoiti et al. case study
In order to illustrate the use of the KACTUS framework in real-world situations, Laresgoiti and colleagues set up an exper-iment in which an existing electrical network ontology was intended to be reused in an application which automatically tested equipment at fault in a Spanish electricity company [47]. The experiment was not performed in explicit compliance trical network ontology in the new application context. While the authors report on the benefits of performing reuse in this setting, they are also aware of the limited applicability of their conclusions in arbitrary scenarios and emphasize the funda-mental role that the original purpose of the reusable knowledge components plays in the success of this challenging process.
Furthermore, they state the need for a fine-grained reuse methodology in order to allow widespread dissemination of ontol-ogies beyond the boundaries of the knowledge-engineering community. 3.8. Bernaras et al. case study
Bernaras et al. combine a domain ontology of electrical transmission networks with a task ontology for service recovery planning on the same domain for application purposes [4]. Again, the case study does not cover the complete range of activities required to perform reuse in arbitrary settings, from discovering the reuse candidates to embedding them in the target application system. It is restricted to experiences in merging the previously mentioned ontologies at a concep-tual level. Nevertheless, the conclusions of the case study clearly acknowledge the difficulties related to ontology reuse and emphasize the need for an in-depth cost-benefit analysis of reuse-oriented knowledge engineering against other development alternatives. These conclusions are based on the experiences gained during the case study; abstraction and standardization, design principles considered per default to enhance reusability, implied considerable costs for adapt-ing the abstract ontological primitives of the two reused ontologies to the level of detail imposed by the application system. 3.9. Zhao et al. case study
Zhao et al. report on two case studies in ontology reuse in which they attempted to reuse established eBusiness and eCommerce classification systems to build Semantic Web ontologies [80,81] . In the first case study, an eCommerce ontology was developed based on existing XML standards such as xCBL, UBL, RosettaNet, and OAGIS. propose a unifying vocabulary comprised of reusable generic components which are covered by several of the surveyed stan-dards. The second case study was in the eProcurement domain. It was based on the same four standards, but it focused more on translation issues from XML schemas to OWL ontologies. As a result of their empirical investigations, the authors specify requirements for tool support at various stages of the reuse process: (1) Libraries and repositories to facilitate uniform access to eBusiness and eCommerce ontologies and ontology-like (2) Automatic means to translate XML data to OWL. (3) OWL validators. (4) Ontology visualization software. 3.10. Coulet et al. case study
Coulet et al. present a case study in which a domain ontology was developed by reuse in order to enhance knowledge-discovery-in-databases (KDD) processes in the pharmacogenomics domain [19]. The ontology was expected to be useful in several tasks in the KDD context: to resolve heterogeneities among different data sources, to provide a common domain conceptualization in which discovery results could be stored and reused, and to semantically guide the mining of the bio-logical data. Around 20 knowledge resources were identified as relevant to the application domain during the requirements analysis phase. They were further evaluated with respect to several criteria, the most important being the format in which they were available  X  in this case OBO was preferred  X  and the context in which they were developed, here the OBO-Foundry project. The OBO-Foundry project has defined a series of quality principles for ontology development, which provide addi-tional guarantees for the ontologies originating from this project. During the implementation phase most of the highly het-erogeneous source ontologies, including UML models, XML schemas, databases, controlled vocabularies and so on, were manually coded to OWL. In the case of the OBO ontologies this translation was carried out in an automated fashion. The eval-uation of the target ontology is still ongoing.

From an ontology-reuse point of view, this case study provides several interesting insights with respect to the way reuse processes are being performed in one of the most important application areas for semantic technologies. On the one hand it states once more the need for automatic tool support for ontology engineering, most notably ontology assessment and align-ment, and for translators from UML and XML schemas to OWL. On the other hand, it presents ontology reuse as a potentially viable alternative or a useful complementary activity to manual ontology development. 3.11. Ding et al. case study Ding et al. present an ontology-development method based on ontology reuse and NLP-driven knowledge acquisition
Ding et al. [25]. A novelty of the approach is the mechanization of the former. Mechanization is understood as a viable alter-native to the costly human-driven ontology-reuse processes, which involve tedious tasks such as ontology assessment. As inputs, the method uses source ontologies and natural language documents in the relevant domain. It consists of three steps, concept selection, relation retrieval, and constraint discovery, which correspond to the definition of classes, relationships, and restrictions within an OWL ontology. The authors carried out a series of experiments to improve the results of their auto-mated method, from which they derived several interesting rules of thumb applicable to classical ontology reuse also. In principle, reuse is considered to be a viable alternative to development from scratch, especially if performed in an automated fashion. The experiments furthermore confirm the positive impact of knowledge acquisition from texts and ontology mod-ularization on the efficiency of the reuse process, while issues such as ontology assessment, either performed automatically or with human intervention, are still open. 3.12. Conclusions
In this section we have presented some of the most important case studies published in the last decade in the literature on ontology reuse. They describe experiments in which ontologies have been developed by reuse, and discuss the empirical find-ings of these experiments. The case studies have been analyzed in terms of both the methodology followed and the technical details of the activities carried out. They characterize reuse as a primarily manual process assisted by tools which perform very specific tasks such as translation between representation formats or extraction of structured information from texts.
Activities such as ontology assessment, integration, translation, and customization seem to be relevant across case studies, though the way they are performed varies significantly. The need for tool support is also a finding shared by all surveyed case semantics gain more industrial adopters. Putting these potential developments aside, the questions of which tasks and activ-ities within the reuse process can feasibly be automated, or are intrinsically human-driven, and what a truly semiautomatic approach to ontology reuse should look like from a methodology and a tool perspective still require further investigation.
The conclusions of the previously mentioned investigations were confirmed by the experiences we gained during two case studies focusing on reusing existing ontologies in the areas of medicine and job recruitment, respectively. Sections 4 and 5 are dedicated to a detailed description of these studies and the lessons learned during their operation. Section 6 iden-tifies a series of requirements for practical ontology reuse. 4. Case study eHealth 4.1. A semantic web for pathology
The project  X  X  X  Semantic Web for Pathology X  aimed to build a retrieval system for pathology information based on Seman-tic Web technologies . The core of the retrieval system is a knowledge base consisting of several domain and generic ontologies and a set of rules describing decision processes in routine pathology. The knowledge base can be used to improve the retrie-val capabilities of the archive of pathology information items. These are pathology reports in textual form, containing the observations of the domain experts (pathologists) with respect to medical cases, and digital histological slides, which are digital images obtained through high-quality scans of glass slides with tissue samples.

A complete description of the project is beyond the scope of this article, which focuses only on ontology-engineering as-pects. The architecture of the system as well as further information on the system components are addressed in more detail in [66,75] . 4.2. Reusing medical ontologies
The medical knowledge base was built upon UMLS, which in 2003 contained over 1.5 million concepts from over 100 medical libraries. Due to the complexity of the thesaurus and the limitations of Semantic Web tools at that time, it had to be customized with respect to two important axes: (1) Evaluation of the UMLS ontologies : This task focused on the selection of libraries and concepts corresponding to  X  X  X ung (2) Customization of the relevant sources : Candidate ontologies were adapted to the particularities of language and vocab-
This two-phase approach was justified by the application-oriented character of the case study. Its aim was not to build a general Semantic Web knowledge base for pathology, or even lung pathology, but rather one which was tailored for, and which could be efficiently used in that application setting. Additionally, building the knowledge base also implies a subse-quent adaptation of the content, performed by domain experts. Therefore, the experts should be able to evaluate and modify the ontology. Along with their technical drawbacks, very large ontologies have the additional disadvantage that they cannot be used efficiently by humans. 4.2.1. Evaluation of the UMLS Ontologies
The straightforward method for addressing the evaluation of the UMLS ontologies is to use the UMLS Knowledge Server, which provides the MetamorphoSys tool and an additional API to tailor the thesaurus to specific application needs. However, both allow mainly syntactic filtering methods (for example, they exclude complete UMLS sources, languages, or term syn-onyms) and do not offer means to analyze the semantics of particular libraries or to use only relevant parts of them. In a preselection phase domain experts reduced the huge amount of medical information from UMLS to the domain pathology .
They identified potentially relevant UMLS libraries. The large number of partially overlapping libraries and the complexity of their interdependencies made this process time-consuming and error-prone, so that the final goal of the preselection phase was to identify libraries which were definitively irrelevant to our application domain. This approach corresponds to the recommendations in [60], which foresees a two-step selection process that starts by eliminating ontological sources which are not relevant to the application scope.

Approximately 50 percent of the UMLS libraries, containing more than 500,000 concepts, were assessed as potentially rel-evant. Managing an ontology of such dimensions with Semantic Web technologies involved still-unsolved issues with re-spect to the scalability and performance of the system. In the second step, the case-reports archive was used as input for identifying those concepts, which actually occur in medical reports. Such concepts are really used by pathologists when putt-ing down their observations and therefore will also occur as search parameters. The vocabulary of the reports archive was compared to the content of the preselected UMLS libraries by means of an open source information retrieval program. The retrieval program assessed the relevance of each UMLS library  X  or its vocabulary  X  to the  X  X  X uery X  issued. The queries were generated out of the medical reports and contained the terms used in these documents. taining approximately 350,000 different concepts.

The size of the concept set can be explained if we consider the fact that the UMLS knowledge is concentrated in a few major libraries which cover important parts of the complete thesaurus and therefore contain most of the concepts in our lexicon. To differentiate among the concepts within the 10 resulting libraries, pathology experts selected four central con-ontologies. They considered the list of all distinct concepts related through a relation of any kind input for the domain ontology. 4.2.2. Customization of the relevant sources
The linguistic analysis of the patient-report corpus demonstrated the content-related limitations of UMLS with respect to the concrete vocabulary of the report archive. Additional pathology-specific concepts, such as the components and typical content of a medical report, were added to the available ontology library. Besides content-related adaptation needs, the anal-ysis of the generated ontology outlined several  X  X  syntactic  X  issues for further adaptations:
The absence of naming conventions in UMLS: concepts across UMLS ontologies are not denominated using predefined naming conventions (for example,  X  X  RESECTION OF LUNG WITH RECONSTRUCTION OF CHESTWALL WITHOUT PROSTHESIS  X  ). tation significantly more difficult.
 The absence of explicitly represented semantics: concepts such as  X  X  ARF-smaller-than-2  X ,  X  X  RESECTION OF LUNG WITH
RECONSTRUCTION OF CHEST WALL WITHOUT PROSTHESIS  X ,  X  X  Unspecified injury of lung with open wound into thorax  X  should be modeled as concepts with corresponding properties and not directly as single concepts, whose names denote their meaning.

The absence of concept names in the German language: due to the predominance of English in denominating UMLS con-cepts and the predominance of German terms in the pathology report archive in our application setting one needs to translate the English labels into German in order to achieve an efficient retrieval.

The comparison of the vocabulary of the medical reports archive with the generated ontology also emphasized the need to extend the knowledge base with non-medical content. In particular, part-whole and spatial relationships are often encountered in medical findings and were therefore included in the ontology library. 4.2.3. Implementation
After identifying the relevant knowledge sources and the list of concepts which could be used as input for our application, the UMLS data was translated to OWL. A Java-based module, which reads the UMLS data from a relational database and generates the corresponding OWL constructs, was implemented using Jena2. side and can be accessed by all components in the system. The UMLS consists of two main parts [76]: the UMLS Semantic
Network and the UMLS Metathesaurus. The Semantic Network contains generic medical categories and relationships (approx-the Metathesaurus, which brings together the particular UMLS libraries. The Metathesaurus consists of a list of uniquely iden-relations between concepts are usually typed by means of the semantic relations from the Semantic Network.
A peculiarity of the UMLS data format is the meaning of the  X  X  relation attributes  X  used for some of the Metathesaurus rela-tions. A relation attribute references a semantic relation from the Semantic Network, but its exact meaning in the context of a given pair of concepts depends on the associated Metathesaurus relation. For example, the combination ated _ with (a relation from the Semantic Network) and parent ship between the concepts, while the same attribute together with the Metathesaurus relation relationship between the concepts, that is something like a path of length greater than 1 between the concepts. The absence of a relation attribute reduces the Metathesaurus relations to their original meaning, for instance, a relation attribute is interpreted as subClassOf .

The list of application-relevant concepts is part of the Metathesaurus and therefore, each of the concepts is subsumed by semantic types. The ontology-engineering team first translated the UMLS Semantic Network to OWL and created a taxonomy of semantic types as classes and a taxonomy of semantic relations as properties. A second ontology contains the UMLS con-cepts; every UMLS concept was transformed into an OWL class. The Metathesarus relations ized as OWL subClassOf constraints. The narrower and broader were formalized as ancestor and descendant in the OWL ontology. These relations could also be ignored, since their meaning could be inferred from the ontology using a reasoner. The semantics of the rest of the Metathesaurus relations is not precisely defined. Therefore, they were merged into a single between relations and relation attributes was also considered. Since the relation attribute points to the semantics of a rela-tionship between two concepts, the engineering team used this information when available. They considered the Metathes-arus relations only for the cases where a relation attribute was missing. Further on, they stored the list of alternative names for every concept together with language specifications as
UMLS libraries containing it. A list of all available UMLS libraries was also formalized in a separate ontology, which was im-ported by the core ontology.

After translating the UMLS data to OWL, we performed a consistency check of the resulting ontologies. The analysis of the inferred classification hierarchy revealed few differences in related to the original UMLS hierarchy. The UMLS contains sev-eral problematic modeling decisions which have frequently been described in research projects aiming to integrate it into knowledge-based applications. Still, a comprehensive analysis of the quality of UMLS in such a setting or especially for Semantic Web applications has not delivered an optimal solution to this problem. A possible starting point could be the
Semantic Network, since every Metathesaurus concept is related to it. Additionally, the Semantic Network is supposed to be independent of a particular area in medicine. [67,11] describe some of the deficiencies of the Semantic Network at the ontological level. [62] analyzes the same issue for the UMLS Metathesaurus. However, these issues have proven to be sec-ondary for the quality of the retrieval system, which finally made use of a relatively compact fragment of the developed ontology. Representing medical knowledge using Description Logics is not a trivial task [15]. Although translating the UMLS data format to OWL was a straightforward procedure, the expressivity limitations of the OWL language became clear after a detailed analysis of the semantics of the medical knowledge. Reasoning beyond subsumption hierarchies and extended sup-port for concrete domains are very important for an efficient semantic retrieval system. The lack of automatic methods to deal with these issues was compensated for in our system by a semiautomatic approach to ontology-based search: for a gi-ven search query the user has the possibility of choosing semantic relationships which should be taken into account during the retrieval of the relevant documents. The processing of these additional relationships is handled using common query lan-guages for RDFS and OWL. 4.2.4. Conclusions and lessons learned The complexity of the application domain made the building of a lung pathology ontology from scratch extremely costly. Reusing existing sources theoretically increased interoperability, since the target ontology is, at least partially, aligned to
UMLS, which is used by several medical information systems. However, though it contains a huge amount of domain infor-mation, the reuse of UMLS and integrated libraries in our application setting was not trivial, due to the often ambiguous modeling decisions and an error-prone integration schema [34,41,67] . The task specificity of each UMLS library, the com-plexity of the complete thesaurus, and the heterogeneous coverage degree for specific medicine subdomains such as ours, icine ontologies are available in a proprietary representation format which hampers sharing and reuse. A translator from
UMLS to OWL ontologies is, to the author X  X  knowledge, not available.
The most challenging tasks carried out in this experiment can be easily identified by examining the time distribution of the development efforts. The customization of the source ontologies required over 45 percent of the time necessary to build the overall target ontology. A further 15 percent of the engineering time was spent on translating the input representation formalism to OWL. The reuse-oriented approach required considerable effort to evaluate and extend the outcomes (approx-imately 40 percent of the total engineering time). According to our experiences in this project, the benefits of reuse were outweighed by the costs, because of the difficulties related to the evaluation and (technical) management of large-scale ontologies and because of the costs of the subsequent refinement phase.

Another important issue was the usage of the ontology by the community of domain experts, who reported serious accep-tance problems with respect to the UMLS-based ontology: domain experts seemed to have difficulties in trusting the content of the ontology and in systematically extending it for a more detailed representation of pathology-specific knowledge. This was the main motivation for building a second application ontology on the basis of the domain corpus of patient records provided by our healthcare partner [56]. The engineering process relied on the same engineering methodology as the first experiment, while XML-based medical reports were employed as an input for the conceptualization phase (cf. [56] for a de-tailed description and evaluation of the methods employed). The main advantages of the latter experiment compared to the
UMLS-based one were the significant cost savings and the increased fitness for use of the generated ontology with respect to the semantic annotation task. From a resource point of view, building the first ontology involved four times as many re-sources as the second approach (5 person-months for the UMLS-based ontology with 1,200 concepts versus 1.25 person-annotating medical documents confirmed the results of the resource-based evaluation. In addition to the technical and eco-nomical benefits the ontology derived from the medical reports had a considerably higher acceptance rate among its users: the results of the methodology were easily understandable to the domain experts, who were able to rapidly evaluate and refine the ontology.

The lessons learned during this case study have been summarized in [55] in an inventory of guidelines which are valid for similar expert domains and for application scenarios related to information retrieval and automatic semantic annotation. As a starting point, we used a set of domain-independent guidelines from the European project OntoWeb, which focus less on tance of the ontology-based application  X  [54]. The initial checklist contains 13 items covering both organizational and ontol-ogy-specific issues. Since the engineering team did not encounter any problems related to the organizational setting (satisfactory user involvement, no legacy systems or license problems, etc.), we elaborated on the topics which relate directly to the ontology-engineering process and adapted them to the medical domain. This list, illustrated in Table 1 , could be com-plemented with the addition of modeling best practices, which are equally important in complex domains such as medicine.
Such best practices are emerging as a result of the W3C Semantic Web Best Practices and Deployment Working Group.
The guidelines contributed significantly to the ontology-reuse requirements specification in Section 6. 5. Case study eRecruitment 5.1. Knowledge nets
The  X  X  X nowledge Nets X  project explores the potential of Semantic Web from a business and a technical perspective by examining the effects of the deployment of Semantic Web technologies on particular application scenarios and market sec-tors. The aim of the case study was to analyze the potential of Semantic Web technologies, especially ontologies, in coping with the bottlenecks of present eRecruitment solutions, particularly with the limitations of keyword-or statistics-based information retrieval techniques used in job search engines. In doing so, domain-relevant ontologies termed as  X  X  X uman re-sources/HR ontologies X  would be used as semantic indices, by which job descriptions and applications in the selected sector could be classified and matched, thus enhancing the system with semantics-aware search functionalities.

Just as in the eHealth scenario, a complete description of the application underlying the case study is beyond the scope of this article, which is concerned with ontology-engineering aspects (cf. for example [6] for a detailed description of the scenario). 5.2. Reusing human resources ontologies
The usage of commonly agreed-upon ontologies has a long tradition in the human resources field. The need for compre-hensive classification systems describing occupational profiles has been recognized at an early stage of the eRecruitment era by many interested parties. In particular, and in contrast to the medical sector , major governmental and international orga-nizations drove the emergence of standard classifications comprising unambiguous and well-documented descriptions of occupational titles and associated skills and qualifications. The result is an impressive inventory of classification systems, mostly at the national level, ready to be deployed in job portals in order to simplify the management of electronically available job postings and job-seeker profiles and to encourage application interoperability. Standards such as O NET (Occupational Net), ISIC (International Standard Industrial Classification of Economic Activities), SOC (Standard Occupational
Classification), or NAICS (North American Industry Classification System), to name only a few, are feasible building blocks for the development of eRecruitment information systems. At the same time, they are valuable knowledge resources for the development of application-specific ontologies, which could inject domain semantics-awareness into classical solutions in this field, as described below.

The reuse process was performed according to the following three phases: (1) Discovery of the reuse candidates : In this step the ontology-engineering team conducted a survey of potentially reusable (2) Selection of the relevant ontological sources : The results of the previous step were analyzed with respect to domain and (3) Customization and integration of the ontologies to be reused : The relevant fragments of the (to some extent) very com-5.2.1. Discovery of the reuse candidates
In order to compute a list of existing ontologies or ontology-like structures potentially relevant for the human resources domain, we carried out a comprehensive search with the help of currently available ontology-location support technologies:
General-purpose search engines: We used conventional search tools and predefined queries combining implementation and content descriptors such as  X  X  X iletype:xsd human resources X  or  X  X  X ccupation classification X .

Ontology search engines and repositories: Resorting to existing dedicated search engines and ontology repositories clearly pointed out the immaturity of these technologies for the Semantic Web.

Domain-related sites and organizations: A third search strategy focused on international and national governmental insti-tutions which might be involved in standardizations efforts in the area of human resources. These organizations make their work, which is proposed for standardization, publicly available in form of domain-relevant, lightweight HR ontologies.

The result of the discovery procedure  X  which was performed as manual Google-based searches on preselected keywords in correlation with the investigation of the Web sites of international and national employment organizations  X  was a list of approximately 24 resources covering both descriptions of the recruitment process and classifications of occupations, skills, or industrial sectors in English and German. Semantic Web search engines (Swoogle) and repositories (the DAML library, the
Prot X g X  OWL library, the SchemaWeb directory) available at that time did not return any results. 5.2.2. Selection of the relevant reuse candidates
The engineering team decided to reuse the following resources: (1) HR-BA-XML : The official German translation of Human Resources XML, the most widely used standard for process doc-(2) BKZ : Berufskennziffer, which is a German version of SOC System, classifying employees into 5,597 occupational cat-(3) SOC : Standard Occupational Classification, which classifies workers into occupational categories (23 major groups, 96 (4) WZ2003 : Wirtschaftszweige 2003, which is a German classification standard for industrial sectors. (5) NAICS : North American Industry Classification System, which provides industry-sector definitions for Canada, Mexico, (6) KOWIEN : Skill Ontology from the University of Essen, which defines concepts representing the competencies required
The selection of the six sources was performed manually without the use of a predefined methodology or evaluation framework. The documentation of the 24 potential reuse candidates was consulted in order to assess the relevance of the modeled domain to the application setting. The decision for or against a particular resource was very effective due to the small number of reuse candidates covering the same or similar domains and the simplicity of the evaluation framework, which focused on provenance and natural language aspects. Nevertheless, the resulting ontologies required intensive post modifications in order to adapt them to the requirements of the tasks they were expected to be involved in at the application level. The importance of these application-oriented constraints was underestimated by the engineering team at that point.
They were not taken into account during the evaluation in the absence of a methodology for assessing the usability of the six reuse candidates against them.

For the German version of the ontology, the BKZ and the WZ2003 were the natural choice for representing occupational categories and industrial sectors, respectively. The same applies for the English version, which reused the SOC and NAICS classifications. As for occupational classifications in the English language, the SOC system was preferred to alternative such as NOC or O NET due to the availability of an official German translation. classifications in the human resources area. 5.2.3. Customization and integration of the relevant sources
The main challenge of the eRecruitment scenario was the adaption of the six reusable ontologies to the technical require-ments of the job portal application. From a content-oriented perspective, five of the sources were included 100 percent in the final setting, due to the generality of the application domain. The focus on a particular industrial sector or occupation cat-egory would require a customization of the source ontologies in the form of an extraction of the relevant fragments. To accomplish this task for the KOWIEN ontology, we compiled a small conceptual vocabulary (of approx. 15 concepts) from various job portals and job-procurement Web sites and matched these core concepts manually to the source ontology.
The candidate sources vary with respect to the represented domain, the degree of formality, and the granularity of the conceptualization. They are labeled using different natural languages and implemented in various formats: text files (BKZ,
WZ2003), XML schemas (HR-XML, HR-BA-XML), DAML+OIL (KOWIEN). While dealing with different natural languages com-plicated the process, human-readable concept names in German and English were required in order to make the ontology usable in different job portals and to avoid language-specific problems. Another important characteristic of the candidate ontologies is the absence of semantic relationships among concepts. Except for the KOWIEN ontology, which contains rela-tionships between skill concepts, the remaining ones are confined to taxonomical relationships at most. Consequently we had to focus on how vocabularies (concepts and relations) could be extracted and integrated into the target ontology. The usage of the ontology in semantic matching tasks requires that it is represented in a highly formal representation language.
For this reason the implementation of the human resources ontology was realized by translating several semi structured in-put formalisms and manually coding text-based classification standards to OWL. 5.2.4. Conclusions and lessons learned
A wide range of standards for process modeling and classification schemas for occupations, skills, and competencies have been developed by major organizations in the human resources field. Using these standards was a central requirement for the simplification of the communication between international organizations accessing the portal and for interoperability purposes. Additionally, reusing classification schemas such as BKZ, WZ2003 and their English variants, which were com-pletely integrated into the target ontology, meant significant cost reductions. They guaranteed a comprehensive conceptu-alization of the corresponding subdomains and saved the costs that would normally be incurred through a collaboration with domain experts.

Further on, due to the generality of the application domain  X  the final application ontology provided a (high-level) con-ceptualization of the complete human resources domain  X  and to the manageable number of preselected reuse candidates, the ontology-evaluation step did not entail major development costs. This is indicated by the distribution of effort in each of the enumerated process stages. Solely 15 percent of the total engineering time was spent on searching and identifying the relevant sources. Approximately 35 percent of the overall efforts was spent on customizing the selected source ontologies.
Due to the heterogeneity of the knowledge sources and their integration into the final ontology, up to 40 percent of the total engineering costs was necessary to translate these sources to the target representation language OWL. Lastly, the refinement and evaluation process required the remaining 10 percent. The aggregation of knowledge from different domains proved to be a very time-consuming and tedious task because of the wide range of classifications available so far. The second cost-intensive factor was related to technological issues. Though nontrivial, the manual selection of relevant parts from the KOW-
IEN ontology and the HR-BA-XML standard was possible in our case thanks to the high connectivity degree of the pruned fragments and to relatively simple, tree-like structure of the sources. However, we see a clear need for tools which assist the ontology engineer during this kind of task on real-world, large-scale ontologies with many thousands of concepts and more complicated structure. Despite the problems mentioned, our experiences in the eRecruitment domain make us believe that reusability is both desirable and possible. Even though the ontology is still under development, it already fulfills the most important requirements of the application scenario, which are related to interoperability and knowledge share among job portals. Reusing available ontologies requires, however, a significant amount of manual work, even when using common representation languages such as XML schema or OWL. The reuse process would have been significantly optimized in terms of costs and quality of the outcomes with the necessary technical support.

The case study emphasized once more the need for extensive methodological support for domain experts with respect to ontology reuse. In the absence of fine-granular, business-oriented process descriptions, the domain experts  X  possessing lit-tle to no knowledge on ontologies and related topics  X  were not able to perform any of the process steps without continuous guidance from the ontology engineers.

Just as for the medical case study, the lessons learned in the eRecruitment scenario were summarized in the form of a set of guidelines for ontology reuse which might aid ontology developers in similar situations. These are depicted in Table 2 . 6. Requirements for ontology reuse
Typically, ontology reuse starts with the selection of a set of ontological resources assumed to be relevant to the appli-cation setting. Once their usability has been positively evaluated, these ontologies are subject to various technology-driven customization and integration activities. In an arbitrary application scenario the reuse candidates differ with respect to many aspects: content, implementation, provenance, level of formality, maturity, etc. They might model a domain of interest from a multitude of viewpoints, or they might tailor the domain representation to particular scopes and purposes. They might not have the same level of formality or the same implementation language; might be usable only in accordance with specific license conditions; or might still be under development, or at least subject to frequent updates and changes.
An automatic integration of the source ontologies into an application ontology means not only the translation to a com-mon format, but also the matching, merging and alignment of the resulting schemas and the associated instance data. Our findings during the case studies presented clearly showed that none of the mentioned activities can be performed without human intervention. Two reasons have been identified for this: First, ontology matching, merging, and alignment are knowl-edge-intensive tasks, which are, through their very nature, human-driven, in the sense that they can be accomplished con-siderably easier by a human than by a computer program. Second, while constantly improving in terms of user-friendliness, performance, and scalability, existing tools in the previously mentioned areas cannot handle different types of ontologies equally well. Ontology engineers need in-depth knowledge of their pros and cons in order to be able to use them to create an integrated ontology through reuse. Furthermore, while most of the tools are used in a semiautomatic fashion, they are not designed to optimally exploit human and computational intelligence. Their primary aim is to automatize a specific ontology-management task as a means to lower costs and improve productivity. While the quality of such automated approaches has consistently improved, it is still far from outweighing the value of the manual effort required.

At the process level, ontology engineers are provided with a minimal inventory of methodologies for ontology reuse, which are usually restricted to providing a generic, high-level description of the process while concentrating on the technical integration of the ontologies involved. Selecting appropriate ontologies is a nontrivial task, not only because of the lack of flexible and fine-grained evaluation frameworks, but also because of the difficulties attested by humans when dealing with the extreme heterogeneity of the resources assessed. Practical guidelines and best practices would provide additional sup-port in the operation of the process.

In the following discussion, we will take a closer look at the empirical findings gathered during the feasibility study. We start by specifying requirements related to the methodological support for ontology reuse. These are related primarily to the task of assessing the usability of existing ontologies in new application contexts. We then concentrate on a series of design principles for ontology-management technology, particularly for ontology integration. 6.1. Requirements for an ontology-reuse methodology
As a starting point for the specification of the requirements for the planned reuse methodology we revised the analysis benchmark in [32], which addresses the issue of aligning and evaluating counterpart approaches in the more general field of ontology engineering. The proposed framework consists of nine criteria, as follows: (1) Inheritance from knowledge engineering. (2) Detail of the methodology. (3) Recommendations for knowledge formalization. (4) Strategy for building ontologies. (5) Strategy for identifying concepts. (6) Recommended life cycle. (7) Differences from the IEEE Software Development. (8) Recommended techniques. (9) Application to current projects.

We have adapted this framework to ontology reuse. The original criteria 2, 4, 6, 8, and 9 have been revised in accordance with the particularities of the new ontology-engineering setting. The remaining ones have been discarded; they were not relevant in our case since an ontology-reuse methodology is intended to be only one part of a more complex ontology-engi-neering framework. (1) Level of detail of the methodology. (2) Relation to application scenarios. (3) Recommended life cycle. (4) Support methods and tools. (5) Methodology validation.

We now elaborate on each of the five criteria. 6.1.1. Level of detail of the methodology
From a usability perspective, it is important that the methodology provides a fine-grained and precise description of the process, assigns particular activities to roles, and predefines the inputs and outputs of each process phase. Further on, the methodology should avoid recommending activities and tasks whose purpose might be intuitively understood by the major-ity of methodology applicants but whose implementation is not clearly explained or is even debatable in particular classes of application scenarios. The most prominent example here is probably ontology-evaluation/selection. Assessing the correct-ness and completeness of an ontology, two criteria which can be found in many ontology-evaluation approaches to date, is a task which cannot be properly accomplished in the absence of a description of the domain to be modeled to which the ontology can be compared. How such comparisons can be carried out is in turn a matter of the format in which this do-main description is available and of the ontology-engineering methodology adopted. All this information, and much more, considerably increase the practical added value of an ontology-reuse methodology.

While it does not cover the complete range of reuse activities, examining the workflow underlying each of the reported experiments is a good starting point for the creation of a complete, detailed description of the ontology-reuse process. Table 3 provides an overview of the alternative reuse models encountered during the feasibility study. Apart from the heteroge-nous terminology, an aggregation of the implicitly utilized process models results in a four-stage reuse workflow, as follows: (1) Discovering the ontologies : Generally, the engineering team starts the reuse process by searching for ontological (2) Selecting those to be reused : Some of the case studies argued about the difficulties related to this step, proposing high-(3) Customization of relevant ontologies : Once the set of reusable ontologies has been determined, they are translated into a (4) Integration into an application ontology : A new ontology is created from two or more existing ontologies. Depending on 6.1.2. Relation to application scenarios
As repeatedly mentioned in the literature survey and in accordance with our own observations, the prospective reuse methodology should pay particular attention to application-narrow aspects and to feasible support methods and tools in or-der to enhance its real-world usability.

The success of ontology reuse is significantly influenced by a careful analysis of the requirements induced by the context the target ontology is intended to be used in. This primarily means that certain classes of tasks typically carried out using ontologies, such as semantic annotation, semantic search, data mediation, etc, impose particular constraints on the proper-ties of the ontologies to be reused or constructed. These constraints need to be taken into account in the first two stages of the reuse process, in which the engineering team looks for potential reuse candidates and selects those which are estimated to be relevant.

A second application-narrow dimension which impacts the way a specific reuse process is performed is the methodology applicants. In order to ensure the wide-scale dissemination of semantic technologies, it is essential that the proposed tech-niques minimize the amount of expert knowledge required for their operation. Hence, the methodology should account for this required low barrier of entry and adapt its content and structure to the needs of its users. 6.1.3. Recommended life cycle
Due to the complexity of the reusability issue in conjunction with the practical problems encountered when applying existing methods and tools in arbitrary scenarios, the ontology-reuse methodology should propose an incremental process model. This would allow methodology applicants to monitor and improve intermediary process outcomes, and to have a di-rect control over the way reuse is being executed. In situations in which a particular activity cannot be carried out automat-ically without considerable manual intervention, the engineering team should have the possibility to flexibly alternate tool-supported with human-driven process phases and to perform these phases iteratively. In this context it is important to understand the interplay between human and computational intelligence not only as a means of improving (or evaluating) automatically generated results but, also, and much more, as an opportunity to use both types of intelligence for the tasks they are known to be optimal for. 6.1.4. Support methods and tools
Helpful for the usability of the proposed methodology are precise tool and method recommendations. In every one of the examined case studies we found strong evidence that the lack (or the presence) of appropriate techniques and tools for supporting resource-intensive and error-prone reuse activities was a determining factor in the feasibility of a reuse-oriented engineering strategy. Therefore, the methodology should be accompanied by (a description of) a full-fledged, methodology-compatible technological environment. Complementarily, the methodology should identify those activities within the reuse process that can be feasibly automated, or, by contrast, require extensive human intervention. This will lead to a redesign of semiautomatic ontology-management tools. To date such tools have typically required human input to revise automatically generated results, instead of using human intelligence optimally to solve knowledge-intensive issues and to support the user by facilitating access to the information she needs. 6.1.5. Methodology validation
At the process level, the analyzed case studies revealed that the application scope of existing reuse-oriented methodol-ogies is limited to the settings they originate from. Except for the work authored by methodology designers (for example, [2,37] ) the case studies do not explicitly commit to a predefined methodology.

In order to increase its usability, the prospective methodology should be carefully validated in real-world scenarios. An initial validation method could rely on the criteria introduced above associated with a set of quantified metrics for generat-ing comparable evaluation results. A second option would be case study research [78]. 6.2. Requirements for ontology-reuse support methods and tools
At the method and tool level, the conclusions of the case studies focus on the incapacity of the existing technological framework to feasibly deal with the heterogeneity of existing ontological sources in terms of content, level of formality, implementation language, size, etc. 6.2.1. Finding ontologies
At present the question of how existing ontologies can be found is not trivial. On the one hand, the ontology developer can attempt a Web-wide search using a standard search engine such as Google modeled and attempt to determine whether they have made any ontologies/classifications public. If we consider the eRecruit-latter approach could lead to contacting or visiting the sites of employment agencies, while the former would try to find rele-dards in the previously mentioned domains. This, however, necessitated a careful evaluation and customization because of the heterogeneity of the formal and content-related characteristics of the list items.

Alternatively, ontologies could be grouped into repositories. As long as the developer knows how to access the repository, he or she can look there for relevant ontologies. The DAML Ontology Library is one of the most representative examples, offering a simple Web-based interface to the source ontologies. Ontology users can access them using different criteria such as URI, keyword, submitting organization, or express queries in terms of ontology classes and properties. of keyword matching that occurs in nonsemantic search engines such as Google. Queries cannot draw on the semantics of ontol-basis, not taking into account the various needs of individual users.

To summarize, a full-fledged ontology repository is expected to provide two types of features related to general informa-tion repositories and to the semantically represented information, respectively (cf. [33]). The first category implies issues such as content quality (coverage, actuality, and user-perceived information value) and typical services (classification, search, and browsing and navigation). The special nature of the managed information leads to requirements related to the semantic aspects of these general-purpose features. 6.2.2. Selecting ontologies to be reused
Assessing the usability of a certain ontology with respect to a set of application-related requirements is one of the most dependent upon technical means to simplify the access to the ontologies to be evaluated, which might be complex, large, or hardly human-readable, for the process participants. This implies a whole series of computer-aided techniques to make it possible to interact with an ontology and to align comparable ones. Firstly, ontology evaluators can benefit from the availability of a uniform representation of ontology descriptions. Reliable rating and attestation methods might provide additional control over the sometimes highly subjective selection process. Finally, multimodal tools for visualizing, editing and querying the content of the ontologies involved are fundamental for dealing with large amounts of information. Tools comparing the contents and the structures of various resources further aid the ontology evaluators in deciding upon the suitability of an ontology for the new setting. 6.2.3. Customization and integration of relevant ontologies
Each of the relevant ontologies might be subject to additional modification and integration operations meant to adapt them to particular technical requirements and to finally embed them in the application system. In the first category, we have identified the following major customization measures: Translation to a new representation language Extraction of a subontology Modification and extension in contents, structure or both
Multiple ontologies are integrated. The integration process can be seen as a sequence of two phases, the computation of the similar ontological elements (usually termed  X  X  matching  X ) followed by their aggregation. Each of the analyzed case stud-ies, some of which have not been included in the present feasibility study, points out the difficulties arising from the cum-bersome technique and tool utilization. Even if appropriate means were eventually available, setting up the technological environment to perform one of the previously mentioned activities was inconceivable in the absence of considerable bodies of expert knowledge. An automatic operation of these tasks  X  as envisioned by the Semantic Web community  X  was possible only under extremely special circumstances.

Despite the relatively large number of promising approaches in the fields of matching, merging, and integration, their lim-itations with respect to certain ontology characteristics have been emphasized often in recent literature [35,49,51] : Some approaches assume a common or, at least to large extent, overlapping universe of discourse [18].
 They cannot be applied across various domains with the same effect (for example, Cupid, as stated in [35]).
They require certain representations (or translation to the suitable format) or natural languages. This is true, for instance, for the COMA approach [27].

They perform well on relatively small inputs with at most hundreds of concepts and have not been tested or do not scale for real world applications processing complex schemas.

They do not perform well on inputs with heterogeneous (graph) structures (Cupid [35]) or are restricted to tree-based conceptual models (SimilarityFlooding [51], S-Match [35]).
 The results are based on a one-to-one mapping between taxonomies (as in GLUE [28].
 They involve some manual preprocessing (as in GLUE, COMA [26]).

Ontology-translation approaches deal with similar heterogeneity problems. Furthermore, valuable amounts of ontologi-cal knowledge are stored in a semistructured form. Their representation using Semantic Web languages can be achieved only with the help of tools that are able to extract ontological concepts from data bases, XML schemas, or Web-published taxonomies. 7. Conclusions
It is widely acknowledged that the efficient and effective operation of the reuse process is a precondition for the large-scale take-up of semantic technologies. However, the challenges associated with achieving this objective  X  in the Semantic
Web context or beyond  X  are also well-known, given the inherent limitations of realizing highly reusable, commonly agreed-upon knowledge conceptualizations. The current state of the art in the ontology engineering field highlights the need for additional instruments to increase the reusability of existing ontological sources in new application settings, and to aid hu-mans in carrying out this process. In order to identify the bottlenecks in current ontology-reuse processes, we performed an extended feasibility study comprising both self-conducted case studies and an in-depth review of recent literature in the area. The feasibility study concluded with an analysis and a specification of the requirements for methodologies, methods and tools. It pointed out the fundamental need for mature tools supporting the operation of reuse processes and, more gen-erally, the need for a task-and context-oriented approach to ontology reuse. This includes fine-grained methodologies describing optimal reuse strategies based on additional information about the participants in the reuse process, the ontol-ing methods and tools for evaluation, customization, and integration which can be feasibly used in these circumstances. The role of humans in the ontology-reuse context, particularly in relation to support tools automatizing specific activities should be rethought. Instead of aiming for full mechanization of knowledge-intensive activities  X  which are, by their very nature, human-driven  X  the ontology-engineering community should identify means for optimally combining human and compu-tational intelligence within these tasks.

References
