 With the rapid development of Web 2.0 and the Internet of things, predicting relationships in heterogeneous networks has evolved as a heated research topic. Traditionally, peo-ple analyze existing relationships in heterogeneous networks that relate in a particular way to a target relationship of interest to predict the emergence of the target relationship. However most existing methods are incapable of systemati-cally identifying relevant relationships useful for the predic-tion task, especially those relationships involving multiple objects of heterogeneous types, which may not rest on a simple path in the concerned heterogeneous network. An-other problem with the current practice is that the existing solutions often ignore the dynamic evolution of the network structure after the introduction of newly emerged relation-ships. To overcome the first limitation, we propose a new al-gorithm that can systematically and comprehensively detect relevant relationships useful for the prediction of an arbi-trarily given target relationship through a disciplined graph searching process. To address the second limitation, the new algorithm leverages a series of temporally-sensitive features for the relationship occurrence prediction via a supervised learning approach. To explore the effectiveness of the new algorithm, we apply the prototype implementation of the algorithm on the DBLP bibliographic network to predict the author citation relationships and compare the algorithm performance with that of a state-of-the-art peer method and a series of baseline methods. The comparison shows consis-tently higher prediction accuracy under a range of prediction scenarios.
 H.4 [ Information Systems Applications ]: Miscellaneous  X  To whom the correspondence should be directed.
 Algorithms Relationship prediction; Heterogeneous network
With the rapid development of the Internet and Web-based applications such as social network, heterogeneous networks have become a widely used data model in mining objects and their relationships in the cyberspace. Different from homogeneous networks, a heterogeneous network con-sists of multiple types of objects (vertices) and relationships (links). For example, in a social network, friend relation-ships link between a pair of people and information sharing relationships link persons to the Web information they share such as a video or a blog article. For both types of relation-ships in the above, predicting whether and when they would occur implies much commercial value. The intrinsic hetero-geneity and complexity of heterogeneous networks provide us richer information than homogeneous networks. Mean-while, predicting the emergence of relationships in heteroge-neous networks also incurs increased difficulty.

In this paper we propose a supervised learning framework for predicting the occurrence of relationships in a heteroge-neous network through analyzing relevent existing relation-ships in the network. First we use prototype networks to capture all relationships in the concerned heterogeneous net-work that are relevant for predicting the target relationship. Then we propose a Frequent Subgraph Detection (FSD) al-gorithm to systematically extract the frequent subgraphs from prototype networks as predictors for the target rela-tionship. Since the network structure evolves with time, we need to capture the dynamic evolution of the related relationships since their evolution trends usually have an important impact on the target relationship under predic-tion. Therefore, our method extracts frequent subgraph-based features continuously during a historical time period as time series features. Then we adopts MACD [1], a widely-used estimator for trend analysis in many areas such as stock market predicting, to extract temporally related features for the model learning purpose. Next the method applies the extracted features into a temporally-sensitive relationship occurrence prediction model. The model X  X  parameters are trained following a supervised learning-based approach. Fi-nally the mehtod applies the learned model on testing data for online prediction.

The main contributions and intellectual merits of this pa-per are as follows. The remainder of this paper is organized as follows. In Sec. 2, we define our problem of predicting the occurrence time of a given target relationship and the related termi-nologies. In Sec. 3, we describe our system framework in detail. In Sec. 4, we apply our method to the DBLP biblio-graphic network to demonstrate its effectiveness. In Sec. 5, we explore several existing methods and their limitations. Finally, we conclude our work in Sec. 6.
We first introduce the terminologies and notations used in our relationship prediction task. A heterogeneous net-work is defined as a directed graph G = ( V,E,O,R, L V , L where V is a set of vertices and E is a set of edges. Each v  X  V denotes an object and each e  X  E denotes a link in the network. O is a set of vertex types and R is a set of edge types. L V : V  X  O , L E : E  X  R are respectively a type indication function for vertices V and edges E .

Similar to the entity-relationship diagram used in database modeling world, the network schema is used to define the types of object involved and the types of relationships hold-ing between objects in a heterogeneous network. A network schema of a heterogeneous network G = ( V,E,O,R, L V , L E is defined as a directed graph G S = ( O,R ), where each ver-tex o  X  O denotes a vertex type and each edge r  X  R denotes an edge type in G .

Given the definitions above we have a symbolic notifica-tion to represent the concerned heterogeneous network. In this paper we experiment with the proposed method on the DBLP bibliographic network provided by [2], which con-tains rich bibliographic information of papers published on major computer science conferences and journals. It con-tains four types of objects: papers ( P ), authors ( A ), confer-ences/journals ( C ) and technical term ( T ). We denote the DBLP network as G = ( V,E,O,R, L V , L E ). Then we have O = { P,A,C,T } . We label the relationship hold between authors and papers as  X  X rite X , the relationship between pa-pers and terms as  X  X ontain X , the relationship between pa-pers and conferences as  X  X ublished in X  and the relationship between papers and papers as  X  X ite X . Thus we have R = {  X  X rite, X  X  X ontain, X  X  X ublished in, X  X  X ite X  } . Fig. 1 represents its network schema.

One of the key innovative features of our proposed method is the expansion of concerned relationships from simple edges to introduced subgraph structures in a heterogeneous net-work. A relationship in a heterogeneous network G is de-fined as a subgraph G 0 = ( V 0 ,E 0 ), where V 0  X  V,E 0 this paper we not only consider simple relationships that are denoted as edges in graph G but also composite relationships which catenate several edges. For example a i write  X  X  X  X  X  X  p a simple relationship which means author a i writes a paper p relationship which means a i write a paper p m that cites a paper p n written by a j . We define the target relation-ship as the unknown relationship we aim to predict. In this paper we aim at predicting author citation relationship. Given a pair of authors ( a i ,a j ), if there exists a subgraph a  X  X  X  X  X  X  p m cite  X  X  X  X  p n write  X  X  X  X  X  X  a j in G , where p m ,p any paper existed in the DBLP network G , we say that a i cites a j , otherwise their citation relationship does not hold.
Besides whether a relationship will occur between two ob-jects in a heterogeneous network, we are more interested in when this relationship will occur. In many cases the re-lationship occurrence time can provide us more important and detailed information. Therefore we need to extend the definition of heterogeneous network G by adding two rela-tionship occurrence time functions.

Let G = ( V,E,O,R, L V , L E , T V , T E ). For each v  X  V and e  X  E , T V ( v ) and T E ( e ) respectively denote the earliest time when vertex v and edge e is involved in the network G . In the DBLP network, each paper was published in a certain year. So the relationship occurrence times in our case study are always discrete.

Then we define the relationship occurrence time function for a composite relationship. Note that we have defined composite relationships as subgraphs. So the relationship occurrence time for a composite relationship G 0 is the mo-ment when the last edge or vertex gets introduced in the subgraph G 0 . Let T G ( G 0 ) be the relationship occurrence time for composite relationship G 0 = ( V 0 ,E 0 ), then Given a target relationship G 0 , our task is to predict its relationship occurrence time T G ( G 0 ). In order to achieve this goal we first extract topological features from all snapshots of a heterogeneous network during a historic time interval T h = [ t 0 ,t 1 ]. Then we use these features to predict when the target relationship G 0 will occur during a future time interval T f = [ t 1 ,t 2 ]. Therefore T G ( G 0 )  X  T f
In this section we propose a supervised learning frame-work for predicting relationship occurrence time by extract-ing temporally sensitive frequent prototype network based features from the whole heterogeneous network.
The basic assumption underlying the design of our new algorithm is that in a heterogeneous network G , the emer-gence of a specific relationship that governs a particular pair of nodes, v 1 ,v 2  X  G , can be forecast through observing the existing relationships in G that involve the two nodes. For example, in the DBLP network, if two authors write many papers that contain a common set of vocabulary terms, these authors are more likely to cite each other in their future papers than others who do not exhibit such common be-haviors. Adopting our heterogeneous network-based mod-eling scheme, the above behavioral similarity between the two authors in their vocabulary use patterns can be repre-sented as a relationship G 0 1 :: A write  X  X  X  X  X  X  P contain  X  X  X  X  X  X  X  X  X  T P write  X  X  X  X  X  X  A . This relationship implies a certain chance that a new citation relationship concerning the two authors G
T :: A at some future moment if such relationship has not emerged previously. We call this new relationship the target relation-ship , which is indicated by the subscript T in the notation G
T , when studying whether and when one author among the two will cite the paper(s) of the other author. By defintion, both G 0 1 and G 0 T are subgraphs of G . A relationship may be embodied through multiple instances, e.g. one instance of G 1 could be a i which indicates that the author a i writes a paper p m that contains the vocabulary term t k and the same term is also included in the paper p n written by the author a j . Every relationship instance will stregthen the belief that the tar-get relationship G 0 T will emerge at some future point. As illustrated through the above example, the main idea of the proposed algorithm is to predict the emergency of a given target relationship in a heterogeneous network through first sysmetically detecting all existing relationships in the net-work that relate to the target relationship and then quanti-tatively modeling the target relationship X  X  likely emergency moment in the future based on the aggregated belief con-tributed collectively by all existing and related relationships detected in the first phase.
Given a subgraph G 0 = ( V 0 ,E 0 ) in a heterogeneous net-work G = ( V,E,O,R, L V , L E ), let  X ( G 0 ) = ( O 0 ,R 0 prototype network of G 0 .  X ( G 0 ) can be simply generated by applying vertex and edge type indication functions L V and L E respectively onto all vertices and edges in G 0 . That is, O 0 = {L V ( v ) | v  X  V 0 } and R 0 = {L E ( e ) | e  X  E shall be noted that both O 0 and R 0 are repeatable sets, i.e. if L V ( v 1 ) = L V ( v 2 ) but v 1 6 = v 2 , L V are treated as distinct elements in O 0 . The same property of allowing repeated elements applies for the set R 0 . Since G 0  X  G , for each vertex o  X  O 0 , we must have o  X  O , i.e. the object types involved in the subgraph G 0 must be included among the object types present in the original graph G . For each edge r  X  R 0 , we must have r  X  R . Given an arbitary relationship instance G 0 1 : a 1 write  X  X  X  X  X  X  p 1 contain  X  X  X  X  X  X  X  X  X  t p  X  X  X  X  X  X  a 2 , it is straightforward to denote the prototype of this relationship as  X ( G 0 1 ) :: A write  X  X  X  X  X  X  P contain  X  X  X  X  X  X  A . Reversely, for a prototype network  X  , if there exists a relationship representation graph G 0 that satisfies  X  =  X ( G 0 ), we say that the relationship G 0 qualifies for the prototype specification of  X  .

To facilitate easy annotation of an instance of a vertex in a prototype network, we further introduce the notations of dash arrows L99 and 99K . Formally, given a subgraph G 0 = ( V 0 ,E 0 ) and its prototype network  X ( G 0 ) = ( O for each pair of vertex v  X  V 0 and vertex type o  X  O L
V ( v ) = o , we can symbolically state that v 99K o or o L99 v to clarify the specific instance of a vertex in a relationship prototype. For example, by introducing the two expression terms a i 99K A and A L99 a j into the relationship prototype  X  X  X  X  X  X  P write  X  X  X  X  X  X  A write  X  X  X  X  X  X  P write  X  X  X  X  X  X  A , we can specify that it is the citation relationship between the specific pair of authors, a i and a j , that is concerned. This notation is useful because the mapping between a vertex v  X  G 0 and its type vertex o 0  X   X ( G 0 ) may not be unique since the set of O 0 allows repeating elements. With the help of L99 and 99K , we can clearly indicate the specific role, as represented by a type vertex o 0  X   X ( G 0 ), an object instance, as represented by a vertex v  X  G 0 , will play in a target relationship. It is noted that the dash arrows notations are only used for expressing relationship prototypes, which are not used in the prototype network. We also use the notation of o i  X  o as a shorthand representation to denote the circumstance when both o i  X  o j and o i  X  o j hold. Additionally, we introduce the notation o i  X  o j to denote the situation when the direction of the relationship concerning the two vertices o and o j is not clear, i.e. o i  X  o j means o i  X  o j or o or o i  X  o j . Lastly, we introduce a new edge label  X  X qual X  to indicate the fact that two vertices in a prototype network correspond to the type of the same object and thus can be unified into a single vertex. It is noted that to declear the equal relationship between two type vertices, they should not only belong to the same type but also represent the type of the same object. That is, o i  X   X ( G 0 ) equals to o j if and only if o i = L V ( v ) and o j = L V ( v ), in which v  X  G .
Utilizing the above notations, the first phase of the pro-posed algorithm, which aims to detect all existing relation-ships relevant to the target relationship, can be approached as a frequent subgraph detection problem in the heteroge-neous network. Since the target relationships explored in this study are used for estimating the overall relationship between two end objects, given any target relationship, the method also requires the specification of a pair of end ver-tices. Revisiting the example of the author citation relation-the two end vertices are respectively instantiated by the two authors a i and a j . To detect all existing relationships G relevant to the predication of G 0 T , the algorithm will find all such relationships in the prototype network  X ( G ) that in-clude a path connecting the vertices corresponding to a i a where the directions of all the involved edges are ignored. As discussed previously, each such path is represented as a subgraph in  X ( G ) and each relationship instance will con-tribute a certain weight towards the formulation of a belief that a new relationship will emerge. For example, each in-stance of the relationship A write  X  X  X  X  X  X  P contain  X  X  X  X  X  X  X  X  X  T  X  X  X  X  X  X  A , which says that a set of vocabulary terms is commonly used by two authors a i and a j , is a relevant rela-tionship that predicts the emergence of a citation relation-ship that a i and a j will cite each other. The more instances of this relationship is observed, the more likely the new re-lationship that a i and a j will cite each other will emerge. Considering such aggregated contribution of multiple rela-tionship instances towards the estimation of the emergence of a new relationship, our algorithm is concerned with de-tecting the frequent subgraphs in G , which is equivalent to detecting qualifying relationship in the prototype network  X ( G ) that are instantiated multiple times.

In Sec. 3.3, we will instroduce an algorithm that can sys-tematically detect all frequent subgraphs in G that are rel-evant to a specific target relationship G 0 T . In Sec. 3.4 and Sec. 3.5, we will respectively discuss how to derive tempo-rally independent and temporally sensitive features based on the detected frequent relationship subgraphs for predicting the emergence of a target relationship.
A new algorithm is introduced to systematically extract all frequent subgraphs in the prototype network of a given heterogeneous network for predicting the emergence of a specific target relationship in the heterogeneous network. We abbreviate the frequent subgraph detection algorithm as FSD in the following.
Given a subgraph  X  in the prototype network  X ( G ) of a heterogeneous network G , we denote the support of  X  as  X  (  X  ), i.e. the number of times the subgraph  X  occurs in  X ( G ). According to the relationship between G and  X ( G ),  X  (  X  ) is equal to the number of times the relationship pre-sented by the subgraph  X  is instantiated in the original het-erogeneous network G . Therefore, we can count  X  (  X  ) as follows: where | X | returns the cardinality of a set X . Given a fre-quency threshold  X  , if  X  (  X  )  X   X  , we say that the subgraph  X  is frequent and infrequent otherwise. Inspired by the aprior-based frequent network subgraph mining algorithm [3], we devise a modified version of the algorithm to detect the fre-quent subgraph patterns in a prototype network.

Given a subgraph  X  0 of a prototype network  X  , if  X  0 is not frequent, then  X  is not frequent with respect to the same fre-quency threshold. Reversely, if  X  is frequent, then  X  0 must be frequent. This property is useful for pruning candidate solu-tions when searching the prototype network space. Like the traditional aprior algorithm, the proposed algorithm also re-cursively construct larger subgraphs from smaller subgraphs progressively in the concerned prototype network.

Also, by the design idea underlying the proposed algo-rithm as discussed previously, if a subgraph  X  in a prototype network  X ( G ) is relevant for predicting the emergence of a target relationship v i  X  X  X  X  X  X  v j , there must exist a simple path in  X  , which is assumed to be o i  X  o 1  X  o 2  X  X  X  X  X  X  o k  X  X  X  X  X  X  o without the loss of generality, such that L V ( v i L
V ( v j ) = o j . Note that the directions of edges involved in the path are not important and thus ignored. Reversely, the proposed algorithm also requires that for each vertex v
Figure 2: An example heterogeneous network G . in a qualifying subgraph  X  , there must exists a simple path o  X  o 1  X  o 2  X  X  X  X  X  X  o x  X  X  X  X  X  X  o n  X  o j where L V ( v x ) = o restriction helps the algorithm focus on locating subgraphs that represent relevant relationships without including non-essential vertices not useful for predicting the emegence of the target relationship. For example, the subgraph  X  :: A  X  P  X  A  X  P can not be a qualifying relationship for the target relationship A  X  A because the rightmost vertex P does not lie on any simple path that connects the two author vertices.
Based on the main idea of the algorithm introduced in the above, the newly proposed apriori-based FSD algorithm can be stated as follows. The final output of the algorithm is denoted as  X  f , which is the set of all frequent subgraphs in the prototype network relevant for predicting the emergence of the target relationship.
 Step 1. Extract Frequent Qualifying Simple Paths in a Prototype Network According to the definition of relevant relationships, the smallest qualifying subgraphs in a prototype network must in the form of simple path. Given a target relationship whose two end vertices are v i and v j , each such simple path can be expressed in the form of o i  X  o k 1  X  X  X  X  X  X  o k n  X  o j L
V ( v i ) = o i and L V ( v j ) = o j . By applying the depth-first search method (DFS) onto the input heterogeneous network G , we can exhautively find all the qualifying simple paths. By testing the support of each identified simple path against the frequency threshold  X  , we can locate all the frequent qualifying simple paths. We denote these paths as {  X  1 i which  X  1 i is an arbitrary path output from the above pro-cedure. The subscript 1 indicates these result paths corre-spond to the base case. At the end of the step, we assign {  X  i } as the initial value for  X  f . Fig. 2 shows an example heterogeneous network G whose detected {  X  1 i } is listed in Table 1. The frequency threshold  X  is set to 4 in this exam-ple.
 Step 2. Recursively Extract k -Path Frequent and Qualifying Subgraph We define a k -path frequent and qualifying subgraph as the subgraph of the prototype network that contains k differ-ent simple paths linking the two end type vertices of the target relationship o i and o j . In our algorithm generation process, each k -path subgraph is produced through progres-sively merging k simple paths. Each resulting path is de-noted as  X  k i .

First we look at how to extract all 2-path subgraphs. For this purpose, we apply a merge operation, which involves the examination and unification of  X  X qual X  edges as mentioned in Sec. 3.3.1. Given two frequent and qualifying simple paths Table 1: The resultant frequent and qualifying sim-ple paths {  X  1 i } computed for the network G shown in Fig. 2.
 Figure 3: Merge two frequent path prototypes to a 2-path prototype network.  X  i and  X  1 j , we first find the common object types between them. For a vertex o i in  X  1 i and o j in  X  1 j , if o say that o i ,o j are common object types. For each pair of common object types o i in  X  1 i and o j in  X  1 j , we can link them by an  X  X qual X  edge to merge the two path prototype into one 2-path prototype network. Let n be the number of common object type pairs between  X  1 i and  X  1 j , the total number of ways to merge them is 2 n  X  n since for each pair of vertices in the prototype network that are equal, they may or may not collapse into one unified type vertex. For each potential merging operation, we calculate the support of the merged subgraph utilizing simple path instances already identified in Step 1 without searching the whole heterogeneous network again. We then select all the frequent and qualifying 2-path subgraphs, which are denoted as {  X  2 i,j,n } where i and j denote the original simple paths  X  1 i and  X  1 j before the merge operation and n denotes the n -th way of merging the two selected simple paths. When exploring the multiple ways of merging two input subgraphs or simple paths, we follow the DFS method to prune the infrequent subgraph. We denote the number of ways of merging n as a binary number like 1010 ... 01, in which each 1 in the i th digit represents there is an  X  X qual X  line between the i th common object pair between two path prototypes, while each 0 means not. In this way we can easily prune according to the number 1. For example shows one example of the merging procedure.

Now we can recursively find the k -path prototype net-works by adding one path at a time.  X  k is merged from  X  ,where  X  k  X  1 i denotes the i th k  X  1-path frequent prototype network in  X  f ,  X  1 j denotes the j th frequent path prototype in  X  f , and n denotes for the n th way of merging. If  X  frequent, then we assign this merged k -path prototype net-work a number m which means it is the m th k -path frequent prototype network in  X  f .

During the recursion process we must avoid searching k  X  1-path prototype networks repeatedly. Here we define Lat-estPath as the path number of the last path merged in a prototype network. Since we add paths in the path num-ber order, the LatestPath of  X  is the maximum path num-ber of the paths that are merged in  X  . For example  X  is merged from  X  1 1 ,  X  1 2 and  X  1 3 , then LatestPath (  X  When we add a path  X  1 j to  X  k  X  1 i , we must make sure that j &gt; LatestPath (  X  k  X  1 i ). The end of the recursion is when all k  X  1-path prototypes are not frequent.

The pseudo code of our FSD algorithm is shown in Algo-rithm 1. Fig. 4 lists the frequent prototype networks we extracted from DBLP network. Noted that in the table we omit the edge labels for space saving. We can see that all these extracted prototype networks have clear semantic meanings.
 Algorithm 1 FSD algorithm for mining frequent subgraphs in prototype network.
 Input: Heterogeneous network G ; Target relationship par-Output: frequent prototype network set  X  f 1: DFS in G to extract all frequent path prototype 2: Put all  X  1 i into  X  f 3: k = 2 5: for all  X  k  X  1 i  X   X  f do 6: for all  X  1 j  X   X  f and j &gt; LatestPath (  X  k  X  1 i ) do 7: Find all the common object type pairs 8: Count the total number of ways of merging 9: m = 1 10: for n = 1 to n t do 12: if  X  (  X  k m )  X   X  then 13: Put  X  k m into  X  f ; m + + 14: end if 15: end for 16: end for 17: end for 18: k++ 19: end while 20: return  X  f
In this section we propose a supervised learning method to learn the model for relationship occurrence time prediction. In the training stage, for each sampled author pair r  X  a ,a j  X  , we record the time t k when a i first cites a j . If t in the future interval T f = [ t 1 ,t 2 ], we record their citation relationship build time as y k = t k  X  t 1 , if t k &gt; t is no citation relationship build in T f , we let y k  X  t Then for each sampled pair of author  X  a i ,a j  X  , we calculate the support for all the extracted frequent prototype networks publish (d)  X  4 ::If a k and a j are similar au-thors under the term t m , and a i cites a k under the common term t m , then a i is likely to cite a j in the future. k often co-author papers about term t under the com- X  , X  2 ,..., X  m  X   X  f extracted in Sec. 3.3 that connect a i a j . Then we create a feature vector X k for  X  a i ,a X number. In our prediction model, the dependent variable is the citation relationship built time Y , the independent variable is the feature vector X .

We use the Weibull distribution [4], which is a widely used standard distribution for modeling event waiting time as the distribution for Y . Moreover Weibull distribution outper-forms other candidate event happening time distributions in author citation relationship prediction in the study [5]. The probability density function of Weibull distribution is: ,where y  X  0 and  X  ,  X  are both positive parameters that refers to mean waiting time and hazard of happening of the event respectively. In our case we assume the dependent variable Y k of each training author pair follows the Weibull distribution family with same  X  but different  X  . The expec-tation of Y k is: ,where  X  is the Gamma function. With all the sampled train-ing author pairs, we use the maximum likelihood estimation (MAE) to learn the parameters  X  and  X  . The log-likelihood function is:
LL w (  X  , X  ) = In the testing stage, for each testing author pair r k , we apply the learned model to compute its expected citation relation-ship occurrence time E ( Y k ) and compare it with its ground truth label y k .
Traditional link prediction methods often use the features extracted from the network structure at a given time point. These methods omit the dynamic evolution of the network structure over time, which often has an important impact on target relationship occurrence. For example, we assume that the total number of papers writing about same topics is a good predictor of author citation relationship. If that num-ber in each year keeps increasing during a historic period,the two authors will be more likely to cite each other in the fu-ture than in the case that the total number in each year keeps decreasing, which may be caused by the authors changed re-search tracks. In reality few of the heterogeneous networks are static. Their structure keep changing over time. For ex-ample in a social network, there will always be some people who join in and who leave, and some people who become friends. In order to make our model accurate and unbiased, we must take the temporal effect into consideration.
Given a prototype network  X  , instead of aggregating the total number of instances during historic interval T h = [ t as support value  X  (  X  ), we evenly divide T h into n smaller intervals T h = [ T h ,T h +  X  t )  X  [ T h +  X  t,T h + 2 X  t )  X  X  X  X  X  [ T h + ( n  X  1) X  t,t 1 ], where t 1 = T h + n  X  t . We let  X  (  X  ) be the total number of instances of  X  appeared during i th small interval [ T h + ( i  X  1) X  t,T h + i  X  t ), where 1  X  i  X  n . Therefore we transform the total aggregated feature  X  (  X  ) into a discrete time series feature  X  (  X  ) 1 , X  (  X  ) In our case study we set  X  t = 1 thus  X  (  X  ) 2000 means the total number of the instances of  X  appeared in 2000.
First we use the mean of  X  (  X  ) i to capture the general latitude of  X  (  X  ). In order to capture the trend of  X  (  X  ) during the historic interval, we use Moving Average Convergence/Divergence (MACD) [6] as features. MACD has been successfully used in predicting stock price and proved to be effective in trend estimation. MACD has three lagging parameters denoted as  X , X , X  . First we calculate Exponential Moving Average (EMA) lines. EMA contains two lines called  X  X ast X  line and  X  X low X  line.
 where 1  X   X   X   X   X  n . Then we calculate MACD line: And the MACD signal line denoted as SIG : Finally we calculate the MACD histogram denoted as H : From the MACD histogram we extract final features for model learning. A positive histogram indicates a decreas-ing trend and a negative histogram indicates a increasing trend. So we use mean of histogram as a feature to measure the global trend of  X  (  X  ) during T h .
 And we use H n as a feature to measure the trend at the end of T h . Therefore, given a prototype network  X  , we generate author pair r k =  X  a i ,a j  X  , we construct its feature vector as X k = (  X  (  X  1 ) , H (  X  1 ) , H n (  X  1 ) ,...,  X  (  X  m ) , H (  X  where  X  1 , X  2 ,......, X  m  X   X  f are the extracted frequent pro-totype networks. The parameters  X , X , X  are optimized by gradient descent method. In our experiments we set  X  = 2 , X  = 4 , X  = 3
We apply our method on the DBLP bibliographic network to predict the author citation relationship occurrence time. We choose this link prediction scenario because DBLP is a typical heterogeneous network that many previous studies have explored, including our peer method (Meta-Path). So we can DBLP dataset as a benchmark to demonstrate the superiority of our method over several existing methods.
We use the DBLP bibliographic dataset provide in [2], which contains 2,244,021 papers and 4,354,534 citation re-lationships. In our experiment we set the historic interval T h = [1996 , 2004], the future interval T f = [2005 , 2013]. We selected 3329 authors who published over 5 papers in data mining, database, information retrieval or machine learning area in the historic interval T h . From these authors we sam-pled 8000 author pairs  X  a i ,a j  X  that a i cited a j they didn X  X  have citation relationship in T h as positive sam-ples, and another 8000 author pairs that didn X  X  have citation relationship either in T h or T f as negative samples. From positive samples we select 4000 author pairs as training data and the other 4000 author pairs as testing data. The same selection is made on negative samples.
We first apply our FSD algorithm on our dataset to find all the frequent prototype networks. Then for each author pair r k =  X  a i ,a j  X  we use the extracted prototypes to gen-erate its feature vector X k . Noted we have two versions of our method. One is the reduced (baseline) version that directly use prototype support to construct X k . The other is the fully implemented version which involves the tempo-rally sensitive features that mentioned in Sec. 3.5. We do experiments under different historic interval T h and future interval T f to show the performance comparison between our method and the peer method as well as the temporal im-pact on both two methods. Let | T h | , | T f | denotes the length of historic interval T h and future interval T f respectively. We set the length of future interval in testing stage and training stage to be the same, namely | T f | test = | T Thus we have T h = [2005  X  X  T h | , 2004] , 1  X  | T h |  X  9 and T f = T test f = [2005 , 2005 + | T f | ] , 1  X  | T f |  X  9. First we fix the historic interval length | T h | = 9 and vary the future interval length | T f | from 1 to 9. Second, we set | T f vary the historic interval length | T h | from 1 to 9. Next we vary both | T h | and | T f | from 1 to 9.

For each author pair r k =  X  a i ,a j  X  , if a i cites a paper written by a j in T f for the first time in the year t k ( t we label their relationship occurrence time as y k = t k  X  2004, otherwise we set y k &gt; 9. Given a certain value of | T | T f | , we select a subset of training and testing samples under the time constrain. For each author pair in the selected training samples, we calculate its feature vector X k both in our reduced method and fully implemented method.

Our peer method namely the meta-path-based method [5] uses meta-path defined in [7] to denote relationships and ex-tract topological features based on meta-paths to construct feature vector for each author pair. Then it uses a gen-eral linear model to predict citation relationship occurrence time. This method has been proved to outperform many traditional baseline methods in previous studies.

Under each temporal condition, we first use the training samples to learn the best parameters in our model. Then we apply the learned model on the testing samples and compare the expected relationship occurrence time E ( Y k ) with the ground truth y k . We use three basic measurements to com-pare the performance of the three methods. The first is accu-racy which is the ratio between the number of testing author pairs whose citation relationship is correctly predicted, and the total number of testing author pairs. The second is mean absolute error (MAE) , which is the mean of the absolute er-ror between predicted citation relationship build time and the ground truth time of all the testing pairs. We also use the area under ROC curve (AUC) [8] which is often be used to measure the effectiveness of classification. Besides we proposed two measurements, the area under accuracy curve (AUAC) and the area under MAE curve (AUMC). When both the historical and future interval vary, the accuracy and MAE can be regarded as binary variable functions, namely Acc ( | T h | , | T f | ) ,MAE ( | T h | , | T f | ) , 1  X  | T Thus we have: AUAC ( | T f | ) ,AUMC ( | T h | ) ,AUMC ( | T f | ) are defined in the similar form.

To fully demonstrate the effectiveness of our proposed method, we also make a comparison with a series of tradi-tional baseline link prediction methods. They mainly vary in how to extract features from heterogeneous networks. The first group of them extract simple topological attributes of the two nodes in the target relationship as the feature vector, including common neighbors [9], Jaccard X  X  coefficient (Jac-card X  X  Coef.) [10], personalized PageRank (P-PageRank) [11] and Adamic/Adar [12]. The second group of baseline meth-ods extract features based on the paths between the two target relationship participants, including Katz coefficient (Katz Coef.) [13] and PropFlow [14]. Note that the meta-path-based peer method is also belong to this group. Due to space limit, we set | T h | = | T f | = 9 for all the above methods.
Fig. 5 shows the performance comparison between our proposed method, including the reduced version and the fully implemented version and the meta-path-based peer method when the historical interval is fixed but the future interval varies. The results show that all the three methods have a higher prediction accuracy of shorter time (oncoming) relationship than longer time (faraway) relationship. The two versions of our proposed method outperform the peer method as the future interval length increases. It demon-strates that the frequent prototype network based features used in our method are more powerful and robust for pre-dicting long time relationships. Those extracted composite related relationships indeed influence the target relationship occurrence in the future. Our fully implemented version out-performs the reduced version. It shows that the dynamic evolution of the related relationships over time have an im-portant influence on the target relationship occurrence time.
Fig. 6 shows the performance comparison of the three methods when the future interval is fixed but the historic interval varies. The results show that when the historical interval length increases, both three methods yield better performance, however our fully implemented method out-performs the peer method and the reduced version more significantly. This is due to the fact that our fully imple-mented method can grasp the dynamic evolution of the ex-tracted features during the whole training period rather than just extracting features at a certain time point.

Fig. 7 shows the overall performances of the three meth-ods measured by our proposed AUAC and AUMC when both historical and future interval vary. The results indicate that our proposed methods outperform the peer method under different temporal conditions and our fully implemented ver-sion has the best performance.

Table 2 shows that our proposed method outperforms the series of baseline methods in terms of accuracy, MAE and AUC. It fully demonstrates the effectiveness of our proposed method since it can extract the most comprehensive and meaningful information of the target relationship from the frequent subgraphs in the heterogeneous network.

We also test the impact of the small time interval  X  t used to divide the historical interval mentioned in Sec. 3.5. We set the historical and future interval length to be 9 ( | T | T f | = 9) and let  X  t varies from 1 to 4 to test the accuracy and MAE of the fully implemented version of our proposed method. From Table 3 we can see that the performance of Table 2: Performance comparison with a series of baseline methods Table 3: Performance of the fully implemented method under different  X  t . the proposed method is better when  X  t is smaller. It shows that our proposed method can get better performance by capturing the dynamic evolution of features more precisely. Table 4: Significance test for extracted frequent sub-graphs,  X  is the significance level.

To test the quality of the extracted frequent prototype networks through our FSD algorithm, we do significance test on each independent varible which is a prototype network to test whether it has a significant impact on the dependent varible, which is the relationship occurrence time. Table 4 shows the significance test results of the 6 prototype net-works we used in our experiment mentioned in Table 4. The result shows that all the 6 extracted frequent prototype net-works are very significant for author citation relationship occurrence time prediction. Therefore it demonstrates the effectiveness of our FSD algorithm.

Treating relationship occurrence prediction as a classifi-cation problem, namely predicting whether two authors will have citation relationship based on the extracted temporally sensitive features mentioned in Sec. 3.5, we compare the ef-fectiveness of the Weibull distribution based model in our method mentioned in Sec. 3.4 and a set of popular classi-fiers in Weka [15]. The results in Table 5 demonstrate our proposed model has better classification accurary than oth-ers.
There have been many previous studies focusing on re-lationship prediction in heterogeneous networks. Earlier methods often use standard topological features extracted from the network structure as predictors for the target rela-tionship, including common neighbors [9], Jaccard X  X  coeffi-cient [10], personalized PageRank [11], Adamic/Adar [12], Katz coefficient [13] and PropFlow [14]. Also there are many methods that combine a set of standard topological features such as Liben X  X  study on link prediction in social ( | T h | = 9 ) but the future interval varies ( 1  X | T f ( | T f | = 9 ) but the historical interval varies ( 1  X | T Table 5: Performance comparision between our pro-posed model and other classifiers in Weka networks [16]. However those standard topological features are mostly designed for homogeneous networks. They only extract features from local vertices and links surrounding the target relationship participants yet largely ignore the interactions and complex relationships that connect them in the whole heterogeneous network.

A basic approach is to extract related relationships existed in the heterogeneous network to predict target relationship. For example in a social network  X  X  friend of my friend is my friend. X  One of the main research tracks is the link predic-tion in relational data [17, 18]. In [18], Popescul proposed a statistical relational learning method for link prediction through finding related relationships by relational algebra queries. However it mainly uses the concatenated simple queries which may lack semantic meanings.

Another state-of-the-art methodology is the meta-path-based method proposed by Han and Sun [7]. They used meta-paths to extract related relationships and their fea-tures. However meta-paths cannot represent all relevent re-lated relationships since they are not always in the form of a path. The extracted meta-paths of their method are based on domain knowledge instead of being derived systemati-cally. Consequently, their method is difficult to apply for solving a general case in an arbitrary domain.

Besides predicting whether a relationship will occur, it is more meaningful to predict when a relationship will occur. The study [19] aims to predict travel time through link-based features. The study [5] extend the relationship occurrence prediction task from a temporally-insensitive version to a temporally-aware version, i.e. predicting not only whether but also when a target relationship will occur in a heteroge-neous network. These studies also rely on relatively simple features mentioned in the above for the prediction task.
Most of the existing methods only extract features from the network structure at a certain time. For example, in the general problem setting of link prediction [16], the authors aimed to predict the links to be added to a network from time t to a future time t 0 given the snapshot of the network at time t . Such methods often ignore the evolution of the network and its derived features, which have an important impact on the link prediction task. To overcome this limita-tion, the proposed method explores snapshots of the network during a historical period [ t 0 ,t ] other than the single snap-shot of the network at the time moment t . Bringmann and Berlingerio addressed a similar problem in their work [20]. Their method aims at learning the graph evolution rules in homogeneous networks, which is also not directly applicable for the relationship prediction task. (a) AUAC Comparison (1  X  | T f | X  9) (c) AUAC Comparision (1  X  | T | X  9) future interval vary.
In this paper, we propose a novel approach for predict-ing relationship occurrence time in a heterogeneous network through systematically extracting features based on frequent subgraphs detected from the concerned heterogeneous net-work. These features are subsequently leveraged as predic-tors for forcasting the emergence of the target relationship. The new method also utilizes temporally sensitive features to capture the evolution of the network structure. The ex-perimental results convincingly demonstrate the effective-ness of our method in comparison with several state-of-art peer solutions. The proposed method can be easily extended to address many other relationship prediction tasks in het-erogeneous networks since it provides a general framework that functions independently of any domain knowledge. In our future study, we will explore the potential of the new method in other application domains.
 The study was funded in part by the National Cancer Insti-tute (Grant #: 1R01CA170508). [1] G Appel. Technical analysis: power tools for active [2] J Tang, J Zhang, L Yao, J Li, L Zhang, and Z Su. [3] A Inokuchi, T Washio, and H Motoda. An [4] JE Pinder III, JG Wiener, and MH Smith. The [5] Y Sun, J Han, CC Aggarwal, and NV Chawla. When [6] G Appel. The moving average convergence-divergence [7] Y Sun and J Han. Mining heterogeneous information [8] AP Bradley. The use of the area under the roc curve [9] Newman and EJ Mark. Clustering and preferential [10] Rahel and J Frank. Homogenization of fish faunas [11] Soumen Chakrabarti. Dynamic personalized pagerank [12] LA Adamic and E Adar. Friends and neighbors on the [13] Leo Katz. A new status index derived from sociometric [14] RN Lichtenwalter, JT Lussier, and NV Chawla. New [15] G Holmes, A Donkin, and IH Witten. Weka: A [16] D Liben-Nowell and J Kleinberg. The link-prediction [17] B Taskar, MF Wong, P Abbeel, and D Koller. Link [18] A Popescul and LH Ungar. Statistical relational [19] M Chen and S Chien. Dynamic freeway travel-time [20] B Bringmann, M Berlingerio, F Bonchi, and A Gionis.
