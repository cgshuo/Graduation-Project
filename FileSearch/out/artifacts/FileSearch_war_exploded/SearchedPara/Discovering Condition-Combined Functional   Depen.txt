 [3] are the suitable techniques for data consistency analysis. FD rules can be used to FDs. However, the huge number of CFDs also reduce the efficiency of data cleaning. Normally, similar to approximate FD, we set the threshold for CFD rules and reduce rules by one. Adult Census database [4] that contains education level(Edu), education number(EN), country(NC). And Fig.1 shows some business rules over  X   X  . 
Here,  X   X  shows that if any two people have the same education level, their educa-is Married-civ-spouse (married in law and live together), on condition that, his gender can determine his family relationship. If his gender is male, then he must be husband. a person X  X  married status is either Married-civ-spouse or Married-AF-spouse, as long as he is married, his gender can determine his family relationship. Therefore, we can combine the two conditional values into a rule as more than that affected by CFD rules. When we detect the consistency of tuples on MS, Gen and Rel, we use  X   X  and  X   X  . We need two rules. But if we use the combined values rule  X   X  , we just only need one rule. And the results of detection are the same. the accuracy of detection will be reduced. Nevertheless, the relationship between MS, remained and accuracy of detection will also be maintianed. 
We aim to discover rules such as  X   X  which replaces several rules by one. Howev-er, not all the rules can be combined. Given a rule as 
We can X  X  add  X  X isvorced X  to  X   X  . For MS= " Married-civ-spouse, Married-AF-spouse, Divorced " , if one X  X  Gen is Female , her Rel may be either wife or unmarried. It causes inconsistency. to decrease the time cost of discovering rules. CCFD. 2) We propose a method of discovering CCFD rules. Firstly, we propose a 2-process search strategy. Then we discover condition values as the candidates. Second-ly, we propose an approach to combine the candidates to build CCFD rules. Lastly, we prune the search space via the valid rules that can reduce the computation cost. 3) Our experiment shows the efficiency and effectiveness of our solution. Then we present the definition of CCFD and problem statement in Section 3. Next we thod will be proposed in Section 5. The experiments are showed in Section 6. And we draw a conclusion in Section 7. covery, conditional functional dependencies, and association rule mining. hold over a relation, including discovery of functional [2, 5, 6], multi-valued [6] and CFD rules can be discovered by using lattice rapidly [9, 10]. Association rule mining (ARM) focuses on identifying relationships among a set of items in a database. Large item sets that satisfy minimum support and confidence thresholds are most interesting [11]. And FD is considered as special CF D because it contains all condition values. 
Our work is to discover the rules between FDs and CFDs. By combining the condi-tion like CFDs, but also contain several condition values. combined functional dependencies, and 2) problem statement. 3.1 Preliminaries attribute A is dom ( A ). t [ A ]= u [ A ]. LHS (  X  ) and A as RHS (  X  ). 3.2 Condition-Combined Functional Dependencies combined conditional value set by Sci and Ci  X  Sci . Sc is the set of Sci . Example 2 . For CCFD  X   X  in example 1 can be expressed as  X   X  : X  X S|Gen X  Married  X  AF  X  spouse " . Here, Sc contains only one element Sc 1 . 
LHS (  X  ) of CFD can be seemed to consist of conditional attribute sets C and varia-ble attribute sets Y . condition values in Sci , |  X   X  | is the number of different values in attribute C . 3.3 Problem Statement CCFD is expressed as, given a relation schema R and a threshold  X  , we need to find find Sci is maximum clique problem which is proven as NP-complete. |  X   X  X 
Through the experiment, we can get a suitable threshold  X  for a certain dataset. inconflict values to build a CCFD and prune the space. 4.1 2-process Search Space noted by CCFDfinder . The 1st process is denoted by FD classification. In FD classi- X  attributes, we divide CFDs  X  into layers. vertex is RHS (  X  ). For example, edge( ABC, ABCD ) represents FD  X  : ABC  X  D . 
If FD  X  is not valid, we will execute condition classification as Fig.3. We classify  X  search in B | CD , X  X  C | BD , X  X  D | BC  X  X  till BCD  X  X | . 4.2 Condition Values Combination To find the minimal CCFDs is NP-complete, we present a heuristic method. We con-sider the valid CFDs condition values as candidates. We define the ratio by  X   X   X   X   X   X  |  X   X  sup (  X   X  X  X  X  )&gt;  X  . We implement the process till no one can be combined. rules: spouse" , " Divorced,Separated " , " Never X  X arried " }. 
Specially, if | C |=| LHS (  X  )|, then all Ci in C are inconflict. 4.3 Pruning Method following methods to ensure minimal and prune the search space. ( C  X | Y  X  X  A,Sc ) is valid. not the same layer. is not minimal. is valid. So  X  X  is not minimal.  X   X  X  X  : ( C | Y  X  B,Sc ) is valid. derived by delivering of other rules. 
The lemmas above are helping finding minimal CCFDs. We only need to test  X  with Ci  X  Sc . by consistency like FDs. When we use PRs to prune the search space in the former lem-mas, what only we need to know is attributes of  X  , we do not need to know the condi-tion values at all. Then we have PRs  X  :(MS|Gen)  X  Rel. In fact, FD  X  : MS,Gen  X  Rel is not valid. combineCCFD describes how to combine the condition values. 5.1 2-process Search Strategy Our algorithm uses 2-process search strategy to discover the candidates. 1st-process is process of 1st-process is shown in algorithm CCFDfinder. 
Step2-4 shows that the FDs are divided into different levels according to LHS  X  X  X  X  that if FD X  X  X  is valid, then prune (FDr) computes the space need to prune. Other-wise, we start 2nd-process by using CFDfinder to layer the FD. We also do pruning in the layering process. In step 3, we use lemma 4. In step 4, we use lemma 2 and 3. Then we get the condition values need to test. Step5-6 shows that computes the space need to prune and clprune (CFDr) will compute the PRs. When we get all candidates, we use CombineCCFD to combine the condition values. 5.2 Heuristic Algorithm of Combining Condition Values We present a heuristic algorithm CombineCCFD to combine the candidates. The process of combining is shown in algorithm CombineCCFD. whether cs is conflict with the values in Sci . 
Furthermore, the complexity of CombineCCFD is O(  X   X  ), where n is number of va-then we use  X  alone to clean the data. data, we evaluated 1) the effectiveness of CCFDs discovering algorithm, 2) the scala-bility of our algorithms, 3) the efficiency of data cleaning using CCFDs, 4) the result of data cleaning affected by threshold. 6.1 Experimental Setting described attributes related to their salary. (2) The Census-Income dataset[3] contains 300K tuples with 347 domain values. 
Dirty datasets were produced by introducing noise to data from Adults. Noise ratio domly changed the value of one tuple X  X  number to make this tuple a noise tuple. 6.2 Quality Measuring We adopted support rate, F-measure and C-precision to evaluate our algorithms. For of actually existing mistakes. 
Our experiments were run using Intel Core i7-2600(3.4GHz) with 8 GB of memo-ry. We used Java to implement our algorithms. 6.3 Experimental Results Exp-1: Discovering CCFD Rules. We used the Adults dataset with 10 attributes and more tuples can not satisfy the threshold and to be pruned, we used the pruning me-thod deduce the search space so that the running time diminished. So was the quantity of rules. (a) shows that the combining time is 1.3 minutes and is 6% of CCFD-running time. (b) shows that CCFD gets much fewer rules than CFD at low threshold. Special-shows that CCFDs have greater support ratio than CFDs. Exp-2. Scalability in Attributes. We used the Census-Income dataset and varied the Fig.4.(d) shows the running time with varied number of attributes fixing 2000 tuples and threshold  X  =0.5. When the number of attributes is above 10, we observe that the number of tuples fixing 8 attributes and threshold  X  =0.5. We observe that the running time increases smoothly. used to clean more tuples. (g) shows running time increases when the noi % increases. By using only one rule to cleaning, cleaning with CCFD takes more time. But due to fewer CCFD rules than CFD, the sum of running time using CCFDs is much less. ment set but setting noi%=10, we test the performance of data cleaning by varying the and CCFD is stable. When the value of  X  is between 0.01 to 0.1, it is more suitable for Adults dataset. effectively and clean the data efficiently. Basing on the CFD rules, we combine condition values of several rules and present a consistency rule known as a CCFD. We have proposed an approach to discover solution. 
We are investigating the relationship across levels and layers of condition set, and condition set search strategy and the pruning approach, for purpose of improving the coverage and the accuracy of the rules. Acknowledgement. This research was supported by the National Basic Research 973 Program of China under Grant No. 2012CB316201, the National Natural Science Foundation of China under Grant No. 61033007. 
