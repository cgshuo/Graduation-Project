 Recent innovations have resulted in a plethora of social ap-plications on the Web, such as blogs, social networks, and community photo and video sharing applications. Such ap-plications can typically be represented as evolving interac-tion graphs with nodes denoting entities and edges repre-senting their interactions. The study of entities and com-munities and how they evolve in such large dynamic graphs is both important and challenging.

While much of the past work in this area has focused on static analysis, more recently researchers have investigated dynamic analysis. In this paper, in a departure from recent efforts, we consider the problem of analyzing patterns and critical events that affect the dynamic graph from the view-point of a single node, or a selected subset of nodes. Defining and extracting a relevant viewpoint neighborhood efficiently, while also quantifying the key relationships among nodes in-volved are the key challenges we address. We also examine the evolution of viewpoint neighborhoods for different en-tities over time to identify key structural and behavioral transformations that occur.
 Categories and Subject Descriptors: H.2.8 Database Management: Database Applications -Data Mining General Terms: Algorithms, Measurement Keywords: Interaction networks, Neighborhood Analysis, Activation Functions
The trend in online computing has shifted to a social con-text, with social communities such as Facebook, MySpace and Orkut, weblogs and community photo and video shar-ing applications gaining tremendous popularity. These net-works share common attributes with other real-world net-works such as biological networks, co-authorship networks  X  Work supported by the NSF CAREER Grant IIS-0347662, RI-CNS-0403342, CCF-0702586 and SGER IIS-0742999.  X  Contact Author and the Web, in that, they can be efficiently represented as an evolving interaction graph, where nodes denote entities of interest, and the ties among entities can be modeled as edges. The addition and deletion of edges symbolize the changes that occur in these graphs over time. The study of such networks can provide insight into the structure and function of such systems ([5, 4, 15]), potentially allowing one to predict and reason about interesting aspects of their be-havior. Such analysis is critical to online applications such as search ([2, 11]) and advertising ([1, 12]).

In the setting of targeted advertising on a social network like Facebook, advertisers targeting an individual can glean useful information regarding the propensity of the person be-ing responsive to a product by studying the local neighbor-hood of that individual, the presence of influential members in the immediate friend-circle as well as the nature of the relationships among them. The key challenge is to identify and quantify these local relationships based on the topology of the graph. Also, most online communities provide facili-ties for storing content apart from link information [2]. We would like to consider how content information such as se-mantic features can be incorporated along with link informa-tion to capture relationships among nodes. In the first half of the paper, we concern ourselves with the following impor-tant question. How can we identify a local neighborhood of interest for a particular source node, and also quantify the impact or importance of different nodes in the constructed neighborhood, with respect to the source node?
To obtain a satisfactory answer to this question, we for-mally define the notion of a Viewpoint Neighborhood of a node, to represent the immediate neighborhood of interest for a particular node. We then discuss the properties that need to be modeled to measure importance and effect, and arrive at an activation spread model, inspired by the heat diffusion equation, for identifying the members of a node X  X  immediate neighborhood. We show how different activation functions can be employed capturing different intrinsic and extrinsic properties of nodes in the graph. We also extend this problem to one where we wish to identify the common shared neighborhood for a set of nodes, which is important in keyword search and influence maximization applications.
Since these graphs are often evolving, the neighborhoods as well as the relationships will change over time. A crucial problem in this context is to characterize the changes occur-ring in these neighborhoods over time and show how they can be used to build models for dynamic behavior. For this purpose, we define certain temporal events that can char-acterize changes and measure important structural and be-havioral patterns such as stability and popularity over time. Also, changes typically impact different entities in the graph in different ways. We show how the effect of changes on spe-cific nodes in the graph can be gleaned by temporal analy-sis on the Viewpoint Neighborhoods for nodes in the evolv-ing graph. In this regard, we introduce core subgraphs , which represent stable sections of a node X  X  neighborhood, and transf ormation subgraphs to capture changing sec-tions of the neighborhood.

To sum up, the key contributions of this work include:
Recently, there has been considerable interest in analyzing dynamic interaction graphs. Kumar and others [15] have an-alyzed the evolution of structure in social networks, provid-ing measurements on two real-world networks. Backstrom et al [5] have focussed on the formation of groups and the ways they grow and evolve over time. Tantipathanandh and oth-ers [18] have developed a framework for detecting dynamic community structure in evolving graphs. Sun and others [17] have proposed GraphScope for parameter-free pattern min-ing of time-evolving graphs.

In our earlier work [4], we proposed an event-based frame-work for characterizing evolving interaction graphs, examin-ing clusters of graphs and outlining events for their changes over time. However, clusters are dependent on the clustering algorithm applied and are restricted by the fact that they do not capture local relationships. All the nodes within a cluster are treated the same, without any structure informa-tion. This makes it infeasible to study local relationships and their evolution over time, which is the main aspect of this work. Here, we focus on identifying neighborhoods making use of topological and semantic information, while retain-ing local structural information. This enables us to exam-ine and quantifying relationships within local neighborhoods and how they evolve over time.

Activation models have been studied for complex networks specifically in the context of influence maximization ([12, 13, 6, 1, 8]) and keyword search ([11]). Kempe et al ([12, 13]) discuss two models for the spread of influence through social networks. Their model however is computed by simulation on a static network. It does not consider the addition and deletion of nodes and edges in the network. In this work, we develop an activation model for extracting neighborhoods for nodes in dynamic graphs and quantifying relationships within them.
We use two different real-world interaction graphs for our experimental analysis. 1. DBLP co-authorship network: We used the DBLP computer science bibliography data to generate a co-authorship network representing authors publishing in several impor-tant conferences in the field of databases, data mining and AI. The graph spanning 10 years (1997-2006) contained 23136 nodes and 54989 edges. We chose the snapshot interval to be a year, resulting in 10 consecutive snapshot graphs. 2. Wikipedia Revision History Dataset: The dataset we employ represents the revision history of the Wikipedia online encyclopedia and consists of a set of webpages as well as links among them. We used a subset of the data repre-senting the editing history from January 2001 to June 2002, considering 3 month interval snapshots. This subset con-sisted of 178512 nodes (webpages) and 2.55 million edges.
In this section, we introduce the notion of Viewpoint Neigh-borhoods and discuss algorithms to find them.
 Definition: Let P s ( v ) represent the importance or commit-ment value for node v w.r.t. node s . A Viewpoint neighbor-hood (VPN) for a given source node s for a graph G=(V,E), is defined as a subgraph rooted at s with vertices, V  X  V such that  X  v  X  V ,P s ( v ) &gt; 0 , and all edges E  X  E such that  X  ( v i ,v j )  X  E ,v i  X  V and v j  X  V .
 The above definition refers to nodes of importance to the given source node. The commitment ofanodetoaneigh-borhood is a quantity that captures the level of involvement of the node to the VPN in question. A node can poten-tially be associated with different commitment values with respect to each VPN in its environs. We will next discuss what factors govern the commitment of a node with respect toasourcenode. Figure 1: borhood for a node can be computed in a straightforward manner by performing depth-limited search from that node with the traversal carried ou t until the required depth is attained. However, this definition is naive since it makes the assumption that all nodes are considered equal in terms of their involvement in the neighborhood, and in particu-lar all nodes within a particular distance k from the source node will all belong to the VPN. This assumption is not true, as two nodes that are the same depth away may not necessarily impact the source node in the same way. For in-stance, in Fig 1 which shows a depth-3 VPN, we can see that nodes A and B are at the same distance from source node S . However, while A is well-connected with other nodes in S  X  X  neighborhood, B is not. One can justly argue that A and B impact node S differently and this needs to be captured by the algorithm. Hence, to identify nodes that are important to a particular node in a social network, we need to con-centrate not only on distance from the source node but also local connectivity information. A third issue to consider in this context is that, in small-world graphs, hub nodes (nodes with high degrees) have interactions with most nodes in the graph. This makes path lengths from one end of the graph to another very small. Hence, even for small values of k , the VPN for a node might include a large portion of the graph, which is not likely to be useful. Not only are the neighborhoods going to be unnecessarily large to store, but it severely impacts the analysis that can be done over them.
This discussion leads to the following desiderata for con-structingaVPN. 1. InverseDistanceweighting : The commitment of a node to a VPN should be inversely proportional to its dis-tance from the source. The intuition is that a node is likely to be affected more by changes occurring near itself than those occurring some distance away. 2. Link Structure : Nodes that are well-connected ,i.e having links to many other nodes within the VPN, should have high commitment or importance values. These are nodes that have high influence within the VPN. 3. Hub nodes : As mentioned above, hub nodes dis-tort neighborhoods by bringing  X  X ninvited guests X  -a host of other nodes that do not belong. The algorithm should expand such hub nodes with low probability.
We propose a general activation spread model which is designed to satisfy the above three criteria and construct a VPN for a given source node. The model can be con-structed as a special case of the popular Heat Diffusion Model (HDM) [20] which has been studied in literature. We will begin by describing the intuition of the model, before showing how it can be derived from the Heat equation. Definition: Let dist ( a, b ) represent the shortest distance in hops from node a to node b .InaVPN N s =( V, E ) rooted at node s ,  X  x  X  V , the descendants of x are given as Desc ( x )= y :( x, y )  X  E and dist ( s, y ) &gt; = dist ( s, x ) . The activation process originates at the given source node with a budget M . The source node distributes this amount among its immediate neighbors, activating them. Each node then retains some amount for itself and splits the remainder among its descendants, continuing the activation downwards and away from the source. A node is expanded only once. If a node has already been activated, it is not expanded a second time. Thus, the activation proceeds in one pass and in one direction only. To handle the inverse-distance weighting of nodes, we decay the activation as it proceeds farther away from the source node. Each time the activation touches a node, it decays by a factor of the number of the links the node has. This ensures that nodes closer to the source node are more probable to be chosen. Key to the ef-fectiveness of the spread is an activation function Act () that serves as a distribution mechanism. Let m y be the amount at node y . At each successor node x , the activation function Act( x , y , m y ) determines the portion of amount m y that is diffused by predecessor node y to node x . The general spread algorithm is presented as Algorithm 1. The activation pro-ceeds until the amount reaches a minimum threshold, at Algorithm 1 Find-VPN( Adjlist , s , M , thresh ) which it is deemed indivisible. At the end of the activation process, the amounts at each node sum to M .Hence,the fraction of the total amount that each node has received rep-resents the Commitment P for that node. Thus the impor-tance of a node is proportional to both its local connectivity and the shortest path to it from the source node. Note that the spread algorithm outlined above satisfies the three crite-ria provided earlier. During activation spread, the amount transmitted by the source is constantly decayed as it moves further and further away. Also, common-neighbors of nodes will receive portions from each of the nodes, thereby end-ing up with higher amounts than nodes that are connected to only one of the earlier nodes. Finally, hubs will have low importance since a node retains only one portion after divid-ing among all its neighbors. So if a node has a large number of neighbors it will be left with a very small portion after distribution. Note that, if edge weights are available, then during the activation propagation, they can be incorporated in the activation function.
An activation function is used by the spread algorithm to perform the distribution of amounts to different nodes de-pending on topological or semantic features. We will next present three different activation functions based on the node degree, betweenness and semantic content respectively 1 Degree-based Activation: This is a simple activation function that down-weights nodes with high degrees. When anode x receives a certain amount, it retains 1 | Desc ( x
Note that, it is possible to design a function to incorporate multiple features with different weights attached to them. and distributes the same fraction to each of its descendants. Note that, hub nodes that are connected to a large number of nodes, will retain small amounts using this function. This activation function satisfies the three criteria we dis-Algorithm 2 Find-Bet( Adjlist , s , M , thresh ) cussed previously, with inverse weighting of nodes taken care of by the decay, common neighbors getting higher weights and hubs down-weighted. However, it does not completely capture the link structure in the graph. We can illustrate this with the example in Fig 1. Nodes A and B both receive 2 from the source node. While A has 2 descendants, and hence retains only M 6 ,node B will retain the entire M 2 received since it does not have any descendants. Node A is connected to all other nodes in the VPN and should receive better recognition than it does using this activation func-tion. Hence, the activation function needs to consider not only immediate links but also more topological information. We will show how this can be improved using the Between-ness topological measure next.
 Betweenness-based Activation: The Betweenness cen-trality measure, which was first introduced by Freeman[10], is a global topological measure and computes, for each node in the graph, the fraction of shortest paths that pass through it. In our case, we are interested in the reachability of nodes in the VPN from a given source node. Hence, we need to favor nodes that have high Betweenness Centrality in terms of paths from the source to other nodes in the VPN. These nodes are central within the VPN and can be considered important. The Betweenness Centrality for a given node x with respect to a source node s given a VPN of nodes N =( V, E ) can be calculated as : B ( x, s )= SP x | V | X  1 SP x is the number of shortest paths passing through node x from source s to the nodes of the VPN V . The Betweenness centrality can be computed by performing BFS from the source node, building the shortest path tree for nodes in the VPN. Since we are considering local neighborhoods, we are interested only in betweenness centrality within the VPN. This quantity is less expensive to compute than the global betweenness centrality in the graph. However, we need to know the key members of the VPN before computing be-tweenness. For this, we simulate an activation spread, using the Degree-based activation function to construct an initial VPN and simultaneously compute shortest paths. The al-gorithm Find -Bet is shown in Algorithm 2.

Once the betweenness values are obtained for nodes in the neighborhood, they can be used in the activation function to refine the initial VPN. When a node receives an amount, it evaluates its own betweenness and the betweenness values of its descendants, and distributes the amount as a ratio of these values. Let the sum of the betweenness of its descen-dants be denoted as B ( Desc ( x )). The amount retained by each descendant y is given as : In the example shown in Fig 1, A will receive a larger amount ( 6 )than B ( M 6 )from S .
 Semantic Activation: Apart from topological features, it is possible to incorporate semantic properties of nodes to encode the activation function. This is of particular im-portance in personalized and keyword search applications ([2, 11]), where one is interested in identifying subgraphs that match given sets of keywords. To obtain efficient lo-cal neighborhoods when nodes are annotated with semantic terms, we need to consider the similarity of nodes with the source node. Let us consider two nodes x and y each as-sociated with sets of terms denoted as K x and K y where K larity for the two nodes would be to consider the number of terms in common. However, different terms are associ-ated with different semantic meanings. Hence one needs to consider the distribution of topics and the relationships among them. When the terms are organized in a category hierarchy, we can use the notion of semantic similarity to serve our purpose. To begin with, the Information Content (IC) of a term (category or keyword-set), using Resnik X  X  definition [16], is given as: IC ( k i )=  X  ln F ( k i ) F represents a term and F ( k i ) is the frequency of encounter-ing that particular term over all the entire corpus. Here, F ( root ) is the frequency of the root term of the hierarchy. Note that frequency count of a term includes the frequency counts of all subsumed terms in an is-a hierarchy. Also note that terms with smaller frequency counts will therefore have higher information content values (i.e. more informa-tive). Using the above definition, the Semantic Similarity Figure 2: ExampleofasemanticVPN.Thesourcenode (SS) between two terms (categories) can be computed as: SS ( k i ,k j )= IC ( lcs ( k i ,k j )) where lcs ( k i ,k lowest common subsumer of terms k i and k j . The seman-tic similarity between the two nodes can be formulated as : SS ( x, y )= tivation spread, we are interested in the semantic similarity between the source node and all other nodes in its VPN. While distributing amounts among nodes, we need to pro-vide higher preference to nodes that are semantically more similar with the source node. Let s denote the source node. Let the semantic similarity of the descendants given source node s be S ( Desc ( x )) = retained by node x canthenbegivenas: Similarly, the amount received by each descendant, y ,is: We present an example of a VPN using semantic activation on the Wikipedia webgraph in Fig 2. The source node is Database (shown in yellow), and the nodes with high impor-tance ( &gt; 0 . 025) are shown in blue. The node Database had a high degree in that particular snapshot, and was connected to a host of extremely unrelated nodes in the Wikipedia we-bgraph, such as Communications in Israel , 430 BC , Denver-Aurora metropolitan area and The Chicago Manual of Style . This is due to spurious links among webpages. Making use of the semantic similarity can help extract a relevant VPN for a node, which is extremely important in search ([2, 11]) and spam applications. Note, that it is also possible to find the VPN for a node based on a particular input keyword-set. In that case, the activation function needs to consider the semantic similarity of nodes with the source as well as with the query keywords. Figure 3 gives the distribution of the VPNs obtained for DBLP and Wikipedia datasets using the Betweenness-based and Semantic Activation functions respectively. We can observe that for DBLP, the neigh-borhood size distributions across time are close and over-lapping. In the case of Wikipedia, the number of nodes Table 1: Size and computation time comparison for dif-increases constantly across timestamps, which causes the sizes of the neighborhoods and their number to increase, but the distribution pattern remains similar. The relative neighborhood size comparison for different activation func-tions on the Wikipedia webgraph are shown in Table 1 2 . We can observe that the Betweenness measure is more se-lective than the Degree-based scheme and leads to smaller sized VPNs. The semantic activation function establishes relevance for webpages and the sizes of the VPNs it gener-ates are smaller in size than the other two. We also present average computation times for different activation functions on the Wikipedia dataset. Note that, for the semantic acti-vation, we have precomputed the semantic similarity values of terms, build an index and query for particular pairs. This makes it as fast as the degree-based method which does not need to compute any information.
The heat equation describes the distribution of heat (or variation in temperature) in a given region over time. In the context of a graph, let F i ( t ), denote the heat received by a given node i from its neighbors at time t . The amount of heat diffused to a node is a function of the time interval as well as the difference in heat values at each of node i  X  X  neighbors. Thus the amount received by a node in a given period of time  X  t can be described as: In the matrix form, it can be represented as : where  X  represents the heat diffusion coefficient and H rep-resents the transition matrix. As shown recently by Yang
We considered only nodes with commitment &gt; 0.001 while computing sizes Figure 4: Example of a multi-source VPN. Members and others [20], in the limit  X  t  X  0, the equation be-comes d dt F ( t )=  X HF ( t ). Solving this equation leads to F ( t )= e  X Ht F (0).

In our case, the amount diffused by a node to its neighbors is governed by the Activation Function. Thus H in our case is defined as : H
Note that for our algorithm, the transition matrix val-ues are defined only for active nodes. A node becomes ac-tive when it receives amounts from its neighbors. Once it has propagated parts of this value to its descendants, it be-comes inactive. The key difference between our model and heat diffusion is that, in our case diffusion is performed only once through the graph, whereas heat diffusion is a contin-uous process. The solution is computed to convergence in the general case. This difference is motivated principally by computational complexity. For small scale graphs one may be able to apply the exact more principled solutions in a timely fashion. Clearly for larger graphs (such as the ones we are interested in) it becomes infeasible. The activation spread model to extract the Viewpoint Neighborhood of a node can be extended to find such a neighborhood for a community, simply by replacing the com-munity or cluster by a super-node. All edges to nodes within the community can be replaced by weighted edges to the super-node. For instance, if a node i has links to two mem-bers of the community, those edges will be replaced by a sin-gle weighted edge to the newly created super-node. The ac-tivation is then performed with the super-node as the source node, as described above.
In the multi-source case, we are interested in identify-ing the shared central neighborhoods given multiple source nodes. The problem can be stated as follows.
 Algorithm 3 MultiVPN( Adjlist , srclist , M , thresh , k )
Problem : Given a set of n source nodes S =( s 1 ,s 2 , ..., s the problem is to find the VPN that represents the intersec-tion of at least k of their neighborhoods.

This is important again in keyword search applications, where one wishes to compute a subgraph to satisfy a given keyword-set. The nodes that have high importance in this shared neighborhood should represent those that have in-volvement with the VPNs of at least k of the source nodes. Other nodes should have 0 importance. We would like to design an activation model that results in the nodes well connected to the VPNs of the source nodes having high cen-trality and thus high weights. Such an activation model would proceed in a different vein from the one discussed previously, since we are now concerned with nodes that are along multiple paths between the different source nodes.
The algorithm is shown as Algorithm 3. Each of the source nodes construct their VPNs as in the single source case. Subsequently, nodes that have some level of involve-ment in at least k of the VPNs are identified. Activation is performed starting from these nodes , with amounts pro-portional to their importance in the different VPNs. We show an example of a multi-source VPN from the DBLP graph in Fig 4. We use three source nodes, shown in yel-low -Xifeng Yan, Adam Silberstein and Jessica Lin and a k of 2. The red nodes indicate the members of the multi-source VPN and they are labeled with their commitment or importance values. We see that Philip Yu is the most cen-tral node in terms of these source nodes, and is activated with higher values than the others. Note that the values represent importance in the shared neighborhood and not the neighborhood they are most involved in. Other nodes that are shown are nodes that exist in the individual neigh-borhoods but do not have a reasonable commitment value (0 . 005) with respect to the multi-VPN.

At this point, we would like to clarify the relationship of our activation based multi-source algorithm with connec-tion subgraphs[9], center-piece subgraphs[19], and proximity graphs[14]. These methods rely on the notion of effective conductance (cycle-free in the case of proximity graphs), or an equivalent definition using random walks, as a measure of network proximity. We would first like to point out that using one of these alternate methods to compute a viewpoint neighborhood is a viable alternative within our framework. The only problem is that it does not follow naturally within the context of the discussion given in the previous section. A key difference is that our approach naturally admits addi-tional constructs such as semantic information to help con-struct, and more importantl y, refine these neighborhoods.
An interaction graph G is said to be evolving if its inter-actions vary over time. Let G =( V, E ) denote a tempo-rally varying interaction graph where V represents the total unique entities and E the total interactions that exist among the entities. We define a temporal snapshot S i =( V i ,E of G to be a graph representing only entities and interac-tions active in a particular time interval [ T s i ,T e i the snapshot interval . For each snapshot S i ,therecanbe asetof | N i | Viewpoint neighborhoods represented as N i { in VPNs over time, we constru ct certain measures, which we term critical events. These events capture the behav-ior of nodes and neighborhoods over time. In an earlier work [4], we composed events for clusters. Here, we make use of the committment and depth information to quantify key changes for Viewpoint Neighborhoods. We define six basic events for neighborhoods. (1) Growth: This event captures the size of the VPN increasing over time.
 Growth ( N k i )=1iff | V k i | &lt; | V k i +1 | Growth in a VPN indicates that more nodes are invested in the viewpoint of a particular node. (2) Shrinkage: This is the opposite of the above event and signifies the reduction of the size of a node X  X  VPN. Shrinkage ( N k i )=1iff | V k i | &gt; | V k i +1 | Shrinkage can be caused by either edge deletions in the node X  X  immediate neighborhood or the deletion of an influ-ential hub node in its VPN. (3) Continuity: A VPN is said to continue if the members of the neighborhood do not change. Note that, this does not place any restrictions on the link structure among the members. It conveys the information that the nodes invested in this particular VPN remain unchanged.
 Continuity ( N k i )=1iff V k i = V k i +1 If a node X  X  VPN satisfies a Continuity event, it demon-strates that the changes occurring in the graph do not affect this particular node in any way. Note that this is a stability measure for a node. (4) Mutate: This event is the opposite of the above event and indicates major changes within the VPN of a node. If more than half of the members of a node X  X  VPN are different over two successive snapshots, it indicates significant change in the VPN and hence can be considered a M utate event. M utate ( N k i )=1iff | V k i  X  V k i +1 | &lt; 0 . 5  X  X  (5)  X  -Attraction: This event signifies positive change in the VPN of a node with  X  % of the nodes moving closer than before. Let Dep ( m ) k i represent the depth (from the root) of node m in the VPN of k at time i .
 If a node experiences this event, it reflects positively on the influence of that particular node. (6)  X  -Repulsion : This event is the opposite of the previous event. It signifies the increase in distance between a node and the members of its VPN in the previous time stamp. If  X  % of the nodes in the VPN of a node x are farther away in the next timestamp, x is considered to partake in this event. Thus it represents a negative influence for the node.
Note that the events we describe above are not mutually exclusive. For instance, it is common for a VPN to undergo a Growth event and an Attraction event at the same time. To find the events, we consider two snapshots of VPNs at a time. We build an index on the root of the neighborhoods, so that correspondence is not an issue. We compare the corresponding VPNs of a node to identify all events for that node. The number of events discovered for the two datasets are shown in Table 2 3 . We can observe that in DBLP, the size-based events (Growth and Shrinkage) are both frequent, while Continue events are rare. In the case of Wikipedia, Growth and Attract events far outnumber Shrinkage and Repel events. This is due to the fact that in Wikipedia, nodes (pages) and links are added but not frequently deleted, which causes VPNs to increase rather than decrease. Also, Continue events are quite frequent in Wikipedia, suggesting that semantic neighborhoods do not change much over time.
We can use the events described in the previous subsection to build behavioral measures to signify key behavioral pat-terns that occur over time. Similar to our previous work [4],
We use kappa of 0.5 for Attract and Repel events we define measures for Stability, Sociability, Popularity and Impact, that can be computed incrementally. Due to space constraints, we present only the Popularity measure here and describe the others in our technical report [3]. Note that, it is possible to define measures for capturing other types of behavior as well using the above mentioned events. Popularity: Popularity is a measure of how many nodes are attracted to the node X  X  VPN. It can be described using the  X  -Attraction and  X  -Repulsion events.

If a node attracts several nodes over time and does not have high repulsion rates, it is considered popular. In the case of Wikipedia, popularity reflects a buzz around a par-ticular topic page, as more pages and links are added to it. This buzz can be identified by a spike in the popular-ity trend graph. We computed the popularity for VPNs (as Att ( N x i , X  )  X  Rep ( N x i , X  )) at different timepoints tified interesting real-world events in the 2001-2002 period and analyzed the corresponding trend plots. Note that, we are not considering new pages created based on new events. An example for this would be the September 11 attacks (which did have high popularity when created). We con-sider VPNs that already existed but spiked at a particular timepoint, indicating a buzz. The trend plots are shown in Table 3. The event that inspires the popularity is shown in the first column. The root nodes of the VPNs under consid-eration are presented in Column 2 with their corresponding popularity scores in the subsequent columns 5 .Thevalue spikes at the time corresponding to the particular event.
An advantage of using VPNs is that, it enables us to per-form frequent pattern mining over the viewpoint neighbor-hoods of points. By examining the VPNs for a point over all time instances, we can identify core substructures using
We used a  X  value of 50
The dashed values indicate the VPN is not popular ( &lt; X  ). frequent graph mining techniques. We define a core sub-graph for a given source node as the largest subgraph in its Viewpoint Neighborhood that is frequent over time. In the context of collaboration networks, a frequent subgraph or subtree in the VPNs of a graph indicates a core group as-sociated with a particular author. By finding these core substructures, we can also gauge the level of stability for an author in terms of their neighborhood. An absence of signif-icant core subgraphs would indicate disparate behavior with different groups separated from each other. To illustrate, we selected Dr Philip S. Yu, who is an influential and popular author. We computed the core subgraphs 6 for the VPNs of Dr Yu. We used a support threshold of 5/9 to obtain 2 maximal frequent core subgraphs, shown in Fig 5(a). Note that, graph mining will be more beneficial for analysis over larger time periods than the example shown. When we chose Juho Rousu, the author with the highest stability value [3], we got a frequent subgraph Juho Rousu and Tapio Elomaa with high support (7/9). This is validated by the fact that, from 1996 to 2003, every paper th at this auth or published was with Prof Elomaa.
Apart from characterizing changes occurring in the graph over time, our goal is to also reason about the effect of changes on nodes and neighborhoods. As we mentioned earlier, changes in the graph are likely to affect different nodes in different ways. We are interested in identifying influential transformations that affect most of the nodes in the graph. For this, we again leverage the use of fre-quent subgraph mining over VPNs. First, we represent the changes occurring in a particular VPN over a pair of snap-shots as a T ransf ormation Subgraph . A transformation subgraph TS for a VPN over two timepoints i and i +1 , is a graph consisting of only edges that belong to the VPN either at time i or time i +1 but not both. TS ( N k i ,N ( V ( E We use the Graph mining toolkit developed by Gregory Buehrer for this purpose [7] in the conferences we considered were inserted during the timestamp from edges deleted. For this purpose, we use edge labels, labeling each edge in the transformation subgraph as 0 (deleted) or 1 (inserted).
We can represent the evolution of a VPN as a time-series of transformation subgraphs, each representing changes over a pair of snapshots. Subsequently, we can perform frequent subgraph mining to identify the key transformations that affect the VPNs of most of the nodes. Also, one can iden-tify frequent transformation subgraphs for individual nodes. These represent subgraphs or edges that have a high effect on the neighborhood of a particular node over time. As an ex-ample, we consider the VPNs of two authors Philip S. Yu and Vivek R. Narasayya. The largest maximal frequent trans-formation subgraphs in their VPNs are shown in Fig 5(b) and (c) respectively. We can see that the authors with high-degree are typically influential authors (shown in yellow), which explains the effects they have on the source neigh-borhood. An important difference that can be observed is that Philip S. Yu has high degree in his own transformation subgraph, which indicates that his own interactions cause most of the changes in his neighborhood. On the contrary, Surajit Chaudhuri and Rakesh Agrawal play an important role in affecting the VPN of Vivek Narasayya.
In this paper, we have proposed an activation model to construct the Viewpoint Neighborhood of a node and quan-tify the relationships that exist within it. We have also shown how a common neighborhood of interest can be com-puted for a group of nodes and how different activation func-tions leveraging topological and semantic information can be constructed to facilitate the extraction of interesting neigh-borhoods. To characterize and measure the effect of changes over time, we have introduced temporal events as well as be-havioral measures that can be computed incrementally. Fi-nally, the use of frequent subgraph mining to identify stable and transient subgraphs has been highlighted. The algo-rithms and analysis provided a re particularly relevant for social network applications such as personalized and com-munity search, and online advertising.

In future work, we would like to extend the temporal anal-ysis to graph production rules and graph grammars. Of particular interest in our context will be to evaluate if graph grammars can be inferred from such interaction networks by learning the production rules that govern evolution of clus-ters or viewpoint neighborhoods. [1] F. Alkemade and C. Castaldi. Strategies for the [2] S. Amer-Yahia, M. Benedikt, and P. Bohannon.
 [3] S. Asur and S. Parthasarathy. On the use of viewpoint [4] S. Asur, S. Parthasara thy, and D. Ucar. An event [5] L.Backstrom,D.P.Huttenlocher,andJ.M.
 [6] S. Brin and L. Page. The anatomy of a large-scale [7] G. Buehrer and S. Parthasarathy and Y. Chen. [8] R. Cowan and N. Jonard. Network structure and the [9] C. Faloutsos, K. S. McCurley, and A. Tomkins. Fast [10] C. L. Freeman. A set of measures of centrality based [11] V. Kacholia, S. Pandit et al. Bidirectional expansion [12] D. Kempe, J. Kleinberg, and E. Tardos. Maximizing [13] D. Kempe, J. Kleinberg, and E. Tardos. Influential [14] Y. Koren, S. C. North, and C. Volinsky. Measuring [15] R. Kumar, J. Novak, and A. Tomkins. Structure and [16] P. Resnik. Semantic similarity in a taxonomy: An [17] J. Sun, C. Faloutsos, S. Papadimitriou, and P. S. Yu. [18] C. Tantipathananandh, T. Y. Berger-Wolf, and [19] H. Tong and C. Faloutsos. Center-piece subgraphs: [20] H. Yang, I. King, and M. R. Lyu. Diffusionrank: a
