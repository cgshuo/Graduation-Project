 Online reviews enable consumers to evaluate the products and services that they have used. These reviews are also used by other consumers and businesses as a valuable source of opinions. 
However, reviews only give the evaluations and experiences of the reviewers. Often a reviewer may not be an expert of the product and may misuse the product or make other mistakes. There may also be aspects of the product that the reviewer did not mention but a reader wants to know. Some reviewers may even write fake reviews to promote some products, which is called opinion spamming (Jindal and Liu 2008). To improve the online review system and user experience, some review hosting sites allow readers to write comments about reviews (apart from just providing a feedback by clicking whether the review is helpful or not). Many reviews receive a large number of comments. It is difficult for a reader to read them to get a gist of them. An automated comment analysis would be very helpful. Review comments mainly contain the following information: Thumbs-up or thumbs-down: Some readers may Agreement or disagreement: Some readers who Question and answer: A commenter may ask for In this paper, we use statistical modeling to model review comments. Two new generative models are proposed. The first model is called the Topic and Multi-Expression model (T ME). It models topics and different types of expressions, which represent different types of comment posts: 1. Thumbs-up (e.g.,  X  X eview helped me X ) 2. Thumbs-down (e.g.,  X  X oor review X ) 3. Question (e.g.,  X  X ow to X ) 4. Answer acknowledgement (e.g.,  X  X hank you for 5. Disagreement ( contention ) (e.g.,  X  X  disagree X ) 6. Agreement (e.g.,  X  X  agree X ). 
For ease of presentation, we call these expressions the comment expressions (or C-expressions ). TME provides a basic model for extracting these pieces of information and topics. Its generative process separates topics and C-expression types using a switch variable and treats posts as random mixtures over latent topics and C-expression types. The second model, called ME-TME, improves TME by using Maximum-Entropy priors to guide topic/expression switching. In short, the two models provide a principled and integrated approach to simultaneously discover topics and C-expressions, which is the goal of this work. Note that topics are usually product aspects in this work. 
The extracted C-expressions and topics from review comments are very useful in practice. First of all, C-expressions enable us to perform more accurate classification of comments, which can give us a good evaluation of the review quality and credibility. For example, a review with many Disagreeing and Thumbs-down comments is dubious. Second, the extracted C-expressions and topics help identify the key product aspects that people are troubled with in disagreements and in questions. Our experimental results in Section 5 will demonstrate these capabilities of our models. 
With these pieces of information, comments for a review can be summarized. The summary may include, but not limited to, the following: (1) percent of people who give the review thumbs-up or thumbs-down; (2) percent of people who agree or disagree (or contend) with the reviewer; (3) contentious (disagreed) aspects (or topics); (4) aspects about which people often have questions. 
To the best of our knowledge, there is no reported work on such a fine-grained modeling of review comments. The related works are mainly in sentiment analysis (Pang and Lee, 2008; Liu 2012), e.g., topic and sentiment modeling, review quality prediction and review spam detection. However, our work is different from them. We will compare with them in detail in Section 2. 
The proposed models have been evaluated both qualitatively and quantitatively using a large number of review comments from Amazon.com. Experimental results show that both TME and ME-TME are effective in performing their tasks. ME-TME also outperforms TM E significantly. We believe that this work is the first attempt to model review comments for fine-grained analysis. There are, however, several general research areas that are related to our work. Topic models such as LDA (Latent Dirichlet Allocation) (Blei et al., 2003) have been used to mine topics in large text collections. There have been various extensions to multi-grain (Titov and McDonald, 2008a), labeled (Ramage et al., 2009), partially-labeled (Ramage et al., 2011), constrained (Andrzejewski et al., 2009) models, etc. These models produce only topics but not multiple types of expressions together with topics. Note that in labeled models, each document is labeled with one or multiple labels. For our work, there is no label for each comment. Our labeling is on topical terms and C-expressions with the purpose of obtaining some priors to separate topics and C-expressions.
In sentiment analysis, researchers have jointly modeled topics and sentiment words (Lin and He, 2009; Mei et al., 2007; Lu and Zhai, 2008; Titov and McDonald, 2008b; Lu et al., 2009; Brody and Elhadad, 2010; Wang et al., 2010; Jo and Oh, 2011; Maghaddam and Ester, 2011; Sauper et al., 2011; Mukherjee and Liu, 2012a). Our model is more related to the ME-LDA model in (Zhao et al., 2010), which used a switch variable trained with Maximum-Entropy to separate topic and sentiment words. We also use such a variable. However, unlike sentiments and topics in reviews, which are emitted in the same sentence, C-expressions often interleave with topics across sentences and the same comment post may also have multiple types of C-expressions. Additionally, C-expressions are mostly phrases rather than individual words. Thus, a different model is required to model them. 
There have also been works aimed at putting authors in debate into support/oppose camps, e.g., (Galley et al., 2004; Agarwal et al., 2003; Murakami and Raymond, 2010), modeling debate discussions considering reply relations (Mukherjee and Liu, 2012b), and identifying stances in debates (Somasundaran and Wiebe, 2009; Thomas et al., 2006; Burfoot et al., 2011). (Yano and Smith, 2010) also modeled the relationship of a blog post and the number of comments it receives. These works are different as they do not mine C-expressions or discover the points of contention and questions in comments. 
In (Kim et al., 2006; Zhang and Varadarajan, 2006; Ghose and Ipeirotis, 2007; Liu et al., 2007; Liu et al., 2008; O X  X ahony and Smyth, 2009; Tsur and Rappoport 2009), various classification and regression approaches were taken to assess the quality of reviews. (Jindal and Liu, 2008; Lim et al., 2010; Li et al. 2011; Ott et al., 2011; Mukherjee et al., 2012) detect fake reviews and reviewers. However, all these works are not concerned with review comments. This section discusses TME. The next section discusses ME-TME, which improves TME. These models belong to the family of generative models for text where words and phrases ( n -grams) are viewed as random variables, and a document is viewed as a bag of n -grams and each n -gram takes a value from a predefined vocabulary. In this work, we use up to 4-grams, i.e., n = 1, 2, 3, 4. For simplicity, we use terms to denote both words (unigrams or 1-grams) and phrases ( n -grams). We denote the entries in our vocabulary by  X   X ... X  where  X  is the number of unique terms in the vocabulary. The entire corpus contains  X   X ... X  documents. A document (e.g., comment post)  X  is represented as a vector of terms  X   X  with  X   X  entries.  X  is the set of 
The TME (Topic and Multi-Expression) model is a hierarchical generative model motivated by the joint occurrence of various types of expressions indicating Thumbs-up , Thumbs-down , Question , Answer acknowledgement , Agreement, and Disagreement and topics in comment posts. As before, these expressions are collectively called C-expressions. A typical comment post mentions a few topics (using semantically related topical terms) and expresses some viewpoints with one or more C-expression types (using semantically related expressions). This observation motivates the generative process of our model where documents (posts) are represented as random mixtures of latent topics and C-expression types. Each topic or C-expression type is characterized by a distribution over terms (words/phrases). Assume we have  X   X ... X  topics and  X   X ... X  expression types in our corpus. Note that in our case of Amazon review comments, based on reading various posts, we hypothesize that E = 6 as in such review discussions, we mostly find 6 expression types (more details in Section 5.1). Let  X   X  denote the distribution of topics and C-expressions in a document  X  with  X   X , X   X  X  X   X   X ,  X   X  denoting the binary indicator variable (topic or C-expression) for the  X   X  X  X  term of  X  ,  X   X , X  .  X   X , X  denotes the appropriate topic or C-expression type index to which  X   X , X  belongs. We parameterize multinomials over topics probability of document  X  exhibiting topic  X  . For simplicity of notation, we will drop the latter subscript (  X  in this case) when convenient and use  X  define multinomials over C-expression types using a matrix  X   X  X  X  X   X  . The multinomials over terms associated with each topic are parameterized by a probability of generating  X  from topic  X  . Likewise, multinomials over terms associated with each C-expression type are parameterized by a matrix TME (see Figure 1(a)). To learn the TME model from data, as exact inference is not possible, we resort to approximate inference using collapsed Gibbs sampling (Grif fi ths and Steyvers, 2004). Gibbs sampling is a form of Markov Chain Monte Carlo method where a Markov chain is constructed to have a particular stationary distribution. In our case, we want to construct a Markov chain which converges to the posterior distribution over  X  and  X  conditioned on the data. We only need to sample  X  and  X  as we use collapsed Gibbs sampling and the dependencies of  X  and  X  have been integrated out analytically in the joint. Denoting the random variables  X  X , X , X  X  by  X   X   X   X  , a single iteration consists of performing the following sampling:  X  and the subscript  X  X  denotes assignments denote the number of times term  X  was assigned to topic  X  and expression type  X  respectively.  X   X , X   X  X  X  were assigned to topic  X  and C-expression type  X  terms in  X  that were assigned to topics and C-expression types respectively. Omission of the latter index denoted by  X  X  X  X  represents the marginalized sum over the latter index. We employ a blocked sampler jointly sampling  X  and  X  as this improves convergence and reduces autocorrelation of the Gibbs sampler (Rosen-Zvi et al., 2004). Asymmetric Beta priors : Based on our initial experiments with TME, we found that properly setting the smoothing hyper-parameter  X  X  is crucial as it governs the topic/expression switch. 
According to the generative process,  X   X  is the (success) probability (of the Bernoulli distribution) of emitting a topical/aspect term in a comment post  X  and  X 1 X   X  , the probability of emitting a C-expression term in  X  . Without loss of generality, we draw  X   X   X  X  X  X  X  X  X  X  X ~ where  X  is the concentration parameter and  X   X  X  X  X   X   X ,  X   X  is the base measure. Without any prior belief, one resorts to uniform base measure  X   X   X  X   X   X  0.5 (i.e., assumes that both topical and C-expression terms are equally likely to be emitted in a comment post). This results in symmetric Beta priors  X  X   X  2/ X  X  . However, knowing the fact that topics are more likely to be emitted than expressions in a post apriori motivates us to take guidance from asymmetric priors (i.e., we now have a non-uniform base measure  X  ). This asymmetric setting of  X  ensures that samples of  X   X  are more close to the actual distribution of topical terms in posts based on some domain knowledge. Symmetric  X  cannot utilize any prior knowledge. In (Lin and He, 2009), a method was proposed to incorporate domain knowledge during Gibbs sampling initialization, but its effect becomes weak as the sampling progresses (Jo and Oh, 2011). 
For asymmetric priors, we estimate the hyper-parameters from labeled data. Given a labeled set , where we know the per post probability of C-expression emission (  X 1 X   X   X  , we use the method of moments to estimate  X  X  X  X  X   X   X ,  X   X  as follows: The guidance of Beta priors, although helps, is still relatively coarse and weak. We can do better to produce clearer separation of topical and C-expression terms. An alternative strategy is to employ Maximum-Entropy (Max-Ent) priors instead of Beta priors. The Max-Ent parameters can be learned from a small number of labeled topical and C-expression terms (words and phrases) which can serve as good priors. The idea is motivated by the following observation: topical and C-expression terms typically play different syntactic roles in a sentence. Topical terms (e.g.  X  X pod X   X  X ell phone X ,  X  X acro lens X ,  X  X indle X , etc.) tend to be noun and noun phrases while expression terms ( X  X  refute X ,  X  X ow can you say X ,  X  X reat review X ) usually contain pronouns, verbs, wh-determiners, adjectives, and modals. In order to utilize the part-of-speech (POS) tag information, we move the topic/C-expression distribution  X   X  (the prior over the indicator variable  X   X , X  ) from the document plate to the word plate (see Figure 1 (b)) and draw it from a Max-Ent model conditioned on  X , X  and the learned Max-Ent parameters  X  .  X   X , X  can encode arbitrary contextual features for learning. With Max-Ent priors, we have the new model ME-TME. In this work, we encode both lexical and POS features of the previous, current and next POS tags/lexemes of the term  X   X , X  . More specifically, For phrasal terms (n-grams), all POS tags and lexemes of  X   X , X  are considered as features. Incorporating Max-Ent priors, the Gibbs sampler of ME-TME is given by: where  X   X ... X  are the parameters of the learned Max-Ent model corresponding to the  X  binary feature functions  X   X ... X  from Max-Ent. We now evaluate the proposed TME and ME-TME models. Specifically, we evaluate the discovered C-expressions, contentious aspects, and aspects often mentioned in questions. 5.1 Dataset and Experiment Settings We crawled comments of reviews in Amazon.com for a variety of products. For each comment we extracted its id, the comment author id, the review id on which it commented, and the review author id. Our database consisted of 21,316 authors, 37,548 reviews, and 88,345 comments with an average of 124 words per comment post. 
For all our experiments, the hyper-parameters for TME and ME-TME were set to the heuristic values  X  T = 50/ T ,  X  E = 50/ E ,  X  T =  X  E suggested in (Grif fi ths and Steyvers, 2004). For  X  , we estimated the asymmetric Beta priors using the method of moments discussed in Section 3. We sampled 1000 random posts and for each post we identified the C-expressions emitted. We thus computed the per-post probability of C-expression emission (  X 1 X   X   X  and used Eq. (3) to get the final estimates,  X   X  = 3.66,  X   X  = 1.21. To learn the Max-Ent parameters  X  , we randomly sampled 500 terms from our corpus appearing at least 10 times and labeled them as topical (332) or C-expressions (168) and used the corresponding feature vector of each term (in the context of posts where it occurs) to train the Max-Ent model. We set the number of topics, T = 100 and the number of C-expression types, E = 6 ( Thumbs-up , Thumbs-down , Question , Answer acknowledgement , Agreement and Disagreement ) as in review comments, we usually find these six dominant expression types. Note that knowing the exact number of topics, T and expression types, E in a corpus is difficult. While non-parametric Bayesian approaches (Teh et al., 2006) aim to estimate T from the corpus, in this work the heuristic values obtained from our initial experiments produced good results. We also tried increasing E to 7, 8, etc. However, it did not produce any new dominant expression type. Instead, the expression types became less specific as the expression term space became sparser. 5.2 C-Expression Evaluation We now evaluate the discovered C-expressions. We first evaluate them qualitatively in Tables 1 and 2. Table 1 shows the top terms of all expression types using the TME model. We find that TME can discover and cluster many correct C-expressions, e.g.,  X  X reat review X ,  X  X eview helped me X  in Thumbs-up ;  X  X oor review X ,  X  X ery unfair review X  in Thumbs-down ;  X  X ow do I X ,  X  X elp me decide X  in Question ;  X  X ood reply X ,  X  X hank you for clarifying X  in Answer Acknowledgement ;  X  X  disagree X ,  X  X  refute X  in Disagreement ; and  X  X  agree X ,  X  X rue in fact X  in Agreement . However, with the guidance of Max-Ent priors, ME-TME did much better (Table 2). For example, we find  X  X evel headed review X ,  X  X eview convinced me X  in Thumbs-up ;  X  X iased review X ,  X  X s flawed X  in Thumbs-down ;  X  X ny clues X ,  X  X  was wondering how X  in Question ;  X  X lears my X ,  X  X alid answer X  in Answer-acknowledgement ;  X  X  don X  X  buy your X ,  X  X heer nonsense X  in Disagreement ;  X  X gree completely X ,  X  X ell said X  in Agreement . These newly discovered phrases by ME-TME are marked in blue in Table 3. ME-TME also has fewer errors. 
Next, we evaluate them quantitatively using the metric precision @ n , which gives the precision at different rank positions. This metric is appropriate here because the C-expressions (according to top terms in  X  E ) produced by TME and ME-TME are rankings. Table 3 reports the precisions @ top 25, 50, 75, and 100 rank positions for all six expression types across both models. We evaluated till top 100 positions because it is usually important to see whether a model can discover and rank those major expressions of a type at the top. We believe that top 100 are sufficient for most applications. From Table 3, we observe that ME-TME consistently outperforms TME in precisions across all expression types and all rank positions. This shows that Max-Ent priors are more effective in discovering expressions than Beta priors. Note that we couldn X  X  compare with an existing baseline because there is no reported study on this problem. 5.3 Comment Classification Here we show that the discovered C-expressions can help comment classification. Note that since a comment can belong to one or more types (e.g., a comment can belong to both Thumbs-up and A greement types), this task is an instance of multi-label classification, i.e., an instance can have more than one class label. In order to evaluate all the expression types, we follow the binary approach which is an extension of one-against-all method for multi-label classification. Thus, for each label, we build a binary classification problem. Instances associated with that label are in one class and the rest are in the other class. To perform this task, we randomly sampled 2000 comments, and labeled each of them into one or more of the following 8 labels: Thumbs-up , Thumbs-down , Disagreement , Agreement , Question , Answer-Acknowledgement , Answer , and None , which have 432, 401, 309, 276, 305, 201, 228, and 18 comments respectively. We disregard the None category due to its small size. This labeling is a fairly easy task as one can almost certainly make out to which type a comment belongs. Thus we didn X  X  use multiple labelers. The distribution reveals that the labels are overlapping. For instance, we found many comments belonging to both Thumbs-down and Disagreement , Thumbs-up with Acknowledgement and with Question . 
For supervised classification, the choice of feature is a key issue. While word and POS n-grams are traditional feat ures, such features may not be the best for our task. We now compare such features with the C-expressions discovered by the proposed models. We used the top 1000 terms from each of the 6 C-expression rankings as features. As comments in Question type mostly use the punctuation  X ? X , we added it in our feature set. We use precision, recall and F 1 as our metric to compare classification performance using a trained SVM (linear kernel). All results (Table 4) were computed using 10-fold cross-validation (CV). We also tried Na X ve Bayes and Logistic Regression classifiers, but they were poorer than SVM. Hence their results are not reported due to space constraints. As a separate experiment (not shown here also due to space constraints), we analyzed the classification performance by varying the number of top terms from 200, 400,..., 1000, 1200, etc. and found that the F 1 scores stabilized after top 1000 terms. From Table 4, we see that F 1 scores features for all expression types. TME and ME-TME progressively improve the classification. Improvements of TME and ME-TME being significant ( p &lt;0.001) using a paired t -test across 10-fold cross validations shows that the discovered C-expressions are of high quality and useful. 
We note that the annotation resulted in a new label  X  X nswer X  which consists of mostly replies to comments with questions. Since an  X  X nswer X  to a question usually does not show any specific expression, it does not attain very good F 1 scores. Thus, to improve the performance of the Answer type comments, we added three binary features for each comment c on top of C-expression features: i) Is the author of c the review author too? The ii) Is there any comment posted before c by some iii) Is there any comment posted after c by author Using these additional features, we obtained a precision of 0.78 and a recall of 0.73 yielding an F 1 score of 0.75 which is a dramatic increase beyond 0.64 achieved by ME-TME in Table 4. 5.4 Contention Points and Questioned Aspects We now turn to the task of discovering points of contention in disagreement comments and aspects (or topics) raised in questions. By  X  X oints X , we mean the topical terms on which some contentions or disagreements have been expressed. Topics being the product aspects are also indirectly evaluated in this task. We employ the TME and ME-TME models in the following manner. 
We only detail the approach for disagreement comments. The same method is applied to question comments. Given a disagreement comment post  X  , we first select the top k topics that are mentioned in d according to its topic distribution,  X   X   X  . Let  X  the set of these top  X  topics in  X  . Then, for each we emit the topical terms (words/phrases) of topics in  X   X  which appear within a word window of  X  from  X  in  X  . More precisely, we emit the set  X  X | X  X  X  X  X  posi ( X ) returns the position index of the word or phrase in document  X  . To compute the intersection because the Dirichlet distribution has a smoothing effect which assigns some non-zero probability mass to every term in the vocabulary for each topic  X  . So for computing the intersection, we considered as probability masses lower than 0.001 are more due to the smoothing effect of the Dirichlet distribution than true correlation. In an actual application, the values for  X  and  X  can be set according to the user X  X  need. In our experiment, we used  X  = 3 and  X  = 5, which are reasonable because a post normally does not talk about many topics (  X  ), and the contention points (aspect terms) appear quite close to the disagreement expressions. For comparison, we also designed a baseline. For each disagreement (or question) expression nouns and noun phrases within the same window  X  as the points of contention (question) in  X  . This baseline is reasonable because topical terms are usually nouns and noun phrases and are near disagreement (question) expressions. We note that this baseline cannot stand alone because it has to 
Next, to evaluate the performance of these methods in discovering points of contention, we randomly selected 100 disagreement (contentious) (and 100 question) comment posts on reviews from each of the 4 product domains: Ipod, Kindle, Nikon Cameras, and Garmin GPS in our database and employed the aforementioned methods to discover the points of contention (question) in each post. Then we asked two human judges (graduate students fluent in English) to manually judge the results produced by each method for each post. We asked them to report the precision of the discovered terms for a post by judging them as being indeed valid points of contention and report recall in a post by judging how many of actually contentious points in the post were discovered. In Table 5 (a), we report the average precision and recall for 100 posts in each domain by the two judges J 1 and J 2 for different methods on the task of discovering points (aspects) of contention. In Table 5 (b), similar results are reported for the task of discovering questioned aspects in 100 question comments for each product domain. Since this judging task is subjective, the differences in the results from the two judges are not surprising. Our judges were made to work in isolation to prevent any bias. We observe that across all domains, ME-TME again performs the best consistently. Note that agreement study using Kappa is not used here as our problem is not to label a fixed set of items categorically by the judges. This paper proposed the problem of modeling review comments, and presented two models TME and ME-TME to model and to extract topics (aspects) and various comment expressions. These expressions enable us to classify comments more accurately, and to find contentious aspects and questioned aspects. These pieces of information also allow us to produce a simple summary of comments for each review as discussed in Section 1. To our knowledge, this is the first attempt to analyze comments in such details. Our experiments demonstrated the efficacy of the models. ME-TME also outperformed TME significantly. 
