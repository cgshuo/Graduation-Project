 This paper presents an application for medicinal plants pre-scription based on text classification techniques. The system receives as an input a free text describing the symptoms of a user, and retrieves a ranked list of medicinal plants related to those symptoms. In addition, a set of links to Wikipedia are also provided, enriching the information about every medic-inal plant presented to the user. In order to improve the ac-cessibility to the application, the input can be written in six different languages, adapting the results accordingly. The application interface can be accessed from different devices and platforms.
 J.3 [ Computer Applications ]: Life and Medical Sciences; H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval Algorithms, Languages Text classification, Category ranking, Medical Subject Head-ings, Medicinal Plants, Wikipedia Many medicinal plants have been used since ancient times. Although Computer Science is not that old, lots of experts have focused their efforts on gathering and update different resources to keep track and categorize most of the plants and their medical properties. Nowadays, a great deal of effort is focused on providing inexperienced users with interfaces that allow retrieving the results stored in large databases. In this paper we present a machine-learning based application that employs information from databases mainly directed towards medical experts, enabling non-expert users to access medicinal plants information via a simple multi-device and multi-platform interface. Although the data employed to train the system is only available in English (as most of the medical articles gathered are written in this language), our system is able to process user queries in six different languages, selecting relevant links according to the language employed. eral medical fields. In order to group all the documents ployed to categorize hierarchically every bibliographic entry. One of the branches included in this hierarchy is devoted to medicinal plants, enumerating more than one thousand plant names associated to research papers describing their medical properties. In this way, what we have is a large corpus of documents associated to every plant included in MeSH.

We have employed this corpus to train a text classification system. For a given text input, our classifier provides the most relevant medicinal plants associated to that input. Re-garding the classification algorithm, we have employed our own approach, namely NEWPAR [5]. This algorithm has proven to work efficiently with medical corpora in real time scenarios [6, 7].
The availability of MeSH vocabulary in different languages makes it possible to broaden our scenario to a multilin-gual environment. Since the machine learning algorithm employed is trained on English documents, our proposal to multilinguality is based on translating the user X  X  input.
As it is shown in Figure 1 (left), the user inputs a list of symptoms, selects the language, and automatically gets a ranked list of MeSH terms (from medicinal plants branch) related to the input query. Only the keywords provided in the input are automatically translated during the process, as the text in the results page is taken from the original MeSH thesaurus for that particular language. See Figure 1 (right) for an example.

To translate the user input, the MOSES [3] statistical translator has been embedded into the application. Thus, http://ncbi.nlm.nih.gov/pubmed . 2 Medical Subject Headings: http://ncbi.nlm.nih.gov/ mesh . Figure 1: Example of symptomatology (cholesterol a nd high blood pressure) and the corresponding medicinal plants (garlic, avena sativa, etc.).
 Figure 2: Additional information about any partic-u lar plant is provided through links to Wikipedia articles. the text classification algorithm always receives the input text in English. To train the MOSES system we employed the OPUS [8] corpus, which contains a large number of freely corpus to assure a high quality translation, because of their similarities with the vocabulary expected to be employed by our users. This corpus is made out of PDF documents from the European Medicines Agency.

In order to enrich the application functionality, our system provides additional information to the user about the sug-gested medicinal plants. To achieve this goal, the XML file been processed and classified in order to provide a ranked list of links followed by a brief description of the plant in the language selected by the user, as shown in Figure 2. Again, the NEWPAR algorithm was employed for the classification. h ttp://www.emea.europa.eu/ . http://meta.wikimedia.org/wiki/Data\_dumps .
The application has been developed with a client-server architecture. On the server side, a hybrid solution has been developed using both PHP and C programming languages. The PHP part is in charge of receiving the client requests, and sending them first to MOSES (the translation tool) and to NEWPAR (the classification algorithm), both developed in C. The interface on the client side has been developed using jQuery Mobile [4], a new open source library which allows to develop HTML and Javascript applications for al-most any device containing a simple browser.

The compatibility of the selected languages and libraries ensures the possibility to compile and install all the source code and get it working in almost any device (both mobile and non-mobile platforms) and any of the existing operat-ing systems. Moreover, we also provide the users with the native code [2] in case they want the application to be ex-ecuted in the most efficient way. In order to compile the application for mobile devices, the PhoneGap [1] framework was used, as it allows to create mobile apps using stan-dardized web APIs. The final result is an application that can run on any kind of computers through a simple website ( http://www.lookforplants.com ), and natively with an in-stalled application on systems such as Android, iOS, Win-dows, Blackberry, webOS and Symbian, all with a single codebase. [1] S. Allen, V. Graupera, and L. Lundrigan. Phonegap. [2] A. Charland and B. Leroux. Mobile application [3] P. Koehn, H. Hoang, A. Birch, C. Callison-Burch, [4] J. Reid. jQuery Mobile . O X  X eilly Germany, 2011. [5] F. Ruiz-Rico, J.-L. Vicedo, and M.-C. Rubio-S  X anchez. [6] F. Ruiz-Rico, J.-L. Vicedo, and M.-C. Rubio-S  X anchez. [7] F. Ruiz-Rico, J.-L. Vicedo, and M.-C. Rubio-S  X anchez. [8] J. Tiedemann. News from opus -a collection of
