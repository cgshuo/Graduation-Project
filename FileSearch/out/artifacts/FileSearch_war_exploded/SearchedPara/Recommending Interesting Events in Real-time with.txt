 Foursquare is a location-based social application that helps users explore the world around them and share their experi-ences with friends. When foursquare users visit places, they  X  X heck in X  using their mobile phones, indicating they are at that place. People check in for a variety of reasons: to keep up with friends, get tips about places, redeem rewards, and keep track of their personal history [2]. In aggregate, bil-lions of these check-ins reveal distinct patterns about when places are popular [5] and allow us to build a unique place recommendation engine which can identify and recommend interesting events in real-time based on statistical deviations from past historical trends.
 H.2.8 [ Information Systems Applications ]: Data min-ing, Spatial databases and GIS; H.3.3 [ Information Sys-tems Applications ]: Information filtering; H.3.5 [ Information Systems Applications ]: Web-based services; G.3 [ Probability and Statistics ]: Time series analysis; I.5.1 [ Pattern Recog-nition ]: Models X  Statistical real-time event identification, foursquare, spatiotemporal data, machine learning
One of the oldest components of foursquare is a system called  X  X rending X  which ranks nearby places by the number of people currently checked in [1] . We use this system to detect interesting  X  X vents X  where many people check in at the same time. While this is useful, it tends to surface ex-pected events at large venues, such as transportation hubs and office buildings. In order to identify truly interesting events, we have created a system that detects events that are both large and anomalous by leveraging machine learn-ing and past historical data. We call the measure that this system produces  X  X ff-trending. X 
Consider Figure 1, which shows the number of check-ins per hour for two venues over a period of 20 weeks in 2011. Penn Station, shown in Figure 1(a), is one of the most pop-ular places in New York City, and often has more people checked in than any other place in the city. The number of check-ins per hour fluctuates from 0 to well over 200 with a very predictable pattern. There is a strong weekly peri-odicity with distinct peaks located at commuting times on weekdays. Although these periodic events are quite large in magnitude, they aren X  X  very interesting to users since they appear regularly.
 In Figure 1(b), we see a popular New York bar called The Scratcher. This venue has far fewer check-ins per week, and cannot compare to Penn Station in terms of raw popular-ity. However, there are occasional events at The Scratcher, as shown in week 5 on Friday night, that constitute a large deviation from historical behavior. These are the kinds of events that we aim to identify and surface to our users. In-stead of surfacing common popular places like airports and train stations, we aim to surface anomalous events like street fairs, parties, and gallery openings. The key to identifying these events in real-time is modeling the expected number of check-ins each place is likely to receive.
We define the  X  X ff-trending X  score of a venue,  X  v ,tobe an estimate of how unusually busy the place is (that is, how busy the venue is relative to historical trends). To calculate the off-trending score, we first learn a probabilistic model for each place that yields a negative binomial distribution [4] over the number of people we expect to check in at any given time: where k is the number of people who have checked in, t is the elapsed time period, and w is the current hour of the week. The parameters of the probabilistic model,  X  w ,are parameterized by the hour of the week w (a number between 1 and 168), and a tunable parameter  X  which controls the variance of the distribution: C (10  X  day) is an estimate of the number of check-ins per week computed using an exponential moving average with a 10-day half life, and P ( w ) is the probability of a check-in at the place occurring at weekhour w .Theterm C (10  X  day) P ( w can be thought of as the expected number of check-ins for a particular hour of the week.
For each popular place on foursquare we estimate the 168 parameters of P ( w ) by maximum likelihood from all of the check-ins that have occurred at that place. We use a Dirchlet prior [3] to smooth the estimates and avoid over-fitting: C w represents the number of check-ins that occur at the place at week hour w . The hyper-parameters of the Dirchlet distribution,  X  w , are optimized over a large subset of places via gradient descent using the log-likelihood of held-out data as an objective function. Every time a user checks in on foursquare, we increment both the weekhour-based counts C w , as well as a global popularity term C (10  X  day) ,which estimates the number of check-ins a venue receives per hour by averaging check-in counts from many previous days.
Given P v ( k | t,  X  w , X  ) for each place v in a candidate set with a current value of k people checked in, we can compute  X  v = k j =0 P v ( j | t,  X  w , X  ) based on the cumulative density function of the negative binomial distribution. We call this quantity the X  X ff-trending X  X core for a venue, which indicates how unlikely it is for us to see at least k people checked in toaplace.
The off-trending score is a critical component of foursquare X  X  recommendation engine, allowing us to identify and surface interesting nearby events in real-time. When a user opens foursquare X  X  Explore recommendation engine on their mo-bile device, the off-trending score is combined with signals about the user X  X  past history, the preferences of the user and their friends, and other global signals in order to de-liver a ranked list of recommendations for interesting places nearby the user might want to discover. Unlike other rec-ommendation systems such as those for movies or books, understanding timeliness is critical to building a great place recommendation engine that can suggest activities to users in real-time. [1] foursquare for developers. [2] J. Lindqvist, J. Cranshaw, J. Wiese, J. Hong, and [3] T. P. Minka. Estimating a dirichlet distribution. 2000. [4] T. P. Minka. Estimating a gamma distribution. 2002. [5] A. Noulas, S. Scellato, C. Mascolo, and M. Pontil. An
