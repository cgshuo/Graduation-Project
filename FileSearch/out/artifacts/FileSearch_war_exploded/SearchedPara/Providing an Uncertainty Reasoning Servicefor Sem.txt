
Lei Li 1 , Qiaoling Liu 1 , Yunfeng Tao 2 ,LeiZhang 1 ,JianZhou 1 , and Yong Yu 1 The Semantic Web (SW) [1] aims at transforming traditional text-based web and providing machine readable information for practical applications. Such in-formation is based on three types of semantics: the implicit, the formal, and the powerful semantics[2]. The implicit semantics describes informal and uncertain information of the web, such as semantics in unstructured texts and document links. While the formal semantics ofte n refers to well-defined and structured representation with definite meaning, such as ontologies upon Description Logic (DL). The last but most powerful semantics owns abilities of both of the previous ones, i.e. it describes both the informal (imprecise and probabilistic) and formal aspects of the web. However, it is not easy to obtain a powerful semantics due to the incompatibility between logic and probability. To resolve this incompat-ibility, we propose PDLP to tightly combine description logic with probability and provide a powerful semantics semantic web context.
 As a formal representation, Description Logic[3] is a decidable fragment of First Order Logic (FO). With DL, Knowledge Bases (KB) describe concepts, roles (the relationship between concepts), axioms and assertions under a Tarski-like semantics. Efficient algorithms have been devised to solve reasoning tasks in DL, such as highly optimized Tableau algorithms[4]. However, these algorithms do not deal with uncertainty.

In the recent decades, uncertainty star ts to play an important role in order to supplement the expressivity of formal approaches. The changing web context and intrinsic properties of information require this type of uncertainty, as one example showed in our tourism ontology. However, pure DL does not lend a hand to uncertainty reasoning. Several extensions have been made to combine uncertainty and DL together[5,6,7]. In our attempt, we present Probabilistic Description Logic Programs (PDLP), a lightweight probabilistic extension to assertional knowledge in DL, and interpret probabilities in intentional semantics. Queries of PDLP are answered using a translational approach: reducing DL to logic programs in the same spirit as in [8].

The major differences between our PDL P and other related formalisms lie in the following aspects:  X  PDLP only attaches probability to world assertions rather than terminolog- X  The syntax and semantics are carefully devised to meet both the DL and  X  PDLP adopts a translational approach rather than a hybrid approach, such
As a result of these differences, PDLP achieves several highlights as follows:  X  Expressive, PDLP owns the ability to deal with uncertainty, besides, the  X  Lightweight, probability is only extended to world assertions rather than the  X  Intuitive, the semantics of probability in PDLP is clear and natural;  X  Speedy, its reasoning algorithm is very fast thanks to the efficient inferencing  X  Practical, we apply our implemented PDLP reasoner to Tourism Ontology
The remaining part of this paper is or ganized as follows: in next section, we will formalize the syntax and semantics of PDLP. In section 3, we describe the reasoning tasks and the corresponding algorithm. In section 4, we present our PDLP implementation and its application in tourism planning. Related work is discussed in section 5. Finally, section 6 concludes the paper. 2.1 Syntax of PDLP The language of PDLP is obtained by tailoring DL in the same essence as DHL[8]. The tailoring is justifiable due to the different expressivity and complexity be-tween DL and LP, thus it is necessary to build up a model to capture common abilities of the two. Primarily, our extension enhances the expressivity of uncer-tain knowledge.
 A probabilistic knowledge base of PDLP consists of two components: pKB :=
T,pA ,whereTBox T contains axioms about concepts (in other words, the relationship between concepts): where C h , C b are concepts and R, S are roles, defined as follows: where A is an atomic concept and R is a role . Here, negation is allowed on primitive concepts rather than arbitrary ones to meet the translating restriction from DL to LP because LP cannot represent arbitrary negation.

The ABox of PDLP, pA , differs from that of normal DLs in the uncertainty it asserts. An probabilistic assertion p  X   X  could assert uncertainty beyond the contains following assertions: where a , b are individuals, A a primitive concept , S aroleand R a primitive role 1 ,and p , called asserted probability (AP), is a real number in the range of with uncertainty on primitive concepts or roles (thus it is lightweight). 2.2 Semantics In PDLP, an assertion is attached with a probability to indicate how much likely it is consistent with respect to probabilistic knowledge base. In order to Theory.

An interpretation of TBox is called a model of T , written as I | = T ,where I assigns to every concept C aset C I  X  I and to every role R a binary relation R
I  X  I  X  I ,where I is the domain of the interpretation (Table 1). The Definition 2.1. (Least Fixed Point Semantics) Let I 0 be a base interpretation only on primitive concepts and primitive roles, an extension I on a base inter-pretation I 0 is called a least fixed point model with respect to a TBox T if: (1) I 0 I,I
Hence, we define the sample space in PDLP as the model class C : the collec-tion of least fixed point models with respect to TBox. We assume that  X  is a probability distribution on C with restriction  X  ( C )=1.
 Definition 2.2. Apair C , X  is called a probabilistic world of the knowledge base pKB ,where C and  X  follow conditions mentioned above.
 Intensional Semantics. An ABox assertion is in fact a logical formula. A formula has its satisfied models: Mod (  X  ):= { I : I  X  C  X  I | =  X  } . Definition 2.3. The calculated  X  probability (CP) of a classical deterministic assertion is a function defined by: world. is well defined because C is enumerable.
 Lemma 2.1 The CP of an assertion has following properties:  X   X  ( a :  X  C )=1  X   X  ( a : C ) where C, D are concepts.
 Definition 2.4. Aprobabilisticworld C , X  satisfies a probabilistic assertion p  X   X  , written as C , X  | X  p  X   X  ,if  X  (  X  )= p (CP equals AP).
 A probabilistic world satisfies ABox pA with respect to a TBox T ,
C , X  | X  pA , if it satisfies all assertions in pA .Inthissense,itisalsowrit-ten as C , X  | X  pKB , for a probabilistic Knowledge Base pKB constituted by T and pA . Definition 2.5. A pKB entails an assertion p  X   X  , pKB | X  p  X   X  ,ifall probabilistic worlds of pKB , satisfy the assertion. Lemma 2.2 Probability Indicator  X  if pKB | X  p  X  a : C ,then pKB | X  (1  X  p )  X  a :  X  C ;  X  inclusion-exclusion principle: if pKB | X  p  X  a : C , pKB | X  q  X  a : D and  X  a :  X  R.C  X 
The lemma above is vitally important because it is the basis of our calculation of the probability of a given assertion. And this also explains why we restrict the syntax of probabilistic assertion in ABox: we would like to compute the probability of complex assertions from some basic and simple facts. This is rather useful in practical application as shown in our example: the ontology knows basic facts while the reasoner can figure out complex events.

Our extension enhances th e expressivity of uncertain knowledge. Meanwhile it is its lightweight extension that enables an easy semantic model of proba-bilistic knowledge base. The overall semantics is rather intuitive once we set up probabilities for models of the knowledge base, which inspires our fast reasoning scheme in the following section. 3.1 Reasoning Tasks A DL reasoning system typically supports several kinds of reasoning tasks: mem-bership, subsumption, satisfiability and hierarchy, all of which can be reduced into retrieval problems [3]. While LP engines could typically answer two kinds of queries: instance retrieval and membership check[8]. Since PDLP adopts the translational approach, it supports similar queries as DHL[8], which enables us to express information need either DL-like with concept constructors or LP-like with variables. For example, we can represent our query  X  X etrieve any instance of  X  R.C  X  X s:  X  DL-like:  X  R.C  X  LP-like: Query ( x )  X  R ( x, y ) ,C ( y )
The DL-like queries can be easily translated into LP-like queries, while LP queries can express more than DL ones. Therefore PDLP is expressive in query ability.

The query is answered in the following scheme: 1. Fast retrieval of any possible instances by making use of the below transla-2. Calculate the probability corresponding to each instance (pair). 3.2 Translation In order to retrieve all possible results, a probabilistic knowledge base pKB can be partially translated into a logic program[9] while preserving the semantics. We follow the approach of [8] and define a mapping from PDLP to LP in the same way as DHL except for atomic negations and probability assertions as follows:
A (retrieval) query could also be translated into LP conventions as the body part of a rule without head.

This translation phase does not concern probability, with its primary target on all possible result. The preservation of semantics relies primarily on transla-tion of deterministic part of pKB , which is ensured and by the common Least Fixed Point Semantics these two formal frameworks share[10]. Therefore the semantics preserve, for the probability distribution is on the models of TBox, which concerns no uncertainty. 3.3 Probabilistic Inferencing Definition 3.1. A set of primitive assertions E is called a (basic) evidence of an assertion p X  if  X  T, D ( E ) | = D ( p  X   X  ) ,where T, D ( E ) is a temporal knowledge base.  X   X E E , T, D ( E ) D ( p  X   X  ) where D ( E )= {  X  : p  X   X   X  X } . E is a minimum set of primitive facts to support  X  .

Assuming the consistency of pKB, an answer of a query under the least fixed point semantics is a result of bottom-up calculation while the evidence here in essence is a result of top-down search of supporting facts. Hence, the procedure to calculate the probability of an assertion can be summarized as follows: 1. Inference all basic evidences E 1  X  X  X E k by LP engine 2. Calculate the probability by CP = CP (
In order to calculate probability, one vital property we assume here is the independence of assertions in a basic evidence, that is, CP ( p  X   X   X  q  X   X  )= primitive. In this section, we present an example application of our implemented PDLP rea-soner, the Tourism Ontology Uncertainty Reasoning system(TOUR), to provide a travel planning service for clients. 4.1 Implementation We implement a PDLP reasoner based on intensional semantics. In order to speed up its reasoning, PDLP reasoner adopts following optimizing techniques: sideway information passing, magic set and semi-naive evaluation strategies[11]. The PDLP reasoning speed is really fast in the following practical tourism ap-plication. 4.2 Scenario and Architecture The TOUR system is built upon the tourism ontology (adapted from Protege 2 ontology library). The system aims at making a tourism plan most conforming to customer X  X  expectation. This system contains three components (Figure 1):  X  Ontology layer: The tourism ontology formally describes a set of available  X  Reasoning layer: make use of our implemented PDLP reasoner;  X  Querying layer: transform user queries to DL-style or LP-style forms, and
Probabilities in the tourism ontology have practical meanings about quality of a tourism cites and services:  X  p  X  a :Accommodation denotes accommodation rating given by CNTA;  X  p  X  d, a :hasAccommodation indicates t he convenience of accommodation a  X  p  X  d, c :hasActivity describes the service probability of activity c in desti-4.3 Querying on the Ontology The TOUR system takes the following procedures to evaluate a travel plan for acustomer: 1. Setup probabilities for basic facts (assertions) in ontology (Probability Per-2. Specify the factors and rules to retr ieve travel plans (Query Generator); 3. Make use of PDLP reasoner to infer possible travel plans with their proba-
The following example concerning travelling in Beijing illustrates the whole procedure.

In the first phase, suppose a customer gr ades travel cites and services in Bei-jing (Figure 2) as follows (partially):
Second, the optimal travel plan is specified as a triple of destination, accom-modation and activity, judged by a combination of their service quality and convenience. Thus the query rule is: Q1: Query(X,Y,Z)  X  PreferredDest(X),hasAccommodation(X,Y),
In the third phase, the PDLP engine infers a result RES 1 = Beijing, Wangfu-jing Grand Hotel, Visiting with two evidences: E 1 = { (1),(2),(3),(5) } and E 2 = { (1),(2),(4),(6) } , thus the convenience (probability) of this plan is CP(RES 1 )= CP( E 1 )V+CP( E 2 )  X  CP( E 1  X E 2 )=0.842175.

Figure 3 shows results of Q1. 4.4 Performance We have tested performance of the TOUR system using two sorts of queries. One is a mixed query combining both probability and formal inquiry mentioned above. Another is intended to test capacity of the system on simple queries: Q2: Query(X,Y)  X  offerActivity(X,Y).

Figure 4 shows the performance of TOUR system of two queries on two ontolo-gies. The size of ontology is measured in instance number(both concept instances and role instances). In the logarithmic graph, the reasoning time is in scale to the ontology size, illustrating the attractive computability of PDLP. Theoreti-cally, PDLP compute query answers in fast thanks to the tractable complexity of LP[9]. Because PDLP reasoner is not dedicated to TOUR system, we could also expect high performance of PDLP X  X  reasoning in general applications. Previously there are several related approaches to probabilistic description log-ics which can be classified according to: (1) what component the uncertainty be attached to (1a) TBox[12,13,14] (1b) ABox[7,15] (1c) both[16,6,5,17,18,19,20]; (2) what approach is applied to reasoning. For the latter aspect, (2a) fuzzy logic inferencing[16,17], (2b) Bayesian Network[12,18], (2c) lattice-based approach[20], (2d) combination of probabilistic DL with LP[6,7,5]. [16,17] extend DL (both TBox and ABox) with uncertainty interval by fuzzy set theory, and devise a set of reasoning rules to inference uncertainty. [12,18] translate probabilistic extension of DL into Bayesian Network approach with different expressivities. The former [12] works based on extension to ALC TBox while the latter [18] makes a probabilistic extension to OWL ontology. [20] man-ages uncertainty in DL with lattice-based approach mapping an assertion to a uncertain value in a lattice and reasoning in a tableaux-like calculus. Other related work [13] concentrates on probabilities on terminological axioms, [15] on world assertions while [14] on concept subsumption and role quantification. [19] extends SHOQ(D) using probabilisti c lexicography entailment and supports assertional knowledge.

Concerning extension of uncertainty to combination of DL and LP, the works most related to ours can be divided into: (i) hybrid approaches tightly combin-ing DL with LP and adding uncertainty in order to extend expressivity [5][7]; (ii) translational approaches reducing DL with uncertainty to probabilistic inferenc-ing in LP in order to take advantage of powerful logic programming technology of DL and LP under Answer Set Semantics. [7] presents combination of descrip-tion logic programs (or dl-programs) and adds probability to assertions under the answer set semantics and the well-founded semantics, and reduces computation of probability to solving linear optimization systems. [6] generalizes DAML+OIL with probability (in essence both on TBox and ABox), and maps it to four-valued between [6] and our PDLP lies in that [6] attaches probability to both axioms and assertions in DAML+OIL while we restrict probability only on ABox assertions In this paper, we have extended DL with probability on assertional knowledge, namely PDLP, and interpreted probabilistic ABox assertions under intensional semantics. The syntax and semantics of PDLP are very lightweight, intuitive and expressive to deal with uncertainty and practical applications in Semantic Web, and its reasoning is very fast through LP techniques. We have implemented a PDLP reasoner and apply it into a practical application TOUR system to make optimal travel plans for users. The performance of the TOUR system is encouraging for future use of PDLP in other applications.

