 Automatic question answering (QA) targets at providing more precise answers to users X  questions than search engines. Although more preferable, they cannot outperform currently well-known search engines. Hence, more and more user-interactive QA systems, including Google Answers [1], Microsoft QnA [2] and Yahoo Answers [3], have been launched, serv ing as interactive platforms for users to help each other with human-provided answers. However, most of these QA systems request users to input entire questions, even though many similar questions have been asked many times. Moreover, these free text questions are difficult to be analyzed and understood by computers. Hence, we propose to use question patterns to improve the performance of these QA systems. 
A structural question pattern is a generalization of a group of questions which have similar structures. It has been demonstrated that patterns can facilitate machine understanding [4]. However, there also exist some shortcomings in this structural pattern, such as lacking of semantic information and flexibility. Semantic pattern which is based on structural pattern can reduce the ambiguity of the questions and enhance semantic representation of the question. Meanwhile, this pattern allows QA systems to locate answers based on its semantic type and filter out irrelevant answers by matching the semantic parts of question patterns. 
Although semantic patterns are very useful in QA systems, manually building becomes an important topic in the QA area. Several research efforts have focused on learning extraction rules from training examples provided by users [5]. However, many of them abandon the semantic information and only keep the structure information when generating patterns, which make the patterns hardly understood by machines. 
In this paper, we propose an automatic generation method for the semantic pattern defined by Hao et al. [6]. It can generate high-quality semantic patterns from a set of free-text questions. This method uses structural processing and name entity recognition to obtain main structure of a question. WordNet is also used to acquire upper concepts for certain terms and map with our tagger ontology to obtain semantic labels, which can be used to annotate or constrain the semantics of the terms in generated pattern. An entropy-based model is used to evaluate and select suitable granularity level. In our experiments, we implemented the proposed method in our user-interactive QA system -BuyAns [6]. 5500 questions available at [7] are chosen to generate patterns and evaluate their qualities. Experiment results show that 63.9% generated patterns are satisfactory in the average according to our evaluation method. 
The rest of this paper is organized as follows: Section 2 presents the proposed automatic generation method in detail, including structure processing, Entropy based selecting for generalization, and semantic mapping and tagging. Section 3 shows our experiment results. Section 4 summarizes this paper and discusses future work. We propose a method for automatic generation of semantic patterns based on the previous definition. It can analyze a user X  X  question to form its main structure. WordNet and a tagger ontology are then used to tag suitable nouns and verbs to obtain corresponding semantic labels. The main structure combined with labeled semantic information forms a new semantic question pattern. The whole procedure is shown in Fig. 1. It consists of three main modules: (1) Structure processing and name entity recognition, (2) Entropy based selection of suitable nouns/verbs for generalization, (3) Semantic mapping and tagging. 2.1 Structure Processing and Name Entity Recognition Given a free-text question, this step is to analyze the sentence by structure processing and name entity recognition (NER) to obtain the main structure of the question. 
The NER step is to identify certain atomic elements of information in text, including person names, company/organization names, locations, dates &amp; times, percentages and monetary amounts. We mainly focus on recognizing people names the main structure obtained, we design a kind of tagger for name entity recognition, which can identify the common entity names based on our entity dictionaries. 
The main structure can be seen as a simplified representation of the original nouns and verbs, which are most useful in pattern generation. In addition, with the main structure we can ignore some useless information for pattern generation such as the stop words and some meaningless words. This procedure mainly includes the following four steps: 
For example, given a question  X  X ho is the mayor of Beijing? X , we first acquire the question type  X  X ho X  according to our question type list and label it as  X &lt;Type:Who&gt; X . Structural processing then remove  X  X he X  as a stop word and find noun  X  X ayor X . Using NER, we obtain name entity of  X  X eijing X  as a location. Finally we obtain the main structure as  X &lt;Type:Who&gt; is [Noun=mayor] of [NE(location)= Beijing]? X . 2.2 Selection of Nouns /Verbs for Generalization All nouns and verbs in the main structure are candidates for generalization to form new patterns. However, some of them are more suitable to be generalized such that the generated patterns can cover more questions and are easily understood by users. In this section, we develop a method based on the entropy model to evaluate the sensitivity/suitability of a certain term in the question to be generalized. 
Before we describe our evaluation strategy, we would like to give some definitions the upper concept of T i is SC j , the probability of T i occurs in all terms which have the calculated by Equation (1). 
The higher entropy value ) ( j SC H is, the bigger the variety of words which can be used to replace T i at its position, which is also more appropriate for generalization and tagging. When it exceeds a threshold  X  , we can select it as a candidate for semantic tagging. For better usage for common users in our system, we use  X  to limit the number of selected nouns/verbs in the same question or the number of blanks in than  X  , we only select top  X  terms whose upper concepts have best entropy values. 
From the example  X  X ho is mayor of Beijing? X , we have noun  X  X ayor X  and  X  X eijing X . The upper concept of  X  X eijing X  is  X  X ocation\city X , which have instances such as "Washington", "Boston" in our training base. The possibilities of these two instances are  X 0.00154 X  and  X 0.00308 X , respectively. The entropy of  X  X ocation\city X  is 0.12757, which is greater than the threshold of entropy value we set (0.05). Hence we select it as a good noun for generalization in the main structure. 2.3 Semantic Mapping and Tagging After the main structure is obtained, the selected nouns/verbs are sent to the semantic tagging module to be assigned with semantic labels, which include two key steps: 1) Query from WordNet [9], and 2) Matching from the tagger ontology. The purpose of using WordNet is to label the nouns and verbs by their upper concepts. In the main concepts. The upper concepts obtained in the first step are mapped to the labels in the tagger ontology in the second step. The most important role of the tagger ontology is to tag nouns and verbs in the main structure with suitable semantic keywords. These tagged keywords contain semantic description and relationship of the hierarchical concepts in the ontology and can therefore be understood by machine easily. It is also useful for manual questioning or answering. Users can understand the content of the blanks in the patterns by their semantic labels as tips of the filled content. 
The tagger ontology contains upper concept hierarchy of WordNet and a list of question target. For better understanding and using by users, it only includes two-level concepts. Matching from tagger ontology is to build the relation between concepts in WordNet and labels in the tagger ontology. 
For the example mentioned above, we select the noun  X  X ayor X  and  X  X eijing X  for generalization.  X  X ayor X  is queried in the WordNet to obtain upper concepts such as  X  X erson X  and  X  X uthority X . These concepts are then matched in our tagger ontology to get the semantic label [Human\Title].  X  X eijing X  can be matched with [Human\Title] of [Location\City] X . The quality of the generated patterns mainly relies on the quality of the semantic labels. Our evaluation method is to get the user X  X  satisfaction of each pattern and get average satisfaction of all patterns by asking users to determine whether each part of the generated patterns is suitable or not. Since determining whether each part is suitable need much experience based on our pattern definition, we check it manually. 
Given a question set QS = {Q 1 , Q 2 , ... Q n } , we can generate a corresponding we use RT , RN and RV to represent whether its question type, nouns and verbs is right 0. Suppose there are m nouns and n verbs in Q i , the satisfaction of the noun part in P i is  X  =
The satisfaction of a pattern means whether a generated pattern is satisfactory to our pattern definition and user X  X  demand, which is represented as S(P) . It can be calculated by the following formula: Where  X  and  X  are two weights for evaluation and they can be fixed by a serial of experiments. Finally, the average satisfaction of the whole pattern set AS(PS) can be easily obtained from the satisfaction of all patterns in it. 
We implemented and applied our proposed method into our QA system-BuyAns [7]. When a user posts a question, system can analyzes its structure and matchs patterns from our pattern database. If no pattern matched, system will generate a few ask the question. The user interface is also implemented for this purpose. 
In experiments, we select 500 questions from our 5500 training questions randomly [8]. Our system generates patterns for these questions automatically. We select 10 generated patterns randomly as a group for five times to check the result manually. The average satisfaction can be calculated using the evaluation method in Section 5.2 automatically. these five groups are shown in Table 1. Finally, the average satisfaction for all generated patterns in the five groups is 63.9%. Pattern generation for QA systems is a tedious, difficult, time-consuming task. Hence, we propose an automatic generation method for the semantic patterns defined by Hao et al. [6]. The generation procedure first process structural and recognize name entitis for free-text questions. The upper concepts of the obtained nouns/verbs in the questions are then mapped to the semantic labels in the tagger ontology. An entropy based evaluation method is finally used to evaluate which nouns and verbs are more suitable to be generalized to form a new question pattern. We implement the proposed method and evaluate it with experiments using 5500 questions. The results show that our method return patterns with 63.9% satisfaction in the average. We think it can be applied for practical usage and can save a lot of human efforts of manual generation of patterns. 
Though this method can be applied in user-interactive QA system easily and can quality of the acquired main structures is not very good. In future work, we will improve the method of structural processing to obtain more accurate structures and update parameters of our evaluation method according to experiments to make the generated pattern more satisfactory. The work in this paper was fully supported by the China Semantic Grid Research Plan (National Grand Fundamental Research 973 Program, Project No. 2003CB317002). 
