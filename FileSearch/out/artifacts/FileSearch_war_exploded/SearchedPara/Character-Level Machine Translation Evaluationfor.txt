 Since the introduction of BLEU (Papineni et al., 2002), automatic machine translation (MT) eval-uation has received a lot of research interest. The Workshop on Statistical Machine Transla-tion (WMT) hosts regular campaigns comparing different machine translation evaluation metrics (Callison-Burch et al., 2009; Callison-Burch et al., 2010; Callison-Burch et al., 2011). In the WMT shared tasks, many new generation metrics, such as METEOR (Banerjee and Lavie, 2005), TER (Snover et al., 2006), and TESLA (Liu et al., 2010) have con-sistently outperformed BLEU as judged by the cor-relations with human judgments.

The research on automatic machine translation evaluation is important for a number of reasons. Au-tomatic translation evaluation gives machine trans-lation researchers a cheap and reproducible way to guide their research and makes it possible to com-pare machine translation methods across different studies. In addition, machine translation system parameters are tuned by maximizing the automatic scores. Some recent research (Liu et al., 2011) has shown evidence that replacing BLEU by a newer metric, TESLA, can improve the human judged translation quality.

Despite the importance and the research inter-est on automatic MT evaluation, almost all existing work has focused on European languages, in partic-ular on English. Although many methods aim to be language neutral, languages with very different characteristics such as Chinese do present additional challenges. The most obvious challenge for Chinese is that of word segmentation.

Unlike European languages, written Chinese is not split into words. Segmenting Chinese sentences into words is a natural language processing task in its own right (Zhao and Liu, 2010; Low et al., 2005). However, many different segmentation stan-dards exist for different purposes, such as Microsoft Research Asia (MSRA) for Named Entity Recog-nition (NER), Chinese Treebank (CTB) for parsing and part-of-speech (POS) tagging, and City Univer-sity of Hong Kong (CITYU) and Academia Sinica (AS) for general word segmentation and POS tag-ging. It is not clear which standard is the best in a given scenario.

The only prior work attempting to address the problem of word segmentation in automatic MT evaluation for Chinese that we are aware of is Li et al. (2011). The work compared various MT eval-uation metrics (BLEU, NIST, METEOR, GTM, 1  X  TER) with different segmentation schemes, and found that treating every single character as a token (character-level MT evaluation) gives the best corre-lation with human judgments. Li et al. (2011) identify two reasons that character-based metrics outperform word-based metrics. For illustrative purposes, we use Figure 1 as a running example in this paper. All three expressions are se-mantically identical ( buy umbrella ). The first two forms are identical because  X   X  1 and  X  are syn-onyms. The last form is simply an (arguably wrong) alternative segmented form of the second expres-sion. 1. Word-based metrics do not award partial 2. Character-based metrics do not suffer from er-Li et al. (2011) conduct empirical experiments to show that character-based metrics consistently out-perform their word-based counterparts. Despite that, we observe two important problems for the character-based metrics: 1. Although partial matches are partially awarded, 2. Character-level metrics can utilize only a small
In this work, we attempt to address both of these issues by introducing TESLA-CELAB, a character-level metric that also models word-level linguistic phenomenon. We formulate the n-gram matching process as a real-valued linear programming prob-lem, which can be solved efficiently. The metric is based on the TESLA automatic MT evaluation framework (Liu et al., 2010; Dahlmeier et al., 2011). 3.1 Basic Matching We illustrate our matching algorithm using the ex-amples in Figure 1. Let  X   X   X  be the reference, and  X   X  be the candidate translation.

We use Cilin (  X   X   X  X  X   X  ) 2 as our synonym dictionary. The basic n-gram matching problem is shown in Figure 2. Two n-grams are connected if they are identical, or if they are identified as syn-onyms by Cilin. Notice that all n-grams are put in the same matching problem regardless of n , unlike in translation evaluation metrics designed for Eu-ropean languages. This enables us to designate n-grams with different values of n as synonyms, such as  X   X  ( n = 2 ) and  X  ( n = 1 ).

In this example, we are able to make a total of two successful matches. The recall is therefore 2 / 6 and the precision is 2 / 3 . 3.2 Phrase Matching We note in Figure 2 that the trigram  X   X   X  and the bigram  X   X  are still unmatched, even though the match between  X   X  and  X  should imply the match between  X   X   X  and  X   X  .

We infer the matching of such phrases using a dynamic programming algorithm. Two n-grams are considered synonyms if they can be segmented into synonyms that are aligned. With this extension, we are able to match  X   X   X  and  X   X  (since  X  matches  X  and  X   X  matches  X  ). The matching problem is now depicted by Figure 3.

The linear programming problem is mathemati-cally described as follows. The variables w (  X  ,  X  ) are the weights assigned to the edges,
We require that for any node N , the sum of weights assigned to edges linking N must not ex-ceed one. where
Now we maximize the total match, w (  X  ,  X  )+ w (  X  ,  X  )+ w (  X   X  ,  X  )+ w (  X   X   X  ,  X   X  ) In this example, the best match is 3, resulting in a recall of 3 / 6 and a precision of 3 / 3 . 3.3 Covered Matching In Figure 3, n-grams  X  and  X   X  in the reference re-main impossible to match, which implies misguided penalty for the candidate translation. We observe that since  X   X   X  has been matched, all its sub-n-grams should be considered matched as well, includ-ing  X  and  X   X  . We call this the covered n-gram matching rule. This relationship is implicit in the matching problem for English translation evaluation metrics where words are well delimited. But with phrase matching in Chinese, it must be modeled ex-plicitly.

However, we cannot simply perform covered n-gram matching as a post processing step. As an ex-ample, suppose we are matching phrases  X   X  and  X  , as shown in Figure 4. The linear programming solver may come up with any of the solutions where w (  X  ,  X  ) + w (  X   X  ,  X  ) = 1 , w (  X  ,  X  )  X  [0 , 1] , and w (  X   X  ,  X  )  X  [0 , 1] .

To give the maximum coverage for the node  X  , only the solution w (  X  ,  X  ) = 0 , w (  X   X  ,  X  ) = 1 is accepted. This indicates the need to model covered n-gram matching in the linear programming prob-lem itself.

We return to the matching of the reference  X   X   X  and the candidate  X   X  in Figure 3. On top of the w (  X  ) variables already introduced, we add the vari-ables maximum covering weights c (  X  ) . Each c ( X ) represents the maximum w ( Y ) variable where n-gram Y completely covers n-gram X . where
However, the max(  X  ) operator is not allowed in the linear programming formulation. We get around this by approximating max(  X  ) with the sum instead. Hence,
We justify this approximation by the following observation. Consider the sub-problem consisting their associated constraints. This sub-problem can be seen as a maximum flow problem where all con-stants are integers, hence there exists an optimal so-lution where each of the w variables is assigned a value of either 0 or 1. For such a solution, the max and the sum forms are equivalent, since the c ref (  X  ) and c cand (  X  ) variables are also constrained to the range [0 , 1] .

The maximum flow equivalence breaks down when the c (  X  ) variables are introduced, so in the gen-eral case, replacing max with sum is only an approx-imation.

Returning to our sample problem, the linear pro-gramming solver simply needs to assign:
Consequently, due to the maximum covering weights constraint, we can give the following value assignment, implying that all n-grams have been matched. 3.4 The Objective Function We now define our objective function in terms of the c (  X  ) variables. The recall is a function of P X c ref ( X ) , and the precision is a function of P
Y c cand ( Y ) , where X is the set of all n-grams of the reference, and Y is the set of all n-grams of the candidate translation.
 Many prior translation evaluation metrics such as MAXSIM (Chan and Ng, 2008) and TESLA (Liu et al., 2010; Dahlmeier et al., 2011) use the F-0.8 measure as the final score:
Under some simplifying assumptions  X  specifi-cally, that precision = recall  X  basic calculus shows that F 0 . 8 is four times as sensitive to recall than to precision. Following the same reasoning, we want to place more emphasis on recall than on precision. We are also constrained by the linear programming framework, hence we set the objective function as 1 Z
We set f = 0 . 25 so that our objective function is also four times as sensitive to recall than to pre-cision. 3 The value of this objective function is our TESLA-CELAB score. Similar to the other TESLA metrics, when there are N multiple references, we match the candidate translation against each of them and use the average of the N objective function val-ues as the segment level score. System level score is the average of all the segment level scores.
Z is a normalizing constant to scale the metric to the range [0 , 1] , chosen so that when all the c (  X  ) vari-ables have the value of one, our metric score attains the value of one. In this section, we test the effectiveness of TESLA-CELAB on some real-world English-Chinese trans-lation tasks. 4.1 IWSLT 2008 English-Chinese CT The test set of the IWSLT 2008 (Paul, 2008) English-Chinese ASR challenge task (CT) consists of 300 sentences of spoken language text. The av-erage English source sentence is 5.8 words long and the average Chinese reference translation is 9.2 char-acters long. The domain is travel expressions.
The test set was translated by seven MT systems, and each translation has been manually judged for adequacy and fluency. Adequacy measures whether the translation conveys the correct meaning, even if the translation is not fully fluent, whereas fluency measures whether a translation is fluent, regardless of whether the meaning is correct. Due to high evaluation costs, adequacy and fluency assessments were limited to the translation outputs of four sys-tems. In addition, the translation outputs of the MT systems are also manually ranked according to their translation quality.

Inter-judge agreement is measured by the Kappa coefficient, defined as: where P ( A ) is the percentage of agreement, and P ( E ) is the percentage of agreement by pure chance. The inter-judge Kappa is 0.41 for fluency, 0.40 for adequacy, and 0.57 for ranking. Kappa val-ues between 0.4 and 0.6 are considered moderate , and the numbers are in line with other comparable experiments. 4.2 NIST 2008 English-Chinese MT Task The NIST 2008 English-Chinese MT task consists of 127 documents with 1,830 segments, each with four reference translations and eleven automatic MT system translations. The data is available as LDC2010T01 from the Linguistic Data Consortiuim (LDC). The domain is newswire texts. The average English source sentence is 21.5 words long and the average Chinese reference translation is 43.2 char-acters long.

Since no manual evaluation is given for the data set, we recruited twelve bilingual judges to evalu-ate the first thirty documents for adequacy and flu-ency (355 segments for a total of 355  X  11 = 3 , 905 translated segments). The final score of a sentence is the average of its adequacy and fluency scores. Each judge works on one quarter of the sentences so that each translation is judged by three judges. The judgments are concatenated to form three full sets of judgments.

We ignore judgments where two sentences are equal in quality, so that there are only two possible outcomes (X is better than Y; or Y is better than X), and P ( E ) = 1 / 2 . The Kappa values are shown in Table 1. The values indicate moderate agreement, and are in line with other comparable experiments. 4.3 Baseline Metrics 4.3.1 BLEU
Although word-level BLEU has often been found inferior to the new-generation metrics when the target language is English or other European lan-guages, prior research has shown that character-level BLEU is highly competitive when the target lan-guage is Chinese (Li et al., 2011). Therefore, we Segment Pearson Spearman rank Segment Pearson Spearman rank use character-level BLEU as our main baseline.
The correlations of character-level BLEU and the average human judgments are shown in the first row of Tables 2 and 3 for the IWSLT and the NIST data set, respectively. Segment-level consistency is defined as the number of correctly predicted pair-wise rankings divided by the total number of pair-wise rankings. Ties are excluded from the calcu-lation. We also report the Pearson correlation and the Spearman rank correlation of the system-level scores. Note that in the IWSLT data set, the Spear-man rank correlation is highly unstable due to the small number of participating systems. 4.3.2 TESLA-M
In addition to character-level BLEU, we also present the correlations for the word-level metric TESLA. Compared to BLEU, TESLA allows more sophisticated weighting of n-grams and measures of word similarity including synonym relations. It has been shown to give better correlations than BLEU for many European languages including English (Callison-Burch et al., 2011). However, its use of POS tags and synonym dictionaries prevents its use at the character-level. We use TESLA as a represen-tative of a competitive word-level metric.

We use the Stanford Chinese word segmenter (Tseng et al., 2005) and POS tagger (Toutanova et al., 2003) for preprocessing and Cilin for synonym definition during matching. TESLA has several vari-ants, and the simplest and often the most robust, TESLA-M, is used in this work. The various cor-relations are reported in the second row of Tables 2 and 3.

The scores show that word-level TESLA-M has no clear advantage over character-level BLEU, de-spite its use of linguistic features. We consider this conclusion to be in line with that of Li et al. (2011). 4.4 TESLA-CELAB In all our experiments here we use TESLA-CELAB with n-grams for n up to four, since the vast majority of Chinese words, and therefore synonyms, are at most four characters long.

The correlations between the TESLA-CELAB scores and human judgments are shown in the last row of Tables 2 and 3. We conducted significance testing using the resampling method of (Koehn, 2004). Entries that outperform the BLEU base-line at 5% significance level are marked with  X * X , and those that outperform at the 1% significance level are marked with  X ** X . The results indicate that TESLA-CELAB significantly outperforms BLEU.

For comparison, we also run TESLA-CELAB without the use of the Cilin dictionary, reported in the third row of Tables 2 and 3 and de-noted as TESLA-CELAB  X  . This disables TESLA-CELAB X  X  ability to detect word-level synonyms and turns TESLA-CELAB into a linear programming based character-level metric. The performance of TESLA-CELAB  X  is comparable to the character-level BLEU baseline.

Note that  X  TESLA-M can process word-level synonyms,  X  TESLA-CELAB  X  and character-level BLEU  X  TESLA-CELAB can process word-level syn-
Therefore, the difference between TESLA-M and TESLA-CELAB highlights the contribution of character-level matching, and the difference between TESLA-CELAB  X  and TESLA-CELAB highlights the contribution of word-level synonyms. 4.5 Sample Sentences Some sample sentences taken from the IWSLT test set are shown in Table 4 (some are simplified from the original). The Cilin dictionary correctly identi-fied the following as synonyms:
The dictionary fails to recognize the following synonyms:
However, partial awards are still given for the matching characters  X  and  X  .

Based on these synonyms, TESLA-CELAB is able to award less trivial n-gram matches, such as  X   X  =  X   X   X  ,  X   X   X  =  X   X   X  , and  X   X   X  =  X   X   X  , as these pairs can all be segmented into aligned syn-onyms. The covered n-gram matching rule is then able to award tricky n-grams such as  X   X  ,  X   X  ,  X   X  ,  X   X  and  X   X  , which are covered by  X   X   X  ,  X   X   X  ,  X   X   X  ,  X   X   X  and  X   X   X  respectively.
Note also that the word segmentations shown in these examples are for clarity only. The TESLA-CELAB algorithm does not need pre-segmented sentences, and essentially finds multi-character syn-onyms opportunistically. 5.1 Other Languages with Ambiguous Word Although our experiments here are limited to Chi-nese, many other languages have similarly ambigu-ous word boundaries. For example, in German, the exact counterpart to our example exists, as depicted in Figure 5.

Regenschirm, literally rain-umbrella , is a syn-onym of Schirm. The first two forms in Figure 5 appear in natural text, and in standard BLEU, they would be penalized for the non-matching words Schirm and Regenschirm . Since compound nouns such as Regenschirm are very common in German and generate many out-of-vocabulary words, a com-mon preprocessing step in German translation (and translation evaluation to a lesser extent) is to split compound words, and we end up with the last form Regen schirm kaufen . This process is analogous to Chinese word segmentation.

We plan to conduct experiments on German and other Asian languages with the same linguistic phe-nomenon in future work. 5.2 Fractional Similarity Measures In the current formulation of TESLA-CELAB, two n-grams X and Y are either synonyms which com-pletely match each other, or are completely unre-lated. In contrast, the linear-programming based TESLA metric allows fractional similarity measures between 0 (completely unrelated) and 1 (exact syn-onyms). We can then award partial scores for related words, such as those identified as such by WordNet or those with the same POS tags.

Supporting fractional similarity measures is non-trivial in the TESLA-CELAB framework. We plan to address this in future work. 5.3 Fractional Weights for N-grams The TESLA-M metric allows each n-gram to have a weight, which is primarily used to discount func-tion words. TESLA-CELAB can support fractional weights for n-grams as well by the following exten-sion. We introduce a function m ( X ) that assigns a weight in [0 , 1] for each n-gram X. Accordingly, our objective function is replaced by: 1 Z where Z is a normalizing constant so that the metric has a range of [0, 1].

However, experiments with different weight func-tions m (  X  ) on the test data set failed to find a better weight function than the currently implied m (  X  ) = 1 . This is probably due to the linguistic character-istics of Chinese, where human judges apparently give equal importance to function words and con-tent words. In contrast, TESLA-M found discount-ing function words very effective for English and other European languages such as German. We plan to investigate this in the context of non-Chinese lan-guages. In this work, we devise a new MT evaluation met-ric in the family of TESLA (Translation Evaluation of Sentences with Linear-programming-based Anal-ysis), called TESLA-CELAB (Character-level Eval-uation for Languages with Ambiguous word Bound-aries), to address the problem of fuzzy word bound-aries in the Chinese language, although neither the phenomenon nor the method is unique to Chinese. Our metric combines the advantages of character-level and word-level metrics: 1. TESLA-CELAB is able to award scores for 2. TESLA-CELAB does not have a segmentation 3. TESLA-CELAB is able to take full advantage We show empirically that TESLA-CELAB significantly outperforms the strong baseline of character-level BLEU in two well known English-Chinese MT evaluation data sets. The source code of TESLA-CELAB is available from http://nlp.comp.nus.edu.sg/software/.
 This research is supported by the Singapore Na-tional Research Foundation under its International Research Centre @ Singapore Funding Initiative and administered by the IDM Programme Office.
