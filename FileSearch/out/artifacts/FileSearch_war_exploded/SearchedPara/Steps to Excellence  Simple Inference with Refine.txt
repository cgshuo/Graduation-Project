 Dependency parsing is commonly cast as a max-imization problem over a parameterized scoring function. In this view, the use of more expres-sive scoring functions leads to more challenging combinatorial problems of finding the maximiz-ing parse. Much of the recent work on parsing has been focused on improving methods for solving the combinatorial maximization inference prob-lems. Indeed, state-of-the-art results have been ob-tained by adapting powerful tools from optimiza-tion (Martins et al., 2013; Martins et al., 2011; Rush and Petrov, 2012). We depart from this view and instead focus on using highly expressive scor-ing functions with substantially simpler inference procedures. The key ingredient in our approach is how learning is coupled with inference. Our com-bination outperforms the state-of-the-art parsers and remains comparable even if we adopt their scoring functions.

Rich scoring functions have been used for some time. They first appeared in the context of rerank-ing (Collins, 2000), where a simple parser is used to generate a candidate list which is then reranked according to the scoring function. Because the number of alternatives is small, the scoring func-tion could in principle involve arbitrary (global) features of parse trees. The power of this method-ology is nevertheless limited by the initial set of alternatives from the simpler parser. Indeed, the set may already omit the gold parse. We dispense with the notion of a candidate set and seek to ex-ploit the scoring function more directly.

In this paper, we introduce a sampling-based parser that places few or no constraints on the scoring function. Starting with an initial candi-date tree, our inference procedure climbs the scor-ing function in small (cheap) stochastic steps to-wards a high scoring parse. The proposal distri-bution over the moves is derived from the scoring function itself. Because the steps are small, the complexity of the scoring function has limited im-pact on the computational cost of the procedure. We explore two alternative proposal distributions. Our first strategy is akin to Gibbs sampling and samples a new head for each word in the sentence, modifying one arc at a time. The second strat-egy relies on a provably correct sampler for first-order scores (Wilson, 1996), and uses it within a Metropolis-Hastings algorithm for general scoring functions. It turns out that the latter optimizes the score more efficiently than the former.

Because the inference procedure is so simple, it is important that the parameters of the scoring function are chosen in a manner that facilitates how we climb the scoring function in small steps. One way to achieve this is to make sure that im-provements in the scoring functions are correlated with improvements in the quality of the parse. This approach was suggested in the SampleRank framework (Wick et al., 2011) for training struc-tured prediction models. This method was origi-nally developed for a sequence labeling task with local features, and was shown to be more effec-tive than state-of-the-art alternatives. Here we ap-ply SampleRank to parsing, applying several mod-ifications such as the proposal distributions men-tioned earlier.

The benefits of sampling-based learning go be-yond stand-alone parsing. For instance, we can use the framework to correct preprocessing mis-takes in features such as part-of-speech (POS) tags. In this case, we combine the scoring func-tion for trees with a stand-alone tagging model. When proposing a small move, i.e., sampling a head of the word, we can also jointly sample its POS tag from a set of alternatives provided by the tagger. As a result, the selected tag is influ-enced by a broad syntactic context above and be-yond the initial tagging model and is directly opti-mized to improve parsing performance. Our joint parsing-tagging model provides an alternative to the widely-adopted pipeline setup.

We evaluate our method on benchmark multi-lingual dependency corpora. Our method outper-forms the Turbo parser across 14 languages on av-erage by 0.5%. On four languages, we top the best published results. Our method provides a more effective mechanism for handling global features than reranking, outperforming it by 1.3%. In terms of joint parsing and tagging on the CATiB dataset, we nearly bridge (88.38%) the gap between in-dependently predicted (86.95%) and gold tags (88.45%). This is better than the best published results in the 2013 SPMRL shared task (Seddah et al., 2013), including parser ensembles. Earlier works on dependency parsing focused on inference with tractable scoring functions. For in-stance, a scoring function that operates over each single dependency can be optimized using the maximum spanning tree algorithm (McDonald et al., 2005). It was soon realized that using higher order features could be beneficial, even at the cost of using approximate inference and sacrificing op-timality. The first successful approach in this arena was reranking (Collins, 2000; Charniak and John-son, 2005) on constituency parsing. Reranking can be combined with an arbitrary scoring func-tion, and thus can easily incorporate global fea-tures over the entire parse tree. Its main disadvan-tage is that the output parse can only be one of the few parses passed to the reranker.

Recent work has focused on more powerful in-ference mechanisms that consider the full search space (Zhang and McDonald, 2012; Rush and Petrov, 2012; Koo et al., 2010; Huang, 2008). For instance, Nakagawa (2007) deals with tractabil-ity issues by using sampling to approximate marginals. Another example is the dual decompo-sition (DD) framework (Koo et al., 2010; Martins et al., 2011). The idea in DD is to decompose the hard maximization problem into smaller parts that can be efficiently maximized and enforce agree-ment among these via Lagrange multipliers. The method is essentially equivalent to linear program-ming relaxation approaches (Martins et al., 2009; Sontag et al., 2011), and also similar in spirit to ILP approaches (Punyakanok et al., 2004).

A natural approach to approximate global in-ference is via search. For instance, a transition-based parsing system (Zhang and Nivre, 2011) incrementally constructs a parsing structure us-ing greedy beam-search. Other approaches op-erate over full trees and generate a sequence of candidates that successively increase the score (Daum  X  e III et al., 2009; Li et al., 2013; Wick et al., 2011). Our work builds on one such approach  X  SampleRank (Wick et al., 2011), a sampling-based learning algorithm. In SampleR-ank, the parameters are adjusted so as to guide the sequence of candidates closer to the target struc-ture along the search path. The method has been successfully used in sequence labeling and ma-chine translation (Haddow et al., 2011). In this paper, we demonstrate how to adapt the method for parsing with rich scoring functions. In this section, we introduce our novel sampling-based dependency parser which can incorporate arbitrary global features. We begin with the no-tation before addressing the decoding and learning algorithms. Finally, we extend our model to a joint parsing and POS correction task. 3.1 Notations We denote sentences by x and the corresponding dependency trees by y  X  Y ( x ) . Here Y ( x ) is the set of valid (projective or non-projective) depen-dency trees for sentence x . We use x j to refer to the j th word of sentence x , and h j to the head word of x j . A training set of size N is given as a
We parameterize the scoring function s ( x,y ) as where f ( x,y ) is the feature vector associated with tree y for sentence x . We do not make any assump-tions about how the feature function decomposes. In contrast, most state-of-the-art parsers operate under the assumption that the feature function de-composes into a sum of simpler terms. For exam-ple, in the second-order MST parser (McDonald and Pereira, 2006), all the feature terms involve arcs or consecutive siblings. Similarly, parsers based on dual decomposition (Martins et al., 2011; Koo et al., 2010) assume that s ( x,y ) decomposes into a sum of terms where each term can be maxi-mized over y efficiently. 3.2 Decoding The decoding problem consists of finding a valid dependency tree y  X  Y ( x ) that maximizes the score s ( x,y ) =  X   X  f ( x,y ) with parameters  X  . For scoring functions that extend beyond first-order arc preferences, finding the maximizing non-projective tree is known to be NP-hard (McDonald and Pereira, 2006). We find a high scoring tree through sampling, and (later) learn the parameters  X  so as to further guide this process.

Our sampler generates a sequence of depen-dency structures so as to approximate independent samples from The temperature parameter T controls how con-centrated the samples are around the maximum of s ( x,y ) (e.g., see Geman and Geman (1984)). Sampling from target distribution p is typically as hard as (or harder than) that maximizing s ( x,y ) . Figure 1: Sampling-based algorithm for decoding (i.e., approximately maximizing s ( x,y ) ). We follow here a Metropolis-Hastings sampling algorithm (e.g., see Andrieu et al. (2003)) and explore different alternative proposal distributions q ( y 0 | x,y, X ,T ) . The distribution q governs the small steps that are taken in generating a sequence of structures. The target distribution p folds into the procedure by defining the probability that we will accept the proposed move. The general struc-ture of our sampling algorithm is given in Figure 1. 3.2.1 Gibbs Sampling Perhaps the most natural choice of the proposal distribution q is a conditional distribution from p . This is feasible if we restrict the proposed moves to only small changes in the current tree. In our case, we choose a word j randomly, and then sam-ple its head h j according to p with the constraint that we obtain a valid tree (when projective trees are sought, this constraint is also incorporated). For this choice of q , the probability of accepting the new tree (  X  in Figure 1) is identically one. Thus new moves are always accepted. 3.2.2 Exact First-Order Sampling One shortcoming of the Gibbs sampler is that it only changes one variable (arc) at a time. This usually leads to slow mixing, requiring more sam-ples to get close to the parse with maximum score. Ideally, we would change multiple heads in the parse tree simultaneously, and sample those choices from the corresponding conditional distri-bution of p . While in general this is increasingly difficult with more heads, it is indeed tractable if Figure 2: A proposal distribution q ( y 0 | y t ) based on the random walk sampler of Wilson (1996). The function randomHead samples a new head for node u according to the first-order weights given by  X  . the model corresponds to a first-order parser. One such sampling algorithm is the random walk sam-pler of Wilson (1996). It can be used to obtain i.i.d. samples from distributions of the form: where y corresponds to a tree with a spcified root and w ij is the exponential of the first-order score. y is always a valid parse tree if we allow multiple children of the root and do not impose projective constraint. The algorithm in Wilson (1996) iter-ates over all the nodes, and for each node performs a random walk according to the weights w ij until the walk creates a loop or hits a tree. In the first case the algorithm erases the loop and continues the walk. If the walk hits the current tree, the walk path is added to form a new tree with more nodes. This is repeated until all the nodes are included in the tree. It can be shown that this procedure gen-erates i.i.d. trees from p ( y ) .

Since our features do not by design correspond to a first-order parser, we cannot use the Wilson algorithm as it is. Instead we use it as the proposal function and sample a subset of the dependen-cies from the first-order distribution of our model, while fixing the others. In each step we uniformly sample K nodes to update and sample their new Figure 3: An illustration of random walk sam-pler. The index on each edge indicates its order on each walk path. The heads of the red words are sampled while others are fixed. The blue edges represent the current walk path and the black ones are already in the tree. Note that the walk direc-tion is opposite to the dependency direction. (a) shows the original tree before sampling; (b) and (c) show the walk path and how the tree is gener-ated in two steps. The loop not  X  Monday  X  not in (b) is erased. heads using the Wilson algorithm (in the experi-ments we use K = 4 ). Note that blocked Gibbs sampling would be exponential in K , and is thus very slow already at K = 4 . The procedure is de-scribed in Figure 2 with a graphic illustration in Figure 3. 3.3 Training In this section, we describe how to learn the adjustable parameters  X  in the scoring function. The parameters are learned in an on-line fash-ion by successively imposing soft constraints be-tween pairs of dependency structures. We intro-duce both margin constraints and constraints per-taining to successive samples generated along the search path. We demonstrate later that both types of constraints are essential.
 We begin with the standard margin constraints. An ideal scoring function would always rank the gold parse higher than any alternative. Moreover, alternatives that are far from the gold parse should score even lower. As a result, we require that a shorthand Err ( y ) =  X ( y ( i ) ,y ) , where the de-that Equation 4 contains exponentially many con-straints and cannot be enforced jointly for general scoring functions. However, our sampling proce-dure generates a small number of structures along the search path. We enforce only constraints cor-responding to those samples.

The second type of constraints are enforced be-tween successive samples along the search path. To illustrate the idea, consider a parse y that dif-assume that s ( x,y ) is greater than s ( x,y 0 ) without additional encouragement. Thus, we can comple-ment the constraints in Equation 4 with additional pairwise constraints (Wick et al., 2011): where similarly to Equation 4, the difference in scores scales with the differences in errors with re-constraints for y,y 0 that are consecutive samples in the course of the sampling process. These con-straints serve to guide the sampling process de-rived from the scoring function towards the gold parse.

We learn the parameters  X  in an on-line fashion to satisfy the above constraints. This is done via the MIRA algorithm (Crammer and Singer, 2003). Specifically, if the current parameters are  X  t , and we enforce constraint Equation 5 for a particular pair y,y 0 , then we will find  X  t +1 that minimizes
The updates can be calculated in closed form. Fig-ure 4 summarizes the learning algorithm. We re-peatedly generate parses based on the current pa-sive samples to enforce constraints in Equation 4 and Equation 5 one at a time. 3.4 Joint Parsing and POS Correction It is easy to extend our sampling-based parsing framework to joint prediction of parsing and other labels. Specifically, when sampling the new heads, we can also sample the values of other variables at the same time. For instance, we can sample the POS tag, the dependency relation or morphology information. In this work, we investigate a joint Figure 4: SampleRank algorithm for learning. The rejection strategy is as in Figure 1. y t i Equation 6) enforces a ranking constraint between two sampled parses. The second MIRA update en-forces constraints between a sampled parse and the gold parse. In practice several samples are drawn for each sentence in each epoch.
 POS correction scenario in which only the pre-dicted POS tags are provided in the testing phase, while both gold and predicted tags are available for the training set.

We extend our model such that it jointly learns how to predict a parse tree and also correct the pre-dicted POS tags for a better parsing performance. We generate the POS candidate list for each word based on the confusion matrix on the training set. Let c ( t g ,t p ) be the count when the gold tag is t g and the predicted one is t p . For each word w , we first prune out its POS candidates by using the vo-cabulary from the training set. We don X  X  prune anything if w is unseen. Assuming that the pre-dicted tag for w is t p , we further remove those tags t if their counts are smaller than some threshold c ( t,t p ) &lt;  X   X  c ( t p ,t p ) 2 .

After generating the candidate lists for each word, the rest of the extension is rather straight-forward. For each sampling, let H be the set of candidate heads and T be the set of candidate POS tags. The Gibbs sampler will generate a new sam-ple from the space H X T . The other parts of the algorithm remain the same. First-to Third-Order Features The feature templates of first-to third-order features are mainly drawn from previous work on graph-based parsing (McDonald and Pereira, 2006), transition-based parsing (Nivre et al., 2006) and dual decomposition-based parsing (Martins et al., 2011). As shown in Figure 5, the arc is the basic structure for first-order features. We also define features based on consecutive sibling, grandpar-ent, arbitrary sibling, head bigram, grand-sibling and tri-siblings, which are also used in the Turbo parser (Martins et al., 2013). In addition to these first-to third-order structures, we also consider grand-grandparent and sibling-grandchild struc-tures. There are two types of sibling-grandchild structures: (1) inner-sibling when the sibling is between the head and the modifier and (2) outer-sibling for the other cases.
 Global Features We used feature shown promis-ing in prior reranking work Charniak and Johnson (2005), Collins (2000) and Huang (2008).  X  Right Branch This feature enables the model to prefer right or left-branching trees. It counts the number of words on the path from the root node to the right-most non-punctuation word, normalized by the length of the sentence.  X  Coordination In a coordinate structure, the two adjacent conjuncts usually agree with each other on POS tags and their span lengths. For in-stance, in cats and dogs , the conjuncts are both short noun phrases. Therefore, we add differ-ent features to capture POS tag and span length consistency in a coordinate structure.  X  PP Attachment We add features of lexical tu-Figure 6: An example of PP attachment with coor-dination. The arguments should be knife and fork , not and . ples involving the head, the argument and the preposition of prepositional phrases. Generally, this feature can be defined based on an instance of grandparent structure. However, we also han-dle the case of coordination. In this case, the ar-guments should be the conjuncts rather than the coordinator. Figure 6 shows an example.  X  Span Length This feature captures the distribu-tion of the binned span length of each POS tag.
It also includes flags of whether the span reaches the end of the sentence and whether the span is followed by the punctuation.  X  Neighbors The POS tags of the neighboring words to the left and right of each span, together with the binned span length and the POS tag at the span root.  X  Valency We consider valency features for each
POS tag. Specifically, we add two types of va-lency information: (1) the binned number of non-punctuation modifiers and (2) the concate-nated POS string of all those modifiers.  X  Non-projective Arcs A flag indicating if a de-pendency is projective or not (i.e. if it spans a word that does not descend from its head) (Mar-tins et al., 2011). This flag is also combined with the POS tags or the lexical words of the head and the modifier.
 POS Tag Features In the joint POS correction scenario, we also add additional features specifi-cally for POS prediction. The feature templates are inspired by previous feature-rich POS tagging work (Toutanova et al., 2003). However, we are free to add higher order features because we do not rely on dynamic programming decoding. In our work we use feature templates up to 5-gram. Table 1 summarizes all POS tag feature templates. Datasets We evaluate our model on standard benchmark corpora  X  CoNLL 2006 and CoNLL 2008 (Buchholz and Marsi, 2006; Surdeanu et al., 2008)  X  which include dependency treebanks for 14 different languages. Most of these data sets Table 1: POS tag feature templates. t i and w i de-notes the POS tag and the word at the current posi-tion. t i  X  x and t i + x denote the left and right context tags, and similarly for words. contain non-projective dependency trees. We use all sentences in CoNLL datasets during training and testing. We also use the Columbia Arabic Treebank (CATiB) (Marton et al., 2013). CATiB mostly includes projective trees. The trees are an-notated with both gold and predicted versions of POS tags and morphology information. Follow-ing Marton et al. (2013), for this dataset we use 12 core POS tags, word lemmas, determiner fea-tures, rationality features and functional genders and numbers.

Some CATiB sentences exceed 200 tokens. For efficiency, we limit the sentence length to 70 to-kens in training and development sets. However, we do not impose this constraint during testing. We handle long sentences during testing by apply-ing a simple split-merge strategy. We split the sen-tence based on the ending punctuation, predict the parse tree for each segment and group the roots of resulting trees into a single node.
 Evaluation Measures Following standard prac-tice, we use Unlabeled Attachment Score (UAS) as the evaluation metric in all our experiments. We report UAS excluding punctuation on CoNLL datasets, following Martins et al. (2013). For the CATiB dataset, we report UAS including punctu-ation in order to be consistent with the published results in the 2013 SPMRL shared task (Seddah et al., 2013).
 Baselines We compare our model with the Turbo parser and the MST parser. For the Turbo parser, we directly compare with the recent published re-sults in (Martins et al., 2013). For the MST parser, we train a second-order non-projective model us-
We also compare our model against a discrim-inative reranker. The reranker operates over the use a 10-fold cross-validation to generate candi-date lists for training. We then train the reranker by running 10 epochs of cost-augmented MIRA. The reranker uses the same features as our model, along with the tree scores obtained from the MST parser (which is a standard practice in reranking). Experimental Details Following Koo and Collins (2010), we always first train a first-order pruner. For each word x i , we prune away the incoming dependencies  X  h i ,x i  X  with probability less than 0.005 times the probability of the most likely head, and limit the number of candidate heads up to 30. This gives a 99% pruning recall on the CATiB development set. The first-order model is also trained using the algorithm in Figure 4. Af-ter pruning, we tune the regularization parameter C = { 0 . 1 , 0 . 01 , 0 . 001 } on development sets for different languages. Because the CoNLL datasets do not have a standard development set, we ran-domly select a held out of 200 sentences from the training set. We also pick the training epochs from { 50 , 100 , 150 } which gives the best performance on the development set for each language. After tuning, the model is trained on the full training set with the selected parameters.

We apply the Random Walk-based sampling method (see Section 3.2.2) for the standard de-pendency parsing task. However, for the joint parsing and POS correction on the CATiB dataset we do not use the Random Walk method because the first-order features in normal parsing are no longer first-order when POS tags are also vari-ables. Therefore, the first-order distribution is not well-defined and we only employ Gibbs sampling for simplicity. On the CATiB dataset, we restrict the sample trees to always be projective as de-scribed in Section 3.2.1. However, we do not im-pose this constraint for the CoNLL datasets. Comparison with State-of-the-art Parsers Ta-ble 2 summarizes the performance of our model and of the baselines. We first compare our model to the Turbo parser using the Turbo parser fea-ture set. This is meant to test how our learning and inference methods compare to a dual decom-position approach. The first column in Table 2 shows UAS of the discriminative reranker. shows the result for our model with an average of 88.87%, and the third column shows the results for the Turbo parser with an average of 88.72%. This suggests that our learning and inference pro-cedures are as effective as the dual decomposition method in the Turbo parser.

Next, we add global features that are not used by the Turbo parser. The performance of our model is shown in the second column with an average of 89.23%. It outperforms the Turbo parser by 0.5% and achieves the best reported performance on four languages. Moreover, our model also outper-forms the 88.80% average UAS reported in Mar-tins et al. (2011), which is the top performing sin-gle parsing system (to the best of our knowledge). Comparison with Reranking As column 6 of Ta-ble 2 shows, our model outperforms the reranker mance gap between the reranker and our model is the small number of candidates considered by the reranker. To test this hypothesis, we performed experiments with top-500 list for a subset of lan-list size does not change the relative performance of the reranker and our model.
 Joint Parsing and POS Correction Table 3 shows the results of joint parsing and POS cor-rection on the CATiB dataset, for our model and state-of-the-art systems. As the upper part of the table shows, the parser with corrected tags reaches 88.38% compared to the accuracy of 88.46% on the gold tags. This is a substantial increase from the parser that uses predicted tags (86.95%).
To put these numbers into perspective, the bot-tom part of Table 3 shows the accuracy of the best systems from the 2013 SPMRL shared task on Arabic parsing using predicted information (Sed-dah et al., 2013). Our system not only out-performs the best single system (Bj  X  orkelund et al., 2013) by 1.4%, but it also tops the ensem-ble system that combines three powerful parsers: the Mate parser (Bohnet, 2010), the Easy-First parser (Goldberg and Elhadad, 2010) and the Turbo parser (Martins et al., 2013) Impact of Sampling Methods We compare two sampling methods introduced in Section 3.2 with respect to their decoding efficiency. Specifically, we measure the score of the retrieved trees in test-ing as a function of the decoding speed, measured by the number of tokens per second. We change the temperature update rate c in order to decode with different speed. In Figure 7 we show the cor-responding curves for two languages: Arabic and Chinese. We select these two languages as they correspond to two extremes in sentence length: Arabic has the longest sentences on average, while Chinese has the shortest ones. For both languages, the tree score improves over time. Given sufficient time, both sampling methods achieve the same score. However, the Random Walk-based sam-pler performs better when the quality is traded for speed. This result is to be expected given that each Table 3: Results for parsing and corrective tagging on the CATiB dataset. The upper part shows UAS of our model with gold/predicted information or POS correction. Bottom part shows UAS of the best systems in the SPMRL shared task. IMS-Single (Bj  X  orkelund et al., 2013) is the best single parsing system, while IMS-Ensemble (Bj  X  orkelund et al., 2013) is the best ensemble parsing system. We also show results for CADIM (Marton et al., 2013), the second best system, because we use their predicted features. Figure 7: Total score of the predicted test trees as a function of the decoding speed, measured in the number of tokens per second. iteration of this sampler makes multiple changes to the tree, in contrast to a single-edge change of Gibbs sampler.
 The Effect of Constraints in Learning Our train-ing method updates parameters to satisfy the pair-wise constraints between (1) subsequent samples on the sampling path and (2) selected samples and the ground truth. Figure 8 shows that applying both types of constraints is consistently better than using either of them alone. Moreover, these re-sults demonstrate that comparison between subse-quent samples is more important than comparison against the gold tree.
 Decoding Speed Our sampling-based parser is an Figure 8: UAS on four languages when train-ing with different constraints.  X  X eighbor X  corre-sponds to pairwise constraints between subsequent samples,  X  X old X  represents constraints between a single sample and the ground truth,  X  X oth X  means applying both types of constraints. anytime algorithm, and therefore its running time can be traded for performance. Figure 7 illustrates this trade-off. In the experiments reported above, we chose a conservative cooling rate and contin-ued to sample until the score no longer changed. The parser still managed to process all the datasets in a reasonable time. For example, the time that it took to decode all the test sentences in Chinese and Arabic were 3min and 15min, respectively. Our current implementation is in Java and can be fur-ther optimized for speed. This paper demonstrates the power of combining a simple inference procedure with a highly expres-sive scoring function. Our model achieves the best results on the standard dependency parsing bench-mark, outperforming parsing methods with elabo-rate inference procedures. In addition, this frame-work provides simple and effective means for joint parsing and corrective tagging.
 This research is developed in collaboration with the Arabic Language Technologies (ALT) group at Qatar Computing Research Institute (QCRI) within the I YAS project. The authors acknowledge the support of the MURI program (W911NF-10-1-0533, the DARPA BOLT program and the US-Israel Binational Science Foundation (BSF, Grant No 2012330). We thank the MIT NLP group and the ACL reviewers for their comments.
