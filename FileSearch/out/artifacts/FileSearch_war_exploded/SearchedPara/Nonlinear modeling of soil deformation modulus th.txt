 1. Introduction when subjected to loading. Elastic and plastic behaviors are considered as soil recoverable and irrecoverable deformations, respectively ( Karmakar et al., 2004 ). To analyze the elasto-plastic behavior of soils, stress X  X train (load X  X ettlement) curves of labora-tory or field test results can be used ( Briaud, 2001 ; Briaud et al., 2006 ; Mollahasani et al., 2011 ). Fig. 1 presents a typical stress-strain curve. Various soil moduli, including secant ( E p can be defined referring to this figure. E p can be calculated from the secant slope ( S p ) corresponding to the slope from the origin (O) to L 1 .
 laboratory or field methods. The field test results have been found to be more reliable than those of the laboratory methods ( Reznik, 1995 ; Murthy, 2008 ; Mollahasani et al., 2011 ). The field tests are very sensitive and costly. Furthermore, it is not always possible to conduct such tests. These limitations imply the necessity of conducting more research on the development of prediction models for the deformation moduli through the inter-pretation of the field test results. In this context, Reznik (1995) proposed prediction equations describing the dependence of the deformation moduli of collapsible soils obtained from plate load tests on void ratio and moisture content. Recently, Mollahasani et al. (2011) proposed empirical models to predict the plate load soil moduli using gene expression programming. Among the field tests, pressuremeter test is one of the well-known tests for determining the soil deformation modulus. Despite the high reliability of the pressuremeter test results ( Murthy, 2008 ), investigations on deriving prediction models for the pressure-meter soil modulus are conspicuous by their absence.

The main purpose of this paper is to investigate the potential of linear genetic programming (LGP) technique to obtain new empiri-cal relationships for determining the pressuremeter soil secant modulus. Various predictor variables employed for the analysis were coarse and fine-grained contents, grains size characteristics, liquid limit, moisture content, and soil unit weight. A database of consisting of 106 pressuremeter test results was used for the analysis. The paper is organized as follows: Section 2 presents a brief literature review. Section 3 provides descriptions of the methodology used for the formulation of the soil modulus. Section 4 outlines the model development using LGP, experimental study and reviews the results. The detailed performance analysis of the proposed model is discussed in Section 5 . The results of the sensitivity and parametric analyses are given in Sections 6 and 7 , respectively. Finally, concluding remarks are outlined in Section 8 . 2. Literature review
Numerous computer-aided modeling tools have been proposed by extending developments in computational software and hard-ware. Genetic programming (GP; Koza, 1992 ) is a new approach for behavioral modeling of engineerin g problems. GP is a specialization of genetic algorithms (GA) where the solutions are computer programs rather than binary strings. One of the main features of GP is its ability to generate greatly simplified prediction equations without assuming prior form of the existing relationship ( Alavi et al., 2011 ). For the last decade, GA, GP, variants of GP, and other well-known soft computing techniques such as artificial neural networks (ANNs) and support vector machines (SVM) have been pronounced as alternative methods for simulating the behavior of engineering problems ( Cheng et al., 2002 ; Xie et al., 2006 ; Lin et al., 2006 ; Chau, 2006 ; Javadi et al., 2006 ; Rezania and Javadi, 2007 ; Muttil and Chau, et al., 2011 ; Rezania et al., 2011 ; Gandomi et al., 2011a ; Gandomi and Alavi 2011 ). LGP ( Brameier and Banzhaf, 2007 )isanewsubset of GP. LGP operates on programs that are represented as linear sequences of instructions of an imperative programming language ( Brameier and Banzhaf, 2001 , 2007 ). In contrast with traditional GP and other soft computing techniqu es, applications of LGP in the field of civil engineering are totally new and original ( Guven, 2009 ; Guven et al., 2009 ; Gandomi et al., 2010 ; Alavi and Gandomi, 2011 ). 3. Linear genetic programming
GP creates computer programs to solve a problem using the principle of Darwinian natural selection ( Koza, 1992 ). Most of the genetic operators used in GA can also be implemented in GP with minor changes. The main difference between GP and GA is the representation of the solution. GA creates a string of numbers that represent the solution. The GP solutions are computer programs represented as tree structures and expressed in a functional programming language (such as LISP; Koza, 1992 ; Alavi et al., 2011 ). In other words, the programs (individuals) evolved by GP are parse trees that can vary in length throughout the run rather than fixed-length binary strings. GP gives the basic structure of the approximation model together with the values of its para-meters ( Javadi and Rezania, 2009 ). The fitness of each program in the population is evaluated using a fitness function. Thus, the fitness function is the objective function GP aims to optimize ( Gandomi et al., 2011b ).
 In addition to classical tree-based GP, there are other types of
GP where programs are represented in different ways. These are linear and graph-based GP ( Banzhaf et al., 1998 ). Recently, several linear variants of GP have been developed such as linear genetic programming (LGP) and multi-expression programming (MEP).
The linear variants of GP make a clear distinction between the genotype and phenotype of an individual. In these variants, individuals are represented as linear strings ( Oltean and Grosan, 2003 ). There are some main reasons for using linear GP. Computers do not naturally run tree-shaped programs. Therefore, slow inter-preters have to be used as a part of classical tree-based GP.
Conversely, by evolving the binary bit patterns, the use of an expensive interpreter is avoided. Consequently, a linear GP system can run several orders of magnitude faster than comparable interpreting systems. The enhanced speed of the linear variants of GP (e.g., LGP and MEP) permits many runs to be conducted in realistic timeframes. This leads to derivation of consistent and high-precision models with little customization ( Francone and Deschaine, 2004 ; Poli et al., 2007 ; Gandomi et al., 2011b ).
LGP is a new subset of GP with a linear structure similar to the deoxyribonucleic acid (DNA) molecule in biological genomes. Similar to classical GP, the major difference between LGP and
GA pertains to the representation of the solution. A comparison of classical GP with LGP reveals that LGP substitutes expressions of a functional programming language (such as LISP) in GP by pro-grams of an imperative language (such as C/C  X  X  ; Brameier and
Banzhaf, 2001 , 2007 ). Fig. 2 presents a comparison of structure of a program evolved by LGP and classical GP. Furthermore, this figure demonstrates a typical conversion of the evolved programs into a functional representation ( y  X  f [0]  X  ( v [0]/1)/ v [1]). The LGP program is converted into a functional form by successive replacements of the variables starting with the last effective instruction ( Oltean and Grosan, 2003 ). The translation of the program generated by classical GP into explicit form can be obtained by reading the tree structure from left to right. As shown in Fig. 2 a, a linear genetic program can be seen as a data flow graph generated by multiple usage of register content. In classical tree-based GP, the data flow is more rigidly determined by the tree structure of the program ( Brameier and Banzhaf, 2001 ; Gandomi et al., 2011b ).
 variable-length sequence of simple C instructions. The instruction set or function set of LGP contains arithmetic operations, condi-tional branches, and function calls. The terminal set of the system is composed of variables and constants. The instructions are restricted to operations that accept a minimum number of constants or memory variables, called registers ( r ), and assign the result to a destination register, e.g., r 0 :  X  r 1  X  1. A part of a linear genetic program in C code is represented in Fig. 3 . In this figure, register r [0] holds the final program output ( Gandomi et al., 2010 ).
 run ( Brameier and Banzhaf, 2007 ; Gandomi et al., 2010 ):
III. Transforming the winner programs. After that, two winner
IV. Replacing the loser programs in the tournament with the strates a two-point linear crossover used in LGP for recombining two tournament winners. As it is seen, a segment of random position and arbitrary length is selected in each of the two parents and exchanged. If one of the two children would exceed the maximum length, crossover is aborted and restarted with exchanging equally sized segments ( Brameier and Banzhaf, 2001 ;
Gandomi et al., 2011b ). The mutation operation occurs on a single instruction. Two commonly used types of standard LGP mutations are micro-and macro-mutation. The micro-mutation changes an operand or an operator of an instruction. The macro-mutation operation inserts or deletes a random instruction ( Brameier and
Banzhaf, 2001 ; Gandomi et al., 2011b ). 4. Numerical simulation of soil deformation modulus particle size distribution, dry unit weight, moisture content, and plasticity on its mechanical properties is well understood ( Briaud, 2001 ; Reznik, 2007 ; Mollahasani et al., 2011 ). For instance, dry unit weight is an indicator of compressibility of a soil. If the soil particles are closely packed, the modulus tends to be high.
The moisture content also has a major influence on the soil modulus. At very low water contents, the compaction of coarse-grained soils is not as efficient as it is at higher moisture con-tents since the lubrication effect of water is not sufficient. In this case, very low moisture content results in low modulus ( Briaud, 2001 ; Mollahasani et al., 2011 ). Herein, the LGP approach was employed to develop a new prediction equation for the soil secant modulus ( E p ). The most important factors representing the behavior of the soil deformation modulus were detected on the basis of a literature review ( Briaud, 2001 ; Briaud et al., 2006 ;
Reznik, 1995 , 2007 ; Mollahasani et al., 2011 ). E p (kg/cm considered to be a function of the following parameters:
E  X  f FC , CC , D 10 , D 30 , D 60 , C u , C c , LL , o , g , g where FC (%): Fine-grained content, CC (%): Coarse-grained content,
D 10 (mm): Grain size for which 10 percentage of the sample is finer,
D 30 (mm): Grain size for which 30 percentage of the sample is finer,
D 60 (mm): Grain size for which 60 percentage of the sample is finer, C u : Coefficient of uniformity ( D 60 / D 10 ), C c : Coefficient of curvature (( D 30 ) 2 /( D 60 D 10 )),
LL (%): Liquid limit, o (%): Moisture content, g (kN/m 3 ): Soil unit weight, g d (kN/m3): Soil dry unit weight.

FC, CC, D 10 , D 30 , D 60 , C u , C c , and LL represent the intrinsic soil properties. o , g d , and g carry information on the state of the soil and its compressibility and previous history. Over-consolidation ratio (OCR) could have been included in the analysis. However, it was not included herein as it should be obtained from time-consuming laboratory tests. On the other hand, g and g d can be easily calculated for a soil ( Mollahasani et al., 2011 ). 4.1. Experimental study and test results
The experimental program consisted of laboratory and field tests. The field activities included the pressuremeter tests. Var-ious aspects of the pressuremeter test, including test setup and test procedure, are described below. For the laboratory testing purposes, several disturbed and undisturbed soil samples were Parent 1 Parent 2 Child 1 Child 2 of its structural properties are not representatives of in-situ conditions. In other words, the structure of a disturbed soil is sufficiently changed during the sampling process. Otherwise, the soil sample is called  X  X  X ndisturbed X  X . The undisturbed soil samples are obtained by methods in which disturbance to the sample is minimized. After extracting, the cores were carefully taken to the geotechnical laboratory and maintained in a wet chamber to avoid loosing of water content. 4.1.1. Basic geotechnical characterization tests
Extensive geotechnical laboratory tests were carried out for determining the physical and plastic characteristics of soil. The tests included measuring the water (or moisture) content ( o ), defined as the ratio between the mass of water and the mass of dry soil; natural unit weight ( g ), which is obtained by measuring the relationship between the weight and volume of an undis-turbed soil sample, Atterberg limits (plastic and liquid limit), specific gravity, and grain size distribution. Fig. 5 illustrates the range of grain size distribution of the samples tested. Different soil types tested were silty clay with sand (CL X  X L), gravelly lean clay with sand (CL), silty, clayey sand (SC X  X M), gravelly silt with sand (ML), and silty gravel with sand (GM), silty sand (SM), and silty, clayey gravel (GC X  X M). 4.1.2. Pressuremeter tests
The pressuremeter test is a traditional in-situ method for estimating the stress X  X train response of the soil. Within the scope of this study, 106 pressuremeter tests were performed to inves-tigate the pressure X  X olume deformation characteristics of soils at some locations in Khorasan Province, Iran. These tests were conducted by Menard pressuremeter. This apparatus consists of three parts, namely probe, control unit and tubing. The pressure-meter tests conducted in the present study followed the proce-dures described in ASTM D4719-87 (1987) . The following technique was employed to perform the pressuremeter tests. Before beginning the pressuremeter tests, the pressuremeter was calibrated for pressure loss and volume loss. The pressure loss, P c , occurs due to the rigidity of the probe membranes. For determining the P c , the probe was placed in the open air and inflated step by step with increasing the pressure. Volume loss, V occurs due to the expansion of the tubing system and the compressibility of any part of the testing equipment. V c determined by putting the probe in a steel tube and inflating the tube by application of water pressure. Diameter of the probe used in this study was 58 mm and the diameters of the holes drilled for conducting the tests were 101, 116, and 125 mm. The probe was lowered to the hole soon after boring to the desired elevation. Then the test was started by opening the valves for admitting water and gas to the measuring cell and guard cells, respectively.
The pressure within the measuring cell was held constant for approximately 60 s. Then, the increase in volume required to maintain the constant pressure was recorded. Steps were con-tinued until yielding in the soil became disproportionate. Finally, a corrected pressure X  X olume ( P  X  V ) curve was plotted. The cor-rected pressure ( P ) and volume ( V ) were obtained using the following equations:
P  X  P r  X  P w P c  X  2  X 
V  X  V r V c  X  3  X  where P r and V r are the actual pressure and volume read from the control unit, respectively. P c and V c are the pressure and volume loss, respectively. P w  X  g w H w in which H w is the difference in head between the center of the measuring cell in the bore hole and the pressure gage in central unit, and g w is the unit weight of water. A typical corrected pressuremeter curve is shown in Fig. 6 .
The initial part of the curve (OA) represents the recompression of the relaxed soil around the borehole. At the end of this part, P the pressure which corresponds to the volume V 0 at the start of the straight line where the yielded wall of the hole is pushed to its original position. The second part (AB) indicates the elastic deformation of the soil. It is also called the pseudo-elastic phase of the test. P f is known as the creep pressure. The curve BC marks the plastic phase that becomes eventually asymptotic at limit pressure P I at which the soil is deemed to have failed. The formulation used for determining the pressuremeter modulus is as follow ( Murthy, 2008 ): E  X  2  X  1  X  u  X  X  V o  X  V m  X  where
E p (kPa): Pressuremeter modulus, n : Poisson ration,
V : Volume of the uninflated probe at ground surface,
D P : Corrected pressure increase in the center part of the straight line portion of the pressure X  X olume curve,
D V : Corrected volume increase in the center part of the straight line portion of the pressure X  X olume curve, corre-sponding to D P pressure increase,
V m : Corrected volume reading in the center portion of the D V volume increase.

The complete list of the data is presented in Table 1 . The information cited in this table includes FC, D 10 , D 30 , D o , and g d . E p is the measured soil deformation modulus. A major part of the database comprises the test results on fine-grained soil samples. The descriptive statistics of the test results is given in
Table 2 . To visualize the distribution of the samples, the data are presented by frequency histograms ( Fig. 7 ). 4.2. Data preprocessing into learning, validation and testing subsets. The learning data were used for the training process (genetic evolution). The validation data were used to specify the generalization capability of the evolved programs on data they did not train on (model selection). In other words, the learning and validation data sets were used to select the best evolved programs and included in the training process. Thus, they were categorized into one group referred to as  X  X  X raining data X  X . The testing data were finally used to measure the performance of the models obtained by LGP on data that played no role in building the models ( Gandomi et al., 2011b ). A trial study was conducted to find a consistent data division. The selection was such that the statistical properties (e.g. mean and standard deviation) of the training and testing subsets were similar. Out of the 106 data, 79 data were used as the training data (70 sets as the learning data and 9 sets as the validation data). The remaining 27 data sets were taken for the testing of the generalization capability of the models. 4.3. Parameters for measuring performance models were correlation coefficient ( R ), root mean squared error ( RMSE ) and mean absolute error ( MAE ). These parameters were calculated using the following equations: R  X 
RMSE  X  MAE  X  1 n where h i and t i are the actual and predicted output values for the i th output, respectively. h i and t i are, respectively, the average of the actual and predicted outputs, and n is the number of samples. 4.4. LGP-based prediction model for soil deformation modulus prediction model relating E p to FC, CC, D 10 , D 30 , D 60 g ,and g d . GP and its variants such as LGP are able to find the global solution without difficulties using the crossover and mutation operations ( Galvan-Lopez et al., 2008 ). This ability to find the very best, or global solution, cannot be guaranteed mathematically as nature does not guarantee perfection either. In this study, several runs were conducted to obtain a parameterization of LGP that provided enough robustness and generalization to solve the pro-blem. The LGP parameters were changed for different runs to find the global solution. The parameters were selected on the basis of both previously suggested values ( Francone, 2001 ; Baykasoglu et al., 2008 ; Gandomi et al., 2010 ; Alavi and Gandomi, 2011 )andmaking several preliminary runs and observing the performance behavior.
Three optimal levels were set for the population size (500, 1500, and 3000) and two optimal levels were considered for the crossover rate (50% and 95%) and mutation rate (5 0% and 90%). The success of the
LGP algorithm usually increases with increasing the initial and maximum program size parameters. In this case, the complexity of the evolved functions increases and the speed of the algorithm decreases. The initial and maximum program sizes were, respec-tively, set to optimal values of 80 and 256 bytes as tradeoffs between the running time and the complexity of the evolved solutions. The number of demes was set to 20. This parameter is related to the way that the population of programs is divided. Note that demes are semi-isolated subpopulations that evolution pro-ceeds faster in them in comparison to a single population of equal size ( Brameier and Banzhaf, 2007 ). In this study, four basic arith-metic operators (  X  , , , /) and basic mathematical functions ( O , sin, cos) were utilized to get the optimum LGP models. There are 3 (optimal population size levels) 2 (optimal crossover rate levels) 2 (optimal mutation rate levels)  X  12 different combina-tions of the parameters of the LGP algorithm. All of these parameter combinations were tested and 5 replications for each were carried out. Therefore, the overall number of runs was equal to 12 5  X  60 for each of the input combinations. A fairly large number of tournaments (900,000) were tested on each run to find models with minimum error. For each case, the program was run until there was no longer significant improvement in the performance of the models or the run terminated automatically. Each run was observed while in progress for overfitting. For this aim, situations were checked in which the fitness of the samples for the learning of
LGP was negatively correlated with the fitness on the validation data sets. To evaluate the fitness of the evolved program, the average of the squared raw errors was used. For the runs showing signs of overfitting, the LGP parameters were progressively changed so as to reduce the computational powe r available to the LGP algorithm until the observed overfitting was minimized. The resulting run was then accepted as the production run. For the LGP-based analysis, the Discipulus software ( Conrads et al., 2004 ) was used.
An extensive trial study was performed to select the most relevant input parameters for the LGP models. Several LGP models were developed using different combinations of the input para-meters. The best model was chosen on the basis of a multi-objective strategy as follows: i. Finding the simplest model, although this was not a predomi-nant factor. This item was considered for the cases where the models evolved by LGP had the same input variables and a similar performance. In such cases, the structurally simpler model was kept as the optimal one. ii. Providing the best fitness value on the training (learning and validation) set of data.

The best LGP model for predicting E p was built using FC, C and g d . The best LGP program obtained at the end of training in C is given in Appendix A . This program can be run in
C  X  X  environment. The resulting code may be linked to the optimizer and compiled or it may be called from the optimization routines ( Deschaine, 2000 ). To facilitate the use of the derived code, it was converted into a functional representation following a typical procedure shown in Fig. 2 . The optimal LGP-based formulation of E p is as follows: E
The population size, crossover rate, and maximum number of tournaments for the optimal run were equal to 1500, 95% and 780,000, respectively. This run took 6 min and 33 s on a Pentium 4 personal computer with 3.00 GHz of processor speed and 1 Gb of memory. The above model was selected among a total of 504,138,427 programs evolved and evaluated by the LGP method during the conducted runs.
Fig. 8 shows a comparison between the experimental and predicted E p values.
 Frequency
Frequency
Frequency 5. Discussion of model validity following criteria for judging performance of a model: if a model gives 9 R 9 o 0.2, a weak correlation exists between the predicted and measured values.

In all cases, the error values (e.g., RMSE and MAE) should be at the minimum. It can be observed from Fig. 8 that the LGP model with high R and low RMSE and MAE values is able to predict the target values with an acceptable degree of accuracy. The perfor-mance of the model on the training and testing data suggests that it has both good predictive ability and generalization performance. The reliability of the models created by LGP is notably dependant on the amount of data used for the training process ( Alavi et al., 2011 ). In this context, Frank and Todeschini (1994) argue that the minimum ratio of the number of objects over the number of selected variables for model acceptability is 3. Also, they suggest that considering a higher ratio equal to 5 is safer. In the present study, this ratio is higher and is equal to 106/4  X  26.5.
No rational model to predict soil secant modulus has been developed yet that would encom pass the influencing variables considered in this study. Therefore, it was not possible to conduct a comparative study between the results obtained herein and those provided by any existing models. Instead, new criteria recommended by Golbraikh and Tropsha (2002) were checked for external validation of the models on the testing data sets. It is suggested that at least one slope of regression lines ( k or k 0 ) through the origin should be close to 1. k is the slope of the regression line in plot of actual ( h against h i values ( Golbraikh and Tropsha, 2002 ). Also, the perfor-mance indexes of m and n should be lower than 0.1. Either the squared correlation coefficient (t hrough the origin) between pre-dicted and experimental values (Ro 2 ), or the coefficient between experimental and predicted values (Ro 0 2 ) should be close to 1. The considered validation criteria and the relevant results obtained by the models are presented in Table 3 .Asitisseen,thederivedmodel satisfies the required conditions. The validation phase ensures the derived LGP model is strongly valid and it is not established by chance. Note that the proposed model was developed using the basic soil physical properties (FC, C u , o , g d ) and, therefore, can easily be used for prediction purposes via hand calculations.

Furthermore, the predictions made by the LGP model were compared with those provided by an ANN model developed in this study. The ANN model was established using the training and testing data considered for the LGP-based modeling process. The ANN architecture that gave the best results for the prediction of the pressuremeter soil modulus was found to contain: One invariant input layer, with 4 (FC, C u , o , and g d ) arguments;
One invariant output layer with 1 node providing the value of E One hidden layer having 4 ( m  X  4) nodes.
 The results obtained by the LGP and ANN models are presented in Table 4 . It can be observed from this table that the ANN model outperforms the LGP model. GP and its branches (e.g., LGP) directly learn from raw experimental data presented to them in order to extract the subtle functional relati onships among the data. This is the same task followed by ANNs and other soft computing techniques. Although LGP does not provide better results than ANN for the investigated problem, it possesses a notable advantage over ANN. LGP has a great capability in generating a transparent and structured representation of the system being studied. Due to the large complex-ity of the network structure, ANNs d o not give a transparent function relating the inputs to the correspon ding outputs. Contrary to the LGP and ANN methods, most conventional methods (like regression and finiteelementmethod)needpriorknowledgeaboutthenatureofthe relationships among the data. Classical constitutive models rely on assuming the structure of the model in advance, which may be suboptimal. On the other hand, the best solutions generated by the
GP-based techniques are determined after controlling numerous preliminary models, even millions of linear and nonlinear models.
Thus, they can efficiently consider the interactions between the dependent and indepe ndent variables ( Alavi et al., 2011 ). It is worth mentioning that the LGP algorithm is parameter sensitive, especially when difficult experimental trai ning data sets like the one used in this paper are employed. The perf ormanceofLGPcanbeimprovedby using any form of optimally controlling the parameters of the run ( Dimopoulos and Zalzala, 2001 ). In this context, further research can be focused on hybridizing LGP wit h other optimization algorithms such as GAs, Simulated Annealing, Ant Colony, or Tabu Search.
However, one of the main aims of introducing the GP-based approaches into the design processes is better handling of the to have some initial estimates of the outcome before performing any extensive laboratory or field work. The LGP approach employed in this research is based on the data alone to determine the structure and parameters of the model. Thus, the derived model is considered to be mostly valid for use in preliminary design stages and should cautiously be used for final decision-making. The proposed LGP model is suggested to be used to check the general validity of the laboratory test results. Further, this solution is a good alternative to determine the soil modulus when testing is not possible. 6. Sensitivity analysis
The contributions of the final predictor variables (FC, C in the best LGP model were evaluated through a sensitivity analysis. These variables were identified after developing and controlling several models with different combinations of the soil physical properties. To perform the sensitivity analysis, frequency values of the input parameters were obtained. A frequency value equal to 100% for an input indicates that this variable has been appeared in 100% of the best thirty programs evolved by LGP. This is a common approach in the GP-based analyses ( Gandomi et al., 2011c ). The frequency values of the predictor variables are presented in Fig. 9 . In addition to frequencies, this figure presents the average impact of removing all instances of each input from the best thirty programs of the project. A value of 100% represents the largest impact value possible. The greater the value, the more impact removal had. It should be noted that the frequency and average impact values do not necessarily reflect the contributions of the final predictor variables in the best model presented herein (Eq. (8)). It can be observed from Fig. 9 that the contributions of all of the final predictor variables to the prediction of E
According to this figure, E p is less sensitive to C u than other soil properties. As it is seen, the contributions of FC, o and g prediction of E p are fairly similar. However, the average impact of removing FC is higher than other predictor variables.
 7. Parametric analysis parametric analysis was performed in this study. The parametric analysis investigates the response of the predicted soil deforma-tion modulus from the LGP model to a set of predictor variables.
The robustness of a design equation is determined by examining how well the predicted target values agree with the underlying physical behavior of the investigated system ( Kuo et al., 2009 ).
Fig. 10 presents the tendency of the E p predictions to the variations of the soil physical properties, i.e., FC, C u with increasing FC and o . It can also be observed that E tinuously increases with increasing C u and g d .Theparametric analysis results for CC, LL, and g in the proposed models are generally expected cases from a geo technical engineering viewpoint ( Murthy, 2008 ). The results confirm that the proposed design equation is capable of capturing th e important characteristics of the soil deformation modulus. 8. Conclusion
This paper presents a new appro ach to derive new prediction equations for the soil deformation moduli utilizing the LGP paradigm.
The proposed relationship was deve loped based on several pressure-meter tests performed in this research. The developed model gives precise estimations of the E p values. The validation phases confirm the accuracy of the model for its general application to the soil moduli estimation. The developed model is mostly suitable for fine-grained soils with physical properties similar to the soil samples used in this study. Although LGP does not outperform ANN, it provides a simple and straightforward equation that can readily be employed for pre-design purposes or may be used as a quick check on solutions developed by more in-depth deter ministic analyses. The optimal model takes into account the role of several important parameters representing the soil moduli behavior. The results indicate that o and efficiently represent the initial state and consolidation history of the soil for determining the soil moduli. The predictive capabilities of the derived model are limited to the range of the data used in the training process. To deal with this limitation, the LGP model can be easily retrained and improved to make more accurate predictions for
E (kg/cm )
E (kg/cm ) conditions. The constitutive model derived using LGP is basically different from the conventional constitutive models based on first principles (e.g., elasticity and plasticity theories). One of the distinc-tive features of the LGP-based model is that it is based on the experimental data rather than on assumptions made in developing the conventional models. The present study shows that LGP is very practical for nonlinear system modeling. However, the underlying assumption that the input parameters are reliable is not always the case. Fuzzy logic can provide a systematic method to deal with imprecise and incomplete information. Hence, the process of devel-oping hybrid fuzzy-LGP prediction models can be a suitable topic for further studies.
 Appendix A The optimum LGP program for the prediction of E p .

The following LGP programs can be run in the Discipulus interactive evaluator mode or can be compiled in C  X  X  environ-ment. (Note: v [0], y , v [3] represent FC, C u , o , and g tively. f [0] holds the output.) float DiscipulusCFunction(float v [0], v [1], v [2], v [3]) {long double f [8]; long double tmp  X  0; int cflag  X  0; f [0]  X  f [1]  X  f [2]  X  f [3]  X  f [4]  X  f [5]  X  f [6]  X  f [7]  X  0; L0: f 0  X  X  v [1]; L1: f 0  X  sqrt( f 0); L2: f 0  X  X  v [0]; L3: f 0 *  X  6; L4: f 0  X  X  f 0; L5: f 0/  X  v 3; L6: f 0  X  7; L7: f 0/  X  v [3]; L8: f 0 *  X  f 0; L9: f 0  X  X  f 0; L10: f [0]/  X  v [2]; L11: f [0] *  X  6; L12: f [0]  X  X  f [0]; L13: f [0]/  X  v [3]; L14: f [0]  X  2; L15: f 0  X  7; L16: f 0/  X  v [0]; L17: f 0 *  X  6; L18: f 0  X  X  f 0; L19: f 0  X  7; L20: f 0 *  X  v 3; L21: f 0  X  7; L22: f 0  X  v [0]; L23: f 0  X  X  f 0; L24: f 0  X  X  f 0;
L25: return f [0];} References
