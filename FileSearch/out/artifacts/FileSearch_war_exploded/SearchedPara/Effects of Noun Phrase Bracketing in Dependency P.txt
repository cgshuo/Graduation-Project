 Noun phrase structure in the Penn Treebank has up until recently been only considered, due to under-specification, a flat structure. Due to the annota-tion and work of Vadas and Curran (2007a; 2007b; 2008), we are now able to create Natural Language Processing (NLP) systems that take advantage of the internal structure of noun phrases in the Penn Tree-bank. This extra internal structure introduces ad-ditional complications in NLP applications such as parsing.
 Dependency parsing has been a prime focus of NLP research of late due to its ability to help parse languages with a free word order. Dependency pars-ing has been shown to improve NLP systems in certain languages and in many cases is considered the state of the art in the field. Dependency pars-ing made many improvements due to the CoNLL X shared task (Buchholz and Marsi, 2006). However, in most cases, these systems were trained with a flat noun phrase structure in the Penn Treebank. Vadas X  internal noun phrase structure has been used in pre-vious work on constituent parsing using Collin X  X  parser (Vadas and Curran, 2007c), but has yet to be analyzed for its effects on dependency parsing.
Parsing is very early in the NLP pipeline. There-fore, improvements in parsing output could have an improvement on other areas of NLP in many cases, such as Machine Translation. At the same time, any errors in parsing will tend to propagate down the NLP pipeline. One would expect parsing accuracy to be reduced when the complexity of the parse is in-creased, such as adding noun phrase structure. But, for a machine translation system that is reliant on parsing, the new noun phrase structure, even with re-duced parser accuracy, may yield improvements due to a more detailed grammatical structure. This is particularly of interest for dependency relations, as it may aid in finding the correct head of a term in a complex noun phrase.

This paper examines the results and errors in pars-ing and machine translation of dependency parsers, trained with annotated noun phrase structure, against those with a flat noun phrase structure. These re-sults are compared with two systems: a Baseline Parser with no internally annotated noun phrases and a Gold NP Parser trained with data which contains gold standard internal noun phrase structure anno-tation. Additionally, we analyze the effect of these improvements and errors in parsing down the NLP pipeline on the TectoMT machine translation sys-tem (  X  Zabokrtsk  X  y et al., 2008).

Section 2 contains background information needed to understand the individual components of the experiments. The methodology used to carry out the experiments is described in Section 3. Results are shown and discussed in Section 4. Section 5 concludes and discusses future work and implica-tions of this research. 2.1 Dependency Parsing Dependence parsing is an alternative view to the common phrase or constituent parsing techniques used with the Penn Treebank. Dependency relations can be used in many applications and have been shown to be quite useful in languages with a free word order. With the influx of many data-driven techniques, the need for annotated dependency re-lations is apparent. Since there are many data sets with constituent relations annotated, this paper uses free conversion software provided from the CoNLL 2008 shared task to create dependency relations (Jo-hansson and Nugues, 2007; Surdeanu et al., 2008). 2.2 Dependency Parsers Dependency parsing comes in two main forms: Graph algorithms and Greedy algorithms. The two most popular algorithms are McDonald X  X  MST-Parser (McDonald et al., 2005) and Nivre X  X  Malt-Parser (Nivre, 2003). Each parser has its advantages and disadvantages, but the accuracy overall is ap-proximately the same. The types of errors made by each parser, however, are very different. MST-Parser is globally trained for an optimal solution and this has led it to get the best results on longer sen-tences. MaltParser on the other hand, is a greedy al-gorithm. This allows it to perform extremely well on shorter sentences, as the errors tend to propagate and cause more egregious errors in longer sentences with longer dependencies (McDonald and Nivre, 2007). We expect each parser to have different errors han-dling internal noun phrase structure, but for this pa-per we will only be examining the globally trained MSTParser. 2.3 TectoMT TectoMT is a machine translation framework based on Praguian tectogrammatics (Sgall, 1967) which represents four main layers: word layer, morpho-logical layer, analytical layer, and tectogrammatical layer (Popel et al., 2010). This framework is pri-marily focused on the translation from English into Czech. Since much of dependency parsing work has been focused on Czech, this choice of machine translation framework logically follows as TectoMT makes direct use of the dependency relationships. The work in this paper primarily addresses the noun phrase structure in the analytical layer (SEnglishA in Figure 1).
 TectoMT is a modular framework built in Perl. This allows great ease in adding the two different parsers into the framework since each experiment can be run as a separate  X  X cenario X  comprised of dif-ferent parsing  X  X locks X . This allows a simple com-parison of two machine translation system in which everything remains constant except the dependency parser. 2.4 Noun Phrase Structure The Penn Treebank is one of the most well known English language treebanks (Marcus et al., 1993), consisting of annotated portions of the Wall Street Journal. Much of the annotation task is painstak-ingly done by annotators in great detail. Some struc-tures are not dealt with in detail, such as noun phrase structure. Not having this information makes it dif-ficult to tell the dependencies on phrases such as  X  X rude oil prices X  (Vadas and Curran, 2007c). With-out internal annotation it is ambiguous whether the phrase is stating  X  X rude prices X  (crude (oil prices)) or  X  X rude oil X  ((crude oil) prices).
Manual annotation of these phrases would be quite time consuming and as seen in the example above, sometimes ambiguous and therefore prone to poor inter-annotator agreement. Vadas and Cur-ran have constructed a Gold standard version Penn treebank with these structures. They were also able to train supervised learners to an F-score of 91.44% (Vadas and Curran, 2007a; Vadas and Cur-ran, 2007b; Vadas and Curran, 2008). The addi-tional complexity of noun phrase structure has been shown to reduce parser accuracy in Collin X  X  parser but no similar evaluation has been conducted for de-pendency parsers. The internal noun phrase struc-ture has been used in experiments prior but without evaluation with respect to the noun phrases (Galley and Manning, 2009). The Noun Phrase Bracketing experiments consist of a comparison two systems. 1. The Baseline system is McDonald X  X  MST-2. The Gold NP Parser is McDonald X  X  MSTParser 3.1 Data Sets To maintain a consistent dataset to compare to pre-vious work we use the Wall Street Journal (WSJ) section of the Penn Treebank since it was used in the CoNLL X shared task on dependency parsing (Buchholz and Marsi, 2006). Using the same com-mon breakdown of datasets, we use WST section 02-21 for training and section 22 for testing, which allows us to have comparable results to previous works. To test the effects of the noun phrase struc-ture on machine translation, ACL 2008 X  X  Workshop on Statistical Machine translation X  X  (WMT) data are used. 3.2 Process Flow
We begin the the experiments by constructing two data sets: 1. The Penn Treebank with no internal noun 2. The Penn Treebank with gold standard noun
From these datasets we construct two separate parsers. These parsers are trained using McDonald X  X  Maximum Spanning Tree Algorithm (MSTParser) (McDonald et al., 2005).

Both of the parsers are then tested on a subset of the WSJ corpus, section 22, of the Penn Treebank and the UAS and LAS scores are generated. Errors generated by each of these systems are then com-pared to discover where the internal noun phrase structure affects the output. Parser accuracy is not necessarily the most important aspect of this work. The effect of this noun phrase structure down the NLP pipeline is also crucial. For this, the parsers are inserted into the TectoMT system. 3.3 Metrics L abeled A ccuracy S core (LAS) and U nlabeled A ccuracy S core (UAS) are the primary ways to eval-uate dependency parsers. UAS is the percentage of words that are correctly linked to their heads. LAS is the percentage of words that are connected to their correct heads and have the correct dependency la-bel. UAS and LAS are used to compare one system against another, as was done in CoNLL X (Buch-holz and Marsi, 2006).

The Bleu ( B i L ingual E valuation U nderstudy) score is an automatic scoring mechanism for ma-chine translation that is quick and can be reused as a benchmark across machine translation tasks. Bleu is calculated as the geometric mean of n-grams com-paring a machine translation and a reference text (Papineni et al., 2002). This experiment compares the two parsing systems against each other using the above metrics. In both cases the test set data is sam-pled 1,000 times without replacement to calculate statistical significance using a pairwise comparison. When applied, the gold standard annotations changed approximately 1.5% of the edges in the training data. Once trained, both parsers were tested against section 22 of their respective annotated cor-pora. As Table 1 shows, the Baseline Parser obtained near identical LAS and UAS scores. This was ex-pected given the additional complexity of predicting the noun phrase structure and the previous work on noun phrase bracketing X  X  effect on Collin X  X  parser.
While possibly more error prone, the 1.5% change in edges in the training data did appear to add more useful syntactic structure to the resulting parses as can be seen in Table 2. With the additional noun phrase bracketing, the resulting Bleu score increased 0.23 points or 2.43%. The improvement is statis-tically significant with 95% confidence using pair-wise bootstrapping of 1,000 test sets randomly sam-pled with replacement (Koehn, 2004; Zhang et al., 2004). In Figure 4 we can see that the difference be-tween each of the 1,000 samples was above 0, mean-ing the Gold NP Parser performed consistently bet-ter given each sample.

Visually, changes can be seen in the English side parse that affect the overall translation quality. Sen-tences that contained incorrect noun phrase structure such as  X  X he second vice-president and Economy minister, Pedro Solbes X  as seen in Figure 5 and Fig-ure 6 were more correctly parsed in the Gold NP Parser. In Figure 5  X  X nd X  is incorrectly assigned to the bottom of a noun phrase and does not connect any segments together in the output of the Baseline Parser, while it connects two phrases in Figure 6 which is the output of the Gold NP Parser. This shift in bracketing also allows the proper noun, which is shaded, to be assigned to the correct head, the right-most noun in the phrase. This paper has demonstrated the benefit of addi-tional noun phrase bracketing in training data for use in dependency parsing and machine translation. Us-ing the additional structure, the dependency parser X  X  accuracy was minimally reduced. Despite this re-duction, machine translation, much further down the NLP pipeline, obtained a 2.43% jump in Bleu score and is statistically significant with 95% confi-dence. Future work should examine similar experi-ments with MaltParser and other machine translation systems. This research has received funding from the Euro-pean Commissions 7th Framework Program (FP7) under grant agreement n  X  238405 (CLARA), and from grant MSM 0021620838. I would like to thank Zden  X  ek  X  Zabokrtsk  X  y for his guidance in this research and also the anonymous reviewers for their com-ments.

