 The mutual authentication and key exchange protocol (MAKEP) presented in [1] them to determine jointly a session key. This session key can then be used to establish a secure communication channel between the user and the server. In general, a good mutual authentication and key exchange protocol should possess the following properties [2,3]: 
User Anonymity : In mobile communications, most users require their identity and private information being kept confidential. compromised, the secrecy of previously established session keys should not be affected. received from the client has been modified during transmission. 
Known-key security : If one session key has been obtained by an adversary, the keys nor other session keys (past or future) would be compromised as a result. 
Key control : The secret session key between any two entities should be jointly determined; neither entity can predetermine any portion of the session key. Key-compromise impersonation resilience : If the long-term private key of an entity should not allow the adversary to impersonate other entities to A . 
In addition, based on the considerations for a mobile communication environment, the list below could be seen as performance measurement criteria [4]. 
So far, different types of mutual authentication and key exchange protocols have been proposed. In general, such protocols could be grouped into two categories: public key based protocols and symmetric key based protocols. 
In the public key based protocols [5], each party holds a pair of private and public (confidentiality) or encryption (signature) of messages. The public key is published to be used for the reverse operation. They provid e arbitrarily high levels of security and do not require an initial private key exchange. However, these operations can be very inefficient when implemented on low-power wireless devices. Further, it requires the cryptosystems being widely deployed in most of the applications running on low-power wireless devices. 
In the symmetric key protocols [6], a common key is used by both communication partners for encryption and decryption. The symmetric key algorithms are much faster than the public key algorithms when implemented in wireless devices. However, symmetric key based protocols need the two communicating entities to share a long-problem when deploying symmetric key based protocols. 
The organization of this paper is as follows. In section 2, we first introduce briefly brief review and the cryptanalysis of ES-MAKEP [10] which is the latest MAKEP relatively more secure and efficient than those previous improved MAKEPs. In section 4, we present our proposed improved MAKEP known as EC-MAKEP which has addressed the weaknesses of the contemporary MAKEPs [7,8,9,10]. In section 5, security and performance analysis of EC-MAKEP are presented. Finally, Section 6 concludes the paper. In this section, we analyzed several existing MAKEPs which are relatively more key protocols. In 2001, Duncan S. Wong et al. proposed a Server-specific MAKEP [7] (say, Ss-MAKEP) for wireless communications between a low-power wireless device (client) and a powerful base station (server). This protocol eliminates any usage of public-key based operations. Furthermore, in a conventional symmetric key based scheme, the server has to maintain a secure database of all its clients X  long-lived keys, but the cost scheme. Instead, each client keeps a certified long-lived key and sends it securely to there is no key synchronization problem between client and server. However, this client has to keep a lot of distinct certificates in order to communicate with different makes malicious server able to impersonate client. 
Duncan S. Wong et al. also presented an other protocol called Linear MAKEP [7] (say, L-MAKEP) which is an improved protocol of Ss-MAKEP. It allows each client to communicate with as many servers as it wants without keeping numerous distinct certificates. In addition, it prevents any server to impersonate its own clients. But the certificate when it wants to communicate with the specific server. 
However, in the Ss-MAKEP and the L-MAKEP schemes, the encrypted messages Kyungah Shim [8] broke these two schemes by using unknown key-share attack successfully and proposed an Improved Ss-MAKEP (say, ISs-MAKEP) and an Improved L-MAKEP (say, IL-MAKEP) by including the identities of the sender and recipient in the messages being encrypted to address weakness of the original protocols. Further, this improvement did not incur additional overhead on the proposed protocols. still attack protocol L-MAKEP and IL-MAK EP [8]. They proposed an improved MAKEP (I-MAKEP) based on Girault X  X  method to resist the attacks of unknown key-share and man-in-the-middle. I-MAKEP adopted the pre-computation technique to reduce the overhead of the client just like the IL-MAKEP. At the same time, besides the information of pre-computation and some system parameters, the scheme just needs to keep the user X  X  secret key in client X  X  memory. It is much better than the IL-MAKEP which needs to keep the certificates. 
The savings in computations, bandwidth, and number of message exchanges are valuable for key exchange protocols, especially in the environment of wireless communications with low power mobile devices. Fuw-Yi Yang et al.[10] proposed a protocol known as ES-MAKEP for mobile communications, which required only 0.1 faster than that of conventional protocols. The number of message exchanges and message size are smaller than those of the previous protocols Ss-MAKEP, L-MAKEP, ISs-MAKEP, IL-MAKEP and the I-MAKEP. In addition, the proposed the man-in-the-middle attack which Ss-MAKEP and ISs-MAKEP could not resist. However, we find that all the protocols Ss-MAKEP, L-MAKEP, ISs-MAKEP, IL-MAKEP and ES-MAKEP do not have the property of perfect forward secrecy, and mutual authentication and key exchange protocol to support both perfect forward secrecy and user anonymity. In this paper, we only describe ES-MAKEP in detail, since it is a MAKEP which possesses all ad vantages of all previously improved protocols. Then we introduce our mutual authentication and key exchange protocol anonymity and all the merits of ES-MAKEP. 2.1 Brief Review of ES-MAKEP Before presenting the details of ES-MAKEP, we first introduce the notations and symbols used in [10]: SK S : a private key of server PK S : a public key of server 
K : a secret key of symmetric encryption/decryption function E K (): a symmetric encryption function 
D K (): a symmetric decryption function h (): a hash function ID U : the identification of a client 
ID S : the identification of a server  X  : session key p , q : a private key pair of client g , n : a public key pair of client x || y : string x concatenates string y | n |: bit length of n r UK , r UF , r UR : three random numbers selected by client r SK : a random number selected by server l : the length of session keys The message flows for ES-MAKEP are illustrated in Figure1. 
Step 1: As an offline initialization step, two large prime numbers p and q  X  {0,1} k /2  X  but keeps its private key ( p,q ) as a secret. 
Step 2: Client encrypts the random number r UK using server X  X  public key, and C , CMT , and client X  X  identity information ID U to ask for initiating a new session. which includes r SK and C 2 to client . 
Step 4: Upon receiving the message M 2 , client calculates the session key  X  US = r UK r M S in equation (1). At last, client sends the response message M 3 = { C 3 , S R } to server. and Yael Tauman X  X  scheme[11], CMT and CMT X  should be equal if all the messages are correctly transmitted. 
At this point, ES-MAKEP should have completed the mutual authentication and details of these two problems below. 2.2 Lacking Forward Secrecy Property compromised. However, ES-MAKEP does not support forward secrecy, since the session key could be computed if the server secret key is revealed. The details are as described below. 
Assume an adversary E is listening to the session of the ES-MAKEP, and the SK then be computed as r SK r UK . Therefore, ES-MAKEP does not satisfy the requirement enable an adversary to compute the session key  X  SU . 
When the above mentioned scenario occurs, the previous session key would be exposed to the attacker. With this session key and those messages previously from those messages encrypted using the session key. 2.3 Lacking User Anonymity Property or avoids disclosing any confidential user information. Especially in e-business the process. For instance, an attacker could make use of the user identity to impersonate the user to perform online shopping. 
ES-MAKEP suffers from lacking the user anonymity property mentioned above. In The attacker could make use of this ID U to pretend to be a legitimate user and initiate a session with server. We improve the ES-MAKEP by using ECDH (Elliptic Curve Diffie-Hellman) [13] algorithm in the key exchange process. We employ two computed values R C and R S as the exchange data to replace the original random values r UK and r SK respectively, and to make the protocol equipped with the forward secrecy property. Further, we remove ID
U from M 1 in order to prevent user identity from being exposed to an attacker. The improved protocol EC-MAKEP is as outlined in Figure 2 below. 4.1 Security Properties User Anonymity. In EC-MAKEP, ID U is not included in M 1 anymore; it is sent in M 3 ID
U . The server can authenticate client by checking ID U without worrying about if an can be kept confidential, and the requirement for user anonymity can be met. Forward Secrecy. In EC-MAKEP, the client sends a pre-computed ECC point R C to secret session key satisfying the requirement for forward secrecy. Suppose the obtain the previous session key, becaus e according to the property of the ECC compromise of the long-term private key of the server does not lead to the disclosure of the previous session key. Thus, EC-MAKEP can support forward secrecy. data received from the client are correct; that is, it can check if the data transmitted to the receiver have been modified. In EC-MAKEP, the client first computes S F = h ( R C , R in the network, if any one of them has been modified during the transmission, the S F CMT would not be equal to CMT X . So all the data transmitted during the execution of EC-MAKEP can be verified. So, it facilitates the validation of data integrity. Known-key security. With the proposed EC-MAKEP, if the current session key has relation with the current one. Further, as the private keys of the client and server are even if the session key has been disclosed. Key control. In the protocol EC-MAKEP, both client and server cannot predetermine the session key being established, because the establishment of the session key key before the communication. Key-compromise impersonation resilience. With the protocol EC-MAKEP, even if the private key of the client has been exposed, an attacker can impersonate neither the value R C and R S instead. 4.2 Computation Cost and Bandwidth To simplify the estimation of the computation cost, we divide the computation cost of D () would not be included since the costs of these operations are much smaller than the cost of the elliptic curve point multiplication operation. Fuw-Yi Yang and Jinn-Ke Jan [10] presented their analysis of computation cost and bandwidth of ES-MAKEP. By following their approach, we have carried out a similar analysis on our proposed EC-MAKEP and the results are as presented below. Based on the findings of [14,15], an ECC with 160-bit key length could offer roughly the same level of security as RSA length of modulus n equal to 1024bits, where x is an 160-bit random integer. The cost of computing such a modulus exponent function is estimated to be about 1.5| x | modular multiplications [16], equal to around 240 modular multiplications ( | x | multiplication is equivalent to around 29 modular multiplications [16]. Tables1 and 2 present the comparisons of computation costs of EC-MAKEP and ES-MAKEP on the client side and the server side respectively. where a , b , and n are all set to be 1024 bits. 
Table 3 shows the bandwidth overheads of EC-MAKEP and ES-MAKEP. As bits. 
When compared with ES-MAKEP, the proposed protocol EC-MAKEP requires a similar online computation cost on the client side; however, it requires a much smaller computation cost on client side, the small additional cost for computing R C and R S are justifiable since the underlying operations could help to provide forward secrecy, and enhance the security of the protocol. Moreover, the offline computation would be performed only once; so the computation cost can be considered insignificant. When compared with ES-MAKEP in terms of bandwidth requirement, EC-MAKEP reduces 864bits of bandwidth. It is certainly an obvious advantage for low bandwidth wireless communication. We studied the early mutual authentication and key exchange protocol (MAKEP), and the improved MAKEPs; we also identified their weaknesses. The latest improved protocol known as ES-MAKEP addresses many of the security problems of the previous MAKEPs. This paper proposes another protocol EC-MAKEP which has improved on ES-MAKEP. Our security analysis of the proposed protocol shows that EC-MAKEP satisfies all of the major security requirements for a secured MAKEP. It compares favorably with ES-MAKEP in terms of a recognized list of security requirements. For instance, ES-MAKEP does not support forward secrecy and user anonymity; whereas EC-MAKEP supports both of the two features. Moreover, when compared with ES-MAKEP, EC-MAKEP has a smaller online computation cost, and requires a smaller bandwidth. CUHK under RGC Direct Grant with Project ID 2050347.

