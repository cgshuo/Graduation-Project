 In this paper we report on our work to date concerning the development of a course recommender system for University College Dublin X  X  on-line enrolment application. We outline the factors that influence student choices and propose so-lutions to address some of the key considerations that are identified. We empirically evaluate our approach using his-torical student enrolment data and show that promising per-formance is achieved with our initial design.
 H.3.3 [ Information Search and Retrieval ]: Information Filtering Algorithms, Experimentation, Measurement Course Recommender System, Collaborative Filtering, Content-based Filtering, Academic Advising The structure and delivery of degree programmes within University College Dublin (UCD) has recently been reor-ganised and is now delivered on the basis of a fully modular, semesterised and credit-based curriculum. While this new approach provides increased choice and flexibility and allows students the ability to personalise their studies, challenges have arisen with regard to enabling students to appreciate the range and diversity of modules (courses) that are avail-able to them. In particular, the current enrolment system makes it difficult for students to locate course options that might best fit their individual niche interests.

In other domains, the benefits of deploying recommen-dation technology to assist users in finding relevant items is well understood [6, 7]. More recently, research has been conducted into developing such technology for course rec-ommender systems. For example, CourseAgent employs a social navigation approach to deliver recommendations for courses based on students X  assessment of their particular ca-reer goals [3]. AACORN, which applies a case-based reason-ing approach to course recommendation, has been proposed in [10], while the RARE system combines association rules together with user preference data to recommend relevant courses [1].

In this paper, we report on our work on developing col-laborative recommendation technology for integration into UCD X  X  existing on-line enrolment application. Given the challenges and constraints of integrating this technology into an existing live environment, this work is in its initial stages but the domain offers great potential and scope for future research and development. Here, we describe our current progress and present some encouraging preliminary evalua-tion results.

The paper is organised as follows. Section 2 provides an overview of enrolment requirements for UCD students. Sec-tion 3 describes recommendation algorithms to facilitate the enrolment process. These algorithms are empirically evalu-ated in Section 4 and conclusions are presented in Section 5.
In UCD, students normally study and gain credits for 12 modules in each academic year. Of these, 10 modules are from within their core area of study (e.g. Computer Sci-ence, Economics etc.). In addition, students choose 2 elec-tive modules which may be selected from the broader cur-riculum. Students have therefore the opportunity to deepen their knowledge by focusing on modules from within their subject area or broadening their knowledge by taking mod-ules from elsewhere in the curriculum. For example, Science students may select Business modules, Medical students may choose Philosophy modules, Law students may select addi-tional Law modules etc. In an Irish context, this approach represents a significant change to the more limited study options that are typically on offer.

Thus, once students have selected their core area of study, they are also presented with a wide variety of elective mod-ules from which to choose. A number of factors can be identified which are likely to influence such choices: Figure 1: A screenshot of the current elective mod-ule search interface, showing elective modules asso-ciated with the keyword  X  X omputer X  that are avail-able at any time on Mondays.
The University conducted a formal review of module en-rolment in 2005. A survey of 1st year students elicited 820 responses, which corresponded to approximately 20% of the total 1st year student body. The survey revealed that 47% of students selected elective modules outside of their core degree, with a view to studying  X  X omething interesting X , or because of a desire to study a specific subject outside of their core degree.

It was found that 24% of students did not get a place in any of their preferred elective modules, while 14% did not get a place on some of their preferred electives. 20% of students attributed not getting their preferred elective choices to timetable clashes, while 10% of students believed Figure 2: A screenshot of output from the col-laborative recommender, showing elective modules grouped and ranked by subject code. the reason they did not get their preferred electives was due to a lack of places.

Further, there is concern that, given the limitations of the existing module search interface, students are simply unaware of the full range of options available, resulting in poorly-informed choices being made.

These findings are noteworthy in the sense that they re-veal a clear desire on the part of many students to select diverse and interesting courses, while also highlighting the need to better facilitate module search. In the next section, we describe the elective module search interface offered by the current enrolment system and describe our initial work on introducing recommendation technology into the system. The existing elective module search interface is shown in Figure 1. Search can be refined by inserting a keyword or a specific module ID (if known). In addition, particular days and time-slots can also be specified. The output is a list of elective modules which match the search criteria. Output is ranked either alphabetically by module ID, by module level (i.e. 1st, 2nd, ... year module) or by availability. There are a number of limitations associated with this form of search: Figure 3: Abstracting a student profile from the core module to the core subject code level. The elective module component of a profile is similarly abstracted.

To address the above limitations, we have implemented a collaborative-filtering style recommender system which sug-gests elective modules based on the past choices of like-minded students. In addition, we have developed a sim-ple content-based recommender which recommends similar modules based on keyword similarity (i.e. a  X  X ore like this X  feature). These approaches address some of the key factors that were identified in Section 2 and, in particular, those factors that were frequently raised in student feedback.
We propose a variation on the widely-used item-based col-laborative filtering algorithm described in [4]. The objective of our module recommender system is to recommend elective modules to students based on the core modules that they have selected. Thus, we construct student profiles using two matrices, C and E , which record the core and elective mod-ules that are selected by students, respectively. In each case, the ( i, j ) th entry is set to 1 if student i has selected module j and 0 otherwise.

The next step in the algorithm is to abstract each stu-dent X  X  profile to the subject code level. Every module is associated with a unique identifier  X  e.g. MATH10060 , where MATH is the subject code and 10060 is the course number. We construct two additional matrices, C  X  and E  X  , where the ( i, k ) th entry in each matrix represents the number of times that student i has selected modules of type subject code k . Figure 3 shows a simplified example of the abstrac-tion process.

The pairwise vector similarity [4] between the columns of matrices C  X  and E  X  is now computed, resulting in an m  X  n similarity matrix S , where m and n are the number of core and elective subject codes in the system, respectively, and S i,j, gives the similarity between (core) subject code i and (elective) subject code j . Note that with this approach the similarity matrix is not symmetric, i.e. S i.j = S j,i .
Recommendations are made for a particular student as follows. For each elective subject code j , compute the to-tal similarity between all core subject codes selected by the student and j . Individual elective modules are then output, grouped and ranked by subject code. An example of such output is shown in Figure 2.

One rationale for profile abstraction is we believe that the relatively course ranking of recommendations by subject code is generally more useful and informative to students rather than ranking by specific module ID.
 Figure 4: A screenshot of the  X  X ore like this X  rec-ommendation feature, in this case showing modules that are similar in terms of content to Computer Science module COMP10060 .
The key motivation for the  X  X ore like this X  recommender is to facilitate students to find similar modules to those that are listed, particularly in cases where no places are available or where timetable clashes occur. The following approach is employed. Each module in the system has associated text fields detailing the module description and learning out-comes. After the removal of stop words and the application of suffix stripping [8], module-module similarities are com-puted using the well-studied information retrieval algorithm described in [9].

A  X  X ore like this X  link is associated with each recom-mended module, as shown in Figure 2. The result of select-ing this link for module COMP10060 (an introductory course to computer programming for Engineering students) is shown in Figure 4, where similar modules are listed and ranked in terms of content-based similarity.
In this section, we evaluate the collaborative recommender algorithm described in Section 3.1 1 . The evaluation dataset consisted of modules selected by 1st year students from all degree programmes in the 2006/07 academic year. Dataset statistics are shown in Table 1.

Test and training sets consisting of randomly selected stu-dent profiles were drawn from the dataset and a 10-fold cross validation was performed. Test sets were of size 10%. In all cases, recommendations were made using training set data only. To evaluate the algorithm, we use recall  X  the percent-age of elective subject codes selected by test set students that are present in top-N recommended lists  X  and coverage  X  the percentage of test cases where the algorithm is able to make recommendations.

For top-10 recommendation lists, the recall achieved by the algorithm was 66%. This result means that, on average, 1.33 out of the 2 elective modules that were actually selected by students belonged to the top-10 recommended subject code groups. This compares very favourably to a recall value of only 10% provided by a benchmark non-personalised ap-proach, where modules were simply grouped and ranked by
We leave to future work an evaluation of the content-based  X  X ore like this X  recommender. subject code in alphabetical order (as is the case with the current search interface).

The algorithm achieved 100% coverage, meaning that it was able to compute non-zero similarities between all test set profiles and at least 10 (as required to fill top-10 recom-mendation lists) elective subject codes. On average, 60 out of a possible 79 similarities computed for test profiles were non-zero, with a standard deviation of 23. This strong per-formance was due to the abstraction of student profiles to the subject code level; since there were less than 80 unique subject codes as opposed to 2,088 unique course modules in the system (see Table 1), the sparsity of the data on which the algorithm operated was significantly reduced. Figure 5 shows a histogram of the number of non-zero similarities that were computable for each core subject code. All 71 core subject codes had a non-zero similarity with 1 or more elective subject codes, while 85% had in excess of 10 non-zero similarities. At the higher end, more than 70 non-zero similarities (out of 79) were computable for 3 core subject codes. Consequently, the density of the similarity matrix in this domain was much higher (35%) compared to that typi-cally found in other application scenarios (1% or less), and thus the algorithm was able to deliver high quality recom-mendations as reported above.
In this paper, we have presented an overview of the enrol-ment requirements for UCD students and we have identified factors which influence module selection. We have described our initial work on developing recommendation technology to facilitate and enhance the on-line module selection pro-cess. When our collaborative algorithm was evaluated using historical enrolment data, it was found to provide very en-couraging performance in terms of both recall and coverage.
There is rich scope for further work on recommendation in this particular domain. For example, a diverse range of alternative recommendation algorithms have been proposed in the literature (e.g. association-rule based algorithms [1, 5], hybrid approaches [2] etc.). In addition, the domain pro-vides an environment for developing rich user models  X  for example, modeling students X  interests and goals, analysing module selection patterns over multiple years and construct-ing models designed to suit the structure and complexities of different degree programmes etc.

Our recommendation algorithms will be in place prior to student enrolment at the beginning of the next academic year. We await the student feedback that will be forth-coming and plan to develop algorithms with more advanced features in time for the next release of UCD X  X  enrolment application. This work was carried out with the support of Science Foundation Ireland under Grant No. 03/IN.3/I361, which Figure 5: Histogram and cumulative distribution function (CDF) of the number of non-zero similari-ties that were computable for core subject codes. is gratefully acknowledged. We would also like to thank our reviewers for their valuable comments and suggestions. [1] N. Bendakir and E. Aimeur. Using association rules [2] R. Burke. Hybrid recommender systems: Survey and [3] R. Farzan and P. Brusilovsky. Social navigation [4] G. Karypis. Evaluation of item X  X ased top X  X  [5] W. Lin, S. Alvarez, and C. Ruiz. Efficient [6] G. Linden, B. Smith, and J. York. Amazon.com [7] B. Miller, I. Albert, S. Lam, J. Konstan, and J. Riedl. [8] M. F. Porter. An algorithm for suffix stripping. [9] S. E. Robertson and K. Spark-Jones. Simple, proven [10] J. Sandvig and R. Burke. Aacorn: A CBR
