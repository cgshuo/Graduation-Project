 Recommender Systems (RS) have become popular for their ability to make useful suggestions to online shoppers. Know-ledge-based RS represent one branch of these types of appli-cations that employ means-end knowledge to map abstract user requirements to product characteristics. Before set-ting up such a system, the knowledge has to be acquired from domain experts and formalized using constraints or a comparable representation mechanism. However, the ini-tial acquisition of the knowledge base and its maintenance are effort intensive tasks. Here, we propose a system that learns rule-based preferences from successful interactions in historic transaction data. It is realized as a meta-level hy-brid that employs collaborative filtering to derive prefer-ences from a user X  X  nearest neighbors that are processed by a knowledge-based RS to derive recommendations. An evalu-ation using a commercial dataset showed that this approach outperforms the prediction accuracy of a knowledge base provided by domain experts. In addition, the approach is applicable for supporting domain experts in the maintenance and validation tasks associated with providing personaliza-tion knowledge bases.
 H.3.3 [ Information Systems ]: Information Search and Re-trieval X  Relevance feedback, Retrieval models ; I.2.1 [ Artificial Intelligence ]: Applications and Expert Systems Algorithms Hybrid recommendation approaches, collaborative filtering, knowledge-based recommendation  X 
This work was partly supported by FFG grant MAPREC nr. 814294. Furthermore, it was conducted within the scope of the V-Know research project (FWF grant nr. 19996).
Recommender systems are a fundamental technology for providing personalized user experiences on e-shopping plat-forms. They either explicitly request users to comment on items (e.g. by providing ratings or critique), ask them to state their requirements or exploit implicitly acquired pref-erence information such as navigation actions or previous purchases. Knowledge-based [10, 7, 14] and case-based rec-ommender systems [20, 16] typically engage in a conver-sational interaction with their users to collect explicit user preference and requirements information. This is in contrast with the prominent variants of recommender systems in the literature, namely collaborative and content-based filtering systems [5, 21], that typically pursue solely one-shot inter-action strategies. Collaborative recommender systems com-pute item propositions by analyzing community data and similarities between users or items, while content-based fil-tering retrieves items that are similar to those the user liked in the past. Hybrid approaches combine at least two of the aforementioned techniques by, for instance, weighting and combining recommendations from two RS into a single list or employing one technique to augment the input data of a second one. Such systems have been developed to improve recommendation quality and to alleviate some of the specific problems of a single recommendation paradigm approach [8, 3]. For instance, a system based on the collaborative filtering paradigm suffers from the cold-start problem for new users or new items. Users that have not yet submitted ratings to the system cannot receive meaningful recommendations. Similarly, new items that have not been rated by several users will not be recommended. Knowledge-based RS can provide reasonable recommendations right from the start of the system at the expense of a considerable knowledge engi-neering effort during its inception. In addition, the system X  X  knowledge needs to be continuously maintained in order to avoid wrong or outdated recommendations.

Therefore, we propose a collaborative approach that com-bines rule-based preferences 1 from users X  nearest neighbors to provide a personalized knowledge base that can outper-form a general domain knowledge base, provided by experts. According to the typology of hybrid recommender systems in [8], the proposed system is classified as a meta-level hybrid where a collaborative recommender contributes a model (i.e. a knowledge base) that is used by the knowledge-based rec-ommender to generate recommendations. Although the pro-
Note, that we use the term preferences alternatively to the notion of soft constraints. By rule-based we mean implica-tions in logic of the form A  X  B . posed hybrid combines favorable properties from the worlds of collaborative and knowledge-based systems, the research area remains relatively unexplored [9].

In the following section we give a motivating example based on an application scenario from the domain of pre-mium cigars. Section 3 presents our collaborative constraint-based recommendation approach that learns functional de-pendencies from successful past user transactions. In Section 4 we evaluate the collaborative constraint-based recommen-dation system by comparing it with a traditional knowledge-based RS and discuss results. Finally, we summarize related work and conclude with an outlook on open research tasks.
Consider a RS in a trivial example domain, where users are required to choose between two different types of cigars. Table 1 encodes the product catalog. Besides its name, a cigar is characterized by its brand name, its format and the price. In order to be capable of making knowledgeable rec-ommendations, a conversational recommender system must first interact with its users to elicit their explicit require-ments. Typically, a series of questions are asked. For in-stance:  X  X ho is it for? X  (short: for whom) ,  X  X ow experienced are you in smoking cigars? X  (experience) or  X  X ow much are you willing to spend? X  (cost). Table 2 lists the answers users gave to these questions and denotes the id of the product they bought, effectively forming a matrix where each row represents a user session and columns hold the explicit re-quirements that users disclosed to the system and the ids of actually bought items. For instance, user Sue was look-ing for a gift for someone with no smoking experience, had a price expectation of 40 currency units and bought item number 1. Of particular interest is the last row of Table 2, which represents the new user entering the platform. The new user requires a cigar as a gift for someone with no smok-ing experience and her price expectation lies at 20 currency units per cigar. The goal of the RS is to predict which item she is most likely to buy.

While a traditional knowledge-based recommender exploits a knowledge base that was engineered by domain experts, the approach presented here extracts rule-based preference knowledge from the community transactions. The goal is to identify functional dependencies between user require-ments and product properties that can be represented as rule-based preference information in the form of If &lt; con-dition &gt; then &lt; consequent &gt; restrictions. Given some rule templates or patterns that describe presumably meaningful mappings from user requirements to product characteristics, the transformation step of generating preference knowledge can be done automatically. For instance, the smoking ex-perience of a user might influence her choice of format, as less experienced smokers may feel sick when having smoked a large cigar. On the other hand, further dependencies such as between user X  X  price expectations and the product name should not be automatically generated because they have not been deemed to be meaningful by a domain expert. Ta-ble 3 exemplifies the preference knowledge that has been au-tomatically derived from the community transactions. For instance user Sue was looking for a gift and bought the pres-tigious Montecristo brand, which results in the preference rule: If for whom=  X  X ift X  then brand=  X  X ontecristo X  .
The idea of the collaborative constraint-based recommen-dation approach is not to use all preference rules from Table 3 for making a prediction but only those that derive from the most similar peers of a user . Therefore, in order to compute a recommendation for the new user, a collaborative RS will first determine those users within the community that are most similar according to their user models. The k-nearest neighbor method using Pearson cor-relation or cosine as similarity measures is the standard way of neighborhood determination in user-based collaborative filtering [3]. Here, a simple matching coefficient based on Figure 1: Computation of recommendations with a personalized KB uniformly weighted user requirements is used for similarity computation. It indicates that Sue has a similarity degree of and Tom and Bob are similar by 1 3 while Jim is completely dissimilar to the new user.

As a result the collaborative RS proposes a personalized knowledge base that is a subset of the automatically derived preference knowledge (see Figure 1), containing only the preference rules from the new user X  X  most similar peers (i.e. Sue , Tom and Bob ). Note, that preferences are weighted by the sum of computed similarities that can be interpreted as priority values when conflicts between constraints need to be resolved, e.g. the preference rule that recommends the Montecristo brand if users require a gift derives from users Sue and Tom and thus the sum of their similarity metrics results in a priority of 1. Note, that in this example all other preference rules only have the support of a single peer and therefore their priority is simply the similarity metric of the peer from whose transaction record the rule has been derived.

The knowledge-based RS has to evaluate the personal-ized knowledge base in order to derive a recommendation. First, the constraint solver determines which preference rules are applicable based on their condition part and the input from the current user model. For instance, the implication If for whom=  X  X ift X  then brand=  X  X ontecristo X  is fulfilled for the first product record because for whom=  X  X ift X  is part of the current user model. Note that all applicable constraints are shaded grey in Figure 1. If none of the products satisfies all preference rules then some of these constraints must be relaxed in order to derive a recommendation. In this ex-ample the first product record satisfies all preference rules except the last one (weight 1 3 ) while the second product record requires the relaxation of the first two constraints (the sum of weights of both is 5 3 ). As a consequence, a RS using a min-weight relaxation strategy will propose the first product record, i.e. the Montecristo Nr. 3 cigar. The fol-lowing section will present a more formal description of the proposed approach.
The proposed collaborative constraint-based recommender system is a meta-level hybrid that combines collaborative fil-tering with the knowledge-based recommendation paradigm. As outlined in Figure 2, an offline preprocessing component generates preference rules (denoted KB gen ) by processing previous transaction. This task may be supported by rule templates that restrict the size of the problem space. For instance, only reasonable combinations of user requirements and product properties should be generated as constraint candidates or, in case of numeric properties, range restric-tions are used instead of equality conditions.

The collaborative filtering step takes the original commu-nity data as well as the user model of the current user and the generated constraint candidates as input and selects a set of constraints that serves as a knowledge base ( KB coll for the subsequent recommendation step.
 The knowledge-based RS exploits the dynamically created KB coll and the user model of the current user to retrieve a ranked list of recommendable items from the product cata-log.

In [3] the recommendation problem is formalized by as-suming a utility function rec that measures the usefulness of an item i  X  I to a user u  X  U , i.e. rec ( i, u ) 7 X  R , where R is a totally ordered set of numbers within a certain range. Thus, the task of a recommender system is to identify for each user those items i j that follow an abstract goal such as maximizing the user X  X  utility, increasing online conversion rates or even optimizing the user X  X  lifetime value.
In order to formalize our proposed hybrid approach us-ing the definition of a recommendation problem from [3], the following subsections first define the collaborative and knowledge-based recommendation paradigms.
User-based collaborative filtering exploits similarities be-tween users to make predictions. The approach taken here is memory-based user-to-user correlation, as the user neighbor-hood for a new user has to be computed while the system is operating. Collaborative filtering has the advantage of neither requiring the acquisition of domain knowledge prior to system deployment nor structured product descriptions. Therefore, product records can be solely represented by a unique identifier. However, collaborative filtering assumes the existence of recorded community transactions. The first step is neighborhood formation where users similar to the current user are identified. In our situation user models consist of attribute-value pairs that can be interpreted as nominal ratings. User similarities are computed from the set of u  X  X  explicit requirements Rq u . For instance, according to our introductory example Rq Sue = { gift, none, 40 } .
In our implementation we use the Dice coefficient [12] to determine the similarity between two users u and v , i.e.:
In order to derive recommendations the k-Nearest Neigh-bor method is used. Besides merely storing a user X  X  require-ments, the profile of each user v also contains a set of binary ratings on items R v which were actually bought by v , e.g. R
Sue = { 1 } . Thus rec cf ( i, u ) computes the most frequent successful transactions in u  X  X  neighborhood of users N u the set of peers from the community), where the neighbor-hood size is limited by k , i.e. | N u | X  k . For a more comprehensive presentation of the details of col-laborative filtering the reader is referred to Schafer et al. [23].
This type of RS requires a knowledge base containing do-main heuristics which are used to decide which items should be recommended. Preference rules that consist of a condi-tion ( If . . . ), a consequent ( then . . . ) and an optional prior-ity value are a straightforward and natural representation mechanism. These logical implications bridge the gap be-tween abstract user requirements like looking for a gift or having no smoking experience and more technical product characteristics such as brand names or different formats. If none of the items in the product repository satisfies all appli-cable restrictions, then lower priority personalization filters can be relaxed until at least n items are part of the result set (see for instance [17, 15] for a discussion on relaxation strategies).

Note that knowledge-based recommenders in their pure form (as opposed to utility-based ones) do not compute util-ity scores or a ranking for recommended items, but solely decide if an item is part of their result set or not. Therefore, rec kb is defined as follows:
The knowledge-based RS takes the knowledge base itself ( KB ) and the user model of the current user ( UM u ) as input. The assumed utility of an item i for user u is 1 and therefore recommended if item i is inferred by the reasoning procedure of the recommender system ( ` rs ) and 0 otherwise.
However, in case the knowledge base consists solely of soft preference constraints c that are annotated with a priority value p c , it is possible to compute utility scores for each item as follows: Consequently, rec 0 kb ( i, u ) is the sum of priorities of those constraints that do not need to be relaxed in order to have the range 0..1. In our evaluation we rank the knowledge-based recommendations according to their utility scores.
Typically, the knowledge base is engineered with the help of domain expertise. We denote a knowledge base that was acquired from domain experts KB exp .
According to Burke X  X  taxonomy of hybrid algorithm de-signs, the proposed approach can be classified as a meta-level variant [8]. Its primary characteristics are that the re-sults of one recommender system form the input of another. A meta-level collaborative constraint-based hybrid employs collaborative filtering to generate rule-based preferences for a knowledge-based RS. Hence the collaborative filtering al-gorithm does not recommend items from the product cat-alog but rather from the constraint base ( KB gen ) that ex-press functional dependencies between formulated user re-quirements and the respective product properties of bought items. These constraints can be pre-generated offline from community data and not at runtime when a user u requests a recommendation.

This preprocessing step utilizes rule templates T and takes the user models of a set of users U as input. Furthermore, a product catalog I that contains the product properties prop for all items i has to be available. The user model for user u consists of a set of requirements Rq u and actually bought items or unary ratings R u . Consequently, in a preprocessing step a set of rule-based preferences C u for each user model u is generated as follows:
C u = { rq  X  prop i | rq  X  Rq u  X  i  X  R u  X  prop i  X  I  X  T } (6)
Note, that all generated constraints must be consistent with the rule templates T in order to avoid the automated generation of spurious functional dependencies. T is a logi-cal expression on rq and prop that restricts rule-based pref-erences to a limited set of patterns. For instance, in the motivating example only three different forms of preference rules have been allowed. Thus, T was defined as follows: T : rq = for whom  X  prop = brand  X  rq = experience  X  prop = format  X  rq = cost  X  prop = price .

The collaborative filtering step consequently recommends all rule-based preferences from the neighborhood of the cur-rent user and thus treats these constraints as  X  X tems X . The utility scores for each constraint c that is contained in the result set of the collaborative recommendation step for user u are summed up according to equation (2).

The result set and thus the recommended knowledge base consists of all rule-based preferences from users in the neigh-borhood of u . Consequently, the resulting knowledge base of collaborative filtering forms the input model for the subsequent knowledge-based recommendation step. Note, that in the following equation we abbreviate rs cf ( u ) by KB u for reasons of read-ability. rec meta ( i, u )= 1 P Thus, the meta-level recommender rec meta ( i, u ) returns in analogy to knowledge-based recommendation an utility score for each item with the difference that priorities are dynam-ically determined by the scores of the collaborative filter-ing step rec cf ( c, u ) . In the following we evaluate the pro-posed method and research the hypothesis that the pro-posed meta-level hybrid is advantageous in terms of accu-racy and serendipity of produced results compared to an existing knowledge-based RS.
The evaluation is based on a dataset extracted from log information and profiling data of a conversational recom-mender system for premium cigars over a period of 12 months (Mar/07 -Feb/08). We identified 339 sessions of different anonymous users ( U ) that interacted with the conversational recommender system and actually added an item to their basket. The dataset comprises a total of 2791 explicit user requirements ( Rq ) and 449 bought items ( R ) that are in-terpreted as binary ratings. Furthermore, a total of 143 different items ( I ) are offered by the webshop. The spar-sity level of the dataset is extremely high and it can be computed as the share of empty entries in the user-item ma-trix 1  X  | R | | I | X | U | which results in a sparsity level of 99,07% ( | R | = 449 , | I | = 143 and | U | = 339 ). Note, that the num-ber of explicit user requirements does not impact upon the sparsity level itself as only product items will have to be predicted.

We compared an existing knowledge-based algorithm RS exp with our proposed collaborative knowledge-based meta-level hybrid RS meta with respect to accuracy and serendipity. Furthermore, another knowledge-based variant ( RS gen ) was developed that acts as a baseline method, applying all the constraints that have been generated from community trans-actions. The knowledge base of the RS exp variant was de-veloped with the help of domain experts in 2003. Since then it has been used to make knowledgeable recommendations to users of the online e-commerce platform www.premium-cigars.ch . A total of 47 filter rules encode recommenda-tion knowledge that takes the experience level, taste and format requirements as well as quantity and price prefer-ences into account. More details on the knowledge base are given in previous work [25, 24]. The knowledge-base is en-acted by the conversational Advisor Suite recommender [14]. The RS gen and RS meta algorithms do not start with any prior domain knowledge (except for some rule templates) but solely exploit the community transactions. However, RS gen lacks the collaborative filtering step that personalizes the knowledge base according to the current user X  X  neighbor-hood. For our experiments only binary constraints were gen-erated, each combining a restriction on a user requirement and a product property.

The two knowledge-based recommenders RS exp and RS gen produce ranked lists as described in Subsection 3.2 and RS uses the ranking scheme described in Subsection 3.3.
Each of the 339 user sessions is represented by a user model containing a set of requirements ( Rq ) and a set of identifiers of those items that caught the user X  X  attention ( R ), i.e. were added to the basket. The evaluated algorithms do not require the current user X  X  ratings for determining her neighborhood but solely her Rq . Therefore a Given 0 eval-uation method is applied where all rated items R are used for testing (i.e. testset u = R u ).

The RS meta and RS gen methods require community data in order to determine a knowledge base. Furthermore, the experiments followed a leave-one-out approach, where all user models except the one of the current user were exploited for learning the model that is then applied on the current user model for making predictions. The experiments were conducted exactly once for each user and due to the Given 0 method the testset, i.e. R , was static for each user. At most ten recommendations were computed for each user, i.e. for a user u , | recset u | = 10 for all experiments. It is assumed that recommendations contained in the testset are success-ful hits, i.e. hits u = recset u  X  testset u . The accuracy of recommendations is computed using the Precision (Prec), Recall (Rec) and F1 metrics [22, 13]: The Precision metric gives the share of successful recom-mendations from the total number of computed recommen-dations, while the Recall metric computes the ratio of hits and the theoretical maximum number of hits due to the test-ing set size. The average test set size is 1.32 ( | R | | U | quently, if it were possible to predict all items in the testing set, Recall would be 100% but Precision only around 13%! Another important metric in our evaluation is the Catalog Coverage metric ( CC ): Table 4: Results on RS gen , RS exp and RS meta with different neighborhood sizes k Algorithm Prec Rec F 1 CC RS gen 0.97% 7.35% 1.72% 22.38% RS exp 2.03% 7.80% 3.22% 90.91% RS meta , k = 1 1.30% 9.8% 2.29% 98.60% RS meta , k = 5 1.74% 13.14% 3.07% 86.01% RS meta , k = 10 1.59% 12.03% 2.81% 70.63% RS meta , k = 15 1.48% 11.14% 2.60% 64.34% RS meta , k = 20 1.48% 11.14% 2.60% 57.34% RS meta , k = 25 1.36% 10.25% 2.40% 54.55% RS meta , k = 30 1.24% 9.35% 2.19% 51.75% RS meta , k = 50 1.24% 9.13% 2.14% 41.26% This indicates the proportion of items that are ever recom-mended to a user [13] and it can be used for analyzing the diversity or serendipity of recommendations.
Table 4 presents the performance of the RS exp and RS gen algorithms as well as the different RS meta variants. For collaborative learning of the knowledge base the neighbor-hood size k was varied from 1 to 50, where k = 1 means that only constraint candidates from the most similar peer in the community became part of the knowledge base and k = 50 signifies that constraints from the fifty most similar user profiles were considered.

As can be seen in Table 4, all recommenders outperform the RS gen that acts as a baseline. In terms of recall, the RS meta algorithm variants clearly achieve better results than the original RS exp approach (13.14% vs. 7.80%), indicat-ing that the collaborative knowledge-based hybrid is able to make much more accurate predictions, i.e. hits, than the traditional RS exp . Quite surprising, the RS gen algorithm obtains a comparable Recall as RS exp . However, RS exp reaches best results in terms of precision as the RS exp algo-rithm produces recommendation lists with on average 6.35 elements while the RS meta and the RS gen recommend ex-actly 10 items to each user. This is a side effect of the relaxation procedure implemented in the Advisor Suite sys-tem [14] that relaxes constraints in a stepwise manner if no single item fulfills all applicable constraints. We varied RS meta with different neighborhood sizes k from 1 to 50. Interestingly, five users seems to be the ideal neighborhood size. This can be explained by the fact that explicit user requirements are used for determining user similarities. As only relatively few different combinations of requirements are possible compared to product ratings combinations in traditional collaborative filtering, larger neighborhoods seem to add more noisy constraints to the derived result sets.
With respect to the serendipity of results we can observe that only the RS meta variant with a neighborhood size of one has a higher catalog coverage than RS exp . Interestingly, the catalog coverage continuously decreases as the neighborhood size k increases. An explanation for this behavior might be that larger neighborhoods place more weight on common constraints. Consequently, the knowledge base and thus the recommendation lists become less diverse.

To summarize, the evaluation showed that the RS meta hy-brid clearly increases the number of successful predictions in the given domain compared with the traditional RS exp approach. The variation of the neighborhood size impacts upon the accuracy of the algorithm and significantly re-duces the Catalog Coverage as a measure for the diversity of produced recommendations. However, these experiments should be seen as a first step, demonstrating some initial payoffs, however the exploration of further algorithm vari-ants as well as different evaluation scenarios remains as a topic for future research.
Knowledge-based and collaborative recommendation para-digms were also integrated into the FindMe systems for as-sisted browsing [10]. They use a cascaded hybridization ap-proach where collaborative filtering is utilized to discrimi-nate between items that fulfill the same set of constraints [6].

Adomavicius and Tuzhilin present the 1:1Pro system that mines customer transaction data to produce personalization rules [2]. Their innovation lies in proposing an expert-driven validation process that is facilitated by a sophisticated tem-plate mechanism and groupings [1]. Adding a validation step after the knowledge base is generated could be an interesting future extension to our work.

Mining association rules in itemsets to derive recommen-dations has already been described in [21]. However, in our approach more abstract rules that map user require-ments to product characteristics are identified. Further-more, O X  X ullivan et al. [18] explored data mining techniques to reduce the sparsity of rating matrices for collaborative fil-tering.

Felfernig et al. [11] presented an integrated environment for the development and maintenance of knowledge-based sales advisory applications that supports regression testing based on positive and negative test cases of the knowledge base after the completion of maintenance activities. Never-theless, knowledge base development and maintenance tasks are still primarily manual activities that have to be per-formed by domain experts while our approach is based on automated knowledge acquisition.

The idea of reducing the knowledge acquisition bottleneck when constructing knowledge bases for expert system has al-ways been an active research area. For instance Pham and Dimov proposed an efficient mining algorithm for deriving IF-THEN rules from positive and negative examples [19]. However, in our case we do not construct a single knowl-edge base for all users, but rather the collaborative filtering paradigm dynamically constructs a personalized knowledge base for each user.

Another line of related work lies in the manual construc-tion of knowledge bases from domain expertise. Ainscough et al. for instance researched this issue from the viewpoint of Marketing Science [4]. They described the manual ac-quisition of selling expertise from the sales scripts of several sales experts, while we propose the automated acquisition of this knowledge from past transaction data.
This paper proposed a meta-level hybrid that utilizes col-laborative filtering to learn personalization constraints. This dynamically determined knowledge base subsequently forms the input for a knowledge-based recommendation algorithm for the computation of personalized recommendations. The approach mines functional dependencies between disclosed user requirements and product properties that are employed for generating recommendations. An evaluation indicated that the new algorithm produces more accurate results than an algorithm using a manually encoded knowledge base with domain expertise. Future work will develop the technique further to cope with n-ary constraints as well as explore ad-ditional application scenarios for this technique such as the validation of expert knowledge or the partial automation of knowledge base maintenance activities. [1] G. Adomavicius and A. Tuzhilin. Expert-driven [2] G. Adomavicius and A. Tuzhilin. Using data mining [3] G. Adomavicius and A. Tuzhilin. Towards the next [4] T. L. Ainscough, T. E. DeCarlo, and T. W. Leigh. [5] M. Balabanovic and Y. Shoham. Fab: Content-based, [6] R. Burke. Integrating knowledge-based and [7] R. Burke. Knowledge-based recommender systems. [8] R. Burke. Hybrid recommender systems: Survey and [9] R. Burke. Hybrid web recommender systems. In The [10] R. D. Burke, K. J. Hammond, and B. C. Young. The [11] A. Felfernig, G. Friedrich, D. Jannach, and M. Zanker. [12] W. B. Frakes and R. Baeza-Yates, editors.
 [13] J. L. Herlocker, J. A. Konstan, L. G. Terveen, and [14] D. Jannach. Advisor suite -a knowledge-based sales [15] D. Jannach. Finding preferred query relaxations in [16] K. McCarthy, J. Reilly, L. McGinty, and B. Smyth. [17] N. Mirzadeh, F. Ricci, and M. Bansal. Supporting [18] D. O X  X ullivan, B. Smyth, and D. Wilson. Preserving [19] D. Pham and S. S. Dimov. An effient algorithm for [20] F. Ricci and H. Werthner. Case base querying for [21] B. Sarwar, G. Karypis, J. Konstan, and J. Riedl. [22] B. Sarwar, G. Karypis, J. Konstan, and J. Riedl. [23] J. B. Schafer, D. Frankowski, and J. H. S. Sen. [24] M. Zanker and M. Jessenitschnig. Case-studies on [25] M. Zanker, M. Jessenitschnig, D. Jannach, and
