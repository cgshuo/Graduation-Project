 With the abundance and ubiquity of mobile devices, a new class of applications is emerging, called participatory sensing (PS), where people can contribute data (e.g., images, video) collected by their mobile devices to central data servers. However, privacy concerns are becoming a major impedi-ment in the success of many participatory sensing systems. While several privacy preserving techniques exist in the con-text of conventional location-based services, they are not directly applicable to the PS systems because of the extra information that the PS systems can collect from their par-ticipants. In this paper, we formally define the problem of privacy in PS systems and identify its unique challenges as-suming an un-trusted central data server model. We propose PiRi, a privacy-aware framework for PS systems, which en-ables participation of the users without compromising their privacy. Our extensive experiments verify the efficiency of our approach. With the advent of mobile technology, the area of partic-ipatory sensing (PS) [6] has attracted many researchers in different domains such as public health, urban planning, and traffic. The goal is to leverage sensor equipped mobile de-vices to collect and share data, which can later be utilized for analysis, mining, prediction or any other type of data processing. While many unsolicited PS systems exist (e.g., Flickr, Youtube), in which users participate by arbitrarily collecting data, other PS systems are campaign -based, which require a coordinated effort of the participants to collect a particular set of data that the server requires for any pur-pose. Some real-world examples of PS campaigns include [15; 20; 2], where users leverage their mobile devices to col-lect traffic information. In CycleSense [1], bikers document their trajectories along with other data modalities (e.g., pol-lution, traffic, accidents). In [24], the focus is on participa-tory texture documentation, where users, in a coordinated effort, aim to collect maximum amount of urban texture in-formation from a set of predefined locations.
 However, privacy concerns are the significant barriers to the success of any participatory sensing campaign, which delay the progress of massive deployment of such systems. Con-sider a scenario where the goal of the PS campaign is to col-lect pictures/videos from the anti-government riots at differ-ent locations of a city with the coordinated effort of the par-ticipants. Accordingly, each participant u should query the server for the set of closeby locations from which data (e.g., picture, video, temperature) needs to be collected (termed data collection points or DC-points ). These are the DC-points that are closer to u than to any other participant. However, u may not be willing to disclose his identity due to safety reasons. An alternative is that u sends his query to a trusted server, known as anonymizer . The anonymizer re-moves the user X  X  ID from the query and forwards the query to the server. However, the server requires u  X  X  location infor-mation to answer the query. Due to the strong correlation between people and their movements (see [12]), a malicious server can identify u by associating his location information to u . For example, if u issues the query from his home, his identity can be easily revealed by linking the home address to u using the online white page services. Thus, the server can identify a query issuer by associating the query to the location from which the query is issued. We refer to this process as a location-based attack. Our goal in this paper is to protect the campaign participants from location-based attacks by disassociating a query from the query location. Existing privacy preserving techniques have been proposed to address these concerns in the context of location-based services (LBS) [18; 21; 7], one of which is spatial K-anonymity (SKA) . The idea behind SKA is that user blurs his loca-tion among K -1 other users, such that the probability of identifying the query issuer does not exceed 1/ K ,evenif in the worst case all the user locations are known to the adversary. The existing studies on cloaking techniques are classified into three categories: centralized, distributed, and peer-to-peer, of which the first two are not applicable to the highly adhoc mobile P2P environments because of their re-liance on a fixed communication infrastructure and central-ized/distributed servers. Thus, we focus on SKA approaches in P2P environments.
 Unfortunately, certain characteristics of a PS campaign dis-tinguish it from conventional LBS, and therefore, prevent a direct adaption of SKA to such systems. One characteristic of a PS campaign is that in order to collect data through a coordinated effort, all the participants query the PS server for the closeby DC-points. This is in contrast to LBS which serves millions of users from which any arbitrary subset of them might ask query at a given time and location. We refer to this as the all-inclusivity property. Another characteris-tic of a PS campaign, is that each participant queries for all the DC-points, which are closer to him than to any other participant. Thus, the second property of the PS campaign is that each participant asks a range query from the server which is dependent on the location of other users. We refer to this property as range dependency . These two properties, which reveal extra information to the server as compared to the conventional LBS, introduce major privacy leaks to the system. Thus, the system becomes unresilient to location-based attacks.
 In this paper, we devise a privacy-aware framework for PS campaigns, which addresses these two major privacy leaks. Our approach, termed PiRi has the two following prop-erties: P artial-i nclusivity and R ange i ndependence. PiRi is based on the observation that the range queries sent by participants have significant overlaps. Therefore, instead of each participant asking a separate query, only a group of the representative participants ask queries from the server, and share their results with those who have not posed any query. Moreover, instead of each participant submitting a range query, which is dependent on other participants X  lo-cations, we propose an adjustment technique that adjusts the range query such that the query becomes independent of the others.
 A preliminary version of this work appeared as a short paper in [17], where the privacy problem in PS systems was intro-duced, and the PiRi approach was briefly discussed. This article subsumes [17] by delving into more details of the pro-posed approach as well as defining a new metric for quanti-fying the privacy leak in the PS campaigns, with which we can measure the resilience of our system to location-based attacks. Finally, in this paper we include our experimental studies that show the efficacy of our approach. Our exten-sive experiments show that our PiRi approach is 98% more resilient to such attacks, while the extra communication cost is tolerable.
 The remainder of this paper is organized as follows. Section 2 reviews the related work. In Section 3, we discuss some background studies, formally define our problem, and dis-cuss our system model. Thereafter, in Section 4 we explain our PiRi approach. Section 5 presents the experimental re-sults. Finally, in Section 7 we conclude and discuss the future directions of this study. Privacy preserving techniques have been studied in the con-text of location-based services. One category of techniques [9; 26; 18] focuses on evaluating the query in a transformed space, where both the data and query are encrypted, and their spatial relationship is preserved to answer the location-based query. However, many of the transformation tech-niques fail to guarantee practical query accuracy. Another group of well-known techniques in preserving users X  privacy is the spatial cloaking technique [10; 7; 4; 8; 21; 16], where the user X  X  location is blurred in a cloaked area, while satisfy-ing the user X  X  privacy requirements. An example of spatial cloaking is the spatial K -anonymity (SKA) [25], where the location of the user is cloaked among K -1 other users. While any of the privacy preserving techniques can be utilized to protect the users X  privacy, in this paper without loss of gener-ality we use cloaking techniques due to the following reasons: 1) accuracy and 2) popularity in different environments (i.e, centralized, distributed, peer to peer).
 Most of the SKA techniques assume a centralized archi-tecture [4; 8; 21; 16], which utilizes a trusted third party known as location anonymizer . The anonymizer is responsi-ble for first cloaking user X  X  location in an area, while satisfy-ing the user X  X  privacy requirements, and then contacting the location-based server. The server computes the result based on the cloaked region rather than the user X  X  exact location. Thus, the result might contain false hits. The centralized ap-proach has two drawbacks. First, the centralized approach does not scale because the users should repeatedly report their location to the anonymizer. Second, by storing all the users X  locations, the anonymizer becomes a single point for attacks. To address these shortcomings, recent tech-niques [10] focus on distributed environments, where the users employ some complex data structures to anonymize their location among themselves via fixed infrastructures (e.g., base stations). However, because of high update cost, these approaches are not designed for the cases where users frequently move or join/leave the system. Therefore, alter-native approaches have been proposed [7] for unstructured peer-to-peer networks where users cloak their location in a region by communicating with their neighboring peers with-out requiring a shared data structure. In this paper, we em-ploy the P2P spatial cloaking techniques to hide the user X  X  location when querying the PS server.
 Despite all the studies about privacy in the context of LBS, only a few work [14; 23; 13] have studied privacy in partici-patory sensing. In [23], the concept of participatory privacy regulation is introduced, which allows the participants to decide the limits of disclosure. Moreover, in [14; 13], differ-ent approaches are proposed, which focus on preserving pri-vacy in a PS campaign during the data contribution, rather than the coordination phase. That is, these approaches deal with how participants upload the collected data to the server without revealing their identity, whereas our focus is on how to privately assign a set of data collection points to each par-ticipant. The combination of private data assignment and private data contribution forms an end-to-end privacy-aware framework for the PS systems. As discussed in Section 2, we start by using the P2P SKA to address the privacy problem in participatory sensing. Here, we provide a background on the P2P SKA approach.
 The idea of P2P SKA approach (see [7]) is that a user com-municates with his neighboring peers via multi-hop routing to find at least K -1 other peers. Each user has two privacy requirements: K ,and A . K is the minimum number of users in the cloaked region, and A is the minimum area of the cloaked region. After satisfying the K -anonymity require-ment, the user extends the cloaked region to A , so that the minimum area privacy requirement is also satisfied. Con-sequently, the user sends his spatial query along with the cloaked region to the server. The server is equipped with a privacy-aware query processor, which computes a minimal answer set that contains the user X  X  exact result. After re-ceiving the answer set from the server, the user refines the answer set to retrieve the exact result.
 Figure 1 illustrates an example of a privacy-aware range query, where user U 1 issues a query with K = 4 and a ra-dius of 3 (i.e., r = 3). He first collaborates with his neigh-bors through multi-hop routing to form the cloaked region with 3 other peers. After sending the cloaked region (solid lined rectangle) along with the range query to the server, the query processor determines the minimal answer set (i.e., the answer to the range query for every point in the cloaked region). The reason is that the server does not know which of the 4 users asked the query. According to [7], the minimal answer set includes all the objects inside the region as well as all the objects within the radius of 3 from every point on the edges of the cloaked region (i.e., all the objects inside the dotted line rectangle). This guarantees no missing hits, but probably includes some false hits. Consequently, once U 1 receives the answer set, he can refine it to retrieve all the objects within the radius of 3 from his location. A major focus in the PS campaign is to design a framework in which each participant is assigned to a set of data collec-tion points (DC-points), where data should be collected. In this section, we formally define this problem.

Definition 1 (Participatory Assignment). Given a campaign C ( P,U )  X  R 2 ,with P as the set of DC-points, and U as the set of participants, the Participatory Assignment (PA) problem is to assign to each participant u  X  U any DC-point p  X  P , such that p is closer to u than to any other participant in U .
 Note that for simplification, we define the assignment prob-lem for a given snapshot of time and location. That is, we do not assume the participants move during the assign-ment. This seems intuitive, since participants usually plan their paths from their residential location (e.g., home, office) before starting their movement. Moreover, participants are the current active users of the system willing to participate in the process.
 In order to solve the PA problem, a straightforward solu-tion is that each participant sends his location to the server. The server then assigns to each participant the set of DC-points close to him by computing the Voronoi diagram of the participants. Figure 2 depicts such scenario. The for-mal definition of the Voronoi diagram is as follows.
Definition 2 (Voronoi Diagram). Given an environ-ment E ( U )  X  R 2 ,with U as the set of participants, the Voronoi diagram of U is a partitioning of E into a set of cells, where each cell V u belongs to a participant u ,andany point p  X  E in the cell V u is closer to u than to any other participants in the environment. Here, the closeness between two points is defined in terms of Euclidean distance. Figure 1: Illustrating an example of privacy-aware range query Figure 2: Illustrating the assignment of DC-points to the participants Once the server computes the Voronoi diagram of the partic-ipants, it forwards to each participant u , all the DC-points lying inside the corresponding cell V u . However, in many scenarios the server is not trusted, and therefore, a partici-pant may not be willing to reveal his identity to the server. Even if the participant hides his identity from the server (i.e., only reveals his location), due to the strong correlation between people and their movements ([12]), a participant can still be identified by his location. In the following, we first formally define our privacy attack. Thereafter, we de-fine the privacy problem.

Definition 3 (Location-based attack). Alocation-based attack is to identify a query issuer by associating the query to the query location (i.e., location from which the query is issued).
 Definition 4 (Problem Definition). The Privacy-Aware Participatory Assignment (PAPA) problem is a vari-ation of the PA problem (Definition 1), in which the goal is to protect participants X  identity from location-based attacks. In this section, we first describe our privacy threat model, and then discuss our system architecture which consists of two entities, participants and the PS server.
 Our assumption is that participants trust each other, and do not reveal any sensitive information about their peers. How-ever, they trust neither non-participant nor the PS server. We refer to any such entity as adversary . Moreover, the adversary, if needed, can obtain the locations of all par-ticipants [11]. The reason is that participants often issue their queries from the same locations (office, home), which can be identified through physical observation, triangula-tion, etc. In general, since it is difficult to model the exact knowledge available to the adversary, this is a necessary as-sumption to guarantee that the privacy preserving technique is secure under the most pessimistic scenario. That is, even though the participants X  locations might be known to the adversary, it should not pose a threat (i.e., location-based attack) to the system if the system can successfully disasso-ciate the queries from their locations. The adversary is also aware of the anonymization technique which is used by the participants. However, each participant determines his own privacy level, which is only available to himself. Moreover, each user must register with the server, receive the cam-paign password, and become the campaign participant be-fore communicating with other campaign participants. Fi-nally, in order to guarantee the pseudonymity of partici-pants X  location information, each query is assigned with a unique pseudonymous identity, which is totally unrelated to the participants X  X  personal identity.
 Our PS server which contains the list of DC-points is equipped with a privacy-aware query processor, which processes the queries issued by the participants. Each participant can de-termine his privacy level, by specifying two parameters: K , and A . K determines the K -anonymity, and A specifies the minimum resolution of the cloaked region. Each participant is equipped with two wireless network interface cards. One is dedicated to the communication with the PS server through a base station or wireless modem. The other one is dedi-cated to the P2P communication among the peers through a wireless LAN, e.g., Bluetooth or IEEE 802.11. Also, each participant is equipped with a positioning device, e.g., GPS, which can determine its current location. As already discussed, to solve the PAPA problem, partici-pants cannot share their locations with the untrustworthy server for the assignment of DC-points. Therefore, the cen-tralized solution to the PA problem is no longer applicable to the PAPA problem. Thus, one baseline solution is that participants communicate among their peers to compute their Voronoi cell. Thereafter, each participant performs a privacy-aware range query to retrieve all the DC-points inside his Voronoi cell. The participant asks such query by applying the P2P SKA technique. That is, the participant blurs his location in a cloaked area among K -1 other peers, and sends the cloaked area, along with a radius r as the range query to the server. Note that the radius r represents the radius of the smallest circle which contains the partic-ipant X  X  Voronoi cell. Consequently, the server responds to each participant by sending to him all the DC-points with respect to the range query submitted by any point inside the participant X  X  cloaked area. Finally, the participant obtains the final assigned DC-points by refining the retrieved result from the server.
 However, this baseline approach has major privacy leaks, which originates from the two characteristics of a PS cam-paign: all-inclusivity and range dependency. These proper-ties give enough information to the server with which the server can easily identify each participant by linking his query to the query location. This gets even easier, if the server knows the exact locations of all the participants. The reason is that on one hand the server receives a set of query regions, and on the other hand, the server has the query locations. Each query region overlaps with a set of partic-ipants, one of which have issued the query. Therefore, the server can associate the query to its location by solving a matching problem between these two sets of data. As a re-sult, the more information the server has, the more correct matches it can find between the queries and query locations. Consequently, the baseline approach is not applicable to our PAPA problem.
 Our PiRi approach overcomes the drawbacks of the baseline approach by preventing these privacy leaks. The intuition is to avoid sharing any extra information with the server, as compared to conventional LBS, such that the adversary cannot use the gathered data in the server to compromise the system. Hence, our algorithm has two major steps. The first step is Query Formation , where each participant com-putes his Voronoi cell in a distributed fashion, and forms his cloaked region. In this step, an adjustment technique is applied to the query, which guarantees the range indepen-dency. In Section 4.1, we explain this step in more details. In the second step, Query Selection (Section 4.2), a voting mechanism is devised to select the set of representative par-ticipants, whose cloaked regions should be sent out to the server. These query results will later be shared with the rest of the participants. This step prevents the all-inclusivity leak. To solve the PAPA problem, a set of DC-points those in-side his Voronoi cell, should be assigned to each participant. This indicates that each participant should first compute his Voronoi cell to form the spatial range query. Thereafter, by employing the P2P SKA technique, the participant forms a privacy-aware range query. However, the problem is that the range query is dependent on the size of the participant X  X  Voronoi cell (range dependency), which is a potential for information leak. Therefore, at this phase, we adjust the size of the range query, such that the privacy-awareness of the range query is guaranteed. In the following, we first briefly explain how the Voronoi cell of every participant is computed. Subsequently, we explain the cloaking step. Figure 3: Illustrating an example of query formation for a single participant In order to compute the Voronoi diagram, any distributed algorithm for Voronoi diagram computation can be applied [5; 3; 22]. In this paper, we employ the technique from [3], called Completely Cooperative (CC) . In order to compute the Voronoi cell of a participant, the CC approach has two major steps: 1) finding the Voronoi neighbors for the partic-ipant, and 2) computing the boundary of the cell by solving the geometric intersection of bisectors between the partici-pant and the neighbors. The idea behind the CC approach is that instead of participants sending out queries to the net-work for discovering their Voronoi neighbors, the neighbors inform each other about any potential Voronoi neighbor. Once the Voronoi neighbors of a participant are identified, the participant computes his Voronoi cell by intersecting the bisectors of the neighbors.
 Figure 5 depicts the pseudo-code for the query formation step. After the Voronoi cell computation, every participant u forms a spatial range query, which contains the Voronoi cell, along with a cloaked region to send out to the server. That is, u computes a radius r u , which is the radius of the smallest enclosing circle of his Voronoi cell (line 2). This forms the spatial range query. Figure 3 depicts an exam-ple of the query formation for the participant U 1 of Figure 2, where U 1 computes his Voronoi cell, and the radius r 1 respectively. Thus, the circle with radius r 1 is the smallest enclosing circle of U 1  X  X  Voronoi cell. Next, as stated in line Figure 4: Illustrating an example of Range dependency 01. let V i = Voronoi cell of U i ; 02. let r i = radius of smallest enclosing circle of V i ; 03. let r max =0; 04. let CLR i = cloaked region of U i ; 05. for each peer p inside CLR i 06. let r j = radius of smallest enclosing circle of V j 07. let r max =max( r max ,r j ); 08. return ( CLR i , r max ); 4 of Figure 5, the participant, using the technique explained in Section 3.1, forms a cloaked region, in which his location is blurred among K -1 other peers (the solid lined rectangle in Figure 3).
 Consequently, the participant U i can send the cloaked region along with the radius r i to the server to retrieve all the DC-points, which lay inside his Voronoi cell. The problem is that each of the K participants in the cloaked region, termed local peer , has a different Voronoi size, and therefore, a different r is associated with each. Considering an extreme scenario where the server knows the locations of the participants, it also knows their Voronoi cells and therefore, the radius r each of them. Consequently, the server can easily identify the query issuer (i.e, the set of all participants in the cloaked region with radius r ). Figure 4 depicts such scenario, where U 1 (black-filled circle) cloaks himself with U 2 , and sends the cloaked region along with radius r 1 to the server (see the size of r 1 as compared to r 2 ). The server, knowing the location of the participants, and hence their Voronoi cells (i.e., r 1 r ), relates the query with radius r 1 to its query location (i.e., the location of a participant with the Voronoi cell of thesameradius).
 In order to avoid the range dependency leak, each partici-pant U i should not only cloak his location among K -1 other peers, but also cloak his range query among that of the other K -1 peers. In other words, instead of forming his range query with radius r i , the participant forms his query with radius r max ,where r max is the maximum radius among all the K peers inside the cloaked region (lines 5-8 in Figure 5). This guarantees the K -anonymity at all times. In Fig-ure 3, R 1 (the dotted line rectangle) shows the query region formed by r max . Once all participants formed their query region, they can send it out to the server. Since the server is receiving queries from all participants, it can utilize the gathered information (i.e, query regions) from all participants to attack the system (all-inclusivity leak). Figure 6 illustrates such scenario. For simplicity, we assume that only users U 1 .. 3 participate in the campaign. The figure shows that U 1 cloaks himself with U Similarly, U 2 forms a cloaked region with U 1 . Consequently, both U 1 and U 2 form identical query regions. The figure also depicts that U 3 cloaks himself with U 1 . Accordingly, the server can easily identify U 3 by relating it to the query region R 3 ,since U 3 appears only once (i.e., R 3 )inallthe three submitted query regions to the server. This indicates the more participants submit queries to the server, the more information server has to infer the participants X  identities. Our algorithm attempts to prevent this leak by minimizing the number of queries submitted to the server, while assign-ing the closeby DC-points to every single participant. Figure 6: Illustrating an example of all-inclusivity leak In order to address this issue, we observe that there is a large overlap among the query regions of the participants. Therefore, by receiving the result from the server, one can share his result with all the peers whose Voronoi cells lay completely inside his query region. The question is how to select the group of representative participants. To answer this question, we should solve the following optimization problem.
 Definition 5 ( V -Cover). Given a campaign C ( P,U )  X  ,with P as the set of DC-points, and U as the set of par-ticipants, let R and V be the set of query regions and Voronoi cells for the set U , respectively, where R i corresponds to the query region for user U i ,and V i is the Voronoi cell for The V-Cover problem finds a set W  X  R that covers the entire set V with minimum cardinality.
 We now prove that the V -Cover problem is NP-hard by reduction from the minimum set cover problem. First, we state the minimum set cover problem.

Definition 6 (Minimum Set Cover). Let S = { s 1 , s 2 , ..., s m } be a collection of finite sets, s i  X  X , whose elements are drawn from a universal set U (i.e., m i =1 s i = U ). Minimum set cover finds a set C with minimum cardinality where C  X  S For example, assume U = { 1 , 2 , 3 , 4 , 5 } and S = { s where s 1 = { 1 , 2 , 3 } , s 2 = { 2 , 4 } , s 3 = { 3 , minimum set cover is C = { s 1 ,s 4 } . The minimum set cover problem is NP-hard. Consequently, the following theorem is entailed.
 Theorem 1. The V-Cover problem is NP-hard.

Proof. We prove the theorem by providing a polynomial time reduction from minimum set cover problem. Towards that end, we prove that given an instance of the minimum set cover problem, denoted by I s , there exists an instance of the V -Cover problem, denoted by I v , such that the solution to I s can be converted to the solution of I v in polynomial time. Consider a given I s having U as the universal set, S = { s 1 , s 2 ,..., s m } where s i  X  U ,and m i =1 s i = I , we select a set C  X  S , with minimum cardinality, to cover all the elements in U . Correspondingly, to solve I we look for a W  X  R , with minimum cardinality, such that all the Voronoi cells in V are covered with the query regions in
W . Therefore, we propose the following mapping from I s components to I v components to reduce I s to I v . Suppose the universal set U corresponds to the set of Voronoi cells V . The intuition behind this mapping is that with I s we want to cover each element in U and accordingly we aim to cover all the Voronoi cells in V .Each s i  X  S is mapped to a query region R i  X  R as selection of sets in I s corresponds to selecting the query regions in I v . We next explain each mapping in detail.
 For mapping S to R , we assume there exists a query region R i  X  R corresponding to s i  X  S . Next, we assume a Voronoi cell V j  X  V exists corresponding to U j  X  U . V j is covered by R i  X  R (i.e., it falls completely inside R i ) if and only if U j  X  s i .Itiseasytoobservethatiftheanswerto I v is the set W ,theanswerto I s will be the set C = { s i | R i  X  W } This completes the proof.
 According to the above theorem, we can employ any heuris-tic that solves the set cover problem to solve the V -Cover problem. One of the well-known approaches for solving the set cover problem is a greedy algorithm which is based on the following heuristic: at each stage of the algorithm, pick the set with the largest number of uncovered elements [19]. Consequently, in order to solve the V -Cover problem, during each step of the algorithm, we should pick a representative participant whose query region covers the largest number of uncovered Voronoi cells from V . However, this approach is applicable only in a centralized structure, where a global knowledge of the environment is available. In the V -Cover problem with a distributed architecture, each participant only has knowledge about his local peers and their Voronoi cells. Therefore, making globally optimal choices (i.e., pick-ing the query region, which covers the largest number of Voronoi cells) at every step is nontrivial, and also costly. To address this issue, our goal is to extend the greedy heuris-tic to support the distributed architecture. Hence, we im-plement a voting mechanism, so that the participants agree locally among their neighbors on selecting a set of represen-tatives. That is, each participant picks a peer from the set of his local peers, based on the score value associated to them. Intuitively, the score value captures how significant a partic-ipant is in representing other peers, which is defined based on 1) the number of local peers covered 1 by his query region ( K ), and 2) the number of query regions covering each of his local peers. According to (1), a participant with large query region (i.e., large K ) is assigned with a high score value. However, as (2) suggests, the number of query regions that cover each of those local peers also affects the score value. Consider the example of Figure 6, where the query region of each of the three participants covers two peers. However, as the figure shows, R 3 is the only query region covering and therefore a higher score should be assigned to U 3 . The pseudo-code of our algorithm is shown in Figure 7. We explain the details of the voting mechanism with the exam-ple of Figure 2, where only the participants U 1 .. 8 are the
Henceforth, for brevity we use the expression covering a peer to refer to covering the Voronoi cell of that peer . active users. The voting mechanism starts by assigning the score values to the participants. The score value for each participant is determined by his local peers based on the im-portance of the participant to any of them. Consequently, each participant computes the final score by summing up all the partial scores he receives from the local peers. The algorithm starts by each participant sending his cloaking pa-rameter K to all his local peers (lines 7-8 of Figure 7). Table 1 depicts the value K foreachparticipant U i along with the set of peers that his query region R i contains. For exam-ple, U 1 forms a 3-anonymous query, and his query region, R ,contains U 1 , U 2 ,and U 3 . Therefore, U 1 sends the value K = 3 to both U 2 and U 3 . Accordingly, every participant receives the parameter K with respect to all query regions in which he resides (termed container regions ). Table 2 illus-trates the container regions for every participant (e.g., R ,and R 7 are the container regions for U 2 ).
 Subsequently, each participant assigns a partial score value to all his container regions, based on their K value, such that regions with larger K values are assigned with higher scores. Note that the sum of the scores that each participant gives to his container regions is normalized to 100 (lines 9-15 of Figure 7). For example, as Table 2 2depicts, U 3 assigns score valueof50tobothofhiscontainerregions R 1 and R 3 ,since both have K = 3. Thereafter, each participant computes his final score by summing up all partial scores he receives from his local peers (lines 16-17 of Figure 7). The final scores of the users are shown in the last column of Table 1. As the table shows, U 1 receives the scores { 25 , 37 , 50 } peers { U 1 ,U 2 ,U 3 } respectively, and therefore his final score adds up to 112.
 Finally, every participant sends his final score to all his local peers. By receiving the final scores of the container regions, each participant U i votes for the container region with the maximum score (lines 18-23 of Figure 7). Note that for con-tainer regions with equal scores, as tie breaker, the partici-
For simplifications, scores are rounded, and therefore, sum of the scores might not add up to 100.
 User Query Region K Users Score U 1 R 1 3 { U 1 , U 2 , U 3 } 25+37+50=112 U 2 R 2 2 { U 2 , U 8 } 25+28=53 U 3 R 3 3 { U 1 , U 3 ,U 4 } 25+50+50=125 U 4 R 4 3 { U 1 , U 4 ,U 5 } 25+50+37=112 U 5 R 5 2 { U 5 ,U 6 } 25+40=65 U 6 R 6 3 { U 1 , U 5 ,U 6 } 25+37+60=122 U 7 R 7 3 { U 2 , U 7 ,U 8 } 37+60+42=139 U 8 R 8 2 { U 7 ,U 8 } 40+28=68
Table 2: Score distribution among the container regions pant randomly votes for one. The voting results is shown in Table 3. For example, participant U 4 chooses R 3 among his container regions, since it has the maximum score. Accord-ing to Table 3, the final representatives are { U 3 ,U 6 ,U This indicates that only three of the participants should query the server. During the final process of voting, each peer U i informs the corresponding elected participant by sending him a message, which also includes his radius r i The reason for sending the radius r i is that once the repre-sentative receives the result from the server, he would know which part of the result set belongs to U i (the representative already knows U i  X  X  location during the SKA process). Once the query is issued, the representative filters the result on behalf of every local peer, and sends them the corresponding result. We conducted several simulation-based experiments to eval-uate the performance of our proposed approaches. Below, first we discuss our experimental methodology. Next, we present our experimental results. We performed three sets of experiments. With the first set of experiments, we evaluated the scalability of our proposed technique. For the rest of the experiments, we evaluated the impact of the participant X  X  privacy requirement and the transmission range on our approach. With these experi-ments, we used two performance measures: 1) communica-tion cost, and 2) privacy leak. We measured the communi-cation cost of our approach in terms of number of messages incurred by our algorithms per each participant. In order to measure the privacy leak, we defined a new metric for quantifying the privacy leak in the PS campaigns. We propose a new privacy leak (PL) metric to determine how successful the server is in associating the submitted User Vote
U 1 Max { R 1 (112), R 3 (125), R 4 (112), R 6 (122) } : R U 2 Max { R 1 (112), R 2 (53), R 7 (139) } : R 7 (139) U 3 Max { R 1 (112), R 3 (125) } : R 3 (125) U 4 Max { R 3 (125), R 4 (112) } : R 3 (125) U 5 Max { R 4 (112), R 5 (65), R 6 (122) } : R 6 (122) U 6 Max { R 5 (65), R 6 (122) } : R 6 (122) U 7 Max { R 7 (139), R 8 (68) } : R 7 (139) U 8 Max { R 2 (53), R 7 (139), R 8 (68) } : R 7 (139) queries to the query locations. We assume the worst case scenario, where the server knows the locations of the partic-ipants. Consequently, on one hand the server receives a set of query regions ( R ), and on the other hand, the server has the query locations ( L ). Each query region overlaps with a set of participants, one of which have issued the query. Therefore, the server can associate the query to its location by solving a matching problem between these two sets of data. Accordingly, a bipartite graph is formed with vertices composed of two disjoint sets L and R , where an edge con-nects L i to R j ,if L i is located inside R j . Since every is issued by a participant j , finding a maximum bipartite matching assigns every query to exactly one query location. The PL metric which measures the percentage of correct matches between L and R is defined as follows.
 PL = Number of correct matches between L and R where | R | is the number of query regions.
 To compare with a competitive work, since no existing work has been found, we compared our work with the baseline approach (BA), proposed in Section 4. Moreover, in or-der to separately show the effectiveness of each of the two properties of the PiRi approach, we compared the baseline approachwitheachofourtwoproposedtechniquescorre-sponding to each property denoted by Pi and Ri. That is, the Pi approach is a variation of PiRi that only addresses the all-inclusivity property (i.e., is only partial-inclusive and does not have the range-independence feature). Similarly, Ri approach is a variation of the PiRi approach, which is only range-independent. We ran 1000 cases, and reported the average of the results.
 We conducted our experiments with the objective of collect-ing a set of photos from 800 locations in part of Los Angeles county. These DC-points were randomly selected. More-over, our participants dataset includes snapshot locations of 500 mobile users moving in the same area. Since usually a limited number of users participate in a PS campaign, we set the default number of participants to 300, and vary it between 50 to 500. Moreover, we set the transmission range to 250 meters, and vary it between 50 to 250 meters. The degree of anonymity (K) for each participant varies between 5 to 20, with 5 as the default value. The minimum area requirement was set to zero in all cases. With the first set of experiments, we evaluated the scala-bility of our PiRi approach by varying the number of par-ticipants from 50 to 500. As Figure 8a depicts, the privacy leak is not much affected by the number of participants. The reason is that even though the overall information sent out to the server increases as the number of participants grows, the amount of information per participant remains the same, and hence, this does not affect the privacy leak. With the BA approach, the privacy leak is around 75% in all cases, whereas this value is decreased to 2% with the PiRi approach. This shows a significant improvement of PiRi over BA in preserving the privacy. Moreover, as the fig-ure shows, the Pi approach is the next best approach with ahugeeffectonPL(PL 10%). This confirms that the query selection has the most significant impact within the PiRi approach. The reason is that Pi focuses on minimizing the number of participants sending out queries, which lowers the chance of an accurate matching between the participants and the queries. The Ri approach, on the other hand, has the least impact on PL decreasing it to 65% as compared to the baseline approach. The reason is that query regions do not usually need a lot of expansion (i.e., adjustment) to meet the privacy requirements. This shows that the impact of the adjustment is not really substantial.
 Figure 8b shows the impact of varying the number of par-ticipants on the number of messages. As the figure shows, the number of messages slightly increases in most cases. In a denser network, more communication is required among the peers to perform their queries. We observe the largest increase with PiRi and Pi approaches, whereas this only has a slight impact on the BA approach. Moreover, the figure shows that the number of messages in the PiRi approach (35-50 messages per participant) is 3.5 to 5 times more than that of the BA approach. This is because of applying the extra steps in PiRi to preserve the privacy. In the next set of experiments, we evaluated the performance of our PiRi approach with respect to the participant X  X  pri-vacy requirement K varied from 5 to 20. Figure 9a illus-trates a decrease in the privacy leak as K grows. The rea-sonisthatanincreasein K results in higher privacy-aware queries, and therefore less privacy leak. The PL value in the BA approach decreases from 80% to 45%, whereas this value remains almost fixed for the PiRi approach (i.e., PL 0). Similar to the previous experiments, Pi closely follows PiRi for having the most impact on the privacy leak in all cases. Moreover, Figure 9b shows the effect of varying K on the communication cost. The figure illustrates that the number of messages increases with an increase in K .Thisis because as K grows, the size of the query regions increases, and therefore, more messages are transmitted in both phases of the PiRi approach. In the final set of experiments, we measured the performance of our approach with respect to increasing the transmission range from 50 to 250 meters. As Figure 10 shows, the pri-vacy leak is not affected by varying the transmission range. However, we see a decrease in the communication cost by increasing the transmission range. The reason is that with a higher transmission range, participants can communicate with their peers at a shorter hop distance. This reduces the communication cost. However, the overall information sent out to the server, which might reveal the query issuers X  identity, remains the same. Our main observation from our experiments is that with an extra cost the privacy is achievable in PS systems. In gen-eral, there is a tradeoff between the privacy and the com-munication overhead. According to the experiments, we ob-served a significant drop (up to 90%) in the privacy leak of the PiRi approach compared to that of the BA approach, whereas the communication overhead was higher than that of the BA approach. However, we argue that this cost is not a burden to the participants since this is only a one-time cost associated to assigning DC-points to the participants dur-ing the planning phase. Moreover, this communication over-head can be interpreted in two ways: a) messaging charges and b) power consumption , of which (a) is negligible since most P2P communications (e.g., Bluetooth) are either free or users pay fixed monthly charges. For the case of (b), since the focus is on planning for participants with fixed locations (i.e., home or office), we can assume that most participants have access to stable power sources. Thus, the battery con-sumption is less critical than the times where participants are constantly moving. In this paper, for the first time we introduced the problem of privacy-aware participatory assignment in PS systems. We proposed the PiRi approach, a solution to the PAPA prob-lem, which addresses the major privacy leaks in PS system. We also defined a new metric for quantifying the privacy leak in the PS campaigns. With our experiments, we demon-strated the overall efficiency of our approach in preserving the privacy in PS campaigns.
 As future work, we aim to extend the problem to the case where participants have different constraints (e.g., time, source and destination). Our goal is to incorporate these con-straints in the framework yet preserving the privacy of the participants.
 This research has been funded in part by NSF grant CNS-0831505 (CyberTrust), the NSF Integrated Media Systems Center (IMSC), and unrestricted cash and equipment gift from Google and Microsoft. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation. [1] Center for embedded networked sensing (cens). [2] University of california berkeley, 2008-2009. [3] W. Alsalih, K. Islam, Y. N  X  unez-Rodr  X   X guez, and [4] B. Bamba, L. Liu, P. Pesti, and T. Wang. Support-[5] B. A. Bash and P. J. Desnoyers. Exact distributed [6] J. Burke, D. Estrin, M. Hansen, A. Parker, N. Ra-[7] C.-Y. Chow, M. F. Mokbel, and X. Liu. Spatial cloaking [8] B. Gedik and L. Liu. Protecting location privacy [9] G. Ghinita, P. Kalnis, A. Khoshgozaran, C. Shahabi, [10] G. Ghinita, P. Kalnis, and S. Skiadopoulos. Mobihide: [11] G. Ghinita, K. Zhao, D. Papadias, and P. Kalnis. [12] M. C. Gonzalez, C. A. H. R., and A.-L. Barab  X asi. Un-[13] L. Hu and C. Shahabi. Privacy assurance in mobile [14] K. L. Huang, S. S. Kanhere, and W. Hu. Towards [15] B. Hull, V. Bychkovsky, Y. Zhang, K. Chen, [16] P. Kalnis, G. Ghinita, K. Mouratidis, and D. Papadias. [17] L. Kazemi and C. Shahabi. Towards preserving privacy [18] A. Khoshgozaran, C. Shahabi, and H. Shirani-Mehr. [19] J. Kleinberg and E. Tardos. Algorithm Design . 2005. [20] P. Mohan, V. N. Padmanabhan, and R. Ramjee. Neri-[21] M. F. Mokbel, C.-Y. Chow, and W. G. Aref. The new [22] M. Sharifzadeh and C. Shahabi. Utilizing voronoi cells [23] K. Shilton, J. Burke, D. Estrin, M. Hansen, and M. B. [24] H. Shirani-Mehr, F. Banaei-Kashani, and C. Shahabi. [25] L. Sweeney. k-anonymity: a model for protecting [26] M. L. Yiu, G. Ghinita, C. S. Jensen, and P. Kalnis.
