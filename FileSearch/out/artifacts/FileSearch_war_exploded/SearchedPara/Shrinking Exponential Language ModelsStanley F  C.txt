 An exponential model p of features { f ber of parameters  X  = {  X  and where Z (Chen, 2009), we show that for many types of ex-ponential language models, if a training and test set are drawn from the same distribution, we have where H test denotes test set cross-entropy; H train de-notes training set cross-entropy; D is the number of events in the training data; the  X   X  rameter estimates; and  X  is a constant independent relationship is strongest if the  X   X  = {  X   X  mated using ` jii, 2003). In ` chosen to optimize for some  X  and  X  . With (  X  = 0 . 5 , X  2 = 6) and taking  X  = 0 . 938 , test set cross-entropy can be pre-dicted with eq. (2) for a wide range of models with a mean error of a few hundredths of a nat, equivalent
In this paper, we show how eq. (2) can be applied to improve language model performance. First, we use eq. (2) to analyze backoff features in exponential n -gram models. We find that backoff features im-prove test set performance by reducing the  X  X ize X  of ing set performance. This suggests the following principle for improving exponential language mod-els: if a model can be  X  X hrunk X  without increasing its training set cross-entropy, test set cross-entropy should improve. We apply this idea to motivate two language models: a novel class-based language model and regularized minimum discrimination in-formation (MDI) models. We show how these mod-els outperform other models in both perplexity and word-error rate on Wall Street Journal (WSJ) data. The organization of this paper is as follows: In Section 2, we analyze the use of backoff features in n -gram models to motivate a heuristic for model de-sign. In Sections 3 and 4, we introduce our novel class-based model and discuss MDI domain adapta-tion, and compare these methods against other tech-niques on WSJ data. Finally, in Sections 5 and 6 we In this section, we use eq. (2) to explain why backoff features in exponential n -gram models improve per-formance, and use this analysis to motivate a general heuristic for model design. An exponential n -gram model contains a binary feature f  X  occurring in the training data for n 0  X  n , where f ( x,y ) = 1 iff xy ends in  X  . We refer to features corresponding to n 0 -grams for n 0 &lt;n as backoff features; it is well known that backoff features help performance a great deal. We present statistics in Table 1 for various letter trigram models built on the same data set. In these and all later experiments, all models are regularized with ` with (  X  = 0 . 5 , X  2 = 6) . The last row corresponds to a normal trigram model; the second row corresponds to a model lacking unigram features; and the first row corresponds to a model with no unigram or bi-gram features. As backoff features are added, we see that the training set cross-entropy improves, which is not surprising since the number of features is in-creasing. More surprising is that as we add features,
We can explain these results by examining a sim-ple example. Consider an exponential model con-sisting of the features f rameter values  X   X  this model has the form Now, consider creating a new feature f f ( x,y )+ f lows:  X  new ing into eq. (1), we see that p for all x , y . As the distribution this model de-scribes does not change, neither will its training per-formance. However, the (unscaled) size P F of the model has been reduced from 3+4=7 to 0+1+3=4, and consequently by eq. (2) we predict In fact, since p remain the same. The catch is that eq. (2) applies only to the regularized parameter estimates for a model, and in general,  X  new will not be the regu-larized parameter estimates for the expanded feature set. We can compute the actual regularized parame-ters  X   X  new for which eq. (2) will apply; this may im-prove predicted performance even more.

Hence, by adding  X  X edundant X  features to a model to shrink its total size P F predicted performance (and perhaps also actual per-formance). This analysis suggests the following technique for improving model performance: Heuristic 1 Identify groups of features which will tend to have similar  X   X  ture group, add a new feature to the model that is the sum of the original features.
 The larger the original  X   X  in model size and the higher the predicted gain.
Given this perspective, we can explain why back-off features improve n -gram model performance. For simplicity, consider a bigram model, one with-out unigram backoff features. It seems intuitive that probabilities of the form p ( w ilar across different w the corresponding bigram features. (If a word has a high unigram probability, it will also tend to have high bigram probabilities.) In Figure 1, we plot the nonzero  X   X  gram model without unigram features. Each column contains the  X   X  w value of |  X   X  that the average |  X   X  far from zero, which suggests creating features to reduce the overall size of the model.

In fact, these features are exactly unigram backoff features. In Figure 2, we plot the nonzero  X   X  for all bigram features after adding unigram backoff features. We see that the average |  X   X  to zero, implying that the model size P F been significantly decreased. We can extend this idea to higher-order n -gram models as well; e.g. , bi-gram parameters can shrink trigram parameters, and can in turn be shrunk by unigram parameters. As shown in Table 1, both training set cross-entropy and model size can be reduced by this technique. In this section, we show how we can use Heuris-tic 1 to design a novel class-based model that outper-forms existing models in both perplexity and speech recognition word-error rate. We assume a word w is always mapped to the same class c ( w ) . For a sen-tence w where c token. We use the notation p ng ( y |  X  ) to denote an ex-ponential n -gram model, a model containing a fea-ture for each suffix of each  X y occurring in the train-ing set. We use p ng ( y |  X  taining all features in p ng ( y |  X 
We can define a class-based n -gram model by choosing parameterizations for the distributions p ( c j | X  X  X  ) and p ( w j | X  X  X  ) in eq. (6) above. For exam-ple, the most widely-used class-based n -gram model is the one introduced by Brown et al. (1992); we re-fer to this model as the IBM class model: (In the original work, non-exponential n -gram mod-els are used.) Clearly, there is a large space of pos-sible class-based models.

Now, we discuss how we can use Heuristic 1 to design a novel class-based model by using class in-formation to  X  X hrink X  a word-based n -gram model. The basic idea is as follows: if we have an n -gram  X  and another n -gram  X  0 created by replacing a word in  X  with a similar word, then the two correspond-ing features should have similar  X   X  ple, it seems intuitive that the n -grams on Monday morning and on Tuesday morning should have sim-ilar  X   X  of this observation to improve model performance.
Let X  X  begin with a word trigram model p convert this model into a class-based model. Without loss of generality, we have Thus, it seems reasonable to use the distributions p starting point for our class model. This model can express the same set of word distributions as our original model, and hence may have a similar train-ing cross-entropy. In addition, this transformation can be viewed as shrinking together word n -grams that differ only in w of n -grams w longing to the same class) should have similar  X   X  From Heuristic 1, we can make new features These are exactly the features in p ng ( c When applying Heuristic 1, all features typically be-long to the same model, but even when they don X  X  one can achieve the same net effect.

Then, we can use Heuristic 1 to also shrink to-gether n -gram features for n -grams that differ only in their histories. For example, we can create new features of the form This corresponds to replacing p ng ( c with the distribution p ng ( c We refer to the resulting model as model M : By design, it is meant to have similar training set cross-entropy as a word n -gram model while being significantly smaller.

To give an idea of whether this model behaves as expected, in Table 2 we provide statistics for this model (as well as for an exponential word n -gram model) built on 100k WSJ training sentences with 50 classes using the same regularization as before. We see that model M is both smaller than the baseline and has a lower training set cross-entropy, similar to the behavior found when adding backoff features to word n -gram models in Section 2. As long as eq. (2) holds, model M should have good test performance; in (Chen, 2009), we show that eq. (2) does indeed hold for models of this type. 3.1 Class-Based Model Comparison In this section, we compare model M against other class-based models in perplexity and word-error rate. The training data is 1993 WSJ text with verbal-ized punctuation from the CSR-III Text corpus, and the vocabulary is the union of the training vocabu-lary and 20k-word  X  X losed X  test vocabulary from the first WSJ CSR corpus (Paul and Baker, 1992). We evaluate training set sizes of 1k, 10k, 100k, and 900k sentences. We create three different word classings containing 50, 150, and 500 classes using the algo-rithm of Brown et al. (1992) on the largest training build 3-gram and 4-gram versions of each model.
From the verbalized punctuation data from the training and test portions of the WSJ CSR corpus, we randomly select 2439 unique utterances (46888 words) as our evaluation set. From the remaining verbalized punctuation data, we select 977 utter-ances (18279 words) as our development set.

We compare the following model types: con-ventional ( i.e. , non-exponential) word n -gram mod-els; conventional IBM class n -gram models in-terpolated with conventional word n -gram models (Brown et al., 1992); and model M . All conven-tional n -gram models are smoothed with modified Kneser-Ney smoothing (Chen and Goodman, 1998), except we also evaluate word n -gram models with Katz smoothing (Katz, 1987). Note: Because word classes are derived from the largest training set, re-sults for word models and class models are compa-rable only for this data set. The interpolated model is the most popular state-of-the-art class-based model in the literature, and is the only model here using the development set to tune interpolation weights.
We display the perplexities of these models on the evaluation set in Table 3. Model M performs best of all (even without interpolating with a word n -gram model), outperforming the interpolated model with every training set and achieving its largest reduction in perplexity (4%) on the largest training set. While these perplexity reductions are quite modest, what matters more is speech recognition performance.
For the speech recognition experiments, we use a cross-word quinphone system built from 50 hours of Broadcast News data. The system contains 2176 context-dependent states and a total of 50336 Gaus-sians. To evaluate our language models, we use lat-tice rescoring. We generate lattices on both our de-velopment and evaluation data sets using the Latt-AIX decoder (Saon et al., 2005) in the Attila speech recognition system (Soltau et al., 2005). The lan-guage model for lattice generation is created by building a modified Kneser-Ney-smoothed word tri-gram model on our largest training set; this model is pruned to contain a total of 350k n -grams using the algorithm of Stolcke (1998). We choose the acoustic weight for each model to optimize word-error rate on the development set.

In Table 4, we display the word-error rates for each model. If we compare the best performance of model M for each training set with that of the state-of-the-art interpolated class model, we find that model M is superior by 0.8 X 1.0% absolute. These gains are much larger than are suggested by the perplexity gains of model M over the interpolated model; as has been observed earlier, perplexity is not a reliable predictor of speech recognition perfor-mance. While we can only compare class models with word models on the largest training set, for this training set model M outperforms the baseline Katz-In this section, we introduce another heuristic for improving exponential models and show how this heuristic can be used to motivate a regularized ver-sion of minimum discrimination information (MDI) models (Della Pietra et al., 1992). Let X  X  say we have a model p  X  X imilar X  model q estimated from an independent training set. Imagine we use q as a prior model for p ; i.e. , we make a new model p q Then, choose  X  new such that p q for all x,y (assuming this is possible). If q is  X  X imi-lar X  to p p new to be less than that of p  X   X  . Since they describe the same distribution, their training set cross-entropy will be the same. By eq. (2), we expect p q have better test set performance than p indeed hold for models with priors; q need not be accounted for in computing model size as long as it is estimated on a separate training set.
This analysis suggests the following method for improving model performance: Heuristic 2 Find a  X  X imilar X  distribution estimated from an independent training set, and use this distri-bution as a prior.
 It is straightforward to apply this heuristic to the task of domain adaptation for language modeling. In the usual formulation of this task, we have a test set and a small training set from the same domain, and a large training set from a different domain. The goal is to use the data from the outside domain to max-imally improve language modeling performance on the target domain. By Heuristic 2, we can build a language model on the outside domain, and use this model as the prior model for a language model built on the in-domain data. This method is identical to the MDI method for domain adaptation, except that we also apply regularization.

In our domain adaptation experiments, our out-of-domain data is a 100k-sentence Broadcast News training set. For our in-domain WSJ data, we use training set sizes of 1k, 10k, and 100k sentences. We build an exponential n -gram model on the Broad-cast News data and use this model as the prior model q ( y | x ) in eq. (12) when building an exponential n -gram model on the in-domain data. In Table 5, we display various statistics for trigram models built on varying amounts of in-domain data when using a Broadcast News prior and not. Across training sets, have better training set cross-entropy than the un-adapted models built on the same data. By eq. (2), the adapted models should have better test perfor-mance and we verify this in the next section. 4.1 Domain Adaptation Method Comparison In this section, we examine how MDI adapta-tion compares to other state-of-the-art methods for domain adaptation in both perplexity and speech recognition word-error rate. For these experiments, we use the same development and evaluation sets and lattice rescoring setup from Section 3.1.
The most widely-used techniques for domain adaptation are linear interpolation and count merg-ing. In linear interpolation, separate n -gram models are built on the in-domain and out-of-domain data and are interpolated together. In count merging, the in-domain and out-of-domain data are concatenated into a single training set, and a single n -gram model is built on the combined data set. The in-domain data set may be replicated several times to more heavily weight this data. We also consider the base-line of not using the out-of-domain data.

In Table 6, we display perplexity and word-error rates for each method, for both trigram and 4-gram models and with varying amounts of in-domain training data. The last method corresponds to the exponential MDI model; all other methods employ conventional (non-exponential) n -gram models with modified Kneser-Ney smoothing. In count merging, only one copy of the in-domain data is included in the training set; including more copies does not im-prove evaluation set word-error rate.

Looking first at perplexity, MDI models outper-form the next best method, linear interpolation, by about 10% in perplexity on the smallest data set and 3% in perplexity on the largest. In terms of word-error rate, MDI models again perform best of all, outperforming interpolation by 0.3 X 0.7% absolute and count merging by 0.1 X 0.4% absolute. 5.1 Class-Based Language Models In past work, the most common baseline models are Katz-smoothed word trigram models. Compared to this baseline, model M achieves a perplexity reduc-tion of 28% and word-error rate reduction of 1.9% absolute with a 900k-sentence training set. The most closely-related existing model to model M is the model fullibmpredict proposed by Goodman (2001): This is similar to model M except that linear in-terpolation is used to combine word and class his-tory information, and there is no analog to the fi-nal term in eq. (13) in model M . Using the North American Business news corpus, the largest perplex-ity reduction achieved over a Katz-smoothed trigram model baseline by fullibmpredict is about 25%, with a training set of 1M words. In N -best list rescor-ing with a 284M-word training set, the best result achieved for an individual class-based model is an 0.5% absolute reduction in word-error rate.

To situate the quality of our results, we also re-view the best perplexity and word-error rate results reported for class-based language models relative to conventional word n -gram model baselines. In terms of absolute word-error rate, the best gains we found in the literature are from multi-class com-posite n -gram models, a variant of the IBM class model (Yamamoto and Sagisaka, 1999; Yamamoto et al., 2003). These are called composite models because frequent word sequences can be concate-nated into single units within the model; the term multi-class refers to choosing different word clus-terings depending on word position. In experiments on the ATR spoken language database, Yamamoto et al. (2003) report a reduction in perplexity of 9% and an increase in word accuracy of 2.2% absolute over a Katz-smoothed trigram model.

In terms of perplexity, the best gains we found are from SuperARV language models (Wang and Harper, 2002; Wang et al., 2002; Wang et al., 2004). In these models, classes are based on abstract role values as given by a Constraint Dependency Gram-mar. The class and word prediction distributions are n -gram models that back off to a variety of mixed word/class histories in a specific order. With a WSJ training set of 37M words and a Katz-smoothed tri-gram model baseline, a perplexity reduction of up to 53% is achieved as well as a decrease in word-error rate of up to 1.0% absolute.

All other perplexity and absolute word-error rate gains we found in the literature are considerably smaller than those listed here. While different data sets are used in previous work so results are not di-rectly comparable, our results appear very competi-tive with the body of existing results in the literature. 5.2 Domain Adaptation Here, we discuss methods for supervised domain adaptation that involve only the simple static combi-nation of in-domain and out-of-domain data or mod-els. For a survey of techniques using word classes, topic, syntax, etc., refer to (Bellegarda, 2004).
Linear interpolation is the most widely-used method for domain adaptation. Jelinek et al. (1991) describe its use for combining a cache language model and static language model. Another popular method is count merging; this has been motivated as an instance of MAP adaptation (Federico, 1996; Masataki et al., 1997). In terms of word-error rate, Iyer et al. (1997) found linear interpolation to give better speech recognition performance while Bac-chiani et al. (2006) found count merging to be su-perior. Klakow (1998) proposes log-linear interpo-lation for domain adaptation. As compared to reg-ular linear interpolation for bigram models, an im-provement of 4% in perplexity and 0.2% absolute in word-error rate is found.

Della Pietra et al. (1992) introduce the idea of minimum discrimination information distributions. Given a prior model q ( y | x ) , the goal is to find the nearest model in Kullback-Liebler divergence that satisfies a set of linear constraints derived from adaptation data. The model satisfying these condi-tions is an exponential model containing one fea-eq. (12). While MDI models have been used many times for language model adaptation, e.g. , (Kneser et al., 1997; Federico, 1999), they have not performed as well as linear interpolation in perplexity or word-error rate (Rao et al., 1995; Rao et al., 1997).
One important issue with MDI models is how to select the feature set specifying the model. With a small amount of adaptation data, one should intu-itively use a small feature set, e.g. , containing just unigram features. However, the use of regulariza-tion can obviate the need for intelligent feature se-lection. In this work, we include all n -gram fea-tures present in the adaptation data for n  X  X  3 , 4 } . Chueh and Chien (2008) propose the use of inequal-ity constraints for regularization (Kazama and Tsu-jii, 2003); here, we use ` We hypothesize that the use of state-of-the-art regu-larization is the primary reason why we achieve bet-ter performance relative to interpolation and count merging as compared to earlier work. For exponential language models, eq. (2) tells us that with respect to test set performance, the num-ber of model parameters seems to matter not at all; all that matters are the magnitudes of the parame-ter values. Consequently, one can improve exponen-tial language models by adding features (or a prior model) that shrink parameter values while maintain-ing training performance, and from this observa-tion we develop Heuristics 1 and 2. We use these ideas to motivate a novel and simple class-based language model that achieves perplexity and word-error rate improvements competitive with the best reported results for class-based models in the litera-ture. In addition, we show that with regularization, MDI models can outperform both linear interpola-tion and count merging in language model combina-tion. Still, Heuristics 1 and 2 are quite vague, and it remains to be seen how to determine when these heuristics will be effective.

In summary, we have demonstrated how the trade-off between training set performance and model size impacts aspects of language modeling as diverse as backoff n -gram features, class-based models, and domain adaptation. In particular, we can frame performance improvements in all of these areas as methods that shrink models without degrading train-ing set performance. All in all, eq. (2) is an impor-tant tool for both understanding and improving lan-guage model performance.
 We thank Bhuvana Ramabhadran and the anony-mous reviewers for their comments on this and ear-lier versions of the paper.
