 Millions of posts are being generated in real-time by users in social networking services, such as Twitter. However, a considerable number of those posts are mundane posts that are of interest to the authors and possibly their friends only. This paper investigates the problem of automatically dis-covering valuable posts that may be of potential interest to a wider audience. Specifically, we model the structure of Twitter as a graph consisting of users and posts as nodes and retweet relations between the nodes as edges. We propose a variant of the HITS algorithm for producing a static rank-ing of posts. Experimental results on real world data demon-strate that our method can achieve better performance than several baseline methods.
 Categories and Subject Descriptors: H.3.3 [Informa-tion Storage and Retrieval]: Information Search and Re-trieval General Terms: Algorithms, Design, Experimentation Keywords: Twitter, tweet ranking, HITS, social network
Twitter is a social networking service that enables its users to share their status updates, news, observations, and find-ings in real-time by creating short-length posts known as tweets . The service rapidly gained worldwide popularity as a communication tool, with millions of users generating mil-lions of tweets per day. Although many of those tweets con-tain valuable information that is of interest to many people, many others are mundane tweets that are of interest only to the authors and their followers ( i.e. , subscribers). Finding tweets that are of potential interest to a wide audience from large volume of tweets being accumulated in real-time is a crucial but challenging task. One straightforward way is to use the numbers of times tweets have been retweeted ( i.e. , re-posted). [3] proposes to regard retweet count as a measure of popularity and presents classifiers for predicting whether and how often new posts will be retweeted in the future. However, mundane tweets by very popular users, such as celebrities, with huge numbers of followers can record high retweet counts. [1] uses crowdsourcing to categorize a set of tweets as  X  X nly interesting to author and friends X  and  X  X os-sibly interesting to others X  and reports that the presence of a URL link is a single, highly effective feature for distin-guishing interesting tweets with more than 80% accuracy. This simple rule, however, may incorrectly recognize many interesting tweets as not interesting, simply because they do not contain links. In this paper, we follow the definition of interesting tweets provided in [1] and focus on automatic methods for finding tweets that may be of potential interest to not only the authors and their followers but a wider audi-ence. Specifically, we model Twitter as a graph of user and tweet nodes connected by retweet links (edges) and present a variant of the HITS algorithm [4] based on the retweet graph for producing a static ranking of tweets. Our premise is that an interesting tweet attracts users not only in but beyond the author X  X  own network and impels them to retweet as a sign of recommendation; thus, such a tweet can be found by analyzing the retweet relations in the graph. We con-duct experiments on real world tweet data and demonstrate that our method achieves better performance than the sim-ple retweet count approach and a similar recent work [2] that uses supervised learning with a broad spectrum of features.
We treat the problem of finding interesting tweets as a ranking problem where the goal is to derive a scoring func-tion which gives higher scores to interesting tweets than to uninteresting ones in a given set of tweets. Instead of run-ning the HITS algorithm on the tweet side of the network right away, we run it on the user side first. Our intuition is that the authority of a user is an important prior informa-tion to infer the score of the tweets that the user published.
Graph modeling. Formally, we model the Twitter struc-ture as directed graph G =( N,E )withnodes N and direc-tional edges E . We consider both users U = { u 1 ,...,u n u and tweets T = { t 1 ,...,t n t } as nodes and the retweet rela-tions between these nodes as directional edges. For instance, if tweet t a ,createdbyuser u a , retweets t b , written by user u , we create a retweet edge e t a ,t b from t a to t b and another On user-level. We first run HITS on the user nodes in G . For all user nodes, the scores are updated iteratively as:
A ( u i )=
H ( u j )= Note that unlike the standard HITS, the authority and hub scores are influenced by the retweet behaviors of users; the idea here is to dampen the influence of users in case they de-vote most of their retweet activity toward a very few other users like celebrities. After each iteration, the authority and hub scores are normalized by dividing each of them by the square root of the sum of the squares of all authority val-ues and all hub values respectively. This user-level proce-dure ends after iterating m U times. After this stage, the algorithm outputs a function S U A : U  X  [0 , 1], which repre-sents the user X  X  final authority score, and another function S U H : U  X  [0 , 1], which represents the user X  X  final hub score.
On tweet-level. When the user-level stage is ended, we compute the authority and hub scores of the tweet nodes. In each iteration, we start out with each tweet node initially inheriting the authority and hub scores of the user who pub-lished the tweet. If C is a function that returns the creator of a given tweet, then the scores are updated iteratively as:
A ( t i )= S U A ( C ( t i )) +  X 
H ( t j )= S U H ( C ( t j )) +  X  where  X &gt; 1 is a weight for hops in retweet chain. If a tweet retweets another tweet which has already been retweeted, it is more likely that the tweet is useful. Thus, tweets are ac-cumulated bonus score, as much as  X  , for each retweet hop. F is a function that returns  X &gt; 1 if the creator of tweet is not a follower of the creator of tweet t i and 1 otherwise. It is intuitive that if the users retweet other users X  tweets even if they are not friends, then it is more likely that the such tweets are interesting. After each iteration, the author-ity and hub scores are normalized as done in the user-level. After the iterations are run m T times, the algorithm finally outputs a scoring function S T : T  X  [0 , 1], which represents the tweet node X  X  final authority score. We use this function S
T to rank a given set of tweets based on interestingness.
We use real world tweets collected during 31 days of Octo-ber 2011, containing 64,107,169 tweets and 2,824,365 users. For evaluation, we generated 31 initially ranked lists of tweets, each consisting of top 100 tweets created on a specific date of the month with highest retweet counts accumulated during the next 7 days. Two annotators were asked to categorize each tweet as interesting or not by inspecting its content, as done in [1]. In case of disagreement (about 15% of all cases), a final judgment was made by consensus between the two. We observe that the ratio of tweets judged to be interesting is about 36%. The goal of this evaluation is to demonstrate that our approach is able to produce better ranked lists of tweets by re-ranking interesting tweets highly. Table 1 reports the ranking performance of various meth-ods in terms of Precisions at 10 and 20, R-Precision, and MAP. We compare our method to several baselines. The first baseline, denoted as #RT, is obviously based on ab-solute retweet counts; tweets with higher retweet counts is ranked higher than those with lower retweet counts. The second baseline, HITS orig , is the standard HITS algorithm in which an authority value of a node is computed as the sum of the hub values that point to it, and a hub value is the sum of the authority values of the nodes it points to. No other influential factors are considered in the calcula-tions. Lastly, we choose one recent work [2] that addresses a related problem, which aims at learning to classify tweets as credible or not. Although interestingness and credibility are two distinct concepts, the work presents a wide range of features that may be applied for assessing interestingness of tweets. For re-implementation, we train a SVM classifier us-ing features proposed in [2], which include message-, user-, and propagation-based features 1 ; then, we use the probabil-ity estimates of the learned classifier for re-ranking. We use leave-one-out cross validation for this learning approach, de-noted as ML all .ML rt is a variant that is learned only with propagation-based features observed from retweet trees [2].
We observe that #RT alone is not a sufficient measure for finding interesting tweets. HITS orig performs better than #RT across most metrics but does not perform well in gen-eral. ML rt , which uses more features induced from retweet information, demonstrates significantly better results. The results of ML all show that more reasonable performance can be achieved when message-and user-based features are combined with propagation-based features. The proposed method, HITS prop (  X  =2,  X  = 3), shows significantly better performance than #RT and HITS orig and also comparable performance to that of ML all . This result is significant, since our method is based on unsupervised method and does not require complex training as supervised learning approaches do. We lastly compare the contribution of the user-level pro-cedure, denoted as HITS u against the tweet-level procedure, HITS t . We observe that the user-level procedure is much more important than the tweet-level procedure. This con-firms our intuition described earlier that user authority is a valuable prior information to infer interestingness of tweets. This work was supported by the South Korea Ministry of Knowledge Economy, under the title  X  X evelopment of social web issue detection-monitoring and prediction technology for big data analytic listening platform of web intelligence X  (No. 10039158).
We do not use some topic-based features in [2] since such information was not available in our case.
