 The processor allocation problem is one of the main research areas in management of CPU resources in multiprocessor and distributed systems. When there are multiple processors in the system and each program consists of multiple tasks or processes that can be executed in parallel, a program to be executed requests multiple processors. In order to solve the problem, we have to find out how these multiple processors should parallel systems, multiple processors in parallel computers are generally configured in a certain architectural pattern, such as hypercube or mesh. Many algorithms for hy-percube allocation or mesh allocation have been developed [1,2]. ited computing resources. When we consider allocating processors to programs, for systems that have no specific configuration, unlike parallel computers, then these processors can be linked together through a common bus or networks. A process, tion considers allocating tasks to processors before the program starts. In addition, the deadline. The system needs to allocate tasks for execution so that they can complete scheduling problem instead of the task allocation problem. 
We address the optimal task scheduling problem in the distributed system which is composed of large quantity of processors having the identical function and perform-completion of the task is rigid. Furthermore, one task can be divided and allocated to multiple processors. Despite a considerable amount of research effort for the task scheduling problem [5], no previous work has been reported on the problem that we scheduling for the parallel system with the non-preemptive processing time and to develop an exact algorithm to solve the problem. 
In order to solve the problem, we propose a dynamic programming-based exact algorithm, which has two phases: In the first phase, the algorithm uses dynamic programming to generate feasible solutions to satisfy the deadline constraint. In the second phase, it finds exact processor allocations. Computational complexity and simulation results show that our algorithm has good execution time efficiency for parallel and distributed systems with the large number of processors. Our algorithm also can be applied to find the optimal machine allocation for the fiber manufactur-ing systems with the strict deadline. 
This paper is organized as follows. The next section describes the modeling and al-gorithm for the problem. Section 3 discusses the performance evaluation and section 4 concludes the paper. 2.1 Problem Formulation time of a task can be divided and allocated on several processors. 
The objective function is to minimize the total transition cost between tasks. Con-matical formulation is described in Eq. (1). 2.2 Solution Algorithm Having formulated the problem, we now develop a solution to the problem. Our solu-allocation as described below. 2.2.1 Feasible Allocations Generation To generate the feasible allocations using dynamic programming, we define stage defined as the processor to be allocated and the set of indexes of previously allocated obtained as shown in Eq. (2). 
In Eq. (2), q and F k ( j,S ) represents the processor number included in the previous al-location and the minimum allocation cost which covers S composed of k processors, respectively. Since boundary condition represents the cost which each processor han-dles task p without co-operation with other processors, it is defined by Eq. (3). However, we can not obtain the optimal so lution using Eqs. (2) and (3) only because tained at the previous stage k (1,2,..,L-1) are feasible solutions. 2.2.2 Finding Optimal Allocation of the allocation composed of the same elements as j  X  S . Thus, the sub-optimal solu-tion at each stage k ( g ( k )) is given by given by 
Finally, we find the optimal processor allocation corresponding to global optimal solution. 2.2.3 Optimal Non-preemptive Task Scheduling Algorithm From the above problem formulation, the optimal task scheduling algorithm for the parallel and distributed system composed of tasks with the non-preemptive processing time and the rigid deadline is described as the following. In order to evaluate the proposed algorithm, we carried out the computational experi-ments on workstation. We assumed that the available time on processor j ( w generated and used as the available time on each processor. As the number of proces-sors ( n ), 30, 50, 70, 100 and 150 are used respectively. Three different required proc- X  w j  X  T p , medium load- X  w j  X  1/2 T p , and light load- X  w j &gt;&gt; T p . 
Fig. 2 shows the mean execution time of our suggested algorithm for three different randomly generated and run on a SUN Ultra SPARC-II workstation. As shown in Fig. 2, the light load case has the least mean execution time at all the cases of n . Due to the rapid violation of constraints in the light lo ad case, the step 2 of the solution algorithm for the light load case is ended earlier than other two cases. In addition, we can find that only two seconds are required to obtai n the optimal processor allocation when the number of processors is as many as 150. uted system. The considered system has the non-preemptive processing tasks and mathematical formulation and exact solution algorithm composed of two phases. In using dynamic programming, and then in the second phase it finds the optimal proc-essor allocation. Simulation results show that the proposed algorithm has good effi-ciency in the execution time for the parallel and distributed system with a large num-ber of processors. Future work includes task scheduling algorithm considering the preemptive processing time and priority. 
