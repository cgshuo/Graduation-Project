 e-Learning is a learner-centered, self-pa ced learning environment where materials are delivered to learners in most case s through the Web. For example, MIT X  X  OpenCourseware project offers freely onlin e learning materials including lecture notes and teaching videos. Nevertheless, very few online courses provide search capability inside those materials [12]. As it has been recently evident in Web2.0, social evolution will advance e-Learning to the stage that not only learning materials are created by courseware aut hors themselves but by learners as well [1]. Therefore, the need for search capability is increasingly important.
Still, most fundamental learning materials take the form of lecture notes, which are an important source for learners to understand concepts being taught by instructors. Lecture notes are usually a sort of summaries of a textbook which is used for their construction. In formationinlecturen otes contains the most important concepts that students should understand and remember after completing a course. Typically, an acade mic course consists of a series of lec-ture notes, each of which, in most case s, is a sequence of lecture slides such as PowerPoint. Manually searching for learning materials of interest from a whole course can be, however, tedious and time consuming. Therefore, there is a need for lecture retrieval syst ems (e.g. [3,5,9,6]).

This paper exploits a textbook index and table of contents to bridge a semantic gap between user queries and information contained in lecture materials. An advantage of using textbook indexes is that an indexer, who provides the index for a textbook, usually provides the con ceptual structure of technical terms in an index. This is particularly useful, in this paper, for analyzing the context of user queries and l ecture materials.

One of the main problems of searching inside learning materials lies in a deficiency of information retrieval systems that cannot systematically interpret and identify the context of both user queries and fragments of learning materials. For example, almost every lecture slide in a database course will be obtained for a query  X  X  want to know about database X . In this case, query context such as  X  X uery language X  plays two important roles: to help users formulate queries efficiently and to prevent them from inf ormation overload. Consider another query  X  X ive me a definition of database X . A system may return no result for such a query if no slide contains both terms  X  X atabase X  and  X  X efinition X . Context (i.e.  X  X efinition X , in this case) can play another essential role in a lecture slide as its implicit meaning. These requirements thus call for a system that can automatically extract the co ntext of lecture materials.

The contribution of this paper is three-fold. This paper is, to the best of our knowledge, the first to exploit textbook metadata to solve the problem of con-text interpretation of user queries and cont ext identification in lecture materials. Second, exploiting a textbook X  X  indexer viewpoint, our approach can automati-cally offer query contexts to help users effi ciently refine searches. Query results can be categorized by their contexts so t hat users can investigate each of them easily in order to confirm an answer. In addition, incorporating textbook index with table of contents, we can discriminate query results (i.e. lecture fragments) that are relevant from those that merely contain query terms but are not infor-mative. Third, a unified framework for lecture slide and video fragment retrieval is proposed to provide a single access poi nt for both types of learning materials.
The rest of the paper is organized as follows. Section 2 explains the basic idea for identifying context in both use r queries and lecture materials. Section 3 proposes a method for querying lecture m aterials based on inference rules using textbook ontologies. Section 4 reports some preliminary experimental results. Section 5 discusses the related work. Section 6 concludes the paper. In this paper, TOC and textbook index (in short, index) refer to table of contents and back-of-the-book index of a particular textbook, respectively. All index and TOC examples used in this paper are taken from [4]. Terminologies of book index elements are borrowed from [7]. 2.1 Textbook Ontology Figure 1 shows a part of index, TOC, and its corresponding representation in OWL 1 . An index entry is composed of a main heading with its subheadings. Main heading is a main access point to a parti cular topic being found in a book while its subheadings are more specific aspects (or contexts) of such a topic. Maximally three-level index headings are allowed in this paper: main heading, subheading, and sub-subheading. 2 Each index heading may contain several reference locators, each of which is usually a page number pointing to the location of information to which the heading refers. In this paper, TOC is used to partition a textbook into non-overlapped subsegments, called textbook segments , determined by book page intervals. Identification of the subtopicOf relationship in a textbook ontology is straightforward. An index subheading is a subtopic of its index main heading, and an index sub-subheading is a subtopic of its index subheading. 2.2 Context of User Queries and Lecture Slides In order to help users formulate queries effi ciently for lecture m aterials, we exploit existing book index structure; a subheading can be considered a context of the main heading. When a query is formulated without context or subtopics (e.g.  X  X atabase X ), we can offer available query contexts so that a user can easily narrow down the search (e.g.  X  X efinition of X ,  X  X uery language X , or  X  X chema X ). Not only do these contexts help users refine the search but also prevent them from information overload. Note also that, in this paper, a user query is a combination of a topic and its subtopics. A topic is likely to be found in an index main heading while its subtopics can be located in its subheadings of a particular index entry.
We exploit a TOC together with an associated index to identify context of lecture slides. Specifically, page numbers in a textbook index and TOC can be associated for a particular topic so that we know which textbook segments contain information about the topic. Imagine further that if such a topic appears in a particular lecture slide and there also exists a given mapping from such a slide to a textbook segment (i.e. a book page interval in TOC) to which the topic is mapped, we may conclude that the lecture slide contains information about the topic. Consider an example in Fig. 2. Since a  X  X atabase X  term is found in the lecture slide which can be m apped to textbook segments, Seg.#1 or Seg.#2, in Ch. 1, it is likely that the context of the lecture slide is  X  X efinition of X   X  X atabase X . On the contrary, a  X  X atabase X  term that appears in other slides elsewhere but cannot be mapped t oSeg.#1orSeg.#2inCh.1is unlikely to contain information about  X  X efinition of X   X  X atabase X . Furthermore, if a lecture slide, which can be mapped to other chapters such as Ch. 2, also contains a term  X  X atabase X  but none of the refer ence locators in the index heading of  X  X atabase X  and its subheadings point to Ch. 2, it is likely that such a slide uses a  X  X atabase X  term to explain some other terms or concepts (i.e. such a slide does not provide useful information about  X  X atabase X  itself). Therefore, using information from TOC and index, we can systematically distinguish information that is informative from one that is just passing mention.

Note also that a topic (i.e. technical terms such as  X  X atabase X ) tends to be found exactly in lecture slides while its contexts or subtopics (i.e. general terms such as  X  X efinition X ) do not necessarily appear. We also assume that lecture slides partially follow the structure of a particular textbook. In this respect, mapping from lecture notes to textbook chapters is easy and often provided by courseware authors. 3 Therefore, lecture-notes-to-textbook-chapters mapping needs not always be detected automati cally. Automatic mapping from a lecture slide to textbook segments inside a particular chapter requires more effort and is deferred to Sect. 3.5. The left side of Fig. 3 shows a unified framework for lecture slide and video fragment retrieval where the input is a user query which is a combination of a topic and its subtopics, and the output is a set of answer slides classified by their context. Each answer slide is associ ated with a corresponding lecture video fragment, if it exists. The XDD query engine is responsible for identifying answer slides for queries by consulting rules and a textbook ontology. 3.1 Data Preparation A course lecture material consists of a se ries of lecture notes . Each lecture note is a sequence of PowerPoint slides that can be exported to the OpenDocument XML format [8] through OpenOffice Presentation 4 . For textbook ontology con-struction, there are two ways for extracting the TOC and index for a particular textbook: (i) to scan them from the hardcopy, or (ii) to obtain a search result by submitting the textbook title as a query to Google Book Search 5 and then later by accessing the TOC and index from the result. Next, OCR software is used to extract text characters so that the scanned documents (i.e. TOC and index) can be further used for ontology construction as illustrated in Fig. 1. Once the whole process is complete, XML data including PowerPoint slides and a textbook ontology is ready to be used. 3.2 XML Declarative Description Although XML can provide a schema for representing a textbook ontology through OWL and describing PowerPoin t slides through OpenDocument, it can-not explicitly express relationships, rules and constraints among lecture slides, a textbook ontology, and user queries. XML Declarative Description (XDD) [11] is a language for modeling XML databases capable of expressing explicit and implicit information through XML expressions (variable-embedded XML ele-ments), and relationships, constraint s, and rules through XML clauses. XML clause is of the form: H  X  B 1 ,...,B n .wheren  X  0, and H and B i are XML expressions or constraints. When n=0, a clause is called unit clause, otherwise non-unit clause. XML documents (or elements) such as PowerPoint slides and a textbook ontology can immediately b ecome ground XML unit clauses. Given a database, XDB, consisting of XML unit and non-unit clauses and a query, Q, formulated in terms of a non-unit clause, the answers, A, can be obtained by transforming Q repetitively using XML clauses in XDB. 3.3 Query Model An XML database consists of PowerPoint documents (XML unit clauses) repre-senting course lecture notes, an OWL do cument (XML unit cla uses) describing TOC and indexes of a particular textbook associated with the course, and a set of inference rules (XML non-unit clauses) for identifying answer slides together with their context for user queries.
 Definition 1 (Query context). Let T, ST, SST be terms. A query context of Tisatuple, C =(T, ST, SST), where ST is a subtopic of T (determined by the subtopicOf relationship in a textbook ontology), and SST is a subtopic of ST, and a subtopic cannot exist without a direct parent topic.  X  X ull X  is used to specify the absence of each of ST, and SST.
 R1, R2, and R3 identify query context by considering the subtopicOf relation-ships in a textbook ontology. Consider a textbook ontology in Fig. 1. By R3, one of the query contexts of  X  X atabase X  can be identified as shown below. Definition 2 (Slide topic). Let T, ST, and SST be terms, SL a lecture slide, SEG a textbook segment of a particular textbook chapter, CH. A slide topic of SL is a tuple, T =(T,ST,SST), where all of the three conditions are satisfied: (i) a term, T, ST, or SST, appears in SL, (ii) T is indexed in SEG, and (iii) there exists a mapping from SL to SEG in the mapping table. To put it simply, a slide topic is a combination of a topic and its subtopics. A lecture slide may contain several slide topics (i.e. information about the topics), which can be identified by R4. The underlying assumption is that, in a particular slide, contextual terms of a topic may be omitted. For example, a topic (e.g. database) tends to appear in a lecture slide while its subtopic (e.g. definition) may not necessarily appear. Such a subtopic can be identified by R4. As another case, a subtopic (e.g. query language) may appear in a lecture slide while its topic (e.g. database) and sub-subtopic (e.g. definition) disappear. R4 is also responsible for identifying an implicit topic and sub-subtopic of such a subtopic. R5, R6, and R7 use page numbers associated between a book index and TOC to determine mapping between (a combination of) terms and a textbook segment. Consider an example in Fig. 4. By R4 and R6, we obtain that the description of relational algebra is a slide topic (i.e. T =( X  X elational algebra X ,  X  X escription of X , null )). Also by R4 and R7, the definition of database query language is identified as a slide topic (i.e. T =( X  X atabase X ,  X  X uery langauge X ,  X  X efinition of X )). Note that the slide topics can be identified although a term,  X  X efinition X  does not appear in the slide. On the contrary, other slides that contain a term, for example,  X  X uery language X  are considered irrelevant to the context of  X  X efinition of query language X  if they cannot be mapped to Seg.#58, Seg.#59, or Seg.#60.
A query submitted by a user can be formulated as a non-unit XML clause below. Let T be  X  X atabase X , ST  X  X uery language X , SST  X  X efinition of X . The lecture slide in Fig. 4 will be obtained as an answer. If, for example, SST is left unspecified, lecture slides with the slide topics where SST is  X  X efinition of X ,  X  X elational algebra as X ,  X  X elational calculus as X , or  X  X QL as X  will be obtained (i.e. all possible subtopics of  X  X uery language X  in Fig. 1)).
 3.4 Prototype The right side of Fig. 3 shows a prototype system for lecture m aterial retrieval in a database course. Users can input a combination of a topic and its context as a query. The output is a set of answer slides, automatically classified by query contexts. Note that if a query context is specified but is not exactly matched with any index subheading, no results will be returned (because the evaluation of the queryContext predicate is failed). In this case, the system will automatically reformulate the query by leaving the ST (or SST) argument unspecified in the query clause so that all possible results in any context can be obtained, if they exist. In this way, users are able to comp are themselves their specified context (subtopics) with those suggested by the system. Since lecture slides are assumed to be associated with corresponding video fragments (i.e. spoken words), our system can also be considered as lecture v ideo segment retrieval that uses the content of PowerPoint slides as underlying metadata. 3.5 Building the Mapping Table Recall from Sect. 2.2 that it is not difficult to manually establish mappings from a lecture note (i.e. a sequence of lectur e slides) to a textbook chapter. Thus, the problem is reduced to that of mapping from a slide to textbook segments, given a chapter mapping. In this paper, two main heuristics are used to determine automatic mapping from lecture slides to textbook segments. One important clue is slide titles whose terms can indicate main topics (or subtopics) being discussed in the slides. Associated through page numbers in the book index and TOC, such terms can finally be mapped to particular textbook segments. Another helpful hint is information about mapping from neighboring lecture slides. For example, if we know that several surrounding slides of a slide of interest can be mapped to a particular textbook segment, it is likely that such a slide should also be mapped to the same segment, regar dless of the content in the slide.
It is also tempting to exploit the keyword matching between slide titles and titles of TOC in a textbook. However , terms used in titles of TOC may not accurately reflect content, and thus restr ict complete topic indication while slide titles contain more specific terms representing topics or subtopics. Thus, a book index is more appropriate for the matching. 6 Definition 3 (Main slide topic). Let T be a term and SL a lecture slide. T is a main slide topic of SL iff (i) T appears in the slide title of SL, and (ii) T is exactly matched with a topic, subtopic, or sub-subtopic in the textbook ontology (i.e. main heading, subheading, or sub-subheading of the textbook index). Definition 4 (Ad-hoc slide-to-page mapping). LetSLbealectureslide,P a book page number, O a textbook ontology. Ad-hoc mapping from a lecture slide toabookpagenumberisrepresentedbyatuple, M =(SL, P), where one of the five conditions is satisfied: 1. P = L t if there exists a reference locator, L t , of a topic, T, in O such that 2. P = L st or P = L sst if a topic, T, is a main slide topic of SL but there exists 3. P = L st if there exists a reference locator, L st , of a subtopic, ST, in O such 4. P = L sst if a subtopic, ST, is a main slide topic of SL, but there exists no 5. P = L sst if there exists a reference locator, L sst , of a sub-subtopic, SST, in Terms appearing in the slide title can, in most cases, indicate main topics being described in a particular slide. Such terms can be mapped to book pages through the ontology. If a term appearing in the slide title is found in the ontology as, for example, a topic but without reference locators being specified, its subtopics (and/or sub-subtopics if they exist) are possibly (implicit) slide topics of that slide. This is the reason why all reference locators appearing under a particular topic (which does not have reference locators) are taken into consideration in this case (consider conditions 2 and 4 in Definition 4).
 Consider Fig. 5 and let SL i be a lecture slide number i ofthelecturenote Ch. 6, and P a book page number. M =(SL 2 ,P SL 2 ) is obtained as the mapping result for SL 2 where P SL 2  X  X  123, 124, 140 } .ForSL 3 , there is no mapping (i.e. M =(SL 3 , null)) since SL 3 has no main slide topic. Nevertheless, given the assumption that the lecture note follows the structure of a textbook, it is possible to estimate the mapping for SL 3 by considering the mapping of its surrounding lecture slides (i.e. SL 2 and SL 4 in this case). Specifically, given that M =(SL 3 , P
SL 3 ) is the mapping for SL 3 , the minimum page number and the maximum page number from M =(SL 2 ,P SL 2 )and M =(SL 4 ,P SL 4 ) are chosen to be the lower bound and the upper bound of P SL 3 , respectively. In this case, we obtain M =(SL SL 2 and SL 4 are the nearest preceding lectur e slide and the nearest succeeding lecture slide of SL 3 , respectively, which contains a mapping. Definition 5 (Mapping conflict). Let SL i and SL j be lecture slides that can be mapped to the same textbook chapter where i = j,andPabookpagenumber. Given a mapping M =(SL i ,P SL i ), a mapping conflict between SL i and SL j exists for P SL i being selected iff one of the two conditions is satisfied: 1. SL i precedes SL j ,andthereexistsnoP SL j for all M =(SL j ,P SL j ) such that 2. SL i follows SL j ,andthereexistsnoP SL j for all M =(SL j ,P SL j ) such that As mentioned earlier, another helpful heuristic to determine the mapping from a lecture slide to textbook segments is the mapping of surrounding slides. Con-sider Fig. 5 and suppose we choose M =(SL 2 , 140) as a mapping for SL 2 .This mapping contradicts with our initial assumption in that the presentation flow must follow the structure of a textbook; none of the mappings of SL 3 ,SL 4 ,SL 5 , SL 6 ,SL 7 ,SL 8 yields book page numbers that are greater than or equal to 140. In this way, it is possible to approximately calculate the total number of conflicts for each mapping with all other slides (e.g. the total numbers of conflicts for M =(SL with minimum number of conflicts decided by predefined threshold. For exam-ple, if the threshold is 0, only M =(SL 2 , 123) and M =(SL 2 , 124) are retained for SL 2 . Then, we obtain that SL 2 can be mapped to textbook segments, Seg.#58 (p. 123-124), Seg.#59 (p. 124), and Seg.#60 (p. 124-133) (see also Fig. 4). Note that we allow one-to-many mapping from a slide to textbook segments. We conducted a preliminary experiment comparing our system with Lucene 7 where PowerPoint slides (i.e. each slide constitutes one document) are indexed. Test data are taken from a database course web site 8 containing 7 lecture notes, 275 slides in total. While our system returns the answer slide out of 5 candidate slides without ranking provided for a query, definition of database , Lucene yields the answer at the 12 th rank. As expected, the top-ranked slide from Lucene contains both terms database and definition although the slide is actually about SQL . This is because some terms such as database appear in several slides but do not provide useful information about the terms themselves (i.e. such terms are used instead for describing some o ther terms). As another example, for a query such as OLAP , Lucene can return the correct answer at the top rank. This is because such a term appears in very few slides. An implication here is that a traditional IR approach may not be able to distinguish terms that are informative from ones that are just passing mention. Nevertheless, in order to prove this hypothesis, extensive study and necessary experiments must be done. [6] develops a system for context-based searching in lecture slides. A number of lecture notes are used as a training set, incorporated with a machine learning tech-nique, to discover patterns of lecture presentation flow. The probabilistic state di-agram for lectures (where each state represents a context) is used to recognize the context of lecture slides. Limited types o f context can be detect ed such as  X  X ntro X ,  X  X efinition X  and  X  X xample X  while our approach deals with broader context based on subheadings in a textbook index. Unlike our approach, [6] does not distinguish between informative and passing mentio n terms, which may lead to several ir-relevant results being obtained. [9] performs mapping from handwritten lectures to textbook chapters. Handwritten annotations are automatically recognized and used as keywords to compare similarity with TOC of an associated textbook us-ing a traditional IR approach. [3] mainly focuses on enhancing user interfaces for information browsing and filtering in lecture videos and the synchronized lecture slides. Search capability is also implemented using tf-idf weighting with additional heuristics such as increasing the match ing score of a term appearing in a slide if its duration (according to that of the lect ure video segment asso ciated) is longer than that of another slide containing the same term. A similar idea to our approach that uses textbook metadata can be found in [2]. TOC and textbook index are ex-ploited to generate a topic vector profile in order to help classify messages being discussed in online discussion boards. A topic vector is simply a set of index terms that can be associated (through page numb ers) with a particular textbook sec-tion. The authors do not, however, introduce this idea to lecture materials nor do they address the problem of context interpretation and identification. Although the original purpose of a textbook index is to allow quick and easy access to information in a textbook, we incorporate it with table of contents in the way that integrates context fro m user queries and lecture slides, thus enabling effective search capability inside lecture materials. Since a textbook index is unable to cover all possible query terms issued by users as well as new terms introduced in only lecture slides but not in the textbook, generalization of our approach is necessary. Omitted also in this paper is a ranking algorithm for answer slides, which forms part of our future work.
 Acknowledgement. This research was supported by MEXT Grant-in-Aid for Scientific Research on Priority Areas:  X  X yber Infrastructure for the Information-explosion Era X , Planning Research:  X  X ontents Fusion and Seamless Search for Information Explosion X  (Project Leader: Katsumi Tanaka, A01-00-02, Grant#: 18049041) and by MEXT Grant-in-Aid for Young Scientists B  X  X nformation Retrieval and Mining in Web Archives X  (Grant#: 18700111).

