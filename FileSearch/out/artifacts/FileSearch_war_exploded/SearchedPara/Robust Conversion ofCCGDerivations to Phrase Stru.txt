 Converting the Penn Treebank ( PTB , Marcus et al., 1993) to other formalisms, such as HPSG (Miyao et al., 2004), LFG (Cahill et al., 2008), LTAG (Xia, 1999), and CCG (Hockenmaier, 2003), is a com-plex process that renders linguistic phenomena in formalism-specific ways. Tools for reversing these conversions are desirable for downstream parser use and parser comparison. However, reversing conver-sions is difficult, as corpus conversions may lose in-formation or smooth over PTB inconsistencies.
Clark and Curran (2009) developed a CCG to PTB conversion that treats the CCG derivation as a phrase structure tree and applies hand-crafted rules to ev-ery pair of categories that combine in the derivation. Because their approach does not exploit the gener-alisations inherent in the CCG formalism, they must resort to ad-hoc rules over non-local features of the CCG constituents being combined (when a fixed pair of
CCG categories correspond to multiple PTB struc-tures). Even with such rules, they correctly convert only 39.6% of gold CCGbank derivations.

Our conversion assigns a set of bracket instruc-tions to each word based on its CCG category, then follows the CCG derivation, applying and combin-ing instructions at each combinatory step to build a phrase structure tree. This requires specific instruc-tions for each category (not all pairs), and generic operations for each combinator. We cover all cate-gories in the development set and correctly convert 51.1% of sentences. Unlike Clark and Curran X  X  ap-proach, we require no rules that consider non-local features of constituents, which enables the possibil-ity of simple integration with a CKY -based parser.
The most common errors our approach makes in-volve nodes for clauses and rare spans such as QPs, NXs, and NACs. Many of these errors are inconsis-tencies in the original PTB annotations that are not recoverable. These issues make evaluating parser output difficult, but our method does enable an im-proved comparison of CCG and PTB parsers. There has been extensive work on converting parser output for evaluation, e.g. Lin (1998) and Briscoe et al. (2002) proposed using underlying dependencies for evaluation. There has also been work on conver-sion to phrase structure, from dependencies (Xia and Palmer, 2001; Xia et al., 2009) and from lexicalised formalisms, e.g. HPSG (Matsuzaki and Tsujii, 2008) and TAG (Chiang, 2000; Sarkar, 2001). Our focus is on CCG to PTB conversion (Clark and Curran, 2009). 2.1 Combinatory Categorial Grammar ( CCG ) The lower half of Figure 1 shows a CCG derivation (Steedman, 2000) in which each word is assigned a category , and combinatory rules are applied to ad-jacent categories until only one remains. Categories can be atomic, e.g. the N assigned to magistrates , or complex functions of the form result / arg , where result and arg are categories and the slash indicates the argument X  X  directionality. Combinators define how adjacent categories can combine. Figure 1 uses function application , where a complex category con-sumes an adjacent argument to form its result, e.g. S [ dcl ] \ NP combines with the NP to its left to form an S [ dcl ] . More powerful combinators allow cate-gories to combine with greater flexibility.

We cannot form a PTB tree by simply relabeling the categories in a CCG derivation because the map-ping to phrase labels is many-to-many, CCG deriva-tions contain extra brackets due to binarisation, and there are cases where the constituents in the PTB tree and the CCG derivation cross (e.g. in Figure 1). 2.2 Clark and Curran (2009) Clark and Curran (2009), hereafter C&amp;C -CONV , as-sign a schema to each leaf (lexical category) and rule (pair of combining categories) in the CCG derivation. The PTB tree is constructed from the CCG bottom-up, creating leaves with lexical schemas, then merg-ing/adding sub-trees using rule schemas at each step. The schemas for Figure 1 are shown in Table 1. These apply to create NPs over magistrates , death , and suicide , and a VP over labeled , and then com-bine the trees by placing one under the other at each step, and finally create an S node at the root.
C&amp;C -CONV has sparsity problems, requiring schemas for all valid pairs of categories  X  at a minimum, the 2853 unique category combinations found in CCGbank. Clark and Curran (2009) create schemas for only 776 of these, handling the remain-der with approximate catch-all rules.

C&amp;C -CONV only specifies one simple schema for each rule (pair of categories). This appears reason-able at first, but frequently causes problems, e.g.:
Here either a QP bracket (1) or an ADJP bracket (2) should be created. Since both examples involve the same rule schema, C&amp;C -CONV would incorrectly process them in the same way. To combat the most glaring errors, C&amp;C -CONV manipulates the PTB tree with ad-hoc rules based on non-local features over the CCG nodes being combined  X  an approach that cannot be easily integrated into a parser.

These disadvantages are a consequence of failing to exploit the generalisations that CCG combinators define. We return to this example below to show how our approach handles both cases correctly. Our conversion assigns a set of instructions to each lexical category and defines generic operations for each combinator that combine instructions. Figure 2 shows a typical instruction, which specifies the node to create and where to place the PTB trees associated with the two categories combining. More complex operations are shown in Table 2. Categories with multiple arguments are assigned one instruction per argument, e.g. labeled has three. These are applied one at a time, as each combinatory step occurs.
For the example from the previous section we be-gin by assigning the instructions shown in Table 3. Some of these can apply immediately as they do not involve an argument, e.g. magistrates has (NP f). One of the more complex cases in the example is Italian , which is assigned (NP f { a } ). This creates a new bracket, inserts the functor X  X  tree, and flattens and inserts the argument X  X  tree, producing:
For the complete example the final tree is almost correct but omits the S bracket around the final two NPs. To fix our example we could have modified our instructions to use the final symbol in Table 2. The subscripts indicate which subtrees to place where. However, for this particular construction the PTB an-notations are inconsistent, and so we cannot recover without introducing more errors elsewhere.

For combinators other than function application, we combine the instructions in various ways. Ad-ditionally, we vary the instructions assigned based on the POS tag in 32 cases, and for the word not , to recover distinctions not captured by CCGbank categories alone. In 52 cases the later instruc-tions depend on the structure of the argument being picked up. We have sixteen special cases for non-combinatory binary rules and twelve special cases for non-combinatory unary rules.

Our approach naturally handles our QP vs. ADJP example because the two cases have different lexical categories: (( N / N ) / ( N / N )) \ ( S [ adj ] \ NP ) on than and ( N / N ) / ( N / N ) on relatively . This lexical dif-ference means we can assign different instructions to correctly recover the QP and ADJP nodes, whereas C&amp;C -CONV applies the same schema in both cases as the categories combining are the same. Using sections 00-21 of the treebanks, we hand-crafted instructions for 527 lexical categories, a pro-cess that took under 100 hours, and includes all the categories used by the C&amp;C parser. There are 647 further categories and 35 non-combinatory binary rules in sections 00-21 that we did not annotate. For unannotated categories, we use the instructions of the result category with an added instruction.
Table 4 compares our approach with C&amp;C -CONV on gold CCG derivations. The results shown are as reported by EVALB (Abney et al., 1991) using the Collins (1997) parameters. Our approach leads to in-creases on all metrics of at least 1.1%, and increases exact sentence match by over 11% (both absolute).
Many of the remaining errors relate to missing and extra clause nodes and a range of rare structures, such as QPs, NACs, and NXs. The only other promi-nent errors are single word spans, e.g. extra or miss-ing ADVPs. Many of these errors are unrecover-able from CCGbank, either because inconsistencies in the PTB have been smoothed over or because they are genuine but rare constructions that were lost. 4.1 Parser Comparison When we convert the output of a CCG parser, the PTB trees that are produced will contain errors created by our conversion as well as by the parser. In this sec-tion we are interested in comparing parsers, so we need to factor out errors created by our conversion.
One way to do this is to calculate a projected score (
PROJ ), as the parser result over the oracle result, but this is a very rough approximation. Another way is to evaluate only on the 51% of sentences for which our conversion from gold CCG derivations is perfect (
CLEAN ). However, even on this set our conversion introduces errors, as the parser output may contain categories that are harder to convert.

Parser F-scores are generally higher on CLEAN , which could mean that this set is easier to parse, or it could mean that these sentences don X  X  contain anno-tation inconsistencies, and so the parsers aren X  X  in-correct for returning the true parse (as opposed to the one in the PTB ). To test this distinction we look for correlation between conversion quality and parse difficulty on another metric. In particular, Figure 3 (right) shows CCG labeled dependency performance for the C&amp;C parser vs. CCGbank conversion PARSE -VAL scores. The lack of a strong correlation, and the spread on the line x = 100 , supports the theory that these sentences are not necessarily easier to parse, but rather have fewer annotation inconsistencies.
In the left plot, the y-axis is PARSEVAL on con-verted C&amp;C parser output. Conversion quality essen-tially bounds the performance of the parser. The few points above the diagonal are mostly short sentences on which the C&amp;C parser uses categories that lead to one extra correct node. The main constructions on which parse errors occur, e.g. PP attachment, are rarely converted incorrectly, and so we expect the number of errors to be cumulative. Some sentences are higher in the right plot than the left because there are distinctions in CCG that are not always present in the PTB , e.g. the argument-adjunct distinction.
Table 5 presents F-scores for three PTB parsers and three CCG parsers (with their output converted by our method). One interesting comparison is be-tween the PTB parser of Petrov and Klein (2007) and the CCG parser of Fowler and Penn (2010), which use the same underlying parser. The performance gap is partly due to structures in the PTB that are not recoverable from CCGbank, but probably also indi-cates that the split-merge model is less effective in CCG , which has far more symbols than the PTB .
It is difficult to make conclusive claims about the performance of the parsers. As shown earlier, CLEAN does not completely factor out the errors in-troduced by our conversion, as the parser output may be more difficult to convert, and the calculation of PROJ only roughly factors out the errors. However, the results do suggest that the performance of the CCG parsers is approaching that of the Petrov parser. By exploiting the generalised combinators of the CCG formalism, we have developed a new method of converting CCG derivations into PTB -style trees. effective than previous work, increasing exact sen-tence match by more than 11% (absolute), and can be directly integrated with a CCG parser.
 We would like to thank the anonymous reviewers for their helpful suggestions. This research was supported by a General Sir John Monash Fellow-ship, the Office of Naval Research under MURI Grant No. N000140911081, ARC Discovery grant DP1097291, and the Capital Markets CRC.
