
Muhammad Intizar Ali 1 , Nuno Lopes 1 ,OwenFriel 2 , and Alessandra Mileo 1 Relational databases (RDB) are the most common way of storing and managing data in majority of the enterprise environments [1]. Particularly in the enter-prises where integrity and confidentiality of the data are of the utmost impor-tance, relational data model is still the most preferred option. However, with the growing popularity of the Web and other Web related technologies (e.g. Semantic Web), various data models have been introduced. Extensible Markup Language (XML) is a very popular data model to store and specify the semi-structured data over the Web [7]. It is also consid ered as a de-facto data model for data exchange. XPath and XQuery are desi gned to access and query data in XML format[10,5]. Semantic Web is built upon data represented in Resource Descrip-tion Format (RDF) [4]. RDF is a standard data format for establishing semantic interpretability and machine readability among the various data sources scat-tered over the Web. SPARQL is a query language designed to query linked data in RDF data format [17]. All of the above mentioned data models were designed to perform a specific task and their importance in their own domains can not be denied. Several query languages including SQL, XQuery and SPARQL have been designed to access and query RDB, XML and RDF data respectively. It is inevitable for modern data integration applications to avoid such heterogeneity of data formats and query languages. Therefore, often these applications require integrated access over distribut ed heterogeneous data sources.
 XSPARQL is a W3C Member Submission ( http://www.w3.org/ Submission/2009/01/ ) which combines XQuery, SPARQL and SQL to provide an integrated access over X ML, RDF and RDB data sources [2]. However, in practice the integrated app lications not only require the access of integrated data, but in many scenarios an update in the existing data is also desired. XSPARQL in its present state only provides Data Query Language (DQL) while lacking Data Manipulation Language (DML). In this paper we define syntax and semantics of XSPARQL Update Facility which extends the capabilities of the XSPARQL language to perform update operations over RDB, XML and RDF data on the fly while keeping the data sources in their original data formats. XSPARQL Update Facility is fully compatible with the update semantics defined individually for SQL, XQuery and SPARQL [16,18,12]. Our main motivation for this extension was the real world scenario of semantic presence in the CISCO Unified Presence (CUP) systems, based on processing and integrating informat ion retrieved from XMPP( http://xmpp.org ) messages and update the underlying data in RDB and RDF data sources to keep track of up-to-date semantic presence history of registered users. In this scenario we require not only the simultaneous acces s to heterogeneous data represented in RDB, XML and RDF, but also the update operations are desired to update the underlying RDB and RDF data on the fly [8].

Our main contributions in this paper can be summarised as follows: (i) we extend XSPARQL with updates, providing what we call XSPARQL Update Fa-cility , (ii) we define formal semantics of the XSPRQL Update Facility, (iii) we demonstrate the need for XSPARQL Update Facility by presenting a use case scenario for semantic presence in the CUP systems, and (iv) we successfully im-plement and evaluate XSPARQL Update Facility for dealing with group chats history in the same scenario. Cisco Unified Presence (CUP) systems is a standards-based enterprise platform that aims to provide an effective way of communication among people in and across the organisation using instant messaging (IM) over XMPP standard pro-tocol. A general architecture to collect several presence information from various heterogeneous and dynamic sources has been introduced in [14],which provides some insights on how richer seman-tic presence services and ap-plications can be deployed. As a first step towards the en-hancement of CUP systems with richer semantic presence, a mapping of the core XMPP messages into RDF is for-mally defined in [8]. Figure 1 depicts a simplified high-level version of the architecture of semantic presence in the CUP systems focus-ing only on heterogeneous data formats that need to be manipulated during communication. All XMPP messages are mapped into RDF using various on-tologies e.g SIOCC ( http://rdfs.org/sioc/chat# ), Nepomuk ( http://www. semanticdesktop.org/ontologies/2007/03/22/nmo# ) and SIOC ( http:// rdfs.org/sioc/ns# ). CUP server stores history of all the group chat mes-sages and other communications in an external PostgreSQL ( http://www. postgresql.org/ ) database, while semantic enhancement component stores the semantic information in a graph database using Virtuoso Server ( http:// openlinksw.com/virtuoso ). Listing 1 shows a sample XMPP message gen-erated by IM client while requesting fo r the creation of a chat room. List-ing 2 depicts mapping of XMPP messages into RDF using SIOC and SIOCC ontologies. We use the XSPARQL Update Facility to interpret the XMPP message and generate/update RDB and RDF data on the fly. This enables a semantically enriched CUP system to update/generate data from one data model to any other data model. Later, in section 4 we evaluate our XSPARQL Update facility by using the use case of semantic presence in CUP systems. In this section we specify the XSPARQL Update Facility by giving a detailed description of its syntax and semantics. 3.1 Syntax XSPARQL is built on XQuery semantics, XSPARQL Update Facility is also ex-tended using formal semantics of XQuery Update Facility. It merges the subset of SPARQL, XQuery and SQL update clauses. We limit ourself to three major update operations of INSERT: to insert new records in the data set, DELETE: to delete already existing records from data set and UPDATE: to replace the ex-isting records or their values with the new records or values. Figure 2 presents a schematic view of the XSPARQL Update Facility which allows its users to select data from one data source of any of its data format and update the results into another data source of different format within a single XSPARQL query while preserving the bindings of the variables defined within query. Contrary to the select queries, the update queries have no return type. On successful execution of the update queries no results are returned, only a response is generated which can be either successful upon successful execution of the query or an appropriate error is raised if for some reasons the XSPARQL query processor is unable to update the records successfully. However if a valid updating or delete query with or without where clause does not match any relevant tuple in the data source, the XSPARQL query processor will still response with successful execution, but there will be no effect on the existing data source. The basic building block of XQuery is the expression, an XQuery expression takes zero or more XDM in-stances and returns an XDM instance. Following new expressions are introduced in XSPARQL Update Facility  X  A new category of expression called updating expression is introduced to  X  A basic updating expression can be any of the insert , delete or update .  X  for , let , where or order by clause can not contain an updating expression.  X  return clause can contain an updating expression which will be evaluated for Figure 3 presents an overview of the basic syntax rules for XSPARQL Update Facility, for complete grammar of XSPARQL Update Facility, we refer our reader to the latest version of the XSPARQL available at http://sourceforge.net/ projects/xsparql . 3.2 Semantics Similar to the semantics of the XSPARQL language [6], for the semantics of updates in XSPARQL we rely on the semantics of the original languages: SQL, XQuery, and SPARQL. Notably, the semantics for SPARQL updates are pre-sented only in the upcoming W3C recommendation: SPARQL 1.1 [12]. We start by presenting a brief overview of the sem antics of update languages for the dif-ferent data models: relational databases, XML, and RDF.
 RDB: updates in the SQL language rely on a procedural language that specify XML: For XML data, the XQuery language is adapted such that an expression RDF: SPARQL Update X  X  semantics are similarly defined in terms of changes Implementation: We use java platform for the implementation of the XS-PARQL Update Facility. XSPARQL grammar rules are defined using ANTLR ( http://www.antlr.org ). XSPARQL uses Saxon ( http://www.saxonica.com ) as a query processor for XQuery, Jena ARQ ( http://jena.apache.org )for SPARQL queries and for SQL queries we provide option to connect to multi-ple relational database management systems including PostgreSQL and MySQL ( http://www.mysql.com ).
 Evaluation of XSPARQL Update Facility: In order to demonstrate and evaluate performance and practicality of XSPARQL Update Facility, we consider a generic use case of group chat of the semantic presence in CUP systems as described in Section 2. However XSPARQL Update Facility can be used by any application which requires access and updates in distri buted heterogeneous data stored in any of the RDB, XML or RDF data models. A User Creates a Chat Group: Consider a scenario wh ere a user creates a persistent chat room over a specific topic as shown in Listing 1 in the Section 2. When an IM client sends a request to cr eate a chat room an XMPP message will be generated by IM client and sent to the CUP Server. CUP Server will process the message. The semantic presence co mponent of CUP systems wants to update the semantic data stored in Virtuoso Server. Listing 3 shows an XSPARQL query that interprets XMPP messages using XQuery and if certain condition is met, the XSPARQL update query will insert the relevant information into RDF data store using SPARQL update query. Several efforts are made to integrate distributed XML, RDF and RDB data on the fly. These approaches can be divided into two types, (i) Transformation Based: Data stored in various format is transformed into one format and can be queried using a single query language [11]. The W3C GRDDL working group addresses the issues of extracting RDF from XML documents. (ii) Query Re-writing Based: Query languages are used to transform or query data from one format to another format. SPARQL queries are embedded into XQuery/XSLT to pose against pure XML data [13]. XSPARQL was initially designed to integrate data from XML and RDF and later extended to RDB as well. DeXIN is another approach to integrate XML, RDF and RDB data on the fly with more focus on distributed computing of heterogeneous data sources scattered over the Web [3]. Realising the importance of the updates, the W3C has recommendations for XQuery and SPARQL updates [18,12]. In [15], SPARQL is used to update the relational data. However, to the best of our knowledge their is no work available which can provide simultaneous access ove r the distributed heterogeneous data source with updates. In this paper we have extended XSPARQL to provide the Update Facility which further strengthens the capabilities of XSPARQL by enabling simultaneous ac-cess and update of heterogeneous data sources. We have defined syntax and semantics of XSPARQL Update Facility, which merges update operations of SQL, XQuery and SPARQL. Using XSPARQL Update Facility user not only can query, integrate and transform heterogeneous data on the fly, but can also update the already stored data in the data sets or in-memory data generated as a result of a query before an update operation. XSPARQL Update Facility will lead to the wide adoption of XSPARQL in many applications (e.g. simi-lar to semantic presence in CUP systems) which require integrated access over distributed heterogeneous data sources with updates.

In the future, we plan to further investigate query optimisation techniques that would make it possible to evaluate even complex XSPARQL queries in tractable time, that would make XSPARQL usable for large-scale applications. In this paper, we elaborated the practicality of XSPARQL Update Facility using real world scenario, however in future, we pla n to define detailed formal semantics of the language, evaluation of static and dynamic rules and experimental evaluation considering various parameters including scalability and query executaon time. We also plan to extend XSPARQL Update Facility to include Data Definition Language (DDL) for its subsequent languages.

