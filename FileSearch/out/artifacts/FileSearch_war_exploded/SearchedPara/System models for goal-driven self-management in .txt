 1. Introduction information, and immediately performs necessary recon fi gurations via effectors . manage: First, they cannot predict the performance effect of planned recon memory management, for example, often  X  guesses  X  the required memory adaptations in small steps of the FCLs ( goal-independency ). Knowledge about this relationship would allow the FCLs to restrict expensive recon analyses to situations when they are actually required.
 designed to be used for existing DBMS. In order to decide whether or not a particular DBS con we extend the model with objective functions. Finally, we describe appropriate DBS con article are:  X 
Identi fi cation of the system model contents that are required for DBS self-management  X 
Selection of a modeling technique for de fi ning the system model  X 
Algorithms for extracting, composing and parameterizing objective functions from the system model  X 
Description of a method for automatically deriving DBS con
We discuss related work in Section 6 before we conclude with an outlook in Section 7 . 2. Goal-driven DBS self-management model solution ( Section 2.2 ). 2.1. System-wide self-management
To comply with the principles of autonomic computing [2] , the recon can be applied to existing DBMS. So meeting the business goals should be accomplished by using the existing con DBA, and start a recon fi gurations analysis when there is a risk of missing the goals. possible to decide how the computing resources should be shared among the DBMS components and to assess con alternatives (access paths, number of bufferpools, tablespace design, management logic to evaluate the knowledge stored in the system model and to decide which recon application or user. The requests processed by a DBS are therefore classi different goal values for service classes.

Obviously, the analysis for the most appropriate DBS con fi is a need. These situations include scenarios where there is a risk of missing goals, and where there is a signi con fi gurations from them ( Section 4 ). 2.2. Solution overview and its current workload. In [6] Chaudhuri and Weikum state this problem as the ability to predict time caused by cache misses in the system buffer. The hit ratio of the system buffer is estimated as: hit ratio for different buffer sizes.
 usage of a graphical modeling language (SysML) for this purpose is described in Section 3 .
The task of the self-management logic is to evaluate the behavioral descriptions (like the hit ratio model) to con connects the sensors, effectors and behavioral descriptions to the expected goal values. This work therefore de objective functions , whose result values correspond with the high-level goals that may be de describing their effect on meeting several goal values. from the system model. Having composed and parameterized the objective functions, the self-management has to functions from the system model and the application of MOO techniques to them are the subjects of Section 4 . 3. System model fi de fi nition of objective functions. 3.1. Model contents
TheknowledgeinthesystemmodelmustallowdecisionsonhowtosharelimitedcomputingresourcesamongDBMScomponents, and it must allow the prediction of the system-wide effects of particular DBS con DBMS components and their behavior (see Fig. 4 ).

The DBMS model is hierarchically structured, where every level re de fi ned. For effectors it is necessary to describe their type (e.g. con ( domains ). In addition, con fi guration parameters of one component may depend on con ( dependencies ). The most important constraint for the automatic deduction of recon to predict the effects of recon fi gurations.
 in fl uence the performance of the DBMS.
 arrows in Fig. 4 ). 3.2. DBMS system modeling model has the advantage that it can be easily extended, re fi quanti fi cation of their behavior. After this model has proven to suf incrementally.
 of all the required model contents identi fi ed in Section 3.1 . SysML has been designed to support the speci semantics is not de fi ned in terms of a formal language, but in a natural language speci reasoning services are available for this language, Section 4 provides algorithms that de evaluated.
 the de fi nition of the structure of the system as well as the constraints on effector values we use block de the Data Protection Services .

The block diagram in Fig. 5 is well suited to depict the structural composition of a DBMS. For the de sensors and effectors we can use an additional block de fi separate Block in the model, as speci fi c characteristics must be stored (e.g. ConnTopSensor ). the parameter types. supported in ConstraintRules with aggregation functions. The syntax for this purpose is AGG[aggVar]( where AGG denotes the aggregation function (e.g. SUM, AVG), aggVar denotes a (multi-valued) variable that de identi fi ers of the instances (e.g. Bufferpool-ID), and b parametric diagram shown in Fig. 8 ,wherethe ConstraintBlock instances are shown as rounded rectangles and their
ConstraintProperties as little white squares within them. A self-m anagement logic evalua ting this model would areas in favor of additional agents. 3.3. Objective functions usage, availability and operation cost. The advantage of our approach is that the set of objective functions is not de on the DBS con fi guration.

The block de fi nition diagram in Fig. 9 illustrates an example for a Response Time constraint, which is quanti descriptions, or add new constraints. An example for objective function re constraints are then used in the parametric diagram in a hierarchy of constraint instances, which de constraint hierarchy, whereas leafs must be sensors and effectors.

To allow a straight-forward declaration of goals with distinct values for speci sensor ConnectionMgr.maxcagents could refer to the sc parameter to be able to con for every service class. 4. Recon fi guration analysis
With the modeling technique described in Section 3 , it is possible to easily develop and re use these models as the knowledge base for DBS self-management, appropriate DBS con then describes the extraction of the necessary information from a SysML system model. 4.1. Deriving DBS con fi gurations
With the objective functions being de fi ned in the system model, the task of self-management is to speaking, the self-management has to determine an optimal con to f ( x )de fi ne objective functions. In addition, it has to take into account the set of constraints E ( values.
 least one other objective function, i.e. P = x j N  X  x  X  : F functions to be minimized and  X  i  X  1 :: k : f i x  X   X  X   X  con the MOO techniques can be used to determine a set of DBMS effector values represent constant values in the objective functions.
 instance for every service class. In each instance the sensor values re  X  fl at  X  mathematical expressions as input objective functions and constraint de are the subject of the following subsection. 4.2. Objective function and constraint information extraction actual objective functions are instantiated for every service class and enriched with the current sensor and con extracting and instantiating the objective functions is described, whereas effector constraints are omitted here.
The fi rst step constrained block identi fi cation of the rule extraction stage is the identi applied to a SysML Block in the model. For this purpose, all goal con are located. Afterwards, all those ConstraintBlock elements in the model are identi de
Connector to a ContraintProperty in a SysML ConstraintBlock . This ConstraintBlock , which de of the objective function, is passed on to the second step.

The extraction algorithm we have developed for these hierarchical rule de the block, it determines the model element otherEnd that it is connected to ( 2 stored as the value of the property via the setType() and setValue() functions ( 10 values are identi fi ed by a connection to the parent element, which is passed as a parameter to this Algorithm ( 4 property information is added to the rule object ( 12 ).
 Algorithm 1. Extract Rule Information from SysML model
After all the required information has been extracted from the SysML model, fl two cases, the value is simply added to a sorted list of rule components ( ruleComponents ; 2 aggregation function, start token, and end token) is added to the resulting
If the property is a terminal (i.e. sensor, effector or con ( isGoal() ). If so, the optimization operator (  X  b  X  or must be replaced with a unique name by the setUniqueName() function ( 19 Algorithm 2. Conversion of nested rule to fl at rule representation
In order to derive appropriate DBS con fi gurations from the instances may have to be created for service-class-speci fi also has to be passed as a parameter ( 7 ). If rc is not an aggregation but a sensor or con read and appended to the resulting mathematical expression result ( 13 has to be added to the result and marked as a decision variable ( 17 values of the aggregation variables, unique names must be constructed beforehand ( 16 ; e.g. sizes of bufferpools:  X  expression ( 20  X  22 ).

With our two-staged approach the constraints from the SysML model only have to be extracted and converted to front). 5. Evaluation fi le, which serves as an excellent basis for the extraction of the de fi future implementations will consider the expected con fi guration change costs. Algorithm 3. Instantiation of goal functions on creating a modeling and evaluation infrastructure for DBS system models, not on building complete approximates the response time as according to Eq. (2) (similar to Figs. 7 and 8 ). Furthermore, two objective functions have been de costs of using additional resources. con con multiple objective functions (response time and resource usage) and different goals for service classes.
Fig. 13 were computed for the goal va lues ResponseTime[Gold]
Fig. 14 shows the same information as Fig. 13 , but for the goal values ResponseTime[Gold] and ResourceCosts b 2000.
 computed generations. The extraction of the system model from the SysML XMI changes) took 0.7 s on an average. All experiments were made on a single-core PC (3 GHz, 3 GB).
In order to validate the quality of the con fi gurations in the solution sets, we have implemented the proposed con columns show the response times for gold ( RT g ) and silver ( RT sizes BP1 and BP2 ). From the characteristics observed with this con different response time goals ( G g for gold; G s for silver) and allowed resource costs ( G exemplary solutions from the solution set in columns 8 to 11 ( RT columns report the actual response times that have been observed after implementing the corresponding con that despite the simplistic system model the response time can be predicted suf system model needs to be extended in the future to also predict the effects of other important con physical design, sorting, logging, optimizer and connection handling. 6. Related work admission control for queries. Our solution in contrast aims at implementing the right DBS con than delaying the execution of queries with a lower importance level.

Models with quantitative descriptions of the managed resource behavior by now have only been used for bufferpool depending on the bufferpool size. As we have shown in our evaluation, these models may be used as a models in a graphical way. Thus, they can be extended to also cover other con extensions can be validated quickly, because appropriate DBS con
DBMS, which perform a local optimization. The local results are then planned to be propagated to interdependencies have not been presented yet. Our solution in contrast provides the ability to con fi gurations using MOO. The need to consolidate component-speci could only be considered as an alternative modeling solution to using SysML. provide a mathematical model of the behavior of the resource under different con approach is taken in policy management frameworks like [22] . So the decision about the necessary recon of a single objective function.
 which is essential to keep the modeling complexity manageable for database systems. 7. Conclusions model allows the creation of a system-wide self-management logic, which can consider the dependencies between recon fi guration actions. As creating an exact quantitative model of today's complex DBMSs is a dif a graphical modeling approach, which allows the step-wise re knowledge about the behavior of a DBS can be connected to objective functions, which describe how well a particular objective optimization techniques can be employed to automatically derive DBS con ability of our framework to quickly compute performance predictions for a particular model under different con strongly support this work.

References
