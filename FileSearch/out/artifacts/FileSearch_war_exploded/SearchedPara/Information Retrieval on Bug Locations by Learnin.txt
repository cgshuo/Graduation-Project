 Bug locating usually involves intensive search activities and incurs unpredictable cost of labor and time. An issue of information retrieval on bug locations is particularly ad-dressed to facilitate identifying bugs from software code. In thispaper,anovelbugretrievalappr oachwithco-location shrinkage (CS) is proposed. The proposed approach has been implemented in open-source software projects collected from real-world repositories, and consistently improves the retrieval accuracy of a state-of-the-art Support Vector Ma-chine(SVM)model.
 Categories and Subject Descriptors: H.3.3 [Informa-tion Search and Retrieval]: Clustering, Search process; I.2.6 [Artificial Intelligence]: Concept learning General Terms: Algorithms, Experimentation Keywords: bug retrieval, bug report managing systems, support vector machine, co-location shrinkage
Wh enfaultsandbugsarefoundinsoftware,th eyaregen-erally reported as bug reports, which are composed of semi-structured text, in bug repositories for further fault tracking and debugging [3]. In the conventional process of debugging, however, intensive search, which usually involves browsing back and forth through bug reports and software code, is required to locate bugs. Unfortunately, information access techniques that require typing schemata at data-entry time are not appropriate for retrieving semi-structured text such as bug information. Accordingly, information retrieval (IR) on semi-structured text has been addressed as one of the research challenges [1].

To effectively support semi-st ructured bug information re-trieval, historical bug reports co-cited by the same loca-tions can be further clustered and mined. In this paper, a co-location shrinkage (CS) technique with a powerful sup-port vector machine (CS-SVM) is presented to retrieve po-tential bug locations referring to an advanced learning ap-proach [5]. The proposed approach has been implemented in three open-source software projects extracted from real-world bug report managing sy stems (BRMS). With the pro-posed method, the accuracy of retrieving correct bug lo-cations can be consistently raised from 4.2% to 31.8% by providing a recommendation list of 10 bug locations.
As in common debugging procedures, the bug locations corresponding to a bug report are usually retrieved from version archives and BRMS. To retrieve the potential bug locations L , the prediction of L can be denoted as P ( B | L where an incoming bug report B is examined and predicted according to its meta-information. The relationships be-tween bug reports and locations can be 1-to-many mappings since a bug may be fixed in several locations. Hence, bug prediction is defined as providing users with a recommen-dation list of possible bug locations. This study retrieves the location of faults on the level of files. Similarly, the bug retrieval approach can be applied to other levels of source elements such as packages, classes, and methods with minor changes.
Figure 1 illustrates a snippet to explain the idea of clus-tering the co-located bug reports. A co-location shrinkage (CS) technique is further presented to strengthen the se-mantic connection of bug reports in the co-located clusters referring to [5]. Figure 2 depicts the CS algorithm with shrinking the co-located bug reports. In advance to retrieve the potential bug locations, pairs of bug reports and their fixed locations are trained and tested by the CS-SVM model.
Figure 3 illustrates the overview of the bug retrieval pro-cess. Bug reports were preprocessed as bag-of-words by stan-dard IR techniques, namely, tokenization, stemming, and stopword removal, and then transformed into vector rep-resentation with TF  X  IDF weighting. Finally, the debug-ging knowledge extracted from historical bug reports were learned by the proposed CS-SVM model, and new coming bug reports are tested to predict the bug locations.
The proposed CS-SVM scheme has been evaluated with three open-source projects, Subversion (SVN), AspectJ, and ArgoUML. To evaluate the fixed locations, bug reports re-
Figure 1: A snippet of co-located bugs reports. Figure 2: The co-location shrinkage (CS) algorithm. solved as  X  X IXED X  were used for experiments. Table 1 sum-marizes the statistics of the collected datasets.
To retrieve new bug locations based on historical bug re-ports, bug reports were chronologically divided into 10 folds, in which the first 9-fold data were used as training data, and the last 1-fold data were regarded as test data. In the preliminary experiment, SV M light [2] was employed, and  X  =0 . 1 was adopted in CS-SVM for validation. This study utilized the metrics of prediction accuracy, which has been commonly used in past work, to measure the percentage of correct retrieved files.

Figure 4 depicts the retrieval performance of top-10 accu-racy. A top-10 accuracy is presented here because over 85% users usually only look at the first page of 10 items like the behavior of browsing search results on the Web [4]. The re-sult indicates that the proposed CS-SVM model consistently outperforms the SVM model with an accuracy improvement of 4.2% to 31.8% in a recommendation list of 10 source loca-tions, and can retrieve up to 86.4% correct bug locations in a list of 100 files. From our analysis, the prediction accuracy is promising to be raised if the fault-prone co-locations can be properly selected for learning. Besides, the CS-SVM model will be suitable to be applied to other real-world projects with similar features.
This paper has revealed that the co-location relationships are important and promising to help retrieve the potential
Figure 3: The overview of bug retrieval process. location of bugs. The proposed CS-SVM model can effec-tively promote the retrieval accuracy by shrinking the co-located bug reports and support software engineers to effi-ciently locate the correct locations with limited resources. Future work involves investigating more profound relation-ships and technologies to advance the retrieval performance, such as building domain-specific ontologies, mining from potential fault-proneness, and utilizing advanced IR/NLP techniques. More sorts of case studies also need further in-vestigations, e.g. large software projects and closed-source projects.
