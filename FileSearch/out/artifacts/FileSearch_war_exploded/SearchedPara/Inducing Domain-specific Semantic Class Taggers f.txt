 The goal of our research is to create semantic class taggers that can assign a semantic class label to ev-ery noun phrase in a sentence. For example, con-sider the sentence:  X  X he lab mix was diagnosed with parvo and given abx X  . A semantic tagger should identify the  X  X he lab mix X  as an ANIMAL ,  X  X arvo X  as a DISEASE , and  X  X bx X  (antibiotics) as a DRUG . Accurate semantic tagging could be beneficial for many NLP tasks, including coref-erence resolution and word sense disambiguation, and many NLP applications, such as event extrac-tion systems and question answering technology.
Semantic class tagging has been the subject of previous research, primarily under the guises of named entity recognition (NER) and mention de-tection . Named entity recognizers perform se-mantic tagging on proper name noun phrases, and sometimes temporal and numeric expressions as well. The mention detection task was introduced in recent ACE evaluations (e.g., (ACE, 2007; ACE, 2008)) and requires systems to identify all noun phrases (proper names, nominals, and pro-nouns) that correspond to 5-7 semantic classes.
Despite widespread interest in semantic tag-ging, nearly all semantic taggers for comprehen-sive NP tagging still rely on supervised learn-ing, which requires annotated data for training. A few annotated corpora exist, but they are rela-tively small and most were developed for broad-coverage NLP. Many domains, however, are re-plete with specialized terminology and jargon that cannot be adequately handled by general-purpose systems. Domains such as biology, medicine, and law are teeming with specialized vocabulary that necessitates training on domain-specific corpora.
Our research explores the idea of inducing domain-specific semantic taggers using a small set of seed words as the only form of human su-pervision. Given an (unannotated) collection of domain-specific text, we automatically generate training instances by labelling every instance of a seed word with its designated semantic class. We then train a classifier to do semantic tagging using these seed-based annotations, using bootstrapping to iteratively improve performance.

On the surface, this approach appears to be a contradiction. The classifier must learn how to as-sign different semantic tags to different instances of the same word based on context (e.g.,  X  X ab X  may refer to an animal in one context but a labora-tory in another). And yet, we plan to train the clas-sifier using stand-alone seed words, making the as-sumption that every instance of the seed belongs to the same semantic class. We resolve this apparent contradiction by using semantically unambiguous seeds and by introducing an initial context-only training phase before bootstrapping begins. First, we train a strictly contextual classifier that only has access to contextual features and cannot see the seed. Then we apply the classifier to the corpus to automatically label new instances, and combine these new instances with the seed-based instances. This process expands and diversifies the training set to fuel subsequent bootstrapping.

Another challenge is that we want to use a small set of seeds to minimize the amount of human ef-fort, and then use bootstrapping to fully exploit the domain-specific corpus. Iterative self-training, however, often has difficulty sustaining momen-tum or it succumbs to semantic drift (Komachi et al., 2008; McIntosh and Curran, 2009). To address these issues, we simultaneously induce a suite of classifiers for multiple semantic cat-egories, using the positive instances of one se-mantic category as negative instances for the oth-ers. As bootstrapping progresses, the classifiers gradually improve themselves, and each other, over many iterations. We also explore a one-semantic-class-per-discourse (OSCPD) heuristic that infuses the learning process with fresh train-ing instances, which may be substantially differ-ent from the ones seen previously, and we use the labels produced by the classifiers to dynamically create semantic features.

We evaluate our approach by creating six se-mantic taggers using a collection of message board posts in the domain of veterinary medicine. Our results show this approach produces high-quality semantic taggers after a sustained bootstrapping cycle that maintains good precision while steadily increasing recall over many iterations. Semantic class tagging is most closely related to named entity recognition (NER), mention detec-tion , and semantic lexicon induction . NER sys-tems (e.g., (Bikel et al., 1997; Collins and Singer, 1999; Cucerzan and Yarowsky, 1999; Fleischman and Hovy, 2002) identify proper named entities, such as people, organizations, and locations. Sev-eral bootstrapping methods for NER have been previously developed (e.g., (Collins and Singer, 1999; Niu et al., 2003)). NER systems, how-ever, do not identify nominal NP instances (e.g.,  X  X  software manufacturer X  or  X  X he beach X ), or han-dle semantic classes that are not associated with mention detection systems (e.g., see (ACE, 2005; ACE, 2007; ACE, 2008)) require tagging of NPs that correspond to 5-7 general semantic classes. These systems are typically trained with super-vised learning using annotated corpora, although techniques have been developed to use resources for one language to train systems for different lan-guages (e.g., (Zitouni and Florian, 2009)).
Another line of relevant work is semantic class induction (e.g., (Riloff and Shepherd, 1997; Roark and Charniak, 1998; Thelen and Riloff, 2002; Ng, 2007; McIntosh and Curran, 2009), where the goal is to induce a stand-alone dictionary of words with semantic class labels. These techniques are of-ten designed to learn specialized terminology from unannotated domain-specific texts via bootstrap-ping. Our work, however, focuses on classifica-tion of NP instances in context, so the same phrase may be assigned to different semantic classes in different contexts. Consequently, our classifier can also assign semantic class labels to pronouns.
There has also been work on extracting seman-tically related terms or category members from the Web (e.g., (Pas  X ca, 2004; Etzioni et al., 2005; Kozareva et al., 2008; Carlson et al., 2009)). These techniques harvest broad-coverage semantic infor-mation from the Web using patterns and statistics, typically for the purpose of knowledge acquisi-tion. Importantly, our goal is to classify instances in context, rather than generate lists of terms. In addition, the goal of our research is to learn spe-cialized terms and jargon that may not be common on the Web, as well as domain-specific usages that may differ from the norm (e.g.,  X  X ix X  and  X  X ab X  are usually ANIMALS in our domain).

The idea of simulataneously learning multiple semantic categories to prevent semantic drift has been explored for other tasks, such as semantic lexicon induction (Thelen and Riloff, 2002; McIn-tosh and Curran, 2009) and pattern learning (Yan-garber, 2003). Our bootstrapping model can be viewed as a form of self-training (e.g., (Ng and Cardie, 2003; Mihalcea, 2004; McClosky et al., 2006)), and cross-category training is similar in spirit to co-training (e.g., (Blum and Mitchell, 1998; Collins and Singer, 1999; Riloff and Jones, 1999; Mueller et al., 2002; Phillips and Riloff, 2002)). But, importantly, our classifiers all use the same feature set so they do not represent indepen-dent views of the data. They do, however, offer slightly different perspectives because each is at-tempting to recognize a different semantic class. 3.1 Motivation Our goal is to create a bootstrapping model that can rapidly create semantic class taggers using just a small set of seed words and an unanno-tated domain-specific corpus. Our motivation comes from specialized domains that cannot be adequately handled by general-purpose NLP sys-tems. As an example of such a domain, we have been working with a collection of message board posts in the field of veterinary medicine. Given a document, we want a semantic class tagger to label every NP with a semantic category, for example:
When we began working with these texts, we were immediately confronted by a dizzying array of non-standard words and word uses. In addition to formal veterinary vocabulary (e.g., animal dis-eases), veterinarians often use informal, shorthand terms when posting on-line. For example, they frequently refer to breeds using  X  X icknames X  or shortened terms (e.g., gshep for German shepherd, doxy for dachsund, bxr for boxer, labx for labrador cross). Often, they refer to animals based solely on their physical characteristics, for example  X  X  dlh X  (domestic long hair),  X  X  m/n X  (male, neutered), or  X  X  2yo X  (2 year old). This phenomenon occurs with other semantic categories as well, such as drugs and medical tests (e.g., pred for prednisone, and rads for radiographs).

Nearly all semantic class taggers are trained us-ing supervised learning with manually annotated data. However, annotated data is rarely available for specialized domains, and it is expensive to ob-tain because domain experts must do the annota-tion work. So we set out to create a bootstrapping model that can rapidly create domain-specific se-mantic taggers using just a few seed words and a domain-specific text collection.

Our bootstrapping model consists of two dis-tinct phases. First, we train strictly contextual classifiers from the seed annotations. We then ap-ply the classifiers to the unlabeled data to gener-ate new annotated instances that are added to the training set. Second, we employ a cross-category bootstrapping process that simultaneously trains a suite of classifiers for multiple semantic cate-gories, using the positive instances for one se-mantic class as negative instances for the oth-ers. This cross-category training process gives the learner sustained momentum over many boot-strapping iterations. Finally, we explore two ad-ditional enhancements: (1) a one-semantic-class-per-discourse heuristic to automatically generate new training instances, and (2) dynamically cre-ated semantic features produced by the classifiers themselves. In the following sections, we explain each of these steps in detail. 3.2 Phase 1: Inducing a Contextual Classifier The main challenge that we faced was how to train an instance-based classifier using seed words as the only form of human supervision. First, the user must provide a small set of seed words that are relatively unambiguous (e.g.,  X  X og X  will nearly always refer to an animal in our domain). But even so, training a traditional classifier from seed-based instances would likely produce a classifier that learns to recognize the seeds but is unable to classify new examples. We needed to force the classifier to generalize beyond the seed words.
Our solution was to introduce an initial train-ing step that induces a strictly contextual classifier . First, we generate training instances by automati-cally labeling each instance of a seed word with its designated semantic class. However, when we create feature vectors for the classifier, the seeds themselves are hidden and only contextual fea-tures are used to represent each training instance. By essentially  X  X asking X  the seed words so the classifier can only see the contexts around them, we force the classifier to generalize.

We create a suite of strictly contextual classi-fiers , one for each semantic category. Each classi-fier makes a binary decision as to whether a noun phrase belongs to its semantic category. We use the seed words for category C tive training instances for the C seed words for all other categories to generate the negative training instances for C
We use an in-house sentence segmenter and NP chunker to identify the base NPs in each sentence and create feature vectors that represent each con-stituent in the sentence as either an NP or an in-dividual word. For each seed word, the feature vector captures a context window of 3 constituents (word or NP) to its left and 3 constituents (word or NP) to its right. Each constituent is represented with a lexical feature: for NPs, we use its head noun; for individual words, we use the word itself. The seed word, however, is discarded so that the classifier is essentially blind-folded and cannot see the seed that produced the training instance. We also create a feature for every modifier that pre-cedes the head noun in the target NP, except for articles which are discarded. As an example, con-sider the following sentence: Suppose that  X  X ELV X  is a seed for the DISEASE category and  X  X est X  is a seed for the TEST cate-gory. Two training instances would be created, with feature vectors that look like this, where M represents a modifier inside the target NP: was  X  3 diagnosed  X  2 with  X  1 af ter 1 test 2 showed 3  X  DISEASE with  X  3 F ELV  X  2 af ter  X  1 blood M showed 1 that 2 he 3  X  TEST
The contextual classifiers are then applied to the corpus to automatically label new instances. We use a confidence score to label only the instances that the classifiers are most certain about. We com-pute a confidence score for instance i with respect to semantic class C of the C competing classifiers. Intuitively, we have confi-dence in labeling an instance as category C C is much higher than the score of any other classi-fier. We use the following scoring function: We employ support vector machines (SVMs) (Joachims, 1999) with a linear kernel as our classi-fiers, using the SVMlin software (Keerthi and De-Coste, 2005). We use the value produced by the decision function (essentially the distance from the hyperplane) as the score for a classifier. We specify a threshold  X  tag C
All instances that pass the confidence thresh-old are labeled and added to the training set. This process greatly enhances the diversity of the training data. In this initial learning step, the strictly contextual classifiers substantially in-crease the number of training instances for each semantic category, producing a more diverse mix of seed-generated instances and context-generated instances. 3.3 Phase 2: Cross-Category Bootstrapping The next phase of the learning process is an iter-ative bootstrapping procedure. The key challenge was to design a bootstrapping model that would not succumb to semantic drift and would have sus-tained momentum to continue learning over many iterations.

Figure 1 shows the design of our cross-category bootstrapping model. 2 We simultaneously train a suite of binary classifiers, one for each semantic category, C all of the classifiers are applied to the remaining unlabeled instances and each classifier labels the (positive) instances that it is most confident about (i.e., the instances that it classifies with a confi-dence score  X   X  labeled by classifier C 1. All of the new instances produced by classifier C instances for C instances for all of the other classifiers.
One potential problem with this scheme is that some categories are more prolific than others, plus we are collecting negative instances from a set of competing classifiers. Consequently, this ap-proach can produce highly imbalanced training sets. Therefore we enforced a 3:1 ratio of nega-tives to positives by randomly selecting a subset of the possible negative instances. We discuss this issue further in Section 4.4.
Cross-category training has two advantages over independent self-training. First, as oth-ers have shown for pattern learning and lexicon induction (Thelen and Riloff, 2002; Yangarber, 2003; McIntosh and Curran, 2009), simultane-ously training classifiers for multiple categories reduces semantic drift because each classifier is deterred from encroaching on another one X  X  terri-tory (i.e., claiming the instances from a compet-ing class as its own). Second, similar in spirit to to obtain new training instances from an outside source that has a slightly different perspective. While independent self-training can quickly run out of steam, cross-category training supplies each classifier with a constant stream of new (negative) instances produced by competing classifiers. In Section 4, we will show that cross-category boot-strapping performs substantially better than an in-dependent self-training model, where each classi-fier is bootstrapped separately.

The feature set for these classifiers is exactly the same as described in Section 3.2, except that we add a new lexical feature that represents the head noun of the target NP (i.e., the NP that needs to be tagged). This allows the classifiers to consider the local context as well as the target word itself when making decisions. 3.4 One Semantic Class Per Discourse We also explored the idea of using a one semantic class per discourse (OSCPD) heuristic to gener-ate additional training instances during bootstrap-ping. Inspired by Yarowsky X  X  one sense per dis-course heuristic for word sense disambiguation (Yarowsky, 1995), we make the assumption that multiple instances of a word in the same discourse will nearly always correspond to the same seman-tic class. Since our data set consists of message board posts organized as threads, we consider all posts in the same thread to be a single discourse.
After each training step, we apply the classi-fiers to the unlabeled data to label some new in-stances. For each newly labeled instance, the OS-CPD heuristic collects all instances with the same head noun in the same discourse (thread) and uni-laterally labels them with the same semantic class. This heuristic serves as meta-knowledge to label instances that (potentially) occur in very different contexts, thereby infusing the bootstrapping pro-cess with  X  X resh X  training examples.

In early experiments, we found that OSCPD can be aggressive, pulling in many new instances. If the classifier labels a word incorrectly, however, then the OSCPD heuristic will compound the er-ror and mislabel even more instances incorrectly. Therefore we only apply this heuristic to instances that are labeled with extremely high confidence (  X  gsc ( w )  X  0.2, which ensures that a relatively high proportion of labeled instances with the same head noun have been assigned to the same semantic class. Specifically, gsc ( w ) = 0 . 1  X  w l/c where w beled instances, respectively, w stances labeled as c , and w instances that receive a positive confidence score for c when given to the classifier. The intuition behind the second term is that most instances are initially unlabeled and we want to make sure that many of the unlabeled instances are likely to be-long to the same semantic class (even though the classifier isn X  X  ready to commit to them yet). 3.5 Dynamic Semantic Features For many NLP tasks, classifiers use semantic fea-tures to represent the semantic class of words. These features are typically obtained from exter-nal resources such as Wordnet (Miller, 1990). Our bootstrapping model incrementally trains seman-tic class taggers, so we explored the idea of using the labels assigned by the classifiers to create en-hanced feature vectors by dynamically adding se-mantic features. This process allows later stages of bootstrapping to directly benefit from earlier stages. For example, consider the sentence: If  X  X etsulin X  was labeled as a DRUG in a previ-ous bootstrapping iteration, then the feature vector representing the context around  X  X oxy X  can be en-hanced to include an additional semantic feature identifying Vetsulin as a DRUG , which would look like this: He  X  2 started  X  1 on 1 V etsulin 2 DRU G 2 today 3 Intuitively, the semantic features should help the classifier identify more general contextual pat-terns, such as  X  X tarted &lt; X &gt; on DRUG X  . To create semantic features, we use the semantic tags that have been assigned to the current set of labeled in-stances. When a feature vector is created for a tar-get NP, we check every noun instance in its context window to see if it has been assigned a semantic tag, and if so, then we add a semantic feature. In the early stages of bootstrapping, however, rela-tively few nouns will be assigned semantic tags, so these features are often missing. 3.6 Thresholds and Stopping Criterion When new instances are automatically labeled during bootstrapping, it is critically important that most of the labels are correct or performance rapidly deteriorates. This suggests that we should only label instances in which the classifier has high confidence. On the other hand, a high thresh-old often yields few new instances, which can cause the bootstrapping process to sputter and halt. To balance these competing demands, we used a sliding threshold that begins conservatively but gradually loosens the reins as bootstrapping pro-gresses. Initially, we set  X  labels instances that the classifier is highly confi-dent about. When fewer than min new instances can be labeled, we automatically decrease  X  0.2, allowing another batch of new instances to be labeled, albeit with slightly less confidence. We continue decreasing the threshold, as needed, un-til  X  process. In Section 4, we show that this sliding threshold outperforms fixed threshold values. 4.1 Data Our data set consists of message board posts from the Veterinary Information Network (VIN), which is a web site (www.vin.com) for professionals in veterinary medicine. Among other things, VIN hosts forums where veterinarians engage in dis-cussions about medical issues, cases in their prac-tices, etc. Over half of the small animal veterinar-ians in the U.S. and Canada use VIN. Analysis of veterinary data could not only improve pet health care, but also provide early warning signs of in-fectious disease outbreaks, emerging zoonotic dis-eases, exposures to environmental toxins, and con-tamination in the food chain.

We obtained over 15,000 VIN message board threads representing three topics: cardiology, en-docrinology, and feline internal medicine. We did basic cleaning, removing html tags and tokeniz-ing numbers. For training, we used 4,629 threads, consisting of 25,944 individual posts. We devel-oped classifiers to identify six semantic categories:
The message board posts contain an abundance of veterinary terminology and jargon, so two do-key) for our evaluation. We defined annotation ducted an inter-annotator agreement study to mea-sure the consistency of the two domain experts on 30 message board posts, which contained 1,473 noun phrases. The annotators achieved a relatively high  X  score of .80. Each annotator then labeled an additional 35 documents, which gave us a test set containing 100 manually annotated message board posts. The table below shows the distribution of semantic classes in the test set.

To select seed words, we used the procedure proposed by Roark and Charniak (1998), ranking all of the head nouns in the training corpus by fre-quency and manually selecting the first 10 nouns that unambiguously belong to each category. 7 This process is fast, relatively objective, and guaranteed to yield high-frequency terms, which is important for bootstrapping. We used the Stanford part-of-speech tagger (Toutanova et al., 2003) to identify nouns, and our own simple rule-based NP chunker. 4.2 Baselines To assess the difficulty of our data set and task, we evaluated several baselines. The first baseline searches for each head noun in WordNet and la-bels the noun as category C synset corresponding to that category. We manu-ally identified the WordNet synsets that, to the best of our ability, seem to most closely correspond to each semantic class. We do not report Word-Net results for TEST because there did not seem be an appropriate synset, or for the OTHER cate-gory because that is a catch-all class. The first row of Table 1 shows the results, which are reported line yields low recall (21-32%) for every category except HUMAN , which confirms that many veteri-nary terms are not present in WordNet. The sur-prisingly low precision for some categories is due to atypical word uses (e.g., patient , boy , and girl are HUMAN in WordNet but nearly always ANI -MALS in our domain), and overgeneralities (e.g., WordNet lists calcium as a DRUG ).

The second baseline simply labels every in-stance of a seed with its designated semantic class. All non-seed instances remain unlabeled. As ex-pected, the seeds produce high precision but low recall. The exception is HUMAN , where 80% of the instances match a seed word, undoubtedly be-cause five of the ten HUMAN seeds are 1st and 2nd person pronouns, which are extremely common.
A third baseline trains semantic classifiers using supervised learning by performing 10-fold cross-validation on the test set. The feature set and classifier settings are exactly the same as with achieves good precision but low recall for all cate-gories except ANIMAL and HUMAN . In the next section, we present the experimental results for our bootstrapped classifiers. 4.3 Results for Bootstrapped Classifiers The bottom section of Table 1 displays the results for our bootstrapped classifiers. The Contextual I.1 row shows results after just the first iteration, which trains only the strictly contextual classi-fiers . The average F score improved from 53.1 for the seeds alone to 64.3 with the contextual classi-fiers. The next row, XCategory I.45 , shows the results after cross-category bootstrapping, which ended after 45 iterations. (We indicate the num-ber of iterations until bootstrapping ended using the notation I.# .) With cross-category bootstrap-ping, the average F score increased from 64.3 to 76.1. A closer inspection reveals that all of the se-mantic categories except HUMAN achieved large recall gains. And importantly, these recall gains were obtained with relatively little loss of preci-sion, with the exception of TEST .

Next, we measured the impact of the one-semantic-class-per-discourse heuristic, shown as XCat+OSCPD I.40 . From Table 1, it appears that OSCPD produced mixed results: recall increased by 1-4 points for DIS / SYM , DRUG , HUMAN , and OTHER , but precision was inconsistent, improv-ing by +4 for T EST but dropping by -8 for DRUG . However, this single snapshot in time does not tell the full story. Figure 2 shows the performance of the classifiers during the course of bootstrap-ping. The OSCPD heuristic produced a steeper learning curve, and consistently improved perfor-mance until the last few iterations when its perfor-mance dipped. This is probably due to the fact that noise gradually increases during bootstrapping, so incorrect labels are more likely and OSCPD will compound any mistakes by the classifier. A good future strategy might be to use the OSCPD heuris-tic only during the early stages of bootstrapping when the classifier X  X  decisions are most reliable.
We also evaluated the effect of dynamically cre-ated semantic features. When added to the ba-sic XCategory system, they had almost no ef-fect. We suspect this is because the semantic fea-tures are sparse during most of the bootstrapping process. However, the semantic features did im-
Figure 2: Average F scores after each iteration prove performance when coupled with the OSCPD heuristic, presumably because the OSCPD heuris-tic aggressively labels more instances in the earlier stages of bootstrapping, increasing the prevalence of semantic class tags. The XCat+OSCPD+SF I.39 row in Table 1 shows that the semantic fea-tures coupled with OSCPD dramatically increased the precision for DRUG , yielding the best overall F score of 76.6.

We conducted one additional experiment to as-sess the benefits of cross-category bootstrapping. We created an analogous suite of classifiers using self-training, where each classifier independently labels the instances that it is most confident about, adds them only to its own training set, and then retrains itself. The Ind. Self-Train I.13 row in Table 1 shows that these classifiers achieved only 58% recall (compared to 75% for XCategory ) and an average F score of 67.4 (compared to 76.1 for XCategory ). One reason for the disparity is that the self-training model ended after just 13 boot-strapping cycles ( I.13 ), given the same threshold values. To see if we could push it further, we low-ered the confidence threshold to 0 and it continued learning through 35 iterations. Even so, its final score was 65% recall with 79% precision, which is still well below the 75% recall with 78% precision produced by the XCategory model. These results support our claim that cross-category bootstrap-ping is more effective than independently self-trained models.

Figure 3 tracks the recall and precision scores of the XCat+OSCPD+SF system as bootstrap-ping progresses. This graph shows the sustained momentum of cross-category bootstrapping: re-Figure 3: Recall and Precision scores during cross-category bootstrapping call steadily improves while precision stays con-sistently high with only a slight dropoff at the end. 4.4 Analysis To assess the impact of corpus size, we generated a learning curve with randomly selected subsets of the training texts. Figure 4 shows the average F score of our best system using 1 all of the data. With just 1 the system has about 1,600 message board posts to use for training, which yields a similar F score (roughly 61%) as the supervised baseline that used 100 manually annotated posts via 10-fold cross-validation. So with 16 times more text, seed-based bootstrapping achieves roughly the same results as supervised learning. This result reflects the natural trade-off between supervised learning and seed-based bootstrapping. Supervised learning exploits manually annotated data, but must make do with a relatively small amount of training text because manual annotations are expensive. In contrast, seed-based bootstrapping exploits a small number of human-provided seeds, but needs a larger set of (unannotated) texts for training because the seeds produce relatively sparse annotations of the texts.
An additional advantage of seed-based boot-strapping methods is that they can easily exploit unlimited amounts of training text. For many do-mains, large text collections are readily available. Figure 4 shows a steady improvement in perfor-mance as the amount of training text grows. Over-all, the F score improves from roughly 61% to nearly 77% simply by giving the system access to more unannotated text during bootstrapping.
We also evaluated the effectiveness of our slid-ing confidence threshold (Section 3.6). The ta-ble below shows the results using fixed thresholds of 1.0, 1.5, 2.0, as well as the sliding threshold (which begins at 2.0 and ends at 1.0 decreasing by 0.2 when the number of newly labeled instances falls below 3000 (i.e., &lt; 500 per category, on av-erage). This table depicts the expected trade-off between recall and precision for the fixed thresh-olds, with higher thresholds producing higher pre-cision but lower recall. The sliding threshold pro-duces the best F score, achieving the best balance of high recall and precision.
As mentioned in Section 3.3, we used 3 times as many negative instances as positive instances for every semantic category during bootstrap-ping. This ratio was based on early experiments where we needed to limit the number of neg-ative instances per category because the cross-category framework naturally produces an ex-tremely skewed negative/positive training set. We revisited this issue to empirically assess the impact of the negative/positive ratio on performance. The table below shows recall, precision, and F score results when we vary the ratio from 1:1 to 5:1. A 1:1 ratio seems to be too conservative, improving precision a bit but lowering recall. However the difference in performance between the other ra-tios is small. Our conclusion is that a 1:1 ratio is too restrictive but, in general, the cross-category bootstrapping process is relatively insensitive to the specific negative/positive ratio used. Our ob-servation from preliminary experiments, however, is that the negative/positive ratio does need to be controlled, or else the dominant categories over-whelm the less frequent categories with negative instances.

Finally, we examined performance on gendered pronouns (he/she/him/her), which can refer to ei-ther animals or people in the veterinary domain. 84% (220/261) of the gendered pronouns were an-notated as ANIMAL in the test set. Our classi-fier achieved 95% recall (209/220) and 90% preci-sion (209/232) for ANIMAL and 15% recall (6/41) and 100% precision (6/6) for HUMAN . So while it failed to recognize most of the (relatively few) gendered pronouns that refer to a person, it was highly effective at identifying the ANIMAL refer-ences and it was always correct when it did assign a
HUMAN tag to a pronoun. We presented a novel technique for inducing domain-specific semantic class taggers from a handful of seed words and an unannotated text collection. Our results showed that the induced taggers achieve good performance on six seman-tic categories associated with the domain of vet-erinary medicine. Our technique allows seman-tic class taggers to be rapidly created for special-ized domains with minimal human effort. In future work, we plan to investigate whether these seman-tic taggers can be used to improve other tasks. We are very grateful to the people at the Veterinary Information Network for providing us access to their resources. Special thanks to Paul Pion, DVM and Nicky Mastin, DVM for making their data available to us, and to Sherri Lofing and Becky Lundgren, DVM for their time and expertise in creating the gold standard annotations. This re-search was supported in part by Department of Homeland Security Grant N0014-07-1-0152 and Air Force Contract FA8750-09-C-0172 under the DARPA Machine Reading Program.

