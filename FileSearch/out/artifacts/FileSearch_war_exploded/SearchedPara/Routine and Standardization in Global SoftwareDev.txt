 We present an ethnographic field study of a distributed soft-ware development team following the Scrum methodology. During a two-week period, we observed from both sites the collaboration between a Danish software company off-shoring part of their development to an Indian solution provider. Collaboration by its very definition is based on the notion of dependency in work between multiple people. Articula-tion work is the extra work required to handle these de-pendencies. In a globally distributed team, managing these dependencies is exacerbated due to the distances of time, space, and culture. To broaden our understanding of de-pendencies in a global context and how they influence work practices, we made them the focus of our analysis. The main contributions of this paper are (i) an empirical account of the dependencies that are part of the collaborative work in a global software development team, (ii) a discussion of the interlinked properties of dependencies, and (iii) an explana-tion of how the practices of standardization and routine are developed and used to manage these dependencies.
 K.4.3 [ Organizational Impacts ]: Computer-supported col-laborative work Global software development; ethnographic study; depen-dencies; standardization; routine
Work in software development projects is increasingly be-ing carried out by distributed teams. Distributed or global collaboration allows companies to take advantage of a global workforce, execute work at different hours of the day, and keep work close to different target markets. However, this way of working also introduces a number of problems related to the distances of time, space, and culture by increasing the  X  X each X  X 16]. With collaboration spanning multiple countries and time zones, one key challenge concerns the difficulties in handling dependencies as they emerge and become pertinent in the collaboration across geographical sites.

Collaboration by its very definition is based upon the no-tion of dependency in work between multiple people. People collaborate when  X  X hey are mutually dependent in their work and therefore are required to cooperate in order to get the work done X  [28]. Collaborative actors are interdependent in their work, which requires them to articulate their distribu-ted yet individual activities. Articulation work is the extra work required to handle the dependencies that arise in col-laborative work [32], and has in prior research been identified as an important aspect of global software development [4]. However, this extra work tends to be neglected [25]. Strate-gies such as coordination or knowledge practices have been suggested to solve such issues [3, 29]; however, our interest in this paper is to examine how the articulation work involved in handling dependencies is related to practices of routine and standardization.

Initially we wanted to reveal the basic set of dependen-cies as they unfold in geographical distributed practices; however, examining our empirical observations it was clear that certain dependencies such as location, people, collabo-rative activities, and artifacts created particular conditions for how the work and collaboration could unfold in practice. More interestingly, however, it became clear that the key mechanisms software developers enacted when handling the challenges that emerge due to the dependencies in practice concerned standardization and routine. Therefore, the re-search question investigated in this paper concerns how the mechanisms of routine and standardization were enacted in practice by software developers when overcoming the depen-dencies that constituted global software development prac-tices.

In this paper we zoom in and explore ethnographically which dependencies are constitutive of the globally distri-buted work practices within software development. In addi-tion, we investigate how dispersed software developers han-dle and deal with dependencies in their work and, in particu-lar, the role of standardization and routine. As an empirical case we chose to study global Scrum practices as they emerge between two geographical sites in Denmark and India. What makes this an excellent case to study dependencies is that the project was divided equally between developers at both sites and entailed many diverse types of dependencies, which the participants had to deal with on a daily basis. We had the unique opportunity to follow the work practices between t he two sites in detail over a period of 14 days, where one of us observed the work from the site in Denmark while the other observed the work from the Indian location, allowing us access to a global view of the collaborative setup [27]. By exploring these work practices we are able to create a rich understanding of the work as it emerged from the data, while zooming in on the strategies for how the geographical distri-buted partners succeeded in reducing the effort involved in articulation work through strategies of standardization and routine practices.

The main contributions of this paper are as follows: (i) an empirical account of the dependencies that are part of the collaborative work in a global software development team, (ii) a discussion of the interlinked properties of dependen-cies, and (iii) an explanation of how the practices of stan-dardization and routine are developed and used to manage these dependencies. Interestingly, we found that standardiz-ing the technology needed for the work seemed much harder than standardizing the processes of work.

The paper is structured as follows. First, we present re-lated work on global software development, dependencies, and standardization and routine. Then we present our em-pirical case, data material, and analysis method. This is followed by a results section presenting our empirical data structured into subsections, each focusing on particular de-pendencies that constitute the global software development practices. Then we discuss the empirical findings by enfold-ing previous literature on standardization and routine.
The term dependencies refers to coupling among entities or relations, where change in one area might produce certain changes (sometimes unanticipated) in other areas. When a dependency arises in collaborative work, a certain reliance is created, where individual work becomes interlinked with the work of others, and therefore articulation work is re-quired [32]. Thus, collaborative work by its very definition is based on the notion of dependencies, and articulation work is the work involved in handling these dependencies. Previ-ous research on dependencies in distributed software collab-oration projects tends to focus on the software dependencies that affect programming activities [e.g. 7, 11, 19] or docu-ments [8]. Software dependencies occur when one part of a program depends on another, and since most larger IT systems are created by multiple people working together, software dependencies are of crucial importance to under-standing the often tight coupling between people.
Although software and document dependencies are impor-tant, our interest is to zoom out from the concrete software code and documents, and instead focus on the organiza-tional practices of coordination, which are critical to han-dling the articulation work in global software development. Dependency in work is part of the definition of collabora-tion, and much research has thus been conducted in terms of figuring out how practitioners involved in collaboration accommodate the challenges of articulation work [5, 25], for example, in terms coordination [16, 18], knowledge manage-ment [3, 22], commitment and transparency [31], or aware-ness [10]. In this paper, we are particularly interested in coordination as a strategy to handle articulation work. Mal-lone and Crowston define the very process of coordination as  X  X he act of managing the interdependencies between activ-ities X  [24, p. 90] and suggest that we may further investigate the processes of managing dependencies by  X  X haracterizing different kinds of dependencies and identifying the coordi-nation processes that can be used to manage them X  [24, p. 91]. In order for us to unravel the coordination activities in global software work, we will need to look at the dependen-cies as they manifest themselves in everyday work and what strategies are used for managing these.

Coordination is a strategy to handle articulation work [e.g 16, 21, 28] and in earlier studies it has been investigated in different ways: as coordination mechanisms where a protocol for work is embedded within an artifact [29], as coordina-tion by avoidance [21], or as the difference between segre-gation and standardization [16]. Segregation or avoidance are both strategies where the aim is to keep work separated and reduce connections within the work, thus reducing the complexity of coordination. As a strategy this has been applied in global software development, where practices of decomposing and recomposing have been identified [18], or in terms of minimizing interaction across sites [20]. In con-trast, the strategy of standardization is quite different; in-stead of trying to divide the work into smaller pieces, thus reducing the relations, standardization seeks to keep the re-lations within the work but instead create the same (or at least similar) conditions for the collaboration across people. In global software development one of the challenges is to create standardization of practices across multiple hetero-geneous sites, since the basic conditions for collaboration are dependent on the geographical site where the people are physically located. The world is not flat [35].

Standardization has often been conceptualized as top-down imposed processes where practitioners are forced or disci-plined into working in certain ways guided by the catego-rization schemes embedded within the technology [1, 33]. However, recent studies on standardizations in practice have shown that standardizations are not stabilized and predeter-mined entities but instead malleable and negotiated [6], and thus standardization from a practice perspective [15] com-prises incomplete and co-constructed practices, where people enact and make the standards work for them in practice [13].
While standardization is a difficult strategy to employ in global work, one of the interesting aspects we found in our data was that this was the preferred strategy of the prac-titioners, and thus we wanted to investigate why that is and how they manage to deploy the standardization strat-egy as a general approach to reduce the complexity of artic-ulation work. So our interest is to see how standardization is achieved as a collective and emergent accomplishment [26] where the various dependencies, which affect the collabora-tive engagement, are coming into place.
To investigate the enactment of routine and standardiza-tion in global software development practice, we examined the empirical observations from our workplace study [23], focusing on the collaborative practices that arose in a global software development team distributed across Denmark and India. What makes this approach particularly applicable for such a study is that we were able to experience the prac-tices as they unfolded rather than forcing a particular the-oretical conceptualization on our data. For two weeks we observed the work practices simultaneously from two geo-g raphical locations, one observer in Denmark and one in India, collecting data material about their work practices. We also interviewed 12 employees in total.

After the empirical observation, all notes were aligned and the interviews were transcribed. Since the study was designed with one researcher being in India while another was in Denmark, the first part of the analysis was zooming in on the observed practices from each location. To ana-lyze the data, each researcher first went through their own notes, conducted within-case analysis [12], and annotated the dependencies that began to emerge from the data ma-terial. We used a grounded-theory-inspired approach [17] where candidates for dependencies emerged from the data rather than applying predefined theoretical categories from the literature. Following the within-case analysis we began to compare the data across the cases by conducting cross-case analysis [12]. This work was done through a shared document within which we identified important actors, ac-tivities, and technologies and the relations and associations between them. This approach allowed us to take a broad perspective on the data material, from which we believe we were able to identify many of the dependencies that existed in the work during the observation period.

During our data analysis, we created a dependency graph in which we tried to visualize the connections between ob-served dependencies. However, we quickly saw, as this graph grew in size, that the dependencies we had observed were all somehow linked in a much larger structure encompassing the whole observation period. Figure 1 shows a small excerpt of our dependency graph.
 Figure 1: An excerpt of the dependency graph gen-e rated from our data material.

Despite our efforts to learn about individual or small clus-ters of dependencies through a dependency graph visualiza-tion, we saw how a myriad of dependencies were linked in much larger structures, and while we could pick and exam-ine one, its meaning and effects were tightly linked to other such dependencies.

While the initial focus concerned the dependencies, as the analysis proceeded and empirical write-ups and thick de-scriptions were made, it became clear that the important finding of the data was not simply in the descriptions of the dependencies. Instead it became clear that the main inter-esting findings, which emerged in different ways and places from the data, concerned how mechanisms of standardiza-tion and routine were enacted. Therefore, in an iterative process of redefining focus and stabilizing the empirical nar-rative, two main contributions appeared: 1) an empirical account of the dependencies that constitute the global soft-ware development practices, 2) the role and practices by which standardization and routine are enacted to handle the complexities of the global work.
The organizational setup was an outsourcing setup be-tween a Danish software vendor (DKSoft) working out of Denmark and L&amp;T Infotech, a large Indian outsource spe-cialist working out of India. While two people from L&amp;T In-fotech had been temporarily relocated to work in Denmark, most of the collaboration was mediated through technology. The IT system being developed was a financial software sys-tem for the Scandinavian market, and it had been worked on for just over a year when we visited. The global work was organized by following the Scrum methodology from the beginning of the project [30]. The decision to apply the Scrum methodology was chosen by the Danish company, as the project was large and targeted the whole Scandinavian market. Given this complexity, the Danish project man-agement estimated that it would be impossible to define re-quirements up front and opted for an iterative development approach. Additionally, they had prior positive experiences following the Scrum methodology on other projects. The Indian outsourcing company had trained their staff in the execution of Scrum precisely to be able to work with Scan-dinavian vendors.
 The Scrum team we followed was distributed across both Denmark and India. In Denmark, the Scrum master, prod-uct owner, and test lead were sitting along two Indian de-velopers that had been temporarily relocated to Denmark. In India, the team consisted of two front-end developers, two back-end developers, and one tester. All but one of the Indian Scrum team members had previously been to Den-mark to work for about half a year at the Danish site. The team followed the Scrum process with daily meetings, esti-mations meetings, sprint planning, demonstration meetings, and sprint retrospective. All meetings with the exception of the demonstration meeting were conducted using videocon-ferencing with participants from both locations.
 The empirical data were collected in the period between Aug 12 2013 and Aug 23 2013 , where one researcher visited L&amp;T Infotech in Mumbai, while another researcher visited DKSoft in Ballerup. In total, 36 hours were spent on obser-vations, where 15 were in DKSoft and 21 in L&amp;T Infotech. Observations included meetings, individuals working, the environment in general, as well as the workspace arrange-ments, etc. Twelve interviews were conducted with team members in both Denmark and India. Each interview on average lasted about 30 minutes and was later transcribed. In total, we interviewed five team members in India (four developers and one tester) and seven team members in Den-mark (the project manager, product owner, test manager, Scrum master, a colleague in charge of the infrastructure, and two temporarily onshore Indian developers).

All the data material was collected and shared across the authors and discussed both during data collection (using Skype) as well as after through the iterative writing process, creating diverse, thick descriptions and cut-down narratives based on the data material.
W hile presenting our empirical data, we will be focus-ing on the diverse sets of dependencies that we observed during the two-week period of close collaboration between the two sites. We ended up structuring our main findings within four different perspectives, which became evident as our data analysis progressed: the locations, the people, the collaborative activities, and the artifacts. What makes each of these perspectives interesting for our analysis is that they each form a dependency set that is constitutive for the global software development practice. We label these perspectives as  X  X ependencies X  as they each, in different ways, interlink the practices while providing certain conditions for how the collaboration could unfold. Dependency concerns a coupling or relation between multiple entities, where change in one entity produces ripple effects in other entities. Coupling and reliance do not appear only in between people; certain other entities, such as the location where one works, create particular conditions for the collaboration, and as such a de-pendency in the work. It does matter whether the developer who is normally located in Mumbai is temporarily moved to work in Denmark. It creates certain conditions for how the work can be executed in practice. Following this perspec-tive, we identified four different types of dependencies that shaped the work in the empirical case. Furthermore, we ex-perienced instances where exceptions occurred, and finally, we observed how dependencies existed as interlinked entities. Below we zoom in on each of these. For each subsection, we bring the empirical account across the geographical sites we investigated.
When we first visited the L&amp;T Infotech offices we en-countered a large, modern office building, which provided a quite different experience than the outside traffic, noise, and smells of the Mumbai city and its large highways running nearby. The building that housed the L&amp;T Infotech offices was located within a large IT park with several other large, brand-new buildings. In the seven-story building, L&amp;T In-fotech occupied two floors. Several departments, some open and some closed off by frosted glass walls, were located side-by-side. They were only accessible after passing through a front gate guarded by three security guards. In all the de-partments, signs hanging from the ceiling indicated which client they were working for.

The department we were visiting was located at the cen-tre of the floor, closed off by two access-card-operated doors. The security was quite high since DKSoft, the company they work with, develops financial software. The department hosted around 35 people, all working on projects for DKSoft. The people were divided into approximately six teams, su-pervised by two project managers and one delivery manager. The team we observed consisted of five software developers. Due to the time difference between Denmark and India (3.5 hours), the team usually met in between 10:30 and 11:00 AM to have more overlapping working hours with the Dan-ish team. The department had been decorated to match the Danish company X  X  visual identity; paper flags with the name of the company were scattered throughout the workspace, and the values and mission statement of the Danish com-pany had been printed on large posters that were placed at the entrance to the department. These statements, however, had been modified from the original company X  X  values and missions to fit with the Indian company. On the wall, a Danish and an Indian clock hung next to each other, but both had stopped working.
 Around the same time in Denmark, we also entered the DKSoft office building, located in a suburb outside of Copen-hagen together with several other IT companies. In front of the parking space of the office were three flagpoles with flags displaying DKSoft X  X  logo. The office sign showed the same logo of DKSoft as well as two smaller logos of subsidiary companies. The three-story office building seemingly hosted many employees  X  not unexpected for one of the biggest IT solution providers in the banking sector. On the way to the office landscape where the team we observed worked, turn-stiles prevented non-employees from passing. In order to en-ter, each day a temporary pass was handed to the observer at DKSoft. Additionally, any visitor had to be accompa-nied by one of the local employees while going through the turnstiles. This could not be one of the temporary onshore Indian developers.

The seven members of the project team located in Den-mark were seated at two neighbouring islands of desks with a walkway in between, separated only by low dividers. Within the same open office space, about six more of these  X  X esk islands X  were located. Two temporarily relocated Indian de-velopers were sitting on one side, while the Danish develop-ers sat together with the product owner and project manager at the other island. The product owner later explained that this setup grew organically as the Indian developers were usually there for shorter periods of time. In contrast to the offices at L&amp;T Infotech, there was no decoration revealing that part of the development team was working at L&amp;T Infotech, except for an Indian gift from one of the Indian developers who temporarily worked onshore. Some stick-ers on a small cabinet revealed which project the team was working on.

We view the locations and the structure of the locations as forms of dependencies, since each geographical site pro-duces certain conditions for how the work can be executed. For example, when the office in India is located in the heavy traffic in Mumbai, it produces particular conditions for the time it takes to move around in the city, and what time the developers can be at work in the morning and leave in the evening. Travelling in heavy traffic in a large metropolis in India is not an easy task, which means that developers ei-ther follow a schedule of company transportation or come in late and thus also stay late to accommodate the traffic. The software developer is dependent on the traffic in terms of making it to work. Turning to the Danish location, it is clear that the traffic is not an issue in the same way. The differences in travelling in traffic at the two different loca-tions thus place particular conditions not only on the people having to make the travel, but also on the collaboration as a whole, as meetings and communication have to be planned around the times at which people can be present in the office. At the Danish offices, however, the office layout creates cer-tain conditions for the work. Being temporarily collocated in the same office, it is possible for the visiting developers to engage with the DKSoft developers. However, a certain distance between the regular and the temporary developers still exists by having them dispersed across different desk islands.

Location dependencies include diverse sets of aspects such as security and office design, and our point here is that it does matter where people X  X  physical bodies are located in t erms of what makes the conditions for the global work. Working remotely does not limit the impact of where we are and how this shapes the kind of collaborative engagement we can commit to.
The team working on the project we observed was dis-persed across two locations, seven members at DKSoft in Denmark and five members at L&amp;T Infotech in India. In Denmark, the seven members took on the role of Scrum master, product owner (one primary and one assistant), team lead, test manager, and developer (one lead and one general). All were permanently located at DKSoft, except the two Indian developers who were temporarily relocated there for six months. In India, the members took on the role of user interface (UI) developer (two members), back-end developer (two members), and one tester. Although the main organizational activities were taken care of in Denmark by the Scrum master and product owner, development on the project occurred from both sites as a collaborative pro-cess. This team thus provided an excellent case to study dependencies in closely coupled work across geographical distances.

The whole team relied heavily on the knowledge about the client and the system they were developing, which was organized by the product owner in the team. The product owner represents the client stakeholder  X  in this case a large Scandinavian financial company  X  and holds regular meet-ings with this client. He is thus the close link between the development team and the client. The product owner was responsible for the product backlog, and so the development process depended greatly on his decisions.

The developers also depended on the product owner for the development process. With the product owner being the client stakeholder, he was the person in the team who knew most about these business processes. The developers at L&amp;T Infotech thus needed him for explanation of these different processes.

During the course of the project, DKSoft intended to have all developers from L&amp;T Infotech come to Denmark for a 6-month period. This was handled by having two developers at a time in Denmark. During our observations, these two developers were the lead developer and a UI developer. The motivation for this was clear; if the L&amp;T Infotech developers had been to DKSoft, they would get to know much more about the team in Denmark and how work was organized. When returning to India to work, these developers would not only have a better understanding of how people worked in Denmark, but they would also have developed more personal relationships with the Danish team  X  giving a more coherent feeling of  X  X eam spirit X  despite the fact that the team was based in two different companies.

While the relocation of the lead developer from L&amp;T In-fotech was temporary, the Scrum master told us that he preferred to keep the lead developer in Denmark as long as possible because they feared that another person could not do the job as well. When asked what they would do when he left for India again, the Scrum master answered,  X  X e might have to tie him to the table . . .  X  . With team mem-bers from both sites relying heavily on his role as boundary spanner and keeping the collaboration working, they were very dependent on his presence at the Danish site. The L&amp;T Infotech developers depended on him for their daily development work, while the Danish team relied on him as a boundary spanner between the Indian developers and the Danish team. His role in the project thus had many sides: He was the most experienced programmer from India and thus the natural contact person for questions regarding implementation, he was responsible for hand-picking team members from the Indian outsource company to work on the project, and he maintained continuous communication with the developers in the team.

People dependencies arise in the work practices where dif-ferent people have diverse sets of knowledge, both in terms of knowledge about the content, process, and the business, as well as knowledge about technologies and the system un-der construction. What is particularly interesting in this perspective is that part of what makes the global software development team function is dependent upon the practice by which team members are hand-picked across distance, and the special competences of boundary spanners to be able to solve such a task. Also interesting is that people de-pendencies are not simply one-to-one relations, but instead a multiplicity of relations across people, their roles, and work tasks. Understanding the perspective of people in terms of people dependencies thus points to interlinked practices across diverse subgroups spanning geography, roles, and re-sponsibilities.
While the two preceding sections focus on the location and people dependencies, this subsection zooms in on the collaborative dependencies of the software developers. These dependencies emerged and became observable particularly during the diverse types of meetings (collocated as well as across sites) the team engaged in.

The team we observed used Scrum as their development methodology. Scrum puts forward a number of meetings and processes that should be followed throughout a development process. We observed that some of these processes and meet-ings were followed in the collaboration and had eventually become routines. These routines also helped integrate new team members into the project. One of the developers from L&amp;T Infotech who had just worked with the team for two sprints explained it as follows:  X  X e have a daily Scrum meeting every day and we do esti-mation and we know that in the QC [software requirements management tool] looking at the tasks we know the remain-ing estimated hours and we have to finish within that time frame. So everything is written within the system, and if you follow the system, you can finish the tasks on time. X  (Inter-view, developer, India, 21/08/2013) During our observations, we observed 10 daily Scrum meet-ings, two estimation meetings for the estimation of tasks for an upcoming sprint, and the demonstration meeting to-wards the end of the sprint. These meetings were particu-larly interesting as they rendered the dependencies between the different sites quite visible.

The daily Scrum meetings were executed as short 15-minute meetings and were attended by the developers and testers from DKSoft and L&amp;T Infotech. In most cases, the product owner also took part in the meeting. In the meet-ings, each participant took turns explaining the progress of work. Following the same routine, the Danish and Indian t eam went to their respective videoconferencing rooms at the same time each day  X  9:45 AM Danish time / 1:15 PM India time. The same developers at L&amp;T Infotech always prepared the video equipment and made the call to the Danish site.
The meetings proceeded with each present meeting par-ticipant taking turns explaining what she had been working on, what she was going to work on, and mentioning any problems that she had experienced. The turn order was not defined and was settled by whoever took initiative to start. The Danish Scrum mater was responsible for deduct-ing hours from the tasks that had been worked on to reflect their new status. At one meeting, for example, an L&amp;T In-fotech developer explained that he had been working on the document handling user story and that the Scrum master could deduct 5 hours from that task. The Scrum master then reduced the number of remaining hours on that task from 7 to 2. With the screen shared to the Indian site, this process was visible for the whole team.

The Scrum meetings were usually finished within the 15 allocated minutes. In a few instances, the meetings went over time due to either starting late (as a consequence of change of meeting rooms at the Danish site) or due to dis-cussions about certain issues. In these cases, another team at the Indian site would knock on the door of the meeting room and the meeting was quickly wrapped up. However, in Denmark the room booking system did not allow booking rooms for 15 minutes, so they were always booked for 30 minutes, but only used for 15.

While the daily Scrum meetings were conducted with both the Danish and the Indian parts of the team present, the demonstration meeting at the end of the sprint was deliber-ately held with the Danish team only. During the demon-stration meeting, the developers in the Scrum team demon-strated the features they had implemented in the sprint, and the product owner would then accept or reject the feature. Such a setup, however, would require a different technologi-cal setup, as the test environment where the product being developed was running was located on a Danish internal net-work. Giving access to the Indian team for them to demon-strate what they had implemented would require a virtual private network (VPN) connection from India to Denmark. Instead, the developers at the Danish site handled demon-strating all the features, even those implemented in India. Due to the daily meetings and the lead developer keeping daily contact with the Indian team, the developers in Den-mark were quite aware of the features implemented in India and therefore capable of demonstrating them.

One particularly interesting meeting was held each after-noon. By the end of each working day in India, around 3:30 PM Danish time / 6:45 PM India time, the lead developer located in Denmark contacted the development team in In-dia over instant messaging to get feedback on their progress and resolve any issues they might have when meeting for work the next day. These meetings were not a part of the traditional Scrum methodology, however, and they resem-bled that of the daily meeting in content. The developers at L&amp;T Infotech were given the opportunity to explain their work and discuss any potential issues. One of the Indian developers explained this process as the following:  X  X e don X  X  have a Scrum board because our team lead is not sitting here. . . But then, our team lead communicates with us every now and then in the communicator. So we update the daily status before we go  X  that we have done this, we have done that  X  even before the daily Scrum meeting. X  (In-terview, developer, India, 21/08/2013) These meetings were routinely handled and had thus become a natural part of the development process. These procedures had all become routines, and they helped the Danish team gain awareness of the work in India and made sure that the people at L&amp;T Infotech did not have unresolved questions before they went home.

Collaborative dependencies arise in the everyday work when different people are interdependent in the actual work. These dependencies become particularly visible during meet-ings where distributed actors are brought together. How-ever, they also arise in the arrangement and structure of the work  X  in this case the iterations of the project in sprints.
We have now discussed the work environment, the team, the task, and the collaborative activities. However, an im-portant part of the closely coupled work also concerns the diverse set of artifacts that the participants use in making their collaboration work. Interestingly, the absence of par-ticular artifacts also places certain constraints on the de-velopers. We will look into how the participants managed to organize their work in particular ways to accommodate limitations of technology.

The team relied heavily on the technical infrastructure for their work. Most common software engineering tools were used to develop the product: integrated development envi-ronments for coding, source control management for man-aging code, and test environments for testing. For project management, an integrated task-tracking tool was used. SAP was used for noting working hours and the team communi-cated using email, telephone, instant messaging, and video-conferencing.

In order to let daily Scrum meetings take place in a global context, dedicated videoconferencing rooms were used, equip-ped so that setting up bidirectional communication was as effortless as possible. The conference rooms used on both sides had a meeting table with a central microphone and surrounding chairs. Mounted to the wall were two screens, one to display the video feed of the team on the other side, as well as a smaller video feed of themselves, and another to display a shared screen. The Scrum master was the only one to bring along a laptop, as it was his screen that was shared with the Indian team.

Besides the video conferencing equipment, the Applica-tion Lifecycle Management (ALM) tool by HP usually open on the Scrum master X  X  laptop was the central artifact used during global Scrum meetings. It was used to provide an overview of and to update the state of user stories, for ex-ample, to reduce the amount of expected hours to work on certain tasks. In order to see the screen shared by the Scrum master in India, one of the Indian developers had to log into the VPN prior to the meeting to set up the screen sharing. Only the Scrum master made changes to the ALM visible on the shared screen as the other developers updated the team on their progress.

The back-end developers used business process modeling notation (BPMN)  X  a modeling notation used for specify-ing business processes  X  to develop the core infrastructure of the product. On an artifact level, the project used BPMN to m odel their back-end. BPMN is used to model business pro-cesses using a graph-like notation. The back-end developers in India modelled the business workflows of the application as graphs, and these graphs, in turn, were used to generate code for the back end.

Arguably, any modelling or programming language is a form of standardization, as it equips programmers with a structured way to construct software and a common way to talk about such implementations. However, we argue, that BPMN adds to this standardization. With the abstraction towards actual business processes that BPMN adds, we ob-served how it equipped the back-end developers with a lan-guage that could be used to talk with the domain knowledge experts. We thus claim that the use of BPMN provided a form of standardization highly suitable for the development of such business-logical applications.

The project followed an agile approach in which the de-velopment process was split into four-week iterations dur-ing which a fixed workload of features were selected for implementation. Within Scrum these iterations are called  X  X prints. X  The sprint we observed lasted 4 weeks and com-prised 10 user stories describing certain features that needed to be implemented. Examples of user stories from the project include integrating scanning documents into the business process, providing download links to digital contracts, and implementing  X  X ast track X  processes for certain merchants. Depending on the assessed complexity of the user stories, more or less can be taken up into a sprint. The success of a sprint depends on the developers actually finishing them.
Artifactual dependencies concern situations where tech-nology is involved, such as videoconferencing, task-tracking software, communication software, and networks. The divi-sion of work into user stories also constitutes an artifactual dependency as these were the objects dictating work in the team.
The four previous sections concerning sets of location de-pendencies, people dependencies, collaborative dependen-cies, and artifact dependencies all describe situations where work goes as expected. However, there are several situations where exceptions occur, and it is critical to investigate what happens in these situations in terms of dependencies and how these are organized.

Despite the routine manner in which the daily Scrum meetings were executed, we observed different situations were exceptions occurred. The room for the daily meeting was booked for the Indian team for use from 1:15 PM to 1:30 PM each day. The Danes switched rooms according to avail-ability. They used a room booking system to book rooms; however, in several instances, problems with this booking caused a delay in the daily meeting as the Danes had to find an available room. In addition, sometimes some of the Danes showed up on time for the meeting while others were late, as they did not check themselves beforehand which room had been booked for the meeting. Whether people showed up late or not, the meeting always started once the videoconferencing was set up. We observed this on several occasions where the Indian team was on time, as was the Danish Scrum master at the other end, but the rest of the Danish team was still missing. The meeting would be initi-ated and the rest of the Danish team would show up after a few minutes.

The technology used to facilitate the daily meetings also caused exceptions. Take the following observation, for ex-ample, from the preparation of a daily Scrum meeting where a virtual desktop connection needed to be made from a com-puter in the Indian videoconferencing room to a Danish com-puter.  X  X 1 is sick today, so U2 heads for the meeting room to start the video equipment and the projector. He X  X  clearly not as experienced doing that so it is taking longer than when U1 is doing it. He also doesn X  X  have a login to the VPC so he has B1 establish a virtual private network (VPN) connection after which B2 logs in with her account on the VPC. X  (Ob-servation notes, India, 20/08/2013) Usually, the same developer from L&amp;T Infotech (U1) would prepare the videoconferencing equipment and make the call to the Danish site. When he was on holiday one day, another person (U2) had to perform this work. Setting up the video and the shared workspace took significantly longer and also forced the person to seek help with login to a virtual PC.
Interestingly, company rules and regulation regarding con-nectivity and firewalls created particular technical constraints for the development team, forcing them to organize their work in particular ways. As the testing environment was located in Denmark  X  and the team at L&amp;T Infotech did not have access to this environment over the network  X  they were forced to run a similar setup on their own computers. This setup consisted of a virtual machine running Linux and the web-server software that the product was developed for. The setup was so heavy on computer power that the team  X  for this project  X  had been given new, powerful computers, as opposed to other teams in the company working on other projects. Despite this investment, the developers at L&amp;T Infotech had to reboot this test setup on a daily basis. This process took between 10 and 15 minutes and caused work to halt for that duration. The developers would usually go for a coffee if this happened.

Another example of exception handling became clear when the Scrum master explained the team X  X  testing procedure. Interestingly, the testing and fixing of bugs in the product was done one sprint behind. The Scrum master explained it as follows:  X  X eah, of course optimally we would like to have everything well tested before the end of the sprint so that at least very few defects are found in the next sprint. But we haven X  X  re-ally, that X  X  our goal, but we haven X  X  really succeeded because the implementation just is rarely finished before very close before the end of the sprint. So then there is not enough time to test. X  (Interview, Scrum master, Denmark, 23/08/2013) Despite their intention to deliver a working and well-tested version of the product after each sprint, as the implemen-tation was not finished until the very end of the sprint, the testing was left for the next sprint. This process caused some problems, as errors that emerged were to be resolved quickly because the product of the sprint, when it was introduced, had already been marked as done. In one specific case, the two developers at L&amp;T Infotech stayed until midnight to fix an error that was introduced in a previous sprint.
W e have now presented four sets of dependencies that cre-ated certain conditions for how the global software develop-ment collaboration was executed and organized. In addition, we looked into the practices by which the developers han-dled exceptions and unforeseen challenges. The four sets of dependencies were location dependencies, people depen-dencies, collaborative dependencies, and artifactual depen-dencies. While this overall categorization of dependencies helps us understand what organizational dependencies in global software development comprise, one important em-pirical observation remains, namely the interlinked nature of dependencies.

Analyzing our data iteratively, and creating diverse sets of rich descriptions, we realized that even though we were able to label specific dependencies, several categorizations could be applied to a dependency. Therefore, we decided to think in terms of  X  X ets of dependencies X  rather than depen-dencies as singular causal relations. Furthermore, we saw how one set of dependencies (e.g. people dependencies) was tightly linked to others (e.g. collaborative dependencies). This leads us to suggest that dependencies in global soft-ware development have an interlinked structure, where it is not easy to pick apart and set boundaries for what is part of and what is outside of the particular dependency, for ex-ample, what is technical and what is social. We might, for example, talk about the development process of a particu-lar artifact, such as a user story, and how it has multiple dependencies embedded in the very task: coupling the IT system under development, the technical architecture, the work across developers, and other user stories. But at the same time each user story also has close connections with other artifacts  X  for example, the range of documents that makes the development project, such as requirement specifi-cation or test documents [8]. To handle all these dependen-cies, a range of tools such as development environments, test setups, and communication tools are being included in the collaborative activities. However, what is more surprising is how participants X  hardware and technical infrastructure, which is related to the developer X  X  location dependencies as well as the artifactual dependencies, place particular condi-tions for how the participants can manage and handle their work, for example, as we saw in the need for powerful com-puters and the technical setup for demonstration meetings, which placed the participants in a situation where devel-opers located in India could not fully participate. How the technical infrastructure and the hardware devices impact the conditions for collaboration in this particular case was due to the location dependencies in the diverse structure across the different geographical sites. The technical infrastruc-ture locally thus created particular conditions for how the participants could manage to handle and organize their work according to the set of location and artifactual dependencies they need to accommodate.

Similarly, we may find that one particular set of depen-dencies gives rise other sets of dependencies. As such, the structure across the sets of dependencies resembles that of the documentscape [8]. The documentscape refers to the dy-namic interlinked ensemble of project documents in global software development practices between developers located in various locations. It stipulates that while we might zoom in on one single document, the meaning of the document is embedded within the location of the document within the Category Features
Location De-p endencies
People De-p endencies Collaborative D ependencies Artifactual D ependencies d ocumentscape. We may also look at a single dependency; however, its meaning is embedded within the network of de-pendencies across all sets of dependencies. While we may look at a dependency and label it according to different sets of dependencies, each dependency plays a role in a larger set of interlinked dependencies where the boundaries are not easily defined.

Despite the interlinked nature of dependencies, we may still talk in terms of sets of dependencies. As our analyti-cal cut-downs in the data material demonstrate, we found four important sets of dependencies: location dependencies, people dependencies, collaborative dependencies, and arti-factual dependencies. Location dependencies entail the mul-tiplicity of dependencies that are related to the geographical site of the software developers. This includes the external so-ciety within which the location is placed, as well as the inner office environment design and the conditions this creates for the collaboration. People dependencies entail the roles, re-sponsibility, and specific knowledge the collaborative actors have and use in the work together. This includes knowl-edge about competences, knowledge about technologies, as well as knowledge about the business in which the system is being created. Collaborative dependencies in particular become observable in situations where multiple people en-gage in a common practice  X  in most cases in meetings, but also outside of meetings. The meetings can take many dif-ferent forms and shapes and be organized differently. Some meetings involve participants from both locations (e.g. daily stand-up meetings), while others are location specific (e.g. demonstration meeting). Artifactual dependencies are per-tinent at all times, since technology is what makes it possi-ble for the dispersed developers to collaborate and interact with the same coding environment, which serves as the main technical infrastructure supporting the work. However, as we have also shown, the artifactual dependencies also com-prise other important artifacts such as the user stories, the BPMN notation, the VPN connection, and the video equip-ment, which all took part in linking and organizing the work and connections between the developers. It is important to notice that in practice these sets of dependencies are not singular entities, but instead function as multiplicities that connect and interrelate across all types of dependencies. Ta-ble 1 summarizes the four sets of dependencies and their characteristics.
Having conceptualized the four main categories of depen-dencies that emerged in our data, the next question concerns how the developers managed to collaborate despite the di-verse set of dependencies and how these each brought about a n increasingly complex work arrangement. Looking across the categories of dependencies, we found a repeating pattern in the work regarding the participants X  ability to continu-ously create and apply standardization as a mechanism to reduce complexity. There were standardizations in terms of meeting structure and time for conducting meetings. There were standardizations in terms of the team at L&amp;T Infotech arriving late in the morning to accommodate the time dif-ference between the sites. There were standardizations in terms of people X  X  roles and knowledge, and to some extent there were standardizations in terms of artifacts such as user stories or the use of the BPMN notation form.

What is interesting about how the strategy of standard-ization was applied by the practitioners in the empirical case was that it did not arrive as a top-down forced structure on the work. Instead, it emerged over time as the practition-ers made the methodology of Scrum into a practice fitting their work. It was not that the developers did not follow the methodology; our point here is that they had aligned the methodology with their practices in the global work. In this way, the standardization of when, where, and how to meet supported the developers in organizing their work, taking into account the different sets of dependencies, but at the same time the standardization had a transformative effect on the practice [13], as it was dynamically developed. Engaging with the standardized process of Scrum was not a process by which the developers simply followed Scrum in a scripted manner. Instead, they adjusted and recreated the process, making it fit their practices while still taking into account the conditions for collaboration created by the location and artifactual dependencies. So when the Indian developers could not participate in the demonstration meet-ing due to the lack of a standardized technical setup across sites  X  the artifactual dependencies not letting them partic-ipate  X  they adjusted the work accordingly and found other ways to demonstrate the requirements developed at L&amp;T Infotech. In this way, the standardization was a transforma-tive practice where processes and technologies were being accommodated, and thus standardization was incomplete initially. What is also fascinating with this example is that while we expected that standardization across the technical platforms would be easy to create (e.g. having access to the same tools and applications etc.), this turned out to be the most challenging area, where local artifactual dependencies place certain constraining conditions on the collaboration.
We observed how the daily meetings were executed in a routine manner, giving rise to frequent interaction across sites. However, whereas the team at L&amp;T Infotech always had the same meeting room booked for their meetings, the team at DKSoft had a different meeting room with video-conferencing equipment booked on a day-to-day basis. This caused several situations where people from DKSoft arrived a bit late since they first arrived at the wrong meeting room prior to finding out the designated meeting room for that day  X  in other words, the complexities of relation work in-creased [2, 9]. This lack of standardization in terms of rooms for daily meetings thus created extra challenges  X  not only for the developers at the Danish location, but also for the developers at the location in Mumbai, since they had to wait for the videoconferencing to be started from the remote lo-cation. In contrast, the room in Mumbai never changed, and as such the location dependencies did create different types of conditions for the work, both locally and in the distributed situation. However, not only did the location constraints affect the daily meetings, we also observed an exception-handling situation where the developer who was normally in charge of setting up the VPN connection was not present. Here it turned out that the developer who wanted to set up the equipment instead did not have a VPN login, and extra work was required to locate a person with a VPN login before the daily meeting could take place. The com-plexities of managing the dependencies  X  in this case the amount of relation work needed to establish a connection between the two sites  X  increased.

What also becomes obvious in the example above is the role of routine [14]. For each activity the developers engage in, both locally and in between the two sites, the more fre-quent the activity, the more aligned and transformed their common practice becomes. Routine is the practice by which the developers turn standardization strategies into concrete activities that support their practice. It is through the en-actment of routine behavior in daily interaction that the developers are able to reduce the effort required for articula-tion work and to spend more time on the actual project they are developing. We observed routines as repeating patterns of coordination employed to handle the complexities of the diverse set of dependencies. Routines, as opposed to strate-gies, exist only through the actual enactment and the dif-ferent activities [14]. Referring to the concepts of plans and situated actions [34], standardization constitutes the plan whereas the routine is embedded within the situated action. In our case it was clear that the routinized behaviors were mostly connected to the various types of meeting activities in the distributed team, as in the example where the devel-opers explain why they have an additional meeting at the Danish location to ensure that the team at the Indian site is kept up to date. They explained how this meeting was a replacement of the Scrum board, and how this practice supported their work.

Other artifactual dependencies gave rise to exception han-dling. The lack of standardization regarding access to the test network required the developers at L&amp;T Infotech to be equipped with much more powerful computers than the rest of the employees. The restrictions caused by firewalls and the generally slow bandwidth out from India forced the de-velopers to have a local version of the testing environment running, which was only possible on these more powerful computers. While it was not possible to standardize the technical connectivity across the geographical sites due to firewall, bandwidth, and privacy issues, the developers cre-ated other routine behaviors in terms of testing practice, making it possible for them to collaborate despite the tech-nical constraints.

Standardization and routine did not solve all issues of de-pendencies. Our data clearly demonstrated that a repeating pattern across sprints was the testing that was pushed back to the next sprint, often causing the developers at L&amp;T In-fotech to work overtime. Here it is important to notice that working late at the Mumbai location means evening and late evening, and since this occurred quite often it clearly im-pacted the work at L&amp;T Infotech. The reason for the delay was that the developers were implementing source code until the very last minute, not leaving time for the testers to reach their goal within the pre-allocated time of the sprint. The developers depend on the tester to report defects. However, the tester cannot begin until the developers have delivered t he source code. The product owner in the end depends on the developers to fix the defects detected by the tester. All of this is organized through the bug report artifact. This made the activity of testing a closely coupled activity re-quiring closely coupled coordination. No routine or stan-dardization was able to solve this activity, which meant that major defects in the software sometimes occurred in subse-quent sprints, forcing the team to work even later, solving tasks from the last sprint while neglecting their tasks for the current sprint.

In summary, in many cases the practitioners applied stan-dardization as a strategy to handle the complexity evolving from heterogeneous locations, people, and artifacts, and in most cases it worked well. However, there were also situa-tions where standardization did not work  X  and surprisingly this was largely in the technical infrastructure and hardware across the sites. This lack of standardization did increase the complexity of including participants equally in, for exam-ple, the demonstration meeting, and also in terms of having enough machine power to execute the work. It was clear that standardization made it possible for the participants to reduce their effort required to organize their collaboration, making it possible to focus on the task ahead. However, at the same time the extra standardization also required work  X  articulation work  X  and as such the standardization strategy was not X  X ree X . Standardization is a known strategy to handle coordination [16]; however, what was interesting in our study was how the standardization process made it possible for the participants to handle and deal with many complexities that emerged from the diverse set of dependen-cies. On the other hand, issues of solving the closely coupled task of testing remained. Similar to how specific artifacts re-duce the complexities of articulation work [29], knowing the standardization practices in a routine manner made it possi-ble for the participants to reduce time spent on articulation work and instead made them focus on the content of the development project.
In the very definition of collaboration exists the notion of dependencies in work. However, dependencies as perti-nent in collaborative work might take different forms and shapes. In this paper, we reported on an ethnographic study of global software work executed across two sites  X  Denmark and India  X  zooming in on what makes the perti-nent dependencies in such work. We observed how various types of dependencies constitutive of the collaborative prac-tice across the developers included location dependencies, people dependencies, collaborative dependencies, and arti-factual dependencies. In addition, we saw how the strategies of standardization form a repetitive pattern in how the de-pendencies were managed across sites, and in particular how routine in the work was crucial for making the collaboration function. Based on our observations, this paper puts for-ward three main contributions: (i) Global software develop-ment is based on a multiplicity of dependencies that fall into four broad categories: location, people, collaboration, and artifactual. Using these categories, we can start to exam-ine more carefully how dependencies constitute global work, and in particular point to situations where dependencies are challenging for the collaboration. (ii) Dependencies in global software development are not singular entities, but in-stead exist as one multiplicity of interlinked practices, which makes it difficult to clearly define and distinguish the bor-ders between the dependencies. (iii) Standardization and routine can be used as specific coordination mechanisms to handle dependencies, thus reducing the complexity of the as-sociated articulation work. However, surprisingly, our data suggest that it is more difficult to standardize the artifactual dependencies (e.g. hardware and software practices) across geographical sites, compared to standardizing the organiza-tional practices such as user stories, roles and responsibility, or daily meetings. This research was conducted in collaboration with L&amp;T Infotech, both in terms of funding as well as in terms of ac-cess to the empirical sites. In particular, we would like to mention the efforts and work of Sarbajit Deb (Vice Presi-dent, L&amp;T Infotech, the Nordic Region) and Muthurama-lingam P. (Deputy Head, Banking &amp; Financial Services, L&amp;T Infotech, Denmark) in making this research possible. Without such strong connections between industry and acade-mia, we would never have been able to conduct such ethno-graphic research.
 Furthermore, we would like to thank the employees at DKSoft for welcoming us into their company, working with us, and allowing us to follow them during their work. Lastly, we thank Steven Jeuris for his participation and help in the study.
 This research has been funded by the Danish Agency for Science, Technology and Innovation under the project  X  X ext Generation Technology for Global Software Development X , #10-092313.
 [1] P. Bj X rn and E. Balka. Health care categories have [2] P. Bj X rn and L. R. Christensen. Relation work: [3] A. Boden, G. Avram, L. Bannon, and V. Wulf.
 [4] A. Boden, B. Nett, and V. Wulf. Articulation work in [5] A. Boden, F. Rosswog, G. Stevens, and V. Wulf. [6] G. C. Bowker and S. L. Star. Sorting things out : [7] M. Cataldo, M. Bass, J. Herbsleb, and L. Bass. On [8] L. R. Christensen and P. Bj X rn. Documentscape: [9] L. R. Christensen, R. E. Jensen, and P. Bj X rn. [10] C. de Souza and D. Redmiles. The awareness network, [11] C. R. de Souza, S. Quirk, E. Trainer, and D. F. [12] K. M. Eisenhardt. Building theories from case study [13] G. Ellingsen, E. Monteiro, and G. Munkvold.
 [14] M. S. Feldman and W. J. Orlikowski. Theorizing [15] M. S. Feldman and A. Rafaeli. Organizational [16] E. Gerson. Reach, bracket, and the limits of [17] B. G. Glaser and A. L. Strauss. The Discovery of [18] R. Grinter. Recomposition: Coordinating a web of [19] J. D. Herbsleb, A. Mockus, T. A. Finholt, and R. E. [20] M. Hertzum and J. Pries-Heje. Is Minimizing [21] N. Holten M X ller and P. Dourish. Coordination by [22] R. E. Jensen and P. Bj X rn. Divergence and [23] P. Luff and e. al. Workplace Studies: Recovering Work [24] T. W. Malone and K. Crowston. The interdisciplinary [25] S. Matthiessen, P. Bj X rn, and L. M. Petersen. [26] T. Meum, E. Monteiro, and G. Ellingsen. The [27] R. Prikladnicki, A. Boden, G. Avram, C. Souza, and [28] K. Schmidt and L. Bannon. Taking cscw seriously. [29] K. Schmidt and C. Simone. Coordination mechanisms: [30] K. Schwaber and J. Sutherland. The scrum guide: The [31] A.-M. S X derberg, S. Krishna, and P. Bj X rn. Global [32] A. Strauss. The articulation of project work: An [33] L. Suchman. Do categories have politics? the [34] L. A. Suchman. Plans and Situated Actions: The [35] G. Walsham. Icts and global working in a non-flat
