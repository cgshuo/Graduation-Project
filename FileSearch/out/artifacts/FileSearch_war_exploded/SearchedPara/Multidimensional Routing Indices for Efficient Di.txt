 Traditional routing indices in peer-to-peer (P2P) networks are mainly designed for document retrieval applications and maintain aggregated one-dimensional values representing the number of documents that can be obtained in a certain direc-tion in the network. In this paper, we introduce the concept of multidimensional routing indices (MRIs), which are suit-able for handling multidimensional data represented by min-imum bounding regions (MBRs). Depending on data distri-bution on peers, the aggregation of the MBRs may lead to MRIs that exhibit extremely poor performance, which ren-ders them ineffective. Thus, focusing on a hybrid unstruc-tured P2P network, we analyze the parameters for building MRIs of high selectivity. We present techniques that boost the query routing performance by detecting similar peers and grouping and reassigning these peers to other parts of the hybrid network in a distributed and scalable way. We demonstrate the advantages of our approach using large-scale simulations.
 H.2.4 [ Database Management ]: Systems X  Query process-ing Algorithms, Experimentation, Performance Multidimensional routing indices, P2P query processing
One of the most prominent applications areas of peer-to-peer (P2P) systems is content sharing and distribution. Nowadays, most of the existing systems for content distri-bution are P2P file-sharing networks (eMule, KaZaA) that rely on a super-peer architecture [13]. Super-peer systems are emerging as a powerful model for organizing and search-ing huge amounts of data, made available by independent and distributed sources. Even though there are several im-portant applications, such as distributed image search and query processing over distributed collaborative scientific databases, which would benefit from a super-peer architec-ture, this has not been exploited yet. For example, con-sider scientists (peers) that collect massive datasets of as-tronomical observations or biological data and upload their descriptions to dedicated servers (super-peers), in order to share it with other scientists. Unlike plain file-sharing plat-forms, these applications handle multidimensional data and require advanced query types, such as nearest neighbor or range queries, in order to provide the desired functionality.
In super-peer networks, queries are typically routed first in the super-peer backbone and afterwards, if necessary, they are distributed to the peers. Routing indices [1] have been proposed for improving the performance of search in un-structured P2P networks. Traditional routing indices in P2P systems are mainly designed for document retrieval applica-tions and maintain aggregated one-dimensional values, rep-resenting the number of documents that can be obtained in a certain direction in the network. The challenge that needs to be addressed is supporting advanced query types for ap-plications that handle multidimensional data. Moreover, in many potential applications, it is necessary to retrieve the exact and complete result set, in contrast to typical rout-ing indices for document retrieval, where retrieving only a fraction of the relevant data is sufficient.

Multidimensional indexing techniques have been exten-sively studied in centralized settings [5] for query operators like nearest neighbor, range and top-k queries. Recently, there is a trend towards supporting advanced query pro-cessing in P2P networks as well [3, 8, 12], using multidi-mensional summary information for directing queries in the network in a deliberate way. Similar to centralized multi-dimensional indices, data stored on peers is described by representative (multidimensional) data descriptors, realized as minimum bounding regions (MBRs). These can be, for example, hyper-rectangles that enclose all data points on a peer, however other types of MBRs, such as spherical MBRs, can be supported.

Multidimensional routing indices (MRIs) are composed by different local multidimensional indices stored at each super-peer. We can note the distinct difference between a MRI and a distributed multidimensional index [4]. In the latter case, the nodes of a single index are themselves distributed on different servers. In contrast , the data objects stored by the MRIs on a super-peer are MBRs that summarize the data available through each neighboring super-peer. The sim-plestformofaMRIatasuper-peer,isalistofMBRsfor each neighboring super-peer. Each super-peer maintains its own MRI and utilizes it in order to efficiently route a query through the super-peer network. The MRIs are constructed in a distributed manner. A neighbor is informed about a super-peer X  X  content by receiving a set of MBRs, represent-ing the data that can be retrieved if a query is forwarded in that direction. This information is then aggregated with its own MBRs and forwarded to the rest of the super-peer network.

An important factor that influences the performance of multidimensional routing indices is the underlying data dis-tribution to peers (and super-peers). Although data on peers is usually clustered into a few thematic areas that reflect the user X  X  interests, when peers join the network by connecting to a randomly chosen super-peer, the super-peers end-up in-dexing MBRs spread all over the data space. This leads to what we call near-uniform data distribution at super-peer level, which degrades query processing performance, since a query may  X  in worst case  X  have to contact all super-peers. It is therefore necessary to change the data uniformity at the super-peer level, by detecting and reassigning peers with similar content to the same super-peer, thus generating an overlay network that reflects a clustered data distribu-tion at super-peer level. Then, MRIs of better quality are constructed and queries can be directed to specific super-peers only, thus improving query processing performance. An equally important parameter that affects query process-ing is having neighboring super-peers maintain similar data. Again, this should occur in a self-organizing way, without explicit intervention from the P2P system designer.
The main topic of this paper is how to generate efficient multidimensional routing indices for query processing in P2P systems. Focusing on a super-peer network, we outline tech-niques for the identification of peers with similar content and reassignment to the same super-peer. Our approach is self-organizing, in that there is no prior assignment of space partitions or data to each super-peer, but we aim to dynamically capture the data distribution and reassign peer MBRs to different super-peers. This reassignment takes into account the super-peer topology, so that neighboring super-peers index peers with similar content. We propose a dis-tributed and scalable approach that boosts the query rout-ing performance since the multidimensional routing indices built on the new clustered network topology have a higher selectivity and fewer super-peers are contacted during query processing.
Routing indices [1] have been originally proposed in the context of unstructured P2P systems, as a search-enabling technique that provides a direction to routing, instead of blind forwarding. Hose et al. use distributed data summaries as routing indices [8]. They propose a tree-based structure, named QTree, for summarizing data and discuss require-ments that need to be fulfilled by such routing structures. P2P data summaries have also been proposed in [7]. SIM-PEER [3] is a state-of-the-art approach for exact query pro-cessing over multidimensional data distributed in a super-peer network. Sharing similar goals to this paper, such as exactness of retrieval, SIMPEER relies on the construction of routing indices to process similarity search queries.
Content addressable network (CAN) [10] was the first ap-proach for P2P multidimensional indexing. Space partition-ing, based on distributed tree structures, has been also con-sidered. In [6], the authors identify two primary components for multidimensional query processing, namely partitioning and routing. They propose an adaptation of the kd-tree for partitioning and use of skip pointers for routing. VBI-Tree [9] is a framework for multidimensional indexing in P2P networks. Peers are organized in a balanced tree structure based on the data partitions assigned to them.
In the following we assume a super-peer network [3, 13], that consists of N sp super-peers, each connected to a lim-itedsetofatmost DEG sp other super-peers. Super-peer networks consist of many simple peers and few enhanced super-peers, in terms of processing power, storage capacity or network connectivity. Each super-peer SP i is responsible for DEG p simple peers, which connect to SP i directly. The initial assignment of peers to super-peers is random with respect to peers X  contents [3, 13]. Each peer P i holds n d -dimensional points, denoted as a set O i (1  X  i  X  N p ). As-suming horizontal data distribution to the N p peers, the size of the complete set of points is n = O is the union of all peers X  datasets O i ( O =  X  O i ). Each peer maintains its own data objects, while the d -dimensional points are features extracted from the objects. In Figure 1 (left) we depict for example the two-dimensional data stored by peers P A and P B , which are connected to super-peer SP
We are interested in supporting exact query processing on top of the super-peer network, which means that we would like to process a query in a distributed manner, but the answer set should be the same as if the query had been ex-ecuted on the dataset O in a centralized setting. In the rest of the paper, we describe how range queries are processed, merely as a showcase example, although other query types can be supported as well.
 Range query R ( q, r ) : Given a query object q and a radius r ,apoint p  X  O belongs to the result set of the range query if dist ( q, p )  X  r .

Efficient query processing over high-dimensional data, dis-tributed in a super-peer network, is accomplished using mul-tidimensional routing indices at super-peer level. Local in-dexing of peer MBRs at a super-peer is performed in the following way. Assume that each peer X  X  P i data is described by a list of k i MBRs, which enclose all data objects on peer P . Each super-peer gathers the MBRs of its DEG p as-sociated peers and stores them locally using any available centralized multidimensional indexing data structure, such as an R-Tree. In addition, each super-peer creates a list of aggregated MBRs 1 , based on the collected MBRs of its peers.

The aggregated MBRs are exchanged between the super-peers and used for constructing multidimensional routing in-dices . The routing index MRI at super-peer SP i is a set of DEG sp entries MRI = { S 1 ,..., S DEG sp } ,oneforeach neighboring super-peer. Each entry S j consists of k j MBRs and is associated with a super-peer SP j that is a neighbor of Any technique proposed in centralized settings for creating MBRs that enclose multidimensional data may be used. Figure 1: Super-peer network and MRI at SP E .
 SP i . Any peer MBR that is accessible through super-peer SP j is enclosed by an MBR of entry S j . Efficient storage and querying of the entries S j of an MRI can again be per-formed using an R-Tree. As an example, consider Figure 1 (right), where the MRI stored at SP E is depicted, assuming that k j =1.

At query time, each super-peer is able to decide if a neigh-boring super-peer can contribute to the final result set, by using its multidimensional routing index. Consider again the example depicted in Figure 1 (right). Assume a range query R ( q, r ) initiated at a super-peer SP E , also called the query-ing super-peer. SP E decides which neighbor to forward the query to, based on the MBRs stored in its multidimensional routing index. The query is forwarded to all neighbors, for which at least one MBR overlaps with the query. This con-stitutes the query routing mechanism.

Furthermore, by storing its peers X  MBRs, SP E is able to determine during query processing at least those peers that contribute to the query result set. Thus, SP E processes the query based on its peers MBRs and this process is called local query processing at SP E . SP E contacts only peers responsible for MBRs that overlap with the query. These peers process the query based on their local data, and return their results to SP E .

In our running example, after examining the MBRs of its neighbors, SP E decides to forward the query to its neighbors SP C and SP D , while SP F is not contacted, since its MBRs do not overlap with the query. Notice, that SP C neither processes the query locally nor forwards it to another super-peer, because neither SP C nor SP A can contribute to the query. Actually, SP C is contacted because of the enlarge-ment of the MBR, due to the MBRs aggregation process. On the other hand, SP D will both process the query locally and forward the query to SP B .

This simple example demonstrates how the aggregation of dissimilar MBRs affects the quality of MRIs. Therefore, ef-fective algorithms are required that reassign peers to super-peers, in such a way that similar MBRs are aggregated, thus leading to construction of qualitative MRIs. Towards this goal, we introduce two techniques for peer reassignment, which are applied prior to the actual construction of MRIs. 1. Changing the data distribution. The first chal-2. Mapping of MBRs to super-peers. After the
As soon as the peer reassignment is completed, the hierar-chy is not maintained anymore, and MRIs are constructed at super-peer level, using the exact same construction method as in the case that no peers are reassigned.
In this section we study the efficiency of the proposed ap-proach using a simulator prototype implemented in Java. In our experiments, we used the GT-ITM topology generator 2 to create well-connected random graphs of N sp super-peers with average connectivity DEG sp =4. In order to evaluate the scalability of our approach we experimented with syn-thetic clustered data collections. For the clustered dataset generation, we randomly pick N sp d -dimensional points and each peer obtains k distinct centroids from them at ran-dom. Obviously, two peers may share the same centroid. Thereafter, the peers X  objects are generated inside a radius R from one of the centroids, selected in a way, such that the total volume of the data capture 10% of the data space. We
Available at: http://www.cc.gatech.edu/projects/gtitm/
