 &amp; 2012 Elsevier Ltd. All rights reserved. 1. Introduction
Variety and consistency are two keys that foster the realism in individual-centered simulations ( Maim et al., 2009 ; Wright et al., 2002 ). Indeed, repetitive or inconsistent behaviors highly disturb users X  immersion. In this work, we propose a solution that enables to improve the agents X  behavioral realism during multi-agent simulations. For this purpose, we adopt an approach that explicitly takes into account the variety and consistency of the behaviors.

In this paper, we propose a behavioral differentiation model, which provides the basis for a generic and non-intrusive tool, allowing an out-of-the-agent design. It describes the agents X  behavior using behavioral patterns, which describe standards of behaviors, external to the simulation model, that are used to create agents of specific categories. At runtime, the behaviors conformity is checked using the specifications provided by the patterns. The agents are created using a specific process that allows to introduce behavioral irregularities. This process is traffic realism, our experimentations show how the proposed tool increases the variety and representativeness of the behaviors.
This paper is organized as follows. In Section 2 , we present related works. Sections 3 and 4 present the grounds for this work, and an overview of the proposed approach. We then describe our model: the data model ( Section 5 ), the generation method and algorithms ( Section 7 ), and the inference techniques used to automate the simulation configuration ( Section 8 ). Section 9 shows how the model addresses our issue: increasing variety in simula-tion, while insuring the behaviors consistency. Section 10 presents the application of the model to traffic simulation in driving simulators, and how it improves the realism in an industrial application. Section 11 introduces another example, to illustrate the genericity of the approach. Finally, the model is discussed in
Section 12 , and future works are presented in Section 13 . 2. Related works
Our work focuses on how we can articulate both behavioral variety and consistency in simulations. These two notions are considered as central issues in various works.

For instance, in crowd simulations, the realism is crucial to improve the users X  immersion during the simulation, and to improve the agents X  looks. Techniques increasing this diversity have thus been developed: for instance, Maim et al. (2009) automatically change virtual humans X  appearan ce by using diverse colors, acces-sories and shape parameters. Variety in the simulation is increased, which improves users X  immersion. However, this approach is based on hard coded parameters in the gr aphics models, which limits its genericity and flexibility.

In videogames, more and more attention is focused on the improvement of the gameplay. Moreover, in that domain, the non-player agents X  behaviors are often implemented as scripts, defined by long and complex list of rules ( Tozour, 2002 ). However, such scripts can contain weaknesses that decrease the player X  X  immersion in the virtual environment. Focusing in particular on the variety and consistency of the behaviors, Spronk et al. (2006) have proposed to dynamically improve agents X  behaviors using online learning. The agents X  behaviors being defined by sets of rules associated to activation weights, those weights are then dynami-cally adapted during the game to improve the behaviors. However, during the agent X  X  creation, these weights are randomly selected:
It could therefore benefit from an automated mechanism introdu-cing behavioral profiles at this level.

In the computer graphics and virtual reality field, various approaches focus on easing the configuration of the virtual envir-onments. For instance, Ulicny et al. (2004) have proposed dedicated the designer can paint new pedestrians in a simulation, or visual and behavioral characteristics on existing ones. This approach enables to easily create agents and to increase the behavioral variety, but remains focused on the graphical part of the simulation.
In other works, predefined behavioral patterns are proposed to the has to adapt the pattern parameters to the values he desires.
However, this approach does not take into account the possibility to automate the construction of whole populations.

Finally, in driving simulation, Wright et al. (2002) created virtual drivers X  characters to reinforce the users X  immersion during the simulation. The model combines the drivers X  speed choices with behavioral parameters (sex, age, aggressiveness, alcoholic intoxica-tion and fatigue). When implemented in a driving simulator, the model improves the realism as perceived by the users. However, mode. The other one allows to finely configure the properties of the creation process.

To guaranty non-intrusiveness, we proposed a model that can use only external parameters of the simulation, provided for instance through an API, and run in a specific process outside the simulation software.

These objectives  X  increase the realism for the final user while considering the designer crucial role  X  and constraints  X  guaranty non-regression and provide a non-intrusive model  X  drove the design of the proposed model. 4. Overview of the approach
To address these needs, we propose a formalization of the construction of populations for multi-agent simulations. 4.1. Presentation of the approach
This formalization is structured around the notion of beha-vioral pattern , which describes both a cluster of similar behaviors, and a standard of behavior. For instance, in traffic simulation, it might be aggressive or cautious drivers  X  X  X ategories X  X : aggressive drivers will have similar, but not identical, behaviors. This standard of behavior might also be a description they do not share: a driver can behave aggressively while considering himself normal, or even cautious.

Moreover, in our case, the non-intrusiveness constraint means that the simulation and the proposed model have to be disso-ciated. The simulation software, including the agents X  decision model, cannot be modified, and has to be used as provided by the simulator editor. Therefore, we cannot suppose that the decision model of the agents in the simulation handles the notion of behavioral pattern . This has one major implication, which is also one of the limits of the approach: the agents cannot reason on their behavior. This means that the agents cannot explicitly choose to change their pattern . An agent only changes it during the course of its actions, depending on its decision model, and without knowing it.

Finally, we chose to base our approach on a parameter description of the behavior, as this representation is common in simulations and can therefore be used ad hoc. If more complex representation are used, they usually can be reduced to a para-meter based description. For instance, in the software used at Renault, drivers X  behaviors are described through parameters like their maximal speed, their percentage of respect of the speed we therefore restrict our approach to simulations where the behaviors can be expressed through a set of parameter values.
Note that if the non-intrusiveness constraint does not have to be respected  X  for instance if the source code of the simulation can be freely modified  X  the simulation agents could be made able to reason about their own behaviors. To do so, the simulation model has to be altered, to allow the agents to own a representa-an agent can choose to change its pattern , temporarily or perma-nently. This change is achieved through a request for a new set of parameter values from the behavioral differentiation model that will replace its current values. 4.2. Global presentation of the model
In our approach, behavioral patterns are used to provide a description of agents X  behaviors, based on their configuration parameters ( Lacroix et al., 2008b ), and to check the conformity at runtime.
  X  0 ; 15 km = h ,  X  0 , v
A f big , normal , small g , representing the Model Agents simulation may have several corresponding Parameters in the model, to answer different needs.

A Parameter is a tuple including different elements. A Para-meter holds a reference on another Parameter p ref , called the  X  X  X eference parameter X  X . p ref is either another Parameter or null.
A Parameter includes two elements relative to its definition space. First, the definition domain D p defines the Parameter type and possible values. A Parameter might be a real number, an integer, a string, or even an action rule. The domain can be continuous, discrete, etc. It is to be noted that in the applica-tions presented, the Parameters are mostly real numbers defined over discrete or continuous domains. The second element is the default value v d p A D p . By default, with real numbers, on a discrete or discontinuous domain this value is the closest number of the domain mean value; on continuous domains it is the mean value.

The two last elements of a Parameter are used for agent creation and conformity check. The probability distribution g defined on the distribution domain D p . This distribution is used to generate values for the Parameter , using an algorithm described in
Section 7 . It contributes to the creation of variety among agents X  behaviors. By default, g p is the uniform distribution over D
Finally, the distance function f p allows to compute the gap between a Parameter value and its definition domain. This func-tion is used to quantify the irregularities, as described in Section 6 . By default, on a discrete or discontinuous domain, this function returns 0 over the domain, and 1 outside. On a continuous domain, the default function is 8 x A
Without loss of generality (the bounds may be chosen as wide as necessary), the definition domains have to be finite, to allow the max and min function to be defined.

Finally, we note P the set of all the Parameters defined in the model.

Definition 1. A Parameter p is a tuple  X  l p , p ref , D p by l a unique label, p ref  X  p  X  a reference parameter,
D p a finite definition domain, with if p ref a null , then D v p A D p a default value, g p a probability distribution over D p , f f : D p /  X  0 ; 1 .

Example 2. Based on Example 1 , we define two  X  X  X oot para-meters X  X , the maximal speed v max and the personal space s ,as well as two other Parameters based on these  X  X  X oot parameters X  X , the normal maximal speed v normal and the normal personal the maximal speed v max is defined by p ref  X  null , D p  X   X  0 ; 15 km = h, v d p  X  5km = h, g p and f p the default functions, the personal space s is defined by p ref  X  null , D p f big , normal , small g , v d p  X  normal , g p and f p the default functions, the normal maximal speed v normal is defined by p ref  X  v
D p  X  X  4 ; 6 km = h, v d p  X  5km = h, g p the normal distribution described by a mean value m  X  v d p and variance s 2  X  1 trun-cated at D p bounds, and f p the default distance function, is defined by p ref  X  s, the default functions.
 , s normal g . Fig. 2 represents v max and A P will be created as deviant. The second one is the maximal gap to the pattern d max B , which specifies the tolerance toward the amplitude of the behavioral irregularities. These two elements allow the user to have a close control on the irregularities, both in proportion and in amplitude: a certain percentage t B of the population instantiated from a Behavioral Pattern can be created in deviation from the pattern in a certain limit specified by d A Behavioral Pattern thus defines a set of Parameters ( P potential irregularities ( t B and d max B  X  .
 Definition 3. A Behavioral Pattern B is a set f l B , B ref with l B a unique label, B ref  X  B  X  a reference pattern, with B ref  X  B  X  a null ,
P B a finite set of parameters p , which verifies 8 &gt; &lt; &gt; :
Q B a set of properties, t B a deviation rate, with t B A  X  0 ; 1 , d max B a maximal gap to the pattern, with d max B A  X  0 ; 1 . Example 4. Our first objective is to create pedestrians having a normal behavior in the simulation. However, we would like to obtain some agents adopting a slightly different behavior, to increase the variety and thus the simulation realism. To answer that need, we only have to define the Behavioral Pattern B using the following elements: B ref  X  B root , P B  X f v max , normal Q agents instantiated from this pattern will behave normally, and there is a 5% chance that they will adopt a deviant behavior at their creation. The maximal gap to the pattern can reach 10%. Fig. 3 represents B root and B normal as well as two other patterns that could be defined similarly.

The Behavioral Patterns present two interesting properties. The first one is that for each Parameter of a Behavioral Pattern , the definition domain of this Parameter is necessarily included in the domain of the corresponding Parameter in the  X  X  X eference pattern X  X . The definition domains are thus more and more restricted when we go down the Behavioral Patterns hierarchy.
 Property 1. 8 B a B root , 8 p A P B , p ref  X  p  X  A P B ref
A P B 1 .By Definition 3 , ( p 2 A P B ref  X  B 1  X  A P ,thus p ref  X  p 1  X  a 0. There-a 0  X ) X  D p 1 D D p 2  X  . &amp; defines the whole set of Parameters A P B , ( ! p r A P A
P B 1 . With Definition 3 , ( p 2 A P B ref  X  B 1  X  is unique: with Definition 1 root . The hierarchy being , but not necessarily inside D p .
 g a set of pairs of parameters labels and A
C m , c  X  X  p , v
 X  A  X  p
D enable to ensure that each ; and all the values included in the Model m 1 instantiated from the behavioral normal , normal  X g . The Model generation of the Model Agents , according to the process pre-sented in Section 7 .

Definition 5. An Setting S is a set f l S , B S , s S g with l a unique label, B
S a finite set of behavioral patterns,
S the global determinism criteria of the simulation, with S A  X  0 ; 1 .
 the pattern  X  X  X ormal pedestrian X  X , with a 1 % global determinism criteria. 6. Behavioral irregularities
After having defined the semantics of our approach, we now consider the question of the behavioral irregularities. In our approach, irregularities from the behavioral patterns are used to increase the behaviors variety. Moreover, their quantification enables to control the conformity to the specification. 6.1. Definition
Irregularities are defined as follows: a Model Agent presents a behavioral irregularity if and only if at least one of the values associated to one of its Parameters does not belong to this Parameter domain in the Behavioral Pattern .

Definition 6. A Model Agent a m presents a behavioral irregularity from its reference behavioral pattern B a m if and only if ( c  X  X  p , v p  X  A C a m such that v p = 2 D p .

Example 7. Let a m 2 be a Model Agent with B a m
C from its reference behavioral pattern.

An agent deviates occasionally from its reference pattern, when its parameter values cross the bounds of the definition domains during the simulation. An agent can also present a behavioral irregularity at its creation, before eventually going back to a conformal state. Irregularities increase the variety of the produced behaviors, allowing unspecified behaviors to appear.
However, to be able to ensure the conformity to the specifica-tions, these irregularities have to be quantified.

Definition 7. Let q a m be defined by q  X  q m represents the quantification of agent X  X  a m deviation. The higher the number of deviant Parameters , and the higher the gap with the Parameter definition domain, the greater the q a
The quantification is based on the function f p to allow users to customize it if needed.

Example 8. With Model Agent a m 2 from Example 7 q  X   X  20 0  X  0 Property 3. 8 a m A A m , q a m A  X  0 ; 1 .
 ( Definition 4 ), therefore
A  X  0 ; 1 . &amp; }  X  X  previous values} ).
 A P and v p  X  a m  X  A D p .
 normal defined in Example  X  0. v max and s normal being static, they of reference pattern B a m is always such that p A P a m s and v p  X  a m  X  = 2 D p .
 defined in Example 7 is always therefore a m 2 always remains in deviation.

Finally, a Model Agent can be deviant .A deviant agent defines at least one dynamic parameter. At its creation or during the simulation, this parameter may take a value outside its definition domain. If this happens, the agent presents therefore a behavioral irregularity from its reference pattern. However, the parameter being dynamic, this value may change again and return to the parameter definition domain, and the agent to a conformal state. A deviant agent may never reach the state of behavioral irregu-larity, if the specification of s or d max B a does not allow it. Definition 10. A Model Agent a m of reference pattern B a deviant if and only if ( p A P B a m , p A P a m d .
 Example 11. Suppose that a dynamic parameter v desired and a behavioral pattern B desired including this parameter have been defined. Then any Model Agent instantiating N desired is deviant . 7. Parameters generation
Our approach describes agents X  behaviors using behavioral patterns. However, the creation of agents X  parameters requires section, we describe an algorithm designed to control the ran-domness introduced in an instantiation process, and its applica-2008a ). 7.1. Motivation of the algorithm design
The proposed algorithm was inspired by an approach proposed by Reynolds (1999) for path following. In that approach, an agent is enabled to steer along a predetermined path, represented for instance by a spline or a poly-line, instead of being rigidly constrained to follow it. The idea is to constrain the agent X  X  position inside a  X  X  X ube X  X , defined as a circle of a specified radius swept along the path. To do so, the  X  predicted  X  future position of the agent is projected on the path. If the distance between the projection and the predicted position is greater than the specified radius, the agent has to steer back to the path. Otherwise, it is considered as being correctly following the path.

Similar to this approach, our objective is to generate values in a determined space, and if the generated values is predicted to be outside the domain (i.e. in deviation), we want to be able to react (usually refusing or accepting the value). Instead of constraining an agent X  X  position in a  X  X  X ube X  X , we want to constrain a parameter value within a definition domain. However, in our case, the algorithm has to handle many different parameters, possibly of different types. Inspired by Reynolds approach, we thus propose an algorithm able to cope with any number of dimensions and any type of parameters.

Moreover, we added the possibility to control the randomness of the process. Indeed, the objective was to provide a tool that enhances the simulation realism and eases the scenario design. To answer these needs, the algorithm had to provide a precise control mechanism. This control has to be assured on the global determinism of the process, to allow reproducibility, and on the determinism of each object instantiation, to allow a very fine level of specification. We therefore introduced a two level control: the higher level controls the global determinism of the algorithm, and the lower level controls the determinism on an object-level basis.
This necessity to control irregularities is required for industrial needs. In traffic simulation for instance, you may need to allow them to broaden the range of simulation cases tested, when in exploitation of immersive simulators you have to guaranty no , P B , Q B , t B , d max B g , s the f potential deviation , v p A D p ref g
D p g
D p g or k 4 max _ try function, taking value in D p ref , and not D p .
 : this parameter will not be normal from Example 1 The proposed algorithm creates the Parameter values of the Model Agent by instantiating its reference Behavioral Pattern .
Furthermore, the controlled randomness introduced in the pro-cess enables the creation of a great variety of agents. Executed at the beginning of the simulation, this algorithm creates the initial agents population. During the simulation, it can be used to dynamically instantiate the agents. 8. Automated configuration of the model
The last part of the proposed model aims at providing the model with one important capability: the automation of beha-to assist the user in the configuration of the model to ease its implementation in existing simulation. 8.1. Behavioral patterns inference
Our objective was to a use a method which would: not require any domain specific configuration to preserve the model gener-icity; be fully automated to limit supervision needs; and be robust to errors to allow the use of low quality data.

To answer these issues, we chose to use unsupervised classi-fication techniques. Indeed, unsupervised algorithms do not require user feedback during classification: they automatically build clusters of similar data. Moreover, these algorithms are generic: using inputs built with agents X  parameters values and outputs matching the behavioral patterns structure, the algorithm can be used on a large variety of applications. Finally, these algorithms are robust, as noisy inputs are categorized in existing clusters without triggering errors.

A wide variety of unsupervised algorithms have been devel-oped ( Gallant, 1993 ), and various well-tried techniques are available ( Anderberg, 1973 ; Carpenter and Grossberg, 1987 ).
In our particular case, we selected Kohonen neural networks ( Kohonen, 1995 ). In Kohonen networks, also called self-organiz-ing maps, during the training phase, for each example input vector, the closest neuron to this vector is declared the winner, and the weights of this neurons and its neighbors are adjusted toward the input vector. The network self-organizes, and pro-gressively builds a topological map of the inputs. One of the properties of this map is that the vectors which are close in the data space match close neurons in the map space. Therefore, they provide a spatial representation of the data that allows the final users to visualize them more easily, as a low dimensional view of high dimensional data. This user friendly visualization is the first reason why we chose to use Kohonen Networks. The second reason is that in self-organizing maps, the distance function can be easily adapted to match user needs. 8.2. Algorithm description
Our method is based on a Kohonen network having a rectan-gular topology, using  X  k  X  1  X  X  k  X  1  X  neurons. The network is dynamically built using the size k of the inputs, for genericity purpose. Inputs are vectors holding the values of the agents X  parameters.

Algorithm 3 presents the procedure used. During initialization, a Kohonen network is built, and a Behavioral Pattern is created for each of the network neurons. The network is then trained using the input set. The second step automatically builds the elements
B and the vector W i , j of weights computed during training are available. Because of their design, each component w i , j , h g with 8 l , E l  X  X  v k  X  , k r n , , holding the k Parameters p k which root as reference pattern. : v w , update the corresponding bound of using the network K . Let u i , j be the this remains a promising first step toward a full automation of the approach. 9. Back to our issue: variety and consistency
In this section, we show how the model presented provides a solution to our issue: the introduction of variety in the agents X  behaviors, and the conformity control of their parameters with the specifications. We finally present how the model can be introduced in existing simulations. 9.1. Introduction of variety in agents X  behaviors
Behavioral Patterns provide a flexible tool to create various behaviors. In our approach, this variety is introduced through the Behavioral Patterns definitions, and through the behavioral irregularities.

Based only on the definitions of the Behavioral Patterns , the ability to create as many Parameters and as many Behavioral Patterns as desired offers wide variety possibilities. Indeed, the definition domains of the Parameters can introduce specific characteristics, and a Behavioral Pattern can include any Para-meter . For example, if a Behavioral Pattern only specifies a single Parameter , whose definition domain is a singleton, the Behavioral Pattern will always produce the same value for this Parameter .On the contrary, if a Behavioral Pattern is based on all simulation Parameters , each of them having a wide definition domain, then an important variety of agents X  parameter values, and thus behaviors, will be produced.
 Example 13. In order to study the influence of joggers in a simulated pedestrian flow, we introduce the Behavioral Pattern B jogger , with the Parameter v jogger of reference parameter v population of 99% of the agents instantiating B normal and 1% instantiating B jogger allows to introduce easily joggers in the simulation. Moreover, deactivating that Behavioral Pattern is enough to prevent the appearance of any jogger in the simulation.
Variety is also introduced between the agents belonging to the same Behavioral Pattern . Indeed, during the instantiation of the values by the generation algorithm, the probability distribution naturally introduces variety: the Parameters in the Model Agent take various values in their definition domain. The flexibility of the approach is increased by the possibility of adapting the distribution to users X  needs. The default function is a uniform distribution, but any kind of function can be used, like Gaussian ones.
 Example 14. Two agents instantiated from the same Behavioral Pattern B normal will get two different sets of values from the definition domain. For instance, two agents a 1 and a 2 instantiated from B normal could be a 1 ( v max  X  a 1  X  X  4 : 7km = h, s  X  a a ( v max  X  a 2  X  X  5 : 2km = h, s  X  a 2  X  X  normal ).

Another element used to increase variety in agents X  behavior is the behavioral irregularities. Irregularities allow the occurrence of unspecified behaviors in the simulation. For instance, in driving simulators used to evaluate drivers X  aid systems, unusual beha-viors might unsettle the drivers. This widens the test range, and thus increases the system robustness. In the model, three para-meters specify the irregularities. The deviation rate t N proportion of allowed irregularities. The maximal gap to the pattern d max B avoids Parameter values to be  X  X  X oo far X  X  from the behavioral pattern. Finally s centralizes the activation of deviation use at the ( v max  X  a 4  X  X  1 : 4km = h and : v max  X  a 3  X  = 2 D maximal speed ( v max ) between the simulation agents and the Behavioral Patterns . The Model Agent enables to refer to the adequate  X  X  X oot parameters X  X , Root Behavioral Pattern ,or Parameters definition domains. First, by implementation, no behavioral irregularity from the means that if one of the parameters of a simulation agent takes a value outside the domain of the corresponding  X  X  X oot parameter X  X , this change is forbidden, and the value is forced at the domain bound. Therefore, the definition domains specified for the  X  X  X oot parameters X  X  define the absolute limits of the parameter values in the model execution: the system guaranties that no parameter will ever go beyond the definition domains defined in that Root final users, who can easily understand this mechanism.
Second, the maximal gap to the pattern d max B constrains the behaviors at runtime. This parameter defines the maximal allowed value for q a m .If d max B  X  0, no deviation is allowed. If d  X  1, the Parameter values can change freely, and behavioral irregularities are possible (within B root limits). Between these two allowing more or less important irregularities to appear. Algorithm 4. Conformity control of agents X  parameter values.
Require : A m the set of Model Agents, a the simulation agent represented by a m , b  X  false a boolean 1: for all a m A A m do 2: a temp  X  a m {temporary copy of a m } 3: for all p A P a m do {copy a  X  X  parameter values in a m 4: v p  X  a m  X   X  v p  X  a  X  5: end for 6: for all p A P a m do {check of root behavioral pattern} 8: b  X  true {change forbidden} 9: end if 10: end for 11: if q a 12: b  X  true {change forbidden} 13: end if 14: if b then {change forbidden, return to previous values} 15: a m  X  a temp 16: for all p A P a m do 17: v p  X  a  X   X  v p  X  a m  X  18: end for 19: end if 20: end for
That flexibility enables a precise control over the simulation: in experimentations where the behaviors have to remain under control, irregularities will be limited or forbidden. In simulations where unusual or unspecified behaviors are interesting, they will be authorized. We point out that even if irregularities are authorized, they do not necessarily appear. For instance, if the definition domain of a Parameter is close to these of its reference parameter, they will seldom happen.

Finally, it is to be noted that the behaviors instantiated by the itself consistent. Indeed, nothing guaranties the consistency of the behaviors defined using the Behavioral Patterns . On the contrary, users might wish to experiment the influence of inconsistent behaviors, and introduce them using patterns. The model only allows to control the conformity of agents X  parameter values with the specification provided in the Behavioral Pattern . and distance function f p use their , none of them hold max B  X  1). Finally, a Setting is auto-n parameters have to be defined, industry for various purposes, like the development of driving aid systems or vehicles design ( Reymond et al., 2001 ; Toffin et al., mental state similar to a drive in the real world and improve the validity of the experimentation results. The objective in driving simulators is to immerse the driver of the simulator in the simulated traffic, and produce specific traffic situations ( Olstam and Espie  X  , 2007 ). In contrast to traffic simulation tools like the reproduction of real traffic flows is therefore not the most important criteria used to evaluate the validity of the results.
Various driving simulation software are available ( Cremer et al., 1995 ; Olstam, 2005 ; Doniec et al., 2008 ). Among them, co-developed and distributed by Oktal (2012) . s can e r TM is based on a distributed architecture, and modules communicate using the network. Communications are based on a common protocol, available through an API. This API was used to implement the developments presented here.
 system architecture ( Champion et al., 1999 ). The traffic decision model uses different pseudo-psychological parameters, to incor-porate the psychological factors involved in drivers X  behaviors ( Dewar, 2002 ). Presented in Table 1 , these parameters are taken into account during the decision phase of the model. They allow to manage the drivers X  behaviors, in particular those related to the risk taking and the respect of traffic law. 10.2. Objective: introducing a controlled variety in the traffic
The major issue at stake in s can e r TM was that the behaviors of the autonomous vehicles were based on parameters defined during scenario creation. As presented in Section 3 , each vehicle had to be manually added in the scenario, and was created with the same behavioral parameter values. The design of a scenario involving a high number of vehicles was thus a long and repetitive work, and scenario was therefore usually created with as few vehicles as possible, and these vehicles used their (similar) default parameters. These elements highly diminished the immersion of the users in the simulation, and two main elements were thus targeted in our work: introduce variety to increase the users X  immersion, and automate the process to ease the work of the scenario designers.

To achieve these goals, we introduced driving styles in the various behaviors (aggressive, cautious, etc). Moreover, it has been shown that introducing such styles in a simulated traffic increases the users X  immersion in driving simulators ( Wright et al., 2002 ).
 , the safety time t s , the , the observe priority o p normal distribution of mean value m and variance s , truncated at
D bounds. Finally, the Root Behavioral Pattern B root is defined by P  X f v max , t s , r o , r s , o p , o s g .

The developments have been implemented in different mod-ules, and interfaced with the simulation using the s can e
The first module is used to edit pre-existing scenarios. It intro-duces driving styles during scenario design, and allows to apply driving styles on groups of vehicles, using a statistical repartition defined by the user (for instance, 10% aggressive and 90% normal drivers). The second module dynamically creates new vehicles during the simulation, and controls the vehicles parameters. It is used to easily populate a database using traffic generators, and create an  X  X  X mbient traffic X  X . The model is applied during the vehicles creation. The module also provides additional function-alities, such as traffic statistic recording. Finally, a third module allows to infer behavioral patterns from simulation records.
These three modules provide functionalities at the different simulation steps: during scenario creation, to easily introduce variety in the traffic; at runtime, to create new vehicles of various behaviors and control their parameters; and after the simulation, to analyze its results. 10.4. Experimental results
We evaluated the model contributions through experimenta-tions on the traffic. We present here the protocol used, as well as experimental result on variety, behaviors representativeness, and behavioral patterns inference. 10.4.1. Experimental protocol
The simulations took place on a database representing a highway, on a 11 km long section. There are no entries or exit lanes on the section, to ensure a constant vehicles flow. Three traffic detectors recorded vehicles speed, lane, and initial beha-vioral patterns, at kilometers 2.2, 6 and 10.8. Traffic generators created a traffic demand of 3000 vehicles/h at the beginning of .
 , is based on the three , B .
 and sensible to the context. In our case, the software and the proposed model are used in various countries, from China to England. Instead of proving the approach on a specific setting that would not be extensible to other contexts, we therefore chose to setting. However, as we state in Section 12 , this work would certainly benefit from a complementary user study. 10.4.2. Evaluation of the behaviors variety
We first evaluated the influence of the behavioral patterns on the behaviors variety. The Fig. 6 represents the vehicles speed distribution recorded by the detector 2. The data recorded by the other detectors are similar. When no pattern is used (setting S default ), the recorded speeds are either low, between 70 and 90 km/h (46% of the vehicles), or high, around 130 km/h (40% of the vehicles): the curve presents a  X  X  X amel back X  X  shape. Vehicle behaviors are too similar to adapt to small variations in the traffic flow: the left lane remains slow, the right one quick. Very few vehicles change lane or overtake, which explains the shape of the distribution.
 When a behavioral pattern is introduced, using the setting S normal_only , the speed distribution is more balanced: 60% of the vehicles adopt a speed between 90 and 115 km/h, and 30% between 115 and 140 km/h. The curve shape is similar to a Gaussian centered on 110 km/h. Vehicles behavior is more dynamic, involving lane changes and overtakings. Moreover, the vehicles average speed reaches 100.4 km/h, against 91.5 km/h for S default . That increase shows that the behaviors variety improves vehicles use of the road network.

In the third case, with the setting S all_patterns , the speed distribution also presents a Gaussian shape. Vehicles average speed increases to reach 103.7 km/h: again, an increased beha-vioral variety improves the vehicles speeds. The introduction of additional behavioral pattern produces two  X  X  X ounces X  X  in the curve, at 70 and 150 km/h, showing that more extreme and less predictable behaviors have been successfully introduced. These elements illustrate how behavioral patterns allow to increase the heterogeneity of the created population, as characteristics of the subpopulations  X  here the cautious and aggressive drivers  X  appear in the global population.

Finally, we analyzed the vehicles travel time through the whole section. The introduction of a behavioral pattern reduces that time by 11.6%, from 5 min 35 s to 4 min 56 s. This matches our observations on the speed: more variety allows vehicles to better use the road network and travel faster. However, if more does not decrease, but increases:  X  6.1%, from 4 min 56 s with S normal_only to 5 min 14 s with S all_patterns . Simultaneously, the
 X  ). Then, for each behavioral pattern, a v max on the x -axis, D t s on the y -axis).

Using these inferred behavioral pattern parameters and the generation algorithm, a population statistically close to the recorded one is produced by using each behavioral pattern function of its occurrence probability. The inferred behavioral patterns represent accurately the space of recorded data, which is promising for the use of this technique with real data sets. 10.4.5. Comparison with an intermediate solution
To further illustrate the interest of the approach, we compared the results obtained using Behavioral Patterns with an intermedi-ate solution. Indeed, another solution to introduce variety in the simulation could be to select the parameters we want the population to differ in, before applying simple statistical distribu-tions to these parameters.

We created a population using this method and the same distributions and proportions as those used in the setting
S all_patterns . The maximal speed parameter of the vehicles were therefore generated using either the probability distribution of v max , normal  X  a normal distribution of mean value m  X  120 and a respectively 80%, 10% and 10% probability. Similarly, the safety time of the vehicles were generated using t s , normal , t t s , aggressive , used with the same 80%, 10% and 10% respective probabilities.

Fig. 9 presents the obtained results. Although the population created with the intermediate solution presents a satisfying variety of behaviors, some of those behaviors do not respect our consistency criteria. Indeed, we observe vehicles having a highspeed ( km / hs p eed ( km / h ) . 11. Illustration of the genericity of the approach
The proposed tool can be used for different applications. For instance, the introduction of variety in crowds simulation presented in Section 2 is based on the variation of texture colors, accessories and body shapes. In each of those cases, the method rests on the random selection of values in constrained definition domains. Using which would improve maintenance and flexibility of the solution.
All we have to do is to describe the pedestrians X  parameters using the proposed semantics, and define associated behavioral patterns. For instance, lets create Parameters for the color elements (for example the shade Parameter shade ,with D shade  X  X  20 , 250 and v shade  X  135), Parameters for each accessory category (for example v b men  X  none ), and a Parameter for the body shape ( shape ,with D shape  X  X  30 , 130 and v d shape  X  50). Then, we define a Behavioral rithm naturally introduces variety using these values. Furthermore, using this out-of-the-agent design, the configuration is available to users who do not have any graphical expertise, when these elements were previously hard-coded in the graphic models. 12. General discussion
The objective of this work was to improve the agents X  behavioral realism in the simulation. The proposed approach focuses on the behavioral variety and consistency, and is based on the use of the agents X  configuration parameters. Whether or not these parameters can be considered as representing the agents X  behavior determines the relevance of the approach. As our work shows, the parameters provide an easy and intuitive way to influence the agents X  behavior, which addresses our issues. Moreover, using these parameters allow the final users to intuitively implement the model contribu-tions. We think this is one of the key strength of the model, as it facilitates its use in industrial applications.

Another element to be considered is the validation of the model contributions. Section 10 shows how the model introduces variety in the simulation, and that the generated behaviors are conform to the users X  expectations. However, the current evaluation should be completed with a simulators user study. This study would prove improve the automated validation with complementary informa-tions on the most significant parameters. We note that it remains difficult, though, to demonstrate the model contributions without any application frame: it would be very interesting to introduce criteria enabling such a quantification.

Finally, behavioral patterns infer ence let appear one of the limits of the approach. Punctual data that are used to infer behavioral patterns do not accurately capture behaviors, because they do not include a temporal dimension. The inferred behavioral patterns only enable to reproduce the agents X  behaviors at the time of recording, but not their behaviors over the time. These behavioral patterns probably quickly adopt a different course. In order to address this issue, we plan to add a time-dependent analysis of the behaviors. For instance, the agents X  behaviors could be recorded continuously, and these profiles used to infer the behavioral patterns. 13. Future works
Some of the functionalities provided by the model have not been fully used in the presented applications. Among them, behavioral pattern properties and behavioral irregularities present fruitful
