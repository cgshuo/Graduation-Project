 Many complex systems in the real world exist in the form of networks, such as social networks, biological networks, Web networks, etc., which are also often classified as complex networks. Complex network analysis has been one of the most popular research areas in recent years due to its applicability to a wide range of disciplines [1,2,3]. While a considerable body of work addressed basic statistical properties of complex networks such as the existence of  X  X mall world erty that has attracted particular attention is that of  X  X ommunity structure X : nodes in a network are often found to cluster into tightly-knit groups with a high density of within-group edges and a lower density of between-group edges community structure in given complex networks.

The research on complex network clustering problems is of fundamental im-portance. It has both theoretical significance and practical applications on an-alyzing network topology, comprehending network function, unfolding network patterns and forecasting network acti vities. It has been used in many areas, such as terrorist organization recognition, organization management, biological network analyzing, Web community mining, etc [4].

So far, lots of network clustering algorithms have been developed. In terms of the basic strategies adopted by them, they mainly fall into two main categories: optimization and heuristic based metho ds. The former solves the NCP by trans-forming it into an optimization problem and trying to find an optimal solution for a predefined objective function such as the network modularity employed in jectives in the heuristic based metho ds, and they solve the NCP based on some intuitive assumptions or heuristic rules, such as in the Girvan-Newman (GN) algorithm [3], Clique Percolation Method (CPM) [9], Finding and Extracting Communities (FEC) [10], Community Detection with Propinquity Dynamics (CDPD) [11], Opinion Dynamics with Decaying Confidence (ODDC) [12], etc.
Though a lot of network clustering algorithms have been proposed, how to further improve the cluster ing accuracy, especially ho w to discover reasonable network community structure without prior knowledge (such as the number of lem, a random walk based ant colony optimization for NCP is proposed in this paper enlightened by [10]. In this algorithm, each ant detects its community by using the transition probability of a random walk as heuristic rule; in each of clustering ensemble [13], and update their pheromone matrix by using this solution; at last, after the algorithm has converged, the pheromone matrix is analyzed in order to attain the clustering solution for the target network. 2.1 The Main Idea Let N =( V, E ) denote a network, where V is the set of nodes (or vertices) and E is the set of edges (or links). Let a k -way partition of the network be and 1  X  i  X  k N i =  X  . If partition  X  has the property that within-community edges are dense and between-community edges are sparse, it X  X  called a well-defined community structure of this network.

In a network, let p ij be the probability that an agent freely walks from any probability of a random walk. In terms of the adjacency matrix of N , A = ( a P be the transition probability matrix of random walk, we have From the view of a Markov random walk, when a complex network has commu-nity structure, a random walk agent should be found it difficult to move outside its own community boundary, whereas it should be easy for it to reach other nodes within its community, as link density within a community should be high, by definition. In other words, the probability of remaining in the same commu-freely walking by a number of steps, should be greater than that of going out to a different community.

It X  X  for the reason above, that in this ant colony optimization (ACO) strategy, each ant (only different from agent in the sense that it can consult and update a  X  X heromone X  variable in each link) takes the transition probability of random iteration, the solution found by each ant only expresses its local view, but one through a clustering ensemble, which will be used to update the pheromone ma-will gradually become sharper and algorithm ACOMRW converges to a solu-tion where the community structure can be accurately detected. In short, the pheromone matrix can be regarded as the final clustering result which aggregates the information of all the ants at all iterations in this algorithm. as follows. Given a network N which has community stru cture. One lets some and the new ant colony will be generated immediately when all of the former ants die. At the beginning of this algorithm, there is yet no impact from the pheromone on network N . Only because of the restriction by community struc-ture, the ant X  X  probability for remaining in its own community should be greater than that for going out to other communities, but there is no difference between these ants and the random walk agents at the moment since pheromone distribu-of pheromone left by the former ants, the pheromone on within-community links will become thicker and thicker, and the pheromone on between-community links will become thinner and thinner. In fact, pheromone is simply a mechanism that main in its own community. At last, when the pheromone matrix converges, the of ACOMRW is that, by strengthening within-community links and weakening between-community links, an underlying community structure of the network will gradually become visible. 2.2 Algorithm Description A Solution by One Ant. Each ant is leading to a solution in ant colony optimization, so a solution produced by one ant should be a clustering solution of the network for the NCP.
 Given network N =( V, E ), consider a stochastic process defined on network N with pheromone, in which an ant freely crawls from one node to another along the links between them. After the ant arrives at one node, directed by neighbors and move there.
 That is, the next state of the ant is only decided by its previous state, which is called a Markov property. So this stochastic process is a discrete Markov chain and its state space is V .Furthermore, X t is homogeneous because of P { X node i to node j .

Let the transition probability matrix of random walk, which is regarded as heuristic rule, be P =( p ij ) n  X  n , and the current pheromone matrix be B = ( b ij ) n  X  n , then the probability m ij that any ant walks from any node i to its neighbor node j within one step can be computed by Eq. (3). Therefore, the transition probability matrix of the ants should be M =( m ij ) n  X  n . Consider the Markov dynamics of each ant above. Let the start position of can be given by heuristic rule, and are directed by pheromone at the same time. Thus, as the link density within a community is, in general, much higher than that between communities, an ant that starts from the source node s should have more paths to choose from to reach the nodes in its own community within l steps, where the value of l can X  X  be too large. On the contrary, the ant should have much lower probability to arrive the nodes outside its community. In other words, it and leave the existing community. Furthermore, with the evolution of algorithm ACOMRW, the pheromone on within-community links will become thicker and thicker, and the pheromone on between-community links will become thinner and thinner. This makes the trend that any ant remains in its own community more and more obvious.

Here we define Eq. (5), where C s denotes the community where node s is situated. More formally speaking, Eq. (5) should be met better and better with the evolution of pheromone matrix. When algorithm ACOMRW converges at last, Eq. (5) will be completely satisfied, and underlying community structure will become visible. Later we will give detailed analysis on parameter l . The algorithm that each ant adopts to compute its l -step transition probability distribution V l s is given bellow. It is described by using Matlab pseudocode.
Procedure Produce V input: s /  X  start position of this ant  X  / output: V /  X  l  X  step transition probability distribution of this ant  X  / begin 1 V  X  zeros (1 ,n ); 2 V ( s )  X  1; 3 M  X  P.  X  B ; 4 D  X  sum ( M, 2); 5 D  X  diag ( D ); 6 M  X  inv ( D )  X  M ; 7 M  X  M ; 8 for i =1: l 9 V  X  V  X  M ; 10 if i = l 11 [ sorted V, ix ]  X  sort ( V, descend ); 12 V ( ix (1 : i +1))  X  1; 13 end 14 end end should be also a clustering solution of the network. However, each ant only has the ability of denoting that it can visit the nodes in its own community with one community, which may respectively b elong to several different communities. Therefore one ant can only find its own community from its local view.
This algorithm sorts V l s in descending order, and then calculates differences between adjacent elements of the sorted V l s , finding the point corresponding to the max difference. It X  X  obvious that the point corresponding to the biggest identify the community of this ant. At last, we believe that the points whose same community, but we don X  X  consider which communities the nodes left out belong to. It X  X  obvious, a solution produced by one ant is its own community. follows.

Procedure Divide V input: V /  X  l  X  step transition probability distribution of this ant  X  / output: solution /  X  solution of this ant  X  / begin 1[ sorted V, ix ]  X  sort ( V, descend ); 2 diff V  X  X  X  diff ( sorted V ); 3 diff V  X  dif f V ( l +1: length ( diff V )); 4[ max diff ,cut pos ]  X  max ( diff V ); 5 cut pos  X  cut pos + l ; 6 cluster  X  ix (1 : cut pos ); 7 solution  X  zeros ( n, n ); 8 solution ( cluster, cluster )  X  1; 9 I  X  eye ( cut pos, cut pos ); 10 solution ( cluster, cluster )  X  solution ( cluster, cluster )  X  I ; end
In the network, let the number of total nodes be n , and the number of total edges be m . If the network is denoted by its a djacency matrix , the time com-plexity of Produce Vis O ( l  X  n 2 ). Divide V needs to sort all nodes according as bin sort and counting sort) which can be adopted, the time complexity of Divide Vis O ( n ). Thus, the overall complexity that one ant induces to produce time complexity can be decreased to O ( l ( m + n )). As most complex networks are sparse graphs, this can be very efficient.
 Algorithm ACOMRW. There are two main parts in algorithm ACOMRW: pheromone matrix when the algorithm converges. The goal of the second phase is to analyze this pheromone matrix in order to get the clustering solution for the network. The algorithm of the exploration phase is given by:
Procedure Exploration Phase input: A, T, S,  X  /  X  A is the adjacent matrix of the network, output: B /  X  denotes pheromone matrix  X  / begin 1 D  X  sum ( A, 2); 2 D  X  diag ( D ); 4 B  X  ones ( n, n ) /n ; /  X  initialize the pheromone matrix  X  / 5 for i =1: T 6 solution  X  zeros ( n, n ); 7 for j =1: S 8 solution  X  solution + one ant ( P, B ); /  X  one ant returns a solution  X  / 10 D  X  sum ( solution, 2); 11 D  X  diag ( D ); 12 solution  X  inv ( D )  X  solution ; /  X  normalize the solution  X  / 13 B  X  (1  X   X  )  X  B +  X   X  solution ; /  X  update the pheromone matrix  X  / 14 end end
As we can see, at each iteration, this algorithm aggregates the local solutions of all ants to a global one, and then updates the pheromone matrix B by using it. With the increase of iterations, the pheromone matrix is gradually evolving, which makes the ants more and more directed, and the trend that any ant stays in its own community more and more obvious. When the algorithm finally converges, the pheromone matrix B can be regarded as the final clustering result which aggregates the information of all the ants at all iterations.
The next step is how to analyze the produced pheromone matrix B in or-der to attain the clustering solution of the network. Because of the convergence property of ACO, the cluster characteristic of matrix B is very obvious. The description of a simple partition phase algorithm is as follows.

Procedure Partition Phase input: B /  X  pheromone matrix after algorithm converging  X  / output: C /  X  f inal clustering solution or community structure  X  / begin 1 Compute cutoff value  X  ; /  X   X is 1 /n, where n is the number of nodes  X  / 2Getthefirstrowof B , and take the nodes whose values are greater 3 From matrix B , delete all the rows and columns corresponding to the 4If B is not empty go to step 2, otherwise return the clustering solution end
Because of the convergence properties of the exploration phase algorithm, we can develop a simple algorithm for the partition phase. As known from the con-vergence property of ACO, in pheromone matrix B , the rows which correspond to the nodes in the same community should be equal. Therefore, by choosing any row from B , we can identify its community by using a small positive number  X  as cutoff value to divide this row. 2.3 Parameter Setting There are four parameters: T,S, X ,l in this algorithm, which denote iteration number limitation, ant colony size, the update rate to the ants X  pheromone ma-trix and a step number limitation, respectively. The first three parameters are easy to be determined, they can be set as: T =20 ,S = n (where n is the num-ber of nodes in the network) and  X  =0 . 5 in general. However, the setting of parameter l is very difficult and important.

As most social networks are small-world networks, the average distance be-tween two nodes was shown to be around 6, according to the theory of  X  X ix ally small too. The World Wide Web is one of the biggest scale-free networks that we have found so far. However, the average distance of such a huge network is actually about 19 [15]; that is, we can get to anywhere we want through 19 clicks on average. Thus, based on the above general observations, good options 6 age distance between nodes within any community instead of the whole network, thus it can be even smaller.

In addition, by using this algorithm we can attain a reasonable hierarchi-cal community structure of the network with the change of parameter l .The experimental section of the paper will give a detailed analysis on parameter l . In order to quantitatively analyze the performance of algorithm ACOMRW, we tested it by using both computer-gen erated and real-world networks. We conclude by analyzing the parameter l defined in this algorithm.
 In this experiment our algorithm is compared with GN algorithm [3], Fast Newman (FN) algorithm [5] and FEC algorithm [10]. They are all known and competitive network clustering algorithms. In order to more fairly compare the clustering accuracy of different algorit hms, we adopt two widely used accuracy measures, which are Fract ion of Vertices Classified C orrectly (FVCC) [5] and Normalized Mutual Informat ion (NMI) [16] respectively. 3.1 Computer-Generated Networks To test the performance of ACOMRW, we adopt random networks with known community structure, which have been us ed as benchmark datasets for test-ing complex network clustering algorithms [3]. This kind of random network is defined as RN ( C, s, d, z out ), where C is the number of communities, s is the number of nodes in each community, d is the degree of nodes in the network, and each node has z in edges connecting it to members of its own community and z out edges to members of other communities.

Parameter l is set at 6 for algorithm ACOMRW and benchmark random net-work RN (4 , 32 , 16 ,z out )isusedinthisexperiment.It X  X obviousthatas z out is increased from zero, comm unity structures of networks become more diffused and the resulting networks pose greater and greater challenges to network clustering algorithms. Especially, a network doesn X  X  have community structure when z out the average accuracy through cluster ing 50 random networks. As we can see from Fig. 1, our algorithm significantly outperforms the other three algorithms in terms of both these accuracy measures. Furthermore, as z out becomes larger and larger, the superiority of our algorithm becomes more and more significant. Especially, when z out equals 8, which means the number of within-community and between-community edges per vert ex is the same, our algorithm can still curacy of the other algorithms is low at this moment. 3.2 Real-World Networks As a further test on algorithm ACOMRW, we applied it to three widely used real-world networks with a known communi ty structure. These actual networks may have different topological properties than the artificial ones. They are the well known karate network [17], dolphin network [18] and football network [3].
In our algorithm, parameter l is set to be 7, 3 and 11 for these three networks respectively. The clustering results (o ver 50 runs) of algorithms ACOMRW, GN, FN and FEC against the three real-world networks are shown as Table 1. It can be seen that the clustering accuracy of ACOMRW is clearly higher than that of the other algorithms in terms of bo th these two accuracy measures. 3.3 Parameters Analysis Parameter l is very important in algorithm ACOMRW. In Sec. 2.3, we have given a reasonable indication on the range of parameter l by considering the small-world and scale-free networks. Taking the dolphin network as an example, this section gives a more detailed analysis. Here we adopt network modularity function ( Q ), which was proposed by Newman and has been widely accepted by the scientific community [19], as a measure of the compactness of communities.
Fig. 2 shows how the cluster number, Q value, and the clustering result got by algorithm ACOMRW vary with its parameter l . From Fig. 2(a) and (c), we find out that this algorithm divides the network into 5 little tight communities when l is small. With the increase of parameter l , the communities between which there are more edges are beginning to merge. Finally, this network is divided into 2 big tight communities. Note that: the red nodes form a community and the blue nodes form another community in the real community structure of dolphin network. Furthermore, from Fig. 2(b), the Q values got by ACOMRW for different l values are all greater than that of the real community structure of this network, thus we can also say algorithm ACOMRW can give some well-defined hierarchical community structures of networks with the change of its parameter l . The main contribution of this paper is to propose a high accuracy network clus-tering algorithm ACOMRW. Because the real community structures of most current large scale networks are still unknown now, we have adopted as bench-mark computer generated networks and some widely used real world networks, whose community structures are known, to test its performance. In the future, we also wish to apply it to the analysis of real-world large-scale networks, and try to uncover and interpret significati ve community structure that is expected to be found on them.
 Acknowledgments. This work was supported by National Natural Science Foundation of China unde r Grant Nos. 60773099, 60703022, 60873149, 60973088, the National High-Tech Research and Development Plan of China under Grant No. 2006AA10Z245, the Open Project Program of the National Laboratory of Pattern Recognition, the Fundamental Research Funds for the Central Universi-ties under Grant No . 200903177 and the Proj ect BTG of European Commission.
