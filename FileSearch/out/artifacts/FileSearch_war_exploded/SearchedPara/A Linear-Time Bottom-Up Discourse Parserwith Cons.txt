 Discourse parsing is the task of identifying the presence and the type of the discourse relations between discourse units. While research in dis-course parsing can be partitioned into several di-rections according to different theories and frame-works, Rhetorical Structure Theory (RST) (Mann and Thompson, 1988) is probably the most am-bitious one, because it aims to identify not only the discourse relations in a small local context, but also the hierarchical tree structure for the full text : from the relations relating the smallest discourse units (called elementary discourse units, EDUs), to the ones connecting paragraphs.

For example, Figure 1 shows a text fragment consisting of two sentences with four EDUs in total ( e 1 -e 4 ). Its discourse tree representation is shown below the text, following the notation con-vention of RST: the two EDUs e 1 and e 2 are re-lated by a mononuclear relation C ONSEQUENCE , where e 2 is the more salient span (called nucleus , and e 1 is called satellite ); e 3 and e 4 are related by another mononuclear relation C IRCUMSTANCE , with e 4 as the nucleus; the two spans e 1:2 and e 3:4 are further related by a multi-nuclear relation S E -QUENCE , with both spans as the nucleus.

Conventionally, there are two major sub-tasks related to text-level discourse parsing: (1) EDU segmentation : to segment the raw text into EDUs, and (2) tree-building : to build a discourse tree from EDUs, representing the discourse relations in the text. Since the first sub-task is considered rela-tively easy, with the state-of-art accuracy at above 90% (Joty et al., 2012), the recent research focus is on the second sub-task, and often uses manual EDU segmentation.

The current state-of-the-art overall accuracy of the tree-building sub-task, evaluated on the RST Discourse Treebank (RST-DT, to be introduced in Section 8), is 55.73% by Joty et al. (2013). How-ever, as an optimal discourse parser, Joty et al. X  X  model is highly inefficient in practice, with re-spect to both their DCRF-based local classifiers, and their CKY-like bottom-up parsing algorithm. DCRF (Dynamic Conditional Random Fields) is a generalization of linear-chain CRFs, in which each time slice contains a set of state variables and edges (Sutton et al., 2007). CKY parsing is a bottom-up parsing algorithm which searches all possible parsing paths by dynamic programming. Therefore, despite its superior performance, their model is infeasible in most realistic situations.
The main objective of this work is to develop a more efficient discourse parser, with similar or even better performance with respect to Joty et al. X  X  optimal parser, but able to produce parsing re-sults in real time.

Our contribution is three-fold. First, with a [ On Aug. 1, the state tore up its controls ,] e 1 [ and food prices leaped ] e 2 [ Without buffer stocks ,] e 3 [ inflation exploded .] e 4 Figure 1: An example text fragment composed of two sentences and four EDUs, with its RST dis-course tree representation shown below. greedy bottom-up strategy, we develop a discourse parser with a time complexity linear in the total number of sentences in the document. As a re-sult of successfully avoiding the expensive non-greedy parsing algorithms, our discourse parser is very efficient in practice. Second, by using two linear-chain CRFs to label a sequence of discourse constituents, we can incorporate contextual infor-mation in a more natural way, compared to us-ing traditional discriminative classifiers, such as SVMs. Specifically, in the Viterbi decoding of the first CRF, we include additional constraints elicited from common sense, to make more ef-fective local decisions. Third, after a discourse (sub)tree is fully built from bottom up, we perform a novel post-editing process by considering infor-mation from the constituents on upper levels. We show that this post-editing can further improve the overall parsing performance. 2.1 HILDA discourse parser The HILDA discourse parser by Hernault et al. (2010) is the first attempt at RST-style text-level discourse parsing. It adopts a pipeline framework, and greedily builds the discourse tree from the bot-tom up. In particular, starting from EDUs, at each step of the tree-building, a binary SVM classifier is first applied to determine which pair of adjacent discourse constituents should be merged to form a larger span, and another multi-class SVM classi-fier is then applied to assign the type of discourse relation that holds between the chosen pair.
The strength of HILDA X  X  greedy tree-building strategy is its efficiency in practice. Also, the em-ployment of SVM classifiers allows the incorpora-tion of rich features for better data representation (Feng and Hirst, 2012). However, HILDA X  X  ap-proach also has obvious weakness: the greedy al-gorithm may lead to poor performance due to local optima, and more importantly, the SVM classifiers are not well-suited for solving structural problems due to the difficulty of taking context into account. 2.2 Joty et al. X  X  joint model Joty et al. (2013) approach the problem of text-level discourse parsing using a model trained by Conditional Random Fields (CRF). Their model has two distinct features.

First, they decomposed the problem of text-level discourse parsing into two stages: intra-sentential parsing to produce a discourse tree for each sentence, followed by multi-sentential pars-ing to combine the sentence-level discourse trees and produce the text-level discourse tree. Specif-ically, they employed two separate models for intra-and multi-sentential parsing. Their choice of two-stage parsing is well motivated for two rea-sons: (1) it has been shown that sentence bound-aries correlate very well with discourse bound-aries, and (2) the scalability issue of their CRF-based models can be overcome by this decompo-sition.

Second, they jointly modeled the structure and the relation for a given pair of discourse units. For example, Figure 2 shows their intra-sentential model, in which they use the bottom layer to rep-resent discourse units; the middle layer of binary nodes to predict the connection of adjacent dis-course units; and the top layer of multi-class nodes to predict the type of the relation between two units. Their model assigns a probability to each possible constituent, and a CKY-like parsing al-gorithm finds the globally optimal discourse tree, given the computed probabilities.

The strength of Joty et al. X  X  model is their joint modeling of the structure and the relation, such that information from each aspect can interact with the other. However, their model has a major defect in its inefficiency, or even infeasibility, for appli-cation in practice. The inefficiency lies in both their DCRF-based joint model, on which infer-ence is usually slow, and their CKY-like parsing algorithm, whose issue is more prominent. Due to the O ( n 3 ) time complexity, where n is the number Figure 2: Joty et al. (2013) X  X  intra-sentential Con-dition Random Fields. of input discourse units, for large documents, the Figure 3 demonstrates the overall work flow of our discourse parser. The general idea is that, similar to Joty et al. (2013), we perform a sentence-level parsing for each sentence first, followed by a text-level parsing to generate a full discourse tree for the whole document. However, in addition to effi-ciency (to be shown in Section 6), our discourse parser has a distinct feature, which is the post-editing component (to be introduced in Section 5), as outlined in dashes.

Our discourse parser works as follows. A doc-ument D is first segmented into a list of sen-tences. Each sentence S i , after being segmented into EDUs (not shown in the figure), goes through an intra-sentential bottom-up tree-building model M intra , to form a sentence-level discourse tree T S i , with the EDUs as leaf nodes. After that, we ap-ply the intra-sentential post-editing model P intra to modify the generated tree T S upper-level information.

We then combine all sentence-level discourse tree T p tree-building model M multi to generate the text-level discourse tree T D . Similar to sentence-level parsing, we also post-edit T D using P multi to pro-duce the final discourse tree T p For both intra-and multi-sentential parsing, our bottom-up tree-building process adopts a similar greedy pipeline framework like the HILDA dis-course parser (discussed in Section 2.1), to guar-antee efficiency for large documents. In partic-ular, starting from the constituents on the bot-tom level (EDUs for intra-sentential parsing and sentence-level discourse trees for multi-sentential parsing), at each step of the tree-building, we greedily merge a pair of adjacent discourse con-stituents such that the merged constituent has the highest probability as predicted by our structure model. The relation model is then applied to as-sign the relation to the new constituent. 4.1 Linear-chain CRFs as Local models Now we describe the local models we use to make decisions for a given pair of adjacent discourse constituents in the bottom-up tree-building. There are two dimensions for our local models: (1) scope of the model: intra-or multi-sentential, and (2) purpose of the model: for determining structures
While our bottom-up tree-building shares the greedy framework with HILDA, unlike HILDA, our local models are implemented using CRFs. In this way, we are able to take into account the sequential information from contextual discourse constituents, which cannot be naturally repre-sented in HILDA with SVMs as local classifiers. Therefore, our model incorporates the strengths of both HILDA and Joty et al. X  X  model, i.e., the efficiency of a greedy parsing algorithm, and the ability to incorporate sequential information with CRFs.

As shown by Feng and Hirst (2012), for a pair of discourse constituents of interest, the sequential information from contextual constituents is cru-cial for determining structures. Therefore, it is well motivated to use Conditional Random Fields (CRFs) (Lafferty et al., 2001), which is a discrimi-native probabilistic graphical model, to make pre-dictions for a sequence of constituents surround-ing the pair of interest.

In this sense, our local models appear similar to Joty et al. X  X  non-greedy parsing models. How-ever, the major distinction between our models and theirs is that we do not jointly model the struc-ture and the relation; rather, we use two linear-multi-sentential post-editing models. chain CRFs to model the structure and the relation separately. Although joint modeling has shown to be effective in various NLP and computer vision applications (Sutton et al., 2007; Yang et al., 2009; Wojek and Schiele, 2008), our choice of using two separate models is for the following reasons:
First, it is not entirely appropriate to model the structure and the relation at the same time. For example, with respect to Figure 2, it is unclear how the relation node R j is represented for a train-ing instance whose structure node S j = 0, i.e., the units U j  X  1 and U j are disjoint. Assume a special relation NO-REL is assigned for R j . Then, in the tree-building process, we will have to deal with the situations where the joint model yields conflicting predictions: it is possible that the model predicts S j = 1 and R j = NO-REL, or vice versa, and we will have to decide which node to trust (and thus in some sense, the structure and the relation is no longer jointly modeled).

Secondly, as a joint model, it is mandatory to use a dynamic CRF, for which exact inference is usually intractable or slow. In contrast, for linear-chain CRFs, efficient algorithms and implementa-tions for exact inference exist. 4.2 Structure models 4.2.1 Intra-sentential structure model Figure 4a shows our intra-sentential structure model M struct intra in the form of a linear-chain CRF. Similar to Joty et al. X  X  intra-sentential model, the first layer of the chain is composed of discourse constituents U j  X  X , and the second layer is com-posed of binary nodes S j  X  X  to indicate the proba-bility of merging adjacent discourse constituents.
At each step in the bottom-up tree-building pro-cess, we generate a single sequence E , consisting of U 1 , U 2 ,..., U j ,..., U t , which are all the current discourse constituents in the sentence that need to be processed. For instance, initially, we have the sequence E 1 = { e 1 , e 2 ,..., e m } , which are the EDUs of the sentence; after merging e 1 and e 2 on the second level, we have E 2 = { e 1:2 , e 3 ,..., e m } ; after merging e 4 and e 5 on the third level, we have E 3 = { e 1:2 , e 3 , e 4:5 ,..., e m } , and so on.
Because the structure model is the first com-ponent in our pipeline of local models, its accu-racy is crucial. Therefore, to improve its accuracy, we enforce additional commonsense constraints in its Viterbi decoding. In particular, we disallow 1-1 transitions between adjacent labels (a discourse unit can be merged with at most one adjacent unit), and we disallow all-zero sequences (at least one pair must be merged).

Since the computation of E i does not depend on a particular pair of constituents, we can use the same sequence E i to compute structural probabili-ties for all adjacent constituents. In contrast, Joty et al. X  X  computation of intra-sentential sequences depends on the particular pair of constituents: the sequence is composed of the pair in question, with other EDUs in the sentence, even if those EDUs have already been merged. Thus, different CRF chains have to be formed for different pairs of con-stituents. In addition to efficiency, our use of a single CRF chain for all constituents can better capture the sequential dependencies among con-text, by taking into account the information from partially built discourse constituents, rather than bottom-level EDUs only. 4.2.2 Multi-sentential structure model For multi-sentential parsing, where the smallest discourse units are single sentences, as argued by Joty et al. (2013), it is not feasible to use a long chain to represent all constituents, due to the fact that it takes O ( TM 2 ) time to perform the forward-backward exact inference on a chain with T units and an output vocabulary size of M , thus the over-all complexity for all possible sequences in their model is O ( M 2 n 3 ) 2 .

Instead, we choose to take a sliding-window approach to form CRF chains for a particular pair of constituents, as shown in Figure 4b. For exam-ple, suppose we wish to compute the structural probability for the pair U j  X  1 and U j , we form three chains, each of which contains two contextual C t , 1  X  t  X  3, with the highest joint probability over the entire sequence, and assign its marginal probability P ( S t j = 1 ) to P ( S j = 1 ) . additional constraints in the Viterbi decoding, by disallowing transitions between two ones, and dis-allowing the sequence to be all zeros if it contains all the remaining constituents in the document. 4.3 Relation models 4.3.1 Intra-sentential relation model described in Section 4.2.1. The linear-chain CRF contains a first layer of all discourse constituents U  X  X  in the sentence on level i , and a second layer of relation nodes R j  X  X  to represent the relation be-tween a pair of discourse constituents.

However, unlike the structure model, adjacent relation nodes do not share discourse constituents on the first layer. Rather, each relation node R j attempts to model the relation of one single con-stituent U j , by taking U j  X  X  left and right subtrees U j , L and U j , R as its first-layer nodes; if U j is a sin-gle EDU, then the first-layer node of R j is simply U , and R j is a special relation symbol LEAF 3 . Since we know, a priori, that the constituents in the chains are either leaf nodes or the ones that have been merged by our structure model, we never need to worry about the NO-REL issue as out-lined in Section 4.1.

In the bottom-up tree-building process, after merging a pair of adjacent constituents using intra into a new constituent, say U j , we form a chain consisting of all current constituents in the sentence to decide the relation label for U j , i.e., the R j node in the chain. In fact, by perform-ing inference on this chain, we produce predic-tions not only for R j , but also for all other R nodes in the chain, which correspond to all other con-stituents in the sentence. Since those non-leaf con-stituents are already labeled in previous steps in the tree-building, we can now re-assign their rela-tions if the model predicts differently in this step. Therefore, this re-labeling procedure can compen-sate for the loss of accuracy caused by our greedy bottom-up strategy to some extent. 4.3.2 Multi-sentential relation model Figure 5b shows our multi-sentential relation model. Like M rel intra , the first layer consists of adja-cent discourse units, and the relation nodes on the second layer model the relation of each constituent separately.
 predict labels for constituents in a local context. For a constituent U j to be predicted, we form three chains, and use the chain with the highest joint probability to assign or re-assign relations to con-stituents in that chain. After an intra-or multi-sentential discourse tree is fully built, we perform a post-editing to con-sider possible modifications to the current tree, by considering useful information from the discourse constituents on upper levels, which is unavailable in the bottom-up tree-building process.

The motivation for post-editing is that, some particular discourse relations, such as T EXTUAL -O
RGANIZATION , tend to occur on the top levels of the discourse tree; thus, information such as the depth of the discourse constituent can be quite in-dicative. However, the exact depth of a discourse constituent is usually unknown in the bottom-up tree-building process; therefore, it might be ben-eficial to modify the tree by including top-down information after the tree is fully built.

The process of post-editing is shown in Algo-rithm 1. For each input discourse tree T , which is already fully built by bottom-up tree-building models, we do the following: Lines 3  X  9: Identify the lowest level of T on which the constituents can be modified according to the post-editing structure component, P struct . To do so, we maintain a list L to store the discourse constituents that need to be examined. Initially, L consists of all the bottom-level constituents in T . At each step of the loop, we consider merging the pair of adjacent units in L with the highest proba-bility predicted by P struct . If the predicted pair is not merged in the original tree T , then a possible modification is located; otherwise, we merge the pair, and proceed to the next iteration.
 Lines 10  X  12: If modifications have been pro-posed in the previous step, we build a new tree Algorithm 1 Post-editing algorithm.
 Input: A fully built discourse tree T . 1: if | T | = 1 then 2: return T . Do nothing if it is a single 3: L  X  [ U 1 , U 2 ,..., U t ] . The bottom-level 4: while | L | &gt; 2 do 6: p  X  P ARENT ( L [ i ] , L [ i + 1 ] , T ) 7: if p = NULL then 8: break 9: Replace L [ i ] and L [ i + 1 ] with p 10: if | L | = 2 then 11: L  X  [ U 1 , U 2 ,..., U t ] as the relation model, from the constituents on is built from the bottom-level constituents of T . The upper-level information, such as the depth of a discourse constituent, is derived from the initial tree T . 5.1 Local models is almost identical to their counterparts of the bottom-up tree-building, except that the linear-chain CRFs in post-editing includes additional features to represent information from constituents on higher levels (to be introduced in Section 7). Here we analyze the time complexity of each com-ponent in our discourse parser, to quantitatively demonstrate the time efficiency of our model. The following analysis is focused on the bottom-up tree-building process, but a similar analysis can be carried out for the post-editing process. Since the number of operations in the post-editing process is roughly the same (1.5 times in the worst case) as in the bottom-up tree-building, post-editing shares the same complexity as the tree-building. 6.1 Intra-sentential parsing Suppose the input document is segmented into n sentences, and each sentence S k contains m k EDUs. For each sentence S k with m k EDUs, the overall time complexity to perform intra-sentential parsing is O ( m 2 level i of the bottom-up tree-building, we generate a single chain to represent the structure or relation for all the m k  X  i constituents that are currently in the sentence. The time complexity for performing forward-backward inference on the single chain is O (( m k  X  i )  X  M 2 ) = O ( m k  X  i ) , where the constant M is the size of the output vocabulary. Starting from the EDUs on the bottom level, we need to perform inference for one chain on each level dur-ing the bottom-up tree-building, and thus the total time complexity is  X  m k
The total time to generate sentence-level dis-course trees for n sentences is  X  n fairly safe to assume that each m k is a constant, in the sense that m k is independent of the total number of sentences in the document. There-in the total number of sentences. 6.2 Multi-sentential parsing shown in Figures 4b and 5b, for a pair of con-stituents of interest, we generate multiple chains to predict the structure or the relation.

By including a constant number k of discourse units in each chain, and considering a constant number l of such chains for computing each ad-jacent pair of discourse constituents ( k = 4 for overall time complexity of O ( n ) . The reason is that it takes l  X  O ( kM 2 ) = O ( 1 ) time, where l , k , M are all constants, to perform exact inference for a given pair of adjacent constituents, and we need to perform such computation for all n  X  1 pairs of adjacent sentences on the first level of the tree-building. Adopting a greedy approach, on an ar-bitrary level during the tree-building, once we de-cide to merge a certain pair of constituents, say U j and U j + 1 , we only need to recompute a small number of chains, i.e., the chains which originally include U j or U j + 1 , and inference on each chain takes O ( 1 ) . Therefore, the total time complexity is ( n  X  1 )  X  O ( 1 )+( n  X  1 )  X  O ( 1 ) = O ( n ) , where the first term in the summation is the complexity of computing all chains on the bottom level, and the second term is the complexity of computing the constant number of chains on higher levels.
We have thus showed that the time complexity is linear in n , which is the number of sentences in the document. In fact, under the assumption that the number of EDUs in each sentence is indepen-dent of n , it can be shown that the time complexity In our local models, to encode two adjacent units, U j and U j + 1 , within a CRF chain, we use the fol-lowing 10 sets of features, some of which are mod-ified from Joty et al. X  X  model.
 Organization features: Whether U j (or U j + 1 ) is the first (or last) constituent in the sentence (for intra-sentential models) or in the document (for multi-sentential models); whether U j (or U j + 1 ) is a bottom-level constituent.
 Textual structure features: Whether U j con-tains more sentences (or paragraphs) than U j + 1 . N-gram features: The beginning (or end) lexi-cal n -grams in each unit; the beginning (or end) POS n -grams in each unit, where n  X  X  1 , 2 , 3 } . Dominance features: The PoS tags of the head node and the attachment node; the lexical heads of the head node and the attachment node; the domi-nance relationship between the two units.
 Contextual features: The feature vector of the previous and the next constituent in the chain. Substructure features: The root node of the left and right discourse subtrees of each unit.
 Syntactic features: whether each unit corre-sponds to a single syntactic subtree, and if so, the top PoS tag of the subtree; the distance of each unit to their lowest common ancestor in the syntax tree (intra-sentential only).
 Entity transition features: The type and the number of entity transitions across the two units. We adopt Barzilay and Lapata (2008) X  X  entity-based local coherence model to represent a doc-ument by an entity grid, and extract local transi-tions among entities in continuous discourse con-stituents. We use bigram and trigram transitions with syntactic roles attached to each entity. Cue phrase features: Whether a cue phrase oc-curs in the first or last EDU of each unit. The cue phrase list is based on the connectives collected by Knott and Dale (1994) Post-editing features: The depth of each unit in the initial tree. For pre-processing, we use the Stanford CoreNLP (Klein and Manning, 2003; de Marneffe et al., 2006; Recasens et al., 2013) to syntactically parse the texts and extract coreference relations, and we tract dominance features.

For local models, our structure models are trained using MALLET (McCallum, 2002) to in-clude constraints over transitions between adja-cent labels, and our relation models are trained using CRFSuite (Okazaki, 2007), which is a fast implementation of linear-chain CRFs.

The data that we use to develop and evaluate our discourse parser is the RST Discourse Tree-bank (RST-DT) (Carlson et al., 2001), which is a large corpus annotated in the framework of RST. The RST-DT consists of 385 documents (347 for training and 38 for testing) from the Wall Street Journal . Following previous work on the RST-DT (Hernault et al., 2010; Feng and Hirst, 2012; Joty et al., 2012; Joty et al., 2013), we use 18 coarse-grained relation classes, and with nuclearity at-tached, we have a total set of 41 distinct relations. Non-binary relations are converted into a cascade of right-branching binary relations. 9.1 Parsing accuracy We compare four different models using manual EDU segmentation. In Table 1, the j CRF model in the first row is the optimal CRF model proposed by Joty et al. (2013). g SVM FH in the second row is our implementation of HILDA X  X  greedy parsing algorithm using Feng and Hirst (2012) X  X  enhanced feature set. The third model, g CRF, represents our greedy CRF-based discourse parser, and the last row, g CRF PE , represents our parser with the post-editing component included.
 In order to conduct a direct comparison with Joty et al. X  X  model, we use the same set of eval-Model Span Nuc Relation j CRF 82.5 68.4 55.7 N/A g SVM FH 82.8 67.1 52.0 27.4/23.3
Human 88.7 77.7 65.8 N/A  X  : significantly better than g SVM FH ( p &lt; . 01)  X : significantly better than g CRF ( p &lt; . 01) Table 1: Performance of different models using gold-standard EDU segmentation, evaluated us-ing the constituent accuracy (%) for span, nucle-arity, and relation. For relation, we also report the macro-averaged F1-score (MAFS) for correctly retrieved constituents (before the slash) and for all constituents (after the slash). Statistical sig-nificance is verified using Wilcoxon X  X  signed-rank test. uation metrics, i.e., the unlabeled and labeled pre-(2000). For evaluating relations, since there is a skewed distribution of different relation types in the corpus, we also include the macro-averaged size the performance of infrequent relation types. We report the MAFS separately for the correctly retrieved constituents (i.e., the span boundary is correct) and all constituents in the reference tree.
As demonstrated by Table 1, our greedy CRF models perform significantly better than the other two models. Since we do not have the actual out-put of Joty et al. X  X  model, we are unable to con-duct significance testing between our models and theirs. But in terms of overall accuracy, our g CRF model outperforms their model by 1.5%. More-over, with post-editing enabled, g CRF PE signif-icantly ( p &lt; . 01) outperforms our initial model g CRF by another 1% in relation assignment, and this overall accuracy of 58.2% is close to 90% of human performance. With respect to the macro-averaged F1-scores, adding the post-editing com-ponent also obtains about 1% improvement.

However, the overall MAFS is still at the lower # of EDUs 61.74 4 304 # of Sentences 26.11 2 187 # of EDUs per sentence 2.36 1 10 Table 2: Characteristics of the 38 documents in the test data. end of 30% for all constituents. Our error anal-ysis shows that, for two relation classes, T OPIC -C model fails to retrieve any instance, and for T scores a class-wise F 1 score lower than 5%. These four relation classes, apart from their infrequency in the corpus, are more abstractly defined, and thus are particularly challenging. 9.2 Parsing efficiency We further illustrate the efficiency of our parser by demonstrating the time consumption of different models.

First, as shown in Table 2, the average number of sentences in a document is 26.11, which is al-ready too large for optimal parsing models, e.g., the CKY-like parsing algorithm in j CRF, let alone the fact that the largest document contains sev-eral hundred of EDUs and sentences. Therefore, it should be seen that non-optimal models are re-quired in most cases.
 last three models, since we do not know the time of j CRF. Note that the parsing time excludes the time cost for any necessary pre-processing. As can be seen, our g CRF model is considerably faster than g SVM FH , because, on one hand, feature compu-tation is expensive in g SVM FH , since g SVM FH utilizes a rich set of features; on the other hand, in g CRF, we are able to accelerate decoding by multi-threading MALLET (we use four threads). Even for the largest document with 187 sentences, g CRF is able to produce the final tree after about 40 seconds, while j CRF would take over 16 hours assuming each DCRF decoding takes only 0.01 second. Although enabling post-editing doubles the time consumption, the overall time is still ac-ceptable in practice, and the loss of efficiency can be compensated by the improvement in accuracy. Table 3: The parsing time (in seconds) for the 38 documents in the test set of RST-DT. Time cost of any pre-processing is excluded from the analysis. In this paper, we presented an efficient text-level discourse parser with time complexity linear in the total number of sentences in the document. Our approach was to adopt a greedy bottom-up tree-building, with two linear-chain CRFs as local probabilistic models, and enforce reason-able constraints in the first CRF X  X  Viterbi decod-ing. While significantly outperforming the state-of-the-art model by Joty et al. (2013), our parser is much faster in practice. In addition, we pro-pose a novel idea of post-editing, which modifies a fully-built discourse tree by considering informa-tion from upper-level constituents. We show that, although doubling the time consumption, post-editing can further boost the parsing performance to close to 90% of human performance.

In future work, we wish to further explore the idea of post-editing, since currently we use only the depth of the subtrees as upper-level informa-tion. Moreover, we wish to study whether we can incorporate constraints into the relation models, as we do to the structure models. For example, it might be helpful to train the relation models us-ing additional criteria, such as Generalized Ex-pectation (Mann and McCallum, 2008), to better take into account some prior knowledge about the relations. Last but not least, as reflected by the low MAFS in our experiments, some particularly difficult relation types might need specifically de-signed features for better recognition.
 We thank Professor Gerald Penn and the review-ers for their valuable advice and comments. This work was financially supported by the Natural Sciences and Engineering Research Council of Canada and by the University of Toronto.
