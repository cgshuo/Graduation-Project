 1. Introduction
Genetic algorithms (GAs) ( Goldberg, 1989 ) have received much attention due to their capability of attaining the global optimum in problems with complicated solution spaces. For example, they have been successfully applied in structural opti-misation problems where the design space is non-convex and disjointed ( Hajela, 1990 ). These optimisation algorithms have further been shown to have superior capabilities in attaining a global solution to design problems with discontinuous variables, such as integer variables and discrete variables ( Yuping and
McPhee, 2003 ). The overall robustness of the GA has therefore resulted in successful applications across the engineering spec-trum, for example, Jensson et al. (2005) , Roth and Patel (2004) and Fonseca and Salinas ( 2004) .

Experimental studies have shown that GAs exhibit impressive efficiency in practice, consistently outperforming gradient tech-niques and various kinds of random search methods ( Clayton and
Martinez-Botas, 2004 ; Sellami and Karray, 2000 ; Zhang and Li, 1996 ). It has been reported, however, that the GA is sometimes not so effective compared to alternative evolutionary computa-tion (EC) methods ( Baeck et al., 1997 ; Nagao et al., 1993 ). In GA based parameter optimisation, the effectiveness of the GA opera-tors is deeply influenced by the encoding method used for the individual chromosome. Choosing a good representation of a chromosome is vital for solving any GA search problem ( Whitley et al., 1997 ). It is therefore necessary to encode ade-quately a solution to the objective task in order to achieve an effective search. In a previous paper ( Sharma and Irwin, 2003 )it was shown that fuzzy coding, with a suitable combination of membership functions, was able to produce a better solution than alternative conventional binary, Gray and floating-point encoding methods. However, if the search space is highly complicated and large, the GA takes more time to converge to an optimum solution. This is due to the fact that the range of each variable is pre-selected and kept fixed for all the chromosomes. At each evaluation the GA with fuzzy coding is then required to find the solution from a larger search space than is necessary. Since the optimum range for any variable is unknown initially, a rough estimate of a wide range is usually assigned, which further complicates the search process.
 solutions when combined with fuzzy logic. Song et al. (1997) proposed a fuzzy logic controlled genetic algorithm (FCGA) for adapting the crossover and mutation probabilities respectively on the basis of an average fitness value between two consecutive generations and showed improved performance compared to a conventional GA and the Newton X  X aphson method while dealing with an environmental/economic dispatch problem. Li et al. (2001) improved this algorithm, where the information of both the whole generation and particular individuals is used for controlling crossover and mutation probabilities. A fuzzy genetic algorithm using population diversity measurements designed by
Wang (2001) showed that premature convergence can be avoided by this method. King et al. (2004) applied a fuzzy controlled real-coded genetic algorithm to solve an electrical distribution net-work reconfiguration problem. The objective was to find a radial operating structure to minimise the system power loss while satisfying operating constraints. The FCGA found the global optimum and had faster convergence than a GA using fixed crossover and mutation rates, or using fixed crossover and adaptive mutation rates. Lotfi and Kashani (2004) tackled the problem of optimising the bandwidth of the E-shaped microstrip antenna using GAs with fuzzy logic and the results showed that an increase in the bandwidth of 33.3% was obtained. Liu et al. (2005) developed a hybrid fuzzy genetic algorithm (HFGA) and an improved fuzzy genetic algorithm (IFGA) ( Li et al., 2006 ), in which the average fitness value and the best fitness value of each generation are adopted for dynamically tuning the crossover and mutation probabilities. Results show that dynamically adjust-ing the crossover and mutation rates a GA can outperform the other search methods in the item-location assignment problem ( Lau et al., 2008 ). Recently, a novel fuzzy adaptive genetic algorithm (FAGA) based on fuzzy clustering and adaptation policy crossover and mutation probability has been proposed to deal with the deception of multiple local optima and maintaining the diversity of the population ( Liqun et al., 2010 ).

From the above work, it is known that superior solutions of various problems can be acquired by combining a GA with fuzzy logic. In this paper a new method of combining fuzzy logic with a
GA is presented where each variable representing the solution space is fuzzy coded and then adopted with a dynamic range to produce faster and better convergence. The new algorithm named fuzzy coding with a dynamic range (FCDR) is then compared with fuzzy coding ( Sharma and Irwin, 2003 ) and other methods using conventional coding alternatives. In FCDR, the range for each variable is not fixed in each chromosome but is dynamically adjusted to cover the whole search space. The search near to the best set of solutions is intensified without totally excluding the other regions. This new GA algorithm searches within a neighbour-hood of current points and provides global sampling rather than a point-to-point movement. It thus differs from other random search methods, which follow a  X  X  X reep X  X  procedure similar to simulated annealing ( Kirkpatrick et al., 1983 ). FDCR effectively explores alternative search regions and leaves the current point if a better one is found elsewhere in the search space.

Some of the adaptive search mechanisms in conventional coding, like maintaining diversity in the population ( Karthikeyan et al., 2003 ), selecting an adaptive range for the GA and preserving the best solution ( Gantovnik et al., 2002 ; Arakawa and Ishikawa, 2002 ) and iteratively refining the search space through bisection ( Sakawa and Yauchi, 2000 ) have been incorporated in the work reported herein.

The new algorithm is first applied to benchmark optimisation test problems and shown to provide improvements over fuzzy coding with a fixed range. It is then evaluated against other search algorithms on test problems having multi-parameter non-linear objective functions. Finally, the more challenging application to neural modelling of a pH neutralisation process from experimen-tal laboratory data was examined to validate its efficiency.
Section 2 briefly describes the original fuzzy coding concepts, before the new FCDR algorithm is introduced in Section 3 . Whilst
Section 4 presents results to demonstrate the effectiveness of the proposed approach on benchmark test problems. Section 5 compares the performance of the proposed algorithm on a real application, which involves neural modelling of a pH neutralisa-tion process. The final section contains concluding remarks. 2. Fuzzy coding
Fuzzy coding is an indirect method of encoding a real para-meter; a parameter is selected from appropriate fuzzy sets depending upon its contribution within a problem domain. It has been shown previously that this type of encoding can provide increased convergence speed and better accuracy in the final solution ( Sharma and Irwin, 2003 ).
 Suppose each parameter has five associated fuzzy sets NM, NS, ZR, PS and PM. The corresponding degrees of membership NM ( x ), degrees of firing ( m ). Three types of membership functions, fuzzy sigmoid ( FS ), fuzzy Gaussian ( FG ) and fuzzy normal ( FN ), within the desired range ( L , U ) of a parameter value are used to represent these five fuzzy sets as shown in Fig. 1 , where d  X  ( U L )/5 is the length of each membership function. The selection of the membership functions to use for a particular parameter depends upon the nature of its contribution in a given problem. For example, in the construction of a fully connected neural network structure apriori known linear relationship between input and output can be selected from the FN distribution and similarly in a multi-layer perceptron (MLP) neural network the weights between input and hidden layer with sigmoidal activation function can be obtained by a FS distribution of fuzzy coding. A detailed analysis of this issue can be found in Sharma and Irwin (2003) .

Instead of providing a real value of a parameter the GA selects the optimum number of fuzzy sets and the m associated with the chosen shape of membership funct ion. Each chromosome parameter then takes a value between L and U , depending upon the type of membership function, the fuzzy sets selected and the corresponding m values. This is best illustrated in a simple example. Example. Suppose a GA selects three fuzzy sets NM, ZR and PS with degrees of membership m NM , m ZR and m PS for a parameter from the fuzzy normal membership functions. The values L NM and L PS produced from these linear membership functions are as shown in Fig. 2 . Using weighted-mean defuzzification, the value corresponding to this parameter is then given by
Similarly, the other parameters in a chromosome produce crisp values depending upon the fuzzy sets selected by the GA, the degree of membership m and the type of membership function.
The GA now optimises m and the number of fuzzy sets, while the actual parameter value of interest is obtained through defuzzification. Thus, every parameter can easily have different ranges by proper choice of the L and U values.

In fuzzy coding, the L and U values of a parameter are fixed throughout the genetic evaluation. Fuzzy coding with a static range works well in a known or simple search region and provides increased convergence speed and better accuracy in the final solution compared to many conventional coding methods ( Sharma and Irwin, 2003 ). While large values of L and U will certainly include the whole search space for an unknown problem domain, the fuzzy coding will take more time to converge to an optimal point and an improper selection may, in fact, omit the optimum parameter value. Dynamic adjustment of L and U is therefore needed during genetic evolution. The new FCDR algo-rithm described next is an improved version of fuzzy coding where range of a parameter is dynamically varied to find the global optimum solution in a faster and more efficient manner and is shown to have an improved results compare to fuzzy coding with a static range. 3. Fuzzy coding with dynamic range (FCDR)
This algorithm is founded on the assumption that optimal solutions can be identified by focusing the search around sets of good solutions. It has been observed in the literature that an optimally directed search could be obtained by carefully sampling the search space without using any special operators ( Raphael and Smith, 2003a ). The principal assumption is that better points are likely to be found in the neighbourhood of families of good ones. Hence the search is intensified in regions containing good solutions and then the entire search space is sampled to find other good solutions. In place of static parameter ranges in the chromosomes, dynamic ranges are assigned by dividing up the whole search space with reference to a good set of solutions. The ranges for each parameter are dynamically updated as the search progresses so that sets of points are generated with higher probabilities in regions containing good solutions. The search space is also gradually narrowed down so that convergence is achieved. The following sections explain the FCDR algorithm in more detail. 3.1. Algorithmic details value of each parameter, which forms the original lower and upper boundaries respectively of the FCDR. An initial high guess for minimum and maximum values can be chosen for a parameter whose range is not known in advance. In this application a steady-state GA ( Michalewics, 1996 ) is applied to a population of 40 chromosomes. For each successive generation the two best chromosomes in the population are retained, producing offspring to replace the two worst chromosomes. At every generation, the chromosomes are evaluated and ranked and the value of the parameters obtained from the best chromosome acts as a refer-ence point in the search space. The flow chart of the algorithms is shown in Fig. 3 . Here fuzzy coding, within the defined fixed range, is initially run for a certain number of generations, say 1000. This helps in placing the reference points in a better place within the whole search space, before applying the FCDR.
 equal parts , as shown in Fig. 4 . Part I distributes the chromosomes within a given lower ( L ) and upper boundary ( U ) with respect to the reference point and thus provides a global search, whereas
Part IV is responsible for a local search. Parts II and III help to refine parameters in the, respective, lower and upper range regions with respect to the reference point.
 d
The algorithm then progresses through the four stages as shown in the flow chart ( Fig. 3 ), dynamically allocating the ranges of the parameters of the chromosomes divided into different parts .
The algorithm stops on reaching some pre-specified criterion such as mean-square-error, arriving at a known global optimal solution or when a certain number of generations have been achieved. The best chromosome at the final generation represents the best set of parameters obtained through FCDR.

Fig. 5 explains these distributions in the case of two parameter vectors W 1 and W 2 having ( W n 1 , W n 2 ) as a reference point in the search space. Here Part I in Fig. 5 (a), searches the whole region whereas the Part IV search is concentrated around the reference point. Fig. 5 (b) shows that W 1 and W 2 can take any value in the upper ranges while Fig. 5 (c) illustrates similar refinement of parameters with respect to the reference point in the lower ranges. The arrangement shown in Figs. 5 (b) and (c) helps para-meters to move faster in either the lower or upper directions.
The effects of this will be shown in the benchmark examples considered later in the paper. The values of the parameters from the best chromosome represent the reference point W n  X  X  W , 2 , ... , W n m in the search space. Here  X  W n 1 , W n 2 chromosome values of parameters  X  W 1 , W 2 , ... , W m in a genetic evaluation.

The ranges for parameters in chromosomes from the reference point to the lower and upper limits are exponentially distributed in such a way as to increase the probabilities of finding a solution in the region containing a good set of solutions, without loosing the diversity of the whole search space defined by the original lower and upper boundaries of each parameter.

Here each chromosome is evaluated by the user-defined objective function and the one representing the best set of parameters is selected. The single-dimensional search space of each parameter is now divided into two parts (upper and lower portion) with respect to its reference point. At each generation, the upper and the lower portion of each parameter in chromo-somes ( Fig. 4 ) are then subdivided into several upper ( R , i  X  1,2, ) and the lower ( L i , i  X  1,2, ) limits, respectively.
The exponential distribution of lower ( L i , i  X  1,2, ) and upper limits ( R i , i  X  1,2, ) for chromosomes in each Part I , II , III and Part IV are calculated in the following manner: from its reference point W * is defined as
L n  X  qe a n  X  r  X  2  X  where q and r are constant parameters and calculated as follows: q  X   X  L w W n  X  the total number of chromosomes in each part of the FCDR and L is the corresponding lower limit. Similarly, the upper limit of a parameter in n th chromosome is given by R n  X  se a n  X  t  X  3  X  s  X   X  R w W n  X  consideration ( Fig. 4 ).
 chromosome in each part as defined by Eqs. (2) and (3) for a parameter W with respect to its reference point W n . The search range for the parameter W in first chromosome will be [ L [ L 2 , R 2 ] for the second chromosome and so on. Thus all chromo-somes will be assigned different ranges for a particular parameter depending upon the position of the reference point in a given generation. Other parameter ranges in the chromosomes are similarly assigned with respect to their respective reference points in the search space. The reference point changes as the generation progress and hence the ranges for each chromosome are dynamically updated.

The value of a decides the exploitation and exploration in each part of the genetic population. Fig. 7 shows the variation of the curve defined in Eqs. (2) and (3) with three values of a with 10 chromosomes considered in each part of the genetic population.
This indicates that, for an increasing value of a , more chromo-somes will be confined to the search region near to a reference point rather than being globally distributed across the whole search region. A compromise between a better solution and diversity are thus required in the selection of a . In Eqs. (2) and (3), L 1  X  W *  X  R 1 holds true for the first chromosome and thus has a range with zero width which is not desirable. However, assign-ing some fixed unknown range for the first chromosome will restrict the algorithms to obtain a finer resolution in the search space and to arrive at an optimal solution faster. A mechanism to keep more chromosomes near to the reference point for preser-ving the best solution obtained so far is thus needed. A value of a  X  0.3 was therefore chosen here such that 50% of the chromosomes in each part of a population of 40 chromosomes ( Fig. 4 ) search 20% of the region near to a reference point. The remaining chromosomes explore 80% of the search region ( Fig. 7 ). This creates a population that is biased toward a good solution but with sufficient diversity to sustain a further search.
At each genetic evaluation, the FCDR algorithms progresses through the four stages as follows. 3.2. First stage At this stage, the parameter ranges of the chromosomes in Part I ( Fig. 4 ) have lower limits between a reference point say W * and L , the original lower boundary of the parameter. Similarly the upper limits on the ranges are exponentially distributed between W * and original upper boundary U . Here L w  X  L is the lower limit and U w  X  U is the corresponding upper limit and Eqs. (2) and (3) are used to exponentially allocate the ranges of a parameter. The limits of all the other parameters in the chromosomes of Part I are similarly distributed with respect to their reference points. ,W ) Lower Range Upper Ran g e Upper Range W 3.3. Second stage
At this stage the single-dimensional search space covers the space towards the upper boundary of a parameter. This arrange-ment provides a more intensive search on upper sides of the reference point. The chromosomes of Part II of the population shown in Fig. 4 are correspondingly adjusted to search within the upper interval away from the reference point. The lower limits of the parameter ranges of the chromosomes in Part II are now exponentially distributed between W * and L new in place of L , where the lower limit L w  X  L new is defined as
L new  X  L  X  0 : 8  X  W n L  X  X  4  X 
Since ( W * L ) is the lower range, adding 0.8( W * L )to L moves its within 20% of the lower region containing the reference point
W * . This approach brings the L new nearer to the reference point W * and exploration is now mostly confined to the search space towards the upper boundary ( Fig. 4 ). 3.4. Third stage
At this stage, chromosomes in Part III are adjusted to search within the lower interval providing more intensive search on lower sides of the reference point ( Fig. 4 ). In a similar way as explained in stage 2, the ranges of the parameters for the chromosomes in Part III have their upper limits between W * and
U new , where the upper limit U w  X  U new is
U new  X  U 0 : 8  X  U W n  X  X  5  X 
Again, as ( U W * ) is the upper range, subtracting U with 0.8( U W * ) brings the U new value within 20% of the upper region near to the reference point W * . In this case the search space towards the lower boundary is explored more intensely.
This selection of sub-intervals in stages 2 and 3 increases the explorationinbothsearchdirectio ns with respect to a reference point and helps to achieve faster convergence. Multiplying factors between 0.7 and 0.9 works well in both cases and 0.8 was selected here. This type of arrangement always keeps the reference point within the search region and intensifies the search in a particular direction. 3.5. Fourth stage
In the final stage of the algorithm, the search is localised by narrowing down the lower and upper boundaries of the search domain. The lower and upper limits of the ranges for the parameters of the chromosomes in Part IV are thus exponentially assigned between the changed lower L w  X  L c and upper U w boundaries, respectively. The following criterion is used to assign the L c and U c values of a parameter: and s  X  W 1  X  denotes its standard deviation. The changed lower limit for this parameter will then be given by L w  X  L c  X  m  X  W and the new upper limit is U w  X  U c  X  m  X  W 1  X  X  3 s  X  W on the assumption that L c and U c will capture the deviation/variation of the population in the case of the normal distribution (see Fig. 8 ).
This arrangement will initiate a localised search to reflect the variation/deviation of the population at the beginning of the popula-tion. At a later stage of evaluation when there is less variation/ deviation in the population, this localised search will assist in fine local tuning by intensifying the exploration in the neighbourhood of reference points. Special care has to be taken at the boundaries of the search region as L c and U c may cross their original lower and upper boundaries. If L c o L ,then L c was assigned the L value, while for U c 4 U , U c was given the U value.
 a global optimum. The first permits a more uniform and exhaus-tive search over the entire space while the second stage and third stages refine the search in the neighbourhood of good solutions.
The exponential functions utilised here for assigning the limits of the ranges for the parameters of the chromosomes push the progressively narrowed search space towards the optimum point and provide better convergence. Intensive exploration is achieved by dividing the whole search space into intervals in the second and third stages. In the fourth stage, a localised search technique to capture variation/diversity of the population at the beginning of evaluation and providing convergence and fine local tuning at a later stage of evaluations were applied. This type of dynamic search process actively explores the whole search space, while preserving the best solution to date and also helps in fine local tuning. If any new reference point is found, the whole search space is rearranged with respect to it and the process continues until the global optimum solution is found. An individual search strategy is thus achieved for each parameter by dynamic alloca-tion of limits among the chromosomes to provide an effective and exhaustive search strategy. The next section gives the necessary details concerning the practical operation of the algorithm. range 4. Evaluation of fuzzy coding with dynamic range
The performance of the FCDR approach was first evaluated using several benchmark problems and the results compared using two sets of tests.

The three criteria as mentioned below were selected to judge the performance of the algorithm against similar criteria adopted for different optimisation techniques available in the literature: 1. Success Rate (SR): The number of trials in which the global optimum was found. 2. Mean Solution (MS): The average of the solutions obtained in each trial. 3. Mean Number of Evaluations (MEs): This is the average number of evaluations of the objective functions for the trial in which the optimum was found.

The algorithm was initially run for 1000 generations with fuzzy coding and then evaluated with the FCDR as shown in flow-chart ( Fig. 3 ). A steady-state GA ( Michalewics, 1996 ) with a population of 40 chromosomes and crossover P c  X  0.65 and mutation probability of P m  X  0.01 is applied. The FCDR was initially compared against the fuzzy coding with a static range, and the expected improvements were confirmed.

Tests on benchmark problems having multi-parameter, non-linear objective functions were conducted next with the FCDR method compared to other versions of genetic search: a simple genetic algorithm (ESGAT), a steady-state genetic algorithm (GENITOR) ( Syswerda, 1991 ), cross-generational elitist selection (CHC) ( Eshelman, 1991 ) and probabilistic global search lausanne (PGSL) ( Raphael and Smith, 2003b ) and the FCDR was shown to produce improvements over the existing methods. Because of the global nature of the benchmark problems, all the parameters in the FCDR were obtained using fuzzy sigmoid type membership functions in the fuzzy coding. 4.1. Test suite I Six benchmark optimisation problems GP, H3, H6, S5, S7 and S10 ( Schittkowski and Hock, 1981 ; Siarry and Berthiau, 1997 ;
Chelouah and Siarry, 2003 ) were considered, each function being a multimodal one with a large number of local maxima. The results are compared to the known analytical global maxima of each function. Table 1 summarises the properties of these test problems, where range decides the original lower and upper boundaries of each parameter in the FCDR. Table 2 provides a comparison with fuzzy coding using a static range. Since a genetic-based search is a stochastic process, thirty trial runs were performed for each problem using different seed values for the random numbers, with a maximum of 20,000 evaluations of the objective function allowed for each trial.

Table 2 shows that for each trial, the FCDR converged to a global maxima for all the functions and it did so more rapidly than using fuzzy coding with a static range. Although fuzzy coding with a static range arrived near to the global point for the S7 and S10 functions, it was unable to arrive at the analytical global maxima. This may be duetotheuseofafixedrangeandthelackoffacilitytoexplorein the neighbourhood of good solutions. The FCDR considerably improved the performance of the fuzzy coding. Dynamic adjustment of the search space, along with changes in the original boundary for some chromosomes helped in effective exploration of the search space. This is clearly visible in the exploration of a highly non-linear, complex search space as considered next. 4.2. Test suite II
De Jong (1975) first proposed common test functions (F1 X  X 5) with multiple optima to be used for evaluating genetic algorithms. However, it has been shown that a local search algorithm can in fact identify the global optima of some of these functions ( Davis, 1991 ). More challenging test functions were later published in Whiltley (1995) which have higher degrees of non-linearity than F1 X  X 5 and can also be scaled to a large number of variables. Some of these test functions, used to analyse the performance of FCDR, are now described:
F8 (Griewank X  X  function): This is a scalable, non-linear and non-separable function given by f  X  x
Expanded functions ( Whiltley, 1995 ): these are constructed by starting with a primitive non-linear function in two variables, F ( x , y ), and then scaling to multiple variables using the formula
The expanded functions are non-separable and introduce non-linear interactions across multiple variables. The EF10 function used in this paper was built using the primitive function F10
F 10  X  x , y  X  X  X  x 2  X  y 2  X  0 : 25  X  sin 2  X  50  X  x 2  X  y
Composite functions: a composite function can be formed from using the formula
The composite function EF avg was created from Griewank X  X  while EF F2 was formed from the same function using the De Jong function F2 as the transformation function F 2  X  x , y  X  X  100  X  x 2 y 2  X  X  X  1 y 2  X  X  10  X 
The composite functions are much harder to optimise than the primitive functions and are resistant to hill climbing ( Whiltley, 1995 ).

All these four test functions F8, EF10, EF avg and EF F2 have a known optimum (minimum) of zero. Whiltley (1995) showed that local search techniques perform poorly in solving these functions.
FCDR was compared with both fuzzy coding with static range and other alternative methods where 22 bit Gray coding was used to represent a parameter and whose results were reported in Raphael and Smith (2003b) and Whiltley (1995) . For EF10, all the variables lay in the range [ 100, 100] while the variable range was [ 512, 511] for the functions F8, EF avg and EF F2 .
 The results of these studies are illustrated in Tables 3 X 6 in
Appendix A. The algorithm was run for a maximum of 500,000 evaluations and the performance criteria of Section 4 were again used for comparison purposes. 4.2.1. Simple F8 test function The results for the simple F8 test function are given in Table 3 . Thirty trial runs were performed with 10, 20 and 50 variables.
FCDR had a success rate of 100% in every case compared to all the other methods and the mean number of evaluations required to obtain the optimum was also much smaller. 4.2.2. EF10 test function
Table 4 contains the results obtained with 10, 20 and 50 variables. Again the performance of FCDR is much better than the alternatives and it always converged to a global optimum. 4.2.3. EF avg test function optimum solution for 20 and 50 variables and that in all cases it performed better than the other methods. 4.2.4. EF F2 test function
None of the algorithms tested were able to find the global optimum but the mean solution for the FDCR was much nearer to the optimum solution of zero and outperformed the rest. algorithms for the composite function EF10. This showed that its performance did not degrade in higher dimensions while the performances of the other algorithms deteriorated more rapidly. the FCDR ( Fig. 4 ) and their combinations in these benchmark problems. The individual parts acting alone in the FCDR failed miserably in each case and their performance deteriorated rapidly as the number of variables increased. However, the combinations of Part I  X  IV and Part II  X  III  X  IV did scale well for the simple F8 test function and the EF10 function, but their success rate was poorer in the EF10 case. Apart from all the Parts (I  X  II  X  III  X  IV) considered together in FCDR, any individual or combination of parts performed badly, producing a lower success rate ( SR ) for a complex problems. This indicates the necessity for using all four parts ( Fig. 4 ) in the dynamic exploration of the highly complex search space.

To show the effectiveness of the FCDR in a real application, modelling of a highly non-linear pH neutralisation process is considered next. 5. Case study: neural modelling of a pH neutralisation process
In this part of the study, neural modelling of a highly non-linear pH neutralisation process was investigated. The non-linearity in the process can readily be seen from the variation in the static process gain between the input base flow rate and the pH output (i.e. the slope of the titration curve) shown in Fig. 10 .
The underlying physical model, consisting of three non-linear differential equations and a nonlinear output equation for pH, is described in Hall and Seborg (1989) . In this paper data gathered from the experimental pH neutralisation plant installed at the
University of California, Santa Barbara ( Hall and Seborg, 1989 ) was used to evaluate the GAs. Acid and buffer flow rates were kept constant at their nominal values, with the base flow rate manipulated to excite the plant dynamics across the operating range to generate separate training and test sets. Figs. 11 a and 12 a show the input base flow rates, while Figs. 11 b and 12 b illustrate the pH output data sets for training and testing, respectively.

Here a MLP type of neural network with one hidden layer, as shown in Fig. 13 , was used for pH plant modelling. The tanh function was used as an activation function for the hidden layer whereas the output was linear. Since the tanh function globally distributes the weight parameters in the search space ( Sharma and Irwin, 2003 ), the weight parameters w 1 ij between the input and the hidden layer were obtained from FS membership func-tions, while the weight parameters w 2 j between the hidden and the output layer were derived from FN membership functions in the fuzzy coding. The number of nodes in the input, hidden and
Base flow rate (ml/s) pH
Base flow rate (ml/s) pH u u pH pH pH output layers numbered 4, 6 and 1, respectively. The initial range for both weight parameters was [ 3, 3] which formed the original lower and upper boundaries in the FCDR.

The GA was averaged over 20 runs, each of 3000 generations with 1000 initial generations of fuzzy coding as shown in flow chart ( Fig. 3 ). An unseen data set was used to evaluate the best chromosome in each generation and the mean-square-error (MSE) in the pH value was recorded. Better performance of fuzzy coding was observed in Sharma and Irwin (2003) for the same case compared to other simple genetic and gradient descent methods. This performance of FCDR was evaluated with fuzzy coding and with a standard NN trained using the Levenberg X 
Marquardt method. Table 11 (see Appendix A ) compares the averaged performance of FCDR against fuzzy coding with a static range and a standard NN on both training and test data. The results showed that the FCDR outperformed in both cases with a better achievement in mean squared error (MSE) in pH and indicated similar trends as in Sections 4.1 and 4.2 and provided evidence to support the better performance to be expected from the FCDR in real applications. Fig. 14 a and b show actual and desired plots on training and test data using FCDR method,
Fig. 15 a and b for fuzzy coding and Fig. 16 a and b illustrate corresponding plots using a standard NN method. The results indicate that better generalisation were obtained using FCDR and fuzzy coding compared to a standard NN method and FCDR outperformed in all cases.
 In all the test cases considered above, it was found that the
FCDR, with a suitable combination of membership distributions, always produced better optimised parameters and was thus able to achieve a faster response than alternative methods currently available in the literature. 6. Concluding remarks
Fuzzy coding is an indirect search method and therefore more exhaustive exploration in the phenotype is possible without changing much in the genotype representation. It has been shown that a more effective search region is evolved in the phenotype by dynamically changing the search space of each parameter. Two sets of benchmark problems, along with neural network model-ling of an experimental pH neutralisation process, indicated that it performed well even when the objective functions are highly non-linear. Better results may be obtained with an increased number of fuzzy sets but seven proved sufficient in this work. The other methods mentioned earlier in Raphael and Smith (2003b) used 22 bit Gray coding, whereas an equivalent 14 bits were needed to represent a parameter with fuzzy coding. Further, in most of the benchmark problems, FCDR had a success rate (SR) of 100% and found mean solution (MS) in every case compared to all the other methods and the mean number of evaluations (MEs) required to obtain the optimum was also much smaller. The results also showed that performance of FCDR did not degrade in higher dimensions while the performances of the other algo-rithms deteriorated more rapidly. The algorithm thus converged faster than fuzzy coding with static parameter ranges and also faster than other reported direct methods. Fuzzy coding with dynamic ranges will thus be a valuable tool for searching for an optimum set of parameters in a highly complicated and non-linear search domain. It has uniformity and knowledge of para-metric representation from fuzzy coding ( Sharma and Irwin, 2003 ) and the genetic operators are independent of the actual value and can be applied to a wide range of problems. The only knowledge required is the type of the parameters and their ranges. FDCR also removes the ambiguity in selecting the optimal range of a variable. An initially high guess will take more search time for a potential solution by alternative methods while FDCR can dynamically adjust the range, thus achieving faster conver-gence. On the basis of the results obtained it can be stated that
FDCR, with a suitable combination of distributions, will be able to find better optimised parameters and thus produce a faster response for a given application.
 Appendix A See Tables 3 X 11.
 References
