 Information Extraction (IE) refers to the problem of extracting structured information from unstructured or semi-structured text. It has been well-studied by the Natural Language Processing research commu-nity for a long time. In recent years, IE has emerged as a critical building block in a wide range of enter-prise applications, including financial risk analysis, social media analytics and regulatory compliance, among many others. An important practical chal-lenge driven by the use of IE in these applications is usability (Chiticariu et al., 2010c): specifically, how to enable the ease of development and mainte-nance of high-quality information extraction rules, also known as annotators , or extractors .

Developing extractors is a notoriously labor-intensive and time-consuming process. In order to ensure highly accurate and reliable results, this task is traditionally performed by trained linguists with domain expertise. As a result, extractor develop-ment is regarded as a major bottleneck in satisfying the increasing text analytics demands of enterprise applications. Hence, reducing the extractor devel-opment life cycle is a critical requirement. Towards this goal, we have built WizIE , an IE development environment designed primarily to (1) enable devel-opers with little or no linguistic background to write high quality extractors, and (2) reduce the overall manual effort involved in extractor development.
Previous work on improving the usability of IE systems has mainly focused on reducing the manual effort involved in extractor development (Brauer et al., 2011; Li et al., 2008; Li et al., 2011a; Soder-land, 1999; Liu et al., 2010). In contrast, the fo-cus of WizIE is on lowering the extractor develop-ment entry barrier by means of a wizard-like en-vironment that guides extractor development based on best practices drawn from the experience of trained linguists and expert developers. In doing so, WizIE also provides natural entry points for differ-ent tools focused on reducing the effort required for performing common tasks during IE development. Underlying our WizIE are a state-of-the-art IE rule language and corresponding runtime en-gine (Chiticariu et al., 2010a; Li et al., 2011b). The runtime engine and WizIE are commercially avail-able as part of IBM InfoSphere BigInsights (IBM, 2012). The development process for high-quality, high-performance extractors consists of four phases, as illustrated in Fig. 1. First, in the Task Analysis phase, concrete extraction tasks are defined based on high-level business requirements. For each ex-traction task, IE rules are developed during the Rule Development phase. The rules are profiled and fur-ther fine-tuned in the Performance Tuning phase, to ensure high runtime performance. Finally, in the De-livery phase, the rules are packaged so that they can be easily embedded in various applications.
WizIE is designed to assist and enable both novice and experienced developers by providing an intu-itive wizard-like interface that is informed by the best practices in extractor development throughout each of these phases. By doing so, WizIE seeks to provide the key missing pieces in a conventional IE development environment (Cunningham et al., 2002; Li et al., 2011b; Soundrarajan et al., 2011), based on our experience as expert IE developers, as well as our interactions with novice developers with general computer science background, but little text analytics experience, during the development of sev-eral enterprise applications. In this section, we present the general functionality of WizIE in the context of extraction tasks driven by real business use cases from the media and en-tertainment domain. We describe WizIE in details and show how it guides and assists IE developers in a step-by-step fashion, based on best practices. 3.1 Task Analysis The high-level business requirement of our run-ning example is to identify intention to purchase for movies from online forums. Such information is of great interest to marketers as it helps pre-dict future purchases (Howard and Sheth, 1969). During the first phrase of IE development (Fig. 2), WizIE guides the rule developer in turning such a high-level business requirement into concrete ex-traction tasks by explicitly asking her to select and manually examine a small number 1 of sample doc-uments, identify and label snippets of interest in the sample documents, and capture clues that help to identify such snippets.

The definition and context of the concrete extrac-tion tasks are captured by a tree structure called the extraction plan (e.g. right panel in Fig. 2). Each leaf node in an extraction plan corresponds to an atomic extraction task, while the non-leaf nodes de-note higher-level tasks based on one or more atomic extraction tasks. For instance, in our running ex-ample, the business question of identifying intention of purchase for movies has been converted into the extraction task of identifying MovieIntent mentions, which involves two atomic extraction tasks: identi-fying Movie mentions and Intent mentions.

The extraction plan created, as we will describe later, plays a key role in the IE development process in WizIE . Such tight coupling of task analysis with actual extractor development is a key departure from conventional IE development environments. 3.2 Rule Development Once concrete extraction tasks are defined, WizIE guides the IE developer to write actual rules based on best practices. Fig. 3(a) shows a screenshot of the second phase of building an extractor, the Rule Development phase. The Extraction Task panel on the left provides information and tips for rule development, whereas the Extraction Plan panel on the right guides the actual rule development for each extraction task. As shown in the figure, the types of rules associated with each label node fall into three categories: Basic Features , Can-didate Generation and Filter&amp;Consolidate . This categorization is based on best practices for rule development (Chiticariu et al., 2010b). As such, the extraction plan groups together the high-level specification of extraction tasks via examples, and the actual implementation of those tasks via rules. The developer creates rules directly in the Rule Editor, or via the Create Statement wizard, acces-sible from the Statements node of each label in the Extraction Plan panel:
The wizard allows the user to select a type for the new rule, from predefined sets for each of the three categories. The types of rules exposed in each category are informed by best practices. For ex-ample, the Basic Features category includes rules for defining basic features using regular expressions, dictionaries or part of speech information, whereas the Candidate Generation category includes rules for combining basic features into candidate mentions by means of operations such as sequence or alternation. Once the developer provides a name for the new rule ( view ) and selects its type, the appropriate rule tem-plate (such as the one illustrated below) is automat-ically generated in an appropriate file on disk and displayed in the editor, for further editing 2 .
Once the developer completes an iteration of rule development, WizIE guides her in testing and refin-ing the extractor, as shown in Fig. 3(b). The An-notation Explorer at the bottom of the screen gives a global view of the extraction results, while other panels highlight individual results in the context of the original input documents. The Annotation Ex-plorer enables filtering and searching results, and comparing results with those from a previous iter-ation. WizIE also provides a facility for manually labeling a document collection with  X  X round truth X  annotations, then comparing the extraction results with the ground truth in order to formally evalu-ate the quality of the extractor and avoid regressions during the development process.

An important differentiator of WizIE compared with conventional IE development environments is a suite of sophisticated tools for automatic result ex-planation and rule discovery . We briefly describe them next.
 Provenance Viewer. When the user clicks on an ex-tracted result, the Provenance Viewer shows a com-plete explanation of how that result has been pro-duced by the extractor, in the form of a graph that demonstrates the sequence of rules and individual pieces of text responsible for that result. Such expla-nations are critical to enable the developer to under-stand why a false positive is generated by the sys-tem, and identify problematic rule(s) that could be refined in order to correct the mistake. An example explanation for an incorrect MovieIntent mention  X  X  just saw Mission Impossible X  is shown below. As can be seen, the MovieIntent mention is gener-ated by combining a SelfRef (matching first person pronouns) with a MovieName mention, and in turn, the latter is obtained by combining several MovieN-ameCandidate mentions. With this information, the developer can quickly determine that the SelfRef and MovieName mentions are correct, but their combina-tion in MovieIntentCandidate is problematic. She can then proceed to refine the MovieIntentCandidate rule, for example, by avoiding any MovieIntentCandidate mentions containing a past tense verb form such as saw , since past tense in not usually indicative of in-tent (Liu et al., 2010).
 Pattern Discovery. Negative contextual clues such as the verb  X  X aw X  above are useful for creating rules that filter out false positives. Conversely, positive clues such as the phrase  X  X ill see X  are useful for creating rules that separate ambiguous matches from high-precision matches. WizIE  X  X  Pattern Discovery component facilitates automatic discovery of such clues by mining available sample data for common patterns in specific contexts (Li et al., 2011a). For example, when instructed to analyze the context be-tween SelfRef and MovieName mentions, Pattern Dis-covery finds a suite of common patterns as shown in Fig. 4. The developer can analyze these patterns and choose those suitable for refining the rules. For example, patterns such as  X  X ave to see X  can be seen as positive clues for intent, whereas phrases such as  X  X ook ... to see X  or  X  X ent to see X  are negative clues, and can be used for filtering false positives. Regular Expression Generator. WizIE also en-ables the discovery of regular expression patterns. The Regular Expression Generator takes as input a set of sample mentions and suggests regular expres-sions that capture the samples, ranging from more specific (higher accuracy) to more general expres-sions (higher coverage). Figure 5 shows two reg-ular expressions automatically generated based on mentions of movie ratings, and how the developer is subsequently assisted in understanding and refining the generated expression. In our experience, regu-lar expressions are complex concepts that are diffi-cult to develop for both expert and novice develop-ers. Therefore, such a facility to generate expres-sions based on examples is extremely useful. 3.3 Performance Tuning Once the developer is satisfied with the quality of the extractor, WizIE guides her in measuring and tuning its runtime performance, in preparation for deploy-ing the extractor in a production environment. The Profiler observes the execution of the extractor on a sample input collection over a period of time and records the percentage of time spent executing each rule, or performing certain runtime operations. After the profiling run completes, WizIE displays the top 25 most expensive rules and runtime operations, and the overall throughput (amount of input data pro-cessed per unit of time). Based on this information, the developer can hand-tune the critical parts of the extractor, rerun the Profiler, and validate an increase in throughput. She would repeat this process until satisfied with the extractor X  X  runtime performance. 3.4 Delivery and Deployment Once satisfied with both the result quality and runtime performance, the developer is guided by WizIE  X  X  Export wizard through the process of ex-porting the extractor in a compiled executable form. The generated executable can be embedded in an ap-plication using a Java API interface. WizIE can also wrap the executable plan in a pre-packaged applica-tion that can be run in a map-reduce environment, then deploy this application on a Hadoop cluster. A preliminary user study was conducted to evalu-ate the effectiveness of WizIE in enabling novice IE developers. The study included 14 participants, all employed at a major technology company. In the pre-study survey, 10 of the participants reported no prior experience with IE tasks, two of them have seen demonstrations of IE systems, and two had brief involvement in IE development, but no expe-rience with WizIE . For the question  X  X ccording to your understanding, how easy is it to build IE appli-cations in general ? X  , the median rating was 5, on a scale of 1 (very easy) to 7 (very difficult).
The study was conducted during a 2-day training session. In Day 1, participants were given a thor-ough introduction to IE, shown example extractors, and instructed to develop extractors without WizIE . Towards the end of Day 1, participants were asked to solve an IE exercise: develop an extractor for the high-level requirement of identifying mentions of company revenue by division from the company X  X  official press releases. WizIE was introduced to the participants in Day 2 of the training, and its fea-tures were demonstrated and explained with exam-ples. Participants were then asked to complete the same exercise as in Day 1. Authors of this demon-stration were present to help participants during the exercises in both days. At the end of each day, par-ticipants filled out a survey about their experience.
In Day 1, none of the participants were able to complete the exercise after 90 minutes. In the sur-vey, one participant wrote  X  X  am in sales so it is all difficult X  ; another participant indicated that  X  X  don X  X  think I would be able to recreate the example on my own from scratch X  . In Day 2, most participants were able to complete the exercise in 90 minutes or less using WizIE . In fact, two participants created extrac-tors with accuracy and coverage of over 90%, when measured against the ground truth. Overall, the par-ticipants were much more confident about creating extractors. One participant wrote  X  X y first impres-sion is very good X  . On the other hand, another par-ticipant asserted that  X  X he nature of the task is still difficult X  . They also found that WizIE is useful and easy to use, and it is easier to build extractors with the help of WizIE .
 In summary, our preliminary results indicate that WizIE is a step forward towards enabling extractor development for novice IE developers. In order to formally evaluate WizIE , we are currently conduct-ing a formal study of using WizIE to create extrac-tors for several real business applications. In this demonstration we showcase WizIE  X  X  step-by-step approach to guide the developer in the iterative process of IE rule development, from task analysis to developing, tuning and deploying the extractor in a production environment. Our demonstration is centered around the high-level business requirement of identifying intent to purchase movies from blogs and forum posts as described in Section 3. We start by demonstrating the process of developing two rel-atively simple extractors for identifying MovieIntent and MovieRating mentions. We then showcase com-plex state-of-the-art extractors for identifying buzz and sentiment for the media and entertainment do-main, to illustrate the quality and runtime perfor-mance of extractors built with WizIE .

