 Compound words pose significant challenges to the lexicalized models that are currently common in sta-tistical machine translation. This problem has been widely acknowledged, and the conventional solu-tion, which has been shown to work well for many language pairs, is to segment compounds into their constituent morphemes using either morphological analyzers or empirical methods and then to trans-late from or to this segmented variant (Koehn et al., 2008; Dyer et al., 2008; Yang and Kirchhoff, 2006).
But into what units should a compound word be segmented? Taken as a stand-alone task, the goal of a compound splitter is to produce a segmentation for some input that matches the linguistic intuitions of a native speaker of the language. However, there are often advantages to using elements larger than sin-gle morphemes as the minimal lexical unit for MT, since they may correspond more closely to the units of translation. Unfortunately, determining the op-timal segmentation is challenging, typically requir-ing extensive experimentation (Koehn and Knight, 2003; Habash and Sadat, 2006; Chang et al., 2008). Recent work has shown that by combining a vari-ety of segmentations of the input into a segmentation lattice and effectively marginalizing over many dif-ferent segmentations, translations superior to those resulting from any single single segmentation of the input can be obtained (Xu et al., 2005; Dyer et al., 2008; DeNeefe et al., 2008). Unfortunately, this ap-proach is difficult to utilize because it requires mul-tiple segmenters that behave differently on the same input.

In this paper, we describe a maximum entropy word segmentation model that is trained to assign high probability to possibly several segmentations of an input word. This model enables generation of di-verse, accurate segmentation lattices from a single model that are appropriate for use in decoders that accept word lattices as input, such as Moses (Koehn et al., 2007). Since our model relies a small num-ber of dense features, its parameters can be tuned using very small amounts of manually created ref-erence lattices . Furthermore, since these parame-ters were chosen to have valid interpretation across a variety of languages, we find that the weights esti-mated for one apply quite well to another. We show that these lattices significantly improve translation quality when translating into English from three lan-guages exhibiting productive compounding: Ger-man, Turkish, and Hungarian.

The paper is structured as follows. In the next sec-tion, we describe translation from segmentation lat-tices and give a motivating example, Section 3 de-scribes our segmentation model and its tuning and how it is used to generate segmentation lattices, Sec-tion 5 presents experimental results, Section 6 re-views relevant related work, and in Section 7 we conclude and discuss future work. In this section we give a brief overview of lattice translation and then describe the characteristics of segmentation lattices that are appropriate for trans-lation. 2.1 Lattice translation Word lattices have been used to represent ambiguous input to machine translation systems for a variety of tasks, including translating automatic speech recog-nition transcriptions and translating from morpho-logically complex languages (Bertoldi et al., 2007; Dyer et al., 2008). The intuition behind using lat-tices in both approaches is to avoid the error propa-gation effects that are found when a one-best guess is used. By carrying a certain amount of uncertainty forward in the processing pipeline, information con-tained in the translation models can be leveraged to help resolve the upstream ambiguity. In our case, we want to propagate uncertainty about the proper seg-mentation of a compound forward to the decoder, which can use its full translation model to select proper segmentation for translation. Mathemati-cally, this can be understood as follows: whereas the goal in conventional machine translation is to find the sentence  X  e I tice adds a latent variable, the path  X  f from a des-ignated start start to a designated goal state in the lattice G : If the transduction formalism used is a synchronous probabilistic context free grammar or weighted finite state transducer, the search represented by equation (3) can be carried out efficiently using dynamic pro-gramming (Dyer et al., 2008). 2.2 Segmentation lattices Figure 1 shows two lattices that encode the most linguistically plausible ways of segment-ing two prototypical German compounds with compositional meanings. However, while these words are structurally quite similar, translating them into English would seem to require differ-ent amounts of segmentation. For example, the dictionary fragment shown in Table 1 illustrates that tonbandaufnahme can be rendered into En-glish by following 3 different paths in the lat-tice, ton /audio band /tape aufnahme /recording, ton-band /tape aufnahme /recording, and tonbandauf-nahme /tape recording. In contrast, wiederaufnahme can only be translated correctly using the unseg-mented form, even though in German the meaning of the full form is a composition of the meaning of the individual morphemes. 1
It should be noted that phrase-based models can translate multiple words as a unit, and therefore cap-ture non-compositional meaning. Thus, by default if the training data is processed such that, for example, aufnahme , in its sense of recording , is segmented into two words, then more paths in the lattices be-come plausible translations. However, using a strat-egy of  X  X ver segmentation X  and relying on phrase models to learn the non-compositional translations has been shown to degrade translation quality sig-nificantly on several tasks (Xu et al., 2004; Habash and Sadat, 2006). We thus desire lattices containing as little oversegmentation as possible.

We have now have a concept of a  X  X old standard X  segmentation lattice for translation: it should con-tain all linguistically motivated segmentations that also correspond to plausible word-for-word transla-tions into English. Figure 2 shows an example of the reference lattice for the two words we just discussed. For the experiments in this paper, we generated a development and test set by randomly choosing 19 German newspaper articles, identifying all words greater than 6 characters is length, and segmenting each word so that the resulting units could be trans-lated compositionally into English. This resulted in 489 training sentences corresponding to 564 paths for the dev set (which was drawn from 15 articles), and 279 words (302 paths) for the test set (drawn from the remaining 4 articles). We now turn to the problem of modeling word seg-mentation in a way that facilitates lattice construc-tion. As a starting point, we consider the work of Koehn and Knight (2003) who observe that in most languages that exhibit compounding, the mor-phemes used to construct compounds frequently also appear as individual tokens. Based on this ob-servation, they propose a model of word segmenta-tion that splits compound words into pieces found in the dictionary based on a variety heuristic scoring criteria. While these models have been reasonably successful (Koehn et al., 2008), they are problem-atic for two reasons. First, there is no principled way to incorporate additional features (such as phonotac-tics) which might be useful to determining whether a word break should occur. Second, the heuristic scoring offers little insight into which segmentations should be included in a lattice.

We would like our model to consider a wide vari-ety of segmentations of any word (including perhaps hypothesized morphemes that are not in the dictio-nary), to make use of a rich set of features, and to have a probabilistic interpretation of each hypothe-sized split (to incorporate into the downstream de-coder). We decided to use the class of maximum entropy models, which are probabilistically sound, can make use of possibly many overlapping features, and can be trained efficiently (Berger et al., 1996). We thus define a model of the conditional proba-bility distribution Pr ( s N form and s N segments as: To simplify inference and to make the lattice repre-sentation more natural, we only make use of local feature functions that depend on properties of each segment: 3.1 From model to segmentation lattice The segmentation model just introduced is equiva-lent to a lattice where each vertex corresponds to a particular coverage (in terms of letters consumed from left to right) of the input word. Since we only make use of local features, the number of vertices in a lattice for word w is | w | X  m , where m is the minimum segment length permitted. In all experi-ments reported in this paper, we use m = 3 . Each edge is labeled with a morpheme s (corresponding to the morpheme associated with characters delim-ited by the start and end nodes of the edge) as well as a weight, from the start to the goal vertex will be equal to the numerator in equation (4). The value of the denomi-nator can be computed using the forward algorithm.
In most of our experiments, s will be identical to the substring of w that the edge is designated to cover. However, this is not a requirement. For exam-ple, German compounds frequently have so-called Fugenelemente , one or two characters that  X  X lue together X  the primary morphemes in a compound. Since we permit these characters to be deleted, then an edge where they are deleted will have fewer char-acters than the coverage indicated by the edge X  X  starting and ending vertices. 3.2 Lattice pruning Except for the minimum segment length restriction, our model defines probabilities for all segmentations of an input word, making the resulting segmenta-tion lattices are quite large. Since large lattices are costly to deal with during translation (and may lead to worse translations because poor segmenta-tions are passed to the decoder), we prune them us-ing forward-backward pruning so as to contain just the highest probability paths (Sixtus and Ortmanns, 1999). This works by computing the score of the best path passing through every edge in the lattice using the forward-backward algorithm. By finding the best score overall, we can then prune edges us-ing a threshold criterion; i.e., edges whose score is some factor  X  away from the global best edge score. 3.3 Maximum likelihood training Our model defines a conditional probability distribu-tion over virtually all segmentations of a word w . To train our model, we wish to maximize the likelihood of the segmentations contained in the reference lat-tices by moving probability mass away from the seg-mentations that are not in the reference lattice. Thus, we wish to minimize the following objective (which can be computed using the forward algorithm over the unpruned hypothesis lattices): The gradient with respect to the feature weights for a log linear model is simply: To compute these values, the first expectation is computed using forward-backward inference over the full lattice. To compute the second expecta-tion, the full lattice is intersected with the reference lattice R i , and then forward-backward inference is redone. 2 We use the standard quasi-Newtonian method L-BFGS to optimize the model (Liu et al., 1989). Training generally converged in only a few hundred iterations. 3.3.1 Training to minimize 1-best error
In some cases, such as when performing word alignment for translation model construction, lat-tices cannot be used easily. In these cases, a 1-best segmentation (which can be determined from the lattice using the Viterbi algorithm) may be de-sired. To train the parameters of the model for this condition (which is arguably slightly different from the lattice generation case we just considered), we used the minimum error training (MERT) algorithm on the segmentation lattices to find the parameters that minimized the error on our dev set (Macherey et al., 2008). The error function we used was WER (the minimum number of insertions, substitutions, and deletions along any path in the reference lattice, normalized by the length of this path). The WER on the held-out test set for a system tuned using MERT is 9 . 9% , compared to 11 . 1% for maximum likeli-hood training. 3.4 Features We remark that since we did not have the resources to generate training data in all the languages we wished to generate segmentation lattices for, we have confined ourselves to features that we expect to be reasonably informative for a broad class of lan-guages. A secondary advantage of this is that we used denser features than are often used in maxi-mum entropy modeling, meaning that we could train our model with relatively less training data than might otherwise be required.

The features we used in our compound segmen-tation model for the experiments reported below are shown in Table 2. Building on the prior work that relied heavily on the frequency of the hypothesized constituent morphemes in a monolingual corpus, we included features that depend on this value, f ( s i ) . | s | refers to the number of letters in the i th hypothe-sized segment. Binary predicates evaluate to 1 when true and 0 otherwise. f ( s i ) is the frequency of the token s i as an independent word in a monolingual corpus. p (# | s i 1  X  X  X  s i 4 ) is the probability of a word start preceding the letters s i 1  X  X  X  s i 4 . We found it beneficial to include a feature that was the probabil-ity of a certain string of characters beginning a word, for which we used a reverse 5-gram character model and predicted the word boundary given the first five letters of the hypothesized word split. 3 Since we did have expertise in German morphology, we did build a special German model. For this, we permitted the strings s , n , and es to be deleted between words. Each deletion fired a count feature (listed as fugen in the table). Analysis of errors indicated that the segmenter would periodically propose an incorrect segmentation where a single word could be divided into a word and a nonword consisting of common in-flectional suffixes. To address this, an additional fea-ture was added that fired when a proposed segment was one of a set N of 30 nonwords that we saw quite frequently. The weights shown in Table 2 are those learned by maximum likelihood training on models both with and without the special German features, which are indicated with  X  . To give some sense of the performance of the model in terms of its ability to generate lattices indepen-dently of a translation task, we present precision and recall of segmentations for pruning parameters (cf. Section 3.2) ranging from  X  = 0 to  X  = 5 . Pre-cision measures the number of paths in the hypoth-esized lattice that correspond to paths in the refer-ence lattice; recall measures the number of paths in the reference lattices that are found in the hypothesis lattice. Figure 3 shows the effect of manipulating the density parameter on the precision and recall of the German lattices. Note that very high recall is possi-ble; however, the German-only features have a sig-nificant impact, especially on recall, because the ref-erence lattices include paths where Fugenelemente have been deleted. We now review experiments using segmentation lat-tices produced by the segmentation model we just introduced in German-English, Hungarian-English, and Turkish-English translation tasks and then show results elucidating the effect of the lattice density pa-rameter. We begin with a description of our MT sys-tem. 5.1 Data preparation and system description For all experiments, we used a 5-gram English lan-guage model trained on the AFP and Xinua por-tions of the Gigaword v3 corpus (Graff et al., 2007) with modified Kneser-Ney smoothing (Kneser and Ney, 1995). The training, development, and test data for German-English and Hungarian-English systems used were distributed as part of the 2009 EACL Workshop on Machine Translation, 4 and the Turkish-English data corresponds to the training and test sets used in the work of Oflazer and Durgar El-Kahlout (2007). Corpus statistics for all language pairs are summarized in Table 3. We note that in all language pairs, the 1 BEST segmentation variant of the training data results in a significant reduction in types.
 Word alignment was carried out by running Giza++ implementation of IBM Model 4 initialized with 5 iterations of Model 1, 5 of the HMM aligner, and 3 iterations of Model 4 (Och and Ney, 2003) in both directions and then symmetrizing using the grow-diag-final-and heuristic (Koehn et al., 2003). For each language pair, the corpus was aligned twice, once in its non-segmented variant and once using the single-best segmentation variant.
For translation, we used a bottom-up parsing de-coder that uses cube pruning to intersect the lan-guage model with the target side of the synchronous grammar. The grammar rules were extracted from the word aligned parallel corpus and scored as de-scribed in Chiang (2007). The features used by the decoder were the English language model log prob-abilities in both directions (Koehn et al., 2003), and a word count feature. For the lattice systems, we also included the unnormalized log p (  X  f |G ) , as it is defined in Section 3, as well as an input word count feature. The feature weights were tuned on a held-out development set so as to maximize an equally weighted linear combination of BLEU and 1-TER (Papineni et al., 2002; Snover et al., 2006) using the minimum error training algorithm on a packed for-est representation of the decoder X  X  hypothesis space (Macherey et al., 2008). The weights were indepen-dently optimized for each language pair and each ex-perimental condition. 5.2 Segmentation lattice results In this section, we report the results of an experiment to see if the compound lattices constructed using our maximum entropy model yield better translations than either an unsegmented baseline or a baseline consisting of a single-best segmentation.

For each language pair, we define three condi-BASELINE condition, a lowercased and tokenized (but not segmented) version of the test data is translated using the grammar derived from a non-segmented training data. In the 1 BEST condition, the single best segmentation  X  s N Pr ( s N 1 | w ) is chosen for each word using the MERT-trained model (the German model for German, and the language-neutral model for Hungarian and Turk-ish). This variant is translated using a grammar induced from a parallel corpus that has also been segmented according to the same decision rule. In the LATTICE condition, we constructed segmenta-tion lattices using the technique described in Sec-tion 3.1. For all languages pairs, we used d = 2 as the pruning density parameter (which corresponds to the highest F-score on the held out test set). Addi-tionally, if the unsegmented form of the word was removed from the lattice during pruning, it was re-stored to the lattice with zero weight.

Table 4 summarizes the results of the translation f -types e -tokens. e -types experiments comparing the three input variants. For all language pairs, we see significant improvements in both BLEU and TER when segmentation lattices are used. 5 Additionally, we also confirmed previous findings that showed that when a large amount of training data is available, moving to a one-best seg-mentation does not yield substantial improvements (Yang and Kirchhoff, 2006). Perhaps most surpris-ingly, the improvements observed when using lat-tices with the Hungarian and Turkish systems were larger than the corresponding improvement in the German system, but German was the only language for which we had segmentation training data. The smaller effect in German is probably due to there be-ing more in-domain training data in the German sys-tem than in the (otherwise comparably sized) Hun-garian system.
Targeted analysis of the translation output shows that while both the 1 BEST and LATTICE systems generally produce adequate translations of com-pound words that are out of vocabulary in the BASE -LINE system, the LATTICE system performs bet-ter since it recovers from infelicitous splits that the one-best segmenter makes. For example, one class of error we frequently observe is that the one-best segmenter splits an OOV proper name into two pieces when a portion of the name corresponds to a known word in the source language (e.g. tom tan-credo  X  tom tan credo which is then translated as tom tan belief ). 6 5.3 The effect of the density parameter Figure 4 shows the effect of manipulating the den-sity parameter (cf. Section 3.2) on the performance and decoding time of the Turkish-English transla-tion system. It further confirms the hypothesis that increased diversity of segmentations encoded in a segmentation lattice can improve translation perfor-mance; however, it also shows that once the den-sity becomes too great, and too many implausible segmentations are included in the lattice, translation quality will be harmed. Aside from improving the vocabulary coverage of machine translation systems (Koehn et al., 2008; Yang and Kirchhoff, 2006; Habash and Sadat, 2006), compound word segmentation (also referred to as decompounding ) has been shown to be help-ful in a variety of NLP tasks including mono-and crosslingual IR (Airio, 2006) and speech recognition (Hessen and Jong, 2003). A number of researchers have demonstrated the value of using lattices to en-code segmentation alternatives as input to a machine translation system (Dyer et al., 2008; DeNeefe et al., 2008; Xu et al., 2004), but this is the first work to do so using a single segmentation model. Another strand of inquiry that is closely related is the work on adjusting the source language segmentation to match the granularity of the target language as a way of im-proving translation. The approaches suggested thus far have been mostly of a heuristic nature tailored to Chinese-English translation (Bai et al., 2008; Ma et al., 2007). In this paper, we have presented a maximum entropy model for compound word segmentation and used it to generate segmentation lattices for input into a sta-tistical machine translation system. These segmen-tation lattices improve translation quality (over an already strong baseline) in three typologically dis-tinct languages (German, Hungarian, Turkish) when translating into English. Previous approaches to generating segmentation lattices have been quite la-borious, relying either on the existence of multiple segmenters (Dyer et al., 2008; Xu et al., 2005) or hand-crafted rules (DeNeefe et al., 2008). Although the segmentation model we propose is discrimina-tive, we have shown that it can be trained using a minimal amount of annotated training data. Further-more, when even this minimal data cannot be ac-quired for a particular language (as was the situa-tion we faced with Hungarian and Turkish), we have demonstrated that the parameters obtained in one language work surprisingly well for others. Thus, with virtually no cost, this model can be used with a variety of diverse languages.

While these results are already quite satisfying, there are a number of compelling extensions to this work that we intend to explore in the future. First, unsupervised segmentation approaches offer a very compelling alternative to the manually crafted seg-mentation lattices that we created. Recent work suggests that unsupervised segmentation of inflec-tional affixal morphology works quite well (Poon et al., 2009), and extending this work to compounding morphology should be feasible, obviating the need for expensive hand-crafted reference lattices. Sec-ond, incorporating target language information into a segmentation model holds considerable promise for inducing more effective translation models that perform especially well for segmentation lattice in-puts.
 Special thanks to Kemal Oflazar and Reyyan Yen-iterzi of Sabanc X  University for providing the Turkish-English corpus and to Philip Resnik, Adam Lopez, Trevor Cohn, and especially Phil Blunsom for their helpful suggestions. This research was sup-ported by the Army Research Laboratory. Any opin-ions, findings, conclusions or recommendations ex-pressed in this paper are those of the authors and do not necessarily reflect the view of the sponsors.
