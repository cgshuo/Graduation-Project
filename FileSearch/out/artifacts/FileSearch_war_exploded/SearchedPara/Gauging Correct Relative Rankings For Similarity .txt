 One of the important tasks in link analysis is to quantify the similarity between two objects based on hyperlink structure. SimRank is an attractive similarity measure of this type. Existing work mainly focuses on absolute SimRank scores, and often harnesses an iterative paradigm to compute them. While these iterative scores converge to exact ones with the increasing number of iterations, it is still notoriously difficult to determine how well the relative orders of these iterative scores can be preserved for a given iteration. In this paper, we propose efficient ranking criteria that can secure correct relative orders of node-pairs with respect to SimRank scores when they are computed in an iterative fashion. Moreover, we show the superiority of our criteria in harvesting top-K SimRank scores and bucket orders from a full ranking list. Finally, viable empirical studies verify the usefulness of our techniques for SimRank top-K ranking and bucket ordering.
The problem of identifying similar objects based on graph structure is a fundamental primitive in hyperlink analysis, arising in numerous applications, e.g., anomaly detection, recommendation systems, and automated image annotation. It often demands a measure of closeness between two objects. For instance, Shortest distance can be regarded as a simple measure that counts only one path with minimum length to evaluate pair-wise similarity. Recently, SimRank has been proposed by Jeh and Widom [1] as a promising measure of affinity between two nodes. It follows the idea that  X  X wo nodes are similar if they are referenced by similar nodes X . Due to its recursion, SimRank can count multiple paths with different lengths between two nodes to evaluate similarity, which is a substantial improvement over shortest distance.
To serve ranking purposes, this paper focuses on SimRank measure due to its two advantages: 1. Unlike PageRank that is query-independent, SimRank c 2. SimRank scores can rank both nodes and node-pairs,
While most existing work [1 X 7] focuses on iterative com-putations of absolute SimRank scores, the issue of gauging the correctness of their relative ranking has received little at-tention. To the best of our knowledge, the previous iterative methods to compute SimRank often first empirically set the total number of iterations, k , and then use the k -th iterative SimRank score s k ( a, b ) to estimate the exact solution s ( a, b ). For accuracy guarantee, Lizorkin et al. [5] showed an upper bound of the gap between s k ( a, b ) and s ( a, b ): where 0 &lt; C &lt; 1 is a decay factor. However, from the ranking perspective, it seems hard to use this ( absolute ) gap to determine how well the relative ranking with respect to k -th iterative SimRank scores can be preserved, since even a large gap in Eq.(1) does not necessarily imply incorrect relative ranking of objects, as illustrated in Example 1.
Example 1. Figure 1 depicts how the relative ranking of node-pairs in graph G (with respect to their k -th iterative SimRank scores sorted in descending order) is updated when the number of iteration k increases. The last column of the table ( k =  X  ) shows the  X  X rue X  relative ranking with respect to exact SimRank scores. The (absolute) error bounds of SimRank for every iteration k are depicted in the last line.
From the table, it can be noticed that the relative ranking tends to the  X  X rue X  one as k increases. In fact, when k = 3 , the relative ranking with respect to s 3 (  X ,  X  ) has become the same as the  X  X rue X  one, but the (absolute) gap of SimRank which can be bounded by C k +1 = 0 . 6 3+1 = 0 . 130 . 1
Example 1 indicates that the correctness of relative rank-i ng of node-pairs may not be solely judged by the absolute 1 A s previously used in [1], we set the decay factor C = 0 . 6 for SimRank computation in Example 1. gap of SimRank scores in Eq.(1). For ranking purposes, t he correct relative orders of node-pairs are more important than their absolute SimRank scores. Thus, it is imperative to identify efficient ranking criteria that can guarantee the correct relative order of node-pairs with respect to their SimRank scores during the iterative computation.
 Hence, we consider the following problem, referred to as R elative R anking C riterion of S imRank ( R RCS ).
Given the number of iterations k , for every two node-pairs ( a, b ) and ( c, d ) , our goal is to find  X  k such that
The main challenge in RRCS is the determination of  X  k , which can be used as a threshold to check whether the k -th iterative SimRank scores s k (  X ,  X  ) of any two node-pairs are well separated. If affirmative, we can conclude at iteration k that their final ( X  X rue X ) relative ranking with respect to the exact SimRank scores s (  X ,  X  ) can be consistently preserved. Another direct benefit of RRCS lies in its high effectiveness for top-K ranking and bucket ranking.
 Contributions. We make the following contributions: 1. A proposed ranking criterion to gauge the correct rela-2. Two induced ranking criteria for SimRank top-K rank-3. Viable empirical studies showing the effectiveness of
We contend that our techniques for RRCS yield a promis-ing systematic method, which is also applicable to many other metrics, such as PageRank, Random Walk with Restart, ObjectRank, and SimFusion.
 Related Work. Ranking nodes or node-pairs based on link structure is an important application of SimRank similarity. Nonetheless, most existing work mainly concerns absolute SimRank scores computation [1, 3, 5, 6, 8 X 10]. As for rela-tive ranking, there is only one work by Lizorkin et al. who made the first effort in Proposition 2 of [5] to establish the following ranking accuracy estimate: s ( a, b )  X  s ( a, d )  X  C k +1 implies s k ( a, b )  X  s A striking difference between Eqs.(3) and (2) is the logical order  X  Eq.(3) infers k -th relative ranking from exact one, whereas Eq.(2) infers exact relative ranking from k -th iter-ative one. In fact, in an iterative process, exact s (  X ,  X  ) are unknown beforehand. Hence, we can only use k -th iterative information in s k (  X ,  X  ) to infer exact s (  X ,  X  ). In this sense, Eq.(2) is more useful in practice.

There has been work on other accuracy estimates [3,5] for iterative SimRank computation. Lizorkin et al. [5] are the first to propose an (absolute) error estimate for SimRank: Based on this bound, it is easy to find out the total number of iterations required to guarantee a given accuracy. However, from the ranking perspective, the relative order of node-pairs can be correctly preserved before C k +1 becomes small. 2 [ 5] uses R k (  X ,  X  ) to denote k -th iterative SimRank scores, in contrast to s k (  X ,  X  ) in this paper.
 Later, Zheng et al. [3] showed the gap between two consec-utive SimRank iterations: with the aim to deduce an upper bound for SimRank score of each node-pair. Although the accuracy estimates in [3,5] can be used as stopping criteria in iterative SimRank com-putation, they may not guarantee correct relative ranking.
Recently, SimRank top-K queries [7, 10] have witnessed growing interests. Lee et al. [7] proposed a novel random walk based method to identify top-K nearest neighbors with respect to a given query q based on SimRank scores s ( q,  X  ). If our ranking criteria were incorporated into their method, the speedup for top-K nodes would be more pronounced. Fujiwara et al. [10] leveraged a min-heap structure as well as a Cauchy-Schwarz inequality to prune unlikely nodes for top-K SimRank search. However, their approach is based on the matrix decomposition, which is different from ours.
Our RRCS criteria can also applied to iterative PageRank computation. Most existing convergence criteria for Page-Rank ( e.g., [11, 12]) are based on the absolute difference between 1) the k -th iterative PageRank values and the ideal ones, or 2) the two consecutive PageRank iterations. Several work has exploited geometric distance [13] and Kendall X  X   X  distance [14] for top-K PageRank rankings. When our RRCS criteria are integrated into these methods, the relative rankings of PageRank can be efficiently obtained as well. In this section, we briefly revisit the SimRank background. For presentation ease, we use its matrix representation [4]. Notations. The following notations are used in the paper.
Consider a graph G = ( V, E ) with node set V and edge set E . Let S be the SimRank matrix whose entry [ S ] a,b is the similarity s ( a, b ) between nodes a and b , and let Q be the backward transition matrix whose entry [ Q ] a,b = 1 / (in-degree of a ) if there is an edge b  X  a , and 0 otherwise. Then, S satisfies the following recursion: where 0 &lt; C &lt; 1 is a decay factor, (  X  ) T is matrix transpose, and I is an identity matrix with compatible dimension, and max {  X  } is an element-wise maximum operation.

Intuitively, [ S ] a,b depends on two terms in Eq.(4): 1) The term [ Q  X  S  X  Q T ] a,b includes the average similarity of ( a, b ) X  X  in-neighbor pairs, which implies that  X  X wo nodes are similar if their in-neighbors are similar X . 2) max {  X , I } guarantees that the diagonals of S are all 1s, corresponding to  X  X very node is maximally similar to itself X .
Let S k be the k -th iterative SimRank matrix. Then, the exact S in Eq.(4) can be iteratively computed as
We provide a ranking criterion to gauge the correct rela-tive order of node-pairs with respect to the SimRank scores. The main result in this section is as follows.
Theorem 1 . For every two node-pairs ( a, b ) and ( c, d ) , if then it necessarily follows that [ S ] c,d  X  [ S ] a,b . (The proof will be given later after some discussion.) I ntuitively, Theorem 1 provides an efficient criterion for SimRank relative order preservation, by finding a suitable  X  in Eq.(2), which is practically small and easy-to-compute. It suggests that, when SimRank is iteratively computed from Eq.(5), for any two node-pairs, if the gap of their k -th iter-ative scores is no less than  X  k := C k then we can determine, at iteration k , their correct ( X  X rue X ) relative rankings with respect to the exact SimRank scores.
Other important applications of Theorem 1 are top-K ranking and bucket ordering, as will be seen in Section 4. To prove Theorem 1, the following lemmas are needed.
Lemma 1. For every k = 0 , 1 ,  X  X  X  , and each j = 0 , 1 ,  X  X  X  , k , Proof. O ne can readily derive from Eq.(5) that from which it follows inductively that
Take k  X  k max norm on both sides, and apply the fact that k [ Q ] a, X   X  X  X  [ Q T ]  X ,b k to the above equation, it follows that
Intuitively, for a current iteration k , Lemma 1 provides an accuracy estimate for predicting new SimRank in the future j iterations, by using old SimRank in the past j iterations.
Lemma 2. For j = 1 , 2 ,  X  X  X  , the following estimate holds:
Proof. S ince Q j  X  Q j  X   X  1, by using the fact that we can obtain
I  X  C j  X  ( Q j  X  Q j )  X  1
Lemma 2 gives a neat bound for k ( I  X  C j  X  ( Q j  X  Q j ) ) which lays the foundation for the proof of Theorem 1. Such an upper bound is tight since it can be readily shown that  X = X  X n Lemma 2 is attainable whenever every node in a graph has at least one incoming edge.

Lemma 3. For every k = 1 , 2 ,  X  X  X  , and each j = 1 , 2 ,  X  X  X  , k , Proof. W e can readily verify by induction that Thus, we have
Taking vec (  X  ) operator on both sides, and then applying the tensor product  X  property, we have
On both sides, we first multiply by ( I  X  C j  X  ( Q j  X  Q and then take k  X  k  X  , which yields k S k  X  S k max  X k ( I  X  C j  X  ( Q j  X  Q j ))
Lemma 3 suggests that the accuracy of SimRank scores a t iteration k can be estimated by utilizing the old SimRank in the past j iterations.
 Combining Lemmas 1-3, we can prove Theorem 1.

Proof of Theorem 1. Since the iterative SimRank score monotonically increases to the exact solution with respect to
Setting j = k in Lemma 3, we denote by Then, Lemma 3 can be rewritten as k S k  X  S k max  X   X  k , which implies that, for every two node-pairs ( a, b ) and ( c, d ), Subtraction of the above two equations yields This implies that which completes the proof. T o appreciate the utility of our relative ranking criteria for SimRank ( RRCS ), we next illustrate two real applications. Notations. Let T be a permutation matrix that arranges all the entries of a vector in decreasing order, i.e.,
Given the above T , we also define  X s := T  X  vec ( S ). Note that the entries in  X s are generally not sorted in decreasing order, as opposed to those in  X s k .
 Top-K Ranking. One application of RRCS is to validate top-K node-pairs search, based on the following corollary.
Corollary 1. For every iteration p = 1 , 2 ,  X  X  X  , if then [  X s ] 1 ,  X  X  X  , [  X s ] K are the top-K highest SimRank scores. 3 R ecall that [  X s k ] vec ( S k ) stacks columns of S k on top of one another [9].
Proof. A s [  X s p ] 1  X   X  X  X   X  [  X s p ] K  X   X  X  X   X  [  X s p ] from Eq.(6) that, for all i = 1 ,  X  X  X  , K , and j = K +1 ,  X  X  X  , n 2 ,
By Theorem 1, we have [  X s ] i  X  [  X s ] j , for all i = 1 ,  X  X  X  , K , and j = K + 1 ,  X  X  X  , n 2 , which implies that [  X s ] 1 ,  X  X  X  , [  X s ] the top-K highest SimRank scores.

Corollary 1 tells that the X  X rue X  X op-K n ode-pairs w.r.t. the exact SimRank scores are the same as the top-K node-pairs w.r.t. the p -th iterative SimRank scores if the p -th iterative SimRank ranking scores between positions K and K +1 are well separated above a threshold.
 Bucket Ordering. Another application is bucket ordering. In this case, we need to assign SimRank scores of n  X  n node-pairs to several  X  X ucket X  intervals, as shown in Corollary 2. every iteration p = 1 , 2 ,  X  X  X  , if for u, v = 1 , 2 ,  X  X  X  , then [  X s ] K + u is ranked between ( K + 1) and ( K + u + v  X  1) .
Proof. Analogous to the proof of Corollary 1, [  X s p ] K  X  [  X s Thus, the rank position of [  X s ] K + u is after K .
Besides, from [  X s p ] K + u  X  [  X s p ] K + u + v  X   X  p and [  X s  X  X  X   X  [  X s p ] n 2 follows that [  X s p ] K + u  X  [  X s p ] K + u + v,  X  X  X  , n 2 . This implies that Hence, the rank position of [  X s ] K + u is before K + u + v .
Taking these together, we can obtain that [  X s ] K + u is ranked between ( K + 1) and ( K + u + v  X  1).

Corollary 2 assigns SimRank score [  X  s p ] K + u to a  X  X ucket X  that represents a rank interval [ K +1 , K + u + v  X  1]. Indeed, the top-K ranking in Corollary 1 is a special case of bucket ranking with two (interval) X  X uckets X : [1 , K ] and [ K +1 , n 2 ].
We present an empirical study on real networks to evalu-ate the usefulness of our criteria for ranking node-pairs. Datasets. Two real networks are used: 1) Enron , an email communication network from Enron, with 367,662 edges and 36,692 nodes. 2) Amazon , an Amazon product co-purchasing graph, with 1,234,877 edges and 262,111 nodes. C++, and use a machine with an Intel Core(TM) 3.10GHz CPU and 8GB RAM, running Windows 7.
 Results. By tying our ranking criterion of Corollary 2 to algorithm [5], Figure 2 shows how many distinct ranks can be identified ( i.e., the number of buckets) and how many elements per bucket ( i.e., bucket sizes) at the last iteration ( k = 10) 5 . To ensure better visibility for top-ranked buckets, we omit the rightmost bucket (whose size is the largest, yet contains node-pairs with the smallest SimRank scores). The detailed information is depicted in Table 1, where we see that on Enron , 8.6% of the smallest node-pairs cannot SimRank algorithms [1,6,15], yielding the same results. 5 As used in [5], the total iteration number k is set to 5 X 10. Table 1: Statistical Information of Bucket Ranking Figure 2: Bucket Ranking on Real Networks ( k = 10 ) be ranked, whereas on Amazon , this number increases to 58.2%. Among the top-100 ranking results, 91 ( resp. 100) node-pairs on Enron ( resp. Amazon ) are exactly ranked. These indicate the effectiveness of our ranking criterion for identifying SimRanks of the top-ranked node-pairs.
This paper provides several useful relative ranking crite-ria for SimRank iterations. Important applications of our ranking criteria include top-K ranking and bucket ordering.
As a future avenue, we will incorporate these criteria for K nearest neighbor search and other similarity models [16,17]. Acknowledgements. This research is supported by NEC Smart Water Network research project.
