 Recently, tools for browsing XML Schema documents have become popular, but they cannot support advanced browsing functionalities. We have implem ented a new graphical schema browser which provides traversals not only along a composition hierarchy but also along a type hierarchy defined in the documents. In this dem onstration, we show how users can quickly and easily understand the semantic structures by freely navigating to any datatypes or elements located at any position in the hierarchies. H.2.1 [ Database Management ]: Logical Design  X  Schema and subschemas. Algorithms, Design, Human F actors, Standardization. XML Schema, Schema browser, XNavi. W3C X  X  XML Schema introduces powerful ways to integrate core principles of object-oriented modelling concepts such as composition and inheritance when defining document structures. In an object-oriented schema, all composition relationships related to each other form a single tree called composition hierarchy. Furthermore, if multiple inheritances are not allowed, all inheritance relationships in the schema form another tree called type hierarchy. In object-oriented modelling, a schema usually has complex structures because each object might participate not only in a composition hierarchy but also in a type hierarchy. In the XML Schema document, we can identify four kinds of traversals from a given datatype or element located at a composition or type hierarchy of a schema. From the viewpoint of the composition hierarchy, let the direction of navigation from a datatype to one of its child elem ents be called forward, and an opposite direction from an element to its parent datatype as backward. Similarly, from the viewpoint of the type hierarchy, let the direction of the navigation from a datatype to its supertype be called upward, and another opposite direction from a datatype to one of its subtyp es as downward. When defining new schema or reviewing/modifying existing schema, it would be desirable to get a global view on the schema fast and easily. Some software tool s that allow users to browse the contents of the schema through vi sual user interfaces have been developed. The graphical user interfaces (GUIs) of the existing tools such as SchemaViewer by Frank Kilkelly, xmlDraft of SysOnyx, XSBrowser of LuMriX and XMLSpy of Altova display composition relationships in an XML Schema document by providing a tree view that represents a composition hierarchy between related datatypes and el ements. However, the GUIs have the following limitations. First, in an XML Schema document, a datatype can be associated with several elements as their binding datatype, and an element can also be contained in several datatypes as their child element. If users easily identify that a given datatype or element has multiple binding elements or parent datatypes respectively, they can navigate backward to either one of the binding elements from the given datatype or parent da tatypes from the given element. This requires graphical backward navigation capability which the existing tools do not support. Sec ond, for a given datatype in a composition hierarchy of an XML Schema document, it is inconvenient to navigate downwar d to one of its subtypes or upward to its supertype because there is no graphical indication for existence of the subtypes or supertype and links to them. In order to address the limitations of the existing tools, the XNavi prototype has been developed. XNavi is a graphical schema browser for XML Schema documents. The philosophy behind our XNavi is that it will be more convenient for schema browsing if a composition hierarchy and a type hierarchy described in an XML Schema document are concurrently displayed or coexist in a single GUI screen. In XNavi schema diagram (see figure 1), semantic structures of an XML Schema document are disp layed on a schema diagram where schema components includi ng datatypes and elements and their relationships are represen ted with appropriate graphical symbols. An element, a datatype, or an element associated with its binding datatype is represented with a rectangular box having their name(s) inside it. In the di agram, all lines that represent composition relationships are dr awn horizontally from left to right, and all bold lines that repres ent inheritance relationships are drawn vertically from top to bottom. Therefore, traces of successive horizontal lines from le ft to right means navigating forward and vice versa as navigating backward along a composition hierarchy. Similarly, traces of successive vertical bold lines from top to bottom or inverse means navigating downward or upward along a type hierarchy, respectively. For example, in Figure 1, the Vehicle is a root of a composition hierarchy having the Body and the DriveTrain as its children, and also that of a type hierarchy having the Automobile and the Truck as its subtypes. In the diagram, users clearly identify that, in the content model of the Automobile, the Body and the DriveTrain are inherited from its supertype Vehicle, and the remaining Trunk is defined locally. Also, the Auto mobile has its own subtypes, the Coope and the Sedan. Figure 2 shows another sc hema diagram utilized in XMLSpy[1]. With th e diagram, users cannot identify that, in the content model of the Automobile, which parts are inherited or defined locally. Also, there is no visual indication of existence of subtypes or s upertypes of the Automobile. The existing tools such as XMLSpy just support forward traversals along a composition hierarchy. However, our XNavi supports not only forward traversals but also backward by providing two special list of candidate binding elements and parent datatypes. With XNavi, in order to navigate backward from a datatype, a binding element of the datatype can be selected among its candidate binding elem ents. Also, when navigating further backward from a selected element, a parent datatype of the element can also be selected among its candidate parent datatypes. Furthermore, XNavi supports dow nward and upward traversals along a type hierarchy which are not supported by any of the existing tools. In XNavi schema diagram, each rectangular box representing a datatype might have an inheritance indicator located on center of bottom side of the box, if it has subtypes. Using the inheritance indicator, users can navigate downward by unfolding a new portion of interest . Also, in order to navigate upward from a datatype, a supertype of the datatype can be selected among its candidate supe rtypes. For this purpose, XNavi provides a list of candidate supertypes. The XNavi software architecture is shown in Figure 3, which can be viewed as three distinct laye rs: schema engine, graphic engine, and GUI controls. The schema engine parses XML schema documents, and constructs semantic structures of the documents that represent all composition and inheritance relationships between schema components de fined in the documents. The graphic engine builds visual structures of the documents by linking related schema components into a display unit and adding visualization-specific information to the display unit. With the visual structures, the graphic engine draws any portion of a schema diagram of the documents according to user interactions. We proposed a compact schema diagram for visually representing complex relationships between data types and elements inherent in XML schema documents. Also, we have implemented a new graphical schema browser XNavi utilizing the diagram. XNavi can support any combination of forward, backward, upward and downward navigations along a composition or type hierarchy, which will greatly help users to quickly and easily understand semantic structures of the documents. [1] Altova GmbH, XMLSpy Enterp rise Edition User Manual, 
