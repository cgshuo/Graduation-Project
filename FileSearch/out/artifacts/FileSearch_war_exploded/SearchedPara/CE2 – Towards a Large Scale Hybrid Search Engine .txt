 The Web contains a large amount of documents and increas-ingly, also semantic data in the form of RDF triples. Many of these triples are annotations that are associated with doc-uments. While structured query is the principal mean to re-trieve semantic data, keyword queries are typically used for document retrieval. Clearly, a form of hybrid search that seamlessly integrates these formalisms to query both docu-ments and semantic data can address more complex infor-mation needs. In this paper, we present CE 2 , an integrated solution that leverages mature database and information re-trieval technologies to tackle challenges in hybrid search on the large scale. For scalable storage, CE 2 integrates database with inverted indices. Hybrid query processing is supported in CE 2 through novel algorithms and data structures, which allow for advanced ranking schemes to be integrated more tightly into the process. Experiments conducted on Dbpedia and Wikipedia show that CE 2 can provide good performance in terms of both effectiveness and efficiency.
 H.3 [ Information Storage and Retrieval ]; E.2 [ Data Storage Representations ] Algorithms, Design, Experimentation, Performance Hybrid Search, Annotations, Scalable Storage, Ranking
Recently, we have seen a strong increase in the availability of semantic data, RDF triples in particular. DBPedia and DBLP are two example repositories that contain millions of triples. Often, this data is associated with documents in the form of annotations. Currently, keyword search is commonly supported for the retrieval of documents. Beyond document retrieval, semantic data available on the Web represents a source of knowledge, which can addresses other retrieval sce-narios. Instead of documents, the engine might deliver con-crete answers to the user as a result of a complex question that is represented as a structured query. More specialized systems such as Digital Library applications also employ hy-brid queries , a special structured query that also contains keyword elements. This type of queries is ideal for doing hybrid search [1], a paradigm that allows for querying over textual data and semantic data in an integrated way.
Hybrid search on the large scale web environment however bring about more challenges. In particular, it requires the capability to store , index and integrate the large amount of documents and semantic data. Also, there is a need for scal-able query processing such that results can be returned with satisfactory response time. Another aspect that is crucial in the Web environment is ranking . In this paper, we elab-orate on infrastructure components that are necessary to support large scale hybrid search. In particular, we address the above challenges through the following contributions:
Resources in hybrid search are represented through a graph based model G that contains entities, documents, their re-lations and attributes.

Definition 1. A resource graph G is a tuple ( V, L, E ) where
Vertices corresponding to entities and documents are iden-tified by Uniform Resource Identifiers (URIs). As identifiers for other elements, we use class names, literals, texts and edge labels respectively. Note that annotation plays a par-ticularly important role in hybrid search as it captures the associations between a document and other resources. There are entity annotations, class annotations and complex anno-tations such as triples that are represented in terms of a resource graph.
In order to query the resources defined above, we extend the notion of conjunctive queries defined in [2] as follows:
Definition 2. A hybrid query q is an expression of the form ( x 1 , . . . , x k ) .  X  x k +1 , . . . x m . A 1  X  . . .  X  A x k are called distinguished variables, x k +1 , . . . , x m undistinguished variables and A 1 , . . . , A r are query atoms. These atoms are of the form p ( v 1 , v 2 ), where p  X  L \{ subclass } is called predicate, and v 1 , v 2 are called variables or terms.
We further restrict the query pattern to be tree shaped with only one single distinguished variable that is the root. This leads to a more efficient search process while a large portion of user information needs can still be expressed.
A solution to q on a resource graph G is a mapping from the variables in the query to vertices e such that the substitu-tion of variables in the graph pattern would yield a subgraph of G . The substitutions of distinguished variables constitute the query answers.
Considering the specific nature of hybrid queries, two prin-ciples are proposed to guide the design of the ranking scheme.
CE 2 comprises of a repository and a query engine. Fig. 1 shows the decomposition of CE 2 into two main components. The first one is the repository. Text data associated with entities and documents as well as annotations are stored in separate inverted indices, and the remaining semantic data is kept in the database. The second component is a hybrid query engine that comprises of several submodules. The Query Planner decomposes a query into several parts, which are processed by Atomic Query Executor. These results are fed into the Query Result Combiner and finally, to the Answer Ranker. CE 2 is implemented in Java on top of a DB2 database and Lucene. Experiments are conducted on RDF data contained in DBpedia and documents from Wikipedia. We compare the ranked results produced by CE 2 against keyword search in Lucene and query support in DB2 with Text Extender. It achieves 40 percent and 20 percent improvements for P@10 respectively while preserving affordable response time.
In this paper, we have elaborated on a model for hy-brid search. With respect to this model, we have leveraged database and IR technologies to scale over large amount of resources. In particular, we have presented CE 2 to sup-port hybrid query processing against these resources with tightly integrated ranking. We further plan to exploit data uncertainty for ranking and adopt more advanced query op-timization strategies into the evaluation of hybrid queries. [1] R. Bhagdev, S. Chapman, F. Ciravegna, V. Lanfranchi, [2] I. Horrocks and S. Tessaris. Querying the semantic web:
