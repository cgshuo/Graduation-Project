 Time-biased gain provides a unifying framework for infor-mation retrieval evaluation, generalizing many traditional effectiveness measures while accommodating aspects of user behavior not captured by these measures. By using time as a basis for calibration against actual user data, time-biased gain can reflect aspects of the search process that di-rectly impact user experience, including document length, near-duplicate documents, and summaries. Unlike tradi-tional measures, which must be arbitrarily normalized for averaging purposes, time-biased gain is reported in mean-ingful units, such as the total number of relevant docu-ments seen by the user. In prior work, we proposed and validated a closed-form equation for estimating time-biased gain, explored its properties, and compared it to standard approaches. In this paper, we use stochastic simulation to numerically approximate time-biased gain. Stochastic simu-lation provides greater flexibility that will allow us, in future work, to easily accommodate different types of user behavior and increase the realism of the effectiveness measure. H.3.4 [ Information Storage and Retrieval ]: Systems and Software X  Performance evaluation (efficiency and ef-fectiveness) Information retrieval, search evaluation
In order to achieve the advantages of both user-oriented studies and system-oriented tests, while ameliorating some of their disadvantages, we propose a time-biased gain (TBG) effectiveness measure. We published an initial exposition and validation of TBG in prior work [10]. In its most general form, TBG can be written as the Riemann-Stieltjes integral In this formula, G ( t ) represents a cumulative gain function, monotonically increasing with time t .

Imagine a user working down through a result list returned by a commercial search engine, which typically consists of a ranked list of query-biased summaries, ten or so to a page. The user starts by reading the title and description associ-ated with the first summary. Deciding it might be interest-ing, she clicks on the URL and reads the document for a while. Eventually, she returns back to the result list. She quickly skips the second result, which looks unpromising, but clicks on the third, reads it, returns, and so on down the list. In a scenario such as this one, G ( t ) represents the cu-mulative gain experienced by the user as time passes, where in this scenario gain might be measured by the total number of relevant documents viewed. Other scenarios would pro-duce other cumulative gain functions, perhaps measured in other units.

Eventually, the user will decide to stop working. TBG as-sumes that this decision depends on time alone, independent of other factors, including cumulative gain. In Equation 1 the decay function D ( t ) indicates the probability that the user continues until time t ,with D (0) = 1, and with D ( t )de-creasing monotonically to 0 as t  X  X  X  . In our prior work [10], we adopted an exponential decay function, a choice which we supported through an analysis of queries and clicks taken from the logs of a commercial search engine.

The value N represents a normalization factor, which may be desirable for averaging scores across multiple queries. Since total gain may be expressed in meaningful units, e.g., total number of relevant documents viewed, normalization may not be required, allowing us to set N = 1. However, in some circumstances, it may be reasonable to normalize by the maximum gain possible over a given test collection, or over any test collection. In our prior work [10], we did not normalize TBG, setting N =1.

If gain is a step function  X  e.g, because gain is realized af-ter the user finishes viewing a document  X  then Equation 1 reduces to where the gain g k represents the benefit (i.e., utility) to the user of viewing the document at rank k ,and T ( k )isthetime it takes the user to finish viewing the document at rank k . In our prior work [10], we adopted gain values representing probabilities of relevance, i.e., the value of g k represents the probability that the user judges the document at rank k to be relevant, a choice supported by some current interpreta-tions of graded relevance [3,4].
 In the remainder of this paper, we work with the form of TBG shown in Equation 2, with an exponential decay func-tion, no normalization, and gain values representing prob-abilities of relevance. This equation implicitly assumes the scenario of a user with a topical information need, working their way down a result list, searching for as much relevant information as possible. This scenario roughly corresponds to the assumptions underlying many TREC retrieval exper-iments, including test collections from the TREC 2005 Ro-bust Track experiments [13], which we use to calibrate and validate our work.

In our prior work, we estimated T ( k )bywayofasimple model of an idealized user working down the result list. This user model incorporates the time to read a summary, the probability of clicking on a summary, and the time to read a document of length l words. We calibrated this model from a user study in which we presented subjects with an interface styled after a modern web search engine, including a result page with ten query-biased summaries, and instructed them to find and save as many relevant documents as possible in the time allocated, while making as few mistakes as possible. Results from this user study were applied to set calibration parameters within the model.

The outcome of this prior work is a closed-form equation for estimating TBG. The closed-form nature of the equation provides us with the comfortingly familiarity of a traditional effectiveness measure, while enabling a closer association with actual user behavior and a meaningful interpretation in terms of the number of relevant documents seen. By re-lating the depth in the result list to the time invested by the user, TBG appropriately handles aspects of user behavior not normally handled by traditional effectiveness measures, such as the impact of summaries, near-duplicate documents, and document length.

In the current paper we take the development of TBG one step further. Abandoning the restriction of a closed-form equation, we view G ( t ) as a random process and approx-imate TBG using stochastic simulation while maintaining the model of a single idealized user. As we will discuss in Section 5, moving to a simulation will allow us in future work the ability to easily move to modeling a population of users where we can both estimate the expected total gain, and the distribution of gain for the population. In addition, the simulation will allow us to more easily conduct what-if experiments that could be difficult to perform with actual humans.
Simulations are widely used to model and predict the be-havior of systems where direct mathematical modeling is infeasible. For TBG, the time at which gain is realized de-pends on all of the preceding actions taken by the user. Un-less we use a very simple model of behavior where the time to perform actions are constant, it becomes very difficult to estimate the times when gain increases. As such, we utilize Summary Summary stochastic simulation to allow for the easy computation of TBG and to allow for future work with more complex user models.

As mentioned in the introduction, our user model has the user process a ranked list of documents displayed in a hy-pothetical user interface. This hypothetical user interface displays document summaries (snippets) that are designed to help the user decide whether to click on the summary or not. When the user clicks on a summary, the user is shown the full document and can decide to either save the document as relevant or  X  X o back X  to the list of document summaries.

Our simulated user processes the ranked list one document at a time from the top of the list (rank 1) to the end of the list. Our model of user behavior is an extension of the existing behavior modeled by other metrics that incorporate document summaries [5,12,14] with the important addition of time. Viewing a summary and deciding to click on it takes a certain amount of time. Likewise, if a full document is viewed, the viewing and the decision to save the document as relevant or not takes a certain amount of time.
In the context of a single ranked list, we compute the TBG for list L as: where B is the number of samples, and TBG ( L, U )isasam-ple of TBG given the user model U . We produce a sample of TBG by running the simulation with its user model once down the ranked list.

Figure 1 shows a graphical representation of the user model and how a single sample of TBG is calculated. Our model can viewed as a semi-Markov model. Each summary and document in the ranked list of results corresponds to a state in the model. In addition the model has a state that repre-sents the saving of a document as relevant. The user spends time in the view summary and view document states before transitioning to the next state. The save document state takes no time and merely exists to make the model easier to view. The transition probabilities between the states depend only on the relevance of the document at that rank. The user attains gain for each relevant document saved. The gain is reduced by a decay function, D ( t ), that is de-signed to model the probability that the user will continue working to time t .

The parameters of the model include the time to judge a summary, T S , the time to judge a document of length l , T
D ( l ), the probability of clicking on a summary given the relevance of the document, P ( C | R ), and the probability of saving a viewed document as relevant given the document X  X  relevance, P ( S | R ). Let r i be the TREC (NIST) binary rel-evance judgment associated with the document at rank i , where r i = 1 if the document is relevant, r i =0otherwise. In our previous work [10], the time to judge a summary, T , was a constant value, and the time to judge a document, T
D ( l ), was a linear function of the document X  X  length l .The probabilities of clicking a summary and saving a document were also constants. We modeled decay, D ( t ), as exponential decay with a fixed half-life. Using a closed form equation, the TBG was an exact value for a given ranked list. This is in the same fashion as most other metrics  X  given a ranked list, a single score represents its quality. For TBG, its score is an estimate of the expected number of relevant documents savedbyanaverageuser.

In this paper, rather than a fixed time to judge a summary, we pull times from a distribution that captures the reality that summaries are not all judged in the same amount of time. Likewise, we draw, from a distribution, times to judge documents.

With distributions of times, and probabilistic transitions between the states of our model, we have a stochastic sim-ulation where we have our simulated user process a ranked list repeatedly following the user model. The precision of our estimate of TBG is only limited by the number of sam-ples B we are willing to take from the simulation. In other words, the stochastic simulation can have the same precision in its estimate of the gain as a closed form solution has.
In the previous section, we outlined the simulation X  X  user model. To effectively simulate the processing of result lists using the model, we need to calibrate it based on actual user behavior. To do the calibration, we use data from a user study conducted by Smucker and Jethani [11].
The user study asked study participants to search ranked lists and save as many relevant documents as possible while making as few mistakes as possible. We designed the web-based user interface to look like a typical web search engine. Participants interacted with two types of web pages: a sum-maries page and a full document page. The summaries page displayed 10 query-biased document summaries. Clicking on a summary would take the participant to the full document page. Summaries could be skipped and clicked on in any order. At the bottom of the summaries page, participants could click links to go to the next or previous 10 summaries in the results list. On the full document page, the partici-pant could choose to save the document as relevant or could use their web browser X  X  back button to go back to the sum-maries page without taking any action on the document. The result lists were fixed, i.e. the interface did not provide for any means to query and generate new result lists. Our web-based system recorded the times of all clicks, saves of documents, and time spent on a page as well as what was clicked or saved.

The study used 8 topics from the TREC 2005 Robust track that were selected to not be dated and also to pos-sibly have some appeal to participants. The TREC 2005 Robust track used the AQUAINT collection of newswire documents. After receiving ethics approval, we recruited participants until we had completely balanced study with 48 participants. Each participant worked on 4 of the search topics, and worked on a single topic X  X  results list for 10 min-utes. Search topics were balanced across participants, task order, and result list precision.

The user study had two purposes. The first purpose was to study the relationship between user performance and re-sult list precision, and we have previously reported that we found a positive relationship between precision and perfor-mance [11]. The second purpose of the study was to collect behavioral data for the calibration of time-biased gain.
The result lists were fixed to have uniform precisions of either 0.3 or 0.6. We choose the two precisions based on the precision at rank 10 performance of the better (0.6) and lower (0.3) performing runs submitted to the TREC 2005 Robust track. By uniform precision, we mean that every 10 results had either 3 or 6 TREC judged relevant docu-ments and 7 or 4 non-relevant documents. We carefully constructed the lists such that documents more likely to be at the top of a ranked list were more likely to be at the top of our lists. The end effect was that we were able to control the precision of the lists while the study participants still had a realistically difficult task of distinguishing relevant from non-relevant documents. Full details of the study, including result list construction and screenshots of the interface, can be found in [11].
With data from the user study, we need to find a way to calibrate the user model. Table 1 gives a summary of the calibration values, which we next describe in detail.
Perhaps the easiest parts of the user model to calibrate are the transition probabilities between the states. We use the same method as we did in our previous work [10]. Each par-ticipant completed 4 search topics. For each search topic, we estimate the participant X  X  probability of clicking on a summary, P ( C | R ), and the probability of saving a viewed full document, P ( S | R ). To estimate the overall probabil-ities, we compute a weighted average of the individual es-timates. For each document, we know its relevance given the TREC relevance judgments and can easily compute the fraction of viewed relevant documents that were saved by a user, P ( S =1 | R = 1), as well as the fraction of viewed non-relevant documents that were saved, P ( S =1 | R =0). To compute the probability of clicking on a summary, we will assume that all summaries up to and including the last summary to be clicked on were viewed. With this assump-tion, we can compute the probabilities for clicking on a sum-mary in the same fashion as those for saving a document. To compute the weighted averages, we weight each partic-ipant X  X  per-topic P ( S | R ) estimates by the number of doc-uments viewed for that topic. The weight for each of the P ( C | R ) per-topic estimates is the maximum rank clicked for that topic by the participant.

For the time spent judging a document summary and the time spent judging a viewed full document, we want prob-ability distributions that reflect the variance in the times it takes to complete these actions. We will first address the Parameter Description Value
P(C=1 | R=1) Probability of click on relevant
P(C=1 | R=0) Probability of click on non-
P(S=1 | R=1) Prob. of save/judge relevant
P(S=1 | R=0) Prob. of save/judge non-Table 1: Calibration values. All time is measured in seconds, and units can be derived from descriptions of equations in text. P(S=1 | R=0) is not used, but is shown for completeness. construction of distributions for the summaries and then the distributions for the documents.

Our web-based user interface recorded the time spent on the page of summaries before the participant took some ac-tion to leave that page. Without an eye-tracker, we do not know how much time a participant spent looking at specific summaries. However, our user model does require an esti-mate of time spent on each summary, regardless of whether or not the summary is clicked. As with estimating the proba-bility of clicking on a summary, we will assume that all sum-maries up to and including the last summary to be clicked were viewed by the participant.

We estimate the time spent per summary for a partici-pant as follows. For each topic t ,wehaveaset S t of times spent on the summary page. We exclude times less than 0.5 seconds as being likely data collection errors. We distribute each of the | S t | times over M t / | S t | summaries, where M the maximum rank reached by the participant on topic t . Thus, if we let S it be the i -th time for topic t , we transform it to be: Using all of the S times for all participants, we then perform a maximum likelihood fit of a Weibull distribution to these times. We used the fitdistr function of the MASS library in the R [8] statistical software package to perform the fit. The Weibull distribution is widely used as a distribution to model the time to complete a task [9], and has been used by others to model user times in search tasks [1,7].
The Weibull distribution is characterized by two parame-ters:  X  and  X  where  X  is known as the shape parameter and  X  is known as the scale parameter. For the user model to produce random deviates of the time to judge a summary T ,given  X  and  X  , we can generate a random deviate from the Weibull distribution as follows: where u is a random deviate drawn uniformly from the range (0 , 1] [8].

We have found that the time it takes to judge a document is related to the document X  X  length. The longer a document, the longer the average user takes to judge the document. We have also found that participants take much less time to judge a near-duplicate of a document that they have al-ready seen in the ranked list. We identified near duplicates using an approach based on Broder X  X  algorithm [2] and only consider documents with the highest possible similarity to be duplicates (10.1% of the collection). With respect to the ranked list, the first occurrence of a near-duplicate is a  X  X irst viewed X  document, and near-duplicates at lower ranks are simply called  X  X uplicates X .

For first viewed documents, we fit the recorded times spent on the full document page with a linear model. We first took the log of the time spent on the page. Thus, we fit the following model: log( t )= al + b ,where t is the time in seconds to judge the document, a is the scan rate in seconds per word, l is the length of the document in words, and b is a constant amount of time in seconds to read and decide on the document X  X  relevance. There is considerable variance in the time to judge documents, but once document length is considered, document relevance and list precision do not help to explain the variance in time to judge [10].
We have found that the time to judge duplicates does not depend on document length. As such, for duplicates, we use a fit of a log-normal distribution to the time to judge documents for the whole population of participants. A log-normal distribution is the equivalent of a normal distribution fit to the log of the variable of interest. For duplicates, the mean  X  d and standard deviation  X  d of the distribution are 1.24 and 1.03 log seconds respectively.

For the user model to produce random deviates of the time to judge a document, we have a function that has parame-ters: l length of document, a slope of linear fit, b intercept of linear fit,  X  f the standard error of the residuals of the linear fit, F a binary indicator that is 1 if the document is a first viewed document or 0 if a duplicate, and  X  d and  X  d of the duplicates log-normal distribution. As such, T D is: T
D ( l )=exp( al + b +  X  f u ) F + exp(  X  d +  X  d u )(1  X  F )(7) where u is a random deviate drawn from a normal distribu-tion with a mean of zero and a variance of 1.
 The final part of our user model, is the decay function D ( t ). In our previous work, we fit an exponential decay to data from an interaction log taken from a commercial search engine. Microsoft made this anonymized log available to selected IR researchers during 2006 and 2007. We use the same function in this paper: where h is the  X  X alf-life X  of users, i.e., the time at which half of the initial users have stopped scanning the result list. The fit curve has a half life h equal to 224 seconds.
Our simulation is a model of a single, idealized user. As with all model development, we need to assess the fit of the model so as to understand the model X  X  ability to make useful predictions. Each sample of the stochastic simulation determines at what times relevant documents are saved and the gain at these times is reduced by the computed decay D ( t ) at these times.

In this paper, we have not developed D ( t )beyondwhatwe have previously presented [10]. As such, what matters in the validation of the stochastic simulation, is the simulation X  X  ability to provide good estimates of the cumulative gain at time t .

For our validation of the stochastic simulation, we focus on its ability to produce a good estimate of the expected gain at 10 minutes on the same result lists as used by the study participants. The user study required participants to work for 10 minutes. At the 10 minute mark, the partici-pants stopped working. For each of the 8 search topics, the user study had 2 result lists. One result list had a uniform precision of 0.3 and the other had a uniform precision of 0.6. For each level of precision, the user study produced 96 samples of the number of relevant documents saved by par-ticipants in 10 minutes. All participants did 2 topics with a precision of 0.3 and 2 topics with a precision of 0.6.
For the user study, the mean number of relevant docu-ments saved in 10 minutes was 7.4 and 10.9 for the 0.3 and 0.6 precision lists respectively. We ran the simulation with B = 10000 samples per result list to produce 10000 sam-ples of the cumulative gain at 10 minutes. Each saved rele-vant document adds 1.0 to the cumulative gain. To match the user study conditions, we did not apply any decay, i.e. D ( t ) = 1. At 10 minutes the simulation X  X  average gain and standard error is 6.63  X  0.03 and 11.78  X  0.04.

To assess the fit of the simulation to the user study, we need to compute a confidence interval for the mean to deter-mine if the simulation X  X  estimates fall inside or outside that confidence interval.

The 95% confidence interval for the user study X  X  mean number of relevant documents saved is 6.1-8.6 for the 0.3 precision lists and 9.2-12.6 for the 0.6 precision lists. Thus, for both precisions, the simulation X  X  estimate of the mean number of relevant documents saved in 10 minutes is not a statistically significant difference.
Being a stochastic simulation, the B samples of TBG that we produce form a distribution. By taking enough samples, we can obtain a precise estimate of the expected gain. The variance in the distribution of TBG represents the variance in gain for the single idealized user in our simulation. In future work, we intend to replace the single user model with a set of user models U that are representative samples from a population of users U . Indeed, if we create a user model for each participant in the Smucker and Jethani user study [11], we should be able to produce a distribution of gain that matches that of the user study. By modeling user variance in TBG, we will be able to measure, on a per-topic basis, the effect size [6] of performance differences.
Time-biased gain (TBG) produces estimates of IR sys-tem performance in human terms. TBG has a model of user behavior that it uses to predict the expected number of rele-vant documents saved by users. In this paper, we presented a stochastic simulation that allows TBG to be estimated with high precision. We calibrated the simulation with data from a user study and then validated the simulation X  X  fit. The simulation produced estimates of the number of rele-vant documents saved that were within the 95% confidence intervals of the user study means.
David Hu wrote the software to compute the sets of near-duplicate documents.

This work was supported in part by the Natural Sciences and Engineering Research Council of Canada (NSERC), in part by GRAND NCE, in part by Google, in part by an Amazon Web Services in Education Research Grant, in part by the facilities of SHARCNET, and in part by the Univer-sity of Waterloo.
