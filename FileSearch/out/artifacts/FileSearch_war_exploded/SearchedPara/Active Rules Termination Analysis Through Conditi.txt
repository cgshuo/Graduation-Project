 Recently, active rules have been introduced into many new areas including XML most commonly follows the Event-Condition-Action (ECA) paradigm. 
Certain rules are triggered initially and their execution can trigger additional rules But termination decision of a rule set is an undecidable problem [7]. 
Some methods propose a translation of the active rules in term of rewriting system, or deductive rules [8, 9]. However, [8] requires the definition of a well-founded term the equivalence of translation from ECA rules to deductive rules. This requirement cannot always be determined by a rule set. Other methods introduce some methods data structures to examine all properties. 
Most of the works about the active rules termination can be classified into two major categories. The former uses the concept of triggering graph (TG). [6] assumes that the absence of cycles in a triggering graph guarantees the termination. But if such graph (AG) where an edge will be removed unless it is in a cycle or reachable from a cycle and it can be re-activated after a sel f-deactivation. [13] proposes a sophisticated technique for building Activation Graphs, which complements nicely with the analysis. All these methods [6, 12] have a common drawback: they do not concern whether all of rules can be executed at the same cyclical execution of a cycle. 
The methods of the other category, which are based on a formula, concern the above problems. [14] construct a conjunct based on the trigger conditions of two But such a formula constructed by [15, 16], can only contain non-updatable variables or finitely-updatable variables. Unfortunately, how to determine a finitely-updatable variable is known as a NP-problem [16]. From the following examples in this paper, many active rule sets, which only contain updatable variables, can still terminate. work are introduced. Section3 presents two motivating examples. Section4 proposes the method to construct a formula. In section5, we show how to analyze the termination of a TG cycle by our methods, and expose our algorithm for termination analysis. Finally, section6 concludes the paper with directions to future work. 2.1 Active Rules The active rules are structured according to paradigm Event-Condition-Action. An ECA rule has the general syntactic structure: on event if condition do actions
Event is either data operation event (inside of the Database system) or event always expressed as database queries. Action is generally composed of a sequence of database updates, or of a procedure containing database updates. corresponding event in r j . This relation can be described with Triggering Graph (TG); TG can be constructed in means of a syntactic analysis of rules [6]. 
From the following examples, we can see the definitions of a rule set and its associated triggering graph. 2.2 The Rule Execution Model Coupling modes allow to specify the evaluation moment of the Condition Part (E-C coupling), or the execution moment of the Action Part (C-A coupling). The most frequent modes are shown as follows. z immediate , in which case the condition (action) is evaluated (executed) z deferred , in which case the condition (action) is evaluated (executed) within In this paper, E-C coupling and C-A coupling use immediate mode. 
Cycle policy addresses the question of what happens when events are signaled by the evaluation of the condition or action of a rule. Database systems always support a recursive cycle policy for immediate rules. In this case, event signaled in the process of condition and action evaluation make them suspended. Thus, any immediate rules monitoring the events can be processed at the earliest opportunity. 
The scheduling phase of rule evaluation determines what happens when multiple rules are triggered at the same time. In this paper, scheduling is All Sequential . Thus, the system fires all rule instantiations sequentially. satisfied, then event-consuming policy is adopted [18]. That is, the system eliminates the rule from the triggered rules set. 
Details about the Rule Execution Model presented here can be seen in [17, 18]. as Oracle X  X  triggers. Example 1. Six triggers are defined on four tables: R (A, B, C, D), S (H, L), Q (I, F), { r , r 5 , r 6 } . Under our assumption of active rules X  execution semantics presented in section2, R and R 2 cannot be synchronously executed at the same time. cannot be triggering reachable from R 1 . execution of R 2 ends. cannot be synchronously executed with R 2 at the same time since it cannot be triggering reachable from R 2 . 
Thus, this rule set always terminates. All attributes in the conditions of this rule set are updatable and no finitely-updatable attribute can be detected by [16]; No edge can be removed from TG by [12], so [12, 16] cannot deal with such a termination case. Example 2. Six triggers are defined on four tables: R (A, B, C), S (H, M, L), Q (I, N), R { r 4 , r 5 , r 6 } .

Let us analyze the termination of R 1 . There are three variables in the conditions of updated all time. That is, if it has been updated by +  X  L , the other side of a predicate containing S . L should be updated by - X  L . When r 3 is selected as the current triggered 
Secondly, S . M is selected to construct a formula. Since S . M is not updated by this rule set and ( S . M =0) can be regarded as true, r 2 can be really executed. cannot be really executed and R 1 must be termination. 
Let us analyze the termination of R 2 . There are three variables in the conditions of updatable when R 2 is cyclically executed according to active rules X  execution semantics presented in section2. executed and R 2 must be termination. 
Thus, the rule set in example2 is always termination. Such a termination case determined by [14-16]. Definition 1. A rule r j is directly trigg ering reachable from a rule set R if there is a if it is directly triggering reachable from R or if there is a rule r t , which is triggering reachable from R, such that &lt; r t , r j &gt;  X  TG.
 triggering reachable from { r 1 , r 2 , r 3 }. Definition 2. In TG, a path &lt;r 0 , r n , r 0 &gt; is called as a TG cycle . simplified, it is always indicated by a symbol as R 1 { r 1 , r 2 , r 3 } in this paper. reachable from R, r cannot be synchronous ly executed with R at the same time. Proof. The conclusion can be proven by contradiction. Assuming that r can be executed following a rule r  X  which belongs to R , it must be followed that r  X  can trigger contradiction with the precondition of theorem1. So the conclusion holds. Through theorem1, those variables in the conditions of all rules in R , which are selected to construct a formula for R , should not be updated by r . Definition 3. A variable X is a non-updatable variable of a TG cycle R, if X is in the conditions of rules in R but is not in the actions of any rule in R or any rule that does not belong to R but can be triggering reachable from R . must not be updated when R is cyclically executed. Definition 4. A variable X is an updatable variable of a TG cycle R, if X is both in the conditions and in the actions of rules in R but is not in the actions of any rule that does not belong to R and can be triggering reachable byR . Example 5. In example2, there are three variables in the conditions of all rules in R 2 : which does not belong to R 2 but can be triggering reachable from R 2 , so Q . N and T . E are both non-updatable variables of R 2 . However, T . F is an updatable variable of R 2 . formula based on it for R . So we define the following notion. Definition 5. In a TG cycle R, a rule r is a dividing point of an updatable variable X if the action of r assigns an original value to X . dividing point of S.L . 4.1 Onstruct a Formula Based on Non-updatable Variable conditions of rules in R . To construct such a formula can adopt the method in [15, 16]. of example2. So, the following formula based on non-updatable variable can be constructed: ( S . M =0) AND ( Q . N &gt; 2) AND ( T . E =1). 4.2 Construct a Formula Based on Updatable Variable assign X a value or make the value of X increase by +  X  X or decrease by - X  X . cyclical execution of R and only one formula can be constructed. In the condition of r  X  containing X is selected into the formula, this pr edicate should make an update project constructed based on each dividing point of X . These formulae are consisted of a set of formulae for X . 
The following algorithm is presented for constructing a formula based on an updatable variable in a TG cycle R . END . Example 8. In example2, S . L is an updatable variable and can be selected to construct a formula through algorithm1. regarded as the first triggered rule of a cyclical execution of R 1 . By algorithm1,  X  1 : = ( S . L =1) ; Updated ( S . L )=  X  . dividing point of S . L , By algorithm1, Updated ( S . L )={  X  0.5}. r returning SC ={  X  1 } and  X  1 = ( S . L =1)  X  ( S . L &lt; 2  X  0.5). Theorem 2. Let P be a formula constructed for a TG cycle R on the basis of a non-updatable variable X. If P is false, R must be termination . Proof. According to the notion of non-updatable variable of a TG cycle, X cannot be reachable from R . 
During a cyclical execution of R , there must be a rule which cannot be really for all rules in R which condition containing X , their conditions should be satisfied to contradictary to the precondition of th eorem2. So the conclusion holds. actions of all rules in a rule set. Many variables, which are not determined to be non-updatable variables by [14-16], may be non-updatable variables here. Theorem 3. Let P be an arbitrary formula in the set of formulae constructed for a TG cycle R on the basis of an updatabl e variable X. If P is false, R must be termination. Proof. The conclusion can be proven by contradiction. Assuming that is non-termination, any rule in should be really executed. That is, the conditions of all rules in should be satisfied by the database states. Case1: if there is no dividing point of X in R , only one formula P can be constructed through algorithm1. Let r be an arbitrary rule in R and regarded as the first triggered rule of a cyclical execution of R . P indicates the conditions which should be satisfied false. It is implied that there exists at least one rule in R , whose condition must not be executed. This is contradictary to the assumption that R is non-termination. satisfied at the same time once r is executed and all rules in R , which following r and assigned by the action of r , can be really executed. P is false. It is implied that there exists at least one rule in those rules, whose condition must not be satisfied as a result of P =false. This is in contradiction with the assumption that R is non-termination. From case1 and case2, the conclusion holds. theorem 3. If all formulae, which are constructed for a TG cycle R through algorithm1, are case can be seen from example2, so we present the following concepts and a theorem. there is no dividing point of X in R . Example 10. In example2, T.F is an updatable variable of R 2 and is updating cumulative for R 2 . Each cyclical execution of R 2 must make T.F increase by 1. indicate the net effect of all updates to X in R . For each update in a cyclical execution of R , which changes X by  X  X , let Sum (  X  X ) = Sum (  X  X )+  X  X . termination . Proof. Assuming all formulae, which are constructed for R based on its non-updatable variables and updatable variables through algorithm1, can be satisfied, R can be cyclically executed and has been executed for k times. ( X+k  X  Sum (  X  X )) by the net effects of times cyclical executions of R .  X  ( X+k  X  Sum (  X  X ))= false, which implies that there is at least one rule in R , whose condition must not be satisfied during the ( k +1) time cyclical execution of R . That is, at least one rule of R cannot be really executed. So R must be termination during the ( k +1) time cyclical execution of R . The conclusion holds. Based on theorem2-4, the following algorithm is proposed for termination decision of a TG cycle. Output : If R is termination then return (true); otherwise, return (false) Construct a formula P based on X through methods in [9, 10]; Construct a set of formulae SC based on X through algorithm1; IF  X  P  X  SC and P =false Theorem 5. Algorithm2. is correct and will terminate . Proof. Algorithm2 is guaranteed to be correct by theorem2-4. For non-updatable variables and updatable variables in a TG cycle R , the numbers of them are finite, so algorithm2 can automatically terminate. Example 11. In example2, there are three variables in the conditions of all rules in R 2 : T . E , Q . N and T . F . We analyze the termination of R 2 through algorithm2 as follows. ( Q . N &gt; 2) AND ( T . E =1) is regarded as true. an original value by r 3 with T . F =0, so  X  =true. cyclically executed for three times. That is, R 2 must be termination as the condition of r becomes false. In this paper, we develop a new technique of termination decision that avoids two main drawbacks of existing methods. We present many new concepts such as updatable variable of a TG cycle, dividing point of an updatable variable. Then, we propose an algorithm to construct a formula that can contain updatable variables. We introduce the concept of updating cumulative for an updatable variable. Then, we present a new algorithm to detect more termination cases. Our method only provides a sufficient condition to guarantee the termination of a incorporation with other factors such as composite event and time order. This work was supported in part by the NSF of China under Grant No. 60303008 and 60673133; the National Grand Fundamental Research 973 Program of China under Grant No.2005CB321905. 
