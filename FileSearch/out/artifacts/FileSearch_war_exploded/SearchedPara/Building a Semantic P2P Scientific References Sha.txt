 (C/S) communication model, P2P overlay network becomes popular in recent years. P2P application systems providing various services emerge sharply, such as decentral-ized file sharing, instant message, and games. JXTA is the first attempt to formulate the core P2P protocols and now is one of the most influential P2P protocols [1]. SemreX is the implementation of the P2P communication layer of SemreX, and discussing the experiences and lessons from the firsthand developing and testing practices. Especially, suggestions to JXTA are made to improve its usability and robustness. 
The paper is organized as follows. Section 2 illustrates the use cases and goals of Sem-reX, and gives an overview of the software architecture. The design of the P2P communi-cation layer, including the classes and the relationships among them, is presented in Sec-tion 3. Section 4 discusses major programming lessons from JXTA package and gives the related solutions. Section 5 concludes this paper with additional comments. Searching scientific references from the Internet is a frequent and important behavior times by different researchers in a lab. If a paper is downloaded from WAN only once similar research interests. If a member reads a good paper and broadcasts this references efficiently, SemreX is proposed and implemented. Bibster is a similar semantics-based bibliographic P2P system [2]. Compared with Bibster, SemreX is Bibster. In addition, SemreX supports heterogeneous data and permits the sharing of researchers X  individual comments of papers. 
First, we explain why P2P technology is chosen in SemreX. There is an assump-With the C/S model, the papers in server are too many to be read and remarked. It is a fact that a great many papers are stored in the server, but only a small number of them have been read. On the contrary, the number of papers in a client is not very large and most of them have been read and remarked by the owner of the machine. With the single file server, it is difficult to add our comments to papers in server for the opera-tion limitations, but we can record comments in our own computers. Then, we do not only share the papers, but also share the comments about papers. 
Second, papers are shared not only with the traditional key words matching, but also with the semantic similarity. SemreX supports both automatic semantic informa-tion abstracting and manual remarking. To describe the semantic information in Sem-reX, ontology technology, such as  X  X CM Topic X , is utilized. In addition, a proprietary ontology  X  X emreX: Reference X  is created in our research, which gives some special papers. The users of SemreX can categorize papers into an accurate sub-classification, and give evaluations and grades to papers. The manual evaluation information of references has higher priority than the automatic semantic information abstracting results in SemreX. 
Third, lots of P2P applications have been developed and applied successfully in re-cent years [3][4][5], whose experiences will give some hints to our development. 
The software architecture of SemreX includes the human-machine interface, P2P communication layer, semantic information ab stracting and classifying, and semantic topology and routing. The human-machine interface receives user X  X  commands, shows query results, and calls services provided by other modules. The automatic semantic information abstracting and classifying module categorizes each paper into a lets user categorize papers into sub-classification manually and add some private comments to each paper. Semantic topology and routing is for the future advanced research. The implementation of P2P communication layer are the focus of this paper. Building a stable and efficient P2P communication layer is the basic of SemreX. There are several considerations about P2P communication layer design, such as which P2P communication protocol should be selected, which P2P software package should be utilized, and how to organize the classes in the P2P communication layer of SemreX. In our solutions, there are totally 12 classes and interfaces in P2P communi-cation layer, and some of them are depicted in Fig. 1. Due to the page limitation, the member operations of classes are not listed in Fig. 1. In fact, the practical implemen-tations of classes are more complicated than the descriptions in this paper. 
LocalPeer is the core of the P2P communication layer and is the most complicated class in this module. It extends from Thread of Java, which listens InputPipe , accepts query requests and query results. When receiving a message, the daemon thread ex-tracts the message type, fires events to notify other modules of SemreX. For example, when a SemreXQueryResult message comes, LocalPeer produces a SemreXQueryRe-Because the communications among different modules are based on event-driven programming, the operations related to the communication layer are asynchronous. Furthermore, this class provides some public methods to other modules. For example, sendQueryMessage operation is executed when user wants to search. PeerDiscovery is also a daemon thread, which monitors the changes of the peer group. removed. The operation getRemoteAdvertisement is executed periodically to get the change of peer group. Since getRemoteAdvertisement is an asynchronous operation, this group is recorded, and PeerEntity is proposed. Some public operations are defined, such lated in PeerEntry , which inherits the Vector class in Java. 
All the exchanging data between peers are encapsulated into messages. At present, the important messages types are SemreXQueryRequest and SemreXQueryResult . Message in JXTA is represented in XML format, and JXTA package provides power-ful information exchange abilities. These advantages of JXTA are utilized directly in SemreX. Some special and necessary Tags are added in message, such as TypeTag , SourcePeerTag and DestinationPeerTag . With these tags, the receiver can extract to the unreliable and unstable network environment, the delays of network operations communication layer are asynchronous. For example, when a peer queries references from other peers, it only sends a query requests, and needs not wait for the responses. During the programming and testing, we get some lessons about JXTA programming, and a lot of time is spent to handle the troubles from JXTA. From the perspective of programming, JXTA is an influential network programming environment, but not friendly and powerful as expected. Furthe rmore, a bug in the core component of JXTA is found, and some key lessons from SemreX are discussed below. 4.1 Peer Discovery rendezvous peer. Furthermore, all peers before starting should know at least an IP address of a rendezvous peer, which makes the application not simple and easy as expected. 
Some other P2P application systems based on JXTA are executed in our testing network environments, and they also have the same trouble about peer discovery. It is reasonable that the JXTA may not be able to provide the powerful peer discovery ability as it claimed. Through the discussion with other researchers, we know that the LAN supporting UDP multicast can discover peers without rendezvous peer. How-ever, most of LANs in our campus do not satisfy this requirement. 4.2 Demo Programs Are Not Strong in Real P2P Application Environments Programmers usually imitate the demo programs, but the testing results show that ModularSpecAdvertisement are listed below, which is executed frequently in JXTA programming. 1: en = discovery.getLocalAdvertisements( DiscoveryService.ADV,"Name","JXTASPEC:JXTA-EX1"); ...... 2: ModuleSpecAdvertisement mdsadv = (ModuleSpecAdvertisement) en.nextElement(); 
In the software testing, exceptions are frequently thrown when the second code line is executed. There are several advertisement types supported by JXTA, such as jxta:APA , jxta:RA and jxta:MIA . The ModularSpecAdvertisement type is presented with jxta:MSA . According to the parameter DiscoveryService.ADV in the first code line, it is possible the local advertisements getting are not exactly the ModuleSpecAd-ModularSpecAdvertisment when exception is thrown. The codes getting the type of advertisement and judgment are inserted before the second code line, and the revised codes are as follows. 1: en = discovery.getLocalAdvertisements( DiscoveryService.ADV,"Name","JXTASPEC:JXTA-EX1"); ...... 2: Advertisement adv = (Advertisement)en.nextElement(); 3: if(adv.getAdvType()=="jxta:MSA") 4: { 5: ModuleSpecAdvertisement mdsadv = (ModuleSpecAdvertisement) adv; 6: } 
With revised codes, the exceptions are never thrown and the overall P2P commu-demo programs are not strong enough for the real P2P application environments, and the simplicity brings troubles to the JXTA programmers. There are other similar cases in [6] and these demo programs should be improved for future use. 4.3 A Bug Report About setPipeAdvertisement At the beginning of SemreX development, JXTA-lib-2.3.4.jar , released in March 2005, is utilized. While in software testing, our programs always stopped because of the stack overflow exception. At first, we guess there are some mistakes in our codes, and check them carefully. We are surprised to find that even the demo pro-grams from [6] also produce the same exception. Finally, the bug is located at set-PipeAdvertisement , a member operation of the ModuleSpecAdvertisement . The instance of PipeAdvertisement is produced by JXTA, but it leads to setPipeAdver-tisement exception. setPipeAdvertisement is a frequent operation of P2P system, JXTA 2.3.3. Then recompiling the programs and running it, we can see this opera-may not be tested thoroughly. jxtaext.jar are revised in March 2005. The classes related to setPipeAdvertisement are source codes of JXTA are not very difficult, and reading the source codes is helpful to understand JXTA and to build our application systems. The design and implementation of the P2P communication layer of SemreX are pre-sented in detail. The experiment results show that it is a simple but effective solution. The experiences and lessons listed in this paper are expected to give some suggestions to other developers with JXTA. With these firsthand experiences, JXTA should be stronger and easier to be utilized. 
In the future, the semantic topology should be studied deeply and implemented services of JXTA are used, and the sophisticated services provided by JXTA should be utilized to accelerate our system. To realize a powerful semantic P2P system, some semantic information of each peer should be applied in communication layer to im-prove the query performance when the number of peers is very large. 
