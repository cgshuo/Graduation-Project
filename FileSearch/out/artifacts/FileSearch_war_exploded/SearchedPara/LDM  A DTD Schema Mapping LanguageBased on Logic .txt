 Existing studies on DTD schema mappings often follow the conventional approaches in relational schema mapping, specifying the mapping as the cor-respondence between conjunctive tuples of the source and the target schemas. These studies adopt structural patterns, either path-like ones [ 1  X  4 ] or tree-like ones [ 5  X  7 ] to parse the document structure and combine the matching elements conjunctively. However, this tuple-oriented schema mapping is insufficient to specify certain complex XML mapping requests. The difficulties often lie in the following aspects. Firstly, the subordination indicated in the nested lists can hardly be specified using simple structural patterns. Secondly, to differentiate the elements by their values or by their references is often a dilemma. Thirdly, it often needs redundant mappings to deal with the heterogeneous elements for similar integration purposes.
 In this paper, we propose a new DTD mapping language named LDM (L ogic D TD M apping) to overcome the insufficiencies. LDM is a pattern-based DTD schema mapping language whose patterns employ both the structural and the logical operators to flexibly present the relationships among the elements to be mapped. In comparison with existing studies, our work on LDM makes the fol-lowing contributions. a) We propose the structural pattern specific to the DTD schema and seamlessly integrate the structural patterns and the logical patterns into the expressive pattern-based views named LDV (standing for Logical DTD View) to present the mappings on DTDs. b) We adopt a new structure of the variables named the matching term to coherently organize the data elements through the patterns, and deploy a simple but expressive restructuring mecha-nism to facilitate presenting the data transformation in the mapping. The LDM language is a mapping language using the Logic DTD Views (LDV), a pattern-based view for specifying the logical and the structural relationships among the DTD document elements, to denote the correspondence between the data elements in the source and target DTD documents. The syntax of LDV and LDM is specified in Fig.1. We use l , x , c , d to denote the labels, the variables, the constraints and the DTD schemas in a LDV. A LDV v canbeanelementview v e , a structure view v s or a composite view combining the sub views with the operators  X * X  and  X  {}  X  and an optional constraint. An element view v e is to match an XML element with an element pattern e and indicate the element content of interest for the mapping. Here e contains either the location prefix  X / X  to match a child element with the label l or the prefix  X // X  to match a descendant element with the label l , and it uses the optional variable x to represent the element content for further use in the mappings or the constraints. A structure view introduces three structural composite operators, that is, the adjacent operator  X ; X , the sequence set operator  X  &lt;&gt;  X  and the exclusive option operator  X  the element views. The three kinds of views essentially specify the structure of common DTD schemas, which enables the subtle differentiation of data elements. A structure view can also be extended wtih another view in the form of (v indicating that the fragment matching the view v s would be further matched with the view v . A composite view can be a conjunctive view v { v } . The conjunctive view v v 1 and v 2 be associated conjunctively. The set view matching the view v be gathered as a set of matching results of the view v . The elements in the set are required to be different from each other and the set should cover all the valid elements.
 clause contains the DTD schemas attached with the LDVs. Especially, in the from clause the DTD schemas can be combined conjunctively or disjunctively with the operators  X * X  and  X  |  X , which works like the composite views. ables and the composite connectives  X * X ,  X  |  X  and  X  {}  X , to indicate the logical structure of the composite binding of a LDV. For a LDV v , the matching term m(v) can be derived from v by maintaining the variables and the conjunctive, disjunctive and set operators and reducing the structural operators to the con-junctive, the disjunctive and the set operators, e.g., , mt(v enable the elements in the source schemas be the deductively restructured to the ones in the target schemas, which provides a of the source a more flexible way than the conventional variable tuples to present the correspondences between the elements in the mappings. This idea comes from our previous study on XML query and for the further theoretical properties please refer to [ 9 ]. s.dtd to the schema t.dtd . s.dtd contains the branches element consisting of a flat list of the company branches which contains the sub-elements bno , bname ,and subbno and actually forms a recursive hierarchy indicated by bno and subbno . In t.dtd ,the branch elements are explicitly hierarchically organized with the sub-branches sub-elements. The mapping is listed below. In this paper, we introduced a pattern-based mapping language named LDM to present the DTD schema mapping as the correspondence between different but compatible structures of the variables composed of the logical operators. LDM adopts the structural as well as the logical operators to compose the sub-patterns and the associating semantic constraints, and is convenient to present complex mapping requests on the hierarchical and heterogeneous data. Due to the space restriction, we omitted the details of the design issues, the semantics and typical examples of the language in this article, and readers can refer to the related reports[ 9 , 10 ].
 The core of the mapping language is being implemented. We are testing var-ious constraints and designing more expressive pragmatic paradigms to present typical mapping requests which can be processed efficiently, and we would fur-ther study the theoretical issues of constraints so as to find a formal definition of the efficient constraints and its common processing methods. Additionally, we would study query rewriting of LDM programs for processing the mappings, especially for GAV-style XML integration.

