 In a typical Question Answering system, an input question is analyzed to formulate a query to re-trieve relevant documents from a target corpus (Chu-Carroll et al., 2006; Harabagiu et al., 2006; Sun et al., 2006). This analysis of the input question affects the subset of documents that will be exam-ined and ultimately plays a key role in determining the answers the system chooses to produce. How-ever, most existing QA systems, whether they adopt knowledge-based, statistical, or hybrid methods, are very sensitive to small variations in the question form, often yielding substantially different answers for questions that are semantically equivalent. For example, our system X  X  answer to  X  X ho invented the telephone? X  is  X  X lexander Graham Bell; X  how-ever, its top answer to a paraphrase of the above question  X  X ho is credited with the invention of the telephone? X  is  X  X utenberg, X  who is credited with the invention of the printing press, while  X  X lexander Graham Bell, X  who is credited with the invention of the telephone, appears in rank four.

To demonstrate the ubiquity of this phenomenon, we asked the aforementioned two questions to sev-eral QA systems on the web, including LCC X  X  Pow-ferent behavior for the two phrasings of the ques-tion, ranging from minor variations in documents presented to justify an answer, to major differences such as the presence of correct answers in the answer list. For some systems, the more complex question form posed sufficient difficulty that they chose not to answer it.

In this paper we focus on investigating a high risk but potentially high payoff approach, that of improv-ing system performance by replacing the user ques-tion with a paraphrased version of it. To obtain can-didate paraphrases, we adopt a simple yet powerful technique based on machine translation, which we describe in the next section. Our experimental re-sults show that we can potentially achieve a 35% rel-ative improvement in system performance if we have an oracle that always picks the optimal paraphrase for each question. Our ultimate goal is to automat-ically select from the set of candidates a high po-tential paraphrase using a component trained against the QA system. In Section 3, we present our ini-tial approach to paraphrase selection which shows that, despite the tremendous odds against selecting performance-improving paraphrases, our conserva-tive selection algorithm resulted in marginal im-provement in system performance. (A) (B) To measure the impact of paraphrases on QA sys-tems, we seek to adopt a methodology by which paraphrases can be automatically generated from a user question. Inspired by the use of parallel trans-lations to mine paraphrasing lexicons (Barzilay and McKeown, 2001) and the use of MT engines for word sense disambiguation (Diab, 2000), we lever-age existing machine translation systems to generate semantically equivalent, albeit lexically and syntac-tically distinct, questions.

Figure 1 (A) illustrates how MT-based paraphras-ing captures lexical paraphrasing, ranging from ob-taining simple synonyms such as hazardous and dangerous to deriving more complex equivalent phrases such as expectant mother and pregnant woman . In addition to lexical paraphrasing, some two-way translations achieve structural paraphras-ing, as illustrated by the example in Figure 1 (B).
Using multiple MT engines can help paraphrase diversity. For example, in Figure 1 (B), if we use the tion, we get  X  X ind out on the nuclear armament program of India  X  where both lexical and struc-tural paraphrasings are observed.

The motivation of generating an array of lexically and structurally distinct paraphrases is that some of these paraphrases may better match the processing capabilities of the underlying QA system than the original question and are thus more likely to pro-duce correct answers. Our observation is that while the paraphrase set contains valuable performance-improving phrasings, it also includes a large num-ber of ungrammatical sentences which need to be fil-tered out to reduce negative impact on performance. We use a generic architecture (Figure 2) that treats a QA system as a black box that is invoked after a paraphrase generation module, a feature extraction module, and a paraphrase selection module are exe-cuted. The preprocessing modules identifies a para-phrase of the original question, which could be the question itself, to send as input to the QA system. A key advantage of treating the core QA system as a black box is that the preprocessing modules can be easily applied to improve the performance of any
We described the paraphrase generation module in the previous section and will discuss the remain-ing two modules below.
 Feature Extraction Module. For each possible paraphrase, we compare it against the original ques-tion and compute the features shown in Table 1. These are a subset of the features that we have ex-perimented with and have found to be meaningful for the task. All of these features are required in or-Sum IDF Lengths Cosine Distance Answer Types der not to lower the performance with respect to the original question. They are ordered by their relative contributions to the error rate reduction.
 Paraphrase Selection Module. To select a para-phrase, we used JRip, the Java re-implementation of ripper (Cohen, 1996), a supervised rule learner in the Weka toolkit (Witten and Frank, 2000).

We initially formulated paraphrase selection as a three-way classification problem, with an attempt to label each paraphrase as being  X  X orse, X  the  X  X ame, X  or  X  X etter X  than the original question. Our objective was to replace the original question with a para-phrase labeled  X  X etter. X  However, the priors for these classes are roughly 30% for  X  X orse, X  65% for  X  X ame, X  and 5% for  X  X etter X . Our empirical evi-dence shows that successfully pinpointing a  X  X etter X  paraphrase improves, on average, the reciprocal rank for a question by 0.5, while erroneously picking a  X  X orse X  paraphrase results in a 0.75 decrease. That is to say, errors are 1.5 times more costly than suc-cesses (and five times more likely). This scenario strongly suggests that a high precision algorithm is critical for this component to be effective.
To increase precision, we took two steps. First, we trained a cascade of two binary classifiers. The first one classifies  X  X orse X  versus  X  X ame or better, X  with a bias for  X  X orse. X  The second classifier has classes  X  X orse or same X  versus  X  X etter, X  now with a bias towards  X  X etter. X  The second step is to constrain the confidence of the classifier and only accept para-phrases where the second classifier has a 100% con-fidence. These steps are necessary to avoid decreas-ing performance with respect to the original ques-tion, as we will show in the next section. We trained the paraphrase selection module us-ing our QA system, PIQUANT (Chu-Carroll et al., 2006). Our target corpus is the AQUAINT corpus, employed in the TREC QA track since 2002.

As for MT engines, we employed Babelfish S
YSTRAN and Google, respectively. We adopted different MT engines based on the hypothesis that differences in their translation rules will improve the effectiveness of the paraphrasing module.

To measure performance, we trained and tested by cross-validation over 712 questions from the TREC 9 and 10 datasets. We paraphrased the questions us-ing the four possible combinations of MT engines with up to 11 intermediate languages, obtaining a total of 15,802 paraphrases. These questions were then fed to our system and evaluated per TREC an-swer key. We obtained a baseline MRR (top five answers) of 0.345 running over the original ques-tions. An oracle run, in which the best paraphrase (or the original question) is always picked would yield a MRR of 0.48. This potential increase is sub-stantial, taking into account that a 35% improve-ment separated the tenth participant from the sec-ond in TREC-9. Our three-fold cross validation us-ing the features and algorithm described in Section 3 yielded a MRR of 0.347. Over 712 questions, it re-placed 14, two of which improved performance, the rest stayed the same. On the other hand, random selection of paraphrases decreased performance to 0.156, clearly showing the importance of selecting a good paraphrase. Most of the work in QA and paraphrasing focused on folding paraphrasing knowledge into the question analyzer or the answer locator (Rinaldi et al., 2003; Tomuro, 2003). Our work, on the contrary, focuses on question paraphrasing as an external component, independent of the QA system architecture.

Some authors (Dumais et al., 2002; Echihabi et al., 2004) considered the query sent to a search en-gine as a  X  X araphrase X  of the original natural lan-guage question. For instance, Echihabi et al. (2004) presented a large number of  X  X eformulations X  that transformed the query into assertions that could match the answers in text. Here we understand a question paraphrase as a reformulation that is itself a question, not a search engine query.

Other efforts in using paraphrasing for QA (Duclaye et al., 2003) focused on using the Web to obtain different verbalizations for a seed relation (e.g., Author/Book); however, they have yet to apply their learned paraphrases to QA.

Recently, there has been work on identifying para-phrases equivalence classes for log analysis (Hed-strom, 2005). Hedstrom used a vector model from Information Retrieval that inspired our cosine mea-sure feature described in Section 3. The work presented here makes contributions at three different levels. First, we have shown that po-tential impact of paraphrasing with respect to QA performance is significant. Replacing a question with a more felicitously worded question can poten-tially result in a 35% performance increase.
Second, we performed our experiments by tap-ping into a readily available paraphrase resource: MT engines. Our results speak of the usefulness of the approach in producing paraphrases. This tech-nique of obtaining a large, although low quality, set of paraphrases can be easily employed by other NLP practitioners wishing to investigate the impact of paraphrasing on their own problems.

Third, we have shown that the task of selecting a better phrasing is amenable to learning, though more work is required to achieve its full potential. In that respect, the features and architecture discussed in Section 3 are a necessary first step in that direction.
In future work, we are interested in developing effective filtering techniques to reduce our candidate set to a small number of high precision paraphrases, in experimenting with state-of-the-art paraphrasers, and in using paraphrasing to improve the stability of the QA system.
 The authors would like to thank Nelson Correa and Annie Ying for helpful discussions and comments. This work was supported in part by the Disruptive Technology Office (DTO) X  X  Advanced Question An-swering for Intelligence (AQUAINT) Program un-der contract number H98230-04-C-1577.

