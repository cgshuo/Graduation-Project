 Recent research on Statistical Machine Transla-tion (SMT) has achieved substantial progress. Many SMT frameworks have been developed, including phrase-based SMT (Koehn et al., 2003), hierarchical phrase-based SMT (Chiang, 2005), syntax-based SMT (Eisner, 2003; Ding and Palmer, 2005; Liu et al., 2006; Galley et al., 2006; Cowan et al., 2006), etc. With the emergence of various structurally different SMT systems, more and more studies are focused on combining mul-tiple SMT systems for achieving higher transla-tion accuracy rather than using a single transla-tion system. 
The basic idea of system combination is to ex-tract or generate a translation by voting from an ensemble of translation outputs. Depending on how the translation is combined and what voting strategy is adopted, several methods can be used for system combination, e.g. sentence-level com-bination (Hildebrand and Vogel, 2008) simply selects one from original translations, while some more sophisticated methods, such as word-level and phrase-level combination (Matusov et al., 2006; Rosti et al., 2007), can generate new translations differing from any of the original translations. 
One of the key factors in SMT system combi-nation is the diversity in the ensemble of transla-tion outputs (Macherey and Och, 2007). To ob-tain diversified translation outputs, most of the current system combination methods require multiple translation engines based on different models. However, this requirement cannot be met in many cases, since we do not always have the access to multiple SMT engines due to the high cost of developing and tuning SMT systems. To reduce the burden of system development, it might be a nice way to combine a set of transla-tion systems built from a single translation en-gine. A key issue here is how to generate an en-semble of diversified translation systems from a single translation engine in a principled way. 
Addressing this issue, we propose a boosting-based system combination method to learn a combined translation system from a single SMT engine. In this method, a sequence of weak trans-lation systems is generated from a baseline sys-tem in an iterative manner. In each iteration, a new weak translation system is learned, focusing more on the sentences that are relatively poorly translated by the previous weak translation sys-tem. Finally, a strong translation system is built from the ensemble of the weak translation sys-tems. Our experiments are conducted on Chinese-to-English translation in three state-of-the-art SMT systems, including a phrase-based system, a hier-archical phrase-based system and a syntax-based , r i )} using distribution D t  X   X  + () D ie
Z system. All the systems are evaluated on three NIST MT evaluation test sets. Experimental re-sults show that our method leads to significant improvements in translation accuracy over the baseline systems. Given a source string f , the goal of SMT is to find a target string e * by the following equation. translation of the given source string f . To model the posterior probability Pr( | ) ef , most of the state-of-the-art SMT systems utilize the log-linear model proposed by Och and Ney (2002), as follows, tures , and  X  m is the feature weight corresponding to the m -th feature. h m ( f, e ) can be regarded as a function that maps every pair of source string f and target string e into a non-negative value, and  X  can be viewed as the contribution of h m ( f , e ) to the overall score Pr( | ) ef . 
In this paper, u denotes a log-linear model that {  X  u (  X  ) denotes a SMT system based on u with pa-rameters  X  . Generally,  X  is trained on a training data set 1 to obtain an optimized weight vector  X  and consequently an optimized system u (  X  * ). Suppose that there are T available SMT systems { u tion is to build a new translation system v ( u 1 (  X  * 1 ), ... , u T (  X  * T )) from { u 1 (  X  tion system which combines translations from the u As discussed in Section 1, the diversity among the outputs of member systems is an important factor to the success of system combination. To obtain diversified member systems, traditional methods concentrate more on using structurally different member systems, that is u 1  X  u 2  X  ...  X  u . However, this constraint condition cannot be satisfied when multiple translation engines are not available. 
In this paper, we argue that the diversified member systems can also be generated from a single engine u (  X  * ) by adjusting the weight vector  X  in a principled way. In this work, we assume ries of  X  * i and build a combined system from { u (  X  * i )}. To achieve this goal, we propose a boosting-based system combination method (Fig-ure 1). Like other boosting algorithms, such as AdaBoost (Freund and Schapire, 1997; Schapire, 2001), the basic idea of this method is to use weak systems ( member systems ) to form a strong system ( combined system ) by repeatedly calling weak system trainer on different distributions over the training samples. However, since most of the boosting algorithms are designed for the classification problem that is very different from the translation problem in natural language proc-essing, several key components have to be redes-igned when boosting is adapted to SMT system combination. 3.1 Training In this work, Minimum Error Rate Training (MERT) proposed by Och (2003) is used to es-timate feature weights  X  over a series of training samples. As in other state-of-the-art SMT sys-tems, BLEU is selected as the accuracy measure to define the error function used in MERT. Since the weights of training samples are not taken into account in BLEU 2 , we modify the original defi-nition of BLEU to make it sensitive to the distri-bution D t ( i ) over the training samples. The modi-fied version of BLEU is called weighted BLEU (WBLEU) in this paper. 
Let E = e 1 ... e m be the translations produced by the system, R = r 1 ... r m be the reference trans-lations where r i = { r i1 , ... , r iN }, and D weighted BLEU metric has the following form: WBLEU( , ) exp 1 max 1, = X   X   X  X  X   X  X  X  where () string s . In this definition, n -grams in e i and { r has a larger weight, the corresponding n -grams will have more contributio ns to the overall score 
WBLEU( , ) E R . As a result, the i -th training sample gains more importance in MERT. Obvi-ously the original BLEU is just a special case of WBLEU when all the training samples are equally weighted. 
As the weighted BLEU is used to measure the translation accuracy on the training set, the error rate is defined to be: 3.2 Re-weighting Another key point is the maintaining of the dis-the weights of training samples are set equally. On each round, we incr ease the weights of the samples that are relatively poorly translated by the current weak system so that the MERT-based trainer can focus on the hard samples in next round. The update rule is given in Equation 4 with two parameters t  X  and l i in it. portance that the t -th weak system gains in boost-ing. The definition of t  X  guarantees that t  X  al-ways has a positive value 3 . A main effect of t is to scale the weight updating (e.g. a larger t means a greater update). l i is the loss on the i -th sample. For each i , let { e produced by the system. The loss function is de-fined to be: where BLEU( e ij , r i ) is the smoothed sentence-level BLEU score (Liang et al., 2006) of the transla-tion e with respect to the reference translations r i , and e i * is the oracle translation which is selected from { e i1 , ... , e in } in terms of BLEU( e ij be viewed as a measure of the average cost that we guess the top-k translation candidates instead of the oracle translation. The value of l i counts for the magnitude of weight update, that is, a lar-ger l i means a larger weight update on D t ( i ). The definition of the loss function here is similar to the one used in (Chiang et al., 2008) where only the top-1 translation candidate (i.e. k = 1) is taken into account. 3.3 System Combination Scheme In the last step of our method, a strong transla-ensemble of member systems { u (  X  * 1 ), ... , u (  X  * In this work, a sentence-level combination method is used to select the best translation from the pool of the n -best outputs of all the member systems. 
Let H ( u (  X  * t )) (or H t for short) be the set of the n -best translation candidates produced by the t -th of all H t (i.e. () is generated from H ( v ) based on the following scoring function: where () the t -th member system, and t  X  is the corre-sponding feature weight. It should be noted that eH  X  may not exist in any ' ii H  X  . In this case, we can still calculate the model score of e in any other member systems, since all the member sys-tems are based on the same model and share the based scoring function which has been success-fully adopted in SMT system combination (Duan et al., 2009; Hildebrand and Vogel, 2008; Li et al., 2009). The computation of ( , ( )) eH v based on a linear combination of a set of n -gram consensuses-based features. 
For each order of n -gram, (, ()) heHv  X  are defined to measure the n -gram agreement and disagreement between e and other translation candidates in H ( v ), respectively. and heHv + and (, ()) heHv  X  used in our work are exactly the same as the features used in (Duan et al., 2009) and similar to the features used in (Hildebrand and Vogel, 2008; Li et al., 2009), we do not pre-sent the detailed description of them in this paper. 
If p orders of n -gram are used in computing (, ()) eH v  X  , the total number of features in the system combination will be 2 Tp + X  ( T model-score-based features defined in Equation 8 and 2 p  X  consensus-based features defined in Equa-tion 9). Since all these features are combined linearly, we use MERT to optimize them for the combination model. If implemented naively, the translation speed of the final translation system will be very slow. For a given input sentence, each member system has to encode it individually, and the translation speed is inversely proportional to the number of member systems generated by our method. For-tunately, with the thought of computation, there are a number of optimizations that can make the system much more efficient in practice. 
A simple solution is to run member systems in parallel when translating a new sentence. Since all the member systems share the same data re-sources, such as language model and translation table, we only need to keep one copy of the re-quired resources in memory. The translation speed just depends on the computing power of parallel computation environment, such as the number of CPUs. 
Furthermore, we can use joint decoding tech-niques to save the computation of the equivalent translation hypotheses among member systems. In joint decoding of member systems, the search space is structured as a translation hypergraph where the member systems can share their trans-lation hypotheses. If more than one member sys-tems share the same translation hypothesis, we just need to compute the corresponding feature values only once, instead of repeating the com-putation in individual decoders. In our experi-ments, we find that over 60% translation hy-potheses can be shared among member systems when the number of member systems is over 4. This result indicates that promising speed im-provement can be achieved by using the joint decoding and hypothesis sharing techniques. 
Another method to speed up the system is to accelerate n -gram language model with n -gram caching techniques. In this method, a n -gram cache is used to store the most frequently and recently accessed n -grams. When a new n -gram is accessed during decoding, the cache is checked first. If the required n -gram hits the cache, the corresponding n -gram probability is returned by the cached copy rather than re-fetching the original data in language model. As the translation speed of SMT system depends heavily on the computation of n -gram language model, the acceleration of n -gram language model generally leads to substantial speed-up of SMT system. In our implementation, the n -gram caching in general brings us over 30% speed im-provement of the system. Our experiments are conducted on Chinese-to-English translation in three SMT systems. 5.1 Baseline Systems The first SMT system is a phrase-based system with two reordering models including the maxi-mum entropy-based lexicalized reordering model proposed by Xiong et al. (2006) and the hierar-chical phrase reordering model proposed by Gal-ley and Manning (2008). In this system all phrase pairs are limited to have source length of default 4 . 
The second SMT system is an in-house reim-plementation of the Hiero system which is based on the hierarchical phrase-based model proposed by Chiang (2005). 
The third SMT system is a syntax-based sys-tem based on the string-to-tree model (Galley et al., 2006; Marcu et al., 2006), where both the minimal GHKM and SPMT rules are extracted from the bilingual text, and the composed rules are generated by combining two or three minimal GHKM and SPMT rules. Synchronous binariza-tion (Zhang et al., 2006; Xiao et al., 2009) is per-formed on each translation rule for the CKY-style decoding. 
In this work, baseline system refers to the sys-tem produced by the boosting-based system combination when the number of iterations (i.e. T ) is set to 1. To obtain satisfactory baseline per-formance, we train each SMT system for 5 times using MERT with different initial values of fea-ture weights to generate a group of baseline can-didates , and then select the best-performing one from this group as the final baseline system (i.e. the starting point in the boosting process) for the following experiments. 5.2 Experimental Setup Our bilingual data consists of 140K sentence pairs in the FBIS data set 5 . GIZA++ is employed to perform the bi-directional word alignment be-tween the source and target sentences, and the final word alignment is generated using the inter-sect-diag-grow method. All the word-aligned bilingual sentence pairs are used to extract phrases and rules for the baseline systems. A 5-gram language model is tr ained on the target-side of the bilingual data and the Xinhua portion of English Gigaword corpus. Berkeley Parser is used to generate the English parse trees for the rule extraction of the syntax-based system. The data set used for weight training in boosting-based system combination comes from NIST MT03 evaluation set. To speed up MERT, all the sentences with more than 20 Chinese words are removed. The test sets are the NIST evaluation sets of MT04, MT05 and MT06. The translation quality is evaluated in terms of case-insensitive NIST version BLEU metric. Statistical signifi-cant test is conducted using the bootstrap re-sampling method proposed by Koehn (2004). Beam search and cube pruning (Huang and Chiang, 2007) are used to prune the search space in all the three baseline systems. By default, both of the beam size and the size of n -best list are set to 20. 
In the settings of boosting-based system com-bination, the maximum number of iterations is set to 30, and k (in Equation 7) is set to 5. The n -gram consensuses-based f eatures (in Equation 9) used in system combination ranges from unigram to 4-gram. 5.3 Evaluation of Translations First we investigate the effectiveness of the boosting-based system combination on the three systems. 
Figures 2-5 show the BLEU curves on the de-velopment and test sets, where the X-axis is the iteration number, and the Y-axis is the BLEU score of the system generated by the boosting-based system combination. The points at itera-tion 1 stand for the performance of the baseline systems. We see, first of all, that all the three systems are improved during iterations on the development set. This trend also holds on the test sets. After 5, 7 and 8 iterations, relatively stable improvements are achieved by the phrase-based system, the Hiero system and the syntax-based system, respectively. The BLEU scores tend to converge to the stable values after 20 iterations for all the systems. Figures 2-5 also show that the boosting-based system combination seems to be more helpful to the phrase-based system than to the Hiero system and the syntax-based system. For the phrase-based system, it yields over 0.6 BLEU point gains just after the 3rd iteration on all the data sets. 
Table 1 summarizes the evaluation results, where the BLEU scores at iteration 5, 10, 15, 20 and 30 are reported for the comparison. We see that the boosting-based system method stably ac-
Figure 2: BLEU scores on the development set 
Figure 3: BLEU scores on the test set of MT04 
Figure 4: BLEU scores on the test set of MT05 Figure 5: BLEU scores on the test set of MT06 than baseline (p &lt; 0.05). hieves significant BLEU improvements after 15 iterations, and the highest BLEU scores are gen-erally yielded after 20 iterations. 
Also as shown in Table 1, over 0.7 BLEU point gains are obtained on the phrase-based sys-tem after 10 iterations. The largest BLEU im-provement on the phrase-based system is over 1 BLEU point in most cases. These results reflect that our method is relatively more effective for the phrase-based system than for the other two systems, and thus confirms the fact we observed in Figures 2-5. 
We also investigate the impact of n -best list size on the performance of baseline systems. For the comparison, we show the performance of the baseline systems with the n -best list size of 600 ( Baseline+600best in Table 1) which equals to the maximum number of translation candidates accessed in the final combination system (combi-ne 30 member systems, i.e. Boosing-30Iterations ). As shown in Table 1, Baseline+600best obtains stable improvements over Baseline . It indicates improve the performance of baseline systems. However, the improvements achieved by Base-line+600best are modest compared to the im-provements achieved by Boosting-30Iterations . These results indicate that the SMT systems can benefit more from the diversified outputs of member systems rather than from larger n -best lists produced by a single system. 5.4 Diversity among Member Systems We also study the change of diversity among the outputs of member systems during iterations. The diversity is measured in terms of the Trans-lation Error Rate (TER) metric proposed in (Snover et al., 2006). A higher TER score means that more edit operations are performed if we transform one translation output into another translation output, and thus reflects a larger di-versity between the two outputs. In this work, the TER score for a given group of member systems is calculated by averaging the TER scores be-tween the outputs of each pair of member sys-tems in this group. 
Figures 6-9 show the curves of diversity on the development and test sets, where the X-axis is the iteration number, and the Y-axis is the di-versity. The points at iteration 1 stand for the diversities of baseline systems. In this work, the baseline X  X  diversity is the TER score of the group of baseline candidates that are generated in ad-vance (Section 5.1). 
We see that the diversities of all the systems increase during iterations in most cases, though a few drops occur at a few points. It indicates that our method is very effective to generate diversi-fied member systems. In addition, the diversities of baseline systems (iteration 1) are much lower than those of the systems generated by boosting (iterations 2-30). Together with the results shown in Figures 2-5, it confirms our motivation that the diversified translation outputs can lead to performance improvements over the baseline systems. 
Also as shown in Figures 6-9, the diversity of the Hiero system is much lower than that of the phrase-based and syntax-based systems at each individual setting of iteration number. This inter-esting finding supports the observation that the performance of the Hiero system is relatively more stable than the other two systems as shown in Figures 2-5. The relative lack of diversity in the Hiero system might be due to the spurious ambiguity in Hiero derivations which generally results in very few different translations in trans-lation outputs (Chiang, 2007). 5.5 Evaluation of Oracle Translations In this set of experiments, we evaluate the oracle performance on the n -best lists of the baseline systems and the combined systems generated by boosting-based system combination. Our primary goal here is to study the impact of our method on the upper-bound performance. 
Table 2 shows the results, where Base-line+600best stands for the top-600 translation candidates generated by the baseline systems, and Boosting-30iterations stands for the ensem-ble of 30 member systems X  top-20 translation candidates. As expected, the oracle performance of Boosting-30Iterations is significantly higher than that of Baseline+600best . This result indi-cates that our method can provide much  X  X etter X  translation candidates for system combination than enlarging the size of n -best list naively. It also gives us a rational explanation for the sig-nificant improvements achieved by our method as shown in Section 5.3. Table 2: Oracle performance of various systems. * = significantly better than baseline (p &lt; 0.05). Boosting is a machine learning (ML) method that has been well studied in the ML community (Freund, 1995; Freund and Schapire, 1997; Collins et al., 2002; Rudin et al., 2007), and has been successfully adopted in natural language processing (NLP) applications, such as document classification (Schapire and Singer, 2000) and named entity classification (Collins and Singer, 1999). However, most of the previous work did not study the issue of how to improve a single SMT engine using boosting algorithms. To our knowledge, the only work addressing this issue is (Lagarda and Casacuberta, 2008) in which the boosting algorithm was adopted in phrase-based SMT. However, Lagarda and Casacuberta (2008) X  X  method calculated errors over the phrases that were chosen by phrase-based sys-tems, and could not be applied to many other SMT systems, such as hierarchical phrase-based systems and syntax-based systems. Differing from Lagarda and Casacuberta X  X  work, we are concerned more with proposing a general framework which can work with most of the cur-rent SMT models and empirically demonstrating its effectiveness on various SMT systems. 
There are also some other studies on building diverse translation systems from a single transla-tion engine for system combination. The first attempt is (Macherey and Och, 2007). They em-pirically showed that diverse translation systems could be generated by changing parameters at early-stages of the training procedure. Following Macherey and Och (2007) X  X  work, Duan et al. (2009) proposed a feature subspace method to build a group of translation systems from various different sub-models of an existing SMT system. However, Duan et al. (2009) X  X  method relied on the heuristics used in feature sub-space selection. For example, they used the remove-one-feature strategy and varied the order of n -gram language model to obtain a satisfactory group of diverse systems. Compared to Duan et al. (2009) X  X  method, a main advantage of our method is that it can be applied to most of the SMT systems without designing any heuristics to adapt it to the specified systems. Actually the method presented in this paper is doing something rather similar to Minimum Bayes Risk (MBR) methods. A main difference lies in that the consensus-based combination method here does not model the posterior prob-ability of each hypothesis (i.e. all the hypotheses are assigned an equal posterior probability when we calculate the consensus-based features). Greater improvements are expected if MBR methods are used and consensus-based combina-tion techniques smooth over noise in the MERT pipeline. 
In this work, we use a sentence-level system combination method to generate final transla-tions. It is worth studying other more sophisti-cated alternatives, such as word-level and phrase-level system combination, to further im-prove the system performance. 
Another issue is how to determine an appro-priate number of iterations for boosting-based system combination. It is especially important when our method is applied in the real-world applications. Our empirical study shows that the stable and satisfactory improvements can be achieved after 6-8 iterations, while the largest improvements can be achieved after 20 iterations. In our future work, we will study in-depth prin-cipled ways to determine the appropriate number of iterations for boosting-based system combina-tion. We have proposed a boosting-based system com-bination method to address the issue of building a strong translation system from a group of weak translation systems generated from a single SMT engine. We apply our method to three state-of-the-art SMT systems, and conduct experiments on three NIST Chinese-to-English MT evalua-tions test sets. The experimental results show that our method is very effective to improve the translation accuracy of the SMT systems. This work was supported in part by the National Science Foundation of China (60873091) and the Fundamental Research Funds for the Central Universities (N090604008). The authors would like to thank the anonymous reviewers for their pertinent comments, Tongran Liu, Chunliang Zhang and Shujie Yao for their valuable sugges-tions for improving this paper, and Tianning Li and Rushan Chen for developing parts of the baseline systems. 
