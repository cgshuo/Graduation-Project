 A key step for the mobile app usage analysis is to classify apps into some predefined categories. However, it is a non-trivial task to effectively classify mobile apps due to the limited contextual information available for the analysis. To this end, in this paper, we propose an approach to first en-rich the contextual information of mobile apps by exploiting the additional Web knowledge from the Web search engine. Then, inspired by the observation that different types of mobile apps may be relevant to different real-world contexts , we also extract some contextual features for mobile apps from the context-rich device logs of mobile users. Finally, we combine all the enriched contextual information into a Maximum Entropy model for training a mobile app classi-fier. The experimental results based on 443 mobile users X  device logs clearly show that our approach outperforms two state-of-the-art benchmark methods with a significant mar-gin.
 I.5.2 [ Pattern Recognition ]: Design Methodology-Feature evaluation and selection, Classi er design and evaluation Automatic mobile app classification, Web knowledge, Real-world contexts.
With the wide spread use of mobile devices in recent years, a huge number of mobile apps have been developed for mo-bile users. Indeed, mobile apps play an important role in the daily lives of mobile users. Intuitively, the study of the use of mobile apps can help to understand the user preferences, and thus motivates many intelligent personalized services, such as app recommendation and target advertising [4, 6, 13].

However, the information directly from mobile apps is usually very limited and ambiguous. For example, a user X  X  preference model may not fully understand the information  X  X he user usually plays Angry Birds X  unless the mobile app  X  X ngry Birds X  is recognized as a predefined app category  X  X ame/Stategy Game X . Indeed, due to the large number and high increasing speed of mobile apps, it is expected to have an effective and automatic approach for mobile app classification.

Indeed, mobile app classification is not a trivial task which is still under development. The major challenge is that there are not many effective and explicit features available for clas-sification models due to the limited contextual information of apps available for the analysis. To be specific, there is limited contextual information about mobile apps in their names, and the only available explicit features of mobile apps are the semantic words contained in their names. How-ever, these words are usually too short and sparse to reflect the relevance between mobile apps and particular categories. To this end, in this paper, we propose to leverage both Web knowledge and real-world contexts for enriching the contextual information of apps, thus can improve the per-formance of mobile app classification. According to some state-of-the-art works on short text classification [3, 9, 10, 12], an effective approach to enriching the original few and sparse textual features is leveraging Web knowledge. In-spired with those works, we propose to take advantage of a Web search engine to obtain some snippets to describe a given mobile app for enriching the textual features of the app. However, sometimes it may be difficult to obtain suf-ficient Web knowledge for new or rarely used mobile apps. In this case, the relevant real-world contexts of mobile apps may be useful. Some observations from the recent stud-ies [4, 6, 13] indicate that the app usage of a mobile user is usually context-aware. For example, business apps are likely used under the context like  X  Location: Work Place  X ,  X  Pro le: Meeting  X , while games are usually played under the context like  X  Location: Home  X ,  X  Is a holiday?: Yes  X . Com-pared with Web knowledge, the relevant real-world contexts of new or rarely used mobile apps may be more available since they can be obtained from the context-rich device logs of the users who used them in mobile devices. Therefore, we also propose to leverage the relevant real-world contexts of mobile apps to improve the performance of app classifi-cation. To be specific, the contributions of this paper are summarized as follows.

First, automatic mobile app classification is a novel prob-lem which is still under development. To the best of our knowledge, we are the first to leverage both Web knowledge a nd relevant real-world contexts to enrich the limited con-textual information of mobile apps for solving this problem.
Second, we study and extract several effective features from both Web knowledge and real-world contexts. Then, we propose to exploit the Maximum Entropy model (Max-Ent) [8] for combining the effective features to train a very effective mobile app classifier.

Finally, to evaluate the proposed approach, we conduct extensive experiments on the context-rich mobile device logs collected from 443 mobile users, which contain 680 unique mobile apps and more than 8.8 million app usage records. The experimental results clearly show that our approach outperforms two state-of-the-art benchmark approaches with a significant margin.
In this section, we first introduce several related notions and give an overview of our mobile app classification ap-proach. Then we introduce the training model which is used in our approach for app classification. App Taxonomy. To recognize the semantic meanings of apps, we can classify each app to one or more categories according a predefined app taxonomy . To be specific, an app taxonomy  X  is a tree of categories where each node corresponds to a predefined app category. The semantic meaning of each app can be defined by the category labels along the path from the root to the corresponding nodes. Search Snippets. In our approach, we propose to lever-age the Web knowledge to enrich the textual information of apps. To be specific, we first submit each app name to a Web search engine (e.g., Google or other app search engines), and then obtain the search snippets as the additional textual information of the corresponding app. A search snippet is the abstract of the web page which are returned as relevant to the submitted search query. The textual information in search snippets is brief but can effectively summarize the corresponding web pages.
 Context Log. Smart mobile devices can capture the histor-ical context data and the corresponding app usage records of users through context-rich device logs, or context logs for short. For example, Table 1 shows a toy context log which contains several context records , and each context record consists of a timestamp, the most detailed contex-tual information at that time, and the corresponding user app usage record captured by the mobile device. The con-textual information at a time point is represented by sev-eral contextual features (e.g., Day name , Time range , and Location ) and their corresponding values (e.g., Saturday , AM8:00-9:00 , and Home ), which can be annotated as con-textual feature-value pairs . Moreover, app usage records can be empty (denoted as  X  X ull X ) because users do not always use apps. In Table 1, raw location related data in context data, such as GPS coordinates or cell IDs, have been trans-formed into semantic locations such as  X  X ome X  and  X  X ork Place X  by a location mining approach (e.g., [7]). The basic idea of such kinds of approach is to find the clusters of user positions and recognize their semantic meanings through a time pattern analysis.

Given a target taxonomy  X , an app a and a system-specified parameter K , our approach incorporates the fea-tures extracted from both the relevant Web knowledge and contextual information of a to classify a into a ranked list of K categories c a 1 ; c a 2 ; :::; c a K , among N c leaf categories c
Many classification approaches, such as Naive Bayes, SVMs and Maximum Entropy (MaxEnt) can be taken advantage of in our framework for app classification. Among them, in this paper we propose to leverage MaxEnt for training a mobile app classifier according to the discussion in [9].
When we utilize the MaxEnt model to train app classi-fiers, the most important work is to select effective feature functions. Intuitively, given an app a and its category label c , the basic features that can reflect the relevance between a and c are the words contained in the name of a . Suppose that the name of app a consists of a set of words f w a i w i can be considered as a relevant boolean feature to the category label c . That is, the occurrence of a word w can be denoted as f ( w ) = 1 while vise versa we denote f ( w ) = 0. The weights of these features can be learned in the training process of the MaxEnt model.

A critical problem of this type of features is that the lengths of app names are usually too short and the con-tained words are very sparse. As a result, it is difficult to train an effective classifier by only taking advantage of the words in app names. Moreover, the available training data are usually with limited size and may not cover a sufficiently large set of words for reflecting the relevance between apps and category labels. Therefore, a new app whose partial, or all words in name do not appear in the training data will not obtain classification results if the classifier is only based on the words in app names. To this end, we should also take consideration of other effective features which can cap-ture the relevance between apps and category labels. In the following two sections, we introduce the features extracted from both the relevant Web knowledge and contextual in-formation for training an app classifier.
In this section, we introduce how to leverage Web knowl-edge for extracting additional textual features of mobile apps. To be specific, we investigate two such kinds of textual fea-tures to capture the relevance between apps and the corre-sponding category labels, namely, explicit feedback of Vector Space Models and implicit feedback of semantic topics .
This type of features exploits the top M results (i.e., search snippets) returned by a Web search engine by leverag-ing the explicit feedback of Vector Space Models (VSM) [11]. Given an app a and its category label c , we first submit a  X  X  name to a Web search engine (e.g., Google API in our exper-iments). Then, for each of the top M results, we map it to a category label in the app taxonomy  X  by building a Vector Space Model. There are three steps in the process of map-ping snippets to categories by VSM. First, for each app cat-egory c , we integrate all top M snippets returned by a Web search engine for some pre-selected apps labeled with c as a category pro le d c . Particularly, we remove all stop words (e.g.,  X  X f X ,  X  X he X ) in d c and normalize verb and adjectives (e.g.,  X  plays ! play  X ,  X  better ! good  X ). Second, we build a n ormalized words vector c , where n indicates the number of all unique normalized words in all category profiles, dim [ i ] = freq i;c  X  and f req i;c indicates the frequency of the i -th word in the category profile d c . Finally, for each snippet s returned for app a , we remove the words which do not appear in any category profile and build its normalized word vector ! w a;s in a similar way. By calculating the Cosine distance between c = arg min
Through the Vector Space Model, we can calculate a gen-eral label con dence score introduced in [3]: where M c;a indicates the number of returned related search snippets of a whose category labels are c after mapping. Intuitively, the Gconf score reflects the confidence that a is labeled as c gained from Web knowledge. The larger the score, the higher the confidence.

However, sometimes Gconf score may not accurately vali-date the relevance between c and a due to the noise category labels contained in the mapping list. In practice, we find the more unique category labels contained in the mapping list, the more uncertainty for classification. Therefore, we further define another score named general label entropy to measure the uncertainty of app classification, which can be calculated as follows: where P ( c i ) = Gconf ( c i ; a ).
Although the explicit feedback of VSM can capture the relevance between app and category label in terms of the occurrences of words, it does not take advantage of the la-tent semantic meaning behind words and may not work well in some cases. For example, in VSM, the following words  X  X ame X ,  X  X lay X  and  X  X unny X  are treated as totally different measures to calculate the distance between word vectors. However, these words indeed have latent semantic relation-ships because they can be categorized into the same seman-tic topic  X  X ntertainment X . According to [9], the latent se-mantic topics can improve the performance of short&amp;sparse text classification. Therefore, we study the textual features which consider the implicit feedback of semantic topics. To be specific, we propose to leverage the widely used Latent Dirichlet Allocation model (LDA) [1] for learning latent se-mantic topics.

After learning latent topics, we extract the feature based on the implicit feedback of semantic topics as follows. Given an app a , we first leverage a Web search engine to obtain the top M relevant snippets and remove the words which do not appear in any category profile. Then, we map each snippet s to a category by calculating the KL-divergence between their topic distributions as follows: where P ( z k j c ) = P ( z k j d c ) and P ( z k j s ) / can be obtained through the LDA training process. The category c  X  with the smallest KL-divergence will be selected as the label of s , i.e., c  X  = arg min
Finally, we calculate the topic con dence score for a given category c as follows: where T a;c indicates the number of returned snippets for a with the category label c . Intuitively, the T conf score reflects the confidence that a is labeled as c with respect to latent semantic topics. The larger the score, the higher the confidence. Moreover, we also calculate the topic based general label entropy in similar way according to Equation 2.
In this section, we introduce how to extract effective con-textual features of mobile apps from real-world context logs. To be specific, we study two types of contextual features, namely, pseudo feedback from context vectors and frequent context patterns .
The first type of contextual feature considers the feed-back of context vectors. We assume that the usage of a particular category of apps is relevant to some contextual feature-value pairs. To be specific, given the apps in the  X  X ame/Strategy Game X  category, they may be relevant to the contextual feature-pairs ( Day period: Evening ) and ( Lo-cation: Home ), respectively.

Based on this assumption, similar to the VSM-based ap-proach introduced in Section 3.1, we can build a context vector for each app category. After building the context vectors for app categories, we can take the feedback of the pseudo category based on context similarity as a contextual feature. To be specific, given an app a and a category la-bel c , we first build the context vector of a denoted as and then calculate the Cosine distance between app categories X  context vectors. Finally, we rank category labels in ascending order according to their Cosine distance to c  X  = arg min r ank distance by: where Rk ( c ) denotes the rank of category c obtained by com-paring vector distances to a . Intuitively, the CRDistance 2 [0 ; N c ), where N c indicates the number of leaf nodes in the app taxonomy  X . Obviously, the smaller the distance, the more likely the category label c is the correct label.
When leveraging the pseudo feedback of context vectors, we regard each unique context feature-value pair as an inde-pendent measure for the relevance between context and the usage of a particular category of apps. However, recently some researchers pointed out that some context feature-value pairs are mutually related rather than separate ele-ments and their co-occurrences are relevant to app usage as well [2]. Along this line, we study a contextual feature to capture the relevance between the co-occurrence of con-textual feature-value pairs and app usage. Specifically, we take advantage of the frequent context patterns for apps as follows.
 It is not a trivial work to mine these context patterns. As pointed out by Cao et al. [2], the amounts of context data and app usage records are usually extremely unbal-anced, which makes it difficult to mine such context patterns through traditional association rule mining approaches. For-tunately, some researchers have studied this problem and proposed some novel algorithms for mining such context pat-terns. For example, Cao et al. [2] proposed a novel algorithm for mining such context patterns, which are referred to as behavior patterns in their work, by utilizing different ways of calculating supports and confidences. In an incremental work of [2], Li et al [5] proposed a more efficient algorithm named BP-Growth for this problem. In this paper, we lever-age the BP-Growth algorithm for mining frequent context patterns. The basic idea of the algorithm is partitioning the original context logs into smaller sub-context logs for reduc-ing the mining space and mining frequent context patterns in these sub-context logs.

After mining context patterns, we regard the occurrences of relevant frequent context patterns as boolean features for determining a proper category label for a in a similar way of leveraging the words in app names.
In this section, we evaluate our approach through system-atic empirical comparisons with two state-of-the-arts base-lines on a real-world data set.
The data set used in the experiments is collected from many volunteers by a major manufacturer of smart mobile devices. The data set consists of 443 context logs from differ-ent mobile users and total 8,852,187 context records, which contains rich contextual information and the usage records of total 680 unique apps spanning for from several weeks to several months. In the experiments, we manually define a two-level app taxonomy based on the taxonomy of Nokia Store, which contains 9 level-1 categories and 27 level-2 cat-egories. Table 2 shows the details of our predefined app taxonomy.
 Table 2: The predefined two-level taxonomy in our experiments.

W e invited three human labelers who are familiar with smart mobile devices and apps to manually label the total 680 apps with the 27 level-2 category labels. For each app, each labeler gave the most appropriate category label by his (or her) own usage experience (all the apps in the experi-ments can be downloaded through Nokia Store). The final label of each app was voted by three labelers. Particularly, for more than 95% apps, the three labelers gave the same labels.
In this paper, we adopt two state-of-the-arts baselines to evaluate the performance of our approach. To the best of our knowledge, there is only one relevant approach has been reported in recent years, which can be directly leveraged for automatic app classification. Therefore, we leverage this approach as the first baseline. Word Vector based App Classifier (WVAC) is introduced in [7], which is adapted from the web query classification approach proposed in [3] for app usage record normalization.

The second baseline is originally developed for short text classification, which can be extended for classifying apps. Hidden Topic based App Classification (HTAC) is in-troduced in [9], whose main idea is to learn hidden topics for enriching original short&amp;sparse texts. To be specific, this approach adds semantic topics as additional textual features and integrate them with words for classifying short&amp;sparse texts.

To reduce the uncertainty of splitting the data into train-ing and test data, in the experiments we utilize a ten-fold cross validation to evaluate each classification approach. To evaluate the classification performance of each approach, we leverage three metrics Overall Precision@K , Over-all Recall@K and Overall F 1 Score as introduced in [3].
In order to study the contribution of Web knowledge based textual features and contextual features in our approach, we compare four MaxEnt models with different features, namely, ME ( MaxEnt with words ), ME-T ( MaxEnt with words + Web knowledge based Textual features ), ME-C ( Max-Ent with words + Contextual Features ) and ME-T-C ( Max-Ent with words + Web knowledge based Textual features + Contextual Features ). Because we treat the words in app names as basic features, all models take advantage of this kind of features by default.

In our experiments, we choose Google as our Web search engine to obtain the relevant snippets of apps, and set the number of search results M to be 10, which equals to the number of search results in one search page. Each search Figure 1: The average overall (a) precision @ K , (b) recall @ K and (c) F 1 score of each classification ap-proach with different K in the ten-fold cross valida-tion. snippet is normalized by Stop-Words Remover 1 and Porter Stemmer 2 . The number of latent topic K for both our ap-proach and baseline HTAC are set to 20 according to the estimation approach introduced in [14]. Two parameters and for training LDA model are set to be 50 =K and 0.1. The settings of context pattern mining approach BP-Growth are similar to [5]. To avoid over fitting in the training process of MaxEnt model, we also use Gaussian prior for parame-ter  X  similar to [8]. Moreover, both our approach and the baselines are implemented by standard C++ and the exper-iments are conducted on a 2.8GHZ 2 Dual-core CPU, 2G main memory PC.

Figure 1 (a), (b) and (c) compares the average overall precision @ K , recall @ K and F 1 of two baseline methods WVAC, HTAC and our approaches with different features, namely, ME, ME-T, ME-C and ME-T-C in ten rounds of tests. From the above experiments, we can draw the conclu-sions as follows: 1) First, all other approaches outperform ME, which implies the textual information in app names is insufficient for classifying apps effectively and leverag-ing additional features can improve the classification per-formance dramatically. 2) Second, the MaxEnt model with Web knowledge based textual features ME-T outperforms the two baselines WVAC and HTAC, which indicates that the combination of multiple Web knowledge based textual features and basic app name based features is more effective than single Web knowledge based textual features for app classification. 3) Third, the MaxEnt model with contextual features ME-C also outperforms two baselines, which val-idates the effectiveness of relevant contexts for improving the app classification performance. 4) Finally, the MaxEnt model which combines the Web knowledge based textual fea-tures and contextual features outperforms both ME-T and ME-C, which indicates the integration of two kinds of ad-h ttp://www.lextek.com/manuals/onix/index.html http://www.ling.gu.se/  X  lager/mogul/porter-stemmer ditional features in the MaxEnt model can achieve the best performance.
In this paper, we proposed a novel approach for classifying mobile apps by leveraging both Web knowledge and relevant real-world context. To be specific, we first extracted several Web knowledge based textual features by taking advantage of a Web search engine. Then, we also leveraged real-world context logs which record the usage of apps and correspond-ing contexts to extract relevant contextual features. Finally, we integrated both types of features into a widely used Max-Ent model for training an app classifier. The experiments on a real-world data set collected from mobile users clearly show that our approach outperforms two state-of-the-arts baselines.
 Acknowledgement. This work is supported by grants from Natural Science Foundation of China (No. 61073110), Key Program of National Natural Science Foundation of China (No. 60933013), National Major Special Science &amp; Tech-nology Projects (No. 2011ZX04016-071), Research Fund for the Doctoral Program of Higher Education of China (No. 20093402110017) and Nokia.
