 have devoted poor attention to the problem of effectively and efficiently mining com-scenarios, as modern database systems are more and more immersed in object-lows us to achieve more powerful functionalities. Also, the combined action of clustering techniques and well-consolidated methodologies resolution vision of the underlying object domain . 
Inspired by motivations above, in this paper we propose and experimentally assess objects extracted from distributed database settings , called ledge fruition of (clustered) complex database objects, with mining opportunities and expressive power infeasible for traditional methodologies. So-obtained cubes store clustered complex database objects within cube cells, rather than conven-tional SQL -based aggregations like in standard Business-Intelligence -oriented OLAP data cubes. According to our vision, the ClustCube improvement towards achieving the integration of OLAP and Data Mining , which is ( OLAM ) discipline [4]. Figure 1 shows the  X  X ig picture X  of the research we propose, i.e. the which supports primitives and functionalities for defining and managing cubes; ( v ) the ClustCube Layer ( CCL ), which stores the final accepted as short paper. Most part of the novel contribution focuses on a comprehen-sive and wide experimental analysis addressing performance of algorithms embedded in the proposed framework (see Section 5). database located at the DDBL layer (see Figure 1) plays a critical role within the Cube geted to the specific requirements delineated by ClustCube via a set of Complex Object Definition Queries (  X  X   X , her/his analysis/mining tasks. CODQ queries in QS CODL into a singleton global CODQ query , denoted by OI Figure 1). Global CODQ query Q CODL can be simply obtained from QS according to several straightforward alternatives, such as union , i.e.  X   X   X  ty, in the ClustCube framework the administrator is allowed to edit global Q of arbitrary nature, even based on complex user-defined SQL expressions . Look-es of the DDBL layer. As a consequence, ClustCube of ClustCube methodology over conventional mining paradigms. restRate ), ( iv ) LoanAccount ( LoanNumber , CustId , OpenDate , TermDate , Amount , InterestRate , MonthlyPayment ), ( v ) CheckingAccount ( CheckingId , CustId , OpenDate , OverdraftLimit ). On top of the database DataBank , the query 
Q CODL of the running example retrieves the set of employees who are also cus-tomers and that, during the last year, have obtained a loan whose amount is between 70,000$ and 80,000$ while the balance of their saving account is between 5,000$ and complex database objects that are capable to support powerful mining tasks over Da-taBank according to the ClustCube guidelines (see Section 1). OS
CODL the intensional part of the OL layer and OI CODL CODQ query Q CODL . SQL syntax of Q CODL , as follows (assume that attributes, i.e. | Sel ( Q CODL )| = N ): ( i ) N = | noted as a h , one for each selection attribute depends on the type of the corresponding selection attribute memory-representation of a h is determined by the software platform on top of which OS tively, which allow us to retrieve and set the actual value of the field ponding object, respectively. 
Looking at practical implementations, given the CODQ stances of class OS CODL populating the set OI CODL obtained according to the following procedure: ( i ) retrieve the answer to query against the DDBL layer, denoted as RS ( Q CODL ); ( ii ) for each tuple layer (see Figure 1). This paradigm is reminiscent of similar operations performed to Figure 1). Formally: layer. Without further investigation, it should be noted that structure of E/R schemas stored at the DDBL layer and the In this Section, we provide details on the ClustCube cube 
C characterized by the set of dimensions D = { N = | OS CODL |, being dimensions in D corresponding to features in ClustCube cube cell C [ i 0 ][ i 1 ]...[ i N-1 ] 0  X  i  X  | d 1 |, ..., 0  X  i N-1  X  | d N-1 |, denoting  X  X  X   X   X  OI ( C [  X  ]), that are obtained by simultaneously clustering objects in respect to the dimensions/features d 0 , d 1 , ... , d to observe that, for each ClustCube cube cell C [  X  ] in of 
C [  X  ] along the dimension d i , denoted by  X   X   X   X  X  X  and tively, are determined by the A -based clustering of objects in of ClustCube cube cells along dimensions are the result of the clustering algorithm itself. 
This novelty has deep consequences on the way ClustCube computed. To become convinced of this, c onsider a simple case study focused on an following dimensions (features, respectively  X  see Figure 3 ( a )): ( i ) represents the price at which a certain house is sold; ( ii ) ing of such a data set with respect to the features (dimensions, respectively) hierarchies defined by the input OLAP aggregation scheme, thus determining regular partitions of the target data domain, in novel ClustCube stored in ( ClustCube ) cube cells correspond to clusters computed by input clustering shown in Figure 3 ( d ), given a ClustCube data cube C may alternatively contain either a whole cluster generated from to having each cluster stored within one ClustCube cube cell only), the approach we to a wide spectrum of advantages such as supporting meaningful multi-resolution [9] multidimensional exploration of clustered complex objects by means of the nice prop-cluster , thus supporting meaningful similarity-based cluster analysis [12]. ClustCube cube generated by the CCDML layer (see Figure 1) with the canonical cubod lattice [3]. In traditional OLAP , given an N -dimensional data cube d , ..., d N-1 } as dimension set, the cuboid lattice associated to rarchical structure composed by 2 N  X  1 cuboids, denoted by in 
D , each one at different cardinality. In other words, an data cube C represents a particular n -dimensional view of n n = 0, the apex cuboid is defined, which corresponds to the empty data cube such that, for each pair of cuboids C i and C j in L tively. This finally determines a cuboid hierarchy (associated to For instance, Figure 4 ( a ) shows in the left side the cuboid lattice dimensional ClustCube cube C having D = { A , instance, the property CD  X  BCD holds in H ( L ), being the cuboids enough that in the cuboid lattice L of an N -dimensional data cube l of L are hierarchically linked to cuboids at level l  X  1 and realizes the precedence relation  X  in practice. Now, focus the attention on some important properties of the of cuboid CD (which precedes BCD in H ( L ), i.e. CD with respect to the newly-added dimension/feature clusters at level l = 1 are retrieved by means of the core algorithm amenity, we do not need to compute remaining cuboids from the scratch but every cubo-id 
C at level l of L , such that 2  X  l  X  N , can be obtained from the cuboids at level 1 of L , simply by simultaneously distributing objects in  X  X  towards cuboids at level l = N , the cuboid lattice L ly obtained in a progressive manner . probing research challenge to face-off within the whole ClustCube onstrated by our comprehensive experimental evaluation and analysis of performance (see Section 5). Given the input class OS CODL , the collection of complex objects clustering algorithm A , the CCDML layer computes the final stored at the CCL layer (see Figure 1). To this end, ClustCube several kinds of techniques for efficiently building the cuboid lattice L (each one codified by a respective materialization strategy and building strategy , both referring ways tained. Materialization strategies specify which cuboids, among the 2 L L 2  X  1 cuboids of L is materialized. As regards the building strategy, scratch (i.e., directly from input objects in OI CODL according to which cuboids at level l of L , for 2  X  l  X  N notice here that, in the ClustCube framework, the target hence customizable to different application scenarios where applied, ranging from conventional centralized scenarios to more probing distributive and stream settings. niques for computing the target ClustCube cube are finally obtained in terms of com-binations of both materialization and building strategies, namely: discuss each one of the ClustCube building techniques above, along with the respec-tive ClustCube building algorithm.  X  X UL , BAS X  is the most-straightforward technique among all the defined ones. Accord-cuboid C i in L is computed by applying clustering algorithm objects in OI CODL with respect to the features in Section 3). Algorithm BuildClustCube_FUL_BAS implements technique  X  X UL , BAS X  . BuildClustCube_FUL_BAS simply computes metadata, determine D i ; ( ii ) execute algorithm A on D , thus obtaining the set of clusters H i = {  X  in H i and for each dimension d m in D i , project U = {  X  dimensional partition of the underlying object domain, denoted by clusters  X  k in H i within ( ClustCube ) data cube cells of nique of technique  X  X UL , BAS X  due to running clustering algorithm L . Contrary to technique  X  X UL , BAS X  , technique  X  X UL , DRI X  algorithm A to compute one-dimensional cuboids of L at level hierarchical cuboids. Algorithm BuildClustCube_FUL_DRI implements tech-nique A mension of one-dimensional cuboids in L (level l {
 X  , 
 X  1 ,..., dimension set D of the target ClustCube data cube model); ( ii ) for each cluster H , project  X  k along the singleton dimension d m in  X  dimensional partition of the underlying object domain  X  ing n -dimensional cuboid C i in L at level l , such that 2 steps: ( iii .1) from cube metadata, determine D i  X  ,...,  X  K -1 } associated to C i by distributing objects in dimensional partitions  X  associated to dimensions in tering steps are not required); ( iii .3) materialize clusters data cube cells of C i based on  X  . [11], which focuses on the problem of computing iceberg cubes efficiently . The traversal path model is consistent for both traditional OLAP and actual Cube data cubes. Given an N -dimensional data cube C with cuboid lattice C in 
L of kind: T =  X  C 0 , C 1 , ..., C in {0, 1, ..., | T |  X  1}; ( iii ) for each pair  X  i , j  X  C ; ( iv ) for each pair  X  i , j  X  in {0, 1, ..., | T |  X  1} such that C in T corresponds to the apex cuboid [3]  X  in the OLAP schema of  X  ); ( vi ) C | T |-1 in T corresponds to the base cuboid (i.e., the cube) particular analysis/mining goals [37G,36G]. While this gracefully involves in cubes having a lower occupancy in secondary memory, non-materialized cuboids can be by most OLAP server platforms. It should be clear enough that defined as representing sort of preferred mining patterns , i.e. H ( L ), i.e.  X  C i :  X   X  C j , C k  X  in T , C i  X  C j  X  C i  X  C k H cuboid lattice L of a four-dimensional ClustCube cuboid lattice. Algorithm BuildClustCube_PAR_BAS and algorithm BuildClust-Cube_PAR_DRI implement the techniques  X  X AR , BAS X  and Cube_FUL_BAS and BuildClustCube_FUL_DRI , respectively, with the sole complete traversal path T rather than the OLAP schema of lattice structure L ) like in the previous solutions. In order to probe the effectiveness of the proposed formed an extensive experimental evaluation and analysis of the of experiment aimed at probing the efficiency and the effectiveness of framework, respectively. Each kind of experiment has been performed by adopting as rithms: BIRCH [13], CLARANS [8] and DBSCAN [2]. Briefly, recall that these algo-ployed in our experimental analysis conveys much more reliability to our experimen-tal assessment. dimensionalities (ranging from two to ten dimensions). On top so-obtained concerns ClustCube partial materialization approaches, we generated synthetic irregu-cuboid lattice L of an N -dimensional data cube, traversal paths mentally generated from L by randomly selecting , for each level cuboids of size  X 1 ;  X  X  X  X  X  X  T , i.e. what we call as the selectivity of T , denoted by work,  X  is measured in terms of a percentage value with respect to the total number much more reliable assessment with respect to the case of handling regular complete ing the performance of the latter case. The latter claim is supported by the clear evi-materialized ClustCube cubes with regular complete traversal paths. 
In our experimental assessment, we compared our proposed algorithms for compu-ting 
ClustCube cubes against the case of using CLIQUE [1], which is a state-of-the-art approach for subspace clustering of high-dimensional data, as baseline algorithm. Is should be noted that CLIQUE keeps several points of similarity with our approach space). Thanks for this similarity, in our experimental campaign we used CLIQUE as an alternative method to compute ClustCube cubes along with the associated cuboid multidimensional data set with cuboids of ClustCube cubes . as ClustCube core algorithms (i.e., BIRCH, CLARANS and DBSCAN) as well provide us with the best performance, according to what suggested by the respective obtain the best possible result from each clustering technique, hence achieving a fair experimental assessment. Figure 5 shows the variation of the execution time of benchmark data set TCP-H for the different building techniques ( a )),  X  X UL , DRI X  (Figure 5 ( b )),  X  X AR , BAS X  (Figure 5 ( c )) and ( d )), when adopting as core algorithms BIRCH, CLARANS and DBSCAN, respec-with the performance due to CLIQUE. Figure 6 shows instead the same experimental pattern of Figure 5 retrieved on the real-life data set Movie . rences , especially when BIRCH and DBSCAN are employed as core algorithms. CLIQUE exposes instead a better performance in some occurrences when CLARANS hence the inefficiency of CLARANS (e.g., [2]) decreases, in turn, the performance of following, BAS ClustCube building techniques have a smaller spectrum of applicative not limit the effectiveness and the efficiency of settings [12]. tiveness of ClustCube in terms of the accuracy of niques, which are clearly the most significant to be stressed due to fact Cube building techniques compute all the cuboids of the lattice from the scratch (see range of applicative settings [12]. Again, accuracy due to rithms has been compared with the one of CLIQUE. 
In particular, accuracy of ClustCube has been measured by computing the similari-ty of the approximate clustering produced by DRI ClustCube respect to the exact clustering produced by BAS ClustCube alternative approach for computing ClustCube cubes. computed the similarity between two different clustering  X  clustering  X   X  with respect to clustering  X   X   X  , denoted as 
Based on (2), Sim between clustering  X   X  and clustering  X  X  X  X  X   X   X ,  X   X   X  , is defined as follows: In our experimental evaluation, fixed an N -dimensional cuboid lattice L , we measured the average Sim , denoted by ferent clustering induced by groups of cuboids of obtained by means of core algorithm A according to different  X  X  X   X  X  X  X   X  A  X  X , X , between the i -th cuboid at level cording to the DRI approach, denoted by  X   X , X   X  X RI, A  X  tained by means of A and according to the BAS  X  X  X   X  X  X  X   X  A  X , X ,  X  is formally defined as follows: such that  X  X  X   X , X   X  X RI, A  X  X  X  and  X  X  X   X , X   X  X AS, A  X  X  X  cuboids  X   X , X   X  X RI, A  X  and  X   X , X   X  X AS, A  X  , respectively. clustering  X   X  and clustering  X   X   X  , denoted as  X  X  X  X  such that: ( i )  X   X   X , X   X   X  of objects in the input data set. Based on (5), AMI between clustering ing  X   X   X  , denoted as  X  X  X  X  X   X   X ,  X   X   X  , is defined as follows: respectively) denotes the entropy of clustering  X  (  X  X  as follows: average AMI , denoted by  X  X  X   X  X  X  X   X  A  X  X , X , , which is defined as follows: such that such that  X  X  X   X , X   X  X RI, A  X  X  X  and  X  X  X   X , X   X  X AS, A  X  X  X  ciated to cuboids  X   X , X   X  X RI, A  X  and  X   X , X   X  X AS, A  X 
Figure 7 shows the variation of metrics  X  X  X   X  X  X  X  and rithms BIRCH, CLARANS and DBSCAN, respectively, and ranging the level show the variation of  X  X  X   X  X  X  X  for the ClustCube ments. Finally, Figure 8 shows the same experimental pattern of Figure 7 retrieved on the real-life data set Movie . From the experimental results above, it clearly follows that the accuracy of Cube is indeed comparable to the one of CL IQUE, and, in some occurrences, it even outperforms CLIQUE X  X  accuracy over both the data sets TPC-H and Movie . Summa-it should be clear enough that our proposed ClustCube framework allows us to obtain markable contribution over state-of-the-art research. tracted from distributed database settings, called experimentally assessed in this paper. ClustCube encompasses a spectrum of research mining (complex) objects. Future work is mainly oriented towards extending the pro-research. 
