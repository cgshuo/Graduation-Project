 With the booming of online social networks, social trust has been used to cluster users in recommender systems. It has been proven to improve the recommendation accuracy when trust communities are integrated into memory-based collab-orative filtering algorithms. However, existing trust commu-nity mining methods only consider the trust relationships, regardless of the distrust information. In this paper, con-sidering both the trust and distrust relationships, a SVD signs based community mining method is proposed to pro-cess the trust relationship matrix in order to discover the trust communities. A modified trust metric which considers a given user X  X  expertise level in a community is presented to obtain the indirect trust values between users. Then some missing ratings of the given user are complemented by the weighted average preference of his/her trusted neighbors se-lected in the same community during the random walk pro-cedures. Finally, the prediction for a given item is generated by the conventional collaborative filtering. The comparison experiments on Epinions data set demonstrate that our ap-proach outperforms other state-of-the-art methods in terms of RMSE and RC.
 H.3.3 [ Information Search Retrieval ]: Information Fil-tering; J.4 [ Computer Applications ]: Social and Behav-ioral Sciences trust communities;clustering;trust and distrust;collaborative filtering
With the explosion of information on the Internet, Rec-ommender Systems(RSs) as an indispensable type of Infor-mation Filtering technique have attracted lots of attention in the past decades. Typically, recommender systems are based on Collaborative Filtering (CF), which is a technique that automatically predicts the interests of an active user by collecting rating information from other similar users or items[1]. CF based RSs can be classified into memory-based and model-based approaches. In this paper, we focus on the memory-based method.
 In order to alleviate the inherent problems of traditional CF based RSs, such as data sparsity, cold start and scalabil-ity, some clustering based CF[11] and trust based CF meth-ods[6, 7] have been proposed, which have improved the qual-ity of RSs. Recently, some works are exploring the benefits of combining clustering and social trust information to fur-ther enhance the Recommender Systems[4, 8, 9]. However, as far as we know, these works only consider the clustering of trust relationships, regardless of the distrust information.
Motivated by the research of signed network mining, which believes that a signed network is often composed of commu-nities, entities within the same community are all positive relationships and negative relationships exist between differ-ent communities[2]. We argue that trust network, as a spe-cial type of signed network will also follow the so-called  X  X al-anced X  patterns[2, 12]. That is to say, users in the same com-munity trust each other and users between different commu-nities have distrust relationships with each other.
Therefore, we focus on mining trust communities based on the trust and distrust relationships in order to make the densely connected users into the same trust communi-ty. Empirical study shows a correlation between trust and user similarity[4], in our work we assume that users share more similarity in the same community than users in dif-ferent communities. By combining with the collaborative filtering method, the prediction of missing ratings will be generated within each community. The main contributions of this paper are summarized as follows: 1)A trust community mining method is proposed by clus-tering the trust relationship matrix based on the Singular Value Decomposition signs algorithm[3]. 2) A modified trust metric which considers a given user X  X  expertise level in a community is proposed to obtain the indirect trust values between users. 3) Some missing ratings of a given user are complemented by the weighted average preference of his/her trusted neighbors selected in the same community during the random walk procedures. 4) We conduct experiments on the Epinions data set. Experiment results show better performance of our method in terms of RMSE and RC.
The rest of the paper is organized as follows: the notations are defined in Section 2. Section 3 introduced the proposed recommendation method. The experiment results and anal-ysis are presented in Section 4. Finally, Section 5 concludes thi s study with future work.
We denote the sets of all users, all items, all ratings and all communities as U , I , R and C ,respectively. We keep the symbols u , v for two different users, i , j for two different items and c for a community. Then r u,i  X  { 1 , 2 , 3 , 4 , 5 } represents a rating given by user u on item i . I u is the set of items rated by user u . The trust network can be defined as a directed graph G = h U, E i , where E represents the set of trust relationships. Binary trust relationships (i.e. trust and distrust relationships) are considered in this paper.  X  e E,  X  X  s e the trust relationship, s e means u distrusts v . T N u represents the set of neighbors user u trust in the trust network. T EN u represents the set of users who trust user u .
Inspired by the research of signed network mining, which believes that a signed network is often composed of commu-nities. Users share positive relationships within the same community and negative relationships exist between differ-ent communities[2]. In this paper, we choose to use the SVD signs proposed by[3] to cluster users into different com-munities according to how they are trusted and distrusted by others. The trust relationships can be represented by a matrix T is different from the adjacency matrix, it describes both the connection and the trust or distrust relationships between each other. By decomposing the matrix with trun-cated SVD, we can cluster the users by how they trust and distrust others and how they are trusted and distrusted by others with less dimensions. The decomposed trust relation-ship matrix with rank k can be represented by: Where matrix  X  T is the best possible rank k approximation to matrix T , k  X  rank ( T ). The singular values can be plotted on a line graph in descending order, and the turning point of the line can be chosen as the best k . Therefore, the elements of matrix S are the k dominant singular values and the rows of matrix P and Q can be regarded as the coordinates of the participants in the k dimensional spaces.

Since the matrix T is asymmetric, clustering methods by rows of P and Q have different meanings. If the rows of P have the same sign patterns on the k dimensions are clas-sified into one cluster, this may lead to up to 2 k clusters (actually may fewer than it). It clusters the users by how they trust and distrust others. Similarly, the sign patterns of the rows of Q are also applicable and this clusters the users by how they are trusted and distrusted by others.
Figure 1 is a toy example of the SVD signs based trust community mining result by using sign patterns of the first two left singular vectors. In the instance, the user number is 10, the rank k is set to be 2. According to the sign patterns of { (+ , +) , (+ ,  X  ) , (  X  ,  X  ) } the rows of P 10  X  2 side of Fig.1), the original trust network are clustered into three parts as circled by the different colors of dotted line. Figure 1: SVD signs based trust community mining Fro m the result we can see that each user belongs to a unique cluster, users in a same cluster trust each other while distrust each other between different clusters.
In this section, we first apply the random walk approach to explore the trust communities to collect the top-K trusted neighbors for users, then fill in some missing ratings of users by the weighted average ratings of their trusted neighbors.
Basically, user u first finds a set of direct trust neighbors in the trust community u belongs to. As we know that, di-rect trust relationships in trust networks are few. Therefore, we also consider the indirect trust relationships in order to collect enough trusted neighbors. The MoleTrust[7] algo-rithm which performs depth-first search to propagate and infer trust in the trust networks is adopted to infer the trust value of indirectly connected users. As the MoleTrust ap-proach can just produce binary inferred trust values with the binary data set, i.e., 0 or 1, where 0 means no direct trust connections whereas 1 indicates a direct trust value between users. We modify the inferred result as follows: the inferred trust value by the MoleTrust algorithm. dis c represents the shortest distance between user u and user v determined by a breath first search algorithm. N v is the rating number of user v . N c is the total rating number of community c . T EN v is the number of users who trust user v . T EN c is the number of trust relationships in community c . n c is the number of users in community c .

The idea of Equation 2 can be explained as: when cal-culating the indirect trust between the source user u and the target user v , if the target user v  X  X  expertise level E greater than the average expertise level  X  E c , we believe that the target user is an expert in that community(Actually, no more than 10% users are experts.). Then the distance factor will not affect the final results. According to the six degrees theory, we set the propagation step d = 6.

If the number of directly connected neighbors cannot reach the predefined trust neighbor selection threshold K , then starting from one of the direct neighbors of u to explore the second step neighbors to collect more trusted neighbors. Note that the probability for choosing each friend to be fur-ther explored is equal to his/her trust score. Obviously, the more trustworthy a neighbor is, this neighbor X  X  neigh-bors are more likely to be trustworthy to u , and hence these neighbors will be explored with a higher probability.
The exploration is terminated if one of the two conditions is met: (1) the size of trusted neighbors reaches the pre-defined threshold K ; (2) the distance between user u and the neighbor to be explored exceeds the propagation step 6. Not e that the step t + 1 start to be processed only after all step t users have been processed.

It is worth mentioning that some cold users who have few ratings may also have few trusted neighbors. Most existing trust based recommendation approaches will fail to work when facing such situation. In order to address this issue, we select some experts from the communities the cold users belong to, and regard these experts as the trusted neighbors of the cold users. We leave as a future work a more detailed discussion on selection of the expert.

Then the missing rating of the given user u to item i can be computed by Equation 3. The idea is that user u  X  X  missing ratings of item i can be estimated by the weighted average ratings of his/her trusted neighbors who have rated item i in community c . Therefore, user u  X  X  sparse rating profile can be complement-ed by his trusted neighbors to some extent, which is helpful to perform the standard CF recommendation in Section 3.3. We denote the new items set rated by user u as  X  I u , which contains the set of items rated by user u and the set of items aggregated by his trusted neighbors.
With the new rating profiles of all users, we follow the classical CF technique to predict the rating of a target item i that has not been rated by user u . The first step is to find similar neighbors of the given user u in the community he/she belongs to. We use the pearson correlation coeffi-cient(PCC)[1]to measure the similarity between two users according to their ratings on the items that they rated in common(we set the overlap threshold to be 5). Therefore, a set of similar neighbors of the given user u can be denoted as SN u = { v/s u,v &gt;  X  s , v  X  U c } , where U c is the user set in community c .  X  s is a predefined similarity threshold which will be discussed in Section 4.3.

The classical last step of memory based CF methods is aggregating ratings for a given user u from the correlated neighbors SN u obtained in the first step for missing ratings. Hence, the predicted rating of item i ( i  X  I \  X  I u ) for the given user u is the weighted average of the ratings given to item i by the neighbors of u as shown in Equation 4.  X  r u,i repre-sents the predicted value on item i for user u . sim u,v is the similarity value generated by PCC.
In this section, we conduct series of experiments to e-valuate the performance of the proposed recommendation method which combines the trust communities and collabo-rative filtering(TCCF), and compare with two existing ap-proaches on Epinions data set. The compared approaches include a classical user based CF approach which only con-sidered the similarity between users named as UBCF[10]and an efficient recommendation approach proposed by Pham et al.[8] which run a density-based clustering algorithm just on trust relationships to cluster users into communities.
Epinions is a consumer reviews web site in which user-s can express their opinions about items by assigning nu-merical ratings and writing article reviews. The extended distrust relationships among users and their ratings on oth-er users X  articles. In this paper, we use the sampling method proposed in [5] to scale down the original data set. There-fore, the sampled data set contains 33k users who issued 84k trust/distrust statements and 332k ratings.
In order to validate the performance of our TCCF method, we use a popular technique for evaluating recommender sys-tems named as Leave-one-out with 1000 randomly chosen common users and 1000 cold users(users who have rated less than 5 items). Firstly, one rating from a given sam-pled user is masked. The predicted ratings generated by all the comparative recommendation approaches are then compared with the real rating and the difference in absolute value is the prediction error. The procedure is repeated for all the masked ratings and an average of all the errors is computed, that is, the Root Mean Square Error (RMSE): RMSE = of tested ratings. R is the real rating of an item and  X  R is the corresponding predicted rating. Another evaluation metrics we are interested in is the RatingsCoverage(RC): RC = M N , wh ere M and N are the number of predictable and all the testing ratings, respectively. RC measures the degree to which the testing ratings can be predicted and covered relative to the whole testing ratings.
In Section 3.3, we need to choose a proper similarity thresh-old  X  s to select the nearest neighbors of the tested users. As we are most interested in the effect of similarity threshold for cold users, we will not discuss the effect for common users. The threshold  X  s is varied from 0.0 to 0.9 with step 0.1. The result is illustrated in Figure 2. Figure 2: The effect of similarity threshold for cold use rs.

From Figure 2 we can observe that as the threshold  X  s in-crease, both the RMSE and RC decreases at the same time. Note that when  X  s reaches 0.4, the RC drops dramatically. Therefore, in our work, the similarity threshold is set to be 0.4 considering the tradeoff between the RMSE and RC.
In t rust communities mining algorithm, we set rank k to be 4 which can achieve the best community structure(The method of choosing k is discussed in Section 3.1). The re-ordered trust relationship matrix is shown in Figure 3. The blue dots represent trust relationships and the red ones rep-resent distrust relationships. From Figure 3, it is observed that there are clusters where the users mainly trust each other in the same cluster and overall distrust the users in some other clusters. Figure 3: Reordered trust relationship matrix after clu stering
In Section 3.2, we employed the random walk algorithm to select the top-K trusted users for a given user in the same community. In this paper, we set K as 100. Due to limited space, we will not discuss it further.

The sparsity of the sampled common users and cold users are 79.96% and 99.36%,respectively. Figure 4 is the com-parison results for both the common users and cold users.
In t he UBCF method, the similarity threshold is set to be 0.4 which leads to the best performance. In Figure 4, it is observed that UBCF performs worst for common users and cold users no matter in RMSE or RC due to its inherent problems. In Pham et al. X  X  method, the trust network is regarded as an undirected graph which can just represent the connection between users and may lower the accuracy of the clustering result. In addition, they didn X  X  consider the distrust relationships.

TCCF considers both the trust and distrust relationship-s which may increase the accuracy of the clustering, then better neighbors will be generated which may further im-prove the recommendation accuracy; on the other hand, we complement the sparse rating profiles for all the users be-fore performing the CF algorithm, which may improve the recommendation coverage. From Figure 4 we can conclude that TCCF performs better than Pham et al X  X  approach and gets the best result in all the metrics.
In this paper, we presented a new recommendation method by combining trust communities and collaborative filtering. We run the SVD signs algorithm on the trust relationship matrix to detect trust communities. Based on a random walk approach and a modified trust metric, a given user X  X  sparse rating profile can be complemented by his/her trust-ed neighbors in the same community. Then the predictions can be generated by the traditional collaborative filtering based on the complemented user rating profiles. Real data set based experiments demonstrate that TCCF outperforms the comparison approaches both in RMSE and RC. In the future, we will explore some better trust metrics and vali-date our method on some other data sets. [1] G. Adomavicius and A. Tuzhilin. Toward the next [2] K.-Y. Chiang, J. J. Whang, and I. S. Dhillon. Scalable [3] E. P. Douglas. Clustering datasets with singular value [4] T. DuBois, J. Golbeck, J. Kleint, and A. Srinivasan. [5] J. Leskovec and C. Faloutsos. Sampling from large [6] Y.-M. Li, C.-T. Wu, and C.-Y. Lai. A social [7] P. Massa and P. Avesani. Trust-aware recommender [8] M. C. Pham, Y. Cao, R. Klamma, and M. Jarke. A [9] G. Pitsilis, X. Zhang, and W. Wang. Clustering [10] P. Resnick, N. Iacovou, M. Suchak, P. Bergstrom, and [11] L. H. Ungar and D. P. Foster. Clustering methods for [12] B. Yang, W. K. Cheung, and J. Liu. Community
