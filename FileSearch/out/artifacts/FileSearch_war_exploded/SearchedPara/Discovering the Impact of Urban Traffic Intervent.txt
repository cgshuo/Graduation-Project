 Urban traffic planning and control is a critical problem for many cities. One specific problem in urban traffic management is the analysis and assessment of the impact of new subway line is to be built in a city, many roads may be closed for a considerable period. Consequently, the traffic flow in the city may be disturbed and traffic conges-the complexity of the traffic network. Traditional technologies such as induction loop tremely limited as the trajectory information of cars is lost and the change in the flow already been used to tackle many urban co mputing challenges [1], can assist the de-velopment of a solution. In this paper, we propose a framework that uses contrast mining on vehicle trajectories to analyze the change in traffic flow due to road closure events. Specifically, our contributions are: generate  X  X -Edgesets X  and analyze vehicle trajectories to find traffic volume on con-nected subsets of edges in G . rithm to extract the n-Edgesets with significantly different traffic patterns before and after the traffic intervention (the Emerging n-Edgesets). rithm to find frequently occurring emerging networks using Emerging n-Edgesets. This frequent network reveals the most severely affected sub-network of the city as a result of the intervention. tion 3 defines the problem and gives an overview of our framework. In Section 4, we discuss our methodology in detail. Section 5 presents the experiments and evaluation of our algorithms. In Section 6, we conclude and discuss future research directions. Urban computing using vehicle trajectory data has received a considerable amount of spatio-temporal causal relationships between anomalous traffic links using a tree struc-and urban design flaws in a city. Chawla et . al. [4] have mined traffic anomalies using Principle Component Analysis and investigated root cause of these anomalies. These works mainly focus on discovering urban traffic issues, whereas this paper addresses a further question: once some traffic intervention occurs, for instance, building a new road or closing a road segment, what will be its impact? To the best of our knowledge, this problem has not been given sufficient attention. Miller and Chetan [5] have studied the impact of short-term highway traffic incidents. In our framework, we are not restricted to highways and also consider long-term traffic interventions that can last for weeks or months. Salcedo-Sanz et. al. [6] performed simulations to reconfigure one-way streets in a town to find the shortest path in order to cross an area affected by a large event. How-simulated vehicle trajectories to identify regions of impact. 
Traditional transport systems research mainly uses loop sensors embedded under the road network to monitor traffic. Farnoush et. al. [7] have used loop sensor data in Los Angeles to cluster road segments and found a limited number of distinctive  X  X ig-nature X  traffic patterns on all road segmen ts. However, the connections between road segments are not discussed, which is a major limitation in using loop sensors. Our approach can be configured to study single road segment or a connected set of roads, which is more powerful than using loop sensors. In this section, we introduce some definitions, formally define our problem of emerg-ing sub-trajectory mining and provide an overview of our framework. 3.1 Preliminaries Definition 1. Road Network Graph . A Road Network Graph G (Figure 1 (b)) is an undirected graph where road in tersections form its nodes and road segments form its triplet &lt;EdgeID, N 1 , N 2 &gt; where N 1 and N 2 Definition 2. Trajectory . A trajectory, Traj , is a sequence of time-stamped geographi-cal locations of a moving object. A Traj can be expressed as a vector triplets &lt;longi-tude, latitude, time&gt;. Figure 1 (c) shows two trajectories. Definition 3. n-Edgeset . An n-Edgeset nES is an itemset consisting of a sequence of n connected edges in a Road Network Graph. An nES represents the direction of traffic flow though the edges. Figure 1 (d) illustrates some 2-Edgesets and 3-Edgesets. Traf-traverse 3-Edgeset {1,2,6 } and 2-Edgeset {3,4}. Definition 4. Emerging n-Edgesets . Given two time periods T profile of an n-Edgeset changes significantly during these times, it is called an Emerg-ing n-Edgeset (EnES). Definition 5. Frequent Emerging Network . A connected sub-network of a Road Net-work Graph is a Frequent Emerging Network (FEN) if it consists of frequently occur-ring Emerging n-Edgesets. 3.2 Problem Statement In this paper, we propose a method to model the traffic network in a city and charac-given road map data R and vehicle trajectories Traj , we address the problem of con-structing a Road Network Graph G , finding all Emerging n-Edgesets (EnES) using G and Traj and lastly finding the Frequent Emerging Network (FEN) using all EnES. 3.3 Framework Our framework is illustrated in Figure 2. Using the GPS trajectories and road net-work, the first step is modeling the city traffic by matching trajectories to edges. Next, we generate the n-Edgesets, compute the Growth Rate and find Emerging n-Edgesets (Section 4.2). The final step is to detect a Frequent Emerging Network from the Emerging n-Edgesets (Section 4.3). In this section, we describe our method in three sub-sections: traffic modeling, detect-ing Emerging n-Edgesets (EnES) and detecting the Frequent Emerging Network (FEN). We focus on finding the Growth Rate of the traffic on n-Edgesets, which gives information about the change in traffic flow following an event. 4.1 Traffic Network Modelling We model a road network as an undirected graph where intersections are the nodes and road segments are the edges. This approach is different with some popular model-ling approaches such as modelling the map as regions enclosed by major roads [8]. Region-based approaches can be useful to provide higher-level semantic information, but the capability of inferring traffic conditions on individual roads is limited. On the other hand, modelling road segments can provide finer details about the traffic net-work. We extracted road segments and in tersections manually from OpenStreetMap to ensure robustness. The road network is modelled as an undirected graph since direction information is embedded in the trajectory data, and n-Edgesets will be able to capture it. 
The second step in our traffic network modeling is to map GPS trajectories to the edges of our Road Network Graph. This is performed by a nearest neighbor (NN) algorithm. Between any pair of connected nodes, a linear interpolation of  X  X ummy nodes X  is created. These dummy nodes carry the same edge ID as the edge connecting due to its computational efficiency (O(nlog( n )) time when implemented using a kd-tree). 4.2 Mining Emerging n-Edgesets For each edge e in a Road Network Graph G , we exhaustively search for all con-nected sets of non-repeating edges of depth n that start from e , and each of these sets (c). Edgeset {1,2,6} represents the traffic fl ow in the following path: edge 1 to edge 2 volume on each n-Edgeset for different time periods. The vehicle trajectory database is divided into two parts, D 1 and D 2 , where: D 1 = data collected before a road closure event; D 2 = data collected after the closure (Section 5.1 gives more details). Given the base. The id of these new trajectory points are compared to ensure that they belong to the same car. The edge labels are then matched to the list of n-Edgesets. If a match is detected, the traffic volume count of that n-Edgeset is incremented. Using the traffic volume on each n-Edgeset, we compute the support of all n-event. Therefore, we compute the Growth Rate (or simply Growth) of support of an n-Edgeset using the following definition: Growth Rate : Given two datasets D 1 and D 2 , the Growth of itemset X is: 
This concept was initially proposed by Dong [9], but to the best of our knowledge, it has never been used in road traffic analysis. The original definition defines Growth n-Edgesets with no trajectory data to reduce noise. Hence, we define Growth = 0 Supp 1 ( X )  X  0 and Supp 2 ( X ) = 0. Table 1 shows the Growth of several 3-Edgesets. For example, Edgeset {1,3,4} has support before event = 0.10 and after event = 0.16. Thus its Growth = 0.16/0.10 = 1.58. After computing the Growth Rate of n-Edgesets, we sort Growth from high to low. Figure 3 (a) shows a plot of the sorted Growth for 2-Edgesets between consecutive days. It can be seen that the majority of 2-Edgesets have Growth of approximately 1.0. This is expected since the total traffic volume on most major roads is unlikely to change significantly between consecutive days. If viewed from a probability theory perspective, the middle region of the graph approximately corresponds to values drawn from a uniform distribution, whereas the side regions are from some form of tail distributions. Growth of the 2-Edgesets at the tails of the sorted edgesets deviates significantly from the majority. These 2-Edgesets are most likely under the effect of Emerging n-Edgesets as the n-Edgesets whose Growth deviate from  X  X ormal X  by a tail regions have much lower density than the middle region. Therefore, the Local Outlier Factors (LOF) [10] is used to select Emerging n-Edgesets as follows: 1. Find the LOF scores for each n-Edgeset in all n-Edgesets using sorted Growth 
Emerging n-Edgesets ( EnES ) . 3. If an EnES has growth larger 1, add it to the list of EnESes with increased traffic. If its growth is less than 1, add to the list of EnESes with decreased traffic. 
Although the LOF method is used, this is not anomaly detection. In anomaly detec-tion, there is no prior knowledge about the time of occurrence of the anomaly, whereas we compare the traffic system before and after traffic intervention such as road closure. We evaluate the effect of the traffic intervention rather than detecting its presence. Figure 3 (b) shows the resulting LOF scores for 2-Edgesets where the tails with low density have been successfully discovered and are marked with blue trian-gles. The weakness of LOF is that it requires two parameters, k , the number of against variations in these two parameters. 4.3 Mining Frequent Emerging Network The Emerging n-Edgesets reveals the paths that have been affected before and after a traffic intervention. As shown in Figure 3 (b), many Edgesets can be affected. To identify the region that has suffered the most significant impact, we proposed the method of finding the Frequent Emerging Network in the Emerging n-Edgesets (Algorithm MineFreqNetwork). We require that an edge in the list of Emerging n-Edgeset is a part of the Frequent Emerging Network if and only if it has occurred at least m times in the Emerging n-Edgesets and has a neighbouring edge which is also network that is most affected. In a real tr ajectory dataset (more details in Section 5.1), and unaffected areas. By applying frequent itemset mining, this problem can be miti-gated since the same noise is unlikely to occur repeatedly. Algorithm. MineFreqNetwork Input : EmerEdgesets: Emerging n-Edgesets , RNGraph: Road Network Graph Output : FreqEmergNetwork: Frequent Emerging Network 1: Uniq  X  unique edges in EmerEg 2: Network  X  empty list 3: forall edge in Uniq do // count frequency of each edge 4: count  X  frequency of occurance of edge in EmerEg 5: if count &gt; freq_thres then Network .add( edge ) end if 6: end for 7: forall freqEdge in Network do // find neighbours that are also in Network 8: Neighb  X  neighbours of freqEdge in RNGraph 9: if there exists no edge in Neighb that is also in Network then 10: Network .remove( freqEdge ) 11: end if 12: end for 13: return Network ness of our algorithms. We first present a real-life case study using taxi GPS trajecto-ries and two traffic simulations with a microscopic traffic simulator. 5.1 Real-life Case Study We used a Beijing taxi GPS trajectory dataset, which is publicly available from Mi-crosoft Research Asia [11, 12]. The dataset consists of trajectories generated by 10,357 taxis travelling in Beijing and its surroundings over a seven-day period (02/Feb/2008  X  08/Feb/2008). The road map of Beijing is obtained from openstreep-map.org. During the seven days, one road closure event is examined in this paper. Road Closure Event : South Xinhua Street was closed daily between 8:00  X  18:00, from 07/Feb/2008 to 11/Feb/2008 due to Chinese New Year. Therefore, two days of the road closure event are captured in the taxi trajectory dataset. 
We average the data of the closed days (07/Feb  X  08/Feb) and mine emerging pat-terns from the average of two previous days without road closure (05/Feb  X  06/Feb). A smoothing step is required since taxi trajectories can suffer from noise issues caused by insufficient data on smaller roads due to the GPS sampling rate. To further reduce the effect of noise, we filter and remove the Edgesets with fewer than 10 cars will not affect our results. Effectiveness Figure 4 shows the emerging patterns we found due to the road closure. Figure 4 (a) depicts the 2-Edgesets with increased traffi c after the road closure (red), while Figure The paths that traverse the closed road, for example, path 5 to 1 and 1 to 21 have re-through the closed road. Figure 4 (c) and (d ) depicts the Frequent Emerging Network extracted from the Emerging 2-Edgesets in Figure 4 (a) and (b). For roads with increased traffic (Figure 4 (c)), the edges ad jacent to the road closure are part of the Frequent Emerging Network. This is expected since the impact should be inversely isolated Emerging Edgesets in Figure 4 (a) can be observed, such as {64, 65} and {95,14}. Due to the unsupervised nature of the problem, whether these Edgesets are true positives or noise is unknown. However, as they are infrequent and removed Therefore, these Emerging Edgesets are likely to be noise, and the robustness of FEN is demonstrated. Parameter Sensitivity For the LOF algorithm, two parameters are essential, k , the number of neighbours; and thres , the threshold of LOF scores. We varied one parameter while fixing the other, and compare the number of Edgesets (NoE) selected (Figure 5). To choose k , one typically starts from a small positive integer and then increase k . This is because k larger k provides more  X  X moothing X  effect. Too much smoothing will not reflect the actual property of the system. In Figure 5 (a), NoE only varies slightly when k is be-tween 15 and 30. Therefore, results are not sensitive to the selection of k in that range, slightly large than 1.0 and increase thres . This is because the majority of the Edgesets usually have LOF scores of near 1.0, which indicates that their Growth values are similar. When thres increases from 1.0, NoE decreases steadily. Finally, NoE tends to converge when the difference between adjacent LOF values is large, and thres should be set in this area. Therefore, from Figure 5 (b), thres is selected to be 1.6 and thereby used in other experiments. During our experiment, we can easily extract emerging patterns for 2 and 3-Edgesets. However, due to the low sampling rate of GPS devices (1 to 10 minutes), it is difficult to extract meaningful patterns for Edgesets lo nger than three edges. In the next section, we show the results of using a traffic simulator, which overcomes this limitation. 5.2 Traffic Simulation We used a microscopic traffic simulator, which can perform large-scale and highly de-simulate traffic lights, whose timing can be controlled by static or dynamic strategies. 
We simulated traffic in two cities, Beijing and Sydney. For Beijing, we replicated the road closure event on South Xinhua Street; for Sydney, we closed a few segments tion, we easily extracted Emerging 2,3,4-edgesets. The results of extracting the Frequent Emerging Network of 4-Edgesets for Sydney are shown in Figure 6. The simulation was initially performed with 900 cars and the closed segments of street have increased traffic levels (red), wh ile there is a decrease in the traffic on the closed road (Figure 6 (b)). The simulation results are consistent with our real-life case study using taxi GPS trajectories from Beijing. Robustness We evaluate the robustness of the LOF-based method using different numbers of cars (300, 600, 900, 1200, 1500) in the simulation. The common Edgesets are found and treated as ground truth. Using the common Edgesets, we evaluate the precision and recall of each single experiment for the case of increased traffic (Figure 7 (a) and (b)) and decreased traffic (Figure 7 (c) and (d)). The LOF-based method was compared with a baseline method, which sets arbitrary thresholds to the Growth value to select Emerging Edgesets. For precision, it can be seen that overall, the LOF-method out-LOF method is 0.89 for both increased traffic and decreased traffic, whereas the base-line method only has a precision of 0.39 for increased traffic and 0.26 for decreased traffic. This implies that the variance in the value of Growth can be large for a large number of cars and the results of the baseline method can be sensitive to the threshold chosen. However, the LOF method is not affected since the variance in the data densi-ty of Growth can be much smaller than the variance in the value of Growth. When the creased traffic, 0.64 for decreased traffic) is slightly below the baseline (0.69 for both increased and decreased traffic). This might be caused by the fact that a small number of cars are less likely to traverse all the ed ges in the whole road network. Consequent-ly, traffic volume calculations can become noisy, and the performance of the LOF method can be slightly affected. For other experiments, the precision of the LOF me-thod is at least comparable (600 cars) or better than the baseline (900 and 1200 cars). 
For recall, the LOF-based method and the baseline show comparable results for both increased and decreased traffic (Figure 7 (b) and (d)). This is because the Edge-sets being significantly affected by the road closure are usually adjacent to the closed road (Figure 4 and 6). Therefore, these Edgesets appear significantly more dominat-reduction on the closed road is obvious (Growth dropping to 0). From the evaluation of both precision and recall, it can be seen that the LOF-based method is more robust than the baseline. 5.3 Computational Complexity The most computationally intensive part of our framework is the traffic volume calcu-lation for each n-Edgeset. Let s denote the total number of n-Edgesets, and d denote total number of trajectory points in our database. Note that the number of n-Edgesets is constrained by the connectivity between edges in the road network. This problem is equivalent to finding multiple matches of s strings in d , which is a well-studied prob-lem and an average case of O( s + d ) time can be achieved using a hash table. For other parts of our framework, mining both Emerging n-Edgeset and Frequent Emerging Network take O( s ) time since each n-Edgeset is visited only once. Therefore, the overall complexity is O( s + d ). traffic system of cities. We have mined the Emerging n-Edgesets by computing the Growth Rate and Local Outlier Factor (LOF) score. We have also proposed the algorithm MineFreqNetwork to identify Frequent Emerging Networks, which is the sub-network of LOF method outperforms a baseline algorithm. A possible future research direction is to integrate our approach with optimization techniques to improve decision making for applications in navigation and logistics. 
