 Recently, time has been a focus in the area of Web information extraction and Web search [1]. However, most of the studies only consider the update time of Web pages rather than fully exploit different temporal features in Web. Traditional commercial search engines, such as Google, Bing, and Baidu, only support the crawled dates of Web pages, i.e., users can only query Web pages towards their creation dates in data-base. To our knowledge, there are few search systems considering the temporal in-formation embedded in Web pages [2]. 
The current temporal text indexing is mainly towards the versioned document col-lections such as Web archives [3, 4]. There have been some indexing approaches on directly addressing the issue of temporal-textual indexing. Anick and Flynn [5] have pioneered this research to support versioning in a full-text index on bitmaps for terms in current versions, and delta change records to track incremental changes to the index backward over time. The disadvantage is the costly recreation of previous states. Recent work in [6] and its earlier proposals [14-17] concentrate on the problem of supporting text-containment queries and neglect the relevance scoring of results. Stack [7] reports practical experiences ma de when adapting the open source search engine Nutch to search Web archives. Weikum et al. address the temporal dimensions completely by extending the inverted files index to make it ready for temporal search and implement the time-travel text search in the FluxCapacitor prototype [8, 9]. In contrast, research in temporal databases has produced several index structures tailored for time-evolving databases. A comprehensive overview of the state-of-art is available in [10]. Unlike the inverted file index, their applicability to text search is not well understood. 
The index structure of most related work about temporal-textual indexing is usually based on inverted file index [11]. However, the main difference between our work and previous researches is that we consider to index both update time and con-tent time for Web pages, while previous temporal-textual indexes are focused on indexing update time, because they are designed for Web archive system or document versioning. In this paper, we propose a novel approach to fusing different temporal features in Web pages, i.e., update time and content time, to build an efficient index structure for temporal-textual Web search. Our basic idea is to develop an efficient hybrid index structure to cope with temporal-textual queries, which makes an integration of tradi-tional temporal index and textual index. The most famous textual index is the inverted file structure, so in this paper we use this structure as the basic textual index structure. For temporal index, we adopt the MAP21-Tree [12], which is an efficient temporal index structure in temporal database area. However, there are many choices when integrating inverted file with MAP21-Tree, and in some case we need to introduce B+-Tree as the index structure for update time. Hence, we aims at making a compari-index structure which has the best performance for temporal-textual queries. We aim at building hybrid index structures to integrate text keywords and temporal information of Web pages for temporal-textual Web search. We adopt the inverted file as the basic index structure for text keywords in Web pages, due to its widely use in document search. The temporal information co ntains update time and primary time, in which the update time is regarded as a time instant and the primary time is modeled as a time period. Primary time refers to the most appropriate content time associated with a Web page. The time granularity is set to day. As the update time is a time in-stant, we can use B+-tree to organize them or directly put them into inverted files. For the primary time, we adopt the MAP21-tree as the basic index structure. MAP21-tree is designed towards time period and has better performance than other temporal in-dexes such as R-tree [13]. 
Basically, there are five hybrid methods when considering B+-tree, inverted file, and MAP21-tree to index temporal information and text keywords together, which are: However, the (a) and (e) methods are not suitable in temporal-textual Web search. The method (a) has to build multiple index files, which will cost more storage spaces and result in poor search performance. The method (e) performs poorly when no time methods. In additional, the method (b), namely expanded inverted file, can be consid-most existing work about temporal text indexing are focused on indexing update time and keywords together and typically use a expanded inverted file [8, 9]. Figure 1 to 2 UT refers to update time, while PT refers to primary time. In this section, we will implemented the three hybrid index structures and make com-parison experiment to show the different performance of those index structures under different workloads. For simplicity, we use the following notation to represent the three hybrid index structures discussed in the previous section: get a comprehensive result, we use five types of queries in the experiment, which are: Among those queries, Query 1 to 3 are partial queries, and Query 4 and 5 are com-plete temporal-textual queries. 
In our experiments, we focus on the index size, query time, and rebuilt time of each index structure under given workloads and temporal-textual queries. Both q uery time and rebuilt time include disk I/O time and memory operation time. 3.1 Settings and Dataset We choose the real dataset from the corpus provided by the SouGou lab (http:// www.sogou.com/labs/) which records games, sports, IT, domestic and international news in May 2008 from some news sites. 
In this experiment, we simply describe how to exact the update time and the pri-mary time in one real Web page. In news Web pages, publish time is usually regarded as update time, and primary time is often appears in the first paragraph. The exaction of primary time is not the focus of this paper, so here we conduct a simple algorithm to extract primary time from Web pages. A ccording to the simple algorithm, we al-ways select primary time from the first paragraph of a Web page. If there is only time word in the first paragraph, we consider it as primary time. Otherwise, if there are two time of the Web page as the primary time. 
Keywords in Web page are exacted by a tool called ICTCLAS (http://ictclas.org/), which is the most efficient tool for the Chinese words segmentation. Each word is mapped a value in memory by ELFHASH function. 
We use 250 thousand news Web pages as our real dataset and extract approxi-mately 210 thousand different keywords. We run our experiment in a computer with an Intel Core 2.00 GHz CPU, 2 GB RAM, using Microsoft Window 7. 3.2 Comparison of Three Hybrid Index Structures experiment, S1 has the smallest size, while S3 costs largest storage. The detailed size of S 1 , S 2 , and S 3 are 1346.29 Mbytes, 1425.14 Mbytes, and 1528.07 Mbytes, as shown in Table 1. Generally, we have the following result: ) ( ) ( ) ( and our experimental result has also indicated this truth. 
Secondly, we measure the rebuilt time to compare the creation time of the three structures, as the creation time of index is crucial in Web search. In this experiment, we and compute the insertion time for each index structure. The rebuilt time of S 1 , S 2 , and S needs 29235.10, 31310.14, and 14170.90 seconds respectively, as shown in Table 1. Since S 1 and S 2 have to construct MAP21-trees to maintain primary time, while S 3 only needs to create a single B+-tree, both S 1 and S 1 consume much more time than S 3 . sult of query time experiment. The query time includes three parts, i.e., looking-up on queries are used in this experiment, which are denoted as Query 1 to Query 5, as de-scribed in the beginning of this section. We execute 300 queries and get the average run time as the experimental result of query time. Each query contains three key-words, each of which is a common keyword in the dataset, as indicated in the search log provided by the SouGou lab (http://www.sogou.com/labs/). Each query also contains one update time and one primary time, which are randomly generated but falls into a certain range of time. 
According to our experiment, S 2 has the best query performance with respect to the complete temporal-textual queries, i.e., queries involving keywords, primary time, performing partial temporal-textual queries. Thus, in general S 2 has shown best performance in the measurement of query time. In this work we have designed and implemented three hybrid index structures for temporal-textual Web search and studied the performance of these index structures. We conduct an experiment on a real dataset, and use five temporal-textual query types to evaluate the index size, query time, and rebuilt time of each hybrid index structure. The experimental results show that the index structure  X  first inverted file then MAP21-tree  X  has the relative better query performance among the three index struc-tures, whereas it has a comparable index size and rebuilt time with the other two may be an acceptable choice for temporal-textual Web search engines. This work is supported by the National Science Foundation of China (no. 60776801 and 70803001), the Open Projects Program of National Laboratory of Pattern Recogni-tion (20090029), the Key Laboratory of Advanced Information Science and Network Technology of Beijing (xdxx1005), and the USTC Youth Innovation Foundation. 
