 Type-ahead search is a new information-access paradigm, in which systems can find answers to keyword queries  X  X n-the-fly X  as a user types in a query. It improves traditional autocomplete search by allowing query keywords to appear at different places in an answer. In this paper we study the problem of automatic URL completion and prediction using fuzzy type-ahead search . That is, we interactively find rel-evant URLs that contain words matching query keywords, even approximately, as the user types in a query. Support-ing fuzzy search is very important when the user has limited knowledge about URLs. We describe the design and im-plementation of our method, and report the experimental results on Firefox.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval X  query formulation, search process Algorithms, Experimentation, Performance Type-Ahead Search, Fuzzy Search, URL Completion
Search engines changed the way people surf the Inter-net. They help users easily find relevant Web pages after users type in keywords. In the case where a user has lim-ited knowledge about the underlying data, often the user feels  X  X eft in the dark X  when issuing queries, and has to use a try-and-see approach for finding information. Recently type-ahead search has been proposed to address this prob-lem [1, 4]. Type-ahead search helps users interactively find answers as they type in query keywords. Modern browsers, such as Firefox 3.0 1 and Sogou 2 , support type-ahead search on URLs. They use the location bar as a search box, and suggest URLs in a drop-down menu as users type in query keywords.

In this paper we study how to improve these browsers based on the following observations. Firefox only supports client-based type-ahead search. That is, it only uses local (personal) information for type-ahead search. Firefox cannot predict URLs that have not been visited by the user. More-over, a user cannot use his/her URL history from another computer. Sogou solves the problem by supporting server-based type-ahead search. In some cases if a user does not know the exact spelling of a URL due to limited knowledge, Sogou cannot predict such URL based on mistyped key-words. For instance, if a user mistypes a keyword  X  sougou  X  for X  www.sogou.com  X , Sogou cannot find the correct Web site.
To address these problems, we propose a fuzzy type-ahead technique to support automatic URL completion and pre-diction. As a user types in keywords, our method predicts relevant URLs that contain words similar to the query key-words. We devise novel techniques to support this feature, implemented the method on a large number of URLs to demonstrate its efficiency and practicality. Server Design : We use a client-server architecture. The server has several components. A component called X  Indexer  X  indexes the URL dataset as a trie structure. A FastCgi mod-ule on the server stores the data and indices. The module waits for queries from the client. For each query keyword, a module called X  Prefix Finder  X  X omputes the prefixes similar to the query keywords. A module called  X  top-k Answer Finder  X  computes the best URLs that contain keywords similar to the query keywords.

Indexer : It reads a data set with URLs and their titles, tokenizes the URLs, and creates a trie structure with in-verted lists on the leaf nodes. The URLs on each inverted list are sorted according to their weights (e.g., PageRank) in a descending order. Figure 1 shows a partial index structure for a URL dataset.

Incremental Prefix Finder [3]: It incrementally identifies prefixes in the dataset that are similar to the query key-words, measured by their edit distance. The output of this module is a set of prefixes with their edit distances to the query keyword. Suppose we are given an edit-distance thresh -old  X  = 1 for the keyword  X  sun  X . This module will find the exactly matched prefix  X  sun  X  (trie node 3), and the similar prefixes  X  su  X ,  X  son  X , and  X  sin  X  (trie nodes 2, 5, and 8).
Top-k Answer Finder : It finds the best URLs for the par-tial keywords. The URLs are ranked by their inherent im-portance and the relevance to the query. Suppose the query p . Let sim ( p i , p 0 i ) be an edit distance between p 0 The score of a URL u for p i can be computed as: where pr ( u ) is the PageRank of URL u , and  X  and  X  are smoothing parameters to adjust the relative importance be-u for Q is computed as:
Consider a query with n keywords. Traditional threshold-based algorithms [2] compute the top-k results on n materi-alized sorted lists. For our fuzzy search, such lists must be computed on-the-fly as there are multiple predicted words and corresponding inverted lists for each input keyword. Fo r instance, given a query X  sun ins  X , there are two sorted lists: one for  X  sun  X  and one for  X  ins  X . Each list consists of the URLs sorted by the score computed by Equation (1), in-cluding multiple similar prefixes. For example, the URLs in the sorted list for  X  sun  X  are the merged results of the in-verted lists of the trie nodes 3, 6, 9, and 10. To compute such sorted lists, we build a max-heap on top of the inverted lists of its predicted words. After popping the top element from the heap, we adjust the heap and get the next element with the maximal score. For each popped URL, we com-pute its score based on Equation (2). Thus, we can use the threshold-based algorithm to find the top-k answers [2]. Client Design : We implemented the feature as an add-on to Firefox. A user can install the add-on to enjoy the fea-ture of fuzzy type-ahead search on URLs. When a user types in a query on the location bar using our implemented add-on, Firefox issues an AJAX query to the server, and waits until the request has been answered. The matched URLs are returned with predicted words highlighted. Firefox 3.0 uses an XPCOM component called  X  X istory X  to support its URL suggestion. Firefox implements a client-based func-tion. To enable the server-based URL suggestion, we de-velop an autocomplete search component by implementing the required interface. Firefox highlights search results in the drop-down menu based on query keywords. Any parts of the URL that exactly match the keyword will be high-lighted. In our method, we need to highlight the similar prefixes of every input keyword. We override the Firefox highlighting algorithm, in case the user wants to use both the client-based URL suggestion and the server-based URL suggestion. We merge existing Firefox search results with ours. When the user query returns enough results from the client, we will not send the query to the server. If the user inputs a mistyped query or searches a URL that has never been visited before, the results from the server are appende d to the drop-down menu.
We evaluated our methods on Firefox using the SogouRank values. We selected 10 million distinct URLs with the high-est PageRank values. We generated five sets of queries, and each set contained 1,000 queries with the same number of keywords. For each keyword in a query, we applied a ran-dom number of edit operations (0 to 2) on the keyword. The backend server was implemented in C++. The experiments were run on a computer with an Intel 3GHz CPU and 8 GB RAM, running Ubuntu. (a) Top-10 search efficiency
We evaluated the average search time of a query for finding top-10 answers. Figure 2(a) shows the experimental results . Each keystroke for most queries can be processed within 70ms. We then evaluated the scalability of our techniques, and Figure 2(b) shows the results. We observe that the algo-rithm scaled linearly as the number of URLs increased. For 1 million URLs, each keystroke was answered within 15ms. For 10 million URLs, each keystroke was answered within 140ms. These numbers show the efficiency and practicality of our method on large URL data sets.
 The work was supported by the National Natural Science Foundation of China under Grant No. 60873065, the Na-tional High Technology Development 863 Program of China under Grant No. 2007AA01Z152, the National Grand Fun-damental Research 973 Program of China under Grant No. 2006CB303103, 2008 HP Labs Innovation Research Pro-gram, and the US NSF award No. IIS-0742960.
