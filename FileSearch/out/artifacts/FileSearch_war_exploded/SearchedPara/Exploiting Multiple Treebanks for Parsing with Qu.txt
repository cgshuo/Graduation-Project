 The scale of available labeled data significantly af-fects the performance of statistical data-driven mod-els. As a structural classification problem that is more challenging than binary classification and se-quence labeling problems, syntactic parsing is more prone to suffer from the data sparseness problem. However, the heavy cost of treebanking typically limits one single treebank in both scale and genre. At present, learning from one single treebank seems Therefore, studies have recently resorted to other re-sources for the enhancement of parsing models, such as large-scale unlabeled data (Koo et al., 2008; Chen et al., 2009; Bansal and Klein, 2011; Zhou et al., 2011), and bilingual texts or cross-lingual treebanks (Burkett and Klein, 2008; Huang et al., 2009; Bur-kett et al., 2010; Chen et al., 2010).

The existence of multiple monolingual treebanks opens another door for this issue. For example, ta-ble 1 lists a few publicly available Chinese treebanks that are motivated by different linguistic theories or applications. In the current paper, we utilize the first three treebanks, i.e., the Chinese Penn Tree-bank 5.1 (CTB5) and 6.0 (CTB6) (Xue et al., 2005), and the Chinese Dependency Treebank (CDT) (Liu et al., 2006). The Sinica treebank (Chen et al., 2003) and the Tsinghua Chinese Treebank (TCT) (Qiang, 2004) can be similarly exploited with our proposed approach, which we leave as future work.

Despite the divergence of annotation philosophy, these treebanks contain rich human knowledge on the Chinese syntax, thereby having a great deal of common ground. Therefore, exploiting multiple treebanks is very attractive for boosting parsing ac-curacy. Figure 1 gives an example with different an-trates that the two treebanks annotate coordination constructions differently. In CTB5, the last noun is the head, whereas the first noun is the head in CDT.
One natural idea for multiple treebank exploita-tion is treebank conversion . First, the annotations in the source treebank are converted into the style of the target treebank. Then, both the converted treebank and the target treebank are combined. Fi-nally, the combined treebank are used to train a better parser. However, the inconsistencies among different treebanks are normally nontrivial, which makes rule-based conversion infeasible. For exam-ple, a number of inconsistencies between CTB5 and CDT are lexicon-sensitive, that is, they adopt dif-ferent annotations for some particular lexicons (or word senses). Niu et al. (2009) use sophisticated strategies to reduce the noises of the converted tree-bank after automatic treebank conversion.

The present paper proposes a simple and effective framework for this problem. The proposed frame-work avoids directly addressing the difficult anno-tation transformation problem, but focuses on mod-eling the annotation inconsistencies using transfor-mation patterns (TP). The TPs are used to compose quasi-synchronous grammar (QG) features, such that the knowledge of the source treebank can in-spire the target parser to build better trees. We con-duct extensive experiments using CDT as the source treebank to enhance two target treebanks (CTB5 and CTB6). Results show that our approach can signifi-cantly boost state-of-the-art parsing accuracy. More-over, an indirect comparison indicates that our ap-proach also outperforms the treebank conversion ap-proach of Niu et al. (2009). The present work is primarily inspired by Jiang et al. (2009) and Smith and Eisner (2009). Jiang et al. (2009) improve the performance of word segmen-tation and part-of-speech (POS) tagging on CTB5 using another large-scale corpus of different annota-tion standards (People X  X  Daily). Their framework is similar to ours. However, handling syntactic anno-tation inconsistencies is significantly more challeng-ing in our case of parsing. Smith and Eisner (2009) propose effective QG features for parser adaptation and projection. The first part of their work is closely connected with our work, but with a few impor-tant differences. First, they conduct simulated ex-periments on one treebank by manually creating a few trivial annotation inconsistencies based on two heuristic rules. They then focus on better adapting a parser to a new annotation style with few sentences of the target style. In contrast, we experiment with two real large-scale treebanks, and boost the state-of-the-art parsing accuracy using QG features. Sec-ond, we explore much richer QG features to fully exploit the knowledge of the source treebank. These features are tailored to the dependency parsing prob-lem. In summary, the present work makes substan-tial progress in modeling structural annotation in-consistencies with QG features for parsing.

Previous work on treebank conversion primar-ily focuses on converting one grammar formalism of a treebank into another and then conducting a study on the converted treebank (Collins et al., 1999; Xia et al., 2008). The work by Niu et al. (2009) is, to our knowledge, the only study to date that combines the converted treebank with the existing target treebank. They automatically convert the dependency-structure CDT into the phrase-structure style of CTB5 using a statistical constituency parser trained on CTB5. Their experiments show that the combined treebank can significantly improve the performance of constituency parsers. However, their method requires several sophisticated strate-gies, such as corpus weighting and score interpo-lation, to reduce the influence of conversion errors. Instead of using the noisy converted treebank as ad-ditional training data, our approach allows the QG-enhanced parsing models to softly learn the system-atic inconsistencies based on QG features, making our approach simpler and more robust.

Our approach is also intuitively related to stacked learning (SL), a machine learning framework that has recently been applied to dependency parsing to integrate two main-stream parsing models, i.e., graph-based and transition-based models (Nivre and McDonald, 2008; Martins et al., 2008). However, the SL framework trains two parsers on the same treebank and therefore does not need to consider the problem of annotation inconsistencies. Given an input sentence x = w tag sequence t = t parsing is to build a dependency tree as depicted in Figure 1, denoted by d = { ( h,m,l ) : 0  X  h  X  n, 0 &lt; m  X  n,l  X  L} , where ( h,m,l ) indicates an directed arc from the head word (also called father ) w w We omit the label l because we focus on unlabeled dependency parsing in the present paper. The artifi-cial node w sentence, is used to simplify the formalizations.
In the current research, we adopt the graph-based parsing models for their state-of-the-art performance view the problem as finding the highest scoring tree from a directed graph. To guarantee the efficiency of the decoding algorithms, the score of a dependency tree is factored into the scores of some small parts (subtrees).
 where p is a scoring part which contains one or more dependencies of d , and f ing features , as opposed to the QG features . Figure 2 lists the scoring parts used in our work, where g , h , m , and s , are word indices.

We implement three parsing models of varying strengths in capturing features to better understand the effect of the proposed QG features.  X  The first-order model (O1) only incorporates  X  The second-order model using only sibling  X  The second-order model (O2) uses all the For the O2 model, the score function is rewritten as: Score bs ( x , t , d ) = X where f features for the three kinds of scoring parts. We adopt the standard features following Li et al. (2011). For the O1 and O2sib models, the above formula is modified by deactivating the extra parts. Smith and Eisner (2006) propose the QG for ma-chine translation (MT) problems, allowing greater syntactic divergences between the two languages. Given a source sentence x  X  and its syntactic tree d erates translations of x  X  , which can be denoted by and its parse, and a is a cross-language alignment. Under a QG, any portion of d can be aligned to any portion of d  X  , and the construction of d can be in-spired by arbitrary substructures of d  X  . To date, QGs have been successfully applied to various tasks, such as word alignment (Smith and Eisner, 2006), ma-chine translation (Gimpel and Smith, 2011), ques-tion answering (Wang et al., 2007), and sentence simplification (Woodsend and Lapata, 2011).

In the present work, we utilize the idea of the QG for the exploitation of multiple monolingual tree-banks. The key idea is to let the parse tree of one style inspire the parsing process of another style. Different from a MT process, our problem consid-ers one single sentence ( x = x  X  ), and the alignment a is trivial. Figure 3 shows the framework of our approach. First, we train a statistical parser on the source treebank , which is called the source parser . The source parser is then used to parse the whole tar-get treebank . At this point, the target treebank con-tains two sets of annotations, one conforming to the source style, and the other conforming to the target style. During both the training and test phases, the target parser are inspired by the source annotations, and the score of a target dependency tree becomes The first part corresponds to the baseline model, whereas the second part is affected by the source tree d where f QG features to encourage or penalize certain scor-ing parts in the target side according to the source that the upper structure is the target. The target parser can raise the score of the candidate depen-dence  X  X nd X   X   X  X ndustry X  , because the depen-dency also appears in the source structure, and ev-idence in the training data shows that both annota-tion styles handle conjunctions in the same manner. Similarly, the parser may add weight to  X  X rade X   X   X  X ndustry X  , considering that the reverse arc is in the source structure. Therefore, the QG-enhanced model must learn the systematic consistencies and inconsistencies from the training data.

To model such consistency or inconsistency sys-tematicness, we propose the use of TPs for encoding the structural correspondence between the source and target styles. Figure 4 presents the three kinds of TPs used in our model, which correspond to the three scoring parts of our parsing models.

Dependency TPs shown in the first row consider how one dependency in the target side is trans-formed in the source annotations. We only consider the five cases shown in the figure. The percentages in the lower boxes refer to the proportion of the corresponding pattern, which are counted from the training data of the target treebank with source anno-tations T + S . We can see that the noisy source struc-tures and the gold-standard target structures have 55.4% common dependencies. If the source struc-ture does not belong to any of the listed five cases,  X  consider more complex structures, such as h being the grand grand father of m , but statistics show that more complex transformations become very scarce in the training data.

For the reason that dependency TPs can only model how one dependency in the target structure is transformed, we consider more complex transforma-tions for the other two kinds of scoring parts of the target parser, i.e., the sibling and grand TPs shown in the bottom two rows. We only use high-frequency TPs of a proportion larger than 1.0%, aggregate oth-ers as  X  X lse X  , which leaves us with 21 sibling TPs and 22 grand TPs.

Based on these TPs, we propose the QG fea-tures for enhancing the baseline parsing models, which are shown in Table 2. The type of the TP is conjoined with the related words and POS tags, such that the QG-enhanced parsing models can make more elaborate decisions based on the context. Then, the score contributed by the QG features can be redefined as Score qg ( x , t , d  X  , d ) = + X + X which resembles the baseline model and can be nat-urally handled by the decoding algorithms. We use the CDT as the source treebank (Liu et al., 2006). CDT consists of 60,000 sentences from the People X  X  Daily in 1990s. For the target tree-bank, we use two widely used versions of Penn Chi-nese Treebank, i.e., CTB5 and CTB6, which con-sist of Xinhua newswire, Hong Kong news and ar-ticles from Sinarama news magazine (Xue et al., 2005). To facilitate comparison with previous re-sults, we follow Zhang and Clark (2008b) for data split and constituency-to-dependency conversion of CTB5. CTB6 is used as the Chinese data set in the CoNLL 2009 shared task (Haji X c et al., 2009). There-fore, we adopt the same setting.

CDT and CTB5/6 adopt different POS tag sets, and converting from one tag set to another is difficult corpus annotated with word segmentation and POS tags, to train a statistical POS tagger. The tagger produces a universal layer of POS tags for both the source and target treebanks. Based on the common tags, the source parser projects the source annota-tions into the target treebanks. PD comprises ap-proximately 300 thousand sentences of with approx-imately 7 million words from the first half of 1998 of People X  X  Daily.

Table 3 summarizes the data sets used in the present work. CTB5X is the same with CTB5 but follows the data split of Niu et al. (2009). We use CTB5X to compare our approach with their treebank conversion method (see Table 9).
We adopt unlabeled attachment score (UAS) as the primary evaluation metric. We also use Root ac-curacy (RA) and complete match rate (CM) to give more insights. All metrics exclude punctuation. We adopt Dan Bikel X  X  randomized parsing evaluation
For all models used in current work (POS tagging and parsing), we adopt averaged perceptron to train the feature weights (Collins, 2002). We train each model for 10 iterations and select the parameters that perform best on the development set. 5.1 Preliminaries This subsection describes how we project the source annotations into the target treebanks. First, we train a statistical POS tagger on the training set of PD, which we name Tagger P D . 8 The tagging accuracy on the test set of PD is 98.30%.

We then use Tagger P D to produce POS tags for all the treebanks (CDT, CTB5, and CTB6).

Based on the common POS tags, we train a second-order source parser (O2) on CDT, denoted by Parser CDT . The UAS on CDT-test is 84.45%. We then use Parser CDT to parse CTB5 and CTB6. At this point, both CTB5 and CTB6 contain depen-dency structures conforming to the style of CDT. 5.2 CTB5 as the Target Treebank Table 4 shows the results when the gold-standard POS tags of CTB5 are adopted by the parsing mod-els. We aim to analyze the efficacy of QG features under the ideal scenario wherein the parsing mod-els suffer from no error propagation of POS tag-ging. We determine that our baseline O2 model achieves comparable accuracy with the state-of-the-art parsers. We also find that QG features can boost the parsing accuracy by a large margin when the baseline parser is weak (O1). The improve-ment shrinks for stronger baselines (O2sib and O2). This phenomenon is understandable. When gold-standard POS tags are available, the baseline fea-tures are very reliable and the QG features becomes less helpful for more complex models. The p-values in parentheses present the statistical significance of the improvements.

We then turn to the more realistic scenario wherein the gold-standard POS tags of the target treebank are unavailable. We train a POS tagger on the training set of CTB5 to produce the automatic POS tags for the development and test sets of CTB5. The tagging accuracy is 93.88% on the test set. The automatic POS tags of the training set are produced
Table 5 shows the results. We find that QG fea-tures result in a surprisingly large improvement over the O1 baseline and can also boost the state-of-the-art parsing accuracy by a large margin. Li et al. (2011) show that a joint POS tagging and de-pendency parsing model can significantly improve parsing accuracy over a pipeline model. Our QG-enhanced parser outperforms their best joint model by 0.25%. Moreover, the QG features can be used to enhance a joint model and achieve higher accuracy, which we leave as future work. 5.3 Analysis Using Parser-O2 with AUTO-POS We then try to gain more insights into the effect of the QG features through detailed analysis. We se-lect the state-of-the-art O2 parser and focus on the realistic scenario with automatic POS tags.

Table 6 compares the efficacy of different feature sets. The first major row analyzes the efficacy of the basic features f When using the few QG features in Table 2, the ac-curacy is very close to that when using the basic features. Moreover, using both features generates a large improvement. The second major row com-pares the efficacy of the three kinds of QG features corresponding to the three types of scoring parts. We can see that the three feature sets are similarly effec-tive and yield comparable accuracies. Combining these features generate an additional improvement of approximately 0.2%. These results again demon-strate that all the proposed QG features are effective.
Figure 5 describes how the performance varies when the scale of CTB5 and CDT changes. In the left subfigure, the parsers are trained on part of the CTB5-train, and  X 16 X  indicates the use of all the training instances. Meanwhile, the source parser Parser CDT is trained on the whole CDT-train. We can see that QG features render larger improvement when the target treebank is of smaller scale, which is quite reasonable. More importantly, the curves indicate that a QG-enhanced parser trained on a target treebank of 16,000 sentences may achieve comparable accuracy with a base-line parser trained on a treebank that is double the size (32,000) , which is very encouraging.
In the right subfigure, the target treebank is trained on the whole CTB5-train, whereas the source parser is trained on part of the CDT-train, and  X 55.5 X  indicates the use of all. The curve clearly demon-strates that the QG features are more helpful when the source treebank gets larger, which can be ex-plained as follows. A larger source treebank can teach a source parser of higher accuracy; then, the better source parser can parse the target treebank more reliably; and finally, the target parser can better learn the annotation divergences based on QG fea-tures. These results demonstrate the effectiveness and stability of our approach.

Table 7 presents the detailed effect of the QG fea-tures on different dependency patterns. A pattern  X  X V  X  NN X  refers to a right-directed dependency with the head tagged as  X  X V X  and the modifier tagged as  X  X N X . whereas  X   X   X  means left-directed. The  X  X /o QG X  column shows the number of the cor-responding dependency pattern that appears in the gold-standard trees but misses in the results of the baseline parser, whereas the signed figures in the  X +QG X  column are the changes made by the QG-enhanced parser. We only list the patterns with an absolute change larger than 30. We find that the QG features can significantly help a variety of depen-dency patterns (i.e., reducing the missing number). 5.4 CTB6 as the Target Treebank We use CTB6 as the target treebank to further verify the efficacy of our approach. Compared with CTB5, CTB6 is of larger scale and is converted into de-pendency structures according to finer-grained head-finding rules (Haji X c et al., 2009). We directly adopt the same transformation patterns and features tuned on CTB5. Table 8 shows results. The improvements are similar to those on CTB5, demonstrating that our approach is effective and robust. We list the top three systems of the CoNLL 2009 shared task in Table 8, showing that our approach also advances the state-5.5 Comparison with Treebank Conversion As discussed in Section 2, Niu et al. (2009) automat-ically convert the dependency-structure CDT to the phrase-structure annotation style of CTB5X and use the converted treebank as additional labeled data. We convert their phrase-structure results on CTB5X-test into dependency structures using the same head-finding rules. To compare with their results, we run our baseline and QG-enhanced O2 parsers on comparison indicates that our approach can achieve larger improvement than their treebank conversion based method. The current paper proposes a simple and effective framework for exploiting multiple large-scale tree-banks of different annotation styles. We design rich TPs to model the annotation inconsistencies and consequently propose QG features based on these TPs. Extensive experiments show that our approach can effectively utilize the syntactic knowledge from another treebank and significantly improve the state-of-the-art parsing accuracy. This work was supported by National Natural Science Foundation of China (NSFC) via grant 61133012, the National  X 863 X  Major Projects via grant 2011AA01A207, and the National  X 863 X  Leading Technology Research Project via grant 2012AA011102.

