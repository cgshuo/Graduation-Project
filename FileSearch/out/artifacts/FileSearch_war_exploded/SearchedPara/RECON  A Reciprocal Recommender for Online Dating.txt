 The reciprocal recommender is a class of recommender sys-tem that is important for several tasks where people are both the subjects and objects of the recommendation. Some ex-amples are: job recommendation, mentor-mentee matching, and online dating. Despite the importance of this type of recommender, our work is the first to distinguish it and de-fine its properties. We have implemented RECON, a recipro-cal recommender for online dating, and have evaluated it on a large dataset from a major Australian dating website. We investigated the predictive power gained by taking account of reciprocity, finding that it is substantial, for example it improved the success rate of the top ten recommendations from 23% to 42% and also improved the recall at the same time. We also found reciprocity to help with the cold start problem obtaining a success rate of 26% for the top ten rec-ommendations for new users. We discuss the implications of these results for broader uses of our approach for other reciprocal recommenders.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval X  Information filtering Algorithms, Experimentation Recommender systems, Online Dating, Reciprocity
Recommender systems have been largely based on the goal of providing a user with a set of recommended items that the system predicts that the user will like. In this paper, we focus on a rather neglected, but important, class of rec-ommenders which we call reciprocal recommenders because they recommend people to people and successful recommen-dations only occur when both people like each other, or re-ciprocate. For instance, in an employment recommender system, potential employees seek suitable positions while employers, who offer the positions, are looking for suitable potential employees. There are many other important do-mains that involve reciprocal recommendations, including mentoring systems, business partner identification and, the focus of our work, dating sites that aim to help a person meet a suitable partner.

Table 1 defines the characteristics of reciprocal recom-menders by comparing them against more traditional rec-ommender systems. We now explain these briefly, with ex-amples from the domain of online dating. The first row shows the defining feature of a reciprocal recommender. For example, if an online dating recommender offers a user, An-drew, a recommendation for Beryl, the success of this rec-ommendation relies on both Andrew, and Beryl, liking each other. So the reciprocal recommender must take account of the preferences of both Andrew (the subject of the recom-mendation) and Beryl (who is recommended). The second row of the table notes that both users are aware of this need for reciprocity for success. This is important as it drives other important aspects listed later in the table.
The next pair of characteristics relate to the different roles of explicit profiles, provided by the user directly giving infor-mation about themselves and their preferences, and implicit profiles that a system creates based on the user X  X  behaviour. Since the very early recommender systems, the latter has been recognised as valuable [14] because it can build a use-ful profile without any extra work by the user. The nature of reciprocal recommenders means that explicit profiles have a particularly prominent place. In this paper, we focus on the match between intrinsic user preferences with explicit self profiles. A study about the use of explicit and implicit user preferences is found in [20].

Continuing our example, in online dating, like in the tradi-tional matchmaker or marriage agency, a new user, Andrew, is expected to provide detailed information before he can receive recommendations. Reflecting the reciprocal nature of the recommendations, he will provide information about himself and his ideal partner by answering closed questions about attributes such as gender, age, and location. Some of these questions are inherently reciprocal, e.g. the type of the relationship sought: short-term or long-term. Andrew will also provide more complex forms of information such as his photo and free text description of himself and his ideal partner. Table 1: Characterising reciprocal recommenders
The role of implicit profiles is also distinctive. After An-drew creates his profile, he would be provided with an initial set of recommendations, each in the form of a short profile. His actions on the site would then provide data for his im-plicit profile. For example, on seeing Beryl X  X  short profile, he may click to see her full profile. This suggests he likes her. He may then send her a pre-defined message indicat-ing he likes her, or he may just go back to exploring other recommendations. The latter action provides evidence that some information on the full profile discouraged him.
In an online dating system, it is likely that if Andrew finds a partner and establishes a long term relationship with her, he may never return to the site. This is unlike an online movie recommender where a user may continue to use the site if it works well. This difference is due to the people-to-people nature of reciprocal recommenders -when people are successful in finding a date, a job or a mentor, they may never return to the site. This is not an absolute characteris-tic; some people may need to find many jobs and others may seek many partners. However, the reciprocal recommender should take into consideration that implicit profiles might end abruptly. These may indicate success as in the example of Andrew but also failure, e.g. Chris leaving the system dissatisfied because he did not receive satisfactory recom-mendations. The system may not have the data needed to distinguish between the cases of Andrew and Chris. Of course, the rich explicit profiles, can be used in conjunction with the available implicit profiles. But the design of a re-ciprocal recommender must take into account the cold start problem for implicit profiles.
 We now consider the last set of defining characteristics. The first relates to the need to avoid overloading people. There is no problem if a book recommender system recom-mends the same book to a user and he/she buys it. However, in a people-to-people recommender system such as online dating, recommending the same person, say Beryl, to a large number of users should be avoided. First, Beryl can select only a small number of people to date (perhaps just one). Second, if she is extremely popular and is recommended to many people, she may become overwhelmed by the atten-tion and stop responding. As a result other users trying to initiate contact with her may become discouraged as she is not replying or replies negatively.

The final row of Table 1 introduces another important as-pect of reciprocal recommenders in terms of different roles that people may take. For example, Andrew may play an proactive role, initiating contact with people recommended by the system. By contrast, Beryl may play a reactive role, communicating mostly with those who initiated contact with her. Therefore, it is important that Beryl is present in peo-ple X  X  recommendations, as she does not play an active role in the website. Similarly, on many job sites, the potential employee takes an proactive role while the employer plays a reactive role. Notably, it may be difficult for a system to quickly distinguish who are the reactive users so this princi-ple could be applied to all users who are not yet known to be proactive. This highlights the importance of solving the cold start problem for reciprocal recommenders.

We came to realise the distinctive nature of reciprocal rec-ommenders in the context of our work with a major online dating website. Based on this realisation, we built RECON, a reciprocal recommender system that uses online dating his-torical data to make recommendations. To gain understand-ing of reciprocal recommenders and how to build them, we designed experiments to compare the performance of a rec-ommender that makes use of reciprocity with one that does not. Then, given the importance of the cold-start problem on several levels, as described above, we designed experi-ments to assess the power of our recommender compared against the existing system.

The next Section 2 reviews the literature in reciprocal rec-ommenders and social matching recommenders. Section 3 describes the three main parts of the RECON X  X  algorithm: finding the user X  X  preferences, calculating the compatibility scores, and producing the ranked list of reciprocal recom-mendations. We also provide details about our implementa-tion of RECON. Section 4 presents the evaluation setup and the evaluation results, including the effect of reciprocity and the power of RECON for new users. Finally, Section 5 dis-cusses the results and their implications for other reciprocal recommenders.
Given the range of domains that involve reciprocity, there have been several interesting works that have explored ways to build reciprocal systems. This section reviews some im-portant examples of reciprocal systems in domains such as dating, job finding, expert finding, friend and colleague match-ing, matching students with people willing and able to help them. In addition, we briefly discuss some of the estab-lished techniques and their potential to create effective rec-ommenders with the particular properties we have identi-fied in Table 1, notably, related to the importance of: ex-plicit profiles since they are particularly rich; implicit pro-files when available; the need to avoid overloading or ne-glecting individuals; and the nature of the cold-start problem particularly for addressing the short stay of many users as well as the presence of reactive users.

We now describe some important work that involves reci-procity in a recommender. Notably, the broad area of social matching, recommending people to other people [25] has a clear link with reciprocal recommenders because the quality of a match is determined by those involved in the match. However, some existing work on social matching tailor only to the needs of one party [22]. While few papers discuss the concept of reciprocity and even fewer attempt to act on it, there has been some important work that informs the creation of reciprocal recommenders.

Beehive [6] is a social networking site within IBM. It helps users communicate, share information and befriend each other. Chen et al. explored the use of four algorithms, two mainly content-based and two mainly based on collaborative filtering. They evaluated these in terms of accuracy and the ability to give novel recommendations, concluding that all four approaches increased the number of connections com-pared to a control group that received no recommendations. The content-based technique provided the highest percent-age of good recommendations among contacts who were not previously known; collaborative filtering worked well in find-ing previously known contacts.

The i-Help system [4] helped students find peers who were willing and able to help them with problems in computer sci-ence. The PHelpS system [10] applied a similar approach in a workplace so that an employee could find a person to help them with an unfamiliar task. Both systems relied on rich user models, or profiles, to take account of the expertise of potential helpers as well as the help requester, and their pref-erences for each other. This work involved a small number of users as it was restricted to those electing to be involved in the system, and the only helpers considered were those logged into, and available, at the time of a help request.
The bilateral recommendation approach for a job match-ing system [15] also addressed reciprocity. Apart from fil-tering candidates based on ability and aptitude, the  X  X ob preference X  part of the system made use of the ratings pro-vided by the candidate for other job listings. The paper discusses the bilateral matching problem , focusing on find-ing a globally optimal solution when the preferences of both sides of a match is considered, such as a Pareto-optimal so-lution. The computational efficiency of finding this solution is considered, and some heuristics are suggested for address-ing limitations. The applicability of this approach is rather limited for reciprocal recommenders on the scale of our on-line dating task. Notably, it is problematic to aim for global optimal solutions when the accuracy of the user preferences cannot be assured. This work takes an intuitive approach to deal with the preferences of both users in a recommenda-tion, with two separate recommenders, each considering the preference of one side, and combining the output of both rec-ommenders. More broadly, methods of combining different recommenders have been summarised in [5].

Online dating has received little attention in recommender systems research. Bro X zovsk  X y and Pet X r  X  X  X cek [3] report an eval-uation of their recommender for matchmaking, using vari-ations of user-user and item-item collaborative filtering al-gorithms and several different benchmarks using a dataset from an online dating service. They mention the need for reciprocation but do not explore it. Current research indi-cates that profile information currently recorded by online dating websites can provide interest insights into the likes and dislikes of people. Hitsch et al. [11] studied which per-sonal characteristics are more important for certain groups of users; for example that women discriminate on occupa-tion more than men do. Fiore and Donath [8] observed a positive correlation in the personal attributes of people who match well. While these studies point to some useful ap-proaches for building recommenders, it is clear that they are not good enough to be standalone solutions. Rather, they point to the potential value of a content-based technique for online dating recommenders.

The importance of explicit profiles means that we need to take account of the considerable literature associated with these. Notably, user input may be unreliable [1, 2]. As part of the foundation for our work, we have analysed the con-sistency of user X  X  explicit profile and an implicit one based on their use of the system [21]. Unsurprisingly, there was a difference and it varied across elements of the profile.
In broader recommender work, reports on many systems indicate that users are generally reluctant to provide explicit profile information and feedback, favouring implicit feedback based on their activity [12, 16]. Moreover, such implicit profiles have shown good results [13, 7]. It is clear that we should exploit implicit profile information when it becomes available.

The cold-start problem is particularly important for recip-rocal recommenders, both to ensure that new users can be given useful recommendations early in their use of the site, and to deal effectively with reactive users, who rely on being recommended to others, so they can respond. The cold-start problem is well recognised for recommenders in general, and earlier work has been summarised in [24]. Recent ideas on the problem include integrating the rating of items into the sign-up process to increase engagement [9], and using hy-brid approaches such as performing linear regression on all user-item attribute pairs [17]. Although hybrid approaches are currently receiving much attention, we are still far from having one approach which solves the entire problem.
The ability to recommend novel items is perceived as an important feature by users. This problem of spreading rec-ommendations is a known problem for content based filter-ing approaches. Clustering on seldom selected items [18] has been suggested to find groups of similar items. Demographic information can be used as another measure of similarity be-tween people [19]. Dimensionality reduction [23] may reduce the number of classes of items. All these approaches relate similar items or users by finding new associations between them.

In summary, we can draw upon considerable existing un-derstanding of the various defining aspects of reciprocal rec-ommenders. We have also taken account of the range of above systems that have a reciprocal nature. At one level, the concept of reciprocity in recommender systems is not new. At the same time, we have not found other work that recognised and explicitly explored the distinctive character of reciprocal recommenders and how these impact the effec-tiveness of the recommendations. This paper builds upon our definition of reciprocal recommenders to provide a sys-tematic base for designing them. We further use the defini-tion to drive the principled evaluation of approaches, in the context of a large dataset from a commercial online dating website.
Dating websites allow users to search for potential part-ners and to communicate with them. Normally, as part of the website business model, users are charged for uncon-strained messages (which may include the exchange of con-tact details), while they are allowed to send short and pre-defined messages for free. These short messages such as  X  X  like you, do you want to talk? X  are used to show interest in another user. 1 The receiver of a message can reply either positively with another message such as  X  X oved the message, can you send me an email X  or negatively with a message such as  X  X hanks, but I don X  X  think we are right for each other X .
Thus, the messages sent by a user and the responses to these messages contain important information about the user preferences. We use this information to build a prefer-ence model for user x by recording the attributes of all users with whom x initiated contact and all users whose messages were positively replied to by x . We then compute the distri-bution of these attributes which gives a good indication of the type of user liked by x . For example, Figure 1 shows the distribution of all messages sent by a female user for four different attributes. It shows that this user does not have a strong preference for a particular body type as she messages the same number of users with athletic and average body and also a high number of users with slim body. However, this user has a strong preference for singles with a social personality who hold a university degree or postgraduate de-gree.
 The profile of a user is made of two components: free text information and a pre-defined list of attributes, A . RECON works with the pre-defined list of attributes, which consists of nominal and numeric attributes; numeric attributes are discretised; for example, age is discretised into groups, such as 18-20 years and 20-22 years.
 The profile U x of a user x is represented as where v a is a value of an attribute a .

Given a user x we first find the list of users M x to whom user x has sent a message:
The distribution of discrete values of an attribute a in a list of users M x is represented by a list of values and counts. This distribution of values represents the preference p x,a a user x for the values of an attribute a : p x,a = { ( v, n ) : f or all unique discrete values v of a } such that n is the number of times v occurred in M x
We will simply refer to this type of communication as mes-sages despite other types of messages such as emails also being possible in dating websites.

The preference P x of a user x can be represented by a list of distributions p x,a for all attributes A :
The preferences of a user are represented as a group of histograms showing the number of times each value has oc-curred for each profile attribute. Figure 2 shows the profile information and preferences of a group of example users: Alice, Amy, Bob and Ben.
 After obtaining the preferences P x , we can generate a sim-ple recommender system that finds all people who contain the attributes sought by the user. The preferences vary for different people and attributes, which will result in different number of recommendations. A user who has messaged a wide variety of people in a highly populated area is likely to receive a large number of recommendations; conversely, a user who has messaged only a few users, all containing sim-ilar characteristics in a sparsely populated area will receive very few, if any, recommendations.

For the first class of users who have messaged a wide range of users, because the number of recommendations may be larger than what the user is capable of judging or is willing to verify, it is necessary to sort the list of recommendations. Different strategies can be used for ranking the recommen-dations, which might involve several aspects of the website including the users X  previous behaviour (e.g. ranking users based on their engagement on the website) or other decisions motivated by a business model such as presenting premium customers before others, or favouring potential customers such as those who are engaged to the website but are ne-glected by other users. Nevertheless, one way of ranking the recommendation list includes calculating how well each recommendation matches the user X  X  preferences.

The RECON algorithm measures how much a user y matches the preferences of another user x using the preferences p and all the attributes of user y . Algorithm 1 is used to calculate this compatibility score.

Taking the example users of Figure 2, the compatibility score between the Alice X  X  preferences and Bob is calculated as:
The compatibility scores between all pairs of users is shown in Table 2. Notice that because Ben never messaged male users, the compatibility score between Ben X  X  profile and Bob is 0. The same situation is observed between Amy X  X  profile and Alice. Algorithm 1 : Compatibility ( P x , y ) After the user preferences are computed, we compute the list of recommended users for user x as shown in Algorithm 2. Every user y who x has not communicated with will receive a score that reflects how much the preferences of x match the attributes of y and how much the preferences of y match the attributes of x . We call this score a reciprocal score . The reciprocal score between x and y is the harmonic mean of the compatibility scores of these users. Then, the recipro-cal scores are ranked and the top-N recommendations are presented to x . Table 3 shows the recommendations for Ben for our example, assuming that Ben has not communicated with the other users. Therefore, if we need to provide only one recommendation to Ben, we would recommend Amy as the reciprocal score with her is the highest.

Note that the reciprocal score is symmetric as the name suggests, i.e. y  X  X  score in the recommendation list for x is the Algorithm 2 : ReciprocalRecommender( x , N ) same as x  X  X  score in y  X  X  list. However, as the lists contain only the top-N recommendations, y may be in the top-N recommendations for x but the opposite may not be true. The RECON implementation slightly differs from the one described in the Algorithms 1 and 2. Despite the linear performance of the recommendation algorithm, making an assumption about the users that someone might like to com-municate with is necessary to improve the runtime perfor-mance. This is particularly important if we want to find recommendations for all users in the database (i.e. a O ( N process). Because of this, we initialise the recommendation list with a reduced set of users. This set is made of users of the dominant gender, who are within one standard deviation of mean age, and who live as far as one standard deviation from the mean location. This drastically reduces the num-ber of users to be evaluated, and although we will possibly miss some good recommendations, because gender, age and location are the most important in online dating communi-cation, the speed benefits are likely to be more important than the loss in recall.

One important aspect of any recommender system is the way it deals with the cold-start problem. In our recom-mender, cold-start means that we have a new user, who has not messaged or replied to anyone. In these cases the set of preferences P x does not exist and the compatibility function will return a very small value (0 . 001); therefore, the recommender will create a list of users y ranked by the compatibility between P y and the new user x . This means that, because we cannot tell whom the new user x will like to communicate with, we recommend users who will like to communicate with the new user.

As previously mentioned, because of runtime performance issues, we reduced the number of possible users for new users in a similar way as for users whose preferences are known. However, because we do not have the new user X  X  preferences we assume that the new user will hold similar preferences to his group of peers. We define two users as peers if they are of the same gender, similar age (i.e. maximum of 5 years difference) and live in similar location (i.e. 5 km apart).
If further reductions are needed on the number of users who will be considered for compatibility score calculations, then we can find the set of attributes that are particularly important for each user, and then filter the list using these important attributes. One way of finding important at-tributes is by comparing the distribution of messages sent by a user x (preferences P x ) with the distribution of messages sent by all users in x  X  X  peer group. For instance, if the peers of user Bob mostly send messages to slim women and Bob mostly sends messages to overweight woman, then we can assume that body type is an important attribute in Bob X  X  preferences.
We designed the evaluation of RECON with two main goals. Given the lack of exploration of the notion of reci-procity in reciprocal recommenders, one core goal was to gain understanding of the role of reciprocity in the effective-ness of the algorithm described above. It was also clear that the cold-start problem is so important for this domain that it deserved special attention and analysis. Our evaluation takes into account the fact that users have limited patience when presented with recommendations. So, it is important to know how well RECON performs when it is restricted in the number of recommendations it can offer (or that the user is willing to consider). Accordingly, we report success rates in our evaluation experiments for a range of limits in the number of recommendations.

The data for the evaluation of our algorithm consists of the users X  contact history over a six week period. Of those six weeks, the first four are used as training data and the remaining two are used for testing. In addition the users X  profile information is used to train the content based recom-mender and to find matching users. The training set consists of 1.4 million messages sent by over 90,000 users. Note that both the user we are recommending to and any user we are recommending must be in this set of users active during the training period. We report the results for a particular six week period but we repeated the experiment over other pe-riods, with near identical results.

We evaluate our system by measuring the success rate of the known interactions made during the test period, in the list of top-N recommendations. Success rate of a list of recommendation R given to a user X is defined as the proportion of the known interactions (users messaged by x ) that were positive (users who replied to x positively: Success ( x, R ) =
We also use recall , which in our experiments is defined as the proportion of known positive interactions that were present in the list of recommendations over all positive in-teractions made by a particular user.
 Recall ( x, R ) =
Success and recall are analogous to the common defini-tion of precision and recall, with the difference that we are only evaluating those recommendations for known interac-tions between two users. For instance, if we provide a list of five recommendations (top-5) for a user x , and two of these recommendations were users to whom x sent a message, then we evaluate success and recall using those two interactions only. If user x had ten positive replies to his messages in the test period, and only one of those two known interactions was positive, this gives a success of 50% and a recall of 10%.
We understand that evaluating a recommender system based on previous user interactions does not give us the ideal measure of success. A better measure can only be achieved in an evaluation comparing success where users re-ceive recommendations from our recommender against that for a baseline system. However, the evaluation with previous data allows comparison of different techniques using a large sample of users to explore and compare those methods that produce better recommendations. This is particularly true when we want to understand what improvements are gained when different numbers of recommendations are provided.
The results in Figure 3 compare the success rate and re-call for a reciprocal recommender (RECON) and for a non-reciprocal recommender 2 . This evaluation is also compared to a baseline success measure (17.3%) which reflects the pro-portion of messages sent by users that get positive replies in the testing set. The baseline measure reflects how well users do, unaided by a recommender, in their search for people who might like them.

Our results indicate that even when we only consider the automatically built intrinsic preferences of the users, we can outperform the users themselves in their search for a suc-cessful interaction. We also observe that, for all numbers of top-N recommendations, there is a large improvement in both success rate and recall. For the list of top-10 rec-ommendations, the reciprocal recommender has a success rate of 42.20% while the non-reciprocal recommender has 23.00% success: an improvement of 83.48% due to the reci-procity. Similarly for the top-100 recommendations the ad-dition of reciprocity improved recall by 83.05% (from 5.90% to 10.80%). This supports our hypothesis that reciprocity is important for recommender systems that involve people in both sides of the recommendations (i.e. reciprocal recom-menders).
RECON without the reciprocal score; where all recommen-dations y to user x are based on how much x likes y and not on how much x is liked by y . Figure 3: Success rate and Recall comparison be-tween reciprocal recommender, non reciprocal rec-ommender and the current search made by users (baseline)
Because we compute a profile model for each individual user, our approach allows us to provide personalised recom-mendations for each individual user. Nevertheless when we have no information about the user preferences (cold start problem), we can still personalise the user recommendation by assuming the user will equally like all users and finding those who will like him/her back.

We have evaluated the success rate of the communica-tion of new users and we observed that 16.10% of messages sent by them receive positive replies. Therefore, new users have a slightly lower success rate than the other users. We have compared this baseline success rate with the success rate of RECON for the same group of new users, and we have observed that RECON can predict with higher accu-racy whether a communication will be successful. In Fig-ure 4, we observe that for the top-10 and top-20, one in four known messages are successful. This performance is achieved by pre-filtering the list of possible recommenda-tions using the preferences of the new user X  X  peer group. This is an assumption that has to be made, otherwise too many users would have to be ranked and the runtime per-formance of the system would be harmed considerably.
The time required to run RECON depends on the differ-ent phases of the algorithm. RECON calculates the prefer-ences for more than 90,000 users (using 1,4 million messages) in about 10 minutes using a computer with two processing cores and 2GB of RAM. Using these preferences, it creates a list of recommendations for all users in about 2 hours. The initial size of the recommendation list varies depending on the peer group of each user: the average size of the recom-mendations list is 550, with the median 180.
This paper presented the definition and the properties of reciprocal recommender, an important class of recommender system that has received little attention, in spite of many important recommender tasks that require reciprocity. We have developed RECON: a content-based reciprocal recom-mender for a major online dating website. RECON is able to efficiently provide good recommendations for a large number of users using a real dataset of user interactions. We have Figure 4: Success comparison between reciprocal recommender and the current search made by new users (baseline) evaluated RECON, demonstrating the effect of taking ac-count of reciprocity for a recommender system in a domain such as online dating. Our evaluations have also demon-strated that RECON deals with the important cold-start problem, providing a substantial improvement of more than 60% in success rates for new users, and this effect is particu-larly strong under a restricted number of recommendations.
We have shown that RECON can effectively select rec-ommendations that have higher success rate than the user themself in the existing system: RECON improves success in 2.6 times given five recommendations. This encourag-ing result is an excellent foundation for our exploration of approaches to reciprocal recommendation approaches. Our use of historic data has been invaluable for experimentation with approaches. The next important stage is to assess the live performance.

One of the defining features of reciprocal recommenders is the need to ensure that there is a suitable distribution of rec-ommendations across users. For the online dating domain, this is particularly important in avoiding overloading pop-ular users as well as neglecting those who are not popular. And both these are related since ensuring more unpopular people are recommended fits well with making fewer recom-mendations with the popular. Although such recommender may well reduce the classic recommender success measures, it may be critical to broader success. In this study, we have neither favoured popular nor unpopular users, we believe that reciprocation can inherently distribute the load. The attributes of popular users skew the distribution of prefer-ences towards them (meaning that most users will like some-one popular -the essence of their popularity); however, the reciprocation component aims to ensure that the person who is recommended to a user will reciprocate (and this person may well not be popular). Future research will explore this aspect of distribution load for reciprocal recommenders and their effect in the quality of the recommendations.
Reciprocal recommenders represent an important class of recommender systems. RECON represents an exploration of this space with strong results in terms of the contribu-tion of reciprocity and its power to tackle the cold-start problem. There are many potential people-people recom-menders, some clearly matching individuals, as in the case of online dating, matching mentors and mentees, providing a useful helper, in contexts such as the workplace or educa-tional settings. There are many other, somewhat less direct cases of reciprocal recommenders, such as job finding where the potential employee is to be matched with a job, or more precisely, an employer. While a job is not a person, it is under the control of the employer, and that involves people judging the suitability of potential employees. While the roles in this case are less symmetric than in online dating, the properties identified for reciprocal recommenders apply. In some systems, the job seeker has the active role, with the potential employer being reactive, as they wait for applica-tions in response to their advertised jobs. In head-hunting systems, the roles are reversed, with the employer actively approaching registered people. This active-reactive aspect of reciprocal recommenders has been significant in our anal-ysis, design and evaluation.

A distinctive feature of our online dating testbed is the richness of information about the users, including substan-tial useful data from user X  X  answers to closed questions. As we have observed, the nature of reciprocal recommenders makes such explicit profiles an invaluable base. In other reciprocal recommender domains, such as job finding, the user profiles are more diverse as are the job requirements. Therefore, further experiments in reciprocal recommenders involve studies on other reciprocal domains such as employ-ment recommenders and friend search in social networks. This research was funded by the Smart Services Co-operative Research Centre. [1] X. Amatriain, J. M. Pujol, and N. Oliver. I like it... i [2] X. Amatriain, J. M. Pujol, N. Tintarev, and N. Oliver. [3] L. Bro X zovsk  X y and V. Pet X r  X  X  X cek. Recommender system [4] S. Bull, J. E. Greer, G. I. McCalla, L. Kettel, and [5] R. Burke. Hybrid recommender systems: Survey and [6] J. Chen, W. Geyer, C. Dugan, M. Muller, and I. Guy. [7] M. Claypool, P. Le, M. Wased, and D. Brown. Implicit [8] A. T. Fiore and J. S. Donath. Homophily in online [9] J. Freyne, M. Jacovi, I. Guy, and W. Geyer.
 [10] J. Greer, G. McCalla, J. Collins, V. Kumar, [11] G. Hitsch, A. Horta  X csu, and D. Ariely. What makes [12] D. Kelly and J. Teevan. Implicit feedback for inferring [13] Y. S. Kim, B. Yum, J. Song, and S. Kim. Development [14] J. A. Konstan, B. N. Miller, D. Maltz, J. L. Herlocker, [15] J. Malinowski, T. Keim, O. Wendt, and T. Weitzel. [16] D. W. Oard and J. Kim. Implicit feedback for [17] S. T. Park and W. Chu. Pairwise preference regression [18] Y.-J. Park and A. Tuzhilin. The long tail of [19] M. J. Pazzani. A framework for collaborative, [20] L. Pizzato, T. Chung, T. Rej, I. Koprinska, K. Yacef, [21] L. Pizzato, T. Rej, T. Chung, K. Yacef, I. Koprinska, [22] D. Richards, M. Taylor, and P. Busch. Expertise [23] B. M. Sarwar, G. Karypis, J. A. Konstan, and [24] A. I. Schein, A. Popescul, L. H. Ungar, and D. M. [25] L. Terveen and D. W. McDonald. Social matching: A
