 1. Introduction A mobile ad hoc network (MANET) ( Perkins, 2001; Siva Ram
Murthy and Manoj, 2004; Toh, 2002 ) is a self-organizing and self-configuring multi-hop wireless network, which is comprised of a set of mobile hosts (MHs) that can move around freely and cooperate in relaying packets on behalf of one another. A MANET supports robust and efficient operations by incorporating the routing functionality into MHs. In multi-hop networks, routing is one of the most important issues that has a significant impact on the network X  X  performance. In a MANET, each mobile node is a router and forwards packets on behalf of other nodes. Multi-hop forwarding paths are established for nodes beyond the direct wireless communication range. Routing protocols for MANETs must discover such paths and maintain connectivity when links in these paths break due to effects such as the node movement, battery drainage, radio propagation, and wireless interference. Multicast ( Wang and Hou, 2000; Kuipers and Mieghem, 2002;
Wang et al., 2006 ) is an important network service, which is the delivery of information from a source to multiple destinations simultaneously using the most efficient strategy to deliver the messages over each link of the network only once, creating copies only when the links to the destinations split. It provides under-lying network support for collaborative group communications, such as the video conference, distant education, and content distribution. Group communications in MANETs are also impor-tant in the support of mobile nodes to work in a cooperative way (Law et al., 2005 ). Quality-of-service (QoS) requirements ( Xiao and Ni, 1999) proposed by different network applications are often versatile. Among them, the end-to-end delay ( Parsa et al., 1998; Jia, 1998) is a pretty important QoS metric since the real-time delivery of multimedia data is required. An efficient QoS multicast algorithm should construct a multicast routing tree, by which the data can be transmitted from the source to all the destinations with a guaranteed QoS. The multicast tree cost, which is used to evaluate the utilization of network resources, is also an important metric especially in wireless mobile networks where limited radio resources are available.

In this paper, the QoS multicast routing in MANETs is investigated. The QoS multicast routing problem involves a classical combinatorial optimization problem arising in many design and planning contexts ( Oliveira and Pardalos, 2005; Tyan et al., 2003; Xue, 2003 ). In a MANET, the network topology keeps changing due to its inherent characteristics, such as the node mobility and energy conservation. Therefore, the multicast problem in MANETs turns out to be a dynamic optimization problem (DOP). An effective multicast algorithm should track the topological changes and adapt the best multicast tree to the changes accordingly. There are mainly two types of algorithms for the multicast problem: the deterministic algorithms and the search heuristics. Given the multicast request, only one multicast tree is constructed for a given topology by a determi-nistic algorithm, e.g., the shortest path tree (SPT) ( Narvaez et al., 2000) algorithm. However, by the search heuristics, such as genetic algorithms (GAs) ( Gen and Cheng, 2000 ) and simulated annealing (SA) algorithms ( Wang et al., 2006 ), lots of multicast trees are searched and the best one is selected as the final result.
All the deterministic algorithms have polynomial time com-plexity. Therefore, they will be effective in fixed infrastructure wireless or wired networks. But, they exhibit an unacceptably high computational complexity for real-time communications involving rapidly changing network topologies ( Ahn et al., 2001;
Ahn and Ramakrishna, 2002 ). Therefore, for the dynamic multi-cast problem in a changing network environment, the search heuristics are worthy of investigation. In recent years, studying evolutionary algorithms (EAs) for DOPs has attracted a growing interest due to its importance in EA X  X  real world applications (Yang and Yao, 2008 ). The simplest way of addressing DOPs is to restart EAs from scratch whenever an environment change is detected. Although the restart scheme really works for some cases (Yang and Yao, 2005 ), for many DOPs it is more efficient to develop other approaches that make use of knowledge gathered from old environments. Over the years, several approaches have been developed for GAs to address dynamic environments (Branke, 2002; Morrison, 2004; Weicker, 2003 ), such as main-taining diversity during the run via random immigrants ( Gre-fenstette, 1992; Vavak and Fogarty, 1996 ) and increasing diversity after a change.

In this paper, we adapt and investigate several genetic algorithms that are developed to deal with general DOPs to solve the dynamic multicast routing problem. First, we design the components of the standard GA specifically for the dynamic multicast problem. Then, we integrate several immigrants schemes into the GA to enhance its searching capacity of the optimal multicast tree in dynamic environments. Once the topo-logy is changed, the new immigrants can help guide the search of good solutions in the new environment. For the comparison purpose, we also implement two traditional GA schemes, i.e.,
Standard GA and Restart GA, as the peer algorithms. By simulation experiments, these GAs are evaluated under different parameter settings to find the best combinations. More importantly, they are evaluated under various settings of dynamic environments to see the performance and find the best match between algorithms and environmental characteristics. Generally speaking, the investi-gated well-designed GAs work well in the dynamic real-world networks.

The rest of this paper is organized as follows. Section 2 discusses related work. The network model and problem model are provided in Section 3. The design of a GA for the multicast problem is presented in Section 4. We describe the GAs with immigrants schemes for the dynamic multicast routing problem in Section 5. Section 6 presents the extensive experimental results and analysis. Finally, Section 7 concludes this paper. 2. Related work
Multicast routing trees produced by deterministic algorithms can be classified into two types, i.e., Steiner minimum tree (SMT) (Hwang and Richards, 1992 ) and shortest path tree ( Narvaez et al., 2000). An SMT is also the minimum-cost multicast tree. An SPT is constructed by applying the shortest path algorithm to find the shortest (e.g., minimum cost or delay) path from the source to each destination and then merging them. The problem of finding an SMT has been proved to be NP-complete ( Jia et al., 1997) and lots of approximation algorithms ( Aharoni and Cohen, 1998; Helvig et al., 2000; Robins and Zelikovsky, 2000) have been developed. An SPT provides a good solution for finding delay-constrained multicast tree because it determines the minimum delay path from the source to each destination. Inspired by SMT and SPT, many heuristic algorithms ( Parsa et al., 1998; Jia, 1998; Khuller et al., 1995 ) have been proposed to construct a QoS-aware multicast tree by making a tradeoff between them. QoS multicast routing is still a challenging problem due to its intractability and comprehensive application backgrounds. The research on it has lasted for decades and is still going on.

Intelligent search heuristics is a type of promising techniques to solve combinatorial optimization problems ( Papadimitriou and Steiglitz, 1998) including the SMT problem. GAs are a class of representative intelligent global search heuristics. GAs are a type of stochastic meta-heuristic optimization methods that model the biological principles of Darwinian theory of evolution and Mendelian principles of inheritance ( Goldberg, 1989; Holland, 1975). GAs have been extensively used in solving the QoS multicast problems in various networks such as the wired multimedia networks ( Wang et al., 2006 ) and optical networks (Din, 2005 ). As one of our previous work ( Wang et al., 2006 ), we also developed a unified framework for achieving QoS multicast trees using intelligent search heuristics and proposed three QoS multicast algorithms based on GAs, simulated annealing, and tabu search, separately.

In Wang et al. (2006) , the binary encoding is adopted where each bit of the binary string corresponds to a different node in the network. For each binary string, a graph G 0 is derived from the network topology G by including all the nodes appearing in the string and the links connecting these nodes. Then, the minimum spanning tree T of G 0 acts as the candidate multicast tree represented by the binary string. This encoding method is a bit complicated and each binary string cannot directly represent a candidate solution. A multicast tree is a union of the routing paths from the source to each receiver. Hence, it is a natural choice to adopt the path-oriented encoding method ( Ahn and Ramakrishna, 2002; Din, 2005 ) instead of the binary encoding.

In MANETs, a number of multicast routing protocols, using a variety of basic routing algorithms and techniques, have been proposed over the past few years ( Cordeiro et al., 2003 ). However, they mainly focus on the discovery of the optimal multicast forwarding structure (i.e., tree or mesh) spanning mobile nodes and do not consider the everlasting changes in the network topologies. Topology dynamics is the inherent characteristics in wireless mobile networks. For example, at time T 1 , the network topology is G 1 . At time T 2 , the network topology may change to G Although G 1 and G 2 are different, they are highly relevant since each change alters part of the topology only. Therefore, the solutions obtained on G 1 could benefit the search of good solutions on G 2 . An effective multicast algorithm should track the topological changes and adapt the multicast trees to the changes accordingly. We are not aware of any other work that considers the dynamic multicast routing in the environment where the network topology keeps changing in a contiguous way, although there are quite a few works that are related to some relevant aspects. For example, some researchers have investigated the multicast problem where the dynamic group membership exists ( Adelstein et al., 2003; Yong et al., 2008 ). In a dynamic group, nodes are allowed to join or leave it.
 3. Network and problem model
In this section, the model of a MANET is first presented and then the dynamic multicast routing problem is formulated. We consider a MANET operating within a fixed geographical region. It is modelled by a undirected and connected topology graph G
E ), where V 0 represents the set of wireless nodes (i.e., routers) and E 0 represents the set of communication links connecting two neighboring routers falling into the radio transmission range. A communication link ( i , j ) cannot be used for packet transmission unless both node i and node j have a radio interface each with a common channel. However, the channel assignment is beyond the scope of this paper. In addition, message transmission on a wireless communication link will incur remarkable delay and cost.

We summarize the notations that are used throughout this paper as follows:
G ( V 0 , E 0 ), the initial MANET topology graph.

G ( V i , E i ), the MANET topology graph after the i th change. s , the source node of the multicast request.
 R ={ r 0 , r 1 , y r m }, the set of receivers of the multicast request.
T  X  V T i ; E T i  X  , a multicast tree with nodes V T i and links E P  X  s ; r j  X  , a path from s to r j on the tree T i . d , the transmission delay on the communication link l . c , the cost on the communication link l .
 C i , the cost of the tree T i .
 D  X  P i  X  , the total transmission delay on the path P i .
The dynamic multicast routing problem can be informally described as follows. Initially, given a MANET consisting of wireless routers, a delay upper bound, and a multicast commu-nication request from a source node to a set of receiver nodes, we wish to find a delay-bounded least cost loop-free multicast tree on the topology graph. 1 Then, after each topology change, the objective of our problem is to quickly find the new delay-constrained least cost acyclic tree.

It is an extremely difficult job to completely model the network dynamics in a single way. Here, we propose two models to describe it and they are named as the general dynamics model and the worst dynamics model, respectively. In the general model, periodically or stochastically, due to energy conservation or other reasons, some nodes are scheduled to sleep or some sleeping nodes are scheduled to wake up. Therefore, the network topology changes from time to time. Since in most cases, the selected nodes may not belong to the present best multicast tree, the topological changes have relatively moderate effect on the routing problem.
In the worst model, each change is generated manually by removing a few links on the present best multicast tree. Thus, the topological changes will destroy the present best solution and thereby cause the worst effect on the problem. Although these two models cannot cover the full cases of network dynamics, they correspond to the general scenario and the worst scenario, respectively. Based on these two representative models, the multicast routing problem can be investigated in a relatively thorough way.

More formally, we consider a MANET G ( V , E ) and a multicast communication request from the source node s to the set of receivers R with the delay upper bound D . The dynamic delay-constrained multicast routing problem is to find a series of trees f T j i satisfy the delay constraint as shown in Eq. (1) and have the least tree cost as shown in Eq. (2): max 8 &lt; :
C  X  T  X  X  min 4. Design of the GA for the dynamic QoS multicast problem 4.1. Genetic representation
As mentioned before, a multicast tree is a union of the routing paths from the source to each receiver. Hence, it is a natural choice to adopt the path-oriented encoding method ( Ahn and
Ramakrishna, 2002; Din, 2005 ). A routing path is encoded by a string of positive integers that represent the IDs of nodes through which the path passes. Each locus of the string represents an order of a node. The first locus is for the source and the last one is for the receiver. The length of a routing path should not exceed the maximum length j V j , where V is the set of nodes in the network.
For a multicast tree T spanning the source s and the set of receivers R , there are j R j routing paths all originating from s .
Therefore, a tree is encoded by an integer array in which each row encodes a routing path along the tree. For example, for a tree T that spans s and R , the j -th row in the corresponding array A lists up node IDs on the routing path from s to r j along T . Therefore, A is an array of j R j rows. Fig. 1 illustrates a multicast tree and its representation in an array. All the solutions are encoded under the delay constraint. In case the delay constraint is violated, the encoding process is usually repeated so that it is satisfied. 4.2. Population initialization In a GA, each chromosome corresponds to a potential solution.
The initial population Q is composed of a certain number, denoted as q , of chromosomes. A general method to initialize the population is to explore the genetic diversity. That is, for each chromosome, all its routing paths are randomly generated. We start to search a random path from s to r j A R by randomly selecting a node v 1 from N ( s ), the neighborhood of s . Then, we randomly select a node v 2 from N ( v 1 ). This process is repeated until r j is reached. Thus, we get a random path P T ( s , r y , r j }. Since no loop is allowed on the multicast tree, the nodes that are already included in the current tree are excluded, thereby avoiding reentry of the same node. In this way, the initial population Q ={ Ch 0 , Ch 1 , y , Ch q 1 } is obtained. The pseudo-code is shown in Algorithm 1.

Algorithm 1. Population initialization. 1: i  X  : 0; 2: while i o q do 3: // Generate chromosome Ch i 4: j  X  : 0; 5: V T :  X  E T :  X  | ; 6: while j o j R j do 7: Search a random path P T ( s , r j ) which can guarantee 8: Add all the nodes and links in P T into V T and E T , 9: j ++; 10: end while 11: i ++; 12: end while 4.3. Fitness function
Given a solution, its quality should be accurately evaluated by the fitness value, which is determined by the fitness function. In our algorithms, we aim to find the least cost multicast tree from the source to a set of receivers. The criterion used to evaluate the solution quality is the tree cost. Therefore, among a set of candidate solutions (i.e., multicast trees), we choose the one with the minimal tree cost. The fitness value of chromosome Ch (representing the tree T ), denoted as f ( Ch i ), is given by f  X  Ch i  X  X 
The proposed fitness function is to be maximized and only involves the total tree cost. As mentioned above, the delay constraint is checked for each chromosome during the evolu-tionary process. 4.4. Selection scheme
Selection plays an important role in improving the average quality of the population by passing the high quality chromo-somes to the next generation. The selection of chromosomes is based on the fitness value. We adopt the scheme of pair-wise tournament selection without replacement ( Lee et al., 2008 )asit is simple and effective. 4.5. Crossover and mutation
The performance of a GA relies heavily on two basic genetic operators, i.e., crossover and mutation. Crossover exchanges part of the current solutions in order to find better ones. Mutation helps a GA keep away from local optima. The type and implementation of operators depends on the encoding and also on a problem.

In our algorithm, since a chromosome is expressed by a tree data structure, we adopt a single point crossover to exchange partial chromosomes (sub-trees) at positionally independent crossing sites between two chromosomes ( Ahn and Ramakrishna, 2002). With a crossover probability, each time we select two chromosomes Ch i and Ch j for crossover. To at least one receiver, Ch i and Ch j should possess at least one common node from which one, denoted as v , is randomly selected. In Ch i , there is a path consisting of two parts: ( s ! Ch i v ) and ( v ! Ch i r k path consisting of two parts: ( s ! Ch j v ) and ( v ! Ch operation exchanges the paths ( v ! Ch i r k ) and ( v ! Ch illustrates a crossover operation, where node 13 is the selected receiver and node 11 is the selected common node. The partial paths  X  11 -12 -13  X  and  X  11 -8 -13  X  are swapped.
The population will undergo the mutation operation after the crossover operation is performed. With a mutation probability, each time we select one chromosome Ch i on which one receiver r is randomly selected. On the path ( s ! Ch i r k ) one gene is selected as the mutation point (i.e., mutation node) denoted as v . The mutation will replace the path ( v ! Ch i r k ) by a new random path.
Both crossover and mutation may produce new chromosomes which represent infeasible solutions. Therefore, we check whether the multicast trees represented by the new chromosomes are acyclic. If not, the repair function used in Oh et al. (2006) will be applied to eliminate the loops. The delay checking is incorporated into both the crossover and mutation operations to guarantee that all the new chromosomes produced satisfy the delay constraint. 5. Investigated GAs for the dynamic multicast problem
In this paper, we investigate both traditional GAs and immigrants based GAs for the dynamic QoS multicast problem.
As mentioned in Section 3, we propose two models to describe the practical network dynamics. Under the general dynamics model,
GAs with immigrants schemes are applied. However, under the worst dynamics model, improved GAs with immigrants schemes are proposed to help conquer the extra difficulties arisen from the topology changes. 5.1. Traditional GAs
The dynamic QoS multicast problem can still be addressed using the specialized GA described above with two variants, denoted
Standard GA (SGA) and Restart GA . In the SGA, when an environ-mental change leads to infeasible solutions, SGA handles them by taking the measure of penalty. That is, infeasible solutions are set to a very low fitness. In this way, the population in SGA can keep evolving even in a continuously changing environment. In the
Restart GA, once a change is detected, the population will be re-initialized based on the new network topology. 5.2. GAs with immigrants schemes
In stationary environments, convergence at a proper pace is usually what we expect for GAs to locate the optimum solutions for many optimization problems. However, for DOPs, convergence usually becomes a big problem for GAs because changing environments usually require GAs to keep a certain population diversity level to maintain their adaptability. To address this problem, the random immigrants approach is a quite natural and simple way ( Grefenstette, 1992; Tinos and Yang, 2007; Yang and Tinos, 2007; Yu et al., 2009, 2008 ). It was proposed by
Grefenstette with the inspiration from the flux of immigrants that wander in and out of a population between two generations in nature. It maintains the diversity level of the population through replacing some individuals of the current population with random individuals, called random immigrants , every generation. As to which individuals in the population should be replaced, usually there are two strategies: replacin g random individuals or replacing the worst ones ( Vavak and Fogarty, 1996). In this paper, the random immigrants based GA, denoted RIGA , uses the second replacement strategy, i.e., random immigrants replace the worst individuals of the current population. In order to avoid that random immigrants disrupt the ongoing search progress too much, especially during the period when the environment does not change, the ratio of the number of random immigrants to the population size is usually set to a small value, e.g., 0.2.

However, in a slowly changing environment, the introduced random immigrants may divert the searching force of the GA during each environment before a change occurs and hence may degrade the performance. On the other hand, if the environment only changes slightly in terms of the severity of changes, random immigrants may not have any actual effect even when a change occurs because individuals in the previous environment may still be quite fit in the new environment. Based on the above consideration, an immigrants approach, called elitism-based immigrants, was proposed for GAs to address DOPs ( Yang, 2007). The elitism-based immigrants GA (EIGA) is also investi-gated for the dynamic QoS multicast problem in this paper. The pseudo-code for the EIGA is given in Fig. 3 .

Within the EIGA, for each generation t , after the normal genetic operations (i.e., selection and recombination), the elite E ( t 1) from the previous generation is used as the base to create immigrants. From E ( t 1), a set of r ei n individuals are iteratively generated by mutating E ( t 1) with a probability p m i , where n is the population size and r ei is the ratio of the number of elitism-based immigrants to the population size. The generated indivi-duals then act as immigrants and replace the worst individuals in the current population. It can be seen that the elitism-based immigrants scheme combines the idea of elitism with traditional random immigrants scheme. It uses the elite from the previous population to guide the immigrants toward the current environ-ment, which is expected to improve the performance of GAs in dynamic environments.

In order to address significant changes that the dynamic QoS multicast problem may suffer, the elitism-based immigrants can be hybridized with traditional random immigrants scheme. The
GA with the hybrid immigrants scheme, denoted HIGA , is also investigated in this paper. Within HIGA, in addition to the r immigrants created from the elite of the previous generation, r n immigrants are also randomly created, where r ri is the ratio of the number of random immigrants to the population size. These two sets of immigrants will then replace the worst individuals in the current population. The pseudo-code for HIGA is also shown in Fig. 3 .
 In our implementation of elitism-based immigrants in both EIGA and HIGA, if the mutation probability p m i is satisfied, the elite
E ( t 1) will be used to generate new immigrants by a mutation operation; otherwise, E ( t 1) itself will be directly used as a new immigrant.
 5.3. Improved GAs with immigrants schemes
In the proposed worst model of network dynamics, every change is caused by removing a few links from the present optimal multicast tree. Therefore, when the environment changes, the present population undergoes dramatic changes and some individuals become infeasible. The general immigrants based GAs do not consider this case and thereby cannot perform well under the worst dynamics model. We propose improved RIGA, EIGA, and
HIGA, denoted as iRIGA , iEIGA , and iHIGA , respectively, to address these difficulties.

When there is no environmental changes detected, the above three improved immigrants based GAs just follow the procedures of their corresponding original GAs, respectively. When a change occurs, in iRIGA, all the infeasible individuals are replaced by random immigrants. In iEIGA, all the infeasible individuals are repaired to become feasible and then the elitism is re-selected. In iHIGA, when the environmental change occurs, for each infeasible solution, we either replace it by a random immigrant or repair it with an equal probability of 0.5.

In iEIGA, since the infeasible solutions are previous elitisms, it is required to keep as many feasible components in them as possible. Therefore, the repair should result in the least change to the tree structure. The proposed repair method works as follows.
For each removed link, we search a random path starting from its downstream node. Once an existing tree node is encountered, the search ends. This random path is added to the tree to solve the unconnected problem caused by that removed link. After all the removed links are dealt with, the tree becomes feasible again.
Intuitively, this simple method can repair an infeasible tree with the least cost added. 6. Performance evaluation
In the simulation experiments, we implement the two traditional GAs (i.e., SGA and Restart GA) and the six immigrants based GAs (i.e., RIGA, EIGA, HIGA, iRIGA, iEIGA, and iHIGA) for the dynamic QoS multicast problem. In SGA, if the change makes one individual in the current population infeasible (e.g., one or more links in the corresponding path are lost), a penalty value is added to its tree cost. By simulation experiments, their performance is evaluated in a continuously changing wireless network. The simulation software for both the dynamic topology generation and the various GAs are developed using C++. The experiments were run on a 160 CPU AMD Opteron cluster system, which is provided by the University of Leicester X  X  Centre for Mathematical
Modelling as the shared high-performance computing resources. 6.1. Dynamic test environments 6.1.1. Common issues
Since we consider two dynamics models (i.e., the general one and the worst one), two dynamic test environments are set up accordingly. The initial network topology is generated using the following method. We first specify a square region with the area of 200 200 that has the width [0, 200] on the x axis and the height [0, 200] on the y axis. Then, we generate 100 nodes and the position ( x , y ) of each node is randomly specified within the square area. If the distance between two nodes falls into the radio transmission range D , a link will be added to connect them and both the cost and the delay of this link are randomly assigned within the corresponding ranges. Finally, we check if the generated topology is connected. If not, the above process is repeated until a connected topology is generated. In the experi-ments, D is given a reasonable value 50. Each topology is represented by three arrays. One array uses 1 or 0 to represent whether two links are connected or not. The other two arrays give the corresponding cost and delay values of each link, respectively.
In both models, all the algorithms start from the initial network topology. Every certain number (say, I ) of generations (i.e., the change interval), the network topology is changed in a way corresponding to the dynamics model used. It can be seen that I determines the change frequency. The larger the value of I , the slower the problem changes. In the following experiments, we set I to 5, 10 and 15 separately to see the impact of the change frequency on the performance of dynamic GAs. In all the experiments, the crossover probability was set to 0.95 and the mutation probability was set to 0.05. For RIGA, iRIGA, EIGA, and iEIGA, the ratios of the number of immigrants to the population size, r ri and r ei , were set to 0.2. However, in HIGA and iHIGA, to guarantee the comparison fairness, that is, the same number of immigrants are introduced every generation, r ri and r ei 0.1. In EIGA, iEIGA, HIGA, and iHIGA, the mutation probability p for generating new immigrants, was set to 0.8. Both the source and destination nodes were randomly selected. The delay upper bound D was set to be 2 times of the minimum end-to-end delay.
In order to have fair comparisons among GAs, the population size and immigrants ratios were set such that each GA has 60 fitness evaluations per generation as follows:  X  1  X  r i  X  n  X  60 ;  X  4  X  where n is the whole population size, which was set to 50 in Section 6.2.1. Hence, we have n =60 for SGA and Restart GA, and n =50 for RIGA, EIGA, HIGA, iRIGA, iEIGA, and iHIGA. At each generation, for each algorithm, we select the best individual from the current population and output the cost of the optimal tree represented by it. For each experiment of an algorithm on a dynamic problem, 10 independent runs were executed with the same set of random seeds. For each run, 20 environmental changes were allowed under both dynamics models, which are equivalent to 105, 210, and 315 generations, including the initial environment, for I =5, 10, and 15, respectively. For each run, the best-of-generation fitness was recorded every generation. The overall offline performance of a GA on a DOP is defined as F where G is the total number of generations for a run, N =10 is the total number of runs, and F BOG ij is the best-of-generation fitness of generation i of run j . F BOG is the off-line performance, i.e., the best-of-generation fitness averaged over the 10 runs and then over the data gathering period. 6.1.2. Environmental changes under the general dynamics model
In the general dynamics model, every I generations, a certain number (say, M ) of nodes are scheduled to sleep or wake up depending on their current status. It means that the selected working nodes will be turned off to sleep and the selected sleeping nodes will be turned on to work. Therefore, the network topology is changed accordingly since some links are lost and some other links appear again. The nodes are randomly selected and thereby the affected links may belong to the present multicast tree or not. The source and destination nodes are not allowed to be scheduled in any change. By this means, we create a series of network topologies corresponding to the continuous environmental changes. Furthermore, these adjacent topologies are highly related since each time the change affects only part of the nodes.

It can be seen that M determines the change severity. The larger the value of M , the more severe the changes. We set M to 2 and 4, respectively. Thus, by the number of nodes changed per time, we have two different series of topologies. When M is set to 2 and 4, we generate the topology series #2 and #4, respectively.
Each of these two series has 21 different topologies. All the experiments under the general model are based on these two topology series. We set up experiments to evaluate the population size and the improvements over traditional GAs using RIGA, EIGA and HIGA. 6.1.3. Environment changes under the worst dynamics model
In the worst dynamics model, every I generations, the present best multicast tree is first identified. Then, a certain number (say,
U ) of links on the tree are selected for removal. It means that the selected links will be forced to be removed from the network topology. Just before the next change occurs, the network topology is recovered to its original state and ready for the coming change. The population is severely affected by each topology change since the optimal solution and possibly some other good solutions become infeasible suddenly. To be fair, at most one link is allowed to be removed on the tree path from the source to each receiver. We let U range from 1 to 3 to see the effect of the change severity.

Under the worst dynamics model, the topology series cannot be generated in advance because every change is correlated with the algorithm running. However, similarly, we also allow 20 changes. We set up the experiments to evaluate the impact of the change interval and the change severity, and the improvements over traditional GAs using iRIGA, iEIGA and iHIGA. 6.2. Experimental results and analysis 6.2.1. Under the general dynamics model
First, we investigate the effect of the population size on the performance of GAs and determine a proper population size that ensures a specified quality of solutions. We pick up HIGA as an example and run it over topology series #2. Here, I was set to 10.
The population size was varied from 30 to 60 to see if an appropriate population size can be determined for this problem.
Since there are 21 topologies in each series, HIGA evolves 21 I generations in total. We sample the first 200 generations to plot the figures. Figs. 4(a) and (b) show the results over topology series #2.
Figs. 4 (a) and (b) show that on the average HIGA achieves the best performance at the population size of 50. When the population size is increased to 60, the algorithm performance degrades on most of the time. Other algorithms are checked and similar results are found. Therefore, we conclude that 50 is the best choice for the population size for our problem. From
Figs. 4 (a) and (b), it can also be seen that many times when a change occurs, the algorithms are not affected. The reason lies in that the topology changes may not always affect the current population, especially the optimal individual in the population.
For example, if the nodes that are scheduled to sleep or wake up in one change are not on the tree represented by the optimal individual, the optimal individual has a very high probability to stay in the population unaffected. This explains why the algorithms rarely react to the change drastically. However, under the worst dynamics model, we will see totally different results.
Since under the general dynamics model, the environment changes do not have significant effects on the GAs, the investiga-tion on both the change interval and the change severity are put under the worst dynamics model. However, under this model, we are still interested in the comparison between the dynamic GAs with the traditional GAs over the dynamic multicast problem.
Since the dynamic GAs are designed for the dynamic environ-ments, they should show a better performance than the traditional GAs over our problem. We compared RIGA, EIGA, and
HIGA with SGA and Restart GA in the experiments using topology series #2 and #4 as the two dynamic environments. The interval of changes was set to 10 here.

Figs. 5 (a) and (b) show the comparison results over topology series #2 and #4, respectively. From Figs. 5 (a) and (b), it can be seen that SGA always exhibits the worst performance. When the topology is changed and infeasible solutions occupy the population, SGA cannot recover the population by generating new feasible solutions through the standard evolutionary operations. Therefore, simple penalty cannot make the popu-lation adapt to the complicated environmental changes. On average, the Restart GA is also worse than any of the three immigrants based GAs. The reason is that the Restart GA does not exploit any useful information in the old environment and that the frequent restart sacrifices its evolving capability. Immigrants bring more diversity to the populations in RIGA, EIGA and HIGA and therefore enhance their search capabilities. Among the three dynamic GAs, EIGA achieves the worst performance in most of the time. The reason lies in that in EIGA, new immigrants are generated from the mutation of the elitism. In our problem, the mutation operation just changes a partial path on the tree. Thus, the new immigrants share most of the tree components and bring less diversity into the population than RIGA and HIGA.
The corresponding statistical results of comparing these GAs under the general dynamics model by a one-tailed t -test with 18 degrees of freedom at a 0.05 level of significance are given in Table 1 .In Table 1 , the t -test result regarding Alg .1 Alg. 2 is better than, insignificantly worse than, significantly better than, or significantly worse than Alg . 2, respectively.
In addition to the overall best-of-generation solution quality, we also want to compare different GAs in a statistical way. Since each algorithm is repeated 10 times under the same experimental setting and dynamic environment, each algorithm has 10 inde-pendent evolution procedures. For each run, we calculate the mean value of the best-of-generation solutions over the whole evolution procedure. Therefore, we get 10 mean values for each algorithm in the same experiment. Table 2 shows the comparison results in terms of the mean value and the corresponding variance of the best solutions at all the generations of each run over topology series #2. The change interval was set to 10. Since the best-of-generation value at each change point may be drastically different from the values at other generations, we exclude them from the calculation. The results in Table 2 approximately match the results presented in Fig. 5 (a).

All the above results reveal the algorithm performance by the best-of-generation solution quality. However, not only the statistical values of the best-of-generation are interesting, but also the statistics of the total population can give some insights into the operation of algorithms. For all the GAs, we compared the results about the mean-of-generation solution quality over a typical run. Fig. 6 shows the comparison results for RIGA, EIGA,
HIGA, SGA, and Restart GA over topology series #2. We also calculated the variance for the whole population at each generation. However, due to the extremely large value interval where these variance values fall into, the figures cannot be plotted. We list the variance values of 10 generations in Table 3 .
However, these results are just based on one run, they can only be used to observe the whole population performance instead of evaluating the algorithms. 6.2.2. Under the worst dynamics model
First, we investigate the impact of the change interval on the performance of algorithms. Here, the number of links removed per change was set to 2. When the change interval is 5, the population evolves only five generations between two sequential changes. Intuitively, a larger interval will give the population more time to evolve and search better solutions than what a smaller interval does. We take both iRIGA and iHIGA as examples to compare the quality of solutions obtained under different change intervals. However, one problem is that the total generations are different for different change intervals. There are 100, 200, and 300 generations corresponding to the change interval 5, 10, and 15, respectively, when there are 20 different topologies. Since the number of change points (i.e., the generation at which a new topology is applied) is the same for all the intervals, we take the data at each change point and its previous two and next two generations. Thus, the three data sets can be aligned over the three intervals.

Figs. 7 (a) and (b) show the results regarding iRIGA and iHIGA, respectively. Since the generation number does not correspond to the actual generation number when the interval is 10 or 15, we rename it as pseudo generation. In Fig. 7 (a), over the 20 topologies, the iRIGA with change interval 15 achieves 11 best solutions while the iRIGA with change intervals 10 and 5 achieve 6 and 3, respectively. In Fig. 7 (b), over the 20 topologies, the iRIGA with change interval 15 achieves 16 best solutions while the iRIGA with change interval 10 achieves 4. It can be concluded that the solution quality becomes better when the change interval becomes larger. Therefore, in a relatively slowly changing environment, the improved immigrants based GAs can achieve a good performance.

Second, we investigate the impact of the change severity on the performance of algorithms. Under the worst dynamics model, the change severity is reflected by the number of links removed from the present optimal tree per change. Therefore, we generate two topology series by removing different number of links each change. One is to remove only one link each change and the other is to remove three links each change. These two topology series act as the two environments with different change severities. This time, we pick up iRIGA, iEIGA, and iHIGA together as the example algorithms and we set the change interval to 10. Figs. 8 (a) and (b) show the results in the two different environments, respectively.

From Fig. 8 (a), in can be seen that iRIGA takes almost nine generations to get its best solution after one change occurs. iEIGA takes about five generations to get its best solution. However, iHIGA can quickly adapt to the environmental changes and get the best solution among these three GAs in 90% of the time. Therefore, in the environment with a low change severity, iHIGA performs the best since it takes the advantages of both iRIGA and iEIGA.
From Fig. 8 (b), it can be seen that for both iRIGA and iHIGA, they need almost nine generations to get their best solutions after one change occurs and iHIGA achieves a better solution quality than iRIGA. However, in this environment with a high change severity, iEIGA performs very well which takes two to five generations to get the overall best solution. The reason is that in the highly dynamic environment, after a change occurs, the proposed repair method can reserve the useful components of the elitism and repair the broken part with the least added cost.
The new immigrants generated by repairing the elitisms can quickly adapt to the severe changes. However, as we have discussed under the general dynamics model, iEIGA brings a less diversity to the population compared to both iRIGA and iHIGA.
Therefore, we can conclude that these dynamic GAs respond to the environmental changes in a reasonable speed and perform well.

Third, we compare the dynamic GAs with the traditional GAs under the worst dynamics model. Here, the number of links removed per change is set to 2 and the change interval is 10.
Figs. 9 (a) and (b) show the results. Similar as under the general model, SGA performs the worst since it does not explicitly handle the environmental changes. Most of the time, Restart GA performs worse than all the improved immigrants based GAs. However, occasionally, iRIGA is worse than it. Overall, iEIGA is better than iHIGA as it has shown in the environment with a high change severity. It can be concluded that these three improved immigrants based GAs greatly outperform those two standard GAs under the worst dynamics model.

The corresponding statistical results of comparing these GAs under the worst dynamics model by a one-tailed t -test with 18 degrees of freedom at a 0.05 level of significance are given in Table 4 .

Similarly, as in the experiments under the general dynamics model, we also want to compare different GAs in a statistical way under the worst dynamics model. For each of the 10 runs, we calculated the mean value of the best-of-generation solutions over the whole evolution procedure. Table 5 shows the comparison results in terms of the mean value and the corresponding variance of the best solutions at all the generations of each run. The change interval was set to 10 and the number of links removed per change was set to 2. Similarly, we also excluded the best-of-generation value at each change point from the calculation. The results in Table 5 approximately match the results presented in Fig. 9 .

Similarly, we are also interested in the statistical values of the total population under the worst dynamics model since they can give insights on the operation of GAs. For all the improved GAs and traditional GAs, we compare the results regarding the mean-of-generation solution quality over a typical run. Fig. 10 shows the comparison results for iRIGA, iEIGA, iHIGA, SGA, and Restart GA.
We also calculated the variance for the whole population at each generation of each algorithm. However, also due to the extremely large value interval where these variance values fall into, the figures cannot be plotted. We list the variance values of 20 generations in Table 6 . It can be seen that iRIGA and Restart GA bring much higher variance values than other GAs. 7. Conclusions
Mobile ad hoc networks (MANETs) have seen various colla-borative multimedia applications which require an efficient information delivery service from a designated source to multiple receivers. An QoS multicast tree is preferred to support this service. However, the optimal QoS multicast routing problem is proved to be NP-hard. Quite some works have been done to address the static multicast problem by genetic algorithms. However, in MANETs, the topology dynamics makes this problem much harder to solve. So far, little work has been done on the dynamic multicast problem in mobile networks. By observing that immigrants based GAs (i.e., RIGA, EIGA, HIGA) perform very well over many dynamic benchmark problems, we apply them to the dynamic QoS multicast problem in MANETs in this paper. Based on the problem characteristics, we also propose three improved versions of immigrants based GAs, i.e., iRIGA, iEIGA, and iHIGA, to handle highly dynamic environments.

Extensive simulation experiments have been conducted to compare the proposed algorithms with traditional GAs. We highlight the investigation on the best-of-generation solu-tion quality since it represents the performance of algorithms. Meanwhile, we also investigate the mean value and variance of the best solutions over all the generations of each run. Furthermore, we also look inside the population by investi-gating the mean value and variance of all the individuals in the same population at each generation. All these experiments help reveal the performance of GAs in various aspects. Experimental results demonstrate that our algorithms can adapt to the environmental changes well and achieve better solutions after each change than the traditional GAs. Therefore, they are promising techniques for dealing with dynamic telecommunica-tion problems. Acknowledgments
The authors are grateful to the anonymous reviewers for their thoughtful suggestions and constructive comments. This work was supported by the Engineering and Physical Sciences Research Council (EPSRC) of UK under Grant EP/E060722/1.
 References
